

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Wed Mar 15 13:34:19 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    72                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1
    94                           	psect	text79,global,reloc=2,class=CODE,delta=1
    95                           	psect	text80,global,reloc=2,class=CODE,delta=1
    96                           	psect	text81,global,reloc=2,class=CODE,delta=1
    97                           	psect	text82,global,reloc=2,class=CODE,delta=1
    98                           	psect	text83,global,reloc=2,class=CODE,delta=1
    99                           	psect	text84,global,reloc=2,class=CODE,delta=1
   100                           	psect	text85,global,reloc=2,class=CODE,delta=1
   101                           	psect	text86,global,reloc=2,class=CODE,delta=1
   102                           	psect	text87,global,reloc=2,class=CODE,delta=1
   103                           	psect	text88,global,reloc=2,class=CODE,delta=1
   104                           	psect	text89,global,reloc=2,class=CODE,delta=1
   105                           	psect	text90,global,reloc=2,class=CODE,delta=1
   106                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   107                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   108                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   109  0000                     
   110                           ; Version 1.40
   111                           ; Generated 01/12/2016 GMT
   112                           ; 
   113                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
   114                           ; All rights reserved.
   115                           ; 
   116                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   117                           ; 
   118                           ; Redistribution and use in source and binary forms, with or without modification, are
   119                           ; permitted provided that the following conditions are met:
   120                           ; 
   121                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   122                           ;        conditions and the following disclaimer.
   123                           ; 
   124                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   125                           ;        of conditions and the following disclaimer in the documentation and/or other
   126                           ;        materials provided with the distribution.
   127                           ; 
   128                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   129                           ;        software without specific prior written permission.
   130                           ; 
   131                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   132                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   133                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   134                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   135                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   136                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   137                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   138                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   139                           ; 
   140                           ; 
   141                           ; Code-generator required, PIC18F4620 Definitions
   142                           ; 
   143                           ; SFR Addresses
   144  0000                     
   145                           	psect	idataBANK1
   146  00461C                     __pidataBANK1:
   147                           	opt stack 0
   148                           
   149                           ;initializer for UI@F3223
   150  00461C  4D                 	db	77
   151  00461D  4D                 	db	77
   152  00461E  4D                 	db	77
   153  00461F  00                 	db	0
   154                           
   155                           ;initializer for printRTC@F3214
   156  004620  4D                 	db	77
   157  004621  4D                 	db	77
   158  004622  4D                 	db	77
   159  004623  00                 	db	0
   160                           
   161                           	psect	mediumconst
   162  00FB26                     __pmediumconst:
   163                           	opt stack 0
   164  00FB26  00                 	db	0
   165  00FB27                     _keys:
   166                           	opt stack 0
   167  00FB27  31                 	db	49
   168  00FB28  32                 	db	50
   169  00FB29  33                 	db	51
   170  00FB2A  41                 	db	65
   171  00FB2B  34                 	db	52
   172  00FB2C  35                 	db	53
   173  00FB2D  36                 	db	54
   174  00FB2E  42                 	db	66
   175  00FB2F  37                 	db	55
   176  00FB30  38                 	db	56
   177  00FB31  39                 	db	57
   178  00FB32  43                 	db	67
   179  00FB33  2A                 	db	42
   180  00FB34  30                 	db	48
   181  00FB35  23                 	db	35
   182  00FB36  44                 	db	68
   183  00FB37  00                 	db	0
   184  00FB38                     __end_of_keys:
   185                           	opt stack 0
   186  00FB38                     _dpowers:
   187                           	opt stack 0
   188  00FB38  0001               	dw	1
   189  00FB3A  000A               	dw	10
   190  00FB3C  0064               	dw	100
   191  00FB3E  03E8               	dw	1000
   192  00FB40  2710               	dw	10000
   193  00FB42                     __end_of_dpowers:
   194                           	opt stack 0
   195  0000                     _ADCON0	set	4034
   196  0000                     _ADCON0bits	set	4034
   197  0000                     _ADCON1	set	4033
   198  0000                     _ADCON2	set	4032
   199  0000                     _ADRESH	set	4036
   200  0000                     _ADRESL	set	4035
   201  0000                     _CMCONbits	set	4020
   202  0000                     _CVRCON	set	4021
   203  0000                     _EEADR	set	4009
   204  0000                     _EEADRH	set	4010
   205  0000                     _EECON1bits	set	4006
   206  0000                     _EECON2	set	4007
   207  0000                     _EEDATA	set	4008
   208  0000                     _INTCONbits	set	4082
   209  0000                     _LATA	set	3977
   210  0000                     _LATAbits	set	3977
   211  0000                     _LATB	set	3978
   212  0000                     _LATC	set	3979
   213  0000                     _LATCbits	set	3979
   214  0000                     _LATD	set	3980
   215  0000                     _LATDbits	set	3980
   216  0000                     _LATE	set	3981
   217  0000                     _LATEbits	set	3981
   218  0000                     _OSCCON	set	4051
   219  0000                     _OSCTUNEbits	set	3995
   220  0000                     _PIR2bits	set	4001
   221  0000                     _PORTAbits	set	3968
   222  0000                     _PORTB	set	3969
   223  0000                     _PORTBbits	set	3969
   224  0000                     _SSPADD	set	4040
   225  0000                     _SSPBUF	set	4041
   226  0000                     _SSPCON1	set	4038
   227  0000                     _SSPCON2	set	4037
   228  0000                     _SSPSTAT	set	4039
   229  0000                     _T0CON	set	4053
   230  0000                     _T1CON	set	4045
   231  0000                     _T3CON	set	4017
   232  0000                     _TMR0H	set	4055
   233  0000                     _TMR0L	set	4054
   234  0000                     _TMR1H	set	4047
   235  0000                     _TMR1L	set	4046
   236  0000                     _TMR3H	set	4019
   237  0000                     _TMR3L	set	4018
   238  0000                     _TRISA	set	3986
   239  0000                     _TRISB	set	3987
   240  0000                     _TRISC	set	3988
   241  0000                     _TRISD	set	3989
   242  0000                     _TRISE	set	3990
   243  0000                     _ACKDT	set	32301
   244  0000                     _ACKEN	set	32300
   245  0000                     _ADIE	set	31982
   246  0000                     _INT1IE	set	32643
   247  0000                     _INT1IF	set	32640
   248  0000                     _PEIE	set	32662
   249  0000                     _PEN	set	32298
   250  0000                     _RCEN	set	32299
   251  0000                     _RSEN	set	32297
   252  0000                     _SEN	set	32296
   253  0000                     _TMR0IE	set	32661
   254  0000                     _TMR0IF	set	32658
   255  0000                     _TMR0ON	set	32431
   256  0000                     _TMR1IE	set	31976
   257  0000                     _TMR1IF	set	31984
   258  0000                     _TMR1ON	set	32360
   259  0000                     _TMR2IE	set	31977
   260  0000                     _TMR3IE	set	32001
   261  0000                     _TMR3IF	set	32009
   262  0000                     _TMR3ON	set	32136
   263  0000                     _TRISC3	set	31907
   264  0000                     _TRISC4	set	31908
   265  0000                     _nRBPU	set	32655
   266  00FB42                     STR_21:
   267  00FB42  25                 	db	37
   268  00FB43  30                 	db	48	;'0'
   269  00FB44  32                 	db	50	;'2'
   270  00FB45  64                 	db	100	;'d'
   271  00FB46  25                 	db	37
   272  00FB47  73                 	db	115	;'s'
   273  00FB48  20                 	db	32
   274  00FB49  7C                 	db	124
   275  00FB4A  20                 	db	32
   276  00FB4B  25                 	db	37
   277  00FB4C  30                 	db	48	;'0'
   278  00FB4D  32                 	db	50	;'2'
   279  00FB4E  64                 	db	100	;'d'
   280  00FB4F  3A                 	db	58	;':'
   281  00FB50  25                 	db	37
   282  00FB51  30                 	db	48	;'0'
   283  00FB52  32                 	db	50	;'2'
   284  00FB53  64                 	db	100	;'d'
   285  00FB54  3A                 	db	58	;':'
   286  00FB55  25                 	db	37
   287  00FB56  30                 	db	48	;'0'
   288  00FB57  32                 	db	50	;'2'
   289  00FB58  64                 	db	100	;'d'
   290  00FB59  00                 	db	0
   291  00FB5A                     STR_66:
   292  00FB5A  28                 	db	40
   293  00FB5B  64                 	db	100	;'d'
   294  00FB5C  61                 	db	97	;'a'
   295  00FB5D  74                 	db	116	;'t'
   296  00FB5E  61                 	db	97	;'a'
   297  00FB5F  3A                 	db	58	;':'
   298  00FB60  20                 	db	32
   299  00FB61  25                 	db	37
   300  00FB62  75                 	db	117	;'u'
   301  00FB63  2C                 	db	44
   302  00FB64  20                 	db	32
   303  00FB65  61                 	db	97	;'a'
   304  00FB66  64                 	db	100	;'d'
   305  00FB67  64                 	db	100	;'d'
   306  00FB68  72                 	db	114	;'r'
   307  00FB69  3A                 	db	58	;':'
   308  00FB6A  20                 	db	32
   309  00FB6B  25                 	db	37
   310  00FB6C  75                 	db	117	;'u'
   311  00FB6D  29                 	db	41
   312  00FB6E  00                 	db	0
   313  00FB6F                     STR_27:
   314  00FB6F  4E                 	db	78	;'N'
   315  00FB70  4F                 	db	79	;'O'
   316  00FB71  20                 	db	32
   317  00FB72  4C                 	db	76	;'L'
   318  00FB73  41                 	db	65	;'A'
   319  00FB74  42                 	db	66	;'B'
   320  00FB75  3A                 	db	58	;':'
   321  00FB76  20                 	db	32
   322  00FB77  25                 	db	37
   323  00FB78  64                 	db	100	;'d'
   324  00FB79  7C                 	db	124
   325  00FB7A  4C                 	db	76	;'L'
   326  00FB7B  41                 	db	65	;'A'
   327  00FB7C  42                 	db	66	;'B'
   328  00FB7D  3A                 	db	58	;':'
   329  00FB7E  20                 	db	32
   330  00FB7F  25                 	db	37
   331  00FB80  64                 	db	100	;'d'
   332  00FB81  00                 	db	0
   333  00FB82                     STR_25:
   334  00FB82  4E                 	db	78	;'N'
   335  00FB83  4F                 	db	79	;'O'
   336  00FB84  20                 	db	32
   337  00FB85  54                 	db	84	;'T'
   338  00FB86  41                 	db	65	;'A'
   339  00FB87  42                 	db	66	;'B'
   340  00FB88  3A                 	db	58	;':'
   341  00FB89  20                 	db	32
   342  00FB8A  25                 	db	37
   343  00FB8B  64                 	db	100	;'d'
   344  00FB8C  7C                 	db	124
   345  00FB8D  54                 	db	84	;'T'
   346  00FB8E  41                 	db	65	;'A'
   347  00FB8F  42                 	db	66	;'B'
   348  00FB90  3A                 	db	58	;':'
   349  00FB91  20                 	db	32
   350  00FB92  25                 	db	37
   351  00FB93  64                 	db	100	;'d'
   352  00FB94  00                 	db	0
   353  00FB95                     STR_107:
   354  00FB95  44                 	db	68	;'D'
   355  00FB96  20                 	db	32
   356  00FB97  57                 	db	87	;'W'
   357  00FB98  49                 	db	73	;'I'
   358  00FB99  4C                 	db	76	;'L'
   359  00FB9A  4C                 	db	76	;'L'
   360  00FB9B  20                 	db	32
   361  00FB9C  52                 	db	82	;'R'
   362  00FB9D  45                 	db	69	;'E'
   363  00FB9E  54                 	db	84	;'T'
   364  00FB9F  55                 	db	85	;'U'
   365  00FBA0  52                 	db	82	;'R'
   366  00FBA1  4E                 	db	78	;'N'
   367  00FBA2  20                 	db	32
   368  00FBA3  20                 	db	32
   369  00FBA4  20                 	db	32
   370  00FBA5  20                 	db	32
   371  00FBA6  00                 	db	0
   372  00FBA7                     STR_108:
   373  00FBA7  4F                 	db	79	;'O'
   374  00FBA8  54                 	db	84	;'T'
   375  00FBA9  48                 	db	72	;'H'
   376  00FBAA  45                 	db	69	;'E'
   377  00FBAB  52                 	db	82	;'R'
   378  00FBAC  20                 	db	32
   379  00FBAD  53                 	db	83	;'S'
   380  00FBAE  45                 	db	69	;'E'
   381  00FBAF  54                 	db	84	;'T'
   382  00FBB0  53                 	db	83	;'S'
   383  00FBB1  20                 	db	32
   384  00FBB2  52                 	db	82	;'R'
   385  00FBB3  41                 	db	65	;'A'
   386  00FBB4  35                 	db	53	;'5'
   387  00FBB5  20                 	db	32
   388  00FBB6  20                 	db	32
   389  00FBB7  20                 	db	32
   390  00FBB8  00                 	db	0
   391  00FBB9                     STR_3:
   392  00FBB9  2D                 	db	45
   393  00FBBA  2D                 	db	45
   394  00FBBB  20                 	db	32
   395  00FBBC  4C                 	db	76	;'L'
   396  00FBBD  4F                 	db	79	;'O'
   397  00FBBE  47                 	db	71	;'G'
   398  00FBBF  20                 	db	32
   399  00FBC0  25                 	db	37
   400  00FBC1  32                 	db	50	;'2'
   401  00FBC2  64                 	db	100	;'d'
   402  00FBC3  20                 	db	32
   403  00FBC4  48                 	db	72	;'H'
   404  00FBC5  45                 	db	69	;'E'
   405  00FBC6  52                 	db	82	;'R'
   406  00FBC7  45                 	db	69	;'E'
   407  00FBC8  2D                 	db	45
   408  00FBC9  2D                 	db	45
   409  00FBCA  00                 	db	0
   410  00FBCB                     STR_1:
   411  00FBCB  52                 	db	82	;'R'
   412  00FBCC  45                 	db	69	;'E'
   413  00FBCD  53                 	db	83	;'S'
   414  00FBCE  55                 	db	85	;'U'
   415  00FBCF  4C                 	db	76	;'L'
   416  00FBD0  54                 	db	84	;'T'
   417  00FBD1  53                 	db	83	;'S'
   418  00FBD2  20                 	db	32
   419  00FBD3  49                 	db	73	;'I'
   420  00FBD4  4E                 	db	78	;'N'
   421  00FBD5  20                 	db	32
   422  00FBD6  4C                 	db	76	;'L'
   423  00FBD7  4F                 	db	79	;'O'
   424  00FBD8  47                 	db	71	;'G'
   425  00FBD9  20                 	db	32
   426  00FBDA  25                 	db	37
   427  00FBDB  64                 	db	100	;'d'
   428  00FBDC  00                 	db	0
   429  00FBDD                     STR_98:
   430  00FBDD  4D                 	db	77	;'M'
   431  00FBDE  49                 	db	73	;'I'
   432  00FBDF  44                 	db	68	;'D'
   433  00FBE0  20                 	db	32
   434  00FBE1  2D                 	db	45
   435  00FBE2  2D                 	db	45
   436  00FBE3  20                 	db	32
   437  00FBE4  32                 	db	50	;'2'
   438  00FBE5  73                 	db	115	;'s'
   439  00FBE6  20                 	db	32
   440  00FBE7  20                 	db	32
   441  00FBE8  20                 	db	32
   442  00FBE9  20                 	db	32
   443  00FBEA  20                 	db	32
   444  00FBEB  20                 	db	32
   445  00FBEC  20                 	db	32
   446  00FBED  00                 	db	0
   447  00FBEE                     STR_101:
   448  00FBEE  44                 	db	68	;'D'
   449  00FBEF  52                 	db	82	;'R'
   450  00FBF0  4F                 	db	79	;'O'
   451  00FBF1  50                 	db	80	;'P'
   452  00FBF2  20                 	db	32
   453  00FBF3  2D                 	db	45
   454  00FBF4  2D                 	db	45
   455  00FBF5  20                 	db	32
   456  00FBF6  32                 	db	50	;'2'
   457  00FBF7  73                 	db	115	;'s'
   458  00FBF8  20                 	db	32
   459  00FBF9  20                 	db	32
   460  00FBFA  20                 	db	32
   461  00FBFB  20                 	db	32
   462  00FBFC  20                 	db	32
   463  00FBFD  20                 	db	32
   464  00FBFE  00                 	db	0
   465  00FBFF                     STR_95:
   466  00FBFF  4C                 	db	76	;'L'
   467  00FC00  45                 	db	69	;'E'
   468  00FC01  46                 	db	70	;'F'
   469  00FC02  54                 	db	84	;'T'
   470  00FC03  20                 	db	32
   471  00FC04  2D                 	db	45
   472  00FC05  2D                 	db	45
   473  00FC06  20                 	db	32
   474  00FC07  32                 	db	50	;'2'
   475  00FC08  73                 	db	115	;'s'
   476  00FC09  20                 	db	32
   477  00FC0A  20                 	db	32
   478  00FC0B  20                 	db	32
   479  00FC0C  20                 	db	32
   480  00FC0D  20                 	db	32
   481  00FC0E  20                 	db	32
   482  00FC0F  00                 	db	0
   483  00FC10                     STR_100:
   484  00FC10  4C                 	db	76	;'L'
   485  00FC11  45                 	db	69	;'E'
   486  00FC12  56                 	db	86	;'V'
   487  00FC13  45                 	db	69	;'E'
   488  00FC14  4C                 	db	76	;'L'
   489  00FC15  20                 	db	32
   490  00FC16  2D                 	db	45
   491  00FC17  2D                 	db	45
   492  00FC18  20                 	db	32
   493  00FC19  32                 	db	50	;'2'
   494  00FC1A  73                 	db	115	;'s'
   495  00FC1B  20                 	db	32
   496  00FC1C  20                 	db	32
   497  00FC1D  20                 	db	32
   498  00FC1E  20                 	db	32
   499  00FC1F  20                 	db	32
   500  00FC20  00                 	db	0
   501  00FC21                     STR_94:
   502  00FC21  52                 	db	82	;'R'
   503  00FC22  49                 	db	73	;'I'
   504  00FC23  47                 	db	71	;'G'
   505  00FC24  48                 	db	72	;'H'
   506  00FC25  54                 	db	84	;'T'
   507  00FC26  20                 	db	32
   508  00FC27  2D                 	db	45
   509  00FC28  2D                 	db	45
   510  00FC29  20                 	db	32
   511  00FC2A  32                 	db	50	;'2'
   512  00FC2B  73                 	db	115	;'s'
   513  00FC2C  20                 	db	32
   514  00FC2D  20                 	db	32
   515  00FC2E  20                 	db	32
   516  00FC2F  20                 	db	32
   517  00FC30  20                 	db	32
   518  00FC31  00                 	db	0
   519  00FC32                     STR_93:
   520  00FC32  4D                 	db	77	;'M'
   521  00FC33  49                 	db	73	;'I'
   522  00FC34  44                 	db	68	;'D'
   523  00FC35  44                 	db	68	;'D'
   524  00FC36  4C                 	db	76	;'L'
   525  00FC37  45                 	db	69	;'E'
   526  00FC38  20                 	db	32
   527  00FC39  2D                 	db	45
   528  00FC3A  2D                 	db	45
   529  00FC3B  20                 	db	32
   530  00FC3C  32                 	db	50	;'2'
   531  00FC3D  73                 	db	115	;'s'
   532  00FC3E  20                 	db	32
   533  00FC3F  20                 	db	32
   534  00FC40  20                 	db	32
   535  00FC41  20                 	db	32
   536  00FC42  00                 	db	0
   537  00FC43                     STR_111:
   538  00FC43  44                 	db	68	;'D'
   539  00FC44  20                 	db	32
   540  00FC45  57                 	db	87	;'W'
   541  00FC46  49                 	db	73	;'I'
   542  00FC47  4C                 	db	76	;'L'
   543  00FC48  4C                 	db	76	;'L'
   544  00FC49  20                 	db	32
   545  00FC4A  52                 	db	82	;'R'
   546  00FC4B  45                 	db	69	;'E'
   547  00FC4C  54                 	db	84	;'T'
   548  00FC4D  55                 	db	85	;'U'
   549  00FC4E  52                 	db	82	;'R'
   550  00FC4F  4E                 	db	78	;'N'
   551  00FC50  20                 	db	32
   552  00FC51  20                 	db	32
   553  00FC52  20                 	db	32
   554  00FC53  00                 	db	0
   555  00FC54                     STR_96:
   556  00FC54  4D                 	db	77	;'M'
   557  00FC55  49                 	db	73	;'I'
   558  00FC56  44                 	db	68	;'D'
   559  00FC57  2D                 	db	45
   560  00FC58  4C                 	db	76	;'L'
   561  00FC59  45                 	db	69	;'E'
   562  00FC5A  46                 	db	70	;'F'
   563  00FC5B  54                 	db	84	;'T'
   564  00FC5C  20                 	db	32
   565  00FC5D  2D                 	db	45
   566  00FC5E  2D                 	db	45
   567  00FC5F  20                 	db	32
   568  00FC60  32                 	db	50	;'2'
   569  00FC61  73                 	db	115	;'s'
   570  00FC62  20                 	db	32
   571  00FC63  20                 	db	32
   572  00FC64  00                 	db	0
   573  00FC65                     STR_97:
   574  00FC65  4D                 	db	77	;'M'
   575  00FC66  49                 	db	73	;'I'
   576  00FC67  44                 	db	68	;'D'
   577  00FC68  2D                 	db	45
   578  00FC69  52                 	db	82	;'R'
   579  00FC6A  49                 	db	73	;'I'
   580  00FC6B  47                 	db	71	;'G'
   581  00FC6C  48                 	db	72	;'H'
   582  00FC6D  54                 	db	84	;'T'
   583  00FC6E  20                 	db	32
   584  00FC6F  2D                 	db	45
   585  00FC70  2D                 	db	45
   586  00FC71  20                 	db	32
   587  00FC72  32                 	db	50	;'2'
   588  00FC73  73                 	db	115	;'s'
   589  00FC74  20                 	db	32
   590  00FC75  00                 	db	0
   591  00FC76                     STR_112:
   592  00FC76  45                 	db	69	;'E'
   593  00FC77  4C                 	db	76	;'L'
   594  00FC78  53                 	db	83	;'S'
   595  00FC79  45                 	db	69	;'E'
   596  00FC7A  20                 	db	32
   597  00FC7B  54                 	db	84	;'T'
   598  00FC7C  4F                 	db	79	;'O'
   599  00FC7D  47                 	db	71	;'G'
   600  00FC7E  47                 	db	71	;'G'
   601  00FC7F  4C                 	db	76	;'L'
   602  00FC80  45                 	db	69	;'E'
   603  00FC81  53                 	db	83	;'S'
   604  00FC82  20                 	db	32
   605  00FC83  52                 	db	82	;'R'
   606  00FC84  41                 	db	65	;'A'
   607  00FC85  35                 	db	53	;'5'
   608  00FC86  00                 	db	0
   609  00FC87                     STR_72:
   610  00FC87  41                 	db	65	;'A'
   611  00FC88  4C                 	db	76	;'L'
   612  00FC89  47                 	db	71	;'G'
   613  00FC8A  31                 	db	49	;'1'
   614  00FC8B  3A                 	db	58	;':'
   615  00FC8C  20                 	db	32
   616  00FC8D  39                 	db	57	;'9'
   617  00FC8E  20                 	db	32
   618  00FC8F  50                 	db	80	;'P'
   619  00FC90  4F                 	db	79	;'O'
   620  00FC91  50                 	db	80	;'P'
   621  00FC92  4E                 	db	78	;'N'
   622  00FC93  4F                 	db	79	;'O'
   623  00FC94  54                 	db	84	;'T'
   624  00FC95  41                 	db	65	;'A'
   625  00FC96  42                 	db	66	;'B'
   626  00FC97  00                 	db	0
   627  00FC98                     STR_68:
   628  00FC98  31                 	db	49	;'1'
   629  00FC99  2E                 	db	46
   630  00FC9A  41                 	db	65	;'A'
   631  00FC9B  4C                 	db	76	;'L'
   632  00FC9C  47                 	db	71	;'G'
   633  00FC9D  7C                 	db	124
   634  00FC9E  32                 	db	50	;'2'
   635  00FC9F  2E                 	db	46
   636  00FCA0  53                 	db	83	;'S'
   637  00FCA1  4E                 	db	78	;'N'
   638  00FCA2  52                 	db	82	;'R'
   639  00FCA3  7C                 	db	124
   640  00FCA4  33                 	db	51	;'3'
   641  00FCA5  2E                 	db	46
   642  00FCA6  41                 	db	65	;'A'
   643  00FCA7  43                 	db	67	;'C'
   644  00FCA8  00                 	db	0
   645  00FCA9                     STR_88:
   646  00FCA9  54                 	db	84	;'T'
   647  00FCAA  53                 	db	83	;'S'
   648  00FCAB  54                 	db	84	;'T'
   649  00FCAC  3A                 	db	58	;':'
   650  00FCAD  20                 	db	32
   651  00FCAE  43                 	db	67	;'C'
   652  00FCAF  4F                 	db	79	;'O'
   653  00FCB0  4E                 	db	78	;'N'
   654  00FCB1  44                 	db	68	;'D'
   655  00FCB2  20                 	db	32
   656  00FCB3  53                 	db	83	;'S'
   657  00FCB4  4F                 	db	79	;'O'
   658  00FCB5  4C                 	db	76	;'L'
   659  00FCB6  4E                 	db	78	;'N'
   660  00FCB7  27                 	db	39
   661  00FCB8  44                 	db	68	;'D'
   662  00FCB9  00                 	db	0
   663  00FCBA                     STR_90:
   664  00FCBA  54                 	db	84	;'T'
   665  00FCBB  53                 	db	83	;'S'
   666  00FCBC  54                 	db	84	;'T'
   667  00FCBD  3A                 	db	58	;':'
   668  00FCBE  20                 	db	32
   669  00FCBF  50                 	db	80	;'P'
   670  00FCC0  55                 	db	85	;'U'
   671  00FCC1  53                 	db	83	;'S'
   672  00FCC2  48                 	db	72	;'H'
   673  00FCC3  20                 	db	32
   674  00FCC4  53                 	db	83	;'S'
   675  00FCC5  4F                 	db	79	;'O'
   676  00FCC6  4C                 	db	76	;'L'
   677  00FCC7  4E                 	db	78	;'N'
   678  00FCC8  27                 	db	39
   679  00FCC9  44                 	db	68	;'D'
   680  00FCCA  00                 	db	0
   681  00FCCB                     STR_69:
   682  00FCCB  34                 	db	52	;'4'
   683  00FCCC  2E                 	db	46
   684  00FCCD  48                 	db	72	;'H'
   685  00FCCE  49                 	db	73	;'I'
   686  00FCCF  7C                 	db	124
   687  00FCD0  35                 	db	53	;'5'
   688  00FCD1  2E                 	db	46
   689  00FCD2  54                 	db	84	;'T'
   690  00FCD3  4F                 	db	79	;'O'
   691  00FCD4  47                 	db	71	;'G'
   692  00FCD5  7C                 	db	124
   693  00FCD6  36                 	db	54	;'6'
   694  00FCD7  2E                 	db	46
   695  00FCD8  45                 	db	69	;'E'
   696  00FCD9  45                 	db	69	;'E'
   697  00FCDA  50                 	db	80	;'P'
   698  00FCDB  00                 	db	0
   699  00FCDC                     STR_106:
   700  00FCDC  54                 	db	84	;'T'
   701  00FCDD  53                 	db	83	;'S'
   702  00FCDE  54                 	db	84	;'T'
   703  00FCDF  3A                 	db	58	;':'
   704  00FCE0  20                 	db	32
   705  00FCE1  42                 	db	66	;'B'
   706  00FCE2  4F                 	db	79	;'O'
   707  00FCE3  54                 	db	84	;'T'
   708  00FCE4  48                 	db	72	;'H'
   709  00FCE5  20                 	db	32
   710  00FCE6  53                 	db	83	;'S'
   711  00FCE7  45                 	db	69	;'E'
   712  00FCE8  52                 	db	82	;'R'
   713  00FCE9  56                 	db	86	;'V'
   714  00FCEA  4F                 	db	79	;'O'
   715  00FCEB  53                 	db	83	;'S'
   716  00FCEC  00                 	db	0
   717  00FCED                     STR_41:
   718  00FCED  4C                 	db	76	;'L'
   719  00FCEE  4F                 	db	79	;'O'
   720  00FCEF  47                 	db	71	;'G'
   721  00FCF0  20                 	db	32
   722  00FCF1  31                 	db	49	;'1'
   723  00FCF2  20                 	db	32
   724  00FCF3  20                 	db	32
   725  00FCF4  20                 	db	32
   726  00FCF5  20                 	db	32
   727  00FCF6  20                 	db	32
   728  00FCF7  20                 	db	32
   729  00FCF8  20                 	db	32
   730  00FCF9  20                 	db	32
   731  00FCFA  20                 	db	32
   732  00FCFB  20                 	db	32
   733  00FCFC  20                 	db	32
   734  00FCFD  00                 	db	0
   735  00FCFE                     STR_40:
   736  00FCFE  4C                 	db	76	;'L'
   737  00FCFF  4F                 	db	79	;'O'
   738  00FD00  47                 	db	71	;'G'
   739  00FD01  20                 	db	32
   740  00FD02  32                 	db	50	;'2'
   741  00FD03  20                 	db	32
   742  00FD04  20                 	db	32
   743  00FD05  20                 	db	32
   744  00FD06  20                 	db	32
   745  00FD07  20                 	db	32
   746  00FD08  20                 	db	32
   747  00FD09  20                 	db	32
   748  00FD0A  20                 	db	32
   749  00FD0B  20                 	db	32
   750  00FD0C  20                 	db	32
   751  00FD0D  20                 	db	32
   752  00FD0E  00                 	db	0
   753  00FD0F                     STR_44:
   754  00FD0F  4C                 	db	76	;'L'
   755  00FD10  4F                 	db	79	;'O'
   756  00FD11  47                 	db	71	;'G'
   757  00FD12  20                 	db	32
   758  00FD13  33                 	db	51	;'3'
   759  00FD14  20                 	db	32
   760  00FD15  20                 	db	32
   761  00FD16  20                 	db	32
   762  00FD17  20                 	db	32
   763  00FD18  20                 	db	32
   764  00FD19  20                 	db	32
   765  00FD1A  20                 	db	32
   766  00FD1B  20                 	db	32
   767  00FD1C  20                 	db	32
   768  00FD1D  20                 	db	32
   769  00FD1E  20                 	db	32
   770  00FD1F  00                 	db	0
   771  00FD20                     STR_48:
   772  00FD20  4C                 	db	76	;'L'
   773  00FD21  4F                 	db	79	;'O'
   774  00FD22  47                 	db	71	;'G'
   775  00FD23  20                 	db	32
   776  00FD24  34                 	db	52	;'4'
   777  00FD25  20                 	db	32
   778  00FD26  20                 	db	32
   779  00FD27  20                 	db	32
   780  00FD28  20                 	db	32
   781  00FD29  20                 	db	32
   782  00FD2A  20                 	db	32
   783  00FD2B  20                 	db	32
   784  00FD2C  20                 	db	32
   785  00FD2D  20                 	db	32
   786  00FD2E  20                 	db	32
   787  00FD2F  20                 	db	32
   788  00FD30  00                 	db	0
   789  00FD31                     STR_36:
   790  00FD31  33                 	db	51	;'3'
   791  00FD32  2E                 	db	46
   792  00FD33  20                 	db	32
   793  00FD34  4C                 	db	76	;'L'
   794  00FD35  4F                 	db	79	;'O'
   795  00FD36  47                 	db	71	;'G'
   796  00FD37  53                 	db	83	;'S'
   797  00FD38  20                 	db	32
   798  00FD39  20                 	db	32
   799  00FD3A  20                 	db	32
   800  00FD3B  20                 	db	32
   801  00FD3C  20                 	db	32
   802  00FD3D  20                 	db	32
   803  00FD3E  20                 	db	32
   804  00FD3F  20                 	db	32
   805  00FD40  20                 	db	32
   806  00FD41  00                 	db	0
   807  00FD42                     STR_32:
   808  00FD42  32                 	db	50	;'2'
   809  00FD43  2E                 	db	46
   810  00FD44  20                 	db	32
   811  00FD45  53                 	db	83	;'S'
   812  00FD46  4F                 	db	79	;'O'
   813  00FD47  52                 	db	82	;'R'
   814  00FD48  54                 	db	84	;'T'
   815  00FD49  20                 	db	32
   816  00FD4A  20                 	db	32
   817  00FD4B  20                 	db	32
   818  00FD4C  20                 	db	32
   819  00FD4D  20                 	db	32
   820  00FD4E  20                 	db	32
   821  00FD4F  20                 	db	32
   822  00FD50  20                 	db	32
   823  00FD51  20                 	db	32
   824  00FD52  00                 	db	0
   825  00FD53                     STR_33:
   826  00FD53  31                 	db	49	;'1'
   827  00FD54  2E                 	db	46
   828  00FD55  20                 	db	32
   829  00FD56  44                 	db	68	;'D'
   830  00FD57  41                 	db	65	;'A'
   831  00FD58  54                 	db	84	;'T'
   832  00FD59  45                 	db	69	;'E'
   833  00FD5A  2F                 	db	47
   834  00FD5B  54                 	db	84	;'T'
   835  00FD5C  49                 	db	73	;'I'
   836  00FD5D  4D                 	db	77	;'M'
   837  00FD5E  45                 	db	69	;'E'
   838  00FD5F  20                 	db	32
   839  00FD60  20                 	db	32
   840  00FD61  20                 	db	32
   841  00FD62  20                 	db	32
   842  00FD63  00                 	db	0
   843  00FD64                     STR_24:
   844  00FD64  20                 	db	32
   845  00FD65  2D                 	db	45
   846  00FD66  2D                 	db	45
   847  00FD67  20                 	db	32
   848  00FD68  50                 	db	80	;'P'
   849  00FD69  4F                 	db	79	;'O'
   850  00FD6A  50                 	db	80	;'P'
   851  00FD6B  20                 	db	32
   852  00FD6C  20                 	db	32
   853  00FD6D  43                 	db	67	;'C'
   854  00FD6E  41                 	db	65	;'A'
   855  00FD6F  4E                 	db	78	;'N'
   856  00FD70  20                 	db	32
   857  00FD71  2D                 	db	45
   858  00FD72  2D                 	db	45
   859  00FD73  20                 	db	32
   860  00FD74  00                 	db	0
   861  00FD75                     STR_26:
   862  00FD75  20                 	db	32
   863  00FD76  2D                 	db	45
   864  00FD77  2D                 	db	45
   865  00FD78  20                 	db	32
   866  00FD79  53                 	db	83	;'S'
   867  00FD7A  4F                 	db	79	;'O'
   868  00FD7B  55                 	db	85	;'U'
   869  00FD7C  50                 	db	80	;'P'
   870  00FD7D  20                 	db	32
   871  00FD7E  43                 	db	67	;'C'
   872  00FD7F  41                 	db	65	;'A'
   873  00FD80  4E                 	db	78	;'N'
   874  00FD81  20                 	db	32
   875  00FD82  2D                 	db	45
   876  00FD83  2D                 	db	45
   877  00FD84  20                 	db	32
   878  00FD85  00                 	db	0
   879  00FD86                     STR_28:
   880  00FD86  2D                 	db	45
   881  00FD87  2D                 	db	45
   882  00FD88  20                 	db	32
   883  00FD89  54                 	db	84	;'T'
   884  00FD8A  4F                 	db	79	;'O'
   885  00FD8B  54                 	db	84	;'T'
   886  00FD8C  41                 	db	65	;'A'
   887  00FD8D  4C                 	db	76	;'L'
   888  00FD8E  20                 	db	32
   889  00FD8F  43                 	db	67	;'C'
   890  00FD90  41                 	db	65	;'A'
   891  00FD91  4E                 	db	78	;'N'
   892  00FD92  53                 	db	83	;'S'
   893  00FD93  20                 	db	32
   894  00FD94  2D                 	db	45
   895  00FD95  2D                 	db	45
   896  00FD96  00                 	db	0
   897  00FD97                     STR_39:
   898  00FD97  4C                 	db	76	;'L'
   899  00FD98  4F                 	db	79	;'O'
   900  00FD99  47                 	db	71	;'G'
   901  00FD9A  20                 	db	32
   902  00FD9B  31                 	db	49	;'1'
   903  00FD9C  20                 	db	32
   904  00FD9D  20                 	db	32
   905  00FD9E  20                 	db	32
   906  00FD9F  20                 	db	32
   907  00FDA0  20                 	db	32
   908  00FDA1  20                 	db	32
   909  00FDA2  20                 	db	32
   910  00FDA3  20                 	db	32
   911  00FDA4  20                 	db	32
   912  00FDA5  20                 	db	32
   913  00FDA6  3C                 	db	60	;'<'
   914  00FDA7  00                 	db	0
   915  00FDA8                     STR_42:
   916  00FDA8  4C                 	db	76	;'L'
   917  00FDA9  4F                 	db	79	;'O'
   918  00FDAA  47                 	db	71	;'G'
   919  00FDAB  20                 	db	32
   920  00FDAC  32                 	db	50	;'2'
   921  00FDAD  20                 	db	32
   922  00FDAE  20                 	db	32
   923  00FDAF  20                 	db	32
   924  00FDB0  20                 	db	32
   925  00FDB1  20                 	db	32
   926  00FDB2  20                 	db	32
   927  00FDB3  20                 	db	32
   928  00FDB4  20                 	db	32
   929  00FDB5  20                 	db	32
   930  00FDB6  20                 	db	32
   931  00FDB7  3C                 	db	60	;'<'
   932  00FDB8  00                 	db	0
   933  00FDB9                     STR_46:
   934  00FDB9  4C                 	db	76	;'L'
   935  00FDBA  4F                 	db	79	;'O'
   936  00FDBB  47                 	db	71	;'G'
   937  00FDBC  20                 	db	32
   938  00FDBD  33                 	db	51	;'3'
   939  00FDBE  20                 	db	32
   940  00FDBF  20                 	db	32
   941  00FDC0  20                 	db	32
   942  00FDC1  20                 	db	32
   943  00FDC2  20                 	db	32
   944  00FDC3  20                 	db	32
   945  00FDC4  20                 	db	32
   946  00FDC5  20                 	db	32
   947  00FDC6  20                 	db	32
   948  00FDC7  20                 	db	32
   949  00FDC8  3C                 	db	60	;'<'
   950  00FDC9  00                 	db	0
   951  00FDCA                     STR_50:
   952  00FDCA  4C                 	db	76	;'L'
   953  00FDCB  4F                 	db	79	;'O'
   954  00FDCC  47                 	db	71	;'G'
   955  00FDCD  20                 	db	32
   956  00FDCE  34                 	db	52	;'4'
   957  00FDCF  20                 	db	32
   958  00FDD0  20                 	db	32
   959  00FDD1  20                 	db	32
   960  00FDD2  20                 	db	32
   961  00FDD3  20                 	db	32
   962  00FDD4  20                 	db	32
   963  00FDD5  20                 	db	32
   964  00FDD6  20                 	db	32
   965  00FDD7  20                 	db	32
   966  00FDD8  20                 	db	32
   967  00FDD9  3C                 	db	60	;'<'
   968  00FDDA  00                 	db	0
   969  00FDDB                     STR_38:
   970  00FDDB  33                 	db	51	;'3'
   971  00FDDC  2E                 	db	46
   972  00FDDD  20                 	db	32
   973  00FDDE  4C                 	db	76	;'L'
   974  00FDDF  4F                 	db	79	;'O'
   975  00FDE0  47                 	db	71	;'G'
   976  00FDE1  53                 	db	83	;'S'
   977  00FDE2  20                 	db	32
   978  00FDE3  20                 	db	32
   979  00FDE4  20                 	db	32
   980  00FDE5  20                 	db	32
   981  00FDE6  20                 	db	32
   982  00FDE7  20                 	db	32
   983  00FDE8  20                 	db	32
   984  00FDE9  20                 	db	32
   985  00FDEA  3C                 	db	60	;'<'
   986  00FDEB  00                 	db	0
   987  00FDEC                     STR_34:
   988  00FDEC  32                 	db	50	;'2'
   989  00FDED  2E                 	db	46
   990  00FDEE  20                 	db	32
   991  00FDEF  53                 	db	83	;'S'
   992  00FDF0  4F                 	db	79	;'O'
   993  00FDF1  52                 	db	82	;'R'
   994  00FDF2  54                 	db	84	;'T'
   995  00FDF3  20                 	db	32
   996  00FDF4  20                 	db	32
   997  00FDF5  20                 	db	32
   998  00FDF6  20                 	db	32
   999  00FDF7  20                 	db	32
  1000  00FDF8  20                 	db	32
  1001  00FDF9  20                 	db	32
  1002  00FDFA  20                 	db	32
  1003  00FDFB  3C                 	db	60	;'<'
  1004  00FDFC  00                 	db	0
  1005  00FDFD                     STR_31:
  1006  00FDFD  31                 	db	49	;'1'
  1007  00FDFE  2E                 	db	46
  1008  00FDFF  20                 	db	32
  1009  00FE00  44                 	db	68	;'D'
  1010  00FE01  41                 	db	65	;'A'
  1011  00FE02  54                 	db	84	;'T'
  1012  00FE03  45                 	db	69	;'E'
  1013  00FE04  2F                 	db	47
  1014  00FE05  54                 	db	84	;'T'
  1015  00FE06  49                 	db	73	;'I'
  1016  00FE07  4D                 	db	77	;'M'
  1017  00FE08  45                 	db	69	;'E'
  1018  00FE09  20                 	db	32
  1019  00FE0A  20                 	db	32
  1020  00FE0B  20                 	db	32
  1021  00FE0C  3C                 	db	60	;'<'
  1022  00FE0D  00                 	db	0
  1023  00FE0E                     STR_6:
  1024  00FE0E  50                 	db	80	;'P'
  1025  00FE0F  41                 	db	65	;'A'
  1026  00FE10  55                 	db	85	;'U'
  1027  00FE11  53                 	db	83	;'S'
  1028  00FE12  45                 	db	69	;'E'
  1029  00FE13  20                 	db	32
  1030  00FE14  3C                 	db	60	;'<'
  1031  00FE15  20                 	db	32
  1032  00FE16  7C                 	db	124
  1033  00FE17  20                 	db	32
  1034  00FE18  42                 	db	66	;'B'
  1035  00FE19  41                 	db	65	;'A'
  1036  00FE1A  43                 	db	67	;'C'
  1037  00FE1B  4B                 	db	75	;'K'
  1038  00FE1C  20                 	db	32
  1039  00FE1D  3E                 	db	62	;'>'
  1040  00FE1E  00                 	db	0
  1041  00FE1F                     STR_30:
  1042  00FE1F  50                 	db	80	;'P'
  1043  00FE20  55                 	db	85	;'U'
  1044  00FE21  53                 	db	83	;'S'
  1045  00FE22  48                 	db	72	;'H'
  1046  00FE23  20                 	db	32
  1047  00FE24  54                 	db	84	;'T'
  1048  00FE25  4F                 	db	79	;'O'
  1049  00FE26  20                 	db	32
  1050  00FE27  43                 	db	67	;'C'
  1051  00FE28  4F                 	db	79	;'O'
  1052  00FE29  4E                 	db	78	;'N'
  1053  00FE2A  54                 	db	84	;'T'
  1054  00FE2B  49                 	db	73	;'I'
  1055  00FE2C  4E                 	db	78	;'N'
  1056  00FE2D  55                 	db	85	;'U'
  1057  00FE2E  45                 	db	69	;'E'
  1058  00FE2F  00                 	db	0
  1059  00FE30                     STR_83:
  1060  00FE30  4D                 	db	77	;'M'
  1061  00FE31  41                 	db	65	;'A'
  1062  00FE32  47                 	db	71	;'G'
  1063  00FE33  5F                 	db	95	;'_'
  1064  00FE34  73                 	db	115	;'s'
  1065  00FE35  69                 	db	105	;'i'
  1066  00FE36  67                 	db	103	;'g'
  1067  00FE37  6E                 	db	110	;'n'
  1068  00FE38  61                 	db	97	;'a'
  1069  00FE39  6C                 	db	108	;'l'
  1070  00FE3A  3A                 	db	58	;':'
  1071  00FE3B  20                 	db	32
  1072  00FE3C  25                 	db	37
  1073  00FE3D  64                 	db	100	;'d'
  1074  00FE3E  20                 	db	32
  1075  00FE3F  00                 	db	0
  1076  00FE40                     STR_99:
  1077  00FE40  54                 	db	84	;'T'
  1078  00FE41  53                 	db	83	;'S'
  1079  00FE42  54                 	db	84	;'T'
  1080  00FE43  3A                 	db	58	;':'
  1081  00FE44  20                 	db	32
  1082  00FE45  54                 	db	84	;'T'
  1083  00FE46  49                 	db	73	;'I'
  1084  00FE47  4C                 	db	76	;'L'
  1085  00FE48  54                 	db	84	;'T'
  1086  00FE49  20                 	db	32
  1087  00FE4A  53                 	db	83	;'S'
  1088  00FE4B  45                 	db	69	;'E'
  1089  00FE4C  52                 	db	82	;'R'
  1090  00FE4D  56                 	db	86	;'V'
  1091  00FE4E  4F                 	db	79	;'O'
  1092  00FE4F  00                 	db	0
  1093  00FE50                     STR_4:
  1094  00FE50  44                 	db	68	;'D'
  1095  00FE51  49                 	db	73	;'I'
  1096  00FE52  44                 	db	68	;'D'
  1097  00FE53  4E                 	db	78	;'N'
  1098  00FE54  27                 	db	39
  1099  00FE55  54                 	db	84	;'T'
  1100  00FE56  20                 	db	32
  1101  00FE57  43                 	db	67	;'C'
  1102  00FE58  4F                 	db	79	;'O'
  1103  00FE59  4D                 	db	77	;'M'
  1104  00FE5A  50                 	db	80	;'P'
  1105  00FE5B  4C                 	db	76	;'L'
  1106  00FE5C  45                 	db	69	;'E'
  1107  00FE5D  54                 	db	84	;'T'
  1108  00FE5E  45                 	db	69	;'E'
  1109  00FE5F  00                 	db	0
  1110  00FE60                     STR_80:
  1111  00FE60  49                 	db	73	;'I'
  1112  00FE61  52                 	db	82	;'R'
  1113  00FE62  5F                 	db	95	;'_'
  1114  00FE63  73                 	db	115	;'s'
  1115  00FE64  69                 	db	105	;'i'
  1116  00FE65  67                 	db	103	;'g'
  1117  00FE66  6E                 	db	110	;'n'
  1118  00FE67  61                 	db	97	;'a'
  1119  00FE68  6C                 	db	108	;'l'
  1120  00FE69  3A                 	db	58	;':'
  1121  00FE6A  20                 	db	32
  1122  00FE6B  25                 	db	37
  1123  00FE6C  64                 	db	100	;'d'
  1124  00FE6D  20                 	db	32
  1125  00FE6E  00                 	db	0
  1126  00FE6F                     STR_105:
  1127  00FE6F  43                 	db	67	;'C'
  1128  00FE70  41                 	db	65	;'A'
  1129  00FE71  4D                 	db	77	;'M'
  1130  00FE72  20                 	db	32
  1131  00FE73  44                 	db	68	;'D'
  1132  00FE74  57                 	db	87	;'W'
  1133  00FE75  4E                 	db	78	;'N'
  1134  00FE76  20                 	db	32
  1135  00FE77  7C                 	db	124
  1136  00FE78  52                 	db	82	;'R'
  1137  00FE79  43                 	db	67	;'C'
  1138  00FE7A  30                 	db	48	;'0'
  1139  00FE7B  3D                 	db	61	;'='
  1140  00FE7C  30                 	db	48	;'0'
  1141  00FE7D  00                 	db	0
  1142  00FE7E                     STR_104:
  1143  00FE7E  43                 	db	67	;'C'
  1144  00FE7F  41                 	db	65	;'A'
  1145  00FE80  4D                 	db	77	;'M'
  1146  00FE81  20                 	db	32
  1147  00FE82  55                 	db	85	;'U'
  1148  00FE83  50                 	db	80	;'P'
  1149  00FE84  20                 	db	32
  1150  00FE85  20                 	db	32
  1151  00FE86  7C                 	db	124
  1152  00FE87  52                 	db	82	;'R'
  1153  00FE88  43                 	db	67	;'C'
  1154  00FE89  30                 	db	48	;'0'
  1155  00FE8A  3D                 	db	61	;'='
  1156  00FE8B  31                 	db	49	;'1'
  1157  00FE8C  00                 	db	0
  1158  00FE8D                     STR_82:
  1159  00FE8D  54                 	db	84	;'T'
  1160  00FE8E  53                 	db	83	;'S'
  1161  00FE8F  54                 	db	84	;'T'
  1162  00FE90  3A                 	db	58	;':'
  1163  00FE91  20                 	db	32
  1164  00FE92  4D                 	db	77	;'M'
  1165  00FE93  41                 	db	65	;'A'
  1166  00FE94  47                 	db	71	;'G'
  1167  00FE95  4E                 	db	78	;'N'
  1168  00FE96  45                 	db	69	;'E'
  1169  00FE97  54                 	db	84	;'T'
  1170  00FE98  49                 	db	73	;'I'
  1171  00FE99  53                 	db	83	;'S'
  1172  00FE9A  4D                 	db	77	;'M'
  1173  00FE9B  00                 	db	0
  1174  00FE9C                     STR_103:
  1175  00FE9C  54                 	db	84	;'T'
  1176  00FE9D  53                 	db	83	;'S'
  1177  00FE9E  54                 	db	84	;'T'
  1178  00FE9F  3A                 	db	58	;':'
  1179  00FEA0  20                 	db	32
  1180  00FEA1  43                 	db	67	;'C'
  1181  00FEA2  41                 	db	65	;'A'
  1182  00FEA3  4D                 	db	77	;'M'
  1183  00FEA4  20                 	db	32
  1184  00FEA5  53                 	db	83	;'S'
  1185  00FEA6  45                 	db	69	;'E'
  1186  00FEA7  52                 	db	82	;'R'
  1187  00FEA8  56                 	db	86	;'V'
  1188  00FEA9  4F                 	db	79	;'O'
  1189  00FEAA  00                 	db	0
  1190  00FEAB                     STR_92:
  1191  00FEAB  54                 	db	84	;'T'
  1192  00FEAC  53                 	db	83	;'S'
  1193  00FEAD  54                 	db	84	;'T'
  1194  00FEAE  3A                 	db	58	;':'
  1195  00FEAF  20                 	db	32
  1196  00FEB0  50                 	db	80	;'P'
  1197  00FEB1  41                 	db	65	;'A'
  1198  00FEB2  4E                 	db	78	;'N'
  1199  00FEB3  20                 	db	32
  1200  00FEB4  53                 	db	83	;'S'
  1201  00FEB5  45                 	db	69	;'E'
  1202  00FEB6  52                 	db	82	;'R'
  1203  00FEB7  56                 	db	86	;'V'
  1204  00FEB8  4F                 	db	79	;'O'
  1205  00FEB9  00                 	db	0
  1206  00FEBA                     STR_75:
  1207  00FEBA  41                 	db	65	;'A'
  1208  00FEBB  4C                 	db	76	;'L'
  1209  00FEBC  47                 	db	71	;'G'
  1210  00FEBD  34                 	db	52	;'4'
  1211  00FEBE  3A                 	db	58	;':'
  1212  00FEBF  20                 	db	32
  1213  00FEC0  41                 	db	65	;'A'
  1214  00FEC1  4C                 	db	76	;'L'
  1215  00FEC2  4C                 	db	76	;'L'
  1216  00FEC3  20                 	db	32
  1217  00FEC4  43                 	db	67	;'C'
  1218  00FEC5  41                 	db	65	;'A'
  1219  00FEC6  4E                 	db	78	;'N'
  1220  00FEC7  53                 	db	83	;'S'
  1221  00FEC8  00                 	db	0
  1222  00FEC9                     STR_86:
  1223  00FEC9  54                 	db	84	;'T'
  1224  00FECA  53                 	db	83	;'S'
  1225  00FECB  54                 	db	84	;'T'
  1226  00FECC  3A                 	db	58	;':'
  1227  00FECD  20                 	db	32
  1228  00FECE  44                 	db	68	;'D'
  1229  00FECF  43                 	db	67	;'C'
  1230  00FED0  20                 	db	32
  1231  00FED1  4D                 	db	77	;'M'
  1232  00FED2  4F                 	db	79	;'O'
  1233  00FED3  54                 	db	84	;'T'
  1234  00FED4  4F                 	db	79	;'O'
  1235  00FED5  52                 	db	82	;'R'
  1236  00FED6  53                 	db	83	;'S'
  1237  00FED7  00                 	db	0
  1238  00FED8                     STR_70:
  1239  00FED8  41                 	db	65	;'A'
  1240  00FED9  4C                 	db	76	;'L'
  1241  00FEDA  47                 	db	71	;'G'
  1242  00FEDB  4F                 	db	79	;'O'
  1243  00FEDC  52                 	db	82	;'R'
  1244  00FEDD  49                 	db	73	;'I'
  1245  00FEDE  54                 	db	84	;'T'
  1246  00FEDF  48                 	db	72	;'H'
  1247  00FEE0  4D                 	db	77	;'M'
  1248  00FEE1  20                 	db	32
  1249  00FEE2  54                 	db	84	;'T'
  1250  00FEE3  45                 	db	69	;'E'
  1251  00FEE4  53                 	db	83	;'S'
  1252  00FEE5  54                 	db	84	;'T'
  1253  00FEE6  00                 	db	0
  1254  00FEE7                     STR_87:
  1255  00FEE7  50                 	db	80	;'P'
  1256  00FEE8  49                 	db	73	;'I'
  1257  00FEE9  4E                 	db	78	;'N'
  1258  00FEEA  20                 	db	32
  1259  00FEEB  52                 	db	82	;'R'
  1260  00FEEC  41                 	db	65	;'A'
  1261  00FEED  35                 	db	53	;'5'
  1262  00FEEE  20                 	db	32
  1263  00FEEF  48                 	db	72	;'H'
  1264  00FEF0  49                 	db	73	;'I'
  1265  00FEF1  47                 	db	71	;'G'
  1266  00FEF2  48                 	db	72	;'H'
  1267  00FEF3  2E                 	db	46
  1268  00FEF4  00                 	db	0
  1269  00FEF5                     STR_73:
  1270  00FEF5  41                 	db	65	;'A'
  1271  00FEF6  4C                 	db	76	;'L'
  1272  00FEF7  47                 	db	71	;'G'
  1273  00FEF8  32                 	db	50	;'2'
  1274  00FEF9  3A                 	db	58	;':'
  1275  00FEFA  20                 	db	32
  1276  00FEFB  31                 	db	49	;'1'
  1277  00FEFC  32                 	db	50	;'2'
  1278  00FEFD  20                 	db	32
  1279  00FEFE  43                 	db	67	;'C'
  1280  00FEFF  41                 	db	65	;'A'
  1281  00FF00  4E                 	db	78	;'N'
  1282  00FF01  53                 	db	83	;'S'
  1283  00FF02  00                 	db	0
  1284  00FF03                     STR_76:
  1285  00FF03  41                 	db	65	;'A'
  1286  00FF04  4C                 	db	76	;'L'
  1287  00FF05  47                 	db	71	;'G'
  1288  00FF06  35                 	db	53	;'5'
  1289  00FF07  3A                 	db	58	;':'
  1290  00FF08  20                 	db	32
  1291  00FF09  4E                 	db	78	;'N'
  1292  00FF0A  4F                 	db	79	;'O'
  1293  00FF0B  20                 	db	32
  1294  00FF0C  43                 	db	67	;'C'
  1295  00FF0D  41                 	db	65	;'A'
  1296  00FF0E  4E                 	db	78	;'N'
  1297  00FF0F  53                 	db	83	;'S'
  1298  00FF10  00                 	db	0
  1299  00FF11                     STR_71:
  1300  00FF11  50                 	db	80	;'P'
  1301  00FF12  55                 	db	85	;'U'
  1302  00FF13  53                 	db	83	;'S'
  1303  00FF14  48                 	db	72	;'H'
  1304  00FF15  20                 	db	32
  1305  00FF16  54                 	db	84	;'T'
  1306  00FF17  4F                 	db	79	;'O'
  1307  00FF18  20                 	db	32
  1308  00FF19  53                 	db	83	;'S'
  1309  00FF1A  54                 	db	84	;'T'
  1310  00FF1B  41                 	db	65	;'A'
  1311  00FF1C  52                 	db	82	;'R'
  1312  00FF1D  54                 	db	84	;'T'
  1313  00FF1E  00                 	db	0
  1314  00FF1F                     STR_23:
  1315  00FF1F  25                 	db	37
  1316  00FF20  64                 	db	100	;'d'
  1317  00FF21  20                 	db	32
  1318  00FF22  4D                 	db	77	;'M'
  1319  00FF23  49                 	db	73	;'I'
  1320  00FF24  4E                 	db	78	;'N'
  1321  00FF25  20                 	db	32
  1322  00FF26  25                 	db	37
  1323  00FF27  64                 	db	100	;'d'
  1324  00FF28  20                 	db	32
  1325  00FF29  53                 	db	83	;'S'
  1326  00FF2A  45                 	db	69	;'E'
  1327  00FF2B  43                 	db	67	;'C'
  1328  00FF2C  00                 	db	0
  1329  00FF2D                     STR_2:
  1330  00FF2D  54                 	db	84	;'T'
  1331  00FF2E  49                 	db	73	;'I'
  1332  00FF2F  4D                 	db	77	;'M'
  1333  00FF30  45                 	db	69	;'E'
  1334  00FF31  3A                 	db	58	;':'
  1335  00FF32  20                 	db	32
  1336  00FF33  25                 	db	37
  1337  00FF34  64                 	db	100	;'d'
  1338  00FF35  3A                 	db	58	;':'
  1339  00FF36  25                 	db	37
  1340  00FF37  30                 	db	48	;'0'
  1341  00FF38  32                 	db	50	;'2'
  1342  00FF39  64                 	db	100	;'d'
  1343  00FF3A  00                 	db	0
  1344  00FF3B                     STR_79:
  1345  00FF3B  54                 	db	84	;'T'
  1346  00FF3C  53                 	db	83	;'S'
  1347  00FF3D  54                 	db	84	;'T'
  1348  00FF3E  3A                 	db	58	;':'
  1349  00FF3F  20                 	db	32
  1350  00FF40  49                 	db	73	;'I'
  1351  00FF41  52                 	db	82	;'R'
  1352  00FF42  20                 	db	32
  1353  00FF43  53                 	db	83	;'S'
  1354  00FF44  4E                 	db	78	;'N'
  1355  00FF45  53                 	db	83	;'S'
  1356  00FF46  52                 	db	82	;'R'
  1357  00FF47  00                 	db	0
  1358  00FF48                     STR_109:
  1359  00FF48  53                 	db	83	;'S'
  1360  00FF49  4F                 	db	79	;'O'
  1361  00FF4A  4C                 	db	76	;'L'
  1362  00FF4B  45                 	db	69	;'E'
  1363  00FF4C  4E                 	db	78	;'N'
  1364  00FF4D  4F                 	db	79	;'O'
  1365  00FF4E  49                 	db	73	;'I'
  1366  00FF4F  44                 	db	68	;'D'
  1367  00FF50  20                 	db	32
  1368  00FF51  54                 	db	84	;'T'
  1369  00FF52  53                 	db	83	;'S'
  1370  00FF53  54                 	db	84	;'T'
  1371  00FF54  00                 	db	0
  1372  00FF55                     STR_65:
  1373  00FF55  54                 	db	84	;'T'
  1374  00FF56  49                 	db	73	;'I'
  1375  00FF57  4D                 	db	77	;'M'
  1376  00FF58  45                 	db	69	;'E'
  1377  00FF59  20                 	db	32
  1378  00FF5A  25                 	db	37
  1379  00FF5B  64                 	db	100	;'d'
  1380  00FF5C  3A                 	db	58	;':'
  1381  00FF5D  25                 	db	37
  1382  00FF5E  30                 	db	48	;'0'
  1383  00FF5F  32                 	db	50	;'2'
  1384  00FF60  64                 	db	100	;'d'
  1385  00FF61  00                 	db	0
  1386  00FF62                     STR_74:
  1387  00FF62  41                 	db	65	;'A'
  1388  00FF63  4C                 	db	76	;'L'
  1389  00FF64  47                 	db	71	;'G'
  1390  00FF65  33                 	db	51	;'3'
  1391  00FF66  3A                 	db	58	;':'
  1392  00FF67  20                 	db	32
  1393  00FF68  31                 	db	49	;'1'
  1394  00FF69  20                 	db	32
  1395  00FF6A  43                 	db	67	;'C'
  1396  00FF6B  41                 	db	65	;'A'
  1397  00FF6C  4E                 	db	78	;'N'
  1398  00FF6D  00                 	db	0
  1399  00FF6E                     STR_89:
  1400  00FF6E  50                 	db	80	;'P'
  1401  00FF6F  49                 	db	73	;'I'
  1402  00FF70  4E                 	db	78	;'N'
  1403  00FF71  20                 	db	32
  1404  00FF72  52                 	db	82	;'R'
  1405  00FF73  41                 	db	65	;'A'
  1406  00FF74  33                 	db	51	;'3'
  1407  00FF75  2E                 	db	46
  1408  00FF76  2E                 	db	46
  1409  00FF77  2E                 	db	46
  1410  00FF78  00                 	db	0
  1411  00FF79                     STR_91:
  1412  00FF79  50                 	db	80	;'P'
  1413  00FF7A  49                 	db	73	;'I'
  1414  00FF7B  4E                 	db	78	;'N'
  1415  00FF7C  20                 	db	32
  1416  00FF7D  52                 	db	82	;'R'
  1417  00FF7E  41                 	db	65	;'A'
  1418  00FF7F  34                 	db	52	;'4'
  1419  00FF80  2E                 	db	46
  1420  00FF81  2E                 	db	46
  1421  00FF82  2E                 	db	46
  1422  00FF83  00                 	db	0
  1423  00FF84                     STR_64:
  1424  00FF84  53                 	db	83	;'S'
  1425  00FF85  4F                 	db	79	;'O'
  1426  00FF86  52                 	db	82	;'R'
  1427  00FF87  54                 	db	84	;'T'
  1428  00FF88  49                 	db	73	;'I'
  1429  00FF89  4E                 	db	78	;'N'
  1430  00FF8A  47                 	db	71	;'G'
  1431  00FF8B  2E                 	db	46
  1432  00FF8C  2E                 	db	46
  1433  00FF8D  2E                 	db	46
  1434  00FF8E  00                 	db	0
  1435  00FF8F                     STR_110:
  1436  00FF8F  50                 	db	80	;'P'
  1437  00FF90  55                 	db	85	;'U'
  1438  00FF91  53                 	db	83	;'S'
  1439  00FF92  48                 	db	72	;'H'
  1440  00FF93  20                 	db	32
  1441  00FF94  44                 	db	68	;'D'
  1442  00FF95  4F                 	db	79	;'O'
  1443  00FF96  4E                 	db	78	;'N'
  1444  00FF97  45                 	db	69	;'E'
  1445  00FF98  00                 	db	0
  1446  00FF99                     STR_84:
  1447  00FF99  41                 	db	65	;'A'
  1448  00FF9A  43                 	db	67	;'C'
  1449  00FF9B  54                 	db	84	;'T'
  1450  00FF9C  55                 	db	85	;'U'
  1451  00FF9D  41                 	db	65	;'A'
  1452  00FF9E  54                 	db	84	;'T'
  1453  00FF9F  4F                 	db	79	;'O'
  1454  00FFA0  52                 	db	82	;'R'
  1455  00FFA1  53                 	db	83	;'S'
  1456  00FFA2  00                 	db	0
  1457  00FFA3                     STR_22:
  1458  00FFA3  44                 	db	68	;'D'
  1459  00FFA4  55                 	db	85	;'U'
  1460  00FFA5  52                 	db	82	;'R'
  1461  00FFA6  41                 	db	65	;'A'
  1462  00FFA7  54                 	db	84	;'T'
  1463  00FFA8  49                 	db	73	;'I'
  1464  00FFA9  4F                 	db	79	;'O'
  1465  00FFAA  4E                 	db	78	;'N'
  1466  00FFAB  3A                 	db	58	;':'
  1467  00FFAC  00                 	db	0
  1468  00FFAD                     STR_77:
  1469  00FFAD  53                 	db	83	;'S'
  1470  00FFAE  45                 	db	69	;'E'
  1471  00FFAF  4E                 	db	78	;'N'
  1472  00FFB0  53                 	db	83	;'S'
  1473  00FFB1  4F                 	db	79	;'O'
  1474  00FFB2  52                 	db	82	;'R'
  1475  00FFB3  53                 	db	83	;'S'
  1476  00FFB4  00                 	db	0
  1477  00FFB5                     STR_113:
  1478  00FFB5  28                 	db	40
  1479  00FFB6  6E                 	db	110	;'n'
  1480  00FFB7  75                 	db	117	;'u'
  1481  00FFB8  6C                 	db	108	;'l'
  1482  00FFB9  6C                 	db	108	;'l'
  1483  00FFBA  29                 	db	41
  1484  00FFBB  00                 	db	0
  1485  00FFBC                     STR_67:
  1486  00FFBC  46                 	db	70	;'F'
  1487  00FFBD  41                 	db	65	;'A'
  1488  00FFBE  49                 	db	73	;'I'
  1489  00FFBF  4C                 	db	76	;'L'
  1490  00FFC0  45                 	db	69	;'E'
  1491  00FFC1  44                 	db	68	;'D'
  1492  00FFC2  00                 	db	0
  1493  00FFC3                     STR_7:
  1494  00FFC3  53                 	db	83	;'S'
  1495  00FFC4  54                 	db	84	;'T'
  1496  00FFC5  41                 	db	65	;'A'
  1497  00FFC6  52                 	db	82	;'R'
  1498  00FFC7  54                 	db	84	;'T'
  1499  00FFC8  3A                 	db	58	;':'
  1500  00FFC9  00                 	db	0
  1501  00FFCA                     STR_9:
  1502  00FFCA  46                 	db	70	;'F'
  1503  00FFCB  45                 	db	69	;'E'
  1504  00FFCC  42                 	db	66	;'B'
  1505  00FFCD  00                 	db	0
  1506  00FFCE                     STR_19:
  1507  00FFCE  44                 	db	68	;'D'
  1508  00FFCF  45                 	db	69	;'E'
  1509  00FFD0  43                 	db	67	;'C'
  1510  00FFD1  00                 	db	0
  1511  00FFD2                     STR_15:
  1512  00FFD2  41                 	db	65	;'A'
  1513  00FFD3  55                 	db	85	;'U'
  1514  00FFD4  47                 	db	71	;'G'
  1515  00FFD5  00                 	db	0
  1516  00FFD6                     STR_14:
  1517  00FFD6  4A                 	db	74	;'J'
  1518  00FFD7  55                 	db	85	;'U'
  1519  00FFD8  4C                 	db	76	;'L'
  1520  00FFD9  00                 	db	0
  1521  00FFDA                     STR_8:
  1522  00FFDA  4A                 	db	74	;'J'
  1523  00FFDB  41                 	db	65	;'A'
  1524  00FFDC  4E                 	db	78	;'N'
  1525  00FFDD  00                 	db	0
  1526  00FFDE                     STR_13:
  1527  00FFDE  4A                 	db	74	;'J'
  1528  00FFDF  55                 	db	85	;'U'
  1529  00FFE0  4E                 	db	78	;'N'
  1530  00FFE1  00                 	db	0
  1531  00FFE2                     STR_16:
  1532  00FFE2  53                 	db	83	;'S'
  1533  00FFE3  45                 	db	69	;'E'
  1534  00FFE4  50                 	db	80	;'P'
  1535  00FFE5  00                 	db	0
  1536  00FFE6                     STR_10:
  1537  00FFE6  4D                 	db	77	;'M'
  1538  00FFE7  41                 	db	65	;'A'
  1539  00FFE8  52                 	db	82	;'R'
  1540  00FFE9  00                 	db	0
  1541  00FFEA                     STR_11:
  1542  00FFEA  41                 	db	65	;'A'
  1543  00FFEB  50                 	db	80	;'P'
  1544  00FFEC  52                 	db	82	;'R'
  1545  00FFED  00                 	db	0
  1546  00FFEE                     STR_20:
  1547  00FFEE  45                 	db	69	;'E'
  1548  00FFEF  52                 	db	82	;'R'
  1549  00FFF0  52                 	db	82	;'R'
  1550  00FFF1  00                 	db	0
  1551  00FFF2                     STR_17:
  1552  00FFF2  4F                 	db	79	;'O'
  1553  00FFF3  43                 	db	67	;'C'
  1554  00FFF4  54                 	db	84	;'T'
  1555  00FFF5  00                 	db	0
  1556  00FFF6                     STR_18:
  1557  00FFF6  4E                 	db	78	;'N'
  1558  00FFF7  4F                 	db	79	;'O'
  1559  00FFF8  56                 	db	86	;'V'
  1560  00FFF9  00                 	db	0
  1561  00FFFA                     STR_12:
  1562  00FFFA  4D                 	db	77	;'M'
  1563  00FFFB  41                 	db	65	;'A'
  1564  00FFFC  59                 	db	89	;'Y'
  1565  00FFFD  00                 	db	0
  1566  0000                     
  1567                           ; #config settings
  1568  00FFFE  00                 	db	0	; dummy byte at the end
  1569  0000                     
  1570                           	psect	cinit
  1571  003EBE                     __pcinit:
  1572                           	opt stack 0
  1573  003EBE                     start_initialization:
  1574                           	opt stack 0
  1575  003EBE                     __initialization:
  1576                           	opt stack 0
  1577                           
  1578                           ; Initialize objects allocated to BANK1 (8 bytes)
  1579                           ; load TBLPTR registers with __pidataBANK1
  1580  003EBE  0E1C               	movlw	low __pidataBANK1
  1581  003EC0  6EF6               	movwf	tblptrl,c
  1582  003EC2  0E46               	movlw	high __pidataBANK1
  1583  003EC4  6EF7               	movwf	tblptrh,c
  1584  003EC6  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1585  003EC8  6EF8               	movwf	tblptru,c
  1586  003ECA  EE01  F02F         	lfsr	0,__pdataBANK1
  1587  003ECE  EE10 F008          	lfsr	1,8
  1588  003ED2                     copy_data0:
  1589  003ED2  0009               	tblrd		*+
  1590  003ED4  CFF5 FFEE          	movff	tablat,postinc0
  1591  003ED8  50E5               	movf	postdec1,w,c
  1592  003EDA  50E1               	movf	fsr1l,w,c
  1593  003EDC  E1FA               	bnz	copy_data0
  1594                           
  1595                           ; Clear objects allocated to BANK1 (47 bytes)
  1596  003EDE  EE01  F000         	lfsr	0,__pbssBANK1
  1597  003EE2  0E2F               	movlw	47
  1598  003EE4                     clear_0:
  1599  003EE4  6AEE               	clrf	postinc0,c
  1600  003EE6  06E8               	decf	wreg,f,c
  1601  003EE8  E1FD               	bnz	clear_0
  1602                           
  1603                           ; Clear objects allocated to BANK0 (38 bytes)
  1604  003EEA  EE00  F0DA         	lfsr	0,__pbssBANK0
  1605  003EEE  0E26               	movlw	38
  1606  003EF0                     clear_1:
  1607  003EF0  6AEE               	clrf	postinc0,c
  1608  003EF2  06E8               	decf	wreg,f,c
  1609  003EF4  E1FD               	bnz	clear_1
  1610                           
  1611                           ; Clear objects allocated to COMRAM (35 bytes)
  1612  003EF6  EE00  F05B         	lfsr	0,__pbssCOMRAM
  1613  003EFA  0E23               	movlw	35
  1614  003EFC                     clear_2:
  1615  003EFC  6AEE               	clrf	postinc0,c
  1616  003EFE  06E8               	decf	wreg,f,c
  1617  003F00  E1FD               	bnz	clear_2
  1618  003F02                     end_of_initialization:
  1619                           	opt stack 0
  1620  003F02                     __end_of__initialization:
  1621                           	opt stack 0
  1622  003F02  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1623  003F04  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1624  003F06  0100               	movlb	0
  1625  003F08  EFFD  F01A         	goto	_main	;jump to C main() function
  1626                           tblptru	equ	0xFF8
  1627                           tblptrh	equ	0xFF7
  1628                           tblptrl	equ	0xFF6
  1629                           tablat	equ	0xFF5
  1630                           postinc0	equ	0xFEE
  1631                           wreg	equ	0xFE8
  1632                           postdec1	equ	0xFE5
  1633                           fsr1l	equ	0xFE1
  1634                           
  1635                           	psect	bssCOMRAM
  1636  00005B                     __pbssCOMRAM:
  1637                           	opt stack 0
  1638  00005B                     _back:
  1639                           	opt stack 0
  1640  00005B                     	ds	2
  1641  00005D                     _count_can_no_lab:
  1642                           	opt stack 0
  1643  00005D                     	ds	2
  1644  00005F                     _count_can_w_lab:
  1645                           	opt stack 0
  1646  00005F                     	ds	2
  1647  000061                     _count_pop_no_tab:
  1648                           	opt stack 0
  1649  000061                     	ds	2
  1650  000063                     _count_pop_w_tab:
  1651                           	opt stack 0
  1652  000063                     	ds	2
  1653  000065                     _cur_can:
  1654                           	opt stack 0
  1655  000065                     	ds	2
  1656  000067                     _debug:
  1657                           	opt stack 0
  1658  000067                     	ds	2
  1659  000069                     _down:
  1660                           	opt stack 0
  1661  000069                     	ds	2
  1662  00006B                     _enter:
  1663                           	opt stack 0
  1664  00006B                     	ds	2
  1665  00006D                     _f_ID_receive:
  1666                           	opt stack 0
  1667  00006D                     	ds	2
  1668  00006F                     _f_can_coming_to_ID:
  1669                           	opt stack 0
  1670  00006F                     	ds	2
  1671  000071                     _f_can_coming_to_distribution:
  1672                           	opt stack 0
  1673  000071                     	ds	2
  1674  000073                     _f_lastCan:
  1675                           	opt stack 0
  1676  000073                     	ds	2
  1677  000075                     _firstboot:
  1678                           	opt stack 0
  1679  000075                     	ds	2
  1680  000077                     _up:
  1681                           	opt stack 0
  1682  000077                     	ds	2
  1683  000079                     _was_low_1:
  1684                           	opt stack 0
  1685  000079                     	ds	2
  1686  00007B                     _was_low_3:
  1687                           	opt stack 0
  1688  00007B                     	ds	2
  1689  00007D                     _input:
  1690                           	opt stack 0
  1691  00007D                     	ds	1
  1692                           tblptru	equ	0xFF8
  1693                           tblptrh	equ	0xFF7
  1694                           tblptrl	equ	0xFF6
  1695                           tablat	equ	0xFF5
  1696                           postinc0	equ	0xFEE
  1697                           wreg	equ	0xFE8
  1698                           postdec1	equ	0xFE5
  1699                           fsr1l	equ	0xFE1
  1700                           
  1701                           	psect	bssBANK0
  1702  0000DA                     __pbssBANK0:
  1703                           	opt stack 0
  1704  0000DA                     _IR_signal:
  1705                           	opt stack 0
  1706  0000DA                     	ds	2
  1707  0000DC                     _MAG_signal:
  1708                           	opt stack 0
  1709  0000DC                     	ds	2
  1710  0000DE                     _RTCflag:
  1711                           	opt stack 0
  1712  0000DE                     	ds	2
  1713  0000E0                     _cur_state:
  1714                           	opt stack 0
  1715  0000E0                     	ds	2
  1716  0000E2                     _f_loadingNewCan:
  1717                           	opt stack 0
  1718  0000E2                     	ds	2
  1719  0000E4                     _first:
  1720                           	opt stack 0
  1721  0000E4                     	ds	2
  1722  0000E6                     _log:
  1723                           	opt stack 0
  1724  0000E6                     	ds	2
  1725  0000E8                     _log_completion:
  1726                           	opt stack 0
  1727  0000E8                     	ds	2
  1728  0000EA                     _log_count_can_no_lab:
  1729                           	opt stack 0
  1730  0000EA                     	ds	2
  1731  0000EC                     _log_count_can_w_lab:
  1732                           	opt stack 0
  1733  0000EC                     	ds	2
  1734  0000EE                     _log_count_pop_no_tab:
  1735                           	opt stack 0
  1736  0000EE                     	ds	2
  1737  0000F0                     _log_count_pop_w_tab:
  1738                           	opt stack 0
  1739  0000F0                     	ds	2
  1740  0000F2                     _log_count_total:
  1741                           	opt stack 0
  1742  0000F2                     	ds	2
  1743  0000F4                     _log_total_time:
  1744                           	opt stack 0
  1745  0000F4                     	ds	2
  1746  0000F6                     _logstate:
  1747                           	opt stack 0
  1748  0000F6                     	ds	2
  1749  0000F8                     _total_time:
  1750                           	opt stack 0
  1751  0000F8                     	ds	2
  1752  0000FA                     _var:
  1753                           	opt stack 0
  1754  0000FA                     	ds	2
  1755  0000FC                     _machine_state:
  1756                           	opt stack 0
  1757  0000FC                     	ds	1
  1758  0000FD                     _sel:
  1759                           	opt stack 0
  1760  0000FD                     	ds	1
  1761  0000FE                     _count_total:
  1762                           	opt stack 0
  1763  0000FE                     	ds	2
  1764                           tblptru	equ	0xFF8
  1765                           tblptrh	equ	0xFF7
  1766                           tblptrl	equ	0xFF6
  1767                           tablat	equ	0xFF5
  1768                           postinc0	equ	0xFEE
  1769                           wreg	equ	0xFE8
  1770                           postdec1	equ	0xFE5
  1771                           fsr1l	equ	0xFE1
  1772                           
  1773                           	psect	bssBANK1
  1774  000100                     __pbssBANK1:
  1775                           	opt stack 0
  1776  000100                     _log_startTime:
  1777                           	opt stack 0
  1778  000100                     	ds	14
  1779  00010E                     _startTime:
  1780                           	opt stack 0
  1781  00010E                     	ds	14
  1782  00011C                     _servoTimes:
  1783                           	opt stack 0
  1784  00011C                     	ds	8
  1785  000124                     _time:
  1786                           	opt stack 0
  1787  000124                     	ds	7
  1788  00012B                     _f_can_distributed:
  1789                           	opt stack 0
  1790  00012B                     	ds	2
  1791  00012D                     _i:
  1792                           	opt stack 0
  1793  00012D                     	ds	2
  1794                           tblptru	equ	0xFF8
  1795                           tblptrh	equ	0xFF7
  1796                           tblptrl	equ	0xFF6
  1797                           tablat	equ	0xFF5
  1798                           postinc0	equ	0xFEE
  1799                           wreg	equ	0xFE8
  1800                           postdec1	equ	0xFE5
  1801                           fsr1l	equ	0xFE1
  1802                           
  1803                           	psect	dataBANK1
  1804  00012F                     __pdataBANK1:
  1805                           	opt stack 0
  1806  00012F                     UI@F3223:
  1807                           	opt stack 0
  1808  00012F                     	ds	4
  1809  000133                     printRTC@F3214:
  1810                           	opt stack 0
  1811  000133                     	ds	4
  1812                           tblptru	equ	0xFF8
  1813                           tblptrh	equ	0xFF7
  1814                           tblptrl	equ	0xFF6
  1815                           tablat	equ	0xFF5
  1816                           postinc0	equ	0xFEE
  1817                           wreg	equ	0xFE8
  1818                           postdec1	equ	0xFE5
  1819                           fsr1l	equ	0xFE1
  1820                           
  1821                           	psect	cstackBANK0
  1822  000080                     __pcstackBANK0:
  1823                           	opt stack 0
  1824  000080                     ??_delay_ms:
  1825  000080                     ??_PortTests:
  1826  000080                     ??_isdigit:
  1827  000080                     ??_readADC:
  1828  000080                     ??_I2C_Master_Wait:
  1829  000080                     ?___wmul:
  1830                           	opt stack 0
  1831  000080                     ?___awmod:
  1832                           	opt stack 0
  1833  000080                     ?___lwdiv:
  1834                           	opt stack 0
  1835  000080                     ?___lldiv:
  1836                           	opt stack 0
  1837  000080                     lcdNibble@temp:
  1838                           	opt stack 0
  1839  000080                     initTime@m:
  1840                           	opt stack 0
  1841  000080                     updateServoPosition@time_us:
  1842                           	opt stack 0
  1843  000080                     EEPROM_read@address:
  1844                           	opt stack 0
  1845  000080                     ___wmul@multiplier:
  1846                           	opt stack 0
  1847  000080                     ___awmod@dividend:
  1848                           	opt stack 0
  1849  000080                     ___lwdiv@dividend:
  1850                           	opt stack 0
  1851  000080                     strcpy@to:
  1852                           	opt stack 0
  1853  000080                     ___lldiv@dividend:
  1854                           	opt stack 0
  1855                           
  1856                           ; 4 bytes @ 0x0
  1857  000080                     	ds	1
  1858  000081                     readADC@channel:
  1859                           	opt stack 0
  1860  000081                     I2C_Master_Read@a:
  1861                           	opt stack 0
  1862  000081                     lcdNibble@data:
  1863                           	opt stack 0
  1864  000081                     initTime@h:
  1865                           	opt stack 0
  1866  000081                     delay_ms@milliseconds:
  1867                           	opt stack 0
  1868  000081                     _isdigit$1893:
  1869                           	opt stack 0
  1870  000081                     I2C_Master_Write@d:
  1871                           	opt stack 0
  1872                           
  1873                           ; 2 bytes @ 0x1
  1874  000081                     	ds	1
  1875  000082                     ??_readIR:
  1876  000082                     ??_readMAG:
  1877  000082                     I2C_Master_Read@temp:
  1878                           	opt stack 0
  1879  000082                     lcdInst@data:
  1880                           	opt stack 0
  1881  000082                     putch@data:
  1882                           	opt stack 0
  1883  000082                     initTime@w:
  1884                           	opt stack 0
  1885  000082                     isdigit@c:
  1886                           	opt stack 0
  1887  000082                     updateServoPosition@timer:
  1888                           	opt stack 0
  1889  000082                     ___wmul@multiplicand:
  1890                           	opt stack 0
  1891  000082                     ___awmod@divisor:
  1892                           	opt stack 0
  1893  000082                     ___lwdiv@divisor:
  1894                           	opt stack 0
  1895  000082                     strcpy@from:
  1896                           	opt stack 0
  1897                           
  1898                           ; 2 bytes @ 0x2
  1899  000082                     	ds	1
  1900  000083                     ??_initLCD:
  1901  000083                     initTime@DD:
  1902                           	opt stack 0
  1903  000083                     getRTC@i:
  1904                           	opt stack 0
  1905                           
  1906                           ; 2 bytes @ 0x3
  1907  000083                     	ds	1
  1908  000084                     ??_updateServoPosition:
  1909  000084                     initTime@MM:
  1910                           	opt stack 0
  1911  000084                     ___awmod@counter:
  1912                           	opt stack 0
  1913  000084                     readIR@res:
  1914                           	opt stack 0
  1915  000084                     readMAG@res:
  1916                           	opt stack 0
  1917  000084                     ___wmul@product:
  1918                           	opt stack 0
  1919  000084                     ___lwdiv@quotient:
  1920                           	opt stack 0
  1921  000084                     strcpy@cp:
  1922                           	opt stack 0
  1923  000084                     ___lldiv@divisor:
  1924                           	opt stack 0
  1925                           
  1926                           ; 4 bytes @ 0x4
  1927  000084                     	ds	1
  1928  000085                     ??_initSortTimer:
  1929  000085                     initTime@YY:
  1930                           	opt stack 0
  1931  000085                     ___awmod@sign:
  1932                           	opt stack 0
  1933                           
  1934                           ; 1 bytes @ 0x5
  1935  000085                     	ds	1
  1936  000086                     ??_ID:
  1937  000086                     ??_getIR:
  1938  000086                     ?___awdiv:
  1939                           	opt stack 0
  1940  000086                     initTime@s:
  1941                           	opt stack 0
  1942  000086                     ___lwdiv@counter:
  1943                           	opt stack 0
  1944  000086                     updateServoPosition@my_time:
  1945                           	opt stack 0
  1946  000086                     ___awdiv@dividend:
  1947                           	opt stack 0
  1948                           
  1949                           ; 2 bytes @ 0x6
  1950  000086                     	ds	1
  1951  000087                     ?___lwmod:
  1952                           	opt stack 0
  1953  000087                     ___lwmod@dividend:
  1954                           	opt stack 0
  1955                           
  1956                           ; 2 bytes @ 0x7
  1957  000087                     	ds	1
  1958  000088                     ??_Distribution:
  1959  000088                     ??_initServos:
  1960  000088                     initSortTimer@i:
  1961                           	opt stack 0
  1962  000088                     ___awdiv@divisor:
  1963                           	opt stack 0
  1964  000088                     ___lldiv@quotient:
  1965                           	opt stack 0
  1966  000088                     ID@sensor_outputs:
  1967                           	opt stack 0
  1968                           
  1969                           ; 6 bytes @ 0x8
  1970  000088                     	ds	1
  1971  000089                     ___lwmod@divisor:
  1972                           	opt stack 0
  1973                           
  1974                           ; 2 bytes @ 0x9
  1975  000089                     	ds	1
  1976  00008A                     ___awdiv@counter:
  1977                           	opt stack 0
  1978                           
  1979                           ; 1 bytes @ 0xA
  1980  00008A                     	ds	1
  1981  00008B                     ___awdiv@sign:
  1982                           	opt stack 0
  1983  00008B                     ___lwmod@counter:
  1984                           	opt stack 0
  1985                           
  1986                           ; 1 bytes @ 0xB
  1987  00008B                     	ds	1
  1988  00008C                     ___lldiv@counter:
  1989                           	opt stack 0
  1990  00008C                     ___awdiv@quotient:
  1991                           	opt stack 0
  1992                           
  1993                           ; 2 bytes @ 0xC
  1994  00008C                     	ds	1
  1995  00008D                     I2C_Master_Init@c:
  1996                           	opt stack 0
  1997                           
  1998                           ; 4 bytes @ 0xD
  1999  00008D                     	ds	1
  2000  00008E                     ?_printf:
  2001                           	opt stack 0
  2002  00008E                     printf@f:
  2003                           	opt stack 0
  2004                           
  2005                           ; 2 bytes @ 0xE
  2006  00008E                     	ds	3
  2007  000091                     ??_I2C_Master_Init:
  2008                           
  2009                           ; 1 bytes @ 0x11
  2010  000091                     	ds	4
  2011  000095                     ??_loadRTC:
  2012                           
  2013                           ; 1 bytes @ 0x15
  2014  000095                     	ds	1
  2015  000096                     loadRTC@i:
  2016                           	opt stack 0
  2017                           
  2018                           ; 2 bytes @ 0x16
  2019  000096                     	ds	4
  2020  00009A                     ??_printf:
  2021                           
  2022                           ; 1 bytes @ 0x1A
  2023  00009A                     	ds	4
  2024  00009E                     printf@prec:
  2025                           	opt stack 0
  2026                           
  2027                           ; 1 bytes @ 0x1E
  2028  00009E                     	ds	1
  2029  00009F                     printf@cp:
  2030                           	opt stack 0
  2031                           
  2032                           ; 2 bytes @ 0x1F
  2033  00009F                     	ds	2
  2034  0000A1                     printf@ap:
  2035                           	opt stack 0
  2036                           
  2037                           ; 2 bytes @ 0x21
  2038  0000A1                     	ds	2
  2039  0000A3                     printf@len:
  2040                           	opt stack 0
  2041                           
  2042                           ; 2 bytes @ 0x23
  2043  0000A3                     	ds	2
  2044  0000A5                     printf@val:
  2045                           	opt stack 0
  2046                           
  2047                           ; 2 bytes @ 0x25
  2048  0000A5                     	ds	2
  2049  0000A7                     printf@flag:
  2050                           	opt stack 0
  2051                           
  2052                           ; 1 bytes @ 0x27
  2053  0000A7                     	ds	1
  2054  0000A8                     printf@c:
  2055                           	opt stack 0
  2056                           
  2057                           ; 1 bytes @ 0x28
  2058  0000A8                     	ds	1
  2059  0000A9                     printf@width:
  2060                           	opt stack 0
  2061                           
  2062                           ; 2 bytes @ 0x29
  2063  0000A9                     	ds	2
  2064  0000AB                     ??_printRTC:
  2065  0000AB                     ??_algorithmTest:
  2066  0000AB                     ??_sensorTest:
  2067  0000AB                     ??_actuatorTest:
  2068  0000AB                     ??_PortTestA5:
  2069  0000AB                     ??_ToggleTestA5:
  2070  0000AB                     ??_SolenoidTestA5:
  2071  0000AB                     ??_BothServos:
  2072  0000AB                     EEPROM_write@address:
  2073                           	opt stack 0
  2074                           
  2075                           ; 2 bytes @ 0x2B
  2076  0000AB                     	ds	1
  2077  0000AC                     ToggleTestA5@on:
  2078                           	opt stack 0
  2079                           
  2080                           ; 2 bytes @ 0x2C
  2081  0000AC                     	ds	1
  2082  0000AD                     EEPROM_write@data:
  2083                           	opt stack 0
  2084  0000AD                     actuatorTest@i_1584:
  2085                           	opt stack 0
  2086  0000AD                     sensorTest@res:
  2087                           	opt stack 0
  2088  0000AD                     SolenoidTestA5@i:
  2089                           	opt stack 0
  2090                           
  2091                           ; 2 bytes @ 0x2D
  2092  0000AD                     	ds	1
  2093  0000AE                     ??_EEPROM_write:
  2094  0000AE                     actuatorTest@i_1591:
  2095                           	opt stack 0
  2096  0000AE                     printRTC@INT_time:
  2097                           	opt stack 0
  2098                           
  2099                           ; 14 bytes @ 0x2E
  2100  0000AE                     	ds	1
  2101  0000AF                     EEPROM_write@i:
  2102                           	opt stack 0
  2103  0000AF                     actuatorTest@i_1592:
  2104                           	opt stack 0
  2105  0000AF                     SolenoidTestA5@i_1637:
  2106                           	opt stack 0
  2107                           
  2108                           ; 1 bytes @ 0x2F
  2109  0000AF                     	ds	1
  2110  0000B0                     EEPROM_write@i_1321:
  2111                           	opt stack 0
  2112  0000B0                     actuatorTest@i_1594:
  2113                           	opt stack 0
  2114  0000B0                     SolenoidTestA5@i_1639:
  2115                           	opt stack 0
  2116                           
  2117                           ; 1 bytes @ 0x30
  2118  0000B0                     	ds	1
  2119  0000B1                     ??_Loading:
  2120  0000B1                     logRun@num:
  2121                           	opt stack 0
  2122  0000B1                     actuatorTest@i_1595:
  2123                           	opt stack 0
  2124                           
  2125                           ; 1 bytes @ 0x31
  2126  0000B1                     	ds	1
  2127  0000B2                     logRun@byte1:
  2128                           	opt stack 0
  2129  0000B2                     actuatorTest@i_1597:
  2130                           	opt stack 0
  2131                           
  2132                           ; 1 bytes @ 0x32
  2133  0000B2                     	ds	1
  2134  0000B3                     logRun@byte2:
  2135                           	opt stack 0
  2136  0000B3                     actuatorTest@i_1598:
  2137                           	opt stack 0
  2138  0000B3                     Loading@addr:
  2139                           	opt stack 0
  2140                           
  2141                           ; 2 bytes @ 0x33
  2142  0000B3                     	ds	1
  2143  0000B4                     logRun@byte3:
  2144                           	opt stack 0
  2145  0000B4                     actuatorTest@i_1600:
  2146                           	opt stack 0
  2147                           
  2148                           ; 1 bytes @ 0x34
  2149  0000B4                     	ds	1
  2150  0000B5                     Loading@byte1:
  2151                           	opt stack 0
  2152  0000B5                     logRun@byte_i:
  2153                           	opt stack 0
  2154  0000B5                     actuatorTest@i_1601:
  2155                           	opt stack 0
  2156                           
  2157                           ; 1 bytes @ 0x35
  2158  0000B5                     	ds	1
  2159  0000B6                     logRun@byte11:
  2160                           	opt stack 0
  2161  0000B6                     actuatorTest@i_1603:
  2162                           	opt stack 0
  2163  0000B6                     Loading@i:
  2164                           	opt stack 0
  2165                           
  2166                           ; 2 bytes @ 0x36
  2167  0000B6                     	ds	1
  2168  0000B7                     actuatorTest@i_1604:
  2169                           	opt stack 0
  2170  0000B7                     logRun@i:
  2171                           	opt stack 0
  2172                           
  2173                           ; 2 bytes @ 0x37
  2174  0000B7                     	ds	1
  2175  0000B8                     actuatorTest@i_1606:
  2176                           	opt stack 0
  2177                           
  2178                           ; 1 bytes @ 0x38
  2179  0000B8                     	ds	1
  2180  0000B9                     actuatorTest@i_1607:
  2181                           	opt stack 0
  2182  0000B9                     logRun@addr:
  2183                           	opt stack 0
  2184                           
  2185                           ; 2 bytes @ 0x39
  2186  0000B9                     	ds	1
  2187  0000BA                     actuatorTest@i_1610:
  2188                           	opt stack 0
  2189                           
  2190                           ; 1 bytes @ 0x3A
  2191  0000BA                     	ds	1
  2192  0000BB                     actuatorTest@i_1611:
  2193                           	opt stack 0
  2194                           
  2195                           ; 1 bytes @ 0x3B
  2196  0000BB                     	ds	1
  2197  0000BC                     actuatorTest@i_1613:
  2198                           	opt stack 0
  2199  0000BC                     printRTC@RTC_month:
  2200                           	opt stack 0
  2201                           
  2202                           ; 2 bytes @ 0x3C
  2203  0000BC                     	ds	1
  2204  0000BD                     actuatorTest@i_1614:
  2205                           	opt stack 0
  2206                           
  2207                           ; 1 bytes @ 0x3D
  2208  0000BD                     	ds	1
  2209  0000BE                     actuatorTest@i_1616:
  2210                           	opt stack 0
  2211  0000BE                     printRTC@month:
  2212                           	opt stack 0
  2213                           
  2214                           ; 4 bytes @ 0x3E
  2215  0000BE                     	ds	1
  2216  0000BF                     actuatorTest@i_1617:
  2217                           	opt stack 0
  2218                           
  2219                           ; 1 bytes @ 0x3F
  2220  0000BF                     	ds	1
  2221  0000C0                     actuatorTest@i_1620:
  2222                           	opt stack 0
  2223                           
  2224                           ; 1 bytes @ 0x40
  2225  0000C0                     	ds	1
  2226  0000C1                     actuatorTest@i_1621:
  2227                           	opt stack 0
  2228                           
  2229                           ; 1 bytes @ 0x41
  2230  0000C1                     	ds	1
  2231  0000C2                     actuatorTest@i_1623:
  2232                           	opt stack 0
  2233  0000C2                     printRTC@i:
  2234                           	opt stack 0
  2235                           
  2236                           ; 2 bytes @ 0x42
  2237  0000C2                     	ds	1
  2238  0000C3                     actuatorTest@i_1624:
  2239                           	opt stack 0
  2240                           
  2241                           ; 1 bytes @ 0x43
  2242  0000C3                     	ds	1
  2243  0000C4                     ??_UI:
  2244  0000C4                     actuatorTest@i:
  2245                           	opt stack 0
  2246                           
  2247                           ; 2 bytes @ 0x44
  2248  0000C4                     	ds	2
  2249  0000C6                     ??_Test:
  2250  0000C6                     _UI$2246:
  2251                           	opt stack 0
  2252                           
  2253                           ; 2 bytes @ 0x46
  2254  0000C6                     	ds	2
  2255  0000C8                     UI@i:
  2256                           	opt stack 0
  2257                           
  2258                           ; 1 bytes @ 0x48
  2259  0000C8                     	ds	1
  2260  0000C9                     UI@i_409:
  2261                           	opt stack 0
  2262                           
  2263                           ; 1 bytes @ 0x49
  2264  0000C9                     	ds	1
  2265  0000CA                     UI@i_412:
  2266                           	opt stack 0
  2267                           
  2268                           ; 1 bytes @ 0x4A
  2269  0000CA                     	ds	1
  2270  0000CB                     UI@i_413:
  2271                           	opt stack 0
  2272                           
  2273                           ; 1 bytes @ 0x4B
  2274  0000CB                     	ds	1
  2275  0000CC                     UI@i_431:
  2276                           	opt stack 0
  2277                           
  2278                           ; 1 bytes @ 0x4C
  2279  0000CC                     	ds	1
  2280  0000CD                     UI@i_432:
  2281                           	opt stack 0
  2282                           
  2283                           ; 1 bytes @ 0x4D
  2284  0000CD                     	ds	1
  2285  0000CE                     UI@i_435:
  2286                           	opt stack 0
  2287                           
  2288                           ; 1 bytes @ 0x4E
  2289  0000CE                     	ds	1
  2290  0000CF                     UI@i_436:
  2291                           	opt stack 0
  2292                           
  2293                           ; 1 bytes @ 0x4F
  2294  0000CF                     	ds	1
  2295  0000D0                     UI@i_439:
  2296                           	opt stack 0
  2297                           
  2298                           ; 1 bytes @ 0x50
  2299  0000D0                     	ds	1
  2300  0000D1                     UI@i_440:
  2301                           	opt stack 0
  2302                           
  2303                           ; 1 bytes @ 0x51
  2304  0000D1                     	ds	1
  2305  0000D2                     UI@i_443:
  2306                           	opt stack 0
  2307                           
  2308                           ; 1 bytes @ 0x52
  2309  0000D2                     	ds	1
  2310  0000D3                     UI@i_444:
  2311                           	opt stack 0
  2312                           
  2313                           ; 1 bytes @ 0x53
  2314  0000D3                     	ds	1
  2315  0000D4                     UI@i_447:
  2316                           	opt stack 0
  2317                           
  2318                           ; 1 bytes @ 0x54
  2319  0000D4                     	ds	1
  2320  0000D5                     UI@i_448:
  2321                           	opt stack 0
  2322                           
  2323                           ; 1 bytes @ 0x55
  2324  0000D5                     	ds	1
  2325  0000D6                     UI@month:
  2326                           	opt stack 0
  2327                           
  2328                           ; 4 bytes @ 0x56
  2329  0000D6                     	ds	4
  2330  0000DA                     tblptru	equ	0xFF8
  2331                           tblptrh	equ	0xFF7
  2332                           tblptrl	equ	0xFF6
  2333                           tablat	equ	0xFF5
  2334                           postinc0	equ	0xFEE
  2335                           wreg	equ	0xFE8
  2336                           postdec1	equ	0xFE5
  2337                           fsr1l	equ	0xFE1
  2338                           
  2339                           ; 1 bytes @ 0x5A
  2340                           
  2341                           	psect	cstackCOMRAM
  2342  000001                     __pcstackCOMRAM:
  2343                           	opt stack 0
  2344  000001                     ??i2_I2C_Master_Wait:
  2345  000001                     ??i2_isdigit:
  2346  000001                     ?i2___wmul:
  2347                           	opt stack 0
  2348  000001                     ?i2___lwmod:
  2349                           	opt stack 0
  2350  000001                     i2lcdNibble@temp:
  2351                           	opt stack 0
  2352  000001                     i2EEPROM_read@address:
  2353                           	opt stack 0
  2354  000001                     i2___wmul@multiplier:
  2355                           	opt stack 0
  2356  000001                     i2___lwmod@dividend:
  2357                           	opt stack 0
  2358  000001                     i2strcpy@to:
  2359                           	opt stack 0
  2360                           
  2361                           ; 2 bytes @ 0x0
  2362  000001                     	ds	1
  2363  000002                     i2I2C_Master_Read@a:
  2364                           	opt stack 0
  2365  000002                     i2lcdNibble@data:
  2366                           	opt stack 0
  2367  000002                     i2_isdigit$1893:
  2368                           	opt stack 0
  2369  000002                     i2I2C_Master_Write@d:
  2370                           	opt stack 0
  2371                           
  2372                           ; 2 bytes @ 0x1
  2373  000002                     	ds	1
  2374  000003                     i2I2C_Master_Read@temp:
  2375                           	opt stack 0
  2376  000003                     i2lcdInst@data:
  2377                           	opt stack 0
  2378  000003                     i2putch@data:
  2379                           	opt stack 0
  2380  000003                     i2isdigit@c:
  2381                           	opt stack 0
  2382  000003                     i2___wmul@multiplicand:
  2383                           	opt stack 0
  2384  000003                     i2___lwmod@divisor:
  2385                           	opt stack 0
  2386  000003                     i2strcpy@from:
  2387                           	opt stack 0
  2388                           
  2389                           ; 2 bytes @ 0x2
  2390  000003                     	ds	1
  2391  000004                     i2getRTC@i:
  2392                           	opt stack 0
  2393                           
  2394                           ; 2 bytes @ 0x3
  2395  000004                     	ds	1
  2396  000005                     i2___lwmod@counter:
  2397                           	opt stack 0
  2398  000005                     i2___wmul@product:
  2399                           	opt stack 0
  2400  000005                     i2strcpy@cp:
  2401                           	opt stack 0
  2402                           
  2403                           ; 2 bytes @ 0x4
  2404  000005                     	ds	1
  2405  000006                     ?i2___lwdiv:
  2406                           	opt stack 0
  2407  000006                     i2___lwdiv@dividend:
  2408                           	opt stack 0
  2409                           
  2410                           ; 2 bytes @ 0x5
  2411  000006                     	ds	1
  2412  000007                     retrieveLog@logNum:
  2413                           	opt stack 0
  2414                           
  2415                           ; 2 bytes @ 0x6
  2416  000007                     	ds	1
  2417  000008                     i2___lwdiv@divisor:
  2418                           	opt stack 0
  2419                           
  2420                           ; 2 bytes @ 0x7
  2421  000008                     	ds	1
  2422  000009                     ??_retrieveLog:
  2423                           
  2424                           ; 1 bytes @ 0x8
  2425  000009                     	ds	1
  2426  00000A                     i2___lwdiv@quotient:
  2427                           	opt stack 0
  2428                           
  2429                           ; 2 bytes @ 0x9
  2430  00000A                     	ds	1
  2431  00000B                     retrieveLog@byte1:
  2432                           	opt stack 0
  2433                           
  2434                           ; 1 bytes @ 0xA
  2435  00000B                     	ds	1
  2436  00000C                     retrieveLog@byte2:
  2437                           	opt stack 0
  2438  00000C                     i2___lwdiv@counter:
  2439                           	opt stack 0
  2440                           
  2441                           ; 1 bytes @ 0xB
  2442  00000C                     	ds	1
  2443  00000D                     ?i2_printf:
  2444                           	opt stack 0
  2445  00000D                     retrieveLog@byte3:
  2446                           	opt stack 0
  2447  00000D                     i2printf@f:
  2448                           	opt stack 0
  2449                           
  2450                           ; 2 bytes @ 0xC
  2451  00000D                     	ds	1
  2452  00000E                     retrieveLog@i:
  2453                           	opt stack 0
  2454                           
  2455                           ; 2 bytes @ 0xD
  2456  00000E                     	ds	2
  2457  000010                     retrieveLog@addr:
  2458                           	opt stack 0
  2459                           
  2460                           ; 2 bytes @ 0xF
  2461  000010                     	ds	2
  2462  000012                     dispLogs@myLog:
  2463                           	opt stack 0
  2464                           
  2465                           ; 2 bytes @ 0x11
  2466  000012                     	ds	2
  2467  000014                     
  2468                           ; 1 bytes @ 0x13
  2469  000014                     	ds	5
  2470  000019                     ??i2_printf:
  2471                           
  2472                           ; 1 bytes @ 0x18
  2473  000019                     	ds	4
  2474  00001D                     i2printf@prec:
  2475                           	opt stack 0
  2476                           
  2477                           ; 1 bytes @ 0x1C
  2478  00001D                     	ds	1
  2479  00001E                     i2printf@cp:
  2480                           	opt stack 0
  2481                           
  2482                           ; 2 bytes @ 0x1D
  2483  00001E                     	ds	2
  2484  000020                     i2printf@ap:
  2485                           	opt stack 0
  2486                           
  2487                           ; 2 bytes @ 0x1F
  2488  000020                     	ds	2
  2489  000022                     i2printf@len:
  2490                           	opt stack 0
  2491                           
  2492                           ; 2 bytes @ 0x21
  2493  000022                     	ds	2
  2494  000024                     i2printf@val:
  2495                           	opt stack 0
  2496                           
  2497                           ; 2 bytes @ 0x23
  2498  000024                     	ds	2
  2499  000026                     i2printf@flag:
  2500                           	opt stack 0
  2501                           
  2502                           ; 1 bytes @ 0x25
  2503  000026                     	ds	1
  2504  000027                     i2printf@c:
  2505                           	opt stack 0
  2506                           
  2507                           ; 1 bytes @ 0x26
  2508  000027                     	ds	1
  2509  000028                     i2printf@width:
  2510                           	opt stack 0
  2511                           
  2512                           ; 2 bytes @ 0x27
  2513  000028                     	ds	2
  2514  00002A                     ??_printSortTimer:
  2515  00002A                     ??i2_printRTC:
  2516  00002A                     ?_inputHandler:
  2517                           	opt stack 0
  2518                           
  2519                           ; 2 bytes @ 0x29
  2520  00002A                     	ds	2
  2521  00002C                     ??_inputHandler:
  2522                           
  2523                           ; 1 bytes @ 0x2B
  2524  00002C                     	ds	1
  2525  00002D                     printSortTimer@hour:
  2526                           	opt stack 0
  2527  00002D                     i2printRTC@INT_time:
  2528                           	opt stack 0
  2529                           
  2530                           ; 14 bytes @ 0x2C
  2531  00002D                     	ds	2
  2532  00002F                     printSortTimer@curTime:
  2533                           	opt stack 0
  2534                           
  2535                           ; 14 bytes @ 0x2E
  2536  00002F                     	ds	12
  2537  00003B                     i2printRTC@RTC_month:
  2538                           	opt stack 0
  2539                           
  2540                           ; 2 bytes @ 0x3A
  2541  00003B                     	ds	2
  2542  00003D                     printSortTimer@start_sec:
  2543                           	opt stack 0
  2544  00003D                     i2printRTC@month:
  2545                           	opt stack 0
  2546                           
  2547                           ; 4 bytes @ 0x3C
  2548  00003D                     	ds	2
  2549  00003F                     printSortTimer@cur_sec:
  2550                           	opt stack 0
  2551                           
  2552                           ; 2 bytes @ 0x3E
  2553  00003F                     	ds	2
  2554  000041                     printSortTimer@min:
  2555                           	opt stack 0
  2556  000041                     i2printRTC@i:
  2557                           	opt stack 0
  2558                           
  2559                           ; 2 bytes @ 0x40
  2560  000041                     	ds	2
  2561  000043                     ??_updateMenu:
  2562  000043                     printSortTimer@sec:
  2563                           	opt stack 0
  2564                           
  2565                           ; 2 bytes @ 0x42
  2566  000043                     	ds	2
  2567  000045                     _printSortTimer$2366:
  2568                           	opt stack 0
  2569                           
  2570                           ; 2 bytes @ 0x44
  2571  000045                     	ds	2
  2572  000047                     printSortTimer@timeDiff:
  2573                           	opt stack 0
  2574                           
  2575                           ; 2 bytes @ 0x46
  2576  000047                     	ds	2
  2577  000049                     printSortTimer@i:
  2578                           	opt stack 0
  2579                           
  2580                           ; 2 bytes @ 0x48
  2581  000049                     	ds	2
  2582  00004B                     ??_handler:
  2583                           
  2584                           ; 1 bytes @ 0x4A
  2585  00004B                     	ds	16
  2586                           tblptru	equ	0xFF8
  2587                           tblptrh	equ	0xFF7
  2588                           tblptrl	equ	0xFF6
  2589                           tablat	equ	0xFF5
  2590                           postinc0	equ	0xFEE
  2591                           wreg	equ	0xFE8
  2592                           postdec1	equ	0xFE5
  2593                           fsr1l	equ	0xFE1
  2594                           
  2595 ;;
  2596 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2597 ;;
  2598 ;; *************** function _main *****************
  2599 ;; Defined at:
  2600 ;;		line 19 in file "main.c"
  2601 ;; Parameters:    Size  Location     Type
  2602 ;;		None
  2603 ;; Auto vars:     Size  Location     Type
  2604 ;;		None
  2605 ;; Return value:  Size  Location     Type
  2606 ;;                  1    wreg      void 
  2607 ;; Registers used:
  2608 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2609 ;; Tracked objects:
  2610 ;;		On entry : 0/0
  2611 ;;		On exit  : 0/0
  2612 ;;		Unchanged: 0/0
  2613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2614 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2615 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2616 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2617 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2618 ;;Total ram usage:        0 bytes
  2619 ;; Hardware stack levels required when called:   13
  2620 ;; This function calls:
  2621 ;;		_Test
  2622 ;;		_UI
  2623 ;;		_initLCD
  2624 ;;		_initTime
  2625 ;;		_initUI
  2626 ;;		_logRun
  2627 ;;		_machineConfig
  2628 ;;		_sort
  2629 ;;		_stopSignals
  2630 ;; This function is called by:
  2631 ;;		Startup code after reset
  2632 ;; This function uses a non-reentrant model
  2633 ;;
  2634                           
  2635                           	psect	text0
  2636  0035FA                     __ptext0:
  2637                           	opt stack 0
  2638  0035FA                     _main:
  2639                           	opt stack 18
  2640                           
  2641                           ;main.c: 20: machineConfig();
  2642                           
  2643                           ;incstack = 0
  2644  0035FA  EC82  F01E         	call	_machineConfig	;wreg free
  2645                           
  2646                           ;main.c: 21: initLCD();
  2647  0035FE  ECF9  F01F         	call	_initLCD	;wreg free
  2648                           
  2649                           ;main.c: 24: RTCflag = 0;
  2650  003602  0E00               	movlw	0
  2651  003604  0100               	movlb	0	; () banked
  2652  003606  6FDF               	movwf	(_RTCflag+1)& (0+255),b
  2653  003608  0E00               	movlw	0
  2654  00360A  6FDE               	movwf	_RTCflag& (0+255),b
  2655                           
  2656                           ;main.c: 25: if(RTCflag){
  2657  00360C  0100               	movlb	0	; () banked
  2658  00360E  51DE               	movf	_RTCflag& (0+255),w,b
  2659  003610  0100               	movlb	0	; () banked
  2660  003612  11DF               	iorwf	(_RTCflag+1)& (0+255),w,b
  2661  003614  B4D8               	btfsc	status,2,c
  2662  003616  D015               	goto	l7944
  2663                           
  2664                           ; BSR set to: 0
  2665                           ;main.c: 26: initTime(0x42, 0x25, 0x13, 0x04, 0x15, 0x03, 0x17);
  2666  003618  0E25               	movlw	37
  2667  00361A  0100               	movlb	0	; () banked
  2668  00361C  6F80               	movwf	initTime@m& (0+255),b
  2669  00361E  0E13               	movlw	19
  2670  003620  0100               	movlb	0	; () banked
  2671  003622  6F81               	movwf	initTime@h& (0+255),b
  2672  003624  0E04               	movlw	4
  2673  003626  0100               	movlb	0	; () banked
  2674  003628  6F82               	movwf	initTime@w& (0+255),b
  2675  00362A  0E15               	movlw	21
  2676  00362C  0100               	movlb	0	; () banked
  2677  00362E  6F83               	movwf	initTime@DD& (0+255),b
  2678  003630  0E03               	movlw	3
  2679  003632  0100               	movlb	0	; () banked
  2680  003634  6F84               	movwf	initTime@MM& (0+255),b
  2681  003636  0E17               	movlw	23
  2682  003638  0100               	movlb	0	; () banked
  2683  00363A  6F85               	movwf	initTime@YY& (0+255),b
  2684  00363C  0E42               	movlw	66
  2685  00363E  EC93  F022         	call	_initTime
  2686  003642                     l7944:
  2687                           
  2688                           ;main.c: 27: }
  2689                           ;main.c: 29: initUI();
  2690  003642  EC9C  F021         	call	_initUI	;wreg free
  2691                           
  2692                           ;main.c: 30: first = 1;
  2693  003646  0E00               	movlw	0
  2694  003648  0100               	movlb	0	; () banked
  2695  00364A  6FE5               	movwf	(_first+1)& (0+255),b
  2696  00364C  0E01               	movlw	1
  2697  00364E  6FE4               	movwf	_first& (0+255),b
  2698                           
  2699                           ; BSR set to: 0
  2700                           ;main.c: 41: switch(machine_state){
  2701                           
  2702                           ;main.c: 40: while(1){
  2703  003650  D018               	goto	l7966
  2704  003652                     l7948:
  2705                           
  2706                           ; BSR set to: 0
  2707                           ;main.c: 43: UI();
  2708  003652  EC09  F000         	call	_UI	;wreg free
  2709                           
  2710                           ;main.c: 44: break;
  2711  003656  D015               	goto	l7966
  2712  003658                     l7950:
  2713                           
  2714                           ;main.c: 46: sort();
  2715  003658  EC82  F022         	call	_sort	;wreg free
  2716                           
  2717                           ;main.c: 47: break;
  2718  00365C  D012               	goto	l7966
  2719  00365E                     l7952:
  2720                           
  2721                           ;main.c: 49: stopSignals();
  2722  00365E  ECBF  F022         	call	_stopSignals	;wreg free
  2723                           
  2724                           ;main.c: 50: logRun();
  2725  003662  ECA4  F016         	call	_logRun	;wreg free
  2726                           
  2727                           ;main.c: 51: first = 1;
  2728  003666  0E00               	movlw	0
  2729  003668  0100               	movlb	0	; () banked
  2730  00366A  6FE5               	movwf	(_first+1)& (0+255),b
  2731  00366C  0E01               	movlw	1
  2732  00366E  6FE4               	movwf	_first& (0+255),b
  2733                           
  2734                           ; BSR set to: 0
  2735                           ;main.c: 52: UI();
  2736  003670  EC09  F000         	call	_UI	;wreg free
  2737                           
  2738                           ;main.c: 53: break;
  2739  003674  D006               	goto	l7966
  2740  003676                     l7960:
  2741                           
  2742                           ;main.c: 55: Test();
  2743  003676  EC60  F018         	call	_Test	;wreg free
  2744                           
  2745                           ;main.c: 56: break;
  2746  00367A  D003               	goto	l7966
  2747  00367C                     l7962:
  2748                           
  2749                           ;main.c: 58: stopSignals();
  2750  00367C  ECBF  F022         	call	_stopSignals	;wreg free
  2751  003680                     l484:
  2752  003680  D7FF               	goto	l484
  2753  003682                     l7966:
  2754  003682  0100               	movlb	0	; () banked
  2755  003684  51FC               	movf	_machine_state& (0+255),w,b
  2756                           
  2757                           ; Switch size 1, requested type "space"
  2758                           ; Number of cases is 5, Range of values is 0 to 4
  2759                           ; switch strategies available:
  2760                           ; Name         Instructions Cycles
  2761                           ; simple_byte           16     9 (average)
  2762                           ;	Chosen strategy is simple_byte
  2763  003686  0A00               	xorlw	0	; case 0
  2764  003688  B4D8               	btfsc	status,2,c
  2765  00368A  D7E3               	goto	l7948
  2766  00368C  0A01               	xorlw	1	; case 1
  2767  00368E  B4D8               	btfsc	status,2,c
  2768  003690  D7E3               	goto	l7950
  2769  003692  0A03               	xorlw	3	; case 2
  2770  003694  B4D8               	btfsc	status,2,c
  2771  003696  D7E3               	goto	l7952
  2772  003698  0A01               	xorlw	1	; case 3
  2773  00369A  B4D8               	btfsc	status,2,c
  2774  00369C  D7EC               	goto	l7960
  2775  00369E  0A07               	xorlw	7	; case 4
  2776  0036A0  B4D8               	btfsc	status,2,c
  2777  0036A2  D7EC               	goto	l7962
  2778                           
  2779                           ; BSR set to: 0
  2780                           
  2781                           ; BSR set to: 0
  2782  0036A4  D7EE               	goto	l7966
  2783  0036A6                     __end_of_main:
  2784                           	opt stack 0
  2785                           tblptru	equ	0xFF8
  2786                           tblptrh	equ	0xFF7
  2787                           tblptrl	equ	0xFF6
  2788                           tablat	equ	0xFF5
  2789                           postinc0	equ	0xFEE
  2790                           wreg	equ	0xFE8
  2791                           postdec1	equ	0xFE5
  2792                           fsr1l	equ	0xFE1
  2793                           status	equ	0xFD8
  2794                           
  2795 ;; *************** function _stopSignals *****************
  2796 ;; Defined at:
  2797 ;;		line 67 in file "main.c"
  2798 ;; Parameters:    Size  Location     Type
  2799 ;;		None
  2800 ;; Auto vars:     Size  Location     Type
  2801 ;;		None
  2802 ;; Return value:  Size  Location     Type
  2803 ;;                  1    wreg      void 
  2804 ;; Registers used:
  2805 ;;		wreg, status,2
  2806 ;; Tracked objects:
  2807 ;;		On entry : 0/0
  2808 ;;		On exit  : 0/0
  2809 ;;		Unchanged: 0/0
  2810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2811 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2812 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2813 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2814 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2815 ;;Total ram usage:        0 bytes
  2816 ;; Hardware stack levels used:    1
  2817 ;; Hardware stack levels required when called:    7
  2818 ;; This function calls:
  2819 ;;		Nothing
  2820 ;; This function is called by:
  2821 ;;		_main
  2822 ;; This function uses a non-reentrant model
  2823 ;;
  2824                           
  2825                           	psect	text1
  2826  00457E                     __ptext1:
  2827                           	opt stack 0
  2828  00457E                     _stopSignals:
  2829                           	opt stack 23
  2830                           
  2831                           ;main.c: 68: LATA = 0x00;
  2832                           
  2833                           ; BSR set to: 0
  2834                           ;incstack = 0
  2835  00457E  0E00               	movlw	0
  2836  004580  6E89               	movwf	3977,c	;volatile
  2837                           
  2838                           ;main.c: 69: LATB = 0x00;
  2839  004582  0E00               	movlw	0
  2840  004584  6E8A               	movwf	3978,c	;volatile
  2841                           
  2842                           ;main.c: 70: LATC = 0x00;
  2843  004586  0E00               	movlw	0
  2844  004588  6E8B               	movwf	3979,c	;volatile
  2845                           
  2846                           ;main.c: 71: LATD = 0x00;
  2847  00458A  0E00               	movlw	0
  2848  00458C  6E8C               	movwf	3980,c	;volatile
  2849                           
  2850                           ;main.c: 72: LATE = 0x00;
  2851  00458E  0E00               	movlw	0
  2852  004590  6E8D               	movwf	3981,c	;volatile
  2853  004592  0012               	return		;funcret
  2854  004594                     __end_of_stopSignals:
  2855                           	opt stack 0
  2856                           tblptru	equ	0xFF8
  2857                           tblptrh	equ	0xFF7
  2858                           tblptrl	equ	0xFF6
  2859                           tablat	equ	0xFF5
  2860                           postinc0	equ	0xFEE
  2861                           wreg	equ	0xFE8
  2862                           postdec1	equ	0xFE5
  2863                           fsr1l	equ	0xFE1
  2864                           status	equ	0xFD8
  2865                           
  2866 ;; *************** function _sort *****************
  2867 ;; Defined at:
  2868 ;;		line 55 in file "sort.c"
  2869 ;; Parameters:    Size  Location     Type
  2870 ;;		None
  2871 ;; Auto vars:     Size  Location     Type
  2872 ;;		None
  2873 ;; Return value:  Size  Location     Type
  2874 ;;                  1    wreg      void 
  2875 ;; Registers used:
  2876 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2877 ;; Tracked objects:
  2878 ;;		On entry : 0/0
  2879 ;;		On exit  : 0/0
  2880 ;;		Unchanged: 0/0
  2881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2882 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2883 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2884 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2885 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2886 ;;Total ram usage:        0 bytes
  2887 ;; Hardware stack levels used:    1
  2888 ;; Hardware stack levels required when called:   12
  2889 ;; This function calls:
  2890 ;;		_Distribution
  2891 ;;		_ID
  2892 ;;		_Loading
  2893 ;; This function is called by:
  2894 ;;		_main
  2895 ;; This function uses a non-reentrant model
  2896 ;;
  2897                           
  2898                           	psect	text2
  2899  004504                     __ptext2:
  2900                           	opt stack 0
  2901  004504                     _sort:
  2902                           	opt stack 18
  2903                           
  2904                           ;sort.c: 56: if(machine_state == Sorting_state){
  2905                           
  2906                           ;incstack = 0
  2907  004504  0100               	movlb	0	; () banked
  2908  004506  05FC               	decf	_machine_state& (0+255),w,b
  2909  004508  B4D8               	btfsc	status,2,c
  2910                           
  2911                           ; BSR set to: 0
  2912                           ;sort.c: 57: Loading();
  2913  00450A  EC5C  F015         	call	_Loading	;wreg free
  2914                           
  2915                           ;sort.c: 58: }
  2916                           ;sort.c: 59: if(machine_state == Sorting_state){
  2917  00450E  0100               	movlb	0	; () banked
  2918  004510  05FC               	decf	_machine_state& (0+255),w,b
  2919  004512  B4D8               	btfsc	status,2,c
  2920                           
  2921                           ; BSR set to: 0
  2922                           ;sort.c: 60: ID();
  2923  004514  EC42  F017         	call	_ID	;wreg free
  2924                           
  2925                           ;sort.c: 61: }
  2926                           ;sort.c: 62: if(machine_state == Sorting_state){
  2927  004518  0100               	movlb	0	; () banked
  2928  00451A  05FC               	decf	_machine_state& (0+255),w,b
  2929  00451C  A4D8               	btfss	status,2,c
  2930  00451E  0012               	return	
  2931                           
  2932                           ; BSR set to: 0
  2933                           ;sort.c: 63: Distribution();
  2934  004520  EC03  F016         	call	_Distribution	;wreg free
  2935  004524  0012               	return	
  2936  004526                     __end_of_sort:
  2937                           	opt stack 0
  2938                           tblptru	equ	0xFF8
  2939                           tblptrh	equ	0xFF7
  2940                           tblptrl	equ	0xFF6
  2941                           tablat	equ	0xFF5
  2942                           postinc0	equ	0xFEE
  2943                           wreg	equ	0xFE8
  2944                           postdec1	equ	0xFE5
  2945                           fsr1l	equ	0xFE1
  2946                           status	equ	0xFD8
  2947                           
  2948 ;; *************** function _Loading *****************
  2949 ;; Defined at:
  2950 ;;		line 67 in file "sort.c"
  2951 ;; Parameters:    Size  Location     Type
  2952 ;;		None
  2953 ;; Auto vars:     Size  Location     Type
  2954 ;;  i               2   54[BANK0 ] int 
  2955 ;;  addr            2   51[BANK0 ] unsigned short 
  2956 ;;  byte1           1   53[BANK0 ] unsigned char 
  2957 ;; Return value:  Size  Location     Type
  2958 ;;                  1    wreg      void 
  2959 ;; Registers used:
  2960 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2961 ;; Tracked objects:
  2962 ;;		On entry : 0/0
  2963 ;;		On exit  : 0/0
  2964 ;;		Unchanged: 0/0
  2965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2966 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2967 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2968 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2969 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2970 ;;Total ram usage:        7 bytes
  2971 ;; Hardware stack levels used:    1
  2972 ;; Hardware stack levels required when called:   11
  2973 ;; This function calls:
  2974 ;;		_EEPROM_read
  2975 ;;		_EEPROM_write
  2976 ;;		_delay_ms
  2977 ;;		_getIR
  2978 ;;		_initGlobalVars
  2979 ;;		_initServos
  2980 ;;		_initSortTimer
  2981 ;;		_lcdInst
  2982 ;; This function is called by:
  2983 ;;		_sort
  2984 ;; This function uses a non-reentrant model
  2985 ;;
  2986                           
  2987                           	psect	text3
  2988  002AB8                     __ptext3:
  2989                           	opt stack 0
  2990  002AB8                     _Loading:
  2991                           	opt stack 18
  2992                           
  2993                           ;sort.c: 68: if(first){
  2994                           
  2995                           ;incstack = 0
  2996  002AB8  0100               	movlb	0	; () banked
  2997  002ABA  51E4               	movf	_first& (0+255),w,b
  2998  002ABC  0100               	movlb	0	; () banked
  2999  002ABE  11E5               	iorwf	(_first+1)& (0+255),w,b
  3000  002AC0  B4D8               	btfsc	status,2,c
  3001  002AC2  D066               	goto	l6306
  3002                           
  3003                           ; BSR set to: 0
  3004                           ;sort.c: 69: initGlobalVars();
  3005  002AC4  ECB8  F01D         	call	_initGlobalVars	;wreg free
  3006                           
  3007                           ;sort.c: 70: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  3008  002AC8  0E01               	movlw	1
  3009  002ACA  ECF0  F022         	call	_lcdInst
  3010  002ACE  0E68               	movlw	104
  3011  002AD0  0100               	movlb	0	; () banked
  3012  002AD2  6FB1               	movwf	??_Loading& (0+255),b
  3013  002AD4  0EE4               	movlw	228
  3014  002AD6                     u6897:
  3015  002AD6  2EE8               	decfsz	wreg,f,c
  3016  002AD8  D7FE               	bra	u6897
  3017  002ADA  2FB1               	decfsz	??_Loading& (0+255),f,b
  3018  002ADC  D7FC               	bra	u6897
  3019  002ADE  F000               	nop	
  3020                           
  3021                           ;sort.c: 71: initSortTimer();
  3022  002AE0  EC53  F01B         	call	_initSortTimer	;wreg free
  3023                           
  3024                           ;sort.c: 72: LATCbits.LATC5 = 1;
  3025  002AE4  8A8B               	bsf	3979,5,c	;volatile
  3026                           
  3027                           ;sort.c: 77: sel = EEPROM_read(0);
  3028  002AE6  0E00               	movlw	0
  3029  002AE8  0100               	movlb	0	; () banked
  3030  002AEA  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  3031  002AEC  0E00               	movlw	0
  3032  002AEE  6F80               	movwf	EEPROM_read@address& (0+255),b
  3033  002AF0  ECB3  F022         	call	_EEPROM_read	;wreg free
  3034  002AF4  0100               	movlb	0	; () banked
  3035  002AF6  6FFD               	movwf	_sel& (0+255),b
  3036                           
  3037                           ; BSR set to: 0
  3038                           ;sort.c: 78: unsigned short addr = 1 + 11 * sel;
  3039  002AF8  0100               	movlb	0	; () banked
  3040  002AFA  51FD               	movf	_sel& (0+255),w,b
  3041  002AFC  0D0B               	mullw	11
  3042  002AFE  0E01               	movlw	1
  3043  002B00  24F3               	addwf	prodl,w,c
  3044  002B02  0100               	movlb	0	; () banked
  3045  002B04  6FB3               	movwf	Loading@addr& (0+255),b
  3046  002B06  0E00               	movlw	0
  3047  002B08  20F4               	addwfc	prodh,w,c
  3048  002B0A  0100               	movlb	0	; () banked
  3049  002B0C  6FB4               	movwf	(Loading@addr+1)& (0+255),b
  3050                           
  3051                           ; BSR set to: 0
  3052                           ;sort.c: 79: unsigned char byte1 = 0b01111111;
  3053  002B0E  0E7F               	movlw	127
  3054  002B10  0100               	movlb	0	; () banked
  3055  002B12  6FB5               	movwf	Loading@byte1& (0+255),b
  3056                           
  3057                           ; BSR set to: 0
  3058                           ;sort.c: 80: EEPROM_write(addr, byte1);
  3059  002B14  C0B3  F0AB         	movff	Loading@addr,EEPROM_write@address
  3060  002B18  C0B4  F0AC         	movff	Loading@addr+1,EEPROM_write@address+1
  3061  002B1C  C0B5  F0AD         	movff	Loading@byte1,EEPROM_write@data
  3062  002B20  EC63  F019         	call	_EEPROM_write	;wreg free
  3063                           
  3064                           ;sort.c: 83: LATAbits.LATA5 = 0;
  3065  002B24  9A89               	bcf	3977,5,c	;volatile
  3066                           
  3067                           ;sort.c: 84: for(int i=0; i<46; i++){
  3068  002B26  0E00               	movlw	0
  3069  002B28  0100               	movlb	0	; () banked
  3070  002B2A  6FB7               	movwf	(Loading@i+1)& (0+255),b
  3071  002B2C  0E00               	movlw	0
  3072  002B2E  6FB6               	movwf	Loading@i& (0+255),b
  3073                           
  3074                           ; BSR set to: 0
  3075  002B30  0100               	movlb	0	; () banked
  3076  002B32  BFB7               	btfsc	(Loading@i+1)& (0+255),7,b
  3077  002B34  D008               	goto	l6296
  3078  002B36  0100               	movlb	0	; () banked
  3079  002B38  51B7               	movf	(Loading@i+1)& (0+255),w,b
  3080  002B3A  E126               	bnz	l725
  3081  002B3C  0E2E               	movlw	46
  3082  002B3E  0100               	movlb	0	; () banked
  3083  002B40  5DB6               	subwf	Loading@i& (0+255),w,b
  3084  002B42  B0D8               	btfsc	status,0,c
  3085  002B44  D021               	goto	l725
  3086  002B46                     l6296:
  3087                           
  3088                           ; BSR set to: 0
  3089                           ;sort.c: 85: LATAbits.LATA5 = !LATAbits.LATA5;
  3090  002B46  BA89               	btfsc	3977,5,c	;volatile
  3091  002B48  D004               	goto	u4730
  3092  002B4A  0100               	movlb	0	; () banked
  3093  002B4C  6BB1               	clrf	??_Loading& (0+255),b
  3094  002B4E  2BB1               	incf	??_Loading& (0+255),f,b
  3095  002B50  D002               	goto	u4748
  3096  002B52                     u4730:
  3097  002B52  0100               	movlb	0	; () banked
  3098  002B54  6BB1               	clrf	??_Loading& (0+255),b
  3099  002B56                     u4748:
  3100  002B56  0100               	movlb	0	; () banked
  3101  002B58  3BB1               	swapf	??_Loading& (0+255),f,b
  3102  002B5A  47B1               	rlncf	??_Loading& (0+255),f,b
  3103  002B5C  5089               	movf	3977,w,c	;volatile
  3104  002B5E  0100               	movlb	0	; () banked
  3105  002B60  19B1               	xorwf	??_Loading& (0+255),w,b
  3106  002B62  0BDF               	andlw	-33
  3107  002B64  19B1               	xorwf	??_Loading& (0+255),w,b
  3108  002B66  6E89               	movwf	3977,c	;volatile
  3109                           
  3110                           ; BSR set to: 0
  3111                           ;sort.c: 86: delay_ms(45-i);
  3112  002B68  0100               	movlb	0	; () banked
  3113  002B6A  51B6               	movf	Loading@i& (0+255),w,b
  3114  002B6C  0800               	sublw	0
  3115  002B6E  0F2D               	addlw	45
  3116  002B70  EC22  F022         	call	_delay_ms
  3117  002B74  0100               	movlb	0	; () banked
  3118  002B76  4BB6               	infsnz	Loading@i& (0+255),f,b
  3119  002B78  2BB7               	incf	(Loading@i+1)& (0+255),f,b
  3120                           
  3121                           ; BSR set to: 0
  3122  002B7A  0100               	movlb	0	; () banked
  3123  002B7C  BFB7               	btfsc	(Loading@i+1)& (0+255),7,b
  3124  002B7E  D7E3               	goto	l6296
  3125  002B80  0100               	movlb	0	; () banked
  3126  002B82  51B7               	movf	(Loading@i+1)& (0+255),w,b
  3127  002B84  E101               	bnz	u4750
  3128  002B86  D7DA               	goto	L1
  3129  002B88                     u4750:
  3130  002B88                     l725:
  3131                           
  3132                           ; BSR set to: 0
  3133                           ;sort.c: 87: }
  3134                           ;sort.c: 88: LATAbits.LATA5 = 1;
  3135  002B88  8A89               	bsf	3977,5,c	;volatile
  3136                           
  3137                           ; BSR set to: 0
  3138                           ;sort.c: 91: initServos();
  3139  002B8A  ECDE  F01E         	call	_initServos	;wreg free
  3140                           
  3141                           ;sort.c: 92: }
  3142  002B8E  0012               	return	
  3143  002B90                     l6306:
  3144                           
  3145                           ;sort.c: 93: else{
  3146                           ;sort.c: 96: if(!f_loadingNewCan){
  3147  002B90  0100               	movlb	0	; () banked
  3148  002B92  51E2               	movf	_f_loadingNewCan& (0+255),w,b
  3149  002B94  0100               	movlb	0	; () banked
  3150  002B96  11E3               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3151  002B98  A4D8               	btfss	status,2,c
  3152  002B9A  D017               	goto	l6322
  3153                           
  3154                           ; BSR set to: 0
  3155                           ;sort.c: 98: getIR();
  3156  002B9C  EC86  F01F         	call	_getIR	;wreg free
  3157                           
  3158                           ;sort.c: 100: if(!f_loadingNewCan){
  3159  002BA0  0100               	movlb	0	; () banked
  3160  002BA2  51E2               	movf	_f_loadingNewCan& (0+255),w,b
  3161  002BA4  0100               	movlb	0	; () banked
  3162  002BA6  11E3               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3163  002BA8  B4D8               	btfsc	status,2,c
  3164  002BAA  0012               	return	
  3165                           
  3166                           ; BSR set to: 0
  3167                           ;sort.c: 104: else{
  3168                           ;sort.c: 105: count_total++;
  3169                           
  3170                           ; BSR set to: 0
  3171                           
  3172                           ; BSR set to: 0
  3173                           ;sort.c: 102: }
  3174                           
  3175                           ; BSR set to: 0
  3176                           ;sort.c: 101: return;
  3177  002BAC  0100               	movlb	0	; () banked
  3178  002BAE  4BFE               	infsnz	_count_total& (0+255),f,b
  3179  002BB0  2BFF               	incf	(_count_total+1)& (0+255),f,b
  3180                           
  3181                           ; BSR set to: 0
  3182                           ;sort.c: 106: if(count_total == 12){
  3183  002BB2  0E0C               	movlw	12
  3184  002BB4  0100               	movlb	0	; () banked
  3185  002BB6  19FE               	xorwf	_count_total& (0+255),w,b
  3186  002BB8  0100               	movlb	0	; () banked
  3187  002BBA  11FF               	iorwf	(_count_total+1)& (0+255),w,b
  3188  002BBC  A4D8               	btfss	status,2,c
  3189  002BBE  0012               	return	
  3190                           
  3191                           ; BSR set to: 0
  3192                           ;sort.c: 107: f_lastCan = 1;
  3193  002BC0  0E00               	movlw	0
  3194  002BC2  6E74               	movwf	_f_lastCan+1,c
  3195  002BC4  0E01               	movlw	1
  3196  002BC6  6E73               	movwf	_f_lastCan,c
  3197                           
  3198                           ; BSR set to: 0
  3199                           ;sort.c: 108: }
  3200                           ;sort.c: 109: }
  3201                           ;sort.c: 110: }
  3202                           
  3203                           ; BSR set to: 0
  3204  002BC8  0012               	return	
  3205  002BCA                     l6322:
  3206                           
  3207                           ; BSR set to: 0
  3208                           ;sort.c: 113: else if(f_ID_receive){
  3209  002BCA  506D               	movf	_f_ID_receive,w,c
  3210  002BCC  106E               	iorwf	_f_ID_receive+1,w,c
  3211  002BCE  B4D8               	btfsc	status,2,c
  3212  002BD0  0012               	return	
  3213                           
  3214                           ; BSR set to: 0
  3215                           ;sort.c: 114: f_loadingNewCan = 0;
  3216  002BD2  0E00               	movlw	0
  3217  002BD4  0100               	movlb	0	; () banked
  3218  002BD6  6FE3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3219  002BD8  0E00               	movlw	0
  3220  002BDA  6FE2               	movwf	_f_loadingNewCan& (0+255),b
  3221                           
  3222                           ; BSR set to: 0
  3223                           ;sort.c: 115: LATAbits.LATA4 = 1;
  3224  002BDC  8889               	bsf	3977,4,c	;volatile
  3225                           
  3226                           ;sort.c: 116: f_can_coming_to_ID = 1;
  3227  002BDE  0E00               	movlw	0
  3228  002BE0  6E70               	movwf	_f_can_coming_to_ID+1,c
  3229  002BE2  0E01               	movlw	1
  3230  002BE4  6E6F               	movwf	_f_can_coming_to_ID,c
  3231                           
  3232                           ; BSR set to: 0
  3233                           ;sort.c: 117: _delay((unsigned long)((300)*(32000000/4000.0)));
  3234  002BE6  0E0D               	movlw	13
  3235  002BE8  0100               	movlb	0	; () banked
  3236  002BEA  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3237  002BEC  0E2D               	movlw	45
  3238  002BEE  0100               	movlb	0	; () banked
  3239  002BF0  6FB1               	movwf	??_Loading& (0+255),b
  3240  002BF2  0ED7               	movlw	215
  3241  002BF4                     u6907:
  3242  002BF4  2EE8               	decfsz	wreg,f,c
  3243  002BF6  D7FE               	bra	u6907
  3244  002BF8  2FB1               	decfsz	??_Loading& (0+255),f,b
  3245  002BFA  D7FC               	bra	u6907
  3246  002BFC  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3247  002BFE  D7FA               	bra	u6907
  3248  002C00  D000               	nop2	
  3249                           
  3250                           ;sort.c: 118: LATAbits.LATA4 = 0;
  3251  002C02  9889               	bcf	3977,4,c	;volatile
  3252  002C04  0012               	return	
  3253  002C06                     __end_of_Loading:
  3254                           	opt stack 0
  3255                           tblptru	equ	0xFF8
  3256                           tblptrh	equ	0xFF7
  3257                           tblptrl	equ	0xFF6
  3258                           tablat	equ	0xFF5
  3259                           prodh	equ	0xFF4
  3260                           prodl	equ	0xFF3
  3261                           postinc0	equ	0xFEE
  3262                           wreg	equ	0xFE8
  3263                           postdec1	equ	0xFE5
  3264                           fsr1l	equ	0xFE1
  3265                           status	equ	0xFD8
  3266                           
  3267 ;; *************** function _initSortTimer *****************
  3268 ;; Defined at:
  3269 ;;		line 234 in file "sort.c"
  3270 ;; Parameters:    Size  Location     Type
  3271 ;;		None
  3272 ;; Auto vars:     Size  Location     Type
  3273 ;;  i               2    8[BANK0 ] int 
  3274 ;; Return value:  Size  Location     Type
  3275 ;;                  1    wreg      void 
  3276 ;; Registers used:
  3277 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3278 ;; Tracked objects:
  3279 ;;		On entry : 0/0
  3280 ;;		On exit  : 0/0
  3281 ;;		Unchanged: 0/0
  3282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3283 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3284 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3285 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3286 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3287 ;;Total ram usage:        5 bytes
  3288 ;; Hardware stack levels used:    1
  3289 ;; Hardware stack levels required when called:   10
  3290 ;; This function calls:
  3291 ;;		_getRTC
  3292 ;; This function is called by:
  3293 ;;		_Loading
  3294 ;; This function uses a non-reentrant model
  3295 ;;
  3296                           
  3297                           	psect	text4
  3298  0036A6                     __ptext4:
  3299                           	opt stack 0
  3300  0036A6                     _initSortTimer:
  3301                           	opt stack 18
  3302                           
  3303                           ;sort.c: 236: getRTC();
  3304                           
  3305                           ;incstack = 0
  3306  0036A6  EC83  F01C         	call	_getRTC	;wreg free
  3307                           
  3308                           ;sort.c: 237: for(int i = 0; i < 7; i++){
  3309  0036AA  0E00               	movlw	0
  3310  0036AC  0100               	movlb	0	; () banked
  3311  0036AE  6F89               	movwf	(initSortTimer@i+1)& (0+255),b
  3312  0036B0  0E00               	movlw	0
  3313  0036B2  6F88               	movwf	initSortTimer@i& (0+255),b
  3314  0036B4                     l5902:
  3315                           
  3316                           ; BSR set to: 0
  3317  0036B4  0100               	movlb	0	; () banked
  3318  0036B6  BF89               	btfsc	(initSortTimer@i+1)& (0+255),7,b
  3319  0036B8  D008               	goto	l5906
  3320  0036BA  0100               	movlb	0	; () banked
  3321  0036BC  5189               	movf	(initSortTimer@i+1)& (0+255),w,b
  3322  0036BE  E140               	bnz	l5912
  3323  0036C0  0E07               	movlw	7
  3324  0036C2  0100               	movlb	0	; () banked
  3325  0036C4  5D88               	subwf	initSortTimer@i& (0+255),w,b
  3326  0036C6  B0D8               	btfsc	status,0,c
  3327  0036C8  D03B               	goto	l5912
  3328  0036CA                     l5906:
  3329                           
  3330                           ; BSR set to: 0
  3331                           ;sort.c: 238: startTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  3332  0036CA  0E24               	movlw	low _time
  3333  0036CC  0100               	movlb	0	; () banked
  3334  0036CE  2588               	addwf	initSortTimer@i& (0+255),w,b
  3335  0036D0  6ED9               	movwf	fsr2l,c
  3336  0036D2  0E01               	movlw	high _time
  3337  0036D4  0100               	movlb	0	; () banked
  3338  0036D6  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  3339  0036D8  6EDA               	movwf	fsr2h,c
  3340  0036DA  50DF               	movf	indf2,w,c
  3341  0036DC  0100               	movlb	0	; () banked
  3342  0036DE  6F85               	movwf	??_initSortTimer& (0+255),b
  3343  0036E0  0100               	movlb	0	; () banked
  3344  0036E2  3B85               	swapf	??_initSortTimer& (0+255),f,b
  3345  0036E4  0E0F               	movlw	15
  3346  0036E6  1785               	andwf	??_initSortTimer& (0+255),f,b
  3347  0036E8  0E0F               	movlw	15
  3348  0036EA  0100               	movlb	0	; () banked
  3349  0036EC  1785               	andwf	??_initSortTimer& (0+255),f,b
  3350  0036EE  0100               	movlb	0	; () banked
  3351  0036F0  5185               	movf	??_initSortTimer& (0+255),w,b
  3352  0036F2  0D0A               	mullw	10
  3353  0036F4  0E24               	movlw	low _time
  3354  0036F6  0100               	movlb	0	; () banked
  3355  0036F8  2588               	addwf	initSortTimer@i& (0+255),w,b
  3356  0036FA  6ED9               	movwf	fsr2l,c
  3357  0036FC  0E01               	movlw	high _time
  3358  0036FE  0100               	movlb	0	; () banked
  3359  003700  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  3360  003702  6EDA               	movwf	fsr2h,c
  3361  003704  50DF               	movf	indf2,w,c
  3362  003706  0B0F               	andlw	15
  3363  003708  0100               	movlb	0	; () banked
  3364  00370A  6F86               	movwf	(??_initSortTimer+1)& (0+255),b
  3365  00370C  6B87               	clrf	(??_initSortTimer+2)& (0+255),b
  3366  00370E  50F3               	movf	prodl,w,c
  3367  003710  0100               	movlb	0	; () banked
  3368  003712  2786               	addwf	(??_initSortTimer+1)& (0+255),f,b
  3369  003714  50F4               	movf	prodh,w,c
  3370  003716  0100               	movlb	0	; () banked
  3371  003718  2387               	addwfc	(??_initSortTimer+2)& (0+255),f,b
  3372  00371A  90D8               	bcf	status,0,c
  3373  00371C  0100               	movlb	0	; () banked
  3374  00371E  3588               	rlcf	initSortTimer@i& (0+255),w,b
  3375  003720  6ED9               	movwf	fsr2l,c
  3376  003722  0100               	movlb	0	; () banked
  3377  003724  3589               	rlcf	(initSortTimer@i+1)& (0+255),w,b
  3378  003726  6EDA               	movwf	fsr2h,c
  3379  003728  0E0E               	movlw	low _startTime
  3380  00372A  26D9               	addwf	fsr2l,f,c
  3381  00372C  0E01               	movlw	high _startTime
  3382  00372E  22DA               	addwfc	fsr2h,f,c
  3383  003730  C086  FFDE         	movff	??_initSortTimer+1,postinc2
  3384  003734  C087  FFDD         	movff	??_initSortTimer+2,postdec2
  3385                           
  3386                           ; BSR set to: 0
  3387  003738  0100               	movlb	0	; () banked
  3388  00373A  4B88               	infsnz	initSortTimer@i& (0+255),f,b
  3389  00373C  2B89               	incf	(initSortTimer@i+1)& (0+255),f,b
  3390  00373E  D7BA               	goto	l5902
  3391  003740                     l5912:
  3392                           
  3393                           ; BSR set to: 0
  3394                           ;sort.c: 239: }
  3395                           ;sort.c: 241: T0CON = 0b00010111;
  3396  003740  0E17               	movlw	23
  3397  003742  6ED5               	movwf	4053,c	;volatile
  3398                           
  3399                           ;sort.c: 250: TMR0H = 0b10000101;
  3400  003744  0E85               	movlw	133
  3401  003746  6ED7               	movwf	4055,c	;volatile
  3402                           
  3403                           ;sort.c: 251: TMR0L = 0b11101110;
  3404  003748  0EEE               	movlw	238
  3405  00374A  6ED6               	movwf	4054,c	;volatile
  3406                           
  3407                           ; BSR set to: 0
  3408                           ;sort.c: 252: TMR0ON = 1;
  3409  00374C  8ED5               	bsf	4053,7,c	;volatile
  3410                           
  3411                           ; BSR set to: 0
  3412  00374E  0012               	return		;funcret
  3413  003750                     __end_of_initSortTimer:
  3414                           	opt stack 0
  3415                           tblptru	equ	0xFF8
  3416                           tblptrh	equ	0xFF7
  3417                           tblptrl	equ	0xFF6
  3418                           tablat	equ	0xFF5
  3419                           prodh	equ	0xFF4
  3420                           prodl	equ	0xFF3
  3421                           postinc0	equ	0xFEE
  3422                           wreg	equ	0xFE8
  3423                           postdec1	equ	0xFE5
  3424                           fsr1l	equ	0xFE1
  3425                           indf2	equ	0xFDF
  3426                           postinc2	equ	0xFDE
  3427                           postdec2	equ	0xFDD
  3428                           fsr2h	equ	0xFDA
  3429                           fsr2l	equ	0xFD9
  3430                           status	equ	0xFD8
  3431                           
  3432 ;; *************** function _initGlobalVars *****************
  3433 ;; Defined at:
  3434 ;;		line 215 in file "sort.c"
  3435 ;; Parameters:    Size  Location     Type
  3436 ;;		None
  3437 ;; Auto vars:     Size  Location     Type
  3438 ;;		None
  3439 ;; Return value:  Size  Location     Type
  3440 ;;                  1    wreg      void 
  3441 ;; Registers used:
  3442 ;;		wreg, status,2
  3443 ;; Tracked objects:
  3444 ;;		On entry : 0/0
  3445 ;;		On exit  : 0/0
  3446 ;;		Unchanged: 0/0
  3447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3448 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3449 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3450 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3451 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3452 ;;Total ram usage:        0 bytes
  3453 ;; Hardware stack levels used:    1
  3454 ;; Hardware stack levels required when called:    7
  3455 ;; This function calls:
  3456 ;;		Nothing
  3457 ;; This function is called by:
  3458 ;;		_Loading
  3459 ;; This function uses a non-reentrant model
  3460 ;;
  3461                           
  3462                           	psect	text5
  3463  003B70                     __ptext5:
  3464                           	opt stack 0
  3465  003B70                     _initGlobalVars:
  3466                           	opt stack 21
  3467                           
  3468                           ;sort.c: 217: first = 0;
  3469                           
  3470                           ; BSR set to: 0
  3471                           ;incstack = 0
  3472  003B70  0E00               	movlw	0
  3473  003B72  0100               	movlb	0	; () banked
  3474  003B74  6FE5               	movwf	(_first+1)& (0+255),b
  3475  003B76  0E00               	movlw	0
  3476  003B78  6FE4               	movwf	_first& (0+255),b
  3477                           
  3478                           ;sort.c: 220: f_loadingNewCan = 0;
  3479  003B7A  0E00               	movlw	0
  3480  003B7C  0100               	movlb	0	; () banked
  3481  003B7E  6FE3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3482  003B80  0E00               	movlw	0
  3483  003B82  6FE2               	movwf	_f_loadingNewCan& (0+255),b
  3484                           
  3485                           ;sort.c: 221: f_lastCan = 0;
  3486  003B84  0E00               	movlw	0
  3487  003B86  6E74               	movwf	_f_lastCan+1,c
  3488  003B88  0E00               	movlw	0
  3489  003B8A  6E73               	movwf	_f_lastCan,c
  3490                           
  3491                           ;sort.c: 222: f_ID_receive = 1;
  3492  003B8C  0E00               	movlw	0
  3493  003B8E  6E6E               	movwf	_f_ID_receive+1,c
  3494  003B90  0E01               	movlw	1
  3495  003B92  6E6D               	movwf	_f_ID_receive,c
  3496                           
  3497                           ;sort.c: 223: f_can_coming_to_ID = 0;
  3498  003B94  0E00               	movlw	0
  3499  003B96  6E70               	movwf	_f_can_coming_to_ID+1,c
  3500  003B98  0E00               	movlw	0
  3501  003B9A  6E6F               	movwf	_f_can_coming_to_ID,c
  3502                           
  3503                           ;sort.c: 224: f_can_coming_to_distribution = 0;
  3504  003B9C  0E00               	movlw	0
  3505  003B9E  6E72               	movwf	_f_can_coming_to_distribution+1,c
  3506  003BA0  0E00               	movlw	0
  3507  003BA2  6E71               	movwf	_f_can_coming_to_distribution,c
  3508                           
  3509                           ;sort.c: 225: f_can_distributed = 0;
  3510  003BA4  0E00               	movlw	0
  3511  003BA6  0101               	movlb	1	; () banked
  3512  003BA8  6F2C               	movwf	(_f_can_distributed+1)& (0+255),b
  3513  003BAA  0E00               	movlw	0
  3514  003BAC  6F2B               	movwf	_f_can_distributed& (0+255),b
  3515                           
  3516                           ;sort.c: 228: count_total = 0;
  3517  003BAE  0E00               	movlw	0
  3518  003BB0  0100               	movlb	0	; () banked
  3519  003BB2  6FFF               	movwf	(_count_total+1)& (0+255),b
  3520  003BB4  0E00               	movlw	0
  3521  003BB6  6FFE               	movwf	_count_total& (0+255),b
  3522                           
  3523                           ;sort.c: 229: count_pop_no_tab = 0;
  3524  003BB8  0E00               	movlw	0
  3525  003BBA  6E62               	movwf	_count_pop_no_tab+1,c
  3526  003BBC  0E00               	movlw	0
  3527  003BBE  6E61               	movwf	_count_pop_no_tab,c
  3528                           
  3529                           ;sort.c: 230: count_pop_w_tab = 0;
  3530  003BC0  0E00               	movlw	0
  3531  003BC2  6E64               	movwf	_count_pop_w_tab+1,c
  3532  003BC4  0E00               	movlw	0
  3533  003BC6  6E63               	movwf	_count_pop_w_tab,c
  3534                           
  3535                           ;sort.c: 231: count_can_w_lab = 0;
  3536  003BC8  0E00               	movlw	0
  3537  003BCA  6E60               	movwf	_count_can_w_lab+1,c
  3538  003BCC  0E00               	movlw	0
  3539  003BCE  6E5F               	movwf	_count_can_w_lab,c
  3540                           
  3541                           ;sort.c: 232: count_can_no_lab = 0;
  3542  003BD0  0E00               	movlw	0
  3543  003BD2  6E5E               	movwf	_count_can_no_lab+1,c
  3544  003BD4  0E00               	movlw	0
  3545  003BD6  6E5D               	movwf	_count_can_no_lab,c
  3546                           
  3547                           ; BSR set to: 0
  3548  003BD8  0012               	return		;funcret
  3549  003BDA                     __end_of_initGlobalVars:
  3550                           	opt stack 0
  3551                           tblptru	equ	0xFF8
  3552                           tblptrh	equ	0xFF7
  3553                           tblptrl	equ	0xFF6
  3554                           tablat	equ	0xFF5
  3555                           prodh	equ	0xFF4
  3556                           prodl	equ	0xFF3
  3557                           postinc0	equ	0xFEE
  3558                           wreg	equ	0xFE8
  3559                           postdec1	equ	0xFE5
  3560                           fsr1l	equ	0xFE1
  3561                           indf2	equ	0xFDF
  3562                           postinc2	equ	0xFDE
  3563                           postdec2	equ	0xFDD
  3564                           fsr2h	equ	0xFDA
  3565                           fsr2l	equ	0xFD9
  3566                           status	equ	0xFD8
  3567                           
  3568 ;; *************** function _getIR *****************
  3569 ;; Defined at:
  3570 ;;		line 291 in file "sort.c"
  3571 ;; Parameters:    Size  Location     Type
  3572 ;;		None
  3573 ;; Auto vars:     Size  Location     Type
  3574 ;;		None
  3575 ;; Return value:  Size  Location     Type
  3576 ;;                  1    wreg      void 
  3577 ;; Registers used:
  3578 ;;		wreg, status,2, status,0, cstack
  3579 ;; Tracked objects:
  3580 ;;		On entry : 0/0
  3581 ;;		On exit  : 0/0
  3582 ;;		Unchanged: 0/0
  3583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3584 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3585 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3586 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3587 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3588 ;;Total ram usage:        2 bytes
  3589 ;; Hardware stack levels used:    1
  3590 ;; Hardware stack levels required when called:    9
  3591 ;; This function calls:
  3592 ;;		_readIR
  3593 ;; This function is called by:
  3594 ;;		_Loading
  3595 ;; This function uses a non-reentrant model
  3596 ;;
  3597                           
  3598                           	psect	text6
  3599  003F0C                     __ptext6:
  3600                           	opt stack 0
  3601  003F0C                     _getIR:
  3602                           	opt stack 19
  3603                           
  3604                           ;sort.c: 292: readIR();
  3605                           
  3606                           ; BSR set to: 0
  3607                           ;incstack = 0
  3608  003F0C  ECAD  F01F         	call	_readIR	;wreg free
  3609                           
  3610                           ;sort.c: 293: if(IR_signal==1){
  3611  003F10  0100               	movlb	0	; () banked
  3612  003F12  05DA               	decf	_IR_signal& (0+255),w,b
  3613  003F14  0100               	movlb	0	; () banked
  3614  003F16  11DB               	iorwf	(_IR_signal+1)& (0+255),w,b
  3615  003F18  A4D8               	btfss	status,2,c
  3616  003F1A  0012               	return	
  3617                           
  3618                           ; BSR set to: 0
  3619                           ;sort.c: 294: _delay((unsigned long)((100)*(32000000/4000.0)));
  3620  003F1C  0E05               	movlw	5
  3621  003F1E  0100               	movlb	0	; () banked
  3622  003F20  6F87               	movwf	(??_getIR+1)& (0+255),b
  3623  003F22  0E0F               	movlw	15
  3624  003F24  0100               	movlb	0	; () banked
  3625  003F26  6F86               	movwf	??_getIR& (0+255),b
  3626  003F28  0EF1               	movlw	241
  3627  003F2A                     u6917:
  3628  003F2A  2EE8               	decfsz	wreg,f,c
  3629  003F2C  D7FE               	bra	u6917
  3630  003F2E  2F86               	decfsz	??_getIR& (0+255),f,b
  3631  003F30  D7FC               	bra	u6917
  3632  003F32  2F87               	decfsz	(??_getIR+1)& (0+255),f,b
  3633  003F34  D7FA               	bra	u6917
  3634                           
  3635                           ;sort.c: 295: if(IR_signal==1){
  3636  003F36  0100               	movlb	0	; () banked
  3637  003F38  05DA               	decf	_IR_signal& (0+255),w,b
  3638  003F3A  0100               	movlb	0	; () banked
  3639  003F3C  11DB               	iorwf	(_IR_signal+1)& (0+255),w,b
  3640  003F3E  A4D8               	btfss	status,2,c
  3641  003F40  D006               	goto	l6000
  3642                           
  3643                           ; BSR set to: 0
  3644                           ;sort.c: 296: f_loadingNewCan = 1;
  3645  003F42  0E00               	movlw	0
  3646  003F44  0100               	movlb	0	; () banked
  3647  003F46  6FE3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3648  003F48  0E01               	movlw	1
  3649  003F4A  6FE2               	movwf	_f_loadingNewCan& (0+255),b
  3650                           
  3651                           ;sort.c: 297: }
  3652  003F4C  0012               	return	
  3653  003F4E                     l6000:
  3654                           
  3655                           ; BSR set to: 0
  3656                           ;sort.c: 298: else{
  3657                           ;sort.c: 299: f_loadingNewCan = 0;
  3658  003F4E  0E00               	movlw	0
  3659  003F50  0100               	movlb	0	; () banked
  3660  003F52  6FE3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3661  003F54  0E00               	movlw	0
  3662  003F56  6FE2               	movwf	_f_loadingNewCan& (0+255),b
  3663                           
  3664                           ; BSR set to: 0
  3665  003F58  0012               	return	
  3666  003F5A                     __end_of_getIR:
  3667                           	opt stack 0
  3668                           tblptru	equ	0xFF8
  3669                           tblptrh	equ	0xFF7
  3670                           tblptrl	equ	0xFF6
  3671                           tablat	equ	0xFF5
  3672                           prodh	equ	0xFF4
  3673                           prodl	equ	0xFF3
  3674                           postinc0	equ	0xFEE
  3675                           wreg	equ	0xFE8
  3676                           postdec1	equ	0xFE5
  3677                           fsr1l	equ	0xFE1
  3678                           indf2	equ	0xFDF
  3679                           postinc2	equ	0xFDE
  3680                           postdec2	equ	0xFDD
  3681                           fsr2h	equ	0xFDA
  3682                           fsr2l	equ	0xFD9
  3683                           status	equ	0xFD8
  3684                           
  3685 ;; *************** function _readIR *****************
  3686 ;; Defined at:
  3687 ;;		line 23 in file "ADCFunctionality.c"
  3688 ;; Parameters:    Size  Location     Type
  3689 ;;		None
  3690 ;; Auto vars:     Size  Location     Type
  3691 ;;  res             2    4[BANK0 ] int 
  3692 ;; Return value:  Size  Location     Type
  3693 ;;                  1    wreg      void 
  3694 ;; Registers used:
  3695 ;;		wreg, status,2, status,0, cstack
  3696 ;; Tracked objects:
  3697 ;;		On entry : 0/0
  3698 ;;		On exit  : 0/0
  3699 ;;		Unchanged: 0/0
  3700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3701 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3702 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3703 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3704 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3705 ;;Total ram usage:        4 bytes
  3706 ;; Hardware stack levels used:    1
  3707 ;; Hardware stack levels required when called:    8
  3708 ;; This function calls:
  3709 ;;		_readADC
  3710 ;; This function is called by:
  3711 ;;		_getIR
  3712 ;; This function uses a non-reentrant model
  3713 ;;
  3714                           
  3715                           	psect	text7
  3716  003F5A                     __ptext7:
  3717                           	opt stack 0
  3718  003F5A                     _readIR:
  3719                           	opt stack 19
  3720                           
  3721                           ;ADCFunctionality.c: 24: readADC(0);
  3722                           
  3723                           ; BSR set to: 0
  3724                           ;incstack = 0
  3725  003F5A  0E00               	movlw	0
  3726  003F5C  ECF7  F021         	call	_readADC
  3727                           
  3728                           ;ADCFunctionality.c: 25: int res = ADRESH<<8 | ADRESL;
  3729  003F60  50C3               	movf	4035,w,c	;volatile
  3730  003F62  CFC4 F082          	movff	4036,??_readIR	;volatile
  3731  003F66  0100               	movlb	0	; () banked
  3732  003F68  6B83               	clrf	(??_readIR+1)& (0+255),b
  3733  003F6A  C082  F083         	movff	??_readIR,??_readIR+1
  3734  003F6E  0100               	movlb	0	; () banked
  3735  003F70  6B82               	clrf	??_readIR& (0+255),b
  3736  003F72  0100               	movlb	0	; () banked
  3737  003F74  1182               	iorwf	??_readIR& (0+255),w,b
  3738  003F76  0100               	movlb	0	; () banked
  3739  003F78  6F84               	movwf	readIR@res& (0+255),b
  3740  003F7A  0100               	movlb	0	; () banked
  3741  003F7C  5183               	movf	(??_readIR+1)& (0+255),w,b
  3742  003F7E  0100               	movlb	0	; () banked
  3743  003F80  6F85               	movwf	(readIR@res+1)& (0+255),b
  3744                           
  3745                           ; BSR set to: 0
  3746                           ;ADCFunctionality.c: 26: IR_signal = (res > 900) ? 1 : 0;
  3747  003F82  0100               	movlb	0	; () banked
  3748  003F84  BF85               	btfsc	(readIR@res+1)& (0+255),7,b
  3749  003F86  D00A               	goto	u3700
  3750  003F88  0E85               	movlw	133
  3751  003F8A  0100               	movlb	0	; () banked
  3752  003F8C  5D84               	subwf	readIR@res& (0+255),w,b
  3753  003F8E  0E03               	movlw	3
  3754  003F90  0100               	movlb	0	; () banked
  3755  003F92  5985               	subwfb	(readIR@res+1)& (0+255),w,b
  3756  003F94  A0D8               	btfss	status,0,c
  3757  003F96  D002               	goto	u3700
  3758  003F98  0E01               	movlw	1
  3759  003F9A  D001               	goto	u3710
  3760  003F9C                     u3700:
  3761  003F9C  0E00               	movlw	0
  3762  003F9E                     u3710:
  3763  003F9E  0100               	movlb	0	; () banked
  3764  003FA0  6FDA               	movwf	_IR_signal& (0+255),b
  3765  003FA2  6BDB               	clrf	(_IR_signal+1)& (0+255),b
  3766                           
  3767                           ; BSR set to: 0
  3768  003FA4  0012               	return		;funcret
  3769  003FA6                     __end_of_readIR:
  3770                           	opt stack 0
  3771                           tblptru	equ	0xFF8
  3772                           tblptrh	equ	0xFF7
  3773                           tblptrl	equ	0xFF6
  3774                           tablat	equ	0xFF5
  3775                           prodh	equ	0xFF4
  3776                           prodl	equ	0xFF3
  3777                           postinc0	equ	0xFEE
  3778                           wreg	equ	0xFE8
  3779                           postdec1	equ	0xFE5
  3780                           fsr1l	equ	0xFE1
  3781                           indf2	equ	0xFDF
  3782                           postinc2	equ	0xFDE
  3783                           postdec2	equ	0xFDD
  3784                           fsr2h	equ	0xFDA
  3785                           fsr2l	equ	0xFD9
  3786                           status	equ	0xFD8
  3787                           
  3788 ;; *************** function _delay_ms *****************
  3789 ;; Defined at:
  3790 ;;		line 316 in file "sort.c"
  3791 ;; Parameters:    Size  Location     Type
  3792 ;;  milliseconds    1    wreg     unsigned char 
  3793 ;; Auto vars:     Size  Location     Type
  3794 ;;  milliseconds    1    1[BANK0 ] unsigned char 
  3795 ;; Return value:  Size  Location     Type
  3796 ;;                  1    wreg      void 
  3797 ;; Registers used:
  3798 ;;		wreg, status,2, status,0, cstack
  3799 ;; Tracked objects:
  3800 ;;		On entry : 0/0
  3801 ;;		On exit  : 0/0
  3802 ;;		Unchanged: 0/0
  3803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3804 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3805 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3806 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3807 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3808 ;;Total ram usage:        2 bytes
  3809 ;; Hardware stack levels used:    1
  3810 ;; Hardware stack levels required when called:    7
  3811 ;; This function calls:
  3812 ;;		Nothing
  3813 ;; This function is called by:
  3814 ;;		_Loading
  3815 ;; This function uses a non-reentrant model
  3816 ;;
  3817                           
  3818                           	psect	text8
  3819  004444                     __ptext8:
  3820                           	opt stack 0
  3821  004444                     _delay_ms:
  3822                           	opt stack 21
  3823                           
  3824                           ; BSR set to: 0
  3825                           ;incstack = 0
  3826                           ;delay_ms@milliseconds stored from wreg
  3827  004444  0100               	movlb	0	; () banked
  3828  004446  6F81               	movwf	delay_ms@milliseconds& (0+255),b
  3829                           
  3830                           ;sort.c: 317: while(milliseconds > 0)
  3831  004448  D00B               	goto	l5974
  3832  00444A                     l5970:
  3833                           
  3834                           ;sort.c: 318: {
  3835                           ;sort.c: 319: milliseconds--;
  3836  00444A  0100               	movlb	0	; () banked
  3837  00444C  0781               	decf	delay_ms@milliseconds& (0+255),f,b
  3838                           
  3839                           ; BSR set to: 0
  3840                           ;sort.c: 320: _delay((unsigned long)((990)*(32000000/4000000.0)));
  3841  00444E  0E0B               	movlw	11
  3842  004450  0100               	movlb	0	; () banked
  3843  004452  6F80               	movwf	??_delay_ms& (0+255),b
  3844  004454  0E47               	movlw	71
  3845  004456                     u6927:
  3846  004456  2EE8               	decfsz	wreg,f,c
  3847  004458  D7FE               	bra	u6927
  3848  00445A  2F80               	decfsz	??_delay_ms& (0+255),f,b
  3849  00445C  D7FC               	bra	u6927
  3850  00445E  D000               	nop2	
  3851  004460                     l5974:
  3852  004460  0100               	movlb	0	; () banked
  3853  004462  5181               	movf	delay_ms@milliseconds& (0+255),w,b
  3854  004464  0100               	movlb	0	; () banked
  3855  004466  B4D8               	btfsc	status,2,c
  3856  004468  0012               	return	
  3857  00446A  D7EF               	goto	l5970
  3858  00446C                     __end_of_delay_ms:
  3859                           	opt stack 0
  3860                           tblptru	equ	0xFF8
  3861                           tblptrh	equ	0xFF7
  3862                           tblptrl	equ	0xFF6
  3863                           tablat	equ	0xFF5
  3864                           prodh	equ	0xFF4
  3865                           prodl	equ	0xFF3
  3866                           postinc0	equ	0xFEE
  3867                           wreg	equ	0xFE8
  3868                           postdec1	equ	0xFE5
  3869                           fsr1l	equ	0xFE1
  3870                           indf2	equ	0xFDF
  3871                           postinc2	equ	0xFDE
  3872                           postdec2	equ	0xFDD
  3873                           fsr2h	equ	0xFDA
  3874                           fsr2l	equ	0xFD9
  3875                           status	equ	0xFD8
  3876                           
  3877 ;; *************** function _ID *****************
  3878 ;; Defined at:
  3879 ;;		line 122 in file "sort.c"
  3880 ;; Parameters:    Size  Location     Type
  3881 ;;		None
  3882 ;; Auto vars:     Size  Location     Type
  3883 ;;  sensor_outpu    6    8[BANK0 ] int [3]
  3884 ;; Return value:  Size  Location     Type
  3885 ;;                  1    wreg      void 
  3886 ;; Registers used:
  3887 ;;		wreg, status,2, status,0, cstack
  3888 ;; Tracked objects:
  3889 ;;		On entry : 0/0
  3890 ;;		On exit  : 0/0
  3891 ;;		Unchanged: 0/0
  3892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3893 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3894 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3895 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3896 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3897 ;;Total ram usage:        8 bytes
  3898 ;; Hardware stack levels used:    1
  3899 ;; Hardware stack levels required when called:    9
  3900 ;; This function calls:
  3901 ;;		_readMAG
  3902 ;; This function is called by:
  3903 ;;		_sort
  3904 ;; This function uses a non-reentrant model
  3905 ;;
  3906                           
  3907                           	psect	text9
  3908  002E84                     __ptext9:
  3909                           	opt stack 0
  3910  002E84                     _ID:
  3911                           	opt stack 20
  3912                           
  3913                           ;sort.c: 123: if(f_can_coming_to_ID){
  3914                           
  3915                           ; BSR set to: 0
  3916                           ;incstack = 0
  3917  002E84  506F               	movf	_f_can_coming_to_ID,w,c
  3918  002E86  1070               	iorwf	_f_can_coming_to_ID+1,w,c
  3919  002E88  B4D8               	btfsc	status,2,c
  3920  002E8A  0012               	return	
  3921                           
  3922                           ;sort.c: 125: _delay((unsigned long)((500)*(32000000/4000.0)));
  3923  002E8C  0E15               	movlw	21
  3924  002E8E  0100               	movlb	0	; () banked
  3925  002E90  6F87               	movwf	(??_ID+1)& (0+255),b
  3926  002E92  0E4B               	movlw	75
  3927  002E94  0100               	movlb	0	; () banked
  3928  002E96  6F86               	movwf	??_ID& (0+255),b
  3929  002E98  0EBE               	movlw	190
  3930  002E9A                     u6937:
  3931  002E9A  2EE8               	decfsz	wreg,f,c
  3932  002E9C  D7FE               	bra	u6937
  3933  002E9E  2F86               	decfsz	??_ID& (0+255),f,b
  3934  002EA0  D7FC               	bra	u6937
  3935  002EA2  2F87               	decfsz	(??_ID+1)& (0+255),f,b
  3936  002EA4  D7FA               	bra	u6937
  3937  002EA6  F000               	nop	
  3938                           
  3939                           ;sort.c: 130: int sensor_outputs[3];
  3940                           ;sort.c: 134: sensor_outputs[0] = PORTAbits.RA2;
  3941  002EA8  A480               	btfss	3968,2,c	;volatile
  3942  002EAA  D004               	goto	u4810
  3943  002EAC  0100               	movlb	0	; () banked
  3944  002EAE  6B86               	clrf	??_ID& (0+255),b
  3945  002EB0  2B86               	incf	??_ID& (0+255),f,b
  3946  002EB2  D002               	goto	u4818
  3947  002EB4                     u4810:
  3948  002EB4  0100               	movlb	0	; () banked
  3949  002EB6  6B86               	clrf	??_ID& (0+255),b
  3950  002EB8                     u4818:
  3951  002EB8  0100               	movlb	0	; () banked
  3952  002EBA  5186               	movf	??_ID& (0+255),w,b
  3953  002EBC  0100               	movlb	0	; () banked
  3954  002EBE  6F88               	movwf	ID@sensor_outputs& (0+255),b
  3955  002EC0  6B89               	clrf	(ID@sensor_outputs+1)& (0+255),b
  3956                           
  3957                           ; BSR set to: 0
  3958                           ;sort.c: 136: if(!sensor_outputs[0]){
  3959  002EC2  0100               	movlb	0	; () banked
  3960  002EC4  5188               	movf	ID@sensor_outputs& (0+255),w,b
  3961  002EC6  0100               	movlb	0	; () banked
  3962  002EC8  1189               	iorwf	(ID@sensor_outputs+1)& (0+255),w,b
  3963  002ECA  A4D8               	btfss	status,2,c
  3964  002ECC  D029               	goto	l6354
  3965                           
  3966                           ; BSR set to: 0
  3967                           ;sort.c: 137: readMAG();
  3968  002ECE  ECD3  F01F         	call	_readMAG	;wreg free
  3969                           
  3970                           ;sort.c: 138: sensor_outputs[1] = MAG_signal;
  3971  002ED2  C0DC  F08A         	movff	_MAG_signal,ID@sensor_outputs+2
  3972  002ED6  C0DD  F08B         	movff	_MAG_signal+1,ID@sensor_outputs+3
  3973                           
  3974                           ;sort.c: 139: if(!sensor_outputs[1]){
  3975  002EDA  0100               	movlb	0	; () banked
  3976  002EDC  518A               	movf	(ID@sensor_outputs+2)& (0+255),w,b
  3977  002EDE  0100               	movlb	0	; () banked
  3978  002EE0  118B               	iorwf	(ID@sensor_outputs+3)& (0+255),w,b
  3979  002EE2  A4D8               	btfss	status,2,c
  3980  002EE4  D01D               	goto	l6354
  3981                           
  3982                           ; BSR set to: 0
  3983                           ;sort.c: 140: LATAbits.LATA3 = 1;
  3984  002EE6  8689               	bsf	3977,3,c	;volatile
  3985                           
  3986                           ; BSR set to: 0
  3987                           ;sort.c: 142: _delay((unsigned long)((300)*(32000000/4000.0)));
  3988  002EE8  0E0D               	movlw	13
  3989  002EEA  0100               	movlb	0	; () banked
  3990  002EEC  6F87               	movwf	(??_ID+1)& (0+255),b
  3991  002EEE  0E2D               	movlw	45
  3992  002EF0  0100               	movlb	0	; () banked
  3993  002EF2  6F86               	movwf	??_ID& (0+255),b
  3994  002EF4  0ED7               	movlw	215
  3995  002EF6                     u6947:
  3996  002EF6  2EE8               	decfsz	wreg,f,c
  3997  002EF8  D7FE               	bra	u6947
  3998  002EFA  2F86               	decfsz	??_ID& (0+255),f,b
  3999  002EFC  D7FC               	bra	u6947
  4000  002EFE  2F87               	decfsz	(??_ID+1)& (0+255),f,b
  4001  002F00  D7FA               	bra	u6947
  4002  002F02  D000               	nop2	
  4003                           
  4004                           ;sort.c: 143: sensor_outputs[2] = PORTAbits.RA2;
  4005  002F04  A480               	btfss	3968,2,c	;volatile
  4006  002F06  D004               	goto	u4840
  4007  002F08  0100               	movlb	0	; () banked
  4008  002F0A  6B86               	clrf	??_ID& (0+255),b
  4009  002F0C  2B86               	incf	??_ID& (0+255),f,b
  4010  002F0E  D002               	goto	u4848
  4011  002F10                     u4840:
  4012  002F10  0100               	movlb	0	; () banked
  4013  002F12  6B86               	clrf	??_ID& (0+255),b
  4014  002F14                     u4848:
  4015  002F14  0100               	movlb	0	; () banked
  4016  002F16  5186               	movf	??_ID& (0+255),w,b
  4017  002F18  0100               	movlb	0	; () banked
  4018  002F1A  6F8C               	movwf	(ID@sensor_outputs+4)& (0+255),b
  4019  002F1C  6B8D               	clrf	(ID@sensor_outputs+5)& (0+255),b
  4020                           
  4021                           ; BSR set to: 0
  4022                           ;sort.c: 144: LATAbits.LATA3 = 0;
  4023  002F1E  9689               	bcf	3977,3,c	;volatile
  4024  002F20                     l6354:
  4025                           
  4026                           ; BSR set to: 0
  4027                           ;sort.c: 145: }
  4028                           ;sort.c: 146: }
  4029                           ;sort.c: 149: if(!sensor_outputs[0]){
  4030  002F20  0100               	movlb	0	; () banked
  4031  002F22  5188               	movf	ID@sensor_outputs& (0+255),w,b
  4032  002F24  0100               	movlb	0	; () banked
  4033  002F26  1189               	iorwf	(ID@sensor_outputs+1)& (0+255),w,b
  4034  002F28  A4D8               	btfss	status,2,c
  4035  002F2A  D01E               	goto	l6372
  4036                           
  4037                           ; BSR set to: 0
  4038                           ;sort.c: 150: if(!sensor_outputs[1]){
  4039  002F2C  0100               	movlb	0	; () banked
  4040  002F2E  518A               	movf	(ID@sensor_outputs+2)& (0+255),w,b
  4041  002F30  0100               	movlb	0	; () banked
  4042  002F32  118B               	iorwf	(ID@sensor_outputs+3)& (0+255),w,b
  4043  002F34  A4D8               	btfss	status,2,c
  4044  002F36  D012               	goto	l6368
  4045                           
  4046                           ; BSR set to: 0
  4047                           ;sort.c: 151: if(!sensor_outputs[2]){
  4048  002F38  0100               	movlb	0	; () banked
  4049  002F3A  518C               	movf	(ID@sensor_outputs+4)& (0+255),w,b
  4050  002F3C  0100               	movlb	0	; () banked
  4051  002F3E  118D               	iorwf	(ID@sensor_outputs+5)& (0+255),w,b
  4052  002F40  A4D8               	btfss	status,2,c
  4053  002F42  D006               	goto	l6364
  4054                           
  4055                           ; BSR set to: 0
  4056                           ;sort.c: 152: count_pop_no_tab++;
  4057  002F44  4A61               	infsnz	_count_pop_no_tab,f,c
  4058  002F46  2A62               	incf	_count_pop_no_tab+1,f,c
  4059                           
  4060                           ; BSR set to: 0
  4061                           ;sort.c: 153: cur_can = 0;
  4062  002F48  0E00               	movlw	0
  4063  002F4A  6E66               	movwf	_cur_can+1,c
  4064  002F4C  0E00               	movlw	0
  4065  002F4E  D011               	goto	L4
  4066  002F50                     l6364:
  4067                           
  4068                           ; BSR set to: 0
  4069                           ;sort.c: 155: else{
  4070                           ;sort.c: 156: count_pop_w_tab++;
  4071  002F50  4A63               	infsnz	_count_pop_w_tab,f,c
  4072  002F52  2A64               	incf	_count_pop_w_tab+1,f,c
  4073                           
  4074                           ; BSR set to: 0
  4075                           ;sort.c: 157: cur_can = 1;
  4076  002F54  0E00               	movlw	0
  4077  002F56  6E66               	movwf	_cur_can+1,c
  4078  002F58  0E01               	movlw	1
  4079  002F5A  D00B               	goto	L4
  4080  002F5C                     l6368:
  4081                           
  4082                           ; BSR set to: 0
  4083                           ;sort.c: 160: else{
  4084                           ;sort.c: 161: count_can_w_lab++;
  4085  002F5C  4A5F               	infsnz	_count_can_w_lab,f,c
  4086  002F5E  2A60               	incf	_count_can_w_lab+1,f,c
  4087                           
  4088                           ; BSR set to: 0
  4089                           ;sort.c: 162: cur_can = 2;
  4090  002F60  0E00               	movlw	0
  4091  002F62  6E66               	movwf	_cur_can+1,c
  4092  002F64  0E02               	movlw	2
  4093  002F66  D005               	goto	L4
  4094  002F68                     l6372:
  4095                           
  4096                           ; BSR set to: 0
  4097                           ;sort.c: 165: else{
  4098                           ;sort.c: 166: count_can_no_lab++;
  4099  002F68  4A5D               	infsnz	_count_can_no_lab,f,c
  4100  002F6A  2A5E               	incf	_count_can_no_lab+1,f,c
  4101                           
  4102                           ; BSR set to: 0
  4103                           ;sort.c: 167: cur_can = 3;
  4104  002F6C  0E00               	movlw	0
  4105  002F6E  6E66               	movwf	_cur_can+1,c
  4106  002F70  0E03               	movlw	3
  4107  002F72                     L4:
  4108  002F72  6E65               	movwf	_cur_can,c
  4109                           
  4110                           ; BSR set to: 0
  4111                           ;sort.c: 168: }
  4112                           ;sort.c: 170: LATCbits.LATC0 = 1;
  4113                           
  4114                           ; BSR set to: 0
  4115  002F74  808B               	bsf	3979,0,c	;volatile
  4116                           
  4117                           ; BSR set to: 0
  4118                           ;sort.c: 171: f_can_coming_to_distribution = 1;
  4119  002F76  0E00               	movlw	0
  4120  002F78  6E72               	movwf	_f_can_coming_to_distribution+1,c
  4121  002F7A  0E01               	movlw	1
  4122  002F7C  6E71               	movwf	_f_can_coming_to_distribution,c
  4123                           
  4124                           ; BSR set to: 0
  4125                           ;sort.c: 172: _delay((unsigned long)((500)*(32000000/4000.0)));
  4126  002F7E  0E15               	movlw	21
  4127  002F80  0100               	movlb	0	; () banked
  4128  002F82  6F87               	movwf	(??_ID+1)& (0+255),b
  4129  002F84  0E4B               	movlw	75
  4130  002F86  0100               	movlb	0	; () banked
  4131  002F88  6F86               	movwf	??_ID& (0+255),b
  4132  002F8A  0EBE               	movlw	190
  4133  002F8C                     u6957:
  4134  002F8C  2EE8               	decfsz	wreg,f,c
  4135  002F8E  D7FE               	bra	u6957
  4136  002F90  2F86               	decfsz	??_ID& (0+255),f,b
  4137  002F92  D7FC               	bra	u6957
  4138  002F94  2F87               	decfsz	(??_ID+1)& (0+255),f,b
  4139  002F96  D7FA               	bra	u6957
  4140  002F98  F000               	nop	
  4141                           
  4142                           ;sort.c: 173: LATCbits.LATC0 = 0;
  4143  002F9A  908B               	bcf	3979,0,c	;volatile
  4144                           
  4145                           ;sort.c: 175: f_can_coming_to_ID = 0;
  4146  002F9C  0E00               	movlw	0
  4147  002F9E  6E70               	movwf	_f_can_coming_to_ID+1,c
  4148  002FA0  0E00               	movlw	0
  4149  002FA2  6E6F               	movwf	_f_can_coming_to_ID,c
  4150  002FA4  0012               	return	
  4151  002FA6                     __end_of_ID:
  4152                           	opt stack 0
  4153                           tblptru	equ	0xFF8
  4154                           tblptrh	equ	0xFF7
  4155                           tblptrl	equ	0xFF6
  4156                           tablat	equ	0xFF5
  4157                           prodh	equ	0xFF4
  4158                           prodl	equ	0xFF3
  4159                           postinc0	equ	0xFEE
  4160                           wreg	equ	0xFE8
  4161                           postdec1	equ	0xFE5
  4162                           fsr1l	equ	0xFE1
  4163                           indf2	equ	0xFDF
  4164                           postinc2	equ	0xFDE
  4165                           postdec2	equ	0xFDD
  4166                           fsr2h	equ	0xFDA
  4167                           fsr2l	equ	0xFD9
  4168                           status	equ	0xFD8
  4169                           
  4170 ;; *************** function _Distribution *****************
  4171 ;; Defined at:
  4172 ;;		line 178 in file "sort.c"
  4173 ;; Parameters:    Size  Location     Type
  4174 ;;		None
  4175 ;; Auto vars:     Size  Location     Type
  4176 ;;		None
  4177 ;; Return value:  Size  Location     Type
  4178 ;;                  1    wreg      void 
  4179 ;; Registers used:
  4180 ;;		wreg, status,2, status,0, cstack
  4181 ;; Tracked objects:
  4182 ;;		On entry : 0/0
  4183 ;;		On exit  : 0/0
  4184 ;;		Unchanged: 0/0
  4185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4186 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4187 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4188 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4189 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4190 ;;Total ram usage:        2 bytes
  4191 ;; Hardware stack levels used:    1
  4192 ;; Hardware stack levels required when called:    8
  4193 ;; This function calls:
  4194 ;;		_updateServoPosition
  4195 ;; This function is called by:
  4196 ;;		_sort
  4197 ;; This function uses a non-reentrant model
  4198 ;;
  4199                           
  4200                           	psect	text10
  4201  002C06                     __ptext10:
  4202                           	opt stack 0
  4203  002C06                     _Distribution:
  4204                           	opt stack 21
  4205                           
  4206                           ;sort.c: 179: if(f_can_coming_to_distribution){
  4207                           
  4208                           ;incstack = 0
  4209  002C06  5071               	movf	_f_can_coming_to_distribution,w,c
  4210  002C08  1072               	iorwf	_f_can_coming_to_distribution+1,w,c
  4211  002C0A  B4D8               	btfsc	status,2,c
  4212  002C0C  0012               	return	
  4213  002C0E  D034               	goto	l6400
  4214  002C10                     l6390:
  4215                           
  4216                           ;sort.c: 184: updateServoPosition(500, 1);
  4217  002C10  0E01               	movlw	1
  4218  002C12  0100               	movlb	0	; () banked
  4219  002C14  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4220  002C16  0EF4               	movlw	244
  4221  002C18  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4222  002C1A  0E00               	movlw	0
  4223  002C1C  0100               	movlb	0	; () banked
  4224  002C1E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4225  002C20  0E01               	movlw	1
  4226  002C22  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4227  002C24  EC44  F01D         	call	_updateServoPosition	;wreg free
  4228                           
  4229                           ;sort.c: 185: break;
  4230  002C28  D03E               	goto	l6402
  4231  002C2A                     l6392:
  4232                           
  4233                           ;sort.c: 187: updateServoPosition(750, 1);
  4234  002C2A  0E02               	movlw	2
  4235  002C2C  0100               	movlb	0	; () banked
  4236  002C2E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4237  002C30  0EEE               	movlw	238
  4238  002C32  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4239  002C34  0E00               	movlw	0
  4240  002C36  0100               	movlb	0	; () banked
  4241  002C38  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4242  002C3A  0E01               	movlw	1
  4243  002C3C  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4244  002C3E  EC44  F01D         	call	_updateServoPosition	;wreg free
  4245                           
  4246                           ;sort.c: 188: break;
  4247  002C42  D031               	goto	l6402
  4248  002C44                     l6394:
  4249                           
  4250                           ;sort.c: 190: updateServoPosition(1700, 1);
  4251  002C44  0E06               	movlw	6
  4252  002C46  0100               	movlb	0	; () banked
  4253  002C48  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4254  002C4A  0EA4               	movlw	164
  4255  002C4C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4256  002C4E  0E00               	movlw	0
  4257  002C50  0100               	movlb	0	; () banked
  4258  002C52  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4259  002C54  0E01               	movlw	1
  4260  002C56  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4261  002C58  EC44  F01D         	call	_updateServoPosition	;wreg free
  4262                           
  4263                           ;sort.c: 191: break;
  4264  002C5C  D024               	goto	l6402
  4265  002C5E                     l6396:
  4266                           
  4267                           ;sort.c: 193: updateServoPosition(2000, 1);
  4268  002C5E  0E07               	movlw	7
  4269  002C60  0100               	movlb	0	; () banked
  4270  002C62  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4271  002C64  0ED0               	movlw	208
  4272  002C66  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4273  002C68  0E00               	movlw	0
  4274  002C6A  0100               	movlb	0	; () banked
  4275  002C6C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4276  002C6E  0E01               	movlw	1
  4277  002C70  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4278  002C72  EC44  F01D         	call	_updateServoPosition	;wreg free
  4279                           
  4280                           ;sort.c: 197: }
  4281                           
  4282                           ;sort.c: 196: break;
  4283                           
  4284                           ;sort.c: 195: default:
  4285                           
  4286                           ;sort.c: 194: break;
  4287  002C76  D017               	goto	l6402
  4288  002C78                     l6400:
  4289  002C78  C065  F088         	movff	_cur_can,??_Distribution
  4290  002C7C  C066  F089         	movff	_cur_can+1,??_Distribution+1
  4291                           
  4292                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4293                           ; Switch size 1, requested type "space"
  4294                           ; Number of cases is 1, Range of values is 0 to 0
  4295                           ; switch strategies available:
  4296                           ; Name         Instructions Cycles
  4297                           ; simple_byte            4     3 (average)
  4298                           ;	Chosen strategy is simple_byte
  4299  002C80  0100               	movlb	0	; () banked
  4300  002C82  5189               	movf	(??_Distribution+1)& (0+255),w,b
  4301  002C84  0A00               	xorlw	0	; case 0
  4302  002C86  A4D8               	btfss	status,2,c
  4303  002C88  D00E               	goto	l6402
  4304                           
  4305                           ; BSR set to: 0
  4306                           ; Switch size 1, requested type "space"
  4307                           ; Number of cases is 4, Range of values is 0 to 3
  4308                           ; switch strategies available:
  4309                           ; Name         Instructions Cycles
  4310                           ; simple_byte           13     7 (average)
  4311                           ;	Chosen strategy is simple_byte
  4312  002C8A  0100               	movlb	0	; () banked
  4313  002C8C  5188               	movf	??_Distribution& (0+255),w,b
  4314  002C8E  0A00               	xorlw	0	; case 0
  4315  002C90  B4D8               	btfsc	status,2,c
  4316  002C92  D7BE               	goto	l6390
  4317  002C94  0A01               	xorlw	1	; case 1
  4318  002C96  B4D8               	btfsc	status,2,c
  4319  002C98  D7C8               	goto	l6392
  4320  002C9A  0A03               	xorlw	3	; case 2
  4321  002C9C  B4D8               	btfsc	status,2,c
  4322  002C9E  D7D2               	goto	l6394
  4323  002CA0  0A01               	xorlw	1	; case 3
  4324  002CA2  B4D8               	btfsc	status,2,c
  4325  002CA4  D7DC               	goto	l6396
  4326  002CA6                     l6402:
  4327                           
  4328                           ;sort.c: 198: _delay((unsigned long)((500)*(32000000/4000.0)));
  4329  002CA6  0E15               	movlw	21
  4330  002CA8  0100               	movlb	0	; () banked
  4331  002CAA  6F89               	movwf	(??_Distribution+1)& (0+255),b
  4332  002CAC  0E4B               	movlw	75
  4333  002CAE  0100               	movlb	0	; () banked
  4334  002CB0  6F88               	movwf	??_Distribution& (0+255),b
  4335  002CB2  0EBE               	movlw	190
  4336  002CB4                     u6967:
  4337  002CB4  2EE8               	decfsz	wreg,f,c
  4338  002CB6  D7FE               	bra	u6967
  4339  002CB8  2F88               	decfsz	??_Distribution& (0+255),f,b
  4340  002CBA  D7FC               	bra	u6967
  4341  002CBC  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  4342  002CBE  D7FA               	bra	u6967
  4343  002CC0  F000               	nop	
  4344                           
  4345                           ;sort.c: 201: updateServoPosition(1350, 3);
  4346  002CC2  0E05               	movlw	5
  4347  002CC4  0100               	movlb	0	; () banked
  4348  002CC6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4349  002CC8  0E46               	movlw	70
  4350  002CCA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4351  002CCC  0E00               	movlw	0
  4352  002CCE  0100               	movlb	0	; () banked
  4353  002CD0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4354  002CD2  0E03               	movlw	3
  4355  002CD4  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4356  002CD6  EC44  F01D         	call	_updateServoPosition	;wreg free
  4357                           
  4358                           ;sort.c: 202: _delay((unsigned long)((500)*(32000000/4000.0)));
  4359  002CDA  0E15               	movlw	21
  4360  002CDC  0100               	movlb	0	; () banked
  4361  002CDE  6F89               	movwf	(??_Distribution+1)& (0+255),b
  4362  002CE0  0E4B               	movlw	75
  4363  002CE2  0100               	movlb	0	; () banked
  4364  002CE4  6F88               	movwf	??_Distribution& (0+255),b
  4365  002CE6  0EBE               	movlw	190
  4366  002CE8                     u6977:
  4367  002CE8  2EE8               	decfsz	wreg,f,c
  4368  002CEA  D7FE               	bra	u6977
  4369  002CEC  2F88               	decfsz	??_Distribution& (0+255),f,b
  4370  002CEE  D7FC               	bra	u6977
  4371  002CF0  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  4372  002CF2  D7FA               	bra	u6977
  4373  002CF4  F000               	nop	
  4374                           
  4375                           ;sort.c: 205: updateServoPosition(1200, 1);
  4376  002CF6  0E04               	movlw	4
  4377  002CF8  0100               	movlb	0	; () banked
  4378  002CFA  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4379  002CFC  0EB0               	movlw	176
  4380  002CFE  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4381  002D00  0E00               	movlw	0
  4382  002D02  0100               	movlb	0	; () banked
  4383  002D04  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4384  002D06  0E01               	movlw	1
  4385  002D08  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4386  002D0A  EC44  F01D         	call	_updateServoPosition	;wreg free
  4387                           
  4388                           ;sort.c: 206: updateServoPosition(1190, 3);
  4389  002D0E  0E04               	movlw	4
  4390  002D10  0100               	movlb	0	; () banked
  4391  002D12  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4392  002D14  0EA6               	movlw	166
  4393  002D16  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4394  002D18  0E00               	movlw	0
  4395  002D1A  0100               	movlb	0	; () banked
  4396  002D1C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4397  002D1E  0E03               	movlw	3
  4398  002D20  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4399  002D22  EC44  F01D         	call	_updateServoPosition	;wreg free
  4400                           
  4401                           ;sort.c: 207: f_can_coming_to_distribution = 0;
  4402  002D26  0E00               	movlw	0
  4403  002D28  6E72               	movwf	_f_can_coming_to_distribution+1,c
  4404  002D2A  0E00               	movlw	0
  4405  002D2C  6E71               	movwf	_f_can_coming_to_distribution,c
  4406                           
  4407                           ;sort.c: 208: f_can_distributed = 1;
  4408  002D2E  0E00               	movlw	0
  4409  002D30  0101               	movlb	1	; () banked
  4410  002D32  6F2C               	movwf	(_f_can_distributed+1)& (0+255),b
  4411  002D34  0E01               	movlw	1
  4412  002D36  6F2B               	movwf	_f_can_distributed& (0+255),b
  4413                           
  4414                           ; BSR set to: 1
  4415                           ;sort.c: 209: if(f_lastCan == 1){
  4416  002D38  0473               	decf	_f_lastCan,w,c
  4417  002D3A  1074               	iorwf	_f_lastCan+1,w,c
  4418  002D3C  A4D8               	btfss	status,2,c
  4419  002D3E  0012               	return	
  4420                           
  4421                           ; BSR set to: 1
  4422                           ;sort.c: 210: machine_state = DoneSorting_state;
  4423  002D40  0E02               	movlw	2
  4424  002D42  0100               	movlb	0	; () banked
  4425  002D44  6FFC               	movwf	_machine_state& (0+255),b
  4426                           
  4427                           ; BSR set to: 0
  4428  002D46  0012               	return	
  4429  002D48                     __end_of_Distribution:
  4430                           	opt stack 0
  4431                           tblptru	equ	0xFF8
  4432                           tblptrh	equ	0xFF7
  4433                           tblptrl	equ	0xFF6
  4434                           tablat	equ	0xFF5
  4435                           prodh	equ	0xFF4
  4436                           prodl	equ	0xFF3
  4437                           postinc0	equ	0xFEE
  4438                           wreg	equ	0xFE8
  4439                           postdec1	equ	0xFE5
  4440                           fsr1l	equ	0xFE1
  4441                           indf2	equ	0xFDF
  4442                           postinc2	equ	0xFDE
  4443                           postdec2	equ	0xFDD
  4444                           fsr2h	equ	0xFDA
  4445                           fsr2l	equ	0xFD9
  4446                           status	equ	0xFD8
  4447                           
  4448 ;; *************** function _machineConfig *****************
  4449 ;; Defined at:
  4450 ;;		line 15 in file "MachineConfig.c"
  4451 ;; Parameters:    Size  Location     Type
  4452 ;;		None
  4453 ;; Auto vars:     Size  Location     Type
  4454 ;;		None
  4455 ;; Return value:  Size  Location     Type
  4456 ;;                  1    wreg      void 
  4457 ;; Registers used:
  4458 ;;		wreg, status,2
  4459 ;; Tracked objects:
  4460 ;;		On entry : 0/0
  4461 ;;		On exit  : 0/0
  4462 ;;		Unchanged: 0/0
  4463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4464 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4465 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4466 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4467 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4468 ;;Total ram usage:        0 bytes
  4469 ;; Hardware stack levels used:    1
  4470 ;; Hardware stack levels required when called:    7
  4471 ;; This function calls:
  4472 ;;		Nothing
  4473 ;; This function is called by:
  4474 ;;		_main
  4475 ;; This function uses a non-reentrant model
  4476 ;;
  4477                           
  4478                           	psect	text11
  4479  003D04                     __ptext11:
  4480                           	opt stack 0
  4481  003D04                     _machineConfig:
  4482                           	opt stack 23
  4483                           
  4484                           ;MachineConfig.c: 17: OSCCON = 0xF0;
  4485                           
  4486                           ;incstack = 0
  4487  003D04  0EF0               	movlw	240
  4488  003D06  6ED3               	movwf	4051,c	;volatile
  4489                           
  4490                           ;MachineConfig.c: 18: OSCTUNEbits.PLLEN = 1;
  4491  003D08  8C9B               	bsf	3995,6,c	;volatile
  4492                           
  4493                           ;MachineConfig.c: 22: TRISA = 0b00000111;
  4494  003D0A  0E07               	movlw	7
  4495  003D0C  6E92               	movwf	3986,c	;volatile
  4496                           
  4497                           ;MachineConfig.c: 24: TRISB = 0b11110010;
  4498  003D0E  0EF2               	movlw	242
  4499  003D10  6E93               	movwf	3987,c	;volatile
  4500                           
  4501                           ;MachineConfig.c: 27: TRISC = 0x00;
  4502  003D12  0E00               	movlw	0
  4503  003D14  6E94               	movwf	3988,c	;volatile
  4504                           
  4505                           ;MachineConfig.c: 31: TRISD = 0x00;
  4506  003D16  0E00               	movlw	0
  4507  003D18  6E95               	movwf	3989,c	;volatile
  4508                           
  4509                           ;MachineConfig.c: 34: TRISE = 0x00;
  4510  003D1A  0E00               	movlw	0
  4511  003D1C  6E96               	movwf	3990,c	;volatile
  4512                           
  4513                           ;MachineConfig.c: 37: LATA = 0x00;
  4514  003D1E  0E00               	movlw	0
  4515  003D20  6E89               	movwf	3977,c	;volatile
  4516                           
  4517                           ;MachineConfig.c: 38: LATB = 0x00;
  4518  003D22  0E00               	movlw	0
  4519  003D24  6E8A               	movwf	3978,c	;volatile
  4520                           
  4521                           ;MachineConfig.c: 39: LATC = 0x00;
  4522  003D26  0E00               	movlw	0
  4523  003D28  6E8B               	movwf	3979,c	;volatile
  4524                           
  4525                           ;MachineConfig.c: 40: LATD = 0x00;
  4526  003D2A  0E00               	movlw	0
  4527  003D2C  6E8C               	movwf	3980,c	;volatile
  4528                           
  4529                           ;MachineConfig.c: 41: LATE = 0x00;
  4530  003D2E  0E00               	movlw	0
  4531  003D30  6E8D               	movwf	3981,c	;volatile
  4532                           
  4533                           ;MachineConfig.c: 43: nRBPU = 0;
  4534  003D32  9EF1               	bcf	intcon2,7,c	;volatile
  4535                           
  4536                           ;MachineConfig.c: 46: ADCON0 = 0x00;
  4537  003D34  0E00               	movlw	0
  4538  003D36  6EC2               	movwf	4034,c	;volatile
  4539                           
  4540                           ;MachineConfig.c: 47: ADCON1 = 0b00001101;
  4541  003D38  0E0D               	movlw	13
  4542  003D3A  6EC1               	movwf	4033,c	;volatile
  4543                           
  4544                           ;MachineConfig.c: 50: CVRCON = 0x00;
  4545  003D3C  0E00               	movlw	0
  4546  003D3E  6EB5               	movwf	4021,c	;volatile
  4547                           
  4548                           ;MachineConfig.c: 51: CMCONbits.CIS = 0;
  4549  003D40  96B4               	bcf	4020,3,c	;volatile
  4550                           
  4551                           ;MachineConfig.c: 52: ADCON2 = 0b10110001;
  4552  003D42  0EB1               	movlw	177
  4553  003D44  6EC0               	movwf	4032,c	;volatile
  4554                           
  4555                           ;MachineConfig.c: 55: INT1IE = 1;
  4556  003D46  86F0               	bsf	intcon3,3,c	;volatile
  4557                           
  4558                           ;MachineConfig.c: 57: TMR0IE = 1;
  4559  003D48  8AF2               	bsf	intcon,5,c	;volatile
  4560                           
  4561                           ;MachineConfig.c: 58: TMR1IE = 1;
  4562  003D4A  809D               	bsf	3997,0,c	;volatile
  4563                           
  4564                           ;MachineConfig.c: 59: T1CON = 0b10110000;
  4565  003D4C  0EB0               	movlw	176
  4566  003D4E  6ECD               	movwf	4045,c	;volatile
  4567                           
  4568                           ;MachineConfig.c: 60: T3CON = 0b10110000;
  4569  003D50  0EB0               	movlw	176
  4570  003D52  6EB1               	movwf	4017,c	;volatile
  4571                           
  4572                           ;MachineConfig.c: 61: TMR2IE = 1;
  4573  003D54  829D               	bsf	3997,1,c	;volatile
  4574                           
  4575                           ;MachineConfig.c: 62: TMR3IE = 1;
  4576  003D56  82A0               	bsf	4000,1,c	;volatile
  4577                           
  4578                           ;MachineConfig.c: 63: PEIE = 1;
  4579  003D58  8CF2               	bsf	intcon,6,c	;volatile
  4580                           
  4581                           ;MachineConfig.c: 64: ADIE = 0;
  4582  003D5A  9C9D               	bcf	3997,6,c	;volatile
  4583                           
  4584                           ;MachineConfig.c: 65: (INTCONbits.GIE = 0);
  4585  003D5C  9EF2               	bcf	intcon,7,c	;volatile
  4586  003D5E  0012               	return		;funcret
  4587  003D60                     __end_of_machineConfig:
  4588                           	opt stack 0
  4589                           tblptru	equ	0xFF8
  4590                           tblptrh	equ	0xFF7
  4591                           tblptrl	equ	0xFF6
  4592                           tablat	equ	0xFF5
  4593                           prodh	equ	0xFF4
  4594                           prodl	equ	0xFF3
  4595                           intcon	equ	0xFF2
  4596                           intcon2	equ	0xFF1
  4597                           intcon3	equ	0xFF0
  4598                           postinc0	equ	0xFEE
  4599                           wreg	equ	0xFE8
  4600                           postdec1	equ	0xFE5
  4601                           fsr1l	equ	0xFE1
  4602                           indf2	equ	0xFDF
  4603                           postinc2	equ	0xFDE
  4604                           postdec2	equ	0xFDD
  4605                           fsr2h	equ	0xFDA
  4606                           fsr2l	equ	0xFD9
  4607                           status	equ	0xFD8
  4608                           
  4609 ;; *************** function _logRun *****************
  4610 ;; Defined at:
  4611 ;;		line 84 in file "EEPROM.c"
  4612 ;; Parameters:    Size  Location     Type
  4613 ;;		None
  4614 ;; Auto vars:     Size  Location     Type
  4615 ;;  byte_i          1   53[BANK0 ] unsigned char 
  4616 ;;  i               2   55[BANK0 ] int 
  4617 ;;  num             1   49[BANK0 ] unsigned char 
  4618 ;;  addr            2   57[BANK0 ] unsigned short 
  4619 ;;  byte11          1   54[BANK0 ] unsigned char 
  4620 ;;  byte3           1   52[BANK0 ] unsigned char 
  4621 ;;  byte2           1   51[BANK0 ] unsigned char 
  4622 ;;  byte1           1   50[BANK0 ] unsigned char 
  4623 ;; Return value:  Size  Location     Type
  4624 ;;                  1    wreg      void 
  4625 ;; Registers used:
  4626 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4627 ;; Tracked objects:
  4628 ;;		On entry : 0/0
  4629 ;;		On exit  : 0/0
  4630 ;;		Unchanged: 0/0
  4631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4632 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4633 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4634 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4635 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4636 ;;Total ram usage:       10 bytes
  4637 ;; Hardware stack levels used:    1
  4638 ;; Hardware stack levels required when called:   11
  4639 ;; This function calls:
  4640 ;;		_EEPROM_read
  4641 ;;		_EEPROM_write
  4642 ;; This function is called by:
  4643 ;;		_main
  4644 ;; This function uses a non-reentrant model
  4645 ;;
  4646                           
  4647                           	psect	text12
  4648  002D48                     __ptext12:
  4649                           	opt stack 0
  4650  002D48                     _logRun:
  4651                           	opt stack 19
  4652                           
  4653                           ;EEPROM.c: 97: sel = EEPROM_read(0);
  4654                           
  4655                           ;incstack = 0
  4656  002D48  0E00               	movlw	0
  4657  002D4A  0100               	movlb	0	; () banked
  4658  002D4C  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  4659  002D4E  0E00               	movlw	0
  4660  002D50  6F80               	movwf	EEPROM_read@address& (0+255),b
  4661  002D52  ECB3  F022         	call	_EEPROM_read	;wreg free
  4662  002D56  0100               	movlb	0	; () banked
  4663  002D58  6FFD               	movwf	_sel& (0+255),b
  4664                           
  4665                           ; BSR set to: 0
  4666                           ;EEPROM.c: 98: unsigned short addr = 1 + 11 * sel;
  4667  002D5A  0100               	movlb	0	; () banked
  4668  002D5C  51FD               	movf	_sel& (0+255),w,b
  4669  002D5E  0D0B               	mullw	11
  4670  002D60  0E01               	movlw	1
  4671  002D62  24F3               	addwf	prodl,w,c
  4672  002D64  0100               	movlb	0	; () banked
  4673  002D66  6FB9               	movwf	logRun@addr& (0+255),b
  4674  002D68  0E00               	movlw	0
  4675  002D6A  20F4               	addwfc	prodh,w,c
  4676  002D6C  0100               	movlb	0	; () banked
  4677  002D6E  6FBA               	movwf	(logRun@addr+1)& (0+255),b
  4678                           
  4679                           ; BSR set to: 0
  4680                           ;EEPROM.c: 101: if (sel < 3){
  4681  002D70  0E03               	movlw	3
  4682  002D72  0100               	movlb	0	; () banked
  4683  002D74  61FD               	cpfslt	_sel& (0+255),b
  4684  002D76  D00E               	goto	l7810
  4685                           
  4686                           ; BSR set to: 0
  4687                           ;EEPROM.c: 102: unsigned char num = sel+1;
  4688  002D78  0100               	movlb	0	; () banked
  4689  002D7A  29FD               	incf	_sel& (0+255),w,b
  4690  002D7C  0100               	movlb	0	; () banked
  4691  002D7E  6FB1               	movwf	logRun@num& (0+255),b
  4692                           
  4693                           ; BSR set to: 0
  4694                           ;EEPROM.c: 103: EEPROM_write(0, num);
  4695  002D80  0E00               	movlw	0
  4696  002D82  0100               	movlb	0	; () banked
  4697  002D84  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  4698  002D86  0E00               	movlw	0
  4699  002D88  6FAB               	movwf	EEPROM_write@address& (0+255),b
  4700  002D8A  C0B1  F0AD         	movff	logRun@num,EEPROM_write@data
  4701  002D8E  EC63  F019         	call	_EEPROM_write	;wreg free
  4702                           
  4703                           ;EEPROM.c: 104: }
  4704  002D92  D00A               	goto	l7812
  4705  002D94                     l7810:
  4706                           
  4707                           ;EEPROM.c: 105: else{
  4708                           ;EEPROM.c: 106: EEPROM_write(0, 0);
  4709  002D94  0E00               	movlw	0
  4710  002D96  0100               	movlb	0	; () banked
  4711  002D98  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  4712  002D9A  0E00               	movlw	0
  4713  002D9C  6FAB               	movwf	EEPROM_write@address& (0+255),b
  4714  002D9E  0E00               	movlw	0
  4715  002DA0  0100               	movlb	0	; () banked
  4716  002DA2  6FAD               	movwf	EEPROM_write@data& (0+255),b
  4717  002DA4  EC63  F019         	call	_EEPROM_write	;wreg free
  4718  002DA8                     l7812:
  4719                           
  4720                           ;EEPROM.c: 107: }
  4721                           ;EEPROM.c: 110: unsigned char byte1 = 0b10000000 | count_total;
  4722  002DA8  0100               	movlb	0	; () banked
  4723  002DAA  51FE               	movf	_count_total& (0+255),w,b
  4724  002DAC  0980               	iorlw	128
  4725  002DAE  0100               	movlb	0	; () banked
  4726  002DB0  6FB2               	movwf	logRun@byte1& (0+255),b
  4727                           
  4728                           ; BSR set to: 0
  4729                           ;EEPROM.c: 111: EEPROM_write(addr, byte1);
  4730  002DB2  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4731  002DB6  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4732  002DBA  C0B2  F0AD         	movff	logRun@byte1,EEPROM_write@data
  4733  002DBE  EC63  F019         	call	_EEPROM_write	;wreg free
  4734                           
  4735                           ;EEPROM.c: 112: addr++;
  4736  002DC2  0100               	movlb	0	; () banked
  4737  002DC4  4BB9               	infsnz	logRun@addr& (0+255),f,b
  4738  002DC6  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  4739                           
  4740                           ; BSR set to: 0
  4741                           ;EEPROM.c: 115: unsigned char byte2 = (count_pop_no_tab << 4) | count_pop_w_tab;
  4742  002DC8  3861               	swapf	_count_pop_no_tab,w,c
  4743  002DCA  0BF0               	andlw	240
  4744  002DCC  1063               	iorwf	_count_pop_w_tab,w,c
  4745  002DCE  0100               	movlb	0	; () banked
  4746  002DD0  6FB3               	movwf	logRun@byte2& (0+255),b
  4747                           
  4748                           ; BSR set to: 0
  4749                           ;EEPROM.c: 116: EEPROM_write(addr, byte2);
  4750  002DD2  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4751  002DD6  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4752  002DDA  C0B3  F0AD         	movff	logRun@byte2,EEPROM_write@data
  4753  002DDE  EC63  F019         	call	_EEPROM_write	;wreg free
  4754                           
  4755                           ;EEPROM.c: 117: addr++;
  4756  002DE2  0100               	movlb	0	; () banked
  4757  002DE4  4BB9               	infsnz	logRun@addr& (0+255),f,b
  4758  002DE6  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  4759                           
  4760                           ; BSR set to: 0
  4761                           ;EEPROM.c: 118: unsigned char byte3 = (count_can_w_lab << 4) | count_can_no_lab;
  4762  002DE8  385F               	swapf	_count_can_w_lab,w,c
  4763  002DEA  0BF0               	andlw	240
  4764  002DEC  105D               	iorwf	_count_can_no_lab,w,c
  4765  002DEE  0100               	movlb	0	; () banked
  4766  002DF0  6FB4               	movwf	logRun@byte3& (0+255),b
  4767                           
  4768                           ; BSR set to: 0
  4769                           ;EEPROM.c: 119: EEPROM_write(addr, byte3);
  4770  002DF2  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4771  002DF6  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4772  002DFA  C0B4  F0AD         	movff	logRun@byte3,EEPROM_write@data
  4773  002DFE  EC63  F019         	call	_EEPROM_write	;wreg free
  4774                           
  4775                           ;EEPROM.c: 120: addr++;
  4776  002E02  0100               	movlb	0	; () banked
  4777  002E04  4BB9               	infsnz	logRun@addr& (0+255),f,b
  4778  002E06  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  4779                           
  4780                           ; BSR set to: 0
  4781                           ;EEPROM.c: 123: for(int i = 0; i < 7; i++){
  4782  002E08  0E00               	movlw	0
  4783  002E0A  0100               	movlb	0	; () banked
  4784  002E0C  6FB8               	movwf	(logRun@i+1)& (0+255),b
  4785  002E0E  0E00               	movlw	0
  4786  002E10  6FB7               	movwf	logRun@i& (0+255),b
  4787                           
  4788                           ; BSR set to: 0
  4789  002E12  0100               	movlb	0	; () banked
  4790  002E14  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  4791  002E16  D008               	goto	l7836
  4792  002E18  0100               	movlb	0	; () banked
  4793  002E1A  51B8               	movf	(logRun@i+1)& (0+255),w,b
  4794  002E1C  E128               	bnz	l941
  4795  002E1E  0E07               	movlw	7
  4796  002E20  0100               	movlb	0	; () banked
  4797  002E22  5DB7               	subwf	logRun@i& (0+255),w,b
  4798  002E24  B0D8               	btfsc	status,0,c
  4799  002E26  D023               	goto	l941
  4800  002E28                     l7836:
  4801                           
  4802                           ; BSR set to: 0
  4803                           ;EEPROM.c: 124: unsigned char byte_i = startTime[i];
  4804  002E28  90D8               	bcf	status,0,c
  4805  002E2A  0100               	movlb	0	; () banked
  4806  002E2C  35B7               	rlcf	logRun@i& (0+255),w,b
  4807  002E2E  6ED9               	movwf	fsr2l,c
  4808  002E30  0100               	movlb	0	; () banked
  4809  002E32  35B8               	rlcf	(logRun@i+1)& (0+255),w,b
  4810  002E34  6EDA               	movwf	fsr2h,c
  4811  002E36  0E0E               	movlw	low _startTime
  4812  002E38  26D9               	addwf	fsr2l,f,c
  4813  002E3A  0E01               	movlw	high _startTime
  4814  002E3C  22DA               	addwfc	fsr2h,f,c
  4815  002E3E  50DF               	movf	indf2,w,c
  4816  002E40  0100               	movlb	0	; () banked
  4817  002E42  6FB5               	movwf	logRun@byte_i& (0+255),b
  4818                           
  4819                           ; BSR set to: 0
  4820                           ;EEPROM.c: 125: EEPROM_write(addr, byte_i);
  4821  002E44  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4822  002E48  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4823  002E4C  C0B5  F0AD         	movff	logRun@byte_i,EEPROM_write@data
  4824  002E50  EC63  F019         	call	_EEPROM_write	;wreg free
  4825                           
  4826                           ;EEPROM.c: 126: addr++;
  4827  002E54  0100               	movlb	0	; () banked
  4828  002E56  4BB9               	infsnz	logRun@addr& (0+255),f,b
  4829  002E58  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  4830                           
  4831                           ; BSR set to: 0
  4832  002E5A  0100               	movlb	0	; () banked
  4833  002E5C  4BB7               	infsnz	logRun@i& (0+255),f,b
  4834  002E5E  2BB8               	incf	(logRun@i+1)& (0+255),f,b
  4835                           
  4836                           ; BSR set to: 0
  4837  002E60  0100               	movlb	0	; () banked
  4838  002E62  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  4839  002E64  D7E1               	goto	l7836
  4840  002E66  0100               	movlb	0	; () banked
  4841  002E68  51B8               	movf	(logRun@i+1)& (0+255),w,b
  4842  002E6A  E101               	bnz	u6710
  4843  002E6C  D7D8               	goto	L5
  4844  002E6E                     u6710:
  4845  002E6E                     l941:
  4846                           
  4847                           ; BSR set to: 0
  4848                           ;EEPROM.c: 127: }
  4849                           ;EEPROM.c: 130: unsigned char byte11 = total_time;
  4850  002E6E  C0F8  F0B6         	movff	_total_time,logRun@byte11
  4851                           
  4852                           ; BSR set to: 0
  4853                           ;EEPROM.c: 131: EEPROM_write(addr, byte11);
  4854  002E72  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4855  002E76  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4856  002E7A  C0B6  F0AD         	movff	logRun@byte11,EEPROM_write@data
  4857  002E7E  EC63  F019         	call	_EEPROM_write	;wreg free
  4858  002E82  0012               	return		;funcret
  4859  002E84                     __end_of_logRun:
  4860                           	opt stack 0
  4861                           tblptru	equ	0xFF8
  4862                           tblptrh	equ	0xFF7
  4863                           tblptrl	equ	0xFF6
  4864                           tablat	equ	0xFF5
  4865                           prodh	equ	0xFF4
  4866                           prodl	equ	0xFF3
  4867                           intcon	equ	0xFF2
  4868                           intcon2	equ	0xFF1
  4869                           intcon3	equ	0xFF0
  4870                           postinc0	equ	0xFEE
  4871                           wreg	equ	0xFE8
  4872                           postdec1	equ	0xFE5
  4873                           fsr1l	equ	0xFE1
  4874                           indf2	equ	0xFDF
  4875                           postinc2	equ	0xFDE
  4876                           postdec2	equ	0xFDD
  4877                           fsr2h	equ	0xFDA
  4878                           fsr2l	equ	0xFD9
  4879                           status	equ	0xFD8
  4880                           
  4881 ;; *************** function _EEPROM_write *****************
  4882 ;; Defined at:
  4883 ;;		line 32 in file "EEPROM.c"
  4884 ;; Parameters:    Size  Location     Type
  4885 ;;  address         2   43[BANK0 ] unsigned short 
  4886 ;;  data            1   45[BANK0 ] unsigned char 
  4887 ;; Auto vars:     Size  Location     Type
  4888 ;;  i               1   48[BANK0 ] unsigned char 
  4889 ;;  i               1   47[BANK0 ] unsigned char 
  4890 ;; Return value:  Size  Location     Type
  4891 ;;                  1    wreg      void 
  4892 ;; Registers used:
  4893 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4894 ;; Tracked objects:
  4895 ;;		On entry : 0/0
  4896 ;;		On exit  : 0/0
  4897 ;;		Unchanged: 0/0
  4898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4899 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4900 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4901 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4902 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4903 ;;Total ram usage:        6 bytes
  4904 ;; Hardware stack levels used:    1
  4905 ;; Hardware stack levels required when called:   10
  4906 ;; This function calls:
  4907 ;;		_EEPROM_read
  4908 ;;		_lcdInst
  4909 ;;		_printf
  4910 ;; This function is called by:
  4911 ;;		_Loading
  4912 ;;		_logRun
  4913 ;; This function uses a non-reentrant model
  4914 ;;
  4915                           
  4916                           	psect	text13
  4917  0032C6                     __ptext13:
  4918                           	opt stack 0
  4919  0032C6                     _EEPROM_write:
  4920                           	opt stack 18
  4921                           
  4922                           ;EEPROM.c: 33: EECON1bits.WREN = 1;
  4923                           
  4924                           ;incstack = 0
  4925  0032C6  84A6               	bsf	4006,2,c	;volatile
  4926                           
  4927                           ;EEPROM.c: 36: EEADRH = (unsigned char)(address >> 8);
  4928  0032C8  0100               	movlb	0	; () banked
  4929  0032CA  51AC               	movf	(EEPROM_write@address+1)& (0+255),w,b
  4930  0032CC  6EAA               	movwf	4010,c	;volatile
  4931                           
  4932                           ; BSR set to: 0
  4933                           ;EEPROM.c: 37: EEADR = (unsigned char)address;
  4934  0032CE  C0AB  FFA9         	movff	EEPROM_write@address,4009	;volatile
  4935                           
  4936                           ; BSR set to: 0
  4937                           ;EEPROM.c: 39: EEDATA = data;
  4938  0032D2  C0AD  FFA8         	movff	EEPROM_write@data,4008	;volatile
  4939                           
  4940                           ; BSR set to: 0
  4941                           ;EEPROM.c: 40: EECON1bits.EEPGD = 0;
  4942  0032D6  9EA6               	bcf	4006,7,c	;volatile
  4943                           
  4944                           ; BSR set to: 0
  4945                           ;EEPROM.c: 41: EECON1bits.CFGS = 0;
  4946  0032D8  9CA6               	bcf	4006,6,c	;volatile
  4947                           
  4948                           ; BSR set to: 0
  4949                           ;EEPROM.c: 43: (INTCONbits.GIE = 0);
  4950  0032DA  9EF2               	bcf	intcon,7,c	;volatile
  4951                           
  4952                           ;EEPROM.c: 45: EECON2 = 0x55;
  4953  0032DC  0E55               	movlw	85
  4954  0032DE  6EA7               	movwf	4007,c	;volatile
  4955                           
  4956                           ;EEPROM.c: 46: EECON2 = 0x0AA;
  4957  0032E0  0EAA               	movlw	170
  4958  0032E2  6EA7               	movwf	4007,c	;volatile
  4959                           
  4960                           ; BSR set to: 0
  4961                           ;EEPROM.c: 47: EECON1bits.WR = 1;
  4962  0032E4  82A6               	bsf	4006,1,c	;volatile
  4963                           
  4964                           ; BSR set to: 0
  4965                           ;EEPROM.c: 48: (INTCONbits.GIE = 1);
  4966  0032E6  8EF2               	bsf	intcon,7,c	;volatile
  4967  0032E8                     l919:
  4968  0032E8  A8A1               	btfss	4001,4,c	;volatile
  4969  0032EA  D7FE               	goto	l919
  4970                           
  4971                           ;EEPROM.c: 53: PIR2bits.EEIF = 0;
  4972  0032EC  98A1               	bcf	4001,4,c	;volatile
  4973                           
  4974                           ;EEPROM.c: 54: EECON1bits.WREN = 0;
  4975  0032EE  94A6               	bcf	4006,2,c	;volatile
  4976                           
  4977                           ;EEPROM.c: 57: if(debug){
  4978  0032F0  5067               	movf	_debug,w,c
  4979  0032F2  1068               	iorwf	_debug+1,w,c
  4980  0032F4  B4D8               	btfsc	status,2,c
  4981  0032F6  0012               	return	
  4982                           
  4983                           ;EEPROM.c: 58: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  4984  0032F8  0E01               	movlw	1
  4985  0032FA  ECF0  F022         	call	_lcdInst
  4986  0032FE  0E68               	movlw	104
  4987  003300  0100               	movlb	0	; () banked
  4988  003302  6FAE               	movwf	??_EEPROM_write& (0+255),b
  4989  003304  0EE4               	movlw	228
  4990  003306                     u6987:
  4991  003306  2EE8               	decfsz	wreg,f,c
  4992  003308  D7FE               	bra	u6987
  4993  00330A  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  4994  00330C  D7FC               	bra	u6987
  4995  00330E  F000               	nop	
  4996                           
  4997                           ;EEPROM.c: 59: lcdInst(0b10000000);;
  4998  003310  0E80               	movlw	128
  4999  003312  ECF0  F022         	call	_lcdInst
  5000                           
  5001                           ;EEPROM.c: 60: if(EEPROM_read(address)==data){
  5002  003316  C0AB  F080         	movff	EEPROM_write@address,EEPROM_read@address
  5003  00331A  C0AC  F081         	movff	EEPROM_write@address+1,EEPROM_read@address+1
  5004  00331E  ECB3  F022         	call	_EEPROM_read	;wreg free
  5005  003322  0100               	movlb	0	; () banked
  5006  003324  19AD               	xorwf	EEPROM_write@data& (0+255),w,b
  5007  003326  A4D8               	btfss	status,2,c
  5008  003328  D024               	goto	l5956
  5009                           
  5010                           ; BSR set to: 0
  5011                           ;EEPROM.c: 61: printf("(data: %u, addr: %u)", data, address);
  5012  00332A  0E5A               	movlw	low STR_66
  5013  00332C  0100               	movlb	0	; () banked
  5014  00332E  6F8E               	movwf	printf@f& (0+255),b
  5015  003330  0EFB               	movlw	high STR_66
  5016  003332  0100               	movlb	0	; () banked
  5017  003334  6F8F               	movwf	(printf@f+1)& (0+255),b
  5018  003336  C0AD  F090         	movff	EEPROM_write@data,?_printf+2
  5019  00333A  0100               	movlb	0	; () banked
  5020  00333C  6B91               	clrf	(?_printf+3)& (0+255),b
  5021  00333E  C0AB  F092         	movff	EEPROM_write@address,?_printf+4
  5022  003342  C0AC  F093         	movff	EEPROM_write@address+1,?_printf+5
  5023  003346  EC9C  F008         	call	_printf	;wreg free
  5024                           
  5025                           ;EEPROM.c: 62: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));}
      +                          ;
  5026  00334A  0E00               	movlw	0
  5027  00334C  0100               	movlb	0	; () banked
  5028  00334E  6FAF               	movwf	EEPROM_write@i& (0+255),b
  5029  003350                     l5948:
  5030                           
  5031                           ; BSR set to: 0
  5032  003350  0E63               	movlw	99
  5033  003352  0100               	movlb	0	; () banked
  5034  003354  65AF               	cpfsgt	EEPROM_write@i& (0+255),b
  5035  003356  D001               	goto	l5952
  5036  003358  0012               	return	
  5037  00335A                     l5952:
  5038                           
  5039                           ; BSR set to: 0
  5040  00335A  0E68               	movlw	104
  5041  00335C  0100               	movlb	0	; () banked
  5042  00335E  6FAE               	movwf	??_EEPROM_write& (0+255),b
  5043  003360  0EE4               	movlw	228
  5044  003362                     u6997:
  5045  003362  2EE8               	decfsz	wreg,f,c
  5046  003364  D7FE               	bra	u6997
  5047  003366  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  5048  003368  D7FC               	bra	u6997
  5049  00336A  F000               	nop	
  5050  00336C  0100               	movlb	0	; () banked
  5051  00336E  2BAF               	incf	EEPROM_write@i& (0+255),f,b
  5052  003370  D7EF               	goto	l5948
  5053  003372                     l5956:
  5054                           
  5055                           ; BSR set to: 0
  5056                           ;EEPROM.c: 64: else{ printf("FAILED"); for(char i=0;i<100;i++){_delay((unsigned long)((1
      +                          0)*(32000000/4000.0)));}; }
  5057  003372  0EBC               	movlw	low STR_67
  5058  003374  0100               	movlb	0	; () banked
  5059  003376  6F8E               	movwf	printf@f& (0+255),b
  5060  003378  0EFF               	movlw	high STR_67
  5061  00337A  0100               	movlb	0	; () banked
  5062  00337C  6F8F               	movwf	(printf@f+1)& (0+255),b
  5063  00337E  EC9C  F008         	call	_printf	;wreg free
  5064  003382  0E00               	movlw	0
  5065  003384  0100               	movlb	0	; () banked
  5066  003386  6FB0               	movwf	EEPROM_write@i_1321& (0+255),b
  5067  003388                     l5960:
  5068                           
  5069                           ; BSR set to: 0
  5070  003388  0E63               	movlw	99
  5071  00338A  0100               	movlb	0	; () banked
  5072  00338C  65B0               	cpfsgt	EEPROM_write@i_1321& (0+255),b
  5073  00338E  D001               	goto	l5964
  5074  003390  0012               	return	
  5075  003392                     l5964:
  5076                           
  5077                           ; BSR set to: 0
  5078  003392  0E68               	movlw	104
  5079  003394  0100               	movlb	0	; () banked
  5080  003396  6FAE               	movwf	??_EEPROM_write& (0+255),b
  5081  003398  0EE4               	movlw	228
  5082  00339A                     u7007:
  5083  00339A  2EE8               	decfsz	wreg,f,c
  5084  00339C  D7FE               	bra	u7007
  5085  00339E  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  5086  0033A0  D7FC               	bra	u7007
  5087  0033A2  F000               	nop	
  5088  0033A4  0100               	movlb	0	; () banked
  5089  0033A6  2BB0               	incf	EEPROM_write@i_1321& (0+255),f,b
  5090  0033A8  D7EF               	goto	l5960
  5091  0033AA                     __end_of_EEPROM_write:
  5092                           	opt stack 0
  5093                           tblptru	equ	0xFF8
  5094                           tblptrh	equ	0xFF7
  5095                           tblptrl	equ	0xFF6
  5096                           tablat	equ	0xFF5
  5097                           prodh	equ	0xFF4
  5098                           prodl	equ	0xFF3
  5099                           intcon	equ	0xFF2
  5100                           intcon2	equ	0xFF1
  5101                           intcon3	equ	0xFF0
  5102                           postinc0	equ	0xFEE
  5103                           wreg	equ	0xFE8
  5104                           postdec1	equ	0xFE5
  5105                           fsr1l	equ	0xFE1
  5106                           indf2	equ	0xFDF
  5107                           postinc2	equ	0xFDE
  5108                           postdec2	equ	0xFDD
  5109                           fsr2h	equ	0xFDA
  5110                           fsr2l	equ	0xFD9
  5111                           status	equ	0xFD8
  5112                           
  5113 ;; *************** function _EEPROM_read *****************
  5114 ;; Defined at:
  5115 ;;		line 68 in file "EEPROM.c"
  5116 ;; Parameters:    Size  Location     Type
  5117 ;;  address         2    0[BANK0 ] unsigned short 
  5118 ;; Auto vars:     Size  Location     Type
  5119 ;;		None
  5120 ;; Return value:  Size  Location     Type
  5121 ;;                  1    wreg      unsigned char 
  5122 ;; Registers used:
  5123 ;;		wreg, status,2
  5124 ;; Tracked objects:
  5125 ;;		On entry : 0/0
  5126 ;;		On exit  : 0/0
  5127 ;;		Unchanged: 0/0
  5128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5129 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5130 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5131 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5132 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5133 ;;Total ram usage:        2 bytes
  5134 ;; Hardware stack levels used:    1
  5135 ;; Hardware stack levels required when called:    7
  5136 ;; This function calls:
  5137 ;;		Nothing
  5138 ;; This function is called by:
  5139 ;;		_Loading
  5140 ;;		_EEPROM_write
  5141 ;;		_logRun
  5142 ;; This function uses a non-reentrant model
  5143 ;;
  5144                           
  5145                           	psect	text14
  5146  004566                     __ptext14:
  5147                           	opt stack 0
  5148  004566                     _EEPROM_read:
  5149                           	opt stack 20
  5150                           
  5151                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
  5152                           
  5153                           ;incstack = 0
  5154  004566  0100               	movlb	0	; () banked
  5155  004568  5181               	movf	(EEPROM_read@address+1)& (0+255),w,b
  5156  00456A  6EAA               	movwf	4010,c	;volatile
  5157                           
  5158                           ; BSR set to: 0
  5159                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
  5160  00456C  C080  FFA9         	movff	EEPROM_read@address,4009	;volatile
  5161                           
  5162                           ; BSR set to: 0
  5163                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
  5164  004570  9EA6               	bcf	4006,7,c	;volatile
  5165                           
  5166                           ; BSR set to: 0
  5167                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
  5168  004572  9CA6               	bcf	4006,6,c	;volatile
  5169                           
  5170                           ; BSR set to: 0
  5171                           ;EEPROM.c: 75: EECON1bits.RD = 1;
  5172  004574  80A6               	bsf	4006,0,c	;volatile
  5173  004576                     l932:
  5174  004576  B0A6               	btfsc	4006,0,c	;volatile
  5175  004578  D7FE               	goto	l932
  5176                           
  5177                           ;EEPROM.c: 81: return EEDATA;
  5178  00457A  50A8               	movf	4008,w,c	;volatile
  5179  00457C  0012               	return	
  5180  00457E                     __end_of_EEPROM_read:
  5181                           	opt stack 0
  5182                           tblptru	equ	0xFF8
  5183                           tblptrh	equ	0xFF7
  5184                           tblptrl	equ	0xFF6
  5185                           tablat	equ	0xFF5
  5186                           prodh	equ	0xFF4
  5187                           prodl	equ	0xFF3
  5188                           intcon	equ	0xFF2
  5189                           intcon2	equ	0xFF1
  5190                           intcon3	equ	0xFF0
  5191                           postinc0	equ	0xFEE
  5192                           wreg	equ	0xFE8
  5193                           postdec1	equ	0xFE5
  5194                           fsr1l	equ	0xFE1
  5195                           indf2	equ	0xFDF
  5196                           postinc2	equ	0xFDE
  5197                           postdec2	equ	0xFDD
  5198                           fsr2h	equ	0xFDA
  5199                           fsr2l	equ	0xFD9
  5200                           status	equ	0xFD8
  5201                           
  5202 ;; *************** function _initUI *****************
  5203 ;; Defined at:
  5204 ;;		line 62 in file "UI.c"
  5205 ;; Parameters:    Size  Location     Type
  5206 ;;		None
  5207 ;; Auto vars:     Size  Location     Type
  5208 ;;		None
  5209 ;; Return value:  Size  Location     Type
  5210 ;;                  1    wreg      void 
  5211 ;; Registers used:
  5212 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5213 ;; Tracked objects:
  5214 ;;		On entry : 0/0
  5215 ;;		On exit  : 0/0
  5216 ;;		Unchanged: 0/0
  5217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5218 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5219 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5220 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5221 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5222 ;;Total ram usage:        0 bytes
  5223 ;; Hardware stack levels used:    1
  5224 ;; Hardware stack levels required when called:   12
  5225 ;; This function calls:
  5226 ;;		_change_state_to_menu_start
  5227 ;;		_loadRTC
  5228 ;; This function is called by:
  5229 ;;		_main
  5230 ;; This function uses a non-reentrant model
  5231 ;;
  5232                           
  5233                           	psect	text15
  5234  004338                     __ptext15:
  5235                           	opt stack 0
  5236  004338                     _initUI:
  5237                           	opt stack 18
  5238                           
  5239                           ;UI.c: 63: (INTCONbits.GIE = 1);
  5240                           
  5241                           ;incstack = 0
  5242  004338  8EF2               	bsf	intcon,7,c	;volatile
  5243                           
  5244                           ;UI.c: 64: machine_state = UI_state;
  5245  00433A  0E00               	movlw	0
  5246  00433C  0100               	movlb	0	; () banked
  5247  00433E  6FFC               	movwf	_machine_state& (0+255),b
  5248                           
  5249                           ;UI.c: 65: logstate = 0;
  5250  004340  0E00               	movlw	0
  5251  004342  0100               	movlb	0	; () banked
  5252  004344  6FF7               	movwf	(_logstate+1)& (0+255),b
  5253  004346  0E00               	movlw	0
  5254  004348  6FF6               	movwf	_logstate& (0+255),b
  5255                           
  5256                           ; BSR set to: 0
  5257                           ;UI.c: 67: if(RTCflag){
  5258  00434A  0100               	movlb	0	; () banked
  5259  00434C  51DE               	movf	_RTCflag& (0+255),w,b
  5260  00434E  0100               	movlb	0	; () banked
  5261  004350  11DF               	iorwf	(_RTCflag+1)& (0+255),w,b
  5262  004352  A4D8               	btfss	status,2,c
  5263                           
  5264                           ; BSR set to: 0
  5265                           ;UI.c: 68: loadRTC();
  5266  004354  ECF9  F01B         	call	_loadRTC	;wreg free
  5267                           
  5268                           ;UI.c: 69: }
  5269                           ;UI.c: 71: change_state_to_menu_start();
  5270  004358  ECE1  F021         	call	_change_state_to_menu_start	;wreg free
  5271                           
  5272                           ;UI.c: 72: firstboot = 1;
  5273  00435C  0E00               	movlw	0
  5274  00435E  6E76               	movwf	_firstboot+1,c
  5275  004360  0E01               	movlw	1
  5276  004362  6E75               	movwf	_firstboot,c
  5277  004364  0012               	return		;funcret
  5278  004366                     __end_of_initUI:
  5279                           	opt stack 0
  5280                           tblptru	equ	0xFF8
  5281                           tblptrh	equ	0xFF7
  5282                           tblptrl	equ	0xFF6
  5283                           tablat	equ	0xFF5
  5284                           prodh	equ	0xFF4
  5285                           prodl	equ	0xFF3
  5286                           intcon	equ	0xFF2
  5287                           intcon2	equ	0xFF1
  5288                           intcon3	equ	0xFF0
  5289                           postinc0	equ	0xFEE
  5290                           wreg	equ	0xFE8
  5291                           postdec1	equ	0xFE5
  5292                           fsr1l	equ	0xFE1
  5293                           indf2	equ	0xFDF
  5294                           postinc2	equ	0xFDE
  5295                           postdec2	equ	0xFDD
  5296                           fsr2h	equ	0xFDA
  5297                           fsr2l	equ	0xFD9
  5298                           status	equ	0xFD8
  5299                           
  5300 ;; *************** function _loadRTC *****************
  5301 ;; Defined at:
  5302 ;;		line 28 in file "RTC.c"
  5303 ;; Parameters:    Size  Location     Type
  5304 ;;		None
  5305 ;; Auto vars:     Size  Location     Type
  5306 ;;  i               2   22[BANK0 ] int 
  5307 ;; Return value:  Size  Location     Type
  5308 ;;                  1    wreg      void 
  5309 ;; Registers used:
  5310 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5311 ;; Tracked objects:
  5312 ;;		On entry : 0/0
  5313 ;;		On exit  : 0/0
  5314 ;;		Unchanged: 0/0
  5315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5316 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5317 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5318 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5319 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5320 ;;Total ram usage:        3 bytes
  5321 ;; Hardware stack levels used:    1
  5322 ;; Hardware stack levels required when called:    9
  5323 ;; This function calls:
  5324 ;;		_I2C_Master_Init
  5325 ;;		_I2C_Master_Start
  5326 ;;		_I2C_Master_Stop
  5327 ;;		_I2C_Master_Write
  5328 ;; This function is called by:
  5329 ;;		_initUI
  5330 ;; This function uses a non-reentrant model
  5331 ;;
  5332                           
  5333                           	psect	text16
  5334  0037F2                     __ptext16:
  5335                           	opt stack 0
  5336  0037F2                     _loadRTC:
  5337                           	opt stack 20
  5338                           
  5339                           ;RTC.c: 30: I2C_Master_Init(10000);
  5340                           
  5341                           ;incstack = 0
  5342  0037F2  0E10               	movlw	16
  5343  0037F4  0100               	movlb	0	; () banked
  5344  0037F6  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  5345  0037F8  0E27               	movlw	39
  5346  0037FA  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  5347  0037FC  0E00               	movlw	0
  5348  0037FE  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  5349  003800  0E00               	movlw	0
  5350  003802  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  5351  003804  EC52  F01E         	call	_I2C_Master_Init	;wreg free
  5352                           
  5353                           ;RTC.c: 32: (INTCONbits.GIE = 0);
  5354  003808  9EF2               	bcf	intcon,7,c	;volatile
  5355                           
  5356                           ;RTC.c: 34: I2C_Master_Start();
  5357  00380A  EC16  F023         	call	_I2C_Master_Start	;wreg free
  5358                           
  5359                           ;RTC.c: 35: I2C_Master_Write(0b11010000);
  5360  00380E  0E00               	movlw	0
  5361  003810  0100               	movlb	0	; () banked
  5362  003812  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5363  003814  0ED0               	movlw	208
  5364  003816  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5365  003818  EC04  F023         	call	_I2C_Master_Write	;wreg free
  5366                           
  5367                           ;RTC.c: 36: I2C_Master_Write(0x00);
  5368  00381C  0E00               	movlw	0
  5369  00381E  0100               	movlb	0	; () banked
  5370  003820  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5371  003822  0E00               	movlw	0
  5372  003824  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5373  003826  EC04  F023         	call	_I2C_Master_Write	;wreg free
  5374                           
  5375                           ;RTC.c: 37: for(int i = 0; i<7; i++){
  5376  00382A  0E00               	movlw	0
  5377  00382C  0100               	movlb	0	; () banked
  5378  00382E  6F97               	movwf	(loadRTC@i+1)& (0+255),b
  5379  003830  0E00               	movlw	0
  5380  003832  6F96               	movwf	loadRTC@i& (0+255),b
  5381  003834                     l6080:
  5382                           
  5383                           ; BSR set to: 0
  5384  003834  0100               	movlb	0	; () banked
  5385  003836  BF97               	btfsc	(loadRTC@i+1)& (0+255),7,b
  5386  003838  D008               	goto	l6084
  5387  00383A  0100               	movlb	0	; () banked
  5388  00383C  5197               	movf	(loadRTC@i+1)& (0+255),w,b
  5389  00383E  E11B               	bnz	l6090
  5390  003840  0E07               	movlw	7
  5391  003842  0100               	movlb	0	; () banked
  5392  003844  5D96               	subwf	loadRTC@i& (0+255),w,b
  5393  003846  B0D8               	btfsc	status,0,c
  5394  003848  D016               	goto	l6090
  5395  00384A                     l6084:
  5396                           
  5397                           ; BSR set to: 0
  5398                           ;RTC.c: 38: I2C_Master_Write(time[i]);
  5399  00384A  0E24               	movlw	low _time
  5400  00384C  0100               	movlb	0	; () banked
  5401  00384E  2596               	addwf	loadRTC@i& (0+255),w,b
  5402  003850  6ED9               	movwf	fsr2l,c
  5403  003852  0E01               	movlw	high _time
  5404  003854  0100               	movlb	0	; () banked
  5405  003856  2197               	addwfc	(loadRTC@i+1)& (0+255),w,b
  5406  003858  6EDA               	movwf	fsr2h,c
  5407  00385A  50DF               	movf	indf2,w,c
  5408  00385C  0100               	movlb	0	; () banked
  5409  00385E  6F95               	movwf	??_loadRTC& (0+255),b
  5410  003860  0100               	movlb	0	; () banked
  5411  003862  5195               	movf	??_loadRTC& (0+255),w,b
  5412  003864  0100               	movlb	0	; () banked
  5413  003866  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5414  003868  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  5415  00386A  EC04  F023         	call	_I2C_Master_Write	;wreg free
  5416  00386E  0100               	movlb	0	; () banked
  5417  003870  4B96               	infsnz	loadRTC@i& (0+255),f,b
  5418  003872  2B97               	incf	(loadRTC@i+1)& (0+255),f,b
  5419  003874  D7DF               	goto	l6080
  5420  003876                     l6090:
  5421                           
  5422                           ; BSR set to: 0
  5423                           ;RTC.c: 39: }
  5424                           ;RTC.c: 40: I2C_Master_Stop();
  5425  003876  EC12  F023         	call	_I2C_Master_Stop	;wreg free
  5426                           
  5427                           ;RTC.c: 41: (INTCONbits.GIE = 1);
  5428  00387A  8EF2               	bsf	intcon,7,c	;volatile
  5429  00387C  0012               	return		;funcret
  5430  00387E                     __end_of_loadRTC:
  5431                           	opt stack 0
  5432                           tblptru	equ	0xFF8
  5433                           tblptrh	equ	0xFF7
  5434                           tblptrl	equ	0xFF6
  5435                           tablat	equ	0xFF5
  5436                           prodh	equ	0xFF4
  5437                           prodl	equ	0xFF3
  5438                           intcon	equ	0xFF2
  5439                           intcon2	equ	0xFF1
  5440                           intcon3	equ	0xFF0
  5441                           postinc0	equ	0xFEE
  5442                           wreg	equ	0xFE8
  5443                           postdec1	equ	0xFE5
  5444                           fsr1l	equ	0xFE1
  5445                           indf2	equ	0xFDF
  5446                           postinc2	equ	0xFDE
  5447                           postdec2	equ	0xFDD
  5448                           fsr2h	equ	0xFDA
  5449                           fsr2l	equ	0xFD9
  5450                           status	equ	0xFD8
  5451                           
  5452 ;; *************** function _I2C_Master_Init *****************
  5453 ;; Defined at:
  5454 ;;		line 15 in file "I2C.c"
  5455 ;; Parameters:    Size  Location     Type
  5456 ;;  c               4   13[BANK0 ] const unsigned long 
  5457 ;; Auto vars:     Size  Location     Type
  5458 ;;		None
  5459 ;; Return value:  Size  Location     Type
  5460 ;;                  1    wreg      void 
  5461 ;; Registers used:
  5462 ;;		wreg, status,2, status,0, cstack
  5463 ;; Tracked objects:
  5464 ;;		On entry : 0/0
  5465 ;;		On exit  : 0/0
  5466 ;;		Unchanged: 0/0
  5467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5468 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5469 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5470 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5471 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5472 ;;Total ram usage:        8 bytes
  5473 ;; Hardware stack levels used:    1
  5474 ;; Hardware stack levels required when called:    8
  5475 ;; This function calls:
  5476 ;;		___lldiv
  5477 ;; This function is called by:
  5478 ;;		_loadRTC
  5479 ;; This function uses a non-reentrant model
  5480 ;;
  5481                           
  5482                           	psect	text17
  5483  003CA4                     __ptext17:
  5484                           	opt stack 0
  5485  003CA4                     _I2C_Master_Init:
  5486                           	opt stack 20
  5487                           
  5488                           ;I2C.c: 18: SSPSTAT = 0b00000000;
  5489                           
  5490                           ;incstack = 0
  5491  003CA4  0E00               	movlw	0
  5492  003CA6  6EC7               	movwf	4039,c	;volatile
  5493                           
  5494                           ;I2C.c: 19: SSPCON1 = 0b00101000;
  5495  003CA8  0E28               	movlw	40
  5496  003CAA  6EC6               	movwf	4038,c	;volatile
  5497                           
  5498                           ;I2C.c: 20: SSPCON2 = 0b00000000;
  5499  003CAC  0E00               	movlw	0
  5500  003CAE  6EC5               	movwf	4037,c	;volatile
  5501                           
  5502                           ;I2C.c: 21: SSPADD = (32000000/(4*c))-1;
  5503  003CB0  0E00               	movlw	0
  5504  003CB2  0100               	movlb	0	; () banked
  5505  003CB4  6F80               	movwf	___lldiv@dividend& (0+255),b
  5506  003CB6  0E48               	movlw	72
  5507  003CB8  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  5508  003CBA  0EE8               	movlw	232
  5509  003CBC  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  5510  003CBE  0E01               	movlw	1
  5511  003CC0  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  5512  003CC2  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  5513  003CC6  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  5514  003CCA  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  5515  003CCE  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  5516  003CD2  0E02               	movlw	2
  5517  003CD4                     u4395:
  5518  003CD4  90D8               	bcf	status,0,c
  5519  003CD6  0100               	movlb	0	; () banked
  5520  003CD8  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  5521  003CDA  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  5522  003CDC  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  5523  003CDE  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  5524  003CE0  2EE8               	decfsz	wreg,f,c
  5525  003CE2  D7F8               	goto	u4395
  5526  003CE4  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  5527  003CE8  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  5528  003CEC  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  5529  003CF0  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  5530  003CF4  EC9F  F01A         	call	___lldiv	;wreg free
  5531  003CF8  0100               	movlb	0	; () banked
  5532  003CFA  0580               	decf	?___lldiv& (0+255),w,b
  5533  003CFC  6EC8               	movwf	4040,c	;volatile
  5534                           
  5535                           ; BSR set to: 0
  5536                           ;I2C.c: 22: TRISC3 = 1;
  5537  003CFE  8694               	bsf	3988,3,c	;volatile
  5538                           
  5539                           ; BSR set to: 0
  5540                           ;I2C.c: 23: TRISC4 = 1;
  5541  003D00  8894               	bsf	3988,4,c	;volatile
  5542                           
  5543                           ; BSR set to: 0
  5544  003D02  0012               	return		;funcret
  5545  003D04                     __end_of_I2C_Master_Init:
  5546                           	opt stack 0
  5547                           tblptru	equ	0xFF8
  5548                           tblptrh	equ	0xFF7
  5549                           tblptrl	equ	0xFF6
  5550                           tablat	equ	0xFF5
  5551                           prodh	equ	0xFF4
  5552                           prodl	equ	0xFF3
  5553                           intcon	equ	0xFF2
  5554                           intcon2	equ	0xFF1
  5555                           intcon3	equ	0xFF0
  5556                           postinc0	equ	0xFEE
  5557                           wreg	equ	0xFE8
  5558                           postdec1	equ	0xFE5
  5559                           fsr1l	equ	0xFE1
  5560                           indf2	equ	0xFDF
  5561                           postinc2	equ	0xFDE
  5562                           postdec2	equ	0xFDD
  5563                           fsr2h	equ	0xFDA
  5564                           fsr2l	equ	0xFD9
  5565                           status	equ	0xFD8
  5566                           
  5567 ;; *************** function ___lldiv *****************
  5568 ;; Defined at:
  5569 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  5570 ;; Parameters:    Size  Location     Type
  5571 ;;  dividend        4    0[BANK0 ] unsigned long 
  5572 ;;  divisor         4    4[BANK0 ] unsigned long 
  5573 ;; Auto vars:     Size  Location     Type
  5574 ;;  quotient        4    8[BANK0 ] unsigned long 
  5575 ;;  counter         1   12[BANK0 ] unsigned char 
  5576 ;; Return value:  Size  Location     Type
  5577 ;;                  4    0[BANK0 ] unsigned long 
  5578 ;; Registers used:
  5579 ;;		wreg, status,2, status,0
  5580 ;; Tracked objects:
  5581 ;;		On entry : 0/0
  5582 ;;		On exit  : 0/0
  5583 ;;		Unchanged: 0/0
  5584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5585 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5586 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5587 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5588 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5589 ;;Total ram usage:       13 bytes
  5590 ;; Hardware stack levels used:    1
  5591 ;; Hardware stack levels required when called:    7
  5592 ;; This function calls:
  5593 ;;		Nothing
  5594 ;; This function is called by:
  5595 ;;		_I2C_Master_Init
  5596 ;; This function uses a non-reentrant model
  5597 ;;
  5598                           
  5599                           	psect	text18
  5600  00353E                     __ptext18:
  5601                           	opt stack 0
  5602  00353E                     ___lldiv:
  5603                           	opt stack 20
  5604                           
  5605                           ; BSR set to: 0
  5606                           ;incstack = 0
  5607  00353E  0E00               	movlw	0
  5608  003540  0100               	movlb	0	; () banked
  5609  003542  6F88               	movwf	___lldiv@quotient& (0+255),b
  5610  003544  0E00               	movlw	0
  5611  003546  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  5612  003548  0E00               	movlw	0
  5613  00354A  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  5614  00354C  0E00               	movlw	0
  5615  00354E  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  5616                           
  5617                           ; BSR set to: 0
  5618  003550  0100               	movlb	0	; () banked
  5619  003552  5184               	movf	___lldiv@divisor& (0+255),w,b
  5620  003554  0100               	movlb	0	; () banked
  5621  003556  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  5622  003558  0100               	movlb	0	; () banked
  5623  00355A  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  5624  00355C  0100               	movlb	0	; () banked
  5625  00355E  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  5626  003560  B4D8               	btfsc	status,2,c
  5627  003562  D042               	goto	l1628
  5628                           
  5629                           ; BSR set to: 0
  5630  003564  0E01               	movlw	1
  5631  003566  0100               	movlb	0	; () banked
  5632  003568  6F8C               	movwf	___lldiv@counter& (0+255),b
  5633  00356A  D008               	goto	l5520
  5634  00356C                     l5518:
  5635                           
  5636                           ; BSR set to: 0
  5637  00356C  0100               	movlb	0	; () banked
  5638  00356E  90D8               	bcf	status,0,c
  5639  003570  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  5640  003572  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  5641  003574  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  5642  003576  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  5643  003578  0100               	movlb	0	; () banked
  5644  00357A  2B8C               	incf	___lldiv@counter& (0+255),f,b
  5645  00357C                     l5520:
  5646                           
  5647                           ; BSR set to: 0
  5648  00357C  0100               	movlb	0	; () banked
  5649  00357E  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  5650  003580  D7F5               	goto	l5518
  5651  003582                     l5522:
  5652                           
  5653                           ; BSR set to: 0
  5654  003582  0100               	movlb	0	; () banked
  5655  003584  90D8               	bcf	status,0,c
  5656  003586  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  5657  003588  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  5658  00358A  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  5659  00358C  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  5660                           
  5661                           ; BSR set to: 0
  5662  00358E  0100               	movlb	0	; () banked
  5663  003590  5184               	movf	___lldiv@divisor& (0+255),w,b
  5664  003592  0100               	movlb	0	; () banked
  5665  003594  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  5666  003596  0100               	movlb	0	; () banked
  5667  003598  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  5668  00359A  0100               	movlb	0	; () banked
  5669  00359C  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  5670  00359E  0100               	movlb	0	; () banked
  5671  0035A0  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  5672  0035A2  0100               	movlb	0	; () banked
  5673  0035A4  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  5674  0035A6  0100               	movlb	0	; () banked
  5675  0035A8  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  5676  0035AA  0100               	movlb	0	; () banked
  5677  0035AC  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  5678  0035AE  A0D8               	btfss	status,0,c
  5679  0035B0  D012               	goto	l5530
  5680                           
  5681                           ; BSR set to: 0
  5682  0035B2  0100               	movlb	0	; () banked
  5683  0035B4  5184               	movf	___lldiv@divisor& (0+255),w,b
  5684  0035B6  0100               	movlb	0	; () banked
  5685  0035B8  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  5686  0035BA  0100               	movlb	0	; () banked
  5687  0035BC  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  5688  0035BE  0100               	movlb	0	; () banked
  5689  0035C0  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  5690  0035C2  0100               	movlb	0	; () banked
  5691  0035C4  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  5692  0035C6  0100               	movlb	0	; () banked
  5693  0035C8  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  5694  0035CA  0100               	movlb	0	; () banked
  5695  0035CC  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  5696  0035CE  0100               	movlb	0	; () banked
  5697  0035D0  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  5698                           
  5699                           ; BSR set to: 0
  5700  0035D2  0100               	movlb	0	; () banked
  5701  0035D4  8188               	bsf	___lldiv@quotient& (0+255),0,b
  5702  0035D6                     l5530:
  5703                           
  5704                           ; BSR set to: 0
  5705  0035D6  0100               	movlb	0	; () banked
  5706  0035D8  90D8               	bcf	status,0,c
  5707  0035DA  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  5708  0035DC  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  5709  0035DE  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  5710  0035E0  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  5711                           
  5712                           ; BSR set to: 0
  5713  0035E2  0100               	movlb	0	; () banked
  5714  0035E4  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  5715  0035E6  D7CD               	goto	l5522
  5716  0035E8                     l1628:
  5717                           
  5718                           ; BSR set to: 0
  5719  0035E8  C088  F080         	movff	___lldiv@quotient,?___lldiv
  5720  0035EC  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  5721  0035F0  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  5722  0035F4  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  5723                           
  5724                           ; BSR set to: 0
  5725  0035F8  0012               	return		;funcret
  5726  0035FA                     __end_of___lldiv:
  5727                           	opt stack 0
  5728                           tblptru	equ	0xFF8
  5729                           tblptrh	equ	0xFF7
  5730                           tblptrl	equ	0xFF6
  5731                           tablat	equ	0xFF5
  5732                           prodh	equ	0xFF4
  5733                           prodl	equ	0xFF3
  5734                           intcon	equ	0xFF2
  5735                           intcon2	equ	0xFF1
  5736                           intcon3	equ	0xFF0
  5737                           postinc0	equ	0xFEE
  5738                           wreg	equ	0xFE8
  5739                           postdec1	equ	0xFE5
  5740                           fsr1l	equ	0xFE1
  5741                           indf2	equ	0xFDF
  5742                           postinc2	equ	0xFDE
  5743                           postdec2	equ	0xFDD
  5744                           fsr2h	equ	0xFDA
  5745                           fsr2l	equ	0xFD9
  5746                           status	equ	0xFD8
  5747                           
  5748 ;; *************** function _change_state_to_menu_start *****************
  5749 ;; Defined at:
  5750 ;;		line 474 in file "UI.c"
  5751 ;; Parameters:    Size  Location     Type
  5752 ;;		None
  5753 ;; Auto vars:     Size  Location     Type
  5754 ;;		None
  5755 ;; Return value:  Size  Location     Type
  5756 ;;                  1    wreg      void 
  5757 ;; Registers used:
  5758 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5759 ;; Tracked objects:
  5760 ;;		On entry : 0/0
  5761 ;;		On exit  : 0/0
  5762 ;;		Unchanged: 0/0
  5763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5764 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5765 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5766 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5767 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5768 ;;Total ram usage:        0 bytes
  5769 ;; Hardware stack levels used:    1
  5770 ;; Hardware stack levels required when called:   11
  5771 ;; This function calls:
  5772 ;;		_lcdInst
  5773 ;;		_printRTC
  5774 ;;		_printf
  5775 ;; This function is called by:
  5776 ;;		_initUI
  5777 ;; This function uses a non-reentrant model
  5778 ;;
  5779                           
  5780                           	psect	text19
  5781  0043C2                     __ptext19:
  5782                           	opt stack 0
  5783  0043C2                     _change_state_to_menu_start:
  5784                           	opt stack 18
  5785                           
  5786                           ;UI.c: 475: cur_state = 0;
  5787                           
  5788                           ; BSR set to: 0
  5789                           ;incstack = 0
  5790  0043C2  0E00               	movlw	0
  5791  0043C4  0100               	movlb	0	; () banked
  5792  0043C6  6FE1               	movwf	(_cur_state+1)& (0+255),b
  5793  0043C8  0E00               	movlw	0
  5794  0043CA  6FE0               	movwf	_cur_state& (0+255),b
  5795                           
  5796                           ; BSR set to: 0
  5797                           ;UI.c: 477: lcdInst(0b10000000);;
  5798  0043CC  0E80               	movlw	128
  5799  0043CE  ECF0  F022         	call	_lcdInst
  5800                           
  5801                           ;UI.c: 478: printRTC();
  5802  0043D2  ECE7  F00D         	call	_printRTC	;wreg free
  5803                           
  5804                           ;UI.c: 479: lcdInst(0b11000000);;
  5805  0043D6  0EC0               	movlw	192
  5806  0043D8  ECF0  F022         	call	_lcdInst
  5807                           
  5808                           ;UI.c: 480: printf("PUSH TO CONTINUE");
  5809  0043DC  0E1F               	movlw	low STR_30
  5810  0043DE  0100               	movlb	0	; () banked
  5811  0043E0  6F8E               	movwf	printf@f& (0+255),b
  5812  0043E2  0EFE               	movlw	high STR_30
  5813  0043E4  0100               	movlb	0	; () banked
  5814  0043E6  6F8F               	movwf	(printf@f+1)& (0+255),b
  5815  0043E8  EC9C  F008         	call	_printf	;wreg free
  5816  0043EC  0012               	return		;funcret
  5817  0043EE                     __end_of_change_state_to_menu_start:
  5818                           	opt stack 0
  5819                           tblptru	equ	0xFF8
  5820                           tblptrh	equ	0xFF7
  5821                           tblptrl	equ	0xFF6
  5822                           tablat	equ	0xFF5
  5823                           prodh	equ	0xFF4
  5824                           prodl	equ	0xFF3
  5825                           intcon	equ	0xFF2
  5826                           intcon2	equ	0xFF1
  5827                           intcon3	equ	0xFF0
  5828                           postinc0	equ	0xFEE
  5829                           wreg	equ	0xFE8
  5830                           postdec1	equ	0xFE5
  5831                           fsr1l	equ	0xFE1
  5832                           indf2	equ	0xFDF
  5833                           postinc2	equ	0xFDE
  5834                           postdec2	equ	0xFDD
  5835                           fsr2h	equ	0xFDA
  5836                           fsr2l	equ	0xFD9
  5837                           status	equ	0xFD8
  5838                           
  5839 ;; *************** function _initTime *****************
  5840 ;; Defined at:
  5841 ;;		line 17 in file "RTC.c"
  5842 ;; Parameters:    Size  Location     Type
  5843 ;;  s               1    wreg     unsigned char 
  5844 ;;  m               1    0[BANK0 ] unsigned char 
  5845 ;;  h               1    1[BANK0 ] unsigned char 
  5846 ;;  w               1    2[BANK0 ] unsigned char 
  5847 ;;  DD              1    3[BANK0 ] unsigned char 
  5848 ;;  MM              1    4[BANK0 ] unsigned char 
  5849 ;;  YY              1    5[BANK0 ] unsigned char 
  5850 ;; Auto vars:     Size  Location     Type
  5851 ;;  s               1    6[BANK0 ] unsigned char 
  5852 ;; Return value:  Size  Location     Type
  5853 ;;                  1    wreg      void 
  5854 ;; Registers used:
  5855 ;;		wreg
  5856 ;; Tracked objects:
  5857 ;;		On entry : 0/0
  5858 ;;		On exit  : 0/0
  5859 ;;		Unchanged: 0/0
  5860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5861 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5862 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5863 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5864 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5865 ;;Total ram usage:        7 bytes
  5866 ;; Hardware stack levels used:    1
  5867 ;; Hardware stack levels required when called:    7
  5868 ;; This function calls:
  5869 ;;		Nothing
  5870 ;; This function is called by:
  5871 ;;		_main
  5872 ;; This function uses a non-reentrant model
  5873 ;;
  5874                           
  5875                           	psect	text20
  5876  004526                     __ptext20:
  5877                           	opt stack 0
  5878  004526                     _initTime:
  5879                           	opt stack 23
  5880                           
  5881                           ;incstack = 0
  5882                           ;initTime@s stored from wreg
  5883  004526  0100               	movlb	0	; () banked
  5884  004528  6F86               	movwf	initTime@s& (0+255),b
  5885                           
  5886                           ;RTC.c: 19: time[0] = s;
  5887  00452A  C086  F124         	movff	initTime@s,_time
  5888                           
  5889                           ;RTC.c: 20: time[1] = m;
  5890  00452E  C080  F125         	movff	initTime@m,_time+1
  5891                           
  5892                           ;RTC.c: 21: time[2] = h;
  5893  004532  C081  F126         	movff	initTime@h,_time+2
  5894                           
  5895                           ;RTC.c: 22: time[3] = w;
  5896  004536  C082  F127         	movff	initTime@w,_time+3
  5897                           
  5898                           ;RTC.c: 23: time[4] = DD;
  5899  00453A  C083  F128         	movff	initTime@DD,_time+4
  5900                           
  5901                           ;RTC.c: 24: time[5] = MM;
  5902  00453E  C084  F129         	movff	initTime@MM,_time+5
  5903                           
  5904                           ;RTC.c: 25: time[6] = YY;
  5905  004542  C085  F12A         	movff	initTime@YY,_time+6
  5906  004546  0012               	return		;funcret
  5907  004548                     __end_of_initTime:
  5908                           	opt stack 0
  5909                           tblptru	equ	0xFF8
  5910                           tblptrh	equ	0xFF7
  5911                           tblptrl	equ	0xFF6
  5912                           tablat	equ	0xFF5
  5913                           prodh	equ	0xFF4
  5914                           prodl	equ	0xFF3
  5915                           intcon	equ	0xFF2
  5916                           intcon2	equ	0xFF1
  5917                           intcon3	equ	0xFF0
  5918                           postinc0	equ	0xFEE
  5919                           wreg	equ	0xFE8
  5920                           postdec1	equ	0xFE5
  5921                           fsr1l	equ	0xFE1
  5922                           indf2	equ	0xFDF
  5923                           postinc2	equ	0xFDE
  5924                           postdec2	equ	0xFDD
  5925                           fsr2h	equ	0xFDA
  5926                           fsr2l	equ	0xFD9
  5927                           status	equ	0xFD8
  5928                           
  5929 ;; *************** function _initLCD *****************
  5930 ;; Defined at:
  5931 ;;		line 48 in file "lcd.c"
  5932 ;; Parameters:    Size  Location     Type
  5933 ;;		None
  5934 ;; Auto vars:     Size  Location     Type
  5935 ;;		None
  5936 ;; Return value:  Size  Location     Type
  5937 ;;                  1    wreg      void 
  5938 ;; Registers used:
  5939 ;;		wreg, status,2, status,0, cstack
  5940 ;; Tracked objects:
  5941 ;;		On entry : 0/0
  5942 ;;		On exit  : 0/0
  5943 ;;		Unchanged: 0/0
  5944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5945 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5946 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5947 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5948 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5949 ;;Total ram usage:        1 bytes
  5950 ;; Hardware stack levels used:    1
  5951 ;; Hardware stack levels required when called:    9
  5952 ;; This function calls:
  5953 ;;		_lcdInst
  5954 ;; This function is called by:
  5955 ;;		_main
  5956 ;; This function uses a non-reentrant model
  5957 ;;
  5958                           
  5959                           	psect	text21
  5960  003FF2                     __ptext21:
  5961                           	opt stack 0
  5962  003FF2                     _initLCD:
  5963                           	opt stack 21
  5964                           
  5965                           ;lcd.c: 49: _delay((unsigned long)((15)*(32000000/4000.0)));
  5966                           
  5967                           ;incstack = 0
  5968  003FF2  0E9C               	movlw	156
  5969  003FF4  0100               	movlb	0	; () banked
  5970  003FF6  6F83               	movwf	??_initLCD& (0+255),b
  5971  003FF8  0ED7               	movlw	215
  5972  003FFA                     u7017:
  5973  003FFA  2EE8               	decfsz	wreg,f,c
  5974  003FFC  D7FE               	bra	u7017
  5975  003FFE  2F83               	decfsz	??_initLCD& (0+255),f,b
  5976  004000  D7FC               	bra	u7017
  5977                           
  5978                           ;lcd.c: 50: lcdInst(0b00110011);
  5979  004002  0E33               	movlw	51
  5980  004004  ECF0  F022         	call	_lcdInst
  5981                           
  5982                           ;lcd.c: 51: lcdInst(0b00110010);
  5983  004008  0E32               	movlw	50
  5984  00400A  ECF0  F022         	call	_lcdInst
  5985                           
  5986                           ;lcd.c: 53: lcdInst(0b00101000);
  5987  00400E  0E28               	movlw	40
  5988  004010  ECF0  F022         	call	_lcdInst
  5989                           
  5990                           ;lcd.c: 54: lcdInst(0b00001100);
  5991  004014  0E0C               	movlw	12
  5992  004016  ECF0  F022         	call	_lcdInst
  5993                           
  5994                           ;lcd.c: 55: lcdInst(0b00000110);
  5995  00401A  0E06               	movlw	6
  5996  00401C  ECF0  F022         	call	_lcdInst
  5997                           
  5998                           ;lcd.c: 56: lcdInst(0b00000001);
  5999  004020  0E01               	movlw	1
  6000  004022  ECF0  F022         	call	_lcdInst
  6001                           
  6002                           ;lcd.c: 57: _delay((unsigned long)((15)*(32000000/4000.0)));
  6003  004026  0E9C               	movlw	156
  6004  004028  0100               	movlb	0	; () banked
  6005  00402A  6F83               	movwf	??_initLCD& (0+255),b
  6006  00402C  0ED7               	movlw	215
  6007  00402E                     u7027:
  6008  00402E  2EE8               	decfsz	wreg,f,c
  6009  004030  D7FE               	bra	u7027
  6010  004032  2F83               	decfsz	??_initLCD& (0+255),f,b
  6011  004034  D7FC               	bra	u7027
  6012  004036  0012               	return		;funcret
  6013  004038                     __end_of_initLCD:
  6014                           	opt stack 0
  6015                           tblptru	equ	0xFF8
  6016                           tblptrh	equ	0xFF7
  6017                           tblptrl	equ	0xFF6
  6018                           tablat	equ	0xFF5
  6019                           prodh	equ	0xFF4
  6020                           prodl	equ	0xFF3
  6021                           intcon	equ	0xFF2
  6022                           intcon2	equ	0xFF1
  6023                           intcon3	equ	0xFF0
  6024                           postinc0	equ	0xFEE
  6025                           wreg	equ	0xFE8
  6026                           postdec1	equ	0xFE5
  6027                           fsr1l	equ	0xFE1
  6028                           indf2	equ	0xFDF
  6029                           postinc2	equ	0xFDE
  6030                           postdec2	equ	0xFDD
  6031                           fsr2h	equ	0xFDA
  6032                           fsr2l	equ	0xFD9
  6033                           status	equ	0xFD8
  6034                           
  6035 ;; *************** function _UI *****************
  6036 ;; Defined at:
  6037 ;;		line 76 in file "UI.c"
  6038 ;; Parameters:    Size  Location     Type
  6039 ;;		None
  6040 ;; Auto vars:     Size  Location     Type
  6041 ;;  i               1   73[BANK0 ] unsigned char 
  6042 ;;  i               1   85[BANK0 ] unsigned char 
  6043 ;;  i               1   84[BANK0 ] unsigned char 
  6044 ;;  i               1   83[BANK0 ] unsigned char 
  6045 ;;  i               1   82[BANK0 ] unsigned char 
  6046 ;;  i               1   81[BANK0 ] unsigned char 
  6047 ;;  i               1   80[BANK0 ] unsigned char 
  6048 ;;  i               1   79[BANK0 ] unsigned char 
  6049 ;;  i               1   78[BANK0 ] unsigned char 
  6050 ;;  i               1   77[BANK0 ] unsigned char 
  6051 ;;  i               1   76[BANK0 ] unsigned char 
  6052 ;;  i               1   75[BANK0 ] unsigned char 
  6053 ;;  i               1   74[BANK0 ] unsigned char 
  6054 ;;  month           4   86[BANK0 ] unsigned char [4]
  6055 ;;  i               1   72[BANK0 ] unsigned char 
  6056 ;; Return value:  Size  Location     Type
  6057 ;;                  1    wreg      void 
  6058 ;; Registers used:
  6059 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6060 ;; Tracked objects:
  6061 ;;		On entry : 0/0
  6062 ;;		On exit  : 0/0
  6063 ;;		Unchanged: 0/0
  6064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6065 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6066 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6067 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6068 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6069 ;;Total ram usage:       22 bytes
  6070 ;; Hardware stack levels used:    1
  6071 ;; Hardware stack levels required when called:   11
  6072 ;; This function calls:
  6073 ;;		___awdiv
  6074 ;;		___awmod
  6075 ;;		_change_state_to_menu_12
  6076 ;;		_change_state_to_menu_22
  6077 ;;		_lcdInst
  6078 ;;		_printRTC
  6079 ;;		_printf
  6080 ;;		_strcpy
  6081 ;; This function is called by:
  6082 ;;		_main
  6083 ;; This function uses a non-reentrant model
  6084 ;;
  6085                           
  6086                           	psect	text22
  6087  000012                     __ptext22:
  6088                           	opt stack 0
  6089  000012                     _UI:
  6090                           	opt stack 19
  6091                           
  6092                           ;UI.c: 77: if(machine_state == DoneSorting_state){
  6093                           
  6094                           ;incstack = 0
  6095  000012  0E02               	movlw	2
  6096  000014  0100               	movlb	0	; () banked
  6097  000016  19FC               	xorwf	_machine_state& (0+255),w,b
  6098  000018  A4D8               	btfss	status,2,c
  6099  00001A  D075               	goto	l7238
  6100                           
  6101                           ; BSR set to: 0
  6102                           ;UI.c: 78: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6103  00001C  0E01               	movlw	1
  6104  00001E  ECF0  F022         	call	_lcdInst
  6105  000022  0E68               	movlw	104
  6106  000024  0100               	movlb	0	; () banked
  6107  000026  6FC4               	movwf	??_UI& (0+255),b
  6108  000028  0EE4               	movlw	228
  6109  00002A                     u7037:
  6110  00002A  2EE8               	decfsz	wreg,f,c
  6111  00002C  D7FE               	bra	u7037
  6112  00002E  2FC4               	decfsz	??_UI& (0+255),f,b
  6113  000030  D7FC               	bra	u7037
  6114  000032  F000               	nop	
  6115                           
  6116                           ;UI.c: 79: lcdInst(0b10000000);;
  6117  000034  0E80               	movlw	128
  6118  000036  ECF0  F022         	call	_lcdInst
  6119                           
  6120                           ;UI.c: 80: printf("RESULTS IN LOG %d", sel+1);
  6121  00003A  0ECB               	movlw	low STR_1
  6122  00003C  0100               	movlb	0	; () banked
  6123  00003E  6F8E               	movwf	printf@f& (0+255),b
  6124  000040  0EFB               	movlw	high STR_1
  6125  000042  0100               	movlb	0	; () banked
  6126  000044  6F8F               	movwf	(printf@f+1)& (0+255),b
  6127  000046  0E01               	movlw	1
  6128  000048  0100               	movlb	0	; () banked
  6129  00004A  25FD               	addwf	_sel& (0+255),w,b
  6130  00004C  0100               	movlb	0	; () banked
  6131  00004E  6F90               	movwf	(?_printf+2)& (0+255),b
  6132  000050  0100               	movlb	0	; () banked
  6133  000052  6B91               	clrf	(?_printf+3)& (0+255),b
  6134  000054  0E00               	movlw	0
  6135  000056  2391               	addwfc	(?_printf+3)& (0+255),f,b
  6136  000058  EC9C  F008         	call	_printf	;wreg free
  6137                           
  6138                           ;UI.c: 81: lcdInst(0b11000000);;
  6139  00005C  0EC0               	movlw	192
  6140  00005E  ECF0  F022         	call	_lcdInst
  6141                           
  6142                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  6143  000062  0E0E               	movlw	14
  6144  000064  0100               	movlb	0	; () banked
  6145  000066  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6146  000068  0E10               	movlw	16
  6147  00006A  6F82               	movwf	___awmod@divisor& (0+255),b
  6148  00006C  C0F8  F080         	movff	_total_time,___awmod@dividend
  6149  000070  C0F9  F081         	movff	_total_time+1,___awmod@dividend+1
  6150  000074  ECA8  F01B         	call	___awmod	;wreg free
  6151  000078  C080  F0C6         	movff	?___awmod,_UI$2246
  6152  00007C  C081  F0C7         	movff	?___awmod+1,_UI$2246+1
  6153                           
  6154                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  6155  000080  0E2D               	movlw	low STR_2
  6156  000082  0100               	movlb	0	; () banked
  6157  000084  6F8E               	movwf	printf@f& (0+255),b
  6158  000086  0EFF               	movlw	high STR_2
  6159  000088  0100               	movlb	0	; () banked
  6160  00008A  6F8F               	movwf	(printf@f+1)& (0+255),b
  6161  00008C  0E0E               	movlw	14
  6162  00008E  0100               	movlb	0	; () banked
  6163  000090  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6164  000092  0E10               	movlw	16
  6165  000094  6F82               	movwf	___awmod@divisor& (0+255),b
  6166  000096  C0F8  F080         	movff	_total_time,___awmod@dividend
  6167  00009A  C0F9  F081         	movff	_total_time+1,___awmod@dividend+1
  6168  00009E  ECA8  F01B         	call	___awmod	;wreg free
  6169  0000A2  C080  F086         	movff	?___awmod,___awdiv@dividend
  6170  0000A6  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  6171  0000AA  0E00               	movlw	0
  6172  0000AC  0100               	movlb	0	; () banked
  6173  0000AE  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  6174  0000B0  0E3C               	movlw	60
  6175  0000B2  6F88               	movwf	___awdiv@divisor& (0+255),b
  6176  0000B4  EC40  F01A         	call	___awdiv	;wreg free
  6177  0000B8  C086  F090         	movff	?___awdiv,?_printf+2
  6178  0000BC  C087  F091         	movff	?___awdiv+1,?_printf+3
  6179  0000C0  C0C6  F080         	movff	_UI$2246,___awmod@dividend
  6180  0000C4  C0C7  F081         	movff	_UI$2246+1,___awmod@dividend+1
  6181  0000C8  0E00               	movlw	0
  6182  0000CA  0100               	movlb	0	; () banked
  6183  0000CC  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6184  0000CE  0E3C               	movlw	60
  6185  0000D0  6F82               	movwf	___awmod@divisor& (0+255),b
  6186  0000D2  ECA8  F01B         	call	___awmod	;wreg free
  6187  0000D6  C080  F092         	movff	?___awmod,?_printf+4
  6188  0000DA  C081  F093         	movff	?___awmod+1,?_printf+5
  6189  0000DE  EC9C  F008         	call	_printf	;wreg free
  6190                           
  6191                           ;UI.c: 83: machine_state = UI_state;
  6192  0000E2  0E00               	movlw	0
  6193  0000E4  0100               	movlb	0	; () banked
  6194  0000E6  6FFC               	movwf	_machine_state& (0+255),b
  6195  0000E8                     l180:
  6196  0000E8  A281               	btfss	3969,1,c	;volatile
  6197  0000EA  D7FE               	goto	l180
  6198                           
  6199                           ;UI.c: 86: }
  6200                           ;UI.c: 87: if(cur_state==12){
  6201  0000EC  0E0C               	movlw	12
  6202  0000EE  0100               	movlb	0	; () banked
  6203  0000F0  19E0               	xorwf	_cur_state& (0+255),w,b
  6204  0000F2  0100               	movlb	0	; () banked
  6205  0000F4  11E1               	iorwf	(_cur_state+1)& (0+255),w,b
  6206  0000F6  A4D8               	btfss	status,2,c
  6207  0000F8  D003               	goto	l7236
  6208                           
  6209                           ; BSR set to: 0
  6210                           ;UI.c: 88: change_state_to_menu_12();
  6211  0000FA  EC59  F020         	call	_change_state_to_menu_12	;wreg free
  6212                           
  6213                           ;UI.c: 89: }
  6214  0000FE  D3D5               	goto	l7558
  6215  000100                     l7236:
  6216                           
  6217                           ;UI.c: 90: else{
  6218                           ;UI.c: 91: change_state_to_menu_22();
  6219  000100  EC3D  F020         	call	_change_state_to_menu_22	;wreg free
  6220                           
  6221                           ;UI.c: 92: }
  6222                           ;UI.c: 93: }
  6223  000104  D3D2               	goto	l7558
  6224  000106                     l7238:
  6225                           
  6226                           ;UI.c: 94: else if(cur_state == 0){
  6227  000106  0100               	movlb	0	; () banked
  6228  000108  51E0               	movf	_cur_state& (0+255),w,b
  6229  00010A  0100               	movlb	0	; () banked
  6230  00010C  11E1               	iorwf	(_cur_state+1)& (0+255),w,b
  6231  00010E  A4D8               	btfss	status,2,c
  6232  000110  D3CC               	goto	l7558
  6233                           
  6234                           ; BSR set to: 0
  6235                           ;UI.c: 95: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
  6236  000112  0E00               	movlw	0
  6237  000114  0100               	movlb	0	; () banked
  6238  000116  6FC8               	movwf	UI@i& (0+255),b
  6239  000118                     l7242:
  6240                           
  6241                           ; BSR set to: 0
  6242  000118  0E63               	movlw	99
  6243  00011A  0100               	movlb	0	; () banked
  6244  00011C  65C8               	cpfsgt	UI@i& (0+255),b
  6245  00011E  D001               	goto	l7246
  6246  000120  D00C               	goto	l7250
  6247  000122                     l7246:
  6248                           
  6249                           ; BSR set to: 0
  6250  000122  0E68               	movlw	104
  6251  000124  0100               	movlb	0	; () banked
  6252  000126  6FC4               	movwf	??_UI& (0+255),b
  6253  000128  0EE4               	movlw	228
  6254  00012A                     u7047:
  6255  00012A  2EE8               	decfsz	wreg,f,c
  6256  00012C  D7FE               	bra	u7047
  6257  00012E  2FC4               	decfsz	??_UI& (0+255),f,b
  6258  000130  D7FC               	bra	u7047
  6259  000132  F000               	nop	
  6260  000134  0100               	movlb	0	; () banked
  6261  000136  2BC8               	incf	UI@i& (0+255),f,b
  6262  000138  D7EF               	goto	l7242
  6263  00013A                     l7250:
  6264                           
  6265                           ; BSR set to: 0
  6266                           ;UI.c: 96: if(cur_state == 0){
  6267  00013A  0100               	movlb	0	; () banked
  6268  00013C  51E0               	movf	_cur_state& (0+255),w,b
  6269  00013E  0100               	movlb	0	; () banked
  6270  000140  11E1               	iorwf	(_cur_state+1)& (0+255),w,b
  6271  000142  A4D8               	btfss	status,2,c
  6272  000144  D3B2               	goto	l7558
  6273                           
  6274                           ; BSR set to: 0
  6275                           ;UI.c: 97: printRTC();
  6276  000146  ECE7  F00D         	call	_printRTC	;wreg free
  6277                           
  6278                           ;UI.c: 98: }
  6279                           ;UI.c: 99: }
  6280                           ;UI.c: 100: while(logstate){
  6281  00014A  D3AF               	goto	l7558
  6282  00014C                     l7254:
  6283                           
  6284                           ;UI.c: 102: if(!log_completion){
  6285  00014C  0100               	movlb	0	; () banked
  6286  00014E  51E8               	movf	_log_completion& (0+255),w,b
  6287  000150  0100               	movlb	0	; () banked
  6288  000152  11E9               	iorwf	(_log_completion+1)& (0+255),w,b
  6289  000154  A4D8               	btfss	status,2,c
  6290  000156  D041               	goto	l7284
  6291                           
  6292                           ; BSR set to: 0
  6293                           ;UI.c: 103: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6294  000158  0E01               	movlw	1
  6295  00015A  ECF0  F022         	call	_lcdInst
  6296  00015E  0E68               	movlw	104
  6297  000160  0100               	movlb	0	; () banked
  6298  000162  6FC4               	movwf	??_UI& (0+255),b
  6299  000164  0EE4               	movlw	228
  6300  000166                     u7057:
  6301  000166  2EE8               	decfsz	wreg,f,c
  6302  000168  D7FE               	bra	u7057
  6303  00016A  2FC4               	decfsz	??_UI& (0+255),f,b
  6304  00016C  D7FC               	bra	u7057
  6305  00016E  F000               	nop	
  6306                           
  6307                           ;UI.c: 104: lcdInst(0b10000000);;
  6308  000170  0E80               	movlw	128
  6309  000172  ECF0  F022         	call	_lcdInst
  6310                           
  6311                           ;UI.c: 105: printf("-- LOG %2d HERE--", log);
  6312  000176  0EB9               	movlw	low STR_3
  6313  000178  0100               	movlb	0	; () banked
  6314  00017A  6F8E               	movwf	printf@f& (0+255),b
  6315  00017C  0EFB               	movlw	high STR_3
  6316  00017E  0100               	movlb	0	; () banked
  6317  000180  6F8F               	movwf	(printf@f+1)& (0+255),b
  6318  000182  C0E6  F090         	movff	_log,?_printf+2
  6319  000186  C0E7  F091         	movff	_log+1,?_printf+3
  6320  00018A  EC9C  F008         	call	_printf	;wreg free
  6321                           
  6322                           ;UI.c: 106: lcdInst(0b11000000);;
  6323  00018E  0EC0               	movlw	192
  6324  000190  ECF0  F022         	call	_lcdInst
  6325                           
  6326                           ;UI.c: 107: printf("DIDN'T COMPLETE");
  6327  000194  0E50               	movlw	low STR_4
  6328  000196  0100               	movlb	0	; () banked
  6329  000198  6F8E               	movwf	printf@f& (0+255),b
  6330  00019A  0EFE               	movlw	high STR_4
  6331  00019C  0100               	movlb	0	; () banked
  6332  00019E  6F8F               	movwf	(printf@f+1)& (0+255),b
  6333  0001A0  EC9C  F008         	call	_printf	;wreg free
  6334  0001A4                     l7268:
  6335  0001A4  0E00               	movlw	0
  6336  0001A6  0100               	movlb	0	; () banked
  6337  0001A8  6FC9               	movwf	UI@i_409& (0+255),b
  6338  0001AA                     l7270:
  6339                           
  6340                           ; BSR set to: 0
  6341  0001AA  0E63               	movlw	99
  6342  0001AC  0100               	movlb	0	; () banked
  6343  0001AE  65C9               	cpfsgt	UI@i_409& (0+255),b
  6344  0001B0  D001               	goto	l7274
  6345  0001B2  D00C               	goto	l7278
  6346  0001B4                     l7274:
  6347                           
  6348                           ; BSR set to: 0
  6349  0001B4  0E68               	movlw	104
  6350  0001B6  0100               	movlb	0	; () banked
  6351  0001B8  6FC4               	movwf	??_UI& (0+255),b
  6352  0001BA  0EE4               	movlw	228
  6353  0001BC                     u7067:
  6354  0001BC  2EE8               	decfsz	wreg,f,c
  6355  0001BE  D7FE               	bra	u7067
  6356  0001C0  2FC4               	decfsz	??_UI& (0+255),f,b
  6357  0001C2  D7FC               	bra	u7067
  6358  0001C4  F000               	nop	
  6359  0001C6  0100               	movlb	0	; () banked
  6360  0001C8  2BC9               	incf	UI@i_409& (0+255),f,b
  6361  0001CA  D7EF               	goto	l7270
  6362  0001CC                     l7278:
  6363                           
  6364                           ; BSR set to: 0
  6365  0001CC  0100               	movlb	0	; () banked
  6366  0001CE  51F6               	movf	_logstate& (0+255),w,b
  6367  0001D0  0100               	movlb	0	; () banked
  6368  0001D2  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6369  0001D4  B4D8               	btfsc	status,2,c
  6370  0001D6  0012               	return	
  6371  0001D8  D7E5               	goto	l7268
  6372  0001DA                     l7284:
  6373                           
  6374                           ; BSR set to: 0
  6375                           ;UI.c: 111: else{
  6376                           ;UI.c: 112: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6377  0001DA  0E01               	movlw	1
  6378  0001DC  ECF0  F022         	call	_lcdInst
  6379  0001E0  0E68               	movlw	104
  6380  0001E2  0100               	movlb	0	; () banked
  6381  0001E4  6FC4               	movwf	??_UI& (0+255),b
  6382  0001E6  0EE4               	movlw	228
  6383  0001E8                     u7077:
  6384  0001E8  2EE8               	decfsz	wreg,f,c
  6385  0001EA  D7FE               	bra	u7077
  6386  0001EC  2FC4               	decfsz	??_UI& (0+255),f,b
  6387  0001EE  D7FC               	bra	u7077
  6388  0001F0  F000               	nop	
  6389                           
  6390                           ;UI.c: 113: lcdInst(0b10000000);;
  6391  0001F2  0E80               	movlw	128
  6392  0001F4  ECF0  F022         	call	_lcdInst
  6393                           
  6394                           ;UI.c: 114: printf("-- LOG %2d HERE--", log);
  6395  0001F8  0EB9               	movlw	low STR_3
  6396  0001FA  0100               	movlb	0	; () banked
  6397  0001FC  6F8E               	movwf	printf@f& (0+255),b
  6398  0001FE  0EFB               	movlw	high STR_3
  6399  000200  0100               	movlb	0	; () banked
  6400  000202  6F8F               	movwf	(printf@f+1)& (0+255),b
  6401  000204  C0E6  F090         	movff	_log,?_printf+2
  6402  000208  C0E7  F091         	movff	_log+1,?_printf+3
  6403  00020C  EC9C  F008         	call	_printf	;wreg free
  6404                           
  6405                           ;UI.c: 115: lcdInst(0b11000000);;
  6406  000210  0EC0               	movlw	192
  6407  000212  ECF0  F022         	call	_lcdInst
  6408                           
  6409                           ;UI.c: 116: printf("PAUSE < | BACK >");
  6410  000216  0E0E               	movlw	low STR_6
  6411  000218  0100               	movlb	0	; () banked
  6412  00021A  6F8E               	movwf	printf@f& (0+255),b
  6413  00021C  0EFE               	movlw	high STR_6
  6414  00021E  0100               	movlb	0	; () banked
  6415  000220  6F8F               	movwf	(printf@f+1)& (0+255),b
  6416  000222  EC9C  F008         	call	_printf	;wreg free
  6417                           
  6418                           ;UI.c: 118: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6419  000226  0E00               	movlw	0
  6420  000228  0100               	movlb	0	; () banked
  6421  00022A  6FCA               	movwf	UI@i_412& (0+255),b
  6422  00022C                     l7298:
  6423                           
  6424                           ; BSR set to: 0
  6425  00022C  0E63               	movlw	99
  6426  00022E  0100               	movlb	0	; () banked
  6427  000230  65CA               	cpfsgt	UI@i_412& (0+255),b
  6428  000232  D001               	goto	l7302
  6429  000234  D00C               	goto	l7306
  6430  000236                     l7302:
  6431                           
  6432                           ; BSR set to: 0
  6433  000236  0E68               	movlw	104
  6434  000238  0100               	movlb	0	; () banked
  6435  00023A  6FC4               	movwf	??_UI& (0+255),b
  6436  00023C  0EE4               	movlw	228
  6437  00023E                     u7087:
  6438  00023E  2EE8               	decfsz	wreg,f,c
  6439  000240  D7FE               	bra	u7087
  6440  000242  2FC4               	decfsz	??_UI& (0+255),f,b
  6441  000244  D7FC               	bra	u7087
  6442  000246  F000               	nop	
  6443  000248  0100               	movlb	0	; () banked
  6444  00024A  2BCA               	incf	UI@i_412& (0+255),f,b
  6445  00024C  D7EF               	goto	l7298
  6446  00024E                     l7306:
  6447                           
  6448                           ; BSR set to: 0
  6449  00024E  0100               	movlb	0	; () banked
  6450  000250  51F6               	movf	_logstate& (0+255),w,b
  6451  000252  0100               	movlb	0	; () banked
  6452  000254  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6453  000256  B4D8               	btfsc	status,2,c
  6454  000258  0012               	return	
  6455                           
  6456                           ; BSR set to: 0
  6457                           ;UI.c: 119: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6458                           
  6459                           ; BSR set to: 0
  6460                           
  6461                           ; BSR set to: 0
  6462  00025A  0E00               	movlw	0
  6463  00025C  0100               	movlb	0	; () banked
  6464  00025E  6FCB               	movwf	UI@i_413& (0+255),b
  6465  000260                     l7312:
  6466                           
  6467                           ; BSR set to: 0
  6468  000260  0E63               	movlw	99
  6469  000262  0100               	movlb	0	; () banked
  6470  000264  65CB               	cpfsgt	UI@i_413& (0+255),b
  6471  000266  D001               	goto	l7316
  6472  000268  D00C               	goto	l7320
  6473  00026A                     l7316:
  6474                           
  6475                           ; BSR set to: 0
  6476  00026A  0E68               	movlw	104
  6477  00026C  0100               	movlb	0	; () banked
  6478  00026E  6FC4               	movwf	??_UI& (0+255),b
  6479  000270  0EE4               	movlw	228
  6480  000272                     u7097:
  6481  000272  2EE8               	decfsz	wreg,f,c
  6482  000274  D7FE               	bra	u7097
  6483  000276  2FC4               	decfsz	??_UI& (0+255),f,b
  6484  000278  D7FC               	bra	u7097
  6485  00027A  F000               	nop	
  6486  00027C  0100               	movlb	0	; () banked
  6487  00027E  2BCB               	incf	UI@i_413& (0+255),f,b
  6488  000280  D7EF               	goto	l7312
  6489  000282                     l7320:
  6490                           
  6491                           ; BSR set to: 0
  6492  000282  0100               	movlb	0	; () banked
  6493  000284  51F6               	movf	_logstate& (0+255),w,b
  6494  000286  0100               	movlb	0	; () banked
  6495  000288  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6496  00028A  B4D8               	btfsc	status,2,c
  6497  00028C  0012               	return	
  6498                           
  6499                           ; BSR set to: 0
  6500                           ;UI.c: 121: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6501                           
  6502                           ; BSR set to: 0
  6503                           
  6504                           ; BSR set to: 0
  6505  00028E  0E01               	movlw	1
  6506  000290  ECF0  F022         	call	_lcdInst
  6507  000294  0E68               	movlw	104
  6508  000296  0100               	movlb	0	; () banked
  6509  000298  6FC4               	movwf	??_UI& (0+255),b
  6510  00029A  0EE4               	movlw	228
  6511  00029C                     u7107:
  6512  00029C  2EE8               	decfsz	wreg,f,c
  6513  00029E  D7FE               	bra	u7107
  6514  0002A0  2FC4               	decfsz	??_UI& (0+255),f,b
  6515  0002A2  D7FC               	bra	u7107
  6516  0002A4  F000               	nop	
  6517                           
  6518                           ;UI.c: 122: lcdInst(0b10000000);;
  6519  0002A6  0E80               	movlw	128
  6520  0002A8  ECF0  F022         	call	_lcdInst
  6521                           
  6522                           ;UI.c: 123: printf("START:");
  6523  0002AC  0EC3               	movlw	low STR_7
  6524  0002AE  0100               	movlb	0	; () banked
  6525  0002B0  6F8E               	movwf	printf@f& (0+255),b
  6526  0002B2  0EFF               	movlw	high STR_7
  6527  0002B4  0100               	movlb	0	; () banked
  6528  0002B6  6F8F               	movwf	(printf@f+1)& (0+255),b
  6529  0002B8  EC9C  F008         	call	_printf	;wreg free
  6530                           
  6531                           ;UI.c: 124: lcdInst(0b11000000);;
  6532  0002BC  0EC0               	movlw	192
  6533  0002BE  ECF0  F022         	call	_lcdInst
  6534                           
  6535                           ;UI.c: 125: char month[] = "MMM";
  6536  0002C2  C12F  F0D6         	movff	UI@F3223,UI@month
  6537  0002C6  C130  F0D7         	movff	UI@F3223+1,UI@month+1
  6538  0002CA  C131  F0D8         	movff	UI@F3223+2,UI@month+2
  6539  0002CE  C132  F0D9         	movff	UI@F3223+3,UI@month+3
  6540                           
  6541                           ;UI.c: 126: switch(log_startTime[5]){
  6542  0002D2  D0C3               	goto	l7364
  6543  0002D4                     l7336:
  6544                           
  6545                           ;UI.c: 128: strcpy(month, "JAN");
  6546  0002D4  0ED6               	movlw	low UI@month
  6547  0002D6  0100               	movlb	0	; () banked
  6548  0002D8  6F80               	movwf	strcpy@to& (0+255),b
  6549  0002DA  0E00               	movlw	high UI@month
  6550  0002DC  0100               	movlb	0	; () banked
  6551  0002DE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6552  0002E0  0EDA               	movlw	low STR_8
  6553  0002E2  0100               	movlb	0	; () banked
  6554  0002E4  6F82               	movwf	strcpy@from& (0+255),b
  6555  0002E6  0EFF               	movlw	high STR_8
  6556  0002E8  0100               	movlb	0	; () banked
  6557  0002EA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6558  0002EC  EC75  F020         	call	_strcpy	;wreg free
  6559                           
  6560                           ;UI.c: 129: break;
  6561  0002F0  D0E6               	goto	l7366
  6562  0002F2                     l7338:
  6563                           
  6564                           ;UI.c: 131: strcpy(month, "FEB");
  6565  0002F2  0ED6               	movlw	low UI@month
  6566  0002F4  0100               	movlb	0	; () banked
  6567  0002F6  6F80               	movwf	strcpy@to& (0+255),b
  6568  0002F8  0E00               	movlw	high UI@month
  6569  0002FA  0100               	movlb	0	; () banked
  6570  0002FC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6571  0002FE  0ECA               	movlw	low STR_9
  6572  000300  0100               	movlb	0	; () banked
  6573  000302  6F82               	movwf	strcpy@from& (0+255),b
  6574  000304  0EFF               	movlw	high STR_9
  6575  000306  0100               	movlb	0	; () banked
  6576  000308  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6577  00030A  EC75  F020         	call	_strcpy	;wreg free
  6578                           
  6579                           ;UI.c: 132: break;
  6580  00030E  D0D7               	goto	l7366
  6581  000310                     l7340:
  6582                           
  6583                           ;UI.c: 134: strcpy(month, "MAR");
  6584  000310  0ED6               	movlw	low UI@month
  6585  000312  0100               	movlb	0	; () banked
  6586  000314  6F80               	movwf	strcpy@to& (0+255),b
  6587  000316  0E00               	movlw	high UI@month
  6588  000318  0100               	movlb	0	; () banked
  6589  00031A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6590  00031C  0EE6               	movlw	low STR_10
  6591  00031E  0100               	movlb	0	; () banked
  6592  000320  6F82               	movwf	strcpy@from& (0+255),b
  6593  000322  0EFF               	movlw	high STR_10
  6594  000324  0100               	movlb	0	; () banked
  6595  000326  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6596  000328  EC75  F020         	call	_strcpy	;wreg free
  6597                           
  6598                           ;UI.c: 135: break;
  6599  00032C  D0C8               	goto	l7366
  6600  00032E                     l7342:
  6601                           
  6602                           ;UI.c: 137: strcpy(month, "APR");
  6603  00032E  0ED6               	movlw	low UI@month
  6604  000330  0100               	movlb	0	; () banked
  6605  000332  6F80               	movwf	strcpy@to& (0+255),b
  6606  000334  0E00               	movlw	high UI@month
  6607  000336  0100               	movlb	0	; () banked
  6608  000338  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6609  00033A  0EEA               	movlw	low STR_11
  6610  00033C  0100               	movlb	0	; () banked
  6611  00033E  6F82               	movwf	strcpy@from& (0+255),b
  6612  000340  0EFF               	movlw	high STR_11
  6613  000342  0100               	movlb	0	; () banked
  6614  000344  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6615  000346  EC75  F020         	call	_strcpy	;wreg free
  6616                           
  6617                           ;UI.c: 138: break;
  6618  00034A  D0B9               	goto	l7366
  6619  00034C                     l7344:
  6620                           
  6621                           ;UI.c: 140: strcpy(month, "MAY");
  6622  00034C  0ED6               	movlw	low UI@month
  6623  00034E  0100               	movlb	0	; () banked
  6624  000350  6F80               	movwf	strcpy@to& (0+255),b
  6625  000352  0E00               	movlw	high UI@month
  6626  000354  0100               	movlb	0	; () banked
  6627  000356  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6628  000358  0EFA               	movlw	low STR_12
  6629  00035A  0100               	movlb	0	; () banked
  6630  00035C  6F82               	movwf	strcpy@from& (0+255),b
  6631  00035E  0EFF               	movlw	high STR_12
  6632  000360  0100               	movlb	0	; () banked
  6633  000362  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6634  000364  EC75  F020         	call	_strcpy	;wreg free
  6635                           
  6636                           ;UI.c: 141: break;
  6637  000368  D0AA               	goto	l7366
  6638  00036A                     l7346:
  6639                           
  6640                           ;UI.c: 143: strcpy(month, "JUN");
  6641  00036A  0ED6               	movlw	low UI@month
  6642  00036C  0100               	movlb	0	; () banked
  6643  00036E  6F80               	movwf	strcpy@to& (0+255),b
  6644  000370  0E00               	movlw	high UI@month
  6645  000372  0100               	movlb	0	; () banked
  6646  000374  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6647  000376  0EDE               	movlw	low STR_13
  6648  000378  0100               	movlb	0	; () banked
  6649  00037A  6F82               	movwf	strcpy@from& (0+255),b
  6650  00037C  0EFF               	movlw	high STR_13
  6651  00037E  0100               	movlb	0	; () banked
  6652  000380  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6653  000382  EC75  F020         	call	_strcpy	;wreg free
  6654                           
  6655                           ;UI.c: 144: break;
  6656  000386  D09B               	goto	l7366
  6657  000388                     l7348:
  6658                           
  6659                           ;UI.c: 146: strcpy(month, "JUL");
  6660  000388  0ED6               	movlw	low UI@month
  6661  00038A  0100               	movlb	0	; () banked
  6662  00038C  6F80               	movwf	strcpy@to& (0+255),b
  6663  00038E  0E00               	movlw	high UI@month
  6664  000390  0100               	movlb	0	; () banked
  6665  000392  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6666  000394  0ED6               	movlw	low STR_14
  6667  000396  0100               	movlb	0	; () banked
  6668  000398  6F82               	movwf	strcpy@from& (0+255),b
  6669  00039A  0EFF               	movlw	high STR_14
  6670  00039C  0100               	movlb	0	; () banked
  6671  00039E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6672  0003A0  EC75  F020         	call	_strcpy	;wreg free
  6673                           
  6674                           ;UI.c: 147: break;
  6675  0003A4  D08C               	goto	l7366
  6676  0003A6                     l7350:
  6677                           
  6678                           ;UI.c: 149: strcpy(month, "AUG");
  6679  0003A6  0ED6               	movlw	low UI@month
  6680  0003A8  0100               	movlb	0	; () banked
  6681  0003AA  6F80               	movwf	strcpy@to& (0+255),b
  6682  0003AC  0E00               	movlw	high UI@month
  6683  0003AE  0100               	movlb	0	; () banked
  6684  0003B0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6685  0003B2  0ED2               	movlw	low STR_15
  6686  0003B4  0100               	movlb	0	; () banked
  6687  0003B6  6F82               	movwf	strcpy@from& (0+255),b
  6688  0003B8  0EFF               	movlw	high STR_15
  6689  0003BA  0100               	movlb	0	; () banked
  6690  0003BC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6691  0003BE  EC75  F020         	call	_strcpy	;wreg free
  6692                           
  6693                           ;UI.c: 150: break;
  6694  0003C2  D07D               	goto	l7366
  6695  0003C4                     l7352:
  6696                           
  6697                           ;UI.c: 152: strcpy(month, "SEP");
  6698  0003C4  0ED6               	movlw	low UI@month
  6699  0003C6  0100               	movlb	0	; () banked
  6700  0003C8  6F80               	movwf	strcpy@to& (0+255),b
  6701  0003CA  0E00               	movlw	high UI@month
  6702  0003CC  0100               	movlb	0	; () banked
  6703  0003CE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6704  0003D0  0EE2               	movlw	low STR_16
  6705  0003D2  0100               	movlb	0	; () banked
  6706  0003D4  6F82               	movwf	strcpy@from& (0+255),b
  6707  0003D6  0EFF               	movlw	high STR_16
  6708  0003D8  0100               	movlb	0	; () banked
  6709  0003DA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6710  0003DC  EC75  F020         	call	_strcpy	;wreg free
  6711                           
  6712                           ;UI.c: 153: break;
  6713  0003E0  D06E               	goto	l7366
  6714  0003E2                     l7354:
  6715                           
  6716                           ;UI.c: 155: strcpy(month, "OCT");
  6717  0003E2  0ED6               	movlw	low UI@month
  6718  0003E4  0100               	movlb	0	; () banked
  6719  0003E6  6F80               	movwf	strcpy@to& (0+255),b
  6720  0003E8  0E00               	movlw	high UI@month
  6721  0003EA  0100               	movlb	0	; () banked
  6722  0003EC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6723  0003EE  0EF2               	movlw	low STR_17
  6724  0003F0  0100               	movlb	0	; () banked
  6725  0003F2  6F82               	movwf	strcpy@from& (0+255),b
  6726  0003F4  0EFF               	movlw	high STR_17
  6727  0003F6  0100               	movlb	0	; () banked
  6728  0003F8  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6729  0003FA  EC75  F020         	call	_strcpy	;wreg free
  6730                           
  6731                           ;UI.c: 156: break;
  6732  0003FE  D05F               	goto	l7366
  6733  000400                     l7356:
  6734                           
  6735                           ;UI.c: 158: strcpy(month, "NOV");
  6736  000400  0ED6               	movlw	low UI@month
  6737  000402  0100               	movlb	0	; () banked
  6738  000404  6F80               	movwf	strcpy@to& (0+255),b
  6739  000406  0E00               	movlw	high UI@month
  6740  000408  0100               	movlb	0	; () banked
  6741  00040A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6742  00040C  0EF6               	movlw	low STR_18
  6743  00040E  0100               	movlb	0	; () banked
  6744  000410  6F82               	movwf	strcpy@from& (0+255),b
  6745  000412  0EFF               	movlw	high STR_18
  6746  000414  0100               	movlb	0	; () banked
  6747  000416  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6748  000418  EC75  F020         	call	_strcpy	;wreg free
  6749                           
  6750                           ;UI.c: 159: break;
  6751  00041C  D050               	goto	l7366
  6752  00041E                     l7358:
  6753                           
  6754                           ;UI.c: 161: strcpy(month, "DEC");
  6755  00041E  0ED6               	movlw	low UI@month
  6756  000420  0100               	movlb	0	; () banked
  6757  000422  6F80               	movwf	strcpy@to& (0+255),b
  6758  000424  0E00               	movlw	high UI@month
  6759  000426  0100               	movlb	0	; () banked
  6760  000428  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6761  00042A  0ECE               	movlw	low STR_19
  6762  00042C  0100               	movlb	0	; () banked
  6763  00042E  6F82               	movwf	strcpy@from& (0+255),b
  6764  000430  0EFF               	movlw	high STR_19
  6765  000432  0100               	movlb	0	; () banked
  6766  000434  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6767  000436  EC75  F020         	call	_strcpy	;wreg free
  6768                           
  6769                           ;UI.c: 162: break;
  6770  00043A  D041               	goto	l7366
  6771  00043C                     l7360:
  6772                           
  6773                           ;UI.c: 164: strcpy(month, "ERR");
  6774  00043C  0ED6               	movlw	low UI@month
  6775  00043E  0100               	movlb	0	; () banked
  6776  000440  6F80               	movwf	strcpy@to& (0+255),b
  6777  000442  0E00               	movlw	high UI@month
  6778  000444  0100               	movlb	0	; () banked
  6779  000446  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6780  000448  0EEE               	movlw	low STR_20
  6781  00044A  0100               	movlb	0	; () banked
  6782  00044C  6F82               	movwf	strcpy@from& (0+255),b
  6783  00044E  0EFF               	movlw	high STR_20
  6784  000450  0100               	movlb	0	; () banked
  6785  000452  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6786  000454  EC75  F020         	call	_strcpy	;wreg free
  6787                           
  6788                           ;UI.c: 166: }
  6789                           
  6790                           ;UI.c: 165: break;
  6791  000458  D032               	goto	l7366
  6792  00045A                     l7364:
  6793  00045A  EE21  F00A         	lfsr	2,_log_startTime+10
  6794  00045E  CFDE F0C4          	movff	postinc2,??_UI
  6795  000462  CFDD F0C5          	movff	postdec2,??_UI+1
  6796                           
  6797                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6798                           ; Switch size 1, requested type "space"
  6799                           ; Number of cases is 1, Range of values is 0 to 0
  6800                           ; switch strategies available:
  6801                           ; Name         Instructions Cycles
  6802                           ; simple_byte            4     3 (average)
  6803                           ;	Chosen strategy is simple_byte
  6804  000466  0100               	movlb	0	; () banked
  6805  000468  51C5               	movf	(??_UI+1)& (0+255),w,b
  6806  00046A  0A00               	xorlw	0	; case 0
  6807  00046C  A4D8               	btfss	status,2,c
  6808  00046E  D7E6               	goto	l7360
  6809                           
  6810                           ; BSR set to: 0
  6811                           ; Switch size 1, requested type "space"
  6812                           ; Number of cases is 12, Range of values is 1 to 12
  6813                           ; switch strategies available:
  6814                           ; Name         Instructions Cycles
  6815                           ; simple_byte           37    19 (average)
  6816                           ;	Chosen strategy is simple_byte
  6817  000470  0100               	movlb	0	; () banked
  6818  000472  51C4               	movf	??_UI& (0+255),w,b
  6819  000474  0A01               	xorlw	1	; case 1
  6820  000476  B4D8               	btfsc	status,2,c
  6821  000478  D72D               	goto	l7336
  6822  00047A  0A03               	xorlw	3	; case 2
  6823  00047C  B4D8               	btfsc	status,2,c
  6824  00047E  D739               	goto	l7338
  6825  000480  0A01               	xorlw	1	; case 3
  6826  000482  B4D8               	btfsc	status,2,c
  6827  000484  D745               	goto	l7340
  6828  000486  0A07               	xorlw	7	; case 4
  6829  000488  B4D8               	btfsc	status,2,c
  6830  00048A  D751               	goto	l7342
  6831  00048C  0A01               	xorlw	1	; case 5
  6832  00048E  B4D8               	btfsc	status,2,c
  6833  000490  D75D               	goto	l7344
  6834  000492  0A03               	xorlw	3	; case 6
  6835  000494  B4D8               	btfsc	status,2,c
  6836  000496  D769               	goto	l7346
  6837  000498  0A01               	xorlw	1	; case 7
  6838  00049A  B4D8               	btfsc	status,2,c
  6839  00049C  D775               	goto	l7348
  6840  00049E  0A0F               	xorlw	15	; case 8
  6841  0004A0  B4D8               	btfsc	status,2,c
  6842  0004A2  D781               	goto	l7350
  6843  0004A4  0A01               	xorlw	1	; case 9
  6844  0004A6  B4D8               	btfsc	status,2,c
  6845  0004A8  D78D               	goto	l7352
  6846  0004AA  0A03               	xorlw	3	; case 10
  6847  0004AC  B4D8               	btfsc	status,2,c
  6848  0004AE  D799               	goto	l7354
  6849  0004B0  0A01               	xorlw	1	; case 11
  6850  0004B2  B4D8               	btfsc	status,2,c
  6851  0004B4  D7A5               	goto	l7356
  6852  0004B6  0A07               	xorlw	7	; case 12
  6853  0004B8  B4D8               	btfsc	status,2,c
  6854  0004BA  D7B1               	goto	l7358
  6855  0004BC  D7BF               	goto	l7360
  6856  0004BE                     l7366:
  6857                           
  6858                           ;UI.c: 167: printf("%02d%s | %02d:%02d:%02d", log_startTime[4],month,log_startTime[2],lo
      +                          g_startTime[1],log_startTime[0]);
  6859  0004BE  0E42               	movlw	low STR_21
  6860  0004C0  0100               	movlb	0	; () banked
  6861  0004C2  6F8E               	movwf	printf@f& (0+255),b
  6862  0004C4  0EFB               	movlw	high STR_21
  6863  0004C6  0100               	movlb	0	; () banked
  6864  0004C8  6F8F               	movwf	(printf@f+1)& (0+255),b
  6865  0004CA  C108  F090         	movff	_log_startTime+8,?_printf+2
  6866  0004CE  C109  F091         	movff	_log_startTime+9,?_printf+3
  6867  0004D2  0ED6               	movlw	low UI@month
  6868  0004D4  0100               	movlb	0	; () banked
  6869  0004D6  6F92               	movwf	(?_printf+4)& (0+255),b
  6870  0004D8  0E00               	movlw	high UI@month
  6871  0004DA  0100               	movlb	0	; () banked
  6872  0004DC  6F93               	movwf	(?_printf+5)& (0+255),b
  6873  0004DE  C104  F094         	movff	_log_startTime+4,?_printf+6
  6874  0004E2  C105  F095         	movff	_log_startTime+5,?_printf+7
  6875  0004E6  C102  F096         	movff	_log_startTime+2,?_printf+8
  6876  0004EA  C103  F097         	movff	_log_startTime+3,?_printf+9
  6877  0004EE  C100  F098         	movff	_log_startTime,?_printf+10
  6878  0004F2  C101  F099         	movff	_log_startTime+1,?_printf+11
  6879  0004F6  EC9C  F008         	call	_printf	;wreg free
  6880                           
  6881                           ;UI.c: 169: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6882  0004FA  0E00               	movlw	0
  6883  0004FC  0100               	movlb	0	; () banked
  6884  0004FE  6FCC               	movwf	UI@i_431& (0+255),b
  6885  000500                     l7370:
  6886                           
  6887                           ; BSR set to: 0
  6888  000500  0E63               	movlw	99
  6889  000502  0100               	movlb	0	; () banked
  6890  000504  65CC               	cpfsgt	UI@i_431& (0+255),b
  6891  000506  D001               	goto	l7374
  6892  000508  D00C               	goto	l7378
  6893  00050A                     l7374:
  6894                           
  6895                           ; BSR set to: 0
  6896  00050A  0E68               	movlw	104
  6897  00050C  0100               	movlb	0	; () banked
  6898  00050E  6FC4               	movwf	??_UI& (0+255),b
  6899  000510  0EE4               	movlw	228
  6900  000512                     u7117:
  6901  000512  2EE8               	decfsz	wreg,f,c
  6902  000514  D7FE               	bra	u7117
  6903  000516  2FC4               	decfsz	??_UI& (0+255),f,b
  6904  000518  D7FC               	bra	u7117
  6905  00051A  F000               	nop	
  6906  00051C  0100               	movlb	0	; () banked
  6907  00051E  2BCC               	incf	UI@i_431& (0+255),f,b
  6908  000520  D7EF               	goto	l7370
  6909  000522                     l7378:
  6910                           
  6911                           ; BSR set to: 0
  6912  000522  0100               	movlb	0	; () banked
  6913  000524  51F6               	movf	_logstate& (0+255),w,b
  6914  000526  0100               	movlb	0	; () banked
  6915  000528  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6916  00052A  B4D8               	btfsc	status,2,c
  6917  00052C  0012               	return	
  6918                           
  6919                           ; BSR set to: 0
  6920                           ;UI.c: 170: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6921                           
  6922                           ; BSR set to: 0
  6923                           
  6924                           ; BSR set to: 0
  6925  00052E  0E00               	movlw	0
  6926  000530  0100               	movlb	0	; () banked
  6927  000532  6FCD               	movwf	UI@i_432& (0+255),b
  6928  000534                     l7384:
  6929                           
  6930                           ; BSR set to: 0
  6931  000534  0E63               	movlw	99
  6932  000536  0100               	movlb	0	; () banked
  6933  000538  65CD               	cpfsgt	UI@i_432& (0+255),b
  6934  00053A  D001               	goto	l7388
  6935  00053C  D00C               	goto	l7392
  6936  00053E                     l7388:
  6937                           
  6938                           ; BSR set to: 0
  6939  00053E  0E68               	movlw	104
  6940  000540  0100               	movlb	0	; () banked
  6941  000542  6FC4               	movwf	??_UI& (0+255),b
  6942  000544  0EE4               	movlw	228
  6943  000546                     u7127:
  6944  000546  2EE8               	decfsz	wreg,f,c
  6945  000548  D7FE               	bra	u7127
  6946  00054A  2FC4               	decfsz	??_UI& (0+255),f,b
  6947  00054C  D7FC               	bra	u7127
  6948  00054E  F000               	nop	
  6949  000550  0100               	movlb	0	; () banked
  6950  000552  2BCD               	incf	UI@i_432& (0+255),f,b
  6951  000554  D7EF               	goto	l7384
  6952  000556                     l7392:
  6953                           
  6954                           ; BSR set to: 0
  6955  000556  0100               	movlb	0	; () banked
  6956  000558  51F6               	movf	_logstate& (0+255),w,b
  6957  00055A  0100               	movlb	0	; () banked
  6958  00055C  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6959  00055E  B4D8               	btfsc	status,2,c
  6960  000560  0012               	return	
  6961                           
  6962                           ; BSR set to: 0
  6963                           ;UI.c: 172: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6964                           
  6965                           ; BSR set to: 0
  6966                           
  6967                           ; BSR set to: 0
  6968  000562  0E01               	movlw	1
  6969  000564  ECF0  F022         	call	_lcdInst
  6970  000568  0E68               	movlw	104
  6971  00056A  0100               	movlb	0	; () banked
  6972  00056C  6FC4               	movwf	??_UI& (0+255),b
  6973  00056E  0EE4               	movlw	228
  6974  000570                     u7137:
  6975  000570  2EE8               	decfsz	wreg,f,c
  6976  000572  D7FE               	bra	u7137
  6977  000574  2FC4               	decfsz	??_UI& (0+255),f,b
  6978  000576  D7FC               	bra	u7137
  6979  000578  F000               	nop	
  6980                           
  6981                           ;UI.c: 173: lcdInst(0b10000000);;
  6982  00057A  0E80               	movlw	128
  6983  00057C  ECF0  F022         	call	_lcdInst
  6984                           
  6985                           ;UI.c: 174: printf("DURATION:");
  6986  000580  0EA3               	movlw	low STR_22
  6987  000582  0100               	movlb	0	; () banked
  6988  000584  6F8E               	movwf	printf@f& (0+255),b
  6989  000586  0EFF               	movlw	high STR_22
  6990  000588  0100               	movlb	0	; () banked
  6991  00058A  6F8F               	movwf	(printf@f+1)& (0+255),b
  6992  00058C  EC9C  F008         	call	_printf	;wreg free
  6993                           
  6994                           ;UI.c: 175: lcdInst(0b11000000);;
  6995  000590  0EC0               	movlw	192
  6996  000592  ECF0  F022         	call	_lcdInst
  6997                           
  6998                           ;UI.c: 176: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  6999  000596  0E0E               	movlw	14
  7000  000598  0100               	movlb	0	; () banked
  7001  00059A  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7002  00059C  0E10               	movlw	16
  7003  00059E  6F82               	movwf	___awmod@divisor& (0+255),b
  7004  0005A0  C0F4  F080         	movff	_log_total_time,___awmod@dividend
  7005  0005A4  C0F5  F081         	movff	_log_total_time+1,___awmod@dividend+1
  7006  0005A8  ECA8  F01B         	call	___awmod	;wreg free
  7007  0005AC  C080  F0C6         	movff	?___awmod,_UI$2246
  7008  0005B0  C081  F0C7         	movff	?___awmod+1,_UI$2246+1
  7009                           
  7010                           ;UI.c: 176: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  7011  0005B4  0E1F               	movlw	low STR_23
  7012  0005B6  0100               	movlb	0	; () banked
  7013  0005B8  6F8E               	movwf	printf@f& (0+255),b
  7014  0005BA  0EFF               	movlw	high STR_23
  7015  0005BC  0100               	movlb	0	; () banked
  7016  0005BE  6F8F               	movwf	(printf@f+1)& (0+255),b
  7017  0005C0  0E0E               	movlw	14
  7018  0005C2  0100               	movlb	0	; () banked
  7019  0005C4  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7020  0005C6  0E10               	movlw	16
  7021  0005C8  6F82               	movwf	___awmod@divisor& (0+255),b
  7022  0005CA  C0F4  F080         	movff	_log_total_time,___awmod@dividend
  7023  0005CE  C0F5  F081         	movff	_log_total_time+1,___awmod@dividend+1
  7024  0005D2  ECA8  F01B         	call	___awmod	;wreg free
  7025  0005D6  C080  F086         	movff	?___awmod,___awdiv@dividend
  7026  0005DA  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  7027  0005DE  0E00               	movlw	0
  7028  0005E0  0100               	movlb	0	; () banked
  7029  0005E2  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  7030  0005E4  0E3C               	movlw	60
  7031  0005E6  6F88               	movwf	___awdiv@divisor& (0+255),b
  7032  0005E8  EC40  F01A         	call	___awdiv	;wreg free
  7033  0005EC  C086  F090         	movff	?___awdiv,?_printf+2
  7034  0005F0  C087  F091         	movff	?___awdiv+1,?_printf+3
  7035  0005F4  C0C6  F080         	movff	_UI$2246,___awmod@dividend
  7036  0005F8  C0C7  F081         	movff	_UI$2246+1,___awmod@dividend+1
  7037  0005FC  0E00               	movlw	0
  7038  0005FE  0100               	movlb	0	; () banked
  7039  000600  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7040  000602  0E3C               	movlw	60
  7041  000604  6F82               	movwf	___awmod@divisor& (0+255),b
  7042  000606  ECA8  F01B         	call	___awmod	;wreg free
  7043  00060A  C080  F092         	movff	?___awmod,?_printf+4
  7044  00060E  C081  F093         	movff	?___awmod+1,?_printf+5
  7045  000612  EC9C  F008         	call	_printf	;wreg free
  7046                           
  7047                           ;UI.c: 178: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7048  000616  0E00               	movlw	0
  7049  000618  0100               	movlb	0	; () banked
  7050  00061A  6FCE               	movwf	UI@i_435& (0+255),b
  7051  00061C                     l7412:
  7052                           
  7053                           ; BSR set to: 0
  7054  00061C  0E63               	movlw	99
  7055  00061E  0100               	movlb	0	; () banked
  7056  000620  65CE               	cpfsgt	UI@i_435& (0+255),b
  7057  000622  D001               	goto	l7416
  7058  000624  D00C               	goto	l7420
  7059  000626                     l7416:
  7060                           
  7061                           ; BSR set to: 0
  7062  000626  0E68               	movlw	104
  7063  000628  0100               	movlb	0	; () banked
  7064  00062A  6FC4               	movwf	??_UI& (0+255),b
  7065  00062C  0EE4               	movlw	228
  7066  00062E                     u7147:
  7067  00062E  2EE8               	decfsz	wreg,f,c
  7068  000630  D7FE               	bra	u7147
  7069  000632  2FC4               	decfsz	??_UI& (0+255),f,b
  7070  000634  D7FC               	bra	u7147
  7071  000636  F000               	nop	
  7072  000638  0100               	movlb	0	; () banked
  7073  00063A  2BCE               	incf	UI@i_435& (0+255),f,b
  7074  00063C  D7EF               	goto	l7412
  7075  00063E                     l7420:
  7076                           
  7077                           ; BSR set to: 0
  7078  00063E  0100               	movlb	0	; () banked
  7079  000640  51F6               	movf	_logstate& (0+255),w,b
  7080  000642  0100               	movlb	0	; () banked
  7081  000644  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7082  000646  B4D8               	btfsc	status,2,c
  7083  000648  0012               	return	
  7084                           
  7085                           ; BSR set to: 0
  7086                           ;UI.c: 179: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7087                           
  7088                           ; BSR set to: 0
  7089                           
  7090                           ; BSR set to: 0
  7091  00064A  0E00               	movlw	0
  7092  00064C  0100               	movlb	0	; () banked
  7093  00064E  6FCF               	movwf	UI@i_436& (0+255),b
  7094  000650                     l7426:
  7095                           
  7096                           ; BSR set to: 0
  7097  000650  0E63               	movlw	99
  7098  000652  0100               	movlb	0	; () banked
  7099  000654  65CF               	cpfsgt	UI@i_436& (0+255),b
  7100  000656  D001               	goto	l7430
  7101  000658  D00C               	goto	l7434
  7102  00065A                     l7430:
  7103                           
  7104                           ; BSR set to: 0
  7105  00065A  0E68               	movlw	104
  7106  00065C  0100               	movlb	0	; () banked
  7107  00065E  6FC4               	movwf	??_UI& (0+255),b
  7108  000660  0EE4               	movlw	228
  7109  000662                     u7157:
  7110  000662  2EE8               	decfsz	wreg,f,c
  7111  000664  D7FE               	bra	u7157
  7112  000666  2FC4               	decfsz	??_UI& (0+255),f,b
  7113  000668  D7FC               	bra	u7157
  7114  00066A  F000               	nop	
  7115  00066C  0100               	movlb	0	; () banked
  7116  00066E  2BCF               	incf	UI@i_436& (0+255),f,b
  7117  000670  D7EF               	goto	l7426
  7118  000672                     l7434:
  7119                           
  7120                           ; BSR set to: 0
  7121  000672  0100               	movlb	0	; () banked
  7122  000674  51F6               	movf	_logstate& (0+255),w,b
  7123  000676  0100               	movlb	0	; () banked
  7124  000678  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7125  00067A  B4D8               	btfsc	status,2,c
  7126  00067C  0012               	return	
  7127                           
  7128                           ; BSR set to: 0
  7129                           ;UI.c: 181: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7130                           
  7131                           ; BSR set to: 0
  7132                           
  7133                           ; BSR set to: 0
  7134  00067E  0E01               	movlw	1
  7135  000680  ECF0  F022         	call	_lcdInst
  7136  000684  0E68               	movlw	104
  7137  000686  0100               	movlb	0	; () banked
  7138  000688  6FC4               	movwf	??_UI& (0+255),b
  7139  00068A  0EE4               	movlw	228
  7140  00068C                     u7167:
  7141  00068C  2EE8               	decfsz	wreg,f,c
  7142  00068E  D7FE               	bra	u7167
  7143  000690  2FC4               	decfsz	??_UI& (0+255),f,b
  7144  000692  D7FC               	bra	u7167
  7145  000694  F000               	nop	
  7146                           
  7147                           ;UI.c: 182: lcdInst(0b10000000);;
  7148  000696  0E80               	movlw	128
  7149  000698  ECF0  F022         	call	_lcdInst
  7150                           
  7151                           ;UI.c: 183: printf(" -- POP  CAN -- ");
  7152  00069C  0E64               	movlw	low STR_24
  7153  00069E  0100               	movlb	0	; () banked
  7154  0006A0  6F8E               	movwf	printf@f& (0+255),b
  7155  0006A2  0EFD               	movlw	high STR_24
  7156  0006A4  0100               	movlb	0	; () banked
  7157  0006A6  6F8F               	movwf	(printf@f+1)& (0+255),b
  7158  0006A8  EC9C  F008         	call	_printf	;wreg free
  7159                           
  7160                           ;UI.c: 184: lcdInst(0b11000000);;
  7161  0006AC  0EC0               	movlw	192
  7162  0006AE  ECF0  F022         	call	_lcdInst
  7163                           
  7164                           ;UI.c: 185: printf("NO TAB: %d|TAB: %d", log_count_pop_no_tab, log_count_pop_w_tab);
  7165  0006B2  0E82               	movlw	low STR_25
  7166  0006B4  0100               	movlb	0	; () banked
  7167  0006B6  6F8E               	movwf	printf@f& (0+255),b
  7168  0006B8  0EFB               	movlw	high STR_25
  7169  0006BA  0100               	movlb	0	; () banked
  7170  0006BC  6F8F               	movwf	(printf@f+1)& (0+255),b
  7171  0006BE  C0EE  F090         	movff	_log_count_pop_no_tab,?_printf+2
  7172  0006C2  C0EF  F091         	movff	_log_count_pop_no_tab+1,?_printf+3
  7173  0006C6  C0F0  F092         	movff	_log_count_pop_w_tab,?_printf+4
  7174  0006CA  C0F1  F093         	movff	_log_count_pop_w_tab+1,?_printf+5
  7175  0006CE  EC9C  F008         	call	_printf	;wreg free
  7176                           
  7177                           ;UI.c: 187: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7178  0006D2  0E00               	movlw	0
  7179  0006D4  0100               	movlb	0	; () banked
  7180  0006D6  6FD0               	movwf	UI@i_439& (0+255),b
  7181  0006D8                     l7452:
  7182                           
  7183                           ; BSR set to: 0
  7184  0006D8  0E63               	movlw	99
  7185  0006DA  0100               	movlb	0	; () banked
  7186  0006DC  65D0               	cpfsgt	UI@i_439& (0+255),b
  7187  0006DE  D001               	goto	l7456
  7188  0006E0  D00C               	goto	l7460
  7189  0006E2                     l7456:
  7190                           
  7191                           ; BSR set to: 0
  7192  0006E2  0E68               	movlw	104
  7193  0006E4  0100               	movlb	0	; () banked
  7194  0006E6  6FC4               	movwf	??_UI& (0+255),b
  7195  0006E8  0EE4               	movlw	228
  7196  0006EA                     u7177:
  7197  0006EA  2EE8               	decfsz	wreg,f,c
  7198  0006EC  D7FE               	bra	u7177
  7199  0006EE  2FC4               	decfsz	??_UI& (0+255),f,b
  7200  0006F0  D7FC               	bra	u7177
  7201  0006F2  F000               	nop	
  7202  0006F4  0100               	movlb	0	; () banked
  7203  0006F6  2BD0               	incf	UI@i_439& (0+255),f,b
  7204  0006F8  D7EF               	goto	l7452
  7205  0006FA                     l7460:
  7206                           
  7207                           ; BSR set to: 0
  7208  0006FA  0100               	movlb	0	; () banked
  7209  0006FC  51F6               	movf	_logstate& (0+255),w,b
  7210  0006FE  0100               	movlb	0	; () banked
  7211  000700  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7212  000702  B4D8               	btfsc	status,2,c
  7213  000704  0012               	return	
  7214                           
  7215                           ; BSR set to: 0
  7216                           ;UI.c: 188: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7217                           
  7218                           ; BSR set to: 0
  7219                           
  7220                           ; BSR set to: 0
  7221  000706  0E00               	movlw	0
  7222  000708  0100               	movlb	0	; () banked
  7223  00070A  6FD1               	movwf	UI@i_440& (0+255),b
  7224  00070C                     l7466:
  7225                           
  7226                           ; BSR set to: 0
  7227  00070C  0E63               	movlw	99
  7228  00070E  0100               	movlb	0	; () banked
  7229  000710  65D1               	cpfsgt	UI@i_440& (0+255),b
  7230  000712  D001               	goto	l7470
  7231  000714  D00C               	goto	l7474
  7232  000716                     l7470:
  7233                           
  7234                           ; BSR set to: 0
  7235  000716  0E68               	movlw	104
  7236  000718  0100               	movlb	0	; () banked
  7237  00071A  6FC4               	movwf	??_UI& (0+255),b
  7238  00071C  0EE4               	movlw	228
  7239  00071E                     u7187:
  7240  00071E  2EE8               	decfsz	wreg,f,c
  7241  000720  D7FE               	bra	u7187
  7242  000722  2FC4               	decfsz	??_UI& (0+255),f,b
  7243  000724  D7FC               	bra	u7187
  7244  000726  F000               	nop	
  7245  000728  0100               	movlb	0	; () banked
  7246  00072A  2BD1               	incf	UI@i_440& (0+255),f,b
  7247  00072C  D7EF               	goto	l7466
  7248  00072E                     l7474:
  7249                           
  7250                           ; BSR set to: 0
  7251  00072E  0100               	movlb	0	; () banked
  7252  000730  51F6               	movf	_logstate& (0+255),w,b
  7253  000732  0100               	movlb	0	; () banked
  7254  000734  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7255  000736  B4D8               	btfsc	status,2,c
  7256  000738  0012               	return	
  7257                           
  7258                           ; BSR set to: 0
  7259                           ;UI.c: 190: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7260                           
  7261                           ; BSR set to: 0
  7262                           
  7263                           ; BSR set to: 0
  7264  00073A  0E01               	movlw	1
  7265  00073C  ECF0  F022         	call	_lcdInst
  7266  000740  0E68               	movlw	104
  7267  000742  0100               	movlb	0	; () banked
  7268  000744  6FC4               	movwf	??_UI& (0+255),b
  7269  000746  0EE4               	movlw	228
  7270  000748                     u7197:
  7271  000748  2EE8               	decfsz	wreg,f,c
  7272  00074A  D7FE               	bra	u7197
  7273  00074C  2FC4               	decfsz	??_UI& (0+255),f,b
  7274  00074E  D7FC               	bra	u7197
  7275  000750  F000               	nop	
  7276                           
  7277                           ;UI.c: 191: lcdInst(0b10000000);;
  7278  000752  0E80               	movlw	128
  7279  000754  ECF0  F022         	call	_lcdInst
  7280                           
  7281                           ;UI.c: 192: printf(" -- SOUP CAN -- ");
  7282  000758  0E75               	movlw	low STR_26
  7283  00075A  0100               	movlb	0	; () banked
  7284  00075C  6F8E               	movwf	printf@f& (0+255),b
  7285  00075E  0EFD               	movlw	high STR_26
  7286  000760  0100               	movlb	0	; () banked
  7287  000762  6F8F               	movwf	(printf@f+1)& (0+255),b
  7288  000764  EC9C  F008         	call	_printf	;wreg free
  7289                           
  7290                           ;UI.c: 193: lcdInst(0b11000000);;
  7291  000768  0EC0               	movlw	192
  7292  00076A  ECF0  F022         	call	_lcdInst
  7293                           
  7294                           ;UI.c: 194: printf("NO LAB: %d|LAB: %d", log_count_can_no_lab, log_count_can_w_lab);
  7295  00076E  0E6F               	movlw	low STR_27
  7296  000770  0100               	movlb	0	; () banked
  7297  000772  6F8E               	movwf	printf@f& (0+255),b
  7298  000774  0EFB               	movlw	high STR_27
  7299  000776  0100               	movlb	0	; () banked
  7300  000778  6F8F               	movwf	(printf@f+1)& (0+255),b
  7301  00077A  C0EA  F090         	movff	_log_count_can_no_lab,?_printf+2
  7302  00077E  C0EB  F091         	movff	_log_count_can_no_lab+1,?_printf+3
  7303  000782  C0EC  F092         	movff	_log_count_can_w_lab,?_printf+4
  7304  000786  C0ED  F093         	movff	_log_count_can_w_lab+1,?_printf+5
  7305  00078A  EC9C  F008         	call	_printf	;wreg free
  7306                           
  7307                           ;UI.c: 196: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7308  00078E  0E00               	movlw	0
  7309  000790  0100               	movlb	0	; () banked
  7310  000792  6FD2               	movwf	UI@i_443& (0+255),b
  7311  000794                     l7492:
  7312                           
  7313                           ; BSR set to: 0
  7314  000794  0E63               	movlw	99
  7315  000796  0100               	movlb	0	; () banked
  7316  000798  65D2               	cpfsgt	UI@i_443& (0+255),b
  7317  00079A  D001               	goto	l7496
  7318  00079C  D00C               	goto	l7500
  7319  00079E                     l7496:
  7320                           
  7321                           ; BSR set to: 0
  7322  00079E  0E68               	movlw	104
  7323  0007A0  0100               	movlb	0	; () banked
  7324  0007A2  6FC4               	movwf	??_UI& (0+255),b
  7325  0007A4  0EE4               	movlw	228
  7326  0007A6                     u7207:
  7327  0007A6  2EE8               	decfsz	wreg,f,c
  7328  0007A8  D7FE               	bra	u7207
  7329  0007AA  2FC4               	decfsz	??_UI& (0+255),f,b
  7330  0007AC  D7FC               	bra	u7207
  7331  0007AE  F000               	nop	
  7332  0007B0  0100               	movlb	0	; () banked
  7333  0007B2  2BD2               	incf	UI@i_443& (0+255),f,b
  7334  0007B4  D7EF               	goto	l7492
  7335  0007B6                     l7500:
  7336                           
  7337                           ; BSR set to: 0
  7338  0007B6  0100               	movlb	0	; () banked
  7339  0007B8  51F6               	movf	_logstate& (0+255),w,b
  7340  0007BA  0100               	movlb	0	; () banked
  7341  0007BC  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7342  0007BE  B4D8               	btfsc	status,2,c
  7343  0007C0  0012               	return	
  7344                           
  7345                           ; BSR set to: 0
  7346                           ;UI.c: 197: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7347                           
  7348                           ; BSR set to: 0
  7349                           
  7350                           ; BSR set to: 0
  7351  0007C2  0E00               	movlw	0
  7352  0007C4  0100               	movlb	0	; () banked
  7353  0007C6  6FD3               	movwf	UI@i_444& (0+255),b
  7354  0007C8                     l7506:
  7355                           
  7356                           ; BSR set to: 0
  7357  0007C8  0E63               	movlw	99
  7358  0007CA  0100               	movlb	0	; () banked
  7359  0007CC  65D3               	cpfsgt	UI@i_444& (0+255),b
  7360  0007CE  D001               	goto	l7510
  7361  0007D0  D00C               	goto	l7514
  7362  0007D2                     l7510:
  7363                           
  7364                           ; BSR set to: 0
  7365  0007D2  0E68               	movlw	104
  7366  0007D4  0100               	movlb	0	; () banked
  7367  0007D6  6FC4               	movwf	??_UI& (0+255),b
  7368  0007D8  0EE4               	movlw	228
  7369  0007DA                     u7217:
  7370  0007DA  2EE8               	decfsz	wreg,f,c
  7371  0007DC  D7FE               	bra	u7217
  7372  0007DE  2FC4               	decfsz	??_UI& (0+255),f,b
  7373  0007E0  D7FC               	bra	u7217
  7374  0007E2  F000               	nop	
  7375  0007E4  0100               	movlb	0	; () banked
  7376  0007E6  2BD3               	incf	UI@i_444& (0+255),f,b
  7377  0007E8  D7EF               	goto	l7506
  7378  0007EA                     l7514:
  7379                           
  7380                           ; BSR set to: 0
  7381  0007EA  0100               	movlb	0	; () banked
  7382  0007EC  51F6               	movf	_logstate& (0+255),w,b
  7383  0007EE  0100               	movlb	0	; () banked
  7384  0007F0  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7385  0007F2  B4D8               	btfsc	status,2,c
  7386  0007F4  0012               	return	
  7387                           
  7388                           ; BSR set to: 0
  7389                           ;UI.c: 199: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7390                           
  7391                           ; BSR set to: 0
  7392                           
  7393                           ; BSR set to: 0
  7394  0007F6  0E01               	movlw	1
  7395  0007F8  ECF0  F022         	call	_lcdInst
  7396  0007FC  0E68               	movlw	104
  7397  0007FE  0100               	movlb	0	; () banked
  7398  000800  6FC4               	movwf	??_UI& (0+255),b
  7399  000802  0EE4               	movlw	228
  7400  000804                     u7227:
  7401  000804  2EE8               	decfsz	wreg,f,c
  7402  000806  D7FE               	bra	u7227
  7403  000808  2FC4               	decfsz	??_UI& (0+255),f,b
  7404  00080A  D7FC               	bra	u7227
  7405  00080C  F000               	nop	
  7406                           
  7407                           ;UI.c: 200: lcdInst(0b10000000);;
  7408  00080E  0E80               	movlw	128
  7409  000810  ECF0  F022         	call	_lcdInst
  7410                           
  7411                           ;UI.c: 201: printf("-- TOTAL CANS --");
  7412  000814  0E86               	movlw	low STR_28
  7413  000816  0100               	movlb	0	; () banked
  7414  000818  6F8E               	movwf	printf@f& (0+255),b
  7415  00081A  0EFD               	movlw	high STR_28
  7416  00081C  0100               	movlb	0	; () banked
  7417  00081E  6F8F               	movwf	(printf@f+1)& (0+255),b
  7418  000820  EC9C  F008         	call	_printf	;wreg free
  7419                           
  7420                           ;UI.c: 202: lcdInst(0b11000000);;
  7421  000824  0EC0               	movlw	192
  7422  000826  ECF0  F022         	call	_lcdInst
  7423                           
  7424                           ;UI.c: 203: printf("%d", log_count_total);
  7425  00082A  0E7F               	movlw	low (STR_27+16)
  7426  00082C  0100               	movlb	0	; () banked
  7427  00082E  6F8E               	movwf	printf@f& (0+255),b
  7428  000830  0EFB               	movlw	high (STR_27+16)
  7429  000832  0100               	movlb	0	; () banked
  7430  000834  6F8F               	movwf	(printf@f+1)& (0+255),b
  7431  000836  C0F2  F090         	movff	_log_count_total,?_printf+2
  7432  00083A  C0F3  F091         	movff	_log_count_total+1,?_printf+3
  7433  00083E  EC9C  F008         	call	_printf	;wreg free
  7434                           
  7435                           ;UI.c: 205: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7436  000842  0E00               	movlw	0
  7437  000844  0100               	movlb	0	; () banked
  7438  000846  6FD4               	movwf	UI@i_447& (0+255),b
  7439  000848                     l7532:
  7440                           
  7441                           ; BSR set to: 0
  7442  000848  0E63               	movlw	99
  7443  00084A  0100               	movlb	0	; () banked
  7444  00084C  65D4               	cpfsgt	UI@i_447& (0+255),b
  7445  00084E  D001               	goto	l7536
  7446  000850  D00C               	goto	l7540
  7447  000852                     l7536:
  7448                           
  7449                           ; BSR set to: 0
  7450  000852  0E68               	movlw	104
  7451  000854  0100               	movlb	0	; () banked
  7452  000856  6FC4               	movwf	??_UI& (0+255),b
  7453  000858  0EE4               	movlw	228
  7454  00085A                     u7237:
  7455  00085A  2EE8               	decfsz	wreg,f,c
  7456  00085C  D7FE               	bra	u7237
  7457  00085E  2FC4               	decfsz	??_UI& (0+255),f,b
  7458  000860  D7FC               	bra	u7237
  7459  000862  F000               	nop	
  7460  000864  0100               	movlb	0	; () banked
  7461  000866  2BD4               	incf	UI@i_447& (0+255),f,b
  7462  000868  D7EF               	goto	l7532
  7463  00086A                     l7540:
  7464                           
  7465                           ; BSR set to: 0
  7466  00086A  0100               	movlb	0	; () banked
  7467  00086C  51F6               	movf	_logstate& (0+255),w,b
  7468  00086E  0100               	movlb	0	; () banked
  7469  000870  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7470  000872  B4D8               	btfsc	status,2,c
  7471  000874  0012               	return	
  7472                           
  7473                           ; BSR set to: 0
  7474                           ;UI.c: 206: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7475                           
  7476                           ; BSR set to: 0
  7477                           
  7478                           ; BSR set to: 0
  7479  000876  0E00               	movlw	0
  7480  000878  0100               	movlb	0	; () banked
  7481  00087A  6FD5               	movwf	UI@i_448& (0+255),b
  7482  00087C                     l7546:
  7483                           
  7484                           ; BSR set to: 0
  7485  00087C  0E63               	movlw	99
  7486  00087E  0100               	movlb	0	; () banked
  7487  000880  65D5               	cpfsgt	UI@i_448& (0+255),b
  7488  000882  D001               	goto	l7550
  7489  000884  D00C               	goto	l7554
  7490  000886                     l7550:
  7491                           
  7492                           ; BSR set to: 0
  7493  000886  0E68               	movlw	104
  7494  000888  0100               	movlb	0	; () banked
  7495  00088A  6FC4               	movwf	??_UI& (0+255),b
  7496  00088C  0EE4               	movlw	228
  7497  00088E                     u7247:
  7498  00088E  2EE8               	decfsz	wreg,f,c
  7499  000890  D7FE               	bra	u7247
  7500  000892  2FC4               	decfsz	??_UI& (0+255),f,b
  7501  000894  D7FC               	bra	u7247
  7502  000896  F000               	nop	
  7503  000898  0100               	movlb	0	; () banked
  7504  00089A  2BD5               	incf	UI@i_448& (0+255),f,b
  7505  00089C  D7EF               	goto	l7546
  7506  00089E                     l7554:
  7507                           
  7508                           ; BSR set to: 0
  7509  00089E  0100               	movlb	0	; () banked
  7510  0008A0  51F6               	movf	_logstate& (0+255),w,b
  7511  0008A2  0100               	movlb	0	; () banked
  7512  0008A4  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7513  0008A6  B4D8               	btfsc	status,2,c
  7514  0008A8  0012               	return	
  7515  0008AA                     l7558:
  7516  0008AA  0100               	movlb	0	; () banked
  7517  0008AC  51F6               	movf	_logstate& (0+255),w,b
  7518  0008AE  0100               	movlb	0	; () banked
  7519  0008B0  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7520  0008B2  B4D8               	btfsc	status,2,c
  7521  0008B4  0012               	return	
  7522  0008B6  D44A               	goto	l7254
  7523  0008B8                     __end_of_UI:
  7524                           	opt stack 0
  7525                           tblptru	equ	0xFF8
  7526                           tblptrh	equ	0xFF7
  7527                           tblptrl	equ	0xFF6
  7528                           tablat	equ	0xFF5
  7529                           prodh	equ	0xFF4
  7530                           prodl	equ	0xFF3
  7531                           intcon	equ	0xFF2
  7532                           intcon2	equ	0xFF1
  7533                           intcon3	equ	0xFF0
  7534                           postinc0	equ	0xFEE
  7535                           wreg	equ	0xFE8
  7536                           postdec1	equ	0xFE5
  7537                           fsr1l	equ	0xFE1
  7538                           indf2	equ	0xFDF
  7539                           postinc2	equ	0xFDE
  7540                           postdec2	equ	0xFDD
  7541                           fsr2h	equ	0xFDA
  7542                           fsr2l	equ	0xFD9
  7543                           status	equ	0xFD8
  7544                           
  7545 ;; *************** function _printRTC *****************
  7546 ;; Defined at:
  7547 ;;		line 63 in file "RTC.c"
  7548 ;; Parameters:    Size  Location     Type
  7549 ;;		None
  7550 ;; Auto vars:     Size  Location     Type
  7551 ;;  i               2   66[BANK0 ] int 
  7552 ;;  INT_time       14   46[BANK0 ] int [7]
  7553 ;;  month           4   62[BANK0 ] unsigned char [4]
  7554 ;;  RTC_month       2   60[BANK0 ] int 
  7555 ;; Return value:  Size  Location     Type
  7556 ;;                  1    wreg      void 
  7557 ;; Registers used:
  7558 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7559 ;; Tracked objects:
  7560 ;;		On entry : 0/0
  7561 ;;		On exit  : 0/0
  7562 ;;		Unchanged: 0/0
  7563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7564 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7565 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7566 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7567 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7568 ;;Total ram usage:       25 bytes
  7569 ;; Hardware stack levels used:    1
  7570 ;; Hardware stack levels required when called:   10
  7571 ;; This function calls:
  7572 ;;		_getRTC
  7573 ;;		_lcdInst
  7574 ;;		_printf
  7575 ;;		_strcpy
  7576 ;; This function is called by:
  7577 ;;		_UI
  7578 ;;		_change_state_to_menu_start
  7579 ;; This function uses a non-reentrant model
  7580 ;;
  7581                           
  7582                           	psect	text23
  7583  001BCE                     __ptext23:
  7584                           	opt stack 0
  7585  001BCE                     _printRTC:
  7586                           	opt stack 18
  7587                           
  7588                           ;RTC.c: 64: getRTC();
  7589                           
  7590                           ; BSR set to: 0
  7591                           ;incstack = 0
  7592  001BCE  EC83  F01C         	call	_getRTC	;wreg free
  7593                           
  7594                           ;RTC.c: 65: char month[] = "MMM";
  7595  001BD2  C133  F0BE         	movff	printRTC@F3214,printRTC@month
  7596  001BD6  C134  F0BF         	movff	printRTC@F3214+1,printRTC@month+1
  7597  001BDA  C135  F0C0         	movff	printRTC@F3214+2,printRTC@month+2
  7598  001BDE  C136  F0C1         	movff	printRTC@F3214+3,printRTC@month+3
  7599                           
  7600                           ;RTC.c: 66: int INT_time[7];
  7601                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
  7602  001BE2  0E00               	movlw	0
  7603  001BE4  0100               	movlb	0	; () banked
  7604  001BE6  6FC3               	movwf	(printRTC@i+1)& (0+255),b
  7605  001BE8  0E00               	movlw	0
  7606  001BEA  6FC2               	movwf	printRTC@i& (0+255),b
  7607                           
  7608                           ; BSR set to: 0
  7609  001BEC  0100               	movlb	0	; () banked
  7610  001BEE  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  7611  001BF0  D008               	goto	l5732
  7612  001BF2  0100               	movlb	0	; () banked
  7613  001BF4  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  7614  001BF6  E146               	bnz	l599
  7615  001BF8  0E07               	movlw	7
  7616  001BFA  0100               	movlb	0	; () banked
  7617  001BFC  5DC2               	subwf	printRTC@i& (0+255),w,b
  7618  001BFE  B0D8               	btfsc	status,0,c
  7619  001C00  D041               	goto	l599
  7620  001C02                     l5732:
  7621                           
  7622                           ; BSR set to: 0
  7623                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  7624  001C02  0E24               	movlw	low _time
  7625  001C04  0100               	movlb	0	; () banked
  7626  001C06  25C2               	addwf	printRTC@i& (0+255),w,b
  7627  001C08  6ED9               	movwf	fsr2l,c
  7628  001C0A  0E01               	movlw	high _time
  7629  001C0C  0100               	movlb	0	; () banked
  7630  001C0E  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  7631  001C10  6EDA               	movwf	fsr2h,c
  7632  001C12  50DF               	movf	indf2,w,c
  7633  001C14  0100               	movlb	0	; () banked
  7634  001C16  6FAB               	movwf	??_printRTC& (0+255),b
  7635  001C18  0100               	movlb	0	; () banked
  7636  001C1A  3BAB               	swapf	??_printRTC& (0+255),f,b
  7637  001C1C  0E0F               	movlw	15
  7638  001C1E  17AB               	andwf	??_printRTC& (0+255),f,b
  7639  001C20  0E0F               	movlw	15
  7640  001C22  0100               	movlb	0	; () banked
  7641  001C24  17AB               	andwf	??_printRTC& (0+255),f,b
  7642  001C26  0100               	movlb	0	; () banked
  7643  001C28  51AB               	movf	??_printRTC& (0+255),w,b
  7644  001C2A  0D0A               	mullw	10
  7645  001C2C  0E24               	movlw	low _time
  7646  001C2E  0100               	movlb	0	; () banked
  7647  001C30  25C2               	addwf	printRTC@i& (0+255),w,b
  7648  001C32  6ED9               	movwf	fsr2l,c
  7649  001C34  0E01               	movlw	high _time
  7650  001C36  0100               	movlb	0	; () banked
  7651  001C38  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  7652  001C3A  6EDA               	movwf	fsr2h,c
  7653  001C3C  50DF               	movf	indf2,w,c
  7654  001C3E  0B0F               	andlw	15
  7655  001C40  0100               	movlb	0	; () banked
  7656  001C42  6FAC               	movwf	(??_printRTC+1)& (0+255),b
  7657  001C44  6BAD               	clrf	(??_printRTC+2)& (0+255),b
  7658  001C46  50F3               	movf	prodl,w,c
  7659  001C48  0100               	movlb	0	; () banked
  7660  001C4A  27AC               	addwf	(??_printRTC+1)& (0+255),f,b
  7661  001C4C  50F4               	movf	prodh,w,c
  7662  001C4E  0100               	movlb	0	; () banked
  7663  001C50  23AD               	addwfc	(??_printRTC+2)& (0+255),f,b
  7664  001C52  90D8               	bcf	status,0,c
  7665  001C54  0100               	movlb	0	; () banked
  7666  001C56  35C2               	rlcf	printRTC@i& (0+255),w,b
  7667  001C58  6ED9               	movwf	fsr2l,c
  7668  001C5A  0100               	movlb	0	; () banked
  7669  001C5C  35C3               	rlcf	(printRTC@i+1)& (0+255),w,b
  7670  001C5E  6EDA               	movwf	fsr2h,c
  7671  001C60  0EAE               	movlw	low printRTC@INT_time
  7672  001C62  26D9               	addwf	fsr2l,f,c
  7673  001C64  0E00               	movlw	high printRTC@INT_time
  7674  001C66  22DA               	addwfc	fsr2h,f,c
  7675  001C68  C0AC  FFDE         	movff	??_printRTC+1,postinc2
  7676  001C6C  C0AD  FFDD         	movff	??_printRTC+2,postdec2
  7677                           
  7678                           ; BSR set to: 0
  7679  001C70  0100               	movlb	0	; () banked
  7680  001C72  4BC2               	infsnz	printRTC@i& (0+255),f,b
  7681  001C74  2BC3               	incf	(printRTC@i+1)& (0+255),f,b
  7682                           
  7683                           ; BSR set to: 0
  7684  001C76  0100               	movlb	0	; () banked
  7685  001C78  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  7686  001C7A  D7C3               	goto	l5732
  7687  001C7C  0100               	movlb	0	; () banked
  7688  001C7E  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  7689  001C80  E101               	bnz	u4410
  7690  001C82  D7BA               	goto	L6
  7691  001C84                     u4410:
  7692  001C84                     l599:
  7693                           
  7694                           ; BSR set to: 0
  7695                           ;RTC.c: 69: }
  7696                           ;RTC.c: 70: int RTC_month = INT_time[5];
  7697  001C84  C0B8  F0BC         	movff	printRTC@INT_time+10,printRTC@RTC_month
  7698  001C88  C0B9  F0BD         	movff	printRTC@INT_time+11,printRTC@RTC_month+1
  7699                           
  7700                           ;RTC.c: 71: switch(RTC_month){
  7701  001C8C  D0B4               	goto	l5764
  7702  001C8E                     l5738:
  7703                           
  7704                           ; BSR set to: 0
  7705                           ;RTC.c: 73: strcpy(month, "JAN");
  7706  001C8E  0EBE               	movlw	low printRTC@month
  7707  001C90  0100               	movlb	0	; () banked
  7708  001C92  6F80               	movwf	strcpy@to& (0+255),b
  7709  001C94  0E00               	movlw	high printRTC@month
  7710  001C96  0100               	movlb	0	; () banked
  7711  001C98  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7712  001C9A  0EDA               	movlw	low STR_8
  7713  001C9C  0100               	movlb	0	; () banked
  7714  001C9E  6F82               	movwf	strcpy@from& (0+255),b
  7715  001CA0  0EFF               	movlw	high STR_8
  7716  001CA2  0100               	movlb	0	; () banked
  7717  001CA4  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7718  001CA6  EC75  F020         	call	_strcpy	;wreg free
  7719                           
  7720                           ;RTC.c: 74: break;
  7721  001CAA  D0D4               	goto	l5766
  7722  001CAC                     l5740:
  7723                           
  7724                           ;RTC.c: 76: strcpy(month, "FEB");
  7725  001CAC  0EBE               	movlw	low printRTC@month
  7726  001CAE  0100               	movlb	0	; () banked
  7727  001CB0  6F80               	movwf	strcpy@to& (0+255),b
  7728  001CB2  0E00               	movlw	high printRTC@month
  7729  001CB4  0100               	movlb	0	; () banked
  7730  001CB6  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7731  001CB8  0ECA               	movlw	low STR_9
  7732  001CBA  0100               	movlb	0	; () banked
  7733  001CBC  6F82               	movwf	strcpy@from& (0+255),b
  7734  001CBE  0EFF               	movlw	high STR_9
  7735  001CC0  0100               	movlb	0	; () banked
  7736  001CC2  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7737  001CC4  EC75  F020         	call	_strcpy	;wreg free
  7738                           
  7739                           ;RTC.c: 77: break;
  7740  001CC8  D0C5               	goto	l5766
  7741  001CCA                     l5742:
  7742                           
  7743                           ;RTC.c: 79: strcpy(month, "MAR");
  7744  001CCA  0EBE               	movlw	low printRTC@month
  7745  001CCC  0100               	movlb	0	; () banked
  7746  001CCE  6F80               	movwf	strcpy@to& (0+255),b
  7747  001CD0  0E00               	movlw	high printRTC@month
  7748  001CD2  0100               	movlb	0	; () banked
  7749  001CD4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7750  001CD6  0EE6               	movlw	low STR_10
  7751  001CD8  0100               	movlb	0	; () banked
  7752  001CDA  6F82               	movwf	strcpy@from& (0+255),b
  7753  001CDC  0EFF               	movlw	high STR_10
  7754  001CDE  0100               	movlb	0	; () banked
  7755  001CE0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7756  001CE2  EC75  F020         	call	_strcpy	;wreg free
  7757                           
  7758                           ;RTC.c: 80: break;
  7759  001CE6  D0B6               	goto	l5766
  7760  001CE8                     l5744:
  7761                           
  7762                           ;RTC.c: 82: strcpy(month, "APR");
  7763  001CE8  0EBE               	movlw	low printRTC@month
  7764  001CEA  0100               	movlb	0	; () banked
  7765  001CEC  6F80               	movwf	strcpy@to& (0+255),b
  7766  001CEE  0E00               	movlw	high printRTC@month
  7767  001CF0  0100               	movlb	0	; () banked
  7768  001CF2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7769  001CF4  0EEA               	movlw	low STR_11
  7770  001CF6  0100               	movlb	0	; () banked
  7771  001CF8  6F82               	movwf	strcpy@from& (0+255),b
  7772  001CFA  0EFF               	movlw	high STR_11
  7773  001CFC  0100               	movlb	0	; () banked
  7774  001CFE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7775  001D00  EC75  F020         	call	_strcpy	;wreg free
  7776                           
  7777                           ;RTC.c: 83: break;
  7778  001D04  D0A7               	goto	l5766
  7779  001D06                     l5746:
  7780                           
  7781                           ;RTC.c: 85: strcpy(month, "MAY");
  7782  001D06  0EBE               	movlw	low printRTC@month
  7783  001D08  0100               	movlb	0	; () banked
  7784  001D0A  6F80               	movwf	strcpy@to& (0+255),b
  7785  001D0C  0E00               	movlw	high printRTC@month
  7786  001D0E  0100               	movlb	0	; () banked
  7787  001D10  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7788  001D12  0EFA               	movlw	low STR_12
  7789  001D14  0100               	movlb	0	; () banked
  7790  001D16  6F82               	movwf	strcpy@from& (0+255),b
  7791  001D18  0EFF               	movlw	high STR_12
  7792  001D1A  0100               	movlb	0	; () banked
  7793  001D1C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7794  001D1E  EC75  F020         	call	_strcpy	;wreg free
  7795                           
  7796                           ;RTC.c: 86: break;
  7797  001D22  D098               	goto	l5766
  7798  001D24                     l5748:
  7799                           
  7800                           ;RTC.c: 88: strcpy(month, "JUN");
  7801  001D24  0EBE               	movlw	low printRTC@month
  7802  001D26  0100               	movlb	0	; () banked
  7803  001D28  6F80               	movwf	strcpy@to& (0+255),b
  7804  001D2A  0E00               	movlw	high printRTC@month
  7805  001D2C  0100               	movlb	0	; () banked
  7806  001D2E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7807  001D30  0EDE               	movlw	low STR_13
  7808  001D32  0100               	movlb	0	; () banked
  7809  001D34  6F82               	movwf	strcpy@from& (0+255),b
  7810  001D36  0EFF               	movlw	high STR_13
  7811  001D38  0100               	movlb	0	; () banked
  7812  001D3A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7813  001D3C  EC75  F020         	call	_strcpy	;wreg free
  7814                           
  7815                           ;RTC.c: 89: break;
  7816  001D40  D089               	goto	l5766
  7817  001D42                     l5750:
  7818                           
  7819                           ;RTC.c: 91: strcpy(month, "JUL");
  7820  001D42  0EBE               	movlw	low printRTC@month
  7821  001D44  0100               	movlb	0	; () banked
  7822  001D46  6F80               	movwf	strcpy@to& (0+255),b
  7823  001D48  0E00               	movlw	high printRTC@month
  7824  001D4A  0100               	movlb	0	; () banked
  7825  001D4C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7826  001D4E  0ED6               	movlw	low STR_14
  7827  001D50  0100               	movlb	0	; () banked
  7828  001D52  6F82               	movwf	strcpy@from& (0+255),b
  7829  001D54  0EFF               	movlw	high STR_14
  7830  001D56  0100               	movlb	0	; () banked
  7831  001D58  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7832  001D5A  EC75  F020         	call	_strcpy	;wreg free
  7833                           
  7834                           ;RTC.c: 92: break;
  7835  001D5E  D07A               	goto	l5766
  7836  001D60                     l5752:
  7837                           
  7838                           ;RTC.c: 94: strcpy(month, "AUG");
  7839  001D60  0EBE               	movlw	low printRTC@month
  7840  001D62  0100               	movlb	0	; () banked
  7841  001D64  6F80               	movwf	strcpy@to& (0+255),b
  7842  001D66  0E00               	movlw	high printRTC@month
  7843  001D68  0100               	movlb	0	; () banked
  7844  001D6A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7845  001D6C  0ED2               	movlw	low STR_15
  7846  001D6E  0100               	movlb	0	; () banked
  7847  001D70  6F82               	movwf	strcpy@from& (0+255),b
  7848  001D72  0EFF               	movlw	high STR_15
  7849  001D74  0100               	movlb	0	; () banked
  7850  001D76  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7851  001D78  EC75  F020         	call	_strcpy	;wreg free
  7852                           
  7853                           ;RTC.c: 95: break;
  7854  001D7C  D06B               	goto	l5766
  7855  001D7E                     l5754:
  7856                           
  7857                           ;RTC.c: 97: strcpy(month, "SEP");
  7858  001D7E  0EBE               	movlw	low printRTC@month
  7859  001D80  0100               	movlb	0	; () banked
  7860  001D82  6F80               	movwf	strcpy@to& (0+255),b
  7861  001D84  0E00               	movlw	high printRTC@month
  7862  001D86  0100               	movlb	0	; () banked
  7863  001D88  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7864  001D8A  0EE2               	movlw	low STR_16
  7865  001D8C  0100               	movlb	0	; () banked
  7866  001D8E  6F82               	movwf	strcpy@from& (0+255),b
  7867  001D90  0EFF               	movlw	high STR_16
  7868  001D92  0100               	movlb	0	; () banked
  7869  001D94  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7870  001D96  EC75  F020         	call	_strcpy	;wreg free
  7871                           
  7872                           ;RTC.c: 98: break;
  7873  001D9A  D05C               	goto	l5766
  7874  001D9C                     l5756:
  7875                           
  7876                           ;RTC.c: 100: strcpy(month, "OCT");
  7877  001D9C  0EBE               	movlw	low printRTC@month
  7878  001D9E  0100               	movlb	0	; () banked
  7879  001DA0  6F80               	movwf	strcpy@to& (0+255),b
  7880  001DA2  0E00               	movlw	high printRTC@month
  7881  001DA4  0100               	movlb	0	; () banked
  7882  001DA6  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7883  001DA8  0EF2               	movlw	low STR_17
  7884  001DAA  0100               	movlb	0	; () banked
  7885  001DAC  6F82               	movwf	strcpy@from& (0+255),b
  7886  001DAE  0EFF               	movlw	high STR_17
  7887  001DB0  0100               	movlb	0	; () banked
  7888  001DB2  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7889  001DB4  EC75  F020         	call	_strcpy	;wreg free
  7890                           
  7891                           ;RTC.c: 101: break;
  7892  001DB8  D04D               	goto	l5766
  7893  001DBA                     l5758:
  7894                           
  7895                           ;RTC.c: 103: strcpy(month, "NOV");
  7896  001DBA  0EBE               	movlw	low printRTC@month
  7897  001DBC  0100               	movlb	0	; () banked
  7898  001DBE  6F80               	movwf	strcpy@to& (0+255),b
  7899  001DC0  0E00               	movlw	high printRTC@month
  7900  001DC2  0100               	movlb	0	; () banked
  7901  001DC4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7902  001DC6  0EF6               	movlw	low STR_18
  7903  001DC8  0100               	movlb	0	; () banked
  7904  001DCA  6F82               	movwf	strcpy@from& (0+255),b
  7905  001DCC  0EFF               	movlw	high STR_18
  7906  001DCE  0100               	movlb	0	; () banked
  7907  001DD0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7908  001DD2  EC75  F020         	call	_strcpy	;wreg free
  7909                           
  7910                           ;RTC.c: 104: break;
  7911  001DD6  D03E               	goto	l5766
  7912  001DD8                     l5760:
  7913                           
  7914                           ;RTC.c: 106: strcpy(month, "DEC");
  7915  001DD8  0EBE               	movlw	low printRTC@month
  7916  001DDA  0100               	movlb	0	; () banked
  7917  001DDC  6F80               	movwf	strcpy@to& (0+255),b
  7918  001DDE  0E00               	movlw	high printRTC@month
  7919  001DE0  0100               	movlb	0	; () banked
  7920  001DE2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7921  001DE4  0ECE               	movlw	low STR_19
  7922  001DE6  0100               	movlb	0	; () banked
  7923  001DE8  6F82               	movwf	strcpy@from& (0+255),b
  7924  001DEA  0EFF               	movlw	high STR_19
  7925  001DEC  0100               	movlb	0	; () banked
  7926  001DEE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7927  001DF0  EC75  F020         	call	_strcpy	;wreg free
  7928                           
  7929                           ;RTC.c: 108: }
  7930                           
  7931                           ;RTC.c: 107: break;
  7932  001DF4  D02F               	goto	l5766
  7933  001DF6                     l5764:
  7934  001DF6  C0BC  F0AB         	movff	printRTC@RTC_month,??_printRTC
  7935  001DFA  C0BD  F0AC         	movff	printRTC@RTC_month+1,??_printRTC+1
  7936                           
  7937                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7938                           ; Switch size 1, requested type "space"
  7939                           ; Number of cases is 1, Range of values is 0 to 0
  7940                           ; switch strategies available:
  7941                           ; Name         Instructions Cycles
  7942                           ; simple_byte            4     3 (average)
  7943                           ;	Chosen strategy is simple_byte
  7944  001DFE  0100               	movlb	0	; () banked
  7945  001E00  51AC               	movf	(??_printRTC+1)& (0+255),w,b
  7946  001E02  0A00               	xorlw	0	; case 0
  7947  001E04  A4D8               	btfss	status,2,c
  7948  001E06  D026               	goto	l5766
  7949                           
  7950                           ; BSR set to: 0
  7951                           ; Switch size 1, requested type "space"
  7952                           ; Number of cases is 12, Range of values is 1 to 12
  7953                           ; switch strategies available:
  7954                           ; Name         Instructions Cycles
  7955                           ; simple_byte           37    19 (average)
  7956                           ;	Chosen strategy is simple_byte
  7957  001E08  0100               	movlb	0	; () banked
  7958  001E0A  51AB               	movf	??_printRTC& (0+255),w,b
  7959  001E0C  0A01               	xorlw	1	; case 1
  7960  001E0E  B4D8               	btfsc	status,2,c
  7961  001E10  D73E               	goto	l5738
  7962  001E12  0A03               	xorlw	3	; case 2
  7963  001E14  B4D8               	btfsc	status,2,c
  7964  001E16  D74A               	goto	l5740
  7965  001E18  0A01               	xorlw	1	; case 3
  7966  001E1A  B4D8               	btfsc	status,2,c
  7967  001E1C  D756               	goto	l5742
  7968  001E1E  0A07               	xorlw	7	; case 4
  7969  001E20  B4D8               	btfsc	status,2,c
  7970  001E22  D762               	goto	l5744
  7971  001E24  0A01               	xorlw	1	; case 5
  7972  001E26  B4D8               	btfsc	status,2,c
  7973  001E28  D76E               	goto	l5746
  7974  001E2A  0A03               	xorlw	3	; case 6
  7975  001E2C  B4D8               	btfsc	status,2,c
  7976  001E2E  D77A               	goto	l5748
  7977  001E30  0A01               	xorlw	1	; case 7
  7978  001E32  B4D8               	btfsc	status,2,c
  7979  001E34  D786               	goto	l5750
  7980  001E36  0A0F               	xorlw	15	; case 8
  7981  001E38  B4D8               	btfsc	status,2,c
  7982  001E3A  D792               	goto	l5752
  7983  001E3C  0A01               	xorlw	1	; case 9
  7984  001E3E  B4D8               	btfsc	status,2,c
  7985  001E40  D79E               	goto	l5754
  7986  001E42  0A03               	xorlw	3	; case 10
  7987  001E44  B4D8               	btfsc	status,2,c
  7988  001E46  D7AA               	goto	l5756
  7989  001E48  0A01               	xorlw	1	; case 11
  7990  001E4A  B4D8               	btfsc	status,2,c
  7991  001E4C  D7B6               	goto	l5758
  7992  001E4E  0A07               	xorlw	7	; case 12
  7993  001E50  B4D8               	btfsc	status,2,c
  7994  001E52  D7C2               	goto	l5760
  7995  001E54                     l5766:
  7996                           
  7997                           ;RTC.c: 109: lcdInst(0b10000000);;
  7998  001E54  0E80               	movlw	128
  7999  001E56  ECF0  F022         	call	_lcdInst
  8000                           
  8001                           ;RTC.c: 110: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
  8002  001E5A  0E42               	movlw	low STR_21
  8003  001E5C  0100               	movlb	0	; () banked
  8004  001E5E  6F8E               	movwf	printf@f& (0+255),b
  8005  001E60  0EFB               	movlw	high STR_21
  8006  001E62  0100               	movlb	0	; () banked
  8007  001E64  6F8F               	movwf	(printf@f+1)& (0+255),b
  8008  001E66  C0B6  F090         	movff	printRTC@INT_time+8,?_printf+2
  8009  001E6A  C0B7  F091         	movff	printRTC@INT_time+9,?_printf+3
  8010  001E6E  0EBE               	movlw	low printRTC@month
  8011  001E70  0100               	movlb	0	; () banked
  8012  001E72  6F92               	movwf	(?_printf+4)& (0+255),b
  8013  001E74  0E00               	movlw	high printRTC@month
  8014  001E76  0100               	movlb	0	; () banked
  8015  001E78  6F93               	movwf	(?_printf+5)& (0+255),b
  8016  001E7A  C0B2  F094         	movff	printRTC@INT_time+4,?_printf+6
  8017  001E7E  C0B3  F095         	movff	printRTC@INT_time+5,?_printf+7
  8018  001E82  C0B0  F096         	movff	printRTC@INT_time+2,?_printf+8
  8019  001E86  C0B1  F097         	movff	printRTC@INT_time+3,?_printf+9
  8020  001E8A  C0AE  F098         	movff	printRTC@INT_time,?_printf+10
  8021  001E8E  C0AF  F099         	movff	printRTC@INT_time+1,?_printf+11
  8022  001E92  EC9C  F008         	call	_printf	;wreg free
  8023  001E96  0012               	return		;funcret
  8024  001E98                     __end_of_printRTC:
  8025                           	opt stack 0
  8026                           tblptru	equ	0xFF8
  8027                           tblptrh	equ	0xFF7
  8028                           tblptrl	equ	0xFF6
  8029                           tablat	equ	0xFF5
  8030                           prodh	equ	0xFF4
  8031                           prodl	equ	0xFF3
  8032                           intcon	equ	0xFF2
  8033                           intcon2	equ	0xFF1
  8034                           intcon3	equ	0xFF0
  8035                           postinc0	equ	0xFEE
  8036                           wreg	equ	0xFE8
  8037                           postdec1	equ	0xFE5
  8038                           fsr1l	equ	0xFE1
  8039                           indf2	equ	0xFDF
  8040                           postinc2	equ	0xFDE
  8041                           postdec2	equ	0xFDD
  8042                           fsr2h	equ	0xFDA
  8043                           fsr2l	equ	0xFD9
  8044                           status	equ	0xFD8
  8045                           
  8046 ;; *************** function _strcpy *****************
  8047 ;; Defined at:
  8048 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
  8049 ;; Parameters:    Size  Location     Type
  8050 ;;  to              2    0[BANK0 ] PTR unsigned char 
  8051 ;;		 -> printRTC@month(4), UI@month(4), 
  8052 ;;  from            2    2[BANK0 ] PTR const unsigned char 
  8053 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
  8054 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
  8055 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
  8056 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
  8057 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
  8058 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
  8059 ;;		 -> STR_8(4), 
  8060 ;; Auto vars:     Size  Location     Type
  8061 ;;  cp              2    4[BANK0 ] PTR unsigned char 
  8062 ;;		 -> printRTC@month(4), UI@month(4), 
  8063 ;; Return value:  Size  Location     Type
  8064 ;;                  2    0[BANK0 ] PTR unsigned char 
  8065 ;; Registers used:
  8066 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  8067 ;; Tracked objects:
  8068 ;;		On entry : 0/0
  8069 ;;		On exit  : 0/0
  8070 ;;		Unchanged: 0/0
  8071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8072 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8073 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8074 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8075 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8076 ;;Total ram usage:        6 bytes
  8077 ;; Hardware stack levels used:    1
  8078 ;; Hardware stack levels required when called:    7
  8079 ;; This function calls:
  8080 ;;		Nothing
  8081 ;; This function is called by:
  8082 ;;		_UI
  8083 ;;		_printRTC
  8084 ;; This function uses a non-reentrant model
  8085 ;;
  8086                           
  8087                           	psect	text24
  8088  0040EA                     __ptext24:
  8089                           	opt stack 0
  8090  0040EA                     _strcpy:
  8091                           	opt stack 20
  8092                           
  8093                           ;incstack = 0
  8094  0040EA  C080  F084         	movff	strcpy@to,strcpy@cp
  8095  0040EE  C081  F085         	movff	strcpy@to+1,strcpy@cp+1
  8096  0040F2  D006               	goto	l5470
  8097  0040F4                     l5468:
  8098  0040F4  0100               	movlb	0	; () banked
  8099  0040F6  4B84               	infsnz	strcpy@cp& (0+255),f,b
  8100  0040F8  2B85               	incf	(strcpy@cp+1)& (0+255),f,b
  8101  0040FA  0100               	movlb	0	; () banked
  8102  0040FC  4B82               	infsnz	strcpy@from& (0+255),f,b
  8103  0040FE  2B83               	incf	(strcpy@from+1)& (0+255),f,b
  8104  004100                     l5470:
  8105  004100  C082  FFF6         	movff	strcpy@from,tblptrl
  8106  004104  C083  FFF7         	movff	strcpy@from+1,tblptrh
  8107  004108                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  8108  004108  6AF8               	clrf	tblptru,c
  8109  00410A                     	endif
  8110  00410A                     	if	0	;tblptru may be non-zero
  8111  00410A                     	endif
  8112  00410A  C084  FFD9         	movff	strcpy@cp,fsr2l
  8113  00410E  C085  FFDA         	movff	strcpy@cp+1,fsr2h
  8114  004112  0008               	tblrd		*
  8115  004114  CFF5 FFDF          	movff	tablat,indf2
  8116  004118  50DF               	movf	indf2,w,c
  8117  00411A  B4D8               	btfsc	status,2,c
  8118  00411C  0012               	return	
  8119  00411E  D7EA               	goto	l5468
  8120  004120                     __end_of_strcpy:
  8121                           	opt stack 0
  8122                           tblptru	equ	0xFF8
  8123                           tblptrh	equ	0xFF7
  8124                           tblptrl	equ	0xFF6
  8125                           tablat	equ	0xFF5
  8126                           prodh	equ	0xFF4
  8127                           prodl	equ	0xFF3
  8128                           intcon	equ	0xFF2
  8129                           intcon2	equ	0xFF1
  8130                           intcon3	equ	0xFF0
  8131                           postinc0	equ	0xFEE
  8132                           wreg	equ	0xFE8
  8133                           postdec1	equ	0xFE5
  8134                           fsr1l	equ	0xFE1
  8135                           indf2	equ	0xFDF
  8136                           postinc2	equ	0xFDE
  8137                           postdec2	equ	0xFDD
  8138                           fsr2h	equ	0xFDA
  8139                           fsr2l	equ	0xFD9
  8140                           status	equ	0xFD8
  8141                           
  8142 ;; *************** function _getRTC *****************
  8143 ;; Defined at:
  8144 ;;		line 44 in file "RTC.c"
  8145 ;; Parameters:    Size  Location     Type
  8146 ;;		None
  8147 ;; Auto vars:     Size  Location     Type
  8148 ;;  i               2    3[BANK0 ] int 
  8149 ;; Return value:  Size  Location     Type
  8150 ;;                  1    wreg      void 
  8151 ;; Registers used:
  8152 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8153 ;; Tracked objects:
  8154 ;;		On entry : 0/0
  8155 ;;		On exit  : 0/0
  8156 ;;		Unchanged: 0/0
  8157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8158 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8159 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8160 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8161 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8162 ;;Total ram usage:        2 bytes
  8163 ;; Hardware stack levels used:    1
  8164 ;; Hardware stack levels required when called:    9
  8165 ;; This function calls:
  8166 ;;		_I2C_Master_Read
  8167 ;;		_I2C_Master_Start
  8168 ;;		_I2C_Master_Stop
  8169 ;;		_I2C_Master_Write
  8170 ;; This function is called by:
  8171 ;;		_printRTC
  8172 ;;		_initSortTimer
  8173 ;; This function uses a non-reentrant model
  8174 ;;
  8175                           
  8176                           	psect	text25
  8177  003906                     __ptext25:
  8178                           	opt stack 0
  8179  003906                     _getRTC:
  8180                           	opt stack 18
  8181                           
  8182                           ;RTC.c: 48: I2C_Master_Start();
  8183                           
  8184                           ;incstack = 0
  8185  003906  EC16  F023         	call	_I2C_Master_Start	;wreg free
  8186                           
  8187                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
  8188  00390A  0E00               	movlw	0
  8189  00390C  0100               	movlb	0	; () banked
  8190  00390E  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8191  003910  0ED0               	movlw	208
  8192  003912  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8193  003914  EC04  F023         	call	_I2C_Master_Write	;wreg free
  8194                           
  8195                           ;RTC.c: 50: I2C_Master_Write(0x00);
  8196  003918  0E00               	movlw	0
  8197  00391A  0100               	movlb	0	; () banked
  8198  00391C  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8199  00391E  0E00               	movlw	0
  8200  003920  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8201  003922  EC04  F023         	call	_I2C_Master_Write	;wreg free
  8202                           
  8203                           ;RTC.c: 51: I2C_Master_Stop();
  8204  003926  EC12  F023         	call	_I2C_Master_Stop	;wreg free
  8205                           
  8206                           ;RTC.c: 54: I2C_Master_Start();
  8207  00392A  EC16  F023         	call	_I2C_Master_Start	;wreg free
  8208                           
  8209                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
  8210  00392E  0E00               	movlw	0
  8211  003930  0100               	movlb	0	; () banked
  8212  003932  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8213  003934  0ED1               	movlw	209
  8214  003936  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8215  003938  EC04  F023         	call	_I2C_Master_Write	;wreg free
  8216                           
  8217                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
  8218  00393C  0E00               	movlw	0
  8219  00393E  0100               	movlb	0	; () banked
  8220  003940  6F84               	movwf	(getRTC@i+1)& (0+255),b
  8221  003942  0E00               	movlw	0
  8222  003944  6F83               	movwf	getRTC@i& (0+255),b
  8223  003946                     l5476:
  8224                           
  8225                           ; BSR set to: 0
  8226  003946  0100               	movlb	0	; () banked
  8227  003948  BF84               	btfsc	(getRTC@i+1)& (0+255),7,b
  8228  00394A  D008               	goto	l5480
  8229  00394C  0100               	movlb	0	; () banked
  8230  00394E  5184               	movf	(getRTC@i+1)& (0+255),w,b
  8231  003950  E115               	bnz	l5486
  8232  003952  0E06               	movlw	6
  8233  003954  0100               	movlb	0	; () banked
  8234  003956  5D83               	subwf	getRTC@i& (0+255),w,b
  8235  003958  B0D8               	btfsc	status,0,c
  8236  00395A  D010               	goto	l5486
  8237  00395C                     l5480:
  8238                           
  8239                           ; BSR set to: 0
  8240                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
  8241  00395C  0E24               	movlw	low _time
  8242  00395E  0100               	movlb	0	; () banked
  8243  003960  2583               	addwf	getRTC@i& (0+255),w,b
  8244  003962  6ED9               	movwf	fsr2l,c
  8245  003964  0E01               	movlw	high _time
  8246  003966  0100               	movlb	0	; () banked
  8247  003968  2184               	addwfc	(getRTC@i+1)& (0+255),w,b
  8248  00396A  6EDA               	movwf	fsr2h,c
  8249  00396C  0E01               	movlw	1
  8250  00396E  ECB3  F021         	call	_I2C_Master_Read
  8251  003972  6EDF               	movwf	indf2,c
  8252  003974  0100               	movlb	0	; () banked
  8253  003976  4B83               	infsnz	getRTC@i& (0+255),f,b
  8254  003978  2B84               	incf	(getRTC@i+1)& (0+255),f,b
  8255  00397A  D7E5               	goto	l5476
  8256  00397C                     l5486:
  8257                           
  8258                           ; BSR set to: 0
  8259                           ;RTC.c: 58: }
  8260                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
  8261  00397C  0E00               	movlw	0
  8262  00397E  ECB3  F021         	call	_I2C_Master_Read
  8263  003982  0101               	movlb	1	; () banked
  8264  003984  6F2A               	movwf	(_time+6)& (0+255),b
  8265                           
  8266                           ;RTC.c: 60: I2C_Master_Stop();
  8267  003986  EC12  F023         	call	_I2C_Master_Stop	;wreg free
  8268  00398A  0012               	return		;funcret
  8269  00398C                     __end_of_getRTC:
  8270                           	opt stack 0
  8271                           tblptru	equ	0xFF8
  8272                           tblptrh	equ	0xFF7
  8273                           tblptrl	equ	0xFF6
  8274                           tablat	equ	0xFF5
  8275                           prodh	equ	0xFF4
  8276                           prodl	equ	0xFF3
  8277                           intcon	equ	0xFF2
  8278                           intcon2	equ	0xFF1
  8279                           intcon3	equ	0xFF0
  8280                           postinc0	equ	0xFEE
  8281                           wreg	equ	0xFE8
  8282                           postdec1	equ	0xFE5
  8283                           fsr1l	equ	0xFE1
  8284                           indf2	equ	0xFDF
  8285                           postinc2	equ	0xFDE
  8286                           postdec2	equ	0xFDD
  8287                           fsr2h	equ	0xFDA
  8288                           fsr2l	equ	0xFD9
  8289                           status	equ	0xFD8
  8290                           
  8291 ;; *************** function _I2C_Master_Write *****************
  8292 ;; Defined at:
  8293 ;;		line 49 in file "I2C.c"
  8294 ;; Parameters:    Size  Location     Type
  8295 ;;  d               2    1[BANK0 ] unsigned int 
  8296 ;; Auto vars:     Size  Location     Type
  8297 ;;		None
  8298 ;; Return value:  Size  Location     Type
  8299 ;;                  1    wreg      void 
  8300 ;; Registers used:
  8301 ;;		wreg, status,2, status,0, cstack
  8302 ;; Tracked objects:
  8303 ;;		On entry : 0/0
  8304 ;;		On exit  : 0/0
  8305 ;;		Unchanged: 0/0
  8306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8307 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8308 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8309 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8310 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8311 ;;Total ram usage:        2 bytes
  8312 ;; Hardware stack levels used:    1
  8313 ;; Hardware stack levels required when called:    8
  8314 ;; This function calls:
  8315 ;;		_I2C_Master_Wait
  8316 ;; This function is called by:
  8317 ;;		_loadRTC
  8318 ;;		_getRTC
  8319 ;; This function uses a non-reentrant model
  8320 ;;
  8321                           
  8322                           	psect	text26
  8323  004608                     __ptext26:
  8324                           	opt stack 0
  8325  004608                     _I2C_Master_Write:
  8326                           	opt stack 18
  8327                           
  8328                           ;I2C.c: 51: I2C_Master_Wait();
  8329                           
  8330                           ;incstack = 0
  8331  004608  ECD5  F022         	call	_I2C_Master_Wait	;wreg free
  8332                           
  8333                           ;I2C.c: 52: SSPBUF = d;
  8334  00460C  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  8335  004610  0012               	return		;funcret
  8336  004612                     __end_of_I2C_Master_Write:
  8337                           	opt stack 0
  8338                           tblptru	equ	0xFF8
  8339                           tblptrh	equ	0xFF7
  8340                           tblptrl	equ	0xFF6
  8341                           tablat	equ	0xFF5
  8342                           prodh	equ	0xFF4
  8343                           prodl	equ	0xFF3
  8344                           intcon	equ	0xFF2
  8345                           intcon2	equ	0xFF1
  8346                           intcon3	equ	0xFF0
  8347                           postinc0	equ	0xFEE
  8348                           wreg	equ	0xFE8
  8349                           postdec1	equ	0xFE5
  8350                           fsr1l	equ	0xFE1
  8351                           indf2	equ	0xFDF
  8352                           postinc2	equ	0xFDE
  8353                           postdec2	equ	0xFDD
  8354                           fsr2h	equ	0xFDA
  8355                           fsr2l	equ	0xFD9
  8356                           status	equ	0xFD8
  8357                           
  8358 ;; *************** function _I2C_Master_Stop *****************
  8359 ;; Defined at:
  8360 ;;		line 43 in file "I2C.c"
  8361 ;; Parameters:    Size  Location     Type
  8362 ;;		None
  8363 ;; Auto vars:     Size  Location     Type
  8364 ;;		None
  8365 ;; Return value:  Size  Location     Type
  8366 ;;                  1    wreg      void 
  8367 ;; Registers used:
  8368 ;;		wreg, status,2, status,0, cstack
  8369 ;; Tracked objects:
  8370 ;;		On entry : 0/0
  8371 ;;		On exit  : 0/0
  8372 ;;		Unchanged: 0/0
  8373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8374 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8375 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8376 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8377 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8378 ;;Total ram usage:        0 bytes
  8379 ;; Hardware stack levels used:    1
  8380 ;; Hardware stack levels required when called:    8
  8381 ;; This function calls:
  8382 ;;		_I2C_Master_Wait
  8383 ;; This function is called by:
  8384 ;;		_loadRTC
  8385 ;;		_getRTC
  8386 ;; This function uses a non-reentrant model
  8387 ;;
  8388                           
  8389                           	psect	text27
  8390  004624                     __ptext27:
  8391                           	opt stack 0
  8392  004624                     _I2C_Master_Stop:
  8393                           	opt stack 18
  8394                           
  8395                           ;I2C.c: 45: I2C_Master_Wait();
  8396                           
  8397                           ;incstack = 0
  8398  004624  ECD5  F022         	call	_I2C_Master_Wait	;wreg free
  8399                           
  8400                           ;I2C.c: 46: PEN = 1;
  8401  004628  84C5               	bsf	4037,2,c	;volatile
  8402  00462A  0012               	return		;funcret
  8403  00462C                     __end_of_I2C_Master_Stop:
  8404                           	opt stack 0
  8405                           tblptru	equ	0xFF8
  8406                           tblptrh	equ	0xFF7
  8407                           tblptrl	equ	0xFF6
  8408                           tablat	equ	0xFF5
  8409                           prodh	equ	0xFF4
  8410                           prodl	equ	0xFF3
  8411                           intcon	equ	0xFF2
  8412                           intcon2	equ	0xFF1
  8413                           intcon3	equ	0xFF0
  8414                           postinc0	equ	0xFEE
  8415                           wreg	equ	0xFE8
  8416                           postdec1	equ	0xFE5
  8417                           fsr1l	equ	0xFE1
  8418                           indf2	equ	0xFDF
  8419                           postinc2	equ	0xFDE
  8420                           postdec2	equ	0xFDD
  8421                           fsr2h	equ	0xFDA
  8422                           fsr2l	equ	0xFD9
  8423                           status	equ	0xFD8
  8424                           
  8425 ;; *************** function _I2C_Master_Start *****************
  8426 ;; Defined at:
  8427 ;;		line 31 in file "I2C.c"
  8428 ;; Parameters:    Size  Location     Type
  8429 ;;		None
  8430 ;; Auto vars:     Size  Location     Type
  8431 ;;		None
  8432 ;; Return value:  Size  Location     Type
  8433 ;;                  1    wreg      void 
  8434 ;; Registers used:
  8435 ;;		wreg, status,2, status,0, cstack
  8436 ;; Tracked objects:
  8437 ;;		On entry : 0/0
  8438 ;;		On exit  : 0/0
  8439 ;;		Unchanged: 0/0
  8440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8441 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8442 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8443 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8444 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8445 ;;Total ram usage:        0 bytes
  8446 ;; Hardware stack levels used:    1
  8447 ;; Hardware stack levels required when called:    8
  8448 ;; This function calls:
  8449 ;;		_I2C_Master_Wait
  8450 ;; This function is called by:
  8451 ;;		_loadRTC
  8452 ;;		_getRTC
  8453 ;; This function uses a non-reentrant model
  8454 ;;
  8455                           
  8456                           	psect	text28
  8457  00462C                     __ptext28:
  8458                           	opt stack 0
  8459  00462C                     _I2C_Master_Start:
  8460                           	opt stack 18
  8461                           
  8462                           ;I2C.c: 33: I2C_Master_Wait();
  8463                           
  8464                           ;incstack = 0
  8465  00462C  ECD5  F022         	call	_I2C_Master_Wait	;wreg free
  8466                           
  8467                           ;I2C.c: 34: SEN = 1;
  8468  004630  80C5               	bsf	4037,0,c	;volatile
  8469  004632  0012               	return		;funcret
  8470  004634                     __end_of_I2C_Master_Start:
  8471                           	opt stack 0
  8472                           tblptru	equ	0xFF8
  8473                           tblptrh	equ	0xFF7
  8474                           tblptrl	equ	0xFF6
  8475                           tablat	equ	0xFF5
  8476                           prodh	equ	0xFF4
  8477                           prodl	equ	0xFF3
  8478                           intcon	equ	0xFF2
  8479                           intcon2	equ	0xFF1
  8480                           intcon3	equ	0xFF0
  8481                           postinc0	equ	0xFEE
  8482                           wreg	equ	0xFE8
  8483                           postdec1	equ	0xFE5
  8484                           fsr1l	equ	0xFE1
  8485                           indf2	equ	0xFDF
  8486                           postinc2	equ	0xFDE
  8487                           postdec2	equ	0xFDD
  8488                           fsr2h	equ	0xFDA
  8489                           fsr2l	equ	0xFD9
  8490                           status	equ	0xFD8
  8491                           
  8492 ;; *************** function _I2C_Master_Read *****************
  8493 ;; Defined at:
  8494 ;;		line 55 in file "I2C.c"
  8495 ;; Parameters:    Size  Location     Type
  8496 ;;  a               1    wreg     unsigned char 
  8497 ;; Auto vars:     Size  Location     Type
  8498 ;;  a               1    1[BANK0 ] unsigned char 
  8499 ;;  temp            1    2[BANK0 ] unsigned char 
  8500 ;; Return value:  Size  Location     Type
  8501 ;;                  1    wreg      unsigned char 
  8502 ;; Registers used:
  8503 ;;		wreg, status,2, status,0, cstack
  8504 ;; Tracked objects:
  8505 ;;		On entry : 0/0
  8506 ;;		On exit  : 0/0
  8507 ;;		Unchanged: 0/0
  8508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8509 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8510 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8511 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8512 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8513 ;;Total ram usage:        2 bytes
  8514 ;; Hardware stack levels used:    1
  8515 ;; Hardware stack levels required when called:    8
  8516 ;; This function calls:
  8517 ;;		_I2C_Master_Wait
  8518 ;; This function is called by:
  8519 ;;		_getRTC
  8520 ;; This function uses a non-reentrant model
  8521 ;;
  8522                           
  8523                           	psect	text29
  8524  004366                     __ptext29:
  8525                           	opt stack 0
  8526  004366                     _I2C_Master_Read:
  8527                           	opt stack 18
  8528                           
  8529                           ;incstack = 0
  8530                           ;I2C_Master_Read@a stored from wreg
  8531  004366  0100               	movlb	0	; () banked
  8532  004368  6F81               	movwf	I2C_Master_Read@a& (0+255),b
  8533                           
  8534                           ;I2C.c: 57: unsigned char temp;
  8535                           ;I2C.c: 58: I2C_Master_Wait();
  8536  00436A  ECD5  F022         	call	_I2C_Master_Wait	;wreg free
  8537                           
  8538                           ;I2C.c: 59: RCEN = 1;
  8539  00436E  86C5               	bsf	4037,3,c	;volatile
  8540                           
  8541                           ;I2C.c: 60: I2C_Master_Wait();
  8542  004370  ECD5  F022         	call	_I2C_Master_Wait	;wreg free
  8543                           
  8544                           ;I2C.c: 61: temp = SSPBUF;
  8545  004374  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
  8546                           
  8547                           ;I2C.c: 62: I2C_Master_Wait();
  8548  004378  ECD5  F022         	call	_I2C_Master_Wait	;wreg free
  8549                           
  8550                           ;I2C.c: 63: ACKDT = (a)?0:1;
  8551  00437C  0100               	movlb	0	; () banked
  8552  00437E  5181               	movf	I2C_Master_Read@a& (0+255),w,b
  8553  004380  0100               	movlb	0	; () banked
  8554  004382  A4D8               	btfss	status,2,c
  8555  004384  D002               	goto	u3500
  8556  004386  8AC5               	bsf	4037,5,c	;volatile
  8557  004388  D001               	goto	l5170
  8558  00438A                     u3500:
  8559  00438A  9AC5               	bcf	4037,5,c	;volatile
  8560  00438C                     l5170:
  8561                           
  8562                           ;I2C.c: 64: ACKEN = 1;
  8563  00438C  88C5               	bsf	4037,4,c	;volatile
  8564                           
  8565                           ;I2C.c: 65: return temp;
  8566  00438E  0100               	movlb	0	; () banked
  8567  004390  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
  8568  004392  0012               	return	
  8569  004394                     __end_of_I2C_Master_Read:
  8570                           	opt stack 0
  8571                           tblptru	equ	0xFF8
  8572                           tblptrh	equ	0xFF7
  8573                           tblptrl	equ	0xFF6
  8574                           tablat	equ	0xFF5
  8575                           prodh	equ	0xFF4
  8576                           prodl	equ	0xFF3
  8577                           intcon	equ	0xFF2
  8578                           intcon2	equ	0xFF1
  8579                           intcon3	equ	0xFF0
  8580                           postinc0	equ	0xFEE
  8581                           wreg	equ	0xFE8
  8582                           postdec1	equ	0xFE5
  8583                           fsr1l	equ	0xFE1
  8584                           indf2	equ	0xFDF
  8585                           postinc2	equ	0xFDE
  8586                           postdec2	equ	0xFDD
  8587                           fsr2h	equ	0xFDA
  8588                           fsr2l	equ	0xFD9
  8589                           status	equ	0xFD8
  8590                           
  8591 ;; *************** function _I2C_Master_Wait *****************
  8592 ;; Defined at:
  8593 ;;		line 26 in file "I2C.c"
  8594 ;; Parameters:    Size  Location     Type
  8595 ;;		None
  8596 ;; Auto vars:     Size  Location     Type
  8597 ;;		None
  8598 ;; Return value:  Size  Location     Type
  8599 ;;                  1    wreg      void 
  8600 ;; Registers used:
  8601 ;;		wreg, status,2, status,0
  8602 ;; Tracked objects:
  8603 ;;		On entry : 0/0
  8604 ;;		On exit  : 0/0
  8605 ;;		Unchanged: 0/0
  8606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8607 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8608 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8609 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8610 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8611 ;;Total ram usage:        1 bytes
  8612 ;; Hardware stack levels used:    1
  8613 ;; Hardware stack levels required when called:    7
  8614 ;; This function calls:
  8615 ;;		Nothing
  8616 ;; This function is called by:
  8617 ;;		_I2C_Master_Start
  8618 ;;		_I2C_Master_Stop
  8619 ;;		_I2C_Master_Write
  8620 ;;		_I2C_Master_Read
  8621 ;;		_I2C_Master_RepeatedStart
  8622 ;; This function uses a non-reentrant model
  8623 ;;
  8624                           
  8625                           	psect	text30
  8626  0045AA                     __ptext30:
  8627                           	opt stack 0
  8628  0045AA                     _I2C_Master_Wait:
  8629                           	opt stack 18
  8630  0045AA                     l66:
  8631  0045AA  B4C7               	btfsc	4039,2,c	;volatile
  8632  0045AC  D7FE               	goto	l66
  8633  0045AE  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
  8634  0045B2  0E1F               	movlw	31
  8635  0045B4  0100               	movlb	0	; () banked
  8636  0045B6  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
  8637  0045B8  B4D8               	btfsc	status,2,c
  8638  0045BA  0012               	return	
  8639  0045BC  D7F6               	goto	l66
  8640  0045BE                     __end_of_I2C_Master_Wait:
  8641                           	opt stack 0
  8642                           tblptru	equ	0xFF8
  8643                           tblptrh	equ	0xFF7
  8644                           tblptrl	equ	0xFF6
  8645                           tablat	equ	0xFF5
  8646                           prodh	equ	0xFF4
  8647                           prodl	equ	0xFF3
  8648                           intcon	equ	0xFF2
  8649                           intcon2	equ	0xFF1
  8650                           intcon3	equ	0xFF0
  8651                           postinc0	equ	0xFEE
  8652                           wreg	equ	0xFE8
  8653                           postdec1	equ	0xFE5
  8654                           fsr1l	equ	0xFE1
  8655                           indf2	equ	0xFDF
  8656                           postinc2	equ	0xFDE
  8657                           postdec2	equ	0xFDD
  8658                           fsr2h	equ	0xFDA
  8659                           fsr2l	equ	0xFD9
  8660                           status	equ	0xFD8
  8661                           
  8662 ;; *************** function _change_state_to_menu_22 *****************
  8663 ;; Defined at:
  8664 ;;		line 498 in file "UI.c"
  8665 ;; Parameters:    Size  Location     Type
  8666 ;;		None
  8667 ;; Auto vars:     Size  Location     Type
  8668 ;;		None
  8669 ;; Return value:  Size  Location     Type
  8670 ;;                  1    wreg      void 
  8671 ;; Registers used:
  8672 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8673 ;; Tracked objects:
  8674 ;;		On entry : 0/0
  8675 ;;		On exit  : 0/0
  8676 ;;		Unchanged: 0/0
  8677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8678 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8679 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8680 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8681 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8682 ;;Total ram usage:        0 bytes
  8683 ;; Hardware stack levels used:    1
  8684 ;; Hardware stack levels required when called:   10
  8685 ;; This function calls:
  8686 ;;		_lcdInst
  8687 ;;		_printf
  8688 ;; This function is called by:
  8689 ;;		_UI
  8690 ;; This function uses a non-reentrant model
  8691 ;;
  8692                           
  8693                           	psect	text31
  8694  00407A                     __ptext31:
  8695                           	opt stack 0
  8696  00407A                     _change_state_to_menu_22:
  8697                           	opt stack 19
  8698                           
  8699                           ;UI.c: 499: cur_state = 22;
  8700                           
  8701                           ; BSR set to: 0
  8702                           ;incstack = 0
  8703  00407A  0E00               	movlw	0
  8704  00407C  0100               	movlb	0	; () banked
  8705  00407E  6FE1               	movwf	(_cur_state+1)& (0+255),b
  8706  004080  0E16               	movlw	22
  8707  004082  6FE0               	movwf	_cur_state& (0+255),b
  8708                           
  8709                           ; BSR set to: 0
  8710                           ;UI.c: 501: lcdInst(0b10000000);;
  8711  004084  0E80               	movlw	128
  8712  004086  ECF0  F022         	call	_lcdInst
  8713                           
  8714                           ;UI.c: 502: printf("2. SORT        <");
  8715  00408A  0EEC               	movlw	low STR_34
  8716  00408C  0100               	movlb	0	; () banked
  8717  00408E  6F8E               	movwf	printf@f& (0+255),b
  8718  004090  0EFD               	movlw	high STR_34
  8719  004092  0100               	movlb	0	; () banked
  8720  004094  6F8F               	movwf	(printf@f+1)& (0+255),b
  8721  004096  EC9C  F008         	call	_printf	;wreg free
  8722                           
  8723                           ;UI.c: 503: lcdInst(0b11000000);;
  8724  00409A  0EC0               	movlw	192
  8725  00409C  ECF0  F022         	call	_lcdInst
  8726                           
  8727                           ;UI.c: 504: printf("3. LOGS         ");
  8728  0040A0  0E31               	movlw	low STR_36
  8729  0040A2  0100               	movlb	0	; () banked
  8730  0040A4  6F8E               	movwf	printf@f& (0+255),b
  8731  0040A6  0EFD               	movlw	high STR_36
  8732  0040A8  0100               	movlb	0	; () banked
  8733  0040AA  6F8F               	movwf	(printf@f+1)& (0+255),b
  8734  0040AC  EC9C  F008         	call	_printf	;wreg free
  8735  0040B0  0012               	return		;funcret
  8736  0040B2                     __end_of_change_state_to_menu_22:
  8737                           	opt stack 0
  8738                           tblptru	equ	0xFF8
  8739                           tblptrh	equ	0xFF7
  8740                           tblptrl	equ	0xFF6
  8741                           tablat	equ	0xFF5
  8742                           prodh	equ	0xFF4
  8743                           prodl	equ	0xFF3
  8744                           intcon	equ	0xFF2
  8745                           intcon2	equ	0xFF1
  8746                           intcon3	equ	0xFF0
  8747                           postinc0	equ	0xFEE
  8748                           wreg	equ	0xFE8
  8749                           postdec1	equ	0xFE5
  8750                           fsr1l	equ	0xFE1
  8751                           indf2	equ	0xFDF
  8752                           postinc2	equ	0xFDE
  8753                           postdec2	equ	0xFDD
  8754                           fsr2h	equ	0xFDA
  8755                           fsr2l	equ	0xFD9
  8756                           status	equ	0xFD8
  8757                           
  8758 ;; *************** function _change_state_to_menu_12 *****************
  8759 ;; Defined at:
  8760 ;;		line 490 in file "UI.c"
  8761 ;; Parameters:    Size  Location     Type
  8762 ;;		None
  8763 ;; Auto vars:     Size  Location     Type
  8764 ;;		None
  8765 ;; Return value:  Size  Location     Type
  8766 ;;                  1    wreg      void 
  8767 ;; Registers used:
  8768 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8769 ;; Tracked objects:
  8770 ;;		On entry : 0/0
  8771 ;;		On exit  : 0/0
  8772 ;;		Unchanged: 0/0
  8773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8774 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8775 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8776 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8777 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8778 ;;Total ram usage:        0 bytes
  8779 ;; Hardware stack levels used:    1
  8780 ;; Hardware stack levels required when called:   10
  8781 ;; This function calls:
  8782 ;;		_lcdInst
  8783 ;;		_printf
  8784 ;; This function is called by:
  8785 ;;		_UI
  8786 ;; This function uses a non-reentrant model
  8787 ;;
  8788                           
  8789                           	psect	text32
  8790  0040B2                     __ptext32:
  8791                           	opt stack 0
  8792  0040B2                     _change_state_to_menu_12:
  8793                           	opt stack 19
  8794                           
  8795                           ;UI.c: 491: cur_state = 12;
  8796                           
  8797                           ;incstack = 0
  8798  0040B2  0E00               	movlw	0
  8799  0040B4  0100               	movlb	0	; () banked
  8800  0040B6  6FE1               	movwf	(_cur_state+1)& (0+255),b
  8801  0040B8  0E0C               	movlw	12
  8802  0040BA  6FE0               	movwf	_cur_state& (0+255),b
  8803                           
  8804                           ; BSR set to: 0
  8805                           ;UI.c: 493: lcdInst(0b10000000);;
  8806  0040BC  0E80               	movlw	128
  8807  0040BE  ECF0  F022         	call	_lcdInst
  8808                           
  8809                           ;UI.c: 494: printf("1. DATE/TIME    ");
  8810  0040C2  0E53               	movlw	low STR_33
  8811  0040C4  0100               	movlb	0	; () banked
  8812  0040C6  6F8E               	movwf	printf@f& (0+255),b
  8813  0040C8  0EFD               	movlw	high STR_33
  8814  0040CA  0100               	movlb	0	; () banked
  8815  0040CC  6F8F               	movwf	(printf@f+1)& (0+255),b
  8816  0040CE  EC9C  F008         	call	_printf	;wreg free
  8817                           
  8818                           ;UI.c: 495: lcdInst(0b11000000);;
  8819  0040D2  0EC0               	movlw	192
  8820  0040D4  ECF0  F022         	call	_lcdInst
  8821                           
  8822                           ;UI.c: 496: printf("2. SORT        <");
  8823  0040D8  0EEC               	movlw	low STR_34
  8824  0040DA  0100               	movlb	0	; () banked
  8825  0040DC  6F8E               	movwf	printf@f& (0+255),b
  8826  0040DE  0EFD               	movlw	high STR_34
  8827  0040E0  0100               	movlb	0	; () banked
  8828  0040E2  6F8F               	movwf	(printf@f+1)& (0+255),b
  8829  0040E4  EC9C  F008         	call	_printf	;wreg free
  8830  0040E8  0012               	return		;funcret
  8831  0040EA                     __end_of_change_state_to_menu_12:
  8832                           	opt stack 0
  8833                           tblptru	equ	0xFF8
  8834                           tblptrh	equ	0xFF7
  8835                           tblptrl	equ	0xFF6
  8836                           tablat	equ	0xFF5
  8837                           prodh	equ	0xFF4
  8838                           prodl	equ	0xFF3
  8839                           intcon	equ	0xFF2
  8840                           intcon2	equ	0xFF1
  8841                           intcon3	equ	0xFF0
  8842                           postinc0	equ	0xFEE
  8843                           wreg	equ	0xFE8
  8844                           postdec1	equ	0xFE5
  8845                           fsr1l	equ	0xFE1
  8846                           indf2	equ	0xFDF
  8847                           postinc2	equ	0xFDE
  8848                           postdec2	equ	0xFDD
  8849                           fsr2h	equ	0xFDA
  8850                           fsr2l	equ	0xFD9
  8851                           status	equ	0xFD8
  8852                           
  8853 ;; *************** function ___awmod *****************
  8854 ;; Defined at:
  8855 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  8856 ;; Parameters:    Size  Location     Type
  8857 ;;  dividend        2    0[BANK0 ] int 
  8858 ;;  divisor         2    2[BANK0 ] int 
  8859 ;; Auto vars:     Size  Location     Type
  8860 ;;  sign            1    5[BANK0 ] unsigned char 
  8861 ;;  counter         1    4[BANK0 ] unsigned char 
  8862 ;; Return value:  Size  Location     Type
  8863 ;;                  2    0[BANK0 ] int 
  8864 ;; Registers used:
  8865 ;;		wreg, status,2, status,0
  8866 ;; Tracked objects:
  8867 ;;		On entry : 0/0
  8868 ;;		On exit  : 0/0
  8869 ;;		Unchanged: 0/0
  8870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8871 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8872 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8873 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8874 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8875 ;;Total ram usage:        6 bytes
  8876 ;; Hardware stack levels used:    1
  8877 ;; Hardware stack levels required when called:    7
  8878 ;; This function calls:
  8879 ;;		Nothing
  8880 ;; This function is called by:
  8881 ;;		_UI
  8882 ;; This function uses a non-reentrant model
  8883 ;;
  8884                           
  8885                           	psect	text33
  8886  003750                     __ptext33:
  8887                           	opt stack 0
  8888  003750                     ___awmod:
  8889                           	opt stack 22
  8890                           
  8891                           ;incstack = 0
  8892  003750  0E00               	movlw	0
  8893  003752  0100               	movlb	0	; () banked
  8894  003754  6F85               	movwf	___awmod@sign& (0+255),b
  8895                           
  8896                           ; BSR set to: 0
  8897  003756  0100               	movlb	0	; () banked
  8898  003758  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
  8899  00375A  D008               	goto	l7164
  8900                           
  8901                           ; BSR set to: 0
  8902  00375C  0100               	movlb	0	; () banked
  8903  00375E  6D80               	negf	___awmod@dividend& (0+255),b
  8904  003760  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  8905  003762  B0D8               	btfsc	status,0,c
  8906  003764  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  8907                           
  8908                           ; BSR set to: 0
  8909  003766  0E01               	movlw	1
  8910  003768  0100               	movlb	0	; () banked
  8911  00376A  6F85               	movwf	___awmod@sign& (0+255),b
  8912  00376C                     l7164:
  8913                           
  8914                           ; BSR set to: 0
  8915  00376C  0100               	movlb	0	; () banked
  8916  00376E  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  8917  003770  D005               	goto	l7168
  8918                           
  8919                           ; BSR set to: 0
  8920  003772  0100               	movlb	0	; () banked
  8921  003774  6D82               	negf	___awmod@divisor& (0+255),b
  8922  003776  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
  8923  003778  B0D8               	btfsc	status,0,c
  8924  00377A  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
  8925  00377C                     l7168:
  8926                           
  8927                           ; BSR set to: 0
  8928  00377C  0100               	movlb	0	; () banked
  8929  00377E  5182               	movf	___awmod@divisor& (0+255),w,b
  8930  003780  0100               	movlb	0	; () banked
  8931  003782  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  8932  003784  B4D8               	btfsc	status,2,c
  8933  003786  D026               	goto	l7184
  8934                           
  8935                           ; BSR set to: 0
  8936  003788  0E01               	movlw	1
  8937  00378A  0100               	movlb	0	; () banked
  8938  00378C  6F84               	movwf	___awmod@counter& (0+255),b
  8939  00378E  D006               	goto	l7174
  8940  003790                     l7172:
  8941                           
  8942                           ; BSR set to: 0
  8943  003790  0100               	movlb	0	; () banked
  8944  003792  90D8               	bcf	status,0,c
  8945  003794  3782               	rlcf	___awmod@divisor& (0+255),f,b
  8946  003796  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  8947  003798  0100               	movlb	0	; () banked
  8948  00379A  2B84               	incf	___awmod@counter& (0+255),f,b
  8949  00379C                     l7174:
  8950                           
  8951                           ; BSR set to: 0
  8952  00379C  0100               	movlb	0	; () banked
  8953  00379E  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  8954  0037A0  D7F7               	goto	l7172
  8955  0037A2                     l7176:
  8956                           
  8957                           ; BSR set to: 0
  8958  0037A2  0100               	movlb	0	; () banked
  8959  0037A4  5182               	movf	___awmod@divisor& (0+255),w,b
  8960  0037A6  0100               	movlb	0	; () banked
  8961  0037A8  5D80               	subwf	___awmod@dividend& (0+255),w,b
  8962  0037AA  0100               	movlb	0	; () banked
  8963  0037AC  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  8964  0037AE  0100               	movlb	0	; () banked
  8965  0037B0  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  8966  0037B2  A0D8               	btfss	status,0,c
  8967  0037B4  D008               	goto	l7180
  8968                           
  8969                           ; BSR set to: 0
  8970  0037B6  0100               	movlb	0	; () banked
  8971  0037B8  5182               	movf	___awmod@divisor& (0+255),w,b
  8972  0037BA  0100               	movlb	0	; () banked
  8973  0037BC  5F80               	subwf	___awmod@dividend& (0+255),f,b
  8974  0037BE  0100               	movlb	0	; () banked
  8975  0037C0  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  8976  0037C2  0100               	movlb	0	; () banked
  8977  0037C4  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  8978  0037C6                     l7180:
  8979                           
  8980                           ; BSR set to: 0
  8981  0037C6  0100               	movlb	0	; () banked
  8982  0037C8  90D8               	bcf	status,0,c
  8983  0037CA  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  8984  0037CC  3382               	rrcf	___awmod@divisor& (0+255),f,b
  8985                           
  8986                           ; BSR set to: 0
  8987  0037CE  0100               	movlb	0	; () banked
  8988  0037D0  2F84               	decfsz	___awmod@counter& (0+255),f,b
  8989  0037D2  D7E7               	goto	l7176
  8990  0037D4                     l7184:
  8991                           
  8992                           ; BSR set to: 0
  8993  0037D4  0100               	movlb	0	; () banked
  8994  0037D6  5185               	movf	___awmod@sign& (0+255),w,b
  8995  0037D8  0100               	movlb	0	; () banked
  8996  0037DA  B4D8               	btfsc	status,2,c
  8997  0037DC  D005               	goto	l7188
  8998                           
  8999                           ; BSR set to: 0
  9000  0037DE  0100               	movlb	0	; () banked
  9001  0037E0  6D80               	negf	___awmod@dividend& (0+255),b
  9002  0037E2  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  9003  0037E4  B0D8               	btfsc	status,0,c
  9004  0037E6  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  9005  0037E8                     l7188:
  9006                           
  9007                           ; BSR set to: 0
  9008  0037E8  C080  F080         	movff	___awmod@dividend,?___awmod
  9009  0037EC  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
  9010  0037F0  0012               	return	
  9011  0037F2                     __end_of___awmod:
  9012                           	opt stack 0
  9013                           tblptru	equ	0xFF8
  9014                           tblptrh	equ	0xFF7
  9015                           tblptrl	equ	0xFF6
  9016                           tablat	equ	0xFF5
  9017                           prodh	equ	0xFF4
  9018                           prodl	equ	0xFF3
  9019                           intcon	equ	0xFF2
  9020                           intcon2	equ	0xFF1
  9021                           intcon3	equ	0xFF0
  9022                           postinc0	equ	0xFEE
  9023                           wreg	equ	0xFE8
  9024                           postdec1	equ	0xFE5
  9025                           fsr1l	equ	0xFE1
  9026                           indf2	equ	0xFDF
  9027                           postinc2	equ	0xFDE
  9028                           postdec2	equ	0xFDD
  9029                           fsr2h	equ	0xFDA
  9030                           fsr2l	equ	0xFD9
  9031                           status	equ	0xFD8
  9032                           
  9033 ;; *************** function ___awdiv *****************
  9034 ;; Defined at:
  9035 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  9036 ;; Parameters:    Size  Location     Type
  9037 ;;  dividend        2    6[BANK0 ] int 
  9038 ;;  divisor         2    8[BANK0 ] int 
  9039 ;; Auto vars:     Size  Location     Type
  9040 ;;  quotient        2   12[BANK0 ] int 
  9041 ;;  sign            1   11[BANK0 ] unsigned char 
  9042 ;;  counter         1   10[BANK0 ] unsigned char 
  9043 ;; Return value:  Size  Location     Type
  9044 ;;                  2    6[BANK0 ] int 
  9045 ;; Registers used:
  9046 ;;		wreg, status,2, status,0
  9047 ;; Tracked objects:
  9048 ;;		On entry : 0/0
  9049 ;;		On exit  : 0/0
  9050 ;;		Unchanged: 0/0
  9051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9052 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9053 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9054 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9055 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9056 ;;Total ram usage:        8 bytes
  9057 ;; Hardware stack levels used:    1
  9058 ;; Hardware stack levels required when called:    7
  9059 ;; This function calls:
  9060 ;;		Nothing
  9061 ;; This function is called by:
  9062 ;;		_UI
  9063 ;; This function uses a non-reentrant model
  9064 ;;
  9065                           
  9066                           	psect	text34
  9067  003480                     __ptext34:
  9068                           	opt stack 0
  9069  003480                     ___awdiv:
  9070                           	opt stack 22
  9071                           
  9072                           ; BSR set to: 0
  9073                           ;incstack = 0
  9074  003480  0E00               	movlw	0
  9075  003482  0100               	movlb	0	; () banked
  9076  003484  6F8B               	movwf	___awdiv@sign& (0+255),b
  9077                           
  9078                           ; BSR set to: 0
  9079  003486  0100               	movlb	0	; () banked
  9080  003488  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  9081  00348A  D008               	goto	l7120
  9082                           
  9083                           ; BSR set to: 0
  9084  00348C  0100               	movlb	0	; () banked
  9085  00348E  6D88               	negf	___awdiv@divisor& (0+255),b
  9086  003490  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
  9087  003492  B0D8               	btfsc	status,0,c
  9088  003494  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
  9089                           
  9090                           ; BSR set to: 0
  9091  003496  0E01               	movlw	1
  9092  003498  0100               	movlb	0	; () banked
  9093  00349A  6F8B               	movwf	___awdiv@sign& (0+255),b
  9094  00349C                     l7120:
  9095                           
  9096                           ; BSR set to: 0
  9097  00349C  0100               	movlb	0	; () banked
  9098  00349E  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  9099  0034A0  D008               	goto	l7126
  9100                           
  9101                           ; BSR set to: 0
  9102  0034A2  0100               	movlb	0	; () banked
  9103  0034A4  6D86               	negf	___awdiv@dividend& (0+255),b
  9104  0034A6  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
  9105  0034A8  B0D8               	btfsc	status,0,c
  9106  0034AA  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
  9107                           
  9108                           ; BSR set to: 0
  9109  0034AC  0E01               	movlw	1
  9110  0034AE  0100               	movlb	0	; () banked
  9111  0034B0  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
  9112  0034B2                     l7126:
  9113                           
  9114                           ; BSR set to: 0
  9115  0034B2  0E00               	movlw	0
  9116  0034B4  0100               	movlb	0	; () banked
  9117  0034B6  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
  9118  0034B8  0E00               	movlw	0
  9119  0034BA  6F8C               	movwf	___awdiv@quotient& (0+255),b
  9120                           
  9121                           ; BSR set to: 0
  9122  0034BC  0100               	movlb	0	; () banked
  9123  0034BE  5188               	movf	___awdiv@divisor& (0+255),w,b
  9124  0034C0  0100               	movlb	0	; () banked
  9125  0034C2  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  9126  0034C4  B4D8               	btfsc	status,2,c
  9127  0034C6  D02C               	goto	l7148
  9128                           
  9129                           ; BSR set to: 0
  9130  0034C8  0E01               	movlw	1
  9131  0034CA  0100               	movlb	0	; () banked
  9132  0034CC  6F8A               	movwf	___awdiv@counter& (0+255),b
  9133  0034CE  D006               	goto	l7134
  9134  0034D0                     l7132:
  9135                           
  9136                           ; BSR set to: 0
  9137  0034D0  0100               	movlb	0	; () banked
  9138  0034D2  90D8               	bcf	status,0,c
  9139  0034D4  3788               	rlcf	___awdiv@divisor& (0+255),f,b
  9140  0034D6  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  9141  0034D8  0100               	movlb	0	; () banked
  9142  0034DA  2B8A               	incf	___awdiv@counter& (0+255),f,b
  9143  0034DC                     l7134:
  9144                           
  9145                           ; BSR set to: 0
  9146  0034DC  0100               	movlb	0	; () banked
  9147  0034DE  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  9148  0034E0  D7F7               	goto	l7132
  9149  0034E2                     l7136:
  9150                           
  9151                           ; BSR set to: 0
  9152  0034E2  0100               	movlb	0	; () banked
  9153  0034E4  90D8               	bcf	status,0,c
  9154  0034E6  378C               	rlcf	___awdiv@quotient& (0+255),f,b
  9155  0034E8  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  9156                           
  9157                           ; BSR set to: 0
  9158  0034EA  0100               	movlb	0	; () banked
  9159  0034EC  5188               	movf	___awdiv@divisor& (0+255),w,b
  9160  0034EE  0100               	movlb	0	; () banked
  9161  0034F0  5D86               	subwf	___awdiv@dividend& (0+255),w,b
  9162  0034F2  0100               	movlb	0	; () banked
  9163  0034F4  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  9164  0034F6  0100               	movlb	0	; () banked
  9165  0034F8  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  9166  0034FA  A0D8               	btfss	status,0,c
  9167  0034FC  D00A               	goto	l7144
  9168                           
  9169                           ; BSR set to: 0
  9170  0034FE  0100               	movlb	0	; () banked
  9171  003500  5188               	movf	___awdiv@divisor& (0+255),w,b
  9172  003502  0100               	movlb	0	; () banked
  9173  003504  5F86               	subwf	___awdiv@dividend& (0+255),f,b
  9174  003506  0100               	movlb	0	; () banked
  9175  003508  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  9176  00350A  0100               	movlb	0	; () banked
  9177  00350C  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  9178                           
  9179                           ; BSR set to: 0
  9180  00350E  0100               	movlb	0	; () banked
  9181  003510  818C               	bsf	___awdiv@quotient& (0+255),0,b
  9182  003512                     l7144:
  9183                           
  9184                           ; BSR set to: 0
  9185  003512  0100               	movlb	0	; () banked
  9186  003514  90D8               	bcf	status,0,c
  9187  003516  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  9188  003518  3388               	rrcf	___awdiv@divisor& (0+255),f,b
  9189                           
  9190                           ; BSR set to: 0
  9191  00351A  0100               	movlb	0	; () banked
  9192  00351C  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
  9193  00351E  D7E1               	goto	l7136
  9194  003520                     l7148:
  9195                           
  9196                           ; BSR set to: 0
  9197  003520  0100               	movlb	0	; () banked
  9198  003522  518B               	movf	___awdiv@sign& (0+255),w,b
  9199  003524  0100               	movlb	0	; () banked
  9200  003526  B4D8               	btfsc	status,2,c
  9201  003528  D005               	goto	l7152
  9202                           
  9203                           ; BSR set to: 0
  9204  00352A  0100               	movlb	0	; () banked
  9205  00352C  6D8C               	negf	___awdiv@quotient& (0+255),b
  9206  00352E  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
  9207  003530  B0D8               	btfsc	status,0,c
  9208  003532  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
  9209  003534                     l7152:
  9210                           
  9211                           ; BSR set to: 0
  9212  003534  C08C  F086         	movff	___awdiv@quotient,?___awdiv
  9213  003538  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
  9214  00353C  0012               	return	
  9215  00353E                     __end_of___awdiv:
  9216                           	opt stack 0
  9217                           tblptru	equ	0xFF8
  9218                           tblptrh	equ	0xFF7
  9219                           tblptrl	equ	0xFF6
  9220                           tablat	equ	0xFF5
  9221                           prodh	equ	0xFF4
  9222                           prodl	equ	0xFF3
  9223                           intcon	equ	0xFF2
  9224                           intcon2	equ	0xFF1
  9225                           intcon3	equ	0xFF0
  9226                           postinc0	equ	0xFEE
  9227                           wreg	equ	0xFE8
  9228                           postdec1	equ	0xFE5
  9229                           fsr1l	equ	0xFE1
  9230                           indf2	equ	0xFDF
  9231                           postinc2	equ	0xFDE
  9232                           postdec2	equ	0xFDD
  9233                           fsr2h	equ	0xFDA
  9234                           fsr2l	equ	0xFD9
  9235                           status	equ	0xFD8
  9236                           
  9237 ;; *************** function _Test *****************
  9238 ;; Defined at:
  9239 ;;		line 28 in file "Test.c"
  9240 ;; Parameters:    Size  Location     Type
  9241 ;;		None
  9242 ;; Auto vars:     Size  Location     Type
  9243 ;;		None
  9244 ;; Return value:  Size  Location     Type
  9245 ;;                  1    wreg      void 
  9246 ;; Registers used:
  9247 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9248 ;; Tracked objects:
  9249 ;;		On entry : 0/0
  9250 ;;		On exit  : 0/0
  9251 ;;		Unchanged: 0/0
  9252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9253 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9254 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9255 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9256 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9257 ;;Total ram usage:        2 bytes
  9258 ;; Hardware stack levels used:    1
  9259 ;; Hardware stack levels required when called:   11
  9260 ;; This function calls:
  9261 ;;		_BothServos
  9262 ;;		_EEPROMTest
  9263 ;;		_PortTestA5
  9264 ;;		_PortTests
  9265 ;;		_SolenoidTestA5
  9266 ;;		_ToggleTestA5
  9267 ;;		_actuatorTest
  9268 ;;		_algorithmTest
  9269 ;;		_lcdInst
  9270 ;;		_printf
  9271 ;;		_sensorTest
  9272 ;; This function is called by:
  9273 ;;		_main
  9274 ;; This function uses a non-reentrant model
  9275 ;;
  9276                           
  9277                           	psect	text35
  9278  0030C0                     __ptext35:
  9279                           	opt stack 0
  9280  0030C0                     _Test:
  9281                           	opt stack 19
  9282  0030C0                     
  9283                           ;Test.c: 31: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
  9284  0030C0  0E01               	movlw	1
  9285  0030C2  ECF0  F022         	call	_lcdInst
  9286  0030C6  0E68               	movlw	104
  9287  0030C8  0100               	movlb	0	; () banked
  9288  0030CA  6FC6               	movwf	??_Test& (0+255),b
  9289  0030CC  0EE4               	movlw	228
  9290  0030CE                     u7257:
  9291  0030CE  2EE8               	decfsz	wreg,f,c
  9292  0030D0  D7FE               	bra	u7257
  9293  0030D2  2FC6               	decfsz	??_Test& (0+255),f,b
  9294  0030D4  D7FC               	bra	u7257
  9295  0030D6  F000               	nop	
  9296  0030D8  0E80               	movlw	128
  9297  0030DA  ECF0  F022         	call	_lcdInst
  9298                           
  9299                           ;Test.c: 32: printf("1.ALG|2.SNR|3.AC");
  9300  0030DE  0E98               	movlw	low STR_68
  9301  0030E0  0100               	movlb	0	; () banked
  9302  0030E2  6F8E               	movwf	printf@f& (0+255),b
  9303  0030E4  0EFC               	movlw	high STR_68
  9304  0030E6  0100               	movlb	0	; () banked
  9305  0030E8  6F8F               	movwf	(printf@f+1)& (0+255),b
  9306  0030EA  EC9C  F008         	call	_printf	;wreg free
  9307                           
  9308                           ;Test.c: 33: lcdInst(0b11000000);;
  9309  0030EE  0EC0               	movlw	192
  9310  0030F0  ECF0  F022         	call	_lcdInst
  9311                           
  9312                           ;Test.c: 34: printf("4.HI|5.TOG|6.EEP");
  9313  0030F4  0ECB               	movlw	low STR_69
  9314  0030F6  0100               	movlb	0	; () banked
  9315  0030F8  6F8E               	movwf	printf@f& (0+255),b
  9316  0030FA  0EFC               	movlw	high STR_69
  9317  0030FC  0100               	movlb	0	; () banked
  9318  0030FE  6F8F               	movwf	(printf@f+1)& (0+255),b
  9319  003100  EC9C  F008         	call	_printf	;wreg free
  9320                           
  9321                           ;Test.c: 35: _delay((unsigned long)((100)*(32000000/4000.0)));
  9322  003104  0E05               	movlw	5
  9323  003106  0100               	movlb	0	; () banked
  9324  003108  6FC7               	movwf	(??_Test+1)& (0+255),b
  9325  00310A  0E0F               	movlw	15
  9326  00310C  0100               	movlb	0	; () banked
  9327  00310E  6FC6               	movwf	??_Test& (0+255),b
  9328  003110  0EF1               	movlw	241
  9329  003112                     u7267:
  9330  003112  2EE8               	decfsz	wreg,f,c
  9331  003114  D7FE               	bra	u7267
  9332  003116  2FC6               	decfsz	??_Test& (0+255),f,b
  9333  003118  D7FC               	bra	u7267
  9334  00311A  2FC7               	decfsz	(??_Test+1)& (0+255),f,b
  9335  00311C  D7FA               	bra	u7267
  9336  00311E                     l1027:
  9337  00311E  A281               	btfss	3969,1,c	;volatile
  9338  003120  D7FE               	goto	l1027
  9339                           
  9340                           ;Test.c: 37: var = PORTB >> 4;
  9341  003122  CF81 F0C6          	movff	3969,??_Test	;volatile
  9342  003126  0100               	movlb	0	; () banked
  9343  003128  3BC6               	swapf	??_Test& (0+255),f,b
  9344  00312A  0E0F               	movlw	15
  9345  00312C  17C6               	andwf	??_Test& (0+255),f,b
  9346  00312E  0100               	movlb	0	; () banked
  9347  003130  51C6               	movf	??_Test& (0+255),w,b
  9348  003132  0100               	movlb	0	; () banked
  9349  003134  6FFA               	movwf	_var& (0+255),b
  9350  003136  6BFB               	clrf	(_var+1)& (0+255),b
  9351                           
  9352                           ; BSR set to: 0
  9353                           ;Test.c: 38: var++;
  9354  003138  0100               	movlb	0	; () banked
  9355  00313A  4BFA               	infsnz	_var& (0+255),f,b
  9356  00313C  2BFB               	incf	(_var+1)& (0+255),f,b
  9357  00313E                     l1030:
  9358  00313E  A281               	btfss	3969,1,c	;volatile
  9359  003140  D01C               	goto	l7886
  9360  003142  D7FD               	goto	l1030
  9361  003144                     l7866:
  9362                           
  9363                           ;Test.c: 42: algorithmTest();
  9364  003144  ECD5  F019         	call	_algorithmTest	;wreg free
  9365                           
  9366                           ;Test.c: 43: break;
  9367  003148  D7BB               	goto	l7848
  9368  00314A                     l7868:
  9369                           
  9370                           ;Test.c: 45: sensorTest();
  9371  00314A  ECB3  F013         	call	_sensorTest	;wreg free
  9372                           
  9373                           ;Test.c: 46: break;
  9374  00314E  D7B8               	goto	l7848
  9375  003150                     l7870:
  9376                           
  9377                           ;Test.c: 48: actuatorTest();
  9378  003150  EC5C  F004         	call	_actuatorTest	;wreg free
  9379                           
  9380                           ;Test.c: 49: break;
  9381  003154  D7B5               	goto	l7848
  9382  003156                     l7872:
  9383                           
  9384                           ;Test.c: 51: PortTestA5();
  9385  003156  ECB0  F01E         	call	_PortTestA5	;wreg free
  9386                           
  9387                           ;Test.c: 52: break;
  9388  00315A  D7B2               	goto	l7848
  9389  00315C                     l7874:
  9390                           
  9391                           ;Test.c: 54: ToggleTestA5();
  9392  00315C  EC3F  F01C         	call	_ToggleTestA5	;wreg free
  9393                           
  9394                           ;Test.c: 55: break;
  9395  003160  D7AF               	goto	l7848
  9396  003162                     l7876:
  9397                           
  9398                           ;Test.c: 57: EEPROMTest();
  9399  003162  EC22  F023         	call	_EEPROMTest	;wreg free
  9400                           
  9401                           ;Test.c: 58: break;
  9402  003166  D7AC               	goto	l7848
  9403  003168                     l7878:
  9404                           
  9405                           ;Test.c: 60: SolenoidTestA5();
  9406  003168  ECE4  F018         	call	_SolenoidTestA5	;wreg free
  9407                           
  9408                           ;Test.c: 61: break;
  9409  00316C  D7A9               	goto	l7848
  9410  00316E                     l7880:
  9411                           
  9412                           ;Test.c: 63: PortTests();
  9413  00316E  ECC6  F01C         	call	_PortTests	;wreg free
  9414                           
  9415                           ;Test.c: 64: break;
  9416  003172  D7A6               	goto	l7848
  9417  003174                     l7882:
  9418                           
  9419                           ;Test.c: 66: BothServos();
  9420  003174  EC6F  F00C         	call	_BothServos	;wreg free
  9421                           
  9422                           ;Test.c: 70: }
  9423                           
  9424                           ;Test.c: 69: break;
  9425                           
  9426                           ;Test.c: 68: default:
  9427                           
  9428                           ;Test.c: 67: break;
  9429  003178  D7A3               	goto	l7848
  9430  00317A                     l7886:
  9431  00317A  C0FA  F0C6         	movff	_var,??_Test
  9432  00317E  C0FB  F0C7         	movff	_var+1,??_Test+1
  9433                           
  9434                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9435                           ; Switch size 1, requested type "space"
  9436                           ; Number of cases is 1, Range of values is 0 to 0
  9437                           ; switch strategies available:
  9438                           ; Name         Instructions Cycles
  9439                           ; simple_byte            4     3 (average)
  9440                           ;	Chosen strategy is simple_byte
  9441  003182  0100               	movlb	0	; () banked
  9442  003184  51C7               	movf	(??_Test+1)& (0+255),w,b
  9443  003186  0A00               	xorlw	0	; case 0
  9444  003188  A4D8               	btfss	status,2,c
  9445  00318A  D79A               	goto	l7848
  9446                           
  9447                           ; BSR set to: 0
  9448                           ; Switch size 1, requested type "space"
  9449                           ; Number of cases is 9, Range of values is 1 to 10
  9450                           ; switch strategies available:
  9451                           ; Name         Instructions Cycles
  9452                           ; simple_byte           28    15 (average)
  9453                           ;	Chosen strategy is simple_byte
  9454  00318C  0100               	movlb	0	; () banked
  9455  00318E  51C6               	movf	??_Test& (0+255),w,b
  9456  003190  0A01               	xorlw	1	; case 1
  9457  003192  B4D8               	btfsc	status,2,c
  9458  003194  D7D7               	goto	l7866
  9459  003196  0A03               	xorlw	3	; case 2
  9460  003198  B4D8               	btfsc	status,2,c
  9461  00319A  D7D7               	goto	l7868
  9462  00319C  0A01               	xorlw	1	; case 3
  9463  00319E  B4D8               	btfsc	status,2,c
  9464  0031A0  D7D7               	goto	l7870
  9465  0031A2  0A06               	xorlw	6	; case 5
  9466  0031A4  B4D8               	btfsc	status,2,c
  9467  0031A6  D7D7               	goto	l7872
  9468  0031A8  0A03               	xorlw	3	; case 6
  9469  0031AA  B4D8               	btfsc	status,2,c
  9470  0031AC  D7D7               	goto	l7874
  9471  0031AE  0A01               	xorlw	1	; case 7
  9472  0031B0  B4D8               	btfsc	status,2,c
  9473  0031B2  D7D7               	goto	l7876
  9474  0031B4  0A0F               	xorlw	15	; case 8
  9475  0031B6  B4D8               	btfsc	status,2,c
  9476  0031B8  D7D7               	goto	l7878
  9477  0031BA  0A01               	xorlw	1	; case 9
  9478  0031BC  B4D8               	btfsc	status,2,c
  9479  0031BE  D7D7               	goto	l7880
  9480  0031C0  0A03               	xorlw	3	; case 10
  9481  0031C2  B4D8               	btfsc	status,2,c
  9482  0031C4  D7D7               	goto	l7882
  9483                           
  9484                           ; BSR set to: 0
  9485                           
  9486                           ; BSR set to: 0
  9487  0031C6  D77C               	goto	l7848
  9488  0031C8                     __end_of_Test:
  9489                           	opt stack 0
  9490                           tblptru	equ	0xFF8
  9491                           tblptrh	equ	0xFF7
  9492                           tblptrl	equ	0xFF6
  9493                           tablat	equ	0xFF5
  9494                           prodh	equ	0xFF4
  9495                           prodl	equ	0xFF3
  9496                           intcon	equ	0xFF2
  9497                           intcon2	equ	0xFF1
  9498                           intcon3	equ	0xFF0
  9499                           postinc0	equ	0xFEE
  9500                           wreg	equ	0xFE8
  9501                           postdec1	equ	0xFE5
  9502                           fsr1l	equ	0xFE1
  9503                           indf2	equ	0xFDF
  9504                           postinc2	equ	0xFDE
  9505                           postdec2	equ	0xFDD
  9506                           fsr2h	equ	0xFDA
  9507                           fsr2l	equ	0xFD9
  9508                           status	equ	0xFD8
  9509                           
  9510 ;; *************** function _sensorTest *****************
  9511 ;; Defined at:
  9512 ;;		line 118 in file "Test.c"
  9513 ;; Parameters:    Size  Location     Type
  9514 ;;		None
  9515 ;; Auto vars:     Size  Location     Type
  9516 ;;  res             2   45[BANK0 ] int 
  9517 ;; Return value:  Size  Location     Type
  9518 ;;                  1    wreg      void 
  9519 ;; Registers used:
  9520 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9521 ;; Tracked objects:
  9522 ;;		On entry : 0/0
  9523 ;;		On exit  : 0/0
  9524 ;;		Unchanged: 0/0
  9525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9526 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9527 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9528 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9529 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9530 ;;Total ram usage:        4 bytes
  9531 ;; Hardware stack levels used:    1
  9532 ;; Hardware stack levels required when called:   10
  9533 ;; This function calls:
  9534 ;;		_lcdInst
  9535 ;;		_printf
  9536 ;;		_readADC
  9537 ;;		_readMAG
  9538 ;; This function is called by:
  9539 ;;		_Test
  9540 ;; This function uses a non-reentrant model
  9541 ;;
  9542                           
  9543                           	psect	text36
  9544  002766                     __ptext36:
  9545                           	opt stack 0
  9546  002766                     _sensorTest:
  9547                           	opt stack 19
  9548                           
  9549                           ;Test.c: 120: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
  9550                           
  9551                           ; BSR set to: 0
  9552                           ;incstack = 0
  9553  002766  0E01               	movlw	1
  9554  002768  ECF0  F022         	call	_lcdInst
  9555  00276C  0E68               	movlw	104
  9556  00276E  0100               	movlb	0	; () banked
  9557  002770  6FAB               	movwf	??_sensorTest& (0+255),b
  9558  002772  0EE4               	movlw	228
  9559  002774                     u7277:
  9560  002774  2EE8               	decfsz	wreg,f,c
  9561  002776  D7FE               	bra	u7277
  9562  002778  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9563  00277A  D7FC               	bra	u7277
  9564  00277C  F000               	nop	
  9565  00277E  0E80               	movlw	128
  9566  002780  ECF0  F022         	call	_lcdInst
  9567                           
  9568                           ;Test.c: 121: printf("SENSORS");
  9569  002784  0EAD               	movlw	low STR_77
  9570  002786  0100               	movlb	0	; () banked
  9571  002788  6F8E               	movwf	printf@f& (0+255),b
  9572  00278A  0EFF               	movlw	high STR_77
  9573  00278C  0100               	movlb	0	; () banked
  9574  00278E  6F8F               	movwf	(printf@f+1)& (0+255),b
  9575  002790  EC9C  F008         	call	_printf	;wreg free
  9576                           
  9577                           ;Test.c: 122: lcdInst(0b11000000);;
  9578  002794  0EC0               	movlw	192
  9579  002796  ECF0  F022         	call	_lcdInst
  9580                           
  9581                           ;Test.c: 123: printf("PUSH TO START");
  9582  00279A  0E11               	movlw	low STR_71
  9583  00279C  0100               	movlb	0	; () banked
  9584  00279E  6F8E               	movwf	printf@f& (0+255),b
  9585  0027A0  0EFF               	movlw	high STR_71
  9586  0027A2  0100               	movlb	0	; () banked
  9587  0027A4  6F8F               	movwf	(printf@f+1)& (0+255),b
  9588  0027A6  EC9C  F008         	call	_printf	;wreg free
  9589                           
  9590                           ;Test.c: 124: _delay((unsigned long)((100)*(32000000/4000.0)));
  9591  0027AA  0E05               	movlw	5
  9592  0027AC  0100               	movlb	0	; () banked
  9593  0027AE  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9594  0027B0  0E0F               	movlw	15
  9595  0027B2  0100               	movlb	0	; () banked
  9596  0027B4  6FAB               	movwf	??_sensorTest& (0+255),b
  9597  0027B6  0EF1               	movlw	241
  9598  0027B8                     u7287:
  9599  0027B8  2EE8               	decfsz	wreg,f,c
  9600  0027BA  D7FE               	bra	u7287
  9601  0027BC  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9602  0027BE  D7FC               	bra	u7287
  9603  0027C0  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9604  0027C2  D7FA               	bra	u7287
  9605  0027C4                     l1059:
  9606  0027C4  A281               	btfss	3969,1,c	;volatile
  9607  0027C6  D7FE               	goto	l1059
  9608  0027C8                     l1062:
  9609  0027C8  B281               	btfsc	3969,1,c	;volatile
  9610  0027CA  D7FE               	goto	l1062
  9611                           
  9612                           ;Test.c: 127: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
  9613  0027CC  0E01               	movlw	1
  9614  0027CE  ECF0  F022         	call	_lcdInst
  9615  0027D2  0E68               	movlw	104
  9616  0027D4  0100               	movlb	0	; () banked
  9617  0027D6  6FAB               	movwf	??_sensorTest& (0+255),b
  9618  0027D8  0EE4               	movlw	228
  9619  0027DA                     u7297:
  9620  0027DA  2EE8               	decfsz	wreg,f,c
  9621  0027DC  D7FE               	bra	u7297
  9622  0027DE  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9623  0027E0  D7FC               	bra	u7297
  9624  0027E2  F000               	nop	
  9625  0027E4  0E80               	movlw	128
  9626  0027E6  ECF0  F022         	call	_lcdInst
  9627                           
  9628                           ;Test.c: 132: printf("TST: IR SNSR");
  9629  0027EA  0E3B               	movlw	low STR_79
  9630  0027EC  0100               	movlb	0	; () banked
  9631  0027EE  6F8E               	movwf	printf@f& (0+255),b
  9632  0027F0  0EFF               	movlw	high STR_79
  9633  0027F2  0100               	movlb	0	; () banked
  9634  0027F4  6F8F               	movwf	(printf@f+1)& (0+255),b
  9635  0027F6  EC9C  F008         	call	_printf	;wreg free
  9636                           
  9637                           ;Test.c: 133: _delay((unsigned long)((100)*(32000000/4000.0)));
  9638  0027FA  0E05               	movlw	5
  9639  0027FC  0100               	movlb	0	; () banked
  9640  0027FE  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9641  002800  0E0F               	movlw	15
  9642  002802  0100               	movlb	0	; () banked
  9643  002804  6FAB               	movwf	??_sensorTest& (0+255),b
  9644  002806  0EF1               	movlw	241
  9645  002808                     u7307:
  9646  002808  2EE8               	decfsz	wreg,f,c
  9647  00280A  D7FE               	bra	u7307
  9648  00280C  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9649  00280E  D7FC               	bra	u7307
  9650  002810  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9651  002812  D7FA               	bra	u7307
  9652                           
  9653                           ;Test.c: 134: LATCbits.LATC5 = 1;
  9654  002814  8A8B               	bsf	3979,5,c	;volatile
  9655                           
  9656                           ;Test.c: 135: while(PORTBbits.RB1 == 0){
  9657  002816  D05C               	goto	l6494
  9658  002818                     l6476:
  9659                           
  9660                           ;Test.c: 136: readADC(0);
  9661  002818  0E00               	movlw	0
  9662  00281A  ECF7  F021         	call	_readADC
  9663                           
  9664                           ;Test.c: 137: int res = ADRESH<<8 | ADRESL;
  9665  00281E  50C3               	movf	4035,w,c	;volatile
  9666  002820  CFC4 F0AB          	movff	4036,??_sensorTest	;volatile
  9667  002824  0100               	movlb	0	; () banked
  9668  002826  6BAC               	clrf	(??_sensorTest+1)& (0+255),b
  9669  002828  C0AB  F0AC         	movff	??_sensorTest,??_sensorTest+1
  9670  00282C  0100               	movlb	0	; () banked
  9671  00282E  6BAB               	clrf	??_sensorTest& (0+255),b
  9672  002830  0100               	movlb	0	; () banked
  9673  002832  11AB               	iorwf	??_sensorTest& (0+255),w,b
  9674  002834  0100               	movlb	0	; () banked
  9675  002836  6FAD               	movwf	sensorTest@res& (0+255),b
  9676  002838  0100               	movlb	0	; () banked
  9677  00283A  51AC               	movf	(??_sensorTest+1)& (0+255),w,b
  9678  00283C  0100               	movlb	0	; () banked
  9679  00283E  6FAE               	movwf	(sensorTest@res+1)& (0+255),b
  9680                           
  9681                           ; BSR set to: 0
  9682                           ;Test.c: 138: IR_signal = (res > 900) ? 1 : 0;
  9683  002840  0100               	movlb	0	; () banked
  9684  002842  BFAE               	btfsc	(sensorTest@res+1)& (0+255),7,b
  9685  002844  D00A               	goto	u4940
  9686  002846  0E85               	movlw	133
  9687  002848  0100               	movlb	0	; () banked
  9688  00284A  5DAD               	subwf	sensorTest@res& (0+255),w,b
  9689  00284C  0E03               	movlw	3
  9690  00284E  0100               	movlb	0	; () banked
  9691  002850  59AE               	subwfb	(sensorTest@res+1)& (0+255),w,b
  9692  002852  A0D8               	btfss	status,0,c
  9693  002854  D002               	goto	u4940
  9694  002856  0E01               	movlw	1
  9695  002858  D001               	goto	u4950
  9696  00285A                     u4940:
  9697  00285A  0E00               	movlw	0
  9698  00285C                     u4950:
  9699  00285C  0100               	movlb	0	; () banked
  9700  00285E  6FDA               	movwf	_IR_signal& (0+255),b
  9701  002860  6BDB               	clrf	(_IR_signal+1)& (0+255),b
  9702                           
  9703                           ;Test.c: 140: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
  9704  002862  0E01               	movlw	1
  9705  002864  ECF0  F022         	call	_lcdInst
  9706  002868  0E68               	movlw	104
  9707  00286A  0100               	movlb	0	; () banked
  9708  00286C  6FAB               	movwf	??_sensorTest& (0+255),b
  9709  00286E  0EE4               	movlw	228
  9710  002870                     u7317:
  9711  002870  2EE8               	decfsz	wreg,f,c
  9712  002872  D7FE               	bra	u7317
  9713  002874  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9714  002876  D7FC               	bra	u7317
  9715  002878  F000               	nop	
  9716  00287A  0E80               	movlw	128
  9717  00287C  ECF0  F022         	call	_lcdInst
  9718                           
  9719                           ;Test.c: 141: printf("IR_signal: %d ", IR_signal);
  9720  002880  0E60               	movlw	low STR_80
  9721  002882  0100               	movlb	0	; () banked
  9722  002884  6F8E               	movwf	printf@f& (0+255),b
  9723  002886  0EFE               	movlw	high STR_80
  9724  002888  0100               	movlb	0	; () banked
  9725  00288A  6F8F               	movwf	(printf@f+1)& (0+255),b
  9726  00288C  C0DA  F090         	movff	_IR_signal,?_printf+2
  9727  002890  C0DB  F091         	movff	_IR_signal+1,?_printf+3
  9728  002894  EC9C  F008         	call	_printf	;wreg free
  9729                           
  9730                           ;Test.c: 142: lcdInst(0b11000000);;
  9731  002898  0EC0               	movlw	192
  9732  00289A  ECF0  F022         	call	_lcdInst
  9733                           
  9734                           ;Test.c: 143: printf("%d", res);
  9735  00289E  0E7F               	movlw	low (STR_27+16)
  9736  0028A0  0100               	movlb	0	; () banked
  9737  0028A2  6F8E               	movwf	printf@f& (0+255),b
  9738  0028A4  0EFB               	movlw	high (STR_27+16)
  9739  0028A6  0100               	movlb	0	; () banked
  9740  0028A8  6F8F               	movwf	(printf@f+1)& (0+255),b
  9741  0028AA  C0AD  F090         	movff	sensorTest@res,?_printf+2
  9742  0028AE  C0AE  F091         	movff	sensorTest@res+1,?_printf+3
  9743  0028B2  EC9C  F008         	call	_printf	;wreg free
  9744                           
  9745                           ;Test.c: 144: _delay((unsigned long)((100)*(32000000/4000.0)));
  9746  0028B6  0E05               	movlw	5
  9747  0028B8  0100               	movlb	0	; () banked
  9748  0028BA  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9749  0028BC  0E0F               	movlw	15
  9750  0028BE  0100               	movlb	0	; () banked
  9751  0028C0  6FAB               	movwf	??_sensorTest& (0+255),b
  9752  0028C2  0EF1               	movlw	241
  9753  0028C4                     u7327:
  9754  0028C4  2EE8               	decfsz	wreg,f,c
  9755  0028C6  D7FE               	bra	u7327
  9756  0028C8  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9757  0028CA  D7FC               	bra	u7327
  9758  0028CC  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9759  0028CE  D7FA               	bra	u7327
  9760  0028D0                     l6494:
  9761  0028D0  A281               	btfss	3969,1,c	;volatile
  9762  0028D2  D7A2               	goto	l6476
  9763                           
  9764                           ;Test.c: 145: }
  9765                           ;Test.c: 146: LATCbits.LATC5 = 0;
  9766  0028D4  9A8B               	bcf	3979,5,c	;volatile
  9767                           
  9768                           ;Test.c: 153: printf("TST: MAGNETISM");
  9769  0028D6  0E8D               	movlw	low STR_82
  9770  0028D8  0100               	movlb	0	; () banked
  9771  0028DA  6F8E               	movwf	printf@f& (0+255),b
  9772  0028DC  0EFE               	movlw	high STR_82
  9773  0028DE  0100               	movlb	0	; () banked
  9774  0028E0  6F8F               	movwf	(printf@f+1)& (0+255),b
  9775  0028E2  EC9C  F008         	call	_printf	;wreg free
  9776                           
  9777                           ;Test.c: 154: _delay((unsigned long)((100)*(32000000/4000.0)));
  9778  0028E6  0E05               	movlw	5
  9779  0028E8  0100               	movlb	0	; () banked
  9780  0028EA  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9781  0028EC  0E0F               	movlw	15
  9782  0028EE  0100               	movlb	0	; () banked
  9783  0028F0  6FAB               	movwf	??_sensorTest& (0+255),b
  9784  0028F2  0EF1               	movlw	241
  9785  0028F4                     u7337:
  9786  0028F4  2EE8               	decfsz	wreg,f,c
  9787  0028F6  D7FE               	bra	u7337
  9788  0028F8  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9789  0028FA  D7FC               	bra	u7337
  9790  0028FC  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9791  0028FE  D7FA               	bra	u7337
  9792                           
  9793                           ;Test.c: 155: while(PORTBbits.RB1 == 0){
  9794  002900  D021               	goto	l6506
  9795  002902                     l6500:
  9796                           
  9797                           ;Test.c: 156: readMAG();
  9798  002902  ECD3  F01F         	call	_readMAG	;wreg free
  9799                           
  9800                           ;Test.c: 157: lcdInst(0b10000000);;
  9801  002906  0E80               	movlw	128
  9802  002908  ECF0  F022         	call	_lcdInst
  9803                           
  9804                           ;Test.c: 158: lcdInst(0b11000000);;
  9805  00290C  0EC0               	movlw	192
  9806  00290E  ECF0  F022         	call	_lcdInst
  9807                           
  9808                           ;Test.c: 159: printf("MAG_signal: %d ", MAG_signal);
  9809  002912  0E30               	movlw	low STR_83
  9810  002914  0100               	movlb	0	; () banked
  9811  002916  6F8E               	movwf	printf@f& (0+255),b
  9812  002918  0EFE               	movlw	high STR_83
  9813  00291A  0100               	movlb	0	; () banked
  9814  00291C  6F8F               	movwf	(printf@f+1)& (0+255),b
  9815  00291E  C0DC  F090         	movff	_MAG_signal,?_printf+2
  9816  002922  C0DD  F091         	movff	_MAG_signal+1,?_printf+3
  9817  002926  EC9C  F008         	call	_printf	;wreg free
  9818                           
  9819                           ;Test.c: 160: _delay((unsigned long)((100)*(32000000/4000.0)));
  9820  00292A  0E05               	movlw	5
  9821  00292C  0100               	movlb	0	; () banked
  9822  00292E  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9823  002930  0E0F               	movlw	15
  9824  002932  0100               	movlb	0	; () banked
  9825  002934  6FAB               	movwf	??_sensorTest& (0+255),b
  9826  002936  0EF1               	movlw	241
  9827  002938                     u7347:
  9828  002938  2EE8               	decfsz	wreg,f,c
  9829  00293A  D7FE               	bra	u7347
  9830  00293C  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9831  00293E  D7FC               	bra	u7347
  9832  002940  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9833  002942  D7FA               	bra	u7347
  9834  002944                     l6506:
  9835  002944  B281               	btfsc	3969,1,c	;volatile
  9836  002946  0012               	return	
  9837  002948  D7DC               	goto	l6500
  9838  00294A                     __end_of_sensorTest:
  9839                           	opt stack 0
  9840                           tblptru	equ	0xFF8
  9841                           tblptrh	equ	0xFF7
  9842                           tblptrl	equ	0xFF6
  9843                           tablat	equ	0xFF5
  9844                           prodh	equ	0xFF4
  9845                           prodl	equ	0xFF3
  9846                           intcon	equ	0xFF2
  9847                           intcon2	equ	0xFF1
  9848                           intcon3	equ	0xFF0
  9849                           postinc0	equ	0xFEE
  9850                           wreg	equ	0xFE8
  9851                           postdec1	equ	0xFE5
  9852                           fsr1l	equ	0xFE1
  9853                           indf2	equ	0xFDF
  9854                           postinc2	equ	0xFDE
  9855                           postdec2	equ	0xFDD
  9856                           fsr2h	equ	0xFDA
  9857                           fsr2l	equ	0xFD9
  9858                           status	equ	0xFD8
  9859                           
  9860 ;; *************** function _readMAG *****************
  9861 ;; Defined at:
  9862 ;;		line 29 in file "ADCFunctionality.c"
  9863 ;; Parameters:    Size  Location     Type
  9864 ;;		None
  9865 ;; Auto vars:     Size  Location     Type
  9866 ;;  res             2    4[BANK0 ] int 
  9867 ;; Return value:  Size  Location     Type
  9868 ;;                  1    wreg      void 
  9869 ;; Registers used:
  9870 ;;		wreg, status,2, status,0, cstack
  9871 ;; Tracked objects:
  9872 ;;		On entry : 0/0
  9873 ;;		On exit  : 0/0
  9874 ;;		Unchanged: 0/0
  9875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9876 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9877 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9878 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9879 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9880 ;;Total ram usage:        4 bytes
  9881 ;; Hardware stack levels used:    1
  9882 ;; Hardware stack levels required when called:    8
  9883 ;; This function calls:
  9884 ;;		_readADC
  9885 ;; This function is called by:
  9886 ;;		_ID
  9887 ;;		_sensorTest
  9888 ;; This function uses a non-reentrant model
  9889 ;;
  9890                           
  9891                           	psect	text37
  9892  003FA6                     __ptext37:
  9893                           	opt stack 0
  9894  003FA6                     _readMAG:
  9895                           	opt stack 20
  9896                           
  9897                           ;ADCFunctionality.c: 30: readADC(1);
  9898                           
  9899                           ;incstack = 0
  9900  003FA6  0E01               	movlw	1
  9901  003FA8  ECF7  F021         	call	_readADC
  9902                           
  9903                           ;ADCFunctionality.c: 31: int res = ADRESH<<8 | ADRESL;
  9904  003FAC  50C3               	movf	4035,w,c	;volatile
  9905  003FAE  CFC4 F082          	movff	4036,??_readMAG	;volatile
  9906  003FB2  0100               	movlb	0	; () banked
  9907  003FB4  6B83               	clrf	(??_readMAG+1)& (0+255),b
  9908  003FB6  C082  F083         	movff	??_readMAG,??_readMAG+1
  9909  003FBA  0100               	movlb	0	; () banked
  9910  003FBC  6B82               	clrf	??_readMAG& (0+255),b
  9911  003FBE  0100               	movlb	0	; () banked
  9912  003FC0  1182               	iorwf	??_readMAG& (0+255),w,b
  9913  003FC2  0100               	movlb	0	; () banked
  9914  003FC4  6F84               	movwf	readMAG@res& (0+255),b
  9915  003FC6  0100               	movlb	0	; () banked
  9916  003FC8  5183               	movf	(??_readMAG+1)& (0+255),w,b
  9917  003FCA  0100               	movlb	0	; () banked
  9918  003FCC  6F85               	movwf	(readMAG@res+1)& (0+255),b
  9919                           
  9920                           ; BSR set to: 0
  9921                           ;ADCFunctionality.c: 32: MAG_signal = (res < 150) ? 1 : 0;
  9922  003FCE  0100               	movlb	0	; () banked
  9923  003FD0  BF85               	btfsc	(readMAG@res+1)& (0+255),7,b
  9924  003FD2  D008               	goto	u4371
  9925  003FD4  0100               	movlb	0	; () banked
  9926  003FD6  5185               	movf	(readMAG@res+1)& (0+255),w,b
  9927  003FD8  E107               	bnz	u4370
  9928  003FDA  0E96               	movlw	150
  9929  003FDC  0100               	movlb	0	; () banked
  9930  003FDE  5D84               	subwf	readMAG@res& (0+255),w,b
  9931  003FE0  B0D8               	btfsc	status,0,c
  9932  003FE2  D002               	goto	u4370
  9933  003FE4                     u4371:
  9934  003FE4  0E01               	movlw	1
  9935  003FE6  D001               	goto	u4380
  9936  003FE8                     u4370:
  9937  003FE8  0E00               	movlw	0
  9938  003FEA                     u4380:
  9939  003FEA  0100               	movlb	0	; () banked
  9940  003FEC  6FDC               	movwf	_MAG_signal& (0+255),b
  9941  003FEE  6BDD               	clrf	(_MAG_signal+1)& (0+255),b
  9942                           
  9943                           ; BSR set to: 0
  9944  003FF0  0012               	return		;funcret
  9945  003FF2                     __end_of_readMAG:
  9946                           	opt stack 0
  9947                           tblptru	equ	0xFF8
  9948                           tblptrh	equ	0xFF7
  9949                           tblptrl	equ	0xFF6
  9950                           tablat	equ	0xFF5
  9951                           prodh	equ	0xFF4
  9952                           prodl	equ	0xFF3
  9953                           intcon	equ	0xFF2
  9954                           intcon2	equ	0xFF1
  9955                           intcon3	equ	0xFF0
  9956                           postinc0	equ	0xFEE
  9957                           wreg	equ	0xFE8
  9958                           postdec1	equ	0xFE5
  9959                           fsr1l	equ	0xFE1
  9960                           indf2	equ	0xFDF
  9961                           postinc2	equ	0xFDE
  9962                           postdec2	equ	0xFDD
  9963                           fsr2h	equ	0xFDA
  9964                           fsr2l	equ	0xFD9
  9965                           status	equ	0xFD8
  9966                           
  9967 ;; *************** function _readADC *****************
  9968 ;; Defined at:
  9969 ;;		line 15 in file "ADCFunctionality.c"
  9970 ;; Parameters:    Size  Location     Type
  9971 ;;  channel         1    wreg     unsigned char 
  9972 ;; Auto vars:     Size  Location     Type
  9973 ;;  channel         1    1[BANK0 ] unsigned char 
  9974 ;; Return value:  Size  Location     Type
  9975 ;;                  1    wreg      void 
  9976 ;; Registers used:
  9977 ;;		wreg, status,2, status,0, cstack
  9978 ;; Tracked objects:
  9979 ;;		On entry : 0/0
  9980 ;;		On exit  : 0/0
  9981 ;;		Unchanged: 0/0
  9982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9983 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9984 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9985 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9986 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9987 ;;Total ram usage:        2 bytes
  9988 ;; Hardware stack levels used:    1
  9989 ;; Hardware stack levels required when called:    7
  9990 ;; This function calls:
  9991 ;;		Nothing
  9992 ;; This function is called by:
  9993 ;;		_readIR
  9994 ;;		_readMAG
  9995 ;;		_sensorTest
  9996 ;; This function uses a non-reentrant model
  9997 ;;
  9998                           
  9999                           	psect	text38
 10000  0043EE                     __ptext38:
 10001                           	opt stack 0
 10002  0043EE                     _readADC:
 10003                           	opt stack 19
 10004                           
 10005                           ; BSR set to: 0
 10006                           ;incstack = 0
 10007                           ;readADC@channel stored from wreg
 10008  0043EE  0100               	movlb	0	; () banked
 10009  0043F0  6F81               	movwf	readADC@channel& (0+255),b
 10010                           
 10011                           ;ADCFunctionality.c: 17: ADCON0 = channel << 2;
 10012  0043F2  0100               	movlb	0	; () banked
 10013  0043F4  4581               	rlncf	readADC@channel& (0+255),w,b
 10014  0043F6  46E8               	rlncf	wreg,f,c
 10015  0043F8  0BFC               	andlw	252
 10016  0043FA  6EC2               	movwf	4034,c	;volatile
 10017                           
 10018                           ; BSR set to: 0
 10019                           ;ADCFunctionality.c: 18: ADCON0bits.ADON = 1;
 10020  0043FC  80C2               	bsf	4034,0,c	;volatile
 10021                           
 10022                           ; BSR set to: 0
 10023                           ;ADCFunctionality.c: 19: ADCON0bits.GO = 1;
 10024  0043FE  82C2               	bsf	4034,1,c	;volatile
 10025                           
 10026                           ;ADCFunctionality.c: 20: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(32000
      +                          000/4000.0)));}
 10027  004400  D009               	goto	l5148
 10028  004402                     l5146:
 10029  004402  0E34               	movlw	52
 10030  004404  0100               	movlb	0	; () banked
 10031  004406  6F80               	movwf	??_readADC& (0+255),b
 10032  004408  0EF1               	movlw	241
 10033  00440A                     u7357:
 10034  00440A  2EE8               	decfsz	wreg,f,c
 10035  00440C  D7FE               	bra	u7357
 10036  00440E  2F80               	decfsz	??_readADC& (0+255),f,b
 10037  004410  D7FC               	bra	u7357
 10038  004412  D000               	nop2	
 10039  004414                     l5148:
 10040  004414  A2C2               	btfss	4034,1,c	;volatile
 10041  004416  0012               	return	
 10042  004418  D7F4               	goto	l5146
 10043  00441A                     __end_of_readADC:
 10044                           	opt stack 0
 10045                           tblptru	equ	0xFF8
 10046                           tblptrh	equ	0xFF7
 10047                           tblptrl	equ	0xFF6
 10048                           tablat	equ	0xFF5
 10049                           prodh	equ	0xFF4
 10050                           prodl	equ	0xFF3
 10051                           intcon	equ	0xFF2
 10052                           intcon2	equ	0xFF1
 10053                           intcon3	equ	0xFF0
 10054                           postinc0	equ	0xFEE
 10055                           wreg	equ	0xFE8
 10056                           postdec1	equ	0xFE5
 10057                           fsr1l	equ	0xFE1
 10058                           indf2	equ	0xFDF
 10059                           postinc2	equ	0xFDE
 10060                           postdec2	equ	0xFDD
 10061                           fsr2h	equ	0xFDA
 10062                           fsr2l	equ	0xFD9
 10063                           status	equ	0xFD8
 10064                           
 10065 ;; *************** function _algorithmTest *****************
 10066 ;; Defined at:
 10067 ;;		line 74 in file "Test.c"
 10068 ;; Parameters:    Size  Location     Type
 10069 ;;		None
 10070 ;; Auto vars:     Size  Location     Type
 10071 ;;		None
 10072 ;; Return value:  Size  Location     Type
 10073 ;;                  1    wreg      void 
 10074 ;; Registers used:
 10075 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10076 ;; Tracked objects:
 10077 ;;		On entry : 0/0
 10078 ;;		On exit  : 0/0
 10079 ;;		Unchanged: 0/0
 10080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10081 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10082 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10083 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10084 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10085 ;;Total ram usage:        2 bytes
 10086 ;; Hardware stack levels used:    1
 10087 ;; Hardware stack levels required when called:   10
 10088 ;; This function calls:
 10089 ;;		_lcdInst
 10090 ;;		_printf
 10091 ;; This function is called by:
 10092 ;;		_Test
 10093 ;; This function uses a non-reentrant model
 10094 ;;
 10095                           
 10096                           	psect	text39
 10097  0033AA                     __ptext39:
 10098                           	opt stack 0
 10099  0033AA                     _algorithmTest:
 10100                           	opt stack 19
 10101                           
 10102                           ;Test.c: 76: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 10103                           
 10104                           ;incstack = 0
 10105  0033AA  0E01               	movlw	1
 10106  0033AC  ECF0  F022         	call	_lcdInst
 10107  0033B0  0E68               	movlw	104
 10108  0033B2  0100               	movlb	0	; () banked
 10109  0033B4  6FAB               	movwf	??_algorithmTest& (0+255),b
 10110  0033B6  0EE4               	movlw	228
 10111  0033B8                     u7367:
 10112  0033B8  2EE8               	decfsz	wreg,f,c
 10113  0033BA  D7FE               	bra	u7367
 10114  0033BC  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 10115  0033BE  D7FC               	bra	u7367
 10116  0033C0  F000               	nop	
 10117  0033C2  0E80               	movlw	128
 10118  0033C4  ECF0  F022         	call	_lcdInst
 10119                           
 10120                           ;Test.c: 77: printf("ALGORITHM TEST");
 10121  0033C8  0ED8               	movlw	low STR_70
 10122  0033CA  0100               	movlb	0	; () banked
 10123  0033CC  6F8E               	movwf	printf@f& (0+255),b
 10124  0033CE  0EFE               	movlw	high STR_70
 10125  0033D0  0100               	movlb	0	; () banked
 10126  0033D2  6F8F               	movwf	(printf@f+1)& (0+255),b
 10127  0033D4  EC9C  F008         	call	_printf	;wreg free
 10128                           
 10129                           ;Test.c: 78: lcdInst(0b11000000);;
 10130  0033D8  0EC0               	movlw	192
 10131  0033DA  ECF0  F022         	call	_lcdInst
 10132                           
 10133                           ;Test.c: 79: printf("PUSH TO START");
 10134  0033DE  0E11               	movlw	low STR_71
 10135  0033E0  0100               	movlb	0	; () banked
 10136  0033E2  6F8E               	movwf	printf@f& (0+255),b
 10137  0033E4  0EFF               	movlw	high STR_71
 10138  0033E6  0100               	movlb	0	; () banked
 10139  0033E8  6F8F               	movwf	(printf@f+1)& (0+255),b
 10140  0033EA  EC9C  F008         	call	_printf	;wreg free
 10141                           
 10142                           ;Test.c: 80: _delay((unsigned long)((100)*(32000000/4000.0)));
 10143  0033EE  0E05               	movlw	5
 10144  0033F0  0100               	movlb	0	; () banked
 10145  0033F2  6FAC               	movwf	(??_algorithmTest+1)& (0+255),b
 10146  0033F4  0E0F               	movlw	15
 10147  0033F6  0100               	movlb	0	; () banked
 10148  0033F8  6FAB               	movwf	??_algorithmTest& (0+255),b
 10149  0033FA  0EF1               	movlw	241
 10150  0033FC                     u7377:
 10151  0033FC  2EE8               	decfsz	wreg,f,c
 10152  0033FE  D7FE               	bra	u7377
 10153  003400  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 10154  003402  D7FC               	bra	u7377
 10155  003404  2FAC               	decfsz	(??_algorithmTest+1)& (0+255),f,b
 10156  003406  D7FA               	bra	u7377
 10157  003408                     l1050:
 10158  003408  A281               	btfss	3969,1,c	;volatile
 10159  00340A  D7FE               	goto	l1050
 10160  00340C                     l1053:
 10161  00340C  B281               	btfsc	3969,1,c	;volatile
 10162  00340E  D7FE               	goto	l1053
 10163                           
 10164                           ;Test.c: 83: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 10165  003410  0E01               	movlw	1
 10166  003412  ECF0  F022         	call	_lcdInst
 10167  003416  0E68               	movlw	104
 10168  003418  0100               	movlb	0	; () banked
 10169  00341A  6FAB               	movwf	??_algorithmTest& (0+255),b
 10170  00341C  0EE4               	movlw	228
 10171  00341E                     u7387:
 10172  00341E  2EE8               	decfsz	wreg,f,c
 10173  003420  D7FE               	bra	u7387
 10174  003422  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 10175  003424  D7FC               	bra	u7387
 10176  003426  F000               	nop	
 10177  003428  0E80               	movlw	128
 10178  00342A  ECF0  F022         	call	_lcdInst
 10179                           
 10180                           ;Test.c: 88: printf("ALG1: 9 POPNOTAB");
 10181  00342E  0E87               	movlw	low STR_72
 10182  003430  0100               	movlb	0	; () banked
 10183  003432  6F8E               	movwf	printf@f& (0+255),b
 10184  003434  0EFC               	movlw	high STR_72
 10185  003436  0100               	movlb	0	; () banked
 10186  003438  6F8F               	movwf	(printf@f+1)& (0+255),b
 10187  00343A  EC9C  F008         	call	_printf	;wreg free
 10188                           
 10189                           ;Test.c: 95: printf("ALG2: 12 CANS");
 10190  00343E  0EF5               	movlw	low STR_73
 10191  003440  0100               	movlb	0	; () banked
 10192  003442  6F8E               	movwf	printf@f& (0+255),b
 10193  003444  0EFE               	movlw	high STR_73
 10194  003446  0100               	movlb	0	; () banked
 10195  003448  6F8F               	movwf	(printf@f+1)& (0+255),b
 10196  00344A  EC9C  F008         	call	_printf	;wreg free
 10197                           
 10198                           ;Test.c: 104: printf("ALG3: 1 CAN");
 10199  00344E  0E62               	movlw	low STR_74
 10200  003450  0100               	movlb	0	; () banked
 10201  003452  6F8E               	movwf	printf@f& (0+255),b
 10202  003454  0EFF               	movlw	high STR_74
 10203  003456  0100               	movlb	0	; () banked
 10204  003458  6F8F               	movwf	(printf@f+1)& (0+255),b
 10205  00345A  EC9C  F008         	call	_printf	;wreg free
 10206                           
 10207                           ;Test.c: 110: printf("ALG4: ALL CANS");
 10208  00345E  0EBA               	movlw	low STR_75
 10209  003460  0100               	movlb	0	; () banked
 10210  003462  6F8E               	movwf	printf@f& (0+255),b
 10211  003464  0EFE               	movlw	high STR_75
 10212  003466  0100               	movlb	0	; () banked
 10213  003468  6F8F               	movwf	(printf@f+1)& (0+255),b
 10214  00346A  EC9C  F008         	call	_printf	;wreg free
 10215                           
 10216                           ;Test.c: 115: printf("ALG5: NO CANS");
 10217  00346E  0E03               	movlw	low STR_76
 10218  003470  0100               	movlb	0	; () banked
 10219  003472  6F8E               	movwf	printf@f& (0+255),b
 10220  003474  0EFF               	movlw	high STR_76
 10221  003476  0100               	movlb	0	; () banked
 10222  003478  6F8F               	movwf	(printf@f+1)& (0+255),b
 10223  00347A  EC9C  F008         	call	_printf	;wreg free
 10224  00347E  0012               	return		;funcret
 10225  003480                     __end_of_algorithmTest:
 10226                           	opt stack 0
 10227                           tblptru	equ	0xFF8
 10228                           tblptrh	equ	0xFF7
 10229                           tblptrl	equ	0xFF6
 10230                           tablat	equ	0xFF5
 10231                           prodh	equ	0xFF4
 10232                           prodl	equ	0xFF3
 10233                           intcon	equ	0xFF2
 10234                           intcon2	equ	0xFF1
 10235                           intcon3	equ	0xFF0
 10236                           postinc0	equ	0xFEE
 10237                           wreg	equ	0xFE8
 10238                           postdec1	equ	0xFE5
 10239                           fsr1l	equ	0xFE1
 10240                           indf2	equ	0xFDF
 10241                           postinc2	equ	0xFDE
 10242                           postdec2	equ	0xFDD
 10243                           fsr2h	equ	0xFDA
 10244                           fsr2l	equ	0xFD9
 10245                           status	equ	0xFD8
 10246                           
 10247 ;; *************** function _actuatorTest *****************
 10248 ;; Defined at:
 10249 ;;		line 164 in file "Test.c"
 10250 ;; Parameters:    Size  Location     Type
 10251 ;;		None
 10252 ;; Auto vars:     Size  Location     Type
 10253 ;;  i               1   45[BANK0 ] unsigned char 
 10254 ;;  i               1   67[BANK0 ] unsigned char 
 10255 ;;  i               1   66[BANK0 ] unsigned char 
 10256 ;;  i               1   65[BANK0 ] unsigned char 
 10257 ;;  i               1   64[BANK0 ] unsigned char 
 10258 ;;  i               1   63[BANK0 ] unsigned char 
 10259 ;;  i               1   62[BANK0 ] unsigned char 
 10260 ;;  i               1   61[BANK0 ] unsigned char 
 10261 ;;  i               1   60[BANK0 ] unsigned char 
 10262 ;;  i               1   59[BANK0 ] unsigned char 
 10263 ;;  i               1   58[BANK0 ] unsigned char 
 10264 ;;  i               1   57[BANK0 ] unsigned char 
 10265 ;;  i               1   56[BANK0 ] unsigned char 
 10266 ;;  i               1   55[BANK0 ] unsigned char 
 10267 ;;  i               1   54[BANK0 ] unsigned char 
 10268 ;;  i               1   53[BANK0 ] unsigned char 
 10269 ;;  i               1   52[BANK0 ] unsigned char 
 10270 ;;  i               1   51[BANK0 ] unsigned char 
 10271 ;;  i               1   50[BANK0 ] unsigned char 
 10272 ;;  i               1   49[BANK0 ] unsigned char 
 10273 ;;  i               1   48[BANK0 ] unsigned char 
 10274 ;;  i               1   47[BANK0 ] unsigned char 
 10275 ;;  i               1   46[BANK0 ] unsigned char 
 10276 ;;  i               2   68[BANK0 ] int 
 10277 ;; Return value:  Size  Location     Type
 10278 ;;                  1    wreg      void 
 10279 ;; Registers used:
 10280 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10281 ;; Tracked objects:
 10282 ;;		On entry : 0/0
 10283 ;;		On exit  : 0/0
 10284 ;;		Unchanged: 0/0
 10285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10286 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10287 ;;      Locals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10288 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10289 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10290 ;;Total ram usage:       27 bytes
 10291 ;; Hardware stack levels used:    1
 10292 ;; Hardware stack levels required when called:   10
 10293 ;; This function calls:
 10294 ;;		_lcdInst
 10295 ;;		_printf
 10296 ;;		_updateServoPosition
 10297 ;; This function is called by:
 10298 ;;		_Test
 10299 ;; This function uses a non-reentrant model
 10300 ;;
 10301                           
 10302                           	psect	text40
 10303  0008B8                     __ptext40:
 10304                           	opt stack 0
 10305  0008B8                     _actuatorTest:
 10306                           	opt stack 19
 10307                           
 10308                           ;Test.c: 166: int i = 0;
 10309                           
 10310                           ;incstack = 0
 10311  0008B8  0E00               	movlw	0
 10312  0008BA  0100               	movlb	0	; () banked
 10313  0008BC  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 10314  0008BE  0E00               	movlw	0
 10315  0008C0  6FC4               	movwf	actuatorTest@i& (0+255),b
 10316                           
 10317                           ; BSR set to: 0
 10318                           ;Test.c: 168: (INTCONbits.GIE = 1);
 10319  0008C2  8EF2               	bsf	intcon,7,c	;volatile
 10320                           
 10321                           ; BSR set to: 0
 10322                           ;Test.c: 169: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10323  0008C4  0E01               	movlw	1
 10324  0008C6  ECF0  F022         	call	_lcdInst
 10325  0008CA  0E68               	movlw	104
 10326  0008CC  0100               	movlb	0	; () banked
 10327  0008CE  6FAB               	movwf	??_actuatorTest& (0+255),b
 10328  0008D0  0EE4               	movlw	228
 10329  0008D2                     u7397:
 10330  0008D2  2EE8               	decfsz	wreg,f,c
 10331  0008D4  D7FE               	bra	u7397
 10332  0008D6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10333  0008D8  D7FC               	bra	u7397
 10334  0008DA  F000               	nop	
 10335  0008DC  0E80               	movlw	128
 10336  0008DE  ECF0  F022         	call	_lcdInst
 10337                           
 10338                           ;Test.c: 170: printf("ACTUATORS");
 10339  0008E2  0E99               	movlw	low STR_84
 10340  0008E4  0100               	movlb	0	; () banked
 10341  0008E6  6F8E               	movwf	printf@f& (0+255),b
 10342  0008E8  0EFF               	movlw	high STR_84
 10343  0008EA  0100               	movlb	0	; () banked
 10344  0008EC  6F8F               	movwf	(printf@f+1)& (0+255),b
 10345  0008EE  EC9C  F008         	call	_printf	;wreg free
 10346                           
 10347                           ;Test.c: 171: lcdInst(0b11000000);;
 10348  0008F2  0EC0               	movlw	192
 10349  0008F4  ECF0  F022         	call	_lcdInst
 10350                           
 10351                           ;Test.c: 172: printf("PUSH TO START");
 10352  0008F8  0E11               	movlw	low STR_71
 10353  0008FA  0100               	movlb	0	; () banked
 10354  0008FC  6F8E               	movwf	printf@f& (0+255),b
 10355  0008FE  0EFF               	movlw	high STR_71
 10356  000900  0100               	movlb	0	; () banked
 10357  000902  6F8F               	movwf	(printf@f+1)& (0+255),b
 10358  000904  EC9C  F008         	call	_printf	;wreg free
 10359                           
 10360                           ;Test.c: 173: _delay((unsigned long)((100)*(32000000/4000.0)));
 10361  000908  0E05               	movlw	5
 10362  00090A  0100               	movlb	0	; () banked
 10363  00090C  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10364  00090E  0E0F               	movlw	15
 10365  000910  0100               	movlb	0	; () banked
 10366  000912  6FAB               	movwf	??_actuatorTest& (0+255),b
 10367  000914  0EF1               	movlw	241
 10368  000916                     u7407:
 10369  000916  2EE8               	decfsz	wreg,f,c
 10370  000918  D7FE               	bra	u7407
 10371  00091A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10372  00091C  D7FC               	bra	u7407
 10373  00091E  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10374  000920  D7FA               	bra	u7407
 10375  000922                     l1074:
 10376  000922  A281               	btfss	3969,1,c	;volatile
 10377  000924  D7FE               	goto	l1074
 10378  000926                     l1077:
 10379  000926  B281               	btfsc	3969,1,c	;volatile
 10380  000928  D7FE               	goto	l1077
 10381                           
 10382                           ;Test.c: 176: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10383  00092A  0E01               	movlw	1
 10384  00092C  ECF0  F022         	call	_lcdInst
 10385  000930  0E68               	movlw	104
 10386  000932  0100               	movlb	0	; () banked
 10387  000934  6FAB               	movwf	??_actuatorTest& (0+255),b
 10388  000936  0EE4               	movlw	228
 10389  000938                     u7417:
 10390  000938  2EE8               	decfsz	wreg,f,c
 10391  00093A  D7FE               	bra	u7417
 10392  00093C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10393  00093E  D7FC               	bra	u7417
 10394  000940  F000               	nop	
 10395  000942  0E80               	movlw	128
 10396  000944  ECF0  F022         	call	_lcdInst
 10397                           
 10398                           ;Test.c: 181: printf("TST: DC MOTORS");
 10399  000948  0EC9               	movlw	low STR_86
 10400  00094A  0100               	movlb	0	; () banked
 10401  00094C  6F8E               	movwf	printf@f& (0+255),b
 10402  00094E  0EFE               	movlw	high STR_86
 10403  000950  0100               	movlb	0	; () banked
 10404  000952  6F8F               	movwf	(printf@f+1)& (0+255),b
 10405  000954  EC9C  F008         	call	_printf	;wreg free
 10406                           
 10407                           ;Test.c: 182: lcdInst(0b11000000);;
 10408  000958  0EC0               	movlw	192
 10409  00095A  ECF0  F022         	call	_lcdInst
 10410                           
 10411                           ;Test.c: 183: printf("PIN RA5 HIGH.");
 10412  00095E  0EE7               	movlw	low STR_87
 10413  000960  0100               	movlb	0	; () banked
 10414  000962  6F8E               	movwf	printf@f& (0+255),b
 10415  000964  0EFE               	movlw	high STR_87
 10416  000966  0100               	movlb	0	; () banked
 10417  000968  6F8F               	movwf	(printf@f+1)& (0+255),b
 10418  00096A  EC9C  F008         	call	_printf	;wreg free
 10419                           
 10420                           ;Test.c: 184: LATAbits.LATA5 = 1;
 10421  00096E  8A89               	bsf	3977,5,c	;volatile
 10422                           
 10423                           ;Test.c: 185: for(i=0;i<5;i++){for(char i=0;i<100;i++){_delay((unsigned long)((10)*(3200
      +                          0000/4000.0)));};}
 10424  000970  0E00               	movlw	0
 10425  000972  0100               	movlb	0	; () banked
 10426  000974  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 10427  000976  0E00               	movlw	0
 10428  000978  6FC4               	movwf	actuatorTest@i& (0+255),b
 10429                           
 10430                           ; BSR set to: 0
 10431  00097A  0100               	movlb	0	; () banked
 10432  00097C  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10433  00097E  D008               	goto	l6546
 10434  000980  0100               	movlb	0	; () banked
 10435  000982  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10436  000984  E123               	bnz	l1081
 10437  000986  0E05               	movlw	5
 10438  000988  0100               	movlb	0	; () banked
 10439  00098A  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 10440  00098C  B0D8               	btfsc	status,0,c
 10441  00098E  D01E               	goto	l1081
 10442  000990                     l6546:
 10443                           
 10444                           ; BSR set to: 0
 10445  000990  0E00               	movlw	0
 10446  000992  0100               	movlb	0	; () banked
 10447  000994  6FAD               	movwf	actuatorTest@i_1584& (0+255),b
 10448  000996                     l6548:
 10449                           
 10450                           ; BSR set to: 0
 10451  000996  0E63               	movlw	99
 10452  000998  0100               	movlb	0	; () banked
 10453  00099A  65AD               	cpfsgt	actuatorTest@i_1584& (0+255),b
 10454  00099C  D001               	goto	l6552
 10455  00099E  D00C               	goto	l6556
 10456  0009A0                     l6552:
 10457                           
 10458                           ; BSR set to: 0
 10459  0009A0  0E68               	movlw	104
 10460  0009A2  0100               	movlb	0	; () banked
 10461  0009A4  6FAB               	movwf	??_actuatorTest& (0+255),b
 10462  0009A6  0EE4               	movlw	228
 10463  0009A8                     u7427:
 10464  0009A8  2EE8               	decfsz	wreg,f,c
 10465  0009AA  D7FE               	bra	u7427
 10466  0009AC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10467  0009AE  D7FC               	bra	u7427
 10468  0009B0  F000               	nop	
 10469  0009B2  0100               	movlb	0	; () banked
 10470  0009B4  2BAD               	incf	actuatorTest@i_1584& (0+255),f,b
 10471  0009B6  D7EF               	goto	l6548
 10472  0009B8                     l6556:
 10473                           
 10474                           ; BSR set to: 0
 10475  0009B8  0100               	movlb	0	; () banked
 10476  0009BA  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 10477  0009BC  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 10478                           
 10479                           ; BSR set to: 0
 10480  0009BE  0100               	movlb	0	; () banked
 10481  0009C0  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10482  0009C2  D7E6               	goto	l6546
 10483  0009C4  0100               	movlb	0	; () banked
 10484  0009C6  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10485  0009C8  E101               	bnz	u5030
 10486  0009CA  D7DD               	goto	L7
 10487  0009CC                     u5030:
 10488  0009CC                     l1081:
 10489                           
 10490                           ; BSR set to: 0
 10491                           ;Test.c: 186: LATAbits.LATA5 = 0;
 10492  0009CC  9A89               	bcf	3977,5,c	;volatile
 10493                           
 10494                           ; BSR set to: 0
 10495                           ;Test.c: 187: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10496  0009CE  0E01               	movlw	1
 10497  0009D0  ECF0  F022         	call	_lcdInst
 10498  0009D4  0E68               	movlw	104
 10499  0009D6  0100               	movlb	0	; () banked
 10500  0009D8  6FAB               	movwf	??_actuatorTest& (0+255),b
 10501  0009DA  0EE4               	movlw	228
 10502  0009DC                     u7437:
 10503  0009DC  2EE8               	decfsz	wreg,f,c
 10504  0009DE  D7FE               	bra	u7437
 10505  0009E0  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10506  0009E2  D7FC               	bra	u7437
 10507  0009E4  F000               	nop	
 10508  0009E6  0E80               	movlw	128
 10509  0009E8  ECF0  F022         	call	_lcdInst
 10510                           
 10511                           ;Test.c: 193: printf("TST: COND SOLN'D");
 10512  0009EC  0EA9               	movlw	low STR_88
 10513  0009EE  0100               	movlb	0	; () banked
 10514  0009F0  6F8E               	movwf	printf@f& (0+255),b
 10515  0009F2  0EFC               	movlw	high STR_88
 10516  0009F4  0100               	movlb	0	; () banked
 10517  0009F6  6F8F               	movwf	(printf@f+1)& (0+255),b
 10518  0009F8  EC9C  F008         	call	_printf	;wreg free
 10519                           
 10520                           ;Test.c: 194: lcdInst(0b11000000);;
 10521  0009FC  0EC0               	movlw	192
 10522  0009FE  ECF0  F022         	call	_lcdInst
 10523                           
 10524                           ;Test.c: 195: printf("PIN RA3...");
 10525  000A02  0E6E               	movlw	low STR_89
 10526  000A04  0100               	movlb	0	; () banked
 10527  000A06  6F8E               	movwf	printf@f& (0+255),b
 10528  000A08  0EFF               	movlw	high STR_89
 10529  000A0A  0100               	movlb	0	; () banked
 10530  000A0C  6F8F               	movwf	(printf@f+1)& (0+255),b
 10531  000A0E  EC9C  F008         	call	_printf	;wreg free
 10532                           
 10533                           ;Test.c: 196: for(i=0;i<5;i++){
 10534  000A12  0E00               	movlw	0
 10535  000A14  0100               	movlb	0	; () banked
 10536  000A16  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 10537  000A18  0E00               	movlw	0
 10538  000A1A  6FC4               	movwf	actuatorTest@i& (0+255),b
 10539                           
 10540                           ; BSR set to: 0
 10541  000A1C  0100               	movlb	0	; () banked
 10542  000A1E  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10543  000A20  D008               	goto	l1084
 10544  000A22  0100               	movlb	0	; () banked
 10545  000A24  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10546  000A26  E12C               	bnz	l1085
 10547  000A28  0E05               	movlw	5
 10548  000A2A  0100               	movlb	0	; () banked
 10549  000A2C  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 10550  000A2E  B0D8               	btfsc	status,0,c
 10551  000A30  D027               	goto	l1085
 10552  000A32                     l1084:
 10553                           
 10554                           ; BSR set to: 0
 10555                           ;Test.c: 197: LATAbits.LATA3 = 1;
 10556  000A32  8689               	bsf	3977,3,c	;volatile
 10557                           
 10558                           ; BSR set to: 0
 10559                           ;Test.c: 198: _delay((unsigned long)((300)*(32000000/4000.0)));
 10560  000A34  0E0D               	movlw	13
 10561  000A36  0100               	movlb	0	; () banked
 10562  000A38  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10563  000A3A  0E2D               	movlw	45
 10564  000A3C  0100               	movlb	0	; () banked
 10565  000A3E  6FAB               	movwf	??_actuatorTest& (0+255),b
 10566  000A40  0ED7               	movlw	215
 10567  000A42                     u7447:
 10568  000A42  2EE8               	decfsz	wreg,f,c
 10569  000A44  D7FE               	bra	u7447
 10570  000A46  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10571  000A48  D7FC               	bra	u7447
 10572  000A4A  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10573  000A4C  D7FA               	bra	u7447
 10574  000A4E  D000               	nop2	
 10575                           
 10576                           ;Test.c: 199: LATAbits.LATA3 = ~1;
 10577  000A50  9689               	bcf	3977,3,c	;volatile
 10578                           
 10579                           ;Test.c: 200: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 10580  000A52  0E1D               	movlw	29
 10581  000A54  0100               	movlb	0	; () banked
 10582  000A56  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10583  000A58  0E69               	movlw	105
 10584  000A5A  0100               	movlb	0	; () banked
 10585  000A5C  6FAB               	movwf	??_actuatorTest& (0+255),b
 10586  000A5E  0EA5               	movlw	165
 10587  000A60                     u7457:
 10588  000A60  2EE8               	decfsz	wreg,f,c
 10589  000A62  D7FE               	bra	u7457
 10590  000A64  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10591  000A66  D7FC               	bra	u7457
 10592  000A68  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10593  000A6A  D7FA               	bra	u7457
 10594  000A6C  0100               	movlb	0	; () banked
 10595  000A6E  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 10596  000A70  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 10597  000A72  0100               	movlb	0	; () banked
 10598  000A74  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10599  000A76  D7DD               	goto	l1084
 10600  000A78  0100               	movlb	0	; () banked
 10601  000A7A  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10602  000A7C  E101               	bnz	u5050
 10603  000A7E  D7D4               	goto	L8
 10604  000A80                     u5050:
 10605  000A80                     l1085:
 10606                           
 10607                           ; BSR set to: 0
 10608                           ;Test.c: 201: }
 10609                           ;Test.c: 202: LATAbits.LATA3 = ~1;
 10610  000A80  9689               	bcf	3977,3,c	;volatile
 10611                           
 10612                           ; BSR set to: 0
 10613                           ;Test.c: 203: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10614  000A82  0E01               	movlw	1
 10615  000A84  ECF0  F022         	call	_lcdInst
 10616  000A88  0E68               	movlw	104
 10617  000A8A  0100               	movlb	0	; () banked
 10618  000A8C  6FAB               	movwf	??_actuatorTest& (0+255),b
 10619  000A8E  0EE4               	movlw	228
 10620  000A90                     u7467:
 10621  000A90  2EE8               	decfsz	wreg,f,c
 10622  000A92  D7FE               	bra	u7467
 10623  000A94  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10624  000A96  D7FC               	bra	u7467
 10625  000A98  F000               	nop	
 10626  000A9A  0E80               	movlw	128
 10627  000A9C  ECF0  F022         	call	_lcdInst
 10628                           
 10629                           ;Test.c: 209: printf("TST: PUSH SOLN'D");
 10630  000AA0  0EBA               	movlw	low STR_90
 10631  000AA2  0100               	movlb	0	; () banked
 10632  000AA4  6F8E               	movwf	printf@f& (0+255),b
 10633  000AA6  0EFC               	movlw	high STR_90
 10634  000AA8  0100               	movlb	0	; () banked
 10635  000AAA  6F8F               	movwf	(printf@f+1)& (0+255),b
 10636  000AAC  EC9C  F008         	call	_printf	;wreg free
 10637                           
 10638                           ;Test.c: 210: lcdInst(0b11000000);;
 10639  000AB0  0EC0               	movlw	192
 10640  000AB2  ECF0  F022         	call	_lcdInst
 10641                           
 10642                           ;Test.c: 211: printf("PIN RA4...");
 10643  000AB6  0E79               	movlw	low STR_91
 10644  000AB8  0100               	movlb	0	; () banked
 10645  000ABA  6F8E               	movwf	printf@f& (0+255),b
 10646  000ABC  0EFF               	movlw	high STR_91
 10647  000ABE  0100               	movlb	0	; () banked
 10648  000AC0  6F8F               	movwf	(printf@f+1)& (0+255),b
 10649  000AC2  EC9C  F008         	call	_printf	;wreg free
 10650                           
 10651                           ;Test.c: 212: for(i=0;i<5;i++){
 10652  000AC6  0E00               	movlw	0
 10653  000AC8  0100               	movlb	0	; () banked
 10654  000ACA  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 10655  000ACC  0E00               	movlw	0
 10656  000ACE  6FC4               	movwf	actuatorTest@i& (0+255),b
 10657                           
 10658                           ; BSR set to: 0
 10659  000AD0  0100               	movlb	0	; () banked
 10660  000AD2  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10661  000AD4  D008               	goto	l1086
 10662  000AD6  0100               	movlb	0	; () banked
 10663  000AD8  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10664  000ADA  E12C               	bnz	l1087
 10665  000ADC  0E05               	movlw	5
 10666  000ADE  0100               	movlb	0	; () banked
 10667  000AE0  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 10668  000AE2  B0D8               	btfsc	status,0,c
 10669  000AE4  D027               	goto	l1087
 10670  000AE6                     l1086:
 10671                           
 10672                           ; BSR set to: 0
 10673                           ;Test.c: 213: LATAbits.LATA4 = 1;
 10674  000AE6  8889               	bsf	3977,4,c	;volatile
 10675                           
 10676                           ; BSR set to: 0
 10677                           ;Test.c: 214: _delay((unsigned long)((300)*(32000000/4000.0)));
 10678  000AE8  0E0D               	movlw	13
 10679  000AEA  0100               	movlb	0	; () banked
 10680  000AEC  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10681  000AEE  0E2D               	movlw	45
 10682  000AF0  0100               	movlb	0	; () banked
 10683  000AF2  6FAB               	movwf	??_actuatorTest& (0+255),b
 10684  000AF4  0ED7               	movlw	215
 10685  000AF6                     u7477:
 10686  000AF6  2EE8               	decfsz	wreg,f,c
 10687  000AF8  D7FE               	bra	u7477
 10688  000AFA  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10689  000AFC  D7FC               	bra	u7477
 10690  000AFE  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10691  000B00  D7FA               	bra	u7477
 10692  000B02  D000               	nop2	
 10693                           
 10694                           ;Test.c: 215: LATAbits.LATA4 = ~1;
 10695  000B04  9889               	bcf	3977,4,c	;volatile
 10696                           
 10697                           ;Test.c: 216: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 10698  000B06  0E1D               	movlw	29
 10699  000B08  0100               	movlb	0	; () banked
 10700  000B0A  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10701  000B0C  0E69               	movlw	105
 10702  000B0E  0100               	movlb	0	; () banked
 10703  000B10  6FAB               	movwf	??_actuatorTest& (0+255),b
 10704  000B12  0EA5               	movlw	165
 10705  000B14                     u7487:
 10706  000B14  2EE8               	decfsz	wreg,f,c
 10707  000B16  D7FE               	bra	u7487
 10708  000B18  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10709  000B1A  D7FC               	bra	u7487
 10710  000B1C  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10711  000B1E  D7FA               	bra	u7487
 10712  000B20  0100               	movlb	0	; () banked
 10713  000B22  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 10714  000B24  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 10715  000B26  0100               	movlb	0	; () banked
 10716  000B28  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10717  000B2A  D7DD               	goto	l1086
 10718  000B2C  0100               	movlb	0	; () banked
 10719  000B2E  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10720  000B30  E101               	bnz	u5070
 10721  000B32  D7D4               	goto	L9
 10722  000B34                     u5070:
 10723  000B34                     l1087:
 10724                           
 10725                           ; BSR set to: 0
 10726                           ;Test.c: 217: }
 10727                           ;Test.c: 218: LATAbits.LATA4 = ~1;
 10728  000B34  9889               	bcf	3977,4,c	;volatile
 10729                           
 10730                           ; BSR set to: 0
 10731                           ;Test.c: 219: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10732  000B36  0E01               	movlw	1
 10733  000B38  ECF0  F022         	call	_lcdInst
 10734  000B3C  0E68               	movlw	104
 10735  000B3E  0100               	movlb	0	; () banked
 10736  000B40  6FAB               	movwf	??_actuatorTest& (0+255),b
 10737  000B42  0EE4               	movlw	228
 10738  000B44                     u7497:
 10739  000B44  2EE8               	decfsz	wreg,f,c
 10740  000B46  D7FE               	bra	u7497
 10741  000B48  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10742  000B4A  D7FC               	bra	u7497
 10743  000B4C  F000               	nop	
 10744  000B4E  0E80               	movlw	128
 10745  000B50  ECF0  F022         	call	_lcdInst
 10746                           
 10747                           ;Test.c: 222: machine_state = Sorting_state;
 10748  000B54  0E01               	movlw	1
 10749  000B56  0100               	movlb	0	; () banked
 10750  000B58  6FFC               	movwf	_machine_state& (0+255),b
 10751                           
 10752                           ; BSR set to: 0
 10753                           ;Test.c: 223: was_low_1 = 0;
 10754  000B5A  0E00               	movlw	0
 10755  000B5C  6E7A               	movwf	_was_low_1+1,c	;volatile
 10756  000B5E  0E00               	movlw	0
 10757  000B60  6E79               	movwf	_was_low_1,c	;volatile
 10758                           
 10759                           ; BSR set to: 0
 10760                           ;Test.c: 224: was_low_1 = 0;
 10761  000B62  0E00               	movlw	0
 10762  000B64  6E7A               	movwf	_was_low_1+1,c	;volatile
 10763  000B66  0E00               	movlw	0
 10764  000B68  6E79               	movwf	_was_low_1,c	;volatile
 10765                           
 10766                           ; BSR set to: 0
 10767                           ;Test.c: 231: printf("TST: PAN SERVO");
 10768  000B6A  0EAB               	movlw	low STR_92
 10769  000B6C  0100               	movlb	0	; () banked
 10770  000B6E  6F8E               	movwf	printf@f& (0+255),b
 10771  000B70  0EFE               	movlw	high STR_92
 10772  000B72  0100               	movlb	0	; () banked
 10773  000B74  6F8F               	movwf	(printf@f+1)& (0+255),b
 10774  000B76  EC9C  F008         	call	_printf	;wreg free
 10775                           
 10776                           ;Test.c: 232: lcdInst(0b11000000);;
 10777  000B7A  0EC0               	movlw	192
 10778  000B7C  ECF0  F022         	call	_lcdInst
 10779                           
 10780                           ;Test.c: 233: printf("MIDDLE -- 2s    ");
 10781  000B80  0E32               	movlw	low STR_93
 10782  000B82  0100               	movlb	0	; () banked
 10783  000B84  6F8E               	movwf	printf@f& (0+255),b
 10784  000B86  0EFC               	movlw	high STR_93
 10785  000B88  0100               	movlb	0	; () banked
 10786  000B8A  6F8F               	movwf	(printf@f+1)& (0+255),b
 10787  000B8C  EC9C  F008         	call	_printf	;wreg free
 10788                           
 10789                           ;Test.c: 234: updateServoPosition(1200, 1);
 10790  000B90  0E04               	movlw	4
 10791  000B92  0100               	movlb	0	; () banked
 10792  000B94  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 10793  000B96  0EB0               	movlw	176
 10794  000B98  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 10795  000B9A  0E00               	movlw	0
 10796  000B9C  0100               	movlb	0	; () banked
 10797  000B9E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 10798  000BA0  0E01               	movlw	1
 10799  000BA2  6F82               	movwf	updateServoPosition@timer& (0+255),b
 10800  000BA4  EC44  F01D         	call	_updateServoPosition	;wreg free
 10801                           
 10802                           ;Test.c: 235: TMR1ON = 1;
 10803  000BA8  80CD               	bsf	4045,0,c	;volatile
 10804                           
 10805                           ;Test.c: 236: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 10806  000BAA  0E00               	movlw	0
 10807  000BAC  0100               	movlb	0	; () banked
 10808  000BAE  6FAE               	movwf	actuatorTest@i_1591& (0+255),b
 10809  000BB0                     l6632:
 10810                           
 10811                           ; BSR set to: 0
 10812  000BB0  0E63               	movlw	99
 10813  000BB2  0100               	movlb	0	; () banked
 10814  000BB4  65AE               	cpfsgt	actuatorTest@i_1591& (0+255),b
 10815  000BB6  D001               	goto	l6636
 10816  000BB8  D00C               	goto	l6640
 10817  000BBA                     l6636:
 10818                           
 10819                           ; BSR set to: 0
 10820  000BBA  0E68               	movlw	104
 10821  000BBC  0100               	movlb	0	; () banked
 10822  000BBE  6FAB               	movwf	??_actuatorTest& (0+255),b
 10823  000BC0  0EE4               	movlw	228
 10824  000BC2                     u7507:
 10825  000BC2  2EE8               	decfsz	wreg,f,c
 10826  000BC4  D7FE               	bra	u7507
 10827  000BC6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10828  000BC8  D7FC               	bra	u7507
 10829  000BCA  F000               	nop	
 10830  000BCC  0100               	movlb	0	; () banked
 10831  000BCE  2BAE               	incf	actuatorTest@i_1591& (0+255),f,b
 10832  000BD0  D7EF               	goto	l6632
 10833  000BD2                     l6640:
 10834                           
 10835                           ; BSR set to: 0
 10836  000BD2  0E00               	movlw	0
 10837  000BD4  0100               	movlb	0	; () banked
 10838  000BD6  6FAF               	movwf	actuatorTest@i_1592& (0+255),b
 10839  000BD8                     l6642:
 10840                           
 10841                           ; BSR set to: 0
 10842  000BD8  0E63               	movlw	99
 10843  000BDA  0100               	movlb	0	; () banked
 10844  000BDC  65AF               	cpfsgt	actuatorTest@i_1592& (0+255),b
 10845  000BDE  D001               	goto	l6646
 10846  000BE0  D00C               	goto	l6650
 10847  000BE2                     l6646:
 10848                           
 10849                           ; BSR set to: 0
 10850  000BE2  0E68               	movlw	104
 10851  000BE4  0100               	movlb	0	; () banked
 10852  000BE6  6FAB               	movwf	??_actuatorTest& (0+255),b
 10853  000BE8  0EE4               	movlw	228
 10854  000BEA                     u7517:
 10855  000BEA  2EE8               	decfsz	wreg,f,c
 10856  000BEC  D7FE               	bra	u7517
 10857  000BEE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10858  000BF0  D7FC               	bra	u7517
 10859  000BF2  F000               	nop	
 10860  000BF4  0100               	movlb	0	; () banked
 10861  000BF6  2BAF               	incf	actuatorTest@i_1592& (0+255),f,b
 10862  000BF8  D7EF               	goto	l6642
 10863  000BFA                     l6650:
 10864                           
 10865                           ; BSR set to: 0
 10866                           ;Test.c: 238: lcdInst(0b10000000);;lcdInst(0b11000000);;
 10867  000BFA  0E80               	movlw	128
 10868  000BFC  ECF0  F022         	call	_lcdInst
 10869  000C00  0EC0               	movlw	192
 10870  000C02  ECF0  F022         	call	_lcdInst
 10871                           
 10872                           ;Test.c: 239: printf("RIGHT -- 2s     ");
 10873  000C06  0E21               	movlw	low STR_94
 10874  000C08  0100               	movlb	0	; () banked
 10875  000C0A  6F8E               	movwf	printf@f& (0+255),b
 10876  000C0C  0EFC               	movlw	high STR_94
 10877  000C0E  0100               	movlb	0	; () banked
 10878  000C10  6F8F               	movwf	(printf@f+1)& (0+255),b
 10879  000C12  EC9C  F008         	call	_printf	;wreg free
 10880                           
 10881                           ;Test.c: 240: updateServoPosition(500, 1);
 10882  000C16  0E01               	movlw	1
 10883  000C18  0100               	movlb	0	; () banked
 10884  000C1A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 10885  000C1C  0EF4               	movlw	244
 10886  000C1E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 10887  000C20  0E00               	movlw	0
 10888  000C22  0100               	movlb	0	; () banked
 10889  000C24  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 10890  000C26  0E01               	movlw	1
 10891  000C28  6F82               	movwf	updateServoPosition@timer& (0+255),b
 10892  000C2A  EC44  F01D         	call	_updateServoPosition	;wreg free
 10893                           
 10894                           ;Test.c: 241: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 10895  000C2E  0E00               	movlw	0
 10896  000C30  0100               	movlb	0	; () banked
 10897  000C32  6FB0               	movwf	actuatorTest@i_1594& (0+255),b
 10898  000C34                     l6658:
 10899                           
 10900                           ; BSR set to: 0
 10901  000C34  0E63               	movlw	99
 10902  000C36  0100               	movlb	0	; () banked
 10903  000C38  65B0               	cpfsgt	actuatorTest@i_1594& (0+255),b
 10904  000C3A  D001               	goto	l6662
 10905  000C3C  D00C               	goto	l6666
 10906  000C3E                     l6662:
 10907                           
 10908                           ; BSR set to: 0
 10909  000C3E  0E68               	movlw	104
 10910  000C40  0100               	movlb	0	; () banked
 10911  000C42  6FAB               	movwf	??_actuatorTest& (0+255),b
 10912  000C44  0EE4               	movlw	228
 10913  000C46                     u7527:
 10914  000C46  2EE8               	decfsz	wreg,f,c
 10915  000C48  D7FE               	bra	u7527
 10916  000C4A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10917  000C4C  D7FC               	bra	u7527
 10918  000C4E  F000               	nop	
 10919  000C50  0100               	movlb	0	; () banked
 10920  000C52  2BB0               	incf	actuatorTest@i_1594& (0+255),f,b
 10921  000C54  D7EF               	goto	l6658
 10922  000C56                     l6666:
 10923                           
 10924                           ; BSR set to: 0
 10925  000C56  0E00               	movlw	0
 10926  000C58  0100               	movlb	0	; () banked
 10927  000C5A  6FB1               	movwf	actuatorTest@i_1595& (0+255),b
 10928  000C5C                     l6668:
 10929                           
 10930                           ; BSR set to: 0
 10931  000C5C  0E63               	movlw	99
 10932  000C5E  0100               	movlb	0	; () banked
 10933  000C60  65B1               	cpfsgt	actuatorTest@i_1595& (0+255),b
 10934  000C62  D001               	goto	l6672
 10935  000C64  D00C               	goto	l6676
 10936  000C66                     l6672:
 10937                           
 10938                           ; BSR set to: 0
 10939  000C66  0E68               	movlw	104
 10940  000C68  0100               	movlb	0	; () banked
 10941  000C6A  6FAB               	movwf	??_actuatorTest& (0+255),b
 10942  000C6C  0EE4               	movlw	228
 10943  000C6E                     u7537:
 10944  000C6E  2EE8               	decfsz	wreg,f,c
 10945  000C70  D7FE               	bra	u7537
 10946  000C72  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10947  000C74  D7FC               	bra	u7537
 10948  000C76  F000               	nop	
 10949  000C78  0100               	movlb	0	; () banked
 10950  000C7A  2BB1               	incf	actuatorTest@i_1595& (0+255),f,b
 10951  000C7C  D7EF               	goto	l6668
 10952  000C7E                     l6676:
 10953                           
 10954                           ; BSR set to: 0
 10955                           ;Test.c: 243: lcdInst(0b10000000);;lcdInst(0b11000000);;
 10956  000C7E  0E80               	movlw	128
 10957  000C80  ECF0  F022         	call	_lcdInst
 10958  000C84  0EC0               	movlw	192
 10959  000C86  ECF0  F022         	call	_lcdInst
 10960                           
 10961                           ;Test.c: 244: printf("LEFT -- 2s      ");
 10962  000C8A  0EFF               	movlw	low STR_95
 10963  000C8C  0100               	movlb	0	; () banked
 10964  000C8E  6F8E               	movwf	printf@f& (0+255),b
 10965  000C90  0EFB               	movlw	high STR_95
 10966  000C92  0100               	movlb	0	; () banked
 10967  000C94  6F8F               	movwf	(printf@f+1)& (0+255),b
 10968  000C96  EC9C  F008         	call	_printf	;wreg free
 10969                           
 10970                           ;Test.c: 245: updateServoPosition(2000, 1);
 10971  000C9A  0E07               	movlw	7
 10972  000C9C  0100               	movlb	0	; () banked
 10973  000C9E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 10974  000CA0  0ED0               	movlw	208
 10975  000CA2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 10976  000CA4  0E00               	movlw	0
 10977  000CA6  0100               	movlb	0	; () banked
 10978  000CA8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 10979  000CAA  0E01               	movlw	1
 10980  000CAC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 10981  000CAE  EC44  F01D         	call	_updateServoPosition	;wreg free
 10982                           
 10983                           ;Test.c: 246: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 10984  000CB2  0E00               	movlw	0
 10985  000CB4  0100               	movlb	0	; () banked
 10986  000CB6  6FB2               	movwf	actuatorTest@i_1597& (0+255),b
 10987  000CB8                     l6684:
 10988                           
 10989                           ; BSR set to: 0
 10990  000CB8  0E63               	movlw	99
 10991  000CBA  0100               	movlb	0	; () banked
 10992  000CBC  65B2               	cpfsgt	actuatorTest@i_1597& (0+255),b
 10993  000CBE  D001               	goto	l6688
 10994  000CC0  D00C               	goto	l6692
 10995  000CC2                     l6688:
 10996                           
 10997                           ; BSR set to: 0
 10998  000CC2  0E68               	movlw	104
 10999  000CC4  0100               	movlb	0	; () banked
 11000  000CC6  6FAB               	movwf	??_actuatorTest& (0+255),b
 11001  000CC8  0EE4               	movlw	228
 11002  000CCA                     u7547:
 11003  000CCA  2EE8               	decfsz	wreg,f,c
 11004  000CCC  D7FE               	bra	u7547
 11005  000CCE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11006  000CD0  D7FC               	bra	u7547
 11007  000CD2  F000               	nop	
 11008  000CD4  0100               	movlb	0	; () banked
 11009  000CD6  2BB2               	incf	actuatorTest@i_1597& (0+255),f,b
 11010  000CD8  D7EF               	goto	l6684
 11011  000CDA                     l6692:
 11012                           
 11013                           ; BSR set to: 0
 11014  000CDA  0E00               	movlw	0
 11015  000CDC  0100               	movlb	0	; () banked
 11016  000CDE  6FB3               	movwf	actuatorTest@i_1598& (0+255),b
 11017  000CE0                     l6694:
 11018                           
 11019                           ; BSR set to: 0
 11020  000CE0  0E63               	movlw	99
 11021  000CE2  0100               	movlb	0	; () banked
 11022  000CE4  65B3               	cpfsgt	actuatorTest@i_1598& (0+255),b
 11023  000CE6  D001               	goto	l6698
 11024  000CE8  D00C               	goto	l6702
 11025  000CEA                     l6698:
 11026                           
 11027                           ; BSR set to: 0
 11028  000CEA  0E68               	movlw	104
 11029  000CEC  0100               	movlb	0	; () banked
 11030  000CEE  6FAB               	movwf	??_actuatorTest& (0+255),b
 11031  000CF0  0EE4               	movlw	228
 11032  000CF2                     u7557:
 11033  000CF2  2EE8               	decfsz	wreg,f,c
 11034  000CF4  D7FE               	bra	u7557
 11035  000CF6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11036  000CF8  D7FC               	bra	u7557
 11037  000CFA  F000               	nop	
 11038  000CFC  0100               	movlb	0	; () banked
 11039  000CFE  2BB3               	incf	actuatorTest@i_1598& (0+255),f,b
 11040  000D00  D7EF               	goto	l6694
 11041  000D02                     l6702:
 11042                           
 11043                           ; BSR set to: 0
 11044                           ;Test.c: 248: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11045  000D02  0E80               	movlw	128
 11046  000D04  ECF0  F022         	call	_lcdInst
 11047  000D08  0EC0               	movlw	192
 11048  000D0A  ECF0  F022         	call	_lcdInst
 11049                           
 11050                           ;Test.c: 249: printf("MID-LEFT -- 2s  ");
 11051  000D0E  0E54               	movlw	low STR_96
 11052  000D10  0100               	movlb	0	; () banked
 11053  000D12  6F8E               	movwf	printf@f& (0+255),b
 11054  000D14  0EFC               	movlw	high STR_96
 11055  000D16  0100               	movlb	0	; () banked
 11056  000D18  6F8F               	movwf	(printf@f+1)& (0+255),b
 11057  000D1A  EC9C  F008         	call	_printf	;wreg free
 11058                           
 11059                           ;Test.c: 250: updateServoPosition(1700, 1);
 11060  000D1E  0E06               	movlw	6
 11061  000D20  0100               	movlb	0	; () banked
 11062  000D22  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11063  000D24  0EA4               	movlw	164
 11064  000D26  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11065  000D28  0E00               	movlw	0
 11066  000D2A  0100               	movlb	0	; () banked
 11067  000D2C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11068  000D2E  0E01               	movlw	1
 11069  000D30  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11070  000D32  EC44  F01D         	call	_updateServoPosition	;wreg free
 11071                           
 11072                           ;Test.c: 251: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11073  000D36  0E00               	movlw	0
 11074  000D38  0100               	movlb	0	; () banked
 11075  000D3A  6FB4               	movwf	actuatorTest@i_1600& (0+255),b
 11076  000D3C                     l6710:
 11077                           
 11078                           ; BSR set to: 0
 11079  000D3C  0E63               	movlw	99
 11080  000D3E  0100               	movlb	0	; () banked
 11081  000D40  65B4               	cpfsgt	actuatorTest@i_1600& (0+255),b
 11082  000D42  D001               	goto	l6714
 11083  000D44  D00C               	goto	l6718
 11084  000D46                     l6714:
 11085                           
 11086                           ; BSR set to: 0
 11087  000D46  0E68               	movlw	104
 11088  000D48  0100               	movlb	0	; () banked
 11089  000D4A  6FAB               	movwf	??_actuatorTest& (0+255),b
 11090  000D4C  0EE4               	movlw	228
 11091  000D4E                     u7567:
 11092  000D4E  2EE8               	decfsz	wreg,f,c
 11093  000D50  D7FE               	bra	u7567
 11094  000D52  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11095  000D54  D7FC               	bra	u7567
 11096  000D56  F000               	nop	
 11097  000D58  0100               	movlb	0	; () banked
 11098  000D5A  2BB4               	incf	actuatorTest@i_1600& (0+255),f,b
 11099  000D5C  D7EF               	goto	l6710
 11100  000D5E                     l6718:
 11101                           
 11102                           ; BSR set to: 0
 11103  000D5E  0E00               	movlw	0
 11104  000D60  0100               	movlb	0	; () banked
 11105  000D62  6FB5               	movwf	actuatorTest@i_1601& (0+255),b
 11106  000D64                     l6720:
 11107                           
 11108                           ; BSR set to: 0
 11109  000D64  0E63               	movlw	99
 11110  000D66  0100               	movlb	0	; () banked
 11111  000D68  65B5               	cpfsgt	actuatorTest@i_1601& (0+255),b
 11112  000D6A  D001               	goto	l6724
 11113  000D6C  D00C               	goto	l6728
 11114  000D6E                     l6724:
 11115                           
 11116                           ; BSR set to: 0
 11117  000D6E  0E68               	movlw	104
 11118  000D70  0100               	movlb	0	; () banked
 11119  000D72  6FAB               	movwf	??_actuatorTest& (0+255),b
 11120  000D74  0EE4               	movlw	228
 11121  000D76                     u7577:
 11122  000D76  2EE8               	decfsz	wreg,f,c
 11123  000D78  D7FE               	bra	u7577
 11124  000D7A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11125  000D7C  D7FC               	bra	u7577
 11126  000D7E  F000               	nop	
 11127  000D80  0100               	movlb	0	; () banked
 11128  000D82  2BB5               	incf	actuatorTest@i_1601& (0+255),f,b
 11129  000D84  D7EF               	goto	l6720
 11130  000D86                     l6728:
 11131                           
 11132                           ; BSR set to: 0
 11133                           ;Test.c: 253: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11134  000D86  0E80               	movlw	128
 11135  000D88  ECF0  F022         	call	_lcdInst
 11136  000D8C  0EC0               	movlw	192
 11137  000D8E  ECF0  F022         	call	_lcdInst
 11138                           
 11139                           ;Test.c: 254: printf("MID-RIGHT -- 2s ");
 11140  000D92  0E65               	movlw	low STR_97
 11141  000D94  0100               	movlb	0	; () banked
 11142  000D96  6F8E               	movwf	printf@f& (0+255),b
 11143  000D98  0EFC               	movlw	high STR_97
 11144  000D9A  0100               	movlb	0	; () banked
 11145  000D9C  6F8F               	movwf	(printf@f+1)& (0+255),b
 11146  000D9E  EC9C  F008         	call	_printf	;wreg free
 11147                           
 11148                           ;Test.c: 255: updateServoPosition(750, 1);
 11149  000DA2  0E02               	movlw	2
 11150  000DA4  0100               	movlb	0	; () banked
 11151  000DA6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11152  000DA8  0EEE               	movlw	238
 11153  000DAA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11154  000DAC  0E00               	movlw	0
 11155  000DAE  0100               	movlb	0	; () banked
 11156  000DB0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11157  000DB2  0E01               	movlw	1
 11158  000DB4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11159  000DB6  EC44  F01D         	call	_updateServoPosition	;wreg free
 11160                           
 11161                           ;Test.c: 256: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11162  000DBA  0E00               	movlw	0
 11163  000DBC  0100               	movlb	0	; () banked
 11164  000DBE  6FB6               	movwf	actuatorTest@i_1603& (0+255),b
 11165  000DC0                     l6736:
 11166                           
 11167                           ; BSR set to: 0
 11168  000DC0  0E63               	movlw	99
 11169  000DC2  0100               	movlb	0	; () banked
 11170  000DC4  65B6               	cpfsgt	actuatorTest@i_1603& (0+255),b
 11171  000DC6  D001               	goto	l6740
 11172  000DC8  D00C               	goto	l6744
 11173  000DCA                     l6740:
 11174                           
 11175                           ; BSR set to: 0
 11176  000DCA  0E68               	movlw	104
 11177  000DCC  0100               	movlb	0	; () banked
 11178  000DCE  6FAB               	movwf	??_actuatorTest& (0+255),b
 11179  000DD0  0EE4               	movlw	228
 11180  000DD2                     u7587:
 11181  000DD2  2EE8               	decfsz	wreg,f,c
 11182  000DD4  D7FE               	bra	u7587
 11183  000DD6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11184  000DD8  D7FC               	bra	u7587
 11185  000DDA  F000               	nop	
 11186  000DDC  0100               	movlb	0	; () banked
 11187  000DDE  2BB6               	incf	actuatorTest@i_1603& (0+255),f,b
 11188  000DE0  D7EF               	goto	l6736
 11189  000DE2                     l6744:
 11190                           
 11191                           ; BSR set to: 0
 11192  000DE2  0E00               	movlw	0
 11193  000DE4  0100               	movlb	0	; () banked
 11194  000DE6  6FB7               	movwf	actuatorTest@i_1604& (0+255),b
 11195  000DE8                     l6746:
 11196                           
 11197                           ; BSR set to: 0
 11198  000DE8  0E63               	movlw	99
 11199  000DEA  0100               	movlb	0	; () banked
 11200  000DEC  65B7               	cpfsgt	actuatorTest@i_1604& (0+255),b
 11201  000DEE  D001               	goto	l6750
 11202  000DF0  D00C               	goto	l6754
 11203  000DF2                     l6750:
 11204                           
 11205                           ; BSR set to: 0
 11206  000DF2  0E68               	movlw	104
 11207  000DF4  0100               	movlb	0	; () banked
 11208  000DF6  6FAB               	movwf	??_actuatorTest& (0+255),b
 11209  000DF8  0EE4               	movlw	228
 11210  000DFA                     u7597:
 11211  000DFA  2EE8               	decfsz	wreg,f,c
 11212  000DFC  D7FE               	bra	u7597
 11213  000DFE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11214  000E00  D7FC               	bra	u7597
 11215  000E02  F000               	nop	
 11216  000E04  0100               	movlb	0	; () banked
 11217  000E06  2BB7               	incf	actuatorTest@i_1604& (0+255),f,b
 11218  000E08  D7EF               	goto	l6746
 11219  000E0A                     l6754:
 11220                           
 11221                           ; BSR set to: 0
 11222                           ;Test.c: 258: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11223  000E0A  0E80               	movlw	128
 11224  000E0C  ECF0  F022         	call	_lcdInst
 11225  000E10  0EC0               	movlw	192
 11226  000E12  ECF0  F022         	call	_lcdInst
 11227                           
 11228                           ;Test.c: 259: printf("MID -- 2s       ");
 11229  000E16  0EDD               	movlw	low STR_98
 11230  000E18  0100               	movlb	0	; () banked
 11231  000E1A  6F8E               	movwf	printf@f& (0+255),b
 11232  000E1C  0EFB               	movlw	high STR_98
 11233  000E1E  0100               	movlb	0	; () banked
 11234  000E20  6F8F               	movwf	(printf@f+1)& (0+255),b
 11235  000E22  EC9C  F008         	call	_printf	;wreg free
 11236                           
 11237                           ;Test.c: 260: updateServoPosition(1200, 1);
 11238  000E26  0E04               	movlw	4
 11239  000E28  0100               	movlb	0	; () banked
 11240  000E2A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11241  000E2C  0EB0               	movlw	176
 11242  000E2E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11243  000E30  0E00               	movlw	0
 11244  000E32  0100               	movlb	0	; () banked
 11245  000E34  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11246  000E36  0E01               	movlw	1
 11247  000E38  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11248  000E3A  EC44  F01D         	call	_updateServoPosition	;wreg free
 11249                           
 11250                           ;Test.c: 261: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11251  000E3E  0E00               	movlw	0
 11252  000E40  0100               	movlb	0	; () banked
 11253  000E42  6FB8               	movwf	actuatorTest@i_1606& (0+255),b
 11254  000E44                     l6762:
 11255                           
 11256                           ; BSR set to: 0
 11257  000E44  0E63               	movlw	99
 11258  000E46  0100               	movlb	0	; () banked
 11259  000E48  65B8               	cpfsgt	actuatorTest@i_1606& (0+255),b
 11260  000E4A  D001               	goto	l6766
 11261  000E4C  D00C               	goto	l6770
 11262  000E4E                     l6766:
 11263                           
 11264                           ; BSR set to: 0
 11265  000E4E  0E68               	movlw	104
 11266  000E50  0100               	movlb	0	; () banked
 11267  000E52  6FAB               	movwf	??_actuatorTest& (0+255),b
 11268  000E54  0EE4               	movlw	228
 11269  000E56                     u7607:
 11270  000E56  2EE8               	decfsz	wreg,f,c
 11271  000E58  D7FE               	bra	u7607
 11272  000E5A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11273  000E5C  D7FC               	bra	u7607
 11274  000E5E  F000               	nop	
 11275  000E60  0100               	movlb	0	; () banked
 11276  000E62  2BB8               	incf	actuatorTest@i_1606& (0+255),f,b
 11277  000E64  D7EF               	goto	l6762
 11278  000E66                     l6770:
 11279                           
 11280                           ; BSR set to: 0
 11281  000E66  0E00               	movlw	0
 11282  000E68  0100               	movlb	0	; () banked
 11283  000E6A  6FB9               	movwf	actuatorTest@i_1607& (0+255),b
 11284  000E6C                     l6772:
 11285                           
 11286                           ; BSR set to: 0
 11287  000E6C  0E63               	movlw	99
 11288  000E6E  0100               	movlb	0	; () banked
 11289  000E70  65B9               	cpfsgt	actuatorTest@i_1607& (0+255),b
 11290  000E72  D001               	goto	l6776
 11291  000E74  D00C               	goto	l1111
 11292  000E76                     l6776:
 11293                           
 11294                           ; BSR set to: 0
 11295  000E76  0E68               	movlw	104
 11296  000E78  0100               	movlb	0	; () banked
 11297  000E7A  6FAB               	movwf	??_actuatorTest& (0+255),b
 11298  000E7C  0EE4               	movlw	228
 11299  000E7E                     u7617:
 11300  000E7E  2EE8               	decfsz	wreg,f,c
 11301  000E80  D7FE               	bra	u7617
 11302  000E82  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11303  000E84  D7FC               	bra	u7617
 11304  000E86  F000               	nop	
 11305  000E88  0100               	movlb	0	; () banked
 11306  000E8A  2BB9               	incf	actuatorTest@i_1607& (0+255),f,b
 11307  000E8C  D7EF               	goto	l6772
 11308  000E8E                     l1111:
 11309                           
 11310                           ; BSR set to: 0
 11311                           ;Test.c: 262: TMR1ON = 0;
 11312  000E8E  90CD               	bcf	4045,0,c	;volatile
 11313                           
 11314                           ; BSR set to: 0
 11315                           ;Test.c: 269: printf("TST: TILT SERVO");
 11316  000E90  0E40               	movlw	low STR_99
 11317  000E92  0100               	movlb	0	; () banked
 11318  000E94  6F8E               	movwf	printf@f& (0+255),b
 11319  000E96  0EFE               	movlw	high STR_99
 11320  000E98  0100               	movlb	0	; () banked
 11321  000E9A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11322  000E9C  EC9C  F008         	call	_printf	;wreg free
 11323                           
 11324                           ;Test.c: 270: lcdInst(0b11000000);;
 11325  000EA0  0EC0               	movlw	192
 11326  000EA2  ECF0  F022         	call	_lcdInst
 11327                           
 11328                           ;Test.c: 271: printf("LEVEL -- 2s     ");
 11329  000EA6  0E10               	movlw	low STR_100
 11330  000EA8  0100               	movlb	0	; () banked
 11331  000EAA  6F8E               	movwf	printf@f& (0+255),b
 11332  000EAC  0EFC               	movlw	high STR_100
 11333  000EAE  0100               	movlb	0	; () banked
 11334  000EB0  6F8F               	movwf	(printf@f+1)& (0+255),b
 11335  000EB2  EC9C  F008         	call	_printf	;wreg free
 11336                           
 11337                           ;Test.c: 272: updateServoPosition(1190, 3);
 11338  000EB6  0E04               	movlw	4
 11339  000EB8  0100               	movlb	0	; () banked
 11340  000EBA  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11341  000EBC  0EA6               	movlw	166
 11342  000EBE  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11343  000EC0  0E00               	movlw	0
 11344  000EC2  0100               	movlb	0	; () banked
 11345  000EC4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11346  000EC6  0E03               	movlw	3
 11347  000EC8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11348  000ECA  EC44  F01D         	call	_updateServoPosition	;wreg free
 11349                           
 11350                           ;Test.c: 273: TMR3ON = 1;
 11351  000ECE  80B1               	bsf	4017,0,c	;volatile
 11352                           
 11353                           ;Test.c: 274: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11354  000ED0  0E00               	movlw	0
 11355  000ED2  0100               	movlb	0	; () banked
 11356  000ED4  6FBA               	movwf	actuatorTest@i_1610& (0+255),b
 11357  000ED6                     l6790:
 11358                           
 11359                           ; BSR set to: 0
 11360  000ED6  0E63               	movlw	99
 11361  000ED8  0100               	movlb	0	; () banked
 11362  000EDA  65BA               	cpfsgt	actuatorTest@i_1610& (0+255),b
 11363  000EDC  D001               	goto	l6794
 11364  000EDE  D00C               	goto	l6798
 11365  000EE0                     l6794:
 11366                           
 11367                           ; BSR set to: 0
 11368  000EE0  0E68               	movlw	104
 11369  000EE2  0100               	movlb	0	; () banked
 11370  000EE4  6FAB               	movwf	??_actuatorTest& (0+255),b
 11371  000EE6  0EE4               	movlw	228
 11372  000EE8                     u7627:
 11373  000EE8  2EE8               	decfsz	wreg,f,c
 11374  000EEA  D7FE               	bra	u7627
 11375  000EEC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11376  000EEE  D7FC               	bra	u7627
 11377  000EF0  F000               	nop	
 11378  000EF2  0100               	movlb	0	; () banked
 11379  000EF4  2BBA               	incf	actuatorTest@i_1610& (0+255),f,b
 11380  000EF6  D7EF               	goto	l6790
 11381  000EF8                     l6798:
 11382                           
 11383                           ; BSR set to: 0
 11384  000EF8  0E00               	movlw	0
 11385  000EFA  0100               	movlb	0	; () banked
 11386  000EFC  6FBB               	movwf	actuatorTest@i_1611& (0+255),b
 11387  000EFE                     l6800:
 11388                           
 11389                           ; BSR set to: 0
 11390  000EFE  0E63               	movlw	99
 11391  000F00  0100               	movlb	0	; () banked
 11392  000F02  65BB               	cpfsgt	actuatorTest@i_1611& (0+255),b
 11393  000F04  D001               	goto	l6804
 11394  000F06  D00C               	goto	l6808
 11395  000F08                     l6804:
 11396                           
 11397                           ; BSR set to: 0
 11398  000F08  0E68               	movlw	104
 11399  000F0A  0100               	movlb	0	; () banked
 11400  000F0C  6FAB               	movwf	??_actuatorTest& (0+255),b
 11401  000F0E  0EE4               	movlw	228
 11402  000F10                     u7637:
 11403  000F10  2EE8               	decfsz	wreg,f,c
 11404  000F12  D7FE               	bra	u7637
 11405  000F14  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11406  000F16  D7FC               	bra	u7637
 11407  000F18  F000               	nop	
 11408  000F1A  0100               	movlb	0	; () banked
 11409  000F1C  2BBB               	incf	actuatorTest@i_1611& (0+255),f,b
 11410  000F1E  D7EF               	goto	l6800
 11411  000F20                     l6808:
 11412                           
 11413                           ; BSR set to: 0
 11414                           ;Test.c: 276: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11415  000F20  0E80               	movlw	128
 11416  000F22  ECF0  F022         	call	_lcdInst
 11417  000F26  0EC0               	movlw	192
 11418  000F28  ECF0  F022         	call	_lcdInst
 11419                           
 11420                           ;Test.c: 277: printf("DROP -- 2s      ");
 11421  000F2C  0EEE               	movlw	low STR_101
 11422  000F2E  0100               	movlb	0	; () banked
 11423  000F30  6F8E               	movwf	printf@f& (0+255),b
 11424  000F32  0EFB               	movlw	high STR_101
 11425  000F34  0100               	movlb	0	; () banked
 11426  000F36  6F8F               	movwf	(printf@f+1)& (0+255),b
 11427  000F38  EC9C  F008         	call	_printf	;wreg free
 11428                           
 11429                           ;Test.c: 278: updateServoPosition(1350, 3);
 11430  000F3C  0E05               	movlw	5
 11431  000F3E  0100               	movlb	0	; () banked
 11432  000F40  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11433  000F42  0E46               	movlw	70
 11434  000F44  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11435  000F46  0E00               	movlw	0
 11436  000F48  0100               	movlb	0	; () banked
 11437  000F4A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11438  000F4C  0E03               	movlw	3
 11439  000F4E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11440  000F50  EC44  F01D         	call	_updateServoPosition	;wreg free
 11441                           
 11442                           ;Test.c: 279: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11443  000F54  0E00               	movlw	0
 11444  000F56  0100               	movlb	0	; () banked
 11445  000F58  6FBC               	movwf	actuatorTest@i_1613& (0+255),b
 11446  000F5A                     l6816:
 11447                           
 11448                           ; BSR set to: 0
 11449  000F5A  0E63               	movlw	99
 11450  000F5C  0100               	movlb	0	; () banked
 11451  000F5E  65BC               	cpfsgt	actuatorTest@i_1613& (0+255),b
 11452  000F60  D001               	goto	l6820
 11453  000F62  D00C               	goto	l6824
 11454  000F64                     l6820:
 11455                           
 11456                           ; BSR set to: 0
 11457  000F64  0E68               	movlw	104
 11458  000F66  0100               	movlb	0	; () banked
 11459  000F68  6FAB               	movwf	??_actuatorTest& (0+255),b
 11460  000F6A  0EE4               	movlw	228
 11461  000F6C                     u7647:
 11462  000F6C  2EE8               	decfsz	wreg,f,c
 11463  000F6E  D7FE               	bra	u7647
 11464  000F70  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11465  000F72  D7FC               	bra	u7647
 11466  000F74  F000               	nop	
 11467  000F76  0100               	movlb	0	; () banked
 11468  000F78  2BBC               	incf	actuatorTest@i_1613& (0+255),f,b
 11469  000F7A  D7EF               	goto	l6816
 11470  000F7C                     l6824:
 11471                           
 11472                           ; BSR set to: 0
 11473  000F7C  0E00               	movlw	0
 11474  000F7E  0100               	movlb	0	; () banked
 11475  000F80  6FBD               	movwf	actuatorTest@i_1614& (0+255),b
 11476  000F82                     l6826:
 11477                           
 11478                           ; BSR set to: 0
 11479  000F82  0E63               	movlw	99
 11480  000F84  0100               	movlb	0	; () banked
 11481  000F86  65BD               	cpfsgt	actuatorTest@i_1614& (0+255),b
 11482  000F88  D001               	goto	l6830
 11483  000F8A  D00C               	goto	l6834
 11484  000F8C                     l6830:
 11485                           
 11486                           ; BSR set to: 0
 11487  000F8C  0E68               	movlw	104
 11488  000F8E  0100               	movlb	0	; () banked
 11489  000F90  6FAB               	movwf	??_actuatorTest& (0+255),b
 11490  000F92  0EE4               	movlw	228
 11491  000F94                     u7657:
 11492  000F94  2EE8               	decfsz	wreg,f,c
 11493  000F96  D7FE               	bra	u7657
 11494  000F98  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11495  000F9A  D7FC               	bra	u7657
 11496  000F9C  F000               	nop	
 11497  000F9E  0100               	movlb	0	; () banked
 11498  000FA0  2BBD               	incf	actuatorTest@i_1614& (0+255),f,b
 11499  000FA2  D7EF               	goto	l6826
 11500  000FA4                     l6834:
 11501                           
 11502                           ; BSR set to: 0
 11503                           ;Test.c: 281: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11504  000FA4  0E80               	movlw	128
 11505  000FA6  ECF0  F022         	call	_lcdInst
 11506  000FAA  0EC0               	movlw	192
 11507  000FAC  ECF0  F022         	call	_lcdInst
 11508                           
 11509                           ;Test.c: 282: printf("LEVEL -- 2s     ");
 11510  000FB0  0E10               	movlw	low STR_100
 11511  000FB2  0100               	movlb	0	; () banked
 11512  000FB4  6F8E               	movwf	printf@f& (0+255),b
 11513  000FB6  0EFC               	movlw	high STR_100
 11514  000FB8  0100               	movlb	0	; () banked
 11515  000FBA  6F8F               	movwf	(printf@f+1)& (0+255),b
 11516  000FBC  EC9C  F008         	call	_printf	;wreg free
 11517                           
 11518                           ;Test.c: 283: updateServoPosition(1190, 3);
 11519  000FC0  0E04               	movlw	4
 11520  000FC2  0100               	movlb	0	; () banked
 11521  000FC4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11522  000FC6  0EA6               	movlw	166
 11523  000FC8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11524  000FCA  0E00               	movlw	0
 11525  000FCC  0100               	movlb	0	; () banked
 11526  000FCE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11527  000FD0  0E03               	movlw	3
 11528  000FD2  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11529  000FD4  EC44  F01D         	call	_updateServoPosition	;wreg free
 11530                           
 11531                           ;Test.c: 284: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11532  000FD8  0E00               	movlw	0
 11533  000FDA  0100               	movlb	0	; () banked
 11534  000FDC  6FBE               	movwf	actuatorTest@i_1616& (0+255),b
 11535  000FDE                     l6842:
 11536                           
 11537                           ; BSR set to: 0
 11538  000FDE  0E63               	movlw	99
 11539  000FE0  0100               	movlb	0	; () banked
 11540  000FE2  65BE               	cpfsgt	actuatorTest@i_1616& (0+255),b
 11541  000FE4  D001               	goto	l6846
 11542  000FE6  D00C               	goto	l6850
 11543  000FE8                     l6846:
 11544                           
 11545                           ; BSR set to: 0
 11546  000FE8  0E68               	movlw	104
 11547  000FEA  0100               	movlb	0	; () banked
 11548  000FEC  6FAB               	movwf	??_actuatorTest& (0+255),b
 11549  000FEE  0EE4               	movlw	228
 11550  000FF0                     u7667:
 11551  000FF0  2EE8               	decfsz	wreg,f,c
 11552  000FF2  D7FE               	bra	u7667
 11553  000FF4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11554  000FF6  D7FC               	bra	u7667
 11555  000FF8  F000               	nop	
 11556  000FFA  0100               	movlb	0	; () banked
 11557  000FFC  2BBE               	incf	actuatorTest@i_1616& (0+255),f,b
 11558  000FFE  D7EF               	goto	l6842
 11559  001000                     l6850:
 11560                           
 11561                           ; BSR set to: 0
 11562  001000  0E00               	movlw	0
 11563  001002  0100               	movlb	0	; () banked
 11564  001004  6FBF               	movwf	actuatorTest@i_1617& (0+255),b
 11565  001006                     l6852:
 11566                           
 11567                           ; BSR set to: 0
 11568  001006  0E63               	movlw	99
 11569  001008  0100               	movlb	0	; () banked
 11570  00100A  65BF               	cpfsgt	actuatorTest@i_1617& (0+255),b
 11571  00100C  D001               	goto	l6856
 11572  00100E  D00C               	goto	l1123
 11573  001010                     l6856:
 11574                           
 11575                           ; BSR set to: 0
 11576  001010  0E68               	movlw	104
 11577  001012  0100               	movlb	0	; () banked
 11578  001014  6FAB               	movwf	??_actuatorTest& (0+255),b
 11579  001016  0EE4               	movlw	228
 11580  001018                     u7677:
 11581  001018  2EE8               	decfsz	wreg,f,c
 11582  00101A  D7FE               	bra	u7677
 11583  00101C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11584  00101E  D7FC               	bra	u7677
 11585  001020  F000               	nop	
 11586  001022  0100               	movlb	0	; () banked
 11587  001024  2BBF               	incf	actuatorTest@i_1617& (0+255),f,b
 11588  001026  D7EF               	goto	l6852
 11589  001028                     l1123:
 11590                           
 11591                           ; BSR set to: 0
 11592                           ;Test.c: 285: TMR3ON = 0;
 11593  001028  90B1               	bcf	4017,0,c	;volatile
 11594                           
 11595                           ;Test.c: 286: (INTCONbits.GIE = 0);
 11596  00102A  9EF2               	bcf	intcon,7,c	;volatile
 11597                           
 11598                           ; BSR set to: 0
 11599                           ;Test.c: 291: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11600  00102C  0E01               	movlw	1
 11601  00102E  ECF0  F022         	call	_lcdInst
 11602  001032  0E68               	movlw	104
 11603  001034  0100               	movlb	0	; () banked
 11604  001036  6FAB               	movwf	??_actuatorTest& (0+255),b
 11605  001038  0EE4               	movlw	228
 11606  00103A                     u7687:
 11607  00103A  2EE8               	decfsz	wreg,f,c
 11608  00103C  D7FE               	bra	u7687
 11609  00103E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11610  001040  D7FC               	bra	u7687
 11611  001042  F000               	nop	
 11612  001044  0E80               	movlw	128
 11613  001046  ECF0  F022         	call	_lcdInst
 11614                           
 11615                           ;Test.c: 292: printf("TST: CAM SERVO");
 11616  00104A  0E9C               	movlw	low STR_103
 11617  00104C  0100               	movlb	0	; () banked
 11618  00104E  6F8E               	movwf	printf@f& (0+255),b
 11619  001050  0EFE               	movlw	high STR_103
 11620  001052  0100               	movlb	0	; () banked
 11621  001054  6F8F               	movwf	(printf@f+1)& (0+255),b
 11622  001056  EC9C  F008         	call	_printf	;wreg free
 11623                           
 11624                           ;Test.c: 293: lcdInst(0b11000000);;
 11625  00105A  0EC0               	movlw	192
 11626  00105C  ECF0  F022         	call	_lcdInst
 11627                           
 11628                           ;Test.c: 294: printf("CAM UP  |RC0=1");
 11629  001060  0E7E               	movlw	low STR_104
 11630  001062  0100               	movlb	0	; () banked
 11631  001064  6F8E               	movwf	printf@f& (0+255),b
 11632  001066  0EFE               	movlw	high STR_104
 11633  001068  0100               	movlb	0	; () banked
 11634  00106A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11635  00106C  EC9C  F008         	call	_printf	;wreg free
 11636                           
 11637                           ;Test.c: 305: LATCbits.LATC0 = 0;
 11638  001070  908B               	bcf	3979,0,c	;volatile
 11639                           
 11640                           ;Test.c: 306: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11641  001072  0E00               	movlw	0
 11642  001074  0100               	movlb	0	; () banked
 11643  001076  6FC0               	movwf	actuatorTest@i_1620& (0+255),b
 11644  001078                     l6876:
 11645                           
 11646                           ; BSR set to: 0
 11647  001078  0E63               	movlw	99
 11648  00107A  0100               	movlb	0	; () banked
 11649  00107C  65C0               	cpfsgt	actuatorTest@i_1620& (0+255),b
 11650  00107E  D001               	goto	l6880
 11651  001080  D00C               	goto	l6884
 11652  001082                     l6880:
 11653                           
 11654                           ; BSR set to: 0
 11655  001082  0E68               	movlw	104
 11656  001084  0100               	movlb	0	; () banked
 11657  001086  6FAB               	movwf	??_actuatorTest& (0+255),b
 11658  001088  0EE4               	movlw	228
 11659  00108A                     u7697:
 11660  00108A  2EE8               	decfsz	wreg,f,c
 11661  00108C  D7FE               	bra	u7697
 11662  00108E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11663  001090  D7FC               	bra	u7697
 11664  001092  F000               	nop	
 11665  001094  0100               	movlb	0	; () banked
 11666  001096  2BC0               	incf	actuatorTest@i_1620& (0+255),f,b
 11667  001098  D7EF               	goto	l6876
 11668  00109A                     l6884:
 11669                           
 11670                           ; BSR set to: 0
 11671  00109A  0E00               	movlw	0
 11672  00109C  0100               	movlb	0	; () banked
 11673  00109E  6FC1               	movwf	actuatorTest@i_1621& (0+255),b
 11674  0010A0                     l6886:
 11675                           
 11676                           ; BSR set to: 0
 11677  0010A0  0E63               	movlw	99
 11678  0010A2  0100               	movlb	0	; () banked
 11679  0010A4  65C1               	cpfsgt	actuatorTest@i_1621& (0+255),b
 11680  0010A6  D001               	goto	l6890
 11681  0010A8  D00C               	goto	l6894
 11682  0010AA                     l6890:
 11683                           
 11684                           ; BSR set to: 0
 11685  0010AA  0E68               	movlw	104
 11686  0010AC  0100               	movlb	0	; () banked
 11687  0010AE  6FAB               	movwf	??_actuatorTest& (0+255),b
 11688  0010B0  0EE4               	movlw	228
 11689  0010B2                     u7707:
 11690  0010B2  2EE8               	decfsz	wreg,f,c
 11691  0010B4  D7FE               	bra	u7707
 11692  0010B6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11693  0010B8  D7FC               	bra	u7707
 11694  0010BA  F000               	nop	
 11695  0010BC  0100               	movlb	0	; () banked
 11696  0010BE  2BC1               	incf	actuatorTest@i_1621& (0+255),f,b
 11697  0010C0  D7EF               	goto	l6886
 11698  0010C2                     l6894:
 11699                           
 11700                           ; BSR set to: 0
 11701                           ;Test.c: 307: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11702  0010C2  0E80               	movlw	128
 11703  0010C4  ECF0  F022         	call	_lcdInst
 11704  0010C8  0EC0               	movlw	192
 11705  0010CA  ECF0  F022         	call	_lcdInst
 11706                           
 11707                           ;Test.c: 308: LATCbits.LATC0 = 1;
 11708  0010CE  808B               	bsf	3979,0,c	;volatile
 11709                           
 11710                           ;Test.c: 309: printf("CAM DWN |RC0=0");
 11711  0010D0  0E6F               	movlw	low STR_105
 11712  0010D2  0100               	movlb	0	; () banked
 11713  0010D4  6F8E               	movwf	printf@f& (0+255),b
 11714  0010D6  0EFE               	movlw	high STR_105
 11715  0010D8  0100               	movlb	0	; () banked
 11716  0010DA  6F8F               	movwf	(printf@f+1)& (0+255),b
 11717  0010DC  EC9C  F008         	call	_printf	;wreg free
 11718                           
 11719                           ;Test.c: 310: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11720  0010E0  0E00               	movlw	0
 11721  0010E2  0100               	movlb	0	; () banked
 11722  0010E4  6FC2               	movwf	actuatorTest@i_1623& (0+255),b
 11723  0010E6                     l6902:
 11724                           
 11725                           ; BSR set to: 0
 11726  0010E6  0E63               	movlw	99
 11727  0010E8  0100               	movlb	0	; () banked
 11728  0010EA  65C2               	cpfsgt	actuatorTest@i_1623& (0+255),b
 11729  0010EC  D001               	goto	l6906
 11730  0010EE  D00C               	goto	l6910
 11731  0010F0                     l6906:
 11732                           
 11733                           ; BSR set to: 0
 11734  0010F0  0E68               	movlw	104
 11735  0010F2  0100               	movlb	0	; () banked
 11736  0010F4  6FAB               	movwf	??_actuatorTest& (0+255),b
 11737  0010F6  0EE4               	movlw	228
 11738  0010F8                     u7717:
 11739  0010F8  2EE8               	decfsz	wreg,f,c
 11740  0010FA  D7FE               	bra	u7717
 11741  0010FC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11742  0010FE  D7FC               	bra	u7717
 11743  001100  F000               	nop	
 11744  001102  0100               	movlb	0	; () banked
 11745  001104  2BC2               	incf	actuatorTest@i_1623& (0+255),f,b
 11746  001106  D7EF               	goto	l6902
 11747  001108                     l6910:
 11748                           
 11749                           ; BSR set to: 0
 11750  001108  0E00               	movlw	0
 11751  00110A  0100               	movlb	0	; () banked
 11752  00110C  6FC3               	movwf	actuatorTest@i_1624& (0+255),b
 11753  00110E                     l6912:
 11754                           
 11755                           ; BSR set to: 0
 11756  00110E  0E63               	movlw	99
 11757  001110  0100               	movlb	0	; () banked
 11758  001112  65C3               	cpfsgt	actuatorTest@i_1624& (0+255),b
 11759  001114  D001               	goto	l6916
 11760  001116  D00C               	goto	l6920
 11761  001118                     l6916:
 11762                           
 11763                           ; BSR set to: 0
 11764  001118  0E68               	movlw	104
 11765  00111A  0100               	movlb	0	; () banked
 11766  00111C  6FAB               	movwf	??_actuatorTest& (0+255),b
 11767  00111E  0EE4               	movlw	228
 11768  001120                     u7727:
 11769  001120  2EE8               	decfsz	wreg,f,c
 11770  001122  D7FE               	bra	u7727
 11771  001124  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11772  001126  D7FC               	bra	u7727
 11773  001128  F000               	nop	
 11774  00112A  0100               	movlb	0	; () banked
 11775  00112C  2BC3               	incf	actuatorTest@i_1624& (0+255),f,b
 11776  00112E  D7EF               	goto	l6912
 11777  001130                     l6920:
 11778                           
 11779                           ; BSR set to: 0
 11780                           ;Test.c: 311: machine_state = Testing_state;
 11781  001130  0E03               	movlw	3
 11782  001132  0100               	movlb	0	; () banked
 11783  001134  6FFC               	movwf	_machine_state& (0+255),b
 11784                           
 11785                           ; BSR set to: 0
 11786  001136  0012               	return		;funcret
 11787  001138                     __end_of_actuatorTest:
 11788                           	opt stack 0
 11789                           tblptru	equ	0xFF8
 11790                           tblptrh	equ	0xFF7
 11791                           tblptrl	equ	0xFF6
 11792                           tablat	equ	0xFF5
 11793                           prodh	equ	0xFF4
 11794                           prodl	equ	0xFF3
 11795                           intcon	equ	0xFF2
 11796                           intcon2	equ	0xFF1
 11797                           intcon3	equ	0xFF0
 11798                           postinc0	equ	0xFEE
 11799                           wreg	equ	0xFE8
 11800                           postdec1	equ	0xFE5
 11801                           fsr1l	equ	0xFE1
 11802                           indf2	equ	0xFDF
 11803                           postinc2	equ	0xFDE
 11804                           postdec2	equ	0xFDD
 11805                           fsr2h	equ	0xFDA
 11806                           fsr2l	equ	0xFD9
 11807                           status	equ	0xFD8
 11808                           
 11809 ;; *************** function _ToggleTestA5 *****************
 11810 ;; Defined at:
 11811 ;;		line 456 in file "Test.c"
 11812 ;; Parameters:    Size  Location     Type
 11813 ;;		None
 11814 ;; Auto vars:     Size  Location     Type
 11815 ;;  on              2   44[BANK0 ] int 
 11816 ;; Return value:  Size  Location     Type
 11817 ;;                  1    wreg      void 
 11818 ;; Registers used:
 11819 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11820 ;; Tracked objects:
 11821 ;;		On entry : 0/0
 11822 ;;		On exit  : 0/0
 11823 ;;		Unchanged: 0/0
 11824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11825 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11826 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11827 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11828 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11829 ;;Total ram usage:        3 bytes
 11830 ;; Hardware stack levels used:    1
 11831 ;; Hardware stack levels required when called:   10
 11832 ;; This function calls:
 11833 ;;		_lcdInst
 11834 ;;		_printf
 11835 ;; This function is called by:
 11836 ;;		_Test
 11837 ;; This function uses a non-reentrant model
 11838 ;;
 11839                           
 11840                           	psect	text41
 11841  00387E                     __ptext41:
 11842                           	opt stack 0
 11843  00387E                     _ToggleTestA5:
 11844                           	opt stack 19
 11845                           
 11846                           ;Test.c: 457: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11847                           
 11848                           ; BSR set to: 0
 11849                           ;incstack = 0
 11850  00387E  0E01               	movlw	1
 11851  003880  ECF0  F022         	call	_lcdInst
 11852  003884  0E68               	movlw	104
 11853  003886  0100               	movlb	0	; () banked
 11854  003888  6FAB               	movwf	??_ToggleTestA5& (0+255),b
 11855  00388A  0EE4               	movlw	228
 11856  00388C                     u7737:
 11857  00388C  2EE8               	decfsz	wreg,f,c
 11858  00388E  D7FE               	bra	u7737
 11859  003890  2FAB               	decfsz	??_ToggleTestA5& (0+255),f,b
 11860  003892  D7FC               	bra	u7737
 11861  003894  F000               	nop	
 11862  003896  0E80               	movlw	128
 11863  003898  ECF0  F022         	call	_lcdInst
 11864                           
 11865                           ;Test.c: 458: printf("D WILL RETURN   ");
 11866  00389C  0E43               	movlw	low STR_111
 11867  00389E  0100               	movlb	0	; () banked
 11868  0038A0  6F8E               	movwf	printf@f& (0+255),b
 11869  0038A2  0EFC               	movlw	high STR_111
 11870  0038A4  0100               	movlb	0	; () banked
 11871  0038A6  6F8F               	movwf	(printf@f+1)& (0+255),b
 11872  0038A8  EC9C  F008         	call	_printf	;wreg free
 11873                           
 11874                           ;Test.c: 459: lcdInst(0b11000000);;
 11875  0038AC  0EC0               	movlw	192
 11876  0038AE  ECF0  F022         	call	_lcdInst
 11877                           
 11878                           ;Test.c: 460: printf("ELSE TOGGLES RA5");
 11879  0038B2  0E76               	movlw	low STR_112
 11880  0038B4  0100               	movlb	0	; () banked
 11881  0038B6  6F8E               	movwf	printf@f& (0+255),b
 11882  0038B8  0EFC               	movlw	high STR_112
 11883  0038BA  0100               	movlb	0	; () banked
 11884  0038BC  6F8F               	movwf	(printf@f+1)& (0+255),b
 11885  0038BE  EC9C  F008         	call	_printf	;wreg free
 11886                           
 11887                           ;Test.c: 461: int on = 0;
 11888  0038C2  0E00               	movlw	0
 11889  0038C4  0100               	movlb	0	; () banked
 11890  0038C6  6FAD               	movwf	(ToggleTestA5@on+1)& (0+255),b
 11891  0038C8  0E00               	movlw	0
 11892  0038CA  6FAC               	movwf	ToggleTestA5@on& (0+255),b
 11893  0038CC                     l1189:
 11894  0038CC  A281               	btfss	3969,1,c	;volatile
 11895  0038CE  D7FE               	goto	l1189
 11896                           
 11897                           ;Test.c: 466: }
 11898                           ;Test.c: 467: if(PORTB >> 4 == 0b1111){
 11899  0038D0  3881               	swapf	3969,w,c	;volatile
 11900  0038D2  0B0F               	andlw	15
 11901  0038D4  0A0F               	xorlw	15
 11902  0038D6  B4D8               	btfsc	status,2,c
 11903  0038D8  0012               	return	
 11904                           
 11905                           ;Test.c: 470: else{
 11906                           ;Test.c: 471: if(on == 0){
 11907                           
 11908                           ;Test.c: 469: }
 11909                           
 11910                           ;Test.c: 468: break;
 11911  0038DA  0100               	movlb	0	; () banked
 11912  0038DC  51AC               	movf	ToggleTestA5@on& (0+255),w,b
 11913  0038DE  0100               	movlb	0	; () banked
 11914  0038E0  11AD               	iorwf	(ToggleTestA5@on+1)& (0+255),w,b
 11915  0038E2  A4D8               	btfss	status,2,c
 11916  0038E4  D007               	goto	l6966
 11917                           
 11918                           ; BSR set to: 0
 11919                           ;Test.c: 472: on = 1;
 11920  0038E6  0E00               	movlw	0
 11921  0038E8  0100               	movlb	0	; () banked
 11922  0038EA  6FAD               	movwf	(ToggleTestA5@on+1)& (0+255),b
 11923  0038EC  0E01               	movlw	1
 11924  0038EE  6FAC               	movwf	ToggleTestA5@on& (0+255),b
 11925                           
 11926                           ; BSR set to: 0
 11927                           ;Test.c: 473: LATAbits.LATA5 = 1;
 11928  0038F0  8A89               	bsf	3977,5,c	;volatile
 11929                           
 11930                           ;Test.c: 474: }
 11931  0038F2  D006               	goto	l1197
 11932  0038F4                     l6966:
 11933                           
 11934                           ; BSR set to: 0
 11935                           ;Test.c: 475: else{
 11936                           ;Test.c: 476: on = 0;
 11937  0038F4  0E00               	movlw	0
 11938  0038F6  0100               	movlb	0	; () banked
 11939  0038F8  6FAD               	movwf	(ToggleTestA5@on+1)& (0+255),b
 11940  0038FA  0E00               	movlw	0
 11941  0038FC  6FAC               	movwf	ToggleTestA5@on& (0+255),b
 11942                           
 11943                           ; BSR set to: 0
 11944                           ;Test.c: 477: LATAbits.LATA5 = 0;
 11945  0038FE  9A89               	bcf	3977,5,c	;volatile
 11946  003900                     l1197:
 11947  003900  A281               	btfss	3969,1,c	;volatile
 11948  003902  D7E4               	goto	l1189
 11949  003904  D7FD               	goto	l1197
 11950  003906                     __end_of_ToggleTestA5:
 11951                           	opt stack 0
 11952                           tblptru	equ	0xFF8
 11953                           tblptrh	equ	0xFF7
 11954                           tblptrl	equ	0xFF6
 11955                           tablat	equ	0xFF5
 11956                           prodh	equ	0xFF4
 11957                           prodl	equ	0xFF3
 11958                           intcon	equ	0xFF2
 11959                           intcon2	equ	0xFF1
 11960                           intcon3	equ	0xFF0
 11961                           postinc0	equ	0xFEE
 11962                           wreg	equ	0xFE8
 11963                           postdec1	equ	0xFE5
 11964                           fsr1l	equ	0xFE1
 11965                           indf2	equ	0xFDF
 11966                           postinc2	equ	0xFDE
 11967                           postdec2	equ	0xFDD
 11968                           fsr2h	equ	0xFDA
 11969                           fsr2l	equ	0xFD9
 11970                           status	equ	0xFD8
 11971                           
 11972 ;; *************** function _SolenoidTestA5 *****************
 11973 ;; Defined at:
 11974 ;;		line 432 in file "Test.c"
 11975 ;; Parameters:    Size  Location     Type
 11976 ;;		None
 11977 ;; Auto vars:     Size  Location     Type
 11978 ;;  i               1   47[BANK0 ] unsigned char 
 11979 ;;  i               1   48[BANK0 ] unsigned char 
 11980 ;;  i               2   45[BANK0 ] int 
 11981 ;; Return value:  Size  Location     Type
 11982 ;;                  1    wreg      void 
 11983 ;; Registers used:
 11984 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11985 ;; Tracked objects:
 11986 ;;		On entry : 0/0
 11987 ;;		On exit  : 0/0
 11988 ;;		Unchanged: 0/0
 11989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11990 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11991 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11992 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11993 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11994 ;;Total ram usage:        6 bytes
 11995 ;; Hardware stack levels used:    1
 11996 ;; Hardware stack levels required when called:   10
 11997 ;; This function calls:
 11998 ;;		_lcdInst
 11999 ;;		_printf
 12000 ;; This function is called by:
 12001 ;;		_Test
 12002 ;; This function uses a non-reentrant model
 12003 ;;
 12004                           
 12005                           	psect	text42
 12006  0031C8                     __ptext42:
 12007                           	opt stack 0
 12008  0031C8                     _SolenoidTestA5:
 12009                           	opt stack 19
 12010  0031C8                     
 12011                           ;Test.c: 434: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12012  0031C8  0E01               	movlw	1
 12013  0031CA  ECF0  F022         	call	_lcdInst
 12014  0031CE  0E68               	movlw	104
 12015  0031D0  0100               	movlb	0	; () banked
 12016  0031D2  6FAB               	movwf	??_SolenoidTestA5& (0+255),b
 12017  0031D4  0EE4               	movlw	228
 12018  0031D6                     u7747:
 12019  0031D6  2EE8               	decfsz	wreg,f,c
 12020  0031D8  D7FE               	bra	u7747
 12021  0031DA  2FAB               	decfsz	??_SolenoidTestA5& (0+255),f,b
 12022  0031DC  D7FC               	bra	u7747
 12023  0031DE  F000               	nop	
 12024  0031E0  0E80               	movlw	128
 12025  0031E2  ECF0  F022         	call	_lcdInst
 12026                           
 12027                           ;Test.c: 435: printf("SOLENOID TST");
 12028  0031E6  0E48               	movlw	low STR_109
 12029  0031E8  0100               	movlb	0	; () banked
 12030  0031EA  6F8E               	movwf	printf@f& (0+255),b
 12031  0031EC  0EFF               	movlw	high STR_109
 12032  0031EE  0100               	movlb	0	; () banked
 12033  0031F0  6F8F               	movwf	(printf@f+1)& (0+255),b
 12034  0031F2  EC9C  F008         	call	_printf	;wreg free
 12035                           
 12036                           ;Test.c: 436: lcdInst(0b11000000);;
 12037  0031F6  0EC0               	movlw	192
 12038  0031F8  ECF0  F022         	call	_lcdInst
 12039  0031FC                     l1174:
 12040  0031FC  A281               	btfss	3969,1,c	;volatile
 12041  0031FE  D7FE               	goto	l1174
 12042                           
 12043                           ;Test.c: 441: }
 12044                           ;Test.c: 443: for(int i = 0; i < 3; i++){
 12045  003200  0E00               	movlw	0
 12046  003202  0100               	movlb	0	; () banked
 12047  003204  6FAE               	movwf	(SolenoidTestA5@i+1)& (0+255),b
 12048  003206  0E00               	movlw	0
 12049  003208  6FAD               	movwf	SolenoidTestA5@i& (0+255),b
 12050  00320A                     l6982:
 12051                           
 12052                           ; BSR set to: 0
 12053  00320A  0100               	movlb	0	; () banked
 12054  00320C  BFAE               	btfsc	(SolenoidTestA5@i+1)& (0+255),7,b
 12055  00320E  D008               	goto	l6986
 12056  003210  0100               	movlb	0	; () banked
 12057  003212  51AE               	movf	(SolenoidTestA5@i+1)& (0+255),w,b
 12058  003214  E12D               	bnz	l7002
 12059  003216  0E03               	movlw	3
 12060  003218  0100               	movlb	0	; () banked
 12061  00321A  5DAD               	subwf	SolenoidTestA5@i& (0+255),w,b
 12062  00321C  B0D8               	btfsc	status,0,c
 12063  00321E  D028               	goto	l7002
 12064  003220                     l6986:
 12065                           
 12066                           ; BSR set to: 0
 12067                           ;Test.c: 444: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12068  003220  0E00               	movlw	0
 12069  003222  0100               	movlb	0	; () banked
 12070  003224  6FAF               	movwf	SolenoidTestA5@i_1637& (0+255),b
 12071  003226                     l6988:
 12072                           
 12073                           ; BSR set to: 0
 12074  003226  0E63               	movlw	99
 12075  003228  0100               	movlb	0	; () banked
 12076  00322A  65AF               	cpfsgt	SolenoidTestA5@i_1637& (0+255),b
 12077  00322C  D001               	goto	l6992
 12078  00322E  D00C               	goto	l1180
 12079  003230                     l6992:
 12080                           
 12081                           ; BSR set to: 0
 12082  003230  0E68               	movlw	104
 12083  003232  0100               	movlb	0	; () banked
 12084  003234  6FAB               	movwf	??_SolenoidTestA5& (0+255),b
 12085  003236  0EE4               	movlw	228
 12086  003238                     u7757:
 12087  003238  2EE8               	decfsz	wreg,f,c
 12088  00323A  D7FE               	bra	u7757
 12089  00323C  2FAB               	decfsz	??_SolenoidTestA5& (0+255),f,b
 12090  00323E  D7FC               	bra	u7757
 12091  003240  F000               	nop	
 12092  003242  0100               	movlb	0	; () banked
 12093  003244  2BAF               	incf	SolenoidTestA5@i_1637& (0+255),f,b
 12094  003246  D7EF               	goto	l6988
 12095  003248                     l1180:
 12096                           
 12097                           ; BSR set to: 0
 12098                           ;Test.c: 445: LATAbits.LATA5 = 1;
 12099  003248  8A89               	bsf	3977,5,c	;volatile
 12100                           
 12101                           ; BSR set to: 0
 12102                           ;Test.c: 446: _delay((unsigned long)((150)*(32000000/4000.0)));
 12103  00324A  0E07               	movlw	7
 12104  00324C  0100               	movlb	0	; () banked
 12105  00324E  6FAC               	movwf	(??_SolenoidTestA5+1)& (0+255),b
 12106  003250  0E17               	movlw	23
 12107  003252  0100               	movlb	0	; () banked
 12108  003254  6FAB               	movwf	??_SolenoidTestA5& (0+255),b
 12109  003256  0E6A               	movlw	106
 12110  003258                     u7767:
 12111  003258  2EE8               	decfsz	wreg,f,c
 12112  00325A  D7FE               	bra	u7767
 12113  00325C  2FAB               	decfsz	??_SolenoidTestA5& (0+255),f,b
 12114  00325E  D7FC               	bra	u7767
 12115  003260  2FAC               	decfsz	(??_SolenoidTestA5+1)& (0+255),f,b
 12116  003262  D7FA               	bra	u7767
 12117  003264  F000               	nop	
 12118                           
 12119                           ;Test.c: 447: LATAbits.LATA5 = 0;
 12120  003266  9A89               	bcf	3977,5,c	;volatile
 12121  003268  0100               	movlb	0	; () banked
 12122  00326A  4BAD               	infsnz	SolenoidTestA5@i& (0+255),f,b
 12123  00326C  2BAE               	incf	(SolenoidTestA5@i+1)& (0+255),f,b
 12124  00326E  D7CD               	goto	l6982
 12125  003270                     l7002:
 12126                           
 12127                           ; BSR set to: 0
 12128                           ;Test.c: 448: }
 12129                           ;Test.c: 450: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12130  003270  0E01               	movlw	1
 12131  003272  ECF0  F022         	call	_lcdInst
 12132  003276  0E68               	movlw	104
 12133  003278  0100               	movlb	0	; () banked
 12134  00327A  6FAB               	movwf	??_SolenoidTestA5& (0+255),b
 12135  00327C  0EE4               	movlw	228
 12136  00327E                     u7777:
 12137  00327E  2EE8               	decfsz	wreg,f,c
 12138  003280  D7FE               	bra	u7777
 12139  003282  2FAB               	decfsz	??_SolenoidTestA5& (0+255),f,b
 12140  003284  D7FC               	bra	u7777
 12141  003286  F000               	nop	
 12142  003288  0E80               	movlw	128
 12143  00328A  ECF0  F022         	call	_lcdInst
 12144                           
 12145                           ;Test.c: 451: printf("PUSH DONE");
 12146  00328E  0E8F               	movlw	low STR_110
 12147  003290  0100               	movlb	0	; () banked
 12148  003292  6F8E               	movwf	printf@f& (0+255),b
 12149  003294  0EFF               	movlw	high STR_110
 12150  003296  0100               	movlb	0	; () banked
 12151  003298  6F8F               	movwf	(printf@f+1)& (0+255),b
 12152  00329A  EC9C  F008         	call	_printf	;wreg free
 12153                           
 12154                           ;Test.c: 452: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12155  00329E  0E00               	movlw	0
 12156  0032A0  0100               	movlb	0	; () banked
 12157  0032A2  6FB0               	movwf	SolenoidTestA5@i_1639& (0+255),b
 12158  0032A4                     l7012:
 12159                           
 12160                           ; BSR set to: 0
 12161  0032A4  0E63               	movlw	99
 12162  0032A6  0100               	movlb	0	; () banked
 12163  0032A8  65B0               	cpfsgt	SolenoidTestA5@i_1639& (0+255),b
 12164  0032AA  D001               	goto	l7016
 12165  0032AC  D78D               	goto	l6970
 12166  0032AE                     l7016:
 12167                           
 12168                           ; BSR set to: 0
 12169  0032AE  0E68               	movlw	104
 12170  0032B0  0100               	movlb	0	; () banked
 12171  0032B2  6FAB               	movwf	??_SolenoidTestA5& (0+255),b
 12172  0032B4  0EE4               	movlw	228
 12173  0032B6                     u7787:
 12174  0032B6  2EE8               	decfsz	wreg,f,c
 12175  0032B8  D7FE               	bra	u7787
 12176  0032BA  2FAB               	decfsz	??_SolenoidTestA5& (0+255),f,b
 12177  0032BC  D7FC               	bra	u7787
 12178  0032BE  F000               	nop	
 12179  0032C0  0100               	movlb	0	; () banked
 12180  0032C2  2BB0               	incf	SolenoidTestA5@i_1639& (0+255),f,b
 12181  0032C4  D7EF               	goto	l7012
 12182  0032C6                     __end_of_SolenoidTestA5:
 12183                           	opt stack 0
 12184                           tblptru	equ	0xFF8
 12185                           tblptrh	equ	0xFF7
 12186                           tblptrl	equ	0xFF6
 12187                           tablat	equ	0xFF5
 12188                           prodh	equ	0xFF4
 12189                           prodl	equ	0xFF3
 12190                           intcon	equ	0xFF2
 12191                           intcon2	equ	0xFF1
 12192                           intcon3	equ	0xFF0
 12193                           postinc0	equ	0xFEE
 12194                           wreg	equ	0xFE8
 12195                           postdec1	equ	0xFE5
 12196                           fsr1l	equ	0xFE1
 12197                           indf2	equ	0xFDF
 12198                           postinc2	equ	0xFDE
 12199                           postdec2	equ	0xFDD
 12200                           fsr2h	equ	0xFDA
 12201                           fsr2l	equ	0xFD9
 12202                           status	equ	0xFD8
 12203                           
 12204 ;; *************** function _PortTests *****************
 12205 ;; Defined at:
 12206 ;;		line 363 in file "Test.c"
 12207 ;; Parameters:    Size  Location     Type
 12208 ;;		None
 12209 ;; Auto vars:     Size  Location     Type
 12210 ;;		None
 12211 ;; Return value:  Size  Location     Type
 12212 ;;                  1    wreg      void 
 12213 ;; Registers used:
 12214 ;;		wreg, status,2, status,0
 12215 ;; Tracked objects:
 12216 ;;		On entry : 0/0
 12217 ;;		On exit  : 0/0
 12218 ;;		Unchanged: 0/0
 12219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12220 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12221 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12222 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12223 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12224 ;;Total ram usage:        2 bytes
 12225 ;; Hardware stack levels used:    1
 12226 ;; Hardware stack levels required when called:    7
 12227 ;; This function calls:
 12228 ;;		Nothing
 12229 ;; This function is called by:
 12230 ;;		_Test
 12231 ;; This function uses a non-reentrant model
 12232 ;;
 12233                           
 12234                           	psect	text43
 12235  00398C                     __ptext43:
 12236                           	opt stack 0
 12237  00398C                     _PortTests:
 12238                           	opt stack 22
 12239  00398C                     l1139:
 12240  00398C  A281               	btfss	3969,1,c	;volatile
 12241  00398E  D7FE               	goto	l1139
 12242                           
 12243                           ;Test.c: 367: var = PORTB >> 4;
 12244  003990  CF81 F080          	movff	3969,??_PortTests	;volatile
 12245  003994  0100               	movlb	0	; () banked
 12246  003996  3B80               	swapf	??_PortTests& (0+255),f,b
 12247  003998  0E0F               	movlw	15
 12248  00399A  1780               	andwf	??_PortTests& (0+255),f,b
 12249  00399C  0100               	movlb	0	; () banked
 12250  00399E  5180               	movf	??_PortTests& (0+255),w,b
 12251  0039A0  0100               	movlb	0	; () banked
 12252  0039A2  6FFA               	movwf	_var& (0+255),b
 12253  0039A4  6BFB               	clrf	(_var+1)& (0+255),b
 12254                           
 12255                           ;Test.c: 368: switch(var){
 12256  0039A6  D00C               	goto	l7024
 12257  0039A8                     l1143:
 12258                           
 12259                           ; BSR set to: 0
 12260                           ;Test.c: 370: LATEbits.LATE0 = 1;
 12261  0039A8  808D               	bsf	3981,0,c	;volatile
 12262                           
 12263                           ;Test.c: 371: break;
 12264  0039AA  D027               	goto	l1151
 12265  0039AC                     l1145:
 12266                           
 12267                           ; BSR set to: 0
 12268                           ;Test.c: 373: LATEbits.LATE1 = 1;
 12269  0039AC  828D               	bsf	3981,1,c	;volatile
 12270                           
 12271                           ;Test.c: 374: break;
 12272  0039AE  D025               	goto	l1151
 12273  0039B0                     l1146:
 12274                           
 12275                           ; BSR set to: 0
 12276                           ;Test.c: 376: LATDbits.LATD0 = 1;
 12277  0039B0  808C               	bsf	3980,0,c	;volatile
 12278                           
 12279                           ;Test.c: 377: break;
 12280  0039B2  D023               	goto	l1151
 12281  0039B4                     l1147:
 12282                           
 12283                           ; BSR set to: 0
 12284                           ;Test.c: 379: LATAbits.LATA3 = 1;
 12285  0039B4  8689               	bsf	3977,3,c	;volatile
 12286                           
 12287                           ;Test.c: 380: break;
 12288  0039B6  D021               	goto	l1151
 12289  0039B8                     l1148:
 12290                           
 12291                           ; BSR set to: 0
 12292                           ;Test.c: 382: LATAbits.LATA4 = 1;
 12293  0039B8  8889               	bsf	3977,4,c	;volatile
 12294                           
 12295                           ;Test.c: 383: break;
 12296  0039BA  D01F               	goto	l1151
 12297  0039BC                     l1149:
 12298                           
 12299                           ; BSR set to: 0
 12300                           ;Test.c: 385: LATAbits.LATA5 = 1;
 12301  0039BC  8A89               	bsf	3977,5,c	;volatile
 12302                           
 12303                           ; BSR set to: 0
 12304                           ;Test.c: 389: }
 12305                           
 12306                           ; BSR set to: 0
 12307                           ;Test.c: 388: break;
 12308                           
 12309                           ;Test.c: 387: default:
 12310                           
 12311                           ;Test.c: 386: break;
 12312  0039BE  D01D               	goto	l1151
 12313  0039C0                     l7024:
 12314                           
 12315                           ; BSR set to: 0
 12316  0039C0  C0FA  F080         	movff	_var,??_PortTests
 12317  0039C4  C0FB  F081         	movff	_var+1,??_PortTests+1
 12318                           
 12319                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12320                           ; Switch size 1, requested type "space"
 12321                           ; Number of cases is 1, Range of values is 0 to 0
 12322                           ; switch strategies available:
 12323                           ; Name         Instructions Cycles
 12324                           ; simple_byte            4     3 (average)
 12325                           ;	Chosen strategy is simple_byte
 12326  0039C8  0100               	movlb	0	; () banked
 12327  0039CA  5181               	movf	(??_PortTests+1)& (0+255),w,b
 12328  0039CC  0A00               	xorlw	0	; case 0
 12329  0039CE  A4D8               	btfss	status,2,c
 12330  0039D0  D014               	goto	l1151
 12331                           
 12332                           ; BSR set to: 0
 12333                           ; Switch size 1, requested type "space"
 12334                           ; Number of cases is 6, Range of values is 0 to 5
 12335                           ; switch strategies available:
 12336                           ; Name         Instructions Cycles
 12337                           ; simple_byte           19    10 (average)
 12338                           ;	Chosen strategy is simple_byte
 12339  0039D2  0100               	movlb	0	; () banked
 12340  0039D4  5180               	movf	??_PortTests& (0+255),w,b
 12341  0039D6  0A00               	xorlw	0	; case 0
 12342  0039D8  B4D8               	btfsc	status,2,c
 12343  0039DA  D7E6               	goto	l1143
 12344  0039DC  0A01               	xorlw	1	; case 1
 12345  0039DE  B4D8               	btfsc	status,2,c
 12346  0039E0  D7E5               	goto	l1145
 12347  0039E2  0A03               	xorlw	3	; case 2
 12348  0039E4  B4D8               	btfsc	status,2,c
 12349  0039E6  D7E4               	goto	l1146
 12350  0039E8  0A01               	xorlw	1	; case 3
 12351  0039EA  B4D8               	btfsc	status,2,c
 12352  0039EC  D7E3               	goto	l1147
 12353  0039EE  0A07               	xorlw	7	; case 4
 12354  0039F0  B4D8               	btfsc	status,2,c
 12355  0039F2  D7E2               	goto	l1148
 12356  0039F4  0A01               	xorlw	1	; case 5
 12357  0039F6  B4D8               	btfsc	status,2,c
 12358  0039F8  D7E1               	goto	l1149
 12359  0039FA                     l1151:
 12360  0039FA  B281               	btfsc	3969,1,c	;volatile
 12361  0039FC  D7FE               	goto	l1151
 12362                           
 12363                           ;Test.c: 391: __nop();
 12364  0039FE  F000               	nop	
 12365                           
 12366                           ;Test.c: 392: __nop();
 12367  003A00  F000               	nop	
 12368                           
 12369                           ;Test.c: 393: LATA = 0x00;
 12370  003A02  0E00               	movlw	0
 12371  003A04  6E89               	movwf	3977,c	;volatile
 12372                           
 12373                           ;Test.c: 394: LATE = 0x00;
 12374  003A06  0E00               	movlw	0
 12375  003A08  6E8D               	movwf	3981,c	;volatile
 12376                           
 12377                           ;Test.c: 395: LATD = 0x00; }
 12378  003A0A  0E00               	movlw	0
 12379  003A0C  6E8C               	movwf	3980,c	;volatile
 12380  003A0E  D7BE               	goto	l1139
 12381  003A10                     __end_of_PortTests:
 12382                           	opt stack 0
 12383                           tblptru	equ	0xFF8
 12384                           tblptrh	equ	0xFF7
 12385                           tblptrl	equ	0xFF6
 12386                           tablat	equ	0xFF5
 12387                           prodh	equ	0xFF4
 12388                           prodl	equ	0xFF3
 12389                           intcon	equ	0xFF2
 12390                           intcon2	equ	0xFF1
 12391                           intcon3	equ	0xFF0
 12392                           postinc0	equ	0xFEE
 12393                           wreg	equ	0xFE8
 12394                           postdec1	equ	0xFE5
 12395                           fsr1l	equ	0xFE1
 12396                           indf2	equ	0xFDF
 12397                           postinc2	equ	0xFDE
 12398                           postdec2	equ	0xFDD
 12399                           fsr2h	equ	0xFDA
 12400                           fsr2l	equ	0xFD9
 12401                           status	equ	0xFD8
 12402                           
 12403 ;; *************** function _PortTestA5 *****************
 12404 ;; Defined at:
 12405 ;;		line 398 in file "Test.c"
 12406 ;; Parameters:    Size  Location     Type
 12407 ;;		None
 12408 ;; Auto vars:     Size  Location     Type
 12409 ;;		None
 12410 ;; Return value:  Size  Location     Type
 12411 ;;                  1    wreg      void 
 12412 ;; Registers used:
 12413 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12414 ;; Tracked objects:
 12415 ;;		On entry : 0/0
 12416 ;;		On exit  : 0/0
 12417 ;;		Unchanged: 0/0
 12418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12419 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12420 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12421 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12422 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12423 ;;Total ram usage:        1 bytes
 12424 ;; Hardware stack levels used:    1
 12425 ;; Hardware stack levels required when called:   10
 12426 ;; This function calls:
 12427 ;;		_lcdInst
 12428 ;;		_printf
 12429 ;; This function is called by:
 12430 ;;		_Test
 12431 ;; This function uses a non-reentrant model
 12432 ;;
 12433                           
 12434                           	psect	text44
 12435  003D60                     __ptext44:
 12436                           	opt stack 0
 12437  003D60                     _PortTestA5:
 12438                           	opt stack 19
 12439                           
 12440                           ;Test.c: 399: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12441                           
 12442                           ;incstack = 0
 12443  003D60  0E01               	movlw	1
 12444  003D62  ECF0  F022         	call	_lcdInst
 12445  003D66  0E68               	movlw	104
 12446  003D68  0100               	movlb	0	; () banked
 12447  003D6A  6FAB               	movwf	??_PortTestA5& (0+255),b
 12448  003D6C  0EE4               	movlw	228
 12449  003D6E                     u7797:
 12450  003D6E  2EE8               	decfsz	wreg,f,c
 12451  003D70  D7FE               	bra	u7797
 12452  003D72  2FAB               	decfsz	??_PortTestA5& (0+255),f,b
 12453  003D74  D7FC               	bra	u7797
 12454  003D76  F000               	nop	
 12455  003D78  0E80               	movlw	128
 12456  003D7A  ECF0  F022         	call	_lcdInst
 12457                           
 12458                           ;Test.c: 400: printf("D WILL RETURN    ");
 12459  003D7E  0E95               	movlw	low STR_107
 12460  003D80  0100               	movlb	0	; () banked
 12461  003D82  6F8E               	movwf	printf@f& (0+255),b
 12462  003D84  0EFB               	movlw	high STR_107
 12463  003D86  0100               	movlb	0	; () banked
 12464  003D88  6F8F               	movwf	(printf@f+1)& (0+255),b
 12465  003D8A  EC9C  F008         	call	_printf	;wreg free
 12466                           
 12467                           ;Test.c: 401: lcdInst(0b11000000);;
 12468  003D8E  0EC0               	movlw	192
 12469  003D90  ECF0  F022         	call	_lcdInst
 12470                           
 12471                           ;Test.c: 402: printf("OTHER SETS RA5   ");
 12472  003D94  0EA7               	movlw	low STR_108
 12473  003D96  0100               	movlb	0	; () banked
 12474  003D98  6F8E               	movwf	printf@f& (0+255),b
 12475  003D9A  0EFB               	movlw	high STR_108
 12476  003D9C  0100               	movlb	0	; () banked
 12477  003D9E  6F8F               	movwf	(printf@f+1)& (0+255),b
 12478  003DA0  EC9C  F008         	call	_printf	;wreg free
 12479  003DA4                     l1160:
 12480  003DA4  A281               	btfss	3969,1,c	;volatile
 12481  003DA6  D7FE               	goto	l1160
 12482                           
 12483                           ;Test.c: 407: }
 12484                           ;Test.c: 408: if(PORTB >> 4 == 0b1111){
 12485  003DA8  3881               	swapf	3969,w,c	;volatile
 12486  003DAA  0B0F               	andlw	15
 12487  003DAC  0A0F               	xorlw	15
 12488  003DAE  B4D8               	btfsc	status,2,c
 12489  003DB0  0012               	return	
 12490                           
 12491                           ;Test.c: 411: else{
 12492                           ;Test.c: 412: LATAbits.LATA5 = 1;
 12493                           
 12494                           ;Test.c: 410: }
 12495                           
 12496                           ;Test.c: 409: break;
 12497  003DB2  8A89               	bsf	3977,5,c	;volatile
 12498  003DB4                     l1166:
 12499  003DB4  B281               	btfsc	3969,1,c	;volatile
 12500  003DB6  D7FE               	goto	l1166
 12501                           
 12502                           ;Test.c: 415: }
 12503                           ;Test.c: 427: LATAbits.LATA5 = 0;
 12504  003DB8  9A89               	bcf	3977,5,c	;volatile
 12505  003DBA  D7F4               	goto	l1160
 12506  003DBC                     __end_of_PortTestA5:
 12507                           	opt stack 0
 12508                           tblptru	equ	0xFF8
 12509                           tblptrh	equ	0xFF7
 12510                           tblptrl	equ	0xFF6
 12511                           tablat	equ	0xFF5
 12512                           prodh	equ	0xFF4
 12513                           prodl	equ	0xFF3
 12514                           intcon	equ	0xFF2
 12515                           intcon2	equ	0xFF1
 12516                           intcon3	equ	0xFF0
 12517                           postinc0	equ	0xFEE
 12518                           wreg	equ	0xFE8
 12519                           postdec1	equ	0xFE5
 12520                           fsr1l	equ	0xFE1
 12521                           indf2	equ	0xFDF
 12522                           postinc2	equ	0xFDE
 12523                           postdec2	equ	0xFDD
 12524                           fsr2h	equ	0xFDA
 12525                           fsr2l	equ	0xFD9
 12526                           status	equ	0xFD8
 12527                           
 12528 ;; *************** function _EEPROMTest *****************
 12529 ;; Defined at:
 12530 ;;		line 484 in file "Test.c"
 12531 ;; Parameters:    Size  Location     Type
 12532 ;;		None
 12533 ;; Auto vars:     Size  Location     Type
 12534 ;;		None
 12535 ;; Return value:  Size  Location     Type
 12536 ;;                  1    wreg      void 
 12537 ;; Registers used:
 12538 ;;		None
 12539 ;; Tracked objects:
 12540 ;;		On entry : 0/0
 12541 ;;		On exit  : 0/0
 12542 ;;		Unchanged: 0/0
 12543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12544 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12545 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12546 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12547 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12548 ;;Total ram usage:        0 bytes
 12549 ;; Hardware stack levels used:    1
 12550 ;; Hardware stack levels required when called:    7
 12551 ;; This function calls:
 12552 ;;		Nothing
 12553 ;; This function is called by:
 12554 ;;		_Test
 12555 ;; This function uses a non-reentrant model
 12556 ;;
 12557                           
 12558                           	psect	text45
 12559  004644                     __ptext45:
 12560                           	opt stack 0
 12561  004644                     _EEPROMTest:
 12562                           	opt stack 22
 12563                           
 12564                           ;incstack = 0
 12565  004644  0012               	return		;funcret
 12566  004646                     __end_of_EEPROMTest:
 12567                           	opt stack 0
 12568                           tblptru	equ	0xFF8
 12569                           tblptrh	equ	0xFF7
 12570                           tblptrl	equ	0xFF6
 12571                           tablat	equ	0xFF5
 12572                           prodh	equ	0xFF4
 12573                           prodl	equ	0xFF3
 12574                           intcon	equ	0xFF2
 12575                           intcon2	equ	0xFF1
 12576                           intcon3	equ	0xFF0
 12577                           postinc0	equ	0xFEE
 12578                           wreg	equ	0xFE8
 12579                           postdec1	equ	0xFE5
 12580                           fsr1l	equ	0xFE1
 12581                           indf2	equ	0xFDF
 12582                           postinc2	equ	0xFDE
 12583                           postdec2	equ	0xFDD
 12584                           fsr2h	equ	0xFDA
 12585                           fsr2l	equ	0xFD9
 12586                           status	equ	0xFD8
 12587                           
 12588 ;; *************** function _BothServos *****************
 12589 ;; Defined at:
 12590 ;;		line 314 in file "Test.c"
 12591 ;; Parameters:    Size  Location     Type
 12592 ;;		None
 12593 ;; Auto vars:     Size  Location     Type
 12594 ;;		None
 12595 ;; Return value:  Size  Location     Type
 12596 ;;                  1    wreg      void 
 12597 ;; Registers used:
 12598 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12599 ;; Tracked objects:
 12600 ;;		On entry : 0/0
 12601 ;;		On exit  : 0/0
 12602 ;;		Unchanged: 0/0
 12603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12604 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12605 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12606 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12607 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12608 ;;Total ram usage:        2 bytes
 12609 ;; Hardware stack levels used:    1
 12610 ;; Hardware stack levels required when called:   10
 12611 ;; This function calls:
 12612 ;;		_initServos
 12613 ;;		_lcdInst
 12614 ;;		_printf
 12615 ;;		_updateServoPosition
 12616 ;; This function is called by:
 12617 ;;		_Test
 12618 ;; This function uses a non-reentrant model
 12619 ;;
 12620                           
 12621                           	psect	text46
 12622  0018DE                     __ptext46:
 12623                           	opt stack 0
 12624  0018DE                     _BothServos:
 12625                           	opt stack 19
 12626                           
 12627                           ;Test.c: 315: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12628                           
 12629                           ;incstack = 0
 12630  0018DE  0E01               	movlw	1
 12631  0018E0  ECF0  F022         	call	_lcdInst
 12632  0018E4  0E68               	movlw	104
 12633  0018E6  0100               	movlb	0	; () banked
 12634  0018E8  6FAB               	movwf	??_BothServos& (0+255),b
 12635  0018EA  0EE4               	movlw	228
 12636  0018EC                     u7807:
 12637  0018EC  2EE8               	decfsz	wreg,f,c
 12638  0018EE  D7FE               	bra	u7807
 12639  0018F0  2FAB               	decfsz	??_BothServos& (0+255),f,b
 12640  0018F2  D7FC               	bra	u7807
 12641  0018F4  F000               	nop	
 12642  0018F6  0E80               	movlw	128
 12643  0018F8  ECF0  F022         	call	_lcdInst
 12644                           
 12645                           ;Test.c: 316: printf("TST: BOTH SERVOS");
 12646  0018FC  0EDC               	movlw	low STR_106
 12647  0018FE  0100               	movlb	0	; () banked
 12648  001900  6F8E               	movwf	printf@f& (0+255),b
 12649  001902  0EFC               	movlw	high STR_106
 12650  001904  0100               	movlb	0	; () banked
 12651  001906  6F8F               	movwf	(printf@f+1)& (0+255),b
 12652  001908  EC9C  F008         	call	_printf	;wreg free
 12653                           
 12654                           ;Test.c: 317: TMR1ON = 1;
 12655  00190C  80CD               	bsf	4045,0,c	;volatile
 12656                           
 12657                           ;Test.c: 318: TMR3ON = 1;
 12658  00190E  80B1               	bsf	4017,0,c	;volatile
 12659                           
 12660                           ;Test.c: 319: machine_state = Sorting_state;
 12661  001910  0E01               	movlw	1
 12662  001912  0100               	movlb	0	; () banked
 12663  001914  6FFC               	movwf	_machine_state& (0+255),b
 12664                           
 12665                           ; BSR set to: 0
 12666                           ;Test.c: 320: was_low_1 = 0;
 12667  001916  0E00               	movlw	0
 12668  001918  6E7A               	movwf	_was_low_1+1,c	;volatile
 12669  00191A  0E00               	movlw	0
 12670  00191C  6E79               	movwf	_was_low_1,c	;volatile
 12671                           
 12672                           ; BSR set to: 0
 12673                           ;Test.c: 321: was_low_1 = 0;
 12674  00191E  0E00               	movlw	0
 12675  001920  6E7A               	movwf	_was_low_1+1,c	;volatile
 12676  001922  0E00               	movlw	0
 12677  001924  6E79               	movwf	_was_low_1,c	;volatile
 12678                           
 12679                           ; BSR set to: 0
 12680                           ;Test.c: 327: initServos();
 12681  001926  ECDE  F01E         	call	_initServos	;wreg free
 12682                           
 12683                           ;Test.c: 328: _delay((unsigned long)((1500)*(32000000/4000.0)));
 12684  00192A  0E3D               	movlw	61
 12685  00192C  0100               	movlb	0	; () banked
 12686  00192E  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 12687  001930  0EE1               	movlw	225
 12688  001932  0100               	movlb	0	; () banked
 12689  001934  6FAB               	movwf	??_BothServos& (0+255),b
 12690  001936  0E3F               	movlw	63
 12691  001938                     u7817:
 12692  001938  2EE8               	decfsz	wreg,f,c
 12693  00193A  D7FE               	bra	u7817
 12694  00193C  2FAB               	decfsz	??_BothServos& (0+255),f,b
 12695  00193E  D7FC               	bra	u7817
 12696  001940  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 12697  001942  D7FA               	bra	u7817
 12698  001944  D000               	nop2	
 12699                           
 12700                           ;Test.c: 329: updateServoPosition(500, 1);
 12701  001946  0E01               	movlw	1
 12702  001948  0100               	movlb	0	; () banked
 12703  00194A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12704  00194C  0EF4               	movlw	244
 12705  00194E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12706  001950  0E00               	movlw	0
 12707  001952  0100               	movlb	0	; () banked
 12708  001954  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12709  001956  0E01               	movlw	1
 12710  001958  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12711  00195A  EC44  F01D         	call	_updateServoPosition	;wreg free
 12712                           
 12713                           ;Test.c: 330: updateServoPosition(1350, 3);
 12714  00195E  0E05               	movlw	5
 12715  001960  0100               	movlb	0	; () banked
 12716  001962  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12717  001964  0E46               	movlw	70
 12718  001966  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12719  001968  0E00               	movlw	0
 12720  00196A  0100               	movlb	0	; () banked
 12721  00196C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12722  00196E  0E03               	movlw	3
 12723  001970  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12724  001972  EC44  F01D         	call	_updateServoPosition	;wreg free
 12725                           
 12726                           ;Test.c: 331: _delay((unsigned long)((1500)*(32000000/4000.0)));
 12727  001976  0E3D               	movlw	61
 12728  001978  0100               	movlb	0	; () banked
 12729  00197A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 12730  00197C  0EE1               	movlw	225
 12731  00197E  0100               	movlb	0	; () banked
 12732  001980  6FAB               	movwf	??_BothServos& (0+255),b
 12733  001982  0E3F               	movlw	63
 12734  001984                     u7827:
 12735  001984  2EE8               	decfsz	wreg,f,c
 12736  001986  D7FE               	bra	u7827
 12737  001988  2FAB               	decfsz	??_BothServos& (0+255),f,b
 12738  00198A  D7FC               	bra	u7827
 12739  00198C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 12740  00198E  D7FA               	bra	u7827
 12741  001990  D000               	nop2	
 12742                           
 12743                           ;Test.c: 332: updateServoPosition(1190, 3);
 12744  001992  0E04               	movlw	4
 12745  001994  0100               	movlb	0	; () banked
 12746  001996  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12747  001998  0EA6               	movlw	166
 12748  00199A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12749  00199C  0E00               	movlw	0
 12750  00199E  0100               	movlb	0	; () banked
 12751  0019A0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12752  0019A2  0E03               	movlw	3
 12753  0019A4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12754  0019A6  EC44  F01D         	call	_updateServoPosition	;wreg free
 12755                           
 12756                           ;Test.c: 333: _delay((unsigned long)((750)*(32000000/4000.0)));
 12757  0019AA  0E1F               	movlw	31
 12758  0019AC  0100               	movlb	0	; () banked
 12759  0019AE  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 12760  0019B0  0E71               	movlw	113
 12761  0019B2  0100               	movlb	0	; () banked
 12762  0019B4  6FAB               	movwf	??_BothServos& (0+255),b
 12763  0019B6  0E1E               	movlw	30
 12764  0019B8                     u7837:
 12765  0019B8  2EE8               	decfsz	wreg,f,c
 12766  0019BA  D7FE               	bra	u7837
 12767  0019BC  2FAB               	decfsz	??_BothServos& (0+255),f,b
 12768  0019BE  D7FC               	bra	u7837
 12769  0019C0  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 12770  0019C2  D7FA               	bra	u7837
 12771  0019C4  F000               	nop	
 12772                           
 12773                           ;Test.c: 335: updateServoPosition(750, 1);
 12774  0019C6  0E02               	movlw	2
 12775  0019C8  0100               	movlb	0	; () banked
 12776  0019CA  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12777  0019CC  0EEE               	movlw	238
 12778  0019CE  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12779  0019D0  0E00               	movlw	0
 12780  0019D2  0100               	movlb	0	; () banked
 12781  0019D4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12782  0019D6  0E01               	movlw	1
 12783  0019D8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12784  0019DA  EC44  F01D         	call	_updateServoPosition	;wreg free
 12785                           
 12786                           ;Test.c: 336: updateServoPosition(1350, 3);
 12787  0019DE  0E05               	movlw	5
 12788  0019E0  0100               	movlb	0	; () banked
 12789  0019E2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12790  0019E4  0E46               	movlw	70
 12791  0019E6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12792  0019E8  0E00               	movlw	0
 12793  0019EA  0100               	movlb	0	; () banked
 12794  0019EC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12795  0019EE  0E03               	movlw	3
 12796  0019F0  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12797  0019F2  EC44  F01D         	call	_updateServoPosition	;wreg free
 12798                           
 12799                           ;Test.c: 337: _delay((unsigned long)((1500)*(32000000/4000.0)));
 12800  0019F6  0E3D               	movlw	61
 12801  0019F8  0100               	movlb	0	; () banked
 12802  0019FA  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 12803  0019FC  0EE1               	movlw	225
 12804  0019FE  0100               	movlb	0	; () banked
 12805  001A00  6FAB               	movwf	??_BothServos& (0+255),b
 12806  001A02  0E3F               	movlw	63
 12807  001A04                     u7847:
 12808  001A04  2EE8               	decfsz	wreg,f,c
 12809  001A06  D7FE               	bra	u7847
 12810  001A08  2FAB               	decfsz	??_BothServos& (0+255),f,b
 12811  001A0A  D7FC               	bra	u7847
 12812  001A0C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 12813  001A0E  D7FA               	bra	u7847
 12814  001A10  D000               	nop2	
 12815                           
 12816                           ;Test.c: 338: updateServoPosition(1190, 3);
 12817  001A12  0E04               	movlw	4
 12818  001A14  0100               	movlb	0	; () banked
 12819  001A16  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12820  001A18  0EA6               	movlw	166
 12821  001A1A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12822  001A1C  0E00               	movlw	0
 12823  001A1E  0100               	movlb	0	; () banked
 12824  001A20  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12825  001A22  0E03               	movlw	3
 12826  001A24  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12827  001A26  EC44  F01D         	call	_updateServoPosition	;wreg free
 12828                           
 12829                           ;Test.c: 339: _delay((unsigned long)((750)*(32000000/4000.0)));
 12830  001A2A  0E1F               	movlw	31
 12831  001A2C  0100               	movlb	0	; () banked
 12832  001A2E  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 12833  001A30  0E71               	movlw	113
 12834  001A32  0100               	movlb	0	; () banked
 12835  001A34  6FAB               	movwf	??_BothServos& (0+255),b
 12836  001A36  0E1E               	movlw	30
 12837  001A38                     u7857:
 12838  001A38  2EE8               	decfsz	wreg,f,c
 12839  001A3A  D7FE               	bra	u7857
 12840  001A3C  2FAB               	decfsz	??_BothServos& (0+255),f,b
 12841  001A3E  D7FC               	bra	u7857
 12842  001A40  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 12843  001A42  D7FA               	bra	u7857
 12844  001A44  F000               	nop	
 12845                           
 12846                           ;Test.c: 341: updateServoPosition(1200, 1);
 12847  001A46  0E04               	movlw	4
 12848  001A48  0100               	movlb	0	; () banked
 12849  001A4A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12850  001A4C  0EB0               	movlw	176
 12851  001A4E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12852  001A50  0E00               	movlw	0
 12853  001A52  0100               	movlb	0	; () banked
 12854  001A54  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12855  001A56  0E01               	movlw	1
 12856  001A58  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12857  001A5A  EC44  F01D         	call	_updateServoPosition	;wreg free
 12858                           
 12859                           ;Test.c: 342: updateServoPosition(1350, 3);
 12860  001A5E  0E05               	movlw	5
 12861  001A60  0100               	movlb	0	; () banked
 12862  001A62  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12863  001A64  0E46               	movlw	70
 12864  001A66  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12865  001A68  0E00               	movlw	0
 12866  001A6A  0100               	movlb	0	; () banked
 12867  001A6C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12868  001A6E  0E03               	movlw	3
 12869  001A70  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12870  001A72  EC44  F01D         	call	_updateServoPosition	;wreg free
 12871                           
 12872                           ;Test.c: 343: _delay((unsigned long)((1500)*(32000000/4000.0)));
 12873  001A76  0E3D               	movlw	61
 12874  001A78  0100               	movlb	0	; () banked
 12875  001A7A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 12876  001A7C  0EE1               	movlw	225
 12877  001A7E  0100               	movlb	0	; () banked
 12878  001A80  6FAB               	movwf	??_BothServos& (0+255),b
 12879  001A82  0E3F               	movlw	63
 12880  001A84                     u7867:
 12881  001A84  2EE8               	decfsz	wreg,f,c
 12882  001A86  D7FE               	bra	u7867
 12883  001A88  2FAB               	decfsz	??_BothServos& (0+255),f,b
 12884  001A8A  D7FC               	bra	u7867
 12885  001A8C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 12886  001A8E  D7FA               	bra	u7867
 12887  001A90  D000               	nop2	
 12888                           
 12889                           ;Test.c: 344: updateServoPosition(1190, 3);
 12890  001A92  0E04               	movlw	4
 12891  001A94  0100               	movlb	0	; () banked
 12892  001A96  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12893  001A98  0EA6               	movlw	166
 12894  001A9A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12895  001A9C  0E00               	movlw	0
 12896  001A9E  0100               	movlb	0	; () banked
 12897  001AA0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12898  001AA2  0E03               	movlw	3
 12899  001AA4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12900  001AA6  EC44  F01D         	call	_updateServoPosition	;wreg free
 12901                           
 12902                           ;Test.c: 345: _delay((unsigned long)((750)*(32000000/4000.0)));
 12903  001AAA  0E1F               	movlw	31
 12904  001AAC  0100               	movlb	0	; () banked
 12905  001AAE  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 12906  001AB0  0E71               	movlw	113
 12907  001AB2  0100               	movlb	0	; () banked
 12908  001AB4  6FAB               	movwf	??_BothServos& (0+255),b
 12909  001AB6  0E1E               	movlw	30
 12910  001AB8                     u7877:
 12911  001AB8  2EE8               	decfsz	wreg,f,c
 12912  001ABA  D7FE               	bra	u7877
 12913  001ABC  2FAB               	decfsz	??_BothServos& (0+255),f,b
 12914  001ABE  D7FC               	bra	u7877
 12915  001AC0  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 12916  001AC2  D7FA               	bra	u7877
 12917  001AC4  F000               	nop	
 12918                           
 12919                           ;Test.c: 347: updateServoPosition(1700, 1);
 12920  001AC6  0E06               	movlw	6
 12921  001AC8  0100               	movlb	0	; () banked
 12922  001ACA  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12923  001ACC  0EA4               	movlw	164
 12924  001ACE  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12925  001AD0  0E00               	movlw	0
 12926  001AD2  0100               	movlb	0	; () banked
 12927  001AD4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12928  001AD6  0E01               	movlw	1
 12929  001AD8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12930  001ADA  EC44  F01D         	call	_updateServoPosition	;wreg free
 12931                           
 12932                           ;Test.c: 348: updateServoPosition(1350, 3);
 12933  001ADE  0E05               	movlw	5
 12934  001AE0  0100               	movlb	0	; () banked
 12935  001AE2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12936  001AE4  0E46               	movlw	70
 12937  001AE6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12938  001AE8  0E00               	movlw	0
 12939  001AEA  0100               	movlb	0	; () banked
 12940  001AEC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12941  001AEE  0E03               	movlw	3
 12942  001AF0  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12943  001AF2  EC44  F01D         	call	_updateServoPosition	;wreg free
 12944                           
 12945                           ;Test.c: 349: _delay((unsigned long)((1500)*(32000000/4000.0)));
 12946  001AF6  0E3D               	movlw	61
 12947  001AF8  0100               	movlb	0	; () banked
 12948  001AFA  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 12949  001AFC  0EE1               	movlw	225
 12950  001AFE  0100               	movlb	0	; () banked
 12951  001B00  6FAB               	movwf	??_BothServos& (0+255),b
 12952  001B02  0E3F               	movlw	63
 12953  001B04                     u7887:
 12954  001B04  2EE8               	decfsz	wreg,f,c
 12955  001B06  D7FE               	bra	u7887
 12956  001B08  2FAB               	decfsz	??_BothServos& (0+255),f,b
 12957  001B0A  D7FC               	bra	u7887
 12958  001B0C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 12959  001B0E  D7FA               	bra	u7887
 12960  001B10  D000               	nop2	
 12961                           
 12962                           ;Test.c: 350: updateServoPosition(1190, 3);
 12963  001B12  0E04               	movlw	4
 12964  001B14  0100               	movlb	0	; () banked
 12965  001B16  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12966  001B18  0EA6               	movlw	166
 12967  001B1A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12968  001B1C  0E00               	movlw	0
 12969  001B1E  0100               	movlb	0	; () banked
 12970  001B20  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12971  001B22  0E03               	movlw	3
 12972  001B24  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12973  001B26  EC44  F01D         	call	_updateServoPosition	;wreg free
 12974                           
 12975                           ;Test.c: 351: _delay((unsigned long)((750)*(32000000/4000.0)));
 12976  001B2A  0E1F               	movlw	31
 12977  001B2C  0100               	movlb	0	; () banked
 12978  001B2E  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 12979  001B30  0E71               	movlw	113
 12980  001B32  0100               	movlb	0	; () banked
 12981  001B34  6FAB               	movwf	??_BothServos& (0+255),b
 12982  001B36  0E1E               	movlw	30
 12983  001B38                     u7897:
 12984  001B38  2EE8               	decfsz	wreg,f,c
 12985  001B3A  D7FE               	bra	u7897
 12986  001B3C  2FAB               	decfsz	??_BothServos& (0+255),f,b
 12987  001B3E  D7FC               	bra	u7897
 12988  001B40  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 12989  001B42  D7FA               	bra	u7897
 12990  001B44  F000               	nop	
 12991                           
 12992                           ;Test.c: 353: updateServoPosition(2000, 1);
 12993  001B46  0E07               	movlw	7
 12994  001B48  0100               	movlb	0	; () banked
 12995  001B4A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12996  001B4C  0ED0               	movlw	208
 12997  001B4E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12998  001B50  0E00               	movlw	0
 12999  001B52  0100               	movlb	0	; () banked
 13000  001B54  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13001  001B56  0E01               	movlw	1
 13002  001B58  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13003  001B5A  EC44  F01D         	call	_updateServoPosition	;wreg free
 13004                           
 13005                           ;Test.c: 354: updateServoPosition(1350, 3);
 13006  001B5E  0E05               	movlw	5
 13007  001B60  0100               	movlb	0	; () banked
 13008  001B62  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13009  001B64  0E46               	movlw	70
 13010  001B66  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13011  001B68  0E00               	movlw	0
 13012  001B6A  0100               	movlb	0	; () banked
 13013  001B6C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13014  001B6E  0E03               	movlw	3
 13015  001B70  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13016  001B72  EC44  F01D         	call	_updateServoPosition	;wreg free
 13017                           
 13018                           ;Test.c: 355: _delay((unsigned long)((1500)*(32000000/4000.0)));
 13019  001B76  0E3D               	movlw	61
 13020  001B78  0100               	movlb	0	; () banked
 13021  001B7A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13022  001B7C  0EE1               	movlw	225
 13023  001B7E  0100               	movlb	0	; () banked
 13024  001B80  6FAB               	movwf	??_BothServos& (0+255),b
 13025  001B82  0E3F               	movlw	63
 13026  001B84                     u7907:
 13027  001B84  2EE8               	decfsz	wreg,f,c
 13028  001B86  D7FE               	bra	u7907
 13029  001B88  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13030  001B8A  D7FC               	bra	u7907
 13031  001B8C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13032  001B8E  D7FA               	bra	u7907
 13033  001B90  D000               	nop2	
 13034                           
 13035                           ;Test.c: 356: updateServoPosition(1190, 3);
 13036  001B92  0E04               	movlw	4
 13037  001B94  0100               	movlb	0	; () banked
 13038  001B96  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13039  001B98  0EA6               	movlw	166
 13040  001B9A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13041  001B9C  0E00               	movlw	0
 13042  001B9E  0100               	movlb	0	; () banked
 13043  001BA0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13044  001BA2  0E03               	movlw	3
 13045  001BA4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13046  001BA6  EC44  F01D         	call	_updateServoPosition	;wreg free
 13047                           
 13048                           ;Test.c: 357: _delay((unsigned long)((750)*(32000000/4000.0)));
 13049  001BAA  0E1F               	movlw	31
 13050  001BAC  0100               	movlb	0	; () banked
 13051  001BAE  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13052  001BB0  0E71               	movlw	113
 13053  001BB2  0100               	movlb	0	; () banked
 13054  001BB4  6FAB               	movwf	??_BothServos& (0+255),b
 13055  001BB6  0E1E               	movlw	30
 13056  001BB8                     u7917:
 13057  001BB8  2EE8               	decfsz	wreg,f,c
 13058  001BBA  D7FE               	bra	u7917
 13059  001BBC  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13060  001BBE  D7FC               	bra	u7917
 13061  001BC0  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13062  001BC2  D7FA               	bra	u7917
 13063  001BC4  F000               	nop	
 13064                           
 13065                           ;Test.c: 359: TMR1ON = 0;
 13066  001BC6  90CD               	bcf	4045,0,c	;volatile
 13067                           
 13068                           ;Test.c: 360: TMR3ON = 0;
 13069  001BC8  90B1               	bcf	4017,0,c	;volatile
 13070                           
 13071                           ;Test.c: 361: (INTCONbits.GIE = 0);
 13072  001BCA  9EF2               	bcf	intcon,7,c	;volatile
 13073  001BCC  0012               	return		;funcret
 13074  001BCE                     __end_of_BothServos:
 13075                           	opt stack 0
 13076                           tblptru	equ	0xFF8
 13077                           tblptrh	equ	0xFF7
 13078                           tblptrl	equ	0xFF6
 13079                           tablat	equ	0xFF5
 13080                           prodh	equ	0xFF4
 13081                           prodl	equ	0xFF3
 13082                           intcon	equ	0xFF2
 13083                           intcon2	equ	0xFF1
 13084                           intcon3	equ	0xFF0
 13085                           postinc0	equ	0xFEE
 13086                           wreg	equ	0xFE8
 13087                           postdec1	equ	0xFE5
 13088                           fsr1l	equ	0xFE1
 13089                           indf2	equ	0xFDF
 13090                           postinc2	equ	0xFDE
 13091                           postdec2	equ	0xFDD
 13092                           fsr2h	equ	0xFDA
 13093                           fsr2l	equ	0xFD9
 13094                           status	equ	0xFD8
 13095                           
 13096 ;; *************** function _printf *****************
 13097 ;; Defined at:
 13098 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 13099 ;; Parameters:    Size  Location     Type
 13100 ;;  f               2   14[BANK0 ] PTR const unsigned char 
 13101 ;;		 -> STR_112(17), STR_111(17), STR_110(10), STR_109(13), 
 13102 ;;		 -> STR_108(18), STR_107(18), STR_106(17), STR_105(15), 
 13103 ;;		 -> STR_104(15), STR_103(15), STR_102(17), STR_101(17), 
 13104 ;;		 -> STR_100(17), STR_99(16), STR_98(17), STR_97(17), 
 13105 ;;		 -> STR_96(17), STR_95(17), STR_94(17), STR_93(17), 
 13106 ;;		 -> STR_92(15), STR_91(11), STR_90(17), STR_89(11), 
 13107 ;;		 -> STR_88(17), STR_87(14), STR_86(15), STR_85(14), 
 13108 ;;		 -> STR_84(10), STR_83(16), STR_82(15), STR_81(3), 
 13109 ;;		 -> STR_80(15), STR_79(13), STR_78(14), STR_77(8), 
 13110 ;;		 -> STR_76(14), STR_75(15), STR_74(12), STR_73(14), 
 13111 ;;		 -> STR_72(17), STR_71(14), STR_70(15), STR_69(17), 
 13112 ;;		 -> STR_68(17), STR_67(7), STR_66(21), STR_65(13), 
 13113 ;;		 -> STR_64(11), STR_63(24), STR_50(17), STR_49(17), 
 13114 ;;		 -> STR_48(17), STR_47(17), STR_46(17), STR_45(17), 
 13115 ;;		 -> STR_44(17), STR_43(17), STR_42(17), STR_41(17), 
 13116 ;;		 -> STR_40(17), STR_39(17), STR_38(17), STR_37(17), 
 13117 ;;		 -> STR_36(17), STR_35(17), STR_34(17), STR_33(17), 
 13118 ;;		 -> STR_32(17), STR_31(17), STR_30(17), STR_29(3), 
 13119 ;;		 -> STR_28(17), STR_27(19), STR_26(17), STR_25(19), 
 13120 ;;		 -> STR_24(17), STR_23(14), STR_22(10), STR_21(24), 
 13121 ;;		 -> STR_7(7), STR_6(17), STR_5(18), STR_4(16), 
 13122 ;;		 -> STR_3(18), STR_2(14), STR_1(18), 
 13123 ;; Auto vars:     Size  Location     Type
 13124 ;;  tmpval          4    0        struct .
 13125 ;;  width           2   41[BANK0 ] int 
 13126 ;;  val             2   37[BANK0 ] unsigned int 
 13127 ;;  len             2   35[BANK0 ] unsigned int 
 13128 ;;  ap              2   33[BANK0 ] PTR void [1]
 13129 ;;		 -> ?i2_printf(2), ?_printf(2), 
 13130 ;;  cp              2   31[BANK0 ] PTR const unsigned char 
 13131 ;;		 -> STR_113(7), count_total(2), printRTC@month(4), UI@month(4), 
 13132 ;;  c               1   40[BANK0 ] char 
 13133 ;;  flag            1   39[BANK0 ] unsigned char 
 13134 ;;  prec            1   30[BANK0 ] char 
 13135 ;; Return value:  Size  Location     Type
 13136 ;;                  2   14[BANK0 ] int 
 13137 ;; Registers used:
 13138 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13139 ;; Tracked objects:
 13140 ;;		On entry : 0/0
 13141 ;;		On exit  : 0/0
 13142 ;;		Unchanged: 0/0
 13143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13144 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13145 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13146 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13147 ;;      Totals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13148 ;;Total ram usage:       29 bytes
 13149 ;; Hardware stack levels used:    1
 13150 ;; Hardware stack levels required when called:    9
 13151 ;; This function calls:
 13152 ;;		___lwdiv
 13153 ;;		___lwmod
 13154 ;;		___wmul
 13155 ;;		_isdigit
 13156 ;;		_putch
 13157 ;; This function is called by:
 13158 ;;		_UI
 13159 ;;		_change_state_to_menu_start
 13160 ;;		_change_state_to_menu_12
 13161 ;;		_change_state_to_menu_22
 13162 ;;		_printRTC
 13163 ;;		_EEPROM_write
 13164 ;;		_Test
 13165 ;;		_algorithmTest
 13166 ;;		_sensorTest
 13167 ;;		_actuatorTest
 13168 ;;		_BothServos
 13169 ;;		_PortTestA5
 13170 ;;		_SolenoidTestA5
 13171 ;;		_ToggleTestA5
 13172 ;; This function uses a non-reentrant model
 13173 ;;
 13174                           
 13175                           	psect	text47
 13176  001138                     __ptext47:
 13177                           	opt stack 0
 13178  001138                     _printf:
 13179                           	opt stack 18
 13180                           
 13181                           ;doprnt.c: 466: va_list ap;
 13182                           ;doprnt.c: 499: signed char c;
 13183                           ;doprnt.c: 501: int width;
 13184                           ;doprnt.c: 506: signed char prec;
 13185                           ;doprnt.c: 508: unsigned char flag;
 13186                           ;doprnt.c: 523: union {
 13187                           ;doprnt.c: 524: unsigned long vd;
 13188                           ;doprnt.c: 525: double integ;
 13189                           ;doprnt.c: 526: } tmpval;
 13190                           ;doprnt.c: 528: unsigned int val;
 13191                           ;doprnt.c: 529: unsigned len;
 13192                           ;doprnt.c: 530: const char * cp;
 13193                           ;doprnt.c: 533: *ap = __va_start();
 13194                           
 13195                           ;incstack = 0
 13196  001138  0E90               	movlw	low (?_printf+2)
 13197  00113A  0100               	movlb	0	; () banked
 13198  00113C  6FA1               	movwf	printf@ap& (0+255),b
 13199  00113E  0E00               	movlw	high (?_printf+2)
 13200  001140  0100               	movlb	0	; () banked
 13201  001142  6FA2               	movwf	(printf@ap+1)& (0+255),b
 13202                           
 13203                           ;doprnt.c: 536: while(c = *f++) {
 13204  001144  D205               	goto	l5464
 13205  001146                     l5334:
 13206                           
 13207                           ; BSR set to: 0
 13208                           ;doprnt.c: 538: if(c != '%')
 13209  001146  0E25               	movlw	37
 13210  001148  0100               	movlb	0	; () banked
 13211  00114A  19A8               	xorwf	printf@c& (0+255),w,b
 13212  00114C  B4D8               	btfsc	status,2,c
 13213  00114E  D005               	goto	l5338
 13214                           
 13215                           ; BSR set to: 0
 13216                           ;doprnt.c: 540: {
 13217                           ;doprnt.c: 541: (putch(c) );
 13218  001150  0100               	movlb	0	; () banked
 13219  001152  51A8               	movf	printf@c& (0+255),w,b
 13220  001154  ECE8  F022         	call	_putch
 13221                           
 13222                           ;doprnt.c: 542: continue;
 13223  001158  D1FB               	goto	l5464
 13224  00115A                     l5338:
 13225                           
 13226                           ;doprnt.c: 543: }
 13227                           ;doprnt.c: 546: width = 0;
 13228  00115A  0E00               	movlw	0
 13229  00115C  0100               	movlb	0	; () banked
 13230  00115E  6FAA               	movwf	(printf@width+1)& (0+255),b
 13231  001160  0E00               	movlw	0
 13232  001162  6FA9               	movwf	printf@width& (0+255),b
 13233                           
 13234                           ;doprnt.c: 548: flag = 0;
 13235  001164  0E00               	movlw	0
 13236  001166  0100               	movlb	0	; () banked
 13237  001168  6FA7               	movwf	printf@flag& (0+255),b
 13238                           
 13239                           ; BSR set to: 0
 13240                           ;doprnt.c: 551: switch(*f) {
 13241                           
 13242                           ;doprnt.c: 550: for(;;) {
 13243  00116A  D005               	goto	l5344
 13244  00116C                     l5340:
 13245                           
 13246                           ;doprnt.c: 580: flag |= 0x04;
 13247  00116C  0100               	movlb	0	; () banked
 13248  00116E  85A7               	bsf	printf@flag& (0+255),2,b
 13249                           
 13250                           ;doprnt.c: 581: f++;
 13251  001170  0100               	movlb	0	; () banked
 13252  001172  4B8E               	infsnz	printf@f& (0+255),f,b
 13253  001174  2B8F               	incf	(printf@f+1)& (0+255),f,b
 13254  001176                     l5344:
 13255  001176  C08E  FFF6         	movff	printf@f,tblptrl
 13256  00117A  C08F  FFF7         	movff	printf@f+1,tblptrh
 13257  00117E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13258  00117E  6AF8               	clrf	tblptru,c
 13259  001180                     	endif
 13260  001180                     	if	0	;tblptru may be non-zero
 13261  001180                     	endif
 13262  001180  0008               	tblrd		*
 13263  001182  50F5               	movf	tablat,w,c
 13264                           
 13265                           ; Switch size 1, requested type "space"
 13266                           ; Number of cases is 1, Range of values is 48 to 48
 13267                           ; switch strategies available:
 13268                           ; Name         Instructions Cycles
 13269                           ; simple_byte            4     3 (average)
 13270                           ;	Chosen strategy is simple_byte
 13271  001184  0A30               	xorlw	48	; case 48
 13272  001186  B4D8               	btfsc	status,2,c
 13273  001188  D7F1               	goto	l5340
 13274                           
 13275                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 13276                           
 13277                           ;doprnt.c: 586: }
 13278                           
 13279                           ;doprnt.c: 585: break;
 13280  00118A  C08E  FFF6         	movff	printf@f,tblptrl
 13281  00118E  C08F  FFF7         	movff	printf@f+1,tblptrh
 13282  001192                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13283  001192  6AF8               	clrf	tblptru,c
 13284  001194                     	endif
 13285  001194                     	if	0	;tblptru may be non-zero
 13286  001194                     	endif
 13287  001194  0008               	tblrd		*
 13288  001196  50F5               	movf	tablat,w,c
 13289  001198  EC0D  F022         	call	_isdigit
 13290  00119C  A0D8               	btfss	status,0,c
 13291  00119E  D0D2               	goto	l5392
 13292                           
 13293                           ;doprnt.c: 598: width = 0;
 13294  0011A0  0E00               	movlw	0
 13295  0011A2  0100               	movlb	0	; () banked
 13296  0011A4  6FAA               	movwf	(printf@width+1)& (0+255),b
 13297  0011A6  0E00               	movlw	0
 13298  0011A8  6FA9               	movwf	printf@width& (0+255),b
 13299  0011AA                     l5350:
 13300                           
 13301                           ;doprnt.c: 600: width *= 10;
 13302  0011AA  C0A9  F080         	movff	printf@width,___wmul@multiplier
 13303  0011AE  C0AA  F081         	movff	printf@width+1,___wmul@multiplier+1
 13304  0011B2  0E00               	movlw	0
 13305  0011B4  0100               	movlb	0	; () banked
 13306  0011B6  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
 13307  0011B8  0E0A               	movlw	10
 13308  0011BA  6F82               	movwf	___wmul@multiplicand& (0+255),b
 13309  0011BC  EC90  F020         	call	___wmul	;wreg free
 13310  0011C0  C080  F0A9         	movff	?___wmul,printf@width
 13311  0011C4  C081  F0AA         	movff	?___wmul+1,printf@width+1
 13312                           
 13313                           ;doprnt.c: 601: width += *f++ - '0';
 13314  0011C8  0ED0               	movlw	208
 13315  0011CA  0100               	movlb	0	; () banked
 13316  0011CC  6F9A               	movwf	??_printf& (0+255),b
 13317  0011CE  0EFF               	movlw	255
 13318  0011D0  0100               	movlb	0	; () banked
 13319  0011D2  6F9B               	movwf	(??_printf+1)& (0+255),b
 13320  0011D4  C08E  FFF6         	movff	printf@f,tblptrl
 13321  0011D8  C08F  FFF7         	movff	printf@f+1,tblptrh
 13322  0011DC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13323  0011DC  6AF8               	clrf	tblptru,c
 13324  0011DE                     	endif
 13325  0011DE                     	if	0	;tblptru may be non-zero
 13326  0011DE                     	endif
 13327  0011DE  0008               	tblrd		*
 13328  0011E0  50F5               	movf	tablat,w,c
 13329  0011E2  0100               	movlb	0	; () banked
 13330  0011E4  6F9C               	movwf	(??_printf+2)& (0+255),b
 13331  0011E6  6B9D               	clrf	(??_printf+3)& (0+255),b
 13332  0011E8  0100               	movlb	0	; () banked
 13333  0011EA  519A               	movf	??_printf& (0+255),w,b
 13334  0011EC  0100               	movlb	0	; () banked
 13335  0011EE  279C               	addwf	(??_printf+2)& (0+255),f,b
 13336  0011F0  0100               	movlb	0	; () banked
 13337  0011F2  519B               	movf	(??_printf+1)& (0+255),w,b
 13338  0011F4  0100               	movlb	0	; () banked
 13339  0011F6  239D               	addwfc	(??_printf+3)& (0+255),f,b
 13340  0011F8  0100               	movlb	0	; () banked
 13341  0011FA  519C               	movf	(??_printf+2)& (0+255),w,b
 13342  0011FC  0100               	movlb	0	; () banked
 13343  0011FE  27A9               	addwf	printf@width& (0+255),f,b
 13344  001200  0100               	movlb	0	; () banked
 13345  001202  519D               	movf	(??_printf+3)& (0+255),w,b
 13346  001204  0100               	movlb	0	; () banked
 13347  001206  23AA               	addwfc	(printf@width+1)& (0+255),f,b
 13348                           
 13349                           ; BSR set to: 0
 13350  001208  0100               	movlb	0	; () banked
 13351  00120A  4B8E               	infsnz	printf@f& (0+255),f,b
 13352  00120C  2B8F               	incf	(printf@f+1)& (0+255),f,b
 13353                           
 13354                           ; BSR set to: 0
 13355                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 13356  00120E  C08E  FFF6         	movff	printf@f,tblptrl
 13357  001212  C08F  FFF7         	movff	printf@f+1,tblptrh
 13358  001216                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13359  001216  6AF8               	clrf	tblptru,c
 13360  001218                     	endif
 13361  001218                     	if	0	;tblptru may be non-zero
 13362  001218                     	endif
 13363  001218  0008               	tblrd		*
 13364  00121A  50F5               	movf	tablat,w,c
 13365  00121C  EC0D  F022         	call	_isdigit
 13366  001220  A0D8               	btfss	status,0,c
 13367  001222  D090               	goto	l5392
 13368  001224  D7C2               	goto	l5350
 13369  001226                     l5358:
 13370                           
 13371                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 13372  001226  C0A1  FFD9         	movff	printf@ap,fsr2l
 13373  00122A  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 13374  00122E  CFDE F09F          	movff	postinc2,printf@cp
 13375  001232  CFDD F0A0          	movff	postdec2,printf@cp+1
 13376  001236  0E02               	movlw	2
 13377  001238  0100               	movlb	0	; () banked
 13378  00123A  27A1               	addwf	printf@ap& (0+255),f,b
 13379  00123C  0E00               	movlw	0
 13380  00123E  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 13381                           
 13382                           ; BSR set to: 0
 13383                           ;doprnt.c: 740: if(!cp)
 13384  001240  0100               	movlb	0	; () banked
 13385  001242  519F               	movf	printf@cp& (0+255),w,b
 13386  001244  0100               	movlb	0	; () banked
 13387  001246  11A0               	iorwf	(printf@cp+1)& (0+255),w,b
 13388  001248  A4D8               	btfss	status,2,c
 13389  00124A  D006               	goto	l5366
 13390                           
 13391                           ; BSR set to: 0
 13392                           ;doprnt.c: 741: cp = "(null)";
 13393  00124C  0EB5               	movlw	low STR_113
 13394  00124E  0100               	movlb	0	; () banked
 13395  001250  6F9F               	movwf	printf@cp& (0+255),b
 13396  001252  0EFF               	movlw	high STR_113
 13397  001254  0100               	movlb	0	; () banked
 13398  001256  6FA0               	movwf	(printf@cp+1)& (0+255),b
 13399  001258                     l5366:
 13400                           
 13401                           ; BSR set to: 0
 13402                           ;doprnt.c: 745: len = 0;
 13403  001258  0E00               	movlw	0
 13404  00125A  0100               	movlb	0	; () banked
 13405  00125C  6FA4               	movwf	(printf@len+1)& (0+255),b
 13406  00125E  0E00               	movlw	0
 13407  001260  6FA3               	movwf	printf@len& (0+255),b
 13408                           
 13409                           ;doprnt.c: 746: while(cp[len])
 13410  001262  D003               	goto	l5370
 13411  001264                     l5368:
 13412                           
 13413                           ;doprnt.c: 747: len++;
 13414  001264  0100               	movlb	0	; () banked
 13415  001266  4BA3               	infsnz	printf@len& (0+255),f,b
 13416  001268  2BA4               	incf	(printf@len+1)& (0+255),f,b
 13417  00126A                     l5370:
 13418                           
 13419                           ; BSR set to: 0
 13420  00126A  0100               	movlb	0	; () banked
 13421  00126C  51A3               	movf	printf@len& (0+255),w,b
 13422  00126E  0100               	movlb	0	; () banked
 13423  001270  259F               	addwf	printf@cp& (0+255),w,b
 13424  001272  0100               	movlb	0	; () banked
 13425  001274  6F9A               	movwf	??_printf& (0+255),b
 13426  001276  0100               	movlb	0	; () banked
 13427  001278  51A4               	movf	(printf@len+1)& (0+255),w,b
 13428  00127A  0100               	movlb	0	; () banked
 13429  00127C  21A0               	addwfc	(printf@cp+1)& (0+255),w,b
 13430  00127E  0100               	movlb	0	; () banked
 13431  001280  6F9B               	movwf	(??_printf+1)& (0+255),b
 13432  001282  C09A  FFF6         	movff	??_printf,tblptrl
 13433  001286  C09B  FFF7         	movff	??_printf+1,tblptrh
 13434  00128A  0E00               	movlw	low (__mediumconst shr (0+16))
 13435  00128C  6EF8               	movwf	tblptru,c
 13436  00128E  0E0F               	movlw	(high __ramtop+-1)
 13437  001290  64F7               	cpfsgt	tblptrh,c
 13438  001292  D003               	bra	u3767
 13439  001294  0008               	tblrd		*
 13440  001296  50F5               	movf	tablat,w,c
 13441  001298  D005               	bra	u3760
 13442  00129A                     u3767:
 13443  00129A  CFF6 FFE9          	movff	tblptrl,fsr0l
 13444  00129E  CFF7 FFEA          	movff	tblptrh,fsr0h
 13445  0012A2  50EF               	movf	indf0,w,c
 13446  0012A4                     u3760:
 13447  0012A4  0900               	iorlw	0
 13448  0012A6  A4D8               	btfss	status,2,c
 13449  0012A8  D7DD               	goto	l5368
 13450                           
 13451                           ;doprnt.c: 757: if(width > len)
 13452  0012AA  0100               	movlb	0	; () banked
 13453  0012AC  51A9               	movf	printf@width& (0+255),w,b
 13454  0012AE  0100               	movlb	0	; () banked
 13455  0012B0  5DA3               	subwf	printf@len& (0+255),w,b
 13456  0012B2  0100               	movlb	0	; () banked
 13457  0012B4  51AA               	movf	(printf@width+1)& (0+255),w,b
 13458  0012B6  0100               	movlb	0	; () banked
 13459  0012B8  59A4               	subwfb	(printf@len+1)& (0+255),w,b
 13460  0012BA  B0D8               	btfsc	status,0,c
 13461  0012BC  D009               	goto	l5376
 13462                           
 13463                           ; BSR set to: 0
 13464                           ;doprnt.c: 758: width -= len;
 13465  0012BE  0100               	movlb	0	; () banked
 13466  0012C0  51A3               	movf	printf@len& (0+255),w,b
 13467  0012C2  0100               	movlb	0	; () banked
 13468  0012C4  5FA9               	subwf	printf@width& (0+255),f,b
 13469  0012C6  0100               	movlb	0	; () banked
 13470  0012C8  51A4               	movf	(printf@len+1)& (0+255),w,b
 13471  0012CA  0100               	movlb	0	; () banked
 13472  0012CC  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 13473  0012CE  D009               	goto	l5380
 13474  0012D0                     l5376:
 13475                           
 13476                           ; BSR set to: 0
 13477                           ;doprnt.c: 759: else
 13478                           ;doprnt.c: 760: width = 0;
 13479  0012D0  0E00               	movlw	0
 13480  0012D2  0100               	movlb	0	; () banked
 13481  0012D4  6FAA               	movwf	(printf@width+1)& (0+255),b
 13482  0012D6  0E00               	movlw	0
 13483  0012D8  6FA9               	movwf	printf@width& (0+255),b
 13484                           
 13485                           ; BSR set to: 0
 13486                           ;doprnt.c: 764: while(width--)
 13487  0012DA  D003               	goto	l5380
 13488  0012DC                     l5378:
 13489                           
 13490                           ; BSR set to: 0
 13491                           ;doprnt.c: 765: (putch(' ') );
 13492  0012DC  0E20               	movlw	32
 13493  0012DE  ECE8  F022         	call	_putch
 13494  0012E2                     l5380:
 13495  0012E2  0100               	movlb	0	; () banked
 13496  0012E4  07A9               	decf	printf@width& (0+255),f,b
 13497  0012E6  A0D8               	btfss	status,0,c
 13498  0012E8  07AA               	decf	(printf@width+1)& (0+255),f,b
 13499  0012EA  0100               	movlb	0	; () banked
 13500  0012EC  29A9               	incf	printf@width& (0+255),w,b
 13501  0012EE  E1F6               	bnz	l5378
 13502  0012F0  0100               	movlb	0	; () banked
 13503  0012F2  29AA               	incf	(printf@width+1)& (0+255),w,b
 13504  0012F4  B4D8               	btfsc	status,2,c
 13505  0012F6  D017               	goto	l5386
 13506  0012F8  D7F1               	goto	l5378
 13507  0012FA                     l5382:
 13508                           
 13509                           ; BSR set to: 0
 13510                           ;doprnt.c: 768: (putch(*cp++) );
 13511  0012FA  C09F  FFF6         	movff	printf@cp,tblptrl
 13512  0012FE  C0A0  FFF7         	movff	printf@cp+1,tblptrh
 13513  001302  0E00               	movlw	low (__mediumconst shr (0+16))
 13514  001304  6EF8               	movwf	tblptru,c
 13515  001306  0E0F               	movlw	(high __ramtop+-1)
 13516  001308  64F7               	cpfsgt	tblptrh,c
 13517  00130A  D003               	bra	u3807
 13518  00130C  0008               	tblrd		*
 13519  00130E  50F5               	movf	tablat,w,c
 13520  001310  D005               	bra	u3800
 13521  001312                     u3807:
 13522  001312  CFF6 FFE9          	movff	tblptrl,fsr0l
 13523  001316  CFF7 FFEA          	movff	tblptrh,fsr0h
 13524  00131A  50EF               	movf	indf0,w,c
 13525  00131C                     u3800:
 13526  00131C  ECE8  F022         	call	_putch
 13527  001320  0100               	movlb	0	; () banked
 13528  001322  4B9F               	infsnz	printf@cp& (0+255),f,b
 13529  001324  2BA0               	incf	(printf@cp+1)& (0+255),f,b
 13530  001326                     l5386:
 13531                           
 13532                           ; BSR set to: 0
 13533  001326  0100               	movlb	0	; () banked
 13534  001328  07A3               	decf	printf@len& (0+255),f,b
 13535  00132A  A0D8               	btfss	status,0,c
 13536  00132C  07A4               	decf	(printf@len+1)& (0+255),f,b
 13537  00132E  0100               	movlb	0	; () banked
 13538  001330  29A3               	incf	printf@len& (0+255),w,b
 13539  001332  E1E3               	bnz	l5382
 13540  001334  0100               	movlb	0	; () banked
 13541  001336  29A4               	incf	(printf@len+1)& (0+255),w,b
 13542  001338  B4D8               	btfsc	status,2,c
 13543  00133A  D10A               	goto	l5464
 13544  00133C  D7DE               	goto	l5382
 13545  00133E                     l5388:
 13546                           
 13547                           ; BSR set to: 0
 13548                           ;doprnt.c: 818: flag |= 0x40;
 13549  00133E  0100               	movlb	0	; () banked
 13550  001340  8DA7               	bsf	printf@flag& (0+255),6,b
 13551                           
 13552                           ; BSR set to: 0
 13553                           ;doprnt.c: 822: }
 13554                           
 13555                           ;doprnt.c: 819: break;
 13556  001342  D01D               	goto	l1234
 13557  001344                     l5392:
 13558  001344  C08E  FFF6         	movff	printf@f,tblptrl
 13559  001348  C08F  FFF7         	movff	printf@f+1,tblptrh
 13560  00134C  0100               	movlb	0	; () banked
 13561  00134E  4B8E               	infsnz	printf@f& (0+255),f,b
 13562  001350  2B8F               	incf	(printf@f+1)& (0+255),f,b
 13563  001352                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13564  001352  6AF8               	clrf	tblptru,c
 13565  001354                     	endif
 13566  001354                     	if	0	;tblptru may be non-zero
 13567  001354                     	endif
 13568  001354  0008               	tblrd		*
 13569  001356  CFF5 F0A8          	movff	tablat,printf@c
 13570  00135A  0100               	movlb	0	; () banked
 13571  00135C  51A8               	movf	printf@c& (0+255),w,b
 13572                           
 13573                           ; Switch size 1, requested type "space"
 13574                           ; Number of cases is 5, Range of values is 0 to 117
 13575                           ; switch strategies available:
 13576                           ; Name         Instructions Cycles
 13577                           ; simple_byte           16     9 (average)
 13578                           ;	Chosen strategy is simple_byte
 13579  00135E  0A00               	xorlw	0	; case 0
 13580  001360  B4D8               	btfsc	status,2,c
 13581  001362  0012               	return	
 13582  001364  0A64               	xorlw	100	; case 100
 13583  001366  B4D8               	btfsc	status,2,c
 13584  001368  D00A               	goto	l1234
 13585  00136A  0A0D               	xorlw	13	; case 105
 13586  00136C  B4D8               	btfsc	status,2,c
 13587  00136E  D007               	goto	l1234
 13588  001370  0A1A               	xorlw	26	; case 115
 13589  001372  B4D8               	btfsc	status,2,c
 13590  001374  D758               	goto	l5358
 13591  001376  0A06               	xorlw	6	; case 117
 13592  001378  B4D8               	btfsc	status,2,c
 13593  00137A  D7E1               	goto	l5388
 13594  00137C  D0E9               	goto	l5464
 13595  00137E                     l1234:
 13596                           
 13597                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 13598  00137E  0100               	movlb	0	; () banked
 13599  001380  BDA7               	btfsc	printf@flag& (0+255),6,b
 13600  001382  D019               	goto	l5404
 13601                           
 13602                           ; BSR set to: 0
 13603                           ;doprnt.c: 1253: {
 13604                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 13605  001384  C0A1  FFD9         	movff	printf@ap,fsr2l
 13606  001388  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 13607  00138C  CFDE F0A5          	movff	postinc2,printf@val
 13608  001390  CFDD F0A6          	movff	postdec2,printf@val+1
 13609                           
 13610                           ; BSR set to: 0
 13611  001394  0E02               	movlw	2
 13612  001396  0100               	movlb	0	; () banked
 13613  001398  27A1               	addwf	printf@ap& (0+255),f,b
 13614  00139A  0E00               	movlw	0
 13615  00139C  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 13616                           
 13617                           ; BSR set to: 0
 13618                           ;doprnt.c: 1261: if((int)val < 0) {
 13619  00139E  0100               	movlb	0	; () banked
 13620  0013A0  AFA6               	btfss	(printf@val+1)& (0+255),7,b
 13621  0013A2  D016               	goto	l5408
 13622                           
 13623                           ; BSR set to: 0
 13624                           ;doprnt.c: 1262: flag |= 0x03;
 13625  0013A4  0E03               	movlw	3
 13626  0013A6  0100               	movlb	0	; () banked
 13627  0013A8  13A7               	iorwf	printf@flag& (0+255),f,b
 13628                           
 13629                           ; BSR set to: 0
 13630                           ;doprnt.c: 1263: val = -val;
 13631  0013AA  0100               	movlb	0	; () banked
 13632  0013AC  6DA5               	negf	printf@val& (0+255),b
 13633  0013AE  1FA6               	comf	(printf@val+1)& (0+255),f,b
 13634  0013B0  B0D8               	btfsc	status,0,c
 13635  0013B2  2BA6               	incf	(printf@val+1)& (0+255),f,b
 13636                           
 13637                           ; BSR set to: 0
 13638                           ;doprnt.c: 1264: }
 13639                           ;doprnt.c: 1266: }
 13640  0013B4  D00D               	goto	l5408
 13641  0013B6                     l5404:
 13642                           
 13643                           ; BSR set to: 0
 13644                           ;doprnt.c: 1268: else
 13645                           ;doprnt.c: 1273: {
 13646                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 13647  0013B6  C0A1  FFD9         	movff	printf@ap,fsr2l
 13648  0013BA  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 13649  0013BE  CFDE F0A5          	movff	postinc2,printf@val
 13650  0013C2  CFDD F0A6          	movff	postdec2,printf@val+1
 13651                           
 13652                           ; BSR set to: 0
 13653  0013C6  0E02               	movlw	2
 13654  0013C8  0100               	movlb	0	; () banked
 13655  0013CA  27A1               	addwf	printf@ap& (0+255),f,b
 13656  0013CC  0E00               	movlw	0
 13657  0013CE  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 13658  0013D0                     l5408:
 13659                           
 13660                           ; BSR set to: 0
 13661                           ;doprnt.c: 1287: }
 13662                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 13663  0013D0  0E01               	movlw	1
 13664  0013D2  0100               	movlb	0	; () banked
 13665  0013D4  6FA8               	movwf	printf@c& (0+255),b
 13666  0013D6                     l5410:
 13667                           
 13668                           ; BSR set to: 0
 13669  0013D6  0E05               	movlw	5
 13670  0013D8  0100               	movlb	0	; () banked
 13671  0013DA  19A8               	xorwf	printf@c& (0+255),w,b
 13672  0013DC  B4D8               	btfsc	status,2,c
 13673  0013DE  D019               	goto	l5422
 13674                           
 13675                           ; BSR set to: 0
 13676                           ;doprnt.c: 1306: if(val < dpowers[c])
 13677                           
 13678                           ; BSR set to: 0
 13679                           
 13680                           ; BSR set to: 0
 13681  0013E0  0100               	movlb	0	; () banked
 13682  0013E2  51A8               	movf	printf@c& (0+255),w,b
 13683  0013E4  0D02               	mullw	2
 13684  0013E6  0E38               	movlw	low _dpowers
 13685  0013E8  24F3               	addwf	prodl,w,c
 13686  0013EA  6EF6               	movwf	tblptrl,c
 13687  0013EC  0EFB               	movlw	high _dpowers
 13688  0013EE  20F4               	addwfc	prodh,w,c
 13689  0013F0  6EF7               	movwf	tblptrh,c
 13690  0013F2                     	if	1	;There are 3 active tblptr bytes
 13691  0013F2  6AF8               	clrf	tblptru,c
 13692  0013F4  0E00               	movlw	low (__mediumconst shr (0+16))
 13693  0013F6  22F8               	addwfc	tblptru,f,c
 13694  0013F8                     	endif
 13695  0013F8  0009               	tblrd		*+
 13696  0013FA  50F5               	movf	tablat,w,c
 13697  0013FC  0100               	movlb	0	; () banked
 13698  0013FE  5DA5               	subwf	printf@val& (0+255),w,b
 13699  001400  0009               	tblrd		*+
 13700  001402  50F5               	movf	tablat,w,c
 13701  001404  0100               	movlb	0	; () banked
 13702  001406  59A6               	subwfb	(printf@val+1)& (0+255),w,b
 13703  001408  A0D8               	btfss	status,0,c
 13704  00140A  D003               	goto	l5422
 13705                           
 13706                           ; BSR set to: 0
 13707                           
 13708                           ; BSR set to: 0
 13709                           
 13710                           ; BSR set to: 0
 13711                           ;doprnt.c: 1307: break;
 13712  00140C  0100               	movlb	0	; () banked
 13713  00140E  2BA8               	incf	printf@c& (0+255),f,b
 13714  001410  D7E2               	goto	l5410
 13715  001412                     l5422:
 13716                           
 13717                           ; BSR set to: 0
 13718                           ;doprnt.c: 1345: if(width && flag & 0x03)
 13719  001412  0100               	movlb	0	; () banked
 13720  001414  51A9               	movf	printf@width& (0+255),w,b
 13721  001416  0100               	movlb	0	; () banked
 13722  001418  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 13723  00141A  B4D8               	btfsc	status,2,c
 13724  00141C  D00B               	goto	l5428
 13725                           
 13726                           ; BSR set to: 0
 13727  00141E  C0A7  F09A         	movff	printf@flag,??_printf
 13728  001422  0E03               	movlw	3
 13729  001424  0100               	movlb	0	; () banked
 13730  001426  179A               	andwf	??_printf& (0+255),f,b
 13731  001428  B4D8               	btfsc	status,2,c
 13732  00142A  D004               	goto	l5428
 13733                           
 13734                           ; BSR set to: 0
 13735                           ;doprnt.c: 1346: width--;
 13736  00142C  0100               	movlb	0	; () banked
 13737  00142E  07A9               	decf	printf@width& (0+255),f,b
 13738  001430  A0D8               	btfss	status,0,c
 13739  001432  07AA               	decf	(printf@width+1)& (0+255),f,b
 13740  001434                     l5428:
 13741                           
 13742                           ; BSR set to: 0
 13743                           ;doprnt.c: 1381: if(width > c)
 13744  001434  0E80               	movlw	128
 13745  001436  0100               	movlb	0	; () banked
 13746  001438  BFA8               	btfsc	printf@c& (0+255),7,b
 13747  00143A  0E7F               	movlw	127
 13748  00143C  0100               	movlb	0	; () banked
 13749  00143E  6F9A               	movwf	??_printf& (0+255),b
 13750  001440  0100               	movlb	0	; () banked
 13751  001442  51A9               	movf	printf@width& (0+255),w,b
 13752  001444  0100               	movlb	0	; () banked
 13753  001446  5DA8               	subwf	printf@c& (0+255),w,b
 13754  001448  0100               	movlb	0	; () banked
 13755  00144A  51AA               	movf	(printf@width+1)& (0+255),w,b
 13756  00144C  0A80               	xorlw	128
 13757  00144E  0100               	movlb	0	; () banked
 13758  001450  599A               	subwfb	??_printf& (0+255),w,b
 13759  001452  B0D8               	btfsc	status,0,c
 13760  001454  D00B               	goto	l5432
 13761                           
 13762                           ; BSR set to: 0
 13763                           ;doprnt.c: 1382: width -= c;
 13764  001456  0100               	movlb	0	; () banked
 13765  001458  51A8               	movf	printf@c& (0+255),w,b
 13766  00145A  0100               	movlb	0	; () banked
 13767  00145C  5FA9               	subwf	printf@width& (0+255),f,b
 13768  00145E  0E00               	movlw	0
 13769  001460  0100               	movlb	0	; () banked
 13770  001462  BFA8               	btfsc	printf@c& (0+255),7,b
 13771  001464  0EFF               	movlw	255
 13772  001466  0100               	movlb	0	; () banked
 13773  001468  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 13774  00146A  D005               	goto	l5434
 13775  00146C                     l5432:
 13776                           
 13777                           ; BSR set to: 0
 13778                           ;doprnt.c: 1383: else
 13779                           ;doprnt.c: 1384: width = 0;
 13780  00146C  0E00               	movlw	0
 13781  00146E  0100               	movlb	0	; () banked
 13782  001470  6FAA               	movwf	(printf@width+1)& (0+255),b
 13783  001472  0E00               	movlw	0
 13784  001474  6FA9               	movwf	printf@width& (0+255),b
 13785  001476                     l5434:
 13786                           
 13787                           ; BSR set to: 0
 13788                           ;doprnt.c: 1387: if(flag & 0x04) {
 13789  001476  0100               	movlb	0	; () banked
 13790  001478  A5A7               	btfss	printf@flag& (0+255),2,b
 13791  00147A  D018               	goto	l5446
 13792                           
 13793                           ; BSR set to: 0
 13794                           ;doprnt.c: 1392: if(flag & 0x03)
 13795  00147C  C0A7  F09A         	movff	printf@flag,??_printf
 13796  001480  0E03               	movlw	3
 13797  001482  0100               	movlb	0	; () banked
 13798  001484  179A               	andwf	??_printf& (0+255),f,b
 13799  001486  B4D8               	btfsc	status,2,c
 13800  001488  D003               	goto	l5440
 13801                           
 13802                           ; BSR set to: 0
 13803                           ;doprnt.c: 1393: (putch('-') );
 13804  00148A  0E2D               	movlw	45
 13805  00148C  ECE8  F022         	call	_putch
 13806  001490                     l5440:
 13807                           
 13808                           ;doprnt.c: 1415: if(width)
 13809  001490  0100               	movlb	0	; () banked
 13810  001492  51A9               	movf	printf@width& (0+255),w,b
 13811  001494  0100               	movlb	0	; () banked
 13812  001496  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 13813  001498  B4D8               	btfsc	status,2,c
 13814  00149A  D025               	goto	l5456
 13815                           
 13816                           ; BSR set to: 0
 13817                           ;doprnt.c: 1417: (putch('0') );
 13818                           
 13819                           ; BSR set to: 0
 13820                           
 13821                           ;doprnt.c: 1416: do
 13822  00149C  0E30               	movlw	48
 13823  00149E  ECE8  F022         	call	_putch
 13824                           
 13825                           ;doprnt.c: 1418: while(--width);
 13826  0014A2  0100               	movlb	0	; () banked
 13827  0014A4  07A9               	decf	printf@width& (0+255),f,b
 13828  0014A6  A0D8               	btfss	status,0,c
 13829  0014A8  07AA               	decf	(printf@width+1)& (0+255),f,b
 13830  0014AA  D7F2               	goto	l5440
 13831  0014AC                     l5446:
 13832                           
 13833                           ; BSR set to: 0
 13834                           ;doprnt.c: 1422: {
 13835                           ;doprnt.c: 1424: if(width
 13836                           ;doprnt.c: 1428: )
 13837  0014AC  0100               	movlb	0	; () banked
 13838  0014AE  51A9               	movf	printf@width& (0+255),w,b
 13839  0014B0  0100               	movlb	0	; () banked
 13840  0014B2  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 13841  0014B4  B4D8               	btfsc	status,2,c
 13842  0014B6  D00D               	goto	l5452
 13843  0014B8                     l5448:
 13844                           
 13845                           ; BSR set to: 0
 13846                           ;doprnt.c: 1430: (putch(' ') );
 13847  0014B8  0E20               	movlw	32
 13848  0014BA  ECE8  F022         	call	_putch
 13849                           
 13850                           ;doprnt.c: 1431: while(--width);
 13851  0014BE  0100               	movlb	0	; () banked
 13852  0014C0  07A9               	decf	printf@width& (0+255),f,b
 13853  0014C2  A0D8               	btfss	status,0,c
 13854  0014C4  07AA               	decf	(printf@width+1)& (0+255),f,b
 13855  0014C6  0100               	movlb	0	; () banked
 13856  0014C8  51A9               	movf	printf@width& (0+255),w,b
 13857  0014CA  0100               	movlb	0	; () banked
 13858  0014CC  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 13859  0014CE  A4D8               	btfss	status,2,c
 13860  0014D0  D7F3               	goto	l5448
 13861  0014D2                     l5452:
 13862                           
 13863                           ; BSR set to: 0
 13864                           ;doprnt.c: 1438: if(flag & 0x03)
 13865  0014D2  C0A7  F09A         	movff	printf@flag,??_printf
 13866  0014D6  0E03               	movlw	3
 13867  0014D8  0100               	movlb	0	; () banked
 13868  0014DA  179A               	andwf	??_printf& (0+255),f,b
 13869  0014DC  B4D8               	btfsc	status,2,c
 13870  0014DE  D003               	goto	l5456
 13871                           
 13872                           ; BSR set to: 0
 13873                           ;doprnt.c: 1439: (putch('-') );
 13874  0014E0  0E2D               	movlw	45
 13875  0014E2  ECE8  F022         	call	_putch
 13876  0014E6                     l5456:
 13877                           
 13878                           ;doprnt.c: 1469: }
 13879                           ;doprnt.c: 1472: prec = c;
 13880  0014E6  C0A8  F09E         	movff	printf@c,printf@prec
 13881                           
 13882                           ;doprnt.c: 1474: while(prec--) {
 13883  0014EA  D02C               	goto	l5462
 13884  0014EC                     l5458:
 13885                           
 13886                           ;doprnt.c: 1478: {
 13887                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 13888  0014EC  0100               	movlb	0	; () banked
 13889  0014EE  519E               	movf	printf@prec& (0+255),w,b
 13890  0014F0  0D02               	mullw	2
 13891  0014F2  0E38               	movlw	low _dpowers
 13892  0014F4  24F3               	addwf	prodl,w,c
 13893  0014F6  6EF6               	movwf	tblptrl,c
 13894  0014F8  0EFB               	movlw	high _dpowers
 13895  0014FA  20F4               	addwfc	prodh,w,c
 13896  0014FC  6EF7               	movwf	tblptrh,c
 13897  0014FE                     	if	1	;There are 3 active tblptr bytes
 13898  0014FE  6AF8               	clrf	tblptru,c
 13899  001500  0E00               	movlw	low (__mediumconst shr (0+16))
 13900  001502  22F8               	addwfc	tblptru,f,c
 13901  001504                     	endif
 13902  001504  0009               	tblrd		*+
 13903  001506  CFF5 F082          	movff	tablat,___lwdiv@divisor
 13904  00150A  000A               	tblrd		*-
 13905  00150C  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
 13906  001510  C0A5  F080         	movff	printf@val,___lwdiv@dividend
 13907  001514  C0A6  F081         	movff	printf@val+1,___lwdiv@dividend+1
 13908  001518  EC08  F01D         	call	___lwdiv	;wreg free
 13909  00151C  C080  F087         	movff	?___lwdiv,___lwmod@dividend
 13910  001520  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
 13911  001524  0E00               	movlw	0
 13912  001526  0100               	movlb	0	; () banked
 13913  001528  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
 13914  00152A  0E0A               	movlw	10
 13915  00152C  6F89               	movwf	___lwmod@divisor& (0+255),b
 13916  00152E  EC21  F01E         	call	___lwmod	;wreg free
 13917  001532  0100               	movlb	0	; () banked
 13918  001534  5187               	movf	?___lwmod& (0+255),w,b
 13919  001536  0F30               	addlw	48
 13920  001538  0100               	movlb	0	; () banked
 13921  00153A  6FA8               	movwf	printf@c& (0+255),b
 13922                           
 13923                           ; BSR set to: 0
 13924                           ;doprnt.c: 1523: }
 13925                           ;doprnt.c: 1524: (putch(c) );
 13926  00153C  0100               	movlb	0	; () banked
 13927  00153E  51A8               	movf	printf@c& (0+255),w,b
 13928  001540  ECE8  F022         	call	_putch
 13929  001544                     l5462:
 13930  001544  0100               	movlb	0	; () banked
 13931  001546  079E               	decf	printf@prec& (0+255),f,b
 13932  001548  0100               	movlb	0	; () banked
 13933  00154A  299E               	incf	printf@prec& (0+255),w,b
 13934  00154C  A4D8               	btfss	status,2,c
 13935  00154E  D7CE               	goto	l5458
 13936  001550                     l5464:
 13937  001550  C08E  FFF6         	movff	printf@f,tblptrl
 13938  001554  C08F  FFF7         	movff	printf@f+1,tblptrh
 13939  001558  0100               	movlb	0	; () banked
 13940  00155A  4B8E               	infsnz	printf@f& (0+255),f,b
 13941  00155C  2B8F               	incf	(printf@f+1)& (0+255),f,b
 13942  00155E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13943  00155E  6AF8               	clrf	tblptru,c
 13944  001560                     	endif
 13945  001560                     	if	0	;tblptru may be non-zero
 13946  001560                     	endif
 13947  001560  0008               	tblrd		*
 13948  001562  CFF5 F0A8          	movff	tablat,printf@c
 13949  001566  0100               	movlb	0	; () banked
 13950  001568  51A8               	movf	printf@c& (0+255),w,b
 13951  00156A  B4D8               	btfsc	status,2,c
 13952  00156C  0012               	return	
 13953  00156E  D5EB               	goto	l5334
 13954  001570                     __end_of_printf:
 13955                           	opt stack 0
 13956                           tblptru	equ	0xFF8
 13957                           tblptrh	equ	0xFF7
 13958                           tblptrl	equ	0xFF6
 13959                           tablat	equ	0xFF5
 13960                           prodh	equ	0xFF4
 13961                           prodl	equ	0xFF3
 13962                           intcon	equ	0xFF2
 13963                           intcon2	equ	0xFF1
 13964                           intcon3	equ	0xFF0
 13965                           indf0	equ	0xFEF
 13966                           postinc0	equ	0xFEE
 13967                           fsr0h	equ	0xFEA
 13968                           fsr0l	equ	0xFE9
 13969                           wreg	equ	0xFE8
 13970                           postdec1	equ	0xFE5
 13971                           fsr1l	equ	0xFE1
 13972                           indf2	equ	0xFDF
 13973                           postinc2	equ	0xFDE
 13974                           postdec2	equ	0xFDD
 13975                           fsr2h	equ	0xFDA
 13976                           fsr2l	equ	0xFD9
 13977                           status	equ	0xFD8
 13978                           
 13979 ;; *************** function _putch *****************
 13980 ;; Defined at:
 13981 ;;		line 20 in file "lcd.c"
 13982 ;; Parameters:    Size  Location     Type
 13983 ;;  data            1    wreg     unsigned char 
 13984 ;; Auto vars:     Size  Location     Type
 13985 ;;  data            1    2[BANK0 ] unsigned char 
 13986 ;; Return value:  Size  Location     Type
 13987 ;;                  1    wreg      void 
 13988 ;; Registers used:
 13989 ;;		wreg, status,2, status,0, cstack
 13990 ;; Tracked objects:
 13991 ;;		On entry : 0/0
 13992 ;;		On exit  : 0/0
 13993 ;;		Unchanged: 0/0
 13994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13995 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13996 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13997 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13998 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13999 ;;Total ram usage:        1 bytes
 14000 ;; Hardware stack levels used:    1
 14001 ;; Hardware stack levels required when called:    8
 14002 ;; This function calls:
 14003 ;;		_lcdNibble
 14004 ;; This function is called by:
 14005 ;;		_printf
 14006 ;; This function uses a non-reentrant model
 14007 ;;
 14008                           
 14009                           	psect	text48
 14010  0045D0                     __ptext48:
 14011                           	opt stack 0
 14012  0045D0                     _putch:
 14013                           	opt stack 18
 14014                           
 14015                           ;incstack = 0
 14016                           ;putch@data stored from wreg
 14017  0045D0  0100               	movlb	0	; () banked
 14018  0045D2  6F82               	movwf	putch@data& (0+255),b
 14019                           
 14020                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 14021  0045D4  848C               	bsf	3980,2,c	;volatile
 14022                           
 14023                           ;lcd.c: 22: lcdNibble(data);
 14024  0045D6  0100               	movlb	0	; () banked
 14025  0045D8  5182               	movf	putch@data& (0+255),w,b
 14026  0045DA  ECED  F01D         	call	_lcdNibble
 14027  0045DE  0012               	return		;funcret
 14028  0045E0                     __end_of_putch:
 14029                           	opt stack 0
 14030                           tblptru	equ	0xFF8
 14031                           tblptrh	equ	0xFF7
 14032                           tblptrl	equ	0xFF6
 14033                           tablat	equ	0xFF5
 14034                           prodh	equ	0xFF4
 14035                           prodl	equ	0xFF3
 14036                           intcon	equ	0xFF2
 14037                           intcon2	equ	0xFF1
 14038                           intcon3	equ	0xFF0
 14039                           indf0	equ	0xFEF
 14040                           postinc0	equ	0xFEE
 14041                           fsr0h	equ	0xFEA
 14042                           fsr0l	equ	0xFE9
 14043                           wreg	equ	0xFE8
 14044                           postdec1	equ	0xFE5
 14045                           fsr1l	equ	0xFE1
 14046                           indf2	equ	0xFDF
 14047                           postinc2	equ	0xFDE
 14048                           postdec2	equ	0xFDD
 14049                           fsr2h	equ	0xFDA
 14050                           fsr2l	equ	0xFD9
 14051                           status	equ	0xFD8
 14052                           
 14053 ;; *************** function _isdigit *****************
 14054 ;; Defined at:
 14055 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 14056 ;; Parameters:    Size  Location     Type
 14057 ;;  c               1    wreg     unsigned char 
 14058 ;; Auto vars:     Size  Location     Type
 14059 ;;  c               1    2[BANK0 ] unsigned char 
 14060 ;; Return value:  Size  Location     Type
 14061 ;;		None               void
 14062 ;; Registers used:
 14063 ;;		wreg, status,2, status,0
 14064 ;; Tracked objects:
 14065 ;;		On entry : 0/0
 14066 ;;		On exit  : 0/0
 14067 ;;		Unchanged: 0/0
 14068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14069 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14070 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14071 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14072 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14073 ;;Total ram usage:        3 bytes
 14074 ;; Hardware stack levels used:    1
 14075 ;; Hardware stack levels required when called:    7
 14076 ;; This function calls:
 14077 ;;		Nothing
 14078 ;; This function is called by:
 14079 ;;		_printf
 14080 ;; This function uses a non-reentrant model
 14081 ;;
 14082                           
 14083                           	psect	text49
 14084  00441A                     __ptext49:
 14085                           	opt stack 0
 14086  00441A                     _isdigit:
 14087                           	opt stack 19
 14088                           
 14089                           ;incstack = 0
 14090                           ;isdigit@c stored from wreg
 14091  00441A  0100               	movlb	0	; () banked
 14092  00441C  6F82               	movwf	isdigit@c& (0+255),b
 14093  00441E  0E00               	movlw	0
 14094  004420  0100               	movlb	0	; () banked
 14095  004422  6F81               	movwf	_isdigit$1893& (0+255),b
 14096                           
 14097                           ; BSR set to: 0
 14098  004424  0E3A               	movlw	58
 14099  004426  0100               	movlb	0	; () banked
 14100  004428  6182               	cpfslt	isdigit@c& (0+255),b
 14101  00442A  D007               	goto	l5188
 14102                           
 14103                           ; BSR set to: 0
 14104  00442C  0E2F               	movlw	47
 14105  00442E  0100               	movlb	0	; () banked
 14106  004430  6582               	cpfsgt	isdigit@c& (0+255),b
 14107  004432  D003               	goto	l5188
 14108                           
 14109                           ; BSR set to: 0
 14110  004434  0E01               	movlw	1
 14111  004436  0100               	movlb	0	; () banked
 14112  004438  6F81               	movwf	_isdigit$1893& (0+255),b
 14113  00443A                     l5188:
 14114                           
 14115                           ; BSR set to: 0
 14116  00443A  C081  F080         	movff	_isdigit$1893,??_isdigit
 14117  00443E  0100               	movlb	0	; () banked
 14118  004440  3180               	rrcf	??_isdigit& (0+255),w,b
 14119  004442  0012               	return	
 14120  004444                     __end_of_isdigit:
 14121                           	opt stack 0
 14122                           tblptru	equ	0xFF8
 14123                           tblptrh	equ	0xFF7
 14124                           tblptrl	equ	0xFF6
 14125                           tablat	equ	0xFF5
 14126                           prodh	equ	0xFF4
 14127                           prodl	equ	0xFF3
 14128                           intcon	equ	0xFF2
 14129                           intcon2	equ	0xFF1
 14130                           intcon3	equ	0xFF0
 14131                           indf0	equ	0xFEF
 14132                           postinc0	equ	0xFEE
 14133                           fsr0h	equ	0xFEA
 14134                           fsr0l	equ	0xFE9
 14135                           wreg	equ	0xFE8
 14136                           postdec1	equ	0xFE5
 14137                           fsr1l	equ	0xFE1
 14138                           indf2	equ	0xFDF
 14139                           postinc2	equ	0xFDE
 14140                           postdec2	equ	0xFDD
 14141                           fsr2h	equ	0xFDA
 14142                           fsr2l	equ	0xFD9
 14143                           status	equ	0xFD8
 14144                           
 14145 ;; *************** function ___wmul *****************
 14146 ;; Defined at:
 14147 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 14148 ;; Parameters:    Size  Location     Type
 14149 ;;  multiplier      2    0[BANK0 ] unsigned int 
 14150 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 14151 ;; Auto vars:     Size  Location     Type
 14152 ;;  product         2    4[BANK0 ] unsigned int 
 14153 ;; Return value:  Size  Location     Type
 14154 ;;                  2    0[BANK0 ] unsigned int 
 14155 ;; Registers used:
 14156 ;;		wreg, status,2, status,0, prodl, prodh
 14157 ;; Tracked objects:
 14158 ;;		On entry : 0/0
 14159 ;;		On exit  : 0/0
 14160 ;;		Unchanged: 0/0
 14161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14162 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14163 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14164 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14165 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14166 ;;Total ram usage:        6 bytes
 14167 ;; Hardware stack levels used:    1
 14168 ;; Hardware stack levels required when called:    7
 14169 ;; This function calls:
 14170 ;;		Nothing
 14171 ;; This function is called by:
 14172 ;;		_printf
 14173 ;; This function uses a non-reentrant model
 14174 ;;
 14175                           
 14176                           	psect	text50
 14177  004120                     __ptext50:
 14178                           	opt stack 0
 14179  004120                     ___wmul:
 14180                           	opt stack 19
 14181                           
 14182                           ; BSR set to: 0
 14183                           ;incstack = 0
 14184  004120  0100               	movlb	0	; () banked
 14185  004122  5180               	movf	___wmul@multiplier& (0+255),w,b
 14186  004124  0100               	movlb	0	; () banked
 14187  004126  0382               	mulwf	___wmul@multiplicand& (0+255),b
 14188  004128  CFF3 F084          	movff	prodl,___wmul@product
 14189  00412C  CFF4 F085          	movff	prodh,___wmul@product+1
 14190  004130  0100               	movlb	0	; () banked
 14191  004132  5180               	movf	___wmul@multiplier& (0+255),w,b
 14192  004134  0100               	movlb	0	; () banked
 14193  004136  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 14194  004138  50F3               	movf	prodl,w,c
 14195  00413A  0100               	movlb	0	; () banked
 14196  00413C  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 14197  00413E  0100               	movlb	0	; () banked
 14198  004140  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
 14199  004142  0100               	movlb	0	; () banked
 14200  004144  0382               	mulwf	___wmul@multiplicand& (0+255),b
 14201  004146  50F3               	movf	prodl,w,c
 14202  004148  0100               	movlb	0	; () banked
 14203  00414A  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 14204                           
 14205                           ; BSR set to: 0
 14206  00414C  C084  F080         	movff	___wmul@product,?___wmul
 14207  004150  C085  F081         	movff	___wmul@product+1,?___wmul+1
 14208  004154  0012               	return	
 14209  004156                     __end_of___wmul:
 14210                           	opt stack 0
 14211                           tblptru	equ	0xFF8
 14212                           tblptrh	equ	0xFF7
 14213                           tblptrl	equ	0xFF6
 14214                           tablat	equ	0xFF5
 14215                           prodh	equ	0xFF4
 14216                           prodl	equ	0xFF3
 14217                           intcon	equ	0xFF2
 14218                           intcon2	equ	0xFF1
 14219                           intcon3	equ	0xFF0
 14220                           indf0	equ	0xFEF
 14221                           postinc0	equ	0xFEE
 14222                           fsr0h	equ	0xFEA
 14223                           fsr0l	equ	0xFE9
 14224                           wreg	equ	0xFE8
 14225                           postdec1	equ	0xFE5
 14226                           fsr1l	equ	0xFE1
 14227                           indf2	equ	0xFDF
 14228                           postinc2	equ	0xFDE
 14229                           postdec2	equ	0xFDD
 14230                           fsr2h	equ	0xFDA
 14231                           fsr2l	equ	0xFD9
 14232                           status	equ	0xFD8
 14233                           
 14234 ;; *************** function ___lwmod *****************
 14235 ;; Defined at:
 14236 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 14237 ;; Parameters:    Size  Location     Type
 14238 ;;  dividend        2    7[BANK0 ] unsigned int 
 14239 ;;  divisor         2    9[BANK0 ] unsigned int 
 14240 ;; Auto vars:     Size  Location     Type
 14241 ;;  counter         1   11[BANK0 ] unsigned char 
 14242 ;; Return value:  Size  Location     Type
 14243 ;;                  2    7[BANK0 ] unsigned int 
 14244 ;; Registers used:
 14245 ;;		wreg, status,2, status,0
 14246 ;; Tracked objects:
 14247 ;;		On entry : 0/0
 14248 ;;		On exit  : 0/0
 14249 ;;		Unchanged: 0/0
 14250 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14251 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14252 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14253 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14254 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14255 ;;Total ram usage:        5 bytes
 14256 ;; Hardware stack levels used:    1
 14257 ;; Hardware stack levels required when called:    7
 14258 ;; This function calls:
 14259 ;;		Nothing
 14260 ;; This function is called by:
 14261 ;;		_printf
 14262 ;; This function uses a non-reentrant model
 14263 ;;
 14264                           
 14265                           	psect	text51
 14266  003C42                     __ptext51:
 14267                           	opt stack 0
 14268  003C42                     ___lwmod:
 14269                           	opt stack 19
 14270                           
 14271                           ; BSR set to: 0
 14272                           ;incstack = 0
 14273  003C42  0100               	movlb	0	; () banked
 14274  003C44  5189               	movf	___lwmod@divisor& (0+255),w,b
 14275  003C46  0100               	movlb	0	; () banked
 14276  003C48  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 14277  003C4A  B4D8               	btfsc	status,2,c
 14278  003C4C  D026               	goto	l1691
 14279                           
 14280                           ; BSR set to: 0
 14281  003C4E  0E01               	movlw	1
 14282  003C50  0100               	movlb	0	; () banked
 14283  003C52  6F8B               	movwf	___lwmod@counter& (0+255),b
 14284  003C54  D006               	goto	l5226
 14285  003C56                     l5224:
 14286                           
 14287                           ; BSR set to: 0
 14288  003C56  0100               	movlb	0	; () banked
 14289  003C58  90D8               	bcf	status,0,c
 14290  003C5A  3789               	rlcf	___lwmod@divisor& (0+255),f,b
 14291  003C5C  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 14292  003C5E  0100               	movlb	0	; () banked
 14293  003C60  2B8B               	incf	___lwmod@counter& (0+255),f,b
 14294  003C62                     l5226:
 14295                           
 14296                           ; BSR set to: 0
 14297  003C62  0100               	movlb	0	; () banked
 14298  003C64  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 14299  003C66  D7F7               	goto	l5224
 14300  003C68                     l5228:
 14301                           
 14302                           ; BSR set to: 0
 14303  003C68  0100               	movlb	0	; () banked
 14304  003C6A  5189               	movf	___lwmod@divisor& (0+255),w,b
 14305  003C6C  0100               	movlb	0	; () banked
 14306  003C6E  5D87               	subwf	___lwmod@dividend& (0+255),w,b
 14307  003C70  0100               	movlb	0	; () banked
 14308  003C72  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 14309  003C74  0100               	movlb	0	; () banked
 14310  003C76  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 14311  003C78  A0D8               	btfss	status,0,c
 14312  003C7A  D008               	goto	l5232
 14313                           
 14314                           ; BSR set to: 0
 14315  003C7C  0100               	movlb	0	; () banked
 14316  003C7E  5189               	movf	___lwmod@divisor& (0+255),w,b
 14317  003C80  0100               	movlb	0	; () banked
 14318  003C82  5F87               	subwf	___lwmod@dividend& (0+255),f,b
 14319  003C84  0100               	movlb	0	; () banked
 14320  003C86  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 14321  003C88  0100               	movlb	0	; () banked
 14322  003C8A  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 14323  003C8C                     l5232:
 14324                           
 14325                           ; BSR set to: 0
 14326  003C8C  0100               	movlb	0	; () banked
 14327  003C8E  90D8               	bcf	status,0,c
 14328  003C90  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 14329  003C92  3389               	rrcf	___lwmod@divisor& (0+255),f,b
 14330                           
 14331                           ; BSR set to: 0
 14332  003C94  0100               	movlb	0	; () banked
 14333  003C96  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
 14334  003C98  D7E7               	goto	l5228
 14335  003C9A                     l1691:
 14336                           
 14337                           ; BSR set to: 0
 14338  003C9A  C087  F087         	movff	___lwmod@dividend,?___lwmod
 14339  003C9E  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
 14340                           
 14341                           ; BSR set to: 0
 14342  003CA2  0012               	return		;funcret
 14343  003CA4                     __end_of___lwmod:
 14344                           	opt stack 0
 14345                           tblptru	equ	0xFF8
 14346                           tblptrh	equ	0xFF7
 14347                           tblptrl	equ	0xFF6
 14348                           tablat	equ	0xFF5
 14349                           prodh	equ	0xFF4
 14350                           prodl	equ	0xFF3
 14351                           intcon	equ	0xFF2
 14352                           intcon2	equ	0xFF1
 14353                           intcon3	equ	0xFF0
 14354                           indf0	equ	0xFEF
 14355                           postinc0	equ	0xFEE
 14356                           fsr0h	equ	0xFEA
 14357                           fsr0l	equ	0xFE9
 14358                           wreg	equ	0xFE8
 14359                           postdec1	equ	0xFE5
 14360                           fsr1l	equ	0xFE1
 14361                           indf2	equ	0xFDF
 14362                           postinc2	equ	0xFDE
 14363                           postdec2	equ	0xFDD
 14364                           fsr2h	equ	0xFDA
 14365                           fsr2l	equ	0xFD9
 14366                           status	equ	0xFD8
 14367                           
 14368 ;; *************** function ___lwdiv *****************
 14369 ;; Defined at:
 14370 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 14371 ;; Parameters:    Size  Location     Type
 14372 ;;  dividend        2    0[BANK0 ] unsigned int 
 14373 ;;  divisor         2    2[BANK0 ] unsigned int 
 14374 ;; Auto vars:     Size  Location     Type
 14375 ;;  quotient        2    4[BANK0 ] unsigned int 
 14376 ;;  counter         1    6[BANK0 ] unsigned char 
 14377 ;; Return value:  Size  Location     Type
 14378 ;;                  2    0[BANK0 ] unsigned int 
 14379 ;; Registers used:
 14380 ;;		wreg, status,2, status,0
 14381 ;; Tracked objects:
 14382 ;;		On entry : 0/0
 14383 ;;		On exit  : 0/0
 14384 ;;		Unchanged: 0/0
 14385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14386 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14387 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14388 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14389 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14390 ;;Total ram usage:        7 bytes
 14391 ;; Hardware stack levels used:    1
 14392 ;; Hardware stack levels required when called:    7
 14393 ;; This function calls:
 14394 ;;		Nothing
 14395 ;; This function is called by:
 14396 ;;		_printf
 14397 ;; This function uses a non-reentrant model
 14398 ;;
 14399                           
 14400                           	psect	text52
 14401  003A10                     __ptext52:
 14402                           	opt stack 0
 14403  003A10                     ___lwdiv:
 14404                           	opt stack 19
 14405                           
 14406                           ; BSR set to: 0
 14407                           ;incstack = 0
 14408  003A10  0E00               	movlw	0
 14409  003A12  0100               	movlb	0	; () banked
 14410  003A14  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
 14411  003A16  0E00               	movlw	0
 14412  003A18  6F84               	movwf	___lwdiv@quotient& (0+255),b
 14413                           
 14414                           ; BSR set to: 0
 14415  003A1A  0100               	movlb	0	; () banked
 14416  003A1C  5182               	movf	___lwdiv@divisor& (0+255),w,b
 14417  003A1E  0100               	movlb	0	; () banked
 14418  003A20  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 14419  003A22  B4D8               	btfsc	status,2,c
 14420  003A24  D02C               	goto	l1681
 14421                           
 14422                           ; BSR set to: 0
 14423  003A26  0E01               	movlw	1
 14424  003A28  0100               	movlb	0	; () banked
 14425  003A2A  6F86               	movwf	___lwdiv@counter& (0+255),b
 14426  003A2C  D006               	goto	l5206
 14427  003A2E                     l5204:
 14428                           
 14429                           ; BSR set to: 0
 14430  003A2E  0100               	movlb	0	; () banked
 14431  003A30  90D8               	bcf	status,0,c
 14432  003A32  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
 14433  003A34  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 14434  003A36  0100               	movlb	0	; () banked
 14435  003A38  2B86               	incf	___lwdiv@counter& (0+255),f,b
 14436  003A3A                     l5206:
 14437                           
 14438                           ; BSR set to: 0
 14439  003A3A  0100               	movlb	0	; () banked
 14440  003A3C  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 14441  003A3E  D7F7               	goto	l5204
 14442  003A40                     l5208:
 14443                           
 14444                           ; BSR set to: 0
 14445  003A40  0100               	movlb	0	; () banked
 14446  003A42  90D8               	bcf	status,0,c
 14447  003A44  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
 14448  003A46  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 14449                           
 14450                           ; BSR set to: 0
 14451  003A48  0100               	movlb	0	; () banked
 14452  003A4A  5182               	movf	___lwdiv@divisor& (0+255),w,b
 14453  003A4C  0100               	movlb	0	; () banked
 14454  003A4E  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
 14455  003A50  0100               	movlb	0	; () banked
 14456  003A52  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 14457  003A54  0100               	movlb	0	; () banked
 14458  003A56  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 14459  003A58  A0D8               	btfss	status,0,c
 14460  003A5A  D00A               	goto	l5216
 14461                           
 14462                           ; BSR set to: 0
 14463  003A5C  0100               	movlb	0	; () banked
 14464  003A5E  5182               	movf	___lwdiv@divisor& (0+255),w,b
 14465  003A60  0100               	movlb	0	; () banked
 14466  003A62  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
 14467  003A64  0100               	movlb	0	; () banked
 14468  003A66  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 14469  003A68  0100               	movlb	0	; () banked
 14470  003A6A  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 14471                           
 14472                           ; BSR set to: 0
 14473  003A6C  0100               	movlb	0	; () banked
 14474  003A6E  8184               	bsf	___lwdiv@quotient& (0+255),0,b
 14475  003A70                     l5216:
 14476                           
 14477                           ; BSR set to: 0
 14478  003A70  0100               	movlb	0	; () banked
 14479  003A72  90D8               	bcf	status,0,c
 14480  003A74  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 14481  003A76  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
 14482                           
 14483                           ; BSR set to: 0
 14484  003A78  0100               	movlb	0	; () banked
 14485  003A7A  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
 14486  003A7C  D7E1               	goto	l5208
 14487  003A7E                     l1681:
 14488                           
 14489                           ; BSR set to: 0
 14490  003A7E  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
 14491  003A82  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
 14492                           
 14493                           ; BSR set to: 0
 14494  003A86  0012               	return		;funcret
 14495  003A88                     __end_of___lwdiv:
 14496                           	opt stack 0
 14497                           tblptru	equ	0xFF8
 14498                           tblptrh	equ	0xFF7
 14499                           tblptrl	equ	0xFF6
 14500                           tablat	equ	0xFF5
 14501                           prodh	equ	0xFF4
 14502                           prodl	equ	0xFF3
 14503                           intcon	equ	0xFF2
 14504                           intcon2	equ	0xFF1
 14505                           intcon3	equ	0xFF0
 14506                           indf0	equ	0xFEF
 14507                           postinc0	equ	0xFEE
 14508                           fsr0h	equ	0xFEA
 14509                           fsr0l	equ	0xFE9
 14510                           wreg	equ	0xFE8
 14511                           postdec1	equ	0xFE5
 14512                           fsr1l	equ	0xFE1
 14513                           indf2	equ	0xFDF
 14514                           postinc2	equ	0xFDE
 14515                           postdec2	equ	0xFDD
 14516                           fsr2h	equ	0xFDA
 14517                           fsr2l	equ	0xFD9
 14518                           status	equ	0xFD8
 14519                           
 14520 ;; *************** function _lcdInst *****************
 14521 ;; Defined at:
 14522 ;;		line 15 in file "lcd.c"
 14523 ;; Parameters:    Size  Location     Type
 14524 ;;  data            1    wreg     unsigned char 
 14525 ;; Auto vars:     Size  Location     Type
 14526 ;;  data            1    2[BANK0 ] unsigned char 
 14527 ;; Return value:  Size  Location     Type
 14528 ;;                  1    wreg      void 
 14529 ;; Registers used:
 14530 ;;		wreg, status,2, status,0, cstack
 14531 ;; Tracked objects:
 14532 ;;		On entry : 0/0
 14533 ;;		On exit  : 0/0
 14534 ;;		Unchanged: 0/0
 14535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14536 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14537 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14538 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14539 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14540 ;;Total ram usage:        1 bytes
 14541 ;; Hardware stack levels used:    1
 14542 ;; Hardware stack levels required when called:    8
 14543 ;; This function calls:
 14544 ;;		_lcdNibble
 14545 ;; This function is called by:
 14546 ;;		_UI
 14547 ;;		_change_state_to_menu_start
 14548 ;;		_change_state_to_menu_12
 14549 ;;		_change_state_to_menu_22
 14550 ;;		_initLCD
 14551 ;;		_printRTC
 14552 ;;		_Loading
 14553 ;;		_EEPROM_write
 14554 ;;		_Test
 14555 ;;		_algorithmTest
 14556 ;;		_sensorTest
 14557 ;;		_actuatorTest
 14558 ;;		_BothServos
 14559 ;;		_PortTestA5
 14560 ;;		_SolenoidTestA5
 14561 ;;		_ToggleTestA5
 14562 ;; This function uses a non-reentrant model
 14563 ;;
 14564                           
 14565                           	psect	text53
 14566  0045E0                     __ptext53:
 14567                           	opt stack 0
 14568  0045E0                     _lcdInst:
 14569                           	opt stack 20
 14570                           
 14571                           ; BSR set to: 0
 14572                           ;incstack = 0
 14573                           ;lcdInst@data stored from wreg
 14574  0045E0  0100               	movlb	0	; () banked
 14575  0045E2  6F82               	movwf	lcdInst@data& (0+255),b
 14576                           
 14577                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 14578  0045E4  948C               	bcf	3980,2,c	;volatile
 14579                           
 14580                           ;lcd.c: 17: lcdNibble(data);
 14581  0045E6  0100               	movlb	0	; () banked
 14582  0045E8  5182               	movf	lcdInst@data& (0+255),w,b
 14583  0045EA  ECED  F01D         	call	_lcdNibble
 14584  0045EE  0012               	return		;funcret
 14585  0045F0                     __end_of_lcdInst:
 14586                           	opt stack 0
 14587                           tblptru	equ	0xFF8
 14588                           tblptrh	equ	0xFF7
 14589                           tblptrl	equ	0xFF6
 14590                           tablat	equ	0xFF5
 14591                           prodh	equ	0xFF4
 14592                           prodl	equ	0xFF3
 14593                           intcon	equ	0xFF2
 14594                           intcon2	equ	0xFF1
 14595                           intcon3	equ	0xFF0
 14596                           indf0	equ	0xFEF
 14597                           postinc0	equ	0xFEE
 14598                           fsr0h	equ	0xFEA
 14599                           fsr0l	equ	0xFE9
 14600                           wreg	equ	0xFE8
 14601                           postdec1	equ	0xFE5
 14602                           fsr1l	equ	0xFE1
 14603                           indf2	equ	0xFDF
 14604                           postinc2	equ	0xFDE
 14605                           postdec2	equ	0xFDD
 14606                           fsr2h	equ	0xFDA
 14607                           fsr2l	equ	0xFD9
 14608                           status	equ	0xFD8
 14609                           
 14610 ;; *************** function _lcdNibble *****************
 14611 ;; Defined at:
 14612 ;;		line 25 in file "lcd.c"
 14613 ;; Parameters:    Size  Location     Type
 14614 ;;  data            1    wreg     unsigned char 
 14615 ;; Auto vars:     Size  Location     Type
 14616 ;;  data            1    1[BANK0 ] unsigned char 
 14617 ;;  temp            1    0[BANK0 ] unsigned char 
 14618 ;; Return value:  Size  Location     Type
 14619 ;;                  1    wreg      void 
 14620 ;; Registers used:
 14621 ;;		wreg, status,2, status,0
 14622 ;; Tracked objects:
 14623 ;;		On entry : 0/0
 14624 ;;		On exit  : 0/0
 14625 ;;		Unchanged: 0/0
 14626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14627 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14628 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14629 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14630 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14631 ;;Total ram usage:        2 bytes
 14632 ;; Hardware stack levels used:    1
 14633 ;; Hardware stack levels required when called:    7
 14634 ;; This function calls:
 14635 ;;		Nothing
 14636 ;; This function is called by:
 14637 ;;		_lcdInst
 14638 ;;		_putch
 14639 ;; This function uses a non-reentrant model
 14640 ;;
 14641                           
 14642                           	psect	text54
 14643  003BDA                     __ptext54:
 14644                           	opt stack 0
 14645  003BDA                     _lcdNibble:
 14646                           	opt stack 20
 14647                           
 14648                           ;incstack = 0
 14649                           ;lcdNibble@data stored from wreg
 14650  003BDA  0100               	movlb	0	; () banked
 14651  003BDC  6F81               	movwf	lcdNibble@data& (0+255),b
 14652                           
 14653                           ;lcd.c: 27: char temp = data & 0xF0;
 14654  003BDE  0100               	movlb	0	; () banked
 14655  003BE0  5181               	movf	lcdNibble@data& (0+255),w,b
 14656  003BE2  0BF0               	andlw	240
 14657  003BE4  0100               	movlb	0	; () banked
 14658  003BE6  6F80               	movwf	lcdNibble@temp& (0+255),b
 14659                           
 14660                           ;lcd.c: 28: LATD = LATD & 0x0F;
 14661  003BE8  508C               	movf	3980,w,c	;volatile
 14662  003BEA  0B0F               	andlw	15
 14663  003BEC  6E8C               	movwf	3980,c	;volatile
 14664                           
 14665                           ;lcd.c: 29: LATD = temp | LATD;
 14666  003BEE  0100               	movlb	0	; () banked
 14667  003BF0  5180               	movf	lcdNibble@temp& (0+255),w,b
 14668  003BF2  108C               	iorwf	3980,w,c	;volatile
 14669  003BF4  6E8C               	movwf	3980,c	;volatile
 14670                           
 14671                           ; BSR set to: 0
 14672                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 14673  003BF6  868C               	bsf	3980,3,c	;volatile
 14674                           
 14675                           ; BSR set to: 0
 14676                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 14677  003BF8  0E42               	movlw	66
 14678  003BFA                     u7927:
 14679  003BFA  2EE8               	decfsz	wreg,f,c
 14680  003BFC  D7FE               	bra	u7927
 14681  003BFE  D000               	nop2	
 14682                           
 14683                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 14684  003C00  968C               	bcf	3980,3,c	;volatile
 14685                           
 14686                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 14687  003C02  0E42               	movlw	66
 14688  003C04                     u7937:
 14689  003C04  2EE8               	decfsz	wreg,f,c
 14690  003C06  D7FE               	bra	u7937
 14691  003C08  D000               	nop2	
 14692                           
 14693                           ;lcd.c: 36: data = data << 4;
 14694  003C0A  0100               	movlb	0	; () banked
 14695  003C0C  3981               	swapf	lcdNibble@data& (0+255),w,b
 14696  003C0E  0BF0               	andlw	240
 14697  003C10  0100               	movlb	0	; () banked
 14698  003C12  6F81               	movwf	lcdNibble@data& (0+255),b
 14699                           
 14700                           ;lcd.c: 38: temp = data & 0xF0;
 14701  003C14  0100               	movlb	0	; () banked
 14702  003C16  5181               	movf	lcdNibble@data& (0+255),w,b
 14703  003C18  0BF0               	andlw	240
 14704  003C1A  0100               	movlb	0	; () banked
 14705  003C1C  6F80               	movwf	lcdNibble@temp& (0+255),b
 14706                           
 14707                           ;lcd.c: 39: LATD = LATD & 0x0F;
 14708  003C1E  508C               	movf	3980,w,c	;volatile
 14709  003C20  0B0F               	andlw	15
 14710  003C22  6E8C               	movwf	3980,c	;volatile
 14711                           
 14712                           ;lcd.c: 40: LATD = temp | LATD;
 14713  003C24  0100               	movlb	0	; () banked
 14714  003C26  5180               	movf	lcdNibble@temp& (0+255),w,b
 14715  003C28  108C               	iorwf	3980,w,c	;volatile
 14716  003C2A  6E8C               	movwf	3980,c	;volatile
 14717                           
 14718                           ; BSR set to: 0
 14719                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 14720  003C2C  868C               	bsf	3980,3,c	;volatile
 14721                           
 14722                           ; BSR set to: 0
 14723                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 14724  003C2E  0E42               	movlw	66
 14725  003C30                     u7947:
 14726  003C30  2EE8               	decfsz	wreg,f,c
 14727  003C32  D7FE               	bra	u7947
 14728  003C34  D000               	nop2	
 14729                           
 14730                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 14731  003C36  968C               	bcf	3980,3,c	;volatile
 14732                           
 14733                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 14734  003C38  0E42               	movlw	66
 14735  003C3A                     u7957:
 14736  003C3A  2EE8               	decfsz	wreg,f,c
 14737  003C3C  D7FE               	bra	u7957
 14738  003C3E  D000               	nop2	
 14739  003C40  0012               	return		;funcret
 14740  003C42                     __end_of_lcdNibble:
 14741                           	opt stack 0
 14742                           tblptru	equ	0xFF8
 14743                           tblptrh	equ	0xFF7
 14744                           tblptrl	equ	0xFF6
 14745                           tablat	equ	0xFF5
 14746                           prodh	equ	0xFF4
 14747                           prodl	equ	0xFF3
 14748                           intcon	equ	0xFF2
 14749                           intcon2	equ	0xFF1
 14750                           intcon3	equ	0xFF0
 14751                           indf0	equ	0xFEF
 14752                           postinc0	equ	0xFEE
 14753                           fsr0h	equ	0xFEA
 14754                           fsr0l	equ	0xFE9
 14755                           wreg	equ	0xFE8
 14756                           postdec1	equ	0xFE5
 14757                           fsr1l	equ	0xFE1
 14758                           indf2	equ	0xFDF
 14759                           postinc2	equ	0xFDE
 14760                           postdec2	equ	0xFDD
 14761                           fsr2h	equ	0xFDA
 14762                           fsr2l	equ	0xFD9
 14763                           status	equ	0xFD8
 14764                           
 14765 ;; *************** function _initServos *****************
 14766 ;; Defined at:
 14767 ;;		line 254 in file "sort.c"
 14768 ;; Parameters:    Size  Location     Type
 14769 ;;		None
 14770 ;; Auto vars:     Size  Location     Type
 14771 ;;		None
 14772 ;; Return value:  Size  Location     Type
 14773 ;;                  1    wreg      void 
 14774 ;; Registers used:
 14775 ;;		wreg, status,2, status,0, cstack
 14776 ;; Tracked objects:
 14777 ;;		On entry : 0/0
 14778 ;;		On exit  : 0/0
 14779 ;;		Unchanged: 0/0
 14780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14781 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14782 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14783 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14784 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14785 ;;Total ram usage:        1 bytes
 14786 ;; Hardware stack levels used:    1
 14787 ;; Hardware stack levels required when called:    8
 14788 ;; This function calls:
 14789 ;;		_updateServoPosition
 14790 ;; This function is called by:
 14791 ;;		_Loading
 14792 ;;		_BothServos
 14793 ;; This function uses a non-reentrant model
 14794 ;;
 14795                           
 14796                           	psect	text55
 14797  003DBC                     __ptext55:
 14798                           	opt stack 0
 14799  003DBC                     _initServos:
 14800                           	opt stack 20
 14801                           
 14802                           ;sort.c: 255: updateServoPosition(1200, 1);
 14803                           
 14804                           ;incstack = 0
 14805  003DBC  0E04               	movlw	4
 14806  003DBE  0100               	movlb	0	; () banked
 14807  003DC0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14808  003DC2  0EB0               	movlw	176
 14809  003DC4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14810  003DC6  0E00               	movlw	0
 14811  003DC8  0100               	movlb	0	; () banked
 14812  003DCA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14813  003DCC  0E01               	movlw	1
 14814  003DCE  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14815  003DD0  EC44  F01D         	call	_updateServoPosition	;wreg free
 14816                           
 14817                           ;sort.c: 256: updateServoPosition(1190, 3);
 14818  003DD4  0E04               	movlw	4
 14819  003DD6  0100               	movlb	0	; () banked
 14820  003DD8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14821  003DDA  0EA6               	movlw	166
 14822  003DDC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14823  003DDE  0E00               	movlw	0
 14824  003DE0  0100               	movlb	0	; () banked
 14825  003DE2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14826  003DE4  0E03               	movlw	3
 14827  003DE6  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14828  003DE8  EC44  F01D         	call	_updateServoPosition	;wreg free
 14829                           
 14830                           ;sort.c: 257: TMR1ON = 1;
 14831  003DEC  80CD               	bsf	4045,0,c	;volatile
 14832                           
 14833                           ;sort.c: 258: was_low_1 = 0;
 14834  003DEE  0E00               	movlw	0
 14835  003DF0  6E7A               	movwf	_was_low_1+1,c	;volatile
 14836  003DF2  0E00               	movlw	0
 14837  003DF4  6E79               	movwf	_was_low_1,c	;volatile
 14838                           
 14839                           ;sort.c: 259: _delay((unsigned long)((5)*(32000000/4000.0)));
 14840  003DF6  0E34               	movlw	52
 14841  003DF8  0100               	movlb	0	; () banked
 14842  003DFA  6F88               	movwf	??_initServos& (0+255),b
 14843  003DFC  0EF1               	movlw	241
 14844  003DFE                     u7967:
 14845  003DFE  2EE8               	decfsz	wreg,f,c
 14846  003E00  D7FE               	bra	u7967
 14847  003E02  2F88               	decfsz	??_initServos& (0+255),f,b
 14848  003E04  D7FC               	bra	u7967
 14849  003E06  D000               	nop2	
 14850                           
 14851                           ;sort.c: 260: TMR3ON = 1;
 14852  003E08  80B1               	bsf	4017,0,c	;volatile
 14853                           
 14854                           ;sort.c: 261: was_low_3 = 0;
 14855  003E0A  0E00               	movlw	0
 14856  003E0C  6E7C               	movwf	_was_low_3+1,c	;volatile
 14857  003E0E  0E00               	movlw	0
 14858  003E10  6E7B               	movwf	_was_low_3,c	;volatile
 14859                           
 14860                           ;sort.c: 262: LATCbits.LATC0 = 0;
 14861  003E12  908B               	bcf	3979,0,c	;volatile
 14862  003E14  0012               	return		;funcret
 14863  003E16                     __end_of_initServos:
 14864                           	opt stack 0
 14865                           tblptru	equ	0xFF8
 14866                           tblptrh	equ	0xFF7
 14867                           tblptrl	equ	0xFF6
 14868                           tablat	equ	0xFF5
 14869                           prodh	equ	0xFF4
 14870                           prodl	equ	0xFF3
 14871                           intcon	equ	0xFF2
 14872                           intcon2	equ	0xFF1
 14873                           intcon3	equ	0xFF0
 14874                           indf0	equ	0xFEF
 14875                           postinc0	equ	0xFEE
 14876                           fsr0h	equ	0xFEA
 14877                           fsr0l	equ	0xFE9
 14878                           wreg	equ	0xFE8
 14879                           postdec1	equ	0xFE5
 14880                           fsr1l	equ	0xFE1
 14881                           indf2	equ	0xFDF
 14882                           postinc2	equ	0xFDE
 14883                           postdec2	equ	0xFDD
 14884                           fsr2h	equ	0xFDA
 14885                           fsr2l	equ	0xFD9
 14886                           status	equ	0xFD8
 14887                           
 14888 ;; *************** function _updateServoPosition *****************
 14889 ;; Defined at:
 14890 ;;		line 304 in file "sort.c"
 14891 ;; Parameters:    Size  Location     Type
 14892 ;;  time_us         2    0[BANK0 ] int 
 14893 ;;  timer           2    2[BANK0 ] int 
 14894 ;; Auto vars:     Size  Location     Type
 14895 ;;  my_time         2    6[BANK0 ] unsigned int 
 14896 ;; Return value:  Size  Location     Type
 14897 ;;                  1    wreg      void 
 14898 ;; Registers used:
 14899 ;;		wreg, status,2, status,0
 14900 ;; Tracked objects:
 14901 ;;		On entry : 0/0
 14902 ;;		On exit  : 0/0
 14903 ;;		Unchanged: 0/0
 14904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14905 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14906 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14907 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14908 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14909 ;;Total ram usage:        8 bytes
 14910 ;; Hardware stack levels used:    1
 14911 ;; Hardware stack levels required when called:    7
 14912 ;; This function calls:
 14913 ;;		Nothing
 14914 ;; This function is called by:
 14915 ;;		_Distribution
 14916 ;;		_initServos
 14917 ;;		_actuatorTest
 14918 ;;		_BothServos
 14919 ;; This function uses a non-reentrant model
 14920 ;;
 14921                           
 14922                           	psect	text56
 14923  003A88                     __ptext56:
 14924                           	opt stack 0
 14925  003A88                     _updateServoPosition:
 14926                           	opt stack 20
 14927                           
 14928                           ;sort.c: 305: unsigned int my_time = 65535 - time_us;
 14929                           
 14930                           ;incstack = 0
 14931  003A88  C080  F084         	movff	updateServoPosition@time_us,??_updateServoPosition
 14932  003A8C  C081  F085         	movff	updateServoPosition@time_us+1,??_updateServoPosition+1
 14933  003A90  0100               	movlb	0	; () banked
 14934  003A92  1F84               	comf	??_updateServoPosition& (0+255),f,b
 14935  003A94  1F85               	comf	(??_updateServoPosition+1)& (0+255),f,b
 14936  003A96  4B84               	infsnz	??_updateServoPosition& (0+255),f,b
 14937  003A98  2B85               	incf	(??_updateServoPosition+1)& (0+255),f,b
 14938  003A9A  0EFF               	movlw	255
 14939  003A9C  0100               	movlb	0	; () banked
 14940  003A9E  2584               	addwf	??_updateServoPosition& (0+255),w,b
 14941  003AA0  0100               	movlb	0	; () banked
 14942  003AA2  6F86               	movwf	updateServoPosition@my_time& (0+255),b
 14943  003AA4  0EFF               	movlw	255
 14944  003AA6  0100               	movlb	0	; () banked
 14945  003AA8  2185               	addwfc	(??_updateServoPosition+1)& (0+255),w,b
 14946  003AAA  0100               	movlb	0	; () banked
 14947  003AAC  6F87               	movwf	(updateServoPosition@my_time+1)& (0+255),b
 14948                           
 14949                           ;sort.c: 306: switch(timer){
 14950  003AAE  D015               	goto	l5506
 14951  003AB0                     l5504:
 14952                           
 14953                           ; BSR set to: 0
 14954                           ;sort.c: 308: servoTimes[0] = my_time >> 8;
 14955  003AB0  0100               	movlb	0	; () banked
 14956  003AB2  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 14957  003AB4  0101               	movlb	1	; () banked
 14958  003AB6  6F1C               	movwf	_servoTimes& (0+255),b
 14959  003AB8  6B1D               	clrf	(_servoTimes+1)& (0+255),b
 14960                           
 14961                           ;sort.c: 309: servoTimes[1] = my_time & 0xFF;
 14962  003ABA  0100               	movlb	0	; () banked
 14963  003ABC  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 14964  003ABE  0101               	movlb	1	; () banked
 14965  003AC0  6F1E               	movwf	(_servoTimes+2)& (0+255),b
 14966  003AC2  6B1F               	clrf	(_servoTimes+3)& (0+255),b
 14967  003AC4                     l785:
 14968                           
 14969                           ;sort.c: 311: servoTimes[2] = my_time >> 8;
 14970  003AC4  0100               	movlb	0	; () banked
 14971  003AC6  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 14972  003AC8  0101               	movlb	1	; () banked
 14973  003ACA  6F20               	movwf	(_servoTimes+4)& (0+255),b
 14974  003ACC  6B21               	clrf	(_servoTimes+5)& (0+255),b
 14975                           
 14976                           ;sort.c: 312: servoTimes[3] = my_time & 0xFF;
 14977  003ACE  0100               	movlb	0	; () banked
 14978  003AD0  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 14979  003AD2  0101               	movlb	1	; () banked
 14980  003AD4  6F22               	movwf	(_servoTimes+6)& (0+255),b
 14981  003AD6  6B23               	clrf	(_servoTimes+7)& (0+255),b
 14982                           
 14983                           ;sort.c: 313: }
 14984  003AD8  0012               	return	
 14985  003ADA                     l5506:
 14986  003ADA  C082  F084         	movff	updateServoPosition@timer,??_updateServoPosition
 14987  003ADE  C083  F085         	movff	updateServoPosition@timer+1,??_updateServoPosition+1
 14988                           
 14989                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14990                           ; Switch size 1, requested type "space"
 14991                           ; Number of cases is 1, Range of values is 0 to 0
 14992                           ; switch strategies available:
 14993                           ; Name         Instructions Cycles
 14994                           ; simple_byte            4     3 (average)
 14995                           ;	Chosen strategy is simple_byte
 14996  003AE2  0100               	movlb	0	; () banked
 14997  003AE4  5185               	movf	(??_updateServoPosition+1)& (0+255),w,b
 14998  003AE6  0A00               	xorlw	0	; case 0
 14999  003AE8  A4D8               	btfss	status,2,c
 15000  003AEA  0012               	return	
 15001                           
 15002                           ; BSR set to: 0
 15003                           ; Switch size 1, requested type "space"
 15004                           ; Number of cases is 2, Range of values is 1 to 3
 15005                           ; switch strategies available:
 15006                           ; Name         Instructions Cycles
 15007                           ; simple_byte            7     4 (average)
 15008                           ;	Chosen strategy is simple_byte
 15009  003AEC  0100               	movlb	0	; () banked
 15010  003AEE  5184               	movf	??_updateServoPosition& (0+255),w,b
 15011  003AF0  0A01               	xorlw	1	; case 1
 15012  003AF2  B4D8               	btfsc	status,2,c
 15013  003AF4  D7DD               	goto	l5504
 15014  003AF6  0A02               	xorlw	2	; case 3
 15015  003AF8  A4D8               	btfss	status,2,c
 15016  003AFA  0012               	return	
 15017  003AFC  D7E3               	goto	l785
 15018  003AFE                     __end_of_updateServoPosition:
 15019                           	opt stack 0
 15020                           tblptru	equ	0xFF8
 15021                           tblptrh	equ	0xFF7
 15022                           tblptrl	equ	0xFF6
 15023                           tablat	equ	0xFF5
 15024                           prodh	equ	0xFF4
 15025                           prodl	equ	0xFF3
 15026                           intcon	equ	0xFF2
 15027                           intcon2	equ	0xFF1
 15028                           intcon3	equ	0xFF0
 15029                           indf0	equ	0xFEF
 15030                           postinc0	equ	0xFEE
 15031                           fsr0h	equ	0xFEA
 15032                           fsr0l	equ	0xFE9
 15033                           wreg	equ	0xFE8
 15034                           postdec1	equ	0xFE5
 15035                           fsr1l	equ	0xFE1
 15036                           indf2	equ	0xFDF
 15037                           postinc2	equ	0xFDE
 15038                           postdec2	equ	0xFDD
 15039                           fsr2h	equ	0xFDA
 15040                           fsr2l	equ	0xFD9
 15041                           status	equ	0xFD8
 15042                           
 15043 ;; *************** function _handler *****************
 15044 ;; Defined at:
 15045 ;;		line 16 in file "interruptHandler.c"
 15046 ;; Parameters:    Size  Location     Type
 15047 ;;		None
 15048 ;; Auto vars:     Size  Location     Type
 15049 ;;		None
 15050 ;; Return value:  Size  Location     Type
 15051 ;;                  1    wreg      void 
 15052 ;; Registers used:
 15053 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15054 ;; Tracked objects:
 15055 ;;		On entry : 0/0
 15056 ;;		On exit  : 0/0
 15057 ;;		Unchanged: 0/0
 15058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15059 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15060 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15061 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15062 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15063 ;;Total ram usage:       16 bytes
 15064 ;; Hardware stack levels used:    1
 15065 ;; Hardware stack levels required when called:    6
 15066 ;; This function calls:
 15067 ;;		_printSortTimer
 15068 ;;		_updateMenu
 15069 ;; This function is called by:
 15070 ;;		Interrupt level 2
 15071 ;; This function uses a non-reentrant model
 15072 ;;
 15073                           
 15074                           	psect	intcode
 15075  000008                     __pintcode:
 15076                           	opt stack 0
 15077  000008                     _handler:
 15078                           	opt stack 18
 15079                           
 15080                           ;incstack = 0
 15081  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 15082  00000A  EDA5  F014         	call	int_func,f	;refresh shadow registers
 15083                           tblptru	equ	0xFF8
 15084                           tblptrh	equ	0xFF7
 15085                           tblptrl	equ	0xFF6
 15086                           tablat	equ	0xFF5
 15087                           prodh	equ	0xFF4
 15088                           prodl	equ	0xFF3
 15089                           intcon	equ	0xFF2
 15090                           intcon2	equ	0xFF1
 15091                           intcon3	equ	0xFF0
 15092                           indf0	equ	0xFEF
 15093                           postinc0	equ	0xFEE
 15094                           fsr0h	equ	0xFEA
 15095                           fsr0l	equ	0xFE9
 15096                           wreg	equ	0xFE8
 15097                           postdec1	equ	0xFE5
 15098                           fsr1l	equ	0xFE1
 15099                           indf2	equ	0xFDF
 15100                           postinc2	equ	0xFDE
 15101                           postdec2	equ	0xFDD
 15102                           fsr2h	equ	0xFDA
 15103                           fsr2l	equ	0xFD9
 15104                           status	equ	0xFD8
 15105                           
 15106                           	psect	intcode_body
 15107  00294A                     __pintcode_body:
 15108                           	opt stack 18
 15109  00294A                     int_func:
 15110                           	opt stack 18
 15111  00294A  0006               	pop		; remove dummy address from shadow register refresh
 15112  00294C  CFFA F04D          	movff	pclath,??_handler+2
 15113  002950  CFFB F04E          	movff	pclatu,??_handler+3
 15114  002954  CFE9 F04F          	movff	fsr0l,??_handler+4
 15115  002958  CFEA F050          	movff	fsr0h,??_handler+5
 15116  00295C  CFE1 F051          	movff	fsr1l,??_handler+6
 15117  002960  CFE2 F052          	movff	fsr1h,??_handler+7
 15118  002964  CFD9 F053          	movff	fsr2l,??_handler+8
 15119  002968  CFDA F054          	movff	fsr2h,??_handler+9
 15120  00296C  CFF3 F055          	movff	prodl,??_handler+10
 15121  002970  CFF4 F056          	movff	prodh,??_handler+11
 15122  002974  CFF6 F057          	movff	tblptrl,??_handler+12
 15123  002978  CFF7 F058          	movff	tblptrh,??_handler+13
 15124  00297C  CFF8 F059          	movff	tblptru,??_handler+14
 15125  002980  CFF5 F05A          	movff	tablat,??_handler+15
 15126                           
 15127                           ;interruptHandler.c: 18: if(INT1IF){
 15128  002984  A0F0               	btfss	intcon3,0,c	;volatile
 15129  002986  D020               	goto	i2l7982
 15130                           
 15131                           ;interruptHandler.c: 19: INT1IF = 0;
 15132  002988  90F0               	bcf	intcon3,0,c	;volatile
 15133                           
 15134                           ;interruptHandler.c: 20: if(machine_state == UI_state) {
 15135  00298A  0100               	movlb	0	; () banked
 15136  00298C  51FC               	movf	_machine_state& (0+255),w,b
 15137  00298E  A4D8               	btfss	status,2,c
 15138  002990  D01B               	goto	i2l7982
 15139                           
 15140                           ; BSR set to: 0
 15141                           ;interruptHandler.c: 21: input = keys[(PORTB & 0xF0) >> 4];
 15142  002992  3881               	swapf	3969,w,c	;volatile
 15143  002994  0B0F               	andlw	15
 15144  002996  0B0F               	andlw	15
 15145  002998  6E4B               	movwf	??_handler& (0+255),c
 15146  00299A  6A4C               	clrf	(??_handler+1)& (0+255),c
 15147  00299C  0E27               	movlw	low _keys
 15148  00299E  244B               	addwf	??_handler,w,c
 15149  0029A0  6EF6               	movwf	tblptrl,c
 15150  0029A2  0EFB               	movlw	high _keys
 15151  0029A4  204C               	addwfc	??_handler+1,w,c
 15152  0029A6  6EF7               	movwf	tblptrh,c
 15153  0029A8                     	if	1	;There are 3 active tblptr bytes
 15154  0029A8  6AF8               	clrf	tblptru,c
 15155  0029AA  0E00               	movlw	low (__mediumconst shr (0+16))
 15156  0029AC  22F8               	addwfc	tblptru,f,c
 15157  0029AE                     	endif
 15158  0029AE  0008               	tblrd		*
 15159  0029B0  CFF5 F07D          	movff	tablat,_input	;volatile
 15160                           
 15161                           ; BSR set to: 0
 15162                           ;interruptHandler.c: 23: if(input == '*'){
 15163  0029B4  0E2A               	movlw	42
 15164  0029B6  187D               	xorwf	_input,w,c	;volatile
 15165  0029B8  A4D8               	btfss	status,2,c
 15166  0029BA  D004               	goto	i2l7980
 15167                           
 15168                           ; BSR set to: 0
 15169                           ;interruptHandler.c: 24: machine_state = Testing_state;
 15170  0029BC  0E03               	movlw	3
 15171  0029BE  0100               	movlb	0	; () banked
 15172  0029C0  6FFC               	movwf	_machine_state& (0+255),b
 15173                           
 15174                           ;interruptHandler.c: 25: }
 15175  0029C2  D002               	goto	i2l7982
 15176  0029C4                     i2l7980:
 15177                           
 15178                           ; BSR set to: 0
 15179                           ;interruptHandler.c: 26: else{
 15180                           ;interruptHandler.c: 27: updateMenu();
 15181  0029C4  EC4C  F00F         	call	_updateMenu	;wreg free
 15182  0029C8                     i2l7982:
 15183                           
 15184                           ;interruptHandler.c: 28: }
 15185                           ;interruptHandler.c: 29: }
 15186                           ;interruptHandler.c: 30: }
 15187                           ;interruptHandler.c: 33: if(TMR0IF){
 15188  0029C8  A4F2               	btfss	intcon,2,c	;volatile
 15189  0029CA  D00C               	goto	i2l7996
 15190                           
 15191                           ;interruptHandler.c: 34: TMR0IF = 0;
 15192  0029CC  94F2               	bcf	intcon,2,c	;volatile
 15193                           
 15194                           ;interruptHandler.c: 35: if(machine_state == Sorting_state){
 15195  0029CE  0100               	movlb	0	; () banked
 15196  0029D0  05FC               	decf	_machine_state& (0+255),w,b
 15197  0029D2  A4D8               	btfss	status,2,c
 15198  0029D4  D007               	goto	i2l7996
 15199                           
 15200                           ; BSR set to: 0
 15201                           ;interruptHandler.c: 36: printSortTimer();
 15202  0029D6  ECC7  F011         	call	_printSortTimer	;wreg free
 15203                           
 15204                           ;interruptHandler.c: 38: TMR0H = 0b10000101;
 15205  0029DA  0E85               	movlw	133
 15206  0029DC  6ED7               	movwf	4055,c	;volatile
 15207                           
 15208                           ;interruptHandler.c: 39: TMR0L = 0b11101110;
 15209  0029DE  0EEE               	movlw	238
 15210  0029E0  6ED6               	movwf	4054,c	;volatile
 15211                           
 15212                           ;interruptHandler.c: 40: TMR0ON = 1;
 15213  0029E2  8ED5               	bsf	4053,7,c	;volatile
 15214  0029E4                     i2l7996:
 15215                           
 15216                           ;interruptHandler.c: 41: }
 15217                           ;interruptHandler.c: 42: }
 15218                           ;interruptHandler.c: 45: if(TMR1IF){
 15219  0029E4  A09E               	btfss	3998,0,c	;volatile
 15220  0029E6  D024               	goto	i2l8020
 15221                           
 15222                           ;interruptHandler.c: 46: TMR1IF = 0;
 15223  0029E8  909E               	bcf	3998,0,c	;volatile
 15224                           
 15225                           ;interruptHandler.c: 47: TMR1ON = 0;
 15226  0029EA  90CD               	bcf	4045,0,c	;volatile
 15227                           
 15228                           ;interruptHandler.c: 48: if(machine_state == Sorting_state){
 15229  0029EC  0100               	movlb	0	; () banked
 15230  0029EE  05FC               	decf	_machine_state& (0+255),w,b
 15231  0029F0  A4D8               	btfss	status,2,c
 15232  0029F2  D01E               	goto	i2l8020
 15233                           
 15234                           ; BSR set to: 0
 15235                           ;interruptHandler.c: 49: if(was_low_1){
 15236  0029F4  5079               	movf	_was_low_1,w,c	;volatile
 15237  0029F6  107A               	iorwf	_was_low_1+1,w,c	;volatile
 15238  0029F8  B4D8               	btfsc	status,2,c
 15239  0029FA  D00A               	goto	i2l850
 15240                           
 15241                           ; BSR set to: 0
 15242                           ;interruptHandler.c: 50: LATCbits.LATC1 = 1;
 15243  0029FC  828B               	bsf	3979,1,c	;volatile
 15244                           
 15245                           ; BSR set to: 0
 15246                           ;interruptHandler.c: 51: was_low_1 = 0;
 15247  0029FE  0E00               	movlw	0
 15248  002A00  6E7A               	movwf	_was_low_1+1,c	;volatile
 15249  002A02  0E00               	movlw	0
 15250  002A04  6E79               	movwf	_was_low_1,c	;volatile
 15251                           
 15252                           ; BSR set to: 0
 15253                           ;interruptHandler.c: 52: TMR1H = servoTimes[0];
 15254  002A06  C11C  FFCF         	movff	_servoTimes,4047	;volatile
 15255                           
 15256                           ; BSR set to: 0
 15257                           ;interruptHandler.c: 53: TMR1L = servoTimes[1];
 15258  002A0A  C11E  FFCE         	movff	_servoTimes+2,4046	;volatile
 15259                           
 15260                           ;interruptHandler.c: 54: }
 15261  002A0E  D00F               	goto	i2l8018
 15262  002A10                     i2l850:
 15263                           
 15264                           ; BSR set to: 0
 15265                           ;interruptHandler.c: 55: else{
 15266                           ;interruptHandler.c: 56: LATCbits.LATC1 = 0;
 15267  002A10  928B               	bcf	3979,1,c	;volatile
 15268                           
 15269                           ; BSR set to: 0
 15270                           ;interruptHandler.c: 57: was_low_1 = 1;
 15271  002A12  0E00               	movlw	0
 15272  002A14  6E7A               	movwf	_was_low_1+1,c	;volatile
 15273  002A16  0E01               	movlw	1
 15274  002A18  6E79               	movwf	_was_low_1,c	;volatile
 15275                           
 15276                           ; BSR set to: 0
 15277                           ;interruptHandler.c: 58: TMR1H = 20000 - servoTimes[0];
 15278  002A1A  0101               	movlb	1	; () banked
 15279  002A1C  511C               	movf	_servoTimes& (0+255),w,b
 15280  002A1E  0800               	sublw	0
 15281  002A20  0F20               	addlw	32
 15282  002A22  6ECF               	movwf	4047,c	;volatile
 15283                           
 15284                           ; BSR set to: 1
 15285                           ;interruptHandler.c: 59: TMR1L = 20000 - servoTimes[1];
 15286  002A24  0101               	movlb	1	; () banked
 15287  002A26  511E               	movf	(_servoTimes+2)& (0+255),w,b
 15288  002A28  0800               	sublw	0
 15289  002A2A  0F20               	addlw	32
 15290  002A2C  6ECE               	movwf	4046,c	;volatile
 15291  002A2E                     i2l8018:
 15292                           
 15293                           ;interruptHandler.c: 60: }
 15294                           ;interruptHandler.c: 61: TMR1ON = 1;
 15295  002A2E  80CD               	bsf	4045,0,c	;volatile
 15296  002A30                     i2l8020:
 15297                           
 15298                           ;interruptHandler.c: 62: }
 15299                           ;interruptHandler.c: 63: }
 15300                           ;interruptHandler.c: 65: if(TMR3IF){
 15301  002A30  A2A1               	btfss	4001,1,c	;volatile
 15302  002A32  D024               	goto	i2l856
 15303                           
 15304                           ;interruptHandler.c: 66: TMR3IF = 0;
 15305  002A34  92A1               	bcf	4001,1,c	;volatile
 15306                           
 15307                           ;interruptHandler.c: 67: TMR3ON = 0;
 15308  002A36  90B1               	bcf	4017,0,c	;volatile
 15309                           
 15310                           ;interruptHandler.c: 68: if(machine_state == Sorting_state){
 15311  002A38  0100               	movlb	0	; () banked
 15312  002A3A  05FC               	decf	_machine_state& (0+255),w,b
 15313  002A3C  A4D8               	btfss	status,2,c
 15314  002A3E  D01E               	goto	i2l856
 15315                           
 15316                           ; BSR set to: 0
 15317                           ;interruptHandler.c: 69: if(was_low_3){
 15318  002A40  507B               	movf	_was_low_3,w,c	;volatile
 15319  002A42  107C               	iorwf	_was_low_3+1,w,c	;volatile
 15320  002A44  B4D8               	btfsc	status,2,c
 15321  002A46  D00A               	goto	i2l854
 15322                           
 15323                           ; BSR set to: 0
 15324                           ;interruptHandler.c: 70: LATCbits.LATC2 = 1;
 15325  002A48  848B               	bsf	3979,2,c	;volatile
 15326                           
 15327                           ; BSR set to: 0
 15328                           ;interruptHandler.c: 71: was_low_3 = 0;
 15329  002A4A  0E00               	movlw	0
 15330  002A4C  6E7C               	movwf	_was_low_3+1,c	;volatile
 15331  002A4E  0E00               	movlw	0
 15332  002A50  6E7B               	movwf	_was_low_3,c	;volatile
 15333                           
 15334                           ; BSR set to: 0
 15335                           ;interruptHandler.c: 72: TMR3H = servoTimes[2];
 15336  002A52  C120  FFB3         	movff	_servoTimes+4,4019	;volatile
 15337                           
 15338                           ; BSR set to: 0
 15339                           ;interruptHandler.c: 73: TMR3L = servoTimes[3];
 15340  002A56  C122  FFB2         	movff	_servoTimes+6,4018	;volatile
 15341                           
 15342                           ;interruptHandler.c: 74: }
 15343  002A5A  D00F               	goto	i2l8042
 15344  002A5C                     i2l854:
 15345                           
 15346                           ; BSR set to: 0
 15347                           ;interruptHandler.c: 75: else{
 15348                           ;interruptHandler.c: 76: LATCbits.LATC2 = 0;
 15349  002A5C  948B               	bcf	3979,2,c	;volatile
 15350                           
 15351                           ; BSR set to: 0
 15352                           ;interruptHandler.c: 77: was_low_3 = 1;
 15353  002A5E  0E00               	movlw	0
 15354  002A60  6E7C               	movwf	_was_low_3+1,c	;volatile
 15355  002A62  0E01               	movlw	1
 15356  002A64  6E7B               	movwf	_was_low_3,c	;volatile
 15357                           
 15358                           ; BSR set to: 0
 15359                           ;interruptHandler.c: 78: TMR3H = 20000 - servoTimes[2];
 15360  002A66  0101               	movlb	1	; () banked
 15361  002A68  5120               	movf	(_servoTimes+4)& (0+255),w,b
 15362  002A6A  0800               	sublw	0
 15363  002A6C  0F20               	addlw	32
 15364  002A6E  6EB3               	movwf	4019,c	;volatile
 15365                           
 15366                           ; BSR set to: 1
 15367                           ;interruptHandler.c: 79: TMR3L = 20000 - servoTimes[3];
 15368  002A70  0101               	movlb	1	; () banked
 15369  002A72  5122               	movf	(_servoTimes+6)& (0+255),w,b
 15370  002A74  0800               	sublw	0
 15371  002A76  0F20               	addlw	32
 15372  002A78  6EB2               	movwf	4018,c	;volatile
 15373  002A7A                     i2l8042:
 15374                           
 15375                           ;interruptHandler.c: 80: }
 15376                           ;interruptHandler.c: 81: TMR3ON = 1;
 15377  002A7A  80B1               	bsf	4017,0,c	;volatile
 15378  002A7C                     i2l856:
 15379  002A7C  C05A  FFF5         	movff	??_handler+15,tablat
 15380  002A80  C059  FFF8         	movff	??_handler+14,tblptru
 15381  002A84  C058  FFF7         	movff	??_handler+13,tblptrh
 15382  002A88  C057  FFF6         	movff	??_handler+12,tblptrl
 15383  002A8C  C056  FFF4         	movff	??_handler+11,prodh
 15384  002A90  C055  FFF3         	movff	??_handler+10,prodl
 15385  002A94  C054  FFDA         	movff	??_handler+9,fsr2h
 15386  002A98  C053  FFD9         	movff	??_handler+8,fsr2l
 15387  002A9C  C052  FFE2         	movff	??_handler+7,fsr1h
 15388  002AA0  C051  FFE1         	movff	??_handler+6,fsr1l
 15389  002AA4  C050  FFEA         	movff	??_handler+5,fsr0h
 15390  002AA8  C04F  FFE9         	movff	??_handler+4,fsr0l
 15391  002AAC  C04E  FFFB         	movff	??_handler+3,pclatu
 15392  002AB0  C04D  FFFA         	movff	??_handler+2,pclath
 15393  002AB4  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 15394  002AB6  0011               	retfie		f
 15395  002AB8                     __end_of_handler:
 15396                           	opt stack 0
 15397                           pclatu	equ	0xFFB
 15398                           pclath	equ	0xFFA
 15399                           tblptru	equ	0xFF8
 15400                           tblptrh	equ	0xFF7
 15401                           tblptrl	equ	0xFF6
 15402                           tablat	equ	0xFF5
 15403                           prodh	equ	0xFF4
 15404                           prodl	equ	0xFF3
 15405                           intcon	equ	0xFF2
 15406                           intcon2	equ	0xFF1
 15407                           intcon3	equ	0xFF0
 15408                           indf0	equ	0xFEF
 15409                           postinc0	equ	0xFEE
 15410                           fsr0h	equ	0xFEA
 15411                           fsr0l	equ	0xFE9
 15412                           wreg	equ	0xFE8
 15413                           postdec1	equ	0xFE5
 15414                           fsr1h	equ	0xFE2
 15415                           fsr1l	equ	0xFE1
 15416                           indf2	equ	0xFDF
 15417                           postinc2	equ	0xFDE
 15418                           postdec2	equ	0xFDD
 15419                           fsr2h	equ	0xFDA
 15420                           fsr2l	equ	0xFD9
 15421                           status	equ	0xFD8
 15422                           
 15423 ;; *************** function _updateMenu *****************
 15424 ;; Defined at:
 15425 ;;		line 213 in file "UI.c"
 15426 ;; Parameters:    Size  Location     Type
 15427 ;;		None
 15428 ;; Auto vars:     Size  Location     Type
 15429 ;;		None
 15430 ;; Return value:  Size  Location     Type
 15431 ;;                  1    wreg      void 
 15432 ;; Registers used:
 15433 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15434 ;; Tracked objects:
 15435 ;;		On entry : 0/0
 15436 ;;		On exit  : 0/0
 15437 ;;		Unchanged: 0/0
 15438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15439 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15440 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15441 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15442 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15443 ;;Total ram usage:        2 bytes
 15444 ;; Hardware stack levels used:    1
 15445 ;; Hardware stack levels required when called:    5
 15446 ;; This function calls:
 15447 ;;		_change_state_to_logs_11
 15448 ;;		_change_state_to_logs_12
 15449 ;;		_change_state_to_logs_22
 15450 ;;		_change_state_to_logs_23
 15451 ;;		_change_state_to_logs_33
 15452 ;;		_change_state_to_logs_34
 15453 ;;		_change_state_to_menu_11
 15454 ;;		_change_state_to_menu_23
 15455 ;;		_dispLogs
 15456 ;;		_inputHandler
 15457 ;;		i2_change_state_to_menu_12
 15458 ;;		i2_change_state_to_menu_22
 15459 ;;		i2_change_state_to_menu_start
 15460 ;; This function is called by:
 15461 ;;		_handler
 15462 ;; This function uses a non-reentrant model
 15463 ;;
 15464                           
 15465                           	psect	text58
 15466  001E98                     __ptext58:
 15467                           	opt stack 0
 15468  001E98                     _updateMenu:
 15469                           	opt stack 18
 15470                           
 15471                           ;UI.c: 214: up = 0; down = 0; enter = 0; back = 0;
 15472                           
 15473                           ;incstack = 0
 15474  001E98  0E00               	movlw	0
 15475  001E9A  6E78               	movwf	_up+1,c
 15476  001E9C  0E00               	movlw	0
 15477  001E9E  6E77               	movwf	_up,c
 15478  001EA0  0E00               	movlw	0
 15479  001EA2  6E6A               	movwf	_down+1,c
 15480  001EA4  0E00               	movlw	0
 15481  001EA6  6E69               	movwf	_down,c
 15482  001EA8  0E00               	movlw	0
 15483  001EAA  6E6C               	movwf	_enter+1,c
 15484  001EAC  0E00               	movlw	0
 15485  001EAE  6E6B               	movwf	_enter,c
 15486  001EB0  0E00               	movlw	0
 15487  001EB2  6E5C               	movwf	_back+1,c
 15488  001EB4  0E00               	movlw	0
 15489  001EB6  6E5B               	movwf	_back,c
 15490                           
 15491                           ;UI.c: 215: (INTCONbits.GIE = 0);
 15492  001EB8  9EF2               	bcf	intcon,7,c	;volatile
 15493                           
 15494                           ;UI.c: 217: if (inputHandler()
 15495                           ;UI.c: 220: ){
 15496  001EBA  ECC0  F012         	call	_inputHandler	;wreg free
 15497  001EBE  502A               	movf	?_inputHandler,w,c
 15498  001EC0  102B               	iorwf	?_inputHandler+1,w,c
 15499  001EC2  A4D8               	btfss	status,2,c
 15500  001EC4  D112               	goto	i2l7720
 15501  001EC6  D146               	goto	i2l257
 15502  001EC8                     i2l7572:
 15503                           
 15504                           ;UI.c: 224: change_state_to_menu_11();
 15505  001EC8  EC0C  F021         	call	_change_state_to_menu_11	;wreg free
 15506                           
 15507                           ;UI.c: 225: break;
 15508  001ECC  D143               	goto	i2l257
 15509  001ECE                     i2l7574:
 15510                           
 15511                           ;UI.c: 228: if(up){
 15512  001ECE  5077               	movf	_up,w,c
 15513  001ED0  1078               	iorwf	_up+1,w,c
 15514  001ED2  B4D8               	btfsc	status,2,c
 15515  001ED4  D003               	goto	i2l7578
 15516                           
 15517                           ;UI.c: 229: change_state_to_menu_23();
 15518  001ED6  ECF4  F020         	call	_change_state_to_menu_23	;wreg free
 15519                           
 15520                           ;UI.c: 230: }
 15521  001EDA  D13C               	goto	i2l257
 15522  001EDC                     i2l7578:
 15523                           
 15524                           ;UI.c: 231: else if(down){
 15525  001EDC  5069               	movf	_down,w,c
 15526  001EDE  106A               	iorwf	_down+1,w,c
 15527  001EE0  B4D8               	btfsc	status,2,c
 15528  001EE2  D003               	goto	i2l7582
 15529                           
 15530                           ;UI.c: 232: change_state_to_menu_12();
 15531  001EE4  ECDC  F020         	call	i2_change_state_to_menu_12	;wreg free
 15532                           
 15533                           ;UI.c: 233: }
 15534  001EE8  D135               	goto	i2l257
 15535  001EEA                     i2l7582:
 15536                           
 15537                           ;UI.c: 234: else if(enter){
 15538  001EEA  506B               	movf	_enter,w,c
 15539  001EEC  106C               	iorwf	_enter+1,w,c
 15540  001EEE  B4D8               	btfsc	status,2,c
 15541  001EF0  D131               	goto	i2l257
 15542                           
 15543                           ;UI.c: 235: change_state_to_menu_start();
 15544  001EF2  EC36  F022         	call	i2_change_state_to_menu_start	;wreg free
 15545                           
 15546                           ;UI.c: 236: }
 15547                           ;UI.c: 237: break;
 15548  001EF6  D12E               	goto	i2l257
 15549  001EF8                     i2l7586:
 15550                           
 15551                           ;UI.c: 240: if(up){
 15552  001EF8  5077               	movf	_up,w,c
 15553  001EFA  1078               	iorwf	_up+1,w,c
 15554  001EFC  B4D8               	btfsc	status,2,c
 15555  001EFE  D003               	goto	i2l7590
 15556                           
 15557                           ;UI.c: 241: change_state_to_menu_11();
 15558  001F00  EC0C  F021         	call	_change_state_to_menu_11	;wreg free
 15559                           
 15560                           ;UI.c: 242: }
 15561  001F04  D127               	goto	i2l257
 15562  001F06                     i2l7590:
 15563                           
 15564                           ;UI.c: 243: else if(down){
 15565  001F06  5069               	movf	_down,w,c
 15566  001F08  106A               	iorwf	_down+1,w,c
 15567  001F0A  B4D8               	btfsc	status,2,c
 15568  001F0C  D011               	goto	i2l7606
 15569                           
 15570                           ;UI.c: 244: change_state_to_menu_23();
 15571  001F0E  ECF4  F020         	call	_change_state_to_menu_23	;wreg free
 15572                           
 15573                           ;UI.c: 245: }
 15574  001F12  D120               	goto	i2l257
 15575  001F14                     i2l7598:
 15576                           
 15577                           ;UI.c: 252: if(up){
 15578  001F14  5077               	movf	_up,w,c
 15579  001F16  1078               	iorwf	_up+1,w,c
 15580  001F18  B4D8               	btfsc	status,2,c
 15581  001F1A  D003               	goto	i2l7602
 15582                           
 15583                           ;UI.c: 253: change_state_to_menu_11();
 15584  001F1C  EC0C  F021         	call	_change_state_to_menu_11	;wreg free
 15585                           
 15586                           ;UI.c: 254: }
 15587  001F20  D119               	goto	i2l257
 15588  001F22                     i2l7602:
 15589                           
 15590                           ;UI.c: 255: else if(down){
 15591  001F22  5069               	movf	_down,w,c
 15592  001F24  106A               	iorwf	_down+1,w,c
 15593  001F26  B4D8               	btfsc	status,2,c
 15594  001F28  D003               	goto	i2l7606
 15595                           
 15596                           ;UI.c: 256: change_state_to_menu_23();
 15597  001F2A  ECF4  F020         	call	_change_state_to_menu_23	;wreg free
 15598                           
 15599                           ;UI.c: 257: }
 15600  001F2E  D112               	goto	i2l257
 15601  001F30                     i2l7606:
 15602                           
 15603                           ;UI.c: 258: else if(enter){
 15604  001F30  506B               	movf	_enter,w,c
 15605  001F32  106C               	iorwf	_enter+1,w,c
 15606  001F34  B4D8               	btfsc	status,2,c
 15607  001F36  D10E               	goto	i2l257
 15608                           
 15609                           ;UI.c: 259: machine_state = Sorting_state;
 15610  001F38  0E01               	movlw	1
 15611  001F3A  0100               	movlb	0	; () banked
 15612  001F3C  6FFC               	movwf	_machine_state& (0+255),b
 15613                           
 15614                           ; BSR set to: 0
 15615                           ;UI.c: 260: }
 15616                           ;UI.c: 261: break;
 15617                           
 15618                           ; BSR set to: 0
 15619                           
 15620                           ; BSR set to: 0
 15621  001F3E  D10A               	goto	i2l257
 15622  001F40                     i2l7610:
 15623                           
 15624                           ;UI.c: 264: if(up){
 15625  001F40  5077               	movf	_up,w,c
 15626  001F42  1078               	iorwf	_up+1,w,c
 15627  001F44  B4D8               	btfsc	status,2,c
 15628  001F46  D003               	goto	i2l7614
 15629                           
 15630                           ;UI.c: 265: change_state_to_menu_22();
 15631  001F48  ECC4  F020         	call	i2_change_state_to_menu_22	;wreg free
 15632                           
 15633                           ;UI.c: 266: }
 15634  001F4C  D103               	goto	i2l257
 15635  001F4E                     i2l7614:
 15636                           
 15637                           ;UI.c: 267: else if(down){
 15638  001F4E  5069               	movf	_down,w,c
 15639  001F50  106A               	iorwf	_down+1,w,c
 15640  001F52  B4D8               	btfsc	status,2,c
 15641  001F54  D003               	goto	i2l7618
 15642                           
 15643                           ;UI.c: 268: change_state_to_menu_11();
 15644  001F56  EC0C  F021         	call	_change_state_to_menu_11	;wreg free
 15645                           
 15646                           ;UI.c: 269: }
 15647  001F5A  D0FC               	goto	i2l257
 15648  001F5C                     i2l7618:
 15649                           
 15650                           ;UI.c: 270: else if(enter){
 15651  001F5C  506B               	movf	_enter,w,c
 15652  001F5E  106C               	iorwf	_enter+1,w,c
 15653  001F60  B4D8               	btfsc	status,2,c
 15654  001F62  D0F8               	goto	i2l257
 15655                           
 15656                           ;UI.c: 271: change_state_to_logs_11();
 15657  001F64  EC84  F021         	call	_change_state_to_logs_11	;wreg free
 15658                           
 15659                           ;UI.c: 272: }
 15660                           ;UI.c: 273: break;
 15661  001F68  D0F5               	goto	i2l257
 15662  001F6A                     i2l7622:
 15663                           
 15664                           ;UI.c: 276: if(up){
 15665  001F6A  5077               	movf	_up,w,c
 15666  001F6C  1078               	iorwf	_up+1,w,c
 15667  001F6E  B4D8               	btfsc	status,2,c
 15668  001F70  D003               	goto	i2l7626
 15669                           
 15670                           ;UI.c: 277: change_state_to_logs_34();
 15671  001F72  EC24  F021         	call	_change_state_to_logs_34	;wreg free
 15672                           
 15673                           ;UI.c: 278: }
 15674  001F76  D0EE               	goto	i2l257
 15675  001F78                     i2l7626:
 15676                           
 15677                           ;UI.c: 279: else if(down){
 15678  001F78  5069               	movf	_down,w,c
 15679  001F7A  106A               	iorwf	_down+1,w,c
 15680  001F7C  B4D8               	btfsc	status,2,c
 15681  001F7E  D003               	goto	i2l7630
 15682                           
 15683                           ;UI.c: 280: change_state_to_logs_12();
 15684  001F80  EC6C  F021         	call	_change_state_to_logs_12	;wreg free
 15685                           
 15686                           ;UI.c: 281: }
 15687  001F84  D0E7               	goto	i2l257
 15688  001F86                     i2l7630:
 15689                           
 15690                           ;UI.c: 282: else if(enter){
 15691  001F86  506B               	movf	_enter,w,c
 15692  001F88  106C               	iorwf	_enter+1,w,c
 15693  001F8A  B4D8               	btfsc	status,2,c
 15694  001F8C  D007               	goto	i2l7634
 15695                           
 15696                           ;UI.c: 283: dispLogs(1);
 15697  001F8E  0E00               	movlw	0
 15698  001F90  6E13               	movwf	dispLogs@myLog+1,c
 15699  001F92  0E01               	movlw	1
 15700  001F94  6E12               	movwf	dispLogs@myLog,c
 15701  001F96  EC70  F022         	call	_dispLogs	;wreg free
 15702                           
 15703                           ;UI.c: 284: }
 15704  001F9A  D0DC               	goto	i2l257
 15705  001F9C                     i2l7634:
 15706                           
 15707                           ;UI.c: 285: else if(back){
 15708  001F9C  505B               	movf	_back,w,c
 15709  001F9E  105C               	iorwf	_back+1,w,c
 15710  001FA0  B4D8               	btfsc	status,2,c
 15711  001FA2  D0D8               	goto	i2l257
 15712                           
 15713                           ;UI.c: 286: change_state_to_menu_23();
 15714  001FA4  ECF4  F020         	call	_change_state_to_menu_23	;wreg free
 15715                           
 15716                           ;UI.c: 287: }
 15717                           ;UI.c: 288: break;
 15718  001FA8  D0D5               	goto	i2l257
 15719  001FAA                     i2l7638:
 15720                           
 15721                           ;UI.c: 291: if(up){
 15722  001FAA  5077               	movf	_up,w,c
 15723  001FAC  1078               	iorwf	_up+1,w,c
 15724  001FAE  B4D8               	btfsc	status,2,c
 15725  001FB0  D003               	goto	i2l7642
 15726                           
 15727                           ;UI.c: 292: change_state_to_logs_11();
 15728  001FB2  EC84  F021         	call	_change_state_to_logs_11	;wreg free
 15729                           
 15730                           ;UI.c: 293: }
 15731  001FB6  D0CE               	goto	i2l257
 15732  001FB8                     i2l7642:
 15733                           
 15734                           ;UI.c: 294: else if(down){
 15735  001FB8  5069               	movf	_down,w,c
 15736  001FBA  106A               	iorwf	_down+1,w,c
 15737  001FBC  B4D8               	btfsc	status,2,c
 15738  001FBE  D003               	goto	i2l7646
 15739                           
 15740                           ;UI.c: 295: change_state_to_logs_23();
 15741  001FC0  ECCA  F021         	call	_change_state_to_logs_23	;wreg free
 15742                           
 15743                           ;UI.c: 296: }
 15744  001FC4  D0C7               	goto	i2l257
 15745  001FC6                     i2l7646:
 15746                           
 15747                           ;UI.c: 297: else if(enter){
 15748  001FC6  506B               	movf	_enter,w,c
 15749  001FC8  106C               	iorwf	_enter+1,w,c
 15750  001FCA  B4D8               	btfsc	status,2,c
 15751  001FCC  D007               	goto	i2l7650
 15752                           
 15753                           ;UI.c: 298: dispLogs(2);
 15754  001FCE  0E00               	movlw	0
 15755  001FD0  6E13               	movwf	dispLogs@myLog+1,c
 15756  001FD2  0E02               	movlw	2
 15757  001FD4  6E12               	movwf	dispLogs@myLog,c
 15758  001FD6  EC70  F022         	call	_dispLogs	;wreg free
 15759                           
 15760                           ;UI.c: 299: }
 15761  001FDA  D0BC               	goto	i2l257
 15762  001FDC                     i2l7650:
 15763                           
 15764                           ;UI.c: 300: else if(back){
 15765  001FDC  505B               	movf	_back,w,c
 15766  001FDE  105C               	iorwf	_back+1,w,c
 15767  001FE0  B4D8               	btfsc	status,2,c
 15768  001FE2  D0B8               	goto	i2l257
 15769                           
 15770                           ;UI.c: 301: change_state_to_menu_23();
 15771  001FE4  ECF4  F020         	call	_change_state_to_menu_23	;wreg free
 15772                           
 15773                           ;UI.c: 302: }
 15774                           ;UI.c: 303: break;
 15775  001FE8  D0B5               	goto	i2l257
 15776  001FEA                     i2l7654:
 15777                           
 15778                           ;UI.c: 306: if(up){
 15779  001FEA  5077               	movf	_up,w,c
 15780  001FEC  1078               	iorwf	_up+1,w,c
 15781  001FEE  B4D8               	btfsc	status,2,c
 15782  001FF0  D003               	goto	i2l7658
 15783                           
 15784                           ;UI.c: 307: change_state_to_logs_11();
 15785  001FF2  EC84  F021         	call	_change_state_to_logs_11	;wreg free
 15786                           
 15787                           ;UI.c: 308: }
 15788  001FF6  D0AE               	goto	i2l257
 15789  001FF8                     i2l7658:
 15790                           
 15791                           ;UI.c: 309: else if(down){
 15792  001FF8  5069               	movf	_down,w,c
 15793  001FFA  106A               	iorwf	_down+1,w,c
 15794  001FFC  B4D8               	btfsc	status,2,c
 15795  001FFE  D003               	goto	i2l7662
 15796                           
 15797                           ;UI.c: 310: change_state_to_logs_23();
 15798  002000  ECCA  F021         	call	_change_state_to_logs_23	;wreg free
 15799                           
 15800                           ;UI.c: 311: }
 15801  002004  D0A7               	goto	i2l257
 15802  002006                     i2l7662:
 15803                           
 15804                           ;UI.c: 312: else if(enter){
 15805  002006  506B               	movf	_enter,w,c
 15806  002008  106C               	iorwf	_enter+1,w,c
 15807  00200A  B4D8               	btfsc	status,2,c
 15808  00200C  D007               	goto	i2l7666
 15809                           
 15810                           ;UI.c: 313: dispLogs(2);
 15811  00200E  0E00               	movlw	0
 15812  002010  6E13               	movwf	dispLogs@myLog+1,c
 15813  002012  0E02               	movlw	2
 15814  002014  6E12               	movwf	dispLogs@myLog,c
 15815  002016  EC70  F022         	call	_dispLogs	;wreg free
 15816                           
 15817                           ;UI.c: 314: }
 15818  00201A  D09C               	goto	i2l257
 15819  00201C                     i2l7666:
 15820                           
 15821                           ;UI.c: 315: else if(back){
 15822  00201C  505B               	movf	_back,w,c
 15823  00201E  105C               	iorwf	_back+1,w,c
 15824  002020  B4D8               	btfsc	status,2,c
 15825  002022  D098               	goto	i2l257
 15826                           
 15827                           ;UI.c: 316: change_state_to_menu_23();
 15828  002024  ECF4  F020         	call	_change_state_to_menu_23	;wreg free
 15829                           
 15830                           ;UI.c: 317: }
 15831                           ;UI.c: 318: break;
 15832  002028  D095               	goto	i2l257
 15833  00202A                     i2l7670:
 15834                           
 15835                           ;UI.c: 321: if(up){
 15836  00202A  5077               	movf	_up,w,c
 15837  00202C  1078               	iorwf	_up+1,w,c
 15838  00202E  B4D8               	btfsc	status,2,c
 15839  002030  D003               	goto	i2l7674
 15840                           
 15841                           ;UI.c: 322: change_state_to_logs_22();
 15842  002032  EC54  F021         	call	_change_state_to_logs_22	;wreg free
 15843                           
 15844                           ;UI.c: 323: }
 15845  002036  D08E               	goto	i2l257
 15846  002038                     i2l7674:
 15847                           
 15848                           ;UI.c: 324: else if(down){
 15849  002038  5069               	movf	_down,w,c
 15850  00203A  106A               	iorwf	_down+1,w,c
 15851  00203C  B4D8               	btfsc	status,2,c
 15852  00203E  D003               	goto	i2l7678
 15853                           
 15854                           ;UI.c: 325: change_state_to_logs_34();
 15855  002040  EC24  F021         	call	_change_state_to_logs_34	;wreg free
 15856                           
 15857                           ;UI.c: 326: }
 15858  002044  D087               	goto	i2l257
 15859  002046                     i2l7678:
 15860                           
 15861                           ;UI.c: 327: else if(enter){
 15862  002046  506B               	movf	_enter,w,c
 15863  002048  106C               	iorwf	_enter+1,w,c
 15864  00204A  B4D8               	btfsc	status,2,c
 15865  00204C  D007               	goto	i2l7682
 15866                           
 15867                           ;UI.c: 328: dispLogs(3);
 15868  00204E  0E00               	movlw	0
 15869  002050  6E13               	movwf	dispLogs@myLog+1,c
 15870  002052  0E03               	movlw	3
 15871  002054  6E12               	movwf	dispLogs@myLog,c
 15872  002056  EC70  F022         	call	_dispLogs	;wreg free
 15873                           
 15874                           ;UI.c: 329: }
 15875  00205A  D07C               	goto	i2l257
 15876  00205C                     i2l7682:
 15877                           
 15878                           ;UI.c: 330: else if(back){
 15879  00205C  505B               	movf	_back,w,c
 15880  00205E  105C               	iorwf	_back+1,w,c
 15881  002060  B4D8               	btfsc	status,2,c
 15882  002062  D078               	goto	i2l257
 15883                           
 15884                           ;UI.c: 331: change_state_to_menu_23();
 15885  002064  ECF4  F020         	call	_change_state_to_menu_23	;wreg free
 15886                           
 15887                           ;UI.c: 332: }
 15888                           ;UI.c: 333: break;
 15889  002068  D075               	goto	i2l257
 15890  00206A                     i2l7686:
 15891                           
 15892                           ;UI.c: 336: if(up){
 15893  00206A  5077               	movf	_up,w,c
 15894  00206C  1078               	iorwf	_up+1,w,c
 15895  00206E  B4D8               	btfsc	status,2,c
 15896  002070  D003               	goto	i2l7690
 15897                           
 15898                           ;UI.c: 337: change_state_to_logs_22();
 15899  002072  EC54  F021         	call	_change_state_to_logs_22	;wreg free
 15900                           
 15901                           ;UI.c: 338: }
 15902  002076  D06E               	goto	i2l257
 15903  002078                     i2l7690:
 15904                           
 15905                           ;UI.c: 339: else if(down){
 15906  002078  5069               	movf	_down,w,c
 15907  00207A  106A               	iorwf	_down+1,w,c
 15908  00207C  B4D8               	btfsc	status,2,c
 15909  00207E  D003               	goto	i2l7694
 15910                           
 15911                           ;UI.c: 340: change_state_to_logs_34();
 15912  002080  EC24  F021         	call	_change_state_to_logs_34	;wreg free
 15913                           
 15914                           ;UI.c: 341: }
 15915  002084  D067               	goto	i2l257
 15916  002086                     i2l7694:
 15917                           
 15918                           ;UI.c: 342: else if(enter){
 15919  002086  506B               	movf	_enter,w,c
 15920  002088  106C               	iorwf	_enter+1,w,c
 15921  00208A  B4D8               	btfsc	status,2,c
 15922  00208C  D007               	goto	i2l7698
 15923                           
 15924                           ;UI.c: 343: dispLogs(3);
 15925  00208E  0E00               	movlw	0
 15926  002090  6E13               	movwf	dispLogs@myLog+1,c
 15927  002092  0E03               	movlw	3
 15928  002094  6E12               	movwf	dispLogs@myLog,c
 15929  002096  EC70  F022         	call	_dispLogs	;wreg free
 15930                           
 15931                           ;UI.c: 344: }
 15932  00209A  D05C               	goto	i2l257
 15933  00209C                     i2l7698:
 15934                           
 15935                           ;UI.c: 345: else if(back){
 15936  00209C  505B               	movf	_back,w,c
 15937  00209E  105C               	iorwf	_back+1,w,c
 15938  0020A0  B4D8               	btfsc	status,2,c
 15939  0020A2  D058               	goto	i2l257
 15940                           
 15941                           ;UI.c: 346: change_state_to_menu_23();
 15942  0020A4  ECF4  F020         	call	_change_state_to_menu_23	;wreg free
 15943                           
 15944                           ;UI.c: 347: }
 15945                           ;UI.c: 348: break;
 15946  0020A8  D055               	goto	i2l257
 15947  0020AA                     i2l7702:
 15948                           
 15949                           ;UI.c: 351: if(up){
 15950  0020AA  5077               	movf	_up,w,c
 15951  0020AC  1078               	iorwf	_up+1,w,c
 15952  0020AE  B4D8               	btfsc	status,2,c
 15953  0020B0  D003               	goto	i2l7706
 15954                           
 15955                           ;UI.c: 352: change_state_to_logs_33();
 15956  0020B2  EC3C  F021         	call	_change_state_to_logs_33	;wreg free
 15957                           
 15958                           ;UI.c: 353: }
 15959  0020B6  D04E               	goto	i2l257
 15960  0020B8                     i2l7706:
 15961                           
 15962                           ;UI.c: 354: else if(down){
 15963  0020B8  5069               	movf	_down,w,c
 15964  0020BA  106A               	iorwf	_down+1,w,c
 15965  0020BC  B4D8               	btfsc	status,2,c
 15966  0020BE  D003               	goto	i2l7710
 15967                           
 15968                           ;UI.c: 355: change_state_to_logs_11();
 15969  0020C0  EC84  F021         	call	_change_state_to_logs_11	;wreg free
 15970                           
 15971                           ;UI.c: 356: }
 15972  0020C4  D047               	goto	i2l257
 15973  0020C6                     i2l7710:
 15974                           
 15975                           ;UI.c: 357: else if(enter){
 15976  0020C6  506B               	movf	_enter,w,c
 15977  0020C8  106C               	iorwf	_enter+1,w,c
 15978  0020CA  B4D8               	btfsc	status,2,c
 15979  0020CC  D007               	goto	i2l7714
 15980                           
 15981                           ;UI.c: 358: dispLogs(4);
 15982  0020CE  0E00               	movlw	0
 15983  0020D0  6E13               	movwf	dispLogs@myLog+1,c
 15984  0020D2  0E04               	movlw	4
 15985  0020D4  6E12               	movwf	dispLogs@myLog,c
 15986  0020D6  EC70  F022         	call	_dispLogs	;wreg free
 15987                           
 15988                           ;UI.c: 359: }
 15989  0020DA  D03C               	goto	i2l257
 15990  0020DC                     i2l7714:
 15991                           
 15992                           ;UI.c: 360: else if(back){
 15993  0020DC  505B               	movf	_back,w,c
 15994  0020DE  105C               	iorwf	_back+1,w,c
 15995  0020E0  B4D8               	btfsc	status,2,c
 15996  0020E2  D038               	goto	i2l257
 15997                           
 15998                           ;UI.c: 361: change_state_to_menu_23();
 15999  0020E4  ECF4  F020         	call	_change_state_to_menu_23	;wreg free
 16000                           
 16001                           ;UI.c: 367: }
 16002                           
 16003                           ;UI.c: 366: break;
 16004                           
 16005                           ;UI.c: 365: default:
 16006                           
 16007                           ;UI.c: 362: }
 16008                           ;UI.c: 363: break;
 16009  0020E8  D035               	goto	i2l257
 16010  0020EA                     i2l7720:
 16011  0020EA  C0E0  F043         	movff	_cur_state,??_updateMenu
 16012  0020EE  C0E1  F044         	movff	_cur_state+1,??_updateMenu+1
 16013                           
 16014                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
 16015                           ; Switch size 1, requested type "space"
 16016                           ; Number of cases is 3, Range of values is 0 to 4
 16017                           ; switch strategies available:
 16018                           ; Name         Instructions Cycles
 16019                           ; simple_byte           10     6 (average)
 16020                           ;	Chosen strategy is simple_byte
 16021  0020F2  5044               	movf	??_updateMenu+1,w,c
 16022  0020F4  0A00               	xorlw	0	; case 0
 16023  0020F6  B4D8               	btfsc	status,2,c
 16024  0020F8  D007               	goto	i2l8306
 16025  0020FA  0A03               	xorlw	3	; case 3
 16026  0020FC  B4D8               	btfsc	status,2,c
 16027  0020FE  D015               	goto	i2l8308
 16028  002100  0A07               	xorlw	7	; case 4
 16029  002102  B4D8               	btfsc	status,2,c
 16030  002104  D020               	goto	i2l8310
 16031  002106  D026               	goto	i2l257
 16032  002108                     i2l8306:
 16033                           
 16034                           ; Switch size 1, requested type "space"
 16035                           ; Number of cases is 5, Range of values is 0 to 23
 16036                           ; switch strategies available:
 16037                           ; Name         Instructions Cycles
 16038                           ; simple_byte           16     9 (average)
 16039                           ;	Chosen strategy is simple_byte
 16040  002108  5043               	movf	??_updateMenu,w,c
 16041  00210A  0A00               	xorlw	0	; case 0
 16042  00210C  B4D8               	btfsc	status,2,c
 16043  00210E  D6DC               	goto	i2l7572
 16044  002110  0A0B               	xorlw	11	; case 11
 16045  002112  B4D8               	btfsc	status,2,c
 16046  002114  D6DC               	goto	i2l7574
 16047  002116  0A07               	xorlw	7	; case 12
 16048  002118  B4D8               	btfsc	status,2,c
 16049  00211A  D6EE               	goto	i2l7586
 16050  00211C  0A1A               	xorlw	26	; case 22
 16051  00211E  B4D8               	btfsc	status,2,c
 16052  002120  D6F9               	goto	i2l7598
 16053  002122  0A01               	xorlw	1	; case 23
 16054  002124  B4D8               	btfsc	status,2,c
 16055  002126  D70C               	goto	i2l7610
 16056  002128  D015               	goto	i2l257
 16057  00212A                     i2l8308:
 16058                           
 16059                           ; Switch size 1, requested type "space"
 16060                           ; Number of cases is 4, Range of values is 243 to 255
 16061                           ; switch strategies available:
 16062                           ; Name         Instructions Cycles
 16063                           ; simple_byte           13     7 (average)
 16064                           ;	Chosen strategy is simple_byte
 16065  00212A  5043               	movf	??_updateMenu,w,c
 16066  00212C  0AF3               	xorlw	243	; case 243
 16067  00212E  B4D8               	btfsc	status,2,c
 16068  002130  D71C               	goto	i2l7622
 16069  002132  0A07               	xorlw	7	; case 244
 16070  002134  B4D8               	btfsc	status,2,c
 16071  002136  D739               	goto	i2l7638
 16072  002138  0A0A               	xorlw	10	; case 254
 16073  00213A  B4D8               	btfsc	status,2,c
 16074  00213C  D756               	goto	i2l7654
 16075  00213E  0A01               	xorlw	1	; case 255
 16076  002140  B4D8               	btfsc	status,2,c
 16077  002142  D773               	goto	i2l7670
 16078  002144  D007               	goto	i2l257
 16079  002146                     i2l8310:
 16080                           
 16081                           ; Switch size 1, requested type "space"
 16082                           ; Number of cases is 2, Range of values is 9 to 10
 16083                           ; switch strategies available:
 16084                           ; Name         Instructions Cycles
 16085                           ; simple_byte            7     4 (average)
 16086                           ;	Chosen strategy is simple_byte
 16087  002146  5043               	movf	??_updateMenu,w,c
 16088  002148  0A09               	xorlw	9	; case 9
 16089  00214A  B4D8               	btfsc	status,2,c
 16090  00214C  D78E               	goto	i2l7686
 16091  00214E  0A03               	xorlw	3	; case 10
 16092  002150  B4D8               	btfsc	status,2,c
 16093  002152  D7AB               	goto	i2l7702
 16094  002154                     i2l257:
 16095                           
 16096                           ;UI.c: 368: }
 16097                           ;UI.c: 369: (INTCONbits.GIE = 1);
 16098  002154  8EF2               	bsf	intcon,7,c	;volatile
 16099  002156  0012               	return		;funcret
 16100  002158                     __end_of_updateMenu:
 16101                           	opt stack 0
 16102                           pclatu	equ	0xFFB
 16103                           pclath	equ	0xFFA
 16104                           tblptru	equ	0xFF8
 16105                           tblptrh	equ	0xFF7
 16106                           tblptrl	equ	0xFF6
 16107                           tablat	equ	0xFF5
 16108                           prodh	equ	0xFF4
 16109                           prodl	equ	0xFF3
 16110                           intcon	equ	0xFF2
 16111                           intcon2	equ	0xFF1
 16112                           intcon3	equ	0xFF0
 16113                           indf0	equ	0xFEF
 16114                           postinc0	equ	0xFEE
 16115                           fsr0h	equ	0xFEA
 16116                           fsr0l	equ	0xFE9
 16117                           wreg	equ	0xFE8
 16118                           postdec1	equ	0xFE5
 16119                           fsr1h	equ	0xFE2
 16120                           fsr1l	equ	0xFE1
 16121                           indf2	equ	0xFDF
 16122                           postinc2	equ	0xFDE
 16123                           postdec2	equ	0xFDD
 16124                           fsr2h	equ	0xFDA
 16125                           fsr2l	equ	0xFD9
 16126                           status	equ	0xFD8
 16127                           
 16128 ;; *************** function i2_change_state_to_menu_start *****************
 16129 ;; Defined at:
 16130 ;;		line 474 in file "UI.c"
 16131 ;; Parameters:    Size  Location     Type
 16132 ;;		None
 16133 ;; Auto vars:     Size  Location     Type
 16134 ;;		None
 16135 ;; Return value:  Size  Location     Type
 16136 ;;                  1    wreg      void 
 16137 ;; Registers used:
 16138 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16139 ;; Tracked objects:
 16140 ;;		On entry : 0/0
 16141 ;;		On exit  : 0/0
 16142 ;;		Unchanged: 0/0
 16143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16144 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16145 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16146 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16147 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16148 ;;Total ram usage:        0 bytes
 16149 ;; Hardware stack levels used:    1
 16150 ;; Hardware stack levels required when called:    4
 16151 ;; This function calls:
 16152 ;;		i2_lcdInst
 16153 ;;		i2_printRTC
 16154 ;;		i2_printf
 16155 ;; This function is called by:
 16156 ;;		_updateMenu
 16157 ;; This function uses a non-reentrant model
 16158 ;;
 16159                           
 16160                           	psect	text59
 16161  00446C                     __ptext59:
 16162                           	opt stack 0
 16163  00446C                     i2_change_state_to_menu_start:
 16164                           	opt stack 18
 16165                           
 16166                           ;UI.c: 475: cur_state = 0;
 16167                           
 16168                           ;incstack = 0
 16169  00446C  0E00               	movlw	0
 16170  00446E  0100               	movlb	0	; () banked
 16171  004470  6FE1               	movwf	(_cur_state+1)& (0+255),b
 16172  004472  0E00               	movlw	0
 16173  004474  6FE0               	movwf	_cur_state& (0+255),b
 16174                           
 16175                           ; BSR set to: 0
 16176                           ;UI.c: 477: lcdInst(0b10000000);;
 16177  004476  0E80               	movlw	128
 16178  004478  ECFE  F022         	call	i2_lcdInst
 16179                           
 16180                           ;UI.c: 478: printRTC();
 16181  00447C  ECAC  F010         	call	i2_printRTC	;wreg free
 16182                           
 16183                           ;UI.c: 479: lcdInst(0b11000000);;
 16184  004480  0EC0               	movlw	192
 16185  004482  ECFE  F022         	call	i2_lcdInst
 16186                           
 16187                           ;UI.c: 480: printf("PUSH TO CONTINUE");
 16188  004486  0E1F               	movlw	low STR_30
 16189  004488  6E0D               	movwf	i2printf@f,c
 16190  00448A  0EFE               	movlw	high STR_30
 16191  00448C  6E0E               	movwf	i2printf@f+1,c
 16192  00448E  ECB8  F00A         	call	i2_printf	;wreg free
 16193  004492  0012               	return		;funcret
 16194  004494                     __end_ofi2_change_state_to_menu_start:
 16195                           	opt stack 0
 16196                           pclatu	equ	0xFFB
 16197                           pclath	equ	0xFFA
 16198                           tblptru	equ	0xFF8
 16199                           tblptrh	equ	0xFF7
 16200                           tblptrl	equ	0xFF6
 16201                           tablat	equ	0xFF5
 16202                           prodh	equ	0xFF4
 16203                           prodl	equ	0xFF3
 16204                           intcon	equ	0xFF2
 16205                           intcon2	equ	0xFF1
 16206                           intcon3	equ	0xFF0
 16207                           indf0	equ	0xFEF
 16208                           postinc0	equ	0xFEE
 16209                           fsr0h	equ	0xFEA
 16210                           fsr0l	equ	0xFE9
 16211                           wreg	equ	0xFE8
 16212                           postdec1	equ	0xFE5
 16213                           fsr1h	equ	0xFE2
 16214                           fsr1l	equ	0xFE1
 16215                           indf2	equ	0xFDF
 16216                           postinc2	equ	0xFDE
 16217                           postdec2	equ	0xFDD
 16218                           fsr2h	equ	0xFDA
 16219                           fsr2l	equ	0xFD9
 16220                           status	equ	0xFD8
 16221                           
 16222 ;; *************** function i2_printRTC *****************
 16223 ;; Defined at:
 16224 ;;		line 63 in file "RTC.c"
 16225 ;; Parameters:    Size  Location     Type
 16226 ;;		None
 16227 ;; Auto vars:     Size  Location     Type
 16228 ;;  printRTC       14   44[COMRAM] int [7]
 16229 ;;  printRTC        4   60[COMRAM] unsigned char [4]
 16230 ;;  printRTC        2   64[COMRAM] int 
 16231 ;;  printRTC        2   58[COMRAM] int 
 16232 ;; Return value:  Size  Location     Type
 16233 ;;                  1    wreg      void 
 16234 ;; Registers used:
 16235 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16236 ;; Tracked objects:
 16237 ;;		On entry : 0/0
 16238 ;;		On exit  : 0/0
 16239 ;;		Unchanged: 0/0
 16240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16241 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16242 ;;      Locals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16243 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16244 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16245 ;;Total ram usage:       25 bytes
 16246 ;; Hardware stack levels used:    1
 16247 ;; Hardware stack levels required when called:    3
 16248 ;; This function calls:
 16249 ;;		i2_getRTC
 16250 ;;		i2_lcdInst
 16251 ;;		i2_printf
 16252 ;;		i2_strcpy
 16253 ;; This function is called by:
 16254 ;;		i2_change_state_to_menu_start
 16255 ;; This function uses a non-reentrant model
 16256 ;;
 16257                           
 16258                           	psect	text60
 16259  002158                     __ptext60:
 16260                           	opt stack 0
 16261  002158                     i2_printRTC:
 16262                           	opt stack 18
 16263                           
 16264                           ;RTC.c: 64: getRTC();
 16265                           
 16266                           ;incstack = 0
 16267  002158  EC7F  F01D         	call	i2_getRTC	;wreg free
 16268                           
 16269                           ;RTC.c: 65: char month[] = "MMM";
 16270  00215C  C133  F03D         	movff	printRTC@F3214,i2printRTC@month
 16271  002160  C134  F03E         	movff	printRTC@F3214+1,i2printRTC@month+1
 16272  002164  C135  F03F         	movff	printRTC@F3214+2,i2printRTC@month+2
 16273  002168  C136  F040         	movff	printRTC@F3214+3,i2printRTC@month+3
 16274                           
 16275                           ;RTC.c: 66: int INT_time[7];
 16276                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
 16277  00216C  0E00               	movlw	0
 16278  00216E  6E42               	movwf	i2printRTC@i+1,c
 16279  002170  0E00               	movlw	0
 16280  002172  6E41               	movwf	i2printRTC@i,c
 16281  002174  BE42               	btfsc	i2printRTC@i+1,7,c
 16282  002176  D006               	goto	i2l6032
 16283  002178  5042               	movf	i2printRTC@i+1,w,c
 16284  00217A  E135               	bnz	i2l599
 16285  00217C  0E07               	movlw	7
 16286  00217E  5C41               	subwf	i2printRTC@i,w,c
 16287  002180  B0D8               	btfsc	status,0,c
 16288  002182  D031               	goto	i2l599
 16289  002184                     i2l6032:
 16290                           
 16291                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 16292  002184  0E24               	movlw	low _time
 16293  002186  2441               	addwf	i2printRTC@i,w,c
 16294  002188  6ED9               	movwf	fsr2l,c
 16295  00218A  0E01               	movlw	high _time
 16296  00218C  2042               	addwfc	i2printRTC@i+1,w,c
 16297  00218E  6EDA               	movwf	fsr2h,c
 16298  002190  50DF               	movf	indf2,w,c
 16299  002192  6E2A               	movwf	??i2_printRTC& (0+255),c
 16300  002194  3A2A               	swapf	??i2_printRTC,f,c
 16301  002196  0E0F               	movlw	15
 16302  002198  162A               	andwf	??i2_printRTC,f,c
 16303  00219A  0E0F               	movlw	15
 16304  00219C  162A               	andwf	??i2_printRTC,f,c
 16305  00219E  502A               	movf	??i2_printRTC,w,c
 16306  0021A0  0D0A               	mullw	10
 16307  0021A2  0E24               	movlw	low _time
 16308  0021A4  2441               	addwf	i2printRTC@i,w,c
 16309  0021A6  6ED9               	movwf	fsr2l,c
 16310  0021A8  0E01               	movlw	high _time
 16311  0021AA  2042               	addwfc	i2printRTC@i+1,w,c
 16312  0021AC  6EDA               	movwf	fsr2h,c
 16313  0021AE  50DF               	movf	indf2,w,c
 16314  0021B0  0B0F               	andlw	15
 16315  0021B2  6E2B               	movwf	(??i2_printRTC+1)& (0+255),c
 16316  0021B4  6A2C               	clrf	(??i2_printRTC+2)& (0+255),c
 16317  0021B6  50F3               	movf	prodl,w,c
 16318  0021B8  262B               	addwf	??i2_printRTC+1,f,c
 16319  0021BA  50F4               	movf	prodh,w,c
 16320  0021BC  222C               	addwfc	??i2_printRTC+2,f,c
 16321  0021BE  90D8               	bcf	status,0,c
 16322  0021C0  3441               	rlcf	i2printRTC@i,w,c
 16323  0021C2  6ED9               	movwf	fsr2l,c
 16324  0021C4  3442               	rlcf	i2printRTC@i+1,w,c
 16325  0021C6  6EDA               	movwf	fsr2h,c
 16326  0021C8  0E2D               	movlw	low i2printRTC@INT_time
 16327  0021CA  26D9               	addwf	fsr2l,f,c
 16328  0021CC  0E00               	movlw	high i2printRTC@INT_time
 16329  0021CE  22DA               	addwfc	fsr2h,f,c
 16330  0021D0  C02B  FFDE         	movff	??i2_printRTC+1,postinc2
 16331  0021D4  C02C  FFDD         	movff	??i2_printRTC+2,postdec2
 16332  0021D8  4A41               	infsnz	i2printRTC@i,f,c
 16333  0021DA  2A42               	incf	i2printRTC@i+1,f,c
 16334  0021DC  BE42               	btfsc	i2printRTC@i+1,7,c
 16335  0021DE  D7D2               	goto	i2l6032
 16336  0021E0  5042               	movf	i2printRTC@i+1,w,c
 16337  0021E2  E101               	bnz	i2u457_40
 16338  0021E4  D7CB               	goto	L10
 16339  0021E6                     i2u457_40:
 16340  0021E6                     i2l599:
 16341                           
 16342                           ;RTC.c: 69: }
 16343                           ;RTC.c: 70: int RTC_month = INT_time[5];
 16344  0021E6  C037  F03B         	movff	i2printRTC@INT_time+10,i2printRTC@RTC_month
 16345  0021EA  C038  F03C         	movff	i2printRTC@INT_time+11,i2printRTC@RTC_month+1
 16346                           
 16347                           ;RTC.c: 71: switch(RTC_month){
 16348  0021EE  D084               	goto	i2l6064
 16349  0021F0                     i2l6038:
 16350                           
 16351                           ;RTC.c: 73: strcpy(month, "JAN");
 16352  0021F0  0E3D               	movlw	low i2printRTC@month
 16353  0021F2  6E01               	movwf	i2strcpy@to,c
 16354  0021F4  0E00               	movlw	high i2printRTC@month
 16355  0021F6  6E02               	movwf	i2strcpy@to+1,c
 16356  0021F8  0EDA               	movlw	low STR_8
 16357  0021FA  6E03               	movwf	i2strcpy@from,c
 16358  0021FC  0EFF               	movlw	high STR_8
 16359  0021FE  6E04               	movwf	i2strcpy@from+1,c
 16360  002200  ECAB  F020         	call	i2_strcpy	;wreg free
 16361                           
 16362                           ;RTC.c: 74: break;
 16363  002204  D0A6               	goto	i2l6066
 16364  002206                     i2l6040:
 16365                           
 16366                           ;RTC.c: 76: strcpy(month, "FEB");
 16367  002206  0E3D               	movlw	low i2printRTC@month
 16368  002208  6E01               	movwf	i2strcpy@to,c
 16369  00220A  0E00               	movlw	high i2printRTC@month
 16370  00220C  6E02               	movwf	i2strcpy@to+1,c
 16371  00220E  0ECA               	movlw	low STR_9
 16372  002210  6E03               	movwf	i2strcpy@from,c
 16373  002212  0EFF               	movlw	high STR_9
 16374  002214  6E04               	movwf	i2strcpy@from+1,c
 16375  002216  ECAB  F020         	call	i2_strcpy	;wreg free
 16376                           
 16377                           ;RTC.c: 77: break;
 16378  00221A  D09B               	goto	i2l6066
 16379  00221C                     i2l6042:
 16380                           
 16381                           ;RTC.c: 79: strcpy(month, "MAR");
 16382  00221C  0E3D               	movlw	low i2printRTC@month
 16383  00221E  6E01               	movwf	i2strcpy@to,c
 16384  002220  0E00               	movlw	high i2printRTC@month
 16385  002222  6E02               	movwf	i2strcpy@to+1,c
 16386  002224  0EE6               	movlw	low STR_10
 16387  002226  6E03               	movwf	i2strcpy@from,c
 16388  002228  0EFF               	movlw	high STR_10
 16389  00222A  6E04               	movwf	i2strcpy@from+1,c
 16390  00222C  ECAB  F020         	call	i2_strcpy	;wreg free
 16391                           
 16392                           ;RTC.c: 80: break;
 16393  002230  D090               	goto	i2l6066
 16394  002232                     i2l6044:
 16395                           
 16396                           ;RTC.c: 82: strcpy(month, "APR");
 16397  002232  0E3D               	movlw	low i2printRTC@month
 16398  002234  6E01               	movwf	i2strcpy@to,c
 16399  002236  0E00               	movlw	high i2printRTC@month
 16400  002238  6E02               	movwf	i2strcpy@to+1,c
 16401  00223A  0EEA               	movlw	low STR_11
 16402  00223C  6E03               	movwf	i2strcpy@from,c
 16403  00223E  0EFF               	movlw	high STR_11
 16404  002240  6E04               	movwf	i2strcpy@from+1,c
 16405  002242  ECAB  F020         	call	i2_strcpy	;wreg free
 16406                           
 16407                           ;RTC.c: 83: break;
 16408  002246  D085               	goto	i2l6066
 16409  002248                     i2l6046:
 16410                           
 16411                           ;RTC.c: 85: strcpy(month, "MAY");
 16412  002248  0E3D               	movlw	low i2printRTC@month
 16413  00224A  6E01               	movwf	i2strcpy@to,c
 16414  00224C  0E00               	movlw	high i2printRTC@month
 16415  00224E  6E02               	movwf	i2strcpy@to+1,c
 16416  002250  0EFA               	movlw	low STR_12
 16417  002252  6E03               	movwf	i2strcpy@from,c
 16418  002254  0EFF               	movlw	high STR_12
 16419  002256  6E04               	movwf	i2strcpy@from+1,c
 16420  002258  ECAB  F020         	call	i2_strcpy	;wreg free
 16421                           
 16422                           ;RTC.c: 86: break;
 16423  00225C  D07A               	goto	i2l6066
 16424  00225E                     i2l6048:
 16425                           
 16426                           ;RTC.c: 88: strcpy(month, "JUN");
 16427  00225E  0E3D               	movlw	low i2printRTC@month
 16428  002260  6E01               	movwf	i2strcpy@to,c
 16429  002262  0E00               	movlw	high i2printRTC@month
 16430  002264  6E02               	movwf	i2strcpy@to+1,c
 16431  002266  0EDE               	movlw	low STR_13
 16432  002268  6E03               	movwf	i2strcpy@from,c
 16433  00226A  0EFF               	movlw	high STR_13
 16434  00226C  6E04               	movwf	i2strcpy@from+1,c
 16435  00226E  ECAB  F020         	call	i2_strcpy	;wreg free
 16436                           
 16437                           ;RTC.c: 89: break;
 16438  002272  D06F               	goto	i2l6066
 16439  002274                     i2l6050:
 16440                           
 16441                           ;RTC.c: 91: strcpy(month, "JUL");
 16442  002274  0E3D               	movlw	low i2printRTC@month
 16443  002276  6E01               	movwf	i2strcpy@to,c
 16444  002278  0E00               	movlw	high i2printRTC@month
 16445  00227A  6E02               	movwf	i2strcpy@to+1,c
 16446  00227C  0ED6               	movlw	low STR_14
 16447  00227E  6E03               	movwf	i2strcpy@from,c
 16448  002280  0EFF               	movlw	high STR_14
 16449  002282  6E04               	movwf	i2strcpy@from+1,c
 16450  002284  ECAB  F020         	call	i2_strcpy	;wreg free
 16451                           
 16452                           ;RTC.c: 92: break;
 16453  002288  D064               	goto	i2l6066
 16454  00228A                     i2l6052:
 16455                           
 16456                           ;RTC.c: 94: strcpy(month, "AUG");
 16457  00228A  0E3D               	movlw	low i2printRTC@month
 16458  00228C  6E01               	movwf	i2strcpy@to,c
 16459  00228E  0E00               	movlw	high i2printRTC@month
 16460  002290  6E02               	movwf	i2strcpy@to+1,c
 16461  002292  0ED2               	movlw	low STR_15
 16462  002294  6E03               	movwf	i2strcpy@from,c
 16463  002296  0EFF               	movlw	high STR_15
 16464  002298  6E04               	movwf	i2strcpy@from+1,c
 16465  00229A  ECAB  F020         	call	i2_strcpy	;wreg free
 16466                           
 16467                           ;RTC.c: 95: break;
 16468  00229E  D059               	goto	i2l6066
 16469  0022A0                     i2l6054:
 16470                           
 16471                           ;RTC.c: 97: strcpy(month, "SEP");
 16472  0022A0  0E3D               	movlw	low i2printRTC@month
 16473  0022A2  6E01               	movwf	i2strcpy@to,c
 16474  0022A4  0E00               	movlw	high i2printRTC@month
 16475  0022A6  6E02               	movwf	i2strcpy@to+1,c
 16476  0022A8  0EE2               	movlw	low STR_16
 16477  0022AA  6E03               	movwf	i2strcpy@from,c
 16478  0022AC  0EFF               	movlw	high STR_16
 16479  0022AE  6E04               	movwf	i2strcpy@from+1,c
 16480  0022B0  ECAB  F020         	call	i2_strcpy	;wreg free
 16481                           
 16482                           ;RTC.c: 98: break;
 16483  0022B4  D04E               	goto	i2l6066
 16484  0022B6                     i2l6056:
 16485                           
 16486                           ;RTC.c: 100: strcpy(month, "OCT");
 16487  0022B6  0E3D               	movlw	low i2printRTC@month
 16488  0022B8  6E01               	movwf	i2strcpy@to,c
 16489  0022BA  0E00               	movlw	high i2printRTC@month
 16490  0022BC  6E02               	movwf	i2strcpy@to+1,c
 16491  0022BE  0EF2               	movlw	low STR_17
 16492  0022C0  6E03               	movwf	i2strcpy@from,c
 16493  0022C2  0EFF               	movlw	high STR_17
 16494  0022C4  6E04               	movwf	i2strcpy@from+1,c
 16495  0022C6  ECAB  F020         	call	i2_strcpy	;wreg free
 16496                           
 16497                           ;RTC.c: 101: break;
 16498  0022CA  D043               	goto	i2l6066
 16499  0022CC                     i2l6058:
 16500                           
 16501                           ;RTC.c: 103: strcpy(month, "NOV");
 16502  0022CC  0E3D               	movlw	low i2printRTC@month
 16503  0022CE  6E01               	movwf	i2strcpy@to,c
 16504  0022D0  0E00               	movlw	high i2printRTC@month
 16505  0022D2  6E02               	movwf	i2strcpy@to+1,c
 16506  0022D4  0EF6               	movlw	low STR_18
 16507  0022D6  6E03               	movwf	i2strcpy@from,c
 16508  0022D8  0EFF               	movlw	high STR_18
 16509  0022DA  6E04               	movwf	i2strcpy@from+1,c
 16510  0022DC  ECAB  F020         	call	i2_strcpy	;wreg free
 16511                           
 16512                           ;RTC.c: 104: break;
 16513  0022E0  D038               	goto	i2l6066
 16514  0022E2                     i2l6060:
 16515                           
 16516                           ;RTC.c: 106: strcpy(month, "DEC");
 16517  0022E2  0E3D               	movlw	low i2printRTC@month
 16518  0022E4  6E01               	movwf	i2strcpy@to,c
 16519  0022E6  0E00               	movlw	high i2printRTC@month
 16520  0022E8  6E02               	movwf	i2strcpy@to+1,c
 16521  0022EA  0ECE               	movlw	low STR_19
 16522  0022EC  6E03               	movwf	i2strcpy@from,c
 16523  0022EE  0EFF               	movlw	high STR_19
 16524  0022F0  6E04               	movwf	i2strcpy@from+1,c
 16525  0022F2  ECAB  F020         	call	i2_strcpy	;wreg free
 16526                           
 16527                           ;RTC.c: 108: }
 16528                           
 16529                           ;RTC.c: 107: break;
 16530  0022F6  D02D               	goto	i2l6066
 16531  0022F8                     i2l6064:
 16532  0022F8  C03B  F02A         	movff	i2printRTC@RTC_month,??i2_printRTC
 16533  0022FC  C03C  F02B         	movff	i2printRTC@RTC_month+1,??i2_printRTC+1
 16534                           
 16535                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 16536                           ; Switch size 1, requested type "space"
 16537                           ; Number of cases is 1, Range of values is 0 to 0
 16538                           ; switch strategies available:
 16539                           ; Name         Instructions Cycles
 16540                           ; simple_byte            4     3 (average)
 16541                           ;	Chosen strategy is simple_byte
 16542  002300  502B               	movf	??i2_printRTC+1,w,c
 16543  002302  0A00               	xorlw	0	; case 0
 16544  002304  A4D8               	btfss	status,2,c
 16545  002306  D025               	goto	i2l6066
 16546                           
 16547                           ; Switch size 1, requested type "space"
 16548                           ; Number of cases is 12, Range of values is 1 to 12
 16549                           ; switch strategies available:
 16550                           ; Name         Instructions Cycles
 16551                           ; simple_byte           37    19 (average)
 16552                           ;	Chosen strategy is simple_byte
 16553  002308  502A               	movf	??i2_printRTC,w,c
 16554  00230A  0A01               	xorlw	1	; case 1
 16555  00230C  B4D8               	btfsc	status,2,c
 16556  00230E  D770               	goto	i2l6038
 16557  002310  0A03               	xorlw	3	; case 2
 16558  002312  B4D8               	btfsc	status,2,c
 16559  002314  D778               	goto	i2l6040
 16560  002316  0A01               	xorlw	1	; case 3
 16561  002318  B4D8               	btfsc	status,2,c
 16562  00231A  D780               	goto	i2l6042
 16563  00231C  0A07               	xorlw	7	; case 4
 16564  00231E  B4D8               	btfsc	status,2,c
 16565  002320  D788               	goto	i2l6044
 16566  002322  0A01               	xorlw	1	; case 5
 16567  002324  B4D8               	btfsc	status,2,c
 16568  002326  D790               	goto	i2l6046
 16569  002328  0A03               	xorlw	3	; case 6
 16570  00232A  B4D8               	btfsc	status,2,c
 16571  00232C  D798               	goto	i2l6048
 16572  00232E  0A01               	xorlw	1	; case 7
 16573  002330  B4D8               	btfsc	status,2,c
 16574  002332  D7A0               	goto	i2l6050
 16575  002334  0A0F               	xorlw	15	; case 8
 16576  002336  B4D8               	btfsc	status,2,c
 16577  002338  D7A8               	goto	i2l6052
 16578  00233A  0A01               	xorlw	1	; case 9
 16579  00233C  B4D8               	btfsc	status,2,c
 16580  00233E  D7B0               	goto	i2l6054
 16581  002340  0A03               	xorlw	3	; case 10
 16582  002342  B4D8               	btfsc	status,2,c
 16583  002344  D7B8               	goto	i2l6056
 16584  002346  0A01               	xorlw	1	; case 11
 16585  002348  B4D8               	btfsc	status,2,c
 16586  00234A  D7C0               	goto	i2l6058
 16587  00234C  0A07               	xorlw	7	; case 12
 16588  00234E  B4D8               	btfsc	status,2,c
 16589  002350  D7C8               	goto	i2l6060
 16590  002352                     i2l6066:
 16591                           
 16592                           ;RTC.c: 109: lcdInst(0b10000000);;
 16593  002352  0E80               	movlw	128
 16594  002354  ECFE  F022         	call	i2_lcdInst
 16595                           
 16596                           ;RTC.c: 110: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 16597  002358  0E42               	movlw	low STR_21
 16598  00235A  6E0D               	movwf	i2printf@f,c
 16599  00235C  0EFB               	movlw	high STR_21
 16600  00235E  6E0E               	movwf	i2printf@f+1,c
 16601  002360  C035  F00F         	movff	i2printRTC@INT_time+8,?i2_printf+2
 16602  002364  C036  F010         	movff	i2printRTC@INT_time+9,?i2_printf+3
 16603  002368  0E3D               	movlw	low i2printRTC@month
 16604  00236A  6E11               	movwf	?i2_printf+4,c
 16605  00236C  0E00               	movlw	high i2printRTC@month
 16606  00236E  6E12               	movwf	?i2_printf+5,c
 16607  002370  C031  F013         	movff	i2printRTC@INT_time+4,?i2_printf+6
 16608  002374  C032  F014         	movff	i2printRTC@INT_time+5,?i2_printf+7
 16609  002378  C02F  F015         	movff	i2printRTC@INT_time+2,?i2_printf+8
 16610  00237C  C030  F016         	movff	i2printRTC@INT_time+3,?i2_printf+9
 16611  002380  C02D  F017         	movff	i2printRTC@INT_time,?i2_printf+10
 16612  002384  C02E  F018         	movff	i2printRTC@INT_time+1,?i2_printf+11
 16613  002388  ECB8  F00A         	call	i2_printf	;wreg free
 16614  00238C  0012               	return		;funcret
 16615  00238E                     __end_ofi2_printRTC:
 16616                           	opt stack 0
 16617                           pclatu	equ	0xFFB
 16618                           pclath	equ	0xFFA
 16619                           tblptru	equ	0xFF8
 16620                           tblptrh	equ	0xFF7
 16621                           tblptrl	equ	0xFF6
 16622                           tablat	equ	0xFF5
 16623                           prodh	equ	0xFF4
 16624                           prodl	equ	0xFF3
 16625                           intcon	equ	0xFF2
 16626                           intcon2	equ	0xFF1
 16627                           intcon3	equ	0xFF0
 16628                           indf0	equ	0xFEF
 16629                           postinc0	equ	0xFEE
 16630                           fsr0h	equ	0xFEA
 16631                           fsr0l	equ	0xFE9
 16632                           wreg	equ	0xFE8
 16633                           postdec1	equ	0xFE5
 16634                           fsr1h	equ	0xFE2
 16635                           fsr1l	equ	0xFE1
 16636                           indf2	equ	0xFDF
 16637                           postinc2	equ	0xFDE
 16638                           postdec2	equ	0xFDD
 16639                           fsr2h	equ	0xFDA
 16640                           fsr2l	equ	0xFD9
 16641                           status	equ	0xFD8
 16642                           
 16643 ;; *************** function i2_strcpy *****************
 16644 ;; Defined at:
 16645 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 16646 ;; Parameters:    Size  Location     Type
 16647 ;;  to              2    0[COMRAM] PTR unsigned char 
 16648 ;;		 -> printRTC@month(4), UI@month(4), 
 16649 ;;  from            2    2[COMRAM] PTR const unsigned char 
 16650 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
 16651 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
 16652 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
 16653 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
 16654 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
 16655 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
 16656 ;;		 -> STR_8(4), 
 16657 ;; Auto vars:     Size  Location     Type
 16658 ;;  strcpy          2    4[COMRAM] PTR unsigned char 
 16659 ;;		 -> printRTC@month(4), UI@month(4), 
 16660 ;; Return value:  Size  Location     Type
 16661 ;;                  2    0[COMRAM] PTR unsigned char 
 16662 ;; Registers used:
 16663 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 16664 ;; Tracked objects:
 16665 ;;		On entry : 0/0
 16666 ;;		On exit  : 0/0
 16667 ;;		Unchanged: 0/0
 16668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16669 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16670 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16671 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16672 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16673 ;;Total ram usage:        6 bytes
 16674 ;; Hardware stack levels used:    1
 16675 ;; This function calls:
 16676 ;;		Nothing
 16677 ;; This function is called by:
 16678 ;;		i2_printRTC
 16679 ;; This function uses a non-reentrant model
 16680 ;;
 16681                           
 16682                           	psect	text61
 16683  004156                     __ptext61:
 16684                           	opt stack 0
 16685  004156                     i2_strcpy:
 16686                           	opt stack 20
 16687                           
 16688                           ;incstack = 0
 16689  004156  C001  F005         	movff	i2strcpy@to,i2strcpy@cp
 16690  00415A  C002  F006         	movff	i2strcpy@to+1,i2strcpy@cp+1
 16691  00415E  D004               	goto	i2l5706
 16692  004160                     i2l5704:
 16693  004160  4A05               	infsnz	i2strcpy@cp,f,c
 16694  004162  2A06               	incf	i2strcpy@cp+1,f,c
 16695  004164  4A03               	infsnz	i2strcpy@from,f,c
 16696  004166  2A04               	incf	i2strcpy@from+1,f,c
 16697  004168                     i2l5706:
 16698  004168  C003  FFF6         	movff	i2strcpy@from,tblptrl
 16699  00416C  C004  FFF7         	movff	i2strcpy@from+1,tblptrh
 16700  004170                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 16701  004170  6AF8               	clrf	tblptru,c
 16702  004172                     	endif
 16703  004172                     	if	0	;tblptru may be non-zero
 16704  004172                     	endif
 16705  004172  C005  FFD9         	movff	i2strcpy@cp,fsr2l
 16706  004176  C006  FFDA         	movff	i2strcpy@cp+1,fsr2h
 16707  00417A  0008               	tblrd		*
 16708  00417C  CFF5 FFDF          	movff	tablat,indf2
 16709  004180  50DF               	movf	indf2,w,c
 16710  004182  B4D8               	btfsc	status,2,c
 16711  004184  0012               	return	
 16712  004186  D7EC               	goto	i2l5704
 16713  004188                     __end_ofi2_strcpy:
 16714                           	opt stack 0
 16715                           pclatu	equ	0xFFB
 16716                           pclath	equ	0xFFA
 16717                           tblptru	equ	0xFF8
 16718                           tblptrh	equ	0xFF7
 16719                           tblptrl	equ	0xFF6
 16720                           tablat	equ	0xFF5
 16721                           prodh	equ	0xFF4
 16722                           prodl	equ	0xFF3
 16723                           intcon	equ	0xFF2
 16724                           intcon2	equ	0xFF1
 16725                           intcon3	equ	0xFF0
 16726                           indf0	equ	0xFEF
 16727                           postinc0	equ	0xFEE
 16728                           fsr0h	equ	0xFEA
 16729                           fsr0l	equ	0xFE9
 16730                           wreg	equ	0xFE8
 16731                           postdec1	equ	0xFE5
 16732                           fsr1h	equ	0xFE2
 16733                           fsr1l	equ	0xFE1
 16734                           indf2	equ	0xFDF
 16735                           postinc2	equ	0xFDE
 16736                           postdec2	equ	0xFDD
 16737                           fsr2h	equ	0xFDA
 16738                           fsr2l	equ	0xFD9
 16739                           status	equ	0xFD8
 16740                           
 16741 ;; *************** function _inputHandler *****************
 16742 ;; Defined at:
 16743 ;;		line 372 in file "UI.c"
 16744 ;; Parameters:    Size  Location     Type
 16745 ;;		None
 16746 ;; Auto vars:     Size  Location     Type
 16747 ;;		None
 16748 ;; Return value:  Size  Location     Type
 16749 ;;                  2   41[COMRAM] int 
 16750 ;; Registers used:
 16751 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16752 ;; Tracked objects:
 16753 ;;		On entry : 0/0
 16754 ;;		On exit  : 0/0
 16755 ;;		Unchanged: 0/0
 16756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16757 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16758 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16759 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16760 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16761 ;;Total ram usage:        4 bytes
 16762 ;; Hardware stack levels used:    1
 16763 ;; Hardware stack levels required when called:    4
 16764 ;; This function calls:
 16765 ;;		_change_state_to_logs_11
 16766 ;;		_change_state_to_logs_12
 16767 ;;		_change_state_to_logs_22
 16768 ;;		_change_state_to_logs_23
 16769 ;;		_change_state_to_logs_33
 16770 ;;		_change_state_to_logs_34
 16771 ;;		_change_state_to_menu_11
 16772 ;;		_change_state_to_menu_23
 16773 ;;		i2_change_state_to_menu_12
 16774 ;;		i2_change_state_to_menu_22
 16775 ;; This function is called by:
 16776 ;;		_updateMenu
 16777 ;; This function uses a non-reentrant model
 16778 ;;
 16779                           
 16780                           	psect	text62
 16781  002580                     __ptext62:
 16782                           	opt stack 0
 16783  002580                     _inputHandler:
 16784                           	opt stack 18
 16785                           
 16786                           ;UI.c: 377: if(firstboot){
 16787                           
 16788                           ;incstack = 0
 16789  002580  5075               	movf	_firstboot,w,c
 16790  002582  1076               	iorwf	_firstboot+1,w,c
 16791  002584  B4D8               	btfsc	status,2,c
 16792  002586  D00B               	goto	i2l6134
 16793                           
 16794                           ;UI.c: 378: change_state_to_menu_11();
 16795  002588  EC0C  F021         	call	_change_state_to_menu_11	;wreg free
 16796                           
 16797                           ;UI.c: 379: firstboot = 0;
 16798  00258C  0E00               	movlw	0
 16799  00258E  6E76               	movwf	_firstboot+1,c
 16800  002590  0E00               	movlw	0
 16801  002592  6E75               	movwf	_firstboot,c
 16802                           
 16803                           ;UI.c: 380: return 0;
 16804  002594  0E00               	movlw	0
 16805  002596  6E2B               	movwf	?_inputHandler+1,c
 16806  002598  0E00               	movlw	0
 16807  00259A  6E2A               	movwf	?_inputHandler,c
 16808  00259C  0012               	return	
 16809  00259E                     i2l6134:
 16810                           
 16811                           ;UI.c: 381: }
 16812                           ;UI.c: 382: if (logstate){
 16813  00259E  0100               	movlb	0	; () banked
 16814  0025A0  51F6               	movf	_logstate& (0+255),w,b
 16815  0025A2  0100               	movlb	0	; () banked
 16816  0025A4  11F7               	iorwf	(_logstate+1)& (0+255),w,b
 16817  0025A6  B4D8               	btfsc	status,2,c
 16818  0025A8  D0C7               	goto	i2l6252
 16819                           
 16820                           ; BSR set to: 0
 16821                           ;UI.c: 383: if(input == 'C' && PORTBbits.RB1 == 1){
 16822  0025AA  0E43               	movlw	67
 16823  0025AC  187D               	xorwf	_input,w,c	;volatile
 16824  0025AE  A4D8               	btfss	status,2,c
 16825  0025B0  D012               	goto	i2l6152
 16826                           
 16827                           ; BSR set to: 0
 16828  0025B2  B281               	btfsc	3969,1,c	;volatile
 16829  0025B4  D009               	goto	i2l6144
 16830  0025B6  D00F               	goto	i2l6152
 16831  0025B8                     i2l6142:
 16832                           
 16833                           ;UI.c: 386: _delay((unsigned long)((10)*(32000000/4000.0)));
 16834  0025B8  0E68               	movlw	104
 16835  0025BA  6E2C               	movwf	??_inputHandler& (0+255),c
 16836  0025BC  0EE4               	movlw	228
 16837  0025BE                     i2u797_47:
 16838  0025BE  2EE8               	decfsz	wreg,f,c
 16839  0025C0  D7FE               	bra	i2u797_47
 16840  0025C2  2E2C               	decfsz	??_inputHandler& (0+255),f,c
 16841  0025C4  D7FC               	bra	i2u797_47
 16842  0025C6  D000               	nop2	
 16843  0025C8                     i2l6144:
 16844  0025C8  B281               	btfsc	3969,1,c	;volatile
 16845  0025CA  D7F6               	goto	i2l6142
 16846  0025CC                     i2l6146:
 16847                           
 16848                           ;UI.c: 387: }
 16849                           ;UI.c: 388: return 0;
 16850  0025CC  0E00               	movlw	0
 16851  0025CE  6E2B               	movwf	?_inputHandler+1,c
 16852  0025D0  0E00               	movlw	0
 16853  0025D2  6E2A               	movwf	?_inputHandler,c
 16854  0025D4  0012               	return	
 16855  0025D6                     i2l6152:
 16856                           
 16857                           ;UI.c: 390: else if (input == 'D'){
 16858  0025D6  0E44               	movlw	68
 16859  0025D8  187D               	xorwf	_input,w,c	;volatile
 16860  0025DA  A4D8               	btfss	status,2,c
 16861  0025DC  D7F7               	goto	i2l6146
 16862                           
 16863                           ;UI.c: 392: logstate = 0;
 16864  0025DE  0E00               	movlw	0
 16865  0025E0  0100               	movlb	0	; () banked
 16866  0025E2  6FF7               	movwf	(_logstate+1)& (0+255),b
 16867  0025E4  0E00               	movlw	0
 16868  0025E6  6FF6               	movwf	_logstate& (0+255),b
 16869                           
 16870                           ;UI.c: 393: switch(cur_state){
 16871  0025E8  D012               	goto	i2l6170
 16872  0025EA                     i2l6156:
 16873                           
 16874                           ;UI.c: 395: change_state_to_logs_11();
 16875  0025EA  EC84  F021         	call	_change_state_to_logs_11	;wreg free
 16876                           
 16877                           ;UI.c: 396: break;
 16878  0025EE  D7EE               	goto	i2l6146
 16879  0025F0                     i2l6158:
 16880                           
 16881                           ;UI.c: 398: change_state_to_logs_12();
 16882  0025F0  EC6C  F021         	call	_change_state_to_logs_12	;wreg free
 16883                           
 16884                           ;UI.c: 399: break;
 16885  0025F4  D7EB               	goto	i2l6146
 16886  0025F6                     i2l6160:
 16887                           
 16888                           ;UI.c: 401: change_state_to_logs_22();
 16889  0025F6  EC54  F021         	call	_change_state_to_logs_22	;wreg free
 16890                           
 16891                           ;UI.c: 402: break;
 16892  0025FA  D7E8               	goto	i2l6146
 16893  0025FC                     i2l6162:
 16894                           
 16895                           ;UI.c: 404: change_state_to_logs_23();
 16896  0025FC  ECCA  F021         	call	_change_state_to_logs_23	;wreg free
 16897                           
 16898                           ;UI.c: 405: break;
 16899  002600  D7E5               	goto	i2l6146
 16900  002602                     i2l6164:
 16901                           
 16902                           ;UI.c: 407: change_state_to_logs_33();
 16903  002602  EC3C  F021         	call	_change_state_to_logs_33	;wreg free
 16904                           
 16905                           ;UI.c: 408: break;
 16906  002606  D7E2               	goto	i2l6146
 16907  002608                     i2l6166:
 16908                           
 16909                           ;UI.c: 410: change_state_to_logs_34();
 16910  002608  EC24  F021         	call	_change_state_to_logs_34	;wreg free
 16911                           
 16912                           ;UI.c: 412: }
 16913                           
 16914                           ;UI.c: 411: break;
 16915  00260C  D7DF               	goto	i2l6146
 16916  00260E                     i2l6170:
 16917  00260E  C0E0  F02C         	movff	_cur_state,??_inputHandler
 16918  002612  C0E1  F02D         	movff	_cur_state+1,??_inputHandler+1
 16919                           
 16920                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 16921                           ; Switch size 1, requested type "space"
 16922                           ; Number of cases is 2, Range of values is 3 to 4
 16923                           ; switch strategies available:
 16924                           ; Name         Instructions Cycles
 16925                           ; simple_byte            7     4 (average)
 16926                           ;	Chosen strategy is simple_byte
 16927  002616  502D               	movf	??_inputHandler+1,w,c
 16928  002618  0A03               	xorlw	3	; case 3
 16929  00261A  B4D8               	btfsc	status,2,c
 16930  00261C  D004               	goto	i2l8314
 16931  00261E  0A07               	xorlw	7	; case 4
 16932  002620  B4D8               	btfsc	status,2,c
 16933  002622  D00F               	goto	i2l8316
 16934  002624  D7D3               	goto	i2l6146
 16935  002626                     i2l8314:
 16936                           
 16937                           ; Switch size 1, requested type "space"
 16938                           ; Number of cases is 4, Range of values is 243 to 255
 16939                           ; switch strategies available:
 16940                           ; Name         Instructions Cycles
 16941                           ; simple_byte           13     7 (average)
 16942                           ;	Chosen strategy is simple_byte
 16943  002626  502C               	movf	??_inputHandler,w,c
 16944  002628  0AF3               	xorlw	243	; case 243
 16945  00262A  B4D8               	btfsc	status,2,c
 16946  00262C  D7DE               	goto	i2l6156
 16947  00262E  0A07               	xorlw	7	; case 244
 16948  002630  B4D8               	btfsc	status,2,c
 16949  002632  D7DE               	goto	i2l6158
 16950  002634  0A0A               	xorlw	10	; case 254
 16951  002636  B4D8               	btfsc	status,2,c
 16952  002638  D7DE               	goto	i2l6160
 16953  00263A  0A01               	xorlw	1	; case 255
 16954  00263C  B4D8               	btfsc	status,2,c
 16955  00263E  D7DE               	goto	i2l6162
 16956  002640  D7C5               	goto	i2l6146
 16957  002642                     i2l8316:
 16958                           
 16959                           ; Switch size 1, requested type "space"
 16960                           ; Number of cases is 2, Range of values is 9 to 10
 16961                           ; switch strategies available:
 16962                           ; Name         Instructions Cycles
 16963                           ; simple_byte            7     4 (average)
 16964                           ;	Chosen strategy is simple_byte
 16965  002642  502C               	movf	??_inputHandler,w,c
 16966  002644  0A09               	xorlw	9	; case 9
 16967  002646  B4D8               	btfsc	status,2,c
 16968  002648  D7DC               	goto	i2l6164
 16969  00264A  0A03               	xorlw	3	; case 10
 16970  00264C  B4D8               	btfsc	status,2,c
 16971  00264E  D7DC               	goto	i2l6166
 16972  002650  D7BD               	goto	i2l6146
 16973  002652                     i2l6182:
 16974                           
 16975                           ;UI.c: 422: if(cur_state == 11){
 16976  002652  0E0B               	movlw	11
 16977  002654  0100               	movlb	0	; () banked
 16978  002656  19E0               	xorwf	_cur_state& (0+255),w,b
 16979  002658  0100               	movlb	0	; () banked
 16980  00265A  11E1               	iorwf	(_cur_state+1)& (0+255),w,b
 16981  00265C  A4D8               	btfss	status,2,c
 16982  00265E  D005               	goto	i2l6190
 16983                           
 16984                           ; BSR set to: 0
 16985                           ;UI.c: 423: return 0;
 16986  002660  0E00               	movlw	0
 16987  002662  6E2B               	movwf	?_inputHandler+1,c
 16988  002664  0E00               	movlw	0
 16989  002666  6E2A               	movwf	?_inputHandler,c
 16990                           
 16991                           ; BSR set to: 0
 16992  002668  0012               	return	
 16993  00266A                     i2l6190:
 16994                           
 16995                           ; BSR set to: 0
 16996                           ;UI.c: 425: else{
 16997                           ;UI.c: 426: change_state_to_menu_11();
 16998  00266A  EC0C  F021         	call	_change_state_to_menu_11	;wreg free
 16999                           
 17000                           ;UI.c: 427: }
 17001                           ;UI.c: 428: return 0;
 17002  00266E  0E00               	movlw	0
 17003  002670  6E2B               	movwf	?_inputHandler+1,c
 17004  002672  0E00               	movlw	0
 17005  002674  6E2A               	movwf	?_inputHandler,c
 17006  002676  0012               	return	
 17007  002678                     i2l6196:
 17008                           
 17009                           ;UI.c: 430: if(cur_state == 22 | cur_state == 12){
 17010  002678  0E16               	movlw	22
 17011  00267A  0100               	movlb	0	; () banked
 17012  00267C  19E0               	xorwf	_cur_state& (0+255),w,b
 17013  00267E  0100               	movlb	0	; () banked
 17014  002680  11E1               	iorwf	(_cur_state+1)& (0+255),w,b
 17015  002682  B4D8               	btfsc	status,2,c
 17016  002684  D007               	goto	i2l6200
 17017                           
 17018                           ; BSR set to: 0
 17019  002686  0E0C               	movlw	12
 17020  002688  0100               	movlb	0	; () banked
 17021  00268A  19E0               	xorwf	_cur_state& (0+255),w,b
 17022  00268C  0100               	movlb	0	; () banked
 17023  00268E  11E1               	iorwf	(_cur_state+1)& (0+255),w,b
 17024  002690  A4D8               	btfss	status,2,c
 17025  002692  D005               	goto	i2l6206
 17026  002694                     i2l6200:
 17027                           
 17028                           ; BSR set to: 0
 17029                           ;UI.c: 431: return 0;
 17030  002694  0E00               	movlw	0
 17031  002696  6E2B               	movwf	?_inputHandler+1,c
 17032  002698  0E00               	movlw	0
 17033  00269A  6E2A               	movwf	?_inputHandler,c
 17034                           
 17035                           ; BSR set to: 0
 17036  00269C  0012               	return	
 17037  00269E                     i2l6206:
 17038                           
 17039                           ; BSR set to: 0
 17040                           ;UI.c: 433: else if(cur_state == 23){
 17041  00269E  0E17               	movlw	23
 17042  0026A0  0100               	movlb	0	; () banked
 17043  0026A2  19E0               	xorwf	_cur_state& (0+255),w,b
 17044  0026A4  0100               	movlb	0	; () banked
 17045  0026A6  11E1               	iorwf	(_cur_state+1)& (0+255),w,b
 17046  0026A8  A4D8               	btfss	status,2,c
 17047  0026AA  D003               	goto	i2l6210
 17048                           
 17049                           ; BSR set to: 0
 17050                           ;UI.c: 434: change_state_to_menu_22();
 17051  0026AC  ECC4  F020         	call	i2_change_state_to_menu_22	;wreg free
 17052                           
 17053                           ;UI.c: 435: }
 17054  0026B0  D002               	goto	i2l6212
 17055  0026B2                     i2l6210:
 17056                           
 17057                           ;UI.c: 436: else{
 17058                           ;UI.c: 437: change_state_to_menu_12();
 17059  0026B2  ECDC  F020         	call	i2_change_state_to_menu_12	;wreg free
 17060  0026B6                     i2l6212:
 17061                           
 17062                           ;UI.c: 438: }
 17063                           ;UI.c: 439: return 0;
 17064  0026B6  0E00               	movlw	0
 17065  0026B8  6E2B               	movwf	?_inputHandler+1,c
 17066  0026BA  0E00               	movlw	0
 17067  0026BC  6E2A               	movwf	?_inputHandler,c
 17068  0026BE  0012               	return	
 17069  0026C0                     i2l6216:
 17070                           
 17071                           ;UI.c: 441: if(cur_state == 23){
 17072  0026C0  0E17               	movlw	23
 17073  0026C2  0100               	movlb	0	; () banked
 17074  0026C4  19E0               	xorwf	_cur_state& (0+255),w,b
 17075  0026C6  0100               	movlb	0	; () banked
 17076  0026C8  11E1               	iorwf	(_cur_state+1)& (0+255),w,b
 17077  0026CA  A4D8               	btfss	status,2,c
 17078  0026CC  D005               	goto	i2l6224
 17079                           
 17080                           ; BSR set to: 0
 17081                           ;UI.c: 442: return 0;
 17082  0026CE  0E00               	movlw	0
 17083  0026D0  6E2B               	movwf	?_inputHandler+1,c
 17084  0026D2  0E00               	movlw	0
 17085  0026D4  6E2A               	movwf	?_inputHandler,c
 17086                           
 17087                           ; BSR set to: 0
 17088  0026D6  0012               	return	
 17089  0026D8                     i2l6224:
 17090                           
 17091                           ; BSR set to: 0
 17092                           ;UI.c: 444: else{
 17093                           ;UI.c: 445: change_state_to_menu_23();
 17094  0026D8  ECF4  F020         	call	_change_state_to_menu_23	;wreg free
 17095                           
 17096                           ;UI.c: 446: }
 17097                           ;UI.c: 447: return 0;
 17098  0026DC  0E00               	movlw	0
 17099  0026DE  6E2B               	movwf	?_inputHandler+1,c
 17100  0026E0  0E00               	movlw	0
 17101  0026E2  6E2A               	movwf	?_inputHandler,c
 17102  0026E4  0012               	return	
 17103  0026E6                     i2l6230:
 17104                           
 17105                           ;UI.c: 450: up = 1;
 17106  0026E6  0E00               	movlw	0
 17107  0026E8  6E78               	movwf	_up+1,c
 17108  0026EA  0E01               	movlw	1
 17109  0026EC  6E77               	movwf	_up,c
 17110                           
 17111                           ;UI.c: 451: return 1;
 17112  0026EE  0E00               	movlw	0
 17113  0026F0  6E2B               	movwf	?_inputHandler+1,c
 17114  0026F2  0E01               	movlw	1
 17115  0026F4  6E2A               	movwf	?_inputHandler,c
 17116  0026F6  0012               	return	
 17117  0026F8                     i2l6234:
 17118                           
 17119                           ;UI.c: 453: down = 1;
 17120  0026F8  0E00               	movlw	0
 17121  0026FA  6E6A               	movwf	_down+1,c
 17122  0026FC  0E01               	movlw	1
 17123  0026FE  6E69               	movwf	_down,c
 17124                           
 17125                           ;UI.c: 454: return 1;
 17126  002700  0E00               	movlw	0
 17127  002702  6E2B               	movwf	?_inputHandler+1,c
 17128  002704  0E01               	movlw	1
 17129  002706  6E2A               	movwf	?_inputHandler,c
 17130  002708  0012               	return	
 17131  00270A                     i2l6238:
 17132                           
 17133                           ;UI.c: 456: enter = 1;
 17134  00270A  0E00               	movlw	0
 17135  00270C  6E6C               	movwf	_enter+1,c
 17136  00270E  0E01               	movlw	1
 17137  002710  6E6B               	movwf	_enter,c
 17138                           
 17139                           ;UI.c: 457: return 1;
 17140  002712  0E00               	movlw	0
 17141  002714  6E2B               	movwf	?_inputHandler+1,c
 17142  002716  0E01               	movlw	1
 17143  002718  6E2A               	movwf	?_inputHandler,c
 17144  00271A  0012               	return	
 17145  00271C                     i2l6242:
 17146                           
 17147                           ;UI.c: 459: back = 1;
 17148  00271C  0E00               	movlw	0
 17149  00271E  6E5C               	movwf	_back+1,c
 17150  002720  0E01               	movlw	1
 17151  002722  6E5B               	movwf	_back,c
 17152                           
 17153                           ;UI.c: 460: return 1;
 17154  002724  0E00               	movlw	0
 17155  002726  6E2B               	movwf	?_inputHandler+1,c
 17156  002728  0E01               	movlw	1
 17157  00272A  6E2A               	movwf	?_inputHandler,c
 17158  00272C  0012               	return	
 17159  00272E                     i2l6246:
 17160                           
 17161                           ;UI.c: 463: return 1;
 17162  00272E  0E00               	movlw	0
 17163  002730  6E2B               	movwf	?_inputHandler+1,c
 17164  002732  0E01               	movlw	1
 17165  002734  6E2A               	movwf	?_inputHandler,c
 17166                           
 17167                           ;UI.c: 464: }
 17168  002736  0012               	return	
 17169  002738                     i2l6252:
 17170  002738  507D               	movf	_input,w,c	;volatile
 17171                           
 17172                           ; Switch size 1, requested type "space"
 17173                           ; Number of cases is 7, Range of values is 49 to 68
 17174                           ; switch strategies available:
 17175                           ; Name         Instructions Cycles
 17176                           ; simple_byte           22    12 (average)
 17177                           ;	Chosen strategy is simple_byte
 17178  00273A  0A31               	xorlw	49	; case 49
 17179  00273C  B4D8               	btfsc	status,2,c
 17180  00273E  D789               	goto	i2l6182
 17181  002740  0A03               	xorlw	3	; case 50
 17182  002742  B4D8               	btfsc	status,2,c
 17183  002744  D799               	goto	i2l6196
 17184  002746  0A01               	xorlw	1	; case 51
 17185  002748  B4D8               	btfsc	status,2,c
 17186  00274A  D7BA               	goto	i2l6216
 17187  00274C  0A72               	xorlw	114	; case 65
 17188  00274E  B4D8               	btfsc	status,2,c
 17189  002750  D7CA               	goto	i2l6230
 17190  002752  0A03               	xorlw	3	; case 66
 17191  002754  B4D8               	btfsc	status,2,c
 17192  002756  D7D0               	goto	i2l6234
 17193  002758  0A01               	xorlw	1	; case 67
 17194  00275A  B4D8               	btfsc	status,2,c
 17195  00275C  D7D6               	goto	i2l6238
 17196  00275E  0A07               	xorlw	7	; case 68
 17197  002760  B4D8               	btfsc	status,2,c
 17198  002762  D7DC               	goto	i2l6242
 17199  002764  D7E4               	goto	i2l6246
 17200  002766                     __end_of_inputHandler:
 17201                           	opt stack 0
 17202                           pclatu	equ	0xFFB
 17203                           pclath	equ	0xFFA
 17204                           tblptru	equ	0xFF8
 17205                           tblptrh	equ	0xFF7
 17206                           tblptrl	equ	0xFF6
 17207                           tablat	equ	0xFF5
 17208                           prodh	equ	0xFF4
 17209                           prodl	equ	0xFF3
 17210                           intcon	equ	0xFF2
 17211                           intcon2	equ	0xFF1
 17212                           intcon3	equ	0xFF0
 17213                           indf0	equ	0xFEF
 17214                           postinc0	equ	0xFEE
 17215                           fsr0h	equ	0xFEA
 17216                           fsr0l	equ	0xFE9
 17217                           wreg	equ	0xFE8
 17218                           postdec1	equ	0xFE5
 17219                           fsr1h	equ	0xFE2
 17220                           fsr1l	equ	0xFE1
 17221                           indf2	equ	0xFDF
 17222                           postinc2	equ	0xFDE
 17223                           postdec2	equ	0xFDD
 17224                           fsr2h	equ	0xFDA
 17225                           fsr2l	equ	0xFD9
 17226                           status	equ	0xFD8
 17227                           
 17228 ;; *************** function i2_change_state_to_menu_22 *****************
 17229 ;; Defined at:
 17230 ;;		line 498 in file "UI.c"
 17231 ;; Parameters:    Size  Location     Type
 17232 ;;		None
 17233 ;; Auto vars:     Size  Location     Type
 17234 ;;		None
 17235 ;; Return value:  Size  Location     Type
 17236 ;;                  1    wreg      void 
 17237 ;; Registers used:
 17238 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17239 ;; Tracked objects:
 17240 ;;		On entry : 0/0
 17241 ;;		On exit  : 0/0
 17242 ;;		Unchanged: 0/0
 17243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17244 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17245 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17246 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17247 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17248 ;;Total ram usage:        0 bytes
 17249 ;; Hardware stack levels used:    1
 17250 ;; Hardware stack levels required when called:    3
 17251 ;; This function calls:
 17252 ;;		i2_lcdInst
 17253 ;;		i2_printf
 17254 ;; This function is called by:
 17255 ;;		_updateMenu
 17256 ;;		_inputHandler
 17257 ;; This function uses a non-reentrant model
 17258 ;;
 17259                           
 17260                           	psect	text63
 17261  004188                     __ptext63:
 17262                           	opt stack 0
 17263  004188                     i2_change_state_to_menu_22:
 17264                           	opt stack 19
 17265                           
 17266                           ;UI.c: 499: cur_state = 22;
 17267                           
 17268                           ;incstack = 0
 17269  004188  0E00               	movlw	0
 17270  00418A  0100               	movlb	0	; () banked
 17271  00418C  6FE1               	movwf	(_cur_state+1)& (0+255),b
 17272  00418E  0E16               	movlw	22
 17273  004190  6FE0               	movwf	_cur_state& (0+255),b
 17274                           
 17275                           ; BSR set to: 0
 17276                           ;UI.c: 501: lcdInst(0b10000000);;
 17277  004192  0E80               	movlw	128
 17278  004194  ECFE  F022         	call	i2_lcdInst
 17279                           
 17280                           ;UI.c: 502: printf("2. SORT        <");
 17281  004198  0EEC               	movlw	low STR_34
 17282  00419A  6E0D               	movwf	i2printf@f,c
 17283  00419C  0EFD               	movlw	high STR_34
 17284  00419E  6E0E               	movwf	i2printf@f+1,c
 17285  0041A0  ECB8  F00A         	call	i2_printf	;wreg free
 17286                           
 17287                           ;UI.c: 503: lcdInst(0b11000000);;
 17288  0041A4  0EC0               	movlw	192
 17289  0041A6  ECFE  F022         	call	i2_lcdInst
 17290                           
 17291                           ;UI.c: 504: printf("3. LOGS         ");
 17292  0041AA  0E31               	movlw	low STR_36
 17293  0041AC  6E0D               	movwf	i2printf@f,c
 17294  0041AE  0EFD               	movlw	high STR_36
 17295  0041B0  6E0E               	movwf	i2printf@f+1,c
 17296  0041B2  ECB8  F00A         	call	i2_printf	;wreg free
 17297  0041B6  0012               	return		;funcret
 17298  0041B8                     __end_ofi2_change_state_to_menu_22:
 17299                           	opt stack 0
 17300                           pclatu	equ	0xFFB
 17301                           pclath	equ	0xFFA
 17302                           tblptru	equ	0xFF8
 17303                           tblptrh	equ	0xFF7
 17304                           tblptrl	equ	0xFF6
 17305                           tablat	equ	0xFF5
 17306                           prodh	equ	0xFF4
 17307                           prodl	equ	0xFF3
 17308                           intcon	equ	0xFF2
 17309                           intcon2	equ	0xFF1
 17310                           intcon3	equ	0xFF0
 17311                           indf0	equ	0xFEF
 17312                           postinc0	equ	0xFEE
 17313                           fsr0h	equ	0xFEA
 17314                           fsr0l	equ	0xFE9
 17315                           wreg	equ	0xFE8
 17316                           postdec1	equ	0xFE5
 17317                           fsr1h	equ	0xFE2
 17318                           fsr1l	equ	0xFE1
 17319                           indf2	equ	0xFDF
 17320                           postinc2	equ	0xFDE
 17321                           postdec2	equ	0xFDD
 17322                           fsr2h	equ	0xFDA
 17323                           fsr2l	equ	0xFD9
 17324                           status	equ	0xFD8
 17325                           
 17326 ;; *************** function i2_change_state_to_menu_12 *****************
 17327 ;; Defined at:
 17328 ;;		line 490 in file "UI.c"
 17329 ;; Parameters:    Size  Location     Type
 17330 ;;		None
 17331 ;; Auto vars:     Size  Location     Type
 17332 ;;		None
 17333 ;; Return value:  Size  Location     Type
 17334 ;;                  1    wreg      void 
 17335 ;; Registers used:
 17336 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17337 ;; Tracked objects:
 17338 ;;		On entry : 0/0
 17339 ;;		On exit  : 0/0
 17340 ;;		Unchanged: 0/0
 17341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17342 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17343 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17344 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17345 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17346 ;;Total ram usage:        0 bytes
 17347 ;; Hardware stack levels used:    1
 17348 ;; Hardware stack levels required when called:    3
 17349 ;; This function calls:
 17350 ;;		i2_lcdInst
 17351 ;;		i2_printf
 17352 ;; This function is called by:
 17353 ;;		_updateMenu
 17354 ;;		_inputHandler
 17355 ;; This function uses a non-reentrant model
 17356 ;;
 17357                           
 17358                           	psect	text64
 17359  0041B8                     __ptext64:
 17360                           	opt stack 0
 17361  0041B8                     i2_change_state_to_menu_12:
 17362                           	opt stack 19
 17363                           
 17364                           ;UI.c: 491: cur_state = 12;
 17365                           
 17366                           ;incstack = 0
 17367  0041B8  0E00               	movlw	0
 17368  0041BA  0100               	movlb	0	; () banked
 17369  0041BC  6FE1               	movwf	(_cur_state+1)& (0+255),b
 17370  0041BE  0E0C               	movlw	12
 17371  0041C0  6FE0               	movwf	_cur_state& (0+255),b
 17372                           
 17373                           ; BSR set to: 0
 17374                           ;UI.c: 493: lcdInst(0b10000000);;
 17375  0041C2  0E80               	movlw	128
 17376  0041C4  ECFE  F022         	call	i2_lcdInst
 17377                           
 17378                           ;UI.c: 494: printf("1. DATE/TIME    ");
 17379  0041C8  0E53               	movlw	low STR_33
 17380  0041CA  6E0D               	movwf	i2printf@f,c
 17381  0041CC  0EFD               	movlw	high STR_33
 17382  0041CE  6E0E               	movwf	i2printf@f+1,c
 17383  0041D0  ECB8  F00A         	call	i2_printf	;wreg free
 17384                           
 17385                           ;UI.c: 495: lcdInst(0b11000000);;
 17386  0041D4  0EC0               	movlw	192
 17387  0041D6  ECFE  F022         	call	i2_lcdInst
 17388                           
 17389                           ;UI.c: 496: printf("2. SORT        <");
 17390  0041DA  0EEC               	movlw	low STR_34
 17391  0041DC  6E0D               	movwf	i2printf@f,c
 17392  0041DE  0EFD               	movlw	high STR_34
 17393  0041E0  6E0E               	movwf	i2printf@f+1,c
 17394  0041E2  ECB8  F00A         	call	i2_printf	;wreg free
 17395  0041E6  0012               	return		;funcret
 17396  0041E8                     __end_ofi2_change_state_to_menu_12:
 17397                           	opt stack 0
 17398                           pclatu	equ	0xFFB
 17399                           pclath	equ	0xFFA
 17400                           tblptru	equ	0xFF8
 17401                           tblptrh	equ	0xFF7
 17402                           tblptrl	equ	0xFF6
 17403                           tablat	equ	0xFF5
 17404                           prodh	equ	0xFF4
 17405                           prodl	equ	0xFF3
 17406                           intcon	equ	0xFF2
 17407                           intcon2	equ	0xFF1
 17408                           intcon3	equ	0xFF0
 17409                           indf0	equ	0xFEF
 17410                           postinc0	equ	0xFEE
 17411                           fsr0h	equ	0xFEA
 17412                           fsr0l	equ	0xFE9
 17413                           wreg	equ	0xFE8
 17414                           postdec1	equ	0xFE5
 17415                           fsr1h	equ	0xFE2
 17416                           fsr1l	equ	0xFE1
 17417                           indf2	equ	0xFDF
 17418                           postinc2	equ	0xFDE
 17419                           postdec2	equ	0xFDD
 17420                           fsr2h	equ	0xFDA
 17421                           fsr2l	equ	0xFD9
 17422                           status	equ	0xFD8
 17423                           
 17424 ;; *************** function _change_state_to_menu_23 *****************
 17425 ;; Defined at:
 17426 ;;		line 506 in file "UI.c"
 17427 ;; Parameters:    Size  Location     Type
 17428 ;;		None
 17429 ;; Auto vars:     Size  Location     Type
 17430 ;;		None
 17431 ;; Return value:  Size  Location     Type
 17432 ;;                  1    wreg      void 
 17433 ;; Registers used:
 17434 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17435 ;; Tracked objects:
 17436 ;;		On entry : 0/0
 17437 ;;		On exit  : 0/0
 17438 ;;		Unchanged: 0/0
 17439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17440 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17441 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17442 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17443 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17444 ;;Total ram usage:        0 bytes
 17445 ;; Hardware stack levels used:    1
 17446 ;; Hardware stack levels required when called:    3
 17447 ;; This function calls:
 17448 ;;		i2_lcdInst
 17449 ;;		i2_printf
 17450 ;; This function is called by:
 17451 ;;		_updateMenu
 17452 ;;		_inputHandler
 17453 ;; This function uses a non-reentrant model
 17454 ;;
 17455                           
 17456                           	psect	text65
 17457  0041E8                     __ptext65:
 17458                           	opt stack 0
 17459  0041E8                     _change_state_to_menu_23:
 17460                           	opt stack 18
 17461                           
 17462                           ;UI.c: 507: cur_state = 23;
 17463                           
 17464                           ;incstack = 0
 17465  0041E8  0E00               	movlw	0
 17466  0041EA  0100               	movlb	0	; () banked
 17467  0041EC  6FE1               	movwf	(_cur_state+1)& (0+255),b
 17468  0041EE  0E17               	movlw	23
 17469  0041F0  6FE0               	movwf	_cur_state& (0+255),b
 17470                           
 17471                           ; BSR set to: 0
 17472                           ;UI.c: 509: lcdInst(0b10000000);;
 17473  0041F2  0E80               	movlw	128
 17474  0041F4  ECFE  F022         	call	i2_lcdInst
 17475                           
 17476                           ;UI.c: 510: printf("2. SORT         ");
 17477  0041F8  0E42               	movlw	low STR_32
 17478  0041FA  6E0D               	movwf	i2printf@f,c
 17479  0041FC  0EFD               	movlw	high STR_32
 17480  0041FE  6E0E               	movwf	i2printf@f+1,c
 17481  004200  ECB8  F00A         	call	i2_printf	;wreg free
 17482                           
 17483                           ;UI.c: 511: lcdInst(0b11000000);;
 17484  004204  0EC0               	movlw	192
 17485  004206  ECFE  F022         	call	i2_lcdInst
 17486                           
 17487                           ;UI.c: 512: printf("3. LOGS        <");
 17488  00420A  0EDB               	movlw	low STR_38
 17489  00420C  6E0D               	movwf	i2printf@f,c
 17490  00420E  0EFD               	movlw	high STR_38
 17491  004210  6E0E               	movwf	i2printf@f+1,c
 17492  004212  ECB8  F00A         	call	i2_printf	;wreg free
 17493  004216  0012               	return		;funcret
 17494  004218                     __end_of_change_state_to_menu_23:
 17495                           	opt stack 0
 17496                           pclatu	equ	0xFFB
 17497                           pclath	equ	0xFFA
 17498                           tblptru	equ	0xFF8
 17499                           tblptrh	equ	0xFF7
 17500                           tblptrl	equ	0xFF6
 17501                           tablat	equ	0xFF5
 17502                           prodh	equ	0xFF4
 17503                           prodl	equ	0xFF3
 17504                           intcon	equ	0xFF2
 17505                           intcon2	equ	0xFF1
 17506                           intcon3	equ	0xFF0
 17507                           indf0	equ	0xFEF
 17508                           postinc0	equ	0xFEE
 17509                           fsr0h	equ	0xFEA
 17510                           fsr0l	equ	0xFE9
 17511                           wreg	equ	0xFE8
 17512                           postdec1	equ	0xFE5
 17513                           fsr1h	equ	0xFE2
 17514                           fsr1l	equ	0xFE1
 17515                           indf2	equ	0xFDF
 17516                           postinc2	equ	0xFDE
 17517                           postdec2	equ	0xFDD
 17518                           fsr2h	equ	0xFDA
 17519                           fsr2l	equ	0xFD9
 17520                           status	equ	0xFD8
 17521                           
 17522 ;; *************** function _change_state_to_menu_11 *****************
 17523 ;; Defined at:
 17524 ;;		line 482 in file "UI.c"
 17525 ;; Parameters:    Size  Location     Type
 17526 ;;		None
 17527 ;; Auto vars:     Size  Location     Type
 17528 ;;		None
 17529 ;; Return value:  Size  Location     Type
 17530 ;;                  1    wreg      void 
 17531 ;; Registers used:
 17532 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17533 ;; Tracked objects:
 17534 ;;		On entry : 0/0
 17535 ;;		On exit  : 0/0
 17536 ;;		Unchanged: 0/0
 17537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17538 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17539 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17540 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17541 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17542 ;;Total ram usage:        0 bytes
 17543 ;; Hardware stack levels used:    1
 17544 ;; Hardware stack levels required when called:    3
 17545 ;; This function calls:
 17546 ;;		i2_lcdInst
 17547 ;;		i2_printf
 17548 ;; This function is called by:
 17549 ;;		_updateMenu
 17550 ;;		_inputHandler
 17551 ;; This function uses a non-reentrant model
 17552 ;;
 17553                           
 17554                           	psect	text66
 17555  004218                     __ptext66:
 17556                           	opt stack 0
 17557  004218                     _change_state_to_menu_11:
 17558                           	opt stack 18
 17559                           
 17560                           ;UI.c: 483: cur_state = 11;
 17561                           
 17562                           ;incstack = 0
 17563  004218  0E00               	movlw	0
 17564  00421A  0100               	movlb	0	; () banked
 17565  00421C  6FE1               	movwf	(_cur_state+1)& (0+255),b
 17566  00421E  0E0B               	movlw	11
 17567  004220  6FE0               	movwf	_cur_state& (0+255),b
 17568                           
 17569                           ; BSR set to: 0
 17570                           ;UI.c: 485: lcdInst(0b10000000);;
 17571  004222  0E80               	movlw	128
 17572  004224  ECFE  F022         	call	i2_lcdInst
 17573                           
 17574                           ;UI.c: 486: printf("1. DATE/TIME   <");
 17575  004228  0EFD               	movlw	low STR_31
 17576  00422A  6E0D               	movwf	i2printf@f,c
 17577  00422C  0EFD               	movlw	high STR_31
 17578  00422E  6E0E               	movwf	i2printf@f+1,c
 17579  004230  ECB8  F00A         	call	i2_printf	;wreg free
 17580                           
 17581                           ;UI.c: 487: lcdInst(0b11000000);;
 17582  004234  0EC0               	movlw	192
 17583  004236  ECFE  F022         	call	i2_lcdInst
 17584                           
 17585                           ;UI.c: 488: printf("2. SORT         ");
 17586  00423A  0E42               	movlw	low STR_32
 17587  00423C  6E0D               	movwf	i2printf@f,c
 17588  00423E  0EFD               	movlw	high STR_32
 17589  004240  6E0E               	movwf	i2printf@f+1,c
 17590  004242  ECB8  F00A         	call	i2_printf	;wreg free
 17591  004246  0012               	return		;funcret
 17592  004248                     __end_of_change_state_to_menu_11:
 17593                           	opt stack 0
 17594                           pclatu	equ	0xFFB
 17595                           pclath	equ	0xFFA
 17596                           tblptru	equ	0xFF8
 17597                           tblptrh	equ	0xFF7
 17598                           tblptrl	equ	0xFF6
 17599                           tablat	equ	0xFF5
 17600                           prodh	equ	0xFF4
 17601                           prodl	equ	0xFF3
 17602                           intcon	equ	0xFF2
 17603                           intcon2	equ	0xFF1
 17604                           intcon3	equ	0xFF0
 17605                           indf0	equ	0xFEF
 17606                           postinc0	equ	0xFEE
 17607                           fsr0h	equ	0xFEA
 17608                           fsr0l	equ	0xFE9
 17609                           wreg	equ	0xFE8
 17610                           postdec1	equ	0xFE5
 17611                           fsr1h	equ	0xFE2
 17612                           fsr1l	equ	0xFE1
 17613                           indf2	equ	0xFDF
 17614                           postinc2	equ	0xFDE
 17615                           postdec2	equ	0xFDD
 17616                           fsr2h	equ	0xFDA
 17617                           fsr2l	equ	0xFD9
 17618                           status	equ	0xFD8
 17619                           
 17620 ;; *************** function _change_state_to_logs_34 *****************
 17621 ;; Defined at:
 17622 ;;		line 549 in file "UI.c"
 17623 ;; Parameters:    Size  Location     Type
 17624 ;;		None
 17625 ;; Auto vars:     Size  Location     Type
 17626 ;;		None
 17627 ;; Return value:  Size  Location     Type
 17628 ;;                  1    wreg      void 
 17629 ;; Registers used:
 17630 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17631 ;; Tracked objects:
 17632 ;;		On entry : 0/0
 17633 ;;		On exit  : 0/0
 17634 ;;		Unchanged: 0/0
 17635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17636 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17637 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17638 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17639 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17640 ;;Total ram usage:        0 bytes
 17641 ;; Hardware stack levels used:    1
 17642 ;; Hardware stack levels required when called:    3
 17643 ;; This function calls:
 17644 ;;		i2_lcdInst
 17645 ;;		i2_printf
 17646 ;; This function is called by:
 17647 ;;		_updateMenu
 17648 ;;		_inputHandler
 17649 ;; This function uses a non-reentrant model
 17650 ;;
 17651                           
 17652                           	psect	text67
 17653  004248                     __ptext67:
 17654                           	opt stack 0
 17655  004248                     _change_state_to_logs_34:
 17656                           	opt stack 18
 17657                           
 17658                           ;UI.c: 550: cur_state = 1034;
 17659                           
 17660                           ;incstack = 0
 17661  004248  0E04               	movlw	4
 17662  00424A  0100               	movlb	0	; () banked
 17663  00424C  6FE1               	movwf	(_cur_state+1)& (0+255),b
 17664  00424E  0E0A               	movlw	10
 17665  004250  6FE0               	movwf	_cur_state& (0+255),b
 17666                           
 17667                           ; BSR set to: 0
 17668                           ;UI.c: 551: lcdInst(0b10000000);;
 17669  004252  0E80               	movlw	128
 17670  004254  ECFE  F022         	call	i2_lcdInst
 17671                           
 17672                           ;UI.c: 552: printf("LOG 3           ");
 17673  004258  0E0F               	movlw	low STR_44
 17674  00425A  6E0D               	movwf	i2printf@f,c
 17675  00425C  0EFD               	movlw	high STR_44
 17676  00425E  6E0E               	movwf	i2printf@f+1,c
 17677  004260  ECB8  F00A         	call	i2_printf	;wreg free
 17678                           
 17679                           ;UI.c: 553: lcdInst(0b11000000);;
 17680  004264  0EC0               	movlw	192
 17681  004266  ECFE  F022         	call	i2_lcdInst
 17682                           
 17683                           ;UI.c: 554: printf("LOG 4          <");
 17684  00426A  0ECA               	movlw	low STR_50
 17685  00426C  6E0D               	movwf	i2printf@f,c
 17686  00426E  0EFD               	movlw	high STR_50
 17687  004270  6E0E               	movwf	i2printf@f+1,c
 17688  004272  ECB8  F00A         	call	i2_printf	;wreg free
 17689  004276  0012               	return		;funcret
 17690  004278                     __end_of_change_state_to_logs_34:
 17691                           	opt stack 0
 17692                           pclatu	equ	0xFFB
 17693                           pclath	equ	0xFFA
 17694                           tblptru	equ	0xFF8
 17695                           tblptrh	equ	0xFF7
 17696                           tblptrl	equ	0xFF6
 17697                           tablat	equ	0xFF5
 17698                           prodh	equ	0xFF4
 17699                           prodl	equ	0xFF3
 17700                           intcon	equ	0xFF2
 17701                           intcon2	equ	0xFF1
 17702                           intcon3	equ	0xFF0
 17703                           indf0	equ	0xFEF
 17704                           postinc0	equ	0xFEE
 17705                           fsr0h	equ	0xFEA
 17706                           fsr0l	equ	0xFE9
 17707                           wreg	equ	0xFE8
 17708                           postdec1	equ	0xFE5
 17709                           fsr1h	equ	0xFE2
 17710                           fsr1l	equ	0xFE1
 17711                           indf2	equ	0xFDF
 17712                           postinc2	equ	0xFDE
 17713                           postdec2	equ	0xFDD
 17714                           fsr2h	equ	0xFDA
 17715                           fsr2l	equ	0xFD9
 17716                           status	equ	0xFD8
 17717                           
 17718 ;; *************** function _change_state_to_logs_33 *****************
 17719 ;; Defined at:
 17720 ;;		line 542 in file "UI.c"
 17721 ;; Parameters:    Size  Location     Type
 17722 ;;		None
 17723 ;; Auto vars:     Size  Location     Type
 17724 ;;		None
 17725 ;; Return value:  Size  Location     Type
 17726 ;;                  1    wreg      void 
 17727 ;; Registers used:
 17728 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17729 ;; Tracked objects:
 17730 ;;		On entry : 0/0
 17731 ;;		On exit  : 0/0
 17732 ;;		Unchanged: 0/0
 17733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17734 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17735 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17736 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17737 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17738 ;;Total ram usage:        0 bytes
 17739 ;; Hardware stack levels used:    1
 17740 ;; Hardware stack levels required when called:    3
 17741 ;; This function calls:
 17742 ;;		i2_lcdInst
 17743 ;;		i2_printf
 17744 ;; This function is called by:
 17745 ;;		_updateMenu
 17746 ;;		_inputHandler
 17747 ;; This function uses a non-reentrant model
 17748 ;;
 17749                           
 17750                           	psect	text68
 17751  004278                     __ptext68:
 17752                           	opt stack 0
 17753  004278                     _change_state_to_logs_33:
 17754                           	opt stack 18
 17755                           
 17756                           ;UI.c: 543: cur_state = 1033;
 17757                           
 17758                           ;incstack = 0
 17759  004278  0E04               	movlw	4
 17760  00427A  0100               	movlb	0	; () banked
 17761  00427C  6FE1               	movwf	(_cur_state+1)& (0+255),b
 17762  00427E  0E09               	movlw	9
 17763  004280  6FE0               	movwf	_cur_state& (0+255),b
 17764                           
 17765                           ; BSR set to: 0
 17766                           ;UI.c: 544: lcdInst(0b10000000);;
 17767  004282  0E80               	movlw	128
 17768  004284  ECFE  F022         	call	i2_lcdInst
 17769                           
 17770                           ;UI.c: 545: printf("LOG 3          <");
 17771  004288  0EB9               	movlw	low STR_46
 17772  00428A  6E0D               	movwf	i2printf@f,c
 17773  00428C  0EFD               	movlw	high STR_46
 17774  00428E  6E0E               	movwf	i2printf@f+1,c
 17775  004290  ECB8  F00A         	call	i2_printf	;wreg free
 17776                           
 17777                           ;UI.c: 546: lcdInst(0b11000000);;
 17778  004294  0EC0               	movlw	192
 17779  004296  ECFE  F022         	call	i2_lcdInst
 17780                           
 17781                           ;UI.c: 547: printf("LOG 4           ");
 17782  00429A  0E20               	movlw	low STR_48
 17783  00429C  6E0D               	movwf	i2printf@f,c
 17784  00429E  0EFD               	movlw	high STR_48
 17785  0042A0  6E0E               	movwf	i2printf@f+1,c
 17786  0042A2  ECB8  F00A         	call	i2_printf	;wreg free
 17787  0042A6  0012               	return		;funcret
 17788  0042A8                     __end_of_change_state_to_logs_33:
 17789                           	opt stack 0
 17790                           pclatu	equ	0xFFB
 17791                           pclath	equ	0xFFA
 17792                           tblptru	equ	0xFF8
 17793                           tblptrh	equ	0xFF7
 17794                           tblptrl	equ	0xFF6
 17795                           tablat	equ	0xFF5
 17796                           prodh	equ	0xFF4
 17797                           prodl	equ	0xFF3
 17798                           intcon	equ	0xFF2
 17799                           intcon2	equ	0xFF1
 17800                           intcon3	equ	0xFF0
 17801                           indf0	equ	0xFEF
 17802                           postinc0	equ	0xFEE
 17803                           fsr0h	equ	0xFEA
 17804                           fsr0l	equ	0xFE9
 17805                           wreg	equ	0xFE8
 17806                           postdec1	equ	0xFE5
 17807                           fsr1h	equ	0xFE2
 17808                           fsr1l	equ	0xFE1
 17809                           indf2	equ	0xFDF
 17810                           postinc2	equ	0xFDE
 17811                           postdec2	equ	0xFDD
 17812                           fsr2h	equ	0xFDA
 17813                           fsr2l	equ	0xFD9
 17814                           status	equ	0xFD8
 17815                           
 17816 ;; *************** function _change_state_to_logs_23 *****************
 17817 ;; Defined at:
 17818 ;;		line 535 in file "UI.c"
 17819 ;; Parameters:    Size  Location     Type
 17820 ;;		None
 17821 ;; Auto vars:     Size  Location     Type
 17822 ;;		None
 17823 ;; Return value:  Size  Location     Type
 17824 ;;                  1    wreg      void 
 17825 ;; Registers used:
 17826 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17827 ;; Tracked objects:
 17828 ;;		On entry : 0/0
 17829 ;;		On exit  : 0/0
 17830 ;;		Unchanged: 0/0
 17831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17832 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17833 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17834 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17835 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17836 ;;Total ram usage:        0 bytes
 17837 ;; Hardware stack levels used:    1
 17838 ;; Hardware stack levels required when called:    3
 17839 ;; This function calls:
 17840 ;;		i2_lcdInst
 17841 ;;		i2_printf
 17842 ;; This function is called by:
 17843 ;;		_updateMenu
 17844 ;;		_inputHandler
 17845 ;; This function uses a non-reentrant model
 17846 ;;
 17847                           
 17848                           	psect	text69
 17849  004394                     __ptext69:
 17850                           	opt stack 0
 17851  004394                     _change_state_to_logs_23:
 17852                           	opt stack 18
 17853                           
 17854                           ;UI.c: 536: cur_state = 1023;
 17855                           
 17856                           ;incstack = 0
 17857  004394  0E03               	movlw	3
 17858  004396  0100               	movlb	0	; () banked
 17859  004398  6FE1               	movwf	(_cur_state+1)& (0+255),b
 17860  00439A  69E0               	setf	_cur_state& (0+255),b
 17861                           
 17862                           ; BSR set to: 0
 17863                           ;UI.c: 537: lcdInst(0b10000000);;
 17864  00439C  0E80               	movlw	128
 17865  00439E  ECFE  F022         	call	i2_lcdInst
 17866                           
 17867                           ;UI.c: 538: printf("LOG 2           ");
 17868  0043A2  0EFE               	movlw	low STR_40
 17869  0043A4  6E0D               	movwf	i2printf@f,c
 17870  0043A6  0EFC               	movlw	high STR_40
 17871  0043A8  6E0E               	movwf	i2printf@f+1,c
 17872  0043AA  ECB8  F00A         	call	i2_printf	;wreg free
 17873                           
 17874                           ;UI.c: 539: lcdInst(0b11000000);;
 17875  0043AE  0EC0               	movlw	192
 17876  0043B0  ECFE  F022         	call	i2_lcdInst
 17877                           
 17878                           ;UI.c: 540: printf("LOG 3          <");
 17879  0043B4  0EB9               	movlw	low STR_46
 17880  0043B6  6E0D               	movwf	i2printf@f,c
 17881  0043B8  0EFD               	movlw	high STR_46
 17882  0043BA  6E0E               	movwf	i2printf@f+1,c
 17883  0043BC  ECB8  F00A         	call	i2_printf	;wreg free
 17884  0043C0  0012               	return		;funcret
 17885  0043C2                     __end_of_change_state_to_logs_23:
 17886                           	opt stack 0
 17887                           pclatu	equ	0xFFB
 17888                           pclath	equ	0xFFA
 17889                           tblptru	equ	0xFF8
 17890                           tblptrh	equ	0xFF7
 17891                           tblptrl	equ	0xFF6
 17892                           tablat	equ	0xFF5
 17893                           prodh	equ	0xFF4
 17894                           prodl	equ	0xFF3
 17895                           intcon	equ	0xFF2
 17896                           intcon2	equ	0xFF1
 17897                           intcon3	equ	0xFF0
 17898                           indf0	equ	0xFEF
 17899                           postinc0	equ	0xFEE
 17900                           fsr0h	equ	0xFEA
 17901                           fsr0l	equ	0xFE9
 17902                           wreg	equ	0xFE8
 17903                           postdec1	equ	0xFE5
 17904                           fsr1h	equ	0xFE2
 17905                           fsr1l	equ	0xFE1
 17906                           indf2	equ	0xFDF
 17907                           postinc2	equ	0xFDE
 17908                           postdec2	equ	0xFDD
 17909                           fsr2h	equ	0xFDA
 17910                           fsr2l	equ	0xFD9
 17911                           status	equ	0xFD8
 17912                           
 17913 ;; *************** function _change_state_to_logs_22 *****************
 17914 ;; Defined at:
 17915 ;;		line 528 in file "UI.c"
 17916 ;; Parameters:    Size  Location     Type
 17917 ;;		None
 17918 ;; Auto vars:     Size  Location     Type
 17919 ;;		None
 17920 ;; Return value:  Size  Location     Type
 17921 ;;                  1    wreg      void 
 17922 ;; Registers used:
 17923 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17924 ;; Tracked objects:
 17925 ;;		On entry : 0/0
 17926 ;;		On exit  : 0/0
 17927 ;;		Unchanged: 0/0
 17928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17929 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17930 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17931 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17932 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17933 ;;Total ram usage:        0 bytes
 17934 ;; Hardware stack levels used:    1
 17935 ;; Hardware stack levels required when called:    3
 17936 ;; This function calls:
 17937 ;;		i2_lcdInst
 17938 ;;		i2_printf
 17939 ;; This function is called by:
 17940 ;;		_updateMenu
 17941 ;;		_inputHandler
 17942 ;; This function uses a non-reentrant model
 17943 ;;
 17944                           
 17945                           	psect	text70
 17946  0042A8                     __ptext70:
 17947                           	opt stack 0
 17948  0042A8                     _change_state_to_logs_22:
 17949                           	opt stack 18
 17950                           
 17951                           ;UI.c: 529: cur_state = 1022;
 17952                           
 17953                           ;incstack = 0
 17954  0042A8  0E03               	movlw	3
 17955  0042AA  0100               	movlb	0	; () banked
 17956  0042AC  6FE1               	movwf	(_cur_state+1)& (0+255),b
 17957  0042AE  0EFE               	movlw	254
 17958  0042B0  6FE0               	movwf	_cur_state& (0+255),b
 17959                           
 17960                           ; BSR set to: 0
 17961                           ;UI.c: 530: lcdInst(0b10000000);;
 17962  0042B2  0E80               	movlw	128
 17963  0042B4  ECFE  F022         	call	i2_lcdInst
 17964                           
 17965                           ;UI.c: 531: printf("LOG 2          <");
 17966  0042B8  0EA8               	movlw	low STR_42
 17967  0042BA  6E0D               	movwf	i2printf@f,c
 17968  0042BC  0EFD               	movlw	high STR_42
 17969  0042BE  6E0E               	movwf	i2printf@f+1,c
 17970  0042C0  ECB8  F00A         	call	i2_printf	;wreg free
 17971                           
 17972                           ;UI.c: 532: lcdInst(0b11000000);;
 17973  0042C4  0EC0               	movlw	192
 17974  0042C6  ECFE  F022         	call	i2_lcdInst
 17975                           
 17976                           ;UI.c: 533: printf("LOG 3           ");
 17977  0042CA  0E0F               	movlw	low STR_44
 17978  0042CC  6E0D               	movwf	i2printf@f,c
 17979  0042CE  0EFD               	movlw	high STR_44
 17980  0042D0  6E0E               	movwf	i2printf@f+1,c
 17981  0042D2  ECB8  F00A         	call	i2_printf	;wreg free
 17982  0042D6  0012               	return		;funcret
 17983  0042D8                     __end_of_change_state_to_logs_22:
 17984                           	opt stack 0
 17985                           pclatu	equ	0xFFB
 17986                           pclath	equ	0xFFA
 17987                           tblptru	equ	0xFF8
 17988                           tblptrh	equ	0xFF7
 17989                           tblptrl	equ	0xFF6
 17990                           tablat	equ	0xFF5
 17991                           prodh	equ	0xFF4
 17992                           prodl	equ	0xFF3
 17993                           intcon	equ	0xFF2
 17994                           intcon2	equ	0xFF1
 17995                           intcon3	equ	0xFF0
 17996                           indf0	equ	0xFEF
 17997                           postinc0	equ	0xFEE
 17998                           fsr0h	equ	0xFEA
 17999                           fsr0l	equ	0xFE9
 18000                           wreg	equ	0xFE8
 18001                           postdec1	equ	0xFE5
 18002                           fsr1h	equ	0xFE2
 18003                           fsr1l	equ	0xFE1
 18004                           indf2	equ	0xFDF
 18005                           postinc2	equ	0xFDE
 18006                           postdec2	equ	0xFDD
 18007                           fsr2h	equ	0xFDA
 18008                           fsr2l	equ	0xFD9
 18009                           status	equ	0xFD8
 18010                           
 18011 ;; *************** function _change_state_to_logs_12 *****************
 18012 ;; Defined at:
 18013 ;;		line 521 in file "UI.c"
 18014 ;; Parameters:    Size  Location     Type
 18015 ;;		None
 18016 ;; Auto vars:     Size  Location     Type
 18017 ;;		None
 18018 ;; Return value:  Size  Location     Type
 18019 ;;                  1    wreg      void 
 18020 ;; Registers used:
 18021 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18022 ;; Tracked objects:
 18023 ;;		On entry : 0/0
 18024 ;;		On exit  : 0/0
 18025 ;;		Unchanged: 0/0
 18026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18027 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18028 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18029 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18030 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18031 ;;Total ram usage:        0 bytes
 18032 ;; Hardware stack levels used:    1
 18033 ;; Hardware stack levels required when called:    3
 18034 ;; This function calls:
 18035 ;;		i2_lcdInst
 18036 ;;		i2_printf
 18037 ;; This function is called by:
 18038 ;;		_updateMenu
 18039 ;;		_inputHandler
 18040 ;; This function uses a non-reentrant model
 18041 ;;
 18042                           
 18043                           	psect	text71
 18044  0042D8                     __ptext71:
 18045                           	opt stack 0
 18046  0042D8                     _change_state_to_logs_12:
 18047                           	opt stack 18
 18048                           
 18049                           ;UI.c: 522: cur_state = 1012;
 18050                           
 18051                           ;incstack = 0
 18052  0042D8  0E03               	movlw	3
 18053  0042DA  0100               	movlb	0	; () banked
 18054  0042DC  6FE1               	movwf	(_cur_state+1)& (0+255),b
 18055  0042DE  0EF4               	movlw	244
 18056  0042E0  6FE0               	movwf	_cur_state& (0+255),b
 18057                           
 18058                           ; BSR set to: 0
 18059                           ;UI.c: 523: lcdInst(0b10000000);;
 18060  0042E2  0E80               	movlw	128
 18061  0042E4  ECFE  F022         	call	i2_lcdInst
 18062                           
 18063                           ;UI.c: 524: printf("LOG 1           ");
 18064  0042E8  0EED               	movlw	low STR_41
 18065  0042EA  6E0D               	movwf	i2printf@f,c
 18066  0042EC  0EFC               	movlw	high STR_41
 18067  0042EE  6E0E               	movwf	i2printf@f+1,c
 18068  0042F0  ECB8  F00A         	call	i2_printf	;wreg free
 18069                           
 18070                           ;UI.c: 525: lcdInst(0b11000000);;
 18071  0042F4  0EC0               	movlw	192
 18072  0042F6  ECFE  F022         	call	i2_lcdInst
 18073                           
 18074                           ;UI.c: 526: printf("LOG 2          <");
 18075  0042FA  0EA8               	movlw	low STR_42
 18076  0042FC  6E0D               	movwf	i2printf@f,c
 18077  0042FE  0EFD               	movlw	high STR_42
 18078  004300  6E0E               	movwf	i2printf@f+1,c
 18079  004302  ECB8  F00A         	call	i2_printf	;wreg free
 18080  004306  0012               	return		;funcret
 18081  004308                     __end_of_change_state_to_logs_12:
 18082                           	opt stack 0
 18083                           pclatu	equ	0xFFB
 18084                           pclath	equ	0xFFA
 18085                           tblptru	equ	0xFF8
 18086                           tblptrh	equ	0xFF7
 18087                           tblptrl	equ	0xFF6
 18088                           tablat	equ	0xFF5
 18089                           prodh	equ	0xFF4
 18090                           prodl	equ	0xFF3
 18091                           intcon	equ	0xFF2
 18092                           intcon2	equ	0xFF1
 18093                           intcon3	equ	0xFF0
 18094                           indf0	equ	0xFEF
 18095                           postinc0	equ	0xFEE
 18096                           fsr0h	equ	0xFEA
 18097                           fsr0l	equ	0xFE9
 18098                           wreg	equ	0xFE8
 18099                           postdec1	equ	0xFE5
 18100                           fsr1h	equ	0xFE2
 18101                           fsr1l	equ	0xFE1
 18102                           indf2	equ	0xFDF
 18103                           postinc2	equ	0xFDE
 18104                           postdec2	equ	0xFDD
 18105                           fsr2h	equ	0xFDA
 18106                           fsr2l	equ	0xFD9
 18107                           status	equ	0xFD8
 18108                           
 18109 ;; *************** function _change_state_to_logs_11 *****************
 18110 ;; Defined at:
 18111 ;;		line 514 in file "UI.c"
 18112 ;; Parameters:    Size  Location     Type
 18113 ;;		None
 18114 ;; Auto vars:     Size  Location     Type
 18115 ;;		None
 18116 ;; Return value:  Size  Location     Type
 18117 ;;                  1    wreg      void 
 18118 ;; Registers used:
 18119 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18120 ;; Tracked objects:
 18121 ;;		On entry : 0/0
 18122 ;;		On exit  : 0/0
 18123 ;;		Unchanged: 0/0
 18124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18125 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18126 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18127 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18128 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18129 ;;Total ram usage:        0 bytes
 18130 ;; Hardware stack levels used:    1
 18131 ;; Hardware stack levels required when called:    3
 18132 ;; This function calls:
 18133 ;;		i2_lcdInst
 18134 ;;		i2_printf
 18135 ;; This function is called by:
 18136 ;;		_updateMenu
 18137 ;;		_inputHandler
 18138 ;; This function uses a non-reentrant model
 18139 ;;
 18140                           
 18141                           	psect	text72
 18142  004308                     __ptext72:
 18143                           	opt stack 0
 18144  004308                     _change_state_to_logs_11:
 18145                           	opt stack 18
 18146                           
 18147                           ;UI.c: 515: cur_state = 1011;
 18148                           
 18149                           ;incstack = 0
 18150  004308  0E03               	movlw	3
 18151  00430A  0100               	movlb	0	; () banked
 18152  00430C  6FE1               	movwf	(_cur_state+1)& (0+255),b
 18153  00430E  0EF3               	movlw	243
 18154  004310  6FE0               	movwf	_cur_state& (0+255),b
 18155                           
 18156                           ; BSR set to: 0
 18157                           ;UI.c: 516: lcdInst(0b10000000);;
 18158  004312  0E80               	movlw	128
 18159  004314  ECFE  F022         	call	i2_lcdInst
 18160                           
 18161                           ;UI.c: 517: printf("LOG 1          <");
 18162  004318  0E97               	movlw	low STR_39
 18163  00431A  6E0D               	movwf	i2printf@f,c
 18164  00431C  0EFD               	movlw	high STR_39
 18165  00431E  6E0E               	movwf	i2printf@f+1,c
 18166  004320  ECB8  F00A         	call	i2_printf	;wreg free
 18167                           
 18168                           ;UI.c: 518: lcdInst(0b11000000);;
 18169  004324  0EC0               	movlw	192
 18170  004326  ECFE  F022         	call	i2_lcdInst
 18171                           
 18172                           ;UI.c: 519: printf("LOG 2           ");
 18173  00432A  0EFE               	movlw	low STR_40
 18174  00432C  6E0D               	movwf	i2printf@f,c
 18175  00432E  0EFC               	movlw	high STR_40
 18176  004330  6E0E               	movwf	i2printf@f+1,c
 18177  004332  ECB8  F00A         	call	i2_printf	;wreg free
 18178  004336  0012               	return		;funcret
 18179  004338                     __end_of_change_state_to_logs_11:
 18180                           	opt stack 0
 18181                           pclatu	equ	0xFFB
 18182                           pclath	equ	0xFFA
 18183                           tblptru	equ	0xFF8
 18184                           tblptrh	equ	0xFF7
 18185                           tblptrl	equ	0xFF6
 18186                           tablat	equ	0xFF5
 18187                           prodh	equ	0xFF4
 18188                           prodl	equ	0xFF3
 18189                           intcon	equ	0xFF2
 18190                           intcon2	equ	0xFF1
 18191                           intcon3	equ	0xFF0
 18192                           indf0	equ	0xFEF
 18193                           postinc0	equ	0xFEE
 18194                           fsr0h	equ	0xFEA
 18195                           fsr0l	equ	0xFE9
 18196                           wreg	equ	0xFE8
 18197                           postdec1	equ	0xFE5
 18198                           fsr1h	equ	0xFE2
 18199                           fsr1l	equ	0xFE1
 18200                           indf2	equ	0xFDF
 18201                           postinc2	equ	0xFDE
 18202                           postdec2	equ	0xFDD
 18203                           fsr2h	equ	0xFDA
 18204                           fsr2l	equ	0xFD9
 18205                           status	equ	0xFD8
 18206                           
 18207 ;; *************** function _dispLogs *****************
 18208 ;; Defined at:
 18209 ;;		line 467 in file "UI.c"
 18210 ;; Parameters:    Size  Location     Type
 18211 ;;  myLog           2   17[COMRAM] int 
 18212 ;; Auto vars:     Size  Location     Type
 18213 ;;		None
 18214 ;; Return value:  Size  Location     Type
 18215 ;;                  1    wreg      void 
 18216 ;; Registers used:
 18217 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18218 ;; Tracked objects:
 18219 ;;		On entry : 0/0
 18220 ;;		On exit  : 0/0
 18221 ;;		Unchanged: 0/0
 18222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18223 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18224 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18225 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18226 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18227 ;;Total ram usage:        2 bytes
 18228 ;; Hardware stack levels used:    1
 18229 ;; Hardware stack levels required when called:    2
 18230 ;; This function calls:
 18231 ;;		_retrieveLog
 18232 ;; This function is called by:
 18233 ;;		_updateMenu
 18234 ;; This function uses a non-reentrant model
 18235 ;;
 18236                           
 18237                           	psect	text73
 18238  0044E0                     __ptext73:
 18239                           	opt stack 0
 18240  0044E0                     _dispLogs:
 18241                           	opt stack 20
 18242                           
 18243                           ;UI.c: 468: logstate = 1;
 18244                           
 18245                           ;incstack = 0
 18246  0044E0  0E00               	movlw	0
 18247  0044E2  0100               	movlb	0	; () banked
 18248  0044E4  6FF7               	movwf	(_logstate+1)& (0+255),b
 18249  0044E6  0E01               	movlw	1
 18250  0044E8  6FF6               	movwf	_logstate& (0+255),b
 18251                           
 18252                           ; BSR set to: 0
 18253                           ;UI.c: 469: log = myLog;
 18254  0044EA  C012  F0E6         	movff	dispLogs@myLog,_log
 18255  0044EE  C013  F0E7         	movff	dispLogs@myLog+1,_log+1
 18256                           
 18257                           ; BSR set to: 0
 18258                           ;UI.c: 470: retrieveLog(myLog - 1);
 18259  0044F2  0EFF               	movlw	255
 18260  0044F4  2412               	addwf	dispLogs@myLog,w,c
 18261  0044F6  6E07               	movwf	retrieveLog@logNum,c
 18262  0044F8  0EFF               	movlw	255
 18263  0044FA  2013               	addwfc	dispLogs@myLog+1,w,c
 18264  0044FC  6E08               	movwf	retrieveLog@logNum+1,c
 18265  0044FE  ECD3  F017         	call	_retrieveLog	;wreg free
 18266  004502  0012               	return		;funcret
 18267  004504                     __end_of_dispLogs:
 18268                           	opt stack 0
 18269                           pclatu	equ	0xFFB
 18270                           pclath	equ	0xFFA
 18271                           tblptru	equ	0xFF8
 18272                           tblptrh	equ	0xFF7
 18273                           tblptrl	equ	0xFF6
 18274                           tablat	equ	0xFF5
 18275                           prodh	equ	0xFF4
 18276                           prodl	equ	0xFF3
 18277                           intcon	equ	0xFF2
 18278                           intcon2	equ	0xFF1
 18279                           intcon3	equ	0xFF0
 18280                           indf0	equ	0xFEF
 18281                           postinc0	equ	0xFEE
 18282                           fsr0h	equ	0xFEA
 18283                           fsr0l	equ	0xFE9
 18284                           wreg	equ	0xFE8
 18285                           postdec1	equ	0xFE5
 18286                           fsr1h	equ	0xFE2
 18287                           fsr1l	equ	0xFE1
 18288                           indf2	equ	0xFDF
 18289                           postinc2	equ	0xFDE
 18290                           postdec2	equ	0xFDD
 18291                           fsr2h	equ	0xFDA
 18292                           fsr2l	equ	0xFD9
 18293                           status	equ	0xFD8
 18294                           
 18295 ;; *************** function _retrieveLog *****************
 18296 ;; Defined at:
 18297 ;;		line 134 in file "EEPROM.c"
 18298 ;; Parameters:    Size  Location     Type
 18299 ;;  logNum          2    6[COMRAM] int 
 18300 ;; Auto vars:     Size  Location     Type
 18301 ;;  i               2   13[COMRAM] int 
 18302 ;;  addr            2   15[COMRAM] unsigned short 
 18303 ;;  byte3           1   12[COMRAM] unsigned char 
 18304 ;;  byte2           1   11[COMRAM] unsigned char 
 18305 ;;  byte1           1   10[COMRAM] unsigned char 
 18306 ;; Return value:  Size  Location     Type
 18307 ;;                  1    wreg      void 
 18308 ;; Registers used:
 18309 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18310 ;; Tracked objects:
 18311 ;;		On entry : 0/0
 18312 ;;		On exit  : 0/0
 18313 ;;		Unchanged: 0/0
 18314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18315 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18316 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18317 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18318 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18319 ;;Total ram usage:       11 bytes
 18320 ;; Hardware stack levels used:    1
 18321 ;; Hardware stack levels required when called:    1
 18322 ;; This function calls:
 18323 ;;		i2_EEPROM_read
 18324 ;;		i2___wmul
 18325 ;; This function is called by:
 18326 ;;		_dispLogs
 18327 ;; This function uses a non-reentrant model
 18328 ;;
 18329                           
 18330                           	psect	text74
 18331  002FA6                     __ptext74:
 18332                           	opt stack 0
 18333  002FA6                     _retrieveLog:
 18334                           	opt stack 20
 18335                           
 18336                           ;EEPROM.c: 140: unsigned short addr = 1 + logNum * 11;
 18337                           
 18338                           ;incstack = 0
 18339  002FA6  C007  F001         	movff	retrieveLog@logNum,i2___wmul@multiplier
 18340  002FAA  C008  F002         	movff	retrieveLog@logNum+1,i2___wmul@multiplier+1
 18341  002FAE  0E00               	movlw	0
 18342  002FB0  6E04               	movwf	i2___wmul@multiplicand+1,c
 18343  002FB2  0E0B               	movlw	11
 18344  002FB4  6E03               	movwf	i2___wmul@multiplicand,c
 18345  002FB6  EC4A  F022         	call	i2___wmul	;wreg free
 18346  002FBA  0E01               	movlw	1
 18347  002FBC  2401               	addwf	?i2___wmul,w,c
 18348  002FBE  6E10               	movwf	retrieveLog@addr,c
 18349  002FC0  0E00               	movlw	0
 18350  002FC2  2002               	addwfc	?i2___wmul+1,w,c
 18351  002FC4  6E11               	movwf	retrieveLog@addr+1,c
 18352                           
 18353                           ;EEPROM.c: 143: unsigned char byte1 = EEPROM_read(addr);
 18354  002FC6  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 18355  002FCA  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 18356  002FCE  ECCA  F022         	call	i2_EEPROM_read	;wreg free
 18357  002FD2  6E0B               	movwf	retrieveLog@byte1,c
 18358                           
 18359                           ;EEPROM.c: 144: log_completion = (int)(byte1 & 0b10000000);
 18360  002FD4  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 18361  002FD8  0E80               	movlw	128
 18362  002FDA  1609               	andwf	??_retrieveLog,f,c
 18363  002FDC  5009               	movf	??_retrieveLog,w,c
 18364  002FDE  0100               	movlb	0	; () banked
 18365  002FE0  6FE8               	movwf	_log_completion& (0+255),b
 18366  002FE2  6BE9               	clrf	(_log_completion+1)& (0+255),b
 18367                           
 18368                           ; BSR set to: 0
 18369                           ;EEPROM.c: 145: log_count_total = (int)(byte1 & 0b00001111);
 18370  002FE4  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 18371  002FE8  0E0F               	movlw	15
 18372  002FEA  1609               	andwf	??_retrieveLog,f,c
 18373  002FEC  5009               	movf	??_retrieveLog,w,c
 18374  002FEE  0100               	movlb	0	; () banked
 18375  002FF0  6FF2               	movwf	_log_count_total& (0+255),b
 18376  002FF2  6BF3               	clrf	(_log_count_total+1)& (0+255),b
 18377                           
 18378                           ; BSR set to: 0
 18379                           ;EEPROM.c: 146: addr++;
 18380  002FF4  4A10               	infsnz	retrieveLog@addr,f,c
 18381  002FF6  2A11               	incf	retrieveLog@addr+1,f,c
 18382                           
 18383                           ; BSR set to: 0
 18384                           ;EEPROM.c: 149: unsigned char byte2 = EEPROM_read(addr);
 18385  002FF8  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 18386  002FFC  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 18387  003000  ECCA  F022         	call	i2_EEPROM_read	;wreg free
 18388  003004  6E0C               	movwf	retrieveLog@byte2,c
 18389                           
 18390                           ;EEPROM.c: 150: log_count_pop_no_tab = (int)(byte2 & 0b11110000);
 18391  003006  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 18392  00300A  0EF0               	movlw	240
 18393  00300C  1609               	andwf	??_retrieveLog,f,c
 18394  00300E  5009               	movf	??_retrieveLog,w,c
 18395  003010  0100               	movlb	0	; () banked
 18396  003012  6FEE               	movwf	_log_count_pop_no_tab& (0+255),b
 18397  003014  6BEF               	clrf	(_log_count_pop_no_tab+1)& (0+255),b
 18398                           
 18399                           ; BSR set to: 0
 18400                           ;EEPROM.c: 151: log_count_pop_w_tab = (int)(byte2 & 0b00001111);
 18401  003016  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 18402  00301A  0E0F               	movlw	15
 18403  00301C  1609               	andwf	??_retrieveLog,f,c
 18404  00301E  5009               	movf	??_retrieveLog,w,c
 18405  003020  0100               	movlb	0	; () banked
 18406  003022  6FF0               	movwf	_log_count_pop_w_tab& (0+255),b
 18407  003024  6BF1               	clrf	(_log_count_pop_w_tab+1)& (0+255),b
 18408                           
 18409                           ; BSR set to: 0
 18410                           ;EEPROM.c: 152: addr++;
 18411  003026  4A10               	infsnz	retrieveLog@addr,f,c
 18412  003028  2A11               	incf	retrieveLog@addr+1,f,c
 18413                           
 18414                           ; BSR set to: 0
 18415                           ;EEPROM.c: 153: unsigned char byte3 = EEPROM_read(addr);
 18416  00302A  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 18417  00302E  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 18418  003032  ECCA  F022         	call	i2_EEPROM_read	;wreg free
 18419  003036  6E0D               	movwf	retrieveLog@byte3,c
 18420                           
 18421                           ;EEPROM.c: 154: log_count_can_w_lab = (int)(byte3 & 0b11110000);
 18422  003038  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 18423  00303C  0EF0               	movlw	240
 18424  00303E  1609               	andwf	??_retrieveLog,f,c
 18425  003040  5009               	movf	??_retrieveLog,w,c
 18426  003042  0100               	movlb	0	; () banked
 18427  003044  6FEC               	movwf	_log_count_can_w_lab& (0+255),b
 18428  003046  6BED               	clrf	(_log_count_can_w_lab+1)& (0+255),b
 18429                           
 18430                           ; BSR set to: 0
 18431                           ;EEPROM.c: 155: log_count_can_no_lab = (int)(byte3 & 0b00001111);
 18432  003048  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 18433  00304C  0E0F               	movlw	15
 18434  00304E  1609               	andwf	??_retrieveLog,f,c
 18435  003050  5009               	movf	??_retrieveLog,w,c
 18436  003052  0100               	movlb	0	; () banked
 18437  003054  6FEA               	movwf	_log_count_can_no_lab& (0+255),b
 18438  003056  6BEB               	clrf	(_log_count_can_no_lab+1)& (0+255),b
 18439                           
 18440                           ; BSR set to: 0
 18441                           ;EEPROM.c: 156: addr++;
 18442  003058  4A10               	infsnz	retrieveLog@addr,f,c
 18443  00305A  2A11               	incf	retrieveLog@addr+1,f,c
 18444                           
 18445                           ; BSR set to: 0
 18446                           ;EEPROM.c: 159: for(int i = 0; i < 7; i++){
 18447  00305C  0E00               	movlw	0
 18448  00305E  6E0F               	movwf	retrieveLog@i+1,c
 18449  003060  0E00               	movlw	0
 18450  003062  6E0E               	movwf	retrieveLog@i,c
 18451  003064                     i2l5882:
 18452                           
 18453                           ; BSR set to: 0
 18454  003064  BE0F               	btfsc	retrieveLog@i+1,7,c
 18455  003066  D006               	goto	i2l5886
 18456  003068  500F               	movf	retrieveLog@i+1,w,c
 18457  00306A  E11E               	bnz	i2l5894
 18458  00306C  0E07               	movlw	7
 18459  00306E  5C0E               	subwf	retrieveLog@i,w,c
 18460  003070  B0D8               	btfsc	status,0,c
 18461  003072  D01A               	goto	i2l5894
 18462  003074                     i2l5886:
 18463                           
 18464                           ;EEPROM.c: 160: log_startTime[i] = (int)EEPROM_read(addr);
 18465  003074  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 18466  003078  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 18467  00307C  ECCA  F022         	call	i2_EEPROM_read	;wreg free
 18468  003080  6E09               	movwf	??_retrieveLog& (0+255),c
 18469  003082  6A0A               	clrf	(??_retrieveLog+1)& (0+255),c
 18470  003084  90D8               	bcf	status,0,c
 18471  003086  340E               	rlcf	retrieveLog@i,w,c
 18472  003088  6ED9               	movwf	fsr2l,c
 18473  00308A  340F               	rlcf	retrieveLog@i+1,w,c
 18474  00308C  6EDA               	movwf	fsr2h,c
 18475  00308E  0E00               	movlw	low _log_startTime
 18476  003090  26D9               	addwf	fsr2l,f,c
 18477  003092  0E01               	movlw	high _log_startTime
 18478  003094  22DA               	addwfc	fsr2h,f,c
 18479  003096  C009  FFDE         	movff	??_retrieveLog,postinc2
 18480  00309A  C00A  FFDD         	movff	??_retrieveLog+1,postdec2
 18481                           
 18482                           ;EEPROM.c: 161: addr++;
 18483  00309E  4A10               	infsnz	retrieveLog@addr,f,c
 18484  0030A0  2A11               	incf	retrieveLog@addr+1,f,c
 18485  0030A2  4A0E               	infsnz	retrieveLog@i,f,c
 18486  0030A4  2A0F               	incf	retrieveLog@i+1,f,c
 18487  0030A6  D7DE               	goto	i2l5882
 18488  0030A8                     i2l5894:
 18489                           
 18490                           ;EEPROM.c: 162: }
 18491                           ;EEPROM.c: 165: log_total_time = (int)EEPROM_read(addr);
 18492  0030A8  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 18493  0030AC  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 18494  0030B0  ECCA  F022         	call	i2_EEPROM_read	;wreg free
 18495  0030B4  6E09               	movwf	??_retrieveLog& (0+255),c
 18496  0030B6  5009               	movf	??_retrieveLog,w,c
 18497  0030B8  0100               	movlb	0	; () banked
 18498  0030BA  6FF4               	movwf	_log_total_time& (0+255),b
 18499  0030BC  6BF5               	clrf	(_log_total_time+1)& (0+255),b
 18500                           
 18501                           ; BSR set to: 0
 18502  0030BE  0012               	return		;funcret
 18503  0030C0                     __end_of_retrieveLog:
 18504                           	opt stack 0
 18505                           pclatu	equ	0xFFB
 18506                           pclath	equ	0xFFA
 18507                           tblptru	equ	0xFF8
 18508                           tblptrh	equ	0xFF7
 18509                           tblptrl	equ	0xFF6
 18510                           tablat	equ	0xFF5
 18511                           prodh	equ	0xFF4
 18512                           prodl	equ	0xFF3
 18513                           intcon	equ	0xFF2
 18514                           intcon2	equ	0xFF1
 18515                           intcon3	equ	0xFF0
 18516                           indf0	equ	0xFEF
 18517                           postinc0	equ	0xFEE
 18518                           fsr0h	equ	0xFEA
 18519                           fsr0l	equ	0xFE9
 18520                           wreg	equ	0xFE8
 18521                           postdec1	equ	0xFE5
 18522                           fsr1h	equ	0xFE2
 18523                           fsr1l	equ	0xFE1
 18524                           indf2	equ	0xFDF
 18525                           postinc2	equ	0xFDE
 18526                           postdec2	equ	0xFDD
 18527                           fsr2h	equ	0xFDA
 18528                           fsr2l	equ	0xFD9
 18529                           status	equ	0xFD8
 18530                           
 18531 ;; *************** function i2_EEPROM_read *****************
 18532 ;; Defined at:
 18533 ;;		line 68 in file "EEPROM.c"
 18534 ;; Parameters:    Size  Location     Type
 18535 ;;  address         2    0[COMRAM] unsigned short 
 18536 ;; Auto vars:     Size  Location     Type
 18537 ;;		None
 18538 ;; Return value:  Size  Location     Type
 18539 ;;                  1    wreg      unsigned char 
 18540 ;; Registers used:
 18541 ;;		wreg, status,2
 18542 ;; Tracked objects:
 18543 ;;		On entry : 0/0
 18544 ;;		On exit  : 0/0
 18545 ;;		Unchanged: 0/0
 18546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18547 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18548 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18549 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18550 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18551 ;;Total ram usage:        2 bytes
 18552 ;; Hardware stack levels used:    1
 18553 ;; This function calls:
 18554 ;;		Nothing
 18555 ;; This function is called by:
 18556 ;;		_retrieveLog
 18557 ;; This function uses a non-reentrant model
 18558 ;;
 18559                           
 18560                           	psect	text75
 18561  004594                     __ptext75:
 18562                           	opt stack 0
 18563  004594                     i2_EEPROM_read:
 18564                           	opt stack 20
 18565                           
 18566                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
 18567                           
 18568                           ; BSR set to: 0
 18569                           ;incstack = 0
 18570  004594  5002               	movf	i2EEPROM_read@address+1,w,c
 18571  004596  6EAA               	movwf	4010,c	;volatile
 18572                           
 18573                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
 18574  004598  C001  FFA9         	movff	i2EEPROM_read@address,4009	;volatile
 18575                           
 18576                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
 18577  00459C  9EA6               	bcf	4006,7,c	;volatile
 18578                           
 18579                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
 18580  00459E  9CA6               	bcf	4006,6,c	;volatile
 18581                           
 18582                           ;EEPROM.c: 75: EECON1bits.RD = 1;
 18583  0045A0  80A6               	bsf	4006,0,c	;volatile
 18584  0045A2                     i2l932:
 18585  0045A2  B0A6               	btfsc	4006,0,c	;volatile
 18586  0045A4  D7FE               	goto	i2l932
 18587                           
 18588                           ;EEPROM.c: 81: return EEDATA;
 18589  0045A6  50A8               	movf	4008,w,c	;volatile
 18590  0045A8  0012               	return	
 18591  0045AA                     __end_ofi2_EEPROM_read:
 18592                           	opt stack 0
 18593                           pclatu	equ	0xFFB
 18594                           pclath	equ	0xFFA
 18595                           tblptru	equ	0xFF8
 18596                           tblptrh	equ	0xFF7
 18597                           tblptrl	equ	0xFF6
 18598                           tablat	equ	0xFF5
 18599                           prodh	equ	0xFF4
 18600                           prodl	equ	0xFF3
 18601                           intcon	equ	0xFF2
 18602                           intcon2	equ	0xFF1
 18603                           intcon3	equ	0xFF0
 18604                           indf0	equ	0xFEF
 18605                           postinc0	equ	0xFEE
 18606                           fsr0h	equ	0xFEA
 18607                           fsr0l	equ	0xFE9
 18608                           wreg	equ	0xFE8
 18609                           postdec1	equ	0xFE5
 18610                           fsr1h	equ	0xFE2
 18611                           fsr1l	equ	0xFE1
 18612                           indf2	equ	0xFDF
 18613                           postinc2	equ	0xFDE
 18614                           postdec2	equ	0xFDD
 18615                           fsr2h	equ	0xFDA
 18616                           fsr2l	equ	0xFD9
 18617                           status	equ	0xFD8
 18618                           
 18619 ;; *************** function _printSortTimer *****************
 18620 ;; Defined at:
 18621 ;;		line 264 in file "sort.c"
 18622 ;; Parameters:    Size  Location     Type
 18623 ;;		None
 18624 ;; Auto vars:     Size  Location     Type
 18625 ;;  i               2   72[COMRAM] int 
 18626 ;;  curTime        14   46[COMRAM] int [7]
 18627 ;;  timeDiff        2   70[COMRAM] unsigned int 
 18628 ;;  sec             2   66[COMRAM] int 
 18629 ;;  min             2   64[COMRAM] int 
 18630 ;;  cur_sec         2   62[COMRAM] unsigned int 
 18631 ;;  start_sec       2   60[COMRAM] unsigned int 
 18632 ;;  hour            2   44[COMRAM] int 
 18633 ;; Return value:  Size  Location     Type
 18634 ;;                  1    wreg      void 
 18635 ;; Registers used:
 18636 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18637 ;; Tracked objects:
 18638 ;;		On entry : 0/0
 18639 ;;		On exit  : 0/0
 18640 ;;		Unchanged: 0/0
 18641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18642 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18643 ;;      Locals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18644 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18645 ;;      Totals:        33       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18646 ;;Total ram usage:       33 bytes
 18647 ;; Hardware stack levels used:    1
 18648 ;; Hardware stack levels required when called:    3
 18649 ;; This function calls:
 18650 ;;		i2___lwdiv
 18651 ;;		i2___lwmod
 18652 ;;		i2___wmul
 18653 ;;		i2_getRTC
 18654 ;;		i2_lcdInst
 18655 ;;		i2_printf
 18656 ;; This function is called by:
 18657 ;;		_handler
 18658 ;; This function uses a non-reentrant model
 18659 ;;
 18660                           
 18661                           	psect	text76
 18662  00238E                     __ptext76:
 18663                           	opt stack 0
 18664  00238E                     _printSortTimer:
 18665                           	opt stack 20
 18666                           
 18667                           ;sort.c: 265: getRTC();
 18668                           
 18669                           ;incstack = 0
 18670  00238E  EC7F  F01D         	call	i2_getRTC	;wreg free
 18671                           
 18672                           ;sort.c: 266: int curTime[7];
 18673                           ;sort.c: 267: for(int i = 0; i < 7; i++){
 18674  002392  0E00               	movlw	0
 18675  002394  6E4A               	movwf	printSortTimer@i+1,c
 18676  002396  0E00               	movlw	0
 18677  002398  6E49               	movwf	printSortTimer@i,c
 18678  00239A                     i2l7896:
 18679  00239A  BE4A               	btfsc	printSortTimer@i+1,7,c
 18680  00239C  D006               	goto	i2l7900
 18681  00239E  504A               	movf	printSortTimer@i+1,w,c
 18682  0023A0  E131               	bnz	i2l7906
 18683  0023A2  0E07               	movlw	7
 18684  0023A4  5C49               	subwf	printSortTimer@i,w,c
 18685  0023A6  B0D8               	btfsc	status,0,c
 18686  0023A8  D02D               	goto	i2l7906
 18687  0023AA                     i2l7900:
 18688                           
 18689                           ;sort.c: 268: curTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 18690  0023AA  0E24               	movlw	low _time
 18691  0023AC  2449               	addwf	printSortTimer@i,w,c
 18692  0023AE  6ED9               	movwf	fsr2l,c
 18693  0023B0  0E01               	movlw	high _time
 18694  0023B2  204A               	addwfc	printSortTimer@i+1,w,c
 18695  0023B4  6EDA               	movwf	fsr2h,c
 18696  0023B6  50DF               	movf	indf2,w,c
 18697  0023B8  6E2A               	movwf	??_printSortTimer& (0+255),c
 18698  0023BA  3A2A               	swapf	??_printSortTimer,f,c
 18699  0023BC  0E0F               	movlw	15
 18700  0023BE  162A               	andwf	??_printSortTimer,f,c
 18701  0023C0  0E0F               	movlw	15
 18702  0023C2  162A               	andwf	??_printSortTimer,f,c
 18703  0023C4  502A               	movf	??_printSortTimer,w,c
 18704  0023C6  0D0A               	mullw	10
 18705  0023C8  0E24               	movlw	low _time
 18706  0023CA  2449               	addwf	printSortTimer@i,w,c
 18707  0023CC  6ED9               	movwf	fsr2l,c
 18708  0023CE  0E01               	movlw	high _time
 18709  0023D0  204A               	addwfc	printSortTimer@i+1,w,c
 18710  0023D2  6EDA               	movwf	fsr2h,c
 18711  0023D4  50DF               	movf	indf2,w,c
 18712  0023D6  0B0F               	andlw	15
 18713  0023D8  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 18714  0023DA  6A2C               	clrf	(??_printSortTimer+2)& (0+255),c
 18715  0023DC  50F3               	movf	prodl,w,c
 18716  0023DE  262B               	addwf	??_printSortTimer+1,f,c
 18717  0023E0  50F4               	movf	prodh,w,c
 18718  0023E2  222C               	addwfc	??_printSortTimer+2,f,c
 18719  0023E4  90D8               	bcf	status,0,c
 18720  0023E6  3449               	rlcf	printSortTimer@i,w,c
 18721  0023E8  6ED9               	movwf	fsr2l,c
 18722  0023EA  344A               	rlcf	printSortTimer@i+1,w,c
 18723  0023EC  6EDA               	movwf	fsr2h,c
 18724  0023EE  0E2F               	movlw	low printSortTimer@curTime
 18725  0023F0  26D9               	addwf	fsr2l,f,c
 18726  0023F2  0E00               	movlw	high printSortTimer@curTime
 18727  0023F4  22DA               	addwfc	fsr2h,f,c
 18728  0023F6  C02B  FFDE         	movff	??_printSortTimer+1,postinc2
 18729  0023FA  C02C  FFDD         	movff	??_printSortTimer+2,postdec2
 18730  0023FE  4A49               	infsnz	printSortTimer@i,f,c
 18731  002400  2A4A               	incf	printSortTimer@i+1,f,c
 18732  002402  D7CB               	goto	i2l7896
 18733  002404                     i2l7906:
 18734                           
 18735                           ;sort.c: 269: }
 18736                           ;sort.c: 270: unsigned int start_sec = startTime[0] + startTime[1]*60 + startTime[2]*360
      +                          0;
 18737  002404  C110  F001         	movff	_startTime+2,i2___wmul@multiplier
 18738  002408  C111  F002         	movff	_startTime+3,i2___wmul@multiplier+1
 18739  00240C  0E00               	movlw	0
 18740  00240E  6E04               	movwf	i2___wmul@multiplicand+1,c
 18741  002410  0E3C               	movlw	60
 18742  002412  6E03               	movwf	i2___wmul@multiplicand,c
 18743  002414  EC4A  F022         	call	i2___wmul	;wreg free
 18744  002418  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 18745  00241C  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 18746  002420  C112  F001         	movff	_startTime+4,i2___wmul@multiplier
 18747  002424  C113  F002         	movff	_startTime+5,i2___wmul@multiplier+1
 18748  002428  0E0E               	movlw	14
 18749  00242A  6E04               	movwf	i2___wmul@multiplicand+1,c
 18750  00242C  0E10               	movlw	16
 18751  00242E  6E03               	movwf	i2___wmul@multiplicand,c
 18752  002430  EC4A  F022         	call	i2___wmul	;wreg free
 18753  002434  5001               	movf	?i2___wmul,w,c
 18754  002436  262A               	addwf	??_printSortTimer,f,c
 18755  002438  5002               	movf	?i2___wmul+1,w,c
 18756  00243A  222B               	addwfc	??_printSortTimer+1,f,c
 18757  00243C  0101               	movlb	1	; () banked
 18758  00243E  510E               	movf	_startTime& (0+255),w,b
 18759  002440  242A               	addwf	??_printSortTimer,w,c
 18760  002442  6E3D               	movwf	printSortTimer@start_sec,c
 18761  002444  0101               	movlb	1	; () banked
 18762  002446  510F               	movf	(_startTime+1)& (0+255),w,b
 18763  002448  202B               	addwfc	??_printSortTimer+1,w,c
 18764  00244A  6E3E               	movwf	printSortTimer@start_sec+1,c
 18765                           
 18766                           ;sort.c: 271: unsigned int cur_sec = curTime[0] + curTime[1]*60 + curTime[2]*3600;
 18767  00244C  C031  F001         	movff	printSortTimer@curTime+2,i2___wmul@multiplier
 18768  002450  C032  F002         	movff	printSortTimer@curTime+3,i2___wmul@multiplier+1
 18769  002454  0E00               	movlw	0
 18770  002456  6E04               	movwf	i2___wmul@multiplicand+1,c
 18771  002458  0E3C               	movlw	60
 18772  00245A  6E03               	movwf	i2___wmul@multiplicand,c
 18773  00245C  EC4A  F022         	call	i2___wmul	;wreg free
 18774  002460  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 18775  002464  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 18776  002468  C033  F001         	movff	printSortTimer@curTime+4,i2___wmul@multiplier
 18777  00246C  C034  F002         	movff	printSortTimer@curTime+5,i2___wmul@multiplier+1
 18778  002470  0E0E               	movlw	14
 18779  002472  6E04               	movwf	i2___wmul@multiplicand+1,c
 18780  002474  0E10               	movlw	16
 18781  002476  6E03               	movwf	i2___wmul@multiplicand,c
 18782  002478  EC4A  F022         	call	i2___wmul	;wreg free
 18783  00247C  5001               	movf	?i2___wmul,w,c
 18784  00247E  262A               	addwf	??_printSortTimer,f,c
 18785  002480  5002               	movf	?i2___wmul+1,w,c
 18786  002482  222B               	addwfc	??_printSortTimer+1,f,c
 18787  002484  502F               	movf	printSortTimer@curTime,w,c
 18788  002486  242A               	addwf	??_printSortTimer,w,c
 18789  002488  6E3F               	movwf	printSortTimer@cur_sec,c
 18790  00248A  5030               	movf	printSortTimer@curTime+1,w,c
 18791  00248C  202B               	addwfc	??_printSortTimer+1,w,c
 18792  00248E  6E40               	movwf	printSortTimer@cur_sec+1,c
 18793                           
 18794                           ;sort.c: 272: unsigned int timeDiff = cur_sec - start_sec;
 18795  002490  C03D  F02A         	movff	printSortTimer@start_sec,??_printSortTimer
 18796  002494  C03E  F02B         	movff	printSortTimer@start_sec+1,??_printSortTimer+1
 18797  002498  1E2A               	comf	??_printSortTimer,f,c
 18798  00249A  1E2B               	comf	??_printSortTimer+1,f,c
 18799  00249C  4A2A               	infsnz	??_printSortTimer,f,c
 18800  00249E  2A2B               	incf	??_printSortTimer+1,f,c
 18801  0024A0  503F               	movf	printSortTimer@cur_sec,w,c
 18802  0024A2  242A               	addwf	??_printSortTimer,w,c
 18803  0024A4  6E47               	movwf	printSortTimer@timeDiff,c
 18804  0024A6  5040               	movf	printSortTimer@cur_sec+1,w,c
 18805  0024A8  202B               	addwfc	??_printSortTimer+1,w,c
 18806  0024AA  6E48               	movwf	printSortTimer@timeDiff+1,c
 18807                           
 18808                           ;sort.c: 274: total_time = timeDiff;
 18809  0024AC  C047  F0F8         	movff	printSortTimer@timeDiff,_total_time
 18810  0024B0  C048  F0F9         	movff	printSortTimer@timeDiff+1,_total_time+1
 18811                           
 18812                           ;sort.c: 276: if(timeDiff >= 10){
 18813  0024B4  5048               	movf	printSortTimer@timeDiff+1,w,c
 18814  0024B6  E104               	bnz	i2u676_40
 18815  0024B8  0E0A               	movlw	10
 18816  0024BA  5C47               	subwf	printSortTimer@timeDiff,w,c
 18817  0024BC  A0D8               	btfss	status,0,c
 18818  0024BE  D003               	goto	i2l7916
 18819  0024C0                     i2u676_40:
 18820                           
 18821                           ;sort.c: 277: machine_state = DoneSorting_state;
 18822  0024C0  0E02               	movlw	2
 18823  0024C2  0100               	movlb	0	; () banked
 18824  0024C4  6FFC               	movwf	_machine_state& (0+255),b
 18825  0024C6                     i2l7916:
 18826                           
 18827                           ;sort.c: 279: }
 18828                           ;sort.c: 281: int hour = timeDiff / 3600;
 18829  0024C6  C047  F006         	movff	printSortTimer@timeDiff,i2___lwdiv@dividend
 18830  0024CA  C048  F007         	movff	printSortTimer@timeDiff+1,i2___lwdiv@dividend+1
 18831  0024CE  0E0E               	movlw	14
 18832  0024D0  6E09               	movwf	i2___lwdiv@divisor+1,c
 18833  0024D2  0E10               	movlw	16
 18834  0024D4  6E08               	movwf	i2___lwdiv@divisor,c
 18835  0024D6  EC36  F01F         	call	i2___lwdiv	;wreg free
 18836  0024DA  C006  F02D         	movff	?i2___lwdiv,printSortTimer@hour
 18837  0024DE  C007  F02E         	movff	?i2___lwdiv+1,printSortTimer@hour+1
 18838                           
 18839                           ;sort.c: 282: int min = (timeDiff % 3600) / 60;
 18840  0024E2  0E0E               	movlw	14
 18841  0024E4  6E04               	movwf	i2___lwmod@divisor+1,c
 18842  0024E6  0E10               	movlw	16
 18843  0024E8  6E03               	movwf	i2___lwmod@divisor,c
 18844  0024EA  C047  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 18845  0024EE  C048  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 18846  0024F2  EC1C  F020         	call	i2___lwmod	;wreg free
 18847  0024F6  C001  F006         	movff	?i2___lwmod,i2___lwdiv@dividend
 18848  0024FA  C002  F007         	movff	?i2___lwmod+1,i2___lwdiv@dividend+1
 18849  0024FE  0E00               	movlw	0
 18850  002500  6E09               	movwf	i2___lwdiv@divisor+1,c
 18851  002502  0E3C               	movlw	60
 18852  002504  6E08               	movwf	i2___lwdiv@divisor,c
 18853  002506  EC36  F01F         	call	i2___lwdiv	;wreg free
 18854  00250A  C006  F041         	movff	?i2___lwdiv,printSortTimer@min
 18855  00250E  C007  F042         	movff	?i2___lwdiv+1,printSortTimer@min+1
 18856                           
 18857                           ;sort.c: 283: int sec = (timeDiff % 3600) % 60;
 18858  002512  0E0E               	movlw	14
 18859  002514  6E04               	movwf	i2___lwmod@divisor+1,c
 18860  002516  0E10               	movlw	16
 18861  002518  6E03               	movwf	i2___lwmod@divisor,c
 18862  00251A  C047  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 18863  00251E  C048  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 18864  002522  EC1C  F020         	call	i2___lwmod	;wreg free
 18865  002526  C001  F045         	movff	?i2___lwmod,_printSortTimer$2366
 18866  00252A  C002  F046         	movff	?i2___lwmod+1,_printSortTimer$2366+1
 18867                           
 18868                           ;sort.c: 283: int sec = (timeDiff % 3600) % 60;
 18869  00252E  C045  F001         	movff	_printSortTimer$2366,i2___lwmod@dividend
 18870  002532  C046  F002         	movff	_printSortTimer$2366+1,i2___lwmod@dividend+1
 18871  002536  0E00               	movlw	0
 18872  002538  6E04               	movwf	i2___lwmod@divisor+1,c
 18873  00253A  0E3C               	movlw	60
 18874  00253C  6E03               	movwf	i2___lwmod@divisor,c
 18875  00253E  EC1C  F020         	call	i2___lwmod	;wreg free
 18876  002542  C001  F043         	movff	?i2___lwmod,printSortTimer@sec
 18877  002546  C002  F044         	movff	?i2___lwmod+1,printSortTimer@sec+1
 18878                           
 18879                           ;sort.c: 285: lcdInst(0b10000000);;
 18880  00254A  0E80               	movlw	128
 18881  00254C  ECFE  F022         	call	i2_lcdInst
 18882                           
 18883                           ;sort.c: 286: printf("SORTING...");
 18884  002550  0E84               	movlw	low STR_64
 18885  002552  6E0D               	movwf	i2printf@f,c
 18886  002554  0EFF               	movlw	high STR_64
 18887  002556  6E0E               	movwf	i2printf@f+1,c
 18888  002558  ECB8  F00A         	call	i2_printf	;wreg free
 18889                           
 18890                           ;sort.c: 287: lcdInst(0b11000000);;
 18891  00255C  0EC0               	movlw	192
 18892  00255E  ECFE  F022         	call	i2_lcdInst
 18893                           
 18894                           ;sort.c: 288: printf("TIME %d:%02d", min, sec);
 18895  002562  0E55               	movlw	low STR_65
 18896  002564  6E0D               	movwf	i2printf@f,c
 18897  002566  0EFF               	movlw	high STR_65
 18898  002568  6E0E               	movwf	i2printf@f+1,c
 18899  00256A  C041  F00F         	movff	printSortTimer@min,?i2_printf+2
 18900  00256E  C042  F010         	movff	printSortTimer@min+1,?i2_printf+3
 18901  002572  C043  F011         	movff	printSortTimer@sec,?i2_printf+4
 18902  002576  C044  F012         	movff	printSortTimer@sec+1,?i2_printf+5
 18903  00257A  ECB8  F00A         	call	i2_printf	;wreg free
 18904  00257E  0012               	return		;funcret
 18905  002580                     __end_of_printSortTimer:
 18906                           	opt stack 0
 18907                           pclatu	equ	0xFFB
 18908                           pclath	equ	0xFFA
 18909                           tblptru	equ	0xFF8
 18910                           tblptrh	equ	0xFF7
 18911                           tblptrl	equ	0xFF6
 18912                           tablat	equ	0xFF5
 18913                           prodh	equ	0xFF4
 18914                           prodl	equ	0xFF3
 18915                           intcon	equ	0xFF2
 18916                           intcon2	equ	0xFF1
 18917                           intcon3	equ	0xFF0
 18918                           indf0	equ	0xFEF
 18919                           postinc0	equ	0xFEE
 18920                           fsr0h	equ	0xFEA
 18921                           fsr0l	equ	0xFE9
 18922                           wreg	equ	0xFE8
 18923                           postdec1	equ	0xFE5
 18924                           fsr1h	equ	0xFE2
 18925                           fsr1l	equ	0xFE1
 18926                           indf2	equ	0xFDF
 18927                           postinc2	equ	0xFDE
 18928                           postdec2	equ	0xFDD
 18929                           fsr2h	equ	0xFDA
 18930                           fsr2l	equ	0xFD9
 18931                           status	equ	0xFD8
 18932                           
 18933 ;; *************** function i2_printf *****************
 18934 ;; Defined at:
 18935 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 18936 ;; Parameters:    Size  Location     Type
 18937 ;;  f               2   12[COMRAM] PTR const unsigned char 
 18938 ;;		 -> STR_112(17), STR_111(17), STR_110(10), STR_109(13), 
 18939 ;;		 -> STR_108(18), STR_107(18), STR_106(17), STR_105(15), 
 18940 ;;		 -> STR_104(15), STR_103(15), STR_102(17), STR_101(17), 
 18941 ;;		 -> STR_100(17), STR_99(16), STR_98(17), STR_97(17), 
 18942 ;;		 -> STR_96(17), STR_95(17), STR_94(17), STR_93(17), 
 18943 ;;		 -> STR_92(15), STR_91(11), STR_90(17), STR_89(11), 
 18944 ;;		 -> STR_88(17), STR_87(14), STR_86(15), STR_85(14), 
 18945 ;;		 -> STR_84(10), STR_83(16), STR_82(15), STR_81(3), 
 18946 ;;		 -> STR_80(15), STR_79(13), STR_78(14), STR_77(8), 
 18947 ;;		 -> STR_76(14), STR_75(15), STR_74(12), STR_73(14), 
 18948 ;;		 -> STR_72(17), STR_71(14), STR_70(15), STR_69(17), 
 18949 ;;		 -> STR_68(17), STR_67(7), STR_66(21), STR_65(13), 
 18950 ;;		 -> STR_64(11), STR_63(24), STR_50(17), STR_49(17), 
 18951 ;;		 -> STR_48(17), STR_47(17), STR_46(17), STR_45(17), 
 18952 ;;		 -> STR_44(17), STR_43(17), STR_42(17), STR_41(17), 
 18953 ;;		 -> STR_40(17), STR_39(17), STR_38(17), STR_37(17), 
 18954 ;;		 -> STR_36(17), STR_35(17), STR_34(17), STR_33(17), 
 18955 ;;		 -> STR_32(17), STR_31(17), STR_30(17), STR_29(3), 
 18956 ;;		 -> STR_28(17), STR_27(19), STR_26(17), STR_25(19), 
 18957 ;;		 -> STR_24(17), STR_23(14), STR_22(10), STR_21(24), 
 18958 ;;		 -> STR_7(7), STR_6(17), STR_5(18), STR_4(16), 
 18959 ;;		 -> STR_3(18), STR_2(14), STR_1(18), 
 18960 ;; Auto vars:     Size  Location     Type
 18961 ;;  printf          4    0        struct .
 18962 ;;  printf          2   39[COMRAM] int 
 18963 ;;  printf          2   35[COMRAM] unsigned int 
 18964 ;;  printf          2   33[COMRAM] unsigned int 
 18965 ;;  printf          2   31[COMRAM] PTR void [1]
 18966 ;;		 -> ?i2_printf(2), ?_printf(2), 
 18967 ;;  printf          2   29[COMRAM] PTR const unsigned char 
 18968 ;;		 -> STR_113(7), count_total(2), printRTC@month(4), UI@month(4), 
 18969 ;;  printf          1   38[COMRAM] char 
 18970 ;;  printf          1   37[COMRAM] unsigned char 
 18971 ;;  printf          1   28[COMRAM] char 
 18972 ;; Return value:  Size  Location     Type
 18973 ;;                  2   12[COMRAM] int 
 18974 ;; Registers used:
 18975 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18976 ;; Tracked objects:
 18977 ;;		On entry : 0/0
 18978 ;;		On exit  : 0/0
 18979 ;;		Unchanged: 0/0
 18980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18981 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18982 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18983 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18984 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18985 ;;Total ram usage:       29 bytes
 18986 ;; Hardware stack levels used:    1
 18987 ;; Hardware stack levels required when called:    2
 18988 ;; This function calls:
 18989 ;;		i2___lwdiv
 18990 ;;		i2___lwmod
 18991 ;;		i2___wmul
 18992 ;;		i2_isdigit
 18993 ;;		i2_putch
 18994 ;; This function is called by:
 18995 ;;		_change_state_to_menu_11
 18996 ;;		_change_state_to_menu_23
 18997 ;;		_change_state_to_logs_11
 18998 ;;		_change_state_to_logs_12
 18999 ;;		_change_state_to_logs_22
 19000 ;;		_change_state_to_logs_23
 19001 ;;		_change_state_to_logs_33
 19002 ;;		_change_state_to_logs_34
 19003 ;;		_printSortTimer
 19004 ;;		i2_change_state_to_menu_start
 19005 ;;		i2_change_state_to_menu_12
 19006 ;;		i2_change_state_to_menu_22
 19007 ;;		i2_printRTC
 19008 ;; This function uses a non-reentrant model
 19009 ;;
 19010                           
 19011                           	psect	text77
 19012  001570                     __ptext77:
 19013                           	opt stack 0
 19014  001570                     i2_printf:
 19015                           	opt stack 19
 19016                           
 19017                           ;doprnt.c: 466: va_list ap;
 19018                           ;doprnt.c: 499: signed char c;
 19019                           ;doprnt.c: 501: int width;
 19020                           ;doprnt.c: 506: signed char prec;
 19021                           ;doprnt.c: 508: unsigned char flag;
 19022                           ;doprnt.c: 523: union {
 19023                           ;doprnt.c: 524: unsigned long vd;
 19024                           ;doprnt.c: 525: double integ;
 19025                           ;doprnt.c: 526: } tmpval;
 19026                           ;doprnt.c: 528: unsigned int val;
 19027                           ;doprnt.c: 529: unsigned len;
 19028                           ;doprnt.c: 530: const char * cp;
 19029                           ;doprnt.c: 533: *ap = __va_start();
 19030                           
 19031                           ;incstack = 0
 19032  001570  0E0F               	movlw	low (?i2_printf+2)
 19033  001572  6E20               	movwf	i2printf@ap,c
 19034  001574  0E00               	movlw	high (?i2_printf+2)
 19035  001576  6E21               	movwf	i2printf@ap+1,c
 19036                           
 19037                           ;doprnt.c: 536: while(c = *f++) {
 19038  001578  D1A4               	goto	i2l5700
 19039  00157A                     i2l5570:
 19040                           
 19041                           ;doprnt.c: 538: if(c != '%')
 19042  00157A  0E25               	movlw	37
 19043  00157C  1827               	xorwf	i2printf@c,w,c
 19044  00157E  B4D8               	btfsc	status,2,c
 19045  001580  D004               	goto	i2l5574
 19046                           
 19047                           ;doprnt.c: 540: {
 19048                           ;doprnt.c: 541: (putch(c) );
 19049  001582  5027               	movf	i2printf@c,w,c
 19050  001584  ECF8  F022         	call	i2_putch
 19051                           
 19052                           ;doprnt.c: 542: continue;
 19053  001588  D19C               	goto	i2l5700
 19054  00158A                     i2l5574:
 19055                           
 19056                           ;doprnt.c: 543: }
 19057                           ;doprnt.c: 546: width = 0;
 19058  00158A  0E00               	movlw	0
 19059  00158C  6E29               	movwf	i2printf@width+1,c
 19060  00158E  0E00               	movlw	0
 19061  001590  6E28               	movwf	i2printf@width,c
 19062                           
 19063                           ;doprnt.c: 548: flag = 0;
 19064  001592  0E00               	movlw	0
 19065  001594  6E26               	movwf	i2printf@flag,c
 19066                           
 19067                           ;doprnt.c: 551: switch(*f) {
 19068                           
 19069                           ;doprnt.c: 550: for(;;) {
 19070  001596  D003               	goto	i2l5580
 19071  001598                     i2l5576:
 19072                           
 19073                           ;doprnt.c: 580: flag |= 0x04;
 19074  001598  8426               	bsf	i2printf@flag,2,c
 19075                           
 19076                           ;doprnt.c: 581: f++;
 19077  00159A  4A0D               	infsnz	i2printf@f,f,c
 19078  00159C  2A0E               	incf	i2printf@f+1,f,c
 19079  00159E                     i2l5580:
 19080  00159E  C00D  FFF6         	movff	i2printf@f,tblptrl
 19081  0015A2  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 19082  0015A6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19083  0015A6  6AF8               	clrf	tblptru,c
 19084  0015A8                     	endif
 19085  0015A8                     	if	0	;tblptru may be non-zero
 19086  0015A8                     	endif
 19087  0015A8  0008               	tblrd		*
 19088  0015AA  50F5               	movf	tablat,w,c
 19089                           
 19090                           ; Switch size 1, requested type "space"
 19091                           ; Number of cases is 1, Range of values is 48 to 48
 19092                           ; switch strategies available:
 19093                           ; Name         Instructions Cycles
 19094                           ; simple_byte            4     3 (average)
 19095                           ;	Chosen strategy is simple_byte
 19096  0015AC  0A30               	xorlw	48	; case 48
 19097  0015AE  B4D8               	btfsc	status,2,c
 19098  0015B0  D7F3               	goto	i2l5576
 19099                           
 19100                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 19101                           
 19102                           ;doprnt.c: 586: }
 19103                           
 19104                           ;doprnt.c: 585: break;
 19105  0015B2  C00D  FFF6         	movff	i2printf@f,tblptrl
 19106  0015B6  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 19107  0015BA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19108  0015BA  6AF8               	clrf	tblptru,c
 19109  0015BC                     	endif
 19110  0015BC                     	if	0	;tblptru may be non-zero
 19111  0015BC                     	endif
 19112  0015BC  0008               	tblrd		*
 19113  0015BE  50F5               	movf	tablat,w,c
 19114  0015C0  ECA4  F022         	call	i2_isdigit
 19115  0015C4  A0D8               	btfss	status,0,c
 19116  0015C6  D0A6               	goto	i2l5628
 19117                           
 19118                           ;doprnt.c: 598: width = 0;
 19119  0015C8  0E00               	movlw	0
 19120  0015CA  6E29               	movwf	i2printf@width+1,c
 19121  0015CC  0E00               	movlw	0
 19122  0015CE  6E28               	movwf	i2printf@width,c
 19123  0015D0                     i2l5586:
 19124                           
 19125                           ;doprnt.c: 600: width *= 10;
 19126  0015D0  C028  F001         	movff	i2printf@width,i2___wmul@multiplier
 19127  0015D4  C029  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 19128  0015D8  0E00               	movlw	0
 19129  0015DA  6E04               	movwf	i2___wmul@multiplicand+1,c
 19130  0015DC  0E0A               	movlw	10
 19131  0015DE  6E03               	movwf	i2___wmul@multiplicand,c
 19132  0015E0  EC4A  F022         	call	i2___wmul	;wreg free
 19133  0015E4  C001  F028         	movff	?i2___wmul,i2printf@width
 19134  0015E8  C002  F029         	movff	?i2___wmul+1,i2printf@width+1
 19135                           
 19136                           ;doprnt.c: 601: width += *f++ - '0';
 19137  0015EC  0ED0               	movlw	208
 19138  0015EE  6E19               	movwf	??i2_printf& (0+255),c
 19139  0015F0  0EFF               	movlw	255
 19140  0015F2  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 19141  0015F4  C00D  FFF6         	movff	i2printf@f,tblptrl
 19142  0015F8  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 19143  0015FC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19144  0015FC  6AF8               	clrf	tblptru,c
 19145  0015FE                     	endif
 19146  0015FE                     	if	0	;tblptru may be non-zero
 19147  0015FE                     	endif
 19148  0015FE  0008               	tblrd		*
 19149  001600  50F5               	movf	tablat,w,c
 19150  001602  6E1B               	movwf	(??i2_printf+2)& (0+255),c
 19151  001604  6A1C               	clrf	(??i2_printf+3)& (0+255),c
 19152  001606  5019               	movf	??i2_printf,w,c
 19153  001608  261B               	addwf	??i2_printf+2,f,c
 19154  00160A  501A               	movf	??i2_printf+1,w,c
 19155  00160C  221C               	addwfc	??i2_printf+3,f,c
 19156  00160E  501B               	movf	??i2_printf+2,w,c
 19157  001610  2628               	addwf	i2printf@width,f,c
 19158  001612  501C               	movf	??i2_printf+3,w,c
 19159  001614  2229               	addwfc	i2printf@width+1,f,c
 19160  001616  4A0D               	infsnz	i2printf@f,f,c
 19161  001618  2A0E               	incf	i2printf@f+1,f,c
 19162                           
 19163                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 19164  00161A  C00D  FFF6         	movff	i2printf@f,tblptrl
 19165  00161E  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 19166  001622                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19167  001622  6AF8               	clrf	tblptru,c
 19168  001624                     	endif
 19169  001624                     	if	0	;tblptru may be non-zero
 19170  001624                     	endif
 19171  001624  0008               	tblrd		*
 19172  001626  50F5               	movf	tablat,w,c
 19173  001628  ECA4  F022         	call	i2_isdigit
 19174  00162C  A0D8               	btfss	status,0,c
 19175  00162E  D072               	goto	i2l5628
 19176  001630  D7CF               	goto	i2l5586
 19177  001632                     i2l5594:
 19178                           
 19179                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 19180  001632  C020  FFD9         	movff	i2printf@ap,fsr2l
 19181  001636  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 19182  00163A  CFDE F01E          	movff	postinc2,i2printf@cp
 19183  00163E  CFDD F01F          	movff	postdec2,i2printf@cp+1
 19184  001642  0E02               	movlw	2
 19185  001644  2620               	addwf	i2printf@ap,f,c
 19186  001646  0E00               	movlw	0
 19187  001648  2221               	addwfc	i2printf@ap+1,f,c
 19188                           
 19189                           ;doprnt.c: 740: if(!cp)
 19190  00164A  501E               	movf	i2printf@cp,w,c
 19191  00164C  101F               	iorwf	i2printf@cp+1,w,c
 19192  00164E  A4D8               	btfss	status,2,c
 19193  001650  D004               	goto	i2l5602
 19194                           
 19195                           ;doprnt.c: 741: cp = "(null)";
 19196  001652  0EB5               	movlw	low STR_113
 19197  001654  6E1E               	movwf	i2printf@cp,c
 19198  001656  0EFF               	movlw	high STR_113
 19199  001658  6E1F               	movwf	i2printf@cp+1,c
 19200  00165A                     i2l5602:
 19201                           
 19202                           ;doprnt.c: 745: len = 0;
 19203  00165A  0E00               	movlw	0
 19204  00165C  6E23               	movwf	i2printf@len+1,c
 19205  00165E  0E00               	movlw	0
 19206  001660  6E22               	movwf	i2printf@len,c
 19207                           
 19208                           ;doprnt.c: 746: while(cp[len])
 19209  001662  D002               	goto	i2l5606
 19210  001664                     i2l5604:
 19211                           
 19212                           ;doprnt.c: 747: len++;
 19213  001664  4A22               	infsnz	i2printf@len,f,c
 19214  001666  2A23               	incf	i2printf@len+1,f,c
 19215  001668                     i2l5606:
 19216  001668  5022               	movf	i2printf@len,w,c
 19217  00166A  241E               	addwf	i2printf@cp,w,c
 19218  00166C  6E19               	movwf	??i2_printf& (0+255),c
 19219  00166E  5023               	movf	i2printf@len+1,w,c
 19220  001670  201F               	addwfc	i2printf@cp+1,w,c
 19221  001672  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 19222  001674  C019  FFF6         	movff	??i2_printf,tblptrl
 19223  001678  C01A  FFF7         	movff	??i2_printf+1,tblptrh
 19224  00167C  0E00               	movlw	low (__mediumconst shr (0+16))
 19225  00167E  6EF8               	movwf	tblptru,c
 19226  001680  0E0F               	movlw	(high __ramtop+-1)
 19227  001682  64F7               	cpfsgt	tblptrh,c
 19228  001684  D003               	bra	i2u413_47
 19229  001686  0008               	tblrd		*
 19230  001688  50F5               	movf	tablat,w,c
 19231  00168A  D005               	bra	i2u413_40
 19232  00168C                     i2u413_47:
 19233  00168C  CFF6 FFE9          	movff	tblptrl,fsr0l
 19234  001690  CFF7 FFEA          	movff	tblptrh,fsr0h
 19235  001694  50EF               	movf	indf0,w,c
 19236  001696                     i2u413_40:
 19237  001696  0900               	iorlw	0
 19238  001698  A4D8               	btfss	status,2,c
 19239  00169A  D7E4               	goto	i2l5604
 19240                           
 19241                           ;doprnt.c: 757: if(width > len)
 19242  00169C  5028               	movf	i2printf@width,w,c
 19243  00169E  5C22               	subwf	i2printf@len,w,c
 19244  0016A0  5029               	movf	i2printf@width+1,w,c
 19245  0016A2  5823               	subwfb	i2printf@len+1,w,c
 19246  0016A4  B0D8               	btfsc	status,0,c
 19247  0016A6  D005               	goto	i2l5612
 19248                           
 19249                           ;doprnt.c: 758: width -= len;
 19250  0016A8  5022               	movf	i2printf@len,w,c
 19251  0016AA  5E28               	subwf	i2printf@width,f,c
 19252  0016AC  5023               	movf	i2printf@len+1,w,c
 19253  0016AE  5A29               	subwfb	i2printf@width+1,f,c
 19254  0016B0  D008               	goto	i2l5616
 19255  0016B2                     i2l5612:
 19256                           
 19257                           ;doprnt.c: 759: else
 19258                           ;doprnt.c: 760: width = 0;
 19259  0016B2  0E00               	movlw	0
 19260  0016B4  6E29               	movwf	i2printf@width+1,c
 19261  0016B6  0E00               	movlw	0
 19262  0016B8  6E28               	movwf	i2printf@width,c
 19263                           
 19264                           ;doprnt.c: 764: while(width--)
 19265  0016BA  D003               	goto	i2l5616
 19266  0016BC                     i2l5614:
 19267                           
 19268                           ;doprnt.c: 765: (putch(' ') );
 19269  0016BC  0E20               	movlw	32
 19270  0016BE  ECF8  F022         	call	i2_putch
 19271  0016C2                     i2l5616:
 19272  0016C2  0628               	decf	i2printf@width,f,c
 19273  0016C4  A0D8               	btfss	status,0,c
 19274  0016C6  0629               	decf	i2printf@width+1,f,c
 19275  0016C8  2828               	incf	i2printf@width,w,c
 19276  0016CA  E1F8               	bnz	i2l5614
 19277  0016CC  2829               	incf	i2printf@width+1,w,c
 19278  0016CE  B4D8               	btfsc	status,2,c
 19279  0016D0  D016               	goto	i2l5622
 19280  0016D2  D7F4               	goto	i2l5614
 19281  0016D4                     i2l5618:
 19282                           
 19283                           ;doprnt.c: 768: (putch(*cp++) );
 19284  0016D4  C01E  FFF6         	movff	i2printf@cp,tblptrl
 19285  0016D8  C01F  FFF7         	movff	i2printf@cp+1,tblptrh
 19286  0016DC  0E00               	movlw	low (__mediumconst shr (0+16))
 19287  0016DE  6EF8               	movwf	tblptru,c
 19288  0016E0  0E0F               	movlw	(high __ramtop+-1)
 19289  0016E2  64F7               	cpfsgt	tblptrh,c
 19290  0016E4  D003               	bra	i2u417_47
 19291  0016E6  0008               	tblrd		*
 19292  0016E8  50F5               	movf	tablat,w,c
 19293  0016EA  D005               	bra	i2u417_40
 19294  0016EC                     i2u417_47:
 19295  0016EC  CFF6 FFE9          	movff	tblptrl,fsr0l
 19296  0016F0  CFF7 FFEA          	movff	tblptrh,fsr0h
 19297  0016F4  50EF               	movf	indf0,w,c
 19298  0016F6                     i2u417_40:
 19299  0016F6  ECF8  F022         	call	i2_putch
 19300  0016FA  4A1E               	infsnz	i2printf@cp,f,c
 19301  0016FC  2A1F               	incf	i2printf@cp+1,f,c
 19302  0016FE                     i2l5622:
 19303  0016FE  0622               	decf	i2printf@len,f,c
 19304  001700  A0D8               	btfss	status,0,c
 19305  001702  0623               	decf	i2printf@len+1,f,c
 19306  001704  2822               	incf	i2printf@len,w,c
 19307  001706  E1E6               	bnz	i2l5618
 19308  001708  2823               	incf	i2printf@len+1,w,c
 19309  00170A  B4D8               	btfsc	status,2,c
 19310  00170C  D0DA               	goto	i2l5700
 19311  00170E  D7E2               	goto	i2l5618
 19312  001710                     i2l5624:
 19313                           
 19314                           ;doprnt.c: 818: flag |= 0x40;
 19315  001710  8C26               	bsf	i2printf@flag,6,c
 19316                           
 19317                           ;doprnt.c: 822: }
 19318                           
 19319                           ;doprnt.c: 819: break;
 19320  001712  D01B               	goto	i2l1234
 19321  001714                     i2l5628:
 19322  001714  C00D  FFF6         	movff	i2printf@f,tblptrl
 19323  001718  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 19324  00171C  4A0D               	infsnz	i2printf@f,f,c
 19325  00171E  2A0E               	incf	i2printf@f+1,f,c
 19326  001720                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19327  001720  6AF8               	clrf	tblptru,c
 19328  001722                     	endif
 19329  001722                     	if	0	;tblptru may be non-zero
 19330  001722                     	endif
 19331  001722  0008               	tblrd		*
 19332  001724  CFF5 F027          	movff	tablat,i2printf@c
 19333  001728  5027               	movf	i2printf@c,w,c
 19334                           
 19335                           ; Switch size 1, requested type "space"
 19336                           ; Number of cases is 5, Range of values is 0 to 117
 19337                           ; switch strategies available:
 19338                           ; Name         Instructions Cycles
 19339                           ; simple_byte           16     9 (average)
 19340                           ;	Chosen strategy is simple_byte
 19341  00172A  0A00               	xorlw	0	; case 0
 19342  00172C  B4D8               	btfsc	status,2,c
 19343  00172E  0012               	return	
 19344  001730  0A64               	xorlw	100	; case 100
 19345  001732  B4D8               	btfsc	status,2,c
 19346  001734  D00A               	goto	i2l1234
 19347  001736  0A0D               	xorlw	13	; case 105
 19348  001738  B4D8               	btfsc	status,2,c
 19349  00173A  D007               	goto	i2l1234
 19350  00173C  0A1A               	xorlw	26	; case 115
 19351  00173E  B4D8               	btfsc	status,2,c
 19352  001740  D778               	goto	i2l5594
 19353  001742  0A06               	xorlw	6	; case 117
 19354  001744  B4D8               	btfsc	status,2,c
 19355  001746  D7E4               	goto	i2l5624
 19356  001748  D0BC               	goto	i2l5700
 19357  00174A                     i2l1234:
 19358                           
 19359                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 19360  00174A  BC26               	btfsc	i2printf@flag,6,c
 19361  00174C  D015               	goto	i2l5640
 19362                           
 19363                           ;doprnt.c: 1253: {
 19364                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 19365  00174E  C020  FFD9         	movff	i2printf@ap,fsr2l
 19366  001752  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 19367  001756  CFDE F024          	movff	postinc2,i2printf@val
 19368  00175A  CFDD F025          	movff	postdec2,i2printf@val+1
 19369  00175E  0E02               	movlw	2
 19370  001760  2620               	addwf	i2printf@ap,f,c
 19371  001762  0E00               	movlw	0
 19372  001764  2221               	addwfc	i2printf@ap+1,f,c
 19373                           
 19374                           ;doprnt.c: 1261: if((int)val < 0) {
 19375  001766  AE25               	btfss	i2printf@val+1,7,c
 19376  001768  D013               	goto	i2l5644
 19377                           
 19378                           ;doprnt.c: 1262: flag |= 0x03;
 19379  00176A  0E03               	movlw	3
 19380  00176C  1226               	iorwf	i2printf@flag,f,c
 19381                           
 19382                           ;doprnt.c: 1263: val = -val;
 19383  00176E  6C24               	negf	i2printf@val,c
 19384  001770  1E25               	comf	i2printf@val+1,f,c
 19385  001772  B0D8               	btfsc	status,0,c
 19386  001774  2A25               	incf	i2printf@val+1,f,c
 19387                           
 19388                           ;doprnt.c: 1264: }
 19389                           ;doprnt.c: 1266: }
 19390  001776  D00C               	goto	i2l5644
 19391  001778                     i2l5640:
 19392                           
 19393                           ;doprnt.c: 1268: else
 19394                           ;doprnt.c: 1273: {
 19395                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 19396  001778  C020  FFD9         	movff	i2printf@ap,fsr2l
 19397  00177C  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 19398  001780  CFDE F024          	movff	postinc2,i2printf@val
 19399  001784  CFDD F025          	movff	postdec2,i2printf@val+1
 19400  001788  0E02               	movlw	2
 19401  00178A  2620               	addwf	i2printf@ap,f,c
 19402  00178C  0E00               	movlw	0
 19403  00178E  2221               	addwfc	i2printf@ap+1,f,c
 19404  001790                     i2l5644:
 19405                           
 19406                           ;doprnt.c: 1287: }
 19407                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 19408  001790  0E01               	movlw	1
 19409  001792  6E27               	movwf	i2printf@c,c
 19410  001794                     i2l5646:
 19411  001794  0E05               	movlw	5
 19412  001796  1827               	xorwf	i2printf@c,w,c
 19413  001798  B4D8               	btfsc	status,2,c
 19414  00179A  D015               	goto	i2l5658
 19415                           
 19416                           ;doprnt.c: 1306: if(val < dpowers[c])
 19417  00179C  5027               	movf	i2printf@c,w,c
 19418  00179E  0D02               	mullw	2
 19419  0017A0  0E38               	movlw	low _dpowers
 19420  0017A2  24F3               	addwf	prodl,w,c
 19421  0017A4  6EF6               	movwf	tblptrl,c
 19422  0017A6  0EFB               	movlw	high _dpowers
 19423  0017A8  20F4               	addwfc	prodh,w,c
 19424  0017AA  6EF7               	movwf	tblptrh,c
 19425  0017AC                     	if	1	;There are 3 active tblptr bytes
 19426  0017AC  6AF8               	clrf	tblptru,c
 19427  0017AE  0E00               	movlw	low (__mediumconst shr (0+16))
 19428  0017B0  22F8               	addwfc	tblptru,f,c
 19429  0017B2                     	endif
 19430  0017B2  0009               	tblrd		*+
 19431  0017B4  50F5               	movf	tablat,w,c
 19432  0017B6  5C24               	subwf	i2printf@val,w,c
 19433  0017B8  0009               	tblrd		*+
 19434  0017BA  50F5               	movf	tablat,w,c
 19435  0017BC  5825               	subwfb	i2printf@val+1,w,c
 19436  0017BE  A0D8               	btfss	status,0,c
 19437  0017C0  D002               	goto	i2l5658
 19438                           
 19439                           ;doprnt.c: 1307: break;
 19440  0017C2  2A27               	incf	i2printf@c,f,c
 19441  0017C4  D7E7               	goto	i2l5646
 19442  0017C6                     i2l5658:
 19443                           
 19444                           ;doprnt.c: 1345: if(width && flag & 0x03)
 19445  0017C6  5028               	movf	i2printf@width,w,c
 19446  0017C8  1029               	iorwf	i2printf@width+1,w,c
 19447  0017CA  B4D8               	btfsc	status,2,c
 19448  0017CC  D009               	goto	i2l5664
 19449  0017CE  C026  F019         	movff	i2printf@flag,??i2_printf
 19450  0017D2  0E03               	movlw	3
 19451  0017D4  1619               	andwf	??i2_printf,f,c
 19452  0017D6  B4D8               	btfsc	status,2,c
 19453  0017D8  D003               	goto	i2l5664
 19454                           
 19455                           ;doprnt.c: 1346: width--;
 19456  0017DA  0628               	decf	i2printf@width,f,c
 19457  0017DC  A0D8               	btfss	status,0,c
 19458  0017DE  0629               	decf	i2printf@width+1,f,c
 19459  0017E0                     i2l5664:
 19460                           
 19461                           ;doprnt.c: 1381: if(width > c)
 19462  0017E0  0E80               	movlw	128
 19463  0017E2  BE27               	btfsc	i2printf@c,7,c
 19464  0017E4  0E7F               	movlw	127
 19465  0017E6  6E19               	movwf	??i2_printf& (0+255),c
 19466  0017E8  5028               	movf	i2printf@width,w,c
 19467  0017EA  5C27               	subwf	i2printf@c,w,c
 19468  0017EC  5029               	movf	i2printf@width+1,w,c
 19469  0017EE  0A80               	xorlw	128
 19470  0017F0  5819               	subwfb	??i2_printf& (0+255),w,c
 19471  0017F2  B0D8               	btfsc	status,0,c
 19472  0017F4  D007               	goto	i2l5668
 19473                           
 19474                           ;doprnt.c: 1382: width -= c;
 19475  0017F6  5027               	movf	i2printf@c,w,c
 19476  0017F8  5E28               	subwf	i2printf@width,f,c
 19477  0017FA  0E00               	movlw	0
 19478  0017FC  BE27               	btfsc	i2printf@c,7,c
 19479  0017FE  0EFF               	movlw	255
 19480  001800  5A29               	subwfb	i2printf@width+1,f,c
 19481  001802  D004               	goto	i2l5670
 19482  001804                     i2l5668:
 19483                           
 19484                           ;doprnt.c: 1383: else
 19485                           ;doprnt.c: 1384: width = 0;
 19486  001804  0E00               	movlw	0
 19487  001806  6E29               	movwf	i2printf@width+1,c
 19488  001808  0E00               	movlw	0
 19489  00180A  6E28               	movwf	i2printf@width,c
 19490  00180C                     i2l5670:
 19491                           
 19492                           ;doprnt.c: 1387: if(flag & 0x04) {
 19493  00180C  A426               	btfss	i2printf@flag,2,c
 19494  00180E  D014               	goto	i2l5682
 19495                           
 19496                           ;doprnt.c: 1392: if(flag & 0x03)
 19497  001810  C026  F019         	movff	i2printf@flag,??i2_printf
 19498  001814  0E03               	movlw	3
 19499  001816  1619               	andwf	??i2_printf,f,c
 19500  001818  B4D8               	btfsc	status,2,c
 19501  00181A  D003               	goto	i2l5676
 19502                           
 19503                           ;doprnt.c: 1393: (putch('-') );
 19504  00181C  0E2D               	movlw	45
 19505  00181E  ECF8  F022         	call	i2_putch
 19506  001822                     i2l5676:
 19507                           
 19508                           ;doprnt.c: 1415: if(width)
 19509  001822  5028               	movf	i2printf@width,w,c
 19510  001824  1029               	iorwf	i2printf@width+1,w,c
 19511  001826  B4D8               	btfsc	status,2,c
 19512  001828  D01E               	goto	i2l5692
 19513                           
 19514                           ;doprnt.c: 1417: (putch('0') );
 19515                           
 19516                           ;doprnt.c: 1416: do
 19517  00182A  0E30               	movlw	48
 19518  00182C  ECF8  F022         	call	i2_putch
 19519                           
 19520                           ;doprnt.c: 1418: while(--width);
 19521  001830  0628               	decf	i2printf@width,f,c
 19522  001832  A0D8               	btfss	status,0,c
 19523  001834  0629               	decf	i2printf@width+1,f,c
 19524  001836  D7F5               	goto	i2l5676
 19525  001838                     i2l5682:
 19526                           
 19527                           ;doprnt.c: 1422: {
 19528                           ;doprnt.c: 1424: if(width
 19529                           ;doprnt.c: 1428: )
 19530  001838  5028               	movf	i2printf@width,w,c
 19531  00183A  1029               	iorwf	i2printf@width+1,w,c
 19532  00183C  B4D8               	btfsc	status,2,c
 19533  00183E  D00A               	goto	i2l5688
 19534  001840                     i2l5684:
 19535                           
 19536                           ;doprnt.c: 1430: (putch(' ') );
 19537  001840  0E20               	movlw	32
 19538  001842  ECF8  F022         	call	i2_putch
 19539                           
 19540                           ;doprnt.c: 1431: while(--width);
 19541  001846  0628               	decf	i2printf@width,f,c
 19542  001848  A0D8               	btfss	status,0,c
 19543  00184A  0629               	decf	i2printf@width+1,f,c
 19544  00184C  5028               	movf	i2printf@width,w,c
 19545  00184E  1029               	iorwf	i2printf@width+1,w,c
 19546  001850  A4D8               	btfss	status,2,c
 19547  001852  D7F6               	goto	i2l5684
 19548  001854                     i2l5688:
 19549                           
 19550                           ;doprnt.c: 1438: if(flag & 0x03)
 19551  001854  C026  F019         	movff	i2printf@flag,??i2_printf
 19552  001858  0E03               	movlw	3
 19553  00185A  1619               	andwf	??i2_printf,f,c
 19554  00185C  B4D8               	btfsc	status,2,c
 19555  00185E  D003               	goto	i2l5692
 19556                           
 19557                           ;doprnt.c: 1439: (putch('-') );
 19558  001860  0E2D               	movlw	45
 19559  001862  ECF8  F022         	call	i2_putch
 19560  001866                     i2l5692:
 19561                           
 19562                           ;doprnt.c: 1469: }
 19563                           ;doprnt.c: 1472: prec = c;
 19564  001866  C027  F01D         	movff	i2printf@c,i2printf@prec
 19565                           
 19566                           ;doprnt.c: 1474: while(prec--) {
 19567  00186A  D027               	goto	i2l5698
 19568  00186C                     i2l5694:
 19569                           
 19570                           ;doprnt.c: 1478: {
 19571                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 19572  00186C  501D               	movf	i2printf@prec,w,c
 19573  00186E  0D02               	mullw	2
 19574  001870  0E38               	movlw	low _dpowers
 19575  001872  24F3               	addwf	prodl,w,c
 19576  001874  6EF6               	movwf	tblptrl,c
 19577  001876  0EFB               	movlw	high _dpowers
 19578  001878  20F4               	addwfc	prodh,w,c
 19579  00187A  6EF7               	movwf	tblptrh,c
 19580  00187C                     	if	1	;There are 3 active tblptr bytes
 19581  00187C  6AF8               	clrf	tblptru,c
 19582  00187E  0E00               	movlw	low (__mediumconst shr (0+16))
 19583  001880  22F8               	addwfc	tblptru,f,c
 19584  001882                     	endif
 19585  001882  0009               	tblrd		*+
 19586  001884  CFF5 F008          	movff	tablat,i2___lwdiv@divisor
 19587  001888  000A               	tblrd		*-
 19588  00188A  CFF5 F009          	movff	tablat,i2___lwdiv@divisor+1
 19589  00188E  C024  F006         	movff	i2printf@val,i2___lwdiv@dividend
 19590  001892  C025  F007         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 19591  001896  EC36  F01F         	call	i2___lwdiv	;wreg free
 19592  00189A  C006  F001         	movff	?i2___lwdiv,i2___lwmod@dividend
 19593  00189E  C007  F002         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 19594  0018A2  0E00               	movlw	0
 19595  0018A4  6E04               	movwf	i2___lwmod@divisor+1,c
 19596  0018A6  0E0A               	movlw	10
 19597  0018A8  6E03               	movwf	i2___lwmod@divisor,c
 19598  0018AA  EC1C  F020         	call	i2___lwmod	;wreg free
 19599  0018AE  5001               	movf	?i2___lwmod,w,c
 19600  0018B0  0F30               	addlw	48
 19601  0018B2  6E27               	movwf	i2printf@c,c
 19602                           
 19603                           ;doprnt.c: 1523: }
 19604                           ;doprnt.c: 1524: (putch(c) );
 19605  0018B4  5027               	movf	i2printf@c,w,c
 19606  0018B6  ECF8  F022         	call	i2_putch
 19607  0018BA                     i2l5698:
 19608  0018BA  061D               	decf	i2printf@prec,f,c
 19609  0018BC  281D               	incf	i2printf@prec,w,c
 19610  0018BE  A4D8               	btfss	status,2,c
 19611  0018C0  D7D5               	goto	i2l5694
 19612  0018C2                     i2l5700:
 19613  0018C2  C00D  FFF6         	movff	i2printf@f,tblptrl
 19614  0018C6  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 19615  0018CA  4A0D               	infsnz	i2printf@f,f,c
 19616  0018CC  2A0E               	incf	i2printf@f+1,f,c
 19617  0018CE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19618  0018CE  6AF8               	clrf	tblptru,c
 19619  0018D0                     	endif
 19620  0018D0                     	if	0	;tblptru may be non-zero
 19621  0018D0                     	endif
 19622  0018D0  0008               	tblrd		*
 19623  0018D2  CFF5 F027          	movff	tablat,i2printf@c
 19624  0018D6  5027               	movf	i2printf@c,w,c
 19625  0018D8  B4D8               	btfsc	status,2,c
 19626  0018DA  0012               	return	
 19627  0018DC  D64E               	goto	i2l5570
 19628  0018DE                     __end_ofi2_printf:
 19629                           	opt stack 0
 19630                           pclatu	equ	0xFFB
 19631                           pclath	equ	0xFFA
 19632                           tblptru	equ	0xFF8
 19633                           tblptrh	equ	0xFF7
 19634                           tblptrl	equ	0xFF6
 19635                           tablat	equ	0xFF5
 19636                           prodh	equ	0xFF4
 19637                           prodl	equ	0xFF3
 19638                           intcon	equ	0xFF2
 19639                           intcon2	equ	0xFF1
 19640                           intcon3	equ	0xFF0
 19641                           indf0	equ	0xFEF
 19642                           postinc0	equ	0xFEE
 19643                           fsr0h	equ	0xFEA
 19644                           fsr0l	equ	0xFE9
 19645                           wreg	equ	0xFE8
 19646                           postdec1	equ	0xFE5
 19647                           fsr1h	equ	0xFE2
 19648                           fsr1l	equ	0xFE1
 19649                           indf2	equ	0xFDF
 19650                           postinc2	equ	0xFDE
 19651                           postdec2	equ	0xFDD
 19652                           fsr2h	equ	0xFDA
 19653                           fsr2l	equ	0xFD9
 19654                           status	equ	0xFD8
 19655                           
 19656 ;; *************** function i2_putch *****************
 19657 ;; Defined at:
 19658 ;;		line 20 in file "lcd.c"
 19659 ;; Parameters:    Size  Location     Type
 19660 ;;  data            1    wreg     unsigned char 
 19661 ;; Auto vars:     Size  Location     Type
 19662 ;;  data            1    2[COMRAM] unsigned char 
 19663 ;; Return value:  Size  Location     Type
 19664 ;;                  1    wreg      void 
 19665 ;; Registers used:
 19666 ;;		wreg, status,2, status,0, cstack
 19667 ;; Tracked objects:
 19668 ;;		On entry : 0/0
 19669 ;;		On exit  : 0/0
 19670 ;;		Unchanged: 0/0
 19671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19672 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19673 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19674 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19675 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19676 ;;Total ram usage:        1 bytes
 19677 ;; Hardware stack levels used:    1
 19678 ;; Hardware stack levels required when called:    1
 19679 ;; This function calls:
 19680 ;;		i2_lcdNibble
 19681 ;; This function is called by:
 19682 ;;		i2_printf
 19683 ;; This function uses a non-reentrant model
 19684 ;;
 19685                           
 19686                           	psect	text78
 19687  0045F0                     __ptext78:
 19688                           	opt stack 0
 19689  0045F0                     i2_putch:
 19690                           	opt stack 19
 19691                           
 19692                           ;incstack = 0
 19693                           ;i2putch@data stored from wreg
 19694  0045F0  6E03               	movwf	i2putch@data,c
 19695                           
 19696                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 19697  0045F2  848C               	bsf	3980,2,c	;volatile
 19698                           
 19699                           ;lcd.c: 22: lcdNibble(data);
 19700  0045F4  5003               	movf	i2putch@data,w,c
 19701  0045F6  EC0B  F01F         	call	i2_lcdNibble
 19702  0045FA  0012               	return		;funcret
 19703  0045FC                     __end_ofi2_putch:
 19704                           	opt stack 0
 19705                           pclatu	equ	0xFFB
 19706                           pclath	equ	0xFFA
 19707                           tblptru	equ	0xFF8
 19708                           tblptrh	equ	0xFF7
 19709                           tblptrl	equ	0xFF6
 19710                           tablat	equ	0xFF5
 19711                           prodh	equ	0xFF4
 19712                           prodl	equ	0xFF3
 19713                           intcon	equ	0xFF2
 19714                           intcon2	equ	0xFF1
 19715                           intcon3	equ	0xFF0
 19716                           indf0	equ	0xFEF
 19717                           postinc0	equ	0xFEE
 19718                           fsr0h	equ	0xFEA
 19719                           fsr0l	equ	0xFE9
 19720                           wreg	equ	0xFE8
 19721                           postdec1	equ	0xFE5
 19722                           fsr1h	equ	0xFE2
 19723                           fsr1l	equ	0xFE1
 19724                           indf2	equ	0xFDF
 19725                           postinc2	equ	0xFDE
 19726                           postdec2	equ	0xFDD
 19727                           fsr2h	equ	0xFDA
 19728                           fsr2l	equ	0xFD9
 19729                           status	equ	0xFD8
 19730                           
 19731 ;; *************** function i2_isdigit *****************
 19732 ;; Defined at:
 19733 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 19734 ;; Parameters:    Size  Location     Type
 19735 ;;  c               1    wreg     unsigned char 
 19736 ;; Auto vars:     Size  Location     Type
 19737 ;;  c               1    2[COMRAM] unsigned char 
 19738 ;; Return value:  Size  Location     Type
 19739 ;;		None               void
 19740 ;; Registers used:
 19741 ;;		wreg, status,2, status,0
 19742 ;; Tracked objects:
 19743 ;;		On entry : 0/0
 19744 ;;		On exit  : 0/0
 19745 ;;		Unchanged: 0/0
 19746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19747 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19748 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19749 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19750 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19751 ;;Total ram usage:        3 bytes
 19752 ;; Hardware stack levels used:    1
 19753 ;; This function calls:
 19754 ;;		Nothing
 19755 ;; This function is called by:
 19756 ;;		i2_printf
 19757 ;; This function uses a non-reentrant model
 19758 ;;
 19759                           
 19760                           	psect	text79
 19761  004548                     __ptext79:
 19762                           	opt stack 0
 19763  004548                     i2_isdigit:
 19764                           	opt stack 20
 19765                           
 19766                           ;incstack = 0
 19767                           ;i2isdigit@c stored from wreg
 19768  004548  6E03               	movwf	i2isdigit@c,c
 19769  00454A  0E00               	movlw	0
 19770  00454C  6E02               	movwf	i2_isdigit$1893,c
 19771  00454E  0E3A               	movlw	58
 19772  004550  6003               	cpfslt	i2isdigit@c,c
 19773  004552  D005               	goto	i2l5280
 19774  004554  0E2F               	movlw	47
 19775  004556  6403               	cpfsgt	i2isdigit@c,c
 19776  004558  D002               	goto	i2l5280
 19777  00455A  0E01               	movlw	1
 19778  00455C  6E02               	movwf	i2_isdigit$1893,c
 19779  00455E                     i2l5280:
 19780  00455E  C002  F001         	movff	i2_isdigit$1893,??i2_isdigit
 19781  004562  3001               	rrcf	??i2_isdigit,w,c
 19782  004564  0012               	return	
 19783  004566                     __end_ofi2_isdigit:
 19784                           	opt stack 0
 19785                           pclatu	equ	0xFFB
 19786                           pclath	equ	0xFFA
 19787                           tblptru	equ	0xFF8
 19788                           tblptrh	equ	0xFF7
 19789                           tblptrl	equ	0xFF6
 19790                           tablat	equ	0xFF5
 19791                           prodh	equ	0xFF4
 19792                           prodl	equ	0xFF3
 19793                           intcon	equ	0xFF2
 19794                           intcon2	equ	0xFF1
 19795                           intcon3	equ	0xFF0
 19796                           indf0	equ	0xFEF
 19797                           postinc0	equ	0xFEE
 19798                           fsr0h	equ	0xFEA
 19799                           fsr0l	equ	0xFE9
 19800                           wreg	equ	0xFE8
 19801                           postdec1	equ	0xFE5
 19802                           fsr1h	equ	0xFE2
 19803                           fsr1l	equ	0xFE1
 19804                           indf2	equ	0xFDF
 19805                           postinc2	equ	0xFDE
 19806                           postdec2	equ	0xFDD
 19807                           fsr2h	equ	0xFDA
 19808                           fsr2l	equ	0xFD9
 19809                           status	equ	0xFD8
 19810                           
 19811 ;; *************** function i2___wmul *****************
 19812 ;; Defined at:
 19813 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 19814 ;; Parameters:    Size  Location     Type
 19815 ;;  multiplier      2    0[COMRAM] unsigned int 
 19816 ;;  multiplicand    2    2[COMRAM] unsigned int 
 19817 ;; Auto vars:     Size  Location     Type
 19818 ;;  __wmul          2    4[COMRAM] unsigned int 
 19819 ;; Return value:  Size  Location     Type
 19820 ;;                  2    0[COMRAM] unsigned int 
 19821 ;; Registers used:
 19822 ;;		wreg, status,2, status,0, prodl, prodh
 19823 ;; Tracked objects:
 19824 ;;		On entry : 0/0
 19825 ;;		On exit  : 0/0
 19826 ;;		Unchanged: 0/0
 19827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19828 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19829 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19830 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19831 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19832 ;;Total ram usage:        6 bytes
 19833 ;; Hardware stack levels used:    1
 19834 ;; This function calls:
 19835 ;;		Nothing
 19836 ;; This function is called by:
 19837 ;;		_printSortTimer
 19838 ;;		_retrieveLog
 19839 ;;		i2_printf
 19840 ;; This function uses a non-reentrant model
 19841 ;;
 19842                           
 19843                           	psect	text80
 19844  004494                     __ptext80:
 19845                           	opt stack 0
 19846  004494                     i2___wmul:
 19847                           	opt stack 20
 19848                           
 19849                           ;incstack = 0
 19850  004494  5001               	movf	i2___wmul@multiplier,w,c
 19851  004496  0203               	mulwf	i2___wmul@multiplicand,c
 19852  004498  CFF3 F005          	movff	prodl,i2___wmul@product
 19853  00449C  CFF4 F006          	movff	prodh,i2___wmul@product+1
 19854  0044A0  5001               	movf	i2___wmul@multiplier,w,c
 19855  0044A2  0204               	mulwf	i2___wmul@multiplicand+1,c
 19856  0044A4  50F3               	movf	prodl,w,c
 19857  0044A6  2606               	addwf	i2___wmul@product+1,f,c
 19858  0044A8  5002               	movf	i2___wmul@multiplier+1,w,c
 19859  0044AA  0203               	mulwf	i2___wmul@multiplicand,c
 19860  0044AC  50F3               	movf	prodl,w,c
 19861  0044AE  2606               	addwf	i2___wmul@product+1,f,c
 19862  0044B0  C005  F001         	movff	i2___wmul@product,?i2___wmul
 19863  0044B4  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 19864  0044B8  0012               	return	
 19865  0044BA                     __end_ofi2___wmul:
 19866                           	opt stack 0
 19867                           pclatu	equ	0xFFB
 19868                           pclath	equ	0xFFA
 19869                           tblptru	equ	0xFF8
 19870                           tblptrh	equ	0xFF7
 19871                           tblptrl	equ	0xFF6
 19872                           tablat	equ	0xFF5
 19873                           prodh	equ	0xFF4
 19874                           prodl	equ	0xFF3
 19875                           intcon	equ	0xFF2
 19876                           intcon2	equ	0xFF1
 19877                           intcon3	equ	0xFF0
 19878                           indf0	equ	0xFEF
 19879                           postinc0	equ	0xFEE
 19880                           fsr0h	equ	0xFEA
 19881                           fsr0l	equ	0xFE9
 19882                           wreg	equ	0xFE8
 19883                           postdec1	equ	0xFE5
 19884                           fsr1h	equ	0xFE2
 19885                           fsr1l	equ	0xFE1
 19886                           indf2	equ	0xFDF
 19887                           postinc2	equ	0xFDE
 19888                           postdec2	equ	0xFDD
 19889                           fsr2h	equ	0xFDA
 19890                           fsr2l	equ	0xFD9
 19891                           status	equ	0xFD8
 19892                           
 19893 ;; *************** function i2___lwmod *****************
 19894 ;; Defined at:
 19895 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 19896 ;; Parameters:    Size  Location     Type
 19897 ;;  dividend        2    0[COMRAM] unsigned int 
 19898 ;;  divisor         2    2[COMRAM] unsigned int 
 19899 ;; Auto vars:     Size  Location     Type
 19900 ;;  __lwmod         1    4[COMRAM] unsigned char 
 19901 ;; Return value:  Size  Location     Type
 19902 ;;                  2    0[COMRAM] unsigned int 
 19903 ;; Registers used:
 19904 ;;		wreg, status,2, status,0
 19905 ;; Tracked objects:
 19906 ;;		On entry : 0/0
 19907 ;;		On exit  : 0/0
 19908 ;;		Unchanged: 0/0
 19909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19910 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19911 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19912 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19913 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19914 ;;Total ram usage:        5 bytes
 19915 ;; Hardware stack levels used:    1
 19916 ;; This function calls:
 19917 ;;		Nothing
 19918 ;; This function is called by:
 19919 ;;		_printSortTimer
 19920 ;;		i2_printf
 19921 ;; This function uses a non-reentrant model
 19922 ;;
 19923                           
 19924                           	psect	text81
 19925  004038                     __ptext81:
 19926                           	opt stack 0
 19927  004038                     i2___lwmod:
 19928                           	opt stack 20
 19929                           
 19930                           ;incstack = 0
 19931  004038  5003               	movf	i2___lwmod@divisor,w,c
 19932  00403A  1004               	iorwf	i2___lwmod@divisor+1,w,c
 19933  00403C  B4D8               	btfsc	status,2,c
 19934  00403E  D018               	goto	i2l1691
 19935  004040  0E01               	movlw	1
 19936  004042  6E05               	movwf	i2___lwmod@counter,c
 19937  004044  D004               	goto	i2l5312
 19938  004046                     i2l5310:
 19939  004046  90D8               	bcf	status,0,c
 19940  004048  3603               	rlcf	i2___lwmod@divisor,f,c
 19941  00404A  3604               	rlcf	i2___lwmod@divisor+1,f,c
 19942  00404C  2A05               	incf	i2___lwmod@counter,f,c
 19943  00404E                     i2l5312:
 19944  00404E  AE04               	btfss	i2___lwmod@divisor+1,7,c
 19945  004050  D7FA               	goto	i2l5310
 19946  004052                     i2l5314:
 19947  004052  5003               	movf	i2___lwmod@divisor,w,c
 19948  004054  5C01               	subwf	i2___lwmod@dividend,w,c
 19949  004056  5004               	movf	i2___lwmod@divisor+1,w,c
 19950  004058  5802               	subwfb	i2___lwmod@dividend+1,w,c
 19951  00405A  A0D8               	btfss	status,0,c
 19952  00405C  D004               	goto	i2l5318
 19953  00405E  5003               	movf	i2___lwmod@divisor,w,c
 19954  004060  5E01               	subwf	i2___lwmod@dividend,f,c
 19955  004062  5004               	movf	i2___lwmod@divisor+1,w,c
 19956  004064  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 19957  004066                     i2l5318:
 19958  004066  90D8               	bcf	status,0,c
 19959  004068  3204               	rrcf	i2___lwmod@divisor+1,f,c
 19960  00406A  3203               	rrcf	i2___lwmod@divisor,f,c
 19961  00406C  2E05               	decfsz	i2___lwmod@counter,f,c
 19962  00406E  D7F1               	goto	i2l5314
 19963  004070                     i2l1691:
 19964  004070  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 19965  004074  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 19966  004078  0012               	return		;funcret
 19967  00407A                     __end_ofi2___lwmod:
 19968                           	opt stack 0
 19969                           pclatu	equ	0xFFB
 19970                           pclath	equ	0xFFA
 19971                           tblptru	equ	0xFF8
 19972                           tblptrh	equ	0xFF7
 19973                           tblptrl	equ	0xFF6
 19974                           tablat	equ	0xFF5
 19975                           prodh	equ	0xFF4
 19976                           prodl	equ	0xFF3
 19977                           intcon	equ	0xFF2
 19978                           intcon2	equ	0xFF1
 19979                           intcon3	equ	0xFF0
 19980                           indf0	equ	0xFEF
 19981                           postinc0	equ	0xFEE
 19982                           fsr0h	equ	0xFEA
 19983                           fsr0l	equ	0xFE9
 19984                           wreg	equ	0xFE8
 19985                           postdec1	equ	0xFE5
 19986                           fsr1h	equ	0xFE2
 19987                           fsr1l	equ	0xFE1
 19988                           indf2	equ	0xFDF
 19989                           postinc2	equ	0xFDE
 19990                           postdec2	equ	0xFDD
 19991                           fsr2h	equ	0xFDA
 19992                           fsr2l	equ	0xFD9
 19993                           status	equ	0xFD8
 19994                           
 19995 ;; *************** function i2___lwdiv *****************
 19996 ;; Defined at:
 19997 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 19998 ;; Parameters:    Size  Location     Type
 19999 ;;  dividend        2    5[COMRAM] unsigned int 
 20000 ;;  divisor         2    7[COMRAM] unsigned int 
 20001 ;; Auto vars:     Size  Location     Type
 20002 ;;  __lwdiv         2    9[COMRAM] unsigned int 
 20003 ;;  __lwdiv         1   11[COMRAM] unsigned char 
 20004 ;; Return value:  Size  Location     Type
 20005 ;;                  2    5[COMRAM] unsigned int 
 20006 ;; Registers used:
 20007 ;;		wreg, status,2, status,0
 20008 ;; Tracked objects:
 20009 ;;		On entry : 0/0
 20010 ;;		On exit  : 0/0
 20011 ;;		Unchanged: 0/0
 20012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20013 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20014 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20015 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20016 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20017 ;;Total ram usage:        7 bytes
 20018 ;; Hardware stack levels used:    1
 20019 ;; This function calls:
 20020 ;;		Nothing
 20021 ;; This function is called by:
 20022 ;;		_printSortTimer
 20023 ;;		i2_printf
 20024 ;; This function uses a non-reentrant model
 20025 ;;
 20026                           
 20027                           	psect	text82
 20028  003E6C                     __ptext82:
 20029                           	opt stack 0
 20030  003E6C                     i2___lwdiv:
 20031                           	opt stack 20
 20032                           
 20033                           ;incstack = 0
 20034  003E6C  0E00               	movlw	0
 20035  003E6E  6E0B               	movwf	i2___lwdiv@quotient+1,c
 20036  003E70  0E00               	movlw	0
 20037  003E72  6E0A               	movwf	i2___lwdiv@quotient,c
 20038  003E74  5008               	movf	i2___lwdiv@divisor,w,c
 20039  003E76  1009               	iorwf	i2___lwdiv@divisor+1,w,c
 20040  003E78  B4D8               	btfsc	status,2,c
 20041  003E7A  D01C               	goto	i2l1681
 20042  003E7C  0E01               	movlw	1
 20043  003E7E  6E0C               	movwf	i2___lwdiv@counter,c
 20044  003E80  D004               	goto	i2l5292
 20045  003E82                     i2l5290:
 20046  003E82  90D8               	bcf	status,0,c
 20047  003E84  3608               	rlcf	i2___lwdiv@divisor,f,c
 20048  003E86  3609               	rlcf	i2___lwdiv@divisor+1,f,c
 20049  003E88  2A0C               	incf	i2___lwdiv@counter,f,c
 20050  003E8A                     i2l5292:
 20051  003E8A  AE09               	btfss	i2___lwdiv@divisor+1,7,c
 20052  003E8C  D7FA               	goto	i2l5290
 20053  003E8E                     i2l5294:
 20054  003E8E  90D8               	bcf	status,0,c
 20055  003E90  360A               	rlcf	i2___lwdiv@quotient,f,c
 20056  003E92  360B               	rlcf	i2___lwdiv@quotient+1,f,c
 20057  003E94  5008               	movf	i2___lwdiv@divisor,w,c
 20058  003E96  5C06               	subwf	i2___lwdiv@dividend,w,c
 20059  003E98  5009               	movf	i2___lwdiv@divisor+1,w,c
 20060  003E9A  5807               	subwfb	i2___lwdiv@dividend+1,w,c
 20061  003E9C  A0D8               	btfss	status,0,c
 20062  003E9E  D005               	goto	i2l5302
 20063  003EA0  5008               	movf	i2___lwdiv@divisor,w,c
 20064  003EA2  5E06               	subwf	i2___lwdiv@dividend,f,c
 20065  003EA4  5009               	movf	i2___lwdiv@divisor+1,w,c
 20066  003EA6  5A07               	subwfb	i2___lwdiv@dividend+1,f,c
 20067  003EA8  800A               	bsf	i2___lwdiv@quotient,0,c
 20068  003EAA                     i2l5302:
 20069  003EAA  90D8               	bcf	status,0,c
 20070  003EAC  3209               	rrcf	i2___lwdiv@divisor+1,f,c
 20071  003EAE  3208               	rrcf	i2___lwdiv@divisor,f,c
 20072  003EB0  2E0C               	decfsz	i2___lwdiv@counter,f,c
 20073  003EB2  D7ED               	goto	i2l5294
 20074  003EB4                     i2l1681:
 20075  003EB4  C00A  F006         	movff	i2___lwdiv@quotient,?i2___lwdiv
 20076  003EB8  C00B  F007         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 20077  003EBC  0012               	return		;funcret
 20078  003EBE                     __end_ofi2___lwdiv:
 20079                           	opt stack 0
 20080                           pclatu	equ	0xFFB
 20081                           pclath	equ	0xFFA
 20082                           tblptru	equ	0xFF8
 20083                           tblptrh	equ	0xFF7
 20084                           tblptrl	equ	0xFF6
 20085                           tablat	equ	0xFF5
 20086                           prodh	equ	0xFF4
 20087                           prodl	equ	0xFF3
 20088                           intcon	equ	0xFF2
 20089                           intcon2	equ	0xFF1
 20090                           intcon3	equ	0xFF0
 20091                           indf0	equ	0xFEF
 20092                           postinc0	equ	0xFEE
 20093                           fsr0h	equ	0xFEA
 20094                           fsr0l	equ	0xFE9
 20095                           wreg	equ	0xFE8
 20096                           postdec1	equ	0xFE5
 20097                           fsr1h	equ	0xFE2
 20098                           fsr1l	equ	0xFE1
 20099                           indf2	equ	0xFDF
 20100                           postinc2	equ	0xFDE
 20101                           postdec2	equ	0xFDD
 20102                           fsr2h	equ	0xFDA
 20103                           fsr2l	equ	0xFD9
 20104                           status	equ	0xFD8
 20105                           
 20106 ;; *************** function i2_lcdInst *****************
 20107 ;; Defined at:
 20108 ;;		line 15 in file "lcd.c"
 20109 ;; Parameters:    Size  Location     Type
 20110 ;;  data            1    wreg     unsigned char 
 20111 ;; Auto vars:     Size  Location     Type
 20112 ;;  data            1    2[COMRAM] unsigned char 
 20113 ;; Return value:  Size  Location     Type
 20114 ;;                  1    wreg      void 
 20115 ;; Registers used:
 20116 ;;		wreg, status,2, status,0, cstack
 20117 ;; Tracked objects:
 20118 ;;		On entry : 0/0
 20119 ;;		On exit  : 0/0
 20120 ;;		Unchanged: 0/0
 20121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20122 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20123 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20124 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20125 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20126 ;;Total ram usage:        1 bytes
 20127 ;; Hardware stack levels used:    1
 20128 ;; Hardware stack levels required when called:    1
 20129 ;; This function calls:
 20130 ;;		i2_lcdNibble
 20131 ;; This function is called by:
 20132 ;;		_change_state_to_menu_11
 20133 ;;		_change_state_to_menu_23
 20134 ;;		_change_state_to_logs_11
 20135 ;;		_change_state_to_logs_12
 20136 ;;		_change_state_to_logs_22
 20137 ;;		_change_state_to_logs_23
 20138 ;;		_change_state_to_logs_33
 20139 ;;		_change_state_to_logs_34
 20140 ;;		_printSortTimer
 20141 ;;		i2_change_state_to_menu_start
 20142 ;;		i2_change_state_to_menu_12
 20143 ;;		i2_change_state_to_menu_22
 20144 ;;		i2_printRTC
 20145 ;; This function uses a non-reentrant model
 20146 ;;
 20147                           
 20148                           	psect	text83
 20149  0045FC                     __ptext83:
 20150                           	opt stack 0
 20151  0045FC                     i2_lcdInst:
 20152                           	opt stack 19
 20153                           
 20154                           ;incstack = 0
 20155                           ;i2lcdInst@data stored from wreg
 20156  0045FC  6E03               	movwf	i2lcdInst@data,c
 20157                           
 20158                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 20159  0045FE  948C               	bcf	3980,2,c	;volatile
 20160                           
 20161                           ;lcd.c: 17: lcdNibble(data);
 20162  004600  5003               	movf	i2lcdInst@data,w,c
 20163  004602  EC0B  F01F         	call	i2_lcdNibble
 20164  004606  0012               	return		;funcret
 20165  004608                     __end_ofi2_lcdInst:
 20166                           	opt stack 0
 20167                           pclatu	equ	0xFFB
 20168                           pclath	equ	0xFFA
 20169                           tblptru	equ	0xFF8
 20170                           tblptrh	equ	0xFF7
 20171                           tblptrl	equ	0xFF6
 20172                           tablat	equ	0xFF5
 20173                           prodh	equ	0xFF4
 20174                           prodl	equ	0xFF3
 20175                           intcon	equ	0xFF2
 20176                           intcon2	equ	0xFF1
 20177                           intcon3	equ	0xFF0
 20178                           indf0	equ	0xFEF
 20179                           postinc0	equ	0xFEE
 20180                           fsr0h	equ	0xFEA
 20181                           fsr0l	equ	0xFE9
 20182                           wreg	equ	0xFE8
 20183                           postdec1	equ	0xFE5
 20184                           fsr1h	equ	0xFE2
 20185                           fsr1l	equ	0xFE1
 20186                           indf2	equ	0xFDF
 20187                           postinc2	equ	0xFDE
 20188                           postdec2	equ	0xFDD
 20189                           fsr2h	equ	0xFDA
 20190                           fsr2l	equ	0xFD9
 20191                           status	equ	0xFD8
 20192                           
 20193 ;; *************** function i2_lcdNibble *****************
 20194 ;; Defined at:
 20195 ;;		line 25 in file "lcd.c"
 20196 ;; Parameters:    Size  Location     Type
 20197 ;;  data            1    wreg     unsigned char 
 20198 ;; Auto vars:     Size  Location     Type
 20199 ;;  data            1    1[COMRAM] unsigned char 
 20200 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 20201 ;; Return value:  Size  Location     Type
 20202 ;;                  1    wreg      void 
 20203 ;; Registers used:
 20204 ;;		wreg, status,2, status,0
 20205 ;; Tracked objects:
 20206 ;;		On entry : 0/0
 20207 ;;		On exit  : 0/0
 20208 ;;		Unchanged: 0/0
 20209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20210 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20211 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20212 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20213 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20214 ;;Total ram usage:        2 bytes
 20215 ;; Hardware stack levels used:    1
 20216 ;; This function calls:
 20217 ;;		Nothing
 20218 ;; This function is called by:
 20219 ;;		i2_lcdInst
 20220 ;;		i2_putch
 20221 ;; This function uses a non-reentrant model
 20222 ;;
 20223                           
 20224                           	psect	text84
 20225  003E16                     __ptext84:
 20226                           	opt stack 0
 20227  003E16                     i2_lcdNibble:
 20228                           	opt stack 19
 20229                           
 20230                           ;incstack = 0
 20231                           ;i2lcdNibble@data stored from wreg
 20232  003E16  6E02               	movwf	i2lcdNibble@data,c
 20233                           
 20234                           ;lcd.c: 27: char temp = data & 0xF0;
 20235  003E18  5002               	movf	i2lcdNibble@data,w,c
 20236  003E1A  0BF0               	andlw	240
 20237  003E1C  6E01               	movwf	i2lcdNibble@temp,c
 20238                           
 20239                           ;lcd.c: 28: LATD = LATD & 0x0F;
 20240  003E1E  508C               	movf	3980,w,c	;volatile
 20241  003E20  0B0F               	andlw	15
 20242  003E22  6E8C               	movwf	3980,c	;volatile
 20243                           
 20244                           ;lcd.c: 29: LATD = temp | LATD;
 20245  003E24  5001               	movf	i2lcdNibble@temp,w,c
 20246  003E26  108C               	iorwf	3980,w,c	;volatile
 20247  003E28  6E8C               	movwf	3980,c	;volatile
 20248                           
 20249                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 20250  003E2A  868C               	bsf	3980,3,c	;volatile
 20251                           
 20252                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 20253  003E2C  0E42               	movlw	66
 20254  003E2E                     i2u798_47:
 20255  003E2E  2EE8               	decfsz	wreg,f,c
 20256  003E30  D7FE               	bra	i2u798_47
 20257  003E32  D000               	nop2	
 20258                           
 20259                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 20260  003E34  968C               	bcf	3980,3,c	;volatile
 20261                           
 20262                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 20263  003E36  0E42               	movlw	66
 20264  003E38                     i2u799_47:
 20265  003E38  2EE8               	decfsz	wreg,f,c
 20266  003E3A  D7FE               	bra	i2u799_47
 20267  003E3C  D000               	nop2	
 20268                           
 20269                           ;lcd.c: 36: data = data << 4;
 20270  003E3E  3802               	swapf	i2lcdNibble@data,w,c
 20271  003E40  0BF0               	andlw	240
 20272  003E42  6E02               	movwf	i2lcdNibble@data,c
 20273                           
 20274                           ;lcd.c: 38: temp = data & 0xF0;
 20275  003E44  5002               	movf	i2lcdNibble@data,w,c
 20276  003E46  0BF0               	andlw	240
 20277  003E48  6E01               	movwf	i2lcdNibble@temp,c
 20278                           
 20279                           ;lcd.c: 39: LATD = LATD & 0x0F;
 20280  003E4A  508C               	movf	3980,w,c	;volatile
 20281  003E4C  0B0F               	andlw	15
 20282  003E4E  6E8C               	movwf	3980,c	;volatile
 20283                           
 20284                           ;lcd.c: 40: LATD = temp | LATD;
 20285  003E50  5001               	movf	i2lcdNibble@temp,w,c
 20286  003E52  108C               	iorwf	3980,w,c	;volatile
 20287  003E54  6E8C               	movwf	3980,c	;volatile
 20288                           
 20289                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 20290  003E56  868C               	bsf	3980,3,c	;volatile
 20291                           
 20292                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 20293  003E58  0E42               	movlw	66
 20294  003E5A                     i2u800_47:
 20295  003E5A  2EE8               	decfsz	wreg,f,c
 20296  003E5C  D7FE               	bra	i2u800_47
 20297  003E5E  D000               	nop2	
 20298                           
 20299                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 20300  003E60  968C               	bcf	3980,3,c	;volatile
 20301                           
 20302                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 20303  003E62  0E42               	movlw	66
 20304  003E64                     i2u801_47:
 20305  003E64  2EE8               	decfsz	wreg,f,c
 20306  003E66  D7FE               	bra	i2u801_47
 20307  003E68  D000               	nop2	
 20308  003E6A  0012               	return		;funcret
 20309  003E6C                     __end_ofi2_lcdNibble:
 20310                           	opt stack 0
 20311                           pclatu	equ	0xFFB
 20312                           pclath	equ	0xFFA
 20313                           tblptru	equ	0xFF8
 20314                           tblptrh	equ	0xFF7
 20315                           tblptrl	equ	0xFF6
 20316                           tablat	equ	0xFF5
 20317                           prodh	equ	0xFF4
 20318                           prodl	equ	0xFF3
 20319                           intcon	equ	0xFF2
 20320                           intcon2	equ	0xFF1
 20321                           intcon3	equ	0xFF0
 20322                           indf0	equ	0xFEF
 20323                           postinc0	equ	0xFEE
 20324                           fsr0h	equ	0xFEA
 20325                           fsr0l	equ	0xFE9
 20326                           wreg	equ	0xFE8
 20327                           postdec1	equ	0xFE5
 20328                           fsr1h	equ	0xFE2
 20329                           fsr1l	equ	0xFE1
 20330                           indf2	equ	0xFDF
 20331                           postinc2	equ	0xFDE
 20332                           postdec2	equ	0xFDD
 20333                           fsr2h	equ	0xFDA
 20334                           fsr2l	equ	0xFD9
 20335                           status	equ	0xFD8
 20336                           
 20337 ;; *************** function i2_getRTC *****************
 20338 ;; Defined at:
 20339 ;;		line 44 in file "RTC.c"
 20340 ;; Parameters:    Size  Location     Type
 20341 ;;		None
 20342 ;; Auto vars:     Size  Location     Type
 20343 ;;  getRTC          2    3[COMRAM] int 
 20344 ;; Return value:  Size  Location     Type
 20345 ;;                  1    wreg      void 
 20346 ;; Registers used:
 20347 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20348 ;; Tracked objects:
 20349 ;;		On entry : 0/0
 20350 ;;		On exit  : 0/0
 20351 ;;		Unchanged: 0/0
 20352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20353 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20354 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20355 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20356 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20357 ;;Total ram usage:        2 bytes
 20358 ;; Hardware stack levels used:    1
 20359 ;; Hardware stack levels required when called:    2
 20360 ;; This function calls:
 20361 ;;		i2_I2C_Master_Read
 20362 ;;		i2_I2C_Master_Start
 20363 ;;		i2_I2C_Master_Stop
 20364 ;;		i2_I2C_Master_Write
 20365 ;; This function is called by:
 20366 ;;		_printSortTimer
 20367 ;;		i2_printRTC
 20368 ;; This function uses a non-reentrant model
 20369 ;;
 20370                           
 20371                           	psect	text85
 20372  003AFE                     __ptext85:
 20373                           	opt stack 0
 20374  003AFE                     i2_getRTC:
 20375                           	opt stack 18
 20376                           
 20377                           ;RTC.c: 48: I2C_Master_Start();
 20378                           
 20379                           ;incstack = 0
 20380  003AFE  EC1E  F023         	call	i2_I2C_Master_Start	;wreg free
 20381                           
 20382                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
 20383  003B02  0E00               	movlw	0
 20384  003B04  6E03               	movwf	i2I2C_Master_Write@d+1,c
 20385  003B06  0ED0               	movlw	208
 20386  003B08  6E02               	movwf	i2I2C_Master_Write@d,c
 20387  003B0A  EC09  F023         	call	i2_I2C_Master_Write	;wreg free
 20388                           
 20389                           ;RTC.c: 50: I2C_Master_Write(0x00);
 20390  003B0E  0E00               	movlw	0
 20391  003B10  6E03               	movwf	i2I2C_Master_Write@d+1,c
 20392  003B12  0E00               	movlw	0
 20393  003B14  6E02               	movwf	i2I2C_Master_Write@d,c
 20394  003B16  EC09  F023         	call	i2_I2C_Master_Write	;wreg free
 20395                           
 20396                           ;RTC.c: 51: I2C_Master_Stop();
 20397  003B1A  EC1A  F023         	call	i2_I2C_Master_Stop	;wreg free
 20398                           
 20399                           ;RTC.c: 54: I2C_Master_Start();
 20400  003B1E  EC1E  F023         	call	i2_I2C_Master_Start	;wreg free
 20401                           
 20402                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
 20403  003B22  0E00               	movlw	0
 20404  003B24  6E03               	movwf	i2I2C_Master_Write@d+1,c
 20405  003B26  0ED1               	movlw	209
 20406  003B28  6E02               	movwf	i2I2C_Master_Write@d,c
 20407  003B2A  EC09  F023         	call	i2_I2C_Master_Write	;wreg free
 20408                           
 20409                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
 20410  003B2E  0E00               	movlw	0
 20411  003B30  6E05               	movwf	i2getRTC@i+1,c
 20412  003B32  0E00               	movlw	0
 20413  003B34  6E04               	movwf	i2getRTC@i,c
 20414  003B36                     i2l5542:
 20415  003B36  BE05               	btfsc	i2getRTC@i+1,7,c
 20416  003B38  D006               	goto	i2l5546
 20417  003B3A  5005               	movf	i2getRTC@i+1,w,c
 20418  003B3C  E111               	bnz	i2l5552
 20419  003B3E  0E06               	movlw	6
 20420  003B40  5C04               	subwf	i2getRTC@i,w,c
 20421  003B42  B0D8               	btfsc	status,0,c
 20422  003B44  D00D               	goto	i2l5552
 20423  003B46                     i2l5546:
 20424                           
 20425                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
 20426  003B46  0E24               	movlw	low _time
 20427  003B48  2404               	addwf	i2getRTC@i,w,c
 20428  003B4A  6ED9               	movwf	fsr2l,c
 20429  003B4C  0E01               	movlw	high _time
 20430  003B4E  2005               	addwfc	i2getRTC@i+1,w,c
 20431  003B50  6EDA               	movwf	fsr2h,c
 20432  003B52  0E01               	movlw	1
 20433  003B54  EC5D  F022         	call	i2_I2C_Master_Read
 20434  003B58  6EDF               	movwf	indf2,c
 20435  003B5A  4A04               	infsnz	i2getRTC@i,f,c
 20436  003B5C  2A05               	incf	i2getRTC@i+1,f,c
 20437  003B5E  D7EB               	goto	i2l5542
 20438  003B60                     i2l5552:
 20439                           
 20440                           ;RTC.c: 58: }
 20441                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
 20442  003B60  0E00               	movlw	0
 20443  003B62  EC5D  F022         	call	i2_I2C_Master_Read
 20444  003B66  0101               	movlb	1	; () banked
 20445  003B68  6F2A               	movwf	(_time+6)& (0+255),b
 20446                           
 20447                           ;RTC.c: 60: I2C_Master_Stop();
 20448  003B6A  EC1A  F023         	call	i2_I2C_Master_Stop	;wreg free
 20449  003B6E  0012               	return		;funcret
 20450  003B70                     __end_ofi2_getRTC:
 20451                           	opt stack 0
 20452                           pclatu	equ	0xFFB
 20453                           pclath	equ	0xFFA
 20454                           tblptru	equ	0xFF8
 20455                           tblptrh	equ	0xFF7
 20456                           tblptrl	equ	0xFF6
 20457                           tablat	equ	0xFF5
 20458                           prodh	equ	0xFF4
 20459                           prodl	equ	0xFF3
 20460                           intcon	equ	0xFF2
 20461                           intcon2	equ	0xFF1
 20462                           intcon3	equ	0xFF0
 20463                           indf0	equ	0xFEF
 20464                           postinc0	equ	0xFEE
 20465                           fsr0h	equ	0xFEA
 20466                           fsr0l	equ	0xFE9
 20467                           wreg	equ	0xFE8
 20468                           postdec1	equ	0xFE5
 20469                           fsr1h	equ	0xFE2
 20470                           fsr1l	equ	0xFE1
 20471                           indf2	equ	0xFDF
 20472                           postinc2	equ	0xFDE
 20473                           postdec2	equ	0xFDD
 20474                           fsr2h	equ	0xFDA
 20475                           fsr2l	equ	0xFD9
 20476                           status	equ	0xFD8
 20477                           
 20478 ;; *************** function i2_I2C_Master_Write *****************
 20479 ;; Defined at:
 20480 ;;		line 49 in file "I2C.c"
 20481 ;; Parameters:    Size  Location     Type
 20482 ;;  d               2    1[COMRAM] unsigned int 
 20483 ;; Auto vars:     Size  Location     Type
 20484 ;;		None
 20485 ;; Return value:  Size  Location     Type
 20486 ;;                  1    wreg      void 
 20487 ;; Registers used:
 20488 ;;		wreg, status,2, status,0, cstack
 20489 ;; Tracked objects:
 20490 ;;		On entry : 0/0
 20491 ;;		On exit  : 0/0
 20492 ;;		Unchanged: 0/0
 20493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20494 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20495 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20496 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20497 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20498 ;;Total ram usage:        2 bytes
 20499 ;; Hardware stack levels used:    1
 20500 ;; Hardware stack levels required when called:    1
 20501 ;; This function calls:
 20502 ;;		i2_I2C_Master_Wait
 20503 ;; This function is called by:
 20504 ;;		i2_getRTC
 20505 ;; This function uses a non-reentrant model
 20506 ;;
 20507                           
 20508                           	psect	text86
 20509  004612                     __ptext86:
 20510                           	opt stack 0
 20511  004612                     i2_I2C_Master_Write:
 20512                           	opt stack 18
 20513                           
 20514                           ;I2C.c: 51: I2C_Master_Wait();
 20515                           
 20516                           ;incstack = 0
 20517  004612  ECDF  F022         	call	i2_I2C_Master_Wait	;wreg free
 20518                           
 20519                           ;I2C.c: 52: SSPBUF = d;
 20520  004616  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 20521  00461A  0012               	return		;funcret
 20522  00461C                     __end_ofi2_I2C_Master_Write:
 20523                           	opt stack 0
 20524                           pclatu	equ	0xFFB
 20525                           pclath	equ	0xFFA
 20526                           tblptru	equ	0xFF8
 20527                           tblptrh	equ	0xFF7
 20528                           tblptrl	equ	0xFF6
 20529                           tablat	equ	0xFF5
 20530                           prodh	equ	0xFF4
 20531                           prodl	equ	0xFF3
 20532                           intcon	equ	0xFF2
 20533                           intcon2	equ	0xFF1
 20534                           intcon3	equ	0xFF0
 20535                           indf0	equ	0xFEF
 20536                           postinc0	equ	0xFEE
 20537                           fsr0h	equ	0xFEA
 20538                           fsr0l	equ	0xFE9
 20539                           wreg	equ	0xFE8
 20540                           postdec1	equ	0xFE5
 20541                           fsr1h	equ	0xFE2
 20542                           fsr1l	equ	0xFE1
 20543                           indf2	equ	0xFDF
 20544                           postinc2	equ	0xFDE
 20545                           postdec2	equ	0xFDD
 20546                           fsr2h	equ	0xFDA
 20547                           fsr2l	equ	0xFD9
 20548                           status	equ	0xFD8
 20549                           
 20550 ;; *************** function i2_I2C_Master_Stop *****************
 20551 ;; Defined at:
 20552 ;;		line 43 in file "I2C.c"
 20553 ;; Parameters:    Size  Location     Type
 20554 ;;		None
 20555 ;; Auto vars:     Size  Location     Type
 20556 ;;		None
 20557 ;; Return value:  Size  Location     Type
 20558 ;;                  1    wreg      void 
 20559 ;; Registers used:
 20560 ;;		wreg, status,2, status,0, cstack
 20561 ;; Tracked objects:
 20562 ;;		On entry : 0/0
 20563 ;;		On exit  : 0/0
 20564 ;;		Unchanged: 0/0
 20565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20566 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20567 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20568 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20569 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20570 ;;Total ram usage:        0 bytes
 20571 ;; Hardware stack levels used:    1
 20572 ;; Hardware stack levels required when called:    1
 20573 ;; This function calls:
 20574 ;;		i2_I2C_Master_Wait
 20575 ;; This function is called by:
 20576 ;;		i2_getRTC
 20577 ;; This function uses a non-reentrant model
 20578 ;;
 20579                           
 20580                           	psect	text87
 20581  004634                     __ptext87:
 20582                           	opt stack 0
 20583  004634                     i2_I2C_Master_Stop:
 20584                           	opt stack 18
 20585                           
 20586                           ;I2C.c: 45: I2C_Master_Wait();
 20587                           
 20588                           ;incstack = 0
 20589  004634  ECDF  F022         	call	i2_I2C_Master_Wait	;wreg free
 20590                           
 20591                           ;I2C.c: 46: PEN = 1;
 20592  004638  84C5               	bsf	4037,2,c	;volatile
 20593  00463A  0012               	return		;funcret
 20594  00463C                     __end_ofi2_I2C_Master_Stop:
 20595                           	opt stack 0
 20596                           pclatu	equ	0xFFB
 20597                           pclath	equ	0xFFA
 20598                           tblptru	equ	0xFF8
 20599                           tblptrh	equ	0xFF7
 20600                           tblptrl	equ	0xFF6
 20601                           tablat	equ	0xFF5
 20602                           prodh	equ	0xFF4
 20603                           prodl	equ	0xFF3
 20604                           intcon	equ	0xFF2
 20605                           intcon2	equ	0xFF1
 20606                           intcon3	equ	0xFF0
 20607                           indf0	equ	0xFEF
 20608                           postinc0	equ	0xFEE
 20609                           fsr0h	equ	0xFEA
 20610                           fsr0l	equ	0xFE9
 20611                           wreg	equ	0xFE8
 20612                           postdec1	equ	0xFE5
 20613                           fsr1h	equ	0xFE2
 20614                           fsr1l	equ	0xFE1
 20615                           indf2	equ	0xFDF
 20616                           postinc2	equ	0xFDE
 20617                           postdec2	equ	0xFDD
 20618                           fsr2h	equ	0xFDA
 20619                           fsr2l	equ	0xFD9
 20620                           status	equ	0xFD8
 20621                           
 20622 ;; *************** function i2_I2C_Master_Start *****************
 20623 ;; Defined at:
 20624 ;;		line 31 in file "I2C.c"
 20625 ;; Parameters:    Size  Location     Type
 20626 ;;		None
 20627 ;; Auto vars:     Size  Location     Type
 20628 ;;		None
 20629 ;; Return value:  Size  Location     Type
 20630 ;;                  1    wreg      void 
 20631 ;; Registers used:
 20632 ;;		wreg, status,2, status,0, cstack
 20633 ;; Tracked objects:
 20634 ;;		On entry : 0/0
 20635 ;;		On exit  : 0/0
 20636 ;;		Unchanged: 0/0
 20637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20638 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20639 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20640 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20641 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20642 ;;Total ram usage:        0 bytes
 20643 ;; Hardware stack levels used:    1
 20644 ;; Hardware stack levels required when called:    1
 20645 ;; This function calls:
 20646 ;;		i2_I2C_Master_Wait
 20647 ;; This function is called by:
 20648 ;;		i2_getRTC
 20649 ;; This function uses a non-reentrant model
 20650 ;;
 20651                           
 20652                           	psect	text88
 20653  00463C                     __ptext88:
 20654                           	opt stack 0
 20655  00463C                     i2_I2C_Master_Start:
 20656                           	opt stack 18
 20657                           
 20658                           ;I2C.c: 33: I2C_Master_Wait();
 20659                           
 20660                           ;incstack = 0
 20661  00463C  ECDF  F022         	call	i2_I2C_Master_Wait	;wreg free
 20662                           
 20663                           ;I2C.c: 34: SEN = 1;
 20664  004640  80C5               	bsf	4037,0,c	;volatile
 20665  004642  0012               	return		;funcret
 20666  004644                     __end_ofi2_I2C_Master_Start:
 20667                           	opt stack 0
 20668                           pclatu	equ	0xFFB
 20669                           pclath	equ	0xFFA
 20670                           tblptru	equ	0xFF8
 20671                           tblptrh	equ	0xFF7
 20672                           tblptrl	equ	0xFF6
 20673                           tablat	equ	0xFF5
 20674                           prodh	equ	0xFF4
 20675                           prodl	equ	0xFF3
 20676                           intcon	equ	0xFF2
 20677                           intcon2	equ	0xFF1
 20678                           intcon3	equ	0xFF0
 20679                           indf0	equ	0xFEF
 20680                           postinc0	equ	0xFEE
 20681                           fsr0h	equ	0xFEA
 20682                           fsr0l	equ	0xFE9
 20683                           wreg	equ	0xFE8
 20684                           postdec1	equ	0xFE5
 20685                           fsr1h	equ	0xFE2
 20686                           fsr1l	equ	0xFE1
 20687                           indf2	equ	0xFDF
 20688                           postinc2	equ	0xFDE
 20689                           postdec2	equ	0xFDD
 20690                           fsr2h	equ	0xFDA
 20691                           fsr2l	equ	0xFD9
 20692                           status	equ	0xFD8
 20693                           
 20694 ;; *************** function i2_I2C_Master_Read *****************
 20695 ;; Defined at:
 20696 ;;		line 55 in file "I2C.c"
 20697 ;; Parameters:    Size  Location     Type
 20698 ;;  a               1    wreg     unsigned char 
 20699 ;; Auto vars:     Size  Location     Type
 20700 ;;  a               1    1[COMRAM] unsigned char 
 20701 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 20702 ;; Return value:  Size  Location     Type
 20703 ;;                  1    wreg      unsigned char 
 20704 ;; Registers used:
 20705 ;;		wreg, status,2, status,0, cstack
 20706 ;; Tracked objects:
 20707 ;;		On entry : 0/0
 20708 ;;		On exit  : 0/0
 20709 ;;		Unchanged: 0/0
 20710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20711 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20712 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20713 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20714 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20715 ;;Total ram usage:        2 bytes
 20716 ;; Hardware stack levels used:    1
 20717 ;; Hardware stack levels required when called:    1
 20718 ;; This function calls:
 20719 ;;		i2_I2C_Master_Wait
 20720 ;; This function is called by:
 20721 ;;		i2_getRTC
 20722 ;; This function uses a non-reentrant model
 20723 ;;
 20724                           
 20725                           	psect	text89
 20726  0044BA                     __ptext89:
 20727                           	opt stack 0
 20728  0044BA                     i2_I2C_Master_Read:
 20729                           	opt stack 18
 20730                           
 20731                           ;incstack = 0
 20732                           ;i2I2C_Master_Read@a stored from wreg
 20733  0044BA  6E02               	movwf	i2I2C_Master_Read@a,c
 20734                           
 20735                           ;I2C.c: 57: unsigned char temp;
 20736                           ;I2C.c: 58: I2C_Master_Wait();
 20737  0044BC  ECDF  F022         	call	i2_I2C_Master_Wait	;wreg free
 20738                           
 20739                           ;I2C.c: 59: RCEN = 1;
 20740  0044C0  86C5               	bsf	4037,3,c	;volatile
 20741                           
 20742                           ;I2C.c: 60: I2C_Master_Wait();
 20743  0044C2  ECDF  F022         	call	i2_I2C_Master_Wait	;wreg free
 20744                           
 20745                           ;I2C.c: 61: temp = SSPBUF;
 20746  0044C6  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 20747                           
 20748                           ;I2C.c: 62: I2C_Master_Wait();
 20749  0044CA  ECDF  F022         	call	i2_I2C_Master_Wait	;wreg free
 20750                           
 20751                           ;I2C.c: 63: ACKDT = (a)?0:1;
 20752  0044CE  5002               	movf	i2I2C_Master_Read@a,w,c
 20753  0044D0  A4D8               	btfss	status,2,c
 20754  0044D2  D002               	goto	i2u360_40
 20755  0044D4  8AC5               	bsf	4037,5,c	;volatile
 20756  0044D6  D001               	goto	i2l5256
 20757  0044D8                     i2u360_40:
 20758  0044D8  9AC5               	bcf	4037,5,c	;volatile
 20759  0044DA                     i2l5256:
 20760                           
 20761                           ;I2C.c: 64: ACKEN = 1;
 20762  0044DA  88C5               	bsf	4037,4,c	;volatile
 20763                           
 20764                           ;I2C.c: 65: return temp;
 20765  0044DC  5003               	movf	i2I2C_Master_Read@temp,w,c
 20766  0044DE  0012               	return	
 20767  0044E0                     __end_ofi2_I2C_Master_Read:
 20768                           	opt stack 0
 20769                           pclatu	equ	0xFFB
 20770                           pclath	equ	0xFFA
 20771                           tblptru	equ	0xFF8
 20772                           tblptrh	equ	0xFF7
 20773                           tblptrl	equ	0xFF6
 20774                           tablat	equ	0xFF5
 20775                           prodh	equ	0xFF4
 20776                           prodl	equ	0xFF3
 20777                           intcon	equ	0xFF2
 20778                           intcon2	equ	0xFF1
 20779                           intcon3	equ	0xFF0
 20780                           indf0	equ	0xFEF
 20781                           postinc0	equ	0xFEE
 20782                           fsr0h	equ	0xFEA
 20783                           fsr0l	equ	0xFE9
 20784                           wreg	equ	0xFE8
 20785                           postdec1	equ	0xFE5
 20786                           fsr1h	equ	0xFE2
 20787                           fsr1l	equ	0xFE1
 20788                           indf2	equ	0xFDF
 20789                           postinc2	equ	0xFDE
 20790                           postdec2	equ	0xFDD
 20791                           fsr2h	equ	0xFDA
 20792                           fsr2l	equ	0xFD9
 20793                           status	equ	0xFD8
 20794                           
 20795 ;; *************** function i2_I2C_Master_Wait *****************
 20796 ;; Defined at:
 20797 ;;		line 26 in file "I2C.c"
 20798 ;; Parameters:    Size  Location     Type
 20799 ;;		None
 20800 ;; Auto vars:     Size  Location     Type
 20801 ;;		None
 20802 ;; Return value:  Size  Location     Type
 20803 ;;                  1    wreg      void 
 20804 ;; Registers used:
 20805 ;;		wreg, status,2, status,0
 20806 ;; Tracked objects:
 20807 ;;		On entry : 0/0
 20808 ;;		On exit  : 0/0
 20809 ;;		Unchanged: 0/0
 20810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20811 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20812 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20813 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20814 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20815 ;;Total ram usage:        1 bytes
 20816 ;; Hardware stack levels used:    1
 20817 ;; This function calls:
 20818 ;;		Nothing
 20819 ;; This function is called by:
 20820 ;;		i2_I2C_Master_Start
 20821 ;;		i2_I2C_Master_Stop
 20822 ;;		i2_I2C_Master_Write
 20823 ;;		i2_I2C_Master_Read
 20824 ;; This function uses a non-reentrant model
 20825 ;;
 20826                           
 20827                           	psect	text90
 20828  0045BE                     __ptext90:
 20829                           	opt stack 0
 20830  0045BE                     i2_I2C_Master_Wait:
 20831                           	opt stack 18
 20832  0045BE                     i2l66:
 20833  0045BE  B4C7               	btfsc	4039,2,c	;volatile
 20834  0045C0  D7FE               	goto	i2l66
 20835  0045C2  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 20836  0045C6  0E1F               	movlw	31
 20837  0045C8  1601               	andwf	??i2_I2C_Master_Wait,f,c
 20838  0045CA  B4D8               	btfsc	status,2,c
 20839  0045CC  0012               	return	
 20840  0045CE  D7F7               	goto	i2l66
 20841  0045D0                     __end_ofi2_I2C_Master_Wait:
 20842                           	opt stack 0
 20843                           pclatu	equ	0xFFB
 20844                           pclath	equ	0xFFA
 20845                           tblptru	equ	0xFF8
 20846                           tblptrh	equ	0xFF7
 20847                           tblptrl	equ	0xFF6
 20848                           tablat	equ	0xFF5
 20849                           prodh	equ	0xFF4
 20850                           prodl	equ	0xFF3
 20851                           intcon	equ	0xFF2
 20852                           intcon2	equ	0xFF1
 20853                           intcon3	equ	0xFF0
 20854                           indf0	equ	0xFEF
 20855                           postinc0	equ	0xFEE
 20856                           fsr0h	equ	0xFEA
 20857                           fsr0l	equ	0xFE9
 20858                           wreg	equ	0xFE8
 20859                           postdec1	equ	0xFE5
 20860                           fsr1h	equ	0xFE2
 20861                           fsr1l	equ	0xFE1
 20862                           indf2	equ	0xFDF
 20863                           postinc2	equ	0xFDE
 20864                           postdec2	equ	0xFDD
 20865                           fsr2h	equ	0xFDA
 20866                           fsr2l	equ	0xFD9
 20867                           status	equ	0xFD8
 20868                           pclatu	equ	0xFFB
 20869                           pclath	equ	0xFFA
 20870                           tblptru	equ	0xFF8
 20871                           tblptrh	equ	0xFF7
 20872                           tblptrl	equ	0xFF6
 20873                           tablat	equ	0xFF5
 20874                           prodh	equ	0xFF4
 20875                           prodl	equ	0xFF3
 20876                           intcon	equ	0xFF2
 20877                           intcon2	equ	0xFF1
 20878                           intcon3	equ	0xFF0
 20879                           indf0	equ	0xFEF
 20880                           postinc0	equ	0xFEE
 20881                           fsr0h	equ	0xFEA
 20882                           fsr0l	equ	0xFE9
 20883                           wreg	equ	0xFE8
 20884                           postdec1	equ	0xFE5
 20885                           fsr1h	equ	0xFE2
 20886                           fsr1l	equ	0xFE1
 20887                           indf2	equ	0xFDF
 20888                           postinc2	equ	0xFDE
 20889                           postdec2	equ	0xFDD
 20890                           fsr2h	equ	0xFDA
 20891                           fsr2l	equ	0xFD9
 20892                           status	equ	0xFD8
 20893                           
 20894                           	psect	rparam
 20895  0000                     pclatu	equ	0xFFB
 20896                           pclath	equ	0xFFA
 20897                           tblptru	equ	0xFF8
 20898                           tblptrh	equ	0xFF7
 20899                           tblptrl	equ	0xFF6
 20900                           tablat	equ	0xFF5
 20901                           prodh	equ	0xFF4
 20902                           prodl	equ	0xFF3
 20903                           intcon	equ	0xFF2
 20904                           intcon2	equ	0xFF1
 20905                           intcon3	equ	0xFF0
 20906                           indf0	equ	0xFEF
 20907                           postinc0	equ	0xFEE
 20908                           fsr0h	equ	0xFEA
 20909                           fsr0l	equ	0xFE9
 20910                           wreg	equ	0xFE8
 20911                           postdec1	equ	0xFE5
 20912                           fsr1h	equ	0xFE2
 20913                           fsr1l	equ	0xFE1
 20914                           indf2	equ	0xFDF
 20915                           postinc2	equ	0xFDE
 20916                           postdec2	equ	0xFDD
 20917                           fsr2h	equ	0xFDA
 20918                           fsr2l	equ	0xFD9
 20919                           status	equ	0xFD8
 20920                           
 20921                           	psect	temp
 20922  00007E                     btemp:
 20923                           	opt stack 0
 20924  00007E                     	ds	1
 20925  0000                     int$flags	set	btemp
 20926                           pclatu	equ	0xFFB
 20927                           pclath	equ	0xFFA
 20928                           tblptru	equ	0xFF8
 20929                           tblptrh	equ	0xFF7
 20930                           tblptrl	equ	0xFF6
 20931                           tablat	equ	0xFF5
 20932                           prodh	equ	0xFF4
 20933                           prodl	equ	0xFF3
 20934                           intcon	equ	0xFF2
 20935                           intcon2	equ	0xFF1
 20936                           intcon3	equ	0xFF0
 20937                           indf0	equ	0xFEF
 20938                           postinc0	equ	0xFEE
 20939                           fsr0h	equ	0xFEA
 20940                           fsr0l	equ	0xFE9
 20941                           wreg	equ	0xFE8
 20942                           postdec1	equ	0xFE5
 20943                           fsr1h	equ	0xFE2
 20944                           fsr1l	equ	0xFE1
 20945                           indf2	equ	0xFDF
 20946                           postinc2	equ	0xFDE
 20947                           postdec2	equ	0xFDD
 20948                           fsr2h	equ	0xFDA
 20949                           fsr2l	equ	0xFD9
 20950                           status	equ	0xFD8


Data Sizes:
    Strings     1212
    Constant    27
    Data        8
    BSS         120
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     90     125
    BANK0           128     90     128
    BANK1           256      0      55
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_62(CODE[4]), STR_61(CODE[4]), STR_60(CODE[4]), STR_59(CODE[4]), 
		 -> STR_58(CODE[4]), STR_57(CODE[4]), STR_56(CODE[4]), STR_55(CODE[4]), 
		 -> STR_54(CODE[4]), STR_53(CODE[4]), STR_52(CODE[4]), STR_51(CODE[4]), 
		 -> STR_20(CODE[4]), STR_19(CODE[4]), STR_18(CODE[4]), STR_17(CODE[4]), 
		 -> STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[4]), STR_13(CODE[4]), 
		 -> STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[4]), 
		 -> STR_8(CODE[4]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_113(CODE[7]), count_total(BANK0[2]), printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_112(CODE[17]), STR_111(CODE[17]), STR_110(CODE[10]), STR_109(CODE[13]), 
		 -> STR_108(CODE[18]), STR_107(CODE[18]), STR_106(CODE[17]), STR_105(CODE[15]), 
		 -> STR_104(CODE[15]), STR_103(CODE[15]), STR_102(CODE[17]), STR_101(CODE[17]), 
		 -> STR_100(CODE[17]), STR_99(CODE[16]), STR_98(CODE[17]), STR_97(CODE[17]), 
		 -> STR_96(CODE[17]), STR_95(CODE[17]), STR_94(CODE[17]), STR_93(CODE[17]), 
		 -> STR_92(CODE[15]), STR_91(CODE[11]), STR_90(CODE[17]), STR_89(CODE[11]), 
		 -> STR_88(CODE[17]), STR_87(CODE[14]), STR_86(CODE[15]), STR_85(CODE[14]), 
		 -> STR_84(CODE[10]), STR_83(CODE[16]), STR_82(CODE[15]), STR_81(CODE[3]), 
		 -> STR_80(CODE[15]), STR_79(CODE[13]), STR_78(CODE[14]), STR_77(CODE[8]), 
		 -> STR_76(CODE[14]), STR_75(CODE[15]), STR_74(CODE[12]), STR_73(CODE[14]), 
		 -> STR_72(CODE[17]), STR_71(CODE[14]), STR_70(CODE[15]), STR_69(CODE[17]), 
		 -> STR_68(CODE[17]), STR_67(CODE[7]), STR_66(CODE[21]), STR_65(CODE[13]), 
		 -> STR_64(CODE[11]), STR_63(CODE[24]), STR_50(CODE[17]), STR_49(CODE[17]), 
		 -> STR_48(CODE[17]), STR_47(CODE[17]), STR_46(CODE[17]), STR_45(CODE[17]), 
		 -> STR_44(CODE[17]), STR_43(CODE[17]), STR_42(CODE[17]), STR_41(CODE[17]), 
		 -> STR_40(CODE[17]), STR_39(CODE[17]), STR_38(CODE[17]), STR_37(CODE[17]), 
		 -> STR_36(CODE[17]), STR_35(CODE[17]), STR_34(CODE[17]), STR_33(CODE[17]), 
		 -> STR_32(CODE[17]), STR_31(CODE[17]), STR_30(CODE[17]), STR_29(CODE[3]), 
		 -> STR_28(CODE[17]), STR_27(CODE[19]), STR_26(CODE[17]), STR_25(CODE[19]), 
		 -> STR_24(CODE[17]), STR_23(CODE[14]), STR_22(CODE[10]), STR_21(CODE[24]), 
		 -> STR_7(CODE[7]), STR_6(CODE[17]), STR_5(CODE[18]), STR_4(CODE[16]), 
		 -> STR_3(CODE[18]), STR_2(CODE[14]), STR_1(CODE[18]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _handler in COMRAM

    _handler->_printSortTimer
    i2_change_state_to_menu_start->i2_printRTC
    i2_printRTC->i2_printf
    i2_change_state_to_menu_22->i2_printf
    i2_change_state_to_menu_12->i2_printf
    _change_state_to_menu_23->i2_printf
    _change_state_to_menu_11->i2_printf
    _change_state_to_logs_34->i2_printf
    _change_state_to_logs_33->i2_printf
    _change_state_to_logs_23->i2_printf
    _change_state_to_logs_22->i2_printf
    _change_state_to_logs_12->i2_printf
    _change_state_to_logs_11->i2_printf
    _dispLogs->_retrieveLog
    _retrieveLog->i2___wmul
    _printSortTimer->i2_printf
    i2_printf->i2___lwdiv
    i2_putch->i2_lcdNibble
    i2___lwdiv->i2___lwmod
    i2_lcdInst->i2_lcdNibble
    i2_getRTC->i2_I2C_Master_Read
    i2_getRTC->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_UI
    _sort->_Loading
    _Loading->_EEPROM_write
    _initSortTimer->_getRTC
    _getIR->_readIR
    _readIR->_readADC
    _ID->_readMAG
    _Distribution->_updateServoPosition
    _logRun->_EEPROM_write
    _EEPROM_write->_printf
    _loadRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _change_state_to_menu_start->_printRTC
    _initLCD->_lcdInst
    _UI->_printRTC
    _printRTC->_printf
    _getRTC->_I2C_Master_Read
    _getRTC->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _change_state_to_menu_22->_printf
    _change_state_to_menu_12->_printf
    ___awdiv->___awmod
    _Test->_actuatorTest
    _sensorTest->_printf
    _readMAG->_readADC
    _algorithmTest->_printf
    _actuatorTest->_printf
    _ToggleTestA5->_printf
    _SolenoidTestA5->_printf
    _PortTestA5->_printf
    _BothServos->_printf
    _printf->___awdiv
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble
    _initServos->_updateServoPosition

Critical Paths under _handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  174576
                               _Test
                                 _UI
                            _initLCD
                           _initTime
                             _initUI
                             _logRun
                      _machineConfig
                               _sort
                        _stopSignals
 ---------------------------------------------------------------------------------
 (1) _stopSignals                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _sort                                                 0     0      0   20078
                       _Distribution
                                 _ID
                            _Loading
 ---------------------------------------------------------------------------------
 (2) _Loading                                              7     7      0   15514
                                             49 BANK0      7     7      0
                        _EEPROM_read
                       _EEPROM_write
                           _delay_ms
                              _getIR
                     _initGlobalVars
                         _initServos
                      _initSortTimer
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _initSortTimer                                        5     5      0     631
                                              5 BANK0      5     5      0
                             _getRTC
 ---------------------------------------------------------------------------------
 (3) _initGlobalVars                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _getIR                                                2     2      0      45
                                              6 BANK0      2     2      0
                             _readIR
 ---------------------------------------------------------------------------------
 (4) _readIR                                               4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             2     2      0      23
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _ID                                                   8     8      0     207
                                              6 BANK0      8     8      0
                            _readMAG
 ---------------------------------------------------------------------------------
 (2) _Distribution                                         2     2      0    4357
                                              8 BANK0      2     2      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (1) _machineConfig                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _logRun                                              10    10      0   10530
                                             49 BANK0     10    10      0
                        _EEPROM_read
                       _EEPROM_write
 ---------------------------------------------------------------------------------
 (3) _EEPROM_write                                         6     3      3    9783
                                             43 BANK0      6     3      3
                        _EEPROM_read
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _EEPROM_read                                          2     0      2     426
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _initUI                                               0     0      0   21392
         _change_state_to_menu_start
                            _loadRTC
 ---------------------------------------------------------------------------------
 (2) _loadRTC                                              3     3      0     850
                                             21 BANK0      3     3      0
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Init                                      8     4      4     376
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     290
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_start                           0     0      0   20542
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initTime                                             7     1      6     538
                                              0 BANK0      7     1      6
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _UI                                                  24    24      0   42664
                                             68 BANK0     22    22      0
                            ___awdiv
                            ___awmod
            _change_state_to_menu_12
            _change_state_to_menu_22
                            _lcdInst
                           _printRTC
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _printRTC                                            25    25      0   12455
                                             43 BANK0     25    25      0
                             _getRTC
                            _lcdInst
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    3275
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _getRTC                                               2     2      0     519
                                              3 BANK0      2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     2     0      2     406
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_22                              0     0      0    8087
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_12                              0     0      0    8087
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    1064
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     556
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _Test                                                 2     2      0   79239
                                             70 BANK0      2     2      0
                         _BothServos
                         _EEPROMTest
                         _PortTestA5
                          _PortTests
                     _SolenoidTestA5
                       _ToggleTestA5
                       _actuatorTest
                      _algorithmTest
                            _lcdInst
                             _printf
                         _sensorTest
 ---------------------------------------------------------------------------------
 (2) _sensorTest                                           4     4      0    8199
                                             43 BANK0      4     4      0
                            _lcdInst
                             _printf
                            _readADC
                            _readMAG
 ---------------------------------------------------------------------------------
 (3) _readMAG                                              4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (5) _readADC                                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _algorithmTest                                        2     2      0    8087
                                             43 BANK0      2     2      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _actuatorTest                                        27    27      0   13641
                                             43 BANK0     27    27      0
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (2) _ToggleTestA5                                         3     3      0    8112
                                             43 BANK0      3     3      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _SolenoidTestA5                                       6     6      0    8225
                                             43 BANK0      6     6      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PortTests                                            2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _PortTestA5                                           1     1      0    8087
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _EEPROMTest                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _BothServos                                           2     2      0   16801
                                             43 BANK0      2     2      0
                         _initServos
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (4) _printf                                              33    21     12    7952
                                             14 BANK0     29    17     12
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     669
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     515
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     442
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _initServos                                           1     1      0    4357
                                              8 BANK0      1     1      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (4) _updateServoPosition                                  8     4      4    4357
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _handler                                             16    16      0   76936
                                             74 COMRAM    16    16      0
                     _printSortTimer
                         _updateMenu
 ---------------------------------------------------------------------------------
 (8) _updateMenu                                           2     2      0   71999
                                             66 COMRAM     2     2      0
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
                           _dispLogs
                       _inputHandler
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_start                         0     0      0    7744
                          i2_lcdInst
                         i2_printRTC
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printRTC                                         25    25      0    4605
                                             41 COMRAM    25    25      0
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
                           i2_strcpy
 ---------------------------------------------------------------------------------
 (11) i2_strcpy                                            6     2      4     699
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _inputHandler                                         4     2      2   31390
                                             41 COMRAM     4     2      2
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_22                            0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_12                            0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_23                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_11                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_34                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_33                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_23                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_22                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_12                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_11                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) _dispLogs                                             2     0      2    1475
                                             17 COMRAM     2     0      2
                        _retrieveLog
 ---------------------------------------------------------------------------------
 (10) _retrieveLog                                        11     9      2    1047
                                              6 COMRAM    11     9      2
                      i2_EEPROM_read
                           i2___wmul
 ---------------------------------------------------------------------------------
 (11) i2_EEPROM_read                                       2     0      2     174
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _printSortTimer                                      33    33      0    4937
                                             41 COMRAM    33    33      0
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printf                                           33    21     12    3004
                                             12 COMRAM    29    17     12
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (11) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (11) i2___wmul                                            6     2      4     469
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (11) i2___lwmod                                           5     1      4     367
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (11) i2___lwdiv                                           7     3      4     318
                                              5 COMRAM     7     3      4
                          i2___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (11) i2_lcdInst                                           1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (12) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (11) i2_getRTC                                            2     2      0     213
                                              3 COMRAM     2     2      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Write                                  2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Stop                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Start                                  0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Read                                   2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (13) i2_I2C_Master_Wait                                   1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Test
     _BothServos
       _initServos
         _updateServoPosition
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _EEPROMTest
     _PortTestA5
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _PortTests
     _SolenoidTestA5
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _ToggleTestA5
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _actuatorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _algorithmTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _sensorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
       _readMAG
         _readADC
   _UI
     ___awdiv
       ___awmod (ARG)
     ___awmod
     _change_state_to_menu_12
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _change_state_to_menu_22
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printRTC
       _getRTC
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _strcpy
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _strcpy
   _initLCD
     _lcdInst
       _lcdNibble
   _initTime
   _initUI
     _change_state_to_menu_start
       _lcdInst
         _lcdNibble
       _printRTC
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
         _strcpy
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _loadRTC
       _I2C_Master_Init
         ___lldiv
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _logRun
     _EEPROM_read
     _EEPROM_write
       _EEPROM_read
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
   _machineConfig
   _sort
     _Distribution
       _updateServoPosition
     _ID
       _readMAG
         _readADC
     _Loading
       _EEPROM_read
       _EEPROM_write
         _EEPROM_read
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
       _delay_ms
       _getIR
         _readIR
           _readADC
       _initGlobalVars
       _initServos
         _updateServoPosition
       _initSortTimer
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _lcdInst
         _lcdNibble
   _stopSignals

 _handler (ROOT)
   _printSortTimer
     i2___lwdiv
       i2___lwmod (ARG)
     i2___lwmod
     i2___wmul
     i2_getRTC
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _updateMenu
     _change_state_to_logs_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_33
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_34
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _dispLogs
       _retrieveLog
         i2_EEPROM_read
         i2___wmul
     _inputHandler
       _change_state_to_logs_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_33
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_34
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
     i2_change_state_to_menu_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_start
       i2_lcdInst
         i2_lcdNibble
       i2_printRTC
         i2_getRTC
           i2_I2C_Master_Read
             i2_I2C_Master_Wait
           i2_I2C_Master_Start
             i2_I2C_Master_Wait
           i2_I2C_Master_Stop
             i2_I2C_Master_Wait
           i2_I2C_Master_Write
             i2_I2C_Master_Wait
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
         i2_strcpy
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      37       7       21.5%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     5A      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     5A      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     134      34        0.0%
DATA                 0      0     134       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Wed Mar 15 13:34:19 2017

                                    _i 012D                     i2_I2C_Master_Start 463C  
                   i2_I2C_Master_Write 4612                                     l66 45AA  
                                   _ID 2E84                            __CFG_CPD$ON 000000  
                                   _UI 0012                           ___awdiv@sign 008B  
                                   _up 0077                    ___wmul@multiplicand 0082  
                   i2___lwdiv@dividend 0006                            __CFG_BORV$3 000000  
                   EEPROM_read@address 0080                           __CFG_CP0$OFF 000000  
                         __CFG_CP1$OFF 000000                           __CFG_CP2$OFF 000000  
                         __CFG_CP3$OFF 000000                                    ?_ID 0001  
                                  ?_UI 0001                                    UI@i 00C8  
                                  l180 00E8                                    l484 3680  
                                  l725 2B88                                    l932 4576  
                                  l941 2E6E                                    l599 1C84  
                                  l919 32E8                                    l785 3AC4  
                         __CFG_CPB$OFF 000000                                    _PEN 007E2A  
                                  _SEN 007E28                    ?i2_I2C_Master_Start 0001  
                       ?_machineConfig 0001                    ?i2_I2C_Master_Write 0002  
                                  _log 00E6                                    _sel 00FD  
                                  _var 00FA                           ___awmod@sign 0085  
                                  wreg 000FE8                    i2printRTC@RTC_month 003B  
                  _log_count_can_w_lab 00EC        __end_of_change_state_to_menu_11 4248  
      __end_of_change_state_to_menu_12 40EA        __end_of_change_state_to_menu_22 40B2  
      __end_of_change_state_to_menu_23 4218           _f_can_coming_to_distribution 0071  
                       ??_Distribution 0088        __end_of_change_state_to_logs_11 4338  
      __end_of_change_state_to_logs_12 4308        __end_of_change_state_to_logs_22 42D8  
      __end_of_change_state_to_logs_23 43C2        __end_of_change_state_to_logs_33 42A8  
      __end_of_change_state_to_logs_34 4278                                   ??_ID 0086  
                                 ??_UI 00C4                           __CFG_LVP$OFF 000000  
                         __CFG_WDT$OFF 000000                                   l1030 313E  
                                 l1111 0E8E                                   l1050 3408  
                                 l1123 1028                                   l1027 311E  
                                 l1053 340C                                   l1062 27C8  
                                 l1151 39FA                                   l1143 39A8  
                                 l1160 3DA4                                   l1145 39AC  
                                 l1081 09CC                                   l1234 137E  
                                 l1146 39B0                                   l1074 0922  
                                 l1147 39B4                                   l1139 398C  
                                 l1059 27C4                                   l1148 39B8  
                                 l1180 3248                                   l1084 0A32  
                                 l1149 39BC                                   l1085 0A80  
                                 l1077 0926                                   l1166 3DB4  
                                 l1174 31FC                                   l1086 0AE6  
                                 l1087 0B34                                   l1197 3900  
                                 l1189 38CC                                   l1628 35E8  
                                 l6000 3F4E                                   l1681 3A7E  
                                 l1691 3C9A                                   l5204 3A2E  
                                 l5206 3A3A                                   l5216 3A70  
                                 l5208 3A40                                   l5232 3C8C  
                                 l5224 3C56                                   l5226 3C62  
                                 l5410 13D6                                   l7002 3270  
                                 l5146 4402                                   l5170 438C  
                                 l5228 3C68                                   l5404 13B6  
                                 l5340 116C                                   l7012 32A4  
                                 l5148 4414                                   l5422 1412  
                                 l5350 11AA                                   l5334 1146  
                                 l5504 3AB0                                   l5440 1490  
                                 l5432 146C                                   l5408 13D0  
                                 l5344 1176                                   l7024 39C0  
                                 l7016 32AE                                   l7120 349C  
                                 l5520 357C                                   l6080 3834  
                                 l6400 2C78                                   l5506 3ADA  
                                 l5434 1476                                   l5370 126A  
                                 l5338 115A                                   l5530 35D6  
                                 l5522 3582                                   l6090 3876  
                                 l6402 2CA6                                   l6322 2BCA  
                                 l6306 2B90                                   l5188 443A  
                                 l5452 14D2                                   l5428 1434  
                                 l5380 12E2                                   l6500 2902  
                                 l7132 34D0                                   l6084 384A  
                                 l5462 1544                                   l5446 14AC  
                                 l5382 12FA                                   l5366 1258  
                                 l5358 1226                                   l7134 34DC  
                                 l7126 34B2                                   l5470 4100  
                                 l7302 0236                                   l5518 356C  
                                 l5448 14B8                                   l5456 14E6  
                                 l5376 12D0                                   l5368 1264  
                                 l5392 1344                                   l5464 1550  
                                 l7152 3534                                   l7144 3512  
                                 l7136 34E2                                   l5480 395C  
                                 l7320 0282                                   l7312 0260  
                                 l5458 14EC                                   l5386 1326  
                                 l5378 12DC                                   l6506 2944  
                                 l7306 024E                                   l7250 013A  
                                 l7242 0118                                   l6354 2F20  
                                 l5388 133E                                   l7148 3520  
                                 l7180 37C6                                   l7172 3790  
                                 l7164 376C                                   l5476 3946  
                                 l5468 40F4                                   l5740 1CAC  
                                 l5732 1C02                                   l7500 07B6  
                                 l7420 063E                                   l7412 061C  
                                 l7340 0310                                   l7316 026A  
                                 l7236 0100                                   l6364 2F50  
                                 l6372 2F68                                   l6710 0D3C  
                                 l6702 0D02                                   l7174 379C  
                                 l5486 397C                                   l5750 1D42  
                                 l5742 1CCA                                   l7510 07D2  
                                 l7430 065A                                   l7350 03A6  
                                 l7342 032E                                   l7270 01AA  
                                 l7254 014C                                   l7246 0122  
                                 l7238 0106                                   l6390 2C10  
                                 l5902 36B4                                   _ADIE 007CEE  
                                 l6800 0EFE                                   l6720 0D64  
                                 l6640 0BD2                                   l6632 0BB0  
                                 l6552 09A0                                   l7176 37A2  
                                 l7184 37D4                                   l7168 377C  
                                 l5760 1DD8                                   l5752 1D60  
                                 l5744 1CE8                                   l7416 0626  
                                 l7360 043C                                   l7352 03C4  
                                 l7344 034C                                   l7336 02D4  
                                 l6392 2C2A                                   l6368 2F5C  
                                 l5912 3740                                   l6296 2B46  
                                 l6714 0D46                                   l6650 0BFA  
                                 l6642 0BD8                                   l6546 0990  
                                 l5754 1D7E                                   l5746 1D06  
                                 l5738 1C8E                                   l7514 07EA  
                                 l7506 07C8                                   l7434 0672  
                                 l7426 0650                                   l7370 0500  
                                 l7354 03E2                                   l7346 036A  
                                 l7338 02F2                                   l7274 01B4  
                                 l6394 2C44                                   l5906 36CA  
                                 l6820 0F64                                   l6804 0F08  
                                 l6740 0DCA                                   l6724 0D6E  
                                 l6636 0BBA                                   l6556 09B8  
                                 l6548 0996                                   l6476 2818  
                                 l7188 37E8                                   l5756 1D9C  
                                 l5748 1D24                                   l5764 1DF6  
                                 l7540 086A                                   l7532 0848  
                                 l7460 06FA                                   l7452 06D8  
                                 l7356 0400                                   l7348 0388  
                                 l7364 045A                                   l7268 01A4  
                                 l7284 01DA                                   l6396 2C5E  
                                 l6910 1108                                   l6902 10E6  
                                 l6830 0F8C                                   l6750 0DF2  
                                 l6718 0D5E                                   l6662 0C3E  
                                 l6646 0BE2                                   l6494 28D0  
                                 l5758 1DBA                                   l5766 1E54  
                                 l7550 0886                                   l7470 0716  
                                 l7374 050A                                   l7358 041E  
                                 l7366 04BE                                   l7278 01CC  
                                 l6920 1130                                   l6912 110E  
                                 l6824 0F7C                                   l6816 0F5A  
                                 l6808 0F20                                   l6744 0DE2  
                                 l6736 0DC0                                   l6728 0D86  
                                 l6672 0C66                                   l7536 0852  
                                 l7456 06E2                                   l7392 0556  
                                 l7384 0534                                   l5960 3388  
                                 l5952 335A                                   l6906 10F0  
                                 l6850 1000                                   l6842 0FDE  
                                 l6834 0FA4                                   l6826 0F82  
                                 l6770 0E66                                   l6762 0E44  
                                 l6754 0E0A                                   l6746 0DE8  
                                 l6666 0C56                                   l6658 0C34  
                                 l7554 089E                                   l7546 087C  
                                 l7474 072E                                   l7466 070C  
                                 l7378 0522                                   l7298 022C  
                                 l7810 2D94                                   l5970 444A  
                                 l6916 1118                                   l6852 1006  
                                 l6772 0E6C                                   l6692 0CDA  
                                 l6684 0CB8                                   l6676 0C7E  
                                 l6668 0C5C                                   l7492 0794  
                                 l7388 053E                                   l5964 3392  
                                 l5948 3350                                   l5956 3372  
                                 l7812 2DA8                                   l6846 0FE8  
                                 l6790 0ED6                                   l6766 0E4E  
                                 l6694 0CE0                                   l7558 08AA  
                                 l5974 4460                                   l6880 1082  
                                 l6856 1010                                   l6776 0E76  
                                 l6688 0CC2                                   l7496 079E  
                                 l6970 31C8                                   l6890 10AA  
                                 l6794 0EE0                                   l6698 0CEA  
                                 l6884 109A                                   l6876 1078  
                                 l7836 2E28                                   l6982 320A  
                                 l6966 38F4                                   l6894 10C2  
                                 l6886 10A0                                   l6798 0EF8  
                                 l7870 3150                                   l7950 3658  
                                 l6992 3230                                   l7880 316E  
                                 l7872 3156                                   l7848 30C0  
                                 l7960 3676                                   l7952 365E  
                                 l7944 3642                                   l6986 3220  
                                 l7882 3174                                   l7874 315C  
                                 l7866 3144                                   l7962 367C  
                                 l6988 3226                                   l7876 3162  
                                 l7868 314A                                   l7948 3652  
                                 l7878 3168                                   l7886 317A  
                                 l7966 3682                                   STR_1 FBCB  
                                 STR_2 FF2D                                   STR_3 FBB9  
                                 STR_4 FE50                                   STR_5 FBB9  
                                 STR_6 FE0E                                   STR_7 FFC3  
                                 STR_8 FFDA                                   STR_9 FFCA  
                                 _LATA 000F89                                   _LATB 000F8A  
                                 _LATC 000F8B                                   _LATD 000F8C  
                                 _LATE 000F8D                                   u3500 438A  
                                 u5030 09CC                                   u5050 0A80  
                                 u4410 1C84                                   u3700 3F9C  
                                 u5070 0B34                                   u3710 3F9E  
                                 u3800 131C                                   u4370 3FE8  
                                 u4371 3FE4                                   _PEIE 007F96  
                                 u4380 3FEA                                   u3807 1312  
                                 u7007 339A                                   u3760 12A4  
                                 u7017 3FFA                                   u4810 2EB4  
                                 u4730 2B52                                   u7107 029C  
                                 u7027 402E                                   u4395 3CD4  
                                 _RCEN 007E2B                                   u7117 0512  
                                 u7037 002A                                   u4750 2B88  
                                 u3767 129A                                   u7207 07A6  
                                 u7127 0546                                   u7047 012A  
                                 u4840 2F10                                   u7217 07DA  
                                 u7137 0570                                   u7057 0166  
                                 u4818 2EB8                                   u7307 2808  
                                 u7227 0804                                   u7147 062E  
                                 u7067 01BC                                   u4940 285A  
                                 u4748 2B56                                   u7317 2870  
                                 u7237 085A                                   u7157 0662  
                                 u7077 01E8                                   u4950 285C  
                                 u6710 2E6E                                   u7407 0916  
                                 u7327 28C4                                   u7247 088E  
                                 u7167 068C                                   u7087 023E  
                                 u4848 2F14                                   u7417 0938  
                                 u7337 28F4                                   u7257 30CE  
                                 u7177 06EA                                   u7097 0272  
                                 i2l66 45BE                                   u7507 0BC2  
                                 u7427 09A8                                   u7347 2938  
                                 u7267 3112                                   u7187 071E  
                                 u7517 0BEA                                   u7437 09DC  
                                 u7357 440A                                   u7277 2774  
                                 u7197 0748                                   u7607 0E56  
                                 u7527 0C46                                   u7447 0A42  
                                 u7367 33B8                                   u7287 27B8  
                                 u7617 0E7E                                   u7537 0C6E  
                                 u7457 0A60                                   u7377 33FC  
                                 u7297 27DA                                   u7707 10B2  
                                 u7627 0EE8                                   u7547 0CCA  
                                 u7467 0A90                                   u7387 341E  
                                 u6907 2BF4                                   u7717 10F8  
                                 u7637 0F10                                   u7557 0CF2  
                                 u7477 0AF6                                   u7397 08D2  
                                 u6917 3F2A                                   u7807 18EC  
                                 u7727 1120                                   u7647 0F6C  
                                 u7567 0D4E                                   u7487 0B14  
                                 u6927 4456                                   u7817 1938  
                                 u7737 388C                                   u7657 0F94  
                                 u7577 0D76                                   u7497 0B44  
                                 u6937 2E9A                                   u7907 1B84  
                                 u7827 1984                                   u7747 31D6  
                                 u7667 0FF0                                   u7587 0DD2  
                                 u6947 2EF6                                   u7917 1BB8  
                                 u7837 19B8                                   u7757 3238  
                                 u7677 1018                                   u7597 0DFA  
                                 u6957 2F8C                                   u7927 3BFA  
                                 u7847 1A04                                   u7767 3258  
                                 u7687 103A                                   u6967 2CB4  
                                 u7937 3C04                                   u7857 1A38  
                                 u7777 327E                                   u7697 108A  
                                 u6977 2CE8                                   u6897 2AD6  
                                 u7947 3C30                                   u7867 1A84  
                                 u7787 32B6                                   u6987 3306  
                                 u7957 3C3A                                   u7877 1AB8  
                                 u7797 3D6E                                   u6997 3362  
                                 u7967 3DFE                                   u7887 1B04  
                                 u7897 1B38                                   _RSEN 007E29  
                          _stopSignals 457E                                   _Test 30C0  
                                 _back 005B                                   _main 35FA  
                                 _down 0069                                   _keys FB27  
                                 _time 0124                                   fsr0h 000FEA  
                                 fsr1h 000FE2                     i2___lwdiv@quotient 000A  
                                 indf0 000FEF                                   fsr2h 000FDA  
                                 fsr0l 000FE9                                   indf2 000FDF  
                                 fsr1l 000FE1                                   fsr2l 000FD9  
                                 _sort 4504                                   btemp 007E  
                 ??i2_I2C_Master_Start 0002                       ??_SolenoidTestA5 00AB  
                 ??i2_I2C_Master_Write 0004                                   prodh 000FF4  
                                 prodl 000FF3                                   start 000E  
                        __CFG_IESO$OFF 000000                   _log_count_can_no_lab 00EA  
                      __end_ofi2_putch 45FC                    __size_of_EEPROMTest 0002  
                        __CFG_MCLRE$ON 000000                           ___param_bank 000000  
                           i2_printRTC 2158                            i2_lcdNibble 3E16  
                      __end_of_Loading 2C06                   __end_of_actuatorTest 1138  
                     ?_I2C_Master_Init 008D                       ?_I2C_Master_Read 0001  
                     ?_I2C_Master_Wait 0001            ??i2_change_state_to_menu_12 002A  
          ??i2_change_state_to_menu_22 002A                       ?_I2C_Master_Stop 0001  
                                ?_Test 0001                   __end_of_EEPROM_write 33AA  
                                ?_main 0001                                  _ACKEN 007E2C  
                                _ACKDT 007E2D                        __end_of___awdiv 353E  
                                _EEADR 000FA9                                  STR_10 FFE6  
                                STR_11 FFEA                                  STR_12 FFFA  
                                STR_20 FFEE                                  STR_13 FFDE  
                                STR_21 FB42                                  STR_14 FFD6  
                                STR_22 FFA3                                  STR_30 FE1F  
                                STR_15 FFD2                                  STR_23 FF1F  
                                STR_31 FDFD                                  STR_16 FFE2  
                                STR_24 FD64                                  STR_32 FD42  
                                STR_40 FCFE                                  STR_17 FFF2  
                                STR_33 FD53                                  STR_41 FCED  
                                STR_25 FB82                                  STR_18 FFF6  
                                STR_34 FDEC                                  STR_50 FDCA  
                                STR_42 FDA8                                  STR_26 FD75  
                                STR_43 FDA8                                  STR_35 FDEC  
                                STR_51 FFDA                                  STR_19 FFCE  
                                STR_27 FB6F                                  STR_52 FFCA  
                                STR_60 FFF2                                  STR_28 FD86  
                                STR_36 FD31                                  STR_44 FD0F  
                      __end_of___awmod 37F2                                  STR_45 FCFE  
                                STR_37 FD42                                  STR_53 FFE6  
                                STR_61 FFF6                                  STR_29 FB7F  
                                STR_62 FFCE                                  STR_54 FFEA  
                                STR_70 FED8                                  STR_38 FDDB  
                                STR_46 FDB9                                  STR_47 FDB9  
                                STR_55 FFFA                                  STR_63 FB42  
                                STR_71 FF11                                  STR_39 FD97  
                                STR_56 FFDE                                  STR_64 FF84  
                                STR_80 FE60                                  STR_48 FD20  
                                STR_72 FC87                                  STR_49 FD0F  
                                STR_57 FFD6                                  STR_81 FB7F  
                                STR_65 FF55                                  STR_73 FEF5  
                                STR_58 FFD2                                  STR_74 FF62  
                                STR_82 FE8D                                  STR_90 FCBA  
                                STR_66 FB5A                                  STR_59 FFE2  
                                STR_67 FFBC                                  STR_91 FF79  
                                STR_75 FEBA                                  STR_83 FE30  
                                STR_84 FF99                                  STR_76 FF03  
                                STR_92 FEAB                                  STR_68 FC98  
                                STR_85 FF11                                  STR_77 FFAD  
                                STR_69 FCCB                                  STR_93 FC32  
                                STR_78 FF11                                  STR_86 FEC9  
                                STR_94 FC21                                  STR_79 FF3B  
                                STR_87 FEE7                                  STR_95 FBFF  
                                STR_88 FCA9                                  STR_96 FC54  
                                STR_89 FF6E                                  STR_97 FC65  
                                STR_98 FBDD                                  STR_99 FE40  
                                ?_sort 0001                        __end_of___lldiv 35FA  
                                _T0CON 000FD5                        ___awdiv@divisor 0088  
                                _T1CON 000FCD                                  _T3CON 000FB1  
                      __end_of___lwdiv 3A88                        __end_of___lwmod 3CA4  
                                i2l257 2154                                  i2l850 2A10  
                                i2l932 45A2                                  i2l854 2A5C  
                                i2l599 21E6                                  i2l856 2A7C  
                      ___awdiv@counter 008A                                  _TMR0H 000FD7  
                                _TMR1H 000FCF                                  _TMR0L 000FD6  
                                _TMR3H 000FB3                                  _TMR1L 000FCE  
                                _TMR3L 000FB2                             _BothServos 18DE  
                                _PORTB 000F81                                  _TRISA 000F92  
                                _TRISB 000F93                                  _TRISC 000F94  
                                _TRISD 000F95                                  _TRISE 000F96  
                        __CFG_PWRT$OFF 000000                          __CFG_WRT0$OFF 000000  
                        __CFG_WRT1$OFF 000000                          __CFG_WRT2$OFF 000000  
                        __CFG_WRT3$OFF 000000                        __end_of_lcdInst 45F0  
                      __end_of_handler 2AB8                         __CFG_EBTR0$OFF 000000  
                       __CFG_FCMEN$OFF 000000                         __CFG_EBTR1$OFF 000000  
                       __CFG_EBTR2$OFF 000000                         __CFG_EBTR3$OFF 000000  
                                _nRBPU 007F8F                          __CFG_WRTB$OFF 000000  
                        __CFG_WRTC$OFF 000000                          __CFG_WRTD$OFF 000000  
                      __end_of_readADC 441A                        __end_of_initLCD 4038  
                       __CFG_EBTRB$OFF 000000                                  _debug 0067  
                           i2isdigit@c 0003                                  _getIR 3F0C  
                      __end_of_loadRTC 387E                        __end_of_readMAG 3FF2  
                      __end_of_dpowers FB42                                  _first 00E4  
                                _enter 006B                        __end_of_isdigit 4444  
                                _input 007D                                  _putch 45D0  
                                pclath 000FFA                                  tablat 000FF5  
                     __end_ofi2___wmul 44BA                       __end_ofi2_getRTC 3B70  
                  _log_count_pop_w_tab 00F0                                  status 000FD8  
                       __CFG_PBADEN$ON 000000                          i2printf@width 0028  
                     __end_ofi2_printf 18DE                     __size_ofi2___lwdiv 0052  
                   __size_ofi2___lwmod 0042                       __end_ofi2_strcpy 4188  
                          Loading@addr 00B3                       _count_can_no_lab 005D  
                 __size_of_EEPROM_read 0018                        __initialization 3EBE  
                         __end_of_Test 31C8                     __size_ofi2_lcdInst 000C  
                         __end_of_main 36A6                           __end_of_keys FB38  
                         __end_of_sort 4526                             i2printf@ap 0020  
                           i2printf@cp 001E                     __size_ofi2_isdigit 001E  
                               ??_Test 00C6    __size_of_change_state_to_menu_start 002C  
                      ??_machineConfig 0080                                 ??_main 00DA  
                               ??_sort 00B8                          __activetblptr 000003  
           updateServoPosition@my_time 0086             updateServoPosition@time_us 0080  
                           i2strcpy@cp 0005                             i2strcpy@to 0001  
                    ?_I2C_Master_Start 0001                    EEPROM_write@address 00AB  
               __size_ofi2_EEPROM_read 0016                      ?_I2C_Master_Write 0081  
                               ?_getIR 0001                     ??_I2C_Master_Start 0081  
                               _ADCON0 000FC2                                 _ADCON1 000FC1  
                   ??_I2C_Master_Write 0083                                 _ADCON2 000FC0  
                               STR_100 FC10                                 STR_101 FBEE  
                               STR_102 FC10                                 STR_110 FF8F  
                               STR_103 FE9C                                 STR_111 FC43  
                               STR_104 FE7E                                 STR_112 FC76  
                               STR_113 FFB5                                 STR_105 FE6F  
                               STR_106 FCDC                                 _ADRESH 000FC4  
                               STR_107 FB95                                 STR_108 FBA7  
                               _EEADRH 000FAA                                 STR_109 FF48  
                               _ADRESL 000FC3                                 _EEDATA 000FA8  
                               _EECON2 000FA7                       ___awdiv@dividend 0086  
                      i2lcdNibble@data 0002                                 ?_putch 0001  
               __size_of_initSortTimer 00AA                        i2lcdNibble@temp 0001  
            i2_change_state_to_menu_12 41B8              i2_change_state_to_menu_22 4188  
                               _INT1IE 007F83                                 _INT1IF 007F80  
                               _CVRCON 000FB5                                 i2l1234 174A  
                               i2l1681 3EB4                                 i2l1691 4070  
                               i2l5302 3EAA                                 i2l5310 4046  
                               i2l5312 404E                                 i2l6200 2694  
                               i2l6040 2206                                 i2l6032 2184  
                               i2l5314 4052                                 i2l6210 26B2  
                               i2l6050 2274                                 i2l6042 221C  
                               i2l6212 26B6                                 i2l6060 22E2  
                               i2l6052 228A                                 i2l6044 2232  
                               i2l5318 4066                                 i2l6230 26E6  
                               i2l6206 269E                                 i2l6142 25B8  
                               i2l6134 259E                                 i2l6054 22A0  
                               i2l6046 2248                                 i2l6038 21F0  
                               i2l5256 44DA                                 i2l5280 455E  
                               i2l6224 26D8                                 i2l6216 26C0  
                               i2l6160 25F6                                 i2l6144 25C8  
                               i2l6152 25D6                                 i2l6056 22B6  
                               i2l6048 225E                                 i2l6064 22F8  
                               i2l5290 3E82                                 i2l5602 165A  
                               i2l6242 271C                                 i2l6234 26F8  
                               i2l6162 25FC                                 i2l6170 260E  
                               i2l6146 25CC                                 i2l6058 22CC  
                               i2l6066 2352                                 i2l5292 3E8A  
                               i2l5612 16B2                                 i2l5604 1664  
                               i2l5700 18C2                                 i2l6164 2602  
                               i2l6156 25EA                                 i2l6252 2738  
                               i2l8020 2A30                                 i2l5542 3B36  
                               i2l5294 3E8E                                 i2l5622 16FE  
                               i2l5614 16BC                                 i2l5606 1668  
                               i2l6246 272E                                 i2l6238 270A  
                               i2l6190 266A                                 i2l6182 2652  
                               i2l6166 2608                                 i2l6158 25F0  
                               i2l5552 3B60                                 i2l5640 1778  
                               i2l5624 1710                                 i2l5616 16C2  
                               i2l5704 4160                                 i2l5546 3B46  
                               i2l5618 16D4                                 i2l5570 157A  
                               i2l5706 4168                                 i2l8042 2A7A  
                               i2l8018 2A2E                                 i2l5644 1790  
                               i2l5628 1714                                 i2l5580 159E  
                               i2l6196 2678                                 i2l5670 180C  
                               i2l5646 1794                                 i2l5574 158A  
                               i2l8310 2146                                 i2l5664 17E0  
                               i2l5576 1598                                 i2l5682 1838  
                               i2l5658 17C6                                 i2l5594 1632  
                               i2l5586 15D0                                 i2l8314 2626  
                               i2l8306 2108                                 i2l7610 1F40  
                               i2l7602 1F22                                 i2l5684 1840  
                               i2l5692 1866                                 i2l5676 1822  
                               i2l5668 1804                                 i2l8316 2642  
                               i2l8308 212A                                 i2l5694 186C  
                               i2l7710 20C6                                 i2l7702 20AA  
                               i2l7630 1F86                                 i2l7622 1F6A  
                               i2l7614 1F4E                                 i2l7606 1F30  
                               i2l5688 1854                                 i2l7720 20EA  
                               i2l5698 18BA                                 i2l5882 3064  
                               i2l7714 20DC                                 i2l7706 20B8  
                               i2l7650 1FDC                                 i2l7642 1FB8  
                               i2l7634 1F9C                                 i2l7626 1F78  
                               i2l7618 1F5C                                 i2l7900 23AA  
                               i2l7572 1EC8                                 i2l5894 30A8  
                               i2l5886 3074                                 i2l7670 202A  
                               i2l7662 2006                                 i2l7654 1FEA  
                               i2l7646 1FC6                                 i2l7638 1FAA  
                               i2l7590 1F06                                 i2l7582 1EEA  
                               i2l7574 1ECE                                 i2l7906 2404  
                               i2l7690 2078                                 i2l7682 205C  
                               i2l7674 2038                                 i2l7666 201C  
                               i2l7658 1FF8                                 i2l7586 1EF8  
                               i2l7578 1EDC                                 i2l7916 24C6  
                               i2l7694 2086                                 i2l7686 206A  
                               i2l7678 2046                                 i2l7598 1F14  
                               i2l7698 209C                                 i2l7980 29C4  
                               i2l7982 29C8                                 i2l7896 239A  
                               i2l7996 29E4                                 _OSCCON 000FD3  
                               _TMR0IE 007F95                                 _TMR0IF 007F92  
                            ??i2_putch 0003                                 _TMR1IE 007CE8  
                               _TMR1IF 007CF0                                 _TMR2IE 007CE9  
                               _TMR3IE 007D01                                 _TMR3IF 007D09  
                               _TMR0ON 007EAF                                 _TMR1ON 007E68  
                               _TMR3ON 007D88                                 _SSPADD 000FC8  
                               _TRISC3 007CA3                                 _TRISC4 007CA4  
                               _SSPBUF 000FC9                              ??_Loading 00B1  
                     __end_of_delay_ms 446C                   delay_ms@milliseconds 0081  
                       __CFG_XINST$OFF 000000                       ID@sensor_outputs 0088  
                     __end_of_dispLogs 4504                            ?i2_printRTC 0001  
                     retrieveLog@byte1 000B                       retrieveLog@byte2 000C  
                     retrieveLog@byte3 000D                   __end_of_Distribution 2D48  
                               ___wmul 4120                              ??___awdiv 008A  
                       __CFG_STVREN$ON 000000                              ??___awmod 0084  
                          logRun@byte1 00B2                            logRun@byte2 00B3  
                          logRun@byte3 00B4                                 _getRTC 3906  
                            ??___lldiv 0088                              ??___lwdiv 0084  
                            ??___lwmod 008B                       ??_printSortTimer 002A  
                     __end_of_initTime 4548                                 _initUI 4338  
                               _readIR 3F5A                                 _logRun 2D48  
                               clear_0 3EE4                                 clear_1 3EF0  
                               clear_2 3EFC                       ___awdiv@quotient 008C  
                      ___awmod@divisor 0082                             _PortTestA5 3D60  
                      ___awmod@counter 0084                              ??_lcdInst 0082  
                               _printf 1138                              ??_handler 004B  
              __size_of_initGlobalVars 006A                           ?_retrieveLog 0007  
                               _strcpy 40EA                              ??_readADC 0080  
                            ??_initLCD 0083                              ??_loadRTC 0095  
                            ??_readMAG 0082   __end_ofi2_change_state_to_menu_start 4494  
__size_ofi2_change_state_to_menu_start 0028           i2_change_state_to_menu_start 446C  
                          ?_BothServos 0001                           ??_EEPROMTest 0080  
                            ??_isdigit 0080                     __size_of_PortTests 0084  
                    __end_ofi2___lwdiv 3EBE                       __end_of_printRTC 1E98  
                         __mediumconst FB26                      __end_ofi2___lwmod 407A  
                               tblptrh 000FF7                                 tblptrl 000FF6  
                               tblptru 000FF8                   _log_count_pop_no_tab 00EE  
                __end_of_algorithmTest 3480                      __end_ofi2_lcdInst 4608  
                    __end_ofi2_isdigit 4566                             __accesstop 0080  
              __end_of__initialization 3F02                          ?_inputHandler 002A  
                        ___rparam_used 000001                printSortTimer@start_sec 003D  
                __size_of_actuatorTest 0880                          i2_EEPROM_read 4594  
                         Loading@byte1 00B5                     i2___lwmod@dividend 0001  
                   __end_of_EEPROMTest 4646                         __pcstackCOMRAM 0001  
                __size_of_EEPROM_write 00E4                           __pidataBANK1 461C  
                        __end_of_getIR 3F5A                            i2printRTC@i 0041  
                        _initSortTimer 36A6            __end_of_updateServoPosition 3AFE  
                        __end_of_putch 45E0                            i2printf@len 0022  
                          i2printf@val 0024                             __end_of_ID 2FA6  
                           __end_of_UI 08B8                     printSortTimer@hour 002D  
                            ?i2___wmul 0001                     __size_of_lcdNibble 0068  
                            ?i2_getRTC 0001                            i2putch@data 0003  
                printSortTimer@curTime 002F     __end_of_change_state_to_menu_start 43EE  
        ?i2_change_state_to_menu_start 0001             _change_state_to_menu_start 43C2  
                printSortTimer@cur_sec 003F                              ?i2_printf 000D  
                              ??_getIR 0086                              ?i2_strcpy 0001  
                     _count_pop_no_tab 0061                    __size_ofi2_printRTC 0236  
                              ??_putch 0082                           _actuatorTest 08B8  
                           __pbssBANK0 00DA                             __pbssBANK1 0100  
                         ?_stopSignals 0001                         ??_inputHandler 002C  
                         _EEPROM_write 32C6               ?_change_state_to_menu_11 0001  
                              UI@F3223 012F               ?_change_state_to_menu_12 0001  
             ?_change_state_to_menu_22 0001               ?_change_state_to_menu_23 0001  
                       ?i2_EEPROM_read 0001               ?_change_state_to_logs_11 0001  
             ?_change_state_to_logs_12 0001               ?_change_state_to_logs_22 0001  
             ?_change_state_to_logs_23 0001               ?_change_state_to_logs_33 0001  
             ?_change_state_to_logs_34 0001                    __size_of_BothServos 02F0  
                    __end_of_PortTests 3A10                      printRTC@RTC_month 00BC  
                         ?i2_lcdNibble 0001                                UI@i_412 00CA  
                              UI@i_413 00CB                                UI@i_431 00CC  
                              UI@i_440 00D1                                UI@i_432 00CD  
                              UI@i_409 00C9                                UI@i_443 00D2  
                              UI@i_435 00CE                                UI@i_444 00D3  
                              UI@i_436 00CF                                UI@i_447 00D4  
                              UI@i_439 00D0                                UI@i_448 00D5  
                       ?_initSortTimer 0001                                ?___wmul 0080  
                              ?_getRTC 0001                                ?_initUI 0001  
                              ?_readIR 0001                                ?_logRun 0001  
             updateServoPosition@timer 0082                                UI@month 00D6  
                          ?_PortTestA5 0001                                ?_printf 008E  
                              _UI$2246 00C6                                ?_strcpy 0080  
                           ??i2___wmul 0005                             ??i2_getRTC 0004  
                            ?_delay_ms 0001                             ??i2_printf 0019  
                           ??i2_strcpy 0005                              ?_dispLogs 0012  
                              _SSPCON1 000FC6                                _SSPCON2 000FC5  
                              _SSPSTAT 000FC7                                _RTCflag 00DE  
                              i2_putch 45F0                              ?_initTime 0080  
                      _f_loadingNewCan 00E2                        i2printRTC@month 003D  
                __size_of_Distribution 0142            __size_ofi2_I2C_Master_Start 0008  
                    __end_of_lcdNibble 3C42                                _Loading 2AB8  
          __size_ofi2_I2C_Master_Write 000A                       EEPROM_write@data 00AD  
                              __Hparam 0000                                __Lparam 0000  
   __size_ofi2_change_state_to_menu_12 0030     __size_ofi2_change_state_to_menu_22 0030  
                            ?_printRTC 0001                                ___awdiv 3480  
                              ___awmod 3750                             _initServos 3DBC  
                              ___lldiv 353E                        __size_of___wmul 0036  
                              ___lwdiv 3A10                                ___lwmod 3C42  
                      __size_of_getRTC 0086                        printSortTimer@i 0049  
                            _CMCONbits 000FB4                      retrieveLog@logNum 0007  
                         logRun@byte11 00B6                        __size_of_initUI 002E  
                      __size_of_readIR 004C                                __pcinit 3EBE  
                 i2EEPROM_read@address 0001                        __size_of_logRun 013C  
                         logRun@byte_i 00B5                                __ramtop 1000  
                       _initGlobalVars 3B70                                _lcdInst 45E0  
                              _handler 0008                                __ptext0 35FA  
                              __ptext1 457E                                __ptext2 4504  
                              __ptext3 2AB8                                __ptext4 36A6  
                              __ptext5 3B70                                __ptext6 3F0C  
                              __ptext7 3F5A                                __ptext8 4444  
                              __ptext9 2E84                        __size_of_printf 0438  
                              _readADC 43EE                        __size_of_strcpy 0036  
                              _initLCD 3FF2                                _cur_can 0065  
                              _loadRTC 37F2                                _readMAG 3FA6  
                              _dpowers FB38                     actuatorTest@i_1600 00B4  
                   actuatorTest@i_1601 00B5                     actuatorTest@i_1610 00BA  
                   actuatorTest@i_1611 00BB                     actuatorTest@i_1603 00B6  
                   actuatorTest@i_1620 00C0                     actuatorTest@i_1604 00B7  
                   actuatorTest@i_1621 00C1                     actuatorTest@i_1613 00BC  
                   actuatorTest@i_1614 00BD                     actuatorTest@i_1606 00B8  
                   actuatorTest@i_1623 00C2                     actuatorTest@i_1607 00B9  
                   actuatorTest@i_1624 00C3                     actuatorTest@i_1616 00BE  
                   actuatorTest@i_1617 00BF                     actuatorTest@i_1591 00AE  
                   actuatorTest@i_1592 00AF                     actuatorTest@i_1584 00AD  
                   actuatorTest@i_1594 00B0                     actuatorTest@i_1595 00B1  
                   actuatorTest@i_1597 00B2                     actuatorTest@i_1598 00B3  
                              _isdigit 441A                          ?_ToggleTestA5 0001  
                     ___awmod@dividend 0080                                getRTC@i 0083  
                 __size_of_retrieveLog 011A                             ??_delay_ms 0080  
             __size_of_I2C_Master_Init 0060               __size_of_I2C_Master_Read 002E  
                        _log_startTime 0100               __size_of_I2C_Master_Wait 0014  
             __size_of_I2C_Master_Stop 0008                             ??_dispLogs 0014  
                         _Distribution 2C06                         __pintcode_body 294A  
                 end_of_initialization 3F02                                logRun@i 00B7  
                           ??_initTime 0086                        ??i2_EEPROM_read 0003  
                 SolenoidTestA5@i_1637 00AF                   SolenoidTestA5@i_1639 00B0  
                              int_func 294A                    i2___wmul@multiplier 0001  
                        ??_EEPROM_read 0082                    __size_of_PortTestA5 005C  
            __size_of_I2C_Master_Start 0008              __size_of_I2C_Master_Write 000A  
                      ___lldiv@divisor 0084                        ___lldiv@counter 008C  
                      ??_initSortTimer 0085                                printf@c 00A8  
                         ??i2_printRTC 002A                                printf@f 008E  
                           ??_printRTC 00AB                       I2C_Master_Init@c 008D  
                     I2C_Master_Read@a 0081                                postdec1 000FE5  
                              postdec2 000FDD                                postinc0 000FEE  
                              postinc2 000FDE                 __end_of_initGlobalVars 3BDA  
                           _sensorTest 2766                __size_of_SolenoidTestA5 00FE  
                           _servoTimes 011C                              _PORTAbits 000F80  
                            _PORTBbits 000F81                   __end_of_inputHandler 2766  
                         ??_BothServos 00AB                         ??_ToggleTestA5 00AB  
                __end_of_machineConfig 3D60                             _updateMenu 1E98  
                    i2_I2C_Master_Read 44BA                              _IR_signal 00DA  
                    i2_I2C_Master_Wait 45BE                      i2_I2C_Master_Stop 4634  
                    i2___lwdiv@divisor 0008                        _log_count_total 00F2  
                            i2___lwdiv 3E6C                              i2___lwmod 4038  
                    i2___lwdiv@counter 000C                     ?i2_I2C_Master_Read 0001  
                   ?i2_I2C_Master_Wait 0001                     __end_ofi2_printRTC 238E  
                   ?i2_I2C_Master_Stop 0001                          actuatorTest@i 00C4  
         ??_change_state_to_menu_start 00C4                              i2_lcdInst 45FC  
                           _total_time 00F8                            printf@width 00A9  
                 __size_of_stopSignals 0016                    ??i2_I2C_Master_Read 0002  
                            i2_isdigit 4548                    ??i2_I2C_Master_Wait 0001  
                  ??i2_I2C_Master_Stop 0002                              i2getRTC@i 0004  
                   __end_of_BothServos 1BCE                    __end_of_EEPROM_read 457E  
                          ?_initServos 0001                        ?_initGlobalVars 0001  
                       __end_of___wmul 4156                         __end_of_getRTC 398C  
                 __size_ofi2_lcdNibble 0056                          EEPROM_write@i 00AF  
                        i2lcdInst@data 0003                         __end_of_initUI 4366  
                       __end_of_readIR 3FA6                         __end_of_logRun 2E84  
                     i2___wmul@product 0005                         __end_of_printf 1570  
                         i2printf@flag 0026                         __end_of_strcpy 4120  
            __end_ofi2_I2C_Master_Read 44E0              __end_ofi2_I2C_Master_Wait 45D0  
                         i2printf@prec 001D                    start_initialization 3EBE  
            __end_ofi2_I2C_Master_Stop 463C                             readMAG@res 0084  
                    __size_ofi2___wmul 0026                        _count_can_w_lab 005F  
          ?_change_state_to_menu_start 0001                      __size_ofi2_getRTC 0072  
                            i2printf@c 0027                              i2printf@f 000D  
                   EEPROM_write@i_1321 00B0                  i2I2C_Master_Read@temp 0003  
                           ?i2___lwdiv 0006                             ?i2___lwmod 0001  
                    __size_ofi2_printf 036E                      __size_ofi2_strcpy 0032  
                    ??_I2C_Master_Init 0091                      ??_I2C_Master_Read 0081  
                    ??_I2C_Master_Wait 0080                             ?i2_lcdInst 0001  
                    ??_I2C_Master_Stop 0081                       __CFG_OSC$INTIO67 000000  
                           ?i2_isdigit 0001                             initTime@DD 0083  
                           initTime@MM 0084                             initTime@YY 0085  
                      retrieveLog@addr 0010                             logRun@addr 00B9  
                             ??___wmul 0084                               ??_getRTC 0083  
               __size_of_algorithmTest 00D6                              _PortTests 398C  
                          ?_sensorTest 0001                            __pdataBANK1 012F  
                     __CFG_LPT1OSC$OFF 000000                               ??_initUI 00C4  
                             ??_readIR 0082                               ??_logRun 00B1  
                         ??_PortTestA5 00AB                 printSortTimer@timeDiff 0047  
     __size_of_change_state_to_menu_11 0030       __size_of_change_state_to_menu_12 0038  
     __size_of_change_state_to_menu_22 0038       __size_of_change_state_to_menu_23 0030  
                             ??_printf 009A       __size_of_change_state_to_logs_11 0030  
     __size_of_change_state_to_logs_12 0030       __size_of_change_state_to_logs_22 0030  
     __size_of_change_state_to_logs_23 002E       __size_of_change_state_to_logs_33 0030  
     __size_of_change_state_to_logs_34 0030                               ??_strcpy 0084  
                  _printSortTimer$2366 0045                            __pbssCOMRAM 005B  
         __size_of_updateServoPosition 0076                            ?_updateMenu 0001  
                        __pcstackBANK0 0080                __size_of_printSortTimer 01F2  
                    i2___lwmod@divisor 0003                      i2___lwmod@counter 0005  
                         _isdigit$1893 0081                      __size_of_delay_ms 0028  
                       initSortTimer@i 0088                      printSortTimer@min 0041  
                    printSortTimer@sec 0043                    __size_of_initServos 005A  
                    __size_of_dispLogs 0024                       printRTC@INT_time 00AE  
                         i2strcpy@from 0003                               ?i2_putch 0001  
                      _count_pop_w_tab 0063                            _EEPROM_read 4566  
                   __end_of_PortTestA5 3DBC                       _I2C_Master_Start 462C  
                            _f_lastCan 0073                               ?_Loading 0001  
                  i2I2C_Master_Write@d 0002                       _I2C_Master_Write 4608  
                    __size_of_initTime 0022                   __end_of_ToggleTestA5 3906  
                     ___lwdiv@dividend 0080                      __CFG_CCP2MX$PORTC 000000  
                            __pintcode 0008                          __pmediumconst FB26  
                            _lcdNibble 3BDA                  __size_of_inputHandler 01E6  
                             ?___awdiv 0086                               ?___awmod 0080  
                             ?___lldiv 0080                               ?___lwdiv 0080  
                           ?_PortTests 0001                               ?___lwmod 0087  
                       _SolenoidTestA5 31C8                      __size_of_printRTC 02CA  
                             ?_lcdInst 0001                               ?_handler 0001  
                             ?_readADC 0001                               ?_initLCD 0001  
                             ?_loadRTC 0001                               ?_readMAG 0001  
                             ?_isdigit 0001             __size_ofi2_I2C_Master_Read 0026  
           __size_ofi2_I2C_Master_Wait 0012             __size_ofi2_I2C_Master_Stop 0008  
                            _firstboot 0075                              _cur_state 00E0  
                     ___lwdiv@quotient 0084                         __size_of_getIR 004E  
                        _algorithmTest 33AA                            ??i2___lwdiv 000A  
                          ??i2___lwmod 0005                         __size_of_putch 0010  
                          __size_of_ID 0122                            __size_of_UI 08A6  
                       ToggleTestA5@on 00AC                    __size_of_sensorTest 01E4  
           __end_ofi2_I2C_Master_Start 4644             __end_ofi2_I2C_Master_Write 461C  
                          ??i2_lcdInst 0003                         ___wmul@product 0084  
                             _LATAbits 000F89                               _LATCbits 000F8B  
                             _LATDbits 000F8C                               _LATEbits 000F8D  
                         _inputHandler 2580                            ??i2_isdigit 0001  
                             i2u413_40 1696                               i2u413_47 168C  
                             i2u360_40 44D8                               i2u417_40 16F6  
                             i2u417_47 16EC                               _PIR2bits 000FA1  
                             i2u800_47 3E5A                               i2u457_40 21E6  
                             i2u801_47 3E64                               i2u676_40 24C0  
                             i2u797_47 25BE                               i2u798_47 3E2E  
                             i2u799_47 3E38                    __size_of_updateMenu 02C0  
                       _log_completion 00E8                       __CFG_WDTPS$32768 000000  
               __end_of_SolenoidTestA5 32C6                             ?_lcdNibble 0001  
                            _was_low_1 0079                              _was_low_3 007B  
                        ??_retrieveLog 0009                             _ADCON0bits 000FC2  
                    ___wmul@multiplier 0080                              _startTime 010E  
                             i2___wmul 4494                          lcdNibble@data 0081  
                             i2_getRTC 3AFE                             printf@flag 00A7  
                        lcdNibble@temp 0080                             printf@prec 009E  
                             Loading@i 00B6                               i2_printf 1570  
                             i2_strcpy 4156                         ?_algorithmTest 0001  
                  I2C_Master_Read@temp 0082                              copy_data0 3ED2  
                            readIR@res 0084                       __size_ofi2_putch 000C  
                           _EECON1bits 000FA6                  __end_ofi2_EEPROM_read 45AA  
                          _count_total 00FE                       ??_initGlobalVars 0080  
                      SolenoidTestA5@i 00AD                               __Hrparam 0000  
                     __size_of_Loading 014E                              initTime@h 0081  
                            initTime@m 0080                              initTime@s 0086  
                            initTime@w 0082                               __Lrparam 0000  
                   __CFG_BOREN$SBORDIS 000000                              logRun@num 00B1  
                      ?_SolenoidTestA5 0001                  __end_of_initSortTimer 3750  
                         ??_initServos 0088                            ??_PortTests 0080  
                     __size_of___awdiv 00BE                       __size_of___awmod 00A2  
              _change_state_to_menu_11 4218             ?i2_change_state_to_menu_12 0001  
              _change_state_to_menu_12 40B2             ?i2_change_state_to_menu_22 0001  
              _change_state_to_menu_22 407A                _change_state_to_menu_23 41E8  
                i2___wmul@multiplicand 0003                       __size_of___lldiv 00BC  
                     __size_of___lwdiv 0078                _change_state_to_logs_11 4308  
              _change_state_to_logs_12 42D8                _change_state_to_logs_22 42A8  
              _change_state_to_logs_23 4394                _change_state_to_logs_33 4278  
              _change_state_to_logs_34 4248                       __size_of___lwmod 0062  
                       readADC@channel 0081                     i2I2C_Master_Read@a 0002  
                     __size_of_lcdInst 0010                       __size_of_handler 2AB0  
                           _EEPROMTest 4644                        _I2C_Master_Init 3CA4  
                     __size_of_readADC 002C                        _I2C_Master_Read 4366  
                     __size_of_initLCD 0046                           _f_ID_receive 006D  
                     __size_of_loadRTC 008C                       __size_of_readMAG 004C  
                      _I2C_Master_Wait 45AA                        _I2C_Master_Stop 4624  
                     __size_of_isdigit 002A                               _delay_ms 4444  
                       _printSortTimer 238E                        ___lwdiv@divisor 0082  
                      ___lwdiv@counter 0086                    __end_of_retrieveLog 30C0  
                             __ptext10 2C06                               __ptext11 3D04  
                             __ptext20 4526                               __ptext12 2D48  
                             __ptext21 3FF2                               __ptext13 32C6  
                             __ptext30 45AA                               __ptext22 0012  
                             __ptext14 4566                               __ptext31 407A  
                             __ptext23 1BCE                               __ptext15 4338  
                             __ptext40 08B8                               __ptext32 40B2  
                             __ptext24 40EA                               __ptext16 37F2  
                             __ptext41 387E                               __ptext33 3750  
                             __ptext25 3906                               __ptext17 3CA4  
                             __ptext50 4120                               __ptext42 31C8  
                             __ptext34 3480                               __ptext26 4608  
                             __ptext18 353E                               __ptext51 3C42  
                             __ptext43 398C                               __ptext35 30C0  
                             __ptext27 4624                               __ptext19 43C2  
                             __ptext60 2158                               __ptext52 3A10  
                             __ptext44 3D60                               __ptext36 2766  
                             __ptext28 462C                               __ptext61 4156  
                             __ptext53 45E0                               __ptext45 4644  
                             __ptext37 3FA6                               __ptext29 4366  
                             __ptext70 42A8                               __ptext62 2580  
                             __ptext54 3BDA                               __ptext46 18DE  
                             __ptext38 43EE                               __ptext71 42D8  
                             __ptext63 4188                               __ptext55 3DBC  
                             __ptext47 1138                               __ptext39 33AA  
                             __ptext80 4494                               __ptext72 4308  
                             __ptext64 41B8                               __ptext56 3A88  
                             __ptext48 45D0                               __ptext81 4038  
                             __ptext73 44E0                               __ptext65 41E8  
                             __ptext49 441A                               __ptext90 45BE  
                             __ptext82 3E6C                               __ptext74 2FA6  
                             __ptext66 4218                               __ptext58 1E98  
                             __ptext83 45FC                               __ptext75 4594  
                             __ptext67 4248                               __ptext59 446C  
                             __ptext84 3E16                               __ptext76 238E  
                             __ptext68 4278                               __ptext85 3AFE  
                             __ptext77 1570                               __ptext69 4394  
                             __ptext86 4612                               __ptext78 45F0  
                             __ptext87 4634                               __ptext79 4548  
                             __ptext88 463C                               __ptext89 44BA  
                             _dispLogs 44E0                          ?_actuatorTest 0001  
                        ??_stopSignals 0080                  __size_of_ToggleTestA5 0088  
                           strcpy@from 0082                         i2_isdigit$1893 0002  
                   __end_of_initServos 3E16                          __size_of_Test 0108  
                        ?_EEPROM_write 00AB                               _initTime 4526  
                        __size_of_main 00AC                          __size_of_sort 0022  
       ??i2_change_state_to_menu_start 0043                               _logstate 00F6  
                  _updateServoPosition 3A88                 __size_of_machineConfig 005C  
                        ??i2_lcdNibble 0001                               _printRTC 1BCE  
                          ??_lcdNibble 0080                              printRTC@i 00C2  
                             int$flags 007E                           ??_sensorTest 00AB  
                       _log_total_time 00F4                     _f_can_coming_to_ID 006F  
                            printf@len 00A3                              printf@val 00A5  
    __end_ofi2_change_state_to_menu_12 41E8      __end_ofi2_change_state_to_menu_22 41B8  
                             loadRTC@i 0096                 __end_of_printSortTimer 2580  
                            putch@data 0082               __end_of_I2C_Master_Start 4634  
                          _OSCTUNEbits 000F9B               __end_of_I2C_Master_Write 4612  
                           _INTCONbits 000FF2                   ?_updateServoPosition 0080  
                         _ToggleTestA5 387E                           ??_updateMenu 0043  
                      ??_algorithmTest 00AB                             _MAG_signal 00DC  
                             isdigit@c 0082                          sensorTest@res 00AD  
                       ??_actuatorTest 00AB                               intlevel2 0000  
                       ??_EEPROM_write 00AE                     __end_of_sensorTest 294A  
                     ___lwmod@dividend 0087                       ___lldiv@dividend 0080  
                         ?_EEPROM_read 0080                    __end_of_stopSignals 4594  
            ??_change_state_to_menu_11 002A              ??_change_state_to_menu_12 00AB  
            ??_change_state_to_menu_22 00AB              ??_change_state_to_menu_23 002A  
            ??_change_state_to_logs_11 002A              ??_change_state_to_logs_12 002A  
            ??_change_state_to_logs_22 002A              ??_change_state_to_logs_23 002A  
            ??_change_state_to_logs_33 002A              ??_change_state_to_logs_34 002A  
                             printf@ap 00A1                               printf@cp 009F  
                   __end_of_updateMenu 2158                __end_of_I2C_Master_Init 3D04  
              __end_of_I2C_Master_Read 4394                __end_of_I2C_Master_Wait 45BE  
              __end_of_I2C_Master_Stop 462C                          printRTC@F3214 0133  
                          lcdInst@data 0082                           retrieveLog@i 000E  
                          _retrieveLog 2FA6                    __end_ofi2_lcdNibble 3E6C  
                ??_updateServoPosition 0084                        ?_printSortTimer 0001  
                     ___lldiv@quotient 0088                      I2C_Master_Write@d 0081  
                          ?_EEPROMTest 0001                        ___lwmod@divisor 0089  
                    _f_can_distributed 012B                               strcpy@cp 0084  
                             strcpy@to 0080                          _machineConfig 3D04  
                      ___lwmod@counter 008B                          printRTC@month 00BE  
                        ?_Distribution 0001                          _machine_state 00FC  
                        dispLogs@myLog 0012                     i2printRTC@INT_time 002D  
