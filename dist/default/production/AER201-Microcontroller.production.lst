

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Mon Apr 10 10:43:14 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,delta=1
    73                           	psect	text59,global,reloc=2,class=CODE,delta=1
    74                           	psect	text60,global,reloc=2,class=CODE,delta=1
    75                           	psect	text61,global,reloc=2,class=CODE,delta=1
    76                           	psect	text62,global,reloc=2,class=CODE,delta=1
    77                           	psect	text63,global,reloc=2,class=CODE,delta=1
    78                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    79                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1
    94                           	psect	text79,global,reloc=2,class=CODE,delta=1
    95                           	psect	text80,global,reloc=2,class=CODE,delta=1
    96                           	psect	text81,global,reloc=2,class=CODE,delta=1
    97                           	psect	text82,global,reloc=2,class=CODE,delta=1
    98                           	psect	text83,global,reloc=2,class=CODE,delta=1
    99                           	psect	text84,global,reloc=2,class=CODE,delta=1
   100                           	psect	text85,global,reloc=2,class=CODE,delta=1
   101                           	psect	text86,global,reloc=2,class=CODE,delta=1
   102                           	psect	text87,global,reloc=2,class=CODE,delta=1
   103                           	psect	text88,global,reloc=2,class=CODE,delta=1
   104                           	psect	text89,global,reloc=2,class=CODE,delta=1
   105                           	psect	text90,global,reloc=2,class=CODE,delta=1
   106                           	psect	text91,global,reloc=2,class=CODE,delta=1
   107                           	psect	text92,global,reloc=2,class=CODE,delta=1
   108                           	psect	text93,global,reloc=2,class=CODE,delta=1
   109                           	psect	text94,global,reloc=2,class=CODE,delta=1
   110                           	psect	text95,global,reloc=2,class=CODE,delta=1
   111                           	psect	text96,global,reloc=2,class=CODE,delta=1
   112                           	psect	text97,global,reloc=2,class=CODE,delta=1
   113                           	psect	text98,global,reloc=2,class=CODE,delta=1
   114                           	psect	text99,global,reloc=2,class=CODE,delta=1
   115                           	psect	text100,global,reloc=2,class=CODE,delta=1
   116                           	psect	text101,global,reloc=2,class=CODE,delta=1
   117                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   118                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   119                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   120  0000                     
   121                           ; Version 1.40
   122                           ; Generated 01/12/2016 GMT
   123                           ; 
   124                           ; Copyright © 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
   125                           ; All rights reserved.
   126                           ; 
   127                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   128                           ; 
   129                           ; Redistribution and use in source and binary forms, with or without modification, are
   130                           ; permitted provided that the following conditions are met:
   131                           ; 
   132                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   133                           ;        conditions and the following disclaimer.
   134                           ; 
   135                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   136                           ;        of conditions and the following disclaimer in the documentation and/or other
   137                           ;        materials provided with the distribution.
   138                           ; 
   139                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   140                           ;        software without specific prior written permission.
   141                           ; 
   142                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   143                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   144                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   145                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   146                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   147                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   148                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   149                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   150                           ; 
   151                           ; 
   152                           ; Code-generator required, PIC18F4620 Definitions
   153                           ; 
   154                           ; SFR Addresses
   155  0000                     
   156                           	psect	idataBANK1
   157  005C5C                     __pidataBANK1:
   158                           	opt stack 0
   159                           
   160                           ;initializer for UI@F3246
   161  005C5C  4D                 	db	77
   162  005C5D  4D                 	db	77
   163  005C5E  4D                 	db	77
   164  005C5F  00                 	db	0
   165                           
   166                           ;initializer for printRTC@F3236
   167  005C60  4D                 	db	77
   168  005C61  4D                 	db	77
   169  005C62  4D                 	db	77
   170  005C63  00                 	db	0
   171                           
   172                           	psect	mediumconst
   173  00FA86                     __pmediumconst:
   174                           	opt stack 0
   175  00FA86  00                 	db	0
   176  00FA87                     _keys:
   177                           	opt stack 0
   178  00FA87  31                 	db	49
   179  00FA88  32                 	db	50
   180  00FA89  33                 	db	51
   181  00FA8A  41                 	db	65
   182  00FA8B  34                 	db	52
   183  00FA8C  35                 	db	53
   184  00FA8D  36                 	db	54
   185  00FA8E  42                 	db	66
   186  00FA8F  37                 	db	55
   187  00FA90  38                 	db	56
   188  00FA91  39                 	db	57
   189  00FA92  43                 	db	67
   190  00FA93  2A                 	db	42
   191  00FA94  30                 	db	48
   192  00FA95  23                 	db	35
   193  00FA96  44                 	db	68
   194  00FA97  00                 	db	0
   195  00FA98                     __end_of_keys:
   196                           	opt stack 0
   197  00FA98                     _dpowers:
   198                           	opt stack 0
   199  00FA98  0001               	dw	1
   200  00FA9A  000A               	dw	10
   201  00FA9C  0064               	dw	100
   202  00FA9E  03E8               	dw	1000
   203  00FAA0  2710               	dw	10000
   204  00FAA2                     __end_of_dpowers:
   205                           	opt stack 0
   206  0000                     _ADCON0	set	4034
   207  0000                     _ADCON0bits	set	4034
   208  0000                     _ADCON1	set	4033
   209  0000                     _ADCON2	set	4032
   210  0000                     _ADRESH	set	4036
   211  0000                     _ADRESL	set	4035
   212  0000                     _CMCONbits	set	4020
   213  0000                     _CVRCON	set	4021
   214  0000                     _EEADR	set	4009
   215  0000                     _EEADRH	set	4010
   216  0000                     _EECON1bits	set	4006
   217  0000                     _EECON2	set	4007
   218  0000                     _EEDATA	set	4008
   219  0000                     _INTCONbits	set	4082
   220  0000                     _LATA	set	3977
   221  0000                     _LATAbits	set	3977
   222  0000                     _LATB	set	3978
   223  0000                     _LATBbits	set	3978
   224  0000                     _LATC	set	3979
   225  0000                     _LATCbits	set	3979
   226  0000                     _LATD	set	3980
   227  0000                     _LATDbits	set	3980
   228  0000                     _LATE	set	3981
   229  0000                     _OSCCON	set	4051
   230  0000                     _OSCTUNEbits	set	3995
   231  0000                     _PIR2bits	set	4001
   232  0000                     _PORTAbits	set	3968
   233  0000                     _PORTB	set	3969
   234  0000                     _PORTBbits	set	3969
   235  0000                     _PR2	set	4043
   236  0000                     _SSPADD	set	4040
   237  0000                     _SSPBUF	set	4041
   238  0000                     _SSPCON1	set	4038
   239  0000                     _SSPCON2	set	4037
   240  0000                     _SSPSTAT	set	4039
   241  0000                     _T0CON	set	4053
   242  0000                     _T1CON	set	4045
   243  0000                     _T2CON	set	4042
   244  0000                     _T3CON	set	4017
   245  0000                     _TMR0H	set	4055
   246  0000                     _TMR0L	set	4054
   247  0000                     _TMR1H	set	4047
   248  0000                     _TMR1L	set	4046
   249  0000                     _TMR3H	set	4019
   250  0000                     _TMR3L	set	4018
   251  0000                     _TRISA	set	3986
   252  0000                     _TRISB	set	3987
   253  0000                     _TRISC	set	3988
   254  0000                     _TRISD	set	3989
   255  0000                     _TRISE	set	3990
   256  0000                     _ACKDT	set	32301
   257  0000                     _ACKEN	set	32300
   258  0000                     _ADIE	set	31982
   259  0000                     _INT1IE	set	32643
   260  0000                     _INT1IF	set	32640
   261  0000                     _PEIE	set	32662
   262  0000                     _PEN	set	32298
   263  0000                     _RCEN	set	32299
   264  0000                     _RSEN	set	32297
   265  0000                     _SEN	set	32296
   266  0000                     _TMR0IE	set	32661
   267  0000                     _TMR0IF	set	32658
   268  0000                     _TMR0ON	set	32431
   269  0000                     _TMR1IE	set	31976
   270  0000                     _TMR1IF	set	31984
   271  0000                     _TMR1ON	set	32360
   272  0000                     _TMR2IE	set	31977
   273  0000                     _TMR2IF	set	31985
   274  0000                     _TMR2ON	set	32338
   275  0000                     _TMR3IE	set	32001
   276  0000                     _TMR3IF	set	32009
   277  0000                     _TMR3ON	set	32136
   278  0000                     _TRISC3	set	31907
   279  0000                     _TRISC4	set	31908
   280  0000                     _nRBPU	set	32655
   281  00FAA2                     STR_21:
   282  00FAA2  25                 	db	37
   283  00FAA3  30                 	db	48	;'0'
   284  00FAA4  32                 	db	50	;'2'
   285  00FAA5  64                 	db	100	;'d'
   286  00FAA6  25                 	db	37
   287  00FAA7  73                 	db	115	;'s'
   288  00FAA8  20                 	db	32
   289  00FAA9  7C                 	db	124
   290  00FAAA  20                 	db	32
   291  00FAAB  25                 	db	37
   292  00FAAC  30                 	db	48	;'0'
   293  00FAAD  32                 	db	50	;'2'
   294  00FAAE  64                 	db	100	;'d'
   295  00FAAF  3A                 	db	58	;':'
   296  00FAB0  25                 	db	37
   297  00FAB1  30                 	db	48	;'0'
   298  00FAB2  32                 	db	50	;'2'
   299  00FAB3  64                 	db	100	;'d'
   300  00FAB4  3A                 	db	58	;':'
   301  00FAB5  25                 	db	37
   302  00FAB6  30                 	db	48	;'0'
   303  00FAB7  32                 	db	50	;'2'
   304  00FAB8  64                 	db	100	;'d'
   305  00FAB9  00                 	db	0
   306  00FABA                     STR_64:
   307  00FABA  20                 	db	32
   308  00FABB  20                 	db	32
   309  00FABC  20                 	db	32
   310  00FABD  20                 	db	32
   311  00FABE  20                 	db	32
   312  00FABF  20                 	db	32
   313  00FAC0  20                 	db	32
   314  00FAC1  20                 	db	32
   315  00FAC2  20                 	db	32
   316  00FAC3  20                 	db	32
   317  00FAC4  20                 	db	32
   318  00FAC5  20                 	db	32
   319  00FAC6  46                 	db	70	;'F'
   320  00FAC7  25                 	db	37
   321  00FAC8  64                 	db	100	;'d'
   322  00FAC9  4D                 	db	77	;'M'
   323  00FACA  25                 	db	37
   324  00FACB  64                 	db	100	;'d'
   325  00FACC  4C                 	db	76	;'L'
   326  00FACD  25                 	db	37
   327  00FACE  64                 	db	100	;'d'
   328  00FACF  00                 	db	0
   329  00FAD0                     STR_67:
   330  00FAD0  28                 	db	40
   331  00FAD1  64                 	db	100	;'d'
   332  00FAD2  61                 	db	97	;'a'
   333  00FAD3  74                 	db	116	;'t'
   334  00FAD4  61                 	db	97	;'a'
   335  00FAD5  3A                 	db	58	;':'
   336  00FAD6  20                 	db	32
   337  00FAD7  25                 	db	37
   338  00FAD8  75                 	db	117	;'u'
   339  00FAD9  2C                 	db	44
   340  00FADA  20                 	db	32
   341  00FADB  61                 	db	97	;'a'
   342  00FADC  64                 	db	100	;'d'
   343  00FADD  64                 	db	100	;'d'
   344  00FADE  72                 	db	114	;'r'
   345  00FADF  3A                 	db	58	;':'
   346  00FAE0  20                 	db	32
   347  00FAE1  25                 	db	37
   348  00FAE2  75                 	db	117	;'u'
   349  00FAE3  29                 	db	41
   350  00FAE4  00                 	db	0
   351  00FAE5                     STR_112:
   352  00FAE5  44                 	db	68	;'D'
   353  00FAE6  20                 	db	32
   354  00FAE7  57                 	db	87	;'W'
   355  00FAE8  49                 	db	73	;'I'
   356  00FAE9  4C                 	db	76	;'L'
   357  00FAEA  4C                 	db	76	;'L'
   358  00FAEB  20                 	db	32
   359  00FAEC  52                 	db	82	;'R'
   360  00FAED  45                 	db	69	;'E'
   361  00FAEE  54                 	db	84	;'T'
   362  00FAEF  55                 	db	85	;'U'
   363  00FAF0  52                 	db	82	;'R'
   364  00FAF1  4E                 	db	78	;'N'
   365  00FAF2  20                 	db	32
   366  00FAF3  20                 	db	32
   367  00FAF4  20                 	db	32
   368  00FAF5  20                 	db	32
   369  00FAF6  00                 	db	0
   370  00FAF7                     STR_122:
   371  00FAF7  4F                 	db	79	;'O'
   372  00FAF8  54                 	db	84	;'T'
   373  00FAF9  48                 	db	72	;'H'
   374  00FAFA  45                 	db	69	;'E'
   375  00FAFB  52                 	db	82	;'R'
   376  00FAFC  20                 	db	32
   377  00FAFD  53                 	db	83	;'S'
   378  00FAFE  45                 	db	69	;'E'
   379  00FAFF  54                 	db	84	;'T'
   380  00FB00  53                 	db	83	;'S'
   381  00FB01  20                 	db	32
   382  00FB02  52                 	db	82	;'R'
   383  00FB03  41                 	db	65	;'A'
   384  00FB04  35                 	db	53	;'5'
   385  00FB05  20                 	db	32
   386  00FB06  20                 	db	32
   387  00FB07  20                 	db	32
   388  00FB08  00                 	db	0
   389  00FB09                     STR_121:
   390  00FB09  53                 	db	83	;'S'
   391  00FB0A  3A                 	db	58	;':'
   392  00FB0B  20                 	db	32
   393  00FB0C  44                 	db	68	;'D'
   394  00FB0D  20                 	db	32
   395  00FB0E  57                 	db	87	;'W'
   396  00FB0F  49                 	db	73	;'I'
   397  00FB10  4C                 	db	76	;'L'
   398  00FB11  4C                 	db	76	;'L'
   399  00FB12  20                 	db	32
   400  00FB13  52                 	db	82	;'R'
   401  00FB14  45                 	db	69	;'E'
   402  00FB15  54                 	db	84	;'T'
   403  00FB16  55                 	db	85	;'U'
   404  00FB17  52                 	db	82	;'R'
   405  00FB18  4E                 	db	78	;'N'
   406  00FB19  20                 	db	32
   407  00FB1A  00                 	db	0
   408  00FB1B                     STR_124:
   409  00FB1B  4F                 	db	79	;'O'
   410  00FB1C  54                 	db	84	;'T'
   411  00FB1D  48                 	db	72	;'H'
   412  00FB1E  45                 	db	69	;'E'
   413  00FB1F  52                 	db	82	;'R'
   414  00FB20  3A                 	db	58	;':'
   415  00FB21  20                 	db	32
   416  00FB22  43                 	db	67	;'C'
   417  00FB23  41                 	db	65	;'A'
   418  00FB24  4D                 	db	77	;'M'
   419  00FB25  20                 	db	32
   420  00FB26  54                 	db	84	;'T'
   421  00FB27  4F                 	db	79	;'O'
   422  00FB28  47                 	db	71	;'G'
   423  00FB29  47                 	db	71	;'G'
   424  00FB2A  4C                 	db	76	;'L'
   425  00FB2B  45                 	db	69	;'E'
   426  00FB2C  00                 	db	0
   427  00FB2D                     STR_130:
   428  00FB2D  4F                 	db	79	;'O'
   429  00FB2E  54                 	db	84	;'T'
   430  00FB2F  48                 	db	72	;'H'
   431  00FB30  45                 	db	69	;'E'
   432  00FB31  52                 	db	82	;'R'
   433  00FB32  20                 	db	32
   434  00FB33  53                 	db	83	;'S'
   435  00FB34  45                 	db	69	;'E'
   436  00FB35  54                 	db	84	;'T'
   437  00FB36  53                 	db	83	;'S'
   438  00FB37  20                 	db	32
   439  00FB38  50                 	db	80	;'P'
   440  00FB39  55                 	db	85	;'U'
   441  00FB3A  53                 	db	83	;'S'
   442  00FB3B  48                 	db	72	;'H'
   443  00FB3C  45                 	db	69	;'E'
   444  00FB3D  52                 	db	82	;'R'
   445  00FB3E  00                 	db	0
   446  00FB3F                     STR_3:
   447  00FB3F  2D                 	db	45
   448  00FB40  2D                 	db	45
   449  00FB41  20                 	db	32
   450  00FB42  4C                 	db	76	;'L'
   451  00FB43  4F                 	db	79	;'O'
   452  00FB44  47                 	db	71	;'G'
   453  00FB45  20                 	db	32
   454  00FB46  25                 	db	37
   455  00FB47  32                 	db	50	;'2'
   456  00FB48  64                 	db	100	;'d'
   457  00FB49  20                 	db	32
   458  00FB4A  48                 	db	72	;'H'
   459  00FB4B  45                 	db	69	;'E'
   460  00FB4C  52                 	db	82	;'R'
   461  00FB4D  45                 	db	69	;'E'
   462  00FB4E  2D                 	db	45
   463  00FB4F  2D                 	db	45
   464  00FB50  00                 	db	0
   465  00FB51                     STR_1:
   466  00FB51  52                 	db	82	;'R'
   467  00FB52  45                 	db	69	;'E'
   468  00FB53  53                 	db	83	;'S'
   469  00FB54  55                 	db	85	;'U'
   470  00FB55  4C                 	db	76	;'L'
   471  00FB56  54                 	db	84	;'T'
   472  00FB57  53                 	db	83	;'S'
   473  00FB58  20                 	db	32
   474  00FB59  49                 	db	73	;'I'
   475  00FB5A  4E                 	db	78	;'N'
   476  00FB5B  20                 	db	32
   477  00FB5C  4C                 	db	76	;'L'
   478  00FB5D  4F                 	db	79	;'O'
   479  00FB5E  47                 	db	71	;'G'
   480  00FB5F  20                 	db	32
   481  00FB60  25                 	db	37
   482  00FB61  64                 	db	100	;'d'
   483  00FB62  00                 	db	0
   484  00FB63                     STR_103:
   485  00FB63  4D                 	db	77	;'M'
   486  00FB64  49                 	db	73	;'I'
   487  00FB65  44                 	db	68	;'D'
   488  00FB66  20                 	db	32
   489  00FB67  2D                 	db	45
   490  00FB68  2D                 	db	45
   491  00FB69  20                 	db	32
   492  00FB6A  32                 	db	50	;'2'
   493  00FB6B  73                 	db	115	;'s'
   494  00FB6C  20                 	db	32
   495  00FB6D  20                 	db	32
   496  00FB6E  20                 	db	32
   497  00FB6F  20                 	db	32
   498  00FB70  20                 	db	32
   499  00FB71  20                 	db	32
   500  00FB72  20                 	db	32
   501  00FB73  00                 	db	0
   502  00FB74                     STR_106:
   503  00FB74  44                 	db	68	;'D'
   504  00FB75  52                 	db	82	;'R'
   505  00FB76  4F                 	db	79	;'O'
   506  00FB77  50                 	db	80	;'P'
   507  00FB78  20                 	db	32
   508  00FB79  2D                 	db	45
   509  00FB7A  2D                 	db	45
   510  00FB7B  20                 	db	32
   511  00FB7C  32                 	db	50	;'2'
   512  00FB7D  73                 	db	115	;'s'
   513  00FB7E  20                 	db	32
   514  00FB7F  20                 	db	32
   515  00FB80  20                 	db	32
   516  00FB81  20                 	db	32
   517  00FB82  20                 	db	32
   518  00FB83  20                 	db	32
   519  00FB84  00                 	db	0
   520  00FB85                     STR_100:
   521  00FB85  4C                 	db	76	;'L'
   522  00FB86  45                 	db	69	;'E'
   523  00FB87  46                 	db	70	;'F'
   524  00FB88  54                 	db	84	;'T'
   525  00FB89  20                 	db	32
   526  00FB8A  2D                 	db	45
   527  00FB8B  2D                 	db	45
   528  00FB8C  20                 	db	32
   529  00FB8D  32                 	db	50	;'2'
   530  00FB8E  73                 	db	115	;'s'
   531  00FB8F  20                 	db	32
   532  00FB90  20                 	db	32
   533  00FB91  20                 	db	32
   534  00FB92  20                 	db	32
   535  00FB93  20                 	db	32
   536  00FB94  20                 	db	32
   537  00FB95  00                 	db	0
   538  00FB96                     STR_105:
   539  00FB96  4C                 	db	76	;'L'
   540  00FB97  45                 	db	69	;'E'
   541  00FB98  56                 	db	86	;'V'
   542  00FB99  45                 	db	69	;'E'
   543  00FB9A  4C                 	db	76	;'L'
   544  00FB9B  20                 	db	32
   545  00FB9C  2D                 	db	45
   546  00FB9D  2D                 	db	45
   547  00FB9E  20                 	db	32
   548  00FB9F  32                 	db	50	;'2'
   549  00FBA0  73                 	db	115	;'s'
   550  00FBA1  20                 	db	32
   551  00FBA2  20                 	db	32
   552  00FBA3  20                 	db	32
   553  00FBA4  20                 	db	32
   554  00FBA5  20                 	db	32
   555  00FBA6  00                 	db	0
   556  00FBA7                     STR_99:
   557  00FBA7  52                 	db	82	;'R'
   558  00FBA8  49                 	db	73	;'I'
   559  00FBA9  47                 	db	71	;'G'
   560  00FBAA  48                 	db	72	;'H'
   561  00FBAB  54                 	db	84	;'T'
   562  00FBAC  20                 	db	32
   563  00FBAD  2D                 	db	45
   564  00FBAE  2D                 	db	45
   565  00FBAF  20                 	db	32
   566  00FBB0  32                 	db	50	;'2'
   567  00FBB1  73                 	db	115	;'s'
   568  00FBB2  20                 	db	32
   569  00FBB3  20                 	db	32
   570  00FBB4  20                 	db	32
   571  00FBB5  20                 	db	32
   572  00FBB6  20                 	db	32
   573  00FBB7  00                 	db	0
   574  00FBB8                     STR_98:
   575  00FBB8  4D                 	db	77	;'M'
   576  00FBB9  49                 	db	73	;'I'
   577  00FBBA  44                 	db	68	;'D'
   578  00FBBB  44                 	db	68	;'D'
   579  00FBBC  4C                 	db	76	;'L'
   580  00FBBD  45                 	db	69	;'E'
   581  00FBBE  20                 	db	32
   582  00FBBF  2D                 	db	45
   583  00FBC0  2D                 	db	45
   584  00FBC1  20                 	db	32
   585  00FBC2  32                 	db	50	;'2'
   586  00FBC3  73                 	db	115	;'s'
   587  00FBC4  20                 	db	32
   588  00FBC5  20                 	db	32
   589  00FBC6  20                 	db	32
   590  00FBC7  20                 	db	32
   591  00FBC8  00                 	db	0
   592  00FBC9                     STR_113:
   593  00FBC9  4F                 	db	79	;'O'
   594  00FBCA  54                 	db	84	;'T'
   595  00FBCB  48                 	db	72	;'H'
   596  00FBCC  45                 	db	69	;'E'
   597  00FBCD  52                 	db	82	;'R'
   598  00FBCE  20                 	db	32
   599  00FBCF  53                 	db	83	;'S'
   600  00FBD0  45                 	db	69	;'E'
   601  00FBD1  54                 	db	84	;'T'
   602  00FBD2  53                 	db	83	;'S'
   603  00FBD3  20                 	db	32
   604  00FBD4  44                 	db	68	;'D'
   605  00FBD5  43                 	db	67	;'C'
   606  00FBD6  20                 	db	32
   607  00FBD7  20                 	db	32
   608  00FBD8  20                 	db	32
   609  00FBD9  00                 	db	0
   610  00FBDA                     STR_119:
   611  00FBDA  44                 	db	68	;'D'
   612  00FBDB  20                 	db	32
   613  00FBDC  57                 	db	87	;'W'
   614  00FBDD  49                 	db	73	;'I'
   615  00FBDE  4C                 	db	76	;'L'
   616  00FBDF  4C                 	db	76	;'L'
   617  00FBE0  20                 	db	32
   618  00FBE1  52                 	db	82	;'R'
   619  00FBE2  45                 	db	69	;'E'
   620  00FBE3  54                 	db	84	;'T'
   621  00FBE4  55                 	db	85	;'U'
   622  00FBE5  52                 	db	82	;'R'
   623  00FBE6  4E                 	db	78	;'N'
   624  00FBE7  20                 	db	32
   625  00FBE8  20                 	db	32
   626  00FBE9  20                 	db	32
   627  00FBEA  00                 	db	0
   628  00FBEB                     STR_116:
   629  00FBEB  35                 	db	53	;'5'
   630  00FBEC  3A                 	db	58	;':'
   631  00FBED  48                 	db	72	;'H'
   632  00FBEE  7C                 	db	124
   633  00FBEF  36                 	db	54	;'6'
   634  00FBF0  3A                 	db	58	;':'
   635  00FBF1  4C                 	db	76	;'L'
   636  00FBF2  7C                 	db	124
   637  00FBF3  49                 	db	73	;'I'
   638  00FBF4  52                 	db	82	;'R'
   639  00FBF5  3A                 	db	58	;':'
   640  00FBF6  25                 	db	37
   641  00FBF7  64                 	db	100	;'d'
   642  00FBF8  20                 	db	32
   643  00FBF9  20                 	db	32
   644  00FBFA  20                 	db	32
   645  00FBFB  00                 	db	0
   646  00FBFC                     STR_114:
   647  00FBFC  31                 	db	49	;'1'
   648  00FBFD  3A                 	db	58	;':'
   649  00FBFE  20                 	db	32
   650  00FBFF  44                 	db	68	;'D'
   651  00FC00  43                 	db	67	;'C'
   652  00FC01  20                 	db	32
   653  00FC02  7C                 	db	124
   654  00FC03  20                 	db	32
   655  00FC04  41                 	db	65	;'A'
   656  00FC05  3A                 	db	58	;':'
   657  00FC06  20                 	db	32
   658  00FC07  41                 	db	65	;'A'
   659  00FC08  52                 	db	82	;'R'
   660  00FC09  4D                 	db	77	;'M'
   661  00FC0A  20                 	db	32
   662  00FC0B  20                 	db	32
   663  00FC0C  00                 	db	0
   664  00FC0D                     STR_101:
   665  00FC0D  4D                 	db	77	;'M'
   666  00FC0E  49                 	db	73	;'I'
   667  00FC0F  44                 	db	68	;'D'
   668  00FC10  2D                 	db	45
   669  00FC11  4C                 	db	76	;'L'
   670  00FC12  45                 	db	69	;'E'
   671  00FC13  46                 	db	70	;'F'
   672  00FC14  54                 	db	84	;'T'
   673  00FC15  20                 	db	32
   674  00FC16  2D                 	db	45
   675  00FC17  2D                 	db	45
   676  00FC18  20                 	db	32
   677  00FC19  32                 	db	50	;'2'
   678  00FC1A  73                 	db	115	;'s'
   679  00FC1B  20                 	db	32
   680  00FC1C  20                 	db	32
   681  00FC1D  00                 	db	0
   682  00FC1E                     STR_102:
   683  00FC1E  4D                 	db	77	;'M'
   684  00FC1F  49                 	db	73	;'I'
   685  00FC20  44                 	db	68	;'D'
   686  00FC21  2D                 	db	45
   687  00FC22  52                 	db	82	;'R'
   688  00FC23  49                 	db	73	;'I'
   689  00FC24  47                 	db	71	;'G'
   690  00FC25  48                 	db	72	;'H'
   691  00FC26  54                 	db	84	;'T'
   692  00FC27  20                 	db	32
   693  00FC28  2D                 	db	45
   694  00FC29  2D                 	db	45
   695  00FC2A  20                 	db	32
   696  00FC2B  32                 	db	50	;'2'
   697  00FC2C  73                 	db	115	;'s'
   698  00FC2D  20                 	db	32
   699  00FC2E  00                 	db	0
   700  00FC2F  45                 	db	69	;'E'
   701  00FC30  4C                 	db	76	;'L'
   702  00FC31  53                 	db	83	;'S'
   703  00FC32  45                 	db	69	;'E'
   704  00FC33  20                 	db	32
   705  00FC34  54                 	db	84	;'T'
   706  00FC35  4F                 	db	79	;'O'
   707  00FC36  47                 	db	71	;'G'
   708  00FC37  47                 	db	71	;'G'
   709  00FC38  4C                 	db	76	;'L'
   710  00FC39  45                 	db	69	;'E'
   711  00FC3A  53                 	db	83	;'S'
   712  00FC3B  20                 	db	32
   713  00FC3C  52                 	db	82	;'R'
   714  00FC3D  41                 	db	65	;'A'
   715  00FC3E  35                 	db	53	;'5'
   716  00FC3F  00                 	db	0
   717  00FC40                     STR_73:
   718  00FC40  41                 	db	65	;'A'
   719  00FC41  4C                 	db	76	;'L'
   720  00FC42  47                 	db	71	;'G'
   721  00FC43  31                 	db	49	;'1'
   722  00FC44  3A                 	db	58	;':'
   723  00FC45  20                 	db	32
   724  00FC46  39                 	db	57	;'9'
   725  00FC47  20                 	db	32
   726  00FC48  50                 	db	80	;'P'
   727  00FC49  4F                 	db	79	;'O'
   728  00FC4A  50                 	db	80	;'P'
   729  00FC4B  4E                 	db	78	;'N'
   730  00FC4C  4F                 	db	79	;'O'
   731  00FC4D  54                 	db	84	;'T'
   732  00FC4E  41                 	db	65	;'A'
   733  00FC4F  42                 	db	66	;'B'
   734  00FC50  00                 	db	0
   735  00FC51                     STR_93:
   736  00FC51  54                 	db	84	;'T'
   737  00FC52  53                 	db	83	;'S'
   738  00FC53  54                 	db	84	;'T'
   739  00FC54  3A                 	db	58	;':'
   740  00FC55  20                 	db	32
   741  00FC56  43                 	db	67	;'C'
   742  00FC57  4F                 	db	79	;'O'
   743  00FC58  4E                 	db	78	;'N'
   744  00FC59  44                 	db	68	;'D'
   745  00FC5A  20                 	db	32
   746  00FC5B  53                 	db	83	;'S'
   747  00FC5C  4F                 	db	79	;'O'
   748  00FC5D  4C                 	db	76	;'L'
   749  00FC5E  4E                 	db	78	;'N'
   750  00FC5F  27                 	db	39
   751  00FC60  44                 	db	68	;'D'
   752  00FC61  00                 	db	0
   753  00FC62                     STR_95:
   754  00FC62  54                 	db	84	;'T'
   755  00FC63  53                 	db	83	;'S'
   756  00FC64  54                 	db	84	;'T'
   757  00FC65  3A                 	db	58	;':'
   758  00FC66  20                 	db	32
   759  00FC67  50                 	db	80	;'P'
   760  00FC68  55                 	db	85	;'U'
   761  00FC69  53                 	db	83	;'S'
   762  00FC6A  48                 	db	72	;'H'
   763  00FC6B  20                 	db	32
   764  00FC6C  53                 	db	83	;'S'
   765  00FC6D  4F                 	db	79	;'O'
   766  00FC6E  4C                 	db	76	;'L'
   767  00FC6F  4E                 	db	78	;'N'
   768  00FC70  27                 	db	39
   769  00FC71  44                 	db	68	;'D'
   770  00FC72  00                 	db	0
   771  00FC73                     STR_69:
   772  00FC73  32                 	db	50	;'2'
   773  00FC74  2E                 	db	46
   774  00FC75  53                 	db	83	;'S'
   775  00FC76  4E                 	db	78	;'N'
   776  00FC77  52                 	db	82	;'R'
   777  00FC78  7C                 	db	124
   778  00FC79  34                 	db	52	;'4'
   779  00FC7A  2E                 	db	46
   780  00FC7B  48                 	db	72	;'H'
   781  00FC7C  49                 	db	73	;'I'
   782  00FC7D  7C                 	db	124
   783  00FC7E  35                 	db	53	;'5'
   784  00FC7F  2E                 	db	46
   785  00FC80  4D                 	db	77	;'M'
   786  00FC81  45                 	db	69	;'E'
   787  00FC82  44                 	db	68	;'D'
   788  00FC83  00                 	db	0
   789  00FC84                     STR_70:
   790  00FC84  42                 	db	66	;'B'
   791  00FC85  2E                 	db	46
   792  00FC86  50                 	db	80	;'P'
   793  00FC87  4C                 	db	76	;'L'
   794  00FC88  41                 	db	65	;'A'
   795  00FC89  7C                 	db	124
   796  00FC8A  38                 	db	56	;'8'
   797  00FC8B  2E                 	db	46
   798  00FC8C  53                 	db	83	;'S'
   799  00FC8D  56                 	db	86	;'V'
   800  00FC8E  7C                 	db	124
   801  00FC8F  39                 	db	57	;'9'
   802  00FC90  2E                 	db	46
   803  00FC91  42                 	db	66	;'B'
   804  00FC92  4C                 	db	76	;'L'
   805  00FC93  4B                 	db	75	;'K'
   806  00FC94  00                 	db	0
   807  00FC95                     STR_128:
   808  00FC95  45                 	db	69	;'E'
   809  00FC96  4C                 	db	76	;'L'
   810  00FC97  53                 	db	83	;'S'
   811  00FC98  45                 	db	69	;'E'
   812  00FC99  20                 	db	32
   813  00FC9A  54                 	db	84	;'T'
   814  00FC9B  4F                 	db	79	;'O'
   815  00FC9C  47                 	db	71	;'G'
   816  00FC9D  47                 	db	71	;'G'
   817  00FC9E  4C                 	db	76	;'L'
   818  00FC9F  45                 	db	69	;'E'
   819  00FCA0  53                 	db	83	;'S'
   820  00FCA1  20                 	db	32
   821  00FCA2  41                 	db	65	;'A'
   822  00FCA3  52                 	db	82	;'R'
   823  00FCA4  4D                 	db	77	;'M'
   824  00FCA5  00                 	db	0
   825  00FCA6                     STR_111:
   826  00FCA6  54                 	db	84	;'T'
   827  00FCA7  53                 	db	83	;'S'
   828  00FCA8  54                 	db	84	;'T'
   829  00FCA9  3A                 	db	58	;':'
   830  00FCAA  20                 	db	32
   831  00FCAB  42                 	db	66	;'B'
   832  00FCAC  4F                 	db	79	;'O'
   833  00FCAD  54                 	db	84	;'T'
   834  00FCAE  48                 	db	72	;'H'
   835  00FCAF  20                 	db	32
   836  00FCB0  53                 	db	83	;'S'
   837  00FCB1  45                 	db	69	;'E'
   838  00FCB2  52                 	db	82	;'R'
   839  00FCB3  56                 	db	86	;'V'
   840  00FCB4  4F                 	db	79	;'O'
   841  00FCB5  53                 	db	83	;'S'
   842  00FCB6  00                 	db	0
   843  00FCB7                     STR_65:
   844  00FCB7  53                 	db	83	;'S'
   845  00FCB8  4F                 	db	79	;'O'
   846  00FCB9  52                 	db	82	;'R'
   847  00FCBA  54                 	db	84	;'T'
   848  00FCBB  49                 	db	73	;'I'
   849  00FCBC  4E                 	db	78	;'N'
   850  00FCBD  47                 	db	71	;'G'
   851  00FCBE  2E                 	db	46
   852  00FCBF  2E                 	db	46
   853  00FCC0  2E                 	db	46
   854  00FCC1  20                 	db	32
   855  00FCC2  20                 	db	32
   856  00FCC3  20                 	db	32
   857  00FCC4  20                 	db	32
   858  00FCC5  20                 	db	32
   859  00FCC6  20                 	db	32
   860  00FCC7  00                 	db	0
   861  00FCC8                     STR_66:
   862  00FCC8  54                 	db	84	;'T'
   863  00FCC9  49                 	db	73	;'I'
   864  00FCCA  4D                 	db	77	;'M'
   865  00FCCB  45                 	db	69	;'E'
   866  00FCCC  20                 	db	32
   867  00FCCD  25                 	db	37
   868  00FCCE  64                 	db	100	;'d'
   869  00FCCF  3A                 	db	58	;':'
   870  00FCD0  25                 	db	37
   871  00FCD1  30                 	db	48	;'0'
   872  00FCD2  32                 	db	50	;'2'
   873  00FCD3  64                 	db	100	;'d'
   874  00FCD4  20                 	db	32
   875  00FCD5  20                 	db	32
   876  00FCD6  20                 	db	32
   877  00FCD7  20                 	db	32
   878  00FCD8  00                 	db	0
   879  00FCD9                     STR_41:
   880  00FCD9  4C                 	db	76	;'L'
   881  00FCDA  4F                 	db	79	;'O'
   882  00FCDB  47                 	db	71	;'G'
   883  00FCDC  20                 	db	32
   884  00FCDD  31                 	db	49	;'1'
   885  00FCDE  20                 	db	32
   886  00FCDF  20                 	db	32
   887  00FCE0  20                 	db	32
   888  00FCE1  20                 	db	32
   889  00FCE2  20                 	db	32
   890  00FCE3  20                 	db	32
   891  00FCE4  20                 	db	32
   892  00FCE5  20                 	db	32
   893  00FCE6  20                 	db	32
   894  00FCE7  20                 	db	32
   895  00FCE8  20                 	db	32
   896  00FCE9  00                 	db	0
   897  00FCEA                     STR_40:
   898  00FCEA  4C                 	db	76	;'L'
   899  00FCEB  4F                 	db	79	;'O'
   900  00FCEC  47                 	db	71	;'G'
   901  00FCED  20                 	db	32
   902  00FCEE  32                 	db	50	;'2'
   903  00FCEF  20                 	db	32
   904  00FCF0  20                 	db	32
   905  00FCF1  20                 	db	32
   906  00FCF2  20                 	db	32
   907  00FCF3  20                 	db	32
   908  00FCF4  20                 	db	32
   909  00FCF5  20                 	db	32
   910  00FCF6  20                 	db	32
   911  00FCF7  20                 	db	32
   912  00FCF8  20                 	db	32
   913  00FCF9  20                 	db	32
   914  00FCFA  00                 	db	0
   915  00FCFB                     STR_44:
   916  00FCFB  4C                 	db	76	;'L'
   917  00FCFC  4F                 	db	79	;'O'
   918  00FCFD  47                 	db	71	;'G'
   919  00FCFE  20                 	db	32
   920  00FCFF  33                 	db	51	;'3'
   921  00FD00  20                 	db	32
   922  00FD01  20                 	db	32
   923  00FD02  20                 	db	32
   924  00FD03  20                 	db	32
   925  00FD04  20                 	db	32
   926  00FD05  20                 	db	32
   927  00FD06  20                 	db	32
   928  00FD07  20                 	db	32
   929  00FD08  20                 	db	32
   930  00FD09  20                 	db	32
   931  00FD0A  20                 	db	32
   932  00FD0B  00                 	db	0
   933  00FD0C                     STR_48:
   934  00FD0C  4C                 	db	76	;'L'
   935  00FD0D  4F                 	db	79	;'O'
   936  00FD0E  47                 	db	71	;'G'
   937  00FD0F  20                 	db	32
   938  00FD10  34                 	db	52	;'4'
   939  00FD11  20                 	db	32
   940  00FD12  20                 	db	32
   941  00FD13  20                 	db	32
   942  00FD14  20                 	db	32
   943  00FD15  20                 	db	32
   944  00FD16  20                 	db	32
   945  00FD17  20                 	db	32
   946  00FD18  20                 	db	32
   947  00FD19  20                 	db	32
   948  00FD1A  20                 	db	32
   949  00FD1B  20                 	db	32
   950  00FD1C  00                 	db	0
   951  00FD1D                     STR_36:
   952  00FD1D  33                 	db	51	;'3'
   953  00FD1E  2E                 	db	46
   954  00FD1F  20                 	db	32
   955  00FD20  4C                 	db	76	;'L'
   956  00FD21  4F                 	db	79	;'O'
   957  00FD22  47                 	db	71	;'G'
   958  00FD23  53                 	db	83	;'S'
   959  00FD24  20                 	db	32
   960  00FD25  20                 	db	32
   961  00FD26  20                 	db	32
   962  00FD27  20                 	db	32
   963  00FD28  20                 	db	32
   964  00FD29  20                 	db	32
   965  00FD2A  20                 	db	32
   966  00FD2B  20                 	db	32
   967  00FD2C  20                 	db	32
   968  00FD2D  00                 	db	0
   969  00FD2E                     STR_32:
   970  00FD2E  32                 	db	50	;'2'
   971  00FD2F  2E                 	db	46
   972  00FD30  20                 	db	32
   973  00FD31  53                 	db	83	;'S'
   974  00FD32  4F                 	db	79	;'O'
   975  00FD33  52                 	db	82	;'R'
   976  00FD34  54                 	db	84	;'T'
   977  00FD35  20                 	db	32
   978  00FD36  20                 	db	32
   979  00FD37  20                 	db	32
   980  00FD38  20                 	db	32
   981  00FD39  20                 	db	32
   982  00FD3A  20                 	db	32
   983  00FD3B  20                 	db	32
   984  00FD3C  20                 	db	32
   985  00FD3D  20                 	db	32
   986  00FD3E  00                 	db	0
   987  00FD3F                     STR_33:
   988  00FD3F  31                 	db	49	;'1'
   989  00FD40  2E                 	db	46
   990  00FD41  20                 	db	32
   991  00FD42  44                 	db	68	;'D'
   992  00FD43  41                 	db	65	;'A'
   993  00FD44  54                 	db	84	;'T'
   994  00FD45  45                 	db	69	;'E'
   995  00FD46  2F                 	db	47
   996  00FD47  54                 	db	84	;'T'
   997  00FD48  49                 	db	73	;'I'
   998  00FD49  4D                 	db	77	;'M'
   999  00FD4A  45                 	db	69	;'E'
  1000  00FD4B  20                 	db	32
  1001  00FD4C  20                 	db	32
  1002  00FD4D  20                 	db	32
  1003  00FD4E  20                 	db	32
  1004  00FD4F  00                 	db	0
  1005  00FD50                     STR_24:
  1006  00FD50  20                 	db	32
  1007  00FD51  2D                 	db	45
  1008  00FD52  2D                 	db	45
  1009  00FD53  20                 	db	32
  1010  00FD54  50                 	db	80	;'P'
  1011  00FD55  4F                 	db	79	;'O'
  1012  00FD56  50                 	db	80	;'P'
  1013  00FD57  20                 	db	32
  1014  00FD58  20                 	db	32
  1015  00FD59  43                 	db	67	;'C'
  1016  00FD5A  41                 	db	65	;'A'
  1017  00FD5B  4E                 	db	78	;'N'
  1018  00FD5C  20                 	db	32
  1019  00FD5D  2D                 	db	45
  1020  00FD5E  2D                 	db	45
  1021  00FD5F  20                 	db	32
  1022  00FD60  00                 	db	0
  1023  00FD61                     STR_26:
  1024  00FD61  20                 	db	32
  1025  00FD62  2D                 	db	45
  1026  00FD63  2D                 	db	45
  1027  00FD64  20                 	db	32
  1028  00FD65  53                 	db	83	;'S'
  1029  00FD66  4F                 	db	79	;'O'
  1030  00FD67  55                 	db	85	;'U'
  1031  00FD68  50                 	db	80	;'P'
  1032  00FD69  20                 	db	32
  1033  00FD6A  43                 	db	67	;'C'
  1034  00FD6B  41                 	db	65	;'A'
  1035  00FD6C  4E                 	db	78	;'N'
  1036  00FD6D  20                 	db	32
  1037  00FD6E  2D                 	db	45
  1038  00FD6F  2D                 	db	45
  1039  00FD70  20                 	db	32
  1040  00FD71  00                 	db	0
  1041  00FD72                     STR_28:
  1042  00FD72  2D                 	db	45
  1043  00FD73  2D                 	db	45
  1044  00FD74  20                 	db	32
  1045  00FD75  54                 	db	84	;'T'
  1046  00FD76  4F                 	db	79	;'O'
  1047  00FD77  54                 	db	84	;'T'
  1048  00FD78  41                 	db	65	;'A'
  1049  00FD79  4C                 	db	76	;'L'
  1050  00FD7A  20                 	db	32
  1051  00FD7B  43                 	db	67	;'C'
  1052  00FD7C  41                 	db	65	;'A'
  1053  00FD7D  4E                 	db	78	;'N'
  1054  00FD7E  53                 	db	83	;'S'
  1055  00FD7F  20                 	db	32
  1056  00FD80  2D                 	db	45
  1057  00FD81  2D                 	db	45
  1058  00FD82  00                 	db	0
  1059  00FD83                     STR_39:
  1060  00FD83  4C                 	db	76	;'L'
  1061  00FD84  4F                 	db	79	;'O'
  1062  00FD85  47                 	db	71	;'G'
  1063  00FD86  20                 	db	32
  1064  00FD87  31                 	db	49	;'1'
  1065  00FD88  20                 	db	32
  1066  00FD89  20                 	db	32
  1067  00FD8A  20                 	db	32
  1068  00FD8B  20                 	db	32
  1069  00FD8C  20                 	db	32
  1070  00FD8D  20                 	db	32
  1071  00FD8E  20                 	db	32
  1072  00FD8F  20                 	db	32
  1073  00FD90  20                 	db	32
  1074  00FD91  20                 	db	32
  1075  00FD92  3C                 	db	60	;'<'
  1076  00FD93  00                 	db	0
  1077  00FD94                     STR_42:
  1078  00FD94  4C                 	db	76	;'L'
  1079  00FD95  4F                 	db	79	;'O'
  1080  00FD96  47                 	db	71	;'G'
  1081  00FD97  20                 	db	32
  1082  00FD98  32                 	db	50	;'2'
  1083  00FD99  20                 	db	32
  1084  00FD9A  20                 	db	32
  1085  00FD9B  20                 	db	32
  1086  00FD9C  20                 	db	32
  1087  00FD9D  20                 	db	32
  1088  00FD9E  20                 	db	32
  1089  00FD9F  20                 	db	32
  1090  00FDA0  20                 	db	32
  1091  00FDA1  20                 	db	32
  1092  00FDA2  20                 	db	32
  1093  00FDA3  3C                 	db	60	;'<'
  1094  00FDA4  00                 	db	0
  1095  00FDA5                     STR_46:
  1096  00FDA5  4C                 	db	76	;'L'
  1097  00FDA6  4F                 	db	79	;'O'
  1098  00FDA7  47                 	db	71	;'G'
  1099  00FDA8  20                 	db	32
  1100  00FDA9  33                 	db	51	;'3'
  1101  00FDAA  20                 	db	32
  1102  00FDAB  20                 	db	32
  1103  00FDAC  20                 	db	32
  1104  00FDAD  20                 	db	32
  1105  00FDAE  20                 	db	32
  1106  00FDAF  20                 	db	32
  1107  00FDB0  20                 	db	32
  1108  00FDB1  20                 	db	32
  1109  00FDB2  20                 	db	32
  1110  00FDB3  20                 	db	32
  1111  00FDB4  3C                 	db	60	;'<'
  1112  00FDB5  00                 	db	0
  1113  00FDB6                     STR_50:
  1114  00FDB6  4C                 	db	76	;'L'
  1115  00FDB7  4F                 	db	79	;'O'
  1116  00FDB8  47                 	db	71	;'G'
  1117  00FDB9  20                 	db	32
  1118  00FDBA  34                 	db	52	;'4'
  1119  00FDBB  20                 	db	32
  1120  00FDBC  20                 	db	32
  1121  00FDBD  20                 	db	32
  1122  00FDBE  20                 	db	32
  1123  00FDBF  20                 	db	32
  1124  00FDC0  20                 	db	32
  1125  00FDC1  20                 	db	32
  1126  00FDC2  20                 	db	32
  1127  00FDC3  20                 	db	32
  1128  00FDC4  20                 	db	32
  1129  00FDC5  3C                 	db	60	;'<'
  1130  00FDC6  00                 	db	0
  1131  00FDC7                     STR_38:
  1132  00FDC7  33                 	db	51	;'3'
  1133  00FDC8  2E                 	db	46
  1134  00FDC9  20                 	db	32
  1135  00FDCA  4C                 	db	76	;'L'
  1136  00FDCB  4F                 	db	79	;'O'
  1137  00FDCC  47                 	db	71	;'G'
  1138  00FDCD  53                 	db	83	;'S'
  1139  00FDCE  20                 	db	32
  1140  00FDCF  20                 	db	32
  1141  00FDD0  20                 	db	32
  1142  00FDD1  20                 	db	32
  1143  00FDD2  20                 	db	32
  1144  00FDD3  20                 	db	32
  1145  00FDD4  20                 	db	32
  1146  00FDD5  20                 	db	32
  1147  00FDD6  3C                 	db	60	;'<'
  1148  00FDD7  00                 	db	0
  1149  00FDD8                     STR_34:
  1150  00FDD8  32                 	db	50	;'2'
  1151  00FDD9  2E                 	db	46
  1152  00FDDA  20                 	db	32
  1153  00FDDB  53                 	db	83	;'S'
  1154  00FDDC  4F                 	db	79	;'O'
  1155  00FDDD  52                 	db	82	;'R'
  1156  00FDDE  54                 	db	84	;'T'
  1157  00FDDF  20                 	db	32
  1158  00FDE0  20                 	db	32
  1159  00FDE1  20                 	db	32
  1160  00FDE2  20                 	db	32
  1161  00FDE3  20                 	db	32
  1162  00FDE4  20                 	db	32
  1163  00FDE5  20                 	db	32
  1164  00FDE6  20                 	db	32
  1165  00FDE7  3C                 	db	60	;'<'
  1166  00FDE8  00                 	db	0
  1167  00FDE9                     STR_31:
  1168  00FDE9  31                 	db	49	;'1'
  1169  00FDEA  2E                 	db	46
  1170  00FDEB  20                 	db	32
  1171  00FDEC  44                 	db	68	;'D'
  1172  00FDED  41                 	db	65	;'A'
  1173  00FDEE  54                 	db	84	;'T'
  1174  00FDEF  45                 	db	69	;'E'
  1175  00FDF0  2F                 	db	47
  1176  00FDF1  54                 	db	84	;'T'
  1177  00FDF2  49                 	db	73	;'I'
  1178  00FDF3  4D                 	db	77	;'M'
  1179  00FDF4  45                 	db	69	;'E'
  1180  00FDF5  20                 	db	32
  1181  00FDF6  20                 	db	32
  1182  00FDF7  20                 	db	32
  1183  00FDF8  3C                 	db	60	;'<'
  1184  00FDF9  00                 	db	0
  1185  00FDFA                     STR_6:
  1186  00FDFA  50                 	db	80	;'P'
  1187  00FDFB  41                 	db	65	;'A'
  1188  00FDFC  55                 	db	85	;'U'
  1189  00FDFD  53                 	db	83	;'S'
  1190  00FDFE  45                 	db	69	;'E'
  1191  00FDFF  20                 	db	32
  1192  00FE00  3C                 	db	60	;'<'
  1193  00FE01  20                 	db	32
  1194  00FE02  7C                 	db	124
  1195  00FE03  20                 	db	32
  1196  00FE04  42                 	db	66	;'B'
  1197  00FE05  41                 	db	65	;'A'
  1198  00FE06  43                 	db	67	;'C'
  1199  00FE07  4B                 	db	75	;'K'
  1200  00FE08  20                 	db	32
  1201  00FE09  3E                 	db	62	;'>'
  1202  00FE0A  00                 	db	0
  1203  00FE0B                     STR_30:
  1204  00FE0B  50                 	db	80	;'P'
  1205  00FE0C  55                 	db	85	;'U'
  1206  00FE0D  53                 	db	83	;'S'
  1207  00FE0E  48                 	db	72	;'H'
  1208  00FE0F  20                 	db	32
  1209  00FE10  54                 	db	84	;'T'
  1210  00FE11  4F                 	db	79	;'O'
  1211  00FE12  20                 	db	32
  1212  00FE13  43                 	db	67	;'C'
  1213  00FE14  4F                 	db	79	;'O'
  1214  00FE15  4E                 	db	78	;'N'
  1215  00FE16  54                 	db	84	;'T'
  1216  00FE17  49                 	db	73	;'I'
  1217  00FE18  4E                 	db	78	;'N'
  1218  00FE19  55                 	db	85	;'U'
  1219  00FE1A  45                 	db	69	;'E'
  1220  00FE1B  00                 	db	0
  1221  00FE1C                     STR_27:
  1222  00FE1C  4E                 	db	78	;'N'
  1223  00FE1D  4C                 	db	76	;'L'
  1224  00FE1E  41                 	db	65	;'A'
  1225  00FE1F  42                 	db	66	;'B'
  1226  00FE20  3A                 	db	58	;':'
  1227  00FE21  20                 	db	32
  1228  00FE22  25                 	db	37
  1229  00FE23  64                 	db	100	;'d'
  1230  00FE24  7C                 	db	124
  1231  00FE25  4C                 	db	76	;'L'
  1232  00FE26  41                 	db	65	;'A'
  1233  00FE27  42                 	db	66	;'B'
  1234  00FE28  3A                 	db	58	;':'
  1235  00FE29  20                 	db	32
  1236  00FE2A  25                 	db	37
  1237  00FE2B  64                 	db	100	;'d'
  1238  00FE2C  00                 	db	0
  1239  00FE2D                     STR_25:
  1240  00FE2D  4E                 	db	78	;'N'
  1241  00FE2E  54                 	db	84	;'T'
  1242  00FE2F  41                 	db	65	;'A'
  1243  00FE30  42                 	db	66	;'B'
  1244  00FE31  3A                 	db	58	;':'
  1245  00FE32  20                 	db	32
  1246  00FE33  25                 	db	37
  1247  00FE34  64                 	db	100	;'d'
  1248  00FE35  7C                 	db	124
  1249  00FE36  54                 	db	84	;'T'
  1250  00FE37  41                 	db	65	;'A'
  1251  00FE38  42                 	db	66	;'B'
  1252  00FE39  3A                 	db	58	;':'
  1253  00FE3A  20                 	db	32
  1254  00FE3B  25                 	db	37
  1255  00FE3C  64                 	db	100	;'d'
  1256  00FE3D  00                 	db	0
  1257  00FE3E                     STR_84:
  1258  00FE3E  4D                 	db	77	;'M'
  1259  00FE3F  41                 	db	65	;'A'
  1260  00FE40  47                 	db	71	;'G'
  1261  00FE41  5F                 	db	95	;'_'
  1262  00FE42  73                 	db	115	;'s'
  1263  00FE43  69                 	db	105	;'i'
  1264  00FE44  67                 	db	103	;'g'
  1265  00FE45  6E                 	db	110	;'n'
  1266  00FE46  61                 	db	97	;'a'
  1267  00FE47  6C                 	db	108	;'l'
  1268  00FE48  3A                 	db	58	;':'
  1269  00FE49  20                 	db	32
  1270  00FE4A  25                 	db	37
  1271  00FE4B  64                 	db	100	;'d'
  1272  00FE4C  20                 	db	32
  1273  00FE4D  00                 	db	0
  1274  00FE4E                     STR_104:
  1275  00FE4E  54                 	db	84	;'T'
  1276  00FE4F  53                 	db	83	;'S'
  1277  00FE50  54                 	db	84	;'T'
  1278  00FE51  3A                 	db	58	;':'
  1279  00FE52  20                 	db	32
  1280  00FE53  54                 	db	84	;'T'
  1281  00FE54  49                 	db	73	;'I'
  1282  00FE55  4C                 	db	76	;'L'
  1283  00FE56  54                 	db	84	;'T'
  1284  00FE57  20                 	db	32
  1285  00FE58  53                 	db	83	;'S'
  1286  00FE59  45                 	db	69	;'E'
  1287  00FE5A  52                 	db	82	;'R'
  1288  00FE5B  56                 	db	86	;'V'
  1289  00FE5C  4F                 	db	79	;'O'
  1290  00FE5D  00                 	db	0
  1291  00FE5E                     STR_4:
  1292  00FE5E  44                 	db	68	;'D'
  1293  00FE5F  49                 	db	73	;'I'
  1294  00FE60  44                 	db	68	;'D'
  1295  00FE61  4E                 	db	78	;'N'
  1296  00FE62  27                 	db	39
  1297  00FE63  54                 	db	84	;'T'
  1298  00FE64  20                 	db	32
  1299  00FE65  43                 	db	67	;'C'
  1300  00FE66  4F                 	db	79	;'O'
  1301  00FE67  4D                 	db	77	;'M'
  1302  00FE68  50                 	db	80	;'P'
  1303  00FE69  4C                 	db	76	;'L'
  1304  00FE6A  45                 	db	69	;'E'
  1305  00FE6B  54                 	db	84	;'T'
  1306  00FE6C  45                 	db	69	;'E'
  1307  00FE6D  00                 	db	0
  1308  00FE6E                     STR_123:
  1309  00FE6E  44                 	db	68	;'D'
  1310  00FE6F  3A                 	db	58	;':'
  1311  00FE70  52                 	db	82	;'R'
  1312  00FE71  45                 	db	69	;'E'
  1313  00FE72  54                 	db	84	;'T'
  1314  00FE73  7C                 	db	124
  1315  00FE74  32                 	db	50	;'2'
  1316  00FE75  3A                 	db	58	;':'
  1317  00FE76  43                 	db	67	;'C'
  1318  00FE77  20                 	db	32
  1319  00FE78  25                 	db	37
  1320  00FE79  64                 	db	100	;'d'
  1321  00FE7A  20                 	db	32
  1322  00FE7B  20                 	db	32
  1323  00FE7C  00                 	db	0
  1324  00FE7D                     STR_81:
  1325  00FE7D  49                 	db	73	;'I'
  1326  00FE7E  52                 	db	82	;'R'
  1327  00FE7F  5F                 	db	95	;'_'
  1328  00FE80  73                 	db	115	;'s'
  1329  00FE81  69                 	db	105	;'i'
  1330  00FE82  67                 	db	103	;'g'
  1331  00FE83  6E                 	db	110	;'n'
  1332  00FE84  61                 	db	97	;'a'
  1333  00FE85  6C                 	db	108	;'l'
  1334  00FE86  3A                 	db	58	;':'
  1335  00FE87  20                 	db	32
  1336  00FE88  25                 	db	37
  1337  00FE89  64                 	db	100	;'d'
  1338  00FE8A  20                 	db	32
  1339  00FE8B  00                 	db	0
  1340  00FE8C                     STR_110:
  1341  00FE8C  43                 	db	67	;'C'
  1342  00FE8D  41                 	db	65	;'A'
  1343  00FE8E  4D                 	db	77	;'M'
  1344  00FE8F  20                 	db	32
  1345  00FE90  44                 	db	68	;'D'
  1346  00FE91  57                 	db	87	;'W'
  1347  00FE92  4E                 	db	78	;'N'
  1348  00FE93  20                 	db	32
  1349  00FE94  7C                 	db	124
  1350  00FE95  52                 	db	82	;'R'
  1351  00FE96  43                 	db	67	;'C'
  1352  00FE97  30                 	db	48	;'0'
  1353  00FE98  3D                 	db	61	;'='
  1354  00FE99  30                 	db	48	;'0'
  1355  00FE9A  00                 	db	0
  1356  00FE9B                     STR_109:
  1357  00FE9B  43                 	db	67	;'C'
  1358  00FE9C  41                 	db	65	;'A'
  1359  00FE9D  4D                 	db	77	;'M'
  1360  00FE9E  20                 	db	32
  1361  00FE9F  55                 	db	85	;'U'
  1362  00FEA0  50                 	db	80	;'P'
  1363  00FEA1  20                 	db	32
  1364  00FEA2  20                 	db	32
  1365  00FEA3  7C                 	db	124
  1366  00FEA4  52                 	db	82	;'R'
  1367  00FEA5  43                 	db	67	;'C'
  1368  00FEA6  30                 	db	48	;'0'
  1369  00FEA7  3D                 	db	61	;'='
  1370  00FEA8  31                 	db	49	;'1'
  1371  00FEA9  00                 	db	0
  1372  00FEAA                     STR_83:
  1373  00FEAA  54                 	db	84	;'T'
  1374  00FEAB  53                 	db	83	;'S'
  1375  00FEAC  54                 	db	84	;'T'
  1376  00FEAD  3A                 	db	58	;':'
  1377  00FEAE  20                 	db	32
  1378  00FEAF  4D                 	db	77	;'M'
  1379  00FEB0  41                 	db	65	;'A'
  1380  00FEB1  47                 	db	71	;'G'
  1381  00FEB2  4E                 	db	78	;'N'
  1382  00FEB3  45                 	db	69	;'E'
  1383  00FEB4  54                 	db	84	;'T'
  1384  00FEB5  49                 	db	73	;'I'
  1385  00FEB6  53                 	db	83	;'S'
  1386  00FEB7  4D                 	db	77	;'M'
  1387  00FEB8  00                 	db	0
  1388  00FEB9                     STR_108:
  1389  00FEB9  54                 	db	84	;'T'
  1390  00FEBA  53                 	db	83	;'S'
  1391  00FEBB  54                 	db	84	;'T'
  1392  00FEBC  3A                 	db	58	;':'
  1393  00FEBD  20                 	db	32
  1394  00FEBE  43                 	db	67	;'C'
  1395  00FEBF  41                 	db	65	;'A'
  1396  00FEC0  4D                 	db	77	;'M'
  1397  00FEC1  20                 	db	32
  1398  00FEC2  53                 	db	83	;'S'
  1399  00FEC3  45                 	db	69	;'E'
  1400  00FEC4  52                 	db	82	;'R'
  1401  00FEC5  56                 	db	86	;'V'
  1402  00FEC6  4F                 	db	79	;'O'
  1403  00FEC7  00                 	db	0
  1404  00FEC8                     STR_97:
  1405  00FEC8  54                 	db	84	;'T'
  1406  00FEC9  53                 	db	83	;'S'
  1407  00FECA  54                 	db	84	;'T'
  1408  00FECB  3A                 	db	58	;':'
  1409  00FECC  20                 	db	32
  1410  00FECD  50                 	db	80	;'P'
  1411  00FECE  41                 	db	65	;'A'
  1412  00FECF  4E                 	db	78	;'N'
  1413  00FED0  20                 	db	32
  1414  00FED1  53                 	db	83	;'S'
  1415  00FED2  45                 	db	69	;'E'
  1416  00FED3  52                 	db	82	;'R'
  1417  00FED4  56                 	db	86	;'V'
  1418  00FED5  4F                 	db	79	;'O'
  1419  00FED6  00                 	db	0
  1420  00FED7                     STR_76:
  1421  00FED7  41                 	db	65	;'A'
  1422  00FED8  4C                 	db	76	;'L'
  1423  00FED9  47                 	db	71	;'G'
  1424  00FEDA  34                 	db	52	;'4'
  1425  00FEDB  3A                 	db	58	;':'
  1426  00FEDC  20                 	db	32
  1427  00FEDD  41                 	db	65	;'A'
  1428  00FEDE  4C                 	db	76	;'L'
  1429  00FEDF  4C                 	db	76	;'L'
  1430  00FEE0  20                 	db	32
  1431  00FEE1  43                 	db	67	;'C'
  1432  00FEE2  41                 	db	65	;'A'
  1433  00FEE3  4E                 	db	78	;'N'
  1434  00FEE4  53                 	db	83	;'S'
  1435  00FEE5  00                 	db	0
  1436  00FEE6                     STR_91:
  1437  00FEE6  54                 	db	84	;'T'
  1438  00FEE7  53                 	db	83	;'S'
  1439  00FEE8  54                 	db	84	;'T'
  1440  00FEE9  3A                 	db	58	;':'
  1441  00FEEA  20                 	db	32
  1442  00FEEB  44                 	db	68	;'D'
  1443  00FEEC  43                 	db	67	;'C'
  1444  00FEED  20                 	db	32
  1445  00FEEE  4D                 	db	77	;'M'
  1446  00FEEF  4F                 	db	79	;'O'
  1447  00FEF0  54                 	db	84	;'T'
  1448  00FEF1  4F                 	db	79	;'O'
  1449  00FEF2  52                 	db	82	;'R'
  1450  00FEF3  53                 	db	83	;'S'
  1451  00FEF4  00                 	db	0
  1452  00FEF5                     STR_71:
  1453  00FEF5  41                 	db	65	;'A'
  1454  00FEF6  4C                 	db	76	;'L'
  1455  00FEF7  47                 	db	71	;'G'
  1456  00FEF8  4F                 	db	79	;'O'
  1457  00FEF9  52                 	db	82	;'R'
  1458  00FEFA  49                 	db	73	;'I'
  1459  00FEFB  54                 	db	84	;'T'
  1460  00FEFC  48                 	db	72	;'H'
  1461  00FEFD  4D                 	db	77	;'M'
  1462  00FEFE  20                 	db	32
  1463  00FEFF  54                 	db	84	;'T'
  1464  00FF00  45                 	db	69	;'E'
  1465  00FF01  53                 	db	83	;'S'
  1466  00FF02  54                 	db	84	;'T'
  1467  00FF03  00                 	db	0
  1468  00FF04                     STR_92:
  1469  00FF04  50                 	db	80	;'P'
  1470  00FF05  49                 	db	73	;'I'
  1471  00FF06  4E                 	db	78	;'N'
  1472  00FF07  20                 	db	32
  1473  00FF08  52                 	db	82	;'R'
  1474  00FF09  41                 	db	65	;'A'
  1475  00FF0A  35                 	db	53	;'5'
  1476  00FF0B  20                 	db	32
  1477  00FF0C  48                 	db	72	;'H'
  1478  00FF0D  49                 	db	73	;'I'
  1479  00FF0E  47                 	db	71	;'G'
  1480  00FF0F  48                 	db	72	;'H'
  1481  00FF10  2E                 	db	46
  1482  00FF11  00                 	db	0
  1483  00FF12                     STR_74:
  1484  00FF12  41                 	db	65	;'A'
  1485  00FF13  4C                 	db	76	;'L'
  1486  00FF14  47                 	db	71	;'G'
  1487  00FF15  32                 	db	50	;'2'
  1488  00FF16  3A                 	db	58	;':'
  1489  00FF17  20                 	db	32
  1490  00FF18  31                 	db	49	;'1'
  1491  00FF19  32                 	db	50	;'2'
  1492  00FF1A  20                 	db	32
  1493  00FF1B  43                 	db	67	;'C'
  1494  00FF1C  41                 	db	65	;'A'
  1495  00FF1D  4E                 	db	78	;'N'
  1496  00FF1E  53                 	db	83	;'S'
  1497  00FF1F  00                 	db	0
  1498  00FF20                     STR_77:
  1499  00FF20  41                 	db	65	;'A'
  1500  00FF21  4C                 	db	76	;'L'
  1501  00FF22  47                 	db	71	;'G'
  1502  00FF23  35                 	db	53	;'5'
  1503  00FF24  3A                 	db	58	;':'
  1504  00FF25  20                 	db	32
  1505  00FF26  4E                 	db	78	;'N'
  1506  00FF27  4F                 	db	79	;'O'
  1507  00FF28  20                 	db	32
  1508  00FF29  43                 	db	67	;'C'
  1509  00FF2A  41                 	db	65	;'A'
  1510  00FF2B  4E                 	db	78	;'N'
  1511  00FF2C  53                 	db	83	;'S'
  1512  00FF2D  00                 	db	0
  1513  00FF2E                     STR_72:
  1514  00FF2E  50                 	db	80	;'P'
  1515  00FF2F  55                 	db	85	;'U'
  1516  00FF30  53                 	db	83	;'S'
  1517  00FF31  48                 	db	72	;'H'
  1518  00FF32  20                 	db	32
  1519  00FF33  54                 	db	84	;'T'
  1520  00FF34  4F                 	db	79	;'O'
  1521  00FF35  20                 	db	32
  1522  00FF36  53                 	db	83	;'S'
  1523  00FF37  54                 	db	84	;'T'
  1524  00FF38  41                 	db	65	;'A'
  1525  00FF39  52                 	db	82	;'R'
  1526  00FF3A  54                 	db	84	;'T'
  1527  00FF3B  00                 	db	0
  1528  00FF3C                     STR_23:
  1529  00FF3C  25                 	db	37
  1530  00FF3D  64                 	db	100	;'d'
  1531  00FF3E  20                 	db	32
  1532  00FF3F  4D                 	db	77	;'M'
  1533  00FF40  49                 	db	73	;'I'
  1534  00FF41  4E                 	db	78	;'N'
  1535  00FF42  20                 	db	32
  1536  00FF43  25                 	db	37
  1537  00FF44  64                 	db	100	;'d'
  1538  00FF45  20                 	db	32
  1539  00FF46  53                 	db	83	;'S'
  1540  00FF47  45                 	db	69	;'E'
  1541  00FF48  43                 	db	67	;'C'
  1542  00FF49  00                 	db	0
  1543  00FF4A                     STR_2:
  1544  00FF4A  54                 	db	84	;'T'
  1545  00FF4B  49                 	db	73	;'I'
  1546  00FF4C  4D                 	db	77	;'M'
  1547  00FF4D  45                 	db	69	;'E'
  1548  00FF4E  3A                 	db	58	;':'
  1549  00FF4F  20                 	db	32
  1550  00FF50  25                 	db	37
  1551  00FF51  64                 	db	100	;'d'
  1552  00FF52  3A                 	db	58	;':'
  1553  00FF53  25                 	db	37
  1554  00FF54  30                 	db	48	;'0'
  1555  00FF55  32                 	db	50	;'2'
  1556  00FF56  64                 	db	100	;'d'
  1557  00FF57  00                 	db	0
  1558  00FF58                     STR_80:
  1559  00FF58  54                 	db	84	;'T'
  1560  00FF59  53                 	db	83	;'S'
  1561  00FF5A  54                 	db	84	;'T'
  1562  00FF5B  3A                 	db	58	;':'
  1563  00FF5C  20                 	db	32
  1564  00FF5D  49                 	db	73	;'I'
  1565  00FF5E  52                 	db	82	;'R'
  1566  00FF5F  20                 	db	32
  1567  00FF60  53                 	db	83	;'S'
  1568  00FF61  4E                 	db	78	;'N'
  1569  00FF62  53                 	db	83	;'S'
  1570  00FF63  52                 	db	82	;'R'
  1571  00FF64  00                 	db	0
  1572  00FF65                     STR_75:
  1573  00FF65  41                 	db	65	;'A'
  1574  00FF66  4C                 	db	76	;'L'
  1575  00FF67  47                 	db	71	;'G'
  1576  00FF68  33                 	db	51	;'3'
  1577  00FF69  3A                 	db	58	;':'
  1578  00FF6A  20                 	db	32
  1579  00FF6B  31                 	db	49	;'1'
  1580  00FF6C  20                 	db	32
  1581  00FF6D  43                 	db	67	;'C'
  1582  00FF6E  41                 	db	65	;'A'
  1583  00FF6F  4E                 	db	78	;'N'
  1584  00FF70  00                 	db	0
  1585  00FF71                     STR_94:
  1586  00FF71  50                 	db	80	;'P'
  1587  00FF72  49                 	db	73	;'I'
  1588  00FF73  4E                 	db	78	;'N'
  1589  00FF74  20                 	db	32
  1590  00FF75  52                 	db	82	;'R'
  1591  00FF76  41                 	db	65	;'A'
  1592  00FF77  33                 	db	51	;'3'
  1593  00FF78  2E                 	db	46
  1594  00FF79  2E                 	db	46
  1595  00FF7A  2E                 	db	46
  1596  00FF7B  00                 	db	0
  1597  00FF7C                     STR_96:
  1598  00FF7C  50                 	db	80	;'P'
  1599  00FF7D  49                 	db	73	;'I'
  1600  00FF7E  4E                 	db	78	;'N'
  1601  00FF7F  20                 	db	32
  1602  00FF80  52                 	db	82	;'R'
  1603  00FF81  41                 	db	65	;'A'
  1604  00FF82  34                 	db	52	;'4'
  1605  00FF83  2E                 	db	46
  1606  00FF84  2E                 	db	46
  1607  00FF85  2E                 	db	46
  1608  00FF86  00                 	db	0
  1609  00FF87                     STR_85:
  1610  00FF87  54                 	db	84	;'T'
  1611  00FF88  53                 	db	83	;'S'
  1612  00FF89  54                 	db	84	;'T'
  1613  00FF8A  3A                 	db	58	;':'
  1614  00FF8B  20                 	db	32
  1615  00FF8C  43                 	db	67	;'C'
  1616  00FF8D  4F                 	db	79	;'O'
  1617  00FF8E  4E                 	db	78	;'N'
  1618  00FF8F  44                 	db	68	;'D'
  1619  00FF90  00                 	db	0
  1620  00FF91                     STR_89:
  1621  00FF91  41                 	db	65	;'A'
  1622  00FF92  43                 	db	67	;'C'
  1623  00FF93  54                 	db	84	;'T'
  1624  00FF94  55                 	db	85	;'U'
  1625  00FF95  41                 	db	65	;'A'
  1626  00FF96  54                 	db	84	;'T'
  1627  00FF97  4F                 	db	79	;'O'
  1628  00FF98  52                 	db	82	;'R'
  1629  00FF99  53                 	db	83	;'S'
  1630  00FF9A  00                 	db	0
  1631  00FF9B                     STR_22:
  1632  00FF9B  44                 	db	68	;'D'
  1633  00FF9C  55                 	db	85	;'U'
  1634  00FF9D  52                 	db	82	;'R'
  1635  00FF9E  41                 	db	65	;'A'
  1636  00FF9F  54                 	db	84	;'T'
  1637  00FFA0  49                 	db	73	;'I'
  1638  00FFA1  4F                 	db	79	;'O'
  1639  00FFA2  4E                 	db	78	;'N'
  1640  00FFA3  3A                 	db	58	;':'
  1641  00FFA4  00                 	db	0
  1642  00FFA5                     STR_87:
  1643  00FFA5  43                 	db	67	;'C'
  1644  00FFA6  4F                 	db	79	;'O'
  1645  00FFA7  4E                 	db	78	;'N'
  1646  00FFA8  44                 	db	68	;'D'
  1647  00FFA9  3A                 	db	58	;':'
  1648  00FFAA  20                 	db	32
  1649  00FFAB  25                 	db	37
  1650  00FFAC  64                 	db	100	;'d'
  1651  00FFAD  00                 	db	0
  1652  00FFAE                     STR_78:
  1653  00FFAE  53                 	db	83	;'S'
  1654  00FFAF  45                 	db	69	;'E'
  1655  00FFB0  4E                 	db	78	;'N'
  1656  00FFB1  53                 	db	83	;'S'
  1657  00FFB2  4F                 	db	79	;'O'
  1658  00FFB3  52                 	db	82	;'R'
  1659  00FFB4  53                 	db	83	;'S'
  1660  00FFB5  00                 	db	0
  1661  00FFB6                     STR_131:
  1662  00FFB6  28                 	db	40
  1663  00FFB7  6E                 	db	110	;'n'
  1664  00FFB8  75                 	db	117	;'u'
  1665  00FFB9  6C                 	db	108	;'l'
  1666  00FFBA  6C                 	db	108	;'l'
  1667  00FFBB  29                 	db	41
  1668  00FFBC  00                 	db	0
  1669  00FFBD                     STR_68:
  1670  00FFBD  46                 	db	70	;'F'
  1671  00FFBE  41                 	db	65	;'A'
  1672  00FFBF  49                 	db	73	;'I'
  1673  00FFC0  4C                 	db	76	;'L'
  1674  00FFC1  45                 	db	69	;'E'
  1675  00FFC2  44                 	db	68	;'D'
  1676  00FFC3  00                 	db	0
  1677  00FFC4                     STR_7:
  1678  00FFC4  53                 	db	83	;'S'
  1679  00FFC5  54                 	db	84	;'T'
  1680  00FFC6  41                 	db	65	;'A'
  1681  00FFC7  52                 	db	82	;'R'
  1682  00FFC8  54                 	db	84	;'T'
  1683  00FFC9  3A                 	db	58	;':'
  1684  00FFCA  00                 	db	0
  1685  00FFCB                     STR_9:
  1686  00FFCB  46                 	db	70	;'F'
  1687  00FFCC  45                 	db	69	;'E'
  1688  00FFCD  42                 	db	66	;'B'
  1689  00FFCE  00                 	db	0
  1690  00FFCF                     STR_19:
  1691  00FFCF  44                 	db	68	;'D'
  1692  00FFD0  45                 	db	69	;'E'
  1693  00FFD1  43                 	db	67	;'C'
  1694  00FFD2  00                 	db	0
  1695  00FFD3                     STR_15:
  1696  00FFD3  41                 	db	65	;'A'
  1697  00FFD4  55                 	db	85	;'U'
  1698  00FFD5  47                 	db	71	;'G'
  1699  00FFD6  00                 	db	0
  1700  00FFD7                     STR_14:
  1701  00FFD7  4A                 	db	74	;'J'
  1702  00FFD8  55                 	db	85	;'U'
  1703  00FFD9  4C                 	db	76	;'L'
  1704  00FFDA  00                 	db	0
  1705  00FFDB                     STR_8:
  1706  00FFDB  4A                 	db	74	;'J'
  1707  00FFDC  41                 	db	65	;'A'
  1708  00FFDD  4E                 	db	78	;'N'
  1709  00FFDE  00                 	db	0
  1710  00FFDF                     STR_13:
  1711  00FFDF  4A                 	db	74	;'J'
  1712  00FFE0  55                 	db	85	;'U'
  1713  00FFE1  4E                 	db	78	;'N'
  1714  00FFE2  00                 	db	0
  1715  00FFE3                     STR_16:
  1716  00FFE3  53                 	db	83	;'S'
  1717  00FFE4  45                 	db	69	;'E'
  1718  00FFE5  50                 	db	80	;'P'
  1719  00FFE6  00                 	db	0
  1720  00FFE7                     STR_10:
  1721  00FFE7  4D                 	db	77	;'M'
  1722  00FFE8  41                 	db	65	;'A'
  1723  00FFE9  52                 	db	82	;'R'
  1724  00FFEA  00                 	db	0
  1725  00FFEB                     STR_11:
  1726  00FFEB  41                 	db	65	;'A'
  1727  00FFEC  50                 	db	80	;'P'
  1728  00FFED  52                 	db	82	;'R'
  1729  00FFEE  00                 	db	0
  1730  00FFEF                     STR_20:
  1731  00FFEF  45                 	db	69	;'E'
  1732  00FFF0  52                 	db	82	;'R'
  1733  00FFF1  52                 	db	82	;'R'
  1734  00FFF2  00                 	db	0
  1735  00FFF3                     STR_17:
  1736  00FFF3  4F                 	db	79	;'O'
  1737  00FFF4  43                 	db	67	;'C'
  1738  00FFF5  54                 	db	84	;'T'
  1739  00FFF6  00                 	db	0
  1740  00FFF7                     STR_18:
  1741  00FFF7  4E                 	db	78	;'N'
  1742  00FFF8  4F                 	db	79	;'O'
  1743  00FFF9  56                 	db	86	;'V'
  1744  00FFFA  00                 	db	0
  1745  00FFFB                     STR_12:
  1746  00FFFB  4D                 	db	77	;'M'
  1747  00FFFC  41                 	db	65	;'A'
  1748  00FFFD  59                 	db	89	;'Y'
  1749  00FFFE  00                 	db	0
  1750  0000                     
  1751                           ; #config settings
  1752  00FFFF  00                 	db	0	; dummy byte at the end
  1753  0000                     
  1754                           	psect	cinit
  1755  005416                     __pcinit:
  1756                           	opt stack 0
  1757  005416                     start_initialization:
  1758                           	opt stack 0
  1759  005416                     __initialization:
  1760                           	opt stack 0
  1761                           
  1762                           ; Initialize objects allocated to BANK1 (8 bytes)
  1763                           ; load TBLPTR registers with __pidataBANK1
  1764  005416  0E5C               	movlw	low __pidataBANK1
  1765  005418  6EF6               	movwf	tblptrl,c
  1766  00541A  0E5C               	movlw	high __pidataBANK1
  1767  00541C  6EF7               	movwf	tblptrh,c
  1768  00541E  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1769  005420  6EF8               	movwf	tblptru,c
  1770  005422  EE01  F049         	lfsr	0,__pdataBANK1
  1771  005426  EE10 F008          	lfsr	1,8
  1772  00542A                     copy_data0:
  1773  00542A  0009               	tblrd		*+
  1774  00542C  CFF5 FFEE          	movff	tablat,postinc0
  1775  005430  50E5               	movf	postdec1,w,c
  1776  005432  50E1               	movf	fsr1l,w,c
  1777  005434  E1FA               	bnz	copy_data0
  1778                           
  1779                           ; Clear objects allocated to BANK1 (73 bytes)
  1780  005436  EE01  F000         	lfsr	0,__pbssBANK1
  1781  00543A  0E49               	movlw	73
  1782  00543C                     clear_0:
  1783  00543C  6AEE               	clrf	postinc0,c
  1784  00543E  06E8               	decf	wreg,f,c
  1785  005440  E1FD               	bnz	clear_0
  1786                           
  1787                           ; Clear objects allocated to BANK0 (38 bytes)
  1788  005442  EE00  F0DA         	lfsr	0,__pbssBANK0
  1789  005446  0E26               	movlw	38
  1790  005448                     clear_1:
  1791  005448  6AEE               	clrf	postinc0,c
  1792  00544A  06E8               	decf	wreg,f,c
  1793  00544C  E1FD               	bnz	clear_1
  1794                           
  1795                           ; Clear objects allocated to COMRAM (35 bytes)
  1796  00544E  EE00  F05B         	lfsr	0,__pbssCOMRAM
  1797  005452  0E23               	movlw	35
  1798  005454                     clear_2:
  1799  005454  6AEE               	clrf	postinc0,c
  1800  005456  06E8               	decf	wreg,f,c
  1801  005458  E1FD               	bnz	clear_2
  1802  00545A                     end_of_initialization:
  1803                           	opt stack 0
  1804  00545A                     __end_of__initialization:
  1805                           	opt stack 0
  1806  00545A  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1807  00545C  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1808  00545E  0100               	movlb	0
  1809  005460  EFDB  F023         	goto	_main	;jump to C main() function
  1810                           tblptru	equ	0xFF8
  1811                           tblptrh	equ	0xFF7
  1812                           tblptrl	equ	0xFF6
  1813                           tablat	equ	0xFF5
  1814                           postinc0	equ	0xFEE
  1815                           wreg	equ	0xFE8
  1816                           postdec1	equ	0xFE5
  1817                           fsr1l	equ	0xFE1
  1818                           
  1819                           	psect	bssCOMRAM
  1820  00005B                     __pbssCOMRAM:
  1821                           	opt stack 0
  1822  00005B                     _servoTimes:
  1823                           	opt stack 0
  1824  00005B                     	ds	8
  1825  000063                     _back:
  1826                           	opt stack 0
  1827  000063                     	ds	2
  1828  000065                     _down:
  1829                           	opt stack 0
  1830  000065                     	ds	2
  1831  000067                     _enter:
  1832                           	opt stack 0
  1833  000067                     	ds	2
  1834  000069                     _f_panning_to_bin:
  1835                           	opt stack 0
  1836  000069                     	ds	2
  1837  00006B                     _pan_servo_state:
  1838                           	opt stack 0
  1839  00006B                     	ds	2
  1840  00006D                     _servo_timer_counter:
  1841                           	opt stack 0
  1842  00006D                     	ds	2
  1843  00006F                     _servo_timer_target:
  1844                           	opt stack 0
  1845  00006F                     	ds	2
  1846  000071                     _tilt_servo_state:
  1847                           	opt stack 0
  1848  000071                     	ds	2
  1849  000073                     _timer2_counter:
  1850                           	opt stack 0
  1851  000073                     	ds	2
  1852  000075                     _up:
  1853                           	opt stack 0
  1854  000075                     	ds	2
  1855  000077                     _was_low_1:
  1856                           	opt stack 0
  1857  000077                     	ds	2
  1858  000079                     _was_low_2:
  1859                           	opt stack 0
  1860  000079                     	ds	2
  1861  00007B                     _was_low_3:
  1862                           	opt stack 0
  1863  00007B                     	ds	2
  1864  00007D                     _input:
  1865                           	opt stack 0
  1866  00007D                     	ds	1
  1867                           tblptru	equ	0xFF8
  1868                           tblptrh	equ	0xFF7
  1869                           tblptrl	equ	0xFF6
  1870                           tablat	equ	0xFF5
  1871                           postinc0	equ	0xFEE
  1872                           wreg	equ	0xFE8
  1873                           postdec1	equ	0xFE5
  1874                           fsr1l	equ	0xFE1
  1875                           
  1876                           	psect	bssBANK0
  1877  0000DA                     __pbssBANK0:
  1878                           	opt stack 0
  1879  0000DA                     _sensor_outputs:
  1880                           	opt stack 0
  1881  0000DA                     	ds	4
  1882  0000DE                     _COND_signal:
  1883                           	opt stack 0
  1884  0000DE                     	ds	2
  1885  0000E0                     _IR_signal:
  1886                           	opt stack 0
  1887  0000E0                     	ds	2
  1888  0000E2                     _MAG_signal:
  1889                           	opt stack 0
  1890  0000E2                     	ds	2
  1891  0000E4                     _RTCflag:
  1892                           	opt stack 0
  1893  0000E4                     	ds	2
  1894  0000E6                     _cur_state:
  1895                           	opt stack 0
  1896  0000E6                     	ds	2
  1897  0000E8                     _f_arm_position:
  1898                           	opt stack 0
  1899  0000E8                     	ds	2
  1900  0000EA                     _f_lastCan:
  1901                           	opt stack 0
  1902  0000EA                     	ds	2
  1903  0000EC                     _f_loadingNewCan:
  1904                           	opt stack 0
  1905  0000EC                     	ds	2
  1906  0000EE                     _log:
  1907                           	opt stack 0
  1908  0000EE                     	ds	2
  1909  0000F0                     _log_completion:
  1910                           	opt stack 0
  1911  0000F0                     	ds	2
  1912  0000F2                     _log_count_pop_no_tab:
  1913                           	opt stack 0
  1914  0000F2                     	ds	2
  1915  0000F4                     _log_count_pop_w_tab:
  1916                           	opt stack 0
  1917  0000F4                     	ds	2
  1918  0000F6                     _log_total_time:
  1919                           	opt stack 0
  1920  0000F6                     	ds	2
  1921  0000F8                     _logstate:
  1922                           	opt stack 0
  1923  0000F8                     	ds	2
  1924  0000FA                     _total_time:
  1925                           	opt stack 0
  1926  0000FA                     	ds	2
  1927  0000FC                     _machine_state:
  1928                           	opt stack 0
  1929  0000FC                     	ds	1
  1930  0000FD                     _sel:
  1931                           	opt stack 0
  1932  0000FD                     	ds	1
  1933  0000FE                     _count_total:
  1934                           	opt stack 0
  1935  0000FE                     	ds	2
  1936                           tblptru	equ	0xFF8
  1937                           tblptrh	equ	0xFF7
  1938                           tblptrl	equ	0xFF6
  1939                           tablat	equ	0xFF5
  1940                           postinc0	equ	0xFEE
  1941                           wreg	equ	0xFE8
  1942                           postdec1	equ	0xFE5
  1943                           fsr1l	equ	0xFE1
  1944                           
  1945                           	psect	bssBANK1
  1946  000100                     __pbssBANK1:
  1947                           	opt stack 0
  1948  000100                     _log_startTime:
  1949                           	opt stack 0
  1950  000100                     	ds	14
  1951  00010E                     _startTime:
  1952                           	opt stack 0
  1953  00010E                     	ds	14
  1954  00011C                     _time:
  1955                           	opt stack 0
  1956  00011C                     	ds	7
  1957  000123                     _count_can_no_lab:
  1958                           	opt stack 0
  1959  000123                     	ds	2
  1960  000125                     _count_can_w_lab:
  1961                           	opt stack 0
  1962  000125                     	ds	2
  1963  000127                     _count_pop_no_tab:
  1964                           	opt stack 0
  1965  000127                     	ds	2
  1966  000129                     _count_pop_w_tab:
  1967                           	opt stack 0
  1968  000129                     	ds	2
  1969  00012B                     _cur_can:
  1970                           	opt stack 0
  1971  00012B                     	ds	2
  1972  00012D                     _debug:
  1973                           	opt stack 0
  1974  00012D                     	ds	2
  1975  00012F                     _f_ID_receive:
  1976                           	opt stack 0
  1977  00012F                     	ds	2
  1978  000131                     _f_can_coming_to_ID:
  1979                           	opt stack 0
  1980  000131                     	ds	2
  1981  000133                     _f_can_coming_to_distribution:
  1982                           	opt stack 0
  1983  000133                     	ds	2
  1984  000135                     _f_can_distributed:
  1985                           	opt stack 0
  1986  000135                     	ds	2
  1987  000137                     _f_most_recent_sort_time:
  1988                           	opt stack 0
  1989  000137                     	ds	2
  1990  000139                     _first:
  1991                           	opt stack 0
  1992  000139                     	ds	2
  1993  00013B                     _firstboot:
  1994                           	opt stack 0
  1995  00013B                     	ds	2
  1996  00013D                     _i:
  1997                           	opt stack 0
  1998  00013D                     	ds	2
  1999  00013F                     _log_count_can_no_lab:
  2000                           	opt stack 0
  2001  00013F                     	ds	2
  2002  000141                     _log_count_can_w_lab:
  2003                           	opt stack 0
  2004  000141                     	ds	2
  2005  000143                     _log_count_total:
  2006                           	opt stack 0
  2007  000143                     	ds	2
  2008  000145                     _most_recent_sort_time:
  2009                           	opt stack 0
  2010  000145                     	ds	2
  2011  000147                     _var:
  2012                           	opt stack 0
  2013  000147                     	ds	2
  2014                           tblptru	equ	0xFF8
  2015                           tblptrh	equ	0xFF7
  2016                           tblptrl	equ	0xFF6
  2017                           tablat	equ	0xFF5
  2018                           postinc0	equ	0xFEE
  2019                           wreg	equ	0xFE8
  2020                           postdec1	equ	0xFE5
  2021                           fsr1l	equ	0xFE1
  2022                           
  2023                           	psect	dataBANK1
  2024  000149                     __pdataBANK1:
  2025                           	opt stack 0
  2026  000149                     UI@F3246:
  2027                           	opt stack 0
  2028  000149                     	ds	4
  2029  00014D                     printRTC@F3236:
  2030                           	opt stack 0
  2031  00014D                     	ds	4
  2032                           tblptru	equ	0xFF8
  2033                           tblptrh	equ	0xFF7
  2034                           tblptrl	equ	0xFF6
  2035                           tablat	equ	0xFF5
  2036                           postinc0	equ	0xFEE
  2037                           wreg	equ	0xFE8
  2038                           postdec1	equ	0xFE5
  2039                           fsr1l	equ	0xFE1
  2040                           
  2041                           	psect	cstackBANK0
  2042  000080                     __pcstackBANK0:
  2043                           	opt stack 0
  2044  000080                     ??_delay_ms:
  2045  000080                     ??_isdigit:
  2046  000080                     ??_readADC:
  2047  000080                     ??_I2C_Master_Wait:
  2048  000080                     ?___wmul:
  2049                           	opt stack 0
  2050  000080                     ?___awmod:
  2051                           	opt stack 0
  2052  000080                     ?___lwdiv:
  2053                           	opt stack 0
  2054  000080                     ?___ftpack:
  2055                           	opt stack 0
  2056  000080                     ?___lldiv:
  2057                           	opt stack 0
  2058  000080                     lcdNibble@temp:
  2059                           	opt stack 0
  2060  000080                     initTime@m:
  2061                           	opt stack 0
  2062  000080                     updateServoPosition@time_us:
  2063                           	opt stack 0
  2064  000080                     EEPROM_read@address:
  2065                           	opt stack 0
  2066  000080                     ___wmul@multiplier:
  2067                           	opt stack 0
  2068  000080                     ___awmod@dividend:
  2069                           	opt stack 0
  2070  000080                     ___lwdiv@dividend:
  2071                           	opt stack 0
  2072  000080                     strcpy@to:
  2073                           	opt stack 0
  2074  000080                     ___ftpack@arg:
  2075                           	opt stack 0
  2076  000080                     ___lldiv@dividend:
  2077                           	opt stack 0
  2078                           
  2079                           ; 4 bytes @ 0x0
  2080  000080                     	ds	1
  2081  000081                     readADC@channel:
  2082                           	opt stack 0
  2083  000081                     I2C_Master_Read@a:
  2084                           	opt stack 0
  2085  000081                     lcdNibble@data:
  2086                           	opt stack 0
  2087  000081                     initTime@h:
  2088                           	opt stack 0
  2089  000081                     delay_ms@milliseconds:
  2090                           	opt stack 0
  2091  000081                     _isdigit$2064:
  2092                           	opt stack 0
  2093  000081                     I2C_Master_Write@d:
  2094                           	opt stack 0
  2095                           
  2096                           ; 2 bytes @ 0x1
  2097  000081                     	ds	1
  2098  000082                     ??_readIR:
  2099  000082                     ??_readMAG:
  2100  000082                     ??_readCOND:
  2101  000082                     I2C_Master_Read@temp:
  2102                           	opt stack 0
  2103  000082                     lcdInst@data:
  2104                           	opt stack 0
  2105  000082                     putch@data:
  2106                           	opt stack 0
  2107  000082                     initTime@w:
  2108                           	opt stack 0
  2109  000082                     isdigit@c:
  2110                           	opt stack 0
  2111  000082                     updateServoPosition@timer:
  2112                           	opt stack 0
  2113  000082                     ___wmul@multiplicand:
  2114                           	opt stack 0
  2115  000082                     ___awmod@divisor:
  2116                           	opt stack 0
  2117  000082                     ___lwdiv@divisor:
  2118                           	opt stack 0
  2119  000082                     strcpy@from:
  2120                           	opt stack 0
  2121                           
  2122                           ; 2 bytes @ 0x2
  2123  000082                     	ds	1
  2124  000083                     ??_initLCD:
  2125  000083                     initTime@DD:
  2126                           	opt stack 0
  2127  000083                     ___ftpack@exp:
  2128                           	opt stack 0
  2129  000083                     getRTC@i:
  2130                           	opt stack 0
  2131                           
  2132                           ; 2 bytes @ 0x3
  2133  000083                     	ds	1
  2134  000084                     ??_updateServoPosition:
  2135  000084                     initTime@MM:
  2136                           	opt stack 0
  2137  000084                     ___awmod@counter:
  2138                           	opt stack 0
  2139  000084                     ___ftpack@sign:
  2140                           	opt stack 0
  2141  000084                     readIR@res:
  2142                           	opt stack 0
  2143  000084                     readMAG@res:
  2144                           	opt stack 0
  2145  000084                     readCOND@res:
  2146                           	opt stack 0
  2147  000084                     ___wmul@product:
  2148                           	opt stack 0
  2149  000084                     ___lwdiv@quotient:
  2150                           	opt stack 0
  2151  000084                     strcpy@cp:
  2152                           	opt stack 0
  2153  000084                     ___lldiv@divisor:
  2154                           	opt stack 0
  2155                           
  2156                           ; 4 bytes @ 0x4
  2157  000084                     	ds	1
  2158  000085                     ??_initSortTimer:
  2159  000085                     ??___ftpack:
  2160  000085                     initTime@YY:
  2161                           	opt stack 0
  2162  000085                     ___awmod@sign:
  2163                           	opt stack 0
  2164                           
  2165                           ; 1 bytes @ 0x5
  2166  000085                     	ds	1
  2167  000086                     ??_getIR:
  2168  000086                     ??_getMAG:
  2169  000086                     ?___awdiv:
  2170                           	opt stack 0
  2171  000086                     initTime@s:
  2172                           	opt stack 0
  2173  000086                     ___lwdiv@counter:
  2174                           	opt stack 0
  2175  000086                     updateServoPosition@my_time:
  2176                           	opt stack 0
  2177  000086                     ___awdiv@dividend:
  2178                           	opt stack 0
  2179                           
  2180                           ; 2 bytes @ 0x6
  2181  000086                     	ds	1
  2182  000087                     ?___lwmod:
  2183                           	opt stack 0
  2184  000087                     getIR@i:
  2185                           	opt stack 0
  2186  000087                     ___lwmod@dividend:
  2187                           	opt stack 0
  2188                           
  2189                           ; 2 bytes @ 0x7
  2190  000087                     	ds	1
  2191  000088                     ??_Distribution:
  2192  000088                     ??_initServos:
  2193  000088                     initSortTimer@i:
  2194                           	opt stack 0
  2195  000088                     ___awdiv@divisor:
  2196                           	opt stack 0
  2197  000088                     ___lldiv@quotient:
  2198                           	opt stack 0
  2199                           
  2200                           ; 4 bytes @ 0x8
  2201  000088                     	ds	1
  2202  000089                     ___lwmod@divisor:
  2203                           	opt stack 0
  2204                           
  2205                           ; 2 bytes @ 0x9
  2206  000089                     	ds	1
  2207  00008A                     ___awdiv@counter:
  2208                           	opt stack 0
  2209                           
  2210                           ; 1 bytes @ 0xA
  2211  00008A                     	ds	1
  2212  00008B                     ___awdiv@sign:
  2213                           	opt stack 0
  2214  00008B                     ___lwmod@counter:
  2215                           	opt stack 0
  2216                           
  2217                           ; 1 bytes @ 0xB
  2218  00008B                     	ds	1
  2219  00008C                     ___lldiv@counter:
  2220                           	opt stack 0
  2221  00008C                     ___awdiv@quotient:
  2222                           	opt stack 0
  2223                           
  2224                           ; 2 bytes @ 0xC
  2225  00008C                     	ds	1
  2226  00008D                     I2C_Master_Init@c:
  2227                           	opt stack 0
  2228                           
  2229                           ; 4 bytes @ 0xD
  2230  00008D                     	ds	1
  2231  00008E                     ?_printf:
  2232                           	opt stack 0
  2233  00008E                     ?___awtoft:
  2234                           	opt stack 0
  2235  00008E                     printf@f:
  2236                           	opt stack 0
  2237  00008E                     ___awtoft@c:
  2238                           	opt stack 0
  2239                           
  2240                           ; 2 bytes @ 0xE
  2241  00008E                     	ds	3
  2242  000091                     ??_I2C_Master_Init:
  2243  000091                     ___awtoft@sign:
  2244                           	opt stack 0
  2245                           
  2246                           ; 1 bytes @ 0x11
  2247  000091                     	ds	1
  2248  000092                     ___ftge@ff1:
  2249                           	opt stack 0
  2250                           
  2251                           ; 3 bytes @ 0x12
  2252  000092                     	ds	3
  2253  000095                     ??_loadRTC:
  2254  000095                     ___ftge@ff2:
  2255                           	opt stack 0
  2256                           
  2257                           ; 3 bytes @ 0x15
  2258  000095                     	ds	1
  2259  000096                     loadRTC@i:
  2260                           	opt stack 0
  2261                           
  2262                           ; 2 bytes @ 0x16
  2263  000096                     	ds	2
  2264  000098                     ??___ftge:
  2265                           
  2266                           ; 1 bytes @ 0x18
  2267  000098                     	ds	2
  2268  00009A                     ??_printf:
  2269                           
  2270                           ; 1 bytes @ 0x1A
  2271  00009A                     	ds	4
  2272  00009E                     printf@prec:
  2273                           	opt stack 0
  2274                           
  2275                           ; 1 bytes @ 0x1E
  2276  00009E                     	ds	1
  2277  00009F                     printf@cp:
  2278                           	opt stack 0
  2279                           
  2280                           ; 2 bytes @ 0x1F
  2281  00009F                     	ds	2
  2282  0000A1                     printf@ap:
  2283                           	opt stack 0
  2284                           
  2285                           ; 2 bytes @ 0x21
  2286  0000A1                     	ds	2
  2287  0000A3                     printf@len:
  2288                           	opt stack 0
  2289                           
  2290                           ; 2 bytes @ 0x23
  2291  0000A3                     	ds	2
  2292  0000A5                     printf@val:
  2293                           	opt stack 0
  2294                           
  2295                           ; 2 bytes @ 0x25
  2296  0000A5                     	ds	2
  2297  0000A7                     printf@flag:
  2298                           	opt stack 0
  2299                           
  2300                           ; 1 bytes @ 0x27
  2301  0000A7                     	ds	1
  2302  0000A8                     printf@c:
  2303                           	opt stack 0
  2304                           
  2305                           ; 1 bytes @ 0x28
  2306  0000A8                     	ds	1
  2307  0000A9                     printf@width:
  2308                           	opt stack 0
  2309                           
  2310                           ; 2 bytes @ 0x29
  2311  0000A9                     	ds	2
  2312  0000AB                     ??_printRTC:
  2313  0000AB                     ??_ID:
  2314  0000AB                     ??_algorithmTest:
  2315  0000AB                     ??_sensorTest:
  2316  0000AB                     ??_actuatorTest:
  2317  0000AB                     ??_arm:
  2318  0000AB                     ??_PortTestDC:
  2319  0000AB                     ??_SpeedTest:
  2320  0000AB                     ??_PortTestPusher:
  2321  0000AB                     ??_PlatformTest:
  2322  0000AB                     ??_BothServos:
  2323  0000AB                     ??_BlockerTest:
  2324  0000AB                     EEPROM_write@address:
  2325                           	opt stack 0
  2326                           
  2327                           ; 2 bytes @ 0x2B
  2328  0000AB                     	ds	1
  2329  0000AC                     arm@on:
  2330                           	opt stack 0
  2331                           
  2332                           ; 2 bytes @ 0x2C
  2333  0000AC                     	ds	1
  2334  0000AD                     _ID$1142:
  2335                           	opt stack 0
  2336  0000AD                     EEPROM_write@data:
  2337                           	opt stack 0
  2338  0000AD                     actuatorTest@i_1735:
  2339                           	opt stack 0
  2340  0000AD                     sensorTest@res:
  2341                           	opt stack 0
  2342  0000AD                     PlatformTest@res:
  2343                           	opt stack 0
  2344  0000AD                     BlockerTest@i:
  2345                           	opt stack 0
  2346                           
  2347                           ; 2 bytes @ 0x2D
  2348  0000AD                     	ds	1
  2349  0000AE                     ??_EEPROM_write:
  2350  0000AE                     _ID$1144:
  2351                           	opt stack 0
  2352  0000AE                     actuatorTest@i_1742:
  2353                           	opt stack 0
  2354  0000AE                     printRTC@INT_time:
  2355                           	opt stack 0
  2356                           
  2357                           ; 14 bytes @ 0x2E
  2358  0000AE                     	ds	1
  2359  0000AF                     EEPROM_write@i:
  2360                           	opt stack 0
  2361  0000AF                     actuatorTest@i_1743:
  2362                           	opt stack 0
  2363  0000AF                     ID@i:
  2364                           	opt stack 0
  2365  0000AF                     PlatformTest@res_1787:
  2366                           	opt stack 0
  2367  0000AF                     BlockerTest@res:
  2368                           	opt stack 0
  2369                           
  2370                           ; 2 bytes @ 0x2F
  2371  0000AF                     	ds	1
  2372  0000B0                     EEPROM_write@i_1403:
  2373                           	opt stack 0
  2374  0000B0                     actuatorTest@i_1745:
  2375                           	opt stack 0
  2376                           
  2377                           ; 1 bytes @ 0x30
  2378  0000B0                     	ds	1
  2379  0000B1                     ??_Loading:
  2380  0000B1                     logRun@num:
  2381                           	opt stack 0
  2382  0000B1                     actuatorTest@i_1746:
  2383                           	opt stack 0
  2384  0000B1                     ID@i_1141:
  2385                           	opt stack 0
  2386  0000B1                     PlatformTest@i:
  2387                           	opt stack 0
  2388  0000B1                     BlockerTest@cam_flag:
  2389                           	opt stack 0
  2390                           
  2391                           ; 2 bytes @ 0x31
  2392  0000B1                     	ds	1
  2393  0000B2                     logRun@byte1:
  2394                           	opt stack 0
  2395  0000B2                     actuatorTest@i_1748:
  2396                           	opt stack 0
  2397                           
  2398                           ; 1 bytes @ 0x32
  2399  0000B2                     	ds	1
  2400  0000B3                     logRun@byte2:
  2401                           	opt stack 0
  2402  0000B3                     actuatorTest@i_1749:
  2403                           	opt stack 0
  2404  0000B3                     Loading@addr:
  2405                           	opt stack 0
  2406  0000B3                     ID@i_1143:
  2407                           	opt stack 0
  2408  0000B3                     PlatformTest@i_1791:
  2409                           	opt stack 0
  2410  0000B3                     BlockerTest@cond_flag:
  2411                           	opt stack 0
  2412                           
  2413                           ; 2 bytes @ 0x33
  2414  0000B3                     	ds	1
  2415  0000B4                     logRun@byte3:
  2416                           	opt stack 0
  2417  0000B4                     actuatorTest@i_1751:
  2418                           	opt stack 0
  2419                           
  2420                           ; 1 bytes @ 0x34
  2421  0000B4                     	ds	1
  2422  0000B5                     Loading@byte1:
  2423                           	opt stack 0
  2424  0000B5                     logRun@byte_i:
  2425                           	opt stack 0
  2426  0000B5                     actuatorTest@i_1752:
  2427                           	opt stack 0
  2428  0000B5                     ID@i_1146:
  2429                           	opt stack 0
  2430  0000B5                     PlatformTest@on:
  2431                           	opt stack 0
  2432                           
  2433                           ; 2 bytes @ 0x35
  2434  0000B5                     	ds	1
  2435  0000B6                     logRun@byte11:
  2436                           	opt stack 0
  2437  0000B6                     actuatorTest@i_1754:
  2438                           	opt stack 0
  2439  0000B6                     Loading@i_1118:
  2440                           	opt stack 0
  2441                           
  2442                           ; 2 bytes @ 0x36
  2443  0000B6                     	ds	1
  2444  0000B7                     actuatorTest@i_1755:
  2445                           	opt stack 0
  2446  0000B7                     ID@i_1147:
  2447                           	opt stack 0
  2448  0000B7                     logRun@i:
  2449                           	opt stack 0
  2450                           
  2451                           ; 2 bytes @ 0x37
  2452  0000B7                     	ds	1
  2453  0000B8                     actuatorTest@i_1757:
  2454                           	opt stack 0
  2455  0000B8                     Loading@i_1127:
  2456                           	opt stack 0
  2457                           
  2458                           ; 2 bytes @ 0x38
  2459  0000B8                     	ds	1
  2460  0000B9                     ID@time:
  2461                           	opt stack 0
  2462  0000B9                     actuatorTest@i_1758:
  2463                           	opt stack 0
  2464  0000B9                     logRun@addr:
  2465                           	opt stack 0
  2466                           
  2467                           ; 2 bytes @ 0x39
  2468  0000B9                     	ds	1
  2469  0000BA                     actuatorTest@i_1761:
  2470                           	opt stack 0
  2471  0000BA                     Loading@i_1129:
  2472                           	opt stack 0
  2473  0000BA                     ID@res1:
  2474                           	opt stack 0
  2475                           
  2476                           ; 2 bytes @ 0x3A
  2477  0000BA                     	ds	1
  2478  0000BB                     actuatorTest@i_1762:
  2479                           	opt stack 0
  2480                           
  2481                           ; 1 bytes @ 0x3B
  2482  0000BB                     	ds	1
  2483  0000BC                     actuatorTest@i_1764:
  2484                           	opt stack 0
  2485  0000BC                     printRTC@RTC_month:
  2486                           	opt stack 0
  2487  0000BC                     Loading@i_1130:
  2488                           	opt stack 0
  2489  0000BC                     ID@res2:
  2490                           	opt stack 0
  2491                           
  2492                           ; 2 bytes @ 0x3C
  2493  0000BC                     	ds	1
  2494  0000BD                     actuatorTest@i_1765:
  2495                           	opt stack 0
  2496                           
  2497                           ; 1 bytes @ 0x3D
  2498  0000BD                     	ds	1
  2499  0000BE                     actuatorTest@i_1767:
  2500                           	opt stack 0
  2501  0000BE                     Loading@i_1132:
  2502                           	opt stack 0
  2503  0000BE                     ID@res3:
  2504                           	opt stack 0
  2505  0000BE                     printRTC@month:
  2506                           	opt stack 0
  2507                           
  2508                           ; 4 bytes @ 0x3E
  2509  0000BE                     	ds	1
  2510  0000BF                     actuatorTest@i_1768:
  2511                           	opt stack 0
  2512                           
  2513                           ; 1 bytes @ 0x3F
  2514  0000BF                     	ds	1
  2515  0000C0                     actuatorTest@i_1771:
  2516                           	opt stack 0
  2517  0000C0                     Loading@i:
  2518                           	opt stack 0
  2519  0000C0                     ID@n:
  2520                           	opt stack 0
  2521                           
  2522                           ; 2 bytes @ 0x40
  2523  0000C0                     	ds	1
  2524  0000C1                     actuatorTest@i_1772:
  2525                           	opt stack 0
  2526                           
  2527                           ; 1 bytes @ 0x41
  2528  0000C1                     	ds	1
  2529  0000C2                     actuatorTest@i_1774:
  2530                           	opt stack 0
  2531  0000C2                     printRTC@i:
  2532                           	opt stack 0
  2533  0000C2                     Loading@j:
  2534                           	opt stack 0
  2535                           
  2536                           ; 2 bytes @ 0x42
  2537  0000C2                     	ds	1
  2538  0000C3                     actuatorTest@i_1775:
  2539                           	opt stack 0
  2540                           
  2541                           ; 1 bytes @ 0x43
  2542  0000C3                     	ds	1
  2543  0000C4                     ??_UI:
  2544  0000C4                     actuatorTest@i:
  2545                           	opt stack 0
  2546                           
  2547                           ; 2 bytes @ 0x44
  2548  0000C4                     	ds	2
  2549  0000C6                     ??_Test:
  2550  0000C6                     _UI$2429:
  2551                           	opt stack 0
  2552                           
  2553                           ; 2 bytes @ 0x46
  2554  0000C6                     	ds	2
  2555  0000C8                     UI@i:
  2556                           	opt stack 0
  2557                           
  2558                           ; 1 bytes @ 0x48
  2559  0000C8                     	ds	1
  2560  0000C9                     UI@i_412:
  2561                           	opt stack 0
  2562                           
  2563                           ; 1 bytes @ 0x49
  2564  0000C9                     	ds	1
  2565  0000CA                     UI@i_415:
  2566                           	opt stack 0
  2567                           
  2568                           ; 1 bytes @ 0x4A
  2569  0000CA                     	ds	1
  2570  0000CB                     UI@i_416:
  2571                           	opt stack 0
  2572                           
  2573                           ; 1 bytes @ 0x4B
  2574  0000CB                     	ds	1
  2575  0000CC                     UI@i_434:
  2576                           	opt stack 0
  2577                           
  2578                           ; 1 bytes @ 0x4C
  2579  0000CC                     	ds	1
  2580  0000CD                     UI@i_435:
  2581                           	opt stack 0
  2582                           
  2583                           ; 1 bytes @ 0x4D
  2584  0000CD                     	ds	1
  2585  0000CE                     UI@i_438:
  2586                           	opt stack 0
  2587                           
  2588                           ; 1 bytes @ 0x4E
  2589  0000CE                     	ds	1
  2590  0000CF                     UI@i_439:
  2591                           	opt stack 0
  2592                           
  2593                           ; 1 bytes @ 0x4F
  2594  0000CF                     	ds	1
  2595  0000D0                     UI@i_442:
  2596                           	opt stack 0
  2597                           
  2598                           ; 1 bytes @ 0x50
  2599  0000D0                     	ds	1
  2600  0000D1                     UI@i_443:
  2601                           	opt stack 0
  2602                           
  2603                           ; 1 bytes @ 0x51
  2604  0000D1                     	ds	1
  2605  0000D2                     UI@i_446:
  2606                           	opt stack 0
  2607                           
  2608                           ; 1 bytes @ 0x52
  2609  0000D2                     	ds	1
  2610  0000D3                     UI@i_447:
  2611                           	opt stack 0
  2612                           
  2613                           ; 1 bytes @ 0x53
  2614  0000D3                     	ds	1
  2615  0000D4                     UI@i_450:
  2616                           	opt stack 0
  2617                           
  2618                           ; 1 bytes @ 0x54
  2619  0000D4                     	ds	1
  2620  0000D5                     UI@i_451:
  2621                           	opt stack 0
  2622                           
  2623                           ; 1 bytes @ 0x55
  2624  0000D5                     	ds	1
  2625  0000D6                     UI@month:
  2626                           	opt stack 0
  2627                           
  2628                           ; 4 bytes @ 0x56
  2629  0000D6                     	ds	4
  2630  0000DA                     tblptru	equ	0xFF8
  2631                           tblptrh	equ	0xFF7
  2632                           tblptrl	equ	0xFF6
  2633                           tablat	equ	0xFF5
  2634                           postinc0	equ	0xFEE
  2635                           wreg	equ	0xFE8
  2636                           postdec1	equ	0xFE5
  2637                           fsr1l	equ	0xFE1
  2638                           
  2639                           ; 1 bytes @ 0x5A
  2640                           
  2641                           	psect	cstackCOMRAM
  2642  000001                     __pcstackCOMRAM:
  2643                           	opt stack 0
  2644  000001                     ??_updateArmState:
  2645  000001                     ??i2_I2C_Master_Wait:
  2646  000001                     ??i2_delay_ms:
  2647  000001                     ??i2_isdigit:
  2648  000001                     ?i2___wmul:
  2649                           	opt stack 0
  2650  000001                     ?i2___lwmod:
  2651                           	opt stack 0
  2652  000001                     i2lcdNibble@temp:
  2653                           	opt stack 0
  2654  000001                     i2updateServoPosition@time_us:
  2655                           	opt stack 0
  2656  000001                     i2EEPROM_read@address:
  2657                           	opt stack 0
  2658  000001                     i2___wmul@multiplier:
  2659                           	opt stack 0
  2660  000001                     i2___lwmod@dividend:
  2661                           	opt stack 0
  2662  000001                     i2strcpy@to:
  2663                           	opt stack 0
  2664                           
  2665                           ; 2 bytes @ 0x0
  2666  000001                     	ds	1
  2667  000002                     i2I2C_Master_Read@a:
  2668                           	opt stack 0
  2669  000002                     i2lcdNibble@data:
  2670                           	opt stack 0
  2671  000002                     i2delay_ms@milliseconds:
  2672                           	opt stack 0
  2673  000002                     i2_isdigit$2064:
  2674                           	opt stack 0
  2675  000002                     i2I2C_Master_Write@d:
  2676                           	opt stack 0
  2677                           
  2678                           ; 2 bytes @ 0x1
  2679  000002                     	ds	1
  2680  000003                     i2I2C_Master_Read@temp:
  2681                           	opt stack 0
  2682  000003                     i2lcdInst@data:
  2683                           	opt stack 0
  2684  000003                     i2putch@data:
  2685                           	opt stack 0
  2686  000003                     i2isdigit@c:
  2687                           	opt stack 0
  2688  000003                     i2updateServoPosition@timer:
  2689                           	opt stack 0
  2690  000003                     i2___wmul@multiplicand:
  2691                           	opt stack 0
  2692  000003                     i2___lwmod@divisor:
  2693                           	opt stack 0
  2694  000003                     i2strcpy@from:
  2695                           	opt stack 0
  2696                           
  2697                           ; 2 bytes @ 0x2
  2698  000003                     	ds	1
  2699  000004                     i2getRTC@i:
  2700                           	opt stack 0
  2701                           
  2702                           ; 2 bytes @ 0x3
  2703  000004                     	ds	1
  2704  000005                     ??i2_updateServoPosition:
  2705  000005                     i2___lwmod@counter:
  2706                           	opt stack 0
  2707  000005                     i2___wmul@product:
  2708                           	opt stack 0
  2709  000005                     i2strcpy@cp:
  2710                           	opt stack 0
  2711                           
  2712                           ; 2 bytes @ 0x4
  2713  000005                     	ds	1
  2714  000006                     ?i2___lwdiv:
  2715                           	opt stack 0
  2716  000006                     i2___lwdiv@dividend:
  2717                           	opt stack 0
  2718                           
  2719                           ; 2 bytes @ 0x5
  2720  000006                     	ds	1
  2721  000007                     retrieveLog@logNum:
  2722                           	opt stack 0
  2723  000007                     i2updateServoPosition@my_time:
  2724                           	opt stack 0
  2725                           
  2726                           ; 2 bytes @ 0x6
  2727  000007                     	ds	1
  2728  000008                     i2___lwdiv@divisor:
  2729                           	opt stack 0
  2730                           
  2731                           ; 2 bytes @ 0x7
  2732  000008                     	ds	1
  2733  000009                     ??_retrieveLog:
  2734  000009                     ??_updateServoStates:
  2735                           
  2736                           ; 1 bytes @ 0x8
  2737  000009                     	ds	1
  2738  00000A                     i2___lwdiv@quotient:
  2739                           	opt stack 0
  2740                           
  2741                           ; 2 bytes @ 0x9
  2742  00000A                     	ds	1
  2743  00000B                     retrieveLog@byte1:
  2744                           	opt stack 0
  2745                           
  2746                           ; 1 bytes @ 0xA
  2747  00000B                     	ds	1
  2748  00000C                     retrieveLog@byte2:
  2749                           	opt stack 0
  2750  00000C                     i2___lwdiv@counter:
  2751                           	opt stack 0
  2752                           
  2753                           ; 1 bytes @ 0xB
  2754  00000C                     	ds	1
  2755  00000D                     ?i2_printf:
  2756                           	opt stack 0
  2757  00000D                     retrieveLog@byte3:
  2758                           	opt stack 0
  2759  00000D                     i2printf@f:
  2760                           	opt stack 0
  2761                           
  2762                           ; 2 bytes @ 0xC
  2763  00000D                     	ds	1
  2764  00000E                     retrieveLog@i:
  2765                           	opt stack 0
  2766                           
  2767                           ; 2 bytes @ 0xD
  2768  00000E                     	ds	2
  2769  000010                     retrieveLog@addr:
  2770                           	opt stack 0
  2771                           
  2772                           ; 2 bytes @ 0xF
  2773  000010                     	ds	2
  2774  000012                     dispLogs@myLog:
  2775                           	opt stack 0
  2776                           
  2777                           ; 2 bytes @ 0x11
  2778  000012                     	ds	2
  2779  000014                     
  2780                           ; 1 bytes @ 0x13
  2781  000014                     	ds	5
  2782  000019                     ??i2_printf:
  2783                           
  2784                           ; 1 bytes @ 0x18
  2785  000019                     	ds	4
  2786  00001D                     i2printf@prec:
  2787                           	opt stack 0
  2788                           
  2789                           ; 1 bytes @ 0x1C
  2790  00001D                     	ds	1
  2791  00001E                     i2printf@cp:
  2792                           	opt stack 0
  2793                           
  2794                           ; 2 bytes @ 0x1D
  2795  00001E                     	ds	2
  2796  000020                     i2printf@ap:
  2797                           	opt stack 0
  2798                           
  2799                           ; 2 bytes @ 0x1F
  2800  000020                     	ds	2
  2801  000022                     i2printf@len:
  2802                           	opt stack 0
  2803                           
  2804                           ; 2 bytes @ 0x21
  2805  000022                     	ds	2
  2806  000024                     i2printf@val:
  2807                           	opt stack 0
  2808                           
  2809                           ; 2 bytes @ 0x23
  2810  000024                     	ds	2
  2811  000026                     i2printf@flag:
  2812                           	opt stack 0
  2813                           
  2814                           ; 1 bytes @ 0x25
  2815  000026                     	ds	1
  2816  000027                     i2printf@c:
  2817                           	opt stack 0
  2818                           
  2819                           ; 1 bytes @ 0x26
  2820  000027                     	ds	1
  2821  000028                     i2printf@width:
  2822                           	opt stack 0
  2823                           
  2824                           ; 2 bytes @ 0x27
  2825  000028                     	ds	2
  2826  00002A                     ??_printSortTimer:
  2827  00002A                     ??i2_printRTC:
  2828  00002A                     ?_inputHandler:
  2829                           	opt stack 0
  2830                           
  2831                           ; 2 bytes @ 0x29
  2832  00002A                     	ds	2
  2833  00002C                     ??_inputHandler:
  2834                           
  2835                           ; 1 bytes @ 0x2B
  2836  00002C                     	ds	1
  2837  00002D                     printSortTimer@curTime:
  2838                           	opt stack 0
  2839  00002D                     i2printRTC@INT_time:
  2840                           	opt stack 0
  2841                           
  2842                           ; 14 bytes @ 0x2C
  2843  00002D                     	ds	14
  2844  00003B                     printSortTimer@start_sec:
  2845                           	opt stack 0
  2846  00003B                     i2printRTC@RTC_month:
  2847                           	opt stack 0
  2848                           
  2849                           ; 2 bytes @ 0x3A
  2850  00003B                     	ds	2
  2851  00003D                     printSortTimer@cur_sec:
  2852                           	opt stack 0
  2853  00003D                     i2printRTC@month:
  2854                           	opt stack 0
  2855                           
  2856                           ; 4 bytes @ 0x3C
  2857  00003D                     	ds	2
  2858  00003F                     printSortTimer@min:
  2859                           	opt stack 0
  2860                           
  2861                           ; 2 bytes @ 0x3E
  2862  00003F                     	ds	2
  2863  000041                     printSortTimer@sec:
  2864                           	opt stack 0
  2865  000041                     i2printRTC@i:
  2866                           	opt stack 0
  2867                           
  2868                           ; 2 bytes @ 0x40
  2869  000041                     	ds	2
  2870  000043                     ??_updateMenu:
  2871  000043                     _printSortTimer$2561:
  2872                           	opt stack 0
  2873                           
  2874                           ; 2 bytes @ 0x42
  2875  000043                     	ds	2
  2876  000045                     printSortTimer@timeDiff:
  2877                           	opt stack 0
  2878                           
  2879                           ; 2 bytes @ 0x44
  2880  000045                     	ds	2
  2881  000047                     printSortTimer@i_1163:
  2882                           	opt stack 0
  2883                           
  2884                           ; 2 bytes @ 0x46
  2885  000047                     	ds	2
  2886  000049                     printSortTimer@i:
  2887                           	opt stack 0
  2888                           
  2889                           ; 2 bytes @ 0x48
  2890  000049                     	ds	2
  2891  00004B                     ??_handler:
  2892                           
  2893                           ; 1 bytes @ 0x4A
  2894  00004B                     	ds	16
  2895                           tblptru	equ	0xFF8
  2896                           tblptrh	equ	0xFF7
  2897                           tblptrl	equ	0xFF6
  2898                           tablat	equ	0xFF5
  2899                           postinc0	equ	0xFEE
  2900                           wreg	equ	0xFE8
  2901                           postdec1	equ	0xFE5
  2902                           fsr1l	equ	0xFE1
  2903                           
  2904 ;;
  2905 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2906 ;;
  2907 ;; *************** function _main *****************
  2908 ;; Defined at:
  2909 ;;		line 19 in file "main.c"
  2910 ;; Parameters:    Size  Location     Type
  2911 ;;		None
  2912 ;; Auto vars:     Size  Location     Type
  2913 ;;		None
  2914 ;; Return value:  Size  Location     Type
  2915 ;;                  1    wreg      void 
  2916 ;; Registers used:
  2917 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2918 ;; Tracked objects:
  2919 ;;		On entry : 0/0
  2920 ;;		On exit  : 0/0
  2921 ;;		Unchanged: 0/0
  2922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2923 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2924 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2925 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2926 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2927 ;;Total ram usage:        0 bytes
  2928 ;; Hardware stack levels required when called:   13
  2929 ;; This function calls:
  2930 ;;		_I2C_Master_Init
  2931 ;;		_Test
  2932 ;;		_UI
  2933 ;;		_initEEPROM
  2934 ;;		_initLCD
  2935 ;;		_initTime
  2936 ;;		_initUI
  2937 ;;		_logRun
  2938 ;;		_machineConfig
  2939 ;;		_sort
  2940 ;;		_stopSignals
  2941 ;; This function is called by:
  2942 ;;		Startup code after reset
  2943 ;; This function uses a non-reentrant model
  2944 ;;
  2945                           
  2946                           	psect	text0
  2947  0047B6                     __ptext0:
  2948                           	opt stack 0
  2949  0047B6                     _main:
  2950                           	opt stack 18
  2951                           
  2952                           ;main.c: 20: machineConfig();
  2953                           
  2954                           ;incstack = 0
  2955  0047B6  ECC6  F028         	call	_machineConfig	;wreg free
  2956                           
  2957                           ;main.c: 21: initLCD();
  2958  0047BA  ECA4  F02A         	call	_initLCD	;wreg free
  2959                           
  2960                           ;main.c: 24: RTCflag = 0;
  2961  0047BE  0E00               	movlw	0
  2962  0047C0  0100               	movlb	0	; () banked
  2963  0047C2  6FE5               	movwf	(_RTCflag+1)& (0+255),b
  2964  0047C4  0E00               	movlw	0
  2965  0047C6  6FE4               	movwf	_RTCflag& (0+255),b
  2966                           
  2967                           ;main.c: 25: if(RTCflag){
  2968  0047C8  0100               	movlb	0	; () banked
  2969  0047CA  51E4               	movf	_RTCflag& (0+255),w,b
  2970  0047CC  0100               	movlb	0	; () banked
  2971  0047CE  11E5               	iorwf	(_RTCflag+1)& (0+255),w,b
  2972  0047D0  B4D8               	btfsc	status,2,c
  2973  0047D2  D016               	goto	l10126
  2974                           
  2975                           ; BSR set to: 0
  2976                           ;main.c: 26: initTime(0x42, 0x47, 0x17, 0x07, 0x08, 0x04, 0x17);
  2977  0047D4  0E47               	movlw	71
  2978  0047D6  0100               	movlb	0	; () banked
  2979  0047D8  6F80               	movwf	initTime@m& (0+255),b
  2980  0047DA  0E17               	movlw	23
  2981  0047DC  0100               	movlb	0	; () banked
  2982  0047DE  6F81               	movwf	initTime@h& (0+255),b
  2983  0047E0  0E07               	movlw	7
  2984  0047E2  0100               	movlb	0	; () banked
  2985  0047E4  6F82               	movwf	initTime@w& (0+255),b
  2986  0047E6  0E08               	movlw	8
  2987  0047E8  0100               	movlb	0	; () banked
  2988  0047EA  6F83               	movwf	initTime@DD& (0+255),b
  2989  0047EC  0E04               	movlw	4
  2990  0047EE  0100               	movlb	0	; () banked
  2991  0047F0  6F84               	movwf	initTime@MM& (0+255),b
  2992  0047F2  0E17               	movlw	23
  2993  0047F4  0100               	movlb	0	; () banked
  2994  0047F6  6F85               	movwf	initTime@YY& (0+255),b
  2995  0047F8  0E42               	movlw	66
  2996  0047FA  EC97  F02D         	call	_initTime
  2997                           
  2998                           ;main.c: 27: }
  2999  0047FE  D00B               	goto	l10128
  3000  004800                     l10126:
  3001                           
  3002                           ;main.c: 28: else{
  3003                           ;main.c: 29: I2C_Master_Init(10000);
  3004  004800  0E10               	movlw	16
  3005  004802  0100               	movlb	0	; () banked
  3006  004804  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  3007  004806  0E27               	movlw	39
  3008  004808  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  3009  00480A  0E00               	movlw	0
  3010  00480C  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  3011  00480E  0E00               	movlw	0
  3012  004810  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  3013  004812  EC29  F029         	call	_I2C_Master_Init	;wreg free
  3014  004816                     l10128:
  3015                           
  3016                           ;main.c: 30: }
  3017                           ;main.c: 32: initUI();
  3018  004816  ECC7  F02B         	call	_initUI	;wreg free
  3019                           
  3020                           ;main.c: 33: first = 1;
  3021  00481A  0E00               	movlw	0
  3022  00481C  0101               	movlb	1	; () banked
  3023  00481E  6F3A               	movwf	(_first+1)& (0+255),b
  3024  004820  0E01               	movlw	1
  3025  004822  6F39               	movwf	_first& (0+255),b
  3026                           
  3027                           ; BSR set to: 1
  3028                           ;main.c: 34: initEEPROM();
  3029  004824  ECDF  F02D         	call	_initEEPROM	;wreg free
  3030                           
  3031                           ;main.c: 45: switch(machine_state){
  3032                           
  3033                           ;main.c: 44: while(1){
  3034  004828  D01A               	goto	l10154
  3035  00482A                     l10134:
  3036                           
  3037                           ;main.c: 47: UI();
  3038  00482A  EC09  F000         	call	_UI	;wreg free
  3039                           
  3040                           ;main.c: 48: break;
  3041  00482E  D017               	goto	l10154
  3042  004830                     l10136:
  3043                           
  3044                           ;main.c: 50: sort();
  3045  004830  EC86  F02D         	call	_sort	;wreg free
  3046                           
  3047                           ;main.c: 51: break;
  3048  004834  D014               	goto	l10154
  3049  004836                     l10138:
  3050                           
  3051                           ;main.c: 53: stopSignals();
  3052  004836  ECB7  F02D         	call	_stopSignals	;wreg free
  3053                           
  3054                           ;main.c: 54: logRun();
  3055  00483A  ECCE  F01F         	call	_logRun	;wreg free
  3056                           
  3057                           ;main.c: 55: first = 1;
  3058  00483E  0E00               	movlw	0
  3059  004840  0101               	movlb	1	; () banked
  3060  004842  6F3A               	movwf	(_first+1)& (0+255),b
  3061  004844  0E01               	movlw	1
  3062  004846  6F39               	movwf	_first& (0+255),b
  3063                           
  3064                           ; BSR set to: 1
  3065                           ;main.c: 56: initLCD();
  3066  004848  ECA4  F02A         	call	_initLCD	;wreg free
  3067                           
  3068                           ;main.c: 57: UI();
  3069  00484C  EC09  F000         	call	_UI	;wreg free
  3070                           
  3071                           ;main.c: 58: break;
  3072  004850  D006               	goto	l10154
  3073  004852                     l10148:
  3074                           
  3075                           ;main.c: 60: Test();
  3076  004852  EC89  F021         	call	_Test	;wreg free
  3077                           
  3078                           ;main.c: 61: break;
  3079  004856  D003               	goto	l10154
  3080  004858                     l10150:
  3081                           
  3082                           ;main.c: 63: stopSignals();
  3083  004858  ECB7  F02D         	call	_stopSignals	;wreg free
  3084  00485C                     l508:
  3085  00485C  D7FF               	goto	l508
  3086  00485E                     l10154:
  3087  00485E  0100               	movlb	0	; () banked
  3088  004860  51FC               	movf	_machine_state& (0+255),w,b
  3089                           
  3090                           ; Switch size 1, requested type "space"
  3091                           ; Number of cases is 5, Range of values is 0 to 4
  3092                           ; switch strategies available:
  3093                           ; Name         Instructions Cycles
  3094                           ; simple_byte           16     9 (average)
  3095                           ;	Chosen strategy is simple_byte
  3096  004862  0A00               	xorlw	0	; case 0
  3097  004864  B4D8               	btfsc	status,2,c
  3098  004866  D7E1               	goto	l10134
  3099  004868  0A01               	xorlw	1	; case 1
  3100  00486A  B4D8               	btfsc	status,2,c
  3101  00486C  D7E1               	goto	l10136
  3102  00486E  0A03               	xorlw	3	; case 2
  3103  004870  B4D8               	btfsc	status,2,c
  3104  004872  D7E1               	goto	l10138
  3105  004874  0A01               	xorlw	1	; case 3
  3106  004876  B4D8               	btfsc	status,2,c
  3107  004878  D7EC               	goto	l10148
  3108  00487A  0A07               	xorlw	7	; case 4
  3109  00487C  B4D8               	btfsc	status,2,c
  3110  00487E  D7EC               	goto	l10150
  3111                           
  3112                           ; BSR set to: 0
  3113                           
  3114                           ; BSR set to: 0
  3115  004880  D7EE               	goto	l10154
  3116  004882                     __end_of_main:
  3117                           	opt stack 0
  3118                           tblptru	equ	0xFF8
  3119                           tblptrh	equ	0xFF7
  3120                           tblptrl	equ	0xFF6
  3121                           tablat	equ	0xFF5
  3122                           postinc0	equ	0xFEE
  3123                           wreg	equ	0xFE8
  3124                           postdec1	equ	0xFE5
  3125                           fsr1l	equ	0xFE1
  3126                           status	equ	0xFD8
  3127                           
  3128 ;; *************** function _sort *****************
  3129 ;; Defined at:
  3130 ;;		line 67 in file "sort.c"
  3131 ;; Parameters:    Size  Location     Type
  3132 ;;		None
  3133 ;; Auto vars:     Size  Location     Type
  3134 ;;		None
  3135 ;; Return value:  Size  Location     Type
  3136 ;;                  1    wreg      void 
  3137 ;; Registers used:
  3138 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3139 ;; Tracked objects:
  3140 ;;		On entry : 0/0
  3141 ;;		On exit  : 0/0
  3142 ;;		Unchanged: 0/0
  3143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3144 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3145 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3146 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3147 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3148 ;;Total ram usage:        0 bytes
  3149 ;; Hardware stack levels used:    1
  3150 ;; Hardware stack levels required when called:   12
  3151 ;; This function calls:
  3152 ;;		_Distribution
  3153 ;;		_ID
  3154 ;;		_Loading
  3155 ;; This function is called by:
  3156 ;;		_main
  3157 ;; This function uses a non-reentrant model
  3158 ;;
  3159                           
  3160                           	psect	text1
  3161  005B0C                     __ptext1:
  3162                           	opt stack 0
  3163  005B0C                     _sort:
  3164                           	opt stack 18
  3165                           
  3166                           ;sort.c: 68: if(machine_state == Sorting_state){
  3167                           
  3168                           ; BSR set to: 0
  3169                           ;incstack = 0
  3170  005B0C  0100               	movlb	0	; () banked
  3171  005B0E  05FC               	decf	_machine_state& (0+255),w,b
  3172  005B10  B4D8               	btfsc	status,2,c
  3173                           
  3174                           ; BSR set to: 0
  3175                           ;sort.c: 69: Loading();
  3176  005B12  ECC9  F008         	call	_Loading	;wreg free
  3177                           
  3178                           ;sort.c: 70: }
  3179                           ;sort.c: 71: if(machine_state == Sorting_state){
  3180  005B16  0100               	movlb	0	; () banked
  3181  005B18  05FC               	decf	_machine_state& (0+255),w,b
  3182  005B1A  B4D8               	btfsc	status,2,c
  3183                           
  3184                           ; BSR set to: 0
  3185                           ;sort.c: 72: ID();
  3186  005B1C  ECC3  F00B         	call	_ID	;wreg free
  3187                           
  3188                           ;sort.c: 73: }
  3189                           ;sort.c: 74: if(machine_state == Sorting_state){
  3190  005B20  0100               	movlb	0	; () banked
  3191  005B22  05FC               	decf	_machine_state& (0+255),w,b
  3192  005B24  A4D8               	btfss	status,2,c
  3193  005B26  0012               	return	
  3194                           
  3195                           ; BSR set to: 0
  3196                           ;sort.c: 75: Distribution();
  3197  005B28  ECFF  F022         	call	_Distribution	;wreg free
  3198  005B2C  0012               	return	
  3199  005B2E                     __end_of_sort:
  3200                           	opt stack 0
  3201                           tblptru	equ	0xFF8
  3202                           tblptrh	equ	0xFF7
  3203                           tblptrl	equ	0xFF6
  3204                           tablat	equ	0xFF5
  3205                           postinc0	equ	0xFEE
  3206                           wreg	equ	0xFE8
  3207                           postdec1	equ	0xFE5
  3208                           fsr1l	equ	0xFE1
  3209                           status	equ	0xFD8
  3210                           
  3211 ;; *************** function _Loading *****************
  3212 ;; Defined at:
  3213 ;;		line 79 in file "sort.c"
  3214 ;; Parameters:    Size  Location     Type
  3215 ;;		None
  3216 ;; Auto vars:     Size  Location     Type
  3217 ;;  i               2   62[BANK0 ] int 
  3218 ;;  i               2   60[BANK0 ] int 
  3219 ;;  i               2   58[BANK0 ] int 
  3220 ;;  i               2   56[BANK0 ] int 
  3221 ;;  i               2   54[BANK0 ] int 
  3222 ;;  j               2   66[BANK0 ] int 
  3223 ;;  i               2   64[BANK0 ] int 
  3224 ;;  addr            2   51[BANK0 ] unsigned short 
  3225 ;;  byte1           1   53[BANK0 ] unsigned char 
  3226 ;; Return value:  Size  Location     Type
  3227 ;;                  1    wreg      void 
  3228 ;; Registers used:
  3229 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3230 ;; Tracked objects:
  3231 ;;		On entry : 0/0
  3232 ;;		On exit  : 0/0
  3233 ;;		Unchanged: 0/0
  3234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3235 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3236 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3237 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3238 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3239 ;;Total ram usage:       19 bytes
  3240 ;; Hardware stack levels used:    1
  3241 ;; Hardware stack levels required when called:   11
  3242 ;; This function calls:
  3243 ;;		_EEPROM_read
  3244 ;;		_EEPROM_write
  3245 ;;		_delay_ms
  3246 ;;		_getIR
  3247 ;;		_getMAG
  3248 ;;		_initGlobalVars
  3249 ;;		_initServos
  3250 ;;		_initSortTimer
  3251 ;;		_lcdInst
  3252 ;;		_readIR
  3253 ;; This function is called by:
  3254 ;;		_sort
  3255 ;; This function uses a non-reentrant model
  3256 ;;
  3257                           
  3258                           	psect	text2
  3259  001192                     __ptext2:
  3260                           	opt stack 0
  3261  001192                     _Loading:
  3262                           	opt stack 18
  3263                           
  3264                           ;sort.c: 80: if(first){
  3265                           
  3266                           ;incstack = 0
  3267  001192  0101               	movlb	1	; () banked
  3268  001194  5139               	movf	_first& (0+255),w,b
  3269  001196  0101               	movlb	1	; () banked
  3270  001198  113A               	iorwf	(_first+1)& (0+255),w,b
  3271  00119A  B4D8               	btfsc	status,2,c
  3272  00119C  D066               	goto	l7834
  3273                           
  3274                           ; BSR set to: 1
  3275                           ;sort.c: 81: initGlobalVars();
  3276  00119E  ECA5  F024         	call	_initGlobalVars	;wreg free
  3277                           
  3278                           ;sort.c: 82: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  3279  0011A2  0E01               	movlw	1
  3280  0011A4  EC10  F02E         	call	_lcdInst
  3281  0011A8  0E68               	movlw	104
  3282  0011AA  0100               	movlb	0	; () banked
  3283  0011AC  6FB1               	movwf	??_Loading& (0+255),b
  3284  0011AE  0EE4               	movlw	228
  3285  0011B0                     u9817:
  3286  0011B0  2EE8               	decfsz	wreg,f,c
  3287  0011B2  D7FE               	bra	u9817
  3288  0011B4  2FB1               	decfsz	??_Loading& (0+255),f,b
  3289  0011B6  D7FC               	bra	u9817
  3290  0011B8  F000               	nop	
  3291                           
  3292                           ;sort.c: 83: initSortTimer();
  3293  0011BA  ECC2  F025         	call	_initSortTimer	;wreg free
  3294                           
  3295                           ;sort.c: 84: LATCbits.LATC5 = 1;
  3296  0011BE  8A8B               	bsf	3979,5,c	;volatile
  3297                           
  3298                           ;sort.c: 89: sel = EEPROM_read(0);
  3299  0011C0  0E00               	movlw	0
  3300  0011C2  0100               	movlb	0	; () banked
  3301  0011C4  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  3302  0011C6  0E00               	movlw	0
  3303  0011C8  6F80               	movwf	EEPROM_read@address& (0+255),b
  3304  0011CA  ECD3  F02D         	call	_EEPROM_read	;wreg free
  3305  0011CE  0100               	movlb	0	; () banked
  3306  0011D0  6FFD               	movwf	_sel& (0+255),b
  3307                           
  3308                           ; BSR set to: 0
  3309                           ;sort.c: 90: unsigned short addr = 1 + 11 * sel;
  3310  0011D2  0100               	movlb	0	; () banked
  3311  0011D4  51FD               	movf	_sel& (0+255),w,b
  3312  0011D6  0D0B               	mullw	11
  3313  0011D8  0E01               	movlw	1
  3314  0011DA  24F3               	addwf	prodl,w,c
  3315  0011DC  0100               	movlb	0	; () banked
  3316  0011DE  6FB3               	movwf	Loading@addr& (0+255),b
  3317  0011E0  0E00               	movlw	0
  3318  0011E2  20F4               	addwfc	prodh,w,c
  3319  0011E4  0100               	movlb	0	; () banked
  3320  0011E6  6FB4               	movwf	(Loading@addr+1)& (0+255),b
  3321                           
  3322                           ; BSR set to: 0
  3323                           ;sort.c: 91: unsigned char byte1 = 0b01111111;
  3324  0011E8  0E7F               	movlw	127
  3325  0011EA  0100               	movlb	0	; () banked
  3326  0011EC  6FB5               	movwf	Loading@byte1& (0+255),b
  3327                           
  3328                           ; BSR set to: 0
  3329                           ;sort.c: 92: EEPROM_write(addr, byte1);
  3330  0011EE  C0B3  F0AB         	movff	Loading@addr,EEPROM_write@address
  3331  0011F2  C0B4  F0AC         	movff	Loading@addr+1,EEPROM_write@address+1
  3332  0011F6  C0B5  F0AD         	movff	Loading@byte1,EEPROM_write@data
  3333  0011FA  EC8B  F022         	call	_EEPROM_write	;wreg free
  3334                           
  3335                           ;sort.c: 95: LATBbits.LATB2 = 0;
  3336  0011FE  948A               	bcf	3978,2,c	;volatile
  3337                           
  3338                           ;sort.c: 97: for(int i=0; i<46; i++){
  3339  001200  0E00               	movlw	0
  3340  001202  0100               	movlb	0	; () banked
  3341  001204  6FC1               	movwf	(Loading@i+1)& (0+255),b
  3342  001206  0E00               	movlw	0
  3343  001208  6FC0               	movwf	Loading@i& (0+255),b
  3344                           
  3345                           ; BSR set to: 0
  3346  00120A  0100               	movlb	0	; () banked
  3347  00120C  BFC1               	btfsc	(Loading@i+1)& (0+255),7,b
  3348  00120E  D008               	goto	l7824
  3349  001210  0100               	movlb	0	; () banked
  3350  001212  51C1               	movf	(Loading@i+1)& (0+255),w,b
  3351  001214  E126               	bnz	l785
  3352  001216  0E2E               	movlw	46
  3353  001218  0100               	movlb	0	; () banked
  3354  00121A  5DC0               	subwf	Loading@i& (0+255),w,b
  3355  00121C  B0D8               	btfsc	status,0,c
  3356  00121E  D021               	goto	l785
  3357  001220                     l7824:
  3358                           
  3359                           ; BSR set to: 0
  3360                           ;sort.c: 98: LATBbits.LATB2 = !LATBbits.LATB2;
  3361  001220  B48A               	btfsc	3978,2,c	;volatile
  3362  001222  D004               	goto	u6420
  3363  001224  0100               	movlb	0	; () banked
  3364  001226  6BB1               	clrf	??_Loading& (0+255),b
  3365  001228  2BB1               	incf	??_Loading& (0+255),f,b
  3366  00122A  D002               	goto	u6438
  3367  00122C                     u6420:
  3368  00122C  0100               	movlb	0	; () banked
  3369  00122E  6BB1               	clrf	??_Loading& (0+255),b
  3370  001230                     u6438:
  3371  001230  0100               	movlb	0	; () banked
  3372  001232  47B1               	rlncf	??_Loading& (0+255),f,b
  3373  001234  47B1               	rlncf	??_Loading& (0+255),f,b
  3374  001236  508A               	movf	3978,w,c	;volatile
  3375  001238  0100               	movlb	0	; () banked
  3376  00123A  19B1               	xorwf	??_Loading& (0+255),w,b
  3377  00123C  0BFB               	andlw	-5
  3378  00123E  19B1               	xorwf	??_Loading& (0+255),w,b
  3379  001240  6E8A               	movwf	3978,c	;volatile
  3380                           
  3381                           ; BSR set to: 0
  3382                           ;sort.c: 99: delay_ms(45-i);
  3383  001242  0100               	movlb	0	; () banked
  3384  001244  51C0               	movf	Loading@i& (0+255),w,b
  3385  001246  0800               	sublw	0
  3386  001248  0F2D               	addlw	45
  3387  00124A  EC26  F02D         	call	_delay_ms
  3388  00124E  0100               	movlb	0	; () banked
  3389  001250  4BC0               	infsnz	Loading@i& (0+255),f,b
  3390  001252  2BC1               	incf	(Loading@i+1)& (0+255),f,b
  3391                           
  3392                           ; BSR set to: 0
  3393  001254  0100               	movlb	0	; () banked
  3394  001256  BFC1               	btfsc	(Loading@i+1)& (0+255),7,b
  3395  001258  D7E3               	goto	l7824
  3396  00125A  0100               	movlb	0	; () banked
  3397  00125C  51C1               	movf	(Loading@i+1)& (0+255),w,b
  3398  00125E  E101               	bnz	u6440
  3399  001260  D7DA               	goto	L1
  3400  001262                     u6440:
  3401  001262                     l785:
  3402                           
  3403                           ; BSR set to: 0
  3404                           ;sort.c: 100: }
  3405                           ;sort.c: 101: LATBbits.LATB2 = 1;
  3406  001262  848A               	bsf	3978,2,c	;volatile
  3407                           
  3408                           ; BSR set to: 0
  3409                           ;sort.c: 104: initServos();
  3410  001264  EC72  F027         	call	_initServos	;wreg free
  3411                           
  3412                           ;sort.c: 105: }
  3413  001268  0012               	return	
  3414  00126A                     l7834:
  3415                           
  3416                           ;sort.c: 106: else{
  3417                           ;sort.c: 109: if(!f_loadingNewCan){
  3418  00126A  0100               	movlb	0	; () banked
  3419  00126C  51EC               	movf	_f_loadingNewCan& (0+255),w,b
  3420  00126E  0100               	movlb	0	; () banked
  3421  001270  11ED               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3422  001272  A4D8               	btfss	status,2,c
  3423  001274  D018               	goto	l7850
  3424                           
  3425                           ; BSR set to: 0
  3426                           ;sort.c: 111: getIR();
  3427  001276  ECEA  F027         	call	_getIR	;wreg free
  3428                           
  3429                           ;sort.c: 113: if(!f_loadingNewCan){
  3430  00127A  0100               	movlb	0	; () banked
  3431  00127C  51EC               	movf	_f_loadingNewCan& (0+255),w,b
  3432  00127E  0100               	movlb	0	; () banked
  3433  001280  11ED               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3434  001282  B4D8               	btfsc	status,2,c
  3435  001284  0012               	return	
  3436                           
  3437                           ; BSR set to: 0
  3438                           ;sort.c: 117: else{
  3439                           ;sort.c: 118: count_total++;
  3440                           
  3441                           ; BSR set to: 0
  3442                           
  3443                           ; BSR set to: 0
  3444                           ;sort.c: 115: }
  3445                           
  3446                           ; BSR set to: 0
  3447                           ;sort.c: 114: return;
  3448  001286  0100               	movlb	0	; () banked
  3449  001288  4BFE               	infsnz	_count_total& (0+255),f,b
  3450  00128A  2BFF               	incf	(_count_total+1)& (0+255),f,b
  3451                           
  3452                           ; BSR set to: 0
  3453                           ;sort.c: 119: if(count_total == 12){
  3454  00128C  0E0C               	movlw	12
  3455  00128E  0100               	movlb	0	; () banked
  3456  001290  19FE               	xorwf	_count_total& (0+255),w,b
  3457  001292  0100               	movlb	0	; () banked
  3458  001294  11FF               	iorwf	(_count_total+1)& (0+255),w,b
  3459  001296  A4D8               	btfss	status,2,c
  3460  001298  0012               	return	
  3461                           
  3462                           ; BSR set to: 0
  3463                           ;sort.c: 120: f_lastCan = 1;
  3464  00129A  0E00               	movlw	0
  3465  00129C  0100               	movlb	0	; () banked
  3466  00129E  6FEB               	movwf	(_f_lastCan+1)& (0+255),b
  3467  0012A0  0E01               	movlw	1
  3468  0012A2  6FEA               	movwf	_f_lastCan& (0+255),b
  3469                           
  3470                           ; BSR set to: 0
  3471                           ;sort.c: 121: }
  3472                           ;sort.c: 122: }
  3473                           ;sort.c: 123: }
  3474                           
  3475                           ; BSR set to: 0
  3476  0012A4  0012               	return	
  3477  0012A6                     l7850:
  3478                           
  3479                           ; BSR set to: 0
  3480                           ;sort.c: 126: else if(f_ID_receive){
  3481  0012A6  0101               	movlb	1	; () banked
  3482  0012A8  512F               	movf	_f_ID_receive& (0+255),w,b
  3483  0012AA  0101               	movlb	1	; () banked
  3484  0012AC  1130               	iorwf	(_f_ID_receive+1)& (0+255),w,b
  3485  0012AE  B4D8               	btfsc	status,2,c
  3486  0012B0  0012               	return	
  3487                           
  3488                           ; BSR set to: 1
  3489                           ;sort.c: 127: f_most_recent_sort_time = 1;
  3490  0012B2  0E00               	movlw	0
  3491  0012B4  0101               	movlb	1	; () banked
  3492  0012B6  6F38               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
  3493  0012B8  0E01               	movlw	1
  3494  0012BA  6F37               	movwf	_f_most_recent_sort_time& (0+255),b
  3495                           
  3496                           ;sort.c: 128: f_loadingNewCan = 0;
  3497  0012BC  0E00               	movlw	0
  3498  0012BE  0100               	movlb	0	; () banked
  3499  0012C0  6FED               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3500  0012C2  0E00               	movlw	0
  3501  0012C4  6FEC               	movwf	_f_loadingNewCan& (0+255),b
  3502                           
  3503                           ; BSR set to: 0
  3504                           ;sort.c: 129: _delay((unsigned long)((400)*(32000000/4000.0)));
  3505  0012C6  0E11               	movlw	17
  3506  0012C8  0100               	movlb	0	; () banked
  3507  0012CA  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3508  0012CC  0E3C               	movlw	60
  3509  0012CE  0100               	movlb	0	; () banked
  3510  0012D0  6FB1               	movwf	??_Loading& (0+255),b
  3511  0012D2  0ECB               	movlw	203
  3512  0012D4                     u9827:
  3513  0012D4  2EE8               	decfsz	wreg,f,c
  3514  0012D6  D7FE               	bra	u9827
  3515  0012D8  2FB1               	decfsz	??_Loading& (0+255),f,b
  3516  0012DA  D7FC               	bra	u9827
  3517  0012DC  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3518  0012DE  D7FA               	bra	u9827
  3519                           
  3520                           ;sort.c: 130: LATBbits.LATB2 = 0;
  3521  0012E0  948A               	bcf	3978,2,c	;volatile
  3522                           
  3523                           ;sort.c: 134: f_arm_position = 1;
  3524  0012E2  0E00               	movlw	0
  3525  0012E4  0100               	movlb	0	; () banked
  3526  0012E6  6FE9               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  3527  0012E8  0E01               	movlw	1
  3528  0012EA  6FE8               	movwf	_f_arm_position& (0+255),b	;volatile
  3529                           
  3530                           ; BSR set to: 0
  3531                           ;sort.c: 136: delay_ms(750);
  3532  0012EC  0EEE               	movlw	238
  3533  0012EE  EC26  F02D         	call	_delay_ms
  3534                           
  3535                           ;sort.c: 137: getMAG();
  3536  0012F2  EC95  F02B         	call	_getMAG	;wreg free
  3537                           
  3538                           ;sort.c: 138: sensor_outputs[0] = MAG_signal;
  3539  0012F6  C0E2  F0DA         	movff	_MAG_signal,_sensor_outputs
  3540  0012FA  C0E3  F0DB         	movff	_MAG_signal+1,_sensor_outputs+1
  3541                           
  3542                           ;sort.c: 140: if(sensor_outputs[0]){
  3543  0012FE  0100               	movlb	0	; () banked
  3544  001300  51DA               	movf	_sensor_outputs& (0+255),w,b
  3545  001302  0100               	movlb	0	; () banked
  3546  001304  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3547  001306  B4D8               	btfsc	status,2,c
  3548  001308  D027               	goto	l7880
  3549                           
  3550                           ; BSR set to: 0
  3551                           ;sort.c: 141: for(int i = 0; i<25; i++){
  3552  00130A  0E00               	movlw	0
  3553  00130C  0100               	movlb	0	; () banked
  3554  00130E  6FB7               	movwf	(Loading@i_1118+1)& (0+255),b
  3555  001310  0E00               	movlw	0
  3556  001312  6FB6               	movwf	Loading@i_1118& (0+255),b
  3557  001314                     l7870:
  3558                           
  3559                           ; BSR set to: 0
  3560  001314  0100               	movlb	0	; () banked
  3561  001316  BFB7               	btfsc	(Loading@i_1118+1)& (0+255),7,b
  3562  001318  D008               	goto	l795
  3563  00131A  0100               	movlb	0	; () banked
  3564  00131C  51B7               	movf	(Loading@i_1118+1)& (0+255),w,b
  3565  00131E  E143               	bnz	l7892
  3566  001320  0E19               	movlw	25
  3567  001322  0100               	movlb	0	; () banked
  3568  001324  5DB6               	subwf	Loading@i_1118& (0+255),w,b
  3569  001326  B0D8               	btfsc	status,0,c
  3570  001328  D03E               	goto	l7892
  3571  00132A                     l795:
  3572                           
  3573                           ; BSR set to: 0
  3574                           ;sort.c: 142: LATAbits.LATA4 = 1;
  3575  00132A  8889               	bsf	3977,4,c	;volatile
  3576                           
  3577                           ; BSR set to: 0
  3578                           ;sort.c: 143: _delay((unsigned long)((7500)*(32000000/4000000.0)));
  3579  00132C  0E4E               	movlw	78
  3580  00132E  0100               	movlb	0	; () banked
  3581  001330  6FB1               	movwf	??_Loading& (0+255),b
  3582  001332  0EEB               	movlw	235
  3583  001334                     u9837:
  3584  001334  2EE8               	decfsz	wreg,f,c
  3585  001336  D7FE               	bra	u9837
  3586  001338  2FB1               	decfsz	??_Loading& (0+255),f,b
  3587  00133A  D7FC               	bra	u9837
  3588                           
  3589                           ;sort.c: 144: LATAbits.LATA4 = 0;
  3590  00133C  9889               	bcf	3977,4,c	;volatile
  3591                           
  3592                           ;sort.c: 145: _delay((unsigned long)((2500)*(32000000/4000000.0)));
  3593  00133E  0E1A               	movlw	26
  3594  001340  0100               	movlb	0	; () banked
  3595  001342  6FB1               	movwf	??_Loading& (0+255),b
  3596  001344  0EF8               	movlw	248
  3597  001346                     u9847:
  3598  001346  2EE8               	decfsz	wreg,f,c
  3599  001348  D7FE               	bra	u9847
  3600  00134A  2FB1               	decfsz	??_Loading& (0+255),f,b
  3601  00134C  D7FC               	bra	u9847
  3602  00134E  F000               	nop	
  3603  001350  0100               	movlb	0	; () banked
  3604  001352  4BB6               	infsnz	Loading@i_1118& (0+255),f,b
  3605  001354  2BB7               	incf	(Loading@i_1118+1)& (0+255),f,b
  3606  001356  D7DE               	goto	l7870
  3607  001358                     l7880:
  3608                           
  3609                           ; BSR set to: 0
  3610                           ;sort.c: 148: else{
  3611                           ;sort.c: 149: for(int i = 0; i<25; i++){
  3612  001358  0E00               	movlw	0
  3613  00135A  0100               	movlb	0	; () banked
  3614  00135C  6FB9               	movwf	(Loading@i_1127+1)& (0+255),b
  3615  00135E  0E00               	movlw	0
  3616  001360  6FB8               	movwf	Loading@i_1127& (0+255),b
  3617  001362                     l7882:
  3618                           
  3619                           ; BSR set to: 0
  3620  001362  0100               	movlb	0	; () banked
  3621  001364  BFB9               	btfsc	(Loading@i_1127+1)& (0+255),7,b
  3622  001366  D008               	goto	l798
  3623  001368  0100               	movlb	0	; () banked
  3624  00136A  51B9               	movf	(Loading@i_1127+1)& (0+255),w,b
  3625  00136C  E11C               	bnz	l7892
  3626  00136E  0E19               	movlw	25
  3627  001370  0100               	movlb	0	; () banked
  3628  001372  5DB8               	subwf	Loading@i_1127& (0+255),w,b
  3629  001374  B0D8               	btfsc	status,0,c
  3630  001376  D017               	goto	l7892
  3631  001378                     l798:
  3632                           
  3633                           ; BSR set to: 0
  3634                           ;sort.c: 150: LATAbits.LATA4 = 1;
  3635  001378  8889               	bsf	3977,4,c	;volatile
  3636                           
  3637                           ; BSR set to: 0
  3638                           ;sort.c: 151: _delay((unsigned long)((5800)*(32000000/4000000.0)));
  3639  00137A  0E3D               	movlw	61
  3640  00137C  0100               	movlb	0	; () banked
  3641  00137E  6FB1               	movwf	??_Loading& (0+255),b
  3642  001380  0E41               	movlw	65
  3643  001382                     u9857:
  3644  001382  2EE8               	decfsz	wreg,f,c
  3645  001384  D7FE               	bra	u9857
  3646  001386  2FB1               	decfsz	??_Loading& (0+255),f,b
  3647  001388  D7FC               	bra	u9857
  3648                           
  3649                           ;sort.c: 152: LATAbits.LATA4 = 0;
  3650  00138A  9889               	bcf	3977,4,c	;volatile
  3651                           
  3652                           ;sort.c: 153: _delay((unsigned long)((4200)*(32000000/4000000.0)));
  3653  00138C  0E2C               	movlw	44
  3654  00138E  0100               	movlb	0	; () banked
  3655  001390  6FB1               	movwf	??_Loading& (0+255),b
  3656  001392  0EA1               	movlw	161
  3657  001394                     u9867:
  3658  001394  2EE8               	decfsz	wreg,f,c
  3659  001396  D7FE               	bra	u9867
  3660  001398  2FB1               	decfsz	??_Loading& (0+255),f,b
  3661  00139A  D7FC               	bra	u9867
  3662  00139C  D000               	nop2	
  3663  00139E  0100               	movlb	0	; () banked
  3664  0013A0  4BB8               	infsnz	Loading@i_1127& (0+255),f,b
  3665  0013A2  2BB9               	incf	(Loading@i_1127+1)& (0+255),f,b
  3666  0013A4  D7DE               	goto	l7882
  3667  0013A6                     l7892:
  3668                           
  3669                           ; BSR set to: 0
  3670                           ;sort.c: 154: }
  3671                           ;sort.c: 155: }
  3672                           ;sort.c: 157: _delay((unsigned long)((350)*(32000000/4000.0)));
  3673  0013A6  0E0F               	movlw	15
  3674  0013A8  0100               	movlb	0	; () banked
  3675  0013AA  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3676  0013AC  0E35               	movlw	53
  3677  0013AE  0100               	movlb	0	; () banked
  3678  0013B0  6FB1               	movwf	??_Loading& (0+255),b
  3679  0013B2  0E51               	movlw	81
  3680  0013B4                     u9877:
  3681  0013B4  2EE8               	decfsz	wreg,f,c
  3682  0013B6  D7FE               	bra	u9877
  3683  0013B8  2FB1               	decfsz	??_Loading& (0+255),f,b
  3684  0013BA  D7FC               	bra	u9877
  3685  0013BC  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3686  0013BE  D7FA               	bra	u9877
  3687                           
  3688                           ;sort.c: 159: readIR();
  3689  0013C0  EC32  F02A         	call	_readIR	;wreg free
  3690                           
  3691                           ;sort.c: 160: if(IR_signal){
  3692  0013C4  0100               	movlb	0	; () banked
  3693  0013C6  51E0               	movf	_IR_signal& (0+255),w,b
  3694  0013C8  0100               	movlb	0	; () banked
  3695  0013CA  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  3696  0013CC  B4D8               	btfsc	status,2,c
  3697  0013CE  D1D5               	goto	l8020
  3698                           
  3699                           ; BSR set to: 0
  3700                           ;sort.c: 161: _delay((unsigned long)((70)*(32000000/4000.0)));
  3701  0013D0  0E03               	movlw	3
  3702  0013D2  0100               	movlb	0	; () banked
  3703  0013D4  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3704  0013D6  0ED8               	movlw	216
  3705  0013D8  0100               	movlb	0	; () banked
  3706  0013DA  6FB1               	movwf	??_Loading& (0+255),b
  3707  0013DC  0E41               	movlw	65
  3708  0013DE                     u9887:
  3709  0013DE  2EE8               	decfsz	wreg,f,c
  3710  0013E0  D7FE               	bra	u9887
  3711  0013E2  2FB1               	decfsz	??_Loading& (0+255),f,b
  3712  0013E4  D7FC               	bra	u9887
  3713  0013E6  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3714  0013E8  D7FA               	bra	u9887
  3715  0013EA  D000               	nop2	
  3716                           
  3717                           ;sort.c: 162: readIR();
  3718  0013EC  EC32  F02A         	call	_readIR	;wreg free
  3719                           
  3720                           ;sort.c: 163: if(IR_signal){
  3721  0013F0  0100               	movlb	0	; () banked
  3722  0013F2  51E0               	movf	_IR_signal& (0+255),w,b
  3723  0013F4  0100               	movlb	0	; () banked
  3724  0013F6  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  3725  0013F8  B4D8               	btfsc	status,2,c
  3726  0013FA  D054               	goto	l7930
  3727                           
  3728                           ; BSR set to: 0
  3729                           ;sort.c: 164: if(sensor_outputs[0]){
  3730  0013FC  0100               	movlb	0	; () banked
  3731  0013FE  51DA               	movf	_sensor_outputs& (0+255),w,b
  3732  001400  0100               	movlb	0	; () banked
  3733  001402  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3734  001404  B4D8               	btfsc	status,2,c
  3735  001406  D027               	goto	l7918
  3736                           
  3737                           ; BSR set to: 0
  3738                           ;sort.c: 165: for(int i = 0; i<25; i++){
  3739  001408  0E00               	movlw	0
  3740  00140A  0100               	movlb	0	; () banked
  3741  00140C  6FBB               	movwf	(Loading@i_1129+1)& (0+255),b
  3742  00140E  0E00               	movlw	0
  3743  001410  6FBA               	movwf	Loading@i_1129& (0+255),b
  3744  001412                     l7908:
  3745                           
  3746                           ; BSR set to: 0
  3747  001412  0100               	movlb	0	; () banked
  3748  001414  BFBB               	btfsc	(Loading@i_1129+1)& (0+255),7,b
  3749  001416  D008               	goto	l803
  3750  001418  0100               	movlb	0	; () banked
  3751  00141A  51BB               	movf	(Loading@i_1129+1)& (0+255),w,b
  3752  00141C  E143               	bnz	l7930
  3753  00141E  0E19               	movlw	25
  3754  001420  0100               	movlb	0	; () banked
  3755  001422  5DBA               	subwf	Loading@i_1129& (0+255),w,b
  3756  001424  B0D8               	btfsc	status,0,c
  3757  001426  D03E               	goto	l7930
  3758  001428                     l803:
  3759                           
  3760                           ; BSR set to: 0
  3761                           ;sort.c: 166: LATAbits.LATA4 = 1;
  3762  001428  8889               	bsf	3977,4,c	;volatile
  3763                           
  3764                           ; BSR set to: 0
  3765                           ;sort.c: 167: _delay((unsigned long)((7500)*(32000000/4000000.0)));
  3766  00142A  0E4E               	movlw	78
  3767  00142C  0100               	movlb	0	; () banked
  3768  00142E  6FB1               	movwf	??_Loading& (0+255),b
  3769  001430  0EEB               	movlw	235
  3770  001432                     u9897:
  3771  001432  2EE8               	decfsz	wreg,f,c
  3772  001434  D7FE               	bra	u9897
  3773  001436  2FB1               	decfsz	??_Loading& (0+255),f,b
  3774  001438  D7FC               	bra	u9897
  3775                           
  3776                           ;sort.c: 168: LATAbits.LATA4 = 0;
  3777  00143A  9889               	bcf	3977,4,c	;volatile
  3778                           
  3779                           ;sort.c: 169: _delay((unsigned long)((2500)*(32000000/4000000.0)));
  3780  00143C  0E1A               	movlw	26
  3781  00143E  0100               	movlb	0	; () banked
  3782  001440  6FB1               	movwf	??_Loading& (0+255),b
  3783  001442  0EF8               	movlw	248
  3784  001444                     u9907:
  3785  001444  2EE8               	decfsz	wreg,f,c
  3786  001446  D7FE               	bra	u9907
  3787  001448  2FB1               	decfsz	??_Loading& (0+255),f,b
  3788  00144A  D7FC               	bra	u9907
  3789  00144C  F000               	nop	
  3790  00144E  0100               	movlb	0	; () banked
  3791  001450  4BBA               	infsnz	Loading@i_1129& (0+255),f,b
  3792  001452  2BBB               	incf	(Loading@i_1129+1)& (0+255),f,b
  3793  001454  D7DE               	goto	l7908
  3794  001456                     l7918:
  3795                           
  3796                           ; BSR set to: 0
  3797                           ;sort.c: 172: else{
  3798                           ;sort.c: 173: for(int i = 0; i<25; i++){
  3799  001456  0E00               	movlw	0
  3800  001458  0100               	movlb	0	; () banked
  3801  00145A  6FBD               	movwf	(Loading@i_1130+1)& (0+255),b
  3802  00145C  0E00               	movlw	0
  3803  00145E  6FBC               	movwf	Loading@i_1130& (0+255),b
  3804  001460                     l7920:
  3805                           
  3806                           ; BSR set to: 0
  3807  001460  0100               	movlb	0	; () banked
  3808  001462  BFBD               	btfsc	(Loading@i_1130+1)& (0+255),7,b
  3809  001464  D008               	goto	l806
  3810  001466  0100               	movlb	0	; () banked
  3811  001468  51BD               	movf	(Loading@i_1130+1)& (0+255),w,b
  3812  00146A  E11C               	bnz	l7930
  3813  00146C  0E19               	movlw	25
  3814  00146E  0100               	movlb	0	; () banked
  3815  001470  5DBC               	subwf	Loading@i_1130& (0+255),w,b
  3816  001472  B0D8               	btfsc	status,0,c
  3817  001474  D017               	goto	l7930
  3818  001476                     l806:
  3819                           
  3820                           ; BSR set to: 0
  3821                           ;sort.c: 174: LATAbits.LATA4 = 1;
  3822  001476  8889               	bsf	3977,4,c	;volatile
  3823                           
  3824                           ; BSR set to: 0
  3825                           ;sort.c: 175: _delay((unsigned long)((5800)*(32000000/4000000.0)));
  3826  001478  0E3D               	movlw	61
  3827  00147A  0100               	movlb	0	; () banked
  3828  00147C  6FB1               	movwf	??_Loading& (0+255),b
  3829  00147E  0E41               	movlw	65
  3830  001480                     u9917:
  3831  001480  2EE8               	decfsz	wreg,f,c
  3832  001482  D7FE               	bra	u9917
  3833  001484  2FB1               	decfsz	??_Loading& (0+255),f,b
  3834  001486  D7FC               	bra	u9917
  3835                           
  3836                           ;sort.c: 176: LATAbits.LATA4 = 0;
  3837  001488  9889               	bcf	3977,4,c	;volatile
  3838                           
  3839                           ;sort.c: 177: _delay((unsigned long)((4200)*(32000000/4000000.0)));
  3840  00148A  0E2C               	movlw	44
  3841  00148C  0100               	movlb	0	; () banked
  3842  00148E  6FB1               	movwf	??_Loading& (0+255),b
  3843  001490  0EA1               	movlw	161
  3844  001492                     u9927:
  3845  001492  2EE8               	decfsz	wreg,f,c
  3846  001494  D7FE               	bra	u9927
  3847  001496  2FB1               	decfsz	??_Loading& (0+255),f,b
  3848  001498  D7FC               	bra	u9927
  3849  00149A  D000               	nop2	
  3850  00149C  0100               	movlb	0	; () banked
  3851  00149E  4BBC               	infsnz	Loading@i_1130& (0+255),f,b
  3852  0014A0  2BBD               	incf	(Loading@i_1130+1)& (0+255),f,b
  3853  0014A2  D7DE               	goto	l7920
  3854  0014A4                     l7930:
  3855                           
  3856                           ; BSR set to: 0
  3857                           ;sort.c: 178: }
  3858                           ;sort.c: 179: }
  3859                           ;sort.c: 180: }
  3860                           ;sort.c: 182: _delay((unsigned long)((350)*(32000000/4000.0)));
  3861  0014A4  0E0F               	movlw	15
  3862  0014A6  0100               	movlb	0	; () banked
  3863  0014A8  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3864  0014AA  0E35               	movlw	53
  3865  0014AC  0100               	movlb	0	; () banked
  3866  0014AE  6FB1               	movwf	??_Loading& (0+255),b
  3867  0014B0  0E51               	movlw	81
  3868  0014B2                     u9937:
  3869  0014B2  2EE8               	decfsz	wreg,f,c
  3870  0014B4  D7FE               	bra	u9937
  3871  0014B6  2FB1               	decfsz	??_Loading& (0+255),f,b
  3872  0014B8  D7FC               	bra	u9937
  3873  0014BA  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3874  0014BC  D7FA               	bra	u9937
  3875                           
  3876                           ;sort.c: 184: int j = 0;
  3877  0014BE  0E00               	movlw	0
  3878  0014C0  0100               	movlb	0	; () banked
  3879  0014C2  6FC3               	movwf	(Loading@j+1)& (0+255),b
  3880  0014C4  0E00               	movlw	0
  3881  0014C6  6FC2               	movwf	Loading@j& (0+255),b
  3882                           
  3883                           ;sort.c: 185: while(IR_signal){
  3884  0014C8  D151               	goto	l8018
  3885  0014CA                     l7934:
  3886                           
  3887                           ; BSR set to: 0
  3888                           ;sort.c: 186: readIR();
  3889  0014CA  EC32  F02A         	call	_readIR	;wreg free
  3890                           
  3891                           ;sort.c: 187: if(j == 3 || j == 4){
  3892  0014CE  0E03               	movlw	3
  3893  0014D0  0100               	movlb	0	; () banked
  3894  0014D2  19C2               	xorwf	Loading@j& (0+255),w,b
  3895  0014D4  0100               	movlb	0	; () banked
  3896  0014D6  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3897  0014D8  B4D8               	btfsc	status,2,c
  3898  0014DA  D007               	goto	l7940
  3899                           
  3900                           ; BSR set to: 0
  3901  0014DC  0E04               	movlw	4
  3902  0014DE  0100               	movlb	0	; () banked
  3903  0014E0  19C2               	xorwf	Loading@j& (0+255),w,b
  3904  0014E2  0100               	movlb	0	; () banked
  3905  0014E4  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3906  0014E6  A4D8               	btfss	status,2,c
  3907  0014E8  D005               	goto	l7942
  3908  0014EA                     l7940:
  3909                           
  3910                           ; BSR set to: 0
  3911                           ;sort.c: 188: f_arm_position = 0;
  3912  0014EA  0E00               	movlw	0
  3913  0014EC  0100               	movlb	0	; () banked
  3914  0014EE  6FE9               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  3915  0014F0  0E00               	movlw	0
  3916  0014F2  D022               	goto	L2
  3917  0014F4                     l7942:
  3918                           
  3919                           ; BSR set to: 0
  3920                           ;sort.c: 190: else if(j == 5 || j == 6){
  3921  0014F4  0E05               	movlw	5
  3922  0014F6  0100               	movlb	0	; () banked
  3923  0014F8  19C2               	xorwf	Loading@j& (0+255),w,b
  3924  0014FA  0100               	movlb	0	; () banked
  3925  0014FC  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3926  0014FE  B4D8               	btfsc	status,2,c
  3927  001500  D007               	goto	l816
  3928                           
  3929                           ; BSR set to: 0
  3930  001502  0E06               	movlw	6
  3931  001504  0100               	movlb	0	; () banked
  3932  001506  19C2               	xorwf	Loading@j& (0+255),w,b
  3933  001508  0100               	movlb	0	; () banked
  3934  00150A  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3935  00150C  A4D8               	btfss	status,2,c
  3936  00150E  D002               	goto	l7946
  3937  001510                     l816:
  3938                           
  3939                           ; BSR set to: 0
  3940                           ;sort.c: 191: LATBbits.LATB2 = 1;
  3941  001510  848A               	bsf	3978,2,c	;volatile
  3942                           
  3943                           ;sort.c: 192: }
  3944  001512  D034               	goto	l813
  3945  001514                     l7946:
  3946                           
  3947                           ; BSR set to: 0
  3948                           ;sort.c: 193: else if(j == 7 || j == 8){
  3949  001514  0E07               	movlw	7
  3950  001516  0100               	movlb	0	; () banked
  3951  001518  19C2               	xorwf	Loading@j& (0+255),w,b
  3952  00151A  0100               	movlb	0	; () banked
  3953  00151C  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3954  00151E  B4D8               	btfsc	status,2,c
  3955  001520  D007               	goto	l7950
  3956                           
  3957                           ; BSR set to: 0
  3958  001522  0E08               	movlw	8
  3959  001524  0100               	movlb	0	; () banked
  3960  001526  19C2               	xorwf	Loading@j& (0+255),w,b
  3961  001528  0100               	movlb	0	; () banked
  3962  00152A  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3963  00152C  A4D8               	btfss	status,2,c
  3964  00152E  D006               	goto	l818
  3965  001530                     l7950:
  3966                           
  3967                           ; BSR set to: 0
  3968                           ;sort.c: 194: f_arm_position = 1;
  3969  001530  0E00               	movlw	0
  3970  001532  0100               	movlb	0	; () banked
  3971  001534  6FE9               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  3972  001536  0E01               	movlw	1
  3973  001538                     L2:
  3974  001538  6FE8               	movwf	_f_arm_position& (0+255),b	;volatile
  3975                           
  3976                           ;sort.c: 195: }
  3977  00153A  D020               	goto	l813
  3978  00153C                     l818:
  3979                           
  3980                           ; BSR set to: 0
  3981                           ;sort.c: 196: else if(j % 2 == 0){
  3982  00153C  0100               	movlb	0	; () banked
  3983  00153E  B1C2               	btfsc	Loading@j& (0+255),0,b
  3984  001540  D01D               	goto	l813
  3985                           
  3986                           ; BSR set to: 0
  3987                           ;sort.c: 197: LATBbits.LATB2 = !LATBbits.LATB2;
  3988  001542  B48A               	btfsc	3978,2,c	;volatile
  3989  001544  D004               	goto	u6680
  3990  001546  0100               	movlb	0	; () banked
  3991  001548  6BB1               	clrf	??_Loading& (0+255),b
  3992  00154A  2BB1               	incf	??_Loading& (0+255),f,b
  3993  00154C  D002               	goto	u6698
  3994  00154E                     u6680:
  3995  00154E  0100               	movlb	0	; () banked
  3996  001550  6BB1               	clrf	??_Loading& (0+255),b
  3997  001552                     u6698:
  3998  001552  0100               	movlb	0	; () banked
  3999  001554  47B1               	rlncf	??_Loading& (0+255),f,b
  4000  001556  47B1               	rlncf	??_Loading& (0+255),f,b
  4001  001558  508A               	movf	3978,w,c	;volatile
  4002  00155A  0100               	movlb	0	; () banked
  4003  00155C  19B1               	xorwf	??_Loading& (0+255),w,b
  4004  00155E  0BFB               	andlw	-5
  4005  001560  19B1               	xorwf	??_Loading& (0+255),w,b
  4006  001562  6E8A               	movwf	3978,c	;volatile
  4007                           
  4008                           ;sort.c: 198: f_arm_position = !f_arm_position;
  4009  001564  0100               	movlb	0	; () banked
  4010  001566  51E8               	movf	_f_arm_position& (0+255),w,b	;volatile
  4011  001568  0100               	movlb	0	; () banked
  4012  00156A  11E9               	iorwf	(_f_arm_position+1)& (0+255),w,b	;volatile
  4013  00156C  A4D8               	btfss	status,2,c
  4014  00156E  D002               	goto	u6700
  4015  001570  0E01               	movlw	1
  4016  001572  D001               	goto	u6710
  4017  001574                     u6700:
  4018  001574  0E00               	movlw	0
  4019  001576                     u6710:
  4020  001576  0100               	movlb	0	; () banked
  4021  001578  6FE8               	movwf	_f_arm_position& (0+255),b	;volatile
  4022  00157A  6BE9               	clrf	(_f_arm_position+1)& (0+255),b	;volatile
  4023  00157C                     l813:
  4024                           
  4025                           ; BSR set to: 0
  4026                           ;sort.c: 199: }
  4027                           ;sort.c: 202: if(IR_signal){
  4028  00157C  0100               	movlb	0	; () banked
  4029  00157E  51E0               	movf	_IR_signal& (0+255),w,b
  4030  001580  0100               	movlb	0	; () banked
  4031  001582  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  4032  001584  B4D8               	btfsc	status,2,c
  4033  001586  D0D6               	goto	l8006
  4034                           
  4035                           ; BSR set to: 0
  4036                           ;sort.c: 203: _delay((unsigned long)((350)*(32000000/4000.0)));
  4037  001588  0E0F               	movlw	15
  4038  00158A  0100               	movlb	0	; () banked
  4039  00158C  6FB2               	movwf	(??_Loading+1)& (0+255),b
  4040  00158E  0E35               	movlw	53
  4041  001590  0100               	movlb	0	; () banked
  4042  001592  6FB1               	movwf	??_Loading& (0+255),b
  4043  001594  0E51               	movlw	81
  4044  001596                     u9947:
  4045  001596  2EE8               	decfsz	wreg,f,c
  4046  001598  D7FE               	bra	u9947
  4047  00159A  2FB1               	decfsz	??_Loading& (0+255),f,b
  4048  00159C  D7FC               	bra	u9947
  4049  00159E  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  4050  0015A0  D7FA               	bra	u9947
  4051                           
  4052                           ;sort.c: 204: readIR();
  4053  0015A2  EC32  F02A         	call	_readIR	;wreg free
  4054                           
  4055                           ;sort.c: 205: if(IR_signal){
  4056  0015A6  0100               	movlb	0	; () banked
  4057  0015A8  51E0               	movf	_IR_signal& (0+255),w,b
  4058  0015AA  0100               	movlb	0	; () banked
  4059  0015AC  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  4060  0015AE  B4D8               	btfsc	status,2,c
  4061  0015B0  D0BD               	goto	l824
  4062                           
  4063                           ; BSR set to: 0
  4064                           ;sort.c: 206: if(sensor_outputs[0]){
  4065  0015B2  0100               	movlb	0	; () banked
  4066  0015B4  51DA               	movf	_sensor_outputs& (0+255),w,b
  4067  0015B6  0100               	movlb	0	; () banked
  4068  0015B8  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  4069  0015BA  B4D8               	btfsc	status,2,c
  4070  0015BC  D011               	goto	l7968
  4071                           
  4072                           ; BSR set to: 0
  4073                           ;sort.c: 207: LATAbits.LATA4 = 1;
  4074  0015BE  8889               	bsf	3977,4,c	;volatile
  4075                           
  4076                           ; BSR set to: 0
  4077                           ;sort.c: 208: _delay((unsigned long)((250)*(32000000/4000.0)));
  4078  0015C0  0E0B               	movlw	11
  4079  0015C2  0100               	movlb	0	; () banked
  4080  0015C4  6FB2               	movwf	(??_Loading+1)& (0+255),b
  4081  0015C6  0E26               	movlw	38
  4082  0015C8  0100               	movlb	0	; () banked
  4083  0015CA  6FB1               	movwf	??_Loading& (0+255),b
  4084  0015CC  0E5D               	movlw	93
  4085  0015CE                     u9957:
  4086  0015CE  2EE8               	decfsz	wreg,f,c
  4087  0015D0  D7FE               	bra	u9957
  4088  0015D2  2FB1               	decfsz	??_Loading& (0+255),f,b
  4089  0015D4  D7FC               	bra	u9957
  4090  0015D6  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  4091  0015D8  D7FA               	bra	u9957
  4092  0015DA  D000               	nop2	
  4093                           
  4094                           ;sort.c: 209: LATAbits.LATA4 = 0;
  4095  0015DC  9889               	bcf	3977,4,c	;volatile
  4096                           
  4097                           ;sort.c: 210: }
  4098  0015DE  D0A6               	goto	l824
  4099  0015E0                     l7968:
  4100                           
  4101                           ;sort.c: 211: else{
  4102                           ;sort.c: 212: for(int i = 0; i<25; i++){
  4103  0015E0  0E00               	movlw	0
  4104  0015E2  0100               	movlb	0	; () banked
  4105  0015E4  6FBF               	movwf	(Loading@i_1132+1)& (0+255),b
  4106  0015E6  0E00               	movlw	0
  4107  0015E8  6FBE               	movwf	Loading@i_1132& (0+255),b
  4108                           
  4109                           ; BSR set to: 0
  4110  0015EA  0100               	movlb	0	; () banked
  4111  0015EC  BFBF               	btfsc	(Loading@i_1132+1)& (0+255),7,b
  4112  0015EE  D079               	goto	l7998
  4113  0015F0  0100               	movlb	0	; () banked
  4114  0015F2  51BF               	movf	(Loading@i_1132+1)& (0+255),w,b
  4115  0015F4  E106               	bnz	u6750
  4116  0015F6  0E19               	movlw	25
  4117  0015F8  0100               	movlb	0	; () banked
  4118  0015FA  5DBE               	subwf	Loading@i_1132& (0+255),w,b
  4119  0015FC  B0D8               	btfsc	status,0,c
  4120  0015FE  D096               	goto	l824
  4121  001600  D070               	goto	l7998
  4122  001602                     u6750:
  4123                           
  4124                           ; BSR set to: 0
  4125  001602  D094               	goto	l824
  4126  001604                     l830:
  4127                           
  4128                           ; BSR set to: 0
  4129                           ;sort.c: 215: LATAbits.LATA4 = 1;
  4130  001604  8889               	bsf	3977,4,c	;volatile
  4131                           
  4132                           ; BSR set to: 0
  4133                           ;sort.c: 216: _delay((unsigned long)((7500)*(32000000/4000000.0)));
  4134  001606  0E4E               	movlw	78
  4135  001608  0100               	movlb	0	; () banked
  4136  00160A  6FB1               	movwf	??_Loading& (0+255),b
  4137  00160C  0EEB               	movlw	235
  4138  00160E                     u9967:
  4139  00160E  2EE8               	decfsz	wreg,f,c
  4140  001610  D7FE               	bra	u9967
  4141  001612  2FB1               	decfsz	??_Loading& (0+255),f,b
  4142  001614  D7FC               	bra	u9967
  4143                           
  4144                           ;sort.c: 217: LATAbits.LATA4 = 0;
  4145  001616  9889               	bcf	3977,4,c	;volatile
  4146                           
  4147                           ;sort.c: 218: _delay((unsigned long)((2500)*(32000000/4000000.0)));
  4148  001618  0E1A               	movlw	26
  4149  00161A  0100               	movlb	0	; () banked
  4150  00161C  6FB1               	movwf	??_Loading& (0+255),b
  4151  00161E  0EF8               	movlw	248
  4152  001620                     u9977:
  4153  001620  2EE8               	decfsz	wreg,f,c
  4154  001622  D7FE               	bra	u9977
  4155  001624  2FB1               	decfsz	??_Loading& (0+255),f,b
  4156  001626  D7FC               	bra	u9977
  4157  001628  D05A               	goto	L6
  4158  00162A                     l832:
  4159                           
  4160                           ; BSR set to: 0
  4161                           ;sort.c: 221: LATAbits.LATA4 = 1;
  4162  00162A  8889               	bsf	3977,4,c	;volatile
  4163                           
  4164                           ; BSR set to: 0
  4165                           ;sort.c: 222: _delay((unsigned long)((8000)*(32000000/4000000.0)));
  4166  00162C  0E54               	movlw	84
  4167  00162E  0100               	movlb	0	; () banked
  4168  001630  6FB1               	movwf	??_Loading& (0+255),b
  4169  001632  0E1C               	movlw	28
  4170  001634                     u9987:
  4171  001634  2EE8               	decfsz	wreg,f,c
  4172  001636  D7FE               	bra	u9987
  4173  001638  2FB1               	decfsz	??_Loading& (0+255),f,b
  4174  00163A  D7FC               	bra	u9987
  4175  00163C  F000               	nop	
  4176                           
  4177                           ;sort.c: 223: LATAbits.LATA4 = 0;
  4178  00163E  9889               	bcf	3977,4,c	;volatile
  4179                           
  4180                           ;sort.c: 224: _delay((unsigned long)((2000)*(32000000/4000000.0)));
  4181  001640  0E15               	movlw	21
  4182  001642  0100               	movlb	0	; () banked
  4183  001644  6FB1               	movwf	??_Loading& (0+255),b
  4184  001646  0EC6               	movlw	198
  4185  001648                     u9997:
  4186  001648  2EE8               	decfsz	wreg,f,c
  4187  00164A  D7FE               	bra	u9997
  4188  00164C  2FB1               	decfsz	??_Loading& (0+255),f,b
  4189  00164E  D7FC               	bra	u9997
  4190  001650  D046               	goto	L6
  4191  001652                     l833:
  4192                           
  4193                           ; BSR set to: 0
  4194                           ;sort.c: 227: LATAbits.LATA4 = 1;
  4195  001652  8889               	bsf	3977,4,c	;volatile
  4196                           
  4197                           ; BSR set to: 0
  4198                           ;sort.c: 228: _delay((unsigned long)((8500)*(32000000/4000000.0)));
  4199  001654  0E59               	movlw	89
  4200  001656  0100               	movlb	0	; () banked
  4201  001658  6FB1               	movwf	??_Loading& (0+255),b
  4202  00165A  0E4E               	movlw	78
  4203  00165C                     u10007:
  4204  00165C  2EE8               	decfsz	wreg,f,c
  4205  00165E  D7FE               	bra	u10007
  4206  001660  2FB1               	decfsz	??_Loading& (0+255),f,b
  4207  001662  D7FC               	bra	u10007
  4208  001664  F000               	nop	
  4209                           
  4210                           ;sort.c: 229: LATAbits.LATA4 = 0;
  4211  001666  9889               	bcf	3977,4,c	;volatile
  4212                           
  4213                           ;sort.c: 230: _delay((unsigned long)((1500)*(32000000/4000000.0)));
  4214  001668  0E10               	movlw	16
  4215  00166A  0100               	movlb	0	; () banked
  4216  00166C  6FB1               	movwf	??_Loading& (0+255),b
  4217  00166E  0E94               	movlw	148
  4218  001670                     u10017:
  4219  001670  2EE8               	decfsz	wreg,f,c
  4220  001672  D7FE               	bra	u10017
  4221  001674  2FB1               	decfsz	??_Loading& (0+255),f,b
  4222  001676  D7FC               	bra	u10017
  4223  001678  D032               	goto	L6
  4224  00167A                     l834:
  4225                           
  4226                           ; BSR set to: 0
  4227                           ;sort.c: 233: LATAbits.LATA4 = 1;
  4228  00167A  8889               	bsf	3977,4,c	;volatile
  4229                           
  4230                           ; BSR set to: 0
  4231                           ;sort.c: 234: _delay((unsigned long)((9000)*(32000000/4000000.0)));
  4232  00167C  0E5E               	movlw	94
  4233  00167E  0100               	movlb	0	; () banked
  4234  001680  6FB1               	movwf	??_Loading& (0+255),b
  4235  001682  0E80               	movlw	128
  4236  001684                     u10027:
  4237  001684  2EE8               	decfsz	wreg,f,c
  4238  001686  D7FE               	bra	u10027
  4239  001688  2FB1               	decfsz	??_Loading& (0+255),f,b
  4240  00168A  D7FC               	bra	u10027
  4241  00168C  F000               	nop	
  4242                           
  4243                           ;sort.c: 235: LATAbits.LATA4 = 0;
  4244  00168E  9889               	bcf	3977,4,c	;volatile
  4245                           
  4246                           ;sort.c: 236: _delay((unsigned long)((1000)*(32000000/4000000.0)));
  4247  001690  0E0B               	movlw	11
  4248  001692  0100               	movlb	0	; () banked
  4249  001694  6FB1               	movwf	??_Loading& (0+255),b
  4250  001696  0E62               	movlw	98
  4251  001698                     u10037:
  4252  001698  2EE8               	decfsz	wreg,f,c
  4253  00169A  D7FE               	bra	u10037
  4254  00169C  2FB1               	decfsz	??_Loading& (0+255),f,b
  4255  00169E  D7FC               	bra	u10037
  4256  0016A0  D01E               	goto	L6
  4257  0016A2                     l835:
  4258                           
  4259                           ; BSR set to: 0
  4260                           ;sort.c: 239: LATAbits.LATA4 = 1;
  4261  0016A2  8889               	bsf	3977,4,c	;volatile
  4262                           
  4263                           ; BSR set to: 0
  4264                           ;sort.c: 240: _delay((unsigned long)((9500)*(32000000/4000000.0)));
  4265  0016A4  0E63               	movlw	99
  4266  0016A6  0100               	movlb	0	; () banked
  4267  0016A8  6FB1               	movwf	??_Loading& (0+255),b
  4268  0016AA  0EB2               	movlw	178
  4269  0016AC                     u10047:
  4270  0016AC  2EE8               	decfsz	wreg,f,c
  4271  0016AE  D7FE               	bra	u10047
  4272  0016B0  2FB1               	decfsz	??_Loading& (0+255),f,b
  4273  0016B2  D7FC               	bra	u10047
  4274  0016B4  F000               	nop	
  4275                           
  4276                           ;sort.c: 241: LATAbits.LATA4 = 0;
  4277  0016B6  9889               	bcf	3977,4,c	;volatile
  4278                           
  4279                           ;sort.c: 242: _delay((unsigned long)((5000)*(32000000/4000000.0)));
  4280  0016B8  0E34               	movlw	52
  4281  0016BA  0100               	movlb	0	; () banked
  4282  0016BC  6FB1               	movwf	??_Loading& (0+255),b
  4283  0016BE  0EF1               	movlw	241
  4284  0016C0                     u10057:
  4285  0016C0  2EE8               	decfsz	wreg,f,c
  4286  0016C2  D7FE               	bra	u10057
  4287  0016C4  2FB1               	decfsz	??_Loading& (0+255),f,b
  4288  0016C6  D7FC               	bra	u10057
  4289  0016C8  D000               	nop2	
  4290                           
  4291                           ;sort.c: 243: break;
  4292  0016CA  D026               	goto	l8000
  4293  0016CC                     l836:
  4294                           
  4295                           ; BSR set to: 0
  4296                           ;sort.c: 245: LATAbits.LATA4 = 1;
  4297  0016CC  8889               	bsf	3977,4,c	;volatile
  4298                           
  4299                           ; BSR set to: 0
  4300                           ;sort.c: 246: _delay((unsigned long)((10)*(32000000/4000.0)));
  4301  0016CE  0E68               	movlw	104
  4302  0016D0  0100               	movlb	0	; () banked
  4303  0016D2  6FB1               	movwf	??_Loading& (0+255),b
  4304  0016D4  0EE4               	movlw	228
  4305  0016D6                     u10067:
  4306  0016D6  2EE8               	decfsz	wreg,f,c
  4307  0016D8  D7FE               	bra	u10067
  4308  0016DA  2FB1               	decfsz	??_Loading& (0+255),f,b
  4309  0016DC  D7FC               	bra	u10067
  4310  0016DE                     L6:
  4311  0016DE  F000               	nop	
  4312                           
  4313                           ;sort.c: 248: }
  4314                           
  4315                           ;sort.c: 247: break;
  4316  0016E0  D01B               	goto	l8000
  4317  0016E2                     l7998:
  4318  0016E2  C0C2  F0B1         	movff	Loading@j,??_Loading
  4319  0016E6  C0C3  F0B2         	movff	Loading@j+1,??_Loading+1
  4320                           
  4321                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4322                           ; Switch size 1, requested type "space"
  4323                           ; Number of cases is 1, Range of values is 0 to 0
  4324                           ; switch strategies available:
  4325                           ; Name         Instructions Cycles
  4326                           ; simple_byte            4     3 (average)
  4327                           ;	Chosen strategy is simple_byte
  4328  0016EA  0100               	movlb	0	; () banked
  4329  0016EC  51B2               	movf	(??_Loading+1)& (0+255),w,b
  4330  0016EE  0A00               	xorlw	0	; case 0
  4331  0016F0  A4D8               	btfss	status,2,c
  4332  0016F2  D7EC               	goto	l836
  4333                           
  4334                           ; BSR set to: 0
  4335                           ; Switch size 1, requested type "space"
  4336                           ; Number of cases is 5, Range of values is 0 to 4
  4337                           ; switch strategies available:
  4338                           ; Name         Instructions Cycles
  4339                           ; simple_byte           16     9 (average)
  4340                           ;	Chosen strategy is simple_byte
  4341  0016F4  0100               	movlb	0	; () banked
  4342  0016F6  51B1               	movf	??_Loading& (0+255),w,b
  4343  0016F8  0A00               	xorlw	0	; case 0
  4344  0016FA  B4D8               	btfsc	status,2,c
  4345  0016FC  D783               	goto	l830
  4346  0016FE  0A01               	xorlw	1	; case 1
  4347  001700  B4D8               	btfsc	status,2,c
  4348  001702  D793               	goto	l832
  4349  001704  0A03               	xorlw	3	; case 2
  4350  001706  B4D8               	btfsc	status,2,c
  4351  001708  D7A4               	goto	l833
  4352  00170A  0A01               	xorlw	1	; case 3
  4353  00170C  B4D8               	btfsc	status,2,c
  4354  00170E  D7B5               	goto	l834
  4355  001710  0A07               	xorlw	7	; case 4
  4356  001712  B4D8               	btfsc	status,2,c
  4357  001714  D7C6               	goto	l835
  4358  001716  D7DA               	goto	l836
  4359  001718                     l8000:
  4360  001718  0100               	movlb	0	; () banked
  4361  00171A  4BBE               	infsnz	Loading@i_1132& (0+255),f,b
  4362  00171C  2BBF               	incf	(Loading@i_1132+1)& (0+255),f,b
  4363                           
  4364                           ; BSR set to: 0
  4365  00171E  0100               	movlb	0	; () banked
  4366  001720  BFBF               	btfsc	(Loading@i_1132+1)& (0+255),7,b
  4367  001722  D7DF               	goto	l7998
  4368  001724  0100               	movlb	0	; () banked
  4369  001726  51BF               	movf	(Loading@i_1132+1)& (0+255),w,b
  4370  001728  E101               	bnz	l824
  4371  00172A  D765               	goto	L7
  4372  00172C                     l824:
  4373                           
  4374                           ;sort.c: 249: }
  4375                           ;sort.c: 250: }
  4376                           ;sort.c: 251: }
  4377                           ;sort.c: 252: LATAbits.LATA4 = 0;
  4378  00172C  9889               	bcf	3977,4,c	;volatile
  4379                           
  4380                           ;sort.c: 253: j++;
  4381  00172E  0100               	movlb	0	; () banked
  4382  001730  4BC2               	infsnz	Loading@j& (0+255),f,b
  4383  001732  2BC3               	incf	(Loading@j+1)& (0+255),f,b
  4384  001734                     l8006:
  4385                           
  4386                           ; BSR set to: 0
  4387                           ;sort.c: 254: }
  4388                           ;sort.c: 256: if(!IR_signal){
  4389  001734  0100               	movlb	0	; () banked
  4390  001736  51E0               	movf	_IR_signal& (0+255),w,b
  4391  001738  0100               	movlb	0	; () banked
  4392  00173A  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  4393  00173C  A4D8               	btfss	status,2,c
  4394  00173E  D016               	goto	l8018
  4395                           
  4396                           ; BSR set to: 0
  4397                           ;sort.c: 257: _delay((unsigned long)((500)*(32000000/4000.0)));
  4398  001740  0E15               	movlw	21
  4399  001742  0100               	movlb	0	; () banked
  4400  001744  6FB2               	movwf	(??_Loading+1)& (0+255),b
  4401  001746  0E4B               	movlw	75
  4402  001748  0100               	movlb	0	; () banked
  4403  00174A  6FB1               	movwf	??_Loading& (0+255),b
  4404  00174C  0EBE               	movlw	190
  4405  00174E                     u10077:
  4406  00174E  2EE8               	decfsz	wreg,f,c
  4407  001750  D7FE               	bra	u10077
  4408  001752  2FB1               	decfsz	??_Loading& (0+255),f,b
  4409  001754  D7FC               	bra	u10077
  4410  001756  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  4411  001758  D7FA               	bra	u10077
  4412  00175A  F000               	nop	
  4413                           
  4414                           ;sort.c: 258: readIR();
  4415  00175C  EC32  F02A         	call	_readIR	;wreg free
  4416                           
  4417                           ;sort.c: 259: if(IR_signal){
  4418  001760  0100               	movlb	0	; () banked
  4419  001762  51E0               	movf	_IR_signal& (0+255),w,b
  4420  001764  0100               	movlb	0	; () banked
  4421  001766  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  4422  001768  B4D8               	btfsc	status,2,c
  4423  00176A  D006               	goto	l840
  4424  00176C                     l8018:
  4425                           
  4426                           ; BSR set to: 0
  4427  00176C  0100               	movlb	0	; () banked
  4428  00176E  51E0               	movf	_IR_signal& (0+255),w,b
  4429  001770  0100               	movlb	0	; () banked
  4430  001772  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  4431  001774  A4D8               	btfss	status,2,c
  4432  001776  D6A9               	goto	l7934
  4433  001778                     l840:
  4434                           
  4435                           ; BSR set to: 0
  4436                           ;sort.c: 264: }
  4437                           ;sort.c: 265: }
  4438                           ;sort.c: 266: }
  4439                           ;sort.c: 267: LATBbits.LATB2 = 0;
  4440  001778  948A               	bcf	3978,2,c	;volatile
  4441  00177A                     l8020:
  4442                           
  4443                           ; BSR set to: 0
  4444                           ;sort.c: 268: }
  4445                           ;sort.c: 269: f_can_coming_to_ID = 1;
  4446  00177A  0E00               	movlw	0
  4447  00177C  0101               	movlb	1	; () banked
  4448  00177E  6F32               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  4449  001780  0E01               	movlw	1
  4450  001782  6F31               	movwf	_f_can_coming_to_ID& (0+255),b
  4451                           
  4452                           ; BSR set to: 1
  4453                           
  4454                           ; BSR set to: 1
  4455  001784  0012               	return	
  4456  001786                     __end_of_Loading:
  4457                           	opt stack 0
  4458                           tblptru	equ	0xFF8
  4459                           tblptrh	equ	0xFF7
  4460                           tblptrl	equ	0xFF6
  4461                           tablat	equ	0xFF5
  4462                           prodh	equ	0xFF4
  4463                           prodl	equ	0xFF3
  4464                           postinc0	equ	0xFEE
  4465                           wreg	equ	0xFE8
  4466                           postdec1	equ	0xFE5
  4467                           fsr1l	equ	0xFE1
  4468                           status	equ	0xFD8
  4469                           
  4470 ;; *************** function _initSortTimer *****************
  4471 ;; Defined at:
  4472 ;;		line 445 in file "sort.c"
  4473 ;; Parameters:    Size  Location     Type
  4474 ;;		None
  4475 ;; Auto vars:     Size  Location     Type
  4476 ;;  i               2    8[BANK0 ] int 
  4477 ;; Return value:  Size  Location     Type
  4478 ;;                  1    wreg      void 
  4479 ;; Registers used:
  4480 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4481 ;; Tracked objects:
  4482 ;;		On entry : 0/0
  4483 ;;		On exit  : 0/0
  4484 ;;		Unchanged: 0/0
  4485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4486 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4487 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4488 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4489 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4490 ;;Total ram usage:        5 bytes
  4491 ;; Hardware stack levels used:    1
  4492 ;; Hardware stack levels required when called:   10
  4493 ;; This function calls:
  4494 ;;		_getRTC
  4495 ;; This function is called by:
  4496 ;;		_Loading
  4497 ;; This function uses a non-reentrant model
  4498 ;;
  4499                           
  4500                           	psect	text3
  4501  004B84                     __ptext3:
  4502                           	opt stack 0
  4503  004B84                     _initSortTimer:
  4504                           	opt stack 18
  4505                           
  4506                           ;sort.c: 447: getRTC();
  4507                           
  4508                           ;incstack = 0
  4509  004B84  ECAE  F026         	call	_getRTC	;wreg free
  4510                           
  4511                           ;sort.c: 448: for(int i = 0; i < 7; i++){
  4512  004B88  0E00               	movlw	0
  4513  004B8A  0100               	movlb	0	; () banked
  4514  004B8C  6F89               	movwf	(initSortTimer@i+1)& (0+255),b
  4515  004B8E  0E00               	movlw	0
  4516  004B90  6F88               	movwf	initSortTimer@i& (0+255),b
  4517  004B92                     l7326:
  4518                           
  4519                           ; BSR set to: 0
  4520  004B92  0100               	movlb	0	; () banked
  4521  004B94  BF89               	btfsc	(initSortTimer@i+1)& (0+255),7,b
  4522  004B96  D008               	goto	l7330
  4523  004B98  0100               	movlb	0	; () banked
  4524  004B9A  5189               	movf	(initSortTimer@i+1)& (0+255),w,b
  4525  004B9C  E140               	bnz	l7336
  4526  004B9E  0E07               	movlw	7
  4527  004BA0  0100               	movlb	0	; () banked
  4528  004BA2  5D88               	subwf	initSortTimer@i& (0+255),w,b
  4529  004BA4  B0D8               	btfsc	status,0,c
  4530  004BA6  D03B               	goto	l7336
  4531  004BA8                     l7330:
  4532                           
  4533                           ; BSR set to: 0
  4534                           ;sort.c: 449: startTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  4535  004BA8  0E1C               	movlw	low _time
  4536  004BAA  0100               	movlb	0	; () banked
  4537  004BAC  2588               	addwf	initSortTimer@i& (0+255),w,b
  4538  004BAE  6ED9               	movwf	fsr2l,c
  4539  004BB0  0E01               	movlw	high _time
  4540  004BB2  0100               	movlb	0	; () banked
  4541  004BB4  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  4542  004BB6  6EDA               	movwf	fsr2h,c
  4543  004BB8  50DF               	movf	indf2,w,c
  4544  004BBA  0100               	movlb	0	; () banked
  4545  004BBC  6F85               	movwf	??_initSortTimer& (0+255),b
  4546  004BBE  0100               	movlb	0	; () banked
  4547  004BC0  3B85               	swapf	??_initSortTimer& (0+255),f,b
  4548  004BC2  0E0F               	movlw	15
  4549  004BC4  1785               	andwf	??_initSortTimer& (0+255),f,b
  4550  004BC6  0E0F               	movlw	15
  4551  004BC8  0100               	movlb	0	; () banked
  4552  004BCA  1785               	andwf	??_initSortTimer& (0+255),f,b
  4553  004BCC  0100               	movlb	0	; () banked
  4554  004BCE  5185               	movf	??_initSortTimer& (0+255),w,b
  4555  004BD0  0D0A               	mullw	10
  4556  004BD2  0E1C               	movlw	low _time
  4557  004BD4  0100               	movlb	0	; () banked
  4558  004BD6  2588               	addwf	initSortTimer@i& (0+255),w,b
  4559  004BD8  6ED9               	movwf	fsr2l,c
  4560  004BDA  0E01               	movlw	high _time
  4561  004BDC  0100               	movlb	0	; () banked
  4562  004BDE  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  4563  004BE0  6EDA               	movwf	fsr2h,c
  4564  004BE2  50DF               	movf	indf2,w,c
  4565  004BE4  0B0F               	andlw	15
  4566  004BE6  0100               	movlb	0	; () banked
  4567  004BE8  6F86               	movwf	(??_initSortTimer+1)& (0+255),b
  4568  004BEA  6B87               	clrf	(??_initSortTimer+2)& (0+255),b
  4569  004BEC  50F3               	movf	prodl,w,c
  4570  004BEE  0100               	movlb	0	; () banked
  4571  004BF0  2786               	addwf	(??_initSortTimer+1)& (0+255),f,b
  4572  004BF2  50F4               	movf	prodh,w,c
  4573  004BF4  0100               	movlb	0	; () banked
  4574  004BF6  2387               	addwfc	(??_initSortTimer+2)& (0+255),f,b
  4575  004BF8  90D8               	bcf	status,0,c
  4576  004BFA  0100               	movlb	0	; () banked
  4577  004BFC  3588               	rlcf	initSortTimer@i& (0+255),w,b
  4578  004BFE  6ED9               	movwf	fsr2l,c
  4579  004C00  0100               	movlb	0	; () banked
  4580  004C02  3589               	rlcf	(initSortTimer@i+1)& (0+255),w,b
  4581  004C04  6EDA               	movwf	fsr2h,c
  4582  004C06  0E0E               	movlw	low _startTime
  4583  004C08  26D9               	addwf	fsr2l,f,c
  4584  004C0A  0E01               	movlw	high _startTime
  4585  004C0C  22DA               	addwfc	fsr2h,f,c
  4586  004C0E  C086  FFDE         	movff	??_initSortTimer+1,postinc2
  4587  004C12  C087  FFDD         	movff	??_initSortTimer+2,postdec2
  4588                           
  4589                           ; BSR set to: 0
  4590  004C16  0100               	movlb	0	; () banked
  4591  004C18  4B88               	infsnz	initSortTimer@i& (0+255),f,b
  4592  004C1A  2B89               	incf	(initSortTimer@i+1)& (0+255),f,b
  4593  004C1C  D7BA               	goto	l7326
  4594  004C1E                     l7336:
  4595                           
  4596                           ; BSR set to: 0
  4597                           ;sort.c: 450: }
  4598                           ;sort.c: 452: T0CON = 0b00010111;
  4599  004C1E  0E17               	movlw	23
  4600  004C20  6ED5               	movwf	4053,c	;volatile
  4601                           
  4602                           ;sort.c: 461: TMR0H = 0b10000101;
  4603  004C22  0E85               	movlw	133
  4604  004C24  6ED7               	movwf	4055,c	;volatile
  4605                           
  4606                           ;sort.c: 462: TMR0L = 0b11101110;
  4607  004C26  0EEE               	movlw	238
  4608  004C28  6ED6               	movwf	4054,c	;volatile
  4609                           
  4610                           ; BSR set to: 0
  4611                           ;sort.c: 463: TMR0ON = 1;
  4612  004C2A  8ED5               	bsf	4053,7,c	;volatile
  4613                           
  4614                           ; BSR set to: 0
  4615  004C2C  0012               	return		;funcret
  4616  004C2E                     __end_of_initSortTimer:
  4617                           	opt stack 0
  4618                           tblptru	equ	0xFF8
  4619                           tblptrh	equ	0xFF7
  4620                           tblptrl	equ	0xFF6
  4621                           tablat	equ	0xFF5
  4622                           prodh	equ	0xFF4
  4623                           prodl	equ	0xFF3
  4624                           postinc0	equ	0xFEE
  4625                           wreg	equ	0xFE8
  4626                           postdec1	equ	0xFE5
  4627                           fsr1l	equ	0xFE1
  4628                           indf2	equ	0xFDF
  4629                           postinc2	equ	0xFDE
  4630                           postdec2	equ	0xFDD
  4631                           fsr2h	equ	0xFDA
  4632                           fsr2l	equ	0xFD9
  4633                           status	equ	0xFD8
  4634                           
  4635 ;; *************** function _initGlobalVars *****************
  4636 ;; Defined at:
  4637 ;;		line 413 in file "sort.c"
  4638 ;; Parameters:    Size  Location     Type
  4639 ;;		None
  4640 ;; Auto vars:     Size  Location     Type
  4641 ;;		None
  4642 ;; Return value:  Size  Location     Type
  4643 ;;                  1    wreg      void 
  4644 ;; Registers used:
  4645 ;;		wreg, status,2
  4646 ;; Tracked objects:
  4647 ;;		On entry : 0/0
  4648 ;;		On exit  : 0/0
  4649 ;;		Unchanged: 0/0
  4650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4651 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4652 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4653 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4654 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4655 ;;Total ram usage:        0 bytes
  4656 ;; Hardware stack levels used:    1
  4657 ;; Hardware stack levels required when called:    7
  4658 ;; This function calls:
  4659 ;;		Nothing
  4660 ;; This function is called by:
  4661 ;;		_Loading
  4662 ;; This function uses a non-reentrant model
  4663 ;;
  4664                           
  4665                           	psect	text4
  4666  00494A                     __ptext4:
  4667                           	opt stack 0
  4668  00494A                     _initGlobalVars:
  4669                           	opt stack 21
  4670                           
  4671                           ;sort.c: 415: first = 0;
  4672                           
  4673                           ; BSR set to: 0
  4674                           ;incstack = 0
  4675  00494A  0E00               	movlw	0
  4676  00494C  0101               	movlb	1	; () banked
  4677  00494E  6F3A               	movwf	(_first+1)& (0+255),b
  4678  004950  0E00               	movlw	0
  4679  004952  6F39               	movwf	_first& (0+255),b
  4680                           
  4681                           ;sort.c: 418: f_loadingNewCan = 0;
  4682  004954  0E00               	movlw	0
  4683  004956  0100               	movlb	0	; () banked
  4684  004958  6FED               	movwf	(_f_loadingNewCan+1)& (0+255),b
  4685  00495A  0E00               	movlw	0
  4686  00495C  6FEC               	movwf	_f_loadingNewCan& (0+255),b
  4687                           
  4688                           ;sort.c: 419: f_lastCan = 0;
  4689  00495E  0E00               	movlw	0
  4690  004960  0100               	movlb	0	; () banked
  4691  004962  6FEB               	movwf	(_f_lastCan+1)& (0+255),b
  4692  004964  0E00               	movlw	0
  4693  004966  6FEA               	movwf	_f_lastCan& (0+255),b
  4694                           
  4695                           ;sort.c: 420: f_ID_receive = 1;
  4696  004968  0E00               	movlw	0
  4697  00496A  0101               	movlb	1	; () banked
  4698  00496C  6F30               	movwf	(_f_ID_receive+1)& (0+255),b
  4699  00496E  0E01               	movlw	1
  4700  004970  6F2F               	movwf	_f_ID_receive& (0+255),b
  4701                           
  4702                           ;sort.c: 421: f_can_coming_to_ID = 0;
  4703  004972  0E00               	movlw	0
  4704  004974  0101               	movlb	1	; () banked
  4705  004976  6F32               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  4706  004978  0E00               	movlw	0
  4707  00497A  6F31               	movwf	_f_can_coming_to_ID& (0+255),b
  4708                           
  4709                           ;sort.c: 422: f_can_coming_to_distribution = 0;
  4710  00497C  0E00               	movlw	0
  4711  00497E  0101               	movlb	1	; () banked
  4712  004980  6F34               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  4713  004982  0E00               	movlw	0
  4714  004984  6F33               	movwf	_f_can_coming_to_distribution& (0+255),b
  4715                           
  4716                           ;sort.c: 423: f_can_distributed = 1;
  4717  004986  0E00               	movlw	0
  4718  004988  0101               	movlb	1	; () banked
  4719  00498A  6F36               	movwf	(_f_can_distributed+1)& (0+255),b
  4720  00498C  0E01               	movlw	1
  4721  00498E  6F35               	movwf	_f_can_distributed& (0+255),b
  4722                           
  4723                           ;sort.c: 424: f_most_recent_sort_time = 0;
  4724  004990  0E00               	movlw	0
  4725  004992  0101               	movlb	1	; () banked
  4726  004994  6F38               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
  4727  004996  0E00               	movlw	0
  4728  004998  6F37               	movwf	_f_most_recent_sort_time& (0+255),b
  4729                           
  4730                           ;sort.c: 427: count_total = 0;
  4731  00499A  0E00               	movlw	0
  4732  00499C  0100               	movlb	0	; () banked
  4733  00499E  6FFF               	movwf	(_count_total+1)& (0+255),b
  4734  0049A0  0E00               	movlw	0
  4735  0049A2  6FFE               	movwf	_count_total& (0+255),b
  4736                           
  4737                           ;sort.c: 428: count_pop_no_tab = 0;
  4738  0049A4  0E00               	movlw	0
  4739  0049A6  0101               	movlb	1	; () banked
  4740  0049A8  6F28               	movwf	(_count_pop_no_tab+1)& (0+255),b
  4741  0049AA  0E00               	movlw	0
  4742  0049AC  6F27               	movwf	_count_pop_no_tab& (0+255),b
  4743                           
  4744                           ;sort.c: 429: count_pop_w_tab = 0;
  4745  0049AE  0E00               	movlw	0
  4746  0049B0  0101               	movlb	1	; () banked
  4747  0049B2  6F2A               	movwf	(_count_pop_w_tab+1)& (0+255),b
  4748  0049B4  0E00               	movlw	0
  4749  0049B6  6F29               	movwf	_count_pop_w_tab& (0+255),b
  4750                           
  4751                           ;sort.c: 430: count_can_w_lab = 0;
  4752  0049B8  0E00               	movlw	0
  4753  0049BA  0101               	movlb	1	; () banked
  4754  0049BC  6F26               	movwf	(_count_can_w_lab+1)& (0+255),b
  4755  0049BE  0E00               	movlw	0
  4756  0049C0  6F25               	movwf	_count_can_w_lab& (0+255),b
  4757                           
  4758                           ;sort.c: 431: count_can_no_lab = 0;
  4759  0049C2  0E00               	movlw	0
  4760  0049C4  0101               	movlb	1	; () banked
  4761  0049C6  6F24               	movwf	(_count_can_no_lab+1)& (0+255),b
  4762  0049C8  0E00               	movlw	0
  4763  0049CA  6F23               	movwf	_count_can_no_lab& (0+255),b
  4764                           
  4765                           ;sort.c: 434: most_recent_sort_time = 999;
  4766  0049CC  0E03               	movlw	3
  4767  0049CE  0101               	movlb	1	; () banked
  4768  0049D0  6F46               	movwf	(_most_recent_sort_time+1)& (0+255),b
  4769  0049D2  0EE7               	movlw	231
  4770  0049D4  6F45               	movwf	_most_recent_sort_time& (0+255),b
  4771                           
  4772                           ;sort.c: 437: servo_timer_counter = 0;
  4773  0049D6  0E00               	movlw	0
  4774  0049D8  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
  4775  0049DA  0E00               	movlw	0
  4776  0049DC  6E6D               	movwf	_servo_timer_counter,c	;volatile
  4777                           
  4778                           ;sort.c: 438: servo_timer_target = 9999;
  4779  0049DE  0E27               	movlw	39
  4780  0049E0  6E70               	movwf	_servo_timer_target+1,c	;volatile
  4781  0049E2  0E0F               	movlw	15
  4782  0049E4  6E6F               	movwf	_servo_timer_target,c	;volatile
  4783                           
  4784                           ;sort.c: 439: timer2_counter = 0;
  4785  0049E6  0E00               	movlw	0
  4786  0049E8  6E74               	movwf	_timer2_counter+1,c	;volatile
  4787  0049EA  0E00               	movlw	0
  4788  0049EC  6E73               	movwf	_timer2_counter,c	;volatile
  4789                           
  4790                           ;sort.c: 440: f_arm_position = 0;
  4791  0049EE  0E00               	movlw	0
  4792  0049F0  0100               	movlb	0	; () banked
  4793  0049F2  6FE9               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  4794  0049F4  0E00               	movlw	0
  4795  0049F6  6FE8               	movwf	_f_arm_position& (0+255),b	;volatile
  4796                           
  4797                           ; BSR set to: 0
  4798                           ;sort.c: 441: pan_servo_state = -1;
  4799  0049F8  686B               	setf	_pan_servo_state,c	;volatile
  4800  0049FA  686C               	setf	_pan_servo_state+1,c	;volatile
  4801                           
  4802                           ; BSR set to: 0
  4803                           ;sort.c: 442: tilt_servo_state = -1;
  4804  0049FC  6871               	setf	_tilt_servo_state,c	;volatile
  4805  0049FE  6872               	setf	_tilt_servo_state+1,c	;volatile
  4806                           
  4807                           ;sort.c: 443: f_panning_to_bin = 0;
  4808  004A00  0E00               	movlw	0
  4809  004A02  6E6A               	movwf	_f_panning_to_bin+1,c	;volatile
  4810  004A04  0E00               	movlw	0
  4811  004A06  6E69               	movwf	_f_panning_to_bin,c	;volatile
  4812                           
  4813                           ; BSR set to: 0
  4814  004A08  0012               	return		;funcret
  4815  004A0A                     __end_of_initGlobalVars:
  4816                           	opt stack 0
  4817                           tblptru	equ	0xFF8
  4818                           tblptrh	equ	0xFF7
  4819                           tblptrl	equ	0xFF6
  4820                           tablat	equ	0xFF5
  4821                           prodh	equ	0xFF4
  4822                           prodl	equ	0xFF3
  4823                           postinc0	equ	0xFEE
  4824                           wreg	equ	0xFE8
  4825                           postdec1	equ	0xFE5
  4826                           fsr1l	equ	0xFE1
  4827                           indf2	equ	0xFDF
  4828                           postinc2	equ	0xFDE
  4829                           postdec2	equ	0xFDD
  4830                           fsr2h	equ	0xFDA
  4831                           fsr2l	equ	0xFD9
  4832                           status	equ	0xFD8
  4833                           
  4834 ;; *************** function _getMAG *****************
  4835 ;; Defined at:
  4836 ;;		line 552 in file "sort.c"
  4837 ;; Parameters:    Size  Location     Type
  4838 ;;		None
  4839 ;; Auto vars:     Size  Location     Type
  4840 ;;		None
  4841 ;; Return value:  Size  Location     Type
  4842 ;;                  1    wreg      void 
  4843 ;; Registers used:
  4844 ;;		wreg, status,2, status,0, cstack
  4845 ;; Tracked objects:
  4846 ;;		On entry : 0/0
  4847 ;;		On exit  : 0/0
  4848 ;;		Unchanged: 0/0
  4849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4850 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4851 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4852 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4853 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4854 ;;Total ram usage:        2 bytes
  4855 ;; Hardware stack levels used:    1
  4856 ;; Hardware stack levels required when called:    9
  4857 ;; This function calls:
  4858 ;;		_readMAG
  4859 ;; This function is called by:
  4860 ;;		_Loading
  4861 ;; This function uses a non-reentrant model
  4862 ;;
  4863                           
  4864                           	psect	text5
  4865  00572A                     __ptext5:
  4866                           	opt stack 0
  4867  00572A                     _getMAG:
  4868                           	opt stack 19
  4869                           
  4870                           ;sort.c: 553: readMAG();
  4871                           
  4872                           ; BSR set to: 0
  4873                           ;incstack = 0
  4874  00572A  EC7E  F02A         	call	_readMAG	;wreg free
  4875                           
  4876                           ;sort.c: 555: if(MAG_signal==1){
  4877  00572E  0100               	movlb	0	; () banked
  4878  005730  05E2               	decf	_MAG_signal& (0+255),w,b
  4879  005732  0100               	movlb	0	; () banked
  4880  005734  11E3               	iorwf	(_MAG_signal+1)& (0+255),w,b
  4881  005736  A4D8               	btfss	status,2,c
  4882  005738  0012               	return	
  4883                           
  4884                           ; BSR set to: 0
  4885                           ;sort.c: 556: _delay((unsigned long)((500)*(32000000/4000.0)));
  4886  00573A  0E15               	movlw	21
  4887  00573C  0100               	movlb	0	; () banked
  4888  00573E  6F87               	movwf	(??_getMAG+1)& (0+255),b
  4889  005740  0E4B               	movlw	75
  4890  005742  0100               	movlb	0	; () banked
  4891  005744  6F86               	movwf	??_getMAG& (0+255),b
  4892  005746  0EBE               	movlw	190
  4893  005748                     u10087:
  4894  005748  2EE8               	decfsz	wreg,f,c
  4895  00574A  D7FE               	bra	u10087
  4896  00574C  2F86               	decfsz	??_getMAG& (0+255),f,b
  4897  00574E  D7FC               	bra	u10087
  4898  005750  2F87               	decfsz	(??_getMAG+1)& (0+255),f,b
  4899  005752  D7FA               	bra	u10087
  4900  005754  F000               	nop	
  4901                           
  4902                           ;sort.c: 557: readMAG();
  4903  005756  EC7E  F02A         	call	_readMAG	;wreg free
  4904  00575A  0012               	return	
  4905  00575C                     __end_of_getMAG:
  4906                           	opt stack 0
  4907                           tblptru	equ	0xFF8
  4908                           tblptrh	equ	0xFF7
  4909                           tblptrl	equ	0xFF6
  4910                           tablat	equ	0xFF5
  4911                           prodh	equ	0xFF4
  4912                           prodl	equ	0xFF3
  4913                           postinc0	equ	0xFEE
  4914                           wreg	equ	0xFE8
  4915                           postdec1	equ	0xFE5
  4916                           fsr1l	equ	0xFE1
  4917                           indf2	equ	0xFDF
  4918                           postinc2	equ	0xFDE
  4919                           postdec2	equ	0xFDD
  4920                           fsr2h	equ	0xFDA
  4921                           fsr2l	equ	0xFD9
  4922                           status	equ	0xFD8
  4923                           
  4924 ;; *************** function _getIR *****************
  4925 ;; Defined at:
  4926 ;;		line 536 in file "sort.c"
  4927 ;; Parameters:    Size  Location     Type
  4928 ;;		None
  4929 ;; Auto vars:     Size  Location     Type
  4930 ;;  i               2    7[BANK0 ] int 
  4931 ;; Return value:  Size  Location     Type
  4932 ;;                  1    wreg      void 
  4933 ;; Registers used:
  4934 ;;		wreg, status,2, status,0, cstack
  4935 ;; Tracked objects:
  4936 ;;		On entry : 0/0
  4937 ;;		On exit  : 0/0
  4938 ;;		Unchanged: 0/0
  4939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4940 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4941 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4942 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4943 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4944 ;;Total ram usage:        3 bytes
  4945 ;; Hardware stack levels used:    1
  4946 ;; Hardware stack levels required when called:    9
  4947 ;; This function calls:
  4948 ;;		_readIR
  4949 ;; This function is called by:
  4950 ;;		_Loading
  4951 ;; This function uses a non-reentrant model
  4952 ;;
  4953                           
  4954                           	psect	text6
  4955  004FD4                     __ptext6:
  4956                           	opt stack 0
  4957  004FD4                     _getIR:
  4958                           	opt stack 19
  4959                           
  4960                           ;sort.c: 537: readIR();
  4961                           
  4962                           ;incstack = 0
  4963  004FD4  EC32  F02A         	call	_readIR	;wreg free
  4964                           
  4965                           ;sort.c: 538: for(int i = 0; i < 150; i++){
  4966  004FD8  0E00               	movlw	0
  4967  004FDA  0100               	movlb	0	; () banked
  4968  004FDC  6F88               	movwf	(getIR@i+1)& (0+255),b
  4969  004FDE  0E00               	movlw	0
  4970  004FE0  6F87               	movwf	getIR@i& (0+255),b
  4971  004FE2                     l7426:
  4972                           
  4973                           ; BSR set to: 0
  4974  004FE2  0100               	movlb	0	; () banked
  4975  004FE4  BF88               	btfsc	(getIR@i+1)& (0+255),7,b
  4976  004FE6  D008               	goto	l7430
  4977  004FE8  0100               	movlb	0	; () banked
  4978  004FEA  5188               	movf	(getIR@i+1)& (0+255),w,b
  4979  004FEC  E11A               	bnz	l7442
  4980  004FEE  0E96               	movlw	150
  4981  004FF0  0100               	movlb	0	; () banked
  4982  004FF2  5D87               	subwf	getIR@i& (0+255),w,b
  4983  004FF4  B0D8               	btfsc	status,0,c
  4984  004FF6  D015               	goto	l7442
  4985  004FF8                     l7430:
  4986                           
  4987                           ; BSR set to: 0
  4988                           ;sort.c: 539: _delay((unsigned long)((500)*(32000000/4000000.0)));
  4989  004FF8  0E06               	movlw	6
  4990  004FFA  0100               	movlb	0	; () banked
  4991  004FFC  6F86               	movwf	??_getIR& (0+255),b
  4992  004FFE  0E30               	movlw	48
  4993  005000                     u10097:
  4994  005000  2EE8               	decfsz	wreg,f,c
  4995  005002  D7FE               	bra	u10097
  4996  005004  2F86               	decfsz	??_getIR& (0+255),f,b
  4997  005006  D7FC               	bra	u10097
  4998  005008  F000               	nop	
  4999                           
  5000                           ;sort.c: 540: readIR();
  5001  00500A  EC32  F02A         	call	_readIR	;wreg free
  5002                           
  5003                           ;sort.c: 541: if(!IR_signal){
  5004  00500E  0100               	movlb	0	; () banked
  5005  005010  51E0               	movf	_IR_signal& (0+255),w,b
  5006  005012  0100               	movlb	0	; () banked
  5007  005014  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  5008  005016  B4D8               	btfsc	status,2,c
  5009  005018  D004               	goto	l7442
  5010                           
  5011                           ; BSR set to: 0
  5012                           
  5013                           ; BSR set to: 0
  5014                           
  5015                           ; BSR set to: 0
  5016                           ;sort.c: 542: break;
  5017  00501A  0100               	movlb	0	; () banked
  5018  00501C  4B87               	infsnz	getIR@i& (0+255),f,b
  5019  00501E  2B88               	incf	(getIR@i+1)& (0+255),f,b
  5020  005020  D7E0               	goto	l7426
  5021  005022                     l7442:
  5022                           
  5023                           ; BSR set to: 0
  5024                           ;sort.c: 543: }
  5025                           ;sort.c: 544: }
  5026                           ;sort.c: 545: if(IR_signal==1){
  5027  005022  0100               	movlb	0	; () banked
  5028  005024  05E0               	decf	_IR_signal& (0+255),w,b
  5029  005026  0100               	movlb	0	; () banked
  5030  005028  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  5031  00502A  A4D8               	btfss	status,2,c
  5032  00502C  D006               	goto	l7446
  5033                           
  5034                           ; BSR set to: 0
  5035                           ;sort.c: 546: f_loadingNewCan = 1;
  5036  00502E  0E00               	movlw	0
  5037  005030  0100               	movlb	0	; () banked
  5038  005032  6FED               	movwf	(_f_loadingNewCan+1)& (0+255),b
  5039  005034  0E01               	movlw	1
  5040  005036  6FEC               	movwf	_f_loadingNewCan& (0+255),b
  5041                           
  5042                           ;sort.c: 547: }
  5043  005038  0012               	return	
  5044  00503A                     l7446:
  5045                           
  5046                           ; BSR set to: 0
  5047                           ;sort.c: 548: else{
  5048                           ;sort.c: 549: f_loadingNewCan = 0;
  5049  00503A  0E00               	movlw	0
  5050  00503C  0100               	movlb	0	; () banked
  5051  00503E  6FED               	movwf	(_f_loadingNewCan+1)& (0+255),b
  5052  005040  0E00               	movlw	0
  5053  005042  6FEC               	movwf	_f_loadingNewCan& (0+255),b
  5054  005044  0012               	return	
  5055  005046                     __end_of_getIR:
  5056                           	opt stack 0
  5057                           tblptru	equ	0xFF8
  5058                           tblptrh	equ	0xFF7
  5059                           tblptrl	equ	0xFF6
  5060                           tablat	equ	0xFF5
  5061                           prodh	equ	0xFF4
  5062                           prodl	equ	0xFF3
  5063                           postinc0	equ	0xFEE
  5064                           wreg	equ	0xFE8
  5065                           postdec1	equ	0xFE5
  5066                           fsr1l	equ	0xFE1
  5067                           indf2	equ	0xFDF
  5068                           postinc2	equ	0xFDE
  5069                           postdec2	equ	0xFDD
  5070                           fsr2h	equ	0xFDA
  5071                           fsr2l	equ	0xFD9
  5072                           status	equ	0xFD8
  5073                           
  5074 ;; *************** function _readIR *****************
  5075 ;; Defined at:
  5076 ;;		line 23 in file "ADCFunctionality.c"
  5077 ;; Parameters:    Size  Location     Type
  5078 ;;		None
  5079 ;; Auto vars:     Size  Location     Type
  5080 ;;  res             2    4[BANK0 ] int 
  5081 ;; Return value:  Size  Location     Type
  5082 ;;                  1    wreg      void 
  5083 ;; Registers used:
  5084 ;;		wreg, status,2, status,0, cstack
  5085 ;; Tracked objects:
  5086 ;;		On entry : 0/0
  5087 ;;		On exit  : 0/0
  5088 ;;		Unchanged: 0/0
  5089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5090 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5091 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5092 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5093 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5094 ;;Total ram usage:        4 bytes
  5095 ;; Hardware stack levels used:    1
  5096 ;; Hardware stack levels required when called:    8
  5097 ;; This function calls:
  5098 ;;		_readADC
  5099 ;; This function is called by:
  5100 ;;		_Loading
  5101 ;;		_getIR
  5102 ;; This function uses a non-reentrant model
  5103 ;;
  5104                           
  5105                           	psect	text7
  5106  005464                     __ptext7:
  5107                           	opt stack 0
  5108  005464                     _readIR:
  5109                           	opt stack 20
  5110                           
  5111                           ;ADCFunctionality.c: 24: readADC(0);
  5112                           
  5113                           ; BSR set to: 0
  5114                           ;incstack = 0
  5115  005464  0E00               	movlw	0
  5116  005466  ECFB  F02C         	call	_readADC
  5117                           
  5118                           ;ADCFunctionality.c: 25: int res = ADRESH<<8 | ADRESL;
  5119  00546A  50C3               	movf	4035,w,c	;volatile
  5120  00546C  CFC4 F082          	movff	4036,??_readIR	;volatile
  5121  005470  0100               	movlb	0	; () banked
  5122  005472  6B83               	clrf	(??_readIR+1)& (0+255),b
  5123  005474  C082  F083         	movff	??_readIR,??_readIR+1
  5124  005478  0100               	movlb	0	; () banked
  5125  00547A  6B82               	clrf	??_readIR& (0+255),b
  5126  00547C  0100               	movlb	0	; () banked
  5127  00547E  1182               	iorwf	??_readIR& (0+255),w,b
  5128  005480  0100               	movlb	0	; () banked
  5129  005482  6F84               	movwf	readIR@res& (0+255),b
  5130  005484  0100               	movlb	0	; () banked
  5131  005486  5183               	movf	(??_readIR+1)& (0+255),w,b
  5132  005488  0100               	movlb	0	; () banked
  5133  00548A  6F85               	movwf	(readIR@res+1)& (0+255),b
  5134                           
  5135                           ; BSR set to: 0
  5136                           ;ADCFunctionality.c: 26: IR_signal = (res > 800) ? 1 : 0;
  5137  00548C  0100               	movlb	0	; () banked
  5138  00548E  BF85               	btfsc	(readIR@res+1)& (0+255),7,b
  5139  005490  D00A               	goto	u5160
  5140  005492  0E21               	movlw	33
  5141  005494  0100               	movlb	0	; () banked
  5142  005496  5D84               	subwf	readIR@res& (0+255),w,b
  5143  005498  0E03               	movlw	3
  5144  00549A  0100               	movlb	0	; () banked
  5145  00549C  5985               	subwfb	(readIR@res+1)& (0+255),w,b
  5146  00549E  A0D8               	btfss	status,0,c
  5147  0054A0  D002               	goto	u5160
  5148  0054A2  0E01               	movlw	1
  5149  0054A4  D001               	goto	u5170
  5150  0054A6                     u5160:
  5151  0054A6  0E00               	movlw	0
  5152  0054A8                     u5170:
  5153  0054A8  0100               	movlb	0	; () banked
  5154  0054AA  6FE0               	movwf	_IR_signal& (0+255),b
  5155  0054AC  6BE1               	clrf	(_IR_signal+1)& (0+255),b
  5156                           
  5157                           ; BSR set to: 0
  5158  0054AE  0012               	return		;funcret
  5159  0054B0                     __end_of_readIR:
  5160                           	opt stack 0
  5161                           tblptru	equ	0xFF8
  5162                           tblptrh	equ	0xFF7
  5163                           tblptrl	equ	0xFF6
  5164                           tablat	equ	0xFF5
  5165                           prodh	equ	0xFF4
  5166                           prodl	equ	0xFF3
  5167                           postinc0	equ	0xFEE
  5168                           wreg	equ	0xFE8
  5169                           postdec1	equ	0xFE5
  5170                           fsr1l	equ	0xFE1
  5171                           indf2	equ	0xFDF
  5172                           postinc2	equ	0xFDE
  5173                           postdec2	equ	0xFDD
  5174                           fsr2h	equ	0xFDA
  5175                           fsr2l	equ	0xFD9
  5176                           status	equ	0xFD8
  5177                           
  5178 ;; *************** function _ID *****************
  5179 ;; Defined at:
  5180 ;;		line 273 in file "sort.c"
  5181 ;; Parameters:    Size  Location     Type
  5182 ;;		None
  5183 ;; Auto vars:     Size  Location     Type
  5184 ;;  i               2   55[BANK0 ] int 
  5185 ;;  i               2   51[BANK0 ] int 
  5186 ;;  i               2   53[BANK0 ] int 
  5187 ;;  i               2   49[BANK0 ] int 
  5188 ;;  i               2   47[BANK0 ] int 
  5189 ;;  n               2   64[BANK0 ] const int 
  5190 ;;  res3            2   62[BANK0 ] int 
  5191 ;;  res2            2   60[BANK0 ] int 
  5192 ;;  res1            2   58[BANK0 ] int 
  5193 ;;  time            1   57[BANK0 ] const unsigned char 
  5194 ;; Return value:  Size  Location     Type
  5195 ;;                  1    wreg      void 
  5196 ;; Registers used:
  5197 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5198 ;; Tracked objects:
  5199 ;;		On entry : 0/0
  5200 ;;		On exit  : 0/0
  5201 ;;		Unchanged: 0/0
  5202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5203 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5204 ;;      Locals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5205 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5206 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5207 ;;Total ram usage:       23 bytes
  5208 ;; Hardware stack levels used:    1
  5209 ;; Hardware stack levels required when called:   10
  5210 ;; This function calls:
  5211 ;;		___awdiv
  5212 ;;		___awtoft
  5213 ;;		___ftge
  5214 ;;		_delay_ms
  5215 ;;		_lcdInst
  5216 ;;		_printf
  5217 ;;		_readCOND
  5218 ;; This function is called by:
  5219 ;;		_sort
  5220 ;; This function uses a non-reentrant model
  5221 ;;
  5222                           
  5223                           	psect	text8
  5224  001786                     __ptext8:
  5225                           	opt stack 0
  5226  001786                     _ID:
  5227                           	opt stack 19
  5228                           
  5229                           ;sort.c: 274: if(f_can_coming_to_ID){
  5230                           
  5231                           ; BSR set to: 0
  5232                           ;incstack = 0
  5233  001786  0101               	movlb	1	; () banked
  5234  001788  5131               	movf	_f_can_coming_to_ID& (0+255),w,b
  5235  00178A  0101               	movlb	1	; () banked
  5236  00178C  1132               	iorwf	(_f_can_coming_to_ID+1)& (0+255),w,b
  5237  00178E  B4D8               	btfsc	status,2,c
  5238  001790  0012               	return	
  5239                           
  5240                           ; BSR set to: 1
  5241                           ;sort.c: 276: _delay((unsigned long)((1000)*(32000000/4000.0)));
  5242  001792  0E29               	movlw	41
  5243  001794  0100               	movlb	0	; () banked
  5244  001796  6FAC               	movwf	(??_ID+1)& (0+255),b
  5245  001798  0E96               	movlw	150
  5246  00179A  0100               	movlb	0	; () banked
  5247  00179C  6FAB               	movwf	??_ID& (0+255),b
  5248  00179E  0E7F               	movlw	127
  5249  0017A0                     u10107:
  5250  0017A0  2EE8               	decfsz	wreg,f,c
  5251  0017A2  D7FE               	bra	u10107
  5252  0017A4  2FAB               	decfsz	??_ID& (0+255),f,b
  5253  0017A6  D7FC               	bra	u10107
  5254  0017A8  2FAC               	decfsz	(??_ID+1)& (0+255),f,b
  5255  0017AA  D7FA               	bra	u10107
  5256                           
  5257                           ;sort.c: 278: f_arm_position = 0;
  5258  0017AC  0E00               	movlw	0
  5259  0017AE  0100               	movlb	0	; () banked
  5260  0017B0  6FE9               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  5261  0017B2  0E00               	movlw	0
  5262  0017B4  6FE8               	movwf	_f_arm_position& (0+255),b	;volatile
  5263                           
  5264                           ; BSR set to: 0
  5265                           ;sort.c: 280: LATAbits.LATA3 = 1;
  5266  0017B6  8689               	bsf	3977,3,c	;volatile
  5267                           
  5268                           ; BSR set to: 0
  5269                           ;sort.c: 283: const int n = 10;
  5270  0017B8  0E00               	movlw	0
  5271  0017BA  0100               	movlb	0	; () banked
  5272  0017BC  6FC1               	movwf	(ID@n+1)& (0+255),b
  5273  0017BE  0E0A               	movlw	10
  5274  0017C0  6FC0               	movwf	ID@n& (0+255),b
  5275                           
  5276                           ; BSR set to: 0
  5277                           ;sort.c: 284: const unsigned char time = (600 / n);
  5278  0017C2  0E02               	movlw	2
  5279  0017C4  0100               	movlb	0	; () banked
  5280  0017C6  6F87               	movwf	(___awdiv@dividend+1)& (0+255),b
  5281  0017C8  0E58               	movlw	88
  5282  0017CA  6F86               	movwf	___awdiv@dividend& (0+255),b
  5283  0017CC  C0C0  F088         	movff	ID@n,___awdiv@divisor
  5284  0017D0  C0C1  F089         	movff	ID@n+1,___awdiv@divisor+1
  5285  0017D4  EC05  F025         	call	___awdiv	;wreg free
  5286  0017D8  0100               	movlb	0	; () banked
  5287  0017DA  5186               	movf	?___awdiv& (0+255),w,b
  5288  0017DC  0100               	movlb	0	; () banked
  5289  0017DE  6FB9               	movwf	ID@time& (0+255),b
  5290                           
  5291                           ; BSR set to: 0
  5292                           ;sort.c: 285: int res1 = 0;
  5293  0017E0  0E00               	movlw	0
  5294  0017E2  0100               	movlb	0	; () banked
  5295  0017E4  6FBB               	movwf	(ID@res1+1)& (0+255),b
  5296  0017E6  0E00               	movlw	0
  5297  0017E8  6FBA               	movwf	ID@res1& (0+255),b
  5298                           
  5299                           ; BSR set to: 0
  5300                           ;sort.c: 286: int res2 = 0;
  5301  0017EA  0E00               	movlw	0
  5302  0017EC  0100               	movlb	0	; () banked
  5303  0017EE  6FBD               	movwf	(ID@res2+1)& (0+255),b
  5304  0017F0  0E00               	movlw	0
  5305  0017F2  6FBC               	movwf	ID@res2& (0+255),b
  5306                           
  5307                           ; BSR set to: 0
  5308                           ;sort.c: 287: int res3 = 0;
  5309  0017F4  0E00               	movlw	0
  5310  0017F6  0100               	movlb	0	; () banked
  5311  0017F8  6FBF               	movwf	(ID@res3+1)& (0+255),b
  5312  0017FA  0E00               	movlw	0
  5313  0017FC  6FBE               	movwf	ID@res3& (0+255),b
  5314                           
  5315                           ; BSR set to: 0
  5316                           ;sort.c: 288: for(int i = 0; i<n; i++){
  5317  0017FE  0E00               	movlw	0
  5318  001800  0100               	movlb	0	; () banked
  5319  001802  6FB0               	movwf	(ID@i+1)& (0+255),b
  5320  001804  0E00               	movlw	0
  5321  001806  6FAF               	movwf	ID@i& (0+255),b
  5322  001808                     l8048:
  5323                           
  5324                           ; BSR set to: 0
  5325  001808  0100               	movlb	0	; () banked
  5326  00180A  51C0               	movf	ID@n& (0+255),w,b
  5327  00180C  0100               	movlb	0	; () banked
  5328  00180E  5DAF               	subwf	ID@i& (0+255),w,b
  5329  001810  0100               	movlb	0	; () banked
  5330  001812  51B0               	movf	(ID@i+1)& (0+255),w,b
  5331  001814  0A80               	xorlw	128
  5332  001816  0100               	movlb	0	; () banked
  5333  001818  6FAB               	movwf	??_ID& (0+255),b
  5334  00181A  0100               	movlb	0	; () banked
  5335  00181C  51C1               	movf	(ID@n+1)& (0+255),w,b
  5336  00181E  0A80               	xorlw	128
  5337  001820  0100               	movlb	0	; () banked
  5338  001822  59AB               	subwfb	??_ID& (0+255),w,b
  5339  001824  B0D8               	btfsc	status,0,c
  5340  001826  D012               	goto	l845
  5341                           
  5342                           ; BSR set to: 0
  5343                           ;sort.c: 289: delay_ms(time);
  5344                           
  5345                           ; BSR set to: 0
  5346                           
  5347                           ; BSR set to: 0
  5348  001828  0100               	movlb	0	; () banked
  5349  00182A  51B9               	movf	ID@time& (0+255),w,b
  5350  00182C  EC26  F02D         	call	_delay_ms
  5351                           
  5352                           ;sort.c: 290: readCOND();
  5353  001830  EC58  F02A         	call	_readCOND	;wreg free
  5354                           
  5355                           ;sort.c: 291: res1 += COND_signal;
  5356  001834  0100               	movlb	0	; () banked
  5357  001836  51DE               	movf	_COND_signal& (0+255),w,b
  5358  001838  0100               	movlb	0	; () banked
  5359  00183A  27BA               	addwf	ID@res1& (0+255),f,b
  5360  00183C  0100               	movlb	0	; () banked
  5361  00183E  51DF               	movf	(_COND_signal+1)& (0+255),w,b
  5362  001840  0100               	movlb	0	; () banked
  5363  001842  23BB               	addwfc	(ID@res1+1)& (0+255),f,b
  5364                           
  5365                           ; BSR set to: 0
  5366  001844  0100               	movlb	0	; () banked
  5367  001846  4BAF               	infsnz	ID@i& (0+255),f,b
  5368  001848  2BB0               	incf	(ID@i+1)& (0+255),f,b
  5369  00184A  D7DE               	goto	l8048
  5370  00184C                     l845:
  5371                           
  5372                           ; BSR set to: 0
  5373                           ;sort.c: 292: }
  5374                           ;sort.c: 293: LATAbits.LATA3 = 0;
  5375  00184C  9689               	bcf	3977,3,c	;volatile
  5376                           
  5377                           ; BSR set to: 0
  5378                           ;sort.c: 294: _delay((unsigned long)((200)*(32000000/4000.0)));
  5379  00184E  0E09               	movlw	9
  5380  001850  0100               	movlb	0	; () banked
  5381  001852  6FAC               	movwf	(??_ID+1)& (0+255),b
  5382  001854  0E1E               	movlw	30
  5383  001856  0100               	movlb	0	; () banked
  5384  001858  6FAB               	movwf	??_ID& (0+255),b
  5385  00185A  0EE4               	movlw	228
  5386  00185C                     u10117:
  5387  00185C  2EE8               	decfsz	wreg,f,c
  5388  00185E  D7FE               	bra	u10117
  5389  001860  2FAB               	decfsz	??_ID& (0+255),f,b
  5390  001862  D7FC               	bra	u10117
  5391  001864  2FAC               	decfsz	(??_ID+1)& (0+255),f,b
  5392  001866  D7FA               	bra	u10117
  5393  001868  F000               	nop	
  5394                           
  5395                           ;sort.c: 295: LATAbits.LATA3 = 1;
  5396  00186A  8689               	bsf	3977,3,c	;volatile
  5397                           
  5398                           ;sort.c: 296: for(int i = 0; i<n; i++){
  5399  00186C  0E00               	movlw	0
  5400  00186E  0100               	movlb	0	; () banked
  5401  001870  6FB2               	movwf	(ID@i_1141+1)& (0+255),b
  5402  001872  0E00               	movlw	0
  5403  001874  6FB1               	movwf	ID@i_1141& (0+255),b
  5404  001876                     l8066:
  5405                           
  5406                           ; BSR set to: 0
  5407  001876  0100               	movlb	0	; () banked
  5408  001878  51C0               	movf	ID@n& (0+255),w,b
  5409  00187A  0100               	movlb	0	; () banked
  5410  00187C  5DB1               	subwf	ID@i_1141& (0+255),w,b
  5411  00187E  0100               	movlb	0	; () banked
  5412  001880  51B2               	movf	(ID@i_1141+1)& (0+255),w,b
  5413  001882  0A80               	xorlw	128
  5414  001884  0100               	movlb	0	; () banked
  5415  001886  6FAB               	movwf	??_ID& (0+255),b
  5416  001888  0100               	movlb	0	; () banked
  5417  00188A  51C1               	movf	(ID@n+1)& (0+255),w,b
  5418  00188C  0A80               	xorlw	128
  5419  00188E  0100               	movlb	0	; () banked
  5420  001890  59AB               	subwfb	??_ID& (0+255),w,b
  5421  001892  B0D8               	btfsc	status,0,c
  5422  001894  D012               	goto	l8078
  5423                           
  5424                           ; BSR set to: 0
  5425                           ;sort.c: 297: delay_ms(time);
  5426                           
  5427                           ; BSR set to: 0
  5428                           
  5429                           ; BSR set to: 0
  5430  001896  0100               	movlb	0	; () banked
  5431  001898  51B9               	movf	ID@time& (0+255),w,b
  5432  00189A  EC26  F02D         	call	_delay_ms
  5433                           
  5434                           ;sort.c: 298: readCOND();
  5435  00189E  EC58  F02A         	call	_readCOND	;wreg free
  5436                           
  5437                           ;sort.c: 299: res2 += COND_signal;
  5438  0018A2  0100               	movlb	0	; () banked
  5439  0018A4  51DE               	movf	_COND_signal& (0+255),w,b
  5440  0018A6  0100               	movlb	0	; () banked
  5441  0018A8  27BC               	addwf	ID@res2& (0+255),f,b
  5442  0018AA  0100               	movlb	0	; () banked
  5443  0018AC  51DF               	movf	(_COND_signal+1)& (0+255),w,b
  5444  0018AE  0100               	movlb	0	; () banked
  5445  0018B0  23BD               	addwfc	(ID@res2+1)& (0+255),f,b
  5446                           
  5447                           ; BSR set to: 0
  5448  0018B2  0100               	movlb	0	; () banked
  5449  0018B4  4BB1               	infsnz	ID@i_1141& (0+255),f,b
  5450  0018B6  2BB2               	incf	(ID@i_1141+1)& (0+255),f,b
  5451  0018B8  D7DE               	goto	l8066
  5452  0018BA                     l8078:
  5453                           
  5454                           ; BSR set to: 0
  5455                           ;sort.c: 300: }
  5456                           ;sort.c: 301: res1 = ((res1 / n) > 0.3) ? 1 : 0;
  5457  0018BA  0E9A               	movlw	154
  5458  0018BC  0100               	movlb	0	; () banked
  5459  0018BE  6F92               	movwf	___ftge@ff1& (0+255),b
  5460  0018C0  0E99               	movlw	153
  5461  0018C2  0100               	movlb	0	; () banked
  5462  0018C4  6F93               	movwf	(___ftge@ff1+1)& (0+255),b
  5463  0018C6  0E3E               	movlw	62
  5464  0018C8  0100               	movlb	0	; () banked
  5465  0018CA  6F94               	movwf	(___ftge@ff1+2)& (0+255),b
  5466  0018CC  C0C0  F088         	movff	ID@n,___awdiv@divisor
  5467  0018D0  C0C1  F089         	movff	ID@n+1,___awdiv@divisor+1
  5468  0018D4  C0BA  F086         	movff	ID@res1,___awdiv@dividend
  5469  0018D8  C0BB  F087         	movff	ID@res1+1,___awdiv@dividend+1
  5470  0018DC  EC05  F025         	call	___awdiv	;wreg free
  5471  0018E0  C086  F08E         	movff	?___awdiv,___awtoft@c
  5472  0018E4  C087  F08F         	movff	?___awdiv+1,___awtoft@c+1
  5473  0018E8  ECC7  F02A         	call	___awtoft	;wreg free
  5474  0018EC  C08E  F095         	movff	?___awtoft,___ftge@ff2
  5475  0018F0  C08F  F096         	movff	?___awtoft+1,___ftge@ff2+1
  5476  0018F4  C090  F097         	movff	?___awtoft+2,___ftge@ff2+2
  5477  0018F8  EC41  F024         	call	___ftge	;wreg free
  5478  0018FC  0100               	movlb	0	; () banked
  5479  0018FE  B0D8               	btfsc	status,0,c
  5480  001900  D002               	goto	u6850
  5481  001902  0E01               	movlw	1
  5482  001904  D001               	goto	u6860
  5483  001906                     u6850:
  5484  001906  0E00               	movlw	0
  5485  001908                     u6860:
  5486  001908  0100               	movlb	0	; () banked
  5487  00190A  6FBA               	movwf	ID@res1& (0+255),b
  5488  00190C  6BBB               	clrf	(ID@res1+1)& (0+255),b
  5489                           
  5490                           ;sort.c: 302: res2 = ((res2 / n) > 0.3) ? 1 : 0;
  5491  00190E  0E9A               	movlw	154
  5492  001910  0100               	movlb	0	; () banked
  5493  001912  6F92               	movwf	___ftge@ff1& (0+255),b
  5494  001914  0E99               	movlw	153
  5495  001916  0100               	movlb	0	; () banked
  5496  001918  6F93               	movwf	(___ftge@ff1+1)& (0+255),b
  5497  00191A  0E3E               	movlw	62
  5498  00191C  0100               	movlb	0	; () banked
  5499  00191E  6F94               	movwf	(___ftge@ff1+2)& (0+255),b
  5500  001920  C0C0  F088         	movff	ID@n,___awdiv@divisor
  5501  001924  C0C1  F089         	movff	ID@n+1,___awdiv@divisor+1
  5502  001928  C0BC  F086         	movff	ID@res2,___awdiv@dividend
  5503  00192C  C0BD  F087         	movff	ID@res2+1,___awdiv@dividend+1
  5504  001930  EC05  F025         	call	___awdiv	;wreg free
  5505  001934  C086  F08E         	movff	?___awdiv,___awtoft@c
  5506  001938  C087  F08F         	movff	?___awdiv+1,___awtoft@c+1
  5507  00193C  ECC7  F02A         	call	___awtoft	;wreg free
  5508  001940  C08E  F095         	movff	?___awtoft,___ftge@ff2
  5509  001944  C08F  F096         	movff	?___awtoft+1,___ftge@ff2+1
  5510  001948  C090  F097         	movff	?___awtoft+2,___ftge@ff2+2
  5511  00194C  EC41  F024         	call	___ftge	;wreg free
  5512  001950  0100               	movlb	0	; () banked
  5513  001952  B0D8               	btfsc	status,0,c
  5514  001954  D002               	goto	u6870
  5515  001956  0E01               	movlw	1
  5516  001958  D001               	goto	u6880
  5517  00195A                     u6870:
  5518  00195A  0E00               	movlw	0
  5519  00195C                     u6880:
  5520  00195C  0100               	movlb	0	; () banked
  5521  00195E  6FBC               	movwf	ID@res2& (0+255),b
  5522  001960  6BBD               	clrf	(ID@res2+1)& (0+255),b
  5523                           
  5524                           ; BSR set to: 0
  5525                           ;sort.c: 305: sensor_outputs[1] = (res1 || res2);
  5526  001962  0E01               	movlw	1
  5527  001964  0100               	movlb	0	; () banked
  5528  001966  6FAD               	movwf	_ID$1142& (0+255),b
  5529                           
  5530                           ; BSR set to: 0
  5531  001968  0100               	movlb	0	; () banked
  5532  00196A  51BA               	movf	ID@res1& (0+255),w,b
  5533  00196C  0100               	movlb	0	; () banked
  5534  00196E  11BB               	iorwf	(ID@res1+1)& (0+255),w,b
  5535  001970  A4D8               	btfss	status,2,c
  5536  001972  D009               	goto	l8088
  5537                           
  5538                           ; BSR set to: 0
  5539  001974  0100               	movlb	0	; () banked
  5540  001976  51BC               	movf	ID@res2& (0+255),w,b
  5541  001978  0100               	movlb	0	; () banked
  5542  00197A  11BD               	iorwf	(ID@res2+1)& (0+255),w,b
  5543  00197C  A4D8               	btfss	status,2,c
  5544  00197E  D003               	goto	l8088
  5545                           
  5546                           ; BSR set to: 0
  5547  001980  0E00               	movlw	0
  5548  001982  0100               	movlb	0	; () banked
  5549  001984  6FAD               	movwf	_ID$1142& (0+255),b
  5550  001986                     l8088:
  5551                           
  5552                           ; BSR set to: 0
  5553  001986  C0AD  F0DC         	movff	_ID$1142,_sensor_outputs+2
  5554  00198A  0100               	movlb	0	; () banked
  5555  00198C  6BDD               	clrf	(_sensor_outputs+3)& (0+255),b
  5556                           
  5557                           ; BSR set to: 0
  5558                           ;sort.c: 306: LATAbits.LATA3 = 0;
  5559  00198E  9689               	bcf	3977,3,c	;volatile
  5560                           
  5561                           ; BSR set to: 0
  5562                           ;sort.c: 308: if(sensor_outputs[0]){
  5563  001990  0100               	movlb	0	; () banked
  5564  001992  51DA               	movf	_sensor_outputs& (0+255),w,b
  5565  001994  0100               	movlb	0	; () banked
  5566  001996  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  5567  001998  B4D8               	btfsc	status,2,c
  5568  00199A  D077               	goto	l8126
  5569                           
  5570                           ; BSR set to: 0
  5571                           ;sort.c: 309: _delay((unsigned long)((200)*(32000000/4000.0)));
  5572  00199C  0E09               	movlw	9
  5573  00199E  0100               	movlb	0	; () banked
  5574  0019A0  6FAC               	movwf	(??_ID+1)& (0+255),b
  5575  0019A2  0E1E               	movlw	30
  5576  0019A4  0100               	movlb	0	; () banked
  5577  0019A6  6FAB               	movwf	??_ID& (0+255),b
  5578  0019A8  0EE4               	movlw	228
  5579  0019AA                     u10127:
  5580  0019AA  2EE8               	decfsz	wreg,f,c
  5581  0019AC  D7FE               	bra	u10127
  5582  0019AE  2FAB               	decfsz	??_ID& (0+255),f,b
  5583  0019B0  D7FC               	bra	u10127
  5584  0019B2  2FAC               	decfsz	(??_ID+1)& (0+255),f,b
  5585  0019B4  D7FA               	bra	u10127
  5586  0019B6  F000               	nop	
  5587                           
  5588                           ;sort.c: 310: LATAbits.LATA3 = 1;
  5589  0019B8  8689               	bsf	3977,3,c	;volatile
  5590                           
  5591                           ;sort.c: 311: for(int i = 0; i<n; i++){
  5592  0019BA  0E00               	movlw	0
  5593  0019BC  0100               	movlb	0	; () banked
  5594  0019BE  6FB4               	movwf	(ID@i_1143+1)& (0+255),b
  5595  0019C0  0E00               	movlw	0
  5596  0019C2  6FB3               	movwf	ID@i_1143& (0+255),b
  5597  0019C4                     l8100:
  5598                           
  5599                           ; BSR set to: 0
  5600  0019C4  0100               	movlb	0	; () banked
  5601  0019C6  51C0               	movf	ID@n& (0+255),w,b
  5602  0019C8  0100               	movlb	0	; () banked
  5603  0019CA  5DB3               	subwf	ID@i_1143& (0+255),w,b
  5604  0019CC  0100               	movlb	0	; () banked
  5605  0019CE  51B4               	movf	(ID@i_1143+1)& (0+255),w,b
  5606  0019D0  0A80               	xorlw	128
  5607  0019D2  0100               	movlb	0	; () banked
  5608  0019D4  6FAB               	movwf	??_ID& (0+255),b
  5609  0019D6  0100               	movlb	0	; () banked
  5610  0019D8  51C1               	movf	(ID@n+1)& (0+255),w,b
  5611  0019DA  0A80               	xorlw	128
  5612  0019DC  0100               	movlb	0	; () banked
  5613  0019DE  59AB               	subwfb	??_ID& (0+255),w,b
  5614  0019E0  B0D8               	btfsc	status,0,c
  5615  0019E2  D012               	goto	l8112
  5616                           
  5617                           ; BSR set to: 0
  5618                           ;sort.c: 312: delay_ms(time);
  5619                           
  5620                           ; BSR set to: 0
  5621                           
  5622                           ; BSR set to: 0
  5623  0019E4  0100               	movlb	0	; () banked
  5624  0019E6  51B9               	movf	ID@time& (0+255),w,b
  5625  0019E8  EC26  F02D         	call	_delay_ms
  5626                           
  5627                           ;sort.c: 313: readCOND();
  5628  0019EC  EC58  F02A         	call	_readCOND	;wreg free
  5629                           
  5630                           ;sort.c: 314: res3 += COND_signal;
  5631  0019F0  0100               	movlb	0	; () banked
  5632  0019F2  51DE               	movf	_COND_signal& (0+255),w,b
  5633  0019F4  0100               	movlb	0	; () banked
  5634  0019F6  27BE               	addwf	ID@res3& (0+255),f,b
  5635  0019F8  0100               	movlb	0	; () banked
  5636  0019FA  51DF               	movf	(_COND_signal+1)& (0+255),w,b
  5637  0019FC  0100               	movlb	0	; () banked
  5638  0019FE  23BF               	addwfc	(ID@res3+1)& (0+255),f,b
  5639                           
  5640                           ; BSR set to: 0
  5641  001A00  0100               	movlb	0	; () banked
  5642  001A02  4BB3               	infsnz	ID@i_1143& (0+255),f,b
  5643  001A04  2BB4               	incf	(ID@i_1143+1)& (0+255),f,b
  5644  001A06  D7DE               	goto	l8100
  5645  001A08                     l8112:
  5646                           
  5647                           ; BSR set to: 0
  5648                           ;sort.c: 315: }
  5649                           ;sort.c: 316: res3 = ((res3 / n) > 0.3) ? 1 : 0;
  5650  001A08  0E9A               	movlw	154
  5651  001A0A  0100               	movlb	0	; () banked
  5652  001A0C  6F92               	movwf	___ftge@ff1& (0+255),b
  5653  001A0E  0E99               	movlw	153
  5654  001A10  0100               	movlb	0	; () banked
  5655  001A12  6F93               	movwf	(___ftge@ff1+1)& (0+255),b
  5656  001A14  0E3E               	movlw	62
  5657  001A16  0100               	movlb	0	; () banked
  5658  001A18  6F94               	movwf	(___ftge@ff1+2)& (0+255),b
  5659  001A1A  C0C0  F088         	movff	ID@n,___awdiv@divisor
  5660  001A1E  C0C1  F089         	movff	ID@n+1,___awdiv@divisor+1
  5661  001A22  C0BE  F086         	movff	ID@res3,___awdiv@dividend
  5662  001A26  C0BF  F087         	movff	ID@res3+1,___awdiv@dividend+1
  5663  001A2A  EC05  F025         	call	___awdiv	;wreg free
  5664  001A2E  C086  F08E         	movff	?___awdiv,___awtoft@c
  5665  001A32  C087  F08F         	movff	?___awdiv+1,___awtoft@c+1
  5666  001A36  ECC7  F02A         	call	___awtoft	;wreg free
  5667  001A3A  C08E  F095         	movff	?___awtoft,___ftge@ff2
  5668  001A3E  C08F  F096         	movff	?___awtoft+1,___ftge@ff2+1
  5669  001A42  C090  F097         	movff	?___awtoft+2,___ftge@ff2+2
  5670  001A46  EC41  F024         	call	___ftge	;wreg free
  5671  001A4A  0100               	movlb	0	; () banked
  5672  001A4C  B0D8               	btfsc	status,0,c
  5673  001A4E  D002               	goto	u6940
  5674  001A50  0E01               	movlw	1
  5675  001A52  D001               	goto	u6950
  5676  001A54                     u6940:
  5677  001A54  0E00               	movlw	0
  5678  001A56                     u6950:
  5679  001A56  0100               	movlb	0	; () banked
  5680  001A58  6FBE               	movwf	ID@res3& (0+255),b
  5681  001A5A  6BBF               	clrf	(ID@res3+1)& (0+255),b
  5682                           
  5683                           ; BSR set to: 0
  5684                           ;sort.c: 317: sensor_outputs[1] = (sensor_outputs[1] || res3);
  5685  001A5C  0E01               	movlw	1
  5686  001A5E  0100               	movlb	0	; () banked
  5687  001A60  6FAE               	movwf	_ID$1144& (0+255),b
  5688                           
  5689                           ; BSR set to: 0
  5690  001A62  0100               	movlb	0	; () banked
  5691  001A64  51DC               	movf	(_sensor_outputs+2)& (0+255),w,b
  5692  001A66  0100               	movlb	0	; () banked
  5693  001A68  11DD               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  5694  001A6A  A4D8               	btfss	status,2,c
  5695  001A6C  D009               	goto	l8122
  5696                           
  5697                           ; BSR set to: 0
  5698  001A6E  0100               	movlb	0	; () banked
  5699  001A70  51BE               	movf	ID@res3& (0+255),w,b
  5700  001A72  0100               	movlb	0	; () banked
  5701  001A74  11BF               	iorwf	(ID@res3+1)& (0+255),w,b
  5702  001A76  A4D8               	btfss	status,2,c
  5703  001A78  D003               	goto	l8122
  5704                           
  5705                           ; BSR set to: 0
  5706  001A7A  0E00               	movlw	0
  5707  001A7C  0100               	movlb	0	; () banked
  5708  001A7E  6FAE               	movwf	_ID$1144& (0+255),b
  5709  001A80                     l8122:
  5710                           
  5711                           ; BSR set to: 0
  5712  001A80  C0AE  F0DC         	movff	_ID$1144,_sensor_outputs+2
  5713  001A84  0100               	movlb	0	; () banked
  5714  001A86  6BDD               	clrf	(_sensor_outputs+3)& (0+255),b
  5715                           
  5716                           ; BSR set to: 0
  5717                           ;sort.c: 318: LATAbits.LATA3 = 0;
  5718  001A88  9689               	bcf	3977,3,c	;volatile
  5719  001A8A                     l8126:
  5720                           
  5721                           ; BSR set to: 0
  5722                           ;sort.c: 319: }
  5723                           ;sort.c: 322: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
  5724  001A8A  0E01               	movlw	1
  5725  001A8C  EC10  F02E         	call	_lcdInst
  5726  001A90  0E68               	movlw	104
  5727  001A92  0100               	movlb	0	; () banked
  5728  001A94  6FAB               	movwf	??_ID& (0+255),b
  5729  001A96  0EE4               	movlw	228
  5730  001A98                     u10137:
  5731  001A98  2EE8               	decfsz	wreg,f,c
  5732  001A9A  D7FE               	bra	u10137
  5733  001A9C  2FAB               	decfsz	??_ID& (0+255),f,b
  5734  001A9E  D7FC               	bra	u10137
  5735  001AA0  F000               	nop	
  5736  001AA2  0E80               	movlw	128
  5737  001AA4  EC10  F02E         	call	_lcdInst
  5738                           
  5739                           ;sort.c: 323: printf("            F%dM%dL%d", res1, res2, res3);
  5740  001AA8  0EBA               	movlw	low STR_64
  5741  001AAA  0100               	movlb	0	; () banked
  5742  001AAC  6F8E               	movwf	printf@f& (0+255),b
  5743  001AAE  0EFA               	movlw	high STR_64
  5744  001AB0  0100               	movlb	0	; () banked
  5745  001AB2  6F8F               	movwf	(printf@f+1)& (0+255),b
  5746  001AB4  C0BA  F090         	movff	ID@res1,?_printf+2
  5747  001AB8  C0BB  F091         	movff	ID@res1+1,?_printf+3
  5748  001ABC  C0BC  F092         	movff	ID@res2,?_printf+4
  5749  001AC0  C0BD  F093         	movff	ID@res2+1,?_printf+5
  5750  001AC4  C0BE  F094         	movff	ID@res3,?_printf+6
  5751  001AC8  C0BF  F095         	movff	ID@res3+1,?_printf+7
  5752  001ACC  EC16  F00E         	call	_printf	;wreg free
  5753                           
  5754                           ;sort.c: 332: if(!sensor_outputs[0]){
  5755  001AD0  0100               	movlb	0	; () banked
  5756  001AD2  51DA               	movf	_sensor_outputs& (0+255),w,b
  5757  001AD4  0100               	movlb	0	; () banked
  5758  001AD6  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  5759  001AD8  A4D8               	btfss	status,2,c
  5760  001ADA  D016               	goto	l8146
  5761                           
  5762                           ; BSR set to: 0
  5763                           ;sort.c: 333: if(!sensor_outputs[1]){
  5764  001ADC  0100               	movlb	0	; () banked
  5765  001ADE  51DC               	movf	(_sensor_outputs+2)& (0+255),w,b
  5766  001AE0  0100               	movlb	0	; () banked
  5767  001AE2  11DD               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  5768  001AE4  A4D8               	btfss	status,2,c
  5769  001AE6  D008               	goto	l8142
  5770                           
  5771                           ; BSR set to: 0
  5772                           ;sort.c: 334: count_pop_no_tab++;
  5773  001AE8  0101               	movlb	1	; () banked
  5774  001AEA  4B27               	infsnz	_count_pop_no_tab& (0+255),f,b
  5775  001AEC  2B28               	incf	(_count_pop_no_tab+1)& (0+255),f,b
  5776                           
  5777                           ; BSR set to: 1
  5778                           ;sort.c: 335: cur_can = 0;
  5779  001AEE  0E00               	movlw	0
  5780  001AF0  0101               	movlb	1	; () banked
  5781  001AF2  6F2C               	movwf	(_cur_can+1)& (0+255),b
  5782  001AF4  0E00               	movlw	0
  5783  001AF6  D007               	goto	L8
  5784  001AF8                     l8142:
  5785                           
  5786                           ;sort.c: 337: else{
  5787                           ;sort.c: 338: count_pop_w_tab++;
  5788  001AF8  0101               	movlb	1	; () banked
  5789  001AFA  4B29               	infsnz	_count_pop_w_tab& (0+255),f,b
  5790  001AFC  2B2A               	incf	(_count_pop_w_tab+1)& (0+255),f,b
  5791                           
  5792                           ; BSR set to: 1
  5793                           ;sort.c: 339: cur_can = 1;
  5794  001AFE  0E00               	movlw	0
  5795  001B00  0101               	movlb	1	; () banked
  5796  001B02  6F2C               	movwf	(_cur_can+1)& (0+255),b
  5797  001B04  0E01               	movlw	1
  5798  001B06                     L8:
  5799  001B06  6F2B               	movwf	_cur_can& (0+255),b
  5800  001B08                     l8146:
  5801                           
  5802                           ;sort.c: 340: }
  5803                           ;sort.c: 341: }
  5804                           ;sort.c: 342: if(sensor_outputs[0]){
  5805  001B08  0100               	movlb	0	; () banked
  5806  001B0A  51DA               	movf	_sensor_outputs& (0+255),w,b
  5807  001B0C  0100               	movlb	0	; () banked
  5808  001B0E  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  5809  001B10  B4D8               	btfsc	status,2,c
  5810  001B12  D016               	goto	l8158
  5811                           
  5812                           ; BSR set to: 0
  5813                           ;sort.c: 343: if(!sensor_outputs[1]){
  5814  001B14  0100               	movlb	0	; () banked
  5815  001B16  51DC               	movf	(_sensor_outputs+2)& (0+255),w,b
  5816  001B18  0100               	movlb	0	; () banked
  5817  001B1A  11DD               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  5818  001B1C  A4D8               	btfss	status,2,c
  5819  001B1E  D008               	goto	l8154
  5820                           
  5821                           ; BSR set to: 0
  5822                           ;sort.c: 344: count_can_w_lab++;
  5823  001B20  0101               	movlb	1	; () banked
  5824  001B22  4B25               	infsnz	_count_can_w_lab& (0+255),f,b
  5825  001B24  2B26               	incf	(_count_can_w_lab+1)& (0+255),f,b
  5826                           
  5827                           ; BSR set to: 1
  5828                           ;sort.c: 345: cur_can = 2;
  5829  001B26  0E00               	movlw	0
  5830  001B28  0101               	movlb	1	; () banked
  5831  001B2A  6F2C               	movwf	(_cur_can+1)& (0+255),b
  5832  001B2C  0E02               	movlw	2
  5833  001B2E  D007               	goto	L9
  5834  001B30                     l8154:
  5835                           
  5836                           ;sort.c: 347: else{
  5837                           ;sort.c: 348: count_can_no_lab++;
  5838  001B30  0101               	movlb	1	; () banked
  5839  001B32  4B23               	infsnz	_count_can_no_lab& (0+255),f,b
  5840  001B34  2B24               	incf	(_count_can_no_lab+1)& (0+255),f,b
  5841                           
  5842                           ; BSR set to: 1
  5843                           ;sort.c: 349: cur_can = 3;
  5844  001B36  0E00               	movlw	0
  5845  001B38  0101               	movlb	1	; () banked
  5846  001B3A  6F2C               	movwf	(_cur_can+1)& (0+255),b
  5847  001B3C  0E03               	movlw	3
  5848  001B3E                     L9:
  5849  001B3E  6F2B               	movwf	_cur_can& (0+255),b
  5850  001B40                     l8158:
  5851  001B40  0101               	movlb	1	; () banked
  5852  001B42  5135               	movf	_f_can_distributed& (0+255),w,b
  5853  001B44  0101               	movlb	1	; () banked
  5854  001B46  1136               	iorwf	(_f_can_distributed+1)& (0+255),w,b
  5855  001B48  B4D8               	btfsc	status,2,c
  5856  001B4A  D7FA               	goto	l8158
  5857                           
  5858                           ; BSR set to: 1
  5859                           ;sort.c: 355: for(int i=0;i<10000;i++)
  5860                           
  5861                           ; BSR set to: 1
  5862  001B4C  0E00               	movlw	0
  5863  001B4E  0100               	movlb	0	; () banked
  5864  001B50  6FB6               	movwf	(ID@i_1146+1)& (0+255),b
  5865  001B52  0E00               	movlw	0
  5866  001B54  6FB5               	movwf	ID@i_1146& (0+255),b
  5867  001B56                     l8162:
  5868                           
  5869                           ; BSR set to: 0
  5870  001B56  0100               	movlb	0	; () banked
  5871  001B58  BFB6               	btfsc	(ID@i_1146+1)& (0+255),7,b
  5872  001B5A  D008               	goto	l864
  5873  001B5C  0E10               	movlw	16
  5874  001B5E  0100               	movlb	0	; () banked
  5875  001B60  5DB5               	subwf	ID@i_1146& (0+255),w,b
  5876  001B62  0E27               	movlw	39
  5877  001B64  0100               	movlb	0	; () banked
  5878  001B66  59B6               	subwfb	(ID@i_1146+1)& (0+255),w,b
  5879  001B68  B0D8               	btfsc	status,0,c
  5880  001B6A  D00D               	goto	l865
  5881  001B6C                     l864:
  5882                           
  5883                           ; BSR set to: 0
  5884                           ;sort.c: 356: {
  5885                           ;sort.c: 357: LATCbits.LATC0 = 1;
  5886  001B6C  808B               	bsf	3979,0,c	;volatile
  5887                           
  5888                           ; BSR set to: 0
  5889                           ;sort.c: 358: _delay((unsigned long)((10)*(32000000/4000000.0)));
  5890  001B6E  0E1A               	movlw	26
  5891  001B70                     u10147:
  5892  001B70  2EE8               	decfsz	wreg,f,c
  5893  001B72  D7FE               	bra	u10147
  5894  001B74  D000               	nop2	
  5895                           
  5896                           ;sort.c: 359: LATCbits.LATC0 = 0;
  5897  001B76  908B               	bcf	3979,0,c	;volatile
  5898                           
  5899                           ;sort.c: 360: _delay((unsigned long)((90)*(32000000/4000000.0)));
  5900  001B78  0EF0               	movlw	240
  5901  001B7A                     u10157:
  5902  001B7A  2EE8               	decfsz	wreg,f,c
  5903  001B7C  D7FE               	bra	u10157
  5904  001B7E  0100               	movlb	0	; () banked
  5905  001B80  4BB5               	infsnz	ID@i_1146& (0+255),f,b
  5906  001B82  2BB6               	incf	(ID@i_1146+1)& (0+255),f,b
  5907  001B84  D7E8               	goto	l8162
  5908  001B86                     l865:
  5909                           
  5910                           ; BSR set to: 0
  5911                           ;sort.c: 361: }
  5912                           ;sort.c: 363: LATCbits.LATC0 = 0;
  5913  001B86  908B               	bcf	3979,0,c	;volatile
  5914                           
  5915                           ; BSR set to: 0
  5916                           ;sort.c: 365: f_can_coming_to_distribution = 1;
  5917  001B88  0E00               	movlw	0
  5918  001B8A  0101               	movlb	1	; () banked
  5919  001B8C  6F34               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  5920  001B8E  0E01               	movlw	1
  5921  001B90  6F33               	movwf	_f_can_coming_to_distribution& (0+255),b
  5922                           
  5923                           ; BSR set to: 1
  5924                           ;sort.c: 366: _delay((unsigned long)((750)*(32000000/4000.0)));
  5925  001B92  0E1F               	movlw	31
  5926  001B94  0100               	movlb	0	; () banked
  5927  001B96  6FAC               	movwf	(??_ID+1)& (0+255),b
  5928  001B98  0E71               	movlw	113
  5929  001B9A  0100               	movlb	0	; () banked
  5930  001B9C  6FAB               	movwf	??_ID& (0+255),b
  5931  001B9E  0E1E               	movlw	30
  5932  001BA0                     u10167:
  5933  001BA0  2EE8               	decfsz	wreg,f,c
  5934  001BA2  D7FE               	bra	u10167
  5935  001BA4  2FAB               	decfsz	??_ID& (0+255),f,b
  5936  001BA6  D7FC               	bra	u10167
  5937  001BA8  2FAC               	decfsz	(??_ID+1)& (0+255),f,b
  5938  001BAA  D7FA               	bra	u10167
  5939  001BAC  F000               	nop	
  5940                           
  5941                           ;sort.c: 367: LATCbits.LATC0 = 1;
  5942  001BAE  808B               	bsf	3979,0,c	;volatile
  5943                           
  5944                           ;sort.c: 370: if(!f_lastCan){
  5945  001BB0  0100               	movlb	0	; () banked
  5946  001BB2  51EA               	movf	_f_lastCan& (0+255),w,b
  5947  001BB4  0100               	movlb	0	; () banked
  5948  001BB6  11EB               	iorwf	(_f_lastCan+1)& (0+255),w,b
  5949  001BB8  A4D8               	btfss	status,2,c
  5950  001BBA  D032               	goto	l8194
  5951                           
  5952                           ; BSR set to: 0
  5953                           ;sort.c: 371: for(int i=0; i<46; i++){
  5954  001BBC  0E00               	movlw	0
  5955  001BBE  0100               	movlb	0	; () banked
  5956  001BC0  6FB8               	movwf	(ID@i_1147+1)& (0+255),b
  5957  001BC2  0E00               	movlw	0
  5958  001BC4  6FB7               	movwf	ID@i_1147& (0+255),b
  5959                           
  5960                           ; BSR set to: 0
  5961  001BC6  0100               	movlb	0	; () banked
  5962  001BC8  BFB8               	btfsc	(ID@i_1147+1)& (0+255),7,b
  5963  001BCA  D008               	goto	l8186
  5964  001BCC  0100               	movlb	0	; () banked
  5965  001BCE  51B8               	movf	(ID@i_1147+1)& (0+255),w,b
  5966  001BD0  E126               	bnz	l868
  5967  001BD2  0E2E               	movlw	46
  5968  001BD4  0100               	movlb	0	; () banked
  5969  001BD6  5DB7               	subwf	ID@i_1147& (0+255),w,b
  5970  001BD8  B0D8               	btfsc	status,0,c
  5971  001BDA  D021               	goto	l868
  5972  001BDC                     l8186:
  5973                           
  5974                           ; BSR set to: 0
  5975                           ;sort.c: 372: LATBbits.LATB2 = !LATBbits.LATB2;
  5976  001BDC  B48A               	btfsc	3978,2,c	;volatile
  5977  001BDE  D004               	goto	u7070
  5978  001BE0  0100               	movlb	0	; () banked
  5979  001BE2  6BAB               	clrf	??_ID& (0+255),b
  5980  001BE4  2BAB               	incf	??_ID& (0+255),f,b
  5981  001BE6  D002               	goto	u7088
  5982  001BE8                     u7070:
  5983  001BE8  0100               	movlb	0	; () banked
  5984  001BEA  6BAB               	clrf	??_ID& (0+255),b
  5985  001BEC                     u7088:
  5986  001BEC  0100               	movlb	0	; () banked
  5987  001BEE  47AB               	rlncf	??_ID& (0+255),f,b
  5988  001BF0  47AB               	rlncf	??_ID& (0+255),f,b
  5989  001BF2  508A               	movf	3978,w,c	;volatile
  5990  001BF4  0100               	movlb	0	; () banked
  5991  001BF6  19AB               	xorwf	??_ID& (0+255),w,b
  5992  001BF8  0BFB               	andlw	-5
  5993  001BFA  19AB               	xorwf	??_ID& (0+255),w,b
  5994  001BFC  6E8A               	movwf	3978,c	;volatile
  5995                           
  5996                           ; BSR set to: 0
  5997                           ;sort.c: 373: delay_ms(45-i);
  5998  001BFE  0100               	movlb	0	; () banked
  5999  001C00  51B7               	movf	ID@i_1147& (0+255),w,b
  6000  001C02  0800               	sublw	0
  6001  001C04  0F2D               	addlw	45
  6002  001C06  EC26  F02D         	call	_delay_ms
  6003  001C0A  0100               	movlb	0	; () banked
  6004  001C0C  4BB7               	infsnz	ID@i_1147& (0+255),f,b
  6005  001C0E  2BB8               	incf	(ID@i_1147+1)& (0+255),f,b
  6006                           
  6007                           ; BSR set to: 0
  6008  001C10  0100               	movlb	0	; () banked
  6009  001C12  BFB8               	btfsc	(ID@i_1147+1)& (0+255),7,b
  6010  001C14  D7E3               	goto	l8186
  6011  001C16  0100               	movlb	0	; () banked
  6012  001C18  51B8               	movf	(ID@i_1147+1)& (0+255),w,b
  6013  001C1A  E101               	bnz	u7090
  6014  001C1C  D7DA               	goto	L10
  6015  001C1E                     u7090:
  6016  001C1E                     l868:
  6017                           
  6018                           ; BSR set to: 0
  6019                           ;sort.c: 374: }
  6020                           ;sort.c: 375: LATBbits.LATB2 = 1;
  6021  001C1E  848A               	bsf	3978,2,c	;volatile
  6022  001C20                     l8194:
  6023                           
  6024                           ; BSR set to: 0
  6025                           ;sort.c: 376: }
  6026                           ;sort.c: 378: f_can_coming_to_ID = 0;
  6027  001C20  0E00               	movlw	0
  6028  001C22  0101               	movlb	1	; () banked
  6029  001C24  6F32               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  6030  001C26  0E00               	movlw	0
  6031  001C28  6F31               	movwf	_f_can_coming_to_ID& (0+255),b
  6032  001C2A  0012               	return	
  6033  001C2C                     __end_of_ID:
  6034                           	opt stack 0
  6035                           tblptru	equ	0xFF8
  6036                           tblptrh	equ	0xFF7
  6037                           tblptrl	equ	0xFF6
  6038                           tablat	equ	0xFF5
  6039                           prodh	equ	0xFF4
  6040                           prodl	equ	0xFF3
  6041                           postinc0	equ	0xFEE
  6042                           wreg	equ	0xFE8
  6043                           postdec1	equ	0xFE5
  6044                           fsr1l	equ	0xFE1
  6045                           indf2	equ	0xFDF
  6046                           postinc2	equ	0xFDE
  6047                           postdec2	equ	0xFDD
  6048                           fsr2h	equ	0xFDA
  6049                           fsr2l	equ	0xFD9
  6050                           status	equ	0xFD8
  6051                           
  6052 ;; *************** function _readCOND *****************
  6053 ;; Defined at:
  6054 ;;		line 35 in file "ADCFunctionality.c"
  6055 ;; Parameters:    Size  Location     Type
  6056 ;;		None
  6057 ;; Auto vars:     Size  Location     Type
  6058 ;;  res             2    4[BANK0 ] int 
  6059 ;; Return value:  Size  Location     Type
  6060 ;;                  1    wreg      void 
  6061 ;; Registers used:
  6062 ;;		wreg, status,2, status,0, cstack
  6063 ;; Tracked objects:
  6064 ;;		On entry : 0/0
  6065 ;;		On exit  : 0/0
  6066 ;;		Unchanged: 0/0
  6067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6068 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6069 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6070 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6071 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6072 ;;Total ram usage:        4 bytes
  6073 ;; Hardware stack levels used:    1
  6074 ;; Hardware stack levels required when called:    8
  6075 ;; This function calls:
  6076 ;;		_readADC
  6077 ;; This function is called by:
  6078 ;;		_ID
  6079 ;; This function uses a non-reentrant model
  6080 ;;
  6081                           
  6082                           	psect	text9
  6083  0054B0                     __ptext9:
  6084                           	opt stack 0
  6085  0054B0                     _readCOND:
  6086                           	opt stack 20
  6087                           
  6088                           ;ADCFunctionality.c: 36: readADC(2);
  6089                           
  6090                           ; BSR set to: 1
  6091                           ;incstack = 0
  6092  0054B0  0E02               	movlw	2
  6093  0054B2  ECFB  F02C         	call	_readADC
  6094                           
  6095                           ;ADCFunctionality.c: 37: int res = ADRESH<<8 | ADRESL;
  6096  0054B6  50C3               	movf	4035,w,c	;volatile
  6097  0054B8  CFC4 F082          	movff	4036,??_readCOND	;volatile
  6098  0054BC  0100               	movlb	0	; () banked
  6099  0054BE  6B83               	clrf	(??_readCOND+1)& (0+255),b
  6100  0054C0  C082  F083         	movff	??_readCOND,??_readCOND+1
  6101  0054C4  0100               	movlb	0	; () banked
  6102  0054C6  6B82               	clrf	??_readCOND& (0+255),b
  6103  0054C8  0100               	movlb	0	; () banked
  6104  0054CA  1182               	iorwf	??_readCOND& (0+255),w,b
  6105  0054CC  0100               	movlb	0	; () banked
  6106  0054CE  6F84               	movwf	readCOND@res& (0+255),b
  6107  0054D0  0100               	movlb	0	; () banked
  6108  0054D2  5183               	movf	(??_readCOND+1)& (0+255),w,b
  6109  0054D4  0100               	movlb	0	; () banked
  6110  0054D6  6F85               	movwf	(readCOND@res+1)& (0+255),b
  6111                           
  6112                           ; BSR set to: 0
  6113                           ;ADCFunctionality.c: 38: COND_signal = (res > 300) ? 1 : 0;
  6114  0054D8  0100               	movlb	0	; () banked
  6115  0054DA  BF85               	btfsc	(readCOND@res+1)& (0+255),7,b
  6116  0054DC  D00A               	goto	u5930
  6117  0054DE  0E2D               	movlw	45
  6118  0054E0  0100               	movlb	0	; () banked
  6119  0054E2  5D84               	subwf	readCOND@res& (0+255),w,b
  6120  0054E4  0E01               	movlw	1
  6121  0054E6  0100               	movlb	0	; () banked
  6122  0054E8  5985               	subwfb	(readCOND@res+1)& (0+255),w,b
  6123  0054EA  A0D8               	btfss	status,0,c
  6124  0054EC  D002               	goto	u5930
  6125  0054EE  0E01               	movlw	1
  6126  0054F0  D001               	goto	u5940
  6127  0054F2                     u5930:
  6128  0054F2  0E00               	movlw	0
  6129  0054F4                     u5940:
  6130  0054F4  0100               	movlb	0	; () banked
  6131  0054F6  6FDE               	movwf	_COND_signal& (0+255),b
  6132  0054F8  6BDF               	clrf	(_COND_signal+1)& (0+255),b
  6133                           
  6134                           ; BSR set to: 0
  6135  0054FA  0012               	return		;funcret
  6136  0054FC                     __end_of_readCOND:
  6137                           	opt stack 0
  6138                           tblptru	equ	0xFF8
  6139                           tblptrh	equ	0xFF7
  6140                           tblptrl	equ	0xFF6
  6141                           tablat	equ	0xFF5
  6142                           prodh	equ	0xFF4
  6143                           prodl	equ	0xFF3
  6144                           postinc0	equ	0xFEE
  6145                           wreg	equ	0xFE8
  6146                           postdec1	equ	0xFE5
  6147                           fsr1l	equ	0xFE1
  6148                           indf2	equ	0xFDF
  6149                           postinc2	equ	0xFDE
  6150                           postdec2	equ	0xFDD
  6151                           fsr2h	equ	0xFDA
  6152                           fsr2l	equ	0xFD9
  6153                           status	equ	0xFD8
  6154                           
  6155 ;; *************** function _delay_ms *****************
  6156 ;; Defined at:
  6157 ;;		line 670 in file "sort.c"
  6158 ;; Parameters:    Size  Location     Type
  6159 ;;  milliseconds    1    wreg     unsigned char 
  6160 ;; Auto vars:     Size  Location     Type
  6161 ;;  milliseconds    1    1[BANK0 ] unsigned char 
  6162 ;; Return value:  Size  Location     Type
  6163 ;;                  1    wreg      void 
  6164 ;; Registers used:
  6165 ;;		wreg, status,2, status,0, cstack
  6166 ;; Tracked objects:
  6167 ;;		On entry : 0/0
  6168 ;;		On exit  : 0/0
  6169 ;;		Unchanged: 0/0
  6170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6171 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6172 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6173 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6174 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6175 ;;Total ram usage:        2 bytes
  6176 ;; Hardware stack levels used:    1
  6177 ;; Hardware stack levels required when called:    7
  6178 ;; This function calls:
  6179 ;;		Nothing
  6180 ;; This function is called by:
  6181 ;;		_Loading
  6182 ;;		_ID
  6183 ;; This function uses a non-reentrant model
  6184 ;;
  6185                           
  6186                           	psect	text10
  6187  005A4C                     __ptext10:
  6188                           	opt stack 0
  6189  005A4C                     _delay_ms:
  6190                           	opt stack 21
  6191                           
  6192                           ; BSR set to: 0
  6193                           ;incstack = 0
  6194                           ;delay_ms@milliseconds stored from wreg
  6195  005A4C  0100               	movlb	0	; () banked
  6196  005A4E  6F81               	movwf	delay_ms@milliseconds& (0+255),b
  6197                           
  6198                           ;sort.c: 671: while(milliseconds > 0)
  6199  005A50  D00B               	goto	l7398
  6200  005A52                     l7394:
  6201                           
  6202                           ;sort.c: 672: {
  6203                           ;sort.c: 673: milliseconds--;
  6204  005A52  0100               	movlb	0	; () banked
  6205  005A54  0781               	decf	delay_ms@milliseconds& (0+255),f,b
  6206                           
  6207                           ; BSR set to: 0
  6208                           ;sort.c: 674: _delay((unsigned long)((990)*(32000000/4000000.0)));
  6209  005A56  0E0B               	movlw	11
  6210  005A58  0100               	movlb	0	; () banked
  6211  005A5A  6F80               	movwf	??_delay_ms& (0+255),b
  6212  005A5C  0E47               	movlw	71
  6213  005A5E                     u10177:
  6214  005A5E  2EE8               	decfsz	wreg,f,c
  6215  005A60  D7FE               	bra	u10177
  6216  005A62  2F80               	decfsz	??_delay_ms& (0+255),f,b
  6217  005A64  D7FC               	bra	u10177
  6218  005A66  D000               	nop2	
  6219  005A68                     l7398:
  6220  005A68  0100               	movlb	0	; () banked
  6221  005A6A  5181               	movf	delay_ms@milliseconds& (0+255),w,b
  6222  005A6C  0100               	movlb	0	; () banked
  6223  005A6E  B4D8               	btfsc	status,2,c
  6224  005A70  0012               	return	
  6225  005A72  D7EF               	goto	l7394
  6226  005A74                     __end_of_delay_ms:
  6227                           	opt stack 0
  6228                           tblptru	equ	0xFF8
  6229                           tblptrh	equ	0xFF7
  6230                           tblptrl	equ	0xFF6
  6231                           tablat	equ	0xFF5
  6232                           prodh	equ	0xFF4
  6233                           prodl	equ	0xFF3
  6234                           postinc0	equ	0xFEE
  6235                           wreg	equ	0xFE8
  6236                           postdec1	equ	0xFE5
  6237                           fsr1l	equ	0xFE1
  6238                           indf2	equ	0xFDF
  6239                           postinc2	equ	0xFDE
  6240                           postdec2	equ	0xFDD
  6241                           fsr2h	equ	0xFDA
  6242                           fsr2l	equ	0xFD9
  6243                           status	equ	0xFD8
  6244                           
  6245 ;; *************** function ___ftge *****************
  6246 ;; Defined at:
  6247 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
  6248 ;; Parameters:    Size  Location     Type
  6249 ;;  ff1             3   18[BANK0 ] float 
  6250 ;;  ff2             3   21[BANK0 ] float 
  6251 ;; Auto vars:     Size  Location     Type
  6252 ;;		None
  6253 ;; Return value:  Size  Location     Type
  6254 ;;		None               void
  6255 ;; Registers used:
  6256 ;;		wreg, status,2, status,0
  6257 ;; Tracked objects:
  6258 ;;		On entry : 0/0
  6259 ;;		On exit  : 0/0
  6260 ;;		Unchanged: 0/0
  6261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6262 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6263 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6264 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6265 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6266 ;;Total ram usage:        9 bytes
  6267 ;; Hardware stack levels used:    1
  6268 ;; Hardware stack levels required when called:    7
  6269 ;; This function calls:
  6270 ;;		Nothing
  6271 ;; This function is called by:
  6272 ;;		_ID
  6273 ;; This function uses a non-reentrant model
  6274 ;;
  6275                           
  6276                           	psect	text11
  6277  004882                     __ptext11:
  6278                           	opt stack 0
  6279  004882                     ___ftge:
  6280                           	opt stack 21
  6281                           
  6282                           ; BSR set to: 0
  6283                           ;incstack = 0
  6284  004882  0100               	movlb	0	; () banked
  6285  004884  AF94               	btfss	(___ftge@ff1+2)& (0+255),7,b
  6286  004886  D01D               	goto	l7516
  6287                           
  6288                           ; BSR set to: 0
  6289  004888  C092  F098         	movff	___ftge@ff1,??___ftge
  6290  00488C  C093  F099         	movff	___ftge@ff1+1,??___ftge+1
  6291  004890  C094  F09A         	movff	___ftge@ff1+2,??___ftge+2
  6292  004894  0100               	movlb	0	; () banked
  6293  004896  1F98               	comf	??___ftge& (0+255),f,b
  6294  004898  1F99               	comf	(??___ftge+1)& (0+255),f,b
  6295  00489A  1F9A               	comf	(??___ftge+2)& (0+255),f,b
  6296  00489C  2B98               	incf	??___ftge& (0+255),f,b
  6297  00489E  0E00               	movlw	0
  6298  0048A0  2399               	addwfc	(??___ftge+1)& (0+255),f,b
  6299  0048A2  239A               	addwfc	(??___ftge+2)& (0+255),f,b
  6300  0048A4  0E00               	movlw	0
  6301  0048A6  0100               	movlb	0	; () banked
  6302  0048A8  2598               	addwf	??___ftge& (0+255),w,b
  6303  0048AA  0100               	movlb	0	; () banked
  6304  0048AC  6F92               	movwf	___ftge@ff1& (0+255),b
  6305  0048AE  0E00               	movlw	0
  6306  0048B0  0100               	movlb	0	; () banked
  6307  0048B2  2199               	addwfc	(??___ftge+1)& (0+255),w,b
  6308  0048B4  0100               	movlb	0	; () banked
  6309  0048B6  6F93               	movwf	(___ftge@ff1+1)& (0+255),b
  6310  0048B8  0E80               	movlw	128
  6311  0048BA  0100               	movlb	0	; () banked
  6312  0048BC  219A               	addwfc	(??___ftge+2)& (0+255),w,b
  6313  0048BE  0100               	movlb	0	; () banked
  6314  0048C0  6F94               	movwf	(___ftge@ff1+2)& (0+255),b
  6315  0048C2                     l7516:
  6316                           
  6317                           ; BSR set to: 0
  6318  0048C2  0100               	movlb	0	; () banked
  6319  0048C4  AF97               	btfss	(___ftge@ff2+2)& (0+255),7,b
  6320  0048C6  D01D               	goto	l7520
  6321                           
  6322                           ; BSR set to: 0
  6323  0048C8  C095  F098         	movff	___ftge@ff2,??___ftge
  6324  0048CC  C096  F099         	movff	___ftge@ff2+1,??___ftge+1
  6325  0048D0  C097  F09A         	movff	___ftge@ff2+2,??___ftge+2
  6326  0048D4  0100               	movlb	0	; () banked
  6327  0048D6  1F98               	comf	??___ftge& (0+255),f,b
  6328  0048D8  1F99               	comf	(??___ftge+1)& (0+255),f,b
  6329  0048DA  1F9A               	comf	(??___ftge+2)& (0+255),f,b
  6330  0048DC  2B98               	incf	??___ftge& (0+255),f,b
  6331  0048DE  0E00               	movlw	0
  6332  0048E0  2399               	addwfc	(??___ftge+1)& (0+255),f,b
  6333  0048E2  239A               	addwfc	(??___ftge+2)& (0+255),f,b
  6334  0048E4  0E00               	movlw	0
  6335  0048E6  0100               	movlb	0	; () banked
  6336  0048E8  2598               	addwf	??___ftge& (0+255),w,b
  6337  0048EA  0100               	movlb	0	; () banked
  6338  0048EC  6F95               	movwf	___ftge@ff2& (0+255),b
  6339  0048EE  0E00               	movlw	0
  6340  0048F0  0100               	movlb	0	; () banked
  6341  0048F2  2199               	addwfc	(??___ftge+1)& (0+255),w,b
  6342  0048F4  0100               	movlb	0	; () banked
  6343  0048F6  6F96               	movwf	(___ftge@ff2+1)& (0+255),b
  6344  0048F8  0E80               	movlw	128
  6345  0048FA  0100               	movlb	0	; () banked
  6346  0048FC  219A               	addwfc	(??___ftge+2)& (0+255),w,b
  6347  0048FE  0100               	movlb	0	; () banked
  6348  004900  6F97               	movwf	(___ftge@ff2+2)& (0+255),b
  6349  004902                     l7520:
  6350                           
  6351                           ; BSR set to: 0
  6352  004902  0E00               	movlw	0
  6353  004904  0100               	movlb	0	; () banked
  6354  004906  1B92               	xorwf	___ftge@ff1& (0+255),f,b
  6355  004908  0E00               	movlw	0
  6356  00490A  0100               	movlb	0	; () banked
  6357  00490C  1B93               	xorwf	(___ftge@ff1+1)& (0+255),f,b
  6358  00490E  0E80               	movlw	128
  6359  004910  0100               	movlb	0	; () banked
  6360  004912  1B94               	xorwf	(___ftge@ff1+2)& (0+255),f,b
  6361                           
  6362                           ; BSR set to: 0
  6363  004914  0E00               	movlw	0
  6364  004916  0100               	movlb	0	; () banked
  6365  004918  1B95               	xorwf	___ftge@ff2& (0+255),f,b
  6366  00491A  0E00               	movlw	0
  6367  00491C  0100               	movlb	0	; () banked
  6368  00491E  1B96               	xorwf	(___ftge@ff2+1)& (0+255),f,b
  6369  004920  0E80               	movlw	128
  6370  004922  0100               	movlb	0	; () banked
  6371  004924  1B97               	xorwf	(___ftge@ff2+2)& (0+255),f,b
  6372  004926  0100               	movlb	0	; () banked
  6373  004928  5195               	movf	___ftge@ff2& (0+255),w,b
  6374  00492A  0100               	movlb	0	; () banked
  6375  00492C  5D92               	subwf	___ftge@ff1& (0+255),w,b
  6376  00492E  0100               	movlb	0	; () banked
  6377  004930  5196               	movf	(___ftge@ff2+1)& (0+255),w,b
  6378  004932  0100               	movlb	0	; () banked
  6379  004934  5993               	subwfb	(___ftge@ff1+1)& (0+255),w,b
  6380  004936  0100               	movlb	0	; () banked
  6381  004938  5197               	movf	(___ftge@ff2+2)& (0+255),w,b
  6382  00493A  0100               	movlb	0	; () banked
  6383  00493C  5994               	subwfb	(___ftge@ff1+2)& (0+255),w,b
  6384  00493E  B0D8               	btfsc	status,0,c
  6385  004940  D002               	goto	l7526
  6386                           
  6387                           ; BSR set to: 0
  6388  004942  90D8               	bcf	status,0,c
  6389  004944  0012               	return	
  6390  004946                     l7526:
  6391                           
  6392                           ; BSR set to: 0
  6393  004946  80D8               	bsf	status,0,c
  6394                           
  6395                           ; BSR set to: 0
  6396  004948  0012               	return	
  6397  00494A                     __end_of___ftge:
  6398                           	opt stack 0
  6399                           tblptru	equ	0xFF8
  6400                           tblptrh	equ	0xFF7
  6401                           tblptrl	equ	0xFF6
  6402                           tablat	equ	0xFF5
  6403                           prodh	equ	0xFF4
  6404                           prodl	equ	0xFF3
  6405                           postinc0	equ	0xFEE
  6406                           wreg	equ	0xFE8
  6407                           postdec1	equ	0xFE5
  6408                           fsr1l	equ	0xFE1
  6409                           indf2	equ	0xFDF
  6410                           postinc2	equ	0xFDE
  6411                           postdec2	equ	0xFDD
  6412                           fsr2h	equ	0xFDA
  6413                           fsr2l	equ	0xFD9
  6414                           status	equ	0xFD8
  6415                           
  6416 ;; *************** function ___awtoft *****************
  6417 ;; Defined at:
  6418 ;;		line 32 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
  6419 ;; Parameters:    Size  Location     Type
  6420 ;;  c               2   14[BANK0 ] int 
  6421 ;; Auto vars:     Size  Location     Type
  6422 ;;  sign            1   17[BANK0 ] unsigned char 
  6423 ;; Return value:  Size  Location     Type
  6424 ;;                  3   14[BANK0 ] float 
  6425 ;; Registers used:
  6426 ;;		wreg, status,2, status,0, cstack
  6427 ;; Tracked objects:
  6428 ;;		On entry : 0/0
  6429 ;;		On exit  : 0/0
  6430 ;;		Unchanged: 0/0
  6431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6432 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6433 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6434 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6435 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6436 ;;Total ram usage:        4 bytes
  6437 ;; Hardware stack levels used:    1
  6438 ;; Hardware stack levels required when called:    8
  6439 ;; This function calls:
  6440 ;;		___ftpack
  6441 ;; This function is called by:
  6442 ;;		_ID
  6443 ;; This function uses a non-reentrant model
  6444 ;;
  6445                           
  6446                           	psect	text12
  6447  00558E                     __ptext12:
  6448                           	opt stack 0
  6449  00558E                     ___awtoft:
  6450                           	opt stack 20
  6451                           
  6452                           ; BSR set to: 0
  6453                           ;incstack = 0
  6454  00558E  0E00               	movlw	0
  6455  005590  0100               	movlb	0	; () banked
  6456  005592  6F91               	movwf	___awtoft@sign& (0+255),b
  6457                           
  6458                           ; BSR set to: 0
  6459  005594  0100               	movlb	0	; () banked
  6460  005596  AF8F               	btfss	(___awtoft@c+1)& (0+255),7,b
  6461  005598  D008               	goto	l7508
  6462                           
  6463                           ; BSR set to: 0
  6464  00559A  0100               	movlb	0	; () banked
  6465  00559C  6D8E               	negf	___awtoft@c& (0+255),b
  6466  00559E  1F8F               	comf	(___awtoft@c+1)& (0+255),f,b
  6467  0055A0  B0D8               	btfsc	status,0,c
  6468  0055A2  2B8F               	incf	(___awtoft@c+1)& (0+255),f,b
  6469                           
  6470                           ; BSR set to: 0
  6471  0055A4  0E01               	movlw	1
  6472  0055A6  0100               	movlb	0	; () banked
  6473  0055A8  6F91               	movwf	___awtoft@sign& (0+255),b
  6474  0055AA                     l7508:
  6475                           
  6476                           ; BSR set to: 0
  6477  0055AA  C08E  F080         	movff	___awtoft@c,___ftpack@arg
  6478  0055AE  C08F  F081         	movff	___awtoft@c+1,___ftpack@arg+1
  6479  0055B2  0100               	movlb	0	; () banked
  6480  0055B4  6B82               	clrf	(___ftpack@arg+2)& (0+255),b
  6481  0055B6  0E8E               	movlw	142
  6482  0055B8  0100               	movlb	0	; () banked
  6483  0055BA  6F83               	movwf	___ftpack@exp& (0+255),b
  6484  0055BC  C091  F084         	movff	___awtoft@sign,___ftpack@sign
  6485  0055C0  EC03  F021         	call	___ftpack	;wreg free
  6486  0055C4  C080  F08E         	movff	?___ftpack,?___awtoft
  6487  0055C8  C081  F08F         	movff	?___ftpack+1,?___awtoft+1
  6488  0055CC  C082  F090         	movff	?___ftpack+2,?___awtoft+2
  6489  0055D0  0012               	return	
  6490  0055D2                     __end_of___awtoft:
  6491                           	opt stack 0
  6492                           tblptru	equ	0xFF8
  6493                           tblptrh	equ	0xFF7
  6494                           tblptrl	equ	0xFF6
  6495                           tablat	equ	0xFF5
  6496                           prodh	equ	0xFF4
  6497                           prodl	equ	0xFF3
  6498                           postinc0	equ	0xFEE
  6499                           wreg	equ	0xFE8
  6500                           postdec1	equ	0xFE5
  6501                           fsr1l	equ	0xFE1
  6502                           indf2	equ	0xFDF
  6503                           postinc2	equ	0xFDE
  6504                           postdec2	equ	0xFDD
  6505                           fsr2h	equ	0xFDA
  6506                           fsr2l	equ	0xFD9
  6507                           status	equ	0xFD8
  6508                           
  6509 ;; *************** function ___ftpack *****************
  6510 ;; Defined at:
  6511 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
  6512 ;; Parameters:    Size  Location     Type
  6513 ;;  arg             3    0[BANK0 ] unsigned um
  6514 ;;  exp             1    3[BANK0 ] unsigned char 
  6515 ;;  sign            1    4[BANK0 ] unsigned char 
  6516 ;; Auto vars:     Size  Location     Type
  6517 ;;		None
  6518 ;; Return value:  Size  Location     Type
  6519 ;;                  3    0[BANK0 ] float 
  6520 ;; Registers used:
  6521 ;;		wreg, status,2, status,0
  6522 ;; Tracked objects:
  6523 ;;		On entry : 0/0
  6524 ;;		On exit  : 0/0
  6525 ;;		Unchanged: 0/0
  6526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6527 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6528 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6529 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6530 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6531 ;;Total ram usage:        8 bytes
  6532 ;; Hardware stack levels used:    1
  6533 ;; Hardware stack levels required when called:    7
  6534 ;; This function calls:
  6535 ;;		Nothing
  6536 ;; This function is called by:
  6537 ;;		___awtoft
  6538 ;; This function uses a non-reentrant model
  6539 ;;
  6540                           
  6541                           	psect	text13
  6542  004206                     __ptext13:
  6543                           	opt stack 0
  6544  004206                     ___ftpack:
  6545                           	opt stack 20
  6546                           
  6547                           ;incstack = 0
  6548  004206  0100               	movlb	0	; () banked
  6549  004208  5183               	movf	___ftpack@exp& (0+255),w,b
  6550  00420A  0100               	movlb	0	; () banked
  6551  00420C  B4D8               	btfsc	status,2,c
  6552  00420E  D008               	goto	l6892
  6553                           
  6554                           ; BSR set to: 0
  6555  004210  0100               	movlb	0	; () banked
  6556  004212  5180               	movf	___ftpack@arg& (0+255),w,b
  6557  004214  0100               	movlb	0	; () banked
  6558  004216  1181               	iorwf	(___ftpack@arg+1)& (0+255),w,b
  6559  004218  0100               	movlb	0	; () banked
  6560  00421A  1182               	iorwf	(___ftpack@arg+2)& (0+255),w,b
  6561  00421C  A4D8               	btfss	status,2,c
  6562  00421E  D011               	goto	l6898
  6563  004220                     l6892:
  6564                           
  6565                           ; BSR set to: 0
  6566  004220  0E00               	movlw	0
  6567  004222  0100               	movlb	0	; () banked
  6568  004224  6F80               	movwf	?___ftpack& (0+255),b
  6569  004226  0E00               	movlw	0
  6570  004228  0100               	movlb	0	; () banked
  6571  00422A  6F81               	movwf	(?___ftpack+1)& (0+255),b
  6572  00422C  0E00               	movlw	0
  6573  00422E  0100               	movlb	0	; () banked
  6574  004230  6F82               	movwf	(?___ftpack+2)& (0+255),b
  6575                           
  6576                           ; BSR set to: 0
  6577  004232  0012               	return	
  6578  004234                     l6896:
  6579                           
  6580                           ; BSR set to: 0
  6581  004234  0100               	movlb	0	; () banked
  6582  004236  2B83               	incf	___ftpack@exp& (0+255),f,b
  6583  004238  0100               	movlb	0	; () banked
  6584  00423A  90D8               	bcf	status,0,c
  6585  00423C  3382               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  6586  00423E  3381               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  6587  004240  3380               	rrcf	___ftpack@arg& (0+255),f,b
  6588  004242                     l6898:
  6589                           
  6590                           ; BSR set to: 0
  6591  004242  0E00               	movlw	0
  6592  004244  0100               	movlb	0	; () banked
  6593  004246  1580               	andwf	___ftpack@arg& (0+255),w,b
  6594  004248  0100               	movlb	0	; () banked
  6595  00424A  6F85               	movwf	??___ftpack& (0+255),b
  6596  00424C  0E00               	movlw	0
  6597  00424E  0100               	movlb	0	; () banked
  6598  004250  1581               	andwf	(___ftpack@arg+1)& (0+255),w,b
  6599  004252  0100               	movlb	0	; () banked
  6600  004254  6F86               	movwf	(??___ftpack+1)& (0+255),b
  6601  004256  0EFE               	movlw	254
  6602  004258  0100               	movlb	0	; () banked
  6603  00425A  1582               	andwf	(___ftpack@arg+2)& (0+255),w,b
  6604  00425C  0100               	movlb	0	; () banked
  6605  00425E  6F87               	movwf	(??___ftpack+2)& (0+255),b
  6606  004260  0100               	movlb	0	; () banked
  6607  004262  5185               	movf	??___ftpack& (0+255),w,b
  6608  004264  0100               	movlb	0	; () banked
  6609  004266  1186               	iorwf	(??___ftpack+1)& (0+255),w,b
  6610  004268  0100               	movlb	0	; () banked
  6611  00426A  1187               	iorwf	(??___ftpack+2)& (0+255),w,b
  6612  00426C  B4D8               	btfsc	status,2,c
  6613  00426E  D011               	goto	l6904
  6614  004270  D7E1               	goto	l6896
  6615  004272                     l6900:
  6616                           
  6617                           ; BSR set to: 0
  6618  004272  0100               	movlb	0	; () banked
  6619  004274  2B83               	incf	___ftpack@exp& (0+255),f,b
  6620                           
  6621                           ; BSR set to: 0
  6622  004276  0E01               	movlw	1
  6623  004278  0100               	movlb	0	; () banked
  6624  00427A  2780               	addwf	___ftpack@arg& (0+255),f,b
  6625  00427C  0E00               	movlw	0
  6626  00427E  0100               	movlb	0	; () banked
  6627  004280  2381               	addwfc	(___ftpack@arg+1)& (0+255),f,b
  6628  004282  0E00               	movlw	0
  6629  004284  0100               	movlb	0	; () banked
  6630  004286  2382               	addwfc	(___ftpack@arg+2)& (0+255),f,b
  6631  004288  0100               	movlb	0	; () banked
  6632  00428A  90D8               	bcf	status,0,c
  6633  00428C  3382               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  6634  00428E  3381               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  6635  004290  3380               	rrcf	___ftpack@arg& (0+255),f,b
  6636  004292                     l6904:
  6637                           
  6638                           ; BSR set to: 0
  6639  004292  0E00               	movlw	0
  6640  004294  0100               	movlb	0	; () banked
  6641  004296  1580               	andwf	___ftpack@arg& (0+255),w,b
  6642  004298  0100               	movlb	0	; () banked
  6643  00429A  6F85               	movwf	??___ftpack& (0+255),b
  6644  00429C  0E00               	movlw	0
  6645  00429E  0100               	movlb	0	; () banked
  6646  0042A0  1581               	andwf	(___ftpack@arg+1)& (0+255),w,b
  6647  0042A2  0100               	movlb	0	; () banked
  6648  0042A4  6F86               	movwf	(??___ftpack+1)& (0+255),b
  6649  0042A6  0EFF               	movlw	255
  6650  0042A8  0100               	movlb	0	; () banked
  6651  0042AA  1582               	andwf	(___ftpack@arg+2)& (0+255),w,b
  6652  0042AC  0100               	movlb	0	; () banked
  6653  0042AE  6F87               	movwf	(??___ftpack+2)& (0+255),b
  6654  0042B0  0100               	movlb	0	; () banked
  6655  0042B2  5185               	movf	??___ftpack& (0+255),w,b
  6656  0042B4  0100               	movlb	0	; () banked
  6657  0042B6  1186               	iorwf	(??___ftpack+1)& (0+255),w,b
  6658  0042B8  0100               	movlb	0	; () banked
  6659  0042BA  1187               	iorwf	(??___ftpack+2)& (0+255),w,b
  6660  0042BC  B4D8               	btfsc	status,2,c
  6661  0042BE  D008               	goto	l6908
  6662  0042C0  D7D8               	goto	l6900
  6663  0042C2                     l6906:
  6664                           
  6665                           ; BSR set to: 0
  6666  0042C2  0100               	movlb	0	; () banked
  6667  0042C4  0783               	decf	___ftpack@exp& (0+255),f,b
  6668  0042C6  0100               	movlb	0	; () banked
  6669  0042C8  90D8               	bcf	status,0,c
  6670  0042CA  3780               	rlcf	___ftpack@arg& (0+255),f,b
  6671  0042CC  3781               	rlcf	(___ftpack@arg+1)& (0+255),f,b
  6672  0042CE  3782               	rlcf	(___ftpack@arg+2)& (0+255),f,b
  6673  0042D0                     l6908:
  6674                           
  6675                           ; BSR set to: 0
  6676  0042D0  0100               	movlb	0	; () banked
  6677  0042D2  BF81               	btfsc	(___ftpack@arg+1)& (0+255),7,b
  6678  0042D4  D004               	goto	l1784
  6679                           
  6680                           ; BSR set to: 0
  6681  0042D6  0E02               	movlw	2
  6682  0042D8  0100               	movlb	0	; () banked
  6683  0042DA  6183               	cpfslt	___ftpack@exp& (0+255),b
  6684  0042DC  D7F2               	goto	l6906
  6685  0042DE                     l1784:
  6686                           
  6687                           ; BSR set to: 0
  6688  0042DE  0100               	movlb	0	; () banked
  6689  0042E0  B183               	btfsc	___ftpack@exp& (0+255),0,b
  6690  0042E2  D002               	goto	l6914
  6691                           
  6692                           ; BSR set to: 0
  6693  0042E4  0100               	movlb	0	; () banked
  6694  0042E6  9F81               	bcf	(___ftpack@arg+1)& (0+255),7,b
  6695  0042E8                     l6914:
  6696                           
  6697                           ; BSR set to: 0
  6698  0042E8  0100               	movlb	0	; () banked
  6699  0042EA  90D8               	bcf	status,0,c
  6700  0042EC  3383               	rrcf	___ftpack@exp& (0+255),f,b
  6701  0042EE  0100               	movlb	0	; () banked
  6702  0042F0  5183               	movf	___ftpack@exp& (0+255),w,b
  6703  0042F2  0100               	movlb	0	; () banked
  6704  0042F4  1382               	iorwf	(___ftpack@arg+2)& (0+255),f,b
  6705                           
  6706                           ; BSR set to: 0
  6707  0042F6  0100               	movlb	0	; () banked
  6708  0042F8  5184               	movf	___ftpack@sign& (0+255),w,b
  6709  0042FA  0100               	movlb	0	; () banked
  6710  0042FC  B4D8               	btfsc	status,2,c
  6711  0042FE  D002               	goto	l6920
  6712                           
  6713                           ; BSR set to: 0
  6714  004300  0100               	movlb	0	; () banked
  6715  004302  8F82               	bsf	(___ftpack@arg+2)& (0+255),7,b
  6716  004304                     l6920:
  6717                           
  6718                           ; BSR set to: 0
  6719  004304  C080  F080         	movff	___ftpack@arg,?___ftpack
  6720  004308  C081  F081         	movff	___ftpack@arg+1,?___ftpack+1
  6721  00430C  C082  F082         	movff	___ftpack@arg+2,?___ftpack+2
  6722  004310  0012               	return	
  6723  004312                     __end_of___ftpack:
  6724                           	opt stack 0
  6725                           tblptru	equ	0xFF8
  6726                           tblptrh	equ	0xFF7
  6727                           tblptrl	equ	0xFF6
  6728                           tablat	equ	0xFF5
  6729                           prodh	equ	0xFF4
  6730                           prodl	equ	0xFF3
  6731                           postinc0	equ	0xFEE
  6732                           wreg	equ	0xFE8
  6733                           postdec1	equ	0xFE5
  6734                           fsr1l	equ	0xFE1
  6735                           indf2	equ	0xFDF
  6736                           postinc2	equ	0xFDE
  6737                           postdec2	equ	0xFDD
  6738                           fsr2h	equ	0xFDA
  6739                           fsr2l	equ	0xFD9
  6740                           status	equ	0xFD8
  6741                           
  6742 ;; *************** function _Distribution *****************
  6743 ;; Defined at:
  6744 ;;		line 381 in file "sort.c"
  6745 ;; Parameters:    Size  Location     Type
  6746 ;;		None
  6747 ;; Auto vars:     Size  Location     Type
  6748 ;;		None
  6749 ;; Return value:  Size  Location     Type
  6750 ;;                  1    wreg      void 
  6751 ;; Registers used:
  6752 ;;		wreg, status,2, status,0, cstack
  6753 ;; Tracked objects:
  6754 ;;		On entry : 0/0
  6755 ;;		On exit  : 0/0
  6756 ;;		Unchanged: 0/0
  6757 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6758 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6759 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6760 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6761 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6762 ;;Total ram usage:        2 bytes
  6763 ;; Hardware stack levels used:    1
  6764 ;; Hardware stack levels required when called:    8
  6765 ;; This function calls:
  6766 ;;		_updateServoPosition
  6767 ;; This function is called by:
  6768 ;;		_sort
  6769 ;; This function uses a non-reentrant model
  6770 ;;
  6771                           
  6772                           	psect	text14
  6773  0045FE                     __ptext14:
  6774                           	opt stack 0
  6775  0045FE                     _Distribution:
  6776                           	opt stack 21
  6777                           
  6778                           ;sort.c: 382: if(f_can_coming_to_distribution){
  6779                           
  6780                           ; BSR set to: 0
  6781                           ;incstack = 0
  6782  0045FE  0101               	movlb	1	; () banked
  6783  004600  5133               	movf	_f_can_coming_to_distribution& (0+255),w,b
  6784  004602  0101               	movlb	1	; () banked
  6785  004604  1134               	iorwf	(_f_can_coming_to_distribution+1)& (0+255),w,b
  6786  004606  B4D8               	btfsc	status,2,c
  6787  004608  0012               	return	
  6788                           
  6789                           ; BSR set to: 1
  6790                           ;sort.c: 383: f_can_distributed = 0;
  6791  00460A  0E00               	movlw	0
  6792  00460C  0101               	movlb	1	; () banked
  6793  00460E  6F36               	movwf	(_f_can_distributed+1)& (0+255),b
  6794  004610  0E00               	movlw	0
  6795  004612  6F35               	movwf	_f_can_distributed& (0+255),b
  6796                           
  6797                           ;sort.c: 390: switch(cur_can){
  6798  004614  D034               	goto	l8210
  6799  004616                     l8200:
  6800                           
  6801                           ;sort.c: 392: updateServoPosition(500, 1);
  6802  004616  0E01               	movlw	1
  6803  004618  0100               	movlb	0	; () banked
  6804  00461A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  6805  00461C  0EF4               	movlw	244
  6806  00461E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  6807  004620  0E00               	movlw	0
  6808  004622  0100               	movlb	0	; () banked
  6809  004624  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  6810  004626  0E01               	movlw	1
  6811  004628  6F82               	movwf	updateServoPosition@timer& (0+255),b
  6812  00462A  EC33  F027         	call	_updateServoPosition	;wreg free
  6813                           
  6814                           ;sort.c: 393: break;
  6815  00462E  D03E               	goto	l8212
  6816  004630                     l8202:
  6817                           
  6818                           ;sort.c: 395: updateServoPosition(850, 1);
  6819  004630  0E03               	movlw	3
  6820  004632  0100               	movlb	0	; () banked
  6821  004634  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  6822  004636  0E52               	movlw	82
  6823  004638  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  6824  00463A  0E00               	movlw	0
  6825  00463C  0100               	movlb	0	; () banked
  6826  00463E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  6827  004640  0E01               	movlw	1
  6828  004642  6F82               	movwf	updateServoPosition@timer& (0+255),b
  6829  004644  EC33  F027         	call	_updateServoPosition	;wreg free
  6830                           
  6831                           ;sort.c: 396: break;
  6832  004648  D031               	goto	l8212
  6833  00464A                     l8204:
  6834                           
  6835                           ;sort.c: 398: updateServoPosition(1670, 1);
  6836  00464A  0E06               	movlw	6
  6837  00464C  0100               	movlb	0	; () banked
  6838  00464E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  6839  004650  0E86               	movlw	134
  6840  004652  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  6841  004654  0E00               	movlw	0
  6842  004656  0100               	movlb	0	; () banked
  6843  004658  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  6844  00465A  0E01               	movlw	1
  6845  00465C  6F82               	movwf	updateServoPosition@timer& (0+255),b
  6846  00465E  EC33  F027         	call	_updateServoPosition	;wreg free
  6847                           
  6848                           ;sort.c: 399: break;
  6849  004662  D024               	goto	l8212
  6850  004664                     l8206:
  6851                           
  6852                           ;sort.c: 401: updateServoPosition(2400, 1);
  6853  004664  0E09               	movlw	9
  6854  004666  0100               	movlb	0	; () banked
  6855  004668  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  6856  00466A  0E60               	movlw	96
  6857  00466C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  6858  00466E  0E00               	movlw	0
  6859  004670  0100               	movlb	0	; () banked
  6860  004672  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  6861  004674  0E01               	movlw	1
  6862  004676  6F82               	movwf	updateServoPosition@timer& (0+255),b
  6863  004678  EC33  F027         	call	_updateServoPosition	;wreg free
  6864                           
  6865                           ;sort.c: 405: }
  6866                           
  6867                           ;sort.c: 404: break;
  6868                           
  6869                           ;sort.c: 403: default:
  6870                           
  6871                           ;sort.c: 402: break;
  6872  00467C  D017               	goto	l8212
  6873  00467E                     l8210:
  6874  00467E  C12B  F088         	movff	_cur_can,??_Distribution
  6875  004682  C12C  F089         	movff	_cur_can+1,??_Distribution+1
  6876                           
  6877                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6878                           ; Switch size 1, requested type "space"
  6879                           ; Number of cases is 1, Range of values is 0 to 0
  6880                           ; switch strategies available:
  6881                           ; Name         Instructions Cycles
  6882                           ; simple_byte            4     3 (average)
  6883                           ;	Chosen strategy is simple_byte
  6884  004686  0100               	movlb	0	; () banked
  6885  004688  5189               	movf	(??_Distribution+1)& (0+255),w,b
  6886  00468A  0A00               	xorlw	0	; case 0
  6887  00468C  A4D8               	btfss	status,2,c
  6888  00468E  D00E               	goto	l8212
  6889                           
  6890                           ; BSR set to: 0
  6891                           ; Switch size 1, requested type "space"
  6892                           ; Number of cases is 4, Range of values is 0 to 3
  6893                           ; switch strategies available:
  6894                           ; Name         Instructions Cycles
  6895                           ; simple_byte           13     7 (average)
  6896                           ;	Chosen strategy is simple_byte
  6897  004690  0100               	movlb	0	; () banked
  6898  004692  5188               	movf	??_Distribution& (0+255),w,b
  6899  004694  0A00               	xorlw	0	; case 0
  6900  004696  B4D8               	btfsc	status,2,c
  6901  004698  D7BE               	goto	l8200
  6902  00469A  0A01               	xorlw	1	; case 1
  6903  00469C  B4D8               	btfsc	status,2,c
  6904  00469E  D7C8               	goto	l8202
  6905  0046A0  0A03               	xorlw	3	; case 2
  6906  0046A2  B4D8               	btfsc	status,2,c
  6907  0046A4  D7D2               	goto	l8204
  6908  0046A6  0A01               	xorlw	1	; case 3
  6909  0046A8  B4D8               	btfsc	status,2,c
  6910  0046AA  D7DC               	goto	l8206
  6911  0046AC                     l8212:
  6912                           
  6913                           ;sort.c: 406: updateServoPosition(1050, 3);
  6914  0046AC  0E04               	movlw	4
  6915  0046AE  0100               	movlb	0	; () banked
  6916  0046B0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  6917  0046B2  0E1A               	movlw	26
  6918  0046B4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  6919  0046B6  0E00               	movlw	0
  6920  0046B8  0100               	movlb	0	; () banked
  6921  0046BA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  6922  0046BC  0E03               	movlw	3
  6923  0046BE  6F82               	movwf	updateServoPosition@timer& (0+255),b
  6924  0046C0  EC33  F027         	call	_updateServoPosition	;wreg free
  6925                           
  6926                           ;sort.c: 407: servo_timer_target = 750;
  6927  0046C4  0E02               	movlw	2
  6928  0046C6  6E70               	movwf	_servo_timer_target+1,c	;volatile
  6929  0046C8  0EEE               	movlw	238
  6930  0046CA  6E6F               	movwf	_servo_timer_target,c	;volatile
  6931                           
  6932                           ;sort.c: 408: f_panning_to_bin = 1;
  6933  0046CC  0E00               	movlw	0
  6934  0046CE  6E6A               	movwf	_f_panning_to_bin+1,c	;volatile
  6935  0046D0  0E01               	movlw	1
  6936  0046D2  6E69               	movwf	_f_panning_to_bin,c	;volatile
  6937                           
  6938                           ;sort.c: 409: f_can_coming_to_distribution = 0;
  6939  0046D4  0E00               	movlw	0
  6940  0046D6  0101               	movlb	1	; () banked
  6941  0046D8  6F34               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  6942  0046DA  0E00               	movlw	0
  6943  0046DC  6F33               	movwf	_f_can_coming_to_distribution& (0+255),b
  6944  0046DE  0012               	return	
  6945  0046E0                     __end_of_Distribution:
  6946                           	opt stack 0
  6947                           tblptru	equ	0xFF8
  6948                           tblptrh	equ	0xFF7
  6949                           tblptrl	equ	0xFF6
  6950                           tablat	equ	0xFF5
  6951                           prodh	equ	0xFF4
  6952                           prodl	equ	0xFF3
  6953                           postinc0	equ	0xFEE
  6954                           wreg	equ	0xFE8
  6955                           postdec1	equ	0xFE5
  6956                           fsr1l	equ	0xFE1
  6957                           indf2	equ	0xFDF
  6958                           postinc2	equ	0xFDE
  6959                           postdec2	equ	0xFDD
  6960                           fsr2h	equ	0xFDA
  6961                           fsr2l	equ	0xFD9
  6962                           status	equ	0xFD8
  6963                           
  6964 ;; *************** function _machineConfig *****************
  6965 ;; Defined at:
  6966 ;;		line 15 in file "MachineConfig.c"
  6967 ;; Parameters:    Size  Location     Type
  6968 ;;		None
  6969 ;; Auto vars:     Size  Location     Type
  6970 ;;		None
  6971 ;; Return value:  Size  Location     Type
  6972 ;;                  1    wreg      void 
  6973 ;; Registers used:
  6974 ;;		wreg, status,2
  6975 ;; Tracked objects:
  6976 ;;		On entry : 0/0
  6977 ;;		On exit  : 0/0
  6978 ;;		Unchanged: 0/0
  6979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6980 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6981 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6982 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6983 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6984 ;;Total ram usage:        0 bytes
  6985 ;; Hardware stack levels used:    1
  6986 ;; Hardware stack levels required when called:    7
  6987 ;; This function calls:
  6988 ;;		Nothing
  6989 ;; This function is called by:
  6990 ;;		_main
  6991 ;; This function uses a non-reentrant model
  6992 ;;
  6993                           
  6994                           	psect	text15
  6995  00518C                     __ptext15:
  6996                           	opt stack 0
  6997  00518C                     _machineConfig:
  6998                           	opt stack 23
  6999                           
  7000                           ;MachineConfig.c: 17: OSCCON = 0xF0;
  7001                           
  7002                           ; BSR set to: 1
  7003                           ;incstack = 0
  7004  00518C  0EF0               	movlw	240
  7005  00518E  6ED3               	movwf	4051,c	;volatile
  7006                           
  7007                           ;MachineConfig.c: 18: OSCTUNEbits.PLLEN = 1;
  7008  005190  8C9B               	bsf	3995,6,c	;volatile
  7009                           
  7010                           ;MachineConfig.c: 22: TRISA = 0b00000111;
  7011  005192  0E07               	movlw	7
  7012  005194  6E92               	movwf	3986,c	;volatile
  7013                           
  7014                           ;MachineConfig.c: 24: TRISB = 0b11110010;
  7015  005196  0EF2               	movlw	242
  7016  005198  6E93               	movwf	3987,c	;volatile
  7017                           
  7018                           ;MachineConfig.c: 27: TRISC = 0x00;
  7019  00519A  0E00               	movlw	0
  7020  00519C  6E94               	movwf	3988,c	;volatile
  7021                           
  7022                           ;MachineConfig.c: 31: TRISD = 0x00;
  7023  00519E  0E00               	movlw	0
  7024  0051A0  6E95               	movwf	3989,c	;volatile
  7025                           
  7026                           ;MachineConfig.c: 34: TRISE = 0x00;
  7027  0051A2  0E00               	movlw	0
  7028  0051A4  6E96               	movwf	3990,c	;volatile
  7029                           
  7030                           ;MachineConfig.c: 37: LATA = 0x00;
  7031  0051A6  0E00               	movlw	0
  7032  0051A8  6E89               	movwf	3977,c	;volatile
  7033                           
  7034                           ;MachineConfig.c: 38: LATB = 0x00;
  7035  0051AA  0E00               	movlw	0
  7036  0051AC  6E8A               	movwf	3978,c	;volatile
  7037                           
  7038                           ;MachineConfig.c: 39: LATC = 0x00;
  7039  0051AE  0E00               	movlw	0
  7040  0051B0  6E8B               	movwf	3979,c	;volatile
  7041                           
  7042                           ;MachineConfig.c: 40: LATD = 0x00;
  7043  0051B2  0E00               	movlw	0
  7044  0051B4  6E8C               	movwf	3980,c	;volatile
  7045                           
  7046                           ;MachineConfig.c: 41: LATE = 0x00;
  7047  0051B6  0E00               	movlw	0
  7048  0051B8  6E8D               	movwf	3981,c	;volatile
  7049                           
  7050                           ;MachineConfig.c: 43: nRBPU = 0;
  7051  0051BA  9EF1               	bcf	intcon2,7,c	;volatile
  7052                           
  7053                           ;MachineConfig.c: 46: ADCON0 = 0x00;
  7054  0051BC  0E00               	movlw	0
  7055  0051BE  6EC2               	movwf	4034,c	;volatile
  7056                           
  7057                           ;MachineConfig.c: 47: ADCON1 = 0b00001100;
  7058  0051C0  0E0C               	movlw	12
  7059  0051C2  6EC1               	movwf	4033,c	;volatile
  7060                           
  7061                           ;MachineConfig.c: 51: CVRCON = 0x00;
  7062  0051C4  0E00               	movlw	0
  7063  0051C6  6EB5               	movwf	4021,c	;volatile
  7064                           
  7065                           ;MachineConfig.c: 52: CMCONbits.CIS = 0;
  7066  0051C8  96B4               	bcf	4020,3,c	;volatile
  7067                           
  7068                           ;MachineConfig.c: 53: ADCON2 = 0b10110001;
  7069  0051CA  0EB1               	movlw	177
  7070  0051CC  6EC0               	movwf	4032,c	;volatile
  7071                           
  7072                           ;MachineConfig.c: 56: INT1IE = 1;
  7073  0051CE  86F0               	bsf	intcon3,3,c	;volatile
  7074                           
  7075                           ;MachineConfig.c: 58: TMR0IE = 1;
  7076  0051D0  8AF2               	bsf	intcon,5,c	;volatile
  7077                           
  7078                           ;MachineConfig.c: 59: TMR1IE = 1;
  7079  0051D2  809D               	bsf	3997,0,c	;volatile
  7080                           
  7081                           ;MachineConfig.c: 60: TMR2IE = 1;
  7082  0051D4  829D               	bsf	3997,1,c	;volatile
  7083                           
  7084                           ;MachineConfig.c: 61: TMR3IE = 1;
  7085  0051D6  82A0               	bsf	4000,1,c	;volatile
  7086                           
  7087                           ;MachineConfig.c: 63: T1CON = 0b10110000;
  7088  0051D8  0EB0               	movlw	176
  7089  0051DA  6ECD               	movwf	4045,c	;volatile
  7090                           
  7091                           ;MachineConfig.c: 64: T2CON = 0b01111011;
  7092  0051DC  0E7B               	movlw	123
  7093  0051DE  6ECA               	movwf	4042,c	;volatile
  7094                           
  7095                           ;MachineConfig.c: 65: PR2 = 0x22;
  7096  0051E0  0E22               	movlw	34
  7097  0051E2  6ECB               	movwf	4043,c	;volatile
  7098                           
  7099                           ;MachineConfig.c: 66: T3CON = 0b10110000;
  7100  0051E4  0EB0               	movlw	176
  7101  0051E6  6EB1               	movwf	4017,c	;volatile
  7102                           
  7103                           ;MachineConfig.c: 67: PEIE = 1;
  7104  0051E8  8CF2               	bsf	intcon,6,c	;volatile
  7105                           
  7106                           ;MachineConfig.c: 68: ADIE = 0;
  7107  0051EA  9C9D               	bcf	3997,6,c	;volatile
  7108                           
  7109                           ;MachineConfig.c: 69: (INTCONbits.GIE = 0);
  7110  0051EC  9EF2               	bcf	intcon,7,c	;volatile
  7111  0051EE  0012               	return		;funcret
  7112  0051F0                     __end_of_machineConfig:
  7113                           	opt stack 0
  7114                           tblptru	equ	0xFF8
  7115                           tblptrh	equ	0xFF7
  7116                           tblptrl	equ	0xFF6
  7117                           tablat	equ	0xFF5
  7118                           prodh	equ	0xFF4
  7119                           prodl	equ	0xFF3
  7120                           intcon	equ	0xFF2
  7121                           intcon2	equ	0xFF1
  7122                           intcon3	equ	0xFF0
  7123                           postinc0	equ	0xFEE
  7124                           wreg	equ	0xFE8
  7125                           postdec1	equ	0xFE5
  7126                           fsr1l	equ	0xFE1
  7127                           indf2	equ	0xFDF
  7128                           postinc2	equ	0xFDE
  7129                           postdec2	equ	0xFDD
  7130                           fsr2h	equ	0xFDA
  7131                           fsr2l	equ	0xFD9
  7132                           status	equ	0xFD8
  7133                           
  7134 ;; *************** function _logRun *****************
  7135 ;; Defined at:
  7136 ;;		line 89 in file "EEPROM.c"
  7137 ;; Parameters:    Size  Location     Type
  7138 ;;		None
  7139 ;; Auto vars:     Size  Location     Type
  7140 ;;  byte_i          1   53[BANK0 ] unsigned char 
  7141 ;;  i               2   55[BANK0 ] int 
  7142 ;;  num             1   49[BANK0 ] unsigned char 
  7143 ;;  addr            2   57[BANK0 ] unsigned short 
  7144 ;;  byte11          1   54[BANK0 ] unsigned char 
  7145 ;;  byte3           1   52[BANK0 ] unsigned char 
  7146 ;;  byte2           1   51[BANK0 ] unsigned char 
  7147 ;;  byte1           1   50[BANK0 ] unsigned char 
  7148 ;; Return value:  Size  Location     Type
  7149 ;;                  1    wreg      void 
  7150 ;; Registers used:
  7151 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7152 ;; Tracked objects:
  7153 ;;		On entry : 0/0
  7154 ;;		On exit  : 0/0
  7155 ;;		Unchanged: 0/0
  7156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7157 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7158 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7159 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7160 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7161 ;;Total ram usage:       10 bytes
  7162 ;; Hardware stack levels used:    1
  7163 ;; Hardware stack levels required when called:   11
  7164 ;; This function calls:
  7165 ;;		_EEPROM_read
  7166 ;;		_EEPROM_write
  7167 ;; This function is called by:
  7168 ;;		_main
  7169 ;; This function uses a non-reentrant model
  7170 ;;
  7171                           
  7172                           	psect	text16
  7173  003F9C                     __ptext16:
  7174                           	opt stack 0
  7175  003F9C                     _logRun:
  7176                           	opt stack 19
  7177                           
  7178                           ;EEPROM.c: 102: sel = EEPROM_read(0);
  7179                           
  7180                           ;incstack = 0
  7181  003F9C  0E00               	movlw	0
  7182  003F9E  0100               	movlb	0	; () banked
  7183  003FA0  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  7184  003FA2  0E00               	movlw	0
  7185  003FA4  6F80               	movwf	EEPROM_read@address& (0+255),b
  7186  003FA6  ECD3  F02D         	call	_EEPROM_read	;wreg free
  7187  003FAA  0100               	movlb	0	; () banked
  7188  003FAC  6FFD               	movwf	_sel& (0+255),b
  7189                           
  7190                           ; BSR set to: 0
  7191                           ;EEPROM.c: 103: unsigned short addr = 1 + 11 * sel;
  7192  003FAE  0100               	movlb	0	; () banked
  7193  003FB0  51FD               	movf	_sel& (0+255),w,b
  7194  003FB2  0D0B               	mullw	11
  7195  003FB4  0E01               	movlw	1
  7196  003FB6  24F3               	addwf	prodl,w,c
  7197  003FB8  0100               	movlb	0	; () banked
  7198  003FBA  6FB9               	movwf	logRun@addr& (0+255),b
  7199  003FBC  0E00               	movlw	0
  7200  003FBE  20F4               	addwfc	prodh,w,c
  7201  003FC0  0100               	movlb	0	; () banked
  7202  003FC2  6FBA               	movwf	(logRun@addr+1)& (0+255),b
  7203                           
  7204                           ; BSR set to: 0
  7205                           ;EEPROM.c: 106: if (sel < 3){
  7206  003FC4  0E03               	movlw	3
  7207  003FC6  0100               	movlb	0	; () banked
  7208  003FC8  61FD               	cpfslt	_sel& (0+255),b
  7209  003FCA  D00E               	goto	l9852
  7210                           
  7211                           ; BSR set to: 0
  7212                           ;EEPROM.c: 107: unsigned char num = sel+1;
  7213  003FCC  0100               	movlb	0	; () banked
  7214  003FCE  29FD               	incf	_sel& (0+255),w,b
  7215  003FD0  0100               	movlb	0	; () banked
  7216  003FD2  6FB1               	movwf	logRun@num& (0+255),b
  7217                           
  7218                           ; BSR set to: 0
  7219                           ;EEPROM.c: 108: EEPROM_write(0, num);
  7220  003FD4  0E00               	movlw	0
  7221  003FD6  0100               	movlb	0	; () banked
  7222  003FD8  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  7223  003FDA  0E00               	movlw	0
  7224  003FDC  6FAB               	movwf	EEPROM_write@address& (0+255),b
  7225  003FDE  C0B1  F0AD         	movff	logRun@num,EEPROM_write@data
  7226  003FE2  EC8B  F022         	call	_EEPROM_write	;wreg free
  7227                           
  7228                           ;EEPROM.c: 109: }
  7229  003FE6  D00A               	goto	l9854
  7230  003FE8                     l9852:
  7231                           
  7232                           ;EEPROM.c: 110: else{
  7233                           ;EEPROM.c: 111: EEPROM_write(0, 0);
  7234  003FE8  0E00               	movlw	0
  7235  003FEA  0100               	movlb	0	; () banked
  7236  003FEC  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  7237  003FEE  0E00               	movlw	0
  7238  003FF0  6FAB               	movwf	EEPROM_write@address& (0+255),b
  7239  003FF2  0E00               	movlw	0
  7240  003FF4  0100               	movlb	0	; () banked
  7241  003FF6  6FAD               	movwf	EEPROM_write@data& (0+255),b
  7242  003FF8  EC8B  F022         	call	_EEPROM_write	;wreg free
  7243  003FFC                     l9854:
  7244                           
  7245                           ;EEPROM.c: 112: }
  7246                           ;EEPROM.c: 115: unsigned char byte1 = 0b10000000 | count_total;
  7247  003FFC  0100               	movlb	0	; () banked
  7248  003FFE  51FE               	movf	_count_total& (0+255),w,b
  7249  004000  0980               	iorlw	128
  7250  004002  0100               	movlb	0	; () banked
  7251  004004  6FB2               	movwf	logRun@byte1& (0+255),b
  7252                           
  7253                           ; BSR set to: 0
  7254                           ;EEPROM.c: 116: EEPROM_write(addr, byte1);
  7255  004006  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  7256  00400A  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  7257  00400E  C0B2  F0AD         	movff	logRun@byte1,EEPROM_write@data
  7258  004012  EC8B  F022         	call	_EEPROM_write	;wreg free
  7259                           
  7260                           ;EEPROM.c: 117: addr++;
  7261  004016  0100               	movlb	0	; () banked
  7262  004018  4BB9               	infsnz	logRun@addr& (0+255),f,b
  7263  00401A  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  7264                           
  7265                           ; BSR set to: 0
  7266                           ;EEPROM.c: 120: unsigned char byte2 = (count_pop_no_tab << 4) | count_pop_w_tab;
  7267  00401C  0101               	movlb	1	; () banked
  7268  00401E  3927               	swapf	_count_pop_no_tab& (0+255),w,b
  7269  004020  0BF0               	andlw	240
  7270  004022  0101               	movlb	1	; () banked
  7271  004024  1129               	iorwf	_count_pop_w_tab& (0+255),w,b
  7272  004026  0100               	movlb	0	; () banked
  7273  004028  6FB3               	movwf	logRun@byte2& (0+255),b
  7274                           
  7275                           ; BSR set to: 0
  7276                           ;EEPROM.c: 121: EEPROM_write(addr, byte2);
  7277  00402A  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  7278  00402E  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  7279  004032  C0B3  F0AD         	movff	logRun@byte2,EEPROM_write@data
  7280  004036  EC8B  F022         	call	_EEPROM_write	;wreg free
  7281                           
  7282                           ;EEPROM.c: 122: addr++;
  7283  00403A  0100               	movlb	0	; () banked
  7284  00403C  4BB9               	infsnz	logRun@addr& (0+255),f,b
  7285  00403E  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  7286                           
  7287                           ; BSR set to: 0
  7288                           ;EEPROM.c: 123: unsigned char byte3 = (count_can_w_lab << 4) | count_can_no_lab;
  7289  004040  0101               	movlb	1	; () banked
  7290  004042  3925               	swapf	_count_can_w_lab& (0+255),w,b
  7291  004044  0BF0               	andlw	240
  7292  004046  0101               	movlb	1	; () banked
  7293  004048  1123               	iorwf	_count_can_no_lab& (0+255),w,b
  7294  00404A  0100               	movlb	0	; () banked
  7295  00404C  6FB4               	movwf	logRun@byte3& (0+255),b
  7296                           
  7297                           ; BSR set to: 0
  7298                           ;EEPROM.c: 124: EEPROM_write(addr, byte3);
  7299  00404E  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  7300  004052  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  7301  004056  C0B4  F0AD         	movff	logRun@byte3,EEPROM_write@data
  7302  00405A  EC8B  F022         	call	_EEPROM_write	;wreg free
  7303                           
  7304                           ;EEPROM.c: 125: addr++;
  7305  00405E  0100               	movlb	0	; () banked
  7306  004060  4BB9               	infsnz	logRun@addr& (0+255),f,b
  7307  004062  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  7308                           
  7309                           ; BSR set to: 0
  7310                           ;EEPROM.c: 128: for(int i = 0; i < 7; i++){
  7311  004064  0E00               	movlw	0
  7312  004066  0100               	movlb	0	; () banked
  7313  004068  6FB8               	movwf	(logRun@i+1)& (0+255),b
  7314  00406A  0E00               	movlw	0
  7315  00406C  6FB7               	movwf	logRun@i& (0+255),b
  7316                           
  7317                           ; BSR set to: 0
  7318  00406E  0100               	movlb	0	; () banked
  7319  004070  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  7320  004072  D008               	goto	l9878
  7321  004074  0100               	movlb	0	; () banked
  7322  004076  51B8               	movf	(logRun@i+1)& (0+255),w,b
  7323  004078  E128               	bnz	l1143
  7324  00407A  0E07               	movlw	7
  7325  00407C  0100               	movlb	0	; () banked
  7326  00407E  5DB7               	subwf	logRun@i& (0+255),w,b
  7327  004080  B0D8               	btfsc	status,0,c
  7328  004082  D023               	goto	l1143
  7329  004084                     l9878:
  7330                           
  7331                           ; BSR set to: 0
  7332                           ;EEPROM.c: 129: unsigned char byte_i = startTime[i];
  7333  004084  90D8               	bcf	status,0,c
  7334  004086  0100               	movlb	0	; () banked
  7335  004088  35B7               	rlcf	logRun@i& (0+255),w,b
  7336  00408A  6ED9               	movwf	fsr2l,c
  7337  00408C  0100               	movlb	0	; () banked
  7338  00408E  35B8               	rlcf	(logRun@i+1)& (0+255),w,b
  7339  004090  6EDA               	movwf	fsr2h,c
  7340  004092  0E0E               	movlw	low _startTime
  7341  004094  26D9               	addwf	fsr2l,f,c
  7342  004096  0E01               	movlw	high _startTime
  7343  004098  22DA               	addwfc	fsr2h,f,c
  7344  00409A  50DF               	movf	indf2,w,c
  7345  00409C  0100               	movlb	0	; () banked
  7346  00409E  6FB5               	movwf	logRun@byte_i& (0+255),b
  7347                           
  7348                           ; BSR set to: 0
  7349                           ;EEPROM.c: 130: EEPROM_write(addr, byte_i);
  7350  0040A0  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  7351  0040A4  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  7352  0040A8  C0B5  F0AD         	movff	logRun@byte_i,EEPROM_write@data
  7353  0040AC  EC8B  F022         	call	_EEPROM_write	;wreg free
  7354                           
  7355                           ;EEPROM.c: 131: addr++;
  7356  0040B0  0100               	movlb	0	; () banked
  7357  0040B2  4BB9               	infsnz	logRun@addr& (0+255),f,b
  7358  0040B4  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  7359                           
  7360                           ; BSR set to: 0
  7361  0040B6  0100               	movlb	0	; () banked
  7362  0040B8  4BB7               	infsnz	logRun@i& (0+255),f,b
  7363  0040BA  2BB8               	incf	(logRun@i+1)& (0+255),f,b
  7364                           
  7365                           ; BSR set to: 0
  7366  0040BC  0100               	movlb	0	; () banked
  7367  0040BE  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  7368  0040C0  D7E1               	goto	l9878
  7369  0040C2  0100               	movlb	0	; () banked
  7370  0040C4  51B8               	movf	(logRun@i+1)& (0+255),w,b
  7371  0040C6  E101               	bnz	u9390
  7372  0040C8  D7D8               	goto	L11
  7373  0040CA                     u9390:
  7374  0040CA                     l1143:
  7375                           
  7376                           ; BSR set to: 0
  7377                           ;EEPROM.c: 132: }
  7378                           ;EEPROM.c: 135: unsigned char byte11 = total_time;
  7379  0040CA  C0FA  F0B6         	movff	_total_time,logRun@byte11
  7380                           
  7381                           ; BSR set to: 0
  7382                           ;EEPROM.c: 136: EEPROM_write(addr, byte11);
  7383  0040CE  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  7384  0040D2  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  7385  0040D6  C0B6  F0AD         	movff	logRun@byte11,EEPROM_write@data
  7386  0040DA  EC8B  F022         	call	_EEPROM_write	;wreg free
  7387  0040DE  0012               	return		;funcret
  7388  0040E0                     __end_of_logRun:
  7389                           	opt stack 0
  7390                           tblptru	equ	0xFF8
  7391                           tblptrh	equ	0xFF7
  7392                           tblptrl	equ	0xFF6
  7393                           tablat	equ	0xFF5
  7394                           prodh	equ	0xFF4
  7395                           prodl	equ	0xFF3
  7396                           intcon	equ	0xFF2
  7397                           intcon2	equ	0xFF1
  7398                           intcon3	equ	0xFF0
  7399                           postinc0	equ	0xFEE
  7400                           wreg	equ	0xFE8
  7401                           postdec1	equ	0xFE5
  7402                           fsr1l	equ	0xFE1
  7403                           indf2	equ	0xFDF
  7404                           postinc2	equ	0xFDE
  7405                           postdec2	equ	0xFDD
  7406                           fsr2h	equ	0xFDA
  7407                           fsr2l	equ	0xFD9
  7408                           status	equ	0xFD8
  7409                           
  7410 ;; *************** function _initUI *****************
  7411 ;; Defined at:
  7412 ;;		line 62 in file "UI.c"
  7413 ;; Parameters:    Size  Location     Type
  7414 ;;		None
  7415 ;; Auto vars:     Size  Location     Type
  7416 ;;		None
  7417 ;; Return value:  Size  Location     Type
  7418 ;;                  1    wreg      void 
  7419 ;; Registers used:
  7420 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7421 ;; Tracked objects:
  7422 ;;		On entry : 0/0
  7423 ;;		On exit  : 0/0
  7424 ;;		Unchanged: 0/0
  7425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7426 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7427 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7428 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7429 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7430 ;;Total ram usage:        0 bytes
  7431 ;; Hardware stack levels used:    1
  7432 ;; Hardware stack levels required when called:   12
  7433 ;; This function calls:
  7434 ;;		_change_state_to_menu_start
  7435 ;;		_loadRTC
  7436 ;; This function is called by:
  7437 ;;		_main
  7438 ;; This function uses a non-reentrant model
  7439 ;;
  7440                           
  7441                           	psect	text17
  7442  00578E                     __ptext17:
  7443                           	opt stack 0
  7444  00578E                     _initUI:
  7445                           	opt stack 18
  7446                           
  7447                           ;UI.c: 63: (INTCONbits.GIE = 1);
  7448                           
  7449                           ;incstack = 0
  7450  00578E  8EF2               	bsf	intcon,7,c	;volatile
  7451                           
  7452                           ;UI.c: 64: machine_state = UI_state;
  7453  005790  0E00               	movlw	0
  7454  005792  0100               	movlb	0	; () banked
  7455  005794  6FFC               	movwf	_machine_state& (0+255),b
  7456                           
  7457                           ;UI.c: 65: logstate = 0;
  7458  005796  0E00               	movlw	0
  7459  005798  0100               	movlb	0	; () banked
  7460  00579A  6FF9               	movwf	(_logstate+1)& (0+255),b
  7461  00579C  0E00               	movlw	0
  7462  00579E  6FF8               	movwf	_logstate& (0+255),b
  7463                           
  7464                           ; BSR set to: 0
  7465                           ;UI.c: 67: if(RTCflag){
  7466  0057A0  0100               	movlb	0	; () banked
  7467  0057A2  51E4               	movf	_RTCflag& (0+255),w,b
  7468  0057A4  0100               	movlb	0	; () banked
  7469  0057A6  11E5               	iorwf	(_RTCflag+1)& (0+255),w,b
  7470  0057A8  A4D8               	btfss	status,2,c
  7471                           
  7472                           ; BSR set to: 0
  7473                           ;UI.c: 68: loadRTC();
  7474  0057AA  EC68  F026         	call	_loadRTC	;wreg free
  7475                           
  7476                           ;UI.c: 69: }
  7477                           ;UI.c: 71: change_state_to_menu_start();
  7478  0057AE  ECE5  F02C         	call	_change_state_to_menu_start	;wreg free
  7479                           
  7480                           ;UI.c: 72: firstboot = 1;
  7481  0057B2  0E00               	movlw	0
  7482  0057B4  0101               	movlb	1	; () banked
  7483  0057B6  6F3C               	movwf	(_firstboot+1)& (0+255),b
  7484  0057B8  0E01               	movlw	1
  7485  0057BA  6F3B               	movwf	_firstboot& (0+255),b
  7486                           
  7487                           ; BSR set to: 1
  7488  0057BC  0012               	return		;funcret
  7489  0057BE                     __end_of_initUI:
  7490                           	opt stack 0
  7491                           tblptru	equ	0xFF8
  7492                           tblptrh	equ	0xFF7
  7493                           tblptrl	equ	0xFF6
  7494                           tablat	equ	0xFF5
  7495                           prodh	equ	0xFF4
  7496                           prodl	equ	0xFF3
  7497                           intcon	equ	0xFF2
  7498                           intcon2	equ	0xFF1
  7499                           intcon3	equ	0xFF0
  7500                           postinc0	equ	0xFEE
  7501                           wreg	equ	0xFE8
  7502                           postdec1	equ	0xFE5
  7503                           fsr1l	equ	0xFE1
  7504                           indf2	equ	0xFDF
  7505                           postinc2	equ	0xFDE
  7506                           postdec2	equ	0xFDD
  7507                           fsr2h	equ	0xFDA
  7508                           fsr2l	equ	0xFD9
  7509                           status	equ	0xFD8
  7510                           
  7511 ;; *************** function _loadRTC *****************
  7512 ;; Defined at:
  7513 ;;		line 28 in file "RTC.c"
  7514 ;; Parameters:    Size  Location     Type
  7515 ;;		None
  7516 ;; Auto vars:     Size  Location     Type
  7517 ;;  i               2   22[BANK0 ] int 
  7518 ;; Return value:  Size  Location     Type
  7519 ;;                  1    wreg      void 
  7520 ;; Registers used:
  7521 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7522 ;; Tracked objects:
  7523 ;;		On entry : 0/0
  7524 ;;		On exit  : 0/0
  7525 ;;		Unchanged: 0/0
  7526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7527 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7528 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7529 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7530 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7531 ;;Total ram usage:        3 bytes
  7532 ;; Hardware stack levels used:    1
  7533 ;; Hardware stack levels required when called:    9
  7534 ;; This function calls:
  7535 ;;		_I2C_Master_Init
  7536 ;;		_I2C_Master_Start
  7537 ;;		_I2C_Master_Stop
  7538 ;;		_I2C_Master_Write
  7539 ;; This function is called by:
  7540 ;;		_initUI
  7541 ;; This function uses a non-reentrant model
  7542 ;;
  7543                           
  7544                           	psect	text18
  7545  004CD0                     __ptext18:
  7546                           	opt stack 0
  7547  004CD0                     _loadRTC:
  7548                           	opt stack 20
  7549                           
  7550                           ;RTC.c: 30: I2C_Master_Init(10000);
  7551                           
  7552                           ; BSR set to: 1
  7553                           ;incstack = 0
  7554  004CD0  0E10               	movlw	16
  7555  004CD2  0100               	movlb	0	; () banked
  7556  004CD4  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  7557  004CD6  0E27               	movlw	39
  7558  004CD8  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  7559  004CDA  0E00               	movlw	0
  7560  004CDC  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  7561  004CDE  0E00               	movlw	0
  7562  004CE0  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  7563  004CE2  EC29  F029         	call	_I2C_Master_Init	;wreg free
  7564                           
  7565                           ;RTC.c: 32: (INTCONbits.GIE = 0);
  7566  004CE6  9EF2               	bcf	intcon,7,c	;volatile
  7567                           
  7568                           ;RTC.c: 34: I2C_Master_Start();
  7569  004CE8  EC36  F02E         	call	_I2C_Master_Start	;wreg free
  7570                           
  7571                           ;RTC.c: 35: I2C_Master_Write(0b11010000);
  7572  004CEC  0E00               	movlw	0
  7573  004CEE  0100               	movlb	0	; () banked
  7574  004CF0  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7575  004CF2  0ED0               	movlw	208
  7576  004CF4  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7577  004CF6  EC24  F02E         	call	_I2C_Master_Write	;wreg free
  7578                           
  7579                           ;RTC.c: 36: I2C_Master_Write(0x00);
  7580  004CFA  0E00               	movlw	0
  7581  004CFC  0100               	movlb	0	; () banked
  7582  004CFE  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7583  004D00  0E00               	movlw	0
  7584  004D02  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7585  004D04  EC24  F02E         	call	_I2C_Master_Write	;wreg free
  7586                           
  7587                           ;RTC.c: 37: for(int i = 0; i<7; i++){
  7588  004D08  0E00               	movlw	0
  7589  004D0A  0100               	movlb	0	; () banked
  7590  004D0C  6F97               	movwf	(loadRTC@i+1)& (0+255),b
  7591  004D0E  0E00               	movlw	0
  7592  004D10  6F96               	movwf	loadRTC@i& (0+255),b
  7593  004D12                     l7608:
  7594                           
  7595                           ; BSR set to: 0
  7596  004D12  0100               	movlb	0	; () banked
  7597  004D14  BF97               	btfsc	(loadRTC@i+1)& (0+255),7,b
  7598  004D16  D008               	goto	l7612
  7599  004D18  0100               	movlb	0	; () banked
  7600  004D1A  5197               	movf	(loadRTC@i+1)& (0+255),w,b
  7601  004D1C  E11B               	bnz	l7618
  7602  004D1E  0E07               	movlw	7
  7603  004D20  0100               	movlb	0	; () banked
  7604  004D22  5D96               	subwf	loadRTC@i& (0+255),w,b
  7605  004D24  B0D8               	btfsc	status,0,c
  7606  004D26  D016               	goto	l7618
  7607  004D28                     l7612:
  7608                           
  7609                           ; BSR set to: 0
  7610                           ;RTC.c: 38: I2C_Master_Write(time[i]);
  7611  004D28  0E1C               	movlw	low _time
  7612  004D2A  0100               	movlb	0	; () banked
  7613  004D2C  2596               	addwf	loadRTC@i& (0+255),w,b
  7614  004D2E  6ED9               	movwf	fsr2l,c
  7615  004D30  0E01               	movlw	high _time
  7616  004D32  0100               	movlb	0	; () banked
  7617  004D34  2197               	addwfc	(loadRTC@i+1)& (0+255),w,b
  7618  004D36  6EDA               	movwf	fsr2h,c
  7619  004D38  50DF               	movf	indf2,w,c
  7620  004D3A  0100               	movlb	0	; () banked
  7621  004D3C  6F95               	movwf	??_loadRTC& (0+255),b
  7622  004D3E  0100               	movlb	0	; () banked
  7623  004D40  5195               	movf	??_loadRTC& (0+255),w,b
  7624  004D42  0100               	movlb	0	; () banked
  7625  004D44  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7626  004D46  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  7627  004D48  EC24  F02E         	call	_I2C_Master_Write	;wreg free
  7628  004D4C  0100               	movlb	0	; () banked
  7629  004D4E  4B96               	infsnz	loadRTC@i& (0+255),f,b
  7630  004D50  2B97               	incf	(loadRTC@i+1)& (0+255),f,b
  7631  004D52  D7DF               	goto	l7608
  7632  004D54                     l7618:
  7633                           
  7634                           ; BSR set to: 0
  7635                           ;RTC.c: 39: }
  7636                           ;RTC.c: 40: I2C_Master_Stop();
  7637  004D54  EC32  F02E         	call	_I2C_Master_Stop	;wreg free
  7638                           
  7639                           ;RTC.c: 41: (INTCONbits.GIE = 1);
  7640  004D58  8EF2               	bsf	intcon,7,c	;volatile
  7641  004D5A  0012               	return		;funcret
  7642  004D5C                     __end_of_loadRTC:
  7643                           	opt stack 0
  7644                           tblptru	equ	0xFF8
  7645                           tblptrh	equ	0xFF7
  7646                           tblptrl	equ	0xFF6
  7647                           tablat	equ	0xFF5
  7648                           prodh	equ	0xFF4
  7649                           prodl	equ	0xFF3
  7650                           intcon	equ	0xFF2
  7651                           intcon2	equ	0xFF1
  7652                           intcon3	equ	0xFF0
  7653                           postinc0	equ	0xFEE
  7654                           wreg	equ	0xFE8
  7655                           postdec1	equ	0xFE5
  7656                           fsr1l	equ	0xFE1
  7657                           indf2	equ	0xFDF
  7658                           postinc2	equ	0xFDE
  7659                           postdec2	equ	0xFDD
  7660                           fsr2h	equ	0xFDA
  7661                           fsr2l	equ	0xFD9
  7662                           status	equ	0xFD8
  7663                           
  7664 ;; *************** function _I2C_Master_Init *****************
  7665 ;; Defined at:
  7666 ;;		line 15 in file "I2C.c"
  7667 ;; Parameters:    Size  Location     Type
  7668 ;;  c               4   13[BANK0 ] const unsigned long 
  7669 ;; Auto vars:     Size  Location     Type
  7670 ;;		None
  7671 ;; Return value:  Size  Location     Type
  7672 ;;                  1    wreg      void 
  7673 ;; Registers used:
  7674 ;;		wreg, status,2, status,0, cstack
  7675 ;; Tracked objects:
  7676 ;;		On entry : 0/0
  7677 ;;		On exit  : 0/0
  7678 ;;		Unchanged: 0/0
  7679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7680 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7681 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7682 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7683 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7684 ;;Total ram usage:        8 bytes
  7685 ;; Hardware stack levels used:    1
  7686 ;; Hardware stack levels required when called:    8
  7687 ;; This function calls:
  7688 ;;		___lldiv
  7689 ;; This function is called by:
  7690 ;;		_main
  7691 ;;		_loadRTC
  7692 ;; This function uses a non-reentrant model
  7693 ;;
  7694                           
  7695                           	psect	text19
  7696  005252                     __ptext19:
  7697                           	opt stack 0
  7698  005252                     _I2C_Master_Init:
  7699                           	opt stack 20
  7700                           
  7701                           ;I2C.c: 18: SSPSTAT = 0b00000000;
  7702                           
  7703                           ;incstack = 0
  7704  005252  0E00               	movlw	0
  7705  005254  6EC7               	movwf	4039,c	;volatile
  7706                           
  7707                           ;I2C.c: 19: SSPCON1 = 0b00101000;
  7708  005256  0E28               	movlw	40
  7709  005258  6EC6               	movwf	4038,c	;volatile
  7710                           
  7711                           ;I2C.c: 20: SSPCON2 = 0b00000000;
  7712  00525A  0E00               	movlw	0
  7713  00525C  6EC5               	movwf	4037,c	;volatile
  7714                           
  7715                           ;I2C.c: 21: SSPADD = (32000000/(4*c))-1;
  7716  00525E  0E00               	movlw	0
  7717  005260  0100               	movlb	0	; () banked
  7718  005262  6F80               	movwf	___lldiv@dividend& (0+255),b
  7719  005264  0E48               	movlw	72
  7720  005266  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  7721  005268  0EE8               	movlw	232
  7722  00526A  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  7723  00526C  0E01               	movlw	1
  7724  00526E  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  7725  005270  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  7726  005274  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  7727  005278  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  7728  00527C  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  7729  005280  0E02               	movlw	2
  7730  005282                     u5955:
  7731  005282  90D8               	bcf	status,0,c
  7732  005284  0100               	movlb	0	; () banked
  7733  005286  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  7734  005288  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  7735  00528A  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  7736  00528C  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  7737  00528E  2EE8               	decfsz	wreg,f,c
  7738  005290  D7F8               	goto	u5955
  7739  005292  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  7740  005296  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  7741  00529A  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  7742  00529E  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  7743  0052A2  EC64  F025         	call	___lldiv	;wreg free
  7744  0052A6  0100               	movlb	0	; () banked
  7745  0052A8  0580               	decf	?___lldiv& (0+255),w,b
  7746  0052AA  6EC8               	movwf	4040,c	;volatile
  7747                           
  7748                           ; BSR set to: 0
  7749                           ;I2C.c: 22: TRISC3 = 1;
  7750  0052AC  8694               	bsf	3988,3,c	;volatile
  7751                           
  7752                           ; BSR set to: 0
  7753                           ;I2C.c: 23: TRISC4 = 1;
  7754  0052AE  8894               	bsf	3988,4,c	;volatile
  7755                           
  7756                           ; BSR set to: 0
  7757  0052B0  0012               	return		;funcret
  7758  0052B2                     __end_of_I2C_Master_Init:
  7759                           	opt stack 0
  7760                           tblptru	equ	0xFF8
  7761                           tblptrh	equ	0xFF7
  7762                           tblptrl	equ	0xFF6
  7763                           tablat	equ	0xFF5
  7764                           prodh	equ	0xFF4
  7765                           prodl	equ	0xFF3
  7766                           intcon	equ	0xFF2
  7767                           intcon2	equ	0xFF1
  7768                           intcon3	equ	0xFF0
  7769                           postinc0	equ	0xFEE
  7770                           wreg	equ	0xFE8
  7771                           postdec1	equ	0xFE5
  7772                           fsr1l	equ	0xFE1
  7773                           indf2	equ	0xFDF
  7774                           postinc2	equ	0xFDE
  7775                           postdec2	equ	0xFDD
  7776                           fsr2h	equ	0xFDA
  7777                           fsr2l	equ	0xFD9
  7778                           status	equ	0xFD8
  7779                           
  7780 ;; *************** function ___lldiv *****************
  7781 ;; Defined at:
  7782 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  7783 ;; Parameters:    Size  Location     Type
  7784 ;;  dividend        4    0[BANK0 ] unsigned long 
  7785 ;;  divisor         4    4[BANK0 ] unsigned long 
  7786 ;; Auto vars:     Size  Location     Type
  7787 ;;  quotient        4    8[BANK0 ] unsigned long 
  7788 ;;  counter         1   12[BANK0 ] unsigned char 
  7789 ;; Return value:  Size  Location     Type
  7790 ;;                  4    0[BANK0 ] unsigned long 
  7791 ;; Registers used:
  7792 ;;		wreg, status,2, status,0
  7793 ;; Tracked objects:
  7794 ;;		On entry : 0/0
  7795 ;;		On exit  : 0/0
  7796 ;;		Unchanged: 0/0
  7797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7798 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7799 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7800 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7801 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7802 ;;Total ram usage:       13 bytes
  7803 ;; Hardware stack levels used:    1
  7804 ;; Hardware stack levels required when called:    7
  7805 ;; This function calls:
  7806 ;;		Nothing
  7807 ;; This function is called by:
  7808 ;;		_I2C_Master_Init
  7809 ;; This function uses a non-reentrant model
  7810 ;;
  7811                           
  7812                           	psect	text20
  7813  004AC8                     __ptext20:
  7814                           	opt stack 0
  7815  004AC8                     ___lldiv:
  7816                           	opt stack 20
  7817                           
  7818                           ; BSR set to: 0
  7819                           ;incstack = 0
  7820  004AC8  0E00               	movlw	0
  7821  004ACA  0100               	movlb	0	; () banked
  7822  004ACC  6F88               	movwf	___lldiv@quotient& (0+255),b
  7823  004ACE  0E00               	movlw	0
  7824  004AD0  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  7825  004AD2  0E00               	movlw	0
  7826  004AD4  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  7827  004AD6  0E00               	movlw	0
  7828  004AD8  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  7829                           
  7830                           ; BSR set to: 0
  7831  004ADA  0100               	movlb	0	; () banked
  7832  004ADC  5184               	movf	___lldiv@divisor& (0+255),w,b
  7833  004ADE  0100               	movlb	0	; () banked
  7834  004AE0  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  7835  004AE2  0100               	movlb	0	; () banked
  7836  004AE4  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  7837  004AE6  0100               	movlb	0	; () banked
  7838  004AE8  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  7839  004AEA  B4D8               	btfsc	status,2,c
  7840  004AEC  D042               	goto	l1914
  7841                           
  7842                           ; BSR set to: 0
  7843  004AEE  0E01               	movlw	1
  7844  004AF0  0100               	movlb	0	; () banked
  7845  004AF2  6F8C               	movwf	___lldiv@counter& (0+255),b
  7846  004AF4  D008               	goto	l6932
  7847  004AF6                     l6930:
  7848                           
  7849                           ; BSR set to: 0
  7850  004AF6  0100               	movlb	0	; () banked
  7851  004AF8  90D8               	bcf	status,0,c
  7852  004AFA  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  7853  004AFC  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  7854  004AFE  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  7855  004B00  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  7856  004B02  0100               	movlb	0	; () banked
  7857  004B04  2B8C               	incf	___lldiv@counter& (0+255),f,b
  7858  004B06                     l6932:
  7859                           
  7860                           ; BSR set to: 0
  7861  004B06  0100               	movlb	0	; () banked
  7862  004B08  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  7863  004B0A  D7F5               	goto	l6930
  7864  004B0C                     l6934:
  7865                           
  7866                           ; BSR set to: 0
  7867  004B0C  0100               	movlb	0	; () banked
  7868  004B0E  90D8               	bcf	status,0,c
  7869  004B10  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  7870  004B12  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  7871  004B14  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  7872  004B16  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  7873                           
  7874                           ; BSR set to: 0
  7875  004B18  0100               	movlb	0	; () banked
  7876  004B1A  5184               	movf	___lldiv@divisor& (0+255),w,b
  7877  004B1C  0100               	movlb	0	; () banked
  7878  004B1E  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  7879  004B20  0100               	movlb	0	; () banked
  7880  004B22  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  7881  004B24  0100               	movlb	0	; () banked
  7882  004B26  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  7883  004B28  0100               	movlb	0	; () banked
  7884  004B2A  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  7885  004B2C  0100               	movlb	0	; () banked
  7886  004B2E  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  7887  004B30  0100               	movlb	0	; () banked
  7888  004B32  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  7889  004B34  0100               	movlb	0	; () banked
  7890  004B36  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  7891  004B38  A0D8               	btfss	status,0,c
  7892  004B3A  D012               	goto	l6942
  7893                           
  7894                           ; BSR set to: 0
  7895  004B3C  0100               	movlb	0	; () banked
  7896  004B3E  5184               	movf	___lldiv@divisor& (0+255),w,b
  7897  004B40  0100               	movlb	0	; () banked
  7898  004B42  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  7899  004B44  0100               	movlb	0	; () banked
  7900  004B46  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  7901  004B48  0100               	movlb	0	; () banked
  7902  004B4A  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  7903  004B4C  0100               	movlb	0	; () banked
  7904  004B4E  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  7905  004B50  0100               	movlb	0	; () banked
  7906  004B52  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  7907  004B54  0100               	movlb	0	; () banked
  7908  004B56  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  7909  004B58  0100               	movlb	0	; () banked
  7910  004B5A  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  7911                           
  7912                           ; BSR set to: 0
  7913  004B5C  0100               	movlb	0	; () banked
  7914  004B5E  8188               	bsf	___lldiv@quotient& (0+255),0,b
  7915  004B60                     l6942:
  7916                           
  7917                           ; BSR set to: 0
  7918  004B60  0100               	movlb	0	; () banked
  7919  004B62  90D8               	bcf	status,0,c
  7920  004B64  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  7921  004B66  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  7922  004B68  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  7923  004B6A  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  7924                           
  7925                           ; BSR set to: 0
  7926  004B6C  0100               	movlb	0	; () banked
  7927  004B6E  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  7928  004B70  D7CD               	goto	l6934
  7929  004B72                     l1914:
  7930                           
  7931                           ; BSR set to: 0
  7932  004B72  C088  F080         	movff	___lldiv@quotient,?___lldiv
  7933  004B76  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  7934  004B7A  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  7935  004B7E  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  7936                           
  7937                           ; BSR set to: 0
  7938  004B82  0012               	return		;funcret
  7939  004B84                     __end_of___lldiv:
  7940                           	opt stack 0
  7941                           tblptru	equ	0xFF8
  7942                           tblptrh	equ	0xFF7
  7943                           tblptrl	equ	0xFF6
  7944                           tablat	equ	0xFF5
  7945                           prodh	equ	0xFF4
  7946                           prodl	equ	0xFF3
  7947                           intcon	equ	0xFF2
  7948                           intcon2	equ	0xFF1
  7949                           intcon3	equ	0xFF0
  7950                           postinc0	equ	0xFEE
  7951                           wreg	equ	0xFE8
  7952                           postdec1	equ	0xFE5
  7953                           fsr1l	equ	0xFE1
  7954                           indf2	equ	0xFDF
  7955                           postinc2	equ	0xFDE
  7956                           postdec2	equ	0xFDD
  7957                           fsr2h	equ	0xFDA
  7958                           fsr2l	equ	0xFD9
  7959                           status	equ	0xFD8
  7960                           
  7961 ;; *************** function _change_state_to_menu_start *****************
  7962 ;; Defined at:
  7963 ;;		line 477 in file "UI.c"
  7964 ;; Parameters:    Size  Location     Type
  7965 ;;		None
  7966 ;; Auto vars:     Size  Location     Type
  7967 ;;		None
  7968 ;; Return value:  Size  Location     Type
  7969 ;;                  1    wreg      void 
  7970 ;; Registers used:
  7971 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7972 ;; Tracked objects:
  7973 ;;		On entry : 0/0
  7974 ;;		On exit  : 0/0
  7975 ;;		Unchanged: 0/0
  7976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7977 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7978 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7979 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7980 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7981 ;;Total ram usage:        0 bytes
  7982 ;; Hardware stack levels used:    1
  7983 ;; Hardware stack levels required when called:   11
  7984 ;; This function calls:
  7985 ;;		_lcdInst
  7986 ;;		_printRTC
  7987 ;;		_printf
  7988 ;; This function is called by:
  7989 ;;		_initUI
  7990 ;; This function uses a non-reentrant model
  7991 ;;
  7992                           
  7993                           	psect	text21
  7994  0059CA                     __ptext21:
  7995                           	opt stack 0
  7996  0059CA                     _change_state_to_menu_start:
  7997                           	opt stack 18
  7998                           
  7999                           ;UI.c: 478: cur_state = 0;
  8000                           
  8001                           ; BSR set to: 0
  8002                           ;incstack = 0
  8003  0059CA  0E00               	movlw	0
  8004  0059CC  0100               	movlb	0	; () banked
  8005  0059CE  6FE7               	movwf	(_cur_state+1)& (0+255),b
  8006  0059D0  0E00               	movlw	0
  8007  0059D2  6FE6               	movwf	_cur_state& (0+255),b
  8008                           
  8009                           ; BSR set to: 0
  8010                           ;UI.c: 480: lcdInst(0b10000000);;
  8011  0059D4  0E80               	movlw	128
  8012  0059D6  EC10  F02E         	call	_lcdInst
  8013                           
  8014                           ;UI.c: 481: printRTC();
  8015  0059DA  ECEA  F016         	call	_printRTC	;wreg free
  8016                           
  8017                           ;UI.c: 482: lcdInst(0b11000000);;
  8018  0059DE  0EC0               	movlw	192
  8019  0059E0  EC10  F02E         	call	_lcdInst
  8020                           
  8021                           ;UI.c: 483: printf("PUSH TO CONTINUE");
  8022  0059E4  0E0B               	movlw	low STR_30
  8023  0059E6  0100               	movlb	0	; () banked
  8024  0059E8  6F8E               	movwf	printf@f& (0+255),b
  8025  0059EA  0EFE               	movlw	high STR_30
  8026  0059EC  0100               	movlb	0	; () banked
  8027  0059EE  6F8F               	movwf	(printf@f+1)& (0+255),b
  8028  0059F0  EC16  F00E         	call	_printf	;wreg free
  8029  0059F4  0012               	return		;funcret
  8030  0059F6                     __end_of_change_state_to_menu_start:
  8031                           	opt stack 0
  8032                           tblptru	equ	0xFF8
  8033                           tblptrh	equ	0xFF7
  8034                           tblptrl	equ	0xFF6
  8035                           tablat	equ	0xFF5
  8036                           prodh	equ	0xFF4
  8037                           prodl	equ	0xFF3
  8038                           intcon	equ	0xFF2
  8039                           intcon2	equ	0xFF1
  8040                           intcon3	equ	0xFF0
  8041                           postinc0	equ	0xFEE
  8042                           wreg	equ	0xFE8
  8043                           postdec1	equ	0xFE5
  8044                           fsr1l	equ	0xFE1
  8045                           indf2	equ	0xFDF
  8046                           postinc2	equ	0xFDE
  8047                           postdec2	equ	0xFDD
  8048                           fsr2h	equ	0xFDA
  8049                           fsr2l	equ	0xFD9
  8050                           status	equ	0xFD8
  8051                           
  8052 ;; *************** function _initTime *****************
  8053 ;; Defined at:
  8054 ;;		line 17 in file "RTC.c"
  8055 ;; Parameters:    Size  Location     Type
  8056 ;;  s               1    wreg     unsigned char 
  8057 ;;  m               1    0[BANK0 ] unsigned char 
  8058 ;;  h               1    1[BANK0 ] unsigned char 
  8059 ;;  w               1    2[BANK0 ] unsigned char 
  8060 ;;  DD              1    3[BANK0 ] unsigned char 
  8061 ;;  MM              1    4[BANK0 ] unsigned char 
  8062 ;;  YY              1    5[BANK0 ] unsigned char 
  8063 ;; Auto vars:     Size  Location     Type
  8064 ;;  s               1    6[BANK0 ] unsigned char 
  8065 ;; Return value:  Size  Location     Type
  8066 ;;                  1    wreg      void 
  8067 ;; Registers used:
  8068 ;;		wreg
  8069 ;; Tracked objects:
  8070 ;;		On entry : 0/0
  8071 ;;		On exit  : 0/0
  8072 ;;		Unchanged: 0/0
  8073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8074 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8075 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8076 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8077 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8078 ;;Total ram usage:        7 bytes
  8079 ;; Hardware stack levels used:    1
  8080 ;; Hardware stack levels required when called:    7
  8081 ;; This function calls:
  8082 ;;		Nothing
  8083 ;; This function is called by:
  8084 ;;		_main
  8085 ;; This function uses a non-reentrant model
  8086 ;;
  8087                           
  8088                           	psect	text22
  8089  005B2E                     __ptext22:
  8090                           	opt stack 0
  8091  005B2E                     _initTime:
  8092                           	opt stack 23
  8093                           
  8094                           ;incstack = 0
  8095                           ;initTime@s stored from wreg
  8096  005B2E  0100               	movlb	0	; () banked
  8097  005B30  6F86               	movwf	initTime@s& (0+255),b
  8098                           
  8099                           ;RTC.c: 19: time[0] = s;
  8100  005B32  C086  F11C         	movff	initTime@s,_time
  8101                           
  8102                           ;RTC.c: 20: time[1] = m;
  8103  005B36  C080  F11D         	movff	initTime@m,_time+1
  8104                           
  8105                           ;RTC.c: 21: time[2] = h;
  8106  005B3A  C081  F11E         	movff	initTime@h,_time+2
  8107                           
  8108                           ;RTC.c: 22: time[3] = w;
  8109  005B3E  C082  F11F         	movff	initTime@w,_time+3
  8110                           
  8111                           ;RTC.c: 23: time[4] = DD;
  8112  005B42  C083  F120         	movff	initTime@DD,_time+4
  8113                           
  8114                           ;RTC.c: 24: time[5] = MM;
  8115  005B46  C084  F121         	movff	initTime@MM,_time+5
  8116                           
  8117                           ;RTC.c: 25: time[6] = YY;
  8118  005B4A  C085  F122         	movff	initTime@YY,_time+6
  8119  005B4E  0012               	return		;funcret
  8120  005B50                     __end_of_initTime:
  8121                           	opt stack 0
  8122                           tblptru	equ	0xFF8
  8123                           tblptrh	equ	0xFF7
  8124                           tblptrl	equ	0xFF6
  8125                           tablat	equ	0xFF5
  8126                           prodh	equ	0xFF4
  8127                           prodl	equ	0xFF3
  8128                           intcon	equ	0xFF2
  8129                           intcon2	equ	0xFF1
  8130                           intcon3	equ	0xFF0
  8131                           postinc0	equ	0xFEE
  8132                           wreg	equ	0xFE8
  8133                           postdec1	equ	0xFE5
  8134                           fsr1l	equ	0xFE1
  8135                           indf2	equ	0xFDF
  8136                           postinc2	equ	0xFDE
  8137                           postdec2	equ	0xFDD
  8138                           fsr2h	equ	0xFDA
  8139                           fsr2l	equ	0xFD9
  8140                           status	equ	0xFD8
  8141                           
  8142 ;; *************** function _initLCD *****************
  8143 ;; Defined at:
  8144 ;;		line 50 in file "lcd.c"
  8145 ;; Parameters:    Size  Location     Type
  8146 ;;		None
  8147 ;; Auto vars:     Size  Location     Type
  8148 ;;		None
  8149 ;; Return value:  Size  Location     Type
  8150 ;;                  1    wreg      void 
  8151 ;; Registers used:
  8152 ;;		wreg, status,2, status,0, cstack
  8153 ;; Tracked objects:
  8154 ;;		On entry : 0/0
  8155 ;;		On exit  : 0/0
  8156 ;;		Unchanged: 0/0
  8157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8158 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8159 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8160 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8161 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8162 ;;Total ram usage:        1 bytes
  8163 ;; Hardware stack levels used:    1
  8164 ;; Hardware stack levels required when called:    9
  8165 ;; This function calls:
  8166 ;;		_lcdInst
  8167 ;; This function is called by:
  8168 ;;		_main
  8169 ;; This function uses a non-reentrant model
  8170 ;;
  8171                           
  8172                           	psect	text23
  8173  005548                     __ptext23:
  8174                           	opt stack 0
  8175  005548                     _initLCD:
  8176                           	opt stack 21
  8177                           
  8178                           ;lcd.c: 51: _delay((unsigned long)((15)*(32000000/4000.0)));
  8179                           
  8180                           ;incstack = 0
  8181  005548  0E9C               	movlw	156
  8182  00554A  0100               	movlb	0	; () banked
  8183  00554C  6F83               	movwf	??_initLCD& (0+255),b
  8184  00554E  0ED7               	movlw	215
  8185  005550                     u10187:
  8186  005550  2EE8               	decfsz	wreg,f,c
  8187  005552  D7FE               	bra	u10187
  8188  005554  2F83               	decfsz	??_initLCD& (0+255),f,b
  8189  005556  D7FC               	bra	u10187
  8190                           
  8191                           ;lcd.c: 52: lcdInst(0b00110011);
  8192  005558  0E33               	movlw	51
  8193  00555A  EC10  F02E         	call	_lcdInst
  8194                           
  8195                           ;lcd.c: 53: lcdInst(0b00110010);
  8196  00555E  0E32               	movlw	50
  8197  005560  EC10  F02E         	call	_lcdInst
  8198                           
  8199                           ;lcd.c: 55: lcdInst(0b00101000);
  8200  005564  0E28               	movlw	40
  8201  005566  EC10  F02E         	call	_lcdInst
  8202                           
  8203                           ;lcd.c: 56: lcdInst(0b00001100);
  8204  00556A  0E0C               	movlw	12
  8205  00556C  EC10  F02E         	call	_lcdInst
  8206                           
  8207                           ;lcd.c: 57: lcdInst(0b00000110);
  8208  005570  0E06               	movlw	6
  8209  005572  EC10  F02E         	call	_lcdInst
  8210                           
  8211                           ;lcd.c: 58: lcdInst(0b00000001);
  8212  005576  0E01               	movlw	1
  8213  005578  EC10  F02E         	call	_lcdInst
  8214                           
  8215                           ;lcd.c: 59: _delay((unsigned long)((15)*(32000000/4000.0)));
  8216  00557C  0E9C               	movlw	156
  8217  00557E  0100               	movlb	0	; () banked
  8218  005580  6F83               	movwf	??_initLCD& (0+255),b
  8219  005582  0ED7               	movlw	215
  8220  005584                     u10197:
  8221  005584  2EE8               	decfsz	wreg,f,c
  8222  005586  D7FE               	bra	u10197
  8223  005588  2F83               	decfsz	??_initLCD& (0+255),f,b
  8224  00558A  D7FC               	bra	u10197
  8225  00558C  0012               	return		;funcret
  8226  00558E                     __end_of_initLCD:
  8227                           	opt stack 0
  8228                           tblptru	equ	0xFF8
  8229                           tblptrh	equ	0xFF7
  8230                           tblptrl	equ	0xFF6
  8231                           tablat	equ	0xFF5
  8232                           prodh	equ	0xFF4
  8233                           prodl	equ	0xFF3
  8234                           intcon	equ	0xFF2
  8235                           intcon2	equ	0xFF1
  8236                           intcon3	equ	0xFF0
  8237                           postinc0	equ	0xFEE
  8238                           wreg	equ	0xFE8
  8239                           postdec1	equ	0xFE5
  8240                           fsr1l	equ	0xFE1
  8241                           indf2	equ	0xFDF
  8242                           postinc2	equ	0xFDE
  8243                           postdec2	equ	0xFDD
  8244                           fsr2h	equ	0xFDA
  8245                           fsr2l	equ	0xFD9
  8246                           status	equ	0xFD8
  8247                           
  8248 ;; *************** function _initEEPROM *****************
  8249 ;; Defined at:
  8250 ;;		line 32 in file "EEPROM.c"
  8251 ;; Parameters:    Size  Location     Type
  8252 ;;		None
  8253 ;; Auto vars:     Size  Location     Type
  8254 ;;		None
  8255 ;; Return value:  Size  Location     Type
  8256 ;;                  1    wreg      void 
  8257 ;; Registers used:
  8258 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8259 ;; Tracked objects:
  8260 ;;		On entry : 0/0
  8261 ;;		On exit  : 0/0
  8262 ;;		Unchanged: 0/0
  8263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8264 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8265 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8266 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8267 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8268 ;;Total ram usage:        0 bytes
  8269 ;; Hardware stack levels used:    1
  8270 ;; Hardware stack levels required when called:   11
  8271 ;; This function calls:
  8272 ;;		_EEPROM_write
  8273 ;; This function is called by:
  8274 ;;		_main
  8275 ;; This function uses a non-reentrant model
  8276 ;;
  8277                           
  8278                           	psect	text24
  8279  005BBE                     __ptext24:
  8280                           	opt stack 0
  8281  005BBE                     _initEEPROM:
  8282                           	opt stack 19
  8283                           
  8284                           ;EEPROM.c: 34: EEPROM_write(0, 0x01);
  8285                           
  8286                           ;incstack = 0
  8287  005BBE  0E00               	movlw	0
  8288  005BC0  0100               	movlb	0	; () banked
  8289  005BC2  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  8290  005BC4  0E00               	movlw	0
  8291  005BC6  6FAB               	movwf	EEPROM_write@address& (0+255),b
  8292  005BC8  0E01               	movlw	1
  8293  005BCA  0100               	movlb	0	; () banked
  8294  005BCC  6FAD               	movwf	EEPROM_write@data& (0+255),b
  8295  005BCE  EC8B  F022         	call	_EEPROM_write	;wreg free
  8296  005BD2  0012               	return		;funcret
  8297  005BD4                     __end_of_initEEPROM:
  8298                           	opt stack 0
  8299                           tblptru	equ	0xFF8
  8300                           tblptrh	equ	0xFF7
  8301                           tblptrl	equ	0xFF6
  8302                           tablat	equ	0xFF5
  8303                           prodh	equ	0xFF4
  8304                           prodl	equ	0xFF3
  8305                           intcon	equ	0xFF2
  8306                           intcon2	equ	0xFF1
  8307                           intcon3	equ	0xFF0
  8308                           postinc0	equ	0xFEE
  8309                           wreg	equ	0xFE8
  8310                           postdec1	equ	0xFE5
  8311                           fsr1l	equ	0xFE1
  8312                           indf2	equ	0xFDF
  8313                           postinc2	equ	0xFDE
  8314                           postdec2	equ	0xFDD
  8315                           fsr2h	equ	0xFDA
  8316                           fsr2l	equ	0xFD9
  8317                           status	equ	0xFD8
  8318                           
  8319 ;; *************** function _EEPROM_write *****************
  8320 ;; Defined at:
  8321 ;;		line 37 in file "EEPROM.c"
  8322 ;; Parameters:    Size  Location     Type
  8323 ;;  address         2   43[BANK0 ] unsigned short 
  8324 ;;  data            1   45[BANK0 ] unsigned char 
  8325 ;; Auto vars:     Size  Location     Type
  8326 ;;  i               1   48[BANK0 ] unsigned char 
  8327 ;;  i               1   47[BANK0 ] unsigned char 
  8328 ;; Return value:  Size  Location     Type
  8329 ;;                  1    wreg      void 
  8330 ;; Registers used:
  8331 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8332 ;; Tracked objects:
  8333 ;;		On entry : 0/0
  8334 ;;		On exit  : 0/0
  8335 ;;		Unchanged: 0/0
  8336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8337 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8338 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8339 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8340 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8341 ;;Total ram usage:        6 bytes
  8342 ;; Hardware stack levels used:    1
  8343 ;; Hardware stack levels required when called:   10
  8344 ;; This function calls:
  8345 ;;		_EEPROM_read
  8346 ;;		_lcdInst
  8347 ;;		_printf
  8348 ;; This function is called by:
  8349 ;;		_Loading
  8350 ;;		_initEEPROM
  8351 ;;		_logRun
  8352 ;; This function uses a non-reentrant model
  8353 ;;
  8354                           
  8355                           	psect	text25
  8356  004516                     __ptext25:
  8357                           	opt stack 0
  8358  004516                     _EEPROM_write:
  8359                           	opt stack 18
  8360                           
  8361                           ;EEPROM.c: 38: EECON1bits.WREN = 1;
  8362                           
  8363                           ;incstack = 0
  8364  004516  84A6               	bsf	4006,2,c	;volatile
  8365                           
  8366                           ;EEPROM.c: 41: EEADRH = (unsigned char)(address >> 8);
  8367  004518  0100               	movlb	0	; () banked
  8368  00451A  51AC               	movf	(EEPROM_write@address+1)& (0+255),w,b
  8369  00451C  6EAA               	movwf	4010,c	;volatile
  8370                           
  8371                           ; BSR set to: 0
  8372                           ;EEPROM.c: 42: EEADR = (unsigned char)address;
  8373  00451E  C0AB  FFA9         	movff	EEPROM_write@address,4009	;volatile
  8374                           
  8375                           ; BSR set to: 0
  8376                           ;EEPROM.c: 44: EEDATA = data;
  8377  004522  C0AD  FFA8         	movff	EEPROM_write@data,4008	;volatile
  8378                           
  8379                           ; BSR set to: 0
  8380                           ;EEPROM.c: 45: EECON1bits.EEPGD = 0;
  8381  004526  9EA6               	bcf	4006,7,c	;volatile
  8382                           
  8383                           ; BSR set to: 0
  8384                           ;EEPROM.c: 46: EECON1bits.CFGS = 0;
  8385  004528  9CA6               	bcf	4006,6,c	;volatile
  8386                           
  8387                           ; BSR set to: 0
  8388                           ;EEPROM.c: 48: (INTCONbits.GIE = 0);
  8389  00452A  9EF2               	bcf	intcon,7,c	;volatile
  8390                           
  8391                           ;EEPROM.c: 50: EECON2 = 0x55;
  8392  00452C  0E55               	movlw	85
  8393  00452E  6EA7               	movwf	4007,c	;volatile
  8394                           
  8395                           ;EEPROM.c: 51: EECON2 = 0x0AA;
  8396  004530  0EAA               	movlw	170
  8397  004532  6EA7               	movwf	4007,c	;volatile
  8398                           
  8399                           ; BSR set to: 0
  8400                           ;EEPROM.c: 52: EECON1bits.WR = 1;
  8401  004534  82A6               	bsf	4006,1,c	;volatile
  8402                           
  8403                           ; BSR set to: 0
  8404                           ;EEPROM.c: 53: (INTCONbits.GIE = 1);
  8405  004536  8EF2               	bsf	intcon,7,c	;volatile
  8406  004538                     l1121:
  8407  004538  A8A1               	btfss	4001,4,c	;volatile
  8408  00453A  D7FE               	goto	l1121
  8409                           
  8410                           ;EEPROM.c: 58: PIR2bits.EEIF = 0;
  8411  00453C  98A1               	bcf	4001,4,c	;volatile
  8412                           
  8413                           ;EEPROM.c: 59: EECON1bits.WREN = 0;
  8414  00453E  94A6               	bcf	4006,2,c	;volatile
  8415                           
  8416                           ;EEPROM.c: 62: if(debug){
  8417  004540  0101               	movlb	1	; () banked
  8418  004542  512D               	movf	_debug& (0+255),w,b
  8419  004544  0101               	movlb	1	; () banked
  8420  004546  112E               	iorwf	(_debug+1)& (0+255),w,b
  8421  004548  B4D8               	btfsc	status,2,c
  8422  00454A  0012               	return	
  8423                           
  8424                           ; BSR set to: 1
  8425                           ;EEPROM.c: 63: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8426  00454C  0E01               	movlw	1
  8427  00454E  EC10  F02E         	call	_lcdInst
  8428  004552  0E68               	movlw	104
  8429  004554  0100               	movlb	0	; () banked
  8430  004556  6FAE               	movwf	??_EEPROM_write& (0+255),b
  8431  004558  0EE4               	movlw	228
  8432  00455A                     u10207:
  8433  00455A  2EE8               	decfsz	wreg,f,c
  8434  00455C  D7FE               	bra	u10207
  8435  00455E  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  8436  004560  D7FC               	bra	u10207
  8437  004562  F000               	nop	
  8438                           
  8439                           ;EEPROM.c: 64: lcdInst(0b10000000);;
  8440  004564  0E80               	movlw	128
  8441  004566  EC10  F02E         	call	_lcdInst
  8442                           
  8443                           ;EEPROM.c: 65: if(EEPROM_read(address)==data){
  8444  00456A  C0AB  F080         	movff	EEPROM_write@address,EEPROM_read@address
  8445  00456E  C0AC  F081         	movff	EEPROM_write@address+1,EEPROM_read@address+1
  8446  004572  ECD3  F02D         	call	_EEPROM_read	;wreg free
  8447  004576  0100               	movlb	0	; () banked
  8448  004578  19AD               	xorwf	EEPROM_write@data& (0+255),w,b
  8449  00457A  A4D8               	btfss	status,2,c
  8450  00457C  D024               	goto	l7380
  8451                           
  8452                           ; BSR set to: 0
  8453                           ;EEPROM.c: 66: printf("(data: %u, addr: %u)", data, address);
  8454  00457E  0ED0               	movlw	low STR_67
  8455  004580  0100               	movlb	0	; () banked
  8456  004582  6F8E               	movwf	printf@f& (0+255),b
  8457  004584  0EFA               	movlw	high STR_67
  8458  004586  0100               	movlb	0	; () banked
  8459  004588  6F8F               	movwf	(printf@f+1)& (0+255),b
  8460  00458A  C0AD  F090         	movff	EEPROM_write@data,?_printf+2
  8461  00458E  0100               	movlb	0	; () banked
  8462  004590  6B91               	clrf	(?_printf+3)& (0+255),b
  8463  004592  C0AB  F092         	movff	EEPROM_write@address,?_printf+4
  8464  004596  C0AC  F093         	movff	EEPROM_write@address+1,?_printf+5
  8465  00459A  EC16  F00E         	call	_printf	;wreg free
  8466                           
  8467                           ;EEPROM.c: 67: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));}
      +                          ;
  8468  00459E  0E00               	movlw	0
  8469  0045A0  0100               	movlb	0	; () banked
  8470  0045A2  6FAF               	movwf	EEPROM_write@i& (0+255),b
  8471  0045A4                     l7372:
  8472                           
  8473                           ; BSR set to: 0
  8474  0045A4  0E63               	movlw	99
  8475  0045A6  0100               	movlb	0	; () banked
  8476  0045A8  65AF               	cpfsgt	EEPROM_write@i& (0+255),b
  8477  0045AA  D001               	goto	l7376
  8478  0045AC  0012               	return	
  8479  0045AE                     l7376:
  8480                           
  8481                           ; BSR set to: 0
  8482  0045AE  0E68               	movlw	104
  8483  0045B0  0100               	movlb	0	; () banked
  8484  0045B2  6FAE               	movwf	??_EEPROM_write& (0+255),b
  8485  0045B4  0EE4               	movlw	228
  8486  0045B6                     u10217:
  8487  0045B6  2EE8               	decfsz	wreg,f,c
  8488  0045B8  D7FE               	bra	u10217
  8489  0045BA  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  8490  0045BC  D7FC               	bra	u10217
  8491  0045BE  F000               	nop	
  8492  0045C0  0100               	movlb	0	; () banked
  8493  0045C2  2BAF               	incf	EEPROM_write@i& (0+255),f,b
  8494  0045C4  D7EF               	goto	l7372
  8495  0045C6                     l7380:
  8496                           
  8497                           ; BSR set to: 0
  8498                           ;EEPROM.c: 69: else{ printf("FAILED"); for(char i=0;i<100;i++){_delay((unsigned long)((1
      +                          0)*(32000000/4000.0)));}; }
  8499  0045C6  0EBD               	movlw	low STR_68
  8500  0045C8  0100               	movlb	0	; () banked
  8501  0045CA  6F8E               	movwf	printf@f& (0+255),b
  8502  0045CC  0EFF               	movlw	high STR_68
  8503  0045CE  0100               	movlb	0	; () banked
  8504  0045D0  6F8F               	movwf	(printf@f+1)& (0+255),b
  8505  0045D2  EC16  F00E         	call	_printf	;wreg free
  8506  0045D6  0E00               	movlw	0
  8507  0045D8  0100               	movlb	0	; () banked
  8508  0045DA  6FB0               	movwf	EEPROM_write@i_1403& (0+255),b
  8509  0045DC                     l7384:
  8510                           
  8511                           ; BSR set to: 0
  8512  0045DC  0E63               	movlw	99
  8513  0045DE  0100               	movlb	0	; () banked
  8514  0045E0  65B0               	cpfsgt	EEPROM_write@i_1403& (0+255),b
  8515  0045E2  D001               	goto	l7388
  8516  0045E4  0012               	return	
  8517  0045E6                     l7388:
  8518                           
  8519                           ; BSR set to: 0
  8520  0045E6  0E68               	movlw	104
  8521  0045E8  0100               	movlb	0	; () banked
  8522  0045EA  6FAE               	movwf	??_EEPROM_write& (0+255),b
  8523  0045EC  0EE4               	movlw	228
  8524  0045EE                     u10227:
  8525  0045EE  2EE8               	decfsz	wreg,f,c
  8526  0045F0  D7FE               	bra	u10227
  8527  0045F2  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  8528  0045F4  D7FC               	bra	u10227
  8529  0045F6  F000               	nop	
  8530  0045F8  0100               	movlb	0	; () banked
  8531  0045FA  2BB0               	incf	EEPROM_write@i_1403& (0+255),f,b
  8532  0045FC  D7EF               	goto	l7384
  8533  0045FE                     __end_of_EEPROM_write:
  8534                           	opt stack 0
  8535                           tblptru	equ	0xFF8
  8536                           tblptrh	equ	0xFF7
  8537                           tblptrl	equ	0xFF6
  8538                           tablat	equ	0xFF5
  8539                           prodh	equ	0xFF4
  8540                           prodl	equ	0xFF3
  8541                           intcon	equ	0xFF2
  8542                           intcon2	equ	0xFF1
  8543                           intcon3	equ	0xFF0
  8544                           postinc0	equ	0xFEE
  8545                           wreg	equ	0xFE8
  8546                           postdec1	equ	0xFE5
  8547                           fsr1l	equ	0xFE1
  8548                           indf2	equ	0xFDF
  8549                           postinc2	equ	0xFDE
  8550                           postdec2	equ	0xFDD
  8551                           fsr2h	equ	0xFDA
  8552                           fsr2l	equ	0xFD9
  8553                           status	equ	0xFD8
  8554                           
  8555 ;; *************** function _EEPROM_read *****************
  8556 ;; Defined at:
  8557 ;;		line 73 in file "EEPROM.c"
  8558 ;; Parameters:    Size  Location     Type
  8559 ;;  address         2    0[BANK0 ] unsigned short 
  8560 ;; Auto vars:     Size  Location     Type
  8561 ;;		None
  8562 ;; Return value:  Size  Location     Type
  8563 ;;                  1    wreg      unsigned char 
  8564 ;; Registers used:
  8565 ;;		wreg, status,2
  8566 ;; Tracked objects:
  8567 ;;		On entry : 0/0
  8568 ;;		On exit  : 0/0
  8569 ;;		Unchanged: 0/0
  8570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8571 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8572 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8573 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8574 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8575 ;;Total ram usage:        2 bytes
  8576 ;; Hardware stack levels used:    1
  8577 ;; Hardware stack levels required when called:    7
  8578 ;; This function calls:
  8579 ;;		Nothing
  8580 ;; This function is called by:
  8581 ;;		_Loading
  8582 ;;		_EEPROM_write
  8583 ;;		_logRun
  8584 ;; This function uses a non-reentrant model
  8585 ;;
  8586                           
  8587                           	psect	text26
  8588  005BA6                     __ptext26:
  8589                           	opt stack 0
  8590  005BA6                     _EEPROM_read:
  8591                           	opt stack 20
  8592                           
  8593                           ;EEPROM.c: 75: EEADRH = (unsigned char)(address >> 8);
  8594                           
  8595                           ;incstack = 0
  8596  005BA6  0100               	movlb	0	; () banked
  8597  005BA8  5181               	movf	(EEPROM_read@address+1)& (0+255),w,b
  8598  005BAA  6EAA               	movwf	4010,c	;volatile
  8599                           
  8600                           ; BSR set to: 0
  8601                           ;EEPROM.c: 76: EEADR = (unsigned char)address;
  8602  005BAC  C080  FFA9         	movff	EEPROM_read@address,4009	;volatile
  8603                           
  8604                           ; BSR set to: 0
  8605                           ;EEPROM.c: 78: EECON1bits.EEPGD = 0;
  8606  005BB0  9EA6               	bcf	4006,7,c	;volatile
  8607                           
  8608                           ; BSR set to: 0
  8609                           ;EEPROM.c: 79: EECON1bits.CFGS = 0;
  8610  005BB2  9CA6               	bcf	4006,6,c	;volatile
  8611                           
  8612                           ; BSR set to: 0
  8613                           ;EEPROM.c: 80: EECON1bits.RD = 1;
  8614  005BB4  80A6               	bsf	4006,0,c	;volatile
  8615  005BB6                     l1134:
  8616  005BB6  B0A6               	btfsc	4006,0,c	;volatile
  8617  005BB8  D7FE               	goto	l1134
  8618                           
  8619                           ;EEPROM.c: 86: return EEDATA;
  8620  005BBA  50A8               	movf	4008,w,c	;volatile
  8621  005BBC  0012               	return	
  8622  005BBE                     __end_of_EEPROM_read:
  8623                           	opt stack 0
  8624                           tblptru	equ	0xFF8
  8625                           tblptrh	equ	0xFF7
  8626                           tblptrl	equ	0xFF6
  8627                           tablat	equ	0xFF5
  8628                           prodh	equ	0xFF4
  8629                           prodl	equ	0xFF3
  8630                           intcon	equ	0xFF2
  8631                           intcon2	equ	0xFF1
  8632                           intcon3	equ	0xFF0
  8633                           postinc0	equ	0xFEE
  8634                           wreg	equ	0xFE8
  8635                           postdec1	equ	0xFE5
  8636                           fsr1l	equ	0xFE1
  8637                           indf2	equ	0xFDF
  8638                           postinc2	equ	0xFDE
  8639                           postdec2	equ	0xFDD
  8640                           fsr2h	equ	0xFDA
  8641                           fsr2l	equ	0xFD9
  8642                           status	equ	0xFD8
  8643                           
  8644 ;; *************** function _UI *****************
  8645 ;; Defined at:
  8646 ;;		line 76 in file "UI.c"
  8647 ;; Parameters:    Size  Location     Type
  8648 ;;		None
  8649 ;; Auto vars:     Size  Location     Type
  8650 ;;  i               1   73[BANK0 ] unsigned char 
  8651 ;;  i               1   85[BANK0 ] unsigned char 
  8652 ;;  i               1   84[BANK0 ] unsigned char 
  8653 ;;  i               1   83[BANK0 ] unsigned char 
  8654 ;;  i               1   82[BANK0 ] unsigned char 
  8655 ;;  i               1   81[BANK0 ] unsigned char 
  8656 ;;  i               1   80[BANK0 ] unsigned char 
  8657 ;;  i               1   79[BANK0 ] unsigned char 
  8658 ;;  i               1   78[BANK0 ] unsigned char 
  8659 ;;  i               1   77[BANK0 ] unsigned char 
  8660 ;;  i               1   76[BANK0 ] unsigned char 
  8661 ;;  i               1   75[BANK0 ] unsigned char 
  8662 ;;  i               1   74[BANK0 ] unsigned char 
  8663 ;;  month           4   86[BANK0 ] unsigned char [4]
  8664 ;;  i               1   72[BANK0 ] unsigned char 
  8665 ;; Return value:  Size  Location     Type
  8666 ;;                  1    wreg      void 
  8667 ;; Registers used:
  8668 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8669 ;; Tracked objects:
  8670 ;;		On entry : 0/0
  8671 ;;		On exit  : 0/0
  8672 ;;		Unchanged: 0/0
  8673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8674 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8675 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8676 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8677 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8678 ;;Total ram usage:       22 bytes
  8679 ;; Hardware stack levels used:    1
  8680 ;; Hardware stack levels required when called:   11
  8681 ;; This function calls:
  8682 ;;		___awdiv
  8683 ;;		___awmod
  8684 ;;		_change_state_to_menu_12
  8685 ;;		_change_state_to_menu_22
  8686 ;;		_lcdInst
  8687 ;;		_printRTC
  8688 ;;		_printf
  8689 ;;		_strcpy
  8690 ;; This function is called by:
  8691 ;;		_main
  8692 ;; This function uses a non-reentrant model
  8693 ;;
  8694                           
  8695                           	psect	text27
  8696  000012                     __ptext27:
  8697                           	opt stack 0
  8698  000012                     _UI:
  8699                           	opt stack 19
  8700                           
  8701                           ;UI.c: 77: if(machine_state == DoneSorting_state){
  8702                           
  8703                           ;incstack = 0
  8704  000012  0E02               	movlw	2
  8705  000014  0100               	movlb	0	; () banked
  8706  000016  19FC               	xorwf	_machine_state& (0+255),w,b
  8707  000018  A4D8               	btfss	status,2,c
  8708  00001A  D086               	goto	l9280
  8709                           
  8710                           ; BSR set to: 0
  8711                           ;UI.c: 78: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8712  00001C  0E01               	movlw	1
  8713  00001E  EC10  F02E         	call	_lcdInst
  8714  000022  0E68               	movlw	104
  8715  000024  0100               	movlb	0	; () banked
  8716  000026  6FC4               	movwf	??_UI& (0+255),b
  8717  000028  0EE4               	movlw	228
  8718  00002A                     u10237:
  8719  00002A  2EE8               	decfsz	wreg,f,c
  8720  00002C  D7FE               	bra	u10237
  8721  00002E  2FC4               	decfsz	??_UI& (0+255),f,b
  8722  000030  D7FC               	bra	u10237
  8723  000032  F000               	nop	
  8724                           
  8725                           ;UI.c: 79: lcdInst(0b10000000);;
  8726  000034  0E80               	movlw	128
  8727  000036  EC10  F02E         	call	_lcdInst
  8728                           
  8729                           ;UI.c: 80: printf("RESULTS IN LOG %d", sel+1);
  8730  00003A  0E51               	movlw	low STR_1
  8731  00003C  0100               	movlb	0	; () banked
  8732  00003E  6F8E               	movwf	printf@f& (0+255),b
  8733  000040  0EFB               	movlw	high STR_1
  8734  000042  0100               	movlb	0	; () banked
  8735  000044  6F8F               	movwf	(printf@f+1)& (0+255),b
  8736  000046  0E01               	movlw	1
  8737  000048  0100               	movlb	0	; () banked
  8738  00004A  25FD               	addwf	_sel& (0+255),w,b
  8739  00004C  0100               	movlb	0	; () banked
  8740  00004E  6F90               	movwf	(?_printf+2)& (0+255),b
  8741  000050  0100               	movlb	0	; () banked
  8742  000052  6B91               	clrf	(?_printf+3)& (0+255),b
  8743  000054  0E00               	movlw	0
  8744  000056  2391               	addwfc	(?_printf+3)& (0+255),f,b
  8745  000058  EC16  F00E         	call	_printf	;wreg free
  8746                           
  8747                           ;UI.c: 81: lcdInst(0b11000000);;
  8748  00005C  0EC0               	movlw	192
  8749  00005E  EC10  F02E         	call	_lcdInst
  8750                           
  8751                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  8752  000062  0E0E               	movlw	14
  8753  000064  0100               	movlb	0	; () banked
  8754  000066  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8755  000068  0E10               	movlw	16
  8756  00006A  6F82               	movwf	___awmod@divisor& (0+255),b
  8757  00006C  C0FA  F080         	movff	_total_time,___awmod@dividend
  8758  000070  C0FB  F081         	movff	_total_time+1,___awmod@dividend+1
  8759  000074  EC17  F026         	call	___awmod	;wreg free
  8760  000078  C080  F0C6         	movff	?___awmod,_UI$2429
  8761  00007C  C081  F0C7         	movff	?___awmod+1,_UI$2429+1
  8762                           
  8763                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  8764  000080  0E4A               	movlw	low STR_2
  8765  000082  0100               	movlb	0	; () banked
  8766  000084  6F8E               	movwf	printf@f& (0+255),b
  8767  000086  0EFF               	movlw	high STR_2
  8768  000088  0100               	movlb	0	; () banked
  8769  00008A  6F8F               	movwf	(printf@f+1)& (0+255),b
  8770  00008C  0E0E               	movlw	14
  8771  00008E  0100               	movlb	0	; () banked
  8772  000090  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8773  000092  0E10               	movlw	16
  8774  000094  6F82               	movwf	___awmod@divisor& (0+255),b
  8775  000096  C0FA  F080         	movff	_total_time,___awmod@dividend
  8776  00009A  C0FB  F081         	movff	_total_time+1,___awmod@dividend+1
  8777  00009E  EC17  F026         	call	___awmod	;wreg free
  8778  0000A2  C080  F086         	movff	?___awmod,___awdiv@dividend
  8779  0000A6  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  8780  0000AA  0E00               	movlw	0
  8781  0000AC  0100               	movlb	0	; () banked
  8782  0000AE  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  8783  0000B0  0E3C               	movlw	60
  8784  0000B2  6F88               	movwf	___awdiv@divisor& (0+255),b
  8785  0000B4  EC05  F025         	call	___awdiv	;wreg free
  8786  0000B8  C086  F090         	movff	?___awdiv,?_printf+2
  8787  0000BC  C087  F091         	movff	?___awdiv+1,?_printf+3
  8788  0000C0  C0C6  F080         	movff	_UI$2429,___awmod@dividend
  8789  0000C4  C0C7  F081         	movff	_UI$2429+1,___awmod@dividend+1
  8790  0000C8  0E00               	movlw	0
  8791  0000CA  0100               	movlb	0	; () banked
  8792  0000CC  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8793  0000CE  0E3C               	movlw	60
  8794  0000D0  6F82               	movwf	___awmod@divisor& (0+255),b
  8795  0000D2  EC17  F026         	call	___awmod	;wreg free
  8796  0000D6  C080  F092         	movff	?___awmod,?_printf+4
  8797  0000DA  C081  F093         	movff	?___awmod+1,?_printf+5
  8798  0000DE  EC16  F00E         	call	_printf	;wreg free
  8799  0000E2                     l185:
  8800  0000E2  B281               	btfsc	3969,1,c	;volatile
  8801  0000E4  D7FE               	goto	l185
  8802  0000E6                     l188:
  8803  0000E6  A281               	btfss	3969,1,c	;volatile
  8804  0000E8  D7FE               	goto	l188
  8805                           
  8806                           ;UI.c: 86: }
  8807                           ;UI.c: 87: if(cur_state == 12){
  8808  0000EA  0E0C               	movlw	12
  8809  0000EC  0100               	movlb	0	; () banked
  8810  0000EE  19E6               	xorwf	_cur_state& (0+255),w,b
  8811  0000F0  0100               	movlb	0	; () banked
  8812  0000F2  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
  8813  0000F4  A4D8               	btfss	status,2,c
  8814  0000F6  D003               	goto	l9274
  8815                           
  8816                           ; BSR set to: 0
  8817                           ;UI.c: 88: change_state_to_menu_12();
  8818  0000F8  EC43  F02B         	call	_change_state_to_menu_12	;wreg free
  8819                           
  8820                           ;UI.c: 89: }
  8821  0000FC  D002               	goto	l193
  8822  0000FE                     l9274:
  8823                           
  8824                           ;UI.c: 90: else{
  8825                           ;UI.c: 91: change_state_to_menu_22();
  8826  0000FE  EC27  F02B         	call	_change_state_to_menu_22	;wreg free
  8827  000102                     l193:
  8828  000102  B281               	btfsc	3969,1,c	;volatile
  8829  000104  D7FE               	goto	l193
  8830                           
  8831                           ;UI.c: 94: _delay((unsigned long)((100)*(32000000/4000.0)));
  8832  000106  0E05               	movlw	5
  8833  000108  0100               	movlb	0	; () banked
  8834  00010A  6FC5               	movwf	(??_UI+1)& (0+255),b
  8835  00010C  0E0F               	movlw	15
  8836  00010E  0100               	movlb	0	; () banked
  8837  000110  6FC4               	movwf	??_UI& (0+255),b
  8838  000112  0EF1               	movlw	241
  8839  000114                     u10247:
  8840  000114  2EE8               	decfsz	wreg,f,c
  8841  000116  D7FE               	bra	u10247
  8842  000118  2FC4               	decfsz	??_UI& (0+255),f,b
  8843  00011A  D7FC               	bra	u10247
  8844  00011C  2FC5               	decfsz	(??_UI+1)& (0+255),f,b
  8845  00011E  D7FA               	bra	u10247
  8846                           
  8847                           ;UI.c: 95: machine_state = UI_state;
  8848  000120  0E00               	movlw	0
  8849  000122  0100               	movlb	0	; () banked
  8850  000124  6FFC               	movwf	_machine_state& (0+255),b
  8851                           
  8852                           ;UI.c: 96: }
  8853  000126  D3D2               	goto	l9600
  8854  000128                     l9280:
  8855                           
  8856                           ; BSR set to: 0
  8857                           ;UI.c: 97: else if(cur_state == 0){
  8858  000128  0100               	movlb	0	; () banked
  8859  00012A  51E6               	movf	_cur_state& (0+255),w,b
  8860  00012C  0100               	movlb	0	; () banked
  8861  00012E  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
  8862  000130  A4D8               	btfss	status,2,c
  8863  000132  D3CC               	goto	l9600
  8864                           
  8865                           ; BSR set to: 0
  8866                           ;UI.c: 98: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
  8867  000134  0E00               	movlw	0
  8868  000136  0100               	movlb	0	; () banked
  8869  000138  6FC8               	movwf	UI@i& (0+255),b
  8870  00013A                     l9284:
  8871                           
  8872                           ; BSR set to: 0
  8873  00013A  0E63               	movlw	99
  8874  00013C  0100               	movlb	0	; () banked
  8875  00013E  65C8               	cpfsgt	UI@i& (0+255),b
  8876  000140  D001               	goto	l9288
  8877  000142  D00C               	goto	l9292
  8878  000144                     l9288:
  8879                           
  8880                           ; BSR set to: 0
  8881  000144  0E68               	movlw	104
  8882  000146  0100               	movlb	0	; () banked
  8883  000148  6FC4               	movwf	??_UI& (0+255),b
  8884  00014A  0EE4               	movlw	228
  8885  00014C                     u10257:
  8886  00014C  2EE8               	decfsz	wreg,f,c
  8887  00014E  D7FE               	bra	u10257
  8888  000150  2FC4               	decfsz	??_UI& (0+255),f,b
  8889  000152  D7FC               	bra	u10257
  8890  000154  F000               	nop	
  8891  000156  0100               	movlb	0	; () banked
  8892  000158  2BC8               	incf	UI@i& (0+255),f,b
  8893  00015A  D7EF               	goto	l9284
  8894  00015C                     l9292:
  8895                           
  8896                           ; BSR set to: 0
  8897                           ;UI.c: 99: if(cur_state == 0){
  8898  00015C  0100               	movlb	0	; () banked
  8899  00015E  51E6               	movf	_cur_state& (0+255),w,b
  8900  000160  0100               	movlb	0	; () banked
  8901  000162  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
  8902  000164  A4D8               	btfss	status,2,c
  8903  000166  D3B2               	goto	l9600
  8904                           
  8905                           ; BSR set to: 0
  8906                           ;UI.c: 100: printRTC();
  8907  000168  ECEA  F016         	call	_printRTC	;wreg free
  8908                           
  8909                           ;UI.c: 101: }
  8910                           ;UI.c: 102: }
  8911                           ;UI.c: 103: while(logstate){
  8912  00016C  D3AF               	goto	l9600
  8913  00016E                     l9296:
  8914                           
  8915                           ;UI.c: 105: if(!log_completion){
  8916  00016E  0100               	movlb	0	; () banked
  8917  000170  51F0               	movf	_log_completion& (0+255),w,b
  8918  000172  0100               	movlb	0	; () banked
  8919  000174  11F1               	iorwf	(_log_completion+1)& (0+255),w,b
  8920  000176  A4D8               	btfss	status,2,c
  8921  000178  D041               	goto	l9326
  8922                           
  8923                           ; BSR set to: 0
  8924                           ;UI.c: 106: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8925  00017A  0E01               	movlw	1
  8926  00017C  EC10  F02E         	call	_lcdInst
  8927  000180  0E68               	movlw	104
  8928  000182  0100               	movlb	0	; () banked
  8929  000184  6FC4               	movwf	??_UI& (0+255),b
  8930  000186  0EE4               	movlw	228
  8931  000188                     u10267:
  8932  000188  2EE8               	decfsz	wreg,f,c
  8933  00018A  D7FE               	bra	u10267
  8934  00018C  2FC4               	decfsz	??_UI& (0+255),f,b
  8935  00018E  D7FC               	bra	u10267
  8936  000190  F000               	nop	
  8937                           
  8938                           ;UI.c: 107: lcdInst(0b10000000);;
  8939  000192  0E80               	movlw	128
  8940  000194  EC10  F02E         	call	_lcdInst
  8941                           
  8942                           ;UI.c: 108: printf("-- LOG %2d HERE--", log);
  8943  000198  0E3F               	movlw	low STR_3
  8944  00019A  0100               	movlb	0	; () banked
  8945  00019C  6F8E               	movwf	printf@f& (0+255),b
  8946  00019E  0EFB               	movlw	high STR_3
  8947  0001A0  0100               	movlb	0	; () banked
  8948  0001A2  6F8F               	movwf	(printf@f+1)& (0+255),b
  8949  0001A4  C0EE  F090         	movff	_log,?_printf+2
  8950  0001A8  C0EF  F091         	movff	_log+1,?_printf+3
  8951  0001AC  EC16  F00E         	call	_printf	;wreg free
  8952                           
  8953                           ;UI.c: 109: lcdInst(0b11000000);;
  8954  0001B0  0EC0               	movlw	192
  8955  0001B2  EC10  F02E         	call	_lcdInst
  8956                           
  8957                           ;UI.c: 110: printf("DIDN'T COMPLETE");
  8958  0001B6  0E5E               	movlw	low STR_4
  8959  0001B8  0100               	movlb	0	; () banked
  8960  0001BA  6F8E               	movwf	printf@f& (0+255),b
  8961  0001BC  0EFE               	movlw	high STR_4
  8962  0001BE  0100               	movlb	0	; () banked
  8963  0001C0  6F8F               	movwf	(printf@f+1)& (0+255),b
  8964  0001C2  EC16  F00E         	call	_printf	;wreg free
  8965  0001C6                     l9310:
  8966  0001C6  0E00               	movlw	0
  8967  0001C8  0100               	movlb	0	; () banked
  8968  0001CA  6FC9               	movwf	UI@i_412& (0+255),b
  8969  0001CC                     l9312:
  8970                           
  8971                           ; BSR set to: 0
  8972  0001CC  0E63               	movlw	99
  8973  0001CE  0100               	movlb	0	; () banked
  8974  0001D0  65C9               	cpfsgt	UI@i_412& (0+255),b
  8975  0001D2  D001               	goto	l9316
  8976  0001D4  D00C               	goto	l9320
  8977  0001D6                     l9316:
  8978                           
  8979                           ; BSR set to: 0
  8980  0001D6  0E68               	movlw	104
  8981  0001D8  0100               	movlb	0	; () banked
  8982  0001DA  6FC4               	movwf	??_UI& (0+255),b
  8983  0001DC  0EE4               	movlw	228
  8984  0001DE                     u10277:
  8985  0001DE  2EE8               	decfsz	wreg,f,c
  8986  0001E0  D7FE               	bra	u10277
  8987  0001E2  2FC4               	decfsz	??_UI& (0+255),f,b
  8988  0001E4  D7FC               	bra	u10277
  8989  0001E6  F000               	nop	
  8990  0001E8  0100               	movlb	0	; () banked
  8991  0001EA  2BC9               	incf	UI@i_412& (0+255),f,b
  8992  0001EC  D7EF               	goto	l9312
  8993  0001EE                     l9320:
  8994                           
  8995                           ; BSR set to: 0
  8996  0001EE  0100               	movlb	0	; () banked
  8997  0001F0  51F8               	movf	_logstate& (0+255),w,b
  8998  0001F2  0100               	movlb	0	; () banked
  8999  0001F4  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9000  0001F6  B4D8               	btfsc	status,2,c
  9001  0001F8  0012               	return	
  9002  0001FA  D7E5               	goto	l9310
  9003  0001FC                     l9326:
  9004                           
  9005                           ; BSR set to: 0
  9006                           ;UI.c: 114: else{
  9007                           ;UI.c: 115: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  9008  0001FC  0E01               	movlw	1
  9009  0001FE  EC10  F02E         	call	_lcdInst
  9010  000202  0E68               	movlw	104
  9011  000204  0100               	movlb	0	; () banked
  9012  000206  6FC4               	movwf	??_UI& (0+255),b
  9013  000208  0EE4               	movlw	228
  9014  00020A                     u10287:
  9015  00020A  2EE8               	decfsz	wreg,f,c
  9016  00020C  D7FE               	bra	u10287
  9017  00020E  2FC4               	decfsz	??_UI& (0+255),f,b
  9018  000210  D7FC               	bra	u10287
  9019  000212  F000               	nop	
  9020                           
  9021                           ;UI.c: 116: lcdInst(0b10000000);;
  9022  000214  0E80               	movlw	128
  9023  000216  EC10  F02E         	call	_lcdInst
  9024                           
  9025                           ;UI.c: 117: printf("-- LOG %2d HERE--", log);
  9026  00021A  0E3F               	movlw	low STR_3
  9027  00021C  0100               	movlb	0	; () banked
  9028  00021E  6F8E               	movwf	printf@f& (0+255),b
  9029  000220  0EFB               	movlw	high STR_3
  9030  000222  0100               	movlb	0	; () banked
  9031  000224  6F8F               	movwf	(printf@f+1)& (0+255),b
  9032  000226  C0EE  F090         	movff	_log,?_printf+2
  9033  00022A  C0EF  F091         	movff	_log+1,?_printf+3
  9034  00022E  EC16  F00E         	call	_printf	;wreg free
  9035                           
  9036                           ;UI.c: 118: lcdInst(0b11000000);;
  9037  000232  0EC0               	movlw	192
  9038  000234  EC10  F02E         	call	_lcdInst
  9039                           
  9040                           ;UI.c: 119: printf("PAUSE < | BACK >");
  9041  000238  0EFA               	movlw	low STR_6
  9042  00023A  0100               	movlb	0	; () banked
  9043  00023C  6F8E               	movwf	printf@f& (0+255),b
  9044  00023E  0EFD               	movlw	high STR_6
  9045  000240  0100               	movlb	0	; () banked
  9046  000242  6F8F               	movwf	(printf@f+1)& (0+255),b
  9047  000244  EC16  F00E         	call	_printf	;wreg free
  9048                           
  9049                           ;UI.c: 121: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9050  000248  0E00               	movlw	0
  9051  00024A  0100               	movlb	0	; () banked
  9052  00024C  6FCA               	movwf	UI@i_415& (0+255),b
  9053  00024E                     l9340:
  9054                           
  9055                           ; BSR set to: 0
  9056  00024E  0E63               	movlw	99
  9057  000250  0100               	movlb	0	; () banked
  9058  000252  65CA               	cpfsgt	UI@i_415& (0+255),b
  9059  000254  D001               	goto	l9344
  9060  000256  D00C               	goto	l9348
  9061  000258                     l9344:
  9062                           
  9063                           ; BSR set to: 0
  9064  000258  0E68               	movlw	104
  9065  00025A  0100               	movlb	0	; () banked
  9066  00025C  6FC4               	movwf	??_UI& (0+255),b
  9067  00025E  0EE4               	movlw	228
  9068  000260                     u10297:
  9069  000260  2EE8               	decfsz	wreg,f,c
  9070  000262  D7FE               	bra	u10297
  9071  000264  2FC4               	decfsz	??_UI& (0+255),f,b
  9072  000266  D7FC               	bra	u10297
  9073  000268  F000               	nop	
  9074  00026A  0100               	movlb	0	; () banked
  9075  00026C  2BCA               	incf	UI@i_415& (0+255),f,b
  9076  00026E  D7EF               	goto	l9340
  9077  000270                     l9348:
  9078                           
  9079                           ; BSR set to: 0
  9080  000270  0100               	movlb	0	; () banked
  9081  000272  51F8               	movf	_logstate& (0+255),w,b
  9082  000274  0100               	movlb	0	; () banked
  9083  000276  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9084  000278  B4D8               	btfsc	status,2,c
  9085  00027A  0012               	return	
  9086                           
  9087                           ; BSR set to: 0
  9088                           ;UI.c: 122: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9089                           
  9090                           ; BSR set to: 0
  9091                           
  9092                           ; BSR set to: 0
  9093  00027C  0E00               	movlw	0
  9094  00027E  0100               	movlb	0	; () banked
  9095  000280  6FCB               	movwf	UI@i_416& (0+255),b
  9096  000282                     l9354:
  9097                           
  9098                           ; BSR set to: 0
  9099  000282  0E63               	movlw	99
  9100  000284  0100               	movlb	0	; () banked
  9101  000286  65CB               	cpfsgt	UI@i_416& (0+255),b
  9102  000288  D001               	goto	l9358
  9103  00028A  D00C               	goto	l9362
  9104  00028C                     l9358:
  9105                           
  9106                           ; BSR set to: 0
  9107  00028C  0E68               	movlw	104
  9108  00028E  0100               	movlb	0	; () banked
  9109  000290  6FC4               	movwf	??_UI& (0+255),b
  9110  000292  0EE4               	movlw	228
  9111  000294                     u10307:
  9112  000294  2EE8               	decfsz	wreg,f,c
  9113  000296  D7FE               	bra	u10307
  9114  000298  2FC4               	decfsz	??_UI& (0+255),f,b
  9115  00029A  D7FC               	bra	u10307
  9116  00029C  F000               	nop	
  9117  00029E  0100               	movlb	0	; () banked
  9118  0002A0  2BCB               	incf	UI@i_416& (0+255),f,b
  9119  0002A2  D7EF               	goto	l9354
  9120  0002A4                     l9362:
  9121                           
  9122                           ; BSR set to: 0
  9123  0002A4  0100               	movlb	0	; () banked
  9124  0002A6  51F8               	movf	_logstate& (0+255),w,b
  9125  0002A8  0100               	movlb	0	; () banked
  9126  0002AA  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9127  0002AC  B4D8               	btfsc	status,2,c
  9128  0002AE  0012               	return	
  9129                           
  9130                           ; BSR set to: 0
  9131                           ;UI.c: 124: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  9132                           
  9133                           ; BSR set to: 0
  9134                           
  9135                           ; BSR set to: 0
  9136  0002B0  0E01               	movlw	1
  9137  0002B2  EC10  F02E         	call	_lcdInst
  9138  0002B6  0E68               	movlw	104
  9139  0002B8  0100               	movlb	0	; () banked
  9140  0002BA  6FC4               	movwf	??_UI& (0+255),b
  9141  0002BC  0EE4               	movlw	228
  9142  0002BE                     u10317:
  9143  0002BE  2EE8               	decfsz	wreg,f,c
  9144  0002C0  D7FE               	bra	u10317
  9145  0002C2  2FC4               	decfsz	??_UI& (0+255),f,b
  9146  0002C4  D7FC               	bra	u10317
  9147  0002C6  F000               	nop	
  9148                           
  9149                           ;UI.c: 125: lcdInst(0b10000000);;
  9150  0002C8  0E80               	movlw	128
  9151  0002CA  EC10  F02E         	call	_lcdInst
  9152                           
  9153                           ;UI.c: 126: printf("START:");
  9154  0002CE  0EC4               	movlw	low STR_7
  9155  0002D0  0100               	movlb	0	; () banked
  9156  0002D2  6F8E               	movwf	printf@f& (0+255),b
  9157  0002D4  0EFF               	movlw	high STR_7
  9158  0002D6  0100               	movlb	0	; () banked
  9159  0002D8  6F8F               	movwf	(printf@f+1)& (0+255),b
  9160  0002DA  EC16  F00E         	call	_printf	;wreg free
  9161                           
  9162                           ;UI.c: 127: lcdInst(0b11000000);;
  9163  0002DE  0EC0               	movlw	192
  9164  0002E0  EC10  F02E         	call	_lcdInst
  9165                           
  9166                           ;UI.c: 128: char month[] = "MMM";
  9167  0002E4  C149  F0D6         	movff	UI@F3246,UI@month
  9168  0002E8  C14A  F0D7         	movff	UI@F3246+1,UI@month+1
  9169  0002EC  C14B  F0D8         	movff	UI@F3246+2,UI@month+2
  9170  0002F0  C14C  F0D9         	movff	UI@F3246+3,UI@month+3
  9171                           
  9172                           ;UI.c: 129: switch(log_startTime[5]){
  9173  0002F4  D0C3               	goto	l9406
  9174  0002F6                     l9378:
  9175                           
  9176                           ;UI.c: 131: strcpy(month, "JAN");
  9177  0002F6  0ED6               	movlw	low UI@month
  9178  0002F8  0100               	movlb	0	; () banked
  9179  0002FA  6F80               	movwf	strcpy@to& (0+255),b
  9180  0002FC  0E00               	movlw	high UI@month
  9181  0002FE  0100               	movlb	0	; () banked
  9182  000300  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9183  000302  0EDB               	movlw	low STR_8
  9184  000304  0100               	movlb	0	; () banked
  9185  000306  6F82               	movwf	strcpy@from& (0+255),b
  9186  000308  0EFF               	movlw	high STR_8
  9187  00030A  0100               	movlb	0	; () banked
  9188  00030C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9189  00030E  EC5F  F02B         	call	_strcpy	;wreg free
  9190                           
  9191                           ;UI.c: 132: break;
  9192  000312  D0E6               	goto	l9408
  9193  000314                     l9380:
  9194                           
  9195                           ;UI.c: 134: strcpy(month, "FEB");
  9196  000314  0ED6               	movlw	low UI@month
  9197  000316  0100               	movlb	0	; () banked
  9198  000318  6F80               	movwf	strcpy@to& (0+255),b
  9199  00031A  0E00               	movlw	high UI@month
  9200  00031C  0100               	movlb	0	; () banked
  9201  00031E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9202  000320  0ECB               	movlw	low STR_9
  9203  000322  0100               	movlb	0	; () banked
  9204  000324  6F82               	movwf	strcpy@from& (0+255),b
  9205  000326  0EFF               	movlw	high STR_9
  9206  000328  0100               	movlb	0	; () banked
  9207  00032A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9208  00032C  EC5F  F02B         	call	_strcpy	;wreg free
  9209                           
  9210                           ;UI.c: 135: break;
  9211  000330  D0D7               	goto	l9408
  9212  000332                     l9382:
  9213                           
  9214                           ;UI.c: 137: strcpy(month, "MAR");
  9215  000332  0ED6               	movlw	low UI@month
  9216  000334  0100               	movlb	0	; () banked
  9217  000336  6F80               	movwf	strcpy@to& (0+255),b
  9218  000338  0E00               	movlw	high UI@month
  9219  00033A  0100               	movlb	0	; () banked
  9220  00033C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9221  00033E  0EE7               	movlw	low STR_10
  9222  000340  0100               	movlb	0	; () banked
  9223  000342  6F82               	movwf	strcpy@from& (0+255),b
  9224  000344  0EFF               	movlw	high STR_10
  9225  000346  0100               	movlb	0	; () banked
  9226  000348  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9227  00034A  EC5F  F02B         	call	_strcpy	;wreg free
  9228                           
  9229                           ;UI.c: 138: break;
  9230  00034E  D0C8               	goto	l9408
  9231  000350                     l9384:
  9232                           
  9233                           ;UI.c: 140: strcpy(month, "APR");
  9234  000350  0ED6               	movlw	low UI@month
  9235  000352  0100               	movlb	0	; () banked
  9236  000354  6F80               	movwf	strcpy@to& (0+255),b
  9237  000356  0E00               	movlw	high UI@month
  9238  000358  0100               	movlb	0	; () banked
  9239  00035A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9240  00035C  0EEB               	movlw	low STR_11
  9241  00035E  0100               	movlb	0	; () banked
  9242  000360  6F82               	movwf	strcpy@from& (0+255),b
  9243  000362  0EFF               	movlw	high STR_11
  9244  000364  0100               	movlb	0	; () banked
  9245  000366  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9246  000368  EC5F  F02B         	call	_strcpy	;wreg free
  9247                           
  9248                           ;UI.c: 141: break;
  9249  00036C  D0B9               	goto	l9408
  9250  00036E                     l9386:
  9251                           
  9252                           ;UI.c: 143: strcpy(month, "MAY");
  9253  00036E  0ED6               	movlw	low UI@month
  9254  000370  0100               	movlb	0	; () banked
  9255  000372  6F80               	movwf	strcpy@to& (0+255),b
  9256  000374  0E00               	movlw	high UI@month
  9257  000376  0100               	movlb	0	; () banked
  9258  000378  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9259  00037A  0EFB               	movlw	low STR_12
  9260  00037C  0100               	movlb	0	; () banked
  9261  00037E  6F82               	movwf	strcpy@from& (0+255),b
  9262  000380  0EFF               	movlw	high STR_12
  9263  000382  0100               	movlb	0	; () banked
  9264  000384  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9265  000386  EC5F  F02B         	call	_strcpy	;wreg free
  9266                           
  9267                           ;UI.c: 144: break;
  9268  00038A  D0AA               	goto	l9408
  9269  00038C                     l9388:
  9270                           
  9271                           ;UI.c: 146: strcpy(month, "JUN");
  9272  00038C  0ED6               	movlw	low UI@month
  9273  00038E  0100               	movlb	0	; () banked
  9274  000390  6F80               	movwf	strcpy@to& (0+255),b
  9275  000392  0E00               	movlw	high UI@month
  9276  000394  0100               	movlb	0	; () banked
  9277  000396  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9278  000398  0EDF               	movlw	low STR_13
  9279  00039A  0100               	movlb	0	; () banked
  9280  00039C  6F82               	movwf	strcpy@from& (0+255),b
  9281  00039E  0EFF               	movlw	high STR_13
  9282  0003A0  0100               	movlb	0	; () banked
  9283  0003A2  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9284  0003A4  EC5F  F02B         	call	_strcpy	;wreg free
  9285                           
  9286                           ;UI.c: 147: break;
  9287  0003A8  D09B               	goto	l9408
  9288  0003AA                     l9390:
  9289                           
  9290                           ;UI.c: 149: strcpy(month, "JUL");
  9291  0003AA  0ED6               	movlw	low UI@month
  9292  0003AC  0100               	movlb	0	; () banked
  9293  0003AE  6F80               	movwf	strcpy@to& (0+255),b
  9294  0003B0  0E00               	movlw	high UI@month
  9295  0003B2  0100               	movlb	0	; () banked
  9296  0003B4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9297  0003B6  0ED7               	movlw	low STR_14
  9298  0003B8  0100               	movlb	0	; () banked
  9299  0003BA  6F82               	movwf	strcpy@from& (0+255),b
  9300  0003BC  0EFF               	movlw	high STR_14
  9301  0003BE  0100               	movlb	0	; () banked
  9302  0003C0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9303  0003C2  EC5F  F02B         	call	_strcpy	;wreg free
  9304                           
  9305                           ;UI.c: 150: break;
  9306  0003C6  D08C               	goto	l9408
  9307  0003C8                     l9392:
  9308                           
  9309                           ;UI.c: 152: strcpy(month, "AUG");
  9310  0003C8  0ED6               	movlw	low UI@month
  9311  0003CA  0100               	movlb	0	; () banked
  9312  0003CC  6F80               	movwf	strcpy@to& (0+255),b
  9313  0003CE  0E00               	movlw	high UI@month
  9314  0003D0  0100               	movlb	0	; () banked
  9315  0003D2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9316  0003D4  0ED3               	movlw	low STR_15
  9317  0003D6  0100               	movlb	0	; () banked
  9318  0003D8  6F82               	movwf	strcpy@from& (0+255),b
  9319  0003DA  0EFF               	movlw	high STR_15
  9320  0003DC  0100               	movlb	0	; () banked
  9321  0003DE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9322  0003E0  EC5F  F02B         	call	_strcpy	;wreg free
  9323                           
  9324                           ;UI.c: 153: break;
  9325  0003E4  D07D               	goto	l9408
  9326  0003E6                     l9394:
  9327                           
  9328                           ;UI.c: 155: strcpy(month, "SEP");
  9329  0003E6  0ED6               	movlw	low UI@month
  9330  0003E8  0100               	movlb	0	; () banked
  9331  0003EA  6F80               	movwf	strcpy@to& (0+255),b
  9332  0003EC  0E00               	movlw	high UI@month
  9333  0003EE  0100               	movlb	0	; () banked
  9334  0003F0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9335  0003F2  0EE3               	movlw	low STR_16
  9336  0003F4  0100               	movlb	0	; () banked
  9337  0003F6  6F82               	movwf	strcpy@from& (0+255),b
  9338  0003F8  0EFF               	movlw	high STR_16
  9339  0003FA  0100               	movlb	0	; () banked
  9340  0003FC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9341  0003FE  EC5F  F02B         	call	_strcpy	;wreg free
  9342                           
  9343                           ;UI.c: 156: break;
  9344  000402  D06E               	goto	l9408
  9345  000404                     l9396:
  9346                           
  9347                           ;UI.c: 158: strcpy(month, "OCT");
  9348  000404  0ED6               	movlw	low UI@month
  9349  000406  0100               	movlb	0	; () banked
  9350  000408  6F80               	movwf	strcpy@to& (0+255),b
  9351  00040A  0E00               	movlw	high UI@month
  9352  00040C  0100               	movlb	0	; () banked
  9353  00040E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9354  000410  0EF3               	movlw	low STR_17
  9355  000412  0100               	movlb	0	; () banked
  9356  000414  6F82               	movwf	strcpy@from& (0+255),b
  9357  000416  0EFF               	movlw	high STR_17
  9358  000418  0100               	movlb	0	; () banked
  9359  00041A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9360  00041C  EC5F  F02B         	call	_strcpy	;wreg free
  9361                           
  9362                           ;UI.c: 159: break;
  9363  000420  D05F               	goto	l9408
  9364  000422                     l9398:
  9365                           
  9366                           ;UI.c: 161: strcpy(month, "NOV");
  9367  000422  0ED6               	movlw	low UI@month
  9368  000424  0100               	movlb	0	; () banked
  9369  000426  6F80               	movwf	strcpy@to& (0+255),b
  9370  000428  0E00               	movlw	high UI@month
  9371  00042A  0100               	movlb	0	; () banked
  9372  00042C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9373  00042E  0EF7               	movlw	low STR_18
  9374  000430  0100               	movlb	0	; () banked
  9375  000432  6F82               	movwf	strcpy@from& (0+255),b
  9376  000434  0EFF               	movlw	high STR_18
  9377  000436  0100               	movlb	0	; () banked
  9378  000438  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9379  00043A  EC5F  F02B         	call	_strcpy	;wreg free
  9380                           
  9381                           ;UI.c: 162: break;
  9382  00043E  D050               	goto	l9408
  9383  000440                     l9400:
  9384                           
  9385                           ;UI.c: 164: strcpy(month, "DEC");
  9386  000440  0ED6               	movlw	low UI@month
  9387  000442  0100               	movlb	0	; () banked
  9388  000444  6F80               	movwf	strcpy@to& (0+255),b
  9389  000446  0E00               	movlw	high UI@month
  9390  000448  0100               	movlb	0	; () banked
  9391  00044A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9392  00044C  0ECF               	movlw	low STR_19
  9393  00044E  0100               	movlb	0	; () banked
  9394  000450  6F82               	movwf	strcpy@from& (0+255),b
  9395  000452  0EFF               	movlw	high STR_19
  9396  000454  0100               	movlb	0	; () banked
  9397  000456  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9398  000458  EC5F  F02B         	call	_strcpy	;wreg free
  9399                           
  9400                           ;UI.c: 165: break;
  9401  00045C  D041               	goto	l9408
  9402  00045E                     l9402:
  9403                           
  9404                           ;UI.c: 167: strcpy(month, "ERR");
  9405  00045E  0ED6               	movlw	low UI@month
  9406  000460  0100               	movlb	0	; () banked
  9407  000462  6F80               	movwf	strcpy@to& (0+255),b
  9408  000464  0E00               	movlw	high UI@month
  9409  000466  0100               	movlb	0	; () banked
  9410  000468  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9411  00046A  0EEF               	movlw	low STR_20
  9412  00046C  0100               	movlb	0	; () banked
  9413  00046E  6F82               	movwf	strcpy@from& (0+255),b
  9414  000470  0EFF               	movlw	high STR_20
  9415  000472  0100               	movlb	0	; () banked
  9416  000474  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9417  000476  EC5F  F02B         	call	_strcpy	;wreg free
  9418                           
  9419                           ;UI.c: 169: }
  9420                           
  9421                           ;UI.c: 168: break;
  9422  00047A  D032               	goto	l9408
  9423  00047C                     l9406:
  9424  00047C  EE21  F00A         	lfsr	2,_log_startTime+10
  9425  000480  CFDE F0C4          	movff	postinc2,??_UI
  9426  000484  CFDD F0C5          	movff	postdec2,??_UI+1
  9427                           
  9428                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9429                           ; Switch size 1, requested type "space"
  9430                           ; Number of cases is 1, Range of values is 0 to 0
  9431                           ; switch strategies available:
  9432                           ; Name         Instructions Cycles
  9433                           ; simple_byte            4     3 (average)
  9434                           ;	Chosen strategy is simple_byte
  9435  000488  0100               	movlb	0	; () banked
  9436  00048A  51C5               	movf	(??_UI+1)& (0+255),w,b
  9437  00048C  0A00               	xorlw	0	; case 0
  9438  00048E  A4D8               	btfss	status,2,c
  9439  000490  D7E6               	goto	l9402
  9440                           
  9441                           ; BSR set to: 0
  9442                           ; Switch size 1, requested type "space"
  9443                           ; Number of cases is 12, Range of values is 1 to 12
  9444                           ; switch strategies available:
  9445                           ; Name         Instructions Cycles
  9446                           ; simple_byte           37    19 (average)
  9447                           ;	Chosen strategy is simple_byte
  9448  000492  0100               	movlb	0	; () banked
  9449  000494  51C4               	movf	??_UI& (0+255),w,b
  9450  000496  0A01               	xorlw	1	; case 1
  9451  000498  B4D8               	btfsc	status,2,c
  9452  00049A  D72D               	goto	l9378
  9453  00049C  0A03               	xorlw	3	; case 2
  9454  00049E  B4D8               	btfsc	status,2,c
  9455  0004A0  D739               	goto	l9380
  9456  0004A2  0A01               	xorlw	1	; case 3
  9457  0004A4  B4D8               	btfsc	status,2,c
  9458  0004A6  D745               	goto	l9382
  9459  0004A8  0A07               	xorlw	7	; case 4
  9460  0004AA  B4D8               	btfsc	status,2,c
  9461  0004AC  D751               	goto	l9384
  9462  0004AE  0A01               	xorlw	1	; case 5
  9463  0004B0  B4D8               	btfsc	status,2,c
  9464  0004B2  D75D               	goto	l9386
  9465  0004B4  0A03               	xorlw	3	; case 6
  9466  0004B6  B4D8               	btfsc	status,2,c
  9467  0004B8  D769               	goto	l9388
  9468  0004BA  0A01               	xorlw	1	; case 7
  9469  0004BC  B4D8               	btfsc	status,2,c
  9470  0004BE  D775               	goto	l9390
  9471  0004C0  0A0F               	xorlw	15	; case 8
  9472  0004C2  B4D8               	btfsc	status,2,c
  9473  0004C4  D781               	goto	l9392
  9474  0004C6  0A01               	xorlw	1	; case 9
  9475  0004C8  B4D8               	btfsc	status,2,c
  9476  0004CA  D78D               	goto	l9394
  9477  0004CC  0A03               	xorlw	3	; case 10
  9478  0004CE  B4D8               	btfsc	status,2,c
  9479  0004D0  D799               	goto	l9396
  9480  0004D2  0A01               	xorlw	1	; case 11
  9481  0004D4  B4D8               	btfsc	status,2,c
  9482  0004D6  D7A5               	goto	l9398
  9483  0004D8  0A07               	xorlw	7	; case 12
  9484  0004DA  B4D8               	btfsc	status,2,c
  9485  0004DC  D7B1               	goto	l9400
  9486  0004DE  D7BF               	goto	l9402
  9487  0004E0                     l9408:
  9488                           
  9489                           ;UI.c: 170: printf("%02d%s | %02d:%02d:%02d", log_startTime[4],month,log_startTime[2],lo
      +                          g_startTime[1],log_startTime[0]);
  9490  0004E0  0EA2               	movlw	low STR_21
  9491  0004E2  0100               	movlb	0	; () banked
  9492  0004E4  6F8E               	movwf	printf@f& (0+255),b
  9493  0004E6  0EFA               	movlw	high STR_21
  9494  0004E8  0100               	movlb	0	; () banked
  9495  0004EA  6F8F               	movwf	(printf@f+1)& (0+255),b
  9496  0004EC  C108  F090         	movff	_log_startTime+8,?_printf+2
  9497  0004F0  C109  F091         	movff	_log_startTime+9,?_printf+3
  9498  0004F4  0ED6               	movlw	low UI@month
  9499  0004F6  0100               	movlb	0	; () banked
  9500  0004F8  6F92               	movwf	(?_printf+4)& (0+255),b
  9501  0004FA  0E00               	movlw	high UI@month
  9502  0004FC  0100               	movlb	0	; () banked
  9503  0004FE  6F93               	movwf	(?_printf+5)& (0+255),b
  9504  000500  C104  F094         	movff	_log_startTime+4,?_printf+6
  9505  000504  C105  F095         	movff	_log_startTime+5,?_printf+7
  9506  000508  C102  F096         	movff	_log_startTime+2,?_printf+8
  9507  00050C  C103  F097         	movff	_log_startTime+3,?_printf+9
  9508  000510  C100  F098         	movff	_log_startTime,?_printf+10
  9509  000514  C101  F099         	movff	_log_startTime+1,?_printf+11
  9510  000518  EC16  F00E         	call	_printf	;wreg free
  9511                           
  9512                           ;UI.c: 172: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9513  00051C  0E00               	movlw	0
  9514  00051E  0100               	movlb	0	; () banked
  9515  000520  6FCC               	movwf	UI@i_434& (0+255),b
  9516  000522                     l9412:
  9517                           
  9518                           ; BSR set to: 0
  9519  000522  0E63               	movlw	99
  9520  000524  0100               	movlb	0	; () banked
  9521  000526  65CC               	cpfsgt	UI@i_434& (0+255),b
  9522  000528  D001               	goto	l9416
  9523  00052A  D00C               	goto	l9420
  9524  00052C                     l9416:
  9525                           
  9526                           ; BSR set to: 0
  9527  00052C  0E68               	movlw	104
  9528  00052E  0100               	movlb	0	; () banked
  9529  000530  6FC4               	movwf	??_UI& (0+255),b
  9530  000532  0EE4               	movlw	228
  9531  000534                     u10327:
  9532  000534  2EE8               	decfsz	wreg,f,c
  9533  000536  D7FE               	bra	u10327
  9534  000538  2FC4               	decfsz	??_UI& (0+255),f,b
  9535  00053A  D7FC               	bra	u10327
  9536  00053C  F000               	nop	
  9537  00053E  0100               	movlb	0	; () banked
  9538  000540  2BCC               	incf	UI@i_434& (0+255),f,b
  9539  000542  D7EF               	goto	l9412
  9540  000544                     l9420:
  9541                           
  9542                           ; BSR set to: 0
  9543  000544  0100               	movlb	0	; () banked
  9544  000546  51F8               	movf	_logstate& (0+255),w,b
  9545  000548  0100               	movlb	0	; () banked
  9546  00054A  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9547  00054C  B4D8               	btfsc	status,2,c
  9548  00054E  0012               	return	
  9549                           
  9550                           ; BSR set to: 0
  9551                           ;UI.c: 173: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9552                           
  9553                           ; BSR set to: 0
  9554                           
  9555                           ; BSR set to: 0
  9556  000550  0E00               	movlw	0
  9557  000552  0100               	movlb	0	; () banked
  9558  000554  6FCD               	movwf	UI@i_435& (0+255),b
  9559  000556                     l9426:
  9560                           
  9561                           ; BSR set to: 0
  9562  000556  0E63               	movlw	99
  9563  000558  0100               	movlb	0	; () banked
  9564  00055A  65CD               	cpfsgt	UI@i_435& (0+255),b
  9565  00055C  D001               	goto	l9430
  9566  00055E  D00C               	goto	l9434
  9567  000560                     l9430:
  9568                           
  9569                           ; BSR set to: 0
  9570  000560  0E68               	movlw	104
  9571  000562  0100               	movlb	0	; () banked
  9572  000564  6FC4               	movwf	??_UI& (0+255),b
  9573  000566  0EE4               	movlw	228
  9574  000568                     u10337:
  9575  000568  2EE8               	decfsz	wreg,f,c
  9576  00056A  D7FE               	bra	u10337
  9577  00056C  2FC4               	decfsz	??_UI& (0+255),f,b
  9578  00056E  D7FC               	bra	u10337
  9579  000570  F000               	nop	
  9580  000572  0100               	movlb	0	; () banked
  9581  000574  2BCD               	incf	UI@i_435& (0+255),f,b
  9582  000576  D7EF               	goto	l9426
  9583  000578                     l9434:
  9584                           
  9585                           ; BSR set to: 0
  9586  000578  0100               	movlb	0	; () banked
  9587  00057A  51F8               	movf	_logstate& (0+255),w,b
  9588  00057C  0100               	movlb	0	; () banked
  9589  00057E  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9590  000580  B4D8               	btfsc	status,2,c
  9591  000582  0012               	return	
  9592                           
  9593                           ; BSR set to: 0
  9594                           ;UI.c: 175: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  9595                           
  9596                           ; BSR set to: 0
  9597                           
  9598                           ; BSR set to: 0
  9599  000584  0E01               	movlw	1
  9600  000586  EC10  F02E         	call	_lcdInst
  9601  00058A  0E68               	movlw	104
  9602  00058C  0100               	movlb	0	; () banked
  9603  00058E  6FC4               	movwf	??_UI& (0+255),b
  9604  000590  0EE4               	movlw	228
  9605  000592                     u10347:
  9606  000592  2EE8               	decfsz	wreg,f,c
  9607  000594  D7FE               	bra	u10347
  9608  000596  2FC4               	decfsz	??_UI& (0+255),f,b
  9609  000598  D7FC               	bra	u10347
  9610  00059A  F000               	nop	
  9611                           
  9612                           ;UI.c: 176: lcdInst(0b10000000);;
  9613  00059C  0E80               	movlw	128
  9614  00059E  EC10  F02E         	call	_lcdInst
  9615                           
  9616                           ;UI.c: 177: printf("DURATION:");
  9617  0005A2  0E9B               	movlw	low STR_22
  9618  0005A4  0100               	movlb	0	; () banked
  9619  0005A6  6F8E               	movwf	printf@f& (0+255),b
  9620  0005A8  0EFF               	movlw	high STR_22
  9621  0005AA  0100               	movlb	0	; () banked
  9622  0005AC  6F8F               	movwf	(printf@f+1)& (0+255),b
  9623  0005AE  EC16  F00E         	call	_printf	;wreg free
  9624                           
  9625                           ;UI.c: 178: lcdInst(0b11000000);;
  9626  0005B2  0EC0               	movlw	192
  9627  0005B4  EC10  F02E         	call	_lcdInst
  9628                           
  9629                           ;UI.c: 179: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  9630  0005B8  0E0E               	movlw	14
  9631  0005BA  0100               	movlb	0	; () banked
  9632  0005BC  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  9633  0005BE  0E10               	movlw	16
  9634  0005C0  6F82               	movwf	___awmod@divisor& (0+255),b
  9635  0005C2  C0F6  F080         	movff	_log_total_time,___awmod@dividend
  9636  0005C6  C0F7  F081         	movff	_log_total_time+1,___awmod@dividend+1
  9637  0005CA  EC17  F026         	call	___awmod	;wreg free
  9638  0005CE  C080  F0C6         	movff	?___awmod,_UI$2429
  9639  0005D2  C081  F0C7         	movff	?___awmod+1,_UI$2429+1
  9640                           
  9641                           ;UI.c: 179: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  9642  0005D6  0E3C               	movlw	low STR_23
  9643  0005D8  0100               	movlb	0	; () banked
  9644  0005DA  6F8E               	movwf	printf@f& (0+255),b
  9645  0005DC  0EFF               	movlw	high STR_23
  9646  0005DE  0100               	movlb	0	; () banked
  9647  0005E0  6F8F               	movwf	(printf@f+1)& (0+255),b
  9648  0005E2  0E0E               	movlw	14
  9649  0005E4  0100               	movlb	0	; () banked
  9650  0005E6  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  9651  0005E8  0E10               	movlw	16
  9652  0005EA  6F82               	movwf	___awmod@divisor& (0+255),b
  9653  0005EC  C0F6  F080         	movff	_log_total_time,___awmod@dividend
  9654  0005F0  C0F7  F081         	movff	_log_total_time+1,___awmod@dividend+1
  9655  0005F4  EC17  F026         	call	___awmod	;wreg free
  9656  0005F8  C080  F086         	movff	?___awmod,___awdiv@dividend
  9657  0005FC  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  9658  000600  0E00               	movlw	0
  9659  000602  0100               	movlb	0	; () banked
  9660  000604  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  9661  000606  0E3C               	movlw	60
  9662  000608  6F88               	movwf	___awdiv@divisor& (0+255),b
  9663  00060A  EC05  F025         	call	___awdiv	;wreg free
  9664  00060E  C086  F090         	movff	?___awdiv,?_printf+2
  9665  000612  C087  F091         	movff	?___awdiv+1,?_printf+3
  9666  000616  C0C6  F080         	movff	_UI$2429,___awmod@dividend
  9667  00061A  C0C7  F081         	movff	_UI$2429+1,___awmod@dividend+1
  9668  00061E  0E00               	movlw	0
  9669  000620  0100               	movlb	0	; () banked
  9670  000622  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  9671  000624  0E3C               	movlw	60
  9672  000626  6F82               	movwf	___awmod@divisor& (0+255),b
  9673  000628  EC17  F026         	call	___awmod	;wreg free
  9674  00062C  C080  F092         	movff	?___awmod,?_printf+4
  9675  000630  C081  F093         	movff	?___awmod+1,?_printf+5
  9676  000634  EC16  F00E         	call	_printf	;wreg free
  9677                           
  9678                           ;UI.c: 181: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9679  000638  0E00               	movlw	0
  9680  00063A  0100               	movlb	0	; () banked
  9681  00063C  6FCE               	movwf	UI@i_438& (0+255),b
  9682  00063E                     l9454:
  9683                           
  9684                           ; BSR set to: 0
  9685  00063E  0E63               	movlw	99
  9686  000640  0100               	movlb	0	; () banked
  9687  000642  65CE               	cpfsgt	UI@i_438& (0+255),b
  9688  000644  D001               	goto	l9458
  9689  000646  D00C               	goto	l9462
  9690  000648                     l9458:
  9691                           
  9692                           ; BSR set to: 0
  9693  000648  0E68               	movlw	104
  9694  00064A  0100               	movlb	0	; () banked
  9695  00064C  6FC4               	movwf	??_UI& (0+255),b
  9696  00064E  0EE4               	movlw	228
  9697  000650                     u10357:
  9698  000650  2EE8               	decfsz	wreg,f,c
  9699  000652  D7FE               	bra	u10357
  9700  000654  2FC4               	decfsz	??_UI& (0+255),f,b
  9701  000656  D7FC               	bra	u10357
  9702  000658  F000               	nop	
  9703  00065A  0100               	movlb	0	; () banked
  9704  00065C  2BCE               	incf	UI@i_438& (0+255),f,b
  9705  00065E  D7EF               	goto	l9454
  9706  000660                     l9462:
  9707                           
  9708                           ; BSR set to: 0
  9709  000660  0100               	movlb	0	; () banked
  9710  000662  51F8               	movf	_logstate& (0+255),w,b
  9711  000664  0100               	movlb	0	; () banked
  9712  000666  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9713  000668  B4D8               	btfsc	status,2,c
  9714  00066A  0012               	return	
  9715                           
  9716                           ; BSR set to: 0
  9717                           ;UI.c: 182: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9718                           
  9719                           ; BSR set to: 0
  9720                           
  9721                           ; BSR set to: 0
  9722  00066C  0E00               	movlw	0
  9723  00066E  0100               	movlb	0	; () banked
  9724  000670  6FCF               	movwf	UI@i_439& (0+255),b
  9725  000672                     l9468:
  9726                           
  9727                           ; BSR set to: 0
  9728  000672  0E63               	movlw	99
  9729  000674  0100               	movlb	0	; () banked
  9730  000676  65CF               	cpfsgt	UI@i_439& (0+255),b
  9731  000678  D001               	goto	l9472
  9732  00067A  D00C               	goto	l9476
  9733  00067C                     l9472:
  9734                           
  9735                           ; BSR set to: 0
  9736  00067C  0E68               	movlw	104
  9737  00067E  0100               	movlb	0	; () banked
  9738  000680  6FC4               	movwf	??_UI& (0+255),b
  9739  000682  0EE4               	movlw	228
  9740  000684                     u10367:
  9741  000684  2EE8               	decfsz	wreg,f,c
  9742  000686  D7FE               	bra	u10367
  9743  000688  2FC4               	decfsz	??_UI& (0+255),f,b
  9744  00068A  D7FC               	bra	u10367
  9745  00068C  F000               	nop	
  9746  00068E  0100               	movlb	0	; () banked
  9747  000690  2BCF               	incf	UI@i_439& (0+255),f,b
  9748  000692  D7EF               	goto	l9468
  9749  000694                     l9476:
  9750                           
  9751                           ; BSR set to: 0
  9752  000694  0100               	movlb	0	; () banked
  9753  000696  51F8               	movf	_logstate& (0+255),w,b
  9754  000698  0100               	movlb	0	; () banked
  9755  00069A  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9756  00069C  B4D8               	btfsc	status,2,c
  9757  00069E  0012               	return	
  9758                           
  9759                           ; BSR set to: 0
  9760                           ;UI.c: 184: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  9761                           
  9762                           ; BSR set to: 0
  9763                           
  9764                           ; BSR set to: 0
  9765  0006A0  0E01               	movlw	1
  9766  0006A2  EC10  F02E         	call	_lcdInst
  9767  0006A6  0E68               	movlw	104
  9768  0006A8  0100               	movlb	0	; () banked
  9769  0006AA  6FC4               	movwf	??_UI& (0+255),b
  9770  0006AC  0EE4               	movlw	228
  9771  0006AE                     u10377:
  9772  0006AE  2EE8               	decfsz	wreg,f,c
  9773  0006B0  D7FE               	bra	u10377
  9774  0006B2  2FC4               	decfsz	??_UI& (0+255),f,b
  9775  0006B4  D7FC               	bra	u10377
  9776  0006B6  F000               	nop	
  9777                           
  9778                           ;UI.c: 185: lcdInst(0b10000000);;
  9779  0006B8  0E80               	movlw	128
  9780  0006BA  EC10  F02E         	call	_lcdInst
  9781                           
  9782                           ;UI.c: 186: printf(" -- POP  CAN -- ");
  9783  0006BE  0E50               	movlw	low STR_24
  9784  0006C0  0100               	movlb	0	; () banked
  9785  0006C2  6F8E               	movwf	printf@f& (0+255),b
  9786  0006C4  0EFD               	movlw	high STR_24
  9787  0006C6  0100               	movlb	0	; () banked
  9788  0006C8  6F8F               	movwf	(printf@f+1)& (0+255),b
  9789  0006CA  EC16  F00E         	call	_printf	;wreg free
  9790                           
  9791                           ;UI.c: 187: lcdInst(0b11000000);;
  9792  0006CE  0EC0               	movlw	192
  9793  0006D0  EC10  F02E         	call	_lcdInst
  9794                           
  9795                           ;UI.c: 188: printf("NTAB: %d|TAB: %d", log_count_pop_no_tab, log_count_pop_w_tab);
  9796  0006D4  0E2D               	movlw	low STR_25
  9797  0006D6  0100               	movlb	0	; () banked
  9798  0006D8  6F8E               	movwf	printf@f& (0+255),b
  9799  0006DA  0EFE               	movlw	high STR_25
  9800  0006DC  0100               	movlb	0	; () banked
  9801  0006DE  6F8F               	movwf	(printf@f+1)& (0+255),b
  9802  0006E0  C0F2  F090         	movff	_log_count_pop_no_tab,?_printf+2
  9803  0006E4  C0F3  F091         	movff	_log_count_pop_no_tab+1,?_printf+3
  9804  0006E8  C0F4  F092         	movff	_log_count_pop_w_tab,?_printf+4
  9805  0006EC  C0F5  F093         	movff	_log_count_pop_w_tab+1,?_printf+5
  9806  0006F0  EC16  F00E         	call	_printf	;wreg free
  9807                           
  9808                           ;UI.c: 190: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9809  0006F4  0E00               	movlw	0
  9810  0006F6  0100               	movlb	0	; () banked
  9811  0006F8  6FD0               	movwf	UI@i_442& (0+255),b
  9812  0006FA                     l9494:
  9813                           
  9814                           ; BSR set to: 0
  9815  0006FA  0E63               	movlw	99
  9816  0006FC  0100               	movlb	0	; () banked
  9817  0006FE  65D0               	cpfsgt	UI@i_442& (0+255),b
  9818  000700  D001               	goto	l9498
  9819  000702  D00C               	goto	l9502
  9820  000704                     l9498:
  9821                           
  9822                           ; BSR set to: 0
  9823  000704  0E68               	movlw	104
  9824  000706  0100               	movlb	0	; () banked
  9825  000708  6FC4               	movwf	??_UI& (0+255),b
  9826  00070A  0EE4               	movlw	228
  9827  00070C                     u10387:
  9828  00070C  2EE8               	decfsz	wreg,f,c
  9829  00070E  D7FE               	bra	u10387
  9830  000710  2FC4               	decfsz	??_UI& (0+255),f,b
  9831  000712  D7FC               	bra	u10387
  9832  000714  F000               	nop	
  9833  000716  0100               	movlb	0	; () banked
  9834  000718  2BD0               	incf	UI@i_442& (0+255),f,b
  9835  00071A  D7EF               	goto	l9494
  9836  00071C                     l9502:
  9837                           
  9838                           ; BSR set to: 0
  9839  00071C  0100               	movlb	0	; () banked
  9840  00071E  51F8               	movf	_logstate& (0+255),w,b
  9841  000720  0100               	movlb	0	; () banked
  9842  000722  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9843  000724  B4D8               	btfsc	status,2,c
  9844  000726  0012               	return	
  9845                           
  9846                           ; BSR set to: 0
  9847                           ;UI.c: 191: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9848                           
  9849                           ; BSR set to: 0
  9850                           
  9851                           ; BSR set to: 0
  9852  000728  0E00               	movlw	0
  9853  00072A  0100               	movlb	0	; () banked
  9854  00072C  6FD1               	movwf	UI@i_443& (0+255),b
  9855  00072E                     l9508:
  9856                           
  9857                           ; BSR set to: 0
  9858  00072E  0E63               	movlw	99
  9859  000730  0100               	movlb	0	; () banked
  9860  000732  65D1               	cpfsgt	UI@i_443& (0+255),b
  9861  000734  D001               	goto	l9512
  9862  000736  D00C               	goto	l9516
  9863  000738                     l9512:
  9864                           
  9865                           ; BSR set to: 0
  9866  000738  0E68               	movlw	104
  9867  00073A  0100               	movlb	0	; () banked
  9868  00073C  6FC4               	movwf	??_UI& (0+255),b
  9869  00073E  0EE4               	movlw	228
  9870  000740                     u10397:
  9871  000740  2EE8               	decfsz	wreg,f,c
  9872  000742  D7FE               	bra	u10397
  9873  000744  2FC4               	decfsz	??_UI& (0+255),f,b
  9874  000746  D7FC               	bra	u10397
  9875  000748  F000               	nop	
  9876  00074A  0100               	movlb	0	; () banked
  9877  00074C  2BD1               	incf	UI@i_443& (0+255),f,b
  9878  00074E  D7EF               	goto	l9508
  9879  000750                     l9516:
  9880                           
  9881                           ; BSR set to: 0
  9882  000750  0100               	movlb	0	; () banked
  9883  000752  51F8               	movf	_logstate& (0+255),w,b
  9884  000754  0100               	movlb	0	; () banked
  9885  000756  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9886  000758  B4D8               	btfsc	status,2,c
  9887  00075A  0012               	return	
  9888                           
  9889                           ; BSR set to: 0
  9890                           ;UI.c: 193: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  9891                           
  9892                           ; BSR set to: 0
  9893                           
  9894                           ; BSR set to: 0
  9895  00075C  0E01               	movlw	1
  9896  00075E  EC10  F02E         	call	_lcdInst
  9897  000762  0E68               	movlw	104
  9898  000764  0100               	movlb	0	; () banked
  9899  000766  6FC4               	movwf	??_UI& (0+255),b
  9900  000768  0EE4               	movlw	228
  9901  00076A                     u10407:
  9902  00076A  2EE8               	decfsz	wreg,f,c
  9903  00076C  D7FE               	bra	u10407
  9904  00076E  2FC4               	decfsz	??_UI& (0+255),f,b
  9905  000770  D7FC               	bra	u10407
  9906  000772  F000               	nop	
  9907                           
  9908                           ;UI.c: 194: lcdInst(0b10000000);;
  9909  000774  0E80               	movlw	128
  9910  000776  EC10  F02E         	call	_lcdInst
  9911                           
  9912                           ;UI.c: 195: printf(" -- SOUP CAN -- ");
  9913  00077A  0E61               	movlw	low STR_26
  9914  00077C  0100               	movlb	0	; () banked
  9915  00077E  6F8E               	movwf	printf@f& (0+255),b
  9916  000780  0EFD               	movlw	high STR_26
  9917  000782  0100               	movlb	0	; () banked
  9918  000784  6F8F               	movwf	(printf@f+1)& (0+255),b
  9919  000786  EC16  F00E         	call	_printf	;wreg free
  9920                           
  9921                           ;UI.c: 196: lcdInst(0b11000000);;
  9922  00078A  0EC0               	movlw	192
  9923  00078C  EC10  F02E         	call	_lcdInst
  9924                           
  9925                           ;UI.c: 197: printf("NLAB: %d|LAB: %d", log_count_can_no_lab, log_count_can_w_lab);
  9926  000790  0E1C               	movlw	low STR_27
  9927  000792  0100               	movlb	0	; () banked
  9928  000794  6F8E               	movwf	printf@f& (0+255),b
  9929  000796  0EFE               	movlw	high STR_27
  9930  000798  0100               	movlb	0	; () banked
  9931  00079A  6F8F               	movwf	(printf@f+1)& (0+255),b
  9932  00079C  C13F  F090         	movff	_log_count_can_no_lab,?_printf+2
  9933  0007A0  C140  F091         	movff	_log_count_can_no_lab+1,?_printf+3
  9934  0007A4  C141  F092         	movff	_log_count_can_w_lab,?_printf+4
  9935  0007A8  C142  F093         	movff	_log_count_can_w_lab+1,?_printf+5
  9936  0007AC  EC16  F00E         	call	_printf	;wreg free
  9937                           
  9938                           ;UI.c: 199: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9939  0007B0  0E00               	movlw	0
  9940  0007B2  0100               	movlb	0	; () banked
  9941  0007B4  6FD2               	movwf	UI@i_446& (0+255),b
  9942  0007B6                     l9534:
  9943                           
  9944                           ; BSR set to: 0
  9945  0007B6  0E63               	movlw	99
  9946  0007B8  0100               	movlb	0	; () banked
  9947  0007BA  65D2               	cpfsgt	UI@i_446& (0+255),b
  9948  0007BC  D001               	goto	l9538
  9949  0007BE  D00C               	goto	l9542
  9950  0007C0                     l9538:
  9951                           
  9952                           ; BSR set to: 0
  9953  0007C0  0E68               	movlw	104
  9954  0007C2  0100               	movlb	0	; () banked
  9955  0007C4  6FC4               	movwf	??_UI& (0+255),b
  9956  0007C6  0EE4               	movlw	228
  9957  0007C8                     u10417:
  9958  0007C8  2EE8               	decfsz	wreg,f,c
  9959  0007CA  D7FE               	bra	u10417
  9960  0007CC  2FC4               	decfsz	??_UI& (0+255),f,b
  9961  0007CE  D7FC               	bra	u10417
  9962  0007D0  F000               	nop	
  9963  0007D2  0100               	movlb	0	; () banked
  9964  0007D4  2BD2               	incf	UI@i_446& (0+255),f,b
  9965  0007D6  D7EF               	goto	l9534
  9966  0007D8                     l9542:
  9967                           
  9968                           ; BSR set to: 0
  9969  0007D8  0100               	movlb	0	; () banked
  9970  0007DA  51F8               	movf	_logstate& (0+255),w,b
  9971  0007DC  0100               	movlb	0	; () banked
  9972  0007DE  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9973  0007E0  B4D8               	btfsc	status,2,c
  9974  0007E2  0012               	return	
  9975                           
  9976                           ; BSR set to: 0
  9977                           ;UI.c: 200: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9978                           
  9979                           ; BSR set to: 0
  9980                           
  9981                           ; BSR set to: 0
  9982  0007E4  0E00               	movlw	0
  9983  0007E6  0100               	movlb	0	; () banked
  9984  0007E8  6FD3               	movwf	UI@i_447& (0+255),b
  9985  0007EA                     l9548:
  9986                           
  9987                           ; BSR set to: 0
  9988  0007EA  0E63               	movlw	99
  9989  0007EC  0100               	movlb	0	; () banked
  9990  0007EE  65D3               	cpfsgt	UI@i_447& (0+255),b
  9991  0007F0  D001               	goto	l9552
  9992  0007F2  D00C               	goto	l9556
  9993  0007F4                     l9552:
  9994                           
  9995                           ; BSR set to: 0
  9996  0007F4  0E68               	movlw	104
  9997  0007F6  0100               	movlb	0	; () banked
  9998  0007F8  6FC4               	movwf	??_UI& (0+255),b
  9999  0007FA  0EE4               	movlw	228
 10000  0007FC                     u10427:
 10001  0007FC  2EE8               	decfsz	wreg,f,c
 10002  0007FE  D7FE               	bra	u10427
 10003  000800  2FC4               	decfsz	??_UI& (0+255),f,b
 10004  000802  D7FC               	bra	u10427
 10005  000804  F000               	nop	
 10006  000806  0100               	movlb	0	; () banked
 10007  000808  2BD3               	incf	UI@i_447& (0+255),f,b
 10008  00080A  D7EF               	goto	l9548
 10009  00080C                     l9556:
 10010                           
 10011                           ; BSR set to: 0
 10012  00080C  0100               	movlb	0	; () banked
 10013  00080E  51F8               	movf	_logstate& (0+255),w,b
 10014  000810  0100               	movlb	0	; () banked
 10015  000812  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 10016  000814  B4D8               	btfsc	status,2,c
 10017  000816  0012               	return	
 10018                           
 10019                           ; BSR set to: 0
 10020                           ;UI.c: 202: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
 10021                           
 10022                           ; BSR set to: 0
 10023                           
 10024                           ; BSR set to: 0
 10025  000818  0E01               	movlw	1
 10026  00081A  EC10  F02E         	call	_lcdInst
 10027  00081E  0E68               	movlw	104
 10028  000820  0100               	movlb	0	; () banked
 10029  000822  6FC4               	movwf	??_UI& (0+255),b
 10030  000824  0EE4               	movlw	228
 10031  000826                     u10437:
 10032  000826  2EE8               	decfsz	wreg,f,c
 10033  000828  D7FE               	bra	u10437
 10034  00082A  2FC4               	decfsz	??_UI& (0+255),f,b
 10035  00082C  D7FC               	bra	u10437
 10036  00082E  F000               	nop	
 10037                           
 10038                           ;UI.c: 203: lcdInst(0b10000000);;
 10039  000830  0E80               	movlw	128
 10040  000832  EC10  F02E         	call	_lcdInst
 10041                           
 10042                           ;UI.c: 204: printf("-- TOTAL CANS --");
 10043  000836  0E72               	movlw	low STR_28
 10044  000838  0100               	movlb	0	; () banked
 10045  00083A  6F8E               	movwf	printf@f& (0+255),b
 10046  00083C  0EFD               	movlw	high STR_28
 10047  00083E  0100               	movlb	0	; () banked
 10048  000840  6F8F               	movwf	(printf@f+1)& (0+255),b
 10049  000842  EC16  F00E         	call	_printf	;wreg free
 10050                           
 10051                           ;UI.c: 205: lcdInst(0b11000000);;
 10052  000846  0EC0               	movlw	192
 10053  000848  EC10  F02E         	call	_lcdInst
 10054                           
 10055                           ;UI.c: 206: printf("%d", log_count_total);
 10056  00084C  0E2A               	movlw	low (STR_27+14)
 10057  00084E  0100               	movlb	0	; () banked
 10058  000850  6F8E               	movwf	printf@f& (0+255),b
 10059  000852  0EFE               	movlw	high (STR_27+14)
 10060  000854  0100               	movlb	0	; () banked
 10061  000856  6F8F               	movwf	(printf@f+1)& (0+255),b
 10062  000858  C143  F090         	movff	_log_count_total,?_printf+2
 10063  00085C  C144  F091         	movff	_log_count_total+1,?_printf+3
 10064  000860  EC16  F00E         	call	_printf	;wreg free
 10065                           
 10066                           ;UI.c: 208: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
 10067  000864  0E00               	movlw	0
 10068  000866  0100               	movlb	0	; () banked
 10069  000868  6FD4               	movwf	UI@i_450& (0+255),b
 10070  00086A                     l9574:
 10071                           
 10072                           ; BSR set to: 0
 10073  00086A  0E63               	movlw	99
 10074  00086C  0100               	movlb	0	; () banked
 10075  00086E  65D4               	cpfsgt	UI@i_450& (0+255),b
 10076  000870  D001               	goto	l9578
 10077  000872  D00C               	goto	l9582
 10078  000874                     l9578:
 10079                           
 10080                           ; BSR set to: 0
 10081  000874  0E68               	movlw	104
 10082  000876  0100               	movlb	0	; () banked
 10083  000878  6FC4               	movwf	??_UI& (0+255),b
 10084  00087A  0EE4               	movlw	228
 10085  00087C                     u10447:
 10086  00087C  2EE8               	decfsz	wreg,f,c
 10087  00087E  D7FE               	bra	u10447
 10088  000880  2FC4               	decfsz	??_UI& (0+255),f,b
 10089  000882  D7FC               	bra	u10447
 10090  000884  F000               	nop	
 10091  000886  0100               	movlb	0	; () banked
 10092  000888  2BD4               	incf	UI@i_450& (0+255),f,b
 10093  00088A  D7EF               	goto	l9574
 10094  00088C                     l9582:
 10095                           
 10096                           ; BSR set to: 0
 10097  00088C  0100               	movlb	0	; () banked
 10098  00088E  51F8               	movf	_logstate& (0+255),w,b
 10099  000890  0100               	movlb	0	; () banked
 10100  000892  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 10101  000894  B4D8               	btfsc	status,2,c
 10102  000896  0012               	return	
 10103                           
 10104                           ; BSR set to: 0
 10105                           ;UI.c: 209: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
 10106                           
 10107                           ; BSR set to: 0
 10108                           
 10109                           ; BSR set to: 0
 10110  000898  0E00               	movlw	0
 10111  00089A  0100               	movlb	0	; () banked
 10112  00089C  6FD5               	movwf	UI@i_451& (0+255),b
 10113  00089E                     l9588:
 10114                           
 10115                           ; BSR set to: 0
 10116  00089E  0E63               	movlw	99
 10117  0008A0  0100               	movlb	0	; () banked
 10118  0008A2  65D5               	cpfsgt	UI@i_451& (0+255),b
 10119  0008A4  D001               	goto	l9592
 10120  0008A6  D00C               	goto	l9596
 10121  0008A8                     l9592:
 10122                           
 10123                           ; BSR set to: 0
 10124  0008A8  0E68               	movlw	104
 10125  0008AA  0100               	movlb	0	; () banked
 10126  0008AC  6FC4               	movwf	??_UI& (0+255),b
 10127  0008AE  0EE4               	movlw	228
 10128  0008B0                     u10457:
 10129  0008B0  2EE8               	decfsz	wreg,f,c
 10130  0008B2  D7FE               	bra	u10457
 10131  0008B4  2FC4               	decfsz	??_UI& (0+255),f,b
 10132  0008B6  D7FC               	bra	u10457
 10133  0008B8  F000               	nop	
 10134  0008BA  0100               	movlb	0	; () banked
 10135  0008BC  2BD5               	incf	UI@i_451& (0+255),f,b
 10136  0008BE  D7EF               	goto	l9588
 10137  0008C0                     l9596:
 10138                           
 10139                           ; BSR set to: 0
 10140  0008C0  0100               	movlb	0	; () banked
 10141  0008C2  51F8               	movf	_logstate& (0+255),w,b
 10142  0008C4  0100               	movlb	0	; () banked
 10143  0008C6  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 10144  0008C8  B4D8               	btfsc	status,2,c
 10145  0008CA  0012               	return	
 10146  0008CC                     l9600:
 10147  0008CC  0100               	movlb	0	; () banked
 10148  0008CE  51F8               	movf	_logstate& (0+255),w,b
 10149  0008D0  0100               	movlb	0	; () banked
 10150  0008D2  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 10151  0008D4  B4D8               	btfsc	status,2,c
 10152  0008D6  0012               	return	
 10153  0008D8  D44A               	goto	l9296
 10154  0008DA                     __end_of_UI:
 10155                           	opt stack 0
 10156                           tblptru	equ	0xFF8
 10157                           tblptrh	equ	0xFF7
 10158                           tblptrl	equ	0xFF6
 10159                           tablat	equ	0xFF5
 10160                           prodh	equ	0xFF4
 10161                           prodl	equ	0xFF3
 10162                           intcon	equ	0xFF2
 10163                           intcon2	equ	0xFF1
 10164                           intcon3	equ	0xFF0
 10165                           postinc0	equ	0xFEE
 10166                           wreg	equ	0xFE8
 10167                           postdec1	equ	0xFE5
 10168                           fsr1l	equ	0xFE1
 10169                           indf2	equ	0xFDF
 10170                           postinc2	equ	0xFDE
 10171                           postdec2	equ	0xFDD
 10172                           fsr2h	equ	0xFDA
 10173                           fsr2l	equ	0xFD9
 10174                           status	equ	0xFD8
 10175                           
 10176 ;; *************** function _printRTC *****************
 10177 ;; Defined at:
 10178 ;;		line 63 in file "RTC.c"
 10179 ;; Parameters:    Size  Location     Type
 10180 ;;		None
 10181 ;; Auto vars:     Size  Location     Type
 10182 ;;  i               2   66[BANK0 ] int 
 10183 ;;  INT_time       14   46[BANK0 ] int [7]
 10184 ;;  month           4   62[BANK0 ] unsigned char [4]
 10185 ;;  RTC_month       2   60[BANK0 ] int 
 10186 ;; Return value:  Size  Location     Type
 10187 ;;                  1    wreg      void 
 10188 ;; Registers used:
 10189 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10190 ;; Tracked objects:
 10191 ;;		On entry : 0/0
 10192 ;;		On exit  : 0/0
 10193 ;;		Unchanged: 0/0
 10194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10195 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10196 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10197 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10198 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10199 ;;Total ram usage:       25 bytes
 10200 ;; Hardware stack levels used:    1
 10201 ;; Hardware stack levels required when called:   10
 10202 ;; This function calls:
 10203 ;;		_getRTC
 10204 ;;		_lcdInst
 10205 ;;		_printf
 10206 ;;		_strcpy
 10207 ;; This function is called by:
 10208 ;;		_UI
 10209 ;;		_change_state_to_menu_start
 10210 ;; This function uses a non-reentrant model
 10211 ;;
 10212                           
 10213                           	psect	text28
 10214  002DD4                     __ptext28:
 10215                           	opt stack 0
 10216  002DD4                     _printRTC:
 10217                           	opt stack 18
 10218                           
 10219                           ;RTC.c: 64: getRTC();
 10220                           
 10221                           ; BSR set to: 0
 10222                           ;incstack = 0
 10223  002DD4  ECAE  F026         	call	_getRTC	;wreg free
 10224                           
 10225                           ;RTC.c: 65: char month[] = "MMM";
 10226  002DD8  C14D  F0BE         	movff	printRTC@F3236,printRTC@month
 10227  002DDC  C14E  F0BF         	movff	printRTC@F3236+1,printRTC@month+1
 10228  002DE0  C14F  F0C0         	movff	printRTC@F3236+2,printRTC@month+2
 10229  002DE4  C150  F0C1         	movff	printRTC@F3236+3,printRTC@month+3
 10230                           
 10231                           ;RTC.c: 66: int INT_time[7];
 10232                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
 10233  002DE8  0E00               	movlw	0
 10234  002DEA  0100               	movlb	0	; () banked
 10235  002DEC  6FC3               	movwf	(printRTC@i+1)& (0+255),b
 10236  002DEE  0E00               	movlw	0
 10237  002DF0  6FC2               	movwf	printRTC@i& (0+255),b
 10238                           
 10239                           ; BSR set to: 0
 10240  002DF2  0100               	movlb	0	; () banked
 10241  002DF4  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
 10242  002DF6  D008               	goto	l7144
 10243  002DF8  0100               	movlb	0	; () banked
 10244  002DFA  51C3               	movf	(printRTC@i+1)& (0+255),w,b
 10245  002DFC  E146               	bnz	l627
 10246  002DFE  0E07               	movlw	7
 10247  002E00  0100               	movlb	0	; () banked
 10248  002E02  5DC2               	subwf	printRTC@i& (0+255),w,b
 10249  002E04  B0D8               	btfsc	status,0,c
 10250  002E06  D041               	goto	l627
 10251  002E08                     l7144:
 10252                           
 10253                           ; BSR set to: 0
 10254                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 10255  002E08  0E1C               	movlw	low _time
 10256  002E0A  0100               	movlb	0	; () banked
 10257  002E0C  25C2               	addwf	printRTC@i& (0+255),w,b
 10258  002E0E  6ED9               	movwf	fsr2l,c
 10259  002E10  0E01               	movlw	high _time
 10260  002E12  0100               	movlb	0	; () banked
 10261  002E14  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
 10262  002E16  6EDA               	movwf	fsr2h,c
 10263  002E18  50DF               	movf	indf2,w,c
 10264  002E1A  0100               	movlb	0	; () banked
 10265  002E1C  6FAB               	movwf	??_printRTC& (0+255),b
 10266  002E1E  0100               	movlb	0	; () banked
 10267  002E20  3BAB               	swapf	??_printRTC& (0+255),f,b
 10268  002E22  0E0F               	movlw	15
 10269  002E24  17AB               	andwf	??_printRTC& (0+255),f,b
 10270  002E26  0E0F               	movlw	15
 10271  002E28  0100               	movlb	0	; () banked
 10272  002E2A  17AB               	andwf	??_printRTC& (0+255),f,b
 10273  002E2C  0100               	movlb	0	; () banked
 10274  002E2E  51AB               	movf	??_printRTC& (0+255),w,b
 10275  002E30  0D0A               	mullw	10
 10276  002E32  0E1C               	movlw	low _time
 10277  002E34  0100               	movlb	0	; () banked
 10278  002E36  25C2               	addwf	printRTC@i& (0+255),w,b
 10279  002E38  6ED9               	movwf	fsr2l,c
 10280  002E3A  0E01               	movlw	high _time
 10281  002E3C  0100               	movlb	0	; () banked
 10282  002E3E  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
 10283  002E40  6EDA               	movwf	fsr2h,c
 10284  002E42  50DF               	movf	indf2,w,c
 10285  002E44  0B0F               	andlw	15
 10286  002E46  0100               	movlb	0	; () banked
 10287  002E48  6FAC               	movwf	(??_printRTC+1)& (0+255),b
 10288  002E4A  6BAD               	clrf	(??_printRTC+2)& (0+255),b
 10289  002E4C  50F3               	movf	prodl,w,c
 10290  002E4E  0100               	movlb	0	; () banked
 10291  002E50  27AC               	addwf	(??_printRTC+1)& (0+255),f,b
 10292  002E52  50F4               	movf	prodh,w,c
 10293  002E54  0100               	movlb	0	; () banked
 10294  002E56  23AD               	addwfc	(??_printRTC+2)& (0+255),f,b
 10295  002E58  90D8               	bcf	status,0,c
 10296  002E5A  0100               	movlb	0	; () banked
 10297  002E5C  35C2               	rlcf	printRTC@i& (0+255),w,b
 10298  002E5E  6ED9               	movwf	fsr2l,c
 10299  002E60  0100               	movlb	0	; () banked
 10300  002E62  35C3               	rlcf	(printRTC@i+1)& (0+255),w,b
 10301  002E64  6EDA               	movwf	fsr2h,c
 10302  002E66  0EAE               	movlw	low printRTC@INT_time
 10303  002E68  26D9               	addwf	fsr2l,f,c
 10304  002E6A  0E00               	movlw	high printRTC@INT_time
 10305  002E6C  22DA               	addwfc	fsr2h,f,c
 10306  002E6E  C0AC  FFDE         	movff	??_printRTC+1,postinc2
 10307  002E72  C0AD  FFDD         	movff	??_printRTC+2,postdec2
 10308                           
 10309                           ; BSR set to: 0
 10310  002E76  0100               	movlb	0	; () banked
 10311  002E78  4BC2               	infsnz	printRTC@i& (0+255),f,b
 10312  002E7A  2BC3               	incf	(printRTC@i+1)& (0+255),f,b
 10313                           
 10314                           ; BSR set to: 0
 10315  002E7C  0100               	movlb	0	; () banked
 10316  002E7E  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
 10317  002E80  D7C3               	goto	l7144
 10318  002E82  0100               	movlb	0	; () banked
 10319  002E84  51C3               	movf	(printRTC@i+1)& (0+255),w,b
 10320  002E86  E101               	bnz	u5970
 10321  002E88  D7BA               	goto	L12
 10322  002E8A                     u5970:
 10323  002E8A                     l627:
 10324                           
 10325                           ; BSR set to: 0
 10326                           ;RTC.c: 69: }
 10327                           ;RTC.c: 70: int RTC_month = INT_time[5];
 10328  002E8A  C0B8  F0BC         	movff	printRTC@INT_time+10,printRTC@RTC_month
 10329  002E8E  C0B9  F0BD         	movff	printRTC@INT_time+11,printRTC@RTC_month+1
 10330                           
 10331                           ;RTC.c: 72: switch(RTC_month){
 10332  002E92  D0B4               	goto	l7176
 10333  002E94                     l7150:
 10334                           
 10335                           ; BSR set to: 0
 10336                           ;RTC.c: 74: strcpy(month, "JAN");
 10337  002E94  0EBE               	movlw	low printRTC@month
 10338  002E96  0100               	movlb	0	; () banked
 10339  002E98  6F80               	movwf	strcpy@to& (0+255),b
 10340  002E9A  0E00               	movlw	high printRTC@month
 10341  002E9C  0100               	movlb	0	; () banked
 10342  002E9E  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10343  002EA0  0EDB               	movlw	low STR_8
 10344  002EA2  0100               	movlb	0	; () banked
 10345  002EA4  6F82               	movwf	strcpy@from& (0+255),b
 10346  002EA6  0EFF               	movlw	high STR_8
 10347  002EA8  0100               	movlb	0	; () banked
 10348  002EAA  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10349  002EAC  EC5F  F02B         	call	_strcpy	;wreg free
 10350                           
 10351                           ;RTC.c: 75: break;
 10352  002EB0  D0D4               	goto	l7178
 10353  002EB2                     l7152:
 10354                           
 10355                           ;RTC.c: 77: strcpy(month, "FEB");
 10356  002EB2  0EBE               	movlw	low printRTC@month
 10357  002EB4  0100               	movlb	0	; () banked
 10358  002EB6  6F80               	movwf	strcpy@to& (0+255),b
 10359  002EB8  0E00               	movlw	high printRTC@month
 10360  002EBA  0100               	movlb	0	; () banked
 10361  002EBC  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10362  002EBE  0ECB               	movlw	low STR_9
 10363  002EC0  0100               	movlb	0	; () banked
 10364  002EC2  6F82               	movwf	strcpy@from& (0+255),b
 10365  002EC4  0EFF               	movlw	high STR_9
 10366  002EC6  0100               	movlb	0	; () banked
 10367  002EC8  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10368  002ECA  EC5F  F02B         	call	_strcpy	;wreg free
 10369                           
 10370                           ;RTC.c: 78: break;
 10371  002ECE  D0C5               	goto	l7178
 10372  002ED0                     l7154:
 10373                           
 10374                           ;RTC.c: 80: strcpy(month, "MAR");
 10375  002ED0  0EBE               	movlw	low printRTC@month
 10376  002ED2  0100               	movlb	0	; () banked
 10377  002ED4  6F80               	movwf	strcpy@to& (0+255),b
 10378  002ED6  0E00               	movlw	high printRTC@month
 10379  002ED8  0100               	movlb	0	; () banked
 10380  002EDA  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10381  002EDC  0EE7               	movlw	low STR_10
 10382  002EDE  0100               	movlb	0	; () banked
 10383  002EE0  6F82               	movwf	strcpy@from& (0+255),b
 10384  002EE2  0EFF               	movlw	high STR_10
 10385  002EE4  0100               	movlb	0	; () banked
 10386  002EE6  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10387  002EE8  EC5F  F02B         	call	_strcpy	;wreg free
 10388                           
 10389                           ;RTC.c: 81: break;
 10390  002EEC  D0B6               	goto	l7178
 10391  002EEE                     l7156:
 10392                           
 10393                           ;RTC.c: 83: strcpy(month, "APR");
 10394  002EEE  0EBE               	movlw	low printRTC@month
 10395  002EF0  0100               	movlb	0	; () banked
 10396  002EF2  6F80               	movwf	strcpy@to& (0+255),b
 10397  002EF4  0E00               	movlw	high printRTC@month
 10398  002EF6  0100               	movlb	0	; () banked
 10399  002EF8  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10400  002EFA  0EEB               	movlw	low STR_11
 10401  002EFC  0100               	movlb	0	; () banked
 10402  002EFE  6F82               	movwf	strcpy@from& (0+255),b
 10403  002F00  0EFF               	movlw	high STR_11
 10404  002F02  0100               	movlb	0	; () banked
 10405  002F04  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10406  002F06  EC5F  F02B         	call	_strcpy	;wreg free
 10407                           
 10408                           ;RTC.c: 84: break;
 10409  002F0A  D0A7               	goto	l7178
 10410  002F0C                     l7158:
 10411                           
 10412                           ;RTC.c: 86: strcpy(month, "MAY");
 10413  002F0C  0EBE               	movlw	low printRTC@month
 10414  002F0E  0100               	movlb	0	; () banked
 10415  002F10  6F80               	movwf	strcpy@to& (0+255),b
 10416  002F12  0E00               	movlw	high printRTC@month
 10417  002F14  0100               	movlb	0	; () banked
 10418  002F16  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10419  002F18  0EFB               	movlw	low STR_12
 10420  002F1A  0100               	movlb	0	; () banked
 10421  002F1C  6F82               	movwf	strcpy@from& (0+255),b
 10422  002F1E  0EFF               	movlw	high STR_12
 10423  002F20  0100               	movlb	0	; () banked
 10424  002F22  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10425  002F24  EC5F  F02B         	call	_strcpy	;wreg free
 10426                           
 10427                           ;RTC.c: 87: break;
 10428  002F28  D098               	goto	l7178
 10429  002F2A                     l7160:
 10430                           
 10431                           ;RTC.c: 89: strcpy(month, "JUN");
 10432  002F2A  0EBE               	movlw	low printRTC@month
 10433  002F2C  0100               	movlb	0	; () banked
 10434  002F2E  6F80               	movwf	strcpy@to& (0+255),b
 10435  002F30  0E00               	movlw	high printRTC@month
 10436  002F32  0100               	movlb	0	; () banked
 10437  002F34  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10438  002F36  0EDF               	movlw	low STR_13
 10439  002F38  0100               	movlb	0	; () banked
 10440  002F3A  6F82               	movwf	strcpy@from& (0+255),b
 10441  002F3C  0EFF               	movlw	high STR_13
 10442  002F3E  0100               	movlb	0	; () banked
 10443  002F40  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10444  002F42  EC5F  F02B         	call	_strcpy	;wreg free
 10445                           
 10446                           ;RTC.c: 90: break;
 10447  002F46  D089               	goto	l7178
 10448  002F48                     l7162:
 10449                           
 10450                           ;RTC.c: 92: strcpy(month, "JUL");
 10451  002F48  0EBE               	movlw	low printRTC@month
 10452  002F4A  0100               	movlb	0	; () banked
 10453  002F4C  6F80               	movwf	strcpy@to& (0+255),b
 10454  002F4E  0E00               	movlw	high printRTC@month
 10455  002F50  0100               	movlb	0	; () banked
 10456  002F52  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10457  002F54  0ED7               	movlw	low STR_14
 10458  002F56  0100               	movlb	0	; () banked
 10459  002F58  6F82               	movwf	strcpy@from& (0+255),b
 10460  002F5A  0EFF               	movlw	high STR_14
 10461  002F5C  0100               	movlb	0	; () banked
 10462  002F5E  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10463  002F60  EC5F  F02B         	call	_strcpy	;wreg free
 10464                           
 10465                           ;RTC.c: 93: break;
 10466  002F64  D07A               	goto	l7178
 10467  002F66                     l7164:
 10468                           
 10469                           ;RTC.c: 95: strcpy(month, "AUG");
 10470  002F66  0EBE               	movlw	low printRTC@month
 10471  002F68  0100               	movlb	0	; () banked
 10472  002F6A  6F80               	movwf	strcpy@to& (0+255),b
 10473  002F6C  0E00               	movlw	high printRTC@month
 10474  002F6E  0100               	movlb	0	; () banked
 10475  002F70  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10476  002F72  0ED3               	movlw	low STR_15
 10477  002F74  0100               	movlb	0	; () banked
 10478  002F76  6F82               	movwf	strcpy@from& (0+255),b
 10479  002F78  0EFF               	movlw	high STR_15
 10480  002F7A  0100               	movlb	0	; () banked
 10481  002F7C  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10482  002F7E  EC5F  F02B         	call	_strcpy	;wreg free
 10483                           
 10484                           ;RTC.c: 96: break;
 10485  002F82  D06B               	goto	l7178
 10486  002F84                     l7166:
 10487                           
 10488                           ;RTC.c: 98: strcpy(month, "SEP");
 10489  002F84  0EBE               	movlw	low printRTC@month
 10490  002F86  0100               	movlb	0	; () banked
 10491  002F88  6F80               	movwf	strcpy@to& (0+255),b
 10492  002F8A  0E00               	movlw	high printRTC@month
 10493  002F8C  0100               	movlb	0	; () banked
 10494  002F8E  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10495  002F90  0EE3               	movlw	low STR_16
 10496  002F92  0100               	movlb	0	; () banked
 10497  002F94  6F82               	movwf	strcpy@from& (0+255),b
 10498  002F96  0EFF               	movlw	high STR_16
 10499  002F98  0100               	movlb	0	; () banked
 10500  002F9A  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10501  002F9C  EC5F  F02B         	call	_strcpy	;wreg free
 10502                           
 10503                           ;RTC.c: 99: break;
 10504  002FA0  D05C               	goto	l7178
 10505  002FA2                     l7168:
 10506                           
 10507                           ;RTC.c: 101: strcpy(month, "OCT");
 10508  002FA2  0EBE               	movlw	low printRTC@month
 10509  002FA4  0100               	movlb	0	; () banked
 10510  002FA6  6F80               	movwf	strcpy@to& (0+255),b
 10511  002FA8  0E00               	movlw	high printRTC@month
 10512  002FAA  0100               	movlb	0	; () banked
 10513  002FAC  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10514  002FAE  0EF3               	movlw	low STR_17
 10515  002FB0  0100               	movlb	0	; () banked
 10516  002FB2  6F82               	movwf	strcpy@from& (0+255),b
 10517  002FB4  0EFF               	movlw	high STR_17
 10518  002FB6  0100               	movlb	0	; () banked
 10519  002FB8  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10520  002FBA  EC5F  F02B         	call	_strcpy	;wreg free
 10521                           
 10522                           ;RTC.c: 102: break;
 10523  002FBE  D04D               	goto	l7178
 10524  002FC0                     l7170:
 10525                           
 10526                           ;RTC.c: 104: strcpy(month, "NOV");
 10527  002FC0  0EBE               	movlw	low printRTC@month
 10528  002FC2  0100               	movlb	0	; () banked
 10529  002FC4  6F80               	movwf	strcpy@to& (0+255),b
 10530  002FC6  0E00               	movlw	high printRTC@month
 10531  002FC8  0100               	movlb	0	; () banked
 10532  002FCA  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10533  002FCC  0EF7               	movlw	low STR_18
 10534  002FCE  0100               	movlb	0	; () banked
 10535  002FD0  6F82               	movwf	strcpy@from& (0+255),b
 10536  002FD2  0EFF               	movlw	high STR_18
 10537  002FD4  0100               	movlb	0	; () banked
 10538  002FD6  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10539  002FD8  EC5F  F02B         	call	_strcpy	;wreg free
 10540                           
 10541                           ;RTC.c: 105: break;
 10542  002FDC  D03E               	goto	l7178
 10543  002FDE                     l7172:
 10544                           
 10545                           ;RTC.c: 107: strcpy(month, "DEC");
 10546  002FDE  0EBE               	movlw	low printRTC@month
 10547  002FE0  0100               	movlb	0	; () banked
 10548  002FE2  6F80               	movwf	strcpy@to& (0+255),b
 10549  002FE4  0E00               	movlw	high printRTC@month
 10550  002FE6  0100               	movlb	0	; () banked
 10551  002FE8  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10552  002FEA  0ECF               	movlw	low STR_19
 10553  002FEC  0100               	movlb	0	; () banked
 10554  002FEE  6F82               	movwf	strcpy@from& (0+255),b
 10555  002FF0  0EFF               	movlw	high STR_19
 10556  002FF2  0100               	movlb	0	; () banked
 10557  002FF4  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10558  002FF6  EC5F  F02B         	call	_strcpy	;wreg free
 10559                           
 10560                           ;RTC.c: 109: }
 10561                           
 10562                           ;RTC.c: 108: break;
 10563  002FFA  D02F               	goto	l7178
 10564  002FFC                     l7176:
 10565  002FFC  C0BC  F0AB         	movff	printRTC@RTC_month,??_printRTC
 10566  003000  C0BD  F0AC         	movff	printRTC@RTC_month+1,??_printRTC+1
 10567                           
 10568                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10569                           ; Switch size 1, requested type "space"
 10570                           ; Number of cases is 1, Range of values is 0 to 0
 10571                           ; switch strategies available:
 10572                           ; Name         Instructions Cycles
 10573                           ; simple_byte            4     3 (average)
 10574                           ;	Chosen strategy is simple_byte
 10575  003004  0100               	movlb	0	; () banked
 10576  003006  51AC               	movf	(??_printRTC+1)& (0+255),w,b
 10577  003008  0A00               	xorlw	0	; case 0
 10578  00300A  A4D8               	btfss	status,2,c
 10579  00300C  D026               	goto	l7178
 10580                           
 10581                           ; BSR set to: 0
 10582                           ; Switch size 1, requested type "space"
 10583                           ; Number of cases is 12, Range of values is 1 to 12
 10584                           ; switch strategies available:
 10585                           ; Name         Instructions Cycles
 10586                           ; simple_byte           37    19 (average)
 10587                           ;	Chosen strategy is simple_byte
 10588  00300E  0100               	movlb	0	; () banked
 10589  003010  51AB               	movf	??_printRTC& (0+255),w,b
 10590  003012  0A01               	xorlw	1	; case 1
 10591  003014  B4D8               	btfsc	status,2,c
 10592  003016  D73E               	goto	l7150
 10593  003018  0A03               	xorlw	3	; case 2
 10594  00301A  B4D8               	btfsc	status,2,c
 10595  00301C  D74A               	goto	l7152
 10596  00301E  0A01               	xorlw	1	; case 3
 10597  003020  B4D8               	btfsc	status,2,c
 10598  003022  D756               	goto	l7154
 10599  003024  0A07               	xorlw	7	; case 4
 10600  003026  B4D8               	btfsc	status,2,c
 10601  003028  D762               	goto	l7156
 10602  00302A  0A01               	xorlw	1	; case 5
 10603  00302C  B4D8               	btfsc	status,2,c
 10604  00302E  D76E               	goto	l7158
 10605  003030  0A03               	xorlw	3	; case 6
 10606  003032  B4D8               	btfsc	status,2,c
 10607  003034  D77A               	goto	l7160
 10608  003036  0A01               	xorlw	1	; case 7
 10609  003038  B4D8               	btfsc	status,2,c
 10610  00303A  D786               	goto	l7162
 10611  00303C  0A0F               	xorlw	15	; case 8
 10612  00303E  B4D8               	btfsc	status,2,c
 10613  003040  D792               	goto	l7164
 10614  003042  0A01               	xorlw	1	; case 9
 10615  003044  B4D8               	btfsc	status,2,c
 10616  003046  D79E               	goto	l7166
 10617  003048  0A03               	xorlw	3	; case 10
 10618  00304A  B4D8               	btfsc	status,2,c
 10619  00304C  D7AA               	goto	l7168
 10620  00304E  0A01               	xorlw	1	; case 11
 10621  003050  B4D8               	btfsc	status,2,c
 10622  003052  D7B6               	goto	l7170
 10623  003054  0A07               	xorlw	7	; case 12
 10624  003056  B4D8               	btfsc	status,2,c
 10625  003058  D7C2               	goto	l7172
 10626  00305A                     l7178:
 10627                           
 10628                           ;RTC.c: 110: lcdInst(0b10000000);;
 10629  00305A  0E80               	movlw	128
 10630  00305C  EC10  F02E         	call	_lcdInst
 10631                           
 10632                           ;RTC.c: 111: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 10633  003060  0EA2               	movlw	low STR_21
 10634  003062  0100               	movlb	0	; () banked
 10635  003064  6F8E               	movwf	printf@f& (0+255),b
 10636  003066  0EFA               	movlw	high STR_21
 10637  003068  0100               	movlb	0	; () banked
 10638  00306A  6F8F               	movwf	(printf@f+1)& (0+255),b
 10639  00306C  C0B6  F090         	movff	printRTC@INT_time+8,?_printf+2
 10640  003070  C0B7  F091         	movff	printRTC@INT_time+9,?_printf+3
 10641  003074  0EBE               	movlw	low printRTC@month
 10642  003076  0100               	movlb	0	; () banked
 10643  003078  6F92               	movwf	(?_printf+4)& (0+255),b
 10644  00307A  0E00               	movlw	high printRTC@month
 10645  00307C  0100               	movlb	0	; () banked
 10646  00307E  6F93               	movwf	(?_printf+5)& (0+255),b
 10647  003080  C0B2  F094         	movff	printRTC@INT_time+4,?_printf+6
 10648  003084  C0B3  F095         	movff	printRTC@INT_time+5,?_printf+7
 10649  003088  C0B0  F096         	movff	printRTC@INT_time+2,?_printf+8
 10650  00308C  C0B1  F097         	movff	printRTC@INT_time+3,?_printf+9
 10651  003090  C0AE  F098         	movff	printRTC@INT_time,?_printf+10
 10652  003094  C0AF  F099         	movff	printRTC@INT_time+1,?_printf+11
 10653  003098  EC16  F00E         	call	_printf	;wreg free
 10654  00309C  0012               	return		;funcret
 10655  00309E                     __end_of_printRTC:
 10656                           	opt stack 0
 10657                           tblptru	equ	0xFF8
 10658                           tblptrh	equ	0xFF7
 10659                           tblptrl	equ	0xFF6
 10660                           tablat	equ	0xFF5
 10661                           prodh	equ	0xFF4
 10662                           prodl	equ	0xFF3
 10663                           intcon	equ	0xFF2
 10664                           intcon2	equ	0xFF1
 10665                           intcon3	equ	0xFF0
 10666                           postinc0	equ	0xFEE
 10667                           wreg	equ	0xFE8
 10668                           postdec1	equ	0xFE5
 10669                           fsr1l	equ	0xFE1
 10670                           indf2	equ	0xFDF
 10671                           postinc2	equ	0xFDE
 10672                           postdec2	equ	0xFDD
 10673                           fsr2h	equ	0xFDA
 10674                           fsr2l	equ	0xFD9
 10675                           status	equ	0xFD8
 10676                           
 10677 ;; *************** function _strcpy *****************
 10678 ;; Defined at:
 10679 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 10680 ;; Parameters:    Size  Location     Type
 10681 ;;  to              2    0[BANK0 ] PTR unsigned char 
 10682 ;;		 -> printRTC@month(4), UI@month(4), 
 10683 ;;  from            2    2[BANK0 ] PTR const unsigned char 
 10684 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
 10685 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
 10686 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
 10687 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
 10688 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
 10689 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
 10690 ;;		 -> STR_8(4), 
 10691 ;; Auto vars:     Size  Location     Type
 10692 ;;  cp              2    4[BANK0 ] PTR unsigned char 
 10693 ;;		 -> printRTC@month(4), UI@month(4), 
 10694 ;; Return value:  Size  Location     Type
 10695 ;;                  2    0[BANK0 ] PTR unsigned char 
 10696 ;; Registers used:
 10697 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 10698 ;; Tracked objects:
 10699 ;;		On entry : 0/0
 10700 ;;		On exit  : 0/0
 10701 ;;		Unchanged: 0/0
 10702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10703 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10704 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10705 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10706 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10707 ;;Total ram usage:        6 bytes
 10708 ;; Hardware stack levels used:    1
 10709 ;; Hardware stack levels required when called:    7
 10710 ;; This function calls:
 10711 ;;		Nothing
 10712 ;; This function is called by:
 10713 ;;		_UI
 10714 ;;		_printRTC
 10715 ;; This function uses a non-reentrant model
 10716 ;;
 10717                           
 10718                           	psect	text29
 10719  0056BE                     __ptext29:
 10720                           	opt stack 0
 10721  0056BE                     _strcpy:
 10722                           	opt stack 20
 10723                           
 10724                           ;incstack = 0
 10725  0056BE  C080  F084         	movff	strcpy@to,strcpy@cp
 10726  0056C2  C081  F085         	movff	strcpy@to+1,strcpy@cp+1
 10727  0056C6  D006               	goto	l6842
 10728  0056C8                     l6840:
 10729  0056C8  0100               	movlb	0	; () banked
 10730  0056CA  4B84               	infsnz	strcpy@cp& (0+255),f,b
 10731  0056CC  2B85               	incf	(strcpy@cp+1)& (0+255),f,b
 10732  0056CE  0100               	movlb	0	; () banked
 10733  0056D0  4B82               	infsnz	strcpy@from& (0+255),f,b
 10734  0056D2  2B83               	incf	(strcpy@from+1)& (0+255),f,b
 10735  0056D4                     l6842:
 10736  0056D4  C082  FFF6         	movff	strcpy@from,tblptrl
 10737  0056D8  C083  FFF7         	movff	strcpy@from+1,tblptrh
 10738  0056DC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 10739  0056DC  6AF8               	clrf	tblptru,c
 10740  0056DE                     	endif
 10741  0056DE                     	if	0	;tblptru may be non-zero
 10742  0056DE                     	endif
 10743  0056DE  C084  FFD9         	movff	strcpy@cp,fsr2l
 10744  0056E2  C085  FFDA         	movff	strcpy@cp+1,fsr2h
 10745  0056E6  0008               	tblrd		*
 10746  0056E8  CFF5 FFDF          	movff	tablat,indf2
 10747  0056EC  50DF               	movf	indf2,w,c
 10748  0056EE  B4D8               	btfsc	status,2,c
 10749  0056F0  0012               	return	
 10750  0056F2  D7EA               	goto	l6840
 10751  0056F4                     __end_of_strcpy:
 10752                           	opt stack 0
 10753                           tblptru	equ	0xFF8
 10754                           tblptrh	equ	0xFF7
 10755                           tblptrl	equ	0xFF6
 10756                           tablat	equ	0xFF5
 10757                           prodh	equ	0xFF4
 10758                           prodl	equ	0xFF3
 10759                           intcon	equ	0xFF2
 10760                           intcon2	equ	0xFF1
 10761                           intcon3	equ	0xFF0
 10762                           postinc0	equ	0xFEE
 10763                           wreg	equ	0xFE8
 10764                           postdec1	equ	0xFE5
 10765                           fsr1l	equ	0xFE1
 10766                           indf2	equ	0xFDF
 10767                           postinc2	equ	0xFDE
 10768                           postdec2	equ	0xFDD
 10769                           fsr2h	equ	0xFDA
 10770                           fsr2l	equ	0xFD9
 10771                           status	equ	0xFD8
 10772                           
 10773 ;; *************** function _getRTC *****************
 10774 ;; Defined at:
 10775 ;;		line 44 in file "RTC.c"
 10776 ;; Parameters:    Size  Location     Type
 10777 ;;		None
 10778 ;; Auto vars:     Size  Location     Type
 10779 ;;  i               2    3[BANK0 ] int 
 10780 ;; Return value:  Size  Location     Type
 10781 ;;                  1    wreg      void 
 10782 ;; Registers used:
 10783 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10784 ;; Tracked objects:
 10785 ;;		On entry : 0/0
 10786 ;;		On exit  : 0/0
 10787 ;;		Unchanged: 0/0
 10788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10789 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10790 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10791 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10792 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10793 ;;Total ram usage:        2 bytes
 10794 ;; Hardware stack levels used:    1
 10795 ;; Hardware stack levels required when called:    9
 10796 ;; This function calls:
 10797 ;;		_I2C_Master_Read
 10798 ;;		_I2C_Master_Start
 10799 ;;		_I2C_Master_Stop
 10800 ;;		_I2C_Master_Write
 10801 ;; This function is called by:
 10802 ;;		_printRTC
 10803 ;;		_initSortTimer
 10804 ;; This function uses a non-reentrant model
 10805 ;;
 10806                           
 10807                           	psect	text30
 10808  004D5C                     __ptext30:
 10809                           	opt stack 0
 10810  004D5C                     _getRTC:
 10811                           	opt stack 18
 10812                           
 10813                           ;RTC.c: 48: I2C_Master_Start();
 10814                           
 10815                           ;incstack = 0
 10816  004D5C  EC36  F02E         	call	_I2C_Master_Start	;wreg free
 10817                           
 10818                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
 10819  004D60  0E00               	movlw	0
 10820  004D62  0100               	movlb	0	; () banked
 10821  004D64  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
 10822  004D66  0ED0               	movlw	208
 10823  004D68  6F81               	movwf	I2C_Master_Write@d& (0+255),b
 10824  004D6A  EC24  F02E         	call	_I2C_Master_Write	;wreg free
 10825                           
 10826                           ;RTC.c: 50: I2C_Master_Write(0x00);
 10827  004D6E  0E00               	movlw	0
 10828  004D70  0100               	movlb	0	; () banked
 10829  004D72  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
 10830  004D74  0E00               	movlw	0
 10831  004D76  6F81               	movwf	I2C_Master_Write@d& (0+255),b
 10832  004D78  EC24  F02E         	call	_I2C_Master_Write	;wreg free
 10833                           
 10834                           ;RTC.c: 51: I2C_Master_Stop();
 10835  004D7C  EC32  F02E         	call	_I2C_Master_Stop	;wreg free
 10836                           
 10837                           ;RTC.c: 54: I2C_Master_Start();
 10838  004D80  EC36  F02E         	call	_I2C_Master_Start	;wreg free
 10839                           
 10840                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
 10841  004D84  0E00               	movlw	0
 10842  004D86  0100               	movlb	0	; () banked
 10843  004D88  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
 10844  004D8A  0ED1               	movlw	209
 10845  004D8C  6F81               	movwf	I2C_Master_Write@d& (0+255),b
 10846  004D8E  EC24  F02E         	call	_I2C_Master_Write	;wreg free
 10847                           
 10848                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
 10849  004D92  0E00               	movlw	0
 10850  004D94  0100               	movlb	0	; () banked
 10851  004D96  6F84               	movwf	(getRTC@i+1)& (0+255),b
 10852  004D98  0E00               	movlw	0
 10853  004D9A  6F83               	movwf	getRTC@i& (0+255),b
 10854  004D9C                     l6848:
 10855                           
 10856                           ; BSR set to: 0
 10857  004D9C  0100               	movlb	0	; () banked
 10858  004D9E  BF84               	btfsc	(getRTC@i+1)& (0+255),7,b
 10859  004DA0  D008               	goto	l6852
 10860  004DA2  0100               	movlb	0	; () banked
 10861  004DA4  5184               	movf	(getRTC@i+1)& (0+255),w,b
 10862  004DA6  E115               	bnz	l6858
 10863  004DA8  0E06               	movlw	6
 10864  004DAA  0100               	movlb	0	; () banked
 10865  004DAC  5D83               	subwf	getRTC@i& (0+255),w,b
 10866  004DAE  B0D8               	btfsc	status,0,c
 10867  004DB0  D010               	goto	l6858
 10868  004DB2                     l6852:
 10869                           
 10870                           ; BSR set to: 0
 10871                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
 10872  004DB2  0E1C               	movlw	low _time
 10873  004DB4  0100               	movlb	0	; () banked
 10874  004DB6  2583               	addwf	getRTC@i& (0+255),w,b
 10875  004DB8  6ED9               	movwf	fsr2l,c
 10876  004DBA  0E01               	movlw	high _time
 10877  004DBC  0100               	movlb	0	; () banked
 10878  004DBE  2184               	addwfc	(getRTC@i+1)& (0+255),w,b
 10879  004DC0  6EDA               	movwf	fsr2h,c
 10880  004DC2  0E01               	movlw	1
 10881  004DC4  ECB7  F02C         	call	_I2C_Master_Read
 10882  004DC8  6EDF               	movwf	indf2,c
 10883  004DCA  0100               	movlb	0	; () banked
 10884  004DCC  4B83               	infsnz	getRTC@i& (0+255),f,b
 10885  004DCE  2B84               	incf	(getRTC@i+1)& (0+255),f,b
 10886  004DD0  D7E5               	goto	l6848
 10887  004DD2                     l6858:
 10888                           
 10889                           ; BSR set to: 0
 10890                           ;RTC.c: 58: }
 10891                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
 10892  004DD2  0E00               	movlw	0
 10893  004DD4  ECB7  F02C         	call	_I2C_Master_Read
 10894  004DD8  0101               	movlb	1	; () banked
 10895  004DDA  6F22               	movwf	(_time+6)& (0+255),b
 10896                           
 10897                           ;RTC.c: 60: I2C_Master_Stop();
 10898  004DDC  EC32  F02E         	call	_I2C_Master_Stop	;wreg free
 10899  004DE0  0012               	return		;funcret
 10900  004DE2                     __end_of_getRTC:
 10901                           	opt stack 0
 10902                           tblptru	equ	0xFF8
 10903                           tblptrh	equ	0xFF7
 10904                           tblptrl	equ	0xFF6
 10905                           tablat	equ	0xFF5
 10906                           prodh	equ	0xFF4
 10907                           prodl	equ	0xFF3
 10908                           intcon	equ	0xFF2
 10909                           intcon2	equ	0xFF1
 10910                           intcon3	equ	0xFF0
 10911                           postinc0	equ	0xFEE
 10912                           wreg	equ	0xFE8
 10913                           postdec1	equ	0xFE5
 10914                           fsr1l	equ	0xFE1
 10915                           indf2	equ	0xFDF
 10916                           postinc2	equ	0xFDE
 10917                           postdec2	equ	0xFDD
 10918                           fsr2h	equ	0xFDA
 10919                           fsr2l	equ	0xFD9
 10920                           status	equ	0xFD8
 10921                           
 10922 ;; *************** function _I2C_Master_Write *****************
 10923 ;; Defined at:
 10924 ;;		line 49 in file "I2C.c"
 10925 ;; Parameters:    Size  Location     Type
 10926 ;;  d               2    1[BANK0 ] unsigned int 
 10927 ;; Auto vars:     Size  Location     Type
 10928 ;;		None
 10929 ;; Return value:  Size  Location     Type
 10930 ;;                  1    wreg      void 
 10931 ;; Registers used:
 10932 ;;		wreg, status,2, status,0, cstack
 10933 ;; Tracked objects:
 10934 ;;		On entry : 0/0
 10935 ;;		On exit  : 0/0
 10936 ;;		Unchanged: 0/0
 10937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10938 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10939 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10940 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10941 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10942 ;;Total ram usage:        2 bytes
 10943 ;; Hardware stack levels used:    1
 10944 ;; Hardware stack levels required when called:    8
 10945 ;; This function calls:
 10946 ;;		_I2C_Master_Wait
 10947 ;; This function is called by:
 10948 ;;		_loadRTC
 10949 ;;		_getRTC
 10950 ;; This function uses a non-reentrant model
 10951 ;;
 10952                           
 10953                           	psect	text31
 10954  005C48                     __ptext31:
 10955                           	opt stack 0
 10956  005C48                     _I2C_Master_Write:
 10957                           	opt stack 18
 10958                           
 10959                           ;I2C.c: 51: I2C_Master_Wait();
 10960                           
 10961                           ;incstack = 0
 10962  005C48  ECF5  F02D         	call	_I2C_Master_Wait	;wreg free
 10963                           
 10964                           ;I2C.c: 52: SSPBUF = d;
 10965  005C4C  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
 10966  005C50  0012               	return		;funcret
 10967  005C52                     __end_of_I2C_Master_Write:
 10968                           	opt stack 0
 10969                           tblptru	equ	0xFF8
 10970                           tblptrh	equ	0xFF7
 10971                           tblptrl	equ	0xFF6
 10972                           tablat	equ	0xFF5
 10973                           prodh	equ	0xFF4
 10974                           prodl	equ	0xFF3
 10975                           intcon	equ	0xFF2
 10976                           intcon2	equ	0xFF1
 10977                           intcon3	equ	0xFF0
 10978                           postinc0	equ	0xFEE
 10979                           wreg	equ	0xFE8
 10980                           postdec1	equ	0xFE5
 10981                           fsr1l	equ	0xFE1
 10982                           indf2	equ	0xFDF
 10983                           postinc2	equ	0xFDE
 10984                           postdec2	equ	0xFDD
 10985                           fsr2h	equ	0xFDA
 10986                           fsr2l	equ	0xFD9
 10987                           status	equ	0xFD8
 10988                           
 10989 ;; *************** function _I2C_Master_Stop *****************
 10990 ;; Defined at:
 10991 ;;		line 43 in file "I2C.c"
 10992 ;; Parameters:    Size  Location     Type
 10993 ;;		None
 10994 ;; Auto vars:     Size  Location     Type
 10995 ;;		None
 10996 ;; Return value:  Size  Location     Type
 10997 ;;                  1    wreg      void 
 10998 ;; Registers used:
 10999 ;;		wreg, status,2, status,0, cstack
 11000 ;; Tracked objects:
 11001 ;;		On entry : 0/0
 11002 ;;		On exit  : 0/0
 11003 ;;		Unchanged: 0/0
 11004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11005 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11006 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11007 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11008 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11009 ;;Total ram usage:        0 bytes
 11010 ;; Hardware stack levels used:    1
 11011 ;; Hardware stack levels required when called:    8
 11012 ;; This function calls:
 11013 ;;		_I2C_Master_Wait
 11014 ;; This function is called by:
 11015 ;;		_loadRTC
 11016 ;;		_getRTC
 11017 ;; This function uses a non-reentrant model
 11018 ;;
 11019                           
 11020                           	psect	text32
 11021  005C64                     __ptext32:
 11022                           	opt stack 0
 11023  005C64                     _I2C_Master_Stop:
 11024                           	opt stack 18
 11025                           
 11026                           ;I2C.c: 45: I2C_Master_Wait();
 11027                           
 11028                           ;incstack = 0
 11029  005C64  ECF5  F02D         	call	_I2C_Master_Wait	;wreg free
 11030                           
 11031                           ;I2C.c: 46: PEN = 1;
 11032  005C68  84C5               	bsf	4037,2,c	;volatile
 11033  005C6A  0012               	return		;funcret
 11034  005C6C                     __end_of_I2C_Master_Stop:
 11035                           	opt stack 0
 11036                           tblptru	equ	0xFF8
 11037                           tblptrh	equ	0xFF7
 11038                           tblptrl	equ	0xFF6
 11039                           tablat	equ	0xFF5
 11040                           prodh	equ	0xFF4
 11041                           prodl	equ	0xFF3
 11042                           intcon	equ	0xFF2
 11043                           intcon2	equ	0xFF1
 11044                           intcon3	equ	0xFF0
 11045                           postinc0	equ	0xFEE
 11046                           wreg	equ	0xFE8
 11047                           postdec1	equ	0xFE5
 11048                           fsr1l	equ	0xFE1
 11049                           indf2	equ	0xFDF
 11050                           postinc2	equ	0xFDE
 11051                           postdec2	equ	0xFDD
 11052                           fsr2h	equ	0xFDA
 11053                           fsr2l	equ	0xFD9
 11054                           status	equ	0xFD8
 11055                           
 11056 ;; *************** function _I2C_Master_Start *****************
 11057 ;; Defined at:
 11058 ;;		line 31 in file "I2C.c"
 11059 ;; Parameters:    Size  Location     Type
 11060 ;;		None
 11061 ;; Auto vars:     Size  Location     Type
 11062 ;;		None
 11063 ;; Return value:  Size  Location     Type
 11064 ;;                  1    wreg      void 
 11065 ;; Registers used:
 11066 ;;		wreg, status,2, status,0, cstack
 11067 ;; Tracked objects:
 11068 ;;		On entry : 0/0
 11069 ;;		On exit  : 0/0
 11070 ;;		Unchanged: 0/0
 11071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11072 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11073 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11074 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11075 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11076 ;;Total ram usage:        0 bytes
 11077 ;; Hardware stack levels used:    1
 11078 ;; Hardware stack levels required when called:    8
 11079 ;; This function calls:
 11080 ;;		_I2C_Master_Wait
 11081 ;; This function is called by:
 11082 ;;		_loadRTC
 11083 ;;		_getRTC
 11084 ;; This function uses a non-reentrant model
 11085 ;;
 11086                           
 11087                           	psect	text33
 11088  005C6C                     __ptext33:
 11089                           	opt stack 0
 11090  005C6C                     _I2C_Master_Start:
 11091                           	opt stack 18
 11092                           
 11093                           ;I2C.c: 33: I2C_Master_Wait();
 11094                           
 11095                           ;incstack = 0
 11096  005C6C  ECF5  F02D         	call	_I2C_Master_Wait	;wreg free
 11097                           
 11098                           ;I2C.c: 34: SEN = 1;
 11099  005C70  80C5               	bsf	4037,0,c	;volatile
 11100  005C72  0012               	return		;funcret
 11101  005C74                     __end_of_I2C_Master_Start:
 11102                           	opt stack 0
 11103                           tblptru	equ	0xFF8
 11104                           tblptrh	equ	0xFF7
 11105                           tblptrl	equ	0xFF6
 11106                           tablat	equ	0xFF5
 11107                           prodh	equ	0xFF4
 11108                           prodl	equ	0xFF3
 11109                           intcon	equ	0xFF2
 11110                           intcon2	equ	0xFF1
 11111                           intcon3	equ	0xFF0
 11112                           postinc0	equ	0xFEE
 11113                           wreg	equ	0xFE8
 11114                           postdec1	equ	0xFE5
 11115                           fsr1l	equ	0xFE1
 11116                           indf2	equ	0xFDF
 11117                           postinc2	equ	0xFDE
 11118                           postdec2	equ	0xFDD
 11119                           fsr2h	equ	0xFDA
 11120                           fsr2l	equ	0xFD9
 11121                           status	equ	0xFD8
 11122                           
 11123 ;; *************** function _I2C_Master_Read *****************
 11124 ;; Defined at:
 11125 ;;		line 55 in file "I2C.c"
 11126 ;; Parameters:    Size  Location     Type
 11127 ;;  a               1    wreg     unsigned char 
 11128 ;; Auto vars:     Size  Location     Type
 11129 ;;  a               1    1[BANK0 ] unsigned char 
 11130 ;;  temp            1    2[BANK0 ] unsigned char 
 11131 ;; Return value:  Size  Location     Type
 11132 ;;                  1    wreg      unsigned char 
 11133 ;; Registers used:
 11134 ;;		wreg, status,2, status,0, cstack
 11135 ;; Tracked objects:
 11136 ;;		On entry : 0/0
 11137 ;;		On exit  : 0/0
 11138 ;;		Unchanged: 0/0
 11139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11140 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11141 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11142 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11143 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11144 ;;Total ram usage:        2 bytes
 11145 ;; Hardware stack levels used:    1
 11146 ;; Hardware stack levels required when called:    8
 11147 ;; This function calls:
 11148 ;;		_I2C_Master_Wait
 11149 ;; This function is called by:
 11150 ;;		_getRTC
 11151 ;; This function uses a non-reentrant model
 11152 ;;
 11153                           
 11154                           	psect	text34
 11155  00596E                     __ptext34:
 11156                           	opt stack 0
 11157  00596E                     _I2C_Master_Read:
 11158                           	opt stack 18
 11159                           
 11160                           ;incstack = 0
 11161                           ;I2C_Master_Read@a stored from wreg
 11162  00596E  0100               	movlb	0	; () banked
 11163  005970  6F81               	movwf	I2C_Master_Read@a& (0+255),b
 11164                           
 11165                           ;I2C.c: 57: unsigned char temp;
 11166                           ;I2C.c: 58: I2C_Master_Wait();
 11167  005972  ECF5  F02D         	call	_I2C_Master_Wait	;wreg free
 11168                           
 11169                           ;I2C.c: 59: RCEN = 1;
 11170  005976  86C5               	bsf	4037,3,c	;volatile
 11171                           
 11172                           ;I2C.c: 60: I2C_Master_Wait();
 11173  005978  ECF5  F02D         	call	_I2C_Master_Wait	;wreg free
 11174                           
 11175                           ;I2C.c: 61: temp = SSPBUF;
 11176  00597C  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
 11177                           
 11178                           ;I2C.c: 62: I2C_Master_Wait();
 11179  005980  ECF5  F02D         	call	_I2C_Master_Wait	;wreg free
 11180                           
 11181                           ;I2C.c: 63: ACKDT = (a)?0:1;
 11182  005984  0100               	movlb	0	; () banked
 11183  005986  5181               	movf	I2C_Master_Read@a& (0+255),w,b
 11184  005988  0100               	movlb	0	; () banked
 11185  00598A  A4D8               	btfss	status,2,c
 11186  00598C  D002               	goto	u4960
 11187  00598E  8AC5               	bsf	4037,5,c	;volatile
 11188  005990  D001               	goto	l6536
 11189  005992                     u4960:
 11190  005992  9AC5               	bcf	4037,5,c	;volatile
 11191  005994                     l6536:
 11192                           
 11193                           ;I2C.c: 64: ACKEN = 1;
 11194  005994  88C5               	bsf	4037,4,c	;volatile
 11195                           
 11196                           ;I2C.c: 65: return temp;
 11197  005996  0100               	movlb	0	; () banked
 11198  005998  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
 11199  00599A  0012               	return	
 11200  00599C                     __end_of_I2C_Master_Read:
 11201                           	opt stack 0
 11202                           tblptru	equ	0xFF8
 11203                           tblptrh	equ	0xFF7
 11204                           tblptrl	equ	0xFF6
 11205                           tablat	equ	0xFF5
 11206                           prodh	equ	0xFF4
 11207                           prodl	equ	0xFF3
 11208                           intcon	equ	0xFF2
 11209                           intcon2	equ	0xFF1
 11210                           intcon3	equ	0xFF0
 11211                           postinc0	equ	0xFEE
 11212                           wreg	equ	0xFE8
 11213                           postdec1	equ	0xFE5
 11214                           fsr1l	equ	0xFE1
 11215                           indf2	equ	0xFDF
 11216                           postinc2	equ	0xFDE
 11217                           postdec2	equ	0xFDD
 11218                           fsr2h	equ	0xFDA
 11219                           fsr2l	equ	0xFD9
 11220                           status	equ	0xFD8
 11221                           
 11222 ;; *************** function _I2C_Master_Wait *****************
 11223 ;; Defined at:
 11224 ;;		line 26 in file "I2C.c"
 11225 ;; Parameters:    Size  Location     Type
 11226 ;;		None
 11227 ;; Auto vars:     Size  Location     Type
 11228 ;;		None
 11229 ;; Return value:  Size  Location     Type
 11230 ;;                  1    wreg      void 
 11231 ;; Registers used:
 11232 ;;		wreg, status,2, status,0
 11233 ;; Tracked objects:
 11234 ;;		On entry : 0/0
 11235 ;;		On exit  : 0/0
 11236 ;;		Unchanged: 0/0
 11237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11238 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11239 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11240 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11241 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11242 ;;Total ram usage:        1 bytes
 11243 ;; Hardware stack levels used:    1
 11244 ;; Hardware stack levels required when called:    7
 11245 ;; This function calls:
 11246 ;;		Nothing
 11247 ;; This function is called by:
 11248 ;;		_I2C_Master_Start
 11249 ;;		_I2C_Master_Stop
 11250 ;;		_I2C_Master_Write
 11251 ;;		_I2C_Master_Read
 11252 ;;		_I2C_Master_RepeatedStart
 11253 ;; This function uses a non-reentrant model
 11254 ;;
 11255                           
 11256                           	psect	text35
 11257  005BEA                     __ptext35:
 11258                           	opt stack 0
 11259  005BEA                     _I2C_Master_Wait:
 11260                           	opt stack 18
 11261  005BEA                     l71:
 11262  005BEA  B4C7               	btfsc	4039,2,c	;volatile
 11263  005BEC  D7FE               	goto	l71
 11264  005BEE  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
 11265  005BF2  0E1F               	movlw	31
 11266  005BF4  0100               	movlb	0	; () banked
 11267  005BF6  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
 11268  005BF8  B4D8               	btfsc	status,2,c
 11269  005BFA  0012               	return	
 11270  005BFC  D7F6               	goto	l71
 11271  005BFE                     __end_of_I2C_Master_Wait:
 11272                           	opt stack 0
 11273                           tblptru	equ	0xFF8
 11274                           tblptrh	equ	0xFF7
 11275                           tblptrl	equ	0xFF6
 11276                           tablat	equ	0xFF5
 11277                           prodh	equ	0xFF4
 11278                           prodl	equ	0xFF3
 11279                           intcon	equ	0xFF2
 11280                           intcon2	equ	0xFF1
 11281                           intcon3	equ	0xFF0
 11282                           postinc0	equ	0xFEE
 11283                           wreg	equ	0xFE8
 11284                           postdec1	equ	0xFE5
 11285                           fsr1l	equ	0xFE1
 11286                           indf2	equ	0xFDF
 11287                           postinc2	equ	0xFDE
 11288                           postdec2	equ	0xFDD
 11289                           fsr2h	equ	0xFDA
 11290                           fsr2l	equ	0xFD9
 11291                           status	equ	0xFD8
 11292                           
 11293 ;; *************** function _change_state_to_menu_22 *****************
 11294 ;; Defined at:
 11295 ;;		line 501 in file "UI.c"
 11296 ;; Parameters:    Size  Location     Type
 11297 ;;		None
 11298 ;; Auto vars:     Size  Location     Type
 11299 ;;		None
 11300 ;; Return value:  Size  Location     Type
 11301 ;;                  1    wreg      void 
 11302 ;; Registers used:
 11303 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11304 ;; Tracked objects:
 11305 ;;		On entry : 0/0
 11306 ;;		On exit  : 0/0
 11307 ;;		Unchanged: 0/0
 11308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11309 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11310 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11311 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11312 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11313 ;;Total ram usage:        0 bytes
 11314 ;; Hardware stack levels used:    1
 11315 ;; Hardware stack levels required when called:   10
 11316 ;; This function calls:
 11317 ;;		_lcdInst
 11318 ;;		_printf
 11319 ;; This function is called by:
 11320 ;;		_UI
 11321 ;; This function uses a non-reentrant model
 11322 ;;
 11323                           
 11324                           	psect	text36
 11325  00564E                     __ptext36:
 11326                           	opt stack 0
 11327  00564E                     _change_state_to_menu_22:
 11328                           	opt stack 19
 11329                           
 11330                           ;UI.c: 502: cur_state = 22;
 11331                           
 11332                           ; BSR set to: 0
 11333                           ;incstack = 0
 11334  00564E  0E00               	movlw	0
 11335  005650  0100               	movlb	0	; () banked
 11336  005652  6FE7               	movwf	(_cur_state+1)& (0+255),b
 11337  005654  0E16               	movlw	22
 11338  005656  6FE6               	movwf	_cur_state& (0+255),b
 11339                           
 11340                           ; BSR set to: 0
 11341                           ;UI.c: 504: lcdInst(0b10000000);;
 11342  005658  0E80               	movlw	128
 11343  00565A  EC10  F02E         	call	_lcdInst
 11344                           
 11345                           ;UI.c: 505: printf("2. SORT        <");
 11346  00565E  0ED8               	movlw	low STR_34
 11347  005660  0100               	movlb	0	; () banked
 11348  005662  6F8E               	movwf	printf@f& (0+255),b
 11349  005664  0EFD               	movlw	high STR_34
 11350  005666  0100               	movlb	0	; () banked
 11351  005668  6F8F               	movwf	(printf@f+1)& (0+255),b
 11352  00566A  EC16  F00E         	call	_printf	;wreg free
 11353                           
 11354                           ;UI.c: 506: lcdInst(0b11000000);;
 11355  00566E  0EC0               	movlw	192
 11356  005670  EC10  F02E         	call	_lcdInst
 11357                           
 11358                           ;UI.c: 507: printf("3. LOGS         ");
 11359  005674  0E1D               	movlw	low STR_36
 11360  005676  0100               	movlb	0	; () banked
 11361  005678  6F8E               	movwf	printf@f& (0+255),b
 11362  00567A  0EFD               	movlw	high STR_36
 11363  00567C  0100               	movlb	0	; () banked
 11364  00567E  6F8F               	movwf	(printf@f+1)& (0+255),b
 11365  005680  EC16  F00E         	call	_printf	;wreg free
 11366  005684  0012               	return		;funcret
 11367  005686                     __end_of_change_state_to_menu_22:
 11368                           	opt stack 0
 11369                           tblptru	equ	0xFF8
 11370                           tblptrh	equ	0xFF7
 11371                           tblptrl	equ	0xFF6
 11372                           tablat	equ	0xFF5
 11373                           prodh	equ	0xFF4
 11374                           prodl	equ	0xFF3
 11375                           intcon	equ	0xFF2
 11376                           intcon2	equ	0xFF1
 11377                           intcon3	equ	0xFF0
 11378                           postinc0	equ	0xFEE
 11379                           wreg	equ	0xFE8
 11380                           postdec1	equ	0xFE5
 11381                           fsr1l	equ	0xFE1
 11382                           indf2	equ	0xFDF
 11383                           postinc2	equ	0xFDE
 11384                           postdec2	equ	0xFDD
 11385                           fsr2h	equ	0xFDA
 11386                           fsr2l	equ	0xFD9
 11387                           status	equ	0xFD8
 11388                           
 11389 ;; *************** function _change_state_to_menu_12 *****************
 11390 ;; Defined at:
 11391 ;;		line 493 in file "UI.c"
 11392 ;; Parameters:    Size  Location     Type
 11393 ;;		None
 11394 ;; Auto vars:     Size  Location     Type
 11395 ;;		None
 11396 ;; Return value:  Size  Location     Type
 11397 ;;                  1    wreg      void 
 11398 ;; Registers used:
 11399 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11400 ;; Tracked objects:
 11401 ;;		On entry : 0/0
 11402 ;;		On exit  : 0/0
 11403 ;;		Unchanged: 0/0
 11404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11405 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11406 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11407 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11408 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11409 ;;Total ram usage:        0 bytes
 11410 ;; Hardware stack levels used:    1
 11411 ;; Hardware stack levels required when called:   10
 11412 ;; This function calls:
 11413 ;;		_lcdInst
 11414 ;;		_printf
 11415 ;; This function is called by:
 11416 ;;		_UI
 11417 ;; This function uses a non-reentrant model
 11418 ;;
 11419                           
 11420                           	psect	text37
 11421  005686                     __ptext37:
 11422                           	opt stack 0
 11423  005686                     _change_state_to_menu_12:
 11424                           	opt stack 19
 11425                           
 11426                           ;UI.c: 494: cur_state = 12;
 11427                           
 11428                           ;incstack = 0
 11429  005686  0E00               	movlw	0
 11430  005688  0100               	movlb	0	; () banked
 11431  00568A  6FE7               	movwf	(_cur_state+1)& (0+255),b
 11432  00568C  0E0C               	movlw	12
 11433  00568E  6FE6               	movwf	_cur_state& (0+255),b
 11434                           
 11435                           ; BSR set to: 0
 11436                           ;UI.c: 496: lcdInst(0b10000000);;
 11437  005690  0E80               	movlw	128
 11438  005692  EC10  F02E         	call	_lcdInst
 11439                           
 11440                           ;UI.c: 497: printf("1. DATE/TIME    ");
 11441  005696  0E3F               	movlw	low STR_33
 11442  005698  0100               	movlb	0	; () banked
 11443  00569A  6F8E               	movwf	printf@f& (0+255),b
 11444  00569C  0EFD               	movlw	high STR_33
 11445  00569E  0100               	movlb	0	; () banked
 11446  0056A0  6F8F               	movwf	(printf@f+1)& (0+255),b
 11447  0056A2  EC16  F00E         	call	_printf	;wreg free
 11448                           
 11449                           ;UI.c: 498: lcdInst(0b11000000);;
 11450  0056A6  0EC0               	movlw	192
 11451  0056A8  EC10  F02E         	call	_lcdInst
 11452                           
 11453                           ;UI.c: 499: printf("2. SORT        <");
 11454  0056AC  0ED8               	movlw	low STR_34
 11455  0056AE  0100               	movlb	0	; () banked
 11456  0056B0  6F8E               	movwf	printf@f& (0+255),b
 11457  0056B2  0EFD               	movlw	high STR_34
 11458  0056B4  0100               	movlb	0	; () banked
 11459  0056B6  6F8F               	movwf	(printf@f+1)& (0+255),b
 11460  0056B8  EC16  F00E         	call	_printf	;wreg free
 11461  0056BC  0012               	return		;funcret
 11462  0056BE                     __end_of_change_state_to_menu_12:
 11463                           	opt stack 0
 11464                           tblptru	equ	0xFF8
 11465                           tblptrh	equ	0xFF7
 11466                           tblptrl	equ	0xFF6
 11467                           tablat	equ	0xFF5
 11468                           prodh	equ	0xFF4
 11469                           prodl	equ	0xFF3
 11470                           intcon	equ	0xFF2
 11471                           intcon2	equ	0xFF1
 11472                           intcon3	equ	0xFF0
 11473                           postinc0	equ	0xFEE
 11474                           wreg	equ	0xFE8
 11475                           postdec1	equ	0xFE5
 11476                           fsr1l	equ	0xFE1
 11477                           indf2	equ	0xFDF
 11478                           postinc2	equ	0xFDE
 11479                           postdec2	equ	0xFDD
 11480                           fsr2h	equ	0xFDA
 11481                           fsr2l	equ	0xFD9
 11482                           status	equ	0xFD8
 11483                           
 11484 ;; *************** function ___awmod *****************
 11485 ;; Defined at:
 11486 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
 11487 ;; Parameters:    Size  Location     Type
 11488 ;;  dividend        2    0[BANK0 ] int 
 11489 ;;  divisor         2    2[BANK0 ] int 
 11490 ;; Auto vars:     Size  Location     Type
 11491 ;;  sign            1    5[BANK0 ] unsigned char 
 11492 ;;  counter         1    4[BANK0 ] unsigned char 
 11493 ;; Return value:  Size  Location     Type
 11494 ;;                  2    0[BANK0 ] int 
 11495 ;; Registers used:
 11496 ;;		wreg, status,2, status,0
 11497 ;; Tracked objects:
 11498 ;;		On entry : 0/0
 11499 ;;		On exit  : 0/0
 11500 ;;		Unchanged: 0/0
 11501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11502 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11503 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11504 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11505 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11506 ;;Total ram usage:        6 bytes
 11507 ;; Hardware stack levels used:    1
 11508 ;; Hardware stack levels required when called:    7
 11509 ;; This function calls:
 11510 ;;		Nothing
 11511 ;; This function is called by:
 11512 ;;		_UI
 11513 ;; This function uses a non-reentrant model
 11514 ;;
 11515                           
 11516                           	psect	text38
 11517  004C2E                     __ptext38:
 11518                           	opt stack 0
 11519  004C2E                     ___awmod:
 11520                           	opt stack 22
 11521                           
 11522                           ;incstack = 0
 11523  004C2E  0E00               	movlw	0
 11524  004C30  0100               	movlb	0	; () banked
 11525  004C32  6F85               	movwf	___awmod@sign& (0+255),b
 11526                           
 11527                           ; BSR set to: 0
 11528  004C34  0100               	movlb	0	; () banked
 11529  004C36  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
 11530  004C38  D008               	goto	l9182
 11531                           
 11532                           ; BSR set to: 0
 11533  004C3A  0100               	movlb	0	; () banked
 11534  004C3C  6D80               	negf	___awmod@dividend& (0+255),b
 11535  004C3E  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
 11536  004C40  B0D8               	btfsc	status,0,c
 11537  004C42  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
 11538                           
 11539                           ; BSR set to: 0
 11540  004C44  0E01               	movlw	1
 11541  004C46  0100               	movlb	0	; () banked
 11542  004C48  6F85               	movwf	___awmod@sign& (0+255),b
 11543  004C4A                     l9182:
 11544                           
 11545                           ; BSR set to: 0
 11546  004C4A  0100               	movlb	0	; () banked
 11547  004C4C  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
 11548  004C4E  D005               	goto	l9186
 11549                           
 11550                           ; BSR set to: 0
 11551  004C50  0100               	movlb	0	; () banked
 11552  004C52  6D82               	negf	___awmod@divisor& (0+255),b
 11553  004C54  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
 11554  004C56  B0D8               	btfsc	status,0,c
 11555  004C58  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
 11556  004C5A                     l9186:
 11557                           
 11558                           ; BSR set to: 0
 11559  004C5A  0100               	movlb	0	; () banked
 11560  004C5C  5182               	movf	___awmod@divisor& (0+255),w,b
 11561  004C5E  0100               	movlb	0	; () banked
 11562  004C60  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
 11563  004C62  B4D8               	btfsc	status,2,c
 11564  004C64  D026               	goto	l9202
 11565                           
 11566                           ; BSR set to: 0
 11567  004C66  0E01               	movlw	1
 11568  004C68  0100               	movlb	0	; () banked
 11569  004C6A  6F84               	movwf	___awmod@counter& (0+255),b
 11570  004C6C  D006               	goto	l9192
 11571  004C6E                     l9190:
 11572                           
 11573                           ; BSR set to: 0
 11574  004C6E  0100               	movlb	0	; () banked
 11575  004C70  90D8               	bcf	status,0,c
 11576  004C72  3782               	rlcf	___awmod@divisor& (0+255),f,b
 11577  004C74  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
 11578  004C76  0100               	movlb	0	; () banked
 11579  004C78  2B84               	incf	___awmod@counter& (0+255),f,b
 11580  004C7A                     l9192:
 11581                           
 11582                           ; BSR set to: 0
 11583  004C7A  0100               	movlb	0	; () banked
 11584  004C7C  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
 11585  004C7E  D7F7               	goto	l9190
 11586  004C80                     l9194:
 11587                           
 11588                           ; BSR set to: 0
 11589  004C80  0100               	movlb	0	; () banked
 11590  004C82  5182               	movf	___awmod@divisor& (0+255),w,b
 11591  004C84  0100               	movlb	0	; () banked
 11592  004C86  5D80               	subwf	___awmod@dividend& (0+255),w,b
 11593  004C88  0100               	movlb	0	; () banked
 11594  004C8A  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
 11595  004C8C  0100               	movlb	0	; () banked
 11596  004C8E  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
 11597  004C90  A0D8               	btfss	status,0,c
 11598  004C92  D008               	goto	l9198
 11599                           
 11600                           ; BSR set to: 0
 11601  004C94  0100               	movlb	0	; () banked
 11602  004C96  5182               	movf	___awmod@divisor& (0+255),w,b
 11603  004C98  0100               	movlb	0	; () banked
 11604  004C9A  5F80               	subwf	___awmod@dividend& (0+255),f,b
 11605  004C9C  0100               	movlb	0	; () banked
 11606  004C9E  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
 11607  004CA0  0100               	movlb	0	; () banked
 11608  004CA2  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
 11609  004CA4                     l9198:
 11610                           
 11611                           ; BSR set to: 0
 11612  004CA4  0100               	movlb	0	; () banked
 11613  004CA6  90D8               	bcf	status,0,c
 11614  004CA8  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
 11615  004CAA  3382               	rrcf	___awmod@divisor& (0+255),f,b
 11616                           
 11617                           ; BSR set to: 0
 11618  004CAC  0100               	movlb	0	; () banked
 11619  004CAE  2F84               	decfsz	___awmod@counter& (0+255),f,b
 11620  004CB0  D7E7               	goto	l9194
 11621  004CB2                     l9202:
 11622                           
 11623                           ; BSR set to: 0
 11624  004CB2  0100               	movlb	0	; () banked
 11625  004CB4  5185               	movf	___awmod@sign& (0+255),w,b
 11626  004CB6  0100               	movlb	0	; () banked
 11627  004CB8  B4D8               	btfsc	status,2,c
 11628  004CBA  D005               	goto	l9206
 11629                           
 11630                           ; BSR set to: 0
 11631  004CBC  0100               	movlb	0	; () banked
 11632  004CBE  6D80               	negf	___awmod@dividend& (0+255),b
 11633  004CC0  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
 11634  004CC2  B0D8               	btfsc	status,0,c
 11635  004CC4  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
 11636  004CC6                     l9206:
 11637                           
 11638                           ; BSR set to: 0
 11639  004CC6  C080  F080         	movff	___awmod@dividend,?___awmod
 11640  004CCA  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
 11641  004CCE  0012               	return	
 11642  004CD0                     __end_of___awmod:
 11643                           	opt stack 0
 11644                           tblptru	equ	0xFF8
 11645                           tblptrh	equ	0xFF7
 11646                           tblptrl	equ	0xFF6
 11647                           tablat	equ	0xFF5
 11648                           prodh	equ	0xFF4
 11649                           prodl	equ	0xFF3
 11650                           intcon	equ	0xFF2
 11651                           intcon2	equ	0xFF1
 11652                           intcon3	equ	0xFF0
 11653                           postinc0	equ	0xFEE
 11654                           wreg	equ	0xFE8
 11655                           postdec1	equ	0xFE5
 11656                           fsr1l	equ	0xFE1
 11657                           indf2	equ	0xFDF
 11658                           postinc2	equ	0xFDE
 11659                           postdec2	equ	0xFDD
 11660                           fsr2h	equ	0xFDA
 11661                           fsr2l	equ	0xFD9
 11662                           status	equ	0xFD8
 11663                           
 11664 ;; *************** function ___awdiv *****************
 11665 ;; Defined at:
 11666 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
 11667 ;; Parameters:    Size  Location     Type
 11668 ;;  dividend        2    6[BANK0 ] int 
 11669 ;;  divisor         2    8[BANK0 ] int 
 11670 ;; Auto vars:     Size  Location     Type
 11671 ;;  quotient        2   12[BANK0 ] int 
 11672 ;;  sign            1   11[BANK0 ] unsigned char 
 11673 ;;  counter         1   10[BANK0 ] unsigned char 
 11674 ;; Return value:  Size  Location     Type
 11675 ;;                  2    6[BANK0 ] int 
 11676 ;; Registers used:
 11677 ;;		wreg, status,2, status,0
 11678 ;; Tracked objects:
 11679 ;;		On entry : 0/0
 11680 ;;		On exit  : 0/0
 11681 ;;		Unchanged: 0/0
 11682 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11683 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11684 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11685 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11686 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11687 ;;Total ram usage:        8 bytes
 11688 ;; Hardware stack levels used:    1
 11689 ;; Hardware stack levels required when called:    7
 11690 ;; This function calls:
 11691 ;;		Nothing
 11692 ;; This function is called by:
 11693 ;;		_UI
 11694 ;;		_ID
 11695 ;; This function uses a non-reentrant model
 11696 ;;
 11697                           
 11698                           	psect	text39
 11699  004A0A                     __ptext39:
 11700                           	opt stack 0
 11701  004A0A                     ___awdiv:
 11702                           	opt stack 21
 11703                           
 11704                           ; BSR set to: 0
 11705                           ;incstack = 0
 11706  004A0A  0E00               	movlw	0
 11707  004A0C  0100               	movlb	0	; () banked
 11708  004A0E  6F8B               	movwf	___awdiv@sign& (0+255),b
 11709                           
 11710                           ; BSR set to: 0
 11711  004A10  0100               	movlb	0	; () banked
 11712  004A12  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 11713  004A14  D008               	goto	l7464
 11714                           
 11715                           ; BSR set to: 0
 11716  004A16  0100               	movlb	0	; () banked
 11717  004A18  6D88               	negf	___awdiv@divisor& (0+255),b
 11718  004A1A  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
 11719  004A1C  B0D8               	btfsc	status,0,c
 11720  004A1E  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
 11721                           
 11722                           ; BSR set to: 0
 11723  004A20  0E01               	movlw	1
 11724  004A22  0100               	movlb	0	; () banked
 11725  004A24  6F8B               	movwf	___awdiv@sign& (0+255),b
 11726  004A26                     l7464:
 11727                           
 11728                           ; BSR set to: 0
 11729  004A26  0100               	movlb	0	; () banked
 11730  004A28  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
 11731  004A2A  D008               	goto	l7470
 11732                           
 11733                           ; BSR set to: 0
 11734  004A2C  0100               	movlb	0	; () banked
 11735  004A2E  6D86               	negf	___awdiv@dividend& (0+255),b
 11736  004A30  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
 11737  004A32  B0D8               	btfsc	status,0,c
 11738  004A34  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
 11739                           
 11740                           ; BSR set to: 0
 11741  004A36  0E01               	movlw	1
 11742  004A38  0100               	movlb	0	; () banked
 11743  004A3A  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
 11744  004A3C                     l7470:
 11745                           
 11746                           ; BSR set to: 0
 11747  004A3C  0E00               	movlw	0
 11748  004A3E  0100               	movlb	0	; () banked
 11749  004A40  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
 11750  004A42  0E00               	movlw	0
 11751  004A44  6F8C               	movwf	___awdiv@quotient& (0+255),b
 11752                           
 11753                           ; BSR set to: 0
 11754  004A46  0100               	movlb	0	; () banked
 11755  004A48  5188               	movf	___awdiv@divisor& (0+255),w,b
 11756  004A4A  0100               	movlb	0	; () banked
 11757  004A4C  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
 11758  004A4E  B4D8               	btfsc	status,2,c
 11759  004A50  D02C               	goto	l7492
 11760                           
 11761                           ; BSR set to: 0
 11762  004A52  0E01               	movlw	1
 11763  004A54  0100               	movlb	0	; () banked
 11764  004A56  6F8A               	movwf	___awdiv@counter& (0+255),b
 11765  004A58  D006               	goto	l7478
 11766  004A5A                     l7476:
 11767                           
 11768                           ; BSR set to: 0
 11769  004A5A  0100               	movlb	0	; () banked
 11770  004A5C  90D8               	bcf	status,0,c
 11771  004A5E  3788               	rlcf	___awdiv@divisor& (0+255),f,b
 11772  004A60  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
 11773  004A62  0100               	movlb	0	; () banked
 11774  004A64  2B8A               	incf	___awdiv@counter& (0+255),f,b
 11775  004A66                     l7478:
 11776                           
 11777                           ; BSR set to: 0
 11778  004A66  0100               	movlb	0	; () banked
 11779  004A68  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 11780  004A6A  D7F7               	goto	l7476
 11781  004A6C                     l7480:
 11782                           
 11783                           ; BSR set to: 0
 11784  004A6C  0100               	movlb	0	; () banked
 11785  004A6E  90D8               	bcf	status,0,c
 11786  004A70  378C               	rlcf	___awdiv@quotient& (0+255),f,b
 11787  004A72  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
 11788                           
 11789                           ; BSR set to: 0
 11790  004A74  0100               	movlb	0	; () banked
 11791  004A76  5188               	movf	___awdiv@divisor& (0+255),w,b
 11792  004A78  0100               	movlb	0	; () banked
 11793  004A7A  5D86               	subwf	___awdiv@dividend& (0+255),w,b
 11794  004A7C  0100               	movlb	0	; () banked
 11795  004A7E  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
 11796  004A80  0100               	movlb	0	; () banked
 11797  004A82  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
 11798  004A84  A0D8               	btfss	status,0,c
 11799  004A86  D00A               	goto	l7488
 11800                           
 11801                           ; BSR set to: 0
 11802  004A88  0100               	movlb	0	; () banked
 11803  004A8A  5188               	movf	___awdiv@divisor& (0+255),w,b
 11804  004A8C  0100               	movlb	0	; () banked
 11805  004A8E  5F86               	subwf	___awdiv@dividend& (0+255),f,b
 11806  004A90  0100               	movlb	0	; () banked
 11807  004A92  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
 11808  004A94  0100               	movlb	0	; () banked
 11809  004A96  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
 11810                           
 11811                           ; BSR set to: 0
 11812  004A98  0100               	movlb	0	; () banked
 11813  004A9A  818C               	bsf	___awdiv@quotient& (0+255),0,b
 11814  004A9C                     l7488:
 11815                           
 11816                           ; BSR set to: 0
 11817  004A9C  0100               	movlb	0	; () banked
 11818  004A9E  90D8               	bcf	status,0,c
 11819  004AA0  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
 11820  004AA2  3388               	rrcf	___awdiv@divisor& (0+255),f,b
 11821                           
 11822                           ; BSR set to: 0
 11823  004AA4  0100               	movlb	0	; () banked
 11824  004AA6  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
 11825  004AA8  D7E1               	goto	l7480
 11826  004AAA                     l7492:
 11827                           
 11828                           ; BSR set to: 0
 11829  004AAA  0100               	movlb	0	; () banked
 11830  004AAC  518B               	movf	___awdiv@sign& (0+255),w,b
 11831  004AAE  0100               	movlb	0	; () banked
 11832  004AB0  B4D8               	btfsc	status,2,c
 11833  004AB2  D005               	goto	l7496
 11834                           
 11835                           ; BSR set to: 0
 11836  004AB4  0100               	movlb	0	; () banked
 11837  004AB6  6D8C               	negf	___awdiv@quotient& (0+255),b
 11838  004AB8  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
 11839  004ABA  B0D8               	btfsc	status,0,c
 11840  004ABC  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
 11841  004ABE                     l7496:
 11842                           
 11843                           ; BSR set to: 0
 11844  004ABE  C08C  F086         	movff	___awdiv@quotient,?___awdiv
 11845  004AC2  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
 11846  004AC6  0012               	return	
 11847  004AC8                     __end_of___awdiv:
 11848                           	opt stack 0
 11849                           tblptru	equ	0xFF8
 11850                           tblptrh	equ	0xFF7
 11851                           tblptrl	equ	0xFF6
 11852                           tablat	equ	0xFF5
 11853                           prodh	equ	0xFF4
 11854                           prodl	equ	0xFF3
 11855                           intcon	equ	0xFF2
 11856                           intcon2	equ	0xFF1
 11857                           intcon3	equ	0xFF0
 11858                           postinc0	equ	0xFEE
 11859                           wreg	equ	0xFE8
 11860                           postdec1	equ	0xFE5
 11861                           fsr1l	equ	0xFE1
 11862                           indf2	equ	0xFDF
 11863                           postinc2	equ	0xFDE
 11864                           postdec2	equ	0xFDD
 11865                           fsr2h	equ	0xFDA
 11866                           fsr2l	equ	0xFD9
 11867                           status	equ	0xFD8
 11868                           
 11869 ;; *************** function _Test *****************
 11870 ;; Defined at:
 11871 ;;		line 31 in file "Test.c"
 11872 ;; Parameters:    Size  Location     Type
 11873 ;;		None
 11874 ;; Auto vars:     Size  Location     Type
 11875 ;;		None
 11876 ;; Return value:  Size  Location     Type
 11877 ;;                  1    wreg      void 
 11878 ;; Registers used:
 11879 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11880 ;; Tracked objects:
 11881 ;;		On entry : 0/0
 11882 ;;		On exit  : 0/0
 11883 ;;		Unchanged: 0/0
 11884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11885 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11886 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11887 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11888 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11889 ;;Total ram usage:        2 bytes
 11890 ;; Hardware stack levels used:    1
 11891 ;; Hardware stack levels required when called:   11
 11892 ;; This function calls:
 11893 ;;		_BlockerTest
 11894 ;;		_BothServos
 11895 ;;		_PlatformTest
 11896 ;;		_PortTestDC
 11897 ;;		_PortTestPusher
 11898 ;;		_SpeedTest
 11899 ;;		_actuatorTest
 11900 ;;		_algorithmTest
 11901 ;;		_arm
 11902 ;;		_lcdInst
 11903 ;;		_printf
 11904 ;;		_sensorTest
 11905 ;; This function is called by:
 11906 ;;		_main
 11907 ;; This function uses a non-reentrant model
 11908 ;;
 11909                           
 11910                           	psect	text40
 11911  004312                     __ptext40:
 11912                           	opt stack 0
 11913  004312                     _Test:
 11914                           	opt stack 19
 11915                           
 11916                           ;Test.c: 33: while(machine_state == Testing_state){
 11917                           
 11918                           ; BSR set to: 0
 11919                           ;incstack = 0
 11920  004312  D07C               	goto	l9932
 11921  004314                     l9892:
 11922                           
 11923                           ;Test.c: 34: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 11924  004314  0E01               	movlw	1
 11925  004316  EC10  F02E         	call	_lcdInst
 11926  00431A  0E68               	movlw	104
 11927  00431C  0100               	movlb	0	; () banked
 11928  00431E  6FC6               	movwf	??_Test& (0+255),b
 11929  004320  0EE4               	movlw	228
 11930  004322                     u10467:
 11931  004322  2EE8               	decfsz	wreg,f,c
 11932  004324  D7FE               	bra	u10467
 11933  004326  2FC6               	decfsz	??_Test& (0+255),f,b
 11934  004328  D7FC               	bra	u10467
 11935  00432A  F000               	nop	
 11936  00432C  0E80               	movlw	128
 11937  00432E  EC10  F02E         	call	_lcdInst
 11938                           
 11939                           ;Test.c: 35: printf("2.SNR|4.HI|5.MED");
 11940  004332  0E73               	movlw	low STR_69
 11941  004334  0100               	movlb	0	; () banked
 11942  004336  6F8E               	movwf	printf@f& (0+255),b
 11943  004338  0EFC               	movlw	high STR_69
 11944  00433A  0100               	movlb	0	; () banked
 11945  00433C  6F8F               	movwf	(printf@f+1)& (0+255),b
 11946  00433E  EC16  F00E         	call	_printf	;wreg free
 11947                           
 11948                           ;Test.c: 36: lcdInst(0b11000000);;
 11949  004342  0EC0               	movlw	192
 11950  004344  EC10  F02E         	call	_lcdInst
 11951                           
 11952                           ;Test.c: 37: printf("B.PLA|8.SV|9.BLK");
 11953  004348  0E84               	movlw	low STR_70
 11954  00434A  0100               	movlb	0	; () banked
 11955  00434C  6F8E               	movwf	printf@f& (0+255),b
 11956  00434E  0EFC               	movlw	high STR_70
 11957  004350  0100               	movlb	0	; () banked
 11958  004352  6F8F               	movwf	(printf@f+1)& (0+255),b
 11959  004354  EC16  F00E         	call	_printf	;wreg free
 11960  004358                     l1236:
 11961  004358  A281               	btfss	3969,1,c	;volatile
 11962  00435A  D7FE               	goto	l1236
 11963                           
 11964                           ;Test.c: 39: var = PORTB >> 4;
 11965  00435C  CF81 F0C6          	movff	3969,??_Test	;volatile
 11966  004360  0100               	movlb	0	; () banked
 11967  004362  3BC6               	swapf	??_Test& (0+255),f,b
 11968  004364  0E0F               	movlw	15
 11969  004366  17C6               	andwf	??_Test& (0+255),f,b
 11970  004368  0100               	movlb	0	; () banked
 11971  00436A  51C6               	movf	??_Test& (0+255),w,b
 11972  00436C  0101               	movlb	1	; () banked
 11973  00436E  6F47               	movwf	_var& (0+255),b
 11974  004370  6B48               	clrf	(_var+1)& (0+255),b
 11975                           
 11976                           ; BSR set to: 1
 11977                           ;Test.c: 40: var++;
 11978  004372  0101               	movlb	1	; () banked
 11979  004374  4B47               	infsnz	_var& (0+255),f,b
 11980  004376  2B48               	incf	(_var+1)& (0+255),f,b
 11981  004378                     l1239:
 11982  004378  A281               	btfss	3969,1,c	;volatile
 11983  00437A  D01F               	goto	l9930
 11984  00437C  D7FD               	goto	l1239
 11985  00437E                     l9908:
 11986                           
 11987                           ;Test.c: 44: algorithmTest();
 11988  00437E  EC70  F023         	call	_algorithmTest	;wreg free
 11989                           
 11990                           ;Test.c: 45: break;
 11991  004382  D044               	goto	l9932
 11992  004384                     l9910:
 11993                           
 11994                           ;Test.c: 47: sensorTest();
 11995  004384  EC6B  F015         	call	_sensorTest	;wreg free
 11996                           
 11997                           ;Test.c: 48: break;
 11998  004388  D041               	goto	l9932
 11999  00438A                     l9912:
 12000                           
 12001                           ;Test.c: 50: actuatorTest();
 12002  00438A  EC6D  F004         	call	_actuatorTest	;wreg free
 12003                           
 12004                           ;Test.c: 51: break;
 12005  00438E  D03E               	goto	l9932
 12006  004390                     l9914:
 12007                           
 12008                           ;Test.c: 53: arm();
 12009  004390  EC0C  F022         	call	_arm	;wreg free
 12010                           
 12011                           ;Test.c: 54: break;
 12012  004394  D03B               	goto	l9932
 12013  004396                     l9916:
 12014                           
 12015                           ;Test.c: 56: PortTestDC();
 12016  004396  EC87  F029         	call	_PortTestDC	;wreg free
 12017                           
 12018                           ;Test.c: 57: break;
 12019  00439A  D038               	goto	l9932
 12020  00439C                     l9918:
 12021                           
 12022                           ;Test.c: 59: SpeedTest();
 12023  00439C  ECF1  F026         	call	_SpeedTest	;wreg free
 12024                           
 12025                           ;Test.c: 60: break;
 12026  0043A0  D035               	goto	l9932
 12027  0043A2                     l9920:
 12028                           
 12029                           ;Test.c: 62: PortTestPusher();
 12030  0043A2  EC59  F029         	call	_PortTestPusher	;wreg free
 12031                           
 12032                           ;Test.c: 63: break;
 12033  0043A6  D032               	goto	l9932
 12034  0043A8                     l9922:
 12035                           
 12036                           ;Test.c: 65: PlatformTest();
 12037  0043A8  ECE0  F013         	call	_PlatformTest	;wreg free
 12038                           
 12039                           ;Test.c: 66: break;
 12040  0043AC  D02F               	goto	l9932
 12041  0043AE                     l9924:
 12042                           
 12043                           ;Test.c: 68: BothServos();
 12044  0043AE  EC32  F010         	call	_BothServos	;wreg free
 12045                           
 12046                           ;Test.c: 69: break;
 12047  0043B2  D02C               	goto	l9932
 12048  0043B4                     l9926:
 12049                           
 12050                           ;Test.c: 71: BlockerTest();
 12051  0043B4  ECEB  F01E         	call	_BlockerTest	;wreg free
 12052                           
 12053                           ;Test.c: 75: }
 12054                           
 12055                           ;Test.c: 74: break;
 12056                           
 12057                           ;Test.c: 73: default:
 12058                           
 12059                           ;Test.c: 72: break;
 12060  0043B8  D029               	goto	l9932
 12061  0043BA                     l9930:
 12062  0043BA  C147  F0C6         	movff	_var,??_Test
 12063  0043BE  C148  F0C7         	movff	_var+1,??_Test+1
 12064                           
 12065                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12066                           ; Switch size 1, requested type "space"
 12067                           ; Number of cases is 1, Range of values is 0 to 0
 12068                           ; switch strategies available:
 12069                           ; Name         Instructions Cycles
 12070                           ; simple_byte            4     3 (average)
 12071                           ;	Chosen strategy is simple_byte
 12072  0043C2  0100               	movlb	0	; () banked
 12073  0043C4  51C7               	movf	(??_Test+1)& (0+255),w,b
 12074  0043C6  0A00               	xorlw	0	; case 0
 12075  0043C8  A4D8               	btfss	status,2,c
 12076  0043CA  D020               	goto	l9932
 12077                           
 12078                           ; BSR set to: 0
 12079                           ; Switch size 1, requested type "space"
 12080                           ; Number of cases is 10, Range of values is 1 to 11
 12081                           ; switch strategies available:
 12082                           ; Name         Instructions Cycles
 12083                           ; simple_byte           31    16 (average)
 12084                           ;	Chosen strategy is simple_byte
 12085  0043CC  0100               	movlb	0	; () banked
 12086  0043CE  51C6               	movf	??_Test& (0+255),w,b
 12087  0043D0  0A01               	xorlw	1	; case 1
 12088  0043D2  B4D8               	btfsc	status,2,c
 12089  0043D4  D7D4               	goto	l9908
 12090  0043D6  0A03               	xorlw	3	; case 2
 12091  0043D8  B4D8               	btfsc	status,2,c
 12092  0043DA  D7D4               	goto	l9910
 12093  0043DC  0A01               	xorlw	1	; case 3
 12094  0043DE  B4D8               	btfsc	status,2,c
 12095  0043E0  D7D4               	goto	l9912
 12096  0043E2  0A07               	xorlw	7	; case 4
 12097  0043E4  B4D8               	btfsc	status,2,c
 12098  0043E6  D7D4               	goto	l9914
 12099  0043E8  0A01               	xorlw	1	; case 5
 12100  0043EA  B4D8               	btfsc	status,2,c
 12101  0043EC  D7D4               	goto	l9916
 12102  0043EE  0A03               	xorlw	3	; case 6
 12103  0043F0  B4D8               	btfsc	status,2,c
 12104  0043F2  D7D4               	goto	l9918
 12105  0043F4  0A01               	xorlw	1	; case 7
 12106  0043F6  B4D8               	btfsc	status,2,c
 12107  0043F8  D7D4               	goto	l9920
 12108  0043FA  0A0F               	xorlw	15	; case 8
 12109  0043FC  B4D8               	btfsc	status,2,c
 12110  0043FE  D7D4               	goto	l9922
 12111  004400  0A02               	xorlw	2	; case 10
 12112  004402  B4D8               	btfsc	status,2,c
 12113  004404  D7D4               	goto	l9924
 12114  004406  0A01               	xorlw	1	; case 11
 12115  004408  B4D8               	btfsc	status,2,c
 12116  00440A  D7D4               	goto	l9926
 12117  00440C                     l9932:
 12118  00440C  0E03               	movlw	3
 12119  00440E  0100               	movlb	0	; () banked
 12120  004410  19FC               	xorwf	_machine_state& (0+255),w,b
 12121  004412  A4D8               	btfss	status,2,c
 12122  004414  0012               	return	
 12123  004416  D77E               	goto	l9892
 12124  004418                     __end_of_Test:
 12125                           	opt stack 0
 12126                           tblptru	equ	0xFF8
 12127                           tblptrh	equ	0xFF7
 12128                           tblptrl	equ	0xFF6
 12129                           tablat	equ	0xFF5
 12130                           prodh	equ	0xFF4
 12131                           prodl	equ	0xFF3
 12132                           intcon	equ	0xFF2
 12133                           intcon2	equ	0xFF1
 12134                           intcon3	equ	0xFF0
 12135                           postinc0	equ	0xFEE
 12136                           wreg	equ	0xFE8
 12137                           postdec1	equ	0xFE5
 12138                           fsr1l	equ	0xFE1
 12139                           indf2	equ	0xFDF
 12140                           postinc2	equ	0xFDE
 12141                           postdec2	equ	0xFDD
 12142                           fsr2h	equ	0xFDA
 12143                           fsr2l	equ	0xFD9
 12144                           status	equ	0xFD8
 12145                           
 12146 ;; *************** function _sensorTest *****************
 12147 ;; Defined at:
 12148 ;;		line 123 in file "Test.c"
 12149 ;; Parameters:    Size  Location     Type
 12150 ;;		None
 12151 ;; Auto vars:     Size  Location     Type
 12152 ;;  res             2   45[BANK0 ] int 
 12153 ;; Return value:  Size  Location     Type
 12154 ;;                  1    wreg      void 
 12155 ;; Registers used:
 12156 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12157 ;; Tracked objects:
 12158 ;;		On entry : 0/0
 12159 ;;		On exit  : 0/0
 12160 ;;		Unchanged: 0/0
 12161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12162 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12163 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12164 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12165 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12166 ;;Total ram usage:        4 bytes
 12167 ;; Hardware stack levels used:    1
 12168 ;; Hardware stack levels required when called:   10
 12169 ;; This function calls:
 12170 ;;		_lcdInst
 12171 ;;		_printf
 12172 ;;		_readADC
 12173 ;;		_readMAG
 12174 ;; This function is called by:
 12175 ;;		_Test
 12176 ;; This function uses a non-reentrant model
 12177 ;;
 12178                           
 12179                           	psect	text41
 12180  002AD6                     __ptext41:
 12181                           	opt stack 0
 12182  002AD6                     _sensorTest:
 12183                           	opt stack 19
 12184                           
 12185                           ;Test.c: 125: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12186                           
 12187                           ; BSR set to: 0
 12188                           ;incstack = 0
 12189  002AD6  0E01               	movlw	1
 12190  002AD8  EC10  F02E         	call	_lcdInst
 12191  002ADC  0E68               	movlw	104
 12192  002ADE  0100               	movlb	0	; () banked
 12193  002AE0  6FAB               	movwf	??_sensorTest& (0+255),b
 12194  002AE2  0EE4               	movlw	228
 12195  002AE4                     u10477:
 12196  002AE4  2EE8               	decfsz	wreg,f,c
 12197  002AE6  D7FE               	bra	u10477
 12198  002AE8  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12199  002AEA  D7FC               	bra	u10477
 12200  002AEC  F000               	nop	
 12201  002AEE  0E80               	movlw	128
 12202  002AF0  EC10  F02E         	call	_lcdInst
 12203                           
 12204                           ;Test.c: 126: printf("SENSORS");
 12205  002AF4  0EAE               	movlw	low STR_78
 12206  002AF6  0100               	movlb	0	; () banked
 12207  002AF8  6F8E               	movwf	printf@f& (0+255),b
 12208  002AFA  0EFF               	movlw	high STR_78
 12209  002AFC  0100               	movlb	0	; () banked
 12210  002AFE  6F8F               	movwf	(printf@f+1)& (0+255),b
 12211  002B00  EC16  F00E         	call	_printf	;wreg free
 12212                           
 12213                           ;Test.c: 127: lcdInst(0b11000000);;
 12214  002B04  0EC0               	movlw	192
 12215  002B06  EC10  F02E         	call	_lcdInst
 12216                           
 12217                           ;Test.c: 128: printf("PUSH TO START");
 12218  002B0A  0E2E               	movlw	low STR_72
 12219  002B0C  0100               	movlb	0	; () banked
 12220  002B0E  6F8E               	movwf	printf@f& (0+255),b
 12221  002B10  0EFF               	movlw	high STR_72
 12222  002B12  0100               	movlb	0	; () banked
 12223  002B14  6F8F               	movwf	(printf@f+1)& (0+255),b
 12224  002B16  EC16  F00E         	call	_printf	;wreg free
 12225                           
 12226                           ;Test.c: 129: _delay((unsigned long)((100)*(32000000/4000.0)));
 12227  002B1A  0E05               	movlw	5
 12228  002B1C  0100               	movlb	0	; () banked
 12229  002B1E  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 12230  002B20  0E0F               	movlw	15
 12231  002B22  0100               	movlb	0	; () banked
 12232  002B24  6FAB               	movwf	??_sensorTest& (0+255),b
 12233  002B26  0EF1               	movlw	241
 12234  002B28                     u10487:
 12235  002B28  2EE8               	decfsz	wreg,f,c
 12236  002B2A  D7FE               	bra	u10487
 12237  002B2C  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12238  002B2E  D7FC               	bra	u10487
 12239  002B30  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 12240  002B32  D7FA               	bra	u10487
 12241  002B34                     l1268:
 12242  002B34  A281               	btfss	3969,1,c	;volatile
 12243  002B36  D7FE               	goto	l1268
 12244  002B38                     l1271:
 12245  002B38  B281               	btfsc	3969,1,c	;volatile
 12246  002B3A  D7FE               	goto	l1271
 12247                           
 12248                           ;Test.c: 132: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12249  002B3C  0E01               	movlw	1
 12250  002B3E  EC10  F02E         	call	_lcdInst
 12251  002B42  0E68               	movlw	104
 12252  002B44  0100               	movlb	0	; () banked
 12253  002B46  6FAB               	movwf	??_sensorTest& (0+255),b
 12254  002B48  0EE4               	movlw	228
 12255  002B4A                     u10497:
 12256  002B4A  2EE8               	decfsz	wreg,f,c
 12257  002B4C  D7FE               	bra	u10497
 12258  002B4E  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12259  002B50  D7FC               	bra	u10497
 12260  002B52  F000               	nop	
 12261  002B54  0E80               	movlw	128
 12262  002B56  EC10  F02E         	call	_lcdInst
 12263                           
 12264                           ;Test.c: 137: printf("TST: IR SNSR");
 12265  002B5A  0E58               	movlw	low STR_80
 12266  002B5C  0100               	movlb	0	; () banked
 12267  002B5E  6F8E               	movwf	printf@f& (0+255),b
 12268  002B60  0EFF               	movlw	high STR_80
 12269  002B62  0100               	movlb	0	; () banked
 12270  002B64  6F8F               	movwf	(printf@f+1)& (0+255),b
 12271  002B66  EC16  F00E         	call	_printf	;wreg free
 12272                           
 12273                           ;Test.c: 138: _delay((unsigned long)((100)*(32000000/4000.0)));
 12274  002B6A  0E05               	movlw	5
 12275  002B6C  0100               	movlb	0	; () banked
 12276  002B6E  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 12277  002B70  0E0F               	movlw	15
 12278  002B72  0100               	movlb	0	; () banked
 12279  002B74  6FAB               	movwf	??_sensorTest& (0+255),b
 12280  002B76  0EF1               	movlw	241
 12281  002B78                     u10507:
 12282  002B78  2EE8               	decfsz	wreg,f,c
 12283  002B7A  D7FE               	bra	u10507
 12284  002B7C  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12285  002B7E  D7FC               	bra	u10507
 12286  002B80  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 12287  002B82  D7FA               	bra	u10507
 12288                           
 12289                           ;Test.c: 139: LATCbits.LATC5 = 1;
 12290  002B84  8A8B               	bsf	3979,5,c	;volatile
 12291                           
 12292                           ;Test.c: 141: while(PORTBbits.RB1 == 0){
 12293  002B86  D05C               	goto	l8298
 12294  002B88                     l8280:
 12295                           
 12296                           ;Test.c: 142: readADC(0);
 12297  002B88  0E00               	movlw	0
 12298  002B8A  ECFB  F02C         	call	_readADC
 12299                           
 12300                           ;Test.c: 143: int res = ADRESH<<8 | ADRESL;
 12301  002B8E  50C3               	movf	4035,w,c	;volatile
 12302  002B90  CFC4 F0AB          	movff	4036,??_sensorTest	;volatile
 12303  002B94  0100               	movlb	0	; () banked
 12304  002B96  6BAC               	clrf	(??_sensorTest+1)& (0+255),b
 12305  002B98  C0AB  F0AC         	movff	??_sensorTest,??_sensorTest+1
 12306  002B9C  0100               	movlb	0	; () banked
 12307  002B9E  6BAB               	clrf	??_sensorTest& (0+255),b
 12308  002BA0  0100               	movlb	0	; () banked
 12309  002BA2  11AB               	iorwf	??_sensorTest& (0+255),w,b
 12310  002BA4  0100               	movlb	0	; () banked
 12311  002BA6  6FAD               	movwf	sensorTest@res& (0+255),b
 12312  002BA8  0100               	movlb	0	; () banked
 12313  002BAA  51AC               	movf	(??_sensorTest+1)& (0+255),w,b
 12314  002BAC  0100               	movlb	0	; () banked
 12315  002BAE  6FAE               	movwf	(sensorTest@res+1)& (0+255),b
 12316                           
 12317                           ; BSR set to: 0
 12318                           ;Test.c: 144: IR_signal = (res > 800) ? 1 : 0;
 12319  002BB0  0100               	movlb	0	; () banked
 12320  002BB2  BFAE               	btfsc	(sensorTest@res+1)& (0+255),7,b
 12321  002BB4  D00A               	goto	u7150
 12322  002BB6  0E21               	movlw	33
 12323  002BB8  0100               	movlb	0	; () banked
 12324  002BBA  5DAD               	subwf	sensorTest@res& (0+255),w,b
 12325  002BBC  0E03               	movlw	3
 12326  002BBE  0100               	movlb	0	; () banked
 12327  002BC0  59AE               	subwfb	(sensorTest@res+1)& (0+255),w,b
 12328  002BC2  A0D8               	btfss	status,0,c
 12329  002BC4  D002               	goto	u7150
 12330  002BC6  0E01               	movlw	1
 12331  002BC8  D001               	goto	u7160
 12332  002BCA                     u7150:
 12333  002BCA  0E00               	movlw	0
 12334  002BCC                     u7160:
 12335  002BCC  0100               	movlb	0	; () banked
 12336  002BCE  6FE0               	movwf	_IR_signal& (0+255),b
 12337  002BD0  6BE1               	clrf	(_IR_signal+1)& (0+255),b
 12338                           
 12339                           ;Test.c: 146: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12340  002BD2  0E01               	movlw	1
 12341  002BD4  EC10  F02E         	call	_lcdInst
 12342  002BD8  0E68               	movlw	104
 12343  002BDA  0100               	movlb	0	; () banked
 12344  002BDC  6FAB               	movwf	??_sensorTest& (0+255),b
 12345  002BDE  0EE4               	movlw	228
 12346  002BE0                     u10517:
 12347  002BE0  2EE8               	decfsz	wreg,f,c
 12348  002BE2  D7FE               	bra	u10517
 12349  002BE4  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12350  002BE6  D7FC               	bra	u10517
 12351  002BE8  F000               	nop	
 12352  002BEA  0E80               	movlw	128
 12353  002BEC  EC10  F02E         	call	_lcdInst
 12354                           
 12355                           ;Test.c: 147: printf("IR_signal: %d ", IR_signal);
 12356  002BF0  0E7D               	movlw	low STR_81
 12357  002BF2  0100               	movlb	0	; () banked
 12358  002BF4  6F8E               	movwf	printf@f& (0+255),b
 12359  002BF6  0EFE               	movlw	high STR_81
 12360  002BF8  0100               	movlb	0	; () banked
 12361  002BFA  6F8F               	movwf	(printf@f+1)& (0+255),b
 12362  002BFC  C0E0  F090         	movff	_IR_signal,?_printf+2
 12363  002C00  C0E1  F091         	movff	_IR_signal+1,?_printf+3
 12364  002C04  EC16  F00E         	call	_printf	;wreg free
 12365                           
 12366                           ;Test.c: 148: lcdInst(0b11000000);;
 12367  002C08  0EC0               	movlw	192
 12368  002C0A  EC10  F02E         	call	_lcdInst
 12369                           
 12370                           ;Test.c: 149: printf("%d", res);
 12371  002C0E  0E2A               	movlw	low (STR_27+14)
 12372  002C10  0100               	movlb	0	; () banked
 12373  002C12  6F8E               	movwf	printf@f& (0+255),b
 12374  002C14  0EFE               	movlw	high (STR_27+14)
 12375  002C16  0100               	movlb	0	; () banked
 12376  002C18  6F8F               	movwf	(printf@f+1)& (0+255),b
 12377  002C1A  C0AD  F090         	movff	sensorTest@res,?_printf+2
 12378  002C1E  C0AE  F091         	movff	sensorTest@res+1,?_printf+3
 12379  002C22  EC16  F00E         	call	_printf	;wreg free
 12380                           
 12381                           ;Test.c: 150: _delay((unsigned long)((100)*(32000000/4000.0)));
 12382  002C26  0E05               	movlw	5
 12383  002C28  0100               	movlb	0	; () banked
 12384  002C2A  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 12385  002C2C  0E0F               	movlw	15
 12386  002C2E  0100               	movlb	0	; () banked
 12387  002C30  6FAB               	movwf	??_sensorTest& (0+255),b
 12388  002C32  0EF1               	movlw	241
 12389  002C34                     u10527:
 12390  002C34  2EE8               	decfsz	wreg,f,c
 12391  002C36  D7FE               	bra	u10527
 12392  002C38  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12393  002C3A  D7FC               	bra	u10527
 12394  002C3C  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 12395  002C3E  D7FA               	bra	u10527
 12396  002C40                     l8298:
 12397  002C40  A281               	btfss	3969,1,c	;volatile
 12398  002C42  D7A2               	goto	l8280
 12399                           
 12400                           ;Test.c: 151: }
 12401                           ;Test.c: 152: LATCbits.LATC5 = 0;
 12402  002C44  9A8B               	bcf	3979,5,c	;volatile
 12403                           
 12404                           ;Test.c: 160: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12405  002C46  0E01               	movlw	1
 12406  002C48  EC10  F02E         	call	_lcdInst
 12407  002C4C  0E68               	movlw	104
 12408  002C4E  0100               	movlb	0	; () banked
 12409  002C50  6FAB               	movwf	??_sensorTest& (0+255),b
 12410  002C52  0EE4               	movlw	228
 12411  002C54                     u10537:
 12412  002C54  2EE8               	decfsz	wreg,f,c
 12413  002C56  D7FE               	bra	u10537
 12414  002C58  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12415  002C5A  D7FC               	bra	u10537
 12416  002C5C  F000               	nop	
 12417  002C5E  0E80               	movlw	128
 12418  002C60  EC10  F02E         	call	_lcdInst
 12419                           
 12420                           ;Test.c: 161: printf("TST: MAGNETISM");
 12421  002C64  0EAA               	movlw	low STR_83
 12422  002C66  0100               	movlb	0	; () banked
 12423  002C68  6F8E               	movwf	printf@f& (0+255),b
 12424  002C6A  0EFE               	movlw	high STR_83
 12425  002C6C  0100               	movlb	0	; () banked
 12426  002C6E  6F8F               	movwf	(printf@f+1)& (0+255),b
 12427  002C70  EC16  F00E         	call	_printf	;wreg free
 12428                           
 12429                           ;Test.c: 162: _delay((unsigned long)((100)*(32000000/4000.0)));
 12430  002C74  0E05               	movlw	5
 12431  002C76  0100               	movlb	0	; () banked
 12432  002C78  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 12433  002C7A  0E0F               	movlw	15
 12434  002C7C  0100               	movlb	0	; () banked
 12435  002C7E  6FAB               	movwf	??_sensorTest& (0+255),b
 12436  002C80  0EF1               	movlw	241
 12437  002C82                     u10547:
 12438  002C82  2EE8               	decfsz	wreg,f,c
 12439  002C84  D7FE               	bra	u10547
 12440  002C86  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12441  002C88  D7FC               	bra	u10547
 12442  002C8A  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 12443  002C8C  D7FA               	bra	u10547
 12444                           
 12445                           ;Test.c: 163: while(PORTBbits.RB1 == 0){
 12446  002C8E  D021               	goto	l8316
 12447  002C90                     l8310:
 12448                           
 12449                           ;Test.c: 164: readMAG();
 12450  002C90  EC7E  F02A         	call	_readMAG	;wreg free
 12451                           
 12452                           ;Test.c: 165: lcdInst(0b10000000);;
 12453  002C94  0E80               	movlw	128
 12454  002C96  EC10  F02E         	call	_lcdInst
 12455                           
 12456                           ;Test.c: 166: lcdInst(0b11000000);;
 12457  002C9A  0EC0               	movlw	192
 12458  002C9C  EC10  F02E         	call	_lcdInst
 12459                           
 12460                           ;Test.c: 167: printf("MAG_signal: %d ", MAG_signal);
 12461  002CA0  0E3E               	movlw	low STR_84
 12462  002CA2  0100               	movlb	0	; () banked
 12463  002CA4  6F8E               	movwf	printf@f& (0+255),b
 12464  002CA6  0EFE               	movlw	high STR_84
 12465  002CA8  0100               	movlb	0	; () banked
 12466  002CAA  6F8F               	movwf	(printf@f+1)& (0+255),b
 12467  002CAC  C0E2  F090         	movff	_MAG_signal,?_printf+2
 12468  002CB0  C0E3  F091         	movff	_MAG_signal+1,?_printf+3
 12469  002CB4  EC16  F00E         	call	_printf	;wreg free
 12470                           
 12471                           ;Test.c: 168: _delay((unsigned long)((100)*(32000000/4000.0)));
 12472  002CB8  0E05               	movlw	5
 12473  002CBA  0100               	movlb	0	; () banked
 12474  002CBC  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 12475  002CBE  0E0F               	movlw	15
 12476  002CC0  0100               	movlb	0	; () banked
 12477  002CC2  6FAB               	movwf	??_sensorTest& (0+255),b
 12478  002CC4  0EF1               	movlw	241
 12479  002CC6                     u10557:
 12480  002CC6  2EE8               	decfsz	wreg,f,c
 12481  002CC8  D7FE               	bra	u10557
 12482  002CCA  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12483  002CCC  D7FC               	bra	u10557
 12484  002CCE  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 12485  002CD0  D7FA               	bra	u10557
 12486  002CD2                     l8316:
 12487  002CD2  A281               	btfss	3969,1,c	;volatile
 12488  002CD4  D7DD               	goto	l8310
 12489                           
 12490                           ;Test.c: 169: }
 12491                           ;Test.c: 174: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12492  002CD6  0E01               	movlw	1
 12493  002CD8  EC10  F02E         	call	_lcdInst
 12494  002CDC  0E68               	movlw	104
 12495  002CDE  0100               	movlb	0	; () banked
 12496  002CE0  6FAB               	movwf	??_sensorTest& (0+255),b
 12497  002CE2  0EE4               	movlw	228
 12498  002CE4                     u10567:
 12499  002CE4  2EE8               	decfsz	wreg,f,c
 12500  002CE6  D7FE               	bra	u10567
 12501  002CE8  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12502  002CEA  D7FC               	bra	u10567
 12503  002CEC  F000               	nop	
 12504  002CEE  0E80               	movlw	128
 12505  002CF0  EC10  F02E         	call	_lcdInst
 12506                           
 12507                           ;Test.c: 175: printf("TST: COND");
 12508  002CF4  0E87               	movlw	low STR_85
 12509  002CF6  0100               	movlb	0	; () banked
 12510  002CF8  6F8E               	movwf	printf@f& (0+255),b
 12511  002CFA  0EFF               	movlw	high STR_85
 12512  002CFC  0100               	movlb	0	; () banked
 12513  002CFE  6F8F               	movwf	(printf@f+1)& (0+255),b
 12514  002D00  EC16  F00E         	call	_printf	;wreg free
 12515                           
 12516                           ;Test.c: 176: _delay((unsigned long)((100)*(32000000/4000.0)));
 12517  002D04  0E05               	movlw	5
 12518  002D06  0100               	movlb	0	; () banked
 12519  002D08  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 12520  002D0A  0E0F               	movlw	15
 12521  002D0C  0100               	movlb	0	; () banked
 12522  002D0E  6FAB               	movwf	??_sensorTest& (0+255),b
 12523  002D10  0EF1               	movlw	241
 12524  002D12                     u10577:
 12525  002D12  2EE8               	decfsz	wreg,f,c
 12526  002D14  D7FE               	bra	u10577
 12527  002D16  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12528  002D18  D7FC               	bra	u10577
 12529  002D1A  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 12530  002D1C  D7FA               	bra	u10577
 12531  002D1E                     l8328:
 12532                           
 12533                           ;Test.c: 178: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12534  002D1E  0E01               	movlw	1
 12535  002D20  EC10  F02E         	call	_lcdInst
 12536  002D24  0E68               	movlw	104
 12537  002D26  0100               	movlb	0	; () banked
 12538  002D28  6FAB               	movwf	??_sensorTest& (0+255),b
 12539  002D2A  0EE4               	movlw	228
 12540  002D2C                     u10587:
 12541  002D2C  2EE8               	decfsz	wreg,f,c
 12542  002D2E  D7FE               	bra	u10587
 12543  002D30  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12544  002D32  D7FC               	bra	u10587
 12545  002D34  F000               	nop	
 12546  002D36  0E80               	movlw	128
 12547  002D38  EC10  F02E         	call	_lcdInst
 12548                           
 12549                           ;Test.c: 179: printf("TST: COND");
 12550  002D3C  0E87               	movlw	low STR_85
 12551  002D3E  0100               	movlb	0	; () banked
 12552  002D40  6F8E               	movwf	printf@f& (0+255),b
 12553  002D42  0EFF               	movlw	high STR_85
 12554  002D44  0100               	movlb	0	; () banked
 12555  002D46  6F8F               	movwf	(printf@f+1)& (0+255),b
 12556  002D48  EC16  F00E         	call	_printf	;wreg free
 12557                           
 12558                           ;Test.c: 180: while(PORTBbits.RB1 == 0){
 12559  002D4C  D01B               	goto	l8340
 12560  002D4E                     l8336:
 12561                           
 12562                           ;Test.c: 184: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12563  002D4E  0E80               	movlw	128
 12564  002D50  EC10  F02E         	call	_lcdInst
 12565  002D54  0EC0               	movlw	192
 12566  002D56  EC10  F02E         	call	_lcdInst
 12567                           
 12568                           ;Test.c: 185: printf("COND: %d", PORTAbits.RA2);
 12569  002D5A  0EA5               	movlw	low STR_87
 12570  002D5C  0100               	movlb	0	; () banked
 12571  002D5E  6F8E               	movwf	printf@f& (0+255),b
 12572  002D60  0EFF               	movlw	high STR_87
 12573  002D62  0100               	movlb	0	; () banked
 12574  002D64  6F8F               	movwf	(printf@f+1)& (0+255),b
 12575  002D66  A480               	btfss	3968,2,c	;volatile
 12576  002D68  D004               	goto	u7190
 12577  002D6A  0100               	movlb	0	; () banked
 12578  002D6C  6BAB               	clrf	??_sensorTest& (0+255),b
 12579  002D6E  2BAB               	incf	??_sensorTest& (0+255),f,b
 12580  002D70  D002               	goto	u7198
 12581  002D72                     u7190:
 12582  002D72  0100               	movlb	0	; () banked
 12583  002D74  6BAB               	clrf	??_sensorTest& (0+255),b
 12584  002D76                     u7198:
 12585  002D76  0100               	movlb	0	; () banked
 12586  002D78  51AB               	movf	??_sensorTest& (0+255),w,b
 12587  002D7A  0100               	movlb	0	; () banked
 12588  002D7C  6F90               	movwf	(?_printf+2)& (0+255),b
 12589  002D7E  6B91               	clrf	(?_printf+3)& (0+255),b
 12590  002D80  EC16  F00E         	call	_printf	;wreg free
 12591  002D84                     l8340:
 12592  002D84  A281               	btfss	3969,1,c	;volatile
 12593  002D86  D7E3               	goto	l8336
 12594                           
 12595                           ;Test.c: 186: }
 12596                           ;Test.c: 187: if(PORTB >> 4 == 0b1111){
 12597  002D88  3881               	swapf	3969,w,c	;volatile
 12598  002D8A  0B0F               	andlw	15
 12599  002D8C  0A0F               	xorlw	15
 12600  002D8E  B4D8               	btfsc	status,2,c
 12601  002D90  0012               	return	
 12602                           
 12603                           ;Test.c: 190: else{
 12604                           ;Test.c: 191: LATAbits.LATA3 = 1;
 12605                           
 12606                           ;Test.c: 189: }
 12607                           
 12608                           ;Test.c: 188: break;
 12609  002D92  8689               	bsf	3977,3,c	;volatile
 12610                           
 12611                           ;Test.c: 192: while(PORTBbits.RB1 == 1){
 12612  002D94  D01B               	goto	l8352
 12613  002D96                     l8348:
 12614                           
 12615                           ;Test.c: 194: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12616  002D96  0E80               	movlw	128
 12617  002D98  EC10  F02E         	call	_lcdInst
 12618  002D9C  0EC0               	movlw	192
 12619  002D9E  EC10  F02E         	call	_lcdInst
 12620                           
 12621                           ;Test.c: 195: printf("COND: %d", PORTAbits.RA2);
 12622  002DA2  0EA5               	movlw	low STR_87
 12623  002DA4  0100               	movlb	0	; () banked
 12624  002DA6  6F8E               	movwf	printf@f& (0+255),b
 12625  002DA8  0EFF               	movlw	high STR_87
 12626  002DAA  0100               	movlb	0	; () banked
 12627  002DAC  6F8F               	movwf	(printf@f+1)& (0+255),b
 12628  002DAE  A480               	btfss	3968,2,c	;volatile
 12629  002DB0  D004               	goto	u7220
 12630  002DB2  0100               	movlb	0	; () banked
 12631  002DB4  6BAB               	clrf	??_sensorTest& (0+255),b
 12632  002DB6  2BAB               	incf	??_sensorTest& (0+255),f,b
 12633  002DB8  D002               	goto	u7228
 12634  002DBA                     u7220:
 12635  002DBA  0100               	movlb	0	; () banked
 12636  002DBC  6BAB               	clrf	??_sensorTest& (0+255),b
 12637  002DBE                     u7228:
 12638  002DBE  0100               	movlb	0	; () banked
 12639  002DC0  51AB               	movf	??_sensorTest& (0+255),w,b
 12640  002DC2  0100               	movlb	0	; () banked
 12641  002DC4  6F90               	movwf	(?_printf+2)& (0+255),b
 12642  002DC6  6B91               	clrf	(?_printf+3)& (0+255),b
 12643  002DC8  EC16  F00E         	call	_printf	;wreg free
 12644  002DCC                     l8352:
 12645  002DCC  B281               	btfsc	3969,1,c	;volatile
 12646  002DCE  D7E3               	goto	l8348
 12647                           
 12648                           ;Test.c: 196: }
 12649                           ;Test.c: 197: LATAbits.LATA3 = !1;
 12650  002DD0  9689               	bcf	3977,3,c	;volatile
 12651  002DD2  D7A5               	goto	l8328
 12652  002DD4                     __end_of_sensorTest:
 12653                           	opt stack 0
 12654                           tblptru	equ	0xFF8
 12655                           tblptrh	equ	0xFF7
 12656                           tblptrl	equ	0xFF6
 12657                           tablat	equ	0xFF5
 12658                           prodh	equ	0xFF4
 12659                           prodl	equ	0xFF3
 12660                           intcon	equ	0xFF2
 12661                           intcon2	equ	0xFF1
 12662                           intcon3	equ	0xFF0
 12663                           postinc0	equ	0xFEE
 12664                           wreg	equ	0xFE8
 12665                           postdec1	equ	0xFE5
 12666                           fsr1l	equ	0xFE1
 12667                           indf2	equ	0xFDF
 12668                           postinc2	equ	0xFDE
 12669                           postdec2	equ	0xFDD
 12670                           fsr2h	equ	0xFDA
 12671                           fsr2l	equ	0xFD9
 12672                           status	equ	0xFD8
 12673                           
 12674 ;; *************** function _readMAG *****************
 12675 ;; Defined at:
 12676 ;;		line 29 in file "ADCFunctionality.c"
 12677 ;; Parameters:    Size  Location     Type
 12678 ;;		None
 12679 ;; Auto vars:     Size  Location     Type
 12680 ;;  res             2    4[BANK0 ] int 
 12681 ;; Return value:  Size  Location     Type
 12682 ;;                  1    wreg      void 
 12683 ;; Registers used:
 12684 ;;		wreg, status,2, status,0, cstack
 12685 ;; Tracked objects:
 12686 ;;		On entry : 0/0
 12687 ;;		On exit  : 0/0
 12688 ;;		Unchanged: 0/0
 12689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12690 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12691 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12692 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12693 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12694 ;;Total ram usage:        4 bytes
 12695 ;; Hardware stack levels used:    1
 12696 ;; Hardware stack levels required when called:    8
 12697 ;; This function calls:
 12698 ;;		_readADC
 12699 ;; This function is called by:
 12700 ;;		_getMAG
 12701 ;;		_sensorTest
 12702 ;; This function uses a non-reentrant model
 12703 ;;
 12704                           
 12705                           	psect	text42
 12706  0054FC                     __ptext42:
 12707                           	opt stack 0
 12708  0054FC                     _readMAG:
 12709                           	opt stack 19
 12710                           
 12711                           ;ADCFunctionality.c: 30: readADC(1);
 12712                           
 12713                           ;incstack = 0
 12714  0054FC  0E01               	movlw	1
 12715  0054FE  ECFB  F02C         	call	_readADC
 12716                           
 12717                           ;ADCFunctionality.c: 31: int res = ADRESH<<8 | ADRESL;
 12718  005502  50C3               	movf	4035,w,c	;volatile
 12719  005504  CFC4 F082          	movff	4036,??_readMAG	;volatile
 12720  005508  0100               	movlb	0	; () banked
 12721  00550A  6B83               	clrf	(??_readMAG+1)& (0+255),b
 12722  00550C  C082  F083         	movff	??_readMAG,??_readMAG+1
 12723  005510  0100               	movlb	0	; () banked
 12724  005512  6B82               	clrf	??_readMAG& (0+255),b
 12725  005514  0100               	movlb	0	; () banked
 12726  005516  1182               	iorwf	??_readMAG& (0+255),w,b
 12727  005518  0100               	movlb	0	; () banked
 12728  00551A  6F84               	movwf	readMAG@res& (0+255),b
 12729  00551C  0100               	movlb	0	; () banked
 12730  00551E  5183               	movf	(??_readMAG+1)& (0+255),w,b
 12731  005520  0100               	movlb	0	; () banked
 12732  005522  6F85               	movwf	(readMAG@res+1)& (0+255),b
 12733                           
 12734                           ; BSR set to: 0
 12735                           ;ADCFunctionality.c: 32: MAG_signal = (res < 150) ? 1 : 0;
 12736  005524  0100               	movlb	0	; () banked
 12737  005526  BF85               	btfsc	(readMAG@res+1)& (0+255),7,b
 12738  005528  D008               	goto	u5181
 12739  00552A  0100               	movlb	0	; () banked
 12740  00552C  5185               	movf	(readMAG@res+1)& (0+255),w,b
 12741  00552E  E107               	bnz	u5180
 12742  005530  0E96               	movlw	150
 12743  005532  0100               	movlb	0	; () banked
 12744  005534  5D84               	subwf	readMAG@res& (0+255),w,b
 12745  005536  B0D8               	btfsc	status,0,c
 12746  005538  D002               	goto	u5180
 12747  00553A                     u5181:
 12748  00553A  0E01               	movlw	1
 12749  00553C  D001               	goto	u5190
 12750  00553E                     u5180:
 12751  00553E  0E00               	movlw	0
 12752  005540                     u5190:
 12753  005540  0100               	movlb	0	; () banked
 12754  005542  6FE2               	movwf	_MAG_signal& (0+255),b
 12755  005544  6BE3               	clrf	(_MAG_signal+1)& (0+255),b
 12756                           
 12757                           ; BSR set to: 0
 12758  005546  0012               	return		;funcret
 12759  005548                     __end_of_readMAG:
 12760                           	opt stack 0
 12761                           tblptru	equ	0xFF8
 12762                           tblptrh	equ	0xFF7
 12763                           tblptrl	equ	0xFF6
 12764                           tablat	equ	0xFF5
 12765                           prodh	equ	0xFF4
 12766                           prodl	equ	0xFF3
 12767                           intcon	equ	0xFF2
 12768                           intcon2	equ	0xFF1
 12769                           intcon3	equ	0xFF0
 12770                           postinc0	equ	0xFEE
 12771                           wreg	equ	0xFE8
 12772                           postdec1	equ	0xFE5
 12773                           fsr1l	equ	0xFE1
 12774                           indf2	equ	0xFDF
 12775                           postinc2	equ	0xFDE
 12776                           postdec2	equ	0xFDD
 12777                           fsr2h	equ	0xFDA
 12778                           fsr2l	equ	0xFD9
 12779                           status	equ	0xFD8
 12780                           
 12781 ;; *************** function _arm *****************
 12782 ;; Defined at:
 12783 ;;		line 639 in file "Test.c"
 12784 ;; Parameters:    Size  Location     Type
 12785 ;;		None
 12786 ;; Auto vars:     Size  Location     Type
 12787 ;;  on              2   44[BANK0 ] int 
 12788 ;; Return value:  Size  Location     Type
 12789 ;;                  1    wreg      void 
 12790 ;; Registers used:
 12791 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12792 ;; Tracked objects:
 12793 ;;		On entry : 0/0
 12794 ;;		On exit  : 0/0
 12795 ;;		Unchanged: 0/0
 12796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12797 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12798 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12799 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12800 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12801 ;;Total ram usage:        3 bytes
 12802 ;; Hardware stack levels used:    1
 12803 ;; Hardware stack levels required when called:   10
 12804 ;; This function calls:
 12805 ;;		_lcdInst
 12806 ;;		_printf
 12807 ;;		_stopSignals
 12808 ;; This function is called by:
 12809 ;;		_Test
 12810 ;; This function uses a non-reentrant model
 12811 ;;
 12812                           
 12813                           	psect	text43
 12814  004418                     __ptext43:
 12815                           	opt stack 0
 12816  004418                     _arm:
 12817                           	opt stack 19
 12818                           
 12819                           ;Test.c: 640: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12820                           
 12821                           ; BSR set to: 0
 12822                           ;incstack = 0
 12823  004418  0E01               	movlw	1
 12824  00441A  EC10  F02E         	call	_lcdInst
 12825  00441E  0E68               	movlw	104
 12826  004420  0100               	movlb	0	; () banked
 12827  004422  6FAB               	movwf	??_arm& (0+255),b
 12828  004424  0EE4               	movlw	228
 12829  004426                     u10597:
 12830  004426  2EE8               	decfsz	wreg,f,c
 12831  004428  D7FE               	bra	u10597
 12832  00442A  2FAB               	decfsz	??_arm& (0+255),f,b
 12833  00442C  D7FC               	bra	u10597
 12834  00442E  F000               	nop	
 12835  004430  0E80               	movlw	128
 12836  004432  EC10  F02E         	call	_lcdInst
 12837                           
 12838                           ;Test.c: 641: printf("D WILL RETURN   ");
 12839  004436  0EDA               	movlw	low STR_119
 12840  004438  0100               	movlb	0	; () banked
 12841  00443A  6F8E               	movwf	printf@f& (0+255),b
 12842  00443C  0EFB               	movlw	high STR_119
 12843  00443E  0100               	movlb	0	; () banked
 12844  004440  6F8F               	movwf	(printf@f+1)& (0+255),b
 12845  004442  EC16  F00E         	call	_printf	;wreg free
 12846                           
 12847                           ;Test.c: 642: lcdInst(0b11000000);;
 12848  004446  0EC0               	movlw	192
 12849  004448  EC10  F02E         	call	_lcdInst
 12850                           
 12851                           ;Test.c: 643: printf("ELSE TOGGLES ARM");
 12852  00444C  0E95               	movlw	low STR_128
 12853  00444E  0100               	movlb	0	; () banked
 12854  004450  6F8E               	movwf	printf@f& (0+255),b
 12855  004452  0EFC               	movlw	high STR_128
 12856  004454  0100               	movlb	0	; () banked
 12857  004456  6F8F               	movwf	(printf@f+1)& (0+255),b
 12858  004458  EC16  F00E         	call	_printf	;wreg free
 12859                           
 12860                           ;Test.c: 645: (INTCONbits.GIE = 1);
 12861  00445C  8EF2               	bsf	intcon,7,c	;volatile
 12862                           
 12863                           ;Test.c: 646: machine_state = Sorting_state;
 12864  00445E  0E01               	movlw	1
 12865  004460  0100               	movlb	0	; () banked
 12866  004462  6FFC               	movwf	_machine_state& (0+255),b
 12867                           
 12868                           ; BSR set to: 0
 12869                           ;Test.c: 647: f_arm_position = 2;
 12870  004464  0E00               	movlw	0
 12871  004466  0100               	movlb	0	; () banked
 12872  004468  6FE9               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 12873  00446A  0E02               	movlw	2
 12874  00446C  6FE8               	movwf	_f_arm_position& (0+255),b	;volatile
 12875                           
 12876                           ; BSR set to: 0
 12877                           ;Test.c: 648: timer2_counter = 0;
 12878  00446E  0E00               	movlw	0
 12879  004470  6E74               	movwf	_timer2_counter+1,c	;volatile
 12880  004472  0E00               	movlw	0
 12881  004474  6E73               	movwf	_timer2_counter,c	;volatile
 12882                           
 12883                           ; BSR set to: 0
 12884                           ;Test.c: 649: LATBbits.LATB3 = 1;
 12885  004476  868A               	bsf	3978,3,c	;volatile
 12886                           
 12887                           ; BSR set to: 0
 12888                           ;Test.c: 650: TMR2ON = 1;
 12889  004478  84CA               	bsf	4042,2,c	;volatile
 12890                           
 12891                           ; BSR set to: 0
 12892                           ;Test.c: 651: was_low_2 = 0;
 12893  00447A  0E00               	movlw	0
 12894  00447C  6E7A               	movwf	_was_low_2+1,c	;volatile
 12895  00447E  0E00               	movlw	0
 12896  004480  6E79               	movwf	_was_low_2,c	;volatile
 12897                           
 12898                           ; BSR set to: 0
 12899                           ;Test.c: 653: int on = 0;
 12900  004482  0E00               	movlw	0
 12901  004484  0100               	movlb	0	; () banked
 12902  004486  6FAD               	movwf	(arm@on+1)& (0+255),b
 12903  004488  0E00               	movlw	0
 12904  00448A  6FAC               	movwf	arm@on& (0+255),b
 12905  00448C                     l8806:
 12906                           
 12907                           ;Test.c: 655: if(on){
 12908  00448C  0100               	movlb	0	; () banked
 12909  00448E  51AC               	movf	arm@on& (0+255),w,b
 12910  004490  0100               	movlb	0	; () banked
 12911  004492  11AD               	iorwf	(arm@on+1)& (0+255),w,b
 12912  004494  B4D8               	btfsc	status,2,c
 12913  004496  D01C               	goto	l8818
 12914                           
 12915                           ; BSR set to: 0
 12916                           ;Test.c: 656: on = !on;
 12917  004498  0100               	movlb	0	; () banked
 12918  00449A  51AC               	movf	arm@on& (0+255),w,b
 12919  00449C  0100               	movlb	0	; () banked
 12920  00449E  11AD               	iorwf	(arm@on+1)& (0+255),w,b
 12921  0044A0  A4D8               	btfss	status,2,c
 12922  0044A2  D002               	goto	u7810
 12923  0044A4  0E01               	movlw	1
 12924  0044A6  D001               	goto	u7820
 12925  0044A8                     u7810:
 12926  0044A8  0E00               	movlw	0
 12927  0044AA                     u7820:
 12928  0044AA  0100               	movlb	0	; () banked
 12929  0044AC  6FAC               	movwf	arm@on& (0+255),b
 12930  0044AE  6BAD               	clrf	(arm@on+1)& (0+255),b
 12931                           
 12932                           ;Test.c: 657: while(PORTBbits.RB1 == 0){
 12933  0044B0  D005               	goto	l8812
 12934  0044B2                     l8810:
 12935                           
 12936                           ; BSR set to: 0
 12937                           ;Test.c: 658: f_arm_position = 0;
 12938  0044B2  0E00               	movlw	0
 12939  0044B4  0100               	movlb	0	; () banked
 12940  0044B6  6FE9               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 12941  0044B8  0E00               	movlw	0
 12942  0044BA  6FE8               	movwf	_f_arm_position& (0+255),b	;volatile
 12943  0044BC                     l8812:
 12944                           
 12945                           ; BSR set to: 0
 12946  0044BC  A281               	btfss	3969,1,c	;volatile
 12947  0044BE  D7F9               	goto	l8810
 12948                           
 12949                           ; BSR set to: 0
 12950                           ;Test.c: 659: }
 12951                           ;Test.c: 660: if(PORTB >> 4 == 0b1111){
 12952                           
 12953                           ; BSR set to: 0
 12954  0044C0  3881               	swapf	3969,w,c	;volatile
 12955  0044C2  0B0F               	andlw	15
 12956  0044C4  0A0F               	xorlw	15
 12957  0044C6  B4D8               	btfsc	status,2,c
 12958  0044C8  D01F               	goto	l1463
 12959  0044CA                     l1464:
 12960  0044CA  A281               	btfss	3969,1,c	;volatile
 12961  0044CC  D7DF               	goto	l8806
 12962  0044CE  D7FD               	goto	l1464
 12963  0044D0                     l8818:
 12964                           
 12965                           ;Test.c: 665: else{
 12966                           ;Test.c: 666: on = !on;
 12967  0044D0  0100               	movlb	0	; () banked
 12968  0044D2  51AC               	movf	arm@on& (0+255),w,b
 12969  0044D4  0100               	movlb	0	; () banked
 12970  0044D6  11AD               	iorwf	(arm@on+1)& (0+255),w,b
 12971  0044D8  A4D8               	btfss	status,2,c
 12972  0044DA  D002               	goto	u7860
 12973  0044DC  0E01               	movlw	1
 12974  0044DE  D001               	goto	u7870
 12975  0044E0                     u7860:
 12976  0044E0  0E00               	movlw	0
 12977  0044E2                     u7870:
 12978  0044E2  0100               	movlb	0	; () banked
 12979  0044E4  6FAC               	movwf	arm@on& (0+255),b
 12980  0044E6  6BAD               	clrf	(arm@on+1)& (0+255),b
 12981                           
 12982                           ;Test.c: 667: while(PORTBbits.RB1 == 0){
 12983  0044E8  D005               	goto	l8822
 12984  0044EA                     l8820:
 12985                           
 12986                           ; BSR set to: 0
 12987                           ;Test.c: 668: f_arm_position = 1;
 12988  0044EA  0E00               	movlw	0
 12989  0044EC  0100               	movlb	0	; () banked
 12990  0044EE  6FE9               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 12991  0044F0  0E01               	movlw	1
 12992  0044F2  6FE8               	movwf	_f_arm_position& (0+255),b	;volatile
 12993  0044F4                     l8822:
 12994                           
 12995                           ; BSR set to: 0
 12996  0044F4  A281               	btfss	3969,1,c	;volatile
 12997  0044F6  D7F9               	goto	l8820
 12998                           
 12999                           ; BSR set to: 0
 13000                           ;Test.c: 669: }
 13001                           ;Test.c: 670: if(PORTB >> 4 == 0b1111){
 13002                           
 13003                           ; BSR set to: 0
 13004  0044F8  3881               	swapf	3969,w,c	;volatile
 13005  0044FA  0B0F               	andlw	15
 13006  0044FC  0A0F               	xorlw	15
 13007  0044FE  B4D8               	btfsc	status,2,c
 13008  004500  D003               	goto	l1463
 13009  004502                     l1472:
 13010  004502  A281               	btfss	3969,1,c	;volatile
 13011  004504  D7C3               	goto	l8806
 13012  004506  D7FD               	goto	l1472
 13013  004508                     l1463:
 13014                           
 13015                           ; BSR set to: 0
 13016                           ;Test.c: 674: }
 13017                           ;Test.c: 675: }
 13018                           ;Test.c: 677: (INTCONbits.GIE = 0);
 13019  004508  9EF2               	bcf	intcon,7,c	;volatile
 13020                           
 13021                           ; BSR set to: 0
 13022                           ;Test.c: 678: stopSignals();
 13023  00450A  ECB7  F02D         	call	_stopSignals	;wreg free
 13024                           
 13025                           ;Test.c: 679: machine_state = Testing_state;
 13026  00450E  0E03               	movlw	3
 13027  004510  0100               	movlb	0	; () banked
 13028  004512  6FFC               	movwf	_machine_state& (0+255),b
 13029                           
 13030                           ; BSR set to: 0
 13031  004514  0012               	return		;funcret
 13032  004516                     __end_of_arm:
 13033                           	opt stack 0
 13034                           tblptru	equ	0xFF8
 13035                           tblptrh	equ	0xFF7
 13036                           tblptrl	equ	0xFF6
 13037                           tablat	equ	0xFF5
 13038                           prodh	equ	0xFF4
 13039                           prodl	equ	0xFF3
 13040                           intcon	equ	0xFF2
 13041                           intcon2	equ	0xFF1
 13042                           intcon3	equ	0xFF0
 13043                           postinc0	equ	0xFEE
 13044                           wreg	equ	0xFE8
 13045                           postdec1	equ	0xFE5
 13046                           fsr1l	equ	0xFE1
 13047                           indf2	equ	0xFDF
 13048                           postinc2	equ	0xFDE
 13049                           postdec2	equ	0xFDD
 13050                           fsr2h	equ	0xFDA
 13051                           fsr2l	equ	0xFD9
 13052                           status	equ	0xFD8
 13053                           
 13054 ;; *************** function _algorithmTest *****************
 13055 ;; Defined at:
 13056 ;;		line 79 in file "Test.c"
 13057 ;; Parameters:    Size  Location     Type
 13058 ;;		None
 13059 ;; Auto vars:     Size  Location     Type
 13060 ;;		None
 13061 ;; Return value:  Size  Location     Type
 13062 ;;                  1    wreg      void 
 13063 ;; Registers used:
 13064 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13065 ;; Tracked objects:
 13066 ;;		On entry : 0/0
 13067 ;;		On exit  : 0/0
 13068 ;;		Unchanged: 0/0
 13069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13070 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13071 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13072 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13073 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13074 ;;Total ram usage:        2 bytes
 13075 ;; Hardware stack levels used:    1
 13076 ;; Hardware stack levels required when called:   10
 13077 ;; This function calls:
 13078 ;;		_lcdInst
 13079 ;;		_printf
 13080 ;; This function is called by:
 13081 ;;		_Test
 13082 ;; This function uses a non-reentrant model
 13083 ;;
 13084                           
 13085                           	psect	text44
 13086  0046E0                     __ptext44:
 13087                           	opt stack 0
 13088  0046E0                     _algorithmTest:
 13089                           	opt stack 19
 13090                           
 13091                           ;Test.c: 81: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 13092                           
 13093                           ; BSR set to: 0
 13094                           ;incstack = 0
 13095  0046E0  0E01               	movlw	1
 13096  0046E2  EC10  F02E         	call	_lcdInst
 13097  0046E6  0E68               	movlw	104
 13098  0046E8  0100               	movlb	0	; () banked
 13099  0046EA  6FAB               	movwf	??_algorithmTest& (0+255),b
 13100  0046EC  0EE4               	movlw	228
 13101  0046EE                     u10607:
 13102  0046EE  2EE8               	decfsz	wreg,f,c
 13103  0046F0  D7FE               	bra	u10607
 13104  0046F2  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 13105  0046F4  D7FC               	bra	u10607
 13106  0046F6  F000               	nop	
 13107  0046F8  0E80               	movlw	128
 13108  0046FA  EC10  F02E         	call	_lcdInst
 13109                           
 13110                           ;Test.c: 82: printf("ALGORITHM TEST");
 13111  0046FE  0EF5               	movlw	low STR_71
 13112  004700  0100               	movlb	0	; () banked
 13113  004702  6F8E               	movwf	printf@f& (0+255),b
 13114  004704  0EFE               	movlw	high STR_71
 13115  004706  0100               	movlb	0	; () banked
 13116  004708  6F8F               	movwf	(printf@f+1)& (0+255),b
 13117  00470A  EC16  F00E         	call	_printf	;wreg free
 13118                           
 13119                           ;Test.c: 83: lcdInst(0b11000000);;
 13120  00470E  0EC0               	movlw	192
 13121  004710  EC10  F02E         	call	_lcdInst
 13122                           
 13123                           ;Test.c: 84: printf("PUSH TO START");
 13124  004714  0E2E               	movlw	low STR_72
 13125  004716  0100               	movlb	0	; () banked
 13126  004718  6F8E               	movwf	printf@f& (0+255),b
 13127  00471A  0EFF               	movlw	high STR_72
 13128  00471C  0100               	movlb	0	; () banked
 13129  00471E  6F8F               	movwf	(printf@f+1)& (0+255),b
 13130  004720  EC16  F00E         	call	_printf	;wreg free
 13131                           
 13132                           ;Test.c: 85: _delay((unsigned long)((100)*(32000000/4000.0)));
 13133  004724  0E05               	movlw	5
 13134  004726  0100               	movlb	0	; () banked
 13135  004728  6FAC               	movwf	(??_algorithmTest+1)& (0+255),b
 13136  00472A  0E0F               	movlw	15
 13137  00472C  0100               	movlb	0	; () banked
 13138  00472E  6FAB               	movwf	??_algorithmTest& (0+255),b
 13139  004730  0EF1               	movlw	241
 13140  004732                     u10617:
 13141  004732  2EE8               	decfsz	wreg,f,c
 13142  004734  D7FE               	bra	u10617
 13143  004736  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 13144  004738  D7FC               	bra	u10617
 13145  00473A  2FAC               	decfsz	(??_algorithmTest+1)& (0+255),f,b
 13146  00473C  D7FA               	bra	u10617
 13147  00473E                     l1259:
 13148  00473E  A281               	btfss	3969,1,c	;volatile
 13149  004740  D7FE               	goto	l1259
 13150  004742                     l1262:
 13151  004742  B281               	btfsc	3969,1,c	;volatile
 13152  004744  D7FE               	goto	l1262
 13153                           
 13154                           ;Test.c: 88: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 13155  004746  0E01               	movlw	1
 13156  004748  EC10  F02E         	call	_lcdInst
 13157  00474C  0E68               	movlw	104
 13158  00474E  0100               	movlb	0	; () banked
 13159  004750  6FAB               	movwf	??_algorithmTest& (0+255),b
 13160  004752  0EE4               	movlw	228
 13161  004754                     u10627:
 13162  004754  2EE8               	decfsz	wreg,f,c
 13163  004756  D7FE               	bra	u10627
 13164  004758  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 13165  00475A  D7FC               	bra	u10627
 13166  00475C  F000               	nop	
 13167  00475E  0E80               	movlw	128
 13168  004760  EC10  F02E         	call	_lcdInst
 13169                           
 13170                           ;Test.c: 93: printf("ALG1: 9 POPNOTAB");
 13171  004764  0E40               	movlw	low STR_73
 13172  004766  0100               	movlb	0	; () banked
 13173  004768  6F8E               	movwf	printf@f& (0+255),b
 13174  00476A  0EFC               	movlw	high STR_73
 13175  00476C  0100               	movlb	0	; () banked
 13176  00476E  6F8F               	movwf	(printf@f+1)& (0+255),b
 13177  004770  EC16  F00E         	call	_printf	;wreg free
 13178                           
 13179                           ;Test.c: 100: printf("ALG2: 12 CANS");
 13180  004774  0E12               	movlw	low STR_74
 13181  004776  0100               	movlb	0	; () banked
 13182  004778  6F8E               	movwf	printf@f& (0+255),b
 13183  00477A  0EFF               	movlw	high STR_74
 13184  00477C  0100               	movlb	0	; () banked
 13185  00477E  6F8F               	movwf	(printf@f+1)& (0+255),b
 13186  004780  EC16  F00E         	call	_printf	;wreg free
 13187                           
 13188                           ;Test.c: 109: printf("ALG3: 1 CAN");
 13189  004784  0E65               	movlw	low STR_75
 13190  004786  0100               	movlb	0	; () banked
 13191  004788  6F8E               	movwf	printf@f& (0+255),b
 13192  00478A  0EFF               	movlw	high STR_75
 13193  00478C  0100               	movlb	0	; () banked
 13194  00478E  6F8F               	movwf	(printf@f+1)& (0+255),b
 13195  004790  EC16  F00E         	call	_printf	;wreg free
 13196                           
 13197                           ;Test.c: 115: printf("ALG4: ALL CANS");
 13198  004794  0ED7               	movlw	low STR_76
 13199  004796  0100               	movlb	0	; () banked
 13200  004798  6F8E               	movwf	printf@f& (0+255),b
 13201  00479A  0EFE               	movlw	high STR_76
 13202  00479C  0100               	movlb	0	; () banked
 13203  00479E  6F8F               	movwf	(printf@f+1)& (0+255),b
 13204  0047A0  EC16  F00E         	call	_printf	;wreg free
 13205                           
 13206                           ;Test.c: 120: printf("ALG5: NO CANS");
 13207  0047A4  0E20               	movlw	low STR_77
 13208  0047A6  0100               	movlb	0	; () banked
 13209  0047A8  6F8E               	movwf	printf@f& (0+255),b
 13210  0047AA  0EFF               	movlw	high STR_77
 13211  0047AC  0100               	movlb	0	; () banked
 13212  0047AE  6F8F               	movwf	(printf@f+1)& (0+255),b
 13213  0047B0  EC16  F00E         	call	_printf	;wreg free
 13214  0047B4  0012               	return		;funcret
 13215  0047B6                     __end_of_algorithmTest:
 13216                           	opt stack 0
 13217                           tblptru	equ	0xFF8
 13218                           tblptrh	equ	0xFF7
 13219                           tblptrl	equ	0xFF6
 13220                           tablat	equ	0xFF5
 13221                           prodh	equ	0xFF4
 13222                           prodl	equ	0xFF3
 13223                           intcon	equ	0xFF2
 13224                           intcon2	equ	0xFF1
 13225                           intcon3	equ	0xFF0
 13226                           postinc0	equ	0xFEE
 13227                           wreg	equ	0xFE8
 13228                           postdec1	equ	0xFE5
 13229                           fsr1l	equ	0xFE1
 13230                           indf2	equ	0xFDF
 13231                           postinc2	equ	0xFDE
 13232                           postdec2	equ	0xFDD
 13233                           fsr2h	equ	0xFDA
 13234                           fsr2l	equ	0xFD9
 13235                           status	equ	0xFD8
 13236                           
 13237 ;; *************** function _actuatorTest *****************
 13238 ;; Defined at:
 13239 ;;		line 202 in file "Test.c"
 13240 ;; Parameters:    Size  Location     Type
 13241 ;;		None
 13242 ;; Auto vars:     Size  Location     Type
 13243 ;;  i               1   45[BANK0 ] unsigned char 
 13244 ;;  i               1   67[BANK0 ] unsigned char 
 13245 ;;  i               1   66[BANK0 ] unsigned char 
 13246 ;;  i               1   65[BANK0 ] unsigned char 
 13247 ;;  i               1   64[BANK0 ] unsigned char 
 13248 ;;  i               1   63[BANK0 ] unsigned char 
 13249 ;;  i               1   62[BANK0 ] unsigned char 
 13250 ;;  i               1   61[BANK0 ] unsigned char 
 13251 ;;  i               1   60[BANK0 ] unsigned char 
 13252 ;;  i               1   59[BANK0 ] unsigned char 
 13253 ;;  i               1   58[BANK0 ] unsigned char 
 13254 ;;  i               1   57[BANK0 ] unsigned char 
 13255 ;;  i               1   56[BANK0 ] unsigned char 
 13256 ;;  i               1   55[BANK0 ] unsigned char 
 13257 ;;  i               1   54[BANK0 ] unsigned char 
 13258 ;;  i               1   53[BANK0 ] unsigned char 
 13259 ;;  i               1   52[BANK0 ] unsigned char 
 13260 ;;  i               1   51[BANK0 ] unsigned char 
 13261 ;;  i               1   50[BANK0 ] unsigned char 
 13262 ;;  i               1   49[BANK0 ] unsigned char 
 13263 ;;  i               1   48[BANK0 ] unsigned char 
 13264 ;;  i               1   47[BANK0 ] unsigned char 
 13265 ;;  i               1   46[BANK0 ] unsigned char 
 13266 ;;  i               2   68[BANK0 ] int 
 13267 ;; Return value:  Size  Location     Type
 13268 ;;                  1    wreg      void 
 13269 ;; Registers used:
 13270 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13271 ;; Tracked objects:
 13272 ;;		On entry : 0/0
 13273 ;;		On exit  : 0/0
 13274 ;;		Unchanged: 0/0
 13275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13276 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13277 ;;      Locals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13278 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13279 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13280 ;;Total ram usage:       27 bytes
 13281 ;; Hardware stack levels used:    1
 13282 ;; Hardware stack levels required when called:   10
 13283 ;; This function calls:
 13284 ;;		_lcdInst
 13285 ;;		_printf
 13286 ;;		_updateServoPosition
 13287 ;; This function is called by:
 13288 ;;		_Test
 13289 ;; This function uses a non-reentrant model
 13290 ;;
 13291                           
 13292                           	psect	text45
 13293  0008DA                     __ptext45:
 13294                           	opt stack 0
 13295  0008DA                     _actuatorTest:
 13296                           	opt stack 19
 13297                           
 13298                           ;Test.c: 204: int i = 0;
 13299                           
 13300                           ;incstack = 0
 13301  0008DA  0E00               	movlw	0
 13302  0008DC  0100               	movlb	0	; () banked
 13303  0008DE  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 13304  0008E0  0E00               	movlw	0
 13305  0008E2  6FC4               	movwf	actuatorTest@i& (0+255),b
 13306                           
 13307                           ; BSR set to: 0
 13308                           ;Test.c: 206: (INTCONbits.GIE = 1);
 13309  0008E4  8EF2               	bsf	intcon,7,c	;volatile
 13310                           
 13311                           ; BSR set to: 0
 13312                           ;Test.c: 207: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13313  0008E6  0E01               	movlw	1
 13314  0008E8  EC10  F02E         	call	_lcdInst
 13315  0008EC  0E68               	movlw	104
 13316  0008EE  0100               	movlb	0	; () banked
 13317  0008F0  6FAB               	movwf	??_actuatorTest& (0+255),b
 13318  0008F2  0EE4               	movlw	228
 13319  0008F4                     u10637:
 13320  0008F4  2EE8               	decfsz	wreg,f,c
 13321  0008F6  D7FE               	bra	u10637
 13322  0008F8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13323  0008FA  D7FC               	bra	u10637
 13324  0008FC  F000               	nop	
 13325  0008FE  0E80               	movlw	128
 13326  000900  EC10  F02E         	call	_lcdInst
 13327                           
 13328                           ;Test.c: 208: printf("ACTUATORS");
 13329  000904  0E91               	movlw	low STR_89
 13330  000906  0100               	movlb	0	; () banked
 13331  000908  6F8E               	movwf	printf@f& (0+255),b
 13332  00090A  0EFF               	movlw	high STR_89
 13333  00090C  0100               	movlb	0	; () banked
 13334  00090E  6F8F               	movwf	(printf@f+1)& (0+255),b
 13335  000910  EC16  F00E         	call	_printf	;wreg free
 13336                           
 13337                           ;Test.c: 209: lcdInst(0b11000000);;
 13338  000914  0EC0               	movlw	192
 13339  000916  EC10  F02E         	call	_lcdInst
 13340                           
 13341                           ;Test.c: 210: printf("PUSH TO START");
 13342  00091A  0E2E               	movlw	low STR_72
 13343  00091C  0100               	movlb	0	; () banked
 13344  00091E  6F8E               	movwf	printf@f& (0+255),b
 13345  000920  0EFF               	movlw	high STR_72
 13346  000922  0100               	movlb	0	; () banked
 13347  000924  6F8F               	movwf	(printf@f+1)& (0+255),b
 13348  000926  EC16  F00E         	call	_printf	;wreg free
 13349                           
 13350                           ;Test.c: 211: _delay((unsigned long)((100)*(32000000/4000.0)));
 13351  00092A  0E05               	movlw	5
 13352  00092C  0100               	movlb	0	; () banked
 13353  00092E  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 13354  000930  0E0F               	movlw	15
 13355  000932  0100               	movlb	0	; () banked
 13356  000934  6FAB               	movwf	??_actuatorTest& (0+255),b
 13357  000936  0EF1               	movlw	241
 13358  000938                     u10647:
 13359  000938  2EE8               	decfsz	wreg,f,c
 13360  00093A  D7FE               	bra	u10647
 13361  00093C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13362  00093E  D7FC               	bra	u10647
 13363  000940  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 13364  000942  D7FA               	bra	u10647
 13365  000944                     l1294:
 13366  000944  A281               	btfss	3969,1,c	;volatile
 13367  000946  D7FE               	goto	l1294
 13368  000948                     l1297:
 13369  000948  B281               	btfsc	3969,1,c	;volatile
 13370  00094A  D7FE               	goto	l1297
 13371                           
 13372                           ;Test.c: 214: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13373  00094C  0E01               	movlw	1
 13374  00094E  EC10  F02E         	call	_lcdInst
 13375  000952  0E68               	movlw	104
 13376  000954  0100               	movlb	0	; () banked
 13377  000956  6FAB               	movwf	??_actuatorTest& (0+255),b
 13378  000958  0EE4               	movlw	228
 13379  00095A                     u10657:
 13380  00095A  2EE8               	decfsz	wreg,f,c
 13381  00095C  D7FE               	bra	u10657
 13382  00095E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13383  000960  D7FC               	bra	u10657
 13384  000962  F000               	nop	
 13385  000964  0E80               	movlw	128
 13386  000966  EC10  F02E         	call	_lcdInst
 13387                           
 13388                           ;Test.c: 219: printf("TST: DC MOTORS");
 13389  00096A  0EE6               	movlw	low STR_91
 13390  00096C  0100               	movlb	0	; () banked
 13391  00096E  6F8E               	movwf	printf@f& (0+255),b
 13392  000970  0EFE               	movlw	high STR_91
 13393  000972  0100               	movlb	0	; () banked
 13394  000974  6F8F               	movwf	(printf@f+1)& (0+255),b
 13395  000976  EC16  F00E         	call	_printf	;wreg free
 13396                           
 13397                           ;Test.c: 220: lcdInst(0b11000000);;
 13398  00097A  0EC0               	movlw	192
 13399  00097C  EC10  F02E         	call	_lcdInst
 13400                           
 13401                           ;Test.c: 221: printf("PIN RA5 HIGH.");
 13402  000980  0E04               	movlw	low STR_92
 13403  000982  0100               	movlb	0	; () banked
 13404  000984  6F8E               	movwf	printf@f& (0+255),b
 13405  000986  0EFF               	movlw	high STR_92
 13406  000988  0100               	movlb	0	; () banked
 13407  00098A  6F8F               	movwf	(printf@f+1)& (0+255),b
 13408  00098C  EC16  F00E         	call	_printf	;wreg free
 13409                           
 13410                           ;Test.c: 222: LATBbits.LATB2 = 1;
 13411  000990  848A               	bsf	3978,2,c	;volatile
 13412                           
 13413                           ;Test.c: 223: for(i=0;i<5;i++){for(char i=0;i<100;i++){_delay((unsigned long)((10)*(3200
      +                          0000/4000.0)));};}
 13414  000992  0E00               	movlw	0
 13415  000994  0100               	movlb	0	; () banked
 13416  000996  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 13417  000998  0E00               	movlw	0
 13418  00099A  6FC4               	movwf	actuatorTest@i& (0+255),b
 13419                           
 13420                           ; BSR set to: 0
 13421  00099C  0100               	movlb	0	; () banked
 13422  00099E  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13423  0009A0  D008               	goto	l8392
 13424  0009A2  0100               	movlb	0	; () banked
 13425  0009A4  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 13426  0009A6  E123               	bnz	l1301
 13427  0009A8  0E05               	movlw	5
 13428  0009AA  0100               	movlb	0	; () banked
 13429  0009AC  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 13430  0009AE  B0D8               	btfsc	status,0,c
 13431  0009B0  D01E               	goto	l1301
 13432  0009B2                     l8392:
 13433                           
 13434                           ; BSR set to: 0
 13435  0009B2  0E00               	movlw	0
 13436  0009B4  0100               	movlb	0	; () banked
 13437  0009B6  6FAD               	movwf	actuatorTest@i_1735& (0+255),b
 13438  0009B8                     l8394:
 13439                           
 13440                           ; BSR set to: 0
 13441  0009B8  0E63               	movlw	99
 13442  0009BA  0100               	movlb	0	; () banked
 13443  0009BC  65AD               	cpfsgt	actuatorTest@i_1735& (0+255),b
 13444  0009BE  D001               	goto	l8398
 13445  0009C0  D00C               	goto	l8402
 13446  0009C2                     l8398:
 13447                           
 13448                           ; BSR set to: 0
 13449  0009C2  0E68               	movlw	104
 13450  0009C4  0100               	movlb	0	; () banked
 13451  0009C6  6FAB               	movwf	??_actuatorTest& (0+255),b
 13452  0009C8  0EE4               	movlw	228
 13453  0009CA                     u10667:
 13454  0009CA  2EE8               	decfsz	wreg,f,c
 13455  0009CC  D7FE               	bra	u10667
 13456  0009CE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13457  0009D0  D7FC               	bra	u10667
 13458  0009D2  F000               	nop	
 13459  0009D4  0100               	movlb	0	; () banked
 13460  0009D6  2BAD               	incf	actuatorTest@i_1735& (0+255),f,b
 13461  0009D8  D7EF               	goto	l8394
 13462  0009DA                     l8402:
 13463                           
 13464                           ; BSR set to: 0
 13465  0009DA  0100               	movlb	0	; () banked
 13466  0009DC  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 13467  0009DE  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 13468                           
 13469                           ; BSR set to: 0
 13470  0009E0  0100               	movlb	0	; () banked
 13471  0009E2  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13472  0009E4  D7E6               	goto	l8392
 13473  0009E6  0100               	movlb	0	; () banked
 13474  0009E8  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 13475  0009EA  E101               	bnz	u7290
 13476  0009EC  D7DD               	goto	L13
 13477  0009EE                     u7290:
 13478  0009EE                     l1301:
 13479                           
 13480                           ; BSR set to: 0
 13481                           ;Test.c: 224: LATBbits.LATB2 = 0;
 13482  0009EE  948A               	bcf	3978,2,c	;volatile
 13483                           
 13484                           ; BSR set to: 0
 13485                           ;Test.c: 225: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13486  0009F0  0E01               	movlw	1
 13487  0009F2  EC10  F02E         	call	_lcdInst
 13488  0009F6  0E68               	movlw	104
 13489  0009F8  0100               	movlb	0	; () banked
 13490  0009FA  6FAB               	movwf	??_actuatorTest& (0+255),b
 13491  0009FC  0EE4               	movlw	228
 13492  0009FE                     u10677:
 13493  0009FE  2EE8               	decfsz	wreg,f,c
 13494  000A00  D7FE               	bra	u10677
 13495  000A02  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13496  000A04  D7FC               	bra	u10677
 13497  000A06  F000               	nop	
 13498  000A08  0E80               	movlw	128
 13499  000A0A  EC10  F02E         	call	_lcdInst
 13500                           
 13501                           ;Test.c: 231: printf("TST: COND SOLN'D");
 13502  000A0E  0E51               	movlw	low STR_93
 13503  000A10  0100               	movlb	0	; () banked
 13504  000A12  6F8E               	movwf	printf@f& (0+255),b
 13505  000A14  0EFC               	movlw	high STR_93
 13506  000A16  0100               	movlb	0	; () banked
 13507  000A18  6F8F               	movwf	(printf@f+1)& (0+255),b
 13508  000A1A  EC16  F00E         	call	_printf	;wreg free
 13509                           
 13510                           ;Test.c: 232: lcdInst(0b11000000);;
 13511  000A1E  0EC0               	movlw	192
 13512  000A20  EC10  F02E         	call	_lcdInst
 13513                           
 13514                           ;Test.c: 233: printf("PIN RA3...");
 13515  000A24  0E71               	movlw	low STR_94
 13516  000A26  0100               	movlb	0	; () banked
 13517  000A28  6F8E               	movwf	printf@f& (0+255),b
 13518  000A2A  0EFF               	movlw	high STR_94
 13519  000A2C  0100               	movlb	0	; () banked
 13520  000A2E  6F8F               	movwf	(printf@f+1)& (0+255),b
 13521  000A30  EC16  F00E         	call	_printf	;wreg free
 13522                           
 13523                           ;Test.c: 234: for(i=0;i<5;i++){
 13524  000A34  0E00               	movlw	0
 13525  000A36  0100               	movlb	0	; () banked
 13526  000A38  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 13527  000A3A  0E00               	movlw	0
 13528  000A3C  6FC4               	movwf	actuatorTest@i& (0+255),b
 13529                           
 13530                           ; BSR set to: 0
 13531  000A3E  0100               	movlb	0	; () banked
 13532  000A40  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13533  000A42  D008               	goto	l1304
 13534  000A44  0100               	movlb	0	; () banked
 13535  000A46  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 13536  000A48  E12C               	bnz	l1305
 13537  000A4A  0E05               	movlw	5
 13538  000A4C  0100               	movlb	0	; () banked
 13539  000A4E  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 13540  000A50  B0D8               	btfsc	status,0,c
 13541  000A52  D027               	goto	l1305
 13542  000A54                     l1304:
 13543                           
 13544                           ; BSR set to: 0
 13545                           ;Test.c: 235: LATAbits.LATA3 = 1;
 13546  000A54  8689               	bsf	3977,3,c	;volatile
 13547                           
 13548                           ; BSR set to: 0
 13549                           ;Test.c: 236: _delay((unsigned long)((300)*(32000000/4000.0)));
 13550  000A56  0E0D               	movlw	13
 13551  000A58  0100               	movlb	0	; () banked
 13552  000A5A  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 13553  000A5C  0E2D               	movlw	45
 13554  000A5E  0100               	movlb	0	; () banked
 13555  000A60  6FAB               	movwf	??_actuatorTest& (0+255),b
 13556  000A62  0ED7               	movlw	215
 13557  000A64                     u10687:
 13558  000A64  2EE8               	decfsz	wreg,f,c
 13559  000A66  D7FE               	bra	u10687
 13560  000A68  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13561  000A6A  D7FC               	bra	u10687
 13562  000A6C  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 13563  000A6E  D7FA               	bra	u10687
 13564  000A70  D000               	nop2	
 13565                           
 13566                           ;Test.c: 237: LATAbits.LATA3 = !1;
 13567  000A72  9689               	bcf	3977,3,c	;volatile
 13568                           
 13569                           ;Test.c: 238: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 13570  000A74  0E1D               	movlw	29
 13571  000A76  0100               	movlb	0	; () banked
 13572  000A78  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 13573  000A7A  0E69               	movlw	105
 13574  000A7C  0100               	movlb	0	; () banked
 13575  000A7E  6FAB               	movwf	??_actuatorTest& (0+255),b
 13576  000A80  0EA5               	movlw	165
 13577  000A82                     u10697:
 13578  000A82  2EE8               	decfsz	wreg,f,c
 13579  000A84  D7FE               	bra	u10697
 13580  000A86  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13581  000A88  D7FC               	bra	u10697
 13582  000A8A  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 13583  000A8C  D7FA               	bra	u10697
 13584  000A8E  0100               	movlb	0	; () banked
 13585  000A90  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 13586  000A92  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 13587  000A94  0100               	movlb	0	; () banked
 13588  000A96  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13589  000A98  D7DD               	goto	l1304
 13590  000A9A  0100               	movlb	0	; () banked
 13591  000A9C  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 13592  000A9E  E101               	bnz	u7310
 13593  000AA0  D7D4               	goto	L14
 13594  000AA2                     u7310:
 13595  000AA2                     l1305:
 13596                           
 13597                           ; BSR set to: 0
 13598                           ;Test.c: 239: }
 13599                           ;Test.c: 240: LATAbits.LATA3 = !1;
 13600  000AA2  9689               	bcf	3977,3,c	;volatile
 13601                           
 13602                           ; BSR set to: 0
 13603                           ;Test.c: 241: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13604  000AA4  0E01               	movlw	1
 13605  000AA6  EC10  F02E         	call	_lcdInst
 13606  000AAA  0E68               	movlw	104
 13607  000AAC  0100               	movlb	0	; () banked
 13608  000AAE  6FAB               	movwf	??_actuatorTest& (0+255),b
 13609  000AB0  0EE4               	movlw	228
 13610  000AB2                     u10707:
 13611  000AB2  2EE8               	decfsz	wreg,f,c
 13612  000AB4  D7FE               	bra	u10707
 13613  000AB6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13614  000AB8  D7FC               	bra	u10707
 13615  000ABA  F000               	nop	
 13616  000ABC  0E80               	movlw	128
 13617  000ABE  EC10  F02E         	call	_lcdInst
 13618                           
 13619                           ;Test.c: 247: printf("TST: PUSH SOLN'D");
 13620  000AC2  0E62               	movlw	low STR_95
 13621  000AC4  0100               	movlb	0	; () banked
 13622  000AC6  6F8E               	movwf	printf@f& (0+255),b
 13623  000AC8  0EFC               	movlw	high STR_95
 13624  000ACA  0100               	movlb	0	; () banked
 13625  000ACC  6F8F               	movwf	(printf@f+1)& (0+255),b
 13626  000ACE  EC16  F00E         	call	_printf	;wreg free
 13627                           
 13628                           ;Test.c: 248: lcdInst(0b11000000);;
 13629  000AD2  0EC0               	movlw	192
 13630  000AD4  EC10  F02E         	call	_lcdInst
 13631                           
 13632                           ;Test.c: 249: printf("PIN RA4...");
 13633  000AD8  0E7C               	movlw	low STR_96
 13634  000ADA  0100               	movlb	0	; () banked
 13635  000ADC  6F8E               	movwf	printf@f& (0+255),b
 13636  000ADE  0EFF               	movlw	high STR_96
 13637  000AE0  0100               	movlb	0	; () banked
 13638  000AE2  6F8F               	movwf	(printf@f+1)& (0+255),b
 13639  000AE4  EC16  F00E         	call	_printf	;wreg free
 13640                           
 13641                           ;Test.c: 250: for(i=0;i<5;i++){
 13642  000AE8  0E00               	movlw	0
 13643  000AEA  0100               	movlb	0	; () banked
 13644  000AEC  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 13645  000AEE  0E00               	movlw	0
 13646  000AF0  6FC4               	movwf	actuatorTest@i& (0+255),b
 13647                           
 13648                           ; BSR set to: 0
 13649  000AF2  0100               	movlb	0	; () banked
 13650  000AF4  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13651  000AF6  D008               	goto	l1306
 13652  000AF8  0100               	movlb	0	; () banked
 13653  000AFA  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 13654  000AFC  E12C               	bnz	l1307
 13655  000AFE  0E05               	movlw	5
 13656  000B00  0100               	movlb	0	; () banked
 13657  000B02  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 13658  000B04  B0D8               	btfsc	status,0,c
 13659  000B06  D027               	goto	l1307
 13660  000B08                     l1306:
 13661                           
 13662                           ; BSR set to: 0
 13663                           ;Test.c: 251: LATAbits.LATA4 = 1;
 13664  000B08  8889               	bsf	3977,4,c	;volatile
 13665                           
 13666                           ; BSR set to: 0
 13667                           ;Test.c: 252: _delay((unsigned long)((300)*(32000000/4000.0)));
 13668  000B0A  0E0D               	movlw	13
 13669  000B0C  0100               	movlb	0	; () banked
 13670  000B0E  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 13671  000B10  0E2D               	movlw	45
 13672  000B12  0100               	movlb	0	; () banked
 13673  000B14  6FAB               	movwf	??_actuatorTest& (0+255),b
 13674  000B16  0ED7               	movlw	215
 13675  000B18                     u10717:
 13676  000B18  2EE8               	decfsz	wreg,f,c
 13677  000B1A  D7FE               	bra	u10717
 13678  000B1C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13679  000B1E  D7FC               	bra	u10717
 13680  000B20  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 13681  000B22  D7FA               	bra	u10717
 13682  000B24  D000               	nop2	
 13683                           
 13684                           ;Test.c: 253: LATAbits.LATA4 = !1;
 13685  000B26  9889               	bcf	3977,4,c	;volatile
 13686                           
 13687                           ;Test.c: 254: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 13688  000B28  0E1D               	movlw	29
 13689  000B2A  0100               	movlb	0	; () banked
 13690  000B2C  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 13691  000B2E  0E69               	movlw	105
 13692  000B30  0100               	movlb	0	; () banked
 13693  000B32  6FAB               	movwf	??_actuatorTest& (0+255),b
 13694  000B34  0EA5               	movlw	165
 13695  000B36                     u10727:
 13696  000B36  2EE8               	decfsz	wreg,f,c
 13697  000B38  D7FE               	bra	u10727
 13698  000B3A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13699  000B3C  D7FC               	bra	u10727
 13700  000B3E  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 13701  000B40  D7FA               	bra	u10727
 13702  000B42  0100               	movlb	0	; () banked
 13703  000B44  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 13704  000B46  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 13705  000B48  0100               	movlb	0	; () banked
 13706  000B4A  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13707  000B4C  D7DD               	goto	l1306
 13708  000B4E  0100               	movlb	0	; () banked
 13709  000B50  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 13710  000B52  E101               	bnz	u7330
 13711  000B54  D7D4               	goto	L15
 13712  000B56                     u7330:
 13713  000B56                     l1307:
 13714                           
 13715                           ; BSR set to: 0
 13716                           ;Test.c: 255: }
 13717                           ;Test.c: 256: LATAbits.LATA4 = !1;
 13718  000B56  9889               	bcf	3977,4,c	;volatile
 13719                           
 13720                           ; BSR set to: 0
 13721                           ;Test.c: 257: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13722  000B58  0E01               	movlw	1
 13723  000B5A  EC10  F02E         	call	_lcdInst
 13724  000B5E  0E68               	movlw	104
 13725  000B60  0100               	movlb	0	; () banked
 13726  000B62  6FAB               	movwf	??_actuatorTest& (0+255),b
 13727  000B64  0EE4               	movlw	228
 13728  000B66                     u10737:
 13729  000B66  2EE8               	decfsz	wreg,f,c
 13730  000B68  D7FE               	bra	u10737
 13731  000B6A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13732  000B6C  D7FC               	bra	u10737
 13733  000B6E  F000               	nop	
 13734  000B70  0E80               	movlw	128
 13735  000B72  EC10  F02E         	call	_lcdInst
 13736                           
 13737                           ;Test.c: 260: machine_state = Sorting_state;
 13738  000B76  0E01               	movlw	1
 13739  000B78  0100               	movlb	0	; () banked
 13740  000B7A  6FFC               	movwf	_machine_state& (0+255),b
 13741                           
 13742                           ; BSR set to: 0
 13743                           ;Test.c: 261: was_low_1 = 0;
 13744  000B7C  0E00               	movlw	0
 13745  000B7E  6E78               	movwf	_was_low_1+1,c	;volatile
 13746  000B80  0E00               	movlw	0
 13747  000B82  6E77               	movwf	_was_low_1,c	;volatile
 13748                           
 13749                           ; BSR set to: 0
 13750                           ;Test.c: 262: was_low_1 = 0;
 13751  000B84  0E00               	movlw	0
 13752  000B86  6E78               	movwf	_was_low_1+1,c	;volatile
 13753  000B88  0E00               	movlw	0
 13754  000B8A  6E77               	movwf	_was_low_1,c	;volatile
 13755                           
 13756                           ; BSR set to: 0
 13757                           ;Test.c: 269: printf("TST: PAN SERVO");
 13758  000B8C  0EC8               	movlw	low STR_97
 13759  000B8E  0100               	movlb	0	; () banked
 13760  000B90  6F8E               	movwf	printf@f& (0+255),b
 13761  000B92  0EFE               	movlw	high STR_97
 13762  000B94  0100               	movlb	0	; () banked
 13763  000B96  6F8F               	movwf	(printf@f+1)& (0+255),b
 13764  000B98  EC16  F00E         	call	_printf	;wreg free
 13765                           
 13766                           ;Test.c: 270: lcdInst(0b11000000);;
 13767  000B9C  0EC0               	movlw	192
 13768  000B9E  EC10  F02E         	call	_lcdInst
 13769                           
 13770                           ;Test.c: 271: printf("MIDDLE -- 2s    ");
 13771  000BA2  0EB8               	movlw	low STR_98
 13772  000BA4  0100               	movlb	0	; () banked
 13773  000BA6  6F8E               	movwf	printf@f& (0+255),b
 13774  000BA8  0EFB               	movlw	high STR_98
 13775  000BAA  0100               	movlb	0	; () banked
 13776  000BAC  6F8F               	movwf	(printf@f+1)& (0+255),b
 13777  000BAE  EC16  F00E         	call	_printf	;wreg free
 13778                           
 13779                           ;Test.c: 272: updateServoPosition(1200, 1);
 13780  000BB2  0E04               	movlw	4
 13781  000BB4  0100               	movlb	0	; () banked
 13782  000BB6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13783  000BB8  0EB0               	movlw	176
 13784  000BBA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13785  000BBC  0E00               	movlw	0
 13786  000BBE  0100               	movlb	0	; () banked
 13787  000BC0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13788  000BC2  0E01               	movlw	1
 13789  000BC4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13790  000BC6  EC33  F027         	call	_updateServoPosition	;wreg free
 13791                           
 13792                           ;Test.c: 273: TMR1ON = 1;
 13793  000BCA  80CD               	bsf	4045,0,c	;volatile
 13794                           
 13795                           ;Test.c: 274: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13796  000BCC  0E00               	movlw	0
 13797  000BCE  0100               	movlb	0	; () banked
 13798  000BD0  6FAE               	movwf	actuatorTest@i_1742& (0+255),b
 13799  000BD2                     l8478:
 13800                           
 13801                           ; BSR set to: 0
 13802  000BD2  0E63               	movlw	99
 13803  000BD4  0100               	movlb	0	; () banked
 13804  000BD6  65AE               	cpfsgt	actuatorTest@i_1742& (0+255),b
 13805  000BD8  D001               	goto	l8482
 13806  000BDA  D00C               	goto	l8486
 13807  000BDC                     l8482:
 13808                           
 13809                           ; BSR set to: 0
 13810  000BDC  0E68               	movlw	104
 13811  000BDE  0100               	movlb	0	; () banked
 13812  000BE0  6FAB               	movwf	??_actuatorTest& (0+255),b
 13813  000BE2  0EE4               	movlw	228
 13814  000BE4                     u10747:
 13815  000BE4  2EE8               	decfsz	wreg,f,c
 13816  000BE6  D7FE               	bra	u10747
 13817  000BE8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13818  000BEA  D7FC               	bra	u10747
 13819  000BEC  F000               	nop	
 13820  000BEE  0100               	movlb	0	; () banked
 13821  000BF0  2BAE               	incf	actuatorTest@i_1742& (0+255),f,b
 13822  000BF2  D7EF               	goto	l8478
 13823  000BF4                     l8486:
 13824                           
 13825                           ; BSR set to: 0
 13826  000BF4  0E00               	movlw	0
 13827  000BF6  0100               	movlb	0	; () banked
 13828  000BF8  6FAF               	movwf	actuatorTest@i_1743& (0+255),b
 13829  000BFA                     l8488:
 13830                           
 13831                           ; BSR set to: 0
 13832  000BFA  0E63               	movlw	99
 13833  000BFC  0100               	movlb	0	; () banked
 13834  000BFE  65AF               	cpfsgt	actuatorTest@i_1743& (0+255),b
 13835  000C00  D001               	goto	l8492
 13836  000C02  D00C               	goto	l8496
 13837  000C04                     l8492:
 13838                           
 13839                           ; BSR set to: 0
 13840  000C04  0E68               	movlw	104
 13841  000C06  0100               	movlb	0	; () banked
 13842  000C08  6FAB               	movwf	??_actuatorTest& (0+255),b
 13843  000C0A  0EE4               	movlw	228
 13844  000C0C                     u10757:
 13845  000C0C  2EE8               	decfsz	wreg,f,c
 13846  000C0E  D7FE               	bra	u10757
 13847  000C10  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13848  000C12  D7FC               	bra	u10757
 13849  000C14  F000               	nop	
 13850  000C16  0100               	movlb	0	; () banked
 13851  000C18  2BAF               	incf	actuatorTest@i_1743& (0+255),f,b
 13852  000C1A  D7EF               	goto	l8488
 13853  000C1C                     l8496:
 13854                           
 13855                           ; BSR set to: 0
 13856                           ;Test.c: 276: lcdInst(0b10000000);;lcdInst(0b11000000);;
 13857  000C1C  0E80               	movlw	128
 13858  000C1E  EC10  F02E         	call	_lcdInst
 13859  000C22  0EC0               	movlw	192
 13860  000C24  EC10  F02E         	call	_lcdInst
 13861                           
 13862                           ;Test.c: 277: printf("RIGHT -- 2s     ");
 13863  000C28  0EA7               	movlw	low STR_99
 13864  000C2A  0100               	movlb	0	; () banked
 13865  000C2C  6F8E               	movwf	printf@f& (0+255),b
 13866  000C2E  0EFB               	movlw	high STR_99
 13867  000C30  0100               	movlb	0	; () banked
 13868  000C32  6F8F               	movwf	(printf@f+1)& (0+255),b
 13869  000C34  EC16  F00E         	call	_printf	;wreg free
 13870                           
 13871                           ;Test.c: 278: updateServoPosition(500, 1);
 13872  000C38  0E01               	movlw	1
 13873  000C3A  0100               	movlb	0	; () banked
 13874  000C3C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13875  000C3E  0EF4               	movlw	244
 13876  000C40  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13877  000C42  0E00               	movlw	0
 13878  000C44  0100               	movlb	0	; () banked
 13879  000C46  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13880  000C48  0E01               	movlw	1
 13881  000C4A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13882  000C4C  EC33  F027         	call	_updateServoPosition	;wreg free
 13883                           
 13884                           ;Test.c: 279: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13885  000C50  0E00               	movlw	0
 13886  000C52  0100               	movlb	0	; () banked
 13887  000C54  6FB0               	movwf	actuatorTest@i_1745& (0+255),b
 13888  000C56                     l8504:
 13889                           
 13890                           ; BSR set to: 0
 13891  000C56  0E63               	movlw	99
 13892  000C58  0100               	movlb	0	; () banked
 13893  000C5A  65B0               	cpfsgt	actuatorTest@i_1745& (0+255),b
 13894  000C5C  D001               	goto	l8508
 13895  000C5E  D00C               	goto	l8512
 13896  000C60                     l8508:
 13897                           
 13898                           ; BSR set to: 0
 13899  000C60  0E68               	movlw	104
 13900  000C62  0100               	movlb	0	; () banked
 13901  000C64  6FAB               	movwf	??_actuatorTest& (0+255),b
 13902  000C66  0EE4               	movlw	228
 13903  000C68                     u10767:
 13904  000C68  2EE8               	decfsz	wreg,f,c
 13905  000C6A  D7FE               	bra	u10767
 13906  000C6C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13907  000C6E  D7FC               	bra	u10767
 13908  000C70  F000               	nop	
 13909  000C72  0100               	movlb	0	; () banked
 13910  000C74  2BB0               	incf	actuatorTest@i_1745& (0+255),f,b
 13911  000C76  D7EF               	goto	l8504
 13912  000C78                     l8512:
 13913                           
 13914                           ; BSR set to: 0
 13915  000C78  0E00               	movlw	0
 13916  000C7A  0100               	movlb	0	; () banked
 13917  000C7C  6FB1               	movwf	actuatorTest@i_1746& (0+255),b
 13918  000C7E                     l8514:
 13919                           
 13920                           ; BSR set to: 0
 13921  000C7E  0E63               	movlw	99
 13922  000C80  0100               	movlb	0	; () banked
 13923  000C82  65B1               	cpfsgt	actuatorTest@i_1746& (0+255),b
 13924  000C84  D001               	goto	l8518
 13925  000C86  D00C               	goto	l8522
 13926  000C88                     l8518:
 13927                           
 13928                           ; BSR set to: 0
 13929  000C88  0E68               	movlw	104
 13930  000C8A  0100               	movlb	0	; () banked
 13931  000C8C  6FAB               	movwf	??_actuatorTest& (0+255),b
 13932  000C8E  0EE4               	movlw	228
 13933  000C90                     u10777:
 13934  000C90  2EE8               	decfsz	wreg,f,c
 13935  000C92  D7FE               	bra	u10777
 13936  000C94  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13937  000C96  D7FC               	bra	u10777
 13938  000C98  F000               	nop	
 13939  000C9A  0100               	movlb	0	; () banked
 13940  000C9C  2BB1               	incf	actuatorTest@i_1746& (0+255),f,b
 13941  000C9E  D7EF               	goto	l8514
 13942  000CA0                     l8522:
 13943                           
 13944                           ; BSR set to: 0
 13945                           ;Test.c: 281: lcdInst(0b10000000);;lcdInst(0b11000000);;
 13946  000CA0  0E80               	movlw	128
 13947  000CA2  EC10  F02E         	call	_lcdInst
 13948  000CA6  0EC0               	movlw	192
 13949  000CA8  EC10  F02E         	call	_lcdInst
 13950                           
 13951                           ;Test.c: 282: printf("LEFT -- 2s      ");
 13952  000CAC  0E85               	movlw	low STR_100
 13953  000CAE  0100               	movlb	0	; () banked
 13954  000CB0  6F8E               	movwf	printf@f& (0+255),b
 13955  000CB2  0EFB               	movlw	high STR_100
 13956  000CB4  0100               	movlb	0	; () banked
 13957  000CB6  6F8F               	movwf	(printf@f+1)& (0+255),b
 13958  000CB8  EC16  F00E         	call	_printf	;wreg free
 13959                           
 13960                           ;Test.c: 283: updateServoPosition(2400, 1);
 13961  000CBC  0E09               	movlw	9
 13962  000CBE  0100               	movlb	0	; () banked
 13963  000CC0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13964  000CC2  0E60               	movlw	96
 13965  000CC4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13966  000CC6  0E00               	movlw	0
 13967  000CC8  0100               	movlb	0	; () banked
 13968  000CCA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13969  000CCC  0E01               	movlw	1
 13970  000CCE  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13971  000CD0  EC33  F027         	call	_updateServoPosition	;wreg free
 13972                           
 13973                           ;Test.c: 284: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13974  000CD4  0E00               	movlw	0
 13975  000CD6  0100               	movlb	0	; () banked
 13976  000CD8  6FB2               	movwf	actuatorTest@i_1748& (0+255),b
 13977  000CDA                     l8530:
 13978                           
 13979                           ; BSR set to: 0
 13980  000CDA  0E63               	movlw	99
 13981  000CDC  0100               	movlb	0	; () banked
 13982  000CDE  65B2               	cpfsgt	actuatorTest@i_1748& (0+255),b
 13983  000CE0  D001               	goto	l8534
 13984  000CE2  D00C               	goto	l8538
 13985  000CE4                     l8534:
 13986                           
 13987                           ; BSR set to: 0
 13988  000CE4  0E68               	movlw	104
 13989  000CE6  0100               	movlb	0	; () banked
 13990  000CE8  6FAB               	movwf	??_actuatorTest& (0+255),b
 13991  000CEA  0EE4               	movlw	228
 13992  000CEC                     u10787:
 13993  000CEC  2EE8               	decfsz	wreg,f,c
 13994  000CEE  D7FE               	bra	u10787
 13995  000CF0  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13996  000CF2  D7FC               	bra	u10787
 13997  000CF4  F000               	nop	
 13998  000CF6  0100               	movlb	0	; () banked
 13999  000CF8  2BB2               	incf	actuatorTest@i_1748& (0+255),f,b
 14000  000CFA  D7EF               	goto	l8530
 14001  000CFC                     l8538:
 14002                           
 14003                           ; BSR set to: 0
 14004  000CFC  0E00               	movlw	0
 14005  000CFE  0100               	movlb	0	; () banked
 14006  000D00  6FB3               	movwf	actuatorTest@i_1749& (0+255),b
 14007  000D02                     l8540:
 14008                           
 14009                           ; BSR set to: 0
 14010  000D02  0E63               	movlw	99
 14011  000D04  0100               	movlb	0	; () banked
 14012  000D06  65B3               	cpfsgt	actuatorTest@i_1749& (0+255),b
 14013  000D08  D001               	goto	l8544
 14014  000D0A  D00C               	goto	l8548
 14015  000D0C                     l8544:
 14016                           
 14017                           ; BSR set to: 0
 14018  000D0C  0E68               	movlw	104
 14019  000D0E  0100               	movlb	0	; () banked
 14020  000D10  6FAB               	movwf	??_actuatorTest& (0+255),b
 14021  000D12  0EE4               	movlw	228
 14022  000D14                     u10797:
 14023  000D14  2EE8               	decfsz	wreg,f,c
 14024  000D16  D7FE               	bra	u10797
 14025  000D18  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14026  000D1A  D7FC               	bra	u10797
 14027  000D1C  F000               	nop	
 14028  000D1E  0100               	movlb	0	; () banked
 14029  000D20  2BB3               	incf	actuatorTest@i_1749& (0+255),f,b
 14030  000D22  D7EF               	goto	l8540
 14031  000D24                     l8548:
 14032                           
 14033                           ; BSR set to: 0
 14034                           ;Test.c: 286: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14035  000D24  0E80               	movlw	128
 14036  000D26  EC10  F02E         	call	_lcdInst
 14037  000D2A  0EC0               	movlw	192
 14038  000D2C  EC10  F02E         	call	_lcdInst
 14039                           
 14040                           ;Test.c: 287: printf("MID-LEFT -- 2s  ");
 14041  000D30  0E0D               	movlw	low STR_101
 14042  000D32  0100               	movlb	0	; () banked
 14043  000D34  6F8E               	movwf	printf@f& (0+255),b
 14044  000D36  0EFC               	movlw	high STR_101
 14045  000D38  0100               	movlb	0	; () banked
 14046  000D3A  6F8F               	movwf	(printf@f+1)& (0+255),b
 14047  000D3C  EC16  F00E         	call	_printf	;wreg free
 14048                           
 14049                           ;Test.c: 288: updateServoPosition(1670, 1);
 14050  000D40  0E06               	movlw	6
 14051  000D42  0100               	movlb	0	; () banked
 14052  000D44  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14053  000D46  0E86               	movlw	134
 14054  000D48  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14055  000D4A  0E00               	movlw	0
 14056  000D4C  0100               	movlb	0	; () banked
 14057  000D4E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14058  000D50  0E01               	movlw	1
 14059  000D52  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14060  000D54  EC33  F027         	call	_updateServoPosition	;wreg free
 14061                           
 14062                           ;Test.c: 289: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14063  000D58  0E00               	movlw	0
 14064  000D5A  0100               	movlb	0	; () banked
 14065  000D5C  6FB4               	movwf	actuatorTest@i_1751& (0+255),b
 14066  000D5E                     l8556:
 14067                           
 14068                           ; BSR set to: 0
 14069  000D5E  0E63               	movlw	99
 14070  000D60  0100               	movlb	0	; () banked
 14071  000D62  65B4               	cpfsgt	actuatorTest@i_1751& (0+255),b
 14072  000D64  D001               	goto	l8560
 14073  000D66  D00C               	goto	l8564
 14074  000D68                     l8560:
 14075                           
 14076                           ; BSR set to: 0
 14077  000D68  0E68               	movlw	104
 14078  000D6A  0100               	movlb	0	; () banked
 14079  000D6C  6FAB               	movwf	??_actuatorTest& (0+255),b
 14080  000D6E  0EE4               	movlw	228
 14081  000D70                     u10807:
 14082  000D70  2EE8               	decfsz	wreg,f,c
 14083  000D72  D7FE               	bra	u10807
 14084  000D74  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14085  000D76  D7FC               	bra	u10807
 14086  000D78  F000               	nop	
 14087  000D7A  0100               	movlb	0	; () banked
 14088  000D7C  2BB4               	incf	actuatorTest@i_1751& (0+255),f,b
 14089  000D7E  D7EF               	goto	l8556
 14090  000D80                     l8564:
 14091                           
 14092                           ; BSR set to: 0
 14093  000D80  0E00               	movlw	0
 14094  000D82  0100               	movlb	0	; () banked
 14095  000D84  6FB5               	movwf	actuatorTest@i_1752& (0+255),b
 14096  000D86                     l8566:
 14097                           
 14098                           ; BSR set to: 0
 14099  000D86  0E63               	movlw	99
 14100  000D88  0100               	movlb	0	; () banked
 14101  000D8A  65B5               	cpfsgt	actuatorTest@i_1752& (0+255),b
 14102  000D8C  D001               	goto	l8570
 14103  000D8E  D00C               	goto	l8574
 14104  000D90                     l8570:
 14105                           
 14106                           ; BSR set to: 0
 14107  000D90  0E68               	movlw	104
 14108  000D92  0100               	movlb	0	; () banked
 14109  000D94  6FAB               	movwf	??_actuatorTest& (0+255),b
 14110  000D96  0EE4               	movlw	228
 14111  000D98                     u10817:
 14112  000D98  2EE8               	decfsz	wreg,f,c
 14113  000D9A  D7FE               	bra	u10817
 14114  000D9C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14115  000D9E  D7FC               	bra	u10817
 14116  000DA0  F000               	nop	
 14117  000DA2  0100               	movlb	0	; () banked
 14118  000DA4  2BB5               	incf	actuatorTest@i_1752& (0+255),f,b
 14119  000DA6  D7EF               	goto	l8566
 14120  000DA8                     l8574:
 14121                           
 14122                           ; BSR set to: 0
 14123                           ;Test.c: 291: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14124  000DA8  0E80               	movlw	128
 14125  000DAA  EC10  F02E         	call	_lcdInst
 14126  000DAE  0EC0               	movlw	192
 14127  000DB0  EC10  F02E         	call	_lcdInst
 14128                           
 14129                           ;Test.c: 292: printf("MID-RIGHT -- 2s ");
 14130  000DB4  0E1E               	movlw	low STR_102
 14131  000DB6  0100               	movlb	0	; () banked
 14132  000DB8  6F8E               	movwf	printf@f& (0+255),b
 14133  000DBA  0EFC               	movlw	high STR_102
 14134  000DBC  0100               	movlb	0	; () banked
 14135  000DBE  6F8F               	movwf	(printf@f+1)& (0+255),b
 14136  000DC0  EC16  F00E         	call	_printf	;wreg free
 14137                           
 14138                           ;Test.c: 293: updateServoPosition(850, 1);
 14139  000DC4  0E03               	movlw	3
 14140  000DC6  0100               	movlb	0	; () banked
 14141  000DC8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14142  000DCA  0E52               	movlw	82
 14143  000DCC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14144  000DCE  0E00               	movlw	0
 14145  000DD0  0100               	movlb	0	; () banked
 14146  000DD2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14147  000DD4  0E01               	movlw	1
 14148  000DD6  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14149  000DD8  EC33  F027         	call	_updateServoPosition	;wreg free
 14150                           
 14151                           ;Test.c: 294: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14152  000DDC  0E00               	movlw	0
 14153  000DDE  0100               	movlb	0	; () banked
 14154  000DE0  6FB6               	movwf	actuatorTest@i_1754& (0+255),b
 14155  000DE2                     l8582:
 14156                           
 14157                           ; BSR set to: 0
 14158  000DE2  0E63               	movlw	99
 14159  000DE4  0100               	movlb	0	; () banked
 14160  000DE6  65B6               	cpfsgt	actuatorTest@i_1754& (0+255),b
 14161  000DE8  D001               	goto	l8586
 14162  000DEA  D00C               	goto	l8590
 14163  000DEC                     l8586:
 14164                           
 14165                           ; BSR set to: 0
 14166  000DEC  0E68               	movlw	104
 14167  000DEE  0100               	movlb	0	; () banked
 14168  000DF0  6FAB               	movwf	??_actuatorTest& (0+255),b
 14169  000DF2  0EE4               	movlw	228
 14170  000DF4                     u10827:
 14171  000DF4  2EE8               	decfsz	wreg,f,c
 14172  000DF6  D7FE               	bra	u10827
 14173  000DF8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14174  000DFA  D7FC               	bra	u10827
 14175  000DFC  F000               	nop	
 14176  000DFE  0100               	movlb	0	; () banked
 14177  000E00  2BB6               	incf	actuatorTest@i_1754& (0+255),f,b
 14178  000E02  D7EF               	goto	l8582
 14179  000E04                     l8590:
 14180                           
 14181                           ; BSR set to: 0
 14182  000E04  0E00               	movlw	0
 14183  000E06  0100               	movlb	0	; () banked
 14184  000E08  6FB7               	movwf	actuatorTest@i_1755& (0+255),b
 14185  000E0A                     l8592:
 14186                           
 14187                           ; BSR set to: 0
 14188  000E0A  0E63               	movlw	99
 14189  000E0C  0100               	movlb	0	; () banked
 14190  000E0E  65B7               	cpfsgt	actuatorTest@i_1755& (0+255),b
 14191  000E10  D001               	goto	l8596
 14192  000E12  D00C               	goto	l8600
 14193  000E14                     l8596:
 14194                           
 14195                           ; BSR set to: 0
 14196  000E14  0E68               	movlw	104
 14197  000E16  0100               	movlb	0	; () banked
 14198  000E18  6FAB               	movwf	??_actuatorTest& (0+255),b
 14199  000E1A  0EE4               	movlw	228
 14200  000E1C                     u10837:
 14201  000E1C  2EE8               	decfsz	wreg,f,c
 14202  000E1E  D7FE               	bra	u10837
 14203  000E20  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14204  000E22  D7FC               	bra	u10837
 14205  000E24  F000               	nop	
 14206  000E26  0100               	movlb	0	; () banked
 14207  000E28  2BB7               	incf	actuatorTest@i_1755& (0+255),f,b
 14208  000E2A  D7EF               	goto	l8592
 14209  000E2C                     l8600:
 14210                           
 14211                           ; BSR set to: 0
 14212                           ;Test.c: 296: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14213  000E2C  0E80               	movlw	128
 14214  000E2E  EC10  F02E         	call	_lcdInst
 14215  000E32  0EC0               	movlw	192
 14216  000E34  EC10  F02E         	call	_lcdInst
 14217                           
 14218                           ;Test.c: 297: printf("MID -- 2s       ");
 14219  000E38  0E63               	movlw	low STR_103
 14220  000E3A  0100               	movlb	0	; () banked
 14221  000E3C  6F8E               	movwf	printf@f& (0+255),b
 14222  000E3E  0EFB               	movlw	high STR_103
 14223  000E40  0100               	movlb	0	; () banked
 14224  000E42  6F8F               	movwf	(printf@f+1)& (0+255),b
 14225  000E44  EC16  F00E         	call	_printf	;wreg free
 14226                           
 14227                           ;Test.c: 298: updateServoPosition(1200, 1);
 14228  000E48  0E04               	movlw	4
 14229  000E4A  0100               	movlb	0	; () banked
 14230  000E4C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14231  000E4E  0EB0               	movlw	176
 14232  000E50  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14233  000E52  0E00               	movlw	0
 14234  000E54  0100               	movlb	0	; () banked
 14235  000E56  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14236  000E58  0E01               	movlw	1
 14237  000E5A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14238  000E5C  EC33  F027         	call	_updateServoPosition	;wreg free
 14239                           
 14240                           ;Test.c: 299: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14241  000E60  0E00               	movlw	0
 14242  000E62  0100               	movlb	0	; () banked
 14243  000E64  6FB8               	movwf	actuatorTest@i_1757& (0+255),b
 14244  000E66                     l8608:
 14245                           
 14246                           ; BSR set to: 0
 14247  000E66  0E63               	movlw	99
 14248  000E68  0100               	movlb	0	; () banked
 14249  000E6A  65B8               	cpfsgt	actuatorTest@i_1757& (0+255),b
 14250  000E6C  D001               	goto	l8612
 14251  000E6E  D00C               	goto	l8616
 14252  000E70                     l8612:
 14253                           
 14254                           ; BSR set to: 0
 14255  000E70  0E68               	movlw	104
 14256  000E72  0100               	movlb	0	; () banked
 14257  000E74  6FAB               	movwf	??_actuatorTest& (0+255),b
 14258  000E76  0EE4               	movlw	228
 14259  000E78                     u10847:
 14260  000E78  2EE8               	decfsz	wreg,f,c
 14261  000E7A  D7FE               	bra	u10847
 14262  000E7C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14263  000E7E  D7FC               	bra	u10847
 14264  000E80  F000               	nop	
 14265  000E82  0100               	movlb	0	; () banked
 14266  000E84  2BB8               	incf	actuatorTest@i_1757& (0+255),f,b
 14267  000E86  D7EF               	goto	l8608
 14268  000E88                     l8616:
 14269                           
 14270                           ; BSR set to: 0
 14271  000E88  0E00               	movlw	0
 14272  000E8A  0100               	movlb	0	; () banked
 14273  000E8C  6FB9               	movwf	actuatorTest@i_1758& (0+255),b
 14274  000E8E                     l8618:
 14275                           
 14276                           ; BSR set to: 0
 14277  000E8E  0E63               	movlw	99
 14278  000E90  0100               	movlb	0	; () banked
 14279  000E92  65B9               	cpfsgt	actuatorTest@i_1758& (0+255),b
 14280  000E94  D001               	goto	l8622
 14281  000E96  D00C               	goto	l1331
 14282  000E98                     l8622:
 14283                           
 14284                           ; BSR set to: 0
 14285  000E98  0E68               	movlw	104
 14286  000E9A  0100               	movlb	0	; () banked
 14287  000E9C  6FAB               	movwf	??_actuatorTest& (0+255),b
 14288  000E9E  0EE4               	movlw	228
 14289  000EA0                     u10857:
 14290  000EA0  2EE8               	decfsz	wreg,f,c
 14291  000EA2  D7FE               	bra	u10857
 14292  000EA4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14293  000EA6  D7FC               	bra	u10857
 14294  000EA8  F000               	nop	
 14295  000EAA  0100               	movlb	0	; () banked
 14296  000EAC  2BB9               	incf	actuatorTest@i_1758& (0+255),f,b
 14297  000EAE  D7EF               	goto	l8618
 14298  000EB0                     l1331:
 14299                           
 14300                           ; BSR set to: 0
 14301                           ;Test.c: 300: TMR1ON = 0;
 14302  000EB0  90CD               	bcf	4045,0,c	;volatile
 14303                           
 14304                           ; BSR set to: 0
 14305                           ;Test.c: 307: printf("TST: TILT SERVO");
 14306  000EB2  0E4E               	movlw	low STR_104
 14307  000EB4  0100               	movlb	0	; () banked
 14308  000EB6  6F8E               	movwf	printf@f& (0+255),b
 14309  000EB8  0EFE               	movlw	high STR_104
 14310  000EBA  0100               	movlb	0	; () banked
 14311  000EBC  6F8F               	movwf	(printf@f+1)& (0+255),b
 14312  000EBE  EC16  F00E         	call	_printf	;wreg free
 14313                           
 14314                           ;Test.c: 308: lcdInst(0b11000000);;
 14315  000EC2  0EC0               	movlw	192
 14316  000EC4  EC10  F02E         	call	_lcdInst
 14317                           
 14318                           ;Test.c: 309: printf("LEVEL -- 2s     ");
 14319  000EC8  0E96               	movlw	low STR_105
 14320  000ECA  0100               	movlb	0	; () banked
 14321  000ECC  6F8E               	movwf	printf@f& (0+255),b
 14322  000ECE  0EFB               	movlw	high STR_105
 14323  000ED0  0100               	movlb	0	; () banked
 14324  000ED2  6F8F               	movwf	(printf@f+1)& (0+255),b
 14325  000ED4  EC16  F00E         	call	_printf	;wreg free
 14326                           
 14327                           ;Test.c: 310: updateServoPosition(1050, 3);
 14328  000ED8  0E04               	movlw	4
 14329  000EDA  0100               	movlb	0	; () banked
 14330  000EDC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14331  000EDE  0E1A               	movlw	26
 14332  000EE0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14333  000EE2  0E00               	movlw	0
 14334  000EE4  0100               	movlb	0	; () banked
 14335  000EE6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14336  000EE8  0E03               	movlw	3
 14337  000EEA  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14338  000EEC  EC33  F027         	call	_updateServoPosition	;wreg free
 14339                           
 14340                           ;Test.c: 311: TMR3ON = 1;
 14341  000EF0  80B1               	bsf	4017,0,c	;volatile
 14342                           
 14343                           ;Test.c: 312: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14344  000EF2  0E00               	movlw	0
 14345  000EF4  0100               	movlb	0	; () banked
 14346  000EF6  6FBA               	movwf	actuatorTest@i_1761& (0+255),b
 14347  000EF8                     l8636:
 14348                           
 14349                           ; BSR set to: 0
 14350  000EF8  0E63               	movlw	99
 14351  000EFA  0100               	movlb	0	; () banked
 14352  000EFC  65BA               	cpfsgt	actuatorTest@i_1761& (0+255),b
 14353  000EFE  D001               	goto	l8640
 14354  000F00  D00C               	goto	l8644
 14355  000F02                     l8640:
 14356                           
 14357                           ; BSR set to: 0
 14358  000F02  0E68               	movlw	104
 14359  000F04  0100               	movlb	0	; () banked
 14360  000F06  6FAB               	movwf	??_actuatorTest& (0+255),b
 14361  000F08  0EE4               	movlw	228
 14362  000F0A                     u10867:
 14363  000F0A  2EE8               	decfsz	wreg,f,c
 14364  000F0C  D7FE               	bra	u10867
 14365  000F0E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14366  000F10  D7FC               	bra	u10867
 14367  000F12  F000               	nop	
 14368  000F14  0100               	movlb	0	; () banked
 14369  000F16  2BBA               	incf	actuatorTest@i_1761& (0+255),f,b
 14370  000F18  D7EF               	goto	l8636
 14371  000F1A                     l8644:
 14372                           
 14373                           ; BSR set to: 0
 14374  000F1A  0E00               	movlw	0
 14375  000F1C  0100               	movlb	0	; () banked
 14376  000F1E  6FBB               	movwf	actuatorTest@i_1762& (0+255),b
 14377  000F20                     l8646:
 14378                           
 14379                           ; BSR set to: 0
 14380  000F20  0E63               	movlw	99
 14381  000F22  0100               	movlb	0	; () banked
 14382  000F24  65BB               	cpfsgt	actuatorTest@i_1762& (0+255),b
 14383  000F26  D001               	goto	l8650
 14384  000F28  D00C               	goto	l8654
 14385  000F2A                     l8650:
 14386                           
 14387                           ; BSR set to: 0
 14388  000F2A  0E68               	movlw	104
 14389  000F2C  0100               	movlb	0	; () banked
 14390  000F2E  6FAB               	movwf	??_actuatorTest& (0+255),b
 14391  000F30  0EE4               	movlw	228
 14392  000F32                     u10877:
 14393  000F32  2EE8               	decfsz	wreg,f,c
 14394  000F34  D7FE               	bra	u10877
 14395  000F36  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14396  000F38  D7FC               	bra	u10877
 14397  000F3A  F000               	nop	
 14398  000F3C  0100               	movlb	0	; () banked
 14399  000F3E  2BBB               	incf	actuatorTest@i_1762& (0+255),f,b
 14400  000F40  D7EF               	goto	l8646
 14401  000F42                     l8654:
 14402                           
 14403                           ; BSR set to: 0
 14404                           ;Test.c: 314: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14405  000F42  0E80               	movlw	128
 14406  000F44  EC10  F02E         	call	_lcdInst
 14407  000F48  0EC0               	movlw	192
 14408  000F4A  EC10  F02E         	call	_lcdInst
 14409                           
 14410                           ;Test.c: 315: printf("DROP -- 2s      ");
 14411  000F4E  0E74               	movlw	low STR_106
 14412  000F50  0100               	movlb	0	; () banked
 14413  000F52  6F8E               	movwf	printf@f& (0+255),b
 14414  000F54  0EFB               	movlw	high STR_106
 14415  000F56  0100               	movlb	0	; () banked
 14416  000F58  6F8F               	movwf	(printf@f+1)& (0+255),b
 14417  000F5A  EC16  F00E         	call	_printf	;wreg free
 14418                           
 14419                           ;Test.c: 316: updateServoPosition(1260, 3);
 14420  000F5E  0E04               	movlw	4
 14421  000F60  0100               	movlb	0	; () banked
 14422  000F62  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14423  000F64  0EEC               	movlw	236
 14424  000F66  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14425  000F68  0E00               	movlw	0
 14426  000F6A  0100               	movlb	0	; () banked
 14427  000F6C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14428  000F6E  0E03               	movlw	3
 14429  000F70  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14430  000F72  EC33  F027         	call	_updateServoPosition	;wreg free
 14431                           
 14432                           ;Test.c: 317: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14433  000F76  0E00               	movlw	0
 14434  000F78  0100               	movlb	0	; () banked
 14435  000F7A  6FBC               	movwf	actuatorTest@i_1764& (0+255),b
 14436  000F7C                     l8662:
 14437                           
 14438                           ; BSR set to: 0
 14439  000F7C  0E63               	movlw	99
 14440  000F7E  0100               	movlb	0	; () banked
 14441  000F80  65BC               	cpfsgt	actuatorTest@i_1764& (0+255),b
 14442  000F82  D001               	goto	l8666
 14443  000F84  D00C               	goto	l8670
 14444  000F86                     l8666:
 14445                           
 14446                           ; BSR set to: 0
 14447  000F86  0E68               	movlw	104
 14448  000F88  0100               	movlb	0	; () banked
 14449  000F8A  6FAB               	movwf	??_actuatorTest& (0+255),b
 14450  000F8C  0EE4               	movlw	228
 14451  000F8E                     u10887:
 14452  000F8E  2EE8               	decfsz	wreg,f,c
 14453  000F90  D7FE               	bra	u10887
 14454  000F92  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14455  000F94  D7FC               	bra	u10887
 14456  000F96  F000               	nop	
 14457  000F98  0100               	movlb	0	; () banked
 14458  000F9A  2BBC               	incf	actuatorTest@i_1764& (0+255),f,b
 14459  000F9C  D7EF               	goto	l8662
 14460  000F9E                     l8670:
 14461                           
 14462                           ; BSR set to: 0
 14463  000F9E  0E00               	movlw	0
 14464  000FA0  0100               	movlb	0	; () banked
 14465  000FA2  6FBD               	movwf	actuatorTest@i_1765& (0+255),b
 14466  000FA4                     l8672:
 14467                           
 14468                           ; BSR set to: 0
 14469  000FA4  0E63               	movlw	99
 14470  000FA6  0100               	movlb	0	; () banked
 14471  000FA8  65BD               	cpfsgt	actuatorTest@i_1765& (0+255),b
 14472  000FAA  D001               	goto	l8676
 14473  000FAC  D00C               	goto	l8680
 14474  000FAE                     l8676:
 14475                           
 14476                           ; BSR set to: 0
 14477  000FAE  0E68               	movlw	104
 14478  000FB0  0100               	movlb	0	; () banked
 14479  000FB2  6FAB               	movwf	??_actuatorTest& (0+255),b
 14480  000FB4  0EE4               	movlw	228
 14481  000FB6                     u10897:
 14482  000FB6  2EE8               	decfsz	wreg,f,c
 14483  000FB8  D7FE               	bra	u10897
 14484  000FBA  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14485  000FBC  D7FC               	bra	u10897
 14486  000FBE  F000               	nop	
 14487  000FC0  0100               	movlb	0	; () banked
 14488  000FC2  2BBD               	incf	actuatorTest@i_1765& (0+255),f,b
 14489  000FC4  D7EF               	goto	l8672
 14490  000FC6                     l8680:
 14491                           
 14492                           ; BSR set to: 0
 14493                           ;Test.c: 319: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14494  000FC6  0E80               	movlw	128
 14495  000FC8  EC10  F02E         	call	_lcdInst
 14496  000FCC  0EC0               	movlw	192
 14497  000FCE  EC10  F02E         	call	_lcdInst
 14498                           
 14499                           ;Test.c: 320: printf("LEVEL -- 2s     ");
 14500  000FD2  0E96               	movlw	low STR_105
 14501  000FD4  0100               	movlb	0	; () banked
 14502  000FD6  6F8E               	movwf	printf@f& (0+255),b
 14503  000FD8  0EFB               	movlw	high STR_105
 14504  000FDA  0100               	movlb	0	; () banked
 14505  000FDC  6F8F               	movwf	(printf@f+1)& (0+255),b
 14506  000FDE  EC16  F00E         	call	_printf	;wreg free
 14507                           
 14508                           ;Test.c: 321: updateServoPosition(1050, 3);
 14509  000FE2  0E04               	movlw	4
 14510  000FE4  0100               	movlb	0	; () banked
 14511  000FE6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14512  000FE8  0E1A               	movlw	26
 14513  000FEA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14514  000FEC  0E00               	movlw	0
 14515  000FEE  0100               	movlb	0	; () banked
 14516  000FF0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14517  000FF2  0E03               	movlw	3
 14518  000FF4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14519  000FF6  EC33  F027         	call	_updateServoPosition	;wreg free
 14520                           
 14521                           ;Test.c: 322: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14522  000FFA  0E00               	movlw	0
 14523  000FFC  0100               	movlb	0	; () banked
 14524  000FFE  6FBE               	movwf	actuatorTest@i_1767& (0+255),b
 14525  001000                     l8688:
 14526                           
 14527                           ; BSR set to: 0
 14528  001000  0E63               	movlw	99
 14529  001002  0100               	movlb	0	; () banked
 14530  001004  65BE               	cpfsgt	actuatorTest@i_1767& (0+255),b
 14531  001006  D001               	goto	l8692
 14532  001008  D00C               	goto	l8696
 14533  00100A                     l8692:
 14534                           
 14535                           ; BSR set to: 0
 14536  00100A  0E68               	movlw	104
 14537  00100C  0100               	movlb	0	; () banked
 14538  00100E  6FAB               	movwf	??_actuatorTest& (0+255),b
 14539  001010  0EE4               	movlw	228
 14540  001012                     u10907:
 14541  001012  2EE8               	decfsz	wreg,f,c
 14542  001014  D7FE               	bra	u10907
 14543  001016  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14544  001018  D7FC               	bra	u10907
 14545  00101A  F000               	nop	
 14546  00101C  0100               	movlb	0	; () banked
 14547  00101E  2BBE               	incf	actuatorTest@i_1767& (0+255),f,b
 14548  001020  D7EF               	goto	l8688
 14549  001022                     l8696:
 14550                           
 14551                           ; BSR set to: 0
 14552  001022  0E00               	movlw	0
 14553  001024  0100               	movlb	0	; () banked
 14554  001026  6FBF               	movwf	actuatorTest@i_1768& (0+255),b
 14555  001028                     l8698:
 14556                           
 14557                           ; BSR set to: 0
 14558  001028  0E63               	movlw	99
 14559  00102A  0100               	movlb	0	; () banked
 14560  00102C  65BF               	cpfsgt	actuatorTest@i_1768& (0+255),b
 14561  00102E  D001               	goto	l8702
 14562  001030  D00C               	goto	l1343
 14563  001032                     l8702:
 14564                           
 14565                           ; BSR set to: 0
 14566  001032  0E68               	movlw	104
 14567  001034  0100               	movlb	0	; () banked
 14568  001036  6FAB               	movwf	??_actuatorTest& (0+255),b
 14569  001038  0EE4               	movlw	228
 14570  00103A                     u10917:
 14571  00103A  2EE8               	decfsz	wreg,f,c
 14572  00103C  D7FE               	bra	u10917
 14573  00103E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14574  001040  D7FC               	bra	u10917
 14575  001042  F000               	nop	
 14576  001044  0100               	movlb	0	; () banked
 14577  001046  2BBF               	incf	actuatorTest@i_1768& (0+255),f,b
 14578  001048  D7EF               	goto	l8698
 14579  00104A                     l1343:
 14580                           
 14581                           ; BSR set to: 0
 14582                           ;Test.c: 323: TMR3ON = 0;
 14583  00104A  90B1               	bcf	4017,0,c	;volatile
 14584                           
 14585                           ;Test.c: 324: (INTCONbits.GIE = 0);
 14586  00104C  9EF2               	bcf	intcon,7,c	;volatile
 14587                           
 14588                           ; BSR set to: 0
 14589                           ;Test.c: 329: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14590  00104E  0E01               	movlw	1
 14591  001050  EC10  F02E         	call	_lcdInst
 14592  001054  0E68               	movlw	104
 14593  001056  0100               	movlb	0	; () banked
 14594  001058  6FAB               	movwf	??_actuatorTest& (0+255),b
 14595  00105A  0EE4               	movlw	228
 14596  00105C                     u10927:
 14597  00105C  2EE8               	decfsz	wreg,f,c
 14598  00105E  D7FE               	bra	u10927
 14599  001060  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14600  001062  D7FC               	bra	u10927
 14601  001064  F000               	nop	
 14602  001066  0E80               	movlw	128
 14603  001068  EC10  F02E         	call	_lcdInst
 14604                           
 14605                           ;Test.c: 330: printf("TST: CAM SERVO");
 14606  00106C  0EB9               	movlw	low STR_108
 14607  00106E  0100               	movlb	0	; () banked
 14608  001070  6F8E               	movwf	printf@f& (0+255),b
 14609  001072  0EFE               	movlw	high STR_108
 14610  001074  0100               	movlb	0	; () banked
 14611  001076  6F8F               	movwf	(printf@f+1)& (0+255),b
 14612  001078  EC16  F00E         	call	_printf	;wreg free
 14613                           
 14614                           ;Test.c: 331: lcdInst(0b11000000);;
 14615  00107C  0EC0               	movlw	192
 14616  00107E  EC10  F02E         	call	_lcdInst
 14617                           
 14618                           ;Test.c: 332: printf("CAM UP  |RC0=1");
 14619  001082  0E9B               	movlw	low STR_109
 14620  001084  0100               	movlb	0	; () banked
 14621  001086  6F8E               	movwf	printf@f& (0+255),b
 14622  001088  0EFE               	movlw	high STR_109
 14623  00108A  0100               	movlb	0	; () banked
 14624  00108C  6F8F               	movwf	(printf@f+1)& (0+255),b
 14625  00108E  EC16  F00E         	call	_printf	;wreg free
 14626                           
 14627                           ;Test.c: 333: LATCbits.LATC0 = 1;
 14628  001092  808B               	bsf	3979,0,c	;volatile
 14629                           
 14630                           ;Test.c: 334: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14631  001094  0E00               	movlw	0
 14632  001096  0100               	movlb	0	; () banked
 14633  001098  6FC0               	movwf	actuatorTest@i_1771& (0+255),b
 14634  00109A                     l8722:
 14635                           
 14636                           ; BSR set to: 0
 14637  00109A  0E63               	movlw	99
 14638  00109C  0100               	movlb	0	; () banked
 14639  00109E  65C0               	cpfsgt	actuatorTest@i_1771& (0+255),b
 14640  0010A0  D001               	goto	l8726
 14641  0010A2  D00C               	goto	l8730
 14642  0010A4                     l8726:
 14643                           
 14644                           ; BSR set to: 0
 14645  0010A4  0E68               	movlw	104
 14646  0010A6  0100               	movlb	0	; () banked
 14647  0010A8  6FAB               	movwf	??_actuatorTest& (0+255),b
 14648  0010AA  0EE4               	movlw	228
 14649  0010AC                     u10937:
 14650  0010AC  2EE8               	decfsz	wreg,f,c
 14651  0010AE  D7FE               	bra	u10937
 14652  0010B0  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14653  0010B2  D7FC               	bra	u10937
 14654  0010B4  F000               	nop	
 14655  0010B6  0100               	movlb	0	; () banked
 14656  0010B8  2BC0               	incf	actuatorTest@i_1771& (0+255),f,b
 14657  0010BA  D7EF               	goto	l8722
 14658  0010BC                     l8730:
 14659                           
 14660                           ; BSR set to: 0
 14661  0010BC  0E00               	movlw	0
 14662  0010BE  0100               	movlb	0	; () banked
 14663  0010C0  6FC1               	movwf	actuatorTest@i_1772& (0+255),b
 14664  0010C2                     l8732:
 14665                           
 14666                           ; BSR set to: 0
 14667  0010C2  0E63               	movlw	99
 14668  0010C4  0100               	movlb	0	; () banked
 14669  0010C6  65C1               	cpfsgt	actuatorTest@i_1772& (0+255),b
 14670  0010C8  D001               	goto	l8736
 14671  0010CA  D00C               	goto	l8740
 14672  0010CC                     l8736:
 14673                           
 14674                           ; BSR set to: 0
 14675  0010CC  0E68               	movlw	104
 14676  0010CE  0100               	movlb	0	; () banked
 14677  0010D0  6FAB               	movwf	??_actuatorTest& (0+255),b
 14678  0010D2  0EE4               	movlw	228
 14679  0010D4                     u10947:
 14680  0010D4  2EE8               	decfsz	wreg,f,c
 14681  0010D6  D7FE               	bra	u10947
 14682  0010D8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14683  0010DA  D7FC               	bra	u10947
 14684  0010DC  F000               	nop	
 14685  0010DE  0100               	movlb	0	; () banked
 14686  0010E0  2BC1               	incf	actuatorTest@i_1772& (0+255),f,b
 14687  0010E2  D7EF               	goto	l8732
 14688  0010E4                     l8740:
 14689                           
 14690                           ; BSR set to: 0
 14691                           ;Test.c: 335: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14692  0010E4  0E80               	movlw	128
 14693  0010E6  EC10  F02E         	call	_lcdInst
 14694  0010EA  0EC0               	movlw	192
 14695  0010EC  EC10  F02E         	call	_lcdInst
 14696                           
 14697                           ;Test.c: 336: printf("CAM DWN |RC0=0");
 14698  0010F0  0E8C               	movlw	low STR_110
 14699  0010F2  0100               	movlb	0	; () banked
 14700  0010F4  6F8E               	movwf	printf@f& (0+255),b
 14701  0010F6  0EFE               	movlw	high STR_110
 14702  0010F8  0100               	movlb	0	; () banked
 14703  0010FA  6F8F               	movwf	(printf@f+1)& (0+255),b
 14704  0010FC  EC16  F00E         	call	_printf	;wreg free
 14705                           
 14706                           ;Test.c: 339: for(i=0;i<10000;i++)
 14707  001100  0E00               	movlw	0
 14708  001102  0100               	movlb	0	; () banked
 14709  001104  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 14710  001106  0E00               	movlw	0
 14711  001108  6FC4               	movwf	actuatorTest@i& (0+255),b
 14712  00110A                     l8746:
 14713                           
 14714                           ; BSR set to: 0
 14715  00110A  0100               	movlb	0	; () banked
 14716  00110C  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 14717  00110E  D008               	goto	l1348
 14718  001110  0E10               	movlw	16
 14719  001112  0100               	movlb	0	; () banked
 14720  001114  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 14721  001116  0E27               	movlw	39
 14722  001118  0100               	movlb	0	; () banked
 14723  00111A  59C5               	subwfb	(actuatorTest@i+1)& (0+255),w,b
 14724  00111C  B0D8               	btfsc	status,0,c
 14725  00111E  D00D               	goto	l8756
 14726  001120                     l1348:
 14727                           
 14728                           ; BSR set to: 0
 14729                           ;Test.c: 340: {
 14730                           ;Test.c: 341: LATCbits.LATC0 = 1;
 14731  001120  808B               	bsf	3979,0,c	;volatile
 14732                           
 14733                           ; BSR set to: 0
 14734                           ;Test.c: 342: _delay((unsigned long)((10)*(32000000/4000000.0)));
 14735  001122  0E1A               	movlw	26
 14736  001124                     u10957:
 14737  001124  2EE8               	decfsz	wreg,f,c
 14738  001126  D7FE               	bra	u10957
 14739  001128  D000               	nop2	
 14740                           
 14741                           ;Test.c: 343: LATCbits.LATC0 = 0;
 14742  00112A  908B               	bcf	3979,0,c	;volatile
 14743                           
 14744                           ;Test.c: 344: _delay((unsigned long)((90)*(32000000/4000000.0)));
 14745  00112C  0EF0               	movlw	240
 14746  00112E                     u10967:
 14747  00112E  2EE8               	decfsz	wreg,f,c
 14748  001130  D7FE               	bra	u10967
 14749  001132  0100               	movlb	0	; () banked
 14750  001134  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 14751  001136  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 14752  001138  D7E8               	goto	l8746
 14753  00113A                     l8756:
 14754                           
 14755                           ; BSR set to: 0
 14756                           ;Test.c: 345: }
 14757                           ;Test.c: 347: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14758  00113A  0E00               	movlw	0
 14759  00113C  0100               	movlb	0	; () banked
 14760  00113E  6FC2               	movwf	actuatorTest@i_1774& (0+255),b
 14761  001140                     l8758:
 14762                           
 14763                           ; BSR set to: 0
 14764  001140  0E63               	movlw	99
 14765  001142  0100               	movlb	0	; () banked
 14766  001144  65C2               	cpfsgt	actuatorTest@i_1774& (0+255),b
 14767  001146  D001               	goto	l8762
 14768  001148  D00C               	goto	l8766
 14769  00114A                     l8762:
 14770                           
 14771                           ; BSR set to: 0
 14772  00114A  0E68               	movlw	104
 14773  00114C  0100               	movlb	0	; () banked
 14774  00114E  6FAB               	movwf	??_actuatorTest& (0+255),b
 14775  001150  0EE4               	movlw	228
 14776  001152                     u10977:
 14777  001152  2EE8               	decfsz	wreg,f,c
 14778  001154  D7FE               	bra	u10977
 14779  001156  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14780  001158  D7FC               	bra	u10977
 14781  00115A  F000               	nop	
 14782  00115C  0100               	movlb	0	; () banked
 14783  00115E  2BC2               	incf	actuatorTest@i_1774& (0+255),f,b
 14784  001160  D7EF               	goto	l8758
 14785  001162                     l8766:
 14786                           
 14787                           ; BSR set to: 0
 14788  001162  0E00               	movlw	0
 14789  001164  0100               	movlb	0	; () banked
 14790  001166  6FC3               	movwf	actuatorTest@i_1775& (0+255),b
 14791  001168                     l8768:
 14792                           
 14793                           ; BSR set to: 0
 14794  001168  0E63               	movlw	99
 14795  00116A  0100               	movlb	0	; () banked
 14796  00116C  65C3               	cpfsgt	actuatorTest@i_1775& (0+255),b
 14797  00116E  D001               	goto	l8772
 14798  001170  D00C               	goto	l8776
 14799  001172                     l8772:
 14800                           
 14801                           ; BSR set to: 0
 14802  001172  0E68               	movlw	104
 14803  001174  0100               	movlb	0	; () banked
 14804  001176  6FAB               	movwf	??_actuatorTest& (0+255),b
 14805  001178  0EE4               	movlw	228
 14806  00117A                     u10987:
 14807  00117A  2EE8               	decfsz	wreg,f,c
 14808  00117C  D7FE               	bra	u10987
 14809  00117E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14810  001180  D7FC               	bra	u10987
 14811  001182  F000               	nop	
 14812  001184  0100               	movlb	0	; () banked
 14813  001186  2BC3               	incf	actuatorTest@i_1775& (0+255),f,b
 14814  001188  D7EF               	goto	l8768
 14815  00118A                     l8776:
 14816                           
 14817                           ; BSR set to: 0
 14818                           ;Test.c: 348: machine_state = Testing_state;
 14819  00118A  0E03               	movlw	3
 14820  00118C  0100               	movlb	0	; () banked
 14821  00118E  6FFC               	movwf	_machine_state& (0+255),b
 14822                           
 14823                           ; BSR set to: 0
 14824  001190  0012               	return		;funcret
 14825  001192                     __end_of_actuatorTest:
 14826                           	opt stack 0
 14827                           tblptru	equ	0xFF8
 14828                           tblptrh	equ	0xFF7
 14829                           tblptrl	equ	0xFF6
 14830                           tablat	equ	0xFF5
 14831                           prodh	equ	0xFF4
 14832                           prodl	equ	0xFF3
 14833                           intcon	equ	0xFF2
 14834                           intcon2	equ	0xFF1
 14835                           intcon3	equ	0xFF0
 14836                           postinc0	equ	0xFEE
 14837                           wreg	equ	0xFE8
 14838                           postdec1	equ	0xFE5
 14839                           fsr1l	equ	0xFE1
 14840                           indf2	equ	0xFDF
 14841                           postinc2	equ	0xFDE
 14842                           postdec2	equ	0xFDD
 14843                           fsr2h	equ	0xFDA
 14844                           fsr2l	equ	0xFD9
 14845                           status	equ	0xFD8
 14846                           
 14847 ;; *************** function _SpeedTest *****************
 14848 ;; Defined at:
 14849 ;;		line 541 in file "Test.c"
 14850 ;; Parameters:    Size  Location     Type
 14851 ;;		None
 14852 ;; Auto vars:     Size  Location     Type
 14853 ;;		None
 14854 ;; Return value:  Size  Location     Type
 14855 ;;                  1    wreg      void 
 14856 ;; Registers used:
 14857 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14858 ;; Tracked objects:
 14859 ;;		On entry : 0/0
 14860 ;;		On exit  : 0/0
 14861 ;;		Unchanged: 0/0
 14862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14863 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14864 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14865 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14866 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14867 ;;Total ram usage:        1 bytes
 14868 ;; Hardware stack levels used:    1
 14869 ;; Hardware stack levels required when called:   10
 14870 ;; This function calls:
 14871 ;;		_lcdInst
 14872 ;;		_printf
 14873 ;; This function is called by:
 14874 ;;		_Test
 14875 ;; This function uses a non-reentrant model
 14876 ;;
 14877                           
 14878                           	psect	text46
 14879  004DE2                     __ptext46:
 14880                           	opt stack 0
 14881  004DE2                     _SpeedTest:
 14882                           	opt stack 19
 14883                           
 14884                           ;Test.c: 543: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14885                           
 14886                           ; BSR set to: 0
 14887                           ;incstack = 0
 14888  004DE2  0E01               	movlw	1
 14889  004DE4  EC10  F02E         	call	_lcdInst
 14890  004DE8  0E68               	movlw	104
 14891  004DEA  0100               	movlb	0	; () banked
 14892  004DEC  6FAB               	movwf	??_SpeedTest& (0+255),b
 14893  004DEE  0EE4               	movlw	228
 14894  004DF0                     u10997:
 14895  004DF0  2EE8               	decfsz	wreg,f,c
 14896  004DF2  D7FE               	bra	u10997
 14897  004DF4  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 14898  004DF6  D7FC               	bra	u10997
 14899  004DF8  F000               	nop	
 14900  004DFA  0E80               	movlw	128
 14901  004DFC  EC10  F02E         	call	_lcdInst
 14902                           
 14903                           ;Test.c: 544: printf("S: D WILL RETURN ");
 14904  004E00  0E09               	movlw	low STR_121
 14905  004E02  0100               	movlb	0	; () banked
 14906  004E04  6F8E               	movwf	printf@f& (0+255),b
 14907  004E06  0EFB               	movlw	high STR_121
 14908  004E08  0100               	movlb	0	; () banked
 14909  004E0A  6F8F               	movwf	(printf@f+1)& (0+255),b
 14910  004E0C  EC16  F00E         	call	_printf	;wreg free
 14911                           
 14912                           ;Test.c: 545: lcdInst(0b11000000);;
 14913  004E10  0EC0               	movlw	192
 14914  004E12  EC10  F02E         	call	_lcdInst
 14915                           
 14916                           ;Test.c: 546: printf("OTHER SETS RA5   ");
 14917  004E16  0EF7               	movlw	low STR_122
 14918  004E18  0100               	movlb	0	; () banked
 14919  004E1A  6F8E               	movwf	printf@f& (0+255),b
 14920  004E1C  0EFA               	movlw	high STR_122
 14921  004E1E  0100               	movlb	0	; () banked
 14922  004E20  6F8F               	movwf	(printf@f+1)& (0+255),b
 14923  004E22  EC16  F00E         	call	_printf	;wreg free
 14924  004E26                     l1419:
 14925  004E26  A281               	btfss	3969,1,c	;volatile
 14926  004E28  D7FE               	goto	l1419
 14927                           
 14928                           ;Test.c: 551: }
 14929                           ;Test.c: 552: if(PORTB >> 4 == 0b1111){
 14930  004E2A  3881               	swapf	3969,w,c	;volatile
 14931  004E2C  0B0F               	andlw	15
 14932  004E2E  0A0F               	xorlw	15
 14933  004E30  B4D8               	btfsc	status,2,c
 14934  004E32  0012               	return	
 14935  004E34  D014               	goto	l8872
 14936  004E36                     l1426:
 14937                           
 14938                           ;Test.c: 557: LATBbits.LATB2 = 1;
 14939  004E36  848A               	bsf	3978,2,c	;volatile
 14940                           
 14941                           ;Test.c: 558: _delay((unsigned long)((5)*(32000000/4000.0)));
 14942  004E38  0E34               	movlw	52
 14943  004E3A  0100               	movlb	0	; () banked
 14944  004E3C  6FAB               	movwf	??_SpeedTest& (0+255),b
 14945  004E3E  0EF1               	movlw	241
 14946  004E40                     u11007:
 14947  004E40  2EE8               	decfsz	wreg,f,c
 14948  004E42  D7FE               	bra	u11007
 14949  004E44  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 14950  004E46  D7FC               	bra	u11007
 14951  004E48  D000               	nop2	
 14952                           
 14953                           ;Test.c: 559: LATBbits.LATB2 = 0;
 14954  004E4A  948A               	bcf	3978,2,c	;volatile
 14955                           
 14956                           ;Test.c: 560: _delay((unsigned long)((5)*(32000000/4000.0)));
 14957  004E4C  0E34               	movlw	52
 14958  004E4E  0100               	movlb	0	; () banked
 14959  004E50  6FAB               	movwf	??_SpeedTest& (0+255),b
 14960  004E52  0EF1               	movlw	241
 14961  004E54                     u11017:
 14962  004E54  2EE8               	decfsz	wreg,f,c
 14963  004E56  D7FE               	bra	u11017
 14964  004E58  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 14965  004E5A  D7FC               	bra	u11017
 14966  004E5C  D000               	nop2	
 14967  004E5E                     l8872:
 14968  004E5E  B281               	btfsc	3969,1,c	;volatile
 14969  004E60  D7EA               	goto	l1426
 14970                           
 14971                           ;Test.c: 563: }
 14972                           ;Test.c: 564: LATBbits.LATB2 = 0;
 14973  004E62  948A               	bcf	3978,2,c	;volatile
 14974  004E64  D7E0               	goto	l1419
 14975  004E66                     __end_of_SpeedTest:
 14976                           	opt stack 0
 14977                           tblptru	equ	0xFF8
 14978                           tblptrh	equ	0xFF7
 14979                           tblptrl	equ	0xFF6
 14980                           tablat	equ	0xFF5
 14981                           prodh	equ	0xFF4
 14982                           prodl	equ	0xFF3
 14983                           intcon	equ	0xFF2
 14984                           intcon2	equ	0xFF1
 14985                           intcon3	equ	0xFF0
 14986                           postinc0	equ	0xFEE
 14987                           wreg	equ	0xFE8
 14988                           postdec1	equ	0xFE5
 14989                           fsr1l	equ	0xFE1
 14990                           indf2	equ	0xFDF
 14991                           postinc2	equ	0xFDE
 14992                           postdec2	equ	0xFDD
 14993                           fsr2h	equ	0xFDA
 14994                           fsr2l	equ	0xFD9
 14995                           status	equ	0xFD8
 14996                           
 14997 ;; *************** function _PortTestPusher *****************
 14998 ;; Defined at:
 14999 ;;		line 682 in file "Test.c"
 15000 ;; Parameters:    Size  Location     Type
 15001 ;;		None
 15002 ;; Auto vars:     Size  Location     Type
 15003 ;;		None
 15004 ;; Return value:  Size  Location     Type
 15005 ;;                  1    wreg      void 
 15006 ;; Registers used:
 15007 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15008 ;; Tracked objects:
 15009 ;;		On entry : 0/0
 15010 ;;		On exit  : 0/0
 15011 ;;		Unchanged: 0/0
 15012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15013 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15014 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15015 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15016 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15017 ;;Total ram usage:        1 bytes
 15018 ;; Hardware stack levels used:    1
 15019 ;; Hardware stack levels required when called:   10
 15020 ;; This function calls:
 15021 ;;		_lcdInst
 15022 ;;		_printf
 15023 ;; This function is called by:
 15024 ;;		_Test
 15025 ;; This function uses a non-reentrant model
 15026 ;;
 15027                           
 15028                           	psect	text47
 15029  0052B2                     __ptext47:
 15030                           	opt stack 0
 15031  0052B2                     _PortTestPusher:
 15032                           	opt stack 19
 15033                           
 15034                           ;Test.c: 683: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15035                           
 15036                           ;incstack = 0
 15037  0052B2  0E01               	movlw	1
 15038  0052B4  EC10  F02E         	call	_lcdInst
 15039  0052B8  0E68               	movlw	104
 15040  0052BA  0100               	movlb	0	; () banked
 15041  0052BC  6FAB               	movwf	??_PortTestPusher& (0+255),b
 15042  0052BE  0EE4               	movlw	228
 15043  0052C0                     u11027:
 15044  0052C0  2EE8               	decfsz	wreg,f,c
 15045  0052C2  D7FE               	bra	u11027
 15046  0052C4  2FAB               	decfsz	??_PortTestPusher& (0+255),f,b
 15047  0052C6  D7FC               	bra	u11027
 15048  0052C8  F000               	nop	
 15049  0052CA  0E80               	movlw	128
 15050  0052CC  EC10  F02E         	call	_lcdInst
 15051                           
 15052                           ;Test.c: 684: printf("D WILL RETURN    ");
 15053  0052D0  0EE5               	movlw	low STR_112
 15054  0052D2  0100               	movlb	0	; () banked
 15055  0052D4  6F8E               	movwf	printf@f& (0+255),b
 15056  0052D6  0EFA               	movlw	high STR_112
 15057  0052D8  0100               	movlb	0	; () banked
 15058  0052DA  6F8F               	movwf	(printf@f+1)& (0+255),b
 15059  0052DC  EC16  F00E         	call	_printf	;wreg free
 15060                           
 15061                           ;Test.c: 685: lcdInst(0b11000000);;
 15062  0052E0  0EC0               	movlw	192
 15063  0052E2  EC10  F02E         	call	_lcdInst
 15064                           
 15065                           ;Test.c: 686: printf("OTHER SETS PUSHER");
 15066  0052E6  0E2D               	movlw	low STR_130
 15067  0052E8  0100               	movlb	0	; () banked
 15068  0052EA  6F8E               	movwf	printf@f& (0+255),b
 15069  0052EC  0EFB               	movlw	high STR_130
 15070  0052EE  0100               	movlb	0	; () banked
 15071  0052F0  6F8F               	movwf	(printf@f+1)& (0+255),b
 15072  0052F2  EC16  F00E         	call	_printf	;wreg free
 15073  0052F6                     l1480:
 15074  0052F6  A281               	btfss	3969,1,c	;volatile
 15075  0052F8  D7FE               	goto	l1480
 15076                           
 15077                           ;Test.c: 691: }
 15078                           ;Test.c: 692: if(PORTB >> 4 == 0b1111){
 15079  0052FA  3881               	swapf	3969,w,c	;volatile
 15080  0052FC  0B0F               	andlw	15
 15081  0052FE  0A0F               	xorlw	15
 15082  005300  B4D8               	btfsc	status,2,c
 15083  005302  0012               	return	
 15084                           
 15085                           ;Test.c: 695: else{
 15086                           ;Test.c: 696: LATAbits.LATA4 = 1;
 15087                           
 15088                           ;Test.c: 694: }
 15089                           
 15090                           ;Test.c: 693: break;
 15091  005304  8889               	bsf	3977,4,c	;volatile
 15092  005306                     l1486:
 15093  005306  B281               	btfsc	3969,1,c	;volatile
 15094  005308  D7FE               	goto	l1486
 15095                           
 15096                           ;Test.c: 699: }
 15097                           ;Test.c: 700: LATAbits.LATA4 = 0;
 15098  00530A  9889               	bcf	3977,4,c	;volatile
 15099  00530C  D7F4               	goto	l1480
 15100  00530E                     __end_of_PortTestPusher:
 15101                           	opt stack 0
 15102                           tblptru	equ	0xFF8
 15103                           tblptrh	equ	0xFF7
 15104                           tblptrl	equ	0xFF6
 15105                           tablat	equ	0xFF5
 15106                           prodh	equ	0xFF4
 15107                           prodl	equ	0xFF3
 15108                           intcon	equ	0xFF2
 15109                           intcon2	equ	0xFF1
 15110                           intcon3	equ	0xFF0
 15111                           postinc0	equ	0xFEE
 15112                           wreg	equ	0xFE8
 15113                           postdec1	equ	0xFE5
 15114                           fsr1l	equ	0xFE1
 15115                           indf2	equ	0xFDF
 15116                           postinc2	equ	0xFDE
 15117                           postdec2	equ	0xFDD
 15118                           fsr2h	equ	0xFDA
 15119                           fsr2l	equ	0xFD9
 15120                           status	equ	0xFD8
 15121                           
 15122 ;; *************** function _PortTestDC *****************
 15123 ;; Defined at:
 15124 ;;		line 411 in file "Test.c"
 15125 ;; Parameters:    Size  Location     Type
 15126 ;;		None
 15127 ;; Auto vars:     Size  Location     Type
 15128 ;;		None
 15129 ;; Return value:  Size  Location     Type
 15130 ;;                  1    wreg      void 
 15131 ;; Registers used:
 15132 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15133 ;; Tracked objects:
 15134 ;;		On entry : 0/0
 15135 ;;		On exit  : 0/0
 15136 ;;		Unchanged: 0/0
 15137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15138 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15139 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15140 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15141 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15142 ;;Total ram usage:        1 bytes
 15143 ;; Hardware stack levels used:    1
 15144 ;; Hardware stack levels required when called:   10
 15145 ;; This function calls:
 15146 ;;		_lcdInst
 15147 ;;		_printf
 15148 ;; This function is called by:
 15149 ;;		_Test
 15150 ;; This function uses a non-reentrant model
 15151 ;;
 15152                           
 15153                           	psect	text48
 15154  00530E                     __ptext48:
 15155                           	opt stack 0
 15156  00530E                     _PortTestDC:
 15157                           	opt stack 19
 15158                           
 15159                           ;Test.c: 412: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15160                           
 15161                           ;incstack = 0
 15162  00530E  0E01               	movlw	1
 15163  005310  EC10  F02E         	call	_lcdInst
 15164  005314  0E68               	movlw	104
 15165  005316  0100               	movlb	0	; () banked
 15166  005318  6FAB               	movwf	??_PortTestDC& (0+255),b
 15167  00531A  0EE4               	movlw	228
 15168  00531C                     u11037:
 15169  00531C  2EE8               	decfsz	wreg,f,c
 15170  00531E  D7FE               	bra	u11037
 15171  005320  2FAB               	decfsz	??_PortTestDC& (0+255),f,b
 15172  005322  D7FC               	bra	u11037
 15173  005324  F000               	nop	
 15174  005326  0E80               	movlw	128
 15175  005328  EC10  F02E         	call	_lcdInst
 15176                           
 15177                           ;Test.c: 413: printf("D WILL RETURN    ");
 15178  00532C  0EE5               	movlw	low STR_112
 15179  00532E  0100               	movlb	0	; () banked
 15180  005330  6F8E               	movwf	printf@f& (0+255),b
 15181  005332  0EFA               	movlw	high STR_112
 15182  005334  0100               	movlb	0	; () banked
 15183  005336  6F8F               	movwf	(printf@f+1)& (0+255),b
 15184  005338  EC16  F00E         	call	_printf	;wreg free
 15185                           
 15186                           ;Test.c: 414: lcdInst(0b11000000);;
 15187  00533C  0EC0               	movlw	192
 15188  00533E  EC10  F02E         	call	_lcdInst
 15189                           
 15190                           ;Test.c: 415: printf("OTHER SETS DC   ");
 15191  005342  0EC9               	movlw	low STR_113
 15192  005344  0100               	movlb	0	; () banked
 15193  005346  6F8E               	movwf	printf@f& (0+255),b
 15194  005348  0EFB               	movlw	high STR_113
 15195  00534A  0100               	movlb	0	; () banked
 15196  00534C  6F8F               	movwf	(printf@f+1)& (0+255),b
 15197  00534E  EC16  F00E         	call	_printf	;wreg free
 15198  005352                     l1361:
 15199  005352  A281               	btfss	3969,1,c	;volatile
 15200  005354  D7FE               	goto	l1361
 15201                           
 15202                           ;Test.c: 420: }
 15203                           ;Test.c: 421: if(PORTB >> 4 == 0b1111){
 15204  005356  3881               	swapf	3969,w,c	;volatile
 15205  005358  0B0F               	andlw	15
 15206  00535A  0A0F               	xorlw	15
 15207  00535C  B4D8               	btfsc	status,2,c
 15208  00535E  0012               	return	
 15209                           
 15210                           ;Test.c: 424: else{
 15211                           ;Test.c: 425: LATBbits.LATB2 = 1;
 15212                           
 15213                           ;Test.c: 423: }
 15214                           
 15215                           ;Test.c: 422: break;
 15216  005360  848A               	bsf	3978,2,c	;volatile
 15217  005362                     l1367:
 15218  005362  B281               	btfsc	3969,1,c	;volatile
 15219  005364  D7FE               	goto	l1367
 15220                           
 15221                           ;Test.c: 428: }
 15222                           ;Test.c: 429: LATBbits.LATB2 = 0;
 15223  005366  948A               	bcf	3978,2,c	;volatile
 15224  005368  D7F4               	goto	l1361
 15225  00536A                     __end_of_PortTestDC:
 15226                           	opt stack 0
 15227                           tblptru	equ	0xFF8
 15228                           tblptrh	equ	0xFF7
 15229                           tblptrl	equ	0xFF6
 15230                           tablat	equ	0xFF5
 15231                           prodh	equ	0xFF4
 15232                           prodl	equ	0xFF3
 15233                           intcon	equ	0xFF2
 15234                           intcon2	equ	0xFF1
 15235                           intcon3	equ	0xFF0
 15236                           postinc0	equ	0xFEE
 15237                           wreg	equ	0xFE8
 15238                           postdec1	equ	0xFE5
 15239                           fsr1l	equ	0xFE1
 15240                           indf2	equ	0xFDF
 15241                           postinc2	equ	0xFDE
 15242                           postdec2	equ	0xFDD
 15243                           fsr2h	equ	0xFDA
 15244                           fsr2l	equ	0xFD9
 15245                           status	equ	0xFD8
 15246                           
 15247 ;; *************** function _PlatformTest *****************
 15248 ;; Defined at:
 15249 ;;		line 434 in file "Test.c"
 15250 ;; Parameters:    Size  Location     Type
 15251 ;;		None
 15252 ;; Auto vars:     Size  Location     Type
 15253 ;;  i               2   51[BANK0 ] int 
 15254 ;;  i               2   49[BANK0 ] int 
 15255 ;;  res             2   47[BANK0 ] int 
 15256 ;;  res             2   45[BANK0 ] int 
 15257 ;;  on              2   53[BANK0 ] int 
 15258 ;; Return value:  Size  Location     Type
 15259 ;;                  1    wreg      void 
 15260 ;; Registers used:
 15261 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15262 ;; Tracked objects:
 15263 ;;		On entry : 0/0
 15264 ;;		On exit  : 0/0
 15265 ;;		Unchanged: 0/0
 15266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15267 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15268 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15269 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15270 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15271 ;;Total ram usage:       12 bytes
 15272 ;; Hardware stack levels used:    1
 15273 ;; Hardware stack levels required when called:   10
 15274 ;; This function calls:
 15275 ;;		_lcdInst
 15276 ;;		_printf
 15277 ;;		_readADC
 15278 ;;		_stopSignals
 15279 ;; This function is called by:
 15280 ;;		_Test
 15281 ;; This function uses a non-reentrant model
 15282 ;;
 15283                           
 15284                           	psect	text49
 15285  0027C0                     __ptext49:
 15286                           	opt stack 0
 15287  0027C0                     _PlatformTest:
 15288                           	opt stack 19
 15289                           
 15290                           ;Test.c: 435: LATCbits.LATC5 = 1;
 15291                           
 15292                           ;incstack = 0
 15293  0027C0  8A8B               	bsf	3979,5,c	;volatile
 15294                           
 15295                           ;Test.c: 437: machine_state = Sorting_state;
 15296  0027C2  0E01               	movlw	1
 15297  0027C4  0100               	movlb	0	; () banked
 15298  0027C6  6FFC               	movwf	_machine_state& (0+255),b
 15299                           
 15300                           ;Test.c: 438: f_arm_position = 0;
 15301  0027C8  0E00               	movlw	0
 15302  0027CA  0100               	movlb	0	; () banked
 15303  0027CC  6FE9               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 15304  0027CE  0E00               	movlw	0
 15305  0027D0  6FE8               	movwf	_f_arm_position& (0+255),b	;volatile
 15306                           
 15307                           ;Test.c: 439: timer2_counter = 0;
 15308  0027D2  0E00               	movlw	0
 15309  0027D4  6E74               	movwf	_timer2_counter+1,c	;volatile
 15310  0027D6  0E00               	movlw	0
 15311  0027D8  6E73               	movwf	_timer2_counter,c	;volatile
 15312                           
 15313                           ; BSR set to: 0
 15314                           ;Test.c: 440: LATBbits.LATB3 = 0;
 15315  0027DA  968A               	bcf	3978,3,c	;volatile
 15316                           
 15317                           ; BSR set to: 0
 15318                           ;Test.c: 441: TMR2ON = 1;
 15319  0027DC  84CA               	bsf	4042,2,c	;volatile
 15320                           
 15321                           ;Test.c: 442: was_low_2 = 0;
 15322  0027DE  0E00               	movlw	0
 15323  0027E0  6E7A               	movwf	_was_low_2+1,c	;volatile
 15324  0027E2  0E00               	movlw	0
 15325  0027E4  6E79               	movwf	_was_low_2,c	;volatile
 15326                           
 15327                           ;Test.c: 444: int on = 1;
 15328  0027E6  0E00               	movlw	0
 15329  0027E8  0100               	movlb	0	; () banked
 15330  0027EA  6FB6               	movwf	(PlatformTest@on+1)& (0+255),b
 15331  0027EC  0E01               	movlw	1
 15332  0027EE  6FB5               	movwf	PlatformTest@on& (0+255),b
 15333                           
 15334                           ; BSR set to: 0
 15335                           ;Test.c: 445: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15336  0027F0  0E01               	movlw	1
 15337  0027F2  EC10  F02E         	call	_lcdInst
 15338  0027F6  0E68               	movlw	104
 15339  0027F8  0100               	movlb	0	; () banked
 15340  0027FA  6FAB               	movwf	??_PlatformTest& (0+255),b
 15341  0027FC  0EE4               	movlw	228
 15342  0027FE                     u11047:
 15343  0027FE  2EE8               	decfsz	wreg,f,c
 15344  002800  D7FE               	bra	u11047
 15345  002802  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15346  002804  D7FC               	bra	u11047
 15347  002806  F000               	nop	
 15348  002808  0E80               	movlw	128
 15349  00280A  EC10  F02E         	call	_lcdInst
 15350                           
 15351                           ;Test.c: 446: printf("1: DC | A: ARM  ");
 15352  00280E  0EFC               	movlw	low STR_114
 15353  002810  0100               	movlb	0	; () banked
 15354  002812  6F8E               	movwf	printf@f& (0+255),b
 15355  002814  0EFB               	movlw	high STR_114
 15356  002816  0100               	movlb	0	; () banked
 15357  002818  6F8F               	movwf	(printf@f+1)& (0+255),b
 15358  00281A  EC16  F00E         	call	_printf	;wreg free
 15359                           
 15360                           ;Test.c: 448: while(PORTBbits.RB1 == 0){
 15361  00281E  D058               	goto	l8926
 15362  002820                     l8908:
 15363                           
 15364                           ;Test.c: 449: readADC(0);
 15365  002820  0E00               	movlw	0
 15366  002822  ECFB  F02C         	call	_readADC
 15367                           
 15368                           ;Test.c: 450: int res = ADRESH<<8 | ADRESL;
 15369  002826  50C3               	movf	4035,w,c	;volatile
 15370  002828  CFC4 F0AB          	movff	4036,??_PlatformTest	;volatile
 15371  00282C  0100               	movlb	0	; () banked
 15372  00282E  6BAC               	clrf	(??_PlatformTest+1)& (0+255),b
 15373  002830  C0AB  F0AC         	movff	??_PlatformTest,??_PlatformTest+1
 15374  002834  0100               	movlb	0	; () banked
 15375  002836  6BAB               	clrf	??_PlatformTest& (0+255),b
 15376  002838  0100               	movlb	0	; () banked
 15377  00283A  11AB               	iorwf	??_PlatformTest& (0+255),w,b
 15378  00283C  0100               	movlb	0	; () banked
 15379  00283E  6FAD               	movwf	PlatformTest@res& (0+255),b
 15380  002840  0100               	movlb	0	; () banked
 15381  002842  51AC               	movf	(??_PlatformTest+1)& (0+255),w,b
 15382  002844  0100               	movlb	0	; () banked
 15383  002846  6FAE               	movwf	(PlatformTest@res+1)& (0+255),b
 15384                           
 15385                           ; BSR set to: 0
 15386                           ;Test.c: 451: IR_signal = (res > 800) ? 1 : 0;
 15387  002848  0100               	movlb	0	; () banked
 15388  00284A  BFAE               	btfsc	(PlatformTest@res+1)& (0+255),7,b
 15389  00284C  D00A               	goto	u8000
 15390  00284E  0E21               	movlw	33
 15391  002850  0100               	movlb	0	; () banked
 15392  002852  5DAD               	subwf	PlatformTest@res& (0+255),w,b
 15393  002854  0E03               	movlw	3
 15394  002856  0100               	movlb	0	; () banked
 15395  002858  59AE               	subwfb	(PlatformTest@res+1)& (0+255),w,b
 15396  00285A  A0D8               	btfss	status,0,c
 15397  00285C  D002               	goto	u8000
 15398  00285E  0E01               	movlw	1
 15399  002860  D001               	goto	u8010
 15400  002862                     u8000:
 15401  002862  0E00               	movlw	0
 15402  002864                     u8010:
 15403  002864  0100               	movlb	0	; () banked
 15404  002866  6FE0               	movwf	_IR_signal& (0+255),b
 15405  002868  6BE1               	clrf	(_IR_signal+1)& (0+255),b
 15406                           
 15407                           ;Test.c: 453: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15408  00286A  0E01               	movlw	1
 15409  00286C  EC10  F02E         	call	_lcdInst
 15410  002870  0E68               	movlw	104
 15411  002872  0100               	movlb	0	; () banked
 15412  002874  6FAB               	movwf	??_PlatformTest& (0+255),b
 15413  002876  0EE4               	movlw	228
 15414  002878                     u11057:
 15415  002878  2EE8               	decfsz	wreg,f,c
 15416  00287A  D7FE               	bra	u11057
 15417  00287C  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15418  00287E  D7FC               	bra	u11057
 15419  002880  F000               	nop	
 15420  002882  0E80               	movlw	128
 15421  002884  EC10  F02E         	call	_lcdInst
 15422                           
 15423                           ;Test.c: 454: printf("1: DC | A: ARM  ");
 15424  002888  0EFC               	movlw	low STR_114
 15425  00288A  0100               	movlb	0	; () banked
 15426  00288C  6F8E               	movwf	printf@f& (0+255),b
 15427  00288E  0EFB               	movlw	high STR_114
 15428  002890  0100               	movlb	0	; () banked
 15429  002892  6F8F               	movwf	(printf@f+1)& (0+255),b
 15430  002894  EC16  F00E         	call	_printf	;wreg free
 15431                           
 15432                           ;Test.c: 455: lcdInst(0b11000000);;
 15433  002898  0EC0               	movlw	192
 15434  00289A  EC10  F02E         	call	_lcdInst
 15435                           
 15436                           ;Test.c: 456: printf("5:H|6:L|IR:%d   ", res);
 15437  00289E  0EEB               	movlw	low STR_116
 15438  0028A0  0100               	movlb	0	; () banked
 15439  0028A2  6F8E               	movwf	printf@f& (0+255),b
 15440  0028A4  0EFB               	movlw	high STR_116
 15441  0028A6  0100               	movlb	0	; () banked
 15442  0028A8  6F8F               	movwf	(printf@f+1)& (0+255),b
 15443  0028AA  C0AD  F090         	movff	PlatformTest@res,?_printf+2
 15444  0028AE  C0AE  F091         	movff	PlatformTest@res+1,?_printf+3
 15445  0028B2  EC16  F00E         	call	_printf	;wreg free
 15446                           
 15447                           ;Test.c: 457: _delay((unsigned long)((100)*(32000000/4000.0)));
 15448  0028B6  0E05               	movlw	5
 15449  0028B8  0100               	movlb	0	; () banked
 15450  0028BA  6FAC               	movwf	(??_PlatformTest+1)& (0+255),b
 15451  0028BC  0E0F               	movlw	15
 15452  0028BE  0100               	movlb	0	; () banked
 15453  0028C0  6FAB               	movwf	??_PlatformTest& (0+255),b
 15454  0028C2  0EF1               	movlw	241
 15455  0028C4                     u11067:
 15456  0028C4  2EE8               	decfsz	wreg,f,c
 15457  0028C6  D7FE               	bra	u11067
 15458  0028C8  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15459  0028CA  D7FC               	bra	u11067
 15460  0028CC  2FAC               	decfsz	(??_PlatformTest+1)& (0+255),f,b
 15461  0028CE  D7FA               	bra	u11067
 15462  0028D0                     l8926:
 15463  0028D0  B281               	btfsc	3969,1,c	;volatile
 15464  0028D2  D059               	goto	l8946
 15465  0028D4  D7A5               	goto	l8908
 15466  0028D6                     l8928:
 15467                           
 15468                           ;Test.c: 462: readADC(0);
 15469  0028D6  0E00               	movlw	0
 15470  0028D8  ECFB  F02C         	call	_readADC
 15471                           
 15472                           ;Test.c: 463: int res = ADRESH<<8 | ADRESL;
 15473  0028DC  50C3               	movf	4035,w,c	;volatile
 15474  0028DE  CFC4 F0AB          	movff	4036,??_PlatformTest	;volatile
 15475  0028E2  0100               	movlb	0	; () banked
 15476  0028E4  6BAC               	clrf	(??_PlatformTest+1)& (0+255),b
 15477  0028E6  C0AB  F0AC         	movff	??_PlatformTest,??_PlatformTest+1
 15478  0028EA  0100               	movlb	0	; () banked
 15479  0028EC  6BAB               	clrf	??_PlatformTest& (0+255),b
 15480  0028EE  0100               	movlb	0	; () banked
 15481  0028F0  11AB               	iorwf	??_PlatformTest& (0+255),w,b
 15482  0028F2  0100               	movlb	0	; () banked
 15483  0028F4  6FAF               	movwf	PlatformTest@res_1787& (0+255),b
 15484  0028F6  0100               	movlb	0	; () banked
 15485  0028F8  51AC               	movf	(??_PlatformTest+1)& (0+255),w,b
 15486  0028FA  0100               	movlb	0	; () banked
 15487  0028FC  6FB0               	movwf	(PlatformTest@res_1787+1)& (0+255),b
 15488                           
 15489                           ; BSR set to: 0
 15490                           ;Test.c: 464: IR_signal = (res > 800) ? 1 : 0;
 15491  0028FE  0100               	movlb	0	; () banked
 15492  002900  BFB0               	btfsc	(PlatformTest@res_1787+1)& (0+255),7,b
 15493  002902  D00A               	goto	u8030
 15494  002904  0E21               	movlw	33
 15495  002906  0100               	movlb	0	; () banked
 15496  002908  5DAF               	subwf	PlatformTest@res_1787& (0+255),w,b
 15497  00290A  0E03               	movlw	3
 15498  00290C  0100               	movlb	0	; () banked
 15499  00290E  59B0               	subwfb	(PlatformTest@res_1787+1)& (0+255),w,b
 15500  002910  A0D8               	btfss	status,0,c
 15501  002912  D002               	goto	u8030
 15502  002914  0E01               	movlw	1
 15503  002916  D001               	goto	u8040
 15504  002918                     u8030:
 15505  002918  0E00               	movlw	0
 15506  00291A                     u8040:
 15507  00291A  0100               	movlb	0	; () banked
 15508  00291C  6FE0               	movwf	_IR_signal& (0+255),b
 15509  00291E  6BE1               	clrf	(_IR_signal+1)& (0+255),b
 15510                           
 15511                           ;Test.c: 466: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15512  002920  0E01               	movlw	1
 15513  002922  EC10  F02E         	call	_lcdInst
 15514  002926  0E68               	movlw	104
 15515  002928  0100               	movlb	0	; () banked
 15516  00292A  6FAB               	movwf	??_PlatformTest& (0+255),b
 15517  00292C  0EE4               	movlw	228
 15518  00292E                     u11077:
 15519  00292E  2EE8               	decfsz	wreg,f,c
 15520  002930  D7FE               	bra	u11077
 15521  002932  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15522  002934  D7FC               	bra	u11077
 15523  002936  F000               	nop	
 15524  002938  0E80               	movlw	128
 15525  00293A  EC10  F02E         	call	_lcdInst
 15526                           
 15527                           ;Test.c: 467: printf("1: DC | A: ARM  ");
 15528  00293E  0EFC               	movlw	low STR_114
 15529  002940  0100               	movlb	0	; () banked
 15530  002942  6F8E               	movwf	printf@f& (0+255),b
 15531  002944  0EFB               	movlw	high STR_114
 15532  002946  0100               	movlb	0	; () banked
 15533  002948  6F8F               	movwf	(printf@f+1)& (0+255),b
 15534  00294A  EC16  F00E         	call	_printf	;wreg free
 15535                           
 15536                           ;Test.c: 468: lcdInst(0b11000000);;
 15537  00294E  0EC0               	movlw	192
 15538  002950  EC10  F02E         	call	_lcdInst
 15539                           
 15540                           ;Test.c: 469: printf("5:H|6:L|IR:%d   ", res);
 15541  002954  0EEB               	movlw	low STR_116
 15542  002956  0100               	movlb	0	; () banked
 15543  002958  6F8E               	movwf	printf@f& (0+255),b
 15544  00295A  0EFB               	movlw	high STR_116
 15545  00295C  0100               	movlb	0	; () banked
 15546  00295E  6F8F               	movwf	(printf@f+1)& (0+255),b
 15547  002960  C0AF  F090         	movff	PlatformTest@res_1787,?_printf+2
 15548  002964  C0B0  F091         	movff	PlatformTest@res_1787+1,?_printf+3
 15549  002968  EC16  F00E         	call	_printf	;wreg free
 15550                           
 15551                           ;Test.c: 470: _delay((unsigned long)((100)*(32000000/4000.0)));
 15552  00296C  0E05               	movlw	5
 15553  00296E  0100               	movlb	0	; () banked
 15554  002970  6FAC               	movwf	(??_PlatformTest+1)& (0+255),b
 15555  002972  0E0F               	movlw	15
 15556  002974  0100               	movlb	0	; () banked
 15557  002976  6FAB               	movwf	??_PlatformTest& (0+255),b
 15558  002978  0EF1               	movlw	241
 15559  00297A                     u11087:
 15560  00297A  2EE8               	decfsz	wreg,f,c
 15561  00297C  D7FE               	bra	u11087
 15562  00297E  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15563  002980  D7FC               	bra	u11087
 15564  002982  2FAC               	decfsz	(??_PlatformTest+1)& (0+255),f,b
 15565  002984  D7FA               	bra	u11087
 15566  002986                     l8946:
 15567  002986  A281               	btfss	3969,1,c	;volatile
 15568  002988  D7A6               	goto	l8928
 15569                           
 15570                           ;Test.c: 471: }
 15571                           ;Test.c: 472: if(PORTB >> 4 == 0b1111){
 15572  00298A  3881               	swapf	3969,w,c	;volatile
 15573  00298C  0B0F               	andlw	15
 15574  00298E  0A0F               	xorlw	15
 15575  002990  B4D8               	btfsc	status,2,c
 15576  002992  D09A               	goto	l1382
 15577                           
 15578                           ;Test.c: 475: else if(PORTB >> 4 == 0b0000){
 15579                           
 15580                           ;Test.c: 474: }
 15581                           
 15582                           ;Test.c: 473: break;
 15583  002994  CF81 F0AB          	movff	3969,??_PlatformTest	;volatile
 15584  002998  0100               	movlb	0	; () banked
 15585  00299A  3BAB               	swapf	??_PlatformTest& (0+255),f,b
 15586  00299C  0E0F               	movlw	15
 15587  00299E  17AB               	andwf	??_PlatformTest& (0+255),f,b
 15588  0029A0  A4D8               	btfss	status,2,c
 15589  0029A2  D012               	goto	l8958
 15590                           
 15591                           ; BSR set to: 0
 15592                           ;Test.c: 476: LATBbits.LATB2 = !LATBbits.LATB2;
 15593  0029A4  B48A               	btfsc	3978,2,c	;volatile
 15594  0029A6  D004               	goto	u8080
 15595  0029A8  0100               	movlb	0	; () banked
 15596  0029AA  6BAB               	clrf	??_PlatformTest& (0+255),b
 15597  0029AC  2BAB               	incf	??_PlatformTest& (0+255),f,b
 15598  0029AE  D002               	goto	u8098
 15599  0029B0                     u8080:
 15600  0029B0  0100               	movlb	0	; () banked
 15601  0029B2  6BAB               	clrf	??_PlatformTest& (0+255),b
 15602  0029B4                     u8098:
 15603  0029B4  0100               	movlb	0	; () banked
 15604  0029B6  47AB               	rlncf	??_PlatformTest& (0+255),f,b
 15605  0029B8  47AB               	rlncf	??_PlatformTest& (0+255),f,b
 15606  0029BA  508A               	movf	3978,w,c	;volatile
 15607  0029BC  0100               	movlb	0	; () banked
 15608  0029BE  19AB               	xorwf	??_PlatformTest& (0+255),w,b
 15609  0029C0  0BFB               	andlw	-5
 15610  0029C2  19AB               	xorwf	??_PlatformTest& (0+255),w,b
 15611  0029C4  6E8A               	movwf	3978,c	;volatile
 15612                           
 15613                           ;Test.c: 477: }
 15614  0029C6  D07D               	goto	l1397
 15615  0029C8                     l8958:
 15616                           
 15617                           ; BSR set to: 0
 15618                           ;Test.c: 478: else if(PORTB >> 4 == 0b0011){
 15619  0029C8  3881               	swapf	3969,w,c	;volatile
 15620  0029CA  0B0F               	andlw	15
 15621  0029CC  0A03               	xorlw	3
 15622  0029CE  A4D8               	btfss	status,2,c
 15623  0029D0  D020               	goto	l8970
 15624                           
 15625                           ; BSR set to: 0
 15626                           ;Test.c: 479: if(on){
 15627  0029D2  0100               	movlb	0	; () banked
 15628  0029D4  51B5               	movf	PlatformTest@on& (0+255),w,b
 15629  0029D6  0100               	movlb	0	; () banked
 15630  0029D8  11B6               	iorwf	(PlatformTest@on+1)& (0+255),w,b
 15631  0029DA  B4D8               	btfsc	status,2,c
 15632  0029DC  D010               	goto	l8966
 15633                           
 15634                           ; BSR set to: 0
 15635                           ;Test.c: 480: f_arm_position = 1;
 15636  0029DE  0E00               	movlw	0
 15637  0029E0  0100               	movlb	0	; () banked
 15638  0029E2  6FE9               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 15639  0029E4  0E01               	movlw	1
 15640  0029E6  D00F               	goto	L16
 15641  0029E8                     l8964:
 15642                           
 15643                           ; BSR set to: 0
 15644                           ;Test.c: 481: on = !on;
 15645  0029E8  0100               	movlb	0	; () banked
 15646  0029EA  51B5               	movf	PlatformTest@on& (0+255),w,b
 15647  0029EC  0100               	movlb	0	; () banked
 15648  0029EE  11B6               	iorwf	(PlatformTest@on+1)& (0+255),w,b
 15649  0029F0  A4D8               	btfss	status,2,c
 15650  0029F2  D00D               	goto	u8140
 15651  0029F4  D00A               	goto	u8141
 15652  0029F6                     u8130:
 15653  0029F6  0100               	movlb	0	; () banked
 15654  0029F8  6FB5               	movwf	PlatformTest@on& (0+255),b
 15655  0029FA  6BB6               	clrf	(PlatformTest@on+1)& (0+255),b
 15656                           
 15657                           ;Test.c: 482: }
 15658  0029FC  D062               	goto	l1397
 15659  0029FE                     l8966:
 15660                           
 15661                           ; BSR set to: 0
 15662                           ;Test.c: 483: else{
 15663                           ;Test.c: 484: f_arm_position = 0;
 15664  0029FE  0E00               	movlw	0
 15665  002A00  0100               	movlb	0	; () banked
 15666  002A02  6FE9               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 15667  002A04  0E00               	movlw	0
 15668  002A06                     L16:
 15669  002A06  6FE8               	movwf	_f_arm_position& (0+255),b	;volatile
 15670  002A08  D7EF               	goto	l8964
 15671  002A0A                     u8141:
 15672  002A0A  0E01               	movlw	1
 15673  002A0C  D7F4               	goto	u8130
 15674  002A0E                     u8140:
 15675  002A0E  0E00               	movlw	0
 15676  002A10  D7F2               	goto	u8130
 15677  002A12                     l8970:
 15678                           
 15679                           ; BSR set to: 0
 15680                           ;Test.c: 488: else if(PORTB >> 4 == 0b0101){
 15681  002A12  3881               	swapf	3969,w,c	;volatile
 15682  002A14  0B0F               	andlw	15
 15683  002A16  0A05               	xorlw	5
 15684  002A18  A4D8               	btfss	status,2,c
 15685  002A1A  D027               	goto	l8984
 15686                           
 15687                           ; BSR set to: 0
 15688                           ;Test.c: 490: for(int i = 0; i<30; i++){
 15689  002A1C  0E00               	movlw	0
 15690  002A1E  0100               	movlb	0	; () banked
 15691  002A20  6FB2               	movwf	(PlatformTest@i+1)& (0+255),b
 15692  002A22  0E00               	movlw	0
 15693  002A24  6FB1               	movwf	PlatformTest@i& (0+255),b
 15694  002A26                     l8974:
 15695                           
 15696                           ; BSR set to: 0
 15697  002A26  0100               	movlb	0	; () banked
 15698  002A28  BFB2               	btfsc	(PlatformTest@i+1)& (0+255),7,b
 15699  002A2A  D008               	goto	l1391
 15700  002A2C  0100               	movlb	0	; () banked
 15701  002A2E  51B2               	movf	(PlatformTest@i+1)& (0+255),w,b
 15702  002A30  E148               	bnz	l1397
 15703  002A32  0E1E               	movlw	30
 15704  002A34  0100               	movlb	0	; () banked
 15705  002A36  5DB1               	subwf	PlatformTest@i& (0+255),w,b
 15706  002A38  B0D8               	btfsc	status,0,c
 15707  002A3A  D043               	goto	l1397
 15708  002A3C                     l1391:
 15709                           
 15710                           ; BSR set to: 0
 15711                           ;Test.c: 491: LATAbits.LATA4 = 1;
 15712  002A3C  8889               	bsf	3977,4,c	;volatile
 15713                           
 15714                           ; BSR set to: 0
 15715                           ;Test.c: 492: _delay((unsigned long)((7500)*(32000000/4000000.0)));
 15716  002A3E  0E4E               	movlw	78
 15717  002A40  0100               	movlb	0	; () banked
 15718  002A42  6FAB               	movwf	??_PlatformTest& (0+255),b
 15719  002A44  0EEB               	movlw	235
 15720  002A46                     u11097:
 15721  002A46  2EE8               	decfsz	wreg,f,c
 15722  002A48  D7FE               	bra	u11097
 15723  002A4A  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15724  002A4C  D7FC               	bra	u11097
 15725                           
 15726                           ;Test.c: 493: LATAbits.LATA4 = 0;
 15727  002A4E  9889               	bcf	3977,4,c	;volatile
 15728                           
 15729                           ;Test.c: 494: _delay((unsigned long)((2500)*(32000000/4000000.0)));
 15730  002A50  0E1A               	movlw	26
 15731  002A52  0100               	movlb	0	; () banked
 15732  002A54  6FAB               	movwf	??_PlatformTest& (0+255),b
 15733  002A56  0EF8               	movlw	248
 15734  002A58                     u11107:
 15735  002A58  2EE8               	decfsz	wreg,f,c
 15736  002A5A  D7FE               	bra	u11107
 15737  002A5C  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15738  002A5E  D7FC               	bra	u11107
 15739  002A60  F000               	nop	
 15740  002A62  0100               	movlb	0	; () banked
 15741  002A64  4BB1               	infsnz	PlatformTest@i& (0+255),f,b
 15742  002A66  2BB2               	incf	(PlatformTest@i+1)& (0+255),f,b
 15743  002A68  D7DE               	goto	l8974
 15744  002A6A                     l8984:
 15745                           
 15746                           ; BSR set to: 0
 15747                           ;Test.c: 497: else if (PORTB >> 4 == 0b0110){
 15748  002A6A  3881               	swapf	3969,w,c	;volatile
 15749  002A6C  0B0F               	andlw	15
 15750  002A6E  0A06               	xorlw	6
 15751  002A70  A4D8               	btfss	status,2,c
 15752  002A72  D027               	goto	l1397
 15753                           
 15754                           ; BSR set to: 0
 15755                           ;Test.c: 499: for(int i = 0; i<30; i++){
 15756  002A74  0E00               	movlw	0
 15757  002A76  0100               	movlb	0	; () banked
 15758  002A78  6FB4               	movwf	(PlatformTest@i_1791+1)& (0+255),b
 15759  002A7A  0E00               	movlw	0
 15760  002A7C  6FB3               	movwf	PlatformTest@i_1791& (0+255),b
 15761  002A7E                     l8988:
 15762                           
 15763                           ; BSR set to: 0
 15764  002A7E  0100               	movlb	0	; () banked
 15765  002A80  BFB4               	btfsc	(PlatformTest@i_1791+1)& (0+255),7,b
 15766  002A82  D008               	goto	l1395
 15767  002A84  0100               	movlb	0	; () banked
 15768  002A86  51B4               	movf	(PlatformTest@i_1791+1)& (0+255),w,b
 15769  002A88  E11C               	bnz	l1397
 15770  002A8A  0E1E               	movlw	30
 15771  002A8C  0100               	movlb	0	; () banked
 15772  002A8E  5DB3               	subwf	PlatformTest@i_1791& (0+255),w,b
 15773  002A90  B0D8               	btfsc	status,0,c
 15774  002A92  D017               	goto	l1397
 15775  002A94                     l1395:
 15776                           
 15777                           ; BSR set to: 0
 15778                           ;Test.c: 500: LATAbits.LATA4 = 1;
 15779  002A94  8889               	bsf	3977,4,c	;volatile
 15780                           
 15781                           ; BSR set to: 0
 15782                           ;Test.c: 501: _delay((unsigned long)((5800)*(32000000/4000000.0)));
 15783  002A96  0E3D               	movlw	61
 15784  002A98  0100               	movlb	0	; () banked
 15785  002A9A  6FAB               	movwf	??_PlatformTest& (0+255),b
 15786  002A9C  0E41               	movlw	65
 15787  002A9E                     u11117:
 15788  002A9E  2EE8               	decfsz	wreg,f,c
 15789  002AA0  D7FE               	bra	u11117
 15790  002AA2  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15791  002AA4  D7FC               	bra	u11117
 15792                           
 15793                           ;Test.c: 502: LATAbits.LATA4 = 0;
 15794  002AA6  9889               	bcf	3977,4,c	;volatile
 15795                           
 15796                           ;Test.c: 503: _delay((unsigned long)((4200)*(32000000/4000000.0)));
 15797  002AA8  0E2C               	movlw	44
 15798  002AAA  0100               	movlb	0	; () banked
 15799  002AAC  6FAB               	movwf	??_PlatformTest& (0+255),b
 15800  002AAE  0EA1               	movlw	161
 15801  002AB0                     u11127:
 15802  002AB0  2EE8               	decfsz	wreg,f,c
 15803  002AB2  D7FE               	bra	u11127
 15804  002AB4  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15805  002AB6  D7FC               	bra	u11127
 15806  002AB8  D000               	nop2	
 15807  002ABA  0100               	movlb	0	; () banked
 15808  002ABC  4BB3               	infsnz	PlatformTest@i_1791& (0+255),f,b
 15809  002ABE  2BB4               	incf	(PlatformTest@i_1791+1)& (0+255),f,b
 15810  002AC0  D7DE               	goto	l8988
 15811  002AC2                     l1397:
 15812  002AC2  A281               	btfss	3969,1,c	;volatile
 15813  002AC4  D760               	goto	l8946
 15814  002AC6  D7FD               	goto	l1397
 15815  002AC8                     l1382:
 15816                           
 15817                           ;Test.c: 508: }
 15818                           ;Test.c: 510: LATCbits.LATC5 = 0;
 15819  002AC8  9A8B               	bcf	3979,5,c	;volatile
 15820                           
 15821                           ;Test.c: 511: stopSignals();
 15822  002ACA  ECB7  F02D         	call	_stopSignals	;wreg free
 15823                           
 15824                           ;Test.c: 512: machine_state = Testing_state;
 15825  002ACE  0E03               	movlw	3
 15826  002AD0  0100               	movlb	0	; () banked
 15827  002AD2  6FFC               	movwf	_machine_state& (0+255),b
 15828                           
 15829                           ; BSR set to: 0
 15830  002AD4  0012               	return		;funcret
 15831  002AD6                     __end_of_PlatformTest:
 15832                           	opt stack 0
 15833                           tblptru	equ	0xFF8
 15834                           tblptrh	equ	0xFF7
 15835                           tblptrl	equ	0xFF6
 15836                           tablat	equ	0xFF5
 15837                           prodh	equ	0xFF4
 15838                           prodl	equ	0xFF3
 15839                           intcon	equ	0xFF2
 15840                           intcon2	equ	0xFF1
 15841                           intcon3	equ	0xFF0
 15842                           postinc0	equ	0xFEE
 15843                           wreg	equ	0xFE8
 15844                           postdec1	equ	0xFE5
 15845                           fsr1l	equ	0xFE1
 15846                           indf2	equ	0xFDF
 15847                           postinc2	equ	0xFDE
 15848                           postdec2	equ	0xFDD
 15849                           fsr2h	equ	0xFDA
 15850                           fsr2l	equ	0xFD9
 15851                           status	equ	0xFD8
 15852                           
 15853 ;; *************** function _BothServos *****************
 15854 ;; Defined at:
 15855 ;;		line 351 in file "Test.c"
 15856 ;; Parameters:    Size  Location     Type
 15857 ;;		None
 15858 ;; Auto vars:     Size  Location     Type
 15859 ;;		None
 15860 ;; Return value:  Size  Location     Type
 15861 ;;                  1    wreg      void 
 15862 ;; Registers used:
 15863 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15864 ;; Tracked objects:
 15865 ;;		On entry : 0/0
 15866 ;;		On exit  : 0/0
 15867 ;;		Unchanged: 0/0
 15868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15869 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15870 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15871 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15872 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15873 ;;Total ram usage:        2 bytes
 15874 ;; Hardware stack levels used:    1
 15875 ;; Hardware stack levels required when called:   10
 15876 ;; This function calls:
 15877 ;;		_initServos
 15878 ;;		_lcdInst
 15879 ;;		_printf
 15880 ;;		_stopSignals
 15881 ;;		_updateServoPosition
 15882 ;; This function is called by:
 15883 ;;		_Test
 15884 ;; This function uses a non-reentrant model
 15885 ;;
 15886                           
 15887                           	psect	text50
 15888  002064                     __ptext50:
 15889                           	opt stack 0
 15890  002064                     _BothServos:
 15891                           	opt stack 19
 15892                           
 15893                           ;Test.c: 352: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15894                           
 15895                           ; BSR set to: 0
 15896                           ;incstack = 0
 15897  002064  0E01               	movlw	1
 15898  002066  EC10  F02E         	call	_lcdInst
 15899  00206A  0E68               	movlw	104
 15900  00206C  0100               	movlb	0	; () banked
 15901  00206E  6FAB               	movwf	??_BothServos& (0+255),b
 15902  002070  0EE4               	movlw	228
 15903  002072                     u11137:
 15904  002072  2EE8               	decfsz	wreg,f,c
 15905  002074  D7FE               	bra	u11137
 15906  002076  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15907  002078  D7FC               	bra	u11137
 15908  00207A  F000               	nop	
 15909  00207C  0E80               	movlw	128
 15910  00207E  EC10  F02E         	call	_lcdInst
 15911                           
 15912                           ;Test.c: 353: printf("TST: BOTH SERVOS");
 15913  002082  0EA6               	movlw	low STR_111
 15914  002084  0100               	movlb	0	; () banked
 15915  002086  6F8E               	movwf	printf@f& (0+255),b
 15916  002088  0EFC               	movlw	high STR_111
 15917  00208A  0100               	movlb	0	; () banked
 15918  00208C  6F8F               	movwf	(printf@f+1)& (0+255),b
 15919  00208E  EC16  F00E         	call	_printf	;wreg free
 15920                           
 15921                           ;Test.c: 354: TMR1ON = 1;
 15922  002092  80CD               	bsf	4045,0,c	;volatile
 15923                           
 15924                           ;Test.c: 355: TMR3ON = 1;
 15925  002094  80B1               	bsf	4017,0,c	;volatile
 15926                           
 15927                           ;Test.c: 356: machine_state = Sorting_state;
 15928  002096  0E01               	movlw	1
 15929  002098  0100               	movlb	0	; () banked
 15930  00209A  6FFC               	movwf	_machine_state& (0+255),b
 15931                           
 15932                           ; BSR set to: 0
 15933                           ;Test.c: 357: was_low_1 = 0;
 15934  00209C  0E00               	movlw	0
 15935  00209E  6E78               	movwf	_was_low_1+1,c	;volatile
 15936  0020A0  0E00               	movlw	0
 15937  0020A2  6E77               	movwf	_was_low_1,c	;volatile
 15938                           
 15939                           ; BSR set to: 0
 15940                           ;Test.c: 358: was_low_3 = 0;
 15941  0020A4  0E00               	movlw	0
 15942  0020A6  6E7C               	movwf	_was_low_3+1,c	;volatile
 15943  0020A8  0E00               	movlw	0
 15944  0020AA  6E7B               	movwf	_was_low_3,c	;volatile
 15945                           
 15946                           ; BSR set to: 0
 15947                           ;Test.c: 364: initServos();
 15948  0020AC  EC72  F027         	call	_initServos	;wreg free
 15949                           
 15950                           ;Test.c: 365: _delay((unsigned long)((1500)*(32000000/4000.0)));
 15951  0020B0  0E3D               	movlw	61
 15952  0020B2  0100               	movlb	0	; () banked
 15953  0020B4  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15954  0020B6  0EE1               	movlw	225
 15955  0020B8  0100               	movlb	0	; () banked
 15956  0020BA  6FAB               	movwf	??_BothServos& (0+255),b
 15957  0020BC  0E3F               	movlw	63
 15958  0020BE                     u11147:
 15959  0020BE  2EE8               	decfsz	wreg,f,c
 15960  0020C0  D7FE               	bra	u11147
 15961  0020C2  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15962  0020C4  D7FC               	bra	u11147
 15963  0020C6  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15964  0020C8  D7FA               	bra	u11147
 15965  0020CA  D000               	nop2	
 15966                           
 15967                           ;Test.c: 367: updateServoPosition(500, 1);
 15968  0020CC  0E01               	movlw	1
 15969  0020CE  0100               	movlb	0	; () banked
 15970  0020D0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15971  0020D2  0EF4               	movlw	244
 15972  0020D4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15973  0020D6  0E00               	movlw	0
 15974  0020D8  0100               	movlb	0	; () banked
 15975  0020DA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15976  0020DC  0E01               	movlw	1
 15977  0020DE  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15978  0020E0  EC33  F027         	call	_updateServoPosition	;wreg free
 15979                           
 15980                           ;Test.c: 368: updateServoPosition(1050, 3);
 15981  0020E4  0E04               	movlw	4
 15982  0020E6  0100               	movlb	0	; () banked
 15983  0020E8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15984  0020EA  0E1A               	movlw	26
 15985  0020EC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15986  0020EE  0E00               	movlw	0
 15987  0020F0  0100               	movlb	0	; () banked
 15988  0020F2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15989  0020F4  0E03               	movlw	3
 15990  0020F6  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15991  0020F8  EC33  F027         	call	_updateServoPosition	;wreg free
 15992                           
 15993                           ;Test.c: 369: _delay((unsigned long)((750)*(32000000/4000.0)));
 15994  0020FC  0E1F               	movlw	31
 15995  0020FE  0100               	movlb	0	; () banked
 15996  002100  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15997  002102  0E71               	movlw	113
 15998  002104  0100               	movlb	0	; () banked
 15999  002106  6FAB               	movwf	??_BothServos& (0+255),b
 16000  002108  0E1E               	movlw	30
 16001  00210A                     u11157:
 16002  00210A  2EE8               	decfsz	wreg,f,c
 16003  00210C  D7FE               	bra	u11157
 16004  00210E  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16005  002110  D7FC               	bra	u11157
 16006  002112  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16007  002114  D7FA               	bra	u11157
 16008  002116  F000               	nop	
 16009                           
 16010                           ;Test.c: 370: updateServoPosition(1260, 3);
 16011  002118  0E04               	movlw	4
 16012  00211A  0100               	movlb	0	; () banked
 16013  00211C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16014  00211E  0EEC               	movlw	236
 16015  002120  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16016  002122  0E00               	movlw	0
 16017  002124  0100               	movlb	0	; () banked
 16018  002126  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16019  002128  0E03               	movlw	3
 16020  00212A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16021  00212C  EC33  F027         	call	_updateServoPosition	;wreg free
 16022                           
 16023                           ;Test.c: 371: _delay((unsigned long)((700)*(32000000/4000.0)));
 16024  002130  0E1D               	movlw	29
 16025  002132  0100               	movlb	0	; () banked
 16026  002134  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16027  002136  0E69               	movlw	105
 16028  002138  0100               	movlb	0	; () banked
 16029  00213A  6FAB               	movwf	??_BothServos& (0+255),b
 16030  00213C  0EA5               	movlw	165
 16031  00213E                     u11167:
 16032  00213E  2EE8               	decfsz	wreg,f,c
 16033  002140  D7FE               	bra	u11167
 16034  002142  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16035  002144  D7FC               	bra	u11167
 16036  002146  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16037  002148  D7FA               	bra	u11167
 16038                           
 16039                           ;Test.c: 372: updateServoPosition(1050, 3);
 16040  00214A  0E04               	movlw	4
 16041  00214C  0100               	movlb	0	; () banked
 16042  00214E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16043  002150  0E1A               	movlw	26
 16044  002152  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16045  002154  0E00               	movlw	0
 16046  002156  0100               	movlb	0	; () banked
 16047  002158  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16048  00215A  0E03               	movlw	3
 16049  00215C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16050  00215E  EC33  F027         	call	_updateServoPosition	;wreg free
 16051                           
 16052                           ;Test.c: 373: _delay((unsigned long)((750)*(32000000/4000.0)));
 16053  002162  0E1F               	movlw	31
 16054  002164  0100               	movlb	0	; () banked
 16055  002166  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16056  002168  0E71               	movlw	113
 16057  00216A  0100               	movlb	0	; () banked
 16058  00216C  6FAB               	movwf	??_BothServos& (0+255),b
 16059  00216E  0E1E               	movlw	30
 16060  002170                     u11177:
 16061  002170  2EE8               	decfsz	wreg,f,c
 16062  002172  D7FE               	bra	u11177
 16063  002174  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16064  002176  D7FC               	bra	u11177
 16065  002178  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16066  00217A  D7FA               	bra	u11177
 16067  00217C  F000               	nop	
 16068                           
 16069                           ;Test.c: 375: updateServoPosition(850, 1);
 16070  00217E  0E03               	movlw	3
 16071  002180  0100               	movlb	0	; () banked
 16072  002182  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16073  002184  0E52               	movlw	82
 16074  002186  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16075  002188  0E00               	movlw	0
 16076  00218A  0100               	movlb	0	; () banked
 16077  00218C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16078  00218E  0E01               	movlw	1
 16079  002190  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16080  002192  EC33  F027         	call	_updateServoPosition	;wreg free
 16081                           
 16082                           ;Test.c: 376: updateServoPosition(1050, 3);
 16083  002196  0E04               	movlw	4
 16084  002198  0100               	movlb	0	; () banked
 16085  00219A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16086  00219C  0E1A               	movlw	26
 16087  00219E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16088  0021A0  0E00               	movlw	0
 16089  0021A2  0100               	movlb	0	; () banked
 16090  0021A4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16091  0021A6  0E03               	movlw	3
 16092  0021A8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16093  0021AA  EC33  F027         	call	_updateServoPosition	;wreg free
 16094                           
 16095                           ;Test.c: 377: _delay((unsigned long)((750)*(32000000/4000.0)));
 16096  0021AE  0E1F               	movlw	31
 16097  0021B0  0100               	movlb	0	; () banked
 16098  0021B2  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16099  0021B4  0E71               	movlw	113
 16100  0021B6  0100               	movlb	0	; () banked
 16101  0021B8  6FAB               	movwf	??_BothServos& (0+255),b
 16102  0021BA  0E1E               	movlw	30
 16103  0021BC                     u11187:
 16104  0021BC  2EE8               	decfsz	wreg,f,c
 16105  0021BE  D7FE               	bra	u11187
 16106  0021C0  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16107  0021C2  D7FC               	bra	u11187
 16108  0021C4  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16109  0021C6  D7FA               	bra	u11187
 16110  0021C8  F000               	nop	
 16111                           
 16112                           ;Test.c: 378: updateServoPosition(1260, 3);
 16113  0021CA  0E04               	movlw	4
 16114  0021CC  0100               	movlb	0	; () banked
 16115  0021CE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16116  0021D0  0EEC               	movlw	236
 16117  0021D2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16118  0021D4  0E00               	movlw	0
 16119  0021D6  0100               	movlb	0	; () banked
 16120  0021D8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16121  0021DA  0E03               	movlw	3
 16122  0021DC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16123  0021DE  EC33  F027         	call	_updateServoPosition	;wreg free
 16124                           
 16125                           ;Test.c: 379: _delay((unsigned long)((700)*(32000000/4000.0)));
 16126  0021E2  0E1D               	movlw	29
 16127  0021E4  0100               	movlb	0	; () banked
 16128  0021E6  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16129  0021E8  0E69               	movlw	105
 16130  0021EA  0100               	movlb	0	; () banked
 16131  0021EC  6FAB               	movwf	??_BothServos& (0+255),b
 16132  0021EE  0EA5               	movlw	165
 16133  0021F0                     u11197:
 16134  0021F0  2EE8               	decfsz	wreg,f,c
 16135  0021F2  D7FE               	bra	u11197
 16136  0021F4  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16137  0021F6  D7FC               	bra	u11197
 16138  0021F8  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16139  0021FA  D7FA               	bra	u11197
 16140                           
 16141                           ;Test.c: 380: updateServoPosition(1050, 3);
 16142  0021FC  0E04               	movlw	4
 16143  0021FE  0100               	movlb	0	; () banked
 16144  002200  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16145  002202  0E1A               	movlw	26
 16146  002204  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16147  002206  0E00               	movlw	0
 16148  002208  0100               	movlb	0	; () banked
 16149  00220A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16150  00220C  0E03               	movlw	3
 16151  00220E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16152  002210  EC33  F027         	call	_updateServoPosition	;wreg free
 16153                           
 16154                           ;Test.c: 381: _delay((unsigned long)((750)*(32000000/4000.0)));
 16155  002214  0E1F               	movlw	31
 16156  002216  0100               	movlb	0	; () banked
 16157  002218  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16158  00221A  0E71               	movlw	113
 16159  00221C  0100               	movlb	0	; () banked
 16160  00221E  6FAB               	movwf	??_BothServos& (0+255),b
 16161  002220  0E1E               	movlw	30
 16162  002222                     u11207:
 16163  002222  2EE8               	decfsz	wreg,f,c
 16164  002224  D7FE               	bra	u11207
 16165  002226  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16166  002228  D7FC               	bra	u11207
 16167  00222A  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16168  00222C  D7FA               	bra	u11207
 16169  00222E  F000               	nop	
 16170                           
 16171                           ;Test.c: 383: updateServoPosition(500, 1);
 16172  002230  0E01               	movlw	1
 16173  002232  0100               	movlb	0	; () banked
 16174  002234  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16175  002236  0EF4               	movlw	244
 16176  002238  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16177  00223A  0E00               	movlw	0
 16178  00223C  0100               	movlb	0	; () banked
 16179  00223E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16180  002240  0E01               	movlw	1
 16181  002242  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16182  002244  EC33  F027         	call	_updateServoPosition	;wreg free
 16183                           
 16184                           ;Test.c: 384: updateServoPosition(1050, 3);
 16185  002248  0E04               	movlw	4
 16186  00224A  0100               	movlb	0	; () banked
 16187  00224C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16188  00224E  0E1A               	movlw	26
 16189  002250  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16190  002252  0E00               	movlw	0
 16191  002254  0100               	movlb	0	; () banked
 16192  002256  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16193  002258  0E03               	movlw	3
 16194  00225A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16195  00225C  EC33  F027         	call	_updateServoPosition	;wreg free
 16196                           
 16197                           ;Test.c: 385: _delay((unsigned long)((750)*(32000000/4000.0)));
 16198  002260  0E1F               	movlw	31
 16199  002262  0100               	movlb	0	; () banked
 16200  002264  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16201  002266  0E71               	movlw	113
 16202  002268  0100               	movlb	0	; () banked
 16203  00226A  6FAB               	movwf	??_BothServos& (0+255),b
 16204  00226C  0E1E               	movlw	30
 16205  00226E                     u11217:
 16206  00226E  2EE8               	decfsz	wreg,f,c
 16207  002270  D7FE               	bra	u11217
 16208  002272  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16209  002274  D7FC               	bra	u11217
 16210  002276  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16211  002278  D7FA               	bra	u11217
 16212  00227A  F000               	nop	
 16213                           
 16214                           ;Test.c: 386: updateServoPosition(1260, 3);
 16215  00227C  0E04               	movlw	4
 16216  00227E  0100               	movlb	0	; () banked
 16217  002280  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16218  002282  0EEC               	movlw	236
 16219  002284  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16220  002286  0E00               	movlw	0
 16221  002288  0100               	movlb	0	; () banked
 16222  00228A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16223  00228C  0E03               	movlw	3
 16224  00228E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16225  002290  EC33  F027         	call	_updateServoPosition	;wreg free
 16226                           
 16227                           ;Test.c: 387: _delay((unsigned long)((700)*(32000000/4000.0)));
 16228  002294  0E1D               	movlw	29
 16229  002296  0100               	movlb	0	; () banked
 16230  002298  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16231  00229A  0E69               	movlw	105
 16232  00229C  0100               	movlb	0	; () banked
 16233  00229E  6FAB               	movwf	??_BothServos& (0+255),b
 16234  0022A0  0EA5               	movlw	165
 16235  0022A2                     u11227:
 16236  0022A2  2EE8               	decfsz	wreg,f,c
 16237  0022A4  D7FE               	bra	u11227
 16238  0022A6  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16239  0022A8  D7FC               	bra	u11227
 16240  0022AA  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16241  0022AC  D7FA               	bra	u11227
 16242                           
 16243                           ;Test.c: 388: updateServoPosition(1050, 3);
 16244  0022AE  0E04               	movlw	4
 16245  0022B0  0100               	movlb	0	; () banked
 16246  0022B2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16247  0022B4  0E1A               	movlw	26
 16248  0022B6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16249  0022B8  0E00               	movlw	0
 16250  0022BA  0100               	movlb	0	; () banked
 16251  0022BC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16252  0022BE  0E03               	movlw	3
 16253  0022C0  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16254  0022C2  EC33  F027         	call	_updateServoPosition	;wreg free
 16255                           
 16256                           ;Test.c: 389: _delay((unsigned long)((1500)*(32000000/4000.0)));
 16257  0022C6  0E3D               	movlw	61
 16258  0022C8  0100               	movlb	0	; () banked
 16259  0022CA  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16260  0022CC  0EE1               	movlw	225
 16261  0022CE  0100               	movlb	0	; () banked
 16262  0022D0  6FAB               	movwf	??_BothServos& (0+255),b
 16263  0022D2  0E3F               	movlw	63
 16264  0022D4                     u11237:
 16265  0022D4  2EE8               	decfsz	wreg,f,c
 16266  0022D6  D7FE               	bra	u11237
 16267  0022D8  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16268  0022DA  D7FC               	bra	u11237
 16269  0022DC  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16270  0022DE  D7FA               	bra	u11237
 16271  0022E0  D000               	nop2	
 16272                           
 16273                           ;Test.c: 391: updateServoPosition(1670, 1);
 16274  0022E2  0E06               	movlw	6
 16275  0022E4  0100               	movlb	0	; () banked
 16276  0022E6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16277  0022E8  0E86               	movlw	134
 16278  0022EA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16279  0022EC  0E00               	movlw	0
 16280  0022EE  0100               	movlb	0	; () banked
 16281  0022F0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16282  0022F2  0E01               	movlw	1
 16283  0022F4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16284  0022F6  EC33  F027         	call	_updateServoPosition	;wreg free
 16285                           
 16286                           ;Test.c: 392: updateServoPosition(1050, 3);
 16287  0022FA  0E04               	movlw	4
 16288  0022FC  0100               	movlb	0	; () banked
 16289  0022FE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16290  002300  0E1A               	movlw	26
 16291  002302  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16292  002304  0E00               	movlw	0
 16293  002306  0100               	movlb	0	; () banked
 16294  002308  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16295  00230A  0E03               	movlw	3
 16296  00230C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16297  00230E  EC33  F027         	call	_updateServoPosition	;wreg free
 16298                           
 16299                           ;Test.c: 393: _delay((unsigned long)((750)*(32000000/4000.0)));
 16300  002312  0E1F               	movlw	31
 16301  002314  0100               	movlb	0	; () banked
 16302  002316  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16303  002318  0E71               	movlw	113
 16304  00231A  0100               	movlb	0	; () banked
 16305  00231C  6FAB               	movwf	??_BothServos& (0+255),b
 16306  00231E  0E1E               	movlw	30
 16307  002320                     u11247:
 16308  002320  2EE8               	decfsz	wreg,f,c
 16309  002322  D7FE               	bra	u11247
 16310  002324  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16311  002326  D7FC               	bra	u11247
 16312  002328  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16313  00232A  D7FA               	bra	u11247
 16314  00232C  F000               	nop	
 16315                           
 16316                           ;Test.c: 394: updateServoPosition(1390, 3);
 16317  00232E  0E05               	movlw	5
 16318  002330  0100               	movlb	0	; () banked
 16319  002332  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16320  002334  0E6E               	movlw	110
 16321  002336  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16322  002338  0E00               	movlw	0
 16323  00233A  0100               	movlb	0	; () banked
 16324  00233C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16325  00233E  0E03               	movlw	3
 16326  002340  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16327  002342  EC33  F027         	call	_updateServoPosition	;wreg free
 16328                           
 16329                           ;Test.c: 395: _delay((unsigned long)((700)*(32000000/4000.0)));
 16330  002346  0E1D               	movlw	29
 16331  002348  0100               	movlb	0	; () banked
 16332  00234A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16333  00234C  0E69               	movlw	105
 16334  00234E  0100               	movlb	0	; () banked
 16335  002350  6FAB               	movwf	??_BothServos& (0+255),b
 16336  002352  0EA5               	movlw	165
 16337  002354                     u11257:
 16338  002354  2EE8               	decfsz	wreg,f,c
 16339  002356  D7FE               	bra	u11257
 16340  002358  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16341  00235A  D7FC               	bra	u11257
 16342  00235C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16343  00235E  D7FA               	bra	u11257
 16344                           
 16345                           ;Test.c: 396: updateServoPosition(1050, 3);
 16346  002360  0E04               	movlw	4
 16347  002362  0100               	movlb	0	; () banked
 16348  002364  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16349  002366  0E1A               	movlw	26
 16350  002368  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16351  00236A  0E00               	movlw	0
 16352  00236C  0100               	movlb	0	; () banked
 16353  00236E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16354  002370  0E03               	movlw	3
 16355  002372  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16356  002374  EC33  F027         	call	_updateServoPosition	;wreg free
 16357                           
 16358                           ;Test.c: 397: _delay((unsigned long)((750)*(32000000/4000.0)));
 16359  002378  0E1F               	movlw	31
 16360  00237A  0100               	movlb	0	; () banked
 16361  00237C  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16362  00237E  0E71               	movlw	113
 16363  002380  0100               	movlb	0	; () banked
 16364  002382  6FAB               	movwf	??_BothServos& (0+255),b
 16365  002384  0E1E               	movlw	30
 16366  002386                     u11267:
 16367  002386  2EE8               	decfsz	wreg,f,c
 16368  002388  D7FE               	bra	u11267
 16369  00238A  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16370  00238C  D7FC               	bra	u11267
 16371  00238E  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16372  002390  D7FA               	bra	u11267
 16373  002392  F000               	nop	
 16374                           
 16375                           ;Test.c: 399: updateServoPosition(2400, 1);
 16376  002394  0E09               	movlw	9
 16377  002396  0100               	movlb	0	; () banked
 16378  002398  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16379  00239A  0E60               	movlw	96
 16380  00239C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16381  00239E  0E00               	movlw	0
 16382  0023A0  0100               	movlb	0	; () banked
 16383  0023A2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16384  0023A4  0E01               	movlw	1
 16385  0023A6  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16386  0023A8  EC33  F027         	call	_updateServoPosition	;wreg free
 16387                           
 16388                           ;Test.c: 400: updateServoPosition(1050, 3);
 16389  0023AC  0E04               	movlw	4
 16390  0023AE  0100               	movlb	0	; () banked
 16391  0023B0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16392  0023B2  0E1A               	movlw	26
 16393  0023B4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16394  0023B6  0E00               	movlw	0
 16395  0023B8  0100               	movlb	0	; () banked
 16396  0023BA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16397  0023BC  0E03               	movlw	3
 16398  0023BE  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16399  0023C0  EC33  F027         	call	_updateServoPosition	;wreg free
 16400                           
 16401                           ;Test.c: 401: _delay((unsigned long)((750)*(32000000/4000.0)));
 16402  0023C4  0E1F               	movlw	31
 16403  0023C6  0100               	movlb	0	; () banked
 16404  0023C8  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16405  0023CA  0E71               	movlw	113
 16406  0023CC  0100               	movlb	0	; () banked
 16407  0023CE  6FAB               	movwf	??_BothServos& (0+255),b
 16408  0023D0  0E1E               	movlw	30
 16409  0023D2                     u11277:
 16410  0023D2  2EE8               	decfsz	wreg,f,c
 16411  0023D4  D7FE               	bra	u11277
 16412  0023D6  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16413  0023D8  D7FC               	bra	u11277
 16414  0023DA  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16415  0023DC  D7FA               	bra	u11277
 16416  0023DE  F000               	nop	
 16417                           
 16418                           ;Test.c: 402: updateServoPosition(1390, 3);
 16419  0023E0  0E05               	movlw	5
 16420  0023E2  0100               	movlb	0	; () banked
 16421  0023E4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16422  0023E6  0E6E               	movlw	110
 16423  0023E8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16424  0023EA  0E00               	movlw	0
 16425  0023EC  0100               	movlb	0	; () banked
 16426  0023EE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16427  0023F0  0E03               	movlw	3
 16428  0023F2  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16429  0023F4  EC33  F027         	call	_updateServoPosition	;wreg free
 16430                           
 16431                           ;Test.c: 403: _delay((unsigned long)((700)*(32000000/4000.0)));
 16432  0023F8  0E1D               	movlw	29
 16433  0023FA  0100               	movlb	0	; () banked
 16434  0023FC  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16435  0023FE  0E69               	movlw	105
 16436  002400  0100               	movlb	0	; () banked
 16437  002402  6FAB               	movwf	??_BothServos& (0+255),b
 16438  002404  0EA5               	movlw	165
 16439  002406                     u11287:
 16440  002406  2EE8               	decfsz	wreg,f,c
 16441  002408  D7FE               	bra	u11287
 16442  00240A  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16443  00240C  D7FC               	bra	u11287
 16444  00240E  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16445  002410  D7FA               	bra	u11287
 16446                           
 16447                           ;Test.c: 404: updateServoPosition(1050, 3);
 16448  002412  0E04               	movlw	4
 16449  002414  0100               	movlb	0	; () banked
 16450  002416  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16451  002418  0E1A               	movlw	26
 16452  00241A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16453  00241C  0E00               	movlw	0
 16454  00241E  0100               	movlb	0	; () banked
 16455  002420  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16456  002422  0E03               	movlw	3
 16457  002424  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16458  002426  EC33  F027         	call	_updateServoPosition	;wreg free
 16459                           
 16460                           ;Test.c: 405: _delay((unsigned long)((750)*(32000000/4000.0)));
 16461  00242A  0E1F               	movlw	31
 16462  00242C  0100               	movlb	0	; () banked
 16463  00242E  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16464  002430  0E71               	movlw	113
 16465  002432  0100               	movlb	0	; () banked
 16466  002434  6FAB               	movwf	??_BothServos& (0+255),b
 16467  002436  0E1E               	movlw	30
 16468  002438                     u11297:
 16469  002438  2EE8               	decfsz	wreg,f,c
 16470  00243A  D7FE               	bra	u11297
 16471  00243C  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16472  00243E  D7FC               	bra	u11297
 16473  002440  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16474  002442  D7FA               	bra	u11297
 16475  002444  F000               	nop	
 16476                           
 16477                           ;Test.c: 407: stopSignals();
 16478  002446  ECB7  F02D         	call	_stopSignals	;wreg free
 16479                           
 16480                           ;Test.c: 408: machine_state = Testing_state;
 16481  00244A  0E03               	movlw	3
 16482  00244C  0100               	movlb	0	; () banked
 16483  00244E  6FFC               	movwf	_machine_state& (0+255),b
 16484                           
 16485                           ; BSR set to: 0
 16486  002450  0012               	return		;funcret
 16487  002452                     __end_of_BothServos:
 16488                           	opt stack 0
 16489                           tblptru	equ	0xFF8
 16490                           tblptrh	equ	0xFF7
 16491                           tblptrl	equ	0xFF6
 16492                           tablat	equ	0xFF5
 16493                           prodh	equ	0xFF4
 16494                           prodl	equ	0xFF3
 16495                           intcon	equ	0xFF2
 16496                           intcon2	equ	0xFF1
 16497                           intcon3	equ	0xFF0
 16498                           postinc0	equ	0xFEE
 16499                           wreg	equ	0xFE8
 16500                           postdec1	equ	0xFE5
 16501                           fsr1l	equ	0xFE1
 16502                           indf2	equ	0xFDF
 16503                           postinc2	equ	0xFDE
 16504                           postdec2	equ	0xFDD
 16505                           fsr2h	equ	0xFDA
 16506                           fsr2l	equ	0xFD9
 16507                           status	equ	0xFD8
 16508                           
 16509 ;; *************** function _stopSignals *****************
 16510 ;; Defined at:
 16511 ;;		line 72 in file "main.c"
 16512 ;; Parameters:    Size  Location     Type
 16513 ;;		None
 16514 ;; Auto vars:     Size  Location     Type
 16515 ;;		None
 16516 ;; Return value:  Size  Location     Type
 16517 ;;                  1    wreg      void 
 16518 ;; Registers used:
 16519 ;;		wreg, status,2
 16520 ;; Tracked objects:
 16521 ;;		On entry : 0/0
 16522 ;;		On exit  : 0/0
 16523 ;;		Unchanged: 0/0
 16524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16525 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16526 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16527 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16528 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16529 ;;Total ram usage:        0 bytes
 16530 ;; Hardware stack levels used:    1
 16531 ;; Hardware stack levels required when called:    7
 16532 ;; This function calls:
 16533 ;;		Nothing
 16534 ;; This function is called by:
 16535 ;;		_main
 16536 ;;		_BothServos
 16537 ;;		_PlatformTest
 16538 ;;		_arm
 16539 ;; This function uses a non-reentrant model
 16540 ;;
 16541                           
 16542                           	psect	text51
 16543  005B6E                     __ptext51:
 16544                           	opt stack 0
 16545  005B6E                     _stopSignals:
 16546                           	opt stack 23
 16547                           
 16548                           ;main.c: 73: LATA = 0x00;
 16549                           
 16550                           ; BSR set to: 0
 16551                           ;incstack = 0
 16552  005B6E  0E00               	movlw	0
 16553  005B70  6E89               	movwf	3977,c	;volatile
 16554                           
 16555                           ;main.c: 74: LATB = 0x00;
 16556  005B72  0E00               	movlw	0
 16557  005B74  6E8A               	movwf	3978,c	;volatile
 16558                           
 16559                           ;main.c: 75: LATC = 0x00;
 16560  005B76  0E00               	movlw	0
 16561  005B78  6E8B               	movwf	3979,c	;volatile
 16562                           
 16563                           ;main.c: 76: LATD = 0x00;
 16564  005B7A  0E00               	movlw	0
 16565  005B7C  6E8C               	movwf	3980,c	;volatile
 16566                           
 16567                           ;main.c: 77: LATE = 0x00;
 16568  005B7E  0E00               	movlw	0
 16569  005B80  6E8D               	movwf	3981,c	;volatile
 16570                           
 16571                           ;main.c: 78: TMR1ON = 0;
 16572  005B82  90CD               	bcf	4045,0,c	;volatile
 16573                           
 16574                           ;main.c: 79: TMR2ON = 0;
 16575  005B84  94CA               	bcf	4042,2,c	;volatile
 16576                           
 16577                           ;main.c: 80: TMR3ON = 0;
 16578  005B86  90B1               	bcf	4017,0,c	;volatile
 16579  005B88  0012               	return		;funcret
 16580  005B8A                     __end_of_stopSignals:
 16581                           	opt stack 0
 16582                           tblptru	equ	0xFF8
 16583                           tblptrh	equ	0xFF7
 16584                           tblptrl	equ	0xFF6
 16585                           tablat	equ	0xFF5
 16586                           prodh	equ	0xFF4
 16587                           prodl	equ	0xFF3
 16588                           intcon	equ	0xFF2
 16589                           intcon2	equ	0xFF1
 16590                           intcon3	equ	0xFF0
 16591                           postinc0	equ	0xFEE
 16592                           wreg	equ	0xFE8
 16593                           postdec1	equ	0xFE5
 16594                           fsr1l	equ	0xFE1
 16595                           indf2	equ	0xFDF
 16596                           postinc2	equ	0xFDE
 16597                           postdec2	equ	0xFDD
 16598                           fsr2h	equ	0xFDA
 16599                           fsr2l	equ	0xFD9
 16600                           status	equ	0xFD8
 16601                           
 16602 ;; *************** function _initServos *****************
 16603 ;; Defined at:
 16604 ;;		line 465 in file "sort.c"
 16605 ;; Parameters:    Size  Location     Type
 16606 ;;		None
 16607 ;; Auto vars:     Size  Location     Type
 16608 ;;		None
 16609 ;; Return value:  Size  Location     Type
 16610 ;;                  1    wreg      void 
 16611 ;; Registers used:
 16612 ;;		wreg, status,2, status,0, cstack
 16613 ;; Tracked objects:
 16614 ;;		On entry : 0/0
 16615 ;;		On exit  : 0/0
 16616 ;;		Unchanged: 0/0
 16617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16618 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16619 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16620 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16621 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16622 ;;Total ram usage:        1 bytes
 16623 ;; Hardware stack levels used:    1
 16624 ;; Hardware stack levels required when called:    8
 16625 ;; This function calls:
 16626 ;;		_updateServoPosition
 16627 ;; This function is called by:
 16628 ;;		_Loading
 16629 ;;		_BothServos
 16630 ;; This function uses a non-reentrant model
 16631 ;;
 16632                           
 16633                           	psect	text52
 16634  004EE4                     __ptext52:
 16635                           	opt stack 0
 16636  004EE4                     _initServos:
 16637                           	opt stack 20
 16638                           
 16639                           ;sort.c: 467: updateServoPosition(1200, 1);
 16640                           
 16641                           ;incstack = 0
 16642  004EE4  0E04               	movlw	4
 16643  004EE6  0100               	movlb	0	; () banked
 16644  004EE8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16645  004EEA  0EB0               	movlw	176
 16646  004EEC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16647  004EEE  0E00               	movlw	0
 16648  004EF0  0100               	movlb	0	; () banked
 16649  004EF2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16650  004EF4  0E01               	movlw	1
 16651  004EF6  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16652  004EF8  EC33  F027         	call	_updateServoPosition	;wreg free
 16653                           
 16654                           ;sort.c: 468: updateServoPosition(1050, 3);
 16655  004EFC  0E04               	movlw	4
 16656  004EFE  0100               	movlb	0	; () banked
 16657  004F00  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16658  004F02  0E1A               	movlw	26
 16659  004F04  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16660  004F06  0E00               	movlw	0
 16661  004F08  0100               	movlb	0	; () banked
 16662  004F0A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16663  004F0C  0E03               	movlw	3
 16664  004F0E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16665  004F10  EC33  F027         	call	_updateServoPosition	;wreg free
 16666                           
 16667                           ;sort.c: 469: TMR1ON = 1;
 16668  004F14  80CD               	bsf	4045,0,c	;volatile
 16669                           
 16670                           ;sort.c: 470: was_low_1 = 0;
 16671  004F16  0E00               	movlw	0
 16672  004F18  6E78               	movwf	_was_low_1+1,c	;volatile
 16673  004F1A  0E00               	movlw	0
 16674  004F1C  6E77               	movwf	_was_low_1,c	;volatile
 16675                           
 16676                           ;sort.c: 472: _delay((unsigned long)((5)*(32000000/4000.0)));
 16677  004F1E  0E34               	movlw	52
 16678  004F20  0100               	movlb	0	; () banked
 16679  004F22  6F88               	movwf	??_initServos& (0+255),b
 16680  004F24  0EF1               	movlw	241
 16681  004F26                     u11307:
 16682  004F26  2EE8               	decfsz	wreg,f,c
 16683  004F28  D7FE               	bra	u11307
 16684  004F2A  2F88               	decfsz	??_initServos& (0+255),f,b
 16685  004F2C  D7FC               	bra	u11307
 16686  004F2E  D000               	nop2	
 16687                           
 16688                           ;sort.c: 474: TMR3ON = 1;
 16689  004F30  80B1               	bsf	4017,0,c	;volatile
 16690                           
 16691                           ;sort.c: 475: was_low_3 = 0;
 16692  004F32  0E00               	movlw	0
 16693  004F34  6E7C               	movwf	_was_low_3+1,c	;volatile
 16694  004F36  0E00               	movlw	0
 16695  004F38  6E7B               	movwf	_was_low_3,c	;volatile
 16696                           
 16697                           ;sort.c: 478: _delay((unsigned long)((1)*(32000000/4000.0)));
 16698  004F3A  0E0B               	movlw	11
 16699  004F3C  0100               	movlb	0	; () banked
 16700  004F3E  6F88               	movwf	??_initServos& (0+255),b
 16701  004F40  0E62               	movlw	98
 16702  004F42                     u11317:
 16703  004F42  2EE8               	decfsz	wreg,f,c
 16704  004F44  D7FE               	bra	u11317
 16705  004F46  2F88               	decfsz	??_initServos& (0+255),f,b
 16706  004F48  D7FC               	bra	u11317
 16707  004F4A  F000               	nop	
 16708                           
 16709                           ;sort.c: 479: LATBbits.LATB3 = 0;
 16710  004F4C  968A               	bcf	3978,3,c	;volatile
 16711                           
 16712                           ;sort.c: 480: TMR2ON = 1;
 16713  004F4E  84CA               	bsf	4042,2,c	;volatile
 16714                           
 16715                           ;sort.c: 481: was_low_2 = 0;
 16716  004F50  0E00               	movlw	0
 16717  004F52  6E7A               	movwf	_was_low_2+1,c	;volatile
 16718  004F54  0E00               	movlw	0
 16719  004F56  6E79               	movwf	_was_low_2,c	;volatile
 16720                           
 16721                           ;sort.c: 483: LATCbits.LATC0 = 1;
 16722  004F58  808B               	bsf	3979,0,c	;volatile
 16723  004F5A  0012               	return		;funcret
 16724  004F5C                     __end_of_initServos:
 16725                           	opt stack 0
 16726                           tblptru	equ	0xFF8
 16727                           tblptrh	equ	0xFF7
 16728                           tblptrl	equ	0xFF6
 16729                           tablat	equ	0xFF5
 16730                           prodh	equ	0xFF4
 16731                           prodl	equ	0xFF3
 16732                           intcon	equ	0xFF2
 16733                           intcon2	equ	0xFF1
 16734                           intcon3	equ	0xFF0
 16735                           postinc0	equ	0xFEE
 16736                           wreg	equ	0xFE8
 16737                           postdec1	equ	0xFE5
 16738                           fsr1l	equ	0xFE1
 16739                           indf2	equ	0xFDF
 16740                           postinc2	equ	0xFDE
 16741                           postdec2	equ	0xFDD
 16742                           fsr2h	equ	0xFDA
 16743                           fsr2l	equ	0xFD9
 16744                           status	equ	0xFD8
 16745                           
 16746 ;; *************** function _updateServoPosition *****************
 16747 ;; Defined at:
 16748 ;;		line 561 in file "sort.c"
 16749 ;; Parameters:    Size  Location     Type
 16750 ;;  time_us         2    0[BANK0 ] int 
 16751 ;;  timer           2    2[BANK0 ] int 
 16752 ;; Auto vars:     Size  Location     Type
 16753 ;;  my_time         2    6[BANK0 ] unsigned int 
 16754 ;; Return value:  Size  Location     Type
 16755 ;;                  1    wreg      void 
 16756 ;; Registers used:
 16757 ;;		wreg, status,2, status,0
 16758 ;; Tracked objects:
 16759 ;;		On entry : 0/0
 16760 ;;		On exit  : 0/0
 16761 ;;		Unchanged: 0/0
 16762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16763 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16764 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16765 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16766 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16767 ;;Total ram usage:        8 bytes
 16768 ;; Hardware stack levels used:    1
 16769 ;; Hardware stack levels required when called:    7
 16770 ;; This function calls:
 16771 ;;		Nothing
 16772 ;; This function is called by:
 16773 ;;		_Distribution
 16774 ;;		_initServos
 16775 ;;		_actuatorTest
 16776 ;;		_BothServos
 16777 ;; This function uses a non-reentrant model
 16778 ;;
 16779                           
 16780                           	psect	text53
 16781  004E66                     __ptext53:
 16782                           	opt stack 0
 16783  004E66                     _updateServoPosition:
 16784                           	opt stack 20
 16785                           
 16786                           ;sort.c: 562: unsigned int my_time = 65535 - time_us;
 16787                           
 16788                           ;incstack = 0
 16789  004E66  C080  F084         	movff	updateServoPosition@time_us,??_updateServoPosition
 16790  004E6A  C081  F085         	movff	updateServoPosition@time_us+1,??_updateServoPosition+1
 16791  004E6E  0100               	movlb	0	; () banked
 16792  004E70  1F84               	comf	??_updateServoPosition& (0+255),f,b
 16793  004E72  1F85               	comf	(??_updateServoPosition+1)& (0+255),f,b
 16794  004E74  4B84               	infsnz	??_updateServoPosition& (0+255),f,b
 16795  004E76  2B85               	incf	(??_updateServoPosition+1)& (0+255),f,b
 16796  004E78  0EFF               	movlw	255
 16797  004E7A  0100               	movlb	0	; () banked
 16798  004E7C  2584               	addwf	??_updateServoPosition& (0+255),w,b
 16799  004E7E  0100               	movlb	0	; () banked
 16800  004E80  6F86               	movwf	updateServoPosition@my_time& (0+255),b
 16801  004E82  0EFF               	movlw	255
 16802  004E84  0100               	movlb	0	; () banked
 16803  004E86  2185               	addwfc	(??_updateServoPosition+1)& (0+255),w,b
 16804  004E88  0100               	movlb	0	; () banked
 16805  004E8A  6F87               	movwf	(updateServoPosition@my_time+1)& (0+255),b
 16806                           
 16807                           ;sort.c: 563: switch(timer){
 16808  004E8C  D019               	goto	l6882
 16809  004E8E                     l6876:
 16810                           
 16811                           ; BSR set to: 0
 16812                           ;sort.c: 565: servoTimes[0] = my_time >> 8;
 16813  004E8E  0100               	movlb	0	; () banked
 16814  004E90  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 16815  004E92  6E5B               	movwf	_servoTimes,c
 16816  004E94  6A5C               	clrf	_servoTimes+1,c
 16817                           
 16818                           ;sort.c: 566: servoTimes[1] = my_time & 0xFF;
 16819  004E96  0100               	movlb	0	; () banked
 16820  004E98  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 16821  004E9A  6E5D               	movwf	_servoTimes+2,c
 16822  004E9C  6A5E               	clrf	_servoTimes+3,c
 16823                           
 16824                           ; BSR set to: 0
 16825                           ;sort.c: 568: pan_servo_state = time_us;
 16826  004E9E  C080  F06B         	movff	updateServoPosition@time_us,_pan_servo_state	;volatile
 16827  004EA2  C081  F06C         	movff	updateServoPosition@time_us+1,_pan_servo_state+1	;volatile
 16828  004EA6                     l923:
 16829                           
 16830                           ; BSR set to: 0
 16831                           ;sort.c: 570: servoTimes[2] = my_time >> 8;
 16832  004EA6  0100               	movlb	0	; () banked
 16833  004EA8  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 16834  004EAA  6E5F               	movwf	_servoTimes+4,c
 16835  004EAC  6A60               	clrf	_servoTimes+5,c
 16836                           
 16837                           ;sort.c: 571: servoTimes[3] = my_time & 0xFF;
 16838  004EAE  0100               	movlb	0	; () banked
 16839  004EB0  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 16840  004EB2  6E61               	movwf	_servoTimes+6,c
 16841  004EB4  6A62               	clrf	_servoTimes+7,c
 16842                           
 16843                           ; BSR set to: 0
 16844                           ;sort.c: 573: tilt_servo_state = time_us;
 16845  004EB6  C080  F071         	movff	updateServoPosition@time_us,_tilt_servo_state	;volatile
 16846  004EBA  C081  F072         	movff	updateServoPosition@time_us+1,_tilt_servo_state+1	;volatile
 16847                           
 16848                           ;sort.c: 574: }
 16849  004EBE  0012               	return	
 16850  004EC0                     l6882:
 16851                           
 16852                           ; BSR set to: 0
 16853  004EC0  C082  F084         	movff	updateServoPosition@timer,??_updateServoPosition
 16854  004EC4  C083  F085         	movff	updateServoPosition@timer+1,??_updateServoPosition+1
 16855                           
 16856                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 16857                           ; Switch size 1, requested type "space"
 16858                           ; Number of cases is 1, Range of values is 0 to 0
 16859                           ; switch strategies available:
 16860                           ; Name         Instructions Cycles
 16861                           ; simple_byte            4     3 (average)
 16862                           ;	Chosen strategy is simple_byte
 16863  004EC8  0100               	movlb	0	; () banked
 16864  004ECA  5185               	movf	(??_updateServoPosition+1)& (0+255),w,b
 16865  004ECC  0A00               	xorlw	0	; case 0
 16866  004ECE  A4D8               	btfss	status,2,c
 16867  004ED0  0012               	return	
 16868                           
 16869                           ; BSR set to: 0
 16870                           ; Switch size 1, requested type "space"
 16871                           ; Number of cases is 2, Range of values is 1 to 3
 16872                           ; switch strategies available:
 16873                           ; Name         Instructions Cycles
 16874                           ; simple_byte            7     4 (average)
 16875                           ;	Chosen strategy is simple_byte
 16876  004ED2  0100               	movlb	0	; () banked
 16877  004ED4  5184               	movf	??_updateServoPosition& (0+255),w,b
 16878  004ED6  0A01               	xorlw	1	; case 1
 16879  004ED8  B4D8               	btfsc	status,2,c
 16880  004EDA  D7D9               	goto	l6876
 16881  004EDC  0A02               	xorlw	2	; case 3
 16882  004EDE  A4D8               	btfss	status,2,c
 16883  004EE0  0012               	return	
 16884  004EE2  D7E1               	goto	l923
 16885  004EE4                     __end_of_updateServoPosition:
 16886                           	opt stack 0
 16887                           tblptru	equ	0xFF8
 16888                           tblptrh	equ	0xFF7
 16889                           tblptrl	equ	0xFF6
 16890                           tablat	equ	0xFF5
 16891                           prodh	equ	0xFF4
 16892                           prodl	equ	0xFF3
 16893                           intcon	equ	0xFF2
 16894                           intcon2	equ	0xFF1
 16895                           intcon3	equ	0xFF0
 16896                           postinc0	equ	0xFEE
 16897                           wreg	equ	0xFE8
 16898                           postdec1	equ	0xFE5
 16899                           fsr1l	equ	0xFE1
 16900                           indf2	equ	0xFDF
 16901                           postinc2	equ	0xFDE
 16902                           postdec2	equ	0xFDD
 16903                           fsr2h	equ	0xFDA
 16904                           fsr2l	equ	0xFD9
 16905                           status	equ	0xFD8
 16906                           
 16907 ;; *************** function _BlockerTest *****************
 16908 ;; Defined at:
 16909 ;;		line 581 in file "Test.c"
 16910 ;; Parameters:    Size  Location     Type
 16911 ;;		None
 16912 ;; Auto vars:     Size  Location     Type
 16913 ;;  i               2   45[BANK0 ] int 
 16914 ;;  cond_flag       2   51[BANK0 ] int 
 16915 ;;  cam_flag        2   49[BANK0 ] int 
 16916 ;;  res             2   47[BANK0 ] int 
 16917 ;; Return value:  Size  Location     Type
 16918 ;;                  1    wreg      void 
 16919 ;; Registers used:
 16920 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16921 ;; Tracked objects:
 16922 ;;		On entry : 0/0
 16923 ;;		On exit  : 0/0
 16924 ;;		Unchanged: 0/0
 16925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16926 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16927 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16928 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16929 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16930 ;;Total ram usage:       10 bytes
 16931 ;; Hardware stack levels used:    1
 16932 ;; Hardware stack levels required when called:   10
 16933 ;; This function calls:
 16934 ;;		_lcdInst
 16935 ;;		_printf
 16936 ;;		_readADC
 16937 ;; This function is called by:
 16938 ;;		_Test
 16939 ;; This function uses a non-reentrant model
 16940 ;;
 16941                           
 16942                           	psect	text54
 16943  003DD6                     __ptext54:
 16944                           	opt stack 0
 16945  003DD6                     _BlockerTest:
 16946                           	opt stack 19
 16947                           
 16948                           ;Test.c: 582: readADC(2);
 16949                           
 16950                           ; BSR set to: 0
 16951                           ;incstack = 0
 16952  003DD6  0E02               	movlw	2
 16953  003DD8  ECFB  F02C         	call	_readADC
 16954                           
 16955                           ;Test.c: 583: int res = ADRESH<<8 | ADRESL;
 16956  003DDC  50C3               	movf	4035,w,c	;volatile
 16957  003DDE  CFC4 F0AB          	movff	4036,??_BlockerTest	;volatile
 16958  003DE2  0100               	movlb	0	; () banked
 16959  003DE4  6BAC               	clrf	(??_BlockerTest+1)& (0+255),b
 16960  003DE6  C0AB  F0AC         	movff	??_BlockerTest,??_BlockerTest+1
 16961  003DEA  0100               	movlb	0	; () banked
 16962  003DEC  6BAB               	clrf	??_BlockerTest& (0+255),b
 16963  003DEE  0100               	movlb	0	; () banked
 16964  003DF0  11AB               	iorwf	??_BlockerTest& (0+255),w,b
 16965  003DF2  0100               	movlb	0	; () banked
 16966  003DF4  6FAF               	movwf	BlockerTest@res& (0+255),b
 16967  003DF6  0100               	movlb	0	; () banked
 16968  003DF8  51AC               	movf	(??_BlockerTest+1)& (0+255),w,b
 16969  003DFA  0100               	movlb	0	; () banked
 16970  003DFC  6FB0               	movwf	(BlockerTest@res+1)& (0+255),b
 16971                           
 16972                           ; BSR set to: 0
 16973                           ;Test.c: 585: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 16974  003DFE  0E01               	movlw	1
 16975  003E00  EC10  F02E         	call	_lcdInst
 16976  003E04  0E68               	movlw	104
 16977  003E06  0100               	movlb	0	; () banked
 16978  003E08  6FAB               	movwf	??_BlockerTest& (0+255),b
 16979  003E0A  0EE4               	movlw	228
 16980  003E0C                     u11327:
 16981  003E0C  2EE8               	decfsz	wreg,f,c
 16982  003E0E  D7FE               	bra	u11327
 16983  003E10  2FAB               	decfsz	??_BlockerTest& (0+255),f,b
 16984  003E12  D7FC               	bra	u11327
 16985  003E14  F000               	nop	
 16986  003E16  0E80               	movlw	128
 16987  003E18  EC10  F02E         	call	_lcdInst
 16988                           
 16989                           ;Test.c: 586: printf("D:RET|2:C %d  ", res);
 16990  003E1C  0E6E               	movlw	low STR_123
 16991  003E1E  0100               	movlb	0	; () banked
 16992  003E20  6F8E               	movwf	printf@f& (0+255),b
 16993  003E22  0EFE               	movlw	high STR_123
 16994  003E24  0100               	movlb	0	; () banked
 16995  003E26  6F8F               	movwf	(printf@f+1)& (0+255),b
 16996  003E28  C0AF  F090         	movff	BlockerTest@res,?_printf+2
 16997  003E2C  C0B0  F091         	movff	BlockerTest@res+1,?_printf+3
 16998  003E30  EC16  F00E         	call	_printf	;wreg free
 16999                           
 17000                           ;Test.c: 587: lcdInst(0b11000000);;
 17001  003E34  0EC0               	movlw	192
 17002  003E36  EC10  F02E         	call	_lcdInst
 17003                           
 17004                           ;Test.c: 588: printf("OTHER: CAM TOGGLE");
 17005  003E3A  0E1B               	movlw	low STR_124
 17006  003E3C  0100               	movlb	0	; () banked
 17007  003E3E  6F8E               	movwf	printf@f& (0+255),b
 17008  003E40  0EFB               	movlw	high STR_124
 17009  003E42  0100               	movlb	0	; () banked
 17010  003E44  6F8F               	movwf	(printf@f+1)& (0+255),b
 17011  003E46  EC16  F00E         	call	_printf	;wreg free
 17012                           
 17013                           ;Test.c: 589: int cam_flag = 1;
 17014  003E4A  0E00               	movlw	0
 17015  003E4C  0100               	movlb	0	; () banked
 17016  003E4E  6FB2               	movwf	(BlockerTest@cam_flag+1)& (0+255),b
 17017  003E50  0E01               	movlw	1
 17018  003E52  6FB1               	movwf	BlockerTest@cam_flag& (0+255),b
 17019                           
 17020                           ; BSR set to: 0
 17021                           ;Test.c: 590: int cond_flag = 0;
 17022  003E54  0E00               	movlw	0
 17023  003E56  0100               	movlb	0	; () banked
 17024  003E58  6FB4               	movwf	(BlockerTest@cond_flag+1)& (0+255),b
 17025  003E5A  0E00               	movlw	0
 17026  003E5C  6FB3               	movwf	BlockerTest@cond_flag& (0+255),b
 17027                           
 17028                           ; BSR set to: 0
 17029                           ;Test.c: 593: while(PORTBbits.RB1 == 0){
 17030                           
 17031                           ;Test.c: 592: while(1){
 17032  003E5E  D023               	goto	l9126
 17033  003E60                     l9118:
 17034                           
 17035                           ;Test.c: 594: readADC(2);
 17036  003E60  0E02               	movlw	2
 17037  003E62  ECFB  F02C         	call	_readADC
 17038                           
 17039                           ;Test.c: 595: res = ADRESH<<8 | ADRESL;
 17040  003E66  50C3               	movf	4035,w,c	;volatile
 17041  003E68  CFC4 F0AB          	movff	4036,??_BlockerTest	;volatile
 17042  003E6C  0100               	movlb	0	; () banked
 17043  003E6E  6BAC               	clrf	(??_BlockerTest+1)& (0+255),b
 17044  003E70  C0AB  F0AC         	movff	??_BlockerTest,??_BlockerTest+1
 17045  003E74  0100               	movlb	0	; () banked
 17046  003E76  6BAB               	clrf	??_BlockerTest& (0+255),b
 17047  003E78  0100               	movlb	0	; () banked
 17048  003E7A  11AB               	iorwf	??_BlockerTest& (0+255),w,b
 17049  003E7C  0100               	movlb	0	; () banked
 17050  003E7E  6FAF               	movwf	BlockerTest@res& (0+255),b
 17051  003E80  0100               	movlb	0	; () banked
 17052  003E82  51AC               	movf	(??_BlockerTest+1)& (0+255),w,b
 17053  003E84  0100               	movlb	0	; () banked
 17054  003E86  6FB0               	movwf	(BlockerTest@res+1)& (0+255),b
 17055                           
 17056                           ; BSR set to: 0
 17057                           ;Test.c: 596: lcdInst(0b10000000);;
 17058  003E88  0E80               	movlw	128
 17059  003E8A  EC10  F02E         	call	_lcdInst
 17060                           
 17061                           ;Test.c: 597: printf("D:RET|2:C %d  ", res);
 17062  003E8E  0E6E               	movlw	low STR_123
 17063  003E90  0100               	movlb	0	; () banked
 17064  003E92  6F8E               	movwf	printf@f& (0+255),b
 17065  003E94  0EFE               	movlw	high STR_123
 17066  003E96  0100               	movlb	0	; () banked
 17067  003E98  6F8F               	movwf	(printf@f+1)& (0+255),b
 17068  003E9A  C0AF  F090         	movff	BlockerTest@res,?_printf+2
 17069  003E9E  C0B0  F091         	movff	BlockerTest@res+1,?_printf+3
 17070  003EA2  EC16  F00E         	call	_printf	;wreg free
 17071  003EA6                     l9126:
 17072  003EA6  A281               	btfss	3969,1,c	;volatile
 17073  003EA8  D7DB               	goto	l9118
 17074                           
 17075                           ;Test.c: 598: }
 17076                           ;Test.c: 599: if(PORTB >> 4 == 0b1111){
 17077  003EAA  3881               	swapf	3969,w,c	;volatile
 17078  003EAC  0B0F               	andlw	15
 17079  003EAE  0A0F               	xorlw	15
 17080  003EB0  B4D8               	btfsc	status,2,c
 17081  003EB2  0012               	return	
 17082                           
 17083                           ;Test.c: 602: else if(PORTB >> 4 == 0b0001){
 17084                           
 17085                           ;Test.c: 601: }
 17086                           
 17087                           ;Test.c: 600: break;
 17088  003EB4  3881               	swapf	3969,w,c	;volatile
 17089  003EB6  0B0F               	andlw	15
 17090  003EB8  06E8               	decf	wreg,f,c
 17091  003EBA  A4D8               	btfss	status,2,c
 17092  003EBC  D016               	goto	l9144
 17093                           
 17094                           ;Test.c: 603: if(cond_flag){
 17095  003EBE  0100               	movlb	0	; () banked
 17096  003EC0  51B3               	movf	BlockerTest@cond_flag& (0+255),w,b
 17097  003EC2  0100               	movlb	0	; () banked
 17098  003EC4  11B4               	iorwf	(BlockerTest@cond_flag+1)& (0+255),w,b
 17099  003EC6  B4D8               	btfsc	status,2,c
 17100  003EC8  D007               	goto	l1443
 17101                           
 17102                           ; BSR set to: 0
 17103                           ;Test.c: 604: LATAbits.LATA3 = 1;
 17104  003ECA  8689               	bsf	3977,3,c	;volatile
 17105  003ECC  D006               	goto	l9142
 17106  003ECE                     u8271:
 17107  003ECE  0E01               	movlw	1
 17108  003ED0                     u8280:
 17109  003ED0  0100               	movlb	0	; () banked
 17110  003ED2  6FB3               	movwf	BlockerTest@cond_flag& (0+255),b
 17111  003ED4  6BB4               	clrf	(BlockerTest@cond_flag+1)& (0+255),b
 17112                           
 17113                           ;Test.c: 606: }
 17114  003ED6  D05F               	goto	l9172
 17115  003ED8                     l1443:
 17116                           
 17117                           ; BSR set to: 0
 17118                           ;Test.c: 607: else{
 17119                           ;Test.c: 608: LATAbits.LATA3 = 0;
 17120  003ED8  9689               	bcf	3977,3,c	;volatile
 17121  003EDA                     l9142:
 17122                           
 17123                           ; BSR set to: 0
 17124                           ;Test.c: 609: cond_flag = !cond_flag;
 17125  003EDA  0100               	movlb	0	; () banked
 17126  003EDC  51B3               	movf	BlockerTest@cond_flag& (0+255),w,b
 17127  003EDE  0100               	movlb	0	; () banked
 17128  003EE0  11B4               	iorwf	(BlockerTest@cond_flag+1)& (0+255),w,b
 17129  003EE2  B4D8               	btfsc	status,2,c
 17130  003EE4  D7F4               	goto	u8271
 17131  003EE6  0E00               	movlw	0
 17132  003EE8  D7F3               	goto	u8280
 17133  003EEA                     l9144:
 17134                           
 17135                           ;Test.c: 612: else{
 17136                           ;Test.c: 613: if(cam_flag){
 17137  003EEA  0100               	movlb	0	; () banked
 17138  003EEC  51B1               	movf	BlockerTest@cam_flag& (0+255),w,b
 17139  003EEE  0100               	movlb	0	; () banked
 17140  003EF0  11B2               	iorwf	(BlockerTest@cam_flag+1)& (0+255),w,b
 17141  003EF2  B4D8               	btfsc	status,2,c
 17142  003EF4  D007               	goto	l9150
 17143                           
 17144                           ; BSR set to: 0
 17145                           ;Test.c: 614: LATCbits.LATC0 = 1;
 17146  003EF6  808B               	bsf	3979,0,c	;volatile
 17147  003EF8  D023               	goto	l9162
 17148  003EFA                     u8321:
 17149  003EFA  0E01               	movlw	1
 17150  003EFC                     u8330:
 17151  003EFC  0100               	movlb	0	; () banked
 17152  003EFE  6FB1               	movwf	BlockerTest@cam_flag& (0+255),b
 17153  003F00  6BB2               	clrf	(BlockerTest@cam_flag+1)& (0+255),b
 17154                           
 17155                           ;Test.c: 616: }
 17156  003F02  D049               	goto	l9172
 17157  003F04                     l9150:
 17158                           
 17159                           ; BSR set to: 0
 17160                           ;Test.c: 617: else{
 17161                           ;Test.c: 618: for(int i=0;i<5000;i++)
 17162  003F04  0E00               	movlw	0
 17163  003F06  0100               	movlb	0	; () banked
 17164  003F08  6FAE               	movwf	(BlockerTest@i+1)& (0+255),b
 17165  003F0A  0E00               	movlw	0
 17166  003F0C  6FAD               	movwf	BlockerTest@i& (0+255),b
 17167  003F0E                     l9152:
 17168                           
 17169                           ; BSR set to: 0
 17170  003F0E  0100               	movlb	0	; () banked
 17171  003F10  BFAE               	btfsc	(BlockerTest@i+1)& (0+255),7,b
 17172  003F12  D008               	goto	l1448
 17173  003F14  0E88               	movlw	136
 17174  003F16  0100               	movlb	0	; () banked
 17175  003F18  5DAD               	subwf	BlockerTest@i& (0+255),w,b
 17176  003F1A  0E13               	movlw	19
 17177  003F1C  0100               	movlb	0	; () banked
 17178  003F1E  59AE               	subwfb	(BlockerTest@i+1)& (0+255),w,b
 17179  003F20  B0D8               	btfsc	status,0,c
 17180  003F22  D00D               	goto	l1449
 17181  003F24                     l1448:
 17182                           
 17183                           ; BSR set to: 0
 17184                           ;Test.c: 619: {
 17185                           ;Test.c: 620: LATCbits.LATC0 = 1;
 17186  003F24  808B               	bsf	3979,0,c	;volatile
 17187                           
 17188                           ; BSR set to: 0
 17189                           ;Test.c: 621: _delay((unsigned long)((10)*(32000000/4000000.0)));
 17190  003F26  0E1A               	movlw	26
 17191  003F28                     u11337:
 17192  003F28  2EE8               	decfsz	wreg,f,c
 17193  003F2A  D7FE               	bra	u11337
 17194  003F2C  D000               	nop2	
 17195                           
 17196                           ;Test.c: 622: LATCbits.LATC0 = 0;
 17197  003F2E  908B               	bcf	3979,0,c	;volatile
 17198                           
 17199                           ;Test.c: 623: _delay((unsigned long)((90)*(32000000/4000000.0)));
 17200  003F30  0EF0               	movlw	240
 17201  003F32                     u11347:
 17202  003F32  2EE8               	decfsz	wreg,f,c
 17203  003F34  D7FE               	bra	u11347
 17204  003F36  0100               	movlb	0	; () banked
 17205  003F38  4BAD               	infsnz	BlockerTest@i& (0+255),f,b
 17206  003F3A  2BAE               	incf	(BlockerTest@i+1)& (0+255),f,b
 17207  003F3C  D7E8               	goto	l9152
 17208  003F3E                     l1449:
 17209                           
 17210                           ; BSR set to: 0
 17211                           ;Test.c: 624: }
 17212                           ;Test.c: 625: LATCbits.LATC0 = 0;
 17213  003F3E  908B               	bcf	3979,0,c	;volatile
 17214  003F40                     l9162:
 17215                           
 17216                           ; BSR set to: 0
 17217                           ;Test.c: 626: cam_flag = !cam_flag;
 17218  003F40  0100               	movlb	0	; () banked
 17219  003F42  51B1               	movf	BlockerTest@cam_flag& (0+255),w,b
 17220  003F44  0100               	movlb	0	; () banked
 17221  003F46  11B2               	iorwf	(BlockerTest@cam_flag+1)& (0+255),w,b
 17222  003F48  B4D8               	btfsc	status,2,c
 17223  003F4A  D7D7               	goto	u8321
 17224  003F4C  0E00               	movlw	0
 17225  003F4E  D7D6               	goto	u8330
 17226  003F50                     l9164:
 17227                           
 17228                           ;Test.c: 631: readADC(2);
 17229  003F50  0E02               	movlw	2
 17230  003F52  ECFB  F02C         	call	_readADC
 17231                           
 17232                           ;Test.c: 632: res = ADRESH<<8 | ADRESL;
 17233  003F56  50C3               	movf	4035,w,c	;volatile
 17234  003F58  CFC4 F0AB          	movff	4036,??_BlockerTest	;volatile
 17235  003F5C  0100               	movlb	0	; () banked
 17236  003F5E  6BAC               	clrf	(??_BlockerTest+1)& (0+255),b
 17237  003F60  C0AB  F0AC         	movff	??_BlockerTest,??_BlockerTest+1
 17238  003F64  0100               	movlb	0	; () banked
 17239  003F66  6BAB               	clrf	??_BlockerTest& (0+255),b
 17240  003F68  0100               	movlb	0	; () banked
 17241  003F6A  11AB               	iorwf	??_BlockerTest& (0+255),w,b
 17242  003F6C  0100               	movlb	0	; () banked
 17243  003F6E  6FAF               	movwf	BlockerTest@res& (0+255),b
 17244  003F70  0100               	movlb	0	; () banked
 17245  003F72  51AC               	movf	(??_BlockerTest+1)& (0+255),w,b
 17246  003F74  0100               	movlb	0	; () banked
 17247  003F76  6FB0               	movwf	(BlockerTest@res+1)& (0+255),b
 17248                           
 17249                           ; BSR set to: 0
 17250                           ;Test.c: 633: lcdInst(0b10000000);;
 17251  003F78  0E80               	movlw	128
 17252  003F7A  EC10  F02E         	call	_lcdInst
 17253                           
 17254                           ;Test.c: 634: printf("D:RET|2:C %d  ", res);
 17255  003F7E  0E6E               	movlw	low STR_123
 17256  003F80  0100               	movlb	0	; () banked
 17257  003F82  6F8E               	movwf	printf@f& (0+255),b
 17258  003F84  0EFE               	movlw	high STR_123
 17259  003F86  0100               	movlb	0	; () banked
 17260  003F88  6F8F               	movwf	(printf@f+1)& (0+255),b
 17261  003F8A  C0AF  F090         	movff	BlockerTest@res,?_printf+2
 17262  003F8E  C0B0  F091         	movff	BlockerTest@res+1,?_printf+3
 17263  003F92  EC16  F00E         	call	_printf	;wreg free
 17264  003F96                     l9172:
 17265  003F96  A281               	btfss	3969,1,c	;volatile
 17266  003F98  D786               	goto	l9126
 17267  003F9A  D7DA               	goto	l9164
 17268  003F9C                     __end_of_BlockerTest:
 17269                           	opt stack 0
 17270                           tblptru	equ	0xFF8
 17271                           tblptrh	equ	0xFF7
 17272                           tblptrl	equ	0xFF6
 17273                           tablat	equ	0xFF5
 17274                           prodh	equ	0xFF4
 17275                           prodl	equ	0xFF3
 17276                           intcon	equ	0xFF2
 17277                           intcon2	equ	0xFF1
 17278                           intcon3	equ	0xFF0
 17279                           postinc0	equ	0xFEE
 17280                           wreg	equ	0xFE8
 17281                           postdec1	equ	0xFE5
 17282                           fsr1l	equ	0xFE1
 17283                           indf2	equ	0xFDF
 17284                           postinc2	equ	0xFDE
 17285                           postdec2	equ	0xFDD
 17286                           fsr2h	equ	0xFDA
 17287                           fsr2l	equ	0xFD9
 17288                           status	equ	0xFD8
 17289                           
 17290 ;; *************** function _readADC *****************
 17291 ;; Defined at:
 17292 ;;		line 15 in file "ADCFunctionality.c"
 17293 ;; Parameters:    Size  Location     Type
 17294 ;;  channel         1    wreg     unsigned char 
 17295 ;; Auto vars:     Size  Location     Type
 17296 ;;  channel         1    1[BANK0 ] unsigned char 
 17297 ;; Return value:  Size  Location     Type
 17298 ;;                  1    wreg      void 
 17299 ;; Registers used:
 17300 ;;		wreg, status,2, status,0, cstack
 17301 ;; Tracked objects:
 17302 ;;		On entry : 0/0
 17303 ;;		On exit  : 0/0
 17304 ;;		Unchanged: 0/0
 17305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17306 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17307 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17308 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17309 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17310 ;;Total ram usage:        2 bytes
 17311 ;; Hardware stack levels used:    1
 17312 ;; Hardware stack levels required when called:    7
 17313 ;; This function calls:
 17314 ;;		Nothing
 17315 ;; This function is called by:
 17316 ;;		_readIR
 17317 ;;		_readMAG
 17318 ;;		_readCOND
 17319 ;;		_sensorTest
 17320 ;;		_PlatformTest
 17321 ;;		_BlockerTest
 17322 ;; This function uses a non-reentrant model
 17323 ;;
 17324                           
 17325                           	psect	text55
 17326  0059F6                     __ptext55:
 17327                           	opt stack 0
 17328  0059F6                     _readADC:
 17329                           	opt stack 20
 17330                           
 17331                           ;incstack = 0
 17332                           ;readADC@channel stored from wreg
 17333  0059F6  0100               	movlb	0	; () banked
 17334  0059F8  6F81               	movwf	readADC@channel& (0+255),b
 17335                           
 17336                           ;ADCFunctionality.c: 17: ADCON0 = channel << 2;
 17337  0059FA  0100               	movlb	0	; () banked
 17338  0059FC  4581               	rlncf	readADC@channel& (0+255),w,b
 17339  0059FE  46E8               	rlncf	wreg,f,c
 17340  005A00  0BFC               	andlw	252
 17341  005A02  6EC2               	movwf	4034,c	;volatile
 17342                           
 17343                           ; BSR set to: 0
 17344                           ;ADCFunctionality.c: 18: ADCON0bits.ADON = 1;
 17345  005A04  80C2               	bsf	4034,0,c	;volatile
 17346                           
 17347                           ; BSR set to: 0
 17348                           ;ADCFunctionality.c: 19: ADCON0bits.GO = 1;
 17349  005A06  82C2               	bsf	4034,1,c	;volatile
 17350                           
 17351                           ;ADCFunctionality.c: 20: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(32000
      +                          000/4000.0)));}
 17352  005A08  D009               	goto	l6514
 17353  005A0A                     l6512:
 17354  005A0A  0E34               	movlw	52
 17355  005A0C  0100               	movlb	0	; () banked
 17356  005A0E  6F80               	movwf	??_readADC& (0+255),b
 17357  005A10  0EF1               	movlw	241
 17358  005A12                     u11357:
 17359  005A12  2EE8               	decfsz	wreg,f,c
 17360  005A14  D7FE               	bra	u11357
 17361  005A16  2F80               	decfsz	??_readADC& (0+255),f,b
 17362  005A18  D7FC               	bra	u11357
 17363  005A1A  D000               	nop2	
 17364  005A1C                     l6514:
 17365  005A1C  A2C2               	btfss	4034,1,c	;volatile
 17366  005A1E  0012               	return	
 17367  005A20  D7F4               	goto	l6512
 17368  005A22                     __end_of_readADC:
 17369                           	opt stack 0
 17370                           tblptru	equ	0xFF8
 17371                           tblptrh	equ	0xFF7
 17372                           tblptrl	equ	0xFF6
 17373                           tablat	equ	0xFF5
 17374                           prodh	equ	0xFF4
 17375                           prodl	equ	0xFF3
 17376                           intcon	equ	0xFF2
 17377                           intcon2	equ	0xFF1
 17378                           intcon3	equ	0xFF0
 17379                           postinc0	equ	0xFEE
 17380                           wreg	equ	0xFE8
 17381                           postdec1	equ	0xFE5
 17382                           fsr1l	equ	0xFE1
 17383                           indf2	equ	0xFDF
 17384                           postinc2	equ	0xFDE
 17385                           postdec2	equ	0xFDD
 17386                           fsr2h	equ	0xFDA
 17387                           fsr2l	equ	0xFD9
 17388                           status	equ	0xFD8
 17389                           
 17390 ;; *************** function _printf *****************
 17391 ;; Defined at:
 17392 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 17393 ;; Parameters:    Size  Location     Type
 17394 ;;  f               2   14[BANK0 ] PTR const unsigned char 
 17395 ;;		 -> STR_130(18), STR_129(18), STR_128(17), STR_127(17), 
 17396 ;;		 -> STR_126(15), STR_125(15), STR_124(18), STR_123(15), 
 17397 ;;		 -> STR_122(18), STR_121(18), STR_120(17), STR_119(17), 
 17398 ;;		 -> STR_118(17), STR_117(17), STR_116(17), STR_115(17), 
 17399 ;;		 -> STR_114(17), STR_113(17), STR_112(18), STR_111(17), 
 17400 ;;		 -> STR_110(15), STR_109(15), STR_108(15), STR_107(17), 
 17401 ;;		 -> STR_106(17), STR_105(17), STR_104(16), STR_103(17), 
 17402 ;;		 -> STR_102(17), STR_101(17), STR_100(17), STR_99(17), 
 17403 ;;		 -> STR_98(17), STR_97(15), STR_96(11), STR_95(17), 
 17404 ;;		 -> STR_94(11), STR_93(17), STR_92(14), STR_91(15), 
 17405 ;;		 -> STR_90(14), STR_89(10), STR_88(9), STR_87(9), 
 17406 ;;		 -> STR_86(10), STR_85(10), STR_84(16), STR_83(15), 
 17407 ;;		 -> STR_82(3), STR_81(15), STR_80(13), STR_79(14), 
 17408 ;;		 -> STR_78(8), STR_77(14), STR_76(15), STR_75(12), 
 17409 ;;		 -> STR_74(14), STR_73(17), STR_72(14), STR_71(15), 
 17410 ;;		 -> STR_70(17), STR_69(17), STR_68(7), STR_67(21), 
 17411 ;;		 -> STR_66(17), STR_65(17), STR_64(22), STR_63(24), 
 17412 ;;		 -> STR_50(17), STR_49(17), STR_48(17), STR_47(17), 
 17413 ;;		 -> STR_46(17), STR_45(17), STR_44(17), STR_43(17), 
 17414 ;;		 -> STR_42(17), STR_41(17), STR_40(17), STR_39(17), 
 17415 ;;		 -> STR_38(17), STR_37(17), STR_36(17), STR_35(17), 
 17416 ;;		 -> STR_34(17), STR_33(17), STR_32(17), STR_31(17), 
 17417 ;;		 -> STR_30(17), STR_29(3), STR_28(17), STR_27(17), 
 17418 ;;		 -> STR_26(17), STR_25(17), STR_24(17), STR_23(14), 
 17419 ;;		 -> STR_22(10), STR_21(24), STR_7(7), STR_6(17), 
 17420 ;;		 -> STR_5(18), STR_4(16), STR_3(18), STR_2(14), 
 17421 ;;		 -> STR_1(18), 
 17422 ;; Auto vars:     Size  Location     Type
 17423 ;;  tmpval          4    0        struct .
 17424 ;;  width           2   41[BANK0 ] int 
 17425 ;;  val             2   37[BANK0 ] unsigned int 
 17426 ;;  len             2   35[BANK0 ] unsigned int 
 17427 ;;  ap              2   33[BANK0 ] PTR void [1]
 17428 ;;		 -> ?i2_printf(2), ?_printf(2), 
 17429 ;;  cp              2   31[BANK0 ] PTR const unsigned char 
 17430 ;;		 -> STR_131(7), ID@res3(2), ID@res2(2), ID@res1(2), 
 17431 ;;		 -> count_total(2), printRTC@month(4), UI@month(4), 
 17432 ;;  c               1   40[BANK0 ] char 
 17433 ;;  flag            1   39[BANK0 ] unsigned char 
 17434 ;;  prec            1   30[BANK0 ] char 
 17435 ;; Return value:  Size  Location     Type
 17436 ;;                  2   14[BANK0 ] int 
 17437 ;; Registers used:
 17438 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17439 ;; Tracked objects:
 17440 ;;		On entry : 0/0
 17441 ;;		On exit  : 0/0
 17442 ;;		Unchanged: 0/0
 17443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17444 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17445 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17446 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17447 ;;      Totals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17448 ;;Total ram usage:       29 bytes
 17449 ;; Hardware stack levels used:    1
 17450 ;; Hardware stack levels required when called:    9
 17451 ;; This function calls:
 17452 ;;		___lwdiv
 17453 ;;		___lwmod
 17454 ;;		___wmul
 17455 ;;		_isdigit
 17456 ;;		_putch
 17457 ;; This function is called by:
 17458 ;;		_UI
 17459 ;;		_change_state_to_menu_start
 17460 ;;		_change_state_to_menu_12
 17461 ;;		_change_state_to_menu_22
 17462 ;;		_printRTC
 17463 ;;		_ID
 17464 ;;		_EEPROM_write
 17465 ;;		_Test
 17466 ;;		_algorithmTest
 17467 ;;		_sensorTest
 17468 ;;		_actuatorTest
 17469 ;;		_BothServos
 17470 ;;		_PortTestDC
 17471 ;;		_PlatformTest
 17472 ;;		_SpeedTest
 17473 ;;		_BlockerTest
 17474 ;;		_arm
 17475 ;;		_PortTestPusher
 17476 ;;		_ToggleTestA5
 17477 ;; This function uses a non-reentrant model
 17478 ;;
 17479                           
 17480                           	psect	text56
 17481  001C2C                     __ptext56:
 17482                           	opt stack 0
 17483  001C2C                     _printf:
 17484                           	opt stack 18
 17485                           
 17486                           ;doprnt.c: 466: va_list ap;
 17487                           ;doprnt.c: 499: signed char c;
 17488                           ;doprnt.c: 501: int width;
 17489                           ;doprnt.c: 506: signed char prec;
 17490                           ;doprnt.c: 508: unsigned char flag;
 17491                           ;doprnt.c: 523: union {
 17492                           ;doprnt.c: 524: unsigned long vd;
 17493                           ;doprnt.c: 525: double integ;
 17494                           ;doprnt.c: 526: } tmpval;
 17495                           ;doprnt.c: 528: unsigned int val;
 17496                           ;doprnt.c: 529: unsigned len;
 17497                           ;doprnt.c: 530: const char * cp;
 17498                           ;doprnt.c: 533: *ap = __va_start();
 17499                           
 17500                           ;incstack = 0
 17501  001C2C  0E90               	movlw	low (?_printf+2)
 17502  001C2E  0100               	movlb	0	; () banked
 17503  001C30  6FA1               	movwf	printf@ap& (0+255),b
 17504  001C32  0E00               	movlw	high (?_printf+2)
 17505  001C34  0100               	movlb	0	; () banked
 17506  001C36  6FA2               	movwf	(printf@ap+1)& (0+255),b
 17507                           
 17508                           ;doprnt.c: 536: while(c = *f++) {
 17509  001C38  D205               	goto	l6836
 17510  001C3A                     l6706:
 17511                           
 17512                           ; BSR set to: 0
 17513                           ;doprnt.c: 538: if(c != '%')
 17514  001C3A  0E25               	movlw	37
 17515  001C3C  0100               	movlb	0	; () banked
 17516  001C3E  19A8               	xorwf	printf@c& (0+255),w,b
 17517  001C40  B4D8               	btfsc	status,2,c
 17518  001C42  D005               	goto	l6710
 17519                           
 17520                           ; BSR set to: 0
 17521                           ;doprnt.c: 540: {
 17522                           ;doprnt.c: 541: (putch(c) );
 17523  001C44  0100               	movlb	0	; () banked
 17524  001C46  51A8               	movf	printf@c& (0+255),w,b
 17525  001C48  EC08  F02E         	call	_putch
 17526                           
 17527                           ;doprnt.c: 542: continue;
 17528  001C4C  D1FB               	goto	l6836
 17529  001C4E                     l6710:
 17530                           
 17531                           ;doprnt.c: 543: }
 17532                           ;doprnt.c: 546: width = 0;
 17533  001C4E  0E00               	movlw	0
 17534  001C50  0100               	movlb	0	; () banked
 17535  001C52  6FAA               	movwf	(printf@width+1)& (0+255),b
 17536  001C54  0E00               	movlw	0
 17537  001C56  6FA9               	movwf	printf@width& (0+255),b
 17538                           
 17539                           ;doprnt.c: 548: flag = 0;
 17540  001C58  0E00               	movlw	0
 17541  001C5A  0100               	movlb	0	; () banked
 17542  001C5C  6FA7               	movwf	printf@flag& (0+255),b
 17543                           
 17544                           ; BSR set to: 0
 17545                           ;doprnt.c: 551: switch(*f) {
 17546                           
 17547                           ;doprnt.c: 550: for(;;) {
 17548  001C5E  D005               	goto	l6716
 17549  001C60                     l6712:
 17550                           
 17551                           ;doprnt.c: 580: flag |= 0x04;
 17552  001C60  0100               	movlb	0	; () banked
 17553  001C62  85A7               	bsf	printf@flag& (0+255),2,b
 17554                           
 17555                           ;doprnt.c: 581: f++;
 17556  001C64  0100               	movlb	0	; () banked
 17557  001C66  4B8E               	infsnz	printf@f& (0+255),f,b
 17558  001C68  2B8F               	incf	(printf@f+1)& (0+255),f,b
 17559  001C6A                     l6716:
 17560  001C6A  C08E  FFF6         	movff	printf@f,tblptrl
 17561  001C6E  C08F  FFF7         	movff	printf@f+1,tblptrh
 17562  001C72                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17563  001C72  6AF8               	clrf	tblptru,c
 17564  001C74                     	endif
 17565  001C74                     	if	0	;tblptru may be non-zero
 17566  001C74                     	endif
 17567  001C74  0008               	tblrd		*
 17568  001C76  50F5               	movf	tablat,w,c
 17569                           
 17570                           ; Switch size 1, requested type "space"
 17571                           ; Number of cases is 1, Range of values is 48 to 48
 17572                           ; switch strategies available:
 17573                           ; Name         Instructions Cycles
 17574                           ; simple_byte            4     3 (average)
 17575                           ;	Chosen strategy is simple_byte
 17576  001C78  0A30               	xorlw	48	; case 48
 17577  001C7A  B4D8               	btfsc	status,2,c
 17578  001C7C  D7F1               	goto	l6712
 17579                           
 17580                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 17581                           
 17582                           ;doprnt.c: 586: }
 17583                           
 17584                           ;doprnt.c: 585: break;
 17585  001C7E  C08E  FFF6         	movff	printf@f,tblptrl
 17586  001C82  C08F  FFF7         	movff	printf@f+1,tblptrh
 17587  001C86                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17588  001C86  6AF8               	clrf	tblptru,c
 17589  001C88                     	endif
 17590  001C88                     	if	0	;tblptru may be non-zero
 17591  001C88                     	endif
 17592  001C88  0008               	tblrd		*
 17593  001C8A  50F5               	movf	tablat,w,c
 17594  001C8C  EC11  F02D         	call	_isdigit
 17595  001C90  A0D8               	btfss	status,0,c
 17596  001C92  D0D2               	goto	l6764
 17597                           
 17598                           ;doprnt.c: 598: width = 0;
 17599  001C94  0E00               	movlw	0
 17600  001C96  0100               	movlb	0	; () banked
 17601  001C98  6FAA               	movwf	(printf@width+1)& (0+255),b
 17602  001C9A  0E00               	movlw	0
 17603  001C9C  6FA9               	movwf	printf@width& (0+255),b
 17604  001C9E                     l6722:
 17605                           
 17606                           ;doprnt.c: 600: width *= 10;
 17607  001C9E  C0A9  F080         	movff	printf@width,___wmul@multiplier
 17608  001CA2  C0AA  F081         	movff	printf@width+1,___wmul@multiplier+1
 17609  001CA6  0E00               	movlw	0
 17610  001CA8  0100               	movlb	0	; () banked
 17611  001CAA  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
 17612  001CAC  0E0A               	movlw	10
 17613  001CAE  6F82               	movwf	___wmul@multiplicand& (0+255),b
 17614  001CB0  EC7A  F02B         	call	___wmul	;wreg free
 17615  001CB4  C080  F0A9         	movff	?___wmul,printf@width
 17616  001CB8  C081  F0AA         	movff	?___wmul+1,printf@width+1
 17617                           
 17618                           ;doprnt.c: 601: width += *f++ - '0';
 17619  001CBC  0ED0               	movlw	208
 17620  001CBE  0100               	movlb	0	; () banked
 17621  001CC0  6F9A               	movwf	??_printf& (0+255),b
 17622  001CC2  0EFF               	movlw	255
 17623  001CC4  0100               	movlb	0	; () banked
 17624  001CC6  6F9B               	movwf	(??_printf+1)& (0+255),b
 17625  001CC8  C08E  FFF6         	movff	printf@f,tblptrl
 17626  001CCC  C08F  FFF7         	movff	printf@f+1,tblptrh
 17627  001CD0                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17628  001CD0  6AF8               	clrf	tblptru,c
 17629  001CD2                     	endif
 17630  001CD2                     	if	0	;tblptru may be non-zero
 17631  001CD2                     	endif
 17632  001CD2  0008               	tblrd		*
 17633  001CD4  50F5               	movf	tablat,w,c
 17634  001CD6  0100               	movlb	0	; () banked
 17635  001CD8  6F9C               	movwf	(??_printf+2)& (0+255),b
 17636  001CDA  6B9D               	clrf	(??_printf+3)& (0+255),b
 17637  001CDC  0100               	movlb	0	; () banked
 17638  001CDE  519A               	movf	??_printf& (0+255),w,b
 17639  001CE0  0100               	movlb	0	; () banked
 17640  001CE2  279C               	addwf	(??_printf+2)& (0+255),f,b
 17641  001CE4  0100               	movlb	0	; () banked
 17642  001CE6  519B               	movf	(??_printf+1)& (0+255),w,b
 17643  001CE8  0100               	movlb	0	; () banked
 17644  001CEA  239D               	addwfc	(??_printf+3)& (0+255),f,b
 17645  001CEC  0100               	movlb	0	; () banked
 17646  001CEE  519C               	movf	(??_printf+2)& (0+255),w,b
 17647  001CF0  0100               	movlb	0	; () banked
 17648  001CF2  27A9               	addwf	printf@width& (0+255),f,b
 17649  001CF4  0100               	movlb	0	; () banked
 17650  001CF6  519D               	movf	(??_printf+3)& (0+255),w,b
 17651  001CF8  0100               	movlb	0	; () banked
 17652  001CFA  23AA               	addwfc	(printf@width+1)& (0+255),f,b
 17653                           
 17654                           ; BSR set to: 0
 17655  001CFC  0100               	movlb	0	; () banked
 17656  001CFE  4B8E               	infsnz	printf@f& (0+255),f,b
 17657  001D00  2B8F               	incf	(printf@f+1)& (0+255),f,b
 17658                           
 17659                           ; BSR set to: 0
 17660                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 17661  001D02  C08E  FFF6         	movff	printf@f,tblptrl
 17662  001D06  C08F  FFF7         	movff	printf@f+1,tblptrh
 17663  001D0A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17664  001D0A  6AF8               	clrf	tblptru,c
 17665  001D0C                     	endif
 17666  001D0C                     	if	0	;tblptru may be non-zero
 17667  001D0C                     	endif
 17668  001D0C  0008               	tblrd		*
 17669  001D0E  50F5               	movf	tablat,w,c
 17670  001D10  EC11  F02D         	call	_isdigit
 17671  001D14  A0D8               	btfss	status,0,c
 17672  001D16  D090               	goto	l6764
 17673  001D18  D7C2               	goto	l6722
 17674  001D1A                     l6730:
 17675                           
 17676                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 17677  001D1A  C0A1  FFD9         	movff	printf@ap,fsr2l
 17678  001D1E  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 17679  001D22  CFDE F09F          	movff	postinc2,printf@cp
 17680  001D26  CFDD F0A0          	movff	postdec2,printf@cp+1
 17681  001D2A  0E02               	movlw	2
 17682  001D2C  0100               	movlb	0	; () banked
 17683  001D2E  27A1               	addwf	printf@ap& (0+255),f,b
 17684  001D30  0E00               	movlw	0
 17685  001D32  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 17686                           
 17687                           ; BSR set to: 0
 17688                           ;doprnt.c: 740: if(!cp)
 17689  001D34  0100               	movlb	0	; () banked
 17690  001D36  519F               	movf	printf@cp& (0+255),w,b
 17691  001D38  0100               	movlb	0	; () banked
 17692  001D3A  11A0               	iorwf	(printf@cp+1)& (0+255),w,b
 17693  001D3C  A4D8               	btfss	status,2,c
 17694  001D3E  D006               	goto	l6738
 17695                           
 17696                           ; BSR set to: 0
 17697                           ;doprnt.c: 741: cp = "(null)";
 17698  001D40  0EB6               	movlw	low STR_131
 17699  001D42  0100               	movlb	0	; () banked
 17700  001D44  6F9F               	movwf	printf@cp& (0+255),b
 17701  001D46  0EFF               	movlw	high STR_131
 17702  001D48  0100               	movlb	0	; () banked
 17703  001D4A  6FA0               	movwf	(printf@cp+1)& (0+255),b
 17704  001D4C                     l6738:
 17705                           
 17706                           ; BSR set to: 0
 17707                           ;doprnt.c: 745: len = 0;
 17708  001D4C  0E00               	movlw	0
 17709  001D4E  0100               	movlb	0	; () banked
 17710  001D50  6FA4               	movwf	(printf@len+1)& (0+255),b
 17711  001D52  0E00               	movlw	0
 17712  001D54  6FA3               	movwf	printf@len& (0+255),b
 17713                           
 17714                           ;doprnt.c: 746: while(cp[len])
 17715  001D56  D003               	goto	l6742
 17716  001D58                     l6740:
 17717                           
 17718                           ;doprnt.c: 747: len++;
 17719  001D58  0100               	movlb	0	; () banked
 17720  001D5A  4BA3               	infsnz	printf@len& (0+255),f,b
 17721  001D5C  2BA4               	incf	(printf@len+1)& (0+255),f,b
 17722  001D5E                     l6742:
 17723                           
 17724                           ; BSR set to: 0
 17725  001D5E  0100               	movlb	0	; () banked
 17726  001D60  51A3               	movf	printf@len& (0+255),w,b
 17727  001D62  0100               	movlb	0	; () banked
 17728  001D64  259F               	addwf	printf@cp& (0+255),w,b
 17729  001D66  0100               	movlb	0	; () banked
 17730  001D68  6F9A               	movwf	??_printf& (0+255),b
 17731  001D6A  0100               	movlb	0	; () banked
 17732  001D6C  51A4               	movf	(printf@len+1)& (0+255),w,b
 17733  001D6E  0100               	movlb	0	; () banked
 17734  001D70  21A0               	addwfc	(printf@cp+1)& (0+255),w,b
 17735  001D72  0100               	movlb	0	; () banked
 17736  001D74  6F9B               	movwf	(??_printf+1)& (0+255),b
 17737  001D76  C09A  FFF6         	movff	??_printf,tblptrl
 17738  001D7A  C09B  FFF7         	movff	??_printf+1,tblptrh
 17739  001D7E  0E00               	movlw	low (__mediumconst shr (0+16))
 17740  001D80  6EF8               	movwf	tblptru,c
 17741  001D82  0E0F               	movlw	(high __ramtop+-1)
 17742  001D84  64F7               	cpfsgt	tblptrh,c
 17743  001D86  D003               	bra	u5247
 17744  001D88  0008               	tblrd		*
 17745  001D8A  50F5               	movf	tablat,w,c
 17746  001D8C  D005               	bra	u5240
 17747  001D8E                     u5247:
 17748  001D8E  CFF6 FFE9          	movff	tblptrl,fsr0l
 17749  001D92  CFF7 FFEA          	movff	tblptrh,fsr0h
 17750  001D96  50EF               	movf	indf0,w,c
 17751  001D98                     u5240:
 17752  001D98  0900               	iorlw	0
 17753  001D9A  A4D8               	btfss	status,2,c
 17754  001D9C  D7DD               	goto	l6740
 17755                           
 17756                           ;doprnt.c: 757: if(width > len)
 17757  001D9E  0100               	movlb	0	; () banked
 17758  001DA0  51A9               	movf	printf@width& (0+255),w,b
 17759  001DA2  0100               	movlb	0	; () banked
 17760  001DA4  5DA3               	subwf	printf@len& (0+255),w,b
 17761  001DA6  0100               	movlb	0	; () banked
 17762  001DA8  51AA               	movf	(printf@width+1)& (0+255),w,b
 17763  001DAA  0100               	movlb	0	; () banked
 17764  001DAC  59A4               	subwfb	(printf@len+1)& (0+255),w,b
 17765  001DAE  B0D8               	btfsc	status,0,c
 17766  001DB0  D009               	goto	l6748
 17767                           
 17768                           ; BSR set to: 0
 17769                           ;doprnt.c: 758: width -= len;
 17770  001DB2  0100               	movlb	0	; () banked
 17771  001DB4  51A3               	movf	printf@len& (0+255),w,b
 17772  001DB6  0100               	movlb	0	; () banked
 17773  001DB8  5FA9               	subwf	printf@width& (0+255),f,b
 17774  001DBA  0100               	movlb	0	; () banked
 17775  001DBC  51A4               	movf	(printf@len+1)& (0+255),w,b
 17776  001DBE  0100               	movlb	0	; () banked
 17777  001DC0  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 17778  001DC2  D009               	goto	l6752
 17779  001DC4                     l6748:
 17780                           
 17781                           ; BSR set to: 0
 17782                           ;doprnt.c: 759: else
 17783                           ;doprnt.c: 760: width = 0;
 17784  001DC4  0E00               	movlw	0
 17785  001DC6  0100               	movlb	0	; () banked
 17786  001DC8  6FAA               	movwf	(printf@width+1)& (0+255),b
 17787  001DCA  0E00               	movlw	0
 17788  001DCC  6FA9               	movwf	printf@width& (0+255),b
 17789                           
 17790                           ; BSR set to: 0
 17791                           ;doprnt.c: 764: while(width--)
 17792  001DCE  D003               	goto	l6752
 17793  001DD0                     l6750:
 17794                           
 17795                           ; BSR set to: 0
 17796                           ;doprnt.c: 765: (putch(' ') );
 17797  001DD0  0E20               	movlw	32
 17798  001DD2  EC08  F02E         	call	_putch
 17799  001DD6                     l6752:
 17800  001DD6  0100               	movlb	0	; () banked
 17801  001DD8  07A9               	decf	printf@width& (0+255),f,b
 17802  001DDA  A0D8               	btfss	status,0,c
 17803  001DDC  07AA               	decf	(printf@width+1)& (0+255),f,b
 17804  001DDE  0100               	movlb	0	; () banked
 17805  001DE0  29A9               	incf	printf@width& (0+255),w,b
 17806  001DE2  E1F6               	bnz	l6750
 17807  001DE4  0100               	movlb	0	; () banked
 17808  001DE6  29AA               	incf	(printf@width+1)& (0+255),w,b
 17809  001DE8  B4D8               	btfsc	status,2,c
 17810  001DEA  D017               	goto	l6758
 17811  001DEC  D7F1               	goto	l6750
 17812  001DEE                     l6754:
 17813                           
 17814                           ; BSR set to: 0
 17815                           ;doprnt.c: 768: (putch(*cp++) );
 17816  001DEE  C09F  FFF6         	movff	printf@cp,tblptrl
 17817  001DF2  C0A0  FFF7         	movff	printf@cp+1,tblptrh
 17818  001DF6  0E00               	movlw	low (__mediumconst shr (0+16))
 17819  001DF8  6EF8               	movwf	tblptru,c
 17820  001DFA  0E0F               	movlw	(high __ramtop+-1)
 17821  001DFC  64F7               	cpfsgt	tblptrh,c
 17822  001DFE  D003               	bra	u5287
 17823  001E00  0008               	tblrd		*
 17824  001E02  50F5               	movf	tablat,w,c
 17825  001E04  D005               	bra	u5280
 17826  001E06                     u5287:
 17827  001E06  CFF6 FFE9          	movff	tblptrl,fsr0l
 17828  001E0A  CFF7 FFEA          	movff	tblptrh,fsr0h
 17829  001E0E  50EF               	movf	indf0,w,c
 17830  001E10                     u5280:
 17831  001E10  EC08  F02E         	call	_putch
 17832  001E14  0100               	movlb	0	; () banked
 17833  001E16  4B9F               	infsnz	printf@cp& (0+255),f,b
 17834  001E18  2BA0               	incf	(printf@cp+1)& (0+255),f,b
 17835  001E1A                     l6758:
 17836                           
 17837                           ; BSR set to: 0
 17838  001E1A  0100               	movlb	0	; () banked
 17839  001E1C  07A3               	decf	printf@len& (0+255),f,b
 17840  001E1E  A0D8               	btfss	status,0,c
 17841  001E20  07A4               	decf	(printf@len+1)& (0+255),f,b
 17842  001E22  0100               	movlb	0	; () banked
 17843  001E24  29A3               	incf	printf@len& (0+255),w,b
 17844  001E26  E1E3               	bnz	l6754
 17845  001E28  0100               	movlb	0	; () banked
 17846  001E2A  29A4               	incf	(printf@len+1)& (0+255),w,b
 17847  001E2C  B4D8               	btfsc	status,2,c
 17848  001E2E  D10A               	goto	l6836
 17849  001E30  D7DE               	goto	l6754
 17850  001E32                     l6760:
 17851                           
 17852                           ; BSR set to: 0
 17853                           ;doprnt.c: 818: flag |= 0x40;
 17854  001E32  0100               	movlb	0	; () banked
 17855  001E34  8DA7               	bsf	printf@flag& (0+255),6,b
 17856                           
 17857                           ; BSR set to: 0
 17858                           ;doprnt.c: 822: }
 17859                           
 17860                           ;doprnt.c: 819: break;
 17861  001E36  D01D               	goto	l1520
 17862  001E38                     l6764:
 17863  001E38  C08E  FFF6         	movff	printf@f,tblptrl
 17864  001E3C  C08F  FFF7         	movff	printf@f+1,tblptrh
 17865  001E40  0100               	movlb	0	; () banked
 17866  001E42  4B8E               	infsnz	printf@f& (0+255),f,b
 17867  001E44  2B8F               	incf	(printf@f+1)& (0+255),f,b
 17868  001E46                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17869  001E46  6AF8               	clrf	tblptru,c
 17870  001E48                     	endif
 17871  001E48                     	if	0	;tblptru may be non-zero
 17872  001E48                     	endif
 17873  001E48  0008               	tblrd		*
 17874  001E4A  CFF5 F0A8          	movff	tablat,printf@c
 17875  001E4E  0100               	movlb	0	; () banked
 17876  001E50  51A8               	movf	printf@c& (0+255),w,b
 17877                           
 17878                           ; Switch size 1, requested type "space"
 17879                           ; Number of cases is 5, Range of values is 0 to 117
 17880                           ; switch strategies available:
 17881                           ; Name         Instructions Cycles
 17882                           ; simple_byte           16     9 (average)
 17883                           ;	Chosen strategy is simple_byte
 17884  001E52  0A00               	xorlw	0	; case 0
 17885  001E54  B4D8               	btfsc	status,2,c
 17886  001E56  0012               	return	
 17887  001E58  0A64               	xorlw	100	; case 100
 17888  001E5A  B4D8               	btfsc	status,2,c
 17889  001E5C  D00A               	goto	l1520
 17890  001E5E  0A0D               	xorlw	13	; case 105
 17891  001E60  B4D8               	btfsc	status,2,c
 17892  001E62  D007               	goto	l1520
 17893  001E64  0A1A               	xorlw	26	; case 115
 17894  001E66  B4D8               	btfsc	status,2,c
 17895  001E68  D758               	goto	l6730
 17896  001E6A  0A06               	xorlw	6	; case 117
 17897  001E6C  B4D8               	btfsc	status,2,c
 17898  001E6E  D7E1               	goto	l6760
 17899  001E70  D0E9               	goto	l6836
 17900  001E72                     l1520:
 17901                           
 17902                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 17903  001E72  0100               	movlb	0	; () banked
 17904  001E74  BDA7               	btfsc	printf@flag& (0+255),6,b
 17905  001E76  D019               	goto	l6776
 17906                           
 17907                           ; BSR set to: 0
 17908                           ;doprnt.c: 1253: {
 17909                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 17910  001E78  C0A1  FFD9         	movff	printf@ap,fsr2l
 17911  001E7C  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 17912  001E80  CFDE F0A5          	movff	postinc2,printf@val
 17913  001E84  CFDD F0A6          	movff	postdec2,printf@val+1
 17914                           
 17915                           ; BSR set to: 0
 17916  001E88  0E02               	movlw	2
 17917  001E8A  0100               	movlb	0	; () banked
 17918  001E8C  27A1               	addwf	printf@ap& (0+255),f,b
 17919  001E8E  0E00               	movlw	0
 17920  001E90  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 17921                           
 17922                           ; BSR set to: 0
 17923                           ;doprnt.c: 1261: if((int)val < 0) {
 17924  001E92  0100               	movlb	0	; () banked
 17925  001E94  AFA6               	btfss	(printf@val+1)& (0+255),7,b
 17926  001E96  D016               	goto	l6780
 17927                           
 17928                           ; BSR set to: 0
 17929                           ;doprnt.c: 1262: flag |= 0x03;
 17930  001E98  0E03               	movlw	3
 17931  001E9A  0100               	movlb	0	; () banked
 17932  001E9C  13A7               	iorwf	printf@flag& (0+255),f,b
 17933                           
 17934                           ; BSR set to: 0
 17935                           ;doprnt.c: 1263: val = -val;
 17936  001E9E  0100               	movlb	0	; () banked
 17937  001EA0  6DA5               	negf	printf@val& (0+255),b
 17938  001EA2  1FA6               	comf	(printf@val+1)& (0+255),f,b
 17939  001EA4  B0D8               	btfsc	status,0,c
 17940  001EA6  2BA6               	incf	(printf@val+1)& (0+255),f,b
 17941                           
 17942                           ; BSR set to: 0
 17943                           ;doprnt.c: 1264: }
 17944                           ;doprnt.c: 1266: }
 17945  001EA8  D00D               	goto	l6780
 17946  001EAA                     l6776:
 17947                           
 17948                           ; BSR set to: 0
 17949                           ;doprnt.c: 1268: else
 17950                           ;doprnt.c: 1273: {
 17951                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 17952  001EAA  C0A1  FFD9         	movff	printf@ap,fsr2l
 17953  001EAE  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 17954  001EB2  CFDE F0A5          	movff	postinc2,printf@val
 17955  001EB6  CFDD F0A6          	movff	postdec2,printf@val+1
 17956                           
 17957                           ; BSR set to: 0
 17958  001EBA  0E02               	movlw	2
 17959  001EBC  0100               	movlb	0	; () banked
 17960  001EBE  27A1               	addwf	printf@ap& (0+255),f,b
 17961  001EC0  0E00               	movlw	0
 17962  001EC2  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 17963  001EC4                     l6780:
 17964                           
 17965                           ; BSR set to: 0
 17966                           ;doprnt.c: 1287: }
 17967                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 17968  001EC4  0E01               	movlw	1
 17969  001EC6  0100               	movlb	0	; () banked
 17970  001EC8  6FA8               	movwf	printf@c& (0+255),b
 17971  001ECA                     l6782:
 17972                           
 17973                           ; BSR set to: 0
 17974  001ECA  0E05               	movlw	5
 17975  001ECC  0100               	movlb	0	; () banked
 17976  001ECE  19A8               	xorwf	printf@c& (0+255),w,b
 17977  001ED0  B4D8               	btfsc	status,2,c
 17978  001ED2  D019               	goto	l6794
 17979                           
 17980                           ; BSR set to: 0
 17981                           ;doprnt.c: 1306: if(val < dpowers[c])
 17982                           
 17983                           ; BSR set to: 0
 17984                           
 17985                           ; BSR set to: 0
 17986  001ED4  0100               	movlb	0	; () banked
 17987  001ED6  51A8               	movf	printf@c& (0+255),w,b
 17988  001ED8  0D02               	mullw	2
 17989  001EDA  0E98               	movlw	low _dpowers
 17990  001EDC  24F3               	addwf	prodl,w,c
 17991  001EDE  6EF6               	movwf	tblptrl,c
 17992  001EE0  0EFA               	movlw	high _dpowers
 17993  001EE2  20F4               	addwfc	prodh,w,c
 17994  001EE4  6EF7               	movwf	tblptrh,c
 17995  001EE6                     	if	1	;There are 3 active tblptr bytes
 17996  001EE6  6AF8               	clrf	tblptru,c
 17997  001EE8  0E00               	movlw	low (__mediumconst shr (0+16))
 17998  001EEA  22F8               	addwfc	tblptru,f,c
 17999  001EEC                     	endif
 18000  001EEC  0009               	tblrd		*+
 18001  001EEE  50F5               	movf	tablat,w,c
 18002  001EF0  0100               	movlb	0	; () banked
 18003  001EF2  5DA5               	subwf	printf@val& (0+255),w,b
 18004  001EF4  0009               	tblrd		*+
 18005  001EF6  50F5               	movf	tablat,w,c
 18006  001EF8  0100               	movlb	0	; () banked
 18007  001EFA  59A6               	subwfb	(printf@val+1)& (0+255),w,b
 18008  001EFC  A0D8               	btfss	status,0,c
 18009  001EFE  D003               	goto	l6794
 18010                           
 18011                           ; BSR set to: 0
 18012                           
 18013                           ; BSR set to: 0
 18014                           
 18015                           ; BSR set to: 0
 18016                           ;doprnt.c: 1307: break;
 18017  001F00  0100               	movlb	0	; () banked
 18018  001F02  2BA8               	incf	printf@c& (0+255),f,b
 18019  001F04  D7E2               	goto	l6782
 18020  001F06                     l6794:
 18021                           
 18022                           ; BSR set to: 0
 18023                           ;doprnt.c: 1345: if(width && flag & 0x03)
 18024  001F06  0100               	movlb	0	; () banked
 18025  001F08  51A9               	movf	printf@width& (0+255),w,b
 18026  001F0A  0100               	movlb	0	; () banked
 18027  001F0C  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 18028  001F0E  B4D8               	btfsc	status,2,c
 18029  001F10  D00B               	goto	l6800
 18030                           
 18031                           ; BSR set to: 0
 18032  001F12  C0A7  F09A         	movff	printf@flag,??_printf
 18033  001F16  0E03               	movlw	3
 18034  001F18  0100               	movlb	0	; () banked
 18035  001F1A  179A               	andwf	??_printf& (0+255),f,b
 18036  001F1C  B4D8               	btfsc	status,2,c
 18037  001F1E  D004               	goto	l6800
 18038                           
 18039                           ; BSR set to: 0
 18040                           ;doprnt.c: 1346: width--;
 18041  001F20  0100               	movlb	0	; () banked
 18042  001F22  07A9               	decf	printf@width& (0+255),f,b
 18043  001F24  A0D8               	btfss	status,0,c
 18044  001F26  07AA               	decf	(printf@width+1)& (0+255),f,b
 18045  001F28                     l6800:
 18046                           
 18047                           ; BSR set to: 0
 18048                           ;doprnt.c: 1381: if(width > c)
 18049  001F28  0E80               	movlw	128
 18050  001F2A  0100               	movlb	0	; () banked
 18051  001F2C  BFA8               	btfsc	printf@c& (0+255),7,b
 18052  001F2E  0E7F               	movlw	127
 18053  001F30  0100               	movlb	0	; () banked
 18054  001F32  6F9A               	movwf	??_printf& (0+255),b
 18055  001F34  0100               	movlb	0	; () banked
 18056  001F36  51A9               	movf	printf@width& (0+255),w,b
 18057  001F38  0100               	movlb	0	; () banked
 18058  001F3A  5DA8               	subwf	printf@c& (0+255),w,b
 18059  001F3C  0100               	movlb	0	; () banked
 18060  001F3E  51AA               	movf	(printf@width+1)& (0+255),w,b
 18061  001F40  0A80               	xorlw	128
 18062  001F42  0100               	movlb	0	; () banked
 18063  001F44  599A               	subwfb	??_printf& (0+255),w,b
 18064  001F46  B0D8               	btfsc	status,0,c
 18065  001F48  D00B               	goto	l6804
 18066                           
 18067                           ; BSR set to: 0
 18068                           ;doprnt.c: 1382: width -= c;
 18069  001F4A  0100               	movlb	0	; () banked
 18070  001F4C  51A8               	movf	printf@c& (0+255),w,b
 18071  001F4E  0100               	movlb	0	; () banked
 18072  001F50  5FA9               	subwf	printf@width& (0+255),f,b
 18073  001F52  0E00               	movlw	0
 18074  001F54  0100               	movlb	0	; () banked
 18075  001F56  BFA8               	btfsc	printf@c& (0+255),7,b
 18076  001F58  0EFF               	movlw	255
 18077  001F5A  0100               	movlb	0	; () banked
 18078  001F5C  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 18079  001F5E  D005               	goto	l6806
 18080  001F60                     l6804:
 18081                           
 18082                           ; BSR set to: 0
 18083                           ;doprnt.c: 1383: else
 18084                           ;doprnt.c: 1384: width = 0;
 18085  001F60  0E00               	movlw	0
 18086  001F62  0100               	movlb	0	; () banked
 18087  001F64  6FAA               	movwf	(printf@width+1)& (0+255),b
 18088  001F66  0E00               	movlw	0
 18089  001F68  6FA9               	movwf	printf@width& (0+255),b
 18090  001F6A                     l6806:
 18091                           
 18092                           ; BSR set to: 0
 18093                           ;doprnt.c: 1387: if(flag & 0x04) {
 18094  001F6A  0100               	movlb	0	; () banked
 18095  001F6C  A5A7               	btfss	printf@flag& (0+255),2,b
 18096  001F6E  D018               	goto	l6818
 18097                           
 18098                           ; BSR set to: 0
 18099                           ;doprnt.c: 1392: if(flag & 0x03)
 18100  001F70  C0A7  F09A         	movff	printf@flag,??_printf
 18101  001F74  0E03               	movlw	3
 18102  001F76  0100               	movlb	0	; () banked
 18103  001F78  179A               	andwf	??_printf& (0+255),f,b
 18104  001F7A  B4D8               	btfsc	status,2,c
 18105  001F7C  D003               	goto	l6812
 18106                           
 18107                           ; BSR set to: 0
 18108                           ;doprnt.c: 1393: (putch('-') );
 18109  001F7E  0E2D               	movlw	45
 18110  001F80  EC08  F02E         	call	_putch
 18111  001F84                     l6812:
 18112                           
 18113                           ;doprnt.c: 1415: if(width)
 18114  001F84  0100               	movlb	0	; () banked
 18115  001F86  51A9               	movf	printf@width& (0+255),w,b
 18116  001F88  0100               	movlb	0	; () banked
 18117  001F8A  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 18118  001F8C  B4D8               	btfsc	status,2,c
 18119  001F8E  D025               	goto	l6828
 18120                           
 18121                           ; BSR set to: 0
 18122                           ;doprnt.c: 1417: (putch('0') );
 18123                           
 18124                           ; BSR set to: 0
 18125                           
 18126                           ;doprnt.c: 1416: do
 18127  001F90  0E30               	movlw	48
 18128  001F92  EC08  F02E         	call	_putch
 18129                           
 18130                           ;doprnt.c: 1418: while(--width);
 18131  001F96  0100               	movlb	0	; () banked
 18132  001F98  07A9               	decf	printf@width& (0+255),f,b
 18133  001F9A  A0D8               	btfss	status,0,c
 18134  001F9C  07AA               	decf	(printf@width+1)& (0+255),f,b
 18135  001F9E  D7F2               	goto	l6812
 18136  001FA0                     l6818:
 18137                           
 18138                           ; BSR set to: 0
 18139                           ;doprnt.c: 1422: {
 18140                           ;doprnt.c: 1424: if(width
 18141                           ;doprnt.c: 1428: )
 18142  001FA0  0100               	movlb	0	; () banked
 18143  001FA2  51A9               	movf	printf@width& (0+255),w,b
 18144  001FA4  0100               	movlb	0	; () banked
 18145  001FA6  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 18146  001FA8  B4D8               	btfsc	status,2,c
 18147  001FAA  D00D               	goto	l6824
 18148  001FAC                     l6820:
 18149                           
 18150                           ; BSR set to: 0
 18151                           ;doprnt.c: 1430: (putch(' ') );
 18152  001FAC  0E20               	movlw	32
 18153  001FAE  EC08  F02E         	call	_putch
 18154                           
 18155                           ;doprnt.c: 1431: while(--width);
 18156  001FB2  0100               	movlb	0	; () banked
 18157  001FB4  07A9               	decf	printf@width& (0+255),f,b
 18158  001FB6  A0D8               	btfss	status,0,c
 18159  001FB8  07AA               	decf	(printf@width+1)& (0+255),f,b
 18160  001FBA  0100               	movlb	0	; () banked
 18161  001FBC  51A9               	movf	printf@width& (0+255),w,b
 18162  001FBE  0100               	movlb	0	; () banked
 18163  001FC0  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 18164  001FC2  A4D8               	btfss	status,2,c
 18165  001FC4  D7F3               	goto	l6820
 18166  001FC6                     l6824:
 18167                           
 18168                           ; BSR set to: 0
 18169                           ;doprnt.c: 1438: if(flag & 0x03)
 18170  001FC6  C0A7  F09A         	movff	printf@flag,??_printf
 18171  001FCA  0E03               	movlw	3
 18172  001FCC  0100               	movlb	0	; () banked
 18173  001FCE  179A               	andwf	??_printf& (0+255),f,b
 18174  001FD0  B4D8               	btfsc	status,2,c
 18175  001FD2  D003               	goto	l6828
 18176                           
 18177                           ; BSR set to: 0
 18178                           ;doprnt.c: 1439: (putch('-') );
 18179  001FD4  0E2D               	movlw	45
 18180  001FD6  EC08  F02E         	call	_putch
 18181  001FDA                     l6828:
 18182                           
 18183                           ;doprnt.c: 1469: }
 18184                           ;doprnt.c: 1472: prec = c;
 18185  001FDA  C0A8  F09E         	movff	printf@c,printf@prec
 18186                           
 18187                           ;doprnt.c: 1474: while(prec--) {
 18188  001FDE  D02C               	goto	l6834
 18189  001FE0                     l6830:
 18190                           
 18191                           ;doprnt.c: 1478: {
 18192                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 18193  001FE0  0100               	movlb	0	; () banked
 18194  001FE2  519E               	movf	printf@prec& (0+255),w,b
 18195  001FE4  0D02               	mullw	2
 18196  001FE6  0E98               	movlw	low _dpowers
 18197  001FE8  24F3               	addwf	prodl,w,c
 18198  001FEA  6EF6               	movwf	tblptrl,c
 18199  001FEC  0EFA               	movlw	high _dpowers
 18200  001FEE  20F4               	addwfc	prodh,w,c
 18201  001FF0  6EF7               	movwf	tblptrh,c
 18202  001FF2                     	if	1	;There are 3 active tblptr bytes
 18203  001FF2  6AF8               	clrf	tblptru,c
 18204  001FF4  0E00               	movlw	low (__mediumconst shr (0+16))
 18205  001FF6  22F8               	addwfc	tblptru,f,c
 18206  001FF8                     	endif
 18207  001FF8  0009               	tblrd		*+
 18208  001FFA  CFF5 F082          	movff	tablat,___lwdiv@divisor
 18209  001FFE  000A               	tblrd		*-
 18210  002000  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
 18211  002004  C0A5  F080         	movff	printf@val,___lwdiv@dividend
 18212  002008  C0A6  F081         	movff	printf@val+1,___lwdiv@dividend+1
 18213  00200C  ECAE  F027         	call	___lwdiv	;wreg free
 18214  002010  C080  F087         	movff	?___lwdiv,___lwmod@dividend
 18215  002014  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
 18216  002018  0E00               	movlw	0
 18217  00201A  0100               	movlb	0	; () banked
 18218  00201C  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
 18219  00201E  0E0A               	movlw	10
 18220  002020  6F89               	movwf	___lwmod@divisor& (0+255),b
 18221  002022  ECF8  F028         	call	___lwmod	;wreg free
 18222  002026  0100               	movlb	0	; () banked
 18223  002028  5187               	movf	?___lwmod& (0+255),w,b
 18224  00202A  0F30               	addlw	48
 18225  00202C  0100               	movlb	0	; () banked
 18226  00202E  6FA8               	movwf	printf@c& (0+255),b
 18227                           
 18228                           ; BSR set to: 0
 18229                           ;doprnt.c: 1523: }
 18230                           ;doprnt.c: 1524: (putch(c) );
 18231  002030  0100               	movlb	0	; () banked
 18232  002032  51A8               	movf	printf@c& (0+255),w,b
 18233  002034  EC08  F02E         	call	_putch
 18234  002038                     l6834:
 18235  002038  0100               	movlb	0	; () banked
 18236  00203A  079E               	decf	printf@prec& (0+255),f,b
 18237  00203C  0100               	movlb	0	; () banked
 18238  00203E  299E               	incf	printf@prec& (0+255),w,b
 18239  002040  A4D8               	btfss	status,2,c
 18240  002042  D7CE               	goto	l6830
 18241  002044                     l6836:
 18242  002044  C08E  FFF6         	movff	printf@f,tblptrl
 18243  002048  C08F  FFF7         	movff	printf@f+1,tblptrh
 18244  00204C  0100               	movlb	0	; () banked
 18245  00204E  4B8E               	infsnz	printf@f& (0+255),f,b
 18246  002050  2B8F               	incf	(printf@f+1)& (0+255),f,b
 18247  002052                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 18248  002052  6AF8               	clrf	tblptru,c
 18249  002054                     	endif
 18250  002054                     	if	0	;tblptru may be non-zero
 18251  002054                     	endif
 18252  002054  0008               	tblrd		*
 18253  002056  CFF5 F0A8          	movff	tablat,printf@c
 18254  00205A  0100               	movlb	0	; () banked
 18255  00205C  51A8               	movf	printf@c& (0+255),w,b
 18256  00205E  B4D8               	btfsc	status,2,c
 18257  002060  0012               	return	
 18258  002062  D5EB               	goto	l6706
 18259  002064                     __end_of_printf:
 18260                           	opt stack 0
 18261                           tblptru	equ	0xFF8
 18262                           tblptrh	equ	0xFF7
 18263                           tblptrl	equ	0xFF6
 18264                           tablat	equ	0xFF5
 18265                           prodh	equ	0xFF4
 18266                           prodl	equ	0xFF3
 18267                           intcon	equ	0xFF2
 18268                           intcon2	equ	0xFF1
 18269                           intcon3	equ	0xFF0
 18270                           indf0	equ	0xFEF
 18271                           postinc0	equ	0xFEE
 18272                           fsr0h	equ	0xFEA
 18273                           fsr0l	equ	0xFE9
 18274                           wreg	equ	0xFE8
 18275                           postdec1	equ	0xFE5
 18276                           fsr1l	equ	0xFE1
 18277                           indf2	equ	0xFDF
 18278                           postinc2	equ	0xFDE
 18279                           postdec2	equ	0xFDD
 18280                           fsr2h	equ	0xFDA
 18281                           fsr2l	equ	0xFD9
 18282                           status	equ	0xFD8
 18283                           
 18284 ;; *************** function _putch *****************
 18285 ;; Defined at:
 18286 ;;		line 20 in file "lcd.c"
 18287 ;; Parameters:    Size  Location     Type
 18288 ;;  data            1    wreg     unsigned char 
 18289 ;; Auto vars:     Size  Location     Type
 18290 ;;  data            1    2[BANK0 ] unsigned char 
 18291 ;; Return value:  Size  Location     Type
 18292 ;;                  1    wreg      void 
 18293 ;; Registers used:
 18294 ;;		wreg, status,2, status,0, cstack
 18295 ;; Tracked objects:
 18296 ;;		On entry : 0/0
 18297 ;;		On exit  : 0/0
 18298 ;;		Unchanged: 0/0
 18299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18300 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18301 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18302 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18303 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18304 ;;Total ram usage:        1 bytes
 18305 ;; Hardware stack levels used:    1
 18306 ;; Hardware stack levels required when called:    8
 18307 ;; This function calls:
 18308 ;;		_lcdNibble
 18309 ;; This function is called by:
 18310 ;;		_printf
 18311 ;; This function uses a non-reentrant model
 18312 ;;
 18313                           
 18314                           	psect	text57
 18315  005C10                     __ptext57:
 18316                           	opt stack 0
 18317  005C10                     _putch:
 18318                           	opt stack 18
 18319                           
 18320                           ;incstack = 0
 18321                           ;putch@data stored from wreg
 18322  005C10  0100               	movlb	0	; () banked
 18323  005C12  6F82               	movwf	putch@data& (0+255),b
 18324                           
 18325                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 18326  005C14  848C               	bsf	3980,2,c	;volatile
 18327                           
 18328                           ;lcd.c: 22: lcdNibble(data);
 18329  005C16  0100               	movlb	0	; () banked
 18330  005C18  5182               	movf	putch@data& (0+255),w,b
 18331  005C1A  EC5C  F028         	call	_lcdNibble
 18332  005C1E  0012               	return		;funcret
 18333  005C20                     __end_of_putch:
 18334                           	opt stack 0
 18335                           tblptru	equ	0xFF8
 18336                           tblptrh	equ	0xFF7
 18337                           tblptrl	equ	0xFF6
 18338                           tablat	equ	0xFF5
 18339                           prodh	equ	0xFF4
 18340                           prodl	equ	0xFF3
 18341                           intcon	equ	0xFF2
 18342                           intcon2	equ	0xFF1
 18343                           intcon3	equ	0xFF0
 18344                           indf0	equ	0xFEF
 18345                           postinc0	equ	0xFEE
 18346                           fsr0h	equ	0xFEA
 18347                           fsr0l	equ	0xFE9
 18348                           wreg	equ	0xFE8
 18349                           postdec1	equ	0xFE5
 18350                           fsr1l	equ	0xFE1
 18351                           indf2	equ	0xFDF
 18352                           postinc2	equ	0xFDE
 18353                           postdec2	equ	0xFDD
 18354                           fsr2h	equ	0xFDA
 18355                           fsr2l	equ	0xFD9
 18356                           status	equ	0xFD8
 18357                           
 18358 ;; *************** function _isdigit *****************
 18359 ;; Defined at:
 18360 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 18361 ;; Parameters:    Size  Location     Type
 18362 ;;  c               1    wreg     unsigned char 
 18363 ;; Auto vars:     Size  Location     Type
 18364 ;;  c               1    2[BANK0 ] unsigned char 
 18365 ;; Return value:  Size  Location     Type
 18366 ;;		None               void
 18367 ;; Registers used:
 18368 ;;		wreg, status,2, status,0
 18369 ;; Tracked objects:
 18370 ;;		On entry : 0/0
 18371 ;;		On exit  : 0/0
 18372 ;;		Unchanged: 0/0
 18373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18374 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18375 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18376 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18377 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18378 ;;Total ram usage:        3 bytes
 18379 ;; Hardware stack levels used:    1
 18380 ;; Hardware stack levels required when called:    7
 18381 ;; This function calls:
 18382 ;;		Nothing
 18383 ;; This function is called by:
 18384 ;;		_printf
 18385 ;; This function uses a non-reentrant model
 18386 ;;
 18387                           
 18388                           	psect	text58
 18389  005A22                     __ptext58:
 18390                           	opt stack 0
 18391  005A22                     _isdigit:
 18392                           	opt stack 19
 18393                           
 18394                           ;incstack = 0
 18395                           ;isdigit@c stored from wreg
 18396  005A22  0100               	movlb	0	; () banked
 18397  005A24  6F82               	movwf	isdigit@c& (0+255),b
 18398  005A26  0E00               	movlw	0
 18399  005A28  0100               	movlb	0	; () banked
 18400  005A2A  6F81               	movwf	_isdigit$2064& (0+255),b
 18401                           
 18402                           ; BSR set to: 0
 18403  005A2C  0E3A               	movlw	58
 18404  005A2E  0100               	movlb	0	; () banked
 18405  005A30  6182               	cpfslt	isdigit@c& (0+255),b
 18406  005A32  D007               	goto	l6554
 18407                           
 18408                           ; BSR set to: 0
 18409  005A34  0E2F               	movlw	47
 18410  005A36  0100               	movlb	0	; () banked
 18411  005A38  6582               	cpfsgt	isdigit@c& (0+255),b
 18412  005A3A  D003               	goto	l6554
 18413                           
 18414                           ; BSR set to: 0
 18415  005A3C  0E01               	movlw	1
 18416  005A3E  0100               	movlb	0	; () banked
 18417  005A40  6F81               	movwf	_isdigit$2064& (0+255),b
 18418  005A42                     l6554:
 18419                           
 18420                           ; BSR set to: 0
 18421  005A42  C081  F080         	movff	_isdigit$2064,??_isdigit
 18422  005A46  0100               	movlb	0	; () banked
 18423  005A48  3180               	rrcf	??_isdigit& (0+255),w,b
 18424  005A4A  0012               	return	
 18425  005A4C                     __end_of_isdigit:
 18426                           	opt stack 0
 18427                           tblptru	equ	0xFF8
 18428                           tblptrh	equ	0xFF7
 18429                           tblptrl	equ	0xFF6
 18430                           tablat	equ	0xFF5
 18431                           prodh	equ	0xFF4
 18432                           prodl	equ	0xFF3
 18433                           intcon	equ	0xFF2
 18434                           intcon2	equ	0xFF1
 18435                           intcon3	equ	0xFF0
 18436                           indf0	equ	0xFEF
 18437                           postinc0	equ	0xFEE
 18438                           fsr0h	equ	0xFEA
 18439                           fsr0l	equ	0xFE9
 18440                           wreg	equ	0xFE8
 18441                           postdec1	equ	0xFE5
 18442                           fsr1l	equ	0xFE1
 18443                           indf2	equ	0xFDF
 18444                           postinc2	equ	0xFDE
 18445                           postdec2	equ	0xFDD
 18446                           fsr2h	equ	0xFDA
 18447                           fsr2l	equ	0xFD9
 18448                           status	equ	0xFD8
 18449                           
 18450 ;; *************** function ___wmul *****************
 18451 ;; Defined at:
 18452 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 18453 ;; Parameters:    Size  Location     Type
 18454 ;;  multiplier      2    0[BANK0 ] unsigned int 
 18455 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 18456 ;; Auto vars:     Size  Location     Type
 18457 ;;  product         2    4[BANK0 ] unsigned int 
 18458 ;; Return value:  Size  Location     Type
 18459 ;;                  2    0[BANK0 ] unsigned int 
 18460 ;; Registers used:
 18461 ;;		wreg, status,2, status,0, prodl, prodh
 18462 ;; Tracked objects:
 18463 ;;		On entry : 0/0
 18464 ;;		On exit  : 0/0
 18465 ;;		Unchanged: 0/0
 18466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18467 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18468 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18469 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18470 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18471 ;;Total ram usage:        6 bytes
 18472 ;; Hardware stack levels used:    1
 18473 ;; Hardware stack levels required when called:    7
 18474 ;; This function calls:
 18475 ;;		Nothing
 18476 ;; This function is called by:
 18477 ;;		_printf
 18478 ;; This function uses a non-reentrant model
 18479 ;;
 18480                           
 18481                           	psect	text59
 18482  0056F4                     __ptext59:
 18483                           	opt stack 0
 18484  0056F4                     ___wmul:
 18485                           	opt stack 19
 18486                           
 18487                           ; BSR set to: 0
 18488                           ;incstack = 0
 18489  0056F4  0100               	movlb	0	; () banked
 18490  0056F6  5180               	movf	___wmul@multiplier& (0+255),w,b
 18491  0056F8  0100               	movlb	0	; () banked
 18492  0056FA  0382               	mulwf	___wmul@multiplicand& (0+255),b
 18493  0056FC  CFF3 F084          	movff	prodl,___wmul@product
 18494  005700  CFF4 F085          	movff	prodh,___wmul@product+1
 18495  005704  0100               	movlb	0	; () banked
 18496  005706  5180               	movf	___wmul@multiplier& (0+255),w,b
 18497  005708  0100               	movlb	0	; () banked
 18498  00570A  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 18499  00570C  50F3               	movf	prodl,w,c
 18500  00570E  0100               	movlb	0	; () banked
 18501  005710  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 18502  005712  0100               	movlb	0	; () banked
 18503  005714  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
 18504  005716  0100               	movlb	0	; () banked
 18505  005718  0382               	mulwf	___wmul@multiplicand& (0+255),b
 18506  00571A  50F3               	movf	prodl,w,c
 18507  00571C  0100               	movlb	0	; () banked
 18508  00571E  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 18509                           
 18510                           ; BSR set to: 0
 18511  005720  C084  F080         	movff	___wmul@product,?___wmul
 18512  005724  C085  F081         	movff	___wmul@product+1,?___wmul+1
 18513  005728  0012               	return	
 18514  00572A                     __end_of___wmul:
 18515                           	opt stack 0
 18516                           tblptru	equ	0xFF8
 18517                           tblptrh	equ	0xFF7
 18518                           tblptrl	equ	0xFF6
 18519                           tablat	equ	0xFF5
 18520                           prodh	equ	0xFF4
 18521                           prodl	equ	0xFF3
 18522                           intcon	equ	0xFF2
 18523                           intcon2	equ	0xFF1
 18524                           intcon3	equ	0xFF0
 18525                           indf0	equ	0xFEF
 18526                           postinc0	equ	0xFEE
 18527                           fsr0h	equ	0xFEA
 18528                           fsr0l	equ	0xFE9
 18529                           wreg	equ	0xFE8
 18530                           postdec1	equ	0xFE5
 18531                           fsr1l	equ	0xFE1
 18532                           indf2	equ	0xFDF
 18533                           postinc2	equ	0xFDE
 18534                           postdec2	equ	0xFDD
 18535                           fsr2h	equ	0xFDA
 18536                           fsr2l	equ	0xFD9
 18537                           status	equ	0xFD8
 18538                           
 18539 ;; *************** function ___lwmod *****************
 18540 ;; Defined at:
 18541 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 18542 ;; Parameters:    Size  Location     Type
 18543 ;;  dividend        2    7[BANK0 ] unsigned int 
 18544 ;;  divisor         2    9[BANK0 ] unsigned int 
 18545 ;; Auto vars:     Size  Location     Type
 18546 ;;  counter         1   11[BANK0 ] unsigned char 
 18547 ;; Return value:  Size  Location     Type
 18548 ;;                  2    7[BANK0 ] unsigned int 
 18549 ;; Registers used:
 18550 ;;		wreg, status,2, status,0
 18551 ;; Tracked objects:
 18552 ;;		On entry : 0/0
 18553 ;;		On exit  : 0/0
 18554 ;;		Unchanged: 0/0
 18555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18556 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18557 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18558 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18559 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18560 ;;Total ram usage:        5 bytes
 18561 ;; Hardware stack levels used:    1
 18562 ;; Hardware stack levels required when called:    7
 18563 ;; This function calls:
 18564 ;;		Nothing
 18565 ;; This function is called by:
 18566 ;;		_printf
 18567 ;; This function uses a non-reentrant model
 18568 ;;
 18569                           
 18570                           	psect	text60
 18571  0051F0                     __ptext60:
 18572                           	opt stack 0
 18573  0051F0                     ___lwmod:
 18574                           	opt stack 19
 18575                           
 18576                           ; BSR set to: 0
 18577                           ;incstack = 0
 18578  0051F0  0100               	movlb	0	; () banked
 18579  0051F2  5189               	movf	___lwmod@divisor& (0+255),w,b
 18580  0051F4  0100               	movlb	0	; () banked
 18581  0051F6  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 18582  0051F8  B4D8               	btfsc	status,2,c
 18583  0051FA  D026               	goto	l1977
 18584                           
 18585                           ; BSR set to: 0
 18586  0051FC  0E01               	movlw	1
 18587  0051FE  0100               	movlb	0	; () banked
 18588  005200  6F8B               	movwf	___lwmod@counter& (0+255),b
 18589  005202  D006               	goto	l6592
 18590  005204                     l6590:
 18591                           
 18592                           ; BSR set to: 0
 18593  005204  0100               	movlb	0	; () banked
 18594  005206  90D8               	bcf	status,0,c
 18595  005208  3789               	rlcf	___lwmod@divisor& (0+255),f,b
 18596  00520A  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 18597  00520C  0100               	movlb	0	; () banked
 18598  00520E  2B8B               	incf	___lwmod@counter& (0+255),f,b
 18599  005210                     l6592:
 18600                           
 18601                           ; BSR set to: 0
 18602  005210  0100               	movlb	0	; () banked
 18603  005212  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 18604  005214  D7F7               	goto	l6590
 18605  005216                     l6594:
 18606                           
 18607                           ; BSR set to: 0
 18608  005216  0100               	movlb	0	; () banked
 18609  005218  5189               	movf	___lwmod@divisor& (0+255),w,b
 18610  00521A  0100               	movlb	0	; () banked
 18611  00521C  5D87               	subwf	___lwmod@dividend& (0+255),w,b
 18612  00521E  0100               	movlb	0	; () banked
 18613  005220  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 18614  005222  0100               	movlb	0	; () banked
 18615  005224  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 18616  005226  A0D8               	btfss	status,0,c
 18617  005228  D008               	goto	l6598
 18618                           
 18619                           ; BSR set to: 0
 18620  00522A  0100               	movlb	0	; () banked
 18621  00522C  5189               	movf	___lwmod@divisor& (0+255),w,b
 18622  00522E  0100               	movlb	0	; () banked
 18623  005230  5F87               	subwf	___lwmod@dividend& (0+255),f,b
 18624  005232  0100               	movlb	0	; () banked
 18625  005234  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 18626  005236  0100               	movlb	0	; () banked
 18627  005238  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 18628  00523A                     l6598:
 18629                           
 18630                           ; BSR set to: 0
 18631  00523A  0100               	movlb	0	; () banked
 18632  00523C  90D8               	bcf	status,0,c
 18633  00523E  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 18634  005240  3389               	rrcf	___lwmod@divisor& (0+255),f,b
 18635                           
 18636                           ; BSR set to: 0
 18637  005242  0100               	movlb	0	; () banked
 18638  005244  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
 18639  005246  D7E7               	goto	l6594
 18640  005248                     l1977:
 18641                           
 18642                           ; BSR set to: 0
 18643  005248  C087  F087         	movff	___lwmod@dividend,?___lwmod
 18644  00524C  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
 18645                           
 18646                           ; BSR set to: 0
 18647  005250  0012               	return		;funcret
 18648  005252                     __end_of___lwmod:
 18649                           	opt stack 0
 18650                           tblptru	equ	0xFF8
 18651                           tblptrh	equ	0xFF7
 18652                           tblptrl	equ	0xFF6
 18653                           tablat	equ	0xFF5
 18654                           prodh	equ	0xFF4
 18655                           prodl	equ	0xFF3
 18656                           intcon	equ	0xFF2
 18657                           intcon2	equ	0xFF1
 18658                           intcon3	equ	0xFF0
 18659                           indf0	equ	0xFEF
 18660                           postinc0	equ	0xFEE
 18661                           fsr0h	equ	0xFEA
 18662                           fsr0l	equ	0xFE9
 18663                           wreg	equ	0xFE8
 18664                           postdec1	equ	0xFE5
 18665                           fsr1l	equ	0xFE1
 18666                           indf2	equ	0xFDF
 18667                           postinc2	equ	0xFDE
 18668                           postdec2	equ	0xFDD
 18669                           fsr2h	equ	0xFDA
 18670                           fsr2l	equ	0xFD9
 18671                           status	equ	0xFD8
 18672                           
 18673 ;; *************** function ___lwdiv *****************
 18674 ;; Defined at:
 18675 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 18676 ;; Parameters:    Size  Location     Type
 18677 ;;  dividend        2    0[BANK0 ] unsigned int 
 18678 ;;  divisor         2    2[BANK0 ] unsigned int 
 18679 ;; Auto vars:     Size  Location     Type
 18680 ;;  quotient        2    4[BANK0 ] unsigned int 
 18681 ;;  counter         1    6[BANK0 ] unsigned char 
 18682 ;; Return value:  Size  Location     Type
 18683 ;;                  2    0[BANK0 ] unsigned int 
 18684 ;; Registers used:
 18685 ;;		wreg, status,2, status,0
 18686 ;; Tracked objects:
 18687 ;;		On entry : 0/0
 18688 ;;		On exit  : 0/0
 18689 ;;		Unchanged: 0/0
 18690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18691 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18692 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18693 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18694 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18695 ;;Total ram usage:        7 bytes
 18696 ;; Hardware stack levels used:    1
 18697 ;; Hardware stack levels required when called:    7
 18698 ;; This function calls:
 18699 ;;		Nothing
 18700 ;; This function is called by:
 18701 ;;		_printf
 18702 ;; This function uses a non-reentrant model
 18703 ;;
 18704                           
 18705                           	psect	text61
 18706  004F5C                     __ptext61:
 18707                           	opt stack 0
 18708  004F5C                     ___lwdiv:
 18709                           	opt stack 19
 18710                           
 18711                           ; BSR set to: 0
 18712                           ;incstack = 0
 18713  004F5C  0E00               	movlw	0
 18714  004F5E  0100               	movlb	0	; () banked
 18715  004F60  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
 18716  004F62  0E00               	movlw	0
 18717  004F64  6F84               	movwf	___lwdiv@quotient& (0+255),b
 18718                           
 18719                           ; BSR set to: 0
 18720  004F66  0100               	movlb	0	; () banked
 18721  004F68  5182               	movf	___lwdiv@divisor& (0+255),w,b
 18722  004F6A  0100               	movlb	0	; () banked
 18723  004F6C  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 18724  004F6E  B4D8               	btfsc	status,2,c
 18725  004F70  D02C               	goto	l1967
 18726                           
 18727                           ; BSR set to: 0
 18728  004F72  0E01               	movlw	1
 18729  004F74  0100               	movlb	0	; () banked
 18730  004F76  6F86               	movwf	___lwdiv@counter& (0+255),b
 18731  004F78  D006               	goto	l6572
 18732  004F7A                     l6570:
 18733                           
 18734                           ; BSR set to: 0
 18735  004F7A  0100               	movlb	0	; () banked
 18736  004F7C  90D8               	bcf	status,0,c
 18737  004F7E  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
 18738  004F80  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 18739  004F82  0100               	movlb	0	; () banked
 18740  004F84  2B86               	incf	___lwdiv@counter& (0+255),f,b
 18741  004F86                     l6572:
 18742                           
 18743                           ; BSR set to: 0
 18744  004F86  0100               	movlb	0	; () banked
 18745  004F88  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 18746  004F8A  D7F7               	goto	l6570
 18747  004F8C                     l6574:
 18748                           
 18749                           ; BSR set to: 0
 18750  004F8C  0100               	movlb	0	; () banked
 18751  004F8E  90D8               	bcf	status,0,c
 18752  004F90  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
 18753  004F92  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 18754                           
 18755                           ; BSR set to: 0
 18756  004F94  0100               	movlb	0	; () banked
 18757  004F96  5182               	movf	___lwdiv@divisor& (0+255),w,b
 18758  004F98  0100               	movlb	0	; () banked
 18759  004F9A  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
 18760  004F9C  0100               	movlb	0	; () banked
 18761  004F9E  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 18762  004FA0  0100               	movlb	0	; () banked
 18763  004FA2  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 18764  004FA4  A0D8               	btfss	status,0,c
 18765  004FA6  D00A               	goto	l6582
 18766                           
 18767                           ; BSR set to: 0
 18768  004FA8  0100               	movlb	0	; () banked
 18769  004FAA  5182               	movf	___lwdiv@divisor& (0+255),w,b
 18770  004FAC  0100               	movlb	0	; () banked
 18771  004FAE  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
 18772  004FB0  0100               	movlb	0	; () banked
 18773  004FB2  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 18774  004FB4  0100               	movlb	0	; () banked
 18775  004FB6  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 18776                           
 18777                           ; BSR set to: 0
 18778  004FB8  0100               	movlb	0	; () banked
 18779  004FBA  8184               	bsf	___lwdiv@quotient& (0+255),0,b
 18780  004FBC                     l6582:
 18781                           
 18782                           ; BSR set to: 0
 18783  004FBC  0100               	movlb	0	; () banked
 18784  004FBE  90D8               	bcf	status,0,c
 18785  004FC0  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 18786  004FC2  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
 18787                           
 18788                           ; BSR set to: 0
 18789  004FC4  0100               	movlb	0	; () banked
 18790  004FC6  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
 18791  004FC8  D7E1               	goto	l6574
 18792  004FCA                     l1967:
 18793                           
 18794                           ; BSR set to: 0
 18795  004FCA  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
 18796  004FCE  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
 18797                           
 18798                           ; BSR set to: 0
 18799  004FD2  0012               	return		;funcret
 18800  004FD4                     __end_of___lwdiv:
 18801                           	opt stack 0
 18802                           tblptru	equ	0xFF8
 18803                           tblptrh	equ	0xFF7
 18804                           tblptrl	equ	0xFF6
 18805                           tablat	equ	0xFF5
 18806                           prodh	equ	0xFF4
 18807                           prodl	equ	0xFF3
 18808                           intcon	equ	0xFF2
 18809                           intcon2	equ	0xFF1
 18810                           intcon3	equ	0xFF0
 18811                           indf0	equ	0xFEF
 18812                           postinc0	equ	0xFEE
 18813                           fsr0h	equ	0xFEA
 18814                           fsr0l	equ	0xFE9
 18815                           wreg	equ	0xFE8
 18816                           postdec1	equ	0xFE5
 18817                           fsr1l	equ	0xFE1
 18818                           indf2	equ	0xFDF
 18819                           postinc2	equ	0xFDE
 18820                           postdec2	equ	0xFDD
 18821                           fsr2h	equ	0xFDA
 18822                           fsr2l	equ	0xFD9
 18823                           status	equ	0xFD8
 18824                           
 18825 ;; *************** function _lcdInst *****************
 18826 ;; Defined at:
 18827 ;;		line 15 in file "lcd.c"
 18828 ;; Parameters:    Size  Location     Type
 18829 ;;  data            1    wreg     unsigned char 
 18830 ;; Auto vars:     Size  Location     Type
 18831 ;;  data            1    2[BANK0 ] unsigned char 
 18832 ;; Return value:  Size  Location     Type
 18833 ;;                  1    wreg      void 
 18834 ;; Registers used:
 18835 ;;		wreg, status,2, status,0, cstack
 18836 ;; Tracked objects:
 18837 ;;		On entry : 0/0
 18838 ;;		On exit  : 0/0
 18839 ;;		Unchanged: 0/0
 18840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18841 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18842 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18843 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18844 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18845 ;;Total ram usage:        1 bytes
 18846 ;; Hardware stack levels used:    1
 18847 ;; Hardware stack levels required when called:    8
 18848 ;; This function calls:
 18849 ;;		_lcdNibble
 18850 ;; This function is called by:
 18851 ;;		_UI
 18852 ;;		_change_state_to_menu_start
 18853 ;;		_change_state_to_menu_12
 18854 ;;		_change_state_to_menu_22
 18855 ;;		_initLCD
 18856 ;;		_printRTC
 18857 ;;		_Loading
 18858 ;;		_ID
 18859 ;;		_EEPROM_write
 18860 ;;		_Test
 18861 ;;		_algorithmTest
 18862 ;;		_sensorTest
 18863 ;;		_actuatorTest
 18864 ;;		_BothServos
 18865 ;;		_PortTestDC
 18866 ;;		_PlatformTest
 18867 ;;		_SpeedTest
 18868 ;;		_BlockerTest
 18869 ;;		_arm
 18870 ;;		_PortTestPusher
 18871 ;;		_ToggleTestA5
 18872 ;; This function uses a non-reentrant model
 18873 ;;
 18874                           
 18875                           	psect	text62
 18876  005C20                     __ptext62:
 18877                           	opt stack 0
 18878  005C20                     _lcdInst:
 18879                           	opt stack 20
 18880                           
 18881                           ; BSR set to: 0
 18882                           ;incstack = 0
 18883                           ;lcdInst@data stored from wreg
 18884  005C20  0100               	movlb	0	; () banked
 18885  005C22  6F82               	movwf	lcdInst@data& (0+255),b
 18886                           
 18887                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 18888  005C24  948C               	bcf	3980,2,c	;volatile
 18889                           
 18890                           ;lcd.c: 17: lcdNibble(data);
 18891  005C26  0100               	movlb	0	; () banked
 18892  005C28  5182               	movf	lcdInst@data& (0+255),w,b
 18893  005C2A  EC5C  F028         	call	_lcdNibble
 18894  005C2E  0012               	return		;funcret
 18895  005C30                     __end_of_lcdInst:
 18896                           	opt stack 0
 18897                           tblptru	equ	0xFF8
 18898                           tblptrh	equ	0xFF7
 18899                           tblptrl	equ	0xFF6
 18900                           tablat	equ	0xFF5
 18901                           prodh	equ	0xFF4
 18902                           prodl	equ	0xFF3
 18903                           intcon	equ	0xFF2
 18904                           intcon2	equ	0xFF1
 18905                           intcon3	equ	0xFF0
 18906                           indf0	equ	0xFEF
 18907                           postinc0	equ	0xFEE
 18908                           fsr0h	equ	0xFEA
 18909                           fsr0l	equ	0xFE9
 18910                           wreg	equ	0xFE8
 18911                           postdec1	equ	0xFE5
 18912                           fsr1l	equ	0xFE1
 18913                           indf2	equ	0xFDF
 18914                           postinc2	equ	0xFDE
 18915                           postdec2	equ	0xFDD
 18916                           fsr2h	equ	0xFDA
 18917                           fsr2l	equ	0xFD9
 18918                           status	equ	0xFD8
 18919                           
 18920 ;; *************** function _lcdNibble *****************
 18921 ;; Defined at:
 18922 ;;		line 25 in file "lcd.c"
 18923 ;; Parameters:    Size  Location     Type
 18924 ;;  data            1    wreg     unsigned char 
 18925 ;; Auto vars:     Size  Location     Type
 18926 ;;  data            1    1[BANK0 ] unsigned char 
 18927 ;;  temp            1    0[BANK0 ] unsigned char 
 18928 ;; Return value:  Size  Location     Type
 18929 ;;                  1    wreg      void 
 18930 ;; Registers used:
 18931 ;;		wreg, status,2, status,0
 18932 ;; Tracked objects:
 18933 ;;		On entry : 0/0
 18934 ;;		On exit  : 0/0
 18935 ;;		Unchanged: 0/0
 18936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18937 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18938 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18939 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18940 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18941 ;;Total ram usage:        2 bytes
 18942 ;; Hardware stack levels used:    1
 18943 ;; Hardware stack levels required when called:    7
 18944 ;; This function calls:
 18945 ;;		Nothing
 18946 ;; This function is called by:
 18947 ;;		_lcdInst
 18948 ;;		_putch
 18949 ;; This function uses a non-reentrant model
 18950 ;;
 18951                           
 18952                           	psect	text63
 18953  0050B8                     __ptext63:
 18954                           	opt stack 0
 18955  0050B8                     _lcdNibble:
 18956                           	opt stack 20
 18957                           
 18958                           ;incstack = 0
 18959                           ;lcdNibble@data stored from wreg
 18960  0050B8  0100               	movlb	0	; () banked
 18961  0050BA  6F81               	movwf	lcdNibble@data& (0+255),b
 18962                           
 18963                           ;lcd.c: 27: (INTCONbits.GIE = 0);
 18964  0050BC  9EF2               	bcf	intcon,7,c	;volatile
 18965                           
 18966                           ;lcd.c: 28: char temp = data & 0xF0;
 18967  0050BE  0100               	movlb	0	; () banked
 18968  0050C0  5181               	movf	lcdNibble@data& (0+255),w,b
 18969  0050C2  0BF0               	andlw	240
 18970  0050C4  0100               	movlb	0	; () banked
 18971  0050C6  6F80               	movwf	lcdNibble@temp& (0+255),b
 18972                           
 18973                           ;lcd.c: 29: LATD = LATD & 0x0F;
 18974  0050C8  508C               	movf	3980,w,c	;volatile
 18975  0050CA  0B0F               	andlw	15
 18976  0050CC  6E8C               	movwf	3980,c	;volatile
 18977                           
 18978                           ;lcd.c: 30: LATD = temp | LATD;
 18979  0050CE  0100               	movlb	0	; () banked
 18980  0050D0  5180               	movf	lcdNibble@temp& (0+255),w,b
 18981  0050D2  108C               	iorwf	3980,w,c	;volatile
 18982  0050D4  6E8C               	movwf	3980,c	;volatile
 18983                           
 18984                           ; BSR set to: 0
 18985                           ;lcd.c: 32: LATDbits.LATD3 = 1;
 18986  0050D6  868C               	bsf	3980,3,c	;volatile
 18987                           
 18988                           ; BSR set to: 0
 18989                           ;lcd.c: 33: _delay((unsigned long)((25)*(32000000/4000000.0)));
 18990  0050D8  0E42               	movlw	66
 18991  0050DA                     u11367:
 18992  0050DA  2EE8               	decfsz	wreg,f,c
 18993  0050DC  D7FE               	bra	u11367
 18994  0050DE  D000               	nop2	
 18995                           
 18996                           ;lcd.c: 34: LATDbits.LATD3 = 0;
 18997  0050E0  968C               	bcf	3980,3,c	;volatile
 18998                           
 18999                           ;lcd.c: 35: _delay((unsigned long)((25)*(32000000/4000000.0)));
 19000  0050E2  0E42               	movlw	66
 19001  0050E4                     u11377:
 19002  0050E4  2EE8               	decfsz	wreg,f,c
 19003  0050E6  D7FE               	bra	u11377
 19004  0050E8  D000               	nop2	
 19005                           
 19006                           ;lcd.c: 37: data = data << 4;
 19007  0050EA  0100               	movlb	0	; () banked
 19008  0050EC  3981               	swapf	lcdNibble@data& (0+255),w,b
 19009  0050EE  0BF0               	andlw	240
 19010  0050F0  0100               	movlb	0	; () banked
 19011  0050F2  6F81               	movwf	lcdNibble@data& (0+255),b
 19012                           
 19013                           ;lcd.c: 39: temp = data & 0xF0;
 19014  0050F4  0100               	movlb	0	; () banked
 19015  0050F6  5181               	movf	lcdNibble@data& (0+255),w,b
 19016  0050F8  0BF0               	andlw	240
 19017  0050FA  0100               	movlb	0	; () banked
 19018  0050FC  6F80               	movwf	lcdNibble@temp& (0+255),b
 19019                           
 19020                           ;lcd.c: 40: LATD = LATD & 0x0F;
 19021  0050FE  508C               	movf	3980,w,c	;volatile
 19022  005100  0B0F               	andlw	15
 19023  005102  6E8C               	movwf	3980,c	;volatile
 19024                           
 19025                           ;lcd.c: 41: LATD = temp | LATD;
 19026  005104  0100               	movlb	0	; () banked
 19027  005106  5180               	movf	lcdNibble@temp& (0+255),w,b
 19028  005108  108C               	iorwf	3980,w,c	;volatile
 19029  00510A  6E8C               	movwf	3980,c	;volatile
 19030                           
 19031                           ; BSR set to: 0
 19032                           ;lcd.c: 43: LATDbits.LATD3 = 1;
 19033  00510C  868C               	bsf	3980,3,c	;volatile
 19034                           
 19035                           ; BSR set to: 0
 19036                           ;lcd.c: 44: _delay((unsigned long)((25)*(32000000/4000000.0)));
 19037  00510E  0E42               	movlw	66
 19038  005110                     u11387:
 19039  005110  2EE8               	decfsz	wreg,f,c
 19040  005112  D7FE               	bra	u11387
 19041  005114  D000               	nop2	
 19042                           
 19043                           ;lcd.c: 45: LATDbits.LATD3 = 0;
 19044  005116  968C               	bcf	3980,3,c	;volatile
 19045                           
 19046                           ;lcd.c: 46: _delay((unsigned long)((25)*(32000000/4000000.0)));
 19047  005118  0E42               	movlw	66
 19048  00511A                     u11397:
 19049  00511A  2EE8               	decfsz	wreg,f,c
 19050  00511C  D7FE               	bra	u11397
 19051  00511E  D000               	nop2	
 19052                           
 19053                           ;lcd.c: 47: (INTCONbits.GIE = 1);
 19054  005120  8EF2               	bsf	intcon,7,c	;volatile
 19055  005122  0012               	return		;funcret
 19056  005124                     __end_of_lcdNibble:
 19057                           	opt stack 0
 19058                           tblptru	equ	0xFF8
 19059                           tblptrh	equ	0xFF7
 19060                           tblptrl	equ	0xFF6
 19061                           tablat	equ	0xFF5
 19062                           prodh	equ	0xFF4
 19063                           prodl	equ	0xFF3
 19064                           intcon	equ	0xFF2
 19065                           intcon2	equ	0xFF1
 19066                           intcon3	equ	0xFF0
 19067                           indf0	equ	0xFEF
 19068                           postinc0	equ	0xFEE
 19069                           fsr0h	equ	0xFEA
 19070                           fsr0l	equ	0xFE9
 19071                           wreg	equ	0xFE8
 19072                           postdec1	equ	0xFE5
 19073                           fsr1l	equ	0xFE1
 19074                           indf2	equ	0xFDF
 19075                           postinc2	equ	0xFDE
 19076                           postdec2	equ	0xFDD
 19077                           fsr2h	equ	0xFDA
 19078                           fsr2l	equ	0xFD9
 19079                           status	equ	0xFD8
 19080                           
 19081 ;; *************** function _handler *****************
 19082 ;; Defined at:
 19083 ;;		line 16 in file "interruptHandler.c"
 19084 ;; Parameters:    Size  Location     Type
 19085 ;;		None
 19086 ;; Auto vars:     Size  Location     Type
 19087 ;;		None
 19088 ;; Return value:  Size  Location     Type
 19089 ;;                  1    wreg      void 
 19090 ;; Registers used:
 19091 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19092 ;; Tracked objects:
 19093 ;;		On entry : 0/0
 19094 ;;		On exit  : 0/0
 19095 ;;		Unchanged: 0/0
 19096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19097 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19098 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19099 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19100 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19101 ;;Total ram usage:       16 bytes
 19102 ;; Hardware stack levels used:    1
 19103 ;; Hardware stack levels required when called:    6
 19104 ;; This function calls:
 19105 ;;		_printSortTimer
 19106 ;;		_updateArmState
 19107 ;;		_updateMenu
 19108 ;;		_updateServoStates
 19109 ;;		i2_change_state_to_menu_start
 19110 ;; This function is called by:
 19111 ;;		Interrupt level 2
 19112 ;; This function uses a non-reentrant model
 19113 ;;
 19114                           
 19115                           	psect	intcode
 19116  000008                     __pintcode:
 19117                           	opt stack 0
 19118  000008                     _handler:
 19119                           	opt stack 18
 19120                           
 19121                           ;incstack = 0
 19122  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 19123  00000A  ED12  F01D         	call	int_func,f	;refresh shadow registers
 19124                           tblptru	equ	0xFF8
 19125                           tblptrh	equ	0xFF7
 19126                           tblptrl	equ	0xFF6
 19127                           tablat	equ	0xFF5
 19128                           prodh	equ	0xFF4
 19129                           prodl	equ	0xFF3
 19130                           intcon	equ	0xFF2
 19131                           intcon2	equ	0xFF1
 19132                           intcon3	equ	0xFF0
 19133                           indf0	equ	0xFEF
 19134                           postinc0	equ	0xFEE
 19135                           fsr0h	equ	0xFEA
 19136                           fsr0l	equ	0xFE9
 19137                           wreg	equ	0xFE8
 19138                           postdec1	equ	0xFE5
 19139                           fsr1l	equ	0xFE1
 19140                           indf2	equ	0xFDF
 19141                           postinc2	equ	0xFDE
 19142                           postdec2	equ	0xFDD
 19143                           fsr2h	equ	0xFDA
 19144                           fsr2l	equ	0xFD9
 19145                           status	equ	0xFD8
 19146                           
 19147                           	psect	intcode_body
 19148  003A24                     __pintcode_body:
 19149                           	opt stack 18
 19150  003A24                     int_func:
 19151                           	opt stack 18
 19152  003A24  0006               	pop		; remove dummy address from shadow register refresh
 19153  003A26  CFFA F04D          	movff	pclath,??_handler+2
 19154  003A2A  CFFB F04E          	movff	pclatu,??_handler+3
 19155  003A2E  CFE9 F04F          	movff	fsr0l,??_handler+4
 19156  003A32  CFEA F050          	movff	fsr0h,??_handler+5
 19157  003A36  CFE1 F051          	movff	fsr1l,??_handler+6
 19158  003A3A  CFE2 F052          	movff	fsr1h,??_handler+7
 19159  003A3E  CFD9 F053          	movff	fsr2l,??_handler+8
 19160  003A42  CFDA F054          	movff	fsr2h,??_handler+9
 19161  003A46  CFF3 F055          	movff	prodl,??_handler+10
 19162  003A4A  CFF4 F056          	movff	prodh,??_handler+11
 19163  003A4E  CFF6 F057          	movff	tblptrl,??_handler+12
 19164  003A52  CFF7 F058          	movff	tblptrh,??_handler+13
 19165  003A56  CFF8 F059          	movff	tblptru,??_handler+14
 19166  003A5A  CFF5 F05A          	movff	tablat,??_handler+15
 19167                           
 19168                           ;interruptHandler.c: 18: if(INT1IF){
 19169  003A5E  A0F0               	btfss	intcon3,0,c	;volatile
 19170  003A60  D034               	goto	i2l10182
 19171                           
 19172                           ;interruptHandler.c: 19: INT1IF = 0;
 19173  003A62  90F0               	bcf	intcon3,0,c	;volatile
 19174                           
 19175                           ;interruptHandler.c: 20: input = keys[(PORTB & 0xF0) >> 4];
 19176  003A64  3881               	swapf	3969,w,c	;volatile
 19177  003A66  0B0F               	andlw	15
 19178  003A68  0B0F               	andlw	15
 19179  003A6A  6E4B               	movwf	??_handler& (0+255),c
 19180  003A6C  6A4C               	clrf	(??_handler+1)& (0+255),c
 19181  003A6E  0E87               	movlw	low _keys
 19182  003A70  244B               	addwf	??_handler,w,c
 19183  003A72  6EF6               	movwf	tblptrl,c
 19184  003A74  0EFA               	movlw	high _keys
 19185  003A76  204C               	addwfc	??_handler+1,w,c
 19186  003A78  6EF7               	movwf	tblptrh,c
 19187  003A7A                     	if	1	;There are 3 active tblptr bytes
 19188  003A7A  6AF8               	clrf	tblptru,c
 19189  003A7C  0E00               	movlw	low (__mediumconst shr (0+16))
 19190  003A7E  22F8               	addwfc	tblptru,f,c
 19191  003A80                     	endif
 19192  003A80  0008               	tblrd		*
 19193  003A82  CFF5 F07D          	movff	tablat,_input	;volatile
 19194                           
 19195                           ;interruptHandler.c: 21: if(input == '*'){
 19196  003A86  0E2A               	movlw	42
 19197  003A88  187D               	xorwf	_input,w,c	;volatile
 19198  003A8A  B4D8               	btfsc	status,2,c
 19199  003A8C  D00D               	goto	i2l10176
 19200  003A8E  D018               	goto	i2l10178
 19201  003A90                     i2l10166:
 19202                           
 19203                           ;interruptHandler.c: 24: machine_state = Testing_state;
 19204  003A90  0E03               	movlw	3
 19205  003A92  D007               	goto	L17
 19206  003A94                     i2l10168:
 19207                           
 19208                           ; BSR set to: 0
 19209                           ;interruptHandler.c: 27: machine_state = UI_state;
 19210  003A94  0E00               	movlw	0
 19211  003A96  0100               	movlb	0	; () banked
 19212  003A98  6FFC               	movwf	_machine_state& (0+255),b
 19213                           
 19214                           ; BSR set to: 0
 19215                           ;interruptHandler.c: 28: change_state_to_menu_start();
 19216  003A9A  EC3A  F02D         	call	i2_change_state_to_menu_start	;wreg free
 19217                           
 19218                           ;interruptHandler.c: 29: break;
 19219  003A9E  D015               	goto	i2l10182
 19220  003AA0                     i2l10172:
 19221                           
 19222                           ;interruptHandler.c: 31: machine_state = DoneSorting_state;
 19223  003AA0  0E02               	movlw	2
 19224  003AA2                     L17:
 19225  003AA2  0100               	movlb	0	; () banked
 19226  003AA4  6FFC               	movwf	_machine_state& (0+255),b
 19227                           
 19228                           ; BSR set to: 0
 19229                           ;interruptHandler.c: 33: }
 19230                           
 19231                           ;interruptHandler.c: 32: break;
 19232  003AA6  D011               	goto	i2l10182
 19233  003AA8                     i2l10176:
 19234  003AA8  0100               	movlb	0	; () banked
 19235  003AAA  51FC               	movf	_machine_state& (0+255),w,b
 19236                           
 19237                           ; Switch size 1, requested type "space"
 19238                           ; Number of cases is 3, Range of values is 0 to 3
 19239                           ; switch strategies available:
 19240                           ; Name         Instructions Cycles
 19241                           ; simple_byte           10     6 (average)
 19242                           ;	Chosen strategy is simple_byte
 19243  003AAC  0A00               	xorlw	0	; case 0
 19244  003AAE  B4D8               	btfsc	status,2,c
 19245  003AB0  D7EF               	goto	i2l10166
 19246  003AB2  0A01               	xorlw	1	; case 1
 19247  003AB4  B4D8               	btfsc	status,2,c
 19248  003AB6  D7F4               	goto	i2l10172
 19249  003AB8  0A02               	xorlw	2	; case 3
 19250  003ABA  B4D8               	btfsc	status,2,c
 19251  003ABC  D7EB               	goto	i2l10168
 19252                           
 19253                           ; BSR set to: 0
 19254                           ;interruptHandler.c: 34: }
 19255  003ABE  D005               	goto	i2l10182
 19256  003AC0                     i2l10178:
 19257                           
 19258                           ;interruptHandler.c: 35: else if(machine_state == UI_state){
 19259  003AC0  0100               	movlb	0	; () banked
 19260  003AC2  51FC               	movf	_machine_state& (0+255),w,b
 19261  003AC4  B4D8               	btfsc	status,2,c
 19262                           
 19263                           ; BSR set to: 0
 19264                           ;interruptHandler.c: 36: updateMenu();
 19265  003AC6  EC4F  F018         	call	_updateMenu	;wreg free
 19266  003ACA                     i2l10182:
 19267                           
 19268                           ;interruptHandler.c: 37: }
 19269                           ;interruptHandler.c: 38: }
 19270                           ;interruptHandler.c: 41: if(TMR0IF){
 19271  003ACA  A4F2               	btfss	intcon,2,c	;volatile
 19272  003ACC  D00C               	goto	i2l10196
 19273                           
 19274                           ;interruptHandler.c: 42: TMR0IF = 0;
 19275  003ACE  94F2               	bcf	intcon,2,c	;volatile
 19276                           
 19277                           ;interruptHandler.c: 43: if(machine_state == Sorting_state){
 19278  003AD0  0100               	movlb	0	; () banked
 19279  003AD2  05FC               	decf	_machine_state& (0+255),w,b
 19280  003AD4  A4D8               	btfss	status,2,c
 19281  003AD6  D007               	goto	i2l10196
 19282                           
 19283                           ; BSR set to: 0
 19284                           ;interruptHandler.c: 44: printSortTimer();
 19285  003AD8  ECAF  F019         	call	_printSortTimer	;wreg free
 19286                           
 19287                           ;interruptHandler.c: 46: TMR0H = 0b10000101;
 19288  003ADC  0E85               	movlw	133
 19289  003ADE  6ED7               	movwf	4055,c	;volatile
 19290                           
 19291                           ;interruptHandler.c: 47: TMR0L = 0b11101110;
 19292  003AE0  0EEE               	movlw	238
 19293  003AE2  6ED6               	movwf	4054,c	;volatile
 19294                           
 19295                           ;interruptHandler.c: 48: TMR0ON = 1;
 19296  003AE4  8ED5               	bsf	4053,7,c	;volatile
 19297  003AE6                     i2l10196:
 19298                           
 19299                           ;interruptHandler.c: 49: }
 19300                           ;interruptHandler.c: 50: }
 19301                           ;interruptHandler.c: 53: if(TMR1IF){
 19302  003AE6  A09E               	btfss	3998,0,c	;volatile
 19303  003AE8  D028               	goto	i2l10224
 19304                           
 19305                           ;interruptHandler.c: 54: TMR1IF = 0;
 19306  003AEA  909E               	bcf	3998,0,c	;volatile
 19307                           
 19308                           ;interruptHandler.c: 55: TMR1ON = 0;
 19309  003AEC  90CD               	bcf	4045,0,c	;volatile
 19310                           
 19311                           ;interruptHandler.c: 56: if(machine_state == Sorting_state){
 19312  003AEE  0100               	movlb	0	; () banked
 19313  003AF0  05FC               	decf	_machine_state& (0+255),w,b
 19314  003AF2  A4D8               	btfss	status,2,c
 19315  003AF4  D022               	goto	i2l10224
 19316                           
 19317                           ; BSR set to: 0
 19318                           ;interruptHandler.c: 57: if(was_low_1){
 19319  003AF6  5077               	movf	_was_low_1,w,c	;volatile
 19320  003AF8  1078               	iorwf	_was_low_1+1,w,c	;volatile
 19321  003AFA  B4D8               	btfsc	status,2,c
 19322  003AFC  D00A               	goto	i2l1042
 19323                           
 19324                           ; BSR set to: 0
 19325                           ;interruptHandler.c: 58: LATCbits.LATC1 = 1;
 19326  003AFE  828B               	bsf	3979,1,c	;volatile
 19327                           
 19328                           ; BSR set to: 0
 19329                           ;interruptHandler.c: 59: was_low_1 = 0;
 19330  003B00  0E00               	movlw	0
 19331  003B02  6E78               	movwf	_was_low_1+1,c	;volatile
 19332  003B04  0E00               	movlw	0
 19333  003B06  6E77               	movwf	_was_low_1,c	;volatile
 19334                           
 19335                           ; BSR set to: 0
 19336                           ;interruptHandler.c: 60: TMR1H = servoTimes[0];
 19337  003B08  C05B  FFCF         	movff	_servoTimes,4047	;volatile
 19338                           
 19339                           ; BSR set to: 0
 19340                           ;interruptHandler.c: 61: TMR1L = servoTimes[1];
 19341  003B0C  C05D  FFCE         	movff	_servoTimes+2,4046	;volatile
 19342                           
 19343                           ;interruptHandler.c: 62: }
 19344  003B10  D00D               	goto	i2l10218
 19345  003B12                     i2l1042:
 19346                           
 19347                           ; BSR set to: 0
 19348                           ;interruptHandler.c: 63: else{
 19349                           ;interruptHandler.c: 64: LATCbits.LATC1 = 0;
 19350  003B12  928B               	bcf	3979,1,c	;volatile
 19351                           
 19352                           ; BSR set to: 0
 19353                           ;interruptHandler.c: 65: was_low_1 = 1;
 19354  003B14  0E00               	movlw	0
 19355  003B16  6E78               	movwf	_was_low_1+1,c	;volatile
 19356  003B18  0E01               	movlw	1
 19357  003B1A  6E77               	movwf	_was_low_1,c	;volatile
 19358                           
 19359                           ; BSR set to: 0
 19360                           ;interruptHandler.c: 66: TMR1H = 20000 - servoTimes[0];
 19361  003B1C  505B               	movf	_servoTimes,w,c
 19362  003B1E  0800               	sublw	0
 19363  003B20  0F20               	addlw	32
 19364  003B22  6ECF               	movwf	4047,c	;volatile
 19365                           
 19366                           ; BSR set to: 0
 19367                           ;interruptHandler.c: 67: TMR1L = 20000 - servoTimes[1];
 19368  003B24  505D               	movf	_servoTimes+2,w,c
 19369  003B26  0800               	sublw	0
 19370  003B28  0F20               	addlw	32
 19371  003B2A  6ECE               	movwf	4046,c	;volatile
 19372  003B2C                     i2l10218:
 19373                           
 19374                           ; BSR set to: 0
 19375                           ;interruptHandler.c: 68: }
 19376                           ;interruptHandler.c: 69: TMR1ON = 1;
 19377  003B2C  80CD               	bsf	4045,0,c	;volatile
 19378                           
 19379                           ; BSR set to: 0
 19380                           ;interruptHandler.c: 70: servo_timer_counter += 10;
 19381  003B2E  0E0A               	movlw	10
 19382  003B30  266D               	addwf	_servo_timer_counter,f,c	;volatile
 19383  003B32  0E00               	movlw	0
 19384  003B34  226E               	addwfc	_servo_timer_counter+1,f,c	;volatile
 19385                           
 19386                           ; BSR set to: 0
 19387                           ;interruptHandler.c: 72: updateServoStates();
 19388  003B36  EC07  F01E         	call	_updateServoStates	;wreg free
 19389  003B3A                     i2l10224:
 19390                           
 19391                           ;interruptHandler.c: 73: }
 19392                           ;interruptHandler.c: 74: }
 19393                           ;interruptHandler.c: 77: if(TMR2IF){
 19394  003B3A  A29E               	btfss	3998,1,c	;volatile
 19395  003B3C  D026               	goto	i2l10250
 19396                           
 19397                           ;interruptHandler.c: 80: TMR2IF = 0;
 19398  003B3E  929E               	bcf	3998,1,c	;volatile
 19399                           
 19400                           ;interruptHandler.c: 81: TMR2ON = 0;
 19401  003B40  94CA               	bcf	4042,2,c	;volatile
 19402                           
 19403                           ;interruptHandler.c: 82: timer2_counter++;
 19404  003B42  4A73               	infsnz	_timer2_counter,f,c	;volatile
 19405  003B44  2A74               	incf	_timer2_counter+1,f,c	;volatile
 19406                           
 19407                           ;interruptHandler.c: 83: if(machine_state == Sorting_state){
 19408  003B46  0100               	movlb	0	; () banked
 19409  003B48  05FC               	decf	_machine_state& (0+255),w,b
 19410  003B4A  A4D8               	btfss	status,2,c
 19411  003B4C  D01E               	goto	i2l10250
 19412                           
 19413                           ; BSR set to: 0
 19414                           ;interruptHandler.c: 84: if(was_low_2 && (timer2_counter == 2)){
 19415  003B4E  5079               	movf	_was_low_2,w,c	;volatile
 19416  003B50  107A               	iorwf	_was_low_2+1,w,c	;volatile
 19417  003B52  B4D8               	btfsc	status,2,c
 19418  003B54  D00A               	goto	i2l10240
 19419                           
 19420                           ; BSR set to: 0
 19421  003B56  0E02               	movlw	2
 19422  003B58  1873               	xorwf	_timer2_counter,w,c	;volatile
 19423  003B5A  1074               	iorwf	_timer2_counter+1,w,c	;volatile
 19424  003B5C  A4D8               	btfss	status,2,c
 19425  003B5E  D005               	goto	i2l10240
 19426                           
 19427                           ; BSR set to: 0
 19428                           ;interruptHandler.c: 86: LATBbits.LATB3 = 1;
 19429  003B60  868A               	bsf	3978,3,c	;volatile
 19430                           
 19431                           ; BSR set to: 0
 19432                           ;interruptHandler.c: 87: was_low_2 = 0;
 19433  003B62  0E00               	movlw	0
 19434  003B64  6E7A               	movwf	_was_low_2+1,c	;volatile
 19435  003B66  0E00               	movlw	0
 19436  003B68  D008               	goto	L18
 19437  003B6A                     i2l10240:
 19438                           
 19439                           ; BSR set to: 0
 19440                           ;interruptHandler.c: 90: else if(!was_low_2){
 19441  003B6A  5079               	movf	_was_low_2,w,c	;volatile
 19442  003B6C  107A               	iorwf	_was_low_2+1,w,c	;volatile
 19443  003B6E  A4D8               	btfss	status,2,c
 19444  003B70  D009               	goto	i2l10246
 19445                           
 19446                           ; BSR set to: 0
 19447                           ;interruptHandler.c: 91: LATBbits.LATB3 = 0;
 19448  003B72  968A               	bcf	3978,3,c	;volatile
 19449                           
 19450                           ; BSR set to: 0
 19451                           ;interruptHandler.c: 92: was_low_2 = 1;
 19452  003B74  0E00               	movlw	0
 19453  003B76  6E7A               	movwf	_was_low_2+1,c	;volatile
 19454  003B78  0E01               	movlw	1
 19455  003B7A                     L18:
 19456  003B7A  6E79               	movwf	_was_low_2,c	;volatile
 19457                           
 19458                           ;interruptHandler.c: 93: timer2_counter = 0;
 19459  003B7C  0E00               	movlw	0
 19460  003B7E  6E74               	movwf	_timer2_counter+1,c	;volatile
 19461  003B80  0E00               	movlw	0
 19462  003B82  6E73               	movwf	_timer2_counter,c	;volatile
 19463  003B84                     i2l10246:
 19464                           
 19465                           ; BSR set to: 0
 19466                           ;interruptHandler.c: 94: }
 19467                           ;interruptHandler.c: 95: updateArmState();
 19468  003B84  EC0A  F02B         	call	_updateArmState	;wreg free
 19469                           
 19470                           ;interruptHandler.c: 96: TMR2ON = 1;
 19471  003B88  84CA               	bsf	4042,2,c	;volatile
 19472  003B8A                     i2l10250:
 19473                           
 19474                           ;interruptHandler.c: 97: }
 19475                           ;interruptHandler.c: 98: }
 19476                           ;interruptHandler.c: 101: if(TMR3IF){
 19477  003B8A  A2A1               	btfss	4001,1,c	;volatile
 19478  003B8C  D022               	goto	i2l1053
 19479                           
 19480                           ;interruptHandler.c: 102: TMR3IF = 0;
 19481  003B8E  92A1               	bcf	4001,1,c	;volatile
 19482                           
 19483                           ;interruptHandler.c: 103: TMR3ON = 0;
 19484  003B90  90B1               	bcf	4017,0,c	;volatile
 19485                           
 19486                           ;interruptHandler.c: 104: if(machine_state == Sorting_state){
 19487  003B92  0100               	movlb	0	; () banked
 19488  003B94  05FC               	decf	_machine_state& (0+255),w,b
 19489  003B96  A4D8               	btfss	status,2,c
 19490  003B98  D01C               	goto	i2l1053
 19491                           
 19492                           ; BSR set to: 0
 19493                           ;interruptHandler.c: 105: if(was_low_3){
 19494  003B9A  507B               	movf	_was_low_3,w,c	;volatile
 19495  003B9C  107C               	iorwf	_was_low_3+1,w,c	;volatile
 19496  003B9E  B4D8               	btfsc	status,2,c
 19497  003BA0  D00A               	goto	i2l1051
 19498                           
 19499                           ; BSR set to: 0
 19500                           ;interruptHandler.c: 106: LATCbits.LATC2 = 1;
 19501  003BA2  848B               	bsf	3979,2,c	;volatile
 19502                           
 19503                           ; BSR set to: 0
 19504                           ;interruptHandler.c: 107: was_low_3 = 0;
 19505  003BA4  0E00               	movlw	0
 19506  003BA6  6E7C               	movwf	_was_low_3+1,c	;volatile
 19507  003BA8  0E00               	movlw	0
 19508  003BAA  6E7B               	movwf	_was_low_3,c	;volatile
 19509                           
 19510                           ; BSR set to: 0
 19511                           ;interruptHandler.c: 108: TMR3H = servoTimes[2];
 19512  003BAC  C05F  FFB3         	movff	_servoTimes+4,4019	;volatile
 19513                           
 19514                           ; BSR set to: 0
 19515                           ;interruptHandler.c: 109: TMR3L = servoTimes[3];
 19516  003BB0  C061  FFB2         	movff	_servoTimes+6,4018	;volatile
 19517                           
 19518                           ;interruptHandler.c: 110: }
 19519  003BB4  D00D               	goto	i2l10272
 19520  003BB6                     i2l1051:
 19521                           
 19522                           ; BSR set to: 0
 19523                           ;interruptHandler.c: 111: else{
 19524                           ;interruptHandler.c: 112: LATCbits.LATC2 = 0;
 19525  003BB6  948B               	bcf	3979,2,c	;volatile
 19526                           
 19527                           ; BSR set to: 0
 19528                           ;interruptHandler.c: 113: was_low_3 = 1;
 19529  003BB8  0E00               	movlw	0
 19530  003BBA  6E7C               	movwf	_was_low_3+1,c	;volatile
 19531  003BBC  0E01               	movlw	1
 19532  003BBE  6E7B               	movwf	_was_low_3,c	;volatile
 19533                           
 19534                           ; BSR set to: 0
 19535                           ;interruptHandler.c: 114: TMR3H = 20000 - servoTimes[2];
 19536  003BC0  505F               	movf	_servoTimes+4,w,c
 19537  003BC2  0800               	sublw	0
 19538  003BC4  0F20               	addlw	32
 19539  003BC6  6EB3               	movwf	4019,c	;volatile
 19540                           
 19541                           ; BSR set to: 0
 19542                           ;interruptHandler.c: 115: TMR3L = 20000 - servoTimes[3];
 19543  003BC8  5061               	movf	_servoTimes+6,w,c
 19544  003BCA  0800               	sublw	0
 19545  003BCC  0F20               	addlw	32
 19546  003BCE  6EB2               	movwf	4018,c	;volatile
 19547  003BD0                     i2l10272:
 19548                           
 19549                           ; BSR set to: 0
 19550                           ;interruptHandler.c: 116: }
 19551                           ;interruptHandler.c: 117: TMR3ON = 1;
 19552  003BD0  80B1               	bsf	4017,0,c	;volatile
 19553  003BD2                     i2l1053:
 19554  003BD2  C05A  FFF5         	movff	??_handler+15,tablat
 19555  003BD6  C059  FFF8         	movff	??_handler+14,tblptru
 19556  003BDA  C058  FFF7         	movff	??_handler+13,tblptrh
 19557  003BDE  C057  FFF6         	movff	??_handler+12,tblptrl
 19558  003BE2  C056  FFF4         	movff	??_handler+11,prodh
 19559  003BE6  C055  FFF3         	movff	??_handler+10,prodl
 19560  003BEA  C054  FFDA         	movff	??_handler+9,fsr2h
 19561  003BEE  C053  FFD9         	movff	??_handler+8,fsr2l
 19562  003BF2  C052  FFE2         	movff	??_handler+7,fsr1h
 19563  003BF6  C051  FFE1         	movff	??_handler+6,fsr1l
 19564  003BFA  C050  FFEA         	movff	??_handler+5,fsr0h
 19565  003BFE  C04F  FFE9         	movff	??_handler+4,fsr0l
 19566  003C02  C04E  FFFB         	movff	??_handler+3,pclatu
 19567  003C06  C04D  FFFA         	movff	??_handler+2,pclath
 19568  003C0A  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 19569  003C0C  0011               	retfie		f
 19570  003C0E                     __end_of_handler:
 19571                           	opt stack 0
 19572                           pclatu	equ	0xFFB
 19573                           pclath	equ	0xFFA
 19574                           tblptru	equ	0xFF8
 19575                           tblptrh	equ	0xFF7
 19576                           tblptrl	equ	0xFF6
 19577                           tablat	equ	0xFF5
 19578                           prodh	equ	0xFF4
 19579                           prodl	equ	0xFF3
 19580                           intcon	equ	0xFF2
 19581                           intcon2	equ	0xFF1
 19582                           intcon3	equ	0xFF0
 19583                           indf0	equ	0xFEF
 19584                           postinc0	equ	0xFEE
 19585                           fsr0h	equ	0xFEA
 19586                           fsr0l	equ	0xFE9
 19587                           wreg	equ	0xFE8
 19588                           postdec1	equ	0xFE5
 19589                           fsr1h	equ	0xFE2
 19590                           fsr1l	equ	0xFE1
 19591                           indf2	equ	0xFDF
 19592                           postinc2	equ	0xFDE
 19593                           postdec2	equ	0xFDD
 19594                           fsr2h	equ	0xFDA
 19595                           fsr2l	equ	0xFD9
 19596                           status	equ	0xFD8
 19597                           
 19598 ;; *************** function _updateServoStates *****************
 19599 ;; Defined at:
 19600 ;;		line 576 in file "sort.c"
 19601 ;; Parameters:    Size  Location     Type
 19602 ;;		None
 19603 ;; Auto vars:     Size  Location     Type
 19604 ;;		None
 19605 ;; Return value:  Size  Location     Type
 19606 ;;                  1    wreg      void 
 19607 ;; Registers used:
 19608 ;;		wreg, status,2, status,0, cstack
 19609 ;; Tracked objects:
 19610 ;;		On entry : 0/0
 19611 ;;		On exit  : 0/0
 19612 ;;		Unchanged: 0/0
 19613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19614 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19615 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19616 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19617 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19618 ;;Total ram usage:        2 bytes
 19619 ;; Hardware stack levels used:    1
 19620 ;; Hardware stack levels required when called:    1
 19621 ;; This function calls:
 19622 ;;		i2_updateServoPosition
 19623 ;; This function is called by:
 19624 ;;		_handler
 19625 ;; This function uses a non-reentrant model
 19626 ;;
 19627                           
 19628                           	psect	text65
 19629  003C0E                     __ptext65:
 19630                           	opt stack 0
 19631  003C0E                     _updateServoStates:
 19632                           	opt stack 22
 19633                           
 19634                           ;sort.c: 578: if(servo_timer_counter >= servo_timer_target){
 19635                           
 19636                           ;incstack = 0
 19637  003C0E  506F               	movf	_servo_timer_target,w,c	;volatile
 19638  003C10  5C6D               	subwf	_servo_timer_counter,w,c	;volatile
 19639  003C12  506E               	movf	_servo_timer_counter+1,w,c	;volatile
 19640  003C14  0A80               	xorlw	128
 19641  003C16  6E09               	movwf	??_updateServoStates& (0+255),c
 19642  003C18  5070               	movf	_servo_timer_target+1,w,c	;volatile
 19643  003C1A  0A80               	xorlw	128
 19644  003C1C  5809               	subwfb	??_updateServoStates& (0+255),w,c
 19645  003C1E  A0D8               	btfss	status,0,c
 19646  003C20  0012               	return	
 19647                           
 19648                           ;sort.c: 580: if(f_panning_to_bin){
 19649  003C22  5069               	movf	_f_panning_to_bin,w,c	;volatile
 19650  003C24  106A               	iorwf	_f_panning_to_bin+1,w,c	;volatile
 19651  003C26  A4D8               	btfss	status,2,c
 19652  003C28  D036               	goto	i2l10038
 19653  003C2A  D05F               	goto	i2l10042
 19654  003C2C                     i2l10012:
 19655                           
 19656                           ;sort.c: 584: updateServoPosition(1260, 3);
 19657  003C2C  0E04               	movlw	4
 19658  003C2E  6E02               	movwf	i2updateServoPosition@time_us+1,c
 19659  003C30  0EEC               	movlw	236
 19660  003C32  6E01               	movwf	i2updateServoPosition@time_us,c
 19661  003C34  0E00               	movlw	0
 19662  003C36  6E04               	movwf	i2updateServoPosition@timer+1,c
 19663  003C38  0E03               	movlw	3
 19664  003C3A  6E03               	movwf	i2updateServoPosition@timer,c
 19665  003C3C  EC92  F028         	call	i2_updateServoPosition	;wreg free
 19666  003C40  D025               	goto	i2l10032
 19667  003C42                     i2l10016:
 19668                           
 19669                           ;sort.c: 586: servo_timer_target = 700;
 19670  003C42  0E02               	movlw	2
 19671  003C44  6E70               	movwf	_servo_timer_target+1,c	;volatile
 19672  003C46  0EBC               	movlw	188
 19673  003C48  6E6F               	movwf	_servo_timer_target,c	;volatile
 19674                           
 19675                           ;sort.c: 587: break;
 19676  003C4A  D04A               	goto	i2l10040
 19677  003C4C                     i2l10018:
 19678                           
 19679                           ;sort.c: 589: updateServoPosition(1260, 3);
 19680  003C4C  0E04               	movlw	4
 19681  003C4E  6E02               	movwf	i2updateServoPosition@time_us+1,c
 19682  003C50  0EEC               	movlw	236
 19683  003C52  6E01               	movwf	i2updateServoPosition@time_us,c
 19684  003C54  0E00               	movlw	0
 19685  003C56  6E04               	movwf	i2updateServoPosition@timer+1,c
 19686  003C58  0E03               	movlw	3
 19687  003C5A  6E03               	movwf	i2updateServoPosition@timer,c
 19688  003C5C  EC92  F028         	call	i2_updateServoPosition	;wreg free
 19689  003C60  D015               	goto	i2l10032
 19690  003C62                     i2l10024:
 19691                           
 19692                           ;sort.c: 594: updateServoPosition(1390, 3);
 19693  003C62  0E05               	movlw	5
 19694  003C64  6E02               	movwf	i2updateServoPosition@time_us+1,c
 19695  003C66  0E6E               	movlw	110
 19696  003C68  6E01               	movwf	i2updateServoPosition@time_us,c
 19697  003C6A  0E00               	movlw	0
 19698  003C6C  6E04               	movwf	i2updateServoPosition@timer+1,c
 19699  003C6E  0E03               	movlw	3
 19700  003C70  6E03               	movwf	i2updateServoPosition@timer,c
 19701  003C72  EC92  F028         	call	i2_updateServoPosition	;wreg free
 19702  003C76  D00A               	goto	i2l10032
 19703  003C78                     i2l10030:
 19704                           
 19705                           ;sort.c: 599: updateServoPosition(1390, 3);
 19706  003C78  0E05               	movlw	5
 19707  003C7A  6E02               	movwf	i2updateServoPosition@time_us+1,c
 19708  003C7C  0E6E               	movlw	110
 19709  003C7E  6E01               	movwf	i2updateServoPosition@time_us,c
 19710  003C80  0E00               	movlw	0
 19711  003C82  6E04               	movwf	i2updateServoPosition@timer+1,c
 19712  003C84  0E03               	movlw	3
 19713  003C86  6E03               	movwf	i2updateServoPosition@timer,c
 19714  003C88  EC92  F028         	call	i2_updateServoPosition	;wreg free
 19715  003C8C                     i2l10032:
 19716                           
 19717                           ;sort.c: 600: servo_timer_counter = 0;
 19718  003C8C  0E00               	movlw	0
 19719  003C8E  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 19720  003C90  0E00               	movlw	0
 19721  003C92  6E6D               	movwf	_servo_timer_counter,c	;volatile
 19722  003C94  D7D6               	goto	i2l10016
 19723  003C96                     i2l10038:
 19724  003C96  C06B  F009         	movff	_pan_servo_state,??_updateServoStates	;volatile
 19725  003C9A  C06C  F00A         	movff	_pan_servo_state+1,??_updateServoStates+1	;volatile
 19726                           
 19727                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 4 sub-sw
      +                          itches
 19728                           ; Switch size 1, requested type "space"
 19729                           ; Number of cases is 4, Range of values is 1 to 9
 19730                           ; switch strategies available:
 19731                           ; Name         Instructions Cycles
 19732                           ; simple_byte           13     7 (average)
 19733                           ;	Chosen strategy is simple_byte
 19734  003C9E  500A               	movf	??_updateServoStates+1,w,c
 19735  003CA0  0A01               	xorlw	1	; case 1
 19736  003CA2  B4D8               	btfsc	status,2,c
 19737  003CA4  D00A               	goto	i2l10720
 19738  003CA6  0A02               	xorlw	2	; case 3
 19739  003CA8  B4D8               	btfsc	status,2,c
 19740  003CAA  D00C               	goto	i2l10722
 19741  003CAC  0A05               	xorlw	5	; case 6
 19742  003CAE  B4D8               	btfsc	status,2,c
 19743  003CB0  D00E               	goto	i2l10724
 19744  003CB2  0A0F               	xorlw	15	; case 9
 19745  003CB4  B4D8               	btfsc	status,2,c
 19746  003CB6  D010               	goto	i2l10726
 19747  003CB8  D013               	goto	i2l10040
 19748  003CBA                     i2l10720:
 19749                           
 19750                           ; Switch size 1, requested type "space"
 19751                           ; Number of cases is 1, Range of values is 244 to 244
 19752                           ; switch strategies available:
 19753                           ; Name         Instructions Cycles
 19754                           ; simple_byte            4     3 (average)
 19755                           ;	Chosen strategy is simple_byte
 19756  003CBA  5009               	movf	??_updateServoStates,w,c
 19757  003CBC  0AF4               	xorlw	244	; case 244
 19758  003CBE  B4D8               	btfsc	status,2,c
 19759  003CC0  D7B5               	goto	i2l10012
 19760  003CC2  D00E               	goto	i2l10040
 19761  003CC4                     i2l10722:
 19762                           
 19763                           ; Switch size 1, requested type "space"
 19764                           ; Number of cases is 1, Range of values is 82 to 82
 19765                           ; switch strategies available:
 19766                           ; Name         Instructions Cycles
 19767                           ; simple_byte            4     3 (average)
 19768                           ;	Chosen strategy is simple_byte
 19769  003CC4  5009               	movf	??_updateServoStates,w,c
 19770  003CC6  0A52               	xorlw	82	; case 82
 19771  003CC8  B4D8               	btfsc	status,2,c
 19772  003CCA  D7C0               	goto	i2l10018
 19773  003CCC  D009               	goto	i2l10040
 19774  003CCE                     i2l10724:
 19775                           
 19776                           ; Switch size 1, requested type "space"
 19777                           ; Number of cases is 1, Range of values is 134 to 134
 19778                           ; switch strategies available:
 19779                           ; Name         Instructions Cycles
 19780                           ; simple_byte            4     3 (average)
 19781                           ;	Chosen strategy is simple_byte
 19782  003CCE  5009               	movf	??_updateServoStates,w,c
 19783  003CD0  0A86               	xorlw	134	; case 134
 19784  003CD2  B4D8               	btfsc	status,2,c
 19785  003CD4  D7C6               	goto	i2l10024
 19786  003CD6  D004               	goto	i2l10040
 19787  003CD8                     i2l10726:
 19788                           
 19789                           ; Switch size 1, requested type "space"
 19790                           ; Number of cases is 1, Range of values is 96 to 96
 19791                           ; switch strategies available:
 19792                           ; Name         Instructions Cycles
 19793                           ; simple_byte            4     3 (average)
 19794                           ;	Chosen strategy is simple_byte
 19795  003CD8  5009               	movf	??_updateServoStates,w,c
 19796  003CDA  0A60               	xorlw	96	; case 96
 19797  003CDC  B4D8               	btfsc	status,2,c
 19798  003CDE  D7CC               	goto	i2l10030
 19799  003CE0                     i2l10040:
 19800                           
 19801                           ;sort.c: 606: f_panning_to_bin = 0;
 19802  003CE0  0E00               	movlw	0
 19803  003CE2  6E6A               	movwf	_f_panning_to_bin+1,c	;volatile
 19804  003CE4  0E00               	movlw	0
 19805  003CE6  6E69               	movwf	_f_panning_to_bin,c	;volatile
 19806                           
 19807                           ;sort.c: 607: }
 19808  003CE8  0012               	return	
 19809  003CEA                     i2l10042:
 19810                           
 19811                           ;sort.c: 608: else if(pan_servo_state == 1200){
 19812  003CEA  0EB0               	movlw	176
 19813  003CEC  186B               	xorwf	_pan_servo_state,w,c	;volatile
 19814  003CEE  E15A               	bnz	i2l10072
 19815  003CF0  0E04               	movlw	4
 19816  003CF2  186C               	xorwf	_pan_servo_state+1,w,c	;volatile
 19817  003CF4  A4D8               	btfss	status,2,c
 19818  003CF6  D056               	goto	i2l10072
 19819                           
 19820                           ;sort.c: 610: servo_timer_counter = 0;
 19821  003CF8  0E00               	movlw	0
 19822  003CFA  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 19823  003CFC  0E00               	movlw	0
 19824  003CFE  6E6D               	movwf	_servo_timer_counter,c	;volatile
 19825                           
 19826                           ;sort.c: 611: }
 19827  003D00  0012               	return	
 19828  003D02                     i2l10046:
 19829                           
 19830                           ;sort.c: 616: updateServoPosition(1050, 3);
 19831  003D02  0E04               	movlw	4
 19832  003D04  6E02               	movwf	i2updateServoPosition@time_us+1,c
 19833  003D06  0E1A               	movlw	26
 19834  003D08  6E01               	movwf	i2updateServoPosition@time_us,c
 19835  003D0A  0E00               	movlw	0
 19836  003D0C  6E04               	movwf	i2updateServoPosition@timer+1,c
 19837  003D0E  0E03               	movlw	3
 19838  003D10  6E03               	movwf	i2updateServoPosition@timer,c
 19839  003D12  EC92  F028         	call	i2_updateServoPosition	;wreg free
 19840                           
 19841                           ;sort.c: 617: servo_timer_counter = 0;
 19842  003D16  0E00               	movlw	0
 19843  003D18  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 19844  003D1A  0E00               	movlw	0
 19845  003D1C  6E6D               	movwf	_servo_timer_counter,c	;volatile
 19846                           
 19847                           ;sort.c: 618: servo_timer_target = 750;
 19848  003D1E  0E02               	movlw	2
 19849  003D20  6E70               	movwf	_servo_timer_target+1,c	;volatile
 19850  003D22  0EEE               	movlw	238
 19851  003D24  6E6F               	movwf	_servo_timer_target,c	;volatile
 19852                           
 19853                           ;sort.c: 619: break;
 19854  003D26  0012               	return	
 19855  003D28                     i2l10052:
 19856                           
 19857                           ;sort.c: 621: updateServoPosition(1050, 3);
 19858  003D28  0E04               	movlw	4
 19859  003D2A  6E02               	movwf	i2updateServoPosition@time_us+1,c
 19860  003D2C  0E1A               	movlw	26
 19861  003D2E  6E01               	movwf	i2updateServoPosition@time_us,c
 19862  003D30  0E00               	movlw	0
 19863  003D32  6E04               	movwf	i2updateServoPosition@timer+1,c
 19864  003D34  0E03               	movlw	3
 19865  003D36  6E03               	movwf	i2updateServoPosition@timer,c
 19866  003D38  EC92  F028         	call	i2_updateServoPosition	;wreg free
 19867                           
 19868                           ;sort.c: 622: servo_timer_counter = 0;
 19869  003D3C  0E00               	movlw	0
 19870  003D3E  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 19871  003D40  0E00               	movlw	0
 19872  003D42  6E6D               	movwf	_servo_timer_counter,c	;volatile
 19873                           
 19874                           ;sort.c: 623: servo_timer_target = 750;
 19875  003D44  0E02               	movlw	2
 19876  003D46  6E70               	movwf	_servo_timer_target+1,c	;volatile
 19877  003D48  0EEE               	movlw	238
 19878  003D4A  6E6F               	movwf	_servo_timer_target,c	;volatile
 19879                           
 19880                           ;sort.c: 624: break;
 19881  003D4C  0012               	return	
 19882  003D4E                     i2l10058:
 19883                           
 19884                           ;sort.c: 627: updateServoPosition(1200, 1);
 19885  003D4E  0E04               	movlw	4
 19886  003D50  6E02               	movwf	i2updateServoPosition@time_us+1,c
 19887  003D52  0EB0               	movlw	176
 19888  003D54  6E01               	movwf	i2updateServoPosition@time_us,c
 19889  003D56  0E00               	movlw	0
 19890  003D58  6E04               	movwf	i2updateServoPosition@timer+1,c
 19891  003D5A  0E01               	movlw	1
 19892  003D5C  6E03               	movwf	i2updateServoPosition@timer,c
 19893  003D5E  EC92  F028         	call	i2_updateServoPosition	;wreg free
 19894                           
 19895                           ;sort.c: 628: updateServoPosition(1050, 3);
 19896  003D62  0E04               	movlw	4
 19897  003D64  6E02               	movwf	i2updateServoPosition@time_us+1,c
 19898  003D66  0E1A               	movlw	26
 19899  003D68  6E01               	movwf	i2updateServoPosition@time_us,c
 19900  003D6A  0E00               	movlw	0
 19901  003D6C  6E04               	movwf	i2updateServoPosition@timer+1,c
 19902  003D6E  0E03               	movlw	3
 19903  003D70  6E03               	movwf	i2updateServoPosition@timer,c
 19904  003D72  EC92  F028         	call	i2_updateServoPosition	;wreg free
 19905                           
 19906                           ;sort.c: 629: servo_timer_counter = 0;
 19907  003D76  0E00               	movlw	0
 19908  003D78  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 19909  003D7A  0E00               	movlw	0
 19910  003D7C  6E6D               	movwf	_servo_timer_counter,c	;volatile
 19911                           
 19912                           ;sort.c: 630: servo_timer_target = 9999;
 19913  003D7E  0E27               	movlw	39
 19914  003D80  6E70               	movwf	_servo_timer_target+1,c	;volatile
 19915  003D82  0E0F               	movlw	15
 19916  003D84  6E6F               	movwf	_servo_timer_target,c	;volatile
 19917                           
 19918                           ;sort.c: 632: f_can_distributed = 1;
 19919  003D86  0E00               	movlw	0
 19920  003D88  0101               	movlb	1	; () banked
 19921  003D8A  6F36               	movwf	(_f_can_distributed+1)& (0+255),b
 19922  003D8C  0E01               	movlw	1
 19923  003D8E  6F35               	movwf	_f_can_distributed& (0+255),b
 19924                           
 19925                           ; BSR set to: 1
 19926                           ;sort.c: 633: if(f_lastCan == 1){
 19927  003D90  0100               	movlb	0	; () banked
 19928  003D92  05EA               	decf	_f_lastCan& (0+255),w,b
 19929  003D94  0100               	movlb	0	; () banked
 19930  003D96  11EB               	iorwf	(_f_lastCan+1)& (0+255),w,b
 19931  003D98  A4D8               	btfss	status,2,c
 19932  003D9A  0012               	return	
 19933                           
 19934                           ; BSR set to: 0
 19935                           ;sort.c: 634: machine_state = DoneSorting_state;
 19936  003D9C  0E02               	movlw	2
 19937  003D9E  0100               	movlb	0	; () banked
 19938  003DA0  6FFC               	movwf	_machine_state& (0+255),b
 19939                           
 19940                           ; BSR set to: 0
 19941                           ;sort.c: 640: }
 19942                           
 19943                           ; BSR set to: 0
 19944                           ;sort.c: 639: break;
 19945                           
 19946                           ;sort.c: 638: default:
 19947                           
 19948                           ; BSR set to: 0
 19949                           ;sort.c: 635: }
 19950                           ;sort.c: 636: break;
 19951  003DA2  0012               	return	
 19952  003DA4                     i2l10072:
 19953  003DA4  C071  F009         	movff	_tilt_servo_state,??_updateServoStates	;volatile
 19954  003DA8  C072  F00A         	movff	_tilt_servo_state+1,??_updateServoStates+1	;volatile
 19955                           
 19956                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 19957                           ; Switch size 1, requested type "space"
 19958                           ; Number of cases is 2, Range of values is 4 to 5
 19959                           ; switch strategies available:
 19960                           ; Name         Instructions Cycles
 19961                           ; simple_byte            7     4 (average)
 19962                           ;	Chosen strategy is simple_byte
 19963  003DAC  500A               	movf	??_updateServoStates+1,w,c
 19964  003DAE  0A04               	xorlw	4	; case 4
 19965  003DB0  B4D8               	btfsc	status,2,c
 19966  003DB2  D004               	goto	i2l10728
 19967  003DB4  0A01               	xorlw	1	; case 5
 19968  003DB6  A4D8               	btfss	status,2,c
 19969  003DB8  0012               	return	
 19970  003DBA  D008               	goto	i2l10730
 19971  003DBC                     i2l10728:
 19972                           
 19973                           ; Switch size 1, requested type "space"
 19974                           ; Number of cases is 2, Range of values is 26 to 236
 19975                           ; switch strategies available:
 19976                           ; Name         Instructions Cycles
 19977                           ; simple_byte            7     4 (average)
 19978                           ;	Chosen strategy is simple_byte
 19979  003DBC  5009               	movf	??_updateServoStates,w,c
 19980  003DBE  0A1A               	xorlw	26	; case 26
 19981  003DC0  B4D8               	btfsc	status,2,c
 19982  003DC2  D7C5               	goto	i2l10058
 19983  003DC4  0AF6               	xorlw	246	; case 236
 19984  003DC6  A4D8               	btfss	status,2,c
 19985  003DC8  0012               	return	
 19986  003DCA  D79B               	goto	i2l10046
 19987  003DCC                     i2l10730:
 19988                           
 19989                           ; Switch size 1, requested type "space"
 19990                           ; Number of cases is 1, Range of values is 110 to 110
 19991                           ; switch strategies available:
 19992                           ; Name         Instructions Cycles
 19993                           ; simple_byte            4     3 (average)
 19994                           ;	Chosen strategy is simple_byte
 19995  003DCC  5009               	movf	??_updateServoStates,w,c
 19996  003DCE  0A6E               	xorlw	110	; case 110
 19997  003DD0  A4D8               	btfss	status,2,c
 19998  003DD2  0012               	return	
 19999  003DD4  D7A9               	goto	i2l10052
 20000  003DD6                     __end_of_updateServoStates:
 20001                           	opt stack 0
 20002                           pclatu	equ	0xFFB
 20003                           pclath	equ	0xFFA
 20004                           tblptru	equ	0xFF8
 20005                           tblptrh	equ	0xFF7
 20006                           tblptrl	equ	0xFF6
 20007                           tablat	equ	0xFF5
 20008                           prodh	equ	0xFF4
 20009                           prodl	equ	0xFF3
 20010                           intcon	equ	0xFF2
 20011                           intcon2	equ	0xFF1
 20012                           intcon3	equ	0xFF0
 20013                           indf0	equ	0xFEF
 20014                           postinc0	equ	0xFEE
 20015                           fsr0h	equ	0xFEA
 20016                           fsr0l	equ	0xFE9
 20017                           wreg	equ	0xFE8
 20018                           postdec1	equ	0xFE5
 20019                           fsr1h	equ	0xFE2
 20020                           fsr1l	equ	0xFE1
 20021                           indf2	equ	0xFDF
 20022                           postinc2	equ	0xFDE
 20023                           postdec2	equ	0xFDD
 20024                           fsr2h	equ	0xFDA
 20025                           fsr2l	equ	0xFD9
 20026                           status	equ	0xFD8
 20027                           
 20028 ;; *************** function i2_updateServoPosition *****************
 20029 ;; Defined at:
 20030 ;;		line 561 in file "sort.c"
 20031 ;; Parameters:    Size  Location     Type
 20032 ;;  time_us         2    0[COMRAM] int 
 20033 ;;  timer           2    2[COMRAM] int 
 20034 ;; Auto vars:     Size  Location     Type
 20035 ;;  updateServoP    2    6[COMRAM] unsigned int 
 20036 ;; Return value:  Size  Location     Type
 20037 ;;                  1    wreg      void 
 20038 ;; Registers used:
 20039 ;;		wreg, status,2, status,0
 20040 ;; Tracked objects:
 20041 ;;		On entry : 0/0
 20042 ;;		On exit  : 0/0
 20043 ;;		Unchanged: 0/0
 20044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20045 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20046 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20047 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20048 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20049 ;;Total ram usage:        8 bytes
 20050 ;; Hardware stack levels used:    1
 20051 ;; This function calls:
 20052 ;;		Nothing
 20053 ;; This function is called by:
 20054 ;;		_updateServoStates
 20055 ;; This function uses a non-reentrant model
 20056 ;;
 20057                           
 20058                           	psect	text66
 20059  005124                     __ptext66:
 20060                           	opt stack 0
 20061  005124                     i2_updateServoPosition:
 20062                           	opt stack 22
 20063                           
 20064                           ;sort.c: 562: unsigned int my_time = 65535 - time_us;
 20065                           
 20066                           ;incstack = 0
 20067  005124  C001  F005         	movff	i2updateServoPosition@time_us,??i2_updateServoPosition
 20068  005128  C002  F006         	movff	i2updateServoPosition@time_us+1,??i2_updateServoPosition+1
 20069  00512C  1E05               	comf	??i2_updateServoPosition,f,c
 20070  00512E  1E06               	comf	??i2_updateServoPosition+1,f,c
 20071  005130  4A05               	infsnz	??i2_updateServoPosition,f,c
 20072  005132  2A06               	incf	??i2_updateServoPosition+1,f,c
 20073  005134  0EFF               	movlw	255
 20074  005136  2405               	addwf	??i2_updateServoPosition,w,c
 20075  005138  6E07               	movwf	i2updateServoPosition@my_time,c
 20076  00513A  0EFF               	movlw	255
 20077  00513C  2006               	addwfc	??i2_updateServoPosition+1,w,c
 20078  00513E  6E08               	movwf	i2updateServoPosition@my_time+1,c
 20079                           
 20080                           ;sort.c: 563: switch(timer){
 20081  005140  D015               	goto	i2l9228
 20082  005142                     i2l9222:
 20083                           
 20084                           ;sort.c: 565: servoTimes[0] = my_time >> 8;
 20085  005142  5008               	movf	i2updateServoPosition@my_time+1,w,c
 20086  005144  6E5B               	movwf	_servoTimes,c
 20087  005146  6A5C               	clrf	_servoTimes+1,c
 20088                           
 20089                           ;sort.c: 566: servoTimes[1] = my_time & 0xFF;
 20090  005148  5007               	movf	i2updateServoPosition@my_time,w,c
 20091  00514A  6E5D               	movwf	_servoTimes+2,c
 20092  00514C  6A5E               	clrf	_servoTimes+3,c
 20093                           
 20094                           ;sort.c: 568: pan_servo_state = time_us;
 20095  00514E  C001  F06B         	movff	i2updateServoPosition@time_us,_pan_servo_state	;volatile
 20096  005152  C002  F06C         	movff	i2updateServoPosition@time_us+1,_pan_servo_state+1	;volatile
 20097  005156                     i2l923:
 20098                           
 20099                           ;sort.c: 570: servoTimes[2] = my_time >> 8;
 20100  005156  5008               	movf	i2updateServoPosition@my_time+1,w,c
 20101  005158  6E5F               	movwf	_servoTimes+4,c
 20102  00515A  6A60               	clrf	_servoTimes+5,c
 20103                           
 20104                           ;sort.c: 571: servoTimes[3] = my_time & 0xFF;
 20105  00515C  5007               	movf	i2updateServoPosition@my_time,w,c
 20106  00515E  6E61               	movwf	_servoTimes+6,c
 20107  005160  6A62               	clrf	_servoTimes+7,c
 20108                           
 20109                           ;sort.c: 573: tilt_servo_state = time_us;
 20110  005162  C001  F071         	movff	i2updateServoPosition@time_us,_tilt_servo_state	;volatile
 20111  005166  C002  F072         	movff	i2updateServoPosition@time_us+1,_tilt_servo_state+1	;volatile
 20112                           
 20113                           ;sort.c: 574: }
 20114  00516A  0012               	return	
 20115  00516C                     i2l9228:
 20116  00516C  C003  F005         	movff	i2updateServoPosition@timer,??i2_updateServoPosition
 20117  005170  C004  F006         	movff	i2updateServoPosition@timer+1,??i2_updateServoPosition+1
 20118                           
 20119                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 20120                           ; Switch size 1, requested type "space"
 20121                           ; Number of cases is 1, Range of values is 0 to 0
 20122                           ; switch strategies available:
 20123                           ; Name         Instructions Cycles
 20124                           ; simple_byte            4     3 (average)
 20125                           ;	Chosen strategy is simple_byte
 20126  005174  5006               	movf	??i2_updateServoPosition+1,w,c
 20127  005176  0A00               	xorlw	0	; case 0
 20128  005178  A4D8               	btfss	status,2,c
 20129  00517A  0012               	return	
 20130                           
 20131                           ; Switch size 1, requested type "space"
 20132                           ; Number of cases is 2, Range of values is 1 to 3
 20133                           ; switch strategies available:
 20134                           ; Name         Instructions Cycles
 20135                           ; simple_byte            7     4 (average)
 20136                           ;	Chosen strategy is simple_byte
 20137  00517C  5005               	movf	??i2_updateServoPosition,w,c
 20138  00517E  0A01               	xorlw	1	; case 1
 20139  005180  B4D8               	btfsc	status,2,c
 20140  005182  D7DF               	goto	i2l9222
 20141  005184  0A02               	xorlw	2	; case 3
 20142  005186  A4D8               	btfss	status,2,c
 20143  005188  0012               	return	
 20144  00518A  D7E5               	goto	i2l923
 20145  00518C                     __end_ofi2_updateServoPosition:
 20146                           	opt stack 0
 20147                           pclatu	equ	0xFFB
 20148                           pclath	equ	0xFFA
 20149                           tblptru	equ	0xFF8
 20150                           tblptrh	equ	0xFF7
 20151                           tblptrl	equ	0xFF6
 20152                           tablat	equ	0xFF5
 20153                           prodh	equ	0xFF4
 20154                           prodl	equ	0xFF3
 20155                           intcon	equ	0xFF2
 20156                           intcon2	equ	0xFF1
 20157                           intcon3	equ	0xFF0
 20158                           indf0	equ	0xFEF
 20159                           postinc0	equ	0xFEE
 20160                           fsr0h	equ	0xFEA
 20161                           fsr0l	equ	0xFE9
 20162                           wreg	equ	0xFE8
 20163                           postdec1	equ	0xFE5
 20164                           fsr1h	equ	0xFE2
 20165                           fsr1l	equ	0xFE1
 20166                           indf2	equ	0xFDF
 20167                           postinc2	equ	0xFDE
 20168                           postdec2	equ	0xFDD
 20169                           fsr2h	equ	0xFDA
 20170                           fsr2l	equ	0xFD9
 20171                           status	equ	0xFD8
 20172                           
 20173 ;; *************** function _updateMenu *****************
 20174 ;; Defined at:
 20175 ;;		line 216 in file "UI.c"
 20176 ;; Parameters:    Size  Location     Type
 20177 ;;		None
 20178 ;; Auto vars:     Size  Location     Type
 20179 ;;		None
 20180 ;; Return value:  Size  Location     Type
 20181 ;;                  1    wreg      void 
 20182 ;; Registers used:
 20183 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20184 ;; Tracked objects:
 20185 ;;		On entry : 0/0
 20186 ;;		On exit  : 0/0
 20187 ;;		Unchanged: 0/0
 20188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20189 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20190 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20191 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20192 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20193 ;;Total ram usage:        2 bytes
 20194 ;; Hardware stack levels used:    1
 20195 ;; Hardware stack levels required when called:    5
 20196 ;; This function calls:
 20197 ;;		_change_state_to_logs_11
 20198 ;;		_change_state_to_logs_12
 20199 ;;		_change_state_to_logs_22
 20200 ;;		_change_state_to_logs_23
 20201 ;;		_change_state_to_logs_33
 20202 ;;		_change_state_to_logs_34
 20203 ;;		_change_state_to_menu_11
 20204 ;;		_change_state_to_menu_23
 20205 ;;		_dispLogs
 20206 ;;		_inputHandler
 20207 ;;		i2_change_state_to_menu_12
 20208 ;;		i2_change_state_to_menu_22
 20209 ;;		i2_change_state_to_menu_start
 20210 ;; This function is called by:
 20211 ;;		_handler
 20212 ;; This function uses a non-reentrant model
 20213 ;;
 20214                           
 20215                           	psect	text67
 20216  00309E                     __ptext67:
 20217                           	opt stack 0
 20218  00309E                     _updateMenu:
 20219                           	opt stack 18
 20220                           
 20221                           ;UI.c: 217: up = 0; down = 0; enter = 0; back = 0;
 20222                           
 20223                           ;incstack = 0
 20224  00309E  0E00               	movlw	0
 20225  0030A0  6E76               	movwf	_up+1,c
 20226  0030A2  0E00               	movlw	0
 20227  0030A4  6E75               	movwf	_up,c
 20228  0030A6  0E00               	movlw	0
 20229  0030A8  6E66               	movwf	_down+1,c
 20230  0030AA  0E00               	movlw	0
 20231  0030AC  6E65               	movwf	_down,c
 20232  0030AE  0E00               	movlw	0
 20233  0030B0  6E68               	movwf	_enter+1,c
 20234  0030B2  0E00               	movlw	0
 20235  0030B4  6E67               	movwf	_enter,c
 20236  0030B6  0E00               	movlw	0
 20237  0030B8  6E64               	movwf	_back+1,c
 20238  0030BA  0E00               	movlw	0
 20239  0030BC  6E63               	movwf	_back,c
 20240                           
 20241                           ;UI.c: 218: (INTCONbits.GIE = 0);
 20242  0030BE  9EF2               	bcf	intcon,7,c	;volatile
 20243                           
 20244                           ;UI.c: 220: if (inputHandler()
 20245                           ;UI.c: 223: ){
 20246  0030C0  EC1C  F01C         	call	_inputHandler	;wreg free
 20247  0030C4  502A               	movf	?_inputHandler,w,c
 20248  0030C6  102B               	iorwf	?_inputHandler+1,w,c
 20249  0030C8  A4D8               	btfss	status,2,c
 20250  0030CA  D112               	goto	i2l9762
 20251  0030CC  D146               	goto	i2l268
 20252  0030CE                     i2l9614:
 20253                           
 20254                           ;UI.c: 227: change_state_to_menu_11();
 20255  0030CE  EC27  F02C         	call	_change_state_to_menu_11	;wreg free
 20256                           
 20257                           ;UI.c: 228: break;
 20258  0030D2  D143               	goto	i2l268
 20259  0030D4                     i2l9616:
 20260                           
 20261                           ;UI.c: 231: if(up){
 20262  0030D4  5075               	movf	_up,w,c
 20263  0030D6  1076               	iorwf	_up+1,w,c
 20264  0030D8  B4D8               	btfsc	status,2,c
 20265  0030DA  D003               	goto	i2l9620
 20266                           
 20267                           ;UI.c: 232: change_state_to_menu_23();
 20268  0030DC  EC0F  F02C         	call	_change_state_to_menu_23	;wreg free
 20269                           
 20270                           ;UI.c: 233: }
 20271  0030E0  D13C               	goto	i2l268
 20272  0030E2                     i2l9620:
 20273                           
 20274                           ;UI.c: 234: else if(down){
 20275  0030E2  5065               	movf	_down,w,c
 20276  0030E4  1066               	iorwf	_down+1,w,c
 20277  0030E6  B4D8               	btfsc	status,2,c
 20278  0030E8  D003               	goto	i2l9624
 20279                           
 20280                           ;UI.c: 235: change_state_to_menu_12();
 20281  0030EA  ECF7  F02B         	call	i2_change_state_to_menu_12	;wreg free
 20282                           
 20283                           ;UI.c: 236: }
 20284  0030EE  D135               	goto	i2l268
 20285  0030F0                     i2l9624:
 20286                           
 20287                           ;UI.c: 237: else if(enter){
 20288  0030F0  5067               	movf	_enter,w,c
 20289  0030F2  1068               	iorwf	_enter+1,w,c
 20290  0030F4  B4D8               	btfsc	status,2,c
 20291  0030F6  D131               	goto	i2l268
 20292                           
 20293                           ;UI.c: 238: change_state_to_menu_start();
 20294  0030F8  EC3A  F02D         	call	i2_change_state_to_menu_start	;wreg free
 20295                           
 20296                           ;UI.c: 239: }
 20297                           ;UI.c: 240: break;
 20298  0030FC  D12E               	goto	i2l268
 20299  0030FE                     i2l9628:
 20300                           
 20301                           ;UI.c: 243: if(up){
 20302  0030FE  5075               	movf	_up,w,c
 20303  003100  1076               	iorwf	_up+1,w,c
 20304  003102  B4D8               	btfsc	status,2,c
 20305  003104  D003               	goto	i2l9632
 20306                           
 20307                           ;UI.c: 244: change_state_to_menu_11();
 20308  003106  EC27  F02C         	call	_change_state_to_menu_11	;wreg free
 20309                           
 20310                           ;UI.c: 245: }
 20311  00310A  D127               	goto	i2l268
 20312  00310C                     i2l9632:
 20313                           
 20314                           ;UI.c: 246: else if(down){
 20315  00310C  5065               	movf	_down,w,c
 20316  00310E  1066               	iorwf	_down+1,w,c
 20317  003110  B4D8               	btfsc	status,2,c
 20318  003112  D011               	goto	i2l9648
 20319                           
 20320                           ;UI.c: 247: change_state_to_menu_23();
 20321  003114  EC0F  F02C         	call	_change_state_to_menu_23	;wreg free
 20322                           
 20323                           ;UI.c: 248: }
 20324  003118  D120               	goto	i2l268
 20325  00311A                     i2l9640:
 20326                           
 20327                           ;UI.c: 255: if(up){
 20328  00311A  5075               	movf	_up,w,c
 20329  00311C  1076               	iorwf	_up+1,w,c
 20330  00311E  B4D8               	btfsc	status,2,c
 20331  003120  D003               	goto	i2l9644
 20332                           
 20333                           ;UI.c: 256: change_state_to_menu_11();
 20334  003122  EC27  F02C         	call	_change_state_to_menu_11	;wreg free
 20335                           
 20336                           ;UI.c: 257: }
 20337  003126  D119               	goto	i2l268
 20338  003128                     i2l9644:
 20339                           
 20340                           ;UI.c: 258: else if(down){
 20341  003128  5065               	movf	_down,w,c
 20342  00312A  1066               	iorwf	_down+1,w,c
 20343  00312C  B4D8               	btfsc	status,2,c
 20344  00312E  D003               	goto	i2l9648
 20345                           
 20346                           ;UI.c: 259: change_state_to_menu_23();
 20347  003130  EC0F  F02C         	call	_change_state_to_menu_23	;wreg free
 20348                           
 20349                           ;UI.c: 260: }
 20350  003134  D112               	goto	i2l268
 20351  003136                     i2l9648:
 20352                           
 20353                           ;UI.c: 261: else if(enter){
 20354  003136  5067               	movf	_enter,w,c
 20355  003138  1068               	iorwf	_enter+1,w,c
 20356  00313A  B4D8               	btfsc	status,2,c
 20357  00313C  D10E               	goto	i2l268
 20358                           
 20359                           ;UI.c: 262: machine_state = Sorting_state;
 20360  00313E  0E01               	movlw	1
 20361  003140  0100               	movlb	0	; () banked
 20362  003142  6FFC               	movwf	_machine_state& (0+255),b
 20363                           
 20364                           ; BSR set to: 0
 20365                           ;UI.c: 263: }
 20366                           ;UI.c: 264: break;
 20367                           
 20368                           ; BSR set to: 0
 20369                           
 20370                           ; BSR set to: 0
 20371  003144  D10A               	goto	i2l268
 20372  003146                     i2l9652:
 20373                           
 20374                           ;UI.c: 267: if(up){
 20375  003146  5075               	movf	_up,w,c
 20376  003148  1076               	iorwf	_up+1,w,c
 20377  00314A  B4D8               	btfsc	status,2,c
 20378  00314C  D003               	goto	i2l9656
 20379                           
 20380                           ;UI.c: 268: change_state_to_menu_22();
 20381  00314E  ECDF  F02B         	call	i2_change_state_to_menu_22	;wreg free
 20382                           
 20383                           ;UI.c: 269: }
 20384  003152  D103               	goto	i2l268
 20385  003154                     i2l9656:
 20386                           
 20387                           ;UI.c: 270: else if(down){
 20388  003154  5065               	movf	_down,w,c
 20389  003156  1066               	iorwf	_down+1,w,c
 20390  003158  B4D8               	btfsc	status,2,c
 20391  00315A  D003               	goto	i2l9660
 20392                           
 20393                           ;UI.c: 271: change_state_to_menu_11();
 20394  00315C  EC27  F02C         	call	_change_state_to_menu_11	;wreg free
 20395                           
 20396                           ;UI.c: 272: }
 20397  003160  D0FC               	goto	i2l268
 20398  003162                     i2l9660:
 20399                           
 20400                           ;UI.c: 273: else if(enter){
 20401  003162  5067               	movf	_enter,w,c
 20402  003164  1068               	iorwf	_enter+1,w,c
 20403  003166  B4D8               	btfsc	status,2,c
 20404  003168  D0F8               	goto	i2l268
 20405                           
 20406                           ;UI.c: 274: change_state_to_logs_11();
 20407  00316A  EC9F  F02C         	call	_change_state_to_logs_11	;wreg free
 20408                           
 20409                           ;UI.c: 275: }
 20410                           ;UI.c: 276: break;
 20411  00316E  D0F5               	goto	i2l268
 20412  003170                     i2l9664:
 20413                           
 20414                           ;UI.c: 279: if(up){
 20415  003170  5075               	movf	_up,w,c
 20416  003172  1076               	iorwf	_up+1,w,c
 20417  003174  B4D8               	btfsc	status,2,c
 20418  003176  D003               	goto	i2l9668
 20419                           
 20420                           ;UI.c: 280: change_state_to_logs_34();
 20421  003178  EC3F  F02C         	call	_change_state_to_logs_34	;wreg free
 20422                           
 20423                           ;UI.c: 281: }
 20424  00317C  D0EE               	goto	i2l268
 20425  00317E                     i2l9668:
 20426                           
 20427                           ;UI.c: 282: else if(down){
 20428  00317E  5065               	movf	_down,w,c
 20429  003180  1066               	iorwf	_down+1,w,c
 20430  003182  B4D8               	btfsc	status,2,c
 20431  003184  D003               	goto	i2l9672
 20432                           
 20433                           ;UI.c: 283: change_state_to_logs_12();
 20434  003186  EC87  F02C         	call	_change_state_to_logs_12	;wreg free
 20435                           
 20436                           ;UI.c: 284: }
 20437  00318A  D0E7               	goto	i2l268
 20438  00318C                     i2l9672:
 20439                           
 20440                           ;UI.c: 285: else if(enter){
 20441  00318C  5067               	movf	_enter,w,c
 20442  00318E  1068               	iorwf	_enter+1,w,c
 20443  003190  B4D8               	btfsc	status,2,c
 20444  003192  D007               	goto	i2l9676
 20445                           
 20446                           ;UI.c: 286: dispLogs(1);
 20447  003194  0E00               	movlw	0
 20448  003196  6E13               	movwf	dispLogs@myLog+1,c
 20449  003198  0E01               	movlw	1
 20450  00319A  6E12               	movwf	dispLogs@myLog,c
 20451  00319C  EC74  F02D         	call	_dispLogs	;wreg free
 20452                           
 20453                           ;UI.c: 287: }
 20454  0031A0  D0DC               	goto	i2l268
 20455  0031A2                     i2l9676:
 20456                           
 20457                           ;UI.c: 288: else if(back){
 20458  0031A2  5063               	movf	_back,w,c
 20459  0031A4  1064               	iorwf	_back+1,w,c
 20460  0031A6  B4D8               	btfsc	status,2,c
 20461  0031A8  D0D8               	goto	i2l268
 20462                           
 20463                           ;UI.c: 289: change_state_to_menu_23();
 20464  0031AA  EC0F  F02C         	call	_change_state_to_menu_23	;wreg free
 20465                           
 20466                           ;UI.c: 290: }
 20467                           ;UI.c: 291: break;
 20468  0031AE  D0D5               	goto	i2l268
 20469  0031B0                     i2l9680:
 20470                           
 20471                           ;UI.c: 294: if(up){
 20472  0031B0  5075               	movf	_up,w,c
 20473  0031B2  1076               	iorwf	_up+1,w,c
 20474  0031B4  B4D8               	btfsc	status,2,c
 20475  0031B6  D003               	goto	i2l9684
 20476                           
 20477                           ;UI.c: 295: change_state_to_logs_11();
 20478  0031B8  EC9F  F02C         	call	_change_state_to_logs_11	;wreg free
 20479                           
 20480                           ;UI.c: 296: }
 20481  0031BC  D0CE               	goto	i2l268
 20482  0031BE                     i2l9684:
 20483                           
 20484                           ;UI.c: 297: else if(down){
 20485  0031BE  5065               	movf	_down,w,c
 20486  0031C0  1066               	iorwf	_down+1,w,c
 20487  0031C2  B4D8               	btfsc	status,2,c
 20488  0031C4  D003               	goto	i2l9688
 20489                           
 20490                           ;UI.c: 298: change_state_to_logs_23();
 20491  0031C6  ECCE  F02C         	call	_change_state_to_logs_23	;wreg free
 20492                           
 20493                           ;UI.c: 299: }
 20494  0031CA  D0C7               	goto	i2l268
 20495  0031CC                     i2l9688:
 20496                           
 20497                           ;UI.c: 300: else if(enter){
 20498  0031CC  5067               	movf	_enter,w,c
 20499  0031CE  1068               	iorwf	_enter+1,w,c
 20500  0031D0  B4D8               	btfsc	status,2,c
 20501  0031D2  D007               	goto	i2l9692
 20502                           
 20503                           ;UI.c: 301: dispLogs(2);
 20504  0031D4  0E00               	movlw	0
 20505  0031D6  6E13               	movwf	dispLogs@myLog+1,c
 20506  0031D8  0E02               	movlw	2
 20507  0031DA  6E12               	movwf	dispLogs@myLog,c
 20508  0031DC  EC74  F02D         	call	_dispLogs	;wreg free
 20509                           
 20510                           ;UI.c: 302: }
 20511  0031E0  D0BC               	goto	i2l268
 20512  0031E2                     i2l9692:
 20513                           
 20514                           ;UI.c: 303: else if(back){
 20515  0031E2  5063               	movf	_back,w,c
 20516  0031E4  1064               	iorwf	_back+1,w,c
 20517  0031E6  B4D8               	btfsc	status,2,c
 20518  0031E8  D0B8               	goto	i2l268
 20519                           
 20520                           ;UI.c: 304: change_state_to_menu_23();
 20521  0031EA  EC0F  F02C         	call	_change_state_to_menu_23	;wreg free
 20522                           
 20523                           ;UI.c: 305: }
 20524                           ;UI.c: 306: break;
 20525  0031EE  D0B5               	goto	i2l268
 20526  0031F0                     i2l9696:
 20527                           
 20528                           ;UI.c: 309: if(up){
 20529  0031F0  5075               	movf	_up,w,c
 20530  0031F2  1076               	iorwf	_up+1,w,c
 20531  0031F4  B4D8               	btfsc	status,2,c
 20532  0031F6  D003               	goto	i2l9700
 20533                           
 20534                           ;UI.c: 310: change_state_to_logs_11();
 20535  0031F8  EC9F  F02C         	call	_change_state_to_logs_11	;wreg free
 20536                           
 20537                           ;UI.c: 311: }
 20538  0031FC  D0AE               	goto	i2l268
 20539  0031FE                     i2l9700:
 20540                           
 20541                           ;UI.c: 312: else if(down){
 20542  0031FE  5065               	movf	_down,w,c
 20543  003200  1066               	iorwf	_down+1,w,c
 20544  003202  B4D8               	btfsc	status,2,c
 20545  003204  D003               	goto	i2l9704
 20546                           
 20547                           ;UI.c: 313: change_state_to_logs_23();
 20548  003206  ECCE  F02C         	call	_change_state_to_logs_23	;wreg free
 20549                           
 20550                           ;UI.c: 314: }
 20551  00320A  D0A7               	goto	i2l268
 20552  00320C                     i2l9704:
 20553                           
 20554                           ;UI.c: 315: else if(enter){
 20555  00320C  5067               	movf	_enter,w,c
 20556  00320E  1068               	iorwf	_enter+1,w,c
 20557  003210  B4D8               	btfsc	status,2,c
 20558  003212  D007               	goto	i2l9708
 20559                           
 20560                           ;UI.c: 316: dispLogs(2);
 20561  003214  0E00               	movlw	0
 20562  003216  6E13               	movwf	dispLogs@myLog+1,c
 20563  003218  0E02               	movlw	2
 20564  00321A  6E12               	movwf	dispLogs@myLog,c
 20565  00321C  EC74  F02D         	call	_dispLogs	;wreg free
 20566                           
 20567                           ;UI.c: 317: }
 20568  003220  D09C               	goto	i2l268
 20569  003222                     i2l9708:
 20570                           
 20571                           ;UI.c: 318: else if(back){
 20572  003222  5063               	movf	_back,w,c
 20573  003224  1064               	iorwf	_back+1,w,c
 20574  003226  B4D8               	btfsc	status,2,c
 20575  003228  D098               	goto	i2l268
 20576                           
 20577                           ;UI.c: 319: change_state_to_menu_23();
 20578  00322A  EC0F  F02C         	call	_change_state_to_menu_23	;wreg free
 20579                           
 20580                           ;UI.c: 320: }
 20581                           ;UI.c: 321: break;
 20582  00322E  D095               	goto	i2l268
 20583  003230                     i2l9712:
 20584                           
 20585                           ;UI.c: 324: if(up){
 20586  003230  5075               	movf	_up,w,c
 20587  003232  1076               	iorwf	_up+1,w,c
 20588  003234  B4D8               	btfsc	status,2,c
 20589  003236  D003               	goto	i2l9716
 20590                           
 20591                           ;UI.c: 325: change_state_to_logs_22();
 20592  003238  EC6F  F02C         	call	_change_state_to_logs_22	;wreg free
 20593                           
 20594                           ;UI.c: 326: }
 20595  00323C  D08E               	goto	i2l268
 20596  00323E                     i2l9716:
 20597                           
 20598                           ;UI.c: 327: else if(down){
 20599  00323E  5065               	movf	_down,w,c
 20600  003240  1066               	iorwf	_down+1,w,c
 20601  003242  B4D8               	btfsc	status,2,c
 20602  003244  D003               	goto	i2l9720
 20603                           
 20604                           ;UI.c: 328: change_state_to_logs_34();
 20605  003246  EC3F  F02C         	call	_change_state_to_logs_34	;wreg free
 20606                           
 20607                           ;UI.c: 329: }
 20608  00324A  D087               	goto	i2l268
 20609  00324C                     i2l9720:
 20610                           
 20611                           ;UI.c: 330: else if(enter){
 20612  00324C  5067               	movf	_enter,w,c
 20613  00324E  1068               	iorwf	_enter+1,w,c
 20614  003250  B4D8               	btfsc	status,2,c
 20615  003252  D007               	goto	i2l9724
 20616                           
 20617                           ;UI.c: 331: dispLogs(3);
 20618  003254  0E00               	movlw	0
 20619  003256  6E13               	movwf	dispLogs@myLog+1,c
 20620  003258  0E03               	movlw	3
 20621  00325A  6E12               	movwf	dispLogs@myLog,c
 20622  00325C  EC74  F02D         	call	_dispLogs	;wreg free
 20623                           
 20624                           ;UI.c: 332: }
 20625  003260  D07C               	goto	i2l268
 20626  003262                     i2l9724:
 20627                           
 20628                           ;UI.c: 333: else if(back){
 20629  003262  5063               	movf	_back,w,c
 20630  003264  1064               	iorwf	_back+1,w,c
 20631  003266  B4D8               	btfsc	status,2,c
 20632  003268  D078               	goto	i2l268
 20633                           
 20634                           ;UI.c: 334: change_state_to_menu_23();
 20635  00326A  EC0F  F02C         	call	_change_state_to_menu_23	;wreg free
 20636                           
 20637                           ;UI.c: 335: }
 20638                           ;UI.c: 336: break;
 20639  00326E  D075               	goto	i2l268
 20640  003270                     i2l9728:
 20641                           
 20642                           ;UI.c: 339: if(up){
 20643  003270  5075               	movf	_up,w,c
 20644  003272  1076               	iorwf	_up+1,w,c
 20645  003274  B4D8               	btfsc	status,2,c
 20646  003276  D003               	goto	i2l9732
 20647                           
 20648                           ;UI.c: 340: change_state_to_logs_22();
 20649  003278  EC6F  F02C         	call	_change_state_to_logs_22	;wreg free
 20650                           
 20651                           ;UI.c: 341: }
 20652  00327C  D06E               	goto	i2l268
 20653  00327E                     i2l9732:
 20654                           
 20655                           ;UI.c: 342: else if(down){
 20656  00327E  5065               	movf	_down,w,c
 20657  003280  1066               	iorwf	_down+1,w,c
 20658  003282  B4D8               	btfsc	status,2,c
 20659  003284  D003               	goto	i2l9736
 20660                           
 20661                           ;UI.c: 343: change_state_to_logs_34();
 20662  003286  EC3F  F02C         	call	_change_state_to_logs_34	;wreg free
 20663                           
 20664                           ;UI.c: 344: }
 20665  00328A  D067               	goto	i2l268
 20666  00328C                     i2l9736:
 20667                           
 20668                           ;UI.c: 345: else if(enter){
 20669  00328C  5067               	movf	_enter,w,c
 20670  00328E  1068               	iorwf	_enter+1,w,c
 20671  003290  B4D8               	btfsc	status,2,c
 20672  003292  D007               	goto	i2l9740
 20673                           
 20674                           ;UI.c: 346: dispLogs(3);
 20675  003294  0E00               	movlw	0
 20676  003296  6E13               	movwf	dispLogs@myLog+1,c
 20677  003298  0E03               	movlw	3
 20678  00329A  6E12               	movwf	dispLogs@myLog,c
 20679  00329C  EC74  F02D         	call	_dispLogs	;wreg free
 20680                           
 20681                           ;UI.c: 347: }
 20682  0032A0  D05C               	goto	i2l268
 20683  0032A2                     i2l9740:
 20684                           
 20685                           ;UI.c: 348: else if(back){
 20686  0032A2  5063               	movf	_back,w,c
 20687  0032A4  1064               	iorwf	_back+1,w,c
 20688  0032A6  B4D8               	btfsc	status,2,c
 20689  0032A8  D058               	goto	i2l268
 20690                           
 20691                           ;UI.c: 349: change_state_to_menu_23();
 20692  0032AA  EC0F  F02C         	call	_change_state_to_menu_23	;wreg free
 20693                           
 20694                           ;UI.c: 350: }
 20695                           ;UI.c: 351: break;
 20696  0032AE  D055               	goto	i2l268
 20697  0032B0                     i2l9744:
 20698                           
 20699                           ;UI.c: 354: if(up){
 20700  0032B0  5075               	movf	_up,w,c
 20701  0032B2  1076               	iorwf	_up+1,w,c
 20702  0032B4  B4D8               	btfsc	status,2,c
 20703  0032B6  D003               	goto	i2l9748
 20704                           
 20705                           ;UI.c: 355: change_state_to_logs_33();
 20706  0032B8  EC57  F02C         	call	_change_state_to_logs_33	;wreg free
 20707                           
 20708                           ;UI.c: 356: }
 20709  0032BC  D04E               	goto	i2l268
 20710  0032BE                     i2l9748:
 20711                           
 20712                           ;UI.c: 357: else if(down){
 20713  0032BE  5065               	movf	_down,w,c
 20714  0032C0  1066               	iorwf	_down+1,w,c
 20715  0032C2  B4D8               	btfsc	status,2,c
 20716  0032C4  D003               	goto	i2l9752
 20717                           
 20718                           ;UI.c: 358: change_state_to_logs_11();
 20719  0032C6  EC9F  F02C         	call	_change_state_to_logs_11	;wreg free
 20720                           
 20721                           ;UI.c: 359: }
 20722  0032CA  D047               	goto	i2l268
 20723  0032CC                     i2l9752:
 20724                           
 20725                           ;UI.c: 360: else if(enter){
 20726  0032CC  5067               	movf	_enter,w,c
 20727  0032CE  1068               	iorwf	_enter+1,w,c
 20728  0032D0  B4D8               	btfsc	status,2,c
 20729  0032D2  D007               	goto	i2l9756
 20730                           
 20731                           ;UI.c: 361: dispLogs(4);
 20732  0032D4  0E00               	movlw	0
 20733  0032D6  6E13               	movwf	dispLogs@myLog+1,c
 20734  0032D8  0E04               	movlw	4
 20735  0032DA  6E12               	movwf	dispLogs@myLog,c
 20736  0032DC  EC74  F02D         	call	_dispLogs	;wreg free
 20737                           
 20738                           ;UI.c: 362: }
 20739  0032E0  D03C               	goto	i2l268
 20740  0032E2                     i2l9756:
 20741                           
 20742                           ;UI.c: 363: else if(back){
 20743  0032E2  5063               	movf	_back,w,c
 20744  0032E4  1064               	iorwf	_back+1,w,c
 20745  0032E6  B4D8               	btfsc	status,2,c
 20746  0032E8  D038               	goto	i2l268
 20747                           
 20748                           ;UI.c: 364: change_state_to_menu_23();
 20749  0032EA  EC0F  F02C         	call	_change_state_to_menu_23	;wreg free
 20750                           
 20751                           ;UI.c: 370: }
 20752                           
 20753                           ;UI.c: 369: break;
 20754                           
 20755                           ;UI.c: 368: default:
 20756                           
 20757                           ;UI.c: 365: }
 20758                           ;UI.c: 366: break;
 20759  0032EE  D035               	goto	i2l268
 20760  0032F0                     i2l9762:
 20761  0032F0  C0E6  F043         	movff	_cur_state,??_updateMenu
 20762  0032F4  C0E7  F044         	movff	_cur_state+1,??_updateMenu+1
 20763                           
 20764                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
 20765                           ; Switch size 1, requested type "space"
 20766                           ; Number of cases is 3, Range of values is 0 to 4
 20767                           ; switch strategies available:
 20768                           ; Name         Instructions Cycles
 20769                           ; simple_byte           10     6 (average)
 20770                           ;	Chosen strategy is simple_byte
 20771  0032F8  5044               	movf	??_updateMenu+1,w,c
 20772  0032FA  0A00               	xorlw	0	; case 0
 20773  0032FC  B4D8               	btfsc	status,2,c
 20774  0032FE  D007               	goto	i2l10734
 20775  003300  0A03               	xorlw	3	; case 3
 20776  003302  B4D8               	btfsc	status,2,c
 20777  003304  D015               	goto	i2l10736
 20778  003306  0A07               	xorlw	7	; case 4
 20779  003308  B4D8               	btfsc	status,2,c
 20780  00330A  D020               	goto	i2l10738
 20781  00330C  D026               	goto	i2l268
 20782  00330E                     i2l10734:
 20783                           
 20784                           ; Switch size 1, requested type "space"
 20785                           ; Number of cases is 5, Range of values is 0 to 23
 20786                           ; switch strategies available:
 20787                           ; Name         Instructions Cycles
 20788                           ; simple_byte           16     9 (average)
 20789                           ;	Chosen strategy is simple_byte
 20790  00330E  5043               	movf	??_updateMenu,w,c
 20791  003310  0A00               	xorlw	0	; case 0
 20792  003312  B4D8               	btfsc	status,2,c
 20793  003314  D6DC               	goto	i2l9614
 20794  003316  0A0B               	xorlw	11	; case 11
 20795  003318  B4D8               	btfsc	status,2,c
 20796  00331A  D6DC               	goto	i2l9616
 20797  00331C  0A07               	xorlw	7	; case 12
 20798  00331E  B4D8               	btfsc	status,2,c
 20799  003320  D6EE               	goto	i2l9628
 20800  003322  0A1A               	xorlw	26	; case 22
 20801  003324  B4D8               	btfsc	status,2,c
 20802  003326  D6F9               	goto	i2l9640
 20803  003328  0A01               	xorlw	1	; case 23
 20804  00332A  B4D8               	btfsc	status,2,c
 20805  00332C  D70C               	goto	i2l9652
 20806  00332E  D015               	goto	i2l268
 20807  003330                     i2l10736:
 20808                           
 20809                           ; Switch size 1, requested type "space"
 20810                           ; Number of cases is 4, Range of values is 243 to 255
 20811                           ; switch strategies available:
 20812                           ; Name         Instructions Cycles
 20813                           ; simple_byte           13     7 (average)
 20814                           ;	Chosen strategy is simple_byte
 20815  003330  5043               	movf	??_updateMenu,w,c
 20816  003332  0AF3               	xorlw	243	; case 243
 20817  003334  B4D8               	btfsc	status,2,c
 20818  003336  D71C               	goto	i2l9664
 20819  003338  0A07               	xorlw	7	; case 244
 20820  00333A  B4D8               	btfsc	status,2,c
 20821  00333C  D739               	goto	i2l9680
 20822  00333E  0A0A               	xorlw	10	; case 254
 20823  003340  B4D8               	btfsc	status,2,c
 20824  003342  D756               	goto	i2l9696
 20825  003344  0A01               	xorlw	1	; case 255
 20826  003346  B4D8               	btfsc	status,2,c
 20827  003348  D773               	goto	i2l9712
 20828  00334A  D007               	goto	i2l268
 20829  00334C                     i2l10738:
 20830                           
 20831                           ; Switch size 1, requested type "space"
 20832                           ; Number of cases is 2, Range of values is 9 to 10
 20833                           ; switch strategies available:
 20834                           ; Name         Instructions Cycles
 20835                           ; simple_byte            7     4 (average)
 20836                           ;	Chosen strategy is simple_byte
 20837  00334C  5043               	movf	??_updateMenu,w,c
 20838  00334E  0A09               	xorlw	9	; case 9
 20839  003350  B4D8               	btfsc	status,2,c
 20840  003352  D78E               	goto	i2l9728
 20841  003354  0A03               	xorlw	3	; case 10
 20842  003356  B4D8               	btfsc	status,2,c
 20843  003358  D7AB               	goto	i2l9744
 20844  00335A                     i2l268:
 20845                           
 20846                           ;UI.c: 371: }
 20847                           ;UI.c: 372: (INTCONbits.GIE = 1);
 20848  00335A  8EF2               	bsf	intcon,7,c	;volatile
 20849  00335C  0012               	return		;funcret
 20850  00335E                     __end_of_updateMenu:
 20851                           	opt stack 0
 20852                           pclatu	equ	0xFFB
 20853                           pclath	equ	0xFFA
 20854                           tblptru	equ	0xFF8
 20855                           tblptrh	equ	0xFF7
 20856                           tblptrl	equ	0xFF6
 20857                           tablat	equ	0xFF5
 20858                           prodh	equ	0xFF4
 20859                           prodl	equ	0xFF3
 20860                           intcon	equ	0xFF2
 20861                           intcon2	equ	0xFF1
 20862                           intcon3	equ	0xFF0
 20863                           indf0	equ	0xFEF
 20864                           postinc0	equ	0xFEE
 20865                           fsr0h	equ	0xFEA
 20866                           fsr0l	equ	0xFE9
 20867                           wreg	equ	0xFE8
 20868                           postdec1	equ	0xFE5
 20869                           fsr1h	equ	0xFE2
 20870                           fsr1l	equ	0xFE1
 20871                           indf2	equ	0xFDF
 20872                           postinc2	equ	0xFDE
 20873                           postdec2	equ	0xFDD
 20874                           fsr2h	equ	0xFDA
 20875                           fsr2l	equ	0xFD9
 20876                           status	equ	0xFD8
 20877                           
 20878 ;; *************** function i2_change_state_to_menu_start *****************
 20879 ;; Defined at:
 20880 ;;		line 477 in file "UI.c"
 20881 ;; Parameters:    Size  Location     Type
 20882 ;;		None
 20883 ;; Auto vars:     Size  Location     Type
 20884 ;;		None
 20885 ;; Return value:  Size  Location     Type
 20886 ;;                  1    wreg      void 
 20887 ;; Registers used:
 20888 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20889 ;; Tracked objects:
 20890 ;;		On entry : 0/0
 20891 ;;		On exit  : 0/0
 20892 ;;		Unchanged: 0/0
 20893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20894 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20895 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20896 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20897 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20898 ;;Total ram usage:        0 bytes
 20899 ;; Hardware stack levels used:    1
 20900 ;; Hardware stack levels required when called:    4
 20901 ;; This function calls:
 20902 ;;		i2_lcdInst
 20903 ;;		i2_printRTC
 20904 ;;		i2_printf
 20905 ;; This function is called by:
 20906 ;;		_updateMenu
 20907 ;;		_handler
 20908 ;; This function uses a non-reentrant model
 20909 ;;
 20910                           
 20911                           	psect	text68
 20912  005A74                     __ptext68:
 20913                           	opt stack 0
 20914  005A74                     i2_change_state_to_menu_start:
 20915                           	opt stack 19
 20916                           
 20917                           ;UI.c: 478: cur_state = 0;
 20918                           
 20919                           ;incstack = 0
 20920  005A74  0E00               	movlw	0
 20921  005A76  0100               	movlb	0	; () banked
 20922  005A78  6FE7               	movwf	(_cur_state+1)& (0+255),b
 20923  005A7A  0E00               	movlw	0
 20924  005A7C  6FE6               	movwf	_cur_state& (0+255),b
 20925                           
 20926                           ; BSR set to: 0
 20927                           ;UI.c: 480: lcdInst(0b10000000);;
 20928  005A7E  0E80               	movlw	128
 20929  005A80  EC1E  F02E         	call	i2_lcdInst
 20930                           
 20931                           ;UI.c: 481: printRTC();
 20932  005A84  EC01  F01B         	call	i2_printRTC	;wreg free
 20933                           
 20934                           ;UI.c: 482: lcdInst(0b11000000);;
 20935  005A88  0EC0               	movlw	192
 20936  005A8A  EC1E  F02E         	call	i2_lcdInst
 20937                           
 20938                           ;UI.c: 483: printf("PUSH TO CONTINUE");
 20939  005A8E  0E0B               	movlw	low STR_30
 20940  005A90  6E0D               	movwf	i2printf@f,c
 20941  005A92  0EFE               	movlw	high STR_30
 20942  005A94  6E0E               	movwf	i2printf@f+1,c
 20943  005A96  EC29  F012         	call	i2_printf	;wreg free
 20944  005A9A  0012               	return		;funcret
 20945  005A9C                     __end_ofi2_change_state_to_menu_start:
 20946                           	opt stack 0
 20947                           pclatu	equ	0xFFB
 20948                           pclath	equ	0xFFA
 20949                           tblptru	equ	0xFF8
 20950                           tblptrh	equ	0xFF7
 20951                           tblptrl	equ	0xFF6
 20952                           tablat	equ	0xFF5
 20953                           prodh	equ	0xFF4
 20954                           prodl	equ	0xFF3
 20955                           intcon	equ	0xFF2
 20956                           intcon2	equ	0xFF1
 20957                           intcon3	equ	0xFF0
 20958                           indf0	equ	0xFEF
 20959                           postinc0	equ	0xFEE
 20960                           fsr0h	equ	0xFEA
 20961                           fsr0l	equ	0xFE9
 20962                           wreg	equ	0xFE8
 20963                           postdec1	equ	0xFE5
 20964                           fsr1h	equ	0xFE2
 20965                           fsr1l	equ	0xFE1
 20966                           indf2	equ	0xFDF
 20967                           postinc2	equ	0xFDE
 20968                           postdec2	equ	0xFDD
 20969                           fsr2h	equ	0xFDA
 20970                           fsr2l	equ	0xFD9
 20971                           status	equ	0xFD8
 20972                           
 20973 ;; *************** function i2_printRTC *****************
 20974 ;; Defined at:
 20975 ;;		line 63 in file "RTC.c"
 20976 ;; Parameters:    Size  Location     Type
 20977 ;;		None
 20978 ;; Auto vars:     Size  Location     Type
 20979 ;;  printRTC       14   44[COMRAM] int [7]
 20980 ;;  printRTC        4   60[COMRAM] unsigned char [4]
 20981 ;;  printRTC        2   64[COMRAM] int 
 20982 ;;  printRTC        2   58[COMRAM] int 
 20983 ;; Return value:  Size  Location     Type
 20984 ;;                  1    wreg      void 
 20985 ;; Registers used:
 20986 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20987 ;; Tracked objects:
 20988 ;;		On entry : 0/0
 20989 ;;		On exit  : 0/0
 20990 ;;		Unchanged: 0/0
 20991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20992 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20993 ;;      Locals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20994 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20995 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20996 ;;Total ram usage:       25 bytes
 20997 ;; Hardware stack levels used:    1
 20998 ;; Hardware stack levels required when called:    3
 20999 ;; This function calls:
 21000 ;;		i2_getRTC
 21001 ;;		i2_lcdInst
 21002 ;;		i2_printf
 21003 ;;		i2_strcpy
 21004 ;; This function is called by:
 21005 ;;		i2_change_state_to_menu_start
 21006 ;; This function uses a non-reentrant model
 21007 ;;
 21008                           
 21009                           	psect	text69
 21010  003602                     __ptext69:
 21011                           	opt stack 0
 21012  003602                     i2_printRTC:
 21013                           	opt stack 19
 21014                           
 21015                           ;RTC.c: 64: getRTC();
 21016                           
 21017                           ;incstack = 0
 21018  003602  EC23  F028         	call	i2_getRTC	;wreg free
 21019                           
 21020                           ;RTC.c: 65: char month[] = "MMM";
 21021  003606  C14D  F03D         	movff	printRTC@F3236,i2printRTC@month
 21022  00360A  C14E  F03E         	movff	printRTC@F3236+1,i2printRTC@month+1
 21023  00360E  C14F  F03F         	movff	printRTC@F3236+2,i2printRTC@month+2
 21024  003612  C150  F040         	movff	printRTC@F3236+3,i2printRTC@month+3
 21025                           
 21026                           ;RTC.c: 66: int INT_time[7];
 21027                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
 21028  003616  0E00               	movlw	0
 21029  003618  6E42               	movwf	i2printRTC@i+1,c
 21030  00361A  0E00               	movlw	0
 21031  00361C  6E41               	movwf	i2printRTC@i,c
 21032  00361E  BE42               	btfsc	i2printRTC@i+1,7,c
 21033  003620  D006               	goto	i2l7560
 21034  003622  5042               	movf	i2printRTC@i+1,w,c
 21035  003624  E135               	bnz	i2l627
 21036  003626  0E07               	movlw	7
 21037  003628  5C41               	subwf	i2printRTC@i,w,c
 21038  00362A  B0D8               	btfsc	status,0,c
 21039  00362C  D031               	goto	i2l627
 21040  00362E                     i2l7560:
 21041                           
 21042                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 21043  00362E  0E1C               	movlw	low _time
 21044  003630  2441               	addwf	i2printRTC@i,w,c
 21045  003632  6ED9               	movwf	fsr2l,c
 21046  003634  0E01               	movlw	high _time
 21047  003636  2042               	addwfc	i2printRTC@i+1,w,c
 21048  003638  6EDA               	movwf	fsr2h,c
 21049  00363A  50DF               	movf	indf2,w,c
 21050  00363C  6E2A               	movwf	??i2_printRTC& (0+255),c
 21051  00363E  3A2A               	swapf	??i2_printRTC,f,c
 21052  003640  0E0F               	movlw	15
 21053  003642  162A               	andwf	??i2_printRTC,f,c
 21054  003644  0E0F               	movlw	15
 21055  003646  162A               	andwf	??i2_printRTC,f,c
 21056  003648  502A               	movf	??i2_printRTC,w,c
 21057  00364A  0D0A               	mullw	10
 21058  00364C  0E1C               	movlw	low _time
 21059  00364E  2441               	addwf	i2printRTC@i,w,c
 21060  003650  6ED9               	movwf	fsr2l,c
 21061  003652  0E01               	movlw	high _time
 21062  003654  2042               	addwfc	i2printRTC@i+1,w,c
 21063  003656  6EDA               	movwf	fsr2h,c
 21064  003658  50DF               	movf	indf2,w,c
 21065  00365A  0B0F               	andlw	15
 21066  00365C  6E2B               	movwf	(??i2_printRTC+1)& (0+255),c
 21067  00365E  6A2C               	clrf	(??i2_printRTC+2)& (0+255),c
 21068  003660  50F3               	movf	prodl,w,c
 21069  003662  262B               	addwf	??i2_printRTC+1,f,c
 21070  003664  50F4               	movf	prodh,w,c
 21071  003666  222C               	addwfc	??i2_printRTC+2,f,c
 21072  003668  90D8               	bcf	status,0,c
 21073  00366A  3441               	rlcf	i2printRTC@i,w,c
 21074  00366C  6ED9               	movwf	fsr2l,c
 21075  00366E  3442               	rlcf	i2printRTC@i+1,w,c
 21076  003670  6EDA               	movwf	fsr2h,c
 21077  003672  0E2D               	movlw	low i2printRTC@INT_time
 21078  003674  26D9               	addwf	fsr2l,f,c
 21079  003676  0E00               	movlw	high i2printRTC@INT_time
 21080  003678  22DA               	addwfc	fsr2h,f,c
 21081  00367A  C02B  FFDE         	movff	??i2_printRTC+1,postinc2
 21082  00367E  C02C  FFDD         	movff	??i2_printRTC+2,postdec2
 21083  003682  4A41               	infsnz	i2printRTC@i,f,c
 21084  003684  2A42               	incf	i2printRTC@i+1,f,c
 21085  003686  BE42               	btfsc	i2printRTC@i+1,7,c
 21086  003688  D7D2               	goto	i2l7560
 21087  00368A  5042               	movf	i2printRTC@i+1,w,c
 21088  00368C  E101               	bnz	i2u626_40
 21089  00368E  D7CB               	goto	L19
 21090  003690                     i2u626_40:
 21091  003690                     i2l627:
 21092                           
 21093                           ;RTC.c: 69: }
 21094                           ;RTC.c: 70: int RTC_month = INT_time[5];
 21095  003690  C037  F03B         	movff	i2printRTC@INT_time+10,i2printRTC@RTC_month
 21096  003694  C038  F03C         	movff	i2printRTC@INT_time+11,i2printRTC@RTC_month+1
 21097                           
 21098                           ;RTC.c: 72: switch(RTC_month){
 21099  003698  D084               	goto	i2l7592
 21100  00369A                     i2l7566:
 21101                           
 21102                           ;RTC.c: 74: strcpy(month, "JAN");
 21103  00369A  0E3D               	movlw	low i2printRTC@month
 21104  00369C  6E01               	movwf	i2strcpy@to,c
 21105  00369E  0E00               	movlw	high i2printRTC@month
 21106  0036A0  6E02               	movwf	i2strcpy@to+1,c
 21107  0036A2  0EDB               	movlw	low STR_8
 21108  0036A4  6E03               	movwf	i2strcpy@from,c
 21109  0036A6  0EFF               	movlw	high STR_8
 21110  0036A8  6E04               	movwf	i2strcpy@from+1,c
 21111  0036AA  ECAE  F02B         	call	i2_strcpy	;wreg free
 21112                           
 21113                           ;RTC.c: 75: break;
 21114  0036AE  D0A6               	goto	i2l7594
 21115  0036B0                     i2l7568:
 21116                           
 21117                           ;RTC.c: 77: strcpy(month, "FEB");
 21118  0036B0  0E3D               	movlw	low i2printRTC@month
 21119  0036B2  6E01               	movwf	i2strcpy@to,c
 21120  0036B4  0E00               	movlw	high i2printRTC@month
 21121  0036B6  6E02               	movwf	i2strcpy@to+1,c
 21122  0036B8  0ECB               	movlw	low STR_9
 21123  0036BA  6E03               	movwf	i2strcpy@from,c
 21124  0036BC  0EFF               	movlw	high STR_9
 21125  0036BE  6E04               	movwf	i2strcpy@from+1,c
 21126  0036C0  ECAE  F02B         	call	i2_strcpy	;wreg free
 21127                           
 21128                           ;RTC.c: 78: break;
 21129  0036C4  D09B               	goto	i2l7594
 21130  0036C6                     i2l7570:
 21131                           
 21132                           ;RTC.c: 80: strcpy(month, "MAR");
 21133  0036C6  0E3D               	movlw	low i2printRTC@month
 21134  0036C8  6E01               	movwf	i2strcpy@to,c
 21135  0036CA  0E00               	movlw	high i2printRTC@month
 21136  0036CC  6E02               	movwf	i2strcpy@to+1,c
 21137  0036CE  0EE7               	movlw	low STR_10
 21138  0036D0  6E03               	movwf	i2strcpy@from,c
 21139  0036D2  0EFF               	movlw	high STR_10
 21140  0036D4  6E04               	movwf	i2strcpy@from+1,c
 21141  0036D6  ECAE  F02B         	call	i2_strcpy	;wreg free
 21142                           
 21143                           ;RTC.c: 81: break;
 21144  0036DA  D090               	goto	i2l7594
 21145  0036DC                     i2l7572:
 21146                           
 21147                           ;RTC.c: 83: strcpy(month, "APR");
 21148  0036DC  0E3D               	movlw	low i2printRTC@month
 21149  0036DE  6E01               	movwf	i2strcpy@to,c
 21150  0036E0  0E00               	movlw	high i2printRTC@month
 21151  0036E2  6E02               	movwf	i2strcpy@to+1,c
 21152  0036E4  0EEB               	movlw	low STR_11
 21153  0036E6  6E03               	movwf	i2strcpy@from,c
 21154  0036E8  0EFF               	movlw	high STR_11
 21155  0036EA  6E04               	movwf	i2strcpy@from+1,c
 21156  0036EC  ECAE  F02B         	call	i2_strcpy	;wreg free
 21157                           
 21158                           ;RTC.c: 84: break;
 21159  0036F0  D085               	goto	i2l7594
 21160  0036F2                     i2l7574:
 21161                           
 21162                           ;RTC.c: 86: strcpy(month, "MAY");
 21163  0036F2  0E3D               	movlw	low i2printRTC@month
 21164  0036F4  6E01               	movwf	i2strcpy@to,c
 21165  0036F6  0E00               	movlw	high i2printRTC@month
 21166  0036F8  6E02               	movwf	i2strcpy@to+1,c
 21167  0036FA  0EFB               	movlw	low STR_12
 21168  0036FC  6E03               	movwf	i2strcpy@from,c
 21169  0036FE  0EFF               	movlw	high STR_12
 21170  003700  6E04               	movwf	i2strcpy@from+1,c
 21171  003702  ECAE  F02B         	call	i2_strcpy	;wreg free
 21172                           
 21173                           ;RTC.c: 87: break;
 21174  003706  D07A               	goto	i2l7594
 21175  003708                     i2l7576:
 21176                           
 21177                           ;RTC.c: 89: strcpy(month, "JUN");
 21178  003708  0E3D               	movlw	low i2printRTC@month
 21179  00370A  6E01               	movwf	i2strcpy@to,c
 21180  00370C  0E00               	movlw	high i2printRTC@month
 21181  00370E  6E02               	movwf	i2strcpy@to+1,c
 21182  003710  0EDF               	movlw	low STR_13
 21183  003712  6E03               	movwf	i2strcpy@from,c
 21184  003714  0EFF               	movlw	high STR_13
 21185  003716  6E04               	movwf	i2strcpy@from+1,c
 21186  003718  ECAE  F02B         	call	i2_strcpy	;wreg free
 21187                           
 21188                           ;RTC.c: 90: break;
 21189  00371C  D06F               	goto	i2l7594
 21190  00371E                     i2l7578:
 21191                           
 21192                           ;RTC.c: 92: strcpy(month, "JUL");
 21193  00371E  0E3D               	movlw	low i2printRTC@month
 21194  003720  6E01               	movwf	i2strcpy@to,c
 21195  003722  0E00               	movlw	high i2printRTC@month
 21196  003724  6E02               	movwf	i2strcpy@to+1,c
 21197  003726  0ED7               	movlw	low STR_14
 21198  003728  6E03               	movwf	i2strcpy@from,c
 21199  00372A  0EFF               	movlw	high STR_14
 21200  00372C  6E04               	movwf	i2strcpy@from+1,c
 21201  00372E  ECAE  F02B         	call	i2_strcpy	;wreg free
 21202                           
 21203                           ;RTC.c: 93: break;
 21204  003732  D064               	goto	i2l7594
 21205  003734                     i2l7580:
 21206                           
 21207                           ;RTC.c: 95: strcpy(month, "AUG");
 21208  003734  0E3D               	movlw	low i2printRTC@month
 21209  003736  6E01               	movwf	i2strcpy@to,c
 21210  003738  0E00               	movlw	high i2printRTC@month
 21211  00373A  6E02               	movwf	i2strcpy@to+1,c
 21212  00373C  0ED3               	movlw	low STR_15
 21213  00373E  6E03               	movwf	i2strcpy@from,c
 21214  003740  0EFF               	movlw	high STR_15
 21215  003742  6E04               	movwf	i2strcpy@from+1,c
 21216  003744  ECAE  F02B         	call	i2_strcpy	;wreg free
 21217                           
 21218                           ;RTC.c: 96: break;
 21219  003748  D059               	goto	i2l7594
 21220  00374A                     i2l7582:
 21221                           
 21222                           ;RTC.c: 98: strcpy(month, "SEP");
 21223  00374A  0E3D               	movlw	low i2printRTC@month
 21224  00374C  6E01               	movwf	i2strcpy@to,c
 21225  00374E  0E00               	movlw	high i2printRTC@month
 21226  003750  6E02               	movwf	i2strcpy@to+1,c
 21227  003752  0EE3               	movlw	low STR_16
 21228  003754  6E03               	movwf	i2strcpy@from,c
 21229  003756  0EFF               	movlw	high STR_16
 21230  003758  6E04               	movwf	i2strcpy@from+1,c
 21231  00375A  ECAE  F02B         	call	i2_strcpy	;wreg free
 21232                           
 21233                           ;RTC.c: 99: break;
 21234  00375E  D04E               	goto	i2l7594
 21235  003760                     i2l7584:
 21236                           
 21237                           ;RTC.c: 101: strcpy(month, "OCT");
 21238  003760  0E3D               	movlw	low i2printRTC@month
 21239  003762  6E01               	movwf	i2strcpy@to,c
 21240  003764  0E00               	movlw	high i2printRTC@month
 21241  003766  6E02               	movwf	i2strcpy@to+1,c
 21242  003768  0EF3               	movlw	low STR_17
 21243  00376A  6E03               	movwf	i2strcpy@from,c
 21244  00376C  0EFF               	movlw	high STR_17
 21245  00376E  6E04               	movwf	i2strcpy@from+1,c
 21246  003770  ECAE  F02B         	call	i2_strcpy	;wreg free
 21247                           
 21248                           ;RTC.c: 102: break;
 21249  003774  D043               	goto	i2l7594
 21250  003776                     i2l7586:
 21251                           
 21252                           ;RTC.c: 104: strcpy(month, "NOV");
 21253  003776  0E3D               	movlw	low i2printRTC@month
 21254  003778  6E01               	movwf	i2strcpy@to,c
 21255  00377A  0E00               	movlw	high i2printRTC@month
 21256  00377C  6E02               	movwf	i2strcpy@to+1,c
 21257  00377E  0EF7               	movlw	low STR_18
 21258  003780  6E03               	movwf	i2strcpy@from,c
 21259  003782  0EFF               	movlw	high STR_18
 21260  003784  6E04               	movwf	i2strcpy@from+1,c
 21261  003786  ECAE  F02B         	call	i2_strcpy	;wreg free
 21262                           
 21263                           ;RTC.c: 105: break;
 21264  00378A  D038               	goto	i2l7594
 21265  00378C                     i2l7588:
 21266                           
 21267                           ;RTC.c: 107: strcpy(month, "DEC");
 21268  00378C  0E3D               	movlw	low i2printRTC@month
 21269  00378E  6E01               	movwf	i2strcpy@to,c
 21270  003790  0E00               	movlw	high i2printRTC@month
 21271  003792  6E02               	movwf	i2strcpy@to+1,c
 21272  003794  0ECF               	movlw	low STR_19
 21273  003796  6E03               	movwf	i2strcpy@from,c
 21274  003798  0EFF               	movlw	high STR_19
 21275  00379A  6E04               	movwf	i2strcpy@from+1,c
 21276  00379C  ECAE  F02B         	call	i2_strcpy	;wreg free
 21277                           
 21278                           ;RTC.c: 109: }
 21279                           
 21280                           ;RTC.c: 108: break;
 21281  0037A0  D02D               	goto	i2l7594
 21282  0037A2                     i2l7592:
 21283  0037A2  C03B  F02A         	movff	i2printRTC@RTC_month,??i2_printRTC
 21284  0037A6  C03C  F02B         	movff	i2printRTC@RTC_month+1,??i2_printRTC+1
 21285                           
 21286                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 21287                           ; Switch size 1, requested type "space"
 21288                           ; Number of cases is 1, Range of values is 0 to 0
 21289                           ; switch strategies available:
 21290                           ; Name         Instructions Cycles
 21291                           ; simple_byte            4     3 (average)
 21292                           ;	Chosen strategy is simple_byte
 21293  0037AA  502B               	movf	??i2_printRTC+1,w,c
 21294  0037AC  0A00               	xorlw	0	; case 0
 21295  0037AE  A4D8               	btfss	status,2,c
 21296  0037B0  D025               	goto	i2l7594
 21297                           
 21298                           ; Switch size 1, requested type "space"
 21299                           ; Number of cases is 12, Range of values is 1 to 12
 21300                           ; switch strategies available:
 21301                           ; Name         Instructions Cycles
 21302                           ; simple_byte           37    19 (average)
 21303                           ;	Chosen strategy is simple_byte
 21304  0037B2  502A               	movf	??i2_printRTC,w,c
 21305  0037B4  0A01               	xorlw	1	; case 1
 21306  0037B6  B4D8               	btfsc	status,2,c
 21307  0037B8  D770               	goto	i2l7566
 21308  0037BA  0A03               	xorlw	3	; case 2
 21309  0037BC  B4D8               	btfsc	status,2,c
 21310  0037BE  D778               	goto	i2l7568
 21311  0037C0  0A01               	xorlw	1	; case 3
 21312  0037C2  B4D8               	btfsc	status,2,c
 21313  0037C4  D780               	goto	i2l7570
 21314  0037C6  0A07               	xorlw	7	; case 4
 21315  0037C8  B4D8               	btfsc	status,2,c
 21316  0037CA  D788               	goto	i2l7572
 21317  0037CC  0A01               	xorlw	1	; case 5
 21318  0037CE  B4D8               	btfsc	status,2,c
 21319  0037D0  D790               	goto	i2l7574
 21320  0037D2  0A03               	xorlw	3	; case 6
 21321  0037D4  B4D8               	btfsc	status,2,c
 21322  0037D6  D798               	goto	i2l7576
 21323  0037D8  0A01               	xorlw	1	; case 7
 21324  0037DA  B4D8               	btfsc	status,2,c
 21325  0037DC  D7A0               	goto	i2l7578
 21326  0037DE  0A0F               	xorlw	15	; case 8
 21327  0037E0  B4D8               	btfsc	status,2,c
 21328  0037E2  D7A8               	goto	i2l7580
 21329  0037E4  0A01               	xorlw	1	; case 9
 21330  0037E6  B4D8               	btfsc	status,2,c
 21331  0037E8  D7B0               	goto	i2l7582
 21332  0037EA  0A03               	xorlw	3	; case 10
 21333  0037EC  B4D8               	btfsc	status,2,c
 21334  0037EE  D7B8               	goto	i2l7584
 21335  0037F0  0A01               	xorlw	1	; case 11
 21336  0037F2  B4D8               	btfsc	status,2,c
 21337  0037F4  D7C0               	goto	i2l7586
 21338  0037F6  0A07               	xorlw	7	; case 12
 21339  0037F8  B4D8               	btfsc	status,2,c
 21340  0037FA  D7C8               	goto	i2l7588
 21341  0037FC                     i2l7594:
 21342                           
 21343                           ;RTC.c: 110: lcdInst(0b10000000);;
 21344  0037FC  0E80               	movlw	128
 21345  0037FE  EC1E  F02E         	call	i2_lcdInst
 21346                           
 21347                           ;RTC.c: 111: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 21348  003802  0EA2               	movlw	low STR_21
 21349  003804  6E0D               	movwf	i2printf@f,c
 21350  003806  0EFA               	movlw	high STR_21
 21351  003808  6E0E               	movwf	i2printf@f+1,c
 21352  00380A  C035  F00F         	movff	i2printRTC@INT_time+8,?i2_printf+2
 21353  00380E  C036  F010         	movff	i2printRTC@INT_time+9,?i2_printf+3
 21354  003812  0E3D               	movlw	low i2printRTC@month
 21355  003814  6E11               	movwf	?i2_printf+4,c
 21356  003816  0E00               	movlw	high i2printRTC@month
 21357  003818  6E12               	movwf	?i2_printf+5,c
 21358  00381A  C031  F013         	movff	i2printRTC@INT_time+4,?i2_printf+6
 21359  00381E  C032  F014         	movff	i2printRTC@INT_time+5,?i2_printf+7
 21360  003822  C02F  F015         	movff	i2printRTC@INT_time+2,?i2_printf+8
 21361  003826  C030  F016         	movff	i2printRTC@INT_time+3,?i2_printf+9
 21362  00382A  C02D  F017         	movff	i2printRTC@INT_time,?i2_printf+10
 21363  00382E  C02E  F018         	movff	i2printRTC@INT_time+1,?i2_printf+11
 21364  003832  EC29  F012         	call	i2_printf	;wreg free
 21365  003836  0012               	return		;funcret
 21366  003838                     __end_ofi2_printRTC:
 21367                           	opt stack 0
 21368                           pclatu	equ	0xFFB
 21369                           pclath	equ	0xFFA
 21370                           tblptru	equ	0xFF8
 21371                           tblptrh	equ	0xFF7
 21372                           tblptrl	equ	0xFF6
 21373                           tablat	equ	0xFF5
 21374                           prodh	equ	0xFF4
 21375                           prodl	equ	0xFF3
 21376                           intcon	equ	0xFF2
 21377                           intcon2	equ	0xFF1
 21378                           intcon3	equ	0xFF0
 21379                           indf0	equ	0xFEF
 21380                           postinc0	equ	0xFEE
 21381                           fsr0h	equ	0xFEA
 21382                           fsr0l	equ	0xFE9
 21383                           wreg	equ	0xFE8
 21384                           postdec1	equ	0xFE5
 21385                           fsr1h	equ	0xFE2
 21386                           fsr1l	equ	0xFE1
 21387                           indf2	equ	0xFDF
 21388                           postinc2	equ	0xFDE
 21389                           postdec2	equ	0xFDD
 21390                           fsr2h	equ	0xFDA
 21391                           fsr2l	equ	0xFD9
 21392                           status	equ	0xFD8
 21393                           
 21394 ;; *************** function i2_strcpy *****************
 21395 ;; Defined at:
 21396 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 21397 ;; Parameters:    Size  Location     Type
 21398 ;;  to              2    0[COMRAM] PTR unsigned char 
 21399 ;;		 -> printRTC@month(4), UI@month(4), 
 21400 ;;  from            2    2[COMRAM] PTR const unsigned char 
 21401 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
 21402 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
 21403 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
 21404 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
 21405 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
 21406 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
 21407 ;;		 -> STR_8(4), 
 21408 ;; Auto vars:     Size  Location     Type
 21409 ;;  strcpy          2    4[COMRAM] PTR unsigned char 
 21410 ;;		 -> printRTC@month(4), UI@month(4), 
 21411 ;; Return value:  Size  Location     Type
 21412 ;;                  2    0[COMRAM] PTR unsigned char 
 21413 ;; Registers used:
 21414 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 21415 ;; Tracked objects:
 21416 ;;		On entry : 0/0
 21417 ;;		On exit  : 0/0
 21418 ;;		Unchanged: 0/0
 21419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21420 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21421 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21422 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21423 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21424 ;;Total ram usage:        6 bytes
 21425 ;; Hardware stack levels used:    1
 21426 ;; This function calls:
 21427 ;;		Nothing
 21428 ;; This function is called by:
 21429 ;;		i2_printRTC
 21430 ;; This function uses a non-reentrant model
 21431 ;;
 21432                           
 21433                           	psect	text70
 21434  00575C                     __ptext70:
 21435                           	opt stack 0
 21436  00575C                     i2_strcpy:
 21437                           	opt stack 21
 21438                           
 21439                           ;incstack = 0
 21440  00575C  C001  F005         	movff	i2strcpy@to,i2strcpy@cp
 21441  005760  C002  F006         	movff	i2strcpy@to+1,i2strcpy@cp+1
 21442  005764  D004               	goto	i2l7118
 21443  005766                     i2l7116:
 21444  005766  4A05               	infsnz	i2strcpy@cp,f,c
 21445  005768  2A06               	incf	i2strcpy@cp+1,f,c
 21446  00576A  4A03               	infsnz	i2strcpy@from,f,c
 21447  00576C  2A04               	incf	i2strcpy@from+1,f,c
 21448  00576E                     i2l7118:
 21449  00576E  C003  FFF6         	movff	i2strcpy@from,tblptrl
 21450  005772  C004  FFF7         	movff	i2strcpy@from+1,tblptrh
 21451  005776                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 21452  005776  6AF8               	clrf	tblptru,c
 21453  005778                     	endif
 21454  005778                     	if	0	;tblptru may be non-zero
 21455  005778                     	endif
 21456  005778  C005  FFD9         	movff	i2strcpy@cp,fsr2l
 21457  00577C  C006  FFDA         	movff	i2strcpy@cp+1,fsr2h
 21458  005780  0008               	tblrd		*
 21459  005782  CFF5 FFDF          	movff	tablat,indf2
 21460  005786  50DF               	movf	indf2,w,c
 21461  005788  B4D8               	btfsc	status,2,c
 21462  00578A  0012               	return	
 21463  00578C  D7EC               	goto	i2l7116
 21464  00578E                     __end_ofi2_strcpy:
 21465                           	opt stack 0
 21466                           pclatu	equ	0xFFB
 21467                           pclath	equ	0xFFA
 21468                           tblptru	equ	0xFF8
 21469                           tblptrh	equ	0xFF7
 21470                           tblptrl	equ	0xFF6
 21471                           tablat	equ	0xFF5
 21472                           prodh	equ	0xFF4
 21473                           prodl	equ	0xFF3
 21474                           intcon	equ	0xFF2
 21475                           intcon2	equ	0xFF1
 21476                           intcon3	equ	0xFF0
 21477                           indf0	equ	0xFEF
 21478                           postinc0	equ	0xFEE
 21479                           fsr0h	equ	0xFEA
 21480                           fsr0l	equ	0xFE9
 21481                           wreg	equ	0xFE8
 21482                           postdec1	equ	0xFE5
 21483                           fsr1h	equ	0xFE2
 21484                           fsr1l	equ	0xFE1
 21485                           indf2	equ	0xFDF
 21486                           postinc2	equ	0xFDE
 21487                           postdec2	equ	0xFDD
 21488                           fsr2h	equ	0xFDA
 21489                           fsr2l	equ	0xFD9
 21490                           status	equ	0xFD8
 21491                           
 21492 ;; *************** function _inputHandler *****************
 21493 ;; Defined at:
 21494 ;;		line 375 in file "UI.c"
 21495 ;; Parameters:    Size  Location     Type
 21496 ;;		None
 21497 ;; Auto vars:     Size  Location     Type
 21498 ;;		None
 21499 ;; Return value:  Size  Location     Type
 21500 ;;                  2   41[COMRAM] int 
 21501 ;; Registers used:
 21502 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21503 ;; Tracked objects:
 21504 ;;		On entry : 0/0
 21505 ;;		On exit  : 0/0
 21506 ;;		Unchanged: 0/0
 21507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21508 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21509 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21510 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21511 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21512 ;;Total ram usage:        4 bytes
 21513 ;; Hardware stack levels used:    1
 21514 ;; Hardware stack levels required when called:    4
 21515 ;; This function calls:
 21516 ;;		_change_state_to_logs_11
 21517 ;;		_change_state_to_logs_12
 21518 ;;		_change_state_to_logs_22
 21519 ;;		_change_state_to_logs_23
 21520 ;;		_change_state_to_logs_33
 21521 ;;		_change_state_to_logs_34
 21522 ;;		_change_state_to_menu_11
 21523 ;;		_change_state_to_menu_23
 21524 ;;		i2_change_state_to_menu_12
 21525 ;;		i2_change_state_to_menu_22
 21526 ;; This function is called by:
 21527 ;;		_updateMenu
 21528 ;; This function uses a non-reentrant model
 21529 ;;
 21530                           
 21531                           	psect	text71
 21532  003838                     __ptext71:
 21533                           	opt stack 0
 21534  003838                     _inputHandler:
 21535                           	opt stack 18
 21536                           
 21537                           ;UI.c: 380: if(firstboot){
 21538                           
 21539                           ;incstack = 0
 21540  003838  0101               	movlb	1	; () banked
 21541  00383A  513B               	movf	_firstboot& (0+255),w,b
 21542  00383C  0101               	movlb	1	; () banked
 21543  00383E  113C               	iorwf	(_firstboot+1)& (0+255),w,b
 21544  003840  B4D8               	btfsc	status,2,c
 21545  003842  D00C               	goto	i2l7662
 21546                           
 21547                           ; BSR set to: 1
 21548                           ;UI.c: 381: change_state_to_menu_11();
 21549  003844  EC27  F02C         	call	_change_state_to_menu_11	;wreg free
 21550                           
 21551                           ;UI.c: 382: firstboot = 0;
 21552  003848  0E00               	movlw	0
 21553  00384A  0101               	movlb	1	; () banked
 21554  00384C  6F3C               	movwf	(_firstboot+1)& (0+255),b
 21555  00384E  0E00               	movlw	0
 21556  003850  6F3B               	movwf	_firstboot& (0+255),b
 21557                           
 21558                           ; BSR set to: 1
 21559                           ;UI.c: 383: return 0;
 21560  003852  0E00               	movlw	0
 21561  003854  6E2B               	movwf	?_inputHandler+1,c
 21562  003856  0E00               	movlw	0
 21563  003858  6E2A               	movwf	?_inputHandler,c
 21564                           
 21565                           ; BSR set to: 1
 21566  00385A  0012               	return	
 21567  00385C                     i2l7662:
 21568                           
 21569                           ; BSR set to: 1
 21570                           ;UI.c: 384: }
 21571                           ;UI.c: 385: if (logstate){
 21572  00385C  0100               	movlb	0	; () banked
 21573  00385E  51F8               	movf	_logstate& (0+255),w,b
 21574  003860  0100               	movlb	0	; () banked
 21575  003862  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 21576  003864  B4D8               	btfsc	status,2,c
 21577  003866  D0C7               	goto	i2l7780
 21578                           
 21579                           ; BSR set to: 0
 21580                           ;UI.c: 386: if(input == 'C' && PORTBbits.RB1 == 1){
 21581  003868  0E43               	movlw	67
 21582  00386A  187D               	xorwf	_input,w,c	;volatile
 21583  00386C  A4D8               	btfss	status,2,c
 21584  00386E  D012               	goto	i2l7680
 21585                           
 21586                           ; BSR set to: 0
 21587  003870  B281               	btfsc	3969,1,c	;volatile
 21588  003872  D009               	goto	i2l7672
 21589  003874  D00F               	goto	i2l7680
 21590  003876                     i2l7670:
 21591                           
 21592                           ;UI.c: 389: _delay((unsigned long)((10)*(32000000/4000.0)));
 21593  003876  0E68               	movlw	104
 21594  003878  6E2C               	movwf	??_inputHandler& (0+255),c
 21595  00387A  0EE4               	movlw	228
 21596  00387C                     i2u1140_47:
 21597  00387C  2EE8               	decfsz	wreg,f,c
 21598  00387E  D7FE               	bra	i2u1140_47
 21599  003880  2E2C               	decfsz	??_inputHandler& (0+255),f,c
 21600  003882  D7FC               	bra	i2u1140_47
 21601  003884  D000               	nop2	
 21602  003886                     i2l7672:
 21603  003886  B281               	btfsc	3969,1,c	;volatile
 21604  003888  D7F6               	goto	i2l7670
 21605  00388A                     i2l7674:
 21606                           
 21607                           ;UI.c: 390: }
 21608                           ;UI.c: 391: return 0;
 21609  00388A  0E00               	movlw	0
 21610  00388C  6E2B               	movwf	?_inputHandler+1,c
 21611  00388E  0E00               	movlw	0
 21612  003890  6E2A               	movwf	?_inputHandler,c
 21613  003892  0012               	return	
 21614  003894                     i2l7680:
 21615                           
 21616                           ;UI.c: 393: else if (input == 'D'){
 21617  003894  0E44               	movlw	68
 21618  003896  187D               	xorwf	_input,w,c	;volatile
 21619  003898  A4D8               	btfss	status,2,c
 21620  00389A  D7F7               	goto	i2l7674
 21621                           
 21622                           ;UI.c: 395: logstate = 0;
 21623  00389C  0E00               	movlw	0
 21624  00389E  0100               	movlb	0	; () banked
 21625  0038A0  6FF9               	movwf	(_logstate+1)& (0+255),b
 21626  0038A2  0E00               	movlw	0
 21627  0038A4  6FF8               	movwf	_logstate& (0+255),b
 21628                           
 21629                           ;UI.c: 396: switch(cur_state){
 21630  0038A6  D012               	goto	i2l7698
 21631  0038A8                     i2l7684:
 21632                           
 21633                           ;UI.c: 398: change_state_to_logs_11();
 21634  0038A8  EC9F  F02C         	call	_change_state_to_logs_11	;wreg free
 21635                           
 21636                           ;UI.c: 399: break;
 21637  0038AC  D7EE               	goto	i2l7674
 21638  0038AE                     i2l7686:
 21639                           
 21640                           ;UI.c: 401: change_state_to_logs_12();
 21641  0038AE  EC87  F02C         	call	_change_state_to_logs_12	;wreg free
 21642                           
 21643                           ;UI.c: 402: break;
 21644  0038B2  D7EB               	goto	i2l7674
 21645  0038B4                     i2l7688:
 21646                           
 21647                           ;UI.c: 404: change_state_to_logs_22();
 21648  0038B4  EC6F  F02C         	call	_change_state_to_logs_22	;wreg free
 21649                           
 21650                           ;UI.c: 405: break;
 21651  0038B8  D7E8               	goto	i2l7674
 21652  0038BA                     i2l7690:
 21653                           
 21654                           ;UI.c: 407: change_state_to_logs_23();
 21655  0038BA  ECCE  F02C         	call	_change_state_to_logs_23	;wreg free
 21656                           
 21657                           ;UI.c: 408: break;
 21658  0038BE  D7E5               	goto	i2l7674
 21659  0038C0                     i2l7692:
 21660                           
 21661                           ;UI.c: 410: change_state_to_logs_33();
 21662  0038C0  EC57  F02C         	call	_change_state_to_logs_33	;wreg free
 21663                           
 21664                           ;UI.c: 411: break;
 21665  0038C4  D7E2               	goto	i2l7674
 21666  0038C6                     i2l7694:
 21667                           
 21668                           ;UI.c: 413: change_state_to_logs_34();
 21669  0038C6  EC3F  F02C         	call	_change_state_to_logs_34	;wreg free
 21670                           
 21671                           ;UI.c: 415: }
 21672                           
 21673                           ;UI.c: 414: break;
 21674  0038CA  D7DF               	goto	i2l7674
 21675  0038CC                     i2l7698:
 21676  0038CC  C0E6  F02C         	movff	_cur_state,??_inputHandler
 21677  0038D0  C0E7  F02D         	movff	_cur_state+1,??_inputHandler+1
 21678                           
 21679                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 21680                           ; Switch size 1, requested type "space"
 21681                           ; Number of cases is 2, Range of values is 3 to 4
 21682                           ; switch strategies available:
 21683                           ; Name         Instructions Cycles
 21684                           ; simple_byte            7     4 (average)
 21685                           ;	Chosen strategy is simple_byte
 21686  0038D4  502D               	movf	??_inputHandler+1,w,c
 21687  0038D6  0A03               	xorlw	3	; case 3
 21688  0038D8  B4D8               	btfsc	status,2,c
 21689  0038DA  D004               	goto	i2l10742
 21690  0038DC  0A07               	xorlw	7	; case 4
 21691  0038DE  B4D8               	btfsc	status,2,c
 21692  0038E0  D00F               	goto	i2l10744
 21693  0038E2  D7D3               	goto	i2l7674
 21694  0038E4                     i2l10742:
 21695                           
 21696                           ; Switch size 1, requested type "space"
 21697                           ; Number of cases is 4, Range of values is 243 to 255
 21698                           ; switch strategies available:
 21699                           ; Name         Instructions Cycles
 21700                           ; simple_byte           13     7 (average)
 21701                           ;	Chosen strategy is simple_byte
 21702  0038E4  502C               	movf	??_inputHandler,w,c
 21703  0038E6  0AF3               	xorlw	243	; case 243
 21704  0038E8  B4D8               	btfsc	status,2,c
 21705  0038EA  D7DE               	goto	i2l7684
 21706  0038EC  0A07               	xorlw	7	; case 244
 21707  0038EE  B4D8               	btfsc	status,2,c
 21708  0038F0  D7DE               	goto	i2l7686
 21709  0038F2  0A0A               	xorlw	10	; case 254
 21710  0038F4  B4D8               	btfsc	status,2,c
 21711  0038F6  D7DE               	goto	i2l7688
 21712  0038F8  0A01               	xorlw	1	; case 255
 21713  0038FA  B4D8               	btfsc	status,2,c
 21714  0038FC  D7DE               	goto	i2l7690
 21715  0038FE  D7C5               	goto	i2l7674
 21716  003900                     i2l10744:
 21717                           
 21718                           ; Switch size 1, requested type "space"
 21719                           ; Number of cases is 2, Range of values is 9 to 10
 21720                           ; switch strategies available:
 21721                           ; Name         Instructions Cycles
 21722                           ; simple_byte            7     4 (average)
 21723                           ;	Chosen strategy is simple_byte
 21724  003900  502C               	movf	??_inputHandler,w,c
 21725  003902  0A09               	xorlw	9	; case 9
 21726  003904  B4D8               	btfsc	status,2,c
 21727  003906  D7DC               	goto	i2l7692
 21728  003908  0A03               	xorlw	3	; case 10
 21729  00390A  B4D8               	btfsc	status,2,c
 21730  00390C  D7DC               	goto	i2l7694
 21731  00390E  D7BD               	goto	i2l7674
 21732  003910                     i2l7710:
 21733                           
 21734                           ;UI.c: 425: if(cur_state == 11){
 21735  003910  0E0B               	movlw	11
 21736  003912  0100               	movlb	0	; () banked
 21737  003914  19E6               	xorwf	_cur_state& (0+255),w,b
 21738  003916  0100               	movlb	0	; () banked
 21739  003918  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 21740  00391A  A4D8               	btfss	status,2,c
 21741  00391C  D005               	goto	i2l7718
 21742                           
 21743                           ; BSR set to: 0
 21744                           ;UI.c: 426: return 0;
 21745  00391E  0E00               	movlw	0
 21746  003920  6E2B               	movwf	?_inputHandler+1,c
 21747  003922  0E00               	movlw	0
 21748  003924  6E2A               	movwf	?_inputHandler,c
 21749                           
 21750                           ; BSR set to: 0
 21751  003926  0012               	return	
 21752  003928                     i2l7718:
 21753                           
 21754                           ; BSR set to: 0
 21755                           ;UI.c: 428: else{
 21756                           ;UI.c: 429: change_state_to_menu_11();
 21757  003928  EC27  F02C         	call	_change_state_to_menu_11	;wreg free
 21758                           
 21759                           ;UI.c: 430: }
 21760                           ;UI.c: 431: return 0;
 21761  00392C  0E00               	movlw	0
 21762  00392E  6E2B               	movwf	?_inputHandler+1,c
 21763  003930  0E00               	movlw	0
 21764  003932  6E2A               	movwf	?_inputHandler,c
 21765  003934  0012               	return	
 21766  003936                     i2l7724:
 21767                           
 21768                           ;UI.c: 433: if(cur_state == 22 || cur_state == 12){
 21769  003936  0E16               	movlw	22
 21770  003938  0100               	movlb	0	; () banked
 21771  00393A  19E6               	xorwf	_cur_state& (0+255),w,b
 21772  00393C  0100               	movlb	0	; () banked
 21773  00393E  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 21774  003940  B4D8               	btfsc	status,2,c
 21775  003942  D007               	goto	i2l7728
 21776                           
 21777                           ; BSR set to: 0
 21778  003944  0E0C               	movlw	12
 21779  003946  0100               	movlb	0	; () banked
 21780  003948  19E6               	xorwf	_cur_state& (0+255),w,b
 21781  00394A  0100               	movlb	0	; () banked
 21782  00394C  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 21783  00394E  A4D8               	btfss	status,2,c
 21784  003950  D005               	goto	i2l7734
 21785  003952                     i2l7728:
 21786                           
 21787                           ; BSR set to: 0
 21788                           ;UI.c: 434: return 0;
 21789  003952  0E00               	movlw	0
 21790  003954  6E2B               	movwf	?_inputHandler+1,c
 21791  003956  0E00               	movlw	0
 21792  003958  6E2A               	movwf	?_inputHandler,c
 21793                           
 21794                           ; BSR set to: 0
 21795  00395A  0012               	return	
 21796  00395C                     i2l7734:
 21797                           
 21798                           ; BSR set to: 0
 21799                           ;UI.c: 436: else if(cur_state == 23){
 21800  00395C  0E17               	movlw	23
 21801  00395E  0100               	movlb	0	; () banked
 21802  003960  19E6               	xorwf	_cur_state& (0+255),w,b
 21803  003962  0100               	movlb	0	; () banked
 21804  003964  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 21805  003966  A4D8               	btfss	status,2,c
 21806  003968  D003               	goto	i2l7738
 21807                           
 21808                           ; BSR set to: 0
 21809                           ;UI.c: 437: change_state_to_menu_22();
 21810  00396A  ECDF  F02B         	call	i2_change_state_to_menu_22	;wreg free
 21811                           
 21812                           ;UI.c: 438: }
 21813  00396E  D002               	goto	i2l7740
 21814  003970                     i2l7738:
 21815                           
 21816                           ;UI.c: 439: else{
 21817                           ;UI.c: 440: change_state_to_menu_12();
 21818  003970  ECF7  F02B         	call	i2_change_state_to_menu_12	;wreg free
 21819  003974                     i2l7740:
 21820                           
 21821                           ;UI.c: 441: }
 21822                           ;UI.c: 442: return 0;
 21823  003974  0E00               	movlw	0
 21824  003976  6E2B               	movwf	?_inputHandler+1,c
 21825  003978  0E00               	movlw	0
 21826  00397A  6E2A               	movwf	?_inputHandler,c
 21827  00397C  0012               	return	
 21828  00397E                     i2l7744:
 21829                           
 21830                           ;UI.c: 444: if(cur_state == 23){
 21831  00397E  0E17               	movlw	23
 21832  003980  0100               	movlb	0	; () banked
 21833  003982  19E6               	xorwf	_cur_state& (0+255),w,b
 21834  003984  0100               	movlb	0	; () banked
 21835  003986  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 21836  003988  A4D8               	btfss	status,2,c
 21837  00398A  D005               	goto	i2l7752
 21838                           
 21839                           ; BSR set to: 0
 21840                           ;UI.c: 445: return 0;
 21841  00398C  0E00               	movlw	0
 21842  00398E  6E2B               	movwf	?_inputHandler+1,c
 21843  003990  0E00               	movlw	0
 21844  003992  6E2A               	movwf	?_inputHandler,c
 21845                           
 21846                           ; BSR set to: 0
 21847  003994  0012               	return	
 21848  003996                     i2l7752:
 21849                           
 21850                           ; BSR set to: 0
 21851                           ;UI.c: 447: else{
 21852                           ;UI.c: 448: change_state_to_menu_23();
 21853  003996  EC0F  F02C         	call	_change_state_to_menu_23	;wreg free
 21854                           
 21855                           ;UI.c: 449: }
 21856                           ;UI.c: 450: return 0;
 21857  00399A  0E00               	movlw	0
 21858  00399C  6E2B               	movwf	?_inputHandler+1,c
 21859  00399E  0E00               	movlw	0
 21860  0039A0  6E2A               	movwf	?_inputHandler,c
 21861  0039A2  0012               	return	
 21862  0039A4                     i2l7758:
 21863                           
 21864                           ;UI.c: 453: up = 1;
 21865  0039A4  0E00               	movlw	0
 21866  0039A6  6E76               	movwf	_up+1,c
 21867  0039A8  0E01               	movlw	1
 21868  0039AA  6E75               	movwf	_up,c
 21869                           
 21870                           ;UI.c: 454: return 1;
 21871  0039AC  0E00               	movlw	0
 21872  0039AE  6E2B               	movwf	?_inputHandler+1,c
 21873  0039B0  0E01               	movlw	1
 21874  0039B2  6E2A               	movwf	?_inputHandler,c
 21875  0039B4  0012               	return	
 21876  0039B6                     i2l7762:
 21877                           
 21878                           ;UI.c: 456: down = 1;
 21879  0039B6  0E00               	movlw	0
 21880  0039B8  6E66               	movwf	_down+1,c
 21881  0039BA  0E01               	movlw	1
 21882  0039BC  6E65               	movwf	_down,c
 21883                           
 21884                           ;UI.c: 457: return 1;
 21885  0039BE  0E00               	movlw	0
 21886  0039C0  6E2B               	movwf	?_inputHandler+1,c
 21887  0039C2  0E01               	movlw	1
 21888  0039C4  6E2A               	movwf	?_inputHandler,c
 21889  0039C6  0012               	return	
 21890  0039C8                     i2l7766:
 21891                           
 21892                           ;UI.c: 459: enter = 1;
 21893  0039C8  0E00               	movlw	0
 21894  0039CA  6E68               	movwf	_enter+1,c
 21895  0039CC  0E01               	movlw	1
 21896  0039CE  6E67               	movwf	_enter,c
 21897                           
 21898                           ;UI.c: 460: return 1;
 21899  0039D0  0E00               	movlw	0
 21900  0039D2  6E2B               	movwf	?_inputHandler+1,c
 21901  0039D4  0E01               	movlw	1
 21902  0039D6  6E2A               	movwf	?_inputHandler,c
 21903  0039D8  0012               	return	
 21904  0039DA                     i2l7770:
 21905                           
 21906                           ;UI.c: 462: back = 1;
 21907  0039DA  0E00               	movlw	0
 21908  0039DC  6E64               	movwf	_back+1,c
 21909  0039DE  0E01               	movlw	1
 21910  0039E0  6E63               	movwf	_back,c
 21911                           
 21912                           ;UI.c: 463: return 1;
 21913  0039E2  0E00               	movlw	0
 21914  0039E4  6E2B               	movwf	?_inputHandler+1,c
 21915  0039E6  0E01               	movlw	1
 21916  0039E8  6E2A               	movwf	?_inputHandler,c
 21917  0039EA  0012               	return	
 21918  0039EC                     i2l7774:
 21919                           
 21920                           ;UI.c: 466: return 1;
 21921  0039EC  0E00               	movlw	0
 21922  0039EE  6E2B               	movwf	?_inputHandler+1,c
 21923  0039F0  0E01               	movlw	1
 21924  0039F2  6E2A               	movwf	?_inputHandler,c
 21925                           
 21926                           ;UI.c: 467: }
 21927  0039F4  0012               	return	
 21928  0039F6                     i2l7780:
 21929  0039F6  507D               	movf	_input,w,c	;volatile
 21930                           
 21931                           ; Switch size 1, requested type "space"
 21932                           ; Number of cases is 7, Range of values is 49 to 68
 21933                           ; switch strategies available:
 21934                           ; Name         Instructions Cycles
 21935                           ; simple_byte           22    12 (average)
 21936                           ;	Chosen strategy is simple_byte
 21937  0039F8  0A31               	xorlw	49	; case 49
 21938  0039FA  B4D8               	btfsc	status,2,c
 21939  0039FC  D789               	goto	i2l7710
 21940  0039FE  0A03               	xorlw	3	; case 50
 21941  003A00  B4D8               	btfsc	status,2,c
 21942  003A02  D799               	goto	i2l7724
 21943  003A04  0A01               	xorlw	1	; case 51
 21944  003A06  B4D8               	btfsc	status,2,c
 21945  003A08  D7BA               	goto	i2l7744
 21946  003A0A  0A72               	xorlw	114	; case 65
 21947  003A0C  B4D8               	btfsc	status,2,c
 21948  003A0E  D7CA               	goto	i2l7758
 21949  003A10  0A03               	xorlw	3	; case 66
 21950  003A12  B4D8               	btfsc	status,2,c
 21951  003A14  D7D0               	goto	i2l7762
 21952  003A16  0A01               	xorlw	1	; case 67
 21953  003A18  B4D8               	btfsc	status,2,c
 21954  003A1A  D7D6               	goto	i2l7766
 21955  003A1C  0A07               	xorlw	7	; case 68
 21956  003A1E  B4D8               	btfsc	status,2,c
 21957  003A20  D7DC               	goto	i2l7770
 21958  003A22  D7E4               	goto	i2l7774
 21959  003A24                     __end_of_inputHandler:
 21960                           	opt stack 0
 21961                           pclatu	equ	0xFFB
 21962                           pclath	equ	0xFFA
 21963                           tblptru	equ	0xFF8
 21964                           tblptrh	equ	0xFF7
 21965                           tblptrl	equ	0xFF6
 21966                           tablat	equ	0xFF5
 21967                           prodh	equ	0xFF4
 21968                           prodl	equ	0xFF3
 21969                           intcon	equ	0xFF2
 21970                           intcon2	equ	0xFF1
 21971                           intcon3	equ	0xFF0
 21972                           indf0	equ	0xFEF
 21973                           postinc0	equ	0xFEE
 21974                           fsr0h	equ	0xFEA
 21975                           fsr0l	equ	0xFE9
 21976                           wreg	equ	0xFE8
 21977                           postdec1	equ	0xFE5
 21978                           fsr1h	equ	0xFE2
 21979                           fsr1l	equ	0xFE1
 21980                           indf2	equ	0xFDF
 21981                           postinc2	equ	0xFDE
 21982                           postdec2	equ	0xFDD
 21983                           fsr2h	equ	0xFDA
 21984                           fsr2l	equ	0xFD9
 21985                           status	equ	0xFD8
 21986                           
 21987 ;; *************** function i2_change_state_to_menu_22 *****************
 21988 ;; Defined at:
 21989 ;;		line 501 in file "UI.c"
 21990 ;; Parameters:    Size  Location     Type
 21991 ;;		None
 21992 ;; Auto vars:     Size  Location     Type
 21993 ;;		None
 21994 ;; Return value:  Size  Location     Type
 21995 ;;                  1    wreg      void 
 21996 ;; Registers used:
 21997 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21998 ;; Tracked objects:
 21999 ;;		On entry : 0/0
 22000 ;;		On exit  : 0/0
 22001 ;;		Unchanged: 0/0
 22002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22003 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22004 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22005 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22006 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22007 ;;Total ram usage:        0 bytes
 22008 ;; Hardware stack levels used:    1
 22009 ;; Hardware stack levels required when called:    3
 22010 ;; This function calls:
 22011 ;;		i2_lcdInst
 22012 ;;		i2_printf
 22013 ;; This function is called by:
 22014 ;;		_updateMenu
 22015 ;;		_inputHandler
 22016 ;; This function uses a non-reentrant model
 22017 ;;
 22018                           
 22019                           	psect	text72
 22020  0057BE                     __ptext72:
 22021                           	opt stack 0
 22022  0057BE                     i2_change_state_to_menu_22:
 22023                           	opt stack 19
 22024                           
 22025                           ;UI.c: 502: cur_state = 22;
 22026                           
 22027                           ;incstack = 0
 22028  0057BE  0E00               	movlw	0
 22029  0057C0  0100               	movlb	0	; () banked
 22030  0057C2  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22031  0057C4  0E16               	movlw	22
 22032  0057C6  6FE6               	movwf	_cur_state& (0+255),b
 22033                           
 22034                           ; BSR set to: 0
 22035                           ;UI.c: 504: lcdInst(0b10000000);;
 22036  0057C8  0E80               	movlw	128
 22037  0057CA  EC1E  F02E         	call	i2_lcdInst
 22038                           
 22039                           ;UI.c: 505: printf("2. SORT        <");
 22040  0057CE  0ED8               	movlw	low STR_34
 22041  0057D0  6E0D               	movwf	i2printf@f,c
 22042  0057D2  0EFD               	movlw	high STR_34
 22043  0057D4  6E0E               	movwf	i2printf@f+1,c
 22044  0057D6  EC29  F012         	call	i2_printf	;wreg free
 22045                           
 22046                           ;UI.c: 506: lcdInst(0b11000000);;
 22047  0057DA  0EC0               	movlw	192
 22048  0057DC  EC1E  F02E         	call	i2_lcdInst
 22049                           
 22050                           ;UI.c: 507: printf("3. LOGS         ");
 22051  0057E0  0E1D               	movlw	low STR_36
 22052  0057E2  6E0D               	movwf	i2printf@f,c
 22053  0057E4  0EFD               	movlw	high STR_36
 22054  0057E6  6E0E               	movwf	i2printf@f+1,c
 22055  0057E8  EC29  F012         	call	i2_printf	;wreg free
 22056  0057EC  0012               	return		;funcret
 22057  0057EE                     __end_ofi2_change_state_to_menu_22:
 22058                           	opt stack 0
 22059                           pclatu	equ	0xFFB
 22060                           pclath	equ	0xFFA
 22061                           tblptru	equ	0xFF8
 22062                           tblptrh	equ	0xFF7
 22063                           tblptrl	equ	0xFF6
 22064                           tablat	equ	0xFF5
 22065                           prodh	equ	0xFF4
 22066                           prodl	equ	0xFF3
 22067                           intcon	equ	0xFF2
 22068                           intcon2	equ	0xFF1
 22069                           intcon3	equ	0xFF0
 22070                           indf0	equ	0xFEF
 22071                           postinc0	equ	0xFEE
 22072                           fsr0h	equ	0xFEA
 22073                           fsr0l	equ	0xFE9
 22074                           wreg	equ	0xFE8
 22075                           postdec1	equ	0xFE5
 22076                           fsr1h	equ	0xFE2
 22077                           fsr1l	equ	0xFE1
 22078                           indf2	equ	0xFDF
 22079                           postinc2	equ	0xFDE
 22080                           postdec2	equ	0xFDD
 22081                           fsr2h	equ	0xFDA
 22082                           fsr2l	equ	0xFD9
 22083                           status	equ	0xFD8
 22084                           
 22085 ;; *************** function i2_change_state_to_menu_12 *****************
 22086 ;; Defined at:
 22087 ;;		line 493 in file "UI.c"
 22088 ;; Parameters:    Size  Location     Type
 22089 ;;		None
 22090 ;; Auto vars:     Size  Location     Type
 22091 ;;		None
 22092 ;; Return value:  Size  Location     Type
 22093 ;;                  1    wreg      void 
 22094 ;; Registers used:
 22095 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22096 ;; Tracked objects:
 22097 ;;		On entry : 0/0
 22098 ;;		On exit  : 0/0
 22099 ;;		Unchanged: 0/0
 22100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22101 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22102 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22103 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22104 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22105 ;;Total ram usage:        0 bytes
 22106 ;; Hardware stack levels used:    1
 22107 ;; Hardware stack levels required when called:    3
 22108 ;; This function calls:
 22109 ;;		i2_lcdInst
 22110 ;;		i2_printf
 22111 ;; This function is called by:
 22112 ;;		_updateMenu
 22113 ;;		_inputHandler
 22114 ;; This function uses a non-reentrant model
 22115 ;;
 22116                           
 22117                           	psect	text73
 22118  0057EE                     __ptext73:
 22119                           	opt stack 0
 22120  0057EE                     i2_change_state_to_menu_12:
 22121                           	opt stack 19
 22122                           
 22123                           ;UI.c: 494: cur_state = 12;
 22124                           
 22125                           ;incstack = 0
 22126  0057EE  0E00               	movlw	0
 22127  0057F0  0100               	movlb	0	; () banked
 22128  0057F2  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22129  0057F4  0E0C               	movlw	12
 22130  0057F6  6FE6               	movwf	_cur_state& (0+255),b
 22131                           
 22132                           ; BSR set to: 0
 22133                           ;UI.c: 496: lcdInst(0b10000000);;
 22134  0057F8  0E80               	movlw	128
 22135  0057FA  EC1E  F02E         	call	i2_lcdInst
 22136                           
 22137                           ;UI.c: 497: printf("1. DATE/TIME    ");
 22138  0057FE  0E3F               	movlw	low STR_33
 22139  005800  6E0D               	movwf	i2printf@f,c
 22140  005802  0EFD               	movlw	high STR_33
 22141  005804  6E0E               	movwf	i2printf@f+1,c
 22142  005806  EC29  F012         	call	i2_printf	;wreg free
 22143                           
 22144                           ;UI.c: 498: lcdInst(0b11000000);;
 22145  00580A  0EC0               	movlw	192
 22146  00580C  EC1E  F02E         	call	i2_lcdInst
 22147                           
 22148                           ;UI.c: 499: printf("2. SORT        <");
 22149  005810  0ED8               	movlw	low STR_34
 22150  005812  6E0D               	movwf	i2printf@f,c
 22151  005814  0EFD               	movlw	high STR_34
 22152  005816  6E0E               	movwf	i2printf@f+1,c
 22153  005818  EC29  F012         	call	i2_printf	;wreg free
 22154  00581C  0012               	return		;funcret
 22155  00581E                     __end_ofi2_change_state_to_menu_12:
 22156                           	opt stack 0
 22157                           pclatu	equ	0xFFB
 22158                           pclath	equ	0xFFA
 22159                           tblptru	equ	0xFF8
 22160                           tblptrh	equ	0xFF7
 22161                           tblptrl	equ	0xFF6
 22162                           tablat	equ	0xFF5
 22163                           prodh	equ	0xFF4
 22164                           prodl	equ	0xFF3
 22165                           intcon	equ	0xFF2
 22166                           intcon2	equ	0xFF1
 22167                           intcon3	equ	0xFF0
 22168                           indf0	equ	0xFEF
 22169                           postinc0	equ	0xFEE
 22170                           fsr0h	equ	0xFEA
 22171                           fsr0l	equ	0xFE9
 22172                           wreg	equ	0xFE8
 22173                           postdec1	equ	0xFE5
 22174                           fsr1h	equ	0xFE2
 22175                           fsr1l	equ	0xFE1
 22176                           indf2	equ	0xFDF
 22177                           postinc2	equ	0xFDE
 22178                           postdec2	equ	0xFDD
 22179                           fsr2h	equ	0xFDA
 22180                           fsr2l	equ	0xFD9
 22181                           status	equ	0xFD8
 22182                           
 22183 ;; *************** function _change_state_to_menu_23 *****************
 22184 ;; Defined at:
 22185 ;;		line 509 in file "UI.c"
 22186 ;; Parameters:    Size  Location     Type
 22187 ;;		None
 22188 ;; Auto vars:     Size  Location     Type
 22189 ;;		None
 22190 ;; Return value:  Size  Location     Type
 22191 ;;                  1    wreg      void 
 22192 ;; Registers used:
 22193 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22194 ;; Tracked objects:
 22195 ;;		On entry : 0/0
 22196 ;;		On exit  : 0/0
 22197 ;;		Unchanged: 0/0
 22198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22199 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22200 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22201 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22202 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22203 ;;Total ram usage:        0 bytes
 22204 ;; Hardware stack levels used:    1
 22205 ;; Hardware stack levels required when called:    3
 22206 ;; This function calls:
 22207 ;;		i2_lcdInst
 22208 ;;		i2_printf
 22209 ;; This function is called by:
 22210 ;;		_updateMenu
 22211 ;;		_inputHandler
 22212 ;; This function uses a non-reentrant model
 22213 ;;
 22214                           
 22215                           	psect	text74
 22216  00581E                     __ptext74:
 22217                           	opt stack 0
 22218  00581E                     _change_state_to_menu_23:
 22219                           	opt stack 18
 22220                           
 22221                           ;UI.c: 510: cur_state = 23;
 22222                           
 22223                           ;incstack = 0
 22224  00581E  0E00               	movlw	0
 22225  005820  0100               	movlb	0	; () banked
 22226  005822  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22227  005824  0E17               	movlw	23
 22228  005826  6FE6               	movwf	_cur_state& (0+255),b
 22229                           
 22230                           ; BSR set to: 0
 22231                           ;UI.c: 512: lcdInst(0b10000000);;
 22232  005828  0E80               	movlw	128
 22233  00582A  EC1E  F02E         	call	i2_lcdInst
 22234                           
 22235                           ;UI.c: 513: printf("2. SORT         ");
 22236  00582E  0E2E               	movlw	low STR_32
 22237  005830  6E0D               	movwf	i2printf@f,c
 22238  005832  0EFD               	movlw	high STR_32
 22239  005834  6E0E               	movwf	i2printf@f+1,c
 22240  005836  EC29  F012         	call	i2_printf	;wreg free
 22241                           
 22242                           ;UI.c: 514: lcdInst(0b11000000);;
 22243  00583A  0EC0               	movlw	192
 22244  00583C  EC1E  F02E         	call	i2_lcdInst
 22245                           
 22246                           ;UI.c: 515: printf("3. LOGS        <");
 22247  005840  0EC7               	movlw	low STR_38
 22248  005842  6E0D               	movwf	i2printf@f,c
 22249  005844  0EFD               	movlw	high STR_38
 22250  005846  6E0E               	movwf	i2printf@f+1,c
 22251  005848  EC29  F012         	call	i2_printf	;wreg free
 22252  00584C  0012               	return		;funcret
 22253  00584E                     __end_of_change_state_to_menu_23:
 22254                           	opt stack 0
 22255                           pclatu	equ	0xFFB
 22256                           pclath	equ	0xFFA
 22257                           tblptru	equ	0xFF8
 22258                           tblptrh	equ	0xFF7
 22259                           tblptrl	equ	0xFF6
 22260                           tablat	equ	0xFF5
 22261                           prodh	equ	0xFF4
 22262                           prodl	equ	0xFF3
 22263                           intcon	equ	0xFF2
 22264                           intcon2	equ	0xFF1
 22265                           intcon3	equ	0xFF0
 22266                           indf0	equ	0xFEF
 22267                           postinc0	equ	0xFEE
 22268                           fsr0h	equ	0xFEA
 22269                           fsr0l	equ	0xFE9
 22270                           wreg	equ	0xFE8
 22271                           postdec1	equ	0xFE5
 22272                           fsr1h	equ	0xFE2
 22273                           fsr1l	equ	0xFE1
 22274                           indf2	equ	0xFDF
 22275                           postinc2	equ	0xFDE
 22276                           postdec2	equ	0xFDD
 22277                           fsr2h	equ	0xFDA
 22278                           fsr2l	equ	0xFD9
 22279                           status	equ	0xFD8
 22280                           
 22281 ;; *************** function _change_state_to_menu_11 *****************
 22282 ;; Defined at:
 22283 ;;		line 485 in file "UI.c"
 22284 ;; Parameters:    Size  Location     Type
 22285 ;;		None
 22286 ;; Auto vars:     Size  Location     Type
 22287 ;;		None
 22288 ;; Return value:  Size  Location     Type
 22289 ;;                  1    wreg      void 
 22290 ;; Registers used:
 22291 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22292 ;; Tracked objects:
 22293 ;;		On entry : 0/0
 22294 ;;		On exit  : 0/0
 22295 ;;		Unchanged: 0/0
 22296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22297 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22298 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22299 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22300 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22301 ;;Total ram usage:        0 bytes
 22302 ;; Hardware stack levels used:    1
 22303 ;; Hardware stack levels required when called:    3
 22304 ;; This function calls:
 22305 ;;		i2_lcdInst
 22306 ;;		i2_printf
 22307 ;; This function is called by:
 22308 ;;		_updateMenu
 22309 ;;		_inputHandler
 22310 ;; This function uses a non-reentrant model
 22311 ;;
 22312                           
 22313                           	psect	text75
 22314  00584E                     __ptext75:
 22315                           	opt stack 0
 22316  00584E                     _change_state_to_menu_11:
 22317                           	opt stack 18
 22318                           
 22319                           ;UI.c: 486: cur_state = 11;
 22320                           
 22321                           ;incstack = 0
 22322  00584E  0E00               	movlw	0
 22323  005850  0100               	movlb	0	; () banked
 22324  005852  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22325  005854  0E0B               	movlw	11
 22326  005856  6FE6               	movwf	_cur_state& (0+255),b
 22327                           
 22328                           ; BSR set to: 0
 22329                           ;UI.c: 488: lcdInst(0b10000000);;
 22330  005858  0E80               	movlw	128
 22331  00585A  EC1E  F02E         	call	i2_lcdInst
 22332                           
 22333                           ;UI.c: 489: printf("1. DATE/TIME   <");
 22334  00585E  0EE9               	movlw	low STR_31
 22335  005860  6E0D               	movwf	i2printf@f,c
 22336  005862  0EFD               	movlw	high STR_31
 22337  005864  6E0E               	movwf	i2printf@f+1,c
 22338  005866  EC29  F012         	call	i2_printf	;wreg free
 22339                           
 22340                           ;UI.c: 490: lcdInst(0b11000000);;
 22341  00586A  0EC0               	movlw	192
 22342  00586C  EC1E  F02E         	call	i2_lcdInst
 22343                           
 22344                           ;UI.c: 491: printf("2. SORT         ");
 22345  005870  0E2E               	movlw	low STR_32
 22346  005872  6E0D               	movwf	i2printf@f,c
 22347  005874  0EFD               	movlw	high STR_32
 22348  005876  6E0E               	movwf	i2printf@f+1,c
 22349  005878  EC29  F012         	call	i2_printf	;wreg free
 22350  00587C  0012               	return		;funcret
 22351  00587E                     __end_of_change_state_to_menu_11:
 22352                           	opt stack 0
 22353                           pclatu	equ	0xFFB
 22354                           pclath	equ	0xFFA
 22355                           tblptru	equ	0xFF8
 22356                           tblptrh	equ	0xFF7
 22357                           tblptrl	equ	0xFF6
 22358                           tablat	equ	0xFF5
 22359                           prodh	equ	0xFF4
 22360                           prodl	equ	0xFF3
 22361                           intcon	equ	0xFF2
 22362                           intcon2	equ	0xFF1
 22363                           intcon3	equ	0xFF0
 22364                           indf0	equ	0xFEF
 22365                           postinc0	equ	0xFEE
 22366                           fsr0h	equ	0xFEA
 22367                           fsr0l	equ	0xFE9
 22368                           wreg	equ	0xFE8
 22369                           postdec1	equ	0xFE5
 22370                           fsr1h	equ	0xFE2
 22371                           fsr1l	equ	0xFE1
 22372                           indf2	equ	0xFDF
 22373                           postinc2	equ	0xFDE
 22374                           postdec2	equ	0xFDD
 22375                           fsr2h	equ	0xFDA
 22376                           fsr2l	equ	0xFD9
 22377                           status	equ	0xFD8
 22378                           
 22379 ;; *************** function _change_state_to_logs_34 *****************
 22380 ;; Defined at:
 22381 ;;		line 552 in file "UI.c"
 22382 ;; Parameters:    Size  Location     Type
 22383 ;;		None
 22384 ;; Auto vars:     Size  Location     Type
 22385 ;;		None
 22386 ;; Return value:  Size  Location     Type
 22387 ;;                  1    wreg      void 
 22388 ;; Registers used:
 22389 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22390 ;; Tracked objects:
 22391 ;;		On entry : 0/0
 22392 ;;		On exit  : 0/0
 22393 ;;		Unchanged: 0/0
 22394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22395 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22396 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22397 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22398 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22399 ;;Total ram usage:        0 bytes
 22400 ;; Hardware stack levels used:    1
 22401 ;; Hardware stack levels required when called:    3
 22402 ;; This function calls:
 22403 ;;		i2_lcdInst
 22404 ;;		i2_printf
 22405 ;; This function is called by:
 22406 ;;		_updateMenu
 22407 ;;		_inputHandler
 22408 ;; This function uses a non-reentrant model
 22409 ;;
 22410                           
 22411                           	psect	text76
 22412  00587E                     __ptext76:
 22413                           	opt stack 0
 22414  00587E                     _change_state_to_logs_34:
 22415                           	opt stack 18
 22416                           
 22417                           ;UI.c: 553: cur_state = 1034;
 22418                           
 22419                           ;incstack = 0
 22420  00587E  0E04               	movlw	4
 22421  005880  0100               	movlb	0	; () banked
 22422  005882  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22423  005884  0E0A               	movlw	10
 22424  005886  6FE6               	movwf	_cur_state& (0+255),b
 22425                           
 22426                           ; BSR set to: 0
 22427                           ;UI.c: 554: lcdInst(0b10000000);;
 22428  005888  0E80               	movlw	128
 22429  00588A  EC1E  F02E         	call	i2_lcdInst
 22430                           
 22431                           ;UI.c: 555: printf("LOG 3           ");
 22432  00588E  0EFB               	movlw	low STR_44
 22433  005890  6E0D               	movwf	i2printf@f,c
 22434  005892  0EFC               	movlw	high STR_44
 22435  005894  6E0E               	movwf	i2printf@f+1,c
 22436  005896  EC29  F012         	call	i2_printf	;wreg free
 22437                           
 22438                           ;UI.c: 556: lcdInst(0b11000000);;
 22439  00589A  0EC0               	movlw	192
 22440  00589C  EC1E  F02E         	call	i2_lcdInst
 22441                           
 22442                           ;UI.c: 557: printf("LOG 4          <");
 22443  0058A0  0EB6               	movlw	low STR_50
 22444  0058A2  6E0D               	movwf	i2printf@f,c
 22445  0058A4  0EFD               	movlw	high STR_50
 22446  0058A6  6E0E               	movwf	i2printf@f+1,c
 22447  0058A8  EC29  F012         	call	i2_printf	;wreg free
 22448  0058AC  0012               	return		;funcret
 22449  0058AE                     __end_of_change_state_to_logs_34:
 22450                           	opt stack 0
 22451                           pclatu	equ	0xFFB
 22452                           pclath	equ	0xFFA
 22453                           tblptru	equ	0xFF8
 22454                           tblptrh	equ	0xFF7
 22455                           tblptrl	equ	0xFF6
 22456                           tablat	equ	0xFF5
 22457                           prodh	equ	0xFF4
 22458                           prodl	equ	0xFF3
 22459                           intcon	equ	0xFF2
 22460                           intcon2	equ	0xFF1
 22461                           intcon3	equ	0xFF0
 22462                           indf0	equ	0xFEF
 22463                           postinc0	equ	0xFEE
 22464                           fsr0h	equ	0xFEA
 22465                           fsr0l	equ	0xFE9
 22466                           wreg	equ	0xFE8
 22467                           postdec1	equ	0xFE5
 22468                           fsr1h	equ	0xFE2
 22469                           fsr1l	equ	0xFE1
 22470                           indf2	equ	0xFDF
 22471                           postinc2	equ	0xFDE
 22472                           postdec2	equ	0xFDD
 22473                           fsr2h	equ	0xFDA
 22474                           fsr2l	equ	0xFD9
 22475                           status	equ	0xFD8
 22476                           
 22477 ;; *************** function _change_state_to_logs_33 *****************
 22478 ;; Defined at:
 22479 ;;		line 545 in file "UI.c"
 22480 ;; Parameters:    Size  Location     Type
 22481 ;;		None
 22482 ;; Auto vars:     Size  Location     Type
 22483 ;;		None
 22484 ;; Return value:  Size  Location     Type
 22485 ;;                  1    wreg      void 
 22486 ;; Registers used:
 22487 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22488 ;; Tracked objects:
 22489 ;;		On entry : 0/0
 22490 ;;		On exit  : 0/0
 22491 ;;		Unchanged: 0/0
 22492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22493 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22494 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22495 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22496 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22497 ;;Total ram usage:        0 bytes
 22498 ;; Hardware stack levels used:    1
 22499 ;; Hardware stack levels required when called:    3
 22500 ;; This function calls:
 22501 ;;		i2_lcdInst
 22502 ;;		i2_printf
 22503 ;; This function is called by:
 22504 ;;		_updateMenu
 22505 ;;		_inputHandler
 22506 ;; This function uses a non-reentrant model
 22507 ;;
 22508                           
 22509                           	psect	text77
 22510  0058AE                     __ptext77:
 22511                           	opt stack 0
 22512  0058AE                     _change_state_to_logs_33:
 22513                           	opt stack 18
 22514                           
 22515                           ;UI.c: 546: cur_state = 1033;
 22516                           
 22517                           ;incstack = 0
 22518  0058AE  0E04               	movlw	4
 22519  0058B0  0100               	movlb	0	; () banked
 22520  0058B2  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22521  0058B4  0E09               	movlw	9
 22522  0058B6  6FE6               	movwf	_cur_state& (0+255),b
 22523                           
 22524                           ; BSR set to: 0
 22525                           ;UI.c: 547: lcdInst(0b10000000);;
 22526  0058B8  0E80               	movlw	128
 22527  0058BA  EC1E  F02E         	call	i2_lcdInst
 22528                           
 22529                           ;UI.c: 548: printf("LOG 3          <");
 22530  0058BE  0EA5               	movlw	low STR_46
 22531  0058C0  6E0D               	movwf	i2printf@f,c
 22532  0058C2  0EFD               	movlw	high STR_46
 22533  0058C4  6E0E               	movwf	i2printf@f+1,c
 22534  0058C6  EC29  F012         	call	i2_printf	;wreg free
 22535                           
 22536                           ;UI.c: 549: lcdInst(0b11000000);;
 22537  0058CA  0EC0               	movlw	192
 22538  0058CC  EC1E  F02E         	call	i2_lcdInst
 22539                           
 22540                           ;UI.c: 550: printf("LOG 4           ");
 22541  0058D0  0E0C               	movlw	low STR_48
 22542  0058D2  6E0D               	movwf	i2printf@f,c
 22543  0058D4  0EFD               	movlw	high STR_48
 22544  0058D6  6E0E               	movwf	i2printf@f+1,c
 22545  0058D8  EC29  F012         	call	i2_printf	;wreg free
 22546  0058DC  0012               	return		;funcret
 22547  0058DE                     __end_of_change_state_to_logs_33:
 22548                           	opt stack 0
 22549                           pclatu	equ	0xFFB
 22550                           pclath	equ	0xFFA
 22551                           tblptru	equ	0xFF8
 22552                           tblptrh	equ	0xFF7
 22553                           tblptrl	equ	0xFF6
 22554                           tablat	equ	0xFF5
 22555                           prodh	equ	0xFF4
 22556                           prodl	equ	0xFF3
 22557                           intcon	equ	0xFF2
 22558                           intcon2	equ	0xFF1
 22559                           intcon3	equ	0xFF0
 22560                           indf0	equ	0xFEF
 22561                           postinc0	equ	0xFEE
 22562                           fsr0h	equ	0xFEA
 22563                           fsr0l	equ	0xFE9
 22564                           wreg	equ	0xFE8
 22565                           postdec1	equ	0xFE5
 22566                           fsr1h	equ	0xFE2
 22567                           fsr1l	equ	0xFE1
 22568                           indf2	equ	0xFDF
 22569                           postinc2	equ	0xFDE
 22570                           postdec2	equ	0xFDD
 22571                           fsr2h	equ	0xFDA
 22572                           fsr2l	equ	0xFD9
 22573                           status	equ	0xFD8
 22574                           
 22575 ;; *************** function _change_state_to_logs_23 *****************
 22576 ;; Defined at:
 22577 ;;		line 538 in file "UI.c"
 22578 ;; Parameters:    Size  Location     Type
 22579 ;;		None
 22580 ;; Auto vars:     Size  Location     Type
 22581 ;;		None
 22582 ;; Return value:  Size  Location     Type
 22583 ;;                  1    wreg      void 
 22584 ;; Registers used:
 22585 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22586 ;; Tracked objects:
 22587 ;;		On entry : 0/0
 22588 ;;		On exit  : 0/0
 22589 ;;		Unchanged: 0/0
 22590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22591 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22592 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22593 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22594 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22595 ;;Total ram usage:        0 bytes
 22596 ;; Hardware stack levels used:    1
 22597 ;; Hardware stack levels required when called:    3
 22598 ;; This function calls:
 22599 ;;		i2_lcdInst
 22600 ;;		i2_printf
 22601 ;; This function is called by:
 22602 ;;		_updateMenu
 22603 ;;		_inputHandler
 22604 ;; This function uses a non-reentrant model
 22605 ;;
 22606                           
 22607                           	psect	text78
 22608  00599C                     __ptext78:
 22609                           	opt stack 0
 22610  00599C                     _change_state_to_logs_23:
 22611                           	opt stack 18
 22612                           
 22613                           ;UI.c: 539: cur_state = 1023;
 22614                           
 22615                           ;incstack = 0
 22616  00599C  0E03               	movlw	3
 22617  00599E  0100               	movlb	0	; () banked
 22618  0059A0  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22619  0059A2  69E6               	setf	_cur_state& (0+255),b
 22620                           
 22621                           ; BSR set to: 0
 22622                           ;UI.c: 540: lcdInst(0b10000000);;
 22623  0059A4  0E80               	movlw	128
 22624  0059A6  EC1E  F02E         	call	i2_lcdInst
 22625                           
 22626                           ;UI.c: 541: printf("LOG 2           ");
 22627  0059AA  0EEA               	movlw	low STR_40
 22628  0059AC  6E0D               	movwf	i2printf@f,c
 22629  0059AE  0EFC               	movlw	high STR_40
 22630  0059B0  6E0E               	movwf	i2printf@f+1,c
 22631  0059B2  EC29  F012         	call	i2_printf	;wreg free
 22632                           
 22633                           ;UI.c: 542: lcdInst(0b11000000);;
 22634  0059B6  0EC0               	movlw	192
 22635  0059B8  EC1E  F02E         	call	i2_lcdInst
 22636                           
 22637                           ;UI.c: 543: printf("LOG 3          <");
 22638  0059BC  0EA5               	movlw	low STR_46
 22639  0059BE  6E0D               	movwf	i2printf@f,c
 22640  0059C0  0EFD               	movlw	high STR_46
 22641  0059C2  6E0E               	movwf	i2printf@f+1,c
 22642  0059C4  EC29  F012         	call	i2_printf	;wreg free
 22643  0059C8  0012               	return		;funcret
 22644  0059CA                     __end_of_change_state_to_logs_23:
 22645                           	opt stack 0
 22646                           pclatu	equ	0xFFB
 22647                           pclath	equ	0xFFA
 22648                           tblptru	equ	0xFF8
 22649                           tblptrh	equ	0xFF7
 22650                           tblptrl	equ	0xFF6
 22651                           tablat	equ	0xFF5
 22652                           prodh	equ	0xFF4
 22653                           prodl	equ	0xFF3
 22654                           intcon	equ	0xFF2
 22655                           intcon2	equ	0xFF1
 22656                           intcon3	equ	0xFF0
 22657                           indf0	equ	0xFEF
 22658                           postinc0	equ	0xFEE
 22659                           fsr0h	equ	0xFEA
 22660                           fsr0l	equ	0xFE9
 22661                           wreg	equ	0xFE8
 22662                           postdec1	equ	0xFE5
 22663                           fsr1h	equ	0xFE2
 22664                           fsr1l	equ	0xFE1
 22665                           indf2	equ	0xFDF
 22666                           postinc2	equ	0xFDE
 22667                           postdec2	equ	0xFDD
 22668                           fsr2h	equ	0xFDA
 22669                           fsr2l	equ	0xFD9
 22670                           status	equ	0xFD8
 22671                           
 22672 ;; *************** function _change_state_to_logs_22 *****************
 22673 ;; Defined at:
 22674 ;;		line 531 in file "UI.c"
 22675 ;; Parameters:    Size  Location     Type
 22676 ;;		None
 22677 ;; Auto vars:     Size  Location     Type
 22678 ;;		None
 22679 ;; Return value:  Size  Location     Type
 22680 ;;                  1    wreg      void 
 22681 ;; Registers used:
 22682 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22683 ;; Tracked objects:
 22684 ;;		On entry : 0/0
 22685 ;;		On exit  : 0/0
 22686 ;;		Unchanged: 0/0
 22687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22688 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22689 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22690 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22691 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22692 ;;Total ram usage:        0 bytes
 22693 ;; Hardware stack levels used:    1
 22694 ;; Hardware stack levels required when called:    3
 22695 ;; This function calls:
 22696 ;;		i2_lcdInst
 22697 ;;		i2_printf
 22698 ;; This function is called by:
 22699 ;;		_updateMenu
 22700 ;;		_inputHandler
 22701 ;; This function uses a non-reentrant model
 22702 ;;
 22703                           
 22704                           	psect	text79
 22705  0058DE                     __ptext79:
 22706                           	opt stack 0
 22707  0058DE                     _change_state_to_logs_22:
 22708                           	opt stack 18
 22709                           
 22710                           ;UI.c: 532: cur_state = 1022;
 22711                           
 22712                           ;incstack = 0
 22713  0058DE  0E03               	movlw	3
 22714  0058E0  0100               	movlb	0	; () banked
 22715  0058E2  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22716  0058E4  0EFE               	movlw	254
 22717  0058E6  6FE6               	movwf	_cur_state& (0+255),b
 22718                           
 22719                           ; BSR set to: 0
 22720                           ;UI.c: 533: lcdInst(0b10000000);;
 22721  0058E8  0E80               	movlw	128
 22722  0058EA  EC1E  F02E         	call	i2_lcdInst
 22723                           
 22724                           ;UI.c: 534: printf("LOG 2          <");
 22725  0058EE  0E94               	movlw	low STR_42
 22726  0058F0  6E0D               	movwf	i2printf@f,c
 22727  0058F2  0EFD               	movlw	high STR_42
 22728  0058F4  6E0E               	movwf	i2printf@f+1,c
 22729  0058F6  EC29  F012         	call	i2_printf	;wreg free
 22730                           
 22731                           ;UI.c: 535: lcdInst(0b11000000);;
 22732  0058FA  0EC0               	movlw	192
 22733  0058FC  EC1E  F02E         	call	i2_lcdInst
 22734                           
 22735                           ;UI.c: 536: printf("LOG 3           ");
 22736  005900  0EFB               	movlw	low STR_44
 22737  005902  6E0D               	movwf	i2printf@f,c
 22738  005904  0EFC               	movlw	high STR_44
 22739  005906  6E0E               	movwf	i2printf@f+1,c
 22740  005908  EC29  F012         	call	i2_printf	;wreg free
 22741  00590C  0012               	return		;funcret
 22742  00590E                     __end_of_change_state_to_logs_22:
 22743                           	opt stack 0
 22744                           pclatu	equ	0xFFB
 22745                           pclath	equ	0xFFA
 22746                           tblptru	equ	0xFF8
 22747                           tblptrh	equ	0xFF7
 22748                           tblptrl	equ	0xFF6
 22749                           tablat	equ	0xFF5
 22750                           prodh	equ	0xFF4
 22751                           prodl	equ	0xFF3
 22752                           intcon	equ	0xFF2
 22753                           intcon2	equ	0xFF1
 22754                           intcon3	equ	0xFF0
 22755                           indf0	equ	0xFEF
 22756                           postinc0	equ	0xFEE
 22757                           fsr0h	equ	0xFEA
 22758                           fsr0l	equ	0xFE9
 22759                           wreg	equ	0xFE8
 22760                           postdec1	equ	0xFE5
 22761                           fsr1h	equ	0xFE2
 22762                           fsr1l	equ	0xFE1
 22763                           indf2	equ	0xFDF
 22764                           postinc2	equ	0xFDE
 22765                           postdec2	equ	0xFDD
 22766                           fsr2h	equ	0xFDA
 22767                           fsr2l	equ	0xFD9
 22768                           status	equ	0xFD8
 22769                           
 22770 ;; *************** function _change_state_to_logs_12 *****************
 22771 ;; Defined at:
 22772 ;;		line 524 in file "UI.c"
 22773 ;; Parameters:    Size  Location     Type
 22774 ;;		None
 22775 ;; Auto vars:     Size  Location     Type
 22776 ;;		None
 22777 ;; Return value:  Size  Location     Type
 22778 ;;                  1    wreg      void 
 22779 ;; Registers used:
 22780 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22781 ;; Tracked objects:
 22782 ;;		On entry : 0/0
 22783 ;;		On exit  : 0/0
 22784 ;;		Unchanged: 0/0
 22785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22786 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22787 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22788 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22789 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22790 ;;Total ram usage:        0 bytes
 22791 ;; Hardware stack levels used:    1
 22792 ;; Hardware stack levels required when called:    3
 22793 ;; This function calls:
 22794 ;;		i2_lcdInst
 22795 ;;		i2_printf
 22796 ;; This function is called by:
 22797 ;;		_updateMenu
 22798 ;;		_inputHandler
 22799 ;; This function uses a non-reentrant model
 22800 ;;
 22801                           
 22802                           	psect	text80
 22803  00590E                     __ptext80:
 22804                           	opt stack 0
 22805  00590E                     _change_state_to_logs_12:
 22806                           	opt stack 18
 22807                           
 22808                           ;UI.c: 525: cur_state = 1012;
 22809                           
 22810                           ;incstack = 0
 22811  00590E  0E03               	movlw	3
 22812  005910  0100               	movlb	0	; () banked
 22813  005912  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22814  005914  0EF4               	movlw	244
 22815  005916  6FE6               	movwf	_cur_state& (0+255),b
 22816                           
 22817                           ; BSR set to: 0
 22818                           ;UI.c: 526: lcdInst(0b10000000);;
 22819  005918  0E80               	movlw	128
 22820  00591A  EC1E  F02E         	call	i2_lcdInst
 22821                           
 22822                           ;UI.c: 527: printf("LOG 1           ");
 22823  00591E  0ED9               	movlw	low STR_41
 22824  005920  6E0D               	movwf	i2printf@f,c
 22825  005922  0EFC               	movlw	high STR_41
 22826  005924  6E0E               	movwf	i2printf@f+1,c
 22827  005926  EC29  F012         	call	i2_printf	;wreg free
 22828                           
 22829                           ;UI.c: 528: lcdInst(0b11000000);;
 22830  00592A  0EC0               	movlw	192
 22831  00592C  EC1E  F02E         	call	i2_lcdInst
 22832                           
 22833                           ;UI.c: 529: printf("LOG 2          <");
 22834  005930  0E94               	movlw	low STR_42
 22835  005932  6E0D               	movwf	i2printf@f,c
 22836  005934  0EFD               	movlw	high STR_42
 22837  005936  6E0E               	movwf	i2printf@f+1,c
 22838  005938  EC29  F012         	call	i2_printf	;wreg free
 22839  00593C  0012               	return		;funcret
 22840  00593E                     __end_of_change_state_to_logs_12:
 22841                           	opt stack 0
 22842                           pclatu	equ	0xFFB
 22843                           pclath	equ	0xFFA
 22844                           tblptru	equ	0xFF8
 22845                           tblptrh	equ	0xFF7
 22846                           tblptrl	equ	0xFF6
 22847                           tablat	equ	0xFF5
 22848                           prodh	equ	0xFF4
 22849                           prodl	equ	0xFF3
 22850                           intcon	equ	0xFF2
 22851                           intcon2	equ	0xFF1
 22852                           intcon3	equ	0xFF0
 22853                           indf0	equ	0xFEF
 22854                           postinc0	equ	0xFEE
 22855                           fsr0h	equ	0xFEA
 22856                           fsr0l	equ	0xFE9
 22857                           wreg	equ	0xFE8
 22858                           postdec1	equ	0xFE5
 22859                           fsr1h	equ	0xFE2
 22860                           fsr1l	equ	0xFE1
 22861                           indf2	equ	0xFDF
 22862                           postinc2	equ	0xFDE
 22863                           postdec2	equ	0xFDD
 22864                           fsr2h	equ	0xFDA
 22865                           fsr2l	equ	0xFD9
 22866                           status	equ	0xFD8
 22867                           
 22868 ;; *************** function _change_state_to_logs_11 *****************
 22869 ;; Defined at:
 22870 ;;		line 517 in file "UI.c"
 22871 ;; Parameters:    Size  Location     Type
 22872 ;;		None
 22873 ;; Auto vars:     Size  Location     Type
 22874 ;;		None
 22875 ;; Return value:  Size  Location     Type
 22876 ;;                  1    wreg      void 
 22877 ;; Registers used:
 22878 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22879 ;; Tracked objects:
 22880 ;;		On entry : 0/0
 22881 ;;		On exit  : 0/0
 22882 ;;		Unchanged: 0/0
 22883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22884 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22885 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22886 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22887 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22888 ;;Total ram usage:        0 bytes
 22889 ;; Hardware stack levels used:    1
 22890 ;; Hardware stack levels required when called:    3
 22891 ;; This function calls:
 22892 ;;		i2_lcdInst
 22893 ;;		i2_printf
 22894 ;; This function is called by:
 22895 ;;		_updateMenu
 22896 ;;		_inputHandler
 22897 ;; This function uses a non-reentrant model
 22898 ;;
 22899                           
 22900                           	psect	text81
 22901  00593E                     __ptext81:
 22902                           	opt stack 0
 22903  00593E                     _change_state_to_logs_11:
 22904                           	opt stack 18
 22905                           
 22906                           ;UI.c: 518: cur_state = 1011;
 22907                           
 22908                           ;incstack = 0
 22909  00593E  0E03               	movlw	3
 22910  005940  0100               	movlb	0	; () banked
 22911  005942  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22912  005944  0EF3               	movlw	243
 22913  005946  6FE6               	movwf	_cur_state& (0+255),b
 22914                           
 22915                           ; BSR set to: 0
 22916                           ;UI.c: 519: lcdInst(0b10000000);;
 22917  005948  0E80               	movlw	128
 22918  00594A  EC1E  F02E         	call	i2_lcdInst
 22919                           
 22920                           ;UI.c: 520: printf("LOG 1          <");
 22921  00594E  0E83               	movlw	low STR_39
 22922  005950  6E0D               	movwf	i2printf@f,c
 22923  005952  0EFD               	movlw	high STR_39
 22924  005954  6E0E               	movwf	i2printf@f+1,c
 22925  005956  EC29  F012         	call	i2_printf	;wreg free
 22926                           
 22927                           ;UI.c: 521: lcdInst(0b11000000);;
 22928  00595A  0EC0               	movlw	192
 22929  00595C  EC1E  F02E         	call	i2_lcdInst
 22930                           
 22931                           ;UI.c: 522: printf("LOG 2           ");
 22932  005960  0EEA               	movlw	low STR_40
 22933  005962  6E0D               	movwf	i2printf@f,c
 22934  005964  0EFC               	movlw	high STR_40
 22935  005966  6E0E               	movwf	i2printf@f+1,c
 22936  005968  EC29  F012         	call	i2_printf	;wreg free
 22937  00596C  0012               	return		;funcret
 22938  00596E                     __end_of_change_state_to_logs_11:
 22939                           	opt stack 0
 22940                           pclatu	equ	0xFFB
 22941                           pclath	equ	0xFFA
 22942                           tblptru	equ	0xFF8
 22943                           tblptrh	equ	0xFF7
 22944                           tblptrl	equ	0xFF6
 22945                           tablat	equ	0xFF5
 22946                           prodh	equ	0xFF4
 22947                           prodl	equ	0xFF3
 22948                           intcon	equ	0xFF2
 22949                           intcon2	equ	0xFF1
 22950                           intcon3	equ	0xFF0
 22951                           indf0	equ	0xFEF
 22952                           postinc0	equ	0xFEE
 22953                           fsr0h	equ	0xFEA
 22954                           fsr0l	equ	0xFE9
 22955                           wreg	equ	0xFE8
 22956                           postdec1	equ	0xFE5
 22957                           fsr1h	equ	0xFE2
 22958                           fsr1l	equ	0xFE1
 22959                           indf2	equ	0xFDF
 22960                           postinc2	equ	0xFDE
 22961                           postdec2	equ	0xFDD
 22962                           fsr2h	equ	0xFDA
 22963                           fsr2l	equ	0xFD9
 22964                           status	equ	0xFD8
 22965                           
 22966 ;; *************** function _dispLogs *****************
 22967 ;; Defined at:
 22968 ;;		line 470 in file "UI.c"
 22969 ;; Parameters:    Size  Location     Type
 22970 ;;  myLog           2   17[COMRAM] int 
 22971 ;; Auto vars:     Size  Location     Type
 22972 ;;		None
 22973 ;; Return value:  Size  Location     Type
 22974 ;;                  1    wreg      void 
 22975 ;; Registers used:
 22976 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 22977 ;; Tracked objects:
 22978 ;;		On entry : 0/0
 22979 ;;		On exit  : 0/0
 22980 ;;		Unchanged: 0/0
 22981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22982 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22983 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22984 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22985 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22986 ;;Total ram usage:        2 bytes
 22987 ;; Hardware stack levels used:    1
 22988 ;; Hardware stack levels required when called:    2
 22989 ;; This function calls:
 22990 ;;		_retrieveLog
 22991 ;; This function is called by:
 22992 ;;		_updateMenu
 22993 ;; This function uses a non-reentrant model
 22994 ;;
 22995                           
 22996                           	psect	text82
 22997  005AE8                     __ptext82:
 22998                           	opt stack 0
 22999  005AE8                     _dispLogs:
 23000                           	opt stack 20
 23001                           
 23002                           ;UI.c: 471: logstate = 1;
 23003                           
 23004                           ;incstack = 0
 23005  005AE8  0E00               	movlw	0
 23006  005AEA  0100               	movlb	0	; () banked
 23007  005AEC  6FF9               	movwf	(_logstate+1)& (0+255),b
 23008  005AEE  0E01               	movlw	1
 23009  005AF0  6FF8               	movwf	_logstate& (0+255),b
 23010                           
 23011                           ; BSR set to: 0
 23012                           ;UI.c: 472: log = myLog;
 23013  005AF2  C012  F0EE         	movff	dispLogs@myLog,_log
 23014  005AF6  C013  F0EF         	movff	dispLogs@myLog+1,_log+1
 23015                           
 23016                           ; BSR set to: 0
 23017                           ;UI.c: 473: retrieveLog(myLog - 1);
 23018  005AFA  0EFF               	movlw	255
 23019  005AFC  2412               	addwf	dispLogs@myLog,w,c
 23020  005AFE  6E07               	movwf	retrieveLog@logNum,c
 23021  005B00  0EFF               	movlw	255
 23022  005B02  2013               	addwfc	dispLogs@myLog+1,w,c
 23023  005B04  6E08               	movwf	retrieveLog@logNum+1,c
 23024  005B06  EC70  F020         	call	_retrieveLog	;wreg free
 23025  005B0A  0012               	return		;funcret
 23026  005B0C                     __end_of_dispLogs:
 23027                           	opt stack 0
 23028                           pclatu	equ	0xFFB
 23029                           pclath	equ	0xFFA
 23030                           tblptru	equ	0xFF8
 23031                           tblptrh	equ	0xFF7
 23032                           tblptrl	equ	0xFF6
 23033                           tablat	equ	0xFF5
 23034                           prodh	equ	0xFF4
 23035                           prodl	equ	0xFF3
 23036                           intcon	equ	0xFF2
 23037                           intcon2	equ	0xFF1
 23038                           intcon3	equ	0xFF0
 23039                           indf0	equ	0xFEF
 23040                           postinc0	equ	0xFEE
 23041                           fsr0h	equ	0xFEA
 23042                           fsr0l	equ	0xFE9
 23043                           wreg	equ	0xFE8
 23044                           postdec1	equ	0xFE5
 23045                           fsr1h	equ	0xFE2
 23046                           fsr1l	equ	0xFE1
 23047                           indf2	equ	0xFDF
 23048                           postinc2	equ	0xFDE
 23049                           postdec2	equ	0xFDD
 23050                           fsr2h	equ	0xFDA
 23051                           fsr2l	equ	0xFD9
 23052                           status	equ	0xFD8
 23053                           
 23054 ;; *************** function _retrieveLog *****************
 23055 ;; Defined at:
 23056 ;;		line 139 in file "EEPROM.c"
 23057 ;; Parameters:    Size  Location     Type
 23058 ;;  logNum          2    6[COMRAM] int 
 23059 ;; Auto vars:     Size  Location     Type
 23060 ;;  i               2   13[COMRAM] int 
 23061 ;;  addr            2   15[COMRAM] unsigned short 
 23062 ;;  byte3           1   12[COMRAM] unsigned char 
 23063 ;;  byte2           1   11[COMRAM] unsigned char 
 23064 ;;  byte1           1   10[COMRAM] unsigned char 
 23065 ;; Return value:  Size  Location     Type
 23066 ;;                  1    wreg      void 
 23067 ;; Registers used:
 23068 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 23069 ;; Tracked objects:
 23070 ;;		On entry : 0/0
 23071 ;;		On exit  : 0/0
 23072 ;;		Unchanged: 0/0
 23073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23074 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23075 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23076 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23077 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23078 ;;Total ram usage:       11 bytes
 23079 ;; Hardware stack levels used:    1
 23080 ;; Hardware stack levels required when called:    1
 23081 ;; This function calls:
 23082 ;;		i2_EEPROM_read
 23083 ;;		i2___wmul
 23084 ;; This function is called by:
 23085 ;;		_dispLogs
 23086 ;; This function uses a non-reentrant model
 23087 ;;
 23088                           
 23089                           	psect	text83
 23090  0040E0                     __ptext83:
 23091                           	opt stack 0
 23092  0040E0                     _retrieveLog:
 23093                           	opt stack 20
 23094                           
 23095                           ;EEPROM.c: 145: unsigned short addr = 1 + logNum * 11;
 23096                           
 23097                           ;incstack = 0
 23098  0040E0  C007  F001         	movff	retrieveLog@logNum,i2___wmul@multiplier
 23099  0040E4  C008  F002         	movff	retrieveLog@logNum+1,i2___wmul@multiplier+1
 23100  0040E8  0E00               	movlw	0
 23101  0040EA  6E04               	movwf	i2___wmul@multiplicand+1,c
 23102  0040EC  0E0B               	movlw	11
 23103  0040EE  6E03               	movwf	i2___wmul@multiplicand,c
 23104  0040F0  EC4E  F02D         	call	i2___wmul	;wreg free
 23105  0040F4  0E01               	movlw	1
 23106  0040F6  2401               	addwf	?i2___wmul,w,c
 23107  0040F8  6E10               	movwf	retrieveLog@addr,c
 23108  0040FA  0E00               	movlw	0
 23109  0040FC  2002               	addwfc	?i2___wmul+1,w,c
 23110  0040FE  6E11               	movwf	retrieveLog@addr+1,c
 23111                           
 23112                           ;EEPROM.c: 148: unsigned char byte1 = EEPROM_read(addr);
 23113  004100  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 23114  004104  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 23115  004108  ECEA  F02D         	call	i2_EEPROM_read	;wreg free
 23116  00410C  6E0B               	movwf	retrieveLog@byte1,c
 23117                           
 23118                           ;EEPROM.c: 149: log_completion = (int)(byte1 & 0b10000000);
 23119  00410E  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 23120  004112  0E80               	movlw	128
 23121  004114  1609               	andwf	??_retrieveLog,f,c
 23122  004116  5009               	movf	??_retrieveLog,w,c
 23123  004118  0100               	movlb	0	; () banked
 23124  00411A  6FF0               	movwf	_log_completion& (0+255),b
 23125  00411C  6BF1               	clrf	(_log_completion+1)& (0+255),b
 23126                           
 23127                           ; BSR set to: 0
 23128                           ;EEPROM.c: 150: log_count_total = (int)(byte1 & 0b00001111);
 23129  00411E  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 23130  004122  0E0F               	movlw	15
 23131  004124  1609               	andwf	??_retrieveLog,f,c
 23132  004126  5009               	movf	??_retrieveLog,w,c
 23133  004128  0101               	movlb	1	; () banked
 23134  00412A  6F43               	movwf	_log_count_total& (0+255),b
 23135  00412C  6B44               	clrf	(_log_count_total+1)& (0+255),b
 23136                           
 23137                           ; BSR set to: 1
 23138                           ;EEPROM.c: 151: addr++;
 23139  00412E  4A10               	infsnz	retrieveLog@addr,f,c
 23140  004130  2A11               	incf	retrieveLog@addr+1,f,c
 23141                           
 23142                           ; BSR set to: 1
 23143                           ;EEPROM.c: 154: unsigned char byte2 = EEPROM_read(addr);
 23144  004132  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 23145  004136  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 23146  00413A  ECEA  F02D         	call	i2_EEPROM_read	;wreg free
 23147  00413E  6E0C               	movwf	retrieveLog@byte2,c
 23148                           
 23149                           ;EEPROM.c: 155: log_count_pop_no_tab = (int)((byte2 & 0b11110000)>> 4);
 23150  004140  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 23151  004144  3A09               	swapf	??_retrieveLog,f,c
 23152  004146  0E0F               	movlw	15
 23153  004148  1609               	andwf	??_retrieveLog,f,c
 23154  00414A  0E0F               	movlw	15
 23155  00414C  1609               	andwf	??_retrieveLog,f,c
 23156  00414E  5009               	movf	??_retrieveLog,w,c
 23157  004150  0100               	movlb	0	; () banked
 23158  004152  6FF2               	movwf	_log_count_pop_no_tab& (0+255),b
 23159  004154  6BF3               	clrf	(_log_count_pop_no_tab+1)& (0+255),b
 23160                           
 23161                           ; BSR set to: 0
 23162                           ;EEPROM.c: 156: log_count_pop_w_tab = (int)(byte2 & 0b00001111);
 23163  004156  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 23164  00415A  0E0F               	movlw	15
 23165  00415C  1609               	andwf	??_retrieveLog,f,c
 23166  00415E  5009               	movf	??_retrieveLog,w,c
 23167  004160  0100               	movlb	0	; () banked
 23168  004162  6FF4               	movwf	_log_count_pop_w_tab& (0+255),b
 23169  004164  6BF5               	clrf	(_log_count_pop_w_tab+1)& (0+255),b
 23170                           
 23171                           ; BSR set to: 0
 23172                           ;EEPROM.c: 157: addr++;
 23173  004166  4A10               	infsnz	retrieveLog@addr,f,c
 23174  004168  2A11               	incf	retrieveLog@addr+1,f,c
 23175                           
 23176                           ; BSR set to: 0
 23177                           ;EEPROM.c: 158: unsigned char byte3 = EEPROM_read(addr);
 23178  00416A  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 23179  00416E  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 23180  004172  ECEA  F02D         	call	i2_EEPROM_read	;wreg free
 23181  004176  6E0D               	movwf	retrieveLog@byte3,c
 23182                           
 23183                           ;EEPROM.c: 159: log_count_can_w_lab = (int)((byte3 & 0b11110000)>> 4);
 23184  004178  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 23185  00417C  3A09               	swapf	??_retrieveLog,f,c
 23186  00417E  0E0F               	movlw	15
 23187  004180  1609               	andwf	??_retrieveLog,f,c
 23188  004182  0E0F               	movlw	15
 23189  004184  1609               	andwf	??_retrieveLog,f,c
 23190  004186  5009               	movf	??_retrieveLog,w,c
 23191  004188  0101               	movlb	1	; () banked
 23192  00418A  6F41               	movwf	_log_count_can_w_lab& (0+255),b
 23193  00418C  6B42               	clrf	(_log_count_can_w_lab+1)& (0+255),b
 23194                           
 23195                           ; BSR set to: 1
 23196                           ;EEPROM.c: 160: log_count_can_no_lab = (int)(byte3 & 0b00001111);
 23197  00418E  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 23198  004192  0E0F               	movlw	15
 23199  004194  1609               	andwf	??_retrieveLog,f,c
 23200  004196  5009               	movf	??_retrieveLog,w,c
 23201  004198  0101               	movlb	1	; () banked
 23202  00419A  6F3F               	movwf	_log_count_can_no_lab& (0+255),b
 23203  00419C  6B40               	clrf	(_log_count_can_no_lab+1)& (0+255),b
 23204                           
 23205                           ; BSR set to: 1
 23206                           ;EEPROM.c: 161: addr++;
 23207  00419E  4A10               	infsnz	retrieveLog@addr,f,c
 23208  0041A0  2A11               	incf	retrieveLog@addr+1,f,c
 23209                           
 23210                           ; BSR set to: 1
 23211                           ;EEPROM.c: 164: for(int i = 0; i < 7; i++){
 23212  0041A2  0E00               	movlw	0
 23213  0041A4  6E0F               	movwf	retrieveLog@i+1,c
 23214  0041A6  0E00               	movlw	0
 23215  0041A8  6E0E               	movwf	retrieveLog@i,c
 23216  0041AA                     i2l7294:
 23217                           
 23218                           ; BSR set to: 1
 23219  0041AA  BE0F               	btfsc	retrieveLog@i+1,7,c
 23220  0041AC  D006               	goto	i2l7298
 23221  0041AE  500F               	movf	retrieveLog@i+1,w,c
 23222  0041B0  E11E               	bnz	i2l7306
 23223  0041B2  0E07               	movlw	7
 23224  0041B4  5C0E               	subwf	retrieveLog@i,w,c
 23225  0041B6  B0D8               	btfsc	status,0,c
 23226  0041B8  D01A               	goto	i2l7306
 23227  0041BA                     i2l7298:
 23228                           
 23229                           ;EEPROM.c: 165: log_startTime[i] = (int)EEPROM_read(addr);
 23230  0041BA  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 23231  0041BE  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 23232  0041C2  ECEA  F02D         	call	i2_EEPROM_read	;wreg free
 23233  0041C6  6E09               	movwf	??_retrieveLog& (0+255),c
 23234  0041C8  6A0A               	clrf	(??_retrieveLog+1)& (0+255),c
 23235  0041CA  90D8               	bcf	status,0,c
 23236  0041CC  340E               	rlcf	retrieveLog@i,w,c
 23237  0041CE  6ED9               	movwf	fsr2l,c
 23238  0041D0  340F               	rlcf	retrieveLog@i+1,w,c
 23239  0041D2  6EDA               	movwf	fsr2h,c
 23240  0041D4  0E00               	movlw	low _log_startTime
 23241  0041D6  26D9               	addwf	fsr2l,f,c
 23242  0041D8  0E01               	movlw	high _log_startTime
 23243  0041DA  22DA               	addwfc	fsr2h,f,c
 23244  0041DC  C009  FFDE         	movff	??_retrieveLog,postinc2
 23245  0041E0  C00A  FFDD         	movff	??_retrieveLog+1,postdec2
 23246                           
 23247                           ;EEPROM.c: 166: addr++;
 23248  0041E4  4A10               	infsnz	retrieveLog@addr,f,c
 23249  0041E6  2A11               	incf	retrieveLog@addr+1,f,c
 23250  0041E8  4A0E               	infsnz	retrieveLog@i,f,c
 23251  0041EA  2A0F               	incf	retrieveLog@i+1,f,c
 23252  0041EC  D7DE               	goto	i2l7294
 23253  0041EE                     i2l7306:
 23254                           
 23255                           ;EEPROM.c: 167: }
 23256                           ;EEPROM.c: 170: log_total_time = (int)EEPROM_read(addr);
 23257  0041EE  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 23258  0041F2  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 23259  0041F6  ECEA  F02D         	call	i2_EEPROM_read	;wreg free
 23260  0041FA  6E09               	movwf	??_retrieveLog& (0+255),c
 23261  0041FC  5009               	movf	??_retrieveLog,w,c
 23262  0041FE  0100               	movlb	0	; () banked
 23263  004200  6FF6               	movwf	_log_total_time& (0+255),b
 23264  004202  6BF7               	clrf	(_log_total_time+1)& (0+255),b
 23265                           
 23266                           ; BSR set to: 0
 23267  004204  0012               	return		;funcret
 23268  004206                     __end_of_retrieveLog:
 23269                           	opt stack 0
 23270                           pclatu	equ	0xFFB
 23271                           pclath	equ	0xFFA
 23272                           tblptru	equ	0xFF8
 23273                           tblptrh	equ	0xFF7
 23274                           tblptrl	equ	0xFF6
 23275                           tablat	equ	0xFF5
 23276                           prodh	equ	0xFF4
 23277                           prodl	equ	0xFF3
 23278                           intcon	equ	0xFF2
 23279                           intcon2	equ	0xFF1
 23280                           intcon3	equ	0xFF0
 23281                           indf0	equ	0xFEF
 23282                           postinc0	equ	0xFEE
 23283                           fsr0h	equ	0xFEA
 23284                           fsr0l	equ	0xFE9
 23285                           wreg	equ	0xFE8
 23286                           postdec1	equ	0xFE5
 23287                           fsr1h	equ	0xFE2
 23288                           fsr1l	equ	0xFE1
 23289                           indf2	equ	0xFDF
 23290                           postinc2	equ	0xFDE
 23291                           postdec2	equ	0xFDD
 23292                           fsr2h	equ	0xFDA
 23293                           fsr2l	equ	0xFD9
 23294                           status	equ	0xFD8
 23295                           
 23296 ;; *************** function i2_EEPROM_read *****************
 23297 ;; Defined at:
 23298 ;;		line 73 in file "EEPROM.c"
 23299 ;; Parameters:    Size  Location     Type
 23300 ;;  address         2    0[COMRAM] unsigned short 
 23301 ;; Auto vars:     Size  Location     Type
 23302 ;;		None
 23303 ;; Return value:  Size  Location     Type
 23304 ;;                  1    wreg      unsigned char 
 23305 ;; Registers used:
 23306 ;;		wreg, status,2
 23307 ;; Tracked objects:
 23308 ;;		On entry : 0/0
 23309 ;;		On exit  : 0/0
 23310 ;;		Unchanged: 0/0
 23311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23312 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23313 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23314 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23315 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23316 ;;Total ram usage:        2 bytes
 23317 ;; Hardware stack levels used:    1
 23318 ;; This function calls:
 23319 ;;		Nothing
 23320 ;; This function is called by:
 23321 ;;		_retrieveLog
 23322 ;; This function uses a non-reentrant model
 23323 ;;
 23324                           
 23325                           	psect	text84
 23326  005BD4                     __ptext84:
 23327                           	opt stack 0
 23328  005BD4                     i2_EEPROM_read:
 23329                           	opt stack 20
 23330                           
 23331                           ;EEPROM.c: 75: EEADRH = (unsigned char)(address >> 8);
 23332                           
 23333                           ; BSR set to: 0
 23334                           ;incstack = 0
 23335  005BD4  5002               	movf	i2EEPROM_read@address+1,w,c
 23336  005BD6  6EAA               	movwf	4010,c	;volatile
 23337                           
 23338                           ;EEPROM.c: 76: EEADR = (unsigned char)address;
 23339  005BD8  C001  FFA9         	movff	i2EEPROM_read@address,4009	;volatile
 23340                           
 23341                           ;EEPROM.c: 78: EECON1bits.EEPGD = 0;
 23342  005BDC  9EA6               	bcf	4006,7,c	;volatile
 23343                           
 23344                           ;EEPROM.c: 79: EECON1bits.CFGS = 0;
 23345  005BDE  9CA6               	bcf	4006,6,c	;volatile
 23346                           
 23347                           ;EEPROM.c: 80: EECON1bits.RD = 1;
 23348  005BE0  80A6               	bsf	4006,0,c	;volatile
 23349  005BE2                     i2l1134:
 23350  005BE2  B0A6               	btfsc	4006,0,c	;volatile
 23351  005BE4  D7FE               	goto	i2l1134
 23352                           
 23353                           ;EEPROM.c: 86: return EEDATA;
 23354  005BE6  50A8               	movf	4008,w,c	;volatile
 23355  005BE8  0012               	return	
 23356  005BEA                     __end_ofi2_EEPROM_read:
 23357                           	opt stack 0
 23358                           pclatu	equ	0xFFB
 23359                           pclath	equ	0xFFA
 23360                           tblptru	equ	0xFF8
 23361                           tblptrh	equ	0xFF7
 23362                           tblptrl	equ	0xFF6
 23363                           tablat	equ	0xFF5
 23364                           prodh	equ	0xFF4
 23365                           prodl	equ	0xFF3
 23366                           intcon	equ	0xFF2
 23367                           intcon2	equ	0xFF1
 23368                           intcon3	equ	0xFF0
 23369                           indf0	equ	0xFEF
 23370                           postinc0	equ	0xFEE
 23371                           fsr0h	equ	0xFEA
 23372                           fsr0l	equ	0xFE9
 23373                           wreg	equ	0xFE8
 23374                           postdec1	equ	0xFE5
 23375                           fsr1h	equ	0xFE2
 23376                           fsr1l	equ	0xFE1
 23377                           indf2	equ	0xFDF
 23378                           postinc2	equ	0xFDE
 23379                           postdec2	equ	0xFDD
 23380                           fsr2h	equ	0xFDA
 23381                           fsr2l	equ	0xFD9
 23382                           status	equ	0xFD8
 23383                           
 23384 ;; *************** function _updateArmState *****************
 23385 ;; Defined at:
 23386 ;;		line 644 in file "sort.c"
 23387 ;; Parameters:    Size  Location     Type
 23388 ;;		None
 23389 ;; Auto vars:     Size  Location     Type
 23390 ;;		None
 23391 ;; Return value:  Size  Location     Type
 23392 ;;                  1    wreg      void 
 23393 ;; Registers used:
 23394 ;;		wreg, status,2, status,0
 23395 ;; Tracked objects:
 23396 ;;		On entry : 0/0
 23397 ;;		On exit  : 0/0
 23398 ;;		Unchanged: 0/0
 23399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23400 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23401 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23402 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23403 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23404 ;;Total ram usage:        2 bytes
 23405 ;; Hardware stack levels used:    1
 23406 ;; This function calls:
 23407 ;;		Nothing
 23408 ;; This function is called by:
 23409 ;;		_handler
 23410 ;; This function uses a non-reentrant model
 23411 ;;
 23412                           
 23413                           	psect	text85
 23414  005614                     __ptext85:
 23415                           	opt stack 0
 23416  005614                     _updateArmState:
 23417                           	opt stack 23
 23418                           
 23419                           ;sort.c: 651: if(!was_low_2){
 23420                           
 23421                           ;incstack = 0
 23422  005614  5079               	movf	_was_low_2,w,c	;volatile
 23423  005616  107A               	iorwf	_was_low_2+1,w,c	;volatile
 23424  005618  B4D8               	btfsc	status,2,c
 23425  00561A  D007               	goto	i2l10108
 23426  00561C  D016               	goto	i2l950
 23427  00561E                     i2l10102:
 23428                           
 23429                           ;sort.c: 656: PR2 = 0x20;
 23430  00561E  0E20               	movlw	32
 23431  005620  6ECB               	movwf	4043,c	;volatile
 23432                           
 23433                           ;sort.c: 657: break;
 23434  005622  0012               	return	
 23435  005624                     i2l10104:
 23436                           
 23437                           ;sort.c: 660: PR2 = 0x40;
 23438  005624  0E40               	movlw	64
 23439  005626  6ECB               	movwf	4043,c	;volatile
 23440                           
 23441                           ;sort.c: 662: }
 23442                           
 23443                           ;sort.c: 661: break;
 23444  005628  0012               	return	
 23445  00562A                     i2l10108:
 23446  00562A  C0E8  F001         	movff	_f_arm_position,??_updateArmState	;volatile
 23447  00562E  C0E9  F002         	movff	_f_arm_position+1,??_updateArmState+1	;volatile
 23448                           
 23449                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 23450                           ; Switch size 1, requested type "space"
 23451                           ; Number of cases is 1, Range of values is 0 to 0
 23452                           ; switch strategies available:
 23453                           ; Name         Instructions Cycles
 23454                           ; simple_byte            4     3 (average)
 23455                           ;	Chosen strategy is simple_byte
 23456  005632  5002               	movf	??_updateArmState+1,w,c
 23457  005634  0A00               	xorlw	0	; case 0
 23458  005636  A4D8               	btfss	status,2,c
 23459  005638  0012               	return	
 23460                           
 23461                           ; Switch size 1, requested type "space"
 23462                           ; Number of cases is 2, Range of values is 0 to 1
 23463                           ; switch strategies available:
 23464                           ; Name         Instructions Cycles
 23465                           ; simple_byte            7     4 (average)
 23466                           ;	Chosen strategy is simple_byte
 23467  00563A  5001               	movf	??_updateArmState,w,c
 23468  00563C  0A00               	xorlw	0	; case 0
 23469  00563E  B4D8               	btfsc	status,2,c
 23470  005640  D7EE               	goto	i2l10102
 23471  005642  0A01               	xorlw	1	; case 1
 23472  005644  A4D8               	btfss	status,2,c
 23473                           
 23474                           ;sort.c: 663: }
 23475  005646  0012               	return	
 23476  005648  D7ED               	goto	i2l10104
 23477  00564A                     i2l950:
 23478                           
 23479                           ;sort.c: 664: else{
 23480                           ;sort.c: 666: PR2 = 0xFF;
 23481  00564A  68CB               	setf	4043,c	;volatile
 23482  00564C  0012               	return	
 23483  00564E                     __end_of_updateArmState:
 23484                           	opt stack 0
 23485                           pclatu	equ	0xFFB
 23486                           pclath	equ	0xFFA
 23487                           tblptru	equ	0xFF8
 23488                           tblptrh	equ	0xFF7
 23489                           tblptrl	equ	0xFF6
 23490                           tablat	equ	0xFF5
 23491                           prodh	equ	0xFF4
 23492                           prodl	equ	0xFF3
 23493                           intcon	equ	0xFF2
 23494                           intcon2	equ	0xFF1
 23495                           intcon3	equ	0xFF0
 23496                           indf0	equ	0xFEF
 23497                           postinc0	equ	0xFEE
 23498                           fsr0h	equ	0xFEA
 23499                           fsr0l	equ	0xFE9
 23500                           wreg	equ	0xFE8
 23501                           postdec1	equ	0xFE5
 23502                           fsr1h	equ	0xFE2
 23503                           fsr1l	equ	0xFE1
 23504                           indf2	equ	0xFDF
 23505                           postinc2	equ	0xFDE
 23506                           postdec2	equ	0xFDD
 23507                           fsr2h	equ	0xFDA
 23508                           fsr2l	equ	0xFD9
 23509                           status	equ	0xFD8
 23510                           
 23511 ;; *************** function _printSortTimer *****************
 23512 ;; Defined at:
 23513 ;;		line 485 in file "sort.c"
 23514 ;; Parameters:    Size  Location     Type
 23515 ;;		None
 23516 ;; Auto vars:     Size  Location     Type
 23517 ;;  i               2   70[COMRAM] int 
 23518 ;;  i               2   72[COMRAM] int 
 23519 ;;  curTime        14   44[COMRAM] int [7]
 23520 ;;  timeDiff        2   68[COMRAM] unsigned int 
 23521 ;;  sec             2   64[COMRAM] int 
 23522 ;;  min             2   62[COMRAM] int 
 23523 ;;  cur_sec         2   60[COMRAM] unsigned int 
 23524 ;;  start_sec       2   58[COMRAM] unsigned int 
 23525 ;; Return value:  Size  Location     Type
 23526 ;;                  1    wreg      void 
 23527 ;; Registers used:
 23528 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23529 ;; Tracked objects:
 23530 ;;		On entry : 0/0
 23531 ;;		On exit  : 0/0
 23532 ;;		Unchanged: 0/0
 23533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23534 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23535 ;;      Locals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23536 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23537 ;;      Totals:        33       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23538 ;;Total ram usage:       33 bytes
 23539 ;; Hardware stack levels used:    1
 23540 ;; Hardware stack levels required when called:    3
 23541 ;; This function calls:
 23542 ;;		i2___lwdiv
 23543 ;;		i2___lwmod
 23544 ;;		i2___wmul
 23545 ;;		i2_delay_ms
 23546 ;;		i2_getRTC
 23547 ;;		i2_lcdInst
 23548 ;;		i2_printf
 23549 ;; This function is called by:
 23550 ;;		_handler
 23551 ;; This function uses a non-reentrant model
 23552 ;;
 23553                           
 23554                           	psect	text86
 23555  00335E                     __ptext86:
 23556                           	opt stack 0
 23557  00335E                     _printSortTimer:
 23558                           	opt stack 20
 23559                           
 23560                           ;sort.c: 486: getRTC();
 23561                           
 23562                           ;incstack = 0
 23563  00335E  EC23  F028         	call	i2_getRTC	;wreg free
 23564                           
 23565                           ;sort.c: 487: int curTime[7];
 23566                           ;sort.c: 488: for(int i = 0; i < 7; i++){
 23567  003362  0E00               	movlw	0
 23568  003364  6E4A               	movwf	printSortTimer@i+1,c
 23569  003366  0E00               	movlw	0
 23570  003368  6E49               	movwf	printSortTimer@i,c
 23571  00336A                     i2l9942:
 23572  00336A  BE4A               	btfsc	printSortTimer@i+1,7,c
 23573  00336C  D006               	goto	i2l9946
 23574  00336E  504A               	movf	printSortTimer@i+1,w,c
 23575  003370  E131               	bnz	i2l9952
 23576  003372  0E07               	movlw	7
 23577  003374  5C49               	subwf	printSortTimer@i,w,c
 23578  003376  B0D8               	btfsc	status,0,c
 23579  003378  D02D               	goto	i2l9952
 23580  00337A                     i2l9946:
 23581                           
 23582                           ;sort.c: 489: curTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 23583  00337A  0E1C               	movlw	low _time
 23584  00337C  2449               	addwf	printSortTimer@i,w,c
 23585  00337E  6ED9               	movwf	fsr2l,c
 23586  003380  0E01               	movlw	high _time
 23587  003382  204A               	addwfc	printSortTimer@i+1,w,c
 23588  003384  6EDA               	movwf	fsr2h,c
 23589  003386  50DF               	movf	indf2,w,c
 23590  003388  6E2A               	movwf	??_printSortTimer& (0+255),c
 23591  00338A  3A2A               	swapf	??_printSortTimer,f,c
 23592  00338C  0E0F               	movlw	15
 23593  00338E  162A               	andwf	??_printSortTimer,f,c
 23594  003390  0E0F               	movlw	15
 23595  003392  162A               	andwf	??_printSortTimer,f,c
 23596  003394  502A               	movf	??_printSortTimer,w,c
 23597  003396  0D0A               	mullw	10
 23598  003398  0E1C               	movlw	low _time
 23599  00339A  2449               	addwf	printSortTimer@i,w,c
 23600  00339C  6ED9               	movwf	fsr2l,c
 23601  00339E  0E01               	movlw	high _time
 23602  0033A0  204A               	addwfc	printSortTimer@i+1,w,c
 23603  0033A2  6EDA               	movwf	fsr2h,c
 23604  0033A4  50DF               	movf	indf2,w,c
 23605  0033A6  0B0F               	andlw	15
 23606  0033A8  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 23607  0033AA  6A2C               	clrf	(??_printSortTimer+2)& (0+255),c
 23608  0033AC  50F3               	movf	prodl,w,c
 23609  0033AE  262B               	addwf	??_printSortTimer+1,f,c
 23610  0033B0  50F4               	movf	prodh,w,c
 23611  0033B2  222C               	addwfc	??_printSortTimer+2,f,c
 23612  0033B4  90D8               	bcf	status,0,c
 23613  0033B6  3449               	rlcf	printSortTimer@i,w,c
 23614  0033B8  6ED9               	movwf	fsr2l,c
 23615  0033BA  344A               	rlcf	printSortTimer@i+1,w,c
 23616  0033BC  6EDA               	movwf	fsr2h,c
 23617  0033BE  0E2D               	movlw	low printSortTimer@curTime
 23618  0033C0  26D9               	addwf	fsr2l,f,c
 23619  0033C2  0E00               	movlw	high printSortTimer@curTime
 23620  0033C4  22DA               	addwfc	fsr2h,f,c
 23621  0033C6  C02B  FFDE         	movff	??_printSortTimer+1,postinc2
 23622  0033CA  C02C  FFDD         	movff	??_printSortTimer+2,postdec2
 23623  0033CE  4A49               	infsnz	printSortTimer@i,f,c
 23624  0033D0  2A4A               	incf	printSortTimer@i+1,f,c
 23625  0033D2  D7CB               	goto	i2l9942
 23626  0033D4                     i2l9952:
 23627                           
 23628                           ;sort.c: 490: }
 23629                           ;sort.c: 491: unsigned int start_sec = startTime[0] + startTime[1]*60 + startTime[2]*360
      +                          0;
 23630  0033D4  C110  F001         	movff	_startTime+2,i2___wmul@multiplier
 23631  0033D8  C111  F002         	movff	_startTime+3,i2___wmul@multiplier+1
 23632  0033DC  0E00               	movlw	0
 23633  0033DE  6E04               	movwf	i2___wmul@multiplicand+1,c
 23634  0033E0  0E3C               	movlw	60
 23635  0033E2  6E03               	movwf	i2___wmul@multiplicand,c
 23636  0033E4  EC4E  F02D         	call	i2___wmul	;wreg free
 23637  0033E8  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 23638  0033EC  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 23639  0033F0  C112  F001         	movff	_startTime+4,i2___wmul@multiplier
 23640  0033F4  C113  F002         	movff	_startTime+5,i2___wmul@multiplier+1
 23641  0033F8  0E0E               	movlw	14
 23642  0033FA  6E04               	movwf	i2___wmul@multiplicand+1,c
 23643  0033FC  0E10               	movlw	16
 23644  0033FE  6E03               	movwf	i2___wmul@multiplicand,c
 23645  003400  EC4E  F02D         	call	i2___wmul	;wreg free
 23646  003404  5001               	movf	?i2___wmul,w,c
 23647  003406  262A               	addwf	??_printSortTimer,f,c
 23648  003408  5002               	movf	?i2___wmul+1,w,c
 23649  00340A  222B               	addwfc	??_printSortTimer+1,f,c
 23650  00340C  0101               	movlb	1	; () banked
 23651  00340E  510E               	movf	_startTime& (0+255),w,b
 23652  003410  242A               	addwf	??_printSortTimer,w,c
 23653  003412  6E3B               	movwf	printSortTimer@start_sec,c
 23654  003414  0101               	movlb	1	; () banked
 23655  003416  510F               	movf	(_startTime+1)& (0+255),w,b
 23656  003418  202B               	addwfc	??_printSortTimer+1,w,c
 23657  00341A  6E3C               	movwf	printSortTimer@start_sec+1,c
 23658                           
 23659                           ;sort.c: 492: unsigned int cur_sec = curTime[0] + curTime[1]*60 + curTime[2]*3600;
 23660  00341C  C02F  F001         	movff	printSortTimer@curTime+2,i2___wmul@multiplier
 23661  003420  C030  F002         	movff	printSortTimer@curTime+3,i2___wmul@multiplier+1
 23662  003424  0E00               	movlw	0
 23663  003426  6E04               	movwf	i2___wmul@multiplicand+1,c
 23664  003428  0E3C               	movlw	60
 23665  00342A  6E03               	movwf	i2___wmul@multiplicand,c
 23666  00342C  EC4E  F02D         	call	i2___wmul	;wreg free
 23667  003430  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 23668  003434  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 23669  003438  C031  F001         	movff	printSortTimer@curTime+4,i2___wmul@multiplier
 23670  00343C  C032  F002         	movff	printSortTimer@curTime+5,i2___wmul@multiplier+1
 23671  003440  0E0E               	movlw	14
 23672  003442  6E04               	movwf	i2___wmul@multiplicand+1,c
 23673  003444  0E10               	movlw	16
 23674  003446  6E03               	movwf	i2___wmul@multiplicand,c
 23675  003448  EC4E  F02D         	call	i2___wmul	;wreg free
 23676  00344C  5001               	movf	?i2___wmul,w,c
 23677  00344E  262A               	addwf	??_printSortTimer,f,c
 23678  003450  5002               	movf	?i2___wmul+1,w,c
 23679  003452  222B               	addwfc	??_printSortTimer+1,f,c
 23680  003454  502D               	movf	printSortTimer@curTime,w,c
 23681  003456  242A               	addwf	??_printSortTimer,w,c
 23682  003458  6E3D               	movwf	printSortTimer@cur_sec,c
 23683  00345A  502E               	movf	printSortTimer@curTime+1,w,c
 23684  00345C  202B               	addwfc	??_printSortTimer+1,w,c
 23685  00345E  6E3E               	movwf	printSortTimer@cur_sec+1,c
 23686                           
 23687                           ;sort.c: 493: unsigned int timeDiff = cur_sec - start_sec;
 23688  003460  C03B  F02A         	movff	printSortTimer@start_sec,??_printSortTimer
 23689  003464  C03C  F02B         	movff	printSortTimer@start_sec+1,??_printSortTimer+1
 23690  003468  1E2A               	comf	??_printSortTimer,f,c
 23691  00346A  1E2B               	comf	??_printSortTimer+1,f,c
 23692  00346C  4A2A               	infsnz	??_printSortTimer,f,c
 23693  00346E  2A2B               	incf	??_printSortTimer+1,f,c
 23694  003470  503D               	movf	printSortTimer@cur_sec,w,c
 23695  003472  242A               	addwf	??_printSortTimer,w,c
 23696  003474  6E45               	movwf	printSortTimer@timeDiff,c
 23697  003476  503E               	movf	printSortTimer@cur_sec+1,w,c
 23698  003478  202B               	addwfc	??_printSortTimer+1,w,c
 23699  00347A  6E46               	movwf	printSortTimer@timeDiff+1,c
 23700                           
 23701                           ;sort.c: 495: total_time = timeDiff;
 23702  00347C  C045  F0FA         	movff	printSortTimer@timeDiff,_total_time
 23703  003480  C046  F0FB         	movff	printSortTimer@timeDiff+1,_total_time+1
 23704                           
 23705                           ;sort.c: 497: if(f_most_recent_sort_time){
 23706  003484  0101               	movlb	1	; () banked
 23707  003486  5137               	movf	_f_most_recent_sort_time& (0+255),w,b
 23708  003488  0101               	movlb	1	; () banked
 23709  00348A  1138               	iorwf	(_f_most_recent_sort_time+1)& (0+255),w,b
 23710  00348C  B4D8               	btfsc	status,2,c
 23711  00348E  D009               	goto	i2l9964
 23712                           
 23713                           ; BSR set to: 1
 23714                           ;sort.c: 498: most_recent_sort_time = total_time;
 23715  003490  C0FA  F145         	movff	_total_time,_most_recent_sort_time
 23716  003494  C0FB  F146         	movff	_total_time+1,_most_recent_sort_time+1
 23717                           
 23718                           ; BSR set to: 1
 23719                           ;sort.c: 499: f_most_recent_sort_time = 0;
 23720  003498  0E00               	movlw	0
 23721  00349A  0101               	movlb	1	; () banked
 23722  00349C  6F38               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
 23723  00349E  0E00               	movlw	0
 23724  0034A0  6F37               	movwf	_f_most_recent_sort_time& (0+255),b
 23725  0034A2                     i2l9964:
 23726                           
 23727                           ; BSR set to: 1
 23728                           ;sort.c: 500: }
 23729                           ;sort.c: 502: if((total_time - most_recent_sort_time == 42) || (total_time == 179)){
 23730  0034A2  C145  F02A         	movff	_most_recent_sort_time,??_printSortTimer
 23731  0034A6  C146  F02B         	movff	_most_recent_sort_time+1,??_printSortTimer+1
 23732  0034AA  1E2A               	comf	??_printSortTimer,f,c
 23733  0034AC  1E2B               	comf	??_printSortTimer+1,f,c
 23734  0034AE  4A2A               	infsnz	??_printSortTimer,f,c
 23735  0034B0  2A2B               	incf	??_printSortTimer+1,f,c
 23736  0034B2  0100               	movlb	0	; () banked
 23737  0034B4  51FA               	movf	_total_time& (0+255),w,b
 23738  0034B6  262A               	addwf	??_printSortTimer,f,c
 23739  0034B8  0100               	movlb	0	; () banked
 23740  0034BA  51FB               	movf	(_total_time+1)& (0+255),w,b
 23741  0034BC  222B               	addwfc	??_printSortTimer+1,f,c
 23742  0034BE  0E2A               	movlw	42
 23743  0034C0  182A               	xorwf	??_printSortTimer,w,c
 23744  0034C2  102B               	iorwf	??_printSortTimer+1,w,c
 23745  0034C4  B4D8               	btfsc	status,2,c
 23746  0034C6  D007               	goto	i2l9968
 23747                           
 23748                           ; BSR set to: 0
 23749  0034C8  0EB3               	movlw	179
 23750  0034CA  0100               	movlb	0	; () banked
 23751  0034CC  19FA               	xorwf	_total_time& (0+255),w,b
 23752  0034CE  0100               	movlb	0	; () banked
 23753  0034D0  11FB               	iorwf	(_total_time+1)& (0+255),w,b
 23754  0034D2  A4D8               	btfss	status,2,c
 23755  0034D4  D003               	goto	i2l9970
 23756  0034D6                     i2l9968:
 23757                           
 23758                           ; BSR set to: 0
 23759                           ;sort.c: 503: machine_state = DoneSorting_state;
 23760  0034D6  0E02               	movlw	2
 23761  0034D8  0100               	movlb	0	; () banked
 23762  0034DA  6FFC               	movwf	_machine_state& (0+255),b
 23763  0034DC                     i2l9970:
 23764                           
 23765                           ; BSR set to: 0
 23766                           ;sort.c: 505: }
 23767                           ;sort.c: 507: int min = (timeDiff % 3600) / 60;
 23768  0034DC  0E0E               	movlw	14
 23769  0034DE  6E04               	movwf	i2___lwmod@divisor+1,c
 23770  0034E0  0E10               	movlw	16
 23771  0034E2  6E03               	movwf	i2___lwmod@divisor,c
 23772  0034E4  C045  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 23773  0034E8  C046  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 23774  0034EC  ECE9  F02A         	call	i2___lwmod	;wreg free
 23775  0034F0  C001  F006         	movff	?i2___lwmod,i2___lwdiv@dividend
 23776  0034F4  C002  F007         	movff	?i2___lwmod+1,i2___lwdiv@dividend+1
 23777  0034F8  0E00               	movlw	0
 23778  0034FA  6E09               	movwf	i2___lwdiv@divisor+1,c
 23779  0034FC  0E3C               	movlw	60
 23780  0034FE  6E08               	movwf	i2___lwdiv@divisor,c
 23781  003500  ECE2  F029         	call	i2___lwdiv	;wreg free
 23782  003504  C006  F03F         	movff	?i2___lwdiv,printSortTimer@min
 23783  003508  C007  F040         	movff	?i2___lwdiv+1,printSortTimer@min+1
 23784                           
 23785                           ;sort.c: 508: int sec = (timeDiff % 3600) % 60;
 23786  00350C  0E0E               	movlw	14
 23787  00350E  6E04               	movwf	i2___lwmod@divisor+1,c
 23788  003510  0E10               	movlw	16
 23789  003512  6E03               	movwf	i2___lwmod@divisor,c
 23790  003514  C045  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 23791  003518  C046  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 23792  00351C  ECE9  F02A         	call	i2___lwmod	;wreg free
 23793  003520  C001  F043         	movff	?i2___lwmod,_printSortTimer$2561
 23794  003524  C002  F044         	movff	?i2___lwmod+1,_printSortTimer$2561+1
 23795                           
 23796                           ;sort.c: 508: int sec = (timeDiff % 3600) % 60;
 23797  003528  C043  F001         	movff	_printSortTimer$2561,i2___lwmod@dividend
 23798  00352C  C044  F002         	movff	_printSortTimer$2561+1,i2___lwmod@dividend+1
 23799  003530  0E00               	movlw	0
 23800  003532  6E04               	movwf	i2___lwmod@divisor+1,c
 23801  003534  0E3C               	movlw	60
 23802  003536  6E03               	movwf	i2___lwmod@divisor,c
 23803  003538  ECE9  F02A         	call	i2___lwmod	;wreg free
 23804  00353C  C001  F041         	movff	?i2___lwmod,printSortTimer@sec
 23805  003540  C002  F042         	movff	?i2___lwmod+1,printSortTimer@sec+1
 23806                           
 23807                           ;sort.c: 510: lcdInst(0b10000000);;
 23808  003544  0E80               	movlw	128
 23809  003546  EC1E  F02E         	call	i2_lcdInst
 23810                           
 23811                           ;sort.c: 511: printf("SORTING...      ");
 23812  00354A  0EB7               	movlw	low STR_65
 23813  00354C  6E0D               	movwf	i2printf@f,c
 23814  00354E  0EFC               	movlw	high STR_65
 23815  003550  6E0E               	movwf	i2printf@f+1,c
 23816  003552  EC29  F012         	call	i2_printf	;wreg free
 23817                           
 23818                           ;sort.c: 512: lcdInst(0b11000000);;
 23819  003556  0EC0               	movlw	192
 23820  003558  EC1E  F02E         	call	i2_lcdInst
 23821                           
 23822                           ;sort.c: 513: printf("TIME %d:%02d    ", min, sec);
 23823  00355C  0EC8               	movlw	low STR_66
 23824  00355E  6E0D               	movwf	i2printf@f,c
 23825  003560  0EFC               	movlw	high STR_66
 23826  003562  6E0E               	movwf	i2printf@f+1,c
 23827  003564  C03F  F00F         	movff	printSortTimer@min,?i2_printf+2
 23828  003568  C040  F010         	movff	printSortTimer@min+1,?i2_printf+3
 23829  00356C  C041  F011         	movff	printSortTimer@sec,?i2_printf+4
 23830  003570  C042  F012         	movff	printSortTimer@sec+1,?i2_printf+5
 23831  003574  EC29  F012         	call	i2_printf	;wreg free
 23832                           
 23833                           ;sort.c: 516: if(total_time >= 2){
 23834  003578  0100               	movlb	0	; () banked
 23835  00357A  BFFB               	btfsc	(_total_time+1)& (0+255),7,b
 23836  00357C  0012               	return	
 23837  00357E  0100               	movlb	0	; () banked
 23838  003580  51FB               	movf	(_total_time+1)& (0+255),w,b
 23839  003582  E105               	bnz	i2u948_40
 23840  003584  0E02               	movlw	2
 23841  003586  0100               	movlb	0	; () banked
 23842  003588  5DFA               	subwf	_total_time& (0+255),w,b
 23843  00358A  A0D8               	btfss	status,0,c
 23844  00358C  0012               	return	
 23845  00358E                     i2u948_40:
 23846                           
 23847                           ; BSR set to: 0
 23848                           ;sort.c: 518: if(total_time % 2 == 0){
 23849  00358E  0100               	movlb	0	; () banked
 23850  003590  B1FA               	btfsc	_total_time& (0+255),0,b
 23851  003592  0012               	return	
 23852                           
 23853                           ; BSR set to: 0
 23854                           ;sort.c: 520: if(LATBbits.LATB2){
 23855  003594  A48A               	btfss	3978,2,c	;volatile
 23856  003596  D00E               	goto	i2l9992
 23857                           
 23858                           ; BSR set to: 0
 23859                           ;sort.c: 522: LATBbits.LATB2 = !LATBbits.LATB2;
 23860  003598  B48A               	btfsc	3978,2,c	;volatile
 23861  00359A  D003               	goto	i2u951_40
 23862  00359C  6A2A               	clrf	??_printSortTimer& (0+255),c
 23863  00359E  2A2A               	incf	??_printSortTimer& (0+255),f,c
 23864  0035A0  D001               	goto	i2u952_48
 23865  0035A2                     i2u951_40:
 23866  0035A2  6A2A               	clrf	??_printSortTimer& (0+255),c
 23867  0035A4                     i2u952_48:
 23868  0035A4  462A               	rlncf	??_printSortTimer,f,c
 23869  0035A6  462A               	rlncf	??_printSortTimer,f,c
 23870  0035A8  508A               	movf	3978,w,c	;volatile
 23871  0035AA  182A               	xorwf	??_printSortTimer,w,c
 23872  0035AC  0BFB               	andlw	-5
 23873  0035AE  182A               	xorwf	??_printSortTimer,w,c
 23874  0035B0  6E8A               	movwf	3978,c	;volatile
 23875                           
 23876                           ;sort.c: 523: }
 23877  0035B2  0012               	return	
 23878  0035B4                     i2l9992:
 23879                           
 23880                           ;sort.c: 524: else{
 23881                           ;sort.c: 526: for(int i=0; i<46; i++){
 23882  0035B4  0E00               	movlw	0
 23883  0035B6  6E48               	movwf	printSortTimer@i_1163+1,c
 23884  0035B8  0E00               	movlw	0
 23885  0035BA  6E47               	movwf	printSortTimer@i_1163,c
 23886  0035BC  BE48               	btfsc	printSortTimer@i_1163+1,7,c
 23887  0035BE  D006               	goto	i2l9998
 23888  0035C0  5048               	movf	printSortTimer@i_1163+1,w,c
 23889  0035C2  E11D               	bnz	i2l905
 23890  0035C4  0E2E               	movlw	46
 23891  0035C6  5C47               	subwf	printSortTimer@i_1163,w,c
 23892  0035C8  B0D8               	btfsc	status,0,c
 23893  0035CA  D019               	goto	i2l905
 23894  0035CC                     i2l9998:
 23895                           
 23896                           ;sort.c: 527: LATBbits.LATB2 = !LATBbits.LATB2;
 23897  0035CC  B48A               	btfsc	3978,2,c	;volatile
 23898  0035CE  D003               	goto	i2u954_40
 23899  0035D0  6A2A               	clrf	??_printSortTimer& (0+255),c
 23900  0035D2  2A2A               	incf	??_printSortTimer& (0+255),f,c
 23901  0035D4  D001               	goto	i2u955_48
 23902  0035D6                     i2u954_40:
 23903  0035D6  6A2A               	clrf	??_printSortTimer& (0+255),c
 23904  0035D8                     i2u955_48:
 23905  0035D8  462A               	rlncf	??_printSortTimer,f,c
 23906  0035DA  462A               	rlncf	??_printSortTimer,f,c
 23907  0035DC  508A               	movf	3978,w,c	;volatile
 23908  0035DE  182A               	xorwf	??_printSortTimer,w,c
 23909  0035E0  0BFB               	andlw	-5
 23910  0035E2  182A               	xorwf	??_printSortTimer,w,c
 23911  0035E4  6E8A               	movwf	3978,c	;volatile
 23912                           
 23913                           ;sort.c: 528: delay_ms(45-i);
 23914  0035E6  5047               	movf	printSortTimer@i_1163,w,c
 23915  0035E8  0800               	sublw	0
 23916  0035EA  0F2D               	addlw	45
 23917  0035EC  ECC5  F02D         	call	i2_delay_ms
 23918  0035F0  4A47               	infsnz	printSortTimer@i_1163,f,c
 23919  0035F2  2A48               	incf	printSortTimer@i_1163+1,f,c
 23920  0035F4  BE48               	btfsc	printSortTimer@i_1163+1,7,c
 23921  0035F6  D7EA               	goto	i2l9998
 23922  0035F8  5048               	movf	printSortTimer@i_1163+1,w,c
 23923  0035FA  E101               	bnz	i2u956_40
 23924  0035FC  D7E3               	goto	L20
 23925  0035FE                     i2u956_40:
 23926  0035FE                     i2l905:
 23927                           
 23928                           ;sort.c: 529: }
 23929                           ;sort.c: 530: LATBbits.LATB2 = 1;
 23930  0035FE  848A               	bsf	3978,2,c	;volatile
 23931  003600  0012               	return	
 23932  003602                     __end_of_printSortTimer:
 23933                           	opt stack 0
 23934                           pclatu	equ	0xFFB
 23935                           pclath	equ	0xFFA
 23936                           tblptru	equ	0xFF8
 23937                           tblptrh	equ	0xFF7
 23938                           tblptrl	equ	0xFF6
 23939                           tablat	equ	0xFF5
 23940                           prodh	equ	0xFF4
 23941                           prodl	equ	0xFF3
 23942                           intcon	equ	0xFF2
 23943                           intcon2	equ	0xFF1
 23944                           intcon3	equ	0xFF0
 23945                           indf0	equ	0xFEF
 23946                           postinc0	equ	0xFEE
 23947                           fsr0h	equ	0xFEA
 23948                           fsr0l	equ	0xFE9
 23949                           wreg	equ	0xFE8
 23950                           postdec1	equ	0xFE5
 23951                           fsr1h	equ	0xFE2
 23952                           fsr1l	equ	0xFE1
 23953                           indf2	equ	0xFDF
 23954                           postinc2	equ	0xFDE
 23955                           postdec2	equ	0xFDD
 23956                           fsr2h	equ	0xFDA
 23957                           fsr2l	equ	0xFD9
 23958                           status	equ	0xFD8
 23959                           
 23960 ;; *************** function i2_printf *****************
 23961 ;; Defined at:
 23962 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 23963 ;; Parameters:    Size  Location     Type
 23964 ;;  f               2   12[COMRAM] PTR const unsigned char 
 23965 ;;		 -> STR_130(18), STR_129(18), STR_128(17), STR_127(17), 
 23966 ;;		 -> STR_126(15), STR_125(15), STR_124(18), STR_123(15), 
 23967 ;;		 -> STR_122(18), STR_121(18), STR_120(17), STR_119(17), 
 23968 ;;		 -> STR_118(17), STR_117(17), STR_116(17), STR_115(17), 
 23969 ;;		 -> STR_114(17), STR_113(17), STR_112(18), STR_111(17), 
 23970 ;;		 -> STR_110(15), STR_109(15), STR_108(15), STR_107(17), 
 23971 ;;		 -> STR_106(17), STR_105(17), STR_104(16), STR_103(17), 
 23972 ;;		 -> STR_102(17), STR_101(17), STR_100(17), STR_99(17), 
 23973 ;;		 -> STR_98(17), STR_97(15), STR_96(11), STR_95(17), 
 23974 ;;		 -> STR_94(11), STR_93(17), STR_92(14), STR_91(15), 
 23975 ;;		 -> STR_90(14), STR_89(10), STR_88(9), STR_87(9), 
 23976 ;;		 -> STR_86(10), STR_85(10), STR_84(16), STR_83(15), 
 23977 ;;		 -> STR_82(3), STR_81(15), STR_80(13), STR_79(14), 
 23978 ;;		 -> STR_78(8), STR_77(14), STR_76(15), STR_75(12), 
 23979 ;;		 -> STR_74(14), STR_73(17), STR_72(14), STR_71(15), 
 23980 ;;		 -> STR_70(17), STR_69(17), STR_68(7), STR_67(21), 
 23981 ;;		 -> STR_66(17), STR_65(17), STR_64(22), STR_63(24), 
 23982 ;;		 -> STR_50(17), STR_49(17), STR_48(17), STR_47(17), 
 23983 ;;		 -> STR_46(17), STR_45(17), STR_44(17), STR_43(17), 
 23984 ;;		 -> STR_42(17), STR_41(17), STR_40(17), STR_39(17), 
 23985 ;;		 -> STR_38(17), STR_37(17), STR_36(17), STR_35(17), 
 23986 ;;		 -> STR_34(17), STR_33(17), STR_32(17), STR_31(17), 
 23987 ;;		 -> STR_30(17), STR_29(3), STR_28(17), STR_27(17), 
 23988 ;;		 -> STR_26(17), STR_25(17), STR_24(17), STR_23(14), 
 23989 ;;		 -> STR_22(10), STR_21(24), STR_7(7), STR_6(17), 
 23990 ;;		 -> STR_5(18), STR_4(16), STR_3(18), STR_2(14), 
 23991 ;;		 -> STR_1(18), 
 23992 ;; Auto vars:     Size  Location     Type
 23993 ;;  printf          4    0        struct .
 23994 ;;  printf          2   39[COMRAM] int 
 23995 ;;  printf          2   35[COMRAM] unsigned int 
 23996 ;;  printf          2   33[COMRAM] unsigned int 
 23997 ;;  printf          2   31[COMRAM] PTR void [1]
 23998 ;;		 -> ?i2_printf(2), ?_printf(2), 
 23999 ;;  printf          2   29[COMRAM] PTR const unsigned char 
 24000 ;;		 -> STR_131(7), ID@res3(2), ID@res2(2), ID@res1(2), 
 24001 ;;		 -> count_total(2), printRTC@month(4), UI@month(4), 
 24002 ;;  printf          1   38[COMRAM] char 
 24003 ;;  printf          1   37[COMRAM] unsigned char 
 24004 ;;  printf          1   28[COMRAM] char 
 24005 ;; Return value:  Size  Location     Type
 24006 ;;                  2   12[COMRAM] int 
 24007 ;; Registers used:
 24008 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 24009 ;; Tracked objects:
 24010 ;;		On entry : 0/0
 24011 ;;		On exit  : 0/0
 24012 ;;		Unchanged: 0/0
 24013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24014 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24015 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24016 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24017 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24018 ;;Total ram usage:       29 bytes
 24019 ;; Hardware stack levels used:    1
 24020 ;; Hardware stack levels required when called:    2
 24021 ;; This function calls:
 24022 ;;		i2___lwdiv
 24023 ;;		i2___lwmod
 24024 ;;		i2___wmul
 24025 ;;		i2_isdigit
 24026 ;;		i2_putch
 24027 ;; This function is called by:
 24028 ;;		_change_state_to_menu_11
 24029 ;;		_change_state_to_menu_23
 24030 ;;		_change_state_to_logs_11
 24031 ;;		_change_state_to_logs_12
 24032 ;;		_change_state_to_logs_22
 24033 ;;		_change_state_to_logs_23
 24034 ;;		_change_state_to_logs_33
 24035 ;;		_change_state_to_logs_34
 24036 ;;		_printSortTimer
 24037 ;;		i2_change_state_to_menu_start
 24038 ;;		i2_change_state_to_menu_12
 24039 ;;		i2_change_state_to_menu_22
 24040 ;;		i2_printRTC
 24041 ;; This function uses a non-reentrant model
 24042 ;;
 24043                           
 24044                           	psect	text87
 24045  002452                     __ptext87:
 24046                           	opt stack 0
 24047  002452                     i2_printf:
 24048                           	opt stack 20
 24049                           
 24050                           ;doprnt.c: 466: va_list ap;
 24051                           ;doprnt.c: 499: signed char c;
 24052                           ;doprnt.c: 501: int width;
 24053                           ;doprnt.c: 506: signed char prec;
 24054                           ;doprnt.c: 508: unsigned char flag;
 24055                           ;doprnt.c: 523: union {
 24056                           ;doprnt.c: 524: unsigned long vd;
 24057                           ;doprnt.c: 525: double integ;
 24058                           ;doprnt.c: 526: } tmpval;
 24059                           ;doprnt.c: 528: unsigned int val;
 24060                           ;doprnt.c: 529: unsigned len;
 24061                           ;doprnt.c: 530: const char * cp;
 24062                           ;doprnt.c: 533: *ap = __va_start();
 24063                           
 24064                           ;incstack = 0
 24065  002452  0E0F               	movlw	low (?i2_printf+2)
 24066  002454  6E20               	movwf	i2printf@ap,c
 24067  002456  0E00               	movlw	high (?i2_printf+2)
 24068  002458  6E21               	movwf	i2printf@ap+1,c
 24069                           
 24070                           ;doprnt.c: 536: while(c = *f++) {
 24071  00245A  D1A4               	goto	i2l7112
 24072  00245C                     i2l6982:
 24073                           
 24074                           ;doprnt.c: 538: if(c != '%')
 24075  00245C  0E25               	movlw	37
 24076  00245E  1827               	xorwf	i2printf@c,w,c
 24077  002460  B4D8               	btfsc	status,2,c
 24078  002462  D004               	goto	i2l6986
 24079                           
 24080                           ;doprnt.c: 540: {
 24081                           ;doprnt.c: 541: (putch(c) );
 24082  002464  5027               	movf	i2printf@c,w,c
 24083  002466  EC18  F02E         	call	i2_putch
 24084                           
 24085                           ;doprnt.c: 542: continue;
 24086  00246A  D19C               	goto	i2l7112
 24087  00246C                     i2l6986:
 24088                           
 24089                           ;doprnt.c: 543: }
 24090                           ;doprnt.c: 546: width = 0;
 24091  00246C  0E00               	movlw	0
 24092  00246E  6E29               	movwf	i2printf@width+1,c
 24093  002470  0E00               	movlw	0
 24094  002472  6E28               	movwf	i2printf@width,c
 24095                           
 24096                           ;doprnt.c: 548: flag = 0;
 24097  002474  0E00               	movlw	0
 24098  002476  6E26               	movwf	i2printf@flag,c
 24099                           
 24100                           ;doprnt.c: 551: switch(*f) {
 24101                           
 24102                           ;doprnt.c: 550: for(;;) {
 24103  002478  D003               	goto	i2l6992
 24104  00247A                     i2l6988:
 24105                           
 24106                           ;doprnt.c: 580: flag |= 0x04;
 24107  00247A  8426               	bsf	i2printf@flag,2,c
 24108                           
 24109                           ;doprnt.c: 581: f++;
 24110  00247C  4A0D               	infsnz	i2printf@f,f,c
 24111  00247E  2A0E               	incf	i2printf@f+1,f,c
 24112  002480                     i2l6992:
 24113  002480  C00D  FFF6         	movff	i2printf@f,tblptrl
 24114  002484  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 24115  002488                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 24116  002488  6AF8               	clrf	tblptru,c
 24117  00248A                     	endif
 24118  00248A                     	if	0	;tblptru may be non-zero
 24119  00248A                     	endif
 24120  00248A  0008               	tblrd		*
 24121  00248C  50F5               	movf	tablat,w,c
 24122                           
 24123                           ; Switch size 1, requested type "space"
 24124                           ; Number of cases is 1, Range of values is 48 to 48
 24125                           ; switch strategies available:
 24126                           ; Name         Instructions Cycles
 24127                           ; simple_byte            4     3 (average)
 24128                           ;	Chosen strategy is simple_byte
 24129  00248E  0A30               	xorlw	48	; case 48
 24130  002490  B4D8               	btfsc	status,2,c
 24131  002492  D7F3               	goto	i2l6988
 24132                           
 24133                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 24134                           
 24135                           ;doprnt.c: 586: }
 24136                           
 24137                           ;doprnt.c: 585: break;
 24138  002494  C00D  FFF6         	movff	i2printf@f,tblptrl
 24139  002498  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 24140  00249C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 24141  00249C  6AF8               	clrf	tblptru,c
 24142  00249E                     	endif
 24143  00249E                     	if	0	;tblptru may be non-zero
 24144  00249E                     	endif
 24145  00249E  0008               	tblrd		*
 24146  0024A0  50F5               	movf	tablat,w,c
 24147  0024A2  ECA8  F02D         	call	i2_isdigit
 24148  0024A6  A0D8               	btfss	status,0,c
 24149  0024A8  D0A6               	goto	i2l7040
 24150                           
 24151                           ;doprnt.c: 598: width = 0;
 24152  0024AA  0E00               	movlw	0
 24153  0024AC  6E29               	movwf	i2printf@width+1,c
 24154  0024AE  0E00               	movlw	0
 24155  0024B0  6E28               	movwf	i2printf@width,c
 24156  0024B2                     i2l6998:
 24157                           
 24158                           ;doprnt.c: 600: width *= 10;
 24159  0024B2  C028  F001         	movff	i2printf@width,i2___wmul@multiplier
 24160  0024B6  C029  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 24161  0024BA  0E00               	movlw	0
 24162  0024BC  6E04               	movwf	i2___wmul@multiplicand+1,c
 24163  0024BE  0E0A               	movlw	10
 24164  0024C0  6E03               	movwf	i2___wmul@multiplicand,c
 24165  0024C2  EC4E  F02D         	call	i2___wmul	;wreg free
 24166  0024C6  C001  F028         	movff	?i2___wmul,i2printf@width
 24167  0024CA  C002  F029         	movff	?i2___wmul+1,i2printf@width+1
 24168                           
 24169                           ;doprnt.c: 601: width += *f++ - '0';
 24170  0024CE  0ED0               	movlw	208
 24171  0024D0  6E19               	movwf	??i2_printf& (0+255),c
 24172  0024D2  0EFF               	movlw	255
 24173  0024D4  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 24174  0024D6  C00D  FFF6         	movff	i2printf@f,tblptrl
 24175  0024DA  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 24176  0024DE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 24177  0024DE  6AF8               	clrf	tblptru,c
 24178  0024E0                     	endif
 24179  0024E0                     	if	0	;tblptru may be non-zero
 24180  0024E0                     	endif
 24181  0024E0  0008               	tblrd		*
 24182  0024E2  50F5               	movf	tablat,w,c
 24183  0024E4  6E1B               	movwf	(??i2_printf+2)& (0+255),c
 24184  0024E6  6A1C               	clrf	(??i2_printf+3)& (0+255),c
 24185  0024E8  5019               	movf	??i2_printf,w,c
 24186  0024EA  261B               	addwf	??i2_printf+2,f,c
 24187  0024EC  501A               	movf	??i2_printf+1,w,c
 24188  0024EE  221C               	addwfc	??i2_printf+3,f,c
 24189  0024F0  501B               	movf	??i2_printf+2,w,c
 24190  0024F2  2628               	addwf	i2printf@width,f,c
 24191  0024F4  501C               	movf	??i2_printf+3,w,c
 24192  0024F6  2229               	addwfc	i2printf@width+1,f,c
 24193  0024F8  4A0D               	infsnz	i2printf@f,f,c
 24194  0024FA  2A0E               	incf	i2printf@f+1,f,c
 24195                           
 24196                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 24197  0024FC  C00D  FFF6         	movff	i2printf@f,tblptrl
 24198  002500  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 24199  002504                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 24200  002504  6AF8               	clrf	tblptru,c
 24201  002506                     	endif
 24202  002506                     	if	0	;tblptru may be non-zero
 24203  002506                     	endif
 24204  002506  0008               	tblrd		*
 24205  002508  50F5               	movf	tablat,w,c
 24206  00250A  ECA8  F02D         	call	i2_isdigit
 24207  00250E  A0D8               	btfss	status,0,c
 24208  002510  D072               	goto	i2l7040
 24209  002512  D7CF               	goto	i2l6998
 24210  002514                     i2l7006:
 24211                           
 24212                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 24213  002514  C020  FFD9         	movff	i2printf@ap,fsr2l
 24214  002518  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 24215  00251C  CFDE F01E          	movff	postinc2,i2printf@cp
 24216  002520  CFDD F01F          	movff	postdec2,i2printf@cp+1
 24217  002524  0E02               	movlw	2
 24218  002526  2620               	addwf	i2printf@ap,f,c
 24219  002528  0E00               	movlw	0
 24220  00252A  2221               	addwfc	i2printf@ap+1,f,c
 24221                           
 24222                           ;doprnt.c: 740: if(!cp)
 24223  00252C  501E               	movf	i2printf@cp,w,c
 24224  00252E  101F               	iorwf	i2printf@cp+1,w,c
 24225  002530  A4D8               	btfss	status,2,c
 24226  002532  D004               	goto	i2l7014
 24227                           
 24228                           ;doprnt.c: 741: cp = "(null)";
 24229  002534  0EB6               	movlw	low STR_131
 24230  002536  6E1E               	movwf	i2printf@cp,c
 24231  002538  0EFF               	movlw	high STR_131
 24232  00253A  6E1F               	movwf	i2printf@cp+1,c
 24233  00253C                     i2l7014:
 24234                           
 24235                           ;doprnt.c: 745: len = 0;
 24236  00253C  0E00               	movlw	0
 24237  00253E  6E23               	movwf	i2printf@len+1,c
 24238  002540  0E00               	movlw	0
 24239  002542  6E22               	movwf	i2printf@len,c
 24240                           
 24241                           ;doprnt.c: 746: while(cp[len])
 24242  002544  D002               	goto	i2l7018
 24243  002546                     i2l7016:
 24244                           
 24245                           ;doprnt.c: 747: len++;
 24246  002546  4A22               	infsnz	i2printf@len,f,c
 24247  002548  2A23               	incf	i2printf@len+1,f,c
 24248  00254A                     i2l7018:
 24249  00254A  5022               	movf	i2printf@len,w,c
 24250  00254C  241E               	addwf	i2printf@cp,w,c
 24251  00254E  6E19               	movwf	??i2_printf& (0+255),c
 24252  002550  5023               	movf	i2printf@len+1,w,c
 24253  002552  201F               	addwfc	i2printf@cp+1,w,c
 24254  002554  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 24255  002556  C019  FFF6         	movff	??i2_printf,tblptrl
 24256  00255A  C01A  FFF7         	movff	??i2_printf+1,tblptrh
 24257  00255E  0E00               	movlw	low (__mediumconst shr (0+16))
 24258  002560  6EF8               	movwf	tblptru,c
 24259  002562  0E0F               	movlw	(high __ramtop+-1)
 24260  002564  64F7               	cpfsgt	tblptrh,c
 24261  002566  D003               	bra	i2u569_47
 24262  002568  0008               	tblrd		*
 24263  00256A  50F5               	movf	tablat,w,c
 24264  00256C  D005               	bra	i2u569_40
 24265  00256E                     i2u569_47:
 24266  00256E  CFF6 FFE9          	movff	tblptrl,fsr0l
 24267  002572  CFF7 FFEA          	movff	tblptrh,fsr0h
 24268  002576  50EF               	movf	indf0,w,c
 24269  002578                     i2u569_40:
 24270  002578  0900               	iorlw	0
 24271  00257A  A4D8               	btfss	status,2,c
 24272  00257C  D7E4               	goto	i2l7016
 24273                           
 24274                           ;doprnt.c: 757: if(width > len)
 24275  00257E  5028               	movf	i2printf@width,w,c
 24276  002580  5C22               	subwf	i2printf@len,w,c
 24277  002582  5029               	movf	i2printf@width+1,w,c
 24278  002584  5823               	subwfb	i2printf@len+1,w,c
 24279  002586  B0D8               	btfsc	status,0,c
 24280  002588  D005               	goto	i2l7024
 24281                           
 24282                           ;doprnt.c: 758: width -= len;
 24283  00258A  5022               	movf	i2printf@len,w,c
 24284  00258C  5E28               	subwf	i2printf@width,f,c
 24285  00258E  5023               	movf	i2printf@len+1,w,c
 24286  002590  5A29               	subwfb	i2printf@width+1,f,c
 24287  002592  D008               	goto	i2l7028
 24288  002594                     i2l7024:
 24289                           
 24290                           ;doprnt.c: 759: else
 24291                           ;doprnt.c: 760: width = 0;
 24292  002594  0E00               	movlw	0
 24293  002596  6E29               	movwf	i2printf@width+1,c
 24294  002598  0E00               	movlw	0
 24295  00259A  6E28               	movwf	i2printf@width,c
 24296                           
 24297                           ;doprnt.c: 764: while(width--)
 24298  00259C  D003               	goto	i2l7028
 24299  00259E                     i2l7026:
 24300                           
 24301                           ;doprnt.c: 765: (putch(' ') );
 24302  00259E  0E20               	movlw	32
 24303  0025A0  EC18  F02E         	call	i2_putch
 24304  0025A4                     i2l7028:
 24305  0025A4  0628               	decf	i2printf@width,f,c
 24306  0025A6  A0D8               	btfss	status,0,c
 24307  0025A8  0629               	decf	i2printf@width+1,f,c
 24308  0025AA  2828               	incf	i2printf@width,w,c
 24309  0025AC  E1F8               	bnz	i2l7026
 24310  0025AE  2829               	incf	i2printf@width+1,w,c
 24311  0025B0  B4D8               	btfsc	status,2,c
 24312  0025B2  D016               	goto	i2l7034
 24313  0025B4  D7F4               	goto	i2l7026
 24314  0025B6                     i2l7030:
 24315                           
 24316                           ;doprnt.c: 768: (putch(*cp++) );
 24317  0025B6  C01E  FFF6         	movff	i2printf@cp,tblptrl
 24318  0025BA  C01F  FFF7         	movff	i2printf@cp+1,tblptrh
 24319  0025BE  0E00               	movlw	low (__mediumconst shr (0+16))
 24320  0025C0  6EF8               	movwf	tblptru,c
 24321  0025C2  0E0F               	movlw	(high __ramtop+-1)
 24322  0025C4  64F7               	cpfsgt	tblptrh,c
 24323  0025C6  D003               	bra	i2u573_47
 24324  0025C8  0008               	tblrd		*
 24325  0025CA  50F5               	movf	tablat,w,c
 24326  0025CC  D005               	bra	i2u573_40
 24327  0025CE                     i2u573_47:
 24328  0025CE  CFF6 FFE9          	movff	tblptrl,fsr0l
 24329  0025D2  CFF7 FFEA          	movff	tblptrh,fsr0h
 24330  0025D6  50EF               	movf	indf0,w,c
 24331  0025D8                     i2u573_40:
 24332  0025D8  EC18  F02E         	call	i2_putch
 24333  0025DC  4A1E               	infsnz	i2printf@cp,f,c
 24334  0025DE  2A1F               	incf	i2printf@cp+1,f,c
 24335  0025E0                     i2l7034:
 24336  0025E0  0622               	decf	i2printf@len,f,c
 24337  0025E2  A0D8               	btfss	status,0,c
 24338  0025E4  0623               	decf	i2printf@len+1,f,c
 24339  0025E6  2822               	incf	i2printf@len,w,c
 24340  0025E8  E1E6               	bnz	i2l7030
 24341  0025EA  2823               	incf	i2printf@len+1,w,c
 24342  0025EC  B4D8               	btfsc	status,2,c
 24343  0025EE  D0DA               	goto	i2l7112
 24344  0025F0  D7E2               	goto	i2l7030
 24345  0025F2                     i2l7036:
 24346                           
 24347                           ;doprnt.c: 818: flag |= 0x40;
 24348  0025F2  8C26               	bsf	i2printf@flag,6,c
 24349                           
 24350                           ;doprnt.c: 822: }
 24351                           
 24352                           ;doprnt.c: 819: break;
 24353  0025F4  D01B               	goto	i2l1520
 24354  0025F6                     i2l7040:
 24355  0025F6  C00D  FFF6         	movff	i2printf@f,tblptrl
 24356  0025FA  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 24357  0025FE  4A0D               	infsnz	i2printf@f,f,c
 24358  002600  2A0E               	incf	i2printf@f+1,f,c
 24359  002602                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 24360  002602  6AF8               	clrf	tblptru,c
 24361  002604                     	endif
 24362  002604                     	if	0	;tblptru may be non-zero
 24363  002604                     	endif
 24364  002604  0008               	tblrd		*
 24365  002606  CFF5 F027          	movff	tablat,i2printf@c
 24366  00260A  5027               	movf	i2printf@c,w,c
 24367                           
 24368                           ; Switch size 1, requested type "space"
 24369                           ; Number of cases is 5, Range of values is 0 to 117
 24370                           ; switch strategies available:
 24371                           ; Name         Instructions Cycles
 24372                           ; simple_byte           16     9 (average)
 24373                           ;	Chosen strategy is simple_byte
 24374  00260C  0A00               	xorlw	0	; case 0
 24375  00260E  B4D8               	btfsc	status,2,c
 24376  002610  0012               	return	
 24377  002612  0A64               	xorlw	100	; case 100
 24378  002614  B4D8               	btfsc	status,2,c
 24379  002616  D00A               	goto	i2l1520
 24380  002618  0A0D               	xorlw	13	; case 105
 24381  00261A  B4D8               	btfsc	status,2,c
 24382  00261C  D007               	goto	i2l1520
 24383  00261E  0A1A               	xorlw	26	; case 115
 24384  002620  B4D8               	btfsc	status,2,c
 24385  002622  D778               	goto	i2l7006
 24386  002624  0A06               	xorlw	6	; case 117
 24387  002626  B4D8               	btfsc	status,2,c
 24388  002628  D7E4               	goto	i2l7036
 24389  00262A  D0BC               	goto	i2l7112
 24390  00262C                     i2l1520:
 24391                           
 24392                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 24393  00262C  BC26               	btfsc	i2printf@flag,6,c
 24394  00262E  D015               	goto	i2l7052
 24395                           
 24396                           ;doprnt.c: 1253: {
 24397                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 24398  002630  C020  FFD9         	movff	i2printf@ap,fsr2l
 24399  002634  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 24400  002638  CFDE F024          	movff	postinc2,i2printf@val
 24401  00263C  CFDD F025          	movff	postdec2,i2printf@val+1
 24402  002640  0E02               	movlw	2
 24403  002642  2620               	addwf	i2printf@ap,f,c
 24404  002644  0E00               	movlw	0
 24405  002646  2221               	addwfc	i2printf@ap+1,f,c
 24406                           
 24407                           ;doprnt.c: 1261: if((int)val < 0) {
 24408  002648  AE25               	btfss	i2printf@val+1,7,c
 24409  00264A  D013               	goto	i2l7056
 24410                           
 24411                           ;doprnt.c: 1262: flag |= 0x03;
 24412  00264C  0E03               	movlw	3
 24413  00264E  1226               	iorwf	i2printf@flag,f,c
 24414                           
 24415                           ;doprnt.c: 1263: val = -val;
 24416  002650  6C24               	negf	i2printf@val,c
 24417  002652  1E25               	comf	i2printf@val+1,f,c
 24418  002654  B0D8               	btfsc	status,0,c
 24419  002656  2A25               	incf	i2printf@val+1,f,c
 24420                           
 24421                           ;doprnt.c: 1264: }
 24422                           ;doprnt.c: 1266: }
 24423  002658  D00C               	goto	i2l7056
 24424  00265A                     i2l7052:
 24425                           
 24426                           ;doprnt.c: 1268: else
 24427                           ;doprnt.c: 1273: {
 24428                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 24429  00265A  C020  FFD9         	movff	i2printf@ap,fsr2l
 24430  00265E  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 24431  002662  CFDE F024          	movff	postinc2,i2printf@val
 24432  002666  CFDD F025          	movff	postdec2,i2printf@val+1
 24433  00266A  0E02               	movlw	2
 24434  00266C  2620               	addwf	i2printf@ap,f,c
 24435  00266E  0E00               	movlw	0
 24436  002670  2221               	addwfc	i2printf@ap+1,f,c
 24437  002672                     i2l7056:
 24438                           
 24439                           ;doprnt.c: 1287: }
 24440                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 24441  002672  0E01               	movlw	1
 24442  002674  6E27               	movwf	i2printf@c,c
 24443  002676                     i2l7058:
 24444  002676  0E05               	movlw	5
 24445  002678  1827               	xorwf	i2printf@c,w,c
 24446  00267A  B4D8               	btfsc	status,2,c
 24447  00267C  D015               	goto	i2l7070
 24448                           
 24449                           ;doprnt.c: 1306: if(val < dpowers[c])
 24450  00267E  5027               	movf	i2printf@c,w,c
 24451  002680  0D02               	mullw	2
 24452  002682  0E98               	movlw	low _dpowers
 24453  002684  24F3               	addwf	prodl,w,c
 24454  002686  6EF6               	movwf	tblptrl,c
 24455  002688  0EFA               	movlw	high _dpowers
 24456  00268A  20F4               	addwfc	prodh,w,c
 24457  00268C  6EF7               	movwf	tblptrh,c
 24458  00268E                     	if	1	;There are 3 active tblptr bytes
 24459  00268E  6AF8               	clrf	tblptru,c
 24460  002690  0E00               	movlw	low (__mediumconst shr (0+16))
 24461  002692  22F8               	addwfc	tblptru,f,c
 24462  002694                     	endif
 24463  002694  0009               	tblrd		*+
 24464  002696  50F5               	movf	tablat,w,c
 24465  002698  5C24               	subwf	i2printf@val,w,c
 24466  00269A  0009               	tblrd		*+
 24467  00269C  50F5               	movf	tablat,w,c
 24468  00269E  5825               	subwfb	i2printf@val+1,w,c
 24469  0026A0  A0D8               	btfss	status,0,c
 24470  0026A2  D002               	goto	i2l7070
 24471                           
 24472                           ;doprnt.c: 1307: break;
 24473  0026A4  2A27               	incf	i2printf@c,f,c
 24474  0026A6  D7E7               	goto	i2l7058
 24475  0026A8                     i2l7070:
 24476                           
 24477                           ;doprnt.c: 1345: if(width && flag & 0x03)
 24478  0026A8  5028               	movf	i2printf@width,w,c
 24479  0026AA  1029               	iorwf	i2printf@width+1,w,c
 24480  0026AC  B4D8               	btfsc	status,2,c
 24481  0026AE  D009               	goto	i2l7076
 24482  0026B0  C026  F019         	movff	i2printf@flag,??i2_printf
 24483  0026B4  0E03               	movlw	3
 24484  0026B6  1619               	andwf	??i2_printf,f,c
 24485  0026B8  B4D8               	btfsc	status,2,c
 24486  0026BA  D003               	goto	i2l7076
 24487                           
 24488                           ;doprnt.c: 1346: width--;
 24489  0026BC  0628               	decf	i2printf@width,f,c
 24490  0026BE  A0D8               	btfss	status,0,c
 24491  0026C0  0629               	decf	i2printf@width+1,f,c
 24492  0026C2                     i2l7076:
 24493                           
 24494                           ;doprnt.c: 1381: if(width > c)
 24495  0026C2  0E80               	movlw	128
 24496  0026C4  BE27               	btfsc	i2printf@c,7,c
 24497  0026C6  0E7F               	movlw	127
 24498  0026C8  6E19               	movwf	??i2_printf& (0+255),c
 24499  0026CA  5028               	movf	i2printf@width,w,c
 24500  0026CC  5C27               	subwf	i2printf@c,w,c
 24501  0026CE  5029               	movf	i2printf@width+1,w,c
 24502  0026D0  0A80               	xorlw	128
 24503  0026D2  5819               	subwfb	??i2_printf& (0+255),w,c
 24504  0026D4  B0D8               	btfsc	status,0,c
 24505  0026D6  D007               	goto	i2l7080
 24506                           
 24507                           ;doprnt.c: 1382: width -= c;
 24508  0026D8  5027               	movf	i2printf@c,w,c
 24509  0026DA  5E28               	subwf	i2printf@width,f,c
 24510  0026DC  0E00               	movlw	0
 24511  0026DE  BE27               	btfsc	i2printf@c,7,c
 24512  0026E0  0EFF               	movlw	255
 24513  0026E2  5A29               	subwfb	i2printf@width+1,f,c
 24514  0026E4  D004               	goto	i2l7082
 24515  0026E6                     i2l7080:
 24516                           
 24517                           ;doprnt.c: 1383: else
 24518                           ;doprnt.c: 1384: width = 0;
 24519  0026E6  0E00               	movlw	0
 24520  0026E8  6E29               	movwf	i2printf@width+1,c
 24521  0026EA  0E00               	movlw	0
 24522  0026EC  6E28               	movwf	i2printf@width,c
 24523  0026EE                     i2l7082:
 24524                           
 24525                           ;doprnt.c: 1387: if(flag & 0x04) {
 24526  0026EE  A426               	btfss	i2printf@flag,2,c
 24527  0026F0  D014               	goto	i2l7094
 24528                           
 24529                           ;doprnt.c: 1392: if(flag & 0x03)
 24530  0026F2  C026  F019         	movff	i2printf@flag,??i2_printf
 24531  0026F6  0E03               	movlw	3
 24532  0026F8  1619               	andwf	??i2_printf,f,c
 24533  0026FA  B4D8               	btfsc	status,2,c
 24534  0026FC  D003               	goto	i2l7088
 24535                           
 24536                           ;doprnt.c: 1393: (putch('-') );
 24537  0026FE  0E2D               	movlw	45
 24538  002700  EC18  F02E         	call	i2_putch
 24539  002704                     i2l7088:
 24540                           
 24541                           ;doprnt.c: 1415: if(width)
 24542  002704  5028               	movf	i2printf@width,w,c
 24543  002706  1029               	iorwf	i2printf@width+1,w,c
 24544  002708  B4D8               	btfsc	status,2,c
 24545  00270A  D01E               	goto	i2l7104
 24546                           
 24547                           ;doprnt.c: 1417: (putch('0') );
 24548                           
 24549                           ;doprnt.c: 1416: do
 24550  00270C  0E30               	movlw	48
 24551  00270E  EC18  F02E         	call	i2_putch
 24552                           
 24553                           ;doprnt.c: 1418: while(--width);
 24554  002712  0628               	decf	i2printf@width,f,c
 24555  002714  A0D8               	btfss	status,0,c
 24556  002716  0629               	decf	i2printf@width+1,f,c
 24557  002718  D7F5               	goto	i2l7088
 24558  00271A                     i2l7094:
 24559                           
 24560                           ;doprnt.c: 1422: {
 24561                           ;doprnt.c: 1424: if(width
 24562                           ;doprnt.c: 1428: )
 24563  00271A  5028               	movf	i2printf@width,w,c
 24564  00271C  1029               	iorwf	i2printf@width+1,w,c
 24565  00271E  B4D8               	btfsc	status,2,c
 24566  002720  D00A               	goto	i2l7100
 24567  002722                     i2l7096:
 24568                           
 24569                           ;doprnt.c: 1430: (putch(' ') );
 24570  002722  0E20               	movlw	32
 24571  002724  EC18  F02E         	call	i2_putch
 24572                           
 24573                           ;doprnt.c: 1431: while(--width);
 24574  002728  0628               	decf	i2printf@width,f,c
 24575  00272A  A0D8               	btfss	status,0,c
 24576  00272C  0629               	decf	i2printf@width+1,f,c
 24577  00272E  5028               	movf	i2printf@width,w,c
 24578  002730  1029               	iorwf	i2printf@width+1,w,c
 24579  002732  A4D8               	btfss	status,2,c
 24580  002734  D7F6               	goto	i2l7096
 24581  002736                     i2l7100:
 24582                           
 24583                           ;doprnt.c: 1438: if(flag & 0x03)
 24584  002736  C026  F019         	movff	i2printf@flag,??i2_printf
 24585  00273A  0E03               	movlw	3
 24586  00273C  1619               	andwf	??i2_printf,f,c
 24587  00273E  B4D8               	btfsc	status,2,c
 24588  002740  D003               	goto	i2l7104
 24589                           
 24590                           ;doprnt.c: 1439: (putch('-') );
 24591  002742  0E2D               	movlw	45
 24592  002744  EC18  F02E         	call	i2_putch
 24593  002748                     i2l7104:
 24594                           
 24595                           ;doprnt.c: 1469: }
 24596                           ;doprnt.c: 1472: prec = c;
 24597  002748  C027  F01D         	movff	i2printf@c,i2printf@prec
 24598                           
 24599                           ;doprnt.c: 1474: while(prec--) {
 24600  00274C  D027               	goto	i2l7110
 24601  00274E                     i2l7106:
 24602                           
 24603                           ;doprnt.c: 1478: {
 24604                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 24605  00274E  501D               	movf	i2printf@prec,w,c
 24606  002750  0D02               	mullw	2
 24607  002752  0E98               	movlw	low _dpowers
 24608  002754  24F3               	addwf	prodl,w,c
 24609  002756  6EF6               	movwf	tblptrl,c
 24610  002758  0EFA               	movlw	high _dpowers
 24611  00275A  20F4               	addwfc	prodh,w,c
 24612  00275C  6EF7               	movwf	tblptrh,c
 24613  00275E                     	if	1	;There are 3 active tblptr bytes
 24614  00275E  6AF8               	clrf	tblptru,c
 24615  002760  0E00               	movlw	low (__mediumconst shr (0+16))
 24616  002762  22F8               	addwfc	tblptru,f,c
 24617  002764                     	endif
 24618  002764  0009               	tblrd		*+
 24619  002766  CFF5 F008          	movff	tablat,i2___lwdiv@divisor
 24620  00276A  000A               	tblrd		*-
 24621  00276C  CFF5 F009          	movff	tablat,i2___lwdiv@divisor+1
 24622  002770  C024  F006         	movff	i2printf@val,i2___lwdiv@dividend
 24623  002774  C025  F007         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 24624  002778  ECE2  F029         	call	i2___lwdiv	;wreg free
 24625  00277C  C006  F001         	movff	?i2___lwdiv,i2___lwmod@dividend
 24626  002780  C007  F002         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 24627  002784  0E00               	movlw	0
 24628  002786  6E04               	movwf	i2___lwmod@divisor+1,c
 24629  002788  0E0A               	movlw	10
 24630  00278A  6E03               	movwf	i2___lwmod@divisor,c
 24631  00278C  ECE9  F02A         	call	i2___lwmod	;wreg free
 24632  002790  5001               	movf	?i2___lwmod,w,c
 24633  002792  0F30               	addlw	48
 24634  002794  6E27               	movwf	i2printf@c,c
 24635                           
 24636                           ;doprnt.c: 1523: }
 24637                           ;doprnt.c: 1524: (putch(c) );
 24638  002796  5027               	movf	i2printf@c,w,c
 24639  002798  EC18  F02E         	call	i2_putch
 24640  00279C                     i2l7110:
 24641  00279C  061D               	decf	i2printf@prec,f,c
 24642  00279E  281D               	incf	i2printf@prec,w,c
 24643  0027A0  A4D8               	btfss	status,2,c
 24644  0027A2  D7D5               	goto	i2l7106
 24645  0027A4                     i2l7112:
 24646  0027A4  C00D  FFF6         	movff	i2printf@f,tblptrl
 24647  0027A8  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 24648  0027AC  4A0D               	infsnz	i2printf@f,f,c
 24649  0027AE  2A0E               	incf	i2printf@f+1,f,c
 24650  0027B0                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 24651  0027B0  6AF8               	clrf	tblptru,c
 24652  0027B2                     	endif
 24653  0027B2                     	if	0	;tblptru may be non-zero
 24654  0027B2                     	endif
 24655  0027B2  0008               	tblrd		*
 24656  0027B4  CFF5 F027          	movff	tablat,i2printf@c
 24657  0027B8  5027               	movf	i2printf@c,w,c
 24658  0027BA  B4D8               	btfsc	status,2,c
 24659  0027BC  0012               	return	
 24660  0027BE  D64E               	goto	i2l6982
 24661  0027C0                     __end_ofi2_printf:
 24662                           	opt stack 0
 24663                           pclatu	equ	0xFFB
 24664                           pclath	equ	0xFFA
 24665                           tblptru	equ	0xFF8
 24666                           tblptrh	equ	0xFF7
 24667                           tblptrl	equ	0xFF6
 24668                           tablat	equ	0xFF5
 24669                           prodh	equ	0xFF4
 24670                           prodl	equ	0xFF3
 24671                           intcon	equ	0xFF2
 24672                           intcon2	equ	0xFF1
 24673                           intcon3	equ	0xFF0
 24674                           indf0	equ	0xFEF
 24675                           postinc0	equ	0xFEE
 24676                           fsr0h	equ	0xFEA
 24677                           fsr0l	equ	0xFE9
 24678                           wreg	equ	0xFE8
 24679                           postdec1	equ	0xFE5
 24680                           fsr1h	equ	0xFE2
 24681                           fsr1l	equ	0xFE1
 24682                           indf2	equ	0xFDF
 24683                           postinc2	equ	0xFDE
 24684                           postdec2	equ	0xFDD
 24685                           fsr2h	equ	0xFDA
 24686                           fsr2l	equ	0xFD9
 24687                           status	equ	0xFD8
 24688                           
 24689 ;; *************** function i2_putch *****************
 24690 ;; Defined at:
 24691 ;;		line 20 in file "lcd.c"
 24692 ;; Parameters:    Size  Location     Type
 24693 ;;  data            1    wreg     unsigned char 
 24694 ;; Auto vars:     Size  Location     Type
 24695 ;;  data            1    2[COMRAM] unsigned char 
 24696 ;; Return value:  Size  Location     Type
 24697 ;;                  1    wreg      void 
 24698 ;; Registers used:
 24699 ;;		wreg, status,2, status,0, cstack
 24700 ;; Tracked objects:
 24701 ;;		On entry : 0/0
 24702 ;;		On exit  : 0/0
 24703 ;;		Unchanged: 0/0
 24704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24705 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24706 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24707 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24708 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24709 ;;Total ram usage:        1 bytes
 24710 ;; Hardware stack levels used:    1
 24711 ;; Hardware stack levels required when called:    1
 24712 ;; This function calls:
 24713 ;;		i2_lcdNibble
 24714 ;; This function is called by:
 24715 ;;		i2_printf
 24716 ;; This function uses a non-reentrant model
 24717 ;;
 24718                           
 24719                           	psect	text88
 24720  005C30                     __ptext88:
 24721                           	opt stack 0
 24722  005C30                     i2_putch:
 24723                           	opt stack 20
 24724                           
 24725                           ;incstack = 0
 24726                           ;i2putch@data stored from wreg
 24727  005C30  6E03               	movwf	i2putch@data,c
 24728                           
 24729                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 24730  005C32  848C               	bsf	3980,2,c	;volatile
 24731                           
 24732                           ;lcd.c: 22: lcdNibble(data);
 24733  005C34  5003               	movf	i2putch@data,w,c
 24734  005C36  ECB5  F029         	call	i2_lcdNibble
 24735  005C3A  0012               	return		;funcret
 24736  005C3C                     __end_ofi2_putch:
 24737                           	opt stack 0
 24738                           pclatu	equ	0xFFB
 24739                           pclath	equ	0xFFA
 24740                           tblptru	equ	0xFF8
 24741                           tblptrh	equ	0xFF7
 24742                           tblptrl	equ	0xFF6
 24743                           tablat	equ	0xFF5
 24744                           prodh	equ	0xFF4
 24745                           prodl	equ	0xFF3
 24746                           intcon	equ	0xFF2
 24747                           intcon2	equ	0xFF1
 24748                           intcon3	equ	0xFF0
 24749                           indf0	equ	0xFEF
 24750                           postinc0	equ	0xFEE
 24751                           fsr0h	equ	0xFEA
 24752                           fsr0l	equ	0xFE9
 24753                           wreg	equ	0xFE8
 24754                           postdec1	equ	0xFE5
 24755                           fsr1h	equ	0xFE2
 24756                           fsr1l	equ	0xFE1
 24757                           indf2	equ	0xFDF
 24758                           postinc2	equ	0xFDE
 24759                           postdec2	equ	0xFDD
 24760                           fsr2h	equ	0xFDA
 24761                           fsr2l	equ	0xFD9
 24762                           status	equ	0xFD8
 24763                           
 24764 ;; *************** function i2_isdigit *****************
 24765 ;; Defined at:
 24766 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 24767 ;; Parameters:    Size  Location     Type
 24768 ;;  c               1    wreg     unsigned char 
 24769 ;; Auto vars:     Size  Location     Type
 24770 ;;  c               1    2[COMRAM] unsigned char 
 24771 ;; Return value:  Size  Location     Type
 24772 ;;		None               void
 24773 ;; Registers used:
 24774 ;;		wreg, status,2, status,0
 24775 ;; Tracked objects:
 24776 ;;		On entry : 0/0
 24777 ;;		On exit  : 0/0
 24778 ;;		Unchanged: 0/0
 24779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24780 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24781 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24782 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24783 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24784 ;;Total ram usage:        3 bytes
 24785 ;; Hardware stack levels used:    1
 24786 ;; This function calls:
 24787 ;;		Nothing
 24788 ;; This function is called by:
 24789 ;;		i2_printf
 24790 ;; This function uses a non-reentrant model
 24791 ;;
 24792                           
 24793                           	psect	text89
 24794  005B50                     __ptext89:
 24795                           	opt stack 0
 24796  005B50                     i2_isdigit:
 24797                           	opt stack 21
 24798                           
 24799                           ;incstack = 0
 24800                           ;i2isdigit@c stored from wreg
 24801  005B50  6E03               	movwf	i2isdigit@c,c
 24802  005B52  0E00               	movlw	0
 24803  005B54  6E02               	movwf	i2_isdigit$2064,c
 24804  005B56  0E3A               	movlw	58
 24805  005B58  6003               	cpfslt	i2isdigit@c,c
 24806  005B5A  D005               	goto	i2l6646
 24807  005B5C  0E2F               	movlw	47
 24808  005B5E  6403               	cpfsgt	i2isdigit@c,c
 24809  005B60  D002               	goto	i2l6646
 24810  005B62  0E01               	movlw	1
 24811  005B64  6E02               	movwf	i2_isdigit$2064,c
 24812  005B66                     i2l6646:
 24813  005B66  C002  F001         	movff	i2_isdigit$2064,??i2_isdigit
 24814  005B6A  3001               	rrcf	??i2_isdigit,w,c
 24815  005B6C  0012               	return	
 24816  005B6E                     __end_ofi2_isdigit:
 24817                           	opt stack 0
 24818                           pclatu	equ	0xFFB
 24819                           pclath	equ	0xFFA
 24820                           tblptru	equ	0xFF8
 24821                           tblptrh	equ	0xFF7
 24822                           tblptrl	equ	0xFF6
 24823                           tablat	equ	0xFF5
 24824                           prodh	equ	0xFF4
 24825                           prodl	equ	0xFF3
 24826                           intcon	equ	0xFF2
 24827                           intcon2	equ	0xFF1
 24828                           intcon3	equ	0xFF0
 24829                           indf0	equ	0xFEF
 24830                           postinc0	equ	0xFEE
 24831                           fsr0h	equ	0xFEA
 24832                           fsr0l	equ	0xFE9
 24833                           wreg	equ	0xFE8
 24834                           postdec1	equ	0xFE5
 24835                           fsr1h	equ	0xFE2
 24836                           fsr1l	equ	0xFE1
 24837                           indf2	equ	0xFDF
 24838                           postinc2	equ	0xFDE
 24839                           postdec2	equ	0xFDD
 24840                           fsr2h	equ	0xFDA
 24841                           fsr2l	equ	0xFD9
 24842                           status	equ	0xFD8
 24843                           
 24844 ;; *************** function i2___wmul *****************
 24845 ;; Defined at:
 24846 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 24847 ;; Parameters:    Size  Location     Type
 24848 ;;  multiplier      2    0[COMRAM] unsigned int 
 24849 ;;  multiplicand    2    2[COMRAM] unsigned int 
 24850 ;; Auto vars:     Size  Location     Type
 24851 ;;  __wmul          2    4[COMRAM] unsigned int 
 24852 ;; Return value:  Size  Location     Type
 24853 ;;                  2    0[COMRAM] unsigned int 
 24854 ;; Registers used:
 24855 ;;		wreg, status,2, status,0, prodl, prodh
 24856 ;; Tracked objects:
 24857 ;;		On entry : 0/0
 24858 ;;		On exit  : 0/0
 24859 ;;		Unchanged: 0/0
 24860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24861 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24862 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24863 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24864 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24865 ;;Total ram usage:        6 bytes
 24866 ;; Hardware stack levels used:    1
 24867 ;; This function calls:
 24868 ;;		Nothing
 24869 ;; This function is called by:
 24870 ;;		_printSortTimer
 24871 ;;		_retrieveLog
 24872 ;;		i2_printf
 24873 ;; This function uses a non-reentrant model
 24874 ;;
 24875                           
 24876                           	psect	text90
 24877  005A9C                     __ptext90:
 24878                           	opt stack 0
 24879  005A9C                     i2___wmul:
 24880                           	opt stack 21
 24881                           
 24882                           ;incstack = 0
 24883  005A9C  5001               	movf	i2___wmul@multiplier,w,c
 24884  005A9E  0203               	mulwf	i2___wmul@multiplicand,c
 24885  005AA0  CFF3 F005          	movff	prodl,i2___wmul@product
 24886  005AA4  CFF4 F006          	movff	prodh,i2___wmul@product+1
 24887  005AA8  5001               	movf	i2___wmul@multiplier,w,c
 24888  005AAA  0204               	mulwf	i2___wmul@multiplicand+1,c
 24889  005AAC  50F3               	movf	prodl,w,c
 24890  005AAE  2606               	addwf	i2___wmul@product+1,f,c
 24891  005AB0  5002               	movf	i2___wmul@multiplier+1,w,c
 24892  005AB2  0203               	mulwf	i2___wmul@multiplicand,c
 24893  005AB4  50F3               	movf	prodl,w,c
 24894  005AB6  2606               	addwf	i2___wmul@product+1,f,c
 24895  005AB8  C005  F001         	movff	i2___wmul@product,?i2___wmul
 24896  005ABC  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 24897  005AC0  0012               	return	
 24898  005AC2                     __end_ofi2___wmul:
 24899                           	opt stack 0
 24900                           pclatu	equ	0xFFB
 24901                           pclath	equ	0xFFA
 24902                           tblptru	equ	0xFF8
 24903                           tblptrh	equ	0xFF7
 24904                           tblptrl	equ	0xFF6
 24905                           tablat	equ	0xFF5
 24906                           prodh	equ	0xFF4
 24907                           prodl	equ	0xFF3
 24908                           intcon	equ	0xFF2
 24909                           intcon2	equ	0xFF1
 24910                           intcon3	equ	0xFF0
 24911                           indf0	equ	0xFEF
 24912                           postinc0	equ	0xFEE
 24913                           fsr0h	equ	0xFEA
 24914                           fsr0l	equ	0xFE9
 24915                           wreg	equ	0xFE8
 24916                           postdec1	equ	0xFE5
 24917                           fsr1h	equ	0xFE2
 24918                           fsr1l	equ	0xFE1
 24919                           indf2	equ	0xFDF
 24920                           postinc2	equ	0xFDE
 24921                           postdec2	equ	0xFDD
 24922                           fsr2h	equ	0xFDA
 24923                           fsr2l	equ	0xFD9
 24924                           status	equ	0xFD8
 24925                           
 24926 ;; *************** function i2___lwmod *****************
 24927 ;; Defined at:
 24928 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 24929 ;; Parameters:    Size  Location     Type
 24930 ;;  dividend        2    0[COMRAM] unsigned int 
 24931 ;;  divisor         2    2[COMRAM] unsigned int 
 24932 ;; Auto vars:     Size  Location     Type
 24933 ;;  __lwmod         1    4[COMRAM] unsigned char 
 24934 ;; Return value:  Size  Location     Type
 24935 ;;                  2    0[COMRAM] unsigned int 
 24936 ;; Registers used:
 24937 ;;		wreg, status,2, status,0
 24938 ;; Tracked objects:
 24939 ;;		On entry : 0/0
 24940 ;;		On exit  : 0/0
 24941 ;;		Unchanged: 0/0
 24942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24943 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24944 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24945 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24946 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24947 ;;Total ram usage:        5 bytes
 24948 ;; Hardware stack levels used:    1
 24949 ;; This function calls:
 24950 ;;		Nothing
 24951 ;; This function is called by:
 24952 ;;		_printSortTimer
 24953 ;;		i2_printf
 24954 ;; This function uses a non-reentrant model
 24955 ;;
 24956                           
 24957                           	psect	text91
 24958  0055D2                     __ptext91:
 24959                           	opt stack 0
 24960  0055D2                     i2___lwmod:
 24961                           	opt stack 21
 24962                           
 24963                           ;incstack = 0
 24964  0055D2  5003               	movf	i2___lwmod@divisor,w,c
 24965  0055D4  1004               	iorwf	i2___lwmod@divisor+1,w,c
 24966  0055D6  B4D8               	btfsc	status,2,c
 24967  0055D8  D018               	goto	i2l1977
 24968  0055DA  0E01               	movlw	1
 24969  0055DC  6E05               	movwf	i2___lwmod@counter,c
 24970  0055DE  D004               	goto	i2l6678
 24971  0055E0                     i2l6676:
 24972  0055E0  90D8               	bcf	status,0,c
 24973  0055E2  3603               	rlcf	i2___lwmod@divisor,f,c
 24974  0055E4  3604               	rlcf	i2___lwmod@divisor+1,f,c
 24975  0055E6  2A05               	incf	i2___lwmod@counter,f,c
 24976  0055E8                     i2l6678:
 24977  0055E8  AE04               	btfss	i2___lwmod@divisor+1,7,c
 24978  0055EA  D7FA               	goto	i2l6676
 24979  0055EC                     i2l6680:
 24980  0055EC  5003               	movf	i2___lwmod@divisor,w,c
 24981  0055EE  5C01               	subwf	i2___lwmod@dividend,w,c
 24982  0055F0  5004               	movf	i2___lwmod@divisor+1,w,c
 24983  0055F2  5802               	subwfb	i2___lwmod@dividend+1,w,c
 24984  0055F4  A0D8               	btfss	status,0,c
 24985  0055F6  D004               	goto	i2l6684
 24986  0055F8  5003               	movf	i2___lwmod@divisor,w,c
 24987  0055FA  5E01               	subwf	i2___lwmod@dividend,f,c
 24988  0055FC  5004               	movf	i2___lwmod@divisor+1,w,c
 24989  0055FE  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 24990  005600                     i2l6684:
 24991  005600  90D8               	bcf	status,0,c
 24992  005602  3204               	rrcf	i2___lwmod@divisor+1,f,c
 24993  005604  3203               	rrcf	i2___lwmod@divisor,f,c
 24994  005606  2E05               	decfsz	i2___lwmod@counter,f,c
 24995  005608  D7F1               	goto	i2l6680
 24996  00560A                     i2l1977:
 24997  00560A  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 24998  00560E  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 24999  005612  0012               	return		;funcret
 25000  005614                     __end_ofi2___lwmod:
 25001                           	opt stack 0
 25002                           pclatu	equ	0xFFB
 25003                           pclath	equ	0xFFA
 25004                           tblptru	equ	0xFF8
 25005                           tblptrh	equ	0xFF7
 25006                           tblptrl	equ	0xFF6
 25007                           tablat	equ	0xFF5
 25008                           prodh	equ	0xFF4
 25009                           prodl	equ	0xFF3
 25010                           intcon	equ	0xFF2
 25011                           intcon2	equ	0xFF1
 25012                           intcon3	equ	0xFF0
 25013                           indf0	equ	0xFEF
 25014                           postinc0	equ	0xFEE
 25015                           fsr0h	equ	0xFEA
 25016                           fsr0l	equ	0xFE9
 25017                           wreg	equ	0xFE8
 25018                           postdec1	equ	0xFE5
 25019                           fsr1h	equ	0xFE2
 25020                           fsr1l	equ	0xFE1
 25021                           indf2	equ	0xFDF
 25022                           postinc2	equ	0xFDE
 25023                           postdec2	equ	0xFDD
 25024                           fsr2h	equ	0xFDA
 25025                           fsr2l	equ	0xFD9
 25026                           status	equ	0xFD8
 25027                           
 25028 ;; *************** function i2___lwdiv *****************
 25029 ;; Defined at:
 25030 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 25031 ;; Parameters:    Size  Location     Type
 25032 ;;  dividend        2    5[COMRAM] unsigned int 
 25033 ;;  divisor         2    7[COMRAM] unsigned int 
 25034 ;; Auto vars:     Size  Location     Type
 25035 ;;  __lwdiv         2    9[COMRAM] unsigned int 
 25036 ;;  __lwdiv         1   11[COMRAM] unsigned char 
 25037 ;; Return value:  Size  Location     Type
 25038 ;;                  2    5[COMRAM] unsigned int 
 25039 ;; Registers used:
 25040 ;;		wreg, status,2, status,0
 25041 ;; Tracked objects:
 25042 ;;		On entry : 0/0
 25043 ;;		On exit  : 0/0
 25044 ;;		Unchanged: 0/0
 25045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25046 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25047 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25048 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25049 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25050 ;;Total ram usage:        7 bytes
 25051 ;; Hardware stack levels used:    1
 25052 ;; This function calls:
 25053 ;;		Nothing
 25054 ;; This function is called by:
 25055 ;;		_printSortTimer
 25056 ;;		i2_printf
 25057 ;; This function uses a non-reentrant model
 25058 ;;
 25059                           
 25060                           	psect	text92
 25061  0053C4                     __ptext92:
 25062                           	opt stack 0
 25063  0053C4                     i2___lwdiv:
 25064                           	opt stack 21
 25065                           
 25066                           ;incstack = 0
 25067  0053C4  0E00               	movlw	0
 25068  0053C6  6E0B               	movwf	i2___lwdiv@quotient+1,c
 25069  0053C8  0E00               	movlw	0
 25070  0053CA  6E0A               	movwf	i2___lwdiv@quotient,c
 25071  0053CC  5008               	movf	i2___lwdiv@divisor,w,c
 25072  0053CE  1009               	iorwf	i2___lwdiv@divisor+1,w,c
 25073  0053D0  B4D8               	btfsc	status,2,c
 25074  0053D2  D01C               	goto	i2l1967
 25075  0053D4  0E01               	movlw	1
 25076  0053D6  6E0C               	movwf	i2___lwdiv@counter,c
 25077  0053D8  D004               	goto	i2l6658
 25078  0053DA                     i2l6656:
 25079  0053DA  90D8               	bcf	status,0,c
 25080  0053DC  3608               	rlcf	i2___lwdiv@divisor,f,c
 25081  0053DE  3609               	rlcf	i2___lwdiv@divisor+1,f,c
 25082  0053E0  2A0C               	incf	i2___lwdiv@counter,f,c
 25083  0053E2                     i2l6658:
 25084  0053E2  AE09               	btfss	i2___lwdiv@divisor+1,7,c
 25085  0053E4  D7FA               	goto	i2l6656
 25086  0053E6                     i2l6660:
 25087  0053E6  90D8               	bcf	status,0,c
 25088  0053E8  360A               	rlcf	i2___lwdiv@quotient,f,c
 25089  0053EA  360B               	rlcf	i2___lwdiv@quotient+1,f,c
 25090  0053EC  5008               	movf	i2___lwdiv@divisor,w,c
 25091  0053EE  5C06               	subwf	i2___lwdiv@dividend,w,c
 25092  0053F0  5009               	movf	i2___lwdiv@divisor+1,w,c
 25093  0053F2  5807               	subwfb	i2___lwdiv@dividend+1,w,c
 25094  0053F4  A0D8               	btfss	status,0,c
 25095  0053F6  D005               	goto	i2l6668
 25096  0053F8  5008               	movf	i2___lwdiv@divisor,w,c
 25097  0053FA  5E06               	subwf	i2___lwdiv@dividend,f,c
 25098  0053FC  5009               	movf	i2___lwdiv@divisor+1,w,c
 25099  0053FE  5A07               	subwfb	i2___lwdiv@dividend+1,f,c
 25100  005400  800A               	bsf	i2___lwdiv@quotient,0,c
 25101  005402                     i2l6668:
 25102  005402  90D8               	bcf	status,0,c
 25103  005404  3209               	rrcf	i2___lwdiv@divisor+1,f,c
 25104  005406  3208               	rrcf	i2___lwdiv@divisor,f,c
 25105  005408  2E0C               	decfsz	i2___lwdiv@counter,f,c
 25106  00540A  D7ED               	goto	i2l6660
 25107  00540C                     i2l1967:
 25108  00540C  C00A  F006         	movff	i2___lwdiv@quotient,?i2___lwdiv
 25109  005410  C00B  F007         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 25110  005414  0012               	return		;funcret
 25111  005416                     __end_ofi2___lwdiv:
 25112                           	opt stack 0
 25113                           pclatu	equ	0xFFB
 25114                           pclath	equ	0xFFA
 25115                           tblptru	equ	0xFF8
 25116                           tblptrh	equ	0xFF7
 25117                           tblptrl	equ	0xFF6
 25118                           tablat	equ	0xFF5
 25119                           prodh	equ	0xFF4
 25120                           prodl	equ	0xFF3
 25121                           intcon	equ	0xFF2
 25122                           intcon2	equ	0xFF1
 25123                           intcon3	equ	0xFF0
 25124                           indf0	equ	0xFEF
 25125                           postinc0	equ	0xFEE
 25126                           fsr0h	equ	0xFEA
 25127                           fsr0l	equ	0xFE9
 25128                           wreg	equ	0xFE8
 25129                           postdec1	equ	0xFE5
 25130                           fsr1h	equ	0xFE2
 25131                           fsr1l	equ	0xFE1
 25132                           indf2	equ	0xFDF
 25133                           postinc2	equ	0xFDE
 25134                           postdec2	equ	0xFDD
 25135                           fsr2h	equ	0xFDA
 25136                           fsr2l	equ	0xFD9
 25137                           status	equ	0xFD8
 25138                           
 25139 ;; *************** function i2_lcdInst *****************
 25140 ;; Defined at:
 25141 ;;		line 15 in file "lcd.c"
 25142 ;; Parameters:    Size  Location     Type
 25143 ;;  data            1    wreg     unsigned char 
 25144 ;; Auto vars:     Size  Location     Type
 25145 ;;  data            1    2[COMRAM] unsigned char 
 25146 ;; Return value:  Size  Location     Type
 25147 ;;                  1    wreg      void 
 25148 ;; Registers used:
 25149 ;;		wreg, status,2, status,0, cstack
 25150 ;; Tracked objects:
 25151 ;;		On entry : 0/0
 25152 ;;		On exit  : 0/0
 25153 ;;		Unchanged: 0/0
 25154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25155 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25156 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25157 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25158 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25159 ;;Total ram usage:        1 bytes
 25160 ;; Hardware stack levels used:    1
 25161 ;; Hardware stack levels required when called:    1
 25162 ;; This function calls:
 25163 ;;		i2_lcdNibble
 25164 ;; This function is called by:
 25165 ;;		_change_state_to_menu_11
 25166 ;;		_change_state_to_menu_23
 25167 ;;		_change_state_to_logs_11
 25168 ;;		_change_state_to_logs_12
 25169 ;;		_change_state_to_logs_22
 25170 ;;		_change_state_to_logs_23
 25171 ;;		_change_state_to_logs_33
 25172 ;;		_change_state_to_logs_34
 25173 ;;		_printSortTimer
 25174 ;;		i2_change_state_to_menu_start
 25175 ;;		i2_change_state_to_menu_12
 25176 ;;		i2_change_state_to_menu_22
 25177 ;;		i2_printRTC
 25178 ;; This function uses a non-reentrant model
 25179 ;;
 25180                           
 25181                           	psect	text93
 25182  005C3C                     __ptext93:
 25183                           	opt stack 0
 25184  005C3C                     i2_lcdInst:
 25185                           	opt stack 20
 25186                           
 25187                           ;incstack = 0
 25188                           ;i2lcdInst@data stored from wreg
 25189  005C3C  6E03               	movwf	i2lcdInst@data,c
 25190                           
 25191                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 25192  005C3E  948C               	bcf	3980,2,c	;volatile
 25193                           
 25194                           ;lcd.c: 17: lcdNibble(data);
 25195  005C40  5003               	movf	i2lcdInst@data,w,c
 25196  005C42  ECB5  F029         	call	i2_lcdNibble
 25197  005C46  0012               	return		;funcret
 25198  005C48                     __end_ofi2_lcdInst:
 25199                           	opt stack 0
 25200                           pclatu	equ	0xFFB
 25201                           pclath	equ	0xFFA
 25202                           tblptru	equ	0xFF8
 25203                           tblptrh	equ	0xFF7
 25204                           tblptrl	equ	0xFF6
 25205                           tablat	equ	0xFF5
 25206                           prodh	equ	0xFF4
 25207                           prodl	equ	0xFF3
 25208                           intcon	equ	0xFF2
 25209                           intcon2	equ	0xFF1
 25210                           intcon3	equ	0xFF0
 25211                           indf0	equ	0xFEF
 25212                           postinc0	equ	0xFEE
 25213                           fsr0h	equ	0xFEA
 25214                           fsr0l	equ	0xFE9
 25215                           wreg	equ	0xFE8
 25216                           postdec1	equ	0xFE5
 25217                           fsr1h	equ	0xFE2
 25218                           fsr1l	equ	0xFE1
 25219                           indf2	equ	0xFDF
 25220                           postinc2	equ	0xFDE
 25221                           postdec2	equ	0xFDD
 25222                           fsr2h	equ	0xFDA
 25223                           fsr2l	equ	0xFD9
 25224                           status	equ	0xFD8
 25225                           
 25226 ;; *************** function i2_lcdNibble *****************
 25227 ;; Defined at:
 25228 ;;		line 25 in file "lcd.c"
 25229 ;; Parameters:    Size  Location     Type
 25230 ;;  data            1    wreg     unsigned char 
 25231 ;; Auto vars:     Size  Location     Type
 25232 ;;  data            1    1[COMRAM] unsigned char 
 25233 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 25234 ;; Return value:  Size  Location     Type
 25235 ;;                  1    wreg      void 
 25236 ;; Registers used:
 25237 ;;		wreg, status,2, status,0
 25238 ;; Tracked objects:
 25239 ;;		On entry : 0/0
 25240 ;;		On exit  : 0/0
 25241 ;;		Unchanged: 0/0
 25242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25243 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25244 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25245 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25246 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25247 ;;Total ram usage:        2 bytes
 25248 ;; Hardware stack levels used:    1
 25249 ;; This function calls:
 25250 ;;		Nothing
 25251 ;; This function is called by:
 25252 ;;		i2_lcdInst
 25253 ;;		i2_putch
 25254 ;; This function uses a non-reentrant model
 25255 ;;
 25256                           
 25257                           	psect	text94
 25258  00536A                     __ptext94:
 25259                           	opt stack 0
 25260  00536A                     i2_lcdNibble:
 25261                           	opt stack 20
 25262                           
 25263                           ;incstack = 0
 25264                           ;i2lcdNibble@data stored from wreg
 25265  00536A  6E02               	movwf	i2lcdNibble@data,c
 25266                           
 25267                           ;lcd.c: 27: (INTCONbits.GIE = 0);
 25268  00536C  9EF2               	bcf	intcon,7,c	;volatile
 25269                           
 25270                           ;lcd.c: 28: char temp = data & 0xF0;
 25271  00536E  5002               	movf	i2lcdNibble@data,w,c
 25272  005370  0BF0               	andlw	240
 25273  005372  6E01               	movwf	i2lcdNibble@temp,c
 25274                           
 25275                           ;lcd.c: 29: LATD = LATD & 0x0F;
 25276  005374  508C               	movf	3980,w,c	;volatile
 25277  005376  0B0F               	andlw	15
 25278  005378  6E8C               	movwf	3980,c	;volatile
 25279                           
 25280                           ;lcd.c: 30: LATD = temp | LATD;
 25281  00537A  5001               	movf	i2lcdNibble@temp,w,c
 25282  00537C  108C               	iorwf	3980,w,c	;volatile
 25283  00537E  6E8C               	movwf	3980,c	;volatile
 25284                           
 25285                           ;lcd.c: 32: LATDbits.LATD3 = 1;
 25286  005380  868C               	bsf	3980,3,c	;volatile
 25287                           
 25288                           ;lcd.c: 33: _delay((unsigned long)((25)*(32000000/4000000.0)));
 25289  005382  0E42               	movlw	66
 25290  005384                     i2u1141_47:
 25291  005384  2EE8               	decfsz	wreg,f,c
 25292  005386  D7FE               	bra	i2u1141_47
 25293  005388  D000               	nop2	
 25294                           
 25295                           ;lcd.c: 34: LATDbits.LATD3 = 0;
 25296  00538A  968C               	bcf	3980,3,c	;volatile
 25297                           
 25298                           ;lcd.c: 35: _delay((unsigned long)((25)*(32000000/4000000.0)));
 25299  00538C  0E42               	movlw	66
 25300  00538E                     i2u1142_47:
 25301  00538E  2EE8               	decfsz	wreg,f,c
 25302  005390  D7FE               	bra	i2u1142_47
 25303  005392  D000               	nop2	
 25304                           
 25305                           ;lcd.c: 37: data = data << 4;
 25306  005394  3802               	swapf	i2lcdNibble@data,w,c
 25307  005396  0BF0               	andlw	240
 25308  005398  6E02               	movwf	i2lcdNibble@data,c
 25309                           
 25310                           ;lcd.c: 39: temp = data & 0xF0;
 25311  00539A  5002               	movf	i2lcdNibble@data,w,c
 25312  00539C  0BF0               	andlw	240
 25313  00539E  6E01               	movwf	i2lcdNibble@temp,c
 25314                           
 25315                           ;lcd.c: 40: LATD = LATD & 0x0F;
 25316  0053A0  508C               	movf	3980,w,c	;volatile
 25317  0053A2  0B0F               	andlw	15
 25318  0053A4  6E8C               	movwf	3980,c	;volatile
 25319                           
 25320                           ;lcd.c: 41: LATD = temp | LATD;
 25321  0053A6  5001               	movf	i2lcdNibble@temp,w,c
 25322  0053A8  108C               	iorwf	3980,w,c	;volatile
 25323  0053AA  6E8C               	movwf	3980,c	;volatile
 25324                           
 25325                           ;lcd.c: 43: LATDbits.LATD3 = 1;
 25326  0053AC  868C               	bsf	3980,3,c	;volatile
 25327                           
 25328                           ;lcd.c: 44: _delay((unsigned long)((25)*(32000000/4000000.0)));
 25329  0053AE  0E42               	movlw	66
 25330  0053B0                     i2u1143_47:
 25331  0053B0  2EE8               	decfsz	wreg,f,c
 25332  0053B2  D7FE               	bra	i2u1143_47
 25333  0053B4  D000               	nop2	
 25334                           
 25335                           ;lcd.c: 45: LATDbits.LATD3 = 0;
 25336  0053B6  968C               	bcf	3980,3,c	;volatile
 25337                           
 25338                           ;lcd.c: 46: _delay((unsigned long)((25)*(32000000/4000000.0)));
 25339  0053B8  0E42               	movlw	66
 25340  0053BA                     i2u1144_47:
 25341  0053BA  2EE8               	decfsz	wreg,f,c
 25342  0053BC  D7FE               	bra	i2u1144_47
 25343  0053BE  D000               	nop2	
 25344                           
 25345                           ;lcd.c: 47: (INTCONbits.GIE = 1);
 25346  0053C0  8EF2               	bsf	intcon,7,c	;volatile
 25347  0053C2  0012               	return		;funcret
 25348  0053C4                     __end_ofi2_lcdNibble:
 25349                           	opt stack 0
 25350                           pclatu	equ	0xFFB
 25351                           pclath	equ	0xFFA
 25352                           tblptru	equ	0xFF8
 25353                           tblptrh	equ	0xFF7
 25354                           tblptrl	equ	0xFF6
 25355                           tablat	equ	0xFF5
 25356                           prodh	equ	0xFF4
 25357                           prodl	equ	0xFF3
 25358                           intcon	equ	0xFF2
 25359                           intcon2	equ	0xFF1
 25360                           intcon3	equ	0xFF0
 25361                           indf0	equ	0xFEF
 25362                           postinc0	equ	0xFEE
 25363                           fsr0h	equ	0xFEA
 25364                           fsr0l	equ	0xFE9
 25365                           wreg	equ	0xFE8
 25366                           postdec1	equ	0xFE5
 25367                           fsr1h	equ	0xFE2
 25368                           fsr1l	equ	0xFE1
 25369                           indf2	equ	0xFDF
 25370                           postinc2	equ	0xFDE
 25371                           postdec2	equ	0xFDD
 25372                           fsr2h	equ	0xFDA
 25373                           fsr2l	equ	0xFD9
 25374                           status	equ	0xFD8
 25375                           
 25376 ;; *************** function i2_getRTC *****************
 25377 ;; Defined at:
 25378 ;;		line 44 in file "RTC.c"
 25379 ;; Parameters:    Size  Location     Type
 25380 ;;		None
 25381 ;; Auto vars:     Size  Location     Type
 25382 ;;  getRTC          2    3[COMRAM] int 
 25383 ;; Return value:  Size  Location     Type
 25384 ;;                  1    wreg      void 
 25385 ;; Registers used:
 25386 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 25387 ;; Tracked objects:
 25388 ;;		On entry : 0/0
 25389 ;;		On exit  : 0/0
 25390 ;;		Unchanged: 0/0
 25391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25392 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25393 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25394 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25395 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25396 ;;Total ram usage:        2 bytes
 25397 ;; Hardware stack levels used:    1
 25398 ;; Hardware stack levels required when called:    2
 25399 ;; This function calls:
 25400 ;;		i2_I2C_Master_Read
 25401 ;;		i2_I2C_Master_Start
 25402 ;;		i2_I2C_Master_Stop
 25403 ;;		i2_I2C_Master_Write
 25404 ;; This function is called by:
 25405 ;;		_printSortTimer
 25406 ;;		i2_printRTC
 25407 ;; This function uses a non-reentrant model
 25408 ;;
 25409                           
 25410                           	psect	text95
 25411  005046                     __ptext95:
 25412                           	opt stack 0
 25413  005046                     i2_getRTC:
 25414                           	opt stack 19
 25415                           
 25416                           ;RTC.c: 48: I2C_Master_Start();
 25417                           
 25418                           ;incstack = 0
 25419  005046  EC3E  F02E         	call	i2_I2C_Master_Start	;wreg free
 25420                           
 25421                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
 25422  00504A  0E00               	movlw	0
 25423  00504C  6E03               	movwf	i2I2C_Master_Write@d+1,c
 25424  00504E  0ED0               	movlw	208
 25425  005050  6E02               	movwf	i2I2C_Master_Write@d,c
 25426  005052  EC29  F02E         	call	i2_I2C_Master_Write	;wreg free
 25427                           
 25428                           ;RTC.c: 50: I2C_Master_Write(0x00);
 25429  005056  0E00               	movlw	0
 25430  005058  6E03               	movwf	i2I2C_Master_Write@d+1,c
 25431  00505A  0E00               	movlw	0
 25432  00505C  6E02               	movwf	i2I2C_Master_Write@d,c
 25433  00505E  EC29  F02E         	call	i2_I2C_Master_Write	;wreg free
 25434                           
 25435                           ;RTC.c: 51: I2C_Master_Stop();
 25436  005062  EC3A  F02E         	call	i2_I2C_Master_Stop	;wreg free
 25437                           
 25438                           ;RTC.c: 54: I2C_Master_Start();
 25439  005066  EC3E  F02E         	call	i2_I2C_Master_Start	;wreg free
 25440                           
 25441                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
 25442  00506A  0E00               	movlw	0
 25443  00506C  6E03               	movwf	i2I2C_Master_Write@d+1,c
 25444  00506E  0ED1               	movlw	209
 25445  005070  6E02               	movwf	i2I2C_Master_Write@d,c
 25446  005072  EC29  F02E         	call	i2_I2C_Master_Write	;wreg free
 25447                           
 25448                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
 25449  005076  0E00               	movlw	0
 25450  005078  6E05               	movwf	i2getRTC@i+1,c
 25451  00507A  0E00               	movlw	0
 25452  00507C  6E04               	movwf	i2getRTC@i,c
 25453  00507E                     i2l6954:
 25454  00507E  BE05               	btfsc	i2getRTC@i+1,7,c
 25455  005080  D006               	goto	i2l6958
 25456  005082  5005               	movf	i2getRTC@i+1,w,c
 25457  005084  E111               	bnz	i2l6964
 25458  005086  0E06               	movlw	6
 25459  005088  5C04               	subwf	i2getRTC@i,w,c
 25460  00508A  B0D8               	btfsc	status,0,c
 25461  00508C  D00D               	goto	i2l6964
 25462  00508E                     i2l6958:
 25463                           
 25464                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
 25465  00508E  0E1C               	movlw	low _time
 25466  005090  2404               	addwf	i2getRTC@i,w,c
 25467  005092  6ED9               	movwf	fsr2l,c
 25468  005094  0E01               	movlw	high _time
 25469  005096  2005               	addwfc	i2getRTC@i+1,w,c
 25470  005098  6EDA               	movwf	fsr2h,c
 25471  00509A  0E01               	movlw	1
 25472  00509C  EC61  F02D         	call	i2_I2C_Master_Read
 25473  0050A0  6EDF               	movwf	indf2,c
 25474  0050A2  4A04               	infsnz	i2getRTC@i,f,c
 25475  0050A4  2A05               	incf	i2getRTC@i+1,f,c
 25476  0050A6  D7EB               	goto	i2l6954
 25477  0050A8                     i2l6964:
 25478                           
 25479                           ;RTC.c: 58: }
 25480                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
 25481  0050A8  0E00               	movlw	0
 25482  0050AA  EC61  F02D         	call	i2_I2C_Master_Read
 25483  0050AE  0101               	movlb	1	; () banked
 25484  0050B0  6F22               	movwf	(_time+6)& (0+255),b
 25485                           
 25486                           ;RTC.c: 60: I2C_Master_Stop();
 25487  0050B2  EC3A  F02E         	call	i2_I2C_Master_Stop	;wreg free
 25488  0050B6  0012               	return		;funcret
 25489  0050B8                     __end_ofi2_getRTC:
 25490                           	opt stack 0
 25491                           pclatu	equ	0xFFB
 25492                           pclath	equ	0xFFA
 25493                           tblptru	equ	0xFF8
 25494                           tblptrh	equ	0xFF7
 25495                           tblptrl	equ	0xFF6
 25496                           tablat	equ	0xFF5
 25497                           prodh	equ	0xFF4
 25498                           prodl	equ	0xFF3
 25499                           intcon	equ	0xFF2
 25500                           intcon2	equ	0xFF1
 25501                           intcon3	equ	0xFF0
 25502                           indf0	equ	0xFEF
 25503                           postinc0	equ	0xFEE
 25504                           fsr0h	equ	0xFEA
 25505                           fsr0l	equ	0xFE9
 25506                           wreg	equ	0xFE8
 25507                           postdec1	equ	0xFE5
 25508                           fsr1h	equ	0xFE2
 25509                           fsr1l	equ	0xFE1
 25510                           indf2	equ	0xFDF
 25511                           postinc2	equ	0xFDE
 25512                           postdec2	equ	0xFDD
 25513                           fsr2h	equ	0xFDA
 25514                           fsr2l	equ	0xFD9
 25515                           status	equ	0xFD8
 25516                           
 25517 ;; *************** function i2_I2C_Master_Write *****************
 25518 ;; Defined at:
 25519 ;;		line 49 in file "I2C.c"
 25520 ;; Parameters:    Size  Location     Type
 25521 ;;  d               2    1[COMRAM] unsigned int 
 25522 ;; Auto vars:     Size  Location     Type
 25523 ;;		None
 25524 ;; Return value:  Size  Location     Type
 25525 ;;                  1    wreg      void 
 25526 ;; Registers used:
 25527 ;;		wreg, status,2, status,0, cstack
 25528 ;; Tracked objects:
 25529 ;;		On entry : 0/0
 25530 ;;		On exit  : 0/0
 25531 ;;		Unchanged: 0/0
 25532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25533 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25534 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25535 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25536 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25537 ;;Total ram usage:        2 bytes
 25538 ;; Hardware stack levels used:    1
 25539 ;; Hardware stack levels required when called:    1
 25540 ;; This function calls:
 25541 ;;		i2_I2C_Master_Wait
 25542 ;; This function is called by:
 25543 ;;		i2_getRTC
 25544 ;; This function uses a non-reentrant model
 25545 ;;
 25546                           
 25547                           	psect	text96
 25548  005C52                     __ptext96:
 25549                           	opt stack 0
 25550  005C52                     i2_I2C_Master_Write:
 25551                           	opt stack 19
 25552                           
 25553                           ;I2C.c: 51: I2C_Master_Wait();
 25554                           
 25555                           ;incstack = 0
 25556  005C52  ECFF  F02D         	call	i2_I2C_Master_Wait	;wreg free
 25557                           
 25558                           ;I2C.c: 52: SSPBUF = d;
 25559  005C56  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 25560  005C5A  0012               	return		;funcret
 25561  005C5C                     __end_ofi2_I2C_Master_Write:
 25562                           	opt stack 0
 25563                           pclatu	equ	0xFFB
 25564                           pclath	equ	0xFFA
 25565                           tblptru	equ	0xFF8
 25566                           tblptrh	equ	0xFF7
 25567                           tblptrl	equ	0xFF6
 25568                           tablat	equ	0xFF5
 25569                           prodh	equ	0xFF4
 25570                           prodl	equ	0xFF3
 25571                           intcon	equ	0xFF2
 25572                           intcon2	equ	0xFF1
 25573                           intcon3	equ	0xFF0
 25574                           indf0	equ	0xFEF
 25575                           postinc0	equ	0xFEE
 25576                           fsr0h	equ	0xFEA
 25577                           fsr0l	equ	0xFE9
 25578                           wreg	equ	0xFE8
 25579                           postdec1	equ	0xFE5
 25580                           fsr1h	equ	0xFE2
 25581                           fsr1l	equ	0xFE1
 25582                           indf2	equ	0xFDF
 25583                           postinc2	equ	0xFDE
 25584                           postdec2	equ	0xFDD
 25585                           fsr2h	equ	0xFDA
 25586                           fsr2l	equ	0xFD9
 25587                           status	equ	0xFD8
 25588                           
 25589 ;; *************** function i2_I2C_Master_Stop *****************
 25590 ;; Defined at:
 25591 ;;		line 43 in file "I2C.c"
 25592 ;; Parameters:    Size  Location     Type
 25593 ;;		None
 25594 ;; Auto vars:     Size  Location     Type
 25595 ;;		None
 25596 ;; Return value:  Size  Location     Type
 25597 ;;                  1    wreg      void 
 25598 ;; Registers used:
 25599 ;;		wreg, status,2, status,0, cstack
 25600 ;; Tracked objects:
 25601 ;;		On entry : 0/0
 25602 ;;		On exit  : 0/0
 25603 ;;		Unchanged: 0/0
 25604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25605 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25606 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25607 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25608 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25609 ;;Total ram usage:        0 bytes
 25610 ;; Hardware stack levels used:    1
 25611 ;; Hardware stack levels required when called:    1
 25612 ;; This function calls:
 25613 ;;		i2_I2C_Master_Wait
 25614 ;; This function is called by:
 25615 ;;		i2_getRTC
 25616 ;; This function uses a non-reentrant model
 25617 ;;
 25618                           
 25619                           	psect	text97
 25620  005C74                     __ptext97:
 25621                           	opt stack 0
 25622  005C74                     i2_I2C_Master_Stop:
 25623                           	opt stack 19
 25624                           
 25625                           ;I2C.c: 45: I2C_Master_Wait();
 25626                           
 25627                           ;incstack = 0
 25628  005C74  ECFF  F02D         	call	i2_I2C_Master_Wait	;wreg free
 25629                           
 25630                           ;I2C.c: 46: PEN = 1;
 25631  005C78  84C5               	bsf	4037,2,c	;volatile
 25632  005C7A  0012               	return		;funcret
 25633  005C7C                     __end_ofi2_I2C_Master_Stop:
 25634                           	opt stack 0
 25635                           pclatu	equ	0xFFB
 25636                           pclath	equ	0xFFA
 25637                           tblptru	equ	0xFF8
 25638                           tblptrh	equ	0xFF7
 25639                           tblptrl	equ	0xFF6
 25640                           tablat	equ	0xFF5
 25641                           prodh	equ	0xFF4
 25642                           prodl	equ	0xFF3
 25643                           intcon	equ	0xFF2
 25644                           intcon2	equ	0xFF1
 25645                           intcon3	equ	0xFF0
 25646                           indf0	equ	0xFEF
 25647                           postinc0	equ	0xFEE
 25648                           fsr0h	equ	0xFEA
 25649                           fsr0l	equ	0xFE9
 25650                           wreg	equ	0xFE8
 25651                           postdec1	equ	0xFE5
 25652                           fsr1h	equ	0xFE2
 25653                           fsr1l	equ	0xFE1
 25654                           indf2	equ	0xFDF
 25655                           postinc2	equ	0xFDE
 25656                           postdec2	equ	0xFDD
 25657                           fsr2h	equ	0xFDA
 25658                           fsr2l	equ	0xFD9
 25659                           status	equ	0xFD8
 25660                           
 25661 ;; *************** function i2_I2C_Master_Start *****************
 25662 ;; Defined at:
 25663 ;;		line 31 in file "I2C.c"
 25664 ;; Parameters:    Size  Location     Type
 25665 ;;		None
 25666 ;; Auto vars:     Size  Location     Type
 25667 ;;		None
 25668 ;; Return value:  Size  Location     Type
 25669 ;;                  1    wreg      void 
 25670 ;; Registers used:
 25671 ;;		wreg, status,2, status,0, cstack
 25672 ;; Tracked objects:
 25673 ;;		On entry : 0/0
 25674 ;;		On exit  : 0/0
 25675 ;;		Unchanged: 0/0
 25676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25677 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25678 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25679 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25680 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25681 ;;Total ram usage:        0 bytes
 25682 ;; Hardware stack levels used:    1
 25683 ;; Hardware stack levels required when called:    1
 25684 ;; This function calls:
 25685 ;;		i2_I2C_Master_Wait
 25686 ;; This function is called by:
 25687 ;;		i2_getRTC
 25688 ;; This function uses a non-reentrant model
 25689 ;;
 25690                           
 25691                           	psect	text98
 25692  005C7C                     __ptext98:
 25693                           	opt stack 0
 25694  005C7C                     i2_I2C_Master_Start:
 25695                           	opt stack 19
 25696                           
 25697                           ;I2C.c: 33: I2C_Master_Wait();
 25698                           
 25699                           ;incstack = 0
 25700  005C7C  ECFF  F02D         	call	i2_I2C_Master_Wait	;wreg free
 25701                           
 25702                           ;I2C.c: 34: SEN = 1;
 25703  005C80  80C5               	bsf	4037,0,c	;volatile
 25704  005C82  0012               	return		;funcret
 25705  005C84                     __end_ofi2_I2C_Master_Start:
 25706                           	opt stack 0
 25707                           pclatu	equ	0xFFB
 25708                           pclath	equ	0xFFA
 25709                           tblptru	equ	0xFF8
 25710                           tblptrh	equ	0xFF7
 25711                           tblptrl	equ	0xFF6
 25712                           tablat	equ	0xFF5
 25713                           prodh	equ	0xFF4
 25714                           prodl	equ	0xFF3
 25715                           intcon	equ	0xFF2
 25716                           intcon2	equ	0xFF1
 25717                           intcon3	equ	0xFF0
 25718                           indf0	equ	0xFEF
 25719                           postinc0	equ	0xFEE
 25720                           fsr0h	equ	0xFEA
 25721                           fsr0l	equ	0xFE9
 25722                           wreg	equ	0xFE8
 25723                           postdec1	equ	0xFE5
 25724                           fsr1h	equ	0xFE2
 25725                           fsr1l	equ	0xFE1
 25726                           indf2	equ	0xFDF
 25727                           postinc2	equ	0xFDE
 25728                           postdec2	equ	0xFDD
 25729                           fsr2h	equ	0xFDA
 25730                           fsr2l	equ	0xFD9
 25731                           status	equ	0xFD8
 25732                           
 25733 ;; *************** function i2_I2C_Master_Read *****************
 25734 ;; Defined at:
 25735 ;;		line 55 in file "I2C.c"
 25736 ;; Parameters:    Size  Location     Type
 25737 ;;  a               1    wreg     unsigned char 
 25738 ;; Auto vars:     Size  Location     Type
 25739 ;;  a               1    1[COMRAM] unsigned char 
 25740 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 25741 ;; Return value:  Size  Location     Type
 25742 ;;                  1    wreg      unsigned char 
 25743 ;; Registers used:
 25744 ;;		wreg, status,2, status,0, cstack
 25745 ;; Tracked objects:
 25746 ;;		On entry : 0/0
 25747 ;;		On exit  : 0/0
 25748 ;;		Unchanged: 0/0
 25749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25750 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25751 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25752 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25753 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25754 ;;Total ram usage:        2 bytes
 25755 ;; Hardware stack levels used:    1
 25756 ;; Hardware stack levels required when called:    1
 25757 ;; This function calls:
 25758 ;;		i2_I2C_Master_Wait
 25759 ;; This function is called by:
 25760 ;;		i2_getRTC
 25761 ;; This function uses a non-reentrant model
 25762 ;;
 25763                           
 25764                           	psect	text99
 25765  005AC2                     __ptext99:
 25766                           	opt stack 0
 25767  005AC2                     i2_I2C_Master_Read:
 25768                           	opt stack 19
 25769                           
 25770                           ;incstack = 0
 25771                           ;i2I2C_Master_Read@a stored from wreg
 25772  005AC2  6E02               	movwf	i2I2C_Master_Read@a,c
 25773                           
 25774                           ;I2C.c: 57: unsigned char temp;
 25775                           ;I2C.c: 58: I2C_Master_Wait();
 25776  005AC4  ECFF  F02D         	call	i2_I2C_Master_Wait	;wreg free
 25777                           
 25778                           ;I2C.c: 59: RCEN = 1;
 25779  005AC8  86C5               	bsf	4037,3,c	;volatile
 25780                           
 25781                           ;I2C.c: 60: I2C_Master_Wait();
 25782  005ACA  ECFF  F02D         	call	i2_I2C_Master_Wait	;wreg free
 25783                           
 25784                           ;I2C.c: 61: temp = SSPBUF;
 25785  005ACE  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 25786                           
 25787                           ;I2C.c: 62: I2C_Master_Wait();
 25788  005AD2  ECFF  F02D         	call	i2_I2C_Master_Wait	;wreg free
 25789                           
 25790                           ;I2C.c: 63: ACKDT = (a)?0:1;
 25791  005AD6  5002               	movf	i2I2C_Master_Read@a,w,c
 25792  005AD8  A4D8               	btfss	status,2,c
 25793  005ADA  D002               	goto	i2u506_40
 25794  005ADC  8AC5               	bsf	4037,5,c	;volatile
 25795  005ADE  D001               	goto	i2l6622
 25796  005AE0                     i2u506_40:
 25797  005AE0  9AC5               	bcf	4037,5,c	;volatile
 25798  005AE2                     i2l6622:
 25799                           
 25800                           ;I2C.c: 64: ACKEN = 1;
 25801  005AE2  88C5               	bsf	4037,4,c	;volatile
 25802                           
 25803                           ;I2C.c: 65: return temp;
 25804  005AE4  5003               	movf	i2I2C_Master_Read@temp,w,c
 25805  005AE6  0012               	return	
 25806  005AE8                     __end_ofi2_I2C_Master_Read:
 25807                           	opt stack 0
 25808                           pclatu	equ	0xFFB
 25809                           pclath	equ	0xFFA
 25810                           tblptru	equ	0xFF8
 25811                           tblptrh	equ	0xFF7
 25812                           tblptrl	equ	0xFF6
 25813                           tablat	equ	0xFF5
 25814                           prodh	equ	0xFF4
 25815                           prodl	equ	0xFF3
 25816                           intcon	equ	0xFF2
 25817                           intcon2	equ	0xFF1
 25818                           intcon3	equ	0xFF0
 25819                           indf0	equ	0xFEF
 25820                           postinc0	equ	0xFEE
 25821                           fsr0h	equ	0xFEA
 25822                           fsr0l	equ	0xFE9
 25823                           wreg	equ	0xFE8
 25824                           postdec1	equ	0xFE5
 25825                           fsr1h	equ	0xFE2
 25826                           fsr1l	equ	0xFE1
 25827                           indf2	equ	0xFDF
 25828                           postinc2	equ	0xFDE
 25829                           postdec2	equ	0xFDD
 25830                           fsr2h	equ	0xFDA
 25831                           fsr2l	equ	0xFD9
 25832                           status	equ	0xFD8
 25833                           
 25834 ;; *************** function i2_I2C_Master_Wait *****************
 25835 ;; Defined at:
 25836 ;;		line 26 in file "I2C.c"
 25837 ;; Parameters:    Size  Location     Type
 25838 ;;		None
 25839 ;; Auto vars:     Size  Location     Type
 25840 ;;		None
 25841 ;; Return value:  Size  Location     Type
 25842 ;;                  1    wreg      void 
 25843 ;; Registers used:
 25844 ;;		wreg, status,2, status,0
 25845 ;; Tracked objects:
 25846 ;;		On entry : 0/0
 25847 ;;		On exit  : 0/0
 25848 ;;		Unchanged: 0/0
 25849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25850 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25851 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25852 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25853 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25854 ;;Total ram usage:        1 bytes
 25855 ;; Hardware stack levels used:    1
 25856 ;; This function calls:
 25857 ;;		Nothing
 25858 ;; This function is called by:
 25859 ;;		i2_I2C_Master_Start
 25860 ;;		i2_I2C_Master_Stop
 25861 ;;		i2_I2C_Master_Write
 25862 ;;		i2_I2C_Master_Read
 25863 ;; This function uses a non-reentrant model
 25864 ;;
 25865                           
 25866                           	psect	text100
 25867  005BFE                     __ptext100:
 25868                           	opt stack 0
 25869  005BFE                     i2_I2C_Master_Wait:
 25870                           	opt stack 19
 25871  005BFE                     i2l71:
 25872  005BFE  B4C7               	btfsc	4039,2,c	;volatile
 25873  005C00  D7FE               	goto	i2l71
 25874  005C02  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 25875  005C06  0E1F               	movlw	31
 25876  005C08  1601               	andwf	??i2_I2C_Master_Wait,f,c
 25877  005C0A  B4D8               	btfsc	status,2,c
 25878  005C0C  0012               	return	
 25879  005C0E  D7F7               	goto	i2l71
 25880  005C10                     __end_ofi2_I2C_Master_Wait:
 25881                           	opt stack 0
 25882                           pclatu	equ	0xFFB
 25883                           pclath	equ	0xFFA
 25884                           tblptru	equ	0xFF8
 25885                           tblptrh	equ	0xFF7
 25886                           tblptrl	equ	0xFF6
 25887                           tablat	equ	0xFF5
 25888                           prodh	equ	0xFF4
 25889                           prodl	equ	0xFF3
 25890                           intcon	equ	0xFF2
 25891                           intcon2	equ	0xFF1
 25892                           intcon3	equ	0xFF0
 25893                           indf0	equ	0xFEF
 25894                           postinc0	equ	0xFEE
 25895                           fsr0h	equ	0xFEA
 25896                           fsr0l	equ	0xFE9
 25897                           wreg	equ	0xFE8
 25898                           postdec1	equ	0xFE5
 25899                           fsr1h	equ	0xFE2
 25900                           fsr1l	equ	0xFE1
 25901                           indf2	equ	0xFDF
 25902                           postinc2	equ	0xFDE
 25903                           postdec2	equ	0xFDD
 25904                           fsr2h	equ	0xFDA
 25905                           fsr2l	equ	0xFD9
 25906                           status	equ	0xFD8
 25907                           
 25908 ;; *************** function i2_delay_ms *****************
 25909 ;; Defined at:
 25910 ;;		line 670 in file "sort.c"
 25911 ;; Parameters:    Size  Location     Type
 25912 ;;  milliseconds    1    wreg     unsigned char 
 25913 ;; Auto vars:     Size  Location     Type
 25914 ;;  milliseconds    1    1[COMRAM] unsigned char 
 25915 ;; Return value:  Size  Location     Type
 25916 ;;                  1    wreg      void 
 25917 ;; Registers used:
 25918 ;;		wreg, status,2, status,0, cstack
 25919 ;; Tracked objects:
 25920 ;;		On entry : 0/0
 25921 ;;		On exit  : 0/0
 25922 ;;		Unchanged: 0/0
 25923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25924 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25925 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25926 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25927 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25928 ;;Total ram usage:        2 bytes
 25929 ;; Hardware stack levels used:    1
 25930 ;; This function calls:
 25931 ;;		Nothing
 25932 ;; This function is called by:
 25933 ;;		_printSortTimer
 25934 ;; This function uses a non-reentrant model
 25935 ;;
 25936                           
 25937                           	psect	text101
 25938  005B8A                     __ptext101:
 25939                           	opt stack 0
 25940  005B8A                     i2_delay_ms:
 25941                           	opt stack 22
 25942                           
 25943                           ;incstack = 0
 25944                           ;i2delay_ms@milliseconds stored from wreg
 25945  005B8A  6E02               	movwf	i2delay_ms@milliseconds,c
 25946                           
 25947                           ;sort.c: 671: while(milliseconds > 0)
 25948  005B8C  D008               	goto	i2l9240
 25949  005B8E                     i2l9236:
 25950                           
 25951                           ;sort.c: 672: {
 25952                           ;sort.c: 673: milliseconds--;
 25953  005B8E  0602               	decf	i2delay_ms@milliseconds,f,c
 25954                           
 25955                           ;sort.c: 674: _delay((unsigned long)((990)*(32000000/4000000.0)));
 25956  005B90  0E0B               	movlw	11
 25957  005B92  6E01               	movwf	??i2_delay_ms& (0+255),c
 25958  005B94  0E48               	movlw	72
 25959  005B96                     i2u1145_47:
 25960  005B96  2EE8               	decfsz	wreg,f,c
 25961  005B98  D7FE               	bra	i2u1145_47
 25962  005B9A  2E01               	decfsz	??i2_delay_ms& (0+255),f,c
 25963  005B9C  D7FC               	bra	i2u1145_47
 25964  005B9E                     i2l9240:
 25965  005B9E  5002               	movf	i2delay_ms@milliseconds,w,c
 25966  005BA0  B4D8               	btfsc	status,2,c
 25967  005BA2  0012               	return	
 25968  005BA4  D7F4               	goto	i2l9236
 25969  005BA6                     __end_ofi2_delay_ms:
 25970                           	opt stack 0
 25971                           pclatu	equ	0xFFB
 25972                           pclath	equ	0xFFA
 25973                           tblptru	equ	0xFF8
 25974                           tblptrh	equ	0xFF7
 25975                           tblptrl	equ	0xFF6
 25976                           tablat	equ	0xFF5
 25977                           prodh	equ	0xFF4
 25978                           prodl	equ	0xFF3
 25979                           intcon	equ	0xFF2
 25980                           intcon2	equ	0xFF1
 25981                           intcon3	equ	0xFF0
 25982                           indf0	equ	0xFEF
 25983                           postinc0	equ	0xFEE
 25984                           fsr0h	equ	0xFEA
 25985                           fsr0l	equ	0xFE9
 25986                           wreg	equ	0xFE8
 25987                           postdec1	equ	0xFE5
 25988                           fsr1h	equ	0xFE2
 25989                           fsr1l	equ	0xFE1
 25990                           indf2	equ	0xFDF
 25991                           postinc2	equ	0xFDE
 25992                           postdec2	equ	0xFDD
 25993                           fsr2h	equ	0xFDA
 25994                           fsr2l	equ	0xFD9
 25995                           status	equ	0xFD8
 25996                           pclatu	equ	0xFFB
 25997                           pclath	equ	0xFFA
 25998                           tblptru	equ	0xFF8
 25999                           tblptrh	equ	0xFF7
 26000                           tblptrl	equ	0xFF6
 26001                           tablat	equ	0xFF5
 26002                           prodh	equ	0xFF4
 26003                           prodl	equ	0xFF3
 26004                           intcon	equ	0xFF2
 26005                           intcon2	equ	0xFF1
 26006                           intcon3	equ	0xFF0
 26007                           indf0	equ	0xFEF
 26008                           postinc0	equ	0xFEE
 26009                           fsr0h	equ	0xFEA
 26010                           fsr0l	equ	0xFE9
 26011                           wreg	equ	0xFE8
 26012                           postdec1	equ	0xFE5
 26013                           fsr1h	equ	0xFE2
 26014                           fsr1l	equ	0xFE1
 26015                           indf2	equ	0xFDF
 26016                           postinc2	equ	0xFDE
 26017                           postdec2	equ	0xFDD
 26018                           fsr2h	equ	0xFDA
 26019                           fsr2l	equ	0xFD9
 26020                           status	equ	0xFD8
 26021                           
 26022                           	psect	rparam
 26023  0000                     pclatu	equ	0xFFB
 26024                           pclath	equ	0xFFA
 26025                           tblptru	equ	0xFF8
 26026                           tblptrh	equ	0xFF7
 26027                           tblptrl	equ	0xFF6
 26028                           tablat	equ	0xFF5
 26029                           prodh	equ	0xFF4
 26030                           prodl	equ	0xFF3
 26031                           intcon	equ	0xFF2
 26032                           intcon2	equ	0xFF1
 26033                           intcon3	equ	0xFF0
 26034                           indf0	equ	0xFEF
 26035                           postinc0	equ	0xFEE
 26036                           fsr0h	equ	0xFEA
 26037                           fsr0l	equ	0xFE9
 26038                           wreg	equ	0xFE8
 26039                           postdec1	equ	0xFE5
 26040                           fsr1h	equ	0xFE2
 26041                           fsr1l	equ	0xFE1
 26042                           indf2	equ	0xFDF
 26043                           postinc2	equ	0xFDE
 26044                           postdec2	equ	0xFDD
 26045                           fsr2h	equ	0xFDA
 26046                           fsr2l	equ	0xFD9
 26047                           status	equ	0xFD8
 26048                           
 26049                           	psect	temp
 26050  00007E                     btemp:
 26051                           	opt stack 0
 26052  00007E                     	ds	1
 26053  0000                     int$flags	set	btemp
 26054                           pclatu	equ	0xFFB
 26055                           pclath	equ	0xFFA
 26056                           tblptru	equ	0xFF8
 26057                           tblptrh	equ	0xFF7
 26058                           tblptrl	equ	0xFF6
 26059                           tablat	equ	0xFF5
 26060                           prodh	equ	0xFF4
 26061                           prodl	equ	0xFF3
 26062                           intcon	equ	0xFF2
 26063                           intcon2	equ	0xFF1
 26064                           intcon3	equ	0xFF0
 26065                           indf0	equ	0xFEF
 26066                           postinc0	equ	0xFEE
 26067                           fsr0h	equ	0xFEA
 26068                           fsr0l	equ	0xFE9
 26069                           wreg	equ	0xFE8
 26070                           postdec1	equ	0xFE5
 26071                           fsr1h	equ	0xFE2
 26072                           fsr1l	equ	0xFE1
 26073                           indf2	equ	0xFDF
 26074                           postinc2	equ	0xFDE
 26075                           postdec2	equ	0xFDD
 26076                           fsr2h	equ	0xFDA
 26077                           fsr2l	equ	0xFD9
 26078                           status	equ	0xFD8


Data Sizes:
    Strings     1373
    Constant    27
    Data        8
    BSS         146
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     90     125
    BANK0           128     90     128
    BANK1           256      0      81
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_62(CODE[4]), STR_61(CODE[4]), STR_60(CODE[4]), STR_59(CODE[4]), 
		 -> STR_58(CODE[4]), STR_57(CODE[4]), STR_56(CODE[4]), STR_55(CODE[4]), 
		 -> STR_54(CODE[4]), STR_53(CODE[4]), STR_52(CODE[4]), STR_51(CODE[4]), 
		 -> STR_20(CODE[4]), STR_19(CODE[4]), STR_18(CODE[4]), STR_17(CODE[4]), 
		 -> STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[4]), STR_13(CODE[4]), 
		 -> STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[4]), 
		 -> STR_8(CODE[4]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_131(CODE[7]), ID@res3(BANK0[2]), ID@res2(BANK0[2]), ID@res1(BANK0[2]), 
		 -> count_total(BANK0[2]), printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_130(CODE[18]), STR_129(CODE[18]), STR_128(CODE[17]), STR_127(CODE[17]), 
		 -> STR_126(CODE[15]), STR_125(CODE[15]), STR_124(CODE[18]), STR_123(CODE[15]), 
		 -> STR_122(CODE[18]), STR_121(CODE[18]), STR_120(CODE[17]), STR_119(CODE[17]), 
		 -> STR_118(CODE[17]), STR_117(CODE[17]), STR_116(CODE[17]), STR_115(CODE[17]), 
		 -> STR_114(CODE[17]), STR_113(CODE[17]), STR_112(CODE[18]), STR_111(CODE[17]), 
		 -> STR_110(CODE[15]), STR_109(CODE[15]), STR_108(CODE[15]), STR_107(CODE[17]), 
		 -> STR_106(CODE[17]), STR_105(CODE[17]), STR_104(CODE[16]), STR_103(CODE[17]), 
		 -> STR_102(CODE[17]), STR_101(CODE[17]), STR_100(CODE[17]), STR_99(CODE[17]), 
		 -> STR_98(CODE[17]), STR_97(CODE[15]), STR_96(CODE[11]), STR_95(CODE[17]), 
		 -> STR_94(CODE[11]), STR_93(CODE[17]), STR_92(CODE[14]), STR_91(CODE[15]), 
		 -> STR_90(CODE[14]), STR_89(CODE[10]), STR_88(CODE[9]), STR_87(CODE[9]), 
		 -> STR_86(CODE[10]), STR_85(CODE[10]), STR_84(CODE[16]), STR_83(CODE[15]), 
		 -> STR_82(CODE[3]), STR_81(CODE[15]), STR_80(CODE[13]), STR_79(CODE[14]), 
		 -> STR_78(CODE[8]), STR_77(CODE[14]), STR_76(CODE[15]), STR_75(CODE[12]), 
		 -> STR_74(CODE[14]), STR_73(CODE[17]), STR_72(CODE[14]), STR_71(CODE[15]), 
		 -> STR_70(CODE[17]), STR_69(CODE[17]), STR_68(CODE[7]), STR_67(CODE[21]), 
		 -> STR_66(CODE[17]), STR_65(CODE[17]), STR_64(CODE[22]), STR_63(CODE[24]), 
		 -> STR_50(CODE[17]), STR_49(CODE[17]), STR_48(CODE[17]), STR_47(CODE[17]), 
		 -> STR_46(CODE[17]), STR_45(CODE[17]), STR_44(CODE[17]), STR_43(CODE[17]), 
		 -> STR_42(CODE[17]), STR_41(CODE[17]), STR_40(CODE[17]), STR_39(CODE[17]), 
		 -> STR_38(CODE[17]), STR_37(CODE[17]), STR_36(CODE[17]), STR_35(CODE[17]), 
		 -> STR_34(CODE[17]), STR_33(CODE[17]), STR_32(CODE[17]), STR_31(CODE[17]), 
		 -> STR_30(CODE[17]), STR_29(CODE[3]), STR_28(CODE[17]), STR_27(CODE[17]), 
		 -> STR_26(CODE[17]), STR_25(CODE[17]), STR_24(CODE[17]), STR_23(CODE[14]), 
		 -> STR_22(CODE[10]), STR_21(CODE[24]), STR_7(CODE[7]), STR_6(CODE[17]), 
		 -> STR_5(CODE[18]), STR_4(CODE[16]), STR_3(CODE[18]), STR_2(CODE[14]), 
		 -> STR_1(CODE[18]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _handler in COMRAM

    _handler->_printSortTimer
    _updateServoStates->i2_updateServoPosition
    i2_change_state_to_menu_start->i2_printRTC
    i2_printRTC->i2_printf
    i2_change_state_to_menu_22->i2_printf
    i2_change_state_to_menu_12->i2_printf
    _change_state_to_menu_23->i2_printf
    _change_state_to_menu_11->i2_printf
    _change_state_to_logs_34->i2_printf
    _change_state_to_logs_33->i2_printf
    _change_state_to_logs_23->i2_printf
    _change_state_to_logs_22->i2_printf
    _change_state_to_logs_12->i2_printf
    _change_state_to_logs_11->i2_printf
    _dispLogs->_retrieveLog
    _retrieveLog->i2___wmul
    _printSortTimer->i2_printf
    i2_printf->i2___lwdiv
    i2_putch->i2_lcdNibble
    i2___lwdiv->i2___lwmod
    i2_lcdInst->i2_lcdNibble
    i2_getRTC->i2_I2C_Master_Read
    i2_getRTC->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_UI
    _sort->_Loading
    _Loading->_EEPROM_write
    _initSortTimer->_getRTC
    _getMAG->_readMAG
    _getIR->_readIR
    _readIR->_readADC
    _ID->_printf
    _readCOND->_readADC
    ___ftge->___awtoft
    ___awtoft->___awdiv
    _Distribution->_updateServoPosition
    _logRun->_EEPROM_write
    _loadRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _change_state_to_menu_start->_printRTC
    _initLCD->_lcdInst
    _initEEPROM->_EEPROM_write
    _EEPROM_write->_printf
    _UI->_printRTC
    _printRTC->_printf
    _getRTC->_I2C_Master_Read
    _getRTC->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _change_state_to_menu_22->_printf
    _change_state_to_menu_12->_printf
    ___awdiv->___awmod
    _Test->_actuatorTest
    _sensorTest->_printf
    _readMAG->_readADC
    _arm->_printf
    _algorithmTest->_printf
    _actuatorTest->_printf
    _SpeedTest->_printf
    _PortTestPusher->_printf
    _PortTestDC->_printf
    _PlatformTest->_printf
    _BothServos->_printf
    _initServos->_updateServoPosition
    _BlockerTest->_printf
    _printf->___awdiv
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble

Critical Paths under _handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  251419
                    _I2C_Master_Init
                               _Test
                                 _UI
                         _initEEPROM
                            _initLCD
                           _initTime
                             _initUI
                             _logRun
                      _machineConfig
                               _sort
                        _stopSignals
 ---------------------------------------------------------------------------------
 (1) _sort                                                 0     0      0   37553
                       _Distribution
                                 _ID
                            _Loading
 ---------------------------------------------------------------------------------
 (2) _Loading                                             19    19      0   18298
                                             49 BANK0     19    19      0
                        _EEPROM_read
                       _EEPROM_write
                           _delay_ms
                              _getIR
                             _getMAG
                     _initGlobalVars
                         _initServos
                      _initSortTimer
                            _lcdInst
                             _readIR
 ---------------------------------------------------------------------------------
 (3) _initSortTimer                                        5     5      0     631
                                              5 BANK0      5     5      0
                             _getRTC
 ---------------------------------------------------------------------------------
 (3) _initGlobalVars                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _getMAG                                               2     2      0      45
                                              6 BANK0      2     2      0
                            _readMAG
 ---------------------------------------------------------------------------------
 (3) _getIR                                                3     3      0      91
                                              6 BANK0      3     3      0
                             _readIR
 ---------------------------------------------------------------------------------
 (3) _readIR                                               4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _ID                                                  23    23      0   13862
                                             43 BANK0     23    23      0
                            ___awdiv
                           ___awtoft
                             ___ftge
                           _delay_ms
                            _lcdInst
                             _printf
                           _readCOND
 ---------------------------------------------------------------------------------
 (3) _readCOND                                             4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             2     2      0      23
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     520
                                             18 BANK0      9     3      6
                            ___awdiv (ARG)
                           ___awtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             4     1      3    2236
                                             14 BANK0      4     1      3
                            ___awdiv (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    1953
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (2) _Distribution                                         2     2      0    5393
                                              8 BANK0      2     2      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (1) _machineConfig                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _logRun                                              10    10      0   11734
                                             49 BANK0     10    10      0
                        _EEPROM_read
                       _EEPROM_write
 ---------------------------------------------------------------------------------
 (1) _initUI                                               0     0      0   23608
         _change_state_to_menu_start
                            _loadRTC
 ---------------------------------------------------------------------------------
 (2) _loadRTC                                              3     3      0     914
                                             21 BANK0      3     3      0
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Init                                      8     4      4     440
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     290
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_start                           0     0      0   22694
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initTime                                             7     1      6     538
                                              0 BANK0      7     1      6
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _initEEPROM                                           0     0      0   10987
                       _EEPROM_write
 ---------------------------------------------------------------------------------
 (3) _EEPROM_write                                         6     3      3   10987
                                             43 BANK0      6     3      3
                        _EEPROM_read
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _EEPROM_read                                          2     0      2     426
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _UI                                                  24    24      0   47480
                                             68 BANK0     22    22      0
                            ___awdiv
                            ___awmod
            _change_state_to_menu_12
            _change_state_to_menu_22
                            _lcdInst
                           _printRTC
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _printRTC                                            25    25      0   13531
                                             43 BANK0     25    25      0
                             _getRTC
                            _lcdInst
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    3275
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _getRTC                                               2     2      0     519
                                              3 BANK0      2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     2     0      2     406
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_22                              0     0      0    9163
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_12                              0     0      0    9163
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    1064
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1068
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _Test                                                 2     2      0  118944
                                             70 BANK0      2     2      0
                        _BlockerTest
                         _BothServos
                       _PlatformTest
                         _PortTestDC
                     _PortTestPusher
                          _SpeedTest
                       _actuatorTest
                      _algorithmTest
                                _arm
                            _lcdInst
                             _printf
                         _sensorTest
 ---------------------------------------------------------------------------------
 (2) _sensorTest                                           4     4      0    9275
                                             43 BANK0      4     4      0
                            _lcdInst
                             _printf
                            _readADC
                            _readMAG
 ---------------------------------------------------------------------------------
 (4) _readMAG                                              4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _arm                                                  3     3      0    9232
                                             43 BANK0      3     3      0
                            _lcdInst
                             _printf
                        _stopSignals
 ---------------------------------------------------------------------------------
 (2) _algorithmTest                                        2     2      0    9163
                                             43 BANK0      2     2      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _actuatorTest                                        27    27      0   15799
                                             43 BANK0     27    27      0
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (2) _SpeedTest                                            1     1      0    9163
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PortTestPusher                                       1     1      0    9163
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PortTestDC                                           1     1      0    9163
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PlatformTest                                        12    12      0    9436
                                             43 BANK0     12    12      0
                            _lcdInst
                             _printf
                            _readADC
                        _stopSignals
 ---------------------------------------------------------------------------------
 (2) _BothServos                                           2     2      0   19949
                                             43 BANK0      2     2      0
                         _initServos
                            _lcdInst
                             _printf
                        _stopSignals
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (1) _stopSignals                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _initServos                                           1     1      0    5393
                                              8 BANK0      1     1      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (4) _updateServoPosition                                  8     4      4    5393
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _BlockerTest                                         10    10      0    9438
                                             43 BANK0     10    10      0
                            _lcdInst
                             _printf
                            _readADC
 ---------------------------------------------------------------------------------
 (4) _readADC                                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _printf                                              33    21     12    9028
                                             14 BANK0     29    17     12
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     669
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     515
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     366
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _handler                                             16    16      0   83967
                                             74 COMRAM    16    16      0
                     _printSortTimer
                     _updateArmState
                         _updateMenu
                  _updateServoStates
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (8) _updateServoStates                                    2     2      0     593
                                              8 COMRAM     2     2      0
              i2_updateServoPosition
 ---------------------------------------------------------------------------------
 (9) i2_updateServoPosition                                8     4      4     593
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (8) _updateMenu                                           2     2      0   70855
                                             66 COMRAM     2     2      0
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
                           _dispLogs
                       _inputHandler
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (8) i2_change_state_to_menu_start                         0     0      0    7640
                          i2_lcdInst
                         i2_printRTC
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_printRTC                                          25    25      0    4553
                                             41 COMRAM    25    25      0
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
                           i2_strcpy
 ---------------------------------------------------------------------------------
 (10) i2_strcpy                                            6     2      4     699
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _inputHandler                                         4     2      2   30870
                                             41 COMRAM     4     2      2
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_22                            0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_12                            0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_23                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_11                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_34                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_33                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_23                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_22                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_12                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_11                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) _dispLogs                                             2     0      2    1475
                                             17 COMRAM     2     0      2
                        _retrieveLog
 ---------------------------------------------------------------------------------
 (10) _retrieveLog                                        11     9      2    1047
                                              6 COMRAM    11     9      2
                      i2_EEPROM_read
                           i2___wmul
 ---------------------------------------------------------------------------------
 (11) i2_EEPROM_read                                       2     0      2     174
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _updateArmState                                       2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (8) _printSortTimer                                      33    33      0    4879
                                             41 COMRAM    33    33      0
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                         i2_delay_ms
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_printf                                            33    21     12    2952
                                             12 COMRAM    29    17     12
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (10) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (10) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (10) i2___wmul                                            6     2      4     469
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (10) i2___lwmod                                           5     1      4     367
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (10) i2___lwdiv                                           7     3      4     266
                                              5 COMRAM     7     3      4
                          i2___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (10) i2_lcdInst                                           1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (10) i2_getRTC                                            2     2      0     213
                                              3 COMRAM     2     2      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Write                                  2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Stop                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Start                                  0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Read                                   2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Wait                                   1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (9) i2_delay_ms                                           2     2      0      23
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _Test
     _BlockerTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
     _BothServos
       _initServos
         _updateServoPosition
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _stopSignals
       _updateServoPosition
     _PlatformTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
       _stopSignals
     _PortTestDC
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _PortTestPusher
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _SpeedTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _actuatorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _algorithmTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _arm
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _stopSignals
     _lcdInst
       _lcdNibble
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _sensorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
       _readMAG
         _readADC
   _UI
     ___awdiv
       ___awmod (ARG)
     ___awmod
     _change_state_to_menu_12
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _change_state_to_menu_22
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printRTC
       _getRTC
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _strcpy
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _strcpy
   _initEEPROM
     _EEPROM_write
       _EEPROM_read
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
   _initLCD
     _lcdInst
       _lcdNibble
   _initTime
   _initUI
     _change_state_to_menu_start
       _lcdInst
         _lcdNibble
       _printRTC
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
         _strcpy
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _loadRTC
       _I2C_Master_Init
         ___lldiv
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _logRun
     _EEPROM_read
     _EEPROM_write
       _EEPROM_read
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
   _machineConfig
   _sort
     _Distribution
       _updateServoPosition
     _ID
       ___awdiv
         ___awmod (ARG)
       ___awtoft
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
       ___ftge
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
       _delay_ms
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readCOND
         _readADC
     _Loading
       _EEPROM_read
       _EEPROM_write
         _EEPROM_read
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
       _delay_ms
       _getIR
         _readIR
           _readADC
       _getMAG
         _readMAG
           _readADC
       _initGlobalVars
       _initServos
         _updateServoPosition
       _initSortTimer
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _readIR
         _readADC
   _stopSignals

 _handler (ROOT)
   _printSortTimer
     i2___lwdiv
       i2___lwmod (ARG)
     i2___lwmod
     i2___wmul
     i2_delay_ms
     i2_getRTC
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _updateArmState
   _updateMenu
     _change_state_to_logs_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_33
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_34
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _dispLogs
       _retrieveLog
         i2_EEPROM_read
         i2___wmul
     _inputHandler
       _change_state_to_logs_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_33
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_34
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
     i2_change_state_to_menu_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_start
       i2_lcdInst
         i2_lcdNibble
       i2_printRTC
         i2_getRTC
           i2_I2C_Master_Read
             i2_I2C_Master_Wait
           i2_I2C_Master_Start
             i2_I2C_Master_Wait
           i2_I2C_Master_Stop
             i2_I2C_Master_Wait
           i2_I2C_Master_Write
             i2_I2C_Master_Wait
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
         i2_strcpy
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
   _updateServoStates
     i2_updateServoPosition
   i2_change_state_to_menu_start
     i2_lcdInst
       i2_lcdNibble
     i2_printRTC
       i2_getRTC
         i2_I2C_Master_Read
           i2_I2C_Master_Wait
         i2_I2C_Master_Start
           i2_I2C_Master_Wait
         i2_I2C_Master_Stop
           i2_I2C_Master_Wait
         i2_I2C_Master_Write
           i2_I2C_Master_Wait
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
       i2_strcpy
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      51       7       31.6%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     5A      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     5A      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     14E      34        0.0%
DATA                 0      0     14E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Mon Apr 10 10:43:14 2017

                                    _i 013D                     i2_I2C_Master_Start 5C7C  
                   i2_I2C_Master_Write 5C52                                     l71 5BEA  
                                   _ID 1786                       _f_panning_to_bin 0069  
                          __CFG_CPD$ON 000000                                     _UI 0012  
                         ___awdiv@sign 008B                                     _up 0075  
                  ___wmul@multiplicand 0082                     i2___lwdiv@dividend 0006  
                          __CFG_BORV$3 000000                     EEPROM_read@address 0080  
                         __CFG_CP0$OFF 000000                           __CFG_CP1$OFF 000000  
                         __CFG_CP2$OFF 000000                           __CFG_CP3$OFF 000000  
               __end_of_updateArmState 564E                                    ID@i 00AF  
                                  ID@n 00C0                                    ?_ID 0001  
                                  ?_UI 0001                                    UI@i 00C8  
                                  l193 0102                                    l185 00E2  
                                  l188 00E6                                    l508 485C  
                                  l627 2E8A                                    l803 1428  
                                  l813 157C                                    l830 1604  
                                  l806 1476                                    l840 1778  
                                  l832 162A                                    l824 172C  
                                  l816 1510                                    l833 1652  
                                  l834 167A                                    l818 153C  
                                  l923 4EA6                                    l835 16A2  
                                  l836 16CC                                    l845 184C  
                                  l864 1B6C                                    l865 1B86  
                                  l785 1262                                    l795 132A  
                                  l868 1C1E                                    l798 1378  
                         __CFG_CPB$OFF 000000                                    _PR2 000FCB  
                                  _PEN 007E2A                                    _SEN 007E28  
                  ?i2_I2C_Master_Start 0001              __end_of_updateServoStates 3DD6  
                       ?_machineConfig 0001                    ?i2_I2C_Master_Write 0002  
                                  _arm 4418                                    _log 00EE  
                                  _sel 00FD                                    _var 0147  
                         ___awmod@sign 0085                                    wreg 000FE8  
                  i2printRTC@RTC_month 003B                    __end_of_BlockerTest 3F9C  
                  _log_count_can_w_lab 0141                             i2_delay_ms 5B8A  
      __end_of_change_state_to_menu_11 587E        __end_of_change_state_to_menu_12 56BE  
      __end_of_change_state_to_menu_22 5686        __end_of_change_state_to_menu_23 584E  
         _f_can_coming_to_distribution 0133                         ??_Distribution 0088  
      __end_of_change_state_to_logs_11 596E        __end_of_change_state_to_logs_12 593E  
      __end_of_change_state_to_logs_22 590E        __end_of_change_state_to_logs_23 59CA  
      __end_of_change_state_to_logs_33 58DE        __end_of_change_state_to_logs_34 58AE  
                                 ??_ID 00AB                                   ??_UI 00C4  
                         __CFG_LVP$OFF 000000                           __CFG_WDT$OFF 000000  
                                 l1121 4538                                   l1301 09EE  
                                 l1134 5BB6                                   l1143 40CA  
                                 l1304 0A54                                   l1305 0AA2  
                                 l1306 0B08                                   l1331 0EB0  
                                 l1307 0B56                                   l1236 4358  
                                 l1262 4742                                   l1343 104A  
                                 l1271 2B38                                   l1239 4378  
                                 l1520 1E72                                   l1361 5352  
                                 l1426 4E36                                   l1443 3ED8  
                                 l1419 4E26                                   l1259 473E  
                                 l1348 1120                                   l1268 2B34  
                                 l1382 2AC8                                   l1294 0944  
                                 l1391 2A3C                                   l1367 5362  
                                 l1463 4508                                   l1448 3F24  
                                 l1480 52F6                                   l1472 4502  
                                 l1464 44CA                                   l1449 3F3E  
                                 l1297 0948                                   l1395 2A94  
                                 l1397 2AC2                                   ?_arm 0001  
                                 l1486 5306                                   l1914 4B72  
                                 l1784 42DE                                   l1967 4FCA  
                                 l8000 1718                                   l1977 5248  
                                 l8100 19C4                                   l8020 177A  
                                 l7150 2E94                                   l8006 1734  
                                 l6512 5A0A                                   l7160 2F2A  
                                 l7152 2EB2                                   l7144 2E08  
                                 l8200 4616                                   l8112 1A08  
                                 l6514 5A1C                                   l7170 2FC0  
                                 l7162 2F48                                   l7154 2ED0  
                                 l8202 4630                                   l8210 467E  
                                 l8122 1A80                                   l7330 4BA8  
                                 l8018 176C                                   l7172 2FDE  
                                 l7164 2F66                                   l7156 2EEE  
                                 l8204 464A                                   l8212 46AC  
                                 l6710 1C4E                                   l8310 2C90  
                                 l7166 2F84                                   l7158 2F0C  
                                 l8206 4664                                   l8142 1AF8  
                                 l8126 1A8A                                   l7430 4FF8  
                                 l7326 4B92                                   _ADIE 007CEE  
                                 l6800 1F28                                   l6712 1C60  
                                 l6536 5994                                   l7168 2FA2  
                                 l7176 2FFC                                   l7520 4902  
                                 l8048 1808                                   l7336 4C1E  
                                 l6570 4F7A                                   l6554 5A42  
                                 l6730 1D1A                                   l6722 1C9E  
                                 l6706 1C3A                                   l8402 09DA  
                                 l9202 4CB2                                   l7178 305A  
                                 l8162 1B56                                   l8154 1B30  
                                 l8146 1B08                                   l8066 1876  
                                 l7442 5022                                   l7426 4FE2  
                                 l6572 4F86                                   l6820 1FAC  
                                 l6812 1F84                                   l6804 1F60  
                                 l6740 1D58                                   l6716 1C6A  
                                 l8340 2D84                                   l8316 2CD2  
                                 l7372 45A4                                   l7380 45C6  
                                 l7612 4D28                                   l6900 4272  
                                 l7508 55AA                                   l7516 48C2  
                                 l6582 4FBC                                   l6574 4F8C  
                                 l6590 5204                                   l6830 1FE0  
                                 l6806 1F6A                                   l6750 1DD0  
                                 l6742 1D5E                                   l9150 3F04  
                                 l9142 3EDA                                   l9118 3E60  
                                 l9126 3EA6                                   l7470 4A3C  
                                 l9206 4CC6                                   l9310 01C6  
                                 l7526 4946                                   l8158 1B40  
                                 l8078 18BA                                   l7446 503A  
                                 l6592 5210                                   l6824 1FC6  
                                 l6760 1E32                                   l6752 1DD6  
                                 l9152 3F0E                                   l9144 3EEA  
                                 l8600 0E2C                                   l8512 0C78  
                                 l8504 0C56                                   l8352 2DCC  
                                 l8336 2D4E                                   l8328 2D1E  
                                 l8280 2B88                                   l7480 4A6C  
                                 l7464 4A26                                   l6840 56C8  
                                 l9400 0440                                   l9320 01EE  
                                 l9312 01CC                                   l7384 45DC  
                                 l7376 45AE                                   l7608 4D12  
                                 l6920 4304                                   l6904 4292  
                                 l8088 1986                                   l6594 5216  
                                 l6834 2038                                   l6818 1FA0  
                                 l6754 1DEE                                   l6738 1D4C  
                                 l9162 3F40                                   l8530 0CDA  
                                 l8522 0CA0                                   l8514 0C7E  
                                 l6842 56D4                                   l9402 045E  
                                 l6930 4AF6                                   l7618 4D54  
                                 l6914 42E8                                   l6906 42C2  
                                 l7394 5A52                                   l8186 1BDC  
                                 l8194 1C20                                   l6828 1FDA  
                                 l6780 1EC4                                   l6748 1DC4  
                                 l6764 1E38                                   l6836 2044  
                                 l9164 3F50                                   l9172 3F96  
                                 l8612 0E70                                   l8540 0D02  
                                 l8508 0C60                                   l8348 2D96  
                                 l7476 4A5A                                   l7492 4AAA  
                                 l6852 4DB2                                   l9420 0544  
                                 l9412 0522                                   l9340 024E  
                                 l9316 01D6                                   l7388 45E6  
                                 l6932 4B06                                   l6908 42D0  
                                 l6598 523A                                   l6782 1ECA  
                                 l6758 1E1A                                   l8702 1032  
                                 l8622 0E98                                   l8534 0CE4  
                                 l8518 0C88                                   l7478 4A66  
                                 l9190 4C6E                                   l9182 4C4A  
                                 l9502 071C                                   l9430 0560  
                                 l9406 047C                                   l9326 01FC  
                                 l6942 4B60                                   l6934 4B0C  
                                 l7398 5A68                                   l6776 1EAA  
                                 l8640 0F02                                   l8616 0E88  
                                 l8608 0E66                                   l8560 0D68  
                                 l8544 0D0C                                   l8392 09B2  
                                 l7496 4ABE                                   l7488 4A9C  
                                 l9192 4C7A                                   l6848 4D9C  
                                 l9512 0738                                   l9416 052C  
                                 l9408 04E0                                   l9344 0258  
                                 l9600 08CC                                   l9280 0128  
                                 l7920 1460                                   l7824 1220  
                                 l6794 1F06                                   l6882 4EC0  
                                 l8730 10BC                                   l8722 109A  
                                 l8650 0F2A                                   l8618 0E8E  
                                 l8570 0D90                                   l8538 0CFC  
                                 l8482 0BDC                                   l8394 09B8  
                                 l8810 44B2                                   l8298 2C40  
                                 l9194 4C80                                   l9186 4C5A  
                                 l6858 4DD2                                   l9434 0578  
                                 l9426 0556                                   l9362 02A4  
                                 l9354 0282                                   l9274 00FE  
                                 l7930 14A4                                   l7850 12A6  
                                 l7834 126A                                   l6876 4E8E  
                                 l8740 10E4                                   l8732 10C2  
                                 l8644 0F1A                                   l8636 0EF8  
                                 l8564 0D80                                   l8556 0D5E  
                                 l8548 0D24                                   l8492 0C04  
                                 l8820 44EA                                   l8812 44BC  
                                 l9516 0750                                   l9508 072E  
                                 l9380 0314                                   l9348 0270  
                                 l9292 015C                                   l9284 013A  
                                 l6892 4220                                   l7940 14EA  
                                 l7908 1412                                   l8726 10A4  
                                 l8670 0F9E                                   l8662 0F7C  
                                 l8654 0F42                                   l8646 0F20  
                                 l8590 0E04                                   l8582 0DE2  
                                 l8574 0DA8                                   l8566 0D86  
                                 l8486 0BF4                                   l8478 0BD2  
                                 l8398 09C2                                   l8822 44F4  
                                 l8806 448C                                   l9198 4CA4  
                                 l9542 07D8                                   l9534 07B6  
                                 l9462 0660                                   l9454 063E  
                                 l9390 03AA                                   l9382 0332  
                                 l9358 028C                                   l7950 1530  
                                 l7942 14F4                                   l7934 14CA  
                                 l7918 1456                                   l7870 1314  
                                 l8736 10CC                                   l8680 0FC6  
                                 l8672 0FA4                                   l8592 0E0A  
                                 l8496 0C1C                                   l8488 0BFA  
                                 l9552 07F4                                   l9472 067C  
                                 l9392 03C8                                   l9384 0350  
                                 l9296 016E                                   l9288 0144  
                                 l6896 4234                                   l7880 1358  
                                 l8762 114A                                   l8746 110A  
                                 l8666 0F86                                   l8586 0DEC  
                                 l8818 44D0                                   l9538 07C0  
                                 l9458 0648                                   l9394 03E6  
                                 l9386 036E                                   l9378 02F6  
                                 l6898 4242                                   l7946 1514  
                                 l7882 1362                                   l8908 2820  
                                 l8772 1172                                   l8756 113A  
                                 l8692 100A                                   l8676 0FAE  
                                 l8596 0E14                                   l9556 080C  
                                 l9548 07EA                                   l9476 0694  
                                 l9468 0672                                   l9396 0404  
                                 l9388 038C                                   l7892 13A6  
                                 l8926 28D0                                   l8766 1162  
                                 l8758 1140                                   l9910 4384  
                                 l9582 088C                                   l9574 086A  
                                 l9494 06FA                                   l9398 0422  
                                 l8928 28D6                                   l8872 4E5E  
                                 l8776 118A                                   l8768 1168  
                                 l8696 1022                                   l8688 1000  
                                 l9920 43A2                                   l9912 438A  
                                 l9592 08A8                                   l7968 15E0  
                                 l8970 2A12                                   l8946 2986  
                                 l8698 1028                                   l9922 43A8  
                                 l9914 4390                                   l9930 43BA  
                                 l9578 0874                                   l9498 0704  
                                 l8964 29E8                                   l9924 43AE  
                                 l9916 4396                                   l9908 437E  
                                 l9932 440C                                   l9596 08C0  
                                 l9588 089E                                   l9852 3FE8  
                                 l8974 2A26                                   l8966 29FE  
                                 l8958 29C8                                   l9926 43B4  
                                 l9918 439C                                   l9854 3FFC  
                                 l7998 16E2                                   STR_1 FB51  
                                 l8984 2A6A                                   STR_2 FF4A  
                                 STR_3 FB3F                                   STR_4 FE5E  
                                 STR_5 FB3F                                   l8988 2A7E  
                                 l9892 4314                                   STR_6 FDFA  
                                 STR_7 FFC4                                   l9878 4084  
                                 STR_8 FFDB                                   STR_9 FFCB  
              ??i2_updateServoPosition 0005                                   _LATA 000F89  
                                 _LATB 000F8A                                   _LATC 000F8B  
                                 _LATD 000F8C                                   _LATE 000F8D  
                                 u5240 1D98                                   u5160 54A6  
                                 u5170 54A8                                   _PEIE 007F96  
                                 u5180 553E                                   u5181 553A  
                                 u5190 5540                                   u5247 1D8E  
                                 u5280 1E10                                   u8000 2862  
                                 u8010 2864                                   u7220 2DBA  
                                 u6420 122C                                   _RCEN 007E2B  
                                 u8030 2918                                   u7310 0AA2  
                                 u7150 2BCA                                   u7070 1BE8  
                                 u5287 1E06                                   u8040 291A  
                                 u7160 2BCC                                   u6440 1262  
                                 u8130 29F6                                   u7330 0B56  
                                 u7090 1C1E                                   u8140 2A0E  
                                 u7228 2DBE                                   u6700 1574  
                                 u8141 2A0A                                   u7190 2D72  
                                 u6710 1576                                   u6438 1230  
                                 i2l71 5BFE                                   u8080 29B0  
                                 u4960 5992                                   u7088 1BEC  
                                 u8321 3EFA                                   u8330 3EFC  
                                 u7290 09EE                                   u5930 54F2  
                                 u5940 54F4                                   u7198 2D76  
                                 u6750 1602                                   u8271 3ECE  
                                 u8280 3ED0                                   u6680 154E  
                                 u8098 29B4                                   u7810 44A8  
                                 u5970 2E8A                                   u6850 1906  
                                 u5955 5282                                   u7820 44AA  
                                 u6940 1A54                                   u6860 1908  
                                 u6950 1A56                                   u6870 195A  
                                 u6880 195C                                   u6698 1552  
                                 u7860 44E0                                   u7870 44E2  
                                 u9390 40CA                                   u9817 11B0  
                                 u9907 1444                                   u9827 12D4  
                                 u9917 1480                                   u9837 1334  
                                 u9927 1492                                   u9847 1346  
                                 u9937 14B2                                   u9857 1382  
                                 u9947 1596                                   u9867 1394  
                                 u9957 15CE                                   u9877 13B4  
                                 u9967 160E                                   u9887 13DE  
                                 u9977 1620                                   u9897 1432  
                                 u9987 1634                                   _RSEN 007E29  
                                 u9997 1648                            _stopSignals 5B6E  
                                 _Test 4312                                   _back 0063  
                                 _main 47B6                                   _down 0065  
                         ___ftpack@arg 0080                                   _keys FA87  
                         ___ftpack@exp 0083                                   _time 011C  
                                 fsr0h 000FEA                                   fsr1h 000FE2  
                   i2___lwdiv@quotient 000A                                   indf0 000FEF  
                                 fsr2h 000FDA                                   fsr0l 000FE9  
                                 indf2 000FDF                                   fsr1l 000FE1  
                                 fsr2l 000FD9                                   _sort 5B0C  
                                 btemp 007E                   ??i2_I2C_Master_Start 0002  
                 ??i2_I2C_Master_Write 0004                                   prodh 000FF4  
                                 prodl 000FF3                                   start 000E  
                        __CFG_IESO$OFF 000000                   _log_count_can_no_lab 013F  
                      __end_ofi2_putch 5C3C                          __CFG_MCLRE$ON 000000  
                         ___param_bank 000000                             i2_printRTC 3602  
                          i2_lcdNibble 536A                        __end_of_Loading 1786  
                 __end_of_actuatorTest 1192                                  ??_arm 00AB  
           i2updateServoPosition@timer 0003                       ?_I2C_Master_Init 008D  
                     ?_I2C_Master_Read 0001                       ?_I2C_Master_Wait 0001  
          ??i2_change_state_to_menu_12 002A            ??i2_change_state_to_menu_22 002A  
                     ?_I2C_Master_Stop 0001                                  ?_Test 0001  
                                l10150 4858                                  l10134 482A  
                                l10126 4800                                  l10136 4830  
                                l10128 4816                                  l10138 4836  
                                l10154 485E                                  l10148 4852  
                 __end_of_EEPROM_write 45FE                                  ?_main 0001  
                                _ACKEN 007E2C                                  _ACKDT 007E2D  
                      __end_of___awdiv 4AC8                        ?_updateArmState 0001  
                                _EEADR 000FA9                                  STR_10 FFE7  
                                STR_11 FFEB                                  STR_12 FFFB  
                                STR_20 FFEF                                  STR_13 FFDF  
                                STR_21 FAA2                                  STR_14 FFD7  
                                STR_22 FF9B                                  STR_30 FE0B  
                                STR_15 FFD3                                  STR_23 FF3C  
                                STR_31 FDE9                                  STR_16 FFE3  
                                STR_24 FD50                                  STR_32 FD2E  
                                STR_40 FCEA                                  STR_17 FFF3  
                                STR_25 FE2D                                  STR_33 FD3F  
                                STR_41 FCD9                                  STR_18 FFF7  
                                STR_34 FDD8                                  STR_50 FDB6  
                                STR_42 FD94                                  STR_26 FD61  
                                STR_43 FD94                                  STR_35 FDD8  
                                STR_51 FFDB                                  STR_19 FFCF  
                                STR_27 FE1C                                  STR_52 FFCB  
                                STR_60 FFF3                                  STR_28 FD72  
                                STR_36 FD1D                                  STR_44 FCFB  
                      __end_of___awmod 4CD0                                  STR_45 FCEA  
                                STR_37 FD2E                                  STR_53 FFE7  
                                STR_61 FFF7                                  STR_29 FE2A  
                                STR_62 FFCF                                  STR_54 FFEB  
                                STR_38 FDC7                                  STR_46 FDA5  
                                STR_70 FC84                                  STR_47 FDA5  
                                STR_55 FFFB                                  STR_63 FAA2  
                                STR_71 FEF5                                  STR_39 FD83  
                                STR_56 FFDF                                  STR_80 FF58  
                                STR_72 FF2E                                  STR_48 FD0C  
                                STR_64 FABA                                  STR_49 FCFB  
                                STR_57 FFD7                                  STR_81 FE7D  
                                STR_65 FCB7                                  STR_73 FC40  
                                STR_58 FFD3                                  STR_90 FF2E  
                                STR_82 FE2A                                  STR_74 FF12  
                                STR_66 FCC8                                  STR_59 FFE3  
                                STR_75 FF65                                  STR_91 FEE6  
                                STR_83 FEAA                                  STR_67 FAD0  
                                STR_68 FFBD                                  STR_92 FF04  
                                STR_76 FED7                                  STR_84 FE3E  
                                STR_85 FF87                                  STR_77 FF20  
                                STR_69 FC73                                  STR_93 FC51  
                                STR_86 FF87                                  STR_78 FFAE  
                                STR_94 FF71                                  STR_79 FF2E  
                                STR_87 FFA5                                  STR_95 FC62  
                                STR_88 FFA5                                  STR_96 FF7C  
                                STR_89 FF91                                  STR_97 FEC8  
                                STR_98 FBB8                                  STR_99 FBA7  
         i2updateServoPosition@my_time 0007                                  ?_sort 0001  
                      __end_of___lldiv 4B84           i2updateServoPosition@time_us 0001  
                                u10007 165C                                  u10017 1670  
                                u10107 17A0                                  u10027 1684  
                                u10117 185C                                  u10037 1698  
                                u11007 4E40                                  u10207 455A  
                                u10127 19AA                                  u10047 16AC  
                                u11017 4E54                                  u10217 45B6  
                                u10137 1A98                                  u10057 16C0  
                                u11107 2A58                                  u11027 52C0  
                                u10307 0294                                  u10227 45EE  
                                u10147 1B70                                  u10067 16D6  
                                u11117 2A9E                                  u11037 531C  
                                u10317 02BE                                  u10237 002A  
                                u10157 1B7A                                  u10077 174E  
                                u11207 2222                                  u11127 2AB0  
                                u11047 27FE                                  u10407 076A  
                                u10327 0534                                  u10247 0114  
                                u10167 1BA0                                  u10087 5748  
                                _T0CON 000FD5                                  u11217 226E  
                                u11137 2072                                  u11057 2878  
                                u10417 07C8                                  u10337 0568  
                                u10257 014C                                  u10177 5A5E  
                                u10097 5000                                  u11307 4F26  
                                u11227 22A2                                  u11147 20BE  
                                u11067 28C4                                  u10507 2B78  
                                u10427 07FC                                  u10347 0592  
                                u10267 0188                                  u10187 5550  
                      ___awdiv@divisor 0088                                  u11317 4F42  
                                u11237 22D4                                  u11157 210A  
                                u11077 292E                                  u10517 2BE0  
                                u10437 0826                                  u10357 0650  
                                u10277 01DE                                  u10197 5584  
                                u11327 3E0C                                  u11247 2320  
                                u11167 213E                                  u11087 297A  
                                u10607 46EE                                  u10527 2C34  
                                u10447 087C                                  u10367 0684  
                                u10287 020A                                  _T1CON 000FCD  
                                u11337 3F28                                  u11257 2354  
                                u11177 2170                                  u11097 2A46  
                                u10617 4732                                  u10537 2C54  
                                u10457 08B0                                  u10377 06AE  
                                u10297 0260                                  u11347 3F32  
                                u11267 2386                                  u11187 21BC  
                                u10707 0AB2                                  u10627 4754  
                                u10547 2C82                                  u10467 4322  
                                u10387 070C                                  u11357 5A12  
                                u11277 23D2                                  u11197 21F0  
                                u10717 0B18                                  u10637 08F4  
                                u10557 2CC6                                  u10477 2AE4  
                                u10397 0740                                  u11367 50DA  
                                u11287 2406                                  u10807 0D70  
                                u10727 0B36                                  u10647 0938  
                                u10567 2CE4                                  u10487 2B28  
                                _T2CON 000FCA                                  u11377 50E4  
                                u11297 2438                                  u10817 0D98  
                                u10737 0B66                                  u10657 095A  
                                u10577 2D12                                  u10497 2B4A  
                                u11387 5110                                  u10907 1012  
                                u10827 0DF4                                  u10747 0BE4  
                                u10667 09CA                                  u10587 2D2C  
                                u11397 511A                                  u10917 103A  
                                u10837 0E1C                                  u10757 0C0C  
                                u10677 09FE                                  u10597 4426  
                                u10927 105C                                  u10847 0E78  
                                u10767 0C68                                  u10687 0A64  
                                _T3CON 000FB1                                  u10937 10AC  
                                u10857 0EA0                                  u10777 0C90  
                                u10697 0A82                                  u10947 10D4  
                                u10867 0F0A                                  u10787 0CEC  
                                u10957 1124                                  u10877 0F32  
                                u10797 0D14                                  u10967 112E  
                                u10887 0F8E                                  u10977 1152  
                                u10897 0FB6                                  u10987 117A  
                                u10997 4DF0                        __end_of___lwdiv 4FD4  
                      __end_of___lwmod 5252                                  i2l268 335A  
                                i2l627 3690                                  i2l905 35FE  
                                i2l923 5156                                  i2l950 564A  
                      ___awdiv@counter 008A                                  _TMR0H 000FD7  
                                _TMR1H 000FCF                                  _TMR0L 000FD6  
                                _TMR3H 000FB3                                  _TMR1L 000FCE  
                                _TMR3L 000FB2                             _BothServos 2064  
                                _PORTB 000F81                                  _TRISA 000F92  
                                _TRISB 000F93                                  _TRISC 000F94  
                                _TRISD 000F95                                  _TRISE 000F96  
                        __CFG_PWRT$OFF 000000                          __CFG_WRT0$OFF 000000  
                        __CFG_WRT1$OFF 000000                          __CFG_WRT2$OFF 000000  
                        __CFG_WRT3$OFF 000000                        __end_of_lcdInst 5C30  
                      __end_of_handler 3C0E                         __CFG_EBTR0$OFF 000000  
                       __CFG_FCMEN$OFF 000000                         __CFG_EBTR1$OFF 000000  
                       __CFG_EBTR2$OFF 000000                         __CFG_EBTR3$OFF 000000  
                                _nRBPU 007F8F                          __CFG_WRTB$OFF 000000  
                        __CFG_WRTC$OFF 000000                          __CFG_WRTD$OFF 000000  
                      __end_of_readADC 5A22                        __end_of_initLCD 558E  
                       __CFG_EBTRB$OFF 000000                                  _debug 012D  
                           i2isdigit@c 0003                          ___awtoft@sign 0091  
                                _getIR 4FD4                        __end_of_loadRTC 4D5C  
                      __end_of_readMAG 5548                        __end_of_dpowers FAA2  
                                _first 0139                                  _enter 0067  
                                arm@on 00AC                        __end_of_isdigit 5A4C  
                                _input 007D                          ___ftpack@sign 0084  
                                _putch 5C10                                  pclath 000FFA  
                                tablat 000FF5                       __end_ofi2___wmul 5AC2  
                     __end_ofi2_getRTC 50B8                    _log_count_pop_w_tab 00F4  
                                status 000FD8                            readCOND@res 0084  
                       __CFG_PBADEN$ON 000000                          i2printf@width 0028  
                     __end_ofi2_printf 27C0                     __size_ofi2___lwdiv 0052  
                   __size_ofi2___lwmod 0042                       __end_ofi2_strcpy 578E  
                          Loading@addr 00B3                       _count_can_no_lab 0123  
                 printSortTimer@i_1163 0047                   __size_of_EEPROM_read 0018  
                      __initialization 5416                           __end_of_Test 4418  
                   __size_ofi2_lcdInst 000C                           __end_of_main 4882  
                         __end_of_keys FA98                           __end_of_sort 5B2E  
                           i2printf@ap 0020                             i2printf@cp 001E  
                   __size_ofi2_isdigit 001E                            _BlockerTest 3DD6  
                               ??_Test 00C6    __size_of_change_state_to_menu_start 002C  
                      ??_machineConfig 0080                                 ??_main 00DA  
                               ??_sort 00C4                          __activetblptr 000003  
                               ID@res1 00BA                                 ID@res2 00BC  
           __size_of_updateServoStates 01C8                                 ID@res3 00BE  
                               ID@time 00B9             updateServoPosition@my_time 0086  
           updateServoPosition@time_us 0080                             i2strcpy@cp 0005  
                           i2strcpy@to 0001                      ?_I2C_Master_Start 0001  
                  EEPROM_write@address 00AB                 __size_ofi2_EEPROM_read 0016  
                    ?_I2C_Master_Write 0081                            ?i2_delay_ms 0001  
                               ?_getIR 0001                     ??_I2C_Master_Start 0081  
                               _ADCON0 000FC2                                 _ADCON1 000FC1  
                   ??_I2C_Master_Write 0083                                 _ADCON2 000FC0  
                               STR_100 FB85                                 STR_101 FC0D  
                               STR_110 FE8C                                 STR_102 FC1E  
                               STR_111 FCA6                                 STR_103 FB63  
                               STR_104 FE4E                                 STR_120 FC2F  
                               STR_112 FAE5                                 STR_113 FBC9  
                               STR_105 FB96                                 STR_121 FB09  
                               STR_114 FBFC                                 STR_106 FB74  
                               STR_130 FB2D                                 STR_122 FAF7  
                               _ADRESH 000FC4                                 STR_107 FB96  
                               STR_115 FBFC                                 STR_131 FFB6  
                               STR_123 FE6E                                 STR_108 FEB9  
                               STR_116 FBEB                                 STR_124 FB1B  
                               _EEADRH 000FAA                                 STR_117 FBFC  
                               STR_125 FE6E                                 STR_109 FE9B  
                               STR_118 FBEB                                 STR_126 FE6E  
                               _ADRESL 000FC3                                 STR_127 FBDA  
                               STR_119 FBDA                                 STR_128 FC95  
                               STR_129 FAE5                                 _EEDATA 000FA8  
                               _EECON2 000FA7                       ___awdiv@dividend 0086  
                      i2lcdNibble@data 0002                       __end_of___awtoft 55D2  
                               ?_putch 0001                       __end_of___ftpack 4312  
               __size_of_initSortTimer 00AA                        i2lcdNibble@temp 0001  
            i2_change_state_to_menu_12 57EE              i2_change_state_to_menu_22 57BE  
                               _INT1IE 007F83                                 _INT1IF 007F80  
                               _CVRCON 000FB5                                 i2l1042 3B12  
                               i2l1051 3BB6                                 i2l1053 3BD2  
                               i2l1134 5BE2                                 i2l1520 262C  
                               i2l7100 2736                                 i2l7110 279C  
                               i2l7030 25B6                                 i2l7014 253C  
                               i2l7006 2514                                 i2l1967 540C  
                               i2l7104 2748                                 i2l7024 2594  
                               i2l7016 2546                                 i2l7040 25F6  
                               i2l7112 27A4                                 i2l1977 560A  
                               i2l7106 274E                                 i2l7034 25E0  
                               i2l7026 259E                                 i2l7018 254A  
                               i2l7052 265A                                 i2l7036 25F2  
                               i2l7028 25A4                                 i2l7116 5766  
                               i2l7070 26A8                                 i2l7118 576E  
                               i2l7080 26E6                                 i2l7056 2672  
                               i2l7082 26EE                                 i2l7058 2676  
                               i2l7306 41EE                                 i2l7076 26C2  
                               i2l6622 5AE2                                 i2l7094 271A  
                               i2l7096 2722                                 i2l7088 2704  
                               i2l6660 53E6                                 i2l6646 5B66  
                               i2l7294 41AA                                 i2l7710 3910  
                               i2l9222 5142                                 i2l9240 5B9E  
                               i2l6656 53DA                                 i2l6680 55EC  
                               i2l7560 362E                                 i2l6658 53E2  
                               i2l7298 41BA                                 i2l7570 36C6  
                               i2l9236 5B8E                                 i2l6668 5402  
                               i2l6684 5600                                 i2l6676 55E0  
                               i2l7740 3974                                 i2l7724 3936  
                               i2l7580 3734                                 i2l7572 36DC  
                               i2l9228 516C                                 i2l6678 55E8  
                               i2l7734 395C                                 i2l7718 3928  
                               i2l7670 3876                                 i2l7662 385C  
                               i2l7582 374A                                 i2l7574 36F2  
                               i2l7566 369A                                 i2l7752 3996  
                               i2l7744 397E                                 i2l7728 3952  
                               i2l7672 3886                                 i2l7680 3894  
                               i2l7584 3760                                 i2l7576 3708  
                               i2l7568 36B0                                 i2l7592 37A2  
                               i2l6954 507E                                 i2l7770 39DA  
                               i2l7762 39B6                                 i2l7738 3970  
                               i2l7690 38BA                                 i2l7674 388A  
                               i2l7586 3776                                 i2l7578 371E  
                               i2l7594 37FC                                 i2l6964 50A8  
                               i2l7692 38C0                                 i2l7684 38A8  
                               i2l7780 39F6                                 i2l7588 378C  
                               i2l9700 31FE                                 i2l9620 30E2  
                               i2l6958 508E                                 i2l6982 245C  
                               i2l7774 39EC                                 i2l7766 39C8  
                               i2l7758 39A4                                 i2l7694 38C6  
                               i2l7686 38AE                                 i2l9614 30CE  
                               i2l6992 2480                                 i2l7688 38B4  
                               i2l9720 324C                                 i2l9712 3230  
                               i2l9704 320C                                 i2l9640 311A  
                               i2l9632 310C                                 i2l9624 30F0  
                               i2l9616 30D4                                 i2l6986 246C  
                               i2l7698 38CC                                 i2l6988 247A  
                               i2l9740 32A2                                 i2l9732 327E  
                               i2l9724 3262                                 i2l9716 323E  
                               i2l9708 3222                                 i2l9660 3162  
                               i2l9652 3146                                 i2l9644 3128  
                               i2l9628 30FE                                 i2l6998 24B2  
                               i2l9752 32CC                                 i2l9744 32B0  
                               i2l9736 328C                                 i2l9728 3270  
                               i2l9680 31B0                                 i2l9672 318C  
                               i2l9664 3170                                 i2l9656 3154  
                               i2l9648 3136                                 i2l9762 32F0  
                               i2l9756 32E2                                 i2l9748 32BE  
                               i2l9692 31E2                                 i2l9684 31BE  
                               i2l9676 31A2                                 i2l9668 317E  
                               i2l9942 336A                                 i2l9952 33D4  
                               i2l9696 31F0                                 i2l9688 31CC  
                               i2l9970 34DC                                 i2l9946 337A  
                               i2l9964 34A2                                 i2l9992 35B4  
                               i2l9968 34D6                _f_most_recent_sort_time 0137  
                               i2l9998 35CC                          PlatformTest@i 00B1  
                               _OSCCON 000FD3                                 _TMR0IE 007F95  
                               _TMR0IF 007F92                              ??i2_putch 0003  
                               _TMR1IE 007CE8                                 _TMR1IF 007CF0  
                               _TMR2IE 007CE9                                 _TMR2IF 007CF1  
                               _TMR3IE 007D01                                 _TMR3IF 007D09  
                               _TMR0ON 007EAF                                 _TMR1ON 007E68  
                               _TMR2ON 007E52                                 _TMR3ON 007D88  
                               _SSPADD 000FC8                                 _TRISC3 007CA3  
                               _TRISC4 007CA4                                 _SSPBUF 000FC9  
                            ??_Loading 00B1                       __end_of_delay_ms 5A74  
                 delay_ms@milliseconds 0081                         __CFG_XINST$OFF 000000  
                     __end_of_dispLogs 5B0C                                 ___ftge 4882  
                          ?i2_printRTC 0001                       retrieveLog@byte1 000B  
                     retrieveLog@byte2 000C                       retrieveLog@byte3 000D  
                 __end_of_Distribution 46E0                                 ___wmul 56F4  
                            ??___awdiv 008A                         __CFG_STVREN$ON 000000  
                               _getMAG 572A                              ??___awmod 0084  
                          logRun@byte1 00B2                            logRun@byte2 00B3  
                          logRun@byte3 00B4                       __end_of_readCOND 54FC  
                               _getRTC 4D5C                              ??___lldiv 0088  
                            ??___lwdiv 0084                              ??___lwmod 008B  
                     ??_printSortTimer 002A                       __end_of_initTime 5B50  
                               _initUI 578E                                 _readIR 5464  
                               _logRun 3F9C                                 getIR@i 0087  
                               clear_0 543C                                 clear_1 5448  
                               clear_2 5454                       ___awdiv@quotient 008C  
                      ___awmod@divisor 0082                             _PortTestDC 530E  
                      ___awmod@counter 0084                              ??_lcdInst 0082  
                               _printf 1C2C                              ??_handler 004B  
              __size_of_initGlobalVars 00C0                           ?_retrieveLog 0007  
                               _strcpy 56BE                     __size_of_SpeedTest 0084  
                            ??_readADC 0080                              ??_initLCD 0083  
                            ??_loadRTC 0095                              ??_readMAG 0082  
 __end_ofi2_change_state_to_menu_start 5A9C  __size_ofi2_change_state_to_menu_start 0028  
         i2_change_state_to_menu_start 5A74                            ?_BothServos 0001  
                            ??_isdigit 0080                      __end_ofi2___lwdiv 5416  
                     __end_of_printRTC 309E                           __mediumconst FA86  
                    __end_ofi2___lwmod 5614                                 tblptrh 000FF7  
                               tblptrl 000FF6                                 tblptru 000FF8  
                 _log_count_pop_no_tab 00F2                  __end_of_algorithmTest 47B6  
                    __end_ofi2_lcdInst 5C48                      __end_ofi2_isdigit 5B6E  
                           __accesstop 0080                __end_of__initialization 545A  
                        ?_inputHandler 002A                             ___ftge@ff1 0092  
                           ___ftge@ff2 0095                  _most_recent_sort_time 0145  
                        ___rparam_used 000001                          ?_PlatformTest 0001  
              printSortTimer@start_sec 003B                  __size_of_actuatorTest 08B8  
                           ___awtoft@c 008E                          i2_EEPROM_read 5BD4  
                         Loading@byte1 00B5                     i2___lwmod@dividend 0001  
                       __pcstackCOMRAM 0001                  __size_of_EEPROM_write 00E8  
                  __size_ofi2_delay_ms 001C                           __pidataBANK1 5C5C  
                  BlockerTest@cam_flag 00B1                          __end_of_getIR 5046  
                          i2printRTC@i 0041                          _initSortTimer 4B84  
          __end_of_updateServoPosition 4EE4                          __end_of_putch 5C20  
                          i2printf@len 0022                            i2printf@val 0024  
                           __end_of_ID 1C2C                             __end_of_UI 08DA  
                            ?i2___wmul 0001                     __size_of_lcdNibble 006C  
                            ?i2_getRTC 0001                            i2putch@data 0003  
                printSortTimer@curTime 002D     __end_of_change_state_to_menu_start 59F6  
        ?i2_change_state_to_menu_start 0001             _change_state_to_menu_start 59CA  
                printSortTimer@cur_sec 003D                              ?i2_printf 000D  
                              ??_getIR 0086                              ?i2_strcpy 0001  
                     _count_pop_no_tab 0127                    __size_ofi2_printRTC 0236  
                              ??_putch 0082                           _actuatorTest 08DA  
              __size_of_PortTestPusher 005C                             __pbssBANK0 00DA  
                           __pbssBANK1 0100                           ?_stopSignals 0001  
                       ??_inputHandler 002C         __size_ofi2_updateServoPosition 0068  
        __end_ofi2_updateServoPosition 518C                           _EEPROM_write 4516  
                       ??_PlatformTest 00AB               ?_change_state_to_menu_11 0001  
             ?_change_state_to_menu_12 0001               ?_change_state_to_menu_22 0001  
             ?_change_state_to_menu_23 0001                                UI@F3246 0149  
                    __end_of_SpeedTest 4E66                         ?i2_EEPROM_read 0001  
             ?_change_state_to_logs_11 0001               ?_change_state_to_logs_12 0001  
             ?_change_state_to_logs_22 0001               ?_change_state_to_logs_23 0001  
             ?_change_state_to_logs_33 0001               ?_change_state_to_logs_34 0001  
                  __size_of_BothServos 03EE                      printRTC@RTC_month 00BC  
                              ?___ftge 0092                                _ID$1142 00AD  
                              _ID$1144 00AE                           ?i2_lcdNibble 0001  
                              UI@i_412 00C9                                UI@i_415 00CA  
                              UI@i_416 00CB                                UI@i_450 00D4  
                              UI@i_442 00D0                                UI@i_434 00CC  
                              UI@i_451 00D5                                UI@i_443 00D1  
                              UI@i_435 00CD                                UI@i_446 00D2  
                              UI@i_438 00CE                                UI@i_447 00D3  
                              UI@i_439 00CF                       ??_updateArmState 0001  
                       ?_initSortTimer 0001                                ?___wmul 0080  
                              ?_getMAG 0001                                ?_getRTC 0001  
                              ?_initUI 0001                                ?_readIR 0001  
                              ?_logRun 0001               updateServoPosition@timer 0082  
                              UI@month 00D6                              ?___awtoft 008E  
                            ?___ftpack 0080                            ?_PortTestDC 0001  
                              ?_printf 008E                                _UI$2429 00C6  
                              ?_strcpy 0080                        _pan_servo_state 006B  
                           ??i2___wmul 0005                             ??i2_getRTC 0004  
                              i2l10012 3C2C                                i2l10102 561E  
                              i2l10030 3C78                                i2l10104 5624  
                              i2l10032 3C8C                                i2l10024 3C62  
                              i2l10040 3CE0                                i2l10016 3C42  
                              i2l10018 3C4C                                i2l10042 3CEA  
                              i2l10108 562A                                i2l10052 3D28  
                              i2l10046 3D02                                i2l10038 3C96  
                              i2l10072 3DA4                                i2l10240 3B6A  
                              i2l10224 3B3A                                i2l10058 3D4E  
                              i2l10250 3B8A                                i2l10218 3B2C  
                              i2l10172 3AA0                                i2l10246 3B84  
                              i2l10166 3A90                                i2l10182 3ACA  
                              i2l10272 3BD0                                i2l10168 3A94  
                              i2l10176 3AA8                                i2l10178 3AC0  
                              i2l10196 3AE6                                i2l10720 3CBA  
                              i2l10730 3DCC                                i2l10722 3CC4  
                              i2l10724 3CCE                                i2l10742 38E4  
                              i2l10734 330E                                i2l10726 3CD8  
                              i2l10744 3900                                i2l10736 3330  
                              i2l10728 3DBC                                i2l10738 334C  
                            ?_delay_ms 0001                         PlatformTest@on 00B5  
                           ??i2_printf 0019                             ??i2_strcpy 0005  
                            ?_dispLogs 0012                                _SSPCON1 000FC6  
                              _SSPCON2 000FC5                                _SSPSTAT 000FC7  
                              _RTCflag 00E4                              ?_readCOND 0001  
                           _initEEPROM 5BBE                                i2_putch 5C30  
                            ?_initTime 0080                        _f_loadingNewCan 00EC  
                      i2printRTC@month 003D                  __size_of_Distribution 00E2  
          __size_ofi2_I2C_Master_Start 0008                      __end_of_lcdNibble 5124  
                              _Loading 1192            __size_ofi2_I2C_Master_Write 000A  
                     EEPROM_write@data 00AD                                __Hparam 0000  
                              __Lparam 0000     __size_ofi2_change_state_to_menu_12 0030  
   __size_ofi2_change_state_to_menu_22 0030                              ?_printRTC 0001  
                      __size_of___ftge 00C8                                ___awdiv 4A0A  
                              ___awmod 4C2E                             _initServos 4EE4  
                              ___lldiv 4AC8                        __size_of___wmul 0036  
                      __size_of_getMAG 0032                                ___lwdiv 4F5C  
                              ___lwmod 51F0                        __size_of_getRTC 0086  
                      printSortTimer@i 0049                              _CMCONbits 000FB4  
                    retrieveLog@logNum 0007                           logRun@byte11 00B6  
                         ?_BlockerTest 0001                        __size_of_initUI 0030  
                      __size_of_readIR 004C                                __pcinit 5416  
                           ??___awtoft 0091                   i2EEPROM_read@address 0001  
                      __size_of_logRun 0144                             ??___ftpack 0085  
                         logRun@byte_i 00B5                                __ramtop 1000  
                       _initGlobalVars 494A                                _lcdInst 5C20  
                              _handler 0008                                __ptext0 47B6  
                              __ptext1 5B0C                                __ptext2 1192  
                              __ptext3 4B84                                __ptext4 494A  
                              __ptext5 572A                                __ptext6 4FD4  
                              __ptext7 5464                                __ptext8 1786  
                              __ptext9 54B0                        __size_of_printf 0438  
                              _readADC 59F6                        __size_of_strcpy 0036  
                              _initLCD 5548                                _cur_can 012B  
                              _loadRTC 4CD0                                _readMAG 54FC  
                              _dpowers FA98                     actuatorTest@i_1742 00AE  
                   actuatorTest@i_1751 00B4                     actuatorTest@i_1743 00AF  
                   actuatorTest@i_1735 00AD                     actuatorTest@i_1752 00B5  
                   actuatorTest@i_1761 00BA                     actuatorTest@i_1745 00B0  
                   actuatorTest@i_1762 00BB                     actuatorTest@i_1754 00B6  
                   actuatorTest@i_1746 00B1                     actuatorTest@i_1771 00C0  
                   actuatorTest@i_1755 00B7                           __size_of_arm 00FE  
                   actuatorTest@i_1772 00C1                     actuatorTest@i_1764 00BC  
                   actuatorTest@i_1748 00B2                     actuatorTest@i_1765 00BD  
                   actuatorTest@i_1757 00B8                     actuatorTest@i_1749 00B3  
                   actuatorTest@i_1774 00C2                     actuatorTest@i_1758 00B9  
                   actuatorTest@i_1775 00C3                     actuatorTest@i_1767 00BE  
                   actuatorTest@i_1768 00BF                                _isdigit 5A22  
                     ___awmod@dividend 0080                                getRTC@i 0083  
                 __size_of_retrieveLog 0126                           ??i2_delay_ms 0001  
                           ??_delay_ms 0080               __size_of_I2C_Master_Init 0060  
             __size_of_I2C_Master_Read 002E                          _log_startTime 0100  
             __size_of_I2C_Master_Wait 0014               __size_of_I2C_Master_Stop 0008  
                           ??_dispLogs 0014                           _Distribution 45FE  
                       __pintcode_body 3A24                   PlatformTest@res_1787 00AF  
                 end_of_initialization 545A                             ??_readCOND 0082  
                              logRun@i 00B7                             ??_initTime 0086  
                      ??i2_EEPROM_read 0003                                int_func 3A24  
                  i2___wmul@multiplier 0001                          ??_EEPROM_read 0082  
                  __size_of_PortTestDC 005C                              i2u1140_47 387C  
                            i2u1141_47 5384                              i2u1142_47 538E  
                            i2u1143_47 53B0                              i2u1144_47 53BA  
                            i2u1145_47 5B96              __size_of_I2C_Master_Start 0008  
            __size_of_I2C_Master_Write 000A                        ___lldiv@divisor 0084  
                      ___lldiv@counter 008C                        ??_initSortTimer 0085  
                              printf@c 00A8                           ??i2_printRTC 002A  
                              printf@f 008E                             ??_printRTC 00AB  
                     I2C_Master_Init@c 008D                       I2C_Master_Read@a 0081  
                              postdec1 000FE5                                postdec2 000FDD  
                              postinc0 000FEE                                postinc2 000FDE  
                   __end_ofi2_delay_ms 5BA6                 __end_of_initGlobalVars 4A0A  
                           _sensorTest 2AD6                             _servoTimes 005B  
                            _PORTAbits 000F80                              _PORTBbits 000F81  
                 __end_of_inputHandler 3A24                           ??_BothServos 00AB  
                __end_of_machineConfig 51F0                   __end_of_PlatformTest 2AD6  
                           _updateMenu 309E                      i2_I2C_Master_Read 5AC2  
                            _IR_signal 00E0                      i2_I2C_Master_Wait 5BFE  
                    i2_I2C_Master_Stop 5C74                      i2___lwdiv@divisor 0008  
                      _log_count_total 0143                         _PortTestPusher 52B2  
                            i2___lwdiv 53C4                              i2___lwmod 55D2  
                    i2___lwdiv@counter 000C                     ?i2_I2C_Master_Read 0001  
                   ?i2_I2C_Master_Wait 0001                     __end_ofi2_printRTC 3838  
                   ?i2_I2C_Master_Stop 0001                          actuatorTest@i 00C4  
         ??_change_state_to_menu_start 00C4                            ?_initEEPROM 0001  
                            i2_lcdInst 5C3C                          Loading@i_1130 00BC  
                        Loading@i_1132 00BE                          Loading@i_1118 00B6  
                        Loading@i_1127 00B8                          Loading@i_1129 00BA  
                           _total_time 00FA                            printf@width 00A9  
                 __size_of_stopSignals 001C                    ??i2_I2C_Master_Read 0002  
                            i2_isdigit 5B50                    ??i2_I2C_Master_Wait 0001  
                  ??i2_I2C_Master_Stop 0002                              i2getRTC@i 0004  
                   __end_of_BothServos 2452                    __end_of_EEPROM_read 5BBE  
                          ?_initServos 0001                        ?_initGlobalVars 0001  
                       __end_of___ftge 494A                         __end_of___wmul 572A  
                       __end_of_getMAG 575C                         __end_of_getRTC 4DE2  
                 __size_ofi2_lcdNibble 005A                         _timer2_counter 0073  
                        EEPROM_write@i 00AF                          i2lcdInst@data 0003  
                       __end_of_initUI 57BE                         __end_of_readIR 54B0  
                       __end_of_logRun 40E0                       i2___wmul@product 0005  
                       __end_of_printf 2064                           i2printf@flag 0026  
                       __end_of_strcpy 56F4              __end_ofi2_I2C_Master_Read 5AE8  
            __end_ofi2_I2C_Master_Wait 5C10                           i2printf@prec 001D  
                  start_initialization 5416              __end_ofi2_I2C_Master_Stop 5C7C  
                           readMAG@res 0084                      __size_ofi2___wmul 0026  
                      _count_can_w_lab 0125            ?_change_state_to_menu_start 0001  
                    __size_ofi2_getRTC 0072                 __end_of_PortTestPusher 530E  
                          __end_of_arm 4516                              i2printf@c 0027  
                            i2printf@f 000D                     EEPROM_write@i_1403 00B0  
                i2I2C_Master_Read@temp 0003                   BlockerTest@cond_flag 00B3  
                           ?i2___lwdiv 0006                             ?i2___lwmod 0001  
                    __size_ofi2_printf 036E                      __size_ofi2_strcpy 0032  
                    ??_I2C_Master_Init 0091                      ??_I2C_Master_Read 0081  
                    ??_I2C_Master_Wait 0080                             ?i2_lcdInst 0001  
                    ??_I2C_Master_Stop 0081                       __CFG_OSC$INTIO67 000000  
                           ?i2_isdigit 0001                             initTime@DD 0083  
                           initTime@MM 0084                             initTime@YY 0085  
                      retrieveLog@addr 0010                             logRun@addr 00B9  
                             ??___ftge 0098                              _SpeedTest 4DE2  
                             ??___wmul 0084                               ??_getMAG 0086  
                             ??_getRTC 0083                 __size_of_algorithmTest 00D6  
                          ?_sensorTest 0001                            __pdataBANK1 0149  
                     __CFG_LPT1OSC$OFF 000000                               ??_initUI 00C4  
                             ??_readIR 0082                               ??_logRun 00B1  
                             ID@i_1141 00B1                               ID@i_1143 00B3  
                             ID@i_1146 00B5                               ID@i_1147 00B7  
                         ??_PortTestDC 00AB                 printSortTimer@timeDiff 0045  
     __size_of_change_state_to_menu_11 0030       __size_of_change_state_to_menu_12 0038  
     __size_of_change_state_to_menu_22 0038       __size_of_change_state_to_menu_23 0030  
                             ??_printf 009A       __size_of_change_state_to_logs_11 0030  
     __size_of_change_state_to_logs_12 0030       __size_of_change_state_to_logs_22 0030  
     __size_of_change_state_to_logs_23 002E       __size_of_change_state_to_logs_33 0030  
     __size_of_change_state_to_logs_34 0030                               ??_strcpy 0084  
                  __size_of_initEEPROM 0016                    _printSortTimer$2561 0043  
                 __size_of_BlockerTest 01C6                      __size_of___awtoft 0044  
                    __size_of___ftpack 010C                            __pbssCOMRAM 005B  
         __size_of_updateServoPosition 007E                            ?_updateMenu 0001  
                        __pcstackBANK0 0080                        ?_PortTestPusher 0001  
              __size_of_printSortTimer 02A4                      i2___lwmod@divisor 0003  
                    i2___lwmod@counter 0005                           _isdigit$2064 0081  
                    __size_of_delay_ms 0028                         initSortTimer@i 0088  
                    printSortTimer@min 003F                      printSortTimer@sec 0041  
                  __size_of_initServos 0078                      __size_of_dispLogs 0024  
                     printRTC@INT_time 00AE                       _tilt_servo_state 0071  
                         i2strcpy@from 0003                               ?i2_putch 0001  
                      _count_pop_w_tab 0129                      __size_of_readCOND 004C  
                          _EEPROM_read 5BA6                       _I2C_Master_Start 5C6C  
                   __end_of_PortTestDC 536A                              _f_lastCan 00EA  
                             ?_Loading 0001                    i2I2C_Master_Write@d 0002  
                     _I2C_Master_Write 5C48                      __size_of_initTime 0022  
                i2_updateServoPosition 5124                       ___lwdiv@dividend 0080  
                    __CFG_CCP2MX$PORTC 000000                              __pintcode 0008  
                           ?_SpeedTest 0001                          __pmediumconst FA86  
                            _lcdNibble 50B8                  __size_of_inputHandler 01EC  
                             ?___awdiv 0086                              __ptext100 5BFE  
                            __ptext101 5B8A                               ?___awmod 0080  
                             ?___lldiv 0080                         _sensor_outputs 00DA  
                             ?___lwdiv 0080                               ?___lwmod 0087  
                __size_of_PlatformTest 0316                      __size_of_printRTC 02CA  
                             ?_lcdInst 0001                               ?_handler 0001  
                             ?_readADC 0001                               ?_initLCD 0001  
                             ?_loadRTC 0001                               ?_readMAG 0001  
                             ?_isdigit 0001             __size_ofi2_I2C_Master_Read 0026  
           __size_ofi2_I2C_Master_Wait 0012             __size_ofi2_I2C_Master_Stop 0008  
                            _firstboot 013B                              _cur_state 00E6  
                     ___lwdiv@quotient 0084                         __size_of_getIR 0072  
                        _algorithmTest 46E0                            ??i2___lwdiv 000A  
                          _COND_signal 00DE                            ??i2___lwmod 0005  
                       __size_of_putch 0010                            __size_of_ID 04A6  
                          __size_of_UI 08C8                    __size_of_sensorTest 02FE  
           __end_ofi2_I2C_Master_Start 5C84             __end_ofi2_I2C_Master_Write 5C5C  
                          ??i2_lcdInst 0003                         ___wmul@product 0084  
                             _LATAbits 000F89                               _LATBbits 000F8A  
                             _LATCbits 000F8B                               _LATDbits 000F8C  
                         _inputHandler 3838                            ??i2_isdigit 0001  
                         _PlatformTest 27C0                           BlockerTest@i 00AD  
                             i2u506_40 5AE0                               _PIR2bits 000FA1  
                      PlatformTest@res 00AD                               i2u626_40 3690  
                             i2u573_40 25D8                               i2u573_47 25CE  
                             i2u569_40 2578                               i2u569_47 256E  
                             i2u951_40 35A2                               i2u952_48 35A4  
                             i2u954_40 35D6                               i2u956_40 35FE  
                             i2u955_48 35D8                               i2u948_40 358E  
                  __size_of_updateMenu 02C0                         _log_completion 00F0  
                     __CFG_WDTPS$32768 000000                             ?_lcdNibble 0001  
                            _was_low_1 0077                              _was_low_2 0079  
                            _was_low_3 007B                          ??_retrieveLog 0009  
                           _ADCON0bits 000FC2                      ___wmul@multiplier 0080  
                            _startTime 010E                               i2___wmul 5A9C  
                        lcdNibble@data 0081                               i2_getRTC 5046  
                           printf@flag 00A7                          lcdNibble@temp 0080  
                           printf@prec 009E                __size_of_updateArmState 003A  
                             Loading@i 00C0                               Loading@j 00C2  
                             i2_printf 2452                               i2_strcpy 575C  
                       ?_algorithmTest 0001                    I2C_Master_Read@temp 0082  
                            copy_data0 542A                           ??_initEEPROM 00B1  
                            readIR@res 0084                 ?i2_updateServoPosition 0001  
                     __size_ofi2_putch 000C                             _EECON1bits 000FA6  
                __end_ofi2_EEPROM_read 5BEA                            _count_total 00FE  
               i2delay_ms@milliseconds 0002                       ??_initGlobalVars 0080  
                             __Hrparam 0000                       __size_of_Loading 05F4  
                            initTime@h 0081                              initTime@m 0080  
                            initTime@s 0086                              initTime@w 0082  
                             __Lrparam 0000                     __CFG_BOREN$SBORDIS 000000  
                            logRun@num 00B1                            ??_SpeedTest 00AB  
                __end_of_initSortTimer 4C2E                           ??_initServos 0088  
                     __size_of___awdiv 00BE                       __size_of___awmod 00A2  
              _change_state_to_menu_11 584E             ?i2_change_state_to_menu_12 0001  
              _change_state_to_menu_12 5686             ?i2_change_state_to_menu_22 0001  
              _change_state_to_menu_22 564E                _change_state_to_menu_23 581E  
                i2___wmul@multiplicand 0003                       __size_of___lldiv 00BC  
                     __size_of___lwdiv 0078                _change_state_to_logs_11 593E  
              _change_state_to_logs_12 590E                _change_state_to_logs_22 58DE  
              _change_state_to_logs_23 599C                _change_state_to_logs_33 58AE  
              _change_state_to_logs_34 587E                       __size_of___lwmod 0062  
                       readADC@channel 0081                               ___awtoft 558E  
                             ___ftpack 4206                     i2I2C_Master_Read@a 0002  
                     __size_of_lcdInst 0010                       __size_of_handler 3C06  
                   __end_of_initEEPROM 5BD4                        _I2C_Master_Init 5252  
                     __size_of_readADC 002C                        _I2C_Master_Read 596E  
                     __size_of_initLCD 0046                           _f_ID_receive 012F  
                     __size_of_loadRTC 008C                       __size_of_readMAG 004C  
                      _I2C_Master_Wait 5BEA                        _I2C_Master_Stop 5C64  
                     __size_of_isdigit 002A                               _delay_ms 5A4C  
                       _printSortTimer 335E                        ___lwdiv@divisor 0082  
                      ___lwdiv@counter 0086                    __end_of_retrieveLog 4206  
                             __ptext10 5A4C                               __ptext11 4882  
                             __ptext20 4AC8                               __ptext12 558E  
                             __ptext21 59CA                               __ptext13 4206  
                             __ptext30 4D5C                               __ptext22 5B2E  
                             __ptext14 45FE                               __ptext31 5C48  
                             __ptext23 5548                               __ptext15 518C  
                             __ptext40 4312                               __ptext32 5C64  
                             __ptext24 5BBE                               __ptext16 3F9C  
                             __ptext41 2AD6                               __ptext33 5C6C  
                             __ptext25 4516                               __ptext17 578E  
                             __ptext50 2064                               __ptext42 54FC  
                             __ptext34 596E                               __ptext26 5BA6  
                             __ptext18 4CD0                               __ptext51 5B6E  
                             __ptext43 4418                               __ptext35 5BEA  
                             __ptext27 0012                               __ptext19 5252  
                             __ptext60 51F0                               __ptext52 4EE4  
                             __ptext44 46E0                               __ptext36 564E  
                             __ptext28 2DD4                               __ptext61 4F5C  
                             __ptext53 4E66                               __ptext45 08DA  
                             __ptext37 5686                               __ptext29 56BE  
                             __ptext70 575C                               __ptext62 5C20  
                             __ptext54 3DD6                               __ptext46 4DE2  
                             __ptext38 4C2E                               __ptext71 3838  
                             __ptext63 50B8                               __ptext55 59F6  
                             __ptext47 52B2                               __ptext39 4A0A  
                             __ptext80 590E                               __ptext72 57BE  
                             __ptext56 1C2C                               __ptext48 530E  
                             __ptext81 593E                               __ptext73 57EE  
                             __ptext65 3C0E                               __ptext57 5C10  
                             __ptext49 27C0                               __ptext90 5A9C  
                             __ptext82 5AE8                               __ptext74 581E  
                             __ptext66 5124                               __ptext58 5A22  
                             __ptext91 55D2                               __ptext83 40E0  
                             __ptext75 584E                               __ptext67 309E  
                             __ptext59 56F4                               __ptext92 53C4  
                             __ptext84 5BD4                               __ptext76 587E  
                             __ptext68 5A74                               __ptext93 5C3C  
                             __ptext85 5614                               __ptext77 58AE  
                             __ptext69 3602                               __ptext94 536A  
                             __ptext86 335E                               __ptext78 599C  
                             __ptext95 5046                               __ptext87 2452  
                             __ptext79 58DE                               __ptext96 5C52  
                             __ptext88 5C30                               __ptext97 5C74  
                             __ptext89 5B50                               __ptext98 5C7C  
                             __ptext99 5AC2                               _dispLogs 5AE8  
                        ?_actuatorTest 0001                     PlatformTest@i_1791 00B3  
                             _readCOND 54B0                          ??_stopSignals 0080  
                           strcpy@from 0082                         i2_isdigit$2064 0002  
                   __end_of_initServos 4F5C                          __size_of_Test 0106  
                        ?_EEPROM_write 00AB                               _initTime 5B2E  
                        __size_of_main 00CC                          __size_of_sort 0022  
       ??i2_change_state_to_menu_start 0043                               _logstate 00F8  
                  _updateServoPosition 4E66                 __size_of_machineConfig 0064  
                        ??i2_lcdNibble 0001                               _printRTC 2DD4  
                          ??_lcdNibble 0080                              printRTC@i 00C2  
                             int$flags 007E                           ??_sensorTest 00AB  
                       _log_total_time 00F6                     _f_can_coming_to_ID 0131  
                            printf@len 00A3                              printf@val 00A5  
    __end_ofi2_change_state_to_menu_12 581E      __end_ofi2_change_state_to_menu_22 57EE  
                     ??_PortTestPusher 00AB                               loadRTC@i 0096  
               __end_of_printSortTimer 3602                              putch@data 0082  
             __end_of_I2C_Master_Start 5C74                            _OSCTUNEbits 000F9B  
             __end_of_I2C_Master_Write 5C52                             _INTCONbits 000FF2  
                 ?_updateServoPosition 0080                           ??_updateMenu 0043  
                      ??_algorithmTest 00AB                             _MAG_signal 00E2  
                             isdigit@c 0082                          sensorTest@res 00AD  
                       ??_actuatorTest 00AB                    _servo_timer_counter 006D  
                             intlevel2 0000                         ??_EEPROM_write 00AE  
                       BlockerTest@res 00AF                     __end_of_sensorTest 2DD4  
                     ___lwmod@dividend 0087                       ___lldiv@dividend 0080  
                         ?_EEPROM_read 0080                    __end_of_stopSignals 5B8A  
            ??_change_state_to_menu_11 002A              ??_change_state_to_menu_12 00AB  
            ??_change_state_to_menu_22 00AB              ??_change_state_to_menu_23 002A  
            ??_change_state_to_logs_11 002A              ??_change_state_to_logs_12 002A  
            ??_change_state_to_logs_22 002A              ??_change_state_to_logs_23 002A  
            ??_change_state_to_logs_33 002A              ??_change_state_to_logs_34 002A  
                             printf@ap 00A1                               printf@cp 009F  
                   __end_of_updateMenu 335E                __end_of_I2C_Master_Init 52B2  
              __end_of_I2C_Master_Read 599C                __end_of_I2C_Master_Wait 5BFE  
                        ??_BlockerTest 00AB                __end_of_I2C_Master_Stop 5C6C  
                          lcdInst@data 0082                          printRTC@F3236 014D  
                         retrieveLog@i 000E                            _retrieveLog 40E0  
                  __end_ofi2_lcdNibble 53C4                  ??_updateServoPosition 0084  
                      ?_printSortTimer 0001                     _servo_timer_target 006F  
                     ___lldiv@quotient 0088                      I2C_Master_Write@d 0081  
                      ___lwmod@divisor 0089                         _updateArmState 5614  
                    _f_can_distributed 0135                               strcpy@cp 0084  
                             strcpy@to 0080                          _machineConfig 518C  
                      ___lwmod@counter 008B                      _updateServoStates 3C0E  
                        printRTC@month 00BE                          ?_Distribution 0001  
                   ?_updateServoStates 0001                          _machine_state 00FC  
                        dispLogs@myLog 0012                         _f_arm_position 00E8  
                  ??_updateServoStates 0009                     i2printRTC@INT_time 002D  
