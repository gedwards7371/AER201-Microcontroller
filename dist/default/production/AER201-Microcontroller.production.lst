

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Tue Apr 11 22:17:54 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,delta=1
    73                           	psect	text59,global,reloc=2,class=CODE,delta=1
    74                           	psect	text60,global,reloc=2,class=CODE,delta=1
    75                           	psect	text61,global,reloc=2,class=CODE,delta=1
    76                           	psect	text62,global,reloc=2,class=CODE,delta=1
    77                           	psect	text63,global,reloc=2,class=CODE,delta=1
    78                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    79                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1
    94                           	psect	text79,global,reloc=2,class=CODE,delta=1
    95                           	psect	text80,global,reloc=2,class=CODE,delta=1
    96                           	psect	text81,global,reloc=2,class=CODE,delta=1
    97                           	psect	text82,global,reloc=2,class=CODE,delta=1
    98                           	psect	text83,global,reloc=2,class=CODE,delta=1
    99                           	psect	text84,global,reloc=2,class=CODE,delta=1
   100                           	psect	text85,global,reloc=2,class=CODE,delta=1
   101                           	psect	text86,global,reloc=2,class=CODE,delta=1
   102                           	psect	text87,global,reloc=2,class=CODE,delta=1
   103                           	psect	text88,global,reloc=2,class=CODE,delta=1
   104                           	psect	text89,global,reloc=2,class=CODE,delta=1
   105                           	psect	text90,global,reloc=2,class=CODE,delta=1
   106                           	psect	text91,global,reloc=2,class=CODE,delta=1
   107                           	psect	text92,global,reloc=2,class=CODE,delta=1
   108                           	psect	text93,global,reloc=2,class=CODE,delta=1
   109                           	psect	text94,global,reloc=2,class=CODE,delta=1
   110                           	psect	text95,global,reloc=2,class=CODE,delta=1
   111                           	psect	text96,global,reloc=2,class=CODE,delta=1
   112                           	psect	text97,global,reloc=2,class=CODE,delta=1
   113                           	psect	text98,global,reloc=2,class=CODE,delta=1
   114                           	psect	text99,global,reloc=2,class=CODE,delta=1
   115                           	psect	text100,global,reloc=2,class=CODE,delta=1
   116                           	psect	text101,global,reloc=2,class=CODE,delta=1
   117                           	psect	text102,global,reloc=2,class=CODE,delta=1
   118                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   119                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   120                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   121  0000                     
   122                           ; Version 1.40
   123                           ; Generated 01/12/2016 GMT
   124                           ; 
   125                           ; Copyright © 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
   126                           ; All rights reserved.
   127                           ; 
   128                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   129                           ; 
   130                           ; Redistribution and use in source and binary forms, with or without modification, are
   131                           ; permitted provided that the following conditions are met:
   132                           ; 
   133                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   134                           ;        conditions and the following disclaimer.
   135                           ; 
   136                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   137                           ;        of conditions and the following disclaimer in the documentation and/or other
   138                           ;        materials provided with the distribution.
   139                           ; 
   140                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   141                           ;        software without specific prior written permission.
   142                           ; 
   143                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   144                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   145                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   146                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   147                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   148                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   149                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   150                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   151                           ; 
   152                           ; 
   153                           ; Code-generator required, PIC18F4620 Definitions
   154                           ; 
   155                           ; SFR Addresses
   156  0000                     
   157                           	psect	idataBANK1
   158  005D9E                     __pidataBANK1:
   159                           	opt stack 0
   160                           
   161                           ;initializer for UI@F3248
   162  005D9E  4D                 	db	77
   163  005D9F  4D                 	db	77
   164  005DA0  4D                 	db	77
   165  005DA1  00                 	db	0
   166                           
   167                           ;initializer for printRTC@F3238
   168  005DA2  4D                 	db	77
   169  005DA3  4D                 	db	77
   170  005DA4  4D                 	db	77
   171  005DA5  00                 	db	0
   172                           
   173                           	psect	mediumconst
   174  00FAAE                     __pmediumconst:
   175                           	opt stack 0
   176  00FAAE  00                 	db	0
   177  00FAAF                     _keys:
   178                           	opt stack 0
   179  00FAAF  31                 	db	49
   180  00FAB0  32                 	db	50
   181  00FAB1  33                 	db	51
   182  00FAB2  41                 	db	65
   183  00FAB3  34                 	db	52
   184  00FAB4  35                 	db	53
   185  00FAB5  36                 	db	54
   186  00FAB6  42                 	db	66
   187  00FAB7  37                 	db	55
   188  00FAB8  38                 	db	56
   189  00FAB9  39                 	db	57
   190  00FABA  43                 	db	67
   191  00FABB  2A                 	db	42
   192  00FABC  30                 	db	48
   193  00FABD  23                 	db	35
   194  00FABE  44                 	db	68
   195  00FABF  00                 	db	0
   196  00FAC0                     __end_of_keys:
   197                           	opt stack 0
   198  00FAC0                     _dpowers:
   199                           	opt stack 0
   200  00FAC0  0001               	dw	1
   201  00FAC2  000A               	dw	10
   202  00FAC4  0064               	dw	100
   203  00FAC6  03E8               	dw	1000
   204  00FAC8  2710               	dw	10000
   205  00FACA                     __end_of_dpowers:
   206                           	opt stack 0
   207  0000                     _ADCON0	set	4034
   208  0000                     _ADCON0bits	set	4034
   209  0000                     _ADCON1	set	4033
   210  0000                     _ADCON2	set	4032
   211  0000                     _ADRESH	set	4036
   212  0000                     _ADRESL	set	4035
   213  0000                     _CMCONbits	set	4020
   214  0000                     _CVRCON	set	4021
   215  0000                     _EEADR	set	4009
   216  0000                     _EEADRH	set	4010
   217  0000                     _EECON1bits	set	4006
   218  0000                     _EECON2	set	4007
   219  0000                     _EEDATA	set	4008
   220  0000                     _INTCONbits	set	4082
   221  0000                     _LATA	set	3977
   222  0000                     _LATAbits	set	3977
   223  0000                     _LATB	set	3978
   224  0000                     _LATBbits	set	3978
   225  0000                     _LATC	set	3979
   226  0000                     _LATCbits	set	3979
   227  0000                     _LATD	set	3980
   228  0000                     _LATDbits	set	3980
   229  0000                     _LATE	set	3981
   230  0000                     _OSCCON	set	4051
   231  0000                     _OSCTUNEbits	set	3995
   232  0000                     _PIR2bits	set	4001
   233  0000                     _PORTAbits	set	3968
   234  0000                     _PORTB	set	3969
   235  0000                     _PORTBbits	set	3969
   236  0000                     _PR2	set	4043
   237  0000                     _SSPADD	set	4040
   238  0000                     _SSPBUF	set	4041
   239  0000                     _SSPCON1	set	4038
   240  0000                     _SSPCON2	set	4037
   241  0000                     _SSPSTAT	set	4039
   242  0000                     _T0CON	set	4053
   243  0000                     _T1CON	set	4045
   244  0000                     _T2CON	set	4042
   245  0000                     _T3CON	set	4017
   246  0000                     _TMR0H	set	4055
   247  0000                     _TMR0L	set	4054
   248  0000                     _TMR1H	set	4047
   249  0000                     _TMR1L	set	4046
   250  0000                     _TMR3H	set	4019
   251  0000                     _TMR3L	set	4018
   252  0000                     _TRISA	set	3986
   253  0000                     _TRISB	set	3987
   254  0000                     _TRISC	set	3988
   255  0000                     _TRISD	set	3989
   256  0000                     _TRISE	set	3990
   257  0000                     _ACKDT	set	32301
   258  0000                     _ACKEN	set	32300
   259  0000                     _ADIE	set	31982
   260  0000                     _INT1IE	set	32643
   261  0000                     _INT1IF	set	32640
   262  0000                     _PEIE	set	32662
   263  0000                     _PEN	set	32298
   264  0000                     _RCEN	set	32299
   265  0000                     _RSEN	set	32297
   266  0000                     _SEN	set	32296
   267  0000                     _TMR0IE	set	32661
   268  0000                     _TMR0IF	set	32658
   269  0000                     _TMR0ON	set	32431
   270  0000                     _TMR1IE	set	31976
   271  0000                     _TMR1IF	set	31984
   272  0000                     _TMR1ON	set	32360
   273  0000                     _TMR2IE	set	31977
   274  0000                     _TMR2IF	set	31985
   275  0000                     _TMR2ON	set	32338
   276  0000                     _TMR3IE	set	32001
   277  0000                     _TMR3IF	set	32009
   278  0000                     _TMR3ON	set	32136
   279  0000                     _TRISC3	set	31907
   280  0000                     _TRISC4	set	31908
   281  0000                     _nRBPU	set	32655
   282  00FACA                     STR_21:
   283  00FACA  25                 	db	37
   284  00FACB  30                 	db	48	;'0'
   285  00FACC  32                 	db	50	;'2'
   286  00FACD  64                 	db	100	;'d'
   287  00FACE  25                 	db	37
   288  00FACF  73                 	db	115	;'s'
   289  00FAD0  20                 	db	32
   290  00FAD1  7C                 	db	124
   291  00FAD2  20                 	db	32
   292  00FAD3  25                 	db	37
   293  00FAD4  30                 	db	48	;'0'
   294  00FAD5  32                 	db	50	;'2'
   295  00FAD6  64                 	db	100	;'d'
   296  00FAD7  3A                 	db	58	;':'
   297  00FAD8  25                 	db	37
   298  00FAD9  30                 	db	48	;'0'
   299  00FADA  32                 	db	50	;'2'
   300  00FADB  64                 	db	100	;'d'
   301  00FADC  3A                 	db	58	;':'
   302  00FADD  25                 	db	37
   303  00FADE  30                 	db	48	;'0'
   304  00FADF  32                 	db	50	;'2'
   305  00FAE0  64                 	db	100	;'d'
   306  00FAE1  00                 	db	0
   307  00FAE2                     STR_66:
   308  00FAE2  28                 	db	40
   309  00FAE3  64                 	db	100	;'d'
   310  00FAE4  61                 	db	97	;'a'
   311  00FAE5  74                 	db	116	;'t'
   312  00FAE6  61                 	db	97	;'a'
   313  00FAE7  3A                 	db	58	;':'
   314  00FAE8  20                 	db	32
   315  00FAE9  25                 	db	37
   316  00FAEA  75                 	db	117	;'u'
   317  00FAEB  2C                 	db	44
   318  00FAEC  20                 	db	32
   319  00FAED  61                 	db	97	;'a'
   320  00FAEE  64                 	db	100	;'d'
   321  00FAEF  64                 	db	100	;'d'
   322  00FAF0  72                 	db	114	;'r'
   323  00FAF1  3A                 	db	58	;':'
   324  00FAF2  20                 	db	32
   325  00FAF3  25                 	db	37
   326  00FAF4  75                 	db	117	;'u'
   327  00FAF5  29                 	db	41
   328  00FAF6  00                 	db	0
   329  00FAF7                     STR_111:
   330  00FAF7  44                 	db	68	;'D'
   331  00FAF8  20                 	db	32
   332  00FAF9  57                 	db	87	;'W'
   333  00FAFA  49                 	db	73	;'I'
   334  00FAFB  4C                 	db	76	;'L'
   335  00FAFC  4C                 	db	76	;'L'
   336  00FAFD  20                 	db	32
   337  00FAFE  52                 	db	82	;'R'
   338  00FAFF  45                 	db	69	;'E'
   339  00FB00  54                 	db	84	;'T'
   340  00FB01  55                 	db	85	;'U'
   341  00FB02  52                 	db	82	;'R'
   342  00FB03  4E                 	db	78	;'N'
   343  00FB04  20                 	db	32
   344  00FB05  20                 	db	32
   345  00FB06  20                 	db	32
   346  00FB07  20                 	db	32
   347  00FB08  00                 	db	0
   348  00FB09                     STR_119:
   349  00FB09  4F                 	db	79	;'O'
   350  00FB0A  54                 	db	84	;'T'
   351  00FB0B  48                 	db	72	;'H'
   352  00FB0C  45                 	db	69	;'E'
   353  00FB0D  52                 	db	82	;'R'
   354  00FB0E  20                 	db	32
   355  00FB0F  53                 	db	83	;'S'
   356  00FB10  45                 	db	69	;'E'
   357  00FB11  54                 	db	84	;'T'
   358  00FB12  53                 	db	83	;'S'
   359  00FB13  20                 	db	32
   360  00FB14  52                 	db	82	;'R'
   361  00FB15  41                 	db	65	;'A'
   362  00FB16  35                 	db	53	;'5'
   363  00FB17  20                 	db	32
   364  00FB18  20                 	db	32
   365  00FB19  20                 	db	32
   366  00FB1A  00                 	db	0
   367  00FB1B                     STR_118:
   368  00FB1B  53                 	db	83	;'S'
   369  00FB1C  3A                 	db	58	;':'
   370  00FB1D  20                 	db	32
   371  00FB1E  44                 	db	68	;'D'
   372  00FB1F  20                 	db	32
   373  00FB20  57                 	db	87	;'W'
   374  00FB21  49                 	db	73	;'I'
   375  00FB22  4C                 	db	76	;'L'
   376  00FB23  4C                 	db	76	;'L'
   377  00FB24  20                 	db	32
   378  00FB25  52                 	db	82	;'R'
   379  00FB26  45                 	db	69	;'E'
   380  00FB27  54                 	db	84	;'T'
   381  00FB28  55                 	db	85	;'U'
   382  00FB29  52                 	db	82	;'R'
   383  00FB2A  4E                 	db	78	;'N'
   384  00FB2B  20                 	db	32
   385  00FB2C  00                 	db	0
   386  00FB2D                     STR_121:
   387  00FB2D  4F                 	db	79	;'O'
   388  00FB2E  54                 	db	84	;'T'
   389  00FB2F  48                 	db	72	;'H'
   390  00FB30  45                 	db	69	;'E'
   391  00FB31  52                 	db	82	;'R'
   392  00FB32  3A                 	db	58	;':'
   393  00FB33  20                 	db	32
   394  00FB34  43                 	db	67	;'C'
   395  00FB35  41                 	db	65	;'A'
   396  00FB36  4D                 	db	77	;'M'
   397  00FB37  20                 	db	32
   398  00FB38  54                 	db	84	;'T'
   399  00FB39  4F                 	db	79	;'O'
   400  00FB3A  47                 	db	71	;'G'
   401  00FB3B  47                 	db	71	;'G'
   402  00FB3C  4C                 	db	76	;'L'
   403  00FB3D  45                 	db	69	;'E'
   404  00FB3E  00                 	db	0
   405  00FB3F                     STR_127:
   406  00FB3F  4F                 	db	79	;'O'
   407  00FB40  54                 	db	84	;'T'
   408  00FB41  48                 	db	72	;'H'
   409  00FB42  45                 	db	69	;'E'
   410  00FB43  52                 	db	82	;'R'
   411  00FB44  20                 	db	32
   412  00FB45  53                 	db	83	;'S'
   413  00FB46  45                 	db	69	;'E'
   414  00FB47  54                 	db	84	;'T'
   415  00FB48  53                 	db	83	;'S'
   416  00FB49  20                 	db	32
   417  00FB4A  50                 	db	80	;'P'
   418  00FB4B  55                 	db	85	;'U'
   419  00FB4C  53                 	db	83	;'S'
   420  00FB4D  48                 	db	72	;'H'
   421  00FB4E  45                 	db	69	;'E'
   422  00FB4F  52                 	db	82	;'R'
   423  00FB50  00                 	db	0
   424  00FB51                     STR_3:
   425  00FB51  2D                 	db	45
   426  00FB52  2D                 	db	45
   427  00FB53  20                 	db	32
   428  00FB54  4C                 	db	76	;'L'
   429  00FB55  4F                 	db	79	;'O'
   430  00FB56  47                 	db	71	;'G'
   431  00FB57  20                 	db	32
   432  00FB58  25                 	db	37
   433  00FB59  32                 	db	50	;'2'
   434  00FB5A  64                 	db	100	;'d'
   435  00FB5B  20                 	db	32
   436  00FB5C  48                 	db	72	;'H'
   437  00FB5D  45                 	db	69	;'E'
   438  00FB5E  52                 	db	82	;'R'
   439  00FB5F  45                 	db	69	;'E'
   440  00FB60  2D                 	db	45
   441  00FB61  2D                 	db	45
   442  00FB62  00                 	db	0
   443  00FB63                     STR_1:
   444  00FB63  52                 	db	82	;'R'
   445  00FB64  45                 	db	69	;'E'
   446  00FB65  53                 	db	83	;'S'
   447  00FB66  55                 	db	85	;'U'
   448  00FB67  4C                 	db	76	;'L'
   449  00FB68  54                 	db	84	;'T'
   450  00FB69  53                 	db	83	;'S'
   451  00FB6A  20                 	db	32
   452  00FB6B  49                 	db	73	;'I'
   453  00FB6C  4E                 	db	78	;'N'
   454  00FB6D  20                 	db	32
   455  00FB6E  4C                 	db	76	;'L'
   456  00FB6F  4F                 	db	79	;'O'
   457  00FB70  47                 	db	71	;'G'
   458  00FB71  20                 	db	32
   459  00FB72  25                 	db	37
   460  00FB73  64                 	db	100	;'d'
   461  00FB74  00                 	db	0
   462  00FB75                     STR_102:
   463  00FB75  4D                 	db	77	;'M'
   464  00FB76  49                 	db	73	;'I'
   465  00FB77  44                 	db	68	;'D'
   466  00FB78  20                 	db	32
   467  00FB79  2D                 	db	45
   468  00FB7A  2D                 	db	45
   469  00FB7B  20                 	db	32
   470  00FB7C  32                 	db	50	;'2'
   471  00FB7D  73                 	db	115	;'s'
   472  00FB7E  20                 	db	32
   473  00FB7F  20                 	db	32
   474  00FB80  20                 	db	32
   475  00FB81  20                 	db	32
   476  00FB82  20                 	db	32
   477  00FB83  20                 	db	32
   478  00FB84  20                 	db	32
   479  00FB85  00                 	db	0
   480  00FB86                     STR_105:
   481  00FB86  44                 	db	68	;'D'
   482  00FB87  52                 	db	82	;'R'
   483  00FB88  4F                 	db	79	;'O'
   484  00FB89  50                 	db	80	;'P'
   485  00FB8A  20                 	db	32
   486  00FB8B  2D                 	db	45
   487  00FB8C  2D                 	db	45
   488  00FB8D  20                 	db	32
   489  00FB8E  32                 	db	50	;'2'
   490  00FB8F  73                 	db	115	;'s'
   491  00FB90  20                 	db	32
   492  00FB91  20                 	db	32
   493  00FB92  20                 	db	32
   494  00FB93  20                 	db	32
   495  00FB94  20                 	db	32
   496  00FB95  20                 	db	32
   497  00FB96  00                 	db	0
   498  00FB97                     STR_99:
   499  00FB97  4C                 	db	76	;'L'
   500  00FB98  45                 	db	69	;'E'
   501  00FB99  46                 	db	70	;'F'
   502  00FB9A  54                 	db	84	;'T'
   503  00FB9B  20                 	db	32
   504  00FB9C  2D                 	db	45
   505  00FB9D  2D                 	db	45
   506  00FB9E  20                 	db	32
   507  00FB9F  32                 	db	50	;'2'
   508  00FBA0  73                 	db	115	;'s'
   509  00FBA1  20                 	db	32
   510  00FBA2  20                 	db	32
   511  00FBA3  20                 	db	32
   512  00FBA4  20                 	db	32
   513  00FBA5  20                 	db	32
   514  00FBA6  20                 	db	32
   515  00FBA7  00                 	db	0
   516  00FBA8                     STR_104:
   517  00FBA8  4C                 	db	76	;'L'
   518  00FBA9  45                 	db	69	;'E'
   519  00FBAA  56                 	db	86	;'V'
   520  00FBAB  45                 	db	69	;'E'
   521  00FBAC  4C                 	db	76	;'L'
   522  00FBAD  20                 	db	32
   523  00FBAE  2D                 	db	45
   524  00FBAF  2D                 	db	45
   525  00FBB0  20                 	db	32
   526  00FBB1  32                 	db	50	;'2'
   527  00FBB2  73                 	db	115	;'s'
   528  00FBB3  20                 	db	32
   529  00FBB4  20                 	db	32
   530  00FBB5  20                 	db	32
   531  00FBB6  20                 	db	32
   532  00FBB7  20                 	db	32
   533  00FBB8  00                 	db	0
   534  00FBB9                     STR_98:
   535  00FBB9  52                 	db	82	;'R'
   536  00FBBA  49                 	db	73	;'I'
   537  00FBBB  47                 	db	71	;'G'
   538  00FBBC  48                 	db	72	;'H'
   539  00FBBD  54                 	db	84	;'T'
   540  00FBBE  20                 	db	32
   541  00FBBF  2D                 	db	45
   542  00FBC0  2D                 	db	45
   543  00FBC1  20                 	db	32
   544  00FBC2  32                 	db	50	;'2'
   545  00FBC3  73                 	db	115	;'s'
   546  00FBC4  20                 	db	32
   547  00FBC5  20                 	db	32
   548  00FBC6  20                 	db	32
   549  00FBC7  20                 	db	32
   550  00FBC8  20                 	db	32
   551  00FBC9  00                 	db	0
   552  00FBCA                     STR_97:
   553  00FBCA  4D                 	db	77	;'M'
   554  00FBCB  49                 	db	73	;'I'
   555  00FBCC  44                 	db	68	;'D'
   556  00FBCD  44                 	db	68	;'D'
   557  00FBCE  4C                 	db	76	;'L'
   558  00FBCF  45                 	db	69	;'E'
   559  00FBD0  20                 	db	32
   560  00FBD1  2D                 	db	45
   561  00FBD2  2D                 	db	45
   562  00FBD3  20                 	db	32
   563  00FBD4  32                 	db	50	;'2'
   564  00FBD5  73                 	db	115	;'s'
   565  00FBD6  20                 	db	32
   566  00FBD7  20                 	db	32
   567  00FBD8  20                 	db	32
   568  00FBD9  20                 	db	32
   569  00FBDA  00                 	db	0
   570  00FBDB                     STR_112:
   571  00FBDB  4F                 	db	79	;'O'
   572  00FBDC  54                 	db	84	;'T'
   573  00FBDD  48                 	db	72	;'H'
   574  00FBDE  45                 	db	69	;'E'
   575  00FBDF  52                 	db	82	;'R'
   576  00FBE0  20                 	db	32
   577  00FBE1  53                 	db	83	;'S'
   578  00FBE2  45                 	db	69	;'E'
   579  00FBE3  54                 	db	84	;'T'
   580  00FBE4  53                 	db	83	;'S'
   581  00FBE5  20                 	db	32
   582  00FBE6  44                 	db	68	;'D'
   583  00FBE7  43                 	db	67	;'C'
   584  00FBE8  20                 	db	32
   585  00FBE9  20                 	db	32
   586  00FBEA  20                 	db	32
   587  00FBEB  00                 	db	0
   588  00FBEC                     STR_124:
   589  00FBEC  44                 	db	68	;'D'
   590  00FBED  20                 	db	32
   591  00FBEE  57                 	db	87	;'W'
   592  00FBEF  49                 	db	73	;'I'
   593  00FBF0  4C                 	db	76	;'L'
   594  00FBF1  4C                 	db	76	;'L'
   595  00FBF2  20                 	db	32
   596  00FBF3  52                 	db	82	;'R'
   597  00FBF4  45                 	db	69	;'E'
   598  00FBF5  54                 	db	84	;'T'
   599  00FBF6  55                 	db	85	;'U'
   600  00FBF7  52                 	db	82	;'R'
   601  00FBF8  4E                 	db	78	;'N'
   602  00FBF9  20                 	db	32
   603  00FBFA  20                 	db	32
   604  00FBFB  20                 	db	32
   605  00FBFC  00                 	db	0
   606  00FBFD                     STR_115:
   607  00FBFD  35                 	db	53	;'5'
   608  00FBFE  3A                 	db	58	;':'
   609  00FBFF  48                 	db	72	;'H'
   610  00FC00  7C                 	db	124
   611  00FC01  36                 	db	54	;'6'
   612  00FC02  3A                 	db	58	;':'
   613  00FC03  4C                 	db	76	;'L'
   614  00FC04  7C                 	db	124
   615  00FC05  49                 	db	73	;'I'
   616  00FC06  52                 	db	82	;'R'
   617  00FC07  3A                 	db	58	;':'
   618  00FC08  25                 	db	37
   619  00FC09  64                 	db	100	;'d'
   620  00FC0A  20                 	db	32
   621  00FC0B  20                 	db	32
   622  00FC0C  20                 	db	32
   623  00FC0D  00                 	db	0
   624  00FC0E                     STR_113:
   625  00FC0E  31                 	db	49	;'1'
   626  00FC0F  3A                 	db	58	;':'
   627  00FC10  20                 	db	32
   628  00FC11  44                 	db	68	;'D'
   629  00FC12  43                 	db	67	;'C'
   630  00FC13  20                 	db	32
   631  00FC14  7C                 	db	124
   632  00FC15  20                 	db	32
   633  00FC16  41                 	db	65	;'A'
   634  00FC17  3A                 	db	58	;':'
   635  00FC18  20                 	db	32
   636  00FC19  41                 	db	65	;'A'
   637  00FC1A  52                 	db	82	;'R'
   638  00FC1B  4D                 	db	77	;'M'
   639  00FC1C  20                 	db	32
   640  00FC1D  20                 	db	32
   641  00FC1E  00                 	db	0
   642  00FC1F                     STR_100:
   643  00FC1F  4D                 	db	77	;'M'
   644  00FC20  49                 	db	73	;'I'
   645  00FC21  44                 	db	68	;'D'
   646  00FC22  2D                 	db	45
   647  00FC23  4C                 	db	76	;'L'
   648  00FC24  45                 	db	69	;'E'
   649  00FC25  46                 	db	70	;'F'
   650  00FC26  54                 	db	84	;'T'
   651  00FC27  20                 	db	32
   652  00FC28  2D                 	db	45
   653  00FC29  2D                 	db	45
   654  00FC2A  20                 	db	32
   655  00FC2B  32                 	db	50	;'2'
   656  00FC2C  73                 	db	115	;'s'
   657  00FC2D  20                 	db	32
   658  00FC2E  20                 	db	32
   659  00FC2F  00                 	db	0
   660  00FC30                     STR_101:
   661  00FC30  4D                 	db	77	;'M'
   662  00FC31  49                 	db	73	;'I'
   663  00FC32  44                 	db	68	;'D'
   664  00FC33  2D                 	db	45
   665  00FC34  52                 	db	82	;'R'
   666  00FC35  49                 	db	73	;'I'
   667  00FC36  47                 	db	71	;'G'
   668  00FC37  48                 	db	72	;'H'
   669  00FC38  54                 	db	84	;'T'
   670  00FC39  20                 	db	32
   671  00FC3A  2D                 	db	45
   672  00FC3B  2D                 	db	45
   673  00FC3C  20                 	db	32
   674  00FC3D  32                 	db	50	;'2'
   675  00FC3E  73                 	db	115	;'s'
   676  00FC3F  20                 	db	32
   677  00FC40  00                 	db	0
   678  00FC41                     STR_72:
   679  00FC41  41                 	db	65	;'A'
   680  00FC42  4C                 	db	76	;'L'
   681  00FC43  47                 	db	71	;'G'
   682  00FC44  31                 	db	49	;'1'
   683  00FC45  3A                 	db	58	;':'
   684  00FC46  20                 	db	32
   685  00FC47  39                 	db	57	;'9'
   686  00FC48  20                 	db	32
   687  00FC49  50                 	db	80	;'P'
   688  00FC4A  4F                 	db	79	;'O'
   689  00FC4B  50                 	db	80	;'P'
   690  00FC4C  4E                 	db	78	;'N'
   691  00FC4D  4F                 	db	79	;'O'
   692  00FC4E  54                 	db	84	;'T'
   693  00FC4F  41                 	db	65	;'A'
   694  00FC50  42                 	db	66	;'B'
   695  00FC51  00                 	db	0
   696  00FC52                     STR_92:
   697  00FC52  54                 	db	84	;'T'
   698  00FC53  53                 	db	83	;'S'
   699  00FC54  54                 	db	84	;'T'
   700  00FC55  3A                 	db	58	;':'
   701  00FC56  20                 	db	32
   702  00FC57  43                 	db	67	;'C'
   703  00FC58  4F                 	db	79	;'O'
   704  00FC59  4E                 	db	78	;'N'
   705  00FC5A  44                 	db	68	;'D'
   706  00FC5B  20                 	db	32
   707  00FC5C  53                 	db	83	;'S'
   708  00FC5D  4F                 	db	79	;'O'
   709  00FC5E  4C                 	db	76	;'L'
   710  00FC5F  4E                 	db	78	;'N'
   711  00FC60  27                 	db	39
   712  00FC61  44                 	db	68	;'D'
   713  00FC62  00                 	db	0
   714  00FC63                     STR_94:
   715  00FC63  54                 	db	84	;'T'
   716  00FC64  53                 	db	83	;'S'
   717  00FC65  54                 	db	84	;'T'
   718  00FC66  3A                 	db	58	;':'
   719  00FC67  20                 	db	32
   720  00FC68  50                 	db	80	;'P'
   721  00FC69  55                 	db	85	;'U'
   722  00FC6A  53                 	db	83	;'S'
   723  00FC6B  48                 	db	72	;'H'
   724  00FC6C  20                 	db	32
   725  00FC6D  53                 	db	83	;'S'
   726  00FC6E  4F                 	db	79	;'O'
   727  00FC6F  4C                 	db	76	;'L'
   728  00FC70  4E                 	db	78	;'N'
   729  00FC71  27                 	db	39
   730  00FC72  44                 	db	68	;'D'
   731  00FC73  00                 	db	0
   732  00FC74                     STR_68:
   733  00FC74  32                 	db	50	;'2'
   734  00FC75  2E                 	db	46
   735  00FC76  53                 	db	83	;'S'
   736  00FC77  4E                 	db	78	;'N'
   737  00FC78  52                 	db	82	;'R'
   738  00FC79  7C                 	db	124
   739  00FC7A  34                 	db	52	;'4'
   740  00FC7B  2E                 	db	46
   741  00FC7C  48                 	db	72	;'H'
   742  00FC7D  49                 	db	73	;'I'
   743  00FC7E  7C                 	db	124
   744  00FC7F  35                 	db	53	;'5'
   745  00FC80  2E                 	db	46
   746  00FC81  4D                 	db	77	;'M'
   747  00FC82  45                 	db	69	;'E'
   748  00FC83  44                 	db	68	;'D'
   749  00FC84  00                 	db	0
   750  00FC85                     STR_69:
   751  00FC85  42                 	db	66	;'B'
   752  00FC86  2E                 	db	46
   753  00FC87  50                 	db	80	;'P'
   754  00FC88  4C                 	db	76	;'L'
   755  00FC89  41                 	db	65	;'A'
   756  00FC8A  7C                 	db	124
   757  00FC8B  38                 	db	56	;'8'
   758  00FC8C  2E                 	db	46
   759  00FC8D  53                 	db	83	;'S'
   760  00FC8E  56                 	db	86	;'V'
   761  00FC8F  7C                 	db	124
   762  00FC90  39                 	db	57	;'9'
   763  00FC91  2E                 	db	46
   764  00FC92  42                 	db	66	;'B'
   765  00FC93  4C                 	db	76	;'L'
   766  00FC94  4B                 	db	75	;'K'
   767  00FC95  00                 	db	0
   768  00FC96                     STR_125:
   769  00FC96  45                 	db	69	;'E'
   770  00FC97  4C                 	db	76	;'L'
   771  00FC98  53                 	db	83	;'S'
   772  00FC99  45                 	db	69	;'E'
   773  00FC9A  20                 	db	32
   774  00FC9B  54                 	db	84	;'T'
   775  00FC9C  4F                 	db	79	;'O'
   776  00FC9D  47                 	db	71	;'G'
   777  00FC9E  47                 	db	71	;'G'
   778  00FC9F  4C                 	db	76	;'L'
   779  00FCA0  45                 	db	69	;'E'
   780  00FCA1  53                 	db	83	;'S'
   781  00FCA2  20                 	db	32
   782  00FCA3  41                 	db	65	;'A'
   783  00FCA4  52                 	db	82	;'R'
   784  00FCA5  4D                 	db	77	;'M'
   785  00FCA6  00                 	db	0
   786  00FCA7                     STR_110:
   787  00FCA7  54                 	db	84	;'T'
   788  00FCA8  53                 	db	83	;'S'
   789  00FCA9  54                 	db	84	;'T'
   790  00FCAA  3A                 	db	58	;':'
   791  00FCAB  20                 	db	32
   792  00FCAC  42                 	db	66	;'B'
   793  00FCAD  4F                 	db	79	;'O'
   794  00FCAE  54                 	db	84	;'T'
   795  00FCAF  48                 	db	72	;'H'
   796  00FCB0  20                 	db	32
   797  00FCB1  53                 	db	83	;'S'
   798  00FCB2  45                 	db	69	;'E'
   799  00FCB3  52                 	db	82	;'R'
   800  00FCB4  56                 	db	86	;'V'
   801  00FCB5  4F                 	db	79	;'O'
   802  00FCB6  53                 	db	83	;'S'
   803  00FCB7  00                 	db	0
   804  00FCB8                     STR_41:
   805  00FCB8  4C                 	db	76	;'L'
   806  00FCB9  4F                 	db	79	;'O'
   807  00FCBA  47                 	db	71	;'G'
   808  00FCBB  20                 	db	32
   809  00FCBC  31                 	db	49	;'1'
   810  00FCBD  20                 	db	32
   811  00FCBE  20                 	db	32
   812  00FCBF  20                 	db	32
   813  00FCC0  20                 	db	32
   814  00FCC1  20                 	db	32
   815  00FCC2  20                 	db	32
   816  00FCC3  20                 	db	32
   817  00FCC4  20                 	db	32
   818  00FCC5  20                 	db	32
   819  00FCC6  20                 	db	32
   820  00FCC7  20                 	db	32
   821  00FCC8  00                 	db	0
   822  00FCC9                     STR_40:
   823  00FCC9  4C                 	db	76	;'L'
   824  00FCCA  4F                 	db	79	;'O'
   825  00FCCB  47                 	db	71	;'G'
   826  00FCCC  20                 	db	32
   827  00FCCD  32                 	db	50	;'2'
   828  00FCCE  20                 	db	32
   829  00FCCF  20                 	db	32
   830  00FCD0  20                 	db	32
   831  00FCD1  20                 	db	32
   832  00FCD2  20                 	db	32
   833  00FCD3  20                 	db	32
   834  00FCD4  20                 	db	32
   835  00FCD5  20                 	db	32
   836  00FCD6  20                 	db	32
   837  00FCD7  20                 	db	32
   838  00FCD8  20                 	db	32
   839  00FCD9  00                 	db	0
   840  00FCDA                     STR_44:
   841  00FCDA  4C                 	db	76	;'L'
   842  00FCDB  4F                 	db	79	;'O'
   843  00FCDC  47                 	db	71	;'G'
   844  00FCDD  20                 	db	32
   845  00FCDE  33                 	db	51	;'3'
   846  00FCDF  20                 	db	32
   847  00FCE0  20                 	db	32
   848  00FCE1  20                 	db	32
   849  00FCE2  20                 	db	32
   850  00FCE3  20                 	db	32
   851  00FCE4  20                 	db	32
   852  00FCE5  20                 	db	32
   853  00FCE6  20                 	db	32
   854  00FCE7  20                 	db	32
   855  00FCE8  20                 	db	32
   856  00FCE9  20                 	db	32
   857  00FCEA  00                 	db	0
   858  00FCEB                     STR_48:
   859  00FCEB  4C                 	db	76	;'L'
   860  00FCEC  4F                 	db	79	;'O'
   861  00FCED  47                 	db	71	;'G'
   862  00FCEE  20                 	db	32
   863  00FCEF  34                 	db	52	;'4'
   864  00FCF0  20                 	db	32
   865  00FCF1  20                 	db	32
   866  00FCF2  20                 	db	32
   867  00FCF3  20                 	db	32
   868  00FCF4  20                 	db	32
   869  00FCF5  20                 	db	32
   870  00FCF6  20                 	db	32
   871  00FCF7  20                 	db	32
   872  00FCF8  20                 	db	32
   873  00FCF9  20                 	db	32
   874  00FCFA  20                 	db	32
   875  00FCFB  00                 	db	0
   876  00FCFC                     STR_36:
   877  00FCFC  33                 	db	51	;'3'
   878  00FCFD  2E                 	db	46
   879  00FCFE  20                 	db	32
   880  00FCFF  4C                 	db	76	;'L'
   881  00FD00  4F                 	db	79	;'O'
   882  00FD01  47                 	db	71	;'G'
   883  00FD02  53                 	db	83	;'S'
   884  00FD03  20                 	db	32
   885  00FD04  20                 	db	32
   886  00FD05  20                 	db	32
   887  00FD06  20                 	db	32
   888  00FD07  20                 	db	32
   889  00FD08  20                 	db	32
   890  00FD09  20                 	db	32
   891  00FD0A  20                 	db	32
   892  00FD0B  20                 	db	32
   893  00FD0C  00                 	db	0
   894  00FD0D                     STR_32:
   895  00FD0D  32                 	db	50	;'2'
   896  00FD0E  2E                 	db	46
   897  00FD0F  20                 	db	32
   898  00FD10  53                 	db	83	;'S'
   899  00FD11  4F                 	db	79	;'O'
   900  00FD12  52                 	db	82	;'R'
   901  00FD13  54                 	db	84	;'T'
   902  00FD14  20                 	db	32
   903  00FD15  20                 	db	32
   904  00FD16  20                 	db	32
   905  00FD17  20                 	db	32
   906  00FD18  20                 	db	32
   907  00FD19  20                 	db	32
   908  00FD1A  20                 	db	32
   909  00FD1B  20                 	db	32
   910  00FD1C  20                 	db	32
   911  00FD1D  00                 	db	0
   912  00FD1E                     STR_33:
   913  00FD1E  31                 	db	49	;'1'
   914  00FD1F  2E                 	db	46
   915  00FD20  20                 	db	32
   916  00FD21  44                 	db	68	;'D'
   917  00FD22  41                 	db	65	;'A'
   918  00FD23  54                 	db	84	;'T'
   919  00FD24  45                 	db	69	;'E'
   920  00FD25  2F                 	db	47
   921  00FD26  54                 	db	84	;'T'
   922  00FD27  49                 	db	73	;'I'
   923  00FD28  4D                 	db	77	;'M'
   924  00FD29  45                 	db	69	;'E'
   925  00FD2A  20                 	db	32
   926  00FD2B  20                 	db	32
   927  00FD2C  20                 	db	32
   928  00FD2D  20                 	db	32
   929  00FD2E  00                 	db	0
   930  00FD2F                     STR_24:
   931  00FD2F  20                 	db	32
   932  00FD30  2D                 	db	45
   933  00FD31  2D                 	db	45
   934  00FD32  20                 	db	32
   935  00FD33  50                 	db	80	;'P'
   936  00FD34  4F                 	db	79	;'O'
   937  00FD35  50                 	db	80	;'P'
   938  00FD36  20                 	db	32
   939  00FD37  20                 	db	32
   940  00FD38  43                 	db	67	;'C'
   941  00FD39  41                 	db	65	;'A'
   942  00FD3A  4E                 	db	78	;'N'
   943  00FD3B  20                 	db	32
   944  00FD3C  2D                 	db	45
   945  00FD3D  2D                 	db	45
   946  00FD3E  20                 	db	32
   947  00FD3F  00                 	db	0
   948  00FD40                     STR_26:
   949  00FD40  20                 	db	32
   950  00FD41  2D                 	db	45
   951  00FD42  2D                 	db	45
   952  00FD43  20                 	db	32
   953  00FD44  53                 	db	83	;'S'
   954  00FD45  4F                 	db	79	;'O'
   955  00FD46  55                 	db	85	;'U'
   956  00FD47  50                 	db	80	;'P'
   957  00FD48  20                 	db	32
   958  00FD49  43                 	db	67	;'C'
   959  00FD4A  41                 	db	65	;'A'
   960  00FD4B  4E                 	db	78	;'N'
   961  00FD4C  20                 	db	32
   962  00FD4D  2D                 	db	45
   963  00FD4E  2D                 	db	45
   964  00FD4F  20                 	db	32
   965  00FD50  00                 	db	0
   966  00FD51                     STR_28:
   967  00FD51  2D                 	db	45
   968  00FD52  2D                 	db	45
   969  00FD53  20                 	db	32
   970  00FD54  54                 	db	84	;'T'
   971  00FD55  4F                 	db	79	;'O'
   972  00FD56  54                 	db	84	;'T'
   973  00FD57  41                 	db	65	;'A'
   974  00FD58  4C                 	db	76	;'L'
   975  00FD59  20                 	db	32
   976  00FD5A  43                 	db	67	;'C'
   977  00FD5B  41                 	db	65	;'A'
   978  00FD5C  4E                 	db	78	;'N'
   979  00FD5D  53                 	db	83	;'S'
   980  00FD5E  20                 	db	32
   981  00FD5F  2D                 	db	45
   982  00FD60  2D                 	db	45
   983  00FD61  00                 	db	0
   984  00FD62                     STR_39:
   985  00FD62  4C                 	db	76	;'L'
   986  00FD63  4F                 	db	79	;'O'
   987  00FD64  47                 	db	71	;'G'
   988  00FD65  20                 	db	32
   989  00FD66  31                 	db	49	;'1'
   990  00FD67  20                 	db	32
   991  00FD68  20                 	db	32
   992  00FD69  20                 	db	32
   993  00FD6A  20                 	db	32
   994  00FD6B  20                 	db	32
   995  00FD6C  20                 	db	32
   996  00FD6D  20                 	db	32
   997  00FD6E  20                 	db	32
   998  00FD6F  20                 	db	32
   999  00FD70  20                 	db	32
  1000  00FD71  3C                 	db	60	;'<'
  1001  00FD72  00                 	db	0
  1002  00FD73                     STR_42:
  1003  00FD73  4C                 	db	76	;'L'
  1004  00FD74  4F                 	db	79	;'O'
  1005  00FD75  47                 	db	71	;'G'
  1006  00FD76  20                 	db	32
  1007  00FD77  32                 	db	50	;'2'
  1008  00FD78  20                 	db	32
  1009  00FD79  20                 	db	32
  1010  00FD7A  20                 	db	32
  1011  00FD7B  20                 	db	32
  1012  00FD7C  20                 	db	32
  1013  00FD7D  20                 	db	32
  1014  00FD7E  20                 	db	32
  1015  00FD7F  20                 	db	32
  1016  00FD80  20                 	db	32
  1017  00FD81  20                 	db	32
  1018  00FD82  3C                 	db	60	;'<'
  1019  00FD83  00                 	db	0
  1020  00FD84                     STR_46:
  1021  00FD84  4C                 	db	76	;'L'
  1022  00FD85  4F                 	db	79	;'O'
  1023  00FD86  47                 	db	71	;'G'
  1024  00FD87  20                 	db	32
  1025  00FD88  33                 	db	51	;'3'
  1026  00FD89  20                 	db	32
  1027  00FD8A  20                 	db	32
  1028  00FD8B  20                 	db	32
  1029  00FD8C  20                 	db	32
  1030  00FD8D  20                 	db	32
  1031  00FD8E  20                 	db	32
  1032  00FD8F  20                 	db	32
  1033  00FD90  20                 	db	32
  1034  00FD91  20                 	db	32
  1035  00FD92  20                 	db	32
  1036  00FD93  3C                 	db	60	;'<'
  1037  00FD94  00                 	db	0
  1038  00FD95                     STR_50:
  1039  00FD95  4C                 	db	76	;'L'
  1040  00FD96  4F                 	db	79	;'O'
  1041  00FD97  47                 	db	71	;'G'
  1042  00FD98  20                 	db	32
  1043  00FD99  34                 	db	52	;'4'
  1044  00FD9A  20                 	db	32
  1045  00FD9B  20                 	db	32
  1046  00FD9C  20                 	db	32
  1047  00FD9D  20                 	db	32
  1048  00FD9E  20                 	db	32
  1049  00FD9F  20                 	db	32
  1050  00FDA0  20                 	db	32
  1051  00FDA1  20                 	db	32
  1052  00FDA2  20                 	db	32
  1053  00FDA3  20                 	db	32
  1054  00FDA4  3C                 	db	60	;'<'
  1055  00FDA5  00                 	db	0
  1056  00FDA6                     STR_38:
  1057  00FDA6  33                 	db	51	;'3'
  1058  00FDA7  2E                 	db	46
  1059  00FDA8  20                 	db	32
  1060  00FDA9  4C                 	db	76	;'L'
  1061  00FDAA  4F                 	db	79	;'O'
  1062  00FDAB  47                 	db	71	;'G'
  1063  00FDAC  53                 	db	83	;'S'
  1064  00FDAD  20                 	db	32
  1065  00FDAE  20                 	db	32
  1066  00FDAF  20                 	db	32
  1067  00FDB0  20                 	db	32
  1068  00FDB1  20                 	db	32
  1069  00FDB2  20                 	db	32
  1070  00FDB3  20                 	db	32
  1071  00FDB4  20                 	db	32
  1072  00FDB5  3C                 	db	60	;'<'
  1073  00FDB6  00                 	db	0
  1074  00FDB7                     STR_34:
  1075  00FDB7  32                 	db	50	;'2'
  1076  00FDB8  2E                 	db	46
  1077  00FDB9  20                 	db	32
  1078  00FDBA  53                 	db	83	;'S'
  1079  00FDBB  4F                 	db	79	;'O'
  1080  00FDBC  52                 	db	82	;'R'
  1081  00FDBD  54                 	db	84	;'T'
  1082  00FDBE  20                 	db	32
  1083  00FDBF  20                 	db	32
  1084  00FDC0  20                 	db	32
  1085  00FDC1  20                 	db	32
  1086  00FDC2  20                 	db	32
  1087  00FDC3  20                 	db	32
  1088  00FDC4  20                 	db	32
  1089  00FDC5  20                 	db	32
  1090  00FDC6  3C                 	db	60	;'<'
  1091  00FDC7  00                 	db	0
  1092  00FDC8                     STR_31:
  1093  00FDC8  31                 	db	49	;'1'
  1094  00FDC9  2E                 	db	46
  1095  00FDCA  20                 	db	32
  1096  00FDCB  44                 	db	68	;'D'
  1097  00FDCC  41                 	db	65	;'A'
  1098  00FDCD  54                 	db	84	;'T'
  1099  00FDCE  45                 	db	69	;'E'
  1100  00FDCF  2F                 	db	47
  1101  00FDD0  54                 	db	84	;'T'
  1102  00FDD1  49                 	db	73	;'I'
  1103  00FDD2  4D                 	db	77	;'M'
  1104  00FDD3  45                 	db	69	;'E'
  1105  00FDD4  20                 	db	32
  1106  00FDD5  20                 	db	32
  1107  00FDD6  20                 	db	32
  1108  00FDD7  3C                 	db	60	;'<'
  1109  00FDD8  00                 	db	0
  1110  00FDD9                     STR_6:
  1111  00FDD9  50                 	db	80	;'P'
  1112  00FDDA  41                 	db	65	;'A'
  1113  00FDDB  55                 	db	85	;'U'
  1114  00FDDC  53                 	db	83	;'S'
  1115  00FDDD  45                 	db	69	;'E'
  1116  00FDDE  20                 	db	32
  1117  00FDDF  3C                 	db	60	;'<'
  1118  00FDE0  20                 	db	32
  1119  00FDE1  7C                 	db	124
  1120  00FDE2  20                 	db	32
  1121  00FDE3  42                 	db	66	;'B'
  1122  00FDE4  41                 	db	65	;'A'
  1123  00FDE5  43                 	db	67	;'C'
  1124  00FDE6  4B                 	db	75	;'K'
  1125  00FDE7  20                 	db	32
  1126  00FDE8  3E                 	db	62	;'>'
  1127  00FDE9  00                 	db	0
  1128  00FDEA                     STR_30:
  1129  00FDEA  50                 	db	80	;'P'
  1130  00FDEB  55                 	db	85	;'U'
  1131  00FDEC  53                 	db	83	;'S'
  1132  00FDED  48                 	db	72	;'H'
  1133  00FDEE  20                 	db	32
  1134  00FDEF  54                 	db	84	;'T'
  1135  00FDF0  4F                 	db	79	;'O'
  1136  00FDF1  20                 	db	32
  1137  00FDF2  43                 	db	67	;'C'
  1138  00FDF3  4F                 	db	79	;'O'
  1139  00FDF4  4E                 	db	78	;'N'
  1140  00FDF5  54                 	db	84	;'T'
  1141  00FDF6  49                 	db	73	;'I'
  1142  00FDF7  4E                 	db	78	;'N'
  1143  00FDF8  55                 	db	85	;'U'
  1144  00FDF9  45                 	db	69	;'E'
  1145  00FDFA  00                 	db	0
  1146  00FDFB                     STR_27:
  1147  00FDFB  4E                 	db	78	;'N'
  1148  00FDFC  4C                 	db	76	;'L'
  1149  00FDFD  41                 	db	65	;'A'
  1150  00FDFE  42                 	db	66	;'B'
  1151  00FDFF  3A                 	db	58	;':'
  1152  00FE00  20                 	db	32
  1153  00FE01  25                 	db	37
  1154  00FE02  64                 	db	100	;'d'
  1155  00FE03  7C                 	db	124
  1156  00FE04  4C                 	db	76	;'L'
  1157  00FE05  41                 	db	65	;'A'
  1158  00FE06  42                 	db	66	;'B'
  1159  00FE07  3A                 	db	58	;':'
  1160  00FE08  20                 	db	32
  1161  00FE09  25                 	db	37
  1162  00FE0A  64                 	db	100	;'d'
  1163  00FE0B  00                 	db	0
  1164  00FE0C                     STR_25:
  1165  00FE0C  4E                 	db	78	;'N'
  1166  00FE0D  54                 	db	84	;'T'
  1167  00FE0E  41                 	db	65	;'A'
  1168  00FE0F  42                 	db	66	;'B'
  1169  00FE10  3A                 	db	58	;':'
  1170  00FE11  20                 	db	32
  1171  00FE12  25                 	db	37
  1172  00FE13  64                 	db	100	;'d'
  1173  00FE14  7C                 	db	124
  1174  00FE15  54                 	db	84	;'T'
  1175  00FE16  41                 	db	65	;'A'
  1176  00FE17  42                 	db	66	;'B'
  1177  00FE18  3A                 	db	58	;':'
  1178  00FE19  20                 	db	32
  1179  00FE1A  25                 	db	37
  1180  00FE1B  64                 	db	100	;'d'
  1181  00FE1C  00                 	db	0
  1182  00FE1D                     STR_83:
  1183  00FE1D  4D                 	db	77	;'M'
  1184  00FE1E  41                 	db	65	;'A'
  1185  00FE1F  47                 	db	71	;'G'
  1186  00FE20  5F                 	db	95	;'_'
  1187  00FE21  73                 	db	115	;'s'
  1188  00FE22  69                 	db	105	;'i'
  1189  00FE23  67                 	db	103	;'g'
  1190  00FE24  6E                 	db	110	;'n'
  1191  00FE25  61                 	db	97	;'a'
  1192  00FE26  6C                 	db	108	;'l'
  1193  00FE27  3A                 	db	58	;':'
  1194  00FE28  20                 	db	32
  1195  00FE29  25                 	db	37
  1196  00FE2A  64                 	db	100	;'d'
  1197  00FE2B  20                 	db	32
  1198  00FE2C  00                 	db	0
  1199  00FE2D                     STR_103:
  1200  00FE2D  54                 	db	84	;'T'
  1201  00FE2E  53                 	db	83	;'S'
  1202  00FE2F  54                 	db	84	;'T'
  1203  00FE30  3A                 	db	58	;':'
  1204  00FE31  20                 	db	32
  1205  00FE32  54                 	db	84	;'T'
  1206  00FE33  49                 	db	73	;'I'
  1207  00FE34  4C                 	db	76	;'L'
  1208  00FE35  54                 	db	84	;'T'
  1209  00FE36  20                 	db	32
  1210  00FE37  53                 	db	83	;'S'
  1211  00FE38  45                 	db	69	;'E'
  1212  00FE39  52                 	db	82	;'R'
  1213  00FE3A  56                 	db	86	;'V'
  1214  00FE3B  4F                 	db	79	;'O'
  1215  00FE3C  00                 	db	0
  1216  00FE3D                     STR_64:
  1217  00FE3D  53                 	db	83	;'S'
  1218  00FE3E  4F                 	db	79	;'O'
  1219  00FE3F  52                 	db	82	;'R'
  1220  00FE40  54                 	db	84	;'T'
  1221  00FE41  49                 	db	73	;'I'
  1222  00FE42  4E                 	db	78	;'N'
  1223  00FE43  47                 	db	71	;'G'
  1224  00FE44  2E                 	db	46
  1225  00FE45  2E                 	db	46
  1226  00FE46  2E                 	db	46
  1227  00FE47  20                 	db	32
  1228  00FE48  20                 	db	32
  1229  00FE49  20                 	db	32
  1230  00FE4A  20                 	db	32
  1231  00FE4B  20                 	db	32
  1232  00FE4C  00                 	db	0
  1233  00FE4D                     STR_65:
  1234  00FE4D  54                 	db	84	;'T'
  1235  00FE4E  49                 	db	73	;'I'
  1236  00FE4F  4D                 	db	77	;'M'
  1237  00FE50  45                 	db	69	;'E'
  1238  00FE51  20                 	db	32
  1239  00FE52  25                 	db	37
  1240  00FE53  64                 	db	100	;'d'
  1241  00FE54  3A                 	db	58	;':'
  1242  00FE55  25                 	db	37
  1243  00FE56  30                 	db	48	;'0'
  1244  00FE57  32                 	db	50	;'2'
  1245  00FE58  64                 	db	100	;'d'
  1246  00FE59  20                 	db	32
  1247  00FE5A  20                 	db	32
  1248  00FE5B  20                 	db	32
  1249  00FE5C  00                 	db	0
  1250  00FE5D                     STR_4:
  1251  00FE5D  44                 	db	68	;'D'
  1252  00FE5E  49                 	db	73	;'I'
  1253  00FE5F  44                 	db	68	;'D'
  1254  00FE60  4E                 	db	78	;'N'
  1255  00FE61  27                 	db	39
  1256  00FE62  54                 	db	84	;'T'
  1257  00FE63  20                 	db	32
  1258  00FE64  43                 	db	67	;'C'
  1259  00FE65  4F                 	db	79	;'O'
  1260  00FE66  4D                 	db	77	;'M'
  1261  00FE67  50                 	db	80	;'P'
  1262  00FE68  4C                 	db	76	;'L'
  1263  00FE69  45                 	db	69	;'E'
  1264  00FE6A  54                 	db	84	;'T'
  1265  00FE6B  45                 	db	69	;'E'
  1266  00FE6C  00                 	db	0
  1267  00FE6D                     STR_120:
  1268  00FE6D  44                 	db	68	;'D'
  1269  00FE6E  3A                 	db	58	;':'
  1270  00FE6F  52                 	db	82	;'R'
  1271  00FE70  45                 	db	69	;'E'
  1272  00FE71  54                 	db	84	;'T'
  1273  00FE72  7C                 	db	124
  1274  00FE73  32                 	db	50	;'2'
  1275  00FE74  3A                 	db	58	;':'
  1276  00FE75  43                 	db	67	;'C'
  1277  00FE76  20                 	db	32
  1278  00FE77  25                 	db	37
  1279  00FE78  64                 	db	100	;'d'
  1280  00FE79  20                 	db	32
  1281  00FE7A  20                 	db	32
  1282  00FE7B  00                 	db	0
  1283  00FE7C                     STR_80:
  1284  00FE7C  49                 	db	73	;'I'
  1285  00FE7D  52                 	db	82	;'R'
  1286  00FE7E  5F                 	db	95	;'_'
  1287  00FE7F  73                 	db	115	;'s'
  1288  00FE80  69                 	db	105	;'i'
  1289  00FE81  67                 	db	103	;'g'
  1290  00FE82  6E                 	db	110	;'n'
  1291  00FE83  61                 	db	97	;'a'
  1292  00FE84  6C                 	db	108	;'l'
  1293  00FE85  3A                 	db	58	;':'
  1294  00FE86  20                 	db	32
  1295  00FE87  25                 	db	37
  1296  00FE88  64                 	db	100	;'d'
  1297  00FE89  20                 	db	32
  1298  00FE8A  00                 	db	0
  1299  00FE8B                     STR_109:
  1300  00FE8B  43                 	db	67	;'C'
  1301  00FE8C  41                 	db	65	;'A'
  1302  00FE8D  4D                 	db	77	;'M'
  1303  00FE8E  20                 	db	32
  1304  00FE8F  44                 	db	68	;'D'
  1305  00FE90  57                 	db	87	;'W'
  1306  00FE91  4E                 	db	78	;'N'
  1307  00FE92  20                 	db	32
  1308  00FE93  7C                 	db	124
  1309  00FE94  52                 	db	82	;'R'
  1310  00FE95  43                 	db	67	;'C'
  1311  00FE96  30                 	db	48	;'0'
  1312  00FE97  3D                 	db	61	;'='
  1313  00FE98  30                 	db	48	;'0'
  1314  00FE99  00                 	db	0
  1315  00FE9A                     STR_108:
  1316  00FE9A  43                 	db	67	;'C'
  1317  00FE9B  41                 	db	65	;'A'
  1318  00FE9C  4D                 	db	77	;'M'
  1319  00FE9D  20                 	db	32
  1320  00FE9E  55                 	db	85	;'U'
  1321  00FE9F  50                 	db	80	;'P'
  1322  00FEA0  20                 	db	32
  1323  00FEA1  20                 	db	32
  1324  00FEA2  7C                 	db	124
  1325  00FEA3  52                 	db	82	;'R'
  1326  00FEA4  43                 	db	67	;'C'
  1327  00FEA5  30                 	db	48	;'0'
  1328  00FEA6  3D                 	db	61	;'='
  1329  00FEA7  31                 	db	49	;'1'
  1330  00FEA8  00                 	db	0
  1331  00FEA9                     STR_82:
  1332  00FEA9  54                 	db	84	;'T'
  1333  00FEAA  53                 	db	83	;'S'
  1334  00FEAB  54                 	db	84	;'T'
  1335  00FEAC  3A                 	db	58	;':'
  1336  00FEAD  20                 	db	32
  1337  00FEAE  4D                 	db	77	;'M'
  1338  00FEAF  41                 	db	65	;'A'
  1339  00FEB0  47                 	db	71	;'G'
  1340  00FEB1  4E                 	db	78	;'N'
  1341  00FEB2  45                 	db	69	;'E'
  1342  00FEB3  54                 	db	84	;'T'
  1343  00FEB4  49                 	db	73	;'I'
  1344  00FEB5  53                 	db	83	;'S'
  1345  00FEB6  4D                 	db	77	;'M'
  1346  00FEB7  00                 	db	0
  1347  00FEB8                     STR_107:
  1348  00FEB8  54                 	db	84	;'T'
  1349  00FEB9  53                 	db	83	;'S'
  1350  00FEBA  54                 	db	84	;'T'
  1351  00FEBB  3A                 	db	58	;':'
  1352  00FEBC  20                 	db	32
  1353  00FEBD  43                 	db	67	;'C'
  1354  00FEBE  41                 	db	65	;'A'
  1355  00FEBF  4D                 	db	77	;'M'
  1356  00FEC0  20                 	db	32
  1357  00FEC1  53                 	db	83	;'S'
  1358  00FEC2  45                 	db	69	;'E'
  1359  00FEC3  52                 	db	82	;'R'
  1360  00FEC4  56                 	db	86	;'V'
  1361  00FEC5  4F                 	db	79	;'O'
  1362  00FEC6  00                 	db	0
  1363  00FEC7                     STR_96:
  1364  00FEC7  54                 	db	84	;'T'
  1365  00FEC8  53                 	db	83	;'S'
  1366  00FEC9  54                 	db	84	;'T'
  1367  00FECA  3A                 	db	58	;':'
  1368  00FECB  20                 	db	32
  1369  00FECC  50                 	db	80	;'P'
  1370  00FECD  41                 	db	65	;'A'
  1371  00FECE  4E                 	db	78	;'N'
  1372  00FECF  20                 	db	32
  1373  00FED0  53                 	db	83	;'S'
  1374  00FED1  45                 	db	69	;'E'
  1375  00FED2  52                 	db	82	;'R'
  1376  00FED3  56                 	db	86	;'V'
  1377  00FED4  4F                 	db	79	;'O'
  1378  00FED5  00                 	db	0
  1379  00FED6                     STR_75:
  1380  00FED6  41                 	db	65	;'A'
  1381  00FED7  4C                 	db	76	;'L'
  1382  00FED8  47                 	db	71	;'G'
  1383  00FED9  34                 	db	52	;'4'
  1384  00FEDA  3A                 	db	58	;':'
  1385  00FEDB  20                 	db	32
  1386  00FEDC  41                 	db	65	;'A'
  1387  00FEDD  4C                 	db	76	;'L'
  1388  00FEDE  4C                 	db	76	;'L'
  1389  00FEDF  20                 	db	32
  1390  00FEE0  43                 	db	67	;'C'
  1391  00FEE1  41                 	db	65	;'A'
  1392  00FEE2  4E                 	db	78	;'N'
  1393  00FEE3  53                 	db	83	;'S'
  1394  00FEE4  00                 	db	0
  1395  00FEE5                     STR_90:
  1396  00FEE5  54                 	db	84	;'T'
  1397  00FEE6  53                 	db	83	;'S'
  1398  00FEE7  54                 	db	84	;'T'
  1399  00FEE8  3A                 	db	58	;':'
  1400  00FEE9  20                 	db	32
  1401  00FEEA  44                 	db	68	;'D'
  1402  00FEEB  43                 	db	67	;'C'
  1403  00FEEC  20                 	db	32
  1404  00FEED  4D                 	db	77	;'M'
  1405  00FEEE  4F                 	db	79	;'O'
  1406  00FEEF  54                 	db	84	;'T'
  1407  00FEF0  4F                 	db	79	;'O'
  1408  00FEF1  52                 	db	82	;'R'
  1409  00FEF2  53                 	db	83	;'S'
  1410  00FEF3  00                 	db	0
  1411  00FEF4                     STR_70:
  1412  00FEF4  41                 	db	65	;'A'
  1413  00FEF5  4C                 	db	76	;'L'
  1414  00FEF6  47                 	db	71	;'G'
  1415  00FEF7  4F                 	db	79	;'O'
  1416  00FEF8  52                 	db	82	;'R'
  1417  00FEF9  49                 	db	73	;'I'
  1418  00FEFA  54                 	db	84	;'T'
  1419  00FEFB  48                 	db	72	;'H'
  1420  00FEFC  4D                 	db	77	;'M'
  1421  00FEFD  20                 	db	32
  1422  00FEFE  54                 	db	84	;'T'
  1423  00FEFF  45                 	db	69	;'E'
  1424  00FF00  53                 	db	83	;'S'
  1425  00FF01  54                 	db	84	;'T'
  1426  00FF02  00                 	db	0
  1427  00FF03                     STR_91:
  1428  00FF03  50                 	db	80	;'P'
  1429  00FF04  49                 	db	73	;'I'
  1430  00FF05  4E                 	db	78	;'N'
  1431  00FF06  20                 	db	32
  1432  00FF07  52                 	db	82	;'R'
  1433  00FF08  41                 	db	65	;'A'
  1434  00FF09  35                 	db	53	;'5'
  1435  00FF0A  20                 	db	32
  1436  00FF0B  48                 	db	72	;'H'
  1437  00FF0C  49                 	db	73	;'I'
  1438  00FF0D  47                 	db	71	;'G'
  1439  00FF0E  48                 	db	72	;'H'
  1440  00FF0F  2E                 	db	46
  1441  00FF10  00                 	db	0
  1442  00FF11                     STR_73:
  1443  00FF11  41                 	db	65	;'A'
  1444  00FF12  4C                 	db	76	;'L'
  1445  00FF13  47                 	db	71	;'G'
  1446  00FF14  32                 	db	50	;'2'
  1447  00FF15  3A                 	db	58	;':'
  1448  00FF16  20                 	db	32
  1449  00FF17  31                 	db	49	;'1'
  1450  00FF18  32                 	db	50	;'2'
  1451  00FF19  20                 	db	32
  1452  00FF1A  43                 	db	67	;'C'
  1453  00FF1B  41                 	db	65	;'A'
  1454  00FF1C  4E                 	db	78	;'N'
  1455  00FF1D  53                 	db	83	;'S'
  1456  00FF1E  00                 	db	0
  1457  00FF1F                     STR_76:
  1458  00FF1F  41                 	db	65	;'A'
  1459  00FF20  4C                 	db	76	;'L'
  1460  00FF21  47                 	db	71	;'G'
  1461  00FF22  35                 	db	53	;'5'
  1462  00FF23  3A                 	db	58	;':'
  1463  00FF24  20                 	db	32
  1464  00FF25  4E                 	db	78	;'N'
  1465  00FF26  4F                 	db	79	;'O'
  1466  00FF27  20                 	db	32
  1467  00FF28  43                 	db	67	;'C'
  1468  00FF29  41                 	db	65	;'A'
  1469  00FF2A  4E                 	db	78	;'N'
  1470  00FF2B  53                 	db	83	;'S'
  1471  00FF2C  00                 	db	0
  1472  00FF2D                     STR_71:
  1473  00FF2D  50                 	db	80	;'P'
  1474  00FF2E  55                 	db	85	;'U'
  1475  00FF2F  53                 	db	83	;'S'
  1476  00FF30  48                 	db	72	;'H'
  1477  00FF31  20                 	db	32
  1478  00FF32  54                 	db	84	;'T'
  1479  00FF33  4F                 	db	79	;'O'
  1480  00FF34  20                 	db	32
  1481  00FF35  53                 	db	83	;'S'
  1482  00FF36  54                 	db	84	;'T'
  1483  00FF37  41                 	db	65	;'A'
  1484  00FF38  52                 	db	82	;'R'
  1485  00FF39  54                 	db	84	;'T'
  1486  00FF3A  00                 	db	0
  1487  00FF3B                     STR_23:
  1488  00FF3B  25                 	db	37
  1489  00FF3C  64                 	db	100	;'d'
  1490  00FF3D  20                 	db	32
  1491  00FF3E  4D                 	db	77	;'M'
  1492  00FF3F  49                 	db	73	;'I'
  1493  00FF40  4E                 	db	78	;'N'
  1494  00FF41  20                 	db	32
  1495  00FF42  25                 	db	37
  1496  00FF43  64                 	db	100	;'d'
  1497  00FF44  20                 	db	32
  1498  00FF45  53                 	db	83	;'S'
  1499  00FF46  45                 	db	69	;'E'
  1500  00FF47  43                 	db	67	;'C'
  1501  00FF48  00                 	db	0
  1502  00FF49                     STR_2:
  1503  00FF49  54                 	db	84	;'T'
  1504  00FF4A  49                 	db	73	;'I'
  1505  00FF4B  4D                 	db	77	;'M'
  1506  00FF4C  45                 	db	69	;'E'
  1507  00FF4D  3A                 	db	58	;':'
  1508  00FF4E  20                 	db	32
  1509  00FF4F  25                 	db	37
  1510  00FF50  64                 	db	100	;'d'
  1511  00FF51  3A                 	db	58	;':'
  1512  00FF52  25                 	db	37
  1513  00FF53  30                 	db	48	;'0'
  1514  00FF54  32                 	db	50	;'2'
  1515  00FF55  64                 	db	100	;'d'
  1516  00FF56  00                 	db	0
  1517  00FF57                     STR_79:
  1518  00FF57  54                 	db	84	;'T'
  1519  00FF58  53                 	db	83	;'S'
  1520  00FF59  54                 	db	84	;'T'
  1521  00FF5A  3A                 	db	58	;':'
  1522  00FF5B  20                 	db	32
  1523  00FF5C  49                 	db	73	;'I'
  1524  00FF5D  52                 	db	82	;'R'
  1525  00FF5E  20                 	db	32
  1526  00FF5F  53                 	db	83	;'S'
  1527  00FF60  4E                 	db	78	;'N'
  1528  00FF61  53                 	db	83	;'S'
  1529  00FF62  52                 	db	82	;'R'
  1530  00FF63  00                 	db	0
  1531  00FF64                     STR_74:
  1532  00FF64  41                 	db	65	;'A'
  1533  00FF65  4C                 	db	76	;'L'
  1534  00FF66  47                 	db	71	;'G'
  1535  00FF67  33                 	db	51	;'3'
  1536  00FF68  3A                 	db	58	;':'
  1537  00FF69  20                 	db	32
  1538  00FF6A  31                 	db	49	;'1'
  1539  00FF6B  20                 	db	32
  1540  00FF6C  43                 	db	67	;'C'
  1541  00FF6D  41                 	db	65	;'A'
  1542  00FF6E  4E                 	db	78	;'N'
  1543  00FF6F  00                 	db	0
  1544  00FF70                     STR_93:
  1545  00FF70  50                 	db	80	;'P'
  1546  00FF71  49                 	db	73	;'I'
  1547  00FF72  4E                 	db	78	;'N'
  1548  00FF73  20                 	db	32
  1549  00FF74  52                 	db	82	;'R'
  1550  00FF75  41                 	db	65	;'A'
  1551  00FF76  33                 	db	51	;'3'
  1552  00FF77  2E                 	db	46
  1553  00FF78  2E                 	db	46
  1554  00FF79  2E                 	db	46
  1555  00FF7A  00                 	db	0
  1556  00FF7B                     STR_95:
  1557  00FF7B  50                 	db	80	;'P'
  1558  00FF7C  49                 	db	73	;'I'
  1559  00FF7D  4E                 	db	78	;'N'
  1560  00FF7E  20                 	db	32
  1561  00FF7F  52                 	db	82	;'R'
  1562  00FF80  41                 	db	65	;'A'
  1563  00FF81  34                 	db	52	;'4'
  1564  00FF82  2E                 	db	46
  1565  00FF83  2E                 	db	46
  1566  00FF84  2E                 	db	46
  1567  00FF85  00                 	db	0
  1568  00FF86                     STR_84:
  1569  00FF86  54                 	db	84	;'T'
  1570  00FF87  53                 	db	83	;'S'
  1571  00FF88  54                 	db	84	;'T'
  1572  00FF89  3A                 	db	58	;':'
  1573  00FF8A  20                 	db	32
  1574  00FF8B  43                 	db	67	;'C'
  1575  00FF8C  4F                 	db	79	;'O'
  1576  00FF8D  4E                 	db	78	;'N'
  1577  00FF8E  44                 	db	68	;'D'
  1578  00FF8F  00                 	db	0
  1579  00FF90                     STR_88:
  1580  00FF90  41                 	db	65	;'A'
  1581  00FF91  43                 	db	67	;'C'
  1582  00FF92  54                 	db	84	;'T'
  1583  00FF93  55                 	db	85	;'U'
  1584  00FF94  41                 	db	65	;'A'
  1585  00FF95  54                 	db	84	;'T'
  1586  00FF96  4F                 	db	79	;'O'
  1587  00FF97  52                 	db	82	;'R'
  1588  00FF98  53                 	db	83	;'S'
  1589  00FF99  00                 	db	0
  1590  00FF9A                     STR_22:
  1591  00FF9A  44                 	db	68	;'D'
  1592  00FF9B  55                 	db	85	;'U'
  1593  00FF9C  52                 	db	82	;'R'
  1594  00FF9D  41                 	db	65	;'A'
  1595  00FF9E  54                 	db	84	;'T'
  1596  00FF9F  49                 	db	73	;'I'
  1597  00FFA0  4F                 	db	79	;'O'
  1598  00FFA1  4E                 	db	78	;'N'
  1599  00FFA2  3A                 	db	58	;':'
  1600  00FFA3  00                 	db	0
  1601  00FFA4                     STR_86:
  1602  00FFA4  43                 	db	67	;'C'
  1603  00FFA5  4F                 	db	79	;'O'
  1604  00FFA6  4E                 	db	78	;'N'
  1605  00FFA7  44                 	db	68	;'D'
  1606  00FFA8  3A                 	db	58	;':'
  1607  00FFA9  20                 	db	32
  1608  00FFAA  25                 	db	37
  1609  00FFAB  64                 	db	100	;'d'
  1610  00FFAC  00                 	db	0
  1611  00FFAD                     STR_77:
  1612  00FFAD  53                 	db	83	;'S'
  1613  00FFAE  45                 	db	69	;'E'
  1614  00FFAF  4E                 	db	78	;'N'
  1615  00FFB0  53                 	db	83	;'S'
  1616  00FFB1  4F                 	db	79	;'O'
  1617  00FFB2  52                 	db	82	;'R'
  1618  00FFB3  53                 	db	83	;'S'
  1619  00FFB4  00                 	db	0
  1620  00FFB5                     STR_128:
  1621  00FFB5  28                 	db	40
  1622  00FFB6  6E                 	db	110	;'n'
  1623  00FFB7  75                 	db	117	;'u'
  1624  00FFB8  6C                 	db	108	;'l'
  1625  00FFB9  6C                 	db	108	;'l'
  1626  00FFBA  29                 	db	41
  1627  00FFBB  00                 	db	0
  1628  00FFBC                     STR_67:
  1629  00FFBC  46                 	db	70	;'F'
  1630  00FFBD  41                 	db	65	;'A'
  1631  00FFBE  49                 	db	73	;'I'
  1632  00FFBF  4C                 	db	76	;'L'
  1633  00FFC0  45                 	db	69	;'E'
  1634  00FFC1  44                 	db	68	;'D'
  1635  00FFC2  00                 	db	0
  1636  00FFC3                     STR_7:
  1637  00FFC3  53                 	db	83	;'S'
  1638  00FFC4  54                 	db	84	;'T'
  1639  00FFC5  41                 	db	65	;'A'
  1640  00FFC6  52                 	db	82	;'R'
  1641  00FFC7  54                 	db	84	;'T'
  1642  00FFC8  3A                 	db	58	;':'
  1643  00FFC9  00                 	db	0
  1644  00FFCA                     STR_9:
  1645  00FFCA  46                 	db	70	;'F'
  1646  00FFCB  45                 	db	69	;'E'
  1647  00FFCC  42                 	db	66	;'B'
  1648  00FFCD  00                 	db	0
  1649  00FFCE                     STR_19:
  1650  00FFCE  44                 	db	68	;'D'
  1651  00FFCF  45                 	db	69	;'E'
  1652  00FFD0  43                 	db	67	;'C'
  1653  00FFD1  00                 	db	0
  1654  00FFD2                     STR_15:
  1655  00FFD2  41                 	db	65	;'A'
  1656  00FFD3  55                 	db	85	;'U'
  1657  00FFD4  47                 	db	71	;'G'
  1658  00FFD5  00                 	db	0
  1659  00FFD6                     STR_14:
  1660  00FFD6  4A                 	db	74	;'J'
  1661  00FFD7  55                 	db	85	;'U'
  1662  00FFD8  4C                 	db	76	;'L'
  1663  00FFD9  00                 	db	0
  1664  00FFDA                     STR_8:
  1665  00FFDA  4A                 	db	74	;'J'
  1666  00FFDB  41                 	db	65	;'A'
  1667  00FFDC  4E                 	db	78	;'N'
  1668  00FFDD  00                 	db	0
  1669  00FFDE                     STR_13:
  1670  00FFDE  4A                 	db	74	;'J'
  1671  00FFDF  55                 	db	85	;'U'
  1672  00FFE0  4E                 	db	78	;'N'
  1673  00FFE1  00                 	db	0
  1674  00FFE2                     STR_16:
  1675  00FFE2  53                 	db	83	;'S'
  1676  00FFE3  45                 	db	69	;'E'
  1677  00FFE4  50                 	db	80	;'P'
  1678  00FFE5  00                 	db	0
  1679  00FFE6                     STR_10:
  1680  00FFE6  4D                 	db	77	;'M'
  1681  00FFE7  41                 	db	65	;'A'
  1682  00FFE8  52                 	db	82	;'R'
  1683  00FFE9  00                 	db	0
  1684  00FFEA                     STR_11:
  1685  00FFEA  41                 	db	65	;'A'
  1686  00FFEB  50                 	db	80	;'P'
  1687  00FFEC  52                 	db	82	;'R'
  1688  00FFED  00                 	db	0
  1689  00FFEE                     STR_20:
  1690  00FFEE  45                 	db	69	;'E'
  1691  00FFEF  52                 	db	82	;'R'
  1692  00FFF0  52                 	db	82	;'R'
  1693  00FFF1  00                 	db	0
  1694  00FFF2                     STR_17:
  1695  00FFF2  4F                 	db	79	;'O'
  1696  00FFF3  43                 	db	67	;'C'
  1697  00FFF4  54                 	db	84	;'T'
  1698  00FFF5  00                 	db	0
  1699  00FFF6                     STR_18:
  1700  00FFF6  4E                 	db	78	;'N'
  1701  00FFF7  4F                 	db	79	;'O'
  1702  00FFF8  56                 	db	86	;'V'
  1703  00FFF9  00                 	db	0
  1704  00FFFA                     STR_12:
  1705  00FFFA  4D                 	db	77	;'M'
  1706  00FFFB  41                 	db	65	;'A'
  1707  00FFFC  59                 	db	89	;'Y'
  1708  00FFFD  00                 	db	0
  1709  0000                     
  1710                           ; #config settings
  1711  00FFFE  00                 	db	0	; dummy byte at the end
  1712  0000                     
  1713                           	psect	cinit
  1714  005558                     __pcinit:
  1715                           	opt stack 0
  1716  005558                     start_initialization:
  1717                           	opt stack 0
  1718  005558                     __initialization:
  1719                           	opt stack 0
  1720                           
  1721                           ; Initialize objects allocated to BANK1 (8 bytes)
  1722                           ; load TBLPTR registers with __pidataBANK1
  1723  005558  0E9E               	movlw	low __pidataBANK1
  1724  00555A  6EF6               	movwf	tblptrl,c
  1725  00555C  0E5D               	movlw	high __pidataBANK1
  1726  00555E  6EF7               	movwf	tblptrh,c
  1727  005560  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1728  005562  6EF8               	movwf	tblptru,c
  1729  005564  EE01  F04D         	lfsr	0,__pdataBANK1
  1730  005568  EE10 F008          	lfsr	1,8
  1731  00556C                     copy_data0:
  1732  00556C  0009               	tblrd		*+
  1733  00556E  CFF5 FFEE          	movff	tablat,postinc0
  1734  005572  50E5               	movf	postdec1,w,c
  1735  005574  50E1               	movf	fsr1l,w,c
  1736  005576  E1FA               	bnz	copy_data0
  1737                           
  1738                           ; Clear objects allocated to BANK1 (77 bytes)
  1739  005578  EE01  F000         	lfsr	0,__pbssBANK1
  1740  00557C  0E4D               	movlw	77
  1741  00557E                     clear_0:
  1742  00557E  6AEE               	clrf	postinc0,c
  1743  005580  06E8               	decf	wreg,f,c
  1744  005582  E1FD               	bnz	clear_0
  1745                           
  1746                           ; Clear objects allocated to BANK0 (38 bytes)
  1747  005584  EE00  F0DA         	lfsr	0,__pbssBANK0
  1748  005588  0E26               	movlw	38
  1749  00558A                     clear_1:
  1750  00558A  6AEE               	clrf	postinc0,c
  1751  00558C  06E8               	decf	wreg,f,c
  1752  00558E  E1FD               	bnz	clear_1
  1753                           
  1754                           ; Clear objects allocated to COMRAM (35 bytes)
  1755  005590  EE00  F05B         	lfsr	0,__pbssCOMRAM
  1756  005594  0E23               	movlw	35
  1757  005596                     clear_2:
  1758  005596  6AEE               	clrf	postinc0,c
  1759  005598  06E8               	decf	wreg,f,c
  1760  00559A  E1FD               	bnz	clear_2
  1761  00559C                     end_of_initialization:
  1762                           	opt stack 0
  1763  00559C                     __end_of__initialization:
  1764                           	opt stack 0
  1765  00559C  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1766  00559E  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1767  0055A0  0100               	movlb	0
  1768  0055A2  EF8C  F024         	goto	_main	;jump to C main() function
  1769                           tblptru	equ	0xFF8
  1770                           tblptrh	equ	0xFF7
  1771                           tblptrl	equ	0xFF6
  1772                           tablat	equ	0xFF5
  1773                           postinc0	equ	0xFEE
  1774                           wreg	equ	0xFE8
  1775                           postdec1	equ	0xFE5
  1776                           fsr1l	equ	0xFE1
  1777                           
  1778                           	psect	bssCOMRAM
  1779  00005B                     __pbssCOMRAM:
  1780                           	opt stack 0
  1781  00005B                     _servoTimes:
  1782                           	opt stack 0
  1783  00005B                     	ds	8
  1784  000063                     _back:
  1785                           	opt stack 0
  1786  000063                     	ds	2
  1787  000065                     _down:
  1788                           	opt stack 0
  1789  000065                     	ds	2
  1790  000067                     _enter:
  1791                           	opt stack 0
  1792  000067                     	ds	2
  1793  000069                     _f_panning_to_bin:
  1794                           	opt stack 0
  1795  000069                     	ds	2
  1796  00006B                     _pan_servo_state:
  1797                           	opt stack 0
  1798  00006B                     	ds	2
  1799  00006D                     _servo_timer_counter:
  1800                           	opt stack 0
  1801  00006D                     	ds	2
  1802  00006F                     _servo_timer_target:
  1803                           	opt stack 0
  1804  00006F                     	ds	2
  1805  000071                     _tilt_servo_state:
  1806                           	opt stack 0
  1807  000071                     	ds	2
  1808  000073                     _timer2_counter:
  1809                           	opt stack 0
  1810  000073                     	ds	2
  1811  000075                     _up:
  1812                           	opt stack 0
  1813  000075                     	ds	2
  1814  000077                     _was_low_1:
  1815                           	opt stack 0
  1816  000077                     	ds	2
  1817  000079                     _was_low_2:
  1818                           	opt stack 0
  1819  000079                     	ds	2
  1820  00007B                     _was_low_3:
  1821                           	opt stack 0
  1822  00007B                     	ds	2
  1823  00007D                     _input:
  1824                           	opt stack 0
  1825  00007D                     	ds	1
  1826                           tblptru	equ	0xFF8
  1827                           tblptrh	equ	0xFF7
  1828                           tblptrl	equ	0xFF6
  1829                           tablat	equ	0xFF5
  1830                           postinc0	equ	0xFEE
  1831                           wreg	equ	0xFE8
  1832                           postdec1	equ	0xFE5
  1833                           fsr1l	equ	0xFE1
  1834                           
  1835                           	psect	bssBANK0
  1836  0000DA                     __pbssBANK0:
  1837                           	opt stack 0
  1838  0000DA                     _sensor_outputs:
  1839                           	opt stack 0
  1840  0000DA                     	ds	4
  1841  0000DE                     _COND_signal:
  1842                           	opt stack 0
  1843  0000DE                     	ds	2
  1844  0000E0                     _IR_signal:
  1845                           	opt stack 0
  1846  0000E0                     	ds	2
  1847  0000E2                     _MAG_signal:
  1848                           	opt stack 0
  1849  0000E2                     	ds	2
  1850  0000E4                     _RTCflag:
  1851                           	opt stack 0
  1852  0000E4                     	ds	2
  1853  0000E6                     _cur_state:
  1854                           	opt stack 0
  1855  0000E6                     	ds	2
  1856  0000E8                     _f_arm_position:
  1857                           	opt stack 0
  1858  0000E8                     	ds	2
  1859  0000EA                     _f_lastCan:
  1860                           	opt stack 0
  1861  0000EA                     	ds	2
  1862  0000EC                     _f_loadingNewCan:
  1863                           	opt stack 0
  1864  0000EC                     	ds	2
  1865  0000EE                     _log:
  1866                           	opt stack 0
  1867  0000EE                     	ds	2
  1868  0000F0                     _log_completion:
  1869                           	opt stack 0
  1870  0000F0                     	ds	2
  1871  0000F2                     _log_count_pop_no_tab:
  1872                           	opt stack 0
  1873  0000F2                     	ds	2
  1874  0000F4                     _log_count_pop_w_tab:
  1875                           	opt stack 0
  1876  0000F4                     	ds	2
  1877  0000F6                     _log_total_time:
  1878                           	opt stack 0
  1879  0000F6                     	ds	2
  1880  0000F8                     _logstate:
  1881                           	opt stack 0
  1882  0000F8                     	ds	2
  1883  0000FA                     _total_time:
  1884                           	opt stack 0
  1885  0000FA                     	ds	2
  1886  0000FC                     _machine_state:
  1887                           	opt stack 0
  1888  0000FC                     	ds	1
  1889  0000FD                     _sel:
  1890                           	opt stack 0
  1891  0000FD                     	ds	1
  1892  0000FE                     _count_total:
  1893                           	opt stack 0
  1894  0000FE                     	ds	2
  1895                           tblptru	equ	0xFF8
  1896                           tblptrh	equ	0xFF7
  1897                           tblptrl	equ	0xFF6
  1898                           tablat	equ	0xFF5
  1899                           postinc0	equ	0xFEE
  1900                           wreg	equ	0xFE8
  1901                           postdec1	equ	0xFE5
  1902                           fsr1l	equ	0xFE1
  1903                           
  1904                           	psect	bssBANK1
  1905  000100                     __pbssBANK1:
  1906                           	opt stack 0
  1907  000100                     _log_startTime:
  1908                           	opt stack 0
  1909  000100                     	ds	14
  1910  00010E                     _startTime:
  1911                           	opt stack 0
  1912  00010E                     	ds	14
  1913  00011C                     _time:
  1914                           	opt stack 0
  1915  00011C                     	ds	7
  1916  000123                     _agitator_toggle_count:
  1917                           	opt stack 0
  1918  000123                     	ds	2
  1919  000125                     _count_can_no_lab:
  1920                           	opt stack 0
  1921  000125                     	ds	2
  1922  000127                     _count_can_w_lab:
  1923                           	opt stack 0
  1924  000127                     	ds	2
  1925  000129                     _count_pop_no_tab:
  1926                           	opt stack 0
  1927  000129                     	ds	2
  1928  00012B                     _count_pop_w_tab:
  1929                           	opt stack 0
  1930  00012B                     	ds	2
  1931  00012D                     _cur_can:
  1932                           	opt stack 0
  1933  00012D                     	ds	2
  1934  00012F                     _debug:
  1935                           	opt stack 0
  1936  00012F                     	ds	2
  1937  000131                     _f_ID_receive:
  1938                           	opt stack 0
  1939  000131                     	ds	2
  1940  000133                     _f_can_coming_to_ID:
  1941                           	opt stack 0
  1942  000133                     	ds	2
  1943  000135                     _f_can_coming_to_distribution:
  1944                           	opt stack 0
  1945  000135                     	ds	2
  1946  000137                     _f_can_distributed:
  1947                           	opt stack 0
  1948  000137                     	ds	2
  1949  000139                     _f_most_recent_sort_time:
  1950                           	opt stack 0
  1951  000139                     	ds	2
  1952  00013B                     _first:
  1953                           	opt stack 0
  1954  00013B                     	ds	2
  1955  00013D                     _firstboot:
  1956                           	opt stack 0
  1957  00013D                     	ds	2
  1958  00013F                     _i:
  1959                           	opt stack 0
  1960  00013F                     	ds	2
  1961  000141                     _log_count_can_no_lab:
  1962                           	opt stack 0
  1963  000141                     	ds	2
  1964  000143                     _log_count_can_w_lab:
  1965                           	opt stack 0
  1966  000143                     	ds	2
  1967  000145                     _log_count_total:
  1968                           	opt stack 0
  1969  000145                     	ds	2
  1970  000147                     _most_recent_sort_time:
  1971                           	opt stack 0
  1972  000147                     	ds	2
  1973  000149                     _motor_toggle_count:
  1974                           	opt stack 0
  1975  000149                     	ds	2
  1976  00014B                     _var:
  1977                           	opt stack 0
  1978  00014B                     	ds	2
  1979                           tblptru	equ	0xFF8
  1980                           tblptrh	equ	0xFF7
  1981                           tblptrl	equ	0xFF6
  1982                           tablat	equ	0xFF5
  1983                           postinc0	equ	0xFEE
  1984                           wreg	equ	0xFE8
  1985                           postdec1	equ	0xFE5
  1986                           fsr1l	equ	0xFE1
  1987                           
  1988                           	psect	dataBANK1
  1989  00014D                     __pdataBANK1:
  1990                           	opt stack 0
  1991  00014D                     UI@F3248:
  1992                           	opt stack 0
  1993  00014D                     	ds	4
  1994  000151                     printRTC@F3238:
  1995                           	opt stack 0
  1996  000151                     	ds	4
  1997                           tblptru	equ	0xFF8
  1998                           tblptrh	equ	0xFF7
  1999                           tblptrl	equ	0xFF6
  2000                           tablat	equ	0xFF5
  2001                           postinc0	equ	0xFEE
  2002                           wreg	equ	0xFE8
  2003                           postdec1	equ	0xFE5
  2004                           fsr1l	equ	0xFE1
  2005                           
  2006                           	psect	cstackBANK0
  2007  000080                     __pcstackBANK0:
  2008                           	opt stack 0
  2009  000080                     ??_delay_ms:
  2010  000080                     ??_isdigit:
  2011  000080                     ??_readADC:
  2012  000080                     ??_I2C_Master_Wait:
  2013  000080                     ?___wmul:
  2014                           	opt stack 0
  2015  000080                     ?___awmod:
  2016                           	opt stack 0
  2017  000080                     ?___lwdiv:
  2018                           	opt stack 0
  2019  000080                     ?___ftpack:
  2020                           	opt stack 0
  2021  000080                     ?___lldiv:
  2022                           	opt stack 0
  2023  000080                     lcdNibble@temp:
  2024                           	opt stack 0
  2025  000080                     initTime@m:
  2026                           	opt stack 0
  2027  000080                     updateServoPosition@time_us:
  2028                           	opt stack 0
  2029  000080                     EEPROM_read@address:
  2030                           	opt stack 0
  2031  000080                     ___wmul@multiplier:
  2032                           	opt stack 0
  2033  000080                     ___awmod@dividend:
  2034                           	opt stack 0
  2035  000080                     ___lwdiv@dividend:
  2036                           	opt stack 0
  2037  000080                     strcpy@to:
  2038                           	opt stack 0
  2039  000080                     ___ftpack@arg:
  2040                           	opt stack 0
  2041  000080                     ___lldiv@dividend:
  2042                           	opt stack 0
  2043                           
  2044                           ; 4 bytes @ 0x0
  2045  000080                     	ds	1
  2046  000081                     readADC@channel:
  2047                           	opt stack 0
  2048  000081                     I2C_Master_Read@a:
  2049                           	opt stack 0
  2050  000081                     lcdNibble@data:
  2051                           	opt stack 0
  2052  000081                     initTime@h:
  2053                           	opt stack 0
  2054  000081                     delay_ms@milliseconds:
  2055                           	opt stack 0
  2056  000081                     _isdigit$2066:
  2057                           	opt stack 0
  2058  000081                     I2C_Master_Write@d:
  2059                           	opt stack 0
  2060                           
  2061                           ; 2 bytes @ 0x1
  2062  000081                     	ds	1
  2063  000082                     ??_readIR:
  2064  000082                     ??_readMAG:
  2065  000082                     ??_readCOND:
  2066  000082                     I2C_Master_Read@temp:
  2067                           	opt stack 0
  2068  000082                     lcdInst@data:
  2069                           	opt stack 0
  2070  000082                     putch@data:
  2071                           	opt stack 0
  2072  000082                     initTime@w:
  2073                           	opt stack 0
  2074  000082                     isdigit@c:
  2075                           	opt stack 0
  2076  000082                     updateServoPosition@timer:
  2077                           	opt stack 0
  2078  000082                     ___wmul@multiplicand:
  2079                           	opt stack 0
  2080  000082                     ___awmod@divisor:
  2081                           	opt stack 0
  2082  000082                     ___lwdiv@divisor:
  2083                           	opt stack 0
  2084  000082                     strcpy@from:
  2085                           	opt stack 0
  2086                           
  2087                           ; 2 bytes @ 0x2
  2088  000082                     	ds	1
  2089  000083                     ??_initLCD:
  2090  000083                     initTime@DD:
  2091                           	opt stack 0
  2092  000083                     ___ftpack@exp:
  2093                           	opt stack 0
  2094  000083                     getRTC@i:
  2095                           	opt stack 0
  2096                           
  2097                           ; 2 bytes @ 0x3
  2098  000083                     	ds	1
  2099  000084                     ??_updateServoPosition:
  2100  000084                     initTime@MM:
  2101                           	opt stack 0
  2102  000084                     ___awmod@counter:
  2103                           	opt stack 0
  2104  000084                     ___ftpack@sign:
  2105                           	opt stack 0
  2106  000084                     readIR@res:
  2107                           	opt stack 0
  2108  000084                     readMAG@res:
  2109                           	opt stack 0
  2110  000084                     readCOND@res:
  2111                           	opt stack 0
  2112  000084                     ___wmul@product:
  2113                           	opt stack 0
  2114  000084                     ___lwdiv@quotient:
  2115                           	opt stack 0
  2116  000084                     strcpy@cp:
  2117                           	opt stack 0
  2118  000084                     ___lldiv@divisor:
  2119                           	opt stack 0
  2120                           
  2121                           ; 4 bytes @ 0x4
  2122  000084                     	ds	1
  2123  000085                     ??_initSortTimer:
  2124  000085                     ??___ftpack:
  2125  000085                     initTime@YY:
  2126                           	opt stack 0
  2127  000085                     ___awmod@sign:
  2128                           	opt stack 0
  2129                           
  2130                           ; 1 bytes @ 0x5
  2131  000085                     	ds	1
  2132  000086                     ??_getIR:
  2133  000086                     ??_getMAG:
  2134  000086                     ?___awdiv:
  2135                           	opt stack 0
  2136  000086                     initTime@s:
  2137                           	opt stack 0
  2138  000086                     ___lwdiv@counter:
  2139                           	opt stack 0
  2140  000086                     updateServoPosition@my_time:
  2141                           	opt stack 0
  2142  000086                     ___awdiv@dividend:
  2143                           	opt stack 0
  2144                           
  2145                           ; 2 bytes @ 0x6
  2146  000086                     	ds	1
  2147  000087                     ?___lwmod:
  2148                           	opt stack 0
  2149  000087                     getIR@i:
  2150                           	opt stack 0
  2151  000087                     ___lwmod@dividend:
  2152                           	opt stack 0
  2153                           
  2154                           ; 2 bytes @ 0x7
  2155  000087                     	ds	1
  2156  000088                     ??_Distribution:
  2157  000088                     ??_initServos:
  2158  000088                     initSortTimer@i:
  2159                           	opt stack 0
  2160  000088                     ___awdiv@divisor:
  2161                           	opt stack 0
  2162  000088                     ___lldiv@quotient:
  2163                           	opt stack 0
  2164                           
  2165                           ; 4 bytes @ 0x8
  2166  000088                     	ds	1
  2167  000089                     ___lwmod@divisor:
  2168                           	opt stack 0
  2169                           
  2170                           ; 2 bytes @ 0x9
  2171  000089                     	ds	1
  2172  00008A                     ___awdiv@counter:
  2173                           	opt stack 0
  2174                           
  2175                           ; 1 bytes @ 0xA
  2176  00008A                     	ds	1
  2177  00008B                     ___awdiv@sign:
  2178                           	opt stack 0
  2179  00008B                     ___lwmod@counter:
  2180                           	opt stack 0
  2181                           
  2182                           ; 1 bytes @ 0xB
  2183  00008B                     	ds	1
  2184  00008C                     ___lldiv@counter:
  2185                           	opt stack 0
  2186  00008C                     ___awdiv@quotient:
  2187                           	opt stack 0
  2188                           
  2189                           ; 2 bytes @ 0xC
  2190  00008C                     	ds	1
  2191  00008D                     I2C_Master_Init@c:
  2192                           	opt stack 0
  2193                           
  2194                           ; 4 bytes @ 0xD
  2195  00008D                     	ds	1
  2196  00008E                     ?_printf:
  2197                           	opt stack 0
  2198  00008E                     ?___awtoft:
  2199                           	opt stack 0
  2200  00008E                     printf@f:
  2201                           	opt stack 0
  2202  00008E                     ___awtoft@c:
  2203                           	opt stack 0
  2204                           
  2205                           ; 2 bytes @ 0xE
  2206  00008E                     	ds	3
  2207  000091                     ??_I2C_Master_Init:
  2208  000091                     ___awtoft@sign:
  2209                           	opt stack 0
  2210                           
  2211                           ; 1 bytes @ 0x11
  2212  000091                     	ds	1
  2213  000092                     ___ftge@ff1:
  2214                           	opt stack 0
  2215                           
  2216                           ; 3 bytes @ 0x12
  2217  000092                     	ds	3
  2218  000095                     ??_loadRTC:
  2219  000095                     ___ftge@ff2:
  2220                           	opt stack 0
  2221                           
  2222                           ; 3 bytes @ 0x15
  2223  000095                     	ds	1
  2224  000096                     loadRTC@i:
  2225                           	opt stack 0
  2226                           
  2227                           ; 2 bytes @ 0x16
  2228  000096                     	ds	2
  2229  000098                     ??___ftge:
  2230                           
  2231                           ; 1 bytes @ 0x18
  2232  000098                     	ds	2
  2233  00009A                     ??_printf:
  2234                           
  2235                           ; 1 bytes @ 0x1A
  2236  00009A                     	ds	1
  2237  00009B                     ??_ID:
  2238                           
  2239                           ; 1 bytes @ 0x1B
  2240  00009B                     	ds	2
  2241  00009D                     ID@time_1147:
  2242                           	opt stack 0
  2243                           
  2244                           ; 1 bytes @ 0x1D
  2245  00009D                     	ds	1
  2246  00009E                     _ID$1146:
  2247                           	opt stack 0
  2248  00009E                     printf@prec:
  2249                           	opt stack 0
  2250                           
  2251                           ; 1 bytes @ 0x1E
  2252  00009E                     	ds	1
  2253  00009F                     _ID$1151:
  2254                           	opt stack 0
  2255  00009F                     printf@cp:
  2256                           	opt stack 0
  2257                           
  2258                           ; 2 bytes @ 0x1F
  2259  00009F                     	ds	1
  2260  0000A0                     ID@i:
  2261                           	opt stack 0
  2262                           
  2263                           ; 2 bytes @ 0x20
  2264  0000A0                     	ds	1
  2265  0000A1                     printf@ap:
  2266                           	opt stack 0
  2267                           
  2268                           ; 2 bytes @ 0x21
  2269  0000A1                     	ds	1
  2270  0000A2                     ID@i_1145:
  2271                           	opt stack 0
  2272                           
  2273                           ; 2 bytes @ 0x22
  2274  0000A2                     	ds	1
  2275  0000A3                     printf@len:
  2276                           	opt stack 0
  2277                           
  2278                           ; 2 bytes @ 0x23
  2279  0000A3                     	ds	1
  2280  0000A4                     ID@i_1150:
  2281                           	opt stack 0
  2282                           
  2283                           ; 2 bytes @ 0x24
  2284  0000A4                     	ds	1
  2285  0000A5                     printf@val:
  2286                           	opt stack 0
  2287                           
  2288                           ; 2 bytes @ 0x25
  2289  0000A5                     	ds	1
  2290  0000A6                     ID@i_1152:
  2291                           	opt stack 0
  2292                           
  2293                           ; 2 bytes @ 0x26
  2294  0000A6                     	ds	1
  2295  0000A7                     printf@flag:
  2296                           	opt stack 0
  2297                           
  2298                           ; 1 bytes @ 0x27
  2299  0000A7                     	ds	1
  2300  0000A8                     ID@time:
  2301                           	opt stack 0
  2302  0000A8                     printf@c:
  2303                           	opt stack 0
  2304                           
  2305                           ; 1 bytes @ 0x28
  2306  0000A8                     	ds	1
  2307  0000A9                     ID@res1:
  2308                           	opt stack 0
  2309  0000A9                     printf@width:
  2310                           	opt stack 0
  2311                           
  2312                           ; 2 bytes @ 0x29
  2313  0000A9                     	ds	2
  2314  0000AB                     ??_printRTC:
  2315  0000AB                     ??_algorithmTest:
  2316  0000AB                     ??_sensorTest:
  2317  0000AB                     ??_actuatorTest:
  2318  0000AB                     ??_arm:
  2319  0000AB                     ??_PortTestDC:
  2320  0000AB                     ??_SpeedTest:
  2321  0000AB                     ??_PortTestPusher:
  2322  0000AB                     ??_PlatformTest:
  2323  0000AB                     ??_BothServos:
  2324  0000AB                     ??_BlockerTest:
  2325  0000AB                     ID@res2:
  2326                           	opt stack 0
  2327  0000AB                     EEPROM_write@address:
  2328                           	opt stack 0
  2329                           
  2330                           ; 2 bytes @ 0x2B
  2331  0000AB                     	ds	1
  2332  0000AC                     arm@on:
  2333                           	opt stack 0
  2334                           
  2335                           ; 2 bytes @ 0x2C
  2336  0000AC                     	ds	1
  2337  0000AD                     EEPROM_write@data:
  2338                           	opt stack 0
  2339  0000AD                     actuatorTest@i_1741:
  2340                           	opt stack 0
  2341  0000AD                     sensorTest@res:
  2342                           	opt stack 0
  2343  0000AD                     PlatformTest@res:
  2344                           	opt stack 0
  2345  0000AD                     BlockerTest@i:
  2346                           	opt stack 0
  2347  0000AD                     ID@res:
  2348                           	opt stack 0
  2349                           
  2350                           ; 4 bytes @ 0x2D
  2351  0000AD                     	ds	1
  2352  0000AE                     ??_EEPROM_write:
  2353  0000AE                     actuatorTest@i_1748:
  2354                           	opt stack 0
  2355  0000AE                     printRTC@INT_time:
  2356                           	opt stack 0
  2357                           
  2358                           ; 14 bytes @ 0x2E
  2359  0000AE                     	ds	1
  2360  0000AF                     EEPROM_write@i:
  2361                           	opt stack 0
  2362  0000AF                     actuatorTest@i_1749:
  2363                           	opt stack 0
  2364  0000AF                     PlatformTest@res_1793:
  2365                           	opt stack 0
  2366  0000AF                     BlockerTest@res:
  2367                           	opt stack 0
  2368                           
  2369                           ; 2 bytes @ 0x2F
  2370  0000AF                     	ds	1
  2371  0000B0                     EEPROM_write@i_1409:
  2372                           	opt stack 0
  2373  0000B0                     actuatorTest@i_1751:
  2374                           	opt stack 0
  2375                           
  2376                           ; 1 bytes @ 0x30
  2377  0000B0                     	ds	1
  2378  0000B1                     ??_Loading:
  2379  0000B1                     logRun@num:
  2380                           	opt stack 0
  2381  0000B1                     actuatorTest@i_1752:
  2382                           	opt stack 0
  2383  0000B1                     ID@i_1153:
  2384                           	opt stack 0
  2385  0000B1                     PlatformTest@i:
  2386                           	opt stack 0
  2387  0000B1                     BlockerTest@cam_flag:
  2388                           	opt stack 0
  2389                           
  2390                           ; 2 bytes @ 0x31
  2391  0000B1                     	ds	1
  2392  0000B2                     logRun@byte1:
  2393                           	opt stack 0
  2394  0000B2                     actuatorTest@i_1754:
  2395                           	opt stack 0
  2396                           
  2397                           ; 1 bytes @ 0x32
  2398  0000B2                     	ds	1
  2399  0000B3                     logRun@byte2:
  2400                           	opt stack 0
  2401  0000B3                     actuatorTest@i_1755:
  2402                           	opt stack 0
  2403  0000B3                     Loading@addr:
  2404                           	opt stack 0
  2405  0000B3                     ID@j:
  2406                           	opt stack 0
  2407  0000B3                     PlatformTest@i_1797:
  2408                           	opt stack 0
  2409  0000B3                     BlockerTest@cond_flag:
  2410                           	opt stack 0
  2411                           
  2412                           ; 2 bytes @ 0x33
  2413  0000B3                     	ds	1
  2414  0000B4                     logRun@byte3:
  2415                           	opt stack 0
  2416  0000B4                     actuatorTest@i_1757:
  2417                           	opt stack 0
  2418                           
  2419                           ; 1 bytes @ 0x34
  2420  0000B4                     	ds	1
  2421  0000B5                     Loading@byte1:
  2422                           	opt stack 0
  2423  0000B5                     logRun@byte_i:
  2424                           	opt stack 0
  2425  0000B5                     actuatorTest@i_1758:
  2426                           	opt stack 0
  2427  0000B5                     ID@n:
  2428                           	opt stack 0
  2429  0000B5                     PlatformTest@on:
  2430                           	opt stack 0
  2431                           
  2432                           ; 2 bytes @ 0x35
  2433  0000B5                     	ds	1
  2434  0000B6                     logRun@byte11:
  2435                           	opt stack 0
  2436  0000B6                     actuatorTest@i_1760:
  2437                           	opt stack 0
  2438  0000B6                     Loading@i_1123:
  2439                           	opt stack 0
  2440                           
  2441                           ; 2 bytes @ 0x36
  2442  0000B6                     	ds	1
  2443  0000B7                     actuatorTest@i_1761:
  2444                           	opt stack 0
  2445  0000B7                     logRun@i:
  2446                           	opt stack 0
  2447                           
  2448                           ; 2 bytes @ 0x37
  2449  0000B7                     	ds	1
  2450  0000B8                     actuatorTest@i_1763:
  2451                           	opt stack 0
  2452  0000B8                     Loading@i_1132:
  2453                           	opt stack 0
  2454                           
  2455                           ; 2 bytes @ 0x38
  2456  0000B8                     	ds	1
  2457  0000B9                     actuatorTest@i_1764:
  2458                           	opt stack 0
  2459  0000B9                     logRun@addr:
  2460                           	opt stack 0
  2461                           
  2462                           ; 2 bytes @ 0x39
  2463  0000B9                     	ds	1
  2464  0000BA                     actuatorTest@i_1767:
  2465                           	opt stack 0
  2466  0000BA                     Loading@i_1134:
  2467                           	opt stack 0
  2468                           
  2469                           ; 2 bytes @ 0x3A
  2470  0000BA                     	ds	1
  2471  0000BB                     actuatorTest@i_1768:
  2472                           	opt stack 0
  2473                           
  2474                           ; 1 bytes @ 0x3B
  2475  0000BB                     	ds	1
  2476  0000BC                     actuatorTest@i_1770:
  2477                           	opt stack 0
  2478  0000BC                     printRTC@RTC_month:
  2479                           	opt stack 0
  2480  0000BC                     Loading@i_1135:
  2481                           	opt stack 0
  2482                           
  2483                           ; 2 bytes @ 0x3C
  2484  0000BC                     	ds	1
  2485  0000BD                     actuatorTest@i_1771:
  2486                           	opt stack 0
  2487                           
  2488                           ; 1 bytes @ 0x3D
  2489  0000BD                     	ds	1
  2490  0000BE                     actuatorTest@i_1773:
  2491                           	opt stack 0
  2492  0000BE                     Loading@i_1137:
  2493                           	opt stack 0
  2494  0000BE                     printRTC@month:
  2495                           	opt stack 0
  2496                           
  2497                           ; 4 bytes @ 0x3E
  2498  0000BE                     	ds	1
  2499  0000BF                     actuatorTest@i_1774:
  2500                           	opt stack 0
  2501                           
  2502                           ; 1 bytes @ 0x3F
  2503  0000BF                     	ds	1
  2504  0000C0                     actuatorTest@i_1777:
  2505                           	opt stack 0
  2506  0000C0                     Loading@i:
  2507                           	opt stack 0
  2508                           
  2509                           ; 2 bytes @ 0x40
  2510  0000C0                     	ds	1
  2511  0000C1                     actuatorTest@i_1778:
  2512                           	opt stack 0
  2513                           
  2514                           ; 1 bytes @ 0x41
  2515  0000C1                     	ds	1
  2516  0000C2                     actuatorTest@i_1780:
  2517                           	opt stack 0
  2518  0000C2                     printRTC@i:
  2519                           	opt stack 0
  2520  0000C2                     Loading@j:
  2521                           	opt stack 0
  2522                           
  2523                           ; 2 bytes @ 0x42
  2524  0000C2                     	ds	1
  2525  0000C3                     actuatorTest@i_1781:
  2526                           	opt stack 0
  2527                           
  2528                           ; 1 bytes @ 0x43
  2529  0000C3                     	ds	1
  2530  0000C4                     ??_UI:
  2531  0000C4                     actuatorTest@i:
  2532                           	opt stack 0
  2533                           
  2534                           ; 2 bytes @ 0x44
  2535  0000C4                     	ds	2
  2536  0000C6                     ??_Test:
  2537  0000C6                     _UI$2428:
  2538                           	opt stack 0
  2539                           
  2540                           ; 2 bytes @ 0x46
  2541  0000C6                     	ds	2
  2542  0000C8                     UI@i:
  2543                           	opt stack 0
  2544                           
  2545                           ; 1 bytes @ 0x48
  2546  0000C8                     	ds	1
  2547  0000C9                     UI@i_412:
  2548                           	opt stack 0
  2549                           
  2550                           ; 1 bytes @ 0x49
  2551  0000C9                     	ds	1
  2552  0000CA                     UI@i_415:
  2553                           	opt stack 0
  2554                           
  2555                           ; 1 bytes @ 0x4A
  2556  0000CA                     	ds	1
  2557  0000CB                     UI@i_416:
  2558                           	opt stack 0
  2559                           
  2560                           ; 1 bytes @ 0x4B
  2561  0000CB                     	ds	1
  2562  0000CC                     UI@i_434:
  2563                           	opt stack 0
  2564                           
  2565                           ; 1 bytes @ 0x4C
  2566  0000CC                     	ds	1
  2567  0000CD                     UI@i_435:
  2568                           	opt stack 0
  2569                           
  2570                           ; 1 bytes @ 0x4D
  2571  0000CD                     	ds	1
  2572  0000CE                     UI@i_438:
  2573                           	opt stack 0
  2574                           
  2575                           ; 1 bytes @ 0x4E
  2576  0000CE                     	ds	1
  2577  0000CF                     UI@i_439:
  2578                           	opt stack 0
  2579                           
  2580                           ; 1 bytes @ 0x4F
  2581  0000CF                     	ds	1
  2582  0000D0                     UI@i_442:
  2583                           	opt stack 0
  2584                           
  2585                           ; 1 bytes @ 0x50
  2586  0000D0                     	ds	1
  2587  0000D1                     UI@i_443:
  2588                           	opt stack 0
  2589                           
  2590                           ; 1 bytes @ 0x51
  2591  0000D1                     	ds	1
  2592  0000D2                     UI@i_446:
  2593                           	opt stack 0
  2594                           
  2595                           ; 1 bytes @ 0x52
  2596  0000D2                     	ds	1
  2597  0000D3                     UI@i_447:
  2598                           	opt stack 0
  2599                           
  2600                           ; 1 bytes @ 0x53
  2601  0000D3                     	ds	1
  2602  0000D4                     UI@i_450:
  2603                           	opt stack 0
  2604                           
  2605                           ; 1 bytes @ 0x54
  2606  0000D4                     	ds	1
  2607  0000D5                     UI@i_451:
  2608                           	opt stack 0
  2609                           
  2610                           ; 1 bytes @ 0x55
  2611  0000D5                     	ds	1
  2612  0000D6                     UI@month:
  2613                           	opt stack 0
  2614                           
  2615                           ; 4 bytes @ 0x56
  2616  0000D6                     	ds	4
  2617  0000DA                     tblptru	equ	0xFF8
  2618                           tblptrh	equ	0xFF7
  2619                           tblptrl	equ	0xFF6
  2620                           tablat	equ	0xFF5
  2621                           postinc0	equ	0xFEE
  2622                           wreg	equ	0xFE8
  2623                           postdec1	equ	0xFE5
  2624                           fsr1l	equ	0xFE1
  2625                           
  2626                           ; 1 bytes @ 0x5A
  2627                           
  2628                           	psect	cstackCOMRAM
  2629  000001                     __pcstackCOMRAM:
  2630                           	opt stack 0
  2631  000001                     ??_updateArmState:
  2632  000001                     ??i2_I2C_Master_Wait:
  2633  000001                     ??i2_delay_ms:
  2634  000001                     ??i2_isdigit:
  2635  000001                     ?i2___wmul:
  2636                           	opt stack 0
  2637  000001                     ?i2___awmod:
  2638                           	opt stack 0
  2639  000001                     ?i2___lwmod:
  2640                           	opt stack 0
  2641  000001                     i2lcdNibble@temp:
  2642                           	opt stack 0
  2643  000001                     i2updateServoPosition@time_us:
  2644                           	opt stack 0
  2645  000001                     i2EEPROM_read@address:
  2646                           	opt stack 0
  2647  000001                     i2___wmul@multiplier:
  2648                           	opt stack 0
  2649  000001                     i2___awmod@dividend:
  2650                           	opt stack 0
  2651  000001                     i2___lwmod@dividend:
  2652                           	opt stack 0
  2653  000001                     i2strcpy@to:
  2654                           	opt stack 0
  2655                           
  2656                           ; 2 bytes @ 0x0
  2657  000001                     	ds	1
  2658  000002                     i2I2C_Master_Read@a:
  2659                           	opt stack 0
  2660  000002                     i2lcdNibble@data:
  2661                           	opt stack 0
  2662  000002                     i2delay_ms@milliseconds:
  2663                           	opt stack 0
  2664  000002                     i2_isdigit$2066:
  2665                           	opt stack 0
  2666  000002                     i2I2C_Master_Write@d:
  2667                           	opt stack 0
  2668                           
  2669                           ; 2 bytes @ 0x1
  2670  000002                     	ds	1
  2671  000003                     i2I2C_Master_Read@temp:
  2672                           	opt stack 0
  2673  000003                     i2lcdInst@data:
  2674                           	opt stack 0
  2675  000003                     i2putch@data:
  2676                           	opt stack 0
  2677  000003                     i2isdigit@c:
  2678                           	opt stack 0
  2679  000003                     i2updateServoPosition@timer:
  2680                           	opt stack 0
  2681  000003                     i2___wmul@multiplicand:
  2682                           	opt stack 0
  2683  000003                     i2___awmod@divisor:
  2684                           	opt stack 0
  2685  000003                     i2___lwmod@divisor:
  2686                           	opt stack 0
  2687  000003                     i2strcpy@from:
  2688                           	opt stack 0
  2689                           
  2690                           ; 2 bytes @ 0x2
  2691  000003                     	ds	1
  2692  000004                     i2getRTC@i:
  2693                           	opt stack 0
  2694                           
  2695                           ; 2 bytes @ 0x3
  2696  000004                     	ds	1
  2697  000005                     ??i2_updateServoPosition:
  2698  000005                     i2___awmod@counter:
  2699                           	opt stack 0
  2700  000005                     i2___lwmod@counter:
  2701                           	opt stack 0
  2702  000005                     i2___wmul@product:
  2703                           	opt stack 0
  2704  000005                     i2strcpy@cp:
  2705                           	opt stack 0
  2706                           
  2707                           ; 2 bytes @ 0x4
  2708  000005                     	ds	1
  2709  000006                     ?i2___lwdiv:
  2710                           	opt stack 0
  2711  000006                     i2___awmod@sign:
  2712                           	opt stack 0
  2713  000006                     i2___lwdiv@dividend:
  2714                           	opt stack 0
  2715                           
  2716                           ; 2 bytes @ 0x5
  2717  000006                     	ds	1
  2718  000007                     retrieveLog@logNum:
  2719                           	opt stack 0
  2720  000007                     i2updateServoPosition@my_time:
  2721                           	opt stack 0
  2722                           
  2723                           ; 2 bytes @ 0x6
  2724  000007                     	ds	1
  2725  000008                     i2___lwdiv@divisor:
  2726                           	opt stack 0
  2727                           
  2728                           ; 2 bytes @ 0x7
  2729  000008                     	ds	1
  2730  000009                     ??_retrieveLog:
  2731  000009                     ??_updateServoStates:
  2732                           
  2733                           ; 1 bytes @ 0x8
  2734  000009                     	ds	1
  2735  00000A                     i2___lwdiv@quotient:
  2736                           	opt stack 0
  2737                           
  2738                           ; 2 bytes @ 0x9
  2739  00000A                     	ds	1
  2740  00000B                     retrieveLog@byte1:
  2741                           	opt stack 0
  2742                           
  2743                           ; 1 bytes @ 0xA
  2744  00000B                     	ds	1
  2745  00000C                     retrieveLog@byte2:
  2746                           	opt stack 0
  2747  00000C                     i2___lwdiv@counter:
  2748                           	opt stack 0
  2749                           
  2750                           ; 1 bytes @ 0xB
  2751  00000C                     	ds	1
  2752  00000D                     ?i2_printf:
  2753                           	opt stack 0
  2754  00000D                     retrieveLog@byte3:
  2755                           	opt stack 0
  2756  00000D                     i2printf@f:
  2757                           	opt stack 0
  2758                           
  2759                           ; 2 bytes @ 0xC
  2760  00000D                     	ds	1
  2761  00000E                     retrieveLog@i:
  2762                           	opt stack 0
  2763                           
  2764                           ; 2 bytes @ 0xD
  2765  00000E                     	ds	2
  2766  000010                     retrieveLog@addr:
  2767                           	opt stack 0
  2768                           
  2769                           ; 2 bytes @ 0xF
  2770  000010                     	ds	2
  2771  000012                     dispLogs@myLog:
  2772                           	opt stack 0
  2773                           
  2774                           ; 2 bytes @ 0x11
  2775  000012                     	ds	2
  2776  000014                     
  2777                           ; 1 bytes @ 0x13
  2778  000014                     	ds	5
  2779  000019                     ??i2_printf:
  2780                           
  2781                           ; 1 bytes @ 0x18
  2782  000019                     	ds	4
  2783  00001D                     i2printf@prec:
  2784                           	opt stack 0
  2785                           
  2786                           ; 1 bytes @ 0x1C
  2787  00001D                     	ds	1
  2788  00001E                     i2printf@cp:
  2789                           	opt stack 0
  2790                           
  2791                           ; 2 bytes @ 0x1D
  2792  00001E                     	ds	2
  2793  000020                     i2printf@ap:
  2794                           	opt stack 0
  2795                           
  2796                           ; 2 bytes @ 0x1F
  2797  000020                     	ds	2
  2798  000022                     i2printf@len:
  2799                           	opt stack 0
  2800                           
  2801                           ; 2 bytes @ 0x21
  2802  000022                     	ds	2
  2803  000024                     i2printf@val:
  2804                           	opt stack 0
  2805                           
  2806                           ; 2 bytes @ 0x23
  2807  000024                     	ds	2
  2808  000026                     i2printf@flag:
  2809                           	opt stack 0
  2810                           
  2811                           ; 1 bytes @ 0x25
  2812  000026                     	ds	1
  2813  000027                     i2printf@c:
  2814                           	opt stack 0
  2815                           
  2816                           ; 1 bytes @ 0x26
  2817  000027                     	ds	1
  2818  000028                     i2printf@width:
  2819                           	opt stack 0
  2820                           
  2821                           ; 2 bytes @ 0x27
  2822  000028                     	ds	2
  2823  00002A                     ??_printSortTimer:
  2824  00002A                     ??i2_printRTC:
  2825  00002A                     ?_inputHandler:
  2826                           	opt stack 0
  2827                           
  2828                           ; 2 bytes @ 0x29
  2829  00002A                     	ds	2
  2830  00002C                     ??_inputHandler:
  2831                           
  2832                           ; 1 bytes @ 0x2B
  2833  00002C                     	ds	1
  2834  00002D                     printSortTimer@curTime:
  2835                           	opt stack 0
  2836  00002D                     i2printRTC@INT_time:
  2837                           	opt stack 0
  2838                           
  2839                           ; 14 bytes @ 0x2C
  2840  00002D                     	ds	14
  2841  00003B                     printSortTimer@start_sec:
  2842                           	opt stack 0
  2843  00003B                     i2printRTC@RTC_month:
  2844                           	opt stack 0
  2845                           
  2846                           ; 2 bytes @ 0x3A
  2847  00003B                     	ds	2
  2848  00003D                     printSortTimer@cur_sec:
  2849                           	opt stack 0
  2850  00003D                     i2printRTC@month:
  2851                           	opt stack 0
  2852                           
  2853                           ; 4 bytes @ 0x3C
  2854  00003D                     	ds	2
  2855  00003F                     printSortTimer@min:
  2856                           	opt stack 0
  2857                           
  2858                           ; 2 bytes @ 0x3E
  2859  00003F                     	ds	2
  2860  000041                     printSortTimer@sec:
  2861                           	opt stack 0
  2862  000041                     i2printRTC@i:
  2863                           	opt stack 0
  2864                           
  2865                           ; 2 bytes @ 0x40
  2866  000041                     	ds	2
  2867  000043                     ??_updateMenu:
  2868  000043                     _printSortTimer$2568:
  2869                           	opt stack 0
  2870                           
  2871                           ; 2 bytes @ 0x42
  2872  000043                     	ds	2
  2873  000045                     printSortTimer@timeDiff:
  2874                           	opt stack 0
  2875                           
  2876                           ; 2 bytes @ 0x44
  2877  000045                     	ds	2
  2878  000047                     printSortTimer@i_1165:
  2879                           	opt stack 0
  2880                           
  2881                           ; 2 bytes @ 0x46
  2882  000047                     	ds	2
  2883  000049                     printSortTimer@i:
  2884                           	opt stack 0
  2885                           
  2886                           ; 2 bytes @ 0x48
  2887  000049                     	ds	2
  2888  00004B                     ??_handler:
  2889                           
  2890                           ; 1 bytes @ 0x4A
  2891  00004B                     	ds	16
  2892                           tblptru	equ	0xFF8
  2893                           tblptrh	equ	0xFF7
  2894                           tblptrl	equ	0xFF6
  2895                           tablat	equ	0xFF5
  2896                           postinc0	equ	0xFEE
  2897                           wreg	equ	0xFE8
  2898                           postdec1	equ	0xFE5
  2899                           fsr1l	equ	0xFE1
  2900                           
  2901 ;;
  2902 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2903 ;;
  2904 ;; *************** function _main *****************
  2905 ;; Defined at:
  2906 ;;		line 19 in file "main.c"
  2907 ;; Parameters:    Size  Location     Type
  2908 ;;		None
  2909 ;; Auto vars:     Size  Location     Type
  2910 ;;		None
  2911 ;; Return value:  Size  Location     Type
  2912 ;;                  1    wreg      void 
  2913 ;; Registers used:
  2914 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2915 ;; Tracked objects:
  2916 ;;		On entry : 0/0
  2917 ;;		On exit  : 0/0
  2918 ;;		Unchanged: 0/0
  2919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2920 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2921 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2922 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2923 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2924 ;;Total ram usage:        0 bytes
  2925 ;; Hardware stack levels required when called:   13
  2926 ;; This function calls:
  2927 ;;		_I2C_Master_Init
  2928 ;;		_Test
  2929 ;;		_UI
  2930 ;;		_initEEPROM
  2931 ;;		_initLCD
  2932 ;;		_initTime
  2933 ;;		_initUI
  2934 ;;		_logRun
  2935 ;;		_machineConfig
  2936 ;;		_sort
  2937 ;;		_stopSignals
  2938 ;; This function is called by:
  2939 ;;		Startup code after reset
  2940 ;; This function uses a non-reentrant model
  2941 ;;
  2942                           
  2943                           	psect	text0
  2944  004918                     __ptext0:
  2945                           	opt stack 0
  2946  004918                     _main:
  2947                           	opt stack 18
  2948                           
  2949                           ;main.c: 20: machineConfig();
  2950                           
  2951                           ;incstack = 0
  2952  004918  EC95  F029         	call	_machineConfig	;wreg free
  2953                           
  2954                           ;main.c: 21: initLCD();
  2955  00491C  EC45  F02B         	call	_initLCD	;wreg free
  2956                           
  2957                           ;main.c: 24: RTCflag = 0;
  2958  004920  0E00               	movlw	0
  2959  004922  0100               	movlb	0	; () banked
  2960  004924  6FE5               	movwf	(_RTCflag+1)& (0+255),b
  2961  004926  0E00               	movlw	0
  2962  004928  6FE4               	movwf	_RTCflag& (0+255),b
  2963                           
  2964                           ;main.c: 25: if(RTCflag){
  2965  00492A  0100               	movlb	0	; () banked
  2966  00492C  51E4               	movf	_RTCflag& (0+255),w,b
  2967  00492E  0100               	movlb	0	; () banked
  2968  004930  11E5               	iorwf	(_RTCflag+1)& (0+255),w,b
  2969  004932  B4D8               	btfsc	status,2,c
  2970  004934  D016               	goto	l10232
  2971                           
  2972                           ; BSR set to: 0
  2973                           ;main.c: 26: initTime(0x42, 0x47, 0x17, 0x07, 0x08, 0x04, 0x17);
  2974  004936  0E47               	movlw	71
  2975  004938  0100               	movlb	0	; () banked
  2976  00493A  6F80               	movwf	initTime@m& (0+255),b
  2977  00493C  0E17               	movlw	23
  2978  00493E  0100               	movlb	0	; () banked
  2979  004940  6F81               	movwf	initTime@h& (0+255),b
  2980  004942  0E07               	movlw	7
  2981  004944  0100               	movlb	0	; () banked
  2982  004946  6F82               	movwf	initTime@w& (0+255),b
  2983  004948  0E08               	movlw	8
  2984  00494A  0100               	movlb	0	; () banked
  2985  00494C  6F83               	movwf	initTime@DD& (0+255),b
  2986  00494E  0E04               	movlw	4
  2987  004950  0100               	movlb	0	; () banked
  2988  004952  6F84               	movwf	initTime@MM& (0+255),b
  2989  004954  0E17               	movlw	23
  2990  004956  0100               	movlb	0	; () banked
  2991  004958  6F85               	movwf	initTime@YY& (0+255),b
  2992  00495A  0E42               	movlw	66
  2993  00495C  EC38  F02E         	call	_initTime
  2994                           
  2995                           ;main.c: 27: }
  2996  004960  D00B               	goto	l10234
  2997  004962                     l10232:
  2998                           
  2999                           ;main.c: 28: else{
  3000                           ;main.c: 29: I2C_Master_Init(10000);
  3001  004962  0E10               	movlw	16
  3002  004964  0100               	movlb	0	; () banked
  3003  004966  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  3004  004968  0E27               	movlw	39
  3005  00496A  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  3006  00496C  0E00               	movlw	0
  3007  00496E  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  3008  004970  0E00               	movlw	0
  3009  004972  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  3010  004974  ECF8  F029         	call	_I2C_Master_Init	;wreg free
  3011  004978                     l10234:
  3012                           
  3013                           ;main.c: 30: }
  3014                           ;main.c: 32: initUI();
  3015  004978  EC68  F02C         	call	_initUI	;wreg free
  3016                           
  3017                           ;main.c: 33: first = 1;
  3018  00497C  0E00               	movlw	0
  3019  00497E  0101               	movlb	1	; () banked
  3020  004980  6F3C               	movwf	(_first+1)& (0+255),b
  3021  004982  0E01               	movlw	1
  3022  004984  6F3B               	movwf	_first& (0+255),b
  3023                           
  3024                           ; BSR set to: 1
  3025                           ;main.c: 34: initEEPROM();
  3026  004986  EC80  F02E         	call	_initEEPROM	;wreg free
  3027                           
  3028                           ;main.c: 45: switch(machine_state){
  3029                           
  3030                           ;main.c: 44: while(1){
  3031  00498A  D018               	goto	l10258
  3032  00498C                     l10240:
  3033                           
  3034                           ;main.c: 47: UI();
  3035  00498C  EC09  F000         	call	_UI	;wreg free
  3036                           
  3037                           ;main.c: 48: break;
  3038  004990  D015               	goto	l10258
  3039  004992                     l10242:
  3040                           
  3041                           ;main.c: 50: sort();
  3042  004992  EC27  F02E         	call	_sort	;wreg free
  3043                           
  3044                           ;main.c: 51: break;
  3045  004996  D012               	goto	l10258
  3046  004998                     l10244:
  3047                           
  3048                           ;main.c: 53: stopSignals();
  3049  004998  EC58  F02E         	call	_stopSignals	;wreg free
  3050                           
  3051                           ;main.c: 54: logRun();
  3052  00499C  EC15  F020         	call	_logRun	;wreg free
  3053                           
  3054                           ;main.c: 55: first = 1;
  3055  0049A0  0E00               	movlw	0
  3056  0049A2  0101               	movlb	1	; () banked
  3057  0049A4  6F3C               	movwf	(_first+1)& (0+255),b
  3058  0049A6  0E01               	movlw	1
  3059  0049A8  6F3B               	movwf	_first& (0+255),b
  3060                           
  3061                           ; BSR set to: 1
  3062                           ;main.c: 56: UI();
  3063  0049AA  EC09  F000         	call	_UI	;wreg free
  3064                           
  3065                           ;main.c: 57: break;
  3066  0049AE  D006               	goto	l10258
  3067  0049B0                     l10252:
  3068                           
  3069                           ;main.c: 59: Test();
  3070  0049B0  ECD0  F021         	call	_Test	;wreg free
  3071                           
  3072                           ;main.c: 60: break;
  3073  0049B4  D003               	goto	l10258
  3074  0049B6                     l10254:
  3075                           
  3076                           ;main.c: 62: stopSignals();
  3077  0049B6  EC58  F02E         	call	_stopSignals	;wreg free
  3078  0049BA                     l508:
  3079  0049BA  D7FF               	goto	l508
  3080  0049BC                     l10258:
  3081  0049BC  0100               	movlb	0	; () banked
  3082  0049BE  51FC               	movf	_machine_state& (0+255),w,b
  3083                           
  3084                           ; Switch size 1, requested type "space"
  3085                           ; Number of cases is 5, Range of values is 0 to 4
  3086                           ; switch strategies available:
  3087                           ; Name         Instructions Cycles
  3088                           ; simple_byte           16     9 (average)
  3089                           ;	Chosen strategy is simple_byte
  3090  0049C0  0A00               	xorlw	0	; case 0
  3091  0049C2  B4D8               	btfsc	status,2,c
  3092  0049C4  D7E3               	goto	l10240
  3093  0049C6  0A01               	xorlw	1	; case 1
  3094  0049C8  B4D8               	btfsc	status,2,c
  3095  0049CA  D7E3               	goto	l10242
  3096  0049CC  0A03               	xorlw	3	; case 2
  3097  0049CE  B4D8               	btfsc	status,2,c
  3098  0049D0  D7E3               	goto	l10244
  3099  0049D2  0A01               	xorlw	1	; case 3
  3100  0049D4  B4D8               	btfsc	status,2,c
  3101  0049D6  D7EC               	goto	l10252
  3102  0049D8  0A07               	xorlw	7	; case 4
  3103  0049DA  B4D8               	btfsc	status,2,c
  3104  0049DC  D7EC               	goto	l10254
  3105                           
  3106                           ; BSR set to: 0
  3107                           
  3108                           ; BSR set to: 0
  3109  0049DE  D7EE               	goto	l10258
  3110  0049E0                     __end_of_main:
  3111                           	opt stack 0
  3112                           tblptru	equ	0xFF8
  3113                           tblptrh	equ	0xFF7
  3114                           tblptrl	equ	0xFF6
  3115                           tablat	equ	0xFF5
  3116                           postinc0	equ	0xFEE
  3117                           wreg	equ	0xFE8
  3118                           postdec1	equ	0xFE5
  3119                           fsr1l	equ	0xFE1
  3120                           status	equ	0xFD8
  3121                           
  3122 ;; *************** function _sort *****************
  3123 ;; Defined at:
  3124 ;;		line 71 in file "sort.c"
  3125 ;; Parameters:    Size  Location     Type
  3126 ;;		None
  3127 ;; Auto vars:     Size  Location     Type
  3128 ;;		None
  3129 ;; Return value:  Size  Location     Type
  3130 ;;                  1    wreg      void 
  3131 ;; Registers used:
  3132 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3133 ;; Tracked objects:
  3134 ;;		On entry : 0/0
  3135 ;;		On exit  : 0/0
  3136 ;;		Unchanged: 0/0
  3137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3138 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3139 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3140 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3141 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3142 ;;Total ram usage:        0 bytes
  3143 ;; Hardware stack levels used:    1
  3144 ;; Hardware stack levels required when called:   12
  3145 ;; This function calls:
  3146 ;;		_Distribution
  3147 ;;		_ID
  3148 ;;		_Loading
  3149 ;; This function is called by:
  3150 ;;		_main
  3151 ;; This function uses a non-reentrant model
  3152 ;;
  3153                           
  3154                           	psect	text1
  3155  005C4E                     __ptext1:
  3156                           	opt stack 0
  3157  005C4E                     _sort:
  3158                           	opt stack 18
  3159                           
  3160                           ;sort.c: 72: if(machine_state == Sorting_state){
  3161                           
  3162                           ; BSR set to: 0
  3163                           ;incstack = 0
  3164  005C4E  0100               	movlb	0	; () banked
  3165  005C50  05FC               	decf	_machine_state& (0+255),w,b
  3166  005C52  B4D8               	btfsc	status,2,c
  3167                           
  3168                           ; BSR set to: 0
  3169                           ;sort.c: 73: Loading();
  3170  005C54  ECC9  F008         	call	_Loading	;wreg free
  3171                           
  3172                           ;sort.c: 74: }
  3173                           ;sort.c: 75: if(machine_state == Sorting_state){
  3174  005C58  0100               	movlb	0	; () banked
  3175  005C5A  05FC               	decf	_machine_state& (0+255),w,b
  3176  005C5C  B4D8               	btfsc	status,2,c
  3177                           
  3178                           ; BSR set to: 0
  3179                           ;sort.c: 76: ID();
  3180  005C5E  EC74  F00B         	call	_ID	;wreg free
  3181                           
  3182                           ;sort.c: 77: }
  3183                           ;sort.c: 78: if(machine_state == Sorting_state){
  3184  005C62  0100               	movlb	0	; () banked
  3185  005C64  05FC               	decf	_machine_state& (0+255),w,b
  3186  005C66  A4D8               	btfss	status,2,c
  3187  005C68  0012               	return	
  3188                           
  3189                           ; BSR set to: 0
  3190                           ;sort.c: 79: Distribution();
  3191  005C6A  EC46  F023         	call	_Distribution	;wreg free
  3192  005C6E  0012               	return	
  3193  005C70                     __end_of_sort:
  3194                           	opt stack 0
  3195                           tblptru	equ	0xFF8
  3196                           tblptrh	equ	0xFF7
  3197                           tblptrl	equ	0xFF6
  3198                           tablat	equ	0xFF5
  3199                           postinc0	equ	0xFEE
  3200                           wreg	equ	0xFE8
  3201                           postdec1	equ	0xFE5
  3202                           fsr1l	equ	0xFE1
  3203                           status	equ	0xFD8
  3204                           
  3205 ;; *************** function _Loading *****************
  3206 ;; Defined at:
  3207 ;;		line 83 in file "sort.c"
  3208 ;; Parameters:    Size  Location     Type
  3209 ;;		None
  3210 ;; Auto vars:     Size  Location     Type
  3211 ;;  i               2   62[BANK0 ] int 
  3212 ;;  i               2   60[BANK0 ] int 
  3213 ;;  i               2   58[BANK0 ] int 
  3214 ;;  i               2   56[BANK0 ] int 
  3215 ;;  i               2   54[BANK0 ] int 
  3216 ;;  j               2   66[BANK0 ] int 
  3217 ;;  i               2   64[BANK0 ] int 
  3218 ;;  addr            2   51[BANK0 ] unsigned short 
  3219 ;;  byte1           1   53[BANK0 ] unsigned char 
  3220 ;; Return value:  Size  Location     Type
  3221 ;;                  1    wreg      void 
  3222 ;; Registers used:
  3223 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3224 ;; Tracked objects:
  3225 ;;		On entry : 0/0
  3226 ;;		On exit  : 0/0
  3227 ;;		Unchanged: 0/0
  3228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3229 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3230 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3231 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3232 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3233 ;;Total ram usage:       19 bytes
  3234 ;; Hardware stack levels used:    1
  3235 ;; Hardware stack levels required when called:   11
  3236 ;; This function calls:
  3237 ;;		_EEPROM_read
  3238 ;;		_EEPROM_write
  3239 ;;		_delay_ms
  3240 ;;		_getIR
  3241 ;;		_getMAG
  3242 ;;		_initGlobalVars
  3243 ;;		_initServos
  3244 ;;		_initSortTimer
  3245 ;;		_lcdInst
  3246 ;;		_readIR
  3247 ;; This function is called by:
  3248 ;;		_sort
  3249 ;; This function uses a non-reentrant model
  3250 ;;
  3251                           
  3252                           	psect	text2
  3253  001192                     __ptext2:
  3254                           	opt stack 0
  3255  001192                     _Loading:
  3256                           	opt stack 18
  3257                           
  3258                           ;sort.c: 84: if(first){
  3259                           
  3260                           ;incstack = 0
  3261  001192  0101               	movlb	1	; () banked
  3262  001194  513B               	movf	_first& (0+255),w,b
  3263  001196  0101               	movlb	1	; () banked
  3264  001198  113C               	iorwf	(_first+1)& (0+255),w,b
  3265  00119A  B4D8               	btfsc	status,2,c
  3266  00119C  D069               	goto	l7880
  3267                           
  3268                           ; BSR set to: 1
  3269                           ;sort.c: 85: TMR1IE = 1;
  3270  00119E  809D               	bsf	3997,0,c	;volatile
  3271                           
  3272                           ;sort.c: 86: TMR2IE = 1;
  3273  0011A0  829D               	bsf	3997,1,c	;volatile
  3274                           
  3275                           ;sort.c: 87: TMR3IE = 1;
  3276  0011A2  82A0               	bsf	4000,1,c	;volatile
  3277                           
  3278                           ; BSR set to: 1
  3279                           ;sort.c: 88: initGlobalVars();
  3280  0011A4  EC22  F024         	call	_initGlobalVars	;wreg free
  3281                           
  3282                           ;sort.c: 89: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  3283  0011A8  0E01               	movlw	1
  3284  0011AA  ECB1  F02E         	call	_lcdInst
  3285  0011AE  0E68               	movlw	104
  3286  0011B0  0100               	movlb	0	; () banked
  3287  0011B2  6FB1               	movwf	??_Loading& (0+255),b
  3288  0011B4  0EE4               	movlw	228
  3289  0011B6                     u10197:
  3290  0011B6  2EE8               	decfsz	wreg,f,c
  3291  0011B8  D7FE               	bra	u10197
  3292  0011BA  2FB1               	decfsz	??_Loading& (0+255),f,b
  3293  0011BC  D7FC               	bra	u10197
  3294  0011BE  F000               	nop	
  3295                           
  3296                           ;sort.c: 90: initSortTimer();
  3297  0011C0  EC11  F026         	call	_initSortTimer	;wreg free
  3298                           
  3299                           ;sort.c: 91: LATCbits.LATC5 = 1;
  3300  0011C4  8A8B               	bsf	3979,5,c	;volatile
  3301                           
  3302                           ;sort.c: 96: sel = EEPROM_read(0);
  3303  0011C6  0E00               	movlw	0
  3304  0011C8  0100               	movlb	0	; () banked
  3305  0011CA  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  3306  0011CC  0E00               	movlw	0
  3307  0011CE  6F80               	movwf	EEPROM_read@address& (0+255),b
  3308  0011D0  EC74  F02E         	call	_EEPROM_read	;wreg free
  3309  0011D4  0100               	movlb	0	; () banked
  3310  0011D6  6FFD               	movwf	_sel& (0+255),b
  3311                           
  3312                           ; BSR set to: 0
  3313                           ;sort.c: 97: unsigned short addr = 1 + 11 * sel;
  3314  0011D8  0100               	movlb	0	; () banked
  3315  0011DA  51FD               	movf	_sel& (0+255),w,b
  3316  0011DC  0D0B               	mullw	11
  3317  0011DE  0E01               	movlw	1
  3318  0011E0  24F3               	addwf	prodl,w,c
  3319  0011E2  0100               	movlb	0	; () banked
  3320  0011E4  6FB3               	movwf	Loading@addr& (0+255),b
  3321  0011E6  0E00               	movlw	0
  3322  0011E8  20F4               	addwfc	prodh,w,c
  3323  0011EA  0100               	movlb	0	; () banked
  3324  0011EC  6FB4               	movwf	(Loading@addr+1)& (0+255),b
  3325                           
  3326                           ; BSR set to: 0
  3327                           ;sort.c: 98: unsigned char byte1 = 0b01111111;
  3328  0011EE  0E7F               	movlw	127
  3329  0011F0  0100               	movlb	0	; () banked
  3330  0011F2  6FB5               	movwf	Loading@byte1& (0+255),b
  3331                           
  3332                           ; BSR set to: 0
  3333                           ;sort.c: 99: EEPROM_write(addr, byte1);
  3334  0011F4  C0B3  F0AB         	movff	Loading@addr,EEPROM_write@address
  3335  0011F8  C0B4  F0AC         	movff	Loading@addr+1,EEPROM_write@address+1
  3336  0011FC  C0B5  F0AD         	movff	Loading@byte1,EEPROM_write@data
  3337  001200  ECD2  F022         	call	_EEPROM_write	;wreg free
  3338                           
  3339                           ;sort.c: 102: LATBbits.LATB2 = 0;
  3340  001204  948A               	bcf	3978,2,c	;volatile
  3341                           
  3342                           ;sort.c: 104: for(int i=0; i<46; i++){
  3343  001206  0E00               	movlw	0
  3344  001208  0100               	movlb	0	; () banked
  3345  00120A  6FC1               	movwf	(Loading@i+1)& (0+255),b
  3346  00120C  0E00               	movlw	0
  3347  00120E  6FC0               	movwf	Loading@i& (0+255),b
  3348                           
  3349                           ; BSR set to: 0
  3350  001210  0100               	movlb	0	; () banked
  3351  001212  BFC1               	btfsc	(Loading@i+1)& (0+255),7,b
  3352  001214  D008               	goto	l7870
  3353  001216  0100               	movlb	0	; () banked
  3354  001218  51C1               	movf	(Loading@i+1)& (0+255),w,b
  3355  00121A  E126               	bnz	l795
  3356  00121C  0E2E               	movlw	46
  3357  00121E  0100               	movlb	0	; () banked
  3358  001220  5DC0               	subwf	Loading@i& (0+255),w,b
  3359  001222  B0D8               	btfsc	status,0,c
  3360  001224  D021               	goto	l795
  3361  001226                     l7870:
  3362                           
  3363                           ; BSR set to: 0
  3364                           ;sort.c: 105: LATBbits.LATB2 = !LATBbits.LATB2;
  3365  001226  B48A               	btfsc	3978,2,c	;volatile
  3366  001228  D004               	goto	u6610
  3367  00122A  0100               	movlb	0	; () banked
  3368  00122C  6BB1               	clrf	??_Loading& (0+255),b
  3369  00122E  2BB1               	incf	??_Loading& (0+255),f,b
  3370  001230  D002               	goto	u6628
  3371  001232                     u6610:
  3372  001232  0100               	movlb	0	; () banked
  3373  001234  6BB1               	clrf	??_Loading& (0+255),b
  3374  001236                     u6628:
  3375  001236  0100               	movlb	0	; () banked
  3376  001238  47B1               	rlncf	??_Loading& (0+255),f,b
  3377  00123A  47B1               	rlncf	??_Loading& (0+255),f,b
  3378  00123C  508A               	movf	3978,w,c	;volatile
  3379  00123E  0100               	movlb	0	; () banked
  3380  001240  19B1               	xorwf	??_Loading& (0+255),w,b
  3381  001242  0BFB               	andlw	-5
  3382  001244  19B1               	xorwf	??_Loading& (0+255),w,b
  3383  001246  6E8A               	movwf	3978,c	;volatile
  3384                           
  3385                           ; BSR set to: 0
  3386                           ;sort.c: 106: delay_ms(45-i);
  3387  001248  0100               	movlb	0	; () banked
  3388  00124A  51C0               	movf	Loading@i& (0+255),w,b
  3389  00124C  0800               	sublw	0
  3390  00124E  0F2D               	addlw	45
  3391  001250  ECC7  F02D         	call	_delay_ms
  3392  001254  0100               	movlb	0	; () banked
  3393  001256  4BC0               	infsnz	Loading@i& (0+255),f,b
  3394  001258  2BC1               	incf	(Loading@i+1)& (0+255),f,b
  3395                           
  3396                           ; BSR set to: 0
  3397  00125A  0100               	movlb	0	; () banked
  3398  00125C  BFC1               	btfsc	(Loading@i+1)& (0+255),7,b
  3399  00125E  D7E3               	goto	l7870
  3400  001260  0100               	movlb	0	; () banked
  3401  001262  51C1               	movf	(Loading@i+1)& (0+255),w,b
  3402  001264  E101               	bnz	u6630
  3403  001266  D7DA               	goto	L1
  3404  001268                     u6630:
  3405  001268                     l795:
  3406                           
  3407                           ; BSR set to: 0
  3408                           ;sort.c: 107: }
  3409                           ;sort.c: 108: LATBbits.LATB2 = 1;
  3410  001268  848A               	bsf	3978,2,c	;volatile
  3411                           
  3412                           ; BSR set to: 0
  3413                           ;sort.c: 111: initServos();
  3414  00126A  EC09  F028         	call	_initServos	;wreg free
  3415                           
  3416                           ;sort.c: 112: }
  3417  00126E  0012               	return	
  3418  001270                     l7880:
  3419                           
  3420                           ;sort.c: 113: else{
  3421                           ;sort.c: 116: if(!f_loadingNewCan){
  3422  001270  0100               	movlb	0	; () banked
  3423  001272  51EC               	movf	_f_loadingNewCan& (0+255),w,b
  3424  001274  0100               	movlb	0	; () banked
  3425  001276  11ED               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3426  001278  A4D8               	btfss	status,2,c
  3427  00127A  D018               	goto	l7896
  3428                           
  3429                           ; BSR set to: 0
  3430                           ;sort.c: 118: getIR();
  3431  00127C  EC81  F028         	call	_getIR	;wreg free
  3432                           
  3433                           ;sort.c: 120: if(!f_loadingNewCan){
  3434  001280  0100               	movlb	0	; () banked
  3435  001282  51EC               	movf	_f_loadingNewCan& (0+255),w,b
  3436  001284  0100               	movlb	0	; () banked
  3437  001286  11ED               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3438  001288  B4D8               	btfsc	status,2,c
  3439  00128A  0012               	return	
  3440                           
  3441                           ; BSR set to: 0
  3442                           ;sort.c: 124: else{
  3443                           ;sort.c: 125: count_total++;
  3444                           
  3445                           ; BSR set to: 0
  3446                           
  3447                           ; BSR set to: 0
  3448                           ;sort.c: 122: }
  3449                           
  3450                           ; BSR set to: 0
  3451                           ;sort.c: 121: return;
  3452  00128C  0100               	movlb	0	; () banked
  3453  00128E  4BFE               	infsnz	_count_total& (0+255),f,b
  3454  001290  2BFF               	incf	(_count_total+1)& (0+255),f,b
  3455                           
  3456                           ; BSR set to: 0
  3457                           ;sort.c: 126: if(count_total == 12){
  3458  001292  0E0C               	movlw	12
  3459  001294  0100               	movlb	0	; () banked
  3460  001296  19FE               	xorwf	_count_total& (0+255),w,b
  3461  001298  0100               	movlb	0	; () banked
  3462  00129A  11FF               	iorwf	(_count_total+1)& (0+255),w,b
  3463  00129C  A4D8               	btfss	status,2,c
  3464  00129E  0012               	return	
  3465                           
  3466                           ; BSR set to: 0
  3467                           ;sort.c: 127: f_lastCan = 1;
  3468  0012A0  0E00               	movlw	0
  3469  0012A2  0100               	movlb	0	; () banked
  3470  0012A4  6FEB               	movwf	(_f_lastCan+1)& (0+255),b
  3471  0012A6  0E01               	movlw	1
  3472  0012A8  6FEA               	movwf	_f_lastCan& (0+255),b
  3473                           
  3474                           ; BSR set to: 0
  3475                           ;sort.c: 128: }
  3476                           ;sort.c: 129: }
  3477                           ;sort.c: 130: }
  3478                           
  3479                           ; BSR set to: 0
  3480  0012AA  0012               	return	
  3481  0012AC                     l7896:
  3482                           
  3483                           ; BSR set to: 0
  3484                           ;sort.c: 133: else if(f_ID_receive){
  3485  0012AC  0101               	movlb	1	; () banked
  3486  0012AE  5131               	movf	_f_ID_receive& (0+255),w,b
  3487  0012B0  0101               	movlb	1	; () banked
  3488  0012B2  1132               	iorwf	(_f_ID_receive+1)& (0+255),w,b
  3489  0012B4  B4D8               	btfsc	status,2,c
  3490  0012B6  0012               	return	
  3491                           
  3492                           ; BSR set to: 1
  3493                           ;sort.c: 134: f_most_recent_sort_time = 1;
  3494  0012B8  0E00               	movlw	0
  3495  0012BA  0101               	movlb	1	; () banked
  3496  0012BC  6F3A               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
  3497  0012BE  0E01               	movlw	1
  3498  0012C0  6F39               	movwf	_f_most_recent_sort_time& (0+255),b
  3499                           
  3500                           ;sort.c: 135: f_loadingNewCan = 0;
  3501  0012C2  0E00               	movlw	0
  3502  0012C4  0100               	movlb	0	; () banked
  3503  0012C6  6FED               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3504  0012C8  0E00               	movlw	0
  3505  0012CA  6FEC               	movwf	_f_loadingNewCan& (0+255),b
  3506                           
  3507                           ; BSR set to: 0
  3508                           ;sort.c: 136: _delay((unsigned long)((400)*(32000000/4000.0)));
  3509  0012CC  0E11               	movlw	17
  3510  0012CE  0100               	movlb	0	; () banked
  3511  0012D0  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3512  0012D2  0E3C               	movlw	60
  3513  0012D4  0100               	movlb	0	; () banked
  3514  0012D6  6FB1               	movwf	??_Loading& (0+255),b
  3515  0012D8  0ECB               	movlw	203
  3516  0012DA                     u10207:
  3517  0012DA  2EE8               	decfsz	wreg,f,c
  3518  0012DC  D7FE               	bra	u10207
  3519  0012DE  2FB1               	decfsz	??_Loading& (0+255),f,b
  3520  0012E0  D7FC               	bra	u10207
  3521  0012E2  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3522  0012E4  D7FA               	bra	u10207
  3523                           
  3524                           ;sort.c: 137: LATBbits.LATB2 = 0;
  3525  0012E6  948A               	bcf	3978,2,c	;volatile
  3526                           
  3527                           ;sort.c: 141: f_arm_position = 1;
  3528  0012E8  0E00               	movlw	0
  3529  0012EA  0100               	movlb	0	; () banked
  3530  0012EC  6FE9               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  3531  0012EE  0E01               	movlw	1
  3532  0012F0  6FE8               	movwf	_f_arm_position& (0+255),b	;volatile
  3533                           
  3534                           ; BSR set to: 0
  3535                           ;sort.c: 143: delay_ms(750);
  3536  0012F2  0EEE               	movlw	238
  3537  0012F4  ECC7  F02D         	call	_delay_ms
  3538                           
  3539                           ;sort.c: 144: getMAG();
  3540  0012F8  EC36  F02C         	call	_getMAG	;wreg free
  3541                           
  3542                           ;sort.c: 145: sensor_outputs[0] = MAG_signal;
  3543  0012FC  C0E2  F0DA         	movff	_MAG_signal,_sensor_outputs
  3544  001300  C0E3  F0DB         	movff	_MAG_signal+1,_sensor_outputs+1
  3545                           
  3546                           ;sort.c: 147: TMR2IE = 0;
  3547  001304  929D               	bcf	3997,1,c	;volatile
  3548                           
  3549                           ;sort.c: 148: if(sensor_outputs[0]){
  3550  001306  0100               	movlb	0	; () banked
  3551  001308  51DA               	movf	_sensor_outputs& (0+255),w,b
  3552  00130A  0100               	movlb	0	; () banked
  3553  00130C  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3554  00130E  B4D8               	btfsc	status,2,c
  3555  001310  D01D               	goto	l7928
  3556                           
  3557                           ; BSR set to: 0
  3558                           ;sort.c: 149: for(int i = 0; i<2500; i++){
  3559  001312  0E00               	movlw	0
  3560  001314  0100               	movlb	0	; () banked
  3561  001316  6FB7               	movwf	(Loading@i_1123+1)& (0+255),b
  3562  001318  0E00               	movlw	0
  3563  00131A  6FB6               	movwf	Loading@i_1123& (0+255),b
  3564  00131C                     l7918:
  3565                           
  3566                           ; BSR set to: 0
  3567  00131C  0100               	movlb	0	; () banked
  3568  00131E  BFB7               	btfsc	(Loading@i_1123+1)& (0+255),7,b
  3569  001320  D008               	goto	l805
  3570  001322  0EC4               	movlw	196
  3571  001324  0100               	movlb	0	; () banked
  3572  001326  5DB6               	subwf	Loading@i_1123& (0+255),w,b
  3573  001328  0E09               	movlw	9
  3574  00132A  0100               	movlb	0	; () banked
  3575  00132C  59B7               	subwfb	(Loading@i_1123+1)& (0+255),w,b
  3576  00132E  B0D8               	btfsc	status,0,c
  3577  001330  D02B               	goto	l807
  3578  001332                     l805:
  3579                           
  3580                           ; BSR set to: 0
  3581                           ;sort.c: 150: LATAbits.LATA4 = 1;
  3582  001332  8889               	bsf	3977,4,c	;volatile
  3583                           
  3584                           ; BSR set to: 0
  3585                           ;sort.c: 151: _delay((unsigned long)((75)*(32000000/4000000.0)));
  3586  001334  0EC8               	movlw	200
  3587  001336                     u10217:
  3588  001336  2EE8               	decfsz	wreg,f,c
  3589  001338  D7FE               	bra	u10217
  3590                           
  3591                           ;sort.c: 152: LATAbits.LATA4 = 0;
  3592  00133A  9889               	bcf	3977,4,c	;volatile
  3593                           
  3594                           ;sort.c: 153: _delay((unsigned long)((25)*(32000000/4000000.0)));
  3595  00133C  0E42               	movlw	66
  3596  00133E                     u10227:
  3597  00133E  2EE8               	decfsz	wreg,f,c
  3598  001340  D7FE               	bra	u10227
  3599  001342  D000               	nop2	
  3600  001344  0100               	movlb	0	; () banked
  3601  001346  4BB6               	infsnz	Loading@i_1123& (0+255),f,b
  3602  001348  2BB7               	incf	(Loading@i_1123+1)& (0+255),f,b
  3603  00134A  D7E8               	goto	l7918
  3604  00134C                     l7928:
  3605                           
  3606                           ; BSR set to: 0
  3607                           ;sort.c: 156: else{
  3608                           ;sort.c: 157: for(int i = 0; i<2500; i++){
  3609  00134C  0E00               	movlw	0
  3610  00134E  0100               	movlb	0	; () banked
  3611  001350  6FB9               	movwf	(Loading@i_1132+1)& (0+255),b
  3612  001352  0E00               	movlw	0
  3613  001354  6FB8               	movwf	Loading@i_1132& (0+255),b
  3614  001356                     l7930:
  3615                           
  3616                           ; BSR set to: 0
  3617  001356  0100               	movlb	0	; () banked
  3618  001358  BFB9               	btfsc	(Loading@i_1132+1)& (0+255),7,b
  3619  00135A  D008               	goto	l808
  3620  00135C  0EC4               	movlw	196
  3621  00135E  0100               	movlb	0	; () banked
  3622  001360  5DB8               	subwf	Loading@i_1132& (0+255),w,b
  3623  001362  0E09               	movlw	9
  3624  001364  0100               	movlb	0	; () banked
  3625  001366  59B9               	subwfb	(Loading@i_1132+1)& (0+255),w,b
  3626  001368  B0D8               	btfsc	status,0,c
  3627  00136A  D00E               	goto	l807
  3628  00136C                     l808:
  3629                           
  3630                           ; BSR set to: 0
  3631                           ;sort.c: 158: LATAbits.LATA4 = 1;
  3632  00136C  8889               	bsf	3977,4,c	;volatile
  3633                           
  3634                           ; BSR set to: 0
  3635                           ;sort.c: 159: _delay((unsigned long)((50)*(32000000/4000000.0)));
  3636  00136E  0E85               	movlw	133
  3637  001370                     u10237:
  3638  001370  2EE8               	decfsz	wreg,f,c
  3639  001372  D7FE               	bra	u10237
  3640  001374  F000               	nop	
  3641                           
  3642                           ;sort.c: 160: LATAbits.LATA4 = 0;
  3643  001376  9889               	bcf	3977,4,c	;volatile
  3644                           
  3645                           ;sort.c: 161: _delay((unsigned long)((50)*(32000000/4000000.0)));
  3646  001378  0E85               	movlw	133
  3647  00137A                     u10247:
  3648  00137A  2EE8               	decfsz	wreg,f,c
  3649  00137C  D7FE               	bra	u10247
  3650  00137E  F000               	nop	
  3651  001380  0100               	movlb	0	; () banked
  3652  001382  4BB8               	infsnz	Loading@i_1132& (0+255),f,b
  3653  001384  2BB9               	incf	(Loading@i_1132+1)& (0+255),f,b
  3654  001386  D7E7               	goto	l7930
  3655  001388                     l807:
  3656                           
  3657                           ; BSR set to: 0
  3658                           ;sort.c: 162: }
  3659                           ;sort.c: 163: }
  3660                           ;sort.c: 164: TMR2IE = 1;
  3661  001388  829D               	bsf	3997,1,c	;volatile
  3662                           
  3663                           ; BSR set to: 0
  3664                           ;sort.c: 165: _delay((unsigned long)((350)*(32000000/4000.0)));
  3665  00138A  0E0F               	movlw	15
  3666  00138C  0100               	movlb	0	; () banked
  3667  00138E  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3668  001390  0E35               	movlw	53
  3669  001392  0100               	movlb	0	; () banked
  3670  001394  6FB1               	movwf	??_Loading& (0+255),b
  3671  001396  0E51               	movlw	81
  3672  001398                     u10257:
  3673  001398  2EE8               	decfsz	wreg,f,c
  3674  00139A  D7FE               	bra	u10257
  3675  00139C  2FB1               	decfsz	??_Loading& (0+255),f,b
  3676  00139E  D7FC               	bra	u10257
  3677  0013A0  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3678  0013A2  D7FA               	bra	u10257
  3679                           
  3680                           ;sort.c: 167: readIR();
  3681  0013A4  ECD3  F02A         	call	_readIR	;wreg free
  3682                           
  3683                           ;sort.c: 168: if(IR_signal==1){
  3684  0013A8  0100               	movlb	0	; () banked
  3685  0013AA  05E0               	decf	_IR_signal& (0+255),w,b
  3686  0013AC  0100               	movlb	0	; () banked
  3687  0013AE  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  3688  0013B0  A4D8               	btfss	status,2,c
  3689  0013B2  D194               	goto	l8072
  3690                           
  3691                           ; BSR set to: 0
  3692                           ;sort.c: 169: _delay((unsigned long)((70)*(32000000/4000.0)));
  3693  0013B4  0E03               	movlw	3
  3694  0013B6  0100               	movlb	0	; () banked
  3695  0013B8  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3696  0013BA  0ED8               	movlw	216
  3697  0013BC  0100               	movlb	0	; () banked
  3698  0013BE  6FB1               	movwf	??_Loading& (0+255),b
  3699  0013C0  0E41               	movlw	65
  3700  0013C2                     u10267:
  3701  0013C2  2EE8               	decfsz	wreg,f,c
  3702  0013C4  D7FE               	bra	u10267
  3703  0013C6  2FB1               	decfsz	??_Loading& (0+255),f,b
  3704  0013C8  D7FC               	bra	u10267
  3705  0013CA  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3706  0013CC  D7FA               	bra	u10267
  3707  0013CE  D000               	nop2	
  3708                           
  3709                           ;sort.c: 170: readIR();
  3710  0013D0  ECD3  F02A         	call	_readIR	;wreg free
  3711                           
  3712                           ;sort.c: 171: if(IR_signal==1){
  3713  0013D4  0100               	movlb	0	; () banked
  3714  0013D6  05E0               	decf	_IR_signal& (0+255),w,b
  3715  0013D8  0100               	movlb	0	; () banked
  3716  0013DA  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  3717  0013DC  A4D8               	btfss	status,2,c
  3718  0013DE  D041               	goto	l7978
  3719                           
  3720                           ; BSR set to: 0
  3721                           ;sort.c: 172: if(sensor_outputs[0]){
  3722  0013E0  0100               	movlb	0	; () banked
  3723  0013E2  51DA               	movf	_sensor_outputs& (0+255),w,b
  3724  0013E4  0100               	movlb	0	; () banked
  3725  0013E6  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3726  0013E8  B4D8               	btfsc	status,2,c
  3727  0013EA  D01D               	goto	l7966
  3728                           
  3729                           ; BSR set to: 0
  3730                           ;sort.c: 173: for(int i = 0; i<2500; i++){
  3731  0013EC  0E00               	movlw	0
  3732  0013EE  0100               	movlb	0	; () banked
  3733  0013F0  6FBB               	movwf	(Loading@i_1134+1)& (0+255),b
  3734  0013F2  0E00               	movlw	0
  3735  0013F4  6FBA               	movwf	Loading@i_1134& (0+255),b
  3736  0013F6                     l7956:
  3737                           
  3738                           ; BSR set to: 0
  3739  0013F6  0100               	movlb	0	; () banked
  3740  0013F8  BFBB               	btfsc	(Loading@i_1134+1)& (0+255),7,b
  3741  0013FA  D008               	goto	l813
  3742  0013FC  0EC4               	movlw	196
  3743  0013FE  0100               	movlb	0	; () banked
  3744  001400  5DBA               	subwf	Loading@i_1134& (0+255),w,b
  3745  001402  0E09               	movlw	9
  3746  001404  0100               	movlb	0	; () banked
  3747  001406  59BB               	subwfb	(Loading@i_1134+1)& (0+255),w,b
  3748  001408  B0D8               	btfsc	status,0,c
  3749  00140A  D02B               	goto	l7978
  3750  00140C                     l813:
  3751                           
  3752                           ; BSR set to: 0
  3753                           ;sort.c: 174: LATAbits.LATA4 = 1;
  3754  00140C  8889               	bsf	3977,4,c	;volatile
  3755                           
  3756                           ; BSR set to: 0
  3757                           ;sort.c: 175: _delay((unsigned long)((75)*(32000000/4000000.0)));
  3758  00140E  0EC8               	movlw	200
  3759  001410                     u10277:
  3760  001410  2EE8               	decfsz	wreg,f,c
  3761  001412  D7FE               	bra	u10277
  3762                           
  3763                           ;sort.c: 176: LATAbits.LATA4 = 0;
  3764  001414  9889               	bcf	3977,4,c	;volatile
  3765                           
  3766                           ;sort.c: 177: _delay((unsigned long)((25)*(32000000/4000000.0)));
  3767  001416  0E42               	movlw	66
  3768  001418                     u10287:
  3769  001418  2EE8               	decfsz	wreg,f,c
  3770  00141A  D7FE               	bra	u10287
  3771  00141C  D000               	nop2	
  3772  00141E  0100               	movlb	0	; () banked
  3773  001420  4BBA               	infsnz	Loading@i_1134& (0+255),f,b
  3774  001422  2BBB               	incf	(Loading@i_1134+1)& (0+255),f,b
  3775  001424  D7E8               	goto	l7956
  3776  001426                     l7966:
  3777                           
  3778                           ; BSR set to: 0
  3779                           ;sort.c: 180: else{
  3780                           ;sort.c: 181: for(int i = 0; i<2500; i++){
  3781  001426  0E00               	movlw	0
  3782  001428  0100               	movlb	0	; () banked
  3783  00142A  6FBD               	movwf	(Loading@i_1135+1)& (0+255),b
  3784  00142C  0E00               	movlw	0
  3785  00142E  6FBC               	movwf	Loading@i_1135& (0+255),b
  3786  001430                     l7968:
  3787                           
  3788                           ; BSR set to: 0
  3789  001430  0100               	movlb	0	; () banked
  3790  001432  BFBD               	btfsc	(Loading@i_1135+1)& (0+255),7,b
  3791  001434  D008               	goto	l816
  3792  001436  0EC4               	movlw	196
  3793  001438  0100               	movlb	0	; () banked
  3794  00143A  5DBC               	subwf	Loading@i_1135& (0+255),w,b
  3795  00143C  0E09               	movlw	9
  3796  00143E  0100               	movlb	0	; () banked
  3797  001440  59BD               	subwfb	(Loading@i_1135+1)& (0+255),w,b
  3798  001442  B0D8               	btfsc	status,0,c
  3799  001444  D00E               	goto	l7978
  3800  001446                     l816:
  3801                           
  3802                           ; BSR set to: 0
  3803                           ;sort.c: 182: LATAbits.LATA4 = 1;
  3804  001446  8889               	bsf	3977,4,c	;volatile
  3805                           
  3806                           ; BSR set to: 0
  3807                           ;sort.c: 183: _delay((unsigned long)((50)*(32000000/4000000.0)));
  3808  001448  0E85               	movlw	133
  3809  00144A                     u10297:
  3810  00144A  2EE8               	decfsz	wreg,f,c
  3811  00144C  D7FE               	bra	u10297
  3812  00144E  F000               	nop	
  3813                           
  3814                           ;sort.c: 184: LATAbits.LATA4 = 0;
  3815  001450  9889               	bcf	3977,4,c	;volatile
  3816                           
  3817                           ;sort.c: 185: _delay((unsigned long)((50)*(32000000/4000000.0)));
  3818  001452  0E85               	movlw	133
  3819  001454                     u10307:
  3820  001454  2EE8               	decfsz	wreg,f,c
  3821  001456  D7FE               	bra	u10307
  3822  001458  F000               	nop	
  3823  00145A  0100               	movlb	0	; () banked
  3824  00145C  4BBC               	infsnz	Loading@i_1135& (0+255),f,b
  3825  00145E  2BBD               	incf	(Loading@i_1135+1)& (0+255),f,b
  3826  001460  D7E7               	goto	l7968
  3827  001462                     l7978:
  3828                           
  3829                           ; BSR set to: 0
  3830                           ;sort.c: 186: }
  3831                           ;sort.c: 187: }
  3832                           ;sort.c: 188: }
  3833                           ;sort.c: 190: _delay((unsigned long)((350)*(32000000/4000.0)));
  3834  001462  0E0F               	movlw	15
  3835  001464  0100               	movlb	0	; () banked
  3836  001466  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3837  001468  0E35               	movlw	53
  3838  00146A  0100               	movlb	0	; () banked
  3839  00146C  6FB1               	movwf	??_Loading& (0+255),b
  3840  00146E  0E51               	movlw	81
  3841  001470                     u10317:
  3842  001470  2EE8               	decfsz	wreg,f,c
  3843  001472  D7FE               	bra	u10317
  3844  001474  2FB1               	decfsz	??_Loading& (0+255),f,b
  3845  001476  D7FC               	bra	u10317
  3846  001478  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3847  00147A  D7FA               	bra	u10317
  3848                           
  3849                           ;sort.c: 192: int j = 0;
  3850  00147C  0E00               	movlw	0
  3851  00147E  0100               	movlb	0	; () banked
  3852  001480  6FC3               	movwf	(Loading@j+1)& (0+255),b
  3853  001482  0E00               	movlw	0
  3854  001484  6FC2               	movwf	Loading@j& (0+255),b
  3855                           
  3856                           ;sort.c: 193: while(IR_signal == 1){
  3857  001486  D123               	goto	l8070
  3858  001488                     l7982:
  3859                           
  3860                           ; BSR set to: 0
  3861                           ;sort.c: 194: readIR();
  3862  001488  ECD3  F02A         	call	_readIR	;wreg free
  3863                           
  3864                           ;sort.c: 195: if(j == 3 || j == 4){
  3865  00148C  0E03               	movlw	3
  3866  00148E  0100               	movlb	0	; () banked
  3867  001490  19C2               	xorwf	Loading@j& (0+255),w,b
  3868  001492  0100               	movlb	0	; () banked
  3869  001494  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3870  001496  B4D8               	btfsc	status,2,c
  3871  001498  D007               	goto	l7988
  3872                           
  3873                           ; BSR set to: 0
  3874  00149A  0E04               	movlw	4
  3875  00149C  0100               	movlb	0	; () banked
  3876  00149E  19C2               	xorwf	Loading@j& (0+255),w,b
  3877  0014A0  0100               	movlb	0	; () banked
  3878  0014A2  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3879  0014A4  A4D8               	btfss	status,2,c
  3880  0014A6  D005               	goto	l7990
  3881  0014A8                     l7988:
  3882                           
  3883                           ; BSR set to: 0
  3884                           ;sort.c: 196: f_arm_position = 0;
  3885  0014A8  0E00               	movlw	0
  3886  0014AA  0100               	movlb	0	; () banked
  3887  0014AC  6FE9               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  3888  0014AE  0E00               	movlw	0
  3889  0014B0  D030               	goto	L2
  3890  0014B2                     l7990:
  3891                           
  3892                           ; BSR set to: 0
  3893                           ;sort.c: 198: else if(j == 5 || j == 6){
  3894  0014B2  0E05               	movlw	5
  3895  0014B4  0100               	movlb	0	; () banked
  3896  0014B6  19C2               	xorwf	Loading@j& (0+255),w,b
  3897  0014B8  0100               	movlb	0	; () banked
  3898  0014BA  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3899  0014BC  B4D8               	btfsc	status,2,c
  3900  0014BE  D007               	goto	l826
  3901                           
  3902                           ; BSR set to: 0
  3903  0014C0  0E06               	movlw	6
  3904  0014C2  0100               	movlb	0	; () banked
  3905  0014C4  19C2               	xorwf	Loading@j& (0+255),w,b
  3906  0014C6  0100               	movlb	0	; () banked
  3907  0014C8  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3908  0014CA  A4D8               	btfss	status,2,c
  3909  0014CC  D002               	goto	l7994
  3910  0014CE                     l826:
  3911                           
  3912                           ; BSR set to: 0
  3913                           ;sort.c: 199: LATBbits.LATB2 = 1;
  3914  0014CE  848A               	bsf	3978,2,c	;volatile
  3915                           
  3916                           ;sort.c: 200: }
  3917  0014D0  D042               	goto	l823
  3918  0014D2                     l7994:
  3919                           
  3920                           ; BSR set to: 0
  3921                           ;sort.c: 201: else if(j == 7 || j == 8 || j == 9 || j == 10){
  3922  0014D2  0E07               	movlw	7
  3923  0014D4  0100               	movlb	0	; () banked
  3924  0014D6  19C2               	xorwf	Loading@j& (0+255),w,b
  3925  0014D8  0100               	movlb	0	; () banked
  3926  0014DA  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3927  0014DC  B4D8               	btfsc	status,2,c
  3928  0014DE  D015               	goto	l8002
  3929                           
  3930                           ; BSR set to: 0
  3931  0014E0  0E08               	movlw	8
  3932  0014E2  0100               	movlb	0	; () banked
  3933  0014E4  19C2               	xorwf	Loading@j& (0+255),w,b
  3934  0014E6  0100               	movlb	0	; () banked
  3935  0014E8  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3936  0014EA  B4D8               	btfsc	status,2,c
  3937  0014EC  D00E               	goto	l8002
  3938                           
  3939                           ; BSR set to: 0
  3940  0014EE  0E09               	movlw	9
  3941  0014F0  0100               	movlb	0	; () banked
  3942  0014F2  19C2               	xorwf	Loading@j& (0+255),w,b
  3943  0014F4  0100               	movlb	0	; () banked
  3944  0014F6  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3945  0014F8  B4D8               	btfsc	status,2,c
  3946  0014FA  D007               	goto	l8002
  3947                           
  3948                           ; BSR set to: 0
  3949  0014FC  0E0A               	movlw	10
  3950  0014FE  0100               	movlb	0	; () banked
  3951  001500  19C2               	xorwf	Loading@j& (0+255),w,b
  3952  001502  0100               	movlb	0	; () banked
  3953  001504  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3954  001506  A4D8               	btfss	status,2,c
  3955  001508  D006               	goto	l828
  3956  00150A                     l8002:
  3957                           
  3958                           ; BSR set to: 0
  3959                           ;sort.c: 202: f_arm_position = 1;
  3960  00150A  0E00               	movlw	0
  3961  00150C  0100               	movlb	0	; () banked
  3962  00150E  6FE9               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  3963  001510  0E01               	movlw	1
  3964  001512                     L2:
  3965  001512  6FE8               	movwf	_f_arm_position& (0+255),b	;volatile
  3966                           
  3967                           ;sort.c: 203: }
  3968  001514  D020               	goto	l823
  3969  001516                     l828:
  3970                           
  3971                           ; BSR set to: 0
  3972                           ;sort.c: 204: else if(j % 2 == 0){
  3973  001516  0100               	movlb	0	; () banked
  3974  001518  B1C2               	btfsc	Loading@j& (0+255),0,b
  3975  00151A  D01D               	goto	l823
  3976                           
  3977                           ; BSR set to: 0
  3978                           ;sort.c: 205: LATBbits.LATB2 = !LATBbits.LATB2;
  3979  00151C  B48A               	btfsc	3978,2,c	;volatile
  3980  00151E  D004               	goto	u6890
  3981  001520  0100               	movlb	0	; () banked
  3982  001522  6BB1               	clrf	??_Loading& (0+255),b
  3983  001524  2BB1               	incf	??_Loading& (0+255),f,b
  3984  001526  D002               	goto	u6908
  3985  001528                     u6890:
  3986  001528  0100               	movlb	0	; () banked
  3987  00152A  6BB1               	clrf	??_Loading& (0+255),b
  3988  00152C                     u6908:
  3989  00152C  0100               	movlb	0	; () banked
  3990  00152E  47B1               	rlncf	??_Loading& (0+255),f,b
  3991  001530  47B1               	rlncf	??_Loading& (0+255),f,b
  3992  001532  508A               	movf	3978,w,c	;volatile
  3993  001534  0100               	movlb	0	; () banked
  3994  001536  19B1               	xorwf	??_Loading& (0+255),w,b
  3995  001538  0BFB               	andlw	-5
  3996  00153A  19B1               	xorwf	??_Loading& (0+255),w,b
  3997  00153C  6E8A               	movwf	3978,c	;volatile
  3998                           
  3999                           ;sort.c: 206: f_arm_position = !f_arm_position;
  4000  00153E  0100               	movlb	0	; () banked
  4001  001540  51E8               	movf	_f_arm_position& (0+255),w,b	;volatile
  4002  001542  0100               	movlb	0	; () banked
  4003  001544  11E9               	iorwf	(_f_arm_position+1)& (0+255),w,b	;volatile
  4004  001546  A4D8               	btfss	status,2,c
  4005  001548  D002               	goto	u6910
  4006  00154A  0E01               	movlw	1
  4007  00154C  D001               	goto	u6920
  4008  00154E                     u6910:
  4009  00154E  0E00               	movlw	0
  4010  001550                     u6920:
  4011  001550  0100               	movlb	0	; () banked
  4012  001552  6FE8               	movwf	_f_arm_position& (0+255),b	;volatile
  4013  001554  6BE9               	clrf	(_f_arm_position+1)& (0+255),b	;volatile
  4014  001556                     l823:
  4015                           
  4016                           ; BSR set to: 0
  4017                           ;sort.c: 207: }
  4018                           ;sort.c: 210: if(IR_signal==1){
  4019  001556  0100               	movlb	0	; () banked
  4020  001558  05E0               	decf	_IR_signal& (0+255),w,b
  4021  00155A  0100               	movlb	0	; () banked
  4022  00155C  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  4023  00155E  A4D8               	btfss	status,2,c
  4024  001560  D09A               	goto	l8058
  4025                           
  4026                           ; BSR set to: 0
  4027                           ;sort.c: 211: _delay((unsigned long)((350)*(32000000/4000.0)));
  4028  001562  0E0F               	movlw	15
  4029  001564  0100               	movlb	0	; () banked
  4030  001566  6FB2               	movwf	(??_Loading+1)& (0+255),b
  4031  001568  0E35               	movlw	53
  4032  00156A  0100               	movlb	0	; () banked
  4033  00156C  6FB1               	movwf	??_Loading& (0+255),b
  4034  00156E  0E51               	movlw	81
  4035  001570                     u10327:
  4036  001570  2EE8               	decfsz	wreg,f,c
  4037  001572  D7FE               	bra	u10327
  4038  001574  2FB1               	decfsz	??_Loading& (0+255),f,b
  4039  001576  D7FC               	bra	u10327
  4040  001578  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  4041  00157A  D7FA               	bra	u10327
  4042                           
  4043                           ;sort.c: 212: readIR();
  4044  00157C  ECD3  F02A         	call	_readIR	;wreg free
  4045                           
  4046                           ;sort.c: 213: if(IR_signal==1){
  4047  001580  0100               	movlb	0	; () banked
  4048  001582  05E0               	decf	_IR_signal& (0+255),w,b
  4049  001584  0100               	movlb	0	; () banked
  4050  001586  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  4051  001588  A4D8               	btfss	status,2,c
  4052  00158A  D081               	goto	l834
  4053                           
  4054                           ; BSR set to: 0
  4055                           ;sort.c: 214: if(sensor_outputs[0]){
  4056  00158C  0100               	movlb	0	; () banked
  4057  00158E  51DA               	movf	_sensor_outputs& (0+255),w,b
  4058  001590  0100               	movlb	0	; () banked
  4059  001592  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  4060  001594  B4D8               	btfsc	status,2,c
  4061  001596  D011               	goto	l835
  4062                           
  4063                           ; BSR set to: 0
  4064                           ;sort.c: 215: LATAbits.LATA4 = 1;
  4065  001598  8889               	bsf	3977,4,c	;volatile
  4066                           
  4067                           ; BSR set to: 0
  4068                           ;sort.c: 216: _delay((unsigned long)((250)*(32000000/4000.0)));
  4069  00159A  0E0B               	movlw	11
  4070  00159C  0100               	movlb	0	; () banked
  4071  00159E  6FB2               	movwf	(??_Loading+1)& (0+255),b
  4072  0015A0  0E26               	movlw	38
  4073  0015A2  0100               	movlb	0	; () banked
  4074  0015A4  6FB1               	movwf	??_Loading& (0+255),b
  4075  0015A6  0E5D               	movlw	93
  4076  0015A8                     u10337:
  4077  0015A8  2EE8               	decfsz	wreg,f,c
  4078  0015AA  D7FE               	bra	u10337
  4079  0015AC  2FB1               	decfsz	??_Loading& (0+255),f,b
  4080  0015AE  D7FC               	bra	u10337
  4081  0015B0  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  4082  0015B2  D7FA               	bra	u10337
  4083  0015B4  D000               	nop2	
  4084                           
  4085                           ;sort.c: 217: LATAbits.LATA4 = 0;
  4086  0015B6  9889               	bcf	3977,4,c	;volatile
  4087                           
  4088                           ;sort.c: 218: }
  4089  0015B8  D06A               	goto	l834
  4090  0015BA                     l835:
  4091                           
  4092                           ; BSR set to: 0
  4093                           ;sort.c: 219: else{
  4094                           ;sort.c: 220: TMR2IE = 0;
  4095  0015BA  929D               	bcf	3997,1,c	;volatile
  4096                           
  4097                           ; BSR set to: 0
  4098                           ;sort.c: 221: for(int i = 0; i<2500; i++){
  4099  0015BC  0E00               	movlw	0
  4100  0015BE  0100               	movlb	0	; () banked
  4101  0015C0  6FBF               	movwf	(Loading@i_1137+1)& (0+255),b
  4102  0015C2  0E00               	movlw	0
  4103  0015C4  6FBE               	movwf	Loading@i_1137& (0+255),b
  4104  0015C6                     l8022:
  4105                           
  4106                           ; BSR set to: 0
  4107  0015C6  0100               	movlb	0	; () banked
  4108  0015C8  BFBF               	btfsc	(Loading@i_1137+1)& (0+255),7,b
  4109  0015CA  D041               	goto	l8050
  4110  0015CC  0EC4               	movlw	196
  4111  0015CE  0100               	movlb	0	; () banked
  4112  0015D0  5DBE               	subwf	Loading@i_1137& (0+255),w,b
  4113  0015D2  0E09               	movlw	9
  4114  0015D4  0100               	movlb	0	; () banked
  4115  0015D6  59BF               	subwfb	(Loading@i_1137+1)& (0+255),w,b
  4116  0015D8  B0D8               	btfsc	status,0,c
  4117  0015DA  D058               	goto	l838
  4118  0015DC  D038               	goto	l8050
  4119  0015DE                     l840:
  4120                           
  4121                           ; BSR set to: 0
  4122                           ;sort.c: 224: LATAbits.LATA4 = 1;
  4123  0015DE  8889               	bsf	3977,4,c	;volatile
  4124                           
  4125                           ; BSR set to: 0
  4126                           ;sort.c: 225: _delay((unsigned long)((75)*(32000000/4000000.0)));
  4127  0015E0  0EC8               	movlw	200
  4128  0015E2                     u10347:
  4129  0015E2  2EE8               	decfsz	wreg,f,c
  4130  0015E4  D7FE               	bra	u10347
  4131                           
  4132                           ;sort.c: 226: LATAbits.LATA4 = 0;
  4133  0015E6  9889               	bcf	3977,4,c	;volatile
  4134                           
  4135                           ;sort.c: 227: _delay((unsigned long)((25)*(32000000/4000000.0)));
  4136  0015E8  0E42               	movlw	66
  4137  0015EA                     u10357:
  4138  0015EA  2EE8               	decfsz	wreg,f,c
  4139  0015EC  D7FE               	bra	u10357
  4140  0015EE  D01C               	goto	L3
  4141  0015F0                     l842:
  4142                           
  4143                           ; BSR set to: 0
  4144                           ;sort.c: 230: LATAbits.LATA4 = 1;
  4145  0015F0  8889               	bsf	3977,4,c	;volatile
  4146                           
  4147                           ; BSR set to: 0
  4148                           ;sort.c: 231: _delay((unsigned long)((80)*(32000000/4000000.0)));
  4149  0015F2  0ED5               	movlw	213
  4150  0015F4                     u10367:
  4151  0015F4  2EE8               	decfsz	wreg,f,c
  4152  0015F6  D7FE               	bra	u10367
  4153  0015F8  F000               	nop	
  4154                           
  4155                           ;sort.c: 232: LATAbits.LATA4 = 0;
  4156  0015FA  9889               	bcf	3977,4,c	;volatile
  4157                           
  4158                           ;sort.c: 233: _delay((unsigned long)((20)*(32000000/4000000.0)));
  4159  0015FC  0E35               	movlw	53
  4160  0015FE                     u10377:
  4161  0015FE  2EE8               	decfsz	wreg,f,c
  4162  001600  D7FE               	bra	u10377
  4163  001602  D01D               	goto	L4
  4164  001604                     l843:
  4165                           
  4166                           ; BSR set to: 0
  4167                           ;sort.c: 236: LATAbits.LATA4 = 1;
  4168  001604  8889               	bsf	3977,4,c	;volatile
  4169                           
  4170                           ; BSR set to: 0
  4171                           ;sort.c: 237: _delay((unsigned long)((85)*(32000000/4000000.0)));
  4172  001606  0EE2               	movlw	226
  4173  001608                     u10387:
  4174  001608  2EE8               	decfsz	wreg,f,c
  4175  00160A  D7FE               	bra	u10387
  4176  00160C  D000               	nop2	
  4177                           
  4178                           ;sort.c: 238: LATAbits.LATA4 = 0;
  4179  00160E  9889               	bcf	3977,4,c	;volatile
  4180                           
  4181                           ;sort.c: 239: _delay((unsigned long)((15)*(32000000/4000000.0)));
  4182  001610  0E28               	movlw	40
  4183  001612                     u10397:
  4184  001612  2EE8               	decfsz	wreg,f,c
  4185  001614  D7FE               	bra	u10397
  4186                           
  4187                           ;sort.c: 240: break;
  4188  001616  D036               	goto	l8052
  4189  001618                     l844:
  4190                           
  4191                           ; BSR set to: 0
  4192                           ;sort.c: 242: LATAbits.LATA4 = 1;
  4193  001618  8889               	bsf	3977,4,c	;volatile
  4194                           
  4195                           ; BSR set to: 0
  4196                           ;sort.c: 243: _delay((unsigned long)((90)*(32000000/4000000.0)));
  4197  00161A  0EF0               	movlw	240
  4198  00161C                     u10407:
  4199  00161C  2EE8               	decfsz	wreg,f,c
  4200  00161E  D7FE               	bra	u10407
  4201                           
  4202                           ;sort.c: 244: LATAbits.LATA4 = 0;
  4203  001620  9889               	bcf	3977,4,c	;volatile
  4204                           
  4205                           ;sort.c: 245: _delay((unsigned long)((10)*(32000000/4000000.0)));
  4206  001622  0E1A               	movlw	26
  4207  001624                     u10417:
  4208  001624  2EE8               	decfsz	wreg,f,c
  4209  001626  D7FE               	bra	u10417
  4210  001628                     L3:
  4211  001628  D000               	nop2	
  4212                           
  4213                           ;sort.c: 246: break;
  4214  00162A  D02C               	goto	l8052
  4215  00162C                     l845:
  4216                           
  4217                           ; BSR set to: 0
  4218                           ;sort.c: 248: LATAbits.LATA4 = 1;
  4219  00162C  8889               	bsf	3977,4,c	;volatile
  4220                           
  4221                           ; BSR set to: 0
  4222                           ;sort.c: 249: _delay((unsigned long)((95)*(32000000/4000000.0)));
  4223  00162E  0EFD               	movlw	253
  4224  001630                     u10427:
  4225  001630  2EE8               	decfsz	wreg,f,c
  4226  001632  D7FE               	bra	u10427
  4227  001634  F000               	nop	
  4228                           
  4229                           ;sort.c: 250: LATAbits.LATA4 = 0;
  4230  001636  9889               	bcf	3977,4,c	;volatile
  4231                           
  4232                           ;sort.c: 251: _delay((unsigned long)((50)*(32000000/4000000.0)));
  4233  001638  0E85               	movlw	133
  4234  00163A                     u10437:
  4235  00163A  2EE8               	decfsz	wreg,f,c
  4236  00163C  D7FE               	bra	u10437
  4237  00163E                     L4:
  4238  00163E  F000               	nop	
  4239                           
  4240                           ;sort.c: 252: break;
  4241  001640  D021               	goto	l8052
  4242  001642                     l846:
  4243                           
  4244                           ; BSR set to: 0
  4245                           ;sort.c: 254: LATAbits.LATA4 = 1;
  4246  001642  8889               	bsf	3977,4,c	;volatile
  4247                           
  4248                           ; BSR set to: 0
  4249                           ;sort.c: 255: _delay((unsigned long)((100)*(32000000/4000000.0)));
  4250  001644  0EA0               	movlw	160
  4251  001646                     u10447:
  4252  001646  D000               	nop2	
  4253  001648  2EE8               	decfsz	wreg,f,c
  4254  00164A  D7FD               	bra	u10447
  4255                           
  4256                           ;sort.c: 257: }
  4257                           
  4258                           ;sort.c: 256: break;
  4259  00164C  D01B               	goto	l8052
  4260  00164E                     l8050:
  4261  00164E  C0C2  F0B1         	movff	Loading@j,??_Loading
  4262  001652  C0C3  F0B2         	movff	Loading@j+1,??_Loading+1
  4263                           
  4264                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4265                           ; Switch size 1, requested type "space"
  4266                           ; Number of cases is 1, Range of values is 0 to 0
  4267                           ; switch strategies available:
  4268                           ; Name         Instructions Cycles
  4269                           ; simple_byte            4     3 (average)
  4270                           ;	Chosen strategy is simple_byte
  4271  001656  0100               	movlb	0	; () banked
  4272  001658  51B2               	movf	(??_Loading+1)& (0+255),w,b
  4273  00165A  0A00               	xorlw	0	; case 0
  4274  00165C  A4D8               	btfss	status,2,c
  4275  00165E  D7F1               	goto	l846
  4276                           
  4277                           ; BSR set to: 0
  4278                           ; Switch size 1, requested type "space"
  4279                           ; Number of cases is 5, Range of values is 0 to 4
  4280                           ; switch strategies available:
  4281                           ; Name         Instructions Cycles
  4282                           ; simple_byte           16     9 (average)
  4283                           ;	Chosen strategy is simple_byte
  4284  001660  0100               	movlb	0	; () banked
  4285  001662  51B1               	movf	??_Loading& (0+255),w,b
  4286  001664  0A00               	xorlw	0	; case 0
  4287  001666  B4D8               	btfsc	status,2,c
  4288  001668  D7BA               	goto	l840
  4289  00166A  0A01               	xorlw	1	; case 1
  4290  00166C  B4D8               	btfsc	status,2,c
  4291  00166E  D7C0               	goto	l842
  4292  001670  0A03               	xorlw	3	; case 2
  4293  001672  B4D8               	btfsc	status,2,c
  4294  001674  D7C7               	goto	l843
  4295  001676  0A01               	xorlw	1	; case 3
  4296  001678  B4D8               	btfsc	status,2,c
  4297  00167A  D7CE               	goto	l844
  4298  00167C  0A07               	xorlw	7	; case 4
  4299  00167E  B4D8               	btfsc	status,2,c
  4300  001680  D7D5               	goto	l845
  4301  001682  D7DF               	goto	l846
  4302  001684                     l8052:
  4303  001684  0100               	movlb	0	; () banked
  4304  001686  4BBE               	infsnz	Loading@i_1137& (0+255),f,b
  4305  001688  2BBF               	incf	(Loading@i_1137+1)& (0+255),f,b
  4306  00168A  D79D               	goto	l8022
  4307  00168C                     l838:
  4308                           
  4309                           ; BSR set to: 0
  4310                           ;sort.c: 258: }
  4311                           ;sort.c: 259: TMR2IE = 1;
  4312  00168C  829D               	bsf	3997,1,c	;volatile
  4313  00168E                     l834:
  4314                           
  4315                           ;sort.c: 260: }
  4316                           ;sort.c: 261: }
  4317                           ;sort.c: 262: LATAbits.LATA4 = 0;
  4318  00168E  9889               	bcf	3977,4,c	;volatile
  4319                           
  4320                           ;sort.c: 263: j++;
  4321  001690  0100               	movlb	0	; () banked
  4322  001692  4BC2               	infsnz	Loading@j& (0+255),f,b
  4323  001694  2BC3               	incf	(Loading@j+1)& (0+255),f,b
  4324  001696                     l8058:
  4325                           
  4326                           ; BSR set to: 0
  4327                           ;sort.c: 264: }
  4328                           ;sort.c: 266: if(!IR_signal){
  4329  001696  0100               	movlb	0	; () banked
  4330  001698  51E0               	movf	_IR_signal& (0+255),w,b
  4331  00169A  0100               	movlb	0	; () banked
  4332  00169C  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  4333  00169E  A4D8               	btfss	status,2,c
  4334  0016A0  D016               	goto	l8070
  4335                           
  4336                           ; BSR set to: 0
  4337                           ;sort.c: 267: _delay((unsigned long)((500)*(32000000/4000.0)));
  4338  0016A2  0E15               	movlw	21
  4339  0016A4  0100               	movlb	0	; () banked
  4340  0016A6  6FB2               	movwf	(??_Loading+1)& (0+255),b
  4341  0016A8  0E4B               	movlw	75
  4342  0016AA  0100               	movlb	0	; () banked
  4343  0016AC  6FB1               	movwf	??_Loading& (0+255),b
  4344  0016AE  0EBE               	movlw	190
  4345  0016B0                     u10457:
  4346  0016B0  2EE8               	decfsz	wreg,f,c
  4347  0016B2  D7FE               	bra	u10457
  4348  0016B4  2FB1               	decfsz	??_Loading& (0+255),f,b
  4349  0016B6  D7FC               	bra	u10457
  4350  0016B8  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  4351  0016BA  D7FA               	bra	u10457
  4352  0016BC  F000               	nop	
  4353                           
  4354                           ;sort.c: 268: readIR();
  4355  0016BE  ECD3  F02A         	call	_readIR	;wreg free
  4356                           
  4357                           ;sort.c: 269: if(IR_signal==1){
  4358  0016C2  0100               	movlb	0	; () banked
  4359  0016C4  05E0               	decf	_IR_signal& (0+255),w,b
  4360  0016C6  0100               	movlb	0	; () banked
  4361  0016C8  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  4362  0016CA  A4D8               	btfss	status,2,c
  4363  0016CC  D006               	goto	l850
  4364  0016CE                     l8070:
  4365                           
  4366                           ; BSR set to: 0
  4367  0016CE  0100               	movlb	0	; () banked
  4368  0016D0  05E0               	decf	_IR_signal& (0+255),w,b
  4369  0016D2  0100               	movlb	0	; () banked
  4370  0016D4  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  4371  0016D6  B4D8               	btfsc	status,2,c
  4372  0016D8  D6D7               	goto	l7982
  4373  0016DA                     l850:
  4374                           
  4375                           ; BSR set to: 0
  4376                           ;sort.c: 274: }
  4377                           ;sort.c: 275: }
  4378                           ;sort.c: 276: }
  4379                           ;sort.c: 277: LATBbits.LATB2 = 0;
  4380  0016DA  948A               	bcf	3978,2,c	;volatile
  4381  0016DC                     l8072:
  4382                           
  4383                           ; BSR set to: 0
  4384                           ;sort.c: 278: }
  4385                           ;sort.c: 279: f_can_coming_to_ID = 1;
  4386  0016DC  0E00               	movlw	0
  4387  0016DE  0101               	movlb	1	; () banked
  4388  0016E0  6F34               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  4389  0016E2  0E01               	movlw	1
  4390  0016E4  6F33               	movwf	_f_can_coming_to_ID& (0+255),b
  4391                           
  4392                           ; BSR set to: 1
  4393                           
  4394                           ; BSR set to: 1
  4395  0016E6  0012               	return	
  4396  0016E8                     __end_of_Loading:
  4397                           	opt stack 0
  4398                           tblptru	equ	0xFF8
  4399                           tblptrh	equ	0xFF7
  4400                           tblptrl	equ	0xFF6
  4401                           tablat	equ	0xFF5
  4402                           prodh	equ	0xFF4
  4403                           prodl	equ	0xFF3
  4404                           postinc0	equ	0xFEE
  4405                           wreg	equ	0xFE8
  4406                           postdec1	equ	0xFE5
  4407                           fsr1l	equ	0xFE1
  4408                           status	equ	0xFD8
  4409                           
  4410 ;; *************** function _initSortTimer *****************
  4411 ;; Defined at:
  4412 ;;		line 468 in file "sort.c"
  4413 ;; Parameters:    Size  Location     Type
  4414 ;;		None
  4415 ;; Auto vars:     Size  Location     Type
  4416 ;;  i               2    8[BANK0 ] int 
  4417 ;; Return value:  Size  Location     Type
  4418 ;;                  1    wreg      void 
  4419 ;; Registers used:
  4420 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4421 ;; Tracked objects:
  4422 ;;		On entry : 0/0
  4423 ;;		On exit  : 0/0
  4424 ;;		Unchanged: 0/0
  4425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4426 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4427 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4428 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4429 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4430 ;;Total ram usage:        5 bytes
  4431 ;; Hardware stack levels used:    1
  4432 ;; Hardware stack levels required when called:   10
  4433 ;; This function calls:
  4434 ;;		_getRTC
  4435 ;; This function is called by:
  4436 ;;		_Loading
  4437 ;; This function uses a non-reentrant model
  4438 ;;
  4439                           
  4440                           	psect	text3
  4441  004C22                     __ptext3:
  4442                           	opt stack 0
  4443  004C22                     _initSortTimer:
  4444                           	opt stack 18
  4445                           
  4446                           ;sort.c: 470: getRTC();
  4447                           
  4448                           ;incstack = 0
  4449  004C22  EC45  F027         	call	_getRTC	;wreg free
  4450                           
  4451                           ;sort.c: 471: for(int i = 0; i < 7; i++){
  4452  004C26  0E00               	movlw	0
  4453  004C28  0100               	movlb	0	; () banked
  4454  004C2A  6F89               	movwf	(initSortTimer@i+1)& (0+255),b
  4455  004C2C  0E00               	movlw	0
  4456  004C2E  6F88               	movwf	initSortTimer@i& (0+255),b
  4457  004C30                     l7370:
  4458                           
  4459                           ; BSR set to: 0
  4460  004C30  0100               	movlb	0	; () banked
  4461  004C32  BF89               	btfsc	(initSortTimer@i+1)& (0+255),7,b
  4462  004C34  D008               	goto	l7374
  4463  004C36  0100               	movlb	0	; () banked
  4464  004C38  5189               	movf	(initSortTimer@i+1)& (0+255),w,b
  4465  004C3A  E140               	bnz	l7380
  4466  004C3C  0E07               	movlw	7
  4467  004C3E  0100               	movlb	0	; () banked
  4468  004C40  5D88               	subwf	initSortTimer@i& (0+255),w,b
  4469  004C42  B0D8               	btfsc	status,0,c
  4470  004C44  D03B               	goto	l7380
  4471  004C46                     l7374:
  4472                           
  4473                           ; BSR set to: 0
  4474                           ;sort.c: 472: startTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  4475  004C46  0E1C               	movlw	low _time
  4476  004C48  0100               	movlb	0	; () banked
  4477  004C4A  2588               	addwf	initSortTimer@i& (0+255),w,b
  4478  004C4C  6ED9               	movwf	fsr2l,c
  4479  004C4E  0E01               	movlw	high _time
  4480  004C50  0100               	movlb	0	; () banked
  4481  004C52  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  4482  004C54  6EDA               	movwf	fsr2h,c
  4483  004C56  50DF               	movf	indf2,w,c
  4484  004C58  0100               	movlb	0	; () banked
  4485  004C5A  6F85               	movwf	??_initSortTimer& (0+255),b
  4486  004C5C  0100               	movlb	0	; () banked
  4487  004C5E  3B85               	swapf	??_initSortTimer& (0+255),f,b
  4488  004C60  0E0F               	movlw	15
  4489  004C62  1785               	andwf	??_initSortTimer& (0+255),f,b
  4490  004C64  0E0F               	movlw	15
  4491  004C66  0100               	movlb	0	; () banked
  4492  004C68  1785               	andwf	??_initSortTimer& (0+255),f,b
  4493  004C6A  0100               	movlb	0	; () banked
  4494  004C6C  5185               	movf	??_initSortTimer& (0+255),w,b
  4495  004C6E  0D0A               	mullw	10
  4496  004C70  0E1C               	movlw	low _time
  4497  004C72  0100               	movlb	0	; () banked
  4498  004C74  2588               	addwf	initSortTimer@i& (0+255),w,b
  4499  004C76  6ED9               	movwf	fsr2l,c
  4500  004C78  0E01               	movlw	high _time
  4501  004C7A  0100               	movlb	0	; () banked
  4502  004C7C  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  4503  004C7E  6EDA               	movwf	fsr2h,c
  4504  004C80  50DF               	movf	indf2,w,c
  4505  004C82  0B0F               	andlw	15
  4506  004C84  0100               	movlb	0	; () banked
  4507  004C86  6F86               	movwf	(??_initSortTimer+1)& (0+255),b
  4508  004C88  6B87               	clrf	(??_initSortTimer+2)& (0+255),b
  4509  004C8A  50F3               	movf	prodl,w,c
  4510  004C8C  0100               	movlb	0	; () banked
  4511  004C8E  2786               	addwf	(??_initSortTimer+1)& (0+255),f,b
  4512  004C90  50F4               	movf	prodh,w,c
  4513  004C92  0100               	movlb	0	; () banked
  4514  004C94  2387               	addwfc	(??_initSortTimer+2)& (0+255),f,b
  4515  004C96  90D8               	bcf	status,0,c
  4516  004C98  0100               	movlb	0	; () banked
  4517  004C9A  3588               	rlcf	initSortTimer@i& (0+255),w,b
  4518  004C9C  6ED9               	movwf	fsr2l,c
  4519  004C9E  0100               	movlb	0	; () banked
  4520  004CA0  3589               	rlcf	(initSortTimer@i+1)& (0+255),w,b
  4521  004CA2  6EDA               	movwf	fsr2h,c
  4522  004CA4  0E0E               	movlw	low _startTime
  4523  004CA6  26D9               	addwf	fsr2l,f,c
  4524  004CA8  0E01               	movlw	high _startTime
  4525  004CAA  22DA               	addwfc	fsr2h,f,c
  4526  004CAC  C086  FFDE         	movff	??_initSortTimer+1,postinc2
  4527  004CB0  C087  FFDD         	movff	??_initSortTimer+2,postdec2
  4528                           
  4529                           ; BSR set to: 0
  4530  004CB4  0100               	movlb	0	; () banked
  4531  004CB6  4B88               	infsnz	initSortTimer@i& (0+255),f,b
  4532  004CB8  2B89               	incf	(initSortTimer@i+1)& (0+255),f,b
  4533  004CBA  D7BA               	goto	l7370
  4534  004CBC                     l7380:
  4535                           
  4536                           ; BSR set to: 0
  4537                           ;sort.c: 473: }
  4538                           ;sort.c: 475: T0CON = 0b00010111;
  4539  004CBC  0E17               	movlw	23
  4540  004CBE  6ED5               	movwf	4053,c	;volatile
  4541                           
  4542                           ;sort.c: 484: TMR0H = 0b10000101;
  4543  004CC0  0E85               	movlw	133
  4544  004CC2  6ED7               	movwf	4055,c	;volatile
  4545                           
  4546                           ;sort.c: 485: TMR0L = 0b11101110;
  4547  004CC4  0EEE               	movlw	238
  4548  004CC6  6ED6               	movwf	4054,c	;volatile
  4549                           
  4550                           ; BSR set to: 0
  4551                           ;sort.c: 486: TMR0ON = 1;
  4552  004CC8  8ED5               	bsf	4053,7,c	;volatile
  4553                           
  4554                           ; BSR set to: 0
  4555  004CCA  0012               	return		;funcret
  4556  004CCC                     __end_of_initSortTimer:
  4557                           	opt stack 0
  4558                           tblptru	equ	0xFF8
  4559                           tblptrh	equ	0xFF7
  4560                           tblptrl	equ	0xFF6
  4561                           tablat	equ	0xFF5
  4562                           prodh	equ	0xFF4
  4563                           prodl	equ	0xFF3
  4564                           postinc0	equ	0xFEE
  4565                           wreg	equ	0xFE8
  4566                           postdec1	equ	0xFE5
  4567                           fsr1l	equ	0xFE1
  4568                           indf2	equ	0xFDF
  4569                           postinc2	equ	0xFDE
  4570                           postdec2	equ	0xFDD
  4571                           fsr2h	equ	0xFDA
  4572                           fsr2l	equ	0xFD9
  4573                           status	equ	0xFD8
  4574                           
  4575 ;; *************** function _initGlobalVars *****************
  4576 ;; Defined at:
  4577 ;;		line 432 in file "sort.c"
  4578 ;; Parameters:    Size  Location     Type
  4579 ;;		None
  4580 ;; Auto vars:     Size  Location     Type
  4581 ;;		None
  4582 ;; Return value:  Size  Location     Type
  4583 ;;                  1    wreg      void 
  4584 ;; Registers used:
  4585 ;;		wreg, status,2
  4586 ;; Tracked objects:
  4587 ;;		On entry : 0/0
  4588 ;;		On exit  : 0/0
  4589 ;;		Unchanged: 0/0
  4590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4591 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4592 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4593 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4594 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4595 ;;Total ram usage:        0 bytes
  4596 ;; Hardware stack levels used:    1
  4597 ;; Hardware stack levels required when called:    7
  4598 ;; This function calls:
  4599 ;;		Nothing
  4600 ;; This function is called by:
  4601 ;;		_Loading
  4602 ;; This function uses a non-reentrant model
  4603 ;;
  4604                           
  4605                           	psect	text4
  4606  004844                     __ptext4:
  4607                           	opt stack 0
  4608  004844                     _initGlobalVars:
  4609                           	opt stack 21
  4610                           
  4611                           ;sort.c: 434: first = 0;
  4612                           
  4613                           ; BSR set to: 0
  4614                           ;incstack = 0
  4615  004844  0E00               	movlw	0
  4616  004846  0101               	movlb	1	; () banked
  4617  004848  6F3C               	movwf	(_first+1)& (0+255),b
  4618  00484A  0E00               	movlw	0
  4619  00484C  6F3B               	movwf	_first& (0+255),b
  4620                           
  4621                           ;sort.c: 437: f_loadingNewCan = 0;
  4622  00484E  0E00               	movlw	0
  4623  004850  0100               	movlb	0	; () banked
  4624  004852  6FED               	movwf	(_f_loadingNewCan+1)& (0+255),b
  4625  004854  0E00               	movlw	0
  4626  004856  6FEC               	movwf	_f_loadingNewCan& (0+255),b
  4627                           
  4628                           ;sort.c: 438: f_lastCan = 0;
  4629  004858  0E00               	movlw	0
  4630  00485A  0100               	movlb	0	; () banked
  4631  00485C  6FEB               	movwf	(_f_lastCan+1)& (0+255),b
  4632  00485E  0E00               	movlw	0
  4633  004860  6FEA               	movwf	_f_lastCan& (0+255),b
  4634                           
  4635                           ;sort.c: 439: f_ID_receive = 1;
  4636  004862  0E00               	movlw	0
  4637  004864  0101               	movlb	1	; () banked
  4638  004866  6F32               	movwf	(_f_ID_receive+1)& (0+255),b
  4639  004868  0E01               	movlw	1
  4640  00486A  6F31               	movwf	_f_ID_receive& (0+255),b
  4641                           
  4642                           ;sort.c: 440: f_can_coming_to_ID = 0;
  4643  00486C  0E00               	movlw	0
  4644  00486E  0101               	movlb	1	; () banked
  4645  004870  6F34               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  4646  004872  0E00               	movlw	0
  4647  004874  6F33               	movwf	_f_can_coming_to_ID& (0+255),b
  4648                           
  4649                           ;sort.c: 441: f_can_coming_to_distribution = 0;
  4650  004876  0E00               	movlw	0
  4651  004878  0101               	movlb	1	; () banked
  4652  00487A  6F36               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  4653  00487C  0E00               	movlw	0
  4654  00487E  6F35               	movwf	_f_can_coming_to_distribution& (0+255),b
  4655                           
  4656                           ;sort.c: 442: f_can_distributed = 1;
  4657  004880  0E00               	movlw	0
  4658  004882  0101               	movlb	1	; () banked
  4659  004884  6F38               	movwf	(_f_can_distributed+1)& (0+255),b
  4660  004886  0E01               	movlw	1
  4661  004888  6F37               	movwf	_f_can_distributed& (0+255),b
  4662                           
  4663                           ;sort.c: 443: f_most_recent_sort_time = 0;
  4664  00488A  0E00               	movlw	0
  4665  00488C  0101               	movlb	1	; () banked
  4666  00488E  6F3A               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
  4667  004890  0E00               	movlw	0
  4668  004892  6F39               	movwf	_f_most_recent_sort_time& (0+255),b
  4669                           
  4670                           ;sort.c: 446: count_total = 0;
  4671  004894  0E00               	movlw	0
  4672  004896  0100               	movlb	0	; () banked
  4673  004898  6FFF               	movwf	(_count_total+1)& (0+255),b
  4674  00489A  0E00               	movlw	0
  4675  00489C  6FFE               	movwf	_count_total& (0+255),b
  4676                           
  4677                           ;sort.c: 447: count_pop_no_tab = 0;
  4678  00489E  0E00               	movlw	0
  4679  0048A0  0101               	movlb	1	; () banked
  4680  0048A2  6F2A               	movwf	(_count_pop_no_tab+1)& (0+255),b
  4681  0048A4  0E00               	movlw	0
  4682  0048A6  6F29               	movwf	_count_pop_no_tab& (0+255),b
  4683                           
  4684                           ;sort.c: 448: count_pop_w_tab = 0;
  4685  0048A8  0E00               	movlw	0
  4686  0048AA  0101               	movlb	1	; () banked
  4687  0048AC  6F2C               	movwf	(_count_pop_w_tab+1)& (0+255),b
  4688  0048AE  0E00               	movlw	0
  4689  0048B0  6F2B               	movwf	_count_pop_w_tab& (0+255),b
  4690                           
  4691                           ;sort.c: 449: count_can_w_lab = 0;
  4692  0048B2  0E00               	movlw	0
  4693  0048B4  0101               	movlb	1	; () banked
  4694  0048B6  6F28               	movwf	(_count_can_w_lab+1)& (0+255),b
  4695  0048B8  0E00               	movlw	0
  4696  0048BA  6F27               	movwf	_count_can_w_lab& (0+255),b
  4697                           
  4698                           ;sort.c: 450: count_can_no_lab = 0;
  4699  0048BC  0E00               	movlw	0
  4700  0048BE  0101               	movlb	1	; () banked
  4701  0048C0  6F26               	movwf	(_count_can_no_lab+1)& (0+255),b
  4702  0048C2  0E00               	movlw	0
  4703  0048C4  6F25               	movwf	_count_can_no_lab& (0+255),b
  4704                           
  4705                           ;sort.c: 453: most_recent_sort_time = 999;
  4706  0048C6  0E03               	movlw	3
  4707  0048C8  0101               	movlb	1	; () banked
  4708  0048CA  6F48               	movwf	(_most_recent_sort_time+1)& (0+255),b
  4709  0048CC  0EE7               	movlw	231
  4710  0048CE  6F47               	movwf	_most_recent_sort_time& (0+255),b
  4711                           
  4712                           ;sort.c: 456: motor_toggle_count = 0;
  4713  0048D0  0E00               	movlw	0
  4714  0048D2  0101               	movlb	1	; () banked
  4715  0048D4  6F4A               	movwf	(_motor_toggle_count+1)& (0+255),b
  4716  0048D6  0E00               	movlw	0
  4717  0048D8  6F49               	movwf	_motor_toggle_count& (0+255),b
  4718                           
  4719                           ;sort.c: 457: agitator_toggle_count = 0;
  4720  0048DA  0E00               	movlw	0
  4721  0048DC  0101               	movlb	1	; () banked
  4722  0048DE  6F24               	movwf	(_agitator_toggle_count+1)& (0+255),b
  4723  0048E0  0E00               	movlw	0
  4724  0048E2  6F23               	movwf	_agitator_toggle_count& (0+255),b
  4725                           
  4726                           ;sort.c: 460: servo_timer_counter = 0;
  4727  0048E4  0E00               	movlw	0
  4728  0048E6  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
  4729  0048E8  0E00               	movlw	0
  4730  0048EA  6E6D               	movwf	_servo_timer_counter,c	;volatile
  4731                           
  4732                           ;sort.c: 461: servo_timer_target = 9999;
  4733  0048EC  0E27               	movlw	39
  4734  0048EE  6E70               	movwf	_servo_timer_target+1,c	;volatile
  4735  0048F0  0E0F               	movlw	15
  4736  0048F2  6E6F               	movwf	_servo_timer_target,c	;volatile
  4737                           
  4738                           ;sort.c: 462: timer2_counter = 0;
  4739  0048F4  0E00               	movlw	0
  4740  0048F6  6E74               	movwf	_timer2_counter+1,c	;volatile
  4741  0048F8  0E00               	movlw	0
  4742  0048FA  6E73               	movwf	_timer2_counter,c	;volatile
  4743                           
  4744                           ;sort.c: 463: f_arm_position = 0;
  4745  0048FC  0E00               	movlw	0
  4746  0048FE  0100               	movlb	0	; () banked
  4747  004900  6FE9               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  4748  004902  0E00               	movlw	0
  4749  004904  6FE8               	movwf	_f_arm_position& (0+255),b	;volatile
  4750                           
  4751                           ; BSR set to: 0
  4752                           ;sort.c: 464: pan_servo_state = -1;
  4753  004906  686B               	setf	_pan_servo_state,c	;volatile
  4754  004908  686C               	setf	_pan_servo_state+1,c	;volatile
  4755                           
  4756                           ; BSR set to: 0
  4757                           ;sort.c: 465: tilt_servo_state = -1;
  4758  00490A  6871               	setf	_tilt_servo_state,c	;volatile
  4759  00490C  6872               	setf	_tilt_servo_state+1,c	;volatile
  4760                           
  4761                           ;sort.c: 466: f_panning_to_bin = 0;
  4762  00490E  0E00               	movlw	0
  4763  004910  6E6A               	movwf	_f_panning_to_bin+1,c	;volatile
  4764  004912  0E00               	movlw	0
  4765  004914  6E69               	movwf	_f_panning_to_bin,c	;volatile
  4766                           
  4767                           ; BSR set to: 0
  4768  004916  0012               	return		;funcret
  4769  004918                     __end_of_initGlobalVars:
  4770                           	opt stack 0
  4771                           tblptru	equ	0xFF8
  4772                           tblptrh	equ	0xFF7
  4773                           tblptrl	equ	0xFF6
  4774                           tablat	equ	0xFF5
  4775                           prodh	equ	0xFF4
  4776                           prodl	equ	0xFF3
  4777                           postinc0	equ	0xFEE
  4778                           wreg	equ	0xFE8
  4779                           postdec1	equ	0xFE5
  4780                           fsr1l	equ	0xFE1
  4781                           indf2	equ	0xFDF
  4782                           postinc2	equ	0xFDE
  4783                           postdec2	equ	0xFDD
  4784                           fsr2h	equ	0xFDA
  4785                           fsr2l	equ	0xFD9
  4786                           status	equ	0xFD8
  4787                           
  4788 ;; *************** function _getMAG *****************
  4789 ;; Defined at:
  4790 ;;		line 587 in file "sort.c"
  4791 ;; Parameters:    Size  Location     Type
  4792 ;;		None
  4793 ;; Auto vars:     Size  Location     Type
  4794 ;;		None
  4795 ;; Return value:  Size  Location     Type
  4796 ;;                  1    wreg      void 
  4797 ;; Registers used:
  4798 ;;		wreg, status,2, status,0, cstack
  4799 ;; Tracked objects:
  4800 ;;		On entry : 0/0
  4801 ;;		On exit  : 0/0
  4802 ;;		Unchanged: 0/0
  4803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4804 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4805 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4806 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4807 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4808 ;;Total ram usage:        2 bytes
  4809 ;; Hardware stack levels used:    1
  4810 ;; Hardware stack levels required when called:    9
  4811 ;; This function calls:
  4812 ;;		_readMAG
  4813 ;; This function is called by:
  4814 ;;		_Loading
  4815 ;; This function uses a non-reentrant model
  4816 ;;
  4817                           
  4818                           	psect	text5
  4819  00586C                     __ptext5:
  4820                           	opt stack 0
  4821  00586C                     _getMAG:
  4822                           	opt stack 19
  4823                           
  4824                           ;sort.c: 588: readMAG();
  4825                           
  4826                           ; BSR set to: 0
  4827                           ;incstack = 0
  4828  00586C  EC1F  F02B         	call	_readMAG	;wreg free
  4829                           
  4830                           ;sort.c: 590: if(MAG_signal==1){
  4831  005870  0100               	movlb	0	; () banked
  4832  005872  05E2               	decf	_MAG_signal& (0+255),w,b
  4833  005874  0100               	movlb	0	; () banked
  4834  005876  11E3               	iorwf	(_MAG_signal+1)& (0+255),w,b
  4835  005878  A4D8               	btfss	status,2,c
  4836  00587A  0012               	return	
  4837                           
  4838                           ; BSR set to: 0
  4839                           ;sort.c: 591: _delay((unsigned long)((500)*(32000000/4000.0)));
  4840  00587C  0E15               	movlw	21
  4841  00587E  0100               	movlb	0	; () banked
  4842  005880  6F87               	movwf	(??_getMAG+1)& (0+255),b
  4843  005882  0E4B               	movlw	75
  4844  005884  0100               	movlb	0	; () banked
  4845  005886  6F86               	movwf	??_getMAG& (0+255),b
  4846  005888  0EBE               	movlw	190
  4847  00588A                     u10467:
  4848  00588A  2EE8               	decfsz	wreg,f,c
  4849  00588C  D7FE               	bra	u10467
  4850  00588E  2F86               	decfsz	??_getMAG& (0+255),f,b
  4851  005890  D7FC               	bra	u10467
  4852  005892  2F87               	decfsz	(??_getMAG+1)& (0+255),f,b
  4853  005894  D7FA               	bra	u10467
  4854  005896  F000               	nop	
  4855                           
  4856                           ;sort.c: 592: readMAG();
  4857  005898  EC1F  F02B         	call	_readMAG	;wreg free
  4858  00589C  0012               	return	
  4859  00589E                     __end_of_getMAG:
  4860                           	opt stack 0
  4861                           tblptru	equ	0xFF8
  4862                           tblptrh	equ	0xFF7
  4863                           tblptrl	equ	0xFF6
  4864                           tablat	equ	0xFF5
  4865                           prodh	equ	0xFF4
  4866                           prodl	equ	0xFF3
  4867                           postinc0	equ	0xFEE
  4868                           wreg	equ	0xFE8
  4869                           postdec1	equ	0xFE5
  4870                           fsr1l	equ	0xFE1
  4871                           indf2	equ	0xFDF
  4872                           postinc2	equ	0xFDE
  4873                           postdec2	equ	0xFDD
  4874                           fsr2h	equ	0xFDA
  4875                           fsr2l	equ	0xFD9
  4876                           status	equ	0xFD8
  4877                           
  4878 ;; *************** function _getIR *****************
  4879 ;; Defined at:
  4880 ;;		line 571 in file "sort.c"
  4881 ;; Parameters:    Size  Location     Type
  4882 ;;		None
  4883 ;; Auto vars:     Size  Location     Type
  4884 ;;  i               2    7[BANK0 ] int 
  4885 ;; Return value:  Size  Location     Type
  4886 ;;                  1    wreg      void 
  4887 ;; Registers used:
  4888 ;;		wreg, status,2, status,0, cstack
  4889 ;; Tracked objects:
  4890 ;;		On entry : 0/0
  4891 ;;		On exit  : 0/0
  4892 ;;		Unchanged: 0/0
  4893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4894 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4895 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4896 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4897 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4898 ;;Total ram usage:        3 bytes
  4899 ;; Hardware stack levels used:    1
  4900 ;; Hardware stack levels required when called:    9
  4901 ;; This function calls:
  4902 ;;		_readIR
  4903 ;; This function is called by:
  4904 ;;		_Loading
  4905 ;; This function uses a non-reentrant model
  4906 ;;
  4907                           
  4908                           	psect	text6
  4909  005102                     __ptext6:
  4910                           	opt stack 0
  4911  005102                     _getIR:
  4912                           	opt stack 19
  4913                           
  4914                           ;sort.c: 572: readIR();
  4915                           
  4916                           ;incstack = 0
  4917  005102  ECD3  F02A         	call	_readIR	;wreg free
  4918                           
  4919                           ;sort.c: 573: for(int i = 0; i < 150; i++){
  4920  005106  0E00               	movlw	0
  4921  005108  0100               	movlb	0	; () banked
  4922  00510A  6F88               	movwf	(getIR@i+1)& (0+255),b
  4923  00510C  0E00               	movlw	0
  4924  00510E  6F87               	movwf	getIR@i& (0+255),b
  4925  005110                     l7470:
  4926                           
  4927                           ; BSR set to: 0
  4928  005110  0100               	movlb	0	; () banked
  4929  005112  BF88               	btfsc	(getIR@i+1)& (0+255),7,b
  4930  005114  D008               	goto	l7474
  4931  005116  0100               	movlb	0	; () banked
  4932  005118  5188               	movf	(getIR@i+1)& (0+255),w,b
  4933  00511A  E11A               	bnz	l7486
  4934  00511C  0E96               	movlw	150
  4935  00511E  0100               	movlb	0	; () banked
  4936  005120  5D87               	subwf	getIR@i& (0+255),w,b
  4937  005122  B0D8               	btfsc	status,0,c
  4938  005124  D015               	goto	l7486
  4939  005126                     l7474:
  4940                           
  4941                           ; BSR set to: 0
  4942                           ;sort.c: 574: _delay((unsigned long)((500)*(32000000/4000000.0)));
  4943  005126  0E06               	movlw	6
  4944  005128  0100               	movlb	0	; () banked
  4945  00512A  6F86               	movwf	??_getIR& (0+255),b
  4946  00512C  0E30               	movlw	48
  4947  00512E                     u10477:
  4948  00512E  2EE8               	decfsz	wreg,f,c
  4949  005130  D7FE               	bra	u10477
  4950  005132  2F86               	decfsz	??_getIR& (0+255),f,b
  4951  005134  D7FC               	bra	u10477
  4952  005136  F000               	nop	
  4953                           
  4954                           ;sort.c: 575: readIR();
  4955  005138  ECD3  F02A         	call	_readIR	;wreg free
  4956                           
  4957                           ;sort.c: 576: if(!IR_signal){
  4958  00513C  0100               	movlb	0	; () banked
  4959  00513E  51E0               	movf	_IR_signal& (0+255),w,b
  4960  005140  0100               	movlb	0	; () banked
  4961  005142  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  4962  005144  B4D8               	btfsc	status,2,c
  4963  005146  D004               	goto	l7486
  4964                           
  4965                           ; BSR set to: 0
  4966                           
  4967                           ; BSR set to: 0
  4968                           
  4969                           ; BSR set to: 0
  4970                           ;sort.c: 577: break;
  4971  005148  0100               	movlb	0	; () banked
  4972  00514A  4B87               	infsnz	getIR@i& (0+255),f,b
  4973  00514C  2B88               	incf	(getIR@i+1)& (0+255),f,b
  4974  00514E  D7E0               	goto	l7470
  4975  005150                     l7486:
  4976                           
  4977                           ; BSR set to: 0
  4978                           ;sort.c: 578: }
  4979                           ;sort.c: 579: }
  4980                           ;sort.c: 580: if(IR_signal==1){
  4981  005150  0100               	movlb	0	; () banked
  4982  005152  05E0               	decf	_IR_signal& (0+255),w,b
  4983  005154  0100               	movlb	0	; () banked
  4984  005156  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  4985  005158  A4D8               	btfss	status,2,c
  4986  00515A  D006               	goto	l7490
  4987                           
  4988                           ; BSR set to: 0
  4989                           ;sort.c: 581: f_loadingNewCan = 1;
  4990  00515C  0E00               	movlw	0
  4991  00515E  0100               	movlb	0	; () banked
  4992  005160  6FED               	movwf	(_f_loadingNewCan+1)& (0+255),b
  4993  005162  0E01               	movlw	1
  4994  005164  6FEC               	movwf	_f_loadingNewCan& (0+255),b
  4995                           
  4996                           ;sort.c: 582: }
  4997  005166  0012               	return	
  4998  005168                     l7490:
  4999                           
  5000                           ; BSR set to: 0
  5001                           ;sort.c: 583: else{
  5002                           ;sort.c: 584: f_loadingNewCan = 0;
  5003  005168  0E00               	movlw	0
  5004  00516A  0100               	movlb	0	; () banked
  5005  00516C  6FED               	movwf	(_f_loadingNewCan+1)& (0+255),b
  5006  00516E  0E00               	movlw	0
  5007  005170  6FEC               	movwf	_f_loadingNewCan& (0+255),b
  5008  005172  0012               	return	
  5009  005174                     __end_of_getIR:
  5010                           	opt stack 0
  5011                           tblptru	equ	0xFF8
  5012                           tblptrh	equ	0xFF7
  5013                           tblptrl	equ	0xFF6
  5014                           tablat	equ	0xFF5
  5015                           prodh	equ	0xFF4
  5016                           prodl	equ	0xFF3
  5017                           postinc0	equ	0xFEE
  5018                           wreg	equ	0xFE8
  5019                           postdec1	equ	0xFE5
  5020                           fsr1l	equ	0xFE1
  5021                           indf2	equ	0xFDF
  5022                           postinc2	equ	0xFDE
  5023                           postdec2	equ	0xFDD
  5024                           fsr2h	equ	0xFDA
  5025                           fsr2l	equ	0xFD9
  5026                           status	equ	0xFD8
  5027                           
  5028 ;; *************** function _readIR *****************
  5029 ;; Defined at:
  5030 ;;		line 23 in file "ADCFunctionality.c"
  5031 ;; Parameters:    Size  Location     Type
  5032 ;;		None
  5033 ;; Auto vars:     Size  Location     Type
  5034 ;;  res             2    4[BANK0 ] int 
  5035 ;; Return value:  Size  Location     Type
  5036 ;;                  1    wreg      void 
  5037 ;; Registers used:
  5038 ;;		wreg, status,2, status,0, cstack
  5039 ;; Tracked objects:
  5040 ;;		On entry : 0/0
  5041 ;;		On exit  : 0/0
  5042 ;;		Unchanged: 0/0
  5043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5044 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5045 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5046 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5047 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5048 ;;Total ram usage:        4 bytes
  5049 ;; Hardware stack levels used:    1
  5050 ;; Hardware stack levels required when called:    8
  5051 ;; This function calls:
  5052 ;;		_readADC
  5053 ;; This function is called by:
  5054 ;;		_Loading
  5055 ;;		_getIR
  5056 ;; This function uses a non-reentrant model
  5057 ;;
  5058                           
  5059                           	psect	text7
  5060  0055A6                     __ptext7:
  5061                           	opt stack 0
  5062  0055A6                     _readIR:
  5063                           	opt stack 20
  5064                           
  5065                           ;ADCFunctionality.c: 24: readADC(0);
  5066                           
  5067                           ; BSR set to: 0
  5068                           ;incstack = 0
  5069  0055A6  0E00               	movlw	0
  5070  0055A8  EC9C  F02D         	call	_readADC
  5071                           
  5072                           ;ADCFunctionality.c: 25: int res = ADRESH<<8 | ADRESL;
  5073  0055AC  50C3               	movf	4035,w,c	;volatile
  5074  0055AE  CFC4 F082          	movff	4036,??_readIR	;volatile
  5075  0055B2  0100               	movlb	0	; () banked
  5076  0055B4  6B83               	clrf	(??_readIR+1)& (0+255),b
  5077  0055B6  C082  F083         	movff	??_readIR,??_readIR+1
  5078  0055BA  0100               	movlb	0	; () banked
  5079  0055BC  6B82               	clrf	??_readIR& (0+255),b
  5080  0055BE  0100               	movlb	0	; () banked
  5081  0055C0  1182               	iorwf	??_readIR& (0+255),w,b
  5082  0055C2  0100               	movlb	0	; () banked
  5083  0055C4  6F84               	movwf	readIR@res& (0+255),b
  5084  0055C6  0100               	movlb	0	; () banked
  5085  0055C8  5183               	movf	(??_readIR+1)& (0+255),w,b
  5086  0055CA  0100               	movlb	0	; () banked
  5087  0055CC  6F85               	movwf	(readIR@res+1)& (0+255),b
  5088                           
  5089                           ; BSR set to: 0
  5090                           ;ADCFunctionality.c: 26: IR_signal = (res > 800) ? 1 : 0;
  5091  0055CE  0100               	movlb	0	; () banked
  5092  0055D0  BF85               	btfsc	(readIR@res+1)& (0+255),7,b
  5093  0055D2  D00A               	goto	u5350
  5094  0055D4  0E21               	movlw	33
  5095  0055D6  0100               	movlb	0	; () banked
  5096  0055D8  5D84               	subwf	readIR@res& (0+255),w,b
  5097  0055DA  0E03               	movlw	3
  5098  0055DC  0100               	movlb	0	; () banked
  5099  0055DE  5985               	subwfb	(readIR@res+1)& (0+255),w,b
  5100  0055E0  A0D8               	btfss	status,0,c
  5101  0055E2  D002               	goto	u5350
  5102  0055E4  0E01               	movlw	1
  5103  0055E6  D001               	goto	u5360
  5104  0055E8                     u5350:
  5105  0055E8  0E00               	movlw	0
  5106  0055EA                     u5360:
  5107  0055EA  0100               	movlb	0	; () banked
  5108  0055EC  6FE0               	movwf	_IR_signal& (0+255),b
  5109  0055EE  6BE1               	clrf	(_IR_signal+1)& (0+255),b
  5110                           
  5111                           ; BSR set to: 0
  5112  0055F0  0012               	return		;funcret
  5113  0055F2                     __end_of_readIR:
  5114                           	opt stack 0
  5115                           tblptru	equ	0xFF8
  5116                           tblptrh	equ	0xFF7
  5117                           tblptrl	equ	0xFF6
  5118                           tablat	equ	0xFF5
  5119                           prodh	equ	0xFF4
  5120                           prodl	equ	0xFF3
  5121                           postinc0	equ	0xFEE
  5122                           wreg	equ	0xFE8
  5123                           postdec1	equ	0xFE5
  5124                           fsr1l	equ	0xFE1
  5125                           indf2	equ	0xFDF
  5126                           postinc2	equ	0xFDE
  5127                           postdec2	equ	0xFDD
  5128                           fsr2h	equ	0xFDA
  5129                           fsr2l	equ	0xFD9
  5130                           status	equ	0xFD8
  5131                           
  5132 ;; *************** function _ID *****************
  5133 ;; Defined at:
  5134 ;;		line 283 in file "sort.c"
  5135 ;; Parameters:    Size  Location     Type
  5136 ;;		None
  5137 ;; Auto vars:     Size  Location     Type
  5138 ;;  i               2   36[BANK0 ] int 
  5139 ;;  i               2   49[BANK0 ] int 
  5140 ;;  j               2   51[BANK0 ] int 
  5141 ;;  i               2   34[BANK0 ] int 
  5142 ;;  i               2   32[BANK0 ] int 
  5143 ;;  i               2   38[BANK0 ] int 
  5144 ;;  res             4   45[BANK0 ] int [2]
  5145 ;;  time            1   29[BANK0 ] const unsigned char 
  5146 ;;  res2            2   43[BANK0 ] int 
  5147 ;;  res1            2   41[BANK0 ] int 
  5148 ;;  time            1   40[BANK0 ] const unsigned char 
  5149 ;;  n               2   53[BANK0 ] const int 
  5150 ;; Return value:  Size  Location     Type
  5151 ;;                  1    wreg      void 
  5152 ;; Registers used:
  5153 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5154 ;; Tracked objects:
  5155 ;;		On entry : 0/0
  5156 ;;		On exit  : 0/0
  5157 ;;		Unchanged: 0/0
  5158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5159 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5160 ;;      Locals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5161 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5162 ;;      Totals:         0      28       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5163 ;;Total ram usage:       28 bytes
  5164 ;; Hardware stack levels used:    1
  5165 ;; Hardware stack levels required when called:    9
  5166 ;; This function calls:
  5167 ;;		___awdiv
  5168 ;;		___awtoft
  5169 ;;		___ftge
  5170 ;;		_delay_ms
  5171 ;;		_readCOND
  5172 ;; This function is called by:
  5173 ;;		_sort
  5174 ;; This function uses a non-reentrant model
  5175 ;;
  5176                           
  5177                           	psect	text8
  5178  0016E8                     __ptext8:
  5179                           	opt stack 0
  5180  0016E8                     _ID:
  5181                           	opt stack 20
  5182                           
  5183                           ;sort.c: 284: if(f_can_coming_to_ID){
  5184                           
  5185                           ; BSR set to: 0
  5186                           ;incstack = 0
  5187  0016E8  0101               	movlb	1	; () banked
  5188  0016EA  5133               	movf	_f_can_coming_to_ID& (0+255),w,b
  5189  0016EC  0101               	movlb	1	; () banked
  5190  0016EE  1134               	iorwf	(_f_can_coming_to_ID+1)& (0+255),w,b
  5191  0016F0  B4D8               	btfsc	status,2,c
  5192  0016F2  0012               	return	
  5193                           
  5194                           ; BSR set to: 1
  5195                           ;sort.c: 286: _delay((unsigned long)((1000)*(32000000/4000.0)));
  5196  0016F4  0E29               	movlw	41
  5197  0016F6  0100               	movlb	0	; () banked
  5198  0016F8  6F9C               	movwf	(??_ID+1)& (0+255),b
  5199  0016FA  0E96               	movlw	150
  5200  0016FC  0100               	movlb	0	; () banked
  5201  0016FE  6F9B               	movwf	??_ID& (0+255),b
  5202  001700  0E7F               	movlw	127
  5203  001702                     u10487:
  5204  001702  2EE8               	decfsz	wreg,f,c
  5205  001704  D7FE               	bra	u10487
  5206  001706  2F9B               	decfsz	??_ID& (0+255),f,b
  5207  001708  D7FC               	bra	u10487
  5208  00170A  2F9C               	decfsz	(??_ID+1)& (0+255),f,b
  5209  00170C  D7FA               	bra	u10487
  5210                           
  5211                           ;sort.c: 288: f_arm_position = 0;
  5212  00170E  0E00               	movlw	0
  5213  001710  0100               	movlb	0	; () banked
  5214  001712  6FE9               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  5215  001714  0E00               	movlw	0
  5216  001716  6FE8               	movwf	_f_arm_position& (0+255),b	;volatile
  5217                           
  5218                           ; BSR set to: 0
  5219                           ;sort.c: 290: LATAbits.LATA3 = 1;
  5220  001718  8689               	bsf	3977,3,c	;volatile
  5221                           
  5222                           ; BSR set to: 0
  5223                           ;sort.c: 293: const int n = 10;
  5224  00171A  0E00               	movlw	0
  5225  00171C  0100               	movlb	0	; () banked
  5226  00171E  6FB6               	movwf	(ID@n+1)& (0+255),b
  5227  001720  0E0A               	movlw	10
  5228  001722  6FB5               	movwf	ID@n& (0+255),b
  5229                           
  5230                           ; BSR set to: 0
  5231                           ;sort.c: 295: if(!sensor_outputs[0]){
  5232  001724  0100               	movlb	0	; () banked
  5233  001726  51DA               	movf	_sensor_outputs& (0+255),w,b
  5234  001728  0100               	movlb	0	; () banked
  5235  00172A  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  5236  00172C  A4D8               	btfss	status,2,c
  5237  00172E  D0E3               	goto	l8142
  5238                           
  5239                           ; BSR set to: 0
  5240                           ;sort.c: 296: const unsigned char time = (600 / n);
  5241  001730  0E02               	movlw	2
  5242  001732  0100               	movlb	0	; () banked
  5243  001734  6F87               	movwf	(___awdiv@dividend+1)& (0+255),b
  5244  001736  0E58               	movlw	88
  5245  001738  6F86               	movwf	___awdiv@dividend& (0+255),b
  5246  00173A  C0B5  F088         	movff	ID@n,___awdiv@divisor
  5247  00173E  C0B6  F089         	movff	ID@n+1,___awdiv@divisor+1
  5248  001742  EC54  F025         	call	___awdiv	;wreg free
  5249  001746  0100               	movlb	0	; () banked
  5250  001748  5186               	movf	?___awdiv& (0+255),w,b
  5251  00174A  0100               	movlb	0	; () banked
  5252  00174C  6FA8               	movwf	ID@time& (0+255),b
  5253                           
  5254                           ; BSR set to: 0
  5255                           ;sort.c: 297: int res1 = 0;
  5256  00174E  0E00               	movlw	0
  5257  001750  0100               	movlb	0	; () banked
  5258  001752  6FAA               	movwf	(ID@res1+1)& (0+255),b
  5259  001754  0E00               	movlw	0
  5260  001756  6FA9               	movwf	ID@res1& (0+255),b
  5261                           
  5262                           ; BSR set to: 0
  5263                           ;sort.c: 298: int res2 = 0;
  5264  001758  0E00               	movlw	0
  5265  00175A  0100               	movlb	0	; () banked
  5266  00175C  6FAC               	movwf	(ID@res2+1)& (0+255),b
  5267  00175E  0E00               	movlw	0
  5268  001760  6FAB               	movwf	ID@res2& (0+255),b
  5269                           
  5270                           ; BSR set to: 0
  5271                           ;sort.c: 299: for(int i = 0; i<n; i++){
  5272  001762  0E00               	movlw	0
  5273  001764  0100               	movlb	0	; () banked
  5274  001766  6FA1               	movwf	(ID@i+1)& (0+255),b
  5275  001768  0E00               	movlw	0
  5276  00176A  6FA0               	movwf	ID@i& (0+255),b
  5277  00176C                     l8100:
  5278                           
  5279                           ; BSR set to: 0
  5280  00176C  0100               	movlb	0	; () banked
  5281  00176E  51B5               	movf	ID@n& (0+255),w,b
  5282  001770  0100               	movlb	0	; () banked
  5283  001772  5DA0               	subwf	ID@i& (0+255),w,b
  5284  001774  0100               	movlb	0	; () banked
  5285  001776  51A1               	movf	(ID@i+1)& (0+255),w,b
  5286  001778  0A80               	xorlw	128
  5287  00177A  0100               	movlb	0	; () banked
  5288  00177C  6F9B               	movwf	??_ID& (0+255),b
  5289  00177E  0100               	movlb	0	; () banked
  5290  001780  51B6               	movf	(ID@n+1)& (0+255),w,b
  5291  001782  0A80               	xorlw	128
  5292  001784  0100               	movlb	0	; () banked
  5293  001786  599B               	subwfb	??_ID& (0+255),w,b
  5294  001788  B0D8               	btfsc	status,0,c
  5295  00178A  D012               	goto	l856
  5296                           
  5297                           ; BSR set to: 0
  5298                           ;sort.c: 300: delay_ms(time);
  5299                           
  5300                           ; BSR set to: 0
  5301                           
  5302                           ; BSR set to: 0
  5303  00178C  0100               	movlb	0	; () banked
  5304  00178E  51A8               	movf	ID@time& (0+255),w,b
  5305  001790  ECC7  F02D         	call	_delay_ms
  5306                           
  5307                           ;sort.c: 301: readCOND();
  5308  001794  ECF9  F02A         	call	_readCOND	;wreg free
  5309                           
  5310                           ;sort.c: 302: res1 += COND_signal;
  5311  001798  0100               	movlb	0	; () banked
  5312  00179A  51DE               	movf	_COND_signal& (0+255),w,b
  5313  00179C  0100               	movlb	0	; () banked
  5314  00179E  27A9               	addwf	ID@res1& (0+255),f,b
  5315  0017A0  0100               	movlb	0	; () banked
  5316  0017A2  51DF               	movf	(_COND_signal+1)& (0+255),w,b
  5317  0017A4  0100               	movlb	0	; () banked
  5318  0017A6  23AA               	addwfc	(ID@res1+1)& (0+255),f,b
  5319                           
  5320                           ; BSR set to: 0
  5321  0017A8  0100               	movlb	0	; () banked
  5322  0017AA  4BA0               	infsnz	ID@i& (0+255),f,b
  5323  0017AC  2BA1               	incf	(ID@i+1)& (0+255),f,b
  5324  0017AE  D7DE               	goto	l8100
  5325  0017B0                     l856:
  5326                           
  5327                           ; BSR set to: 0
  5328                           ;sort.c: 303: }
  5329                           ;sort.c: 304: LATAbits.LATA3 = 0;
  5330  0017B0  9689               	bcf	3977,3,c	;volatile
  5331                           
  5332                           ; BSR set to: 0
  5333                           ;sort.c: 305: _delay((unsigned long)((200)*(32000000/4000.0)));
  5334  0017B2  0E09               	movlw	9
  5335  0017B4  0100               	movlb	0	; () banked
  5336  0017B6  6F9C               	movwf	(??_ID+1)& (0+255),b
  5337  0017B8  0E1E               	movlw	30
  5338  0017BA  0100               	movlb	0	; () banked
  5339  0017BC  6F9B               	movwf	??_ID& (0+255),b
  5340  0017BE  0EE4               	movlw	228
  5341  0017C0                     u10497:
  5342  0017C0  2EE8               	decfsz	wreg,f,c
  5343  0017C2  D7FE               	bra	u10497
  5344  0017C4  2F9B               	decfsz	??_ID& (0+255),f,b
  5345  0017C6  D7FC               	bra	u10497
  5346  0017C8  2F9C               	decfsz	(??_ID+1)& (0+255),f,b
  5347  0017CA  D7FA               	bra	u10497
  5348  0017CC  F000               	nop	
  5349                           
  5350                           ;sort.c: 306: LATAbits.LATA3 = 1;
  5351  0017CE  8689               	bsf	3977,3,c	;volatile
  5352                           
  5353                           ;sort.c: 307: for(int i = 0; i<n; i++){
  5354  0017D0  0E00               	movlw	0
  5355  0017D2  0100               	movlb	0	; () banked
  5356  0017D4  6FA3               	movwf	(ID@i_1145+1)& (0+255),b
  5357  0017D6  0E00               	movlw	0
  5358  0017D8  6FA2               	movwf	ID@i_1145& (0+255),b
  5359  0017DA                     l8118:
  5360                           
  5361                           ; BSR set to: 0
  5362  0017DA  0100               	movlb	0	; () banked
  5363  0017DC  51B5               	movf	ID@n& (0+255),w,b
  5364  0017DE  0100               	movlb	0	; () banked
  5365  0017E0  5DA2               	subwf	ID@i_1145& (0+255),w,b
  5366  0017E2  0100               	movlb	0	; () banked
  5367  0017E4  51A3               	movf	(ID@i_1145+1)& (0+255),w,b
  5368  0017E6  0A80               	xorlw	128
  5369  0017E8  0100               	movlb	0	; () banked
  5370  0017EA  6F9B               	movwf	??_ID& (0+255),b
  5371  0017EC  0100               	movlb	0	; () banked
  5372  0017EE  51B6               	movf	(ID@n+1)& (0+255),w,b
  5373  0017F0  0A80               	xorlw	128
  5374  0017F2  0100               	movlb	0	; () banked
  5375  0017F4  599B               	subwfb	??_ID& (0+255),w,b
  5376  0017F6  B0D8               	btfsc	status,0,c
  5377  0017F8  D012               	goto	l858
  5378                           
  5379                           ; BSR set to: 0
  5380                           ;sort.c: 308: delay_ms(time);
  5381                           
  5382                           ; BSR set to: 0
  5383                           
  5384                           ; BSR set to: 0
  5385  0017FA  0100               	movlb	0	; () banked
  5386  0017FC  51A8               	movf	ID@time& (0+255),w,b
  5387  0017FE  ECC7  F02D         	call	_delay_ms
  5388                           
  5389                           ;sort.c: 309: readCOND();
  5390  001802  ECF9  F02A         	call	_readCOND	;wreg free
  5391                           
  5392                           ;sort.c: 310: res2 += COND_signal;
  5393  001806  0100               	movlb	0	; () banked
  5394  001808  51DE               	movf	_COND_signal& (0+255),w,b
  5395  00180A  0100               	movlb	0	; () banked
  5396  00180C  27AB               	addwf	ID@res2& (0+255),f,b
  5397  00180E  0100               	movlb	0	; () banked
  5398  001810  51DF               	movf	(_COND_signal+1)& (0+255),w,b
  5399  001812  0100               	movlb	0	; () banked
  5400  001814  23AC               	addwfc	(ID@res2+1)& (0+255),f,b
  5401                           
  5402                           ; BSR set to: 0
  5403  001816  0100               	movlb	0	; () banked
  5404  001818  4BA2               	infsnz	ID@i_1145& (0+255),f,b
  5405  00181A  2BA3               	incf	(ID@i_1145+1)& (0+255),f,b
  5406  00181C  D7DE               	goto	l8118
  5407  00181E                     l858:
  5408                           
  5409                           ; BSR set to: 0
  5410                           ;sort.c: 311: }
  5411                           ;sort.c: 312: LATAbits.LATA3 = 0;
  5412  00181E  9689               	bcf	3977,3,c	;volatile
  5413                           
  5414                           ; BSR set to: 0
  5415                           ;sort.c: 313: res1 = ((res1 / n) > 0.3) ? 1 : 0;
  5416  001820  0E9A               	movlw	154
  5417  001822  0100               	movlb	0	; () banked
  5418  001824  6F92               	movwf	___ftge@ff1& (0+255),b
  5419  001826  0E99               	movlw	153
  5420  001828  0100               	movlb	0	; () banked
  5421  00182A  6F93               	movwf	(___ftge@ff1+1)& (0+255),b
  5422  00182C  0E3E               	movlw	62
  5423  00182E  0100               	movlb	0	; () banked
  5424  001830  6F94               	movwf	(___ftge@ff1+2)& (0+255),b
  5425  001832  C0B5  F088         	movff	ID@n,___awdiv@divisor
  5426  001836  C0B6  F089         	movff	ID@n+1,___awdiv@divisor+1
  5427  00183A  C0A9  F086         	movff	ID@res1,___awdiv@dividend
  5428  00183E  C0AA  F087         	movff	ID@res1+1,___awdiv@dividend+1
  5429  001842  EC54  F025         	call	___awdiv	;wreg free
  5430  001846  C086  F08E         	movff	?___awdiv,___awtoft@c
  5431  00184A  C087  F08F         	movff	?___awdiv+1,___awtoft@c+1
  5432  00184E  EC68  F02B         	call	___awtoft	;wreg free
  5433  001852  C08E  F095         	movff	?___awtoft,___ftge@ff2
  5434  001856  C08F  F096         	movff	?___awtoft+1,___ftge@ff2+1
  5435  00185A  C090  F097         	movff	?___awtoft+2,___ftge@ff2+2
  5436  00185E  ECF0  F024         	call	___ftge	;wreg free
  5437  001862  0100               	movlb	0	; () banked
  5438  001864  B0D8               	btfsc	status,0,c
  5439  001866  D002               	goto	u7070
  5440  001868  0E01               	movlw	1
  5441  00186A  D001               	goto	u7080
  5442  00186C                     u7070:
  5443  00186C  0E00               	movlw	0
  5444  00186E                     u7080:
  5445  00186E  0100               	movlb	0	; () banked
  5446  001870  6FA9               	movwf	ID@res1& (0+255),b
  5447  001872  6BAA               	clrf	(ID@res1+1)& (0+255),b
  5448                           
  5449                           ;sort.c: 314: res2 = ((res2 / n) > 0.3) ? 1 : 0;
  5450  001874  0E9A               	movlw	154
  5451  001876  0100               	movlb	0	; () banked
  5452  001878  6F92               	movwf	___ftge@ff1& (0+255),b
  5453  00187A  0E99               	movlw	153
  5454  00187C  0100               	movlb	0	; () banked
  5455  00187E  6F93               	movwf	(___ftge@ff1+1)& (0+255),b
  5456  001880  0E3E               	movlw	62
  5457  001882  0100               	movlb	0	; () banked
  5458  001884  6F94               	movwf	(___ftge@ff1+2)& (0+255),b
  5459  001886  C0B5  F088         	movff	ID@n,___awdiv@divisor
  5460  00188A  C0B6  F089         	movff	ID@n+1,___awdiv@divisor+1
  5461  00188E  C0AB  F086         	movff	ID@res2,___awdiv@dividend
  5462  001892  C0AC  F087         	movff	ID@res2+1,___awdiv@dividend+1
  5463  001896  EC54  F025         	call	___awdiv	;wreg free
  5464  00189A  C086  F08E         	movff	?___awdiv,___awtoft@c
  5465  00189E  C087  F08F         	movff	?___awdiv+1,___awtoft@c+1
  5466  0018A2  EC68  F02B         	call	___awtoft	;wreg free
  5467  0018A6  C08E  F095         	movff	?___awtoft,___ftge@ff2
  5468  0018AA  C08F  F096         	movff	?___awtoft+1,___ftge@ff2+1
  5469  0018AE  C090  F097         	movff	?___awtoft+2,___ftge@ff2+2
  5470  0018B2  ECF0  F024         	call	___ftge	;wreg free
  5471  0018B6  0100               	movlb	0	; () banked
  5472  0018B8  B0D8               	btfsc	status,0,c
  5473  0018BA  D002               	goto	u7090
  5474  0018BC  0E01               	movlw	1
  5475  0018BE  D001               	goto	u7100
  5476  0018C0                     u7090:
  5477  0018C0  0E00               	movlw	0
  5478  0018C2                     u7100:
  5479  0018C2  0100               	movlb	0	; () banked
  5480  0018C4  6FAB               	movwf	ID@res2& (0+255),b
  5481  0018C6  6BAC               	clrf	(ID@res2+1)& (0+255),b
  5482                           
  5483                           ; BSR set to: 0
  5484                           ;sort.c: 317: sensor_outputs[1] = (res1 || res2);
  5485  0018C8  0E01               	movlw	1
  5486  0018CA  0100               	movlb	0	; () banked
  5487  0018CC  6F9E               	movwf	_ID$1146& (0+255),b
  5488                           
  5489                           ; BSR set to: 0
  5490  0018CE  0100               	movlb	0	; () banked
  5491  0018D0  51A9               	movf	ID@res1& (0+255),w,b
  5492  0018D2  0100               	movlb	0	; () banked
  5493  0018D4  11AA               	iorwf	(ID@res1+1)& (0+255),w,b
  5494  0018D6  A4D8               	btfss	status,2,c
  5495  0018D8  D009               	goto	l8140
  5496                           
  5497                           ; BSR set to: 0
  5498  0018DA  0100               	movlb	0	; () banked
  5499  0018DC  51AB               	movf	ID@res2& (0+255),w,b
  5500  0018DE  0100               	movlb	0	; () banked
  5501  0018E0  11AC               	iorwf	(ID@res2+1)& (0+255),w,b
  5502  0018E2  A4D8               	btfss	status,2,c
  5503  0018E4  D003               	goto	l8140
  5504                           
  5505                           ; BSR set to: 0
  5506  0018E6  0E00               	movlw	0
  5507  0018E8  0100               	movlb	0	; () banked
  5508  0018EA  6F9E               	movwf	_ID$1146& (0+255),b
  5509  0018EC                     l8140:
  5510                           
  5511                           ; BSR set to: 0
  5512  0018EC  C09E  F0DC         	movff	_ID$1146,_sensor_outputs+2
  5513  0018F0  0100               	movlb	0	; () banked
  5514  0018F2  6BDD               	clrf	(_sensor_outputs+3)& (0+255),b
  5515                           
  5516                           ;sort.c: 318: }
  5517  0018F4  D0E3               	goto	l8186
  5518  0018F6                     l8142:
  5519                           
  5520                           ; BSR set to: 0
  5521                           ;sort.c: 319: else{
  5522                           ;sort.c: 320: const unsigned char time = (400 / n);
  5523  0018F6  0E01               	movlw	1
  5524  0018F8  0100               	movlb	0	; () banked
  5525  0018FA  6F87               	movwf	(___awdiv@dividend+1)& (0+255),b
  5526  0018FC  0E90               	movlw	144
  5527  0018FE  6F86               	movwf	___awdiv@dividend& (0+255),b
  5528  001900  C0B5  F088         	movff	ID@n,___awdiv@divisor
  5529  001904  C0B6  F089         	movff	ID@n+1,___awdiv@divisor+1
  5530  001908  EC54  F025         	call	___awdiv	;wreg free
  5531  00190C  0100               	movlb	0	; () banked
  5532  00190E  5186               	movf	?___awdiv& (0+255),w,b
  5533  001910  0100               	movlb	0	; () banked
  5534  001912  6F9D               	movwf	ID@time_1147& (0+255),b
  5535                           
  5536                           ; BSR set to: 0
  5537                           ;sort.c: 321: int res[2];
  5538                           ;sort.c: 323: for(int j = 0; j < 2; j++){
  5539  001914  0E00               	movlw	0
  5540  001916  0100               	movlb	0	; () banked
  5541  001918  6FB4               	movwf	(ID@j+1)& (0+255),b
  5542  00191A  0E00               	movlw	0
  5543  00191C  6FB3               	movwf	ID@j& (0+255),b
  5544                           
  5545                           ; BSR set to: 0
  5546  00191E  0100               	movlb	0	; () banked
  5547  001920  BFB4               	btfsc	(ID@j+1)& (0+255),7,b
  5548  001922  D00A               	goto	l862
  5549  001924  0100               	movlb	0	; () banked
  5550  001926  51B4               	movf	(ID@j+1)& (0+255),w,b
  5551  001928  E106               	bnz	u7130
  5552  00192A  0E02               	movlw	2
  5553  00192C  0100               	movlb	0	; () banked
  5554  00192E  5DB3               	subwf	ID@j& (0+255),w,b
  5555  001930  B0D8               	btfsc	status,0,c
  5556  001932  D0C4               	goto	l8186
  5557  001934  D001               	goto	l862
  5558  001936                     u7130:
  5559                           
  5560                           ; BSR set to: 0
  5561  001936  D0C2               	goto	l8186
  5562  001938                     l862:
  5563                           
  5564                           ; BSR set to: 0
  5565                           ;sort.c: 324: LATAbits.LATA3 = 1;
  5566  001938  8689               	bsf	3977,3,c	;volatile
  5567                           
  5568                           ; BSR set to: 0
  5569                           ;sort.c: 325: for(int i = 0; i < n; i++){
  5570  00193A  0E00               	movlw	0
  5571  00193C  0100               	movlb	0	; () banked
  5572  00193E  6FA5               	movwf	(ID@i_1150+1)& (0+255),b
  5573  001940  0E00               	movlw	0
  5574  001942  6FA4               	movwf	ID@i_1150& (0+255),b
  5575  001944                     l8152:
  5576                           
  5577                           ; BSR set to: 0
  5578  001944  0100               	movlb	0	; () banked
  5579  001946  51B5               	movf	ID@n& (0+255),w,b
  5580  001948  0100               	movlb	0	; () banked
  5581  00194A  5DA4               	subwf	ID@i_1150& (0+255),w,b
  5582  00194C  0100               	movlb	0	; () banked
  5583  00194E  51A5               	movf	(ID@i_1150+1)& (0+255),w,b
  5584  001950  0A80               	xorlw	128
  5585  001952  0100               	movlb	0	; () banked
  5586  001954  6F9B               	movwf	??_ID& (0+255),b
  5587  001956  0100               	movlb	0	; () banked
  5588  001958  51B6               	movf	(ID@n+1)& (0+255),w,b
  5589  00195A  0A80               	xorlw	128
  5590  00195C  0100               	movlb	0	; () banked
  5591  00195E  599B               	subwfb	??_ID& (0+255),w,b
  5592  001960  B0D8               	btfsc	status,0,c
  5593  001962  D01A               	goto	l865
  5594                           
  5595                           ; BSR set to: 0
  5596                           ;sort.c: 326: delay_ms(time);
  5597                           
  5598                           ; BSR set to: 0
  5599                           
  5600                           ; BSR set to: 0
  5601  001964  0100               	movlb	0	; () banked
  5602  001966  519D               	movf	ID@time_1147& (0+255),w,b
  5603  001968  ECC7  F02D         	call	_delay_ms
  5604                           
  5605                           ;sort.c: 327: readCOND();
  5606  00196C  ECF9  F02A         	call	_readCOND	;wreg free
  5607                           
  5608                           ;sort.c: 328: res[j] += COND_signal;
  5609  001970  90D8               	bcf	status,0,c
  5610  001972  0100               	movlb	0	; () banked
  5611  001974  35B3               	rlcf	ID@j& (0+255),w,b
  5612  001976  6ED9               	movwf	fsr2l,c
  5613  001978  0100               	movlb	0	; () banked
  5614  00197A  35B4               	rlcf	(ID@j+1)& (0+255),w,b
  5615  00197C  6EDA               	movwf	fsr2h,c
  5616  00197E  0EAD               	movlw	low ID@res
  5617  001980  26D9               	addwf	fsr2l,f,c
  5618  001982  0E00               	movlw	high ID@res
  5619  001984  22DA               	addwfc	fsr2h,f,c
  5620  001986  0100               	movlb	0	; () banked
  5621  001988  51DE               	movf	_COND_signal& (0+255),w,b
  5622  00198A  26DE               	addwf	postinc2,f,c
  5623  00198C  51DF               	movf	(_COND_signal+1)& (0+255),w,b
  5624  00198E  22DD               	addwfc	postdec2,f,c
  5625                           
  5626                           ; BSR set to: 0
  5627  001990  0100               	movlb	0	; () banked
  5628  001992  4BA4               	infsnz	ID@i_1150& (0+255),f,b
  5629  001994  2BA5               	incf	(ID@i_1150+1)& (0+255),f,b
  5630  001996  D7D6               	goto	l8152
  5631  001998                     l865:
  5632                           
  5633                           ; BSR set to: 0
  5634                           ;sort.c: 329: }
  5635                           ;sort.c: 330: LATAbits.LATA3 = 0;
  5636  001998  9689               	bcf	3977,3,c	;volatile
  5637                           
  5638                           ; BSR set to: 0
  5639                           ;sort.c: 332: _delay((unsigned long)((200)*(32000000/4000.0)));
  5640  00199A  0E09               	movlw	9
  5641  00199C  0100               	movlb	0	; () banked
  5642  00199E  6F9C               	movwf	(??_ID+1)& (0+255),b
  5643  0019A0  0E1E               	movlw	30
  5644  0019A2  0100               	movlb	0	; () banked
  5645  0019A4  6F9B               	movwf	??_ID& (0+255),b
  5646  0019A6  0EE4               	movlw	228
  5647  0019A8                     u10507:
  5648  0019A8  2EE8               	decfsz	wreg,f,c
  5649  0019AA  D7FE               	bra	u10507
  5650  0019AC  2F9B               	decfsz	??_ID& (0+255),f,b
  5651  0019AE  D7FC               	bra	u10507
  5652  0019B0  2F9C               	decfsz	(??_ID+1)& (0+255),f,b
  5653  0019B2  D7FA               	bra	u10507
  5654  0019B4  F000               	nop	
  5655                           
  5656                           ;sort.c: 335: res[j] = ((res[j] / n) > 0.3) ? 1 : 0;
  5657  0019B6  0E9A               	movlw	154
  5658  0019B8  0100               	movlb	0	; () banked
  5659  0019BA  6F92               	movwf	___ftge@ff1& (0+255),b
  5660  0019BC  0E99               	movlw	153
  5661  0019BE  0100               	movlb	0	; () banked
  5662  0019C0  6F93               	movwf	(___ftge@ff1+1)& (0+255),b
  5663  0019C2  0E3E               	movlw	62
  5664  0019C4  0100               	movlb	0	; () banked
  5665  0019C6  6F94               	movwf	(___ftge@ff1+2)& (0+255),b
  5666  0019C8  C0B5  F088         	movff	ID@n,___awdiv@divisor
  5667  0019CC  C0B6  F089         	movff	ID@n+1,___awdiv@divisor+1
  5668  0019D0  90D8               	bcf	status,0,c
  5669  0019D2  0100               	movlb	0	; () banked
  5670  0019D4  35B3               	rlcf	ID@j& (0+255),w,b
  5671  0019D6  6ED9               	movwf	fsr2l,c
  5672  0019D8  0100               	movlb	0	; () banked
  5673  0019DA  35B4               	rlcf	(ID@j+1)& (0+255),w,b
  5674  0019DC  6EDA               	movwf	fsr2h,c
  5675  0019DE  0EAD               	movlw	low ID@res
  5676  0019E0  26D9               	addwf	fsr2l,f,c
  5677  0019E2  0E00               	movlw	high ID@res
  5678  0019E4  22DA               	addwfc	fsr2h,f,c
  5679  0019E6  CFDE F086          	movff	postinc2,___awdiv@dividend
  5680  0019EA  CFDD F087          	movff	postdec2,___awdiv@dividend+1
  5681  0019EE  EC54  F025         	call	___awdiv	;wreg free
  5682  0019F2  C086  F08E         	movff	?___awdiv,___awtoft@c
  5683  0019F6  C087  F08F         	movff	?___awdiv+1,___awtoft@c+1
  5684  0019FA  EC68  F02B         	call	___awtoft	;wreg free
  5685  0019FE  C08E  F095         	movff	?___awtoft,___ftge@ff2
  5686  001A02  C08F  F096         	movff	?___awtoft+1,___ftge@ff2+1
  5687  001A06  C090  F097         	movff	?___awtoft+2,___ftge@ff2+2
  5688  001A0A  ECF0  F024         	call	___ftge	;wreg free
  5689  001A0E  0100               	movlb	0	; () banked
  5690  001A10  B0D8               	btfsc	status,0,c
  5691  001A12  D002               	goto	u7160
  5692  001A14  0E01               	movlw	1
  5693  001A16  D001               	goto	u7170
  5694  001A18                     u7160:
  5695  001A18  0E00               	movlw	0
  5696  001A1A                     u7170:
  5697  001A1A  0100               	movlb	0	; () banked
  5698  001A1C  6F9B               	movwf	??_ID& (0+255),b
  5699  001A1E  6B9C               	clrf	(??_ID+1)& (0+255),b
  5700  001A20  90D8               	bcf	status,0,c
  5701  001A22  0100               	movlb	0	; () banked
  5702  001A24  35B3               	rlcf	ID@j& (0+255),w,b
  5703  001A26  6ED9               	movwf	fsr2l,c
  5704  001A28  0100               	movlb	0	; () banked
  5705  001A2A  35B4               	rlcf	(ID@j+1)& (0+255),w,b
  5706  001A2C  6EDA               	movwf	fsr2h,c
  5707  001A2E  0EAD               	movlw	low ID@res
  5708  001A30  26D9               	addwf	fsr2l,f,c
  5709  001A32  0E00               	movlw	high ID@res
  5710  001A34  22DA               	addwfc	fsr2h,f,c
  5711  001A36  C09B  FFDE         	movff	??_ID,postinc2
  5712  001A3A  C09C  FFDD         	movff	??_ID+1,postdec2
  5713                           
  5714                           ; BSR set to: 0
  5715                           ;sort.c: 336: if(j==0){
  5716  001A3E  0100               	movlb	0	; () banked
  5717  001A40  51B3               	movf	ID@j& (0+255),w,b
  5718  001A42  0100               	movlb	0	; () banked
  5719  001A44  11B4               	iorwf	(ID@j+1)& (0+255),w,b
  5720  001A46  A4D8               	btfss	status,2,c
  5721  001A48  D010               	goto	l8172
  5722                           
  5723                           ; BSR set to: 0
  5724                           ;sort.c: 337: sensor_outputs[1] = res[j];
  5725  001A4A  90D8               	bcf	status,0,c
  5726  001A4C  0100               	movlb	0	; () banked
  5727  001A4E  35B3               	rlcf	ID@j& (0+255),w,b
  5728  001A50  6ED9               	movwf	fsr2l,c
  5729  001A52  0100               	movlb	0	; () banked
  5730  001A54  35B4               	rlcf	(ID@j+1)& (0+255),w,b
  5731  001A56  6EDA               	movwf	fsr2h,c
  5732  001A58  0EAD               	movlw	low ID@res
  5733  001A5A  26D9               	addwf	fsr2l,f,c
  5734  001A5C  0E00               	movlw	high ID@res
  5735  001A5E  22DA               	addwfc	fsr2h,f,c
  5736  001A60  CFDE F0DC          	movff	postinc2,_sensor_outputs+2
  5737  001A64  CFDD F0DD          	movff	postdec2,_sensor_outputs+3
  5738                           
  5739                           ;sort.c: 338: }
  5740  001A68  D01F               	goto	l8182
  5741  001A6A                     l8172:
  5742                           
  5743                           ; BSR set to: 0
  5744                           ;sort.c: 339: else{
  5745                           ;sort.c: 340: sensor_outputs[1] = sensor_outputs[1] || res[j];
  5746  001A6A  0E01               	movlw	1
  5747  001A6C  0100               	movlb	0	; () banked
  5748  001A6E  6F9F               	movwf	_ID$1151& (0+255),b
  5749                           
  5750                           ; BSR set to: 0
  5751  001A70  0100               	movlb	0	; () banked
  5752  001A72  51DC               	movf	(_sensor_outputs+2)& (0+255),w,b
  5753  001A74  0100               	movlb	0	; () banked
  5754  001A76  11DD               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  5755  001A78  A4D8               	btfss	status,2,c
  5756  001A7A  D012               	goto	l8180
  5757                           
  5758                           ; BSR set to: 0
  5759  001A7C  90D8               	bcf	status,0,c
  5760  001A7E  0100               	movlb	0	; () banked
  5761  001A80  35B3               	rlcf	ID@j& (0+255),w,b
  5762  001A82  6ED9               	movwf	fsr2l,c
  5763  001A84  0100               	movlb	0	; () banked
  5764  001A86  35B4               	rlcf	(ID@j+1)& (0+255),w,b
  5765  001A88  6EDA               	movwf	fsr2h,c
  5766  001A8A  0EAD               	movlw	low ID@res
  5767  001A8C  26D9               	addwf	fsr2l,f,c
  5768  001A8E  0E00               	movlw	high ID@res
  5769  001A90  22DA               	addwfc	fsr2h,f,c
  5770  001A92  50DE               	movf	postinc2,w,c
  5771  001A94  10DE               	iorwf	postinc2,w,c
  5772  001A96  A4D8               	btfss	status,2,c
  5773  001A98  D003               	goto	l8180
  5774                           
  5775                           ; BSR set to: 0
  5776  001A9A  0E00               	movlw	0
  5777  001A9C  0100               	movlb	0	; () banked
  5778  001A9E  6F9F               	movwf	_ID$1151& (0+255),b
  5779  001AA0                     l8180:
  5780                           
  5781                           ; BSR set to: 0
  5782  001AA0  C09F  F0DC         	movff	_ID$1151,_sensor_outputs+2
  5783  001AA4  0100               	movlb	0	; () banked
  5784  001AA6  6BDD               	clrf	(_sensor_outputs+3)& (0+255),b
  5785  001AA8                     l8182:
  5786                           
  5787                           ; BSR set to: 0
  5788  001AA8  0100               	movlb	0	; () banked
  5789  001AAA  4BB3               	infsnz	ID@j& (0+255),f,b
  5790  001AAC  2BB4               	incf	(ID@j+1)& (0+255),f,b
  5791                           
  5792                           ; BSR set to: 0
  5793  001AAE  0100               	movlb	0	; () banked
  5794  001AB0  BFB4               	btfsc	(ID@j+1)& (0+255),7,b
  5795  001AB2  D742               	goto	l862
  5796  001AB4  0100               	movlb	0	; () banked
  5797  001AB6  51B4               	movf	(ID@j+1)& (0+255),w,b
  5798  001AB8  E101               	bnz	l8186
  5799  001ABA  D737               	goto	L5
  5800  001ABC                     l8186:
  5801                           
  5802                           ; BSR set to: 0
  5803                           ;sort.c: 341: }
  5804                           ;sort.c: 342: }
  5805                           ;sort.c: 343: }
  5806                           ;sort.c: 351: if(!sensor_outputs[0]){
  5807  001ABC  0100               	movlb	0	; () banked
  5808  001ABE  51DA               	movf	_sensor_outputs& (0+255),w,b
  5809  001AC0  0100               	movlb	0	; () banked
  5810  001AC2  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  5811  001AC4  A4D8               	btfss	status,2,c
  5812  001AC6  D016               	goto	l8198
  5813                           
  5814                           ; BSR set to: 0
  5815                           ;sort.c: 352: if(!sensor_outputs[1]){
  5816  001AC8  0100               	movlb	0	; () banked
  5817  001ACA  51DC               	movf	(_sensor_outputs+2)& (0+255),w,b
  5818  001ACC  0100               	movlb	0	; () banked
  5819  001ACE  11DD               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  5820  001AD0  A4D8               	btfss	status,2,c
  5821  001AD2  D008               	goto	l8194
  5822                           
  5823                           ; BSR set to: 0
  5824                           ;sort.c: 353: count_pop_no_tab++;
  5825  001AD4  0101               	movlb	1	; () banked
  5826  001AD6  4B29               	infsnz	_count_pop_no_tab& (0+255),f,b
  5827  001AD8  2B2A               	incf	(_count_pop_no_tab+1)& (0+255),f,b
  5828                           
  5829                           ; BSR set to: 1
  5830                           ;sort.c: 354: cur_can = 0;
  5831  001ADA  0E00               	movlw	0
  5832  001ADC  0101               	movlb	1	; () banked
  5833  001ADE  6F2E               	movwf	(_cur_can+1)& (0+255),b
  5834  001AE0  0E00               	movlw	0
  5835  001AE2  D007               	goto	L6
  5836  001AE4                     l8194:
  5837                           
  5838                           ;sort.c: 356: else{
  5839                           ;sort.c: 357: count_pop_w_tab++;
  5840  001AE4  0101               	movlb	1	; () banked
  5841  001AE6  4B2B               	infsnz	_count_pop_w_tab& (0+255),f,b
  5842  001AE8  2B2C               	incf	(_count_pop_w_tab+1)& (0+255),f,b
  5843                           
  5844                           ; BSR set to: 1
  5845                           ;sort.c: 358: cur_can = 1;
  5846  001AEA  0E00               	movlw	0
  5847  001AEC  0101               	movlb	1	; () banked
  5848  001AEE  6F2E               	movwf	(_cur_can+1)& (0+255),b
  5849  001AF0  0E01               	movlw	1
  5850  001AF2                     L6:
  5851  001AF2  6F2D               	movwf	_cur_can& (0+255),b
  5852  001AF4                     l8198:
  5853                           
  5854                           ;sort.c: 359: }
  5855                           ;sort.c: 360: }
  5856                           ;sort.c: 361: if(sensor_outputs[0]){
  5857  001AF4  0100               	movlb	0	; () banked
  5858  001AF6  51DA               	movf	_sensor_outputs& (0+255),w,b
  5859  001AF8  0100               	movlb	0	; () banked
  5860  001AFA  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  5861  001AFC  B4D8               	btfsc	status,2,c
  5862  001AFE  D016               	goto	l8210
  5863                           
  5864                           ; BSR set to: 0
  5865                           ;sort.c: 362: if(!sensor_outputs[1]){
  5866  001B00  0100               	movlb	0	; () banked
  5867  001B02  51DC               	movf	(_sensor_outputs+2)& (0+255),w,b
  5868  001B04  0100               	movlb	0	; () banked
  5869  001B06  11DD               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  5870  001B08  A4D8               	btfss	status,2,c
  5871  001B0A  D008               	goto	l8206
  5872                           
  5873                           ; BSR set to: 0
  5874                           ;sort.c: 363: count_can_w_lab++;
  5875  001B0C  0101               	movlb	1	; () banked
  5876  001B0E  4B27               	infsnz	_count_can_w_lab& (0+255),f,b
  5877  001B10  2B28               	incf	(_count_can_w_lab+1)& (0+255),f,b
  5878                           
  5879                           ; BSR set to: 1
  5880                           ;sort.c: 364: cur_can = 2;
  5881  001B12  0E00               	movlw	0
  5882  001B14  0101               	movlb	1	; () banked
  5883  001B16  6F2E               	movwf	(_cur_can+1)& (0+255),b
  5884  001B18  0E02               	movlw	2
  5885  001B1A  D007               	goto	L7
  5886  001B1C                     l8206:
  5887                           
  5888                           ;sort.c: 366: else{
  5889                           ;sort.c: 367: count_can_no_lab++;
  5890  001B1C  0101               	movlb	1	; () banked
  5891  001B1E  4B25               	infsnz	_count_can_no_lab& (0+255),f,b
  5892  001B20  2B26               	incf	(_count_can_no_lab+1)& (0+255),f,b
  5893                           
  5894                           ; BSR set to: 1
  5895                           ;sort.c: 368: cur_can = 3;
  5896  001B22  0E00               	movlw	0
  5897  001B24  0101               	movlb	1	; () banked
  5898  001B26  6F2E               	movwf	(_cur_can+1)& (0+255),b
  5899  001B28  0E03               	movlw	3
  5900  001B2A                     L7:
  5901  001B2A  6F2D               	movwf	_cur_can& (0+255),b
  5902  001B2C                     l8210:
  5903  001B2C  0101               	movlb	1	; () banked
  5904  001B2E  5137               	movf	_f_can_distributed& (0+255),w,b
  5905  001B30  0101               	movlb	1	; () banked
  5906  001B32  1138               	iorwf	(_f_can_distributed+1)& (0+255),w,b
  5907  001B34  B4D8               	btfsc	status,2,c
  5908  001B36  D7FA               	goto	l8210
  5909                           
  5910                           ; BSR set to: 1
  5911                           ;sort.c: 374: for(int i=0;i<10000;i++)
  5912                           
  5913                           ; BSR set to: 1
  5914  001B38  0E00               	movlw	0
  5915  001B3A  0100               	movlb	0	; () banked
  5916  001B3C  6FA7               	movwf	(ID@i_1152+1)& (0+255),b
  5917  001B3E  0E00               	movlw	0
  5918  001B40  6FA6               	movwf	ID@i_1152& (0+255),b
  5919  001B42                     l8214:
  5920                           
  5921                           ; BSR set to: 0
  5922  001B42  0100               	movlb	0	; () banked
  5923  001B44  BFA7               	btfsc	(ID@i_1152+1)& (0+255),7,b
  5924  001B46  D008               	goto	l879
  5925  001B48  0E10               	movlw	16
  5926  001B4A  0100               	movlb	0	; () banked
  5927  001B4C  5DA6               	subwf	ID@i_1152& (0+255),w,b
  5928  001B4E  0E27               	movlw	39
  5929  001B50  0100               	movlb	0	; () banked
  5930  001B52  59A7               	subwfb	(ID@i_1152+1)& (0+255),w,b
  5931  001B54  B0D8               	btfsc	status,0,c
  5932  001B56  D00D               	goto	l880
  5933  001B58                     l879:
  5934                           
  5935                           ; BSR set to: 0
  5936                           ;sort.c: 375: {
  5937                           ;sort.c: 376: LATCbits.LATC0 = 1;
  5938  001B58  808B               	bsf	3979,0,c	;volatile
  5939                           
  5940                           ; BSR set to: 0
  5941                           ;sort.c: 377: _delay((unsigned long)((10)*(32000000/4000000.0)));
  5942  001B5A  0E1A               	movlw	26
  5943  001B5C                     u10517:
  5944  001B5C  2EE8               	decfsz	wreg,f,c
  5945  001B5E  D7FE               	bra	u10517
  5946  001B60  D000               	nop2	
  5947                           
  5948                           ;sort.c: 378: LATCbits.LATC0 = 0;
  5949  001B62  908B               	bcf	3979,0,c	;volatile
  5950                           
  5951                           ;sort.c: 379: _delay((unsigned long)((90)*(32000000/4000000.0)));
  5952  001B64  0EF0               	movlw	240
  5953  001B66                     u10527:
  5954  001B66  2EE8               	decfsz	wreg,f,c
  5955  001B68  D7FE               	bra	u10527
  5956  001B6A  0100               	movlb	0	; () banked
  5957  001B6C  4BA6               	infsnz	ID@i_1152& (0+255),f,b
  5958  001B6E  2BA7               	incf	(ID@i_1152+1)& (0+255),f,b
  5959  001B70  D7E8               	goto	l8214
  5960  001B72                     l880:
  5961                           
  5962                           ; BSR set to: 0
  5963                           ;sort.c: 380: }
  5964                           ;sort.c: 382: LATCbits.LATC0 = 0;
  5965  001B72  908B               	bcf	3979,0,c	;volatile
  5966                           
  5967                           ; BSR set to: 0
  5968                           ;sort.c: 384: f_can_coming_to_distribution = 1;
  5969  001B74  0E00               	movlw	0
  5970  001B76  0101               	movlb	1	; () banked
  5971  001B78  6F36               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  5972  001B7A  0E01               	movlw	1
  5973  001B7C  6F35               	movwf	_f_can_coming_to_distribution& (0+255),b
  5974                           
  5975                           ; BSR set to: 1
  5976                           ;sort.c: 385: _delay((unsigned long)((750)*(32000000/4000.0)));
  5977  001B7E  0E1F               	movlw	31
  5978  001B80  0100               	movlb	0	; () banked
  5979  001B82  6F9C               	movwf	(??_ID+1)& (0+255),b
  5980  001B84  0E71               	movlw	113
  5981  001B86  0100               	movlb	0	; () banked
  5982  001B88  6F9B               	movwf	??_ID& (0+255),b
  5983  001B8A  0E1E               	movlw	30
  5984  001B8C                     u10537:
  5985  001B8C  2EE8               	decfsz	wreg,f,c
  5986  001B8E  D7FE               	bra	u10537
  5987  001B90  2F9B               	decfsz	??_ID& (0+255),f,b
  5988  001B92  D7FC               	bra	u10537
  5989  001B94  2F9C               	decfsz	(??_ID+1)& (0+255),f,b
  5990  001B96  D7FA               	bra	u10537
  5991  001B98  F000               	nop	
  5992                           
  5993                           ;sort.c: 386: LATCbits.LATC0 = 1;
  5994  001B9A  808B               	bsf	3979,0,c	;volatile
  5995                           
  5996                           ;sort.c: 389: if(!f_lastCan){
  5997  001B9C  0100               	movlb	0	; () banked
  5998  001B9E  51EA               	movf	_f_lastCan& (0+255),w,b
  5999  001BA0  0100               	movlb	0	; () banked
  6000  001BA2  11EB               	iorwf	(_f_lastCan+1)& (0+255),w,b
  6001  001BA4  A4D8               	btfss	status,2,c
  6002  001BA6  D032               	goto	l8246
  6003                           
  6004                           ; BSR set to: 0
  6005                           ;sort.c: 390: for(int i=0; i<46; i++){
  6006  001BA8  0E00               	movlw	0
  6007  001BAA  0100               	movlb	0	; () banked
  6008  001BAC  6FB2               	movwf	(ID@i_1153+1)& (0+255),b
  6009  001BAE  0E00               	movlw	0
  6010  001BB0  6FB1               	movwf	ID@i_1153& (0+255),b
  6011                           
  6012                           ; BSR set to: 0
  6013  001BB2  0100               	movlb	0	; () banked
  6014  001BB4  BFB2               	btfsc	(ID@i_1153+1)& (0+255),7,b
  6015  001BB6  D008               	goto	l8238
  6016  001BB8  0100               	movlb	0	; () banked
  6017  001BBA  51B2               	movf	(ID@i_1153+1)& (0+255),w,b
  6018  001BBC  E126               	bnz	l883
  6019  001BBE  0E2E               	movlw	46
  6020  001BC0  0100               	movlb	0	; () banked
  6021  001BC2  5DB1               	subwf	ID@i_1153& (0+255),w,b
  6022  001BC4  B0D8               	btfsc	status,0,c
  6023  001BC6  D021               	goto	l883
  6024  001BC8                     l8238:
  6025                           
  6026                           ; BSR set to: 0
  6027                           ;sort.c: 391: LATBbits.LATB2 = !LATBbits.LATB2;
  6028  001BC8  B48A               	btfsc	3978,2,c	;volatile
  6029  001BCA  D004               	goto	u7310
  6030  001BCC  0100               	movlb	0	; () banked
  6031  001BCE  6B9B               	clrf	??_ID& (0+255),b
  6032  001BD0  2B9B               	incf	??_ID& (0+255),f,b
  6033  001BD2  D002               	goto	u7328
  6034  001BD4                     u7310:
  6035  001BD4  0100               	movlb	0	; () banked
  6036  001BD6  6B9B               	clrf	??_ID& (0+255),b
  6037  001BD8                     u7328:
  6038  001BD8  0100               	movlb	0	; () banked
  6039  001BDA  479B               	rlncf	??_ID& (0+255),f,b
  6040  001BDC  479B               	rlncf	??_ID& (0+255),f,b
  6041  001BDE  508A               	movf	3978,w,c	;volatile
  6042  001BE0  0100               	movlb	0	; () banked
  6043  001BE2  199B               	xorwf	??_ID& (0+255),w,b
  6044  001BE4  0BFB               	andlw	-5
  6045  001BE6  199B               	xorwf	??_ID& (0+255),w,b
  6046  001BE8  6E8A               	movwf	3978,c	;volatile
  6047                           
  6048                           ; BSR set to: 0
  6049                           ;sort.c: 392: delay_ms(45-i);
  6050  001BEA  0100               	movlb	0	; () banked
  6051  001BEC  51B1               	movf	ID@i_1153& (0+255),w,b
  6052  001BEE  0800               	sublw	0
  6053  001BF0  0F2D               	addlw	45
  6054  001BF2  ECC7  F02D         	call	_delay_ms
  6055  001BF6  0100               	movlb	0	; () banked
  6056  001BF8  4BB1               	infsnz	ID@i_1153& (0+255),f,b
  6057  001BFA  2BB2               	incf	(ID@i_1153+1)& (0+255),f,b
  6058                           
  6059                           ; BSR set to: 0
  6060  001BFC  0100               	movlb	0	; () banked
  6061  001BFE  BFB2               	btfsc	(ID@i_1153+1)& (0+255),7,b
  6062  001C00  D7E3               	goto	l8238
  6063  001C02  0100               	movlb	0	; () banked
  6064  001C04  51B2               	movf	(ID@i_1153+1)& (0+255),w,b
  6065  001C06  E101               	bnz	u7330
  6066  001C08  D7DA               	goto	L8
  6067  001C0A                     u7330:
  6068  001C0A                     l883:
  6069                           
  6070                           ; BSR set to: 0
  6071                           ;sort.c: 393: }
  6072                           ;sort.c: 394: LATBbits.LATB2 = 1;
  6073  001C0A  848A               	bsf	3978,2,c	;volatile
  6074  001C0C                     l8246:
  6075                           
  6076                           ; BSR set to: 0
  6077                           ;sort.c: 395: }
  6078                           ;sort.c: 397: f_can_coming_to_ID = 0;
  6079  001C0C  0E00               	movlw	0
  6080  001C0E  0101               	movlb	1	; () banked
  6081  001C10  6F34               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  6082  001C12  0E00               	movlw	0
  6083  001C14  6F33               	movwf	_f_can_coming_to_ID& (0+255),b
  6084  001C16  0012               	return	
  6085  001C18                     __end_of_ID:
  6086                           	opt stack 0
  6087                           tblptru	equ	0xFF8
  6088                           tblptrh	equ	0xFF7
  6089                           tblptrl	equ	0xFF6
  6090                           tablat	equ	0xFF5
  6091                           prodh	equ	0xFF4
  6092                           prodl	equ	0xFF3
  6093                           postinc0	equ	0xFEE
  6094                           wreg	equ	0xFE8
  6095                           postdec1	equ	0xFE5
  6096                           fsr1l	equ	0xFE1
  6097                           indf2	equ	0xFDF
  6098                           postinc2	equ	0xFDE
  6099                           postdec2	equ	0xFDD
  6100                           fsr2h	equ	0xFDA
  6101                           fsr2l	equ	0xFD9
  6102                           status	equ	0xFD8
  6103                           
  6104 ;; *************** function _readCOND *****************
  6105 ;; Defined at:
  6106 ;;		line 35 in file "ADCFunctionality.c"
  6107 ;; Parameters:    Size  Location     Type
  6108 ;;		None
  6109 ;; Auto vars:     Size  Location     Type
  6110 ;;  res             2    4[BANK0 ] int 
  6111 ;; Return value:  Size  Location     Type
  6112 ;;                  1    wreg      void 
  6113 ;; Registers used:
  6114 ;;		wreg, status,2, status,0, cstack
  6115 ;; Tracked objects:
  6116 ;;		On entry : 0/0
  6117 ;;		On exit  : 0/0
  6118 ;;		Unchanged: 0/0
  6119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6120 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6121 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6122 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6123 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6124 ;;Total ram usage:        4 bytes
  6125 ;; Hardware stack levels used:    1
  6126 ;; Hardware stack levels required when called:    8
  6127 ;; This function calls:
  6128 ;;		_readADC
  6129 ;; This function is called by:
  6130 ;;		_ID
  6131 ;; This function uses a non-reentrant model
  6132 ;;
  6133                           
  6134                           	psect	text9
  6135  0055F2                     __ptext9:
  6136                           	opt stack 0
  6137  0055F2                     _readCOND:
  6138                           	opt stack 20
  6139                           
  6140                           ;ADCFunctionality.c: 36: readADC(2);
  6141                           
  6142                           ; BSR set to: 1
  6143                           ;incstack = 0
  6144  0055F2  0E02               	movlw	2
  6145  0055F4  EC9C  F02D         	call	_readADC
  6146                           
  6147                           ;ADCFunctionality.c: 37: int res = ADRESH<<8 | ADRESL;
  6148  0055F8  50C3               	movf	4035,w,c	;volatile
  6149  0055FA  CFC4 F082          	movff	4036,??_readCOND	;volatile
  6150  0055FE  0100               	movlb	0	; () banked
  6151  005600  6B83               	clrf	(??_readCOND+1)& (0+255),b
  6152  005602  C082  F083         	movff	??_readCOND,??_readCOND+1
  6153  005606  0100               	movlb	0	; () banked
  6154  005608  6B82               	clrf	??_readCOND& (0+255),b
  6155  00560A  0100               	movlb	0	; () banked
  6156  00560C  1182               	iorwf	??_readCOND& (0+255),w,b
  6157  00560E  0100               	movlb	0	; () banked
  6158  005610  6F84               	movwf	readCOND@res& (0+255),b
  6159  005612  0100               	movlb	0	; () banked
  6160  005614  5183               	movf	(??_readCOND+1)& (0+255),w,b
  6161  005616  0100               	movlb	0	; () banked
  6162  005618  6F85               	movwf	(readCOND@res+1)& (0+255),b
  6163                           
  6164                           ; BSR set to: 0
  6165                           ;ADCFunctionality.c: 38: COND_signal = (res > 300) ? 1 : 0;
  6166  00561A  0100               	movlb	0	; () banked
  6167  00561C  BF85               	btfsc	(readCOND@res+1)& (0+255),7,b
  6168  00561E  D00A               	goto	u6120
  6169  005620  0E2D               	movlw	45
  6170  005622  0100               	movlb	0	; () banked
  6171  005624  5D84               	subwf	readCOND@res& (0+255),w,b
  6172  005626  0E01               	movlw	1
  6173  005628  0100               	movlb	0	; () banked
  6174  00562A  5985               	subwfb	(readCOND@res+1)& (0+255),w,b
  6175  00562C  A0D8               	btfss	status,0,c
  6176  00562E  D002               	goto	u6120
  6177  005630  0E01               	movlw	1
  6178  005632  D001               	goto	u6130
  6179  005634                     u6120:
  6180  005634  0E00               	movlw	0
  6181  005636                     u6130:
  6182  005636  0100               	movlb	0	; () banked
  6183  005638  6FDE               	movwf	_COND_signal& (0+255),b
  6184  00563A  6BDF               	clrf	(_COND_signal+1)& (0+255),b
  6185                           
  6186                           ; BSR set to: 0
  6187  00563C  0012               	return		;funcret
  6188  00563E                     __end_of_readCOND:
  6189                           	opt stack 0
  6190                           tblptru	equ	0xFF8
  6191                           tblptrh	equ	0xFF7
  6192                           tblptrl	equ	0xFF6
  6193                           tablat	equ	0xFF5
  6194                           prodh	equ	0xFF4
  6195                           prodl	equ	0xFF3
  6196                           postinc0	equ	0xFEE
  6197                           wreg	equ	0xFE8
  6198                           postdec1	equ	0xFE5
  6199                           fsr1l	equ	0xFE1
  6200                           indf2	equ	0xFDF
  6201                           postinc2	equ	0xFDE
  6202                           postdec2	equ	0xFDD
  6203                           fsr2h	equ	0xFDA
  6204                           fsr2l	equ	0xFD9
  6205                           status	equ	0xFD8
  6206                           
  6207 ;; *************** function _delay_ms *****************
  6208 ;; Defined at:
  6209 ;;		line 706 in file "sort.c"
  6210 ;; Parameters:    Size  Location     Type
  6211 ;;  milliseconds    1    wreg     unsigned char 
  6212 ;; Auto vars:     Size  Location     Type
  6213 ;;  milliseconds    1    1[BANK0 ] unsigned char 
  6214 ;; Return value:  Size  Location     Type
  6215 ;;                  1    wreg      void 
  6216 ;; Registers used:
  6217 ;;		wreg, status,2, status,0, cstack
  6218 ;; Tracked objects:
  6219 ;;		On entry : 0/0
  6220 ;;		On exit  : 0/0
  6221 ;;		Unchanged: 0/0
  6222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6223 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6224 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6225 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6226 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6227 ;;Total ram usage:        2 bytes
  6228 ;; Hardware stack levels used:    1
  6229 ;; Hardware stack levels required when called:    7
  6230 ;; This function calls:
  6231 ;;		Nothing
  6232 ;; This function is called by:
  6233 ;;		_Loading
  6234 ;;		_ID
  6235 ;; This function uses a non-reentrant model
  6236 ;;
  6237                           
  6238                           	psect	text10
  6239  005B8E                     __ptext10:
  6240                           	opt stack 0
  6241  005B8E                     _delay_ms:
  6242                           	opt stack 21
  6243                           
  6244                           ; BSR set to: 0
  6245                           ;incstack = 0
  6246                           ;delay_ms@milliseconds stored from wreg
  6247  005B8E  0100               	movlb	0	; () banked
  6248  005B90  6F81               	movwf	delay_ms@milliseconds& (0+255),b
  6249                           
  6250                           ;sort.c: 707: while(milliseconds > 0)
  6251  005B92  D00B               	goto	l7442
  6252  005B94                     l7438:
  6253                           
  6254                           ;sort.c: 708: {
  6255                           ;sort.c: 709: milliseconds--;
  6256  005B94  0100               	movlb	0	; () banked
  6257  005B96  0781               	decf	delay_ms@milliseconds& (0+255),f,b
  6258                           
  6259                           ; BSR set to: 0
  6260                           ;sort.c: 710: _delay((unsigned long)((990)*(32000000/4000000.0)));
  6261  005B98  0E0B               	movlw	11
  6262  005B9A  0100               	movlb	0	; () banked
  6263  005B9C  6F80               	movwf	??_delay_ms& (0+255),b
  6264  005B9E  0E47               	movlw	71
  6265  005BA0                     u10547:
  6266  005BA0  2EE8               	decfsz	wreg,f,c
  6267  005BA2  D7FE               	bra	u10547
  6268  005BA4  2F80               	decfsz	??_delay_ms& (0+255),f,b
  6269  005BA6  D7FC               	bra	u10547
  6270  005BA8  D000               	nop2	
  6271  005BAA                     l7442:
  6272  005BAA  0100               	movlb	0	; () banked
  6273  005BAC  5181               	movf	delay_ms@milliseconds& (0+255),w,b
  6274  005BAE  0100               	movlb	0	; () banked
  6275  005BB0  B4D8               	btfsc	status,2,c
  6276  005BB2  0012               	return	
  6277  005BB4  D7EF               	goto	l7438
  6278  005BB6                     __end_of_delay_ms:
  6279                           	opt stack 0
  6280                           tblptru	equ	0xFF8
  6281                           tblptrh	equ	0xFF7
  6282                           tblptrl	equ	0xFF6
  6283                           tablat	equ	0xFF5
  6284                           prodh	equ	0xFF4
  6285                           prodl	equ	0xFF3
  6286                           postinc0	equ	0xFEE
  6287                           wreg	equ	0xFE8
  6288                           postdec1	equ	0xFE5
  6289                           fsr1l	equ	0xFE1
  6290                           indf2	equ	0xFDF
  6291                           postinc2	equ	0xFDE
  6292                           postdec2	equ	0xFDD
  6293                           fsr2h	equ	0xFDA
  6294                           fsr2l	equ	0xFD9
  6295                           status	equ	0xFD8
  6296                           
  6297 ;; *************** function ___ftge *****************
  6298 ;; Defined at:
  6299 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
  6300 ;; Parameters:    Size  Location     Type
  6301 ;;  ff1             3   18[BANK0 ] float 
  6302 ;;  ff2             3   21[BANK0 ] float 
  6303 ;; Auto vars:     Size  Location     Type
  6304 ;;		None
  6305 ;; Return value:  Size  Location     Type
  6306 ;;		None               void
  6307 ;; Registers used:
  6308 ;;		wreg, status,2, status,0
  6309 ;; Tracked objects:
  6310 ;;		On entry : 0/0
  6311 ;;		On exit  : 0/0
  6312 ;;		Unchanged: 0/0
  6313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6314 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6315 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6316 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6317 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6318 ;;Total ram usage:        9 bytes
  6319 ;; Hardware stack levels used:    1
  6320 ;; Hardware stack levels required when called:    7
  6321 ;; This function calls:
  6322 ;;		Nothing
  6323 ;; This function is called by:
  6324 ;;		_ID
  6325 ;; This function uses a non-reentrant model
  6326 ;;
  6327                           
  6328                           	psect	text11
  6329  0049E0                     __ptext11:
  6330                           	opt stack 0
  6331  0049E0                     ___ftge:
  6332                           	opt stack 21
  6333                           
  6334                           ; BSR set to: 0
  6335                           ;incstack = 0
  6336  0049E0  0100               	movlb	0	; () banked
  6337  0049E2  AF94               	btfss	(___ftge@ff1+2)& (0+255),7,b
  6338  0049E4  D01D               	goto	l7560
  6339                           
  6340                           ; BSR set to: 0
  6341  0049E6  C092  F098         	movff	___ftge@ff1,??___ftge
  6342  0049EA  C093  F099         	movff	___ftge@ff1+1,??___ftge+1
  6343  0049EE  C094  F09A         	movff	___ftge@ff1+2,??___ftge+2
  6344  0049F2  0100               	movlb	0	; () banked
  6345  0049F4  1F98               	comf	??___ftge& (0+255),f,b
  6346  0049F6  1F99               	comf	(??___ftge+1)& (0+255),f,b
  6347  0049F8  1F9A               	comf	(??___ftge+2)& (0+255),f,b
  6348  0049FA  2B98               	incf	??___ftge& (0+255),f,b
  6349  0049FC  0E00               	movlw	0
  6350  0049FE  2399               	addwfc	(??___ftge+1)& (0+255),f,b
  6351  004A00  239A               	addwfc	(??___ftge+2)& (0+255),f,b
  6352  004A02  0E00               	movlw	0
  6353  004A04  0100               	movlb	0	; () banked
  6354  004A06  2598               	addwf	??___ftge& (0+255),w,b
  6355  004A08  0100               	movlb	0	; () banked
  6356  004A0A  6F92               	movwf	___ftge@ff1& (0+255),b
  6357  004A0C  0E00               	movlw	0
  6358  004A0E  0100               	movlb	0	; () banked
  6359  004A10  2199               	addwfc	(??___ftge+1)& (0+255),w,b
  6360  004A12  0100               	movlb	0	; () banked
  6361  004A14  6F93               	movwf	(___ftge@ff1+1)& (0+255),b
  6362  004A16  0E80               	movlw	128
  6363  004A18  0100               	movlb	0	; () banked
  6364  004A1A  219A               	addwfc	(??___ftge+2)& (0+255),w,b
  6365  004A1C  0100               	movlb	0	; () banked
  6366  004A1E  6F94               	movwf	(___ftge@ff1+2)& (0+255),b
  6367  004A20                     l7560:
  6368                           
  6369                           ; BSR set to: 0
  6370  004A20  0100               	movlb	0	; () banked
  6371  004A22  AF97               	btfss	(___ftge@ff2+2)& (0+255),7,b
  6372  004A24  D01D               	goto	l7564
  6373                           
  6374                           ; BSR set to: 0
  6375  004A26  C095  F098         	movff	___ftge@ff2,??___ftge
  6376  004A2A  C096  F099         	movff	___ftge@ff2+1,??___ftge+1
  6377  004A2E  C097  F09A         	movff	___ftge@ff2+2,??___ftge+2
  6378  004A32  0100               	movlb	0	; () banked
  6379  004A34  1F98               	comf	??___ftge& (0+255),f,b
  6380  004A36  1F99               	comf	(??___ftge+1)& (0+255),f,b
  6381  004A38  1F9A               	comf	(??___ftge+2)& (0+255),f,b
  6382  004A3A  2B98               	incf	??___ftge& (0+255),f,b
  6383  004A3C  0E00               	movlw	0
  6384  004A3E  2399               	addwfc	(??___ftge+1)& (0+255),f,b
  6385  004A40  239A               	addwfc	(??___ftge+2)& (0+255),f,b
  6386  004A42  0E00               	movlw	0
  6387  004A44  0100               	movlb	0	; () banked
  6388  004A46  2598               	addwf	??___ftge& (0+255),w,b
  6389  004A48  0100               	movlb	0	; () banked
  6390  004A4A  6F95               	movwf	___ftge@ff2& (0+255),b
  6391  004A4C  0E00               	movlw	0
  6392  004A4E  0100               	movlb	0	; () banked
  6393  004A50  2199               	addwfc	(??___ftge+1)& (0+255),w,b
  6394  004A52  0100               	movlb	0	; () banked
  6395  004A54  6F96               	movwf	(___ftge@ff2+1)& (0+255),b
  6396  004A56  0E80               	movlw	128
  6397  004A58  0100               	movlb	0	; () banked
  6398  004A5A  219A               	addwfc	(??___ftge+2)& (0+255),w,b
  6399  004A5C  0100               	movlb	0	; () banked
  6400  004A5E  6F97               	movwf	(___ftge@ff2+2)& (0+255),b
  6401  004A60                     l7564:
  6402                           
  6403                           ; BSR set to: 0
  6404  004A60  0E00               	movlw	0
  6405  004A62  0100               	movlb	0	; () banked
  6406  004A64  1B92               	xorwf	___ftge@ff1& (0+255),f,b
  6407  004A66  0E00               	movlw	0
  6408  004A68  0100               	movlb	0	; () banked
  6409  004A6A  1B93               	xorwf	(___ftge@ff1+1)& (0+255),f,b
  6410  004A6C  0E80               	movlw	128
  6411  004A6E  0100               	movlb	0	; () banked
  6412  004A70  1B94               	xorwf	(___ftge@ff1+2)& (0+255),f,b
  6413                           
  6414                           ; BSR set to: 0
  6415  004A72  0E00               	movlw	0
  6416  004A74  0100               	movlb	0	; () banked
  6417  004A76  1B95               	xorwf	___ftge@ff2& (0+255),f,b
  6418  004A78  0E00               	movlw	0
  6419  004A7A  0100               	movlb	0	; () banked
  6420  004A7C  1B96               	xorwf	(___ftge@ff2+1)& (0+255),f,b
  6421  004A7E  0E80               	movlw	128
  6422  004A80  0100               	movlb	0	; () banked
  6423  004A82  1B97               	xorwf	(___ftge@ff2+2)& (0+255),f,b
  6424  004A84  0100               	movlb	0	; () banked
  6425  004A86  5195               	movf	___ftge@ff2& (0+255),w,b
  6426  004A88  0100               	movlb	0	; () banked
  6427  004A8A  5D92               	subwf	___ftge@ff1& (0+255),w,b
  6428  004A8C  0100               	movlb	0	; () banked
  6429  004A8E  5196               	movf	(___ftge@ff2+1)& (0+255),w,b
  6430  004A90  0100               	movlb	0	; () banked
  6431  004A92  5993               	subwfb	(___ftge@ff1+1)& (0+255),w,b
  6432  004A94  0100               	movlb	0	; () banked
  6433  004A96  5197               	movf	(___ftge@ff2+2)& (0+255),w,b
  6434  004A98  0100               	movlb	0	; () banked
  6435  004A9A  5994               	subwfb	(___ftge@ff1+2)& (0+255),w,b
  6436  004A9C  B0D8               	btfsc	status,0,c
  6437  004A9E  D002               	goto	l7570
  6438                           
  6439                           ; BSR set to: 0
  6440  004AA0  90D8               	bcf	status,0,c
  6441  004AA2  0012               	return	
  6442  004AA4                     l7570:
  6443                           
  6444                           ; BSR set to: 0
  6445  004AA4  80D8               	bsf	status,0,c
  6446                           
  6447                           ; BSR set to: 0
  6448  004AA6  0012               	return	
  6449  004AA8                     __end_of___ftge:
  6450                           	opt stack 0
  6451                           tblptru	equ	0xFF8
  6452                           tblptrh	equ	0xFF7
  6453                           tblptrl	equ	0xFF6
  6454                           tablat	equ	0xFF5
  6455                           prodh	equ	0xFF4
  6456                           prodl	equ	0xFF3
  6457                           postinc0	equ	0xFEE
  6458                           wreg	equ	0xFE8
  6459                           postdec1	equ	0xFE5
  6460                           fsr1l	equ	0xFE1
  6461                           indf2	equ	0xFDF
  6462                           postinc2	equ	0xFDE
  6463                           postdec2	equ	0xFDD
  6464                           fsr2h	equ	0xFDA
  6465                           fsr2l	equ	0xFD9
  6466                           status	equ	0xFD8
  6467                           
  6468 ;; *************** function ___awtoft *****************
  6469 ;; Defined at:
  6470 ;;		line 32 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
  6471 ;; Parameters:    Size  Location     Type
  6472 ;;  c               2   14[BANK0 ] int 
  6473 ;; Auto vars:     Size  Location     Type
  6474 ;;  sign            1   17[BANK0 ] unsigned char 
  6475 ;; Return value:  Size  Location     Type
  6476 ;;                  3   14[BANK0 ] float 
  6477 ;; Registers used:
  6478 ;;		wreg, status,2, status,0, cstack
  6479 ;; Tracked objects:
  6480 ;;		On entry : 0/0
  6481 ;;		On exit  : 0/0
  6482 ;;		Unchanged: 0/0
  6483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6484 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6485 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6486 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6487 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6488 ;;Total ram usage:        4 bytes
  6489 ;; Hardware stack levels used:    1
  6490 ;; Hardware stack levels required when called:    8
  6491 ;; This function calls:
  6492 ;;		___ftpack
  6493 ;; This function is called by:
  6494 ;;		_ID
  6495 ;; This function uses a non-reentrant model
  6496 ;;
  6497                           
  6498                           	psect	text12
  6499  0056D0                     __ptext12:
  6500                           	opt stack 0
  6501  0056D0                     ___awtoft:
  6502                           	opt stack 20
  6503                           
  6504                           ; BSR set to: 0
  6505                           ;incstack = 0
  6506  0056D0  0E00               	movlw	0
  6507  0056D2  0100               	movlb	0	; () banked
  6508  0056D4  6F91               	movwf	___awtoft@sign& (0+255),b
  6509                           
  6510                           ; BSR set to: 0
  6511  0056D6  0100               	movlb	0	; () banked
  6512  0056D8  AF8F               	btfss	(___awtoft@c+1)& (0+255),7,b
  6513  0056DA  D008               	goto	l7552
  6514                           
  6515                           ; BSR set to: 0
  6516  0056DC  0100               	movlb	0	; () banked
  6517  0056DE  6D8E               	negf	___awtoft@c& (0+255),b
  6518  0056E0  1F8F               	comf	(___awtoft@c+1)& (0+255),f,b
  6519  0056E2  B0D8               	btfsc	status,0,c
  6520  0056E4  2B8F               	incf	(___awtoft@c+1)& (0+255),f,b
  6521                           
  6522                           ; BSR set to: 0
  6523  0056E6  0E01               	movlw	1
  6524  0056E8  0100               	movlb	0	; () banked
  6525  0056EA  6F91               	movwf	___awtoft@sign& (0+255),b
  6526  0056EC                     l7552:
  6527                           
  6528                           ; BSR set to: 0
  6529  0056EC  C08E  F080         	movff	___awtoft@c,___ftpack@arg
  6530  0056F0  C08F  F081         	movff	___awtoft@c+1,___ftpack@arg+1
  6531  0056F4  0100               	movlb	0	; () banked
  6532  0056F6  6B82               	clrf	(___ftpack@arg+2)& (0+255),b
  6533  0056F8  0E8E               	movlw	142
  6534  0056FA  0100               	movlb	0	; () banked
  6535  0056FC  6F83               	movwf	___ftpack@exp& (0+255),b
  6536  0056FE  C091  F084         	movff	___awtoft@sign,___ftpack@sign
  6537  005702  EC4A  F021         	call	___ftpack	;wreg free
  6538  005706  C080  F08E         	movff	?___ftpack,?___awtoft
  6539  00570A  C081  F08F         	movff	?___ftpack+1,?___awtoft+1
  6540  00570E  C082  F090         	movff	?___ftpack+2,?___awtoft+2
  6541  005712  0012               	return	
  6542  005714                     __end_of___awtoft:
  6543                           	opt stack 0
  6544                           tblptru	equ	0xFF8
  6545                           tblptrh	equ	0xFF7
  6546                           tblptrl	equ	0xFF6
  6547                           tablat	equ	0xFF5
  6548                           prodh	equ	0xFF4
  6549                           prodl	equ	0xFF3
  6550                           postinc0	equ	0xFEE
  6551                           wreg	equ	0xFE8
  6552                           postdec1	equ	0xFE5
  6553                           fsr1l	equ	0xFE1
  6554                           indf2	equ	0xFDF
  6555                           postinc2	equ	0xFDE
  6556                           postdec2	equ	0xFDD
  6557                           fsr2h	equ	0xFDA
  6558                           fsr2l	equ	0xFD9
  6559                           status	equ	0xFD8
  6560                           
  6561 ;; *************** function ___ftpack *****************
  6562 ;; Defined at:
  6563 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
  6564 ;; Parameters:    Size  Location     Type
  6565 ;;  arg             3    0[BANK0 ] unsigned um
  6566 ;;  exp             1    3[BANK0 ] unsigned char 
  6567 ;;  sign            1    4[BANK0 ] unsigned char 
  6568 ;; Auto vars:     Size  Location     Type
  6569 ;;		None
  6570 ;; Return value:  Size  Location     Type
  6571 ;;                  3    0[BANK0 ] float 
  6572 ;; Registers used:
  6573 ;;		wreg, status,2, status,0
  6574 ;; Tracked objects:
  6575 ;;		On entry : 0/0
  6576 ;;		On exit  : 0/0
  6577 ;;		Unchanged: 0/0
  6578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6579 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6580 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6581 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6582 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6583 ;;Total ram usage:        8 bytes
  6584 ;; Hardware stack levels used:    1
  6585 ;; Hardware stack levels required when called:    7
  6586 ;; This function calls:
  6587 ;;		Nothing
  6588 ;; This function is called by:
  6589 ;;		___awtoft
  6590 ;; This function uses a non-reentrant model
  6591 ;;
  6592                           
  6593                           	psect	text13
  6594  004294                     __ptext13:
  6595                           	opt stack 0
  6596  004294                     ___ftpack:
  6597                           	opt stack 20
  6598                           
  6599                           ;incstack = 0
  6600  004294  0100               	movlb	0	; () banked
  6601  004296  5183               	movf	___ftpack@exp& (0+255),w,b
  6602  004298  0100               	movlb	0	; () banked
  6603  00429A  B4D8               	btfsc	status,2,c
  6604  00429C  D008               	goto	l6936
  6605                           
  6606                           ; BSR set to: 0
  6607  00429E  0100               	movlb	0	; () banked
  6608  0042A0  5180               	movf	___ftpack@arg& (0+255),w,b
  6609  0042A2  0100               	movlb	0	; () banked
  6610  0042A4  1181               	iorwf	(___ftpack@arg+1)& (0+255),w,b
  6611  0042A6  0100               	movlb	0	; () banked
  6612  0042A8  1182               	iorwf	(___ftpack@arg+2)& (0+255),w,b
  6613  0042AA  A4D8               	btfss	status,2,c
  6614  0042AC  D011               	goto	l6942
  6615  0042AE                     l6936:
  6616                           
  6617                           ; BSR set to: 0
  6618  0042AE  0E00               	movlw	0
  6619  0042B0  0100               	movlb	0	; () banked
  6620  0042B2  6F80               	movwf	?___ftpack& (0+255),b
  6621  0042B4  0E00               	movlw	0
  6622  0042B6  0100               	movlb	0	; () banked
  6623  0042B8  6F81               	movwf	(?___ftpack+1)& (0+255),b
  6624  0042BA  0E00               	movlw	0
  6625  0042BC  0100               	movlb	0	; () banked
  6626  0042BE  6F82               	movwf	(?___ftpack+2)& (0+255),b
  6627                           
  6628                           ; BSR set to: 0
  6629  0042C0  0012               	return	
  6630  0042C2                     l6940:
  6631                           
  6632                           ; BSR set to: 0
  6633  0042C2  0100               	movlb	0	; () banked
  6634  0042C4  2B83               	incf	___ftpack@exp& (0+255),f,b
  6635  0042C6  0100               	movlb	0	; () banked
  6636  0042C8  90D8               	bcf	status,0,c
  6637  0042CA  3382               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  6638  0042CC  3381               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  6639  0042CE  3380               	rrcf	___ftpack@arg& (0+255),f,b
  6640  0042D0                     l6942:
  6641                           
  6642                           ; BSR set to: 0
  6643  0042D0  0E00               	movlw	0
  6644  0042D2  0100               	movlb	0	; () banked
  6645  0042D4  1580               	andwf	___ftpack@arg& (0+255),w,b
  6646  0042D6  0100               	movlb	0	; () banked
  6647  0042D8  6F85               	movwf	??___ftpack& (0+255),b
  6648  0042DA  0E00               	movlw	0
  6649  0042DC  0100               	movlb	0	; () banked
  6650  0042DE  1581               	andwf	(___ftpack@arg+1)& (0+255),w,b
  6651  0042E0  0100               	movlb	0	; () banked
  6652  0042E2  6F86               	movwf	(??___ftpack+1)& (0+255),b
  6653  0042E4  0EFE               	movlw	254
  6654  0042E6  0100               	movlb	0	; () banked
  6655  0042E8  1582               	andwf	(___ftpack@arg+2)& (0+255),w,b
  6656  0042EA  0100               	movlb	0	; () banked
  6657  0042EC  6F87               	movwf	(??___ftpack+2)& (0+255),b
  6658  0042EE  0100               	movlb	0	; () banked
  6659  0042F0  5185               	movf	??___ftpack& (0+255),w,b
  6660  0042F2  0100               	movlb	0	; () banked
  6661  0042F4  1186               	iorwf	(??___ftpack+1)& (0+255),w,b
  6662  0042F6  0100               	movlb	0	; () banked
  6663  0042F8  1187               	iorwf	(??___ftpack+2)& (0+255),w,b
  6664  0042FA  B4D8               	btfsc	status,2,c
  6665  0042FC  D011               	goto	l6948
  6666  0042FE  D7E1               	goto	l6940
  6667  004300                     l6944:
  6668                           
  6669                           ; BSR set to: 0
  6670  004300  0100               	movlb	0	; () banked
  6671  004302  2B83               	incf	___ftpack@exp& (0+255),f,b
  6672                           
  6673                           ; BSR set to: 0
  6674  004304  0E01               	movlw	1
  6675  004306  0100               	movlb	0	; () banked
  6676  004308  2780               	addwf	___ftpack@arg& (0+255),f,b
  6677  00430A  0E00               	movlw	0
  6678  00430C  0100               	movlb	0	; () banked
  6679  00430E  2381               	addwfc	(___ftpack@arg+1)& (0+255),f,b
  6680  004310  0E00               	movlw	0
  6681  004312  0100               	movlb	0	; () banked
  6682  004314  2382               	addwfc	(___ftpack@arg+2)& (0+255),f,b
  6683  004316  0100               	movlb	0	; () banked
  6684  004318  90D8               	bcf	status,0,c
  6685  00431A  3382               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  6686  00431C  3381               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  6687  00431E  3380               	rrcf	___ftpack@arg& (0+255),f,b
  6688  004320                     l6948:
  6689                           
  6690                           ; BSR set to: 0
  6691  004320  0E00               	movlw	0
  6692  004322  0100               	movlb	0	; () banked
  6693  004324  1580               	andwf	___ftpack@arg& (0+255),w,b
  6694  004326  0100               	movlb	0	; () banked
  6695  004328  6F85               	movwf	??___ftpack& (0+255),b
  6696  00432A  0E00               	movlw	0
  6697  00432C  0100               	movlb	0	; () banked
  6698  00432E  1581               	andwf	(___ftpack@arg+1)& (0+255),w,b
  6699  004330  0100               	movlb	0	; () banked
  6700  004332  6F86               	movwf	(??___ftpack+1)& (0+255),b
  6701  004334  0EFF               	movlw	255
  6702  004336  0100               	movlb	0	; () banked
  6703  004338  1582               	andwf	(___ftpack@arg+2)& (0+255),w,b
  6704  00433A  0100               	movlb	0	; () banked
  6705  00433C  6F87               	movwf	(??___ftpack+2)& (0+255),b
  6706  00433E  0100               	movlb	0	; () banked
  6707  004340  5185               	movf	??___ftpack& (0+255),w,b
  6708  004342  0100               	movlb	0	; () banked
  6709  004344  1186               	iorwf	(??___ftpack+1)& (0+255),w,b
  6710  004346  0100               	movlb	0	; () banked
  6711  004348  1187               	iorwf	(??___ftpack+2)& (0+255),w,b
  6712  00434A  B4D8               	btfsc	status,2,c
  6713  00434C  D008               	goto	l6952
  6714  00434E  D7D8               	goto	l6944
  6715  004350                     l6950:
  6716                           
  6717                           ; BSR set to: 0
  6718  004350  0100               	movlb	0	; () banked
  6719  004352  0783               	decf	___ftpack@exp& (0+255),f,b
  6720  004354  0100               	movlb	0	; () banked
  6721  004356  90D8               	bcf	status,0,c
  6722  004358  3780               	rlcf	___ftpack@arg& (0+255),f,b
  6723  00435A  3781               	rlcf	(___ftpack@arg+1)& (0+255),f,b
  6724  00435C  3782               	rlcf	(___ftpack@arg+2)& (0+255),f,b
  6725  00435E                     l6952:
  6726                           
  6727                           ; BSR set to: 0
  6728  00435E  0100               	movlb	0	; () banked
  6729  004360  BF81               	btfsc	(___ftpack@arg+1)& (0+255),7,b
  6730  004362  D004               	goto	l1792
  6731                           
  6732                           ; BSR set to: 0
  6733  004364  0E02               	movlw	2
  6734  004366  0100               	movlb	0	; () banked
  6735  004368  6183               	cpfslt	___ftpack@exp& (0+255),b
  6736  00436A  D7F2               	goto	l6950
  6737  00436C                     l1792:
  6738                           
  6739                           ; BSR set to: 0
  6740  00436C  0100               	movlb	0	; () banked
  6741  00436E  B183               	btfsc	___ftpack@exp& (0+255),0,b
  6742  004370  D002               	goto	l6958
  6743                           
  6744                           ; BSR set to: 0
  6745  004372  0100               	movlb	0	; () banked
  6746  004374  9F81               	bcf	(___ftpack@arg+1)& (0+255),7,b
  6747  004376                     l6958:
  6748                           
  6749                           ; BSR set to: 0
  6750  004376  0100               	movlb	0	; () banked
  6751  004378  90D8               	bcf	status,0,c
  6752  00437A  3383               	rrcf	___ftpack@exp& (0+255),f,b
  6753  00437C  0100               	movlb	0	; () banked
  6754  00437E  5183               	movf	___ftpack@exp& (0+255),w,b
  6755  004380  0100               	movlb	0	; () banked
  6756  004382  1382               	iorwf	(___ftpack@arg+2)& (0+255),f,b
  6757                           
  6758                           ; BSR set to: 0
  6759  004384  0100               	movlb	0	; () banked
  6760  004386  5184               	movf	___ftpack@sign& (0+255),w,b
  6761  004388  0100               	movlb	0	; () banked
  6762  00438A  B4D8               	btfsc	status,2,c
  6763  00438C  D002               	goto	l6964
  6764                           
  6765                           ; BSR set to: 0
  6766  00438E  0100               	movlb	0	; () banked
  6767  004390  8F82               	bsf	(___ftpack@arg+2)& (0+255),7,b
  6768  004392                     l6964:
  6769                           
  6770                           ; BSR set to: 0
  6771  004392  C080  F080         	movff	___ftpack@arg,?___ftpack
  6772  004396  C081  F081         	movff	___ftpack@arg+1,?___ftpack+1
  6773  00439A  C082  F082         	movff	___ftpack@arg+2,?___ftpack+2
  6774  00439E  0012               	return	
  6775  0043A0                     __end_of___ftpack:
  6776                           	opt stack 0
  6777                           tblptru	equ	0xFF8
  6778                           tblptrh	equ	0xFF7
  6779                           tblptrl	equ	0xFF6
  6780                           tablat	equ	0xFF5
  6781                           prodh	equ	0xFF4
  6782                           prodl	equ	0xFF3
  6783                           postinc0	equ	0xFEE
  6784                           wreg	equ	0xFE8
  6785                           postdec1	equ	0xFE5
  6786                           fsr1l	equ	0xFE1
  6787                           indf2	equ	0xFDF
  6788                           postinc2	equ	0xFDE
  6789                           postdec2	equ	0xFDD
  6790                           fsr2h	equ	0xFDA
  6791                           fsr2l	equ	0xFD9
  6792                           status	equ	0xFD8
  6793                           
  6794 ;; *************** function _Distribution *****************
  6795 ;; Defined at:
  6796 ;;		line 400 in file "sort.c"
  6797 ;; Parameters:    Size  Location     Type
  6798 ;;		None
  6799 ;; Auto vars:     Size  Location     Type
  6800 ;;		None
  6801 ;; Return value:  Size  Location     Type
  6802 ;;                  1    wreg      void 
  6803 ;; Registers used:
  6804 ;;		wreg, status,2, status,0, cstack
  6805 ;; Tracked objects:
  6806 ;;		On entry : 0/0
  6807 ;;		On exit  : 0/0
  6808 ;;		Unchanged: 0/0
  6809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6810 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6811 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6812 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6813 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6814 ;;Total ram usage:        2 bytes
  6815 ;; Hardware stack levels used:    1
  6816 ;; Hardware stack levels required when called:    8
  6817 ;; This function calls:
  6818 ;;		_updateServoPosition
  6819 ;; This function is called by:
  6820 ;;		_sort
  6821 ;; This function uses a non-reentrant model
  6822 ;;
  6823                           
  6824                           	psect	text14
  6825  00468C                     __ptext14:
  6826                           	opt stack 0
  6827  00468C                     _Distribution:
  6828                           	opt stack 21
  6829                           
  6830                           ;sort.c: 401: if(f_can_coming_to_distribution){
  6831                           
  6832                           ; BSR set to: 0
  6833                           ;incstack = 0
  6834  00468C  0101               	movlb	1	; () banked
  6835  00468E  5135               	movf	_f_can_coming_to_distribution& (0+255),w,b
  6836  004690  0101               	movlb	1	; () banked
  6837  004692  1136               	iorwf	(_f_can_coming_to_distribution+1)& (0+255),w,b
  6838  004694  B4D8               	btfsc	status,2,c
  6839  004696  0012               	return	
  6840                           
  6841                           ; BSR set to: 1
  6842                           ;sort.c: 402: f_can_distributed = 0;
  6843  004698  0E00               	movlw	0
  6844  00469A  0101               	movlb	1	; () banked
  6845  00469C  6F38               	movwf	(_f_can_distributed+1)& (0+255),b
  6846  00469E  0E00               	movlw	0
  6847  0046A0  6F37               	movwf	_f_can_distributed& (0+255),b
  6848                           
  6849                           ;sort.c: 409: switch(cur_can){
  6850  0046A2  D034               	goto	l8262
  6851  0046A4                     l8252:
  6852                           
  6853                           ;sort.c: 411: updateServoPosition(500, 1);
  6854  0046A4  0E01               	movlw	1
  6855  0046A6  0100               	movlb	0	; () banked
  6856  0046A8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  6857  0046AA  0EF4               	movlw	244
  6858  0046AC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  6859  0046AE  0E00               	movlw	0
  6860  0046B0  0100               	movlb	0	; () banked
  6861  0046B2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  6862  0046B4  0E01               	movlw	1
  6863  0046B6  6F82               	movwf	updateServoPosition@timer& (0+255),b
  6864  0046B8  ECCA  F027         	call	_updateServoPosition	;wreg free
  6865                           
  6866                           ;sort.c: 412: break;
  6867  0046BC  D03E               	goto	l8264
  6868  0046BE                     l8254:
  6869                           
  6870                           ;sort.c: 414: updateServoPosition(850, 1);
  6871  0046BE  0E03               	movlw	3
  6872  0046C0  0100               	movlb	0	; () banked
  6873  0046C2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  6874  0046C4  0E52               	movlw	82
  6875  0046C6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  6876  0046C8  0E00               	movlw	0
  6877  0046CA  0100               	movlb	0	; () banked
  6878  0046CC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  6879  0046CE  0E01               	movlw	1
  6880  0046D0  6F82               	movwf	updateServoPosition@timer& (0+255),b
  6881  0046D2  ECCA  F027         	call	_updateServoPosition	;wreg free
  6882                           
  6883                           ;sort.c: 415: break;
  6884  0046D6  D031               	goto	l8264
  6885  0046D8                     l8256:
  6886                           
  6887                           ;sort.c: 417: updateServoPosition(1670, 1);
  6888  0046D8  0E06               	movlw	6
  6889  0046DA  0100               	movlb	0	; () banked
  6890  0046DC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  6891  0046DE  0E86               	movlw	134
  6892  0046E0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  6893  0046E2  0E00               	movlw	0
  6894  0046E4  0100               	movlb	0	; () banked
  6895  0046E6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  6896  0046E8  0E01               	movlw	1
  6897  0046EA  6F82               	movwf	updateServoPosition@timer& (0+255),b
  6898  0046EC  ECCA  F027         	call	_updateServoPosition	;wreg free
  6899                           
  6900                           ;sort.c: 418: break;
  6901  0046F0  D024               	goto	l8264
  6902  0046F2                     l8258:
  6903                           
  6904                           ;sort.c: 420: updateServoPosition(2400, 1);
  6905  0046F2  0E09               	movlw	9
  6906  0046F4  0100               	movlb	0	; () banked
  6907  0046F6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  6908  0046F8  0E60               	movlw	96
  6909  0046FA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  6910  0046FC  0E00               	movlw	0
  6911  0046FE  0100               	movlb	0	; () banked
  6912  004700  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  6913  004702  0E01               	movlw	1
  6914  004704  6F82               	movwf	updateServoPosition@timer& (0+255),b
  6915  004706  ECCA  F027         	call	_updateServoPosition	;wreg free
  6916                           
  6917                           ;sort.c: 424: }
  6918                           
  6919                           ;sort.c: 423: break;
  6920                           
  6921                           ;sort.c: 422: default:
  6922                           
  6923                           ;sort.c: 421: break;
  6924  00470A  D017               	goto	l8264
  6925  00470C                     l8262:
  6926  00470C  C12D  F088         	movff	_cur_can,??_Distribution
  6927  004710  C12E  F089         	movff	_cur_can+1,??_Distribution+1
  6928                           
  6929                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6930                           ; Switch size 1, requested type "space"
  6931                           ; Number of cases is 1, Range of values is 0 to 0
  6932                           ; switch strategies available:
  6933                           ; Name         Instructions Cycles
  6934                           ; simple_byte            4     3 (average)
  6935                           ;	Chosen strategy is simple_byte
  6936  004714  0100               	movlb	0	; () banked
  6937  004716  5189               	movf	(??_Distribution+1)& (0+255),w,b
  6938  004718  0A00               	xorlw	0	; case 0
  6939  00471A  A4D8               	btfss	status,2,c
  6940  00471C  D00E               	goto	l8264
  6941                           
  6942                           ; BSR set to: 0
  6943                           ; Switch size 1, requested type "space"
  6944                           ; Number of cases is 4, Range of values is 0 to 3
  6945                           ; switch strategies available:
  6946                           ; Name         Instructions Cycles
  6947                           ; simple_byte           13     7 (average)
  6948                           ;	Chosen strategy is simple_byte
  6949  00471E  0100               	movlb	0	; () banked
  6950  004720  5188               	movf	??_Distribution& (0+255),w,b
  6951  004722  0A00               	xorlw	0	; case 0
  6952  004724  B4D8               	btfsc	status,2,c
  6953  004726  D7BE               	goto	l8252
  6954  004728  0A01               	xorlw	1	; case 1
  6955  00472A  B4D8               	btfsc	status,2,c
  6956  00472C  D7C8               	goto	l8254
  6957  00472E  0A03               	xorlw	3	; case 2
  6958  004730  B4D8               	btfsc	status,2,c
  6959  004732  D7D2               	goto	l8256
  6960  004734  0A01               	xorlw	1	; case 3
  6961  004736  B4D8               	btfsc	status,2,c
  6962  004738  D7DC               	goto	l8258
  6963  00473A                     l8264:
  6964                           
  6965                           ;sort.c: 425: updateServoPosition(1050, 3);
  6966  00473A  0E04               	movlw	4
  6967  00473C  0100               	movlb	0	; () banked
  6968  00473E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  6969  004740  0E1A               	movlw	26
  6970  004742  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  6971  004744  0E00               	movlw	0
  6972  004746  0100               	movlb	0	; () banked
  6973  004748  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  6974  00474A  0E03               	movlw	3
  6975  00474C  6F82               	movwf	updateServoPosition@timer& (0+255),b
  6976  00474E  ECCA  F027         	call	_updateServoPosition	;wreg free
  6977                           
  6978                           ;sort.c: 426: servo_timer_target = 750;
  6979  004752  0E02               	movlw	2
  6980  004754  6E70               	movwf	_servo_timer_target+1,c	;volatile
  6981  004756  0EEE               	movlw	238
  6982  004758  6E6F               	movwf	_servo_timer_target,c	;volatile
  6983                           
  6984                           ;sort.c: 427: f_panning_to_bin = 1;
  6985  00475A  0E00               	movlw	0
  6986  00475C  6E6A               	movwf	_f_panning_to_bin+1,c	;volatile
  6987  00475E  0E01               	movlw	1
  6988  004760  6E69               	movwf	_f_panning_to_bin,c	;volatile
  6989                           
  6990                           ;sort.c: 428: f_can_coming_to_distribution = 0;
  6991  004762  0E00               	movlw	0
  6992  004764  0101               	movlb	1	; () banked
  6993  004766  6F36               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  6994  004768  0E00               	movlw	0
  6995  00476A  6F35               	movwf	_f_can_coming_to_distribution& (0+255),b
  6996  00476C  0012               	return	
  6997  00476E                     __end_of_Distribution:
  6998                           	opt stack 0
  6999                           tblptru	equ	0xFF8
  7000                           tblptrh	equ	0xFF7
  7001                           tblptrl	equ	0xFF6
  7002                           tablat	equ	0xFF5
  7003                           prodh	equ	0xFF4
  7004                           prodl	equ	0xFF3
  7005                           postinc0	equ	0xFEE
  7006                           wreg	equ	0xFE8
  7007                           postdec1	equ	0xFE5
  7008                           fsr1l	equ	0xFE1
  7009                           indf2	equ	0xFDF
  7010                           postinc2	equ	0xFDE
  7011                           postdec2	equ	0xFDD
  7012                           fsr2h	equ	0xFDA
  7013                           fsr2l	equ	0xFD9
  7014                           status	equ	0xFD8
  7015                           
  7016 ;; *************** function _machineConfig *****************
  7017 ;; Defined at:
  7018 ;;		line 15 in file "MachineConfig.c"
  7019 ;; Parameters:    Size  Location     Type
  7020 ;;		None
  7021 ;; Auto vars:     Size  Location     Type
  7022 ;;		None
  7023 ;; Return value:  Size  Location     Type
  7024 ;;                  1    wreg      void 
  7025 ;; Registers used:
  7026 ;;		wreg, status,2
  7027 ;; Tracked objects:
  7028 ;;		On entry : 0/0
  7029 ;;		On exit  : 0/0
  7030 ;;		Unchanged: 0/0
  7031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7032 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7033 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7034 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7035 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7036 ;;Total ram usage:        0 bytes
  7037 ;; Hardware stack levels used:    1
  7038 ;; Hardware stack levels required when called:    7
  7039 ;; This function calls:
  7040 ;;		Nothing
  7041 ;; This function is called by:
  7042 ;;		_main
  7043 ;; This function uses a non-reentrant model
  7044 ;;
  7045                           
  7046                           	psect	text15
  7047  00532A                     __ptext15:
  7048                           	opt stack 0
  7049  00532A                     _machineConfig:
  7050                           	opt stack 23
  7051                           
  7052                           ;MachineConfig.c: 17: OSCCON = 0xF0;
  7053                           
  7054                           ; BSR set to: 1
  7055                           ;incstack = 0
  7056  00532A  0EF0               	movlw	240
  7057  00532C  6ED3               	movwf	4051,c	;volatile
  7058                           
  7059                           ;MachineConfig.c: 18: OSCTUNEbits.PLLEN = 1;
  7060  00532E  8C9B               	bsf	3995,6,c	;volatile
  7061                           
  7062                           ;MachineConfig.c: 22: TRISA = 0b00000111;
  7063  005330  0E07               	movlw	7
  7064  005332  6E92               	movwf	3986,c	;volatile
  7065                           
  7066                           ;MachineConfig.c: 24: TRISB = 0b11110010;
  7067  005334  0EF2               	movlw	242
  7068  005336  6E93               	movwf	3987,c	;volatile
  7069                           
  7070                           ;MachineConfig.c: 27: TRISC = 0x00;
  7071  005338  0E00               	movlw	0
  7072  00533A  6E94               	movwf	3988,c	;volatile
  7073                           
  7074                           ;MachineConfig.c: 31: TRISD = 0x00;
  7075  00533C  0E00               	movlw	0
  7076  00533E  6E95               	movwf	3989,c	;volatile
  7077                           
  7078                           ;MachineConfig.c: 34: TRISE = 0x00;
  7079  005340  0E00               	movlw	0
  7080  005342  6E96               	movwf	3990,c	;volatile
  7081                           
  7082                           ;MachineConfig.c: 37: LATA = 0x00;
  7083  005344  0E00               	movlw	0
  7084  005346  6E89               	movwf	3977,c	;volatile
  7085                           
  7086                           ;MachineConfig.c: 38: LATB = 0x00;
  7087  005348  0E00               	movlw	0
  7088  00534A  6E8A               	movwf	3978,c	;volatile
  7089                           
  7090                           ;MachineConfig.c: 39: LATC = 0x00;
  7091  00534C  0E00               	movlw	0
  7092  00534E  6E8B               	movwf	3979,c	;volatile
  7093                           
  7094                           ;MachineConfig.c: 40: LATD = 0x00;
  7095  005350  0E00               	movlw	0
  7096  005352  6E8C               	movwf	3980,c	;volatile
  7097                           
  7098                           ;MachineConfig.c: 41: LATE = 0x00;
  7099  005354  0E00               	movlw	0
  7100  005356  6E8D               	movwf	3981,c	;volatile
  7101                           
  7102                           ;MachineConfig.c: 43: nRBPU = 0;
  7103  005358  9EF1               	bcf	intcon2,7,c	;volatile
  7104                           
  7105                           ;MachineConfig.c: 46: ADCON0 = 0x00;
  7106  00535A  0E00               	movlw	0
  7107  00535C  6EC2               	movwf	4034,c	;volatile
  7108                           
  7109                           ;MachineConfig.c: 47: ADCON1 = 0b00001100;
  7110  00535E  0E0C               	movlw	12
  7111  005360  6EC1               	movwf	4033,c	;volatile
  7112                           
  7113                           ;MachineConfig.c: 51: CVRCON = 0x00;
  7114  005362  0E00               	movlw	0
  7115  005364  6EB5               	movwf	4021,c	;volatile
  7116                           
  7117                           ;MachineConfig.c: 52: CMCONbits.CIS = 0;
  7118  005366  96B4               	bcf	4020,3,c	;volatile
  7119                           
  7120                           ;MachineConfig.c: 53: ADCON2 = 0b10110001;
  7121  005368  0EB1               	movlw	177
  7122  00536A  6EC0               	movwf	4032,c	;volatile
  7123                           
  7124                           ;MachineConfig.c: 56: INT1IE = 1;
  7125  00536C  86F0               	bsf	intcon3,3,c	;volatile
  7126                           
  7127                           ;MachineConfig.c: 58: TMR0IE = 1;
  7128  00536E  8AF2               	bsf	intcon,5,c	;volatile
  7129                           
  7130                           ;MachineConfig.c: 59: TMR1IE = 1;
  7131  005370  809D               	bsf	3997,0,c	;volatile
  7132                           
  7133                           ;MachineConfig.c: 60: TMR2IE = 1;
  7134  005372  829D               	bsf	3997,1,c	;volatile
  7135                           
  7136                           ;MachineConfig.c: 61: TMR3IE = 1;
  7137  005374  82A0               	bsf	4000,1,c	;volatile
  7138                           
  7139                           ;MachineConfig.c: 63: T1CON = 0b10110000;
  7140  005376  0EB0               	movlw	176
  7141  005378  6ECD               	movwf	4045,c	;volatile
  7142                           
  7143                           ;MachineConfig.c: 64: T2CON = 0b01111011;
  7144  00537A  0E7B               	movlw	123
  7145  00537C  6ECA               	movwf	4042,c	;volatile
  7146                           
  7147                           ;MachineConfig.c: 65: PR2 = 0x22;
  7148  00537E  0E22               	movlw	34
  7149  005380  6ECB               	movwf	4043,c	;volatile
  7150                           
  7151                           ;MachineConfig.c: 66: T3CON = 0b10110000;
  7152  005382  0EB0               	movlw	176
  7153  005384  6EB1               	movwf	4017,c	;volatile
  7154                           
  7155                           ;MachineConfig.c: 67: PEIE = 1;
  7156  005386  8CF2               	bsf	intcon,6,c	;volatile
  7157                           
  7158                           ;MachineConfig.c: 68: ADIE = 0;
  7159  005388  9C9D               	bcf	3997,6,c	;volatile
  7160                           
  7161                           ;MachineConfig.c: 69: (INTCONbits.GIE = 0);
  7162  00538A  9EF2               	bcf	intcon,7,c	;volatile
  7163  00538C  0012               	return		;funcret
  7164  00538E                     __end_of_machineConfig:
  7165                           	opt stack 0
  7166                           tblptru	equ	0xFF8
  7167                           tblptrh	equ	0xFF7
  7168                           tblptrl	equ	0xFF6
  7169                           tablat	equ	0xFF5
  7170                           prodh	equ	0xFF4
  7171                           prodl	equ	0xFF3
  7172                           intcon	equ	0xFF2
  7173                           intcon2	equ	0xFF1
  7174                           intcon3	equ	0xFF0
  7175                           postinc0	equ	0xFEE
  7176                           wreg	equ	0xFE8
  7177                           postdec1	equ	0xFE5
  7178                           fsr1l	equ	0xFE1
  7179                           indf2	equ	0xFDF
  7180                           postinc2	equ	0xFDE
  7181                           postdec2	equ	0xFDD
  7182                           fsr2h	equ	0xFDA
  7183                           fsr2l	equ	0xFD9
  7184                           status	equ	0xFD8
  7185                           
  7186 ;; *************** function _logRun *****************
  7187 ;; Defined at:
  7188 ;;		line 88 in file "EEPROM.c"
  7189 ;; Parameters:    Size  Location     Type
  7190 ;;		None
  7191 ;; Auto vars:     Size  Location     Type
  7192 ;;  byte_i          1   53[BANK0 ] unsigned char 
  7193 ;;  i               2   55[BANK0 ] int 
  7194 ;;  num             1   49[BANK0 ] unsigned char 
  7195 ;;  addr            2   57[BANK0 ] unsigned short 
  7196 ;;  byte11          1   54[BANK0 ] unsigned char 
  7197 ;;  byte3           1   52[BANK0 ] unsigned char 
  7198 ;;  byte2           1   51[BANK0 ] unsigned char 
  7199 ;;  byte1           1   50[BANK0 ] unsigned char 
  7200 ;; Return value:  Size  Location     Type
  7201 ;;                  1    wreg      void 
  7202 ;; Registers used:
  7203 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7204 ;; Tracked objects:
  7205 ;;		On entry : 0/0
  7206 ;;		On exit  : 0/0
  7207 ;;		Unchanged: 0/0
  7208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7209 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7210 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7211 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7212 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7213 ;;Total ram usage:       10 bytes
  7214 ;; Hardware stack levels used:    1
  7215 ;; Hardware stack levels required when called:   11
  7216 ;; This function calls:
  7217 ;;		_EEPROM_read
  7218 ;;		_EEPROM_write
  7219 ;; This function is called by:
  7220 ;;		_main
  7221 ;; This function uses a non-reentrant model
  7222 ;;
  7223                           
  7224                           	psect	text16
  7225  00402A                     __ptext16:
  7226                           	opt stack 0
  7227  00402A                     _logRun:
  7228                           	opt stack 19
  7229                           
  7230                           ;EEPROM.c: 101: sel = EEPROM_read(0);
  7231                           
  7232                           ;incstack = 0
  7233  00402A  0E00               	movlw	0
  7234  00402C  0100               	movlb	0	; () banked
  7235  00402E  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  7236  004030  0E00               	movlw	0
  7237  004032  6F80               	movwf	EEPROM_read@address& (0+255),b
  7238  004034  EC74  F02E         	call	_EEPROM_read	;wreg free
  7239  004038  0100               	movlb	0	; () banked
  7240  00403A  6FFD               	movwf	_sel& (0+255),b
  7241                           
  7242                           ; BSR set to: 0
  7243                           ;EEPROM.c: 102: unsigned short addr = 1 + 11 * sel;
  7244  00403C  0100               	movlb	0	; () banked
  7245  00403E  51FD               	movf	_sel& (0+255),w,b
  7246  004040  0D0B               	mullw	11
  7247  004042  0E01               	movlw	1
  7248  004044  24F3               	addwf	prodl,w,c
  7249  004046  0100               	movlb	0	; () banked
  7250  004048  6FB9               	movwf	logRun@addr& (0+255),b
  7251  00404A  0E00               	movlw	0
  7252  00404C  20F4               	addwfc	prodh,w,c
  7253  00404E  0100               	movlb	0	; () banked
  7254  004050  6FBA               	movwf	(logRun@addr+1)& (0+255),b
  7255                           
  7256                           ; BSR set to: 0
  7257                           ;EEPROM.c: 105: if (sel < 3){
  7258  004052  0E03               	movlw	3
  7259  004054  0100               	movlb	0	; () banked
  7260  004056  61FD               	cpfslt	_sel& (0+255),b
  7261  004058  D00E               	goto	l9942
  7262                           
  7263                           ; BSR set to: 0
  7264                           ;EEPROM.c: 106: unsigned char num = sel+1;
  7265  00405A  0100               	movlb	0	; () banked
  7266  00405C  29FD               	incf	_sel& (0+255),w,b
  7267  00405E  0100               	movlb	0	; () banked
  7268  004060  6FB1               	movwf	logRun@num& (0+255),b
  7269                           
  7270                           ; BSR set to: 0
  7271                           ;EEPROM.c: 107: EEPROM_write(0, num);
  7272  004062  0E00               	movlw	0
  7273  004064  0100               	movlb	0	; () banked
  7274  004066  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  7275  004068  0E00               	movlw	0
  7276  00406A  6FAB               	movwf	EEPROM_write@address& (0+255),b
  7277  00406C  C0B1  F0AD         	movff	logRun@num,EEPROM_write@data
  7278  004070  ECD2  F022         	call	_EEPROM_write	;wreg free
  7279                           
  7280                           ;EEPROM.c: 108: }
  7281  004074  D00A               	goto	l9944
  7282  004076                     l9942:
  7283                           
  7284                           ;EEPROM.c: 109: else{
  7285                           ;EEPROM.c: 110: EEPROM_write(0, 0);
  7286  004076  0E00               	movlw	0
  7287  004078  0100               	movlb	0	; () banked
  7288  00407A  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  7289  00407C  0E00               	movlw	0
  7290  00407E  6FAB               	movwf	EEPROM_write@address& (0+255),b
  7291  004080  0E00               	movlw	0
  7292  004082  0100               	movlb	0	; () banked
  7293  004084  6FAD               	movwf	EEPROM_write@data& (0+255),b
  7294  004086  ECD2  F022         	call	_EEPROM_write	;wreg free
  7295  00408A                     l9944:
  7296                           
  7297                           ;EEPROM.c: 111: }
  7298                           ;EEPROM.c: 114: unsigned char byte1 = 0b10000000 | count_total;
  7299  00408A  0100               	movlb	0	; () banked
  7300  00408C  51FE               	movf	_count_total& (0+255),w,b
  7301  00408E  0980               	iorlw	128
  7302  004090  0100               	movlb	0	; () banked
  7303  004092  6FB2               	movwf	logRun@byte1& (0+255),b
  7304                           
  7305                           ; BSR set to: 0
  7306                           ;EEPROM.c: 115: EEPROM_write(addr, byte1);
  7307  004094  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  7308  004098  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  7309  00409C  C0B2  F0AD         	movff	logRun@byte1,EEPROM_write@data
  7310  0040A0  ECD2  F022         	call	_EEPROM_write	;wreg free
  7311                           
  7312                           ;EEPROM.c: 116: addr++;
  7313  0040A4  0100               	movlb	0	; () banked
  7314  0040A6  4BB9               	infsnz	logRun@addr& (0+255),f,b
  7315  0040A8  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  7316                           
  7317                           ; BSR set to: 0
  7318                           ;EEPROM.c: 119: unsigned char byte2 = (count_pop_no_tab << 4) | count_pop_w_tab;
  7319  0040AA  0101               	movlb	1	; () banked
  7320  0040AC  3929               	swapf	_count_pop_no_tab& (0+255),w,b
  7321  0040AE  0BF0               	andlw	240
  7322  0040B0  0101               	movlb	1	; () banked
  7323  0040B2  112B               	iorwf	_count_pop_w_tab& (0+255),w,b
  7324  0040B4  0100               	movlb	0	; () banked
  7325  0040B6  6FB3               	movwf	logRun@byte2& (0+255),b
  7326                           
  7327                           ; BSR set to: 0
  7328                           ;EEPROM.c: 120: EEPROM_write(addr, byte2);
  7329  0040B8  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  7330  0040BC  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  7331  0040C0  C0B3  F0AD         	movff	logRun@byte2,EEPROM_write@data
  7332  0040C4  ECD2  F022         	call	_EEPROM_write	;wreg free
  7333                           
  7334                           ;EEPROM.c: 121: addr++;
  7335  0040C8  0100               	movlb	0	; () banked
  7336  0040CA  4BB9               	infsnz	logRun@addr& (0+255),f,b
  7337  0040CC  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  7338                           
  7339                           ; BSR set to: 0
  7340                           ;EEPROM.c: 122: unsigned char byte3 = (count_can_w_lab << 4) | count_can_no_lab;
  7341  0040CE  0101               	movlb	1	; () banked
  7342  0040D0  3927               	swapf	_count_can_w_lab& (0+255),w,b
  7343  0040D2  0BF0               	andlw	240
  7344  0040D4  0101               	movlb	1	; () banked
  7345  0040D6  1125               	iorwf	_count_can_no_lab& (0+255),w,b
  7346  0040D8  0100               	movlb	0	; () banked
  7347  0040DA  6FB4               	movwf	logRun@byte3& (0+255),b
  7348                           
  7349                           ; BSR set to: 0
  7350                           ;EEPROM.c: 123: EEPROM_write(addr, byte3);
  7351  0040DC  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  7352  0040E0  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  7353  0040E4  C0B4  F0AD         	movff	logRun@byte3,EEPROM_write@data
  7354  0040E8  ECD2  F022         	call	_EEPROM_write	;wreg free
  7355                           
  7356                           ;EEPROM.c: 124: addr++;
  7357  0040EC  0100               	movlb	0	; () banked
  7358  0040EE  4BB9               	infsnz	logRun@addr& (0+255),f,b
  7359  0040F0  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  7360                           
  7361                           ; BSR set to: 0
  7362                           ;EEPROM.c: 127: for(int i = 0; i < 7; i++){
  7363  0040F2  0E00               	movlw	0
  7364  0040F4  0100               	movlb	0	; () banked
  7365  0040F6  6FB8               	movwf	(logRun@i+1)& (0+255),b
  7366  0040F8  0E00               	movlw	0
  7367  0040FA  6FB7               	movwf	logRun@i& (0+255),b
  7368                           
  7369                           ; BSR set to: 0
  7370  0040FC  0100               	movlb	0	; () banked
  7371  0040FE  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  7372  004100  D008               	goto	l9968
  7373  004102  0100               	movlb	0	; () banked
  7374  004104  51B8               	movf	(logRun@i+1)& (0+255),w,b
  7375  004106  E128               	bnz	l1164
  7376  004108  0E07               	movlw	7
  7377  00410A  0100               	movlb	0	; () banked
  7378  00410C  5DB7               	subwf	logRun@i& (0+255),w,b
  7379  00410E  B0D8               	btfsc	status,0,c
  7380  004110  D023               	goto	l1164
  7381  004112                     l9968:
  7382                           
  7383                           ; BSR set to: 0
  7384                           ;EEPROM.c: 128: unsigned char byte_i = startTime[i];
  7385  004112  90D8               	bcf	status,0,c
  7386  004114  0100               	movlb	0	; () banked
  7387  004116  35B7               	rlcf	logRun@i& (0+255),w,b
  7388  004118  6ED9               	movwf	fsr2l,c
  7389  00411A  0100               	movlb	0	; () banked
  7390  00411C  35B8               	rlcf	(logRun@i+1)& (0+255),w,b
  7391  00411E  6EDA               	movwf	fsr2h,c
  7392  004120  0E0E               	movlw	low _startTime
  7393  004122  26D9               	addwf	fsr2l,f,c
  7394  004124  0E01               	movlw	high _startTime
  7395  004126  22DA               	addwfc	fsr2h,f,c
  7396  004128  50DF               	movf	indf2,w,c
  7397  00412A  0100               	movlb	0	; () banked
  7398  00412C  6FB5               	movwf	logRun@byte_i& (0+255),b
  7399                           
  7400                           ; BSR set to: 0
  7401                           ;EEPROM.c: 129: EEPROM_write(addr, byte_i);
  7402  00412E  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  7403  004132  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  7404  004136  C0B5  F0AD         	movff	logRun@byte_i,EEPROM_write@data
  7405  00413A  ECD2  F022         	call	_EEPROM_write	;wreg free
  7406                           
  7407                           ;EEPROM.c: 130: addr++;
  7408  00413E  0100               	movlb	0	; () banked
  7409  004140  4BB9               	infsnz	logRun@addr& (0+255),f,b
  7410  004142  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  7411                           
  7412                           ; BSR set to: 0
  7413  004144  0100               	movlb	0	; () banked
  7414  004146  4BB7               	infsnz	logRun@i& (0+255),f,b
  7415  004148  2BB8               	incf	(logRun@i+1)& (0+255),f,b
  7416                           
  7417                           ; BSR set to: 0
  7418  00414A  0100               	movlb	0	; () banked
  7419  00414C  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  7420  00414E  D7E1               	goto	l9968
  7421  004150  0100               	movlb	0	; () banked
  7422  004152  51B8               	movf	(logRun@i+1)& (0+255),w,b
  7423  004154  E101               	bnz	u9720
  7424  004156  D7D8               	goto	L9
  7425  004158                     u9720:
  7426  004158                     l1164:
  7427                           
  7428                           ; BSR set to: 0
  7429                           ;EEPROM.c: 131: }
  7430                           ;EEPROM.c: 134: unsigned char byte11 = total_time;
  7431  004158  C0FA  F0B6         	movff	_total_time,logRun@byte11
  7432                           
  7433                           ; BSR set to: 0
  7434                           ;EEPROM.c: 135: EEPROM_write(addr, byte11);
  7435  00415C  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  7436  004160  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  7437  004164  C0B6  F0AD         	movff	logRun@byte11,EEPROM_write@data
  7438  004168  ECD2  F022         	call	_EEPROM_write	;wreg free
  7439  00416C  0012               	return		;funcret
  7440  00416E                     __end_of_logRun:
  7441                           	opt stack 0
  7442                           tblptru	equ	0xFF8
  7443                           tblptrh	equ	0xFF7
  7444                           tblptrl	equ	0xFF6
  7445                           tablat	equ	0xFF5
  7446                           prodh	equ	0xFF4
  7447                           prodl	equ	0xFF3
  7448                           intcon	equ	0xFF2
  7449                           intcon2	equ	0xFF1
  7450                           intcon3	equ	0xFF0
  7451                           postinc0	equ	0xFEE
  7452                           wreg	equ	0xFE8
  7453                           postdec1	equ	0xFE5
  7454                           fsr1l	equ	0xFE1
  7455                           indf2	equ	0xFDF
  7456                           postinc2	equ	0xFDE
  7457                           postdec2	equ	0xFDD
  7458                           fsr2h	equ	0xFDA
  7459                           fsr2l	equ	0xFD9
  7460                           status	equ	0xFD8
  7461                           
  7462 ;; *************** function _initUI *****************
  7463 ;; Defined at:
  7464 ;;		line 62 in file "UI.c"
  7465 ;; Parameters:    Size  Location     Type
  7466 ;;		None
  7467 ;; Auto vars:     Size  Location     Type
  7468 ;;		None
  7469 ;; Return value:  Size  Location     Type
  7470 ;;                  1    wreg      void 
  7471 ;; Registers used:
  7472 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7473 ;; Tracked objects:
  7474 ;;		On entry : 0/0
  7475 ;;		On exit  : 0/0
  7476 ;;		Unchanged: 0/0
  7477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7478 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7479 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7480 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7481 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7482 ;;Total ram usage:        0 bytes
  7483 ;; Hardware stack levels used:    1
  7484 ;; Hardware stack levels required when called:   12
  7485 ;; This function calls:
  7486 ;;		_change_state_to_menu_start
  7487 ;;		_loadRTC
  7488 ;; This function is called by:
  7489 ;;		_main
  7490 ;; This function uses a non-reentrant model
  7491 ;;
  7492                           
  7493                           	psect	text17
  7494  0058D0                     __ptext17:
  7495                           	opt stack 0
  7496  0058D0                     _initUI:
  7497                           	opt stack 18
  7498                           
  7499                           ;UI.c: 63: (INTCONbits.GIE = 1);
  7500                           
  7501                           ;incstack = 0
  7502  0058D0  8EF2               	bsf	intcon,7,c	;volatile
  7503                           
  7504                           ;UI.c: 64: machine_state = UI_state;
  7505  0058D2  0E00               	movlw	0
  7506  0058D4  0100               	movlb	0	; () banked
  7507  0058D6  6FFC               	movwf	_machine_state& (0+255),b
  7508                           
  7509                           ;UI.c: 65: logstate = 0;
  7510  0058D8  0E00               	movlw	0
  7511  0058DA  0100               	movlb	0	; () banked
  7512  0058DC  6FF9               	movwf	(_logstate+1)& (0+255),b
  7513  0058DE  0E00               	movlw	0
  7514  0058E0  6FF8               	movwf	_logstate& (0+255),b
  7515                           
  7516                           ; BSR set to: 0
  7517                           ;UI.c: 67: if(RTCflag){
  7518  0058E2  0100               	movlb	0	; () banked
  7519  0058E4  51E4               	movf	_RTCflag& (0+255),w,b
  7520  0058E6  0100               	movlb	0	; () banked
  7521  0058E8  11E5               	iorwf	(_RTCflag+1)& (0+255),w,b
  7522  0058EA  A4D8               	btfss	status,2,c
  7523                           
  7524                           ; BSR set to: 0
  7525                           ;UI.c: 68: loadRTC();
  7526  0058EC  ECFF  F026         	call	_loadRTC	;wreg free
  7527                           
  7528                           ;UI.c: 69: }
  7529                           ;UI.c: 71: change_state_to_menu_start();
  7530  0058F0  EC86  F02D         	call	_change_state_to_menu_start	;wreg free
  7531                           
  7532                           ;UI.c: 72: firstboot = 1;
  7533  0058F4  0E00               	movlw	0
  7534  0058F6  0101               	movlb	1	; () banked
  7535  0058F8  6F3E               	movwf	(_firstboot+1)& (0+255),b
  7536  0058FA  0E01               	movlw	1
  7537  0058FC  6F3D               	movwf	_firstboot& (0+255),b
  7538                           
  7539                           ; BSR set to: 1
  7540  0058FE  0012               	return		;funcret
  7541  005900                     __end_of_initUI:
  7542                           	opt stack 0
  7543                           tblptru	equ	0xFF8
  7544                           tblptrh	equ	0xFF7
  7545                           tblptrl	equ	0xFF6
  7546                           tablat	equ	0xFF5
  7547                           prodh	equ	0xFF4
  7548                           prodl	equ	0xFF3
  7549                           intcon	equ	0xFF2
  7550                           intcon2	equ	0xFF1
  7551                           intcon3	equ	0xFF0
  7552                           postinc0	equ	0xFEE
  7553                           wreg	equ	0xFE8
  7554                           postdec1	equ	0xFE5
  7555                           fsr1l	equ	0xFE1
  7556                           indf2	equ	0xFDF
  7557                           postinc2	equ	0xFDE
  7558                           postdec2	equ	0xFDD
  7559                           fsr2h	equ	0xFDA
  7560                           fsr2l	equ	0xFD9
  7561                           status	equ	0xFD8
  7562                           
  7563 ;; *************** function _loadRTC *****************
  7564 ;; Defined at:
  7565 ;;		line 28 in file "RTC.c"
  7566 ;; Parameters:    Size  Location     Type
  7567 ;;		None
  7568 ;; Auto vars:     Size  Location     Type
  7569 ;;  i               2   22[BANK0 ] int 
  7570 ;; Return value:  Size  Location     Type
  7571 ;;                  1    wreg      void 
  7572 ;; Registers used:
  7573 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7574 ;; Tracked objects:
  7575 ;;		On entry : 0/0
  7576 ;;		On exit  : 0/0
  7577 ;;		Unchanged: 0/0
  7578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7579 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7580 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7581 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7582 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7583 ;;Total ram usage:        3 bytes
  7584 ;; Hardware stack levels used:    1
  7585 ;; Hardware stack levels required when called:    9
  7586 ;; This function calls:
  7587 ;;		_I2C_Master_Init
  7588 ;;		_I2C_Master_Start
  7589 ;;		_I2C_Master_Stop
  7590 ;;		_I2C_Master_Write
  7591 ;; This function is called by:
  7592 ;;		_initUI
  7593 ;; This function uses a non-reentrant model
  7594 ;;
  7595                           
  7596                           	psect	text18
  7597  004DFE                     __ptext18:
  7598                           	opt stack 0
  7599  004DFE                     _loadRTC:
  7600                           	opt stack 20
  7601                           
  7602                           ;RTC.c: 30: I2C_Master_Init(10000);
  7603                           
  7604                           ; BSR set to: 1
  7605                           ;incstack = 0
  7606  004DFE  0E10               	movlw	16
  7607  004E00  0100               	movlb	0	; () banked
  7608  004E02  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  7609  004E04  0E27               	movlw	39
  7610  004E06  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  7611  004E08  0E00               	movlw	0
  7612  004E0A  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  7613  004E0C  0E00               	movlw	0
  7614  004E0E  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  7615  004E10  ECF8  F029         	call	_I2C_Master_Init	;wreg free
  7616                           
  7617                           ;RTC.c: 32: (INTCONbits.GIE = 0);
  7618  004E14  9EF2               	bcf	intcon,7,c	;volatile
  7619                           
  7620                           ;RTC.c: 34: I2C_Master_Start();
  7621  004E16  ECD7  F02E         	call	_I2C_Master_Start	;wreg free
  7622                           
  7623                           ;RTC.c: 35: I2C_Master_Write(0b11010000);
  7624  004E1A  0E00               	movlw	0
  7625  004E1C  0100               	movlb	0	; () banked
  7626  004E1E  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7627  004E20  0ED0               	movlw	208
  7628  004E22  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7629  004E24  ECC5  F02E         	call	_I2C_Master_Write	;wreg free
  7630                           
  7631                           ;RTC.c: 36: I2C_Master_Write(0x00);
  7632  004E28  0E00               	movlw	0
  7633  004E2A  0100               	movlb	0	; () banked
  7634  004E2C  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7635  004E2E  0E00               	movlw	0
  7636  004E30  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7637  004E32  ECC5  F02E         	call	_I2C_Master_Write	;wreg free
  7638                           
  7639                           ;RTC.c: 37: for(int i = 0; i<7; i++){
  7640  004E36  0E00               	movlw	0
  7641  004E38  0100               	movlb	0	; () banked
  7642  004E3A  6F97               	movwf	(loadRTC@i+1)& (0+255),b
  7643  004E3C  0E00               	movlw	0
  7644  004E3E  6F96               	movwf	loadRTC@i& (0+255),b
  7645  004E40                     l7652:
  7646                           
  7647                           ; BSR set to: 0
  7648  004E40  0100               	movlb	0	; () banked
  7649  004E42  BF97               	btfsc	(loadRTC@i+1)& (0+255),7,b
  7650  004E44  D008               	goto	l7656
  7651  004E46  0100               	movlb	0	; () banked
  7652  004E48  5197               	movf	(loadRTC@i+1)& (0+255),w,b
  7653  004E4A  E11B               	bnz	l7662
  7654  004E4C  0E07               	movlw	7
  7655  004E4E  0100               	movlb	0	; () banked
  7656  004E50  5D96               	subwf	loadRTC@i& (0+255),w,b
  7657  004E52  B0D8               	btfsc	status,0,c
  7658  004E54  D016               	goto	l7662
  7659  004E56                     l7656:
  7660                           
  7661                           ; BSR set to: 0
  7662                           ;RTC.c: 38: I2C_Master_Write(time[i]);
  7663  004E56  0E1C               	movlw	low _time
  7664  004E58  0100               	movlb	0	; () banked
  7665  004E5A  2596               	addwf	loadRTC@i& (0+255),w,b
  7666  004E5C  6ED9               	movwf	fsr2l,c
  7667  004E5E  0E01               	movlw	high _time
  7668  004E60  0100               	movlb	0	; () banked
  7669  004E62  2197               	addwfc	(loadRTC@i+1)& (0+255),w,b
  7670  004E64  6EDA               	movwf	fsr2h,c
  7671  004E66  50DF               	movf	indf2,w,c
  7672  004E68  0100               	movlb	0	; () banked
  7673  004E6A  6F95               	movwf	??_loadRTC& (0+255),b
  7674  004E6C  0100               	movlb	0	; () banked
  7675  004E6E  5195               	movf	??_loadRTC& (0+255),w,b
  7676  004E70  0100               	movlb	0	; () banked
  7677  004E72  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7678  004E74  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  7679  004E76  ECC5  F02E         	call	_I2C_Master_Write	;wreg free
  7680  004E7A  0100               	movlb	0	; () banked
  7681  004E7C  4B96               	infsnz	loadRTC@i& (0+255),f,b
  7682  004E7E  2B97               	incf	(loadRTC@i+1)& (0+255),f,b
  7683  004E80  D7DF               	goto	l7652
  7684  004E82                     l7662:
  7685                           
  7686                           ; BSR set to: 0
  7687                           ;RTC.c: 39: }
  7688                           ;RTC.c: 40: I2C_Master_Stop();
  7689  004E82  ECD3  F02E         	call	_I2C_Master_Stop	;wreg free
  7690                           
  7691                           ;RTC.c: 41: (INTCONbits.GIE = 1);
  7692  004E86  8EF2               	bsf	intcon,7,c	;volatile
  7693  004E88  0012               	return		;funcret
  7694  004E8A                     __end_of_loadRTC:
  7695                           	opt stack 0
  7696                           tblptru	equ	0xFF8
  7697                           tblptrh	equ	0xFF7
  7698                           tblptrl	equ	0xFF6
  7699                           tablat	equ	0xFF5
  7700                           prodh	equ	0xFF4
  7701                           prodl	equ	0xFF3
  7702                           intcon	equ	0xFF2
  7703                           intcon2	equ	0xFF1
  7704                           intcon3	equ	0xFF0
  7705                           postinc0	equ	0xFEE
  7706                           wreg	equ	0xFE8
  7707                           postdec1	equ	0xFE5
  7708                           fsr1l	equ	0xFE1
  7709                           indf2	equ	0xFDF
  7710                           postinc2	equ	0xFDE
  7711                           postdec2	equ	0xFDD
  7712                           fsr2h	equ	0xFDA
  7713                           fsr2l	equ	0xFD9
  7714                           status	equ	0xFD8
  7715                           
  7716 ;; *************** function _I2C_Master_Init *****************
  7717 ;; Defined at:
  7718 ;;		line 15 in file "I2C.c"
  7719 ;; Parameters:    Size  Location     Type
  7720 ;;  c               4   13[BANK0 ] const unsigned long 
  7721 ;; Auto vars:     Size  Location     Type
  7722 ;;		None
  7723 ;; Return value:  Size  Location     Type
  7724 ;;                  1    wreg      void 
  7725 ;; Registers used:
  7726 ;;		wreg, status,2, status,0, cstack
  7727 ;; Tracked objects:
  7728 ;;		On entry : 0/0
  7729 ;;		On exit  : 0/0
  7730 ;;		Unchanged: 0/0
  7731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7732 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7733 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7734 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7735 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7736 ;;Total ram usage:        8 bytes
  7737 ;; Hardware stack levels used:    1
  7738 ;; Hardware stack levels required when called:    8
  7739 ;; This function calls:
  7740 ;;		___lldiv
  7741 ;; This function is called by:
  7742 ;;		_main
  7743 ;;		_loadRTC
  7744 ;; This function uses a non-reentrant model
  7745 ;;
  7746                           
  7747                           	psect	text19
  7748  0053F0                     __ptext19:
  7749                           	opt stack 0
  7750  0053F0                     _I2C_Master_Init:
  7751                           	opt stack 20
  7752                           
  7753                           ;I2C.c: 18: SSPSTAT = 0b00000000;
  7754                           
  7755                           ;incstack = 0
  7756  0053F0  0E00               	movlw	0
  7757  0053F2  6EC7               	movwf	4039,c	;volatile
  7758                           
  7759                           ;I2C.c: 19: SSPCON1 = 0b00101000;
  7760  0053F4  0E28               	movlw	40
  7761  0053F6  6EC6               	movwf	4038,c	;volatile
  7762                           
  7763                           ;I2C.c: 20: SSPCON2 = 0b00000000;
  7764  0053F8  0E00               	movlw	0
  7765  0053FA  6EC5               	movwf	4037,c	;volatile
  7766                           
  7767                           ;I2C.c: 21: SSPADD = (32000000/(4*c))-1;
  7768  0053FC  0E00               	movlw	0
  7769  0053FE  0100               	movlb	0	; () banked
  7770  005400  6F80               	movwf	___lldiv@dividend& (0+255),b
  7771  005402  0E48               	movlw	72
  7772  005404  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  7773  005406  0EE8               	movlw	232
  7774  005408  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  7775  00540A  0E01               	movlw	1
  7776  00540C  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  7777  00540E  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  7778  005412  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  7779  005416  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  7780  00541A  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  7781  00541E  0E02               	movlw	2
  7782  005420                     u6145:
  7783  005420  90D8               	bcf	status,0,c
  7784  005422  0100               	movlb	0	; () banked
  7785  005424  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  7786  005426  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  7787  005428  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  7788  00542A  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  7789  00542C  2EE8               	decfsz	wreg,f,c
  7790  00542E  D7F8               	goto	u6145
  7791  005430  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  7792  005434  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  7793  005438  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  7794  00543C  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  7795  005440  ECB3  F025         	call	___lldiv	;wreg free
  7796  005444  0100               	movlb	0	; () banked
  7797  005446  0580               	decf	?___lldiv& (0+255),w,b
  7798  005448  6EC8               	movwf	4040,c	;volatile
  7799                           
  7800                           ; BSR set to: 0
  7801                           ;I2C.c: 22: TRISC3 = 1;
  7802  00544A  8694               	bsf	3988,3,c	;volatile
  7803                           
  7804                           ; BSR set to: 0
  7805                           ;I2C.c: 23: TRISC4 = 1;
  7806  00544C  8894               	bsf	3988,4,c	;volatile
  7807                           
  7808                           ; BSR set to: 0
  7809  00544E  0012               	return		;funcret
  7810  005450                     __end_of_I2C_Master_Init:
  7811                           	opt stack 0
  7812                           tblptru	equ	0xFF8
  7813                           tblptrh	equ	0xFF7
  7814                           tblptrl	equ	0xFF6
  7815                           tablat	equ	0xFF5
  7816                           prodh	equ	0xFF4
  7817                           prodl	equ	0xFF3
  7818                           intcon	equ	0xFF2
  7819                           intcon2	equ	0xFF1
  7820                           intcon3	equ	0xFF0
  7821                           postinc0	equ	0xFEE
  7822                           wreg	equ	0xFE8
  7823                           postdec1	equ	0xFE5
  7824                           fsr1l	equ	0xFE1
  7825                           indf2	equ	0xFDF
  7826                           postinc2	equ	0xFDE
  7827                           postdec2	equ	0xFDD
  7828                           fsr2h	equ	0xFDA
  7829                           fsr2l	equ	0xFD9
  7830                           status	equ	0xFD8
  7831                           
  7832 ;; *************** function ___lldiv *****************
  7833 ;; Defined at:
  7834 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  7835 ;; Parameters:    Size  Location     Type
  7836 ;;  dividend        4    0[BANK0 ] unsigned long 
  7837 ;;  divisor         4    4[BANK0 ] unsigned long 
  7838 ;; Auto vars:     Size  Location     Type
  7839 ;;  quotient        4    8[BANK0 ] unsigned long 
  7840 ;;  counter         1   12[BANK0 ] unsigned char 
  7841 ;; Return value:  Size  Location     Type
  7842 ;;                  4    0[BANK0 ] unsigned long 
  7843 ;; Registers used:
  7844 ;;		wreg, status,2, status,0
  7845 ;; Tracked objects:
  7846 ;;		On entry : 0/0
  7847 ;;		On exit  : 0/0
  7848 ;;		Unchanged: 0/0
  7849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7850 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7851 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7852 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7853 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7854 ;;Total ram usage:       13 bytes
  7855 ;; Hardware stack levels used:    1
  7856 ;; Hardware stack levels required when called:    7
  7857 ;; This function calls:
  7858 ;;		Nothing
  7859 ;; This function is called by:
  7860 ;;		_I2C_Master_Init
  7861 ;; This function uses a non-reentrant model
  7862 ;;
  7863                           
  7864                           	psect	text20
  7865  004B66                     __ptext20:
  7866                           	opt stack 0
  7867  004B66                     ___lldiv:
  7868                           	opt stack 20
  7869                           
  7870                           ; BSR set to: 0
  7871                           ;incstack = 0
  7872  004B66  0E00               	movlw	0
  7873  004B68  0100               	movlb	0	; () banked
  7874  004B6A  6F88               	movwf	___lldiv@quotient& (0+255),b
  7875  004B6C  0E00               	movlw	0
  7876  004B6E  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  7877  004B70  0E00               	movlw	0
  7878  004B72  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  7879  004B74  0E00               	movlw	0
  7880  004B76  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  7881                           
  7882                           ; BSR set to: 0
  7883  004B78  0100               	movlb	0	; () banked
  7884  004B7A  5184               	movf	___lldiv@divisor& (0+255),w,b
  7885  004B7C  0100               	movlb	0	; () banked
  7886  004B7E  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  7887  004B80  0100               	movlb	0	; () banked
  7888  004B82  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  7889  004B84  0100               	movlb	0	; () banked
  7890  004B86  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  7891  004B88  B4D8               	btfsc	status,2,c
  7892  004B8A  D042               	goto	l1922
  7893                           
  7894                           ; BSR set to: 0
  7895  004B8C  0E01               	movlw	1
  7896  004B8E  0100               	movlb	0	; () banked
  7897  004B90  6F8C               	movwf	___lldiv@counter& (0+255),b
  7898  004B92  D008               	goto	l6976
  7899  004B94                     l6974:
  7900                           
  7901                           ; BSR set to: 0
  7902  004B94  0100               	movlb	0	; () banked
  7903  004B96  90D8               	bcf	status,0,c
  7904  004B98  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  7905  004B9A  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  7906  004B9C  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  7907  004B9E  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  7908  004BA0  0100               	movlb	0	; () banked
  7909  004BA2  2B8C               	incf	___lldiv@counter& (0+255),f,b
  7910  004BA4                     l6976:
  7911                           
  7912                           ; BSR set to: 0
  7913  004BA4  0100               	movlb	0	; () banked
  7914  004BA6  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  7915  004BA8  D7F5               	goto	l6974
  7916  004BAA                     l6978:
  7917                           
  7918                           ; BSR set to: 0
  7919  004BAA  0100               	movlb	0	; () banked
  7920  004BAC  90D8               	bcf	status,0,c
  7921  004BAE  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  7922  004BB0  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  7923  004BB2  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  7924  004BB4  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  7925                           
  7926                           ; BSR set to: 0
  7927  004BB6  0100               	movlb	0	; () banked
  7928  004BB8  5184               	movf	___lldiv@divisor& (0+255),w,b
  7929  004BBA  0100               	movlb	0	; () banked
  7930  004BBC  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  7931  004BBE  0100               	movlb	0	; () banked
  7932  004BC0  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  7933  004BC2  0100               	movlb	0	; () banked
  7934  004BC4  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  7935  004BC6  0100               	movlb	0	; () banked
  7936  004BC8  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  7937  004BCA  0100               	movlb	0	; () banked
  7938  004BCC  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  7939  004BCE  0100               	movlb	0	; () banked
  7940  004BD0  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  7941  004BD2  0100               	movlb	0	; () banked
  7942  004BD4  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  7943  004BD6  A0D8               	btfss	status,0,c
  7944  004BD8  D012               	goto	l6986
  7945                           
  7946                           ; BSR set to: 0
  7947  004BDA  0100               	movlb	0	; () banked
  7948  004BDC  5184               	movf	___lldiv@divisor& (0+255),w,b
  7949  004BDE  0100               	movlb	0	; () banked
  7950  004BE0  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  7951  004BE2  0100               	movlb	0	; () banked
  7952  004BE4  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  7953  004BE6  0100               	movlb	0	; () banked
  7954  004BE8  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  7955  004BEA  0100               	movlb	0	; () banked
  7956  004BEC  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  7957  004BEE  0100               	movlb	0	; () banked
  7958  004BF0  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  7959  004BF2  0100               	movlb	0	; () banked
  7960  004BF4  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  7961  004BF6  0100               	movlb	0	; () banked
  7962  004BF8  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  7963                           
  7964                           ; BSR set to: 0
  7965  004BFA  0100               	movlb	0	; () banked
  7966  004BFC  8188               	bsf	___lldiv@quotient& (0+255),0,b
  7967  004BFE                     l6986:
  7968                           
  7969                           ; BSR set to: 0
  7970  004BFE  0100               	movlb	0	; () banked
  7971  004C00  90D8               	bcf	status,0,c
  7972  004C02  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  7973  004C04  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  7974  004C06  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  7975  004C08  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  7976                           
  7977                           ; BSR set to: 0
  7978  004C0A  0100               	movlb	0	; () banked
  7979  004C0C  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  7980  004C0E  D7CD               	goto	l6978
  7981  004C10                     l1922:
  7982                           
  7983                           ; BSR set to: 0
  7984  004C10  C088  F080         	movff	___lldiv@quotient,?___lldiv
  7985  004C14  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  7986  004C18  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  7987  004C1C  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  7988                           
  7989                           ; BSR set to: 0
  7990  004C20  0012               	return		;funcret
  7991  004C22                     __end_of___lldiv:
  7992                           	opt stack 0
  7993                           tblptru	equ	0xFF8
  7994                           tblptrh	equ	0xFF7
  7995                           tblptrl	equ	0xFF6
  7996                           tablat	equ	0xFF5
  7997                           prodh	equ	0xFF4
  7998                           prodl	equ	0xFF3
  7999                           intcon	equ	0xFF2
  8000                           intcon2	equ	0xFF1
  8001                           intcon3	equ	0xFF0
  8002                           postinc0	equ	0xFEE
  8003                           wreg	equ	0xFE8
  8004                           postdec1	equ	0xFE5
  8005                           fsr1l	equ	0xFE1
  8006                           indf2	equ	0xFDF
  8007                           postinc2	equ	0xFDE
  8008                           postdec2	equ	0xFDD
  8009                           fsr2h	equ	0xFDA
  8010                           fsr2l	equ	0xFD9
  8011                           status	equ	0xFD8
  8012                           
  8013 ;; *************** function _change_state_to_menu_start *****************
  8014 ;; Defined at:
  8015 ;;		line 477 in file "UI.c"
  8016 ;; Parameters:    Size  Location     Type
  8017 ;;		None
  8018 ;; Auto vars:     Size  Location     Type
  8019 ;;		None
  8020 ;; Return value:  Size  Location     Type
  8021 ;;                  1    wreg      void 
  8022 ;; Registers used:
  8023 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8024 ;; Tracked objects:
  8025 ;;		On entry : 0/0
  8026 ;;		On exit  : 0/0
  8027 ;;		Unchanged: 0/0
  8028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8029 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8030 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8031 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8032 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8033 ;;Total ram usage:        0 bytes
  8034 ;; Hardware stack levels used:    1
  8035 ;; Hardware stack levels required when called:   11
  8036 ;; This function calls:
  8037 ;;		_lcdInst
  8038 ;;		_printRTC
  8039 ;;		_printf
  8040 ;; This function is called by:
  8041 ;;		_initUI
  8042 ;; This function uses a non-reentrant model
  8043 ;;
  8044                           
  8045                           	psect	text21
  8046  005B0C                     __ptext21:
  8047                           	opt stack 0
  8048  005B0C                     _change_state_to_menu_start:
  8049                           	opt stack 18
  8050                           
  8051                           ;UI.c: 478: cur_state = 0;
  8052                           
  8053                           ; BSR set to: 0
  8054                           ;incstack = 0
  8055  005B0C  0E00               	movlw	0
  8056  005B0E  0100               	movlb	0	; () banked
  8057  005B10  6FE7               	movwf	(_cur_state+1)& (0+255),b
  8058  005B12  0E00               	movlw	0
  8059  005B14  6FE6               	movwf	_cur_state& (0+255),b
  8060                           
  8061                           ; BSR set to: 0
  8062                           ;UI.c: 480: lcdInst(0b10000000);;
  8063  005B16  0E80               	movlw	128
  8064  005B18  ECB1  F02E         	call	_lcdInst
  8065                           
  8066                           ;UI.c: 481: printRTC();
  8067  005B1C  EC83  F018         	call	_printRTC	;wreg free
  8068                           
  8069                           ;UI.c: 482: lcdInst(0b11000000);;
  8070  005B20  0EC0               	movlw	192
  8071  005B22  ECB1  F02E         	call	_lcdInst
  8072                           
  8073                           ;UI.c: 483: printf("PUSH TO CONTINUE");
  8074  005B26  0EEA               	movlw	low STR_30
  8075  005B28  0100               	movlb	0	; () banked
  8076  005B2A  6F8E               	movwf	printf@f& (0+255),b
  8077  005B2C  0EFD               	movlw	high STR_30
  8078  005B2E  0100               	movlb	0	; () banked
  8079  005B30  6F8F               	movwf	(printf@f+1)& (0+255),b
  8080  005B32  EC0C  F00E         	call	_printf	;wreg free
  8081  005B36  0012               	return		;funcret
  8082  005B38                     __end_of_change_state_to_menu_start:
  8083                           	opt stack 0
  8084                           tblptru	equ	0xFF8
  8085                           tblptrh	equ	0xFF7
  8086                           tblptrl	equ	0xFF6
  8087                           tablat	equ	0xFF5
  8088                           prodh	equ	0xFF4
  8089                           prodl	equ	0xFF3
  8090                           intcon	equ	0xFF2
  8091                           intcon2	equ	0xFF1
  8092                           intcon3	equ	0xFF0
  8093                           postinc0	equ	0xFEE
  8094                           wreg	equ	0xFE8
  8095                           postdec1	equ	0xFE5
  8096                           fsr1l	equ	0xFE1
  8097                           indf2	equ	0xFDF
  8098                           postinc2	equ	0xFDE
  8099                           postdec2	equ	0xFDD
  8100                           fsr2h	equ	0xFDA
  8101                           fsr2l	equ	0xFD9
  8102                           status	equ	0xFD8
  8103                           
  8104 ;; *************** function _initTime *****************
  8105 ;; Defined at:
  8106 ;;		line 17 in file "RTC.c"
  8107 ;; Parameters:    Size  Location     Type
  8108 ;;  s               1    wreg     unsigned char 
  8109 ;;  m               1    0[BANK0 ] unsigned char 
  8110 ;;  h               1    1[BANK0 ] unsigned char 
  8111 ;;  w               1    2[BANK0 ] unsigned char 
  8112 ;;  DD              1    3[BANK0 ] unsigned char 
  8113 ;;  MM              1    4[BANK0 ] unsigned char 
  8114 ;;  YY              1    5[BANK0 ] unsigned char 
  8115 ;; Auto vars:     Size  Location     Type
  8116 ;;  s               1    6[BANK0 ] unsigned char 
  8117 ;; Return value:  Size  Location     Type
  8118 ;;                  1    wreg      void 
  8119 ;; Registers used:
  8120 ;;		wreg
  8121 ;; Tracked objects:
  8122 ;;		On entry : 0/0
  8123 ;;		On exit  : 0/0
  8124 ;;		Unchanged: 0/0
  8125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8126 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8127 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8128 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8129 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8130 ;;Total ram usage:        7 bytes
  8131 ;; Hardware stack levels used:    1
  8132 ;; Hardware stack levels required when called:    7
  8133 ;; This function calls:
  8134 ;;		Nothing
  8135 ;; This function is called by:
  8136 ;;		_main
  8137 ;; This function uses a non-reentrant model
  8138 ;;
  8139                           
  8140                           	psect	text22
  8141  005C70                     __ptext22:
  8142                           	opt stack 0
  8143  005C70                     _initTime:
  8144                           	opt stack 23
  8145                           
  8146                           ;incstack = 0
  8147                           ;initTime@s stored from wreg
  8148  005C70  0100               	movlb	0	; () banked
  8149  005C72  6F86               	movwf	initTime@s& (0+255),b
  8150                           
  8151                           ;RTC.c: 19: time[0] = s;
  8152  005C74  C086  F11C         	movff	initTime@s,_time
  8153                           
  8154                           ;RTC.c: 20: time[1] = m;
  8155  005C78  C080  F11D         	movff	initTime@m,_time+1
  8156                           
  8157                           ;RTC.c: 21: time[2] = h;
  8158  005C7C  C081  F11E         	movff	initTime@h,_time+2
  8159                           
  8160                           ;RTC.c: 22: time[3] = w;
  8161  005C80  C082  F11F         	movff	initTime@w,_time+3
  8162                           
  8163                           ;RTC.c: 23: time[4] = DD;
  8164  005C84  C083  F120         	movff	initTime@DD,_time+4
  8165                           
  8166                           ;RTC.c: 24: time[5] = MM;
  8167  005C88  C084  F121         	movff	initTime@MM,_time+5
  8168                           
  8169                           ;RTC.c: 25: time[6] = YY;
  8170  005C8C  C085  F122         	movff	initTime@YY,_time+6
  8171  005C90  0012               	return		;funcret
  8172  005C92                     __end_of_initTime:
  8173                           	opt stack 0
  8174                           tblptru	equ	0xFF8
  8175                           tblptrh	equ	0xFF7
  8176                           tblptrl	equ	0xFF6
  8177                           tablat	equ	0xFF5
  8178                           prodh	equ	0xFF4
  8179                           prodl	equ	0xFF3
  8180                           intcon	equ	0xFF2
  8181                           intcon2	equ	0xFF1
  8182                           intcon3	equ	0xFF0
  8183                           postinc0	equ	0xFEE
  8184                           wreg	equ	0xFE8
  8185                           postdec1	equ	0xFE5
  8186                           fsr1l	equ	0xFE1
  8187                           indf2	equ	0xFDF
  8188                           postinc2	equ	0xFDE
  8189                           postdec2	equ	0xFDD
  8190                           fsr2h	equ	0xFDA
  8191                           fsr2l	equ	0xFD9
  8192                           status	equ	0xFD8
  8193                           
  8194 ;; *************** function _initLCD *****************
  8195 ;; Defined at:
  8196 ;;		line 50 in file "lcd.c"
  8197 ;; Parameters:    Size  Location     Type
  8198 ;;		None
  8199 ;; Auto vars:     Size  Location     Type
  8200 ;;		None
  8201 ;; Return value:  Size  Location     Type
  8202 ;;                  1    wreg      void 
  8203 ;; Registers used:
  8204 ;;		wreg, status,2, status,0, cstack
  8205 ;; Tracked objects:
  8206 ;;		On entry : 0/0
  8207 ;;		On exit  : 0/0
  8208 ;;		Unchanged: 0/0
  8209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8210 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8211 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8212 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8213 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8214 ;;Total ram usage:        1 bytes
  8215 ;; Hardware stack levels used:    1
  8216 ;; Hardware stack levels required when called:    9
  8217 ;; This function calls:
  8218 ;;		_lcdInst
  8219 ;; This function is called by:
  8220 ;;		_main
  8221 ;; This function uses a non-reentrant model
  8222 ;;
  8223                           
  8224                           	psect	text23
  8225  00568A                     __ptext23:
  8226                           	opt stack 0
  8227  00568A                     _initLCD:
  8228                           	opt stack 21
  8229                           
  8230                           ;lcd.c: 51: _delay((unsigned long)((15)*(32000000/4000.0)));
  8231                           
  8232                           ;incstack = 0
  8233  00568A  0E9C               	movlw	156
  8234  00568C  0100               	movlb	0	; () banked
  8235  00568E  6F83               	movwf	??_initLCD& (0+255),b
  8236  005690  0ED7               	movlw	215
  8237  005692                     u10557:
  8238  005692  2EE8               	decfsz	wreg,f,c
  8239  005694  D7FE               	bra	u10557
  8240  005696  2F83               	decfsz	??_initLCD& (0+255),f,b
  8241  005698  D7FC               	bra	u10557
  8242                           
  8243                           ;lcd.c: 52: lcdInst(0b00110011);
  8244  00569A  0E33               	movlw	51
  8245  00569C  ECB1  F02E         	call	_lcdInst
  8246                           
  8247                           ;lcd.c: 53: lcdInst(0b00110010);
  8248  0056A0  0E32               	movlw	50
  8249  0056A2  ECB1  F02E         	call	_lcdInst
  8250                           
  8251                           ;lcd.c: 55: lcdInst(0b00101000);
  8252  0056A6  0E28               	movlw	40
  8253  0056A8  ECB1  F02E         	call	_lcdInst
  8254                           
  8255                           ;lcd.c: 56: lcdInst(0b00001100);
  8256  0056AC  0E0C               	movlw	12
  8257  0056AE  ECB1  F02E         	call	_lcdInst
  8258                           
  8259                           ;lcd.c: 57: lcdInst(0b00000110);
  8260  0056B2  0E06               	movlw	6
  8261  0056B4  ECB1  F02E         	call	_lcdInst
  8262                           
  8263                           ;lcd.c: 58: lcdInst(0b00000001);
  8264  0056B8  0E01               	movlw	1
  8265  0056BA  ECB1  F02E         	call	_lcdInst
  8266                           
  8267                           ;lcd.c: 59: _delay((unsigned long)((15)*(32000000/4000.0)));
  8268  0056BE  0E9C               	movlw	156
  8269  0056C0  0100               	movlb	0	; () banked
  8270  0056C2  6F83               	movwf	??_initLCD& (0+255),b
  8271  0056C4  0ED7               	movlw	215
  8272  0056C6                     u10567:
  8273  0056C6  2EE8               	decfsz	wreg,f,c
  8274  0056C8  D7FE               	bra	u10567
  8275  0056CA  2F83               	decfsz	??_initLCD& (0+255),f,b
  8276  0056CC  D7FC               	bra	u10567
  8277  0056CE  0012               	return		;funcret
  8278  0056D0                     __end_of_initLCD:
  8279                           	opt stack 0
  8280                           tblptru	equ	0xFF8
  8281                           tblptrh	equ	0xFF7
  8282                           tblptrl	equ	0xFF6
  8283                           tablat	equ	0xFF5
  8284                           prodh	equ	0xFF4
  8285                           prodl	equ	0xFF3
  8286                           intcon	equ	0xFF2
  8287                           intcon2	equ	0xFF1
  8288                           intcon3	equ	0xFF0
  8289                           postinc0	equ	0xFEE
  8290                           wreg	equ	0xFE8
  8291                           postdec1	equ	0xFE5
  8292                           fsr1l	equ	0xFE1
  8293                           indf2	equ	0xFDF
  8294                           postinc2	equ	0xFDE
  8295                           postdec2	equ	0xFDD
  8296                           fsr2h	equ	0xFDA
  8297                           fsr2l	equ	0xFD9
  8298                           status	equ	0xFD8
  8299                           
  8300 ;; *************** function _initEEPROM *****************
  8301 ;; Defined at:
  8302 ;;		line 32 in file "EEPROM.c"
  8303 ;; Parameters:    Size  Location     Type
  8304 ;;		None
  8305 ;; Auto vars:     Size  Location     Type
  8306 ;;		None
  8307 ;; Return value:  Size  Location     Type
  8308 ;;                  1    wreg      void 
  8309 ;; Registers used:
  8310 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8311 ;; Tracked objects:
  8312 ;;		On entry : 0/0
  8313 ;;		On exit  : 0/0
  8314 ;;		Unchanged: 0/0
  8315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8316 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8317 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8318 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8319 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8320 ;;Total ram usage:        0 bytes
  8321 ;; Hardware stack levels used:    1
  8322 ;; Hardware stack levels required when called:   11
  8323 ;; This function calls:
  8324 ;;		_EEPROM_write
  8325 ;; This function is called by:
  8326 ;;		_main
  8327 ;; This function uses a non-reentrant model
  8328 ;;
  8329                           
  8330                           	psect	text24
  8331  005D00                     __ptext24:
  8332                           	opt stack 0
  8333  005D00                     _initEEPROM:
  8334                           	opt stack 19
  8335                           
  8336                           ;EEPROM.c: 33: EEPROM_write(0, 0x01);
  8337                           
  8338                           ;incstack = 0
  8339  005D00  0E00               	movlw	0
  8340  005D02  0100               	movlb	0	; () banked
  8341  005D04  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  8342  005D06  0E00               	movlw	0
  8343  005D08  6FAB               	movwf	EEPROM_write@address& (0+255),b
  8344  005D0A  0E01               	movlw	1
  8345  005D0C  0100               	movlb	0	; () banked
  8346  005D0E  6FAD               	movwf	EEPROM_write@data& (0+255),b
  8347  005D10  ECD2  F022         	call	_EEPROM_write	;wreg free
  8348  005D14  0012               	return		;funcret
  8349  005D16                     __end_of_initEEPROM:
  8350                           	opt stack 0
  8351                           tblptru	equ	0xFF8
  8352                           tblptrh	equ	0xFF7
  8353                           tblptrl	equ	0xFF6
  8354                           tablat	equ	0xFF5
  8355                           prodh	equ	0xFF4
  8356                           prodl	equ	0xFF3
  8357                           intcon	equ	0xFF2
  8358                           intcon2	equ	0xFF1
  8359                           intcon3	equ	0xFF0
  8360                           postinc0	equ	0xFEE
  8361                           wreg	equ	0xFE8
  8362                           postdec1	equ	0xFE5
  8363                           fsr1l	equ	0xFE1
  8364                           indf2	equ	0xFDF
  8365                           postinc2	equ	0xFDE
  8366                           postdec2	equ	0xFDD
  8367                           fsr2h	equ	0xFDA
  8368                           fsr2l	equ	0xFD9
  8369                           status	equ	0xFD8
  8370                           
  8371 ;; *************** function _EEPROM_write *****************
  8372 ;; Defined at:
  8373 ;;		line 36 in file "EEPROM.c"
  8374 ;; Parameters:    Size  Location     Type
  8375 ;;  address         2   43[BANK0 ] unsigned short 
  8376 ;;  data            1   45[BANK0 ] unsigned char 
  8377 ;; Auto vars:     Size  Location     Type
  8378 ;;  i               1   48[BANK0 ] unsigned char 
  8379 ;;  i               1   47[BANK0 ] unsigned char 
  8380 ;; Return value:  Size  Location     Type
  8381 ;;                  1    wreg      void 
  8382 ;; Registers used:
  8383 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8384 ;; Tracked objects:
  8385 ;;		On entry : 0/0
  8386 ;;		On exit  : 0/0
  8387 ;;		Unchanged: 0/0
  8388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8389 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8390 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8391 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8392 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8393 ;;Total ram usage:        6 bytes
  8394 ;; Hardware stack levels used:    1
  8395 ;; Hardware stack levels required when called:   10
  8396 ;; This function calls:
  8397 ;;		_EEPROM_read
  8398 ;;		_lcdInst
  8399 ;;		_printf
  8400 ;; This function is called by:
  8401 ;;		_Loading
  8402 ;;		_initEEPROM
  8403 ;;		_logRun
  8404 ;; This function uses a non-reentrant model
  8405 ;;
  8406                           
  8407                           	psect	text25
  8408  0045A4                     __ptext25:
  8409                           	opt stack 0
  8410  0045A4                     _EEPROM_write:
  8411                           	opt stack 18
  8412                           
  8413                           ;EEPROM.c: 37: EECON1bits.WREN = 1;
  8414                           
  8415                           ;incstack = 0
  8416  0045A4  84A6               	bsf	4006,2,c	;volatile
  8417                           
  8418                           ;EEPROM.c: 40: EEADRH = (unsigned char)(address >> 8);
  8419  0045A6  0100               	movlb	0	; () banked
  8420  0045A8  51AC               	movf	(EEPROM_write@address+1)& (0+255),w,b
  8421  0045AA  6EAA               	movwf	4010,c	;volatile
  8422                           
  8423                           ; BSR set to: 0
  8424                           ;EEPROM.c: 41: EEADR = (unsigned char)address;
  8425  0045AC  C0AB  FFA9         	movff	EEPROM_write@address,4009	;volatile
  8426                           
  8427                           ; BSR set to: 0
  8428                           ;EEPROM.c: 43: EEDATA = data;
  8429  0045B0  C0AD  FFA8         	movff	EEPROM_write@data,4008	;volatile
  8430                           
  8431                           ; BSR set to: 0
  8432                           ;EEPROM.c: 44: EECON1bits.EEPGD = 0;
  8433  0045B4  9EA6               	bcf	4006,7,c	;volatile
  8434                           
  8435                           ; BSR set to: 0
  8436                           ;EEPROM.c: 45: EECON1bits.CFGS = 0;
  8437  0045B6  9CA6               	bcf	4006,6,c	;volatile
  8438                           
  8439                           ; BSR set to: 0
  8440                           ;EEPROM.c: 47: (INTCONbits.GIE = 0);
  8441  0045B8  9EF2               	bcf	intcon,7,c	;volatile
  8442                           
  8443                           ;EEPROM.c: 49: EECON2 = 0x55;
  8444  0045BA  0E55               	movlw	85
  8445  0045BC  6EA7               	movwf	4007,c	;volatile
  8446                           
  8447                           ;EEPROM.c: 50: EECON2 = 0x0AA;
  8448  0045BE  0EAA               	movlw	170
  8449  0045C0  6EA7               	movwf	4007,c	;volatile
  8450                           
  8451                           ; BSR set to: 0
  8452                           ;EEPROM.c: 51: EECON1bits.WR = 1;
  8453  0045C2  82A6               	bsf	4006,1,c	;volatile
  8454                           
  8455                           ; BSR set to: 0
  8456                           ;EEPROM.c: 52: (INTCONbits.GIE = 1);
  8457  0045C4  8EF2               	bsf	intcon,7,c	;volatile
  8458  0045C6                     l1142:
  8459  0045C6  A8A1               	btfss	4001,4,c	;volatile
  8460  0045C8  D7FE               	goto	l1142
  8461                           
  8462                           ;EEPROM.c: 57: PIR2bits.EEIF = 0;
  8463  0045CA  98A1               	bcf	4001,4,c	;volatile
  8464                           
  8465                           ;EEPROM.c: 58: EECON1bits.WREN = 0;
  8466  0045CC  94A6               	bcf	4006,2,c	;volatile
  8467                           
  8468                           ;EEPROM.c: 61: if(debug){
  8469  0045CE  0101               	movlb	1	; () banked
  8470  0045D0  512F               	movf	_debug& (0+255),w,b
  8471  0045D2  0101               	movlb	1	; () banked
  8472  0045D4  1130               	iorwf	(_debug+1)& (0+255),w,b
  8473  0045D6  B4D8               	btfsc	status,2,c
  8474  0045D8  0012               	return	
  8475                           
  8476                           ; BSR set to: 1
  8477                           ;EEPROM.c: 62: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8478  0045DA  0E01               	movlw	1
  8479  0045DC  ECB1  F02E         	call	_lcdInst
  8480  0045E0  0E68               	movlw	104
  8481  0045E2  0100               	movlb	0	; () banked
  8482  0045E4  6FAE               	movwf	??_EEPROM_write& (0+255),b
  8483  0045E6  0EE4               	movlw	228
  8484  0045E8                     u10577:
  8485  0045E8  2EE8               	decfsz	wreg,f,c
  8486  0045EA  D7FE               	bra	u10577
  8487  0045EC  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  8488  0045EE  D7FC               	bra	u10577
  8489  0045F0  F000               	nop	
  8490                           
  8491                           ;EEPROM.c: 63: lcdInst(0b10000000);;
  8492  0045F2  0E80               	movlw	128
  8493  0045F4  ECB1  F02E         	call	_lcdInst
  8494                           
  8495                           ;EEPROM.c: 64: if(EEPROM_read(address)==data){
  8496  0045F8  C0AB  F080         	movff	EEPROM_write@address,EEPROM_read@address
  8497  0045FC  C0AC  F081         	movff	EEPROM_write@address+1,EEPROM_read@address+1
  8498  004600  EC74  F02E         	call	_EEPROM_read	;wreg free
  8499  004604  0100               	movlb	0	; () banked
  8500  004606  19AD               	xorwf	EEPROM_write@data& (0+255),w,b
  8501  004608  A4D8               	btfss	status,2,c
  8502  00460A  D024               	goto	l7424
  8503                           
  8504                           ; BSR set to: 0
  8505                           ;EEPROM.c: 65: printf("(data: %u, addr: %u)", data, address);
  8506  00460C  0EE2               	movlw	low STR_66
  8507  00460E  0100               	movlb	0	; () banked
  8508  004610  6F8E               	movwf	printf@f& (0+255),b
  8509  004612  0EFA               	movlw	high STR_66
  8510  004614  0100               	movlb	0	; () banked
  8511  004616  6F8F               	movwf	(printf@f+1)& (0+255),b
  8512  004618  C0AD  F090         	movff	EEPROM_write@data,?_printf+2
  8513  00461C  0100               	movlb	0	; () banked
  8514  00461E  6B91               	clrf	(?_printf+3)& (0+255),b
  8515  004620  C0AB  F092         	movff	EEPROM_write@address,?_printf+4
  8516  004624  C0AC  F093         	movff	EEPROM_write@address+1,?_printf+5
  8517  004628  EC0C  F00E         	call	_printf	;wreg free
  8518                           
  8519                           ;EEPROM.c: 66: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));}
      +                          ;
  8520  00462C  0E00               	movlw	0
  8521  00462E  0100               	movlb	0	; () banked
  8522  004630  6FAF               	movwf	EEPROM_write@i& (0+255),b
  8523  004632                     l7416:
  8524                           
  8525                           ; BSR set to: 0
  8526  004632  0E63               	movlw	99
  8527  004634  0100               	movlb	0	; () banked
  8528  004636  65AF               	cpfsgt	EEPROM_write@i& (0+255),b
  8529  004638  D001               	goto	l7420
  8530  00463A  0012               	return	
  8531  00463C                     l7420:
  8532                           
  8533                           ; BSR set to: 0
  8534  00463C  0E68               	movlw	104
  8535  00463E  0100               	movlb	0	; () banked
  8536  004640  6FAE               	movwf	??_EEPROM_write& (0+255),b
  8537  004642  0EE4               	movlw	228
  8538  004644                     u10587:
  8539  004644  2EE8               	decfsz	wreg,f,c
  8540  004646  D7FE               	bra	u10587
  8541  004648  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  8542  00464A  D7FC               	bra	u10587
  8543  00464C  F000               	nop	
  8544  00464E  0100               	movlb	0	; () banked
  8545  004650  2BAF               	incf	EEPROM_write@i& (0+255),f,b
  8546  004652  D7EF               	goto	l7416
  8547  004654                     l7424:
  8548                           
  8549                           ; BSR set to: 0
  8550                           ;EEPROM.c: 68: else{ printf("FAILED"); for(char i=0;i<100;i++){_delay((unsigned long)((1
      +                          0)*(32000000/4000.0)));}; }
  8551  004654  0EBC               	movlw	low STR_67
  8552  004656  0100               	movlb	0	; () banked
  8553  004658  6F8E               	movwf	printf@f& (0+255),b
  8554  00465A  0EFF               	movlw	high STR_67
  8555  00465C  0100               	movlb	0	; () banked
  8556  00465E  6F8F               	movwf	(printf@f+1)& (0+255),b
  8557  004660  EC0C  F00E         	call	_printf	;wreg free
  8558  004664  0E00               	movlw	0
  8559  004666  0100               	movlb	0	; () banked
  8560  004668  6FB0               	movwf	EEPROM_write@i_1409& (0+255),b
  8561  00466A                     l7428:
  8562                           
  8563                           ; BSR set to: 0
  8564  00466A  0E63               	movlw	99
  8565  00466C  0100               	movlb	0	; () banked
  8566  00466E  65B0               	cpfsgt	EEPROM_write@i_1409& (0+255),b
  8567  004670  D001               	goto	l7432
  8568  004672  0012               	return	
  8569  004674                     l7432:
  8570                           
  8571                           ; BSR set to: 0
  8572  004674  0E68               	movlw	104
  8573  004676  0100               	movlb	0	; () banked
  8574  004678  6FAE               	movwf	??_EEPROM_write& (0+255),b
  8575  00467A  0EE4               	movlw	228
  8576  00467C                     u10597:
  8577  00467C  2EE8               	decfsz	wreg,f,c
  8578  00467E  D7FE               	bra	u10597
  8579  004680  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  8580  004682  D7FC               	bra	u10597
  8581  004684  F000               	nop	
  8582  004686  0100               	movlb	0	; () banked
  8583  004688  2BB0               	incf	EEPROM_write@i_1409& (0+255),f,b
  8584  00468A  D7EF               	goto	l7428
  8585  00468C                     __end_of_EEPROM_write:
  8586                           	opt stack 0
  8587                           tblptru	equ	0xFF8
  8588                           tblptrh	equ	0xFF7
  8589                           tblptrl	equ	0xFF6
  8590                           tablat	equ	0xFF5
  8591                           prodh	equ	0xFF4
  8592                           prodl	equ	0xFF3
  8593                           intcon	equ	0xFF2
  8594                           intcon2	equ	0xFF1
  8595                           intcon3	equ	0xFF0
  8596                           postinc0	equ	0xFEE
  8597                           wreg	equ	0xFE8
  8598                           postdec1	equ	0xFE5
  8599                           fsr1l	equ	0xFE1
  8600                           indf2	equ	0xFDF
  8601                           postinc2	equ	0xFDE
  8602                           postdec2	equ	0xFDD
  8603                           fsr2h	equ	0xFDA
  8604                           fsr2l	equ	0xFD9
  8605                           status	equ	0xFD8
  8606                           
  8607 ;; *************** function _EEPROM_read *****************
  8608 ;; Defined at:
  8609 ;;		line 72 in file "EEPROM.c"
  8610 ;; Parameters:    Size  Location     Type
  8611 ;;  address         2    0[BANK0 ] unsigned short 
  8612 ;; Auto vars:     Size  Location     Type
  8613 ;;		None
  8614 ;; Return value:  Size  Location     Type
  8615 ;;                  1    wreg      unsigned char 
  8616 ;; Registers used:
  8617 ;;		wreg, status,2
  8618 ;; Tracked objects:
  8619 ;;		On entry : 0/0
  8620 ;;		On exit  : 0/0
  8621 ;;		Unchanged: 0/0
  8622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8623 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8624 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8625 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8626 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8627 ;;Total ram usage:        2 bytes
  8628 ;; Hardware stack levels used:    1
  8629 ;; Hardware stack levels required when called:    7
  8630 ;; This function calls:
  8631 ;;		Nothing
  8632 ;; This function is called by:
  8633 ;;		_Loading
  8634 ;;		_EEPROM_write
  8635 ;;		_logRun
  8636 ;; This function uses a non-reentrant model
  8637 ;;
  8638                           
  8639                           	psect	text26
  8640  005CE8                     __ptext26:
  8641                           	opt stack 0
  8642  005CE8                     _EEPROM_read:
  8643                           	opt stack 20
  8644                           
  8645                           ;EEPROM.c: 74: EEADRH = (unsigned char)(address >> 8);
  8646                           
  8647                           ;incstack = 0
  8648  005CE8  0100               	movlb	0	; () banked
  8649  005CEA  5181               	movf	(EEPROM_read@address+1)& (0+255),w,b
  8650  005CEC  6EAA               	movwf	4010,c	;volatile
  8651                           
  8652                           ; BSR set to: 0
  8653                           ;EEPROM.c: 75: EEADR = (unsigned char)address;
  8654  005CEE  C080  FFA9         	movff	EEPROM_read@address,4009	;volatile
  8655                           
  8656                           ; BSR set to: 0
  8657                           ;EEPROM.c: 77: EECON1bits.EEPGD = 0;
  8658  005CF2  9EA6               	bcf	4006,7,c	;volatile
  8659                           
  8660                           ; BSR set to: 0
  8661                           ;EEPROM.c: 78: EECON1bits.CFGS = 0;
  8662  005CF4  9CA6               	bcf	4006,6,c	;volatile
  8663                           
  8664                           ; BSR set to: 0
  8665                           ;EEPROM.c: 79: EECON1bits.RD = 1;
  8666  005CF6  80A6               	bsf	4006,0,c	;volatile
  8667  005CF8                     l1155:
  8668  005CF8  B0A6               	btfsc	4006,0,c	;volatile
  8669  005CFA  D7FE               	goto	l1155
  8670                           
  8671                           ;EEPROM.c: 85: return EEDATA;
  8672  005CFC  50A8               	movf	4008,w,c	;volatile
  8673  005CFE  0012               	return	
  8674  005D00                     __end_of_EEPROM_read:
  8675                           	opt stack 0
  8676                           tblptru	equ	0xFF8
  8677                           tblptrh	equ	0xFF7
  8678                           tblptrl	equ	0xFF6
  8679                           tablat	equ	0xFF5
  8680                           prodh	equ	0xFF4
  8681                           prodl	equ	0xFF3
  8682                           intcon	equ	0xFF2
  8683                           intcon2	equ	0xFF1
  8684                           intcon3	equ	0xFF0
  8685                           postinc0	equ	0xFEE
  8686                           wreg	equ	0xFE8
  8687                           postdec1	equ	0xFE5
  8688                           fsr1l	equ	0xFE1
  8689                           indf2	equ	0xFDF
  8690                           postinc2	equ	0xFDE
  8691                           postdec2	equ	0xFDD
  8692                           fsr2h	equ	0xFDA
  8693                           fsr2l	equ	0xFD9
  8694                           status	equ	0xFD8
  8695                           
  8696 ;; *************** function _UI *****************
  8697 ;; Defined at:
  8698 ;;		line 76 in file "UI.c"
  8699 ;; Parameters:    Size  Location     Type
  8700 ;;		None
  8701 ;; Auto vars:     Size  Location     Type
  8702 ;;  i               1   73[BANK0 ] unsigned char 
  8703 ;;  i               1   85[BANK0 ] unsigned char 
  8704 ;;  i               1   84[BANK0 ] unsigned char 
  8705 ;;  i               1   83[BANK0 ] unsigned char 
  8706 ;;  i               1   82[BANK0 ] unsigned char 
  8707 ;;  i               1   81[BANK0 ] unsigned char 
  8708 ;;  i               1   80[BANK0 ] unsigned char 
  8709 ;;  i               1   79[BANK0 ] unsigned char 
  8710 ;;  i               1   78[BANK0 ] unsigned char 
  8711 ;;  i               1   77[BANK0 ] unsigned char 
  8712 ;;  i               1   76[BANK0 ] unsigned char 
  8713 ;;  i               1   75[BANK0 ] unsigned char 
  8714 ;;  i               1   74[BANK0 ] unsigned char 
  8715 ;;  month           4   86[BANK0 ] unsigned char [4]
  8716 ;;  i               1   72[BANK0 ] unsigned char 
  8717 ;; Return value:  Size  Location     Type
  8718 ;;                  1    wreg      void 
  8719 ;; Registers used:
  8720 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8721 ;; Tracked objects:
  8722 ;;		On entry : 0/0
  8723 ;;		On exit  : 0/0
  8724 ;;		Unchanged: 0/0
  8725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8726 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8727 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8728 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8729 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8730 ;;Total ram usage:       22 bytes
  8731 ;; Hardware stack levels used:    1
  8732 ;; Hardware stack levels required when called:   11
  8733 ;; This function calls:
  8734 ;;		___awdiv
  8735 ;;		___awmod
  8736 ;;		_change_state_to_menu_12
  8737 ;;		_change_state_to_menu_22
  8738 ;;		_lcdInst
  8739 ;;		_printRTC
  8740 ;;		_printf
  8741 ;;		_strcpy
  8742 ;; This function is called by:
  8743 ;;		_main
  8744 ;; This function uses a non-reentrant model
  8745 ;;
  8746                           
  8747                           	psect	text27
  8748  000012                     __ptext27:
  8749                           	opt stack 0
  8750  000012                     _UI:
  8751                           	opt stack 19
  8752                           
  8753                           ;UI.c: 77: if(machine_state == DoneSorting_state){
  8754                           
  8755                           ;incstack = 0
  8756  000012  0E02               	movlw	2
  8757  000014  0100               	movlb	0	; () banked
  8758  000016  19FC               	xorwf	_machine_state& (0+255),w,b
  8759  000018  A4D8               	btfss	status,2,c
  8760  00001A  D086               	goto	l9370
  8761                           
  8762                           ; BSR set to: 0
  8763                           ;UI.c: 78: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8764  00001C  0E01               	movlw	1
  8765  00001E  ECB1  F02E         	call	_lcdInst
  8766  000022  0E68               	movlw	104
  8767  000024  0100               	movlb	0	; () banked
  8768  000026  6FC4               	movwf	??_UI& (0+255),b
  8769  000028  0EE4               	movlw	228
  8770  00002A                     u10607:
  8771  00002A  2EE8               	decfsz	wreg,f,c
  8772  00002C  D7FE               	bra	u10607
  8773  00002E  2FC4               	decfsz	??_UI& (0+255),f,b
  8774  000030  D7FC               	bra	u10607
  8775  000032  F000               	nop	
  8776                           
  8777                           ;UI.c: 79: lcdInst(0b10000000);;
  8778  000034  0E80               	movlw	128
  8779  000036  ECB1  F02E         	call	_lcdInst
  8780                           
  8781                           ;UI.c: 80: printf("RESULTS IN LOG %d", sel+1);
  8782  00003A  0E63               	movlw	low STR_1
  8783  00003C  0100               	movlb	0	; () banked
  8784  00003E  6F8E               	movwf	printf@f& (0+255),b
  8785  000040  0EFB               	movlw	high STR_1
  8786  000042  0100               	movlb	0	; () banked
  8787  000044  6F8F               	movwf	(printf@f+1)& (0+255),b
  8788  000046  0E01               	movlw	1
  8789  000048  0100               	movlb	0	; () banked
  8790  00004A  25FD               	addwf	_sel& (0+255),w,b
  8791  00004C  0100               	movlb	0	; () banked
  8792  00004E  6F90               	movwf	(?_printf+2)& (0+255),b
  8793  000050  0100               	movlb	0	; () banked
  8794  000052  6B91               	clrf	(?_printf+3)& (0+255),b
  8795  000054  0E00               	movlw	0
  8796  000056  2391               	addwfc	(?_printf+3)& (0+255),f,b
  8797  000058  EC0C  F00E         	call	_printf	;wreg free
  8798                           
  8799                           ;UI.c: 81: lcdInst(0b11000000);;
  8800  00005C  0EC0               	movlw	192
  8801  00005E  ECB1  F02E         	call	_lcdInst
  8802                           
  8803                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  8804  000062  0E0E               	movlw	14
  8805  000064  0100               	movlb	0	; () banked
  8806  000066  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8807  000068  0E10               	movlw	16
  8808  00006A  6F82               	movwf	___awmod@divisor& (0+255),b
  8809  00006C  C0FA  F080         	movff	_total_time,___awmod@dividend
  8810  000070  C0FB  F081         	movff	_total_time+1,___awmod@dividend+1
  8811  000074  EC66  F026         	call	___awmod	;wreg free
  8812  000078  C080  F0C6         	movff	?___awmod,_UI$2428
  8813  00007C  C081  F0C7         	movff	?___awmod+1,_UI$2428+1
  8814                           
  8815                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  8816  000080  0E49               	movlw	low STR_2
  8817  000082  0100               	movlb	0	; () banked
  8818  000084  6F8E               	movwf	printf@f& (0+255),b
  8819  000086  0EFF               	movlw	high STR_2
  8820  000088  0100               	movlb	0	; () banked
  8821  00008A  6F8F               	movwf	(printf@f+1)& (0+255),b
  8822  00008C  0E0E               	movlw	14
  8823  00008E  0100               	movlb	0	; () banked
  8824  000090  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8825  000092  0E10               	movlw	16
  8826  000094  6F82               	movwf	___awmod@divisor& (0+255),b
  8827  000096  C0FA  F080         	movff	_total_time,___awmod@dividend
  8828  00009A  C0FB  F081         	movff	_total_time+1,___awmod@dividend+1
  8829  00009E  EC66  F026         	call	___awmod	;wreg free
  8830  0000A2  C080  F086         	movff	?___awmod,___awdiv@dividend
  8831  0000A6  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  8832  0000AA  0E00               	movlw	0
  8833  0000AC  0100               	movlb	0	; () banked
  8834  0000AE  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  8835  0000B0  0E3C               	movlw	60
  8836  0000B2  6F88               	movwf	___awdiv@divisor& (0+255),b
  8837  0000B4  EC54  F025         	call	___awdiv	;wreg free
  8838  0000B8  C086  F090         	movff	?___awdiv,?_printf+2
  8839  0000BC  C087  F091         	movff	?___awdiv+1,?_printf+3
  8840  0000C0  C0C6  F080         	movff	_UI$2428,___awmod@dividend
  8841  0000C4  C0C7  F081         	movff	_UI$2428+1,___awmod@dividend+1
  8842  0000C8  0E00               	movlw	0
  8843  0000CA  0100               	movlb	0	; () banked
  8844  0000CC  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8845  0000CE  0E3C               	movlw	60
  8846  0000D0  6F82               	movwf	___awmod@divisor& (0+255),b
  8847  0000D2  EC66  F026         	call	___awmod	;wreg free
  8848  0000D6  C080  F092         	movff	?___awmod,?_printf+4
  8849  0000DA  C081  F093         	movff	?___awmod+1,?_printf+5
  8850  0000DE  EC0C  F00E         	call	_printf	;wreg free
  8851  0000E2                     l185:
  8852  0000E2  B281               	btfsc	3969,1,c	;volatile
  8853  0000E4  D7FE               	goto	l185
  8854  0000E6                     l188:
  8855  0000E6  A281               	btfss	3969,1,c	;volatile
  8856  0000E8  D7FE               	goto	l188
  8857                           
  8858                           ;UI.c: 86: }
  8859                           ;UI.c: 87: if(cur_state == 12){
  8860  0000EA  0E0C               	movlw	12
  8861  0000EC  0100               	movlb	0	; () banked
  8862  0000EE  19E6               	xorwf	_cur_state& (0+255),w,b
  8863  0000F0  0100               	movlb	0	; () banked
  8864  0000F2  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
  8865  0000F4  A4D8               	btfss	status,2,c
  8866  0000F6  D003               	goto	l9364
  8867                           
  8868                           ; BSR set to: 0
  8869                           ;UI.c: 88: change_state_to_menu_12();
  8870  0000F8  ECE4  F02B         	call	_change_state_to_menu_12	;wreg free
  8871                           
  8872                           ;UI.c: 89: }
  8873  0000FC  D002               	goto	l193
  8874  0000FE                     l9364:
  8875                           
  8876                           ;UI.c: 90: else{
  8877                           ;UI.c: 91: change_state_to_menu_22();
  8878  0000FE  ECC8  F02B         	call	_change_state_to_menu_22	;wreg free
  8879  000102                     l193:
  8880  000102  B281               	btfsc	3969,1,c	;volatile
  8881  000104  D7FE               	goto	l193
  8882                           
  8883                           ;UI.c: 94: _delay((unsigned long)((100)*(32000000/4000.0)));
  8884  000106  0E05               	movlw	5
  8885  000108  0100               	movlb	0	; () banked
  8886  00010A  6FC5               	movwf	(??_UI+1)& (0+255),b
  8887  00010C  0E0F               	movlw	15
  8888  00010E  0100               	movlb	0	; () banked
  8889  000110  6FC4               	movwf	??_UI& (0+255),b
  8890  000112  0EF1               	movlw	241
  8891  000114                     u10617:
  8892  000114  2EE8               	decfsz	wreg,f,c
  8893  000116  D7FE               	bra	u10617
  8894  000118  2FC4               	decfsz	??_UI& (0+255),f,b
  8895  00011A  D7FC               	bra	u10617
  8896  00011C  2FC5               	decfsz	(??_UI+1)& (0+255),f,b
  8897  00011E  D7FA               	bra	u10617
  8898                           
  8899                           ;UI.c: 95: machine_state = UI_state;
  8900  000120  0E00               	movlw	0
  8901  000122  0100               	movlb	0	; () banked
  8902  000124  6FFC               	movwf	_machine_state& (0+255),b
  8903                           
  8904                           ;UI.c: 96: }
  8905  000126  D3D2               	goto	l9690
  8906  000128                     l9370:
  8907                           
  8908                           ; BSR set to: 0
  8909                           ;UI.c: 97: else if(cur_state == 0){
  8910  000128  0100               	movlb	0	; () banked
  8911  00012A  51E6               	movf	_cur_state& (0+255),w,b
  8912  00012C  0100               	movlb	0	; () banked
  8913  00012E  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
  8914  000130  A4D8               	btfss	status,2,c
  8915  000132  D3CC               	goto	l9690
  8916                           
  8917                           ; BSR set to: 0
  8918                           ;UI.c: 98: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
  8919  000134  0E00               	movlw	0
  8920  000136  0100               	movlb	0	; () banked
  8921  000138  6FC8               	movwf	UI@i& (0+255),b
  8922  00013A                     l9374:
  8923                           
  8924                           ; BSR set to: 0
  8925  00013A  0E63               	movlw	99
  8926  00013C  0100               	movlb	0	; () banked
  8927  00013E  65C8               	cpfsgt	UI@i& (0+255),b
  8928  000140  D001               	goto	l9378
  8929  000142  D00C               	goto	l9382
  8930  000144                     l9378:
  8931                           
  8932                           ; BSR set to: 0
  8933  000144  0E68               	movlw	104
  8934  000146  0100               	movlb	0	; () banked
  8935  000148  6FC4               	movwf	??_UI& (0+255),b
  8936  00014A  0EE4               	movlw	228
  8937  00014C                     u10627:
  8938  00014C  2EE8               	decfsz	wreg,f,c
  8939  00014E  D7FE               	bra	u10627
  8940  000150  2FC4               	decfsz	??_UI& (0+255),f,b
  8941  000152  D7FC               	bra	u10627
  8942  000154  F000               	nop	
  8943  000156  0100               	movlb	0	; () banked
  8944  000158  2BC8               	incf	UI@i& (0+255),f,b
  8945  00015A  D7EF               	goto	l9374
  8946  00015C                     l9382:
  8947                           
  8948                           ; BSR set to: 0
  8949                           ;UI.c: 99: if(cur_state == 0){
  8950  00015C  0100               	movlb	0	; () banked
  8951  00015E  51E6               	movf	_cur_state& (0+255),w,b
  8952  000160  0100               	movlb	0	; () banked
  8953  000162  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
  8954  000164  A4D8               	btfss	status,2,c
  8955  000166  D3B2               	goto	l9690
  8956                           
  8957                           ; BSR set to: 0
  8958                           ;UI.c: 100: printRTC();
  8959  000168  EC83  F018         	call	_printRTC	;wreg free
  8960                           
  8961                           ;UI.c: 101: }
  8962                           ;UI.c: 102: }
  8963                           ;UI.c: 103: while(logstate){
  8964  00016C  D3AF               	goto	l9690
  8965  00016E                     l9386:
  8966                           
  8967                           ;UI.c: 105: if(!log_completion){
  8968  00016E  0100               	movlb	0	; () banked
  8969  000170  51F0               	movf	_log_completion& (0+255),w,b
  8970  000172  0100               	movlb	0	; () banked
  8971  000174  11F1               	iorwf	(_log_completion+1)& (0+255),w,b
  8972  000176  A4D8               	btfss	status,2,c
  8973  000178  D041               	goto	l9416
  8974                           
  8975                           ; BSR set to: 0
  8976                           ;UI.c: 106: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8977  00017A  0E01               	movlw	1
  8978  00017C  ECB1  F02E         	call	_lcdInst
  8979  000180  0E68               	movlw	104
  8980  000182  0100               	movlb	0	; () banked
  8981  000184  6FC4               	movwf	??_UI& (0+255),b
  8982  000186  0EE4               	movlw	228
  8983  000188                     u10637:
  8984  000188  2EE8               	decfsz	wreg,f,c
  8985  00018A  D7FE               	bra	u10637
  8986  00018C  2FC4               	decfsz	??_UI& (0+255),f,b
  8987  00018E  D7FC               	bra	u10637
  8988  000190  F000               	nop	
  8989                           
  8990                           ;UI.c: 107: lcdInst(0b10000000);;
  8991  000192  0E80               	movlw	128
  8992  000194  ECB1  F02E         	call	_lcdInst
  8993                           
  8994                           ;UI.c: 108: printf("-- LOG %2d HERE--", log);
  8995  000198  0E51               	movlw	low STR_3
  8996  00019A  0100               	movlb	0	; () banked
  8997  00019C  6F8E               	movwf	printf@f& (0+255),b
  8998  00019E  0EFB               	movlw	high STR_3
  8999  0001A0  0100               	movlb	0	; () banked
  9000  0001A2  6F8F               	movwf	(printf@f+1)& (0+255),b
  9001  0001A4  C0EE  F090         	movff	_log,?_printf+2
  9002  0001A8  C0EF  F091         	movff	_log+1,?_printf+3
  9003  0001AC  EC0C  F00E         	call	_printf	;wreg free
  9004                           
  9005                           ;UI.c: 109: lcdInst(0b11000000);;
  9006  0001B0  0EC0               	movlw	192
  9007  0001B2  ECB1  F02E         	call	_lcdInst
  9008                           
  9009                           ;UI.c: 110: printf("DIDN'T COMPLETE");
  9010  0001B6  0E5D               	movlw	low STR_4
  9011  0001B8  0100               	movlb	0	; () banked
  9012  0001BA  6F8E               	movwf	printf@f& (0+255),b
  9013  0001BC  0EFE               	movlw	high STR_4
  9014  0001BE  0100               	movlb	0	; () banked
  9015  0001C0  6F8F               	movwf	(printf@f+1)& (0+255),b
  9016  0001C2  EC0C  F00E         	call	_printf	;wreg free
  9017  0001C6                     l9400:
  9018  0001C6  0E00               	movlw	0
  9019  0001C8  0100               	movlb	0	; () banked
  9020  0001CA  6FC9               	movwf	UI@i_412& (0+255),b
  9021  0001CC                     l9402:
  9022                           
  9023                           ; BSR set to: 0
  9024  0001CC  0E63               	movlw	99
  9025  0001CE  0100               	movlb	0	; () banked
  9026  0001D0  65C9               	cpfsgt	UI@i_412& (0+255),b
  9027  0001D2  D001               	goto	l9406
  9028  0001D4  D00C               	goto	l9410
  9029  0001D6                     l9406:
  9030                           
  9031                           ; BSR set to: 0
  9032  0001D6  0E68               	movlw	104
  9033  0001D8  0100               	movlb	0	; () banked
  9034  0001DA  6FC4               	movwf	??_UI& (0+255),b
  9035  0001DC  0EE4               	movlw	228
  9036  0001DE                     u10647:
  9037  0001DE  2EE8               	decfsz	wreg,f,c
  9038  0001E0  D7FE               	bra	u10647
  9039  0001E2  2FC4               	decfsz	??_UI& (0+255),f,b
  9040  0001E4  D7FC               	bra	u10647
  9041  0001E6  F000               	nop	
  9042  0001E8  0100               	movlb	0	; () banked
  9043  0001EA  2BC9               	incf	UI@i_412& (0+255),f,b
  9044  0001EC  D7EF               	goto	l9402
  9045  0001EE                     l9410:
  9046                           
  9047                           ; BSR set to: 0
  9048  0001EE  0100               	movlb	0	; () banked
  9049  0001F0  51F8               	movf	_logstate& (0+255),w,b
  9050  0001F2  0100               	movlb	0	; () banked
  9051  0001F4  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9052  0001F6  B4D8               	btfsc	status,2,c
  9053  0001F8  0012               	return	
  9054  0001FA  D7E5               	goto	l9400
  9055  0001FC                     l9416:
  9056                           
  9057                           ; BSR set to: 0
  9058                           ;UI.c: 114: else{
  9059                           ;UI.c: 115: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  9060  0001FC  0E01               	movlw	1
  9061  0001FE  ECB1  F02E         	call	_lcdInst
  9062  000202  0E68               	movlw	104
  9063  000204  0100               	movlb	0	; () banked
  9064  000206  6FC4               	movwf	??_UI& (0+255),b
  9065  000208  0EE4               	movlw	228
  9066  00020A                     u10657:
  9067  00020A  2EE8               	decfsz	wreg,f,c
  9068  00020C  D7FE               	bra	u10657
  9069  00020E  2FC4               	decfsz	??_UI& (0+255),f,b
  9070  000210  D7FC               	bra	u10657
  9071  000212  F000               	nop	
  9072                           
  9073                           ;UI.c: 116: lcdInst(0b10000000);;
  9074  000214  0E80               	movlw	128
  9075  000216  ECB1  F02E         	call	_lcdInst
  9076                           
  9077                           ;UI.c: 117: printf("-- LOG %2d HERE--", log);
  9078  00021A  0E51               	movlw	low STR_3
  9079  00021C  0100               	movlb	0	; () banked
  9080  00021E  6F8E               	movwf	printf@f& (0+255),b
  9081  000220  0EFB               	movlw	high STR_3
  9082  000222  0100               	movlb	0	; () banked
  9083  000224  6F8F               	movwf	(printf@f+1)& (0+255),b
  9084  000226  C0EE  F090         	movff	_log,?_printf+2
  9085  00022A  C0EF  F091         	movff	_log+1,?_printf+3
  9086  00022E  EC0C  F00E         	call	_printf	;wreg free
  9087                           
  9088                           ;UI.c: 118: lcdInst(0b11000000);;
  9089  000232  0EC0               	movlw	192
  9090  000234  ECB1  F02E         	call	_lcdInst
  9091                           
  9092                           ;UI.c: 119: printf("PAUSE < | BACK >");
  9093  000238  0ED9               	movlw	low STR_6
  9094  00023A  0100               	movlb	0	; () banked
  9095  00023C  6F8E               	movwf	printf@f& (0+255),b
  9096  00023E  0EFD               	movlw	high STR_6
  9097  000240  0100               	movlb	0	; () banked
  9098  000242  6F8F               	movwf	(printf@f+1)& (0+255),b
  9099  000244  EC0C  F00E         	call	_printf	;wreg free
  9100                           
  9101                           ;UI.c: 121: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9102  000248  0E00               	movlw	0
  9103  00024A  0100               	movlb	0	; () banked
  9104  00024C  6FCA               	movwf	UI@i_415& (0+255),b
  9105  00024E                     l9430:
  9106                           
  9107                           ; BSR set to: 0
  9108  00024E  0E63               	movlw	99
  9109  000250  0100               	movlb	0	; () banked
  9110  000252  65CA               	cpfsgt	UI@i_415& (0+255),b
  9111  000254  D001               	goto	l9434
  9112  000256  D00C               	goto	l9438
  9113  000258                     l9434:
  9114                           
  9115                           ; BSR set to: 0
  9116  000258  0E68               	movlw	104
  9117  00025A  0100               	movlb	0	; () banked
  9118  00025C  6FC4               	movwf	??_UI& (0+255),b
  9119  00025E  0EE4               	movlw	228
  9120  000260                     u10667:
  9121  000260  2EE8               	decfsz	wreg,f,c
  9122  000262  D7FE               	bra	u10667
  9123  000264  2FC4               	decfsz	??_UI& (0+255),f,b
  9124  000266  D7FC               	bra	u10667
  9125  000268  F000               	nop	
  9126  00026A  0100               	movlb	0	; () banked
  9127  00026C  2BCA               	incf	UI@i_415& (0+255),f,b
  9128  00026E  D7EF               	goto	l9430
  9129  000270                     l9438:
  9130                           
  9131                           ; BSR set to: 0
  9132  000270  0100               	movlb	0	; () banked
  9133  000272  51F8               	movf	_logstate& (0+255),w,b
  9134  000274  0100               	movlb	0	; () banked
  9135  000276  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9136  000278  B4D8               	btfsc	status,2,c
  9137  00027A  0012               	return	
  9138                           
  9139                           ; BSR set to: 0
  9140                           ;UI.c: 122: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9141                           
  9142                           ; BSR set to: 0
  9143                           
  9144                           ; BSR set to: 0
  9145  00027C  0E00               	movlw	0
  9146  00027E  0100               	movlb	0	; () banked
  9147  000280  6FCB               	movwf	UI@i_416& (0+255),b
  9148  000282                     l9444:
  9149                           
  9150                           ; BSR set to: 0
  9151  000282  0E63               	movlw	99
  9152  000284  0100               	movlb	0	; () banked
  9153  000286  65CB               	cpfsgt	UI@i_416& (0+255),b
  9154  000288  D001               	goto	l9448
  9155  00028A  D00C               	goto	l9452
  9156  00028C                     l9448:
  9157                           
  9158                           ; BSR set to: 0
  9159  00028C  0E68               	movlw	104
  9160  00028E  0100               	movlb	0	; () banked
  9161  000290  6FC4               	movwf	??_UI& (0+255),b
  9162  000292  0EE4               	movlw	228
  9163  000294                     u10677:
  9164  000294  2EE8               	decfsz	wreg,f,c
  9165  000296  D7FE               	bra	u10677
  9166  000298  2FC4               	decfsz	??_UI& (0+255),f,b
  9167  00029A  D7FC               	bra	u10677
  9168  00029C  F000               	nop	
  9169  00029E  0100               	movlb	0	; () banked
  9170  0002A0  2BCB               	incf	UI@i_416& (0+255),f,b
  9171  0002A2  D7EF               	goto	l9444
  9172  0002A4                     l9452:
  9173                           
  9174                           ; BSR set to: 0
  9175  0002A4  0100               	movlb	0	; () banked
  9176  0002A6  51F8               	movf	_logstate& (0+255),w,b
  9177  0002A8  0100               	movlb	0	; () banked
  9178  0002AA  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9179  0002AC  B4D8               	btfsc	status,2,c
  9180  0002AE  0012               	return	
  9181                           
  9182                           ; BSR set to: 0
  9183                           ;UI.c: 124: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  9184                           
  9185                           ; BSR set to: 0
  9186                           
  9187                           ; BSR set to: 0
  9188  0002B0  0E01               	movlw	1
  9189  0002B2  ECB1  F02E         	call	_lcdInst
  9190  0002B6  0E68               	movlw	104
  9191  0002B8  0100               	movlb	0	; () banked
  9192  0002BA  6FC4               	movwf	??_UI& (0+255),b
  9193  0002BC  0EE4               	movlw	228
  9194  0002BE                     u10687:
  9195  0002BE  2EE8               	decfsz	wreg,f,c
  9196  0002C0  D7FE               	bra	u10687
  9197  0002C2  2FC4               	decfsz	??_UI& (0+255),f,b
  9198  0002C4  D7FC               	bra	u10687
  9199  0002C6  F000               	nop	
  9200                           
  9201                           ;UI.c: 125: lcdInst(0b10000000);;
  9202  0002C8  0E80               	movlw	128
  9203  0002CA  ECB1  F02E         	call	_lcdInst
  9204                           
  9205                           ;UI.c: 126: printf("START:");
  9206  0002CE  0EC3               	movlw	low STR_7
  9207  0002D0  0100               	movlb	0	; () banked
  9208  0002D2  6F8E               	movwf	printf@f& (0+255),b
  9209  0002D4  0EFF               	movlw	high STR_7
  9210  0002D6  0100               	movlb	0	; () banked
  9211  0002D8  6F8F               	movwf	(printf@f+1)& (0+255),b
  9212  0002DA  EC0C  F00E         	call	_printf	;wreg free
  9213                           
  9214                           ;UI.c: 127: lcdInst(0b11000000);;
  9215  0002DE  0EC0               	movlw	192
  9216  0002E0  ECB1  F02E         	call	_lcdInst
  9217                           
  9218                           ;UI.c: 128: char month[] = "MMM";
  9219  0002E4  C14D  F0D6         	movff	UI@F3248,UI@month
  9220  0002E8  C14E  F0D7         	movff	UI@F3248+1,UI@month+1
  9221  0002EC  C14F  F0D8         	movff	UI@F3248+2,UI@month+2
  9222  0002F0  C150  F0D9         	movff	UI@F3248+3,UI@month+3
  9223                           
  9224                           ;UI.c: 129: switch(log_startTime[5]){
  9225  0002F4  D0C3               	goto	l9496
  9226  0002F6                     l9468:
  9227                           
  9228                           ;UI.c: 131: strcpy(month, "JAN");
  9229  0002F6  0ED6               	movlw	low UI@month
  9230  0002F8  0100               	movlb	0	; () banked
  9231  0002FA  6F80               	movwf	strcpy@to& (0+255),b
  9232  0002FC  0E00               	movlw	high UI@month
  9233  0002FE  0100               	movlb	0	; () banked
  9234  000300  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9235  000302  0EDA               	movlw	low STR_8
  9236  000304  0100               	movlb	0	; () banked
  9237  000306  6F82               	movwf	strcpy@from& (0+255),b
  9238  000308  0EFF               	movlw	high STR_8
  9239  00030A  0100               	movlb	0	; () banked
  9240  00030C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9241  00030E  EC00  F02C         	call	_strcpy	;wreg free
  9242                           
  9243                           ;UI.c: 132: break;
  9244  000312  D0E6               	goto	l9498
  9245  000314                     l9470:
  9246                           
  9247                           ;UI.c: 134: strcpy(month, "FEB");
  9248  000314  0ED6               	movlw	low UI@month
  9249  000316  0100               	movlb	0	; () banked
  9250  000318  6F80               	movwf	strcpy@to& (0+255),b
  9251  00031A  0E00               	movlw	high UI@month
  9252  00031C  0100               	movlb	0	; () banked
  9253  00031E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9254  000320  0ECA               	movlw	low STR_9
  9255  000322  0100               	movlb	0	; () banked
  9256  000324  6F82               	movwf	strcpy@from& (0+255),b
  9257  000326  0EFF               	movlw	high STR_9
  9258  000328  0100               	movlb	0	; () banked
  9259  00032A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9260  00032C  EC00  F02C         	call	_strcpy	;wreg free
  9261                           
  9262                           ;UI.c: 135: break;
  9263  000330  D0D7               	goto	l9498
  9264  000332                     l9472:
  9265                           
  9266                           ;UI.c: 137: strcpy(month, "MAR");
  9267  000332  0ED6               	movlw	low UI@month
  9268  000334  0100               	movlb	0	; () banked
  9269  000336  6F80               	movwf	strcpy@to& (0+255),b
  9270  000338  0E00               	movlw	high UI@month
  9271  00033A  0100               	movlb	0	; () banked
  9272  00033C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9273  00033E  0EE6               	movlw	low STR_10
  9274  000340  0100               	movlb	0	; () banked
  9275  000342  6F82               	movwf	strcpy@from& (0+255),b
  9276  000344  0EFF               	movlw	high STR_10
  9277  000346  0100               	movlb	0	; () banked
  9278  000348  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9279  00034A  EC00  F02C         	call	_strcpy	;wreg free
  9280                           
  9281                           ;UI.c: 138: break;
  9282  00034E  D0C8               	goto	l9498
  9283  000350                     l9474:
  9284                           
  9285                           ;UI.c: 140: strcpy(month, "APR");
  9286  000350  0ED6               	movlw	low UI@month
  9287  000352  0100               	movlb	0	; () banked
  9288  000354  6F80               	movwf	strcpy@to& (0+255),b
  9289  000356  0E00               	movlw	high UI@month
  9290  000358  0100               	movlb	0	; () banked
  9291  00035A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9292  00035C  0EEA               	movlw	low STR_11
  9293  00035E  0100               	movlb	0	; () banked
  9294  000360  6F82               	movwf	strcpy@from& (0+255),b
  9295  000362  0EFF               	movlw	high STR_11
  9296  000364  0100               	movlb	0	; () banked
  9297  000366  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9298  000368  EC00  F02C         	call	_strcpy	;wreg free
  9299                           
  9300                           ;UI.c: 141: break;
  9301  00036C  D0B9               	goto	l9498
  9302  00036E                     l9476:
  9303                           
  9304                           ;UI.c: 143: strcpy(month, "MAY");
  9305  00036E  0ED6               	movlw	low UI@month
  9306  000370  0100               	movlb	0	; () banked
  9307  000372  6F80               	movwf	strcpy@to& (0+255),b
  9308  000374  0E00               	movlw	high UI@month
  9309  000376  0100               	movlb	0	; () banked
  9310  000378  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9311  00037A  0EFA               	movlw	low STR_12
  9312  00037C  0100               	movlb	0	; () banked
  9313  00037E  6F82               	movwf	strcpy@from& (0+255),b
  9314  000380  0EFF               	movlw	high STR_12
  9315  000382  0100               	movlb	0	; () banked
  9316  000384  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9317  000386  EC00  F02C         	call	_strcpy	;wreg free
  9318                           
  9319                           ;UI.c: 144: break;
  9320  00038A  D0AA               	goto	l9498
  9321  00038C                     l9478:
  9322                           
  9323                           ;UI.c: 146: strcpy(month, "JUN");
  9324  00038C  0ED6               	movlw	low UI@month
  9325  00038E  0100               	movlb	0	; () banked
  9326  000390  6F80               	movwf	strcpy@to& (0+255),b
  9327  000392  0E00               	movlw	high UI@month
  9328  000394  0100               	movlb	0	; () banked
  9329  000396  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9330  000398  0EDE               	movlw	low STR_13
  9331  00039A  0100               	movlb	0	; () banked
  9332  00039C  6F82               	movwf	strcpy@from& (0+255),b
  9333  00039E  0EFF               	movlw	high STR_13
  9334  0003A0  0100               	movlb	0	; () banked
  9335  0003A2  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9336  0003A4  EC00  F02C         	call	_strcpy	;wreg free
  9337                           
  9338                           ;UI.c: 147: break;
  9339  0003A8  D09B               	goto	l9498
  9340  0003AA                     l9480:
  9341                           
  9342                           ;UI.c: 149: strcpy(month, "JUL");
  9343  0003AA  0ED6               	movlw	low UI@month
  9344  0003AC  0100               	movlb	0	; () banked
  9345  0003AE  6F80               	movwf	strcpy@to& (0+255),b
  9346  0003B0  0E00               	movlw	high UI@month
  9347  0003B2  0100               	movlb	0	; () banked
  9348  0003B4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9349  0003B6  0ED6               	movlw	low STR_14
  9350  0003B8  0100               	movlb	0	; () banked
  9351  0003BA  6F82               	movwf	strcpy@from& (0+255),b
  9352  0003BC  0EFF               	movlw	high STR_14
  9353  0003BE  0100               	movlb	0	; () banked
  9354  0003C0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9355  0003C2  EC00  F02C         	call	_strcpy	;wreg free
  9356                           
  9357                           ;UI.c: 150: break;
  9358  0003C6  D08C               	goto	l9498
  9359  0003C8                     l9482:
  9360                           
  9361                           ;UI.c: 152: strcpy(month, "AUG");
  9362  0003C8  0ED6               	movlw	low UI@month
  9363  0003CA  0100               	movlb	0	; () banked
  9364  0003CC  6F80               	movwf	strcpy@to& (0+255),b
  9365  0003CE  0E00               	movlw	high UI@month
  9366  0003D0  0100               	movlb	0	; () banked
  9367  0003D2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9368  0003D4  0ED2               	movlw	low STR_15
  9369  0003D6  0100               	movlb	0	; () banked
  9370  0003D8  6F82               	movwf	strcpy@from& (0+255),b
  9371  0003DA  0EFF               	movlw	high STR_15
  9372  0003DC  0100               	movlb	0	; () banked
  9373  0003DE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9374  0003E0  EC00  F02C         	call	_strcpy	;wreg free
  9375                           
  9376                           ;UI.c: 153: break;
  9377  0003E4  D07D               	goto	l9498
  9378  0003E6                     l9484:
  9379                           
  9380                           ;UI.c: 155: strcpy(month, "SEP");
  9381  0003E6  0ED6               	movlw	low UI@month
  9382  0003E8  0100               	movlb	0	; () banked
  9383  0003EA  6F80               	movwf	strcpy@to& (0+255),b
  9384  0003EC  0E00               	movlw	high UI@month
  9385  0003EE  0100               	movlb	0	; () banked
  9386  0003F0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9387  0003F2  0EE2               	movlw	low STR_16
  9388  0003F4  0100               	movlb	0	; () banked
  9389  0003F6  6F82               	movwf	strcpy@from& (0+255),b
  9390  0003F8  0EFF               	movlw	high STR_16
  9391  0003FA  0100               	movlb	0	; () banked
  9392  0003FC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9393  0003FE  EC00  F02C         	call	_strcpy	;wreg free
  9394                           
  9395                           ;UI.c: 156: break;
  9396  000402  D06E               	goto	l9498
  9397  000404                     l9486:
  9398                           
  9399                           ;UI.c: 158: strcpy(month, "OCT");
  9400  000404  0ED6               	movlw	low UI@month
  9401  000406  0100               	movlb	0	; () banked
  9402  000408  6F80               	movwf	strcpy@to& (0+255),b
  9403  00040A  0E00               	movlw	high UI@month
  9404  00040C  0100               	movlb	0	; () banked
  9405  00040E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9406  000410  0EF2               	movlw	low STR_17
  9407  000412  0100               	movlb	0	; () banked
  9408  000414  6F82               	movwf	strcpy@from& (0+255),b
  9409  000416  0EFF               	movlw	high STR_17
  9410  000418  0100               	movlb	0	; () banked
  9411  00041A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9412  00041C  EC00  F02C         	call	_strcpy	;wreg free
  9413                           
  9414                           ;UI.c: 159: break;
  9415  000420  D05F               	goto	l9498
  9416  000422                     l9488:
  9417                           
  9418                           ;UI.c: 161: strcpy(month, "NOV");
  9419  000422  0ED6               	movlw	low UI@month
  9420  000424  0100               	movlb	0	; () banked
  9421  000426  6F80               	movwf	strcpy@to& (0+255),b
  9422  000428  0E00               	movlw	high UI@month
  9423  00042A  0100               	movlb	0	; () banked
  9424  00042C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9425  00042E  0EF6               	movlw	low STR_18
  9426  000430  0100               	movlb	0	; () banked
  9427  000432  6F82               	movwf	strcpy@from& (0+255),b
  9428  000434  0EFF               	movlw	high STR_18
  9429  000436  0100               	movlb	0	; () banked
  9430  000438  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9431  00043A  EC00  F02C         	call	_strcpy	;wreg free
  9432                           
  9433                           ;UI.c: 162: break;
  9434  00043E  D050               	goto	l9498
  9435  000440                     l9490:
  9436                           
  9437                           ;UI.c: 164: strcpy(month, "DEC");
  9438  000440  0ED6               	movlw	low UI@month
  9439  000442  0100               	movlb	0	; () banked
  9440  000444  6F80               	movwf	strcpy@to& (0+255),b
  9441  000446  0E00               	movlw	high UI@month
  9442  000448  0100               	movlb	0	; () banked
  9443  00044A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9444  00044C  0ECE               	movlw	low STR_19
  9445  00044E  0100               	movlb	0	; () banked
  9446  000450  6F82               	movwf	strcpy@from& (0+255),b
  9447  000452  0EFF               	movlw	high STR_19
  9448  000454  0100               	movlb	0	; () banked
  9449  000456  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9450  000458  EC00  F02C         	call	_strcpy	;wreg free
  9451                           
  9452                           ;UI.c: 165: break;
  9453  00045C  D041               	goto	l9498
  9454  00045E                     l9492:
  9455                           
  9456                           ;UI.c: 167: strcpy(month, "ERR");
  9457  00045E  0ED6               	movlw	low UI@month
  9458  000460  0100               	movlb	0	; () banked
  9459  000462  6F80               	movwf	strcpy@to& (0+255),b
  9460  000464  0E00               	movlw	high UI@month
  9461  000466  0100               	movlb	0	; () banked
  9462  000468  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9463  00046A  0EEE               	movlw	low STR_20
  9464  00046C  0100               	movlb	0	; () banked
  9465  00046E  6F82               	movwf	strcpy@from& (0+255),b
  9466  000470  0EFF               	movlw	high STR_20
  9467  000472  0100               	movlb	0	; () banked
  9468  000474  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9469  000476  EC00  F02C         	call	_strcpy	;wreg free
  9470                           
  9471                           ;UI.c: 169: }
  9472                           
  9473                           ;UI.c: 168: break;
  9474  00047A  D032               	goto	l9498
  9475  00047C                     l9496:
  9476  00047C  EE21  F00A         	lfsr	2,_log_startTime+10
  9477  000480  CFDE F0C4          	movff	postinc2,??_UI
  9478  000484  CFDD F0C5          	movff	postdec2,??_UI+1
  9479                           
  9480                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9481                           ; Switch size 1, requested type "space"
  9482                           ; Number of cases is 1, Range of values is 0 to 0
  9483                           ; switch strategies available:
  9484                           ; Name         Instructions Cycles
  9485                           ; simple_byte            4     3 (average)
  9486                           ;	Chosen strategy is simple_byte
  9487  000488  0100               	movlb	0	; () banked
  9488  00048A  51C5               	movf	(??_UI+1)& (0+255),w,b
  9489  00048C  0A00               	xorlw	0	; case 0
  9490  00048E  A4D8               	btfss	status,2,c
  9491  000490  D7E6               	goto	l9492
  9492                           
  9493                           ; BSR set to: 0
  9494                           ; Switch size 1, requested type "space"
  9495                           ; Number of cases is 12, Range of values is 1 to 12
  9496                           ; switch strategies available:
  9497                           ; Name         Instructions Cycles
  9498                           ; simple_byte           37    19 (average)
  9499                           ;	Chosen strategy is simple_byte
  9500  000492  0100               	movlb	0	; () banked
  9501  000494  51C4               	movf	??_UI& (0+255),w,b
  9502  000496  0A01               	xorlw	1	; case 1
  9503  000498  B4D8               	btfsc	status,2,c
  9504  00049A  D72D               	goto	l9468
  9505  00049C  0A03               	xorlw	3	; case 2
  9506  00049E  B4D8               	btfsc	status,2,c
  9507  0004A0  D739               	goto	l9470
  9508  0004A2  0A01               	xorlw	1	; case 3
  9509  0004A4  B4D8               	btfsc	status,2,c
  9510  0004A6  D745               	goto	l9472
  9511  0004A8  0A07               	xorlw	7	; case 4
  9512  0004AA  B4D8               	btfsc	status,2,c
  9513  0004AC  D751               	goto	l9474
  9514  0004AE  0A01               	xorlw	1	; case 5
  9515  0004B0  B4D8               	btfsc	status,2,c
  9516  0004B2  D75D               	goto	l9476
  9517  0004B4  0A03               	xorlw	3	; case 6
  9518  0004B6  B4D8               	btfsc	status,2,c
  9519  0004B8  D769               	goto	l9478
  9520  0004BA  0A01               	xorlw	1	; case 7
  9521  0004BC  B4D8               	btfsc	status,2,c
  9522  0004BE  D775               	goto	l9480
  9523  0004C0  0A0F               	xorlw	15	; case 8
  9524  0004C2  B4D8               	btfsc	status,2,c
  9525  0004C4  D781               	goto	l9482
  9526  0004C6  0A01               	xorlw	1	; case 9
  9527  0004C8  B4D8               	btfsc	status,2,c
  9528  0004CA  D78D               	goto	l9484
  9529  0004CC  0A03               	xorlw	3	; case 10
  9530  0004CE  B4D8               	btfsc	status,2,c
  9531  0004D0  D799               	goto	l9486
  9532  0004D2  0A01               	xorlw	1	; case 11
  9533  0004D4  B4D8               	btfsc	status,2,c
  9534  0004D6  D7A5               	goto	l9488
  9535  0004D8  0A07               	xorlw	7	; case 12
  9536  0004DA  B4D8               	btfsc	status,2,c
  9537  0004DC  D7B1               	goto	l9490
  9538  0004DE  D7BF               	goto	l9492
  9539  0004E0                     l9498:
  9540                           
  9541                           ;UI.c: 170: printf("%02d%s | %02d:%02d:%02d", log_startTime[4],month,log_startTime[2],lo
      +                          g_startTime[1],log_startTime[0]);
  9542  0004E0  0ECA               	movlw	low STR_21
  9543  0004E2  0100               	movlb	0	; () banked
  9544  0004E4  6F8E               	movwf	printf@f& (0+255),b
  9545  0004E6  0EFA               	movlw	high STR_21
  9546  0004E8  0100               	movlb	0	; () banked
  9547  0004EA  6F8F               	movwf	(printf@f+1)& (0+255),b
  9548  0004EC  C108  F090         	movff	_log_startTime+8,?_printf+2
  9549  0004F0  C109  F091         	movff	_log_startTime+9,?_printf+3
  9550  0004F4  0ED6               	movlw	low UI@month
  9551  0004F6  0100               	movlb	0	; () banked
  9552  0004F8  6F92               	movwf	(?_printf+4)& (0+255),b
  9553  0004FA  0E00               	movlw	high UI@month
  9554  0004FC  0100               	movlb	0	; () banked
  9555  0004FE  6F93               	movwf	(?_printf+5)& (0+255),b
  9556  000500  C104  F094         	movff	_log_startTime+4,?_printf+6
  9557  000504  C105  F095         	movff	_log_startTime+5,?_printf+7
  9558  000508  C102  F096         	movff	_log_startTime+2,?_printf+8
  9559  00050C  C103  F097         	movff	_log_startTime+3,?_printf+9
  9560  000510  C100  F098         	movff	_log_startTime,?_printf+10
  9561  000514  C101  F099         	movff	_log_startTime+1,?_printf+11
  9562  000518  EC0C  F00E         	call	_printf	;wreg free
  9563                           
  9564                           ;UI.c: 172: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9565  00051C  0E00               	movlw	0
  9566  00051E  0100               	movlb	0	; () banked
  9567  000520  6FCC               	movwf	UI@i_434& (0+255),b
  9568  000522                     l9502:
  9569                           
  9570                           ; BSR set to: 0
  9571  000522  0E63               	movlw	99
  9572  000524  0100               	movlb	0	; () banked
  9573  000526  65CC               	cpfsgt	UI@i_434& (0+255),b
  9574  000528  D001               	goto	l9506
  9575  00052A  D00C               	goto	l9510
  9576  00052C                     l9506:
  9577                           
  9578                           ; BSR set to: 0
  9579  00052C  0E68               	movlw	104
  9580  00052E  0100               	movlb	0	; () banked
  9581  000530  6FC4               	movwf	??_UI& (0+255),b
  9582  000532  0EE4               	movlw	228
  9583  000534                     u10697:
  9584  000534  2EE8               	decfsz	wreg,f,c
  9585  000536  D7FE               	bra	u10697
  9586  000538  2FC4               	decfsz	??_UI& (0+255),f,b
  9587  00053A  D7FC               	bra	u10697
  9588  00053C  F000               	nop	
  9589  00053E  0100               	movlb	0	; () banked
  9590  000540  2BCC               	incf	UI@i_434& (0+255),f,b
  9591  000542  D7EF               	goto	l9502
  9592  000544                     l9510:
  9593                           
  9594                           ; BSR set to: 0
  9595  000544  0100               	movlb	0	; () banked
  9596  000546  51F8               	movf	_logstate& (0+255),w,b
  9597  000548  0100               	movlb	0	; () banked
  9598  00054A  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9599  00054C  B4D8               	btfsc	status,2,c
  9600  00054E  0012               	return	
  9601                           
  9602                           ; BSR set to: 0
  9603                           ;UI.c: 173: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9604                           
  9605                           ; BSR set to: 0
  9606                           
  9607                           ; BSR set to: 0
  9608  000550  0E00               	movlw	0
  9609  000552  0100               	movlb	0	; () banked
  9610  000554  6FCD               	movwf	UI@i_435& (0+255),b
  9611  000556                     l9516:
  9612                           
  9613                           ; BSR set to: 0
  9614  000556  0E63               	movlw	99
  9615  000558  0100               	movlb	0	; () banked
  9616  00055A  65CD               	cpfsgt	UI@i_435& (0+255),b
  9617  00055C  D001               	goto	l9520
  9618  00055E  D00C               	goto	l9524
  9619  000560                     l9520:
  9620                           
  9621                           ; BSR set to: 0
  9622  000560  0E68               	movlw	104
  9623  000562  0100               	movlb	0	; () banked
  9624  000564  6FC4               	movwf	??_UI& (0+255),b
  9625  000566  0EE4               	movlw	228
  9626  000568                     u10707:
  9627  000568  2EE8               	decfsz	wreg,f,c
  9628  00056A  D7FE               	bra	u10707
  9629  00056C  2FC4               	decfsz	??_UI& (0+255),f,b
  9630  00056E  D7FC               	bra	u10707
  9631  000570  F000               	nop	
  9632  000572  0100               	movlb	0	; () banked
  9633  000574  2BCD               	incf	UI@i_435& (0+255),f,b
  9634  000576  D7EF               	goto	l9516
  9635  000578                     l9524:
  9636                           
  9637                           ; BSR set to: 0
  9638  000578  0100               	movlb	0	; () banked
  9639  00057A  51F8               	movf	_logstate& (0+255),w,b
  9640  00057C  0100               	movlb	0	; () banked
  9641  00057E  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9642  000580  B4D8               	btfsc	status,2,c
  9643  000582  0012               	return	
  9644                           
  9645                           ; BSR set to: 0
  9646                           ;UI.c: 175: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  9647                           
  9648                           ; BSR set to: 0
  9649                           
  9650                           ; BSR set to: 0
  9651  000584  0E01               	movlw	1
  9652  000586  ECB1  F02E         	call	_lcdInst
  9653  00058A  0E68               	movlw	104
  9654  00058C  0100               	movlb	0	; () banked
  9655  00058E  6FC4               	movwf	??_UI& (0+255),b
  9656  000590  0EE4               	movlw	228
  9657  000592                     u10717:
  9658  000592  2EE8               	decfsz	wreg,f,c
  9659  000594  D7FE               	bra	u10717
  9660  000596  2FC4               	decfsz	??_UI& (0+255),f,b
  9661  000598  D7FC               	bra	u10717
  9662  00059A  F000               	nop	
  9663                           
  9664                           ;UI.c: 176: lcdInst(0b10000000);;
  9665  00059C  0E80               	movlw	128
  9666  00059E  ECB1  F02E         	call	_lcdInst
  9667                           
  9668                           ;UI.c: 177: printf("DURATION:");
  9669  0005A2  0E9A               	movlw	low STR_22
  9670  0005A4  0100               	movlb	0	; () banked
  9671  0005A6  6F8E               	movwf	printf@f& (0+255),b
  9672  0005A8  0EFF               	movlw	high STR_22
  9673  0005AA  0100               	movlb	0	; () banked
  9674  0005AC  6F8F               	movwf	(printf@f+1)& (0+255),b
  9675  0005AE  EC0C  F00E         	call	_printf	;wreg free
  9676                           
  9677                           ;UI.c: 178: lcdInst(0b11000000);;
  9678  0005B2  0EC0               	movlw	192
  9679  0005B4  ECB1  F02E         	call	_lcdInst
  9680                           
  9681                           ;UI.c: 179: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  9682  0005B8  0E0E               	movlw	14
  9683  0005BA  0100               	movlb	0	; () banked
  9684  0005BC  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  9685  0005BE  0E10               	movlw	16
  9686  0005C0  6F82               	movwf	___awmod@divisor& (0+255),b
  9687  0005C2  C0F6  F080         	movff	_log_total_time,___awmod@dividend
  9688  0005C6  C0F7  F081         	movff	_log_total_time+1,___awmod@dividend+1
  9689  0005CA  EC66  F026         	call	___awmod	;wreg free
  9690  0005CE  C080  F0C6         	movff	?___awmod,_UI$2428
  9691  0005D2  C081  F0C7         	movff	?___awmod+1,_UI$2428+1
  9692                           
  9693                           ;UI.c: 179: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  9694  0005D6  0E3B               	movlw	low STR_23
  9695  0005D8  0100               	movlb	0	; () banked
  9696  0005DA  6F8E               	movwf	printf@f& (0+255),b
  9697  0005DC  0EFF               	movlw	high STR_23
  9698  0005DE  0100               	movlb	0	; () banked
  9699  0005E0  6F8F               	movwf	(printf@f+1)& (0+255),b
  9700  0005E2  0E0E               	movlw	14
  9701  0005E4  0100               	movlb	0	; () banked
  9702  0005E6  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  9703  0005E8  0E10               	movlw	16
  9704  0005EA  6F82               	movwf	___awmod@divisor& (0+255),b
  9705  0005EC  C0F6  F080         	movff	_log_total_time,___awmod@dividend
  9706  0005F0  C0F7  F081         	movff	_log_total_time+1,___awmod@dividend+1
  9707  0005F4  EC66  F026         	call	___awmod	;wreg free
  9708  0005F8  C080  F086         	movff	?___awmod,___awdiv@dividend
  9709  0005FC  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  9710  000600  0E00               	movlw	0
  9711  000602  0100               	movlb	0	; () banked
  9712  000604  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  9713  000606  0E3C               	movlw	60
  9714  000608  6F88               	movwf	___awdiv@divisor& (0+255),b
  9715  00060A  EC54  F025         	call	___awdiv	;wreg free
  9716  00060E  C086  F090         	movff	?___awdiv,?_printf+2
  9717  000612  C087  F091         	movff	?___awdiv+1,?_printf+3
  9718  000616  C0C6  F080         	movff	_UI$2428,___awmod@dividend
  9719  00061A  C0C7  F081         	movff	_UI$2428+1,___awmod@dividend+1
  9720  00061E  0E00               	movlw	0
  9721  000620  0100               	movlb	0	; () banked
  9722  000622  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  9723  000624  0E3C               	movlw	60
  9724  000626  6F82               	movwf	___awmod@divisor& (0+255),b
  9725  000628  EC66  F026         	call	___awmod	;wreg free
  9726  00062C  C080  F092         	movff	?___awmod,?_printf+4
  9727  000630  C081  F093         	movff	?___awmod+1,?_printf+5
  9728  000634  EC0C  F00E         	call	_printf	;wreg free
  9729                           
  9730                           ;UI.c: 181: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9731  000638  0E00               	movlw	0
  9732  00063A  0100               	movlb	0	; () banked
  9733  00063C  6FCE               	movwf	UI@i_438& (0+255),b
  9734  00063E                     l9544:
  9735                           
  9736                           ; BSR set to: 0
  9737  00063E  0E63               	movlw	99
  9738  000640  0100               	movlb	0	; () banked
  9739  000642  65CE               	cpfsgt	UI@i_438& (0+255),b
  9740  000644  D001               	goto	l9548
  9741  000646  D00C               	goto	l9552
  9742  000648                     l9548:
  9743                           
  9744                           ; BSR set to: 0
  9745  000648  0E68               	movlw	104
  9746  00064A  0100               	movlb	0	; () banked
  9747  00064C  6FC4               	movwf	??_UI& (0+255),b
  9748  00064E  0EE4               	movlw	228
  9749  000650                     u10727:
  9750  000650  2EE8               	decfsz	wreg,f,c
  9751  000652  D7FE               	bra	u10727
  9752  000654  2FC4               	decfsz	??_UI& (0+255),f,b
  9753  000656  D7FC               	bra	u10727
  9754  000658  F000               	nop	
  9755  00065A  0100               	movlb	0	; () banked
  9756  00065C  2BCE               	incf	UI@i_438& (0+255),f,b
  9757  00065E  D7EF               	goto	l9544
  9758  000660                     l9552:
  9759                           
  9760                           ; BSR set to: 0
  9761  000660  0100               	movlb	0	; () banked
  9762  000662  51F8               	movf	_logstate& (0+255),w,b
  9763  000664  0100               	movlb	0	; () banked
  9764  000666  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9765  000668  B4D8               	btfsc	status,2,c
  9766  00066A  0012               	return	
  9767                           
  9768                           ; BSR set to: 0
  9769                           ;UI.c: 182: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9770                           
  9771                           ; BSR set to: 0
  9772                           
  9773                           ; BSR set to: 0
  9774  00066C  0E00               	movlw	0
  9775  00066E  0100               	movlb	0	; () banked
  9776  000670  6FCF               	movwf	UI@i_439& (0+255),b
  9777  000672                     l9558:
  9778                           
  9779                           ; BSR set to: 0
  9780  000672  0E63               	movlw	99
  9781  000674  0100               	movlb	0	; () banked
  9782  000676  65CF               	cpfsgt	UI@i_439& (0+255),b
  9783  000678  D001               	goto	l9562
  9784  00067A  D00C               	goto	l9566
  9785  00067C                     l9562:
  9786                           
  9787                           ; BSR set to: 0
  9788  00067C  0E68               	movlw	104
  9789  00067E  0100               	movlb	0	; () banked
  9790  000680  6FC4               	movwf	??_UI& (0+255),b
  9791  000682  0EE4               	movlw	228
  9792  000684                     u10737:
  9793  000684  2EE8               	decfsz	wreg,f,c
  9794  000686  D7FE               	bra	u10737
  9795  000688  2FC4               	decfsz	??_UI& (0+255),f,b
  9796  00068A  D7FC               	bra	u10737
  9797  00068C  F000               	nop	
  9798  00068E  0100               	movlb	0	; () banked
  9799  000690  2BCF               	incf	UI@i_439& (0+255),f,b
  9800  000692  D7EF               	goto	l9558
  9801  000694                     l9566:
  9802                           
  9803                           ; BSR set to: 0
  9804  000694  0100               	movlb	0	; () banked
  9805  000696  51F8               	movf	_logstate& (0+255),w,b
  9806  000698  0100               	movlb	0	; () banked
  9807  00069A  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9808  00069C  B4D8               	btfsc	status,2,c
  9809  00069E  0012               	return	
  9810                           
  9811                           ; BSR set to: 0
  9812                           ;UI.c: 184: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  9813                           
  9814                           ; BSR set to: 0
  9815                           
  9816                           ; BSR set to: 0
  9817  0006A0  0E01               	movlw	1
  9818  0006A2  ECB1  F02E         	call	_lcdInst
  9819  0006A6  0E68               	movlw	104
  9820  0006A8  0100               	movlb	0	; () banked
  9821  0006AA  6FC4               	movwf	??_UI& (0+255),b
  9822  0006AC  0EE4               	movlw	228
  9823  0006AE                     u10747:
  9824  0006AE  2EE8               	decfsz	wreg,f,c
  9825  0006B0  D7FE               	bra	u10747
  9826  0006B2  2FC4               	decfsz	??_UI& (0+255),f,b
  9827  0006B4  D7FC               	bra	u10747
  9828  0006B6  F000               	nop	
  9829                           
  9830                           ;UI.c: 185: lcdInst(0b10000000);;
  9831  0006B8  0E80               	movlw	128
  9832  0006BA  ECB1  F02E         	call	_lcdInst
  9833                           
  9834                           ;UI.c: 186: printf(" -- POP  CAN -- ");
  9835  0006BE  0E2F               	movlw	low STR_24
  9836  0006C0  0100               	movlb	0	; () banked
  9837  0006C2  6F8E               	movwf	printf@f& (0+255),b
  9838  0006C4  0EFD               	movlw	high STR_24
  9839  0006C6  0100               	movlb	0	; () banked
  9840  0006C8  6F8F               	movwf	(printf@f+1)& (0+255),b
  9841  0006CA  EC0C  F00E         	call	_printf	;wreg free
  9842                           
  9843                           ;UI.c: 187: lcdInst(0b11000000);;
  9844  0006CE  0EC0               	movlw	192
  9845  0006D0  ECB1  F02E         	call	_lcdInst
  9846                           
  9847                           ;UI.c: 188: printf("NTAB: %d|TAB: %d", log_count_pop_no_tab, log_count_pop_w_tab);
  9848  0006D4  0E0C               	movlw	low STR_25
  9849  0006D6  0100               	movlb	0	; () banked
  9850  0006D8  6F8E               	movwf	printf@f& (0+255),b
  9851  0006DA  0EFE               	movlw	high STR_25
  9852  0006DC  0100               	movlb	0	; () banked
  9853  0006DE  6F8F               	movwf	(printf@f+1)& (0+255),b
  9854  0006E0  C0F2  F090         	movff	_log_count_pop_no_tab,?_printf+2
  9855  0006E4  C0F3  F091         	movff	_log_count_pop_no_tab+1,?_printf+3
  9856  0006E8  C0F4  F092         	movff	_log_count_pop_w_tab,?_printf+4
  9857  0006EC  C0F5  F093         	movff	_log_count_pop_w_tab+1,?_printf+5
  9858  0006F0  EC0C  F00E         	call	_printf	;wreg free
  9859                           
  9860                           ;UI.c: 190: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9861  0006F4  0E00               	movlw	0
  9862  0006F6  0100               	movlb	0	; () banked
  9863  0006F8  6FD0               	movwf	UI@i_442& (0+255),b
  9864  0006FA                     l9584:
  9865                           
  9866                           ; BSR set to: 0
  9867  0006FA  0E63               	movlw	99
  9868  0006FC  0100               	movlb	0	; () banked
  9869  0006FE  65D0               	cpfsgt	UI@i_442& (0+255),b
  9870  000700  D001               	goto	l9588
  9871  000702  D00C               	goto	l9592
  9872  000704                     l9588:
  9873                           
  9874                           ; BSR set to: 0
  9875  000704  0E68               	movlw	104
  9876  000706  0100               	movlb	0	; () banked
  9877  000708  6FC4               	movwf	??_UI& (0+255),b
  9878  00070A  0EE4               	movlw	228
  9879  00070C                     u10757:
  9880  00070C  2EE8               	decfsz	wreg,f,c
  9881  00070E  D7FE               	bra	u10757
  9882  000710  2FC4               	decfsz	??_UI& (0+255),f,b
  9883  000712  D7FC               	bra	u10757
  9884  000714  F000               	nop	
  9885  000716  0100               	movlb	0	; () banked
  9886  000718  2BD0               	incf	UI@i_442& (0+255),f,b
  9887  00071A  D7EF               	goto	l9584
  9888  00071C                     l9592:
  9889                           
  9890                           ; BSR set to: 0
  9891  00071C  0100               	movlb	0	; () banked
  9892  00071E  51F8               	movf	_logstate& (0+255),w,b
  9893  000720  0100               	movlb	0	; () banked
  9894  000722  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9895  000724  B4D8               	btfsc	status,2,c
  9896  000726  0012               	return	
  9897                           
  9898                           ; BSR set to: 0
  9899                           ;UI.c: 191: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9900                           
  9901                           ; BSR set to: 0
  9902                           
  9903                           ; BSR set to: 0
  9904  000728  0E00               	movlw	0
  9905  00072A  0100               	movlb	0	; () banked
  9906  00072C  6FD1               	movwf	UI@i_443& (0+255),b
  9907  00072E                     l9598:
  9908                           
  9909                           ; BSR set to: 0
  9910  00072E  0E63               	movlw	99
  9911  000730  0100               	movlb	0	; () banked
  9912  000732  65D1               	cpfsgt	UI@i_443& (0+255),b
  9913  000734  D001               	goto	l9602
  9914  000736  D00C               	goto	l9606
  9915  000738                     l9602:
  9916                           
  9917                           ; BSR set to: 0
  9918  000738  0E68               	movlw	104
  9919  00073A  0100               	movlb	0	; () banked
  9920  00073C  6FC4               	movwf	??_UI& (0+255),b
  9921  00073E  0EE4               	movlw	228
  9922  000740                     u10767:
  9923  000740  2EE8               	decfsz	wreg,f,c
  9924  000742  D7FE               	bra	u10767
  9925  000744  2FC4               	decfsz	??_UI& (0+255),f,b
  9926  000746  D7FC               	bra	u10767
  9927  000748  F000               	nop	
  9928  00074A  0100               	movlb	0	; () banked
  9929  00074C  2BD1               	incf	UI@i_443& (0+255),f,b
  9930  00074E  D7EF               	goto	l9598
  9931  000750                     l9606:
  9932                           
  9933                           ; BSR set to: 0
  9934  000750  0100               	movlb	0	; () banked
  9935  000752  51F8               	movf	_logstate& (0+255),w,b
  9936  000754  0100               	movlb	0	; () banked
  9937  000756  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9938  000758  B4D8               	btfsc	status,2,c
  9939  00075A  0012               	return	
  9940                           
  9941                           ; BSR set to: 0
  9942                           ;UI.c: 193: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  9943                           
  9944                           ; BSR set to: 0
  9945                           
  9946                           ; BSR set to: 0
  9947  00075C  0E01               	movlw	1
  9948  00075E  ECB1  F02E         	call	_lcdInst
  9949  000762  0E68               	movlw	104
  9950  000764  0100               	movlb	0	; () banked
  9951  000766  6FC4               	movwf	??_UI& (0+255),b
  9952  000768  0EE4               	movlw	228
  9953  00076A                     u10777:
  9954  00076A  2EE8               	decfsz	wreg,f,c
  9955  00076C  D7FE               	bra	u10777
  9956  00076E  2FC4               	decfsz	??_UI& (0+255),f,b
  9957  000770  D7FC               	bra	u10777
  9958  000772  F000               	nop	
  9959                           
  9960                           ;UI.c: 194: lcdInst(0b10000000);;
  9961  000774  0E80               	movlw	128
  9962  000776  ECB1  F02E         	call	_lcdInst
  9963                           
  9964                           ;UI.c: 195: printf(" -- SOUP CAN -- ");
  9965  00077A  0E40               	movlw	low STR_26
  9966  00077C  0100               	movlb	0	; () banked
  9967  00077E  6F8E               	movwf	printf@f& (0+255),b
  9968  000780  0EFD               	movlw	high STR_26
  9969  000782  0100               	movlb	0	; () banked
  9970  000784  6F8F               	movwf	(printf@f+1)& (0+255),b
  9971  000786  EC0C  F00E         	call	_printf	;wreg free
  9972                           
  9973                           ;UI.c: 196: lcdInst(0b11000000);;
  9974  00078A  0EC0               	movlw	192
  9975  00078C  ECB1  F02E         	call	_lcdInst
  9976                           
  9977                           ;UI.c: 197: printf("NLAB: %d|LAB: %d", log_count_can_no_lab, log_count_can_w_lab);
  9978  000790  0EFB               	movlw	low STR_27
  9979  000792  0100               	movlb	0	; () banked
  9980  000794  6F8E               	movwf	printf@f& (0+255),b
  9981  000796  0EFD               	movlw	high STR_27
  9982  000798  0100               	movlb	0	; () banked
  9983  00079A  6F8F               	movwf	(printf@f+1)& (0+255),b
  9984  00079C  C141  F090         	movff	_log_count_can_no_lab,?_printf+2
  9985  0007A0  C142  F091         	movff	_log_count_can_no_lab+1,?_printf+3
  9986  0007A4  C143  F092         	movff	_log_count_can_w_lab,?_printf+4
  9987  0007A8  C144  F093         	movff	_log_count_can_w_lab+1,?_printf+5
  9988  0007AC  EC0C  F00E         	call	_printf	;wreg free
  9989                           
  9990                           ;UI.c: 199: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9991  0007B0  0E00               	movlw	0
  9992  0007B2  0100               	movlb	0	; () banked
  9993  0007B4  6FD2               	movwf	UI@i_446& (0+255),b
  9994  0007B6                     l9624:
  9995                           
  9996                           ; BSR set to: 0
  9997  0007B6  0E63               	movlw	99
  9998  0007B8  0100               	movlb	0	; () banked
  9999  0007BA  65D2               	cpfsgt	UI@i_446& (0+255),b
 10000  0007BC  D001               	goto	l9628
 10001  0007BE  D00C               	goto	l9632
 10002  0007C0                     l9628:
 10003                           
 10004                           ; BSR set to: 0
 10005  0007C0  0E68               	movlw	104
 10006  0007C2  0100               	movlb	0	; () banked
 10007  0007C4  6FC4               	movwf	??_UI& (0+255),b
 10008  0007C6  0EE4               	movlw	228
 10009  0007C8                     u10787:
 10010  0007C8  2EE8               	decfsz	wreg,f,c
 10011  0007CA  D7FE               	bra	u10787
 10012  0007CC  2FC4               	decfsz	??_UI& (0+255),f,b
 10013  0007CE  D7FC               	bra	u10787
 10014  0007D0  F000               	nop	
 10015  0007D2  0100               	movlb	0	; () banked
 10016  0007D4  2BD2               	incf	UI@i_446& (0+255),f,b
 10017  0007D6  D7EF               	goto	l9624
 10018  0007D8                     l9632:
 10019                           
 10020                           ; BSR set to: 0
 10021  0007D8  0100               	movlb	0	; () banked
 10022  0007DA  51F8               	movf	_logstate& (0+255),w,b
 10023  0007DC  0100               	movlb	0	; () banked
 10024  0007DE  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 10025  0007E0  B4D8               	btfsc	status,2,c
 10026  0007E2  0012               	return	
 10027                           
 10028                           ; BSR set to: 0
 10029                           ;UI.c: 200: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
 10030                           
 10031                           ; BSR set to: 0
 10032                           
 10033                           ; BSR set to: 0
 10034  0007E4  0E00               	movlw	0
 10035  0007E6  0100               	movlb	0	; () banked
 10036  0007E8  6FD3               	movwf	UI@i_447& (0+255),b
 10037  0007EA                     l9638:
 10038                           
 10039                           ; BSR set to: 0
 10040  0007EA  0E63               	movlw	99
 10041  0007EC  0100               	movlb	0	; () banked
 10042  0007EE  65D3               	cpfsgt	UI@i_447& (0+255),b
 10043  0007F0  D001               	goto	l9642
 10044  0007F2  D00C               	goto	l9646
 10045  0007F4                     l9642:
 10046                           
 10047                           ; BSR set to: 0
 10048  0007F4  0E68               	movlw	104
 10049  0007F6  0100               	movlb	0	; () banked
 10050  0007F8  6FC4               	movwf	??_UI& (0+255),b
 10051  0007FA  0EE4               	movlw	228
 10052  0007FC                     u10797:
 10053  0007FC  2EE8               	decfsz	wreg,f,c
 10054  0007FE  D7FE               	bra	u10797
 10055  000800  2FC4               	decfsz	??_UI& (0+255),f,b
 10056  000802  D7FC               	bra	u10797
 10057  000804  F000               	nop	
 10058  000806  0100               	movlb	0	; () banked
 10059  000808  2BD3               	incf	UI@i_447& (0+255),f,b
 10060  00080A  D7EF               	goto	l9638
 10061  00080C                     l9646:
 10062                           
 10063                           ; BSR set to: 0
 10064  00080C  0100               	movlb	0	; () banked
 10065  00080E  51F8               	movf	_logstate& (0+255),w,b
 10066  000810  0100               	movlb	0	; () banked
 10067  000812  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 10068  000814  B4D8               	btfsc	status,2,c
 10069  000816  0012               	return	
 10070                           
 10071                           ; BSR set to: 0
 10072                           ;UI.c: 202: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
 10073                           
 10074                           ; BSR set to: 0
 10075                           
 10076                           ; BSR set to: 0
 10077  000818  0E01               	movlw	1
 10078  00081A  ECB1  F02E         	call	_lcdInst
 10079  00081E  0E68               	movlw	104
 10080  000820  0100               	movlb	0	; () banked
 10081  000822  6FC4               	movwf	??_UI& (0+255),b
 10082  000824  0EE4               	movlw	228
 10083  000826                     u10807:
 10084  000826  2EE8               	decfsz	wreg,f,c
 10085  000828  D7FE               	bra	u10807
 10086  00082A  2FC4               	decfsz	??_UI& (0+255),f,b
 10087  00082C  D7FC               	bra	u10807
 10088  00082E  F000               	nop	
 10089                           
 10090                           ;UI.c: 203: lcdInst(0b10000000);;
 10091  000830  0E80               	movlw	128
 10092  000832  ECB1  F02E         	call	_lcdInst
 10093                           
 10094                           ;UI.c: 204: printf("-- TOTAL CANS --");
 10095  000836  0E51               	movlw	low STR_28
 10096  000838  0100               	movlb	0	; () banked
 10097  00083A  6F8E               	movwf	printf@f& (0+255),b
 10098  00083C  0EFD               	movlw	high STR_28
 10099  00083E  0100               	movlb	0	; () banked
 10100  000840  6F8F               	movwf	(printf@f+1)& (0+255),b
 10101  000842  EC0C  F00E         	call	_printf	;wreg free
 10102                           
 10103                           ;UI.c: 205: lcdInst(0b11000000);;
 10104  000846  0EC0               	movlw	192
 10105  000848  ECB1  F02E         	call	_lcdInst
 10106                           
 10107                           ;UI.c: 206: printf("%d", log_count_total);
 10108  00084C  0E09               	movlw	low (STR_27+14)
 10109  00084E  0100               	movlb	0	; () banked
 10110  000850  6F8E               	movwf	printf@f& (0+255),b
 10111  000852  0EFE               	movlw	high (STR_27+14)
 10112  000854  0100               	movlb	0	; () banked
 10113  000856  6F8F               	movwf	(printf@f+1)& (0+255),b
 10114  000858  C145  F090         	movff	_log_count_total,?_printf+2
 10115  00085C  C146  F091         	movff	_log_count_total+1,?_printf+3
 10116  000860  EC0C  F00E         	call	_printf	;wreg free
 10117                           
 10118                           ;UI.c: 208: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
 10119  000864  0E00               	movlw	0
 10120  000866  0100               	movlb	0	; () banked
 10121  000868  6FD4               	movwf	UI@i_450& (0+255),b
 10122  00086A                     l9664:
 10123                           
 10124                           ; BSR set to: 0
 10125  00086A  0E63               	movlw	99
 10126  00086C  0100               	movlb	0	; () banked
 10127  00086E  65D4               	cpfsgt	UI@i_450& (0+255),b
 10128  000870  D001               	goto	l9668
 10129  000872  D00C               	goto	l9672
 10130  000874                     l9668:
 10131                           
 10132                           ; BSR set to: 0
 10133  000874  0E68               	movlw	104
 10134  000876  0100               	movlb	0	; () banked
 10135  000878  6FC4               	movwf	??_UI& (0+255),b
 10136  00087A  0EE4               	movlw	228
 10137  00087C                     u10817:
 10138  00087C  2EE8               	decfsz	wreg,f,c
 10139  00087E  D7FE               	bra	u10817
 10140  000880  2FC4               	decfsz	??_UI& (0+255),f,b
 10141  000882  D7FC               	bra	u10817
 10142  000884  F000               	nop	
 10143  000886  0100               	movlb	0	; () banked
 10144  000888  2BD4               	incf	UI@i_450& (0+255),f,b
 10145  00088A  D7EF               	goto	l9664
 10146  00088C                     l9672:
 10147                           
 10148                           ; BSR set to: 0
 10149  00088C  0100               	movlb	0	; () banked
 10150  00088E  51F8               	movf	_logstate& (0+255),w,b
 10151  000890  0100               	movlb	0	; () banked
 10152  000892  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 10153  000894  B4D8               	btfsc	status,2,c
 10154  000896  0012               	return	
 10155                           
 10156                           ; BSR set to: 0
 10157                           ;UI.c: 209: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
 10158                           
 10159                           ; BSR set to: 0
 10160                           
 10161                           ; BSR set to: 0
 10162  000898  0E00               	movlw	0
 10163  00089A  0100               	movlb	0	; () banked
 10164  00089C  6FD5               	movwf	UI@i_451& (0+255),b
 10165  00089E                     l9678:
 10166                           
 10167                           ; BSR set to: 0
 10168  00089E  0E63               	movlw	99
 10169  0008A0  0100               	movlb	0	; () banked
 10170  0008A2  65D5               	cpfsgt	UI@i_451& (0+255),b
 10171  0008A4  D001               	goto	l9682
 10172  0008A6  D00C               	goto	l9686
 10173  0008A8                     l9682:
 10174                           
 10175                           ; BSR set to: 0
 10176  0008A8  0E68               	movlw	104
 10177  0008AA  0100               	movlb	0	; () banked
 10178  0008AC  6FC4               	movwf	??_UI& (0+255),b
 10179  0008AE  0EE4               	movlw	228
 10180  0008B0                     u10827:
 10181  0008B0  2EE8               	decfsz	wreg,f,c
 10182  0008B2  D7FE               	bra	u10827
 10183  0008B4  2FC4               	decfsz	??_UI& (0+255),f,b
 10184  0008B6  D7FC               	bra	u10827
 10185  0008B8  F000               	nop	
 10186  0008BA  0100               	movlb	0	; () banked
 10187  0008BC  2BD5               	incf	UI@i_451& (0+255),f,b
 10188  0008BE  D7EF               	goto	l9678
 10189  0008C0                     l9686:
 10190                           
 10191                           ; BSR set to: 0
 10192  0008C0  0100               	movlb	0	; () banked
 10193  0008C2  51F8               	movf	_logstate& (0+255),w,b
 10194  0008C4  0100               	movlb	0	; () banked
 10195  0008C6  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 10196  0008C8  B4D8               	btfsc	status,2,c
 10197  0008CA  0012               	return	
 10198  0008CC                     l9690:
 10199  0008CC  0100               	movlb	0	; () banked
 10200  0008CE  51F8               	movf	_logstate& (0+255),w,b
 10201  0008D0  0100               	movlb	0	; () banked
 10202  0008D2  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 10203  0008D4  B4D8               	btfsc	status,2,c
 10204  0008D6  0012               	return	
 10205  0008D8  D44A               	goto	l9386
 10206  0008DA                     __end_of_UI:
 10207                           	opt stack 0
 10208                           tblptru	equ	0xFF8
 10209                           tblptrh	equ	0xFF7
 10210                           tblptrl	equ	0xFF6
 10211                           tablat	equ	0xFF5
 10212                           prodh	equ	0xFF4
 10213                           prodl	equ	0xFF3
 10214                           intcon	equ	0xFF2
 10215                           intcon2	equ	0xFF1
 10216                           intcon3	equ	0xFF0
 10217                           postinc0	equ	0xFEE
 10218                           wreg	equ	0xFE8
 10219                           postdec1	equ	0xFE5
 10220                           fsr1l	equ	0xFE1
 10221                           indf2	equ	0xFDF
 10222                           postinc2	equ	0xFDE
 10223                           postdec2	equ	0xFDD
 10224                           fsr2h	equ	0xFDA
 10225                           fsr2l	equ	0xFD9
 10226                           status	equ	0xFD8
 10227                           
 10228 ;; *************** function _printRTC *****************
 10229 ;; Defined at:
 10230 ;;		line 63 in file "RTC.c"
 10231 ;; Parameters:    Size  Location     Type
 10232 ;;		None
 10233 ;; Auto vars:     Size  Location     Type
 10234 ;;  i               2   66[BANK0 ] int 
 10235 ;;  INT_time       14   46[BANK0 ] int [7]
 10236 ;;  month           4   62[BANK0 ] unsigned char [4]
 10237 ;;  RTC_month       2   60[BANK0 ] int 
 10238 ;; Return value:  Size  Location     Type
 10239 ;;                  1    wreg      void 
 10240 ;; Registers used:
 10241 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10242 ;; Tracked objects:
 10243 ;;		On entry : 0/0
 10244 ;;		On exit  : 0/0
 10245 ;;		Unchanged: 0/0
 10246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10247 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10248 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10249 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10250 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10251 ;;Total ram usage:       25 bytes
 10252 ;; Hardware stack levels used:    1
 10253 ;; Hardware stack levels required when called:   10
 10254 ;; This function calls:
 10255 ;;		_getRTC
 10256 ;;		_lcdInst
 10257 ;;		_printf
 10258 ;;		_strcpy
 10259 ;; This function is called by:
 10260 ;;		_UI
 10261 ;;		_change_state_to_menu_start
 10262 ;; This function uses a non-reentrant model
 10263 ;;
 10264                           
 10265                           	psect	text28
 10266  003106                     __ptext28:
 10267                           	opt stack 0
 10268  003106                     _printRTC:
 10269                           	opt stack 18
 10270                           
 10271                           ;RTC.c: 64: getRTC();
 10272                           
 10273                           ; BSR set to: 0
 10274                           ;incstack = 0
 10275  003106  EC45  F027         	call	_getRTC	;wreg free
 10276                           
 10277                           ;RTC.c: 65: char month[] = "MMM";
 10278  00310A  C151  F0BE         	movff	printRTC@F3238,printRTC@month
 10279  00310E  C152  F0BF         	movff	printRTC@F3238+1,printRTC@month+1
 10280  003112  C153  F0C0         	movff	printRTC@F3238+2,printRTC@month+2
 10281  003116  C154  F0C1         	movff	printRTC@F3238+3,printRTC@month+3
 10282                           
 10283                           ;RTC.c: 66: int INT_time[7];
 10284                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
 10285  00311A  0E00               	movlw	0
 10286  00311C  0100               	movlb	0	; () banked
 10287  00311E  6FC3               	movwf	(printRTC@i+1)& (0+255),b
 10288  003120  0E00               	movlw	0
 10289  003122  6FC2               	movwf	printRTC@i& (0+255),b
 10290                           
 10291                           ; BSR set to: 0
 10292  003124  0100               	movlb	0	; () banked
 10293  003126  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
 10294  003128  D008               	goto	l7188
 10295  00312A  0100               	movlb	0	; () banked
 10296  00312C  51C3               	movf	(printRTC@i+1)& (0+255),w,b
 10297  00312E  E146               	bnz	l627
 10298  003130  0E07               	movlw	7
 10299  003132  0100               	movlb	0	; () banked
 10300  003134  5DC2               	subwf	printRTC@i& (0+255),w,b
 10301  003136  B0D8               	btfsc	status,0,c
 10302  003138  D041               	goto	l627
 10303  00313A                     l7188:
 10304                           
 10305                           ; BSR set to: 0
 10306                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 10307  00313A  0E1C               	movlw	low _time
 10308  00313C  0100               	movlb	0	; () banked
 10309  00313E  25C2               	addwf	printRTC@i& (0+255),w,b
 10310  003140  6ED9               	movwf	fsr2l,c
 10311  003142  0E01               	movlw	high _time
 10312  003144  0100               	movlb	0	; () banked
 10313  003146  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
 10314  003148  6EDA               	movwf	fsr2h,c
 10315  00314A  50DF               	movf	indf2,w,c
 10316  00314C  0100               	movlb	0	; () banked
 10317  00314E  6FAB               	movwf	??_printRTC& (0+255),b
 10318  003150  0100               	movlb	0	; () banked
 10319  003152  3BAB               	swapf	??_printRTC& (0+255),f,b
 10320  003154  0E0F               	movlw	15
 10321  003156  17AB               	andwf	??_printRTC& (0+255),f,b
 10322  003158  0E0F               	movlw	15
 10323  00315A  0100               	movlb	0	; () banked
 10324  00315C  17AB               	andwf	??_printRTC& (0+255),f,b
 10325  00315E  0100               	movlb	0	; () banked
 10326  003160  51AB               	movf	??_printRTC& (0+255),w,b
 10327  003162  0D0A               	mullw	10
 10328  003164  0E1C               	movlw	low _time
 10329  003166  0100               	movlb	0	; () banked
 10330  003168  25C2               	addwf	printRTC@i& (0+255),w,b
 10331  00316A  6ED9               	movwf	fsr2l,c
 10332  00316C  0E01               	movlw	high _time
 10333  00316E  0100               	movlb	0	; () banked
 10334  003170  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
 10335  003172  6EDA               	movwf	fsr2h,c
 10336  003174  50DF               	movf	indf2,w,c
 10337  003176  0B0F               	andlw	15
 10338  003178  0100               	movlb	0	; () banked
 10339  00317A  6FAC               	movwf	(??_printRTC+1)& (0+255),b
 10340  00317C  6BAD               	clrf	(??_printRTC+2)& (0+255),b
 10341  00317E  50F3               	movf	prodl,w,c
 10342  003180  0100               	movlb	0	; () banked
 10343  003182  27AC               	addwf	(??_printRTC+1)& (0+255),f,b
 10344  003184  50F4               	movf	prodh,w,c
 10345  003186  0100               	movlb	0	; () banked
 10346  003188  23AD               	addwfc	(??_printRTC+2)& (0+255),f,b
 10347  00318A  90D8               	bcf	status,0,c
 10348  00318C  0100               	movlb	0	; () banked
 10349  00318E  35C2               	rlcf	printRTC@i& (0+255),w,b
 10350  003190  6ED9               	movwf	fsr2l,c
 10351  003192  0100               	movlb	0	; () banked
 10352  003194  35C3               	rlcf	(printRTC@i+1)& (0+255),w,b
 10353  003196  6EDA               	movwf	fsr2h,c
 10354  003198  0EAE               	movlw	low printRTC@INT_time
 10355  00319A  26D9               	addwf	fsr2l,f,c
 10356  00319C  0E00               	movlw	high printRTC@INT_time
 10357  00319E  22DA               	addwfc	fsr2h,f,c
 10358  0031A0  C0AC  FFDE         	movff	??_printRTC+1,postinc2
 10359  0031A4  C0AD  FFDD         	movff	??_printRTC+2,postdec2
 10360                           
 10361                           ; BSR set to: 0
 10362  0031A8  0100               	movlb	0	; () banked
 10363  0031AA  4BC2               	infsnz	printRTC@i& (0+255),f,b
 10364  0031AC  2BC3               	incf	(printRTC@i+1)& (0+255),f,b
 10365                           
 10366                           ; BSR set to: 0
 10367  0031AE  0100               	movlb	0	; () banked
 10368  0031B0  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
 10369  0031B2  D7C3               	goto	l7188
 10370  0031B4  0100               	movlb	0	; () banked
 10371  0031B6  51C3               	movf	(printRTC@i+1)& (0+255),w,b
 10372  0031B8  E101               	bnz	u6160
 10373  0031BA  D7BA               	goto	L10
 10374  0031BC                     u6160:
 10375  0031BC                     l627:
 10376                           
 10377                           ; BSR set to: 0
 10378                           ;RTC.c: 69: }
 10379                           ;RTC.c: 70: int RTC_month = INT_time[5];
 10380  0031BC  C0B8  F0BC         	movff	printRTC@INT_time+10,printRTC@RTC_month
 10381  0031C0  C0B9  F0BD         	movff	printRTC@INT_time+11,printRTC@RTC_month+1
 10382                           
 10383                           ;RTC.c: 72: switch(RTC_month){
 10384  0031C4  D0B4               	goto	l7220
 10385  0031C6                     l7194:
 10386                           
 10387                           ; BSR set to: 0
 10388                           ;RTC.c: 74: strcpy(month, "JAN");
 10389  0031C6  0EBE               	movlw	low printRTC@month
 10390  0031C8  0100               	movlb	0	; () banked
 10391  0031CA  6F80               	movwf	strcpy@to& (0+255),b
 10392  0031CC  0E00               	movlw	high printRTC@month
 10393  0031CE  0100               	movlb	0	; () banked
 10394  0031D0  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10395  0031D2  0EDA               	movlw	low STR_8
 10396  0031D4  0100               	movlb	0	; () banked
 10397  0031D6  6F82               	movwf	strcpy@from& (0+255),b
 10398  0031D8  0EFF               	movlw	high STR_8
 10399  0031DA  0100               	movlb	0	; () banked
 10400  0031DC  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10401  0031DE  EC00  F02C         	call	_strcpy	;wreg free
 10402                           
 10403                           ;RTC.c: 75: break;
 10404  0031E2  D0D4               	goto	l7222
 10405  0031E4                     l7196:
 10406                           
 10407                           ;RTC.c: 77: strcpy(month, "FEB");
 10408  0031E4  0EBE               	movlw	low printRTC@month
 10409  0031E6  0100               	movlb	0	; () banked
 10410  0031E8  6F80               	movwf	strcpy@to& (0+255),b
 10411  0031EA  0E00               	movlw	high printRTC@month
 10412  0031EC  0100               	movlb	0	; () banked
 10413  0031EE  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10414  0031F0  0ECA               	movlw	low STR_9
 10415  0031F2  0100               	movlb	0	; () banked
 10416  0031F4  6F82               	movwf	strcpy@from& (0+255),b
 10417  0031F6  0EFF               	movlw	high STR_9
 10418  0031F8  0100               	movlb	0	; () banked
 10419  0031FA  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10420  0031FC  EC00  F02C         	call	_strcpy	;wreg free
 10421                           
 10422                           ;RTC.c: 78: break;
 10423  003200  D0C5               	goto	l7222
 10424  003202                     l7198:
 10425                           
 10426                           ;RTC.c: 80: strcpy(month, "MAR");
 10427  003202  0EBE               	movlw	low printRTC@month
 10428  003204  0100               	movlb	0	; () banked
 10429  003206  6F80               	movwf	strcpy@to& (0+255),b
 10430  003208  0E00               	movlw	high printRTC@month
 10431  00320A  0100               	movlb	0	; () banked
 10432  00320C  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10433  00320E  0EE6               	movlw	low STR_10
 10434  003210  0100               	movlb	0	; () banked
 10435  003212  6F82               	movwf	strcpy@from& (0+255),b
 10436  003214  0EFF               	movlw	high STR_10
 10437  003216  0100               	movlb	0	; () banked
 10438  003218  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10439  00321A  EC00  F02C         	call	_strcpy	;wreg free
 10440                           
 10441                           ;RTC.c: 81: break;
 10442  00321E  D0B6               	goto	l7222
 10443  003220                     l7200:
 10444                           
 10445                           ;RTC.c: 83: strcpy(month, "APR");
 10446  003220  0EBE               	movlw	low printRTC@month
 10447  003222  0100               	movlb	0	; () banked
 10448  003224  6F80               	movwf	strcpy@to& (0+255),b
 10449  003226  0E00               	movlw	high printRTC@month
 10450  003228  0100               	movlb	0	; () banked
 10451  00322A  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10452  00322C  0EEA               	movlw	low STR_11
 10453  00322E  0100               	movlb	0	; () banked
 10454  003230  6F82               	movwf	strcpy@from& (0+255),b
 10455  003232  0EFF               	movlw	high STR_11
 10456  003234  0100               	movlb	0	; () banked
 10457  003236  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10458  003238  EC00  F02C         	call	_strcpy	;wreg free
 10459                           
 10460                           ;RTC.c: 84: break;
 10461  00323C  D0A7               	goto	l7222
 10462  00323E                     l7202:
 10463                           
 10464                           ;RTC.c: 86: strcpy(month, "MAY");
 10465  00323E  0EBE               	movlw	low printRTC@month
 10466  003240  0100               	movlb	0	; () banked
 10467  003242  6F80               	movwf	strcpy@to& (0+255),b
 10468  003244  0E00               	movlw	high printRTC@month
 10469  003246  0100               	movlb	0	; () banked
 10470  003248  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10471  00324A  0EFA               	movlw	low STR_12
 10472  00324C  0100               	movlb	0	; () banked
 10473  00324E  6F82               	movwf	strcpy@from& (0+255),b
 10474  003250  0EFF               	movlw	high STR_12
 10475  003252  0100               	movlb	0	; () banked
 10476  003254  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10477  003256  EC00  F02C         	call	_strcpy	;wreg free
 10478                           
 10479                           ;RTC.c: 87: break;
 10480  00325A  D098               	goto	l7222
 10481  00325C                     l7204:
 10482                           
 10483                           ;RTC.c: 89: strcpy(month, "JUN");
 10484  00325C  0EBE               	movlw	low printRTC@month
 10485  00325E  0100               	movlb	0	; () banked
 10486  003260  6F80               	movwf	strcpy@to& (0+255),b
 10487  003262  0E00               	movlw	high printRTC@month
 10488  003264  0100               	movlb	0	; () banked
 10489  003266  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10490  003268  0EDE               	movlw	low STR_13
 10491  00326A  0100               	movlb	0	; () banked
 10492  00326C  6F82               	movwf	strcpy@from& (0+255),b
 10493  00326E  0EFF               	movlw	high STR_13
 10494  003270  0100               	movlb	0	; () banked
 10495  003272  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10496  003274  EC00  F02C         	call	_strcpy	;wreg free
 10497                           
 10498                           ;RTC.c: 90: break;
 10499  003278  D089               	goto	l7222
 10500  00327A                     l7206:
 10501                           
 10502                           ;RTC.c: 92: strcpy(month, "JUL");
 10503  00327A  0EBE               	movlw	low printRTC@month
 10504  00327C  0100               	movlb	0	; () banked
 10505  00327E  6F80               	movwf	strcpy@to& (0+255),b
 10506  003280  0E00               	movlw	high printRTC@month
 10507  003282  0100               	movlb	0	; () banked
 10508  003284  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10509  003286  0ED6               	movlw	low STR_14
 10510  003288  0100               	movlb	0	; () banked
 10511  00328A  6F82               	movwf	strcpy@from& (0+255),b
 10512  00328C  0EFF               	movlw	high STR_14
 10513  00328E  0100               	movlb	0	; () banked
 10514  003290  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10515  003292  EC00  F02C         	call	_strcpy	;wreg free
 10516                           
 10517                           ;RTC.c: 93: break;
 10518  003296  D07A               	goto	l7222
 10519  003298                     l7208:
 10520                           
 10521                           ;RTC.c: 95: strcpy(month, "AUG");
 10522  003298  0EBE               	movlw	low printRTC@month
 10523  00329A  0100               	movlb	0	; () banked
 10524  00329C  6F80               	movwf	strcpy@to& (0+255),b
 10525  00329E  0E00               	movlw	high printRTC@month
 10526  0032A0  0100               	movlb	0	; () banked
 10527  0032A2  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10528  0032A4  0ED2               	movlw	low STR_15
 10529  0032A6  0100               	movlb	0	; () banked
 10530  0032A8  6F82               	movwf	strcpy@from& (0+255),b
 10531  0032AA  0EFF               	movlw	high STR_15
 10532  0032AC  0100               	movlb	0	; () banked
 10533  0032AE  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10534  0032B0  EC00  F02C         	call	_strcpy	;wreg free
 10535                           
 10536                           ;RTC.c: 96: break;
 10537  0032B4  D06B               	goto	l7222
 10538  0032B6                     l7210:
 10539                           
 10540                           ;RTC.c: 98: strcpy(month, "SEP");
 10541  0032B6  0EBE               	movlw	low printRTC@month
 10542  0032B8  0100               	movlb	0	; () banked
 10543  0032BA  6F80               	movwf	strcpy@to& (0+255),b
 10544  0032BC  0E00               	movlw	high printRTC@month
 10545  0032BE  0100               	movlb	0	; () banked
 10546  0032C0  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10547  0032C2  0EE2               	movlw	low STR_16
 10548  0032C4  0100               	movlb	0	; () banked
 10549  0032C6  6F82               	movwf	strcpy@from& (0+255),b
 10550  0032C8  0EFF               	movlw	high STR_16
 10551  0032CA  0100               	movlb	0	; () banked
 10552  0032CC  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10553  0032CE  EC00  F02C         	call	_strcpy	;wreg free
 10554                           
 10555                           ;RTC.c: 99: break;
 10556  0032D2  D05C               	goto	l7222
 10557  0032D4                     l7212:
 10558                           
 10559                           ;RTC.c: 101: strcpy(month, "OCT");
 10560  0032D4  0EBE               	movlw	low printRTC@month
 10561  0032D6  0100               	movlb	0	; () banked
 10562  0032D8  6F80               	movwf	strcpy@to& (0+255),b
 10563  0032DA  0E00               	movlw	high printRTC@month
 10564  0032DC  0100               	movlb	0	; () banked
 10565  0032DE  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10566  0032E0  0EF2               	movlw	low STR_17
 10567  0032E2  0100               	movlb	0	; () banked
 10568  0032E4  6F82               	movwf	strcpy@from& (0+255),b
 10569  0032E6  0EFF               	movlw	high STR_17
 10570  0032E8  0100               	movlb	0	; () banked
 10571  0032EA  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10572  0032EC  EC00  F02C         	call	_strcpy	;wreg free
 10573                           
 10574                           ;RTC.c: 102: break;
 10575  0032F0  D04D               	goto	l7222
 10576  0032F2                     l7214:
 10577                           
 10578                           ;RTC.c: 104: strcpy(month, "NOV");
 10579  0032F2  0EBE               	movlw	low printRTC@month
 10580  0032F4  0100               	movlb	0	; () banked
 10581  0032F6  6F80               	movwf	strcpy@to& (0+255),b
 10582  0032F8  0E00               	movlw	high printRTC@month
 10583  0032FA  0100               	movlb	0	; () banked
 10584  0032FC  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10585  0032FE  0EF6               	movlw	low STR_18
 10586  003300  0100               	movlb	0	; () banked
 10587  003302  6F82               	movwf	strcpy@from& (0+255),b
 10588  003304  0EFF               	movlw	high STR_18
 10589  003306  0100               	movlb	0	; () banked
 10590  003308  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10591  00330A  EC00  F02C         	call	_strcpy	;wreg free
 10592                           
 10593                           ;RTC.c: 105: break;
 10594  00330E  D03E               	goto	l7222
 10595  003310                     l7216:
 10596                           
 10597                           ;RTC.c: 107: strcpy(month, "DEC");
 10598  003310  0EBE               	movlw	low printRTC@month
 10599  003312  0100               	movlb	0	; () banked
 10600  003314  6F80               	movwf	strcpy@to& (0+255),b
 10601  003316  0E00               	movlw	high printRTC@month
 10602  003318  0100               	movlb	0	; () banked
 10603  00331A  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10604  00331C  0ECE               	movlw	low STR_19
 10605  00331E  0100               	movlb	0	; () banked
 10606  003320  6F82               	movwf	strcpy@from& (0+255),b
 10607  003322  0EFF               	movlw	high STR_19
 10608  003324  0100               	movlb	0	; () banked
 10609  003326  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10610  003328  EC00  F02C         	call	_strcpy	;wreg free
 10611                           
 10612                           ;RTC.c: 109: }
 10613                           
 10614                           ;RTC.c: 108: break;
 10615  00332C  D02F               	goto	l7222
 10616  00332E                     l7220:
 10617  00332E  C0BC  F0AB         	movff	printRTC@RTC_month,??_printRTC
 10618  003332  C0BD  F0AC         	movff	printRTC@RTC_month+1,??_printRTC+1
 10619                           
 10620                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10621                           ; Switch size 1, requested type "space"
 10622                           ; Number of cases is 1, Range of values is 0 to 0
 10623                           ; switch strategies available:
 10624                           ; Name         Instructions Cycles
 10625                           ; simple_byte            4     3 (average)
 10626                           ;	Chosen strategy is simple_byte
 10627  003336  0100               	movlb	0	; () banked
 10628  003338  51AC               	movf	(??_printRTC+1)& (0+255),w,b
 10629  00333A  0A00               	xorlw	0	; case 0
 10630  00333C  A4D8               	btfss	status,2,c
 10631  00333E  D026               	goto	l7222
 10632                           
 10633                           ; BSR set to: 0
 10634                           ; Switch size 1, requested type "space"
 10635                           ; Number of cases is 12, Range of values is 1 to 12
 10636                           ; switch strategies available:
 10637                           ; Name         Instructions Cycles
 10638                           ; simple_byte           37    19 (average)
 10639                           ;	Chosen strategy is simple_byte
 10640  003340  0100               	movlb	0	; () banked
 10641  003342  51AB               	movf	??_printRTC& (0+255),w,b
 10642  003344  0A01               	xorlw	1	; case 1
 10643  003346  B4D8               	btfsc	status,2,c
 10644  003348  D73E               	goto	l7194
 10645  00334A  0A03               	xorlw	3	; case 2
 10646  00334C  B4D8               	btfsc	status,2,c
 10647  00334E  D74A               	goto	l7196
 10648  003350  0A01               	xorlw	1	; case 3
 10649  003352  B4D8               	btfsc	status,2,c
 10650  003354  D756               	goto	l7198
 10651  003356  0A07               	xorlw	7	; case 4
 10652  003358  B4D8               	btfsc	status,2,c
 10653  00335A  D762               	goto	l7200
 10654  00335C  0A01               	xorlw	1	; case 5
 10655  00335E  B4D8               	btfsc	status,2,c
 10656  003360  D76E               	goto	l7202
 10657  003362  0A03               	xorlw	3	; case 6
 10658  003364  B4D8               	btfsc	status,2,c
 10659  003366  D77A               	goto	l7204
 10660  003368  0A01               	xorlw	1	; case 7
 10661  00336A  B4D8               	btfsc	status,2,c
 10662  00336C  D786               	goto	l7206
 10663  00336E  0A0F               	xorlw	15	; case 8
 10664  003370  B4D8               	btfsc	status,2,c
 10665  003372  D792               	goto	l7208
 10666  003374  0A01               	xorlw	1	; case 9
 10667  003376  B4D8               	btfsc	status,2,c
 10668  003378  D79E               	goto	l7210
 10669  00337A  0A03               	xorlw	3	; case 10
 10670  00337C  B4D8               	btfsc	status,2,c
 10671  00337E  D7AA               	goto	l7212
 10672  003380  0A01               	xorlw	1	; case 11
 10673  003382  B4D8               	btfsc	status,2,c
 10674  003384  D7B6               	goto	l7214
 10675  003386  0A07               	xorlw	7	; case 12
 10676  003388  B4D8               	btfsc	status,2,c
 10677  00338A  D7C2               	goto	l7216
 10678  00338C                     l7222:
 10679                           
 10680                           ;RTC.c: 110: lcdInst(0b10000000);;
 10681  00338C  0E80               	movlw	128
 10682  00338E  ECB1  F02E         	call	_lcdInst
 10683                           
 10684                           ;RTC.c: 111: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 10685  003392  0ECA               	movlw	low STR_21
 10686  003394  0100               	movlb	0	; () banked
 10687  003396  6F8E               	movwf	printf@f& (0+255),b
 10688  003398  0EFA               	movlw	high STR_21
 10689  00339A  0100               	movlb	0	; () banked
 10690  00339C  6F8F               	movwf	(printf@f+1)& (0+255),b
 10691  00339E  C0B6  F090         	movff	printRTC@INT_time+8,?_printf+2
 10692  0033A2  C0B7  F091         	movff	printRTC@INT_time+9,?_printf+3
 10693  0033A6  0EBE               	movlw	low printRTC@month
 10694  0033A8  0100               	movlb	0	; () banked
 10695  0033AA  6F92               	movwf	(?_printf+4)& (0+255),b
 10696  0033AC  0E00               	movlw	high printRTC@month
 10697  0033AE  0100               	movlb	0	; () banked
 10698  0033B0  6F93               	movwf	(?_printf+5)& (0+255),b
 10699  0033B2  C0B2  F094         	movff	printRTC@INT_time+4,?_printf+6
 10700  0033B6  C0B3  F095         	movff	printRTC@INT_time+5,?_printf+7
 10701  0033BA  C0B0  F096         	movff	printRTC@INT_time+2,?_printf+8
 10702  0033BE  C0B1  F097         	movff	printRTC@INT_time+3,?_printf+9
 10703  0033C2  C0AE  F098         	movff	printRTC@INT_time,?_printf+10
 10704  0033C6  C0AF  F099         	movff	printRTC@INT_time+1,?_printf+11
 10705  0033CA  EC0C  F00E         	call	_printf	;wreg free
 10706  0033CE  0012               	return		;funcret
 10707  0033D0                     __end_of_printRTC:
 10708                           	opt stack 0
 10709                           tblptru	equ	0xFF8
 10710                           tblptrh	equ	0xFF7
 10711                           tblptrl	equ	0xFF6
 10712                           tablat	equ	0xFF5
 10713                           prodh	equ	0xFF4
 10714                           prodl	equ	0xFF3
 10715                           intcon	equ	0xFF2
 10716                           intcon2	equ	0xFF1
 10717                           intcon3	equ	0xFF0
 10718                           postinc0	equ	0xFEE
 10719                           wreg	equ	0xFE8
 10720                           postdec1	equ	0xFE5
 10721                           fsr1l	equ	0xFE1
 10722                           indf2	equ	0xFDF
 10723                           postinc2	equ	0xFDE
 10724                           postdec2	equ	0xFDD
 10725                           fsr2h	equ	0xFDA
 10726                           fsr2l	equ	0xFD9
 10727                           status	equ	0xFD8
 10728                           
 10729 ;; *************** function _strcpy *****************
 10730 ;; Defined at:
 10731 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 10732 ;; Parameters:    Size  Location     Type
 10733 ;;  to              2    0[BANK0 ] PTR unsigned char 
 10734 ;;		 -> printRTC@month(4), UI@month(4), 
 10735 ;;  from            2    2[BANK0 ] PTR const unsigned char 
 10736 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
 10737 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
 10738 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
 10739 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
 10740 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
 10741 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
 10742 ;;		 -> STR_8(4), 
 10743 ;; Auto vars:     Size  Location     Type
 10744 ;;  cp              2    4[BANK0 ] PTR unsigned char 
 10745 ;;		 -> printRTC@month(4), UI@month(4), 
 10746 ;; Return value:  Size  Location     Type
 10747 ;;                  2    0[BANK0 ] PTR unsigned char 
 10748 ;; Registers used:
 10749 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 10750 ;; Tracked objects:
 10751 ;;		On entry : 0/0
 10752 ;;		On exit  : 0/0
 10753 ;;		Unchanged: 0/0
 10754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10755 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10756 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10757 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10758 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10759 ;;Total ram usage:        6 bytes
 10760 ;; Hardware stack levels used:    1
 10761 ;; Hardware stack levels required when called:    7
 10762 ;; This function calls:
 10763 ;;		Nothing
 10764 ;; This function is called by:
 10765 ;;		_UI
 10766 ;;		_printRTC
 10767 ;; This function uses a non-reentrant model
 10768 ;;
 10769                           
 10770                           	psect	text29
 10771  005800                     __ptext29:
 10772                           	opt stack 0
 10773  005800                     _strcpy:
 10774                           	opt stack 20
 10775                           
 10776                           ;incstack = 0
 10777  005800  C080  F084         	movff	strcpy@to,strcpy@cp
 10778  005804  C081  F085         	movff	strcpy@to+1,strcpy@cp+1
 10779  005808  D006               	goto	l6886
 10780  00580A                     l6884:
 10781  00580A  0100               	movlb	0	; () banked
 10782  00580C  4B84               	infsnz	strcpy@cp& (0+255),f,b
 10783  00580E  2B85               	incf	(strcpy@cp+1)& (0+255),f,b
 10784  005810  0100               	movlb	0	; () banked
 10785  005812  4B82               	infsnz	strcpy@from& (0+255),f,b
 10786  005814  2B83               	incf	(strcpy@from+1)& (0+255),f,b
 10787  005816                     l6886:
 10788  005816  C082  FFF6         	movff	strcpy@from,tblptrl
 10789  00581A  C083  FFF7         	movff	strcpy@from+1,tblptrh
 10790  00581E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 10791  00581E  6AF8               	clrf	tblptru,c
 10792  005820                     	endif
 10793  005820                     	if	0	;tblptru may be non-zero
 10794  005820                     	endif
 10795  005820  C084  FFD9         	movff	strcpy@cp,fsr2l
 10796  005824  C085  FFDA         	movff	strcpy@cp+1,fsr2h
 10797  005828  0008               	tblrd		*
 10798  00582A  CFF5 FFDF          	movff	tablat,indf2
 10799  00582E  50DF               	movf	indf2,w,c
 10800  005830  B4D8               	btfsc	status,2,c
 10801  005832  0012               	return	
 10802  005834  D7EA               	goto	l6884
 10803  005836                     __end_of_strcpy:
 10804                           	opt stack 0
 10805                           tblptru	equ	0xFF8
 10806                           tblptrh	equ	0xFF7
 10807                           tblptrl	equ	0xFF6
 10808                           tablat	equ	0xFF5
 10809                           prodh	equ	0xFF4
 10810                           prodl	equ	0xFF3
 10811                           intcon	equ	0xFF2
 10812                           intcon2	equ	0xFF1
 10813                           intcon3	equ	0xFF0
 10814                           postinc0	equ	0xFEE
 10815                           wreg	equ	0xFE8
 10816                           postdec1	equ	0xFE5
 10817                           fsr1l	equ	0xFE1
 10818                           indf2	equ	0xFDF
 10819                           postinc2	equ	0xFDE
 10820                           postdec2	equ	0xFDD
 10821                           fsr2h	equ	0xFDA
 10822                           fsr2l	equ	0xFD9
 10823                           status	equ	0xFD8
 10824                           
 10825 ;; *************** function _getRTC *****************
 10826 ;; Defined at:
 10827 ;;		line 44 in file "RTC.c"
 10828 ;; Parameters:    Size  Location     Type
 10829 ;;		None
 10830 ;; Auto vars:     Size  Location     Type
 10831 ;;  i               2    3[BANK0 ] int 
 10832 ;; Return value:  Size  Location     Type
 10833 ;;                  1    wreg      void 
 10834 ;; Registers used:
 10835 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10836 ;; Tracked objects:
 10837 ;;		On entry : 0/0
 10838 ;;		On exit  : 0/0
 10839 ;;		Unchanged: 0/0
 10840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10841 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10842 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10843 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10844 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10845 ;;Total ram usage:        2 bytes
 10846 ;; Hardware stack levels used:    1
 10847 ;; Hardware stack levels required when called:    9
 10848 ;; This function calls:
 10849 ;;		_I2C_Master_Read
 10850 ;;		_I2C_Master_Start
 10851 ;;		_I2C_Master_Stop
 10852 ;;		_I2C_Master_Write
 10853 ;; This function is called by:
 10854 ;;		_printRTC
 10855 ;;		_initSortTimer
 10856 ;; This function uses a non-reentrant model
 10857 ;;
 10858                           
 10859                           	psect	text30
 10860  004E8A                     __ptext30:
 10861                           	opt stack 0
 10862  004E8A                     _getRTC:
 10863                           	opt stack 18
 10864                           
 10865                           ;RTC.c: 48: I2C_Master_Start();
 10866                           
 10867                           ;incstack = 0
 10868  004E8A  ECD7  F02E         	call	_I2C_Master_Start	;wreg free
 10869                           
 10870                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
 10871  004E8E  0E00               	movlw	0
 10872  004E90  0100               	movlb	0	; () banked
 10873  004E92  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
 10874  004E94  0ED0               	movlw	208
 10875  004E96  6F81               	movwf	I2C_Master_Write@d& (0+255),b
 10876  004E98  ECC5  F02E         	call	_I2C_Master_Write	;wreg free
 10877                           
 10878                           ;RTC.c: 50: I2C_Master_Write(0x00);
 10879  004E9C  0E00               	movlw	0
 10880  004E9E  0100               	movlb	0	; () banked
 10881  004EA0  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
 10882  004EA2  0E00               	movlw	0
 10883  004EA4  6F81               	movwf	I2C_Master_Write@d& (0+255),b
 10884  004EA6  ECC5  F02E         	call	_I2C_Master_Write	;wreg free
 10885                           
 10886                           ;RTC.c: 51: I2C_Master_Stop();
 10887  004EAA  ECD3  F02E         	call	_I2C_Master_Stop	;wreg free
 10888                           
 10889                           ;RTC.c: 54: I2C_Master_Start();
 10890  004EAE  ECD7  F02E         	call	_I2C_Master_Start	;wreg free
 10891                           
 10892                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
 10893  004EB2  0E00               	movlw	0
 10894  004EB4  0100               	movlb	0	; () banked
 10895  004EB6  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
 10896  004EB8  0ED1               	movlw	209
 10897  004EBA  6F81               	movwf	I2C_Master_Write@d& (0+255),b
 10898  004EBC  ECC5  F02E         	call	_I2C_Master_Write	;wreg free
 10899                           
 10900                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
 10901  004EC0  0E00               	movlw	0
 10902  004EC2  0100               	movlb	0	; () banked
 10903  004EC4  6F84               	movwf	(getRTC@i+1)& (0+255),b
 10904  004EC6  0E00               	movlw	0
 10905  004EC8  6F83               	movwf	getRTC@i& (0+255),b
 10906  004ECA                     l6892:
 10907                           
 10908                           ; BSR set to: 0
 10909  004ECA  0100               	movlb	0	; () banked
 10910  004ECC  BF84               	btfsc	(getRTC@i+1)& (0+255),7,b
 10911  004ECE  D008               	goto	l6896
 10912  004ED0  0100               	movlb	0	; () banked
 10913  004ED2  5184               	movf	(getRTC@i+1)& (0+255),w,b
 10914  004ED4  E115               	bnz	l6902
 10915  004ED6  0E06               	movlw	6
 10916  004ED8  0100               	movlb	0	; () banked
 10917  004EDA  5D83               	subwf	getRTC@i& (0+255),w,b
 10918  004EDC  B0D8               	btfsc	status,0,c
 10919  004EDE  D010               	goto	l6902
 10920  004EE0                     l6896:
 10921                           
 10922                           ; BSR set to: 0
 10923                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
 10924  004EE0  0E1C               	movlw	low _time
 10925  004EE2  0100               	movlb	0	; () banked
 10926  004EE4  2583               	addwf	getRTC@i& (0+255),w,b
 10927  004EE6  6ED9               	movwf	fsr2l,c
 10928  004EE8  0E01               	movlw	high _time
 10929  004EEA  0100               	movlb	0	; () banked
 10930  004EEC  2184               	addwfc	(getRTC@i+1)& (0+255),w,b
 10931  004EEE  6EDA               	movwf	fsr2h,c
 10932  004EF0  0E01               	movlw	1
 10933  004EF2  EC58  F02D         	call	_I2C_Master_Read
 10934  004EF6  6EDF               	movwf	indf2,c
 10935  004EF8  0100               	movlb	0	; () banked
 10936  004EFA  4B83               	infsnz	getRTC@i& (0+255),f,b
 10937  004EFC  2B84               	incf	(getRTC@i+1)& (0+255),f,b
 10938  004EFE  D7E5               	goto	l6892
 10939  004F00                     l6902:
 10940                           
 10941                           ; BSR set to: 0
 10942                           ;RTC.c: 58: }
 10943                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
 10944  004F00  0E00               	movlw	0
 10945  004F02  EC58  F02D         	call	_I2C_Master_Read
 10946  004F06  0101               	movlb	1	; () banked
 10947  004F08  6F22               	movwf	(_time+6)& (0+255),b
 10948                           
 10949                           ;RTC.c: 60: I2C_Master_Stop();
 10950  004F0A  ECD3  F02E         	call	_I2C_Master_Stop	;wreg free
 10951  004F0E  0012               	return		;funcret
 10952  004F10                     __end_of_getRTC:
 10953                           	opt stack 0
 10954                           tblptru	equ	0xFF8
 10955                           tblptrh	equ	0xFF7
 10956                           tblptrl	equ	0xFF6
 10957                           tablat	equ	0xFF5
 10958                           prodh	equ	0xFF4
 10959                           prodl	equ	0xFF3
 10960                           intcon	equ	0xFF2
 10961                           intcon2	equ	0xFF1
 10962                           intcon3	equ	0xFF0
 10963                           postinc0	equ	0xFEE
 10964                           wreg	equ	0xFE8
 10965                           postdec1	equ	0xFE5
 10966                           fsr1l	equ	0xFE1
 10967                           indf2	equ	0xFDF
 10968                           postinc2	equ	0xFDE
 10969                           postdec2	equ	0xFDD
 10970                           fsr2h	equ	0xFDA
 10971                           fsr2l	equ	0xFD9
 10972                           status	equ	0xFD8
 10973                           
 10974 ;; *************** function _I2C_Master_Write *****************
 10975 ;; Defined at:
 10976 ;;		line 49 in file "I2C.c"
 10977 ;; Parameters:    Size  Location     Type
 10978 ;;  d               2    1[BANK0 ] unsigned int 
 10979 ;; Auto vars:     Size  Location     Type
 10980 ;;		None
 10981 ;; Return value:  Size  Location     Type
 10982 ;;                  1    wreg      void 
 10983 ;; Registers used:
 10984 ;;		wreg, status,2, status,0, cstack
 10985 ;; Tracked objects:
 10986 ;;		On entry : 0/0
 10987 ;;		On exit  : 0/0
 10988 ;;		Unchanged: 0/0
 10989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10990 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10991 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10992 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10993 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10994 ;;Total ram usage:        2 bytes
 10995 ;; Hardware stack levels used:    1
 10996 ;; Hardware stack levels required when called:    8
 10997 ;; This function calls:
 10998 ;;		_I2C_Master_Wait
 10999 ;; This function is called by:
 11000 ;;		_loadRTC
 11001 ;;		_getRTC
 11002 ;; This function uses a non-reentrant model
 11003 ;;
 11004                           
 11005                           	psect	text31
 11006  005D8A                     __ptext31:
 11007                           	opt stack 0
 11008  005D8A                     _I2C_Master_Write:
 11009                           	opt stack 18
 11010                           
 11011                           ;I2C.c: 51: I2C_Master_Wait();
 11012                           
 11013                           ;incstack = 0
 11014  005D8A  EC96  F02E         	call	_I2C_Master_Wait	;wreg free
 11015                           
 11016                           ;I2C.c: 52: SSPBUF = d;
 11017  005D8E  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
 11018  005D92  0012               	return		;funcret
 11019  005D94                     __end_of_I2C_Master_Write:
 11020                           	opt stack 0
 11021                           tblptru	equ	0xFF8
 11022                           tblptrh	equ	0xFF7
 11023                           tblptrl	equ	0xFF6
 11024                           tablat	equ	0xFF5
 11025                           prodh	equ	0xFF4
 11026                           prodl	equ	0xFF3
 11027                           intcon	equ	0xFF2
 11028                           intcon2	equ	0xFF1
 11029                           intcon3	equ	0xFF0
 11030                           postinc0	equ	0xFEE
 11031                           wreg	equ	0xFE8
 11032                           postdec1	equ	0xFE5
 11033                           fsr1l	equ	0xFE1
 11034                           indf2	equ	0xFDF
 11035                           postinc2	equ	0xFDE
 11036                           postdec2	equ	0xFDD
 11037                           fsr2h	equ	0xFDA
 11038                           fsr2l	equ	0xFD9
 11039                           status	equ	0xFD8
 11040                           
 11041 ;; *************** function _I2C_Master_Stop *****************
 11042 ;; Defined at:
 11043 ;;		line 43 in file "I2C.c"
 11044 ;; Parameters:    Size  Location     Type
 11045 ;;		None
 11046 ;; Auto vars:     Size  Location     Type
 11047 ;;		None
 11048 ;; Return value:  Size  Location     Type
 11049 ;;                  1    wreg      void 
 11050 ;; Registers used:
 11051 ;;		wreg, status,2, status,0, cstack
 11052 ;; Tracked objects:
 11053 ;;		On entry : 0/0
 11054 ;;		On exit  : 0/0
 11055 ;;		Unchanged: 0/0
 11056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11057 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11058 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11059 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11060 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11061 ;;Total ram usage:        0 bytes
 11062 ;; Hardware stack levels used:    1
 11063 ;; Hardware stack levels required when called:    8
 11064 ;; This function calls:
 11065 ;;		_I2C_Master_Wait
 11066 ;; This function is called by:
 11067 ;;		_loadRTC
 11068 ;;		_getRTC
 11069 ;; This function uses a non-reentrant model
 11070 ;;
 11071                           
 11072                           	psect	text32
 11073  005DA6                     __ptext32:
 11074                           	opt stack 0
 11075  005DA6                     _I2C_Master_Stop:
 11076                           	opt stack 18
 11077                           
 11078                           ;I2C.c: 45: I2C_Master_Wait();
 11079                           
 11080                           ;incstack = 0
 11081  005DA6  EC96  F02E         	call	_I2C_Master_Wait	;wreg free
 11082                           
 11083                           ;I2C.c: 46: PEN = 1;
 11084  005DAA  84C5               	bsf	4037,2,c	;volatile
 11085  005DAC  0012               	return		;funcret
 11086  005DAE                     __end_of_I2C_Master_Stop:
 11087                           	opt stack 0
 11088                           tblptru	equ	0xFF8
 11089                           tblptrh	equ	0xFF7
 11090                           tblptrl	equ	0xFF6
 11091                           tablat	equ	0xFF5
 11092                           prodh	equ	0xFF4
 11093                           prodl	equ	0xFF3
 11094                           intcon	equ	0xFF2
 11095                           intcon2	equ	0xFF1
 11096                           intcon3	equ	0xFF0
 11097                           postinc0	equ	0xFEE
 11098                           wreg	equ	0xFE8
 11099                           postdec1	equ	0xFE5
 11100                           fsr1l	equ	0xFE1
 11101                           indf2	equ	0xFDF
 11102                           postinc2	equ	0xFDE
 11103                           postdec2	equ	0xFDD
 11104                           fsr2h	equ	0xFDA
 11105                           fsr2l	equ	0xFD9
 11106                           status	equ	0xFD8
 11107                           
 11108 ;; *************** function _I2C_Master_Start *****************
 11109 ;; Defined at:
 11110 ;;		line 31 in file "I2C.c"
 11111 ;; Parameters:    Size  Location     Type
 11112 ;;		None
 11113 ;; Auto vars:     Size  Location     Type
 11114 ;;		None
 11115 ;; Return value:  Size  Location     Type
 11116 ;;                  1    wreg      void 
 11117 ;; Registers used:
 11118 ;;		wreg, status,2, status,0, cstack
 11119 ;; Tracked objects:
 11120 ;;		On entry : 0/0
 11121 ;;		On exit  : 0/0
 11122 ;;		Unchanged: 0/0
 11123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11124 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11125 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11126 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11127 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11128 ;;Total ram usage:        0 bytes
 11129 ;; Hardware stack levels used:    1
 11130 ;; Hardware stack levels required when called:    8
 11131 ;; This function calls:
 11132 ;;		_I2C_Master_Wait
 11133 ;; This function is called by:
 11134 ;;		_loadRTC
 11135 ;;		_getRTC
 11136 ;; This function uses a non-reentrant model
 11137 ;;
 11138                           
 11139                           	psect	text33
 11140  005DAE                     __ptext33:
 11141                           	opt stack 0
 11142  005DAE                     _I2C_Master_Start:
 11143                           	opt stack 18
 11144                           
 11145                           ;I2C.c: 33: I2C_Master_Wait();
 11146                           
 11147                           ;incstack = 0
 11148  005DAE  EC96  F02E         	call	_I2C_Master_Wait	;wreg free
 11149                           
 11150                           ;I2C.c: 34: SEN = 1;
 11151  005DB2  80C5               	bsf	4037,0,c	;volatile
 11152  005DB4  0012               	return		;funcret
 11153  005DB6                     __end_of_I2C_Master_Start:
 11154                           	opt stack 0
 11155                           tblptru	equ	0xFF8
 11156                           tblptrh	equ	0xFF7
 11157                           tblptrl	equ	0xFF6
 11158                           tablat	equ	0xFF5
 11159                           prodh	equ	0xFF4
 11160                           prodl	equ	0xFF3
 11161                           intcon	equ	0xFF2
 11162                           intcon2	equ	0xFF1
 11163                           intcon3	equ	0xFF0
 11164                           postinc0	equ	0xFEE
 11165                           wreg	equ	0xFE8
 11166                           postdec1	equ	0xFE5
 11167                           fsr1l	equ	0xFE1
 11168                           indf2	equ	0xFDF
 11169                           postinc2	equ	0xFDE
 11170                           postdec2	equ	0xFDD
 11171                           fsr2h	equ	0xFDA
 11172                           fsr2l	equ	0xFD9
 11173                           status	equ	0xFD8
 11174                           
 11175 ;; *************** function _I2C_Master_Read *****************
 11176 ;; Defined at:
 11177 ;;		line 55 in file "I2C.c"
 11178 ;; Parameters:    Size  Location     Type
 11179 ;;  a               1    wreg     unsigned char 
 11180 ;; Auto vars:     Size  Location     Type
 11181 ;;  a               1    1[BANK0 ] unsigned char 
 11182 ;;  temp            1    2[BANK0 ] unsigned char 
 11183 ;; Return value:  Size  Location     Type
 11184 ;;                  1    wreg      unsigned char 
 11185 ;; Registers used:
 11186 ;;		wreg, status,2, status,0, cstack
 11187 ;; Tracked objects:
 11188 ;;		On entry : 0/0
 11189 ;;		On exit  : 0/0
 11190 ;;		Unchanged: 0/0
 11191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11192 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11193 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11194 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11195 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11196 ;;Total ram usage:        2 bytes
 11197 ;; Hardware stack levels used:    1
 11198 ;; Hardware stack levels required when called:    8
 11199 ;; This function calls:
 11200 ;;		_I2C_Master_Wait
 11201 ;; This function is called by:
 11202 ;;		_getRTC
 11203 ;; This function uses a non-reentrant model
 11204 ;;
 11205                           
 11206                           	psect	text34
 11207  005AB0                     __ptext34:
 11208                           	opt stack 0
 11209  005AB0                     _I2C_Master_Read:
 11210                           	opt stack 18
 11211                           
 11212                           ;incstack = 0
 11213                           ;I2C_Master_Read@a stored from wreg
 11214  005AB0  0100               	movlb	0	; () banked
 11215  005AB2  6F81               	movwf	I2C_Master_Read@a& (0+255),b
 11216                           
 11217                           ;I2C.c: 57: unsigned char temp;
 11218                           ;I2C.c: 58: I2C_Master_Wait();
 11219  005AB4  EC96  F02E         	call	_I2C_Master_Wait	;wreg free
 11220                           
 11221                           ;I2C.c: 59: RCEN = 1;
 11222  005AB8  86C5               	bsf	4037,3,c	;volatile
 11223                           
 11224                           ;I2C.c: 60: I2C_Master_Wait();
 11225  005ABA  EC96  F02E         	call	_I2C_Master_Wait	;wreg free
 11226                           
 11227                           ;I2C.c: 61: temp = SSPBUF;
 11228  005ABE  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
 11229                           
 11230                           ;I2C.c: 62: I2C_Master_Wait();
 11231  005AC2  EC96  F02E         	call	_I2C_Master_Wait	;wreg free
 11232                           
 11233                           ;I2C.c: 63: ACKDT = (a)?0:1;
 11234  005AC6  0100               	movlb	0	; () banked
 11235  005AC8  5181               	movf	I2C_Master_Read@a& (0+255),w,b
 11236  005ACA  0100               	movlb	0	; () banked
 11237  005ACC  A4D8               	btfss	status,2,c
 11238  005ACE  D002               	goto	u5150
 11239  005AD0  8AC5               	bsf	4037,5,c	;volatile
 11240  005AD2  D001               	goto	l6580
 11241  005AD4                     u5150:
 11242  005AD4  9AC5               	bcf	4037,5,c	;volatile
 11243  005AD6                     l6580:
 11244                           
 11245                           ;I2C.c: 64: ACKEN = 1;
 11246  005AD6  88C5               	bsf	4037,4,c	;volatile
 11247                           
 11248                           ;I2C.c: 65: return temp;
 11249  005AD8  0100               	movlb	0	; () banked
 11250  005ADA  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
 11251  005ADC  0012               	return	
 11252  005ADE                     __end_of_I2C_Master_Read:
 11253                           	opt stack 0
 11254                           tblptru	equ	0xFF8
 11255                           tblptrh	equ	0xFF7
 11256                           tblptrl	equ	0xFF6
 11257                           tablat	equ	0xFF5
 11258                           prodh	equ	0xFF4
 11259                           prodl	equ	0xFF3
 11260                           intcon	equ	0xFF2
 11261                           intcon2	equ	0xFF1
 11262                           intcon3	equ	0xFF0
 11263                           postinc0	equ	0xFEE
 11264                           wreg	equ	0xFE8
 11265                           postdec1	equ	0xFE5
 11266                           fsr1l	equ	0xFE1
 11267                           indf2	equ	0xFDF
 11268                           postinc2	equ	0xFDE
 11269                           postdec2	equ	0xFDD
 11270                           fsr2h	equ	0xFDA
 11271                           fsr2l	equ	0xFD9
 11272                           status	equ	0xFD8
 11273                           
 11274 ;; *************** function _I2C_Master_Wait *****************
 11275 ;; Defined at:
 11276 ;;		line 26 in file "I2C.c"
 11277 ;; Parameters:    Size  Location     Type
 11278 ;;		None
 11279 ;; Auto vars:     Size  Location     Type
 11280 ;;		None
 11281 ;; Return value:  Size  Location     Type
 11282 ;;                  1    wreg      void 
 11283 ;; Registers used:
 11284 ;;		wreg, status,2, status,0
 11285 ;; Tracked objects:
 11286 ;;		On entry : 0/0
 11287 ;;		On exit  : 0/0
 11288 ;;		Unchanged: 0/0
 11289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11290 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11291 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11292 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11293 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11294 ;;Total ram usage:        1 bytes
 11295 ;; Hardware stack levels used:    1
 11296 ;; Hardware stack levels required when called:    7
 11297 ;; This function calls:
 11298 ;;		Nothing
 11299 ;; This function is called by:
 11300 ;;		_I2C_Master_Start
 11301 ;;		_I2C_Master_Stop
 11302 ;;		_I2C_Master_Write
 11303 ;;		_I2C_Master_Read
 11304 ;;		_I2C_Master_RepeatedStart
 11305 ;; This function uses a non-reentrant model
 11306 ;;
 11307                           
 11308                           	psect	text35
 11309  005D2C                     __ptext35:
 11310                           	opt stack 0
 11311  005D2C                     _I2C_Master_Wait:
 11312                           	opt stack 18
 11313  005D2C                     l71:
 11314  005D2C  B4C7               	btfsc	4039,2,c	;volatile
 11315  005D2E  D7FE               	goto	l71
 11316  005D30  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
 11317  005D34  0E1F               	movlw	31
 11318  005D36  0100               	movlb	0	; () banked
 11319  005D38  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
 11320  005D3A  B4D8               	btfsc	status,2,c
 11321  005D3C  0012               	return	
 11322  005D3E  D7F6               	goto	l71
 11323  005D40                     __end_of_I2C_Master_Wait:
 11324                           	opt stack 0
 11325                           tblptru	equ	0xFF8
 11326                           tblptrh	equ	0xFF7
 11327                           tblptrl	equ	0xFF6
 11328                           tablat	equ	0xFF5
 11329                           prodh	equ	0xFF4
 11330                           prodl	equ	0xFF3
 11331                           intcon	equ	0xFF2
 11332                           intcon2	equ	0xFF1
 11333                           intcon3	equ	0xFF0
 11334                           postinc0	equ	0xFEE
 11335                           wreg	equ	0xFE8
 11336                           postdec1	equ	0xFE5
 11337                           fsr1l	equ	0xFE1
 11338                           indf2	equ	0xFDF
 11339                           postinc2	equ	0xFDE
 11340                           postdec2	equ	0xFDD
 11341                           fsr2h	equ	0xFDA
 11342                           fsr2l	equ	0xFD9
 11343                           status	equ	0xFD8
 11344                           
 11345 ;; *************** function _change_state_to_menu_22 *****************
 11346 ;; Defined at:
 11347 ;;		line 501 in file "UI.c"
 11348 ;; Parameters:    Size  Location     Type
 11349 ;;		None
 11350 ;; Auto vars:     Size  Location     Type
 11351 ;;		None
 11352 ;; Return value:  Size  Location     Type
 11353 ;;                  1    wreg      void 
 11354 ;; Registers used:
 11355 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11356 ;; Tracked objects:
 11357 ;;		On entry : 0/0
 11358 ;;		On exit  : 0/0
 11359 ;;		Unchanged: 0/0
 11360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11361 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11362 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11363 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11364 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11365 ;;Total ram usage:        0 bytes
 11366 ;; Hardware stack levels used:    1
 11367 ;; Hardware stack levels required when called:   10
 11368 ;; This function calls:
 11369 ;;		_lcdInst
 11370 ;;		_printf
 11371 ;; This function is called by:
 11372 ;;		_UI
 11373 ;; This function uses a non-reentrant model
 11374 ;;
 11375                           
 11376                           	psect	text36
 11377  005790                     __ptext36:
 11378                           	opt stack 0
 11379  005790                     _change_state_to_menu_22:
 11380                           	opt stack 19
 11381                           
 11382                           ;UI.c: 502: cur_state = 22;
 11383                           
 11384                           ; BSR set to: 0
 11385                           ;incstack = 0
 11386  005790  0E00               	movlw	0
 11387  005792  0100               	movlb	0	; () banked
 11388  005794  6FE7               	movwf	(_cur_state+1)& (0+255),b
 11389  005796  0E16               	movlw	22
 11390  005798  6FE6               	movwf	_cur_state& (0+255),b
 11391                           
 11392                           ; BSR set to: 0
 11393                           ;UI.c: 504: lcdInst(0b10000000);;
 11394  00579A  0E80               	movlw	128
 11395  00579C  ECB1  F02E         	call	_lcdInst
 11396                           
 11397                           ;UI.c: 505: printf("2. SORT        <");
 11398  0057A0  0EB7               	movlw	low STR_34
 11399  0057A2  0100               	movlb	0	; () banked
 11400  0057A4  6F8E               	movwf	printf@f& (0+255),b
 11401  0057A6  0EFD               	movlw	high STR_34
 11402  0057A8  0100               	movlb	0	; () banked
 11403  0057AA  6F8F               	movwf	(printf@f+1)& (0+255),b
 11404  0057AC  EC0C  F00E         	call	_printf	;wreg free
 11405                           
 11406                           ;UI.c: 506: lcdInst(0b11000000);;
 11407  0057B0  0EC0               	movlw	192
 11408  0057B2  ECB1  F02E         	call	_lcdInst
 11409                           
 11410                           ;UI.c: 507: printf("3. LOGS         ");
 11411  0057B6  0EFC               	movlw	low STR_36
 11412  0057B8  0100               	movlb	0	; () banked
 11413  0057BA  6F8E               	movwf	printf@f& (0+255),b
 11414  0057BC  0EFC               	movlw	high STR_36
 11415  0057BE  0100               	movlb	0	; () banked
 11416  0057C0  6F8F               	movwf	(printf@f+1)& (0+255),b
 11417  0057C2  EC0C  F00E         	call	_printf	;wreg free
 11418  0057C6  0012               	return		;funcret
 11419  0057C8                     __end_of_change_state_to_menu_22:
 11420                           	opt stack 0
 11421                           tblptru	equ	0xFF8
 11422                           tblptrh	equ	0xFF7
 11423                           tblptrl	equ	0xFF6
 11424                           tablat	equ	0xFF5
 11425                           prodh	equ	0xFF4
 11426                           prodl	equ	0xFF3
 11427                           intcon	equ	0xFF2
 11428                           intcon2	equ	0xFF1
 11429                           intcon3	equ	0xFF0
 11430                           postinc0	equ	0xFEE
 11431                           wreg	equ	0xFE8
 11432                           postdec1	equ	0xFE5
 11433                           fsr1l	equ	0xFE1
 11434                           indf2	equ	0xFDF
 11435                           postinc2	equ	0xFDE
 11436                           postdec2	equ	0xFDD
 11437                           fsr2h	equ	0xFDA
 11438                           fsr2l	equ	0xFD9
 11439                           status	equ	0xFD8
 11440                           
 11441 ;; *************** function _change_state_to_menu_12 *****************
 11442 ;; Defined at:
 11443 ;;		line 493 in file "UI.c"
 11444 ;; Parameters:    Size  Location     Type
 11445 ;;		None
 11446 ;; Auto vars:     Size  Location     Type
 11447 ;;		None
 11448 ;; Return value:  Size  Location     Type
 11449 ;;                  1    wreg      void 
 11450 ;; Registers used:
 11451 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11452 ;; Tracked objects:
 11453 ;;		On entry : 0/0
 11454 ;;		On exit  : 0/0
 11455 ;;		Unchanged: 0/0
 11456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11457 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11458 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11459 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11460 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11461 ;;Total ram usage:        0 bytes
 11462 ;; Hardware stack levels used:    1
 11463 ;; Hardware stack levels required when called:   10
 11464 ;; This function calls:
 11465 ;;		_lcdInst
 11466 ;;		_printf
 11467 ;; This function is called by:
 11468 ;;		_UI
 11469 ;; This function uses a non-reentrant model
 11470 ;;
 11471                           
 11472                           	psect	text37
 11473  0057C8                     __ptext37:
 11474                           	opt stack 0
 11475  0057C8                     _change_state_to_menu_12:
 11476                           	opt stack 19
 11477                           
 11478                           ;UI.c: 494: cur_state = 12;
 11479                           
 11480                           ;incstack = 0
 11481  0057C8  0E00               	movlw	0
 11482  0057CA  0100               	movlb	0	; () banked
 11483  0057CC  6FE7               	movwf	(_cur_state+1)& (0+255),b
 11484  0057CE  0E0C               	movlw	12
 11485  0057D0  6FE6               	movwf	_cur_state& (0+255),b
 11486                           
 11487                           ; BSR set to: 0
 11488                           ;UI.c: 496: lcdInst(0b10000000);;
 11489  0057D2  0E80               	movlw	128
 11490  0057D4  ECB1  F02E         	call	_lcdInst
 11491                           
 11492                           ;UI.c: 497: printf("1. DATE/TIME    ");
 11493  0057D8  0E1E               	movlw	low STR_33
 11494  0057DA  0100               	movlb	0	; () banked
 11495  0057DC  6F8E               	movwf	printf@f& (0+255),b
 11496  0057DE  0EFD               	movlw	high STR_33
 11497  0057E0  0100               	movlb	0	; () banked
 11498  0057E2  6F8F               	movwf	(printf@f+1)& (0+255),b
 11499  0057E4  EC0C  F00E         	call	_printf	;wreg free
 11500                           
 11501                           ;UI.c: 498: lcdInst(0b11000000);;
 11502  0057E8  0EC0               	movlw	192
 11503  0057EA  ECB1  F02E         	call	_lcdInst
 11504                           
 11505                           ;UI.c: 499: printf("2. SORT        <");
 11506  0057EE  0EB7               	movlw	low STR_34
 11507  0057F0  0100               	movlb	0	; () banked
 11508  0057F2  6F8E               	movwf	printf@f& (0+255),b
 11509  0057F4  0EFD               	movlw	high STR_34
 11510  0057F6  0100               	movlb	0	; () banked
 11511  0057F8  6F8F               	movwf	(printf@f+1)& (0+255),b
 11512  0057FA  EC0C  F00E         	call	_printf	;wreg free
 11513  0057FE  0012               	return		;funcret
 11514  005800                     __end_of_change_state_to_menu_12:
 11515                           	opt stack 0
 11516                           tblptru	equ	0xFF8
 11517                           tblptrh	equ	0xFF7
 11518                           tblptrl	equ	0xFF6
 11519                           tablat	equ	0xFF5
 11520                           prodh	equ	0xFF4
 11521                           prodl	equ	0xFF3
 11522                           intcon	equ	0xFF2
 11523                           intcon2	equ	0xFF1
 11524                           intcon3	equ	0xFF0
 11525                           postinc0	equ	0xFEE
 11526                           wreg	equ	0xFE8
 11527                           postdec1	equ	0xFE5
 11528                           fsr1l	equ	0xFE1
 11529                           indf2	equ	0xFDF
 11530                           postinc2	equ	0xFDE
 11531                           postdec2	equ	0xFDD
 11532                           fsr2h	equ	0xFDA
 11533                           fsr2l	equ	0xFD9
 11534                           status	equ	0xFD8
 11535                           
 11536 ;; *************** function ___awmod *****************
 11537 ;; Defined at:
 11538 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
 11539 ;; Parameters:    Size  Location     Type
 11540 ;;  dividend        2    0[BANK0 ] int 
 11541 ;;  divisor         2    2[BANK0 ] int 
 11542 ;; Auto vars:     Size  Location     Type
 11543 ;;  sign            1    5[BANK0 ] unsigned char 
 11544 ;;  counter         1    4[BANK0 ] unsigned char 
 11545 ;; Return value:  Size  Location     Type
 11546 ;;                  2    0[BANK0 ] int 
 11547 ;; Registers used:
 11548 ;;		wreg, status,2, status,0
 11549 ;; Tracked objects:
 11550 ;;		On entry : 0/0
 11551 ;;		On exit  : 0/0
 11552 ;;		Unchanged: 0/0
 11553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11554 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11555 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11556 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11557 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11558 ;;Total ram usage:        6 bytes
 11559 ;; Hardware stack levels used:    1
 11560 ;; Hardware stack levels required when called:    7
 11561 ;; This function calls:
 11562 ;;		Nothing
 11563 ;; This function is called by:
 11564 ;;		_UI
 11565 ;; This function uses a non-reentrant model
 11566 ;;
 11567                           
 11568                           	psect	text38
 11569  004CCC                     __ptext38:
 11570                           	opt stack 0
 11571  004CCC                     ___awmod:
 11572                           	opt stack 22
 11573                           
 11574                           ;incstack = 0
 11575  004CCC  0E00               	movlw	0
 11576  004CCE  0100               	movlb	0	; () banked
 11577  004CD0  6F85               	movwf	___awmod@sign& (0+255),b
 11578                           
 11579                           ; BSR set to: 0
 11580  004CD2  0100               	movlb	0	; () banked
 11581  004CD4  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
 11582  004CD6  D008               	goto	l9236
 11583                           
 11584                           ; BSR set to: 0
 11585  004CD8  0100               	movlb	0	; () banked
 11586  004CDA  6D80               	negf	___awmod@dividend& (0+255),b
 11587  004CDC  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
 11588  004CDE  B0D8               	btfsc	status,0,c
 11589  004CE0  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
 11590                           
 11591                           ; BSR set to: 0
 11592  004CE2  0E01               	movlw	1
 11593  004CE4  0100               	movlb	0	; () banked
 11594  004CE6  6F85               	movwf	___awmod@sign& (0+255),b
 11595  004CE8                     l9236:
 11596                           
 11597                           ; BSR set to: 0
 11598  004CE8  0100               	movlb	0	; () banked
 11599  004CEA  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
 11600  004CEC  D005               	goto	l9240
 11601                           
 11602                           ; BSR set to: 0
 11603  004CEE  0100               	movlb	0	; () banked
 11604  004CF0  6D82               	negf	___awmod@divisor& (0+255),b
 11605  004CF2  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
 11606  004CF4  B0D8               	btfsc	status,0,c
 11607  004CF6  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
 11608  004CF8                     l9240:
 11609                           
 11610                           ; BSR set to: 0
 11611  004CF8  0100               	movlb	0	; () banked
 11612  004CFA  5182               	movf	___awmod@divisor& (0+255),w,b
 11613  004CFC  0100               	movlb	0	; () banked
 11614  004CFE  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
 11615  004D00  B4D8               	btfsc	status,2,c
 11616  004D02  D026               	goto	l9256
 11617                           
 11618                           ; BSR set to: 0
 11619  004D04  0E01               	movlw	1
 11620  004D06  0100               	movlb	0	; () banked
 11621  004D08  6F84               	movwf	___awmod@counter& (0+255),b
 11622  004D0A  D006               	goto	l9246
 11623  004D0C                     l9244:
 11624                           
 11625                           ; BSR set to: 0
 11626  004D0C  0100               	movlb	0	; () banked
 11627  004D0E  90D8               	bcf	status,0,c
 11628  004D10  3782               	rlcf	___awmod@divisor& (0+255),f,b
 11629  004D12  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
 11630  004D14  0100               	movlb	0	; () banked
 11631  004D16  2B84               	incf	___awmod@counter& (0+255),f,b
 11632  004D18                     l9246:
 11633                           
 11634                           ; BSR set to: 0
 11635  004D18  0100               	movlb	0	; () banked
 11636  004D1A  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
 11637  004D1C  D7F7               	goto	l9244
 11638  004D1E                     l9248:
 11639                           
 11640                           ; BSR set to: 0
 11641  004D1E  0100               	movlb	0	; () banked
 11642  004D20  5182               	movf	___awmod@divisor& (0+255),w,b
 11643  004D22  0100               	movlb	0	; () banked
 11644  004D24  5D80               	subwf	___awmod@dividend& (0+255),w,b
 11645  004D26  0100               	movlb	0	; () banked
 11646  004D28  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
 11647  004D2A  0100               	movlb	0	; () banked
 11648  004D2C  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
 11649  004D2E  A0D8               	btfss	status,0,c
 11650  004D30  D008               	goto	l9252
 11651                           
 11652                           ; BSR set to: 0
 11653  004D32  0100               	movlb	0	; () banked
 11654  004D34  5182               	movf	___awmod@divisor& (0+255),w,b
 11655  004D36  0100               	movlb	0	; () banked
 11656  004D38  5F80               	subwf	___awmod@dividend& (0+255),f,b
 11657  004D3A  0100               	movlb	0	; () banked
 11658  004D3C  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
 11659  004D3E  0100               	movlb	0	; () banked
 11660  004D40  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
 11661  004D42                     l9252:
 11662                           
 11663                           ; BSR set to: 0
 11664  004D42  0100               	movlb	0	; () banked
 11665  004D44  90D8               	bcf	status,0,c
 11666  004D46  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
 11667  004D48  3382               	rrcf	___awmod@divisor& (0+255),f,b
 11668                           
 11669                           ; BSR set to: 0
 11670  004D4A  0100               	movlb	0	; () banked
 11671  004D4C  2F84               	decfsz	___awmod@counter& (0+255),f,b
 11672  004D4E  D7E7               	goto	l9248
 11673  004D50                     l9256:
 11674                           
 11675                           ; BSR set to: 0
 11676  004D50  0100               	movlb	0	; () banked
 11677  004D52  5185               	movf	___awmod@sign& (0+255),w,b
 11678  004D54  0100               	movlb	0	; () banked
 11679  004D56  B4D8               	btfsc	status,2,c
 11680  004D58  D005               	goto	l9260
 11681                           
 11682                           ; BSR set to: 0
 11683  004D5A  0100               	movlb	0	; () banked
 11684  004D5C  6D80               	negf	___awmod@dividend& (0+255),b
 11685  004D5E  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
 11686  004D60  B0D8               	btfsc	status,0,c
 11687  004D62  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
 11688  004D64                     l9260:
 11689                           
 11690                           ; BSR set to: 0
 11691  004D64  C080  F080         	movff	___awmod@dividend,?___awmod
 11692  004D68  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
 11693  004D6C  0012               	return	
 11694  004D6E                     __end_of___awmod:
 11695                           	opt stack 0
 11696                           tblptru	equ	0xFF8
 11697                           tblptrh	equ	0xFF7
 11698                           tblptrl	equ	0xFF6
 11699                           tablat	equ	0xFF5
 11700                           prodh	equ	0xFF4
 11701                           prodl	equ	0xFF3
 11702                           intcon	equ	0xFF2
 11703                           intcon2	equ	0xFF1
 11704                           intcon3	equ	0xFF0
 11705                           postinc0	equ	0xFEE
 11706                           wreg	equ	0xFE8
 11707                           postdec1	equ	0xFE5
 11708                           fsr1l	equ	0xFE1
 11709                           indf2	equ	0xFDF
 11710                           postinc2	equ	0xFDE
 11711                           postdec2	equ	0xFDD
 11712                           fsr2h	equ	0xFDA
 11713                           fsr2l	equ	0xFD9
 11714                           status	equ	0xFD8
 11715                           
 11716 ;; *************** function ___awdiv *****************
 11717 ;; Defined at:
 11718 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
 11719 ;; Parameters:    Size  Location     Type
 11720 ;;  dividend        2    6[BANK0 ] int 
 11721 ;;  divisor         2    8[BANK0 ] int 
 11722 ;; Auto vars:     Size  Location     Type
 11723 ;;  quotient        2   12[BANK0 ] int 
 11724 ;;  sign            1   11[BANK0 ] unsigned char 
 11725 ;;  counter         1   10[BANK0 ] unsigned char 
 11726 ;; Return value:  Size  Location     Type
 11727 ;;                  2    6[BANK0 ] int 
 11728 ;; Registers used:
 11729 ;;		wreg, status,2, status,0
 11730 ;; Tracked objects:
 11731 ;;		On entry : 0/0
 11732 ;;		On exit  : 0/0
 11733 ;;		Unchanged: 0/0
 11734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11735 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11736 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11737 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11738 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11739 ;;Total ram usage:        8 bytes
 11740 ;; Hardware stack levels used:    1
 11741 ;; Hardware stack levels required when called:    7
 11742 ;; This function calls:
 11743 ;;		Nothing
 11744 ;; This function is called by:
 11745 ;;		_UI
 11746 ;;		_ID
 11747 ;; This function uses a non-reentrant model
 11748 ;;
 11749                           
 11750                           	psect	text39
 11751  004AA8                     __ptext39:
 11752                           	opt stack 0
 11753  004AA8                     ___awdiv:
 11754                           	opt stack 21
 11755                           
 11756                           ; BSR set to: 0
 11757                           ;incstack = 0
 11758  004AA8  0E00               	movlw	0
 11759  004AAA  0100               	movlb	0	; () banked
 11760  004AAC  6F8B               	movwf	___awdiv@sign& (0+255),b
 11761                           
 11762                           ; BSR set to: 0
 11763  004AAE  0100               	movlb	0	; () banked
 11764  004AB0  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 11765  004AB2  D008               	goto	l7508
 11766                           
 11767                           ; BSR set to: 0
 11768  004AB4  0100               	movlb	0	; () banked
 11769  004AB6  6D88               	negf	___awdiv@divisor& (0+255),b
 11770  004AB8  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
 11771  004ABA  B0D8               	btfsc	status,0,c
 11772  004ABC  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
 11773                           
 11774                           ; BSR set to: 0
 11775  004ABE  0E01               	movlw	1
 11776  004AC0  0100               	movlb	0	; () banked
 11777  004AC2  6F8B               	movwf	___awdiv@sign& (0+255),b
 11778  004AC4                     l7508:
 11779                           
 11780                           ; BSR set to: 0
 11781  004AC4  0100               	movlb	0	; () banked
 11782  004AC6  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
 11783  004AC8  D008               	goto	l7514
 11784                           
 11785                           ; BSR set to: 0
 11786  004ACA  0100               	movlb	0	; () banked
 11787  004ACC  6D86               	negf	___awdiv@dividend& (0+255),b
 11788  004ACE  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
 11789  004AD0  B0D8               	btfsc	status,0,c
 11790  004AD2  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
 11791                           
 11792                           ; BSR set to: 0
 11793  004AD4  0E01               	movlw	1
 11794  004AD6  0100               	movlb	0	; () banked
 11795  004AD8  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
 11796  004ADA                     l7514:
 11797                           
 11798                           ; BSR set to: 0
 11799  004ADA  0E00               	movlw	0
 11800  004ADC  0100               	movlb	0	; () banked
 11801  004ADE  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
 11802  004AE0  0E00               	movlw	0
 11803  004AE2  6F8C               	movwf	___awdiv@quotient& (0+255),b
 11804                           
 11805                           ; BSR set to: 0
 11806  004AE4  0100               	movlb	0	; () banked
 11807  004AE6  5188               	movf	___awdiv@divisor& (0+255),w,b
 11808  004AE8  0100               	movlb	0	; () banked
 11809  004AEA  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
 11810  004AEC  B4D8               	btfsc	status,2,c
 11811  004AEE  D02C               	goto	l7536
 11812                           
 11813                           ; BSR set to: 0
 11814  004AF0  0E01               	movlw	1
 11815  004AF2  0100               	movlb	0	; () banked
 11816  004AF4  6F8A               	movwf	___awdiv@counter& (0+255),b
 11817  004AF6  D006               	goto	l7522
 11818  004AF8                     l7520:
 11819                           
 11820                           ; BSR set to: 0
 11821  004AF8  0100               	movlb	0	; () banked
 11822  004AFA  90D8               	bcf	status,0,c
 11823  004AFC  3788               	rlcf	___awdiv@divisor& (0+255),f,b
 11824  004AFE  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
 11825  004B00  0100               	movlb	0	; () banked
 11826  004B02  2B8A               	incf	___awdiv@counter& (0+255),f,b
 11827  004B04                     l7522:
 11828                           
 11829                           ; BSR set to: 0
 11830  004B04  0100               	movlb	0	; () banked
 11831  004B06  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 11832  004B08  D7F7               	goto	l7520
 11833  004B0A                     l7524:
 11834                           
 11835                           ; BSR set to: 0
 11836  004B0A  0100               	movlb	0	; () banked
 11837  004B0C  90D8               	bcf	status,0,c
 11838  004B0E  378C               	rlcf	___awdiv@quotient& (0+255),f,b
 11839  004B10  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
 11840                           
 11841                           ; BSR set to: 0
 11842  004B12  0100               	movlb	0	; () banked
 11843  004B14  5188               	movf	___awdiv@divisor& (0+255),w,b
 11844  004B16  0100               	movlb	0	; () banked
 11845  004B18  5D86               	subwf	___awdiv@dividend& (0+255),w,b
 11846  004B1A  0100               	movlb	0	; () banked
 11847  004B1C  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
 11848  004B1E  0100               	movlb	0	; () banked
 11849  004B20  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
 11850  004B22  A0D8               	btfss	status,0,c
 11851  004B24  D00A               	goto	l7532
 11852                           
 11853                           ; BSR set to: 0
 11854  004B26  0100               	movlb	0	; () banked
 11855  004B28  5188               	movf	___awdiv@divisor& (0+255),w,b
 11856  004B2A  0100               	movlb	0	; () banked
 11857  004B2C  5F86               	subwf	___awdiv@dividend& (0+255),f,b
 11858  004B2E  0100               	movlb	0	; () banked
 11859  004B30  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
 11860  004B32  0100               	movlb	0	; () banked
 11861  004B34  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
 11862                           
 11863                           ; BSR set to: 0
 11864  004B36  0100               	movlb	0	; () banked
 11865  004B38  818C               	bsf	___awdiv@quotient& (0+255),0,b
 11866  004B3A                     l7532:
 11867                           
 11868                           ; BSR set to: 0
 11869  004B3A  0100               	movlb	0	; () banked
 11870  004B3C  90D8               	bcf	status,0,c
 11871  004B3E  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
 11872  004B40  3388               	rrcf	___awdiv@divisor& (0+255),f,b
 11873                           
 11874                           ; BSR set to: 0
 11875  004B42  0100               	movlb	0	; () banked
 11876  004B44  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
 11877  004B46  D7E1               	goto	l7524
 11878  004B48                     l7536:
 11879                           
 11880                           ; BSR set to: 0
 11881  004B48  0100               	movlb	0	; () banked
 11882  004B4A  518B               	movf	___awdiv@sign& (0+255),w,b
 11883  004B4C  0100               	movlb	0	; () banked
 11884  004B4E  B4D8               	btfsc	status,2,c
 11885  004B50  D005               	goto	l7540
 11886                           
 11887                           ; BSR set to: 0
 11888  004B52  0100               	movlb	0	; () banked
 11889  004B54  6D8C               	negf	___awdiv@quotient& (0+255),b
 11890  004B56  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
 11891  004B58  B0D8               	btfsc	status,0,c
 11892  004B5A  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
 11893  004B5C                     l7540:
 11894                           
 11895                           ; BSR set to: 0
 11896  004B5C  C08C  F086         	movff	___awdiv@quotient,?___awdiv
 11897  004B60  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
 11898  004B64  0012               	return	
 11899  004B66                     __end_of___awdiv:
 11900                           	opt stack 0
 11901                           tblptru	equ	0xFF8
 11902                           tblptrh	equ	0xFF7
 11903                           tblptrl	equ	0xFF6
 11904                           tablat	equ	0xFF5
 11905                           prodh	equ	0xFF4
 11906                           prodl	equ	0xFF3
 11907                           intcon	equ	0xFF2
 11908                           intcon2	equ	0xFF1
 11909                           intcon3	equ	0xFF0
 11910                           postinc0	equ	0xFEE
 11911                           wreg	equ	0xFE8
 11912                           postdec1	equ	0xFE5
 11913                           fsr1l	equ	0xFE1
 11914                           indf2	equ	0xFDF
 11915                           postinc2	equ	0xFDE
 11916                           postdec2	equ	0xFDD
 11917                           fsr2h	equ	0xFDA
 11918                           fsr2l	equ	0xFD9
 11919                           status	equ	0xFD8
 11920                           
 11921 ;; *************** function _Test *****************
 11922 ;; Defined at:
 11923 ;;		line 30 in file "Test.c"
 11924 ;; Parameters:    Size  Location     Type
 11925 ;;		None
 11926 ;; Auto vars:     Size  Location     Type
 11927 ;;		None
 11928 ;; Return value:  Size  Location     Type
 11929 ;;                  1    wreg      void 
 11930 ;; Registers used:
 11931 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11932 ;; Tracked objects:
 11933 ;;		On entry : 0/0
 11934 ;;		On exit  : 0/0
 11935 ;;		Unchanged: 0/0
 11936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11937 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11938 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11939 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11940 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11941 ;;Total ram usage:        2 bytes
 11942 ;; Hardware stack levels used:    1
 11943 ;; Hardware stack levels required when called:   11
 11944 ;; This function calls:
 11945 ;;		_BlockerTest
 11946 ;;		_BothServos
 11947 ;;		_PlatformTest
 11948 ;;		_PortTestDC
 11949 ;;		_PortTestPusher
 11950 ;;		_SpeedTest
 11951 ;;		_actuatorTest
 11952 ;;		_algorithmTest
 11953 ;;		_arm
 11954 ;;		_lcdInst
 11955 ;;		_printf
 11956 ;;		_sensorTest
 11957 ;; This function is called by:
 11958 ;;		_main
 11959 ;; This function uses a non-reentrant model
 11960 ;;
 11961                           
 11962                           	psect	text40
 11963  0043A0                     __ptext40:
 11964                           	opt stack 0
 11965  0043A0                     _Test:
 11966                           	opt stack 19
 11967                           
 11968                           ;Test.c: 32: while(machine_state == Testing_state){
 11969                           
 11970                           ; BSR set to: 0
 11971                           ;incstack = 0
 11972  0043A0  D07C               	goto	l10022
 11973  0043A2                     l9982:
 11974                           
 11975                           ;Test.c: 33: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 11976  0043A2  0E01               	movlw	1
 11977  0043A4  ECB1  F02E         	call	_lcdInst
 11978  0043A8  0E68               	movlw	104
 11979  0043AA  0100               	movlb	0	; () banked
 11980  0043AC  6FC6               	movwf	??_Test& (0+255),b
 11981  0043AE  0EE4               	movlw	228
 11982  0043B0                     u10837:
 11983  0043B0  2EE8               	decfsz	wreg,f,c
 11984  0043B2  D7FE               	bra	u10837
 11985  0043B4  2FC6               	decfsz	??_Test& (0+255),f,b
 11986  0043B6  D7FC               	bra	u10837
 11987  0043B8  F000               	nop	
 11988  0043BA  0E80               	movlw	128
 11989  0043BC  ECB1  F02E         	call	_lcdInst
 11990                           
 11991                           ;Test.c: 34: printf("2.SNR|4.HI|5.MED");
 11992  0043C0  0E74               	movlw	low STR_68
 11993  0043C2  0100               	movlb	0	; () banked
 11994  0043C4  6F8E               	movwf	printf@f& (0+255),b
 11995  0043C6  0EFC               	movlw	high STR_68
 11996  0043C8  0100               	movlb	0	; () banked
 11997  0043CA  6F8F               	movwf	(printf@f+1)& (0+255),b
 11998  0043CC  EC0C  F00E         	call	_printf	;wreg free
 11999                           
 12000                           ;Test.c: 35: lcdInst(0b11000000);;
 12001  0043D0  0EC0               	movlw	192
 12002  0043D2  ECB1  F02E         	call	_lcdInst
 12003                           
 12004                           ;Test.c: 36: printf("B.PLA|8.SV|9.BLK");
 12005  0043D6  0E85               	movlw	low STR_69
 12006  0043D8  0100               	movlb	0	; () banked
 12007  0043DA  6F8E               	movwf	printf@f& (0+255),b
 12008  0043DC  0EFC               	movlw	high STR_69
 12009  0043DE  0100               	movlb	0	; () banked
 12010  0043E0  6F8F               	movwf	(printf@f+1)& (0+255),b
 12011  0043E2  EC0C  F00E         	call	_printf	;wreg free
 12012  0043E6                     l1257:
 12013  0043E6  A281               	btfss	3969,1,c	;volatile
 12014  0043E8  D7FE               	goto	l1257
 12015                           
 12016                           ;Test.c: 38: var = PORTB >> 4;
 12017  0043EA  CF81 F0C6          	movff	3969,??_Test	;volatile
 12018  0043EE  0100               	movlb	0	; () banked
 12019  0043F0  3BC6               	swapf	??_Test& (0+255),f,b
 12020  0043F2  0E0F               	movlw	15
 12021  0043F4  17C6               	andwf	??_Test& (0+255),f,b
 12022  0043F6  0100               	movlb	0	; () banked
 12023  0043F8  51C6               	movf	??_Test& (0+255),w,b
 12024  0043FA  0101               	movlb	1	; () banked
 12025  0043FC  6F4B               	movwf	_var& (0+255),b
 12026  0043FE  6B4C               	clrf	(_var+1)& (0+255),b
 12027                           
 12028                           ; BSR set to: 1
 12029                           ;Test.c: 39: var++;
 12030  004400  0101               	movlb	1	; () banked
 12031  004402  4B4B               	infsnz	_var& (0+255),f,b
 12032  004404  2B4C               	incf	(_var+1)& (0+255),f,b
 12033  004406                     l1260:
 12034  004406  A281               	btfss	3969,1,c	;volatile
 12035  004408  D01F               	goto	l10020
 12036  00440A  D7FD               	goto	l1260
 12037  00440C                     l9998:
 12038                           
 12039                           ;Test.c: 43: algorithmTest();
 12040  00440C  ECB7  F023         	call	_algorithmTest	;wreg free
 12041                           
 12042                           ;Test.c: 44: break;
 12043  004410  D044               	goto	l10022
 12044  004412                     l10000:
 12045                           
 12046                           ;Test.c: 46: sensorTest();
 12047  004412  EC04  F017         	call	_sensorTest	;wreg free
 12048                           
 12049                           ;Test.c: 47: break;
 12050  004416  D041               	goto	l10022
 12051  004418                     l10002:
 12052                           
 12053                           ;Test.c: 49: actuatorTest();
 12054  004418  EC6D  F004         	call	_actuatorTest	;wreg free
 12055                           
 12056                           ;Test.c: 50: break;
 12057  00441C  D03E               	goto	l10022
 12058  00441E                     l10004:
 12059                           
 12060                           ;Test.c: 52: arm();
 12061  00441E  EC53  F022         	call	_arm	;wreg free
 12062                           
 12063                           ;Test.c: 53: break;
 12064  004422  D03B               	goto	l10022
 12065  004424                     l10006:
 12066                           
 12067                           ;Test.c: 55: PortTestDC();
 12068  004424  ECB7  F026         	call	_PortTestDC	;wreg free
 12069                           
 12070                           ;Test.c: 56: break;
 12071  004428  D038               	goto	l10022
 12072  00442A                     l10008:
 12073                           
 12074                           ;Test.c: 58: SpeedTest();
 12075  00442A  EC88  F027         	call	_SpeedTest	;wreg free
 12076                           
 12077                           ;Test.c: 59: break;
 12078  00442E  D035               	goto	l10022
 12079  004430                     l10010:
 12080                           
 12081                           ;Test.c: 61: PortTestPusher();
 12082  004430  EC28  F02A         	call	_PortTestPusher	;wreg free
 12083                           
 12084                           ;Test.c: 62: break;
 12085  004434  D032               	goto	l10022
 12086  004436                     l10012:
 12087                           
 12088                           ;Test.c: 64: PlatformTest();
 12089  004436  EC79  F015         	call	_PlatformTest	;wreg free
 12090                           
 12091                           ;Test.c: 65: break;
 12092  00443A  D02F               	goto	l10022
 12093  00443C                     l10014:
 12094                           
 12095                           ;Test.c: 67: BothServos();
 12096  00443C  EC28  F010         	call	_BothServos	;wreg free
 12097                           
 12098                           ;Test.c: 68: break;
 12099  004440  D02C               	goto	l10022
 12100  004442                     l10016:
 12101                           
 12102                           ;Test.c: 70: BlockerTest();
 12103  004442  EC32  F01F         	call	_BlockerTest	;wreg free
 12104                           
 12105                           ;Test.c: 74: }
 12106                           
 12107                           ;Test.c: 73: break;
 12108                           
 12109                           ;Test.c: 72: default:
 12110                           
 12111                           ;Test.c: 71: break;
 12112  004446  D029               	goto	l10022
 12113  004448                     l10020:
 12114  004448  C14B  F0C6         	movff	_var,??_Test
 12115  00444C  C14C  F0C7         	movff	_var+1,??_Test+1
 12116                           
 12117                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12118                           ; Switch size 1, requested type "space"
 12119                           ; Number of cases is 1, Range of values is 0 to 0
 12120                           ; switch strategies available:
 12121                           ; Name         Instructions Cycles
 12122                           ; simple_byte            4     3 (average)
 12123                           ;	Chosen strategy is simple_byte
 12124  004450  0100               	movlb	0	; () banked
 12125  004452  51C7               	movf	(??_Test+1)& (0+255),w,b
 12126  004454  0A00               	xorlw	0	; case 0
 12127  004456  A4D8               	btfss	status,2,c
 12128  004458  D020               	goto	l10022
 12129                           
 12130                           ; BSR set to: 0
 12131                           ; Switch size 1, requested type "space"
 12132                           ; Number of cases is 10, Range of values is 1 to 11
 12133                           ; switch strategies available:
 12134                           ; Name         Instructions Cycles
 12135                           ; simple_byte           31    16 (average)
 12136                           ;	Chosen strategy is simple_byte
 12137  00445A  0100               	movlb	0	; () banked
 12138  00445C  51C6               	movf	??_Test& (0+255),w,b
 12139  00445E  0A01               	xorlw	1	; case 1
 12140  004460  B4D8               	btfsc	status,2,c
 12141  004462  D7D4               	goto	l9998
 12142  004464  0A03               	xorlw	3	; case 2
 12143  004466  B4D8               	btfsc	status,2,c
 12144  004468  D7D4               	goto	l10000
 12145  00446A  0A01               	xorlw	1	; case 3
 12146  00446C  B4D8               	btfsc	status,2,c
 12147  00446E  D7D4               	goto	l10002
 12148  004470  0A07               	xorlw	7	; case 4
 12149  004472  B4D8               	btfsc	status,2,c
 12150  004474  D7D4               	goto	l10004
 12151  004476  0A01               	xorlw	1	; case 5
 12152  004478  B4D8               	btfsc	status,2,c
 12153  00447A  D7D4               	goto	l10006
 12154  00447C  0A03               	xorlw	3	; case 6
 12155  00447E  B4D8               	btfsc	status,2,c
 12156  004480  D7D4               	goto	l10008
 12157  004482  0A01               	xorlw	1	; case 7
 12158  004484  B4D8               	btfsc	status,2,c
 12159  004486  D7D4               	goto	l10010
 12160  004488  0A0F               	xorlw	15	; case 8
 12161  00448A  B4D8               	btfsc	status,2,c
 12162  00448C  D7D4               	goto	l10012
 12163  00448E  0A02               	xorlw	2	; case 10
 12164  004490  B4D8               	btfsc	status,2,c
 12165  004492  D7D4               	goto	l10014
 12166  004494  0A01               	xorlw	1	; case 11
 12167  004496  B4D8               	btfsc	status,2,c
 12168  004498  D7D4               	goto	l10016
 12169  00449A                     l10022:
 12170  00449A  0E03               	movlw	3
 12171  00449C  0100               	movlb	0	; () banked
 12172  00449E  19FC               	xorwf	_machine_state& (0+255),w,b
 12173  0044A0  A4D8               	btfss	status,2,c
 12174  0044A2  0012               	return	
 12175  0044A4  D77E               	goto	l9982
 12176  0044A6                     __end_of_Test:
 12177                           	opt stack 0
 12178                           tblptru	equ	0xFF8
 12179                           tblptrh	equ	0xFF7
 12180                           tblptrl	equ	0xFF6
 12181                           tablat	equ	0xFF5
 12182                           prodh	equ	0xFF4
 12183                           prodl	equ	0xFF3
 12184                           intcon	equ	0xFF2
 12185                           intcon2	equ	0xFF1
 12186                           intcon3	equ	0xFF0
 12187                           postinc0	equ	0xFEE
 12188                           wreg	equ	0xFE8
 12189                           postdec1	equ	0xFE5
 12190                           fsr1l	equ	0xFE1
 12191                           indf2	equ	0xFDF
 12192                           postinc2	equ	0xFDE
 12193                           postdec2	equ	0xFDD
 12194                           fsr2h	equ	0xFDA
 12195                           fsr2l	equ	0xFD9
 12196                           status	equ	0xFD8
 12197                           
 12198 ;; *************** function _sensorTest *****************
 12199 ;; Defined at:
 12200 ;;		line 122 in file "Test.c"
 12201 ;; Parameters:    Size  Location     Type
 12202 ;;		None
 12203 ;; Auto vars:     Size  Location     Type
 12204 ;;  res             2   45[BANK0 ] int 
 12205 ;; Return value:  Size  Location     Type
 12206 ;;                  1    wreg      void 
 12207 ;; Registers used:
 12208 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12209 ;; Tracked objects:
 12210 ;;		On entry : 0/0
 12211 ;;		On exit  : 0/0
 12212 ;;		Unchanged: 0/0
 12213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12214 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12215 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12216 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12217 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12218 ;;Total ram usage:        4 bytes
 12219 ;; Hardware stack levels used:    1
 12220 ;; Hardware stack levels required when called:   10
 12221 ;; This function calls:
 12222 ;;		_lcdInst
 12223 ;;		_printf
 12224 ;;		_readADC
 12225 ;;		_readMAG
 12226 ;; This function is called by:
 12227 ;;		_Test
 12228 ;; This function uses a non-reentrant model
 12229 ;;
 12230                           
 12231                           	psect	text41
 12232  002E08                     __ptext41:
 12233                           	opt stack 0
 12234  002E08                     _sensorTest:
 12235                           	opt stack 19
 12236                           
 12237                           ;Test.c: 124: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12238                           
 12239                           ; BSR set to: 0
 12240                           ;incstack = 0
 12241  002E08  0E01               	movlw	1
 12242  002E0A  ECB1  F02E         	call	_lcdInst
 12243  002E0E  0E68               	movlw	104
 12244  002E10  0100               	movlb	0	; () banked
 12245  002E12  6FAB               	movwf	??_sensorTest& (0+255),b
 12246  002E14  0EE4               	movlw	228
 12247  002E16                     u10847:
 12248  002E16  2EE8               	decfsz	wreg,f,c
 12249  002E18  D7FE               	bra	u10847
 12250  002E1A  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12251  002E1C  D7FC               	bra	u10847
 12252  002E1E  F000               	nop	
 12253  002E20  0E80               	movlw	128
 12254  002E22  ECB1  F02E         	call	_lcdInst
 12255                           
 12256                           ;Test.c: 125: printf("SENSORS");
 12257  002E26  0EAD               	movlw	low STR_77
 12258  002E28  0100               	movlb	0	; () banked
 12259  002E2A  6F8E               	movwf	printf@f& (0+255),b
 12260  002E2C  0EFF               	movlw	high STR_77
 12261  002E2E  0100               	movlb	0	; () banked
 12262  002E30  6F8F               	movwf	(printf@f+1)& (0+255),b
 12263  002E32  EC0C  F00E         	call	_printf	;wreg free
 12264                           
 12265                           ;Test.c: 126: lcdInst(0b11000000);;
 12266  002E36  0EC0               	movlw	192
 12267  002E38  ECB1  F02E         	call	_lcdInst
 12268                           
 12269                           ;Test.c: 127: printf("PUSH TO START");
 12270  002E3C  0E2D               	movlw	low STR_71
 12271  002E3E  0100               	movlb	0	; () banked
 12272  002E40  6F8E               	movwf	printf@f& (0+255),b
 12273  002E42  0EFF               	movlw	high STR_71
 12274  002E44  0100               	movlb	0	; () banked
 12275  002E46  6F8F               	movwf	(printf@f+1)& (0+255),b
 12276  002E48  EC0C  F00E         	call	_printf	;wreg free
 12277                           
 12278                           ;Test.c: 128: _delay((unsigned long)((100)*(32000000/4000.0)));
 12279  002E4C  0E05               	movlw	5
 12280  002E4E  0100               	movlb	0	; () banked
 12281  002E50  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 12282  002E52  0E0F               	movlw	15
 12283  002E54  0100               	movlb	0	; () banked
 12284  002E56  6FAB               	movwf	??_sensorTest& (0+255),b
 12285  002E58  0EF1               	movlw	241
 12286  002E5A                     u10857:
 12287  002E5A  2EE8               	decfsz	wreg,f,c
 12288  002E5C  D7FE               	bra	u10857
 12289  002E5E  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12290  002E60  D7FC               	bra	u10857
 12291  002E62  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 12292  002E64  D7FA               	bra	u10857
 12293  002E66                     l1289:
 12294  002E66  A281               	btfss	3969,1,c	;volatile
 12295  002E68  D7FE               	goto	l1289
 12296  002E6A                     l1292:
 12297  002E6A  B281               	btfsc	3969,1,c	;volatile
 12298  002E6C  D7FE               	goto	l1292
 12299                           
 12300                           ;Test.c: 131: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12301  002E6E  0E01               	movlw	1
 12302  002E70  ECB1  F02E         	call	_lcdInst
 12303  002E74  0E68               	movlw	104
 12304  002E76  0100               	movlb	0	; () banked
 12305  002E78  6FAB               	movwf	??_sensorTest& (0+255),b
 12306  002E7A  0EE4               	movlw	228
 12307  002E7C                     u10867:
 12308  002E7C  2EE8               	decfsz	wreg,f,c
 12309  002E7E  D7FE               	bra	u10867
 12310  002E80  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12311  002E82  D7FC               	bra	u10867
 12312  002E84  F000               	nop	
 12313  002E86  0E80               	movlw	128
 12314  002E88  ECB1  F02E         	call	_lcdInst
 12315                           
 12316                           ;Test.c: 136: printf("TST: IR SNSR");
 12317  002E8C  0E57               	movlw	low STR_79
 12318  002E8E  0100               	movlb	0	; () banked
 12319  002E90  6F8E               	movwf	printf@f& (0+255),b
 12320  002E92  0EFF               	movlw	high STR_79
 12321  002E94  0100               	movlb	0	; () banked
 12322  002E96  6F8F               	movwf	(printf@f+1)& (0+255),b
 12323  002E98  EC0C  F00E         	call	_printf	;wreg free
 12324                           
 12325                           ;Test.c: 137: _delay((unsigned long)((100)*(32000000/4000.0)));
 12326  002E9C  0E05               	movlw	5
 12327  002E9E  0100               	movlb	0	; () banked
 12328  002EA0  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 12329  002EA2  0E0F               	movlw	15
 12330  002EA4  0100               	movlb	0	; () banked
 12331  002EA6  6FAB               	movwf	??_sensorTest& (0+255),b
 12332  002EA8  0EF1               	movlw	241
 12333  002EAA                     u10877:
 12334  002EAA  2EE8               	decfsz	wreg,f,c
 12335  002EAC  D7FE               	bra	u10877
 12336  002EAE  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12337  002EB0  D7FC               	bra	u10877
 12338  002EB2  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 12339  002EB4  D7FA               	bra	u10877
 12340                           
 12341                           ;Test.c: 138: LATCbits.LATC5 = 1;
 12342  002EB6  8A8B               	bsf	3979,5,c	;volatile
 12343                           
 12344                           ;Test.c: 140: while(PORTBbits.RB1 == 0){
 12345  002EB8  D05C               	goto	l8350
 12346  002EBA                     l8332:
 12347                           
 12348                           ;Test.c: 141: readADC(0);
 12349  002EBA  0E00               	movlw	0
 12350  002EBC  EC9C  F02D         	call	_readADC
 12351                           
 12352                           ;Test.c: 142: int res = ADRESH<<8 | ADRESL;
 12353  002EC0  50C3               	movf	4035,w,c	;volatile
 12354  002EC2  CFC4 F0AB          	movff	4036,??_sensorTest	;volatile
 12355  002EC6  0100               	movlb	0	; () banked
 12356  002EC8  6BAC               	clrf	(??_sensorTest+1)& (0+255),b
 12357  002ECA  C0AB  F0AC         	movff	??_sensorTest,??_sensorTest+1
 12358  002ECE  0100               	movlb	0	; () banked
 12359  002ED0  6BAB               	clrf	??_sensorTest& (0+255),b
 12360  002ED2  0100               	movlb	0	; () banked
 12361  002ED4  11AB               	iorwf	??_sensorTest& (0+255),w,b
 12362  002ED6  0100               	movlb	0	; () banked
 12363  002ED8  6FAD               	movwf	sensorTest@res& (0+255),b
 12364  002EDA  0100               	movlb	0	; () banked
 12365  002EDC  51AC               	movf	(??_sensorTest+1)& (0+255),w,b
 12366  002EDE  0100               	movlb	0	; () banked
 12367  002EE0  6FAE               	movwf	(sensorTest@res+1)& (0+255),b
 12368                           
 12369                           ; BSR set to: 0
 12370                           ;Test.c: 143: IR_signal = (res > 800) ? 1 : 0;
 12371  002EE2  0100               	movlb	0	; () banked
 12372  002EE4  BFAE               	btfsc	(sensorTest@res+1)& (0+255),7,b
 12373  002EE6  D00A               	goto	u7390
 12374  002EE8  0E21               	movlw	33
 12375  002EEA  0100               	movlb	0	; () banked
 12376  002EEC  5DAD               	subwf	sensorTest@res& (0+255),w,b
 12377  002EEE  0E03               	movlw	3
 12378  002EF0  0100               	movlb	0	; () banked
 12379  002EF2  59AE               	subwfb	(sensorTest@res+1)& (0+255),w,b
 12380  002EF4  A0D8               	btfss	status,0,c
 12381  002EF6  D002               	goto	u7390
 12382  002EF8  0E01               	movlw	1
 12383  002EFA  D001               	goto	u7400
 12384  002EFC                     u7390:
 12385  002EFC  0E00               	movlw	0
 12386  002EFE                     u7400:
 12387  002EFE  0100               	movlb	0	; () banked
 12388  002F00  6FE0               	movwf	_IR_signal& (0+255),b
 12389  002F02  6BE1               	clrf	(_IR_signal+1)& (0+255),b
 12390                           
 12391                           ;Test.c: 145: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12392  002F04  0E01               	movlw	1
 12393  002F06  ECB1  F02E         	call	_lcdInst
 12394  002F0A  0E68               	movlw	104
 12395  002F0C  0100               	movlb	0	; () banked
 12396  002F0E  6FAB               	movwf	??_sensorTest& (0+255),b
 12397  002F10  0EE4               	movlw	228
 12398  002F12                     u10887:
 12399  002F12  2EE8               	decfsz	wreg,f,c
 12400  002F14  D7FE               	bra	u10887
 12401  002F16  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12402  002F18  D7FC               	bra	u10887
 12403  002F1A  F000               	nop	
 12404  002F1C  0E80               	movlw	128
 12405  002F1E  ECB1  F02E         	call	_lcdInst
 12406                           
 12407                           ;Test.c: 146: printf("IR_signal: %d ", IR_signal);
 12408  002F22  0E7C               	movlw	low STR_80
 12409  002F24  0100               	movlb	0	; () banked
 12410  002F26  6F8E               	movwf	printf@f& (0+255),b
 12411  002F28  0EFE               	movlw	high STR_80
 12412  002F2A  0100               	movlb	0	; () banked
 12413  002F2C  6F8F               	movwf	(printf@f+1)& (0+255),b
 12414  002F2E  C0E0  F090         	movff	_IR_signal,?_printf+2
 12415  002F32  C0E1  F091         	movff	_IR_signal+1,?_printf+3
 12416  002F36  EC0C  F00E         	call	_printf	;wreg free
 12417                           
 12418                           ;Test.c: 147: lcdInst(0b11000000);;
 12419  002F3A  0EC0               	movlw	192
 12420  002F3C  ECB1  F02E         	call	_lcdInst
 12421                           
 12422                           ;Test.c: 148: printf("%d", res);
 12423  002F40  0E09               	movlw	low (STR_27+14)
 12424  002F42  0100               	movlb	0	; () banked
 12425  002F44  6F8E               	movwf	printf@f& (0+255),b
 12426  002F46  0EFE               	movlw	high (STR_27+14)
 12427  002F48  0100               	movlb	0	; () banked
 12428  002F4A  6F8F               	movwf	(printf@f+1)& (0+255),b
 12429  002F4C  C0AD  F090         	movff	sensorTest@res,?_printf+2
 12430  002F50  C0AE  F091         	movff	sensorTest@res+1,?_printf+3
 12431  002F54  EC0C  F00E         	call	_printf	;wreg free
 12432                           
 12433                           ;Test.c: 149: _delay((unsigned long)((100)*(32000000/4000.0)));
 12434  002F58  0E05               	movlw	5
 12435  002F5A  0100               	movlb	0	; () banked
 12436  002F5C  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 12437  002F5E  0E0F               	movlw	15
 12438  002F60  0100               	movlb	0	; () banked
 12439  002F62  6FAB               	movwf	??_sensorTest& (0+255),b
 12440  002F64  0EF1               	movlw	241
 12441  002F66                     u10897:
 12442  002F66  2EE8               	decfsz	wreg,f,c
 12443  002F68  D7FE               	bra	u10897
 12444  002F6A  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12445  002F6C  D7FC               	bra	u10897
 12446  002F6E  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 12447  002F70  D7FA               	bra	u10897
 12448  002F72                     l8350:
 12449  002F72  A281               	btfss	3969,1,c	;volatile
 12450  002F74  D7A2               	goto	l8332
 12451                           
 12452                           ;Test.c: 150: }
 12453                           ;Test.c: 151: LATCbits.LATC5 = 0;
 12454  002F76  9A8B               	bcf	3979,5,c	;volatile
 12455                           
 12456                           ;Test.c: 159: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12457  002F78  0E01               	movlw	1
 12458  002F7A  ECB1  F02E         	call	_lcdInst
 12459  002F7E  0E68               	movlw	104
 12460  002F80  0100               	movlb	0	; () banked
 12461  002F82  6FAB               	movwf	??_sensorTest& (0+255),b
 12462  002F84  0EE4               	movlw	228
 12463  002F86                     u10907:
 12464  002F86  2EE8               	decfsz	wreg,f,c
 12465  002F88  D7FE               	bra	u10907
 12466  002F8A  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12467  002F8C  D7FC               	bra	u10907
 12468  002F8E  F000               	nop	
 12469  002F90  0E80               	movlw	128
 12470  002F92  ECB1  F02E         	call	_lcdInst
 12471                           
 12472                           ;Test.c: 160: printf("TST: MAGNETISM");
 12473  002F96  0EA9               	movlw	low STR_82
 12474  002F98  0100               	movlb	0	; () banked
 12475  002F9A  6F8E               	movwf	printf@f& (0+255),b
 12476  002F9C  0EFE               	movlw	high STR_82
 12477  002F9E  0100               	movlb	0	; () banked
 12478  002FA0  6F8F               	movwf	(printf@f+1)& (0+255),b
 12479  002FA2  EC0C  F00E         	call	_printf	;wreg free
 12480                           
 12481                           ;Test.c: 161: _delay((unsigned long)((100)*(32000000/4000.0)));
 12482  002FA6  0E05               	movlw	5
 12483  002FA8  0100               	movlb	0	; () banked
 12484  002FAA  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 12485  002FAC  0E0F               	movlw	15
 12486  002FAE  0100               	movlb	0	; () banked
 12487  002FB0  6FAB               	movwf	??_sensorTest& (0+255),b
 12488  002FB2  0EF1               	movlw	241
 12489  002FB4                     u10917:
 12490  002FB4  2EE8               	decfsz	wreg,f,c
 12491  002FB6  D7FE               	bra	u10917
 12492  002FB8  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12493  002FBA  D7FC               	bra	u10917
 12494  002FBC  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 12495  002FBE  D7FA               	bra	u10917
 12496                           
 12497                           ;Test.c: 162: while(PORTBbits.RB1 == 0){
 12498  002FC0  D021               	goto	l8368
 12499  002FC2                     l8362:
 12500                           
 12501                           ;Test.c: 163: readMAG();
 12502  002FC2  EC1F  F02B         	call	_readMAG	;wreg free
 12503                           
 12504                           ;Test.c: 164: lcdInst(0b10000000);;
 12505  002FC6  0E80               	movlw	128
 12506  002FC8  ECB1  F02E         	call	_lcdInst
 12507                           
 12508                           ;Test.c: 165: lcdInst(0b11000000);;
 12509  002FCC  0EC0               	movlw	192
 12510  002FCE  ECB1  F02E         	call	_lcdInst
 12511                           
 12512                           ;Test.c: 166: printf("MAG_signal: %d ", MAG_signal);
 12513  002FD2  0E1D               	movlw	low STR_83
 12514  002FD4  0100               	movlb	0	; () banked
 12515  002FD6  6F8E               	movwf	printf@f& (0+255),b
 12516  002FD8  0EFE               	movlw	high STR_83
 12517  002FDA  0100               	movlb	0	; () banked
 12518  002FDC  6F8F               	movwf	(printf@f+1)& (0+255),b
 12519  002FDE  C0E2  F090         	movff	_MAG_signal,?_printf+2
 12520  002FE2  C0E3  F091         	movff	_MAG_signal+1,?_printf+3
 12521  002FE6  EC0C  F00E         	call	_printf	;wreg free
 12522                           
 12523                           ;Test.c: 167: _delay((unsigned long)((100)*(32000000/4000.0)));
 12524  002FEA  0E05               	movlw	5
 12525  002FEC  0100               	movlb	0	; () banked
 12526  002FEE  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 12527  002FF0  0E0F               	movlw	15
 12528  002FF2  0100               	movlb	0	; () banked
 12529  002FF4  6FAB               	movwf	??_sensorTest& (0+255),b
 12530  002FF6  0EF1               	movlw	241
 12531  002FF8                     u10927:
 12532  002FF8  2EE8               	decfsz	wreg,f,c
 12533  002FFA  D7FE               	bra	u10927
 12534  002FFC  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12535  002FFE  D7FC               	bra	u10927
 12536  003000  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 12537  003002  D7FA               	bra	u10927
 12538  003004                     l8368:
 12539  003004  A281               	btfss	3969,1,c	;volatile
 12540  003006  D7DD               	goto	l8362
 12541                           
 12542                           ;Test.c: 168: }
 12543                           ;Test.c: 173: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12544  003008  0E01               	movlw	1
 12545  00300A  ECB1  F02E         	call	_lcdInst
 12546  00300E  0E68               	movlw	104
 12547  003010  0100               	movlb	0	; () banked
 12548  003012  6FAB               	movwf	??_sensorTest& (0+255),b
 12549  003014  0EE4               	movlw	228
 12550  003016                     u10937:
 12551  003016  2EE8               	decfsz	wreg,f,c
 12552  003018  D7FE               	bra	u10937
 12553  00301A  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12554  00301C  D7FC               	bra	u10937
 12555  00301E  F000               	nop	
 12556  003020  0E80               	movlw	128
 12557  003022  ECB1  F02E         	call	_lcdInst
 12558                           
 12559                           ;Test.c: 174: printf("TST: COND");
 12560  003026  0E86               	movlw	low STR_84
 12561  003028  0100               	movlb	0	; () banked
 12562  00302A  6F8E               	movwf	printf@f& (0+255),b
 12563  00302C  0EFF               	movlw	high STR_84
 12564  00302E  0100               	movlb	0	; () banked
 12565  003030  6F8F               	movwf	(printf@f+1)& (0+255),b
 12566  003032  EC0C  F00E         	call	_printf	;wreg free
 12567                           
 12568                           ;Test.c: 175: _delay((unsigned long)((100)*(32000000/4000.0)));
 12569  003036  0E05               	movlw	5
 12570  003038  0100               	movlb	0	; () banked
 12571  00303A  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 12572  00303C  0E0F               	movlw	15
 12573  00303E  0100               	movlb	0	; () banked
 12574  003040  6FAB               	movwf	??_sensorTest& (0+255),b
 12575  003042  0EF1               	movlw	241
 12576  003044                     u10947:
 12577  003044  2EE8               	decfsz	wreg,f,c
 12578  003046  D7FE               	bra	u10947
 12579  003048  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12580  00304A  D7FC               	bra	u10947
 12581  00304C  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 12582  00304E  D7FA               	bra	u10947
 12583  003050                     l8380:
 12584                           
 12585                           ;Test.c: 177: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12586  003050  0E01               	movlw	1
 12587  003052  ECB1  F02E         	call	_lcdInst
 12588  003056  0E68               	movlw	104
 12589  003058  0100               	movlb	0	; () banked
 12590  00305A  6FAB               	movwf	??_sensorTest& (0+255),b
 12591  00305C  0EE4               	movlw	228
 12592  00305E                     u10957:
 12593  00305E  2EE8               	decfsz	wreg,f,c
 12594  003060  D7FE               	bra	u10957
 12595  003062  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12596  003064  D7FC               	bra	u10957
 12597  003066  F000               	nop	
 12598  003068  0E80               	movlw	128
 12599  00306A  ECB1  F02E         	call	_lcdInst
 12600                           
 12601                           ;Test.c: 178: printf("TST: COND");
 12602  00306E  0E86               	movlw	low STR_84
 12603  003070  0100               	movlb	0	; () banked
 12604  003072  6F8E               	movwf	printf@f& (0+255),b
 12605  003074  0EFF               	movlw	high STR_84
 12606  003076  0100               	movlb	0	; () banked
 12607  003078  6F8F               	movwf	(printf@f+1)& (0+255),b
 12608  00307A  EC0C  F00E         	call	_printf	;wreg free
 12609                           
 12610                           ;Test.c: 179: while(PORTBbits.RB1 == 0){
 12611  00307E  D01B               	goto	l8392
 12612  003080                     l8388:
 12613                           
 12614                           ;Test.c: 183: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12615  003080  0E80               	movlw	128
 12616  003082  ECB1  F02E         	call	_lcdInst
 12617  003086  0EC0               	movlw	192
 12618  003088  ECB1  F02E         	call	_lcdInst
 12619                           
 12620                           ;Test.c: 184: printf("COND: %d", PORTAbits.RA2);
 12621  00308C  0EA4               	movlw	low STR_86
 12622  00308E  0100               	movlb	0	; () banked
 12623  003090  6F8E               	movwf	printf@f& (0+255),b
 12624  003092  0EFF               	movlw	high STR_86
 12625  003094  0100               	movlb	0	; () banked
 12626  003096  6F8F               	movwf	(printf@f+1)& (0+255),b
 12627  003098  A480               	btfss	3968,2,c	;volatile
 12628  00309A  D004               	goto	u7430
 12629  00309C  0100               	movlb	0	; () banked
 12630  00309E  6BAB               	clrf	??_sensorTest& (0+255),b
 12631  0030A0  2BAB               	incf	??_sensorTest& (0+255),f,b
 12632  0030A2  D002               	goto	u7438
 12633  0030A4                     u7430:
 12634  0030A4  0100               	movlb	0	; () banked
 12635  0030A6  6BAB               	clrf	??_sensorTest& (0+255),b
 12636  0030A8                     u7438:
 12637  0030A8  0100               	movlb	0	; () banked
 12638  0030AA  51AB               	movf	??_sensorTest& (0+255),w,b
 12639  0030AC  0100               	movlb	0	; () banked
 12640  0030AE  6F90               	movwf	(?_printf+2)& (0+255),b
 12641  0030B0  6B91               	clrf	(?_printf+3)& (0+255),b
 12642  0030B2  EC0C  F00E         	call	_printf	;wreg free
 12643  0030B6                     l8392:
 12644  0030B6  A281               	btfss	3969,1,c	;volatile
 12645  0030B8  D7E3               	goto	l8388
 12646                           
 12647                           ;Test.c: 185: }
 12648                           ;Test.c: 186: if(PORTB >> 4 == 0b1111){
 12649  0030BA  3881               	swapf	3969,w,c	;volatile
 12650  0030BC  0B0F               	andlw	15
 12651  0030BE  0A0F               	xorlw	15
 12652  0030C0  B4D8               	btfsc	status,2,c
 12653  0030C2  0012               	return	
 12654                           
 12655                           ;Test.c: 189: else{
 12656                           ;Test.c: 190: LATAbits.LATA3 = 1;
 12657                           
 12658                           ;Test.c: 188: }
 12659                           
 12660                           ;Test.c: 187: break;
 12661  0030C4  8689               	bsf	3977,3,c	;volatile
 12662                           
 12663                           ;Test.c: 191: while(PORTBbits.RB1 == 1){
 12664  0030C6  D01B               	goto	l8404
 12665  0030C8                     l8400:
 12666                           
 12667                           ;Test.c: 193: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12668  0030C8  0E80               	movlw	128
 12669  0030CA  ECB1  F02E         	call	_lcdInst
 12670  0030CE  0EC0               	movlw	192
 12671  0030D0  ECB1  F02E         	call	_lcdInst
 12672                           
 12673                           ;Test.c: 194: printf("COND: %d", PORTAbits.RA2);
 12674  0030D4  0EA4               	movlw	low STR_86
 12675  0030D6  0100               	movlb	0	; () banked
 12676  0030D8  6F8E               	movwf	printf@f& (0+255),b
 12677  0030DA  0EFF               	movlw	high STR_86
 12678  0030DC  0100               	movlb	0	; () banked
 12679  0030DE  6F8F               	movwf	(printf@f+1)& (0+255),b
 12680  0030E0  A480               	btfss	3968,2,c	;volatile
 12681  0030E2  D004               	goto	u7460
 12682  0030E4  0100               	movlb	0	; () banked
 12683  0030E6  6BAB               	clrf	??_sensorTest& (0+255),b
 12684  0030E8  2BAB               	incf	??_sensorTest& (0+255),f,b
 12685  0030EA  D002               	goto	u7468
 12686  0030EC                     u7460:
 12687  0030EC  0100               	movlb	0	; () banked
 12688  0030EE  6BAB               	clrf	??_sensorTest& (0+255),b
 12689  0030F0                     u7468:
 12690  0030F0  0100               	movlb	0	; () banked
 12691  0030F2  51AB               	movf	??_sensorTest& (0+255),w,b
 12692  0030F4  0100               	movlb	0	; () banked
 12693  0030F6  6F90               	movwf	(?_printf+2)& (0+255),b
 12694  0030F8  6B91               	clrf	(?_printf+3)& (0+255),b
 12695  0030FA  EC0C  F00E         	call	_printf	;wreg free
 12696  0030FE                     l8404:
 12697  0030FE  B281               	btfsc	3969,1,c	;volatile
 12698  003100  D7E3               	goto	l8400
 12699                           
 12700                           ;Test.c: 195: }
 12701                           ;Test.c: 196: LATAbits.LATA3 = !1;
 12702  003102  9689               	bcf	3977,3,c	;volatile
 12703  003104  D7A5               	goto	l8380
 12704  003106                     __end_of_sensorTest:
 12705                           	opt stack 0
 12706                           tblptru	equ	0xFF8
 12707                           tblptrh	equ	0xFF7
 12708                           tblptrl	equ	0xFF6
 12709                           tablat	equ	0xFF5
 12710                           prodh	equ	0xFF4
 12711                           prodl	equ	0xFF3
 12712                           intcon	equ	0xFF2
 12713                           intcon2	equ	0xFF1
 12714                           intcon3	equ	0xFF0
 12715                           postinc0	equ	0xFEE
 12716                           wreg	equ	0xFE8
 12717                           postdec1	equ	0xFE5
 12718                           fsr1l	equ	0xFE1
 12719                           indf2	equ	0xFDF
 12720                           postinc2	equ	0xFDE
 12721                           postdec2	equ	0xFDD
 12722                           fsr2h	equ	0xFDA
 12723                           fsr2l	equ	0xFD9
 12724                           status	equ	0xFD8
 12725                           
 12726 ;; *************** function _readMAG *****************
 12727 ;; Defined at:
 12728 ;;		line 29 in file "ADCFunctionality.c"
 12729 ;; Parameters:    Size  Location     Type
 12730 ;;		None
 12731 ;; Auto vars:     Size  Location     Type
 12732 ;;  res             2    4[BANK0 ] int 
 12733 ;; Return value:  Size  Location     Type
 12734 ;;                  1    wreg      void 
 12735 ;; Registers used:
 12736 ;;		wreg, status,2, status,0, cstack
 12737 ;; Tracked objects:
 12738 ;;		On entry : 0/0
 12739 ;;		On exit  : 0/0
 12740 ;;		Unchanged: 0/0
 12741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12742 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12743 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12744 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12745 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12746 ;;Total ram usage:        4 bytes
 12747 ;; Hardware stack levels used:    1
 12748 ;; Hardware stack levels required when called:    8
 12749 ;; This function calls:
 12750 ;;		_readADC
 12751 ;; This function is called by:
 12752 ;;		_getMAG
 12753 ;;		_sensorTest
 12754 ;; This function uses a non-reentrant model
 12755 ;;
 12756                           
 12757                           	psect	text42
 12758  00563E                     __ptext42:
 12759                           	opt stack 0
 12760  00563E                     _readMAG:
 12761                           	opt stack 19
 12762                           
 12763                           ;ADCFunctionality.c: 30: readADC(1);
 12764                           
 12765                           ;incstack = 0
 12766  00563E  0E01               	movlw	1
 12767  005640  EC9C  F02D         	call	_readADC
 12768                           
 12769                           ;ADCFunctionality.c: 31: int res = ADRESH<<8 | ADRESL;
 12770  005644  50C3               	movf	4035,w,c	;volatile
 12771  005646  CFC4 F082          	movff	4036,??_readMAG	;volatile
 12772  00564A  0100               	movlb	0	; () banked
 12773  00564C  6B83               	clrf	(??_readMAG+1)& (0+255),b
 12774  00564E  C082  F083         	movff	??_readMAG,??_readMAG+1
 12775  005652  0100               	movlb	0	; () banked
 12776  005654  6B82               	clrf	??_readMAG& (0+255),b
 12777  005656  0100               	movlb	0	; () banked
 12778  005658  1182               	iorwf	??_readMAG& (0+255),w,b
 12779  00565A  0100               	movlb	0	; () banked
 12780  00565C  6F84               	movwf	readMAG@res& (0+255),b
 12781  00565E  0100               	movlb	0	; () banked
 12782  005660  5183               	movf	(??_readMAG+1)& (0+255),w,b
 12783  005662  0100               	movlb	0	; () banked
 12784  005664  6F85               	movwf	(readMAG@res+1)& (0+255),b
 12785                           
 12786                           ; BSR set to: 0
 12787                           ;ADCFunctionality.c: 32: MAG_signal = (res < 150) ? 1 : 0;
 12788  005666  0100               	movlb	0	; () banked
 12789  005668  BF85               	btfsc	(readMAG@res+1)& (0+255),7,b
 12790  00566A  D008               	goto	u5371
 12791  00566C  0100               	movlb	0	; () banked
 12792  00566E  5185               	movf	(readMAG@res+1)& (0+255),w,b
 12793  005670  E107               	bnz	u5370
 12794  005672  0E96               	movlw	150
 12795  005674  0100               	movlb	0	; () banked
 12796  005676  5D84               	subwf	readMAG@res& (0+255),w,b
 12797  005678  B0D8               	btfsc	status,0,c
 12798  00567A  D002               	goto	u5370
 12799  00567C                     u5371:
 12800  00567C  0E01               	movlw	1
 12801  00567E  D001               	goto	u5380
 12802  005680                     u5370:
 12803  005680  0E00               	movlw	0
 12804  005682                     u5380:
 12805  005682  0100               	movlb	0	; () banked
 12806  005684  6FE2               	movwf	_MAG_signal& (0+255),b
 12807  005686  6BE3               	clrf	(_MAG_signal+1)& (0+255),b
 12808                           
 12809                           ; BSR set to: 0
 12810  005688  0012               	return		;funcret
 12811  00568A                     __end_of_readMAG:
 12812                           	opt stack 0
 12813                           tblptru	equ	0xFF8
 12814                           tblptrh	equ	0xFF7
 12815                           tblptrl	equ	0xFF6
 12816                           tablat	equ	0xFF5
 12817                           prodh	equ	0xFF4
 12818                           prodl	equ	0xFF3
 12819                           intcon	equ	0xFF2
 12820                           intcon2	equ	0xFF1
 12821                           intcon3	equ	0xFF0
 12822                           postinc0	equ	0xFEE
 12823                           wreg	equ	0xFE8
 12824                           postdec1	equ	0xFE5
 12825                           fsr1l	equ	0xFE1
 12826                           indf2	equ	0xFDF
 12827                           postinc2	equ	0xFDE
 12828                           postdec2	equ	0xFDD
 12829                           fsr2h	equ	0xFDA
 12830                           fsr2l	equ	0xFD9
 12831                           status	equ	0xFD8
 12832                           
 12833 ;; *************** function _arm *****************
 12834 ;; Defined at:
 12835 ;;		line 616 in file "Test.c"
 12836 ;; Parameters:    Size  Location     Type
 12837 ;;		None
 12838 ;; Auto vars:     Size  Location     Type
 12839 ;;  on              2   44[BANK0 ] int 
 12840 ;; Return value:  Size  Location     Type
 12841 ;;                  1    wreg      void 
 12842 ;; Registers used:
 12843 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12844 ;; Tracked objects:
 12845 ;;		On entry : 0/0
 12846 ;;		On exit  : 0/0
 12847 ;;		Unchanged: 0/0
 12848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12849 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12850 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12851 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12852 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12853 ;;Total ram usage:        3 bytes
 12854 ;; Hardware stack levels used:    1
 12855 ;; Hardware stack levels required when called:   10
 12856 ;; This function calls:
 12857 ;;		_lcdInst
 12858 ;;		_printf
 12859 ;;		_stopSignals
 12860 ;; This function is called by:
 12861 ;;		_Test
 12862 ;; This function uses a non-reentrant model
 12863 ;;
 12864                           
 12865                           	psect	text43
 12866  0044A6                     __ptext43:
 12867                           	opt stack 0
 12868  0044A6                     _arm:
 12869                           	opt stack 19
 12870                           
 12871                           ;Test.c: 617: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12872                           
 12873                           ; BSR set to: 0
 12874                           ;incstack = 0
 12875  0044A6  0E01               	movlw	1
 12876  0044A8  ECB1  F02E         	call	_lcdInst
 12877  0044AC  0E68               	movlw	104
 12878  0044AE  0100               	movlb	0	; () banked
 12879  0044B0  6FAB               	movwf	??_arm& (0+255),b
 12880  0044B2  0EE4               	movlw	228
 12881  0044B4                     u10967:
 12882  0044B4  2EE8               	decfsz	wreg,f,c
 12883  0044B6  D7FE               	bra	u10967
 12884  0044B8  2FAB               	decfsz	??_arm& (0+255),f,b
 12885  0044BA  D7FC               	bra	u10967
 12886  0044BC  F000               	nop	
 12887  0044BE  0E80               	movlw	128
 12888  0044C0  ECB1  F02E         	call	_lcdInst
 12889                           
 12890                           ;Test.c: 618: printf("D WILL RETURN   ");
 12891  0044C4  0EEC               	movlw	low STR_124
 12892  0044C6  0100               	movlb	0	; () banked
 12893  0044C8  6F8E               	movwf	printf@f& (0+255),b
 12894  0044CA  0EFB               	movlw	high STR_124
 12895  0044CC  0100               	movlb	0	; () banked
 12896  0044CE  6F8F               	movwf	(printf@f+1)& (0+255),b
 12897  0044D0  EC0C  F00E         	call	_printf	;wreg free
 12898                           
 12899                           ;Test.c: 619: lcdInst(0b11000000);;
 12900  0044D4  0EC0               	movlw	192
 12901  0044D6  ECB1  F02E         	call	_lcdInst
 12902                           
 12903                           ;Test.c: 620: printf("ELSE TOGGLES ARM");
 12904  0044DA  0E96               	movlw	low STR_125
 12905  0044DC  0100               	movlb	0	; () banked
 12906  0044DE  6F8E               	movwf	printf@f& (0+255),b
 12907  0044E0  0EFC               	movlw	high STR_125
 12908  0044E2  0100               	movlb	0	; () banked
 12909  0044E4  6F8F               	movwf	(printf@f+1)& (0+255),b
 12910  0044E6  EC0C  F00E         	call	_printf	;wreg free
 12911                           
 12912                           ;Test.c: 622: (INTCONbits.GIE = 1);
 12913  0044EA  8EF2               	bsf	intcon,7,c	;volatile
 12914                           
 12915                           ;Test.c: 623: machine_state = Sorting_state;
 12916  0044EC  0E01               	movlw	1
 12917  0044EE  0100               	movlb	0	; () banked
 12918  0044F0  6FFC               	movwf	_machine_state& (0+255),b
 12919                           
 12920                           ; BSR set to: 0
 12921                           ;Test.c: 624: f_arm_position = 2;
 12922  0044F2  0E00               	movlw	0
 12923  0044F4  0100               	movlb	0	; () banked
 12924  0044F6  6FE9               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 12925  0044F8  0E02               	movlw	2
 12926  0044FA  6FE8               	movwf	_f_arm_position& (0+255),b	;volatile
 12927                           
 12928                           ; BSR set to: 0
 12929                           ;Test.c: 625: timer2_counter = 0;
 12930  0044FC  0E00               	movlw	0
 12931  0044FE  6E74               	movwf	_timer2_counter+1,c	;volatile
 12932  004500  0E00               	movlw	0
 12933  004502  6E73               	movwf	_timer2_counter,c	;volatile
 12934                           
 12935                           ; BSR set to: 0
 12936                           ;Test.c: 626: LATBbits.LATB3 = 1;
 12937  004504  868A               	bsf	3978,3,c	;volatile
 12938                           
 12939                           ; BSR set to: 0
 12940                           ;Test.c: 627: TMR2ON = 1;
 12941  004506  84CA               	bsf	4042,2,c	;volatile
 12942                           
 12943                           ; BSR set to: 0
 12944                           ;Test.c: 628: was_low_2 = 0;
 12945  004508  0E00               	movlw	0
 12946  00450A  6E7A               	movwf	_was_low_2+1,c	;volatile
 12947  00450C  0E00               	movlw	0
 12948  00450E  6E79               	movwf	_was_low_2,c	;volatile
 12949                           
 12950                           ; BSR set to: 0
 12951                           ;Test.c: 630: int on = 0;
 12952  004510  0E00               	movlw	0
 12953  004512  0100               	movlb	0	; () banked
 12954  004514  6FAD               	movwf	(arm@on+1)& (0+255),b
 12955  004516  0E00               	movlw	0
 12956  004518  6FAC               	movwf	arm@on& (0+255),b
 12957  00451A                     l8858:
 12958                           
 12959                           ;Test.c: 632: if(on){
 12960  00451A  0100               	movlb	0	; () banked
 12961  00451C  51AC               	movf	arm@on& (0+255),w,b
 12962  00451E  0100               	movlb	0	; () banked
 12963  004520  11AD               	iorwf	(arm@on+1)& (0+255),w,b
 12964  004522  B4D8               	btfsc	status,2,c
 12965  004524  D01C               	goto	l8870
 12966                           
 12967                           ; BSR set to: 0
 12968                           ;Test.c: 633: on = !on;
 12969  004526  0100               	movlb	0	; () banked
 12970  004528  51AC               	movf	arm@on& (0+255),w,b
 12971  00452A  0100               	movlb	0	; () banked
 12972  00452C  11AD               	iorwf	(arm@on+1)& (0+255),w,b
 12973  00452E  A4D8               	btfss	status,2,c
 12974  004530  D002               	goto	u8050
 12975  004532  0E01               	movlw	1
 12976  004534  D001               	goto	u8060
 12977  004536                     u8050:
 12978  004536  0E00               	movlw	0
 12979  004538                     u8060:
 12980  004538  0100               	movlb	0	; () banked
 12981  00453A  6FAC               	movwf	arm@on& (0+255),b
 12982  00453C  6BAD               	clrf	(arm@on+1)& (0+255),b
 12983                           
 12984                           ;Test.c: 634: while(PORTBbits.RB1 == 0){
 12985  00453E  D005               	goto	l8864
 12986  004540                     l8862:
 12987                           
 12988                           ; BSR set to: 0
 12989                           ;Test.c: 635: f_arm_position = 0;
 12990  004540  0E00               	movlw	0
 12991  004542  0100               	movlb	0	; () banked
 12992  004544  6FE9               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 12993  004546  0E00               	movlw	0
 12994  004548  6FE8               	movwf	_f_arm_position& (0+255),b	;volatile
 12995  00454A                     l8864:
 12996                           
 12997                           ; BSR set to: 0
 12998  00454A  A281               	btfss	3969,1,c	;volatile
 12999  00454C  D7F9               	goto	l8862
 13000                           
 13001                           ; BSR set to: 0
 13002                           ;Test.c: 636: }
 13003                           ;Test.c: 637: if(PORTB >> 4 == 0b1111){
 13004                           
 13005                           ; BSR set to: 0
 13006  00454E  3881               	swapf	3969,w,c	;volatile
 13007  004550  0B0F               	andlw	15
 13008  004552  0A0F               	xorlw	15
 13009  004554  B4D8               	btfsc	status,2,c
 13010  004556  D01F               	goto	l1471
 13011  004558                     l1472:
 13012  004558  A281               	btfss	3969,1,c	;volatile
 13013  00455A  D7DF               	goto	l8858
 13014  00455C  D7FD               	goto	l1472
 13015  00455E                     l8870:
 13016                           
 13017                           ;Test.c: 642: else{
 13018                           ;Test.c: 643: on = !on;
 13019  00455E  0100               	movlb	0	; () banked
 13020  004560  51AC               	movf	arm@on& (0+255),w,b
 13021  004562  0100               	movlb	0	; () banked
 13022  004564  11AD               	iorwf	(arm@on+1)& (0+255),w,b
 13023  004566  A4D8               	btfss	status,2,c
 13024  004568  D002               	goto	u8100
 13025  00456A  0E01               	movlw	1
 13026  00456C  D001               	goto	u8110
 13027  00456E                     u8100:
 13028  00456E  0E00               	movlw	0
 13029  004570                     u8110:
 13030  004570  0100               	movlb	0	; () banked
 13031  004572  6FAC               	movwf	arm@on& (0+255),b
 13032  004574  6BAD               	clrf	(arm@on+1)& (0+255),b
 13033                           
 13034                           ;Test.c: 644: while(PORTBbits.RB1 == 0){
 13035  004576  D005               	goto	l8874
 13036  004578                     l8872:
 13037                           
 13038                           ; BSR set to: 0
 13039                           ;Test.c: 645: f_arm_position = 1;
 13040  004578  0E00               	movlw	0
 13041  00457A  0100               	movlb	0	; () banked
 13042  00457C  6FE9               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 13043  00457E  0E01               	movlw	1
 13044  004580  6FE8               	movwf	_f_arm_position& (0+255),b	;volatile
 13045  004582                     l8874:
 13046                           
 13047                           ; BSR set to: 0
 13048  004582  A281               	btfss	3969,1,c	;volatile
 13049  004584  D7F9               	goto	l8872
 13050                           
 13051                           ; BSR set to: 0
 13052                           ;Test.c: 646: }
 13053                           ;Test.c: 647: if(PORTB >> 4 == 0b1111){
 13054                           
 13055                           ; BSR set to: 0
 13056  004586  3881               	swapf	3969,w,c	;volatile
 13057  004588  0B0F               	andlw	15
 13058  00458A  0A0F               	xorlw	15
 13059  00458C  B4D8               	btfsc	status,2,c
 13060  00458E  D003               	goto	l1471
 13061  004590                     l1480:
 13062  004590  A281               	btfss	3969,1,c	;volatile
 13063  004592  D7C3               	goto	l8858
 13064  004594  D7FD               	goto	l1480
 13065  004596                     l1471:
 13066                           
 13067                           ; BSR set to: 0
 13068                           ;Test.c: 651: }
 13069                           ;Test.c: 652: }
 13070                           ;Test.c: 654: (INTCONbits.GIE = 0);
 13071  004596  9EF2               	bcf	intcon,7,c	;volatile
 13072                           
 13073                           ; BSR set to: 0
 13074                           ;Test.c: 655: stopSignals();
 13075  004598  EC58  F02E         	call	_stopSignals	;wreg free
 13076                           
 13077                           ;Test.c: 656: machine_state = Testing_state;
 13078  00459C  0E03               	movlw	3
 13079  00459E  0100               	movlb	0	; () banked
 13080  0045A0  6FFC               	movwf	_machine_state& (0+255),b
 13081                           
 13082                           ; BSR set to: 0
 13083  0045A2  0012               	return		;funcret
 13084  0045A4                     __end_of_arm:
 13085                           	opt stack 0
 13086                           tblptru	equ	0xFF8
 13087                           tblptrh	equ	0xFF7
 13088                           tblptrl	equ	0xFF6
 13089                           tablat	equ	0xFF5
 13090                           prodh	equ	0xFF4
 13091                           prodl	equ	0xFF3
 13092                           intcon	equ	0xFF2
 13093                           intcon2	equ	0xFF1
 13094                           intcon3	equ	0xFF0
 13095                           postinc0	equ	0xFEE
 13096                           wreg	equ	0xFE8
 13097                           postdec1	equ	0xFE5
 13098                           fsr1l	equ	0xFE1
 13099                           indf2	equ	0xFDF
 13100                           postinc2	equ	0xFDE
 13101                           postdec2	equ	0xFDD
 13102                           fsr2h	equ	0xFDA
 13103                           fsr2l	equ	0xFD9
 13104                           status	equ	0xFD8
 13105                           
 13106 ;; *************** function _algorithmTest *****************
 13107 ;; Defined at:
 13108 ;;		line 78 in file "Test.c"
 13109 ;; Parameters:    Size  Location     Type
 13110 ;;		None
 13111 ;; Auto vars:     Size  Location     Type
 13112 ;;		None
 13113 ;; Return value:  Size  Location     Type
 13114 ;;                  1    wreg      void 
 13115 ;; Registers used:
 13116 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13117 ;; Tracked objects:
 13118 ;;		On entry : 0/0
 13119 ;;		On exit  : 0/0
 13120 ;;		Unchanged: 0/0
 13121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13122 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13123 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13124 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13125 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13126 ;;Total ram usage:        2 bytes
 13127 ;; Hardware stack levels used:    1
 13128 ;; Hardware stack levels required when called:   10
 13129 ;; This function calls:
 13130 ;;		_lcdInst
 13131 ;;		_printf
 13132 ;; This function is called by:
 13133 ;;		_Test
 13134 ;; This function uses a non-reentrant model
 13135 ;;
 13136                           
 13137                           	psect	text44
 13138  00476E                     __ptext44:
 13139                           	opt stack 0
 13140  00476E                     _algorithmTest:
 13141                           	opt stack 19
 13142                           
 13143                           ;Test.c: 80: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 13144                           
 13145                           ; BSR set to: 0
 13146                           ;incstack = 0
 13147  00476E  0E01               	movlw	1
 13148  004770  ECB1  F02E         	call	_lcdInst
 13149  004774  0E68               	movlw	104
 13150  004776  0100               	movlb	0	; () banked
 13151  004778  6FAB               	movwf	??_algorithmTest& (0+255),b
 13152  00477A  0EE4               	movlw	228
 13153  00477C                     u10977:
 13154  00477C  2EE8               	decfsz	wreg,f,c
 13155  00477E  D7FE               	bra	u10977
 13156  004780  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 13157  004782  D7FC               	bra	u10977
 13158  004784  F000               	nop	
 13159  004786  0E80               	movlw	128
 13160  004788  ECB1  F02E         	call	_lcdInst
 13161                           
 13162                           ;Test.c: 81: printf("ALGORITHM TEST");
 13163  00478C  0EF4               	movlw	low STR_70
 13164  00478E  0100               	movlb	0	; () banked
 13165  004790  6F8E               	movwf	printf@f& (0+255),b
 13166  004792  0EFE               	movlw	high STR_70
 13167  004794  0100               	movlb	0	; () banked
 13168  004796  6F8F               	movwf	(printf@f+1)& (0+255),b
 13169  004798  EC0C  F00E         	call	_printf	;wreg free
 13170                           
 13171                           ;Test.c: 82: lcdInst(0b11000000);;
 13172  00479C  0EC0               	movlw	192
 13173  00479E  ECB1  F02E         	call	_lcdInst
 13174                           
 13175                           ;Test.c: 83: printf("PUSH TO START");
 13176  0047A2  0E2D               	movlw	low STR_71
 13177  0047A4  0100               	movlb	0	; () banked
 13178  0047A6  6F8E               	movwf	printf@f& (0+255),b
 13179  0047A8  0EFF               	movlw	high STR_71
 13180  0047AA  0100               	movlb	0	; () banked
 13181  0047AC  6F8F               	movwf	(printf@f+1)& (0+255),b
 13182  0047AE  EC0C  F00E         	call	_printf	;wreg free
 13183                           
 13184                           ;Test.c: 84: _delay((unsigned long)((100)*(32000000/4000.0)));
 13185  0047B2  0E05               	movlw	5
 13186  0047B4  0100               	movlb	0	; () banked
 13187  0047B6  6FAC               	movwf	(??_algorithmTest+1)& (0+255),b
 13188  0047B8  0E0F               	movlw	15
 13189  0047BA  0100               	movlb	0	; () banked
 13190  0047BC  6FAB               	movwf	??_algorithmTest& (0+255),b
 13191  0047BE  0EF1               	movlw	241
 13192  0047C0                     u10987:
 13193  0047C0  2EE8               	decfsz	wreg,f,c
 13194  0047C2  D7FE               	bra	u10987
 13195  0047C4  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 13196  0047C6  D7FC               	bra	u10987
 13197  0047C8  2FAC               	decfsz	(??_algorithmTest+1)& (0+255),f,b
 13198  0047CA  D7FA               	bra	u10987
 13199  0047CC                     l1280:
 13200  0047CC  A281               	btfss	3969,1,c	;volatile
 13201  0047CE  D7FE               	goto	l1280
 13202  0047D0                     l1283:
 13203  0047D0  B281               	btfsc	3969,1,c	;volatile
 13204  0047D2  D7FE               	goto	l1283
 13205                           
 13206                           ;Test.c: 87: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 13207  0047D4  0E01               	movlw	1
 13208  0047D6  ECB1  F02E         	call	_lcdInst
 13209  0047DA  0E68               	movlw	104
 13210  0047DC  0100               	movlb	0	; () banked
 13211  0047DE  6FAB               	movwf	??_algorithmTest& (0+255),b
 13212  0047E0  0EE4               	movlw	228
 13213  0047E2                     u10997:
 13214  0047E2  2EE8               	decfsz	wreg,f,c
 13215  0047E4  D7FE               	bra	u10997
 13216  0047E6  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 13217  0047E8  D7FC               	bra	u10997
 13218  0047EA  F000               	nop	
 13219  0047EC  0E80               	movlw	128
 13220  0047EE  ECB1  F02E         	call	_lcdInst
 13221                           
 13222                           ;Test.c: 92: printf("ALG1: 9 POPNOTAB");
 13223  0047F2  0E41               	movlw	low STR_72
 13224  0047F4  0100               	movlb	0	; () banked
 13225  0047F6  6F8E               	movwf	printf@f& (0+255),b
 13226  0047F8  0EFC               	movlw	high STR_72
 13227  0047FA  0100               	movlb	0	; () banked
 13228  0047FC  6F8F               	movwf	(printf@f+1)& (0+255),b
 13229  0047FE  EC0C  F00E         	call	_printf	;wreg free
 13230                           
 13231                           ;Test.c: 99: printf("ALG2: 12 CANS");
 13232  004802  0E11               	movlw	low STR_73
 13233  004804  0100               	movlb	0	; () banked
 13234  004806  6F8E               	movwf	printf@f& (0+255),b
 13235  004808  0EFF               	movlw	high STR_73
 13236  00480A  0100               	movlb	0	; () banked
 13237  00480C  6F8F               	movwf	(printf@f+1)& (0+255),b
 13238  00480E  EC0C  F00E         	call	_printf	;wreg free
 13239                           
 13240                           ;Test.c: 108: printf("ALG3: 1 CAN");
 13241  004812  0E64               	movlw	low STR_74
 13242  004814  0100               	movlb	0	; () banked
 13243  004816  6F8E               	movwf	printf@f& (0+255),b
 13244  004818  0EFF               	movlw	high STR_74
 13245  00481A  0100               	movlb	0	; () banked
 13246  00481C  6F8F               	movwf	(printf@f+1)& (0+255),b
 13247  00481E  EC0C  F00E         	call	_printf	;wreg free
 13248                           
 13249                           ;Test.c: 114: printf("ALG4: ALL CANS");
 13250  004822  0ED6               	movlw	low STR_75
 13251  004824  0100               	movlb	0	; () banked
 13252  004826  6F8E               	movwf	printf@f& (0+255),b
 13253  004828  0EFE               	movlw	high STR_75
 13254  00482A  0100               	movlb	0	; () banked
 13255  00482C  6F8F               	movwf	(printf@f+1)& (0+255),b
 13256  00482E  EC0C  F00E         	call	_printf	;wreg free
 13257                           
 13258                           ;Test.c: 119: printf("ALG5: NO CANS");
 13259  004832  0E1F               	movlw	low STR_76
 13260  004834  0100               	movlb	0	; () banked
 13261  004836  6F8E               	movwf	printf@f& (0+255),b
 13262  004838  0EFF               	movlw	high STR_76
 13263  00483A  0100               	movlb	0	; () banked
 13264  00483C  6F8F               	movwf	(printf@f+1)& (0+255),b
 13265  00483E  EC0C  F00E         	call	_printf	;wreg free
 13266  004842  0012               	return		;funcret
 13267  004844                     __end_of_algorithmTest:
 13268                           	opt stack 0
 13269                           tblptru	equ	0xFF8
 13270                           tblptrh	equ	0xFF7
 13271                           tblptrl	equ	0xFF6
 13272                           tablat	equ	0xFF5
 13273                           prodh	equ	0xFF4
 13274                           prodl	equ	0xFF3
 13275                           intcon	equ	0xFF2
 13276                           intcon2	equ	0xFF1
 13277                           intcon3	equ	0xFF0
 13278                           postinc0	equ	0xFEE
 13279                           wreg	equ	0xFE8
 13280                           postdec1	equ	0xFE5
 13281                           fsr1l	equ	0xFE1
 13282                           indf2	equ	0xFDF
 13283                           postinc2	equ	0xFDE
 13284                           postdec2	equ	0xFDD
 13285                           fsr2h	equ	0xFDA
 13286                           fsr2l	equ	0xFD9
 13287                           status	equ	0xFD8
 13288                           
 13289 ;; *************** function _actuatorTest *****************
 13290 ;; Defined at:
 13291 ;;		line 201 in file "Test.c"
 13292 ;; Parameters:    Size  Location     Type
 13293 ;;		None
 13294 ;; Auto vars:     Size  Location     Type
 13295 ;;  i               1   45[BANK0 ] unsigned char 
 13296 ;;  i               1   67[BANK0 ] unsigned char 
 13297 ;;  i               1   66[BANK0 ] unsigned char 
 13298 ;;  i               1   65[BANK0 ] unsigned char 
 13299 ;;  i               1   64[BANK0 ] unsigned char 
 13300 ;;  i               1   63[BANK0 ] unsigned char 
 13301 ;;  i               1   62[BANK0 ] unsigned char 
 13302 ;;  i               1   61[BANK0 ] unsigned char 
 13303 ;;  i               1   60[BANK0 ] unsigned char 
 13304 ;;  i               1   59[BANK0 ] unsigned char 
 13305 ;;  i               1   58[BANK0 ] unsigned char 
 13306 ;;  i               1   57[BANK0 ] unsigned char 
 13307 ;;  i               1   56[BANK0 ] unsigned char 
 13308 ;;  i               1   55[BANK0 ] unsigned char 
 13309 ;;  i               1   54[BANK0 ] unsigned char 
 13310 ;;  i               1   53[BANK0 ] unsigned char 
 13311 ;;  i               1   52[BANK0 ] unsigned char 
 13312 ;;  i               1   51[BANK0 ] unsigned char 
 13313 ;;  i               1   50[BANK0 ] unsigned char 
 13314 ;;  i               1   49[BANK0 ] unsigned char 
 13315 ;;  i               1   48[BANK0 ] unsigned char 
 13316 ;;  i               1   47[BANK0 ] unsigned char 
 13317 ;;  i               1   46[BANK0 ] unsigned char 
 13318 ;;  i               2   68[BANK0 ] int 
 13319 ;; Return value:  Size  Location     Type
 13320 ;;                  1    wreg      void 
 13321 ;; Registers used:
 13322 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13323 ;; Tracked objects:
 13324 ;;		On entry : 0/0
 13325 ;;		On exit  : 0/0
 13326 ;;		Unchanged: 0/0
 13327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13328 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13329 ;;      Locals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13330 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13331 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13332 ;;Total ram usage:       27 bytes
 13333 ;; Hardware stack levels used:    1
 13334 ;; Hardware stack levels required when called:   10
 13335 ;; This function calls:
 13336 ;;		_lcdInst
 13337 ;;		_printf
 13338 ;;		_updateServoPosition
 13339 ;; This function is called by:
 13340 ;;		_Test
 13341 ;; This function uses a non-reentrant model
 13342 ;;
 13343                           
 13344                           	psect	text45
 13345  0008DA                     __ptext45:
 13346                           	opt stack 0
 13347  0008DA                     _actuatorTest:
 13348                           	opt stack 19
 13349                           
 13350                           ;Test.c: 203: int i = 0;
 13351                           
 13352                           ;incstack = 0
 13353  0008DA  0E00               	movlw	0
 13354  0008DC  0100               	movlb	0	; () banked
 13355  0008DE  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 13356  0008E0  0E00               	movlw	0
 13357  0008E2  6FC4               	movwf	actuatorTest@i& (0+255),b
 13358                           
 13359                           ; BSR set to: 0
 13360                           ;Test.c: 205: (INTCONbits.GIE = 1);
 13361  0008E4  8EF2               	bsf	intcon,7,c	;volatile
 13362                           
 13363                           ; BSR set to: 0
 13364                           ;Test.c: 206: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13365  0008E6  0E01               	movlw	1
 13366  0008E8  ECB1  F02E         	call	_lcdInst
 13367  0008EC  0E68               	movlw	104
 13368  0008EE  0100               	movlb	0	; () banked
 13369  0008F0  6FAB               	movwf	??_actuatorTest& (0+255),b
 13370  0008F2  0EE4               	movlw	228
 13371  0008F4                     u11007:
 13372  0008F4  2EE8               	decfsz	wreg,f,c
 13373  0008F6  D7FE               	bra	u11007
 13374  0008F8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13375  0008FA  D7FC               	bra	u11007
 13376  0008FC  F000               	nop	
 13377  0008FE  0E80               	movlw	128
 13378  000900  ECB1  F02E         	call	_lcdInst
 13379                           
 13380                           ;Test.c: 207: printf("ACTUATORS");
 13381  000904  0E90               	movlw	low STR_88
 13382  000906  0100               	movlb	0	; () banked
 13383  000908  6F8E               	movwf	printf@f& (0+255),b
 13384  00090A  0EFF               	movlw	high STR_88
 13385  00090C  0100               	movlb	0	; () banked
 13386  00090E  6F8F               	movwf	(printf@f+1)& (0+255),b
 13387  000910  EC0C  F00E         	call	_printf	;wreg free
 13388                           
 13389                           ;Test.c: 208: lcdInst(0b11000000);;
 13390  000914  0EC0               	movlw	192
 13391  000916  ECB1  F02E         	call	_lcdInst
 13392                           
 13393                           ;Test.c: 209: printf("PUSH TO START");
 13394  00091A  0E2D               	movlw	low STR_71
 13395  00091C  0100               	movlb	0	; () banked
 13396  00091E  6F8E               	movwf	printf@f& (0+255),b
 13397  000920  0EFF               	movlw	high STR_71
 13398  000922  0100               	movlb	0	; () banked
 13399  000924  6F8F               	movwf	(printf@f+1)& (0+255),b
 13400  000926  EC0C  F00E         	call	_printf	;wreg free
 13401                           
 13402                           ;Test.c: 210: _delay((unsigned long)((100)*(32000000/4000.0)));
 13403  00092A  0E05               	movlw	5
 13404  00092C  0100               	movlb	0	; () banked
 13405  00092E  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 13406  000930  0E0F               	movlw	15
 13407  000932  0100               	movlb	0	; () banked
 13408  000934  6FAB               	movwf	??_actuatorTest& (0+255),b
 13409  000936  0EF1               	movlw	241
 13410  000938                     u11017:
 13411  000938  2EE8               	decfsz	wreg,f,c
 13412  00093A  D7FE               	bra	u11017
 13413  00093C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13414  00093E  D7FC               	bra	u11017
 13415  000940  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 13416  000942  D7FA               	bra	u11017
 13417  000944                     l1315:
 13418  000944  A281               	btfss	3969,1,c	;volatile
 13419  000946  D7FE               	goto	l1315
 13420  000948                     l1318:
 13421  000948  B281               	btfsc	3969,1,c	;volatile
 13422  00094A  D7FE               	goto	l1318
 13423                           
 13424                           ;Test.c: 213: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13425  00094C  0E01               	movlw	1
 13426  00094E  ECB1  F02E         	call	_lcdInst
 13427  000952  0E68               	movlw	104
 13428  000954  0100               	movlb	0	; () banked
 13429  000956  6FAB               	movwf	??_actuatorTest& (0+255),b
 13430  000958  0EE4               	movlw	228
 13431  00095A                     u11027:
 13432  00095A  2EE8               	decfsz	wreg,f,c
 13433  00095C  D7FE               	bra	u11027
 13434  00095E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13435  000960  D7FC               	bra	u11027
 13436  000962  F000               	nop	
 13437  000964  0E80               	movlw	128
 13438  000966  ECB1  F02E         	call	_lcdInst
 13439                           
 13440                           ;Test.c: 218: printf("TST: DC MOTORS");
 13441  00096A  0EE5               	movlw	low STR_90
 13442  00096C  0100               	movlb	0	; () banked
 13443  00096E  6F8E               	movwf	printf@f& (0+255),b
 13444  000970  0EFE               	movlw	high STR_90
 13445  000972  0100               	movlb	0	; () banked
 13446  000974  6F8F               	movwf	(printf@f+1)& (0+255),b
 13447  000976  EC0C  F00E         	call	_printf	;wreg free
 13448                           
 13449                           ;Test.c: 219: lcdInst(0b11000000);;
 13450  00097A  0EC0               	movlw	192
 13451  00097C  ECB1  F02E         	call	_lcdInst
 13452                           
 13453                           ;Test.c: 220: printf("PIN RA5 HIGH.");
 13454  000980  0E03               	movlw	low STR_91
 13455  000982  0100               	movlb	0	; () banked
 13456  000984  6F8E               	movwf	printf@f& (0+255),b
 13457  000986  0EFF               	movlw	high STR_91
 13458  000988  0100               	movlb	0	; () banked
 13459  00098A  6F8F               	movwf	(printf@f+1)& (0+255),b
 13460  00098C  EC0C  F00E         	call	_printf	;wreg free
 13461                           
 13462                           ;Test.c: 221: LATBbits.LATB2 = 1;
 13463  000990  848A               	bsf	3978,2,c	;volatile
 13464                           
 13465                           ;Test.c: 222: for(i=0;i<5;i++){for(char i=0;i<100;i++){_delay((unsigned long)((10)*(3200
      +                          0000/4000.0)));};}
 13466  000992  0E00               	movlw	0
 13467  000994  0100               	movlb	0	; () banked
 13468  000996  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 13469  000998  0E00               	movlw	0
 13470  00099A  6FC4               	movwf	actuatorTest@i& (0+255),b
 13471                           
 13472                           ; BSR set to: 0
 13473  00099C  0100               	movlb	0	; () banked
 13474  00099E  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13475  0009A0  D008               	goto	l8444
 13476  0009A2  0100               	movlb	0	; () banked
 13477  0009A4  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 13478  0009A6  E123               	bnz	l1322
 13479  0009A8  0E05               	movlw	5
 13480  0009AA  0100               	movlb	0	; () banked
 13481  0009AC  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 13482  0009AE  B0D8               	btfsc	status,0,c
 13483  0009B0  D01E               	goto	l1322
 13484  0009B2                     l8444:
 13485                           
 13486                           ; BSR set to: 0
 13487  0009B2  0E00               	movlw	0
 13488  0009B4  0100               	movlb	0	; () banked
 13489  0009B6  6FAD               	movwf	actuatorTest@i_1741& (0+255),b
 13490  0009B8                     l8446:
 13491                           
 13492                           ; BSR set to: 0
 13493  0009B8  0E63               	movlw	99
 13494  0009BA  0100               	movlb	0	; () banked
 13495  0009BC  65AD               	cpfsgt	actuatorTest@i_1741& (0+255),b
 13496  0009BE  D001               	goto	l8450
 13497  0009C0  D00C               	goto	l8454
 13498  0009C2                     l8450:
 13499                           
 13500                           ; BSR set to: 0
 13501  0009C2  0E68               	movlw	104
 13502  0009C4  0100               	movlb	0	; () banked
 13503  0009C6  6FAB               	movwf	??_actuatorTest& (0+255),b
 13504  0009C8  0EE4               	movlw	228
 13505  0009CA                     u11037:
 13506  0009CA  2EE8               	decfsz	wreg,f,c
 13507  0009CC  D7FE               	bra	u11037
 13508  0009CE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13509  0009D0  D7FC               	bra	u11037
 13510  0009D2  F000               	nop	
 13511  0009D4  0100               	movlb	0	; () banked
 13512  0009D6  2BAD               	incf	actuatorTest@i_1741& (0+255),f,b
 13513  0009D8  D7EF               	goto	l8446
 13514  0009DA                     l8454:
 13515                           
 13516                           ; BSR set to: 0
 13517  0009DA  0100               	movlb	0	; () banked
 13518  0009DC  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 13519  0009DE  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 13520                           
 13521                           ; BSR set to: 0
 13522  0009E0  0100               	movlb	0	; () banked
 13523  0009E2  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13524  0009E4  D7E6               	goto	l8444
 13525  0009E6  0100               	movlb	0	; () banked
 13526  0009E8  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 13527  0009EA  E101               	bnz	u7530
 13528  0009EC  D7DD               	goto	L11
 13529  0009EE                     u7530:
 13530  0009EE                     l1322:
 13531                           
 13532                           ; BSR set to: 0
 13533                           ;Test.c: 223: LATBbits.LATB2 = 0;
 13534  0009EE  948A               	bcf	3978,2,c	;volatile
 13535                           
 13536                           ; BSR set to: 0
 13537                           ;Test.c: 224: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13538  0009F0  0E01               	movlw	1
 13539  0009F2  ECB1  F02E         	call	_lcdInst
 13540  0009F6  0E68               	movlw	104
 13541  0009F8  0100               	movlb	0	; () banked
 13542  0009FA  6FAB               	movwf	??_actuatorTest& (0+255),b
 13543  0009FC  0EE4               	movlw	228
 13544  0009FE                     u11047:
 13545  0009FE  2EE8               	decfsz	wreg,f,c
 13546  000A00  D7FE               	bra	u11047
 13547  000A02  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13548  000A04  D7FC               	bra	u11047
 13549  000A06  F000               	nop	
 13550  000A08  0E80               	movlw	128
 13551  000A0A  ECB1  F02E         	call	_lcdInst
 13552                           
 13553                           ;Test.c: 230: printf("TST: COND SOLN'D");
 13554  000A0E  0E52               	movlw	low STR_92
 13555  000A10  0100               	movlb	0	; () banked
 13556  000A12  6F8E               	movwf	printf@f& (0+255),b
 13557  000A14  0EFC               	movlw	high STR_92
 13558  000A16  0100               	movlb	0	; () banked
 13559  000A18  6F8F               	movwf	(printf@f+1)& (0+255),b
 13560  000A1A  EC0C  F00E         	call	_printf	;wreg free
 13561                           
 13562                           ;Test.c: 231: lcdInst(0b11000000);;
 13563  000A1E  0EC0               	movlw	192
 13564  000A20  ECB1  F02E         	call	_lcdInst
 13565                           
 13566                           ;Test.c: 232: printf("PIN RA3...");
 13567  000A24  0E70               	movlw	low STR_93
 13568  000A26  0100               	movlb	0	; () banked
 13569  000A28  6F8E               	movwf	printf@f& (0+255),b
 13570  000A2A  0EFF               	movlw	high STR_93
 13571  000A2C  0100               	movlb	0	; () banked
 13572  000A2E  6F8F               	movwf	(printf@f+1)& (0+255),b
 13573  000A30  EC0C  F00E         	call	_printf	;wreg free
 13574                           
 13575                           ;Test.c: 233: for(i=0;i<5;i++){
 13576  000A34  0E00               	movlw	0
 13577  000A36  0100               	movlb	0	; () banked
 13578  000A38  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 13579  000A3A  0E00               	movlw	0
 13580  000A3C  6FC4               	movwf	actuatorTest@i& (0+255),b
 13581                           
 13582                           ; BSR set to: 0
 13583  000A3E  0100               	movlb	0	; () banked
 13584  000A40  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13585  000A42  D008               	goto	l1325
 13586  000A44  0100               	movlb	0	; () banked
 13587  000A46  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 13588  000A48  E12C               	bnz	l1326
 13589  000A4A  0E05               	movlw	5
 13590  000A4C  0100               	movlb	0	; () banked
 13591  000A4E  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 13592  000A50  B0D8               	btfsc	status,0,c
 13593  000A52  D027               	goto	l1326
 13594  000A54                     l1325:
 13595                           
 13596                           ; BSR set to: 0
 13597                           ;Test.c: 234: LATAbits.LATA3 = 1;
 13598  000A54  8689               	bsf	3977,3,c	;volatile
 13599                           
 13600                           ; BSR set to: 0
 13601                           ;Test.c: 235: _delay((unsigned long)((300)*(32000000/4000.0)));
 13602  000A56  0E0D               	movlw	13
 13603  000A58  0100               	movlb	0	; () banked
 13604  000A5A  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 13605  000A5C  0E2D               	movlw	45
 13606  000A5E  0100               	movlb	0	; () banked
 13607  000A60  6FAB               	movwf	??_actuatorTest& (0+255),b
 13608  000A62  0ED7               	movlw	215
 13609  000A64                     u11057:
 13610  000A64  2EE8               	decfsz	wreg,f,c
 13611  000A66  D7FE               	bra	u11057
 13612  000A68  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13613  000A6A  D7FC               	bra	u11057
 13614  000A6C  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 13615  000A6E  D7FA               	bra	u11057
 13616  000A70  D000               	nop2	
 13617                           
 13618                           ;Test.c: 236: LATAbits.LATA3 = !1;
 13619  000A72  9689               	bcf	3977,3,c	;volatile
 13620                           
 13621                           ;Test.c: 237: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 13622  000A74  0E1D               	movlw	29
 13623  000A76  0100               	movlb	0	; () banked
 13624  000A78  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 13625  000A7A  0E69               	movlw	105
 13626  000A7C  0100               	movlb	0	; () banked
 13627  000A7E  6FAB               	movwf	??_actuatorTest& (0+255),b
 13628  000A80  0EA5               	movlw	165
 13629  000A82                     u11067:
 13630  000A82  2EE8               	decfsz	wreg,f,c
 13631  000A84  D7FE               	bra	u11067
 13632  000A86  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13633  000A88  D7FC               	bra	u11067
 13634  000A8A  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 13635  000A8C  D7FA               	bra	u11067
 13636  000A8E  0100               	movlb	0	; () banked
 13637  000A90  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 13638  000A92  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 13639  000A94  0100               	movlb	0	; () banked
 13640  000A96  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13641  000A98  D7DD               	goto	l1325
 13642  000A9A  0100               	movlb	0	; () banked
 13643  000A9C  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 13644  000A9E  E101               	bnz	u7550
 13645  000AA0  D7D4               	goto	L12
 13646  000AA2                     u7550:
 13647  000AA2                     l1326:
 13648                           
 13649                           ; BSR set to: 0
 13650                           ;Test.c: 238: }
 13651                           ;Test.c: 239: LATAbits.LATA3 = !1;
 13652  000AA2  9689               	bcf	3977,3,c	;volatile
 13653                           
 13654                           ; BSR set to: 0
 13655                           ;Test.c: 240: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13656  000AA4  0E01               	movlw	1
 13657  000AA6  ECB1  F02E         	call	_lcdInst
 13658  000AAA  0E68               	movlw	104
 13659  000AAC  0100               	movlb	0	; () banked
 13660  000AAE  6FAB               	movwf	??_actuatorTest& (0+255),b
 13661  000AB0  0EE4               	movlw	228
 13662  000AB2                     u11077:
 13663  000AB2  2EE8               	decfsz	wreg,f,c
 13664  000AB4  D7FE               	bra	u11077
 13665  000AB6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13666  000AB8  D7FC               	bra	u11077
 13667  000ABA  F000               	nop	
 13668  000ABC  0E80               	movlw	128
 13669  000ABE  ECB1  F02E         	call	_lcdInst
 13670                           
 13671                           ;Test.c: 246: printf("TST: PUSH SOLN'D");
 13672  000AC2  0E63               	movlw	low STR_94
 13673  000AC4  0100               	movlb	0	; () banked
 13674  000AC6  6F8E               	movwf	printf@f& (0+255),b
 13675  000AC8  0EFC               	movlw	high STR_94
 13676  000ACA  0100               	movlb	0	; () banked
 13677  000ACC  6F8F               	movwf	(printf@f+1)& (0+255),b
 13678  000ACE  EC0C  F00E         	call	_printf	;wreg free
 13679                           
 13680                           ;Test.c: 247: lcdInst(0b11000000);;
 13681  000AD2  0EC0               	movlw	192
 13682  000AD4  ECB1  F02E         	call	_lcdInst
 13683                           
 13684                           ;Test.c: 248: printf("PIN RA4...");
 13685  000AD8  0E7B               	movlw	low STR_95
 13686  000ADA  0100               	movlb	0	; () banked
 13687  000ADC  6F8E               	movwf	printf@f& (0+255),b
 13688  000ADE  0EFF               	movlw	high STR_95
 13689  000AE0  0100               	movlb	0	; () banked
 13690  000AE2  6F8F               	movwf	(printf@f+1)& (0+255),b
 13691  000AE4  EC0C  F00E         	call	_printf	;wreg free
 13692                           
 13693                           ;Test.c: 249: for(i=0;i<5;i++){
 13694  000AE8  0E00               	movlw	0
 13695  000AEA  0100               	movlb	0	; () banked
 13696  000AEC  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 13697  000AEE  0E00               	movlw	0
 13698  000AF0  6FC4               	movwf	actuatorTest@i& (0+255),b
 13699                           
 13700                           ; BSR set to: 0
 13701  000AF2  0100               	movlb	0	; () banked
 13702  000AF4  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13703  000AF6  D008               	goto	l1327
 13704  000AF8  0100               	movlb	0	; () banked
 13705  000AFA  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 13706  000AFC  E12C               	bnz	l1328
 13707  000AFE  0E05               	movlw	5
 13708  000B00  0100               	movlb	0	; () banked
 13709  000B02  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 13710  000B04  B0D8               	btfsc	status,0,c
 13711  000B06  D027               	goto	l1328
 13712  000B08                     l1327:
 13713                           
 13714                           ; BSR set to: 0
 13715                           ;Test.c: 250: LATAbits.LATA4 = 1;
 13716  000B08  8889               	bsf	3977,4,c	;volatile
 13717                           
 13718                           ; BSR set to: 0
 13719                           ;Test.c: 251: _delay((unsigned long)((300)*(32000000/4000.0)));
 13720  000B0A  0E0D               	movlw	13
 13721  000B0C  0100               	movlb	0	; () banked
 13722  000B0E  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 13723  000B10  0E2D               	movlw	45
 13724  000B12  0100               	movlb	0	; () banked
 13725  000B14  6FAB               	movwf	??_actuatorTest& (0+255),b
 13726  000B16  0ED7               	movlw	215
 13727  000B18                     u11087:
 13728  000B18  2EE8               	decfsz	wreg,f,c
 13729  000B1A  D7FE               	bra	u11087
 13730  000B1C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13731  000B1E  D7FC               	bra	u11087
 13732  000B20  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 13733  000B22  D7FA               	bra	u11087
 13734  000B24  D000               	nop2	
 13735                           
 13736                           ;Test.c: 252: LATAbits.LATA4 = !1;
 13737  000B26  9889               	bcf	3977,4,c	;volatile
 13738                           
 13739                           ;Test.c: 253: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 13740  000B28  0E1D               	movlw	29
 13741  000B2A  0100               	movlb	0	; () banked
 13742  000B2C  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 13743  000B2E  0E69               	movlw	105
 13744  000B30  0100               	movlb	0	; () banked
 13745  000B32  6FAB               	movwf	??_actuatorTest& (0+255),b
 13746  000B34  0EA5               	movlw	165
 13747  000B36                     u11097:
 13748  000B36  2EE8               	decfsz	wreg,f,c
 13749  000B38  D7FE               	bra	u11097
 13750  000B3A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13751  000B3C  D7FC               	bra	u11097
 13752  000B3E  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 13753  000B40  D7FA               	bra	u11097
 13754  000B42  0100               	movlb	0	; () banked
 13755  000B44  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 13756  000B46  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 13757  000B48  0100               	movlb	0	; () banked
 13758  000B4A  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13759  000B4C  D7DD               	goto	l1327
 13760  000B4E  0100               	movlb	0	; () banked
 13761  000B50  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 13762  000B52  E101               	bnz	u7570
 13763  000B54  D7D4               	goto	L13
 13764  000B56                     u7570:
 13765  000B56                     l1328:
 13766                           
 13767                           ; BSR set to: 0
 13768                           ;Test.c: 254: }
 13769                           ;Test.c: 255: LATAbits.LATA4 = !1;
 13770  000B56  9889               	bcf	3977,4,c	;volatile
 13771                           
 13772                           ; BSR set to: 0
 13773                           ;Test.c: 256: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13774  000B58  0E01               	movlw	1
 13775  000B5A  ECB1  F02E         	call	_lcdInst
 13776  000B5E  0E68               	movlw	104
 13777  000B60  0100               	movlb	0	; () banked
 13778  000B62  6FAB               	movwf	??_actuatorTest& (0+255),b
 13779  000B64  0EE4               	movlw	228
 13780  000B66                     u11107:
 13781  000B66  2EE8               	decfsz	wreg,f,c
 13782  000B68  D7FE               	bra	u11107
 13783  000B6A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13784  000B6C  D7FC               	bra	u11107
 13785  000B6E  F000               	nop	
 13786  000B70  0E80               	movlw	128
 13787  000B72  ECB1  F02E         	call	_lcdInst
 13788                           
 13789                           ;Test.c: 259: machine_state = Sorting_state;
 13790  000B76  0E01               	movlw	1
 13791  000B78  0100               	movlb	0	; () banked
 13792  000B7A  6FFC               	movwf	_machine_state& (0+255),b
 13793                           
 13794                           ; BSR set to: 0
 13795                           ;Test.c: 260: was_low_1 = 0;
 13796  000B7C  0E00               	movlw	0
 13797  000B7E  6E78               	movwf	_was_low_1+1,c	;volatile
 13798  000B80  0E00               	movlw	0
 13799  000B82  6E77               	movwf	_was_low_1,c	;volatile
 13800                           
 13801                           ; BSR set to: 0
 13802                           ;Test.c: 261: was_low_1 = 0;
 13803  000B84  0E00               	movlw	0
 13804  000B86  6E78               	movwf	_was_low_1+1,c	;volatile
 13805  000B88  0E00               	movlw	0
 13806  000B8A  6E77               	movwf	_was_low_1,c	;volatile
 13807                           
 13808                           ; BSR set to: 0
 13809                           ;Test.c: 268: printf("TST: PAN SERVO");
 13810  000B8C  0EC7               	movlw	low STR_96
 13811  000B8E  0100               	movlb	0	; () banked
 13812  000B90  6F8E               	movwf	printf@f& (0+255),b
 13813  000B92  0EFE               	movlw	high STR_96
 13814  000B94  0100               	movlb	0	; () banked
 13815  000B96  6F8F               	movwf	(printf@f+1)& (0+255),b
 13816  000B98  EC0C  F00E         	call	_printf	;wreg free
 13817                           
 13818                           ;Test.c: 269: lcdInst(0b11000000);;
 13819  000B9C  0EC0               	movlw	192
 13820  000B9E  ECB1  F02E         	call	_lcdInst
 13821                           
 13822                           ;Test.c: 270: printf("MIDDLE -- 2s    ");
 13823  000BA2  0ECA               	movlw	low STR_97
 13824  000BA4  0100               	movlb	0	; () banked
 13825  000BA6  6F8E               	movwf	printf@f& (0+255),b
 13826  000BA8  0EFB               	movlw	high STR_97
 13827  000BAA  0100               	movlb	0	; () banked
 13828  000BAC  6F8F               	movwf	(printf@f+1)& (0+255),b
 13829  000BAE  EC0C  F00E         	call	_printf	;wreg free
 13830                           
 13831                           ;Test.c: 271: updateServoPosition(1200, 1);
 13832  000BB2  0E04               	movlw	4
 13833  000BB4  0100               	movlb	0	; () banked
 13834  000BB6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13835  000BB8  0EB0               	movlw	176
 13836  000BBA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13837  000BBC  0E00               	movlw	0
 13838  000BBE  0100               	movlb	0	; () banked
 13839  000BC0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13840  000BC2  0E01               	movlw	1
 13841  000BC4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13842  000BC6  ECCA  F027         	call	_updateServoPosition	;wreg free
 13843                           
 13844                           ;Test.c: 272: TMR1ON = 1;
 13845  000BCA  80CD               	bsf	4045,0,c	;volatile
 13846                           
 13847                           ;Test.c: 273: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13848  000BCC  0E00               	movlw	0
 13849  000BCE  0100               	movlb	0	; () banked
 13850  000BD0  6FAE               	movwf	actuatorTest@i_1748& (0+255),b
 13851  000BD2                     l8530:
 13852                           
 13853                           ; BSR set to: 0
 13854  000BD2  0E63               	movlw	99
 13855  000BD4  0100               	movlb	0	; () banked
 13856  000BD6  65AE               	cpfsgt	actuatorTest@i_1748& (0+255),b
 13857  000BD8  D001               	goto	l8534
 13858  000BDA  D00C               	goto	l8538
 13859  000BDC                     l8534:
 13860                           
 13861                           ; BSR set to: 0
 13862  000BDC  0E68               	movlw	104
 13863  000BDE  0100               	movlb	0	; () banked
 13864  000BE0  6FAB               	movwf	??_actuatorTest& (0+255),b
 13865  000BE2  0EE4               	movlw	228
 13866  000BE4                     u11117:
 13867  000BE4  2EE8               	decfsz	wreg,f,c
 13868  000BE6  D7FE               	bra	u11117
 13869  000BE8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13870  000BEA  D7FC               	bra	u11117
 13871  000BEC  F000               	nop	
 13872  000BEE  0100               	movlb	0	; () banked
 13873  000BF0  2BAE               	incf	actuatorTest@i_1748& (0+255),f,b
 13874  000BF2  D7EF               	goto	l8530
 13875  000BF4                     l8538:
 13876                           
 13877                           ; BSR set to: 0
 13878  000BF4  0E00               	movlw	0
 13879  000BF6  0100               	movlb	0	; () banked
 13880  000BF8  6FAF               	movwf	actuatorTest@i_1749& (0+255),b
 13881  000BFA                     l8540:
 13882                           
 13883                           ; BSR set to: 0
 13884  000BFA  0E63               	movlw	99
 13885  000BFC  0100               	movlb	0	; () banked
 13886  000BFE  65AF               	cpfsgt	actuatorTest@i_1749& (0+255),b
 13887  000C00  D001               	goto	l8544
 13888  000C02  D00C               	goto	l8548
 13889  000C04                     l8544:
 13890                           
 13891                           ; BSR set to: 0
 13892  000C04  0E68               	movlw	104
 13893  000C06  0100               	movlb	0	; () banked
 13894  000C08  6FAB               	movwf	??_actuatorTest& (0+255),b
 13895  000C0A  0EE4               	movlw	228
 13896  000C0C                     u11127:
 13897  000C0C  2EE8               	decfsz	wreg,f,c
 13898  000C0E  D7FE               	bra	u11127
 13899  000C10  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13900  000C12  D7FC               	bra	u11127
 13901  000C14  F000               	nop	
 13902  000C16  0100               	movlb	0	; () banked
 13903  000C18  2BAF               	incf	actuatorTest@i_1749& (0+255),f,b
 13904  000C1A  D7EF               	goto	l8540
 13905  000C1C                     l8548:
 13906                           
 13907                           ; BSR set to: 0
 13908                           ;Test.c: 275: lcdInst(0b10000000);;lcdInst(0b11000000);;
 13909  000C1C  0E80               	movlw	128
 13910  000C1E  ECB1  F02E         	call	_lcdInst
 13911  000C22  0EC0               	movlw	192
 13912  000C24  ECB1  F02E         	call	_lcdInst
 13913                           
 13914                           ;Test.c: 276: printf("RIGHT -- 2s     ");
 13915  000C28  0EB9               	movlw	low STR_98
 13916  000C2A  0100               	movlb	0	; () banked
 13917  000C2C  6F8E               	movwf	printf@f& (0+255),b
 13918  000C2E  0EFB               	movlw	high STR_98
 13919  000C30  0100               	movlb	0	; () banked
 13920  000C32  6F8F               	movwf	(printf@f+1)& (0+255),b
 13921  000C34  EC0C  F00E         	call	_printf	;wreg free
 13922                           
 13923                           ;Test.c: 277: updateServoPosition(500, 1);
 13924  000C38  0E01               	movlw	1
 13925  000C3A  0100               	movlb	0	; () banked
 13926  000C3C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13927  000C3E  0EF4               	movlw	244
 13928  000C40  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13929  000C42  0E00               	movlw	0
 13930  000C44  0100               	movlb	0	; () banked
 13931  000C46  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13932  000C48  0E01               	movlw	1
 13933  000C4A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13934  000C4C  ECCA  F027         	call	_updateServoPosition	;wreg free
 13935                           
 13936                           ;Test.c: 278: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13937  000C50  0E00               	movlw	0
 13938  000C52  0100               	movlb	0	; () banked
 13939  000C54  6FB0               	movwf	actuatorTest@i_1751& (0+255),b
 13940  000C56                     l8556:
 13941                           
 13942                           ; BSR set to: 0
 13943  000C56  0E63               	movlw	99
 13944  000C58  0100               	movlb	0	; () banked
 13945  000C5A  65B0               	cpfsgt	actuatorTest@i_1751& (0+255),b
 13946  000C5C  D001               	goto	l8560
 13947  000C5E  D00C               	goto	l8564
 13948  000C60                     l8560:
 13949                           
 13950                           ; BSR set to: 0
 13951  000C60  0E68               	movlw	104
 13952  000C62  0100               	movlb	0	; () banked
 13953  000C64  6FAB               	movwf	??_actuatorTest& (0+255),b
 13954  000C66  0EE4               	movlw	228
 13955  000C68                     u11137:
 13956  000C68  2EE8               	decfsz	wreg,f,c
 13957  000C6A  D7FE               	bra	u11137
 13958  000C6C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13959  000C6E  D7FC               	bra	u11137
 13960  000C70  F000               	nop	
 13961  000C72  0100               	movlb	0	; () banked
 13962  000C74  2BB0               	incf	actuatorTest@i_1751& (0+255),f,b
 13963  000C76  D7EF               	goto	l8556
 13964  000C78                     l8564:
 13965                           
 13966                           ; BSR set to: 0
 13967  000C78  0E00               	movlw	0
 13968  000C7A  0100               	movlb	0	; () banked
 13969  000C7C  6FB1               	movwf	actuatorTest@i_1752& (0+255),b
 13970  000C7E                     l8566:
 13971                           
 13972                           ; BSR set to: 0
 13973  000C7E  0E63               	movlw	99
 13974  000C80  0100               	movlb	0	; () banked
 13975  000C82  65B1               	cpfsgt	actuatorTest@i_1752& (0+255),b
 13976  000C84  D001               	goto	l8570
 13977  000C86  D00C               	goto	l8574
 13978  000C88                     l8570:
 13979                           
 13980                           ; BSR set to: 0
 13981  000C88  0E68               	movlw	104
 13982  000C8A  0100               	movlb	0	; () banked
 13983  000C8C  6FAB               	movwf	??_actuatorTest& (0+255),b
 13984  000C8E  0EE4               	movlw	228
 13985  000C90                     u11147:
 13986  000C90  2EE8               	decfsz	wreg,f,c
 13987  000C92  D7FE               	bra	u11147
 13988  000C94  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13989  000C96  D7FC               	bra	u11147
 13990  000C98  F000               	nop	
 13991  000C9A  0100               	movlb	0	; () banked
 13992  000C9C  2BB1               	incf	actuatorTest@i_1752& (0+255),f,b
 13993  000C9E  D7EF               	goto	l8566
 13994  000CA0                     l8574:
 13995                           
 13996                           ; BSR set to: 0
 13997                           ;Test.c: 280: lcdInst(0b10000000);;lcdInst(0b11000000);;
 13998  000CA0  0E80               	movlw	128
 13999  000CA2  ECB1  F02E         	call	_lcdInst
 14000  000CA6  0EC0               	movlw	192
 14001  000CA8  ECB1  F02E         	call	_lcdInst
 14002                           
 14003                           ;Test.c: 281: printf("LEFT -- 2s      ");
 14004  000CAC  0E97               	movlw	low STR_99
 14005  000CAE  0100               	movlb	0	; () banked
 14006  000CB0  6F8E               	movwf	printf@f& (0+255),b
 14007  000CB2  0EFB               	movlw	high STR_99
 14008  000CB4  0100               	movlb	0	; () banked
 14009  000CB6  6F8F               	movwf	(printf@f+1)& (0+255),b
 14010  000CB8  EC0C  F00E         	call	_printf	;wreg free
 14011                           
 14012                           ;Test.c: 282: updateServoPosition(2400, 1);
 14013  000CBC  0E09               	movlw	9
 14014  000CBE  0100               	movlb	0	; () banked
 14015  000CC0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14016  000CC2  0E60               	movlw	96
 14017  000CC4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14018  000CC6  0E00               	movlw	0
 14019  000CC8  0100               	movlb	0	; () banked
 14020  000CCA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14021  000CCC  0E01               	movlw	1
 14022  000CCE  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14023  000CD0  ECCA  F027         	call	_updateServoPosition	;wreg free
 14024                           
 14025                           ;Test.c: 283: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14026  000CD4  0E00               	movlw	0
 14027  000CD6  0100               	movlb	0	; () banked
 14028  000CD8  6FB2               	movwf	actuatorTest@i_1754& (0+255),b
 14029  000CDA                     l8582:
 14030                           
 14031                           ; BSR set to: 0
 14032  000CDA  0E63               	movlw	99
 14033  000CDC  0100               	movlb	0	; () banked
 14034  000CDE  65B2               	cpfsgt	actuatorTest@i_1754& (0+255),b
 14035  000CE0  D001               	goto	l8586
 14036  000CE2  D00C               	goto	l8590
 14037  000CE4                     l8586:
 14038                           
 14039                           ; BSR set to: 0
 14040  000CE4  0E68               	movlw	104
 14041  000CE6  0100               	movlb	0	; () banked
 14042  000CE8  6FAB               	movwf	??_actuatorTest& (0+255),b
 14043  000CEA  0EE4               	movlw	228
 14044  000CEC                     u11157:
 14045  000CEC  2EE8               	decfsz	wreg,f,c
 14046  000CEE  D7FE               	bra	u11157
 14047  000CF0  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14048  000CF2  D7FC               	bra	u11157
 14049  000CF4  F000               	nop	
 14050  000CF6  0100               	movlb	0	; () banked
 14051  000CF8  2BB2               	incf	actuatorTest@i_1754& (0+255),f,b
 14052  000CFA  D7EF               	goto	l8582
 14053  000CFC                     l8590:
 14054                           
 14055                           ; BSR set to: 0
 14056  000CFC  0E00               	movlw	0
 14057  000CFE  0100               	movlb	0	; () banked
 14058  000D00  6FB3               	movwf	actuatorTest@i_1755& (0+255),b
 14059  000D02                     l8592:
 14060                           
 14061                           ; BSR set to: 0
 14062  000D02  0E63               	movlw	99
 14063  000D04  0100               	movlb	0	; () banked
 14064  000D06  65B3               	cpfsgt	actuatorTest@i_1755& (0+255),b
 14065  000D08  D001               	goto	l8596
 14066  000D0A  D00C               	goto	l8600
 14067  000D0C                     l8596:
 14068                           
 14069                           ; BSR set to: 0
 14070  000D0C  0E68               	movlw	104
 14071  000D0E  0100               	movlb	0	; () banked
 14072  000D10  6FAB               	movwf	??_actuatorTest& (0+255),b
 14073  000D12  0EE4               	movlw	228
 14074  000D14                     u11167:
 14075  000D14  2EE8               	decfsz	wreg,f,c
 14076  000D16  D7FE               	bra	u11167
 14077  000D18  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14078  000D1A  D7FC               	bra	u11167
 14079  000D1C  F000               	nop	
 14080  000D1E  0100               	movlb	0	; () banked
 14081  000D20  2BB3               	incf	actuatorTest@i_1755& (0+255),f,b
 14082  000D22  D7EF               	goto	l8592
 14083  000D24                     l8600:
 14084                           
 14085                           ; BSR set to: 0
 14086                           ;Test.c: 285: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14087  000D24  0E80               	movlw	128
 14088  000D26  ECB1  F02E         	call	_lcdInst
 14089  000D2A  0EC0               	movlw	192
 14090  000D2C  ECB1  F02E         	call	_lcdInst
 14091                           
 14092                           ;Test.c: 286: printf("MID-LEFT -- 2s  ");
 14093  000D30  0E1F               	movlw	low STR_100
 14094  000D32  0100               	movlb	0	; () banked
 14095  000D34  6F8E               	movwf	printf@f& (0+255),b
 14096  000D36  0EFC               	movlw	high STR_100
 14097  000D38  0100               	movlb	0	; () banked
 14098  000D3A  6F8F               	movwf	(printf@f+1)& (0+255),b
 14099  000D3C  EC0C  F00E         	call	_printf	;wreg free
 14100                           
 14101                           ;Test.c: 287: updateServoPosition(1670, 1);
 14102  000D40  0E06               	movlw	6
 14103  000D42  0100               	movlb	0	; () banked
 14104  000D44  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14105  000D46  0E86               	movlw	134
 14106  000D48  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14107  000D4A  0E00               	movlw	0
 14108  000D4C  0100               	movlb	0	; () banked
 14109  000D4E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14110  000D50  0E01               	movlw	1
 14111  000D52  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14112  000D54  ECCA  F027         	call	_updateServoPosition	;wreg free
 14113                           
 14114                           ;Test.c: 288: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14115  000D58  0E00               	movlw	0
 14116  000D5A  0100               	movlb	0	; () banked
 14117  000D5C  6FB4               	movwf	actuatorTest@i_1757& (0+255),b
 14118  000D5E                     l8608:
 14119                           
 14120                           ; BSR set to: 0
 14121  000D5E  0E63               	movlw	99
 14122  000D60  0100               	movlb	0	; () banked
 14123  000D62  65B4               	cpfsgt	actuatorTest@i_1757& (0+255),b
 14124  000D64  D001               	goto	l8612
 14125  000D66  D00C               	goto	l8616
 14126  000D68                     l8612:
 14127                           
 14128                           ; BSR set to: 0
 14129  000D68  0E68               	movlw	104
 14130  000D6A  0100               	movlb	0	; () banked
 14131  000D6C  6FAB               	movwf	??_actuatorTest& (0+255),b
 14132  000D6E  0EE4               	movlw	228
 14133  000D70                     u11177:
 14134  000D70  2EE8               	decfsz	wreg,f,c
 14135  000D72  D7FE               	bra	u11177
 14136  000D74  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14137  000D76  D7FC               	bra	u11177
 14138  000D78  F000               	nop	
 14139  000D7A  0100               	movlb	0	; () banked
 14140  000D7C  2BB4               	incf	actuatorTest@i_1757& (0+255),f,b
 14141  000D7E  D7EF               	goto	l8608
 14142  000D80                     l8616:
 14143                           
 14144                           ; BSR set to: 0
 14145  000D80  0E00               	movlw	0
 14146  000D82  0100               	movlb	0	; () banked
 14147  000D84  6FB5               	movwf	actuatorTest@i_1758& (0+255),b
 14148  000D86                     l8618:
 14149                           
 14150                           ; BSR set to: 0
 14151  000D86  0E63               	movlw	99
 14152  000D88  0100               	movlb	0	; () banked
 14153  000D8A  65B5               	cpfsgt	actuatorTest@i_1758& (0+255),b
 14154  000D8C  D001               	goto	l8622
 14155  000D8E  D00C               	goto	l8626
 14156  000D90                     l8622:
 14157                           
 14158                           ; BSR set to: 0
 14159  000D90  0E68               	movlw	104
 14160  000D92  0100               	movlb	0	; () banked
 14161  000D94  6FAB               	movwf	??_actuatorTest& (0+255),b
 14162  000D96  0EE4               	movlw	228
 14163  000D98                     u11187:
 14164  000D98  2EE8               	decfsz	wreg,f,c
 14165  000D9A  D7FE               	bra	u11187
 14166  000D9C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14167  000D9E  D7FC               	bra	u11187
 14168  000DA0  F000               	nop	
 14169  000DA2  0100               	movlb	0	; () banked
 14170  000DA4  2BB5               	incf	actuatorTest@i_1758& (0+255),f,b
 14171  000DA6  D7EF               	goto	l8618
 14172  000DA8                     l8626:
 14173                           
 14174                           ; BSR set to: 0
 14175                           ;Test.c: 290: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14176  000DA8  0E80               	movlw	128
 14177  000DAA  ECB1  F02E         	call	_lcdInst
 14178  000DAE  0EC0               	movlw	192
 14179  000DB0  ECB1  F02E         	call	_lcdInst
 14180                           
 14181                           ;Test.c: 291: printf("MID-RIGHT -- 2s ");
 14182  000DB4  0E30               	movlw	low STR_101
 14183  000DB6  0100               	movlb	0	; () banked
 14184  000DB8  6F8E               	movwf	printf@f& (0+255),b
 14185  000DBA  0EFC               	movlw	high STR_101
 14186  000DBC  0100               	movlb	0	; () banked
 14187  000DBE  6F8F               	movwf	(printf@f+1)& (0+255),b
 14188  000DC0  EC0C  F00E         	call	_printf	;wreg free
 14189                           
 14190                           ;Test.c: 292: updateServoPosition(850, 1);
 14191  000DC4  0E03               	movlw	3
 14192  000DC6  0100               	movlb	0	; () banked
 14193  000DC8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14194  000DCA  0E52               	movlw	82
 14195  000DCC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14196  000DCE  0E00               	movlw	0
 14197  000DD0  0100               	movlb	0	; () banked
 14198  000DD2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14199  000DD4  0E01               	movlw	1
 14200  000DD6  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14201  000DD8  ECCA  F027         	call	_updateServoPosition	;wreg free
 14202                           
 14203                           ;Test.c: 293: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14204  000DDC  0E00               	movlw	0
 14205  000DDE  0100               	movlb	0	; () banked
 14206  000DE0  6FB6               	movwf	actuatorTest@i_1760& (0+255),b
 14207  000DE2                     l8634:
 14208                           
 14209                           ; BSR set to: 0
 14210  000DE2  0E63               	movlw	99
 14211  000DE4  0100               	movlb	0	; () banked
 14212  000DE6  65B6               	cpfsgt	actuatorTest@i_1760& (0+255),b
 14213  000DE8  D001               	goto	l8638
 14214  000DEA  D00C               	goto	l8642
 14215  000DEC                     l8638:
 14216                           
 14217                           ; BSR set to: 0
 14218  000DEC  0E68               	movlw	104
 14219  000DEE  0100               	movlb	0	; () banked
 14220  000DF0  6FAB               	movwf	??_actuatorTest& (0+255),b
 14221  000DF2  0EE4               	movlw	228
 14222  000DF4                     u11197:
 14223  000DF4  2EE8               	decfsz	wreg,f,c
 14224  000DF6  D7FE               	bra	u11197
 14225  000DF8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14226  000DFA  D7FC               	bra	u11197
 14227  000DFC  F000               	nop	
 14228  000DFE  0100               	movlb	0	; () banked
 14229  000E00  2BB6               	incf	actuatorTest@i_1760& (0+255),f,b
 14230  000E02  D7EF               	goto	l8634
 14231  000E04                     l8642:
 14232                           
 14233                           ; BSR set to: 0
 14234  000E04  0E00               	movlw	0
 14235  000E06  0100               	movlb	0	; () banked
 14236  000E08  6FB7               	movwf	actuatorTest@i_1761& (0+255),b
 14237  000E0A                     l8644:
 14238                           
 14239                           ; BSR set to: 0
 14240  000E0A  0E63               	movlw	99
 14241  000E0C  0100               	movlb	0	; () banked
 14242  000E0E  65B7               	cpfsgt	actuatorTest@i_1761& (0+255),b
 14243  000E10  D001               	goto	l8648
 14244  000E12  D00C               	goto	l8652
 14245  000E14                     l8648:
 14246                           
 14247                           ; BSR set to: 0
 14248  000E14  0E68               	movlw	104
 14249  000E16  0100               	movlb	0	; () banked
 14250  000E18  6FAB               	movwf	??_actuatorTest& (0+255),b
 14251  000E1A  0EE4               	movlw	228
 14252  000E1C                     u11207:
 14253  000E1C  2EE8               	decfsz	wreg,f,c
 14254  000E1E  D7FE               	bra	u11207
 14255  000E20  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14256  000E22  D7FC               	bra	u11207
 14257  000E24  F000               	nop	
 14258  000E26  0100               	movlb	0	; () banked
 14259  000E28  2BB7               	incf	actuatorTest@i_1761& (0+255),f,b
 14260  000E2A  D7EF               	goto	l8644
 14261  000E2C                     l8652:
 14262                           
 14263                           ; BSR set to: 0
 14264                           ;Test.c: 295: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14265  000E2C  0E80               	movlw	128
 14266  000E2E  ECB1  F02E         	call	_lcdInst
 14267  000E32  0EC0               	movlw	192
 14268  000E34  ECB1  F02E         	call	_lcdInst
 14269                           
 14270                           ;Test.c: 296: printf("MID -- 2s       ");
 14271  000E38  0E75               	movlw	low STR_102
 14272  000E3A  0100               	movlb	0	; () banked
 14273  000E3C  6F8E               	movwf	printf@f& (0+255),b
 14274  000E3E  0EFB               	movlw	high STR_102
 14275  000E40  0100               	movlb	0	; () banked
 14276  000E42  6F8F               	movwf	(printf@f+1)& (0+255),b
 14277  000E44  EC0C  F00E         	call	_printf	;wreg free
 14278                           
 14279                           ;Test.c: 297: updateServoPosition(1200, 1);
 14280  000E48  0E04               	movlw	4
 14281  000E4A  0100               	movlb	0	; () banked
 14282  000E4C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14283  000E4E  0EB0               	movlw	176
 14284  000E50  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14285  000E52  0E00               	movlw	0
 14286  000E54  0100               	movlb	0	; () banked
 14287  000E56  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14288  000E58  0E01               	movlw	1
 14289  000E5A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14290  000E5C  ECCA  F027         	call	_updateServoPosition	;wreg free
 14291                           
 14292                           ;Test.c: 298: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14293  000E60  0E00               	movlw	0
 14294  000E62  0100               	movlb	0	; () banked
 14295  000E64  6FB8               	movwf	actuatorTest@i_1763& (0+255),b
 14296  000E66                     l8660:
 14297                           
 14298                           ; BSR set to: 0
 14299  000E66  0E63               	movlw	99
 14300  000E68  0100               	movlb	0	; () banked
 14301  000E6A  65B8               	cpfsgt	actuatorTest@i_1763& (0+255),b
 14302  000E6C  D001               	goto	l8664
 14303  000E6E  D00C               	goto	l8668
 14304  000E70                     l8664:
 14305                           
 14306                           ; BSR set to: 0
 14307  000E70  0E68               	movlw	104
 14308  000E72  0100               	movlb	0	; () banked
 14309  000E74  6FAB               	movwf	??_actuatorTest& (0+255),b
 14310  000E76  0EE4               	movlw	228
 14311  000E78                     u11217:
 14312  000E78  2EE8               	decfsz	wreg,f,c
 14313  000E7A  D7FE               	bra	u11217
 14314  000E7C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14315  000E7E  D7FC               	bra	u11217
 14316  000E80  F000               	nop	
 14317  000E82  0100               	movlb	0	; () banked
 14318  000E84  2BB8               	incf	actuatorTest@i_1763& (0+255),f,b
 14319  000E86  D7EF               	goto	l8660
 14320  000E88                     l8668:
 14321                           
 14322                           ; BSR set to: 0
 14323  000E88  0E00               	movlw	0
 14324  000E8A  0100               	movlb	0	; () banked
 14325  000E8C  6FB9               	movwf	actuatorTest@i_1764& (0+255),b
 14326  000E8E                     l8670:
 14327                           
 14328                           ; BSR set to: 0
 14329  000E8E  0E63               	movlw	99
 14330  000E90  0100               	movlb	0	; () banked
 14331  000E92  65B9               	cpfsgt	actuatorTest@i_1764& (0+255),b
 14332  000E94  D001               	goto	l8674
 14333  000E96  D00C               	goto	l1352
 14334  000E98                     l8674:
 14335                           
 14336                           ; BSR set to: 0
 14337  000E98  0E68               	movlw	104
 14338  000E9A  0100               	movlb	0	; () banked
 14339  000E9C  6FAB               	movwf	??_actuatorTest& (0+255),b
 14340  000E9E  0EE4               	movlw	228
 14341  000EA0                     u11227:
 14342  000EA0  2EE8               	decfsz	wreg,f,c
 14343  000EA2  D7FE               	bra	u11227
 14344  000EA4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14345  000EA6  D7FC               	bra	u11227
 14346  000EA8  F000               	nop	
 14347  000EAA  0100               	movlb	0	; () banked
 14348  000EAC  2BB9               	incf	actuatorTest@i_1764& (0+255),f,b
 14349  000EAE  D7EF               	goto	l8670
 14350  000EB0                     l1352:
 14351                           
 14352                           ; BSR set to: 0
 14353                           ;Test.c: 299: TMR1ON = 0;
 14354  000EB0  90CD               	bcf	4045,0,c	;volatile
 14355                           
 14356                           ; BSR set to: 0
 14357                           ;Test.c: 306: printf("TST: TILT SERVO");
 14358  000EB2  0E2D               	movlw	low STR_103
 14359  000EB4  0100               	movlb	0	; () banked
 14360  000EB6  6F8E               	movwf	printf@f& (0+255),b
 14361  000EB8  0EFE               	movlw	high STR_103
 14362  000EBA  0100               	movlb	0	; () banked
 14363  000EBC  6F8F               	movwf	(printf@f+1)& (0+255),b
 14364  000EBE  EC0C  F00E         	call	_printf	;wreg free
 14365                           
 14366                           ;Test.c: 307: lcdInst(0b11000000);;
 14367  000EC2  0EC0               	movlw	192
 14368  000EC4  ECB1  F02E         	call	_lcdInst
 14369                           
 14370                           ;Test.c: 308: printf("LEVEL -- 2s     ");
 14371  000EC8  0EA8               	movlw	low STR_104
 14372  000ECA  0100               	movlb	0	; () banked
 14373  000ECC  6F8E               	movwf	printf@f& (0+255),b
 14374  000ECE  0EFB               	movlw	high STR_104
 14375  000ED0  0100               	movlb	0	; () banked
 14376  000ED2  6F8F               	movwf	(printf@f+1)& (0+255),b
 14377  000ED4  EC0C  F00E         	call	_printf	;wreg free
 14378                           
 14379                           ;Test.c: 309: updateServoPosition(1050, 3);
 14380  000ED8  0E04               	movlw	4
 14381  000EDA  0100               	movlb	0	; () banked
 14382  000EDC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14383  000EDE  0E1A               	movlw	26
 14384  000EE0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14385  000EE2  0E00               	movlw	0
 14386  000EE4  0100               	movlb	0	; () banked
 14387  000EE6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14388  000EE8  0E03               	movlw	3
 14389  000EEA  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14390  000EEC  ECCA  F027         	call	_updateServoPosition	;wreg free
 14391                           
 14392                           ;Test.c: 310: TMR3ON = 1;
 14393  000EF0  80B1               	bsf	4017,0,c	;volatile
 14394                           
 14395                           ;Test.c: 311: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14396  000EF2  0E00               	movlw	0
 14397  000EF4  0100               	movlb	0	; () banked
 14398  000EF6  6FBA               	movwf	actuatorTest@i_1767& (0+255),b
 14399  000EF8                     l8688:
 14400                           
 14401                           ; BSR set to: 0
 14402  000EF8  0E63               	movlw	99
 14403  000EFA  0100               	movlb	0	; () banked
 14404  000EFC  65BA               	cpfsgt	actuatorTest@i_1767& (0+255),b
 14405  000EFE  D001               	goto	l8692
 14406  000F00  D00C               	goto	l8696
 14407  000F02                     l8692:
 14408                           
 14409                           ; BSR set to: 0
 14410  000F02  0E68               	movlw	104
 14411  000F04  0100               	movlb	0	; () banked
 14412  000F06  6FAB               	movwf	??_actuatorTest& (0+255),b
 14413  000F08  0EE4               	movlw	228
 14414  000F0A                     u11237:
 14415  000F0A  2EE8               	decfsz	wreg,f,c
 14416  000F0C  D7FE               	bra	u11237
 14417  000F0E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14418  000F10  D7FC               	bra	u11237
 14419  000F12  F000               	nop	
 14420  000F14  0100               	movlb	0	; () banked
 14421  000F16  2BBA               	incf	actuatorTest@i_1767& (0+255),f,b
 14422  000F18  D7EF               	goto	l8688
 14423  000F1A                     l8696:
 14424                           
 14425                           ; BSR set to: 0
 14426  000F1A  0E00               	movlw	0
 14427  000F1C  0100               	movlb	0	; () banked
 14428  000F1E  6FBB               	movwf	actuatorTest@i_1768& (0+255),b
 14429  000F20                     l8698:
 14430                           
 14431                           ; BSR set to: 0
 14432  000F20  0E63               	movlw	99
 14433  000F22  0100               	movlb	0	; () banked
 14434  000F24  65BB               	cpfsgt	actuatorTest@i_1768& (0+255),b
 14435  000F26  D001               	goto	l8702
 14436  000F28  D00C               	goto	l8706
 14437  000F2A                     l8702:
 14438                           
 14439                           ; BSR set to: 0
 14440  000F2A  0E68               	movlw	104
 14441  000F2C  0100               	movlb	0	; () banked
 14442  000F2E  6FAB               	movwf	??_actuatorTest& (0+255),b
 14443  000F30  0EE4               	movlw	228
 14444  000F32                     u11247:
 14445  000F32  2EE8               	decfsz	wreg,f,c
 14446  000F34  D7FE               	bra	u11247
 14447  000F36  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14448  000F38  D7FC               	bra	u11247
 14449  000F3A  F000               	nop	
 14450  000F3C  0100               	movlb	0	; () banked
 14451  000F3E  2BBB               	incf	actuatorTest@i_1768& (0+255),f,b
 14452  000F40  D7EF               	goto	l8698
 14453  000F42                     l8706:
 14454                           
 14455                           ; BSR set to: 0
 14456                           ;Test.c: 313: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14457  000F42  0E80               	movlw	128
 14458  000F44  ECB1  F02E         	call	_lcdInst
 14459  000F48  0EC0               	movlw	192
 14460  000F4A  ECB1  F02E         	call	_lcdInst
 14461                           
 14462                           ;Test.c: 314: printf("DROP -- 2s      ");
 14463  000F4E  0E86               	movlw	low STR_105
 14464  000F50  0100               	movlb	0	; () banked
 14465  000F52  6F8E               	movwf	printf@f& (0+255),b
 14466  000F54  0EFB               	movlw	high STR_105
 14467  000F56  0100               	movlb	0	; () banked
 14468  000F58  6F8F               	movwf	(printf@f+1)& (0+255),b
 14469  000F5A  EC0C  F00E         	call	_printf	;wreg free
 14470                           
 14471                           ;Test.c: 315: updateServoPosition(1260, 3);
 14472  000F5E  0E04               	movlw	4
 14473  000F60  0100               	movlb	0	; () banked
 14474  000F62  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14475  000F64  0EEC               	movlw	236
 14476  000F66  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14477  000F68  0E00               	movlw	0
 14478  000F6A  0100               	movlb	0	; () banked
 14479  000F6C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14480  000F6E  0E03               	movlw	3
 14481  000F70  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14482  000F72  ECCA  F027         	call	_updateServoPosition	;wreg free
 14483                           
 14484                           ;Test.c: 316: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14485  000F76  0E00               	movlw	0
 14486  000F78  0100               	movlb	0	; () banked
 14487  000F7A  6FBC               	movwf	actuatorTest@i_1770& (0+255),b
 14488  000F7C                     l8714:
 14489                           
 14490                           ; BSR set to: 0
 14491  000F7C  0E63               	movlw	99
 14492  000F7E  0100               	movlb	0	; () banked
 14493  000F80  65BC               	cpfsgt	actuatorTest@i_1770& (0+255),b
 14494  000F82  D001               	goto	l8718
 14495  000F84  D00C               	goto	l8722
 14496  000F86                     l8718:
 14497                           
 14498                           ; BSR set to: 0
 14499  000F86  0E68               	movlw	104
 14500  000F88  0100               	movlb	0	; () banked
 14501  000F8A  6FAB               	movwf	??_actuatorTest& (0+255),b
 14502  000F8C  0EE4               	movlw	228
 14503  000F8E                     u11257:
 14504  000F8E  2EE8               	decfsz	wreg,f,c
 14505  000F90  D7FE               	bra	u11257
 14506  000F92  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14507  000F94  D7FC               	bra	u11257
 14508  000F96  F000               	nop	
 14509  000F98  0100               	movlb	0	; () banked
 14510  000F9A  2BBC               	incf	actuatorTest@i_1770& (0+255),f,b
 14511  000F9C  D7EF               	goto	l8714
 14512  000F9E                     l8722:
 14513                           
 14514                           ; BSR set to: 0
 14515  000F9E  0E00               	movlw	0
 14516  000FA0  0100               	movlb	0	; () banked
 14517  000FA2  6FBD               	movwf	actuatorTest@i_1771& (0+255),b
 14518  000FA4                     l8724:
 14519                           
 14520                           ; BSR set to: 0
 14521  000FA4  0E63               	movlw	99
 14522  000FA6  0100               	movlb	0	; () banked
 14523  000FA8  65BD               	cpfsgt	actuatorTest@i_1771& (0+255),b
 14524  000FAA  D001               	goto	l8728
 14525  000FAC  D00C               	goto	l8732
 14526  000FAE                     l8728:
 14527                           
 14528                           ; BSR set to: 0
 14529  000FAE  0E68               	movlw	104
 14530  000FB0  0100               	movlb	0	; () banked
 14531  000FB2  6FAB               	movwf	??_actuatorTest& (0+255),b
 14532  000FB4  0EE4               	movlw	228
 14533  000FB6                     u11267:
 14534  000FB6  2EE8               	decfsz	wreg,f,c
 14535  000FB8  D7FE               	bra	u11267
 14536  000FBA  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14537  000FBC  D7FC               	bra	u11267
 14538  000FBE  F000               	nop	
 14539  000FC0  0100               	movlb	0	; () banked
 14540  000FC2  2BBD               	incf	actuatorTest@i_1771& (0+255),f,b
 14541  000FC4  D7EF               	goto	l8724
 14542  000FC6                     l8732:
 14543                           
 14544                           ; BSR set to: 0
 14545                           ;Test.c: 318: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14546  000FC6  0E80               	movlw	128
 14547  000FC8  ECB1  F02E         	call	_lcdInst
 14548  000FCC  0EC0               	movlw	192
 14549  000FCE  ECB1  F02E         	call	_lcdInst
 14550                           
 14551                           ;Test.c: 319: printf("LEVEL -- 2s     ");
 14552  000FD2  0EA8               	movlw	low STR_104
 14553  000FD4  0100               	movlb	0	; () banked
 14554  000FD6  6F8E               	movwf	printf@f& (0+255),b
 14555  000FD8  0EFB               	movlw	high STR_104
 14556  000FDA  0100               	movlb	0	; () banked
 14557  000FDC  6F8F               	movwf	(printf@f+1)& (0+255),b
 14558  000FDE  EC0C  F00E         	call	_printf	;wreg free
 14559                           
 14560                           ;Test.c: 320: updateServoPosition(1050, 3);
 14561  000FE2  0E04               	movlw	4
 14562  000FE4  0100               	movlb	0	; () banked
 14563  000FE6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14564  000FE8  0E1A               	movlw	26
 14565  000FEA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14566  000FEC  0E00               	movlw	0
 14567  000FEE  0100               	movlb	0	; () banked
 14568  000FF0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14569  000FF2  0E03               	movlw	3
 14570  000FF4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14571  000FF6  ECCA  F027         	call	_updateServoPosition	;wreg free
 14572                           
 14573                           ;Test.c: 321: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14574  000FFA  0E00               	movlw	0
 14575  000FFC  0100               	movlb	0	; () banked
 14576  000FFE  6FBE               	movwf	actuatorTest@i_1773& (0+255),b
 14577  001000                     l8740:
 14578                           
 14579                           ; BSR set to: 0
 14580  001000  0E63               	movlw	99
 14581  001002  0100               	movlb	0	; () banked
 14582  001004  65BE               	cpfsgt	actuatorTest@i_1773& (0+255),b
 14583  001006  D001               	goto	l8744
 14584  001008  D00C               	goto	l8748
 14585  00100A                     l8744:
 14586                           
 14587                           ; BSR set to: 0
 14588  00100A  0E68               	movlw	104
 14589  00100C  0100               	movlb	0	; () banked
 14590  00100E  6FAB               	movwf	??_actuatorTest& (0+255),b
 14591  001010  0EE4               	movlw	228
 14592  001012                     u11277:
 14593  001012  2EE8               	decfsz	wreg,f,c
 14594  001014  D7FE               	bra	u11277
 14595  001016  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14596  001018  D7FC               	bra	u11277
 14597  00101A  F000               	nop	
 14598  00101C  0100               	movlb	0	; () banked
 14599  00101E  2BBE               	incf	actuatorTest@i_1773& (0+255),f,b
 14600  001020  D7EF               	goto	l8740
 14601  001022                     l8748:
 14602                           
 14603                           ; BSR set to: 0
 14604  001022  0E00               	movlw	0
 14605  001024  0100               	movlb	0	; () banked
 14606  001026  6FBF               	movwf	actuatorTest@i_1774& (0+255),b
 14607  001028                     l8750:
 14608                           
 14609                           ; BSR set to: 0
 14610  001028  0E63               	movlw	99
 14611  00102A  0100               	movlb	0	; () banked
 14612  00102C  65BF               	cpfsgt	actuatorTest@i_1774& (0+255),b
 14613  00102E  D001               	goto	l8754
 14614  001030  D00C               	goto	l1364
 14615  001032                     l8754:
 14616                           
 14617                           ; BSR set to: 0
 14618  001032  0E68               	movlw	104
 14619  001034  0100               	movlb	0	; () banked
 14620  001036  6FAB               	movwf	??_actuatorTest& (0+255),b
 14621  001038  0EE4               	movlw	228
 14622  00103A                     u11287:
 14623  00103A  2EE8               	decfsz	wreg,f,c
 14624  00103C  D7FE               	bra	u11287
 14625  00103E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14626  001040  D7FC               	bra	u11287
 14627  001042  F000               	nop	
 14628  001044  0100               	movlb	0	; () banked
 14629  001046  2BBF               	incf	actuatorTest@i_1774& (0+255),f,b
 14630  001048  D7EF               	goto	l8750
 14631  00104A                     l1364:
 14632                           
 14633                           ; BSR set to: 0
 14634                           ;Test.c: 322: TMR3ON = 0;
 14635  00104A  90B1               	bcf	4017,0,c	;volatile
 14636                           
 14637                           ;Test.c: 323: (INTCONbits.GIE = 0);
 14638  00104C  9EF2               	bcf	intcon,7,c	;volatile
 14639                           
 14640                           ; BSR set to: 0
 14641                           ;Test.c: 328: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14642  00104E  0E01               	movlw	1
 14643  001050  ECB1  F02E         	call	_lcdInst
 14644  001054  0E68               	movlw	104
 14645  001056  0100               	movlb	0	; () banked
 14646  001058  6FAB               	movwf	??_actuatorTest& (0+255),b
 14647  00105A  0EE4               	movlw	228
 14648  00105C                     u11297:
 14649  00105C  2EE8               	decfsz	wreg,f,c
 14650  00105E  D7FE               	bra	u11297
 14651  001060  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14652  001062  D7FC               	bra	u11297
 14653  001064  F000               	nop	
 14654  001066  0E80               	movlw	128
 14655  001068  ECB1  F02E         	call	_lcdInst
 14656                           
 14657                           ;Test.c: 329: printf("TST: CAM SERVO");
 14658  00106C  0EB8               	movlw	low STR_107
 14659  00106E  0100               	movlb	0	; () banked
 14660  001070  6F8E               	movwf	printf@f& (0+255),b
 14661  001072  0EFE               	movlw	high STR_107
 14662  001074  0100               	movlb	0	; () banked
 14663  001076  6F8F               	movwf	(printf@f+1)& (0+255),b
 14664  001078  EC0C  F00E         	call	_printf	;wreg free
 14665                           
 14666                           ;Test.c: 330: lcdInst(0b11000000);;
 14667  00107C  0EC0               	movlw	192
 14668  00107E  ECB1  F02E         	call	_lcdInst
 14669                           
 14670                           ;Test.c: 331: printf("CAM UP  |RC0=1");
 14671  001082  0E9A               	movlw	low STR_108
 14672  001084  0100               	movlb	0	; () banked
 14673  001086  6F8E               	movwf	printf@f& (0+255),b
 14674  001088  0EFE               	movlw	high STR_108
 14675  00108A  0100               	movlb	0	; () banked
 14676  00108C  6F8F               	movwf	(printf@f+1)& (0+255),b
 14677  00108E  EC0C  F00E         	call	_printf	;wreg free
 14678                           
 14679                           ;Test.c: 332: LATCbits.LATC0 = 1;
 14680  001092  808B               	bsf	3979,0,c	;volatile
 14681                           
 14682                           ;Test.c: 333: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14683  001094  0E00               	movlw	0
 14684  001096  0100               	movlb	0	; () banked
 14685  001098  6FC0               	movwf	actuatorTest@i_1777& (0+255),b
 14686  00109A                     l8774:
 14687                           
 14688                           ; BSR set to: 0
 14689  00109A  0E63               	movlw	99
 14690  00109C  0100               	movlb	0	; () banked
 14691  00109E  65C0               	cpfsgt	actuatorTest@i_1777& (0+255),b
 14692  0010A0  D001               	goto	l8778
 14693  0010A2  D00C               	goto	l8782
 14694  0010A4                     l8778:
 14695                           
 14696                           ; BSR set to: 0
 14697  0010A4  0E68               	movlw	104
 14698  0010A6  0100               	movlb	0	; () banked
 14699  0010A8  6FAB               	movwf	??_actuatorTest& (0+255),b
 14700  0010AA  0EE4               	movlw	228
 14701  0010AC                     u11307:
 14702  0010AC  2EE8               	decfsz	wreg,f,c
 14703  0010AE  D7FE               	bra	u11307
 14704  0010B0  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14705  0010B2  D7FC               	bra	u11307
 14706  0010B4  F000               	nop	
 14707  0010B6  0100               	movlb	0	; () banked
 14708  0010B8  2BC0               	incf	actuatorTest@i_1777& (0+255),f,b
 14709  0010BA  D7EF               	goto	l8774
 14710  0010BC                     l8782:
 14711                           
 14712                           ; BSR set to: 0
 14713  0010BC  0E00               	movlw	0
 14714  0010BE  0100               	movlb	0	; () banked
 14715  0010C0  6FC1               	movwf	actuatorTest@i_1778& (0+255),b
 14716  0010C2                     l8784:
 14717                           
 14718                           ; BSR set to: 0
 14719  0010C2  0E63               	movlw	99
 14720  0010C4  0100               	movlb	0	; () banked
 14721  0010C6  65C1               	cpfsgt	actuatorTest@i_1778& (0+255),b
 14722  0010C8  D001               	goto	l8788
 14723  0010CA  D00C               	goto	l8792
 14724  0010CC                     l8788:
 14725                           
 14726                           ; BSR set to: 0
 14727  0010CC  0E68               	movlw	104
 14728  0010CE  0100               	movlb	0	; () banked
 14729  0010D0  6FAB               	movwf	??_actuatorTest& (0+255),b
 14730  0010D2  0EE4               	movlw	228
 14731  0010D4                     u11317:
 14732  0010D4  2EE8               	decfsz	wreg,f,c
 14733  0010D6  D7FE               	bra	u11317
 14734  0010D8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14735  0010DA  D7FC               	bra	u11317
 14736  0010DC  F000               	nop	
 14737  0010DE  0100               	movlb	0	; () banked
 14738  0010E0  2BC1               	incf	actuatorTest@i_1778& (0+255),f,b
 14739  0010E2  D7EF               	goto	l8784
 14740  0010E4                     l8792:
 14741                           
 14742                           ; BSR set to: 0
 14743                           ;Test.c: 334: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14744  0010E4  0E80               	movlw	128
 14745  0010E6  ECB1  F02E         	call	_lcdInst
 14746  0010EA  0EC0               	movlw	192
 14747  0010EC  ECB1  F02E         	call	_lcdInst
 14748                           
 14749                           ;Test.c: 335: printf("CAM DWN |RC0=0");
 14750  0010F0  0E8B               	movlw	low STR_109
 14751  0010F2  0100               	movlb	0	; () banked
 14752  0010F4  6F8E               	movwf	printf@f& (0+255),b
 14753  0010F6  0EFE               	movlw	high STR_109
 14754  0010F8  0100               	movlb	0	; () banked
 14755  0010FA  6F8F               	movwf	(printf@f+1)& (0+255),b
 14756  0010FC  EC0C  F00E         	call	_printf	;wreg free
 14757                           
 14758                           ;Test.c: 338: for(i=0;i<10000;i++)
 14759  001100  0E00               	movlw	0
 14760  001102  0100               	movlb	0	; () banked
 14761  001104  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 14762  001106  0E00               	movlw	0
 14763  001108  6FC4               	movwf	actuatorTest@i& (0+255),b
 14764  00110A                     l8798:
 14765                           
 14766                           ; BSR set to: 0
 14767  00110A  0100               	movlb	0	; () banked
 14768  00110C  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 14769  00110E  D008               	goto	l1369
 14770  001110  0E10               	movlw	16
 14771  001112  0100               	movlb	0	; () banked
 14772  001114  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 14773  001116  0E27               	movlw	39
 14774  001118  0100               	movlb	0	; () banked
 14775  00111A  59C5               	subwfb	(actuatorTest@i+1)& (0+255),w,b
 14776  00111C  B0D8               	btfsc	status,0,c
 14777  00111E  D00D               	goto	l8808
 14778  001120                     l1369:
 14779                           
 14780                           ; BSR set to: 0
 14781                           ;Test.c: 339: {
 14782                           ;Test.c: 340: LATCbits.LATC0 = 1;
 14783  001120  808B               	bsf	3979,0,c	;volatile
 14784                           
 14785                           ; BSR set to: 0
 14786                           ;Test.c: 341: _delay((unsigned long)((10)*(32000000/4000000.0)));
 14787  001122  0E1A               	movlw	26
 14788  001124                     u11327:
 14789  001124  2EE8               	decfsz	wreg,f,c
 14790  001126  D7FE               	bra	u11327
 14791  001128  D000               	nop2	
 14792                           
 14793                           ;Test.c: 342: LATCbits.LATC0 = 0;
 14794  00112A  908B               	bcf	3979,0,c	;volatile
 14795                           
 14796                           ;Test.c: 343: _delay((unsigned long)((90)*(32000000/4000000.0)));
 14797  00112C  0EF0               	movlw	240
 14798  00112E                     u11337:
 14799  00112E  2EE8               	decfsz	wreg,f,c
 14800  001130  D7FE               	bra	u11337
 14801  001132  0100               	movlb	0	; () banked
 14802  001134  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 14803  001136  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 14804  001138  D7E8               	goto	l8798
 14805  00113A                     l8808:
 14806                           
 14807                           ; BSR set to: 0
 14808                           ;Test.c: 344: }
 14809                           ;Test.c: 346: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14810  00113A  0E00               	movlw	0
 14811  00113C  0100               	movlb	0	; () banked
 14812  00113E  6FC2               	movwf	actuatorTest@i_1780& (0+255),b
 14813  001140                     l8810:
 14814                           
 14815                           ; BSR set to: 0
 14816  001140  0E63               	movlw	99
 14817  001142  0100               	movlb	0	; () banked
 14818  001144  65C2               	cpfsgt	actuatorTest@i_1780& (0+255),b
 14819  001146  D001               	goto	l8814
 14820  001148  D00C               	goto	l8818
 14821  00114A                     l8814:
 14822                           
 14823                           ; BSR set to: 0
 14824  00114A  0E68               	movlw	104
 14825  00114C  0100               	movlb	0	; () banked
 14826  00114E  6FAB               	movwf	??_actuatorTest& (0+255),b
 14827  001150  0EE4               	movlw	228
 14828  001152                     u11347:
 14829  001152  2EE8               	decfsz	wreg,f,c
 14830  001154  D7FE               	bra	u11347
 14831  001156  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14832  001158  D7FC               	bra	u11347
 14833  00115A  F000               	nop	
 14834  00115C  0100               	movlb	0	; () banked
 14835  00115E  2BC2               	incf	actuatorTest@i_1780& (0+255),f,b
 14836  001160  D7EF               	goto	l8810
 14837  001162                     l8818:
 14838                           
 14839                           ; BSR set to: 0
 14840  001162  0E00               	movlw	0
 14841  001164  0100               	movlb	0	; () banked
 14842  001166  6FC3               	movwf	actuatorTest@i_1781& (0+255),b
 14843  001168                     l8820:
 14844                           
 14845                           ; BSR set to: 0
 14846  001168  0E63               	movlw	99
 14847  00116A  0100               	movlb	0	; () banked
 14848  00116C  65C3               	cpfsgt	actuatorTest@i_1781& (0+255),b
 14849  00116E  D001               	goto	l8824
 14850  001170  D00C               	goto	l8828
 14851  001172                     l8824:
 14852                           
 14853                           ; BSR set to: 0
 14854  001172  0E68               	movlw	104
 14855  001174  0100               	movlb	0	; () banked
 14856  001176  6FAB               	movwf	??_actuatorTest& (0+255),b
 14857  001178  0EE4               	movlw	228
 14858  00117A                     u11357:
 14859  00117A  2EE8               	decfsz	wreg,f,c
 14860  00117C  D7FE               	bra	u11357
 14861  00117E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14862  001180  D7FC               	bra	u11357
 14863  001182  F000               	nop	
 14864  001184  0100               	movlb	0	; () banked
 14865  001186  2BC3               	incf	actuatorTest@i_1781& (0+255),f,b
 14866  001188  D7EF               	goto	l8820
 14867  00118A                     l8828:
 14868                           
 14869                           ; BSR set to: 0
 14870                           ;Test.c: 347: machine_state = Testing_state;
 14871  00118A  0E03               	movlw	3
 14872  00118C  0100               	movlb	0	; () banked
 14873  00118E  6FFC               	movwf	_machine_state& (0+255),b
 14874                           
 14875                           ; BSR set to: 0
 14876  001190  0012               	return		;funcret
 14877  001192                     __end_of_actuatorTest:
 14878                           	opt stack 0
 14879                           tblptru	equ	0xFF8
 14880                           tblptrh	equ	0xFF7
 14881                           tblptrl	equ	0xFF6
 14882                           tablat	equ	0xFF5
 14883                           prodh	equ	0xFF4
 14884                           prodl	equ	0xFF3
 14885                           intcon	equ	0xFF2
 14886                           intcon2	equ	0xFF1
 14887                           intcon3	equ	0xFF0
 14888                           postinc0	equ	0xFEE
 14889                           wreg	equ	0xFE8
 14890                           postdec1	equ	0xFE5
 14891                           fsr1l	equ	0xFE1
 14892                           indf2	equ	0xFDF
 14893                           postinc2	equ	0xFDE
 14894                           postdec2	equ	0xFDD
 14895                           fsr2h	equ	0xFDA
 14896                           fsr2l	equ	0xFD9
 14897                           status	equ	0xFD8
 14898                           
 14899 ;; *************** function _SpeedTest *****************
 14900 ;; Defined at:
 14901 ;;		line 518 in file "Test.c"
 14902 ;; Parameters:    Size  Location     Type
 14903 ;;		None
 14904 ;; Auto vars:     Size  Location     Type
 14905 ;;		None
 14906 ;; Return value:  Size  Location     Type
 14907 ;;                  1    wreg      void 
 14908 ;; Registers used:
 14909 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14910 ;; Tracked objects:
 14911 ;;		On entry : 0/0
 14912 ;;		On exit  : 0/0
 14913 ;;		Unchanged: 0/0
 14914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14915 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14916 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14917 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14918 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14919 ;;Total ram usage:        1 bytes
 14920 ;; Hardware stack levels used:    1
 14921 ;; Hardware stack levels required when called:   10
 14922 ;; This function calls:
 14923 ;;		_lcdInst
 14924 ;;		_printf
 14925 ;; This function is called by:
 14926 ;;		_Test
 14927 ;; This function uses a non-reentrant model
 14928 ;;
 14929                           
 14930                           	psect	text46
 14931  004F10                     __ptext46:
 14932                           	opt stack 0
 14933  004F10                     _SpeedTest:
 14934                           	opt stack 19
 14935                           
 14936                           ;Test.c: 520: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14937                           
 14938                           ; BSR set to: 0
 14939                           ;incstack = 0
 14940  004F10  0E01               	movlw	1
 14941  004F12  ECB1  F02E         	call	_lcdInst
 14942  004F16  0E68               	movlw	104
 14943  004F18  0100               	movlb	0	; () banked
 14944  004F1A  6FAB               	movwf	??_SpeedTest& (0+255),b
 14945  004F1C  0EE4               	movlw	228
 14946  004F1E                     u11367:
 14947  004F1E  2EE8               	decfsz	wreg,f,c
 14948  004F20  D7FE               	bra	u11367
 14949  004F22  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 14950  004F24  D7FC               	bra	u11367
 14951  004F26  F000               	nop	
 14952  004F28  0E80               	movlw	128
 14953  004F2A  ECB1  F02E         	call	_lcdInst
 14954                           
 14955                           ;Test.c: 521: printf("S: D WILL RETURN ");
 14956  004F2E  0E1B               	movlw	low STR_118
 14957  004F30  0100               	movlb	0	; () banked
 14958  004F32  6F8E               	movwf	printf@f& (0+255),b
 14959  004F34  0EFB               	movlw	high STR_118
 14960  004F36  0100               	movlb	0	; () banked
 14961  004F38  6F8F               	movwf	(printf@f+1)& (0+255),b
 14962  004F3A  EC0C  F00E         	call	_printf	;wreg free
 14963                           
 14964                           ;Test.c: 522: lcdInst(0b11000000);;
 14965  004F3E  0EC0               	movlw	192
 14966  004F40  ECB1  F02E         	call	_lcdInst
 14967                           
 14968                           ;Test.c: 523: printf("OTHER SETS RA5   ");
 14969  004F44  0E09               	movlw	low STR_119
 14970  004F46  0100               	movlb	0	; () banked
 14971  004F48  6F8E               	movwf	printf@f& (0+255),b
 14972  004F4A  0EFB               	movlw	high STR_119
 14973  004F4C  0100               	movlb	0	; () banked
 14974  004F4E  6F8F               	movwf	(printf@f+1)& (0+255),b
 14975  004F50  EC0C  F00E         	call	_printf	;wreg free
 14976  004F54                     l1427:
 14977  004F54  A281               	btfss	3969,1,c	;volatile
 14978  004F56  D7FE               	goto	l1427
 14979                           
 14980                           ;Test.c: 528: }
 14981                           ;Test.c: 529: if(PORTB >> 4 == 0b1111){
 14982  004F58  3881               	swapf	3969,w,c	;volatile
 14983  004F5A  0B0F               	andlw	15
 14984  004F5C  0A0F               	xorlw	15
 14985  004F5E  B4D8               	btfsc	status,2,c
 14986  004F60  0012               	return	
 14987  004F62  D014               	goto	l8926
 14988  004F64                     l1434:
 14989                           
 14990                           ;Test.c: 534: LATBbits.LATB2 = 1;
 14991  004F64  848A               	bsf	3978,2,c	;volatile
 14992                           
 14993                           ;Test.c: 535: _delay((unsigned long)((5)*(32000000/4000.0)));
 14994  004F66  0E34               	movlw	52
 14995  004F68  0100               	movlb	0	; () banked
 14996  004F6A  6FAB               	movwf	??_SpeedTest& (0+255),b
 14997  004F6C  0EF1               	movlw	241
 14998  004F6E                     u11377:
 14999  004F6E  2EE8               	decfsz	wreg,f,c
 15000  004F70  D7FE               	bra	u11377
 15001  004F72  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 15002  004F74  D7FC               	bra	u11377
 15003  004F76  D000               	nop2	
 15004                           
 15005                           ;Test.c: 536: LATBbits.LATB2 = 0;
 15006  004F78  948A               	bcf	3978,2,c	;volatile
 15007                           
 15008                           ;Test.c: 537: _delay((unsigned long)((5)*(32000000/4000.0)));
 15009  004F7A  0E34               	movlw	52
 15010  004F7C  0100               	movlb	0	; () banked
 15011  004F7E  6FAB               	movwf	??_SpeedTest& (0+255),b
 15012  004F80  0EF1               	movlw	241
 15013  004F82                     u11387:
 15014  004F82  2EE8               	decfsz	wreg,f,c
 15015  004F84  D7FE               	bra	u11387
 15016  004F86  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 15017  004F88  D7FC               	bra	u11387
 15018  004F8A  D000               	nop2	
 15019  004F8C                     l8926:
 15020  004F8C  B281               	btfsc	3969,1,c	;volatile
 15021  004F8E  D7EA               	goto	l1434
 15022                           
 15023                           ;Test.c: 540: }
 15024                           ;Test.c: 541: LATBbits.LATB2 = 0;
 15025  004F90  948A               	bcf	3978,2,c	;volatile
 15026  004F92  D7E0               	goto	l1427
 15027  004F94                     __end_of_SpeedTest:
 15028                           	opt stack 0
 15029                           tblptru	equ	0xFF8
 15030                           tblptrh	equ	0xFF7
 15031                           tblptrl	equ	0xFF6
 15032                           tablat	equ	0xFF5
 15033                           prodh	equ	0xFF4
 15034                           prodl	equ	0xFF3
 15035                           intcon	equ	0xFF2
 15036                           intcon2	equ	0xFF1
 15037                           intcon3	equ	0xFF0
 15038                           postinc0	equ	0xFEE
 15039                           wreg	equ	0xFE8
 15040                           postdec1	equ	0xFE5
 15041                           fsr1l	equ	0xFE1
 15042                           indf2	equ	0xFDF
 15043                           postinc2	equ	0xFDE
 15044                           postdec2	equ	0xFDD
 15045                           fsr2h	equ	0xFDA
 15046                           fsr2l	equ	0xFD9
 15047                           status	equ	0xFD8
 15048                           
 15049 ;; *************** function _PortTestPusher *****************
 15050 ;; Defined at:
 15051 ;;		line 659 in file "Test.c"
 15052 ;; Parameters:    Size  Location     Type
 15053 ;;		None
 15054 ;; Auto vars:     Size  Location     Type
 15055 ;;		None
 15056 ;; Return value:  Size  Location     Type
 15057 ;;                  1    wreg      void 
 15058 ;; Registers used:
 15059 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15060 ;; Tracked objects:
 15061 ;;		On entry : 0/0
 15062 ;;		On exit  : 0/0
 15063 ;;		Unchanged: 0/0
 15064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15065 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15066 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15067 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15068 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15069 ;;Total ram usage:        1 bytes
 15070 ;; Hardware stack levels used:    1
 15071 ;; Hardware stack levels required when called:   10
 15072 ;; This function calls:
 15073 ;;		_lcdInst
 15074 ;;		_printf
 15075 ;; This function is called by:
 15076 ;;		_Test
 15077 ;; This function uses a non-reentrant model
 15078 ;;
 15079                           
 15080                           	psect	text47
 15081  005450                     __ptext47:
 15082                           	opt stack 0
 15083  005450                     _PortTestPusher:
 15084                           	opt stack 19
 15085                           
 15086                           ;Test.c: 660: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15087                           
 15088                           ;incstack = 0
 15089  005450  0E01               	movlw	1
 15090  005452  ECB1  F02E         	call	_lcdInst
 15091  005456  0E68               	movlw	104
 15092  005458  0100               	movlb	0	; () banked
 15093  00545A  6FAB               	movwf	??_PortTestPusher& (0+255),b
 15094  00545C  0EE4               	movlw	228
 15095  00545E                     u11397:
 15096  00545E  2EE8               	decfsz	wreg,f,c
 15097  005460  D7FE               	bra	u11397
 15098  005462  2FAB               	decfsz	??_PortTestPusher& (0+255),f,b
 15099  005464  D7FC               	bra	u11397
 15100  005466  F000               	nop	
 15101  005468  0E80               	movlw	128
 15102  00546A  ECB1  F02E         	call	_lcdInst
 15103                           
 15104                           ;Test.c: 661: printf("D WILL RETURN    ");
 15105  00546E  0EF7               	movlw	low STR_111
 15106  005470  0100               	movlb	0	; () banked
 15107  005472  6F8E               	movwf	printf@f& (0+255),b
 15108  005474  0EFA               	movlw	high STR_111
 15109  005476  0100               	movlb	0	; () banked
 15110  005478  6F8F               	movwf	(printf@f+1)& (0+255),b
 15111  00547A  EC0C  F00E         	call	_printf	;wreg free
 15112                           
 15113                           ;Test.c: 662: lcdInst(0b11000000);;
 15114  00547E  0EC0               	movlw	192
 15115  005480  ECB1  F02E         	call	_lcdInst
 15116                           
 15117                           ;Test.c: 663: printf("OTHER SETS PUSHER");
 15118  005484  0E3F               	movlw	low STR_127
 15119  005486  0100               	movlb	0	; () banked
 15120  005488  6F8E               	movwf	printf@f& (0+255),b
 15121  00548A  0EFB               	movlw	high STR_127
 15122  00548C  0100               	movlb	0	; () banked
 15123  00548E  6F8F               	movwf	(printf@f+1)& (0+255),b
 15124  005490  EC0C  F00E         	call	_printf	;wreg free
 15125  005494                     l1488:
 15126  005494  A281               	btfss	3969,1,c	;volatile
 15127  005496  D7FE               	goto	l1488
 15128                           
 15129                           ;Test.c: 668: }
 15130                           ;Test.c: 669: if(PORTB >> 4 == 0b1111){
 15131  005498  3881               	swapf	3969,w,c	;volatile
 15132  00549A  0B0F               	andlw	15
 15133  00549C  0A0F               	xorlw	15
 15134  00549E  B4D8               	btfsc	status,2,c
 15135  0054A0  0012               	return	
 15136                           
 15137                           ;Test.c: 672: else{
 15138                           ;Test.c: 673: LATAbits.LATA4 = 1;
 15139                           
 15140                           ;Test.c: 671: }
 15141                           
 15142                           ;Test.c: 670: break;
 15143  0054A2  8889               	bsf	3977,4,c	;volatile
 15144  0054A4                     l1494:
 15145  0054A4  B281               	btfsc	3969,1,c	;volatile
 15146  0054A6  D7FE               	goto	l1494
 15147                           
 15148                           ;Test.c: 676: }
 15149                           ;Test.c: 677: LATAbits.LATA4 = 0;
 15150  0054A8  9889               	bcf	3977,4,c	;volatile
 15151  0054AA  D7F4               	goto	l1488
 15152  0054AC                     __end_of_PortTestPusher:
 15153                           	opt stack 0
 15154                           tblptru	equ	0xFF8
 15155                           tblptrh	equ	0xFF7
 15156                           tblptrl	equ	0xFF6
 15157                           tablat	equ	0xFF5
 15158                           prodh	equ	0xFF4
 15159                           prodl	equ	0xFF3
 15160                           intcon	equ	0xFF2
 15161                           intcon2	equ	0xFF1
 15162                           intcon3	equ	0xFF0
 15163                           postinc0	equ	0xFEE
 15164                           wreg	equ	0xFE8
 15165                           postdec1	equ	0xFE5
 15166                           fsr1l	equ	0xFE1
 15167                           indf2	equ	0xFDF
 15168                           postinc2	equ	0xFDE
 15169                           postdec2	equ	0xFDD
 15170                           fsr2h	equ	0xFDA
 15171                           fsr2l	equ	0xFD9
 15172                           status	equ	0xFD8
 15173                           
 15174 ;; *************** function _PortTestDC *****************
 15175 ;; Defined at:
 15176 ;;		line 410 in file "Test.c"
 15177 ;; Parameters:    Size  Location     Type
 15178 ;;		None
 15179 ;; Auto vars:     Size  Location     Type
 15180 ;;		None
 15181 ;; Return value:  Size  Location     Type
 15182 ;;                  1    wreg      void 
 15183 ;; Registers used:
 15184 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15185 ;; Tracked objects:
 15186 ;;		On entry : 0/0
 15187 ;;		On exit  : 0/0
 15188 ;;		Unchanged: 0/0
 15189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15190 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15191 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15192 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15193 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15194 ;;Total ram usage:        1 bytes
 15195 ;; Hardware stack levels used:    1
 15196 ;; Hardware stack levels required when called:   10
 15197 ;; This function calls:
 15198 ;;		_lcdInst
 15199 ;;		_printf
 15200 ;; This function is called by:
 15201 ;;		_Test
 15202 ;; This function uses a non-reentrant model
 15203 ;;
 15204                           
 15205                           	psect	text48
 15206  004D6E                     __ptext48:
 15207                           	opt stack 0
 15208  004D6E                     _PortTestDC:
 15209                           	opt stack 19
 15210                           
 15211                           ;Test.c: 411: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15212                           
 15213                           ;incstack = 0
 15214  004D6E  0E01               	movlw	1
 15215  004D70  ECB1  F02E         	call	_lcdInst
 15216  004D74  0E68               	movlw	104
 15217  004D76  0100               	movlb	0	; () banked
 15218  004D78  6FAB               	movwf	??_PortTestDC& (0+255),b
 15219  004D7A  0EE4               	movlw	228
 15220  004D7C                     u11407:
 15221  004D7C  2EE8               	decfsz	wreg,f,c
 15222  004D7E  D7FE               	bra	u11407
 15223  004D80  2FAB               	decfsz	??_PortTestDC& (0+255),f,b
 15224  004D82  D7FC               	bra	u11407
 15225  004D84  F000               	nop	
 15226  004D86  0E80               	movlw	128
 15227  004D88  ECB1  F02E         	call	_lcdInst
 15228                           
 15229                           ;Test.c: 412: printf("D WILL RETURN    ");
 15230  004D8C  0EF7               	movlw	low STR_111
 15231  004D8E  0100               	movlb	0	; () banked
 15232  004D90  6F8E               	movwf	printf@f& (0+255),b
 15233  004D92  0EFA               	movlw	high STR_111
 15234  004D94  0100               	movlb	0	; () banked
 15235  004D96  6F8F               	movwf	(printf@f+1)& (0+255),b
 15236  004D98  EC0C  F00E         	call	_printf	;wreg free
 15237                           
 15238                           ;Test.c: 413: lcdInst(0b11000000);;
 15239  004D9C  0EC0               	movlw	192
 15240  004D9E  ECB1  F02E         	call	_lcdInst
 15241                           
 15242                           ;Test.c: 414: printf("OTHER SETS DC   ");
 15243  004DA2  0EDB               	movlw	low STR_112
 15244  004DA4  0100               	movlb	0	; () banked
 15245  004DA6  6F8E               	movwf	printf@f& (0+255),b
 15246  004DA8  0EFB               	movlw	high STR_112
 15247  004DAA  0100               	movlb	0	; () banked
 15248  004DAC  6F8F               	movwf	(printf@f+1)& (0+255),b
 15249  004DAE  EC0C  F00E         	call	_printf	;wreg free
 15250  004DB2                     l1382:
 15251  004DB2  A281               	btfss	3969,1,c	;volatile
 15252  004DB4  D7FE               	goto	l1382
 15253                           
 15254                           ;Test.c: 419: }
 15255                           ;Test.c: 420: if(PORTB >> 4 == 0b1111){
 15256  004DB6  3881               	swapf	3969,w,c	;volatile
 15257  004DB8  0B0F               	andlw	15
 15258  004DBA  0A0F               	xorlw	15
 15259  004DBC  B4D8               	btfsc	status,2,c
 15260  004DBE  0012               	return	
 15261                           
 15262                           ;Test.c: 422: }
 15263                           ;Test.c: 423: if(PORTB >> 4 == 0b0000){
 15264                           
 15265                           ;Test.c: 421: break;
 15266  004DC0  CF81 F0AB          	movff	3969,??_PortTestDC	;volatile
 15267  004DC4  0100               	movlb	0	; () banked
 15268  004DC6  3BAB               	swapf	??_PortTestDC& (0+255),f,b
 15269  004DC8  0E0F               	movlw	15
 15270  004DCA  17AB               	andwf	??_PortTestDC& (0+255),f,b
 15271  004DCC  A4D8               	btfss	status,2,c
 15272  004DCE  D012               	goto	l1387
 15273                           
 15274                           ; BSR set to: 0
 15275                           ;Test.c: 425: LATBbits.LATB2 = !LATBbits.LATB2;
 15276  004DD0  B48A               	btfsc	3978,2,c	;volatile
 15277  004DD2  D004               	goto	u8180
 15278  004DD4  0100               	movlb	0	; () banked
 15279  004DD6  6BAB               	clrf	??_PortTestDC& (0+255),b
 15280  004DD8  2BAB               	incf	??_PortTestDC& (0+255),f,b
 15281  004DDA  D002               	goto	u8198
 15282  004DDC                     u8180:
 15283  004DDC  0100               	movlb	0	; () banked
 15284  004DDE  6BAB               	clrf	??_PortTestDC& (0+255),b
 15285  004DE0                     u8198:
 15286  004DE0  0100               	movlb	0	; () banked
 15287  004DE2  47AB               	rlncf	??_PortTestDC& (0+255),f,b
 15288  004DE4  47AB               	rlncf	??_PortTestDC& (0+255),f,b
 15289  004DE6  508A               	movf	3978,w,c	;volatile
 15290  004DE8  0100               	movlb	0	; () banked
 15291  004DEA  19AB               	xorwf	??_PortTestDC& (0+255),w,b
 15292  004DEC  0BFB               	andlw	-5
 15293  004DEE  19AB               	xorwf	??_PortTestDC& (0+255),w,b
 15294  004DF0  6E8A               	movwf	3978,c	;volatile
 15295                           
 15296                           ;Test.c: 426: }
 15297  004DF2  D7DF               	goto	l1382
 15298  004DF4                     l1387:
 15299                           
 15300                           ; BSR set to: 0
 15301                           ;Test.c: 427: else{
 15302                           ;Test.c: 428: LATBbits.LATB2 = 1;
 15303  004DF4  848A               	bsf	3978,2,c	;volatile
 15304  004DF6                     l1389:
 15305  004DF6  B281               	btfsc	3969,1,c	;volatile
 15306  004DF8  D7FE               	goto	l1389
 15307                           
 15308                           ;Test.c: 431: }
 15309                           ;Test.c: 432: LATBbits.LATB2 = 0;
 15310  004DFA  948A               	bcf	3978,2,c	;volatile
 15311  004DFC  D7DA               	goto	l1382
 15312  004DFE                     __end_of_PortTestDC:
 15313                           	opt stack 0
 15314                           tblptru	equ	0xFF8
 15315                           tblptrh	equ	0xFF7
 15316                           tblptrl	equ	0xFF6
 15317                           tablat	equ	0xFF5
 15318                           prodh	equ	0xFF4
 15319                           prodl	equ	0xFF3
 15320                           intcon	equ	0xFF2
 15321                           intcon2	equ	0xFF1
 15322                           intcon3	equ	0xFF0
 15323                           postinc0	equ	0xFEE
 15324                           wreg	equ	0xFE8
 15325                           postdec1	equ	0xFE5
 15326                           fsr1l	equ	0xFE1
 15327                           indf2	equ	0xFDF
 15328                           postinc2	equ	0xFDE
 15329                           postdec2	equ	0xFDD
 15330                           fsr2h	equ	0xFDA
 15331                           fsr2l	equ	0xFD9
 15332                           status	equ	0xFD8
 15333                           
 15334 ;; *************** function _PlatformTest *****************
 15335 ;; Defined at:
 15336 ;;		line 437 in file "Test.c"
 15337 ;; Parameters:    Size  Location     Type
 15338 ;;		None
 15339 ;; Auto vars:     Size  Location     Type
 15340 ;;  i               2   51[BANK0 ] int 
 15341 ;;  i               2   49[BANK0 ] int 
 15342 ;;  res             2   47[BANK0 ] int 
 15343 ;;  res             2   45[BANK0 ] int 
 15344 ;;  on              2   53[BANK0 ] int 
 15345 ;; Return value:  Size  Location     Type
 15346 ;;                  1    wreg      void 
 15347 ;; Registers used:
 15348 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15349 ;; Tracked objects:
 15350 ;;		On entry : 0/0
 15351 ;;		On exit  : 0/0
 15352 ;;		Unchanged: 0/0
 15353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15354 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15355 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15356 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15357 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15358 ;;Total ram usage:       12 bytes
 15359 ;; Hardware stack levels used:    1
 15360 ;; Hardware stack levels required when called:   10
 15361 ;; This function calls:
 15362 ;;		_lcdInst
 15363 ;;		_printf
 15364 ;;		_readADC
 15365 ;;		_stopSignals
 15366 ;; This function is called by:
 15367 ;;		_Test
 15368 ;; This function uses a non-reentrant model
 15369 ;;
 15370                           
 15371                           	psect	text49
 15372  002AF2                     __ptext49:
 15373                           	opt stack 0
 15374  002AF2                     _PlatformTest:
 15375                           	opt stack 19
 15376                           
 15377                           ;Test.c: 438: LATCbits.LATC5 = 1;
 15378                           
 15379                           ;incstack = 0
 15380  002AF2  8A8B               	bsf	3979,5,c	;volatile
 15381                           
 15382                           ;Test.c: 440: machine_state = Sorting_state;
 15383  002AF4  0E01               	movlw	1
 15384  002AF6  0100               	movlb	0	; () banked
 15385  002AF8  6FFC               	movwf	_machine_state& (0+255),b
 15386                           
 15387                           ;Test.c: 441: f_arm_position = 0;
 15388  002AFA  0E00               	movlw	0
 15389  002AFC  0100               	movlb	0	; () banked
 15390  002AFE  6FE9               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 15391  002B00  0E00               	movlw	0
 15392  002B02  6FE8               	movwf	_f_arm_position& (0+255),b	;volatile
 15393                           
 15394                           ;Test.c: 442: timer2_counter = 0;
 15395  002B04  0E00               	movlw	0
 15396  002B06  6E74               	movwf	_timer2_counter+1,c	;volatile
 15397  002B08  0E00               	movlw	0
 15398  002B0A  6E73               	movwf	_timer2_counter,c	;volatile
 15399                           
 15400                           ; BSR set to: 0
 15401                           ;Test.c: 443: LATBbits.LATB3 = 0;
 15402  002B0C  968A               	bcf	3978,3,c	;volatile
 15403                           
 15404                           ; BSR set to: 0
 15405                           ;Test.c: 444: TMR2ON = 1;
 15406  002B0E  84CA               	bsf	4042,2,c	;volatile
 15407                           
 15408                           ;Test.c: 445: was_low_2 = 0;
 15409  002B10  0E00               	movlw	0
 15410  002B12  6E7A               	movwf	_was_low_2+1,c	;volatile
 15411  002B14  0E00               	movlw	0
 15412  002B16  6E79               	movwf	_was_low_2,c	;volatile
 15413                           
 15414                           ;Test.c: 447: int on = 1;
 15415  002B18  0E00               	movlw	0
 15416  002B1A  0100               	movlb	0	; () banked
 15417  002B1C  6FB6               	movwf	(PlatformTest@on+1)& (0+255),b
 15418  002B1E  0E01               	movlw	1
 15419  002B20  6FB5               	movwf	PlatformTest@on& (0+255),b
 15420                           
 15421                           ; BSR set to: 0
 15422                           ;Test.c: 448: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15423  002B22  0E01               	movlw	1
 15424  002B24  ECB1  F02E         	call	_lcdInst
 15425  002B28  0E68               	movlw	104
 15426  002B2A  0100               	movlb	0	; () banked
 15427  002B2C  6FAB               	movwf	??_PlatformTest& (0+255),b
 15428  002B2E  0EE4               	movlw	228
 15429  002B30                     u11417:
 15430  002B30  2EE8               	decfsz	wreg,f,c
 15431  002B32  D7FE               	bra	u11417
 15432  002B34  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15433  002B36  D7FC               	bra	u11417
 15434  002B38  F000               	nop	
 15435  002B3A  0E80               	movlw	128
 15436  002B3C  ECB1  F02E         	call	_lcdInst
 15437                           
 15438                           ;Test.c: 449: printf("1: DC | A: ARM  ");
 15439  002B40  0E0E               	movlw	low STR_113
 15440  002B42  0100               	movlb	0	; () banked
 15441  002B44  6F8E               	movwf	printf@f& (0+255),b
 15442  002B46  0EFC               	movlw	high STR_113
 15443  002B48  0100               	movlb	0	; () banked
 15444  002B4A  6F8F               	movwf	(printf@f+1)& (0+255),b
 15445  002B4C  EC0C  F00E         	call	_printf	;wreg free
 15446                           
 15447                           ;Test.c: 451: while(PORTBbits.RB1 == 0){
 15448  002B50  D058               	goto	l8980
 15449  002B52                     l8962:
 15450                           
 15451                           ;Test.c: 452: readADC(0);
 15452  002B52  0E00               	movlw	0
 15453  002B54  EC9C  F02D         	call	_readADC
 15454                           
 15455                           ;Test.c: 453: int res = ADRESH<<8 | ADRESL;
 15456  002B58  50C3               	movf	4035,w,c	;volatile
 15457  002B5A  CFC4 F0AB          	movff	4036,??_PlatformTest	;volatile
 15458  002B5E  0100               	movlb	0	; () banked
 15459  002B60  6BAC               	clrf	(??_PlatformTest+1)& (0+255),b
 15460  002B62  C0AB  F0AC         	movff	??_PlatformTest,??_PlatformTest+1
 15461  002B66  0100               	movlb	0	; () banked
 15462  002B68  6BAB               	clrf	??_PlatformTest& (0+255),b
 15463  002B6A  0100               	movlb	0	; () banked
 15464  002B6C  11AB               	iorwf	??_PlatformTest& (0+255),w,b
 15465  002B6E  0100               	movlb	0	; () banked
 15466  002B70  6FAD               	movwf	PlatformTest@res& (0+255),b
 15467  002B72  0100               	movlb	0	; () banked
 15468  002B74  51AC               	movf	(??_PlatformTest+1)& (0+255),w,b
 15469  002B76  0100               	movlb	0	; () banked
 15470  002B78  6FAE               	movwf	(PlatformTest@res+1)& (0+255),b
 15471                           
 15472                           ; BSR set to: 0
 15473                           ;Test.c: 454: IR_signal = (res > 800) ? 1 : 0;
 15474  002B7A  0100               	movlb	0	; () banked
 15475  002B7C  BFAE               	btfsc	(PlatformTest@res+1)& (0+255),7,b
 15476  002B7E  D00A               	goto	u8270
 15477  002B80  0E21               	movlw	33
 15478  002B82  0100               	movlb	0	; () banked
 15479  002B84  5DAD               	subwf	PlatformTest@res& (0+255),w,b
 15480  002B86  0E03               	movlw	3
 15481  002B88  0100               	movlb	0	; () banked
 15482  002B8A  59AE               	subwfb	(PlatformTest@res+1)& (0+255),w,b
 15483  002B8C  A0D8               	btfss	status,0,c
 15484  002B8E  D002               	goto	u8270
 15485  002B90  0E01               	movlw	1
 15486  002B92  D001               	goto	u8280
 15487  002B94                     u8270:
 15488  002B94  0E00               	movlw	0
 15489  002B96                     u8280:
 15490  002B96  0100               	movlb	0	; () banked
 15491  002B98  6FE0               	movwf	_IR_signal& (0+255),b
 15492  002B9A  6BE1               	clrf	(_IR_signal+1)& (0+255),b
 15493                           
 15494                           ;Test.c: 456: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15495  002B9C  0E01               	movlw	1
 15496  002B9E  ECB1  F02E         	call	_lcdInst
 15497  002BA2  0E68               	movlw	104
 15498  002BA4  0100               	movlb	0	; () banked
 15499  002BA6  6FAB               	movwf	??_PlatformTest& (0+255),b
 15500  002BA8  0EE4               	movlw	228
 15501  002BAA                     u11427:
 15502  002BAA  2EE8               	decfsz	wreg,f,c
 15503  002BAC  D7FE               	bra	u11427
 15504  002BAE  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15505  002BB0  D7FC               	bra	u11427
 15506  002BB2  F000               	nop	
 15507  002BB4  0E80               	movlw	128
 15508  002BB6  ECB1  F02E         	call	_lcdInst
 15509                           
 15510                           ;Test.c: 457: printf("1: DC | A: ARM  ");
 15511  002BBA  0E0E               	movlw	low STR_113
 15512  002BBC  0100               	movlb	0	; () banked
 15513  002BBE  6F8E               	movwf	printf@f& (0+255),b
 15514  002BC0  0EFC               	movlw	high STR_113
 15515  002BC2  0100               	movlb	0	; () banked
 15516  002BC4  6F8F               	movwf	(printf@f+1)& (0+255),b
 15517  002BC6  EC0C  F00E         	call	_printf	;wreg free
 15518                           
 15519                           ;Test.c: 458: lcdInst(0b11000000);;
 15520  002BCA  0EC0               	movlw	192
 15521  002BCC  ECB1  F02E         	call	_lcdInst
 15522                           
 15523                           ;Test.c: 459: printf("5:H|6:L|IR:%d   ", res);
 15524  002BD0  0EFD               	movlw	low STR_115
 15525  002BD2  0100               	movlb	0	; () banked
 15526  002BD4  6F8E               	movwf	printf@f& (0+255),b
 15527  002BD6  0EFB               	movlw	high STR_115
 15528  002BD8  0100               	movlb	0	; () banked
 15529  002BDA  6F8F               	movwf	(printf@f+1)& (0+255),b
 15530  002BDC  C0AD  F090         	movff	PlatformTest@res,?_printf+2
 15531  002BE0  C0AE  F091         	movff	PlatformTest@res+1,?_printf+3
 15532  002BE4  EC0C  F00E         	call	_printf	;wreg free
 15533                           
 15534                           ;Test.c: 460: _delay((unsigned long)((100)*(32000000/4000.0)));
 15535  002BE8  0E05               	movlw	5
 15536  002BEA  0100               	movlb	0	; () banked
 15537  002BEC  6FAC               	movwf	(??_PlatformTest+1)& (0+255),b
 15538  002BEE  0E0F               	movlw	15
 15539  002BF0  0100               	movlb	0	; () banked
 15540  002BF2  6FAB               	movwf	??_PlatformTest& (0+255),b
 15541  002BF4  0EF1               	movlw	241
 15542  002BF6                     u11437:
 15543  002BF6  2EE8               	decfsz	wreg,f,c
 15544  002BF8  D7FE               	bra	u11437
 15545  002BFA  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15546  002BFC  D7FC               	bra	u11437
 15547  002BFE  2FAC               	decfsz	(??_PlatformTest+1)& (0+255),f,b
 15548  002C00  D7FA               	bra	u11437
 15549  002C02                     l8980:
 15550  002C02  B281               	btfsc	3969,1,c	;volatile
 15551  002C04  D059               	goto	l9000
 15552  002C06  D7A5               	goto	l8962
 15553  002C08                     l8982:
 15554                           
 15555                           ;Test.c: 465: readADC(0);
 15556  002C08  0E00               	movlw	0
 15557  002C0A  EC9C  F02D         	call	_readADC
 15558                           
 15559                           ;Test.c: 466: int res = ADRESH<<8 | ADRESL;
 15560  002C0E  50C3               	movf	4035,w,c	;volatile
 15561  002C10  CFC4 F0AB          	movff	4036,??_PlatformTest	;volatile
 15562  002C14  0100               	movlb	0	; () banked
 15563  002C16  6BAC               	clrf	(??_PlatformTest+1)& (0+255),b
 15564  002C18  C0AB  F0AC         	movff	??_PlatformTest,??_PlatformTest+1
 15565  002C1C  0100               	movlb	0	; () banked
 15566  002C1E  6BAB               	clrf	??_PlatformTest& (0+255),b
 15567  002C20  0100               	movlb	0	; () banked
 15568  002C22  11AB               	iorwf	??_PlatformTest& (0+255),w,b
 15569  002C24  0100               	movlb	0	; () banked
 15570  002C26  6FAF               	movwf	PlatformTest@res_1793& (0+255),b
 15571  002C28  0100               	movlb	0	; () banked
 15572  002C2A  51AC               	movf	(??_PlatformTest+1)& (0+255),w,b
 15573  002C2C  0100               	movlb	0	; () banked
 15574  002C2E  6FB0               	movwf	(PlatformTest@res_1793+1)& (0+255),b
 15575                           
 15576                           ; BSR set to: 0
 15577                           ;Test.c: 467: IR_signal = (res > 800) ? 1 : 0;
 15578  002C30  0100               	movlb	0	; () banked
 15579  002C32  BFB0               	btfsc	(PlatformTest@res_1793+1)& (0+255),7,b
 15580  002C34  D00A               	goto	u8300
 15581  002C36  0E21               	movlw	33
 15582  002C38  0100               	movlb	0	; () banked
 15583  002C3A  5DAF               	subwf	PlatformTest@res_1793& (0+255),w,b
 15584  002C3C  0E03               	movlw	3
 15585  002C3E  0100               	movlb	0	; () banked
 15586  002C40  59B0               	subwfb	(PlatformTest@res_1793+1)& (0+255),w,b
 15587  002C42  A0D8               	btfss	status,0,c
 15588  002C44  D002               	goto	u8300
 15589  002C46  0E01               	movlw	1
 15590  002C48  D001               	goto	u8310
 15591  002C4A                     u8300:
 15592  002C4A  0E00               	movlw	0
 15593  002C4C                     u8310:
 15594  002C4C  0100               	movlb	0	; () banked
 15595  002C4E  6FE0               	movwf	_IR_signal& (0+255),b
 15596  002C50  6BE1               	clrf	(_IR_signal+1)& (0+255),b
 15597                           
 15598                           ;Test.c: 469: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15599  002C52  0E01               	movlw	1
 15600  002C54  ECB1  F02E         	call	_lcdInst
 15601  002C58  0E68               	movlw	104
 15602  002C5A  0100               	movlb	0	; () banked
 15603  002C5C  6FAB               	movwf	??_PlatformTest& (0+255),b
 15604  002C5E  0EE4               	movlw	228
 15605  002C60                     u11447:
 15606  002C60  2EE8               	decfsz	wreg,f,c
 15607  002C62  D7FE               	bra	u11447
 15608  002C64  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15609  002C66  D7FC               	bra	u11447
 15610  002C68  F000               	nop	
 15611  002C6A  0E80               	movlw	128
 15612  002C6C  ECB1  F02E         	call	_lcdInst
 15613                           
 15614                           ;Test.c: 470: printf("1: DC | A: ARM  ");
 15615  002C70  0E0E               	movlw	low STR_113
 15616  002C72  0100               	movlb	0	; () banked
 15617  002C74  6F8E               	movwf	printf@f& (0+255),b
 15618  002C76  0EFC               	movlw	high STR_113
 15619  002C78  0100               	movlb	0	; () banked
 15620  002C7A  6F8F               	movwf	(printf@f+1)& (0+255),b
 15621  002C7C  EC0C  F00E         	call	_printf	;wreg free
 15622                           
 15623                           ;Test.c: 471: lcdInst(0b11000000);;
 15624  002C80  0EC0               	movlw	192
 15625  002C82  ECB1  F02E         	call	_lcdInst
 15626                           
 15627                           ;Test.c: 472: printf("5:H|6:L|IR:%d   ", res);
 15628  002C86  0EFD               	movlw	low STR_115
 15629  002C88  0100               	movlb	0	; () banked
 15630  002C8A  6F8E               	movwf	printf@f& (0+255),b
 15631  002C8C  0EFB               	movlw	high STR_115
 15632  002C8E  0100               	movlb	0	; () banked
 15633  002C90  6F8F               	movwf	(printf@f+1)& (0+255),b
 15634  002C92  C0AF  F090         	movff	PlatformTest@res_1793,?_printf+2
 15635  002C96  C0B0  F091         	movff	PlatformTest@res_1793+1,?_printf+3
 15636  002C9A  EC0C  F00E         	call	_printf	;wreg free
 15637                           
 15638                           ;Test.c: 473: _delay((unsigned long)((100)*(32000000/4000.0)));
 15639  002C9E  0E05               	movlw	5
 15640  002CA0  0100               	movlb	0	; () banked
 15641  002CA2  6FAC               	movwf	(??_PlatformTest+1)& (0+255),b
 15642  002CA4  0E0F               	movlw	15
 15643  002CA6  0100               	movlb	0	; () banked
 15644  002CA8  6FAB               	movwf	??_PlatformTest& (0+255),b
 15645  002CAA  0EF1               	movlw	241
 15646  002CAC                     u11457:
 15647  002CAC  2EE8               	decfsz	wreg,f,c
 15648  002CAE  D7FE               	bra	u11457
 15649  002CB0  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15650  002CB2  D7FC               	bra	u11457
 15651  002CB4  2FAC               	decfsz	(??_PlatformTest+1)& (0+255),f,b
 15652  002CB6  D7FA               	bra	u11457
 15653  002CB8                     l9000:
 15654  002CB8  A281               	btfss	3969,1,c	;volatile
 15655  002CBA  D7A6               	goto	l8982
 15656                           
 15657                           ;Test.c: 474: }
 15658                           ;Test.c: 475: if(PORTB >> 4 == 0b1111){
 15659  002CBC  3881               	swapf	3969,w,c	;volatile
 15660  002CBE  0B0F               	andlw	15
 15661  002CC0  0A0F               	xorlw	15
 15662  002CC2  B4D8               	btfsc	status,2,c
 15663  002CC4  D09A               	goto	l1404
 15664                           
 15665                           ;Test.c: 478: else if(PORTB >> 4 == 0b0000){
 15666                           
 15667                           ;Test.c: 477: }
 15668                           
 15669                           ;Test.c: 476: break;
 15670  002CC6  CF81 F0AB          	movff	3969,??_PlatformTest	;volatile
 15671  002CCA  0100               	movlb	0	; () banked
 15672  002CCC  3BAB               	swapf	??_PlatformTest& (0+255),f,b
 15673  002CCE  0E0F               	movlw	15
 15674  002CD0  17AB               	andwf	??_PlatformTest& (0+255),f,b
 15675  002CD2  A4D8               	btfss	status,2,c
 15676  002CD4  D012               	goto	l9012
 15677                           
 15678                           ; BSR set to: 0
 15679                           ;Test.c: 479: LATBbits.LATB2 = !LATBbits.LATB2;
 15680  002CD6  B48A               	btfsc	3978,2,c	;volatile
 15681  002CD8  D004               	goto	u8350
 15682  002CDA  0100               	movlb	0	; () banked
 15683  002CDC  6BAB               	clrf	??_PlatformTest& (0+255),b
 15684  002CDE  2BAB               	incf	??_PlatformTest& (0+255),f,b
 15685  002CE0  D002               	goto	u8368
 15686  002CE2                     u8350:
 15687  002CE2  0100               	movlb	0	; () banked
 15688  002CE4  6BAB               	clrf	??_PlatformTest& (0+255),b
 15689  002CE6                     u8368:
 15690  002CE6  0100               	movlb	0	; () banked
 15691  002CE8  47AB               	rlncf	??_PlatformTest& (0+255),f,b
 15692  002CEA  47AB               	rlncf	??_PlatformTest& (0+255),f,b
 15693  002CEC  508A               	movf	3978,w,c	;volatile
 15694  002CEE  0100               	movlb	0	; () banked
 15695  002CF0  19AB               	xorwf	??_PlatformTest& (0+255),w,b
 15696  002CF2  0BFB               	andlw	-5
 15697  002CF4  19AB               	xorwf	??_PlatformTest& (0+255),w,b
 15698  002CF6  6E8A               	movwf	3978,c	;volatile
 15699                           
 15700                           ;Test.c: 480: }
 15701  002CF8  D07D               	goto	l1419
 15702  002CFA                     l9012:
 15703                           
 15704                           ; BSR set to: 0
 15705                           ;Test.c: 481: else if(PORTB >> 4 == 0b0011){
 15706  002CFA  3881               	swapf	3969,w,c	;volatile
 15707  002CFC  0B0F               	andlw	15
 15708  002CFE  0A03               	xorlw	3
 15709  002D00  A4D8               	btfss	status,2,c
 15710  002D02  D020               	goto	l9024
 15711                           
 15712                           ; BSR set to: 0
 15713                           ;Test.c: 482: if(on){
 15714  002D04  0100               	movlb	0	; () banked
 15715  002D06  51B5               	movf	PlatformTest@on& (0+255),w,b
 15716  002D08  0100               	movlb	0	; () banked
 15717  002D0A  11B6               	iorwf	(PlatformTest@on+1)& (0+255),w,b
 15718  002D0C  B4D8               	btfsc	status,2,c
 15719  002D0E  D010               	goto	l9020
 15720                           
 15721                           ; BSR set to: 0
 15722                           ;Test.c: 483: f_arm_position = 1;
 15723  002D10  0E00               	movlw	0
 15724  002D12  0100               	movlb	0	; () banked
 15725  002D14  6FE9               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 15726  002D16  0E01               	movlw	1
 15727  002D18  D00F               	goto	L14
 15728  002D1A                     l9018:
 15729                           
 15730                           ; BSR set to: 0
 15731                           ;Test.c: 484: on = !on;
 15732  002D1A  0100               	movlb	0	; () banked
 15733  002D1C  51B5               	movf	PlatformTest@on& (0+255),w,b
 15734  002D1E  0100               	movlb	0	; () banked
 15735  002D20  11B6               	iorwf	(PlatformTest@on+1)& (0+255),w,b
 15736  002D22  A4D8               	btfss	status,2,c
 15737  002D24  D00D               	goto	u8410
 15738  002D26  D00A               	goto	u8411
 15739  002D28                     u8400:
 15740  002D28  0100               	movlb	0	; () banked
 15741  002D2A  6FB5               	movwf	PlatformTest@on& (0+255),b
 15742  002D2C  6BB6               	clrf	(PlatformTest@on+1)& (0+255),b
 15743                           
 15744                           ;Test.c: 485: }
 15745  002D2E  D062               	goto	l1419
 15746  002D30                     l9020:
 15747                           
 15748                           ; BSR set to: 0
 15749                           ;Test.c: 486: else{
 15750                           ;Test.c: 487: f_arm_position = 0;
 15751  002D30  0E00               	movlw	0
 15752  002D32  0100               	movlb	0	; () banked
 15753  002D34  6FE9               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 15754  002D36  0E00               	movlw	0
 15755  002D38                     L14:
 15756  002D38  6FE8               	movwf	_f_arm_position& (0+255),b	;volatile
 15757  002D3A  D7EF               	goto	l9018
 15758  002D3C                     u8411:
 15759  002D3C  0E01               	movlw	1
 15760  002D3E  D7F4               	goto	u8400
 15761  002D40                     u8410:
 15762  002D40  0E00               	movlw	0
 15763  002D42  D7F2               	goto	u8400
 15764  002D44                     l9024:
 15765                           
 15766                           ; BSR set to: 0
 15767                           ;Test.c: 491: else if(PORTB >> 4 == 0b0101){
 15768  002D44  3881               	swapf	3969,w,c	;volatile
 15769  002D46  0B0F               	andlw	15
 15770  002D48  0A05               	xorlw	5
 15771  002D4A  A4D8               	btfss	status,2,c
 15772  002D4C  D027               	goto	l9038
 15773                           
 15774                           ; BSR set to: 0
 15775                           ;Test.c: 493: for(int i = 0; i<30; i++){
 15776  002D4E  0E00               	movlw	0
 15777  002D50  0100               	movlb	0	; () banked
 15778  002D52  6FB2               	movwf	(PlatformTest@i+1)& (0+255),b
 15779  002D54  0E00               	movlw	0
 15780  002D56  6FB1               	movwf	PlatformTest@i& (0+255),b
 15781  002D58                     l9028:
 15782                           
 15783                           ; BSR set to: 0
 15784  002D58  0100               	movlb	0	; () banked
 15785  002D5A  BFB2               	btfsc	(PlatformTest@i+1)& (0+255),7,b
 15786  002D5C  D008               	goto	l1413
 15787  002D5E  0100               	movlb	0	; () banked
 15788  002D60  51B2               	movf	(PlatformTest@i+1)& (0+255),w,b
 15789  002D62  E148               	bnz	l1419
 15790  002D64  0E1E               	movlw	30
 15791  002D66  0100               	movlb	0	; () banked
 15792  002D68  5DB1               	subwf	PlatformTest@i& (0+255),w,b
 15793  002D6A  B0D8               	btfsc	status,0,c
 15794  002D6C  D043               	goto	l1419
 15795  002D6E                     l1413:
 15796                           
 15797                           ; BSR set to: 0
 15798                           ;Test.c: 494: LATAbits.LATA4 = 1;
 15799  002D6E  8889               	bsf	3977,4,c	;volatile
 15800                           
 15801                           ; BSR set to: 0
 15802                           ;Test.c: 495: _delay((unsigned long)((7500)*(32000000/4000000.0)));
 15803  002D70  0E4E               	movlw	78
 15804  002D72  0100               	movlb	0	; () banked
 15805  002D74  6FAB               	movwf	??_PlatformTest& (0+255),b
 15806  002D76  0EEB               	movlw	235
 15807  002D78                     u11467:
 15808  002D78  2EE8               	decfsz	wreg,f,c
 15809  002D7A  D7FE               	bra	u11467
 15810  002D7C  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15811  002D7E  D7FC               	bra	u11467
 15812                           
 15813                           ;Test.c: 496: LATAbits.LATA4 = 0;
 15814  002D80  9889               	bcf	3977,4,c	;volatile
 15815                           
 15816                           ;Test.c: 497: _delay((unsigned long)((2500)*(32000000/4000000.0)));
 15817  002D82  0E1A               	movlw	26
 15818  002D84  0100               	movlb	0	; () banked
 15819  002D86  6FAB               	movwf	??_PlatformTest& (0+255),b
 15820  002D88  0EF8               	movlw	248
 15821  002D8A                     u11477:
 15822  002D8A  2EE8               	decfsz	wreg,f,c
 15823  002D8C  D7FE               	bra	u11477
 15824  002D8E  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15825  002D90  D7FC               	bra	u11477
 15826  002D92  F000               	nop	
 15827  002D94  0100               	movlb	0	; () banked
 15828  002D96  4BB1               	infsnz	PlatformTest@i& (0+255),f,b
 15829  002D98  2BB2               	incf	(PlatformTest@i+1)& (0+255),f,b
 15830  002D9A  D7DE               	goto	l9028
 15831  002D9C                     l9038:
 15832                           
 15833                           ; BSR set to: 0
 15834                           ;Test.c: 500: else if (PORTB >> 4 == 0b0110){
 15835  002D9C  3881               	swapf	3969,w,c	;volatile
 15836  002D9E  0B0F               	andlw	15
 15837  002DA0  0A06               	xorlw	6
 15838  002DA2  A4D8               	btfss	status,2,c
 15839  002DA4  D027               	goto	l1419
 15840                           
 15841                           ; BSR set to: 0
 15842                           ;Test.c: 502: for(int i = 0; i<30; i++){
 15843  002DA6  0E00               	movlw	0
 15844  002DA8  0100               	movlb	0	; () banked
 15845  002DAA  6FB4               	movwf	(PlatformTest@i_1797+1)& (0+255),b
 15846  002DAC  0E00               	movlw	0
 15847  002DAE  6FB3               	movwf	PlatformTest@i_1797& (0+255),b
 15848  002DB0                     l9042:
 15849                           
 15850                           ; BSR set to: 0
 15851  002DB0  0100               	movlb	0	; () banked
 15852  002DB2  BFB4               	btfsc	(PlatformTest@i_1797+1)& (0+255),7,b
 15853  002DB4  D008               	goto	l1417
 15854  002DB6  0100               	movlb	0	; () banked
 15855  002DB8  51B4               	movf	(PlatformTest@i_1797+1)& (0+255),w,b
 15856  002DBA  E11C               	bnz	l1419
 15857  002DBC  0E1E               	movlw	30
 15858  002DBE  0100               	movlb	0	; () banked
 15859  002DC0  5DB3               	subwf	PlatformTest@i_1797& (0+255),w,b
 15860  002DC2  B0D8               	btfsc	status,0,c
 15861  002DC4  D017               	goto	l1419
 15862  002DC6                     l1417:
 15863                           
 15864                           ; BSR set to: 0
 15865                           ;Test.c: 503: LATAbits.LATA4 = 1;
 15866  002DC6  8889               	bsf	3977,4,c	;volatile
 15867                           
 15868                           ; BSR set to: 0
 15869                           ;Test.c: 504: _delay((unsigned long)((5800)*(32000000/4000000.0)));
 15870  002DC8  0E3D               	movlw	61
 15871  002DCA  0100               	movlb	0	; () banked
 15872  002DCC  6FAB               	movwf	??_PlatformTest& (0+255),b
 15873  002DCE  0E41               	movlw	65
 15874  002DD0                     u11487:
 15875  002DD0  2EE8               	decfsz	wreg,f,c
 15876  002DD2  D7FE               	bra	u11487
 15877  002DD4  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15878  002DD6  D7FC               	bra	u11487
 15879                           
 15880                           ;Test.c: 505: LATAbits.LATA4 = 0;
 15881  002DD8  9889               	bcf	3977,4,c	;volatile
 15882                           
 15883                           ;Test.c: 506: _delay((unsigned long)((4200)*(32000000/4000000.0)));
 15884  002DDA  0E2C               	movlw	44
 15885  002DDC  0100               	movlb	0	; () banked
 15886  002DDE  6FAB               	movwf	??_PlatformTest& (0+255),b
 15887  002DE0  0EA1               	movlw	161
 15888  002DE2                     u11497:
 15889  002DE2  2EE8               	decfsz	wreg,f,c
 15890  002DE4  D7FE               	bra	u11497
 15891  002DE6  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15892  002DE8  D7FC               	bra	u11497
 15893  002DEA  D000               	nop2	
 15894  002DEC  0100               	movlb	0	; () banked
 15895  002DEE  4BB3               	infsnz	PlatformTest@i_1797& (0+255),f,b
 15896  002DF0  2BB4               	incf	(PlatformTest@i_1797+1)& (0+255),f,b
 15897  002DF2  D7DE               	goto	l9042
 15898  002DF4                     l1419:
 15899  002DF4  A281               	btfss	3969,1,c	;volatile
 15900  002DF6  D760               	goto	l9000
 15901  002DF8  D7FD               	goto	l1419
 15902  002DFA                     l1404:
 15903                           
 15904                           ;Test.c: 511: }
 15905                           ;Test.c: 513: LATCbits.LATC5 = 0;
 15906  002DFA  9A8B               	bcf	3979,5,c	;volatile
 15907                           
 15908                           ;Test.c: 514: stopSignals();
 15909  002DFC  EC58  F02E         	call	_stopSignals	;wreg free
 15910                           
 15911                           ;Test.c: 515: machine_state = Testing_state;
 15912  002E00  0E03               	movlw	3
 15913  002E02  0100               	movlb	0	; () banked
 15914  002E04  6FFC               	movwf	_machine_state& (0+255),b
 15915                           
 15916                           ; BSR set to: 0
 15917  002E06  0012               	return		;funcret
 15918  002E08                     __end_of_PlatformTest:
 15919                           	opt stack 0
 15920                           tblptru	equ	0xFF8
 15921                           tblptrh	equ	0xFF7
 15922                           tblptrl	equ	0xFF6
 15923                           tablat	equ	0xFF5
 15924                           prodh	equ	0xFF4
 15925                           prodl	equ	0xFF3
 15926                           intcon	equ	0xFF2
 15927                           intcon2	equ	0xFF1
 15928                           intcon3	equ	0xFF0
 15929                           postinc0	equ	0xFEE
 15930                           wreg	equ	0xFE8
 15931                           postdec1	equ	0xFE5
 15932                           fsr1l	equ	0xFE1
 15933                           indf2	equ	0xFDF
 15934                           postinc2	equ	0xFDE
 15935                           postdec2	equ	0xFDD
 15936                           fsr2h	equ	0xFDA
 15937                           fsr2l	equ	0xFD9
 15938                           status	equ	0xFD8
 15939                           
 15940 ;; *************** function _BothServos *****************
 15941 ;; Defined at:
 15942 ;;		line 350 in file "Test.c"
 15943 ;; Parameters:    Size  Location     Type
 15944 ;;		None
 15945 ;; Auto vars:     Size  Location     Type
 15946 ;;		None
 15947 ;; Return value:  Size  Location     Type
 15948 ;;                  1    wreg      void 
 15949 ;; Registers used:
 15950 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15951 ;; Tracked objects:
 15952 ;;		On entry : 0/0
 15953 ;;		On exit  : 0/0
 15954 ;;		Unchanged: 0/0
 15955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15956 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15957 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15958 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15959 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15960 ;;Total ram usage:        2 bytes
 15961 ;; Hardware stack levels used:    1
 15962 ;; Hardware stack levels required when called:   10
 15963 ;; This function calls:
 15964 ;;		_initServos
 15965 ;;		_lcdInst
 15966 ;;		_printf
 15967 ;;		_stopSignals
 15968 ;;		_updateServoPosition
 15969 ;; This function is called by:
 15970 ;;		_Test
 15971 ;; This function uses a non-reentrant model
 15972 ;;
 15973                           
 15974                           	psect	text50
 15975  002050                     __ptext50:
 15976                           	opt stack 0
 15977  002050                     _BothServos:
 15978                           	opt stack 19
 15979                           
 15980                           ;Test.c: 351: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15981                           
 15982                           ; BSR set to: 0
 15983                           ;incstack = 0
 15984  002050  0E01               	movlw	1
 15985  002052  ECB1  F02E         	call	_lcdInst
 15986  002056  0E68               	movlw	104
 15987  002058  0100               	movlb	0	; () banked
 15988  00205A  6FAB               	movwf	??_BothServos& (0+255),b
 15989  00205C  0EE4               	movlw	228
 15990  00205E                     u11507:
 15991  00205E  2EE8               	decfsz	wreg,f,c
 15992  002060  D7FE               	bra	u11507
 15993  002062  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15994  002064  D7FC               	bra	u11507
 15995  002066  F000               	nop	
 15996  002068  0E80               	movlw	128
 15997  00206A  ECB1  F02E         	call	_lcdInst
 15998                           
 15999                           ;Test.c: 352: printf("TST: BOTH SERVOS");
 16000  00206E  0EA7               	movlw	low STR_110
 16001  002070  0100               	movlb	0	; () banked
 16002  002072  6F8E               	movwf	printf@f& (0+255),b
 16003  002074  0EFC               	movlw	high STR_110
 16004  002076  0100               	movlb	0	; () banked
 16005  002078  6F8F               	movwf	(printf@f+1)& (0+255),b
 16006  00207A  EC0C  F00E         	call	_printf	;wreg free
 16007                           
 16008                           ;Test.c: 353: TMR1ON = 1;
 16009  00207E  80CD               	bsf	4045,0,c	;volatile
 16010                           
 16011                           ;Test.c: 354: TMR3ON = 1;
 16012  002080  80B1               	bsf	4017,0,c	;volatile
 16013                           
 16014                           ;Test.c: 355: machine_state = Sorting_state;
 16015  002082  0E01               	movlw	1
 16016  002084  0100               	movlb	0	; () banked
 16017  002086  6FFC               	movwf	_machine_state& (0+255),b
 16018                           
 16019                           ; BSR set to: 0
 16020                           ;Test.c: 356: was_low_1 = 0;
 16021  002088  0E00               	movlw	0
 16022  00208A  6E78               	movwf	_was_low_1+1,c	;volatile
 16023  00208C  0E00               	movlw	0
 16024  00208E  6E77               	movwf	_was_low_1,c	;volatile
 16025                           
 16026                           ; BSR set to: 0
 16027                           ;Test.c: 357: was_low_3 = 0;
 16028  002090  0E00               	movlw	0
 16029  002092  6E7C               	movwf	_was_low_3+1,c	;volatile
 16030  002094  0E00               	movlw	0
 16031  002096  6E7B               	movwf	_was_low_3,c	;volatile
 16032                           
 16033                           ; BSR set to: 0
 16034                           ;Test.c: 363: initServos();
 16035  002098  EC09  F028         	call	_initServos	;wreg free
 16036                           
 16037                           ;Test.c: 364: _delay((unsigned long)((1500)*(32000000/4000.0)));
 16038  00209C  0E3D               	movlw	61
 16039  00209E  0100               	movlb	0	; () banked
 16040  0020A0  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16041  0020A2  0EE1               	movlw	225
 16042  0020A4  0100               	movlb	0	; () banked
 16043  0020A6  6FAB               	movwf	??_BothServos& (0+255),b
 16044  0020A8  0E3F               	movlw	63
 16045  0020AA                     u11517:
 16046  0020AA  2EE8               	decfsz	wreg,f,c
 16047  0020AC  D7FE               	bra	u11517
 16048  0020AE  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16049  0020B0  D7FC               	bra	u11517
 16050  0020B2  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16051  0020B4  D7FA               	bra	u11517
 16052  0020B6  D000               	nop2	
 16053                           
 16054                           ;Test.c: 366: updateServoPosition(500, 1);
 16055  0020B8  0E01               	movlw	1
 16056  0020BA  0100               	movlb	0	; () banked
 16057  0020BC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16058  0020BE  0EF4               	movlw	244
 16059  0020C0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16060  0020C2  0E00               	movlw	0
 16061  0020C4  0100               	movlb	0	; () banked
 16062  0020C6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16063  0020C8  0E01               	movlw	1
 16064  0020CA  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16065  0020CC  ECCA  F027         	call	_updateServoPosition	;wreg free
 16066                           
 16067                           ;Test.c: 367: updateServoPosition(1050, 3);
 16068  0020D0  0E04               	movlw	4
 16069  0020D2  0100               	movlb	0	; () banked
 16070  0020D4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16071  0020D6  0E1A               	movlw	26
 16072  0020D8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16073  0020DA  0E00               	movlw	0
 16074  0020DC  0100               	movlb	0	; () banked
 16075  0020DE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16076  0020E0  0E03               	movlw	3
 16077  0020E2  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16078  0020E4  ECCA  F027         	call	_updateServoPosition	;wreg free
 16079                           
 16080                           ;Test.c: 368: _delay((unsigned long)((750)*(32000000/4000.0)));
 16081  0020E8  0E1F               	movlw	31
 16082  0020EA  0100               	movlb	0	; () banked
 16083  0020EC  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16084  0020EE  0E71               	movlw	113
 16085  0020F0  0100               	movlb	0	; () banked
 16086  0020F2  6FAB               	movwf	??_BothServos& (0+255),b
 16087  0020F4  0E1E               	movlw	30
 16088  0020F6                     u11527:
 16089  0020F6  2EE8               	decfsz	wreg,f,c
 16090  0020F8  D7FE               	bra	u11527
 16091  0020FA  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16092  0020FC  D7FC               	bra	u11527
 16093  0020FE  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16094  002100  D7FA               	bra	u11527
 16095  002102  F000               	nop	
 16096                           
 16097                           ;Test.c: 369: updateServoPosition(1260, 3);
 16098  002104  0E04               	movlw	4
 16099  002106  0100               	movlb	0	; () banked
 16100  002108  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16101  00210A  0EEC               	movlw	236
 16102  00210C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16103  00210E  0E00               	movlw	0
 16104  002110  0100               	movlb	0	; () banked
 16105  002112  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16106  002114  0E03               	movlw	3
 16107  002116  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16108  002118  ECCA  F027         	call	_updateServoPosition	;wreg free
 16109                           
 16110                           ;Test.c: 370: _delay((unsigned long)((700)*(32000000/4000.0)));
 16111  00211C  0E1D               	movlw	29
 16112  00211E  0100               	movlb	0	; () banked
 16113  002120  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16114  002122  0E69               	movlw	105
 16115  002124  0100               	movlb	0	; () banked
 16116  002126  6FAB               	movwf	??_BothServos& (0+255),b
 16117  002128  0EA5               	movlw	165
 16118  00212A                     u11537:
 16119  00212A  2EE8               	decfsz	wreg,f,c
 16120  00212C  D7FE               	bra	u11537
 16121  00212E  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16122  002130  D7FC               	bra	u11537
 16123  002132  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16124  002134  D7FA               	bra	u11537
 16125                           
 16126                           ;Test.c: 371: updateServoPosition(1050, 3);
 16127  002136  0E04               	movlw	4
 16128  002138  0100               	movlb	0	; () banked
 16129  00213A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16130  00213C  0E1A               	movlw	26
 16131  00213E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16132  002140  0E00               	movlw	0
 16133  002142  0100               	movlb	0	; () banked
 16134  002144  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16135  002146  0E03               	movlw	3
 16136  002148  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16137  00214A  ECCA  F027         	call	_updateServoPosition	;wreg free
 16138                           
 16139                           ;Test.c: 372: _delay((unsigned long)((750)*(32000000/4000.0)));
 16140  00214E  0E1F               	movlw	31
 16141  002150  0100               	movlb	0	; () banked
 16142  002152  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16143  002154  0E71               	movlw	113
 16144  002156  0100               	movlb	0	; () banked
 16145  002158  6FAB               	movwf	??_BothServos& (0+255),b
 16146  00215A  0E1E               	movlw	30
 16147  00215C                     u11547:
 16148  00215C  2EE8               	decfsz	wreg,f,c
 16149  00215E  D7FE               	bra	u11547
 16150  002160  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16151  002162  D7FC               	bra	u11547
 16152  002164  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16153  002166  D7FA               	bra	u11547
 16154  002168  F000               	nop	
 16155                           
 16156                           ;Test.c: 374: updateServoPosition(850, 1);
 16157  00216A  0E03               	movlw	3
 16158  00216C  0100               	movlb	0	; () banked
 16159  00216E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16160  002170  0E52               	movlw	82
 16161  002172  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16162  002174  0E00               	movlw	0
 16163  002176  0100               	movlb	0	; () banked
 16164  002178  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16165  00217A  0E01               	movlw	1
 16166  00217C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16167  00217E  ECCA  F027         	call	_updateServoPosition	;wreg free
 16168                           
 16169                           ;Test.c: 375: updateServoPosition(1050, 3);
 16170  002182  0E04               	movlw	4
 16171  002184  0100               	movlb	0	; () banked
 16172  002186  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16173  002188  0E1A               	movlw	26
 16174  00218A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16175  00218C  0E00               	movlw	0
 16176  00218E  0100               	movlb	0	; () banked
 16177  002190  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16178  002192  0E03               	movlw	3
 16179  002194  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16180  002196  ECCA  F027         	call	_updateServoPosition	;wreg free
 16181                           
 16182                           ;Test.c: 376: _delay((unsigned long)((750)*(32000000/4000.0)));
 16183  00219A  0E1F               	movlw	31
 16184  00219C  0100               	movlb	0	; () banked
 16185  00219E  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16186  0021A0  0E71               	movlw	113
 16187  0021A2  0100               	movlb	0	; () banked
 16188  0021A4  6FAB               	movwf	??_BothServos& (0+255),b
 16189  0021A6  0E1E               	movlw	30
 16190  0021A8                     u11557:
 16191  0021A8  2EE8               	decfsz	wreg,f,c
 16192  0021AA  D7FE               	bra	u11557
 16193  0021AC  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16194  0021AE  D7FC               	bra	u11557
 16195  0021B0  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16196  0021B2  D7FA               	bra	u11557
 16197  0021B4  F000               	nop	
 16198                           
 16199                           ;Test.c: 377: updateServoPosition(1260, 3);
 16200  0021B6  0E04               	movlw	4
 16201  0021B8  0100               	movlb	0	; () banked
 16202  0021BA  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16203  0021BC  0EEC               	movlw	236
 16204  0021BE  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16205  0021C0  0E00               	movlw	0
 16206  0021C2  0100               	movlb	0	; () banked
 16207  0021C4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16208  0021C6  0E03               	movlw	3
 16209  0021C8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16210  0021CA  ECCA  F027         	call	_updateServoPosition	;wreg free
 16211                           
 16212                           ;Test.c: 378: _delay((unsigned long)((700)*(32000000/4000.0)));
 16213  0021CE  0E1D               	movlw	29
 16214  0021D0  0100               	movlb	0	; () banked
 16215  0021D2  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16216  0021D4  0E69               	movlw	105
 16217  0021D6  0100               	movlb	0	; () banked
 16218  0021D8  6FAB               	movwf	??_BothServos& (0+255),b
 16219  0021DA  0EA5               	movlw	165
 16220  0021DC                     u11567:
 16221  0021DC  2EE8               	decfsz	wreg,f,c
 16222  0021DE  D7FE               	bra	u11567
 16223  0021E0  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16224  0021E2  D7FC               	bra	u11567
 16225  0021E4  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16226  0021E6  D7FA               	bra	u11567
 16227                           
 16228                           ;Test.c: 379: updateServoPosition(1050, 3);
 16229  0021E8  0E04               	movlw	4
 16230  0021EA  0100               	movlb	0	; () banked
 16231  0021EC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16232  0021EE  0E1A               	movlw	26
 16233  0021F0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16234  0021F2  0E00               	movlw	0
 16235  0021F4  0100               	movlb	0	; () banked
 16236  0021F6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16237  0021F8  0E03               	movlw	3
 16238  0021FA  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16239  0021FC  ECCA  F027         	call	_updateServoPosition	;wreg free
 16240                           
 16241                           ;Test.c: 380: _delay((unsigned long)((750)*(32000000/4000.0)));
 16242  002200  0E1F               	movlw	31
 16243  002202  0100               	movlb	0	; () banked
 16244  002204  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16245  002206  0E71               	movlw	113
 16246  002208  0100               	movlb	0	; () banked
 16247  00220A  6FAB               	movwf	??_BothServos& (0+255),b
 16248  00220C  0E1E               	movlw	30
 16249  00220E                     u11577:
 16250  00220E  2EE8               	decfsz	wreg,f,c
 16251  002210  D7FE               	bra	u11577
 16252  002212  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16253  002214  D7FC               	bra	u11577
 16254  002216  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16255  002218  D7FA               	bra	u11577
 16256  00221A  F000               	nop	
 16257                           
 16258                           ;Test.c: 382: updateServoPosition(500, 1);
 16259  00221C  0E01               	movlw	1
 16260  00221E  0100               	movlb	0	; () banked
 16261  002220  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16262  002222  0EF4               	movlw	244
 16263  002224  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16264  002226  0E00               	movlw	0
 16265  002228  0100               	movlb	0	; () banked
 16266  00222A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16267  00222C  0E01               	movlw	1
 16268  00222E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16269  002230  ECCA  F027         	call	_updateServoPosition	;wreg free
 16270                           
 16271                           ;Test.c: 383: updateServoPosition(1050, 3);
 16272  002234  0E04               	movlw	4
 16273  002236  0100               	movlb	0	; () banked
 16274  002238  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16275  00223A  0E1A               	movlw	26
 16276  00223C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16277  00223E  0E00               	movlw	0
 16278  002240  0100               	movlb	0	; () banked
 16279  002242  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16280  002244  0E03               	movlw	3
 16281  002246  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16282  002248  ECCA  F027         	call	_updateServoPosition	;wreg free
 16283                           
 16284                           ;Test.c: 384: _delay((unsigned long)((750)*(32000000/4000.0)));
 16285  00224C  0E1F               	movlw	31
 16286  00224E  0100               	movlb	0	; () banked
 16287  002250  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16288  002252  0E71               	movlw	113
 16289  002254  0100               	movlb	0	; () banked
 16290  002256  6FAB               	movwf	??_BothServos& (0+255),b
 16291  002258  0E1E               	movlw	30
 16292  00225A                     u11587:
 16293  00225A  2EE8               	decfsz	wreg,f,c
 16294  00225C  D7FE               	bra	u11587
 16295  00225E  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16296  002260  D7FC               	bra	u11587
 16297  002262  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16298  002264  D7FA               	bra	u11587
 16299  002266  F000               	nop	
 16300                           
 16301                           ;Test.c: 385: updateServoPosition(1260, 3);
 16302  002268  0E04               	movlw	4
 16303  00226A  0100               	movlb	0	; () banked
 16304  00226C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16305  00226E  0EEC               	movlw	236
 16306  002270  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16307  002272  0E00               	movlw	0
 16308  002274  0100               	movlb	0	; () banked
 16309  002276  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16310  002278  0E03               	movlw	3
 16311  00227A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16312  00227C  ECCA  F027         	call	_updateServoPosition	;wreg free
 16313                           
 16314                           ;Test.c: 386: _delay((unsigned long)((700)*(32000000/4000.0)));
 16315  002280  0E1D               	movlw	29
 16316  002282  0100               	movlb	0	; () banked
 16317  002284  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16318  002286  0E69               	movlw	105
 16319  002288  0100               	movlb	0	; () banked
 16320  00228A  6FAB               	movwf	??_BothServos& (0+255),b
 16321  00228C  0EA5               	movlw	165
 16322  00228E                     u11597:
 16323  00228E  2EE8               	decfsz	wreg,f,c
 16324  002290  D7FE               	bra	u11597
 16325  002292  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16326  002294  D7FC               	bra	u11597
 16327  002296  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16328  002298  D7FA               	bra	u11597
 16329                           
 16330                           ;Test.c: 387: updateServoPosition(1050, 3);
 16331  00229A  0E04               	movlw	4
 16332  00229C  0100               	movlb	0	; () banked
 16333  00229E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16334  0022A0  0E1A               	movlw	26
 16335  0022A2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16336  0022A4  0E00               	movlw	0
 16337  0022A6  0100               	movlb	0	; () banked
 16338  0022A8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16339  0022AA  0E03               	movlw	3
 16340  0022AC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16341  0022AE  ECCA  F027         	call	_updateServoPosition	;wreg free
 16342                           
 16343                           ;Test.c: 388: _delay((unsigned long)((1500)*(32000000/4000.0)));
 16344  0022B2  0E3D               	movlw	61
 16345  0022B4  0100               	movlb	0	; () banked
 16346  0022B6  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16347  0022B8  0EE1               	movlw	225
 16348  0022BA  0100               	movlb	0	; () banked
 16349  0022BC  6FAB               	movwf	??_BothServos& (0+255),b
 16350  0022BE  0E3F               	movlw	63
 16351  0022C0                     u11607:
 16352  0022C0  2EE8               	decfsz	wreg,f,c
 16353  0022C2  D7FE               	bra	u11607
 16354  0022C4  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16355  0022C6  D7FC               	bra	u11607
 16356  0022C8  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16357  0022CA  D7FA               	bra	u11607
 16358  0022CC  D000               	nop2	
 16359                           
 16360                           ;Test.c: 390: updateServoPosition(1670, 1);
 16361  0022CE  0E06               	movlw	6
 16362  0022D0  0100               	movlb	0	; () banked
 16363  0022D2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16364  0022D4  0E86               	movlw	134
 16365  0022D6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16366  0022D8  0E00               	movlw	0
 16367  0022DA  0100               	movlb	0	; () banked
 16368  0022DC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16369  0022DE  0E01               	movlw	1
 16370  0022E0  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16371  0022E2  ECCA  F027         	call	_updateServoPosition	;wreg free
 16372                           
 16373                           ;Test.c: 391: updateServoPosition(1050, 3);
 16374  0022E6  0E04               	movlw	4
 16375  0022E8  0100               	movlb	0	; () banked
 16376  0022EA  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16377  0022EC  0E1A               	movlw	26
 16378  0022EE  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16379  0022F0  0E00               	movlw	0
 16380  0022F2  0100               	movlb	0	; () banked
 16381  0022F4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16382  0022F6  0E03               	movlw	3
 16383  0022F8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16384  0022FA  ECCA  F027         	call	_updateServoPosition	;wreg free
 16385                           
 16386                           ;Test.c: 392: _delay((unsigned long)((750)*(32000000/4000.0)));
 16387  0022FE  0E1F               	movlw	31
 16388  002300  0100               	movlb	0	; () banked
 16389  002302  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16390  002304  0E71               	movlw	113
 16391  002306  0100               	movlb	0	; () banked
 16392  002308  6FAB               	movwf	??_BothServos& (0+255),b
 16393  00230A  0E1E               	movlw	30
 16394  00230C                     u11617:
 16395  00230C  2EE8               	decfsz	wreg,f,c
 16396  00230E  D7FE               	bra	u11617
 16397  002310  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16398  002312  D7FC               	bra	u11617
 16399  002314  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16400  002316  D7FA               	bra	u11617
 16401  002318  F000               	nop	
 16402                           
 16403                           ;Test.c: 393: updateServoPosition(1390, 3);
 16404  00231A  0E05               	movlw	5
 16405  00231C  0100               	movlb	0	; () banked
 16406  00231E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16407  002320  0E6E               	movlw	110
 16408  002322  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16409  002324  0E00               	movlw	0
 16410  002326  0100               	movlb	0	; () banked
 16411  002328  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16412  00232A  0E03               	movlw	3
 16413  00232C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16414  00232E  ECCA  F027         	call	_updateServoPosition	;wreg free
 16415                           
 16416                           ;Test.c: 394: _delay((unsigned long)((700)*(32000000/4000.0)));
 16417  002332  0E1D               	movlw	29
 16418  002334  0100               	movlb	0	; () banked
 16419  002336  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16420  002338  0E69               	movlw	105
 16421  00233A  0100               	movlb	0	; () banked
 16422  00233C  6FAB               	movwf	??_BothServos& (0+255),b
 16423  00233E  0EA5               	movlw	165
 16424  002340                     u11627:
 16425  002340  2EE8               	decfsz	wreg,f,c
 16426  002342  D7FE               	bra	u11627
 16427  002344  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16428  002346  D7FC               	bra	u11627
 16429  002348  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16430  00234A  D7FA               	bra	u11627
 16431                           
 16432                           ;Test.c: 395: updateServoPosition(1050, 3);
 16433  00234C  0E04               	movlw	4
 16434  00234E  0100               	movlb	0	; () banked
 16435  002350  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16436  002352  0E1A               	movlw	26
 16437  002354  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16438  002356  0E00               	movlw	0
 16439  002358  0100               	movlb	0	; () banked
 16440  00235A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16441  00235C  0E03               	movlw	3
 16442  00235E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16443  002360  ECCA  F027         	call	_updateServoPosition	;wreg free
 16444                           
 16445                           ;Test.c: 396: _delay((unsigned long)((750)*(32000000/4000.0)));
 16446  002364  0E1F               	movlw	31
 16447  002366  0100               	movlb	0	; () banked
 16448  002368  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16449  00236A  0E71               	movlw	113
 16450  00236C  0100               	movlb	0	; () banked
 16451  00236E  6FAB               	movwf	??_BothServos& (0+255),b
 16452  002370  0E1E               	movlw	30
 16453  002372                     u11637:
 16454  002372  2EE8               	decfsz	wreg,f,c
 16455  002374  D7FE               	bra	u11637
 16456  002376  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16457  002378  D7FC               	bra	u11637
 16458  00237A  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16459  00237C  D7FA               	bra	u11637
 16460  00237E  F000               	nop	
 16461                           
 16462                           ;Test.c: 398: updateServoPosition(2400, 1);
 16463  002380  0E09               	movlw	9
 16464  002382  0100               	movlb	0	; () banked
 16465  002384  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16466  002386  0E60               	movlw	96
 16467  002388  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16468  00238A  0E00               	movlw	0
 16469  00238C  0100               	movlb	0	; () banked
 16470  00238E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16471  002390  0E01               	movlw	1
 16472  002392  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16473  002394  ECCA  F027         	call	_updateServoPosition	;wreg free
 16474                           
 16475                           ;Test.c: 399: updateServoPosition(1050, 3);
 16476  002398  0E04               	movlw	4
 16477  00239A  0100               	movlb	0	; () banked
 16478  00239C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16479  00239E  0E1A               	movlw	26
 16480  0023A0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16481  0023A2  0E00               	movlw	0
 16482  0023A4  0100               	movlb	0	; () banked
 16483  0023A6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16484  0023A8  0E03               	movlw	3
 16485  0023AA  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16486  0023AC  ECCA  F027         	call	_updateServoPosition	;wreg free
 16487                           
 16488                           ;Test.c: 400: _delay((unsigned long)((750)*(32000000/4000.0)));
 16489  0023B0  0E1F               	movlw	31
 16490  0023B2  0100               	movlb	0	; () banked
 16491  0023B4  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16492  0023B6  0E71               	movlw	113
 16493  0023B8  0100               	movlb	0	; () banked
 16494  0023BA  6FAB               	movwf	??_BothServos& (0+255),b
 16495  0023BC  0E1E               	movlw	30
 16496  0023BE                     u11647:
 16497  0023BE  2EE8               	decfsz	wreg,f,c
 16498  0023C0  D7FE               	bra	u11647
 16499  0023C2  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16500  0023C4  D7FC               	bra	u11647
 16501  0023C6  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16502  0023C8  D7FA               	bra	u11647
 16503  0023CA  F000               	nop	
 16504                           
 16505                           ;Test.c: 401: updateServoPosition(1390, 3);
 16506  0023CC  0E05               	movlw	5
 16507  0023CE  0100               	movlb	0	; () banked
 16508  0023D0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16509  0023D2  0E6E               	movlw	110
 16510  0023D4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16511  0023D6  0E00               	movlw	0
 16512  0023D8  0100               	movlb	0	; () banked
 16513  0023DA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16514  0023DC  0E03               	movlw	3
 16515  0023DE  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16516  0023E0  ECCA  F027         	call	_updateServoPosition	;wreg free
 16517                           
 16518                           ;Test.c: 402: _delay((unsigned long)((700)*(32000000/4000.0)));
 16519  0023E4  0E1D               	movlw	29
 16520  0023E6  0100               	movlb	0	; () banked
 16521  0023E8  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16522  0023EA  0E69               	movlw	105
 16523  0023EC  0100               	movlb	0	; () banked
 16524  0023EE  6FAB               	movwf	??_BothServos& (0+255),b
 16525  0023F0  0EA5               	movlw	165
 16526  0023F2                     u11657:
 16527  0023F2  2EE8               	decfsz	wreg,f,c
 16528  0023F4  D7FE               	bra	u11657
 16529  0023F6  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16530  0023F8  D7FC               	bra	u11657
 16531  0023FA  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16532  0023FC  D7FA               	bra	u11657
 16533                           
 16534                           ;Test.c: 403: updateServoPosition(1050, 3);
 16535  0023FE  0E04               	movlw	4
 16536  002400  0100               	movlb	0	; () banked
 16537  002402  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16538  002404  0E1A               	movlw	26
 16539  002406  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16540  002408  0E00               	movlw	0
 16541  00240A  0100               	movlb	0	; () banked
 16542  00240C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16543  00240E  0E03               	movlw	3
 16544  002410  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16545  002412  ECCA  F027         	call	_updateServoPosition	;wreg free
 16546                           
 16547                           ;Test.c: 404: _delay((unsigned long)((750)*(32000000/4000.0)));
 16548  002416  0E1F               	movlw	31
 16549  002418  0100               	movlb	0	; () banked
 16550  00241A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16551  00241C  0E71               	movlw	113
 16552  00241E  0100               	movlb	0	; () banked
 16553  002420  6FAB               	movwf	??_BothServos& (0+255),b
 16554  002422  0E1E               	movlw	30
 16555  002424                     u11667:
 16556  002424  2EE8               	decfsz	wreg,f,c
 16557  002426  D7FE               	bra	u11667
 16558  002428  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16559  00242A  D7FC               	bra	u11667
 16560  00242C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16561  00242E  D7FA               	bra	u11667
 16562  002430  F000               	nop	
 16563                           
 16564                           ;Test.c: 406: stopSignals();
 16565  002432  EC58  F02E         	call	_stopSignals	;wreg free
 16566                           
 16567                           ;Test.c: 407: machine_state = Testing_state;
 16568  002436  0E03               	movlw	3
 16569  002438  0100               	movlb	0	; () banked
 16570  00243A  6FFC               	movwf	_machine_state& (0+255),b
 16571                           
 16572                           ; BSR set to: 0
 16573  00243C  0012               	return		;funcret
 16574  00243E                     __end_of_BothServos:
 16575                           	opt stack 0
 16576                           tblptru	equ	0xFF8
 16577                           tblptrh	equ	0xFF7
 16578                           tblptrl	equ	0xFF6
 16579                           tablat	equ	0xFF5
 16580                           prodh	equ	0xFF4
 16581                           prodl	equ	0xFF3
 16582                           intcon	equ	0xFF2
 16583                           intcon2	equ	0xFF1
 16584                           intcon3	equ	0xFF0
 16585                           postinc0	equ	0xFEE
 16586                           wreg	equ	0xFE8
 16587                           postdec1	equ	0xFE5
 16588                           fsr1l	equ	0xFE1
 16589                           indf2	equ	0xFDF
 16590                           postinc2	equ	0xFDE
 16591                           postdec2	equ	0xFDD
 16592                           fsr2h	equ	0xFDA
 16593                           fsr2l	equ	0xFD9
 16594                           status	equ	0xFD8
 16595                           
 16596 ;; *************** function _stopSignals *****************
 16597 ;; Defined at:
 16598 ;;		line 71 in file "main.c"
 16599 ;; Parameters:    Size  Location     Type
 16600 ;;		None
 16601 ;; Auto vars:     Size  Location     Type
 16602 ;;		None
 16603 ;; Return value:  Size  Location     Type
 16604 ;;                  1    wreg      void 
 16605 ;; Registers used:
 16606 ;;		wreg, status,2
 16607 ;; Tracked objects:
 16608 ;;		On entry : 0/0
 16609 ;;		On exit  : 0/0
 16610 ;;		Unchanged: 0/0
 16611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16612 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16613 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16614 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16615 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16616 ;;Total ram usage:        0 bytes
 16617 ;; Hardware stack levels used:    1
 16618 ;; Hardware stack levels required when called:    7
 16619 ;; This function calls:
 16620 ;;		Nothing
 16621 ;; This function is called by:
 16622 ;;		_main
 16623 ;;		_BothServos
 16624 ;;		_PlatformTest
 16625 ;;		_arm
 16626 ;; This function uses a non-reentrant model
 16627 ;;
 16628                           
 16629                           	psect	text51
 16630  005CB0                     __ptext51:
 16631                           	opt stack 0
 16632  005CB0                     _stopSignals:
 16633                           	opt stack 23
 16634                           
 16635                           ;main.c: 72: LATA = 0x00;
 16636                           
 16637                           ; BSR set to: 0
 16638                           ;incstack = 0
 16639  005CB0  0E00               	movlw	0
 16640  005CB2  6E89               	movwf	3977,c	;volatile
 16641                           
 16642                           ;main.c: 73: LATB = 0x00;
 16643  005CB4  0E00               	movlw	0
 16644  005CB6  6E8A               	movwf	3978,c	;volatile
 16645                           
 16646                           ;main.c: 74: LATC = 0x00;
 16647  005CB8  0E00               	movlw	0
 16648  005CBA  6E8B               	movwf	3979,c	;volatile
 16649                           
 16650                           ;main.c: 75: LATD = 0x00;
 16651  005CBC  0E00               	movlw	0
 16652  005CBE  6E8C               	movwf	3980,c	;volatile
 16653                           
 16654                           ;main.c: 76: LATE = 0x00;
 16655  005CC0  0E00               	movlw	0
 16656  005CC2  6E8D               	movwf	3981,c	;volatile
 16657                           
 16658                           ;main.c: 77: TMR1IE = 0;
 16659  005CC4  909D               	bcf	3997,0,c	;volatile
 16660                           
 16661                           ;main.c: 78: TMR2IE = 0;
 16662  005CC6  929D               	bcf	3997,1,c	;volatile
 16663                           
 16664                           ;main.c: 79: TMR3IE = 0;
 16665  005CC8  92A0               	bcf	4000,1,c	;volatile
 16666  005CCA  0012               	return		;funcret
 16667  005CCC                     __end_of_stopSignals:
 16668                           	opt stack 0
 16669                           tblptru	equ	0xFF8
 16670                           tblptrh	equ	0xFF7
 16671                           tblptrl	equ	0xFF6
 16672                           tablat	equ	0xFF5
 16673                           prodh	equ	0xFF4
 16674                           prodl	equ	0xFF3
 16675                           intcon	equ	0xFF2
 16676                           intcon2	equ	0xFF1
 16677                           intcon3	equ	0xFF0
 16678                           postinc0	equ	0xFEE
 16679                           wreg	equ	0xFE8
 16680                           postdec1	equ	0xFE5
 16681                           fsr1l	equ	0xFE1
 16682                           indf2	equ	0xFDF
 16683                           postinc2	equ	0xFDE
 16684                           postdec2	equ	0xFDD
 16685                           fsr2h	equ	0xFDA
 16686                           fsr2l	equ	0xFD9
 16687                           status	equ	0xFD8
 16688                           
 16689 ;; *************** function _initServos *****************
 16690 ;; Defined at:
 16691 ;;		line 488 in file "sort.c"
 16692 ;; Parameters:    Size  Location     Type
 16693 ;;		None
 16694 ;; Auto vars:     Size  Location     Type
 16695 ;;		None
 16696 ;; Return value:  Size  Location     Type
 16697 ;;                  1    wreg      void 
 16698 ;; Registers used:
 16699 ;;		wreg, status,2, status,0, cstack
 16700 ;; Tracked objects:
 16701 ;;		On entry : 0/0
 16702 ;;		On exit  : 0/0
 16703 ;;		Unchanged: 0/0
 16704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16705 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16706 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16707 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16708 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16709 ;;Total ram usage:        1 bytes
 16710 ;; Hardware stack levels used:    1
 16711 ;; Hardware stack levels required when called:    8
 16712 ;; This function calls:
 16713 ;;		_updateServoPosition
 16714 ;; This function is called by:
 16715 ;;		_Loading
 16716 ;;		_BothServos
 16717 ;; This function uses a non-reentrant model
 16718 ;;
 16719                           
 16720                           	psect	text52
 16721  005012                     __ptext52:
 16722                           	opt stack 0
 16723  005012                     _initServos:
 16724                           	opt stack 20
 16725                           
 16726                           ;sort.c: 490: updateServoPosition(1200, 1);
 16727                           
 16728                           ;incstack = 0
 16729  005012  0E04               	movlw	4
 16730  005014  0100               	movlb	0	; () banked
 16731  005016  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16732  005018  0EB0               	movlw	176
 16733  00501A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16734  00501C  0E00               	movlw	0
 16735  00501E  0100               	movlb	0	; () banked
 16736  005020  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16737  005022  0E01               	movlw	1
 16738  005024  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16739  005026  ECCA  F027         	call	_updateServoPosition	;wreg free
 16740                           
 16741                           ;sort.c: 491: updateServoPosition(1050, 3);
 16742  00502A  0E04               	movlw	4
 16743  00502C  0100               	movlb	0	; () banked
 16744  00502E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16745  005030  0E1A               	movlw	26
 16746  005032  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16747  005034  0E00               	movlw	0
 16748  005036  0100               	movlb	0	; () banked
 16749  005038  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16750  00503A  0E03               	movlw	3
 16751  00503C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16752  00503E  ECCA  F027         	call	_updateServoPosition	;wreg free
 16753                           
 16754                           ;sort.c: 492: TMR1ON = 1;
 16755  005042  80CD               	bsf	4045,0,c	;volatile
 16756                           
 16757                           ;sort.c: 493: was_low_1 = 0;
 16758  005044  0E00               	movlw	0
 16759  005046  6E78               	movwf	_was_low_1+1,c	;volatile
 16760  005048  0E00               	movlw	0
 16761  00504A  6E77               	movwf	_was_low_1,c	;volatile
 16762                           
 16763                           ;sort.c: 495: _delay((unsigned long)((5)*(32000000/4000.0)));
 16764  00504C  0E34               	movlw	52
 16765  00504E  0100               	movlb	0	; () banked
 16766  005050  6F88               	movwf	??_initServos& (0+255),b
 16767  005052  0EF1               	movlw	241
 16768  005054                     u11677:
 16769  005054  2EE8               	decfsz	wreg,f,c
 16770  005056  D7FE               	bra	u11677
 16771  005058  2F88               	decfsz	??_initServos& (0+255),f,b
 16772  00505A  D7FC               	bra	u11677
 16773  00505C  D000               	nop2	
 16774                           
 16775                           ;sort.c: 497: TMR3ON = 1;
 16776  00505E  80B1               	bsf	4017,0,c	;volatile
 16777                           
 16778                           ;sort.c: 498: was_low_3 = 0;
 16779  005060  0E00               	movlw	0
 16780  005062  6E7C               	movwf	_was_low_3+1,c	;volatile
 16781  005064  0E00               	movlw	0
 16782  005066  6E7B               	movwf	_was_low_3,c	;volatile
 16783                           
 16784                           ;sort.c: 501: _delay((unsigned long)((1)*(32000000/4000.0)));
 16785  005068  0E0B               	movlw	11
 16786  00506A  0100               	movlb	0	; () banked
 16787  00506C  6F88               	movwf	??_initServos& (0+255),b
 16788  00506E  0E62               	movlw	98
 16789  005070                     u11687:
 16790  005070  2EE8               	decfsz	wreg,f,c
 16791  005072  D7FE               	bra	u11687
 16792  005074  2F88               	decfsz	??_initServos& (0+255),f,b
 16793  005076  D7FC               	bra	u11687
 16794  005078  F000               	nop	
 16795                           
 16796                           ;sort.c: 502: LATBbits.LATB3 = 0;
 16797  00507A  968A               	bcf	3978,3,c	;volatile
 16798                           
 16799                           ;sort.c: 503: TMR2ON = 1;
 16800  00507C  84CA               	bsf	4042,2,c	;volatile
 16801                           
 16802                           ;sort.c: 504: was_low_2 = 0;
 16803  00507E  0E00               	movlw	0
 16804  005080  6E7A               	movwf	_was_low_2+1,c	;volatile
 16805  005082  0E00               	movlw	0
 16806  005084  6E79               	movwf	_was_low_2,c	;volatile
 16807                           
 16808                           ;sort.c: 506: LATCbits.LATC0 = 1;
 16809  005086  808B               	bsf	3979,0,c	;volatile
 16810  005088  0012               	return		;funcret
 16811  00508A                     __end_of_initServos:
 16812                           	opt stack 0
 16813                           tblptru	equ	0xFF8
 16814                           tblptrh	equ	0xFF7
 16815                           tblptrl	equ	0xFF6
 16816                           tablat	equ	0xFF5
 16817                           prodh	equ	0xFF4
 16818                           prodl	equ	0xFF3
 16819                           intcon	equ	0xFF2
 16820                           intcon2	equ	0xFF1
 16821                           intcon3	equ	0xFF0
 16822                           postinc0	equ	0xFEE
 16823                           wreg	equ	0xFE8
 16824                           postdec1	equ	0xFE5
 16825                           fsr1l	equ	0xFE1
 16826                           indf2	equ	0xFDF
 16827                           postinc2	equ	0xFDE
 16828                           postdec2	equ	0xFDD
 16829                           fsr2h	equ	0xFDA
 16830                           fsr2l	equ	0xFD9
 16831                           status	equ	0xFD8
 16832                           
 16833 ;; *************** function _updateServoPosition *****************
 16834 ;; Defined at:
 16835 ;;		line 596 in file "sort.c"
 16836 ;; Parameters:    Size  Location     Type
 16837 ;;  time_us         2    0[BANK0 ] int 
 16838 ;;  timer           2    2[BANK0 ] int 
 16839 ;; Auto vars:     Size  Location     Type
 16840 ;;  my_time         2    6[BANK0 ] unsigned int 
 16841 ;; Return value:  Size  Location     Type
 16842 ;;                  1    wreg      void 
 16843 ;; Registers used:
 16844 ;;		wreg, status,2, status,0
 16845 ;; Tracked objects:
 16846 ;;		On entry : 0/0
 16847 ;;		On exit  : 0/0
 16848 ;;		Unchanged: 0/0
 16849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16850 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16851 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16852 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16853 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16854 ;;Total ram usage:        8 bytes
 16855 ;; Hardware stack levels used:    1
 16856 ;; Hardware stack levels required when called:    7
 16857 ;; This function calls:
 16858 ;;		Nothing
 16859 ;; This function is called by:
 16860 ;;		_Distribution
 16861 ;;		_initServos
 16862 ;;		_actuatorTest
 16863 ;;		_BothServos
 16864 ;; This function uses a non-reentrant model
 16865 ;;
 16866                           
 16867                           	psect	text53
 16868  004F94                     __ptext53:
 16869                           	opt stack 0
 16870  004F94                     _updateServoPosition:
 16871                           	opt stack 20
 16872                           
 16873                           ;sort.c: 597: unsigned int my_time = 65535 - time_us;
 16874                           
 16875                           ;incstack = 0
 16876  004F94  C080  F084         	movff	updateServoPosition@time_us,??_updateServoPosition
 16877  004F98  C081  F085         	movff	updateServoPosition@time_us+1,??_updateServoPosition+1
 16878  004F9C  0100               	movlb	0	; () banked
 16879  004F9E  1F84               	comf	??_updateServoPosition& (0+255),f,b
 16880  004FA0  1F85               	comf	(??_updateServoPosition+1)& (0+255),f,b
 16881  004FA2  4B84               	infsnz	??_updateServoPosition& (0+255),f,b
 16882  004FA4  2B85               	incf	(??_updateServoPosition+1)& (0+255),f,b
 16883  004FA6  0EFF               	movlw	255
 16884  004FA8  0100               	movlb	0	; () banked
 16885  004FAA  2584               	addwf	??_updateServoPosition& (0+255),w,b
 16886  004FAC  0100               	movlb	0	; () banked
 16887  004FAE  6F86               	movwf	updateServoPosition@my_time& (0+255),b
 16888  004FB0  0EFF               	movlw	255
 16889  004FB2  0100               	movlb	0	; () banked
 16890  004FB4  2185               	addwfc	(??_updateServoPosition+1)& (0+255),w,b
 16891  004FB6  0100               	movlb	0	; () banked
 16892  004FB8  6F87               	movwf	(updateServoPosition@my_time+1)& (0+255),b
 16893                           
 16894                           ;sort.c: 598: switch(timer){
 16895  004FBA  D019               	goto	l6926
 16896  004FBC                     l6920:
 16897                           
 16898                           ; BSR set to: 0
 16899                           ;sort.c: 600: servoTimes[0] = my_time >> 8;
 16900  004FBC  0100               	movlb	0	; () banked
 16901  004FBE  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 16902  004FC0  6E5B               	movwf	_servoTimes,c
 16903  004FC2  6A5C               	clrf	_servoTimes+1,c
 16904                           
 16905                           ;sort.c: 601: servoTimes[1] = my_time & 0xFF;
 16906  004FC4  0100               	movlb	0	; () banked
 16907  004FC6  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 16908  004FC8  6E5D               	movwf	_servoTimes+2,c
 16909  004FCA  6A5E               	clrf	_servoTimes+3,c
 16910                           
 16911                           ; BSR set to: 0
 16912                           ;sort.c: 603: pan_servo_state = time_us;
 16913  004FCC  C080  F06B         	movff	updateServoPosition@time_us,_pan_servo_state	;volatile
 16914  004FD0  C081  F06C         	movff	updateServoPosition@time_us+1,_pan_servo_state+1	;volatile
 16915  004FD4                     l944:
 16916                           
 16917                           ; BSR set to: 0
 16918                           ;sort.c: 605: servoTimes[2] = my_time >> 8;
 16919  004FD4  0100               	movlb	0	; () banked
 16920  004FD6  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 16921  004FD8  6E5F               	movwf	_servoTimes+4,c
 16922  004FDA  6A60               	clrf	_servoTimes+5,c
 16923                           
 16924                           ;sort.c: 606: servoTimes[3] = my_time & 0xFF;
 16925  004FDC  0100               	movlb	0	; () banked
 16926  004FDE  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 16927  004FE0  6E61               	movwf	_servoTimes+6,c
 16928  004FE2  6A62               	clrf	_servoTimes+7,c
 16929                           
 16930                           ; BSR set to: 0
 16931                           ;sort.c: 608: tilt_servo_state = time_us;
 16932  004FE4  C080  F071         	movff	updateServoPosition@time_us,_tilt_servo_state	;volatile
 16933  004FE8  C081  F072         	movff	updateServoPosition@time_us+1,_tilt_servo_state+1	;volatile
 16934                           
 16935                           ;sort.c: 609: }
 16936  004FEC  0012               	return	
 16937  004FEE                     l6926:
 16938                           
 16939                           ; BSR set to: 0
 16940  004FEE  C082  F084         	movff	updateServoPosition@timer,??_updateServoPosition
 16941  004FF2  C083  F085         	movff	updateServoPosition@timer+1,??_updateServoPosition+1
 16942                           
 16943                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 16944                           ; Switch size 1, requested type "space"
 16945                           ; Number of cases is 1, Range of values is 0 to 0
 16946                           ; switch strategies available:
 16947                           ; Name         Instructions Cycles
 16948                           ; simple_byte            4     3 (average)
 16949                           ;	Chosen strategy is simple_byte
 16950  004FF6  0100               	movlb	0	; () banked
 16951  004FF8  5185               	movf	(??_updateServoPosition+1)& (0+255),w,b
 16952  004FFA  0A00               	xorlw	0	; case 0
 16953  004FFC  A4D8               	btfss	status,2,c
 16954  004FFE  0012               	return	
 16955                           
 16956                           ; BSR set to: 0
 16957                           ; Switch size 1, requested type "space"
 16958                           ; Number of cases is 2, Range of values is 1 to 3
 16959                           ; switch strategies available:
 16960                           ; Name         Instructions Cycles
 16961                           ; simple_byte            7     4 (average)
 16962                           ;	Chosen strategy is simple_byte
 16963  005000  0100               	movlb	0	; () banked
 16964  005002  5184               	movf	??_updateServoPosition& (0+255),w,b
 16965  005004  0A01               	xorlw	1	; case 1
 16966  005006  B4D8               	btfsc	status,2,c
 16967  005008  D7D9               	goto	l6920
 16968  00500A  0A02               	xorlw	2	; case 3
 16969  00500C  A4D8               	btfss	status,2,c
 16970  00500E  0012               	return	
 16971  005010  D7E1               	goto	l944
 16972  005012                     __end_of_updateServoPosition:
 16973                           	opt stack 0
 16974                           tblptru	equ	0xFF8
 16975                           tblptrh	equ	0xFF7
 16976                           tblptrl	equ	0xFF6
 16977                           tablat	equ	0xFF5
 16978                           prodh	equ	0xFF4
 16979                           prodl	equ	0xFF3
 16980                           intcon	equ	0xFF2
 16981                           intcon2	equ	0xFF1
 16982                           intcon3	equ	0xFF0
 16983                           postinc0	equ	0xFEE
 16984                           wreg	equ	0xFE8
 16985                           postdec1	equ	0xFE5
 16986                           fsr1l	equ	0xFE1
 16987                           indf2	equ	0xFDF
 16988                           postinc2	equ	0xFDE
 16989                           postdec2	equ	0xFDD
 16990                           fsr2h	equ	0xFDA
 16991                           fsr2l	equ	0xFD9
 16992                           status	equ	0xFD8
 16993                           
 16994 ;; *************** function _BlockerTest *****************
 16995 ;; Defined at:
 16996 ;;		line 558 in file "Test.c"
 16997 ;; Parameters:    Size  Location     Type
 16998 ;;		None
 16999 ;; Auto vars:     Size  Location     Type
 17000 ;;  i               2   45[BANK0 ] int 
 17001 ;;  cond_flag       2   51[BANK0 ] int 
 17002 ;;  cam_flag        2   49[BANK0 ] int 
 17003 ;;  res             2   47[BANK0 ] int 
 17004 ;; Return value:  Size  Location     Type
 17005 ;;                  1    wreg      void 
 17006 ;; Registers used:
 17007 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17008 ;; Tracked objects:
 17009 ;;		On entry : 0/0
 17010 ;;		On exit  : 0/0
 17011 ;;		Unchanged: 0/0
 17012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17013 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17014 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17015 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17016 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17017 ;;Total ram usage:       10 bytes
 17018 ;; Hardware stack levels used:    1
 17019 ;; Hardware stack levels required when called:   10
 17020 ;; This function calls:
 17021 ;;		_lcdInst
 17022 ;;		_printf
 17023 ;;		_readADC
 17024 ;; This function is called by:
 17025 ;;		_Test
 17026 ;; This function uses a non-reentrant model
 17027 ;;
 17028                           
 17029                           	psect	text54
 17030  003E64                     __ptext54:
 17031                           	opt stack 0
 17032  003E64                     _BlockerTest:
 17033                           	opt stack 19
 17034                           
 17035                           ;Test.c: 559: readADC(2);
 17036                           
 17037                           ; BSR set to: 0
 17038                           ;incstack = 0
 17039  003E64  0E02               	movlw	2
 17040  003E66  EC9C  F02D         	call	_readADC
 17041                           
 17042                           ;Test.c: 560: int res = ADRESH<<8 | ADRESL;
 17043  003E6A  50C3               	movf	4035,w,c	;volatile
 17044  003E6C  CFC4 F0AB          	movff	4036,??_BlockerTest	;volatile
 17045  003E70  0100               	movlb	0	; () banked
 17046  003E72  6BAC               	clrf	(??_BlockerTest+1)& (0+255),b
 17047  003E74  C0AB  F0AC         	movff	??_BlockerTest,??_BlockerTest+1
 17048  003E78  0100               	movlb	0	; () banked
 17049  003E7A  6BAB               	clrf	??_BlockerTest& (0+255),b
 17050  003E7C  0100               	movlb	0	; () banked
 17051  003E7E  11AB               	iorwf	??_BlockerTest& (0+255),w,b
 17052  003E80  0100               	movlb	0	; () banked
 17053  003E82  6FAF               	movwf	BlockerTest@res& (0+255),b
 17054  003E84  0100               	movlb	0	; () banked
 17055  003E86  51AC               	movf	(??_BlockerTest+1)& (0+255),w,b
 17056  003E88  0100               	movlb	0	; () banked
 17057  003E8A  6FB0               	movwf	(BlockerTest@res+1)& (0+255),b
 17058                           
 17059                           ; BSR set to: 0
 17060                           ;Test.c: 562: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 17061  003E8C  0E01               	movlw	1
 17062  003E8E  ECB1  F02E         	call	_lcdInst
 17063  003E92  0E68               	movlw	104
 17064  003E94  0100               	movlb	0	; () banked
 17065  003E96  6FAB               	movwf	??_BlockerTest& (0+255),b
 17066  003E98  0EE4               	movlw	228
 17067  003E9A                     u11697:
 17068  003E9A  2EE8               	decfsz	wreg,f,c
 17069  003E9C  D7FE               	bra	u11697
 17070  003E9E  2FAB               	decfsz	??_BlockerTest& (0+255),f,b
 17071  003EA0  D7FC               	bra	u11697
 17072  003EA2  F000               	nop	
 17073  003EA4  0E80               	movlw	128
 17074  003EA6  ECB1  F02E         	call	_lcdInst
 17075                           
 17076                           ;Test.c: 563: printf("D:RET|2:C %d  ", res);
 17077  003EAA  0E6D               	movlw	low STR_120
 17078  003EAC  0100               	movlb	0	; () banked
 17079  003EAE  6F8E               	movwf	printf@f& (0+255),b
 17080  003EB0  0EFE               	movlw	high STR_120
 17081  003EB2  0100               	movlb	0	; () banked
 17082  003EB4  6F8F               	movwf	(printf@f+1)& (0+255),b
 17083  003EB6  C0AF  F090         	movff	BlockerTest@res,?_printf+2
 17084  003EBA  C0B0  F091         	movff	BlockerTest@res+1,?_printf+3
 17085  003EBE  EC0C  F00E         	call	_printf	;wreg free
 17086                           
 17087                           ;Test.c: 564: lcdInst(0b11000000);;
 17088  003EC2  0EC0               	movlw	192
 17089  003EC4  ECB1  F02E         	call	_lcdInst
 17090                           
 17091                           ;Test.c: 565: printf("OTHER: CAM TOGGLE");
 17092  003EC8  0E2D               	movlw	low STR_121
 17093  003ECA  0100               	movlb	0	; () banked
 17094  003ECC  6F8E               	movwf	printf@f& (0+255),b
 17095  003ECE  0EFB               	movlw	high STR_121
 17096  003ED0  0100               	movlb	0	; () banked
 17097  003ED2  6F8F               	movwf	(printf@f+1)& (0+255),b
 17098  003ED4  EC0C  F00E         	call	_printf	;wreg free
 17099                           
 17100                           ;Test.c: 566: int cam_flag = 1;
 17101  003ED8  0E00               	movlw	0
 17102  003EDA  0100               	movlb	0	; () banked
 17103  003EDC  6FB2               	movwf	(BlockerTest@cam_flag+1)& (0+255),b
 17104  003EDE  0E01               	movlw	1
 17105  003EE0  6FB1               	movwf	BlockerTest@cam_flag& (0+255),b
 17106                           
 17107                           ; BSR set to: 0
 17108                           ;Test.c: 567: int cond_flag = 0;
 17109  003EE2  0E00               	movlw	0
 17110  003EE4  0100               	movlb	0	; () banked
 17111  003EE6  6FB4               	movwf	(BlockerTest@cond_flag+1)& (0+255),b
 17112  003EE8  0E00               	movlw	0
 17113  003EEA  6FB3               	movwf	BlockerTest@cond_flag& (0+255),b
 17114                           
 17115                           ; BSR set to: 0
 17116                           ;Test.c: 570: while(PORTBbits.RB1 == 0){
 17117                           
 17118                           ;Test.c: 569: while(1){
 17119  003EEC  D023               	goto	l9180
 17120  003EEE                     l9172:
 17121                           
 17122                           ;Test.c: 571: readADC(2);
 17123  003EEE  0E02               	movlw	2
 17124  003EF0  EC9C  F02D         	call	_readADC
 17125                           
 17126                           ;Test.c: 572: res = ADRESH<<8 | ADRESL;
 17127  003EF4  50C3               	movf	4035,w,c	;volatile
 17128  003EF6  CFC4 F0AB          	movff	4036,??_BlockerTest	;volatile
 17129  003EFA  0100               	movlb	0	; () banked
 17130  003EFC  6BAC               	clrf	(??_BlockerTest+1)& (0+255),b
 17131  003EFE  C0AB  F0AC         	movff	??_BlockerTest,??_BlockerTest+1
 17132  003F02  0100               	movlb	0	; () banked
 17133  003F04  6BAB               	clrf	??_BlockerTest& (0+255),b
 17134  003F06  0100               	movlb	0	; () banked
 17135  003F08  11AB               	iorwf	??_BlockerTest& (0+255),w,b
 17136  003F0A  0100               	movlb	0	; () banked
 17137  003F0C  6FAF               	movwf	BlockerTest@res& (0+255),b
 17138  003F0E  0100               	movlb	0	; () banked
 17139  003F10  51AC               	movf	(??_BlockerTest+1)& (0+255),w,b
 17140  003F12  0100               	movlb	0	; () banked
 17141  003F14  6FB0               	movwf	(BlockerTest@res+1)& (0+255),b
 17142                           
 17143                           ; BSR set to: 0
 17144                           ;Test.c: 573: lcdInst(0b10000000);;
 17145  003F16  0E80               	movlw	128
 17146  003F18  ECB1  F02E         	call	_lcdInst
 17147                           
 17148                           ;Test.c: 574: printf("D:RET|2:C %d  ", res);
 17149  003F1C  0E6D               	movlw	low STR_120
 17150  003F1E  0100               	movlb	0	; () banked
 17151  003F20  6F8E               	movwf	printf@f& (0+255),b
 17152  003F22  0EFE               	movlw	high STR_120
 17153  003F24  0100               	movlb	0	; () banked
 17154  003F26  6F8F               	movwf	(printf@f+1)& (0+255),b
 17155  003F28  C0AF  F090         	movff	BlockerTest@res,?_printf+2
 17156  003F2C  C0B0  F091         	movff	BlockerTest@res+1,?_printf+3
 17157  003F30  EC0C  F00E         	call	_printf	;wreg free
 17158  003F34                     l9180:
 17159  003F34  A281               	btfss	3969,1,c	;volatile
 17160  003F36  D7DB               	goto	l9172
 17161                           
 17162                           ;Test.c: 575: }
 17163                           ;Test.c: 576: if(PORTB >> 4 == 0b1111){
 17164  003F38  3881               	swapf	3969,w,c	;volatile
 17165  003F3A  0B0F               	andlw	15
 17166  003F3C  0A0F               	xorlw	15
 17167  003F3E  B4D8               	btfsc	status,2,c
 17168  003F40  0012               	return	
 17169                           
 17170                           ;Test.c: 579: else if(PORTB >> 4 == 0b0001){
 17171                           
 17172                           ;Test.c: 578: }
 17173                           
 17174                           ;Test.c: 577: break;
 17175  003F42  3881               	swapf	3969,w,c	;volatile
 17176  003F44  0B0F               	andlw	15
 17177  003F46  06E8               	decf	wreg,f,c
 17178  003F48  A4D8               	btfss	status,2,c
 17179  003F4A  D016               	goto	l9198
 17180                           
 17181                           ;Test.c: 580: if(cond_flag){
 17182  003F4C  0100               	movlb	0	; () banked
 17183  003F4E  51B3               	movf	BlockerTest@cond_flag& (0+255),w,b
 17184  003F50  0100               	movlb	0	; () banked
 17185  003F52  11B4               	iorwf	(BlockerTest@cond_flag+1)& (0+255),w,b
 17186  003F54  B4D8               	btfsc	status,2,c
 17187  003F56  D007               	goto	l1451
 17188                           
 17189                           ; BSR set to: 0
 17190                           ;Test.c: 581: LATAbits.LATA3 = 1;
 17191  003F58  8689               	bsf	3977,3,c	;volatile
 17192  003F5A  D006               	goto	l9196
 17193  003F5C                     u8541:
 17194  003F5C  0E01               	movlw	1
 17195  003F5E                     u8550:
 17196  003F5E  0100               	movlb	0	; () banked
 17197  003F60  6FB3               	movwf	BlockerTest@cond_flag& (0+255),b
 17198  003F62  6BB4               	clrf	(BlockerTest@cond_flag+1)& (0+255),b
 17199                           
 17200                           ;Test.c: 583: }
 17201  003F64  D05F               	goto	l9226
 17202  003F66                     l1451:
 17203                           
 17204                           ; BSR set to: 0
 17205                           ;Test.c: 584: else{
 17206                           ;Test.c: 585: LATAbits.LATA3 = 0;
 17207  003F66  9689               	bcf	3977,3,c	;volatile
 17208  003F68                     l9196:
 17209                           
 17210                           ; BSR set to: 0
 17211                           ;Test.c: 586: cond_flag = !cond_flag;
 17212  003F68  0100               	movlb	0	; () banked
 17213  003F6A  51B3               	movf	BlockerTest@cond_flag& (0+255),w,b
 17214  003F6C  0100               	movlb	0	; () banked
 17215  003F6E  11B4               	iorwf	(BlockerTest@cond_flag+1)& (0+255),w,b
 17216  003F70  B4D8               	btfsc	status,2,c
 17217  003F72  D7F4               	goto	u8541
 17218  003F74  0E00               	movlw	0
 17219  003F76  D7F3               	goto	u8550
 17220  003F78                     l9198:
 17221                           
 17222                           ;Test.c: 589: else{
 17223                           ;Test.c: 590: if(cam_flag){
 17224  003F78  0100               	movlb	0	; () banked
 17225  003F7A  51B1               	movf	BlockerTest@cam_flag& (0+255),w,b
 17226  003F7C  0100               	movlb	0	; () banked
 17227  003F7E  11B2               	iorwf	(BlockerTest@cam_flag+1)& (0+255),w,b
 17228  003F80  B4D8               	btfsc	status,2,c
 17229  003F82  D007               	goto	l9204
 17230                           
 17231                           ; BSR set to: 0
 17232                           ;Test.c: 591: LATCbits.LATC0 = 1;
 17233  003F84  808B               	bsf	3979,0,c	;volatile
 17234  003F86  D023               	goto	l9216
 17235  003F88                     u8591:
 17236  003F88  0E01               	movlw	1
 17237  003F8A                     u8600:
 17238  003F8A  0100               	movlb	0	; () banked
 17239  003F8C  6FB1               	movwf	BlockerTest@cam_flag& (0+255),b
 17240  003F8E  6BB2               	clrf	(BlockerTest@cam_flag+1)& (0+255),b
 17241                           
 17242                           ;Test.c: 593: }
 17243  003F90  D049               	goto	l9226
 17244  003F92                     l9204:
 17245                           
 17246                           ; BSR set to: 0
 17247                           ;Test.c: 594: else{
 17248                           ;Test.c: 595: for(int i=0;i<5000;i++)
 17249  003F92  0E00               	movlw	0
 17250  003F94  0100               	movlb	0	; () banked
 17251  003F96  6FAE               	movwf	(BlockerTest@i+1)& (0+255),b
 17252  003F98  0E00               	movlw	0
 17253  003F9A  6FAD               	movwf	BlockerTest@i& (0+255),b
 17254  003F9C                     l9206:
 17255                           
 17256                           ; BSR set to: 0
 17257  003F9C  0100               	movlb	0	; () banked
 17258  003F9E  BFAE               	btfsc	(BlockerTest@i+1)& (0+255),7,b
 17259  003FA0  D008               	goto	l1456
 17260  003FA2  0E88               	movlw	136
 17261  003FA4  0100               	movlb	0	; () banked
 17262  003FA6  5DAD               	subwf	BlockerTest@i& (0+255),w,b
 17263  003FA8  0E13               	movlw	19
 17264  003FAA  0100               	movlb	0	; () banked
 17265  003FAC  59AE               	subwfb	(BlockerTest@i+1)& (0+255),w,b
 17266  003FAE  B0D8               	btfsc	status,0,c
 17267  003FB0  D00D               	goto	l1457
 17268  003FB2                     l1456:
 17269                           
 17270                           ; BSR set to: 0
 17271                           ;Test.c: 596: {
 17272                           ;Test.c: 597: LATCbits.LATC0 = 1;
 17273  003FB2  808B               	bsf	3979,0,c	;volatile
 17274                           
 17275                           ; BSR set to: 0
 17276                           ;Test.c: 598: _delay((unsigned long)((10)*(32000000/4000000.0)));
 17277  003FB4  0E1A               	movlw	26
 17278  003FB6                     u11707:
 17279  003FB6  2EE8               	decfsz	wreg,f,c
 17280  003FB8  D7FE               	bra	u11707
 17281  003FBA  D000               	nop2	
 17282                           
 17283                           ;Test.c: 599: LATCbits.LATC0 = 0;
 17284  003FBC  908B               	bcf	3979,0,c	;volatile
 17285                           
 17286                           ;Test.c: 600: _delay((unsigned long)((90)*(32000000/4000000.0)));
 17287  003FBE  0EF0               	movlw	240
 17288  003FC0                     u11717:
 17289  003FC0  2EE8               	decfsz	wreg,f,c
 17290  003FC2  D7FE               	bra	u11717
 17291  003FC4  0100               	movlb	0	; () banked
 17292  003FC6  4BAD               	infsnz	BlockerTest@i& (0+255),f,b
 17293  003FC8  2BAE               	incf	(BlockerTest@i+1)& (0+255),f,b
 17294  003FCA  D7E8               	goto	l9206
 17295  003FCC                     l1457:
 17296                           
 17297                           ; BSR set to: 0
 17298                           ;Test.c: 601: }
 17299                           ;Test.c: 602: LATCbits.LATC0 = 0;
 17300  003FCC  908B               	bcf	3979,0,c	;volatile
 17301  003FCE                     l9216:
 17302                           
 17303                           ; BSR set to: 0
 17304                           ;Test.c: 603: cam_flag = !cam_flag;
 17305  003FCE  0100               	movlb	0	; () banked
 17306  003FD0  51B1               	movf	BlockerTest@cam_flag& (0+255),w,b
 17307  003FD2  0100               	movlb	0	; () banked
 17308  003FD4  11B2               	iorwf	(BlockerTest@cam_flag+1)& (0+255),w,b
 17309  003FD6  B4D8               	btfsc	status,2,c
 17310  003FD8  D7D7               	goto	u8591
 17311  003FDA  0E00               	movlw	0
 17312  003FDC  D7D6               	goto	u8600
 17313  003FDE                     l9218:
 17314                           
 17315                           ;Test.c: 608: readADC(2);
 17316  003FDE  0E02               	movlw	2
 17317  003FE0  EC9C  F02D         	call	_readADC
 17318                           
 17319                           ;Test.c: 609: res = ADRESH<<8 | ADRESL;
 17320  003FE4  50C3               	movf	4035,w,c	;volatile
 17321  003FE6  CFC4 F0AB          	movff	4036,??_BlockerTest	;volatile
 17322  003FEA  0100               	movlb	0	; () banked
 17323  003FEC  6BAC               	clrf	(??_BlockerTest+1)& (0+255),b
 17324  003FEE  C0AB  F0AC         	movff	??_BlockerTest,??_BlockerTest+1
 17325  003FF2  0100               	movlb	0	; () banked
 17326  003FF4  6BAB               	clrf	??_BlockerTest& (0+255),b
 17327  003FF6  0100               	movlb	0	; () banked
 17328  003FF8  11AB               	iorwf	??_BlockerTest& (0+255),w,b
 17329  003FFA  0100               	movlb	0	; () banked
 17330  003FFC  6FAF               	movwf	BlockerTest@res& (0+255),b
 17331  003FFE  0100               	movlb	0	; () banked
 17332  004000  51AC               	movf	(??_BlockerTest+1)& (0+255),w,b
 17333  004002  0100               	movlb	0	; () banked
 17334  004004  6FB0               	movwf	(BlockerTest@res+1)& (0+255),b
 17335                           
 17336                           ; BSR set to: 0
 17337                           ;Test.c: 610: lcdInst(0b10000000);;
 17338  004006  0E80               	movlw	128
 17339  004008  ECB1  F02E         	call	_lcdInst
 17340                           
 17341                           ;Test.c: 611: printf("D:RET|2:C %d  ", res);
 17342  00400C  0E6D               	movlw	low STR_120
 17343  00400E  0100               	movlb	0	; () banked
 17344  004010  6F8E               	movwf	printf@f& (0+255),b
 17345  004012  0EFE               	movlw	high STR_120
 17346  004014  0100               	movlb	0	; () banked
 17347  004016  6F8F               	movwf	(printf@f+1)& (0+255),b
 17348  004018  C0AF  F090         	movff	BlockerTest@res,?_printf+2
 17349  00401C  C0B0  F091         	movff	BlockerTest@res+1,?_printf+3
 17350  004020  EC0C  F00E         	call	_printf	;wreg free
 17351  004024                     l9226:
 17352  004024  A281               	btfss	3969,1,c	;volatile
 17353  004026  D786               	goto	l9180
 17354  004028  D7DA               	goto	l9218
 17355  00402A                     __end_of_BlockerTest:
 17356                           	opt stack 0
 17357                           tblptru	equ	0xFF8
 17358                           tblptrh	equ	0xFF7
 17359                           tblptrl	equ	0xFF6
 17360                           tablat	equ	0xFF5
 17361                           prodh	equ	0xFF4
 17362                           prodl	equ	0xFF3
 17363                           intcon	equ	0xFF2
 17364                           intcon2	equ	0xFF1
 17365                           intcon3	equ	0xFF0
 17366                           postinc0	equ	0xFEE
 17367                           wreg	equ	0xFE8
 17368                           postdec1	equ	0xFE5
 17369                           fsr1l	equ	0xFE1
 17370                           indf2	equ	0xFDF
 17371                           postinc2	equ	0xFDE
 17372                           postdec2	equ	0xFDD
 17373                           fsr2h	equ	0xFDA
 17374                           fsr2l	equ	0xFD9
 17375                           status	equ	0xFD8
 17376                           
 17377 ;; *************** function _readADC *****************
 17378 ;; Defined at:
 17379 ;;		line 15 in file "ADCFunctionality.c"
 17380 ;; Parameters:    Size  Location     Type
 17381 ;;  channel         1    wreg     unsigned char 
 17382 ;; Auto vars:     Size  Location     Type
 17383 ;;  channel         1    1[BANK0 ] unsigned char 
 17384 ;; Return value:  Size  Location     Type
 17385 ;;                  1    wreg      void 
 17386 ;; Registers used:
 17387 ;;		wreg, status,2, status,0, cstack
 17388 ;; Tracked objects:
 17389 ;;		On entry : 0/0
 17390 ;;		On exit  : 0/0
 17391 ;;		Unchanged: 0/0
 17392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17393 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17394 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17395 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17396 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17397 ;;Total ram usage:        2 bytes
 17398 ;; Hardware stack levels used:    1
 17399 ;; Hardware stack levels required when called:    7
 17400 ;; This function calls:
 17401 ;;		Nothing
 17402 ;; This function is called by:
 17403 ;;		_readIR
 17404 ;;		_readMAG
 17405 ;;		_readCOND
 17406 ;;		_sensorTest
 17407 ;;		_PlatformTest
 17408 ;;		_BlockerTest
 17409 ;; This function uses a non-reentrant model
 17410 ;;
 17411                           
 17412                           	psect	text55
 17413  005B38                     __ptext55:
 17414                           	opt stack 0
 17415  005B38                     _readADC:
 17416                           	opt stack 20
 17417                           
 17418                           ;incstack = 0
 17419                           ;readADC@channel stored from wreg
 17420  005B38  0100               	movlb	0	; () banked
 17421  005B3A  6F81               	movwf	readADC@channel& (0+255),b
 17422                           
 17423                           ;ADCFunctionality.c: 17: ADCON0 = channel << 2;
 17424  005B3C  0100               	movlb	0	; () banked
 17425  005B3E  4581               	rlncf	readADC@channel& (0+255),w,b
 17426  005B40  46E8               	rlncf	wreg,f,c
 17427  005B42  0BFC               	andlw	252
 17428  005B44  6EC2               	movwf	4034,c	;volatile
 17429                           
 17430                           ; BSR set to: 0
 17431                           ;ADCFunctionality.c: 18: ADCON0bits.ADON = 1;
 17432  005B46  80C2               	bsf	4034,0,c	;volatile
 17433                           
 17434                           ; BSR set to: 0
 17435                           ;ADCFunctionality.c: 19: ADCON0bits.GO = 1;
 17436  005B48  82C2               	bsf	4034,1,c	;volatile
 17437                           
 17438                           ;ADCFunctionality.c: 20: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(32000
      +                          000/4000.0)));}
 17439  005B4A  D009               	goto	l6558
 17440  005B4C                     l6556:
 17441  005B4C  0E34               	movlw	52
 17442  005B4E  0100               	movlb	0	; () banked
 17443  005B50  6F80               	movwf	??_readADC& (0+255),b
 17444  005B52  0EF1               	movlw	241
 17445  005B54                     u11727:
 17446  005B54  2EE8               	decfsz	wreg,f,c
 17447  005B56  D7FE               	bra	u11727
 17448  005B58  2F80               	decfsz	??_readADC& (0+255),f,b
 17449  005B5A  D7FC               	bra	u11727
 17450  005B5C  D000               	nop2	
 17451  005B5E                     l6558:
 17452  005B5E  A2C2               	btfss	4034,1,c	;volatile
 17453  005B60  0012               	return	
 17454  005B62  D7F4               	goto	l6556
 17455  005B64                     __end_of_readADC:
 17456                           	opt stack 0
 17457                           tblptru	equ	0xFF8
 17458                           tblptrh	equ	0xFF7
 17459                           tblptrl	equ	0xFF6
 17460                           tablat	equ	0xFF5
 17461                           prodh	equ	0xFF4
 17462                           prodl	equ	0xFF3
 17463                           intcon	equ	0xFF2
 17464                           intcon2	equ	0xFF1
 17465                           intcon3	equ	0xFF0
 17466                           postinc0	equ	0xFEE
 17467                           wreg	equ	0xFE8
 17468                           postdec1	equ	0xFE5
 17469                           fsr1l	equ	0xFE1
 17470                           indf2	equ	0xFDF
 17471                           postinc2	equ	0xFDE
 17472                           postdec2	equ	0xFDD
 17473                           fsr2h	equ	0xFDA
 17474                           fsr2l	equ	0xFD9
 17475                           status	equ	0xFD8
 17476                           
 17477 ;; *************** function _printf *****************
 17478 ;; Defined at:
 17479 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 17480 ;; Parameters:    Size  Location     Type
 17481 ;;  f               2   14[BANK0 ] PTR const unsigned char 
 17482 ;;		 -> STR_127(18), STR_126(18), STR_125(17), STR_124(17), 
 17483 ;;		 -> STR_123(15), STR_122(15), STR_121(18), STR_120(15), 
 17484 ;;		 -> STR_119(18), STR_118(18), STR_117(17), STR_116(17), 
 17485 ;;		 -> STR_115(17), STR_114(17), STR_113(17), STR_112(17), 
 17486 ;;		 -> STR_111(18), STR_110(17), STR_109(15), STR_108(15), 
 17487 ;;		 -> STR_107(15), STR_106(17), STR_105(17), STR_104(17), 
 17488 ;;		 -> STR_103(16), STR_102(17), STR_101(17), STR_100(17), 
 17489 ;;		 -> STR_99(17), STR_98(17), STR_97(17), STR_96(15), 
 17490 ;;		 -> STR_95(11), STR_94(17), STR_93(11), STR_92(17), 
 17491 ;;		 -> STR_91(14), STR_90(15), STR_89(14), STR_88(10), 
 17492 ;;		 -> STR_87(9), STR_86(9), STR_85(10), STR_84(10), 
 17493 ;;		 -> STR_83(16), STR_82(15), STR_81(3), STR_80(15), 
 17494 ;;		 -> STR_79(13), STR_78(14), STR_77(8), STR_76(14), 
 17495 ;;		 -> STR_75(15), STR_74(12), STR_73(14), STR_72(17), 
 17496 ;;		 -> STR_71(14), STR_70(15), STR_69(17), STR_68(17), 
 17497 ;;		 -> STR_67(7), STR_66(21), STR_65(16), STR_64(16), 
 17498 ;;		 -> STR_63(24), STR_50(17), STR_49(17), STR_48(17), 
 17499 ;;		 -> STR_47(17), STR_46(17), STR_45(17), STR_44(17), 
 17500 ;;		 -> STR_43(17), STR_42(17), STR_41(17), STR_40(17), 
 17501 ;;		 -> STR_39(17), STR_38(17), STR_37(17), STR_36(17), 
 17502 ;;		 -> STR_35(17), STR_34(17), STR_33(17), STR_32(17), 
 17503 ;;		 -> STR_31(17), STR_30(17), STR_29(3), STR_28(17), 
 17504 ;;		 -> STR_27(17), STR_26(17), STR_25(17), STR_24(17), 
 17505 ;;		 -> STR_23(14), STR_22(10), STR_21(24), STR_7(7), 
 17506 ;;		 -> STR_6(17), STR_5(18), STR_4(16), STR_3(18), 
 17507 ;;		 -> STR_2(14), STR_1(18), 
 17508 ;; Auto vars:     Size  Location     Type
 17509 ;;  tmpval          4    0        struct .
 17510 ;;  width           2   41[BANK0 ] int 
 17511 ;;  val             2   37[BANK0 ] unsigned int 
 17512 ;;  len             2   35[BANK0 ] unsigned int 
 17513 ;;  ap              2   33[BANK0 ] PTR void [1]
 17514 ;;		 -> ?i2_printf(2), ?_printf(2), 
 17515 ;;  cp              2   31[BANK0 ] PTR const unsigned char 
 17516 ;;		 -> STR_128(7), count_total(2), printRTC@month(4), UI@month(4), 
 17517 ;;  c               1   40[BANK0 ] char 
 17518 ;;  flag            1   39[BANK0 ] unsigned char 
 17519 ;;  prec            1   30[BANK0 ] char 
 17520 ;; Return value:  Size  Location     Type
 17521 ;;                  2   14[BANK0 ] int 
 17522 ;; Registers used:
 17523 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17524 ;; Tracked objects:
 17525 ;;		On entry : 0/0
 17526 ;;		On exit  : 0/0
 17527 ;;		Unchanged: 0/0
 17528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17529 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17530 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17531 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17532 ;;      Totals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17533 ;;Total ram usage:       29 bytes
 17534 ;; Hardware stack levels used:    1
 17535 ;; Hardware stack levels required when called:    9
 17536 ;; This function calls:
 17537 ;;		___lwdiv
 17538 ;;		___lwmod
 17539 ;;		___wmul
 17540 ;;		_isdigit
 17541 ;;		_putch
 17542 ;; This function is called by:
 17543 ;;		_UI
 17544 ;;		_change_state_to_menu_start
 17545 ;;		_change_state_to_menu_12
 17546 ;;		_change_state_to_menu_22
 17547 ;;		_printRTC
 17548 ;;		_EEPROM_write
 17549 ;;		_Test
 17550 ;;		_algorithmTest
 17551 ;;		_sensorTest
 17552 ;;		_actuatorTest
 17553 ;;		_BothServos
 17554 ;;		_PortTestDC
 17555 ;;		_PlatformTest
 17556 ;;		_SpeedTest
 17557 ;;		_BlockerTest
 17558 ;;		_arm
 17559 ;;		_PortTestPusher
 17560 ;; This function uses a non-reentrant model
 17561 ;;
 17562                           
 17563                           	psect	text56
 17564  001C18                     __ptext56:
 17565                           	opt stack 0
 17566  001C18                     _printf:
 17567                           	opt stack 18
 17568                           
 17569                           ;doprnt.c: 466: va_list ap;
 17570                           ;doprnt.c: 499: signed char c;
 17571                           ;doprnt.c: 501: int width;
 17572                           ;doprnt.c: 506: signed char prec;
 17573                           ;doprnt.c: 508: unsigned char flag;
 17574                           ;doprnt.c: 523: union {
 17575                           ;doprnt.c: 524: unsigned long vd;
 17576                           ;doprnt.c: 525: double integ;
 17577                           ;doprnt.c: 526: } tmpval;
 17578                           ;doprnt.c: 528: unsigned int val;
 17579                           ;doprnt.c: 529: unsigned len;
 17580                           ;doprnt.c: 530: const char * cp;
 17581                           ;doprnt.c: 533: *ap = __va_start();
 17582                           
 17583                           ;incstack = 0
 17584  001C18  0E90               	movlw	low (?_printf+2)
 17585  001C1A  0100               	movlb	0	; () banked
 17586  001C1C  6FA1               	movwf	printf@ap& (0+255),b
 17587  001C1E  0E00               	movlw	high (?_printf+2)
 17588  001C20  0100               	movlb	0	; () banked
 17589  001C22  6FA2               	movwf	(printf@ap+1)& (0+255),b
 17590                           
 17591                           ;doprnt.c: 536: while(c = *f++) {
 17592  001C24  D205               	goto	l6880
 17593  001C26                     l6750:
 17594                           
 17595                           ; BSR set to: 0
 17596                           ;doprnt.c: 538: if(c != '%')
 17597  001C26  0E25               	movlw	37
 17598  001C28  0100               	movlb	0	; () banked
 17599  001C2A  19A8               	xorwf	printf@c& (0+255),w,b
 17600  001C2C  B4D8               	btfsc	status,2,c
 17601  001C2E  D005               	goto	l6754
 17602                           
 17603                           ; BSR set to: 0
 17604                           ;doprnt.c: 540: {
 17605                           ;doprnt.c: 541: (putch(c) );
 17606  001C30  0100               	movlb	0	; () banked
 17607  001C32  51A8               	movf	printf@c& (0+255),w,b
 17608  001C34  ECA9  F02E         	call	_putch
 17609                           
 17610                           ;doprnt.c: 542: continue;
 17611  001C38  D1FB               	goto	l6880
 17612  001C3A                     l6754:
 17613                           
 17614                           ;doprnt.c: 543: }
 17615                           ;doprnt.c: 546: width = 0;
 17616  001C3A  0E00               	movlw	0
 17617  001C3C  0100               	movlb	0	; () banked
 17618  001C3E  6FAA               	movwf	(printf@width+1)& (0+255),b
 17619  001C40  0E00               	movlw	0
 17620  001C42  6FA9               	movwf	printf@width& (0+255),b
 17621                           
 17622                           ;doprnt.c: 548: flag = 0;
 17623  001C44  0E00               	movlw	0
 17624  001C46  0100               	movlb	0	; () banked
 17625  001C48  6FA7               	movwf	printf@flag& (0+255),b
 17626                           
 17627                           ; BSR set to: 0
 17628                           ;doprnt.c: 551: switch(*f) {
 17629                           
 17630                           ;doprnt.c: 550: for(;;) {
 17631  001C4A  D005               	goto	l6760
 17632  001C4C                     l6756:
 17633                           
 17634                           ;doprnt.c: 580: flag |= 0x04;
 17635  001C4C  0100               	movlb	0	; () banked
 17636  001C4E  85A7               	bsf	printf@flag& (0+255),2,b
 17637                           
 17638                           ;doprnt.c: 581: f++;
 17639  001C50  0100               	movlb	0	; () banked
 17640  001C52  4B8E               	infsnz	printf@f& (0+255),f,b
 17641  001C54  2B8F               	incf	(printf@f+1)& (0+255),f,b
 17642  001C56                     l6760:
 17643  001C56  C08E  FFF6         	movff	printf@f,tblptrl
 17644  001C5A  C08F  FFF7         	movff	printf@f+1,tblptrh
 17645  001C5E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17646  001C5E  6AF8               	clrf	tblptru,c
 17647  001C60                     	endif
 17648  001C60                     	if	0	;tblptru may be non-zero
 17649  001C60                     	endif
 17650  001C60  0008               	tblrd		*
 17651  001C62  50F5               	movf	tablat,w,c
 17652                           
 17653                           ; Switch size 1, requested type "space"
 17654                           ; Number of cases is 1, Range of values is 48 to 48
 17655                           ; switch strategies available:
 17656                           ; Name         Instructions Cycles
 17657                           ; simple_byte            4     3 (average)
 17658                           ;	Chosen strategy is simple_byte
 17659  001C64  0A30               	xorlw	48	; case 48
 17660  001C66  B4D8               	btfsc	status,2,c
 17661  001C68  D7F1               	goto	l6756
 17662                           
 17663                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 17664                           
 17665                           ;doprnt.c: 586: }
 17666                           
 17667                           ;doprnt.c: 585: break;
 17668  001C6A  C08E  FFF6         	movff	printf@f,tblptrl
 17669  001C6E  C08F  FFF7         	movff	printf@f+1,tblptrh
 17670  001C72                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17671  001C72  6AF8               	clrf	tblptru,c
 17672  001C74                     	endif
 17673  001C74                     	if	0	;tblptru may be non-zero
 17674  001C74                     	endif
 17675  001C74  0008               	tblrd		*
 17676  001C76  50F5               	movf	tablat,w,c
 17677  001C78  ECB2  F02D         	call	_isdigit
 17678  001C7C  A0D8               	btfss	status,0,c
 17679  001C7E  D0D2               	goto	l6808
 17680                           
 17681                           ;doprnt.c: 598: width = 0;
 17682  001C80  0E00               	movlw	0
 17683  001C82  0100               	movlb	0	; () banked
 17684  001C84  6FAA               	movwf	(printf@width+1)& (0+255),b
 17685  001C86  0E00               	movlw	0
 17686  001C88  6FA9               	movwf	printf@width& (0+255),b
 17687  001C8A                     l6766:
 17688                           
 17689                           ;doprnt.c: 600: width *= 10;
 17690  001C8A  C0A9  F080         	movff	printf@width,___wmul@multiplier
 17691  001C8E  C0AA  F081         	movff	printf@width+1,___wmul@multiplier+1
 17692  001C92  0E00               	movlw	0
 17693  001C94  0100               	movlb	0	; () banked
 17694  001C96  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
 17695  001C98  0E0A               	movlw	10
 17696  001C9A  6F82               	movwf	___wmul@multiplicand& (0+255),b
 17697  001C9C  EC1B  F02C         	call	___wmul	;wreg free
 17698  001CA0  C080  F0A9         	movff	?___wmul,printf@width
 17699  001CA4  C081  F0AA         	movff	?___wmul+1,printf@width+1
 17700                           
 17701                           ;doprnt.c: 601: width += *f++ - '0';
 17702  001CA8  0ED0               	movlw	208
 17703  001CAA  0100               	movlb	0	; () banked
 17704  001CAC  6F9A               	movwf	??_printf& (0+255),b
 17705  001CAE  0EFF               	movlw	255
 17706  001CB0  0100               	movlb	0	; () banked
 17707  001CB2  6F9B               	movwf	(??_printf+1)& (0+255),b
 17708  001CB4  C08E  FFF6         	movff	printf@f,tblptrl
 17709  001CB8  C08F  FFF7         	movff	printf@f+1,tblptrh
 17710  001CBC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17711  001CBC  6AF8               	clrf	tblptru,c
 17712  001CBE                     	endif
 17713  001CBE                     	if	0	;tblptru may be non-zero
 17714  001CBE                     	endif
 17715  001CBE  0008               	tblrd		*
 17716  001CC0  50F5               	movf	tablat,w,c
 17717  001CC2  0100               	movlb	0	; () banked
 17718  001CC4  6F9C               	movwf	(??_printf+2)& (0+255),b
 17719  001CC6  6B9D               	clrf	(??_printf+3)& (0+255),b
 17720  001CC8  0100               	movlb	0	; () banked
 17721  001CCA  519A               	movf	??_printf& (0+255),w,b
 17722  001CCC  0100               	movlb	0	; () banked
 17723  001CCE  279C               	addwf	(??_printf+2)& (0+255),f,b
 17724  001CD0  0100               	movlb	0	; () banked
 17725  001CD2  519B               	movf	(??_printf+1)& (0+255),w,b
 17726  001CD4  0100               	movlb	0	; () banked
 17727  001CD6  239D               	addwfc	(??_printf+3)& (0+255),f,b
 17728  001CD8  0100               	movlb	0	; () banked
 17729  001CDA  519C               	movf	(??_printf+2)& (0+255),w,b
 17730  001CDC  0100               	movlb	0	; () banked
 17731  001CDE  27A9               	addwf	printf@width& (0+255),f,b
 17732  001CE0  0100               	movlb	0	; () banked
 17733  001CE2  519D               	movf	(??_printf+3)& (0+255),w,b
 17734  001CE4  0100               	movlb	0	; () banked
 17735  001CE6  23AA               	addwfc	(printf@width+1)& (0+255),f,b
 17736                           
 17737                           ; BSR set to: 0
 17738  001CE8  0100               	movlb	0	; () banked
 17739  001CEA  4B8E               	infsnz	printf@f& (0+255),f,b
 17740  001CEC  2B8F               	incf	(printf@f+1)& (0+255),f,b
 17741                           
 17742                           ; BSR set to: 0
 17743                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 17744  001CEE  C08E  FFF6         	movff	printf@f,tblptrl
 17745  001CF2  C08F  FFF7         	movff	printf@f+1,tblptrh
 17746  001CF6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17747  001CF6  6AF8               	clrf	tblptru,c
 17748  001CF8                     	endif
 17749  001CF8                     	if	0	;tblptru may be non-zero
 17750  001CF8                     	endif
 17751  001CF8  0008               	tblrd		*
 17752  001CFA  50F5               	movf	tablat,w,c
 17753  001CFC  ECB2  F02D         	call	_isdigit
 17754  001D00  A0D8               	btfss	status,0,c
 17755  001D02  D090               	goto	l6808
 17756  001D04  D7C2               	goto	l6766
 17757  001D06                     l6774:
 17758                           
 17759                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 17760  001D06  C0A1  FFD9         	movff	printf@ap,fsr2l
 17761  001D0A  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 17762  001D0E  CFDE F09F          	movff	postinc2,printf@cp
 17763  001D12  CFDD F0A0          	movff	postdec2,printf@cp+1
 17764  001D16  0E02               	movlw	2
 17765  001D18  0100               	movlb	0	; () banked
 17766  001D1A  27A1               	addwf	printf@ap& (0+255),f,b
 17767  001D1C  0E00               	movlw	0
 17768  001D1E  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 17769                           
 17770                           ; BSR set to: 0
 17771                           ;doprnt.c: 740: if(!cp)
 17772  001D20  0100               	movlb	0	; () banked
 17773  001D22  519F               	movf	printf@cp& (0+255),w,b
 17774  001D24  0100               	movlb	0	; () banked
 17775  001D26  11A0               	iorwf	(printf@cp+1)& (0+255),w,b
 17776  001D28  A4D8               	btfss	status,2,c
 17777  001D2A  D006               	goto	l6782
 17778                           
 17779                           ; BSR set to: 0
 17780                           ;doprnt.c: 741: cp = "(null)";
 17781  001D2C  0EB5               	movlw	low STR_128
 17782  001D2E  0100               	movlb	0	; () banked
 17783  001D30  6F9F               	movwf	printf@cp& (0+255),b
 17784  001D32  0EFF               	movlw	high STR_128
 17785  001D34  0100               	movlb	0	; () banked
 17786  001D36  6FA0               	movwf	(printf@cp+1)& (0+255),b
 17787  001D38                     l6782:
 17788                           
 17789                           ; BSR set to: 0
 17790                           ;doprnt.c: 745: len = 0;
 17791  001D38  0E00               	movlw	0
 17792  001D3A  0100               	movlb	0	; () banked
 17793  001D3C  6FA4               	movwf	(printf@len+1)& (0+255),b
 17794  001D3E  0E00               	movlw	0
 17795  001D40  6FA3               	movwf	printf@len& (0+255),b
 17796                           
 17797                           ;doprnt.c: 746: while(cp[len])
 17798  001D42  D003               	goto	l6786
 17799  001D44                     l6784:
 17800                           
 17801                           ;doprnt.c: 747: len++;
 17802  001D44  0100               	movlb	0	; () banked
 17803  001D46  4BA3               	infsnz	printf@len& (0+255),f,b
 17804  001D48  2BA4               	incf	(printf@len+1)& (0+255),f,b
 17805  001D4A                     l6786:
 17806                           
 17807                           ; BSR set to: 0
 17808  001D4A  0100               	movlb	0	; () banked
 17809  001D4C  51A3               	movf	printf@len& (0+255),w,b
 17810  001D4E  0100               	movlb	0	; () banked
 17811  001D50  259F               	addwf	printf@cp& (0+255),w,b
 17812  001D52  0100               	movlb	0	; () banked
 17813  001D54  6F9A               	movwf	??_printf& (0+255),b
 17814  001D56  0100               	movlb	0	; () banked
 17815  001D58  51A4               	movf	(printf@len+1)& (0+255),w,b
 17816  001D5A  0100               	movlb	0	; () banked
 17817  001D5C  21A0               	addwfc	(printf@cp+1)& (0+255),w,b
 17818  001D5E  0100               	movlb	0	; () banked
 17819  001D60  6F9B               	movwf	(??_printf+1)& (0+255),b
 17820  001D62  C09A  FFF6         	movff	??_printf,tblptrl
 17821  001D66  C09B  FFF7         	movff	??_printf+1,tblptrh
 17822  001D6A  0E00               	movlw	low (__mediumconst shr (0+16))
 17823  001D6C  6EF8               	movwf	tblptru,c
 17824  001D6E  0E0F               	movlw	(high __ramtop+-1)
 17825  001D70  64F7               	cpfsgt	tblptrh,c
 17826  001D72  D003               	bra	u5437
 17827  001D74  0008               	tblrd		*
 17828  001D76  50F5               	movf	tablat,w,c
 17829  001D78  D005               	bra	u5430
 17830  001D7A                     u5437:
 17831  001D7A  CFF6 FFE9          	movff	tblptrl,fsr0l
 17832  001D7E  CFF7 FFEA          	movff	tblptrh,fsr0h
 17833  001D82  50EF               	movf	indf0,w,c
 17834  001D84                     u5430:
 17835  001D84  0900               	iorlw	0
 17836  001D86  A4D8               	btfss	status,2,c
 17837  001D88  D7DD               	goto	l6784
 17838                           
 17839                           ;doprnt.c: 757: if(width > len)
 17840  001D8A  0100               	movlb	0	; () banked
 17841  001D8C  51A9               	movf	printf@width& (0+255),w,b
 17842  001D8E  0100               	movlb	0	; () banked
 17843  001D90  5DA3               	subwf	printf@len& (0+255),w,b
 17844  001D92  0100               	movlb	0	; () banked
 17845  001D94  51AA               	movf	(printf@width+1)& (0+255),w,b
 17846  001D96  0100               	movlb	0	; () banked
 17847  001D98  59A4               	subwfb	(printf@len+1)& (0+255),w,b
 17848  001D9A  B0D8               	btfsc	status,0,c
 17849  001D9C  D009               	goto	l6792
 17850                           
 17851                           ; BSR set to: 0
 17852                           ;doprnt.c: 758: width -= len;
 17853  001D9E  0100               	movlb	0	; () banked
 17854  001DA0  51A3               	movf	printf@len& (0+255),w,b
 17855  001DA2  0100               	movlb	0	; () banked
 17856  001DA4  5FA9               	subwf	printf@width& (0+255),f,b
 17857  001DA6  0100               	movlb	0	; () banked
 17858  001DA8  51A4               	movf	(printf@len+1)& (0+255),w,b
 17859  001DAA  0100               	movlb	0	; () banked
 17860  001DAC  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 17861  001DAE  D009               	goto	l6796
 17862  001DB0                     l6792:
 17863                           
 17864                           ; BSR set to: 0
 17865                           ;doprnt.c: 759: else
 17866                           ;doprnt.c: 760: width = 0;
 17867  001DB0  0E00               	movlw	0
 17868  001DB2  0100               	movlb	0	; () banked
 17869  001DB4  6FAA               	movwf	(printf@width+1)& (0+255),b
 17870  001DB6  0E00               	movlw	0
 17871  001DB8  6FA9               	movwf	printf@width& (0+255),b
 17872                           
 17873                           ; BSR set to: 0
 17874                           ;doprnt.c: 764: while(width--)
 17875  001DBA  D003               	goto	l6796
 17876  001DBC                     l6794:
 17877                           
 17878                           ; BSR set to: 0
 17879                           ;doprnt.c: 765: (putch(' ') );
 17880  001DBC  0E20               	movlw	32
 17881  001DBE  ECA9  F02E         	call	_putch
 17882  001DC2                     l6796:
 17883  001DC2  0100               	movlb	0	; () banked
 17884  001DC4  07A9               	decf	printf@width& (0+255),f,b
 17885  001DC6  A0D8               	btfss	status,0,c
 17886  001DC8  07AA               	decf	(printf@width+1)& (0+255),f,b
 17887  001DCA  0100               	movlb	0	; () banked
 17888  001DCC  29A9               	incf	printf@width& (0+255),w,b
 17889  001DCE  E1F6               	bnz	l6794
 17890  001DD0  0100               	movlb	0	; () banked
 17891  001DD2  29AA               	incf	(printf@width+1)& (0+255),w,b
 17892  001DD4  B4D8               	btfsc	status,2,c
 17893  001DD6  D017               	goto	l6802
 17894  001DD8  D7F1               	goto	l6794
 17895  001DDA                     l6798:
 17896                           
 17897                           ; BSR set to: 0
 17898                           ;doprnt.c: 768: (putch(*cp++) );
 17899  001DDA  C09F  FFF6         	movff	printf@cp,tblptrl
 17900  001DDE  C0A0  FFF7         	movff	printf@cp+1,tblptrh
 17901  001DE2  0E00               	movlw	low (__mediumconst shr (0+16))
 17902  001DE4  6EF8               	movwf	tblptru,c
 17903  001DE6  0E0F               	movlw	(high __ramtop+-1)
 17904  001DE8  64F7               	cpfsgt	tblptrh,c
 17905  001DEA  D003               	bra	u5477
 17906  001DEC  0008               	tblrd		*
 17907  001DEE  50F5               	movf	tablat,w,c
 17908  001DF0  D005               	bra	u5470
 17909  001DF2                     u5477:
 17910  001DF2  CFF6 FFE9          	movff	tblptrl,fsr0l
 17911  001DF6  CFF7 FFEA          	movff	tblptrh,fsr0h
 17912  001DFA  50EF               	movf	indf0,w,c
 17913  001DFC                     u5470:
 17914  001DFC  ECA9  F02E         	call	_putch
 17915  001E00  0100               	movlb	0	; () banked
 17916  001E02  4B9F               	infsnz	printf@cp& (0+255),f,b
 17917  001E04  2BA0               	incf	(printf@cp+1)& (0+255),f,b
 17918  001E06                     l6802:
 17919                           
 17920                           ; BSR set to: 0
 17921  001E06  0100               	movlb	0	; () banked
 17922  001E08  07A3               	decf	printf@len& (0+255),f,b
 17923  001E0A  A0D8               	btfss	status,0,c
 17924  001E0C  07A4               	decf	(printf@len+1)& (0+255),f,b
 17925  001E0E  0100               	movlb	0	; () banked
 17926  001E10  29A3               	incf	printf@len& (0+255),w,b
 17927  001E12  E1E3               	bnz	l6798
 17928  001E14  0100               	movlb	0	; () banked
 17929  001E16  29A4               	incf	(printf@len+1)& (0+255),w,b
 17930  001E18  B4D8               	btfsc	status,2,c
 17931  001E1A  D10A               	goto	l6880
 17932  001E1C  D7DE               	goto	l6798
 17933  001E1E                     l6804:
 17934                           
 17935                           ; BSR set to: 0
 17936                           ;doprnt.c: 818: flag |= 0x40;
 17937  001E1E  0100               	movlb	0	; () banked
 17938  001E20  8DA7               	bsf	printf@flag& (0+255),6,b
 17939                           
 17940                           ; BSR set to: 0
 17941                           ;doprnt.c: 822: }
 17942                           
 17943                           ;doprnt.c: 819: break;
 17944  001E22  D01D               	goto	l1528
 17945  001E24                     l6808:
 17946  001E24  C08E  FFF6         	movff	printf@f,tblptrl
 17947  001E28  C08F  FFF7         	movff	printf@f+1,tblptrh
 17948  001E2C  0100               	movlb	0	; () banked
 17949  001E2E  4B8E               	infsnz	printf@f& (0+255),f,b
 17950  001E30  2B8F               	incf	(printf@f+1)& (0+255),f,b
 17951  001E32                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17952  001E32  6AF8               	clrf	tblptru,c
 17953  001E34                     	endif
 17954  001E34                     	if	0	;tblptru may be non-zero
 17955  001E34                     	endif
 17956  001E34  0008               	tblrd		*
 17957  001E36  CFF5 F0A8          	movff	tablat,printf@c
 17958  001E3A  0100               	movlb	0	; () banked
 17959  001E3C  51A8               	movf	printf@c& (0+255),w,b
 17960                           
 17961                           ; Switch size 1, requested type "space"
 17962                           ; Number of cases is 5, Range of values is 0 to 117
 17963                           ; switch strategies available:
 17964                           ; Name         Instructions Cycles
 17965                           ; simple_byte           16     9 (average)
 17966                           ;	Chosen strategy is simple_byte
 17967  001E3E  0A00               	xorlw	0	; case 0
 17968  001E40  B4D8               	btfsc	status,2,c
 17969  001E42  0012               	return	
 17970  001E44  0A64               	xorlw	100	; case 100
 17971  001E46  B4D8               	btfsc	status,2,c
 17972  001E48  D00A               	goto	l1528
 17973  001E4A  0A0D               	xorlw	13	; case 105
 17974  001E4C  B4D8               	btfsc	status,2,c
 17975  001E4E  D007               	goto	l1528
 17976  001E50  0A1A               	xorlw	26	; case 115
 17977  001E52  B4D8               	btfsc	status,2,c
 17978  001E54  D758               	goto	l6774
 17979  001E56  0A06               	xorlw	6	; case 117
 17980  001E58  B4D8               	btfsc	status,2,c
 17981  001E5A  D7E1               	goto	l6804
 17982  001E5C  D0E9               	goto	l6880
 17983  001E5E                     l1528:
 17984                           
 17985                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 17986  001E5E  0100               	movlb	0	; () banked
 17987  001E60  BDA7               	btfsc	printf@flag& (0+255),6,b
 17988  001E62  D019               	goto	l6820
 17989                           
 17990                           ; BSR set to: 0
 17991                           ;doprnt.c: 1253: {
 17992                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 17993  001E64  C0A1  FFD9         	movff	printf@ap,fsr2l
 17994  001E68  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 17995  001E6C  CFDE F0A5          	movff	postinc2,printf@val
 17996  001E70  CFDD F0A6          	movff	postdec2,printf@val+1
 17997                           
 17998                           ; BSR set to: 0
 17999  001E74  0E02               	movlw	2
 18000  001E76  0100               	movlb	0	; () banked
 18001  001E78  27A1               	addwf	printf@ap& (0+255),f,b
 18002  001E7A  0E00               	movlw	0
 18003  001E7C  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 18004                           
 18005                           ; BSR set to: 0
 18006                           ;doprnt.c: 1261: if((int)val < 0) {
 18007  001E7E  0100               	movlb	0	; () banked
 18008  001E80  AFA6               	btfss	(printf@val+1)& (0+255),7,b
 18009  001E82  D016               	goto	l6824
 18010                           
 18011                           ; BSR set to: 0
 18012                           ;doprnt.c: 1262: flag |= 0x03;
 18013  001E84  0E03               	movlw	3
 18014  001E86  0100               	movlb	0	; () banked
 18015  001E88  13A7               	iorwf	printf@flag& (0+255),f,b
 18016                           
 18017                           ; BSR set to: 0
 18018                           ;doprnt.c: 1263: val = -val;
 18019  001E8A  0100               	movlb	0	; () banked
 18020  001E8C  6DA5               	negf	printf@val& (0+255),b
 18021  001E8E  1FA6               	comf	(printf@val+1)& (0+255),f,b
 18022  001E90  B0D8               	btfsc	status,0,c
 18023  001E92  2BA6               	incf	(printf@val+1)& (0+255),f,b
 18024                           
 18025                           ; BSR set to: 0
 18026                           ;doprnt.c: 1264: }
 18027                           ;doprnt.c: 1266: }
 18028  001E94  D00D               	goto	l6824
 18029  001E96                     l6820:
 18030                           
 18031                           ; BSR set to: 0
 18032                           ;doprnt.c: 1268: else
 18033                           ;doprnt.c: 1273: {
 18034                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 18035  001E96  C0A1  FFD9         	movff	printf@ap,fsr2l
 18036  001E9A  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 18037  001E9E  CFDE F0A5          	movff	postinc2,printf@val
 18038  001EA2  CFDD F0A6          	movff	postdec2,printf@val+1
 18039                           
 18040                           ; BSR set to: 0
 18041  001EA6  0E02               	movlw	2
 18042  001EA8  0100               	movlb	0	; () banked
 18043  001EAA  27A1               	addwf	printf@ap& (0+255),f,b
 18044  001EAC  0E00               	movlw	0
 18045  001EAE  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 18046  001EB0                     l6824:
 18047                           
 18048                           ; BSR set to: 0
 18049                           ;doprnt.c: 1287: }
 18050                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 18051  001EB0  0E01               	movlw	1
 18052  001EB2  0100               	movlb	0	; () banked
 18053  001EB4  6FA8               	movwf	printf@c& (0+255),b
 18054  001EB6                     l6826:
 18055                           
 18056                           ; BSR set to: 0
 18057  001EB6  0E05               	movlw	5
 18058  001EB8  0100               	movlb	0	; () banked
 18059  001EBA  19A8               	xorwf	printf@c& (0+255),w,b
 18060  001EBC  B4D8               	btfsc	status,2,c
 18061  001EBE  D019               	goto	l6838
 18062                           
 18063                           ; BSR set to: 0
 18064                           ;doprnt.c: 1306: if(val < dpowers[c])
 18065                           
 18066                           ; BSR set to: 0
 18067                           
 18068                           ; BSR set to: 0
 18069  001EC0  0100               	movlb	0	; () banked
 18070  001EC2  51A8               	movf	printf@c& (0+255),w,b
 18071  001EC4  0D02               	mullw	2
 18072  001EC6  0EC0               	movlw	low _dpowers
 18073  001EC8  24F3               	addwf	prodl,w,c
 18074  001ECA  6EF6               	movwf	tblptrl,c
 18075  001ECC  0EFA               	movlw	high _dpowers
 18076  001ECE  20F4               	addwfc	prodh,w,c
 18077  001ED0  6EF7               	movwf	tblptrh,c
 18078  001ED2                     	if	1	;There are 3 active tblptr bytes
 18079  001ED2  6AF8               	clrf	tblptru,c
 18080  001ED4  0E00               	movlw	low (__mediumconst shr (0+16))
 18081  001ED6  22F8               	addwfc	tblptru,f,c
 18082  001ED8                     	endif
 18083  001ED8  0009               	tblrd		*+
 18084  001EDA  50F5               	movf	tablat,w,c
 18085  001EDC  0100               	movlb	0	; () banked
 18086  001EDE  5DA5               	subwf	printf@val& (0+255),w,b
 18087  001EE0  0009               	tblrd		*+
 18088  001EE2  50F5               	movf	tablat,w,c
 18089  001EE4  0100               	movlb	0	; () banked
 18090  001EE6  59A6               	subwfb	(printf@val+1)& (0+255),w,b
 18091  001EE8  A0D8               	btfss	status,0,c
 18092  001EEA  D003               	goto	l6838
 18093                           
 18094                           ; BSR set to: 0
 18095                           
 18096                           ; BSR set to: 0
 18097                           
 18098                           ; BSR set to: 0
 18099                           ;doprnt.c: 1307: break;
 18100  001EEC  0100               	movlb	0	; () banked
 18101  001EEE  2BA8               	incf	printf@c& (0+255),f,b
 18102  001EF0  D7E2               	goto	l6826
 18103  001EF2                     l6838:
 18104                           
 18105                           ; BSR set to: 0
 18106                           ;doprnt.c: 1345: if(width && flag & 0x03)
 18107  001EF2  0100               	movlb	0	; () banked
 18108  001EF4  51A9               	movf	printf@width& (0+255),w,b
 18109  001EF6  0100               	movlb	0	; () banked
 18110  001EF8  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 18111  001EFA  B4D8               	btfsc	status,2,c
 18112  001EFC  D00B               	goto	l6844
 18113                           
 18114                           ; BSR set to: 0
 18115  001EFE  C0A7  F09A         	movff	printf@flag,??_printf
 18116  001F02  0E03               	movlw	3
 18117  001F04  0100               	movlb	0	; () banked
 18118  001F06  179A               	andwf	??_printf& (0+255),f,b
 18119  001F08  B4D8               	btfsc	status,2,c
 18120  001F0A  D004               	goto	l6844
 18121                           
 18122                           ; BSR set to: 0
 18123                           ;doprnt.c: 1346: width--;
 18124  001F0C  0100               	movlb	0	; () banked
 18125  001F0E  07A9               	decf	printf@width& (0+255),f,b
 18126  001F10  A0D8               	btfss	status,0,c
 18127  001F12  07AA               	decf	(printf@width+1)& (0+255),f,b
 18128  001F14                     l6844:
 18129                           
 18130                           ; BSR set to: 0
 18131                           ;doprnt.c: 1381: if(width > c)
 18132  001F14  0E80               	movlw	128
 18133  001F16  0100               	movlb	0	; () banked
 18134  001F18  BFA8               	btfsc	printf@c& (0+255),7,b
 18135  001F1A  0E7F               	movlw	127
 18136  001F1C  0100               	movlb	0	; () banked
 18137  001F1E  6F9A               	movwf	??_printf& (0+255),b
 18138  001F20  0100               	movlb	0	; () banked
 18139  001F22  51A9               	movf	printf@width& (0+255),w,b
 18140  001F24  0100               	movlb	0	; () banked
 18141  001F26  5DA8               	subwf	printf@c& (0+255),w,b
 18142  001F28  0100               	movlb	0	; () banked
 18143  001F2A  51AA               	movf	(printf@width+1)& (0+255),w,b
 18144  001F2C  0A80               	xorlw	128
 18145  001F2E  0100               	movlb	0	; () banked
 18146  001F30  599A               	subwfb	??_printf& (0+255),w,b
 18147  001F32  B0D8               	btfsc	status,0,c
 18148  001F34  D00B               	goto	l6848
 18149                           
 18150                           ; BSR set to: 0
 18151                           ;doprnt.c: 1382: width -= c;
 18152  001F36  0100               	movlb	0	; () banked
 18153  001F38  51A8               	movf	printf@c& (0+255),w,b
 18154  001F3A  0100               	movlb	0	; () banked
 18155  001F3C  5FA9               	subwf	printf@width& (0+255),f,b
 18156  001F3E  0E00               	movlw	0
 18157  001F40  0100               	movlb	0	; () banked
 18158  001F42  BFA8               	btfsc	printf@c& (0+255),7,b
 18159  001F44  0EFF               	movlw	255
 18160  001F46  0100               	movlb	0	; () banked
 18161  001F48  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 18162  001F4A  D005               	goto	l6850
 18163  001F4C                     l6848:
 18164                           
 18165                           ; BSR set to: 0
 18166                           ;doprnt.c: 1383: else
 18167                           ;doprnt.c: 1384: width = 0;
 18168  001F4C  0E00               	movlw	0
 18169  001F4E  0100               	movlb	0	; () banked
 18170  001F50  6FAA               	movwf	(printf@width+1)& (0+255),b
 18171  001F52  0E00               	movlw	0
 18172  001F54  6FA9               	movwf	printf@width& (0+255),b
 18173  001F56                     l6850:
 18174                           
 18175                           ; BSR set to: 0
 18176                           ;doprnt.c: 1387: if(flag & 0x04) {
 18177  001F56  0100               	movlb	0	; () banked
 18178  001F58  A5A7               	btfss	printf@flag& (0+255),2,b
 18179  001F5A  D018               	goto	l6862
 18180                           
 18181                           ; BSR set to: 0
 18182                           ;doprnt.c: 1392: if(flag & 0x03)
 18183  001F5C  C0A7  F09A         	movff	printf@flag,??_printf
 18184  001F60  0E03               	movlw	3
 18185  001F62  0100               	movlb	0	; () banked
 18186  001F64  179A               	andwf	??_printf& (0+255),f,b
 18187  001F66  B4D8               	btfsc	status,2,c
 18188  001F68  D003               	goto	l6856
 18189                           
 18190                           ; BSR set to: 0
 18191                           ;doprnt.c: 1393: (putch('-') );
 18192  001F6A  0E2D               	movlw	45
 18193  001F6C  ECA9  F02E         	call	_putch
 18194  001F70                     l6856:
 18195                           
 18196                           ;doprnt.c: 1415: if(width)
 18197  001F70  0100               	movlb	0	; () banked
 18198  001F72  51A9               	movf	printf@width& (0+255),w,b
 18199  001F74  0100               	movlb	0	; () banked
 18200  001F76  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 18201  001F78  B4D8               	btfsc	status,2,c
 18202  001F7A  D025               	goto	l6872
 18203                           
 18204                           ; BSR set to: 0
 18205                           ;doprnt.c: 1417: (putch('0') );
 18206                           
 18207                           ; BSR set to: 0
 18208                           
 18209                           ;doprnt.c: 1416: do
 18210  001F7C  0E30               	movlw	48
 18211  001F7E  ECA9  F02E         	call	_putch
 18212                           
 18213                           ;doprnt.c: 1418: while(--width);
 18214  001F82  0100               	movlb	0	; () banked
 18215  001F84  07A9               	decf	printf@width& (0+255),f,b
 18216  001F86  A0D8               	btfss	status,0,c
 18217  001F88  07AA               	decf	(printf@width+1)& (0+255),f,b
 18218  001F8A  D7F2               	goto	l6856
 18219  001F8C                     l6862:
 18220                           
 18221                           ; BSR set to: 0
 18222                           ;doprnt.c: 1422: {
 18223                           ;doprnt.c: 1424: if(width
 18224                           ;doprnt.c: 1428: )
 18225  001F8C  0100               	movlb	0	; () banked
 18226  001F8E  51A9               	movf	printf@width& (0+255),w,b
 18227  001F90  0100               	movlb	0	; () banked
 18228  001F92  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 18229  001F94  B4D8               	btfsc	status,2,c
 18230  001F96  D00D               	goto	l6868
 18231  001F98                     l6864:
 18232                           
 18233                           ; BSR set to: 0
 18234                           ;doprnt.c: 1430: (putch(' ') );
 18235  001F98  0E20               	movlw	32
 18236  001F9A  ECA9  F02E         	call	_putch
 18237                           
 18238                           ;doprnt.c: 1431: while(--width);
 18239  001F9E  0100               	movlb	0	; () banked
 18240  001FA0  07A9               	decf	printf@width& (0+255),f,b
 18241  001FA2  A0D8               	btfss	status,0,c
 18242  001FA4  07AA               	decf	(printf@width+1)& (0+255),f,b
 18243  001FA6  0100               	movlb	0	; () banked
 18244  001FA8  51A9               	movf	printf@width& (0+255),w,b
 18245  001FAA  0100               	movlb	0	; () banked
 18246  001FAC  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 18247  001FAE  A4D8               	btfss	status,2,c
 18248  001FB0  D7F3               	goto	l6864
 18249  001FB2                     l6868:
 18250                           
 18251                           ; BSR set to: 0
 18252                           ;doprnt.c: 1438: if(flag & 0x03)
 18253  001FB2  C0A7  F09A         	movff	printf@flag,??_printf
 18254  001FB6  0E03               	movlw	3
 18255  001FB8  0100               	movlb	0	; () banked
 18256  001FBA  179A               	andwf	??_printf& (0+255),f,b
 18257  001FBC  B4D8               	btfsc	status,2,c
 18258  001FBE  D003               	goto	l6872
 18259                           
 18260                           ; BSR set to: 0
 18261                           ;doprnt.c: 1439: (putch('-') );
 18262  001FC0  0E2D               	movlw	45
 18263  001FC2  ECA9  F02E         	call	_putch
 18264  001FC6                     l6872:
 18265                           
 18266                           ;doprnt.c: 1469: }
 18267                           ;doprnt.c: 1472: prec = c;
 18268  001FC6  C0A8  F09E         	movff	printf@c,printf@prec
 18269                           
 18270                           ;doprnt.c: 1474: while(prec--) {
 18271  001FCA  D02C               	goto	l6878
 18272  001FCC                     l6874:
 18273                           
 18274                           ;doprnt.c: 1478: {
 18275                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 18276  001FCC  0100               	movlb	0	; () banked
 18277  001FCE  519E               	movf	printf@prec& (0+255),w,b
 18278  001FD0  0D02               	mullw	2
 18279  001FD2  0EC0               	movlw	low _dpowers
 18280  001FD4  24F3               	addwf	prodl,w,c
 18281  001FD6  6EF6               	movwf	tblptrl,c
 18282  001FD8  0EFA               	movlw	high _dpowers
 18283  001FDA  20F4               	addwfc	prodh,w,c
 18284  001FDC  6EF7               	movwf	tblptrh,c
 18285  001FDE                     	if	1	;There are 3 active tblptr bytes
 18286  001FDE  6AF8               	clrf	tblptru,c
 18287  001FE0  0E00               	movlw	low (__mediumconst shr (0+16))
 18288  001FE2  22F8               	addwfc	tblptru,f,c
 18289  001FE4                     	endif
 18290  001FE4  0009               	tblrd		*+
 18291  001FE6  CFF5 F082          	movff	tablat,___lwdiv@divisor
 18292  001FEA  000A               	tblrd		*-
 18293  001FEC  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
 18294  001FF0  C0A5  F080         	movff	printf@val,___lwdiv@dividend
 18295  001FF4  C0A6  F081         	movff	printf@val+1,___lwdiv@dividend+1
 18296  001FF8  EC45  F028         	call	___lwdiv	;wreg free
 18297  001FFC  C080  F087         	movff	?___lwdiv,___lwmod@dividend
 18298  002000  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
 18299  002004  0E00               	movlw	0
 18300  002006  0100               	movlb	0	; () banked
 18301  002008  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
 18302  00200A  0E0A               	movlw	10
 18303  00200C  6F89               	movwf	___lwmod@divisor& (0+255),b
 18304  00200E  ECC7  F029         	call	___lwmod	;wreg free
 18305  002012  0100               	movlb	0	; () banked
 18306  002014  5187               	movf	?___lwmod& (0+255),w,b
 18307  002016  0F30               	addlw	48
 18308  002018  0100               	movlb	0	; () banked
 18309  00201A  6FA8               	movwf	printf@c& (0+255),b
 18310                           
 18311                           ; BSR set to: 0
 18312                           ;doprnt.c: 1523: }
 18313                           ;doprnt.c: 1524: (putch(c) );
 18314  00201C  0100               	movlb	0	; () banked
 18315  00201E  51A8               	movf	printf@c& (0+255),w,b
 18316  002020  ECA9  F02E         	call	_putch
 18317  002024                     l6878:
 18318  002024  0100               	movlb	0	; () banked
 18319  002026  079E               	decf	printf@prec& (0+255),f,b
 18320  002028  0100               	movlb	0	; () banked
 18321  00202A  299E               	incf	printf@prec& (0+255),w,b
 18322  00202C  A4D8               	btfss	status,2,c
 18323  00202E  D7CE               	goto	l6874
 18324  002030                     l6880:
 18325  002030  C08E  FFF6         	movff	printf@f,tblptrl
 18326  002034  C08F  FFF7         	movff	printf@f+1,tblptrh
 18327  002038  0100               	movlb	0	; () banked
 18328  00203A  4B8E               	infsnz	printf@f& (0+255),f,b
 18329  00203C  2B8F               	incf	(printf@f+1)& (0+255),f,b
 18330  00203E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 18331  00203E  6AF8               	clrf	tblptru,c
 18332  002040                     	endif
 18333  002040                     	if	0	;tblptru may be non-zero
 18334  002040                     	endif
 18335  002040  0008               	tblrd		*
 18336  002042  CFF5 F0A8          	movff	tablat,printf@c
 18337  002046  0100               	movlb	0	; () banked
 18338  002048  51A8               	movf	printf@c& (0+255),w,b
 18339  00204A  B4D8               	btfsc	status,2,c
 18340  00204C  0012               	return	
 18341  00204E  D5EB               	goto	l6750
 18342  002050                     __end_of_printf:
 18343                           	opt stack 0
 18344                           tblptru	equ	0xFF8
 18345                           tblptrh	equ	0xFF7
 18346                           tblptrl	equ	0xFF6
 18347                           tablat	equ	0xFF5
 18348                           prodh	equ	0xFF4
 18349                           prodl	equ	0xFF3
 18350                           intcon	equ	0xFF2
 18351                           intcon2	equ	0xFF1
 18352                           intcon3	equ	0xFF0
 18353                           indf0	equ	0xFEF
 18354                           postinc0	equ	0xFEE
 18355                           fsr0h	equ	0xFEA
 18356                           fsr0l	equ	0xFE9
 18357                           wreg	equ	0xFE8
 18358                           postdec1	equ	0xFE5
 18359                           fsr1l	equ	0xFE1
 18360                           indf2	equ	0xFDF
 18361                           postinc2	equ	0xFDE
 18362                           postdec2	equ	0xFDD
 18363                           fsr2h	equ	0xFDA
 18364                           fsr2l	equ	0xFD9
 18365                           status	equ	0xFD8
 18366                           
 18367 ;; *************** function _putch *****************
 18368 ;; Defined at:
 18369 ;;		line 20 in file "lcd.c"
 18370 ;; Parameters:    Size  Location     Type
 18371 ;;  data            1    wreg     unsigned char 
 18372 ;; Auto vars:     Size  Location     Type
 18373 ;;  data            1    2[BANK0 ] unsigned char 
 18374 ;; Return value:  Size  Location     Type
 18375 ;;                  1    wreg      void 
 18376 ;; Registers used:
 18377 ;;		wreg, status,2, status,0, cstack
 18378 ;; Tracked objects:
 18379 ;;		On entry : 0/0
 18380 ;;		On exit  : 0/0
 18381 ;;		Unchanged: 0/0
 18382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18383 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18384 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18385 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18386 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18387 ;;Total ram usage:        1 bytes
 18388 ;; Hardware stack levels used:    1
 18389 ;; Hardware stack levels required when called:    8
 18390 ;; This function calls:
 18391 ;;		_lcdNibble
 18392 ;; This function is called by:
 18393 ;;		_printf
 18394 ;; This function uses a non-reentrant model
 18395 ;;
 18396                           
 18397                           	psect	text57
 18398  005D52                     __ptext57:
 18399                           	opt stack 0
 18400  005D52                     _putch:
 18401                           	opt stack 18
 18402                           
 18403                           ;incstack = 0
 18404                           ;putch@data stored from wreg
 18405  005D52  0100               	movlb	0	; () banked
 18406  005D54  6F82               	movwf	putch@data& (0+255),b
 18407                           
 18408                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 18409  005D56  848C               	bsf	3980,2,c	;volatile
 18410                           
 18411                           ;lcd.c: 22: lcdNibble(data);
 18412  005D58  0100               	movlb	0	; () banked
 18413  005D5A  5182               	movf	putch@data& (0+255),w,b
 18414  005D5C  EC2B  F029         	call	_lcdNibble
 18415  005D60  0012               	return		;funcret
 18416  005D62                     __end_of_putch:
 18417                           	opt stack 0
 18418                           tblptru	equ	0xFF8
 18419                           tblptrh	equ	0xFF7
 18420                           tblptrl	equ	0xFF6
 18421                           tablat	equ	0xFF5
 18422                           prodh	equ	0xFF4
 18423                           prodl	equ	0xFF3
 18424                           intcon	equ	0xFF2
 18425                           intcon2	equ	0xFF1
 18426                           intcon3	equ	0xFF0
 18427                           indf0	equ	0xFEF
 18428                           postinc0	equ	0xFEE
 18429                           fsr0h	equ	0xFEA
 18430                           fsr0l	equ	0xFE9
 18431                           wreg	equ	0xFE8
 18432                           postdec1	equ	0xFE5
 18433                           fsr1l	equ	0xFE1
 18434                           indf2	equ	0xFDF
 18435                           postinc2	equ	0xFDE
 18436                           postdec2	equ	0xFDD
 18437                           fsr2h	equ	0xFDA
 18438                           fsr2l	equ	0xFD9
 18439                           status	equ	0xFD8
 18440                           
 18441 ;; *************** function _isdigit *****************
 18442 ;; Defined at:
 18443 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 18444 ;; Parameters:    Size  Location     Type
 18445 ;;  c               1    wreg     unsigned char 
 18446 ;; Auto vars:     Size  Location     Type
 18447 ;;  c               1    2[BANK0 ] unsigned char 
 18448 ;; Return value:  Size  Location     Type
 18449 ;;		None               void
 18450 ;; Registers used:
 18451 ;;		wreg, status,2, status,0
 18452 ;; Tracked objects:
 18453 ;;		On entry : 0/0
 18454 ;;		On exit  : 0/0
 18455 ;;		Unchanged: 0/0
 18456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18457 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18458 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18459 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18460 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18461 ;;Total ram usage:        3 bytes
 18462 ;; Hardware stack levels used:    1
 18463 ;; Hardware stack levels required when called:    7
 18464 ;; This function calls:
 18465 ;;		Nothing
 18466 ;; This function is called by:
 18467 ;;		_printf
 18468 ;; This function uses a non-reentrant model
 18469 ;;
 18470                           
 18471                           	psect	text58
 18472  005B64                     __ptext58:
 18473                           	opt stack 0
 18474  005B64                     _isdigit:
 18475                           	opt stack 19
 18476                           
 18477                           ;incstack = 0
 18478                           ;isdigit@c stored from wreg
 18479  005B64  0100               	movlb	0	; () banked
 18480  005B66  6F82               	movwf	isdigit@c& (0+255),b
 18481  005B68  0E00               	movlw	0
 18482  005B6A  0100               	movlb	0	; () banked
 18483  005B6C  6F81               	movwf	_isdigit$2066& (0+255),b
 18484                           
 18485                           ; BSR set to: 0
 18486  005B6E  0E3A               	movlw	58
 18487  005B70  0100               	movlb	0	; () banked
 18488  005B72  6182               	cpfslt	isdigit@c& (0+255),b
 18489  005B74  D007               	goto	l6598
 18490                           
 18491                           ; BSR set to: 0
 18492  005B76  0E2F               	movlw	47
 18493  005B78  0100               	movlb	0	; () banked
 18494  005B7A  6582               	cpfsgt	isdigit@c& (0+255),b
 18495  005B7C  D003               	goto	l6598
 18496                           
 18497                           ; BSR set to: 0
 18498  005B7E  0E01               	movlw	1
 18499  005B80  0100               	movlb	0	; () banked
 18500  005B82  6F81               	movwf	_isdigit$2066& (0+255),b
 18501  005B84                     l6598:
 18502                           
 18503                           ; BSR set to: 0
 18504  005B84  C081  F080         	movff	_isdigit$2066,??_isdigit
 18505  005B88  0100               	movlb	0	; () banked
 18506  005B8A  3180               	rrcf	??_isdigit& (0+255),w,b
 18507  005B8C  0012               	return	
 18508  005B8E                     __end_of_isdigit:
 18509                           	opt stack 0
 18510                           tblptru	equ	0xFF8
 18511                           tblptrh	equ	0xFF7
 18512                           tblptrl	equ	0xFF6
 18513                           tablat	equ	0xFF5
 18514                           prodh	equ	0xFF4
 18515                           prodl	equ	0xFF3
 18516                           intcon	equ	0xFF2
 18517                           intcon2	equ	0xFF1
 18518                           intcon3	equ	0xFF0
 18519                           indf0	equ	0xFEF
 18520                           postinc0	equ	0xFEE
 18521                           fsr0h	equ	0xFEA
 18522                           fsr0l	equ	0xFE9
 18523                           wreg	equ	0xFE8
 18524                           postdec1	equ	0xFE5
 18525                           fsr1l	equ	0xFE1
 18526                           indf2	equ	0xFDF
 18527                           postinc2	equ	0xFDE
 18528                           postdec2	equ	0xFDD
 18529                           fsr2h	equ	0xFDA
 18530                           fsr2l	equ	0xFD9
 18531                           status	equ	0xFD8
 18532                           
 18533 ;; *************** function ___wmul *****************
 18534 ;; Defined at:
 18535 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 18536 ;; Parameters:    Size  Location     Type
 18537 ;;  multiplier      2    0[BANK0 ] unsigned int 
 18538 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 18539 ;; Auto vars:     Size  Location     Type
 18540 ;;  product         2    4[BANK0 ] unsigned int 
 18541 ;; Return value:  Size  Location     Type
 18542 ;;                  2    0[BANK0 ] unsigned int 
 18543 ;; Registers used:
 18544 ;;		wreg, status,2, status,0, prodl, prodh
 18545 ;; Tracked objects:
 18546 ;;		On entry : 0/0
 18547 ;;		On exit  : 0/0
 18548 ;;		Unchanged: 0/0
 18549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18550 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18551 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18552 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18553 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18554 ;;Total ram usage:        6 bytes
 18555 ;; Hardware stack levels used:    1
 18556 ;; Hardware stack levels required when called:    7
 18557 ;; This function calls:
 18558 ;;		Nothing
 18559 ;; This function is called by:
 18560 ;;		_printf
 18561 ;; This function uses a non-reentrant model
 18562 ;;
 18563                           
 18564                           	psect	text59
 18565  005836                     __ptext59:
 18566                           	opt stack 0
 18567  005836                     ___wmul:
 18568                           	opt stack 19
 18569                           
 18570                           ; BSR set to: 0
 18571                           ;incstack = 0
 18572  005836  0100               	movlb	0	; () banked
 18573  005838  5180               	movf	___wmul@multiplier& (0+255),w,b
 18574  00583A  0100               	movlb	0	; () banked
 18575  00583C  0382               	mulwf	___wmul@multiplicand& (0+255),b
 18576  00583E  CFF3 F084          	movff	prodl,___wmul@product
 18577  005842  CFF4 F085          	movff	prodh,___wmul@product+1
 18578  005846  0100               	movlb	0	; () banked
 18579  005848  5180               	movf	___wmul@multiplier& (0+255),w,b
 18580  00584A  0100               	movlb	0	; () banked
 18581  00584C  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 18582  00584E  50F3               	movf	prodl,w,c
 18583  005850  0100               	movlb	0	; () banked
 18584  005852  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 18585  005854  0100               	movlb	0	; () banked
 18586  005856  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
 18587  005858  0100               	movlb	0	; () banked
 18588  00585A  0382               	mulwf	___wmul@multiplicand& (0+255),b
 18589  00585C  50F3               	movf	prodl,w,c
 18590  00585E  0100               	movlb	0	; () banked
 18591  005860  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 18592                           
 18593                           ; BSR set to: 0
 18594  005862  C084  F080         	movff	___wmul@product,?___wmul
 18595  005866  C085  F081         	movff	___wmul@product+1,?___wmul+1
 18596  00586A  0012               	return	
 18597  00586C                     __end_of___wmul:
 18598                           	opt stack 0
 18599                           tblptru	equ	0xFF8
 18600                           tblptrh	equ	0xFF7
 18601                           tblptrl	equ	0xFF6
 18602                           tablat	equ	0xFF5
 18603                           prodh	equ	0xFF4
 18604                           prodl	equ	0xFF3
 18605                           intcon	equ	0xFF2
 18606                           intcon2	equ	0xFF1
 18607                           intcon3	equ	0xFF0
 18608                           indf0	equ	0xFEF
 18609                           postinc0	equ	0xFEE
 18610                           fsr0h	equ	0xFEA
 18611                           fsr0l	equ	0xFE9
 18612                           wreg	equ	0xFE8
 18613                           postdec1	equ	0xFE5
 18614                           fsr1l	equ	0xFE1
 18615                           indf2	equ	0xFDF
 18616                           postinc2	equ	0xFDE
 18617                           postdec2	equ	0xFDD
 18618                           fsr2h	equ	0xFDA
 18619                           fsr2l	equ	0xFD9
 18620                           status	equ	0xFD8
 18621                           
 18622 ;; *************** function ___lwmod *****************
 18623 ;; Defined at:
 18624 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 18625 ;; Parameters:    Size  Location     Type
 18626 ;;  dividend        2    7[BANK0 ] unsigned int 
 18627 ;;  divisor         2    9[BANK0 ] unsigned int 
 18628 ;; Auto vars:     Size  Location     Type
 18629 ;;  counter         1   11[BANK0 ] unsigned char 
 18630 ;; Return value:  Size  Location     Type
 18631 ;;                  2    7[BANK0 ] unsigned int 
 18632 ;; Registers used:
 18633 ;;		wreg, status,2, status,0
 18634 ;; Tracked objects:
 18635 ;;		On entry : 0/0
 18636 ;;		On exit  : 0/0
 18637 ;;		Unchanged: 0/0
 18638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18639 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18640 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18641 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18642 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18643 ;;Total ram usage:        5 bytes
 18644 ;; Hardware stack levels used:    1
 18645 ;; Hardware stack levels required when called:    7
 18646 ;; This function calls:
 18647 ;;		Nothing
 18648 ;; This function is called by:
 18649 ;;		_printf
 18650 ;; This function uses a non-reentrant model
 18651 ;;
 18652                           
 18653                           	psect	text60
 18654  00538E                     __ptext60:
 18655                           	opt stack 0
 18656  00538E                     ___lwmod:
 18657                           	opt stack 19
 18658                           
 18659                           ; BSR set to: 0
 18660                           ;incstack = 0
 18661  00538E  0100               	movlb	0	; () banked
 18662  005390  5189               	movf	___lwmod@divisor& (0+255),w,b
 18663  005392  0100               	movlb	0	; () banked
 18664  005394  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 18665  005396  B4D8               	btfsc	status,2,c
 18666  005398  D026               	goto	l1985
 18667                           
 18668                           ; BSR set to: 0
 18669  00539A  0E01               	movlw	1
 18670  00539C  0100               	movlb	0	; () banked
 18671  00539E  6F8B               	movwf	___lwmod@counter& (0+255),b
 18672  0053A0  D006               	goto	l6636
 18673  0053A2                     l6634:
 18674                           
 18675                           ; BSR set to: 0
 18676  0053A2  0100               	movlb	0	; () banked
 18677  0053A4  90D8               	bcf	status,0,c
 18678  0053A6  3789               	rlcf	___lwmod@divisor& (0+255),f,b
 18679  0053A8  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 18680  0053AA  0100               	movlb	0	; () banked
 18681  0053AC  2B8B               	incf	___lwmod@counter& (0+255),f,b
 18682  0053AE                     l6636:
 18683                           
 18684                           ; BSR set to: 0
 18685  0053AE  0100               	movlb	0	; () banked
 18686  0053B0  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 18687  0053B2  D7F7               	goto	l6634
 18688  0053B4                     l6638:
 18689                           
 18690                           ; BSR set to: 0
 18691  0053B4  0100               	movlb	0	; () banked
 18692  0053B6  5189               	movf	___lwmod@divisor& (0+255),w,b
 18693  0053B8  0100               	movlb	0	; () banked
 18694  0053BA  5D87               	subwf	___lwmod@dividend& (0+255),w,b
 18695  0053BC  0100               	movlb	0	; () banked
 18696  0053BE  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 18697  0053C0  0100               	movlb	0	; () banked
 18698  0053C2  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 18699  0053C4  A0D8               	btfss	status,0,c
 18700  0053C6  D008               	goto	l6642
 18701                           
 18702                           ; BSR set to: 0
 18703  0053C8  0100               	movlb	0	; () banked
 18704  0053CA  5189               	movf	___lwmod@divisor& (0+255),w,b
 18705  0053CC  0100               	movlb	0	; () banked
 18706  0053CE  5F87               	subwf	___lwmod@dividend& (0+255),f,b
 18707  0053D0  0100               	movlb	0	; () banked
 18708  0053D2  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 18709  0053D4  0100               	movlb	0	; () banked
 18710  0053D6  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 18711  0053D8                     l6642:
 18712                           
 18713                           ; BSR set to: 0
 18714  0053D8  0100               	movlb	0	; () banked
 18715  0053DA  90D8               	bcf	status,0,c
 18716  0053DC  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 18717  0053DE  3389               	rrcf	___lwmod@divisor& (0+255),f,b
 18718                           
 18719                           ; BSR set to: 0
 18720  0053E0  0100               	movlb	0	; () banked
 18721  0053E2  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
 18722  0053E4  D7E7               	goto	l6638
 18723  0053E6                     l1985:
 18724                           
 18725                           ; BSR set to: 0
 18726  0053E6  C087  F087         	movff	___lwmod@dividend,?___lwmod
 18727  0053EA  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
 18728                           
 18729                           ; BSR set to: 0
 18730  0053EE  0012               	return		;funcret
 18731  0053F0                     __end_of___lwmod:
 18732                           	opt stack 0
 18733                           tblptru	equ	0xFF8
 18734                           tblptrh	equ	0xFF7
 18735                           tblptrl	equ	0xFF6
 18736                           tablat	equ	0xFF5
 18737                           prodh	equ	0xFF4
 18738                           prodl	equ	0xFF3
 18739                           intcon	equ	0xFF2
 18740                           intcon2	equ	0xFF1
 18741                           intcon3	equ	0xFF0
 18742                           indf0	equ	0xFEF
 18743                           postinc0	equ	0xFEE
 18744                           fsr0h	equ	0xFEA
 18745                           fsr0l	equ	0xFE9
 18746                           wreg	equ	0xFE8
 18747                           postdec1	equ	0xFE5
 18748                           fsr1l	equ	0xFE1
 18749                           indf2	equ	0xFDF
 18750                           postinc2	equ	0xFDE
 18751                           postdec2	equ	0xFDD
 18752                           fsr2h	equ	0xFDA
 18753                           fsr2l	equ	0xFD9
 18754                           status	equ	0xFD8
 18755                           
 18756 ;; *************** function ___lwdiv *****************
 18757 ;; Defined at:
 18758 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 18759 ;; Parameters:    Size  Location     Type
 18760 ;;  dividend        2    0[BANK0 ] unsigned int 
 18761 ;;  divisor         2    2[BANK0 ] unsigned int 
 18762 ;; Auto vars:     Size  Location     Type
 18763 ;;  quotient        2    4[BANK0 ] unsigned int 
 18764 ;;  counter         1    6[BANK0 ] unsigned char 
 18765 ;; Return value:  Size  Location     Type
 18766 ;;                  2    0[BANK0 ] unsigned int 
 18767 ;; Registers used:
 18768 ;;		wreg, status,2, status,0
 18769 ;; Tracked objects:
 18770 ;;		On entry : 0/0
 18771 ;;		On exit  : 0/0
 18772 ;;		Unchanged: 0/0
 18773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18774 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18775 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18776 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18777 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18778 ;;Total ram usage:        7 bytes
 18779 ;; Hardware stack levels used:    1
 18780 ;; Hardware stack levels required when called:    7
 18781 ;; This function calls:
 18782 ;;		Nothing
 18783 ;; This function is called by:
 18784 ;;		_printf
 18785 ;; This function uses a non-reentrant model
 18786 ;;
 18787                           
 18788                           	psect	text61
 18789  00508A                     __ptext61:
 18790                           	opt stack 0
 18791  00508A                     ___lwdiv:
 18792                           	opt stack 19
 18793                           
 18794                           ; BSR set to: 0
 18795                           ;incstack = 0
 18796  00508A  0E00               	movlw	0
 18797  00508C  0100               	movlb	0	; () banked
 18798  00508E  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
 18799  005090  0E00               	movlw	0
 18800  005092  6F84               	movwf	___lwdiv@quotient& (0+255),b
 18801                           
 18802                           ; BSR set to: 0
 18803  005094  0100               	movlb	0	; () banked
 18804  005096  5182               	movf	___lwdiv@divisor& (0+255),w,b
 18805  005098  0100               	movlb	0	; () banked
 18806  00509A  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 18807  00509C  B4D8               	btfsc	status,2,c
 18808  00509E  D02C               	goto	l1975
 18809                           
 18810                           ; BSR set to: 0
 18811  0050A0  0E01               	movlw	1
 18812  0050A2  0100               	movlb	0	; () banked
 18813  0050A4  6F86               	movwf	___lwdiv@counter& (0+255),b
 18814  0050A6  D006               	goto	l6616
 18815  0050A8                     l6614:
 18816                           
 18817                           ; BSR set to: 0
 18818  0050A8  0100               	movlb	0	; () banked
 18819  0050AA  90D8               	bcf	status,0,c
 18820  0050AC  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
 18821  0050AE  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 18822  0050B0  0100               	movlb	0	; () banked
 18823  0050B2  2B86               	incf	___lwdiv@counter& (0+255),f,b
 18824  0050B4                     l6616:
 18825                           
 18826                           ; BSR set to: 0
 18827  0050B4  0100               	movlb	0	; () banked
 18828  0050B6  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 18829  0050B8  D7F7               	goto	l6614
 18830  0050BA                     l6618:
 18831                           
 18832                           ; BSR set to: 0
 18833  0050BA  0100               	movlb	0	; () banked
 18834  0050BC  90D8               	bcf	status,0,c
 18835  0050BE  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
 18836  0050C0  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 18837                           
 18838                           ; BSR set to: 0
 18839  0050C2  0100               	movlb	0	; () banked
 18840  0050C4  5182               	movf	___lwdiv@divisor& (0+255),w,b
 18841  0050C6  0100               	movlb	0	; () banked
 18842  0050C8  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
 18843  0050CA  0100               	movlb	0	; () banked
 18844  0050CC  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 18845  0050CE  0100               	movlb	0	; () banked
 18846  0050D0  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 18847  0050D2  A0D8               	btfss	status,0,c
 18848  0050D4  D00A               	goto	l6626
 18849                           
 18850                           ; BSR set to: 0
 18851  0050D6  0100               	movlb	0	; () banked
 18852  0050D8  5182               	movf	___lwdiv@divisor& (0+255),w,b
 18853  0050DA  0100               	movlb	0	; () banked
 18854  0050DC  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
 18855  0050DE  0100               	movlb	0	; () banked
 18856  0050E0  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 18857  0050E2  0100               	movlb	0	; () banked
 18858  0050E4  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 18859                           
 18860                           ; BSR set to: 0
 18861  0050E6  0100               	movlb	0	; () banked
 18862  0050E8  8184               	bsf	___lwdiv@quotient& (0+255),0,b
 18863  0050EA                     l6626:
 18864                           
 18865                           ; BSR set to: 0
 18866  0050EA  0100               	movlb	0	; () banked
 18867  0050EC  90D8               	bcf	status,0,c
 18868  0050EE  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 18869  0050F0  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
 18870                           
 18871                           ; BSR set to: 0
 18872  0050F2  0100               	movlb	0	; () banked
 18873  0050F4  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
 18874  0050F6  D7E1               	goto	l6618
 18875  0050F8                     l1975:
 18876                           
 18877                           ; BSR set to: 0
 18878  0050F8  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
 18879  0050FC  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
 18880                           
 18881                           ; BSR set to: 0
 18882  005100  0012               	return		;funcret
 18883  005102                     __end_of___lwdiv:
 18884                           	opt stack 0
 18885                           tblptru	equ	0xFF8
 18886                           tblptrh	equ	0xFF7
 18887                           tblptrl	equ	0xFF6
 18888                           tablat	equ	0xFF5
 18889                           prodh	equ	0xFF4
 18890                           prodl	equ	0xFF3
 18891                           intcon	equ	0xFF2
 18892                           intcon2	equ	0xFF1
 18893                           intcon3	equ	0xFF0
 18894                           indf0	equ	0xFEF
 18895                           postinc0	equ	0xFEE
 18896                           fsr0h	equ	0xFEA
 18897                           fsr0l	equ	0xFE9
 18898                           wreg	equ	0xFE8
 18899                           postdec1	equ	0xFE5
 18900                           fsr1l	equ	0xFE1
 18901                           indf2	equ	0xFDF
 18902                           postinc2	equ	0xFDE
 18903                           postdec2	equ	0xFDD
 18904                           fsr2h	equ	0xFDA
 18905                           fsr2l	equ	0xFD9
 18906                           status	equ	0xFD8
 18907                           
 18908 ;; *************** function _lcdInst *****************
 18909 ;; Defined at:
 18910 ;;		line 15 in file "lcd.c"
 18911 ;; Parameters:    Size  Location     Type
 18912 ;;  data            1    wreg     unsigned char 
 18913 ;; Auto vars:     Size  Location     Type
 18914 ;;  data            1    2[BANK0 ] unsigned char 
 18915 ;; Return value:  Size  Location     Type
 18916 ;;                  1    wreg      void 
 18917 ;; Registers used:
 18918 ;;		wreg, status,2, status,0, cstack
 18919 ;; Tracked objects:
 18920 ;;		On entry : 0/0
 18921 ;;		On exit  : 0/0
 18922 ;;		Unchanged: 0/0
 18923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18924 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18925 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18926 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18927 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18928 ;;Total ram usage:        1 bytes
 18929 ;; Hardware stack levels used:    1
 18930 ;; Hardware stack levels required when called:    8
 18931 ;; This function calls:
 18932 ;;		_lcdNibble
 18933 ;; This function is called by:
 18934 ;;		_UI
 18935 ;;		_change_state_to_menu_start
 18936 ;;		_change_state_to_menu_12
 18937 ;;		_change_state_to_menu_22
 18938 ;;		_initLCD
 18939 ;;		_printRTC
 18940 ;;		_Loading
 18941 ;;		_EEPROM_write
 18942 ;;		_Test
 18943 ;;		_algorithmTest
 18944 ;;		_sensorTest
 18945 ;;		_actuatorTest
 18946 ;;		_BothServos
 18947 ;;		_PortTestDC
 18948 ;;		_PlatformTest
 18949 ;;		_SpeedTest
 18950 ;;		_BlockerTest
 18951 ;;		_arm
 18952 ;;		_PortTestPusher
 18953 ;; This function uses a non-reentrant model
 18954 ;;
 18955                           
 18956                           	psect	text62
 18957  005D62                     __ptext62:
 18958                           	opt stack 0
 18959  005D62                     _lcdInst:
 18960                           	opt stack 20
 18961                           
 18962                           ; BSR set to: 0
 18963                           ;incstack = 0
 18964                           ;lcdInst@data stored from wreg
 18965  005D62  0100               	movlb	0	; () banked
 18966  005D64  6F82               	movwf	lcdInst@data& (0+255),b
 18967                           
 18968                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 18969  005D66  948C               	bcf	3980,2,c	;volatile
 18970                           
 18971                           ;lcd.c: 17: lcdNibble(data);
 18972  005D68  0100               	movlb	0	; () banked
 18973  005D6A  5182               	movf	lcdInst@data& (0+255),w,b
 18974  005D6C  EC2B  F029         	call	_lcdNibble
 18975  005D70  0012               	return		;funcret
 18976  005D72                     __end_of_lcdInst:
 18977                           	opt stack 0
 18978                           tblptru	equ	0xFF8
 18979                           tblptrh	equ	0xFF7
 18980                           tblptrl	equ	0xFF6
 18981                           tablat	equ	0xFF5
 18982                           prodh	equ	0xFF4
 18983                           prodl	equ	0xFF3
 18984                           intcon	equ	0xFF2
 18985                           intcon2	equ	0xFF1
 18986                           intcon3	equ	0xFF0
 18987                           indf0	equ	0xFEF
 18988                           postinc0	equ	0xFEE
 18989                           fsr0h	equ	0xFEA
 18990                           fsr0l	equ	0xFE9
 18991                           wreg	equ	0xFE8
 18992                           postdec1	equ	0xFE5
 18993                           fsr1l	equ	0xFE1
 18994                           indf2	equ	0xFDF
 18995                           postinc2	equ	0xFDE
 18996                           postdec2	equ	0xFDD
 18997                           fsr2h	equ	0xFDA
 18998                           fsr2l	equ	0xFD9
 18999                           status	equ	0xFD8
 19000                           
 19001 ;; *************** function _lcdNibble *****************
 19002 ;; Defined at:
 19003 ;;		line 25 in file "lcd.c"
 19004 ;; Parameters:    Size  Location     Type
 19005 ;;  data            1    wreg     unsigned char 
 19006 ;; Auto vars:     Size  Location     Type
 19007 ;;  data            1    1[BANK0 ] unsigned char 
 19008 ;;  temp            1    0[BANK0 ] unsigned char 
 19009 ;; Return value:  Size  Location     Type
 19010 ;;                  1    wreg      void 
 19011 ;; Registers used:
 19012 ;;		wreg, status,2, status,0
 19013 ;; Tracked objects:
 19014 ;;		On entry : 0/0
 19015 ;;		On exit  : 0/0
 19016 ;;		Unchanged: 0/0
 19017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19018 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19019 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19020 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19021 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19022 ;;Total ram usage:        2 bytes
 19023 ;; Hardware stack levels used:    1
 19024 ;; Hardware stack levels required when called:    7
 19025 ;; This function calls:
 19026 ;;		Nothing
 19027 ;; This function is called by:
 19028 ;;		_lcdInst
 19029 ;;		_putch
 19030 ;; This function uses a non-reentrant model
 19031 ;;
 19032                           
 19033                           	psect	text63
 19034  005256                     __ptext63:
 19035                           	opt stack 0
 19036  005256                     _lcdNibble:
 19037                           	opt stack 20
 19038                           
 19039                           ;incstack = 0
 19040                           ;lcdNibble@data stored from wreg
 19041  005256  0100               	movlb	0	; () banked
 19042  005258  6F81               	movwf	lcdNibble@data& (0+255),b
 19043                           
 19044                           ;lcd.c: 27: (INTCONbits.GIE = 0);
 19045  00525A  9EF2               	bcf	intcon,7,c	;volatile
 19046                           
 19047                           ;lcd.c: 28: char temp = data & 0xF0;
 19048  00525C  0100               	movlb	0	; () banked
 19049  00525E  5181               	movf	lcdNibble@data& (0+255),w,b
 19050  005260  0BF0               	andlw	240
 19051  005262  0100               	movlb	0	; () banked
 19052  005264  6F80               	movwf	lcdNibble@temp& (0+255),b
 19053                           
 19054                           ;lcd.c: 29: LATD = LATD & 0x0F;
 19055  005266  508C               	movf	3980,w,c	;volatile
 19056  005268  0B0F               	andlw	15
 19057  00526A  6E8C               	movwf	3980,c	;volatile
 19058                           
 19059                           ;lcd.c: 30: LATD = temp | LATD;
 19060  00526C  0100               	movlb	0	; () banked
 19061  00526E  5180               	movf	lcdNibble@temp& (0+255),w,b
 19062  005270  108C               	iorwf	3980,w,c	;volatile
 19063  005272  6E8C               	movwf	3980,c	;volatile
 19064                           
 19065                           ; BSR set to: 0
 19066                           ;lcd.c: 32: LATDbits.LATD3 = 1;
 19067  005274  868C               	bsf	3980,3,c	;volatile
 19068                           
 19069                           ; BSR set to: 0
 19070                           ;lcd.c: 33: _delay((unsigned long)((25)*(32000000/4000000.0)));
 19071  005276  0E42               	movlw	66
 19072  005278                     u11737:
 19073  005278  2EE8               	decfsz	wreg,f,c
 19074  00527A  D7FE               	bra	u11737
 19075  00527C  D000               	nop2	
 19076                           
 19077                           ;lcd.c: 34: LATDbits.LATD3 = 0;
 19078  00527E  968C               	bcf	3980,3,c	;volatile
 19079                           
 19080                           ;lcd.c: 35: _delay((unsigned long)((25)*(32000000/4000000.0)));
 19081  005280  0E42               	movlw	66
 19082  005282                     u11747:
 19083  005282  2EE8               	decfsz	wreg,f,c
 19084  005284  D7FE               	bra	u11747
 19085  005286  D000               	nop2	
 19086                           
 19087                           ;lcd.c: 37: data = data << 4;
 19088  005288  0100               	movlb	0	; () banked
 19089  00528A  3981               	swapf	lcdNibble@data& (0+255),w,b
 19090  00528C  0BF0               	andlw	240
 19091  00528E  0100               	movlb	0	; () banked
 19092  005290  6F81               	movwf	lcdNibble@data& (0+255),b
 19093                           
 19094                           ;lcd.c: 39: temp = data & 0xF0;
 19095  005292  0100               	movlb	0	; () banked
 19096  005294  5181               	movf	lcdNibble@data& (0+255),w,b
 19097  005296  0BF0               	andlw	240
 19098  005298  0100               	movlb	0	; () banked
 19099  00529A  6F80               	movwf	lcdNibble@temp& (0+255),b
 19100                           
 19101                           ;lcd.c: 40: LATD = LATD & 0x0F;
 19102  00529C  508C               	movf	3980,w,c	;volatile
 19103  00529E  0B0F               	andlw	15
 19104  0052A0  6E8C               	movwf	3980,c	;volatile
 19105                           
 19106                           ;lcd.c: 41: LATD = temp | LATD;
 19107  0052A2  0100               	movlb	0	; () banked
 19108  0052A4  5180               	movf	lcdNibble@temp& (0+255),w,b
 19109  0052A6  108C               	iorwf	3980,w,c	;volatile
 19110  0052A8  6E8C               	movwf	3980,c	;volatile
 19111                           
 19112                           ; BSR set to: 0
 19113                           ;lcd.c: 43: LATDbits.LATD3 = 1;
 19114  0052AA  868C               	bsf	3980,3,c	;volatile
 19115                           
 19116                           ; BSR set to: 0
 19117                           ;lcd.c: 44: _delay((unsigned long)((25)*(32000000/4000000.0)));
 19118  0052AC  0E42               	movlw	66
 19119  0052AE                     u11757:
 19120  0052AE  2EE8               	decfsz	wreg,f,c
 19121  0052B0  D7FE               	bra	u11757
 19122  0052B2  D000               	nop2	
 19123                           
 19124                           ;lcd.c: 45: LATDbits.LATD3 = 0;
 19125  0052B4  968C               	bcf	3980,3,c	;volatile
 19126                           
 19127                           ;lcd.c: 46: _delay((unsigned long)((25)*(32000000/4000000.0)));
 19128  0052B6  0E42               	movlw	66
 19129  0052B8                     u11767:
 19130  0052B8  2EE8               	decfsz	wreg,f,c
 19131  0052BA  D7FE               	bra	u11767
 19132  0052BC  D000               	nop2	
 19133                           
 19134                           ;lcd.c: 47: (INTCONbits.GIE = 1);
 19135  0052BE  8EF2               	bsf	intcon,7,c	;volatile
 19136  0052C0  0012               	return		;funcret
 19137  0052C2                     __end_of_lcdNibble:
 19138                           	opt stack 0
 19139                           tblptru	equ	0xFF8
 19140                           tblptrh	equ	0xFF7
 19141                           tblptrl	equ	0xFF6
 19142                           tablat	equ	0xFF5
 19143                           prodh	equ	0xFF4
 19144                           prodl	equ	0xFF3
 19145                           intcon	equ	0xFF2
 19146                           intcon2	equ	0xFF1
 19147                           intcon3	equ	0xFF0
 19148                           indf0	equ	0xFEF
 19149                           postinc0	equ	0xFEE
 19150                           fsr0h	equ	0xFEA
 19151                           fsr0l	equ	0xFE9
 19152                           wreg	equ	0xFE8
 19153                           postdec1	equ	0xFE5
 19154                           fsr1l	equ	0xFE1
 19155                           indf2	equ	0xFDF
 19156                           postinc2	equ	0xFDE
 19157                           postdec2	equ	0xFDD
 19158                           fsr2h	equ	0xFDA
 19159                           fsr2l	equ	0xFD9
 19160                           status	equ	0xFD8
 19161                           
 19162 ;; *************** function _handler *****************
 19163 ;; Defined at:
 19164 ;;		line 16 in file "interruptHandler.c"
 19165 ;; Parameters:    Size  Location     Type
 19166 ;;		None
 19167 ;; Auto vars:     Size  Location     Type
 19168 ;;		None
 19169 ;; Return value:  Size  Location     Type
 19170 ;;                  1    wreg      void 
 19171 ;; Registers used:
 19172 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19173 ;; Tracked objects:
 19174 ;;		On entry : 0/0
 19175 ;;		On exit  : 0/0
 19176 ;;		Unchanged: 0/0
 19177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19178 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19179 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19180 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19181 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19182 ;;Total ram usage:       16 bytes
 19183 ;; Hardware stack levels used:    1
 19184 ;; Hardware stack levels required when called:    6
 19185 ;; This function calls:
 19186 ;;		_printSortTimer
 19187 ;;		_updateArmState
 19188 ;;		_updateMenu
 19189 ;;		_updateServoStates
 19190 ;;		i2_change_state_to_menu_start
 19191 ;; This function is called by:
 19192 ;;		Interrupt level 2
 19193 ;; This function uses a non-reentrant model
 19194 ;;
 19195                           
 19196                           	psect	intcode
 19197  000008                     __pintcode:
 19198                           	opt stack 0
 19199  000008                     _handler:
 19200                           	opt stack 18
 19201                           
 19202                           ;incstack = 0
 19203  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 19204  00000A  ED59  F01D         	call	int_func,f	;refresh shadow registers
 19205                           tblptru	equ	0xFF8
 19206                           tblptrh	equ	0xFF7
 19207                           tblptrl	equ	0xFF6
 19208                           tablat	equ	0xFF5
 19209                           prodh	equ	0xFF4
 19210                           prodl	equ	0xFF3
 19211                           intcon	equ	0xFF2
 19212                           intcon2	equ	0xFF1
 19213                           intcon3	equ	0xFF0
 19214                           indf0	equ	0xFEF
 19215                           postinc0	equ	0xFEE
 19216                           fsr0h	equ	0xFEA
 19217                           fsr0l	equ	0xFE9
 19218                           wreg	equ	0xFE8
 19219                           postdec1	equ	0xFE5
 19220                           fsr1l	equ	0xFE1
 19221                           indf2	equ	0xFDF
 19222                           postinc2	equ	0xFDE
 19223                           postdec2	equ	0xFDD
 19224                           fsr2h	equ	0xFDA
 19225                           fsr2l	equ	0xFD9
 19226                           status	equ	0xFD8
 19227                           
 19228                           	psect	intcode_body
 19229  003AB2                     __pintcode_body:
 19230                           	opt stack 18
 19231  003AB2                     int_func:
 19232                           	opt stack 18
 19233  003AB2  0006               	pop		; remove dummy address from shadow register refresh
 19234  003AB4  CFFA F04D          	movff	pclath,??_handler+2
 19235  003AB8  CFFB F04E          	movff	pclatu,??_handler+3
 19236  003ABC  CFE9 F04F          	movff	fsr0l,??_handler+4
 19237  003AC0  CFEA F050          	movff	fsr0h,??_handler+5
 19238  003AC4  CFE1 F051          	movff	fsr1l,??_handler+6
 19239  003AC8  CFE2 F052          	movff	fsr1h,??_handler+7
 19240  003ACC  CFD9 F053          	movff	fsr2l,??_handler+8
 19241  003AD0  CFDA F054          	movff	fsr2h,??_handler+9
 19242  003AD4  CFF3 F055          	movff	prodl,??_handler+10
 19243  003AD8  CFF4 F056          	movff	prodh,??_handler+11
 19244  003ADC  CFF6 F057          	movff	tblptrl,??_handler+12
 19245  003AE0  CFF7 F058          	movff	tblptrh,??_handler+13
 19246  003AE4  CFF8 F059          	movff	tblptru,??_handler+14
 19247  003AE8  CFF5 F05A          	movff	tablat,??_handler+15
 19248                           
 19249                           ;interruptHandler.c: 18: if(INT1IF){
 19250  003AEC  A0F0               	btfss	intcon3,0,c	;volatile
 19251  003AEE  D034               	goto	i2l10286
 19252                           
 19253                           ;interruptHandler.c: 19: INT1IF = 0;
 19254  003AF0  90F0               	bcf	intcon3,0,c	;volatile
 19255                           
 19256                           ;interruptHandler.c: 20: input = keys[(PORTB & 0xF0) >> 4];
 19257  003AF2  3881               	swapf	3969,w,c	;volatile
 19258  003AF4  0B0F               	andlw	15
 19259  003AF6  0B0F               	andlw	15
 19260  003AF8  6E4B               	movwf	??_handler& (0+255),c
 19261  003AFA  6A4C               	clrf	(??_handler+1)& (0+255),c
 19262  003AFC  0EAF               	movlw	low _keys
 19263  003AFE  244B               	addwf	??_handler,w,c
 19264  003B00  6EF6               	movwf	tblptrl,c
 19265  003B02  0EFA               	movlw	high _keys
 19266  003B04  204C               	addwfc	??_handler+1,w,c
 19267  003B06  6EF7               	movwf	tblptrh,c
 19268  003B08                     	if	1	;There are 3 active tblptr bytes
 19269  003B08  6AF8               	clrf	tblptru,c
 19270  003B0A  0E00               	movlw	low (__mediumconst shr (0+16))
 19271  003B0C  22F8               	addwfc	tblptru,f,c
 19272  003B0E                     	endif
 19273  003B0E  0008               	tblrd		*
 19274  003B10  CFF5 F07D          	movff	tablat,_input	;volatile
 19275                           
 19276                           ;interruptHandler.c: 21: if(input == '*'){
 19277  003B14  0E2A               	movlw	42
 19278  003B16  187D               	xorwf	_input,w,c	;volatile
 19279  003B18  B4D8               	btfsc	status,2,c
 19280  003B1A  D00D               	goto	i2l10280
 19281  003B1C  D018               	goto	i2l10282
 19282  003B1E                     i2l10270:
 19283                           
 19284                           ;interruptHandler.c: 24: machine_state = Testing_state;
 19285  003B1E  0E03               	movlw	3
 19286  003B20  D007               	goto	L15
 19287  003B22                     i2l10272:
 19288                           
 19289                           ; BSR set to: 0
 19290                           ;interruptHandler.c: 27: machine_state = UI_state;
 19291  003B22  0E00               	movlw	0
 19292  003B24  0100               	movlb	0	; () banked
 19293  003B26  6FFC               	movwf	_machine_state& (0+255),b
 19294                           
 19295                           ; BSR set to: 0
 19296                           ;interruptHandler.c: 28: change_state_to_menu_start();
 19297  003B28  ECDB  F02D         	call	i2_change_state_to_menu_start	;wreg free
 19298                           
 19299                           ;interruptHandler.c: 29: break;
 19300  003B2C  D015               	goto	i2l10286
 19301  003B2E                     i2l10276:
 19302                           
 19303                           ;interruptHandler.c: 31: machine_state = DoneSorting_state;
 19304  003B2E  0E02               	movlw	2
 19305  003B30                     L15:
 19306  003B30  0100               	movlb	0	; () banked
 19307  003B32  6FFC               	movwf	_machine_state& (0+255),b
 19308                           
 19309                           ; BSR set to: 0
 19310                           ;interruptHandler.c: 33: }
 19311                           
 19312                           ;interruptHandler.c: 32: break;
 19313  003B34  D011               	goto	i2l10286
 19314  003B36                     i2l10280:
 19315  003B36  0100               	movlb	0	; () banked
 19316  003B38  51FC               	movf	_machine_state& (0+255),w,b
 19317                           
 19318                           ; Switch size 1, requested type "space"
 19319                           ; Number of cases is 3, Range of values is 0 to 3
 19320                           ; switch strategies available:
 19321                           ; Name         Instructions Cycles
 19322                           ; simple_byte           10     6 (average)
 19323                           ;	Chosen strategy is simple_byte
 19324  003B3A  0A00               	xorlw	0	; case 0
 19325  003B3C  B4D8               	btfsc	status,2,c
 19326  003B3E  D7EF               	goto	i2l10270
 19327  003B40  0A01               	xorlw	1	; case 1
 19328  003B42  B4D8               	btfsc	status,2,c
 19329  003B44  D7F4               	goto	i2l10276
 19330  003B46  0A02               	xorlw	2	; case 3
 19331  003B48  B4D8               	btfsc	status,2,c
 19332  003B4A  D7EB               	goto	i2l10272
 19333                           
 19334                           ; BSR set to: 0
 19335                           ;interruptHandler.c: 34: }
 19336  003B4C  D005               	goto	i2l10286
 19337  003B4E                     i2l10282:
 19338                           
 19339                           ;interruptHandler.c: 35: else if(machine_state == UI_state){
 19340  003B4E  0100               	movlb	0	; () banked
 19341  003B50  51FC               	movf	_machine_state& (0+255),w,b
 19342  003B52  B4D8               	btfsc	status,2,c
 19343                           
 19344                           ; BSR set to: 0
 19345                           ;interruptHandler.c: 36: updateMenu();
 19346  003B54  ECE8  F019         	call	_updateMenu	;wreg free
 19347  003B58                     i2l10286:
 19348                           
 19349                           ;interruptHandler.c: 37: }
 19350                           ;interruptHandler.c: 38: }
 19351                           ;interruptHandler.c: 41: if(TMR0IF){
 19352  003B58  A4F2               	btfss	intcon,2,c	;volatile
 19353  003B5A  D00C               	goto	i2l10300
 19354                           
 19355                           ;interruptHandler.c: 42: TMR0IF = 0;
 19356  003B5C  94F2               	bcf	intcon,2,c	;volatile
 19357                           
 19358                           ;interruptHandler.c: 43: if(machine_state == Sorting_state){
 19359  003B5E  0100               	movlb	0	; () banked
 19360  003B60  05FC               	decf	_machine_state& (0+255),w,b
 19361  003B62  A4D8               	btfss	status,2,c
 19362  003B64  D007               	goto	i2l10300
 19363                           
 19364                           ; BSR set to: 0
 19365                           ;interruptHandler.c: 44: printSortTimer();
 19366  003B66  ECD6  F013         	call	_printSortTimer	;wreg free
 19367                           
 19368                           ;interruptHandler.c: 46: TMR0H = 0b10000101;
 19369  003B6A  0E85               	movlw	133
 19370  003B6C  6ED7               	movwf	4055,c	;volatile
 19371                           
 19372                           ;interruptHandler.c: 47: TMR0L = 0b11101110;
 19373  003B6E  0EEE               	movlw	238
 19374  003B70  6ED6               	movwf	4054,c	;volatile
 19375                           
 19376                           ;interruptHandler.c: 48: TMR0ON = 1;
 19377  003B72  8ED5               	bsf	4053,7,c	;volatile
 19378  003B74                     i2l10300:
 19379                           
 19380                           ;interruptHandler.c: 49: }
 19381                           ;interruptHandler.c: 50: }
 19382                           ;interruptHandler.c: 53: if(TMR1IF){
 19383  003B74  A09E               	btfss	3998,0,c	;volatile
 19384  003B76  D028               	goto	i2l10328
 19385                           
 19386                           ;interruptHandler.c: 54: TMR1IF = 0;
 19387  003B78  909E               	bcf	3998,0,c	;volatile
 19388                           
 19389                           ;interruptHandler.c: 55: TMR1ON = 0;
 19390  003B7A  90CD               	bcf	4045,0,c	;volatile
 19391                           
 19392                           ;interruptHandler.c: 56: if(machine_state == Sorting_state){
 19393  003B7C  0100               	movlb	0	; () banked
 19394  003B7E  05FC               	decf	_machine_state& (0+255),w,b
 19395  003B80  A4D8               	btfss	status,2,c
 19396  003B82  D022               	goto	i2l10328
 19397                           
 19398                           ; BSR set to: 0
 19399                           ;interruptHandler.c: 57: if(was_low_1){
 19400  003B84  5077               	movf	_was_low_1,w,c	;volatile
 19401  003B86  1078               	iorwf	_was_low_1+1,w,c	;volatile
 19402  003B88  B4D8               	btfsc	status,2,c
 19403  003B8A  D00A               	goto	i2l1063
 19404                           
 19405                           ; BSR set to: 0
 19406                           ;interruptHandler.c: 58: LATCbits.LATC1 = 1;
 19407  003B8C  828B               	bsf	3979,1,c	;volatile
 19408                           
 19409                           ; BSR set to: 0
 19410                           ;interruptHandler.c: 59: was_low_1 = 0;
 19411  003B8E  0E00               	movlw	0
 19412  003B90  6E78               	movwf	_was_low_1+1,c	;volatile
 19413  003B92  0E00               	movlw	0
 19414  003B94  6E77               	movwf	_was_low_1,c	;volatile
 19415                           
 19416                           ; BSR set to: 0
 19417                           ;interruptHandler.c: 60: TMR1H = servoTimes[0];
 19418  003B96  C05B  FFCF         	movff	_servoTimes,4047	;volatile
 19419                           
 19420                           ; BSR set to: 0
 19421                           ;interruptHandler.c: 61: TMR1L = servoTimes[1];
 19422  003B9A  C05D  FFCE         	movff	_servoTimes+2,4046	;volatile
 19423                           
 19424                           ;interruptHandler.c: 62: }
 19425  003B9E  D00D               	goto	i2l10322
 19426  003BA0                     i2l1063:
 19427                           
 19428                           ; BSR set to: 0
 19429                           ;interruptHandler.c: 63: else{
 19430                           ;interruptHandler.c: 64: LATCbits.LATC1 = 0;
 19431  003BA0  928B               	bcf	3979,1,c	;volatile
 19432                           
 19433                           ; BSR set to: 0
 19434                           ;interruptHandler.c: 65: was_low_1 = 1;
 19435  003BA2  0E00               	movlw	0
 19436  003BA4  6E78               	movwf	_was_low_1+1,c	;volatile
 19437  003BA6  0E01               	movlw	1
 19438  003BA8  6E77               	movwf	_was_low_1,c	;volatile
 19439                           
 19440                           ; BSR set to: 0
 19441                           ;interruptHandler.c: 66: TMR1H = 20000 - servoTimes[0];
 19442  003BAA  505B               	movf	_servoTimes,w,c
 19443  003BAC  0800               	sublw	0
 19444  003BAE  0F20               	addlw	32
 19445  003BB0  6ECF               	movwf	4047,c	;volatile
 19446                           
 19447                           ; BSR set to: 0
 19448                           ;interruptHandler.c: 67: TMR1L = 20000 - servoTimes[1];
 19449  003BB2  505D               	movf	_servoTimes+2,w,c
 19450  003BB4  0800               	sublw	0
 19451  003BB6  0F20               	addlw	32
 19452  003BB8  6ECE               	movwf	4046,c	;volatile
 19453  003BBA                     i2l10322:
 19454                           
 19455                           ; BSR set to: 0
 19456                           ;interruptHandler.c: 68: }
 19457                           ;interruptHandler.c: 69: TMR1ON = 1;
 19458  003BBA  80CD               	bsf	4045,0,c	;volatile
 19459                           
 19460                           ; BSR set to: 0
 19461                           ;interruptHandler.c: 70: servo_timer_counter += 10;
 19462  003BBC  0E0A               	movlw	10
 19463  003BBE  266D               	addwf	_servo_timer_counter,f,c	;volatile
 19464  003BC0  0E00               	movlw	0
 19465  003BC2  226E               	addwfc	_servo_timer_counter+1,f,c	;volatile
 19466                           
 19467                           ; BSR set to: 0
 19468                           ;interruptHandler.c: 72: updateServoStates();
 19469  003BC4  EC4E  F01E         	call	_updateServoStates	;wreg free
 19470  003BC8                     i2l10328:
 19471                           
 19472                           ;interruptHandler.c: 73: }
 19473                           ;interruptHandler.c: 74: }
 19474                           ;interruptHandler.c: 77: if(TMR2IF){
 19475  003BC8  A29E               	btfss	3998,1,c	;volatile
 19476  003BCA  D026               	goto	i2l10354
 19477                           
 19478                           ;interruptHandler.c: 80: TMR2IF = 0;
 19479  003BCC  929E               	bcf	3998,1,c	;volatile
 19480                           
 19481                           ;interruptHandler.c: 81: TMR2ON = 0;
 19482  003BCE  94CA               	bcf	4042,2,c	;volatile
 19483                           
 19484                           ;interruptHandler.c: 82: timer2_counter++;
 19485  003BD0  4A73               	infsnz	_timer2_counter,f,c	;volatile
 19486  003BD2  2A74               	incf	_timer2_counter+1,f,c	;volatile
 19487                           
 19488                           ;interruptHandler.c: 83: if(machine_state == Sorting_state){
 19489  003BD4  0100               	movlb	0	; () banked
 19490  003BD6  05FC               	decf	_machine_state& (0+255),w,b
 19491  003BD8  A4D8               	btfss	status,2,c
 19492  003BDA  D01E               	goto	i2l10354
 19493                           
 19494                           ; BSR set to: 0
 19495                           ;interruptHandler.c: 84: if(was_low_2 && (timer2_counter == 2)){
 19496  003BDC  5079               	movf	_was_low_2,w,c	;volatile
 19497  003BDE  107A               	iorwf	_was_low_2+1,w,c	;volatile
 19498  003BE0  B4D8               	btfsc	status,2,c
 19499  003BE2  D00A               	goto	i2l10344
 19500                           
 19501                           ; BSR set to: 0
 19502  003BE4  0E02               	movlw	2
 19503  003BE6  1873               	xorwf	_timer2_counter,w,c	;volatile
 19504  003BE8  1074               	iorwf	_timer2_counter+1,w,c	;volatile
 19505  003BEA  A4D8               	btfss	status,2,c
 19506  003BEC  D005               	goto	i2l10344
 19507                           
 19508                           ; BSR set to: 0
 19509                           ;interruptHandler.c: 86: LATBbits.LATB3 = 1;
 19510  003BEE  868A               	bsf	3978,3,c	;volatile
 19511                           
 19512                           ; BSR set to: 0
 19513                           ;interruptHandler.c: 87: was_low_2 = 0;
 19514  003BF0  0E00               	movlw	0
 19515  003BF2  6E7A               	movwf	_was_low_2+1,c	;volatile
 19516  003BF4  0E00               	movlw	0
 19517  003BF6  D008               	goto	L16
 19518  003BF8                     i2l10344:
 19519                           
 19520                           ; BSR set to: 0
 19521                           ;interruptHandler.c: 90: else if(!was_low_2){
 19522  003BF8  5079               	movf	_was_low_2,w,c	;volatile
 19523  003BFA  107A               	iorwf	_was_low_2+1,w,c	;volatile
 19524  003BFC  A4D8               	btfss	status,2,c
 19525  003BFE  D009               	goto	i2l10350
 19526                           
 19527                           ; BSR set to: 0
 19528                           ;interruptHandler.c: 91: LATBbits.LATB3 = 0;
 19529  003C00  968A               	bcf	3978,3,c	;volatile
 19530                           
 19531                           ; BSR set to: 0
 19532                           ;interruptHandler.c: 92: was_low_2 = 1;
 19533  003C02  0E00               	movlw	0
 19534  003C04  6E7A               	movwf	_was_low_2+1,c	;volatile
 19535  003C06  0E01               	movlw	1
 19536  003C08                     L16:
 19537  003C08  6E79               	movwf	_was_low_2,c	;volatile
 19538                           
 19539                           ;interruptHandler.c: 93: timer2_counter = 0;
 19540  003C0A  0E00               	movlw	0
 19541  003C0C  6E74               	movwf	_timer2_counter+1,c	;volatile
 19542  003C0E  0E00               	movlw	0
 19543  003C10  6E73               	movwf	_timer2_counter,c	;volatile
 19544  003C12                     i2l10350:
 19545                           
 19546                           ; BSR set to: 0
 19547                           ;interruptHandler.c: 94: }
 19548                           ;interruptHandler.c: 95: updateArmState();
 19549  003C12  ECAB  F02B         	call	_updateArmState	;wreg free
 19550                           
 19551                           ;interruptHandler.c: 96: TMR2ON = 1;
 19552  003C16  84CA               	bsf	4042,2,c	;volatile
 19553  003C18                     i2l10354:
 19554                           
 19555                           ;interruptHandler.c: 97: }
 19556                           ;interruptHandler.c: 98: }
 19557                           ;interruptHandler.c: 101: if(TMR3IF){
 19558  003C18  A2A1               	btfss	4001,1,c	;volatile
 19559  003C1A  D022               	goto	i2l1074
 19560                           
 19561                           ;interruptHandler.c: 102: TMR3IF = 0;
 19562  003C1C  92A1               	bcf	4001,1,c	;volatile
 19563                           
 19564                           ;interruptHandler.c: 103: TMR3ON = 0;
 19565  003C1E  90B1               	bcf	4017,0,c	;volatile
 19566                           
 19567                           ;interruptHandler.c: 104: if(machine_state == Sorting_state){
 19568  003C20  0100               	movlb	0	; () banked
 19569  003C22  05FC               	decf	_machine_state& (0+255),w,b
 19570  003C24  A4D8               	btfss	status,2,c
 19571  003C26  D01C               	goto	i2l1074
 19572                           
 19573                           ; BSR set to: 0
 19574                           ;interruptHandler.c: 105: if(was_low_3){
 19575  003C28  507B               	movf	_was_low_3,w,c	;volatile
 19576  003C2A  107C               	iorwf	_was_low_3+1,w,c	;volatile
 19577  003C2C  B4D8               	btfsc	status,2,c
 19578  003C2E  D00A               	goto	i2l1072
 19579                           
 19580                           ; BSR set to: 0
 19581                           ;interruptHandler.c: 106: LATCbits.LATC2 = 1;
 19582  003C30  848B               	bsf	3979,2,c	;volatile
 19583                           
 19584                           ; BSR set to: 0
 19585                           ;interruptHandler.c: 107: was_low_3 = 0;
 19586  003C32  0E00               	movlw	0
 19587  003C34  6E7C               	movwf	_was_low_3+1,c	;volatile
 19588  003C36  0E00               	movlw	0
 19589  003C38  6E7B               	movwf	_was_low_3,c	;volatile
 19590                           
 19591                           ; BSR set to: 0
 19592                           ;interruptHandler.c: 108: TMR3H = servoTimes[2];
 19593  003C3A  C05F  FFB3         	movff	_servoTimes+4,4019	;volatile
 19594                           
 19595                           ; BSR set to: 0
 19596                           ;interruptHandler.c: 109: TMR3L = servoTimes[3];
 19597  003C3E  C061  FFB2         	movff	_servoTimes+6,4018	;volatile
 19598                           
 19599                           ;interruptHandler.c: 110: }
 19600  003C42  D00D               	goto	i2l10376
 19601  003C44                     i2l1072:
 19602                           
 19603                           ; BSR set to: 0
 19604                           ;interruptHandler.c: 111: else{
 19605                           ;interruptHandler.c: 112: LATCbits.LATC2 = 0;
 19606  003C44  948B               	bcf	3979,2,c	;volatile
 19607                           
 19608                           ; BSR set to: 0
 19609                           ;interruptHandler.c: 113: was_low_3 = 1;
 19610  003C46  0E00               	movlw	0
 19611  003C48  6E7C               	movwf	_was_low_3+1,c	;volatile
 19612  003C4A  0E01               	movlw	1
 19613  003C4C  6E7B               	movwf	_was_low_3,c	;volatile
 19614                           
 19615                           ; BSR set to: 0
 19616                           ;interruptHandler.c: 114: TMR3H = 20000 - servoTimes[2];
 19617  003C4E  505F               	movf	_servoTimes+4,w,c
 19618  003C50  0800               	sublw	0
 19619  003C52  0F20               	addlw	32
 19620  003C54  6EB3               	movwf	4019,c	;volatile
 19621                           
 19622                           ; BSR set to: 0
 19623                           ;interruptHandler.c: 115: TMR3L = 20000 - servoTimes[3];
 19624  003C56  5061               	movf	_servoTimes+6,w,c
 19625  003C58  0800               	sublw	0
 19626  003C5A  0F20               	addlw	32
 19627  003C5C  6EB2               	movwf	4018,c	;volatile
 19628  003C5E                     i2l10376:
 19629                           
 19630                           ; BSR set to: 0
 19631                           ;interruptHandler.c: 116: }
 19632                           ;interruptHandler.c: 117: TMR3ON = 1;
 19633  003C5E  80B1               	bsf	4017,0,c	;volatile
 19634  003C60                     i2l1074:
 19635  003C60  C05A  FFF5         	movff	??_handler+15,tablat
 19636  003C64  C059  FFF8         	movff	??_handler+14,tblptru
 19637  003C68  C058  FFF7         	movff	??_handler+13,tblptrh
 19638  003C6C  C057  FFF6         	movff	??_handler+12,tblptrl
 19639  003C70  C056  FFF4         	movff	??_handler+11,prodh
 19640  003C74  C055  FFF3         	movff	??_handler+10,prodl
 19641  003C78  C054  FFDA         	movff	??_handler+9,fsr2h
 19642  003C7C  C053  FFD9         	movff	??_handler+8,fsr2l
 19643  003C80  C052  FFE2         	movff	??_handler+7,fsr1h
 19644  003C84  C051  FFE1         	movff	??_handler+6,fsr1l
 19645  003C88  C050  FFEA         	movff	??_handler+5,fsr0h
 19646  003C8C  C04F  FFE9         	movff	??_handler+4,fsr0l
 19647  003C90  C04E  FFFB         	movff	??_handler+3,pclatu
 19648  003C94  C04D  FFFA         	movff	??_handler+2,pclath
 19649  003C98  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 19650  003C9A  0011               	retfie		f
 19651  003C9C                     __end_of_handler:
 19652                           	opt stack 0
 19653                           pclatu	equ	0xFFB
 19654                           pclath	equ	0xFFA
 19655                           tblptru	equ	0xFF8
 19656                           tblptrh	equ	0xFF7
 19657                           tblptrl	equ	0xFF6
 19658                           tablat	equ	0xFF5
 19659                           prodh	equ	0xFF4
 19660                           prodl	equ	0xFF3
 19661                           intcon	equ	0xFF2
 19662                           intcon2	equ	0xFF1
 19663                           intcon3	equ	0xFF0
 19664                           indf0	equ	0xFEF
 19665                           postinc0	equ	0xFEE
 19666                           fsr0h	equ	0xFEA
 19667                           fsr0l	equ	0xFE9
 19668                           wreg	equ	0xFE8
 19669                           postdec1	equ	0xFE5
 19670                           fsr1h	equ	0xFE2
 19671                           fsr1l	equ	0xFE1
 19672                           indf2	equ	0xFDF
 19673                           postinc2	equ	0xFDE
 19674                           postdec2	equ	0xFDD
 19675                           fsr2h	equ	0xFDA
 19676                           fsr2l	equ	0xFD9
 19677                           status	equ	0xFD8
 19678                           
 19679 ;; *************** function _updateServoStates *****************
 19680 ;; Defined at:
 19681 ;;		line 611 in file "sort.c"
 19682 ;; Parameters:    Size  Location     Type
 19683 ;;		None
 19684 ;; Auto vars:     Size  Location     Type
 19685 ;;		None
 19686 ;; Return value:  Size  Location     Type
 19687 ;;                  1    wreg      void 
 19688 ;; Registers used:
 19689 ;;		wreg, status,2, status,0, cstack
 19690 ;; Tracked objects:
 19691 ;;		On entry : 0/0
 19692 ;;		On exit  : 0/0
 19693 ;;		Unchanged: 0/0
 19694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19695 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19696 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19697 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19698 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19699 ;;Total ram usage:        2 bytes
 19700 ;; Hardware stack levels used:    1
 19701 ;; Hardware stack levels required when called:    1
 19702 ;; This function calls:
 19703 ;;		i2_updateServoPosition
 19704 ;; This function is called by:
 19705 ;;		_handler
 19706 ;; This function uses a non-reentrant model
 19707 ;;
 19708                           
 19709                           	psect	text65
 19710  003C9C                     __ptext65:
 19711                           	opt stack 0
 19712  003C9C                     _updateServoStates:
 19713                           	opt stack 22
 19714                           
 19715                           ;sort.c: 613: if(servo_timer_counter >= servo_timer_target){
 19716                           
 19717                           ;incstack = 0
 19718  003C9C  506F               	movf	_servo_timer_target,w,c	;volatile
 19719  003C9E  5C6D               	subwf	_servo_timer_counter,w,c	;volatile
 19720  003CA0  506E               	movf	_servo_timer_counter+1,w,c	;volatile
 19721  003CA2  0A80               	xorlw	128
 19722  003CA4  6E09               	movwf	??_updateServoStates& (0+255),c
 19723  003CA6  5070               	movf	_servo_timer_target+1,w,c	;volatile
 19724  003CA8  0A80               	xorlw	128
 19725  003CAA  5809               	subwfb	??_updateServoStates& (0+255),w,c
 19726  003CAC  A0D8               	btfss	status,0,c
 19727  003CAE  0012               	return	
 19728                           
 19729                           ;sort.c: 615: if(f_panning_to_bin){
 19730  003CB0  5069               	movf	_f_panning_to_bin,w,c	;volatile
 19731  003CB2  106A               	iorwf	_f_panning_to_bin+1,w,c	;volatile
 19732  003CB4  A4D8               	btfss	status,2,c
 19733  003CB6  D036               	goto	i2l10144
 19734  003CB8  D05F               	goto	i2l10148
 19735  003CBA                     i2l10118:
 19736                           
 19737                           ;sort.c: 619: updateServoPosition(1260, 3);
 19738  003CBA  0E04               	movlw	4
 19739  003CBC  6E02               	movwf	i2updateServoPosition@time_us+1,c
 19740  003CBE  0EEC               	movlw	236
 19741  003CC0  6E01               	movwf	i2updateServoPosition@time_us,c
 19742  003CC2  0E00               	movlw	0
 19743  003CC4  6E04               	movwf	i2updateServoPosition@timer+1,c
 19744  003CC6  0E03               	movlw	3
 19745  003CC8  6E03               	movwf	i2updateServoPosition@timer,c
 19746  003CCA  EC61  F029         	call	i2_updateServoPosition	;wreg free
 19747  003CCE  D025               	goto	i2l10138
 19748  003CD0                     i2l10122:
 19749                           
 19750                           ;sort.c: 621: servo_timer_target = 700;
 19751  003CD0  0E02               	movlw	2
 19752  003CD2  6E70               	movwf	_servo_timer_target+1,c	;volatile
 19753  003CD4  0EBC               	movlw	188
 19754  003CD6  6E6F               	movwf	_servo_timer_target,c	;volatile
 19755                           
 19756                           ;sort.c: 622: break;
 19757  003CD8  D04A               	goto	i2l10146
 19758  003CDA                     i2l10124:
 19759                           
 19760                           ;sort.c: 624: updateServoPosition(1260, 3);
 19761  003CDA  0E04               	movlw	4
 19762  003CDC  6E02               	movwf	i2updateServoPosition@time_us+1,c
 19763  003CDE  0EEC               	movlw	236
 19764  003CE0  6E01               	movwf	i2updateServoPosition@time_us,c
 19765  003CE2  0E00               	movlw	0
 19766  003CE4  6E04               	movwf	i2updateServoPosition@timer+1,c
 19767  003CE6  0E03               	movlw	3
 19768  003CE8  6E03               	movwf	i2updateServoPosition@timer,c
 19769  003CEA  EC61  F029         	call	i2_updateServoPosition	;wreg free
 19770  003CEE  D015               	goto	i2l10138
 19771  003CF0                     i2l10130:
 19772                           
 19773                           ;sort.c: 630: updateServoPosition(1390, 3);
 19774  003CF0  0E05               	movlw	5
 19775  003CF2  6E02               	movwf	i2updateServoPosition@time_us+1,c
 19776  003CF4  0E6E               	movlw	110
 19777  003CF6  6E01               	movwf	i2updateServoPosition@time_us,c
 19778  003CF8  0E00               	movlw	0
 19779  003CFA  6E04               	movwf	i2updateServoPosition@timer+1,c
 19780  003CFC  0E03               	movlw	3
 19781  003CFE  6E03               	movwf	i2updateServoPosition@timer,c
 19782  003D00  EC61  F029         	call	i2_updateServoPosition	;wreg free
 19783  003D04  D00A               	goto	i2l10138
 19784  003D06                     i2l10136:
 19785                           
 19786                           ;sort.c: 635: updateServoPosition(1390, 3);
 19787  003D06  0E05               	movlw	5
 19788  003D08  6E02               	movwf	i2updateServoPosition@time_us+1,c
 19789  003D0A  0E6E               	movlw	110
 19790  003D0C  6E01               	movwf	i2updateServoPosition@time_us,c
 19791  003D0E  0E00               	movlw	0
 19792  003D10  6E04               	movwf	i2updateServoPosition@timer+1,c
 19793  003D12  0E03               	movlw	3
 19794  003D14  6E03               	movwf	i2updateServoPosition@timer,c
 19795  003D16  EC61  F029         	call	i2_updateServoPosition	;wreg free
 19796  003D1A                     i2l10138:
 19797                           
 19798                           ;sort.c: 636: servo_timer_counter = 0;
 19799  003D1A  0E00               	movlw	0
 19800  003D1C  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 19801  003D1E  0E00               	movlw	0
 19802  003D20  6E6D               	movwf	_servo_timer_counter,c	;volatile
 19803  003D22  D7D6               	goto	i2l10122
 19804  003D24                     i2l10144:
 19805  003D24  C06B  F009         	movff	_pan_servo_state,??_updateServoStates	;volatile
 19806  003D28  C06C  F00A         	movff	_pan_servo_state+1,??_updateServoStates+1	;volatile
 19807                           
 19808                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 4 sub-sw
      +                          itches
 19809                           ; Switch size 1, requested type "space"
 19810                           ; Number of cases is 4, Range of values is 1 to 9
 19811                           ; switch strategies available:
 19812                           ; Name         Instructions Cycles
 19813                           ; simple_byte           13     7 (average)
 19814                           ;	Chosen strategy is simple_byte
 19815  003D2C  500A               	movf	??_updateServoStates+1,w,c
 19816  003D2E  0A01               	xorlw	1	; case 1
 19817  003D30  B4D8               	btfsc	status,2,c
 19818  003D32  D00A               	goto	i2l10800
 19819  003D34  0A02               	xorlw	2	; case 3
 19820  003D36  B4D8               	btfsc	status,2,c
 19821  003D38  D00C               	goto	i2l10802
 19822  003D3A  0A05               	xorlw	5	; case 6
 19823  003D3C  B4D8               	btfsc	status,2,c
 19824  003D3E  D00E               	goto	i2l10804
 19825  003D40  0A0F               	xorlw	15	; case 9
 19826  003D42  B4D8               	btfsc	status,2,c
 19827  003D44  D010               	goto	i2l10806
 19828  003D46  D013               	goto	i2l10146
 19829  003D48                     i2l10800:
 19830                           
 19831                           ; Switch size 1, requested type "space"
 19832                           ; Number of cases is 1, Range of values is 244 to 244
 19833                           ; switch strategies available:
 19834                           ; Name         Instructions Cycles
 19835                           ; simple_byte            4     3 (average)
 19836                           ;	Chosen strategy is simple_byte
 19837  003D48  5009               	movf	??_updateServoStates,w,c
 19838  003D4A  0AF4               	xorlw	244	; case 244
 19839  003D4C  B4D8               	btfsc	status,2,c
 19840  003D4E  D7B5               	goto	i2l10118
 19841  003D50  D00E               	goto	i2l10146
 19842  003D52                     i2l10802:
 19843                           
 19844                           ; Switch size 1, requested type "space"
 19845                           ; Number of cases is 1, Range of values is 82 to 82
 19846                           ; switch strategies available:
 19847                           ; Name         Instructions Cycles
 19848                           ; simple_byte            4     3 (average)
 19849                           ;	Chosen strategy is simple_byte
 19850  003D52  5009               	movf	??_updateServoStates,w,c
 19851  003D54  0A52               	xorlw	82	; case 82
 19852  003D56  B4D8               	btfsc	status,2,c
 19853  003D58  D7C0               	goto	i2l10124
 19854  003D5A  D009               	goto	i2l10146
 19855  003D5C                     i2l10804:
 19856                           
 19857                           ; Switch size 1, requested type "space"
 19858                           ; Number of cases is 1, Range of values is 134 to 134
 19859                           ; switch strategies available:
 19860                           ; Name         Instructions Cycles
 19861                           ; simple_byte            4     3 (average)
 19862                           ;	Chosen strategy is simple_byte
 19863  003D5C  5009               	movf	??_updateServoStates,w,c
 19864  003D5E  0A86               	xorlw	134	; case 134
 19865  003D60  B4D8               	btfsc	status,2,c
 19866  003D62  D7C6               	goto	i2l10130
 19867  003D64  D004               	goto	i2l10146
 19868  003D66                     i2l10806:
 19869                           
 19870                           ; Switch size 1, requested type "space"
 19871                           ; Number of cases is 1, Range of values is 96 to 96
 19872                           ; switch strategies available:
 19873                           ; Name         Instructions Cycles
 19874                           ; simple_byte            4     3 (average)
 19875                           ;	Chosen strategy is simple_byte
 19876  003D66  5009               	movf	??_updateServoStates,w,c
 19877  003D68  0A60               	xorlw	96	; case 96
 19878  003D6A  B4D8               	btfsc	status,2,c
 19879  003D6C  D7CC               	goto	i2l10136
 19880  003D6E                     i2l10146:
 19881                           
 19882                           ;sort.c: 642: f_panning_to_bin = 0;
 19883  003D6E  0E00               	movlw	0
 19884  003D70  6E6A               	movwf	_f_panning_to_bin+1,c	;volatile
 19885  003D72  0E00               	movlw	0
 19886  003D74  6E69               	movwf	_f_panning_to_bin,c	;volatile
 19887                           
 19888                           ;sort.c: 643: }
 19889  003D76  0012               	return	
 19890  003D78                     i2l10148:
 19891                           
 19892                           ;sort.c: 644: else if(pan_servo_state == 1200){
 19893  003D78  0EB0               	movlw	176
 19894  003D7A  186B               	xorwf	_pan_servo_state,w,c	;volatile
 19895  003D7C  E15A               	bnz	i2l10178
 19896  003D7E  0E04               	movlw	4
 19897  003D80  186C               	xorwf	_pan_servo_state+1,w,c	;volatile
 19898  003D82  A4D8               	btfss	status,2,c
 19899  003D84  D056               	goto	i2l10178
 19900                           
 19901                           ;sort.c: 646: servo_timer_counter = 0;
 19902  003D86  0E00               	movlw	0
 19903  003D88  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 19904  003D8A  0E00               	movlw	0
 19905  003D8C  6E6D               	movwf	_servo_timer_counter,c	;volatile
 19906                           
 19907                           ;sort.c: 647: }
 19908  003D8E  0012               	return	
 19909  003D90                     i2l10152:
 19910                           
 19911                           ;sort.c: 652: updateServoPosition(1050, 3);
 19912  003D90  0E04               	movlw	4
 19913  003D92  6E02               	movwf	i2updateServoPosition@time_us+1,c
 19914  003D94  0E1A               	movlw	26
 19915  003D96  6E01               	movwf	i2updateServoPosition@time_us,c
 19916  003D98  0E00               	movlw	0
 19917  003D9A  6E04               	movwf	i2updateServoPosition@timer+1,c
 19918  003D9C  0E03               	movlw	3
 19919  003D9E  6E03               	movwf	i2updateServoPosition@timer,c
 19920  003DA0  EC61  F029         	call	i2_updateServoPosition	;wreg free
 19921                           
 19922                           ;sort.c: 653: servo_timer_counter = 0;
 19923  003DA4  0E00               	movlw	0
 19924  003DA6  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 19925  003DA8  0E00               	movlw	0
 19926  003DAA  6E6D               	movwf	_servo_timer_counter,c	;volatile
 19927                           
 19928                           ;sort.c: 654: servo_timer_target = 750;
 19929  003DAC  0E02               	movlw	2
 19930  003DAE  6E70               	movwf	_servo_timer_target+1,c	;volatile
 19931  003DB0  0EEE               	movlw	238
 19932  003DB2  6E6F               	movwf	_servo_timer_target,c	;volatile
 19933                           
 19934                           ;sort.c: 655: break;
 19935  003DB4  0012               	return	
 19936  003DB6                     i2l10158:
 19937                           
 19938                           ;sort.c: 657: updateServoPosition(1050, 3);
 19939  003DB6  0E04               	movlw	4
 19940  003DB8  6E02               	movwf	i2updateServoPosition@time_us+1,c
 19941  003DBA  0E1A               	movlw	26
 19942  003DBC  6E01               	movwf	i2updateServoPosition@time_us,c
 19943  003DBE  0E00               	movlw	0
 19944  003DC0  6E04               	movwf	i2updateServoPosition@timer+1,c
 19945  003DC2  0E03               	movlw	3
 19946  003DC4  6E03               	movwf	i2updateServoPosition@timer,c
 19947  003DC6  EC61  F029         	call	i2_updateServoPosition	;wreg free
 19948                           
 19949                           ;sort.c: 658: servo_timer_counter = 0;
 19950  003DCA  0E00               	movlw	0
 19951  003DCC  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 19952  003DCE  0E00               	movlw	0
 19953  003DD0  6E6D               	movwf	_servo_timer_counter,c	;volatile
 19954                           
 19955                           ;sort.c: 659: servo_timer_target = 750;
 19956  003DD2  0E02               	movlw	2
 19957  003DD4  6E70               	movwf	_servo_timer_target+1,c	;volatile
 19958  003DD6  0EEE               	movlw	238
 19959  003DD8  6E6F               	movwf	_servo_timer_target,c	;volatile
 19960                           
 19961                           ;sort.c: 660: break;
 19962  003DDA  0012               	return	
 19963  003DDC                     i2l10164:
 19964                           
 19965                           ;sort.c: 663: updateServoPosition(1200, 1);
 19966  003DDC  0E04               	movlw	4
 19967  003DDE  6E02               	movwf	i2updateServoPosition@time_us+1,c
 19968  003DE0  0EB0               	movlw	176
 19969  003DE2  6E01               	movwf	i2updateServoPosition@time_us,c
 19970  003DE4  0E00               	movlw	0
 19971  003DE6  6E04               	movwf	i2updateServoPosition@timer+1,c
 19972  003DE8  0E01               	movlw	1
 19973  003DEA  6E03               	movwf	i2updateServoPosition@timer,c
 19974  003DEC  EC61  F029         	call	i2_updateServoPosition	;wreg free
 19975                           
 19976                           ;sort.c: 664: updateServoPosition(1050, 3);
 19977  003DF0  0E04               	movlw	4
 19978  003DF2  6E02               	movwf	i2updateServoPosition@time_us+1,c
 19979  003DF4  0E1A               	movlw	26
 19980  003DF6  6E01               	movwf	i2updateServoPosition@time_us,c
 19981  003DF8  0E00               	movlw	0
 19982  003DFA  6E04               	movwf	i2updateServoPosition@timer+1,c
 19983  003DFC  0E03               	movlw	3
 19984  003DFE  6E03               	movwf	i2updateServoPosition@timer,c
 19985  003E00  EC61  F029         	call	i2_updateServoPosition	;wreg free
 19986                           
 19987                           ;sort.c: 665: servo_timer_counter = 0;
 19988  003E04  0E00               	movlw	0
 19989  003E06  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 19990  003E08  0E00               	movlw	0
 19991  003E0A  6E6D               	movwf	_servo_timer_counter,c	;volatile
 19992                           
 19993                           ;sort.c: 666: servo_timer_target = 9999;
 19994  003E0C  0E27               	movlw	39
 19995  003E0E  6E70               	movwf	_servo_timer_target+1,c	;volatile
 19996  003E10  0E0F               	movlw	15
 19997  003E12  6E6F               	movwf	_servo_timer_target,c	;volatile
 19998                           
 19999                           ;sort.c: 668: f_can_distributed = 1;
 20000  003E14  0E00               	movlw	0
 20001  003E16  0101               	movlb	1	; () banked
 20002  003E18  6F38               	movwf	(_f_can_distributed+1)& (0+255),b
 20003  003E1A  0E01               	movlw	1
 20004  003E1C  6F37               	movwf	_f_can_distributed& (0+255),b
 20005                           
 20006                           ; BSR set to: 1
 20007                           ;sort.c: 669: if(f_lastCan == 1){
 20008  003E1E  0100               	movlb	0	; () banked
 20009  003E20  05EA               	decf	_f_lastCan& (0+255),w,b
 20010  003E22  0100               	movlb	0	; () banked
 20011  003E24  11EB               	iorwf	(_f_lastCan+1)& (0+255),w,b
 20012  003E26  A4D8               	btfss	status,2,c
 20013  003E28  0012               	return	
 20014                           
 20015                           ; BSR set to: 0
 20016                           ;sort.c: 670: machine_state = DoneSorting_state;
 20017  003E2A  0E02               	movlw	2
 20018  003E2C  0100               	movlb	0	; () banked
 20019  003E2E  6FFC               	movwf	_machine_state& (0+255),b
 20020                           
 20021                           ; BSR set to: 0
 20022                           ;sort.c: 676: }
 20023                           
 20024                           ; BSR set to: 0
 20025                           ;sort.c: 675: break;
 20026                           
 20027                           ;sort.c: 674: default:
 20028                           
 20029                           ; BSR set to: 0
 20030                           ;sort.c: 671: }
 20031                           ;sort.c: 672: break;
 20032  003E30  0012               	return	
 20033  003E32                     i2l10178:
 20034  003E32  C071  F009         	movff	_tilt_servo_state,??_updateServoStates	;volatile
 20035  003E36  C072  F00A         	movff	_tilt_servo_state+1,??_updateServoStates+1	;volatile
 20036                           
 20037                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 20038                           ; Switch size 1, requested type "space"
 20039                           ; Number of cases is 2, Range of values is 4 to 5
 20040                           ; switch strategies available:
 20041                           ; Name         Instructions Cycles
 20042                           ; simple_byte            7     4 (average)
 20043                           ;	Chosen strategy is simple_byte
 20044  003E3A  500A               	movf	??_updateServoStates+1,w,c
 20045  003E3C  0A04               	xorlw	4	; case 4
 20046  003E3E  B4D8               	btfsc	status,2,c
 20047  003E40  D004               	goto	i2l10808
 20048  003E42  0A01               	xorlw	1	; case 5
 20049  003E44  A4D8               	btfss	status,2,c
 20050  003E46  0012               	return	
 20051  003E48  D008               	goto	i2l10810
 20052  003E4A                     i2l10808:
 20053                           
 20054                           ; Switch size 1, requested type "space"
 20055                           ; Number of cases is 2, Range of values is 26 to 236
 20056                           ; switch strategies available:
 20057                           ; Name         Instructions Cycles
 20058                           ; simple_byte            7     4 (average)
 20059                           ;	Chosen strategy is simple_byte
 20060  003E4A  5009               	movf	??_updateServoStates,w,c
 20061  003E4C  0A1A               	xorlw	26	; case 26
 20062  003E4E  B4D8               	btfsc	status,2,c
 20063  003E50  D7C5               	goto	i2l10164
 20064  003E52  0AF6               	xorlw	246	; case 236
 20065  003E54  A4D8               	btfss	status,2,c
 20066  003E56  0012               	return	
 20067  003E58  D79B               	goto	i2l10152
 20068  003E5A                     i2l10810:
 20069                           
 20070                           ; Switch size 1, requested type "space"
 20071                           ; Number of cases is 1, Range of values is 110 to 110
 20072                           ; switch strategies available:
 20073                           ; Name         Instructions Cycles
 20074                           ; simple_byte            4     3 (average)
 20075                           ;	Chosen strategy is simple_byte
 20076  003E5A  5009               	movf	??_updateServoStates,w,c
 20077  003E5C  0A6E               	xorlw	110	; case 110
 20078  003E5E  A4D8               	btfss	status,2,c
 20079  003E60  0012               	return	
 20080  003E62  D7A9               	goto	i2l10158
 20081  003E64                     __end_of_updateServoStates:
 20082                           	opt stack 0
 20083                           pclatu	equ	0xFFB
 20084                           pclath	equ	0xFFA
 20085                           tblptru	equ	0xFF8
 20086                           tblptrh	equ	0xFF7
 20087                           tblptrl	equ	0xFF6
 20088                           tablat	equ	0xFF5
 20089                           prodh	equ	0xFF4
 20090                           prodl	equ	0xFF3
 20091                           intcon	equ	0xFF2
 20092                           intcon2	equ	0xFF1
 20093                           intcon3	equ	0xFF0
 20094                           indf0	equ	0xFEF
 20095                           postinc0	equ	0xFEE
 20096                           fsr0h	equ	0xFEA
 20097                           fsr0l	equ	0xFE9
 20098                           wreg	equ	0xFE8
 20099                           postdec1	equ	0xFE5
 20100                           fsr1h	equ	0xFE2
 20101                           fsr1l	equ	0xFE1
 20102                           indf2	equ	0xFDF
 20103                           postinc2	equ	0xFDE
 20104                           postdec2	equ	0xFDD
 20105                           fsr2h	equ	0xFDA
 20106                           fsr2l	equ	0xFD9
 20107                           status	equ	0xFD8
 20108                           
 20109 ;; *************** function i2_updateServoPosition *****************
 20110 ;; Defined at:
 20111 ;;		line 596 in file "sort.c"
 20112 ;; Parameters:    Size  Location     Type
 20113 ;;  time_us         2    0[COMRAM] int 
 20114 ;;  timer           2    2[COMRAM] int 
 20115 ;; Auto vars:     Size  Location     Type
 20116 ;;  updateServoP    2    6[COMRAM] unsigned int 
 20117 ;; Return value:  Size  Location     Type
 20118 ;;                  1    wreg      void 
 20119 ;; Registers used:
 20120 ;;		wreg, status,2, status,0
 20121 ;; Tracked objects:
 20122 ;;		On entry : 0/0
 20123 ;;		On exit  : 0/0
 20124 ;;		Unchanged: 0/0
 20125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20126 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20127 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20128 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20129 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20130 ;;Total ram usage:        8 bytes
 20131 ;; Hardware stack levels used:    1
 20132 ;; This function calls:
 20133 ;;		Nothing
 20134 ;; This function is called by:
 20135 ;;		_updateServoStates
 20136 ;; This function uses a non-reentrant model
 20137 ;;
 20138                           
 20139                           	psect	text66
 20140  0052C2                     __ptext66:
 20141                           	opt stack 0
 20142  0052C2                     i2_updateServoPosition:
 20143                           	opt stack 22
 20144                           
 20145                           ;sort.c: 597: unsigned int my_time = 65535 - time_us;
 20146                           
 20147                           ;incstack = 0
 20148  0052C2  C001  F005         	movff	i2updateServoPosition@time_us,??i2_updateServoPosition
 20149  0052C6  C002  F006         	movff	i2updateServoPosition@time_us+1,??i2_updateServoPosition+1
 20150  0052CA  1E05               	comf	??i2_updateServoPosition,f,c
 20151  0052CC  1E06               	comf	??i2_updateServoPosition+1,f,c
 20152  0052CE  4A05               	infsnz	??i2_updateServoPosition,f,c
 20153  0052D0  2A06               	incf	??i2_updateServoPosition+1,f,c
 20154  0052D2  0EFF               	movlw	255
 20155  0052D4  2405               	addwf	??i2_updateServoPosition,w,c
 20156  0052D6  6E07               	movwf	i2updateServoPosition@my_time,c
 20157  0052D8  0EFF               	movlw	255
 20158  0052DA  2006               	addwfc	??i2_updateServoPosition+1,w,c
 20159  0052DC  6E08               	movwf	i2updateServoPosition@my_time+1,c
 20160                           
 20161                           ;sort.c: 598: switch(timer){
 20162  0052DE  D015               	goto	i2l9282
 20163  0052E0                     i2l9276:
 20164                           
 20165                           ;sort.c: 600: servoTimes[0] = my_time >> 8;
 20166  0052E0  5008               	movf	i2updateServoPosition@my_time+1,w,c
 20167  0052E2  6E5B               	movwf	_servoTimes,c
 20168  0052E4  6A5C               	clrf	_servoTimes+1,c
 20169                           
 20170                           ;sort.c: 601: servoTimes[1] = my_time & 0xFF;
 20171  0052E6  5007               	movf	i2updateServoPosition@my_time,w,c
 20172  0052E8  6E5D               	movwf	_servoTimes+2,c
 20173  0052EA  6A5E               	clrf	_servoTimes+3,c
 20174                           
 20175                           ;sort.c: 603: pan_servo_state = time_us;
 20176  0052EC  C001  F06B         	movff	i2updateServoPosition@time_us,_pan_servo_state	;volatile
 20177  0052F0  C002  F06C         	movff	i2updateServoPosition@time_us+1,_pan_servo_state+1	;volatile
 20178  0052F4                     i2l944:
 20179                           
 20180                           ;sort.c: 605: servoTimes[2] = my_time >> 8;
 20181  0052F4  5008               	movf	i2updateServoPosition@my_time+1,w,c
 20182  0052F6  6E5F               	movwf	_servoTimes+4,c
 20183  0052F8  6A60               	clrf	_servoTimes+5,c
 20184                           
 20185                           ;sort.c: 606: servoTimes[3] = my_time & 0xFF;
 20186  0052FA  5007               	movf	i2updateServoPosition@my_time,w,c
 20187  0052FC  6E61               	movwf	_servoTimes+6,c
 20188  0052FE  6A62               	clrf	_servoTimes+7,c
 20189                           
 20190                           ;sort.c: 608: tilt_servo_state = time_us;
 20191  005300  C001  F071         	movff	i2updateServoPosition@time_us,_tilt_servo_state	;volatile
 20192  005304  C002  F072         	movff	i2updateServoPosition@time_us+1,_tilt_servo_state+1	;volatile
 20193                           
 20194                           ;sort.c: 609: }
 20195  005308  0012               	return	
 20196  00530A                     i2l9282:
 20197  00530A  C003  F005         	movff	i2updateServoPosition@timer,??i2_updateServoPosition
 20198  00530E  C004  F006         	movff	i2updateServoPosition@timer+1,??i2_updateServoPosition+1
 20199                           
 20200                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 20201                           ; Switch size 1, requested type "space"
 20202                           ; Number of cases is 1, Range of values is 0 to 0
 20203                           ; switch strategies available:
 20204                           ; Name         Instructions Cycles
 20205                           ; simple_byte            4     3 (average)
 20206                           ;	Chosen strategy is simple_byte
 20207  005312  5006               	movf	??i2_updateServoPosition+1,w,c
 20208  005314  0A00               	xorlw	0	; case 0
 20209  005316  A4D8               	btfss	status,2,c
 20210  005318  0012               	return	
 20211                           
 20212                           ; Switch size 1, requested type "space"
 20213                           ; Number of cases is 2, Range of values is 1 to 3
 20214                           ; switch strategies available:
 20215                           ; Name         Instructions Cycles
 20216                           ; simple_byte            7     4 (average)
 20217                           ;	Chosen strategy is simple_byte
 20218  00531A  5005               	movf	??i2_updateServoPosition,w,c
 20219  00531C  0A01               	xorlw	1	; case 1
 20220  00531E  B4D8               	btfsc	status,2,c
 20221  005320  D7DF               	goto	i2l9276
 20222  005322  0A02               	xorlw	2	; case 3
 20223  005324  A4D8               	btfss	status,2,c
 20224  005326  0012               	return	
 20225  005328  D7E5               	goto	i2l944
 20226  00532A                     __end_ofi2_updateServoPosition:
 20227                           	opt stack 0
 20228                           pclatu	equ	0xFFB
 20229                           pclath	equ	0xFFA
 20230                           tblptru	equ	0xFF8
 20231                           tblptrh	equ	0xFF7
 20232                           tblptrl	equ	0xFF6
 20233                           tablat	equ	0xFF5
 20234                           prodh	equ	0xFF4
 20235                           prodl	equ	0xFF3
 20236                           intcon	equ	0xFF2
 20237                           intcon2	equ	0xFF1
 20238                           intcon3	equ	0xFF0
 20239                           indf0	equ	0xFEF
 20240                           postinc0	equ	0xFEE
 20241                           fsr0h	equ	0xFEA
 20242                           fsr0l	equ	0xFE9
 20243                           wreg	equ	0xFE8
 20244                           postdec1	equ	0xFE5
 20245                           fsr1h	equ	0xFE2
 20246                           fsr1l	equ	0xFE1
 20247                           indf2	equ	0xFDF
 20248                           postinc2	equ	0xFDE
 20249                           postdec2	equ	0xFDD
 20250                           fsr2h	equ	0xFDA
 20251                           fsr2l	equ	0xFD9
 20252                           status	equ	0xFD8
 20253                           
 20254 ;; *************** function _updateMenu *****************
 20255 ;; Defined at:
 20256 ;;		line 216 in file "UI.c"
 20257 ;; Parameters:    Size  Location     Type
 20258 ;;		None
 20259 ;; Auto vars:     Size  Location     Type
 20260 ;;		None
 20261 ;; Return value:  Size  Location     Type
 20262 ;;                  1    wreg      void 
 20263 ;; Registers used:
 20264 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20265 ;; Tracked objects:
 20266 ;;		On entry : 0/0
 20267 ;;		On exit  : 0/0
 20268 ;;		Unchanged: 0/0
 20269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20270 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20271 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20272 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20273 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20274 ;;Total ram usage:        2 bytes
 20275 ;; Hardware stack levels used:    1
 20276 ;; Hardware stack levels required when called:    5
 20277 ;; This function calls:
 20278 ;;		_change_state_to_logs_11
 20279 ;;		_change_state_to_logs_12
 20280 ;;		_change_state_to_logs_22
 20281 ;;		_change_state_to_logs_23
 20282 ;;		_change_state_to_logs_33
 20283 ;;		_change_state_to_logs_34
 20284 ;;		_change_state_to_menu_11
 20285 ;;		_change_state_to_menu_23
 20286 ;;		_dispLogs
 20287 ;;		_inputHandler
 20288 ;;		i2_change_state_to_menu_12
 20289 ;;		i2_change_state_to_menu_22
 20290 ;;		i2_change_state_to_menu_start
 20291 ;; This function is called by:
 20292 ;;		_handler
 20293 ;; This function uses a non-reentrant model
 20294 ;;
 20295                           
 20296                           	psect	text67
 20297  0033D0                     __ptext67:
 20298                           	opt stack 0
 20299  0033D0                     _updateMenu:
 20300                           	opt stack 18
 20301                           
 20302                           ;UI.c: 217: up = 0; down = 0; enter = 0; back = 0;
 20303                           
 20304                           ;incstack = 0
 20305  0033D0  0E00               	movlw	0
 20306  0033D2  6E76               	movwf	_up+1,c
 20307  0033D4  0E00               	movlw	0
 20308  0033D6  6E75               	movwf	_up,c
 20309  0033D8  0E00               	movlw	0
 20310  0033DA  6E66               	movwf	_down+1,c
 20311  0033DC  0E00               	movlw	0
 20312  0033DE  6E65               	movwf	_down,c
 20313  0033E0  0E00               	movlw	0
 20314  0033E2  6E68               	movwf	_enter+1,c
 20315  0033E4  0E00               	movlw	0
 20316  0033E6  6E67               	movwf	_enter,c
 20317  0033E8  0E00               	movlw	0
 20318  0033EA  6E64               	movwf	_back+1,c
 20319  0033EC  0E00               	movlw	0
 20320  0033EE  6E63               	movwf	_back,c
 20321                           
 20322                           ;UI.c: 218: (INTCONbits.GIE = 0);
 20323  0033F0  9EF2               	bcf	intcon,7,c	;volatile
 20324                           
 20325                           ;UI.c: 220: if (inputHandler()
 20326                           ;UI.c: 223: ){
 20327  0033F2  EC63  F01C         	call	_inputHandler	;wreg free
 20328  0033F6  502A               	movf	?_inputHandler,w,c
 20329  0033F8  102B               	iorwf	?_inputHandler+1,w,c
 20330  0033FA  A4D8               	btfss	status,2,c
 20331  0033FC  D112               	goto	i2l9852
 20332  0033FE  D146               	goto	i2l268
 20333  003400                     i2l9704:
 20334                           
 20335                           ;UI.c: 227: change_state_to_menu_11();
 20336  003400  ECC8  F02C         	call	_change_state_to_menu_11	;wreg free
 20337                           
 20338                           ;UI.c: 228: break;
 20339  003404  D143               	goto	i2l268
 20340  003406                     i2l9706:
 20341                           
 20342                           ;UI.c: 231: if(up){
 20343  003406  5075               	movf	_up,w,c
 20344  003408  1076               	iorwf	_up+1,w,c
 20345  00340A  B4D8               	btfsc	status,2,c
 20346  00340C  D003               	goto	i2l9710
 20347                           
 20348                           ;UI.c: 232: change_state_to_menu_23();
 20349  00340E  ECB0  F02C         	call	_change_state_to_menu_23	;wreg free
 20350                           
 20351                           ;UI.c: 233: }
 20352  003412  D13C               	goto	i2l268
 20353  003414                     i2l9710:
 20354                           
 20355                           ;UI.c: 234: else if(down){
 20356  003414  5065               	movf	_down,w,c
 20357  003416  1066               	iorwf	_down+1,w,c
 20358  003418  B4D8               	btfsc	status,2,c
 20359  00341A  D003               	goto	i2l9714
 20360                           
 20361                           ;UI.c: 235: change_state_to_menu_12();
 20362  00341C  EC98  F02C         	call	i2_change_state_to_menu_12	;wreg free
 20363                           
 20364                           ;UI.c: 236: }
 20365  003420  D135               	goto	i2l268
 20366  003422                     i2l9714:
 20367                           
 20368                           ;UI.c: 237: else if(enter){
 20369  003422  5067               	movf	_enter,w,c
 20370  003424  1068               	iorwf	_enter+1,w,c
 20371  003426  B4D8               	btfsc	status,2,c
 20372  003428  D131               	goto	i2l268
 20373                           
 20374                           ;UI.c: 238: change_state_to_menu_start();
 20375  00342A  ECDB  F02D         	call	i2_change_state_to_menu_start	;wreg free
 20376                           
 20377                           ;UI.c: 239: }
 20378                           ;UI.c: 240: break;
 20379  00342E  D12E               	goto	i2l268
 20380  003430                     i2l9718:
 20381                           
 20382                           ;UI.c: 243: if(up){
 20383  003430  5075               	movf	_up,w,c
 20384  003432  1076               	iorwf	_up+1,w,c
 20385  003434  B4D8               	btfsc	status,2,c
 20386  003436  D003               	goto	i2l9722
 20387                           
 20388                           ;UI.c: 244: change_state_to_menu_11();
 20389  003438  ECC8  F02C         	call	_change_state_to_menu_11	;wreg free
 20390                           
 20391                           ;UI.c: 245: }
 20392  00343C  D127               	goto	i2l268
 20393  00343E                     i2l9722:
 20394                           
 20395                           ;UI.c: 246: else if(down){
 20396  00343E  5065               	movf	_down,w,c
 20397  003440  1066               	iorwf	_down+1,w,c
 20398  003442  B4D8               	btfsc	status,2,c
 20399  003444  D011               	goto	i2l9738
 20400                           
 20401                           ;UI.c: 247: change_state_to_menu_23();
 20402  003446  ECB0  F02C         	call	_change_state_to_menu_23	;wreg free
 20403                           
 20404                           ;UI.c: 248: }
 20405  00344A  D120               	goto	i2l268
 20406  00344C                     i2l9730:
 20407                           
 20408                           ;UI.c: 255: if(up){
 20409  00344C  5075               	movf	_up,w,c
 20410  00344E  1076               	iorwf	_up+1,w,c
 20411  003450  B4D8               	btfsc	status,2,c
 20412  003452  D003               	goto	i2l9734
 20413                           
 20414                           ;UI.c: 256: change_state_to_menu_11();
 20415  003454  ECC8  F02C         	call	_change_state_to_menu_11	;wreg free
 20416                           
 20417                           ;UI.c: 257: }
 20418  003458  D119               	goto	i2l268
 20419  00345A                     i2l9734:
 20420                           
 20421                           ;UI.c: 258: else if(down){
 20422  00345A  5065               	movf	_down,w,c
 20423  00345C  1066               	iorwf	_down+1,w,c
 20424  00345E  B4D8               	btfsc	status,2,c
 20425  003460  D003               	goto	i2l9738
 20426                           
 20427                           ;UI.c: 259: change_state_to_menu_23();
 20428  003462  ECB0  F02C         	call	_change_state_to_menu_23	;wreg free
 20429                           
 20430                           ;UI.c: 260: }
 20431  003466  D112               	goto	i2l268
 20432  003468                     i2l9738:
 20433                           
 20434                           ;UI.c: 261: else if(enter){
 20435  003468  5067               	movf	_enter,w,c
 20436  00346A  1068               	iorwf	_enter+1,w,c
 20437  00346C  B4D8               	btfsc	status,2,c
 20438  00346E  D10E               	goto	i2l268
 20439                           
 20440                           ;UI.c: 262: machine_state = Sorting_state;
 20441  003470  0E01               	movlw	1
 20442  003472  0100               	movlb	0	; () banked
 20443  003474  6FFC               	movwf	_machine_state& (0+255),b
 20444                           
 20445                           ; BSR set to: 0
 20446                           ;UI.c: 263: }
 20447                           ;UI.c: 264: break;
 20448                           
 20449                           ; BSR set to: 0
 20450                           
 20451                           ; BSR set to: 0
 20452  003476  D10A               	goto	i2l268
 20453  003478                     i2l9742:
 20454                           
 20455                           ;UI.c: 267: if(up){
 20456  003478  5075               	movf	_up,w,c
 20457  00347A  1076               	iorwf	_up+1,w,c
 20458  00347C  B4D8               	btfsc	status,2,c
 20459  00347E  D003               	goto	i2l9746
 20460                           
 20461                           ;UI.c: 268: change_state_to_menu_22();
 20462  003480  EC80  F02C         	call	i2_change_state_to_menu_22	;wreg free
 20463                           
 20464                           ;UI.c: 269: }
 20465  003484  D103               	goto	i2l268
 20466  003486                     i2l9746:
 20467                           
 20468                           ;UI.c: 270: else if(down){
 20469  003486  5065               	movf	_down,w,c
 20470  003488  1066               	iorwf	_down+1,w,c
 20471  00348A  B4D8               	btfsc	status,2,c
 20472  00348C  D003               	goto	i2l9750
 20473                           
 20474                           ;UI.c: 271: change_state_to_menu_11();
 20475  00348E  ECC8  F02C         	call	_change_state_to_menu_11	;wreg free
 20476                           
 20477                           ;UI.c: 272: }
 20478  003492  D0FC               	goto	i2l268
 20479  003494                     i2l9750:
 20480                           
 20481                           ;UI.c: 273: else if(enter){
 20482  003494  5067               	movf	_enter,w,c
 20483  003496  1068               	iorwf	_enter+1,w,c
 20484  003498  B4D8               	btfsc	status,2,c
 20485  00349A  D0F8               	goto	i2l268
 20486                           
 20487                           ;UI.c: 274: change_state_to_logs_11();
 20488  00349C  EC40  F02D         	call	_change_state_to_logs_11	;wreg free
 20489                           
 20490                           ;UI.c: 275: }
 20491                           ;UI.c: 276: break;
 20492  0034A0  D0F5               	goto	i2l268
 20493  0034A2                     i2l9754:
 20494                           
 20495                           ;UI.c: 279: if(up){
 20496  0034A2  5075               	movf	_up,w,c
 20497  0034A4  1076               	iorwf	_up+1,w,c
 20498  0034A6  B4D8               	btfsc	status,2,c
 20499  0034A8  D003               	goto	i2l9758
 20500                           
 20501                           ;UI.c: 280: change_state_to_logs_34();
 20502  0034AA  ECE0  F02C         	call	_change_state_to_logs_34	;wreg free
 20503                           
 20504                           ;UI.c: 281: }
 20505  0034AE  D0EE               	goto	i2l268
 20506  0034B0                     i2l9758:
 20507                           
 20508                           ;UI.c: 282: else if(down){
 20509  0034B0  5065               	movf	_down,w,c
 20510  0034B2  1066               	iorwf	_down+1,w,c
 20511  0034B4  B4D8               	btfsc	status,2,c
 20512  0034B6  D003               	goto	i2l9762
 20513                           
 20514                           ;UI.c: 283: change_state_to_logs_12();
 20515  0034B8  EC28  F02D         	call	_change_state_to_logs_12	;wreg free
 20516                           
 20517                           ;UI.c: 284: }
 20518  0034BC  D0E7               	goto	i2l268
 20519  0034BE                     i2l9762:
 20520                           
 20521                           ;UI.c: 285: else if(enter){
 20522  0034BE  5067               	movf	_enter,w,c
 20523  0034C0  1068               	iorwf	_enter+1,w,c
 20524  0034C2  B4D8               	btfsc	status,2,c
 20525  0034C4  D007               	goto	i2l9766
 20526                           
 20527                           ;UI.c: 286: dispLogs(1);
 20528  0034C6  0E00               	movlw	0
 20529  0034C8  6E13               	movwf	dispLogs@myLog+1,c
 20530  0034CA  0E01               	movlw	1
 20531  0034CC  6E12               	movwf	dispLogs@myLog,c
 20532  0034CE  EC15  F02E         	call	_dispLogs	;wreg free
 20533                           
 20534                           ;UI.c: 287: }
 20535  0034D2  D0DC               	goto	i2l268
 20536  0034D4                     i2l9766:
 20537                           
 20538                           ;UI.c: 288: else if(back){
 20539  0034D4  5063               	movf	_back,w,c
 20540  0034D6  1064               	iorwf	_back+1,w,c
 20541  0034D8  B4D8               	btfsc	status,2,c
 20542  0034DA  D0D8               	goto	i2l268
 20543                           
 20544                           ;UI.c: 289: change_state_to_menu_23();
 20545  0034DC  ECB0  F02C         	call	_change_state_to_menu_23	;wreg free
 20546                           
 20547                           ;UI.c: 290: }
 20548                           ;UI.c: 291: break;
 20549  0034E0  D0D5               	goto	i2l268
 20550  0034E2                     i2l9770:
 20551                           
 20552                           ;UI.c: 294: if(up){
 20553  0034E2  5075               	movf	_up,w,c
 20554  0034E4  1076               	iorwf	_up+1,w,c
 20555  0034E6  B4D8               	btfsc	status,2,c
 20556  0034E8  D003               	goto	i2l9774
 20557                           
 20558                           ;UI.c: 295: change_state_to_logs_11();
 20559  0034EA  EC40  F02D         	call	_change_state_to_logs_11	;wreg free
 20560                           
 20561                           ;UI.c: 296: }
 20562  0034EE  D0CE               	goto	i2l268
 20563  0034F0                     i2l9774:
 20564                           
 20565                           ;UI.c: 297: else if(down){
 20566  0034F0  5065               	movf	_down,w,c
 20567  0034F2  1066               	iorwf	_down+1,w,c
 20568  0034F4  B4D8               	btfsc	status,2,c
 20569  0034F6  D003               	goto	i2l9778
 20570                           
 20571                           ;UI.c: 298: change_state_to_logs_23();
 20572  0034F8  EC6F  F02D         	call	_change_state_to_logs_23	;wreg free
 20573                           
 20574                           ;UI.c: 299: }
 20575  0034FC  D0C7               	goto	i2l268
 20576  0034FE                     i2l9778:
 20577                           
 20578                           ;UI.c: 300: else if(enter){
 20579  0034FE  5067               	movf	_enter,w,c
 20580  003500  1068               	iorwf	_enter+1,w,c
 20581  003502  B4D8               	btfsc	status,2,c
 20582  003504  D007               	goto	i2l9782
 20583                           
 20584                           ;UI.c: 301: dispLogs(2);
 20585  003506  0E00               	movlw	0
 20586  003508  6E13               	movwf	dispLogs@myLog+1,c
 20587  00350A  0E02               	movlw	2
 20588  00350C  6E12               	movwf	dispLogs@myLog,c
 20589  00350E  EC15  F02E         	call	_dispLogs	;wreg free
 20590                           
 20591                           ;UI.c: 302: }
 20592  003512  D0BC               	goto	i2l268
 20593  003514                     i2l9782:
 20594                           
 20595                           ;UI.c: 303: else if(back){
 20596  003514  5063               	movf	_back,w,c
 20597  003516  1064               	iorwf	_back+1,w,c
 20598  003518  B4D8               	btfsc	status,2,c
 20599  00351A  D0B8               	goto	i2l268
 20600                           
 20601                           ;UI.c: 304: change_state_to_menu_23();
 20602  00351C  ECB0  F02C         	call	_change_state_to_menu_23	;wreg free
 20603                           
 20604                           ;UI.c: 305: }
 20605                           ;UI.c: 306: break;
 20606  003520  D0B5               	goto	i2l268
 20607  003522                     i2l9786:
 20608                           
 20609                           ;UI.c: 309: if(up){
 20610  003522  5075               	movf	_up,w,c
 20611  003524  1076               	iorwf	_up+1,w,c
 20612  003526  B4D8               	btfsc	status,2,c
 20613  003528  D003               	goto	i2l9790
 20614                           
 20615                           ;UI.c: 310: change_state_to_logs_11();
 20616  00352A  EC40  F02D         	call	_change_state_to_logs_11	;wreg free
 20617                           
 20618                           ;UI.c: 311: }
 20619  00352E  D0AE               	goto	i2l268
 20620  003530                     i2l9790:
 20621                           
 20622                           ;UI.c: 312: else if(down){
 20623  003530  5065               	movf	_down,w,c
 20624  003532  1066               	iorwf	_down+1,w,c
 20625  003534  B4D8               	btfsc	status,2,c
 20626  003536  D003               	goto	i2l9794
 20627                           
 20628                           ;UI.c: 313: change_state_to_logs_23();
 20629  003538  EC6F  F02D         	call	_change_state_to_logs_23	;wreg free
 20630                           
 20631                           ;UI.c: 314: }
 20632  00353C  D0A7               	goto	i2l268
 20633  00353E                     i2l9794:
 20634                           
 20635                           ;UI.c: 315: else if(enter){
 20636  00353E  5067               	movf	_enter,w,c
 20637  003540  1068               	iorwf	_enter+1,w,c
 20638  003542  B4D8               	btfsc	status,2,c
 20639  003544  D007               	goto	i2l9798
 20640                           
 20641                           ;UI.c: 316: dispLogs(2);
 20642  003546  0E00               	movlw	0
 20643  003548  6E13               	movwf	dispLogs@myLog+1,c
 20644  00354A  0E02               	movlw	2
 20645  00354C  6E12               	movwf	dispLogs@myLog,c
 20646  00354E  EC15  F02E         	call	_dispLogs	;wreg free
 20647                           
 20648                           ;UI.c: 317: }
 20649  003552  D09C               	goto	i2l268
 20650  003554                     i2l9798:
 20651                           
 20652                           ;UI.c: 318: else if(back){
 20653  003554  5063               	movf	_back,w,c
 20654  003556  1064               	iorwf	_back+1,w,c
 20655  003558  B4D8               	btfsc	status,2,c
 20656  00355A  D098               	goto	i2l268
 20657                           
 20658                           ;UI.c: 319: change_state_to_menu_23();
 20659  00355C  ECB0  F02C         	call	_change_state_to_menu_23	;wreg free
 20660                           
 20661                           ;UI.c: 320: }
 20662                           ;UI.c: 321: break;
 20663  003560  D095               	goto	i2l268
 20664  003562                     i2l9802:
 20665                           
 20666                           ;UI.c: 324: if(up){
 20667  003562  5075               	movf	_up,w,c
 20668  003564  1076               	iorwf	_up+1,w,c
 20669  003566  B4D8               	btfsc	status,2,c
 20670  003568  D003               	goto	i2l9806
 20671                           
 20672                           ;UI.c: 325: change_state_to_logs_22();
 20673  00356A  EC10  F02D         	call	_change_state_to_logs_22	;wreg free
 20674                           
 20675                           ;UI.c: 326: }
 20676  00356E  D08E               	goto	i2l268
 20677  003570                     i2l9806:
 20678                           
 20679                           ;UI.c: 327: else if(down){
 20680  003570  5065               	movf	_down,w,c
 20681  003572  1066               	iorwf	_down+1,w,c
 20682  003574  B4D8               	btfsc	status,2,c
 20683  003576  D003               	goto	i2l9810
 20684                           
 20685                           ;UI.c: 328: change_state_to_logs_34();
 20686  003578  ECE0  F02C         	call	_change_state_to_logs_34	;wreg free
 20687                           
 20688                           ;UI.c: 329: }
 20689  00357C  D087               	goto	i2l268
 20690  00357E                     i2l9810:
 20691                           
 20692                           ;UI.c: 330: else if(enter){
 20693  00357E  5067               	movf	_enter,w,c
 20694  003580  1068               	iorwf	_enter+1,w,c
 20695  003582  B4D8               	btfsc	status,2,c
 20696  003584  D007               	goto	i2l9814
 20697                           
 20698                           ;UI.c: 331: dispLogs(3);
 20699  003586  0E00               	movlw	0
 20700  003588  6E13               	movwf	dispLogs@myLog+1,c
 20701  00358A  0E03               	movlw	3
 20702  00358C  6E12               	movwf	dispLogs@myLog,c
 20703  00358E  EC15  F02E         	call	_dispLogs	;wreg free
 20704                           
 20705                           ;UI.c: 332: }
 20706  003592  D07C               	goto	i2l268
 20707  003594                     i2l9814:
 20708                           
 20709                           ;UI.c: 333: else if(back){
 20710  003594  5063               	movf	_back,w,c
 20711  003596  1064               	iorwf	_back+1,w,c
 20712  003598  B4D8               	btfsc	status,2,c
 20713  00359A  D078               	goto	i2l268
 20714                           
 20715                           ;UI.c: 334: change_state_to_menu_23();
 20716  00359C  ECB0  F02C         	call	_change_state_to_menu_23	;wreg free
 20717                           
 20718                           ;UI.c: 335: }
 20719                           ;UI.c: 336: break;
 20720  0035A0  D075               	goto	i2l268
 20721  0035A2                     i2l9818:
 20722                           
 20723                           ;UI.c: 339: if(up){
 20724  0035A2  5075               	movf	_up,w,c
 20725  0035A4  1076               	iorwf	_up+1,w,c
 20726  0035A6  B4D8               	btfsc	status,2,c
 20727  0035A8  D003               	goto	i2l9822
 20728                           
 20729                           ;UI.c: 340: change_state_to_logs_22();
 20730  0035AA  EC10  F02D         	call	_change_state_to_logs_22	;wreg free
 20731                           
 20732                           ;UI.c: 341: }
 20733  0035AE  D06E               	goto	i2l268
 20734  0035B0                     i2l9822:
 20735                           
 20736                           ;UI.c: 342: else if(down){
 20737  0035B0  5065               	movf	_down,w,c
 20738  0035B2  1066               	iorwf	_down+1,w,c
 20739  0035B4  B4D8               	btfsc	status,2,c
 20740  0035B6  D003               	goto	i2l9826
 20741                           
 20742                           ;UI.c: 343: change_state_to_logs_34();
 20743  0035B8  ECE0  F02C         	call	_change_state_to_logs_34	;wreg free
 20744                           
 20745                           ;UI.c: 344: }
 20746  0035BC  D067               	goto	i2l268
 20747  0035BE                     i2l9826:
 20748                           
 20749                           ;UI.c: 345: else if(enter){
 20750  0035BE  5067               	movf	_enter,w,c
 20751  0035C0  1068               	iorwf	_enter+1,w,c
 20752  0035C2  B4D8               	btfsc	status,2,c
 20753  0035C4  D007               	goto	i2l9830
 20754                           
 20755                           ;UI.c: 346: dispLogs(3);
 20756  0035C6  0E00               	movlw	0
 20757  0035C8  6E13               	movwf	dispLogs@myLog+1,c
 20758  0035CA  0E03               	movlw	3
 20759  0035CC  6E12               	movwf	dispLogs@myLog,c
 20760  0035CE  EC15  F02E         	call	_dispLogs	;wreg free
 20761                           
 20762                           ;UI.c: 347: }
 20763  0035D2  D05C               	goto	i2l268
 20764  0035D4                     i2l9830:
 20765                           
 20766                           ;UI.c: 348: else if(back){
 20767  0035D4  5063               	movf	_back,w,c
 20768  0035D6  1064               	iorwf	_back+1,w,c
 20769  0035D8  B4D8               	btfsc	status,2,c
 20770  0035DA  D058               	goto	i2l268
 20771                           
 20772                           ;UI.c: 349: change_state_to_menu_23();
 20773  0035DC  ECB0  F02C         	call	_change_state_to_menu_23	;wreg free
 20774                           
 20775                           ;UI.c: 350: }
 20776                           ;UI.c: 351: break;
 20777  0035E0  D055               	goto	i2l268
 20778  0035E2                     i2l9834:
 20779                           
 20780                           ;UI.c: 354: if(up){
 20781  0035E2  5075               	movf	_up,w,c
 20782  0035E4  1076               	iorwf	_up+1,w,c
 20783  0035E6  B4D8               	btfsc	status,2,c
 20784  0035E8  D003               	goto	i2l9838
 20785                           
 20786                           ;UI.c: 355: change_state_to_logs_33();
 20787  0035EA  ECF8  F02C         	call	_change_state_to_logs_33	;wreg free
 20788                           
 20789                           ;UI.c: 356: }
 20790  0035EE  D04E               	goto	i2l268
 20791  0035F0                     i2l9838:
 20792                           
 20793                           ;UI.c: 357: else if(down){
 20794  0035F0  5065               	movf	_down,w,c
 20795  0035F2  1066               	iorwf	_down+1,w,c
 20796  0035F4  B4D8               	btfsc	status,2,c
 20797  0035F6  D003               	goto	i2l9842
 20798                           
 20799                           ;UI.c: 358: change_state_to_logs_11();
 20800  0035F8  EC40  F02D         	call	_change_state_to_logs_11	;wreg free
 20801                           
 20802                           ;UI.c: 359: }
 20803  0035FC  D047               	goto	i2l268
 20804  0035FE                     i2l9842:
 20805                           
 20806                           ;UI.c: 360: else if(enter){
 20807  0035FE  5067               	movf	_enter,w,c
 20808  003600  1068               	iorwf	_enter+1,w,c
 20809  003602  B4D8               	btfsc	status,2,c
 20810  003604  D007               	goto	i2l9846
 20811                           
 20812                           ;UI.c: 361: dispLogs(4);
 20813  003606  0E00               	movlw	0
 20814  003608  6E13               	movwf	dispLogs@myLog+1,c
 20815  00360A  0E04               	movlw	4
 20816  00360C  6E12               	movwf	dispLogs@myLog,c
 20817  00360E  EC15  F02E         	call	_dispLogs	;wreg free
 20818                           
 20819                           ;UI.c: 362: }
 20820  003612  D03C               	goto	i2l268
 20821  003614                     i2l9846:
 20822                           
 20823                           ;UI.c: 363: else if(back){
 20824  003614  5063               	movf	_back,w,c
 20825  003616  1064               	iorwf	_back+1,w,c
 20826  003618  B4D8               	btfsc	status,2,c
 20827  00361A  D038               	goto	i2l268
 20828                           
 20829                           ;UI.c: 364: change_state_to_menu_23();
 20830  00361C  ECB0  F02C         	call	_change_state_to_menu_23	;wreg free
 20831                           
 20832                           ;UI.c: 370: }
 20833                           
 20834                           ;UI.c: 369: break;
 20835                           
 20836                           ;UI.c: 368: default:
 20837                           
 20838                           ;UI.c: 365: }
 20839                           ;UI.c: 366: break;
 20840  003620  D035               	goto	i2l268
 20841  003622                     i2l9852:
 20842  003622  C0E6  F043         	movff	_cur_state,??_updateMenu
 20843  003626  C0E7  F044         	movff	_cur_state+1,??_updateMenu+1
 20844                           
 20845                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
 20846                           ; Switch size 1, requested type "space"
 20847                           ; Number of cases is 3, Range of values is 0 to 4
 20848                           ; switch strategies available:
 20849                           ; Name         Instructions Cycles
 20850                           ; simple_byte           10     6 (average)
 20851                           ;	Chosen strategy is simple_byte
 20852  00362A  5044               	movf	??_updateMenu+1,w,c
 20853  00362C  0A00               	xorlw	0	; case 0
 20854  00362E  B4D8               	btfsc	status,2,c
 20855  003630  D007               	goto	i2l10814
 20856  003632  0A03               	xorlw	3	; case 3
 20857  003634  B4D8               	btfsc	status,2,c
 20858  003636  D015               	goto	i2l10816
 20859  003638  0A07               	xorlw	7	; case 4
 20860  00363A  B4D8               	btfsc	status,2,c
 20861  00363C  D020               	goto	i2l10818
 20862  00363E  D026               	goto	i2l268
 20863  003640                     i2l10814:
 20864                           
 20865                           ; Switch size 1, requested type "space"
 20866                           ; Number of cases is 5, Range of values is 0 to 23
 20867                           ; switch strategies available:
 20868                           ; Name         Instructions Cycles
 20869                           ; simple_byte           16     9 (average)
 20870                           ;	Chosen strategy is simple_byte
 20871  003640  5043               	movf	??_updateMenu,w,c
 20872  003642  0A00               	xorlw	0	; case 0
 20873  003644  B4D8               	btfsc	status,2,c
 20874  003646  D6DC               	goto	i2l9704
 20875  003648  0A0B               	xorlw	11	; case 11
 20876  00364A  B4D8               	btfsc	status,2,c
 20877  00364C  D6DC               	goto	i2l9706
 20878  00364E  0A07               	xorlw	7	; case 12
 20879  003650  B4D8               	btfsc	status,2,c
 20880  003652  D6EE               	goto	i2l9718
 20881  003654  0A1A               	xorlw	26	; case 22
 20882  003656  B4D8               	btfsc	status,2,c
 20883  003658  D6F9               	goto	i2l9730
 20884  00365A  0A01               	xorlw	1	; case 23
 20885  00365C  B4D8               	btfsc	status,2,c
 20886  00365E  D70C               	goto	i2l9742
 20887  003660  D015               	goto	i2l268
 20888  003662                     i2l10816:
 20889                           
 20890                           ; Switch size 1, requested type "space"
 20891                           ; Number of cases is 4, Range of values is 243 to 255
 20892                           ; switch strategies available:
 20893                           ; Name         Instructions Cycles
 20894                           ; simple_byte           13     7 (average)
 20895                           ;	Chosen strategy is simple_byte
 20896  003662  5043               	movf	??_updateMenu,w,c
 20897  003664  0AF3               	xorlw	243	; case 243
 20898  003666  B4D8               	btfsc	status,2,c
 20899  003668  D71C               	goto	i2l9754
 20900  00366A  0A07               	xorlw	7	; case 244
 20901  00366C  B4D8               	btfsc	status,2,c
 20902  00366E  D739               	goto	i2l9770
 20903  003670  0A0A               	xorlw	10	; case 254
 20904  003672  B4D8               	btfsc	status,2,c
 20905  003674  D756               	goto	i2l9786
 20906  003676  0A01               	xorlw	1	; case 255
 20907  003678  B4D8               	btfsc	status,2,c
 20908  00367A  D773               	goto	i2l9802
 20909  00367C  D007               	goto	i2l268
 20910  00367E                     i2l10818:
 20911                           
 20912                           ; Switch size 1, requested type "space"
 20913                           ; Number of cases is 2, Range of values is 9 to 10
 20914                           ; switch strategies available:
 20915                           ; Name         Instructions Cycles
 20916                           ; simple_byte            7     4 (average)
 20917                           ;	Chosen strategy is simple_byte
 20918  00367E  5043               	movf	??_updateMenu,w,c
 20919  003680  0A09               	xorlw	9	; case 9
 20920  003682  B4D8               	btfsc	status,2,c
 20921  003684  D78E               	goto	i2l9818
 20922  003686  0A03               	xorlw	3	; case 10
 20923  003688  B4D8               	btfsc	status,2,c
 20924  00368A  D7AB               	goto	i2l9834
 20925  00368C                     i2l268:
 20926                           
 20927                           ;UI.c: 371: }
 20928                           ;UI.c: 372: (INTCONbits.GIE = 1);
 20929  00368C  8EF2               	bsf	intcon,7,c	;volatile
 20930  00368E  0012               	return		;funcret
 20931  003690                     __end_of_updateMenu:
 20932                           	opt stack 0
 20933                           pclatu	equ	0xFFB
 20934                           pclath	equ	0xFFA
 20935                           tblptru	equ	0xFF8
 20936                           tblptrh	equ	0xFF7
 20937                           tblptrl	equ	0xFF6
 20938                           tablat	equ	0xFF5
 20939                           prodh	equ	0xFF4
 20940                           prodl	equ	0xFF3
 20941                           intcon	equ	0xFF2
 20942                           intcon2	equ	0xFF1
 20943                           intcon3	equ	0xFF0
 20944                           indf0	equ	0xFEF
 20945                           postinc0	equ	0xFEE
 20946                           fsr0h	equ	0xFEA
 20947                           fsr0l	equ	0xFE9
 20948                           wreg	equ	0xFE8
 20949                           postdec1	equ	0xFE5
 20950                           fsr1h	equ	0xFE2
 20951                           fsr1l	equ	0xFE1
 20952                           indf2	equ	0xFDF
 20953                           postinc2	equ	0xFDE
 20954                           postdec2	equ	0xFDD
 20955                           fsr2h	equ	0xFDA
 20956                           fsr2l	equ	0xFD9
 20957                           status	equ	0xFD8
 20958                           
 20959 ;; *************** function i2_change_state_to_menu_start *****************
 20960 ;; Defined at:
 20961 ;;		line 477 in file "UI.c"
 20962 ;; Parameters:    Size  Location     Type
 20963 ;;		None
 20964 ;; Auto vars:     Size  Location     Type
 20965 ;;		None
 20966 ;; Return value:  Size  Location     Type
 20967 ;;                  1    wreg      void 
 20968 ;; Registers used:
 20969 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20970 ;; Tracked objects:
 20971 ;;		On entry : 0/0
 20972 ;;		On exit  : 0/0
 20973 ;;		Unchanged: 0/0
 20974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20975 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20976 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20977 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20978 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20979 ;;Total ram usage:        0 bytes
 20980 ;; Hardware stack levels used:    1
 20981 ;; Hardware stack levels required when called:    4
 20982 ;; This function calls:
 20983 ;;		i2_lcdInst
 20984 ;;		i2_printRTC
 20985 ;;		i2_printf
 20986 ;; This function is called by:
 20987 ;;		_updateMenu
 20988 ;;		_handler
 20989 ;; This function uses a non-reentrant model
 20990 ;;
 20991                           
 20992                           	psect	text68
 20993  005BB6                     __ptext68:
 20994                           	opt stack 0
 20995  005BB6                     i2_change_state_to_menu_start:
 20996                           	opt stack 19
 20997                           
 20998                           ;UI.c: 478: cur_state = 0;
 20999                           
 21000                           ;incstack = 0
 21001  005BB6  0E00               	movlw	0
 21002  005BB8  0100               	movlb	0	; () banked
 21003  005BBA  6FE7               	movwf	(_cur_state+1)& (0+255),b
 21004  005BBC  0E00               	movlw	0
 21005  005BBE  6FE6               	movwf	_cur_state& (0+255),b
 21006                           
 21007                           ; BSR set to: 0
 21008                           ;UI.c: 480: lcdInst(0b10000000);;
 21009  005BC0  0E80               	movlw	128
 21010  005BC2  ECBF  F02E         	call	i2_lcdInst
 21011                           
 21012                           ;UI.c: 481: printRTC();
 21013  005BC6  EC48  F01B         	call	i2_printRTC	;wreg free
 21014                           
 21015                           ;UI.c: 482: lcdInst(0b11000000);;
 21016  005BCA  0EC0               	movlw	192
 21017  005BCC  ECBF  F02E         	call	i2_lcdInst
 21018                           
 21019                           ;UI.c: 483: printf("PUSH TO CONTINUE");
 21020  005BD0  0EEA               	movlw	low STR_30
 21021  005BD2  6E0D               	movwf	i2printf@f,c
 21022  005BD4  0EFD               	movlw	high STR_30
 21023  005BD6  6E0E               	movwf	i2printf@f+1,c
 21024  005BD8  EC1F  F012         	call	i2_printf	;wreg free
 21025  005BDC  0012               	return		;funcret
 21026  005BDE                     __end_ofi2_change_state_to_menu_start:
 21027                           	opt stack 0
 21028                           pclatu	equ	0xFFB
 21029                           pclath	equ	0xFFA
 21030                           tblptru	equ	0xFF8
 21031                           tblptrh	equ	0xFF7
 21032                           tblptrl	equ	0xFF6
 21033                           tablat	equ	0xFF5
 21034                           prodh	equ	0xFF4
 21035                           prodl	equ	0xFF3
 21036                           intcon	equ	0xFF2
 21037                           intcon2	equ	0xFF1
 21038                           intcon3	equ	0xFF0
 21039                           indf0	equ	0xFEF
 21040                           postinc0	equ	0xFEE
 21041                           fsr0h	equ	0xFEA
 21042                           fsr0l	equ	0xFE9
 21043                           wreg	equ	0xFE8
 21044                           postdec1	equ	0xFE5
 21045                           fsr1h	equ	0xFE2
 21046                           fsr1l	equ	0xFE1
 21047                           indf2	equ	0xFDF
 21048                           postinc2	equ	0xFDE
 21049                           postdec2	equ	0xFDD
 21050                           fsr2h	equ	0xFDA
 21051                           fsr2l	equ	0xFD9
 21052                           status	equ	0xFD8
 21053                           
 21054 ;; *************** function i2_printRTC *****************
 21055 ;; Defined at:
 21056 ;;		line 63 in file "RTC.c"
 21057 ;; Parameters:    Size  Location     Type
 21058 ;;		None
 21059 ;; Auto vars:     Size  Location     Type
 21060 ;;  printRTC       14   44[COMRAM] int [7]
 21061 ;;  printRTC        4   60[COMRAM] unsigned char [4]
 21062 ;;  printRTC        2   64[COMRAM] int 
 21063 ;;  printRTC        2   58[COMRAM] int 
 21064 ;; Return value:  Size  Location     Type
 21065 ;;                  1    wreg      void 
 21066 ;; Registers used:
 21067 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21068 ;; Tracked objects:
 21069 ;;		On entry : 0/0
 21070 ;;		On exit  : 0/0
 21071 ;;		Unchanged: 0/0
 21072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21073 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21074 ;;      Locals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21075 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21076 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21077 ;;Total ram usage:       25 bytes
 21078 ;; Hardware stack levels used:    1
 21079 ;; Hardware stack levels required when called:    3
 21080 ;; This function calls:
 21081 ;;		i2_getRTC
 21082 ;;		i2_lcdInst
 21083 ;;		i2_printf
 21084 ;;		i2_strcpy
 21085 ;; This function is called by:
 21086 ;;		i2_change_state_to_menu_start
 21087 ;; This function uses a non-reentrant model
 21088 ;;
 21089                           
 21090                           	psect	text69
 21091  003690                     __ptext69:
 21092                           	opt stack 0
 21093  003690                     i2_printRTC:
 21094                           	opt stack 19
 21095                           
 21096                           ;RTC.c: 64: getRTC();
 21097                           
 21098                           ;incstack = 0
 21099  003690  ECBA  F028         	call	i2_getRTC	;wreg free
 21100                           
 21101                           ;RTC.c: 65: char month[] = "MMM";
 21102  003694  C151  F03D         	movff	printRTC@F3238,i2printRTC@month
 21103  003698  C152  F03E         	movff	printRTC@F3238+1,i2printRTC@month+1
 21104  00369C  C153  F03F         	movff	printRTC@F3238+2,i2printRTC@month+2
 21105  0036A0  C154  F040         	movff	printRTC@F3238+3,i2printRTC@month+3
 21106                           
 21107                           ;RTC.c: 66: int INT_time[7];
 21108                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
 21109  0036A4  0E00               	movlw	0
 21110  0036A6  6E42               	movwf	i2printRTC@i+1,c
 21111  0036A8  0E00               	movlw	0
 21112  0036AA  6E41               	movwf	i2printRTC@i,c
 21113  0036AC  BE42               	btfsc	i2printRTC@i+1,7,c
 21114  0036AE  D006               	goto	i2l7604
 21115  0036B0  5042               	movf	i2printRTC@i+1,w,c
 21116  0036B2  E135               	bnz	i2l627
 21117  0036B4  0E07               	movlw	7
 21118  0036B6  5C41               	subwf	i2printRTC@i,w,c
 21119  0036B8  B0D8               	btfsc	status,0,c
 21120  0036BA  D031               	goto	i2l627
 21121  0036BC                     i2l7604:
 21122                           
 21123                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 21124  0036BC  0E1C               	movlw	low _time
 21125  0036BE  2441               	addwf	i2printRTC@i,w,c
 21126  0036C0  6ED9               	movwf	fsr2l,c
 21127  0036C2  0E01               	movlw	high _time
 21128  0036C4  2042               	addwfc	i2printRTC@i+1,w,c
 21129  0036C6  6EDA               	movwf	fsr2h,c
 21130  0036C8  50DF               	movf	indf2,w,c
 21131  0036CA  6E2A               	movwf	??i2_printRTC& (0+255),c
 21132  0036CC  3A2A               	swapf	??i2_printRTC,f,c
 21133  0036CE  0E0F               	movlw	15
 21134  0036D0  162A               	andwf	??i2_printRTC,f,c
 21135  0036D2  0E0F               	movlw	15
 21136  0036D4  162A               	andwf	??i2_printRTC,f,c
 21137  0036D6  502A               	movf	??i2_printRTC,w,c
 21138  0036D8  0D0A               	mullw	10
 21139  0036DA  0E1C               	movlw	low _time
 21140  0036DC  2441               	addwf	i2printRTC@i,w,c
 21141  0036DE  6ED9               	movwf	fsr2l,c
 21142  0036E0  0E01               	movlw	high _time
 21143  0036E2  2042               	addwfc	i2printRTC@i+1,w,c
 21144  0036E4  6EDA               	movwf	fsr2h,c
 21145  0036E6  50DF               	movf	indf2,w,c
 21146  0036E8  0B0F               	andlw	15
 21147  0036EA  6E2B               	movwf	(??i2_printRTC+1)& (0+255),c
 21148  0036EC  6A2C               	clrf	(??i2_printRTC+2)& (0+255),c
 21149  0036EE  50F3               	movf	prodl,w,c
 21150  0036F0  262B               	addwf	??i2_printRTC+1,f,c
 21151  0036F2  50F4               	movf	prodh,w,c
 21152  0036F4  222C               	addwfc	??i2_printRTC+2,f,c
 21153  0036F6  90D8               	bcf	status,0,c
 21154  0036F8  3441               	rlcf	i2printRTC@i,w,c
 21155  0036FA  6ED9               	movwf	fsr2l,c
 21156  0036FC  3442               	rlcf	i2printRTC@i+1,w,c
 21157  0036FE  6EDA               	movwf	fsr2h,c
 21158  003700  0E2D               	movlw	low i2printRTC@INT_time
 21159  003702  26D9               	addwf	fsr2l,f,c
 21160  003704  0E00               	movlw	high i2printRTC@INT_time
 21161  003706  22DA               	addwfc	fsr2h,f,c
 21162  003708  C02B  FFDE         	movff	??i2_printRTC+1,postinc2
 21163  00370C  C02C  FFDD         	movff	??i2_printRTC+2,postdec2
 21164  003710  4A41               	infsnz	i2printRTC@i,f,c
 21165  003712  2A42               	incf	i2printRTC@i+1,f,c
 21166  003714  BE42               	btfsc	i2printRTC@i+1,7,c
 21167  003716  D7D2               	goto	i2l7604
 21168  003718  5042               	movf	i2printRTC@i+1,w,c
 21169  00371A  E101               	bnz	i2u645_40
 21170  00371C  D7CB               	goto	L17
 21171  00371E                     i2u645_40:
 21172  00371E                     i2l627:
 21173                           
 21174                           ;RTC.c: 69: }
 21175                           ;RTC.c: 70: int RTC_month = INT_time[5];
 21176  00371E  C037  F03B         	movff	i2printRTC@INT_time+10,i2printRTC@RTC_month
 21177  003722  C038  F03C         	movff	i2printRTC@INT_time+11,i2printRTC@RTC_month+1
 21178                           
 21179                           ;RTC.c: 72: switch(RTC_month){
 21180  003726  D084               	goto	i2l7636
 21181  003728                     i2l7610:
 21182                           
 21183                           ;RTC.c: 74: strcpy(month, "JAN");
 21184  003728  0E3D               	movlw	low i2printRTC@month
 21185  00372A  6E01               	movwf	i2strcpy@to,c
 21186  00372C  0E00               	movlw	high i2printRTC@month
 21187  00372E  6E02               	movwf	i2strcpy@to+1,c
 21188  003730  0EDA               	movlw	low STR_8
 21189  003732  6E03               	movwf	i2strcpy@from,c
 21190  003734  0EFF               	movlw	high STR_8
 21191  003736  6E04               	movwf	i2strcpy@from+1,c
 21192  003738  EC4F  F02C         	call	i2_strcpy	;wreg free
 21193                           
 21194                           ;RTC.c: 75: break;
 21195  00373C  D0A6               	goto	i2l7638
 21196  00373E                     i2l7612:
 21197                           
 21198                           ;RTC.c: 77: strcpy(month, "FEB");
 21199  00373E  0E3D               	movlw	low i2printRTC@month
 21200  003740  6E01               	movwf	i2strcpy@to,c
 21201  003742  0E00               	movlw	high i2printRTC@month
 21202  003744  6E02               	movwf	i2strcpy@to+1,c
 21203  003746  0ECA               	movlw	low STR_9
 21204  003748  6E03               	movwf	i2strcpy@from,c
 21205  00374A  0EFF               	movlw	high STR_9
 21206  00374C  6E04               	movwf	i2strcpy@from+1,c
 21207  00374E  EC4F  F02C         	call	i2_strcpy	;wreg free
 21208                           
 21209                           ;RTC.c: 78: break;
 21210  003752  D09B               	goto	i2l7638
 21211  003754                     i2l7614:
 21212                           
 21213                           ;RTC.c: 80: strcpy(month, "MAR");
 21214  003754  0E3D               	movlw	low i2printRTC@month
 21215  003756  6E01               	movwf	i2strcpy@to,c
 21216  003758  0E00               	movlw	high i2printRTC@month
 21217  00375A  6E02               	movwf	i2strcpy@to+1,c
 21218  00375C  0EE6               	movlw	low STR_10
 21219  00375E  6E03               	movwf	i2strcpy@from,c
 21220  003760  0EFF               	movlw	high STR_10
 21221  003762  6E04               	movwf	i2strcpy@from+1,c
 21222  003764  EC4F  F02C         	call	i2_strcpy	;wreg free
 21223                           
 21224                           ;RTC.c: 81: break;
 21225  003768  D090               	goto	i2l7638
 21226  00376A                     i2l7616:
 21227                           
 21228                           ;RTC.c: 83: strcpy(month, "APR");
 21229  00376A  0E3D               	movlw	low i2printRTC@month
 21230  00376C  6E01               	movwf	i2strcpy@to,c
 21231  00376E  0E00               	movlw	high i2printRTC@month
 21232  003770  6E02               	movwf	i2strcpy@to+1,c
 21233  003772  0EEA               	movlw	low STR_11
 21234  003774  6E03               	movwf	i2strcpy@from,c
 21235  003776  0EFF               	movlw	high STR_11
 21236  003778  6E04               	movwf	i2strcpy@from+1,c
 21237  00377A  EC4F  F02C         	call	i2_strcpy	;wreg free
 21238                           
 21239                           ;RTC.c: 84: break;
 21240  00377E  D085               	goto	i2l7638
 21241  003780                     i2l7618:
 21242                           
 21243                           ;RTC.c: 86: strcpy(month, "MAY");
 21244  003780  0E3D               	movlw	low i2printRTC@month
 21245  003782  6E01               	movwf	i2strcpy@to,c
 21246  003784  0E00               	movlw	high i2printRTC@month
 21247  003786  6E02               	movwf	i2strcpy@to+1,c
 21248  003788  0EFA               	movlw	low STR_12
 21249  00378A  6E03               	movwf	i2strcpy@from,c
 21250  00378C  0EFF               	movlw	high STR_12
 21251  00378E  6E04               	movwf	i2strcpy@from+1,c
 21252  003790  EC4F  F02C         	call	i2_strcpy	;wreg free
 21253                           
 21254                           ;RTC.c: 87: break;
 21255  003794  D07A               	goto	i2l7638
 21256  003796                     i2l7620:
 21257                           
 21258                           ;RTC.c: 89: strcpy(month, "JUN");
 21259  003796  0E3D               	movlw	low i2printRTC@month
 21260  003798  6E01               	movwf	i2strcpy@to,c
 21261  00379A  0E00               	movlw	high i2printRTC@month
 21262  00379C  6E02               	movwf	i2strcpy@to+1,c
 21263  00379E  0EDE               	movlw	low STR_13
 21264  0037A0  6E03               	movwf	i2strcpy@from,c
 21265  0037A2  0EFF               	movlw	high STR_13
 21266  0037A4  6E04               	movwf	i2strcpy@from+1,c
 21267  0037A6  EC4F  F02C         	call	i2_strcpy	;wreg free
 21268                           
 21269                           ;RTC.c: 90: break;
 21270  0037AA  D06F               	goto	i2l7638
 21271  0037AC                     i2l7622:
 21272                           
 21273                           ;RTC.c: 92: strcpy(month, "JUL");
 21274  0037AC  0E3D               	movlw	low i2printRTC@month
 21275  0037AE  6E01               	movwf	i2strcpy@to,c
 21276  0037B0  0E00               	movlw	high i2printRTC@month
 21277  0037B2  6E02               	movwf	i2strcpy@to+1,c
 21278  0037B4  0ED6               	movlw	low STR_14
 21279  0037B6  6E03               	movwf	i2strcpy@from,c
 21280  0037B8  0EFF               	movlw	high STR_14
 21281  0037BA  6E04               	movwf	i2strcpy@from+1,c
 21282  0037BC  EC4F  F02C         	call	i2_strcpy	;wreg free
 21283                           
 21284                           ;RTC.c: 93: break;
 21285  0037C0  D064               	goto	i2l7638
 21286  0037C2                     i2l7624:
 21287                           
 21288                           ;RTC.c: 95: strcpy(month, "AUG");
 21289  0037C2  0E3D               	movlw	low i2printRTC@month
 21290  0037C4  6E01               	movwf	i2strcpy@to,c
 21291  0037C6  0E00               	movlw	high i2printRTC@month
 21292  0037C8  6E02               	movwf	i2strcpy@to+1,c
 21293  0037CA  0ED2               	movlw	low STR_15
 21294  0037CC  6E03               	movwf	i2strcpy@from,c
 21295  0037CE  0EFF               	movlw	high STR_15
 21296  0037D0  6E04               	movwf	i2strcpy@from+1,c
 21297  0037D2  EC4F  F02C         	call	i2_strcpy	;wreg free
 21298                           
 21299                           ;RTC.c: 96: break;
 21300  0037D6  D059               	goto	i2l7638
 21301  0037D8                     i2l7626:
 21302                           
 21303                           ;RTC.c: 98: strcpy(month, "SEP");
 21304  0037D8  0E3D               	movlw	low i2printRTC@month
 21305  0037DA  6E01               	movwf	i2strcpy@to,c
 21306  0037DC  0E00               	movlw	high i2printRTC@month
 21307  0037DE  6E02               	movwf	i2strcpy@to+1,c
 21308  0037E0  0EE2               	movlw	low STR_16
 21309  0037E2  6E03               	movwf	i2strcpy@from,c
 21310  0037E4  0EFF               	movlw	high STR_16
 21311  0037E6  6E04               	movwf	i2strcpy@from+1,c
 21312  0037E8  EC4F  F02C         	call	i2_strcpy	;wreg free
 21313                           
 21314                           ;RTC.c: 99: break;
 21315  0037EC  D04E               	goto	i2l7638
 21316  0037EE                     i2l7628:
 21317                           
 21318                           ;RTC.c: 101: strcpy(month, "OCT");
 21319  0037EE  0E3D               	movlw	low i2printRTC@month
 21320  0037F0  6E01               	movwf	i2strcpy@to,c
 21321  0037F2  0E00               	movlw	high i2printRTC@month
 21322  0037F4  6E02               	movwf	i2strcpy@to+1,c
 21323  0037F6  0EF2               	movlw	low STR_17
 21324  0037F8  6E03               	movwf	i2strcpy@from,c
 21325  0037FA  0EFF               	movlw	high STR_17
 21326  0037FC  6E04               	movwf	i2strcpy@from+1,c
 21327  0037FE  EC4F  F02C         	call	i2_strcpy	;wreg free
 21328                           
 21329                           ;RTC.c: 102: break;
 21330  003802  D043               	goto	i2l7638
 21331  003804                     i2l7630:
 21332                           
 21333                           ;RTC.c: 104: strcpy(month, "NOV");
 21334  003804  0E3D               	movlw	low i2printRTC@month
 21335  003806  6E01               	movwf	i2strcpy@to,c
 21336  003808  0E00               	movlw	high i2printRTC@month
 21337  00380A  6E02               	movwf	i2strcpy@to+1,c
 21338  00380C  0EF6               	movlw	low STR_18
 21339  00380E  6E03               	movwf	i2strcpy@from,c
 21340  003810  0EFF               	movlw	high STR_18
 21341  003812  6E04               	movwf	i2strcpy@from+1,c
 21342  003814  EC4F  F02C         	call	i2_strcpy	;wreg free
 21343                           
 21344                           ;RTC.c: 105: break;
 21345  003818  D038               	goto	i2l7638
 21346  00381A                     i2l7632:
 21347                           
 21348                           ;RTC.c: 107: strcpy(month, "DEC");
 21349  00381A  0E3D               	movlw	low i2printRTC@month
 21350  00381C  6E01               	movwf	i2strcpy@to,c
 21351  00381E  0E00               	movlw	high i2printRTC@month
 21352  003820  6E02               	movwf	i2strcpy@to+1,c
 21353  003822  0ECE               	movlw	low STR_19
 21354  003824  6E03               	movwf	i2strcpy@from,c
 21355  003826  0EFF               	movlw	high STR_19
 21356  003828  6E04               	movwf	i2strcpy@from+1,c
 21357  00382A  EC4F  F02C         	call	i2_strcpy	;wreg free
 21358                           
 21359                           ;RTC.c: 109: }
 21360                           
 21361                           ;RTC.c: 108: break;
 21362  00382E  D02D               	goto	i2l7638
 21363  003830                     i2l7636:
 21364  003830  C03B  F02A         	movff	i2printRTC@RTC_month,??i2_printRTC
 21365  003834  C03C  F02B         	movff	i2printRTC@RTC_month+1,??i2_printRTC+1
 21366                           
 21367                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 21368                           ; Switch size 1, requested type "space"
 21369                           ; Number of cases is 1, Range of values is 0 to 0
 21370                           ; switch strategies available:
 21371                           ; Name         Instructions Cycles
 21372                           ; simple_byte            4     3 (average)
 21373                           ;	Chosen strategy is simple_byte
 21374  003838  502B               	movf	??i2_printRTC+1,w,c
 21375  00383A  0A00               	xorlw	0	; case 0
 21376  00383C  A4D8               	btfss	status,2,c
 21377  00383E  D025               	goto	i2l7638
 21378                           
 21379                           ; Switch size 1, requested type "space"
 21380                           ; Number of cases is 12, Range of values is 1 to 12
 21381                           ; switch strategies available:
 21382                           ; Name         Instructions Cycles
 21383                           ; simple_byte           37    19 (average)
 21384                           ;	Chosen strategy is simple_byte
 21385  003840  502A               	movf	??i2_printRTC,w,c
 21386  003842  0A01               	xorlw	1	; case 1
 21387  003844  B4D8               	btfsc	status,2,c
 21388  003846  D770               	goto	i2l7610
 21389  003848  0A03               	xorlw	3	; case 2
 21390  00384A  B4D8               	btfsc	status,2,c
 21391  00384C  D778               	goto	i2l7612
 21392  00384E  0A01               	xorlw	1	; case 3
 21393  003850  B4D8               	btfsc	status,2,c
 21394  003852  D780               	goto	i2l7614
 21395  003854  0A07               	xorlw	7	; case 4
 21396  003856  B4D8               	btfsc	status,2,c
 21397  003858  D788               	goto	i2l7616
 21398  00385A  0A01               	xorlw	1	; case 5
 21399  00385C  B4D8               	btfsc	status,2,c
 21400  00385E  D790               	goto	i2l7618
 21401  003860  0A03               	xorlw	3	; case 6
 21402  003862  B4D8               	btfsc	status,2,c
 21403  003864  D798               	goto	i2l7620
 21404  003866  0A01               	xorlw	1	; case 7
 21405  003868  B4D8               	btfsc	status,2,c
 21406  00386A  D7A0               	goto	i2l7622
 21407  00386C  0A0F               	xorlw	15	; case 8
 21408  00386E  B4D8               	btfsc	status,2,c
 21409  003870  D7A8               	goto	i2l7624
 21410  003872  0A01               	xorlw	1	; case 9
 21411  003874  B4D8               	btfsc	status,2,c
 21412  003876  D7B0               	goto	i2l7626
 21413  003878  0A03               	xorlw	3	; case 10
 21414  00387A  B4D8               	btfsc	status,2,c
 21415  00387C  D7B8               	goto	i2l7628
 21416  00387E  0A01               	xorlw	1	; case 11
 21417  003880  B4D8               	btfsc	status,2,c
 21418  003882  D7C0               	goto	i2l7630
 21419  003884  0A07               	xorlw	7	; case 12
 21420  003886  B4D8               	btfsc	status,2,c
 21421  003888  D7C8               	goto	i2l7632
 21422  00388A                     i2l7638:
 21423                           
 21424                           ;RTC.c: 110: lcdInst(0b10000000);;
 21425  00388A  0E80               	movlw	128
 21426  00388C  ECBF  F02E         	call	i2_lcdInst
 21427                           
 21428                           ;RTC.c: 111: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 21429  003890  0ECA               	movlw	low STR_21
 21430  003892  6E0D               	movwf	i2printf@f,c
 21431  003894  0EFA               	movlw	high STR_21
 21432  003896  6E0E               	movwf	i2printf@f+1,c
 21433  003898  C035  F00F         	movff	i2printRTC@INT_time+8,?i2_printf+2
 21434  00389C  C036  F010         	movff	i2printRTC@INT_time+9,?i2_printf+3
 21435  0038A0  0E3D               	movlw	low i2printRTC@month
 21436  0038A2  6E11               	movwf	?i2_printf+4,c
 21437  0038A4  0E00               	movlw	high i2printRTC@month
 21438  0038A6  6E12               	movwf	?i2_printf+5,c
 21439  0038A8  C031  F013         	movff	i2printRTC@INT_time+4,?i2_printf+6
 21440  0038AC  C032  F014         	movff	i2printRTC@INT_time+5,?i2_printf+7
 21441  0038B0  C02F  F015         	movff	i2printRTC@INT_time+2,?i2_printf+8
 21442  0038B4  C030  F016         	movff	i2printRTC@INT_time+3,?i2_printf+9
 21443  0038B8  C02D  F017         	movff	i2printRTC@INT_time,?i2_printf+10
 21444  0038BC  C02E  F018         	movff	i2printRTC@INT_time+1,?i2_printf+11
 21445  0038C0  EC1F  F012         	call	i2_printf	;wreg free
 21446  0038C4  0012               	return		;funcret
 21447  0038C6                     __end_ofi2_printRTC:
 21448                           	opt stack 0
 21449                           pclatu	equ	0xFFB
 21450                           pclath	equ	0xFFA
 21451                           tblptru	equ	0xFF8
 21452                           tblptrh	equ	0xFF7
 21453                           tblptrl	equ	0xFF6
 21454                           tablat	equ	0xFF5
 21455                           prodh	equ	0xFF4
 21456                           prodl	equ	0xFF3
 21457                           intcon	equ	0xFF2
 21458                           intcon2	equ	0xFF1
 21459                           intcon3	equ	0xFF0
 21460                           indf0	equ	0xFEF
 21461                           postinc0	equ	0xFEE
 21462                           fsr0h	equ	0xFEA
 21463                           fsr0l	equ	0xFE9
 21464                           wreg	equ	0xFE8
 21465                           postdec1	equ	0xFE5
 21466                           fsr1h	equ	0xFE2
 21467                           fsr1l	equ	0xFE1
 21468                           indf2	equ	0xFDF
 21469                           postinc2	equ	0xFDE
 21470                           postdec2	equ	0xFDD
 21471                           fsr2h	equ	0xFDA
 21472                           fsr2l	equ	0xFD9
 21473                           status	equ	0xFD8
 21474                           
 21475 ;; *************** function i2_strcpy *****************
 21476 ;; Defined at:
 21477 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 21478 ;; Parameters:    Size  Location     Type
 21479 ;;  to              2    0[COMRAM] PTR unsigned char 
 21480 ;;		 -> printRTC@month(4), UI@month(4), 
 21481 ;;  from            2    2[COMRAM] PTR const unsigned char 
 21482 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
 21483 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
 21484 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
 21485 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
 21486 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
 21487 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
 21488 ;;		 -> STR_8(4), 
 21489 ;; Auto vars:     Size  Location     Type
 21490 ;;  strcpy          2    4[COMRAM] PTR unsigned char 
 21491 ;;		 -> printRTC@month(4), UI@month(4), 
 21492 ;; Return value:  Size  Location     Type
 21493 ;;                  2    0[COMRAM] PTR unsigned char 
 21494 ;; Registers used:
 21495 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 21496 ;; Tracked objects:
 21497 ;;		On entry : 0/0
 21498 ;;		On exit  : 0/0
 21499 ;;		Unchanged: 0/0
 21500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21501 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21502 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21503 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21504 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21505 ;;Total ram usage:        6 bytes
 21506 ;; Hardware stack levels used:    1
 21507 ;; This function calls:
 21508 ;;		Nothing
 21509 ;; This function is called by:
 21510 ;;		i2_printRTC
 21511 ;; This function uses a non-reentrant model
 21512 ;;
 21513                           
 21514                           	psect	text70
 21515  00589E                     __ptext70:
 21516                           	opt stack 0
 21517  00589E                     i2_strcpy:
 21518                           	opt stack 21
 21519                           
 21520                           ;incstack = 0
 21521  00589E  C001  F005         	movff	i2strcpy@to,i2strcpy@cp
 21522  0058A2  C002  F006         	movff	i2strcpy@to+1,i2strcpy@cp+1
 21523  0058A6  D004               	goto	i2l7162
 21524  0058A8                     i2l7160:
 21525  0058A8  4A05               	infsnz	i2strcpy@cp,f,c
 21526  0058AA  2A06               	incf	i2strcpy@cp+1,f,c
 21527  0058AC  4A03               	infsnz	i2strcpy@from,f,c
 21528  0058AE  2A04               	incf	i2strcpy@from+1,f,c
 21529  0058B0                     i2l7162:
 21530  0058B0  C003  FFF6         	movff	i2strcpy@from,tblptrl
 21531  0058B4  C004  FFF7         	movff	i2strcpy@from+1,tblptrh
 21532  0058B8                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 21533  0058B8  6AF8               	clrf	tblptru,c
 21534  0058BA                     	endif
 21535  0058BA                     	if	0	;tblptru may be non-zero
 21536  0058BA                     	endif
 21537  0058BA  C005  FFD9         	movff	i2strcpy@cp,fsr2l
 21538  0058BE  C006  FFDA         	movff	i2strcpy@cp+1,fsr2h
 21539  0058C2  0008               	tblrd		*
 21540  0058C4  CFF5 FFDF          	movff	tablat,indf2
 21541  0058C8  50DF               	movf	indf2,w,c
 21542  0058CA  B4D8               	btfsc	status,2,c
 21543  0058CC  0012               	return	
 21544  0058CE  D7EC               	goto	i2l7160
 21545  0058D0                     __end_ofi2_strcpy:
 21546                           	opt stack 0
 21547                           pclatu	equ	0xFFB
 21548                           pclath	equ	0xFFA
 21549                           tblptru	equ	0xFF8
 21550                           tblptrh	equ	0xFF7
 21551                           tblptrl	equ	0xFF6
 21552                           tablat	equ	0xFF5
 21553                           prodh	equ	0xFF4
 21554                           prodl	equ	0xFF3
 21555                           intcon	equ	0xFF2
 21556                           intcon2	equ	0xFF1
 21557                           intcon3	equ	0xFF0
 21558                           indf0	equ	0xFEF
 21559                           postinc0	equ	0xFEE
 21560                           fsr0h	equ	0xFEA
 21561                           fsr0l	equ	0xFE9
 21562                           wreg	equ	0xFE8
 21563                           postdec1	equ	0xFE5
 21564                           fsr1h	equ	0xFE2
 21565                           fsr1l	equ	0xFE1
 21566                           indf2	equ	0xFDF
 21567                           postinc2	equ	0xFDE
 21568                           postdec2	equ	0xFDD
 21569                           fsr2h	equ	0xFDA
 21570                           fsr2l	equ	0xFD9
 21571                           status	equ	0xFD8
 21572                           
 21573 ;; *************** function _inputHandler *****************
 21574 ;; Defined at:
 21575 ;;		line 375 in file "UI.c"
 21576 ;; Parameters:    Size  Location     Type
 21577 ;;		None
 21578 ;; Auto vars:     Size  Location     Type
 21579 ;;		None
 21580 ;; Return value:  Size  Location     Type
 21581 ;;                  2   41[COMRAM] int 
 21582 ;; Registers used:
 21583 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21584 ;; Tracked objects:
 21585 ;;		On entry : 0/0
 21586 ;;		On exit  : 0/0
 21587 ;;		Unchanged: 0/0
 21588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21589 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21590 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21591 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21592 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21593 ;;Total ram usage:        4 bytes
 21594 ;; Hardware stack levels used:    1
 21595 ;; Hardware stack levels required when called:    4
 21596 ;; This function calls:
 21597 ;;		_change_state_to_logs_11
 21598 ;;		_change_state_to_logs_12
 21599 ;;		_change_state_to_logs_22
 21600 ;;		_change_state_to_logs_23
 21601 ;;		_change_state_to_logs_33
 21602 ;;		_change_state_to_logs_34
 21603 ;;		_change_state_to_menu_11
 21604 ;;		_change_state_to_menu_23
 21605 ;;		i2_change_state_to_menu_12
 21606 ;;		i2_change_state_to_menu_22
 21607 ;; This function is called by:
 21608 ;;		_updateMenu
 21609 ;; This function uses a non-reentrant model
 21610 ;;
 21611                           
 21612                           	psect	text71
 21613  0038C6                     __ptext71:
 21614                           	opt stack 0
 21615  0038C6                     _inputHandler:
 21616                           	opt stack 18
 21617                           
 21618                           ;UI.c: 380: if(firstboot){
 21619                           
 21620                           ;incstack = 0
 21621  0038C6  0101               	movlb	1	; () banked
 21622  0038C8  513D               	movf	_firstboot& (0+255),w,b
 21623  0038CA  0101               	movlb	1	; () banked
 21624  0038CC  113E               	iorwf	(_firstboot+1)& (0+255),w,b
 21625  0038CE  B4D8               	btfsc	status,2,c
 21626  0038D0  D00C               	goto	i2l7706
 21627                           
 21628                           ; BSR set to: 1
 21629                           ;UI.c: 381: change_state_to_menu_11();
 21630  0038D2  ECC8  F02C         	call	_change_state_to_menu_11	;wreg free
 21631                           
 21632                           ;UI.c: 382: firstboot = 0;
 21633  0038D6  0E00               	movlw	0
 21634  0038D8  0101               	movlb	1	; () banked
 21635  0038DA  6F3E               	movwf	(_firstboot+1)& (0+255),b
 21636  0038DC  0E00               	movlw	0
 21637  0038DE  6F3D               	movwf	_firstboot& (0+255),b
 21638                           
 21639                           ; BSR set to: 1
 21640                           ;UI.c: 383: return 0;
 21641  0038E0  0E00               	movlw	0
 21642  0038E2  6E2B               	movwf	?_inputHandler+1,c
 21643  0038E4  0E00               	movlw	0
 21644  0038E6  6E2A               	movwf	?_inputHandler,c
 21645                           
 21646                           ; BSR set to: 1
 21647  0038E8  0012               	return	
 21648  0038EA                     i2l7706:
 21649                           
 21650                           ; BSR set to: 1
 21651                           ;UI.c: 384: }
 21652                           ;UI.c: 385: if (logstate){
 21653  0038EA  0100               	movlb	0	; () banked
 21654  0038EC  51F8               	movf	_logstate& (0+255),w,b
 21655  0038EE  0100               	movlb	0	; () banked
 21656  0038F0  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 21657  0038F2  B4D8               	btfsc	status,2,c
 21658  0038F4  D0C7               	goto	i2l7824
 21659                           
 21660                           ; BSR set to: 0
 21661                           ;UI.c: 386: if(input == 'C' && PORTBbits.RB1 == 1){
 21662  0038F6  0E43               	movlw	67
 21663  0038F8  187D               	xorwf	_input,w,c	;volatile
 21664  0038FA  A4D8               	btfss	status,2,c
 21665  0038FC  D012               	goto	i2l7724
 21666                           
 21667                           ; BSR set to: 0
 21668  0038FE  B281               	btfsc	3969,1,c	;volatile
 21669  003900  D009               	goto	i2l7716
 21670  003902  D00F               	goto	i2l7724
 21671  003904                     i2l7714:
 21672                           
 21673                           ;UI.c: 389: _delay((unsigned long)((10)*(32000000/4000.0)));
 21674  003904  0E68               	movlw	104
 21675  003906  6E2C               	movwf	??_inputHandler& (0+255),c
 21676  003908  0EE4               	movlw	228
 21677  00390A                     i2u1177_47:
 21678  00390A  2EE8               	decfsz	wreg,f,c
 21679  00390C  D7FE               	bra	i2u1177_47
 21680  00390E  2E2C               	decfsz	??_inputHandler& (0+255),f,c
 21681  003910  D7FC               	bra	i2u1177_47
 21682  003912  D000               	nop2	
 21683  003914                     i2l7716:
 21684  003914  B281               	btfsc	3969,1,c	;volatile
 21685  003916  D7F6               	goto	i2l7714
 21686  003918                     i2l7718:
 21687                           
 21688                           ;UI.c: 390: }
 21689                           ;UI.c: 391: return 0;
 21690  003918  0E00               	movlw	0
 21691  00391A  6E2B               	movwf	?_inputHandler+1,c
 21692  00391C  0E00               	movlw	0
 21693  00391E  6E2A               	movwf	?_inputHandler,c
 21694  003920  0012               	return	
 21695  003922                     i2l7724:
 21696                           
 21697                           ;UI.c: 393: else if (input == 'D'){
 21698  003922  0E44               	movlw	68
 21699  003924  187D               	xorwf	_input,w,c	;volatile
 21700  003926  A4D8               	btfss	status,2,c
 21701  003928  D7F7               	goto	i2l7718
 21702                           
 21703                           ;UI.c: 395: logstate = 0;
 21704  00392A  0E00               	movlw	0
 21705  00392C  0100               	movlb	0	; () banked
 21706  00392E  6FF9               	movwf	(_logstate+1)& (0+255),b
 21707  003930  0E00               	movlw	0
 21708  003932  6FF8               	movwf	_logstate& (0+255),b
 21709                           
 21710                           ;UI.c: 396: switch(cur_state){
 21711  003934  D012               	goto	i2l7742
 21712  003936                     i2l7728:
 21713                           
 21714                           ;UI.c: 398: change_state_to_logs_11();
 21715  003936  EC40  F02D         	call	_change_state_to_logs_11	;wreg free
 21716                           
 21717                           ;UI.c: 399: break;
 21718  00393A  D7EE               	goto	i2l7718
 21719  00393C                     i2l7730:
 21720                           
 21721                           ;UI.c: 401: change_state_to_logs_12();
 21722  00393C  EC28  F02D         	call	_change_state_to_logs_12	;wreg free
 21723                           
 21724                           ;UI.c: 402: break;
 21725  003940  D7EB               	goto	i2l7718
 21726  003942                     i2l7732:
 21727                           
 21728                           ;UI.c: 404: change_state_to_logs_22();
 21729  003942  EC10  F02D         	call	_change_state_to_logs_22	;wreg free
 21730                           
 21731                           ;UI.c: 405: break;
 21732  003946  D7E8               	goto	i2l7718
 21733  003948                     i2l7734:
 21734                           
 21735                           ;UI.c: 407: change_state_to_logs_23();
 21736  003948  EC6F  F02D         	call	_change_state_to_logs_23	;wreg free
 21737                           
 21738                           ;UI.c: 408: break;
 21739  00394C  D7E5               	goto	i2l7718
 21740  00394E                     i2l7736:
 21741                           
 21742                           ;UI.c: 410: change_state_to_logs_33();
 21743  00394E  ECF8  F02C         	call	_change_state_to_logs_33	;wreg free
 21744                           
 21745                           ;UI.c: 411: break;
 21746  003952  D7E2               	goto	i2l7718
 21747  003954                     i2l7738:
 21748                           
 21749                           ;UI.c: 413: change_state_to_logs_34();
 21750  003954  ECE0  F02C         	call	_change_state_to_logs_34	;wreg free
 21751                           
 21752                           ;UI.c: 415: }
 21753                           
 21754                           ;UI.c: 414: break;
 21755  003958  D7DF               	goto	i2l7718
 21756  00395A                     i2l7742:
 21757  00395A  C0E6  F02C         	movff	_cur_state,??_inputHandler
 21758  00395E  C0E7  F02D         	movff	_cur_state+1,??_inputHandler+1
 21759                           
 21760                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 21761                           ; Switch size 1, requested type "space"
 21762                           ; Number of cases is 2, Range of values is 3 to 4
 21763                           ; switch strategies available:
 21764                           ; Name         Instructions Cycles
 21765                           ; simple_byte            7     4 (average)
 21766                           ;	Chosen strategy is simple_byte
 21767  003962  502D               	movf	??_inputHandler+1,w,c
 21768  003964  0A03               	xorlw	3	; case 3
 21769  003966  B4D8               	btfsc	status,2,c
 21770  003968  D004               	goto	i2l10822
 21771  00396A  0A07               	xorlw	7	; case 4
 21772  00396C  B4D8               	btfsc	status,2,c
 21773  00396E  D00F               	goto	i2l10824
 21774  003970  D7D3               	goto	i2l7718
 21775  003972                     i2l10822:
 21776                           
 21777                           ; Switch size 1, requested type "space"
 21778                           ; Number of cases is 4, Range of values is 243 to 255
 21779                           ; switch strategies available:
 21780                           ; Name         Instructions Cycles
 21781                           ; simple_byte           13     7 (average)
 21782                           ;	Chosen strategy is simple_byte
 21783  003972  502C               	movf	??_inputHandler,w,c
 21784  003974  0AF3               	xorlw	243	; case 243
 21785  003976  B4D8               	btfsc	status,2,c
 21786  003978  D7DE               	goto	i2l7728
 21787  00397A  0A07               	xorlw	7	; case 244
 21788  00397C  B4D8               	btfsc	status,2,c
 21789  00397E  D7DE               	goto	i2l7730
 21790  003980  0A0A               	xorlw	10	; case 254
 21791  003982  B4D8               	btfsc	status,2,c
 21792  003984  D7DE               	goto	i2l7732
 21793  003986  0A01               	xorlw	1	; case 255
 21794  003988  B4D8               	btfsc	status,2,c
 21795  00398A  D7DE               	goto	i2l7734
 21796  00398C  D7C5               	goto	i2l7718
 21797  00398E                     i2l10824:
 21798                           
 21799                           ; Switch size 1, requested type "space"
 21800                           ; Number of cases is 2, Range of values is 9 to 10
 21801                           ; switch strategies available:
 21802                           ; Name         Instructions Cycles
 21803                           ; simple_byte            7     4 (average)
 21804                           ;	Chosen strategy is simple_byte
 21805  00398E  502C               	movf	??_inputHandler,w,c
 21806  003990  0A09               	xorlw	9	; case 9
 21807  003992  B4D8               	btfsc	status,2,c
 21808  003994  D7DC               	goto	i2l7736
 21809  003996  0A03               	xorlw	3	; case 10
 21810  003998  B4D8               	btfsc	status,2,c
 21811  00399A  D7DC               	goto	i2l7738
 21812  00399C  D7BD               	goto	i2l7718
 21813  00399E                     i2l7754:
 21814                           
 21815                           ;UI.c: 425: if(cur_state == 11){
 21816  00399E  0E0B               	movlw	11
 21817  0039A0  0100               	movlb	0	; () banked
 21818  0039A2  19E6               	xorwf	_cur_state& (0+255),w,b
 21819  0039A4  0100               	movlb	0	; () banked
 21820  0039A6  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 21821  0039A8  A4D8               	btfss	status,2,c
 21822  0039AA  D005               	goto	i2l7762
 21823                           
 21824                           ; BSR set to: 0
 21825                           ;UI.c: 426: return 0;
 21826  0039AC  0E00               	movlw	0
 21827  0039AE  6E2B               	movwf	?_inputHandler+1,c
 21828  0039B0  0E00               	movlw	0
 21829  0039B2  6E2A               	movwf	?_inputHandler,c
 21830                           
 21831                           ; BSR set to: 0
 21832  0039B4  0012               	return	
 21833  0039B6                     i2l7762:
 21834                           
 21835                           ; BSR set to: 0
 21836                           ;UI.c: 428: else{
 21837                           ;UI.c: 429: change_state_to_menu_11();
 21838  0039B6  ECC8  F02C         	call	_change_state_to_menu_11	;wreg free
 21839                           
 21840                           ;UI.c: 430: }
 21841                           ;UI.c: 431: return 0;
 21842  0039BA  0E00               	movlw	0
 21843  0039BC  6E2B               	movwf	?_inputHandler+1,c
 21844  0039BE  0E00               	movlw	0
 21845  0039C0  6E2A               	movwf	?_inputHandler,c
 21846  0039C2  0012               	return	
 21847  0039C4                     i2l7768:
 21848                           
 21849                           ;UI.c: 433: if(cur_state == 22 || cur_state == 12){
 21850  0039C4  0E16               	movlw	22
 21851  0039C6  0100               	movlb	0	; () banked
 21852  0039C8  19E6               	xorwf	_cur_state& (0+255),w,b
 21853  0039CA  0100               	movlb	0	; () banked
 21854  0039CC  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 21855  0039CE  B4D8               	btfsc	status,2,c
 21856  0039D0  D007               	goto	i2l7772
 21857                           
 21858                           ; BSR set to: 0
 21859  0039D2  0E0C               	movlw	12
 21860  0039D4  0100               	movlb	0	; () banked
 21861  0039D6  19E6               	xorwf	_cur_state& (0+255),w,b
 21862  0039D8  0100               	movlb	0	; () banked
 21863  0039DA  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 21864  0039DC  A4D8               	btfss	status,2,c
 21865  0039DE  D005               	goto	i2l7778
 21866  0039E0                     i2l7772:
 21867                           
 21868                           ; BSR set to: 0
 21869                           ;UI.c: 434: return 0;
 21870  0039E0  0E00               	movlw	0
 21871  0039E2  6E2B               	movwf	?_inputHandler+1,c
 21872  0039E4  0E00               	movlw	0
 21873  0039E6  6E2A               	movwf	?_inputHandler,c
 21874                           
 21875                           ; BSR set to: 0
 21876  0039E8  0012               	return	
 21877  0039EA                     i2l7778:
 21878                           
 21879                           ; BSR set to: 0
 21880                           ;UI.c: 436: else if(cur_state == 23){
 21881  0039EA  0E17               	movlw	23
 21882  0039EC  0100               	movlb	0	; () banked
 21883  0039EE  19E6               	xorwf	_cur_state& (0+255),w,b
 21884  0039F0  0100               	movlb	0	; () banked
 21885  0039F2  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 21886  0039F4  A4D8               	btfss	status,2,c
 21887  0039F6  D003               	goto	i2l7782
 21888                           
 21889                           ; BSR set to: 0
 21890                           ;UI.c: 437: change_state_to_menu_22();
 21891  0039F8  EC80  F02C         	call	i2_change_state_to_menu_22	;wreg free
 21892                           
 21893                           ;UI.c: 438: }
 21894  0039FC  D002               	goto	i2l7784
 21895  0039FE                     i2l7782:
 21896                           
 21897                           ;UI.c: 439: else{
 21898                           ;UI.c: 440: change_state_to_menu_12();
 21899  0039FE  EC98  F02C         	call	i2_change_state_to_menu_12	;wreg free
 21900  003A02                     i2l7784:
 21901                           
 21902                           ;UI.c: 441: }
 21903                           ;UI.c: 442: return 0;
 21904  003A02  0E00               	movlw	0
 21905  003A04  6E2B               	movwf	?_inputHandler+1,c
 21906  003A06  0E00               	movlw	0
 21907  003A08  6E2A               	movwf	?_inputHandler,c
 21908  003A0A  0012               	return	
 21909  003A0C                     i2l7788:
 21910                           
 21911                           ;UI.c: 444: if(cur_state == 23){
 21912  003A0C  0E17               	movlw	23
 21913  003A0E  0100               	movlb	0	; () banked
 21914  003A10  19E6               	xorwf	_cur_state& (0+255),w,b
 21915  003A12  0100               	movlb	0	; () banked
 21916  003A14  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 21917  003A16  A4D8               	btfss	status,2,c
 21918  003A18  D005               	goto	i2l7796
 21919                           
 21920                           ; BSR set to: 0
 21921                           ;UI.c: 445: return 0;
 21922  003A1A  0E00               	movlw	0
 21923  003A1C  6E2B               	movwf	?_inputHandler+1,c
 21924  003A1E  0E00               	movlw	0
 21925  003A20  6E2A               	movwf	?_inputHandler,c
 21926                           
 21927                           ; BSR set to: 0
 21928  003A22  0012               	return	
 21929  003A24                     i2l7796:
 21930                           
 21931                           ; BSR set to: 0
 21932                           ;UI.c: 447: else{
 21933                           ;UI.c: 448: change_state_to_menu_23();
 21934  003A24  ECB0  F02C         	call	_change_state_to_menu_23	;wreg free
 21935                           
 21936                           ;UI.c: 449: }
 21937                           ;UI.c: 450: return 0;
 21938  003A28  0E00               	movlw	0
 21939  003A2A  6E2B               	movwf	?_inputHandler+1,c
 21940  003A2C  0E00               	movlw	0
 21941  003A2E  6E2A               	movwf	?_inputHandler,c
 21942  003A30  0012               	return	
 21943  003A32                     i2l7802:
 21944                           
 21945                           ;UI.c: 453: up = 1;
 21946  003A32  0E00               	movlw	0
 21947  003A34  6E76               	movwf	_up+1,c
 21948  003A36  0E01               	movlw	1
 21949  003A38  6E75               	movwf	_up,c
 21950                           
 21951                           ;UI.c: 454: return 1;
 21952  003A3A  0E00               	movlw	0
 21953  003A3C  6E2B               	movwf	?_inputHandler+1,c
 21954  003A3E  0E01               	movlw	1
 21955  003A40  6E2A               	movwf	?_inputHandler,c
 21956  003A42  0012               	return	
 21957  003A44                     i2l7806:
 21958                           
 21959                           ;UI.c: 456: down = 1;
 21960  003A44  0E00               	movlw	0
 21961  003A46  6E66               	movwf	_down+1,c
 21962  003A48  0E01               	movlw	1
 21963  003A4A  6E65               	movwf	_down,c
 21964                           
 21965                           ;UI.c: 457: return 1;
 21966  003A4C  0E00               	movlw	0
 21967  003A4E  6E2B               	movwf	?_inputHandler+1,c
 21968  003A50  0E01               	movlw	1
 21969  003A52  6E2A               	movwf	?_inputHandler,c
 21970  003A54  0012               	return	
 21971  003A56                     i2l7810:
 21972                           
 21973                           ;UI.c: 459: enter = 1;
 21974  003A56  0E00               	movlw	0
 21975  003A58  6E68               	movwf	_enter+1,c
 21976  003A5A  0E01               	movlw	1
 21977  003A5C  6E67               	movwf	_enter,c
 21978                           
 21979                           ;UI.c: 460: return 1;
 21980  003A5E  0E00               	movlw	0
 21981  003A60  6E2B               	movwf	?_inputHandler+1,c
 21982  003A62  0E01               	movlw	1
 21983  003A64  6E2A               	movwf	?_inputHandler,c
 21984  003A66  0012               	return	
 21985  003A68                     i2l7814:
 21986                           
 21987                           ;UI.c: 462: back = 1;
 21988  003A68  0E00               	movlw	0
 21989  003A6A  6E64               	movwf	_back+1,c
 21990  003A6C  0E01               	movlw	1
 21991  003A6E  6E63               	movwf	_back,c
 21992                           
 21993                           ;UI.c: 463: return 1;
 21994  003A70  0E00               	movlw	0
 21995  003A72  6E2B               	movwf	?_inputHandler+1,c
 21996  003A74  0E01               	movlw	1
 21997  003A76  6E2A               	movwf	?_inputHandler,c
 21998  003A78  0012               	return	
 21999  003A7A                     i2l7818:
 22000                           
 22001                           ;UI.c: 466: return 1;
 22002  003A7A  0E00               	movlw	0
 22003  003A7C  6E2B               	movwf	?_inputHandler+1,c
 22004  003A7E  0E01               	movlw	1
 22005  003A80  6E2A               	movwf	?_inputHandler,c
 22006                           
 22007                           ;UI.c: 467: }
 22008  003A82  0012               	return	
 22009  003A84                     i2l7824:
 22010  003A84  507D               	movf	_input,w,c	;volatile
 22011                           
 22012                           ; Switch size 1, requested type "space"
 22013                           ; Number of cases is 7, Range of values is 49 to 68
 22014                           ; switch strategies available:
 22015                           ; Name         Instructions Cycles
 22016                           ; simple_byte           22    12 (average)
 22017                           ;	Chosen strategy is simple_byte
 22018  003A86  0A31               	xorlw	49	; case 49
 22019  003A88  B4D8               	btfsc	status,2,c
 22020  003A8A  D789               	goto	i2l7754
 22021  003A8C  0A03               	xorlw	3	; case 50
 22022  003A8E  B4D8               	btfsc	status,2,c
 22023  003A90  D799               	goto	i2l7768
 22024  003A92  0A01               	xorlw	1	; case 51
 22025  003A94  B4D8               	btfsc	status,2,c
 22026  003A96  D7BA               	goto	i2l7788
 22027  003A98  0A72               	xorlw	114	; case 65
 22028  003A9A  B4D8               	btfsc	status,2,c
 22029  003A9C  D7CA               	goto	i2l7802
 22030  003A9E  0A03               	xorlw	3	; case 66
 22031  003AA0  B4D8               	btfsc	status,2,c
 22032  003AA2  D7D0               	goto	i2l7806
 22033  003AA4  0A01               	xorlw	1	; case 67
 22034  003AA6  B4D8               	btfsc	status,2,c
 22035  003AA8  D7D6               	goto	i2l7810
 22036  003AAA  0A07               	xorlw	7	; case 68
 22037  003AAC  B4D8               	btfsc	status,2,c
 22038  003AAE  D7DC               	goto	i2l7814
 22039  003AB0  D7E4               	goto	i2l7818
 22040  003AB2                     __end_of_inputHandler:
 22041                           	opt stack 0
 22042                           pclatu	equ	0xFFB
 22043                           pclath	equ	0xFFA
 22044                           tblptru	equ	0xFF8
 22045                           tblptrh	equ	0xFF7
 22046                           tblptrl	equ	0xFF6
 22047                           tablat	equ	0xFF5
 22048                           prodh	equ	0xFF4
 22049                           prodl	equ	0xFF3
 22050                           intcon	equ	0xFF2
 22051                           intcon2	equ	0xFF1
 22052                           intcon3	equ	0xFF0
 22053                           indf0	equ	0xFEF
 22054                           postinc0	equ	0xFEE
 22055                           fsr0h	equ	0xFEA
 22056                           fsr0l	equ	0xFE9
 22057                           wreg	equ	0xFE8
 22058                           postdec1	equ	0xFE5
 22059                           fsr1h	equ	0xFE2
 22060                           fsr1l	equ	0xFE1
 22061                           indf2	equ	0xFDF
 22062                           postinc2	equ	0xFDE
 22063                           postdec2	equ	0xFDD
 22064                           fsr2h	equ	0xFDA
 22065                           fsr2l	equ	0xFD9
 22066                           status	equ	0xFD8
 22067                           
 22068 ;; *************** function i2_change_state_to_menu_22 *****************
 22069 ;; Defined at:
 22070 ;;		line 501 in file "UI.c"
 22071 ;; Parameters:    Size  Location     Type
 22072 ;;		None
 22073 ;; Auto vars:     Size  Location     Type
 22074 ;;		None
 22075 ;; Return value:  Size  Location     Type
 22076 ;;                  1    wreg      void 
 22077 ;; Registers used:
 22078 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22079 ;; Tracked objects:
 22080 ;;		On entry : 0/0
 22081 ;;		On exit  : 0/0
 22082 ;;		Unchanged: 0/0
 22083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22084 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22085 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22086 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22087 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22088 ;;Total ram usage:        0 bytes
 22089 ;; Hardware stack levels used:    1
 22090 ;; Hardware stack levels required when called:    3
 22091 ;; This function calls:
 22092 ;;		i2_lcdInst
 22093 ;;		i2_printf
 22094 ;; This function is called by:
 22095 ;;		_updateMenu
 22096 ;;		_inputHandler
 22097 ;; This function uses a non-reentrant model
 22098 ;;
 22099                           
 22100                           	psect	text72
 22101  005900                     __ptext72:
 22102                           	opt stack 0
 22103  005900                     i2_change_state_to_menu_22:
 22104                           	opt stack 19
 22105                           
 22106                           ;UI.c: 502: cur_state = 22;
 22107                           
 22108                           ;incstack = 0
 22109  005900  0E00               	movlw	0
 22110  005902  0100               	movlb	0	; () banked
 22111  005904  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22112  005906  0E16               	movlw	22
 22113  005908  6FE6               	movwf	_cur_state& (0+255),b
 22114                           
 22115                           ; BSR set to: 0
 22116                           ;UI.c: 504: lcdInst(0b10000000);;
 22117  00590A  0E80               	movlw	128
 22118  00590C  ECBF  F02E         	call	i2_lcdInst
 22119                           
 22120                           ;UI.c: 505: printf("2. SORT        <");
 22121  005910  0EB7               	movlw	low STR_34
 22122  005912  6E0D               	movwf	i2printf@f,c
 22123  005914  0EFD               	movlw	high STR_34
 22124  005916  6E0E               	movwf	i2printf@f+1,c
 22125  005918  EC1F  F012         	call	i2_printf	;wreg free
 22126                           
 22127                           ;UI.c: 506: lcdInst(0b11000000);;
 22128  00591C  0EC0               	movlw	192
 22129  00591E  ECBF  F02E         	call	i2_lcdInst
 22130                           
 22131                           ;UI.c: 507: printf("3. LOGS         ");
 22132  005922  0EFC               	movlw	low STR_36
 22133  005924  6E0D               	movwf	i2printf@f,c
 22134  005926  0EFC               	movlw	high STR_36
 22135  005928  6E0E               	movwf	i2printf@f+1,c
 22136  00592A  EC1F  F012         	call	i2_printf	;wreg free
 22137  00592E  0012               	return		;funcret
 22138  005930                     __end_ofi2_change_state_to_menu_22:
 22139                           	opt stack 0
 22140                           pclatu	equ	0xFFB
 22141                           pclath	equ	0xFFA
 22142                           tblptru	equ	0xFF8
 22143                           tblptrh	equ	0xFF7
 22144                           tblptrl	equ	0xFF6
 22145                           tablat	equ	0xFF5
 22146                           prodh	equ	0xFF4
 22147                           prodl	equ	0xFF3
 22148                           intcon	equ	0xFF2
 22149                           intcon2	equ	0xFF1
 22150                           intcon3	equ	0xFF0
 22151                           indf0	equ	0xFEF
 22152                           postinc0	equ	0xFEE
 22153                           fsr0h	equ	0xFEA
 22154                           fsr0l	equ	0xFE9
 22155                           wreg	equ	0xFE8
 22156                           postdec1	equ	0xFE5
 22157                           fsr1h	equ	0xFE2
 22158                           fsr1l	equ	0xFE1
 22159                           indf2	equ	0xFDF
 22160                           postinc2	equ	0xFDE
 22161                           postdec2	equ	0xFDD
 22162                           fsr2h	equ	0xFDA
 22163                           fsr2l	equ	0xFD9
 22164                           status	equ	0xFD8
 22165                           
 22166 ;; *************** function i2_change_state_to_menu_12 *****************
 22167 ;; Defined at:
 22168 ;;		line 493 in file "UI.c"
 22169 ;; Parameters:    Size  Location     Type
 22170 ;;		None
 22171 ;; Auto vars:     Size  Location     Type
 22172 ;;		None
 22173 ;; Return value:  Size  Location     Type
 22174 ;;                  1    wreg      void 
 22175 ;; Registers used:
 22176 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22177 ;; Tracked objects:
 22178 ;;		On entry : 0/0
 22179 ;;		On exit  : 0/0
 22180 ;;		Unchanged: 0/0
 22181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22182 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22183 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22184 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22185 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22186 ;;Total ram usage:        0 bytes
 22187 ;; Hardware stack levels used:    1
 22188 ;; Hardware stack levels required when called:    3
 22189 ;; This function calls:
 22190 ;;		i2_lcdInst
 22191 ;;		i2_printf
 22192 ;; This function is called by:
 22193 ;;		_updateMenu
 22194 ;;		_inputHandler
 22195 ;; This function uses a non-reentrant model
 22196 ;;
 22197                           
 22198                           	psect	text73
 22199  005930                     __ptext73:
 22200                           	opt stack 0
 22201  005930                     i2_change_state_to_menu_12:
 22202                           	opt stack 19
 22203                           
 22204                           ;UI.c: 494: cur_state = 12;
 22205                           
 22206                           ;incstack = 0
 22207  005930  0E00               	movlw	0
 22208  005932  0100               	movlb	0	; () banked
 22209  005934  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22210  005936  0E0C               	movlw	12
 22211  005938  6FE6               	movwf	_cur_state& (0+255),b
 22212                           
 22213                           ; BSR set to: 0
 22214                           ;UI.c: 496: lcdInst(0b10000000);;
 22215  00593A  0E80               	movlw	128
 22216  00593C  ECBF  F02E         	call	i2_lcdInst
 22217                           
 22218                           ;UI.c: 497: printf("1. DATE/TIME    ");
 22219  005940  0E1E               	movlw	low STR_33
 22220  005942  6E0D               	movwf	i2printf@f,c
 22221  005944  0EFD               	movlw	high STR_33
 22222  005946  6E0E               	movwf	i2printf@f+1,c
 22223  005948  EC1F  F012         	call	i2_printf	;wreg free
 22224                           
 22225                           ;UI.c: 498: lcdInst(0b11000000);;
 22226  00594C  0EC0               	movlw	192
 22227  00594E  ECBF  F02E         	call	i2_lcdInst
 22228                           
 22229                           ;UI.c: 499: printf("2. SORT        <");
 22230  005952  0EB7               	movlw	low STR_34
 22231  005954  6E0D               	movwf	i2printf@f,c
 22232  005956  0EFD               	movlw	high STR_34
 22233  005958  6E0E               	movwf	i2printf@f+1,c
 22234  00595A  EC1F  F012         	call	i2_printf	;wreg free
 22235  00595E  0012               	return		;funcret
 22236  005960                     __end_ofi2_change_state_to_menu_12:
 22237                           	opt stack 0
 22238                           pclatu	equ	0xFFB
 22239                           pclath	equ	0xFFA
 22240                           tblptru	equ	0xFF8
 22241                           tblptrh	equ	0xFF7
 22242                           tblptrl	equ	0xFF6
 22243                           tablat	equ	0xFF5
 22244                           prodh	equ	0xFF4
 22245                           prodl	equ	0xFF3
 22246                           intcon	equ	0xFF2
 22247                           intcon2	equ	0xFF1
 22248                           intcon3	equ	0xFF0
 22249                           indf0	equ	0xFEF
 22250                           postinc0	equ	0xFEE
 22251                           fsr0h	equ	0xFEA
 22252                           fsr0l	equ	0xFE9
 22253                           wreg	equ	0xFE8
 22254                           postdec1	equ	0xFE5
 22255                           fsr1h	equ	0xFE2
 22256                           fsr1l	equ	0xFE1
 22257                           indf2	equ	0xFDF
 22258                           postinc2	equ	0xFDE
 22259                           postdec2	equ	0xFDD
 22260                           fsr2h	equ	0xFDA
 22261                           fsr2l	equ	0xFD9
 22262                           status	equ	0xFD8
 22263                           
 22264 ;; *************** function _change_state_to_menu_23 *****************
 22265 ;; Defined at:
 22266 ;;		line 509 in file "UI.c"
 22267 ;; Parameters:    Size  Location     Type
 22268 ;;		None
 22269 ;; Auto vars:     Size  Location     Type
 22270 ;;		None
 22271 ;; Return value:  Size  Location     Type
 22272 ;;                  1    wreg      void 
 22273 ;; Registers used:
 22274 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22275 ;; Tracked objects:
 22276 ;;		On entry : 0/0
 22277 ;;		On exit  : 0/0
 22278 ;;		Unchanged: 0/0
 22279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22280 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22281 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22282 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22283 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22284 ;;Total ram usage:        0 bytes
 22285 ;; Hardware stack levels used:    1
 22286 ;; Hardware stack levels required when called:    3
 22287 ;; This function calls:
 22288 ;;		i2_lcdInst
 22289 ;;		i2_printf
 22290 ;; This function is called by:
 22291 ;;		_updateMenu
 22292 ;;		_inputHandler
 22293 ;; This function uses a non-reentrant model
 22294 ;;
 22295                           
 22296                           	psect	text74
 22297  005960                     __ptext74:
 22298                           	opt stack 0
 22299  005960                     _change_state_to_menu_23:
 22300                           	opt stack 18
 22301                           
 22302                           ;UI.c: 510: cur_state = 23;
 22303                           
 22304                           ;incstack = 0
 22305  005960  0E00               	movlw	0
 22306  005962  0100               	movlb	0	; () banked
 22307  005964  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22308  005966  0E17               	movlw	23
 22309  005968  6FE6               	movwf	_cur_state& (0+255),b
 22310                           
 22311                           ; BSR set to: 0
 22312                           ;UI.c: 512: lcdInst(0b10000000);;
 22313  00596A  0E80               	movlw	128
 22314  00596C  ECBF  F02E         	call	i2_lcdInst
 22315                           
 22316                           ;UI.c: 513: printf("2. SORT         ");
 22317  005970  0E0D               	movlw	low STR_32
 22318  005972  6E0D               	movwf	i2printf@f,c
 22319  005974  0EFD               	movlw	high STR_32
 22320  005976  6E0E               	movwf	i2printf@f+1,c
 22321  005978  EC1F  F012         	call	i2_printf	;wreg free
 22322                           
 22323                           ;UI.c: 514: lcdInst(0b11000000);;
 22324  00597C  0EC0               	movlw	192
 22325  00597E  ECBF  F02E         	call	i2_lcdInst
 22326                           
 22327                           ;UI.c: 515: printf("3. LOGS        <");
 22328  005982  0EA6               	movlw	low STR_38
 22329  005984  6E0D               	movwf	i2printf@f,c
 22330  005986  0EFD               	movlw	high STR_38
 22331  005988  6E0E               	movwf	i2printf@f+1,c
 22332  00598A  EC1F  F012         	call	i2_printf	;wreg free
 22333  00598E  0012               	return		;funcret
 22334  005990                     __end_of_change_state_to_menu_23:
 22335                           	opt stack 0
 22336                           pclatu	equ	0xFFB
 22337                           pclath	equ	0xFFA
 22338                           tblptru	equ	0xFF8
 22339                           tblptrh	equ	0xFF7
 22340                           tblptrl	equ	0xFF6
 22341                           tablat	equ	0xFF5
 22342                           prodh	equ	0xFF4
 22343                           prodl	equ	0xFF3
 22344                           intcon	equ	0xFF2
 22345                           intcon2	equ	0xFF1
 22346                           intcon3	equ	0xFF0
 22347                           indf0	equ	0xFEF
 22348                           postinc0	equ	0xFEE
 22349                           fsr0h	equ	0xFEA
 22350                           fsr0l	equ	0xFE9
 22351                           wreg	equ	0xFE8
 22352                           postdec1	equ	0xFE5
 22353                           fsr1h	equ	0xFE2
 22354                           fsr1l	equ	0xFE1
 22355                           indf2	equ	0xFDF
 22356                           postinc2	equ	0xFDE
 22357                           postdec2	equ	0xFDD
 22358                           fsr2h	equ	0xFDA
 22359                           fsr2l	equ	0xFD9
 22360                           status	equ	0xFD8
 22361                           
 22362 ;; *************** function _change_state_to_menu_11 *****************
 22363 ;; Defined at:
 22364 ;;		line 485 in file "UI.c"
 22365 ;; Parameters:    Size  Location     Type
 22366 ;;		None
 22367 ;; Auto vars:     Size  Location     Type
 22368 ;;		None
 22369 ;; Return value:  Size  Location     Type
 22370 ;;                  1    wreg      void 
 22371 ;; Registers used:
 22372 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22373 ;; Tracked objects:
 22374 ;;		On entry : 0/0
 22375 ;;		On exit  : 0/0
 22376 ;;		Unchanged: 0/0
 22377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22378 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22379 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22380 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22381 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22382 ;;Total ram usage:        0 bytes
 22383 ;; Hardware stack levels used:    1
 22384 ;; Hardware stack levels required when called:    3
 22385 ;; This function calls:
 22386 ;;		i2_lcdInst
 22387 ;;		i2_printf
 22388 ;; This function is called by:
 22389 ;;		_updateMenu
 22390 ;;		_inputHandler
 22391 ;; This function uses a non-reentrant model
 22392 ;;
 22393                           
 22394                           	psect	text75
 22395  005990                     __ptext75:
 22396                           	opt stack 0
 22397  005990                     _change_state_to_menu_11:
 22398                           	opt stack 18
 22399                           
 22400                           ;UI.c: 486: cur_state = 11;
 22401                           
 22402                           ;incstack = 0
 22403  005990  0E00               	movlw	0
 22404  005992  0100               	movlb	0	; () banked
 22405  005994  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22406  005996  0E0B               	movlw	11
 22407  005998  6FE6               	movwf	_cur_state& (0+255),b
 22408                           
 22409                           ; BSR set to: 0
 22410                           ;UI.c: 488: lcdInst(0b10000000);;
 22411  00599A  0E80               	movlw	128
 22412  00599C  ECBF  F02E         	call	i2_lcdInst
 22413                           
 22414                           ;UI.c: 489: printf("1. DATE/TIME   <");
 22415  0059A0  0EC8               	movlw	low STR_31
 22416  0059A2  6E0D               	movwf	i2printf@f,c
 22417  0059A4  0EFD               	movlw	high STR_31
 22418  0059A6  6E0E               	movwf	i2printf@f+1,c
 22419  0059A8  EC1F  F012         	call	i2_printf	;wreg free
 22420                           
 22421                           ;UI.c: 490: lcdInst(0b11000000);;
 22422  0059AC  0EC0               	movlw	192
 22423  0059AE  ECBF  F02E         	call	i2_lcdInst
 22424                           
 22425                           ;UI.c: 491: printf("2. SORT         ");
 22426  0059B2  0E0D               	movlw	low STR_32
 22427  0059B4  6E0D               	movwf	i2printf@f,c
 22428  0059B6  0EFD               	movlw	high STR_32
 22429  0059B8  6E0E               	movwf	i2printf@f+1,c
 22430  0059BA  EC1F  F012         	call	i2_printf	;wreg free
 22431  0059BE  0012               	return		;funcret
 22432  0059C0                     __end_of_change_state_to_menu_11:
 22433                           	opt stack 0
 22434                           pclatu	equ	0xFFB
 22435                           pclath	equ	0xFFA
 22436                           tblptru	equ	0xFF8
 22437                           tblptrh	equ	0xFF7
 22438                           tblptrl	equ	0xFF6
 22439                           tablat	equ	0xFF5
 22440                           prodh	equ	0xFF4
 22441                           prodl	equ	0xFF3
 22442                           intcon	equ	0xFF2
 22443                           intcon2	equ	0xFF1
 22444                           intcon3	equ	0xFF0
 22445                           indf0	equ	0xFEF
 22446                           postinc0	equ	0xFEE
 22447                           fsr0h	equ	0xFEA
 22448                           fsr0l	equ	0xFE9
 22449                           wreg	equ	0xFE8
 22450                           postdec1	equ	0xFE5
 22451                           fsr1h	equ	0xFE2
 22452                           fsr1l	equ	0xFE1
 22453                           indf2	equ	0xFDF
 22454                           postinc2	equ	0xFDE
 22455                           postdec2	equ	0xFDD
 22456                           fsr2h	equ	0xFDA
 22457                           fsr2l	equ	0xFD9
 22458                           status	equ	0xFD8
 22459                           
 22460 ;; *************** function _change_state_to_logs_34 *****************
 22461 ;; Defined at:
 22462 ;;		line 552 in file "UI.c"
 22463 ;; Parameters:    Size  Location     Type
 22464 ;;		None
 22465 ;; Auto vars:     Size  Location     Type
 22466 ;;		None
 22467 ;; Return value:  Size  Location     Type
 22468 ;;                  1    wreg      void 
 22469 ;; Registers used:
 22470 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22471 ;; Tracked objects:
 22472 ;;		On entry : 0/0
 22473 ;;		On exit  : 0/0
 22474 ;;		Unchanged: 0/0
 22475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22476 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22477 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22478 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22479 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22480 ;;Total ram usage:        0 bytes
 22481 ;; Hardware stack levels used:    1
 22482 ;; Hardware stack levels required when called:    3
 22483 ;; This function calls:
 22484 ;;		i2_lcdInst
 22485 ;;		i2_printf
 22486 ;; This function is called by:
 22487 ;;		_updateMenu
 22488 ;;		_inputHandler
 22489 ;; This function uses a non-reentrant model
 22490 ;;
 22491                           
 22492                           	psect	text76
 22493  0059C0                     __ptext76:
 22494                           	opt stack 0
 22495  0059C0                     _change_state_to_logs_34:
 22496                           	opt stack 18
 22497                           
 22498                           ;UI.c: 553: cur_state = 1034;
 22499                           
 22500                           ;incstack = 0
 22501  0059C0  0E04               	movlw	4
 22502  0059C2  0100               	movlb	0	; () banked
 22503  0059C4  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22504  0059C6  0E0A               	movlw	10
 22505  0059C8  6FE6               	movwf	_cur_state& (0+255),b
 22506                           
 22507                           ; BSR set to: 0
 22508                           ;UI.c: 554: lcdInst(0b10000000);;
 22509  0059CA  0E80               	movlw	128
 22510  0059CC  ECBF  F02E         	call	i2_lcdInst
 22511                           
 22512                           ;UI.c: 555: printf("LOG 3           ");
 22513  0059D0  0EDA               	movlw	low STR_44
 22514  0059D2  6E0D               	movwf	i2printf@f,c
 22515  0059D4  0EFC               	movlw	high STR_44
 22516  0059D6  6E0E               	movwf	i2printf@f+1,c
 22517  0059D8  EC1F  F012         	call	i2_printf	;wreg free
 22518                           
 22519                           ;UI.c: 556: lcdInst(0b11000000);;
 22520  0059DC  0EC0               	movlw	192
 22521  0059DE  ECBF  F02E         	call	i2_lcdInst
 22522                           
 22523                           ;UI.c: 557: printf("LOG 4          <");
 22524  0059E2  0E95               	movlw	low STR_50
 22525  0059E4  6E0D               	movwf	i2printf@f,c
 22526  0059E6  0EFD               	movlw	high STR_50
 22527  0059E8  6E0E               	movwf	i2printf@f+1,c
 22528  0059EA  EC1F  F012         	call	i2_printf	;wreg free
 22529  0059EE  0012               	return		;funcret
 22530  0059F0                     __end_of_change_state_to_logs_34:
 22531                           	opt stack 0
 22532                           pclatu	equ	0xFFB
 22533                           pclath	equ	0xFFA
 22534                           tblptru	equ	0xFF8
 22535                           tblptrh	equ	0xFF7
 22536                           tblptrl	equ	0xFF6
 22537                           tablat	equ	0xFF5
 22538                           prodh	equ	0xFF4
 22539                           prodl	equ	0xFF3
 22540                           intcon	equ	0xFF2
 22541                           intcon2	equ	0xFF1
 22542                           intcon3	equ	0xFF0
 22543                           indf0	equ	0xFEF
 22544                           postinc0	equ	0xFEE
 22545                           fsr0h	equ	0xFEA
 22546                           fsr0l	equ	0xFE9
 22547                           wreg	equ	0xFE8
 22548                           postdec1	equ	0xFE5
 22549                           fsr1h	equ	0xFE2
 22550                           fsr1l	equ	0xFE1
 22551                           indf2	equ	0xFDF
 22552                           postinc2	equ	0xFDE
 22553                           postdec2	equ	0xFDD
 22554                           fsr2h	equ	0xFDA
 22555                           fsr2l	equ	0xFD9
 22556                           status	equ	0xFD8
 22557                           
 22558 ;; *************** function _change_state_to_logs_33 *****************
 22559 ;; Defined at:
 22560 ;;		line 545 in file "UI.c"
 22561 ;; Parameters:    Size  Location     Type
 22562 ;;		None
 22563 ;; Auto vars:     Size  Location     Type
 22564 ;;		None
 22565 ;; Return value:  Size  Location     Type
 22566 ;;                  1    wreg      void 
 22567 ;; Registers used:
 22568 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22569 ;; Tracked objects:
 22570 ;;		On entry : 0/0
 22571 ;;		On exit  : 0/0
 22572 ;;		Unchanged: 0/0
 22573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22574 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22575 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22576 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22577 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22578 ;;Total ram usage:        0 bytes
 22579 ;; Hardware stack levels used:    1
 22580 ;; Hardware stack levels required when called:    3
 22581 ;; This function calls:
 22582 ;;		i2_lcdInst
 22583 ;;		i2_printf
 22584 ;; This function is called by:
 22585 ;;		_updateMenu
 22586 ;;		_inputHandler
 22587 ;; This function uses a non-reentrant model
 22588 ;;
 22589                           
 22590                           	psect	text77
 22591  0059F0                     __ptext77:
 22592                           	opt stack 0
 22593  0059F0                     _change_state_to_logs_33:
 22594                           	opt stack 18
 22595                           
 22596                           ;UI.c: 546: cur_state = 1033;
 22597                           
 22598                           ;incstack = 0
 22599  0059F0  0E04               	movlw	4
 22600  0059F2  0100               	movlb	0	; () banked
 22601  0059F4  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22602  0059F6  0E09               	movlw	9
 22603  0059F8  6FE6               	movwf	_cur_state& (0+255),b
 22604                           
 22605                           ; BSR set to: 0
 22606                           ;UI.c: 547: lcdInst(0b10000000);;
 22607  0059FA  0E80               	movlw	128
 22608  0059FC  ECBF  F02E         	call	i2_lcdInst
 22609                           
 22610                           ;UI.c: 548: printf("LOG 3          <");
 22611  005A00  0E84               	movlw	low STR_46
 22612  005A02  6E0D               	movwf	i2printf@f,c
 22613  005A04  0EFD               	movlw	high STR_46
 22614  005A06  6E0E               	movwf	i2printf@f+1,c
 22615  005A08  EC1F  F012         	call	i2_printf	;wreg free
 22616                           
 22617                           ;UI.c: 549: lcdInst(0b11000000);;
 22618  005A0C  0EC0               	movlw	192
 22619  005A0E  ECBF  F02E         	call	i2_lcdInst
 22620                           
 22621                           ;UI.c: 550: printf("LOG 4           ");
 22622  005A12  0EEB               	movlw	low STR_48
 22623  005A14  6E0D               	movwf	i2printf@f,c
 22624  005A16  0EFC               	movlw	high STR_48
 22625  005A18  6E0E               	movwf	i2printf@f+1,c
 22626  005A1A  EC1F  F012         	call	i2_printf	;wreg free
 22627  005A1E  0012               	return		;funcret
 22628  005A20                     __end_of_change_state_to_logs_33:
 22629                           	opt stack 0
 22630                           pclatu	equ	0xFFB
 22631                           pclath	equ	0xFFA
 22632                           tblptru	equ	0xFF8
 22633                           tblptrh	equ	0xFF7
 22634                           tblptrl	equ	0xFF6
 22635                           tablat	equ	0xFF5
 22636                           prodh	equ	0xFF4
 22637                           prodl	equ	0xFF3
 22638                           intcon	equ	0xFF2
 22639                           intcon2	equ	0xFF1
 22640                           intcon3	equ	0xFF0
 22641                           indf0	equ	0xFEF
 22642                           postinc0	equ	0xFEE
 22643                           fsr0h	equ	0xFEA
 22644                           fsr0l	equ	0xFE9
 22645                           wreg	equ	0xFE8
 22646                           postdec1	equ	0xFE5
 22647                           fsr1h	equ	0xFE2
 22648                           fsr1l	equ	0xFE1
 22649                           indf2	equ	0xFDF
 22650                           postinc2	equ	0xFDE
 22651                           postdec2	equ	0xFDD
 22652                           fsr2h	equ	0xFDA
 22653                           fsr2l	equ	0xFD9
 22654                           status	equ	0xFD8
 22655                           
 22656 ;; *************** function _change_state_to_logs_23 *****************
 22657 ;; Defined at:
 22658 ;;		line 538 in file "UI.c"
 22659 ;; Parameters:    Size  Location     Type
 22660 ;;		None
 22661 ;; Auto vars:     Size  Location     Type
 22662 ;;		None
 22663 ;; Return value:  Size  Location     Type
 22664 ;;                  1    wreg      void 
 22665 ;; Registers used:
 22666 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22667 ;; Tracked objects:
 22668 ;;		On entry : 0/0
 22669 ;;		On exit  : 0/0
 22670 ;;		Unchanged: 0/0
 22671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22672 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22673 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22674 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22675 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22676 ;;Total ram usage:        0 bytes
 22677 ;; Hardware stack levels used:    1
 22678 ;; Hardware stack levels required when called:    3
 22679 ;; This function calls:
 22680 ;;		i2_lcdInst
 22681 ;;		i2_printf
 22682 ;; This function is called by:
 22683 ;;		_updateMenu
 22684 ;;		_inputHandler
 22685 ;; This function uses a non-reentrant model
 22686 ;;
 22687                           
 22688                           	psect	text78
 22689  005ADE                     __ptext78:
 22690                           	opt stack 0
 22691  005ADE                     _change_state_to_logs_23:
 22692                           	opt stack 18
 22693                           
 22694                           ;UI.c: 539: cur_state = 1023;
 22695                           
 22696                           ;incstack = 0
 22697  005ADE  0E03               	movlw	3
 22698  005AE0  0100               	movlb	0	; () banked
 22699  005AE2  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22700  005AE4  69E6               	setf	_cur_state& (0+255),b
 22701                           
 22702                           ; BSR set to: 0
 22703                           ;UI.c: 540: lcdInst(0b10000000);;
 22704  005AE6  0E80               	movlw	128
 22705  005AE8  ECBF  F02E         	call	i2_lcdInst
 22706                           
 22707                           ;UI.c: 541: printf("LOG 2           ");
 22708  005AEC  0EC9               	movlw	low STR_40
 22709  005AEE  6E0D               	movwf	i2printf@f,c
 22710  005AF0  0EFC               	movlw	high STR_40
 22711  005AF2  6E0E               	movwf	i2printf@f+1,c
 22712  005AF4  EC1F  F012         	call	i2_printf	;wreg free
 22713                           
 22714                           ;UI.c: 542: lcdInst(0b11000000);;
 22715  005AF8  0EC0               	movlw	192
 22716  005AFA  ECBF  F02E         	call	i2_lcdInst
 22717                           
 22718                           ;UI.c: 543: printf("LOG 3          <");
 22719  005AFE  0E84               	movlw	low STR_46
 22720  005B00  6E0D               	movwf	i2printf@f,c
 22721  005B02  0EFD               	movlw	high STR_46
 22722  005B04  6E0E               	movwf	i2printf@f+1,c
 22723  005B06  EC1F  F012         	call	i2_printf	;wreg free
 22724  005B0A  0012               	return		;funcret
 22725  005B0C                     __end_of_change_state_to_logs_23:
 22726                           	opt stack 0
 22727                           pclatu	equ	0xFFB
 22728                           pclath	equ	0xFFA
 22729                           tblptru	equ	0xFF8
 22730                           tblptrh	equ	0xFF7
 22731                           tblptrl	equ	0xFF6
 22732                           tablat	equ	0xFF5
 22733                           prodh	equ	0xFF4
 22734                           prodl	equ	0xFF3
 22735                           intcon	equ	0xFF2
 22736                           intcon2	equ	0xFF1
 22737                           intcon3	equ	0xFF0
 22738                           indf0	equ	0xFEF
 22739                           postinc0	equ	0xFEE
 22740                           fsr0h	equ	0xFEA
 22741                           fsr0l	equ	0xFE9
 22742                           wreg	equ	0xFE8
 22743                           postdec1	equ	0xFE5
 22744                           fsr1h	equ	0xFE2
 22745                           fsr1l	equ	0xFE1
 22746                           indf2	equ	0xFDF
 22747                           postinc2	equ	0xFDE
 22748                           postdec2	equ	0xFDD
 22749                           fsr2h	equ	0xFDA
 22750                           fsr2l	equ	0xFD9
 22751                           status	equ	0xFD8
 22752                           
 22753 ;; *************** function _change_state_to_logs_22 *****************
 22754 ;; Defined at:
 22755 ;;		line 531 in file "UI.c"
 22756 ;; Parameters:    Size  Location     Type
 22757 ;;		None
 22758 ;; Auto vars:     Size  Location     Type
 22759 ;;		None
 22760 ;; Return value:  Size  Location     Type
 22761 ;;                  1    wreg      void 
 22762 ;; Registers used:
 22763 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22764 ;; Tracked objects:
 22765 ;;		On entry : 0/0
 22766 ;;		On exit  : 0/0
 22767 ;;		Unchanged: 0/0
 22768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22769 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22770 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22771 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22772 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22773 ;;Total ram usage:        0 bytes
 22774 ;; Hardware stack levels used:    1
 22775 ;; Hardware stack levels required when called:    3
 22776 ;; This function calls:
 22777 ;;		i2_lcdInst
 22778 ;;		i2_printf
 22779 ;; This function is called by:
 22780 ;;		_updateMenu
 22781 ;;		_inputHandler
 22782 ;; This function uses a non-reentrant model
 22783 ;;
 22784                           
 22785                           	psect	text79
 22786  005A20                     __ptext79:
 22787                           	opt stack 0
 22788  005A20                     _change_state_to_logs_22:
 22789                           	opt stack 18
 22790                           
 22791                           ;UI.c: 532: cur_state = 1022;
 22792                           
 22793                           ;incstack = 0
 22794  005A20  0E03               	movlw	3
 22795  005A22  0100               	movlb	0	; () banked
 22796  005A24  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22797  005A26  0EFE               	movlw	254
 22798  005A28  6FE6               	movwf	_cur_state& (0+255),b
 22799                           
 22800                           ; BSR set to: 0
 22801                           ;UI.c: 533: lcdInst(0b10000000);;
 22802  005A2A  0E80               	movlw	128
 22803  005A2C  ECBF  F02E         	call	i2_lcdInst
 22804                           
 22805                           ;UI.c: 534: printf("LOG 2          <");
 22806  005A30  0E73               	movlw	low STR_42
 22807  005A32  6E0D               	movwf	i2printf@f,c
 22808  005A34  0EFD               	movlw	high STR_42
 22809  005A36  6E0E               	movwf	i2printf@f+1,c
 22810  005A38  EC1F  F012         	call	i2_printf	;wreg free
 22811                           
 22812                           ;UI.c: 535: lcdInst(0b11000000);;
 22813  005A3C  0EC0               	movlw	192
 22814  005A3E  ECBF  F02E         	call	i2_lcdInst
 22815                           
 22816                           ;UI.c: 536: printf("LOG 3           ");
 22817  005A42  0EDA               	movlw	low STR_44
 22818  005A44  6E0D               	movwf	i2printf@f,c
 22819  005A46  0EFC               	movlw	high STR_44
 22820  005A48  6E0E               	movwf	i2printf@f+1,c
 22821  005A4A  EC1F  F012         	call	i2_printf	;wreg free
 22822  005A4E  0012               	return		;funcret
 22823  005A50                     __end_of_change_state_to_logs_22:
 22824                           	opt stack 0
 22825                           pclatu	equ	0xFFB
 22826                           pclath	equ	0xFFA
 22827                           tblptru	equ	0xFF8
 22828                           tblptrh	equ	0xFF7
 22829                           tblptrl	equ	0xFF6
 22830                           tablat	equ	0xFF5
 22831                           prodh	equ	0xFF4
 22832                           prodl	equ	0xFF3
 22833                           intcon	equ	0xFF2
 22834                           intcon2	equ	0xFF1
 22835                           intcon3	equ	0xFF0
 22836                           indf0	equ	0xFEF
 22837                           postinc0	equ	0xFEE
 22838                           fsr0h	equ	0xFEA
 22839                           fsr0l	equ	0xFE9
 22840                           wreg	equ	0xFE8
 22841                           postdec1	equ	0xFE5
 22842                           fsr1h	equ	0xFE2
 22843                           fsr1l	equ	0xFE1
 22844                           indf2	equ	0xFDF
 22845                           postinc2	equ	0xFDE
 22846                           postdec2	equ	0xFDD
 22847                           fsr2h	equ	0xFDA
 22848                           fsr2l	equ	0xFD9
 22849                           status	equ	0xFD8
 22850                           
 22851 ;; *************** function _change_state_to_logs_12 *****************
 22852 ;; Defined at:
 22853 ;;		line 524 in file "UI.c"
 22854 ;; Parameters:    Size  Location     Type
 22855 ;;		None
 22856 ;; Auto vars:     Size  Location     Type
 22857 ;;		None
 22858 ;; Return value:  Size  Location     Type
 22859 ;;                  1    wreg      void 
 22860 ;; Registers used:
 22861 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22862 ;; Tracked objects:
 22863 ;;		On entry : 0/0
 22864 ;;		On exit  : 0/0
 22865 ;;		Unchanged: 0/0
 22866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22867 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22868 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22869 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22870 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22871 ;;Total ram usage:        0 bytes
 22872 ;; Hardware stack levels used:    1
 22873 ;; Hardware stack levels required when called:    3
 22874 ;; This function calls:
 22875 ;;		i2_lcdInst
 22876 ;;		i2_printf
 22877 ;; This function is called by:
 22878 ;;		_updateMenu
 22879 ;;		_inputHandler
 22880 ;; This function uses a non-reentrant model
 22881 ;;
 22882                           
 22883                           	psect	text80
 22884  005A50                     __ptext80:
 22885                           	opt stack 0
 22886  005A50                     _change_state_to_logs_12:
 22887                           	opt stack 18
 22888                           
 22889                           ;UI.c: 525: cur_state = 1012;
 22890                           
 22891                           ;incstack = 0
 22892  005A50  0E03               	movlw	3
 22893  005A52  0100               	movlb	0	; () banked
 22894  005A54  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22895  005A56  0EF4               	movlw	244
 22896  005A58  6FE6               	movwf	_cur_state& (0+255),b
 22897                           
 22898                           ; BSR set to: 0
 22899                           ;UI.c: 526: lcdInst(0b10000000);;
 22900  005A5A  0E80               	movlw	128
 22901  005A5C  ECBF  F02E         	call	i2_lcdInst
 22902                           
 22903                           ;UI.c: 527: printf("LOG 1           ");
 22904  005A60  0EB8               	movlw	low STR_41
 22905  005A62  6E0D               	movwf	i2printf@f,c
 22906  005A64  0EFC               	movlw	high STR_41
 22907  005A66  6E0E               	movwf	i2printf@f+1,c
 22908  005A68  EC1F  F012         	call	i2_printf	;wreg free
 22909                           
 22910                           ;UI.c: 528: lcdInst(0b11000000);;
 22911  005A6C  0EC0               	movlw	192
 22912  005A6E  ECBF  F02E         	call	i2_lcdInst
 22913                           
 22914                           ;UI.c: 529: printf("LOG 2          <");
 22915  005A72  0E73               	movlw	low STR_42
 22916  005A74  6E0D               	movwf	i2printf@f,c
 22917  005A76  0EFD               	movlw	high STR_42
 22918  005A78  6E0E               	movwf	i2printf@f+1,c
 22919  005A7A  EC1F  F012         	call	i2_printf	;wreg free
 22920  005A7E  0012               	return		;funcret
 22921  005A80                     __end_of_change_state_to_logs_12:
 22922                           	opt stack 0
 22923                           pclatu	equ	0xFFB
 22924                           pclath	equ	0xFFA
 22925                           tblptru	equ	0xFF8
 22926                           tblptrh	equ	0xFF7
 22927                           tblptrl	equ	0xFF6
 22928                           tablat	equ	0xFF5
 22929                           prodh	equ	0xFF4
 22930                           prodl	equ	0xFF3
 22931                           intcon	equ	0xFF2
 22932                           intcon2	equ	0xFF1
 22933                           intcon3	equ	0xFF0
 22934                           indf0	equ	0xFEF
 22935                           postinc0	equ	0xFEE
 22936                           fsr0h	equ	0xFEA
 22937                           fsr0l	equ	0xFE9
 22938                           wreg	equ	0xFE8
 22939                           postdec1	equ	0xFE5
 22940                           fsr1h	equ	0xFE2
 22941                           fsr1l	equ	0xFE1
 22942                           indf2	equ	0xFDF
 22943                           postinc2	equ	0xFDE
 22944                           postdec2	equ	0xFDD
 22945                           fsr2h	equ	0xFDA
 22946                           fsr2l	equ	0xFD9
 22947                           status	equ	0xFD8
 22948                           
 22949 ;; *************** function _change_state_to_logs_11 *****************
 22950 ;; Defined at:
 22951 ;;		line 517 in file "UI.c"
 22952 ;; Parameters:    Size  Location     Type
 22953 ;;		None
 22954 ;; Auto vars:     Size  Location     Type
 22955 ;;		None
 22956 ;; Return value:  Size  Location     Type
 22957 ;;                  1    wreg      void 
 22958 ;; Registers used:
 22959 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22960 ;; Tracked objects:
 22961 ;;		On entry : 0/0
 22962 ;;		On exit  : 0/0
 22963 ;;		Unchanged: 0/0
 22964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22965 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22966 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22967 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22968 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22969 ;;Total ram usage:        0 bytes
 22970 ;; Hardware stack levels used:    1
 22971 ;; Hardware stack levels required when called:    3
 22972 ;; This function calls:
 22973 ;;		i2_lcdInst
 22974 ;;		i2_printf
 22975 ;; This function is called by:
 22976 ;;		_updateMenu
 22977 ;;		_inputHandler
 22978 ;; This function uses a non-reentrant model
 22979 ;;
 22980                           
 22981                           	psect	text81
 22982  005A80                     __ptext81:
 22983                           	opt stack 0
 22984  005A80                     _change_state_to_logs_11:
 22985                           	opt stack 18
 22986                           
 22987                           ;UI.c: 518: cur_state = 1011;
 22988                           
 22989                           ;incstack = 0
 22990  005A80  0E03               	movlw	3
 22991  005A82  0100               	movlb	0	; () banked
 22992  005A84  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22993  005A86  0EF3               	movlw	243
 22994  005A88  6FE6               	movwf	_cur_state& (0+255),b
 22995                           
 22996                           ; BSR set to: 0
 22997                           ;UI.c: 519: lcdInst(0b10000000);;
 22998  005A8A  0E80               	movlw	128
 22999  005A8C  ECBF  F02E         	call	i2_lcdInst
 23000                           
 23001                           ;UI.c: 520: printf("LOG 1          <");
 23002  005A90  0E62               	movlw	low STR_39
 23003  005A92  6E0D               	movwf	i2printf@f,c
 23004  005A94  0EFD               	movlw	high STR_39
 23005  005A96  6E0E               	movwf	i2printf@f+1,c
 23006  005A98  EC1F  F012         	call	i2_printf	;wreg free
 23007                           
 23008                           ;UI.c: 521: lcdInst(0b11000000);;
 23009  005A9C  0EC0               	movlw	192
 23010  005A9E  ECBF  F02E         	call	i2_lcdInst
 23011                           
 23012                           ;UI.c: 522: printf("LOG 2           ");
 23013  005AA2  0EC9               	movlw	low STR_40
 23014  005AA4  6E0D               	movwf	i2printf@f,c
 23015  005AA6  0EFC               	movlw	high STR_40
 23016  005AA8  6E0E               	movwf	i2printf@f+1,c
 23017  005AAA  EC1F  F012         	call	i2_printf	;wreg free
 23018  005AAE  0012               	return		;funcret
 23019  005AB0                     __end_of_change_state_to_logs_11:
 23020                           	opt stack 0
 23021                           pclatu	equ	0xFFB
 23022                           pclath	equ	0xFFA
 23023                           tblptru	equ	0xFF8
 23024                           tblptrh	equ	0xFF7
 23025                           tblptrl	equ	0xFF6
 23026                           tablat	equ	0xFF5
 23027                           prodh	equ	0xFF4
 23028                           prodl	equ	0xFF3
 23029                           intcon	equ	0xFF2
 23030                           intcon2	equ	0xFF1
 23031                           intcon3	equ	0xFF0
 23032                           indf0	equ	0xFEF
 23033                           postinc0	equ	0xFEE
 23034                           fsr0h	equ	0xFEA
 23035                           fsr0l	equ	0xFE9
 23036                           wreg	equ	0xFE8
 23037                           postdec1	equ	0xFE5
 23038                           fsr1h	equ	0xFE2
 23039                           fsr1l	equ	0xFE1
 23040                           indf2	equ	0xFDF
 23041                           postinc2	equ	0xFDE
 23042                           postdec2	equ	0xFDD
 23043                           fsr2h	equ	0xFDA
 23044                           fsr2l	equ	0xFD9
 23045                           status	equ	0xFD8
 23046                           
 23047 ;; *************** function _dispLogs *****************
 23048 ;; Defined at:
 23049 ;;		line 470 in file "UI.c"
 23050 ;; Parameters:    Size  Location     Type
 23051 ;;  myLog           2   17[COMRAM] int 
 23052 ;; Auto vars:     Size  Location     Type
 23053 ;;		None
 23054 ;; Return value:  Size  Location     Type
 23055 ;;                  1    wreg      void 
 23056 ;; Registers used:
 23057 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 23058 ;; Tracked objects:
 23059 ;;		On entry : 0/0
 23060 ;;		On exit  : 0/0
 23061 ;;		Unchanged: 0/0
 23062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23063 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23064 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23065 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23066 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23067 ;;Total ram usage:        2 bytes
 23068 ;; Hardware stack levels used:    1
 23069 ;; Hardware stack levels required when called:    2
 23070 ;; This function calls:
 23071 ;;		_retrieveLog
 23072 ;; This function is called by:
 23073 ;;		_updateMenu
 23074 ;; This function uses a non-reentrant model
 23075 ;;
 23076                           
 23077                           	psect	text82
 23078  005C2A                     __ptext82:
 23079                           	opt stack 0
 23080  005C2A                     _dispLogs:
 23081                           	opt stack 20
 23082                           
 23083                           ;UI.c: 471: logstate = 1;
 23084                           
 23085                           ;incstack = 0
 23086  005C2A  0E00               	movlw	0
 23087  005C2C  0100               	movlb	0	; () banked
 23088  005C2E  6FF9               	movwf	(_logstate+1)& (0+255),b
 23089  005C30  0E01               	movlw	1
 23090  005C32  6FF8               	movwf	_logstate& (0+255),b
 23091                           
 23092                           ; BSR set to: 0
 23093                           ;UI.c: 472: log = myLog;
 23094  005C34  C012  F0EE         	movff	dispLogs@myLog,_log
 23095  005C38  C013  F0EF         	movff	dispLogs@myLog+1,_log+1
 23096                           
 23097                           ; BSR set to: 0
 23098                           ;UI.c: 473: retrieveLog(myLog - 1);
 23099  005C3C  0EFF               	movlw	255
 23100  005C3E  2412               	addwf	dispLogs@myLog,w,c
 23101  005C40  6E07               	movwf	retrieveLog@logNum,c
 23102  005C42  0EFF               	movlw	255
 23103  005C44  2013               	addwfc	dispLogs@myLog+1,w,c
 23104  005C46  6E08               	movwf	retrieveLog@logNum+1,c
 23105  005C48  ECB7  F020         	call	_retrieveLog	;wreg free
 23106  005C4C  0012               	return		;funcret
 23107  005C4E                     __end_of_dispLogs:
 23108                           	opt stack 0
 23109                           pclatu	equ	0xFFB
 23110                           pclath	equ	0xFFA
 23111                           tblptru	equ	0xFF8
 23112                           tblptrh	equ	0xFF7
 23113                           tblptrl	equ	0xFF6
 23114                           tablat	equ	0xFF5
 23115                           prodh	equ	0xFF4
 23116                           prodl	equ	0xFF3
 23117                           intcon	equ	0xFF2
 23118                           intcon2	equ	0xFF1
 23119                           intcon3	equ	0xFF0
 23120                           indf0	equ	0xFEF
 23121                           postinc0	equ	0xFEE
 23122                           fsr0h	equ	0xFEA
 23123                           fsr0l	equ	0xFE9
 23124                           wreg	equ	0xFE8
 23125                           postdec1	equ	0xFE5
 23126                           fsr1h	equ	0xFE2
 23127                           fsr1l	equ	0xFE1
 23128                           indf2	equ	0xFDF
 23129                           postinc2	equ	0xFDE
 23130                           postdec2	equ	0xFDD
 23131                           fsr2h	equ	0xFDA
 23132                           fsr2l	equ	0xFD9
 23133                           status	equ	0xFD8
 23134                           
 23135 ;; *************** function _retrieveLog *****************
 23136 ;; Defined at:
 23137 ;;		line 138 in file "EEPROM.c"
 23138 ;; Parameters:    Size  Location     Type
 23139 ;;  logNum          2    6[COMRAM] int 
 23140 ;; Auto vars:     Size  Location     Type
 23141 ;;  i               2   13[COMRAM] int 
 23142 ;;  addr            2   15[COMRAM] unsigned short 
 23143 ;;  byte3           1   12[COMRAM] unsigned char 
 23144 ;;  byte2           1   11[COMRAM] unsigned char 
 23145 ;;  byte1           1   10[COMRAM] unsigned char 
 23146 ;; Return value:  Size  Location     Type
 23147 ;;                  1    wreg      void 
 23148 ;; Registers used:
 23149 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 23150 ;; Tracked objects:
 23151 ;;		On entry : 0/0
 23152 ;;		On exit  : 0/0
 23153 ;;		Unchanged: 0/0
 23154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23155 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23156 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23157 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23158 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23159 ;;Total ram usage:       11 bytes
 23160 ;; Hardware stack levels used:    1
 23161 ;; Hardware stack levels required when called:    1
 23162 ;; This function calls:
 23163 ;;		i2_EEPROM_read
 23164 ;;		i2___wmul
 23165 ;; This function is called by:
 23166 ;;		_dispLogs
 23167 ;; This function uses a non-reentrant model
 23168 ;;
 23169                           
 23170                           	psect	text83
 23171  00416E                     __ptext83:
 23172                           	opt stack 0
 23173  00416E                     _retrieveLog:
 23174                           	opt stack 20
 23175                           
 23176                           ;EEPROM.c: 144: unsigned short addr = 1 + logNum * 11;
 23177                           
 23178                           ;incstack = 0
 23179  00416E  C007  F001         	movff	retrieveLog@logNum,i2___wmul@multiplier
 23180  004172  C008  F002         	movff	retrieveLog@logNum+1,i2___wmul@multiplier+1
 23181  004176  0E00               	movlw	0
 23182  004178  6E04               	movwf	i2___wmul@multiplicand+1,c
 23183  00417A  0E0B               	movlw	11
 23184  00417C  6E03               	movwf	i2___wmul@multiplicand,c
 23185  00417E  ECEF  F02D         	call	i2___wmul	;wreg free
 23186  004182  0E01               	movlw	1
 23187  004184  2401               	addwf	?i2___wmul,w,c
 23188  004186  6E10               	movwf	retrieveLog@addr,c
 23189  004188  0E00               	movlw	0
 23190  00418A  2002               	addwfc	?i2___wmul+1,w,c
 23191  00418C  6E11               	movwf	retrieveLog@addr+1,c
 23192                           
 23193                           ;EEPROM.c: 147: unsigned char byte1 = EEPROM_read(addr);
 23194  00418E  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 23195  004192  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 23196  004196  EC8B  F02E         	call	i2_EEPROM_read	;wreg free
 23197  00419A  6E0B               	movwf	retrieveLog@byte1,c
 23198                           
 23199                           ;EEPROM.c: 148: log_completion = (int)(byte1 & 0b10000000);
 23200  00419C  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 23201  0041A0  0E80               	movlw	128
 23202  0041A2  1609               	andwf	??_retrieveLog,f,c
 23203  0041A4  5009               	movf	??_retrieveLog,w,c
 23204  0041A6  0100               	movlb	0	; () banked
 23205  0041A8  6FF0               	movwf	_log_completion& (0+255),b
 23206  0041AA  6BF1               	clrf	(_log_completion+1)& (0+255),b
 23207                           
 23208                           ; BSR set to: 0
 23209                           ;EEPROM.c: 149: log_count_total = (int)(byte1 & 0b00001111);
 23210  0041AC  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 23211  0041B0  0E0F               	movlw	15
 23212  0041B2  1609               	andwf	??_retrieveLog,f,c
 23213  0041B4  5009               	movf	??_retrieveLog,w,c
 23214  0041B6  0101               	movlb	1	; () banked
 23215  0041B8  6F45               	movwf	_log_count_total& (0+255),b
 23216  0041BA  6B46               	clrf	(_log_count_total+1)& (0+255),b
 23217                           
 23218                           ; BSR set to: 1
 23219                           ;EEPROM.c: 150: addr++;
 23220  0041BC  4A10               	infsnz	retrieveLog@addr,f,c
 23221  0041BE  2A11               	incf	retrieveLog@addr+1,f,c
 23222                           
 23223                           ; BSR set to: 1
 23224                           ;EEPROM.c: 153: unsigned char byte2 = EEPROM_read(addr);
 23225  0041C0  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 23226  0041C4  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 23227  0041C8  EC8B  F02E         	call	i2_EEPROM_read	;wreg free
 23228  0041CC  6E0C               	movwf	retrieveLog@byte2,c
 23229                           
 23230                           ;EEPROM.c: 154: log_count_pop_no_tab = (int)((byte2 & 0b11110000)>> 4);
 23231  0041CE  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 23232  0041D2  3A09               	swapf	??_retrieveLog,f,c
 23233  0041D4  0E0F               	movlw	15
 23234  0041D6  1609               	andwf	??_retrieveLog,f,c
 23235  0041D8  0E0F               	movlw	15
 23236  0041DA  1609               	andwf	??_retrieveLog,f,c
 23237  0041DC  5009               	movf	??_retrieveLog,w,c
 23238  0041DE  0100               	movlb	0	; () banked
 23239  0041E0  6FF2               	movwf	_log_count_pop_no_tab& (0+255),b
 23240  0041E2  6BF3               	clrf	(_log_count_pop_no_tab+1)& (0+255),b
 23241                           
 23242                           ; BSR set to: 0
 23243                           ;EEPROM.c: 155: log_count_pop_w_tab = (int)(byte2 & 0b00001111);
 23244  0041E4  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 23245  0041E8  0E0F               	movlw	15
 23246  0041EA  1609               	andwf	??_retrieveLog,f,c
 23247  0041EC  5009               	movf	??_retrieveLog,w,c
 23248  0041EE  0100               	movlb	0	; () banked
 23249  0041F0  6FF4               	movwf	_log_count_pop_w_tab& (0+255),b
 23250  0041F2  6BF5               	clrf	(_log_count_pop_w_tab+1)& (0+255),b
 23251                           
 23252                           ; BSR set to: 0
 23253                           ;EEPROM.c: 156: addr++;
 23254  0041F4  4A10               	infsnz	retrieveLog@addr,f,c
 23255  0041F6  2A11               	incf	retrieveLog@addr+1,f,c
 23256                           
 23257                           ; BSR set to: 0
 23258                           ;EEPROM.c: 157: unsigned char byte3 = EEPROM_read(addr);
 23259  0041F8  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 23260  0041FC  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 23261  004200  EC8B  F02E         	call	i2_EEPROM_read	;wreg free
 23262  004204  6E0D               	movwf	retrieveLog@byte3,c
 23263                           
 23264                           ;EEPROM.c: 158: log_count_can_w_lab = (int)((byte3 & 0b11110000)>> 4);
 23265  004206  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 23266  00420A  3A09               	swapf	??_retrieveLog,f,c
 23267  00420C  0E0F               	movlw	15
 23268  00420E  1609               	andwf	??_retrieveLog,f,c
 23269  004210  0E0F               	movlw	15
 23270  004212  1609               	andwf	??_retrieveLog,f,c
 23271  004214  5009               	movf	??_retrieveLog,w,c
 23272  004216  0101               	movlb	1	; () banked
 23273  004218  6F43               	movwf	_log_count_can_w_lab& (0+255),b
 23274  00421A  6B44               	clrf	(_log_count_can_w_lab+1)& (0+255),b
 23275                           
 23276                           ; BSR set to: 1
 23277                           ;EEPROM.c: 159: log_count_can_no_lab = (int)(byte3 & 0b00001111);
 23278  00421C  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 23279  004220  0E0F               	movlw	15
 23280  004222  1609               	andwf	??_retrieveLog,f,c
 23281  004224  5009               	movf	??_retrieveLog,w,c
 23282  004226  0101               	movlb	1	; () banked
 23283  004228  6F41               	movwf	_log_count_can_no_lab& (0+255),b
 23284  00422A  6B42               	clrf	(_log_count_can_no_lab+1)& (0+255),b
 23285                           
 23286                           ; BSR set to: 1
 23287                           ;EEPROM.c: 160: addr++;
 23288  00422C  4A10               	infsnz	retrieveLog@addr,f,c
 23289  00422E  2A11               	incf	retrieveLog@addr+1,f,c
 23290                           
 23291                           ; BSR set to: 1
 23292                           ;EEPROM.c: 163: for(int i = 0; i < 7; i++){
 23293  004230  0E00               	movlw	0
 23294  004232  6E0F               	movwf	retrieveLog@i+1,c
 23295  004234  0E00               	movlw	0
 23296  004236  6E0E               	movwf	retrieveLog@i,c
 23297  004238                     i2l7338:
 23298                           
 23299                           ; BSR set to: 1
 23300  004238  BE0F               	btfsc	retrieveLog@i+1,7,c
 23301  00423A  D006               	goto	i2l7342
 23302  00423C  500F               	movf	retrieveLog@i+1,w,c
 23303  00423E  E11E               	bnz	i2l7350
 23304  004240  0E07               	movlw	7
 23305  004242  5C0E               	subwf	retrieveLog@i,w,c
 23306  004244  B0D8               	btfsc	status,0,c
 23307  004246  D01A               	goto	i2l7350
 23308  004248                     i2l7342:
 23309                           
 23310                           ;EEPROM.c: 164: log_startTime[i] = (int)EEPROM_read(addr);
 23311  004248  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 23312  00424C  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 23313  004250  EC8B  F02E         	call	i2_EEPROM_read	;wreg free
 23314  004254  6E09               	movwf	??_retrieveLog& (0+255),c
 23315  004256  6A0A               	clrf	(??_retrieveLog+1)& (0+255),c
 23316  004258  90D8               	bcf	status,0,c
 23317  00425A  340E               	rlcf	retrieveLog@i,w,c
 23318  00425C  6ED9               	movwf	fsr2l,c
 23319  00425E  340F               	rlcf	retrieveLog@i+1,w,c
 23320  004260  6EDA               	movwf	fsr2h,c
 23321  004262  0E00               	movlw	low _log_startTime
 23322  004264  26D9               	addwf	fsr2l,f,c
 23323  004266  0E01               	movlw	high _log_startTime
 23324  004268  22DA               	addwfc	fsr2h,f,c
 23325  00426A  C009  FFDE         	movff	??_retrieveLog,postinc2
 23326  00426E  C00A  FFDD         	movff	??_retrieveLog+1,postdec2
 23327                           
 23328                           ;EEPROM.c: 165: addr++;
 23329  004272  4A10               	infsnz	retrieveLog@addr,f,c
 23330  004274  2A11               	incf	retrieveLog@addr+1,f,c
 23331  004276  4A0E               	infsnz	retrieveLog@i,f,c
 23332  004278  2A0F               	incf	retrieveLog@i+1,f,c
 23333  00427A  D7DE               	goto	i2l7338
 23334  00427C                     i2l7350:
 23335                           
 23336                           ;EEPROM.c: 166: }
 23337                           ;EEPROM.c: 169: log_total_time = (int)EEPROM_read(addr);
 23338  00427C  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 23339  004280  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 23340  004284  EC8B  F02E         	call	i2_EEPROM_read	;wreg free
 23341  004288  6E09               	movwf	??_retrieveLog& (0+255),c
 23342  00428A  5009               	movf	??_retrieveLog,w,c
 23343  00428C  0100               	movlb	0	; () banked
 23344  00428E  6FF6               	movwf	_log_total_time& (0+255),b
 23345  004290  6BF7               	clrf	(_log_total_time+1)& (0+255),b
 23346                           
 23347                           ; BSR set to: 0
 23348  004292  0012               	return		;funcret
 23349  004294                     __end_of_retrieveLog:
 23350                           	opt stack 0
 23351                           pclatu	equ	0xFFB
 23352                           pclath	equ	0xFFA
 23353                           tblptru	equ	0xFF8
 23354                           tblptrh	equ	0xFF7
 23355                           tblptrl	equ	0xFF6
 23356                           tablat	equ	0xFF5
 23357                           prodh	equ	0xFF4
 23358                           prodl	equ	0xFF3
 23359                           intcon	equ	0xFF2
 23360                           intcon2	equ	0xFF1
 23361                           intcon3	equ	0xFF0
 23362                           indf0	equ	0xFEF
 23363                           postinc0	equ	0xFEE
 23364                           fsr0h	equ	0xFEA
 23365                           fsr0l	equ	0xFE9
 23366                           wreg	equ	0xFE8
 23367                           postdec1	equ	0xFE5
 23368                           fsr1h	equ	0xFE2
 23369                           fsr1l	equ	0xFE1
 23370                           indf2	equ	0xFDF
 23371                           postinc2	equ	0xFDE
 23372                           postdec2	equ	0xFDD
 23373                           fsr2h	equ	0xFDA
 23374                           fsr2l	equ	0xFD9
 23375                           status	equ	0xFD8
 23376                           
 23377 ;; *************** function i2_EEPROM_read *****************
 23378 ;; Defined at:
 23379 ;;		line 72 in file "EEPROM.c"
 23380 ;; Parameters:    Size  Location     Type
 23381 ;;  address         2    0[COMRAM] unsigned short 
 23382 ;; Auto vars:     Size  Location     Type
 23383 ;;		None
 23384 ;; Return value:  Size  Location     Type
 23385 ;;                  1    wreg      unsigned char 
 23386 ;; Registers used:
 23387 ;;		wreg, status,2
 23388 ;; Tracked objects:
 23389 ;;		On entry : 0/0
 23390 ;;		On exit  : 0/0
 23391 ;;		Unchanged: 0/0
 23392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23393 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23394 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23395 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23396 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23397 ;;Total ram usage:        2 bytes
 23398 ;; Hardware stack levels used:    1
 23399 ;; This function calls:
 23400 ;;		Nothing
 23401 ;; This function is called by:
 23402 ;;		_retrieveLog
 23403 ;; This function uses a non-reentrant model
 23404 ;;
 23405                           
 23406                           	psect	text84
 23407  005D16                     __ptext84:
 23408                           	opt stack 0
 23409  005D16                     i2_EEPROM_read:
 23410                           	opt stack 20
 23411                           
 23412                           ;EEPROM.c: 74: EEADRH = (unsigned char)(address >> 8);
 23413                           
 23414                           ; BSR set to: 0
 23415                           ;incstack = 0
 23416  005D16  5002               	movf	i2EEPROM_read@address+1,w,c
 23417  005D18  6EAA               	movwf	4010,c	;volatile
 23418                           
 23419                           ;EEPROM.c: 75: EEADR = (unsigned char)address;
 23420  005D1A  C001  FFA9         	movff	i2EEPROM_read@address,4009	;volatile
 23421                           
 23422                           ;EEPROM.c: 77: EECON1bits.EEPGD = 0;
 23423  005D1E  9EA6               	bcf	4006,7,c	;volatile
 23424                           
 23425                           ;EEPROM.c: 78: EECON1bits.CFGS = 0;
 23426  005D20  9CA6               	bcf	4006,6,c	;volatile
 23427                           
 23428                           ;EEPROM.c: 79: EECON1bits.RD = 1;
 23429  005D22  80A6               	bsf	4006,0,c	;volatile
 23430  005D24                     i2l1155:
 23431  005D24  B0A6               	btfsc	4006,0,c	;volatile
 23432  005D26  D7FE               	goto	i2l1155
 23433                           
 23434                           ;EEPROM.c: 85: return EEDATA;
 23435  005D28  50A8               	movf	4008,w,c	;volatile
 23436  005D2A  0012               	return	
 23437  005D2C                     __end_ofi2_EEPROM_read:
 23438                           	opt stack 0
 23439                           pclatu	equ	0xFFB
 23440                           pclath	equ	0xFFA
 23441                           tblptru	equ	0xFF8
 23442                           tblptrh	equ	0xFF7
 23443                           tblptrl	equ	0xFF6
 23444                           tablat	equ	0xFF5
 23445                           prodh	equ	0xFF4
 23446                           prodl	equ	0xFF3
 23447                           intcon	equ	0xFF2
 23448                           intcon2	equ	0xFF1
 23449                           intcon3	equ	0xFF0
 23450                           indf0	equ	0xFEF
 23451                           postinc0	equ	0xFEE
 23452                           fsr0h	equ	0xFEA
 23453                           fsr0l	equ	0xFE9
 23454                           wreg	equ	0xFE8
 23455                           postdec1	equ	0xFE5
 23456                           fsr1h	equ	0xFE2
 23457                           fsr1l	equ	0xFE1
 23458                           indf2	equ	0xFDF
 23459                           postinc2	equ	0xFDE
 23460                           postdec2	equ	0xFDD
 23461                           fsr2h	equ	0xFDA
 23462                           fsr2l	equ	0xFD9
 23463                           status	equ	0xFD8
 23464                           
 23465 ;; *************** function _updateArmState *****************
 23466 ;; Defined at:
 23467 ;;		line 680 in file "sort.c"
 23468 ;; Parameters:    Size  Location     Type
 23469 ;;		None
 23470 ;; Auto vars:     Size  Location     Type
 23471 ;;		None
 23472 ;; Return value:  Size  Location     Type
 23473 ;;                  1    wreg      void 
 23474 ;; Registers used:
 23475 ;;		wreg, status,2, status,0
 23476 ;; Tracked objects:
 23477 ;;		On entry : 0/0
 23478 ;;		On exit  : 0/0
 23479 ;;		Unchanged: 0/0
 23480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23481 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23482 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23483 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23484 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23485 ;;Total ram usage:        2 bytes
 23486 ;; Hardware stack levels used:    1
 23487 ;; This function calls:
 23488 ;;		Nothing
 23489 ;; This function is called by:
 23490 ;;		_handler
 23491 ;; This function uses a non-reentrant model
 23492 ;;
 23493                           
 23494                           	psect	text85
 23495  005756                     __ptext85:
 23496                           	opt stack 0
 23497  005756                     _updateArmState:
 23498                           	opt stack 23
 23499                           
 23500                           ;sort.c: 687: if(!was_low_2){
 23501                           
 23502                           ;incstack = 0
 23503  005756  5079               	movf	_was_low_2,w,c	;volatile
 23504  005758  107A               	iorwf	_was_low_2+1,w,c	;volatile
 23505  00575A  B4D8               	btfsc	status,2,c
 23506  00575C  D007               	goto	i2l10214
 23507  00575E  D016               	goto	i2l971
 23508  005760                     i2l10208:
 23509                           
 23510                           ;sort.c: 692: PR2 = 0x20;
 23511  005760  0E20               	movlw	32
 23512  005762  6ECB               	movwf	4043,c	;volatile
 23513                           
 23514                           ;sort.c: 693: break;
 23515  005764  0012               	return	
 23516  005766                     i2l10210:
 23517                           
 23518                           ;sort.c: 696: PR2 = 0x40;
 23519  005766  0E40               	movlw	64
 23520  005768  6ECB               	movwf	4043,c	;volatile
 23521                           
 23522                           ;sort.c: 698: }
 23523                           
 23524                           ;sort.c: 697: break;
 23525  00576A  0012               	return	
 23526  00576C                     i2l10214:
 23527  00576C  C0E8  F001         	movff	_f_arm_position,??_updateArmState	;volatile
 23528  005770  C0E9  F002         	movff	_f_arm_position+1,??_updateArmState+1	;volatile
 23529                           
 23530                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 23531                           ; Switch size 1, requested type "space"
 23532                           ; Number of cases is 1, Range of values is 0 to 0
 23533                           ; switch strategies available:
 23534                           ; Name         Instructions Cycles
 23535                           ; simple_byte            4     3 (average)
 23536                           ;	Chosen strategy is simple_byte
 23537  005774  5002               	movf	??_updateArmState+1,w,c
 23538  005776  0A00               	xorlw	0	; case 0
 23539  005778  A4D8               	btfss	status,2,c
 23540  00577A  0012               	return	
 23541                           
 23542                           ; Switch size 1, requested type "space"
 23543                           ; Number of cases is 2, Range of values is 0 to 1
 23544                           ; switch strategies available:
 23545                           ; Name         Instructions Cycles
 23546                           ; simple_byte            7     4 (average)
 23547                           ;	Chosen strategy is simple_byte
 23548  00577C  5001               	movf	??_updateArmState,w,c
 23549  00577E  0A00               	xorlw	0	; case 0
 23550  005780  B4D8               	btfsc	status,2,c
 23551  005782  D7EE               	goto	i2l10208
 23552  005784  0A01               	xorlw	1	; case 1
 23553  005786  A4D8               	btfss	status,2,c
 23554                           
 23555                           ;sort.c: 699: }
 23556  005788  0012               	return	
 23557  00578A  D7ED               	goto	i2l10210
 23558  00578C                     i2l971:
 23559                           
 23560                           ;sort.c: 700: else{
 23561                           ;sort.c: 702: PR2 = 0xFF;
 23562  00578C  68CB               	setf	4043,c	;volatile
 23563  00578E  0012               	return	
 23564  005790                     __end_of_updateArmState:
 23565                           	opt stack 0
 23566                           pclatu	equ	0xFFB
 23567                           pclath	equ	0xFFA
 23568                           tblptru	equ	0xFF8
 23569                           tblptrh	equ	0xFF7
 23570                           tblptrl	equ	0xFF6
 23571                           tablat	equ	0xFF5
 23572                           prodh	equ	0xFF4
 23573                           prodl	equ	0xFF3
 23574                           intcon	equ	0xFF2
 23575                           intcon2	equ	0xFF1
 23576                           intcon3	equ	0xFF0
 23577                           indf0	equ	0xFEF
 23578                           postinc0	equ	0xFEE
 23579                           fsr0h	equ	0xFEA
 23580                           fsr0l	equ	0xFE9
 23581                           wreg	equ	0xFE8
 23582                           postdec1	equ	0xFE5
 23583                           fsr1h	equ	0xFE2
 23584                           fsr1l	equ	0xFE1
 23585                           indf2	equ	0xFDF
 23586                           postinc2	equ	0xFDE
 23587                           postdec2	equ	0xFDD
 23588                           fsr2h	equ	0xFDA
 23589                           fsr2l	equ	0xFD9
 23590                           status	equ	0xFD8
 23591                           
 23592 ;; *************** function _printSortTimer *****************
 23593 ;; Defined at:
 23594 ;;		line 508 in file "sort.c"
 23595 ;; Parameters:    Size  Location     Type
 23596 ;;		None
 23597 ;; Auto vars:     Size  Location     Type
 23598 ;;  i               2   70[COMRAM] int 
 23599 ;;  i               2   72[COMRAM] int 
 23600 ;;  curTime        14   44[COMRAM] int [7]
 23601 ;;  timeDiff        2   68[COMRAM] unsigned int 
 23602 ;;  sec             2   64[COMRAM] int 
 23603 ;;  min             2   62[COMRAM] int 
 23604 ;;  cur_sec         2   60[COMRAM] unsigned int 
 23605 ;;  start_sec       2   58[COMRAM] unsigned int 
 23606 ;; Return value:  Size  Location     Type
 23607 ;;                  1    wreg      void 
 23608 ;; Registers used:
 23609 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23610 ;; Tracked objects:
 23611 ;;		On entry : 0/0
 23612 ;;		On exit  : 0/0
 23613 ;;		Unchanged: 0/0
 23614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23615 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23616 ;;      Locals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23617 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23618 ;;      Totals:        33       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23619 ;;Total ram usage:       33 bytes
 23620 ;; Hardware stack levels used:    1
 23621 ;; Hardware stack levels required when called:    3
 23622 ;; This function calls:
 23623 ;;		i2___awmod
 23624 ;;		i2___lwdiv
 23625 ;;		i2___lwmod
 23626 ;;		i2___wmul
 23627 ;;		i2_delay_ms
 23628 ;;		i2_getRTC
 23629 ;;		i2_lcdInst
 23630 ;;		i2_printf
 23631 ;; This function is called by:
 23632 ;;		_handler
 23633 ;; This function uses a non-reentrant model
 23634 ;;
 23635                           
 23636                           	psect	text86
 23637  0027AC                     __ptext86:
 23638                           	opt stack 0
 23639  0027AC                     _printSortTimer:
 23640                           	opt stack 20
 23641                           
 23642                           ;sort.c: 509: getRTC();
 23643                           
 23644                           ;incstack = 0
 23645  0027AC  ECBA  F028         	call	i2_getRTC	;wreg free
 23646                           
 23647                           ;sort.c: 510: int curTime[7];
 23648                           ;sort.c: 511: for(int i = 0; i < 7; i++){
 23649  0027B0  0E00               	movlw	0
 23650  0027B2  6E4A               	movwf	printSortTimer@i+1,c
 23651  0027B4  0E00               	movlw	0
 23652  0027B6  6E49               	movwf	printSortTimer@i,c
 23653  0027B8                     i2l10032:
 23654  0027B8  BE4A               	btfsc	printSortTimer@i+1,7,c
 23655  0027BA  D006               	goto	i2l10036
 23656  0027BC  504A               	movf	printSortTimer@i+1,w,c
 23657  0027BE  E131               	bnz	i2l10042
 23658  0027C0  0E07               	movlw	7
 23659  0027C2  5C49               	subwf	printSortTimer@i,w,c
 23660  0027C4  B0D8               	btfsc	status,0,c
 23661  0027C6  D02D               	goto	i2l10042
 23662  0027C8                     i2l10036:
 23663                           
 23664                           ;sort.c: 512: curTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 23665  0027C8  0E1C               	movlw	low _time
 23666  0027CA  2449               	addwf	printSortTimer@i,w,c
 23667  0027CC  6ED9               	movwf	fsr2l,c
 23668  0027CE  0E01               	movlw	high _time
 23669  0027D0  204A               	addwfc	printSortTimer@i+1,w,c
 23670  0027D2  6EDA               	movwf	fsr2h,c
 23671  0027D4  50DF               	movf	indf2,w,c
 23672  0027D6  6E2A               	movwf	??_printSortTimer& (0+255),c
 23673  0027D8  3A2A               	swapf	??_printSortTimer,f,c
 23674  0027DA  0E0F               	movlw	15
 23675  0027DC  162A               	andwf	??_printSortTimer,f,c
 23676  0027DE  0E0F               	movlw	15
 23677  0027E0  162A               	andwf	??_printSortTimer,f,c
 23678  0027E2  502A               	movf	??_printSortTimer,w,c
 23679  0027E4  0D0A               	mullw	10
 23680  0027E6  0E1C               	movlw	low _time
 23681  0027E8  2449               	addwf	printSortTimer@i,w,c
 23682  0027EA  6ED9               	movwf	fsr2l,c
 23683  0027EC  0E01               	movlw	high _time
 23684  0027EE  204A               	addwfc	printSortTimer@i+1,w,c
 23685  0027F0  6EDA               	movwf	fsr2h,c
 23686  0027F2  50DF               	movf	indf2,w,c
 23687  0027F4  0B0F               	andlw	15
 23688  0027F6  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 23689  0027F8  6A2C               	clrf	(??_printSortTimer+2)& (0+255),c
 23690  0027FA  50F3               	movf	prodl,w,c
 23691  0027FC  262B               	addwf	??_printSortTimer+1,f,c
 23692  0027FE  50F4               	movf	prodh,w,c
 23693  002800  222C               	addwfc	??_printSortTimer+2,f,c
 23694  002802  90D8               	bcf	status,0,c
 23695  002804  3449               	rlcf	printSortTimer@i,w,c
 23696  002806  6ED9               	movwf	fsr2l,c
 23697  002808  344A               	rlcf	printSortTimer@i+1,w,c
 23698  00280A  6EDA               	movwf	fsr2h,c
 23699  00280C  0E2D               	movlw	low printSortTimer@curTime
 23700  00280E  26D9               	addwf	fsr2l,f,c
 23701  002810  0E00               	movlw	high printSortTimer@curTime
 23702  002812  22DA               	addwfc	fsr2h,f,c
 23703  002814  C02B  FFDE         	movff	??_printSortTimer+1,postinc2
 23704  002818  C02C  FFDD         	movff	??_printSortTimer+2,postdec2
 23705  00281C  4A49               	infsnz	printSortTimer@i,f,c
 23706  00281E  2A4A               	incf	printSortTimer@i+1,f,c
 23707  002820  D7CB               	goto	i2l10032
 23708  002822                     i2l10042:
 23709                           
 23710                           ;sort.c: 513: }
 23711                           ;sort.c: 514: unsigned int start_sec = startTime[0] + startTime[1]*60 + startTime[2]*360
      +                          0;
 23712  002822  C110  F001         	movff	_startTime+2,i2___wmul@multiplier
 23713  002826  C111  F002         	movff	_startTime+3,i2___wmul@multiplier+1
 23714  00282A  0E00               	movlw	0
 23715  00282C  6E04               	movwf	i2___wmul@multiplicand+1,c
 23716  00282E  0E3C               	movlw	60
 23717  002830  6E03               	movwf	i2___wmul@multiplicand,c
 23718  002832  ECEF  F02D         	call	i2___wmul	;wreg free
 23719  002836  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 23720  00283A  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 23721  00283E  C112  F001         	movff	_startTime+4,i2___wmul@multiplier
 23722  002842  C113  F002         	movff	_startTime+5,i2___wmul@multiplier+1
 23723  002846  0E0E               	movlw	14
 23724  002848  6E04               	movwf	i2___wmul@multiplicand+1,c
 23725  00284A  0E10               	movlw	16
 23726  00284C  6E03               	movwf	i2___wmul@multiplicand,c
 23727  00284E  ECEF  F02D         	call	i2___wmul	;wreg free
 23728  002852  5001               	movf	?i2___wmul,w,c
 23729  002854  262A               	addwf	??_printSortTimer,f,c
 23730  002856  5002               	movf	?i2___wmul+1,w,c
 23731  002858  222B               	addwfc	??_printSortTimer+1,f,c
 23732  00285A  0101               	movlb	1	; () banked
 23733  00285C  510E               	movf	_startTime& (0+255),w,b
 23734  00285E  242A               	addwf	??_printSortTimer,w,c
 23735  002860  6E3B               	movwf	printSortTimer@start_sec,c
 23736  002862  0101               	movlb	1	; () banked
 23737  002864  510F               	movf	(_startTime+1)& (0+255),w,b
 23738  002866  202B               	addwfc	??_printSortTimer+1,w,c
 23739  002868  6E3C               	movwf	printSortTimer@start_sec+1,c
 23740                           
 23741                           ;sort.c: 515: unsigned int cur_sec = curTime[0] + curTime[1]*60 + curTime[2]*3600;
 23742  00286A  C02F  F001         	movff	printSortTimer@curTime+2,i2___wmul@multiplier
 23743  00286E  C030  F002         	movff	printSortTimer@curTime+3,i2___wmul@multiplier+1
 23744  002872  0E00               	movlw	0
 23745  002874  6E04               	movwf	i2___wmul@multiplicand+1,c
 23746  002876  0E3C               	movlw	60
 23747  002878  6E03               	movwf	i2___wmul@multiplicand,c
 23748  00287A  ECEF  F02D         	call	i2___wmul	;wreg free
 23749  00287E  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 23750  002882  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 23751  002886  C031  F001         	movff	printSortTimer@curTime+4,i2___wmul@multiplier
 23752  00288A  C032  F002         	movff	printSortTimer@curTime+5,i2___wmul@multiplier+1
 23753  00288E  0E0E               	movlw	14
 23754  002890  6E04               	movwf	i2___wmul@multiplicand+1,c
 23755  002892  0E10               	movlw	16
 23756  002894  6E03               	movwf	i2___wmul@multiplicand,c
 23757  002896  ECEF  F02D         	call	i2___wmul	;wreg free
 23758  00289A  5001               	movf	?i2___wmul,w,c
 23759  00289C  262A               	addwf	??_printSortTimer,f,c
 23760  00289E  5002               	movf	?i2___wmul+1,w,c
 23761  0028A0  222B               	addwfc	??_printSortTimer+1,f,c
 23762  0028A2  502D               	movf	printSortTimer@curTime,w,c
 23763  0028A4  242A               	addwf	??_printSortTimer,w,c
 23764  0028A6  6E3D               	movwf	printSortTimer@cur_sec,c
 23765  0028A8  502E               	movf	printSortTimer@curTime+1,w,c
 23766  0028AA  202B               	addwfc	??_printSortTimer+1,w,c
 23767  0028AC  6E3E               	movwf	printSortTimer@cur_sec+1,c
 23768                           
 23769                           ;sort.c: 516: unsigned int timeDiff = cur_sec - start_sec;
 23770  0028AE  C03B  F02A         	movff	printSortTimer@start_sec,??_printSortTimer
 23771  0028B2  C03C  F02B         	movff	printSortTimer@start_sec+1,??_printSortTimer+1
 23772  0028B6  1E2A               	comf	??_printSortTimer,f,c
 23773  0028B8  1E2B               	comf	??_printSortTimer+1,f,c
 23774  0028BA  4A2A               	infsnz	??_printSortTimer,f,c
 23775  0028BC  2A2B               	incf	??_printSortTimer+1,f,c
 23776  0028BE  503D               	movf	printSortTimer@cur_sec,w,c
 23777  0028C0  242A               	addwf	??_printSortTimer,w,c
 23778  0028C2  6E45               	movwf	printSortTimer@timeDiff,c
 23779  0028C4  503E               	movf	printSortTimer@cur_sec+1,w,c
 23780  0028C6  202B               	addwfc	??_printSortTimer+1,w,c
 23781  0028C8  6E46               	movwf	printSortTimer@timeDiff+1,c
 23782                           
 23783                           ;sort.c: 518: total_time = timeDiff;
 23784  0028CA  C045  F0FA         	movff	printSortTimer@timeDiff,_total_time
 23785  0028CE  C046  F0FB         	movff	printSortTimer@timeDiff+1,_total_time+1
 23786                           
 23787                           ;sort.c: 520: if(f_most_recent_sort_time){
 23788  0028D2  0101               	movlb	1	; () banked
 23789  0028D4  5139               	movf	_f_most_recent_sort_time& (0+255),w,b
 23790  0028D6  0101               	movlb	1	; () banked
 23791  0028D8  113A               	iorwf	(_f_most_recent_sort_time+1)& (0+255),w,b
 23792  0028DA  B4D8               	btfsc	status,2,c
 23793  0028DC  D009               	goto	i2l10054
 23794                           
 23795                           ; BSR set to: 1
 23796                           ;sort.c: 521: most_recent_sort_time = total_time;
 23797  0028DE  C0FA  F147         	movff	_total_time,_most_recent_sort_time
 23798  0028E2  C0FB  F148         	movff	_total_time+1,_most_recent_sort_time+1
 23799                           
 23800                           ; BSR set to: 1
 23801                           ;sort.c: 522: f_most_recent_sort_time = 0;
 23802  0028E6  0E00               	movlw	0
 23803  0028E8  0101               	movlb	1	; () banked
 23804  0028EA  6F3A               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
 23805  0028EC  0E00               	movlw	0
 23806  0028EE  6F39               	movwf	_f_most_recent_sort_time& (0+255),b
 23807  0028F0                     i2l10054:
 23808                           
 23809                           ; BSR set to: 1
 23810                           ;sort.c: 523: }
 23811                           ;sort.c: 526: if(total_time >= 20){
 23812  0028F0  0100               	movlb	0	; () banked
 23813  0028F2  BFFB               	btfsc	(_total_time+1)& (0+255),7,b
 23814  0028F4  D05B               	goto	i2l912
 23815  0028F6  0100               	movlb	0	; () banked
 23816  0028F8  51FB               	movf	(_total_time+1)& (0+255),w,b
 23817  0028FA  E105               	bnz	i2u979_40
 23818  0028FC  0E14               	movlw	20
 23819  0028FE  0100               	movlb	0	; () banked
 23820  002900  5DFA               	subwf	_total_time& (0+255),w,b
 23821  002902  A0D8               	btfss	status,0,c
 23822  002904  D053               	goto	i2l912
 23823  002906                     i2u979_40:
 23824                           
 23825                           ; BSR set to: 0
 23826                           ;sort.c: 527: if(LATBbits.LATB2 == 0){
 23827  002906  B48A               	btfsc	3978,2,c	;volatile
 23828  002908  D036               	goto	i2l10076
 23829                           
 23830                           ; BSR set to: 0
 23831                           ;sort.c: 528: motor_toggle_count++;
 23832  00290A  0101               	movlb	1	; () banked
 23833  00290C  4B49               	infsnz	_motor_toggle_count& (0+255),f,b
 23834  00290E  2B4A               	incf	(_motor_toggle_count+1)& (0+255),f,b
 23835                           
 23836                           ; BSR set to: 1
 23837                           ;sort.c: 529: if(motor_toggle_count == 2){
 23838  002910  0E02               	movlw	2
 23839  002912  0101               	movlb	1	; () banked
 23840  002914  1949               	xorwf	_motor_toggle_count& (0+255),w,b
 23841  002916  0101               	movlb	1	; () banked
 23842  002918  114A               	iorwf	(_motor_toggle_count+1)& (0+255),w,b
 23843  00291A  A4D8               	btfss	status,2,c
 23844  00291C  D047               	goto	i2l912
 23845                           
 23846                           ; BSR set to: 1
 23847                           ;sort.c: 530: motor_toggle_count = 0;
 23848  00291E  0E00               	movlw	0
 23849  002920  0101               	movlb	1	; () banked
 23850  002922  6F4A               	movwf	(_motor_toggle_count+1)& (0+255),b
 23851  002924  0E00               	movlw	0
 23852  002926  6F49               	movwf	_motor_toggle_count& (0+255),b
 23853                           
 23854                           ;sort.c: 531: for(int i=0; i<46; i++){
 23855  002928  0E00               	movlw	0
 23856  00292A  6E48               	movwf	printSortTimer@i_1165+1,c
 23857  00292C  0E00               	movlw	0
 23858  00292E  6E47               	movwf	printSortTimer@i_1165,c
 23859                           
 23860                           ; BSR set to: 1
 23861  002930  BE48               	btfsc	printSortTimer@i_1165+1,7,c
 23862  002932  D006               	goto	i2l10068
 23863  002934  5048               	movf	printSortTimer@i_1165+1,w,c
 23864  002936  E11D               	bnz	i2l916
 23865  002938  0E2E               	movlw	46
 23866  00293A  5C47               	subwf	printSortTimer@i_1165,w,c
 23867  00293C  B0D8               	btfsc	status,0,c
 23868  00293E  D019               	goto	i2l916
 23869  002940                     i2l10068:
 23870                           
 23871                           ;sort.c: 532: LATBbits.LATB2 = !LATBbits.LATB2;
 23872  002940  B48A               	btfsc	3978,2,c	;volatile
 23873  002942  D003               	goto	i2u983_40
 23874  002944  6A2A               	clrf	??_printSortTimer& (0+255),c
 23875  002946  2A2A               	incf	??_printSortTimer& (0+255),f,c
 23876  002948  D001               	goto	i2u984_48
 23877  00294A                     i2u983_40:
 23878  00294A  6A2A               	clrf	??_printSortTimer& (0+255),c
 23879  00294C                     i2u984_48:
 23880  00294C  462A               	rlncf	??_printSortTimer,f,c
 23881  00294E  462A               	rlncf	??_printSortTimer,f,c
 23882  002950  508A               	movf	3978,w,c	;volatile
 23883  002952  182A               	xorwf	??_printSortTimer,w,c
 23884  002954  0BFB               	andlw	-5
 23885  002956  182A               	xorwf	??_printSortTimer,w,c
 23886  002958  6E8A               	movwf	3978,c	;volatile
 23887                           
 23888                           ;sort.c: 533: delay_ms(45-i);
 23889  00295A  5047               	movf	printSortTimer@i_1165,w,c
 23890  00295C  0800               	sublw	0
 23891  00295E  0F2D               	addlw	45
 23892  002960  EC66  F02E         	call	i2_delay_ms
 23893  002964  4A47               	infsnz	printSortTimer@i_1165,f,c
 23894  002966  2A48               	incf	printSortTimer@i_1165+1,f,c
 23895  002968  BE48               	btfsc	printSortTimer@i_1165+1,7,c
 23896  00296A  D7EA               	goto	i2l10068
 23897  00296C  5048               	movf	printSortTimer@i_1165+1,w,c
 23898  00296E  E101               	bnz	i2u985_40
 23899  002970  D7E3               	goto	L18
 23900  002972                     i2u985_40:
 23901  002972                     i2l916:
 23902                           
 23903                           ;sort.c: 534: }
 23904                           ;sort.c: 535: LATBbits.LATB2 = 1;
 23905  002972  848A               	bsf	3978,2,c	;volatile
 23906                           
 23907                           ;sort.c: 536: }
 23908                           ;sort.c: 537: }
 23909  002974  D01B               	goto	i2l912
 23910  002976                     i2l10076:
 23911                           
 23912                           ;sort.c: 538: else if(total_time % 20 == 0){
 23913  002976  C0FA  F001         	movff	_total_time,i2___awmod@dividend
 23914  00297A  C0FB  F002         	movff	_total_time+1,i2___awmod@dividend+1
 23915  00297E  0E00               	movlw	0
 23916  002980  6E04               	movwf	i2___awmod@divisor+1,c
 23917  002982  0E14               	movlw	20
 23918  002984  6E03               	movwf	i2___awmod@divisor,c
 23919  002986  ECF3  F028         	call	i2___awmod	;wreg free
 23920  00298A  5001               	movf	?i2___awmod,w,c
 23921  00298C  1002               	iorwf	?i2___awmod+1,w,c
 23922  00298E  A4D8               	btfss	status,2,c
 23923  002990  D00D               	goto	i2l912
 23924                           
 23925                           ;sort.c: 539: LATBbits.LATB2 = !LATBbits.LATB2;
 23926  002992  B48A               	btfsc	3978,2,c	;volatile
 23927  002994  D003               	goto	i2u987_40
 23928  002996  6A2A               	clrf	??_printSortTimer& (0+255),c
 23929  002998  2A2A               	incf	??_printSortTimer& (0+255),f,c
 23930  00299A  D001               	goto	i2u988_48
 23931  00299C                     i2u987_40:
 23932  00299C  6A2A               	clrf	??_printSortTimer& (0+255),c
 23933  00299E                     i2u988_48:
 23934  00299E  462A               	rlncf	??_printSortTimer,f,c
 23935  0029A0  462A               	rlncf	??_printSortTimer,f,c
 23936  0029A2  508A               	movf	3978,w,c	;volatile
 23937  0029A4  182A               	xorwf	??_printSortTimer,w,c
 23938  0029A6  0BFB               	andlw	-5
 23939  0029A8  182A               	xorwf	??_printSortTimer,w,c
 23940  0029AA  6E8A               	movwf	3978,c	;volatile
 23941  0029AC                     i2l912:
 23942                           
 23943                           ;sort.c: 540: }
 23944                           ;sort.c: 541: }
 23945                           ;sort.c: 544: if(total_time >= 30){
 23946  0029AC  0100               	movlb	0	; () banked
 23947  0029AE  BFFB               	btfsc	(_total_time+1)& (0+255),7,b
 23948  0029B0  D034               	goto	i2l919
 23949  0029B2  0100               	movlb	0	; () banked
 23950  0029B4  51FB               	movf	(_total_time+1)& (0+255),w,b
 23951  0029B6  E105               	bnz	i2u989_40
 23952  0029B8  0E1E               	movlw	30
 23953  0029BA  0100               	movlb	0	; () banked
 23954  0029BC  5DFA               	subwf	_total_time& (0+255),w,b
 23955  0029BE  A0D8               	btfss	status,0,c
 23956  0029C0  D02C               	goto	i2l919
 23957  0029C2                     i2u989_40:
 23958                           
 23959                           ; BSR set to: 0
 23960                           ;sort.c: 545: if(LATBbits.LATB0 == 1){
 23961  0029C2  A08A               	btfss	3978,0,c	;volatile
 23962  0029C4  D011               	goto	i2l10090
 23963                           
 23964                           ; BSR set to: 0
 23965                           ;sort.c: 546: agitator_toggle_count++;
 23966  0029C6  0101               	movlb	1	; () banked
 23967  0029C8  4B23               	infsnz	_agitator_toggle_count& (0+255),f,b
 23968  0029CA  2B24               	incf	(_agitator_toggle_count+1)& (0+255),f,b
 23969                           
 23970                           ; BSR set to: 1
 23971                           ;sort.c: 547: if(agitator_toggle_count == 2){
 23972  0029CC  0E02               	movlw	2
 23973  0029CE  0101               	movlb	1	; () banked
 23974  0029D0  1923               	xorwf	_agitator_toggle_count& (0+255),w,b
 23975  0029D2  0101               	movlb	1	; () banked
 23976  0029D4  1124               	iorwf	(_agitator_toggle_count+1)& (0+255),w,b
 23977  0029D6  A4D8               	btfss	status,2,c
 23978  0029D8  D020               	goto	i2l919
 23979                           
 23980                           ; BSR set to: 1
 23981                           ;sort.c: 548: agitator_toggle_count = 0;
 23982  0029DA  0E00               	movlw	0
 23983  0029DC  0101               	movlb	1	; () banked
 23984  0029DE  6F24               	movwf	(_agitator_toggle_count+1)& (0+255),b
 23985  0029E0  0E00               	movlw	0
 23986  0029E2  6F23               	movwf	_agitator_toggle_count& (0+255),b
 23987                           
 23988                           ; BSR set to: 1
 23989                           ;sort.c: 549: LATBbits.LATB0 = 0;
 23990  0029E4  908A               	bcf	3978,0,c	;volatile
 23991                           
 23992                           ; BSR set to: 1
 23993                           ;sort.c: 550: }
 23994                           ;sort.c: 551: }
 23995  0029E6  D019               	goto	i2l919
 23996  0029E8                     i2l10090:
 23997                           
 23998                           ;sort.c: 552: else if(total_time % 30 == 0){
 23999  0029E8  C0FA  F001         	movff	_total_time,i2___awmod@dividend
 24000  0029EC  C0FB  F002         	movff	_total_time+1,i2___awmod@dividend+1
 24001  0029F0  0E00               	movlw	0
 24002  0029F2  6E04               	movwf	i2___awmod@divisor+1,c
 24003  0029F4  0E1E               	movlw	30
 24004  0029F6  6E03               	movwf	i2___awmod@divisor,c
 24005  0029F8  ECF3  F028         	call	i2___awmod	;wreg free
 24006  0029FC  5001               	movf	?i2___awmod,w,c
 24007  0029FE  1002               	iorwf	?i2___awmod+1,w,c
 24008  002A00  A4D8               	btfss	status,2,c
 24009  002A02  D00B               	goto	i2l919
 24010                           
 24011                           ;sort.c: 553: LATBbits.LATB0 = !LATBbits.LATB0;
 24012  002A04  B08A               	btfsc	3978,0,c	;volatile
 24013  002A06  D003               	goto	i2u993_40
 24014  002A08  6A2A               	clrf	??_printSortTimer& (0+255),c
 24015  002A0A  2A2A               	incf	??_printSortTimer& (0+255),f,c
 24016  002A0C  D001               	goto	i2u994_48
 24017  002A0E                     i2u993_40:
 24018  002A0E  6A2A               	clrf	??_printSortTimer& (0+255),c
 24019  002A10                     i2u994_48:
 24020  002A10  508A               	movf	3978,w,c	;volatile
 24021  002A12  182A               	xorwf	??_printSortTimer,w,c
 24022  002A14  0BFE               	andlw	-2
 24023  002A16  182A               	xorwf	??_printSortTimer,w,c
 24024  002A18  6E8A               	movwf	3978,c	;volatile
 24025  002A1A                     i2l919:
 24026                           
 24027                           ;sort.c: 554: }
 24028                           ;sort.c: 555: }
 24029                           ;sort.c: 557: if((total_time - most_recent_sort_time == 42) || (total_time == 179)){
 24030  002A1A  C147  F02A         	movff	_most_recent_sort_time,??_printSortTimer
 24031  002A1E  C148  F02B         	movff	_most_recent_sort_time+1,??_printSortTimer+1
 24032  002A22  1E2A               	comf	??_printSortTimer,f,c
 24033  002A24  1E2B               	comf	??_printSortTimer+1,f,c
 24034  002A26  4A2A               	infsnz	??_printSortTimer,f,c
 24035  002A28  2A2B               	incf	??_printSortTimer+1,f,c
 24036  002A2A  0100               	movlb	0	; () banked
 24037  002A2C  51FA               	movf	_total_time& (0+255),w,b
 24038  002A2E  262A               	addwf	??_printSortTimer,f,c
 24039  002A30  0100               	movlb	0	; () banked
 24040  002A32  51FB               	movf	(_total_time+1)& (0+255),w,b
 24041  002A34  222B               	addwfc	??_printSortTimer+1,f,c
 24042  002A36  0E2A               	movlw	42
 24043  002A38  182A               	xorwf	??_printSortTimer,w,c
 24044  002A3A  102B               	iorwf	??_printSortTimer+1,w,c
 24045  002A3C  B4D8               	btfsc	status,2,c
 24046  002A3E  D007               	goto	i2l10096
 24047                           
 24048                           ; BSR set to: 0
 24049  002A40  0EB3               	movlw	179
 24050  002A42  0100               	movlb	0	; () banked
 24051  002A44  19FA               	xorwf	_total_time& (0+255),w,b
 24052  002A46  0100               	movlb	0	; () banked
 24053  002A48  11FB               	iorwf	(_total_time+1)& (0+255),w,b
 24054  002A4A  A4D8               	btfss	status,2,c
 24055  002A4C  D003               	goto	i2l10098
 24056  002A4E                     i2l10096:
 24057                           
 24058                           ; BSR set to: 0
 24059                           ;sort.c: 558: machine_state = DoneSorting_state;
 24060  002A4E  0E02               	movlw	2
 24061  002A50  0100               	movlb	0	; () banked
 24062  002A52  6FFC               	movwf	_machine_state& (0+255),b
 24063  002A54                     i2l10098:
 24064                           
 24065                           ; BSR set to: 0
 24066                           ;sort.c: 560: }
 24067                           ;sort.c: 562: int min = (timeDiff % 3600) / 60;
 24068  002A54  0E0E               	movlw	14
 24069  002A56  6E04               	movwf	i2___lwmod@divisor+1,c
 24070  002A58  0E10               	movlw	16
 24071  002A5A  6E03               	movwf	i2___lwmod@divisor,c
 24072  002A5C  C045  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 24073  002A60  C046  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 24074  002A64  EC8A  F02B         	call	i2___lwmod	;wreg free
 24075  002A68  C001  F006         	movff	?i2___lwmod,i2___lwdiv@dividend
 24076  002A6C  C002  F007         	movff	?i2___lwmod+1,i2___lwdiv@dividend+1
 24077  002A70  0E00               	movlw	0
 24078  002A72  6E09               	movwf	i2___lwdiv@divisor+1,c
 24079  002A74  0E3C               	movlw	60
 24080  002A76  6E08               	movwf	i2___lwdiv@divisor,c
 24081  002A78  EC83  F02A         	call	i2___lwdiv	;wreg free
 24082  002A7C  C006  F03F         	movff	?i2___lwdiv,printSortTimer@min
 24083  002A80  C007  F040         	movff	?i2___lwdiv+1,printSortTimer@min+1
 24084                           
 24085                           ;sort.c: 563: int sec = (timeDiff % 3600) % 60;
 24086  002A84  0E0E               	movlw	14
 24087  002A86  6E04               	movwf	i2___lwmod@divisor+1,c
 24088  002A88  0E10               	movlw	16
 24089  002A8A  6E03               	movwf	i2___lwmod@divisor,c
 24090  002A8C  C045  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 24091  002A90  C046  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 24092  002A94  EC8A  F02B         	call	i2___lwmod	;wreg free
 24093  002A98  C001  F043         	movff	?i2___lwmod,_printSortTimer$2568
 24094  002A9C  C002  F044         	movff	?i2___lwmod+1,_printSortTimer$2568+1
 24095                           
 24096                           ;sort.c: 563: int sec = (timeDiff % 3600) % 60;
 24097  002AA0  C043  F001         	movff	_printSortTimer$2568,i2___lwmod@dividend
 24098  002AA4  C044  F002         	movff	_printSortTimer$2568+1,i2___lwmod@dividend+1
 24099  002AA8  0E00               	movlw	0
 24100  002AAA  6E04               	movwf	i2___lwmod@divisor+1,c
 24101  002AAC  0E3C               	movlw	60
 24102  002AAE  6E03               	movwf	i2___lwmod@divisor,c
 24103  002AB0  EC8A  F02B         	call	i2___lwmod	;wreg free
 24104  002AB4  C001  F041         	movff	?i2___lwmod,printSortTimer@sec
 24105  002AB8  C002  F042         	movff	?i2___lwmod+1,printSortTimer@sec+1
 24106                           
 24107                           ;sort.c: 565: lcdInst(0b10000000);;
 24108  002ABC  0E80               	movlw	128
 24109  002ABE  ECBF  F02E         	call	i2_lcdInst
 24110                           
 24111                           ;sort.c: 566: printf("SORTING...     ");
 24112  002AC2  0E3D               	movlw	low STR_64
 24113  002AC4  6E0D               	movwf	i2printf@f,c
 24114  002AC6  0EFE               	movlw	high STR_64
 24115  002AC8  6E0E               	movwf	i2printf@f+1,c
 24116  002ACA  EC1F  F012         	call	i2_printf	;wreg free
 24117                           
 24118                           ;sort.c: 567: lcdInst(0b11000000);;
 24119  002ACE  0EC0               	movlw	192
 24120  002AD0  ECBF  F02E         	call	i2_lcdInst
 24121                           
 24122                           ;sort.c: 568: printf("TIME %d:%02d   ", min, sec);
 24123  002AD4  0E4D               	movlw	low STR_65
 24124  002AD6  6E0D               	movwf	i2printf@f,c
 24125  002AD8  0EFE               	movlw	high STR_65
 24126  002ADA  6E0E               	movwf	i2printf@f+1,c
 24127  002ADC  C03F  F00F         	movff	printSortTimer@min,?i2_printf+2
 24128  002AE0  C040  F010         	movff	printSortTimer@min+1,?i2_printf+3
 24129  002AE4  C041  F011         	movff	printSortTimer@sec,?i2_printf+4
 24130  002AE8  C042  F012         	movff	printSortTimer@sec+1,?i2_printf+5
 24131  002AEC  EC1F  F012         	call	i2_printf	;wreg free
 24132  002AF0  0012               	return		;funcret
 24133  002AF2                     __end_of_printSortTimer:
 24134                           	opt stack 0
 24135                           pclatu	equ	0xFFB
 24136                           pclath	equ	0xFFA
 24137                           tblptru	equ	0xFF8
 24138                           tblptrh	equ	0xFF7
 24139                           tblptrl	equ	0xFF6
 24140                           tablat	equ	0xFF5
 24141                           prodh	equ	0xFF4
 24142                           prodl	equ	0xFF3
 24143                           intcon	equ	0xFF2
 24144                           intcon2	equ	0xFF1
 24145                           intcon3	equ	0xFF0
 24146                           indf0	equ	0xFEF
 24147                           postinc0	equ	0xFEE
 24148                           fsr0h	equ	0xFEA
 24149                           fsr0l	equ	0xFE9
 24150                           wreg	equ	0xFE8
 24151                           postdec1	equ	0xFE5
 24152                           fsr1h	equ	0xFE2
 24153                           fsr1l	equ	0xFE1
 24154                           indf2	equ	0xFDF
 24155                           postinc2	equ	0xFDE
 24156                           postdec2	equ	0xFDD
 24157                           fsr2h	equ	0xFDA
 24158                           fsr2l	equ	0xFD9
 24159                           status	equ	0xFD8
 24160                           
 24161 ;; *************** function i2_printf *****************
 24162 ;; Defined at:
 24163 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 24164 ;; Parameters:    Size  Location     Type
 24165 ;;  f               2   12[COMRAM] PTR const unsigned char 
 24166 ;;		 -> STR_127(18), STR_126(18), STR_125(17), STR_124(17), 
 24167 ;;		 -> STR_123(15), STR_122(15), STR_121(18), STR_120(15), 
 24168 ;;		 -> STR_119(18), STR_118(18), STR_117(17), STR_116(17), 
 24169 ;;		 -> STR_115(17), STR_114(17), STR_113(17), STR_112(17), 
 24170 ;;		 -> STR_111(18), STR_110(17), STR_109(15), STR_108(15), 
 24171 ;;		 -> STR_107(15), STR_106(17), STR_105(17), STR_104(17), 
 24172 ;;		 -> STR_103(16), STR_102(17), STR_101(17), STR_100(17), 
 24173 ;;		 -> STR_99(17), STR_98(17), STR_97(17), STR_96(15), 
 24174 ;;		 -> STR_95(11), STR_94(17), STR_93(11), STR_92(17), 
 24175 ;;		 -> STR_91(14), STR_90(15), STR_89(14), STR_88(10), 
 24176 ;;		 -> STR_87(9), STR_86(9), STR_85(10), STR_84(10), 
 24177 ;;		 -> STR_83(16), STR_82(15), STR_81(3), STR_80(15), 
 24178 ;;		 -> STR_79(13), STR_78(14), STR_77(8), STR_76(14), 
 24179 ;;		 -> STR_75(15), STR_74(12), STR_73(14), STR_72(17), 
 24180 ;;		 -> STR_71(14), STR_70(15), STR_69(17), STR_68(17), 
 24181 ;;		 -> STR_67(7), STR_66(21), STR_65(16), STR_64(16), 
 24182 ;;		 -> STR_63(24), STR_50(17), STR_49(17), STR_48(17), 
 24183 ;;		 -> STR_47(17), STR_46(17), STR_45(17), STR_44(17), 
 24184 ;;		 -> STR_43(17), STR_42(17), STR_41(17), STR_40(17), 
 24185 ;;		 -> STR_39(17), STR_38(17), STR_37(17), STR_36(17), 
 24186 ;;		 -> STR_35(17), STR_34(17), STR_33(17), STR_32(17), 
 24187 ;;		 -> STR_31(17), STR_30(17), STR_29(3), STR_28(17), 
 24188 ;;		 -> STR_27(17), STR_26(17), STR_25(17), STR_24(17), 
 24189 ;;		 -> STR_23(14), STR_22(10), STR_21(24), STR_7(7), 
 24190 ;;		 -> STR_6(17), STR_5(18), STR_4(16), STR_3(18), 
 24191 ;;		 -> STR_2(14), STR_1(18), 
 24192 ;; Auto vars:     Size  Location     Type
 24193 ;;  printf          4    0        struct .
 24194 ;;  printf          2   39[COMRAM] int 
 24195 ;;  printf          2   35[COMRAM] unsigned int 
 24196 ;;  printf          2   33[COMRAM] unsigned int 
 24197 ;;  printf          2   31[COMRAM] PTR void [1]
 24198 ;;		 -> ?i2_printf(2), ?_printf(2), 
 24199 ;;  printf          2   29[COMRAM] PTR const unsigned char 
 24200 ;;		 -> STR_128(7), count_total(2), printRTC@month(4), UI@month(4), 
 24201 ;;  printf          1   38[COMRAM] char 
 24202 ;;  printf          1   37[COMRAM] unsigned char 
 24203 ;;  printf          1   28[COMRAM] char 
 24204 ;; Return value:  Size  Location     Type
 24205 ;;                  2   12[COMRAM] int 
 24206 ;; Registers used:
 24207 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 24208 ;; Tracked objects:
 24209 ;;		On entry : 0/0
 24210 ;;		On exit  : 0/0
 24211 ;;		Unchanged: 0/0
 24212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24213 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24214 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24215 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24216 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24217 ;;Total ram usage:       29 bytes
 24218 ;; Hardware stack levels used:    1
 24219 ;; Hardware stack levels required when called:    2
 24220 ;; This function calls:
 24221 ;;		i2___lwdiv
 24222 ;;		i2___lwmod
 24223 ;;		i2___wmul
 24224 ;;		i2_isdigit
 24225 ;;		i2_putch
 24226 ;; This function is called by:
 24227 ;;		_change_state_to_menu_11
 24228 ;;		_change_state_to_menu_23
 24229 ;;		_change_state_to_logs_11
 24230 ;;		_change_state_to_logs_12
 24231 ;;		_change_state_to_logs_22
 24232 ;;		_change_state_to_logs_23
 24233 ;;		_change_state_to_logs_33
 24234 ;;		_change_state_to_logs_34
 24235 ;;		_printSortTimer
 24236 ;;		i2_change_state_to_menu_start
 24237 ;;		i2_change_state_to_menu_12
 24238 ;;		i2_change_state_to_menu_22
 24239 ;;		i2_printRTC
 24240 ;; This function uses a non-reentrant model
 24241 ;;
 24242                           
 24243                           	psect	text87
 24244  00243E                     __ptext87:
 24245                           	opt stack 0
 24246  00243E                     i2_printf:
 24247                           	opt stack 20
 24248                           
 24249                           ;doprnt.c: 466: va_list ap;
 24250                           ;doprnt.c: 499: signed char c;
 24251                           ;doprnt.c: 501: int width;
 24252                           ;doprnt.c: 506: signed char prec;
 24253                           ;doprnt.c: 508: unsigned char flag;
 24254                           ;doprnt.c: 523: union {
 24255                           ;doprnt.c: 524: unsigned long vd;
 24256                           ;doprnt.c: 525: double integ;
 24257                           ;doprnt.c: 526: } tmpval;
 24258                           ;doprnt.c: 528: unsigned int val;
 24259                           ;doprnt.c: 529: unsigned len;
 24260                           ;doprnt.c: 530: const char * cp;
 24261                           ;doprnt.c: 533: *ap = __va_start();
 24262                           
 24263                           ;incstack = 0
 24264  00243E  0E0F               	movlw	low (?i2_printf+2)
 24265  002440  6E20               	movwf	i2printf@ap,c
 24266  002442  0E00               	movlw	high (?i2_printf+2)
 24267  002444  6E21               	movwf	i2printf@ap+1,c
 24268                           
 24269                           ;doprnt.c: 536: while(c = *f++) {
 24270  002446  D1A4               	goto	i2l7156
 24271  002448                     i2l7026:
 24272                           
 24273                           ;doprnt.c: 538: if(c != '%')
 24274  002448  0E25               	movlw	37
 24275  00244A  1827               	xorwf	i2printf@c,w,c
 24276  00244C  B4D8               	btfsc	status,2,c
 24277  00244E  D004               	goto	i2l7030
 24278                           
 24279                           ;doprnt.c: 540: {
 24280                           ;doprnt.c: 541: (putch(c) );
 24281  002450  5027               	movf	i2printf@c,w,c
 24282  002452  ECB9  F02E         	call	i2_putch
 24283                           
 24284                           ;doprnt.c: 542: continue;
 24285  002456  D19C               	goto	i2l7156
 24286  002458                     i2l7030:
 24287                           
 24288                           ;doprnt.c: 543: }
 24289                           ;doprnt.c: 546: width = 0;
 24290  002458  0E00               	movlw	0
 24291  00245A  6E29               	movwf	i2printf@width+1,c
 24292  00245C  0E00               	movlw	0
 24293  00245E  6E28               	movwf	i2printf@width,c
 24294                           
 24295                           ;doprnt.c: 548: flag = 0;
 24296  002460  0E00               	movlw	0
 24297  002462  6E26               	movwf	i2printf@flag,c
 24298                           
 24299                           ;doprnt.c: 551: switch(*f) {
 24300                           
 24301                           ;doprnt.c: 550: for(;;) {
 24302  002464  D003               	goto	i2l7036
 24303  002466                     i2l7032:
 24304                           
 24305                           ;doprnt.c: 580: flag |= 0x04;
 24306  002466  8426               	bsf	i2printf@flag,2,c
 24307                           
 24308                           ;doprnt.c: 581: f++;
 24309  002468  4A0D               	infsnz	i2printf@f,f,c
 24310  00246A  2A0E               	incf	i2printf@f+1,f,c
 24311  00246C                     i2l7036:
 24312  00246C  C00D  FFF6         	movff	i2printf@f,tblptrl
 24313  002470  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 24314  002474                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 24315  002474  6AF8               	clrf	tblptru,c
 24316  002476                     	endif
 24317  002476                     	if	0	;tblptru may be non-zero
 24318  002476                     	endif
 24319  002476  0008               	tblrd		*
 24320  002478  50F5               	movf	tablat,w,c
 24321                           
 24322                           ; Switch size 1, requested type "space"
 24323                           ; Number of cases is 1, Range of values is 48 to 48
 24324                           ; switch strategies available:
 24325                           ; Name         Instructions Cycles
 24326                           ; simple_byte            4     3 (average)
 24327                           ;	Chosen strategy is simple_byte
 24328  00247A  0A30               	xorlw	48	; case 48
 24329  00247C  B4D8               	btfsc	status,2,c
 24330  00247E  D7F3               	goto	i2l7032
 24331                           
 24332                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 24333                           
 24334                           ;doprnt.c: 586: }
 24335                           
 24336                           ;doprnt.c: 585: break;
 24337  002480  C00D  FFF6         	movff	i2printf@f,tblptrl
 24338  002484  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 24339  002488                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 24340  002488  6AF8               	clrf	tblptru,c
 24341  00248A                     	endif
 24342  00248A                     	if	0	;tblptru may be non-zero
 24343  00248A                     	endif
 24344  00248A  0008               	tblrd		*
 24345  00248C  50F5               	movf	tablat,w,c
 24346  00248E  EC49  F02E         	call	i2_isdigit
 24347  002492  A0D8               	btfss	status,0,c
 24348  002494  D0A6               	goto	i2l7084
 24349                           
 24350                           ;doprnt.c: 598: width = 0;
 24351  002496  0E00               	movlw	0
 24352  002498  6E29               	movwf	i2printf@width+1,c
 24353  00249A  0E00               	movlw	0
 24354  00249C  6E28               	movwf	i2printf@width,c
 24355  00249E                     i2l7042:
 24356                           
 24357                           ;doprnt.c: 600: width *= 10;
 24358  00249E  C028  F001         	movff	i2printf@width,i2___wmul@multiplier
 24359  0024A2  C029  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 24360  0024A6  0E00               	movlw	0
 24361  0024A8  6E04               	movwf	i2___wmul@multiplicand+1,c
 24362  0024AA  0E0A               	movlw	10
 24363  0024AC  6E03               	movwf	i2___wmul@multiplicand,c
 24364  0024AE  ECEF  F02D         	call	i2___wmul	;wreg free
 24365  0024B2  C001  F028         	movff	?i2___wmul,i2printf@width
 24366  0024B6  C002  F029         	movff	?i2___wmul+1,i2printf@width+1
 24367                           
 24368                           ;doprnt.c: 601: width += *f++ - '0';
 24369  0024BA  0ED0               	movlw	208
 24370  0024BC  6E19               	movwf	??i2_printf& (0+255),c
 24371  0024BE  0EFF               	movlw	255
 24372  0024C0  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 24373  0024C2  C00D  FFF6         	movff	i2printf@f,tblptrl
 24374  0024C6  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 24375  0024CA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 24376  0024CA  6AF8               	clrf	tblptru,c
 24377  0024CC                     	endif
 24378  0024CC                     	if	0	;tblptru may be non-zero
 24379  0024CC                     	endif
 24380  0024CC  0008               	tblrd		*
 24381  0024CE  50F5               	movf	tablat,w,c
 24382  0024D0  6E1B               	movwf	(??i2_printf+2)& (0+255),c
 24383  0024D2  6A1C               	clrf	(??i2_printf+3)& (0+255),c
 24384  0024D4  5019               	movf	??i2_printf,w,c
 24385  0024D6  261B               	addwf	??i2_printf+2,f,c
 24386  0024D8  501A               	movf	??i2_printf+1,w,c
 24387  0024DA  221C               	addwfc	??i2_printf+3,f,c
 24388  0024DC  501B               	movf	??i2_printf+2,w,c
 24389  0024DE  2628               	addwf	i2printf@width,f,c
 24390  0024E0  501C               	movf	??i2_printf+3,w,c
 24391  0024E2  2229               	addwfc	i2printf@width+1,f,c
 24392  0024E4  4A0D               	infsnz	i2printf@f,f,c
 24393  0024E6  2A0E               	incf	i2printf@f+1,f,c
 24394                           
 24395                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 24396  0024E8  C00D  FFF6         	movff	i2printf@f,tblptrl
 24397  0024EC  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 24398  0024F0                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 24399  0024F0  6AF8               	clrf	tblptru,c
 24400  0024F2                     	endif
 24401  0024F2                     	if	0	;tblptru may be non-zero
 24402  0024F2                     	endif
 24403  0024F2  0008               	tblrd		*
 24404  0024F4  50F5               	movf	tablat,w,c
 24405  0024F6  EC49  F02E         	call	i2_isdigit
 24406  0024FA  A0D8               	btfss	status,0,c
 24407  0024FC  D072               	goto	i2l7084
 24408  0024FE  D7CF               	goto	i2l7042
 24409  002500                     i2l7050:
 24410                           
 24411                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 24412  002500  C020  FFD9         	movff	i2printf@ap,fsr2l
 24413  002504  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 24414  002508  CFDE F01E          	movff	postinc2,i2printf@cp
 24415  00250C  CFDD F01F          	movff	postdec2,i2printf@cp+1
 24416  002510  0E02               	movlw	2
 24417  002512  2620               	addwf	i2printf@ap,f,c
 24418  002514  0E00               	movlw	0
 24419  002516  2221               	addwfc	i2printf@ap+1,f,c
 24420                           
 24421                           ;doprnt.c: 740: if(!cp)
 24422  002518  501E               	movf	i2printf@cp,w,c
 24423  00251A  101F               	iorwf	i2printf@cp+1,w,c
 24424  00251C  A4D8               	btfss	status,2,c
 24425  00251E  D004               	goto	i2l7058
 24426                           
 24427                           ;doprnt.c: 741: cp = "(null)";
 24428  002520  0EB5               	movlw	low STR_128
 24429  002522  6E1E               	movwf	i2printf@cp,c
 24430  002524  0EFF               	movlw	high STR_128
 24431  002526  6E1F               	movwf	i2printf@cp+1,c
 24432  002528                     i2l7058:
 24433                           
 24434                           ;doprnt.c: 745: len = 0;
 24435  002528  0E00               	movlw	0
 24436  00252A  6E23               	movwf	i2printf@len+1,c
 24437  00252C  0E00               	movlw	0
 24438  00252E  6E22               	movwf	i2printf@len,c
 24439                           
 24440                           ;doprnt.c: 746: while(cp[len])
 24441  002530  D002               	goto	i2l7062
 24442  002532                     i2l7060:
 24443                           
 24444                           ;doprnt.c: 747: len++;
 24445  002532  4A22               	infsnz	i2printf@len,f,c
 24446  002534  2A23               	incf	i2printf@len+1,f,c
 24447  002536                     i2l7062:
 24448  002536  5022               	movf	i2printf@len,w,c
 24449  002538  241E               	addwf	i2printf@cp,w,c
 24450  00253A  6E19               	movwf	??i2_printf& (0+255),c
 24451  00253C  5023               	movf	i2printf@len+1,w,c
 24452  00253E  201F               	addwfc	i2printf@cp+1,w,c
 24453  002540  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 24454  002542  C019  FFF6         	movff	??i2_printf,tblptrl
 24455  002546  C01A  FFF7         	movff	??i2_printf+1,tblptrh
 24456  00254A  0E00               	movlw	low (__mediumconst shr (0+16))
 24457  00254C  6EF8               	movwf	tblptru,c
 24458  00254E  0E0F               	movlw	(high __ramtop+-1)
 24459  002550  64F7               	cpfsgt	tblptrh,c
 24460  002552  D003               	bra	i2u588_47
 24461  002554  0008               	tblrd		*
 24462  002556  50F5               	movf	tablat,w,c
 24463  002558  D005               	bra	i2u588_40
 24464  00255A                     i2u588_47:
 24465  00255A  CFF6 FFE9          	movff	tblptrl,fsr0l
 24466  00255E  CFF7 FFEA          	movff	tblptrh,fsr0h
 24467  002562  50EF               	movf	indf0,w,c
 24468  002564                     i2u588_40:
 24469  002564  0900               	iorlw	0
 24470  002566  A4D8               	btfss	status,2,c
 24471  002568  D7E4               	goto	i2l7060
 24472                           
 24473                           ;doprnt.c: 757: if(width > len)
 24474  00256A  5028               	movf	i2printf@width,w,c
 24475  00256C  5C22               	subwf	i2printf@len,w,c
 24476  00256E  5029               	movf	i2printf@width+1,w,c
 24477  002570  5823               	subwfb	i2printf@len+1,w,c
 24478  002572  B0D8               	btfsc	status,0,c
 24479  002574  D005               	goto	i2l7068
 24480                           
 24481                           ;doprnt.c: 758: width -= len;
 24482  002576  5022               	movf	i2printf@len,w,c
 24483  002578  5E28               	subwf	i2printf@width,f,c
 24484  00257A  5023               	movf	i2printf@len+1,w,c
 24485  00257C  5A29               	subwfb	i2printf@width+1,f,c
 24486  00257E  D008               	goto	i2l7072
 24487  002580                     i2l7068:
 24488                           
 24489                           ;doprnt.c: 759: else
 24490                           ;doprnt.c: 760: width = 0;
 24491  002580  0E00               	movlw	0
 24492  002582  6E29               	movwf	i2printf@width+1,c
 24493  002584  0E00               	movlw	0
 24494  002586  6E28               	movwf	i2printf@width,c
 24495                           
 24496                           ;doprnt.c: 764: while(width--)
 24497  002588  D003               	goto	i2l7072
 24498  00258A                     i2l7070:
 24499                           
 24500                           ;doprnt.c: 765: (putch(' ') );
 24501  00258A  0E20               	movlw	32
 24502  00258C  ECB9  F02E         	call	i2_putch
 24503  002590                     i2l7072:
 24504  002590  0628               	decf	i2printf@width,f,c
 24505  002592  A0D8               	btfss	status,0,c
 24506  002594  0629               	decf	i2printf@width+1,f,c
 24507  002596  2828               	incf	i2printf@width,w,c
 24508  002598  E1F8               	bnz	i2l7070
 24509  00259A  2829               	incf	i2printf@width+1,w,c
 24510  00259C  B4D8               	btfsc	status,2,c
 24511  00259E  D016               	goto	i2l7078
 24512  0025A0  D7F4               	goto	i2l7070
 24513  0025A2                     i2l7074:
 24514                           
 24515                           ;doprnt.c: 768: (putch(*cp++) );
 24516  0025A2  C01E  FFF6         	movff	i2printf@cp,tblptrl
 24517  0025A6  C01F  FFF7         	movff	i2printf@cp+1,tblptrh
 24518  0025AA  0E00               	movlw	low (__mediumconst shr (0+16))
 24519  0025AC  6EF8               	movwf	tblptru,c
 24520  0025AE  0E0F               	movlw	(high __ramtop+-1)
 24521  0025B0  64F7               	cpfsgt	tblptrh,c
 24522  0025B2  D003               	bra	i2u592_47
 24523  0025B4  0008               	tblrd		*
 24524  0025B6  50F5               	movf	tablat,w,c
 24525  0025B8  D005               	bra	i2u592_40
 24526  0025BA                     i2u592_47:
 24527  0025BA  CFF6 FFE9          	movff	tblptrl,fsr0l
 24528  0025BE  CFF7 FFEA          	movff	tblptrh,fsr0h
 24529  0025C2  50EF               	movf	indf0,w,c
 24530  0025C4                     i2u592_40:
 24531  0025C4  ECB9  F02E         	call	i2_putch
 24532  0025C8  4A1E               	infsnz	i2printf@cp,f,c
 24533  0025CA  2A1F               	incf	i2printf@cp+1,f,c
 24534  0025CC                     i2l7078:
 24535  0025CC  0622               	decf	i2printf@len,f,c
 24536  0025CE  A0D8               	btfss	status,0,c
 24537  0025D0  0623               	decf	i2printf@len+1,f,c
 24538  0025D2  2822               	incf	i2printf@len,w,c
 24539  0025D4  E1E6               	bnz	i2l7074
 24540  0025D6  2823               	incf	i2printf@len+1,w,c
 24541  0025D8  B4D8               	btfsc	status,2,c
 24542  0025DA  D0DA               	goto	i2l7156
 24543  0025DC  D7E2               	goto	i2l7074
 24544  0025DE                     i2l7080:
 24545                           
 24546                           ;doprnt.c: 818: flag |= 0x40;
 24547  0025DE  8C26               	bsf	i2printf@flag,6,c
 24548                           
 24549                           ;doprnt.c: 822: }
 24550                           
 24551                           ;doprnt.c: 819: break;
 24552  0025E0  D01B               	goto	i2l1528
 24553  0025E2                     i2l7084:
 24554  0025E2  C00D  FFF6         	movff	i2printf@f,tblptrl
 24555  0025E6  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 24556  0025EA  4A0D               	infsnz	i2printf@f,f,c
 24557  0025EC  2A0E               	incf	i2printf@f+1,f,c
 24558  0025EE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 24559  0025EE  6AF8               	clrf	tblptru,c
 24560  0025F0                     	endif
 24561  0025F0                     	if	0	;tblptru may be non-zero
 24562  0025F0                     	endif
 24563  0025F0  0008               	tblrd		*
 24564  0025F2  CFF5 F027          	movff	tablat,i2printf@c
 24565  0025F6  5027               	movf	i2printf@c,w,c
 24566                           
 24567                           ; Switch size 1, requested type "space"
 24568                           ; Number of cases is 5, Range of values is 0 to 117
 24569                           ; switch strategies available:
 24570                           ; Name         Instructions Cycles
 24571                           ; simple_byte           16     9 (average)
 24572                           ;	Chosen strategy is simple_byte
 24573  0025F8  0A00               	xorlw	0	; case 0
 24574  0025FA  B4D8               	btfsc	status,2,c
 24575  0025FC  0012               	return	
 24576  0025FE  0A64               	xorlw	100	; case 100
 24577  002600  B4D8               	btfsc	status,2,c
 24578  002602  D00A               	goto	i2l1528
 24579  002604  0A0D               	xorlw	13	; case 105
 24580  002606  B4D8               	btfsc	status,2,c
 24581  002608  D007               	goto	i2l1528
 24582  00260A  0A1A               	xorlw	26	; case 115
 24583  00260C  B4D8               	btfsc	status,2,c
 24584  00260E  D778               	goto	i2l7050
 24585  002610  0A06               	xorlw	6	; case 117
 24586  002612  B4D8               	btfsc	status,2,c
 24587  002614  D7E4               	goto	i2l7080
 24588  002616  D0BC               	goto	i2l7156
 24589  002618                     i2l1528:
 24590                           
 24591                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 24592  002618  BC26               	btfsc	i2printf@flag,6,c
 24593  00261A  D015               	goto	i2l7096
 24594                           
 24595                           ;doprnt.c: 1253: {
 24596                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 24597  00261C  C020  FFD9         	movff	i2printf@ap,fsr2l
 24598  002620  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 24599  002624  CFDE F024          	movff	postinc2,i2printf@val
 24600  002628  CFDD F025          	movff	postdec2,i2printf@val+1
 24601  00262C  0E02               	movlw	2
 24602  00262E  2620               	addwf	i2printf@ap,f,c
 24603  002630  0E00               	movlw	0
 24604  002632  2221               	addwfc	i2printf@ap+1,f,c
 24605                           
 24606                           ;doprnt.c: 1261: if((int)val < 0) {
 24607  002634  AE25               	btfss	i2printf@val+1,7,c
 24608  002636  D013               	goto	i2l7100
 24609                           
 24610                           ;doprnt.c: 1262: flag |= 0x03;
 24611  002638  0E03               	movlw	3
 24612  00263A  1226               	iorwf	i2printf@flag,f,c
 24613                           
 24614                           ;doprnt.c: 1263: val = -val;
 24615  00263C  6C24               	negf	i2printf@val,c
 24616  00263E  1E25               	comf	i2printf@val+1,f,c
 24617  002640  B0D8               	btfsc	status,0,c
 24618  002642  2A25               	incf	i2printf@val+1,f,c
 24619                           
 24620                           ;doprnt.c: 1264: }
 24621                           ;doprnt.c: 1266: }
 24622  002644  D00C               	goto	i2l7100
 24623  002646                     i2l7096:
 24624                           
 24625                           ;doprnt.c: 1268: else
 24626                           ;doprnt.c: 1273: {
 24627                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 24628  002646  C020  FFD9         	movff	i2printf@ap,fsr2l
 24629  00264A  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 24630  00264E  CFDE F024          	movff	postinc2,i2printf@val
 24631  002652  CFDD F025          	movff	postdec2,i2printf@val+1
 24632  002656  0E02               	movlw	2
 24633  002658  2620               	addwf	i2printf@ap,f,c
 24634  00265A  0E00               	movlw	0
 24635  00265C  2221               	addwfc	i2printf@ap+1,f,c
 24636  00265E                     i2l7100:
 24637                           
 24638                           ;doprnt.c: 1287: }
 24639                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 24640  00265E  0E01               	movlw	1
 24641  002660  6E27               	movwf	i2printf@c,c
 24642  002662                     i2l7102:
 24643  002662  0E05               	movlw	5
 24644  002664  1827               	xorwf	i2printf@c,w,c
 24645  002666  B4D8               	btfsc	status,2,c
 24646  002668  D015               	goto	i2l7114
 24647                           
 24648                           ;doprnt.c: 1306: if(val < dpowers[c])
 24649  00266A  5027               	movf	i2printf@c,w,c
 24650  00266C  0D02               	mullw	2
 24651  00266E  0EC0               	movlw	low _dpowers
 24652  002670  24F3               	addwf	prodl,w,c
 24653  002672  6EF6               	movwf	tblptrl,c
 24654  002674  0EFA               	movlw	high _dpowers
 24655  002676  20F4               	addwfc	prodh,w,c
 24656  002678  6EF7               	movwf	tblptrh,c
 24657  00267A                     	if	1	;There are 3 active tblptr bytes
 24658  00267A  6AF8               	clrf	tblptru,c
 24659  00267C  0E00               	movlw	low (__mediumconst shr (0+16))
 24660  00267E  22F8               	addwfc	tblptru,f,c
 24661  002680                     	endif
 24662  002680  0009               	tblrd		*+
 24663  002682  50F5               	movf	tablat,w,c
 24664  002684  5C24               	subwf	i2printf@val,w,c
 24665  002686  0009               	tblrd		*+
 24666  002688  50F5               	movf	tablat,w,c
 24667  00268A  5825               	subwfb	i2printf@val+1,w,c
 24668  00268C  A0D8               	btfss	status,0,c
 24669  00268E  D002               	goto	i2l7114
 24670                           
 24671                           ;doprnt.c: 1307: break;
 24672  002690  2A27               	incf	i2printf@c,f,c
 24673  002692  D7E7               	goto	i2l7102
 24674  002694                     i2l7114:
 24675                           
 24676                           ;doprnt.c: 1345: if(width && flag & 0x03)
 24677  002694  5028               	movf	i2printf@width,w,c
 24678  002696  1029               	iorwf	i2printf@width+1,w,c
 24679  002698  B4D8               	btfsc	status,2,c
 24680  00269A  D009               	goto	i2l7120
 24681  00269C  C026  F019         	movff	i2printf@flag,??i2_printf
 24682  0026A0  0E03               	movlw	3
 24683  0026A2  1619               	andwf	??i2_printf,f,c
 24684  0026A4  B4D8               	btfsc	status,2,c
 24685  0026A6  D003               	goto	i2l7120
 24686                           
 24687                           ;doprnt.c: 1346: width--;
 24688  0026A8  0628               	decf	i2printf@width,f,c
 24689  0026AA  A0D8               	btfss	status,0,c
 24690  0026AC  0629               	decf	i2printf@width+1,f,c
 24691  0026AE                     i2l7120:
 24692                           
 24693                           ;doprnt.c: 1381: if(width > c)
 24694  0026AE  0E80               	movlw	128
 24695  0026B0  BE27               	btfsc	i2printf@c,7,c
 24696  0026B2  0E7F               	movlw	127
 24697  0026B4  6E19               	movwf	??i2_printf& (0+255),c
 24698  0026B6  5028               	movf	i2printf@width,w,c
 24699  0026B8  5C27               	subwf	i2printf@c,w,c
 24700  0026BA  5029               	movf	i2printf@width+1,w,c
 24701  0026BC  0A80               	xorlw	128
 24702  0026BE  5819               	subwfb	??i2_printf& (0+255),w,c
 24703  0026C0  B0D8               	btfsc	status,0,c
 24704  0026C2  D007               	goto	i2l7124
 24705                           
 24706                           ;doprnt.c: 1382: width -= c;
 24707  0026C4  5027               	movf	i2printf@c,w,c
 24708  0026C6  5E28               	subwf	i2printf@width,f,c
 24709  0026C8  0E00               	movlw	0
 24710  0026CA  BE27               	btfsc	i2printf@c,7,c
 24711  0026CC  0EFF               	movlw	255
 24712  0026CE  5A29               	subwfb	i2printf@width+1,f,c
 24713  0026D0  D004               	goto	i2l7126
 24714  0026D2                     i2l7124:
 24715                           
 24716                           ;doprnt.c: 1383: else
 24717                           ;doprnt.c: 1384: width = 0;
 24718  0026D2  0E00               	movlw	0
 24719  0026D4  6E29               	movwf	i2printf@width+1,c
 24720  0026D6  0E00               	movlw	0
 24721  0026D8  6E28               	movwf	i2printf@width,c
 24722  0026DA                     i2l7126:
 24723                           
 24724                           ;doprnt.c: 1387: if(flag & 0x04) {
 24725  0026DA  A426               	btfss	i2printf@flag,2,c
 24726  0026DC  D014               	goto	i2l7138
 24727                           
 24728                           ;doprnt.c: 1392: if(flag & 0x03)
 24729  0026DE  C026  F019         	movff	i2printf@flag,??i2_printf
 24730  0026E2  0E03               	movlw	3
 24731  0026E4  1619               	andwf	??i2_printf,f,c
 24732  0026E6  B4D8               	btfsc	status,2,c
 24733  0026E8  D003               	goto	i2l7132
 24734                           
 24735                           ;doprnt.c: 1393: (putch('-') );
 24736  0026EA  0E2D               	movlw	45
 24737  0026EC  ECB9  F02E         	call	i2_putch
 24738  0026F0                     i2l7132:
 24739                           
 24740                           ;doprnt.c: 1415: if(width)
 24741  0026F0  5028               	movf	i2printf@width,w,c
 24742  0026F2  1029               	iorwf	i2printf@width+1,w,c
 24743  0026F4  B4D8               	btfsc	status,2,c
 24744  0026F6  D01E               	goto	i2l7148
 24745                           
 24746                           ;doprnt.c: 1417: (putch('0') );
 24747                           
 24748                           ;doprnt.c: 1416: do
 24749  0026F8  0E30               	movlw	48
 24750  0026FA  ECB9  F02E         	call	i2_putch
 24751                           
 24752                           ;doprnt.c: 1418: while(--width);
 24753  0026FE  0628               	decf	i2printf@width,f,c
 24754  002700  A0D8               	btfss	status,0,c
 24755  002702  0629               	decf	i2printf@width+1,f,c
 24756  002704  D7F5               	goto	i2l7132
 24757  002706                     i2l7138:
 24758                           
 24759                           ;doprnt.c: 1422: {
 24760                           ;doprnt.c: 1424: if(width
 24761                           ;doprnt.c: 1428: )
 24762  002706  5028               	movf	i2printf@width,w,c
 24763  002708  1029               	iorwf	i2printf@width+1,w,c
 24764  00270A  B4D8               	btfsc	status,2,c
 24765  00270C  D00A               	goto	i2l7144
 24766  00270E                     i2l7140:
 24767                           
 24768                           ;doprnt.c: 1430: (putch(' ') );
 24769  00270E  0E20               	movlw	32
 24770  002710  ECB9  F02E         	call	i2_putch
 24771                           
 24772                           ;doprnt.c: 1431: while(--width);
 24773  002714  0628               	decf	i2printf@width,f,c
 24774  002716  A0D8               	btfss	status,0,c
 24775  002718  0629               	decf	i2printf@width+1,f,c
 24776  00271A  5028               	movf	i2printf@width,w,c
 24777  00271C  1029               	iorwf	i2printf@width+1,w,c
 24778  00271E  A4D8               	btfss	status,2,c
 24779  002720  D7F6               	goto	i2l7140
 24780  002722                     i2l7144:
 24781                           
 24782                           ;doprnt.c: 1438: if(flag & 0x03)
 24783  002722  C026  F019         	movff	i2printf@flag,??i2_printf
 24784  002726  0E03               	movlw	3
 24785  002728  1619               	andwf	??i2_printf,f,c
 24786  00272A  B4D8               	btfsc	status,2,c
 24787  00272C  D003               	goto	i2l7148
 24788                           
 24789                           ;doprnt.c: 1439: (putch('-') );
 24790  00272E  0E2D               	movlw	45
 24791  002730  ECB9  F02E         	call	i2_putch
 24792  002734                     i2l7148:
 24793                           
 24794                           ;doprnt.c: 1469: }
 24795                           ;doprnt.c: 1472: prec = c;
 24796  002734  C027  F01D         	movff	i2printf@c,i2printf@prec
 24797                           
 24798                           ;doprnt.c: 1474: while(prec--) {
 24799  002738  D027               	goto	i2l7154
 24800  00273A                     i2l7150:
 24801                           
 24802                           ;doprnt.c: 1478: {
 24803                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 24804  00273A  501D               	movf	i2printf@prec,w,c
 24805  00273C  0D02               	mullw	2
 24806  00273E  0EC0               	movlw	low _dpowers
 24807  002740  24F3               	addwf	prodl,w,c
 24808  002742  6EF6               	movwf	tblptrl,c
 24809  002744  0EFA               	movlw	high _dpowers
 24810  002746  20F4               	addwfc	prodh,w,c
 24811  002748  6EF7               	movwf	tblptrh,c
 24812  00274A                     	if	1	;There are 3 active tblptr bytes
 24813  00274A  6AF8               	clrf	tblptru,c
 24814  00274C  0E00               	movlw	low (__mediumconst shr (0+16))
 24815  00274E  22F8               	addwfc	tblptru,f,c
 24816  002750                     	endif
 24817  002750  0009               	tblrd		*+
 24818  002752  CFF5 F008          	movff	tablat,i2___lwdiv@divisor
 24819  002756  000A               	tblrd		*-
 24820  002758  CFF5 F009          	movff	tablat,i2___lwdiv@divisor+1
 24821  00275C  C024  F006         	movff	i2printf@val,i2___lwdiv@dividend
 24822  002760  C025  F007         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 24823  002764  EC83  F02A         	call	i2___lwdiv	;wreg free
 24824  002768  C006  F001         	movff	?i2___lwdiv,i2___lwmod@dividend
 24825  00276C  C007  F002         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 24826  002770  0E00               	movlw	0
 24827  002772  6E04               	movwf	i2___lwmod@divisor+1,c
 24828  002774  0E0A               	movlw	10
 24829  002776  6E03               	movwf	i2___lwmod@divisor,c
 24830  002778  EC8A  F02B         	call	i2___lwmod	;wreg free
 24831  00277C  5001               	movf	?i2___lwmod,w,c
 24832  00277E  0F30               	addlw	48
 24833  002780  6E27               	movwf	i2printf@c,c
 24834                           
 24835                           ;doprnt.c: 1523: }
 24836                           ;doprnt.c: 1524: (putch(c) );
 24837  002782  5027               	movf	i2printf@c,w,c
 24838  002784  ECB9  F02E         	call	i2_putch
 24839  002788                     i2l7154:
 24840  002788  061D               	decf	i2printf@prec,f,c
 24841  00278A  281D               	incf	i2printf@prec,w,c
 24842  00278C  A4D8               	btfss	status,2,c
 24843  00278E  D7D5               	goto	i2l7150
 24844  002790                     i2l7156:
 24845  002790  C00D  FFF6         	movff	i2printf@f,tblptrl
 24846  002794  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 24847  002798  4A0D               	infsnz	i2printf@f,f,c
 24848  00279A  2A0E               	incf	i2printf@f+1,f,c
 24849  00279C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 24850  00279C  6AF8               	clrf	tblptru,c
 24851  00279E                     	endif
 24852  00279E                     	if	0	;tblptru may be non-zero
 24853  00279E                     	endif
 24854  00279E  0008               	tblrd		*
 24855  0027A0  CFF5 F027          	movff	tablat,i2printf@c
 24856  0027A4  5027               	movf	i2printf@c,w,c
 24857  0027A6  B4D8               	btfsc	status,2,c
 24858  0027A8  0012               	return	
 24859  0027AA  D64E               	goto	i2l7026
 24860  0027AC                     __end_ofi2_printf:
 24861                           	opt stack 0
 24862                           pclatu	equ	0xFFB
 24863                           pclath	equ	0xFFA
 24864                           tblptru	equ	0xFF8
 24865                           tblptrh	equ	0xFF7
 24866                           tblptrl	equ	0xFF6
 24867                           tablat	equ	0xFF5
 24868                           prodh	equ	0xFF4
 24869                           prodl	equ	0xFF3
 24870                           intcon	equ	0xFF2
 24871                           intcon2	equ	0xFF1
 24872                           intcon3	equ	0xFF0
 24873                           indf0	equ	0xFEF
 24874                           postinc0	equ	0xFEE
 24875                           fsr0h	equ	0xFEA
 24876                           fsr0l	equ	0xFE9
 24877                           wreg	equ	0xFE8
 24878                           postdec1	equ	0xFE5
 24879                           fsr1h	equ	0xFE2
 24880                           fsr1l	equ	0xFE1
 24881                           indf2	equ	0xFDF
 24882                           postinc2	equ	0xFDE
 24883                           postdec2	equ	0xFDD
 24884                           fsr2h	equ	0xFDA
 24885                           fsr2l	equ	0xFD9
 24886                           status	equ	0xFD8
 24887                           
 24888 ;; *************** function i2_putch *****************
 24889 ;; Defined at:
 24890 ;;		line 20 in file "lcd.c"
 24891 ;; Parameters:    Size  Location     Type
 24892 ;;  data            1    wreg     unsigned char 
 24893 ;; Auto vars:     Size  Location     Type
 24894 ;;  data            1    2[COMRAM] unsigned char 
 24895 ;; Return value:  Size  Location     Type
 24896 ;;                  1    wreg      void 
 24897 ;; Registers used:
 24898 ;;		wreg, status,2, status,0, cstack
 24899 ;; Tracked objects:
 24900 ;;		On entry : 0/0
 24901 ;;		On exit  : 0/0
 24902 ;;		Unchanged: 0/0
 24903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24904 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24905 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24906 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24907 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24908 ;;Total ram usage:        1 bytes
 24909 ;; Hardware stack levels used:    1
 24910 ;; Hardware stack levels required when called:    1
 24911 ;; This function calls:
 24912 ;;		i2_lcdNibble
 24913 ;; This function is called by:
 24914 ;;		i2_printf
 24915 ;; This function uses a non-reentrant model
 24916 ;;
 24917                           
 24918                           	psect	text88
 24919  005D72                     __ptext88:
 24920                           	opt stack 0
 24921  005D72                     i2_putch:
 24922                           	opt stack 20
 24923                           
 24924                           ;incstack = 0
 24925                           ;i2putch@data stored from wreg
 24926  005D72  6E03               	movwf	i2putch@data,c
 24927                           
 24928                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 24929  005D74  848C               	bsf	3980,2,c	;volatile
 24930                           
 24931                           ;lcd.c: 22: lcdNibble(data);
 24932  005D76  5003               	movf	i2putch@data,w,c
 24933  005D78  EC56  F02A         	call	i2_lcdNibble
 24934  005D7C  0012               	return		;funcret
 24935  005D7E                     __end_ofi2_putch:
 24936                           	opt stack 0
 24937                           pclatu	equ	0xFFB
 24938                           pclath	equ	0xFFA
 24939                           tblptru	equ	0xFF8
 24940                           tblptrh	equ	0xFF7
 24941                           tblptrl	equ	0xFF6
 24942                           tablat	equ	0xFF5
 24943                           prodh	equ	0xFF4
 24944                           prodl	equ	0xFF3
 24945                           intcon	equ	0xFF2
 24946                           intcon2	equ	0xFF1
 24947                           intcon3	equ	0xFF0
 24948                           indf0	equ	0xFEF
 24949                           postinc0	equ	0xFEE
 24950                           fsr0h	equ	0xFEA
 24951                           fsr0l	equ	0xFE9
 24952                           wreg	equ	0xFE8
 24953                           postdec1	equ	0xFE5
 24954                           fsr1h	equ	0xFE2
 24955                           fsr1l	equ	0xFE1
 24956                           indf2	equ	0xFDF
 24957                           postinc2	equ	0xFDE
 24958                           postdec2	equ	0xFDD
 24959                           fsr2h	equ	0xFDA
 24960                           fsr2l	equ	0xFD9
 24961                           status	equ	0xFD8
 24962                           
 24963 ;; *************** function i2_isdigit *****************
 24964 ;; Defined at:
 24965 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 24966 ;; Parameters:    Size  Location     Type
 24967 ;;  c               1    wreg     unsigned char 
 24968 ;; Auto vars:     Size  Location     Type
 24969 ;;  c               1    2[COMRAM] unsigned char 
 24970 ;; Return value:  Size  Location     Type
 24971 ;;		None               void
 24972 ;; Registers used:
 24973 ;;		wreg, status,2, status,0
 24974 ;; Tracked objects:
 24975 ;;		On entry : 0/0
 24976 ;;		On exit  : 0/0
 24977 ;;		Unchanged: 0/0
 24978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24979 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24980 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24981 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24982 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24983 ;;Total ram usage:        3 bytes
 24984 ;; Hardware stack levels used:    1
 24985 ;; This function calls:
 24986 ;;		Nothing
 24987 ;; This function is called by:
 24988 ;;		i2_printf
 24989 ;; This function uses a non-reentrant model
 24990 ;;
 24991                           
 24992                           	psect	text89
 24993  005C92                     __ptext89:
 24994                           	opt stack 0
 24995  005C92                     i2_isdigit:
 24996                           	opt stack 21
 24997                           
 24998                           ;incstack = 0
 24999                           ;i2isdigit@c stored from wreg
 25000  005C92  6E03               	movwf	i2isdigit@c,c
 25001  005C94  0E00               	movlw	0
 25002  005C96  6E02               	movwf	i2_isdigit$2066,c
 25003  005C98  0E3A               	movlw	58
 25004  005C9A  6003               	cpfslt	i2isdigit@c,c
 25005  005C9C  D005               	goto	i2l6690
 25006  005C9E  0E2F               	movlw	47
 25007  005CA0  6403               	cpfsgt	i2isdigit@c,c
 25008  005CA2  D002               	goto	i2l6690
 25009  005CA4  0E01               	movlw	1
 25010  005CA6  6E02               	movwf	i2_isdigit$2066,c
 25011  005CA8                     i2l6690:
 25012  005CA8  C002  F001         	movff	i2_isdigit$2066,??i2_isdigit
 25013  005CAC  3001               	rrcf	??i2_isdigit,w,c
 25014  005CAE  0012               	return	
 25015  005CB0                     __end_ofi2_isdigit:
 25016                           	opt stack 0
 25017                           pclatu	equ	0xFFB
 25018                           pclath	equ	0xFFA
 25019                           tblptru	equ	0xFF8
 25020                           tblptrh	equ	0xFF7
 25021                           tblptrl	equ	0xFF6
 25022                           tablat	equ	0xFF5
 25023                           prodh	equ	0xFF4
 25024                           prodl	equ	0xFF3
 25025                           intcon	equ	0xFF2
 25026                           intcon2	equ	0xFF1
 25027                           intcon3	equ	0xFF0
 25028                           indf0	equ	0xFEF
 25029                           postinc0	equ	0xFEE
 25030                           fsr0h	equ	0xFEA
 25031                           fsr0l	equ	0xFE9
 25032                           wreg	equ	0xFE8
 25033                           postdec1	equ	0xFE5
 25034                           fsr1h	equ	0xFE2
 25035                           fsr1l	equ	0xFE1
 25036                           indf2	equ	0xFDF
 25037                           postinc2	equ	0xFDE
 25038                           postdec2	equ	0xFDD
 25039                           fsr2h	equ	0xFDA
 25040                           fsr2l	equ	0xFD9
 25041                           status	equ	0xFD8
 25042                           
 25043 ;; *************** function i2___wmul *****************
 25044 ;; Defined at:
 25045 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 25046 ;; Parameters:    Size  Location     Type
 25047 ;;  multiplier      2    0[COMRAM] unsigned int 
 25048 ;;  multiplicand    2    2[COMRAM] unsigned int 
 25049 ;; Auto vars:     Size  Location     Type
 25050 ;;  __wmul          2    4[COMRAM] unsigned int 
 25051 ;; Return value:  Size  Location     Type
 25052 ;;                  2    0[COMRAM] unsigned int 
 25053 ;; Registers used:
 25054 ;;		wreg, status,2, status,0, prodl, prodh
 25055 ;; Tracked objects:
 25056 ;;		On entry : 0/0
 25057 ;;		On exit  : 0/0
 25058 ;;		Unchanged: 0/0
 25059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25060 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25061 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25062 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25063 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25064 ;;Total ram usage:        6 bytes
 25065 ;; Hardware stack levels used:    1
 25066 ;; This function calls:
 25067 ;;		Nothing
 25068 ;; This function is called by:
 25069 ;;		_printSortTimer
 25070 ;;		_retrieveLog
 25071 ;;		i2_printf
 25072 ;; This function uses a non-reentrant model
 25073 ;;
 25074                           
 25075                           	psect	text90
 25076  005BDE                     __ptext90:
 25077                           	opt stack 0
 25078  005BDE                     i2___wmul:
 25079                           	opt stack 21
 25080                           
 25081                           ;incstack = 0
 25082  005BDE  5001               	movf	i2___wmul@multiplier,w,c
 25083  005BE0  0203               	mulwf	i2___wmul@multiplicand,c
 25084  005BE2  CFF3 F005          	movff	prodl,i2___wmul@product
 25085  005BE6  CFF4 F006          	movff	prodh,i2___wmul@product+1
 25086  005BEA  5001               	movf	i2___wmul@multiplier,w,c
 25087  005BEC  0204               	mulwf	i2___wmul@multiplicand+1,c
 25088  005BEE  50F3               	movf	prodl,w,c
 25089  005BF0  2606               	addwf	i2___wmul@product+1,f,c
 25090  005BF2  5002               	movf	i2___wmul@multiplier+1,w,c
 25091  005BF4  0203               	mulwf	i2___wmul@multiplicand,c
 25092  005BF6  50F3               	movf	prodl,w,c
 25093  005BF8  2606               	addwf	i2___wmul@product+1,f,c
 25094  005BFA  C005  F001         	movff	i2___wmul@product,?i2___wmul
 25095  005BFE  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 25096  005C02  0012               	return	
 25097  005C04                     __end_ofi2___wmul:
 25098                           	opt stack 0
 25099                           pclatu	equ	0xFFB
 25100                           pclath	equ	0xFFA
 25101                           tblptru	equ	0xFF8
 25102                           tblptrh	equ	0xFF7
 25103                           tblptrl	equ	0xFF6
 25104                           tablat	equ	0xFF5
 25105                           prodh	equ	0xFF4
 25106                           prodl	equ	0xFF3
 25107                           intcon	equ	0xFF2
 25108                           intcon2	equ	0xFF1
 25109                           intcon3	equ	0xFF0
 25110                           indf0	equ	0xFEF
 25111                           postinc0	equ	0xFEE
 25112                           fsr0h	equ	0xFEA
 25113                           fsr0l	equ	0xFE9
 25114                           wreg	equ	0xFE8
 25115                           postdec1	equ	0xFE5
 25116                           fsr1h	equ	0xFE2
 25117                           fsr1l	equ	0xFE1
 25118                           indf2	equ	0xFDF
 25119                           postinc2	equ	0xFDE
 25120                           postdec2	equ	0xFDD
 25121                           fsr2h	equ	0xFDA
 25122                           fsr2l	equ	0xFD9
 25123                           status	equ	0xFD8
 25124                           
 25125 ;; *************** function i2___lwmod *****************
 25126 ;; Defined at:
 25127 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 25128 ;; Parameters:    Size  Location     Type
 25129 ;;  dividend        2    0[COMRAM] unsigned int 
 25130 ;;  divisor         2    2[COMRAM] unsigned int 
 25131 ;; Auto vars:     Size  Location     Type
 25132 ;;  __lwmod         1    4[COMRAM] unsigned char 
 25133 ;; Return value:  Size  Location     Type
 25134 ;;                  2    0[COMRAM] unsigned int 
 25135 ;; Registers used:
 25136 ;;		wreg, status,2, status,0
 25137 ;; Tracked objects:
 25138 ;;		On entry : 0/0
 25139 ;;		On exit  : 0/0
 25140 ;;		Unchanged: 0/0
 25141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25142 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25143 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25144 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25145 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25146 ;;Total ram usage:        5 bytes
 25147 ;; Hardware stack levels used:    1
 25148 ;; This function calls:
 25149 ;;		Nothing
 25150 ;; This function is called by:
 25151 ;;		_printSortTimer
 25152 ;;		i2_printf
 25153 ;; This function uses a non-reentrant model
 25154 ;;
 25155                           
 25156                           	psect	text91
 25157  005714                     __ptext91:
 25158                           	opt stack 0
 25159  005714                     i2___lwmod:
 25160                           	opt stack 21
 25161                           
 25162                           ;incstack = 0
 25163  005714  5003               	movf	i2___lwmod@divisor,w,c
 25164  005716  1004               	iorwf	i2___lwmod@divisor+1,w,c
 25165  005718  B4D8               	btfsc	status,2,c
 25166  00571A  D018               	goto	i2l1985
 25167  00571C  0E01               	movlw	1
 25168  00571E  6E05               	movwf	i2___lwmod@counter,c
 25169  005720  D004               	goto	i2l6722
 25170  005722                     i2l6720:
 25171  005722  90D8               	bcf	status,0,c
 25172  005724  3603               	rlcf	i2___lwmod@divisor,f,c
 25173  005726  3604               	rlcf	i2___lwmod@divisor+1,f,c
 25174  005728  2A05               	incf	i2___lwmod@counter,f,c
 25175  00572A                     i2l6722:
 25176  00572A  AE04               	btfss	i2___lwmod@divisor+1,7,c
 25177  00572C  D7FA               	goto	i2l6720
 25178  00572E                     i2l6724:
 25179  00572E  5003               	movf	i2___lwmod@divisor,w,c
 25180  005730  5C01               	subwf	i2___lwmod@dividend,w,c
 25181  005732  5004               	movf	i2___lwmod@divisor+1,w,c
 25182  005734  5802               	subwfb	i2___lwmod@dividend+1,w,c
 25183  005736  A0D8               	btfss	status,0,c
 25184  005738  D004               	goto	i2l6728
 25185  00573A  5003               	movf	i2___lwmod@divisor,w,c
 25186  00573C  5E01               	subwf	i2___lwmod@dividend,f,c
 25187  00573E  5004               	movf	i2___lwmod@divisor+1,w,c
 25188  005740  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 25189  005742                     i2l6728:
 25190  005742  90D8               	bcf	status,0,c
 25191  005744  3204               	rrcf	i2___lwmod@divisor+1,f,c
 25192  005746  3203               	rrcf	i2___lwmod@divisor,f,c
 25193  005748  2E05               	decfsz	i2___lwmod@counter,f,c
 25194  00574A  D7F1               	goto	i2l6724
 25195  00574C                     i2l1985:
 25196  00574C  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 25197  005750  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 25198  005754  0012               	return		;funcret
 25199  005756                     __end_ofi2___lwmod:
 25200                           	opt stack 0
 25201                           pclatu	equ	0xFFB
 25202                           pclath	equ	0xFFA
 25203                           tblptru	equ	0xFF8
 25204                           tblptrh	equ	0xFF7
 25205                           tblptrl	equ	0xFF6
 25206                           tablat	equ	0xFF5
 25207                           prodh	equ	0xFF4
 25208                           prodl	equ	0xFF3
 25209                           intcon	equ	0xFF2
 25210                           intcon2	equ	0xFF1
 25211                           intcon3	equ	0xFF0
 25212                           indf0	equ	0xFEF
 25213                           postinc0	equ	0xFEE
 25214                           fsr0h	equ	0xFEA
 25215                           fsr0l	equ	0xFE9
 25216                           wreg	equ	0xFE8
 25217                           postdec1	equ	0xFE5
 25218                           fsr1h	equ	0xFE2
 25219                           fsr1l	equ	0xFE1
 25220                           indf2	equ	0xFDF
 25221                           postinc2	equ	0xFDE
 25222                           postdec2	equ	0xFDD
 25223                           fsr2h	equ	0xFDA
 25224                           fsr2l	equ	0xFD9
 25225                           status	equ	0xFD8
 25226                           
 25227 ;; *************** function i2___lwdiv *****************
 25228 ;; Defined at:
 25229 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 25230 ;; Parameters:    Size  Location     Type
 25231 ;;  dividend        2    5[COMRAM] unsigned int 
 25232 ;;  divisor         2    7[COMRAM] unsigned int 
 25233 ;; Auto vars:     Size  Location     Type
 25234 ;;  __lwdiv         2    9[COMRAM] unsigned int 
 25235 ;;  __lwdiv         1   11[COMRAM] unsigned char 
 25236 ;; Return value:  Size  Location     Type
 25237 ;;                  2    5[COMRAM] unsigned int 
 25238 ;; Registers used:
 25239 ;;		wreg, status,2, status,0
 25240 ;; Tracked objects:
 25241 ;;		On entry : 0/0
 25242 ;;		On exit  : 0/0
 25243 ;;		Unchanged: 0/0
 25244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25245 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25246 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25247 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25248 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25249 ;;Total ram usage:        7 bytes
 25250 ;; Hardware stack levels used:    1
 25251 ;; This function calls:
 25252 ;;		Nothing
 25253 ;; This function is called by:
 25254 ;;		_printSortTimer
 25255 ;;		i2_printf
 25256 ;; This function uses a non-reentrant model
 25257 ;;
 25258                           
 25259                           	psect	text92
 25260  005506                     __ptext92:
 25261                           	opt stack 0
 25262  005506                     i2___lwdiv:
 25263                           	opt stack 21
 25264                           
 25265                           ;incstack = 0
 25266  005506  0E00               	movlw	0
 25267  005508  6E0B               	movwf	i2___lwdiv@quotient+1,c
 25268  00550A  0E00               	movlw	0
 25269  00550C  6E0A               	movwf	i2___lwdiv@quotient,c
 25270  00550E  5008               	movf	i2___lwdiv@divisor,w,c
 25271  005510  1009               	iorwf	i2___lwdiv@divisor+1,w,c
 25272  005512  B4D8               	btfsc	status,2,c
 25273  005514  D01C               	goto	i2l1975
 25274  005516  0E01               	movlw	1
 25275  005518  6E0C               	movwf	i2___lwdiv@counter,c
 25276  00551A  D004               	goto	i2l6702
 25277  00551C                     i2l6700:
 25278  00551C  90D8               	bcf	status,0,c
 25279  00551E  3608               	rlcf	i2___lwdiv@divisor,f,c
 25280  005520  3609               	rlcf	i2___lwdiv@divisor+1,f,c
 25281  005522  2A0C               	incf	i2___lwdiv@counter,f,c
 25282  005524                     i2l6702:
 25283  005524  AE09               	btfss	i2___lwdiv@divisor+1,7,c
 25284  005526  D7FA               	goto	i2l6700
 25285  005528                     i2l6704:
 25286  005528  90D8               	bcf	status,0,c
 25287  00552A  360A               	rlcf	i2___lwdiv@quotient,f,c
 25288  00552C  360B               	rlcf	i2___lwdiv@quotient+1,f,c
 25289  00552E  5008               	movf	i2___lwdiv@divisor,w,c
 25290  005530  5C06               	subwf	i2___lwdiv@dividend,w,c
 25291  005532  5009               	movf	i2___lwdiv@divisor+1,w,c
 25292  005534  5807               	subwfb	i2___lwdiv@dividend+1,w,c
 25293  005536  A0D8               	btfss	status,0,c
 25294  005538  D005               	goto	i2l6712
 25295  00553A  5008               	movf	i2___lwdiv@divisor,w,c
 25296  00553C  5E06               	subwf	i2___lwdiv@dividend,f,c
 25297  00553E  5009               	movf	i2___lwdiv@divisor+1,w,c
 25298  005540  5A07               	subwfb	i2___lwdiv@dividend+1,f,c
 25299  005542  800A               	bsf	i2___lwdiv@quotient,0,c
 25300  005544                     i2l6712:
 25301  005544  90D8               	bcf	status,0,c
 25302  005546  3209               	rrcf	i2___lwdiv@divisor+1,f,c
 25303  005548  3208               	rrcf	i2___lwdiv@divisor,f,c
 25304  00554A  2E0C               	decfsz	i2___lwdiv@counter,f,c
 25305  00554C  D7ED               	goto	i2l6704
 25306  00554E                     i2l1975:
 25307  00554E  C00A  F006         	movff	i2___lwdiv@quotient,?i2___lwdiv
 25308  005552  C00B  F007         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 25309  005556  0012               	return		;funcret
 25310  005558                     __end_ofi2___lwdiv:
 25311                           	opt stack 0
 25312                           pclatu	equ	0xFFB
 25313                           pclath	equ	0xFFA
 25314                           tblptru	equ	0xFF8
 25315                           tblptrh	equ	0xFF7
 25316                           tblptrl	equ	0xFF6
 25317                           tablat	equ	0xFF5
 25318                           prodh	equ	0xFF4
 25319                           prodl	equ	0xFF3
 25320                           intcon	equ	0xFF2
 25321                           intcon2	equ	0xFF1
 25322                           intcon3	equ	0xFF0
 25323                           indf0	equ	0xFEF
 25324                           postinc0	equ	0xFEE
 25325                           fsr0h	equ	0xFEA
 25326                           fsr0l	equ	0xFE9
 25327                           wreg	equ	0xFE8
 25328                           postdec1	equ	0xFE5
 25329                           fsr1h	equ	0xFE2
 25330                           fsr1l	equ	0xFE1
 25331                           indf2	equ	0xFDF
 25332                           postinc2	equ	0xFDE
 25333                           postdec2	equ	0xFDD
 25334                           fsr2h	equ	0xFDA
 25335                           fsr2l	equ	0xFD9
 25336                           status	equ	0xFD8
 25337                           
 25338 ;; *************** function i2_lcdInst *****************
 25339 ;; Defined at:
 25340 ;;		line 15 in file "lcd.c"
 25341 ;; Parameters:    Size  Location     Type
 25342 ;;  data            1    wreg     unsigned char 
 25343 ;; Auto vars:     Size  Location     Type
 25344 ;;  data            1    2[COMRAM] unsigned char 
 25345 ;; Return value:  Size  Location     Type
 25346 ;;                  1    wreg      void 
 25347 ;; Registers used:
 25348 ;;		wreg, status,2, status,0, cstack
 25349 ;; Tracked objects:
 25350 ;;		On entry : 0/0
 25351 ;;		On exit  : 0/0
 25352 ;;		Unchanged: 0/0
 25353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25354 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25355 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25356 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25357 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25358 ;;Total ram usage:        1 bytes
 25359 ;; Hardware stack levels used:    1
 25360 ;; Hardware stack levels required when called:    1
 25361 ;; This function calls:
 25362 ;;		i2_lcdNibble
 25363 ;; This function is called by:
 25364 ;;		_change_state_to_menu_11
 25365 ;;		_change_state_to_menu_23
 25366 ;;		_change_state_to_logs_11
 25367 ;;		_change_state_to_logs_12
 25368 ;;		_change_state_to_logs_22
 25369 ;;		_change_state_to_logs_23
 25370 ;;		_change_state_to_logs_33
 25371 ;;		_change_state_to_logs_34
 25372 ;;		_printSortTimer
 25373 ;;		i2_change_state_to_menu_start
 25374 ;;		i2_change_state_to_menu_12
 25375 ;;		i2_change_state_to_menu_22
 25376 ;;		i2_printRTC
 25377 ;; This function uses a non-reentrant model
 25378 ;;
 25379                           
 25380                           	psect	text93
 25381  005D7E                     __ptext93:
 25382                           	opt stack 0
 25383  005D7E                     i2_lcdInst:
 25384                           	opt stack 20
 25385                           
 25386                           ;incstack = 0
 25387                           ;i2lcdInst@data stored from wreg
 25388  005D7E  6E03               	movwf	i2lcdInst@data,c
 25389                           
 25390                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 25391  005D80  948C               	bcf	3980,2,c	;volatile
 25392                           
 25393                           ;lcd.c: 17: lcdNibble(data);
 25394  005D82  5003               	movf	i2lcdInst@data,w,c
 25395  005D84  EC56  F02A         	call	i2_lcdNibble
 25396  005D88  0012               	return		;funcret
 25397  005D8A                     __end_ofi2_lcdInst:
 25398                           	opt stack 0
 25399                           pclatu	equ	0xFFB
 25400                           pclath	equ	0xFFA
 25401                           tblptru	equ	0xFF8
 25402                           tblptrh	equ	0xFF7
 25403                           tblptrl	equ	0xFF6
 25404                           tablat	equ	0xFF5
 25405                           prodh	equ	0xFF4
 25406                           prodl	equ	0xFF3
 25407                           intcon	equ	0xFF2
 25408                           intcon2	equ	0xFF1
 25409                           intcon3	equ	0xFF0
 25410                           indf0	equ	0xFEF
 25411                           postinc0	equ	0xFEE
 25412                           fsr0h	equ	0xFEA
 25413                           fsr0l	equ	0xFE9
 25414                           wreg	equ	0xFE8
 25415                           postdec1	equ	0xFE5
 25416                           fsr1h	equ	0xFE2
 25417                           fsr1l	equ	0xFE1
 25418                           indf2	equ	0xFDF
 25419                           postinc2	equ	0xFDE
 25420                           postdec2	equ	0xFDD
 25421                           fsr2h	equ	0xFDA
 25422                           fsr2l	equ	0xFD9
 25423                           status	equ	0xFD8
 25424                           
 25425 ;; *************** function i2_lcdNibble *****************
 25426 ;; Defined at:
 25427 ;;		line 25 in file "lcd.c"
 25428 ;; Parameters:    Size  Location     Type
 25429 ;;  data            1    wreg     unsigned char 
 25430 ;; Auto vars:     Size  Location     Type
 25431 ;;  data            1    1[COMRAM] unsigned char 
 25432 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 25433 ;; Return value:  Size  Location     Type
 25434 ;;                  1    wreg      void 
 25435 ;; Registers used:
 25436 ;;		wreg, status,2, status,0
 25437 ;; Tracked objects:
 25438 ;;		On entry : 0/0
 25439 ;;		On exit  : 0/0
 25440 ;;		Unchanged: 0/0
 25441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25442 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25443 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25444 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25445 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25446 ;;Total ram usage:        2 bytes
 25447 ;; Hardware stack levels used:    1
 25448 ;; This function calls:
 25449 ;;		Nothing
 25450 ;; This function is called by:
 25451 ;;		i2_lcdInst
 25452 ;;		i2_putch
 25453 ;; This function uses a non-reentrant model
 25454 ;;
 25455                           
 25456                           	psect	text94
 25457  0054AC                     __ptext94:
 25458                           	opt stack 0
 25459  0054AC                     i2_lcdNibble:
 25460                           	opt stack 20
 25461                           
 25462                           ;incstack = 0
 25463                           ;i2lcdNibble@data stored from wreg
 25464  0054AC  6E02               	movwf	i2lcdNibble@data,c
 25465                           
 25466                           ;lcd.c: 27: (INTCONbits.GIE = 0);
 25467  0054AE  9EF2               	bcf	intcon,7,c	;volatile
 25468                           
 25469                           ;lcd.c: 28: char temp = data & 0xF0;
 25470  0054B0  5002               	movf	i2lcdNibble@data,w,c
 25471  0054B2  0BF0               	andlw	240
 25472  0054B4  6E01               	movwf	i2lcdNibble@temp,c
 25473                           
 25474                           ;lcd.c: 29: LATD = LATD & 0x0F;
 25475  0054B6  508C               	movf	3980,w,c	;volatile
 25476  0054B8  0B0F               	andlw	15
 25477  0054BA  6E8C               	movwf	3980,c	;volatile
 25478                           
 25479                           ;lcd.c: 30: LATD = temp | LATD;
 25480  0054BC  5001               	movf	i2lcdNibble@temp,w,c
 25481  0054BE  108C               	iorwf	3980,w,c	;volatile
 25482  0054C0  6E8C               	movwf	3980,c	;volatile
 25483                           
 25484                           ;lcd.c: 32: LATDbits.LATD3 = 1;
 25485  0054C2  868C               	bsf	3980,3,c	;volatile
 25486                           
 25487                           ;lcd.c: 33: _delay((unsigned long)((25)*(32000000/4000000.0)));
 25488  0054C4  0E42               	movlw	66
 25489  0054C6                     i2u1178_47:
 25490  0054C6  2EE8               	decfsz	wreg,f,c
 25491  0054C8  D7FE               	bra	i2u1178_47
 25492  0054CA  D000               	nop2	
 25493                           
 25494                           ;lcd.c: 34: LATDbits.LATD3 = 0;
 25495  0054CC  968C               	bcf	3980,3,c	;volatile
 25496                           
 25497                           ;lcd.c: 35: _delay((unsigned long)((25)*(32000000/4000000.0)));
 25498  0054CE  0E42               	movlw	66
 25499  0054D0                     i2u1179_47:
 25500  0054D0  2EE8               	decfsz	wreg,f,c
 25501  0054D2  D7FE               	bra	i2u1179_47
 25502  0054D4  D000               	nop2	
 25503                           
 25504                           ;lcd.c: 37: data = data << 4;
 25505  0054D6  3802               	swapf	i2lcdNibble@data,w,c
 25506  0054D8  0BF0               	andlw	240
 25507  0054DA  6E02               	movwf	i2lcdNibble@data,c
 25508                           
 25509                           ;lcd.c: 39: temp = data & 0xF0;
 25510  0054DC  5002               	movf	i2lcdNibble@data,w,c
 25511  0054DE  0BF0               	andlw	240
 25512  0054E0  6E01               	movwf	i2lcdNibble@temp,c
 25513                           
 25514                           ;lcd.c: 40: LATD = LATD & 0x0F;
 25515  0054E2  508C               	movf	3980,w,c	;volatile
 25516  0054E4  0B0F               	andlw	15
 25517  0054E6  6E8C               	movwf	3980,c	;volatile
 25518                           
 25519                           ;lcd.c: 41: LATD = temp | LATD;
 25520  0054E8  5001               	movf	i2lcdNibble@temp,w,c
 25521  0054EA  108C               	iorwf	3980,w,c	;volatile
 25522  0054EC  6E8C               	movwf	3980,c	;volatile
 25523                           
 25524                           ;lcd.c: 43: LATDbits.LATD3 = 1;
 25525  0054EE  868C               	bsf	3980,3,c	;volatile
 25526                           
 25527                           ;lcd.c: 44: _delay((unsigned long)((25)*(32000000/4000000.0)));
 25528  0054F0  0E42               	movlw	66
 25529  0054F2                     i2u1180_47:
 25530  0054F2  2EE8               	decfsz	wreg,f,c
 25531  0054F4  D7FE               	bra	i2u1180_47
 25532  0054F6  D000               	nop2	
 25533                           
 25534                           ;lcd.c: 45: LATDbits.LATD3 = 0;
 25535  0054F8  968C               	bcf	3980,3,c	;volatile
 25536                           
 25537                           ;lcd.c: 46: _delay((unsigned long)((25)*(32000000/4000000.0)));
 25538  0054FA  0E42               	movlw	66
 25539  0054FC                     i2u1181_47:
 25540  0054FC  2EE8               	decfsz	wreg,f,c
 25541  0054FE  D7FE               	bra	i2u1181_47
 25542  005500  D000               	nop2	
 25543                           
 25544                           ;lcd.c: 47: (INTCONbits.GIE = 1);
 25545  005502  8EF2               	bsf	intcon,7,c	;volatile
 25546  005504  0012               	return		;funcret
 25547  005506                     __end_ofi2_lcdNibble:
 25548                           	opt stack 0
 25549                           pclatu	equ	0xFFB
 25550                           pclath	equ	0xFFA
 25551                           tblptru	equ	0xFF8
 25552                           tblptrh	equ	0xFF7
 25553                           tblptrl	equ	0xFF6
 25554                           tablat	equ	0xFF5
 25555                           prodh	equ	0xFF4
 25556                           prodl	equ	0xFF3
 25557                           intcon	equ	0xFF2
 25558                           intcon2	equ	0xFF1
 25559                           intcon3	equ	0xFF0
 25560                           indf0	equ	0xFEF
 25561                           postinc0	equ	0xFEE
 25562                           fsr0h	equ	0xFEA
 25563                           fsr0l	equ	0xFE9
 25564                           wreg	equ	0xFE8
 25565                           postdec1	equ	0xFE5
 25566                           fsr1h	equ	0xFE2
 25567                           fsr1l	equ	0xFE1
 25568                           indf2	equ	0xFDF
 25569                           postinc2	equ	0xFDE
 25570                           postdec2	equ	0xFDD
 25571                           fsr2h	equ	0xFDA
 25572                           fsr2l	equ	0xFD9
 25573                           status	equ	0xFD8
 25574                           
 25575 ;; *************** function i2_getRTC *****************
 25576 ;; Defined at:
 25577 ;;		line 44 in file "RTC.c"
 25578 ;; Parameters:    Size  Location     Type
 25579 ;;		None
 25580 ;; Auto vars:     Size  Location     Type
 25581 ;;  getRTC          2    3[COMRAM] int 
 25582 ;; Return value:  Size  Location     Type
 25583 ;;                  1    wreg      void 
 25584 ;; Registers used:
 25585 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 25586 ;; Tracked objects:
 25587 ;;		On entry : 0/0
 25588 ;;		On exit  : 0/0
 25589 ;;		Unchanged: 0/0
 25590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25591 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25592 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25593 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25594 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25595 ;;Total ram usage:        2 bytes
 25596 ;; Hardware stack levels used:    1
 25597 ;; Hardware stack levels required when called:    2
 25598 ;; This function calls:
 25599 ;;		i2_I2C_Master_Read
 25600 ;;		i2_I2C_Master_Start
 25601 ;;		i2_I2C_Master_Stop
 25602 ;;		i2_I2C_Master_Write
 25603 ;; This function is called by:
 25604 ;;		_printSortTimer
 25605 ;;		i2_printRTC
 25606 ;; This function uses a non-reentrant model
 25607 ;;
 25608                           
 25609                           	psect	text95
 25610  005174                     __ptext95:
 25611                           	opt stack 0
 25612  005174                     i2_getRTC:
 25613                           	opt stack 19
 25614                           
 25615                           ;RTC.c: 48: I2C_Master_Start();
 25616                           
 25617                           ;incstack = 0
 25618  005174  ECDF  F02E         	call	i2_I2C_Master_Start	;wreg free
 25619                           
 25620                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
 25621  005178  0E00               	movlw	0
 25622  00517A  6E03               	movwf	i2I2C_Master_Write@d+1,c
 25623  00517C  0ED0               	movlw	208
 25624  00517E  6E02               	movwf	i2I2C_Master_Write@d,c
 25625  005180  ECCA  F02E         	call	i2_I2C_Master_Write	;wreg free
 25626                           
 25627                           ;RTC.c: 50: I2C_Master_Write(0x00);
 25628  005184  0E00               	movlw	0
 25629  005186  6E03               	movwf	i2I2C_Master_Write@d+1,c
 25630  005188  0E00               	movlw	0
 25631  00518A  6E02               	movwf	i2I2C_Master_Write@d,c
 25632  00518C  ECCA  F02E         	call	i2_I2C_Master_Write	;wreg free
 25633                           
 25634                           ;RTC.c: 51: I2C_Master_Stop();
 25635  005190  ECDB  F02E         	call	i2_I2C_Master_Stop	;wreg free
 25636                           
 25637                           ;RTC.c: 54: I2C_Master_Start();
 25638  005194  ECDF  F02E         	call	i2_I2C_Master_Start	;wreg free
 25639                           
 25640                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
 25641  005198  0E00               	movlw	0
 25642  00519A  6E03               	movwf	i2I2C_Master_Write@d+1,c
 25643  00519C  0ED1               	movlw	209
 25644  00519E  6E02               	movwf	i2I2C_Master_Write@d,c
 25645  0051A0  ECCA  F02E         	call	i2_I2C_Master_Write	;wreg free
 25646                           
 25647                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
 25648  0051A4  0E00               	movlw	0
 25649  0051A6  6E05               	movwf	i2getRTC@i+1,c
 25650  0051A8  0E00               	movlw	0
 25651  0051AA  6E04               	movwf	i2getRTC@i,c
 25652  0051AC                     i2l6998:
 25653  0051AC  BE05               	btfsc	i2getRTC@i+1,7,c
 25654  0051AE  D006               	goto	i2l7002
 25655  0051B0  5005               	movf	i2getRTC@i+1,w,c
 25656  0051B2  E111               	bnz	i2l7008
 25657  0051B4  0E06               	movlw	6
 25658  0051B6  5C04               	subwf	i2getRTC@i,w,c
 25659  0051B8  B0D8               	btfsc	status,0,c
 25660  0051BA  D00D               	goto	i2l7008
 25661  0051BC                     i2l7002:
 25662                           
 25663                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
 25664  0051BC  0E1C               	movlw	low _time
 25665  0051BE  2404               	addwf	i2getRTC@i,w,c
 25666  0051C0  6ED9               	movwf	fsr2l,c
 25667  0051C2  0E01               	movlw	high _time
 25668  0051C4  2005               	addwfc	i2getRTC@i+1,w,c
 25669  0051C6  6EDA               	movwf	fsr2h,c
 25670  0051C8  0E01               	movlw	1
 25671  0051CA  EC02  F02E         	call	i2_I2C_Master_Read
 25672  0051CE  6EDF               	movwf	indf2,c
 25673  0051D0  4A04               	infsnz	i2getRTC@i,f,c
 25674  0051D2  2A05               	incf	i2getRTC@i+1,f,c
 25675  0051D4  D7EB               	goto	i2l6998
 25676  0051D6                     i2l7008:
 25677                           
 25678                           ;RTC.c: 58: }
 25679                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
 25680  0051D6  0E00               	movlw	0
 25681  0051D8  EC02  F02E         	call	i2_I2C_Master_Read
 25682  0051DC  0101               	movlb	1	; () banked
 25683  0051DE  6F22               	movwf	(_time+6)& (0+255),b
 25684                           
 25685                           ;RTC.c: 60: I2C_Master_Stop();
 25686  0051E0  ECDB  F02E         	call	i2_I2C_Master_Stop	;wreg free
 25687  0051E4  0012               	return		;funcret
 25688  0051E6                     __end_ofi2_getRTC:
 25689                           	opt stack 0
 25690                           pclatu	equ	0xFFB
 25691                           pclath	equ	0xFFA
 25692                           tblptru	equ	0xFF8
 25693                           tblptrh	equ	0xFF7
 25694                           tblptrl	equ	0xFF6
 25695                           tablat	equ	0xFF5
 25696                           prodh	equ	0xFF4
 25697                           prodl	equ	0xFF3
 25698                           intcon	equ	0xFF2
 25699                           intcon2	equ	0xFF1
 25700                           intcon3	equ	0xFF0
 25701                           indf0	equ	0xFEF
 25702                           postinc0	equ	0xFEE
 25703                           fsr0h	equ	0xFEA
 25704                           fsr0l	equ	0xFE9
 25705                           wreg	equ	0xFE8
 25706                           postdec1	equ	0xFE5
 25707                           fsr1h	equ	0xFE2
 25708                           fsr1l	equ	0xFE1
 25709                           indf2	equ	0xFDF
 25710                           postinc2	equ	0xFDE
 25711                           postdec2	equ	0xFDD
 25712                           fsr2h	equ	0xFDA
 25713                           fsr2l	equ	0xFD9
 25714                           status	equ	0xFD8
 25715                           
 25716 ;; *************** function i2_I2C_Master_Write *****************
 25717 ;; Defined at:
 25718 ;;		line 49 in file "I2C.c"
 25719 ;; Parameters:    Size  Location     Type
 25720 ;;  d               2    1[COMRAM] unsigned int 
 25721 ;; Auto vars:     Size  Location     Type
 25722 ;;		None
 25723 ;; Return value:  Size  Location     Type
 25724 ;;                  1    wreg      void 
 25725 ;; Registers used:
 25726 ;;		wreg, status,2, status,0, cstack
 25727 ;; Tracked objects:
 25728 ;;		On entry : 0/0
 25729 ;;		On exit  : 0/0
 25730 ;;		Unchanged: 0/0
 25731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25732 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25733 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25734 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25735 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25736 ;;Total ram usage:        2 bytes
 25737 ;; Hardware stack levels used:    1
 25738 ;; Hardware stack levels required when called:    1
 25739 ;; This function calls:
 25740 ;;		i2_I2C_Master_Wait
 25741 ;; This function is called by:
 25742 ;;		i2_getRTC
 25743 ;; This function uses a non-reentrant model
 25744 ;;
 25745                           
 25746                           	psect	text96
 25747  005D94                     __ptext96:
 25748                           	opt stack 0
 25749  005D94                     i2_I2C_Master_Write:
 25750                           	opt stack 19
 25751                           
 25752                           ;I2C.c: 51: I2C_Master_Wait();
 25753                           
 25754                           ;incstack = 0
 25755  005D94  ECA0  F02E         	call	i2_I2C_Master_Wait	;wreg free
 25756                           
 25757                           ;I2C.c: 52: SSPBUF = d;
 25758  005D98  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 25759  005D9C  0012               	return		;funcret
 25760  005D9E                     __end_ofi2_I2C_Master_Write:
 25761                           	opt stack 0
 25762                           pclatu	equ	0xFFB
 25763                           pclath	equ	0xFFA
 25764                           tblptru	equ	0xFF8
 25765                           tblptrh	equ	0xFF7
 25766                           tblptrl	equ	0xFF6
 25767                           tablat	equ	0xFF5
 25768                           prodh	equ	0xFF4
 25769                           prodl	equ	0xFF3
 25770                           intcon	equ	0xFF2
 25771                           intcon2	equ	0xFF1
 25772                           intcon3	equ	0xFF0
 25773                           indf0	equ	0xFEF
 25774                           postinc0	equ	0xFEE
 25775                           fsr0h	equ	0xFEA
 25776                           fsr0l	equ	0xFE9
 25777                           wreg	equ	0xFE8
 25778                           postdec1	equ	0xFE5
 25779                           fsr1h	equ	0xFE2
 25780                           fsr1l	equ	0xFE1
 25781                           indf2	equ	0xFDF
 25782                           postinc2	equ	0xFDE
 25783                           postdec2	equ	0xFDD
 25784                           fsr2h	equ	0xFDA
 25785                           fsr2l	equ	0xFD9
 25786                           status	equ	0xFD8
 25787                           
 25788 ;; *************** function i2_I2C_Master_Stop *****************
 25789 ;; Defined at:
 25790 ;;		line 43 in file "I2C.c"
 25791 ;; Parameters:    Size  Location     Type
 25792 ;;		None
 25793 ;; Auto vars:     Size  Location     Type
 25794 ;;		None
 25795 ;; Return value:  Size  Location     Type
 25796 ;;                  1    wreg      void 
 25797 ;; Registers used:
 25798 ;;		wreg, status,2, status,0, cstack
 25799 ;; Tracked objects:
 25800 ;;		On entry : 0/0
 25801 ;;		On exit  : 0/0
 25802 ;;		Unchanged: 0/0
 25803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25804 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25805 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25806 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25807 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25808 ;;Total ram usage:        0 bytes
 25809 ;; Hardware stack levels used:    1
 25810 ;; Hardware stack levels required when called:    1
 25811 ;; This function calls:
 25812 ;;		i2_I2C_Master_Wait
 25813 ;; This function is called by:
 25814 ;;		i2_getRTC
 25815 ;; This function uses a non-reentrant model
 25816 ;;
 25817                           
 25818                           	psect	text97
 25819  005DB6                     __ptext97:
 25820                           	opt stack 0
 25821  005DB6                     i2_I2C_Master_Stop:
 25822                           	opt stack 19
 25823                           
 25824                           ;I2C.c: 45: I2C_Master_Wait();
 25825                           
 25826                           ;incstack = 0
 25827  005DB6  ECA0  F02E         	call	i2_I2C_Master_Wait	;wreg free
 25828                           
 25829                           ;I2C.c: 46: PEN = 1;
 25830  005DBA  84C5               	bsf	4037,2,c	;volatile
 25831  005DBC  0012               	return		;funcret
 25832  005DBE                     __end_ofi2_I2C_Master_Stop:
 25833                           	opt stack 0
 25834                           pclatu	equ	0xFFB
 25835                           pclath	equ	0xFFA
 25836                           tblptru	equ	0xFF8
 25837                           tblptrh	equ	0xFF7
 25838                           tblptrl	equ	0xFF6
 25839                           tablat	equ	0xFF5
 25840                           prodh	equ	0xFF4
 25841                           prodl	equ	0xFF3
 25842                           intcon	equ	0xFF2
 25843                           intcon2	equ	0xFF1
 25844                           intcon3	equ	0xFF0
 25845                           indf0	equ	0xFEF
 25846                           postinc0	equ	0xFEE
 25847                           fsr0h	equ	0xFEA
 25848                           fsr0l	equ	0xFE9
 25849                           wreg	equ	0xFE8
 25850                           postdec1	equ	0xFE5
 25851                           fsr1h	equ	0xFE2
 25852                           fsr1l	equ	0xFE1
 25853                           indf2	equ	0xFDF
 25854                           postinc2	equ	0xFDE
 25855                           postdec2	equ	0xFDD
 25856                           fsr2h	equ	0xFDA
 25857                           fsr2l	equ	0xFD9
 25858                           status	equ	0xFD8
 25859                           
 25860 ;; *************** function i2_I2C_Master_Start *****************
 25861 ;; Defined at:
 25862 ;;		line 31 in file "I2C.c"
 25863 ;; Parameters:    Size  Location     Type
 25864 ;;		None
 25865 ;; Auto vars:     Size  Location     Type
 25866 ;;		None
 25867 ;; Return value:  Size  Location     Type
 25868 ;;                  1    wreg      void 
 25869 ;; Registers used:
 25870 ;;		wreg, status,2, status,0, cstack
 25871 ;; Tracked objects:
 25872 ;;		On entry : 0/0
 25873 ;;		On exit  : 0/0
 25874 ;;		Unchanged: 0/0
 25875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25876 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25877 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25878 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25879 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25880 ;;Total ram usage:        0 bytes
 25881 ;; Hardware stack levels used:    1
 25882 ;; Hardware stack levels required when called:    1
 25883 ;; This function calls:
 25884 ;;		i2_I2C_Master_Wait
 25885 ;; This function is called by:
 25886 ;;		i2_getRTC
 25887 ;; This function uses a non-reentrant model
 25888 ;;
 25889                           
 25890                           	psect	text98
 25891  005DBE                     __ptext98:
 25892                           	opt stack 0
 25893  005DBE                     i2_I2C_Master_Start:
 25894                           	opt stack 19
 25895                           
 25896                           ;I2C.c: 33: I2C_Master_Wait();
 25897                           
 25898                           ;incstack = 0
 25899  005DBE  ECA0  F02E         	call	i2_I2C_Master_Wait	;wreg free
 25900                           
 25901                           ;I2C.c: 34: SEN = 1;
 25902  005DC2  80C5               	bsf	4037,0,c	;volatile
 25903  005DC4  0012               	return		;funcret
 25904  005DC6                     __end_ofi2_I2C_Master_Start:
 25905                           	opt stack 0
 25906                           pclatu	equ	0xFFB
 25907                           pclath	equ	0xFFA
 25908                           tblptru	equ	0xFF8
 25909                           tblptrh	equ	0xFF7
 25910                           tblptrl	equ	0xFF6
 25911                           tablat	equ	0xFF5
 25912                           prodh	equ	0xFF4
 25913                           prodl	equ	0xFF3
 25914                           intcon	equ	0xFF2
 25915                           intcon2	equ	0xFF1
 25916                           intcon3	equ	0xFF0
 25917                           indf0	equ	0xFEF
 25918                           postinc0	equ	0xFEE
 25919                           fsr0h	equ	0xFEA
 25920                           fsr0l	equ	0xFE9
 25921                           wreg	equ	0xFE8
 25922                           postdec1	equ	0xFE5
 25923                           fsr1h	equ	0xFE2
 25924                           fsr1l	equ	0xFE1
 25925                           indf2	equ	0xFDF
 25926                           postinc2	equ	0xFDE
 25927                           postdec2	equ	0xFDD
 25928                           fsr2h	equ	0xFDA
 25929                           fsr2l	equ	0xFD9
 25930                           status	equ	0xFD8
 25931                           
 25932 ;; *************** function i2_I2C_Master_Read *****************
 25933 ;; Defined at:
 25934 ;;		line 55 in file "I2C.c"
 25935 ;; Parameters:    Size  Location     Type
 25936 ;;  a               1    wreg     unsigned char 
 25937 ;; Auto vars:     Size  Location     Type
 25938 ;;  a               1    1[COMRAM] unsigned char 
 25939 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 25940 ;; Return value:  Size  Location     Type
 25941 ;;                  1    wreg      unsigned char 
 25942 ;; Registers used:
 25943 ;;		wreg, status,2, status,0, cstack
 25944 ;; Tracked objects:
 25945 ;;		On entry : 0/0
 25946 ;;		On exit  : 0/0
 25947 ;;		Unchanged: 0/0
 25948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25949 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25950 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25951 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25952 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25953 ;;Total ram usage:        2 bytes
 25954 ;; Hardware stack levels used:    1
 25955 ;; Hardware stack levels required when called:    1
 25956 ;; This function calls:
 25957 ;;		i2_I2C_Master_Wait
 25958 ;; This function is called by:
 25959 ;;		i2_getRTC
 25960 ;; This function uses a non-reentrant model
 25961 ;;
 25962                           
 25963                           	psect	text99
 25964  005C04                     __ptext99:
 25965                           	opt stack 0
 25966  005C04                     i2_I2C_Master_Read:
 25967                           	opt stack 19
 25968                           
 25969                           ;incstack = 0
 25970                           ;i2I2C_Master_Read@a stored from wreg
 25971  005C04  6E02               	movwf	i2I2C_Master_Read@a,c
 25972                           
 25973                           ;I2C.c: 57: unsigned char temp;
 25974                           ;I2C.c: 58: I2C_Master_Wait();
 25975  005C06  ECA0  F02E         	call	i2_I2C_Master_Wait	;wreg free
 25976                           
 25977                           ;I2C.c: 59: RCEN = 1;
 25978  005C0A  86C5               	bsf	4037,3,c	;volatile
 25979                           
 25980                           ;I2C.c: 60: I2C_Master_Wait();
 25981  005C0C  ECA0  F02E         	call	i2_I2C_Master_Wait	;wreg free
 25982                           
 25983                           ;I2C.c: 61: temp = SSPBUF;
 25984  005C10  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 25985                           
 25986                           ;I2C.c: 62: I2C_Master_Wait();
 25987  005C14  ECA0  F02E         	call	i2_I2C_Master_Wait	;wreg free
 25988                           
 25989                           ;I2C.c: 63: ACKDT = (a)?0:1;
 25990  005C18  5002               	movf	i2I2C_Master_Read@a,w,c
 25991  005C1A  A4D8               	btfss	status,2,c
 25992  005C1C  D002               	goto	i2u525_40
 25993  005C1E  8AC5               	bsf	4037,5,c	;volatile
 25994  005C20  D001               	goto	i2l6666
 25995  005C22                     i2u525_40:
 25996  005C22  9AC5               	bcf	4037,5,c	;volatile
 25997  005C24                     i2l6666:
 25998                           
 25999                           ;I2C.c: 64: ACKEN = 1;
 26000  005C24  88C5               	bsf	4037,4,c	;volatile
 26001                           
 26002                           ;I2C.c: 65: return temp;
 26003  005C26  5003               	movf	i2I2C_Master_Read@temp,w,c
 26004  005C28  0012               	return	
 26005  005C2A                     __end_ofi2_I2C_Master_Read:
 26006                           	opt stack 0
 26007                           pclatu	equ	0xFFB
 26008                           pclath	equ	0xFFA
 26009                           tblptru	equ	0xFF8
 26010                           tblptrh	equ	0xFF7
 26011                           tblptrl	equ	0xFF6
 26012                           tablat	equ	0xFF5
 26013                           prodh	equ	0xFF4
 26014                           prodl	equ	0xFF3
 26015                           intcon	equ	0xFF2
 26016                           intcon2	equ	0xFF1
 26017                           intcon3	equ	0xFF0
 26018                           indf0	equ	0xFEF
 26019                           postinc0	equ	0xFEE
 26020                           fsr0h	equ	0xFEA
 26021                           fsr0l	equ	0xFE9
 26022                           wreg	equ	0xFE8
 26023                           postdec1	equ	0xFE5
 26024                           fsr1h	equ	0xFE2
 26025                           fsr1l	equ	0xFE1
 26026                           indf2	equ	0xFDF
 26027                           postinc2	equ	0xFDE
 26028                           postdec2	equ	0xFDD
 26029                           fsr2h	equ	0xFDA
 26030                           fsr2l	equ	0xFD9
 26031                           status	equ	0xFD8
 26032                           
 26033 ;; *************** function i2_I2C_Master_Wait *****************
 26034 ;; Defined at:
 26035 ;;		line 26 in file "I2C.c"
 26036 ;; Parameters:    Size  Location     Type
 26037 ;;		None
 26038 ;; Auto vars:     Size  Location     Type
 26039 ;;		None
 26040 ;; Return value:  Size  Location     Type
 26041 ;;                  1    wreg      void 
 26042 ;; Registers used:
 26043 ;;		wreg, status,2, status,0
 26044 ;; Tracked objects:
 26045 ;;		On entry : 0/0
 26046 ;;		On exit  : 0/0
 26047 ;;		Unchanged: 0/0
 26048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26049 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26050 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26051 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26052 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26053 ;;Total ram usage:        1 bytes
 26054 ;; Hardware stack levels used:    1
 26055 ;; This function calls:
 26056 ;;		Nothing
 26057 ;; This function is called by:
 26058 ;;		i2_I2C_Master_Start
 26059 ;;		i2_I2C_Master_Stop
 26060 ;;		i2_I2C_Master_Write
 26061 ;;		i2_I2C_Master_Read
 26062 ;; This function uses a non-reentrant model
 26063 ;;
 26064                           
 26065                           	psect	text100
 26066  005D40                     __ptext100:
 26067                           	opt stack 0
 26068  005D40                     i2_I2C_Master_Wait:
 26069                           	opt stack 19
 26070  005D40                     i2l71:
 26071  005D40  B4C7               	btfsc	4039,2,c	;volatile
 26072  005D42  D7FE               	goto	i2l71
 26073  005D44  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 26074  005D48  0E1F               	movlw	31
 26075  005D4A  1601               	andwf	??i2_I2C_Master_Wait,f,c
 26076  005D4C  B4D8               	btfsc	status,2,c
 26077  005D4E  0012               	return	
 26078  005D50  D7F7               	goto	i2l71
 26079  005D52                     __end_ofi2_I2C_Master_Wait:
 26080                           	opt stack 0
 26081                           pclatu	equ	0xFFB
 26082                           pclath	equ	0xFFA
 26083                           tblptru	equ	0xFF8
 26084                           tblptrh	equ	0xFF7
 26085                           tblptrl	equ	0xFF6
 26086                           tablat	equ	0xFF5
 26087                           prodh	equ	0xFF4
 26088                           prodl	equ	0xFF3
 26089                           intcon	equ	0xFF2
 26090                           intcon2	equ	0xFF1
 26091                           intcon3	equ	0xFF0
 26092                           indf0	equ	0xFEF
 26093                           postinc0	equ	0xFEE
 26094                           fsr0h	equ	0xFEA
 26095                           fsr0l	equ	0xFE9
 26096                           wreg	equ	0xFE8
 26097                           postdec1	equ	0xFE5
 26098                           fsr1h	equ	0xFE2
 26099                           fsr1l	equ	0xFE1
 26100                           indf2	equ	0xFDF
 26101                           postinc2	equ	0xFDE
 26102                           postdec2	equ	0xFDD
 26103                           fsr2h	equ	0xFDA
 26104                           fsr2l	equ	0xFD9
 26105                           status	equ	0xFD8
 26106                           
 26107 ;; *************** function i2_delay_ms *****************
 26108 ;; Defined at:
 26109 ;;		line 706 in file "sort.c"
 26110 ;; Parameters:    Size  Location     Type
 26111 ;;  milliseconds    1    wreg     unsigned char 
 26112 ;; Auto vars:     Size  Location     Type
 26113 ;;  milliseconds    1    1[COMRAM] unsigned char 
 26114 ;; Return value:  Size  Location     Type
 26115 ;;                  1    wreg      void 
 26116 ;; Registers used:
 26117 ;;		wreg, status,2, status,0, cstack
 26118 ;; Tracked objects:
 26119 ;;		On entry : 0/0
 26120 ;;		On exit  : 0/0
 26121 ;;		Unchanged: 0/0
 26122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26123 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26124 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26125 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26126 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26127 ;;Total ram usage:        2 bytes
 26128 ;; Hardware stack levels used:    1
 26129 ;; This function calls:
 26130 ;;		Nothing
 26131 ;; This function is called by:
 26132 ;;		_printSortTimer
 26133 ;; This function uses a non-reentrant model
 26134 ;;
 26135                           
 26136                           	psect	text101
 26137  005CCC                     __ptext101:
 26138                           	opt stack 0
 26139  005CCC                     i2_delay_ms:
 26140                           	opt stack 22
 26141                           
 26142                           ;incstack = 0
 26143                           ;i2delay_ms@milliseconds stored from wreg
 26144  005CCC  6E02               	movwf	i2delay_ms@milliseconds,c
 26145                           
 26146                           ;sort.c: 707: while(milliseconds > 0)
 26147  005CCE  D008               	goto	i2l9294
 26148  005CD0                     i2l9290:
 26149                           
 26150                           ;sort.c: 708: {
 26151                           ;sort.c: 709: milliseconds--;
 26152  005CD0  0602               	decf	i2delay_ms@milliseconds,f,c
 26153                           
 26154                           ;sort.c: 710: _delay((unsigned long)((990)*(32000000/4000000.0)));
 26155  005CD2  0E0B               	movlw	11
 26156  005CD4  6E01               	movwf	??i2_delay_ms& (0+255),c
 26157  005CD6  0E48               	movlw	72
 26158  005CD8                     i2u1182_47:
 26159  005CD8  2EE8               	decfsz	wreg,f,c
 26160  005CDA  D7FE               	bra	i2u1182_47
 26161  005CDC  2E01               	decfsz	??i2_delay_ms& (0+255),f,c
 26162  005CDE  D7FC               	bra	i2u1182_47
 26163  005CE0                     i2l9294:
 26164  005CE0  5002               	movf	i2delay_ms@milliseconds,w,c
 26165  005CE2  B4D8               	btfsc	status,2,c
 26166  005CE4  0012               	return	
 26167  005CE6  D7F4               	goto	i2l9290
 26168  005CE8                     __end_ofi2_delay_ms:
 26169                           	opt stack 0
 26170                           pclatu	equ	0xFFB
 26171                           pclath	equ	0xFFA
 26172                           tblptru	equ	0xFF8
 26173                           tblptrh	equ	0xFF7
 26174                           tblptrl	equ	0xFF6
 26175                           tablat	equ	0xFF5
 26176                           prodh	equ	0xFF4
 26177                           prodl	equ	0xFF3
 26178                           intcon	equ	0xFF2
 26179                           intcon2	equ	0xFF1
 26180                           intcon3	equ	0xFF0
 26181                           indf0	equ	0xFEF
 26182                           postinc0	equ	0xFEE
 26183                           fsr0h	equ	0xFEA
 26184                           fsr0l	equ	0xFE9
 26185                           wreg	equ	0xFE8
 26186                           postdec1	equ	0xFE5
 26187                           fsr1h	equ	0xFE2
 26188                           fsr1l	equ	0xFE1
 26189                           indf2	equ	0xFDF
 26190                           postinc2	equ	0xFDE
 26191                           postdec2	equ	0xFDD
 26192                           fsr2h	equ	0xFDA
 26193                           fsr2l	equ	0xFD9
 26194                           status	equ	0xFD8
 26195                           
 26196 ;; *************** function i2___awmod *****************
 26197 ;; Defined at:
 26198 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
 26199 ;; Parameters:    Size  Location     Type
 26200 ;;  dividend        2    0[COMRAM] int 
 26201 ;;  divisor         2    2[COMRAM] int 
 26202 ;; Auto vars:     Size  Location     Type
 26203 ;;  __awmod         1    5[COMRAM] unsigned char 
 26204 ;;  __awmod         1    4[COMRAM] unsigned char 
 26205 ;; Return value:  Size  Location     Type
 26206 ;;                  2    0[COMRAM] int 
 26207 ;; Registers used:
 26208 ;;		wreg, status,2, status,0
 26209 ;; Tracked objects:
 26210 ;;		On entry : 0/0
 26211 ;;		On exit  : 0/0
 26212 ;;		Unchanged: 0/0
 26213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26214 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26215 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26216 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26217 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26218 ;;Total ram usage:        6 bytes
 26219 ;; Hardware stack levels used:    1
 26220 ;; This function calls:
 26221 ;;		Nothing
 26222 ;; This function is called by:
 26223 ;;		_printSortTimer
 26224 ;; This function uses a non-reentrant model
 26225 ;;
 26226                           
 26227                           	psect	text102
 26228  0051E6                     __ptext102:
 26229                           	opt stack 0
 26230  0051E6                     i2___awmod:
 26231                           	opt stack 22
 26232                           
 26233                           ;incstack = 0
 26234  0051E6  0E00               	movlw	0
 26235  0051E8  6E06               	movwf	i2___awmod@sign,c
 26236  0051EA  AE02               	btfss	i2___awmod@dividend+1,7,c
 26237  0051EC  D006               	goto	i2l9304
 26238  0051EE  6C01               	negf	i2___awmod@dividend,c
 26239  0051F0  1E02               	comf	i2___awmod@dividend+1,f,c
 26240  0051F2  B0D8               	btfsc	status,0,c
 26241  0051F4  2A02               	incf	i2___awmod@dividend+1,f,c
 26242  0051F6  0E01               	movlw	1
 26243  0051F8  6E06               	movwf	i2___awmod@sign,c
 26244  0051FA                     i2l9304:
 26245  0051FA  AE04               	btfss	i2___awmod@divisor+1,7,c
 26246  0051FC  D004               	goto	i2l9308
 26247  0051FE  6C03               	negf	i2___awmod@divisor,c
 26248  005200  1E04               	comf	i2___awmod@divisor+1,f,c
 26249  005202  B0D8               	btfsc	status,0,c
 26250  005204  2A04               	incf	i2___awmod@divisor+1,f,c
 26251  005206                     i2l9308:
 26252  005206  5003               	movf	i2___awmod@divisor,w,c
 26253  005208  1004               	iorwf	i2___awmod@divisor+1,w,c
 26254  00520A  B4D8               	btfsc	status,2,c
 26255  00520C  D018               	goto	i2l9324
 26256  00520E  0E01               	movlw	1
 26257  005210  6E05               	movwf	i2___awmod@counter,c
 26258  005212  D004               	goto	i2l9314
 26259  005214                     i2l9312:
 26260  005214  90D8               	bcf	status,0,c
 26261  005216  3603               	rlcf	i2___awmod@divisor,f,c
 26262  005218  3604               	rlcf	i2___awmod@divisor+1,f,c
 26263  00521A  2A05               	incf	i2___awmod@counter,f,c
 26264  00521C                     i2l9314:
 26265  00521C  AE04               	btfss	i2___awmod@divisor+1,7,c
 26266  00521E  D7FA               	goto	i2l9312
 26267  005220                     i2l9316:
 26268  005220  5003               	movf	i2___awmod@divisor,w,c
 26269  005222  5C01               	subwf	i2___awmod@dividend,w,c
 26270  005224  5004               	movf	i2___awmod@divisor+1,w,c
 26271  005226  5802               	subwfb	i2___awmod@dividend+1,w,c
 26272  005228  A0D8               	btfss	status,0,c
 26273  00522A  D004               	goto	i2l9320
 26274  00522C  5003               	movf	i2___awmod@divisor,w,c
 26275  00522E  5E01               	subwf	i2___awmod@dividend,f,c
 26276  005230  5004               	movf	i2___awmod@divisor+1,w,c
 26277  005232  5A02               	subwfb	i2___awmod@dividend+1,f,c
 26278  005234                     i2l9320:
 26279  005234  90D8               	bcf	status,0,c
 26280  005236  3204               	rrcf	i2___awmod@divisor+1,f,c
 26281  005238  3203               	rrcf	i2___awmod@divisor,f,c
 26282  00523A  2E05               	decfsz	i2___awmod@counter,f,c
 26283  00523C  D7F1               	goto	i2l9316
 26284  00523E                     i2l9324:
 26285  00523E  5006               	movf	i2___awmod@sign,w,c
 26286  005240  B4D8               	btfsc	status,2,c
 26287  005242  D004               	goto	i2l9328
 26288  005244  6C01               	negf	i2___awmod@dividend,c
 26289  005246  1E02               	comf	i2___awmod@dividend+1,f,c
 26290  005248  B0D8               	btfsc	status,0,c
 26291  00524A  2A02               	incf	i2___awmod@dividend+1,f,c
 26292  00524C                     i2l9328:
 26293  00524C  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
 26294  005250  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
 26295  005254  0012               	return	
 26296  005256                     __end_ofi2___awmod:
 26297                           	opt stack 0
 26298                           pclatu	equ	0xFFB
 26299                           pclath	equ	0xFFA
 26300                           tblptru	equ	0xFF8
 26301                           tblptrh	equ	0xFF7
 26302                           tblptrl	equ	0xFF6
 26303                           tablat	equ	0xFF5
 26304                           prodh	equ	0xFF4
 26305                           prodl	equ	0xFF3
 26306                           intcon	equ	0xFF2
 26307                           intcon2	equ	0xFF1
 26308                           intcon3	equ	0xFF0
 26309                           indf0	equ	0xFEF
 26310                           postinc0	equ	0xFEE
 26311                           fsr0h	equ	0xFEA
 26312                           fsr0l	equ	0xFE9
 26313                           wreg	equ	0xFE8
 26314                           postdec1	equ	0xFE5
 26315                           fsr1h	equ	0xFE2
 26316                           fsr1l	equ	0xFE1
 26317                           indf2	equ	0xFDF
 26318                           postinc2	equ	0xFDE
 26319                           postdec2	equ	0xFDD
 26320                           fsr2h	equ	0xFDA
 26321                           fsr2l	equ	0xFD9
 26322                           status	equ	0xFD8
 26323                           pclatu	equ	0xFFB
 26324                           pclath	equ	0xFFA
 26325                           tblptru	equ	0xFF8
 26326                           tblptrh	equ	0xFF7
 26327                           tblptrl	equ	0xFF6
 26328                           tablat	equ	0xFF5
 26329                           prodh	equ	0xFF4
 26330                           prodl	equ	0xFF3
 26331                           intcon	equ	0xFF2
 26332                           intcon2	equ	0xFF1
 26333                           intcon3	equ	0xFF0
 26334                           indf0	equ	0xFEF
 26335                           postinc0	equ	0xFEE
 26336                           fsr0h	equ	0xFEA
 26337                           fsr0l	equ	0xFE9
 26338                           wreg	equ	0xFE8
 26339                           postdec1	equ	0xFE5
 26340                           fsr1h	equ	0xFE2
 26341                           fsr1l	equ	0xFE1
 26342                           indf2	equ	0xFDF
 26343                           postinc2	equ	0xFDE
 26344                           postdec2	equ	0xFDD
 26345                           fsr2h	equ	0xFDA
 26346                           fsr2l	equ	0xFD9
 26347                           status	equ	0xFD8
 26348                           
 26349                           	psect	rparam
 26350  0000                     pclatu	equ	0xFFB
 26351                           pclath	equ	0xFFA
 26352                           tblptru	equ	0xFF8
 26353                           tblptrh	equ	0xFF7
 26354                           tblptrl	equ	0xFF6
 26355                           tablat	equ	0xFF5
 26356                           prodh	equ	0xFF4
 26357                           prodl	equ	0xFF3
 26358                           intcon	equ	0xFF2
 26359                           intcon2	equ	0xFF1
 26360                           intcon3	equ	0xFF0
 26361                           indf0	equ	0xFEF
 26362                           postinc0	equ	0xFEE
 26363                           fsr0h	equ	0xFEA
 26364                           fsr0l	equ	0xFE9
 26365                           wreg	equ	0xFE8
 26366                           postdec1	equ	0xFE5
 26367                           fsr1h	equ	0xFE2
 26368                           fsr1l	equ	0xFE1
 26369                           indf2	equ	0xFDF
 26370                           postinc2	equ	0xFDE
 26371                           postdec2	equ	0xFDD
 26372                           fsr2h	equ	0xFDA
 26373                           fsr2l	equ	0xFD9
 26374                           status	equ	0xFD8
 26375                           
 26376                           	psect	temp
 26377  00007E                     btemp:
 26378                           	opt stack 0
 26379  00007E                     	ds	1
 26380  0000                     int$flags	set	btemp
 26381                           pclatu	equ	0xFFB
 26382                           pclath	equ	0xFFA
 26383                           tblptru	equ	0xFF8
 26384                           tblptrh	equ	0xFF7
 26385                           tblptrl	equ	0xFF6
 26386                           tablat	equ	0xFF5
 26387                           prodh	equ	0xFF4
 26388                           prodl	equ	0xFF3
 26389                           intcon	equ	0xFF2
 26390                           intcon2	equ	0xFF1
 26391                           intcon3	equ	0xFF0
 26392                           indf0	equ	0xFEF
 26393                           postinc0	equ	0xFEE
 26394                           fsr0h	equ	0xFEA
 26395                           fsr0l	equ	0xFE9
 26396                           wreg	equ	0xFE8
 26397                           postdec1	equ	0xFE5
 26398                           fsr1h	equ	0xFE2
 26399                           fsr1l	equ	0xFE1
 26400                           indf2	equ	0xFDF
 26401                           postinc2	equ	0xFDE
 26402                           postdec2	equ	0xFDD
 26403                           fsr2h	equ	0xFDA
 26404                           fsr2l	equ	0xFD9
 26405                           status	equ	0xFD8


Data Sizes:
    Strings     1332
    Constant    27
    Data        8
    BSS         150
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     90     125
    BANK0           128     90     128
    BANK1           256      0      85
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_62(CODE[4]), STR_61(CODE[4]), STR_60(CODE[4]), STR_59(CODE[4]), 
		 -> STR_58(CODE[4]), STR_57(CODE[4]), STR_56(CODE[4]), STR_55(CODE[4]), 
		 -> STR_54(CODE[4]), STR_53(CODE[4]), STR_52(CODE[4]), STR_51(CODE[4]), 
		 -> STR_20(CODE[4]), STR_19(CODE[4]), STR_18(CODE[4]), STR_17(CODE[4]), 
		 -> STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[4]), STR_13(CODE[4]), 
		 -> STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[4]), 
		 -> STR_8(CODE[4]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_128(CODE[7]), count_total(BANK0[2]), printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_127(CODE[18]), STR_126(CODE[18]), STR_125(CODE[17]), STR_124(CODE[17]), 
		 -> STR_123(CODE[15]), STR_122(CODE[15]), STR_121(CODE[18]), STR_120(CODE[15]), 
		 -> STR_119(CODE[18]), STR_118(CODE[18]), STR_117(CODE[17]), STR_116(CODE[17]), 
		 -> STR_115(CODE[17]), STR_114(CODE[17]), STR_113(CODE[17]), STR_112(CODE[17]), 
		 -> STR_111(CODE[18]), STR_110(CODE[17]), STR_109(CODE[15]), STR_108(CODE[15]), 
		 -> STR_107(CODE[15]), STR_106(CODE[17]), STR_105(CODE[17]), STR_104(CODE[17]), 
		 -> STR_103(CODE[16]), STR_102(CODE[17]), STR_101(CODE[17]), STR_100(CODE[17]), 
		 -> STR_99(CODE[17]), STR_98(CODE[17]), STR_97(CODE[17]), STR_96(CODE[15]), 
		 -> STR_95(CODE[11]), STR_94(CODE[17]), STR_93(CODE[11]), STR_92(CODE[17]), 
		 -> STR_91(CODE[14]), STR_90(CODE[15]), STR_89(CODE[14]), STR_88(CODE[10]), 
		 -> STR_87(CODE[9]), STR_86(CODE[9]), STR_85(CODE[10]), STR_84(CODE[10]), 
		 -> STR_83(CODE[16]), STR_82(CODE[15]), STR_81(CODE[3]), STR_80(CODE[15]), 
		 -> STR_79(CODE[13]), STR_78(CODE[14]), STR_77(CODE[8]), STR_76(CODE[14]), 
		 -> STR_75(CODE[15]), STR_74(CODE[12]), STR_73(CODE[14]), STR_72(CODE[17]), 
		 -> STR_71(CODE[14]), STR_70(CODE[15]), STR_69(CODE[17]), STR_68(CODE[17]), 
		 -> STR_67(CODE[7]), STR_66(CODE[21]), STR_65(CODE[16]), STR_64(CODE[16]), 
		 -> STR_63(CODE[24]), STR_50(CODE[17]), STR_49(CODE[17]), STR_48(CODE[17]), 
		 -> STR_47(CODE[17]), STR_46(CODE[17]), STR_45(CODE[17]), STR_44(CODE[17]), 
		 -> STR_43(CODE[17]), STR_42(CODE[17]), STR_41(CODE[17]), STR_40(CODE[17]), 
		 -> STR_39(CODE[17]), STR_38(CODE[17]), STR_37(CODE[17]), STR_36(CODE[17]), 
		 -> STR_35(CODE[17]), STR_34(CODE[17]), STR_33(CODE[17]), STR_32(CODE[17]), 
		 -> STR_31(CODE[17]), STR_30(CODE[17]), STR_29(CODE[3]), STR_28(CODE[17]), 
		 -> STR_27(CODE[17]), STR_26(CODE[17]), STR_25(CODE[17]), STR_24(CODE[17]), 
		 -> STR_23(CODE[14]), STR_22(CODE[10]), STR_21(CODE[24]), STR_7(CODE[7]), 
		 -> STR_6(CODE[17]), STR_5(CODE[18]), STR_4(CODE[16]), STR_3(CODE[18]), 
		 -> STR_2(CODE[14]), STR_1(CODE[18]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _handler in COMRAM

    _handler->_printSortTimer
    _updateServoStates->i2_updateServoPosition
    i2_change_state_to_menu_start->i2_printRTC
    i2_printRTC->i2_printf
    i2_change_state_to_menu_22->i2_printf
    i2_change_state_to_menu_12->i2_printf
    _change_state_to_menu_23->i2_printf
    _change_state_to_menu_11->i2_printf
    _change_state_to_logs_34->i2_printf
    _change_state_to_logs_33->i2_printf
    _change_state_to_logs_23->i2_printf
    _change_state_to_logs_22->i2_printf
    _change_state_to_logs_12->i2_printf
    _change_state_to_logs_11->i2_printf
    _dispLogs->_retrieveLog
    _retrieveLog->i2___wmul
    _printSortTimer->i2_printf
    i2_printf->i2___lwdiv
    i2_putch->i2_lcdNibble
    i2___lwdiv->i2___lwmod
    i2_lcdInst->i2_lcdNibble
    i2_getRTC->i2_I2C_Master_Read
    i2_getRTC->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_UI
    _sort->_Loading
    _Loading->_EEPROM_write
    _initSortTimer->_getRTC
    _getMAG->_readMAG
    _getIR->_readIR
    _readIR->_readADC
    _ID->___ftge
    _readCOND->_readADC
    ___ftge->___awtoft
    ___awtoft->___awdiv
    _Distribution->_updateServoPosition
    _logRun->_EEPROM_write
    _loadRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _change_state_to_menu_start->_printRTC
    _initLCD->_lcdInst
    _initEEPROM->_EEPROM_write
    _EEPROM_write->_printf
    _UI->_printRTC
    _printRTC->_printf
    _getRTC->_I2C_Master_Read
    _getRTC->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _change_state_to_menu_22->_printf
    _change_state_to_menu_12->_printf
    ___awdiv->___awmod
    _Test->_actuatorTest
    _sensorTest->_printf
    _readMAG->_readADC
    _arm->_printf
    _algorithmTest->_printf
    _actuatorTest->_printf
    _SpeedTest->_printf
    _PortTestPusher->_printf
    _PortTestDC->_printf
    _PlatformTest->_printf
    _BothServos->_printf
    _initServos->_updateServoPosition
    _BlockerTest->_printf
    _printf->___awdiv
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble

Critical Paths under _handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  239061
                    _I2C_Master_Init
                               _Test
                                 _UI
                         _initEEPROM
                            _initLCD
                           _initTime
                             _initUI
                             _logRun
                      _machineConfig
                               _sort
                        _stopSignals
 ---------------------------------------------------------------------------------
 (1) _sort                                                 0     0      0   28563
                       _Distribution
                                 _ID
                            _Loading
 ---------------------------------------------------------------------------------
 (2) _Loading                                             19    19      0   18150
                                             49 BANK0     19    19      0
                        _EEPROM_read
                       _EEPROM_write
                           _delay_ms
                              _getIR
                             _getMAG
                     _initGlobalVars
                         _initServos
                      _initSortTimer
                            _lcdInst
                             _readIR
 ---------------------------------------------------------------------------------
 (3) _initSortTimer                                        5     5      0     631
                                              5 BANK0      5     5      0
                             _getRTC
 ---------------------------------------------------------------------------------
 (3) _initGlobalVars                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _getMAG                                               2     2      0      45
                                              6 BANK0      2     2      0
                            _readMAG
 ---------------------------------------------------------------------------------
 (3) _getIR                                                3     3      0      91
                                              6 BANK0      3     3      0
                             _readIR
 ---------------------------------------------------------------------------------
 (3) _readIR                                               4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _ID                                                  28    28      0    5020
                                             27 BANK0     28    28      0
                            ___awdiv
                           ___awtoft
                             ___ftge
                           _delay_ms
                           _readCOND
 ---------------------------------------------------------------------------------
 (3) _readCOND                                             4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             2     2      0      23
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     520
                                             18 BANK0      9     3      6
                            ___awdiv (ARG)
                           ___awtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             4     1      3    2236
                                             14 BANK0      4     1      3
                            ___awdiv (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    1953
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (2) _Distribution                                         2     2      0    5393
                                              8 BANK0      2     2      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (1) _machineConfig                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _logRun                                              10    10      0   11542
                                             49 BANK0     10    10      0
                        _EEPROM_read
                       _EEPROM_write
 ---------------------------------------------------------------------------------
 (1) _initUI                                               0     0      0   23224
         _change_state_to_menu_start
                            _loadRTC
 ---------------------------------------------------------------------------------
 (2) _loadRTC                                              3     3      0     914
                                             21 BANK0      3     3      0
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Init                                      8     4      4     440
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     290
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_start                           0     0      0   22310
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initTime                                             7     1      6     538
                                              0 BANK0      7     1      6
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _initEEPROM                                           0     0      0   10795
                       _EEPROM_write
 ---------------------------------------------------------------------------------
 (3) _EEPROM_write                                         6     3      3   10795
                                             43 BANK0      6     3      3
                        _EEPROM_read
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _EEPROM_read                                          2     0      2     426
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _UI                                                  24    24      0   46992
                                             68 BANK0     22    22      0
                            ___awdiv
                            ___awmod
            _change_state_to_menu_12
            _change_state_to_menu_22
                            _lcdInst
                           _printRTC
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _printRTC                                            25    25      0   13339
                                             43 BANK0     25    25      0
                             _getRTC
                            _lcdInst
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    3275
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _getRTC                                               2     2      0     519
                                              3 BANK0      2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     2     0      2     406
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_22                              0     0      0    8971
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_12                              0     0      0    8971
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    1216
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1196
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _Test                                                 2     2      0  116832
                                             70 BANK0      2     2      0
                        _BlockerTest
                         _BothServos
                       _PlatformTest
                         _PortTestDC
                     _PortTestPusher
                          _SpeedTest
                       _actuatorTest
                      _algorithmTest
                                _arm
                            _lcdInst
                             _printf
                         _sensorTest
 ---------------------------------------------------------------------------------
 (2) _sensorTest                                           4     4      0    9083
                                             43 BANK0      4     4      0
                            _lcdInst
                             _printf
                            _readADC
                            _readMAG
 ---------------------------------------------------------------------------------
 (4) _readMAG                                              4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _arm                                                  3     3      0    9040
                                             43 BANK0      3     3      0
                            _lcdInst
                             _printf
                        _stopSignals
 ---------------------------------------------------------------------------------
 (2) _algorithmTest                                        2     2      0    8971
                                             43 BANK0      2     2      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _actuatorTest                                        27    27      0   15607
                                             43 BANK0     27    27      0
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (2) _SpeedTest                                            1     1      0    8971
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PortTestPusher                                       1     1      0    8971
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PortTestDC                                           1     1      0    8971
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PlatformTest                                        12    12      0    9244
                                             43 BANK0     12    12      0
                            _lcdInst
                             _printf
                            _readADC
                        _stopSignals
 ---------------------------------------------------------------------------------
 (2) _BothServos                                           2     2      0   19757
                                             43 BANK0      2     2      0
                         _initServos
                            _lcdInst
                             _printf
                        _stopSignals
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (1) _stopSignals                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _initServos                                           1     1      0    5393
                                              8 BANK0      1     1      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (4) _updateServoPosition                                  8     4      4    5393
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _BlockerTest                                         10    10      0    9246
                                             43 BANK0     10    10      0
                            _lcdInst
                             _printf
                            _readADC
 ---------------------------------------------------------------------------------
 (4) _readADC                                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _printf                                              33    21     12    8836
                                             14 BANK0     29    17     12
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     669
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     515
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     366
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _handler                                             16    16      0   84367
                                             74 COMRAM    16    16      0
                     _printSortTimer
                     _updateArmState
                         _updateMenu
                  _updateServoStates
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (8) _updateServoStates                                    2     2      0     593
                                              8 COMRAM     2     2      0
              i2_updateServoPosition
 ---------------------------------------------------------------------------------
 (9) i2_updateServoPosition                                8     4      4     593
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (8) _updateMenu                                           2     2      0   70855
                                             66 COMRAM     2     2      0
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
                           _dispLogs
                       _inputHandler
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (8) i2_change_state_to_menu_start                         0     0      0    7640
                          i2_lcdInst
                         i2_printRTC
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_printRTC                                          25    25      0    4553
                                             41 COMRAM    25    25      0
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
                           i2_strcpy
 ---------------------------------------------------------------------------------
 (10) i2_strcpy                                            6     2      4     699
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _inputHandler                                         4     2      2   30870
                                             41 COMRAM     4     2      2
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_22                            0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_12                            0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_23                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_11                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_34                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_33                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_23                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_22                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_12                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_11                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) _dispLogs                                             2     0      2    1475
                                             17 COMRAM     2     0      2
                        _retrieveLog
 ---------------------------------------------------------------------------------
 (10) _retrieveLog                                        11     9      2    1047
                                              6 COMRAM    11     9      2
                      i2_EEPROM_read
                           i2___wmul
 ---------------------------------------------------------------------------------
 (11) i2_EEPROM_read                                       2     0      2     174
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _updateArmState                                       2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (8) _printSortTimer                                      33    33      0    5279
                                             41 COMRAM    33    33      0
                          i2___awmod
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                         i2_delay_ms
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_printf                                            33    21     12    2952
                                             12 COMRAM    29    17     12
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (10) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (10) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (10) i2___wmul                                            6     2      4     469
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (10) i2___lwmod                                           5     1      4     367
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (10) i2___lwdiv                                           7     3      4     266
                                              5 COMRAM     7     3      4
                          i2___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (10) i2_lcdInst                                           1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (10) i2_getRTC                                            2     2      0     213
                                              3 COMRAM     2     2      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Write                                  2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Stop                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Start                                  0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Read                                   2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Wait                                   1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (9) i2_delay_ms                                           2     2      0      23
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (9) i2___awmod                                            6     2      4     400
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _Test
     _BlockerTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
     _BothServos
       _initServos
         _updateServoPosition
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _stopSignals
       _updateServoPosition
     _PlatformTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
       _stopSignals
     _PortTestDC
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _PortTestPusher
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _SpeedTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _actuatorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _algorithmTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _arm
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _stopSignals
     _lcdInst
       _lcdNibble
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _sensorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
       _readMAG
         _readADC
   _UI
     ___awdiv
       ___awmod (ARG)
     ___awmod
     _change_state_to_menu_12
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _change_state_to_menu_22
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printRTC
       _getRTC
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _strcpy
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _strcpy
   _initEEPROM
     _EEPROM_write
       _EEPROM_read
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
   _initLCD
     _lcdInst
       _lcdNibble
   _initTime
   _initUI
     _change_state_to_menu_start
       _lcdInst
         _lcdNibble
       _printRTC
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
         _strcpy
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _loadRTC
       _I2C_Master_Init
         ___lldiv
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _logRun
     _EEPROM_read
     _EEPROM_write
       _EEPROM_read
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
   _machineConfig
   _sort
     _Distribution
       _updateServoPosition
     _ID
       ___awdiv
         ___awmod (ARG)
       ___awtoft
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
       ___ftge
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
       _delay_ms
       _readCOND
         _readADC
     _Loading
       _EEPROM_read
       _EEPROM_write
         _EEPROM_read
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
       _delay_ms
       _getIR
         _readIR
           _readADC
       _getMAG
         _readMAG
           _readADC
       _initGlobalVars
       _initServos
         _updateServoPosition
       _initSortTimer
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _readIR
         _readADC
   _stopSignals

 _handler (ROOT)
   _printSortTimer
     i2___awmod
     i2___lwdiv
       i2___lwmod (ARG)
     i2___lwmod
     i2___wmul
     i2_delay_ms
     i2_getRTC
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _updateArmState
   _updateMenu
     _change_state_to_logs_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_33
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_34
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _dispLogs
       _retrieveLog
         i2_EEPROM_read
         i2___wmul
     _inputHandler
       _change_state_to_logs_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_33
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_34
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
     i2_change_state_to_menu_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_start
       i2_lcdInst
         i2_lcdNibble
       i2_printRTC
         i2_getRTC
           i2_I2C_Master_Read
             i2_I2C_Master_Wait
           i2_I2C_Master_Start
             i2_I2C_Master_Wait
           i2_I2C_Master_Stop
             i2_I2C_Master_Wait
           i2_I2C_Master_Write
             i2_I2C_Master_Wait
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
         i2_strcpy
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
   _updateServoStates
     i2_updateServoPosition
   i2_change_state_to_menu_start
     i2_lcdInst
       i2_lcdNibble
     i2_printRTC
       i2_getRTC
         i2_I2C_Master_Read
           i2_I2C_Master_Wait
         i2_I2C_Master_Start
           i2_I2C_Master_Wait
         i2_I2C_Master_Stop
           i2_I2C_Master_Wait
         i2_I2C_Master_Write
           i2_I2C_Master_Wait
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
       i2_strcpy
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      55       7       33.2%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     5A      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     5A      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     152      34        0.0%
DATA                 0      0     152       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Tue Apr 11 22:17:54 2017

                                    _i 013F                     i2_I2C_Master_Start 5DBE  
                   i2_I2C_Master_Write 5D94                                     l71 5D2C  
                                   _ID 16E8                       _f_panning_to_bin 0069  
                          __CFG_CPD$ON 000000                                     _UI 0012  
                         ___awdiv@sign 008B                                     _up 0075  
                  ___wmul@multiplicand 0082                     i2___lwdiv@dividend 0006  
                          __CFG_BORV$3 000000                     EEPROM_read@address 0080  
                         __CFG_CP0$OFF 000000                           __CFG_CP1$OFF 000000  
                         __CFG_CP2$OFF 000000                           __CFG_CP3$OFF 000000  
               __end_of_updateArmState 5790                                    ID@i 00A0  
                                  ID@j 00B3                                    ID@n 00B5  
                                  ?_ID 0001                                    ?_UI 0001  
                                  UI@i 00C8                                    l193 0102  
                                  l185 00E2                                    l188 00E6  
                                  l508 49BA                                    l627 31BC  
                                  l813 140C                                    l805 1332  
                                  l823 1556                                    l807 1388  
                                  l840 15DE                                    l816 1446  
                                  l808 136C                                    l850 16DA  
                                  l842 15F0                                    l834 168E  
                                  l826 14CE                                    l843 1604  
                                  l835 15BA                                    l844 1618  
                                  l828 1516                                    l845 162C  
                                  l862 1938                                    l846 1642  
                                  l838 168C                                    l944 4FD4  
                                  l880 1B72                                    l856 17B0  
                                  l865 1998                                    l858 181E  
                                  l883 1C0A                                    l795 1268  
                                  l879 1B58                           __CFG_CPB$OFF 000000  
                                  _PR2 000FCB                                    _PEN 007E2A  
                                  _SEN 007E28                    ?i2_I2C_Master_Start 0001  
            __end_of_updateServoStates 3E64                         ?_machineConfig 0001  
                  ?i2_I2C_Master_Write 0002                                    _arm 44A6  
                                  _log 00EE                                    _sel 00FD  
                                  _var 014B                           ___awmod@sign 0085  
                                  wreg 000FE8                    i2printRTC@RTC_month 003B  
                  __end_of_BlockerTest 402A                    _log_count_can_w_lab 0143  
                           i2_delay_ms 5CCC        __end_of_change_state_to_menu_11 59C0  
      __end_of_change_state_to_menu_12 5800        __end_of_change_state_to_menu_22 57C8  
      __end_of_change_state_to_menu_23 5990           _f_can_coming_to_distribution 0135  
                       ??_Distribution 0088        __end_of_change_state_to_logs_11 5AB0  
      __end_of_change_state_to_logs_12 5A80        __end_of_change_state_to_logs_22 5A50  
      __end_of_change_state_to_logs_23 5B0C        __end_of_change_state_to_logs_33 5A20  
      __end_of_change_state_to_logs_34 59F0                                   ??_ID 009B  
                                 ??_UI 00C4                           __CFG_LVP$OFF 000000  
                         __CFG_WDT$OFF 000000                                   l1142 45C6  
                                 l1322 09EE                                   l1315 0944  
                                 l1155 5CF8                                   l1404 2DFA  
                                 l1260 4406                                   l1164 4158  
                                 l1413 2D6E                                   l1325 0A54  
                                 l1326 0AA2                                   l1318 0948  
                                 l1327 0B08                                   l1352 0EB0  
                                 l1328 0B56                                   l1280 47CC  
                                 l1417 2DC6                                   l1257 43E6  
                                 l1434 4F64                                   l1451 3F66  
                                 l1419 2DF4                                   l1427 4F54  
                                 l1283 47D0                                   l1364 104A  
                                 l1292 2E6A                                   l1382 4DB2  
                                 l1471 4596                                   l1528 1E5E  
                                 l1456 3FB2                                   l1480 4590  
                                 l1472 4558                                   l1457 3FCC  
                                 l1369 1120                                   l1289 2E66  
                                 l1387 4DF4                                   l1389 4DF6  
                                 ?_arm 0001                                   l1494 54A4  
                                 l1488 5494                                   l1922 4C10  
                                 l1792 436C                                   l1975 50F8  
                                 l7200 3220                                   l1985 53E6  
                                 l7210 32B6                                   l7202 323E  
                                 l8002 150A                                   l7212 32D4  
                                 l7204 325C                                   l7220 332E  
                                 l8100 176C                                   l7214 32F2  
                                 l7206 327A                                   l7222 338C  
                                 l8022 15C6                                   l9000 2CB8  
                                 l7216 3310                                   l7208 3298  
                                 l8210 1B2C                                   l8050 164E  
                                 l9020 2D30                                   l9012 2CFA  
                                 l7420 463C                                   l8140 18EC  
                                 l8052 1684                                   l6614 50A8  
                                 l8214 1B42                                   l8206 1B1C  
                                 l8118 17DA                                   l8142 18F6  
                                 l8070 16CE                                   _ADIE 007CEE  
                                 l6616 50B4                                   l9024 2D44  
                                 l8400 30C8                                   l7520 4AF8  
                                 l7432 4674                                   l7416 4632  
                                 l7424 4654                                   l8152 1944  
                                 l8072 16DC                                   l6626 50EA  
                                 l6618 50BA                                   l6642 53D8  
                                 l6634 53A2                                   l6802 1E06  
                                 l9042 2DB0                                   l9018 2D1A  
                                 l7522 4B04                                   l7514 4ADA  
                                 l7194 31C6                                   l7442 5BAA  
                                 l7370 4C30                                   l8058 1696  
                                 l6636 53AE                                   l6820 1E96  
                                 l6804 1E1E                                   l6556 5B4C  
                                 l9204 3F92                                   l9028 2D58  
                                 l8404 30FE                                   l8332 2EBA  
                                 l7540 4B5C                                   l7532 4B3A  
                                 l7524 4B0A                                   l7508 4AC4  
                                 l6580 5AD6                                   l7196 31E4  
                                 l7188 313A                                   l7428 466A  
                                 l8252 46A4                                   l8180 1AA0  
                                 l8172 1A6A                                   l7380 4CBC  
                                 l6638 53B4                                   l6750 1C26  
                                 l6558 5B5E                                   l9206 3F9C  
                                 l9038 2D9C                                   l8350 2F72  
                                 l6902 4F00                                   l7198 3202  
                                 l8254 46BE                                   l8262 470C  
                                 l7438 5B94                                   l8238 1BC8  
                                 l8246 1C0C                                   l8182 1AA8  
                                 l7470 5110                                   l7374 4C46  
                                 l6824 1EB0                                   l6808 1E24  
                                 l6760 1C56                                   l9216 3FCE  
                                 l6920 4FBC                                   l8600 0D24  
                                 l7536 4B48                                   l9240 4CF8  
                                 l9400 01C6                                   l8256 46D8  
                                 l8264 473A                                   l7552 56EC  
                                 l7560 4A20                                   l6850 1F56  
                                 l6826 1EB6                                   l6754 1C3A  
                                 l9218 3FDE                                   l9226 4024  
                                 l8530 0BD2                                   l8450 09C2  
                                 l8362 2FC2                                   l9410 01EE  
                                 l9402 01CC                                   l8258 46F2  
                                 l7570 4AA4                                   l8194 1AE4  
                                 l8186 1ABC                                   l7490 5168  
                                 l7474 5126                                   l6844 1F14  
                                 l6756 1C4C                                   l9172 3EEE  
                                 l9180 3F34                                   l8612 0D68  
                                 l8540 0BFA                                   l8444 09B2  
                                 l8380 3050                                   l9260 4D64  
                                 l9252 4D42                                   l9244 4D0C  
                                 l9236 4CE8                                   l7652 4E40  
                                 l6940 42C2                                   l7564 4A60  
                                 l6598 5B84                                   l6862 1F8C  
                                 l6838 1EF2                                   l6782 1D38  
                                 l6774 1D06                                   l6766 1C8A  
                                 l6926 4FEE                                   l8702 0F2A  
                                 l8622 0D90                                   l8534 0BDC  
                                 l8454 09DA                                   l8446 09B8  
                                 l9246 4D18                                   l9510 0544  
                                 l9502 0522                                   l9430 024E  
                                 l9406 01D6                                   l7662 4E82  
                                 l6950 4350                                   l6942 42D0  
                                 l8198 1AF4                                   l7486 5150  
                                 l6864 1F98                                   l6872 1FC6  
                                 l6856 1F70                                   l6848 1F4C  
                                 l6792 1DB0                                   l6784 1D44  
                                 l6880 2030                                   l8616 0D80  
                                 l8608 0D5E                                   l8560 0C60  
                                 l8544 0C04                                   l8392 30B6  
                                 l8368 3004                                   l9248 4D1E  
                                 l9256 4D50                                   l9520 0560  
                                 l9416 01FC                                   l7656 4E56  
                                 l6952 435E                                   l6944 4300  
                                 l6936 42AE                                   l6874 1FCC  
                                 l6794 1DBC                                   l6786 1D4A  
                                 l8810 1140                                   l8722 0F9E  
                                 l8714 0F7C                                   l8706 0F42  
                                 l8642 0E04                                   l8634 0DE2  
                                 l8626 0DA8                                   l8618 0D86  
                                 l8570 0C88                                   l8538 0BF4  
                                 l9602 0738                                   l9506 052C  
                                 l9434 0258                                   l9370 0128  
                                 l7930 1356                                   l6868 1FB2  
                                 l6796 1DC2                                   l9196 3F68  
                                 l8820 1168                                   l8740 1000  
                                 l8732 0FC6                                   l8724 0FA4  
                                 l8660 0E66                                   l8652 0E2C  
                                 l8644 0E0A                                   l8564 0C78  
                                 l8556 0C56                                   l8548 0C1C  
                                 l8388 3080                                   l6892 4ECA  
                                 l6884 580A                                   l9524 0578  
                                 l9516 0556                                   l9452 02A4  
                                 l9444 0282                                   l9364 00FE  
                                 l6964 4392                                   l6948 4320  
                                 l6878 2024                                   l6798 1DDA  
                                 l9198 3F78                                   l8814 114A  
                                 l8750 1028                                   l8718 0F86  
                                 l8670 0E8E                                   l8638 0DEC  
                                 l8590 0CFC                                   l8582 0CDA  
                                 l8574 0CA0                                   l8566 0C7E  
                                 l6886 5816                                   l9606 0750  
                                 l9470 0314                                   l9438 0270  
                                 l9382 015C                                   l9374 013A  
                                 l6974 4B94                                   l6958 4376  
                                 l7918 131C                                   l7870 1226  
                                 l8824 1172                                   l8808 113A  
                                 l8744 100A                                   l8728 0FAE  
                                 l8664 0E70                                   l8648 0E14  
                                 l8592 0D02                                   l6896 4EE0  
                                 l9632 07D8                                   l9624 07B6  
                                 l9552 0660                                   l9544 063E  
                                 l9480 03AA                                   l9472 0332  
                                 l9448 028C                                   l6976 4BA4  
                                 l7928 134C                                   l7880 1270  
                                 l8818 1162                                   l8754 1032  
                                 l8674 0E98                                   l8586 0CE4  
                                 l9642 07F4                                   l9562 067C  
                                 l9490 0440                                   l9482 03C8  
                                 l9474 0350                                   l9386 016E  
                                 l9378 0144                                   l6986 4BFE  
                                 l6978 4BAA                                   l8828 118A  
                                 l8748 1022                                   l8692 0F02  
                                 l8668 0E88                                   l8596 0D0C  
                                 l9628 07C0                                   l9548 0648  
                                 l9492 045E                                   l9484 03E6  
                                 l9476 036E                                   l9468 02F6  
                                 l7956 13F6                                   l8926 4F8C  
                                 l8782 10BC                                   l8774 109A  
                                 l8862 4540                                   l8870 455E  
                                 l9646 080C                                   l9638 07EA  
                                 l9566 0694                                   l9558 0672  
                                 l9486 0404                                   l9478 038C  
                                 l7990 14B2                                   l7982 1488  
                                 l7966 1426                                   l8792 10E4  
                                 l8784 10C2                                   l8696 0F1A  
                                 l8688 0EF8                                   l8872 4578  
                                 l8864 454A                                   l9672 088C  
                                 l9664 086A                                   l9592 071C  
                                 l9584 06FA                                   l9488 0422  
                                 l9496 047C                                   l7968 1430  
                                 l7896 12AC                                   l8962 2B52  
                                 l8778 10A4                                   l8698 0F20  
                                 l8874 4582                                   l8858 451A  
                                 l9682 08A8                                   l9498 04E0  
                                 l9690 08CC                                   l7994 14D2  
                                 l7978 1462                                   l8980 2C02  
                                 l8788 10CC                                   l9668 0874  
                                 l9588 0704                                   l7988 14A8  
                                 l8982 2C08                                   l8798 110A  
                                 l9686 08C0                                   l9678 089E  
                                 l9598 072E                                   l9942 4076  
                                 STR_1 FB63                                   l9944 408A  
                                 STR_2 FF49                                   STR_3 FB51  
                                 STR_4 FE5D                                   STR_5 FB51  
                                 STR_6 FDD9                                   STR_7 FFC3  
                                 l9982 43A2                                   STR_8 FFDA  
                                 STR_9 FFCA                                   l9968 4112  
                                 l9998 440C                ??i2_updateServoPosition 0005  
                                 _LATA 000F89                                   _LATB 000F8A  
                                 _LATC 000F8B                                   _LATD 000F8C  
                                 _LATE 000F8D                                   u5150 5AD4  
                                 u6120 5634                                   u6130 5636  
                                 _PEIE 007F96                                   u7100 18C2  
                                 u5430 1D84                                   u5350 55E8  
                                 u6160 31BC                                   u5360 55EA  
                                 u6145 5420                                   u5370 5680  
                                 u7130 1936                                   u5371 567C  
                                 u8100 456E                                   u5380 5682  
                                 _RCEN 007E2B                                   u5437 1D7A  
                                 u5470 1DFC                                   u8110 4570  
                                 u7310 1BD4                                   u7070 186C  
                                 u7400 2EFE                                   u7160 1A18  
                                 u7080 186E                                   u8050 4536  
                                 u7330 1C0A                                   u7170 1A1A  
                                 u7090 18C0                                   u6610 1232  
                                 u8300 2C4A                                   u8060 4538  
                                 u5477 1DF2                                   u8310 2C4C  
                                 u7430 30A4                                   u6630 1268  
                                 i2l71 5D40                                   u8400 2D28  
                                 u7328 1BD8                                   u8410 2D40  
                                 u7530 09EE                                   u8411 2D3C  
                                 u8180 4DDC                                   u7460 30EC  
                                 u6628 1236                                   u8350 2CE2  
                                 u8270 2B94                                   u7550 0AA2  
                                 u7438 30A8                                   u7390 2EFC  
                                 u6910 154E                                   u8600 3F8A  
                                 u8280 2B96                                   u6920 1550  
                                 u7570 0B56                                   u7468 30F0  
                                 u6908 152C                                   u8541 3F5C  
                                 u8550 3F5E                                   u8198 4DE0  
                                 u8368 2CE6                                   u6890 1528  
                                 u8591 3F88                                   u9720 4158  
                                 _RSEN 007E29                            _stopSignals 5CB0  
                                 _Test 43A0                                   _back 0063  
                                 _main 4918                                   _down 0065  
                         ___ftpack@arg 0080                                   _keys FAAF  
                         ___ftpack@exp 0083                                   _time 011C  
                                 fsr0h 000FEA                                   fsr1h 000FE2  
                   i2___lwdiv@quotient 000A                                   indf0 000FEF  
                                 fsr2h 000FDA                                   fsr0l 000FE9  
                                 indf2 000FDF                                   fsr1l 000FE1  
                                 fsr2l 000FD9                                   _sort 5C4E  
                                 btemp 007E                   ??i2_I2C_Master_Start 0002  
                 ??i2_I2C_Master_Write 0004                                   prodh 000FF4  
                                 prodl 000FF3                                   start 000E  
                        __CFG_IESO$OFF 000000                   _log_count_can_no_lab 0141  
                      __end_ofi2_putch 5D7E                          __CFG_MCLRE$ON 000000  
                         ___param_bank 000000                             i2_printRTC 3690  
                          i2_lcdNibble 54AC                        __end_of_Loading 16E8  
                 __end_of_actuatorTest 1192                                  ??_arm 00AB  
                                ID@res 00AD             i2updateServoPosition@timer 0003  
                     ?_I2C_Master_Init 008D                       ?_I2C_Master_Read 0001  
                     ?_I2C_Master_Wait 0001            ??i2_change_state_to_menu_12 002A  
          ??i2_change_state_to_menu_22 002A                       ?_I2C_Master_Stop 0001  
                                ?_Test 0001                                  l10000 4412  
                                l10010 4430                                  l10002 4418  
                                l10012 4436                                  l10004 441E  
                                l10020 4448                                  l10014 443C  
                                l10006 4424                                  l10022 449A  
                                l10016 4442                                  l10008 442A  
                                l10240 498C                                  l10232 4962  
                                l10242 4992                                  l10234 4978  
                                l10252 49B0                                  l10244 4998  
                                l10254 49B6                                  l10258 49BC  
                 __end_of_EEPROM_write 468C                            ID@time_1147 009D  
                                ?_main 0001                                  _ACKEN 007E2C  
                                _ACKDT 007E2D                        __end_of___awdiv 4B66  
                      ?_updateArmState 0001                                  _EEADR 000FA9  
                                STR_10 FFE6                                  STR_11 FFEA  
                                STR_12 FFFA                                  STR_20 FFEE  
                                STR_13 FFDE                                  STR_21 FACA  
                                STR_14 FFD6                                  STR_22 FF9A  
                                STR_30 FDEA                                  STR_15 FFD2  
                                STR_23 FF3B                                  STR_31 FDC8  
                                STR_16 FFE2                                  STR_24 FD2F  
                                STR_32 FD0D                                  STR_40 FCC9  
                                STR_17 FFF2                                  STR_25 FE0C  
                                STR_33 FD1E                                  STR_41 FCB8  
                                STR_18 FFF6                                  STR_34 FDB7  
                                STR_50 FD95                                  STR_42 FD73  
                                STR_26 FD40                                  STR_43 FD73  
                                STR_35 FDB7                                  STR_51 FFDA  
                                STR_19 FFCE                                  STR_27 FDFB  
                                STR_52 FFCA                                  STR_60 FFF2  
                                STR_28 FD51                                  STR_36 FCFC  
                                STR_44 FCDA                        __end_of___awmod 4D6E  
                                STR_45 FCC9                                  STR_37 FD0D  
                                STR_53 FFE6                                  STR_61 FFF6  
                                STR_29 FE09                                  STR_62 FFCE  
                                STR_54 FFEA                                  STR_70 FEF4  
                                STR_38 FDA6                                  STR_46 FD84  
                                STR_47 FD84                                  STR_55 FFFA  
                                STR_63 FACA                                  STR_71 FF2D  
                                STR_39 FD62                                  STR_56 FFDE  
                                STR_80 FE7C                                  STR_64 FE3D  
                                STR_48 FCEB                                  STR_72 FC41  
                                STR_49 FCDA                                  STR_57 FFD6  
                                STR_81 FE09                                  STR_73 FF11  
                                STR_65 FE4D                                  STR_58 FFD2  
                                STR_74 FF64                                  STR_90 FEE5  
                                STR_82 FEA9                                  STR_66 FAE2  
                                STR_59 FFE2                                  STR_67 FFBC  
                                STR_91 FF03                                  STR_75 FED6  
                                STR_83 FE1D                                  STR_84 FF86  
                                STR_76 FF1F                                  STR_68 FC74  
                                STR_92 FC52                                  STR_85 FF86  
                                STR_77 FFAD                                  STR_93 FF70  
                                STR_69 FC85                                  STR_78 FF2D  
                                STR_86 FFA4                                  STR_94 FC63  
                                STR_87 FFA4                                  STR_95 FF7B  
                                STR_79 FF57                                  STR_88 FF90  
                                STR_96 FEC7                                  STR_89 FF2D  
                                STR_97 FBCA                                  STR_98 FBB9  
                                STR_99 FB97           i2updateServoPosition@my_time 0007  
                                ?_sort 0001                        __end_of___lldiv 4C22  
         i2updateServoPosition@time_us 0001                                  u11007 08F4  
                                u10207 12DA                                  u11017 0938  
                                u10217 1336                                  u11107 0B66  
                                u11027 095A                                  u10307 1454  
                                u10227 133E                                  u11117 0BE4  
                                u11037 09CA                                  u10317 1470  
                                u10237 1370                                  u11207 0E1C  
                                u11127 0C0C                                  u11047 09FE  
                                u10407 161C                                  u10327 1570  
                                u10247 137A                                  _T0CON 000FD5  
                                u11217 0E78                                  u11137 0C68  
                                u11057 0A64                                  u10417 1624  
                                u10337 15A8                                  u10257 1398  
                                u11307 10AC                                  u11227 0EA0  
                                u11147 0C90                                  u11067 0A82  
                                u10507 19A8                                  u10427 1630  
                                u10347 15E2                                  u10267 13C2  
                      ___awdiv@divisor 0088                                  u11317 10D4  
                                u11237 0F0A                                  u11157 0CEC  
                                u11077 0AB2                                  u10517 1B5C  
                                u10437 163A                                  u10357 15EA  
                                u10277 1410                                  u10197 11B6  
                                u11407 4D7C                                  u11327 1124  
                                u11247 0F32                                  u11167 0D14  
                                u11087 0B18                                  u10607 002A  
                                u10527 1B66                                  u10447 1646  
                                u10367 15F4                                  u10287 1418  
                                _T1CON 000FCD                                  u11417 2B30  
                                u11337 112E                                  u11257 0F8E  
                                u11177 0D70                                  u11097 0B36  
                                u10617 0114                                  u10537 1B8C  
                                u10457 16B0                                  u10377 15FE  
                                u10297 144A                                  u11507 205E  
                                u11427 2BAA                                  u11347 1152  
                                u11267 0FB6                                  u11187 0D98  
                                u10707 0568                                  u10627 014C  
                                u10547 5BA0                                  u10467 588A  
                                u10387 1608                                  u11517 20AA  
                                u11437 2BF6                                  u11357 117A  
                                u11277 1012                                  u11197 0DF4  
                                u10717 0592                                  u10637 0188  
                                u10557 5692                                  u10477 512E  
                                u10397 1612                                  u11607 22C0  
                                u11527 20F6                                  u11447 2C60  
                                u11367 4F1E                                  u11287 103A  
                                u10807 0826                                  u10727 0650  
                                u10647 01DE                                  u10567 56C6  
                                u10487 1702                                  _T2CON 000FCA  
                                u11617 230C                                  u11537 212A  
                                u11457 2CAC                                  u11377 4F6E  
                                u11297 105C                                  u10817 087C  
                                u10737 0684                                  u10657 020A  
                                u10577 45E8                                  u10497 17C0  
                                u11707 3FB6                                  u11627 2340  
                                u11547 215C                                  u11467 2D78  
                                u11387 4F82                                  u10907 2F86  
                                u10827 08B0                                  u10747 06AE  
                                u10667 0260                                  u10587 4644  
                                u11717 3FC0                                  u11637 2372  
                                u11557 21A8                                  u11477 2D8A  
                                u11397 545E                                  u10917 2FB4  
                                u10837 43B0                                  u10757 070C  
                                u10677 0294                                  u10597 467C  
                                u11727 5B54                                  u11647 23BE  
                                u11567 21DC                                  u11487 2DD0  
                                u10927 2FF8                                  u10847 2E16  
                                u10767 0740                                  u10687 02BE  
                                _T3CON 000FB1                                  u11737 5278  
                                u11657 23F2                                  u11577 220E  
                                u11497 2DE2                                  u10937 3016  
                                u10857 2E5A                                  u10777 076A  
                                u10697 0534                                  u11747 5282  
                                u11667 2424                                  u11587 225A  
                                u10947 3044                                  u10867 2E7C  
                                u10787 07C8                                  u11757 52AE  
                                u11677 5054                                  u11597 228E  
                                u10957 305E                                  u10877 2EAA  
                                u10797 07FC                                  u11767 52B8  
                                u11687 5070                                  u10967 44B4  
                                u10887 2F12                                  u11697 3E9A  
                                u10977 477C                                  u10897 2F66  
                                u10987 47C0                                  u10997 47E2  
                      __end_of___lwdiv 5102                        __end_of___lwmod 53F0  
                                i2l268 368C                                  i2l627 371E  
                                i2l912 29AC                                  i2l916 2972  
                                i2l919 2A1A                                  i2l944 52F4  
                                i2l971 578C                        ___awdiv@counter 008A  
                                _TMR0H 000FD7                                  _TMR1H 000FCF  
                                _TMR0L 000FD6                                  _TMR3H 000FB3  
                                _TMR1L 000FCE                                  _TMR3L 000FB2  
                           _BothServos 2050                                  _PORTB 000F81  
                                _TRISA 000F92                                  _TRISB 000F93  
                                _TRISC 000F94                                  _TRISD 000F95  
                                _TRISE 000F96                          __CFG_PWRT$OFF 000000  
                        __CFG_WRT0$OFF 000000                          __CFG_WRT1$OFF 000000  
                        __CFG_WRT2$OFF 000000                          __CFG_WRT3$OFF 000000  
                      __end_of_lcdInst 5D72                        __end_of_handler 3C9C  
                       __CFG_EBTR0$OFF 000000                         __CFG_FCMEN$OFF 000000  
                       __CFG_EBTR1$OFF 000000                         __CFG_EBTR2$OFF 000000  
                       __CFG_EBTR3$OFF 000000                                  _nRBPU 007F8F  
                        __CFG_WRTB$OFF 000000                          __CFG_WRTC$OFF 000000  
                        __CFG_WRTD$OFF 000000                        __end_of_readADC 5B64  
                      __end_of_initLCD 56D0                         __CFG_EBTRB$OFF 000000  
                                _debug 012F                             i2isdigit@c 0003  
                        ___awtoft@sign 0091                                  _getIR 5102  
                      __end_of_loadRTC 4E8A                        __end_of_readMAG 568A  
                      __end_of_dpowers FACA                                  _first 013B  
                                _enter 0067                                  arm@on 00AC  
                      __end_of_isdigit 5B8E                                  _input 007D  
                        ___ftpack@sign 0084                                  _putch 5D52  
                                pclath 000FFA                                  tablat 000FF5  
                     __end_ofi2___wmul 5C04                       __end_ofi2_getRTC 51E6  
                  _log_count_pop_w_tab 00F4                                  status 000FD8  
                          readCOND@res 0084                     __size_ofi2___awmod 0070  
                       __CFG_PBADEN$ON 000000                          i2printf@width 0028  
                     __end_ofi2_printf 27AC                     __size_ofi2___lwdiv 0052  
                   __size_ofi2___lwmod 0042                       __end_ofi2_strcpy 58D0  
                          Loading@addr 00B3                       _count_can_no_lab 0125  
                 printSortTimer@i_1165 0047                   __size_of_EEPROM_read 0018  
                      __initialization 5558                           __end_of_Test 44A6  
                   __size_ofi2_lcdInst 000C                           __end_of_main 49E0  
                         __end_of_keys FAC0                           __end_of_sort 5C70  
                           i2printf@ap 0020                             i2printf@cp 001E  
                   __size_ofi2_isdigit 001E                            _BlockerTest 3E64  
                               ??_Test 00C6    __size_of_change_state_to_menu_start 002C  
                      ??_machineConfig 0080                                 ??_main 00DA  
                               ??_sort 00C4                          __activetblptr 000003  
                               ID@res1 00A9                                 ID@res2 00AB  
           __size_of_updateServoStates 01C8                                 ID@time 00A8  
           updateServoPosition@my_time 0086             updateServoPosition@time_us 0080  
                           i2strcpy@cp 0005                             i2strcpy@to 0001  
                    ?_I2C_Master_Start 0001                    EEPROM_write@address 00AB  
               __size_ofi2_EEPROM_read 0016                      ?_I2C_Master_Write 0081  
                          ?i2_delay_ms 0001                                 ?_getIR 0001  
                   ??_I2C_Master_Start 0081                                 _ADCON0 000FC2  
                               _ADCON1 000FC1                     ??_I2C_Master_Write 0083  
                               _ADCON2 000FC0                                 STR_100 FC1F  
                               STR_101 FC30                                 STR_110 FCA7  
                               STR_102 FB75                                 STR_103 FE2D  
                               STR_111 FAF7                                 STR_120 FE6D  
                               STR_112 FBDB                                 STR_104 FBA8  
                               STR_113 FC0E                                 STR_105 FB86  
                               STR_121 FB2D                                 STR_106 FBA8  
                               STR_114 FC0E                                 STR_122 FE6D  
                               _ADRESH 000FC4                                 STR_123 FE6D  
                               STR_107 FEB8                                 STR_115 FBFD  
                               STR_116 FC0E                                 STR_108 FE9A  
                               STR_124 FBEC                                 _EEADRH 000FAA  
                               STR_117 FBFD                                 STR_109 FE8B  
                               STR_125 FC96                                 STR_126 FAF7  
                               STR_118 FB1B                                 _ADRESL 000FC3  
                               STR_127 FB3F                                 STR_119 FB09  
                               STR_128 FFB5                                 _EEDATA 000FA8  
                               _EECON2 000FA7                       ___awdiv@dividend 0086  
                      i2lcdNibble@data 0002                       __end_of___awtoft 5714  
                               ?_putch 0001                       __end_of___ftpack 43A0  
               __size_of_initSortTimer 00AA                        i2lcdNibble@temp 0001  
            i2_change_state_to_menu_12 5930              i2_change_state_to_menu_22 5900  
                               _INT1IE 007F83                                 _INT1IF 007F80  
                               _CVRCON 000FB5                                 i2l1063 3BA0  
                               i2l1072 3C44                                 i2l1074 3C60  
                               i2l1155 5D24                                 i2l1528 2618  
                               i2l7002 51BC                                 i2l7100 265E  
                               i2l7102 2662                                 i2l7030 2458  
                               i2l1975 554E                                 i2l7008 51D6  
                               i2l7120 26AE                                 i2l7032 2466  
                               i2l1985 574C                                 i2l7114 2694  
                               i2l7050 2500                                 i2l7042 249E  
                               i2l7026 2448                                 i2l7140 270E  
                               i2l7132 26F0                                 i2l7124 26D2  
                               i2l7060 2532                                 i2l7036 246C  
                               i2l7150 273A                                 i2l7126 26DA  
                               i2l7070 258A                                 i2l7062 2536  
                               i2l7144 2722                                 i2l7080 25DE  
                               i2l7072 2590                                 i2l7160 58A8  
                               i2l7154 2788                                 i2l7138 2706  
                               i2l7074 25A2                                 i2l7058 2528  
                               i2l7162 58B0                                 i2l6700 551C  
                               i2l7148 2734                                 i2l7068 2580  
                               i2l7084 25E2                                 i2l7156 2790  
                               i2l6702 5524                                 i2l7078 25CC  
                               i2l7350 427C                                 i2l7342 4248  
                               i2l6712 5544                                 i2l6704 5528  
                               i2l6720 5722                                 i2l7096 2646  
                               i2l6722 572A                                 i2l7338 4238  
                               i2l7610 3728                                 i2l6724 572E  
                               i2l7620 3796                                 i2l7612 373E  
                               i2l7604 36BC                                 i2l7630 3804  
                               i2l7622 37AC                                 i2l7614 3754  
                               i2l9320 5234                                 i2l9312 5214  
                               i2l9304 51FA                                 i2l6728 5742  
                               i2l7632 381A                                 i2l7624 37C2  
                               i2l7616 376A                                 i2l9314 521C  
                               i2l6666 5C24                                 i2l6690 5CA8  
                               i2l7810 3A56                                 i2l7802 3A32  
                               i2l7730 393C                                 i2l7714 3904  
                               i2l7706 38EA                                 i2l7626 37D8  
                               i2l7618 3780                                 i2l9316 5220  
                               i2l9324 523E                                 i2l9308 5206  
                               i2l7732 3942                                 i2l7716 3914  
                               i2l7724 3922                                 i2l7628 37EE  
                               i2l7636 3830                                 i2l7814 3A68  
                               i2l7806 3A44                                 i2l7734 3948  
                               i2l7742 395A                                 i2l7718 3918  
                               i2l7638 388A                                 i2l9328 524C  
                               i2l7736 394E                                 i2l7728 3936  
                               i2l7824 3A84                                 i2l9290 5CD0  
                               i2l7818 3A7A                                 i2l7762 39B6  
                               i2l7754 399E                                 i2l7738 3954  
                               i2l9282 530A                                 i2l7772 39E0  
                               i2l9276 52E0                                 i2l9294 5CE0  
                               i2l7782 39FE                                 i2l9710 3414  
                               i2l7784 3A02                                 i2l7768 39C4  
                               i2l9704 3400                                 i2l7778 39EA  
                               i2l9810 357E                                 i2l9802 3562  
                               i2l9730 344C                                 i2l9722 343E  
                               i2l9714 3422                                 i2l9706 3406  
                               i2l7796 3A24                                 i2l7788 3A0C  
                               i2l6998 51AC                                 i2l9830 35D4  
                               i2l9822 35B0                                 i2l9814 3594  
                               i2l9806 3570                                 i2l9750 3494  
                               i2l9742 3478                                 i2l9734 345A  
                               i2l9718 3430                                 i2l9842 35FE  
                               i2l9834 35E2                                 i2l9826 35BE  
                               i2l9818 35A2                                 i2l9770 34E2  
                               i2l9762 34BE                                 i2l9754 34A2  
                               i2l9746 3486                                 i2l9738 3468  
                               i2l9852 3622                                 i2l9846 3614  
                               i2l9838 35F0                                 i2l9790 3530  
                               i2l9782 3514                                 i2l9774 34F0  
                               i2l9766 34D4                                 i2l9758 34B0  
                               i2l9794 353E                                 i2l9786 3522  
                               i2l9778 34FE                                 i2l9798 3554  
              _f_most_recent_sort_time 0139                          PlatformTest@i 00B1  
                               _OSCCON 000FD3                                 _TMR0IE 007F95  
                               _TMR0IF 007F92                              ??i2_putch 0003  
                               _TMR1IE 007CE8                                 _TMR1IF 007CF0  
                               _TMR2IE 007CE9                                 _TMR2IF 007CF1  
                               _TMR3IE 007D01                                 _TMR3IF 007D09  
                               _TMR0ON 007EAF                                 _TMR1ON 007E68  
                               _TMR2ON 007E52                                 _TMR3ON 007D88  
                               _SSPADD 000FC8                                 _TRISC3 007CA3  
                               _TRISC4 007CA4                                 _SSPBUF 000FC9  
                            ??_Loading 00B1                       __end_of_delay_ms 5BB6  
                 delay_ms@milliseconds 0081                         __CFG_XINST$OFF 000000  
                     __end_of_dispLogs 5C4E                                 ___ftge 49E0  
                          ?i2_printRTC 0001                       retrieveLog@byte1 000B  
                     retrieveLog@byte2 000C                       retrieveLog@byte3 000D  
                 __end_of_Distribution 476E                                 ___wmul 5836  
                            ??___awdiv 008A                         __CFG_STVREN$ON 000000  
                               _getMAG 586C                              ??___awmod 0084  
                          logRun@byte1 00B2                            logRun@byte2 00B3  
                          logRun@byte3 00B4                       __end_of_readCOND 563E  
                               _getRTC 4E8A                              ??___lldiv 0088  
                            ??___lwdiv 0084                              ??___lwmod 008B  
                     ??_printSortTimer 002A                       __end_of_initTime 5C92  
                               _initUI 58D0                                 _readIR 55A6  
                               _logRun 402A                                 getIR@i 0087  
                               clear_0 557E                                 clear_1 558A  
                               clear_2 5596                       ___awdiv@quotient 008C  
                      ___awmod@divisor 0082                             _PortTestDC 4D6E  
                      ___awmod@counter 0084                              ??_lcdInst 0082  
                               _printf 1C18                              ??_handler 004B  
              __size_of_initGlobalVars 00D4                           ?_retrieveLog 0007  
                               _strcpy 5800                     __size_of_SpeedTest 0084  
                            ??_readADC 0080                              ??_initLCD 0083  
                            ??_loadRTC 0095                              ??_readMAG 0082  
 __end_ofi2_change_state_to_menu_start 5BDE  __size_ofi2_change_state_to_menu_start 0028  
         i2_change_state_to_menu_start 5BB6                            ?_BothServos 0001  
                            ??_isdigit 0080                      __end_ofi2___awmod 5256  
                    __end_ofi2___lwdiv 5558                       __end_of_printRTC 33D0  
                         __mediumconst FAAE                      __end_ofi2___lwmod 5756  
                               tblptrh 000FF7                                 tblptrl 000FF6  
                               tblptru 000FF8                   _log_count_pop_no_tab 00F2  
                       i2___awmod@sign 0006                  __end_of_algorithmTest 4844  
                    __end_ofi2_lcdInst 5D8A                      __end_ofi2_isdigit 5CB0  
                           __accesstop 0080                __end_of__initialization 559C  
                        ?_inputHandler 002A                             ___ftge@ff1 0092  
                           ___ftge@ff2 0095                  _most_recent_sort_time 0147  
                        ___rparam_used 000001                          ?_PlatformTest 0001  
              printSortTimer@start_sec 003B                  __size_of_actuatorTest 08B8  
                           ___awtoft@c 008E                          i2_EEPROM_read 5D16  
                         Loading@byte1 00B5                     i2___lwmod@dividend 0001  
                       __pcstackCOMRAM 0001                  _agitator_toggle_count 0123  
                __size_of_EEPROM_write 00E8                    __size_ofi2_delay_ms 001C  
                         __pidataBANK1 5D9E                    BlockerTest@cam_flag 00B1  
                        __end_of_getIR 5174                            i2printRTC@i 0041  
                        _initSortTimer 4C22            __end_of_updateServoPosition 5012  
                        __end_of_putch 5D62                            i2printf@len 0022  
                          i2printf@val 0024                             __end_of_ID 1C18  
                           __end_of_UI 08DA                              ?i2___wmul 0001  
                   __size_of_lcdNibble 006C                              ?i2_getRTC 0001  
                          i2putch@data 0003                  printSortTimer@curTime 002D  
   __end_of_change_state_to_menu_start 5B38          ?i2_change_state_to_menu_start 0001  
           _change_state_to_menu_start 5B0C                  printSortTimer@cur_sec 003D  
                            ?i2_printf 000D                                ??_getIR 0086  
                            ?i2_strcpy 0001                       _count_pop_no_tab 0129  
                  __size_ofi2_printRTC 0236                                ??_putch 0082  
                         _actuatorTest 08DA                __size_of_PortTestPusher 005C  
                           __pbssBANK0 00DA                             __pbssBANK1 0100  
                         ?_stopSignals 0001                         ??_inputHandler 002C  
       __size_ofi2_updateServoPosition 0068          __end_ofi2_updateServoPosition 532A  
                         _EEPROM_write 45A4                         ??_PlatformTest 00AB  
             ?_change_state_to_menu_11 0001               ?_change_state_to_menu_12 0001  
             ?_change_state_to_menu_22 0001               ?_change_state_to_menu_23 0001  
                              UI@F3248 014D                      __end_of_SpeedTest 4F94  
                       ?i2_EEPROM_read 0001               ?_change_state_to_logs_11 0001  
             ?_change_state_to_logs_12 0001               ?_change_state_to_logs_22 0001  
             ?_change_state_to_logs_23 0001               ?_change_state_to_logs_33 0001  
             ?_change_state_to_logs_34 0001                    __size_of_BothServos 03EE  
                    printRTC@RTC_month 00BC                                ?___ftge 0092  
                              _ID$1151 009F                                _ID$1146 009E  
                         ?i2_lcdNibble 0001                                UI@i_412 00C9  
                              UI@i_415 00CA                                UI@i_416 00CB  
                              UI@i_450 00D4                                UI@i_442 00D0  
                              UI@i_434 00CC                                UI@i_451 00D5  
                              UI@i_443 00D1                                UI@i_435 00CD  
                              UI@i_446 00D2                                UI@i_438 00CE  
                              UI@i_447 00D3                                UI@i_439 00CF  
                     ??_updateArmState 0001                         ?_initSortTimer 0001  
                              ?___wmul 0080                                ?_getMAG 0001  
                              ?_getRTC 0001                                ?_initUI 0001  
                              ?_readIR 0001                                ?_logRun 0001  
             updateServoPosition@timer 0082                                UI@month 00D6  
                            ?___awtoft 008E                              ?___ftpack 0080  
                          ?_PortTestDC 0001                                ?_printf 008E  
                              _UI$2428 00C6                                ?_strcpy 0080  
                      _pan_servo_state 006B                             ??i2___wmul 0005  
                           ??i2_getRTC 0004                                i2l10032 27B8  
                              i2l10042 2822                                i2l10210 5766  
                              i2l10130 3CF0                                i2l10122 3CD0  
                              i2l10036 27C8                                i2l10124 3CDA  
                              i2l10300 3B74                                i2l10054 28F0  
                              i2l10214 576C                                i2l10118 3CBA  
                              i2l10208 5760                                i2l10152 3D90  
                              i2l10136 3D06                                i2l10144 3D24  
                              i2l10090 29E8                                i2l10138 3D1A  
                              i2l10146 3D6E                                i2l10322 3BBA  
                              i2l10068 2940                                i2l10076 2976  
                              i2l10164 3DDC                                i2l10148 3D78  
                              i2l10158 3DB6                                i2l10350 3C12  
                              i2l10270 3B1E                                i2l10096 2A4E  
                              i2l10344 3BF8                                i2l10328 3BC8  
                              i2l10272 3B22                                i2l10280 3B36  
                              i2l10098 2A54                                i2l10178 3E32  
                              i2l10354 3C18                                i2l10282 3B4E  
                              i2l10276 3B2E                                i2l10286 3B58  
                              i2l10800 3D48                                i2l10376 3C5E  
                              i2l10810 3E5A                                i2l10802 3D52  
                              i2l10804 3D5C                                i2l10822 3972  
                              i2l10814 3640                                i2l10806 3D66  
                              i2l10824 398E                                i2l10816 3662  
                              i2l10808 3E4A                                i2l10818 367E  
                            ?_delay_ms 0001                         PlatformTest@on 00B5  
                           ??i2_printf 0019                             ??i2_strcpy 0005  
                            ?_dispLogs 0012                                _SSPCON1 000FC6  
                              _SSPCON2 000FC5                                _SSPSTAT 000FC7  
                              _RTCflag 00E4                              ?_readCOND 0001  
                           _initEEPROM 5D00                                i2_putch 5D72  
                            ?_initTime 0080                        _f_loadingNewCan 00EC  
                      i2printRTC@month 003D                  __size_of_Distribution 00E2  
          __size_ofi2_I2C_Master_Start 0008                      __end_of_lcdNibble 52C2  
                              _Loading 1192            __size_ofi2_I2C_Master_Write 000A  
                     EEPROM_write@data 00AD                                __Hparam 0000  
                              __Lparam 0000     __size_ofi2_change_state_to_menu_12 0030  
   __size_ofi2_change_state_to_menu_22 0030                              ?_printRTC 0001  
                      __size_of___ftge 00C8                                ___awdiv 4AA8  
                              ___awmod 4CCC                             _initServos 5012  
                              ___lldiv 4B66                        __size_of___wmul 0036  
                      __size_of_getMAG 0032                                ___lwdiv 508A  
                              ___lwmod 538E                        __size_of_getRTC 0086  
                      printSortTimer@i 0049                              _CMCONbits 000FB4  
                    retrieveLog@logNum 0007                           logRun@byte11 00B6  
                         ?_BlockerTest 0001                        __size_of_initUI 0030  
                      __size_of_readIR 004C                                __pcinit 5558  
                           ??___awtoft 0091                   i2EEPROM_read@address 0001  
                      __size_of_logRun 0144                             ??___ftpack 0085  
                         logRun@byte_i 00B5                                __ramtop 1000  
                       _initGlobalVars 4844                                _lcdInst 5D62  
                              _handler 0008                                __ptext0 4918  
                              __ptext1 5C4E                                __ptext2 1192  
                              __ptext3 4C22                                __ptext4 4844  
                              __ptext5 586C                                __ptext6 5102  
                              __ptext7 55A6                                __ptext8 16E8  
                              __ptext9 55F2                        __size_of_printf 0438  
                              _readADC 5B38                        __size_of_strcpy 0036  
                              _initLCD 568A                                _cur_can 012D  
                              _loadRTC 4DFE                                _readMAG 563E  
                              _dpowers FAC0                     actuatorTest@i_1741 00AD  
                   actuatorTest@i_1751 00B0                     actuatorTest@i_1760 00B6  
                   actuatorTest@i_1752 00B1                     actuatorTest@i_1761 00B7  
                   actuatorTest@i_1770 00BC                     actuatorTest@i_1754 00B2  
                   actuatorTest@i_1771 00BD                     actuatorTest@i_1763 00B8  
                   actuatorTest@i_1755 00B3                           __size_of_arm 00FE  
                   actuatorTest@i_1780 00C2                     actuatorTest@i_1764 00B9  
                   actuatorTest@i_1748 00AE                     actuatorTest@i_1781 00C3  
                   actuatorTest@i_1773 00BE                     actuatorTest@i_1757 00B4  
                   actuatorTest@i_1749 00AF                     actuatorTest@i_1774 00BF  
                   actuatorTest@i_1758 00B5                     actuatorTest@i_1767 00BA  
                   actuatorTest@i_1768 00BB                     actuatorTest@i_1777 00C0  
                   actuatorTest@i_1778 00C1                                _isdigit 5B64  
                     ___awmod@dividend 0080                                getRTC@i 0083  
                 __size_of_retrieveLog 0126                     _motor_toggle_count 0149  
                         ??i2_delay_ms 0001                             ??_delay_ms 0080  
             __size_of_I2C_Master_Init 0060               __size_of_I2C_Master_Read 002E  
                        _log_startTime 0100               __size_of_I2C_Master_Wait 0014  
             __size_of_I2C_Master_Stop 0008                             ??_dispLogs 0014  
                         _Distribution 468C                         __pintcode_body 3AB2  
                 PlatformTest@res_1793 00AF                   end_of_initialization 559C  
                           ??_readCOND 0082                                logRun@i 00B7  
                           ??_initTime 0086                        ??i2_EEPROM_read 0003  
                              int_func 3AB2                    i2___wmul@multiplier 0001  
                        ??_EEPROM_read 0082                    __size_of_PortTestDC 0090  
                            i2u1180_47 54F2                              i2u1181_47 54FC  
                            i2u1182_47 5CD8                              i2u1177_47 390A  
                            i2u1178_47 54C6                              i2u1179_47 54D0  
            __size_of_I2C_Master_Start 0008              __size_of_I2C_Master_Write 000A  
                      ___lldiv@divisor 0084                        ___lldiv@counter 008C  
                      ??_initSortTimer 0085                                printf@c 00A8  
                         ??i2_printRTC 002A                                printf@f 008E  
                           ??_printRTC 00AB                       I2C_Master_Init@c 008D  
                     I2C_Master_Read@a 0081                                postdec1 000FE5  
                              postdec2 000FDD                                postinc0 000FEE  
                              postinc2 000FDE                     __end_ofi2_delay_ms 5CE8  
               __end_of_initGlobalVars 4918                             _sensorTest 2E08  
                           _servoTimes 005B                              _PORTAbits 000F80  
                            _PORTBbits 000F81                   __end_of_inputHandler 3AB2  
                         ??_BothServos 00AB                  __end_of_machineConfig 538E  
                 __end_of_PlatformTest 2E08                             _updateMenu 33D0  
                    i2_I2C_Master_Read 5C04                              _IR_signal 00E0  
                    i2_I2C_Master_Wait 5D40                      i2_I2C_Master_Stop 5DB6  
                            i2___awmod 51E6                      i2___lwdiv@divisor 0008  
                      _log_count_total 0145                         _PortTestPusher 5450  
                            i2___lwdiv 5506                              i2___lwmod 5714  
                    i2___lwdiv@counter 000C                     ?i2_I2C_Master_Read 0001  
                   ?i2_I2C_Master_Wait 0001                     __end_ofi2_printRTC 38C6  
                   ?i2_I2C_Master_Stop 0001                          actuatorTest@i 00C4  
         ??_change_state_to_menu_start 00C4                            ?_initEEPROM 0001  
                            i2_lcdInst 5D7E                          Loading@i_1123 00B6  
                        Loading@i_1132 00B8                          Loading@i_1134 00BA  
                        Loading@i_1135 00BC                          Loading@i_1137 00BE  
                           _total_time 00FA                            printf@width 00A9  
                 __size_of_stopSignals 001C                    ??i2_I2C_Master_Read 0002  
                            i2_isdigit 5C92                    ??i2_I2C_Master_Wait 0001  
                  ??i2_I2C_Master_Stop 0002                              i2getRTC@i 0004  
                   __end_of_BothServos 243E                    __end_of_EEPROM_read 5D00  
                          ?_initServos 0001                        ?_initGlobalVars 0001  
                       __end_of___ftge 4AA8                         __end_of___wmul 586C  
                       __end_of_getMAG 589E                         __end_of_getRTC 4F10  
                 __size_ofi2_lcdNibble 005A                         _timer2_counter 0073  
                        EEPROM_write@i 00AF                          i2lcdInst@data 0003  
                       __end_of_initUI 5900                         __end_of_readIR 55F2  
                       __end_of_logRun 416E                       i2___wmul@product 0005  
                       __end_of_printf 2050                           i2printf@flag 0026  
                       __end_of_strcpy 5836              __end_ofi2_I2C_Master_Read 5C2A  
            __end_ofi2_I2C_Master_Wait 5D52                           i2printf@prec 001D  
                  start_initialization 5558              __end_ofi2_I2C_Master_Stop 5DBE  
                           readMAG@res 0084                      __size_ofi2___wmul 0026  
                      _count_can_w_lab 0127            ?_change_state_to_menu_start 0001  
                    __size_ofi2_getRTC 0072                 __end_of_PortTestPusher 54AC  
                          __end_of_arm 45A4                              i2printf@c 0027  
                            i2printf@f 000D                     EEPROM_write@i_1409 00B0  
                i2I2C_Master_Read@temp 0003                             ?i2___awmod 0001  
                 BlockerTest@cond_flag 00B3                             ?i2___lwdiv 0006  
                           ?i2___lwmod 0001                      __size_ofi2_printf 036E  
                    __size_ofi2_strcpy 0032                      ??_I2C_Master_Init 0091  
                    ??_I2C_Master_Read 0081                      ??_I2C_Master_Wait 0080  
                           ?i2_lcdInst 0001                      ??_I2C_Master_Stop 0081  
                     __CFG_OSC$INTIO67 000000                             ?i2_isdigit 0001  
                           initTime@DD 0083                             initTime@MM 0084  
                           initTime@YY 0085                        retrieveLog@addr 0010  
                           logRun@addr 00B9                               ??___ftge 0098  
                            _SpeedTest 4F10                               ??___wmul 0084  
                             ??_getMAG 0086                               ??_getRTC 0083  
               __size_of_algorithmTest 00D6                            ?_sensorTest 0001  
                          __pdataBANK1 014D                       __CFG_LPT1OSC$OFF 000000  
                             ??_initUI 00C4                               ??_readIR 0082  
                             ??_logRun 00B1                               ID@i_1150 00A4  
                             ID@i_1152 00A6                               ID@i_1153 00B1  
                             ID@i_1145 00A2                           ??_PortTestDC 00AB  
               printSortTimer@timeDiff 0045       __size_of_change_state_to_menu_11 0030  
     __size_of_change_state_to_menu_12 0038       __size_of_change_state_to_menu_22 0038  
     __size_of_change_state_to_menu_23 0030                               ??_printf 009A  
     __size_of_change_state_to_logs_11 0030       __size_of_change_state_to_logs_12 0030  
     __size_of_change_state_to_logs_22 0030       __size_of_change_state_to_logs_23 002E  
     __size_of_change_state_to_logs_33 0030       __size_of_change_state_to_logs_34 0030  
                             ??_strcpy 0084                    __size_of_initEEPROM 0016  
                 __size_of_BlockerTest 01C6                    _printSortTimer$2568 0043  
                    __size_of___awtoft 0044                      __size_of___ftpack 010C  
                          __pbssCOMRAM 005B           __size_of_updateServoPosition 007E  
                          ?_updateMenu 0001                          __pcstackBANK0 0080  
                      ?_PortTestPusher 0001                __size_of_printSortTimer 0346  
                    i2___lwmod@divisor 0003                      i2___lwmod@counter 0005  
                         _isdigit$2066 0081                      __size_of_delay_ms 0028  
                       initSortTimer@i 0088                      printSortTimer@min 003F  
                    printSortTimer@sec 0041                    __size_of_initServos 0078  
                    __size_of_dispLogs 0024                       printRTC@INT_time 00AE  
                     _tilt_servo_state 0071                           i2strcpy@from 0003  
                             ?i2_putch 0001                        _count_pop_w_tab 012B  
                    __size_of_readCOND 004C                            _EEPROM_read 5CE8  
                     _I2C_Master_Start 5DAE                     __end_of_PortTestDC 4DFE  
                            _f_lastCan 00EA                               ?_Loading 0001  
                  i2I2C_Master_Write@d 0002                       _I2C_Master_Write 5D8A  
                    __size_of_initTime 0022                  i2_updateServoPosition 52C2  
                     ___lwdiv@dividend 0080                      __CFG_CCP2MX$PORTC 000000  
                            __pintcode 0008                             ?_SpeedTest 0001  
                        __pmediumconst FAAE                              _lcdNibble 5256  
                __size_of_inputHandler 01EC                               ?___awdiv 0086  
                            __ptext100 5D40                              __ptext101 5CCC  
                            __ptext102 51E6                               ?___awmod 0080  
                             ?___lldiv 0080                         _sensor_outputs 00DA  
                             ?___lwdiv 0080                               ?___lwmod 0087  
                __size_of_PlatformTest 0316                      __size_of_printRTC 02CA  
                             ?_lcdInst 0001                               ?_handler 0001  
                             ?_readADC 0001                               ?_initLCD 0001  
                             ?_loadRTC 0001                               ?_readMAG 0001  
                             ?_isdigit 0001             __size_ofi2_I2C_Master_Read 0026  
           __size_ofi2_I2C_Master_Wait 0012             __size_ofi2_I2C_Master_Stop 0008  
                            _firstboot 013D                              _cur_state 00E6  
                     ___lwdiv@quotient 0084                         __size_of_getIR 0072  
                          ??i2___awmod 0005                          _algorithmTest 476E  
                          ??i2___lwdiv 000A                            _COND_signal 00DE  
                          ??i2___lwmod 0005                         __size_of_putch 0010  
                          __size_of_ID 0530                            __size_of_UI 08C8  
                  __size_of_sensorTest 02FE             __end_ofi2_I2C_Master_Start 5DC6  
           __end_ofi2_I2C_Master_Write 5D9E                            ??i2_lcdInst 0003  
                       ___wmul@product 0084                               _LATAbits 000F89  
                             _LATBbits 000F8A                               _LATCbits 000F8B  
                             _LATDbits 000F8C                           _inputHandler 38C6  
                          ??i2_isdigit 0001                           _PlatformTest 2AF2  
                         BlockerTest@i 00AD                               _PIR2bits 000FA1  
                             i2u525_40 5C22                        PlatformTest@res 00AD  
                             i2u645_40 371E                               i2u592_40 25C4  
                             i2u592_47 25BA                               i2u588_40 2564  
                             i2u588_47 255A                               i2u983_40 294A  
                             i2u993_40 2A0E                               i2u985_40 2972  
                             i2u984_48 294C                    __size_of_updateMenu 02C0  
                       _log_completion 00F0                               i2u994_48 2A10  
                             i2u987_40 299C                               i2u979_40 2906  
                             i2u989_40 29C2                               i2u988_48 299E  
                     __CFG_WDTPS$32768 000000                             ?_lcdNibble 0001  
                            _was_low_1 0077                              _was_low_2 0079  
                            _was_low_3 007B                          ??_retrieveLog 0009  
                           _ADCON0bits 000FC2                      ___wmul@multiplier 0080  
                            _startTime 010E                               i2___wmul 5BDE  
                        lcdNibble@data 0081                               i2_getRTC 5174  
                           printf@flag 00A7                          lcdNibble@temp 0080  
                           printf@prec 009E                __size_of_updateArmState 003A  
                             Loading@i 00C0                               Loading@j 00C2  
                             i2_printf 243E                               i2_strcpy 589E  
                       ?_algorithmTest 0001                    I2C_Master_Read@temp 0082  
                            copy_data0 556C                     i2___awmod@dividend 0001  
                         ??_initEEPROM 00B1                              readIR@res 0084  
               ?i2_updateServoPosition 0001                       __size_ofi2_putch 000C  
                           _EECON1bits 000FA6                  __end_ofi2_EEPROM_read 5D2C  
                          _count_total 00FE                 i2delay_ms@milliseconds 0002  
                     ??_initGlobalVars 0080                               __Hrparam 0000  
                     __size_of_Loading 0556                              initTime@h 0081  
                            initTime@m 0080                              initTime@s 0086  
                            initTime@w 0082                               __Lrparam 0000  
                   __CFG_BOREN$SBORDIS 000000                              logRun@num 00B1  
                          ??_SpeedTest 00AB                  __end_of_initSortTimer 4CCC  
                         ??_initServos 0088                       __size_of___awdiv 00BE  
                     __size_of___awmod 00A2                _change_state_to_menu_11 5990  
           ?i2_change_state_to_menu_12 0001                _change_state_to_menu_12 57C8  
           ?i2_change_state_to_menu_22 0001                _change_state_to_menu_22 5790  
              _change_state_to_menu_23 5960                  i2___wmul@multiplicand 0003  
                     __size_of___lldiv 00BC                       __size_of___lwdiv 0078  
              _change_state_to_logs_11 5A80                _change_state_to_logs_12 5A50  
              _change_state_to_logs_22 5A20                _change_state_to_logs_23 5ADE  
              _change_state_to_logs_33 59F0                _change_state_to_logs_34 59C0  
                     __size_of___lwmod 0062                         readADC@channel 0081  
                             ___awtoft 56D0                               ___ftpack 4294  
                   i2I2C_Master_Read@a 0002                       __size_of_lcdInst 0010  
                     __size_of_handler 3C94                     __end_of_initEEPROM 5D16  
                      _I2C_Master_Init 53F0                       __size_of_readADC 002C  
                      _I2C_Master_Read 5AB0                       __size_of_initLCD 0046  
                         _f_ID_receive 0131                       __size_of_loadRTC 008C  
                     __size_of_readMAG 004C                        _I2C_Master_Wait 5D2C  
                      _I2C_Master_Stop 5DA6                       __size_of_isdigit 002A  
                             _delay_ms 5B8E                         _printSortTimer 27AC  
                      ___lwdiv@divisor 0082                        ___lwdiv@counter 0086  
                  __end_of_retrieveLog 4294                               __ptext10 5B8E  
                             __ptext11 49E0                               __ptext20 4B66  
                             __ptext12 56D0                               __ptext21 5B0C  
                             __ptext13 4294                               __ptext30 4E8A  
                             __ptext22 5C70                               __ptext14 468C  
                             __ptext31 5D8A                               __ptext23 568A  
                             __ptext15 532A                               __ptext40 43A0  
                             __ptext32 5DA6                               __ptext24 5D00  
                             __ptext16 402A                               __ptext41 2E08  
                             __ptext33 5DAE                               __ptext25 45A4  
                             __ptext17 58D0                               __ptext50 2050  
                             __ptext42 563E                               __ptext34 5AB0  
                             __ptext26 5CE8                               __ptext18 4DFE  
                             __ptext51 5CB0                               __ptext43 44A6  
                             __ptext35 5D2C                               __ptext27 0012  
                             __ptext19 53F0                               __ptext60 538E  
                             __ptext52 5012                               __ptext44 476E  
                             __ptext36 5790                               __ptext28 3106  
                             __ptext61 508A                               __ptext53 4F94  
                             __ptext45 08DA                               __ptext37 57C8  
                             __ptext29 5800                               __ptext70 589E  
                             __ptext62 5D62                               __ptext54 3E64  
                             __ptext46 4F10                               __ptext38 4CCC  
                             __ptext71 38C6                               __ptext63 5256  
                             __ptext55 5B38                               __ptext47 5450  
                             __ptext39 4AA8                               __ptext80 5A50  
                             __ptext72 5900                               __ptext56 1C18  
                             __ptext48 4D6E                               __ptext81 5A80  
                             __ptext73 5930                               __ptext65 3C9C  
                             __ptext57 5D52                               __ptext49 2AF2  
                             __ptext90 5BDE                               __ptext82 5C2A  
                             __ptext74 5960                               __ptext66 52C2  
                             __ptext58 5B64                               __ptext91 5714  
                             __ptext83 416E                               __ptext75 5990  
                             __ptext67 33D0                               __ptext59 5836  
                             __ptext92 5506                               __ptext84 5D16  
                             __ptext76 59C0                               __ptext68 5BB6  
                             __ptext93 5D7E                               __ptext85 5756  
                             __ptext77 59F0                               __ptext69 3690  
                             __ptext94 54AC                               __ptext86 27AC  
                             __ptext78 5ADE                               __ptext95 5174  
                             __ptext87 243E                               __ptext79 5A20  
                             __ptext96 5D94                               __ptext88 5D72  
                             __ptext97 5DB6                               __ptext89 5C92  
                             __ptext98 5DBE                               __ptext99 5C04  
                             _dispLogs 5C2A                          ?_actuatorTest 0001  
                   PlatformTest@i_1797 00B3                               _readCOND 55F2  
                        ??_stopSignals 0080                             strcpy@from 0082  
                       i2_isdigit$2066 0002                     __end_of_initServos 508A  
                        __size_of_Test 0106                          ?_EEPROM_write 00AB  
                             _initTime 5C70                          __size_of_main 00C8  
                        __size_of_sort 0022         ??i2_change_state_to_menu_start 0043  
                             _logstate 00F8                    _updateServoPosition 4F94  
               __size_of_machineConfig 0064                          ??i2_lcdNibble 0001  
                             _printRTC 3106                            ??_lcdNibble 0080  
                            printRTC@i 00C2                               int$flags 007E  
                         ??_sensorTest 00AB                         _log_total_time 00F6  
                   _f_can_coming_to_ID 0133                              printf@len 00A3  
                            printf@val 00A5      __end_ofi2_change_state_to_menu_12 5960  
    __end_ofi2_change_state_to_menu_22 5930                       ??_PortTestPusher 00AB  
                             loadRTC@i 0096                      i2___awmod@divisor 0003  
               __end_of_printSortTimer 2AF2                              putch@data 0082  
                    i2___awmod@counter 0005               __end_of_I2C_Master_Start 5DB6  
                          _OSCTUNEbits 000F9B               __end_of_I2C_Master_Write 5D94  
                           _INTCONbits 000FF2                   ?_updateServoPosition 0080  
                         ??_updateMenu 0043                        ??_algorithmTest 00AB  
                           _MAG_signal 00E2                               isdigit@c 0082  
                        sensorTest@res 00AD                         ??_actuatorTest 00AB  
                  _servo_timer_counter 006D                               intlevel2 0000  
                       ??_EEPROM_write 00AE                         BlockerTest@res 00AF  
                   __end_of_sensorTest 3106                       ___lwmod@dividend 0087  
                     ___lldiv@dividend 0080                           ?_EEPROM_read 0080  
                  __end_of_stopSignals 5CCC              ??_change_state_to_menu_11 002A  
            ??_change_state_to_menu_12 00AB              ??_change_state_to_menu_22 00AB  
            ??_change_state_to_menu_23 002A              ??_change_state_to_logs_11 002A  
            ??_change_state_to_logs_12 002A              ??_change_state_to_logs_22 002A  
            ??_change_state_to_logs_23 002A              ??_change_state_to_logs_33 002A  
            ??_change_state_to_logs_34 002A                               printf@ap 00A1  
                             printf@cp 009F                     __end_of_updateMenu 3690  
              __end_of_I2C_Master_Init 5450                __end_of_I2C_Master_Read 5ADE  
              __end_of_I2C_Master_Wait 5D40                          ??_BlockerTest 00AB  
              __end_of_I2C_Master_Stop 5DAE                            lcdInst@data 0082  
                        printRTC@F3238 0151                           retrieveLog@i 000E  
                          _retrieveLog 416E                    __end_ofi2_lcdNibble 5506  
                ??_updateServoPosition 0084                        ?_printSortTimer 0001  
                   _servo_timer_target 006F                       ___lldiv@quotient 0088  
                    I2C_Master_Write@d 0081                        ___lwmod@divisor 0089  
                       _updateArmState 5756                      _f_can_distributed 0137  
                             strcpy@cp 0084                               strcpy@to 0080  
                        _machineConfig 532A                        ___lwmod@counter 008B  
                    _updateServoStates 3C9C                          printRTC@month 00BE  
                        ?_Distribution 0001                     ?_updateServoStates 0001  
                        _machine_state 00FC                          dispLogs@myLog 0012  
                       _f_arm_position 00E8                    ??_updateServoStates 0009  
                   i2printRTC@INT_time 002D  
