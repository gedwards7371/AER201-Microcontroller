

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Wed Mar 15 14:41:59 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    72                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1
    94                           	psect	text79,global,reloc=2,class=CODE,delta=1
    95                           	psect	text80,global,reloc=2,class=CODE,delta=1
    96                           	psect	text81,global,reloc=2,class=CODE,delta=1
    97                           	psect	text82,global,reloc=2,class=CODE,delta=1
    98                           	psect	text83,global,reloc=2,class=CODE,delta=1
    99                           	psect	text84,global,reloc=2,class=CODE,delta=1
   100                           	psect	text85,global,reloc=2,class=CODE,delta=1
   101                           	psect	text86,global,reloc=2,class=CODE,delta=1
   102                           	psect	text87,global,reloc=2,class=CODE,delta=1
   103                           	psect	text88,global,reloc=2,class=CODE,delta=1
   104                           	psect	text89,global,reloc=2,class=CODE,delta=1
   105                           	psect	text90,global,reloc=2,class=CODE,delta=1
   106                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   107                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   108                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   109  0000                     
   110                           ; Version 1.40
   111                           ; Generated 01/12/2016 GMT
   112                           ; 
   113                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
   114                           ; All rights reserved.
   115                           ; 
   116                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   117                           ; 
   118                           ; Redistribution and use in source and binary forms, with or without modification, are
   119                           ; permitted provided that the following conditions are met:
   120                           ; 
   121                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   122                           ;        conditions and the following disclaimer.
   123                           ; 
   124                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   125                           ;        of conditions and the following disclaimer in the documentation and/or other
   126                           ;        materials provided with the distribution.
   127                           ; 
   128                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   129                           ;        software without specific prior written permission.
   130                           ; 
   131                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   132                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   133                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   134                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   135                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   136                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   137                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   138                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   139                           ; 
   140                           ; 
   141                           ; Code-generator required, PIC18F4620 Definitions
   142                           ; 
   143                           ; SFR Addresses
   144  0000                     
   145                           	psect	idataBANK1
   146  0047BE                     __pidataBANK1:
   147                           	opt stack 0
   148                           
   149                           ;initializer for UI@F3223
   150  0047BE  4D                 	db	77
   151  0047BF  4D                 	db	77
   152  0047C0  4D                 	db	77
   153  0047C1  00                 	db	0
   154                           
   155                           ;initializer for printRTC@F3214
   156  0047C2  4D                 	db	77
   157  0047C3  4D                 	db	77
   158  0047C4  4D                 	db	77
   159  0047C5  00                 	db	0
   160                           
   161                           	psect	mediumconst
   162  00FB14                     __pmediumconst:
   163                           	opt stack 0
   164  00FB14  00                 	db	0
   165  00FB15                     _keys:
   166                           	opt stack 0
   167  00FB15  31                 	db	49
   168  00FB16  32                 	db	50
   169  00FB17  33                 	db	51
   170  00FB18  41                 	db	65
   171  00FB19  34                 	db	52
   172  00FB1A  35                 	db	53
   173  00FB1B  36                 	db	54
   174  00FB1C  42                 	db	66
   175  00FB1D  37                 	db	55
   176  00FB1E  38                 	db	56
   177  00FB1F  39                 	db	57
   178  00FB20  43                 	db	67
   179  00FB21  2A                 	db	42
   180  00FB22  30                 	db	48
   181  00FB23  23                 	db	35
   182  00FB24  44                 	db	68
   183  00FB25  00                 	db	0
   184  00FB26                     __end_of_keys:
   185                           	opt stack 0
   186  00FB26                     _dpowers:
   187                           	opt stack 0
   188  00FB26  0001               	dw	1
   189  00FB28  000A               	dw	10
   190  00FB2A  0064               	dw	100
   191  00FB2C  03E8               	dw	1000
   192  00FB2E  2710               	dw	10000
   193  00FB30                     __end_of_dpowers:
   194                           	opt stack 0
   195  0000                     _ADCON0	set	4034
   196  0000                     _ADCON0bits	set	4034
   197  0000                     _ADCON1	set	4033
   198  0000                     _ADCON2	set	4032
   199  0000                     _ADRESH	set	4036
   200  0000                     _ADRESL	set	4035
   201  0000                     _CMCONbits	set	4020
   202  0000                     _CVRCON	set	4021
   203  0000                     _EEADR	set	4009
   204  0000                     _EEADRH	set	4010
   205  0000                     _EECON1bits	set	4006
   206  0000                     _EECON2	set	4007
   207  0000                     _EEDATA	set	4008
   208  0000                     _INTCONbits	set	4082
   209  0000                     _LATA	set	3977
   210  0000                     _LATAbits	set	3977
   211  0000                     _LATB	set	3978
   212  0000                     _LATC	set	3979
   213  0000                     _LATCbits	set	3979
   214  0000                     _LATD	set	3980
   215  0000                     _LATDbits	set	3980
   216  0000                     _LATE	set	3981
   217  0000                     _LATEbits	set	3981
   218  0000                     _OSCCON	set	4051
   219  0000                     _OSCTUNEbits	set	3995
   220  0000                     _PIR2bits	set	4001
   221  0000                     _PORTAbits	set	3968
   222  0000                     _PORTB	set	3969
   223  0000                     _PORTBbits	set	3969
   224  0000                     _SSPADD	set	4040
   225  0000                     _SSPBUF	set	4041
   226  0000                     _SSPCON1	set	4038
   227  0000                     _SSPCON2	set	4037
   228  0000                     _SSPSTAT	set	4039
   229  0000                     _T0CON	set	4053
   230  0000                     _T1CON	set	4045
   231  0000                     _T3CON	set	4017
   232  0000                     _TMR0H	set	4055
   233  0000                     _TMR0L	set	4054
   234  0000                     _TMR1H	set	4047
   235  0000                     _TMR1L	set	4046
   236  0000                     _TMR3H	set	4019
   237  0000                     _TMR3L	set	4018
   238  0000                     _TRISA	set	3986
   239  0000                     _TRISB	set	3987
   240  0000                     _TRISC	set	3988
   241  0000                     _TRISD	set	3989
   242  0000                     _TRISE	set	3990
   243  0000                     _ACKDT	set	32301
   244  0000                     _ACKEN	set	32300
   245  0000                     _ADIE	set	31982
   246  0000                     _INT1IE	set	32643
   247  0000                     _INT1IF	set	32640
   248  0000                     _PEIE	set	32662
   249  0000                     _PEN	set	32298
   250  0000                     _RCEN	set	32299
   251  0000                     _RSEN	set	32297
   252  0000                     _SEN	set	32296
   253  0000                     _TMR0IE	set	32661
   254  0000                     _TMR0IF	set	32658
   255  0000                     _TMR0ON	set	32431
   256  0000                     _TMR1IE	set	31976
   257  0000                     _TMR1IF	set	31984
   258  0000                     _TMR1ON	set	32360
   259  0000                     _TMR2IE	set	31977
   260  0000                     _TMR3IE	set	32001
   261  0000                     _TMR3IF	set	32009
   262  0000                     _TMR3ON	set	32136
   263  0000                     _TRISC3	set	31907
   264  0000                     _TRISC4	set	31908
   265  0000                     _nRBPU	set	32655
   266  00FB30                     STR_21:
   267  00FB30  25                 	db	37
   268  00FB31  30                 	db	48	;'0'
   269  00FB32  32                 	db	50	;'2'
   270  00FB33  64                 	db	100	;'d'
   271  00FB34  25                 	db	37
   272  00FB35  73                 	db	115	;'s'
   273  00FB36  20                 	db	32
   274  00FB37  7C                 	db	124
   275  00FB38  20                 	db	32
   276  00FB39  25                 	db	37
   277  00FB3A  30                 	db	48	;'0'
   278  00FB3B  32                 	db	50	;'2'
   279  00FB3C  64                 	db	100	;'d'
   280  00FB3D  3A                 	db	58	;':'
   281  00FB3E  25                 	db	37
   282  00FB3F  30                 	db	48	;'0'
   283  00FB40  32                 	db	50	;'2'
   284  00FB41  64                 	db	100	;'d'
   285  00FB42  3A                 	db	58	;':'
   286  00FB43  25                 	db	37
   287  00FB44  30                 	db	48	;'0'
   288  00FB45  32                 	db	50	;'2'
   289  00FB46  64                 	db	100	;'d'
   290  00FB47  00                 	db	0
   291  00FB48                     STR_66:
   292  00FB48  28                 	db	40
   293  00FB49  64                 	db	100	;'d'
   294  00FB4A  61                 	db	97	;'a'
   295  00FB4B  74                 	db	116	;'t'
   296  00FB4C  61                 	db	97	;'a'
   297  00FB4D  3A                 	db	58	;':'
   298  00FB4E  20                 	db	32
   299  00FB4F  25                 	db	37
   300  00FB50  75                 	db	117	;'u'
   301  00FB51  2C                 	db	44
   302  00FB52  20                 	db	32
   303  00FB53  61                 	db	97	;'a'
   304  00FB54  64                 	db	100	;'d'
   305  00FB55  64                 	db	100	;'d'
   306  00FB56  72                 	db	114	;'r'
   307  00FB57  3A                 	db	58	;':'
   308  00FB58  20                 	db	32
   309  00FB59  25                 	db	37
   310  00FB5A  75                 	db	117	;'u'
   311  00FB5B  29                 	db	41
   312  00FB5C  00                 	db	0
   313  00FB5D                     STR_27:
   314  00FB5D  4E                 	db	78	;'N'
   315  00FB5E  4F                 	db	79	;'O'
   316  00FB5F  20                 	db	32
   317  00FB60  4C                 	db	76	;'L'
   318  00FB61  41                 	db	65	;'A'
   319  00FB62  42                 	db	66	;'B'
   320  00FB63  3A                 	db	58	;':'
   321  00FB64  20                 	db	32
   322  00FB65  25                 	db	37
   323  00FB66  64                 	db	100	;'d'
   324  00FB67  7C                 	db	124
   325  00FB68  4C                 	db	76	;'L'
   326  00FB69  41                 	db	65	;'A'
   327  00FB6A  42                 	db	66	;'B'
   328  00FB6B  3A                 	db	58	;':'
   329  00FB6C  20                 	db	32
   330  00FB6D  25                 	db	37
   331  00FB6E  64                 	db	100	;'d'
   332  00FB6F  00                 	db	0
   333  00FB70                     STR_25:
   334  00FB70  4E                 	db	78	;'N'
   335  00FB71  4F                 	db	79	;'O'
   336  00FB72  20                 	db	32
   337  00FB73  54                 	db	84	;'T'
   338  00FB74  41                 	db	65	;'A'
   339  00FB75  42                 	db	66	;'B'
   340  00FB76  3A                 	db	58	;':'
   341  00FB77  20                 	db	32
   342  00FB78  25                 	db	37
   343  00FB79  64                 	db	100	;'d'
   344  00FB7A  7C                 	db	124
   345  00FB7B  54                 	db	84	;'T'
   346  00FB7C  41                 	db	65	;'A'
   347  00FB7D  42                 	db	66	;'B'
   348  00FB7E  3A                 	db	58	;':'
   349  00FB7F  20                 	db	32
   350  00FB80  25                 	db	37
   351  00FB81  64                 	db	100	;'d'
   352  00FB82  00                 	db	0
   353  00FB83                     STR_111:
   354  00FB83  44                 	db	68	;'D'
   355  00FB84  20                 	db	32
   356  00FB85  57                 	db	87	;'W'
   357  00FB86  49                 	db	73	;'I'
   358  00FB87  4C                 	db	76	;'L'
   359  00FB88  4C                 	db	76	;'L'
   360  00FB89  20                 	db	32
   361  00FB8A  52                 	db	82	;'R'
   362  00FB8B  45                 	db	69	;'E'
   363  00FB8C  54                 	db	84	;'T'
   364  00FB8D  55                 	db	85	;'U'
   365  00FB8E  52                 	db	82	;'R'
   366  00FB8F  4E                 	db	78	;'N'
   367  00FB90  20                 	db	32
   368  00FB91  20                 	db	32
   369  00FB92  20                 	db	32
   370  00FB93  20                 	db	32
   371  00FB94  00                 	db	0
   372  00FB95                     STR_112:
   373  00FB95  4F                 	db	79	;'O'
   374  00FB96  54                 	db	84	;'T'
   375  00FB97  48                 	db	72	;'H'
   376  00FB98  45                 	db	69	;'E'
   377  00FB99  52                 	db	82	;'R'
   378  00FB9A  20                 	db	32
   379  00FB9B  53                 	db	83	;'S'
   380  00FB9C  45                 	db	69	;'E'
   381  00FB9D  54                 	db	84	;'T'
   382  00FB9E  53                 	db	83	;'S'
   383  00FB9F  20                 	db	32
   384  00FBA0  52                 	db	82	;'R'
   385  00FBA1  41                 	db	65	;'A'
   386  00FBA2  35                 	db	53	;'5'
   387  00FBA3  20                 	db	32
   388  00FBA4  20                 	db	32
   389  00FBA5  20                 	db	32
   390  00FBA6  00                 	db	0
   391  00FBA7                     STR_3:
   392  00FBA7  2D                 	db	45
   393  00FBA8  2D                 	db	45
   394  00FBA9  20                 	db	32
   395  00FBAA  4C                 	db	76	;'L'
   396  00FBAB  4F                 	db	79	;'O'
   397  00FBAC  47                 	db	71	;'G'
   398  00FBAD  20                 	db	32
   399  00FBAE  25                 	db	37
   400  00FBAF  32                 	db	50	;'2'
   401  00FBB0  64                 	db	100	;'d'
   402  00FBB1  20                 	db	32
   403  00FBB2  48                 	db	72	;'H'
   404  00FBB3  45                 	db	69	;'E'
   405  00FBB4  52                 	db	82	;'R'
   406  00FBB5  45                 	db	69	;'E'
   407  00FBB6  2D                 	db	45
   408  00FBB7  2D                 	db	45
   409  00FBB8  00                 	db	0
   410  00FBB9                     STR_1:
   411  00FBB9  52                 	db	82	;'R'
   412  00FBBA  45                 	db	69	;'E'
   413  00FBBB  53                 	db	83	;'S'
   414  00FBBC  55                 	db	85	;'U'
   415  00FBBD  4C                 	db	76	;'L'
   416  00FBBE  54                 	db	84	;'T'
   417  00FBBF  53                 	db	83	;'S'
   418  00FBC0  20                 	db	32
   419  00FBC1  49                 	db	73	;'I'
   420  00FBC2  4E                 	db	78	;'N'
   421  00FBC3  20                 	db	32
   422  00FBC4  4C                 	db	76	;'L'
   423  00FBC5  4F                 	db	79	;'O'
   424  00FBC6  47                 	db	71	;'G'
   425  00FBC7  20                 	db	32
   426  00FBC8  25                 	db	37
   427  00FBC9  64                 	db	100	;'d'
   428  00FBCA  00                 	db	0
   429  00FBCB                     STR_102:
   430  00FBCB  4D                 	db	77	;'M'
   431  00FBCC  49                 	db	73	;'I'
   432  00FBCD  44                 	db	68	;'D'
   433  00FBCE  20                 	db	32
   434  00FBCF  2D                 	db	45
   435  00FBD0  2D                 	db	45
   436  00FBD1  20                 	db	32
   437  00FBD2  32                 	db	50	;'2'
   438  00FBD3  73                 	db	115	;'s'
   439  00FBD4  20                 	db	32
   440  00FBD5  20                 	db	32
   441  00FBD6  20                 	db	32
   442  00FBD7  20                 	db	32
   443  00FBD8  20                 	db	32
   444  00FBD9  20                 	db	32
   445  00FBDA  20                 	db	32
   446  00FBDB  00                 	db	0
   447  00FBDC                     STR_105:
   448  00FBDC  44                 	db	68	;'D'
   449  00FBDD  52                 	db	82	;'R'
   450  00FBDE  4F                 	db	79	;'O'
   451  00FBDF  50                 	db	80	;'P'
   452  00FBE0  20                 	db	32
   453  00FBE1  2D                 	db	45
   454  00FBE2  2D                 	db	45
   455  00FBE3  20                 	db	32
   456  00FBE4  32                 	db	50	;'2'
   457  00FBE5  73                 	db	115	;'s'
   458  00FBE6  20                 	db	32
   459  00FBE7  20                 	db	32
   460  00FBE8  20                 	db	32
   461  00FBE9  20                 	db	32
   462  00FBEA  20                 	db	32
   463  00FBEB  20                 	db	32
   464  00FBEC  00                 	db	0
   465  00FBED                     STR_99:
   466  00FBED  4C                 	db	76	;'L'
   467  00FBEE  45                 	db	69	;'E'
   468  00FBEF  46                 	db	70	;'F'
   469  00FBF0  54                 	db	84	;'T'
   470  00FBF1  20                 	db	32
   471  00FBF2  2D                 	db	45
   472  00FBF3  2D                 	db	45
   473  00FBF4  20                 	db	32
   474  00FBF5  32                 	db	50	;'2'
   475  00FBF6  73                 	db	115	;'s'
   476  00FBF7  20                 	db	32
   477  00FBF8  20                 	db	32
   478  00FBF9  20                 	db	32
   479  00FBFA  20                 	db	32
   480  00FBFB  20                 	db	32
   481  00FBFC  20                 	db	32
   482  00FBFD  00                 	db	0
   483  00FBFE                     STR_104:
   484  00FBFE  4C                 	db	76	;'L'
   485  00FBFF  45                 	db	69	;'E'
   486  00FC00  56                 	db	86	;'V'
   487  00FC01  45                 	db	69	;'E'
   488  00FC02  4C                 	db	76	;'L'
   489  00FC03  20                 	db	32
   490  00FC04  2D                 	db	45
   491  00FC05  2D                 	db	45
   492  00FC06  20                 	db	32
   493  00FC07  32                 	db	50	;'2'
   494  00FC08  73                 	db	115	;'s'
   495  00FC09  20                 	db	32
   496  00FC0A  20                 	db	32
   497  00FC0B  20                 	db	32
   498  00FC0C  20                 	db	32
   499  00FC0D  20                 	db	32
   500  00FC0E  00                 	db	0
   501  00FC0F                     STR_98:
   502  00FC0F  52                 	db	82	;'R'
   503  00FC10  49                 	db	73	;'I'
   504  00FC11  47                 	db	71	;'G'
   505  00FC12  48                 	db	72	;'H'
   506  00FC13  54                 	db	84	;'T'
   507  00FC14  20                 	db	32
   508  00FC15  2D                 	db	45
   509  00FC16  2D                 	db	45
   510  00FC17  20                 	db	32
   511  00FC18  32                 	db	50	;'2'
   512  00FC19  73                 	db	115	;'s'
   513  00FC1A  20                 	db	32
   514  00FC1B  20                 	db	32
   515  00FC1C  20                 	db	32
   516  00FC1D  20                 	db	32
   517  00FC1E  20                 	db	32
   518  00FC1F  00                 	db	0
   519  00FC20                     STR_97:
   520  00FC20  4D                 	db	77	;'M'
   521  00FC21  49                 	db	73	;'I'
   522  00FC22  44                 	db	68	;'D'
   523  00FC23  44                 	db	68	;'D'
   524  00FC24  4C                 	db	76	;'L'
   525  00FC25  45                 	db	69	;'E'
   526  00FC26  20                 	db	32
   527  00FC27  2D                 	db	45
   528  00FC28  2D                 	db	45
   529  00FC29  20                 	db	32
   530  00FC2A  32                 	db	50	;'2'
   531  00FC2B  73                 	db	115	;'s'
   532  00FC2C  20                 	db	32
   533  00FC2D  20                 	db	32
   534  00FC2E  20                 	db	32
   535  00FC2F  20                 	db	32
   536  00FC30  00                 	db	0
   537  00FC31                     STR_115:
   538  00FC31  44                 	db	68	;'D'
   539  00FC32  20                 	db	32
   540  00FC33  57                 	db	87	;'W'
   541  00FC34  49                 	db	73	;'I'
   542  00FC35  4C                 	db	76	;'L'
   543  00FC36  4C                 	db	76	;'L'
   544  00FC37  20                 	db	32
   545  00FC38  52                 	db	82	;'R'
   546  00FC39  45                 	db	69	;'E'
   547  00FC3A  54                 	db	84	;'T'
   548  00FC3B  55                 	db	85	;'U'
   549  00FC3C  52                 	db	82	;'R'
   550  00FC3D  4E                 	db	78	;'N'
   551  00FC3E  20                 	db	32
   552  00FC3F  20                 	db	32
   553  00FC40  20                 	db	32
   554  00FC41  00                 	db	0
   555  00FC42                     STR_100:
   556  00FC42  4D                 	db	77	;'M'
   557  00FC43  49                 	db	73	;'I'
   558  00FC44  44                 	db	68	;'D'
   559  00FC45  2D                 	db	45
   560  00FC46  4C                 	db	76	;'L'
   561  00FC47  45                 	db	69	;'E'
   562  00FC48  46                 	db	70	;'F'
   563  00FC49  54                 	db	84	;'T'
   564  00FC4A  20                 	db	32
   565  00FC4B  2D                 	db	45
   566  00FC4C  2D                 	db	45
   567  00FC4D  20                 	db	32
   568  00FC4E  32                 	db	50	;'2'
   569  00FC4F  73                 	db	115	;'s'
   570  00FC50  20                 	db	32
   571  00FC51  20                 	db	32
   572  00FC52  00                 	db	0
   573  00FC53                     STR_101:
   574  00FC53  4D                 	db	77	;'M'
   575  00FC54  49                 	db	73	;'I'
   576  00FC55  44                 	db	68	;'D'
   577  00FC56  2D                 	db	45
   578  00FC57  52                 	db	82	;'R'
   579  00FC58  49                 	db	73	;'I'
   580  00FC59  47                 	db	71	;'G'
   581  00FC5A  48                 	db	72	;'H'
   582  00FC5B  54                 	db	84	;'T'
   583  00FC5C  20                 	db	32
   584  00FC5D  2D                 	db	45
   585  00FC5E  2D                 	db	45
   586  00FC5F  20                 	db	32
   587  00FC60  32                 	db	50	;'2'
   588  00FC61  73                 	db	115	;'s'
   589  00FC62  20                 	db	32
   590  00FC63  00                 	db	0
   591  00FC64                     STR_116:
   592  00FC64  45                 	db	69	;'E'
   593  00FC65  4C                 	db	76	;'L'
   594  00FC66  53                 	db	83	;'S'
   595  00FC67  45                 	db	69	;'E'
   596  00FC68  20                 	db	32
   597  00FC69  54                 	db	84	;'T'
   598  00FC6A  4F                 	db	79	;'O'
   599  00FC6B  47                 	db	71	;'G'
   600  00FC6C  47                 	db	71	;'G'
   601  00FC6D  4C                 	db	76	;'L'
   602  00FC6E  45                 	db	69	;'E'
   603  00FC6F  53                 	db	83	;'S'
   604  00FC70  20                 	db	32
   605  00FC71  52                 	db	82	;'R'
   606  00FC72  41                 	db	65	;'A'
   607  00FC73  35                 	db	53	;'5'
   608  00FC74  00                 	db	0
   609  00FC75                     STR_72:
   610  00FC75  41                 	db	65	;'A'
   611  00FC76  4C                 	db	76	;'L'
   612  00FC77  47                 	db	71	;'G'
   613  00FC78  31                 	db	49	;'1'
   614  00FC79  3A                 	db	58	;':'
   615  00FC7A  20                 	db	32
   616  00FC7B  39                 	db	57	;'9'
   617  00FC7C  20                 	db	32
   618  00FC7D  50                 	db	80	;'P'
   619  00FC7E  4F                 	db	79	;'O'
   620  00FC7F  50                 	db	80	;'P'
   621  00FC80  4E                 	db	78	;'N'
   622  00FC81  4F                 	db	79	;'O'
   623  00FC82  54                 	db	84	;'T'
   624  00FC83  41                 	db	65	;'A'
   625  00FC84  42                 	db	66	;'B'
   626  00FC85  00                 	db	0
   627  00FC86                     STR_68:
   628  00FC86  31                 	db	49	;'1'
   629  00FC87  2E                 	db	46
   630  00FC88  41                 	db	65	;'A'
   631  00FC89  4C                 	db	76	;'L'
   632  00FC8A  47                 	db	71	;'G'
   633  00FC8B  7C                 	db	124
   634  00FC8C  32                 	db	50	;'2'
   635  00FC8D  2E                 	db	46
   636  00FC8E  53                 	db	83	;'S'
   637  00FC8F  4E                 	db	78	;'N'
   638  00FC90  52                 	db	82	;'R'
   639  00FC91  7C                 	db	124
   640  00FC92  33                 	db	51	;'3'
   641  00FC93  2E                 	db	46
   642  00FC94  41                 	db	65	;'A'
   643  00FC95  43                 	db	67	;'C'
   644  00FC96  00                 	db	0
   645  00FC97                     STR_92:
   646  00FC97  54                 	db	84	;'T'
   647  00FC98  53                 	db	83	;'S'
   648  00FC99  54                 	db	84	;'T'
   649  00FC9A  3A                 	db	58	;':'
   650  00FC9B  20                 	db	32
   651  00FC9C  43                 	db	67	;'C'
   652  00FC9D  4F                 	db	79	;'O'
   653  00FC9E  4E                 	db	78	;'N'
   654  00FC9F  44                 	db	68	;'D'
   655  00FCA0  20                 	db	32
   656  00FCA1  53                 	db	83	;'S'
   657  00FCA2  4F                 	db	79	;'O'
   658  00FCA3  4C                 	db	76	;'L'
   659  00FCA4  4E                 	db	78	;'N'
   660  00FCA5  27                 	db	39
   661  00FCA6  44                 	db	68	;'D'
   662  00FCA7  00                 	db	0
   663  00FCA8                     STR_94:
   664  00FCA8  54                 	db	84	;'T'
   665  00FCA9  53                 	db	83	;'S'
   666  00FCAA  54                 	db	84	;'T'
   667  00FCAB  3A                 	db	58	;':'
   668  00FCAC  20                 	db	32
   669  00FCAD  50                 	db	80	;'P'
   670  00FCAE  55                 	db	85	;'U'
   671  00FCAF  53                 	db	83	;'S'
   672  00FCB0  48                 	db	72	;'H'
   673  00FCB1  20                 	db	32
   674  00FCB2  53                 	db	83	;'S'
   675  00FCB3  4F                 	db	79	;'O'
   676  00FCB4  4C                 	db	76	;'L'
   677  00FCB5  4E                 	db	78	;'N'
   678  00FCB6  27                 	db	39
   679  00FCB7  44                 	db	68	;'D'
   680  00FCB8  00                 	db	0
   681  00FCB9                     STR_69:
   682  00FCB9  34                 	db	52	;'4'
   683  00FCBA  2E                 	db	46
   684  00FCBB  48                 	db	72	;'H'
   685  00FCBC  49                 	db	73	;'I'
   686  00FCBD  7C                 	db	124
   687  00FCBE  35                 	db	53	;'5'
   688  00FCBF  2E                 	db	46
   689  00FCC0  54                 	db	84	;'T'
   690  00FCC1  4F                 	db	79	;'O'
   691  00FCC2  47                 	db	71	;'G'
   692  00FCC3  7C                 	db	124
   693  00FCC4  36                 	db	54	;'6'
   694  00FCC5  2E                 	db	46
   695  00FCC6  45                 	db	69	;'E'
   696  00FCC7  45                 	db	69	;'E'
   697  00FCC8  50                 	db	80	;'P'
   698  00FCC9  00                 	db	0
   699  00FCCA                     STR_110:
   700  00FCCA  54                 	db	84	;'T'
   701  00FCCB  53                 	db	83	;'S'
   702  00FCCC  54                 	db	84	;'T'
   703  00FCCD  3A                 	db	58	;':'
   704  00FCCE  20                 	db	32
   705  00FCCF  42                 	db	66	;'B'
   706  00FCD0  4F                 	db	79	;'O'
   707  00FCD1  54                 	db	84	;'T'
   708  00FCD2  48                 	db	72	;'H'
   709  00FCD3  20                 	db	32
   710  00FCD4  53                 	db	83	;'S'
   711  00FCD5  45                 	db	69	;'E'
   712  00FCD6  52                 	db	82	;'R'
   713  00FCD7  56                 	db	86	;'V'
   714  00FCD8  4F                 	db	79	;'O'
   715  00FCD9  53                 	db	83	;'S'
   716  00FCDA  00                 	db	0
   717  00FCDB                     STR_41:
   718  00FCDB  4C                 	db	76	;'L'
   719  00FCDC  4F                 	db	79	;'O'
   720  00FCDD  47                 	db	71	;'G'
   721  00FCDE  20                 	db	32
   722  00FCDF  31                 	db	49	;'1'
   723  00FCE0  20                 	db	32
   724  00FCE1  20                 	db	32
   725  00FCE2  20                 	db	32
   726  00FCE3  20                 	db	32
   727  00FCE4  20                 	db	32
   728  00FCE5  20                 	db	32
   729  00FCE6  20                 	db	32
   730  00FCE7  20                 	db	32
   731  00FCE8  20                 	db	32
   732  00FCE9  20                 	db	32
   733  00FCEA  20                 	db	32
   734  00FCEB  00                 	db	0
   735  00FCEC                     STR_40:
   736  00FCEC  4C                 	db	76	;'L'
   737  00FCED  4F                 	db	79	;'O'
   738  00FCEE  47                 	db	71	;'G'
   739  00FCEF  20                 	db	32
   740  00FCF0  32                 	db	50	;'2'
   741  00FCF1  20                 	db	32
   742  00FCF2  20                 	db	32
   743  00FCF3  20                 	db	32
   744  00FCF4  20                 	db	32
   745  00FCF5  20                 	db	32
   746  00FCF6  20                 	db	32
   747  00FCF7  20                 	db	32
   748  00FCF8  20                 	db	32
   749  00FCF9  20                 	db	32
   750  00FCFA  20                 	db	32
   751  00FCFB  20                 	db	32
   752  00FCFC  00                 	db	0
   753  00FCFD                     STR_44:
   754  00FCFD  4C                 	db	76	;'L'
   755  00FCFE  4F                 	db	79	;'O'
   756  00FCFF  47                 	db	71	;'G'
   757  00FD00  20                 	db	32
   758  00FD01  33                 	db	51	;'3'
   759  00FD02  20                 	db	32
   760  00FD03  20                 	db	32
   761  00FD04  20                 	db	32
   762  00FD05  20                 	db	32
   763  00FD06  20                 	db	32
   764  00FD07  20                 	db	32
   765  00FD08  20                 	db	32
   766  00FD09  20                 	db	32
   767  00FD0A  20                 	db	32
   768  00FD0B  20                 	db	32
   769  00FD0C  20                 	db	32
   770  00FD0D  00                 	db	0
   771  00FD0E                     STR_48:
   772  00FD0E  4C                 	db	76	;'L'
   773  00FD0F  4F                 	db	79	;'O'
   774  00FD10  47                 	db	71	;'G'
   775  00FD11  20                 	db	32
   776  00FD12  34                 	db	52	;'4'
   777  00FD13  20                 	db	32
   778  00FD14  20                 	db	32
   779  00FD15  20                 	db	32
   780  00FD16  20                 	db	32
   781  00FD17  20                 	db	32
   782  00FD18  20                 	db	32
   783  00FD19  20                 	db	32
   784  00FD1A  20                 	db	32
   785  00FD1B  20                 	db	32
   786  00FD1C  20                 	db	32
   787  00FD1D  20                 	db	32
   788  00FD1E  00                 	db	0
   789  00FD1F                     STR_36:
   790  00FD1F  33                 	db	51	;'3'
   791  00FD20  2E                 	db	46
   792  00FD21  20                 	db	32
   793  00FD22  4C                 	db	76	;'L'
   794  00FD23  4F                 	db	79	;'O'
   795  00FD24  47                 	db	71	;'G'
   796  00FD25  53                 	db	83	;'S'
   797  00FD26  20                 	db	32
   798  00FD27  20                 	db	32
   799  00FD28  20                 	db	32
   800  00FD29  20                 	db	32
   801  00FD2A  20                 	db	32
   802  00FD2B  20                 	db	32
   803  00FD2C  20                 	db	32
   804  00FD2D  20                 	db	32
   805  00FD2E  20                 	db	32
   806  00FD2F  00                 	db	0
   807  00FD30                     STR_32:
   808  00FD30  32                 	db	50	;'2'
   809  00FD31  2E                 	db	46
   810  00FD32  20                 	db	32
   811  00FD33  53                 	db	83	;'S'
   812  00FD34  4F                 	db	79	;'O'
   813  00FD35  52                 	db	82	;'R'
   814  00FD36  54                 	db	84	;'T'
   815  00FD37  20                 	db	32
   816  00FD38  20                 	db	32
   817  00FD39  20                 	db	32
   818  00FD3A  20                 	db	32
   819  00FD3B  20                 	db	32
   820  00FD3C  20                 	db	32
   821  00FD3D  20                 	db	32
   822  00FD3E  20                 	db	32
   823  00FD3F  20                 	db	32
   824  00FD40  00                 	db	0
   825  00FD41                     STR_33:
   826  00FD41  31                 	db	49	;'1'
   827  00FD42  2E                 	db	46
   828  00FD43  20                 	db	32
   829  00FD44  44                 	db	68	;'D'
   830  00FD45  41                 	db	65	;'A'
   831  00FD46  54                 	db	84	;'T'
   832  00FD47  45                 	db	69	;'E'
   833  00FD48  2F                 	db	47
   834  00FD49  54                 	db	84	;'T'
   835  00FD4A  49                 	db	73	;'I'
   836  00FD4B  4D                 	db	77	;'M'
   837  00FD4C  45                 	db	69	;'E'
   838  00FD4D  20                 	db	32
   839  00FD4E  20                 	db	32
   840  00FD4F  20                 	db	32
   841  00FD50  20                 	db	32
   842  00FD51  00                 	db	0
   843  00FD52                     STR_24:
   844  00FD52  20                 	db	32
   845  00FD53  2D                 	db	45
   846  00FD54  2D                 	db	45
   847  00FD55  20                 	db	32
   848  00FD56  50                 	db	80	;'P'
   849  00FD57  4F                 	db	79	;'O'
   850  00FD58  50                 	db	80	;'P'
   851  00FD59  20                 	db	32
   852  00FD5A  20                 	db	32
   853  00FD5B  43                 	db	67	;'C'
   854  00FD5C  41                 	db	65	;'A'
   855  00FD5D  4E                 	db	78	;'N'
   856  00FD5E  20                 	db	32
   857  00FD5F  2D                 	db	45
   858  00FD60  2D                 	db	45
   859  00FD61  20                 	db	32
   860  00FD62  00                 	db	0
   861  00FD63                     STR_26:
   862  00FD63  20                 	db	32
   863  00FD64  2D                 	db	45
   864  00FD65  2D                 	db	45
   865  00FD66  20                 	db	32
   866  00FD67  53                 	db	83	;'S'
   867  00FD68  4F                 	db	79	;'O'
   868  00FD69  55                 	db	85	;'U'
   869  00FD6A  50                 	db	80	;'P'
   870  00FD6B  20                 	db	32
   871  00FD6C  43                 	db	67	;'C'
   872  00FD6D  41                 	db	65	;'A'
   873  00FD6E  4E                 	db	78	;'N'
   874  00FD6F  20                 	db	32
   875  00FD70  2D                 	db	45
   876  00FD71  2D                 	db	45
   877  00FD72  20                 	db	32
   878  00FD73  00                 	db	0
   879  00FD74                     STR_28:
   880  00FD74  2D                 	db	45
   881  00FD75  2D                 	db	45
   882  00FD76  20                 	db	32
   883  00FD77  54                 	db	84	;'T'
   884  00FD78  4F                 	db	79	;'O'
   885  00FD79  54                 	db	84	;'T'
   886  00FD7A  41                 	db	65	;'A'
   887  00FD7B  4C                 	db	76	;'L'
   888  00FD7C  20                 	db	32
   889  00FD7D  43                 	db	67	;'C'
   890  00FD7E  41                 	db	65	;'A'
   891  00FD7F  4E                 	db	78	;'N'
   892  00FD80  53                 	db	83	;'S'
   893  00FD81  20                 	db	32
   894  00FD82  2D                 	db	45
   895  00FD83  2D                 	db	45
   896  00FD84  00                 	db	0
   897  00FD85                     STR_39:
   898  00FD85  4C                 	db	76	;'L'
   899  00FD86  4F                 	db	79	;'O'
   900  00FD87  47                 	db	71	;'G'
   901  00FD88  20                 	db	32
   902  00FD89  31                 	db	49	;'1'
   903  00FD8A  20                 	db	32
   904  00FD8B  20                 	db	32
   905  00FD8C  20                 	db	32
   906  00FD8D  20                 	db	32
   907  00FD8E  20                 	db	32
   908  00FD8F  20                 	db	32
   909  00FD90  20                 	db	32
   910  00FD91  20                 	db	32
   911  00FD92  20                 	db	32
   912  00FD93  20                 	db	32
   913  00FD94  3C                 	db	60	;'<'
   914  00FD95  00                 	db	0
   915  00FD96                     STR_42:
   916  00FD96  4C                 	db	76	;'L'
   917  00FD97  4F                 	db	79	;'O'
   918  00FD98  47                 	db	71	;'G'
   919  00FD99  20                 	db	32
   920  00FD9A  32                 	db	50	;'2'
   921  00FD9B  20                 	db	32
   922  00FD9C  20                 	db	32
   923  00FD9D  20                 	db	32
   924  00FD9E  20                 	db	32
   925  00FD9F  20                 	db	32
   926  00FDA0  20                 	db	32
   927  00FDA1  20                 	db	32
   928  00FDA2  20                 	db	32
   929  00FDA3  20                 	db	32
   930  00FDA4  20                 	db	32
   931  00FDA5  3C                 	db	60	;'<'
   932  00FDA6  00                 	db	0
   933  00FDA7                     STR_46:
   934  00FDA7  4C                 	db	76	;'L'
   935  00FDA8  4F                 	db	79	;'O'
   936  00FDA9  47                 	db	71	;'G'
   937  00FDAA  20                 	db	32
   938  00FDAB  33                 	db	51	;'3'
   939  00FDAC  20                 	db	32
   940  00FDAD  20                 	db	32
   941  00FDAE  20                 	db	32
   942  00FDAF  20                 	db	32
   943  00FDB0  20                 	db	32
   944  00FDB1  20                 	db	32
   945  00FDB2  20                 	db	32
   946  00FDB3  20                 	db	32
   947  00FDB4  20                 	db	32
   948  00FDB5  20                 	db	32
   949  00FDB6  3C                 	db	60	;'<'
   950  00FDB7  00                 	db	0
   951  00FDB8                     STR_50:
   952  00FDB8  4C                 	db	76	;'L'
   953  00FDB9  4F                 	db	79	;'O'
   954  00FDBA  47                 	db	71	;'G'
   955  00FDBB  20                 	db	32
   956  00FDBC  34                 	db	52	;'4'
   957  00FDBD  20                 	db	32
   958  00FDBE  20                 	db	32
   959  00FDBF  20                 	db	32
   960  00FDC0  20                 	db	32
   961  00FDC1  20                 	db	32
   962  00FDC2  20                 	db	32
   963  00FDC3  20                 	db	32
   964  00FDC4  20                 	db	32
   965  00FDC5  20                 	db	32
   966  00FDC6  20                 	db	32
   967  00FDC7  3C                 	db	60	;'<'
   968  00FDC8  00                 	db	0
   969  00FDC9                     STR_38:
   970  00FDC9  33                 	db	51	;'3'
   971  00FDCA  2E                 	db	46
   972  00FDCB  20                 	db	32
   973  00FDCC  4C                 	db	76	;'L'
   974  00FDCD  4F                 	db	79	;'O'
   975  00FDCE  47                 	db	71	;'G'
   976  00FDCF  53                 	db	83	;'S'
   977  00FDD0  20                 	db	32
   978  00FDD1  20                 	db	32
   979  00FDD2  20                 	db	32
   980  00FDD3  20                 	db	32
   981  00FDD4  20                 	db	32
   982  00FDD5  20                 	db	32
   983  00FDD6  20                 	db	32
   984  00FDD7  20                 	db	32
   985  00FDD8  3C                 	db	60	;'<'
   986  00FDD9  00                 	db	0
   987  00FDDA                     STR_34:
   988  00FDDA  32                 	db	50	;'2'
   989  00FDDB  2E                 	db	46
   990  00FDDC  20                 	db	32
   991  00FDDD  53                 	db	83	;'S'
   992  00FDDE  4F                 	db	79	;'O'
   993  00FDDF  52                 	db	82	;'R'
   994  00FDE0  54                 	db	84	;'T'
   995  00FDE1  20                 	db	32
   996  00FDE2  20                 	db	32
   997  00FDE3  20                 	db	32
   998  00FDE4  20                 	db	32
   999  00FDE5  20                 	db	32
  1000  00FDE6  20                 	db	32
  1001  00FDE7  20                 	db	32
  1002  00FDE8  20                 	db	32
  1003  00FDE9  3C                 	db	60	;'<'
  1004  00FDEA  00                 	db	0
  1005  00FDEB                     STR_31:
  1006  00FDEB  31                 	db	49	;'1'
  1007  00FDEC  2E                 	db	46
  1008  00FDED  20                 	db	32
  1009  00FDEE  44                 	db	68	;'D'
  1010  00FDEF  41                 	db	65	;'A'
  1011  00FDF0  54                 	db	84	;'T'
  1012  00FDF1  45                 	db	69	;'E'
  1013  00FDF2  2F                 	db	47
  1014  00FDF3  54                 	db	84	;'T'
  1015  00FDF4  49                 	db	73	;'I'
  1016  00FDF5  4D                 	db	77	;'M'
  1017  00FDF6  45                 	db	69	;'E'
  1018  00FDF7  20                 	db	32
  1019  00FDF8  20                 	db	32
  1020  00FDF9  20                 	db	32
  1021  00FDFA  3C                 	db	60	;'<'
  1022  00FDFB  00                 	db	0
  1023  00FDFC                     STR_6:
  1024  00FDFC  50                 	db	80	;'P'
  1025  00FDFD  41                 	db	65	;'A'
  1026  00FDFE  55                 	db	85	;'U'
  1027  00FDFF  53                 	db	83	;'S'
  1028  00FE00  45                 	db	69	;'E'
  1029  00FE01  20                 	db	32
  1030  00FE02  3C                 	db	60	;'<'
  1031  00FE03  20                 	db	32
  1032  00FE04  7C                 	db	124
  1033  00FE05  20                 	db	32
  1034  00FE06  42                 	db	66	;'B'
  1035  00FE07  41                 	db	65	;'A'
  1036  00FE08  43                 	db	67	;'C'
  1037  00FE09  4B                 	db	75	;'K'
  1038  00FE0A  20                 	db	32
  1039  00FE0B  3E                 	db	62	;'>'
  1040  00FE0C  00                 	db	0
  1041  00FE0D                     STR_30:
  1042  00FE0D  50                 	db	80	;'P'
  1043  00FE0E  55                 	db	85	;'U'
  1044  00FE0F  53                 	db	83	;'S'
  1045  00FE10  48                 	db	72	;'H'
  1046  00FE11  20                 	db	32
  1047  00FE12  54                 	db	84	;'T'
  1048  00FE13  4F                 	db	79	;'O'
  1049  00FE14  20                 	db	32
  1050  00FE15  43                 	db	67	;'C'
  1051  00FE16  4F                 	db	79	;'O'
  1052  00FE17  4E                 	db	78	;'N'
  1053  00FE18  54                 	db	84	;'T'
  1054  00FE19  49                 	db	73	;'I'
  1055  00FE1A  4E                 	db	78	;'N'
  1056  00FE1B  55                 	db	85	;'U'
  1057  00FE1C  45                 	db	69	;'E'
  1058  00FE1D  00                 	db	0
  1059  00FE1E                     STR_83:
  1060  00FE1E  4D                 	db	77	;'M'
  1061  00FE1F  41                 	db	65	;'A'
  1062  00FE20  47                 	db	71	;'G'
  1063  00FE21  5F                 	db	95	;'_'
  1064  00FE22  73                 	db	115	;'s'
  1065  00FE23  69                 	db	105	;'i'
  1066  00FE24  67                 	db	103	;'g'
  1067  00FE25  6E                 	db	110	;'n'
  1068  00FE26  61                 	db	97	;'a'
  1069  00FE27  6C                 	db	108	;'l'
  1070  00FE28  3A                 	db	58	;':'
  1071  00FE29  20                 	db	32
  1072  00FE2A  25                 	db	37
  1073  00FE2B  64                 	db	100	;'d'
  1074  00FE2C  20                 	db	32
  1075  00FE2D  00                 	db	0
  1076  00FE2E                     STR_103:
  1077  00FE2E  54                 	db	84	;'T'
  1078  00FE2F  53                 	db	83	;'S'
  1079  00FE30  54                 	db	84	;'T'
  1080  00FE31  3A                 	db	58	;':'
  1081  00FE32  20                 	db	32
  1082  00FE33  54                 	db	84	;'T'
  1083  00FE34  49                 	db	73	;'I'
  1084  00FE35  4C                 	db	76	;'L'
  1085  00FE36  54                 	db	84	;'T'
  1086  00FE37  20                 	db	32
  1087  00FE38  53                 	db	83	;'S'
  1088  00FE39  45                 	db	69	;'E'
  1089  00FE3A  52                 	db	82	;'R'
  1090  00FE3B  56                 	db	86	;'V'
  1091  00FE3C  4F                 	db	79	;'O'
  1092  00FE3D  00                 	db	0
  1093  00FE3E                     STR_4:
  1094  00FE3E  44                 	db	68	;'D'
  1095  00FE3F  49                 	db	73	;'I'
  1096  00FE40  44                 	db	68	;'D'
  1097  00FE41  4E                 	db	78	;'N'
  1098  00FE42  27                 	db	39
  1099  00FE43  54                 	db	84	;'T'
  1100  00FE44  20                 	db	32
  1101  00FE45  43                 	db	67	;'C'
  1102  00FE46  4F                 	db	79	;'O'
  1103  00FE47  4D                 	db	77	;'M'
  1104  00FE48  50                 	db	80	;'P'
  1105  00FE49  4C                 	db	76	;'L'
  1106  00FE4A  45                 	db	69	;'E'
  1107  00FE4B  54                 	db	84	;'T'
  1108  00FE4C  45                 	db	69	;'E'
  1109  00FE4D  00                 	db	0
  1110  00FE4E                     STR_80:
  1111  00FE4E  49                 	db	73	;'I'
  1112  00FE4F  52                 	db	82	;'R'
  1113  00FE50  5F                 	db	95	;'_'
  1114  00FE51  73                 	db	115	;'s'
  1115  00FE52  69                 	db	105	;'i'
  1116  00FE53  67                 	db	103	;'g'
  1117  00FE54  6E                 	db	110	;'n'
  1118  00FE55  61                 	db	97	;'a'
  1119  00FE56  6C                 	db	108	;'l'
  1120  00FE57  3A                 	db	58	;':'
  1121  00FE58  20                 	db	32
  1122  00FE59  25                 	db	37
  1123  00FE5A  64                 	db	100	;'d'
  1124  00FE5B  20                 	db	32
  1125  00FE5C  00                 	db	0
  1126  00FE5D                     STR_109:
  1127  00FE5D  43                 	db	67	;'C'
  1128  00FE5E  41                 	db	65	;'A'
  1129  00FE5F  4D                 	db	77	;'M'
  1130  00FE60  20                 	db	32
  1131  00FE61  44                 	db	68	;'D'
  1132  00FE62  57                 	db	87	;'W'
  1133  00FE63  4E                 	db	78	;'N'
  1134  00FE64  20                 	db	32
  1135  00FE65  7C                 	db	124
  1136  00FE66  52                 	db	82	;'R'
  1137  00FE67  43                 	db	67	;'C'
  1138  00FE68  30                 	db	48	;'0'
  1139  00FE69  3D                 	db	61	;'='
  1140  00FE6A  30                 	db	48	;'0'
  1141  00FE6B  00                 	db	0
  1142  00FE6C                     STR_108:
  1143  00FE6C  43                 	db	67	;'C'
  1144  00FE6D  41                 	db	65	;'A'
  1145  00FE6E  4D                 	db	77	;'M'
  1146  00FE6F  20                 	db	32
  1147  00FE70  55                 	db	85	;'U'
  1148  00FE71  50                 	db	80	;'P'
  1149  00FE72  20                 	db	32
  1150  00FE73  20                 	db	32
  1151  00FE74  7C                 	db	124
  1152  00FE75  52                 	db	82	;'R'
  1153  00FE76  43                 	db	67	;'C'
  1154  00FE77  30                 	db	48	;'0'
  1155  00FE78  3D                 	db	61	;'='
  1156  00FE79  31                 	db	49	;'1'
  1157  00FE7A  00                 	db	0
  1158  00FE7B                     STR_82:
  1159  00FE7B  54                 	db	84	;'T'
  1160  00FE7C  53                 	db	83	;'S'
  1161  00FE7D  54                 	db	84	;'T'
  1162  00FE7E  3A                 	db	58	;':'
  1163  00FE7F  20                 	db	32
  1164  00FE80  4D                 	db	77	;'M'
  1165  00FE81  41                 	db	65	;'A'
  1166  00FE82  47                 	db	71	;'G'
  1167  00FE83  4E                 	db	78	;'N'
  1168  00FE84  45                 	db	69	;'E'
  1169  00FE85  54                 	db	84	;'T'
  1170  00FE86  49                 	db	73	;'I'
  1171  00FE87  53                 	db	83	;'S'
  1172  00FE88  4D                 	db	77	;'M'
  1173  00FE89  00                 	db	0
  1174  00FE8A                     STR_107:
  1175  00FE8A  54                 	db	84	;'T'
  1176  00FE8B  53                 	db	83	;'S'
  1177  00FE8C  54                 	db	84	;'T'
  1178  00FE8D  3A                 	db	58	;':'
  1179  00FE8E  20                 	db	32
  1180  00FE8F  43                 	db	67	;'C'
  1181  00FE90  41                 	db	65	;'A'
  1182  00FE91  4D                 	db	77	;'M'
  1183  00FE92  20                 	db	32
  1184  00FE93  53                 	db	83	;'S'
  1185  00FE94  45                 	db	69	;'E'
  1186  00FE95  52                 	db	82	;'R'
  1187  00FE96  56                 	db	86	;'V'
  1188  00FE97  4F                 	db	79	;'O'
  1189  00FE98  00                 	db	0
  1190  00FE99                     STR_96:
  1191  00FE99  54                 	db	84	;'T'
  1192  00FE9A  53                 	db	83	;'S'
  1193  00FE9B  54                 	db	84	;'T'
  1194  00FE9C  3A                 	db	58	;':'
  1195  00FE9D  20                 	db	32
  1196  00FE9E  50                 	db	80	;'P'
  1197  00FE9F  41                 	db	65	;'A'
  1198  00FEA0  4E                 	db	78	;'N'
  1199  00FEA1  20                 	db	32
  1200  00FEA2  53                 	db	83	;'S'
  1201  00FEA3  45                 	db	69	;'E'
  1202  00FEA4  52                 	db	82	;'R'
  1203  00FEA5  56                 	db	86	;'V'
  1204  00FEA6  4F                 	db	79	;'O'
  1205  00FEA7  00                 	db	0
  1206  00FEA8                     STR_75:
  1207  00FEA8  41                 	db	65	;'A'
  1208  00FEA9  4C                 	db	76	;'L'
  1209  00FEAA  47                 	db	71	;'G'
  1210  00FEAB  34                 	db	52	;'4'
  1211  00FEAC  3A                 	db	58	;':'
  1212  00FEAD  20                 	db	32
  1213  00FEAE  41                 	db	65	;'A'
  1214  00FEAF  4C                 	db	76	;'L'
  1215  00FEB0  4C                 	db	76	;'L'
  1216  00FEB1  20                 	db	32
  1217  00FEB2  43                 	db	67	;'C'
  1218  00FEB3  41                 	db	65	;'A'
  1219  00FEB4  4E                 	db	78	;'N'
  1220  00FEB5  53                 	db	83	;'S'
  1221  00FEB6  00                 	db	0
  1222  00FEB7                     STR_90:
  1223  00FEB7  54                 	db	84	;'T'
  1224  00FEB8  53                 	db	83	;'S'
  1225  00FEB9  54                 	db	84	;'T'
  1226  00FEBA  3A                 	db	58	;':'
  1227  00FEBB  20                 	db	32
  1228  00FEBC  44                 	db	68	;'D'
  1229  00FEBD  43                 	db	67	;'C'
  1230  00FEBE  20                 	db	32
  1231  00FEBF  4D                 	db	77	;'M'
  1232  00FEC0  4F                 	db	79	;'O'
  1233  00FEC1  54                 	db	84	;'T'
  1234  00FEC2  4F                 	db	79	;'O'
  1235  00FEC3  52                 	db	82	;'R'
  1236  00FEC4  53                 	db	83	;'S'
  1237  00FEC5  00                 	db	0
  1238  00FEC6                     STR_70:
  1239  00FEC6  41                 	db	65	;'A'
  1240  00FEC7  4C                 	db	76	;'L'
  1241  00FEC8  47                 	db	71	;'G'
  1242  00FEC9  4F                 	db	79	;'O'
  1243  00FECA  52                 	db	82	;'R'
  1244  00FECB  49                 	db	73	;'I'
  1245  00FECC  54                 	db	84	;'T'
  1246  00FECD  48                 	db	72	;'H'
  1247  00FECE  4D                 	db	77	;'M'
  1248  00FECF  20                 	db	32
  1249  00FED0  54                 	db	84	;'T'
  1250  00FED1  45                 	db	69	;'E'
  1251  00FED2  53                 	db	83	;'S'
  1252  00FED3  54                 	db	84	;'T'
  1253  00FED4  00                 	db	0
  1254  00FED5                     STR_91:
  1255  00FED5  50                 	db	80	;'P'
  1256  00FED6  49                 	db	73	;'I'
  1257  00FED7  4E                 	db	78	;'N'
  1258  00FED8  20                 	db	32
  1259  00FED9  52                 	db	82	;'R'
  1260  00FEDA  41                 	db	65	;'A'
  1261  00FEDB  35                 	db	53	;'5'
  1262  00FEDC  20                 	db	32
  1263  00FEDD  48                 	db	72	;'H'
  1264  00FEDE  49                 	db	73	;'I'
  1265  00FEDF  47                 	db	71	;'G'
  1266  00FEE0  48                 	db	72	;'H'
  1267  00FEE1  2E                 	db	46
  1268  00FEE2  00                 	db	0
  1269  00FEE3                     STR_73:
  1270  00FEE3  41                 	db	65	;'A'
  1271  00FEE4  4C                 	db	76	;'L'
  1272  00FEE5  47                 	db	71	;'G'
  1273  00FEE6  32                 	db	50	;'2'
  1274  00FEE7  3A                 	db	58	;':'
  1275  00FEE8  20                 	db	32
  1276  00FEE9  31                 	db	49	;'1'
  1277  00FEEA  32                 	db	50	;'2'
  1278  00FEEB  20                 	db	32
  1279  00FEEC  43                 	db	67	;'C'
  1280  00FEED  41                 	db	65	;'A'
  1281  00FEEE  4E                 	db	78	;'N'
  1282  00FEEF  53                 	db	83	;'S'
  1283  00FEF0  00                 	db	0
  1284  00FEF1                     STR_76:
  1285  00FEF1  41                 	db	65	;'A'
  1286  00FEF2  4C                 	db	76	;'L'
  1287  00FEF3  47                 	db	71	;'G'
  1288  00FEF4  35                 	db	53	;'5'
  1289  00FEF5  3A                 	db	58	;':'
  1290  00FEF6  20                 	db	32
  1291  00FEF7  4E                 	db	78	;'N'
  1292  00FEF8  4F                 	db	79	;'O'
  1293  00FEF9  20                 	db	32
  1294  00FEFA  43                 	db	67	;'C'
  1295  00FEFB  41                 	db	65	;'A'
  1296  00FEFC  4E                 	db	78	;'N'
  1297  00FEFD  53                 	db	83	;'S'
  1298  00FEFE  00                 	db	0
  1299  00FEFF                     STR_71:
  1300  00FEFF  50                 	db	80	;'P'
  1301  00FF00  55                 	db	85	;'U'
  1302  00FF01  53                 	db	83	;'S'
  1303  00FF02  48                 	db	72	;'H'
  1304  00FF03  20                 	db	32
  1305  00FF04  54                 	db	84	;'T'
  1306  00FF05  4F                 	db	79	;'O'
  1307  00FF06  20                 	db	32
  1308  00FF07  53                 	db	83	;'S'
  1309  00FF08  54                 	db	84	;'T'
  1310  00FF09  41                 	db	65	;'A'
  1311  00FF0A  52                 	db	82	;'R'
  1312  00FF0B  54                 	db	84	;'T'
  1313  00FF0C  00                 	db	0
  1314  00FF0D                     STR_23:
  1315  00FF0D  25                 	db	37
  1316  00FF0E  64                 	db	100	;'d'
  1317  00FF0F  20                 	db	32
  1318  00FF10  4D                 	db	77	;'M'
  1319  00FF11  49                 	db	73	;'I'
  1320  00FF12  4E                 	db	78	;'N'
  1321  00FF13  20                 	db	32
  1322  00FF14  25                 	db	37
  1323  00FF15  64                 	db	100	;'d'
  1324  00FF16  20                 	db	32
  1325  00FF17  53                 	db	83	;'S'
  1326  00FF18  45                 	db	69	;'E'
  1327  00FF19  43                 	db	67	;'C'
  1328  00FF1A  00                 	db	0
  1329  00FF1B                     STR_2:
  1330  00FF1B  54                 	db	84	;'T'
  1331  00FF1C  49                 	db	73	;'I'
  1332  00FF1D  4D                 	db	77	;'M'
  1333  00FF1E  45                 	db	69	;'E'
  1334  00FF1F  3A                 	db	58	;':'
  1335  00FF20  20                 	db	32
  1336  00FF21  25                 	db	37
  1337  00FF22  64                 	db	100	;'d'
  1338  00FF23  3A                 	db	58	;':'
  1339  00FF24  25                 	db	37
  1340  00FF25  30                 	db	48	;'0'
  1341  00FF26  32                 	db	50	;'2'
  1342  00FF27  64                 	db	100	;'d'
  1343  00FF28  00                 	db	0
  1344  00FF29                     STR_79:
  1345  00FF29  54                 	db	84	;'T'
  1346  00FF2A  53                 	db	83	;'S'
  1347  00FF2B  54                 	db	84	;'T'
  1348  00FF2C  3A                 	db	58	;':'
  1349  00FF2D  20                 	db	32
  1350  00FF2E  49                 	db	73	;'I'
  1351  00FF2F  52                 	db	82	;'R'
  1352  00FF30  20                 	db	32
  1353  00FF31  53                 	db	83	;'S'
  1354  00FF32  4E                 	db	78	;'N'
  1355  00FF33  53                 	db	83	;'S'
  1356  00FF34  52                 	db	82	;'R'
  1357  00FF35  00                 	db	0
  1358  00FF36                     STR_113:
  1359  00FF36  53                 	db	83	;'S'
  1360  00FF37  4F                 	db	79	;'O'
  1361  00FF38  4C                 	db	76	;'L'
  1362  00FF39  45                 	db	69	;'E'
  1363  00FF3A  4E                 	db	78	;'N'
  1364  00FF3B  4F                 	db	79	;'O'
  1365  00FF3C  49                 	db	73	;'I'
  1366  00FF3D  44                 	db	68	;'D'
  1367  00FF3E  20                 	db	32
  1368  00FF3F  54                 	db	84	;'T'
  1369  00FF40  53                 	db	83	;'S'
  1370  00FF41  54                 	db	84	;'T'
  1371  00FF42  00                 	db	0
  1372  00FF43                     STR_65:
  1373  00FF43  54                 	db	84	;'T'
  1374  00FF44  49                 	db	73	;'I'
  1375  00FF45  4D                 	db	77	;'M'
  1376  00FF46  45                 	db	69	;'E'
  1377  00FF47  20                 	db	32
  1378  00FF48  25                 	db	37
  1379  00FF49  64                 	db	100	;'d'
  1380  00FF4A  3A                 	db	58	;':'
  1381  00FF4B  25                 	db	37
  1382  00FF4C  30                 	db	48	;'0'
  1383  00FF4D  32                 	db	50	;'2'
  1384  00FF4E  64                 	db	100	;'d'
  1385  00FF4F  00                 	db	0
  1386  00FF50                     STR_74:
  1387  00FF50  41                 	db	65	;'A'
  1388  00FF51  4C                 	db	76	;'L'
  1389  00FF52  47                 	db	71	;'G'
  1390  00FF53  33                 	db	51	;'3'
  1391  00FF54  3A                 	db	58	;':'
  1392  00FF55  20                 	db	32
  1393  00FF56  31                 	db	49	;'1'
  1394  00FF57  20                 	db	32
  1395  00FF58  43                 	db	67	;'C'
  1396  00FF59  41                 	db	65	;'A'
  1397  00FF5A  4E                 	db	78	;'N'
  1398  00FF5B  00                 	db	0
  1399  00FF5C                     STR_93:
  1400  00FF5C  50                 	db	80	;'P'
  1401  00FF5D  49                 	db	73	;'I'
  1402  00FF5E  4E                 	db	78	;'N'
  1403  00FF5F  20                 	db	32
  1404  00FF60  52                 	db	82	;'R'
  1405  00FF61  41                 	db	65	;'A'
  1406  00FF62  33                 	db	51	;'3'
  1407  00FF63  2E                 	db	46
  1408  00FF64  2E                 	db	46
  1409  00FF65  2E                 	db	46
  1410  00FF66  00                 	db	0
  1411  00FF67                     STR_95:
  1412  00FF67  50                 	db	80	;'P'
  1413  00FF68  49                 	db	73	;'I'
  1414  00FF69  4E                 	db	78	;'N'
  1415  00FF6A  20                 	db	32
  1416  00FF6B  52                 	db	82	;'R'
  1417  00FF6C  41                 	db	65	;'A'
  1418  00FF6D  34                 	db	52	;'4'
  1419  00FF6E  2E                 	db	46
  1420  00FF6F  2E                 	db	46
  1421  00FF70  2E                 	db	46
  1422  00FF71  00                 	db	0
  1423  00FF72                     STR_64:
  1424  00FF72  53                 	db	83	;'S'
  1425  00FF73  4F                 	db	79	;'O'
  1426  00FF74  52                 	db	82	;'R'
  1427  00FF75  54                 	db	84	;'T'
  1428  00FF76  49                 	db	73	;'I'
  1429  00FF77  4E                 	db	78	;'N'
  1430  00FF78  47                 	db	71	;'G'
  1431  00FF79  2E                 	db	46
  1432  00FF7A  2E                 	db	46
  1433  00FF7B  2E                 	db	46
  1434  00FF7C  00                 	db	0
  1435  00FF7D                     STR_84:
  1436  00FF7D  54                 	db	84	;'T'
  1437  00FF7E  53                 	db	83	;'S'
  1438  00FF7F  54                 	db	84	;'T'
  1439  00FF80  3A                 	db	58	;':'
  1440  00FF81  20                 	db	32
  1441  00FF82  43                 	db	67	;'C'
  1442  00FF83  4F                 	db	79	;'O'
  1443  00FF84  4E                 	db	78	;'N'
  1444  00FF85  44                 	db	68	;'D'
  1445  00FF86  00                 	db	0
  1446  00FF87                     STR_114:
  1447  00FF87  50                 	db	80	;'P'
  1448  00FF88  55                 	db	85	;'U'
  1449  00FF89  53                 	db	83	;'S'
  1450  00FF8A  48                 	db	72	;'H'
  1451  00FF8B  20                 	db	32
  1452  00FF8C  44                 	db	68	;'D'
  1453  00FF8D  4F                 	db	79	;'O'
  1454  00FF8E  4E                 	db	78	;'N'
  1455  00FF8F  45                 	db	69	;'E'
  1456  00FF90  00                 	db	0
  1457  00FF91                     STR_88:
  1458  00FF91  41                 	db	65	;'A'
  1459  00FF92  43                 	db	67	;'C'
  1460  00FF93  54                 	db	84	;'T'
  1461  00FF94  55                 	db	85	;'U'
  1462  00FF95  41                 	db	65	;'A'
  1463  00FF96  54                 	db	84	;'T'
  1464  00FF97  4F                 	db	79	;'O'
  1465  00FF98  52                 	db	82	;'R'
  1466  00FF99  53                 	db	83	;'S'
  1467  00FF9A  00                 	db	0
  1468  00FF9B                     STR_22:
  1469  00FF9B  44                 	db	68	;'D'
  1470  00FF9C  55                 	db	85	;'U'
  1471  00FF9D  52                 	db	82	;'R'
  1472  00FF9E  41                 	db	65	;'A'
  1473  00FF9F  54                 	db	84	;'T'
  1474  00FFA0  49                 	db	73	;'I'
  1475  00FFA1  4F                 	db	79	;'O'
  1476  00FFA2  4E                 	db	78	;'N'
  1477  00FFA3  3A                 	db	58	;':'
  1478  00FFA4  00                 	db	0
  1479  00FFA5                     STR_86:
  1480  00FFA5  43                 	db	67	;'C'
  1481  00FFA6  4F                 	db	79	;'O'
  1482  00FFA7  4E                 	db	78	;'N'
  1483  00FFA8  44                 	db	68	;'D'
  1484  00FFA9  3A                 	db	58	;':'
  1485  00FFAA  20                 	db	32
  1486  00FFAB  25                 	db	37
  1487  00FFAC  64                 	db	100	;'d'
  1488  00FFAD  00                 	db	0
  1489  00FFAE                     STR_77:
  1490  00FFAE  53                 	db	83	;'S'
  1491  00FFAF  45                 	db	69	;'E'
  1492  00FFB0  4E                 	db	78	;'N'
  1493  00FFB1  53                 	db	83	;'S'
  1494  00FFB2  4F                 	db	79	;'O'
  1495  00FFB3  52                 	db	82	;'R'
  1496  00FFB4  53                 	db	83	;'S'
  1497  00FFB5  00                 	db	0
  1498  00FFB6                     STR_117:
  1499  00FFB6  28                 	db	40
  1500  00FFB7  6E                 	db	110	;'n'
  1501  00FFB8  75                 	db	117	;'u'
  1502  00FFB9  6C                 	db	108	;'l'
  1503  00FFBA  6C                 	db	108	;'l'
  1504  00FFBB  29                 	db	41
  1505  00FFBC  00                 	db	0
  1506  00FFBD                     STR_67:
  1507  00FFBD  46                 	db	70	;'F'
  1508  00FFBE  41                 	db	65	;'A'
  1509  00FFBF  49                 	db	73	;'I'
  1510  00FFC0  4C                 	db	76	;'L'
  1511  00FFC1  45                 	db	69	;'E'
  1512  00FFC2  44                 	db	68	;'D'
  1513  00FFC3  00                 	db	0
  1514  00FFC4                     STR_7:
  1515  00FFC4  53                 	db	83	;'S'
  1516  00FFC5  54                 	db	84	;'T'
  1517  00FFC6  41                 	db	65	;'A'
  1518  00FFC7  52                 	db	82	;'R'
  1519  00FFC8  54                 	db	84	;'T'
  1520  00FFC9  3A                 	db	58	;':'
  1521  00FFCA  00                 	db	0
  1522  00FFCB                     STR_9:
  1523  00FFCB  46                 	db	70	;'F'
  1524  00FFCC  45                 	db	69	;'E'
  1525  00FFCD  42                 	db	66	;'B'
  1526  00FFCE  00                 	db	0
  1527  00FFCF                     STR_19:
  1528  00FFCF  44                 	db	68	;'D'
  1529  00FFD0  45                 	db	69	;'E'
  1530  00FFD1  43                 	db	67	;'C'
  1531  00FFD2  00                 	db	0
  1532  00FFD3                     STR_15:
  1533  00FFD3  41                 	db	65	;'A'
  1534  00FFD4  55                 	db	85	;'U'
  1535  00FFD5  47                 	db	71	;'G'
  1536  00FFD6  00                 	db	0
  1537  00FFD7                     STR_14:
  1538  00FFD7  4A                 	db	74	;'J'
  1539  00FFD8  55                 	db	85	;'U'
  1540  00FFD9  4C                 	db	76	;'L'
  1541  00FFDA  00                 	db	0
  1542  00FFDB                     STR_8:
  1543  00FFDB  4A                 	db	74	;'J'
  1544  00FFDC  41                 	db	65	;'A'
  1545  00FFDD  4E                 	db	78	;'N'
  1546  00FFDE  00                 	db	0
  1547  00FFDF                     STR_13:
  1548  00FFDF  4A                 	db	74	;'J'
  1549  00FFE0  55                 	db	85	;'U'
  1550  00FFE1  4E                 	db	78	;'N'
  1551  00FFE2  00                 	db	0
  1552  00FFE3                     STR_16:
  1553  00FFE3  53                 	db	83	;'S'
  1554  00FFE4  45                 	db	69	;'E'
  1555  00FFE5  50                 	db	80	;'P'
  1556  00FFE6  00                 	db	0
  1557  00FFE7                     STR_10:
  1558  00FFE7  4D                 	db	77	;'M'
  1559  00FFE8  41                 	db	65	;'A'
  1560  00FFE9  52                 	db	82	;'R'
  1561  00FFEA  00                 	db	0
  1562  00FFEB                     STR_11:
  1563  00FFEB  41                 	db	65	;'A'
  1564  00FFEC  50                 	db	80	;'P'
  1565  00FFED  52                 	db	82	;'R'
  1566  00FFEE  00                 	db	0
  1567  00FFEF                     STR_20:
  1568  00FFEF  45                 	db	69	;'E'
  1569  00FFF0  52                 	db	82	;'R'
  1570  00FFF1  52                 	db	82	;'R'
  1571  00FFF2  00                 	db	0
  1572  00FFF3                     STR_17:
  1573  00FFF3  4F                 	db	79	;'O'
  1574  00FFF4  43                 	db	67	;'C'
  1575  00FFF5  54                 	db	84	;'T'
  1576  00FFF6  00                 	db	0
  1577  00FFF7                     STR_18:
  1578  00FFF7  4E                 	db	78	;'N'
  1579  00FFF8  4F                 	db	79	;'O'
  1580  00FFF9  56                 	db	86	;'V'
  1581  00FFFA  00                 	db	0
  1582  00FFFB                     STR_12:
  1583  00FFFB  4D                 	db	77	;'M'
  1584  00FFFC  41                 	db	65	;'A'
  1585  00FFFD  59                 	db	89	;'Y'
  1586  00FFFE  00                 	db	0
  1587  0000                     
  1588                           ; #config settings
  1589  00FFFF  00                 	db	0	; dummy byte at the end
  1590  0000                     
  1591                           	psect	cinit
  1592  00406A                     __pcinit:
  1593                           	opt stack 0
  1594  00406A                     start_initialization:
  1595                           	opt stack 0
  1596  00406A                     __initialization:
  1597                           	opt stack 0
  1598                           
  1599                           ; Initialize objects allocated to BANK1 (8 bytes)
  1600                           ; load TBLPTR registers with __pidataBANK1
  1601  00406A  0EBE               	movlw	low __pidataBANK1
  1602  00406C  6EF6               	movwf	tblptrl,c
  1603  00406E  0E47               	movlw	high __pidataBANK1
  1604  004070  6EF7               	movwf	tblptrh,c
  1605  004072  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1606  004074  6EF8               	movwf	tblptru,c
  1607  004076  EE01  F02F         	lfsr	0,__pdataBANK1
  1608  00407A  EE10 F008          	lfsr	1,8
  1609  00407E                     copy_data0:
  1610  00407E  0009               	tblrd		*+
  1611  004080  CFF5 FFEE          	movff	tablat,postinc0
  1612  004084  50E5               	movf	postdec1,w,c
  1613  004086  50E1               	movf	fsr1l,w,c
  1614  004088  E1FA               	bnz	copy_data0
  1615                           
  1616                           ; Clear objects allocated to BANK1 (47 bytes)
  1617  00408A  EE01  F000         	lfsr	0,__pbssBANK1
  1618  00408E  0E2F               	movlw	47
  1619  004090                     clear_0:
  1620  004090  6AEE               	clrf	postinc0,c
  1621  004092  06E8               	decf	wreg,f,c
  1622  004094  E1FD               	bnz	clear_0
  1623                           
  1624                           ; Clear objects allocated to BANK0 (38 bytes)
  1625  004096  EE00  F0DA         	lfsr	0,__pbssBANK0
  1626  00409A  0E26               	movlw	38
  1627  00409C                     clear_1:
  1628  00409C  6AEE               	clrf	postinc0,c
  1629  00409E  06E8               	decf	wreg,f,c
  1630  0040A0  E1FD               	bnz	clear_1
  1631                           
  1632                           ; Clear objects allocated to COMRAM (35 bytes)
  1633  0040A2  EE00  F05B         	lfsr	0,__pbssCOMRAM
  1634  0040A6  0E23               	movlw	35
  1635  0040A8                     clear_2:
  1636  0040A8  6AEE               	clrf	postinc0,c
  1637  0040AA  06E8               	decf	wreg,f,c
  1638  0040AC  E1FD               	bnz	clear_2
  1639  0040AE                     end_of_initialization:
  1640                           	opt stack 0
  1641  0040AE                     __end_of__initialization:
  1642                           	opt stack 0
  1643  0040AE  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1644  0040B0  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1645  0040B2  0100               	movlb	0
  1646  0040B4  EF67  F01C         	goto	_main	;jump to C main() function
  1647                           tblptru	equ	0xFF8
  1648                           tblptrh	equ	0xFF7
  1649                           tblptrl	equ	0xFF6
  1650                           tablat	equ	0xFF5
  1651                           postinc0	equ	0xFEE
  1652                           wreg	equ	0xFE8
  1653                           postdec1	equ	0xFE5
  1654                           fsr1l	equ	0xFE1
  1655                           
  1656                           	psect	bssCOMRAM
  1657  00005B                     __pbssCOMRAM:
  1658                           	opt stack 0
  1659  00005B                     _back:
  1660                           	opt stack 0
  1661  00005B                     	ds	2
  1662  00005D                     _count_can_no_lab:
  1663                           	opt stack 0
  1664  00005D                     	ds	2
  1665  00005F                     _count_can_w_lab:
  1666                           	opt stack 0
  1667  00005F                     	ds	2
  1668  000061                     _count_pop_no_tab:
  1669                           	opt stack 0
  1670  000061                     	ds	2
  1671  000063                     _count_pop_w_tab:
  1672                           	opt stack 0
  1673  000063                     	ds	2
  1674  000065                     _cur_can:
  1675                           	opt stack 0
  1676  000065                     	ds	2
  1677  000067                     _debug:
  1678                           	opt stack 0
  1679  000067                     	ds	2
  1680  000069                     _down:
  1681                           	opt stack 0
  1682  000069                     	ds	2
  1683  00006B                     _enter:
  1684                           	opt stack 0
  1685  00006B                     	ds	2
  1686  00006D                     _f_ID_receive:
  1687                           	opt stack 0
  1688  00006D                     	ds	2
  1689  00006F                     _f_can_coming_to_ID:
  1690                           	opt stack 0
  1691  00006F                     	ds	2
  1692  000071                     _f_can_coming_to_distribution:
  1693                           	opt stack 0
  1694  000071                     	ds	2
  1695  000073                     _f_lastCan:
  1696                           	opt stack 0
  1697  000073                     	ds	2
  1698  000075                     _firstboot:
  1699                           	opt stack 0
  1700  000075                     	ds	2
  1701  000077                     _up:
  1702                           	opt stack 0
  1703  000077                     	ds	2
  1704  000079                     _was_low_1:
  1705                           	opt stack 0
  1706  000079                     	ds	2
  1707  00007B                     _was_low_3:
  1708                           	opt stack 0
  1709  00007B                     	ds	2
  1710  00007D                     _input:
  1711                           	opt stack 0
  1712  00007D                     	ds	1
  1713                           tblptru	equ	0xFF8
  1714                           tblptrh	equ	0xFF7
  1715                           tblptrl	equ	0xFF6
  1716                           tablat	equ	0xFF5
  1717                           postinc0	equ	0xFEE
  1718                           wreg	equ	0xFE8
  1719                           postdec1	equ	0xFE5
  1720                           fsr1l	equ	0xFE1
  1721                           
  1722                           	psect	bssBANK0
  1723  0000DA                     __pbssBANK0:
  1724                           	opt stack 0
  1725  0000DA                     _IR_signal:
  1726                           	opt stack 0
  1727  0000DA                     	ds	2
  1728  0000DC                     _MAG_signal:
  1729                           	opt stack 0
  1730  0000DC                     	ds	2
  1731  0000DE                     _cur_state:
  1732                           	opt stack 0
  1733  0000DE                     	ds	2
  1734  0000E0                     _f_loadingNewCan:
  1735                           	opt stack 0
  1736  0000E0                     	ds	2
  1737  0000E2                     _first:
  1738                           	opt stack 0
  1739  0000E2                     	ds	2
  1740  0000E4                     _i:
  1741                           	opt stack 0
  1742  0000E4                     	ds	2
  1743  0000E6                     _log:
  1744                           	opt stack 0
  1745  0000E6                     	ds	2
  1746  0000E8                     _log_completion:
  1747                           	opt stack 0
  1748  0000E8                     	ds	2
  1749  0000EA                     _log_count_can_no_lab:
  1750                           	opt stack 0
  1751  0000EA                     	ds	2
  1752  0000EC                     _log_count_can_w_lab:
  1753                           	opt stack 0
  1754  0000EC                     	ds	2
  1755  0000EE                     _log_count_pop_no_tab:
  1756                           	opt stack 0
  1757  0000EE                     	ds	2
  1758  0000F0                     _log_count_pop_w_tab:
  1759                           	opt stack 0
  1760  0000F0                     	ds	2
  1761  0000F2                     _log_count_total:
  1762                           	opt stack 0
  1763  0000F2                     	ds	2
  1764  0000F4                     _log_total_time:
  1765                           	opt stack 0
  1766  0000F4                     	ds	2
  1767  0000F6                     _logstate:
  1768                           	opt stack 0
  1769  0000F6                     	ds	2
  1770  0000F8                     _total_time:
  1771                           	opt stack 0
  1772  0000F8                     	ds	2
  1773  0000FA                     _var:
  1774                           	opt stack 0
  1775  0000FA                     	ds	2
  1776  0000FC                     _machine_state:
  1777                           	opt stack 0
  1778  0000FC                     	ds	1
  1779  0000FD                     _sel:
  1780                           	opt stack 0
  1781  0000FD                     	ds	1
  1782  0000FE                     _count_total:
  1783                           	opt stack 0
  1784  0000FE                     	ds	2
  1785                           tblptru	equ	0xFF8
  1786                           tblptrh	equ	0xFF7
  1787                           tblptrl	equ	0xFF6
  1788                           tablat	equ	0xFF5
  1789                           postinc0	equ	0xFEE
  1790                           wreg	equ	0xFE8
  1791                           postdec1	equ	0xFE5
  1792                           fsr1l	equ	0xFE1
  1793                           
  1794                           	psect	bssBANK1
  1795  000100                     __pbssBANK1:
  1796                           	opt stack 0
  1797  000100                     _log_startTime:
  1798                           	opt stack 0
  1799  000100                     	ds	14
  1800  00010E                     _startTime:
  1801                           	opt stack 0
  1802  00010E                     	ds	14
  1803  00011C                     _servoTimes:
  1804                           	opt stack 0
  1805  00011C                     	ds	8
  1806  000124                     _time:
  1807                           	opt stack 0
  1808  000124                     	ds	7
  1809  00012B                     _RTCflag:
  1810                           	opt stack 0
  1811  00012B                     	ds	2
  1812  00012D                     _f_can_distributed:
  1813                           	opt stack 0
  1814  00012D                     	ds	2
  1815                           tblptru	equ	0xFF8
  1816                           tblptrh	equ	0xFF7
  1817                           tblptrl	equ	0xFF6
  1818                           tablat	equ	0xFF5
  1819                           postinc0	equ	0xFEE
  1820                           wreg	equ	0xFE8
  1821                           postdec1	equ	0xFE5
  1822                           fsr1l	equ	0xFE1
  1823                           
  1824                           	psect	dataBANK1
  1825  00012F                     __pdataBANK1:
  1826                           	opt stack 0
  1827  00012F                     UI@F3223:
  1828                           	opt stack 0
  1829  00012F                     	ds	4
  1830  000133                     printRTC@F3214:
  1831                           	opt stack 0
  1832  000133                     	ds	4
  1833                           tblptru	equ	0xFF8
  1834                           tblptrh	equ	0xFF7
  1835                           tblptrl	equ	0xFF6
  1836                           tablat	equ	0xFF5
  1837                           postinc0	equ	0xFEE
  1838                           wreg	equ	0xFE8
  1839                           postdec1	equ	0xFE5
  1840                           fsr1l	equ	0xFE1
  1841                           
  1842                           	psect	cstackBANK0
  1843  000080                     __pcstackBANK0:
  1844                           	opt stack 0
  1845  000080                     ??_delay_ms:
  1846  000080                     ??_PortTests:
  1847  000080                     ??_isdigit:
  1848  000080                     ??_readADC:
  1849  000080                     ??_I2C_Master_Wait:
  1850  000080                     ?___wmul:
  1851                           	opt stack 0
  1852  000080                     ?___awmod:
  1853                           	opt stack 0
  1854  000080                     ?___lwdiv:
  1855                           	opt stack 0
  1856  000080                     ?___lldiv:
  1857                           	opt stack 0
  1858  000080                     lcdNibble@temp:
  1859                           	opt stack 0
  1860  000080                     initTime@m:
  1861                           	opt stack 0
  1862  000080                     updateServoPosition@time_us:
  1863                           	opt stack 0
  1864  000080                     EEPROM_read@address:
  1865                           	opt stack 0
  1866  000080                     ___wmul@multiplier:
  1867                           	opt stack 0
  1868  000080                     ___awmod@dividend:
  1869                           	opt stack 0
  1870  000080                     ___lwdiv@dividend:
  1871                           	opt stack 0
  1872  000080                     strcpy@to:
  1873                           	opt stack 0
  1874  000080                     ___lldiv@dividend:
  1875                           	opt stack 0
  1876                           
  1877                           ; 4 bytes @ 0x0
  1878  000080                     	ds	1
  1879  000081                     readADC@channel:
  1880                           	opt stack 0
  1881  000081                     I2C_Master_Read@a:
  1882                           	opt stack 0
  1883  000081                     lcdNibble@data:
  1884                           	opt stack 0
  1885  000081                     initTime@h:
  1886                           	opt stack 0
  1887  000081                     delay_ms@milliseconds:
  1888                           	opt stack 0
  1889  000081                     _isdigit$1939:
  1890                           	opt stack 0
  1891  000081                     I2C_Master_Write@d:
  1892                           	opt stack 0
  1893                           
  1894                           ; 2 bytes @ 0x1
  1895  000081                     	ds	1
  1896  000082                     ??_readIR:
  1897  000082                     ??_readMAG:
  1898  000082                     I2C_Master_Read@temp:
  1899                           	opt stack 0
  1900  000082                     lcdInst@data:
  1901                           	opt stack 0
  1902  000082                     putch@data:
  1903                           	opt stack 0
  1904  000082                     initTime@w:
  1905                           	opt stack 0
  1906  000082                     isdigit@c:
  1907                           	opt stack 0
  1908  000082                     updateServoPosition@timer:
  1909                           	opt stack 0
  1910  000082                     ___wmul@multiplicand:
  1911                           	opt stack 0
  1912  000082                     ___awmod@divisor:
  1913                           	opt stack 0
  1914  000082                     ___lwdiv@divisor:
  1915                           	opt stack 0
  1916  000082                     strcpy@from:
  1917                           	opt stack 0
  1918                           
  1919                           ; 2 bytes @ 0x2
  1920  000082                     	ds	1
  1921  000083                     ??_initLCD:
  1922  000083                     initTime@DD:
  1923                           	opt stack 0
  1924  000083                     getRTC@i:
  1925                           	opt stack 0
  1926                           
  1927                           ; 2 bytes @ 0x3
  1928  000083                     	ds	1
  1929  000084                     ??_updateServoPosition:
  1930  000084                     initTime@MM:
  1931                           	opt stack 0
  1932  000084                     ___awmod@counter:
  1933                           	opt stack 0
  1934  000084                     readIR@res:
  1935                           	opt stack 0
  1936  000084                     readMAG@res:
  1937                           	opt stack 0
  1938  000084                     ___wmul@product:
  1939                           	opt stack 0
  1940  000084                     ___lwdiv@quotient:
  1941                           	opt stack 0
  1942  000084                     strcpy@cp:
  1943                           	opt stack 0
  1944  000084                     ___lldiv@divisor:
  1945                           	opt stack 0
  1946                           
  1947                           ; 4 bytes @ 0x4
  1948  000084                     	ds	1
  1949  000085                     ??_initSortTimer:
  1950  000085                     initTime@YY:
  1951                           	opt stack 0
  1952  000085                     ___awmod@sign:
  1953                           	opt stack 0
  1954                           
  1955                           ; 1 bytes @ 0x5
  1956  000085                     	ds	1
  1957  000086                     ??_ID:
  1958  000086                     ??_getIR:
  1959  000086                     ?___awdiv:
  1960                           	opt stack 0
  1961  000086                     initTime@s:
  1962                           	opt stack 0
  1963  000086                     ___lwdiv@counter:
  1964                           	opt stack 0
  1965  000086                     updateServoPosition@my_time:
  1966                           	opt stack 0
  1967  000086                     ___awdiv@dividend:
  1968                           	opt stack 0
  1969                           
  1970                           ; 2 bytes @ 0x6
  1971  000086                     	ds	1
  1972  000087                     ?___lwmod:
  1973                           	opt stack 0
  1974  000087                     ___lwmod@dividend:
  1975                           	opt stack 0
  1976                           
  1977                           ; 2 bytes @ 0x7
  1978  000087                     	ds	1
  1979  000088                     ??_Distribution:
  1980  000088                     ??_initServos:
  1981  000088                     ID@i:
  1982                           	opt stack 0
  1983  000088                     initSortTimer@i:
  1984                           	opt stack 0
  1985  000088                     ___awdiv@divisor:
  1986                           	opt stack 0
  1987  000088                     ___lldiv@quotient:
  1988                           	opt stack 0
  1989                           
  1990                           ; 4 bytes @ 0x8
  1991  000088                     	ds	1
  1992  000089                     ___lwmod@divisor:
  1993                           	opt stack 0
  1994                           
  1995                           ; 2 bytes @ 0x9
  1996  000089                     	ds	1
  1997  00008A                     ___awdiv@counter:
  1998                           	opt stack 0
  1999  00008A                     ID@sensor_outputs:
  2000                           	opt stack 0
  2001                           
  2002                           ; 6 bytes @ 0xA
  2003  00008A                     	ds	1
  2004  00008B                     ___awdiv@sign:
  2005                           	opt stack 0
  2006  00008B                     ___lwmod@counter:
  2007                           	opt stack 0
  2008                           
  2009                           ; 1 bytes @ 0xB
  2010  00008B                     	ds	1
  2011  00008C                     ___lldiv@counter:
  2012                           	opt stack 0
  2013  00008C                     ___awdiv@quotient:
  2014                           	opt stack 0
  2015                           
  2016                           ; 2 bytes @ 0xC
  2017  00008C                     	ds	1
  2018  00008D                     I2C_Master_Init@c:
  2019                           	opt stack 0
  2020                           
  2021                           ; 4 bytes @ 0xD
  2022  00008D                     	ds	1
  2023  00008E                     ?_printf:
  2024                           	opt stack 0
  2025  00008E                     printf@f:
  2026                           	opt stack 0
  2027                           
  2028                           ; 2 bytes @ 0xE
  2029  00008E                     	ds	3
  2030  000091                     ??_I2C_Master_Init:
  2031                           
  2032                           ; 1 bytes @ 0x11
  2033  000091                     	ds	4
  2034  000095                     ??_loadRTC:
  2035                           
  2036                           ; 1 bytes @ 0x15
  2037  000095                     	ds	1
  2038  000096                     loadRTC@i:
  2039                           	opt stack 0
  2040                           
  2041                           ; 2 bytes @ 0x16
  2042  000096                     	ds	4
  2043  00009A                     ??_printf:
  2044                           
  2045                           ; 1 bytes @ 0x1A
  2046  00009A                     	ds	4
  2047  00009E                     printf@prec:
  2048                           	opt stack 0
  2049                           
  2050                           ; 1 bytes @ 0x1E
  2051  00009E                     	ds	1
  2052  00009F                     printf@cp:
  2053                           	opt stack 0
  2054                           
  2055                           ; 2 bytes @ 0x1F
  2056  00009F                     	ds	2
  2057  0000A1                     printf@ap:
  2058                           	opt stack 0
  2059                           
  2060                           ; 2 bytes @ 0x21
  2061  0000A1                     	ds	2
  2062  0000A3                     printf@len:
  2063                           	opt stack 0
  2064                           
  2065                           ; 2 bytes @ 0x23
  2066  0000A3                     	ds	2
  2067  0000A5                     printf@val:
  2068                           	opt stack 0
  2069                           
  2070                           ; 2 bytes @ 0x25
  2071  0000A5                     	ds	2
  2072  0000A7                     printf@flag:
  2073                           	opt stack 0
  2074                           
  2075                           ; 1 bytes @ 0x27
  2076  0000A7                     	ds	1
  2077  0000A8                     printf@c:
  2078                           	opt stack 0
  2079                           
  2080                           ; 1 bytes @ 0x28
  2081  0000A8                     	ds	1
  2082  0000A9                     printf@width:
  2083                           	opt stack 0
  2084                           
  2085                           ; 2 bytes @ 0x29
  2086  0000A9                     	ds	2
  2087  0000AB                     ??_printRTC:
  2088  0000AB                     ??_algorithmTest:
  2089  0000AB                     ??_sensorTest:
  2090  0000AB                     ??_actuatorTest:
  2091  0000AB                     ??_PortTestA5:
  2092  0000AB                     ??_ToggleTestA5:
  2093  0000AB                     ??_SolenoidTestA5:
  2094  0000AB                     ??_BothServos:
  2095  0000AB                     EEPROM_write@address:
  2096                           	opt stack 0
  2097                           
  2098                           ; 2 bytes @ 0x2B
  2099  0000AB                     	ds	1
  2100  0000AC                     ToggleTestA5@on:
  2101                           	opt stack 0
  2102                           
  2103                           ; 2 bytes @ 0x2C
  2104  0000AC                     	ds	1
  2105  0000AD                     EEPROM_write@data:
  2106                           	opt stack 0
  2107  0000AD                     actuatorTest@i_1630:
  2108                           	opt stack 0
  2109  0000AD                     sensorTest@res:
  2110                           	opt stack 0
  2111  0000AD                     SolenoidTestA5@i:
  2112                           	opt stack 0
  2113                           
  2114                           ; 2 bytes @ 0x2D
  2115  0000AD                     	ds	1
  2116  0000AE                     ??_EEPROM_write:
  2117  0000AE                     actuatorTest@i_1637:
  2118                           	opt stack 0
  2119  0000AE                     printRTC@INT_time:
  2120                           	opt stack 0
  2121                           
  2122                           ; 14 bytes @ 0x2E
  2123  0000AE                     	ds	1
  2124  0000AF                     EEPROM_write@i:
  2125                           	opt stack 0
  2126  0000AF                     actuatorTest@i_1638:
  2127                           	opt stack 0
  2128  0000AF                     SolenoidTestA5@i_1683:
  2129                           	opt stack 0
  2130                           
  2131                           ; 1 bytes @ 0x2F
  2132  0000AF                     	ds	1
  2133  0000B0                     EEPROM_write@i_1321:
  2134                           	opt stack 0
  2135  0000B0                     actuatorTest@i_1640:
  2136                           	opt stack 0
  2137  0000B0                     SolenoidTestA5@i_1685:
  2138                           	opt stack 0
  2139                           
  2140                           ; 1 bytes @ 0x30
  2141  0000B0                     	ds	1
  2142  0000B1                     ??_Loading:
  2143  0000B1                     logRun@num:
  2144                           	opt stack 0
  2145  0000B1                     actuatorTest@i_1641:
  2146                           	opt stack 0
  2147                           
  2148                           ; 1 bytes @ 0x31
  2149  0000B1                     	ds	1
  2150  0000B2                     logRun@byte1:
  2151                           	opt stack 0
  2152  0000B2                     actuatorTest@i_1643:
  2153                           	opt stack 0
  2154                           
  2155                           ; 1 bytes @ 0x32
  2156  0000B2                     	ds	1
  2157  0000B3                     logRun@byte2:
  2158                           	opt stack 0
  2159  0000B3                     actuatorTest@i_1644:
  2160                           	opt stack 0
  2161  0000B3                     Loading@addr:
  2162                           	opt stack 0
  2163                           
  2164                           ; 2 bytes @ 0x33
  2165  0000B3                     	ds	1
  2166  0000B4                     logRun@byte3:
  2167                           	opt stack 0
  2168  0000B4                     actuatorTest@i_1646:
  2169                           	opt stack 0
  2170                           
  2171                           ; 1 bytes @ 0x34
  2172  0000B4                     	ds	1
  2173  0000B5                     Loading@byte1:
  2174                           	opt stack 0
  2175  0000B5                     logRun@byte_i:
  2176                           	opt stack 0
  2177  0000B5                     actuatorTest@i_1647:
  2178                           	opt stack 0
  2179                           
  2180                           ; 1 bytes @ 0x35
  2181  0000B5                     	ds	1
  2182  0000B6                     logRun@byte11:
  2183                           	opt stack 0
  2184  0000B6                     actuatorTest@i_1649:
  2185                           	opt stack 0
  2186  0000B6                     Loading@i:
  2187                           	opt stack 0
  2188                           
  2189                           ; 2 bytes @ 0x36
  2190  0000B6                     	ds	1
  2191  0000B7                     actuatorTest@i_1650:
  2192                           	opt stack 0
  2193  0000B7                     logRun@i:
  2194                           	opt stack 0
  2195                           
  2196                           ; 2 bytes @ 0x37
  2197  0000B7                     	ds	1
  2198  0000B8                     actuatorTest@i_1652:
  2199                           	opt stack 0
  2200                           
  2201                           ; 1 bytes @ 0x38
  2202  0000B8                     	ds	1
  2203  0000B9                     actuatorTest@i_1653:
  2204                           	opt stack 0
  2205  0000B9                     logRun@addr:
  2206                           	opt stack 0
  2207                           
  2208                           ; 2 bytes @ 0x39
  2209  0000B9                     	ds	1
  2210  0000BA                     actuatorTest@i_1656:
  2211                           	opt stack 0
  2212                           
  2213                           ; 1 bytes @ 0x3A
  2214  0000BA                     	ds	1
  2215  0000BB                     actuatorTest@i_1657:
  2216                           	opt stack 0
  2217                           
  2218                           ; 1 bytes @ 0x3B
  2219  0000BB                     	ds	1
  2220  0000BC                     actuatorTest@i_1659:
  2221                           	opt stack 0
  2222  0000BC                     printRTC@RTC_month:
  2223                           	opt stack 0
  2224                           
  2225                           ; 2 bytes @ 0x3C
  2226  0000BC                     	ds	1
  2227  0000BD                     actuatorTest@i_1660:
  2228                           	opt stack 0
  2229                           
  2230                           ; 1 bytes @ 0x3D
  2231  0000BD                     	ds	1
  2232  0000BE                     actuatorTest@i_1662:
  2233                           	opt stack 0
  2234  0000BE                     printRTC@month:
  2235                           	opt stack 0
  2236                           
  2237                           ; 4 bytes @ 0x3E
  2238  0000BE                     	ds	1
  2239  0000BF                     actuatorTest@i_1663:
  2240                           	opt stack 0
  2241                           
  2242                           ; 1 bytes @ 0x3F
  2243  0000BF                     	ds	1
  2244  0000C0                     actuatorTest@i_1666:
  2245                           	opt stack 0
  2246                           
  2247                           ; 1 bytes @ 0x40
  2248  0000C0                     	ds	1
  2249  0000C1                     actuatorTest@i_1667:
  2250                           	opt stack 0
  2251                           
  2252                           ; 1 bytes @ 0x41
  2253  0000C1                     	ds	1
  2254  0000C2                     actuatorTest@i_1669:
  2255                           	opt stack 0
  2256  0000C2                     printRTC@i:
  2257                           	opt stack 0
  2258                           
  2259                           ; 2 bytes @ 0x42
  2260  0000C2                     	ds	1
  2261  0000C3                     actuatorTest@i_1670:
  2262                           	opt stack 0
  2263                           
  2264                           ; 1 bytes @ 0x43
  2265  0000C3                     	ds	1
  2266  0000C4                     ??_UI:
  2267  0000C4                     actuatorTest@i:
  2268                           	opt stack 0
  2269                           
  2270                           ; 2 bytes @ 0x44
  2271  0000C4                     	ds	2
  2272  0000C6                     ??_Test:
  2273  0000C6                     _UI$2292:
  2274                           	opt stack 0
  2275                           
  2276                           ; 2 bytes @ 0x46
  2277  0000C6                     	ds	2
  2278  0000C8                     UI@i:
  2279                           	opt stack 0
  2280                           
  2281                           ; 1 bytes @ 0x48
  2282  0000C8                     	ds	1
  2283  0000C9                     UI@i_408:
  2284                           	opt stack 0
  2285                           
  2286                           ; 1 bytes @ 0x49
  2287  0000C9                     	ds	1
  2288  0000CA                     UI@i_411:
  2289                           	opt stack 0
  2290                           
  2291                           ; 1 bytes @ 0x4A
  2292  0000CA                     	ds	1
  2293  0000CB                     UI@i_412:
  2294                           	opt stack 0
  2295                           
  2296                           ; 1 bytes @ 0x4B
  2297  0000CB                     	ds	1
  2298  0000CC                     UI@i_430:
  2299                           	opt stack 0
  2300                           
  2301                           ; 1 bytes @ 0x4C
  2302  0000CC                     	ds	1
  2303  0000CD                     UI@i_431:
  2304                           	opt stack 0
  2305                           
  2306                           ; 1 bytes @ 0x4D
  2307  0000CD                     	ds	1
  2308  0000CE                     UI@i_434:
  2309                           	opt stack 0
  2310                           
  2311                           ; 1 bytes @ 0x4E
  2312  0000CE                     	ds	1
  2313  0000CF                     UI@i_435:
  2314                           	opt stack 0
  2315                           
  2316                           ; 1 bytes @ 0x4F
  2317  0000CF                     	ds	1
  2318  0000D0                     UI@i_438:
  2319                           	opt stack 0
  2320                           
  2321                           ; 1 bytes @ 0x50
  2322  0000D0                     	ds	1
  2323  0000D1                     UI@i_439:
  2324                           	opt stack 0
  2325                           
  2326                           ; 1 bytes @ 0x51
  2327  0000D1                     	ds	1
  2328  0000D2                     UI@i_442:
  2329                           	opt stack 0
  2330                           
  2331                           ; 1 bytes @ 0x52
  2332  0000D2                     	ds	1
  2333  0000D3                     UI@i_443:
  2334                           	opt stack 0
  2335                           
  2336                           ; 1 bytes @ 0x53
  2337  0000D3                     	ds	1
  2338  0000D4                     UI@i_446:
  2339                           	opt stack 0
  2340                           
  2341                           ; 1 bytes @ 0x54
  2342  0000D4                     	ds	1
  2343  0000D5                     UI@i_447:
  2344                           	opt stack 0
  2345                           
  2346                           ; 1 bytes @ 0x55
  2347  0000D5                     	ds	1
  2348  0000D6                     UI@month:
  2349                           	opt stack 0
  2350                           
  2351                           ; 4 bytes @ 0x56
  2352  0000D6                     	ds	4
  2353  0000DA                     tblptru	equ	0xFF8
  2354                           tblptrh	equ	0xFF7
  2355                           tblptrl	equ	0xFF6
  2356                           tablat	equ	0xFF5
  2357                           postinc0	equ	0xFEE
  2358                           wreg	equ	0xFE8
  2359                           postdec1	equ	0xFE5
  2360                           fsr1l	equ	0xFE1
  2361                           
  2362                           ; 1 bytes @ 0x5A
  2363                           
  2364                           	psect	cstackCOMRAM
  2365  000001                     __pcstackCOMRAM:
  2366                           	opt stack 0
  2367  000001                     ??i2_I2C_Master_Wait:
  2368  000001                     ??i2_isdigit:
  2369  000001                     ?i2___wmul:
  2370                           	opt stack 0
  2371  000001                     ?i2___lwmod:
  2372                           	opt stack 0
  2373  000001                     i2lcdNibble@temp:
  2374                           	opt stack 0
  2375  000001                     i2EEPROM_read@address:
  2376                           	opt stack 0
  2377  000001                     i2___wmul@multiplier:
  2378                           	opt stack 0
  2379  000001                     i2___lwmod@dividend:
  2380                           	opt stack 0
  2381  000001                     i2strcpy@to:
  2382                           	opt stack 0
  2383                           
  2384                           ; 2 bytes @ 0x0
  2385  000001                     	ds	1
  2386  000002                     i2I2C_Master_Read@a:
  2387                           	opt stack 0
  2388  000002                     i2lcdNibble@data:
  2389                           	opt stack 0
  2390  000002                     i2_isdigit$1939:
  2391                           	opt stack 0
  2392  000002                     i2I2C_Master_Write@d:
  2393                           	opt stack 0
  2394                           
  2395                           ; 2 bytes @ 0x1
  2396  000002                     	ds	1
  2397  000003                     i2I2C_Master_Read@temp:
  2398                           	opt stack 0
  2399  000003                     i2lcdInst@data:
  2400                           	opt stack 0
  2401  000003                     i2putch@data:
  2402                           	opt stack 0
  2403  000003                     i2isdigit@c:
  2404                           	opt stack 0
  2405  000003                     i2___wmul@multiplicand:
  2406                           	opt stack 0
  2407  000003                     i2___lwmod@divisor:
  2408                           	opt stack 0
  2409  000003                     i2strcpy@from:
  2410                           	opt stack 0
  2411                           
  2412                           ; 2 bytes @ 0x2
  2413  000003                     	ds	1
  2414  000004                     i2getRTC@i:
  2415                           	opt stack 0
  2416                           
  2417                           ; 2 bytes @ 0x3
  2418  000004                     	ds	1
  2419  000005                     i2___lwmod@counter:
  2420                           	opt stack 0
  2421  000005                     i2___wmul@product:
  2422                           	opt stack 0
  2423  000005                     i2strcpy@cp:
  2424                           	opt stack 0
  2425                           
  2426                           ; 2 bytes @ 0x4
  2427  000005                     	ds	1
  2428  000006                     ?i2___lwdiv:
  2429                           	opt stack 0
  2430  000006                     i2___lwdiv@dividend:
  2431                           	opt stack 0
  2432                           
  2433                           ; 2 bytes @ 0x5
  2434  000006                     	ds	1
  2435  000007                     retrieveLog@logNum:
  2436                           	opt stack 0
  2437                           
  2438                           ; 2 bytes @ 0x6
  2439  000007                     	ds	1
  2440  000008                     i2___lwdiv@divisor:
  2441                           	opt stack 0
  2442                           
  2443                           ; 2 bytes @ 0x7
  2444  000008                     	ds	1
  2445  000009                     ??_retrieveLog:
  2446                           
  2447                           ; 1 bytes @ 0x8
  2448  000009                     	ds	1
  2449  00000A                     i2___lwdiv@quotient:
  2450                           	opt stack 0
  2451                           
  2452                           ; 2 bytes @ 0x9
  2453  00000A                     	ds	1
  2454  00000B                     retrieveLog@byte1:
  2455                           	opt stack 0
  2456                           
  2457                           ; 1 bytes @ 0xA
  2458  00000B                     	ds	1
  2459  00000C                     retrieveLog@byte2:
  2460                           	opt stack 0
  2461  00000C                     i2___lwdiv@counter:
  2462                           	opt stack 0
  2463                           
  2464                           ; 1 bytes @ 0xB
  2465  00000C                     	ds	1
  2466  00000D                     ?i2_printf:
  2467                           	opt stack 0
  2468  00000D                     retrieveLog@byte3:
  2469                           	opt stack 0
  2470  00000D                     i2printf@f:
  2471                           	opt stack 0
  2472                           
  2473                           ; 2 bytes @ 0xC
  2474  00000D                     	ds	1
  2475  00000E                     retrieveLog@i:
  2476                           	opt stack 0
  2477                           
  2478                           ; 2 bytes @ 0xD
  2479  00000E                     	ds	2
  2480  000010                     retrieveLog@addr:
  2481                           	opt stack 0
  2482                           
  2483                           ; 2 bytes @ 0xF
  2484  000010                     	ds	2
  2485  000012                     dispLogs@myLog:
  2486                           	opt stack 0
  2487                           
  2488                           ; 2 bytes @ 0x11
  2489  000012                     	ds	2
  2490  000014                     
  2491                           ; 1 bytes @ 0x13
  2492  000014                     	ds	5
  2493  000019                     ??i2_printf:
  2494                           
  2495                           ; 1 bytes @ 0x18
  2496  000019                     	ds	4
  2497  00001D                     i2printf@prec:
  2498                           	opt stack 0
  2499                           
  2500                           ; 1 bytes @ 0x1C
  2501  00001D                     	ds	1
  2502  00001E                     i2printf@cp:
  2503                           	opt stack 0
  2504                           
  2505                           ; 2 bytes @ 0x1D
  2506  00001E                     	ds	2
  2507  000020                     i2printf@ap:
  2508                           	opt stack 0
  2509                           
  2510                           ; 2 bytes @ 0x1F
  2511  000020                     	ds	2
  2512  000022                     i2printf@len:
  2513                           	opt stack 0
  2514                           
  2515                           ; 2 bytes @ 0x21
  2516  000022                     	ds	2
  2517  000024                     i2printf@val:
  2518                           	opt stack 0
  2519                           
  2520                           ; 2 bytes @ 0x23
  2521  000024                     	ds	2
  2522  000026                     i2printf@flag:
  2523                           	opt stack 0
  2524                           
  2525                           ; 1 bytes @ 0x25
  2526  000026                     	ds	1
  2527  000027                     i2printf@c:
  2528                           	opt stack 0
  2529                           
  2530                           ; 1 bytes @ 0x26
  2531  000027                     	ds	1
  2532  000028                     i2printf@width:
  2533                           	opt stack 0
  2534                           
  2535                           ; 2 bytes @ 0x27
  2536  000028                     	ds	2
  2537  00002A                     ??_printSortTimer:
  2538  00002A                     ??i2_printRTC:
  2539  00002A                     ?_inputHandler:
  2540                           	opt stack 0
  2541                           
  2542                           ; 2 bytes @ 0x29
  2543  00002A                     	ds	2
  2544  00002C                     ??_inputHandler:
  2545                           
  2546                           ; 1 bytes @ 0x2B
  2547  00002C                     	ds	1
  2548  00002D                     printSortTimer@hour:
  2549                           	opt stack 0
  2550  00002D                     i2printRTC@INT_time:
  2551                           	opt stack 0
  2552                           
  2553                           ; 14 bytes @ 0x2C
  2554  00002D                     	ds	2
  2555  00002F                     printSortTimer@curTime:
  2556                           	opt stack 0
  2557                           
  2558                           ; 14 bytes @ 0x2E
  2559  00002F                     	ds	12
  2560  00003B                     i2printRTC@RTC_month:
  2561                           	opt stack 0
  2562                           
  2563                           ; 2 bytes @ 0x3A
  2564  00003B                     	ds	2
  2565  00003D                     printSortTimer@start_sec:
  2566                           	opt stack 0
  2567  00003D                     i2printRTC@month:
  2568                           	opt stack 0
  2569                           
  2570                           ; 4 bytes @ 0x3C
  2571  00003D                     	ds	2
  2572  00003F                     printSortTimer@cur_sec:
  2573                           	opt stack 0
  2574                           
  2575                           ; 2 bytes @ 0x3E
  2576  00003F                     	ds	2
  2577  000041                     printSortTimer@min:
  2578                           	opt stack 0
  2579  000041                     i2printRTC@i:
  2580                           	opt stack 0
  2581                           
  2582                           ; 2 bytes @ 0x40
  2583  000041                     	ds	2
  2584  000043                     ??_updateMenu:
  2585  000043                     printSortTimer@sec:
  2586                           	opt stack 0
  2587                           
  2588                           ; 2 bytes @ 0x42
  2589  000043                     	ds	2
  2590  000045                     _printSortTimer$2412:
  2591                           	opt stack 0
  2592                           
  2593                           ; 2 bytes @ 0x44
  2594  000045                     	ds	2
  2595  000047                     printSortTimer@timeDiff:
  2596                           	opt stack 0
  2597                           
  2598                           ; 2 bytes @ 0x46
  2599  000047                     	ds	2
  2600  000049                     printSortTimer@i:
  2601                           	opt stack 0
  2602                           
  2603                           ; 2 bytes @ 0x48
  2604  000049                     	ds	2
  2605  00004B                     ??_handler:
  2606                           
  2607                           ; 1 bytes @ 0x4A
  2608  00004B                     	ds	16
  2609                           tblptru	equ	0xFF8
  2610                           tblptrh	equ	0xFF7
  2611                           tblptrl	equ	0xFF6
  2612                           tablat	equ	0xFF5
  2613                           postinc0	equ	0xFEE
  2614                           wreg	equ	0xFE8
  2615                           postdec1	equ	0xFE5
  2616                           fsr1l	equ	0xFE1
  2617                           
  2618 ;;
  2619 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2620 ;;
  2621 ;; *************** function _main *****************
  2622 ;; Defined at:
  2623 ;;		line 19 in file "main.c"
  2624 ;; Parameters:    Size  Location     Type
  2625 ;;		None
  2626 ;; Auto vars:     Size  Location     Type
  2627 ;;		None
  2628 ;; Return value:  Size  Location     Type
  2629 ;;                  1    wreg      void 
  2630 ;; Registers used:
  2631 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2632 ;; Tracked objects:
  2633 ;;		On entry : 0/0
  2634 ;;		On exit  : 0/0
  2635 ;;		Unchanged: 0/0
  2636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2637 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2638 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2639 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2640 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2641 ;;Total ram usage:        0 bytes
  2642 ;; Hardware stack levels required when called:   13
  2643 ;; This function calls:
  2644 ;;		_Test
  2645 ;;		_UI
  2646 ;;		_initLCD
  2647 ;;		_initTime
  2648 ;;		_initUI
  2649 ;;		_logRun
  2650 ;;		_machineConfig
  2651 ;;		_sort
  2652 ;;		_stopSignals
  2653 ;; This function is called by:
  2654 ;;		Startup code after reset
  2655 ;; This function uses a non-reentrant model
  2656 ;;
  2657                           
  2658                           	psect	text0
  2659  0038CE                     __ptext0:
  2660                           	opt stack 0
  2661  0038CE                     _main:
  2662                           	opt stack 18
  2663                           
  2664                           ;main.c: 20: machineConfig();
  2665                           
  2666                           ;incstack = 0
  2667  0038CE  EC86  F01F         	call	_machineConfig	;wreg free
  2668                           
  2669                           ;main.c: 21: initLCD();
  2670  0038D2  ECCF  F020         	call	_initLCD	;wreg free
  2671                           
  2672                           ;main.c: 25: initTime(0x42, 0x25, 0x13, 0x04, 0x15, 0x03, 0x17);
  2673  0038D6  0E25               	movlw	37
  2674  0038D8  0100               	movlb	0	; () banked
  2675  0038DA  6F80               	movwf	initTime@m& (0+255),b
  2676  0038DC  0E13               	movlw	19
  2677  0038DE  0100               	movlb	0	; () banked
  2678  0038E0  6F81               	movwf	initTime@h& (0+255),b
  2679  0038E2  0E04               	movlw	4
  2680  0038E4  0100               	movlb	0	; () banked
  2681  0038E6  6F82               	movwf	initTime@w& (0+255),b
  2682  0038E8  0E15               	movlw	21
  2683  0038EA  0100               	movlb	0	; () banked
  2684  0038EC  6F83               	movwf	initTime@DD& (0+255),b
  2685  0038EE  0E03               	movlw	3
  2686  0038F0  0100               	movlb	0	; () banked
  2687  0038F2  6F84               	movwf	initTime@MM& (0+255),b
  2688  0038F4  0E17               	movlw	23
  2689  0038F6  0100               	movlb	0	; () banked
  2690  0038F8  6F85               	movwf	initTime@YY& (0+255),b
  2691  0038FA  0E42               	movlw	66
  2692  0038FC  EC64  F023         	call	_initTime
  2693                           
  2694                           ;main.c: 27: initUI();
  2695  003900  EC2F  F023         	call	_initUI	;wreg free
  2696                           
  2697                           ;main.c: 28: first = 1;
  2698  003904  0E00               	movlw	0
  2699  003906  0100               	movlb	0	; () banked
  2700  003908  6FE3               	movwf	(_first+1)& (0+255),b
  2701  00390A  0E01               	movlw	1
  2702  00390C  6FE2               	movwf	_first& (0+255),b
  2703                           
  2704                           ; BSR set to: 0
  2705                           ;main.c: 39: switch(machine_state){
  2706                           
  2707                           ;main.c: 38: while(1){
  2708  00390E  D018               	goto	l8121
  2709  003910                     l8103:
  2710                           
  2711                           ; BSR set to: 0
  2712                           ;main.c: 41: UI();
  2713  003910  EC65  F004         	call	_UI	;wreg free
  2714                           
  2715                           ;main.c: 42: break;
  2716  003914  D015               	goto	l8121
  2717  003916                     l8105:
  2718                           
  2719                           ;main.c: 44: sort();
  2720  003916  EC53  F023         	call	_sort	;wreg free
  2721                           
  2722                           ;main.c: 45: break;
  2723  00391A  D012               	goto	l8121
  2724  00391C                     l8107:
  2725                           
  2726                           ;main.c: 47: stopSignals();
  2727  00391C  EC90  F023         	call	_stopSignals	;wreg free
  2728                           
  2729                           ;main.c: 48: logRun();
  2730  003920  ECF9  F017         	call	_logRun	;wreg free
  2731                           
  2732                           ;main.c: 49: first = 1;
  2733  003924  0E00               	movlw	0
  2734  003926  0100               	movlb	0	; () banked
  2735  003928  6FE3               	movwf	(_first+1)& (0+255),b
  2736  00392A  0E01               	movlw	1
  2737  00392C  6FE2               	movwf	_first& (0+255),b
  2738                           
  2739                           ; BSR set to: 0
  2740                           ;main.c: 50: UI();
  2741  00392E  EC65  F004         	call	_UI	;wreg free
  2742                           
  2743                           ;main.c: 51: break;
  2744  003932  D006               	goto	l8121
  2745  003934                     l8115:
  2746                           
  2747                           ;main.c: 53: Test();
  2748  003934  EC24  F019         	call	_Test	;wreg free
  2749                           
  2750                           ;main.c: 54: break;
  2751  003938  D003               	goto	l8121
  2752  00393A                     l8117:
  2753                           
  2754                           ;main.c: 56: stopSignals();
  2755  00393A  EC90  F023         	call	_stopSignals	;wreg free
  2756  00393E                     l480:
  2757  00393E  D7FF               	goto	l480
  2758  003940                     l8121:
  2759  003940  0100               	movlb	0	; () banked
  2760  003942  51FC               	movf	_machine_state& (0+255),w,b
  2761                           
  2762                           ; Switch size 1, requested type "space"
  2763                           ; Number of cases is 5, Range of values is 0 to 4
  2764                           ; switch strategies available:
  2765                           ; Name         Instructions Cycles
  2766                           ; simple_byte           16     9 (average)
  2767                           ;	Chosen strategy is simple_byte
  2768  003944  0A00               	xorlw	0	; case 0
  2769  003946  B4D8               	btfsc	status,2,c
  2770  003948  D7E3               	goto	l8103
  2771  00394A  0A01               	xorlw	1	; case 1
  2772  00394C  B4D8               	btfsc	status,2,c
  2773  00394E  D7E3               	goto	l8105
  2774  003950  0A03               	xorlw	3	; case 2
  2775  003952  B4D8               	btfsc	status,2,c
  2776  003954  D7E3               	goto	l8107
  2777  003956  0A01               	xorlw	1	; case 3
  2778  003958  B4D8               	btfsc	status,2,c
  2779  00395A  D7EC               	goto	l8115
  2780  00395C  0A07               	xorlw	7	; case 4
  2781  00395E  B4D8               	btfsc	status,2,c
  2782  003960  D7EC               	goto	l8117
  2783                           
  2784                           ; BSR set to: 0
  2785                           
  2786                           ; BSR set to: 0
  2787  003962  D7EE               	goto	l8121
  2788  003964                     __end_of_main:
  2789                           	opt stack 0
  2790                           tblptru	equ	0xFF8
  2791                           tblptrh	equ	0xFF7
  2792                           tblptrl	equ	0xFF6
  2793                           tablat	equ	0xFF5
  2794                           postinc0	equ	0xFEE
  2795                           wreg	equ	0xFE8
  2796                           postdec1	equ	0xFE5
  2797                           fsr1l	equ	0xFE1
  2798                           status	equ	0xFD8
  2799                           
  2800 ;; *************** function _stopSignals *****************
  2801 ;; Defined at:
  2802 ;;		line 65 in file "main.c"
  2803 ;; Parameters:    Size  Location     Type
  2804 ;;		None
  2805 ;; Auto vars:     Size  Location     Type
  2806 ;;		None
  2807 ;; Return value:  Size  Location     Type
  2808 ;;                  1    wreg      void 
  2809 ;; Registers used:
  2810 ;;		wreg, status,2
  2811 ;; Tracked objects:
  2812 ;;		On entry : 0/0
  2813 ;;		On exit  : 0/0
  2814 ;;		Unchanged: 0/0
  2815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2816 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2817 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2818 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2819 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2820 ;;Total ram usage:        0 bytes
  2821 ;; Hardware stack levels used:    1
  2822 ;; Hardware stack levels required when called:    7
  2823 ;; This function calls:
  2824 ;;		Nothing
  2825 ;; This function is called by:
  2826 ;;		_main
  2827 ;; This function uses a non-reentrant model
  2828 ;;
  2829                           
  2830                           	psect	text1
  2831  004720                     __ptext1:
  2832                           	opt stack 0
  2833  004720                     _stopSignals:
  2834                           	opt stack 23
  2835                           
  2836                           ;main.c: 66: LATA = 0x00;
  2837                           
  2838                           ; BSR set to: 0
  2839                           ;incstack = 0
  2840  004720  0E00               	movlw	0
  2841  004722  6E89               	movwf	3977,c	;volatile
  2842                           
  2843                           ;main.c: 67: LATB = 0x00;
  2844  004724  0E00               	movlw	0
  2845  004726  6E8A               	movwf	3978,c	;volatile
  2846                           
  2847                           ;main.c: 68: LATC = 0x00;
  2848  004728  0E00               	movlw	0
  2849  00472A  6E8B               	movwf	3979,c	;volatile
  2850                           
  2851                           ;main.c: 69: LATD = 0x00;
  2852  00472C  0E00               	movlw	0
  2853  00472E  6E8C               	movwf	3980,c	;volatile
  2854                           
  2855                           ;main.c: 70: LATE = 0x00;
  2856  004730  0E00               	movlw	0
  2857  004732  6E8D               	movwf	3981,c	;volatile
  2858  004734  0012               	return		;funcret
  2859  004736                     __end_of_stopSignals:
  2860                           	opt stack 0
  2861                           tblptru	equ	0xFF8
  2862                           tblptrh	equ	0xFF7
  2863                           tblptrl	equ	0xFF6
  2864                           tablat	equ	0xFF5
  2865                           postinc0	equ	0xFEE
  2866                           wreg	equ	0xFE8
  2867                           postdec1	equ	0xFE5
  2868                           fsr1l	equ	0xFE1
  2869                           status	equ	0xFD8
  2870                           
  2871 ;; *************** function _sort *****************
  2872 ;; Defined at:
  2873 ;;		line 55 in file "sort.c"
  2874 ;; Parameters:    Size  Location     Type
  2875 ;;		None
  2876 ;; Auto vars:     Size  Location     Type
  2877 ;;		None
  2878 ;; Return value:  Size  Location     Type
  2879 ;;                  1    wreg      void 
  2880 ;; Registers used:
  2881 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2882 ;; Tracked objects:
  2883 ;;		On entry : 0/0
  2884 ;;		On exit  : 0/0
  2885 ;;		Unchanged: 0/0
  2886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2887 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2888 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2889 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2890 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2891 ;;Total ram usage:        0 bytes
  2892 ;; Hardware stack levels used:    1
  2893 ;; Hardware stack levels required when called:   12
  2894 ;; This function calls:
  2895 ;;		_Distribution
  2896 ;;		_ID
  2897 ;;		_Loading
  2898 ;; This function is called by:
  2899 ;;		_main
  2900 ;; This function uses a non-reentrant model
  2901 ;;
  2902                           
  2903                           	psect	text2
  2904  0046A6                     __ptext2:
  2905                           	opt stack 0
  2906  0046A6                     _sort:
  2907                           	opt stack 18
  2908                           
  2909                           ;sort.c: 56: if(machine_state == Sorting_state){
  2910                           
  2911                           ;incstack = 0
  2912  0046A6  0100               	movlb	0	; () banked
  2913  0046A8  05FC               	decf	_machine_state& (0+255),w,b
  2914  0046AA  B4D8               	btfsc	status,2,c
  2915                           
  2916                           ; BSR set to: 0
  2917                           ;sort.c: 57: Loading();
  2918  0046AC  ECB2  F016         	call	_Loading	;wreg free
  2919                           
  2920                           ;sort.c: 58: }
  2921                           ;sort.c: 59: if(machine_state == Sorting_state){
  2922  0046B0  0100               	movlb	0	; () banked
  2923  0046B2  05FC               	decf	_machine_state& (0+255),w,b
  2924  0046B4  B4D8               	btfsc	status,2,c
  2925                           
  2926                           ; BSR set to: 0
  2927                           ;sort.c: 60: ID();
  2928  0046B6  EC05  F016         	call	_ID	;wreg free
  2929                           
  2930                           ;sort.c: 61: }
  2931                           ;sort.c: 62: if(machine_state == Sorting_state){
  2932  0046BA  0100               	movlb	0	; () banked
  2933  0046BC  05FC               	decf	_machine_state& (0+255),w,b
  2934  0046BE  A4D8               	btfss	status,2,c
  2935  0046C0  0012               	return	
  2936                           
  2937                           ; BSR set to: 0
  2938                           ;sort.c: 63: Distribution();
  2939  0046C2  EC59  F017         	call	_Distribution	;wreg free
  2940  0046C6  0012               	return	
  2941  0046C8                     __end_of_sort:
  2942                           	opt stack 0
  2943                           tblptru	equ	0xFF8
  2944                           tblptrh	equ	0xFF7
  2945                           tblptrl	equ	0xFF6
  2946                           tablat	equ	0xFF5
  2947                           postinc0	equ	0xFEE
  2948                           wreg	equ	0xFE8
  2949                           postdec1	equ	0xFE5
  2950                           fsr1l	equ	0xFE1
  2951                           status	equ	0xFD8
  2952                           
  2953 ;; *************** function _Loading *****************
  2954 ;; Defined at:
  2955 ;;		line 67 in file "sort.c"
  2956 ;; Parameters:    Size  Location     Type
  2957 ;;		None
  2958 ;; Auto vars:     Size  Location     Type
  2959 ;;  i               2   54[BANK0 ] int 
  2960 ;;  addr            2   51[BANK0 ] unsigned short 
  2961 ;;  byte1           1   53[BANK0 ] unsigned char 
  2962 ;; Return value:  Size  Location     Type
  2963 ;;                  1    wreg      void 
  2964 ;; Registers used:
  2965 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2966 ;; Tracked objects:
  2967 ;;		On entry : 0/0
  2968 ;;		On exit  : 0/0
  2969 ;;		Unchanged: 0/0
  2970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2971 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2972 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2973 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2974 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2975 ;;Total ram usage:        7 bytes
  2976 ;; Hardware stack levels used:    1
  2977 ;; Hardware stack levels required when called:   11
  2978 ;; This function calls:
  2979 ;;		_EEPROM_read
  2980 ;;		_EEPROM_write
  2981 ;;		_delay_ms
  2982 ;;		_getIR
  2983 ;;		_initGlobalVars
  2984 ;;		_initServos
  2985 ;;		_initSortTimer
  2986 ;;		_lcdInst
  2987 ;; This function is called by:
  2988 ;;		_sort
  2989 ;; This function uses a non-reentrant model
  2990 ;;
  2991                           
  2992                           	psect	text3
  2993  002D64                     __ptext3:
  2994                           	opt stack 0
  2995  002D64                     _Loading:
  2996                           	opt stack 18
  2997                           
  2998                           ;sort.c: 68: if(first){
  2999                           
  3000                           ;incstack = 0
  3001  002D64  0100               	movlb	0	; () banked
  3002  002D66  51E2               	movf	_first& (0+255),w,b
  3003  002D68  0100               	movlb	0	; () banked
  3004  002D6A  11E3               	iorwf	(_first+1)& (0+255),w,b
  3005  002D6C  B4D8               	btfsc	status,2,c
  3006  002D6E  D066               	goto	l6391
  3007                           
  3008                           ; BSR set to: 0
  3009                           ;sort.c: 69: initGlobalVars();
  3010  002D70  ECBC  F01E         	call	_initGlobalVars	;wreg free
  3011                           
  3012                           ;sort.c: 70: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  3013  002D74  0E01               	movlw	1
  3014  002D76  ECC1  F023         	call	_lcdInst
  3015  002D7A  0E68               	movlw	104
  3016  002D7C  0100               	movlb	0	; () banked
  3017  002D7E  6FB1               	movwf	??_Loading& (0+255),b
  3018  002D80  0EE4               	movlw	228
  3019  002D82                     u7077:
  3020  002D82  2EE8               	decfsz	wreg,f,c
  3021  002D84  D7FE               	bra	u7077
  3022  002D86  2FB1               	decfsz	??_Loading& (0+255),f,b
  3023  002D88  D7FC               	bra	u7077
  3024  002D8A  F000               	nop	
  3025                           
  3026                           ;sort.c: 71: initSortTimer();
  3027  002D8C  ECC1  F01B         	call	_initSortTimer	;wreg free
  3028                           
  3029                           ;sort.c: 72: LATCbits.LATC5 = 1;
  3030  002D90  8A8B               	bsf	3979,5,c	;volatile
  3031                           
  3032                           ;sort.c: 77: sel = EEPROM_read(0);
  3033  002D92  0E00               	movlw	0
  3034  002D94  0100               	movlb	0	; () banked
  3035  002D96  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  3036  002D98  0E00               	movlw	0
  3037  002D9A  6F80               	movwf	EEPROM_read@address& (0+255),b
  3038  002D9C  EC84  F023         	call	_EEPROM_read	;wreg free
  3039  002DA0  0100               	movlb	0	; () banked
  3040  002DA2  6FFD               	movwf	_sel& (0+255),b
  3041                           
  3042                           ; BSR set to: 0
  3043                           ;sort.c: 78: unsigned short addr = 1 + 11 * sel;
  3044  002DA4  0100               	movlb	0	; () banked
  3045  002DA6  51FD               	movf	_sel& (0+255),w,b
  3046  002DA8  0D0B               	mullw	11
  3047  002DAA  0E01               	movlw	1
  3048  002DAC  24F3               	addwf	prodl,w,c
  3049  002DAE  0100               	movlb	0	; () banked
  3050  002DB0  6FB3               	movwf	Loading@addr& (0+255),b
  3051  002DB2  0E00               	movlw	0
  3052  002DB4  20F4               	addwfc	prodh,w,c
  3053  002DB6  0100               	movlb	0	; () banked
  3054  002DB8  6FB4               	movwf	(Loading@addr+1)& (0+255),b
  3055                           
  3056                           ; BSR set to: 0
  3057                           ;sort.c: 79: unsigned char byte1 = 0b01111111;
  3058  002DBA  0E7F               	movlw	127
  3059  002DBC  0100               	movlb	0	; () banked
  3060  002DBE  6FB5               	movwf	Loading@byte1& (0+255),b
  3061                           
  3062                           ; BSR set to: 0
  3063                           ;sort.c: 80: EEPROM_write(addr, byte1);
  3064  002DC0  C0B3  F0AB         	movff	Loading@addr,EEPROM_write@address
  3065  002DC4  C0B4  F0AC         	movff	Loading@addr+1,EEPROM_write@address+1
  3066  002DC8  C0B5  F0AD         	movff	Loading@byte1,EEPROM_write@data
  3067  002DCC  EC27  F01A         	call	_EEPROM_write	;wreg free
  3068                           
  3069                           ;sort.c: 83: LATAbits.LATA5 = 0;
  3070  002DD0  9A89               	bcf	3977,5,c	;volatile
  3071                           
  3072                           ;sort.c: 84: for(int i=0; i<46; i++){
  3073  002DD2  0E00               	movlw	0
  3074  002DD4  0100               	movlb	0	; () banked
  3075  002DD6  6FB7               	movwf	(Loading@i+1)& (0+255),b
  3076  002DD8  0E00               	movlw	0
  3077  002DDA  6FB6               	movwf	Loading@i& (0+255),b
  3078                           
  3079                           ; BSR set to: 0
  3080  002DDC  0100               	movlb	0	; () banked
  3081  002DDE  BFB7               	btfsc	(Loading@i+1)& (0+255),7,b
  3082  002DE0  D008               	goto	l6381
  3083  002DE2  0100               	movlb	0	; () banked
  3084  002DE4  51B7               	movf	(Loading@i+1)& (0+255),w,b
  3085  002DE6  E126               	bnz	l721
  3086  002DE8  0E2E               	movlw	46
  3087  002DEA  0100               	movlb	0	; () banked
  3088  002DEC  5DB6               	subwf	Loading@i& (0+255),w,b
  3089  002DEE  B0D8               	btfsc	status,0,c
  3090  002DF0  D021               	goto	l721
  3091  002DF2                     l6381:
  3092                           
  3093                           ; BSR set to: 0
  3094                           ;sort.c: 85: LATAbits.LATA5 = !LATAbits.LATA5;
  3095  002DF2  BA89               	btfsc	3977,5,c	;volatile
  3096  002DF4  D004               	goto	u4820
  3097  002DF6  0100               	movlb	0	; () banked
  3098  002DF8  6BB1               	clrf	??_Loading& (0+255),b
  3099  002DFA  2BB1               	incf	??_Loading& (0+255),f,b
  3100  002DFC  D002               	goto	u4838
  3101  002DFE                     u4820:
  3102  002DFE  0100               	movlb	0	; () banked
  3103  002E00  6BB1               	clrf	??_Loading& (0+255),b
  3104  002E02                     u4838:
  3105  002E02  0100               	movlb	0	; () banked
  3106  002E04  3BB1               	swapf	??_Loading& (0+255),f,b
  3107  002E06  47B1               	rlncf	??_Loading& (0+255),f,b
  3108  002E08  5089               	movf	3977,w,c	;volatile
  3109  002E0A  0100               	movlb	0	; () banked
  3110  002E0C  19B1               	xorwf	??_Loading& (0+255),w,b
  3111  002E0E  0BDF               	andlw	-33
  3112  002E10  19B1               	xorwf	??_Loading& (0+255),w,b
  3113  002E12  6E89               	movwf	3977,c	;volatile
  3114                           
  3115                           ; BSR set to: 0
  3116                           ;sort.c: 86: delay_ms(45-i);
  3117  002E14  0100               	movlb	0	; () banked
  3118  002E16  51B6               	movf	Loading@i& (0+255),w,b
  3119  002E18  0800               	sublw	0
  3120  002E1A  0F2D               	addlw	45
  3121  002E1C  ECE1  F022         	call	_delay_ms
  3122  002E20  0100               	movlb	0	; () banked
  3123  002E22  4BB6               	infsnz	Loading@i& (0+255),f,b
  3124  002E24  2BB7               	incf	(Loading@i+1)& (0+255),f,b
  3125                           
  3126                           ; BSR set to: 0
  3127  002E26  0100               	movlb	0	; () banked
  3128  002E28  BFB7               	btfsc	(Loading@i+1)& (0+255),7,b
  3129  002E2A  D7E3               	goto	l6381
  3130  002E2C  0100               	movlb	0	; () banked
  3131  002E2E  51B7               	movf	(Loading@i+1)& (0+255),w,b
  3132  002E30  E101               	bnz	u4840
  3133  002E32  D7DA               	goto	L1
  3134  002E34                     u4840:
  3135  002E34                     l721:
  3136                           
  3137                           ; BSR set to: 0
  3138                           ;sort.c: 87: }
  3139                           ;sort.c: 88: LATAbits.LATA5 = 1;
  3140  002E34  8A89               	bsf	3977,5,c	;volatile
  3141                           
  3142                           ; BSR set to: 0
  3143                           ;sort.c: 91: initServos();
  3144  002E36  ECB4  F01F         	call	_initServos	;wreg free
  3145                           
  3146                           ;sort.c: 92: }
  3147  002E3A  0012               	return	
  3148  002E3C                     l6391:
  3149                           
  3150                           ;sort.c: 93: else{
  3151                           ;sort.c: 96: if(!f_loadingNewCan){
  3152  002E3C  0100               	movlb	0	; () banked
  3153  002E3E  51E0               	movf	_f_loadingNewCan& (0+255),w,b
  3154  002E40  0100               	movlb	0	; () banked
  3155  002E42  11E1               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3156  002E44  A4D8               	btfss	status,2,c
  3157  002E46  D017               	goto	l6407
  3158                           
  3159                           ; BSR set to: 0
  3160                           ;sort.c: 98: getIR();
  3161  002E48  EC5C  F020         	call	_getIR	;wreg free
  3162                           
  3163                           ;sort.c: 100: if(!f_loadingNewCan){
  3164  002E4C  0100               	movlb	0	; () banked
  3165  002E4E  51E0               	movf	_f_loadingNewCan& (0+255),w,b
  3166  002E50  0100               	movlb	0	; () banked
  3167  002E52  11E1               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3168  002E54  B4D8               	btfsc	status,2,c
  3169  002E56  0012               	return	
  3170                           
  3171                           ; BSR set to: 0
  3172                           ;sort.c: 104: else{
  3173                           ;sort.c: 105: count_total++;
  3174                           
  3175                           ; BSR set to: 0
  3176                           
  3177                           ; BSR set to: 0
  3178                           ;sort.c: 102: }
  3179                           
  3180                           ; BSR set to: 0
  3181                           ;sort.c: 101: return;
  3182  002E58  0100               	movlb	0	; () banked
  3183  002E5A  4BFE               	infsnz	_count_total& (0+255),f,b
  3184  002E5C  2BFF               	incf	(_count_total+1)& (0+255),f,b
  3185                           
  3186                           ; BSR set to: 0
  3187                           ;sort.c: 106: if(count_total == 12){
  3188  002E5E  0E0C               	movlw	12
  3189  002E60  0100               	movlb	0	; () banked
  3190  002E62  19FE               	xorwf	_count_total& (0+255),w,b
  3191  002E64  0100               	movlb	0	; () banked
  3192  002E66  11FF               	iorwf	(_count_total+1)& (0+255),w,b
  3193  002E68  A4D8               	btfss	status,2,c
  3194  002E6A  0012               	return	
  3195                           
  3196                           ; BSR set to: 0
  3197                           ;sort.c: 107: f_lastCan = 1;
  3198  002E6C  0E00               	movlw	0
  3199  002E6E  6E74               	movwf	_f_lastCan+1,c
  3200  002E70  0E01               	movlw	1
  3201  002E72  6E73               	movwf	_f_lastCan,c
  3202                           
  3203                           ; BSR set to: 0
  3204                           ;sort.c: 108: }
  3205                           ;sort.c: 109: }
  3206                           ;sort.c: 110: }
  3207                           
  3208                           ; BSR set to: 0
  3209  002E74  0012               	return	
  3210  002E76                     l6407:
  3211                           
  3212                           ; BSR set to: 0
  3213                           ;sort.c: 113: else if(f_ID_receive){
  3214  002E76  506D               	movf	_f_ID_receive,w,c
  3215  002E78  106E               	iorwf	_f_ID_receive+1,w,c
  3216  002E7A  B4D8               	btfsc	status,2,c
  3217  002E7C  0012               	return	
  3218                           
  3219                           ; BSR set to: 0
  3220                           ;sort.c: 114: f_loadingNewCan = 0;
  3221  002E7E  0E00               	movlw	0
  3222  002E80  0100               	movlb	0	; () banked
  3223  002E82  6FE1               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3224  002E84  0E00               	movlw	0
  3225  002E86  6FE0               	movwf	_f_loadingNewCan& (0+255),b
  3226                           
  3227                           ; BSR set to: 0
  3228                           ;sort.c: 115: LATAbits.LATA4 = 1;
  3229  002E88  8889               	bsf	3977,4,c	;volatile
  3230                           
  3231                           ;sort.c: 116: f_can_coming_to_ID = 1;
  3232  002E8A  0E00               	movlw	0
  3233  002E8C  6E70               	movwf	_f_can_coming_to_ID+1,c
  3234  002E8E  0E01               	movlw	1
  3235  002E90  6E6F               	movwf	_f_can_coming_to_ID,c
  3236                           
  3237                           ; BSR set to: 0
  3238                           ;sort.c: 117: _delay((unsigned long)((300)*(32000000/4000.0)));
  3239  002E92  0E0D               	movlw	13
  3240  002E94  0100               	movlb	0	; () banked
  3241  002E96  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3242  002E98  0E2D               	movlw	45
  3243  002E9A  0100               	movlb	0	; () banked
  3244  002E9C  6FB1               	movwf	??_Loading& (0+255),b
  3245  002E9E  0ED7               	movlw	215
  3246  002EA0                     u7087:
  3247  002EA0  2EE8               	decfsz	wreg,f,c
  3248  002EA2  D7FE               	bra	u7087
  3249  002EA4  2FB1               	decfsz	??_Loading& (0+255),f,b
  3250  002EA6  D7FC               	bra	u7087
  3251  002EA8  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3252  002EAA  D7FA               	bra	u7087
  3253  002EAC  D000               	nop2	
  3254                           
  3255                           ;sort.c: 118: LATAbits.LATA4 = 0;
  3256  002EAE  9889               	bcf	3977,4,c	;volatile
  3257  002EB0  0012               	return	
  3258  002EB2                     __end_of_Loading:
  3259                           	opt stack 0
  3260                           tblptru	equ	0xFF8
  3261                           tblptrh	equ	0xFF7
  3262                           tblptrl	equ	0xFF6
  3263                           tablat	equ	0xFF5
  3264                           prodh	equ	0xFF4
  3265                           prodl	equ	0xFF3
  3266                           postinc0	equ	0xFEE
  3267                           wreg	equ	0xFE8
  3268                           postdec1	equ	0xFE5
  3269                           fsr1l	equ	0xFE1
  3270                           status	equ	0xFD8
  3271                           
  3272 ;; *************** function _initSortTimer *****************
  3273 ;; Defined at:
  3274 ;;		line 243 in file "sort.c"
  3275 ;; Parameters:    Size  Location     Type
  3276 ;;		None
  3277 ;; Auto vars:     Size  Location     Type
  3278 ;;  i               2    8[BANK0 ] int 
  3279 ;; Return value:  Size  Location     Type
  3280 ;;                  1    wreg      void 
  3281 ;; Registers used:
  3282 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3283 ;; Tracked objects:
  3284 ;;		On entry : 0/0
  3285 ;;		On exit  : 0/0
  3286 ;;		Unchanged: 0/0
  3287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3288 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3289 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3290 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3291 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3292 ;;Total ram usage:        5 bytes
  3293 ;; Hardware stack levels used:    1
  3294 ;; Hardware stack levels required when called:   10
  3295 ;; This function calls:
  3296 ;;		_getRTC
  3297 ;; This function is called by:
  3298 ;;		_Loading
  3299 ;; This function uses a non-reentrant model
  3300 ;;
  3301                           
  3302                           	psect	text4
  3303  003782                     __ptext4:
  3304                           	opt stack 0
  3305  003782                     _initSortTimer:
  3306                           	opt stack 18
  3307                           
  3308                           ;sort.c: 245: getRTC();
  3309                           
  3310                           ;incstack = 0
  3311  003782  EC87  F01D         	call	_getRTC	;wreg free
  3312                           
  3313                           ;sort.c: 246: for(int i = 0; i < 7; i++){
  3314  003786  0E00               	movlw	0
  3315  003788  0100               	movlb	0	; () banked
  3316  00378A  6F89               	movwf	(initSortTimer@i+1)& (0+255),b
  3317  00378C  0E00               	movlw	0
  3318  00378E  6F88               	movwf	initSortTimer@i& (0+255),b
  3319  003790                     l5987:
  3320                           
  3321                           ; BSR set to: 0
  3322  003790  0100               	movlb	0	; () banked
  3323  003792  BF89               	btfsc	(initSortTimer@i+1)& (0+255),7,b
  3324  003794  D008               	goto	l5991
  3325  003796  0100               	movlb	0	; () banked
  3326  003798  5189               	movf	(initSortTimer@i+1)& (0+255),w,b
  3327  00379A  E140               	bnz	l5997
  3328  00379C  0E07               	movlw	7
  3329  00379E  0100               	movlb	0	; () banked
  3330  0037A0  5D88               	subwf	initSortTimer@i& (0+255),w,b
  3331  0037A2  B0D8               	btfsc	status,0,c
  3332  0037A4  D03B               	goto	l5997
  3333  0037A6                     l5991:
  3334                           
  3335                           ; BSR set to: 0
  3336                           ;sort.c: 247: startTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  3337  0037A6  0E24               	movlw	low _time
  3338  0037A8  0100               	movlb	0	; () banked
  3339  0037AA  2588               	addwf	initSortTimer@i& (0+255),w,b
  3340  0037AC  6ED9               	movwf	fsr2l,c
  3341  0037AE  0E01               	movlw	high _time
  3342  0037B0  0100               	movlb	0	; () banked
  3343  0037B2  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  3344  0037B4  6EDA               	movwf	fsr2h,c
  3345  0037B6  50DF               	movf	indf2,w,c
  3346  0037B8  0100               	movlb	0	; () banked
  3347  0037BA  6F85               	movwf	??_initSortTimer& (0+255),b
  3348  0037BC  0100               	movlb	0	; () banked
  3349  0037BE  3B85               	swapf	??_initSortTimer& (0+255),f,b
  3350  0037C0  0E0F               	movlw	15
  3351  0037C2  1785               	andwf	??_initSortTimer& (0+255),f,b
  3352  0037C4  0E0F               	movlw	15
  3353  0037C6  0100               	movlb	0	; () banked
  3354  0037C8  1785               	andwf	??_initSortTimer& (0+255),f,b
  3355  0037CA  0100               	movlb	0	; () banked
  3356  0037CC  5185               	movf	??_initSortTimer& (0+255),w,b
  3357  0037CE  0D0A               	mullw	10
  3358  0037D0  0E24               	movlw	low _time
  3359  0037D2  0100               	movlb	0	; () banked
  3360  0037D4  2588               	addwf	initSortTimer@i& (0+255),w,b
  3361  0037D6  6ED9               	movwf	fsr2l,c
  3362  0037D8  0E01               	movlw	high _time
  3363  0037DA  0100               	movlb	0	; () banked
  3364  0037DC  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  3365  0037DE  6EDA               	movwf	fsr2h,c
  3366  0037E0  50DF               	movf	indf2,w,c
  3367  0037E2  0B0F               	andlw	15
  3368  0037E4  0100               	movlb	0	; () banked
  3369  0037E6  6F86               	movwf	(??_initSortTimer+1)& (0+255),b
  3370  0037E8  6B87               	clrf	(??_initSortTimer+2)& (0+255),b
  3371  0037EA  50F3               	movf	prodl,w,c
  3372  0037EC  0100               	movlb	0	; () banked
  3373  0037EE  2786               	addwf	(??_initSortTimer+1)& (0+255),f,b
  3374  0037F0  50F4               	movf	prodh,w,c
  3375  0037F2  0100               	movlb	0	; () banked
  3376  0037F4  2387               	addwfc	(??_initSortTimer+2)& (0+255),f,b
  3377  0037F6  90D8               	bcf	status,0,c
  3378  0037F8  0100               	movlb	0	; () banked
  3379  0037FA  3588               	rlcf	initSortTimer@i& (0+255),w,b
  3380  0037FC  6ED9               	movwf	fsr2l,c
  3381  0037FE  0100               	movlb	0	; () banked
  3382  003800  3589               	rlcf	(initSortTimer@i+1)& (0+255),w,b
  3383  003802  6EDA               	movwf	fsr2h,c
  3384  003804  0E0E               	movlw	low _startTime
  3385  003806  26D9               	addwf	fsr2l,f,c
  3386  003808  0E01               	movlw	high _startTime
  3387  00380A  22DA               	addwfc	fsr2h,f,c
  3388  00380C  C086  FFDE         	movff	??_initSortTimer+1,postinc2
  3389  003810  C087  FFDD         	movff	??_initSortTimer+2,postdec2
  3390                           
  3391                           ; BSR set to: 0
  3392  003814  0100               	movlb	0	; () banked
  3393  003816  4B88               	infsnz	initSortTimer@i& (0+255),f,b
  3394  003818  2B89               	incf	(initSortTimer@i+1)& (0+255),f,b
  3395  00381A  D7BA               	goto	l5987
  3396  00381C                     l5997:
  3397                           
  3398                           ; BSR set to: 0
  3399                           ;sort.c: 248: }
  3400                           ;sort.c: 250: T0CON = 0b00010111;
  3401  00381C  0E17               	movlw	23
  3402  00381E  6ED5               	movwf	4053,c	;volatile
  3403                           
  3404                           ;sort.c: 259: TMR0H = 0b10000101;
  3405  003820  0E85               	movlw	133
  3406  003822  6ED7               	movwf	4055,c	;volatile
  3407                           
  3408                           ;sort.c: 260: TMR0L = 0b11101110;
  3409  003824  0EEE               	movlw	238
  3410  003826  6ED6               	movwf	4054,c	;volatile
  3411                           
  3412                           ; BSR set to: 0
  3413                           ;sort.c: 261: TMR0ON = 1;
  3414  003828  8ED5               	bsf	4053,7,c	;volatile
  3415                           
  3416                           ; BSR set to: 0
  3417  00382A  0012               	return		;funcret
  3418  00382C                     __end_of_initSortTimer:
  3419                           	opt stack 0
  3420                           tblptru	equ	0xFF8
  3421                           tblptrh	equ	0xFF7
  3422                           tblptrl	equ	0xFF6
  3423                           tablat	equ	0xFF5
  3424                           prodh	equ	0xFF4
  3425                           prodl	equ	0xFF3
  3426                           postinc0	equ	0xFEE
  3427                           wreg	equ	0xFE8
  3428                           postdec1	equ	0xFE5
  3429                           fsr1l	equ	0xFE1
  3430                           indf2	equ	0xFDF
  3431                           postinc2	equ	0xFDE
  3432                           postdec2	equ	0xFDD
  3433                           fsr2h	equ	0xFDA
  3434                           fsr2l	equ	0xFD9
  3435                           status	equ	0xFD8
  3436                           
  3437 ;; *************** function _initGlobalVars *****************
  3438 ;; Defined at:
  3439 ;;		line 224 in file "sort.c"
  3440 ;; Parameters:    Size  Location     Type
  3441 ;;		None
  3442 ;; Auto vars:     Size  Location     Type
  3443 ;;		None
  3444 ;; Return value:  Size  Location     Type
  3445 ;;                  1    wreg      void 
  3446 ;; Registers used:
  3447 ;;		wreg, status,2
  3448 ;; Tracked objects:
  3449 ;;		On entry : 0/0
  3450 ;;		On exit  : 0/0
  3451 ;;		Unchanged: 0/0
  3452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3453 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3454 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3455 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3456 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3457 ;;Total ram usage:        0 bytes
  3458 ;; Hardware stack levels used:    1
  3459 ;; Hardware stack levels required when called:    7
  3460 ;; This function calls:
  3461 ;;		Nothing
  3462 ;; This function is called by:
  3463 ;;		_Loading
  3464 ;; This function uses a non-reentrant model
  3465 ;;
  3466                           
  3467                           	psect	text5
  3468  003D78                     __ptext5:
  3469                           	opt stack 0
  3470  003D78                     _initGlobalVars:
  3471                           	opt stack 21
  3472                           
  3473                           ;sort.c: 226: first = 0;
  3474                           
  3475                           ; BSR set to: 0
  3476                           ;incstack = 0
  3477  003D78  0E00               	movlw	0
  3478  003D7A  0100               	movlb	0	; () banked
  3479  003D7C  6FE3               	movwf	(_first+1)& (0+255),b
  3480  003D7E  0E00               	movlw	0
  3481  003D80  6FE2               	movwf	_first& (0+255),b
  3482                           
  3483                           ;sort.c: 229: f_loadingNewCan = 0;
  3484  003D82  0E00               	movlw	0
  3485  003D84  0100               	movlb	0	; () banked
  3486  003D86  6FE1               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3487  003D88  0E00               	movlw	0
  3488  003D8A  6FE0               	movwf	_f_loadingNewCan& (0+255),b
  3489                           
  3490                           ;sort.c: 230: f_lastCan = 0;
  3491  003D8C  0E00               	movlw	0
  3492  003D8E  6E74               	movwf	_f_lastCan+1,c
  3493  003D90  0E00               	movlw	0
  3494  003D92  6E73               	movwf	_f_lastCan,c
  3495                           
  3496                           ;sort.c: 231: f_ID_receive = 1;
  3497  003D94  0E00               	movlw	0
  3498  003D96  6E6E               	movwf	_f_ID_receive+1,c
  3499  003D98  0E01               	movlw	1
  3500  003D9A  6E6D               	movwf	_f_ID_receive,c
  3501                           
  3502                           ;sort.c: 232: f_can_coming_to_ID = 0;
  3503  003D9C  0E00               	movlw	0
  3504  003D9E  6E70               	movwf	_f_can_coming_to_ID+1,c
  3505  003DA0  0E00               	movlw	0
  3506  003DA2  6E6F               	movwf	_f_can_coming_to_ID,c
  3507                           
  3508                           ;sort.c: 233: f_can_coming_to_distribution = 0;
  3509  003DA4  0E00               	movlw	0
  3510  003DA6  6E72               	movwf	_f_can_coming_to_distribution+1,c
  3511  003DA8  0E00               	movlw	0
  3512  003DAA  6E71               	movwf	_f_can_coming_to_distribution,c
  3513                           
  3514                           ;sort.c: 234: f_can_distributed = 0;
  3515  003DAC  0E00               	movlw	0
  3516  003DAE  0101               	movlb	1	; () banked
  3517  003DB0  6F2E               	movwf	(_f_can_distributed+1)& (0+255),b
  3518  003DB2  0E00               	movlw	0
  3519  003DB4  6F2D               	movwf	_f_can_distributed& (0+255),b
  3520                           
  3521                           ;sort.c: 237: count_total = 0;
  3522  003DB6  0E00               	movlw	0
  3523  003DB8  0100               	movlb	0	; () banked
  3524  003DBA  6FFF               	movwf	(_count_total+1)& (0+255),b
  3525  003DBC  0E00               	movlw	0
  3526  003DBE  6FFE               	movwf	_count_total& (0+255),b
  3527                           
  3528                           ;sort.c: 238: count_pop_no_tab = 0;
  3529  003DC0  0E00               	movlw	0
  3530  003DC2  6E62               	movwf	_count_pop_no_tab+1,c
  3531  003DC4  0E00               	movlw	0
  3532  003DC6  6E61               	movwf	_count_pop_no_tab,c
  3533                           
  3534                           ;sort.c: 239: count_pop_w_tab = 0;
  3535  003DC8  0E00               	movlw	0
  3536  003DCA  6E64               	movwf	_count_pop_w_tab+1,c
  3537  003DCC  0E00               	movlw	0
  3538  003DCE  6E63               	movwf	_count_pop_w_tab,c
  3539                           
  3540                           ;sort.c: 240: count_can_w_lab = 0;
  3541  003DD0  0E00               	movlw	0
  3542  003DD2  6E60               	movwf	_count_can_w_lab+1,c
  3543  003DD4  0E00               	movlw	0
  3544  003DD6  6E5F               	movwf	_count_can_w_lab,c
  3545                           
  3546                           ;sort.c: 241: count_can_no_lab = 0;
  3547  003DD8  0E00               	movlw	0
  3548  003DDA  6E5E               	movwf	_count_can_no_lab+1,c
  3549  003DDC  0E00               	movlw	0
  3550  003DDE  6E5D               	movwf	_count_can_no_lab,c
  3551                           
  3552                           ; BSR set to: 0
  3553  003DE0  0012               	return		;funcret
  3554  003DE2                     __end_of_initGlobalVars:
  3555                           	opt stack 0
  3556                           tblptru	equ	0xFF8
  3557                           tblptrh	equ	0xFF7
  3558                           tblptrl	equ	0xFF6
  3559                           tablat	equ	0xFF5
  3560                           prodh	equ	0xFF4
  3561                           prodl	equ	0xFF3
  3562                           postinc0	equ	0xFEE
  3563                           wreg	equ	0xFE8
  3564                           postdec1	equ	0xFE5
  3565                           fsr1l	equ	0xFE1
  3566                           indf2	equ	0xFDF
  3567                           postinc2	equ	0xFDE
  3568                           postdec2	equ	0xFDD
  3569                           fsr2h	equ	0xFDA
  3570                           fsr2l	equ	0xFD9
  3571                           status	equ	0xFD8
  3572                           
  3573 ;; *************** function _getIR *****************
  3574 ;; Defined at:
  3575 ;;		line 300 in file "sort.c"
  3576 ;; Parameters:    Size  Location     Type
  3577 ;;		None
  3578 ;; Auto vars:     Size  Location     Type
  3579 ;;		None
  3580 ;; Return value:  Size  Location     Type
  3581 ;;                  1    wreg      void 
  3582 ;; Registers used:
  3583 ;;		wreg, status,2, status,0, cstack
  3584 ;; Tracked objects:
  3585 ;;		On entry : 0/0
  3586 ;;		On exit  : 0/0
  3587 ;;		Unchanged: 0/0
  3588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3589 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3590 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3591 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3592 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3593 ;;Total ram usage:        2 bytes
  3594 ;; Hardware stack levels used:    1
  3595 ;; Hardware stack levels required when called:    9
  3596 ;; This function calls:
  3597 ;;		_readIR
  3598 ;; This function is called by:
  3599 ;;		_Loading
  3600 ;; This function uses a non-reentrant model
  3601 ;;
  3602                           
  3603                           	psect	text6
  3604  0040B8                     __ptext6:
  3605                           	opt stack 0
  3606  0040B8                     _getIR:
  3607                           	opt stack 19
  3608                           
  3609                           ;sort.c: 301: readIR();
  3610                           
  3611                           ; BSR set to: 0
  3612                           ;incstack = 0
  3613  0040B8  EC83  F020         	call	_readIR	;wreg free
  3614                           
  3615                           ;sort.c: 302: if(IR_signal==1){
  3616  0040BC  0100               	movlb	0	; () banked
  3617  0040BE  05DA               	decf	_IR_signal& (0+255),w,b
  3618  0040C0  0100               	movlb	0	; () banked
  3619  0040C2  11DB               	iorwf	(_IR_signal+1)& (0+255),w,b
  3620  0040C4  A4D8               	btfss	status,2,c
  3621  0040C6  0012               	return	
  3622                           
  3623                           ; BSR set to: 0
  3624                           ;sort.c: 303: _delay((unsigned long)((100)*(32000000/4000.0)));
  3625  0040C8  0E05               	movlw	5
  3626  0040CA  0100               	movlb	0	; () banked
  3627  0040CC  6F87               	movwf	(??_getIR+1)& (0+255),b
  3628  0040CE  0E0F               	movlw	15
  3629  0040D0  0100               	movlb	0	; () banked
  3630  0040D2  6F86               	movwf	??_getIR& (0+255),b
  3631  0040D4  0EF1               	movlw	241
  3632  0040D6                     u7097:
  3633  0040D6  2EE8               	decfsz	wreg,f,c
  3634  0040D8  D7FE               	bra	u7097
  3635  0040DA  2F86               	decfsz	??_getIR& (0+255),f,b
  3636  0040DC  D7FC               	bra	u7097
  3637  0040DE  2F87               	decfsz	(??_getIR+1)& (0+255),f,b
  3638  0040E0  D7FA               	bra	u7097
  3639                           
  3640                           ;sort.c: 304: if(IR_signal==1){
  3641  0040E2  0100               	movlb	0	; () banked
  3642  0040E4  05DA               	decf	_IR_signal& (0+255),w,b
  3643  0040E6  0100               	movlb	0	; () banked
  3644  0040E8  11DB               	iorwf	(_IR_signal+1)& (0+255),w,b
  3645  0040EA  A4D8               	btfss	status,2,c
  3646  0040EC  D006               	goto	l6085
  3647                           
  3648                           ; BSR set to: 0
  3649                           ;sort.c: 305: f_loadingNewCan = 1;
  3650  0040EE  0E00               	movlw	0
  3651  0040F0  0100               	movlb	0	; () banked
  3652  0040F2  6FE1               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3653  0040F4  0E01               	movlw	1
  3654  0040F6  6FE0               	movwf	_f_loadingNewCan& (0+255),b
  3655                           
  3656                           ;sort.c: 306: }
  3657  0040F8  0012               	return	
  3658  0040FA                     l6085:
  3659                           
  3660                           ; BSR set to: 0
  3661                           ;sort.c: 307: else{
  3662                           ;sort.c: 308: f_loadingNewCan = 0;
  3663  0040FA  0E00               	movlw	0
  3664  0040FC  0100               	movlb	0	; () banked
  3665  0040FE  6FE1               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3666  004100  0E00               	movlw	0
  3667  004102  6FE0               	movwf	_f_loadingNewCan& (0+255),b
  3668                           
  3669                           ; BSR set to: 0
  3670  004104  0012               	return	
  3671  004106                     __end_of_getIR:
  3672                           	opt stack 0
  3673                           tblptru	equ	0xFF8
  3674                           tblptrh	equ	0xFF7
  3675                           tblptrl	equ	0xFF6
  3676                           tablat	equ	0xFF5
  3677                           prodh	equ	0xFF4
  3678                           prodl	equ	0xFF3
  3679                           postinc0	equ	0xFEE
  3680                           wreg	equ	0xFE8
  3681                           postdec1	equ	0xFE5
  3682                           fsr1l	equ	0xFE1
  3683                           indf2	equ	0xFDF
  3684                           postinc2	equ	0xFDE
  3685                           postdec2	equ	0xFDD
  3686                           fsr2h	equ	0xFDA
  3687                           fsr2l	equ	0xFD9
  3688                           status	equ	0xFD8
  3689                           
  3690 ;; *************** function _readIR *****************
  3691 ;; Defined at:
  3692 ;;		line 23 in file "ADCFunctionality.c"
  3693 ;; Parameters:    Size  Location     Type
  3694 ;;		None
  3695 ;; Auto vars:     Size  Location     Type
  3696 ;;  res             2    4[BANK0 ] int 
  3697 ;; Return value:  Size  Location     Type
  3698 ;;                  1    wreg      void 
  3699 ;; Registers used:
  3700 ;;		wreg, status,2, status,0, cstack
  3701 ;; Tracked objects:
  3702 ;;		On entry : 0/0
  3703 ;;		On exit  : 0/0
  3704 ;;		Unchanged: 0/0
  3705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3706 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3707 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3708 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3709 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3710 ;;Total ram usage:        4 bytes
  3711 ;; Hardware stack levels used:    1
  3712 ;; Hardware stack levels required when called:    8
  3713 ;; This function calls:
  3714 ;;		_readADC
  3715 ;; This function is called by:
  3716 ;;		_getIR
  3717 ;; This function uses a non-reentrant model
  3718 ;;
  3719                           
  3720                           	psect	text7
  3721  004106                     __ptext7:
  3722                           	opt stack 0
  3723  004106                     _readIR:
  3724                           	opt stack 19
  3725                           
  3726                           ;ADCFunctionality.c: 24: readADC(0);
  3727                           
  3728                           ; BSR set to: 0
  3729                           ;incstack = 0
  3730  004106  0E00               	movlw	0
  3731  004108  ECB6  F022         	call	_readADC
  3732                           
  3733                           ;ADCFunctionality.c: 25: int res = ADRESH<<8 | ADRESL;
  3734  00410C  50C3               	movf	4035,w,c	;volatile
  3735  00410E  CFC4 F082          	movff	4036,??_readIR	;volatile
  3736  004112  0100               	movlb	0	; () banked
  3737  004114  6B83               	clrf	(??_readIR+1)& (0+255),b
  3738  004116  C082  F083         	movff	??_readIR,??_readIR+1
  3739  00411A  0100               	movlb	0	; () banked
  3740  00411C  6B82               	clrf	??_readIR& (0+255),b
  3741  00411E  0100               	movlb	0	; () banked
  3742  004120  1182               	iorwf	??_readIR& (0+255),w,b
  3743  004122  0100               	movlb	0	; () banked
  3744  004124  6F84               	movwf	readIR@res& (0+255),b
  3745  004126  0100               	movlb	0	; () banked
  3746  004128  5183               	movf	(??_readIR+1)& (0+255),w,b
  3747  00412A  0100               	movlb	0	; () banked
  3748  00412C  6F85               	movwf	(readIR@res+1)& (0+255),b
  3749                           
  3750                           ; BSR set to: 0
  3751                           ;ADCFunctionality.c: 26: IR_signal = (res > 900) ? 1 : 0;
  3752  00412E  0100               	movlb	0	; () banked
  3753  004130  BF85               	btfsc	(readIR@res+1)& (0+255),7,b
  3754  004132  D00A               	goto	u3790
  3755  004134  0E85               	movlw	133
  3756  004136  0100               	movlb	0	; () banked
  3757  004138  5D84               	subwf	readIR@res& (0+255),w,b
  3758  00413A  0E03               	movlw	3
  3759  00413C  0100               	movlb	0	; () banked
  3760  00413E  5985               	subwfb	(readIR@res+1)& (0+255),w,b
  3761  004140  A0D8               	btfss	status,0,c
  3762  004142  D002               	goto	u3790
  3763  004144  0E01               	movlw	1
  3764  004146  D001               	goto	u3800
  3765  004148                     u3790:
  3766  004148  0E00               	movlw	0
  3767  00414A                     u3800:
  3768  00414A  0100               	movlb	0	; () banked
  3769  00414C  6FDA               	movwf	_IR_signal& (0+255),b
  3770  00414E  6BDB               	clrf	(_IR_signal+1)& (0+255),b
  3771                           
  3772                           ; BSR set to: 0
  3773  004150  0012               	return		;funcret
  3774  004152                     __end_of_readIR:
  3775                           	opt stack 0
  3776                           tblptru	equ	0xFF8
  3777                           tblptrh	equ	0xFF7
  3778                           tblptrl	equ	0xFF6
  3779                           tablat	equ	0xFF5
  3780                           prodh	equ	0xFF4
  3781                           prodl	equ	0xFF3
  3782                           postinc0	equ	0xFEE
  3783                           wreg	equ	0xFE8
  3784                           postdec1	equ	0xFE5
  3785                           fsr1l	equ	0xFE1
  3786                           indf2	equ	0xFDF
  3787                           postinc2	equ	0xFDE
  3788                           postdec2	equ	0xFDD
  3789                           fsr2h	equ	0xFDA
  3790                           fsr2l	equ	0xFD9
  3791                           status	equ	0xFD8
  3792                           
  3793 ;; *************** function _delay_ms *****************
  3794 ;; Defined at:
  3795 ;;		line 325 in file "sort.c"
  3796 ;; Parameters:    Size  Location     Type
  3797 ;;  milliseconds    1    wreg     unsigned char 
  3798 ;; Auto vars:     Size  Location     Type
  3799 ;;  milliseconds    1    1[BANK0 ] unsigned char 
  3800 ;; Return value:  Size  Location     Type
  3801 ;;                  1    wreg      void 
  3802 ;; Registers used:
  3803 ;;		wreg, status,2, status,0, cstack
  3804 ;; Tracked objects:
  3805 ;;		On entry : 0/0
  3806 ;;		On exit  : 0/0
  3807 ;;		Unchanged: 0/0
  3808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3809 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3810 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3811 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3812 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3813 ;;Total ram usage:        2 bytes
  3814 ;; Hardware stack levels used:    1
  3815 ;; Hardware stack levels required when called:    7
  3816 ;; This function calls:
  3817 ;;		Nothing
  3818 ;; This function is called by:
  3819 ;;		_Loading
  3820 ;; This function uses a non-reentrant model
  3821 ;;
  3822                           
  3823                           	psect	text8
  3824  0045C2                     __ptext8:
  3825                           	opt stack 0
  3826  0045C2                     _delay_ms:
  3827                           	opt stack 21
  3828                           
  3829                           ; BSR set to: 0
  3830                           ;incstack = 0
  3831                           ;delay_ms@milliseconds stored from wreg
  3832  0045C2  0100               	movlb	0	; () banked
  3833  0045C4  6F81               	movwf	delay_ms@milliseconds& (0+255),b
  3834                           
  3835                           ;sort.c: 326: while(milliseconds > 0)
  3836  0045C6  D00B               	goto	l6059
  3837  0045C8                     l6055:
  3838                           
  3839                           ;sort.c: 327: {
  3840                           ;sort.c: 328: milliseconds--;
  3841  0045C8  0100               	movlb	0	; () banked
  3842  0045CA  0781               	decf	delay_ms@milliseconds& (0+255),f,b
  3843                           
  3844                           ; BSR set to: 0
  3845                           ;sort.c: 329: _delay((unsigned long)((990)*(32000000/4000000.0)));
  3846  0045CC  0E0B               	movlw	11
  3847  0045CE  0100               	movlb	0	; () banked
  3848  0045D0  6F80               	movwf	??_delay_ms& (0+255),b
  3849  0045D2  0E47               	movlw	71
  3850  0045D4                     u7107:
  3851  0045D4  2EE8               	decfsz	wreg,f,c
  3852  0045D6  D7FE               	bra	u7107
  3853  0045D8  2F80               	decfsz	??_delay_ms& (0+255),f,b
  3854  0045DA  D7FC               	bra	u7107
  3855  0045DC  D000               	nop2	
  3856  0045DE                     l6059:
  3857  0045DE  0100               	movlb	0	; () banked
  3858  0045E0  5181               	movf	delay_ms@milliseconds& (0+255),w,b
  3859  0045E2  0100               	movlb	0	; () banked
  3860  0045E4  B4D8               	btfsc	status,2,c
  3861  0045E6  0012               	return	
  3862  0045E8  D7EF               	goto	l6055
  3863  0045EA                     __end_of_delay_ms:
  3864                           	opt stack 0
  3865                           tblptru	equ	0xFF8
  3866                           tblptrh	equ	0xFF7
  3867                           tblptrl	equ	0xFF6
  3868                           tablat	equ	0xFF5
  3869                           prodh	equ	0xFF4
  3870                           prodl	equ	0xFF3
  3871                           postinc0	equ	0xFEE
  3872                           wreg	equ	0xFE8
  3873                           postdec1	equ	0xFE5
  3874                           fsr1l	equ	0xFE1
  3875                           indf2	equ	0xFDF
  3876                           postinc2	equ	0xFDE
  3877                           postdec2	equ	0xFDD
  3878                           fsr2h	equ	0xFDA
  3879                           fsr2l	equ	0xFD9
  3880                           status	equ	0xFD8
  3881                           
  3882 ;; *************** function _ID *****************
  3883 ;; Defined at:
  3884 ;;		line 122 in file "sort.c"
  3885 ;; Parameters:    Size  Location     Type
  3886 ;;		None
  3887 ;; Auto vars:     Size  Location     Type
  3888 ;;  i               2    8[BANK0 ] int 
  3889 ;;  sensor_outpu    6   10[BANK0 ] int [3]
  3890 ;; Return value:  Size  Location     Type
  3891 ;;                  1    wreg      void 
  3892 ;; Registers used:
  3893 ;;		wreg, status,2, status,0, cstack
  3894 ;; Tracked objects:
  3895 ;;		On entry : 0/0
  3896 ;;		On exit  : 0/0
  3897 ;;		Unchanged: 0/0
  3898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3899 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3900 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3901 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3902 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3903 ;;Total ram usage:       10 bytes
  3904 ;; Hardware stack levels used:    1
  3905 ;; Hardware stack levels required when called:    9
  3906 ;; This function calls:
  3907 ;;		_readMAG
  3908 ;; This function is called by:
  3909 ;;		_sort
  3910 ;; This function uses a non-reentrant model
  3911 ;;
  3912                           
  3913                           	psect	text9
  3914  002C0A                     __ptext9:
  3915                           	opt stack 0
  3916  002C0A                     _ID:
  3917                           	opt stack 20
  3918                           
  3919                           ;sort.c: 123: if(f_can_coming_to_ID){
  3920                           
  3921                           ; BSR set to: 0
  3922                           ;incstack = 0
  3923  002C0A  506F               	movf	_f_can_coming_to_ID,w,c
  3924  002C0C  1070               	iorwf	_f_can_coming_to_ID+1,w,c
  3925  002C0E  B4D8               	btfsc	status,2,c
  3926  002C10  0012               	return	
  3927                           
  3928                           ;sort.c: 125: _delay((unsigned long)((500)*(32000000/4000.0)));
  3929  002C12  0E15               	movlw	21
  3930  002C14  0100               	movlb	0	; () banked
  3931  002C16  6F87               	movwf	(??_ID+1)& (0+255),b
  3932  002C18  0E4B               	movlw	75
  3933  002C1A  0100               	movlb	0	; () banked
  3934  002C1C  6F86               	movwf	??_ID& (0+255),b
  3935  002C1E  0EBE               	movlw	190
  3936  002C20                     u7117:
  3937  002C20  2EE8               	decfsz	wreg,f,c
  3938  002C22  D7FE               	bra	u7117
  3939  002C24  2F86               	decfsz	??_ID& (0+255),f,b
  3940  002C26  D7FC               	bra	u7117
  3941  002C28  2F87               	decfsz	(??_ID+1)& (0+255),f,b
  3942  002C2A  D7FA               	bra	u7117
  3943  002C2C  F000               	nop	
  3944                           
  3945                           ;sort.c: 130: int sensor_outputs[3];
  3946                           ;sort.c: 134: sensor_outputs[0] = PORTAbits.RA2;
  3947  002C2E  A480               	btfss	3968,2,c	;volatile
  3948  002C30  D004               	goto	u4900
  3949  002C32  0100               	movlb	0	; () banked
  3950  002C34  6B86               	clrf	??_ID& (0+255),b
  3951  002C36  2B86               	incf	??_ID& (0+255),f,b
  3952  002C38  D002               	goto	u4908
  3953  002C3A                     u4900:
  3954  002C3A  0100               	movlb	0	; () banked
  3955  002C3C  6B86               	clrf	??_ID& (0+255),b
  3956  002C3E                     u4908:
  3957  002C3E  0100               	movlb	0	; () banked
  3958  002C40  5186               	movf	??_ID& (0+255),w,b
  3959  002C42  0100               	movlb	0	; () banked
  3960  002C44  6F8A               	movwf	ID@sensor_outputs& (0+255),b
  3961  002C46  6B8B               	clrf	(ID@sensor_outputs+1)& (0+255),b
  3962                           
  3963                           ; BSR set to: 0
  3964                           ;sort.c: 136: if(!sensor_outputs[0]){
  3965  002C48  0100               	movlb	0	; () banked
  3966  002C4A  518A               	movf	ID@sensor_outputs& (0+255),w,b
  3967  002C4C  0100               	movlb	0	; () banked
  3968  002C4E  118B               	iorwf	(ID@sensor_outputs+1)& (0+255),w,b
  3969  002C50  A4D8               	btfss	status,2,c
  3970  002C52  D029               	goto	l6439
  3971                           
  3972                           ; BSR set to: 0
  3973                           ;sort.c: 137: readMAG();
  3974  002C54  ECA9  F020         	call	_readMAG	;wreg free
  3975                           
  3976                           ;sort.c: 138: sensor_outputs[1] = MAG_signal;
  3977  002C58  C0DC  F08C         	movff	_MAG_signal,ID@sensor_outputs+2
  3978  002C5C  C0DD  F08D         	movff	_MAG_signal+1,ID@sensor_outputs+3
  3979                           
  3980                           ;sort.c: 139: if(!sensor_outputs[1]){
  3981  002C60  0100               	movlb	0	; () banked
  3982  002C62  518C               	movf	(ID@sensor_outputs+2)& (0+255),w,b
  3983  002C64  0100               	movlb	0	; () banked
  3984  002C66  118D               	iorwf	(ID@sensor_outputs+3)& (0+255),w,b
  3985  002C68  A4D8               	btfss	status,2,c
  3986  002C6A  D01D               	goto	l6439
  3987                           
  3988                           ; BSR set to: 0
  3989                           ;sort.c: 140: LATAbits.LATA3 = 1;
  3990  002C6C  8689               	bsf	3977,3,c	;volatile
  3991                           
  3992                           ; BSR set to: 0
  3993                           ;sort.c: 142: _delay((unsigned long)((300)*(32000000/4000.0)));
  3994  002C6E  0E0D               	movlw	13
  3995  002C70  0100               	movlb	0	; () banked
  3996  002C72  6F87               	movwf	(??_ID+1)& (0+255),b
  3997  002C74  0E2D               	movlw	45
  3998  002C76  0100               	movlb	0	; () banked
  3999  002C78  6F86               	movwf	??_ID& (0+255),b
  4000  002C7A  0ED7               	movlw	215
  4001  002C7C                     u7127:
  4002  002C7C  2EE8               	decfsz	wreg,f,c
  4003  002C7E  D7FE               	bra	u7127
  4004  002C80  2F86               	decfsz	??_ID& (0+255),f,b
  4005  002C82  D7FC               	bra	u7127
  4006  002C84  2F87               	decfsz	(??_ID+1)& (0+255),f,b
  4007  002C86  D7FA               	bra	u7127
  4008  002C88  D000               	nop2	
  4009                           
  4010                           ;sort.c: 143: sensor_outputs[2] = PORTAbits.RA2;
  4011  002C8A  A480               	btfss	3968,2,c	;volatile
  4012  002C8C  D004               	goto	u4930
  4013  002C8E  0100               	movlb	0	; () banked
  4014  002C90  6B86               	clrf	??_ID& (0+255),b
  4015  002C92  2B86               	incf	??_ID& (0+255),f,b
  4016  002C94  D002               	goto	u4938
  4017  002C96                     u4930:
  4018  002C96  0100               	movlb	0	; () banked
  4019  002C98  6B86               	clrf	??_ID& (0+255),b
  4020  002C9A                     u4938:
  4021  002C9A  0100               	movlb	0	; () banked
  4022  002C9C  5186               	movf	??_ID& (0+255),w,b
  4023  002C9E  0100               	movlb	0	; () banked
  4024  002CA0  6F8E               	movwf	(ID@sensor_outputs+4)& (0+255),b
  4025  002CA2  6B8F               	clrf	(ID@sensor_outputs+5)& (0+255),b
  4026                           
  4027                           ; BSR set to: 0
  4028                           ;sort.c: 144: LATAbits.LATA3 = 0;
  4029  002CA4  9689               	bcf	3977,3,c	;volatile
  4030  002CA6                     l6439:
  4031                           
  4032                           ; BSR set to: 0
  4033                           ;sort.c: 145: }
  4034                           ;sort.c: 146: }
  4035                           ;sort.c: 149: if(!sensor_outputs[0]){
  4036  002CA6  0100               	movlb	0	; () banked
  4037  002CA8  518A               	movf	ID@sensor_outputs& (0+255),w,b
  4038  002CAA  0100               	movlb	0	; () banked
  4039  002CAC  118B               	iorwf	(ID@sensor_outputs+1)& (0+255),w,b
  4040  002CAE  A4D8               	btfss	status,2,c
  4041  002CB0  D01E               	goto	l6457
  4042                           
  4043                           ; BSR set to: 0
  4044                           ;sort.c: 150: if(!sensor_outputs[1]){
  4045  002CB2  0100               	movlb	0	; () banked
  4046  002CB4  518C               	movf	(ID@sensor_outputs+2)& (0+255),w,b
  4047  002CB6  0100               	movlb	0	; () banked
  4048  002CB8  118D               	iorwf	(ID@sensor_outputs+3)& (0+255),w,b
  4049  002CBA  A4D8               	btfss	status,2,c
  4050  002CBC  D012               	goto	l6453
  4051                           
  4052                           ; BSR set to: 0
  4053                           ;sort.c: 151: if(!sensor_outputs[2]){
  4054  002CBE  0100               	movlb	0	; () banked
  4055  002CC0  518E               	movf	(ID@sensor_outputs+4)& (0+255),w,b
  4056  002CC2  0100               	movlb	0	; () banked
  4057  002CC4  118F               	iorwf	(ID@sensor_outputs+5)& (0+255),w,b
  4058  002CC6  A4D8               	btfss	status,2,c
  4059  002CC8  D006               	goto	l6449
  4060                           
  4061                           ; BSR set to: 0
  4062                           ;sort.c: 152: count_pop_no_tab++;
  4063  002CCA  4A61               	infsnz	_count_pop_no_tab,f,c
  4064  002CCC  2A62               	incf	_count_pop_no_tab+1,f,c
  4065                           
  4066                           ; BSR set to: 0
  4067                           ;sort.c: 153: cur_can = 0;
  4068  002CCE  0E00               	movlw	0
  4069  002CD0  6E66               	movwf	_cur_can+1,c
  4070  002CD2  0E00               	movlw	0
  4071  002CD4  D011               	goto	L4
  4072  002CD6                     l6449:
  4073                           
  4074                           ; BSR set to: 0
  4075                           ;sort.c: 155: else{
  4076                           ;sort.c: 156: count_pop_w_tab++;
  4077  002CD6  4A63               	infsnz	_count_pop_w_tab,f,c
  4078  002CD8  2A64               	incf	_count_pop_w_tab+1,f,c
  4079                           
  4080                           ; BSR set to: 0
  4081                           ;sort.c: 157: cur_can = 1;
  4082  002CDA  0E00               	movlw	0
  4083  002CDC  6E66               	movwf	_cur_can+1,c
  4084  002CDE  0E01               	movlw	1
  4085  002CE0  D00B               	goto	L4
  4086  002CE2                     l6453:
  4087                           
  4088                           ; BSR set to: 0
  4089                           ;sort.c: 160: else{
  4090                           ;sort.c: 161: count_can_w_lab++;
  4091  002CE2  4A5F               	infsnz	_count_can_w_lab,f,c
  4092  002CE4  2A60               	incf	_count_can_w_lab+1,f,c
  4093                           
  4094                           ; BSR set to: 0
  4095                           ;sort.c: 162: cur_can = 2;
  4096  002CE6  0E00               	movlw	0
  4097  002CE8  6E66               	movwf	_cur_can+1,c
  4098  002CEA  0E02               	movlw	2
  4099  002CEC  D005               	goto	L4
  4100  002CEE                     l6457:
  4101                           
  4102                           ; BSR set to: 0
  4103                           ;sort.c: 165: else{
  4104                           ;sort.c: 166: count_can_no_lab++;
  4105  002CEE  4A5D               	infsnz	_count_can_no_lab,f,c
  4106  002CF0  2A5E               	incf	_count_can_no_lab+1,f,c
  4107                           
  4108                           ; BSR set to: 0
  4109                           ;sort.c: 167: cur_can = 3;
  4110  002CF2  0E00               	movlw	0
  4111  002CF4  6E66               	movwf	_cur_can+1,c
  4112  002CF6  0E03               	movlw	3
  4113  002CF8                     L4:
  4114  002CF8  6E65               	movwf	_cur_can,c
  4115                           
  4116                           ; BSR set to: 0
  4117                           ;sort.c: 168: }
  4118                           ;sort.c: 172: for(int i=0;i<10000;i++)
  4119                           
  4120                           ; BSR set to: 0
  4121  002CFA  0E00               	movlw	0
  4122  002CFC  0100               	movlb	0	; () banked
  4123  002CFE  6F89               	movwf	(ID@i+1)& (0+255),b
  4124  002D00  0E00               	movlw	0
  4125  002D02  6F88               	movwf	ID@i& (0+255),b
  4126  002D04                     l6463:
  4127                           
  4128                           ; BSR set to: 0
  4129  002D04  0100               	movlb	0	; () banked
  4130  002D06  BF89               	btfsc	(ID@i+1)& (0+255),7,b
  4131  002D08  D008               	goto	l741
  4132  002D0A  0E10               	movlw	16
  4133  002D0C  0100               	movlb	0	; () banked
  4134  002D0E  5D88               	subwf	ID@i& (0+255),w,b
  4135  002D10  0E27               	movlw	39
  4136  002D12  0100               	movlb	0	; () banked
  4137  002D14  5989               	subwfb	(ID@i+1)& (0+255),w,b
  4138  002D16  B0D8               	btfsc	status,0,c
  4139  002D18  D00D               	goto	l6473
  4140  002D1A                     l741:
  4141                           
  4142                           ; BSR set to: 0
  4143                           ;sort.c: 173: {
  4144                           ;sort.c: 174: LATCbits.LATC0 = 1;
  4145  002D1A  808B               	bsf	3979,0,c	;volatile
  4146                           
  4147                           ; BSR set to: 0
  4148                           ;sort.c: 175: _delay((unsigned long)((10)*(32000000/4000000.0)));
  4149  002D1C  0E1A               	movlw	26
  4150  002D1E                     u7137:
  4151  002D1E  2EE8               	decfsz	wreg,f,c
  4152  002D20  D7FE               	bra	u7137
  4153  002D22  D000               	nop2	
  4154                           
  4155                           ;sort.c: 176: LATCbits.LATC0 = 0;
  4156  002D24  908B               	bcf	3979,0,c	;volatile
  4157                           
  4158                           ;sort.c: 177: _delay((unsigned long)((90)*(32000000/4000000.0)));
  4159  002D26  0EF0               	movlw	240
  4160  002D28                     u7147:
  4161  002D28  2EE8               	decfsz	wreg,f,c
  4162  002D2A  D7FE               	bra	u7147
  4163  002D2C  0100               	movlb	0	; () banked
  4164  002D2E  4B88               	infsnz	ID@i& (0+255),f,b
  4165  002D30  2B89               	incf	(ID@i+1)& (0+255),f,b
  4166  002D32  D7E8               	goto	l6463
  4167  002D34                     l6473:
  4168                           
  4169                           ; BSR set to: 0
  4170                           ;sort.c: 178: }
  4171                           ;sort.c: 180: f_can_coming_to_distribution = 1;
  4172  002D34  0E00               	movlw	0
  4173  002D36  6E72               	movwf	_f_can_coming_to_distribution+1,c
  4174  002D38  0E01               	movlw	1
  4175  002D3A  6E71               	movwf	_f_can_coming_to_distribution,c
  4176                           
  4177                           ; BSR set to: 0
  4178                           ;sort.c: 181: _delay((unsigned long)((500)*(32000000/4000.0)));
  4179  002D3C  0E15               	movlw	21
  4180  002D3E  0100               	movlb	0	; () banked
  4181  002D40  6F87               	movwf	(??_ID+1)& (0+255),b
  4182  002D42  0E4B               	movlw	75
  4183  002D44  0100               	movlb	0	; () banked
  4184  002D46  6F86               	movwf	??_ID& (0+255),b
  4185  002D48  0EBE               	movlw	190
  4186  002D4A                     u7157:
  4187  002D4A  2EE8               	decfsz	wreg,f,c
  4188  002D4C  D7FE               	bra	u7157
  4189  002D4E  2F86               	decfsz	??_ID& (0+255),f,b
  4190  002D50  D7FC               	bra	u7157
  4191  002D52  2F87               	decfsz	(??_ID+1)& (0+255),f,b
  4192  002D54  D7FA               	bra	u7157
  4193  002D56  F000               	nop	
  4194                           
  4195                           ;sort.c: 182: LATCbits.LATC0 = 1;
  4196  002D58  808B               	bsf	3979,0,c	;volatile
  4197                           
  4198                           ;sort.c: 184: f_can_coming_to_ID = 0;
  4199  002D5A  0E00               	movlw	0
  4200  002D5C  6E70               	movwf	_f_can_coming_to_ID+1,c
  4201  002D5E  0E00               	movlw	0
  4202  002D60  6E6F               	movwf	_f_can_coming_to_ID,c
  4203  002D62  0012               	return	
  4204  002D64                     __end_of_ID:
  4205                           	opt stack 0
  4206                           tblptru	equ	0xFF8
  4207                           tblptrh	equ	0xFF7
  4208                           tblptrl	equ	0xFF6
  4209                           tablat	equ	0xFF5
  4210                           prodh	equ	0xFF4
  4211                           prodl	equ	0xFF3
  4212                           postinc0	equ	0xFEE
  4213                           wreg	equ	0xFE8
  4214                           postdec1	equ	0xFE5
  4215                           fsr1l	equ	0xFE1
  4216                           indf2	equ	0xFDF
  4217                           postinc2	equ	0xFDE
  4218                           postdec2	equ	0xFDD
  4219                           fsr2h	equ	0xFDA
  4220                           fsr2l	equ	0xFD9
  4221                           status	equ	0xFD8
  4222                           
  4223 ;; *************** function _Distribution *****************
  4224 ;; Defined at:
  4225 ;;		line 187 in file "sort.c"
  4226 ;; Parameters:    Size  Location     Type
  4227 ;;		None
  4228 ;; Auto vars:     Size  Location     Type
  4229 ;;		None
  4230 ;; Return value:  Size  Location     Type
  4231 ;;                  1    wreg      void 
  4232 ;; Registers used:
  4233 ;;		wreg, status,2, status,0, cstack
  4234 ;; Tracked objects:
  4235 ;;		On entry : 0/0
  4236 ;;		On exit  : 0/0
  4237 ;;		Unchanged: 0/0
  4238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4239 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4240 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4241 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4242 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4243 ;;Total ram usage:        2 bytes
  4244 ;; Hardware stack levels used:    1
  4245 ;; Hardware stack levels required when called:    8
  4246 ;; This function calls:
  4247 ;;		_updateServoPosition
  4248 ;; This function is called by:
  4249 ;;		_sort
  4250 ;; This function uses a non-reentrant model
  4251 ;;
  4252                           
  4253                           	psect	text10
  4254  002EB2                     __ptext10:
  4255                           	opt stack 0
  4256  002EB2                     _Distribution:
  4257                           	opt stack 21
  4258                           
  4259                           ;sort.c: 188: if(f_can_coming_to_distribution){
  4260                           
  4261                           ;incstack = 0
  4262  002EB2  5071               	movf	_f_can_coming_to_distribution,w,c
  4263  002EB4  1072               	iorwf	_f_can_coming_to_distribution+1,w,c
  4264  002EB6  B4D8               	btfsc	status,2,c
  4265  002EB8  0012               	return	
  4266  002EBA  D034               	goto	l6495
  4267  002EBC                     l6485:
  4268                           
  4269                           ;sort.c: 193: updateServoPosition(500, 1);
  4270  002EBC  0E01               	movlw	1
  4271  002EBE  0100               	movlb	0	; () banked
  4272  002EC0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4273  002EC2  0EF4               	movlw	244
  4274  002EC4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4275  002EC6  0E00               	movlw	0
  4276  002EC8  0100               	movlb	0	; () banked
  4277  002ECA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4278  002ECC  0E01               	movlw	1
  4279  002ECE  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4280  002ED0  EC48  F01E         	call	_updateServoPosition	;wreg free
  4281                           
  4282                           ;sort.c: 194: break;
  4283  002ED4  D03E               	goto	l6497
  4284  002ED6                     l6487:
  4285                           
  4286                           ;sort.c: 196: updateServoPosition(750, 1);
  4287  002ED6  0E02               	movlw	2
  4288  002ED8  0100               	movlb	0	; () banked
  4289  002EDA  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4290  002EDC  0EEE               	movlw	238
  4291  002EDE  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4292  002EE0  0E00               	movlw	0
  4293  002EE2  0100               	movlb	0	; () banked
  4294  002EE4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4295  002EE6  0E01               	movlw	1
  4296  002EE8  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4297  002EEA  EC48  F01E         	call	_updateServoPosition	;wreg free
  4298                           
  4299                           ;sort.c: 197: break;
  4300  002EEE  D031               	goto	l6497
  4301  002EF0                     l6489:
  4302                           
  4303                           ;sort.c: 199: updateServoPosition(1700, 1);
  4304  002EF0  0E06               	movlw	6
  4305  002EF2  0100               	movlb	0	; () banked
  4306  002EF4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4307  002EF6  0EA4               	movlw	164
  4308  002EF8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4309  002EFA  0E00               	movlw	0
  4310  002EFC  0100               	movlb	0	; () banked
  4311  002EFE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4312  002F00  0E01               	movlw	1
  4313  002F02  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4314  002F04  EC48  F01E         	call	_updateServoPosition	;wreg free
  4315                           
  4316                           ;sort.c: 200: break;
  4317  002F08  D024               	goto	l6497
  4318  002F0A                     l6491:
  4319                           
  4320                           ;sort.c: 202: updateServoPosition(2000, 1);
  4321  002F0A  0E07               	movlw	7
  4322  002F0C  0100               	movlb	0	; () banked
  4323  002F0E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4324  002F10  0ED0               	movlw	208
  4325  002F12  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4326  002F14  0E00               	movlw	0
  4327  002F16  0100               	movlb	0	; () banked
  4328  002F18  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4329  002F1A  0E01               	movlw	1
  4330  002F1C  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4331  002F1E  EC48  F01E         	call	_updateServoPosition	;wreg free
  4332                           
  4333                           ;sort.c: 206: }
  4334                           
  4335                           ;sort.c: 205: break;
  4336                           
  4337                           ;sort.c: 204: default:
  4338                           
  4339                           ;sort.c: 203: break;
  4340  002F22  D017               	goto	l6497
  4341  002F24                     l6495:
  4342  002F24  C065  F088         	movff	_cur_can,??_Distribution
  4343  002F28  C066  F089         	movff	_cur_can+1,??_Distribution+1
  4344                           
  4345                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4346                           ; Switch size 1, requested type "space"
  4347                           ; Number of cases is 1, Range of values is 0 to 0
  4348                           ; switch strategies available:
  4349                           ; Name         Instructions Cycles
  4350                           ; simple_byte            4     3 (average)
  4351                           ;	Chosen strategy is simple_byte
  4352  002F2C  0100               	movlb	0	; () banked
  4353  002F2E  5189               	movf	(??_Distribution+1)& (0+255),w,b
  4354  002F30  0A00               	xorlw	0	; case 0
  4355  002F32  A4D8               	btfss	status,2,c
  4356  002F34  D00E               	goto	l6497
  4357                           
  4358                           ; BSR set to: 0
  4359                           ; Switch size 1, requested type "space"
  4360                           ; Number of cases is 4, Range of values is 0 to 3
  4361                           ; switch strategies available:
  4362                           ; Name         Instructions Cycles
  4363                           ; simple_byte           13     7 (average)
  4364                           ;	Chosen strategy is simple_byte
  4365  002F36  0100               	movlb	0	; () banked
  4366  002F38  5188               	movf	??_Distribution& (0+255),w,b
  4367  002F3A  0A00               	xorlw	0	; case 0
  4368  002F3C  B4D8               	btfsc	status,2,c
  4369  002F3E  D7BE               	goto	l6485
  4370  002F40  0A01               	xorlw	1	; case 1
  4371  002F42  B4D8               	btfsc	status,2,c
  4372  002F44  D7C8               	goto	l6487
  4373  002F46  0A03               	xorlw	3	; case 2
  4374  002F48  B4D8               	btfsc	status,2,c
  4375  002F4A  D7D2               	goto	l6489
  4376  002F4C  0A01               	xorlw	1	; case 3
  4377  002F4E  B4D8               	btfsc	status,2,c
  4378  002F50  D7DC               	goto	l6491
  4379  002F52                     l6497:
  4380                           
  4381                           ;sort.c: 207: _delay((unsigned long)((1000)*(32000000/4000.0)));
  4382  002F52  0E29               	movlw	41
  4383  002F54  0100               	movlb	0	; () banked
  4384  002F56  6F89               	movwf	(??_Distribution+1)& (0+255),b
  4385  002F58  0E96               	movlw	150
  4386  002F5A  0100               	movlb	0	; () banked
  4387  002F5C  6F88               	movwf	??_Distribution& (0+255),b
  4388  002F5E  0E7F               	movlw	127
  4389  002F60                     u7167:
  4390  002F60  2EE8               	decfsz	wreg,f,c
  4391  002F62  D7FE               	bra	u7167
  4392  002F64  2F88               	decfsz	??_Distribution& (0+255),f,b
  4393  002F66  D7FC               	bra	u7167
  4394  002F68  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  4395  002F6A  D7FA               	bra	u7167
  4396                           
  4397                           ;sort.c: 210: updateServoPosition(1350, 3);
  4398  002F6C  0E05               	movlw	5
  4399  002F6E  0100               	movlb	0	; () banked
  4400  002F70  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4401  002F72  0E46               	movlw	70
  4402  002F74  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4403  002F76  0E00               	movlw	0
  4404  002F78  0100               	movlb	0	; () banked
  4405  002F7A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4406  002F7C  0E03               	movlw	3
  4407  002F7E  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4408  002F80  EC48  F01E         	call	_updateServoPosition	;wreg free
  4409                           
  4410                           ;sort.c: 211: _delay((unsigned long)((1500)*(32000000/4000.0)));
  4411  002F84  0E3D               	movlw	61
  4412  002F86  0100               	movlb	0	; () banked
  4413  002F88  6F89               	movwf	(??_Distribution+1)& (0+255),b
  4414  002F8A  0EE1               	movlw	225
  4415  002F8C  0100               	movlb	0	; () banked
  4416  002F8E  6F88               	movwf	??_Distribution& (0+255),b
  4417  002F90  0E3F               	movlw	63
  4418  002F92                     u7177:
  4419  002F92  2EE8               	decfsz	wreg,f,c
  4420  002F94  D7FE               	bra	u7177
  4421  002F96  2F88               	decfsz	??_Distribution& (0+255),f,b
  4422  002F98  D7FC               	bra	u7177
  4423  002F9A  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  4424  002F9C  D7FA               	bra	u7177
  4425  002F9E  D000               	nop2	
  4426                           
  4427                           ;sort.c: 214: updateServoPosition(1200, 1);
  4428  002FA0  0E04               	movlw	4
  4429  002FA2  0100               	movlb	0	; () banked
  4430  002FA4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4431  002FA6  0EB0               	movlw	176
  4432  002FA8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4433  002FAA  0E00               	movlw	0
  4434  002FAC  0100               	movlb	0	; () banked
  4435  002FAE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4436  002FB0  0E01               	movlw	1
  4437  002FB2  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4438  002FB4  EC48  F01E         	call	_updateServoPosition	;wreg free
  4439                           
  4440                           ;sort.c: 215: updateServoPosition(1190, 3);
  4441  002FB8  0E04               	movlw	4
  4442  002FBA  0100               	movlb	0	; () banked
  4443  002FBC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4444  002FBE  0EA6               	movlw	166
  4445  002FC0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4446  002FC2  0E00               	movlw	0
  4447  002FC4  0100               	movlb	0	; () banked
  4448  002FC6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4449  002FC8  0E03               	movlw	3
  4450  002FCA  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4451  002FCC  EC48  F01E         	call	_updateServoPosition	;wreg free
  4452                           
  4453                           ;sort.c: 216: f_can_coming_to_distribution = 0;
  4454  002FD0  0E00               	movlw	0
  4455  002FD2  6E72               	movwf	_f_can_coming_to_distribution+1,c
  4456  002FD4  0E00               	movlw	0
  4457  002FD6  6E71               	movwf	_f_can_coming_to_distribution,c
  4458                           
  4459                           ;sort.c: 217: f_can_distributed = 1;
  4460  002FD8  0E00               	movlw	0
  4461  002FDA  0101               	movlb	1	; () banked
  4462  002FDC  6F2E               	movwf	(_f_can_distributed+1)& (0+255),b
  4463  002FDE  0E01               	movlw	1
  4464  002FE0  6F2D               	movwf	_f_can_distributed& (0+255),b
  4465                           
  4466                           ; BSR set to: 1
  4467                           ;sort.c: 218: if(f_lastCan == 1){
  4468  002FE2  0473               	decf	_f_lastCan,w,c
  4469  002FE4  1074               	iorwf	_f_lastCan+1,w,c
  4470  002FE6  A4D8               	btfss	status,2,c
  4471  002FE8  0012               	return	
  4472                           
  4473                           ; BSR set to: 1
  4474                           ;sort.c: 219: machine_state = DoneSorting_state;
  4475  002FEA  0E02               	movlw	2
  4476  002FEC  0100               	movlb	0	; () banked
  4477  002FEE  6FFC               	movwf	_machine_state& (0+255),b
  4478                           
  4479                           ; BSR set to: 0
  4480  002FF0  0012               	return	
  4481  002FF2                     __end_of_Distribution:
  4482                           	opt stack 0
  4483                           tblptru	equ	0xFF8
  4484                           tblptrh	equ	0xFF7
  4485                           tblptrl	equ	0xFF6
  4486                           tablat	equ	0xFF5
  4487                           prodh	equ	0xFF4
  4488                           prodl	equ	0xFF3
  4489                           postinc0	equ	0xFEE
  4490                           wreg	equ	0xFE8
  4491                           postdec1	equ	0xFE5
  4492                           fsr1l	equ	0xFE1
  4493                           indf2	equ	0xFDF
  4494                           postinc2	equ	0xFDE
  4495                           postdec2	equ	0xFDD
  4496                           fsr2h	equ	0xFDA
  4497                           fsr2l	equ	0xFD9
  4498                           status	equ	0xFD8
  4499                           
  4500 ;; *************** function _machineConfig *****************
  4501 ;; Defined at:
  4502 ;;		line 15 in file "MachineConfig.c"
  4503 ;; Parameters:    Size  Location     Type
  4504 ;;		None
  4505 ;; Auto vars:     Size  Location     Type
  4506 ;;		None
  4507 ;; Return value:  Size  Location     Type
  4508 ;;                  1    wreg      void 
  4509 ;; Registers used:
  4510 ;;		wreg, status,2
  4511 ;; Tracked objects:
  4512 ;;		On entry : 0/0
  4513 ;;		On exit  : 0/0
  4514 ;;		Unchanged: 0/0
  4515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4516 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4517 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4518 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4519 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4520 ;;Total ram usage:        0 bytes
  4521 ;; Hardware stack levels used:    1
  4522 ;; Hardware stack levels required when called:    7
  4523 ;; This function calls:
  4524 ;;		Nothing
  4525 ;; This function is called by:
  4526 ;;		_main
  4527 ;; This function uses a non-reentrant model
  4528 ;;
  4529                           
  4530                           	psect	text11
  4531  003F0C                     __ptext11:
  4532                           	opt stack 0
  4533  003F0C                     _machineConfig:
  4534                           	opt stack 23
  4535                           
  4536                           ;MachineConfig.c: 17: OSCCON = 0xF0;
  4537                           
  4538                           ;incstack = 0
  4539  003F0C  0EF0               	movlw	240
  4540  003F0E  6ED3               	movwf	4051,c	;volatile
  4541                           
  4542                           ;MachineConfig.c: 18: OSCTUNEbits.PLLEN = 1;
  4543  003F10  8C9B               	bsf	3995,6,c	;volatile
  4544                           
  4545                           ;MachineConfig.c: 22: TRISA = 0b00000111;
  4546  003F12  0E07               	movlw	7
  4547  003F14  6E92               	movwf	3986,c	;volatile
  4548                           
  4549                           ;MachineConfig.c: 24: TRISB = 0b11110010;
  4550  003F16  0EF2               	movlw	242
  4551  003F18  6E93               	movwf	3987,c	;volatile
  4552                           
  4553                           ;MachineConfig.c: 27: TRISC = 0x00;
  4554  003F1A  0E00               	movlw	0
  4555  003F1C  6E94               	movwf	3988,c	;volatile
  4556                           
  4557                           ;MachineConfig.c: 31: TRISD = 0x00;
  4558  003F1E  0E00               	movlw	0
  4559  003F20  6E95               	movwf	3989,c	;volatile
  4560                           
  4561                           ;MachineConfig.c: 34: TRISE = 0x00;
  4562  003F22  0E00               	movlw	0
  4563  003F24  6E96               	movwf	3990,c	;volatile
  4564                           
  4565                           ;MachineConfig.c: 37: LATA = 0x00;
  4566  003F26  0E00               	movlw	0
  4567  003F28  6E89               	movwf	3977,c	;volatile
  4568                           
  4569                           ;MachineConfig.c: 38: LATB = 0x00;
  4570  003F2A  0E00               	movlw	0
  4571  003F2C  6E8A               	movwf	3978,c	;volatile
  4572                           
  4573                           ;MachineConfig.c: 39: LATC = 0x00;
  4574  003F2E  0E00               	movlw	0
  4575  003F30  6E8B               	movwf	3979,c	;volatile
  4576                           
  4577                           ;MachineConfig.c: 40: LATD = 0x00;
  4578  003F32  0E00               	movlw	0
  4579  003F34  6E8C               	movwf	3980,c	;volatile
  4580                           
  4581                           ;MachineConfig.c: 41: LATE = 0x00;
  4582  003F36  0E00               	movlw	0
  4583  003F38  6E8D               	movwf	3981,c	;volatile
  4584                           
  4585                           ;MachineConfig.c: 43: nRBPU = 0;
  4586  003F3A  9EF1               	bcf	intcon2,7,c	;volatile
  4587                           
  4588                           ;MachineConfig.c: 46: ADCON0 = 0x00;
  4589  003F3C  0E00               	movlw	0
  4590  003F3E  6EC2               	movwf	4034,c	;volatile
  4591                           
  4592                           ;MachineConfig.c: 47: ADCON1 = 0b00001101;
  4593  003F40  0E0D               	movlw	13
  4594  003F42  6EC1               	movwf	4033,c	;volatile
  4595                           
  4596                           ;MachineConfig.c: 50: CVRCON = 0x00;
  4597  003F44  0E00               	movlw	0
  4598  003F46  6EB5               	movwf	4021,c	;volatile
  4599                           
  4600                           ;MachineConfig.c: 51: CMCONbits.CIS = 0;
  4601  003F48  96B4               	bcf	4020,3,c	;volatile
  4602                           
  4603                           ;MachineConfig.c: 52: ADCON2 = 0b10110001;
  4604  003F4A  0EB1               	movlw	177
  4605  003F4C  6EC0               	movwf	4032,c	;volatile
  4606                           
  4607                           ;MachineConfig.c: 55: INT1IE = 1;
  4608  003F4E  86F0               	bsf	intcon3,3,c	;volatile
  4609                           
  4610                           ;MachineConfig.c: 57: TMR0IE = 1;
  4611  003F50  8AF2               	bsf	intcon,5,c	;volatile
  4612                           
  4613                           ;MachineConfig.c: 58: TMR1IE = 1;
  4614  003F52  809D               	bsf	3997,0,c	;volatile
  4615                           
  4616                           ;MachineConfig.c: 59: T1CON = 0b10110000;
  4617  003F54  0EB0               	movlw	176
  4618  003F56  6ECD               	movwf	4045,c	;volatile
  4619                           
  4620                           ;MachineConfig.c: 60: T3CON = 0b10110000;
  4621  003F58  0EB0               	movlw	176
  4622  003F5A  6EB1               	movwf	4017,c	;volatile
  4623                           
  4624                           ;MachineConfig.c: 61: TMR2IE = 1;
  4625  003F5C  829D               	bsf	3997,1,c	;volatile
  4626                           
  4627                           ;MachineConfig.c: 62: TMR3IE = 1;
  4628  003F5E  82A0               	bsf	4000,1,c	;volatile
  4629                           
  4630                           ;MachineConfig.c: 63: PEIE = 1;
  4631  003F60  8CF2               	bsf	intcon,6,c	;volatile
  4632                           
  4633                           ;MachineConfig.c: 64: ADIE = 0;
  4634  003F62  9C9D               	bcf	3997,6,c	;volatile
  4635                           
  4636                           ;MachineConfig.c: 65: (INTCONbits.GIE = 0);
  4637  003F64  9EF2               	bcf	intcon,7,c	;volatile
  4638  003F66  0012               	return		;funcret
  4639  003F68                     __end_of_machineConfig:
  4640                           	opt stack 0
  4641                           tblptru	equ	0xFF8
  4642                           tblptrh	equ	0xFF7
  4643                           tblptrl	equ	0xFF6
  4644                           tablat	equ	0xFF5
  4645                           prodh	equ	0xFF4
  4646                           prodl	equ	0xFF3
  4647                           intcon	equ	0xFF2
  4648                           intcon2	equ	0xFF1
  4649                           intcon3	equ	0xFF0
  4650                           postinc0	equ	0xFEE
  4651                           wreg	equ	0xFE8
  4652                           postdec1	equ	0xFE5
  4653                           fsr1l	equ	0xFE1
  4654                           indf2	equ	0xFDF
  4655                           postinc2	equ	0xFDE
  4656                           postdec2	equ	0xFDD
  4657                           fsr2h	equ	0xFDA
  4658                           fsr2l	equ	0xFD9
  4659                           status	equ	0xFD8
  4660                           
  4661 ;; *************** function _logRun *****************
  4662 ;; Defined at:
  4663 ;;		line 84 in file "EEPROM.c"
  4664 ;; Parameters:    Size  Location     Type
  4665 ;;		None
  4666 ;; Auto vars:     Size  Location     Type
  4667 ;;  byte_i          1   53[BANK0 ] unsigned char 
  4668 ;;  i               2   55[BANK0 ] int 
  4669 ;;  num             1   49[BANK0 ] unsigned char 
  4670 ;;  addr            2   57[BANK0 ] unsigned short 
  4671 ;;  byte11          1   54[BANK0 ] unsigned char 
  4672 ;;  byte3           1   52[BANK0 ] unsigned char 
  4673 ;;  byte2           1   51[BANK0 ] unsigned char 
  4674 ;;  byte1           1   50[BANK0 ] unsigned char 
  4675 ;; Return value:  Size  Location     Type
  4676 ;;                  1    wreg      void 
  4677 ;; Registers used:
  4678 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4679 ;; Tracked objects:
  4680 ;;		On entry : 0/0
  4681 ;;		On exit  : 0/0
  4682 ;;		Unchanged: 0/0
  4683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4684 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4685 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4686 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4687 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4688 ;;Total ram usage:       10 bytes
  4689 ;; Hardware stack levels used:    1
  4690 ;; Hardware stack levels required when called:   11
  4691 ;; This function calls:
  4692 ;;		_EEPROM_read
  4693 ;;		_EEPROM_write
  4694 ;; This function is called by:
  4695 ;;		_main
  4696 ;; This function uses a non-reentrant model
  4697 ;;
  4698                           
  4699                           	psect	text12
  4700  002FF2                     __ptext12:
  4701                           	opt stack 0
  4702  002FF2                     _logRun:
  4703                           	opt stack 19
  4704                           
  4705                           ;EEPROM.c: 97: sel = EEPROM_read(0);
  4706                           
  4707                           ;incstack = 0
  4708  002FF2  0E00               	movlw	0
  4709  002FF4  0100               	movlb	0	; () banked
  4710  002FF6  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  4711  002FF8  0E00               	movlw	0
  4712  002FFA  6F80               	movwf	EEPROM_read@address& (0+255),b
  4713  002FFC  EC84  F023         	call	_EEPROM_read	;wreg free
  4714  003000  0100               	movlb	0	; () banked
  4715  003002  6FFD               	movwf	_sel& (0+255),b
  4716                           
  4717                           ; BSR set to: 0
  4718                           ;EEPROM.c: 98: unsigned short addr = 1 + 11 * sel;
  4719  003004  0100               	movlb	0	; () banked
  4720  003006  51FD               	movf	_sel& (0+255),w,b
  4721  003008  0D0B               	mullw	11
  4722  00300A  0E01               	movlw	1
  4723  00300C  24F3               	addwf	prodl,w,c
  4724  00300E  0100               	movlb	0	; () banked
  4725  003010  6FB9               	movwf	logRun@addr& (0+255),b
  4726  003012  0E00               	movlw	0
  4727  003014  20F4               	addwfc	prodh,w,c
  4728  003016  0100               	movlb	0	; () banked
  4729  003018  6FBA               	movwf	(logRun@addr+1)& (0+255),b
  4730                           
  4731                           ; BSR set to: 0
  4732                           ;EEPROM.c: 101: if (sel < 3){
  4733  00301A  0E03               	movlw	3
  4734  00301C  0100               	movlb	0	; () banked
  4735  00301E  61FD               	cpfslt	_sel& (0+255),b
  4736  003020  D00E               	goto	l7967
  4737                           
  4738                           ; BSR set to: 0
  4739                           ;EEPROM.c: 102: unsigned char num = sel+1;
  4740  003022  0100               	movlb	0	; () banked
  4741  003024  29FD               	incf	_sel& (0+255),w,b
  4742  003026  0100               	movlb	0	; () banked
  4743  003028  6FB1               	movwf	logRun@num& (0+255),b
  4744                           
  4745                           ; BSR set to: 0
  4746                           ;EEPROM.c: 103: EEPROM_write(0, num);
  4747  00302A  0E00               	movlw	0
  4748  00302C  0100               	movlb	0	; () banked
  4749  00302E  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  4750  003030  0E00               	movlw	0
  4751  003032  6FAB               	movwf	EEPROM_write@address& (0+255),b
  4752  003034  C0B1  F0AD         	movff	logRun@num,EEPROM_write@data
  4753  003038  EC27  F01A         	call	_EEPROM_write	;wreg free
  4754                           
  4755                           ;EEPROM.c: 104: }
  4756  00303C  D00A               	goto	l7969
  4757  00303E                     l7967:
  4758                           
  4759                           ;EEPROM.c: 105: else{
  4760                           ;EEPROM.c: 106: EEPROM_write(0, 0);
  4761  00303E  0E00               	movlw	0
  4762  003040  0100               	movlb	0	; () banked
  4763  003042  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  4764  003044  0E00               	movlw	0
  4765  003046  6FAB               	movwf	EEPROM_write@address& (0+255),b
  4766  003048  0E00               	movlw	0
  4767  00304A  0100               	movlb	0	; () banked
  4768  00304C  6FAD               	movwf	EEPROM_write@data& (0+255),b
  4769  00304E  EC27  F01A         	call	_EEPROM_write	;wreg free
  4770  003052                     l7969:
  4771                           
  4772                           ;EEPROM.c: 107: }
  4773                           ;EEPROM.c: 110: unsigned char byte1 = 0b10000000 | count_total;
  4774  003052  0100               	movlb	0	; () banked
  4775  003054  51FE               	movf	_count_total& (0+255),w,b
  4776  003056  0980               	iorlw	128
  4777  003058  0100               	movlb	0	; () banked
  4778  00305A  6FB2               	movwf	logRun@byte1& (0+255),b
  4779                           
  4780                           ; BSR set to: 0
  4781                           ;EEPROM.c: 111: EEPROM_write(addr, byte1);
  4782  00305C  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4783  003060  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4784  003064  C0B2  F0AD         	movff	logRun@byte1,EEPROM_write@data
  4785  003068  EC27  F01A         	call	_EEPROM_write	;wreg free
  4786                           
  4787                           ;EEPROM.c: 112: addr++;
  4788  00306C  0100               	movlb	0	; () banked
  4789  00306E  4BB9               	infsnz	logRun@addr& (0+255),f,b
  4790  003070  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  4791                           
  4792                           ; BSR set to: 0
  4793                           ;EEPROM.c: 115: unsigned char byte2 = (count_pop_no_tab << 4) | count_pop_w_tab;
  4794  003072  3861               	swapf	_count_pop_no_tab,w,c
  4795  003074  0BF0               	andlw	240
  4796  003076  1063               	iorwf	_count_pop_w_tab,w,c
  4797  003078  0100               	movlb	0	; () banked
  4798  00307A  6FB3               	movwf	logRun@byte2& (0+255),b
  4799                           
  4800                           ; BSR set to: 0
  4801                           ;EEPROM.c: 116: EEPROM_write(addr, byte2);
  4802  00307C  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4803  003080  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4804  003084  C0B3  F0AD         	movff	logRun@byte2,EEPROM_write@data
  4805  003088  EC27  F01A         	call	_EEPROM_write	;wreg free
  4806                           
  4807                           ;EEPROM.c: 117: addr++;
  4808  00308C  0100               	movlb	0	; () banked
  4809  00308E  4BB9               	infsnz	logRun@addr& (0+255),f,b
  4810  003090  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  4811                           
  4812                           ; BSR set to: 0
  4813                           ;EEPROM.c: 118: unsigned char byte3 = (count_can_w_lab << 4) | count_can_no_lab;
  4814  003092  385F               	swapf	_count_can_w_lab,w,c
  4815  003094  0BF0               	andlw	240
  4816  003096  105D               	iorwf	_count_can_no_lab,w,c
  4817  003098  0100               	movlb	0	; () banked
  4818  00309A  6FB4               	movwf	logRun@byte3& (0+255),b
  4819                           
  4820                           ; BSR set to: 0
  4821                           ;EEPROM.c: 119: EEPROM_write(addr, byte3);
  4822  00309C  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4823  0030A0  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4824  0030A4  C0B4  F0AD         	movff	logRun@byte3,EEPROM_write@data
  4825  0030A8  EC27  F01A         	call	_EEPROM_write	;wreg free
  4826                           
  4827                           ;EEPROM.c: 120: addr++;
  4828  0030AC  0100               	movlb	0	; () banked
  4829  0030AE  4BB9               	infsnz	logRun@addr& (0+255),f,b
  4830  0030B0  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  4831                           
  4832                           ; BSR set to: 0
  4833                           ;EEPROM.c: 123: for(int i = 0; i < 7; i++){
  4834  0030B2  0E00               	movlw	0
  4835  0030B4  0100               	movlb	0	; () banked
  4836  0030B6  6FB8               	movwf	(logRun@i+1)& (0+255),b
  4837  0030B8  0E00               	movlw	0
  4838  0030BA  6FB7               	movwf	logRun@i& (0+255),b
  4839                           
  4840                           ; BSR set to: 0
  4841  0030BC  0100               	movlb	0	; () banked
  4842  0030BE  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  4843  0030C0  D008               	goto	l7993
  4844  0030C2  0100               	movlb	0	; () banked
  4845  0030C4  51B8               	movf	(logRun@i+1)& (0+255),w,b
  4846  0030C6  E128               	bnz	l939
  4847  0030C8  0E07               	movlw	7
  4848  0030CA  0100               	movlb	0	; () banked
  4849  0030CC  5DB7               	subwf	logRun@i& (0+255),w,b
  4850  0030CE  B0D8               	btfsc	status,0,c
  4851  0030D0  D023               	goto	l939
  4852  0030D2                     l7993:
  4853                           
  4854                           ; BSR set to: 0
  4855                           ;EEPROM.c: 124: unsigned char byte_i = startTime[i];
  4856  0030D2  90D8               	bcf	status,0,c
  4857  0030D4  0100               	movlb	0	; () banked
  4858  0030D6  35B7               	rlcf	logRun@i& (0+255),w,b
  4859  0030D8  6ED9               	movwf	fsr2l,c
  4860  0030DA  0100               	movlb	0	; () banked
  4861  0030DC  35B8               	rlcf	(logRun@i+1)& (0+255),w,b
  4862  0030DE  6EDA               	movwf	fsr2h,c
  4863  0030E0  0E0E               	movlw	low _startTime
  4864  0030E2  26D9               	addwf	fsr2l,f,c
  4865  0030E4  0E01               	movlw	high _startTime
  4866  0030E6  22DA               	addwfc	fsr2h,f,c
  4867  0030E8  50DF               	movf	indf2,w,c
  4868  0030EA  0100               	movlb	0	; () banked
  4869  0030EC  6FB5               	movwf	logRun@byte_i& (0+255),b
  4870                           
  4871                           ; BSR set to: 0
  4872                           ;EEPROM.c: 125: EEPROM_write(addr, byte_i);
  4873  0030EE  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4874  0030F2  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4875  0030F6  C0B5  F0AD         	movff	logRun@byte_i,EEPROM_write@data
  4876  0030FA  EC27  F01A         	call	_EEPROM_write	;wreg free
  4877                           
  4878                           ;EEPROM.c: 126: addr++;
  4879  0030FE  0100               	movlb	0	; () banked
  4880  003100  4BB9               	infsnz	logRun@addr& (0+255),f,b
  4881  003102  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  4882                           
  4883                           ; BSR set to: 0
  4884  003104  0100               	movlb	0	; () banked
  4885  003106  4BB7               	infsnz	logRun@i& (0+255),f,b
  4886  003108  2BB8               	incf	(logRun@i+1)& (0+255),f,b
  4887                           
  4888                           ; BSR set to: 0
  4889  00310A  0100               	movlb	0	; () banked
  4890  00310C  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  4891  00310E  D7E1               	goto	l7993
  4892  003110  0100               	movlb	0	; () banked
  4893  003112  51B8               	movf	(logRun@i+1)& (0+255),w,b
  4894  003114  E101               	bnz	u6900
  4895  003116  D7D8               	goto	L5
  4896  003118                     u6900:
  4897  003118                     l939:
  4898                           
  4899                           ; BSR set to: 0
  4900                           ;EEPROM.c: 127: }
  4901                           ;EEPROM.c: 130: unsigned char byte11 = total_time;
  4902  003118  C0F8  F0B6         	movff	_total_time,logRun@byte11
  4903                           
  4904                           ; BSR set to: 0
  4905                           ;EEPROM.c: 131: EEPROM_write(addr, byte11);
  4906  00311C  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4907  003120  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4908  003124  C0B6  F0AD         	movff	logRun@byte11,EEPROM_write@data
  4909  003128  EC27  F01A         	call	_EEPROM_write	;wreg free
  4910  00312C  0012               	return		;funcret
  4911  00312E                     __end_of_logRun:
  4912                           	opt stack 0
  4913                           tblptru	equ	0xFF8
  4914                           tblptrh	equ	0xFF7
  4915                           tblptrl	equ	0xFF6
  4916                           tablat	equ	0xFF5
  4917                           prodh	equ	0xFF4
  4918                           prodl	equ	0xFF3
  4919                           intcon	equ	0xFF2
  4920                           intcon2	equ	0xFF1
  4921                           intcon3	equ	0xFF0
  4922                           postinc0	equ	0xFEE
  4923                           wreg	equ	0xFE8
  4924                           postdec1	equ	0xFE5
  4925                           fsr1l	equ	0xFE1
  4926                           indf2	equ	0xFDF
  4927                           postinc2	equ	0xFDE
  4928                           postdec2	equ	0xFDD
  4929                           fsr2h	equ	0xFDA
  4930                           fsr2l	equ	0xFD9
  4931                           status	equ	0xFD8
  4932                           
  4933 ;; *************** function _EEPROM_write *****************
  4934 ;; Defined at:
  4935 ;;		line 32 in file "EEPROM.c"
  4936 ;; Parameters:    Size  Location     Type
  4937 ;;  address         2   43[BANK0 ] unsigned short 
  4938 ;;  data            1   45[BANK0 ] unsigned char 
  4939 ;; Auto vars:     Size  Location     Type
  4940 ;;  i               1   48[BANK0 ] unsigned char 
  4941 ;;  i               1   47[BANK0 ] unsigned char 
  4942 ;; Return value:  Size  Location     Type
  4943 ;;                  1    wreg      void 
  4944 ;; Registers used:
  4945 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4946 ;; Tracked objects:
  4947 ;;		On entry : 0/0
  4948 ;;		On exit  : 0/0
  4949 ;;		Unchanged: 0/0
  4950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4951 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4952 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4953 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4954 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4955 ;;Total ram usage:        6 bytes
  4956 ;; Hardware stack levels used:    1
  4957 ;; Hardware stack levels required when called:   10
  4958 ;; This function calls:
  4959 ;;		_EEPROM_read
  4960 ;;		_lcdInst
  4961 ;;		_printf
  4962 ;; This function is called by:
  4963 ;;		_Loading
  4964 ;;		_logRun
  4965 ;; This function uses a non-reentrant model
  4966 ;;
  4967                           
  4968                           	psect	text13
  4969  00344E                     __ptext13:
  4970                           	opt stack 0
  4971  00344E                     _EEPROM_write:
  4972                           	opt stack 18
  4973                           
  4974                           ;EEPROM.c: 33: EECON1bits.WREN = 1;
  4975                           
  4976                           ;incstack = 0
  4977  00344E  84A6               	bsf	4006,2,c	;volatile
  4978                           
  4979                           ;EEPROM.c: 36: EEADRH = (unsigned char)(address >> 8);
  4980  003450  0100               	movlb	0	; () banked
  4981  003452  51AC               	movf	(EEPROM_write@address+1)& (0+255),w,b
  4982  003454  6EAA               	movwf	4010,c	;volatile
  4983                           
  4984                           ; BSR set to: 0
  4985                           ;EEPROM.c: 37: EEADR = (unsigned char)address;
  4986  003456  C0AB  FFA9         	movff	EEPROM_write@address,4009	;volatile
  4987                           
  4988                           ; BSR set to: 0
  4989                           ;EEPROM.c: 39: EEDATA = data;
  4990  00345A  C0AD  FFA8         	movff	EEPROM_write@data,4008	;volatile
  4991                           
  4992                           ; BSR set to: 0
  4993                           ;EEPROM.c: 40: EECON1bits.EEPGD = 0;
  4994  00345E  9EA6               	bcf	4006,7,c	;volatile
  4995                           
  4996                           ; BSR set to: 0
  4997                           ;EEPROM.c: 41: EECON1bits.CFGS = 0;
  4998  003460  9CA6               	bcf	4006,6,c	;volatile
  4999                           
  5000                           ; BSR set to: 0
  5001                           ;EEPROM.c: 43: (INTCONbits.GIE = 0);
  5002  003462  9EF2               	bcf	intcon,7,c	;volatile
  5003                           
  5004                           ;EEPROM.c: 45: EECON2 = 0x55;
  5005  003464  0E55               	movlw	85
  5006  003466  6EA7               	movwf	4007,c	;volatile
  5007                           
  5008                           ;EEPROM.c: 46: EECON2 = 0x0AA;
  5009  003468  0EAA               	movlw	170
  5010  00346A  6EA7               	movwf	4007,c	;volatile
  5011                           
  5012                           ; BSR set to: 0
  5013                           ;EEPROM.c: 47: EECON1bits.WR = 1;
  5014  00346C  82A6               	bsf	4006,1,c	;volatile
  5015                           
  5016                           ; BSR set to: 0
  5017                           ;EEPROM.c: 48: (INTCONbits.GIE = 1);
  5018  00346E  8EF2               	bsf	intcon,7,c	;volatile
  5019  003470                     l917:
  5020  003470  A8A1               	btfss	4001,4,c	;volatile
  5021  003472  D7FE               	goto	l917
  5022                           
  5023                           ;EEPROM.c: 53: PIR2bits.EEIF = 0;
  5024  003474  98A1               	bcf	4001,4,c	;volatile
  5025                           
  5026                           ;EEPROM.c: 54: EECON1bits.WREN = 0;
  5027  003476  94A6               	bcf	4006,2,c	;volatile
  5028                           
  5029                           ;EEPROM.c: 57: if(debug){
  5030  003478  5067               	movf	_debug,w,c
  5031  00347A  1068               	iorwf	_debug+1,w,c
  5032  00347C  B4D8               	btfsc	status,2,c
  5033  00347E  0012               	return	
  5034                           
  5035                           ;EEPROM.c: 58: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  5036  003480  0E01               	movlw	1
  5037  003482  ECC1  F023         	call	_lcdInst
  5038  003486  0E68               	movlw	104
  5039  003488  0100               	movlb	0	; () banked
  5040  00348A  6FAE               	movwf	??_EEPROM_write& (0+255),b
  5041  00348C  0EE4               	movlw	228
  5042  00348E                     u7187:
  5043  00348E  2EE8               	decfsz	wreg,f,c
  5044  003490  D7FE               	bra	u7187
  5045  003492  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  5046  003494  D7FC               	bra	u7187
  5047  003496  F000               	nop	
  5048                           
  5049                           ;EEPROM.c: 59: lcdInst(0b10000000);;
  5050  003498  0E80               	movlw	128
  5051  00349A  ECC1  F023         	call	_lcdInst
  5052                           
  5053                           ;EEPROM.c: 60: if(EEPROM_read(address)==data){
  5054  00349E  C0AB  F080         	movff	EEPROM_write@address,EEPROM_read@address
  5055  0034A2  C0AC  F081         	movff	EEPROM_write@address+1,EEPROM_read@address+1
  5056  0034A6  EC84  F023         	call	_EEPROM_read	;wreg free
  5057  0034AA  0100               	movlb	0	; () banked
  5058  0034AC  19AD               	xorwf	EEPROM_write@data& (0+255),w,b
  5059  0034AE  A4D8               	btfss	status,2,c
  5060  0034B0  D024               	goto	l6041
  5061                           
  5062                           ; BSR set to: 0
  5063                           ;EEPROM.c: 61: printf("(data: %u, addr: %u)", data, address);
  5064  0034B2  0E48               	movlw	low STR_66
  5065  0034B4  0100               	movlb	0	; () banked
  5066  0034B6  6F8E               	movwf	printf@f& (0+255),b
  5067  0034B8  0EFB               	movlw	high STR_66
  5068  0034BA  0100               	movlb	0	; () banked
  5069  0034BC  6F8F               	movwf	(printf@f+1)& (0+255),b
  5070  0034BE  C0AD  F090         	movff	EEPROM_write@data,?_printf+2
  5071  0034C2  0100               	movlb	0	; () banked
  5072  0034C4  6B91               	clrf	(?_printf+3)& (0+255),b
  5073  0034C6  C0AB  F092         	movff	EEPROM_write@address,?_printf+4
  5074  0034CA  C0AC  F093         	movff	EEPROM_write@address+1,?_printf+5
  5075  0034CE  ECB8  F008         	call	_printf	;wreg free
  5076                           
  5077                           ;EEPROM.c: 62: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));}
      +                          ;
  5078  0034D2  0E00               	movlw	0
  5079  0034D4  0100               	movlb	0	; () banked
  5080  0034D6  6FAF               	movwf	EEPROM_write@i& (0+255),b
  5081  0034D8                     l6033:
  5082                           
  5083                           ; BSR set to: 0
  5084  0034D8  0E63               	movlw	99
  5085  0034DA  0100               	movlb	0	; () banked
  5086  0034DC  65AF               	cpfsgt	EEPROM_write@i& (0+255),b
  5087  0034DE  D001               	goto	l6037
  5088  0034E0  0012               	return	
  5089  0034E2                     l6037:
  5090                           
  5091                           ; BSR set to: 0
  5092  0034E2  0E68               	movlw	104
  5093  0034E4  0100               	movlb	0	; () banked
  5094  0034E6  6FAE               	movwf	??_EEPROM_write& (0+255),b
  5095  0034E8  0EE4               	movlw	228
  5096  0034EA                     u7197:
  5097  0034EA  2EE8               	decfsz	wreg,f,c
  5098  0034EC  D7FE               	bra	u7197
  5099  0034EE  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  5100  0034F0  D7FC               	bra	u7197
  5101  0034F2  F000               	nop	
  5102  0034F4  0100               	movlb	0	; () banked
  5103  0034F6  2BAF               	incf	EEPROM_write@i& (0+255),f,b
  5104  0034F8  D7EF               	goto	l6033
  5105  0034FA                     l6041:
  5106                           
  5107                           ; BSR set to: 0
  5108                           ;EEPROM.c: 64: else{ printf("FAILED"); for(char i=0;i<100;i++){_delay((unsigned long)((1
      +                          0)*(32000000/4000.0)));}; }
  5109  0034FA  0EBD               	movlw	low STR_67
  5110  0034FC  0100               	movlb	0	; () banked
  5111  0034FE  6F8E               	movwf	printf@f& (0+255),b
  5112  003500  0EFF               	movlw	high STR_67
  5113  003502  0100               	movlb	0	; () banked
  5114  003504  6F8F               	movwf	(printf@f+1)& (0+255),b
  5115  003506  ECB8  F008         	call	_printf	;wreg free
  5116  00350A  0E00               	movlw	0
  5117  00350C  0100               	movlb	0	; () banked
  5118  00350E  6FB0               	movwf	EEPROM_write@i_1321& (0+255),b
  5119  003510                     l6045:
  5120                           
  5121                           ; BSR set to: 0
  5122  003510  0E63               	movlw	99
  5123  003512  0100               	movlb	0	; () banked
  5124  003514  65B0               	cpfsgt	EEPROM_write@i_1321& (0+255),b
  5125  003516  D001               	goto	l6049
  5126  003518  0012               	return	
  5127  00351A                     l6049:
  5128                           
  5129                           ; BSR set to: 0
  5130  00351A  0E68               	movlw	104
  5131  00351C  0100               	movlb	0	; () banked
  5132  00351E  6FAE               	movwf	??_EEPROM_write& (0+255),b
  5133  003520  0EE4               	movlw	228
  5134  003522                     u7207:
  5135  003522  2EE8               	decfsz	wreg,f,c
  5136  003524  D7FE               	bra	u7207
  5137  003526  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  5138  003528  D7FC               	bra	u7207
  5139  00352A  F000               	nop	
  5140  00352C  0100               	movlb	0	; () banked
  5141  00352E  2BB0               	incf	EEPROM_write@i_1321& (0+255),f,b
  5142  003530  D7EF               	goto	l6045
  5143  003532                     __end_of_EEPROM_write:
  5144                           	opt stack 0
  5145                           tblptru	equ	0xFF8
  5146                           tblptrh	equ	0xFF7
  5147                           tblptrl	equ	0xFF6
  5148                           tablat	equ	0xFF5
  5149                           prodh	equ	0xFF4
  5150                           prodl	equ	0xFF3
  5151                           intcon	equ	0xFF2
  5152                           intcon2	equ	0xFF1
  5153                           intcon3	equ	0xFF0
  5154                           postinc0	equ	0xFEE
  5155                           wreg	equ	0xFE8
  5156                           postdec1	equ	0xFE5
  5157                           fsr1l	equ	0xFE1
  5158                           indf2	equ	0xFDF
  5159                           postinc2	equ	0xFDE
  5160                           postdec2	equ	0xFDD
  5161                           fsr2h	equ	0xFDA
  5162                           fsr2l	equ	0xFD9
  5163                           status	equ	0xFD8
  5164                           
  5165 ;; *************** function _EEPROM_read *****************
  5166 ;; Defined at:
  5167 ;;		line 68 in file "EEPROM.c"
  5168 ;; Parameters:    Size  Location     Type
  5169 ;;  address         2    0[BANK0 ] unsigned short 
  5170 ;; Auto vars:     Size  Location     Type
  5171 ;;		None
  5172 ;; Return value:  Size  Location     Type
  5173 ;;                  1    wreg      unsigned char 
  5174 ;; Registers used:
  5175 ;;		wreg, status,2
  5176 ;; Tracked objects:
  5177 ;;		On entry : 0/0
  5178 ;;		On exit  : 0/0
  5179 ;;		Unchanged: 0/0
  5180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5181 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5182 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5183 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5184 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5185 ;;Total ram usage:        2 bytes
  5186 ;; Hardware stack levels used:    1
  5187 ;; Hardware stack levels required when called:    7
  5188 ;; This function calls:
  5189 ;;		Nothing
  5190 ;; This function is called by:
  5191 ;;		_Loading
  5192 ;;		_EEPROM_write
  5193 ;;		_logRun
  5194 ;; This function uses a non-reentrant model
  5195 ;;
  5196                           
  5197                           	psect	text14
  5198  004708                     __ptext14:
  5199                           	opt stack 0
  5200  004708                     _EEPROM_read:
  5201                           	opt stack 20
  5202                           
  5203                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
  5204                           
  5205                           ;incstack = 0
  5206  004708  0100               	movlb	0	; () banked
  5207  00470A  5181               	movf	(EEPROM_read@address+1)& (0+255),w,b
  5208  00470C  6EAA               	movwf	4010,c	;volatile
  5209                           
  5210                           ; BSR set to: 0
  5211                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
  5212  00470E  C080  FFA9         	movff	EEPROM_read@address,4009	;volatile
  5213                           
  5214                           ; BSR set to: 0
  5215                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
  5216  004712  9EA6               	bcf	4006,7,c	;volatile
  5217                           
  5218                           ; BSR set to: 0
  5219                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
  5220  004714  9CA6               	bcf	4006,6,c	;volatile
  5221                           
  5222                           ; BSR set to: 0
  5223                           ;EEPROM.c: 75: EECON1bits.RD = 1;
  5224  004716  80A6               	bsf	4006,0,c	;volatile
  5225  004718                     l930:
  5226  004718  B0A6               	btfsc	4006,0,c	;volatile
  5227  00471A  D7FE               	goto	l930
  5228                           
  5229                           ;EEPROM.c: 81: return EEDATA;
  5230  00471C  50A8               	movf	4008,w,c	;volatile
  5231  00471E  0012               	return	
  5232  004720                     __end_of_EEPROM_read:
  5233                           	opt stack 0
  5234                           tblptru	equ	0xFF8
  5235                           tblptrh	equ	0xFF7
  5236                           tblptrl	equ	0xFF6
  5237                           tablat	equ	0xFF5
  5238                           prodh	equ	0xFF4
  5239                           prodl	equ	0xFF3
  5240                           intcon	equ	0xFF2
  5241                           intcon2	equ	0xFF1
  5242                           intcon3	equ	0xFF0
  5243                           postinc0	equ	0xFEE
  5244                           wreg	equ	0xFE8
  5245                           postdec1	equ	0xFE5
  5246                           fsr1l	equ	0xFE1
  5247                           indf2	equ	0xFDF
  5248                           postinc2	equ	0xFDE
  5249                           postdec2	equ	0xFDD
  5250                           fsr2h	equ	0xFDA
  5251                           fsr2l	equ	0xFD9
  5252                           status	equ	0xFD8
  5253                           
  5254 ;; *************** function _initUI *****************
  5255 ;; Defined at:
  5256 ;;		line 62 in file "UI.c"
  5257 ;; Parameters:    Size  Location     Type
  5258 ;;		None
  5259 ;; Auto vars:     Size  Location     Type
  5260 ;;		None
  5261 ;; Return value:  Size  Location     Type
  5262 ;;                  1    wreg      void 
  5263 ;; Registers used:
  5264 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5265 ;; Tracked objects:
  5266 ;;		On entry : 0/0
  5267 ;;		On exit  : 0/0
  5268 ;;		Unchanged: 0/0
  5269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5270 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5271 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5272 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5273 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5274 ;;Total ram usage:        0 bytes
  5275 ;; Hardware stack levels used:    1
  5276 ;; Hardware stack levels required when called:   12
  5277 ;; This function calls:
  5278 ;;		_change_state_to_menu_start
  5279 ;;		_loadRTC
  5280 ;; This function is called by:
  5281 ;;		_main
  5282 ;; This function uses a non-reentrant model
  5283 ;;
  5284                           
  5285                           	psect	text15
  5286  00465E                     __ptext15:
  5287                           	opt stack 0
  5288  00465E                     _initUI:
  5289                           	opt stack 18
  5290                           
  5291                           ;UI.c: 63: (INTCONbits.GIE = 1);
  5292                           
  5293                           ;incstack = 0
  5294  00465E  8EF2               	bsf	intcon,7,c	;volatile
  5295                           
  5296                           ;UI.c: 64: machine_state = UI_state;
  5297  004660  0E00               	movlw	0
  5298  004662  0100               	movlb	0	; () banked
  5299  004664  6FFC               	movwf	_machine_state& (0+255),b
  5300                           
  5301                           ;UI.c: 65: logstate = 0;
  5302  004666  0E00               	movlw	0
  5303  004668  0100               	movlb	0	; () banked
  5304  00466A  6FF7               	movwf	(_logstate+1)& (0+255),b
  5305  00466C  0E00               	movlw	0
  5306  00466E  6FF6               	movwf	_logstate& (0+255),b
  5307                           
  5308                           ; BSR set to: 0
  5309                           ;UI.c: 67: loadRTC();
  5310  004670  ECFD  F01C         	call	_loadRTC	;wreg free
  5311                           
  5312                           ;UI.c: 69: change_state_to_menu_start();
  5313  004674  ECA0  F022         	call	_change_state_to_menu_start	;wreg free
  5314                           
  5315                           ;UI.c: 70: firstboot = 1;
  5316  004678  0E00               	movlw	0
  5317  00467A  6E76               	movwf	_firstboot+1,c
  5318  00467C  0E01               	movlw	1
  5319  00467E  6E75               	movwf	_firstboot,c
  5320  004680  0012               	return		;funcret
  5321  004682                     __end_of_initUI:
  5322                           	opt stack 0
  5323                           tblptru	equ	0xFF8
  5324                           tblptrh	equ	0xFF7
  5325                           tblptrl	equ	0xFF6
  5326                           tablat	equ	0xFF5
  5327                           prodh	equ	0xFF4
  5328                           prodl	equ	0xFF3
  5329                           intcon	equ	0xFF2
  5330                           intcon2	equ	0xFF1
  5331                           intcon3	equ	0xFF0
  5332                           postinc0	equ	0xFEE
  5333                           wreg	equ	0xFE8
  5334                           postdec1	equ	0xFE5
  5335                           fsr1l	equ	0xFE1
  5336                           indf2	equ	0xFDF
  5337                           postinc2	equ	0xFDE
  5338                           postdec2	equ	0xFDD
  5339                           fsr2h	equ	0xFDA
  5340                           fsr2l	equ	0xFD9
  5341                           status	equ	0xFD8
  5342                           
  5343 ;; *************** function _loadRTC *****************
  5344 ;; Defined at:
  5345 ;;		line 28 in file "RTC.c"
  5346 ;; Parameters:    Size  Location     Type
  5347 ;;		None
  5348 ;; Auto vars:     Size  Location     Type
  5349 ;;  i               2   22[BANK0 ] int 
  5350 ;; Return value:  Size  Location     Type
  5351 ;;                  1    wreg      void 
  5352 ;; Registers used:
  5353 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5354 ;; Tracked objects:
  5355 ;;		On entry : 0/0
  5356 ;;		On exit  : 0/0
  5357 ;;		Unchanged: 0/0
  5358 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5359 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5360 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5361 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5362 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5363 ;;Total ram usage:        3 bytes
  5364 ;; Hardware stack levels used:    1
  5365 ;; Hardware stack levels required when called:    9
  5366 ;; This function calls:
  5367 ;;		_I2C_Master_Init
  5368 ;;		_I2C_Master_Start
  5369 ;;		_I2C_Master_Stop
  5370 ;;		_I2C_Master_Write
  5371 ;; This function is called by:
  5372 ;;		_initUI
  5373 ;; This function uses a non-reentrant model
  5374 ;;
  5375                           
  5376                           	psect	text16
  5377  0039FA                     __ptext16:
  5378                           	opt stack 0
  5379  0039FA                     _loadRTC:
  5380                           	opt stack 20
  5381                           
  5382                           ;RTC.c: 30: I2C_Master_Init(10000);
  5383                           
  5384                           ;incstack = 0
  5385  0039FA  0E10               	movlw	16
  5386  0039FC  0100               	movlb	0	; () banked
  5387  0039FE  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  5388  003A00  0E27               	movlw	39
  5389  003A02  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  5390  003A04  0E00               	movlw	0
  5391  003A06  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  5392  003A08  0E00               	movlw	0
  5393  003A0A  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  5394  003A0C  EC56  F01F         	call	_I2C_Master_Init	;wreg free
  5395                           
  5396                           ;RTC.c: 32: (INTCONbits.GIE = 0);
  5397  003A10  9EF2               	bcf	intcon,7,c	;volatile
  5398                           
  5399                           ;RTC.c: 34: I2C_Master_Start();
  5400  003A12  ECE7  F023         	call	_I2C_Master_Start	;wreg free
  5401                           
  5402                           ;RTC.c: 35: I2C_Master_Write(0b11010000);
  5403  003A16  0E00               	movlw	0
  5404  003A18  0100               	movlb	0	; () banked
  5405  003A1A  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5406  003A1C  0ED0               	movlw	208
  5407  003A1E  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5408  003A20  ECD5  F023         	call	_I2C_Master_Write	;wreg free
  5409                           
  5410                           ;RTC.c: 36: I2C_Master_Write(0x00);
  5411  003A24  0E00               	movlw	0
  5412  003A26  0100               	movlb	0	; () banked
  5413  003A28  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5414  003A2A  0E00               	movlw	0
  5415  003A2C  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5416  003A2E  ECD5  F023         	call	_I2C_Master_Write	;wreg free
  5417                           
  5418                           ;RTC.c: 37: for(int i = 0; i<7; i++){
  5419  003A32  0E00               	movlw	0
  5420  003A34  0100               	movlb	0	; () banked
  5421  003A36  6F97               	movwf	(loadRTC@i+1)& (0+255),b
  5422  003A38  0E00               	movlw	0
  5423  003A3A  6F96               	movwf	loadRTC@i& (0+255),b
  5424  003A3C                     l6165:
  5425                           
  5426                           ; BSR set to: 0
  5427  003A3C  0100               	movlb	0	; () banked
  5428  003A3E  BF97               	btfsc	(loadRTC@i+1)& (0+255),7,b
  5429  003A40  D008               	goto	l6169
  5430  003A42  0100               	movlb	0	; () banked
  5431  003A44  5197               	movf	(loadRTC@i+1)& (0+255),w,b
  5432  003A46  E11B               	bnz	l6175
  5433  003A48  0E07               	movlw	7
  5434  003A4A  0100               	movlb	0	; () banked
  5435  003A4C  5D96               	subwf	loadRTC@i& (0+255),w,b
  5436  003A4E  B0D8               	btfsc	status,0,c
  5437  003A50  D016               	goto	l6175
  5438  003A52                     l6169:
  5439                           
  5440                           ; BSR set to: 0
  5441                           ;RTC.c: 38: I2C_Master_Write(time[i]);
  5442  003A52  0E24               	movlw	low _time
  5443  003A54  0100               	movlb	0	; () banked
  5444  003A56  2596               	addwf	loadRTC@i& (0+255),w,b
  5445  003A58  6ED9               	movwf	fsr2l,c
  5446  003A5A  0E01               	movlw	high _time
  5447  003A5C  0100               	movlb	0	; () banked
  5448  003A5E  2197               	addwfc	(loadRTC@i+1)& (0+255),w,b
  5449  003A60  6EDA               	movwf	fsr2h,c
  5450  003A62  50DF               	movf	indf2,w,c
  5451  003A64  0100               	movlb	0	; () banked
  5452  003A66  6F95               	movwf	??_loadRTC& (0+255),b
  5453  003A68  0100               	movlb	0	; () banked
  5454  003A6A  5195               	movf	??_loadRTC& (0+255),w,b
  5455  003A6C  0100               	movlb	0	; () banked
  5456  003A6E  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5457  003A70  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  5458  003A72  ECD5  F023         	call	_I2C_Master_Write	;wreg free
  5459  003A76  0100               	movlb	0	; () banked
  5460  003A78  4B96               	infsnz	loadRTC@i& (0+255),f,b
  5461  003A7A  2B97               	incf	(loadRTC@i+1)& (0+255),f,b
  5462  003A7C  D7DF               	goto	l6165
  5463  003A7E                     l6175:
  5464                           
  5465                           ; BSR set to: 0
  5466                           ;RTC.c: 39: }
  5467                           ;RTC.c: 40: I2C_Master_Stop();
  5468  003A7E  ECE3  F023         	call	_I2C_Master_Stop	;wreg free
  5469                           
  5470                           ;RTC.c: 41: (INTCONbits.GIE = 1);
  5471  003A82  8EF2               	bsf	intcon,7,c	;volatile
  5472  003A84  0012               	return		;funcret
  5473  003A86                     __end_of_loadRTC:
  5474                           	opt stack 0
  5475                           tblptru	equ	0xFF8
  5476                           tblptrh	equ	0xFF7
  5477                           tblptrl	equ	0xFF6
  5478                           tablat	equ	0xFF5
  5479                           prodh	equ	0xFF4
  5480                           prodl	equ	0xFF3
  5481                           intcon	equ	0xFF2
  5482                           intcon2	equ	0xFF1
  5483                           intcon3	equ	0xFF0
  5484                           postinc0	equ	0xFEE
  5485                           wreg	equ	0xFE8
  5486                           postdec1	equ	0xFE5
  5487                           fsr1l	equ	0xFE1
  5488                           indf2	equ	0xFDF
  5489                           postinc2	equ	0xFDE
  5490                           postdec2	equ	0xFDD
  5491                           fsr2h	equ	0xFDA
  5492                           fsr2l	equ	0xFD9
  5493                           status	equ	0xFD8
  5494                           
  5495 ;; *************** function _I2C_Master_Init *****************
  5496 ;; Defined at:
  5497 ;;		line 15 in file "I2C.c"
  5498 ;; Parameters:    Size  Location     Type
  5499 ;;  c               4   13[BANK0 ] const unsigned long 
  5500 ;; Auto vars:     Size  Location     Type
  5501 ;;		None
  5502 ;; Return value:  Size  Location     Type
  5503 ;;                  1    wreg      void 
  5504 ;; Registers used:
  5505 ;;		wreg, status,2, status,0, cstack
  5506 ;; Tracked objects:
  5507 ;;		On entry : 0/0
  5508 ;;		On exit  : 0/0
  5509 ;;		Unchanged: 0/0
  5510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5511 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5512 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5513 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5514 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5515 ;;Total ram usage:        8 bytes
  5516 ;; Hardware stack levels used:    1
  5517 ;; Hardware stack levels required when called:    8
  5518 ;; This function calls:
  5519 ;;		___lldiv
  5520 ;; This function is called by:
  5521 ;;		_loadRTC
  5522 ;; This function uses a non-reentrant model
  5523 ;;
  5524                           
  5525                           	psect	text17
  5526  003EAC                     __ptext17:
  5527                           	opt stack 0
  5528  003EAC                     _I2C_Master_Init:
  5529                           	opt stack 20
  5530                           
  5531                           ;I2C.c: 18: SSPSTAT = 0b00000000;
  5532                           
  5533                           ;incstack = 0
  5534  003EAC  0E00               	movlw	0
  5535  003EAE  6EC7               	movwf	4039,c	;volatile
  5536                           
  5537                           ;I2C.c: 19: SSPCON1 = 0b00101000;
  5538  003EB0  0E28               	movlw	40
  5539  003EB2  6EC6               	movwf	4038,c	;volatile
  5540                           
  5541                           ;I2C.c: 20: SSPCON2 = 0b00000000;
  5542  003EB4  0E00               	movlw	0
  5543  003EB6  6EC5               	movwf	4037,c	;volatile
  5544                           
  5545                           ;I2C.c: 21: SSPADD = (32000000/(4*c))-1;
  5546  003EB8  0E00               	movlw	0
  5547  003EBA  0100               	movlb	0	; () banked
  5548  003EBC  6F80               	movwf	___lldiv@dividend& (0+255),b
  5549  003EBE  0E48               	movlw	72
  5550  003EC0  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  5551  003EC2  0EE8               	movlw	232
  5552  003EC4  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  5553  003EC6  0E01               	movlw	1
  5554  003EC8  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  5555  003ECA  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  5556  003ECE  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  5557  003ED2  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  5558  003ED6  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  5559  003EDA  0E02               	movlw	2
  5560  003EDC                     u4485:
  5561  003EDC  90D8               	bcf	status,0,c
  5562  003EDE  0100               	movlb	0	; () banked
  5563  003EE0  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  5564  003EE2  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  5565  003EE4  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  5566  003EE6  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  5567  003EE8  2EE8               	decfsz	wreg,f,c
  5568  003EEA  D7F8               	goto	u4485
  5569  003EEC  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  5570  003EF0  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  5571  003EF4  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  5572  003EF8  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  5573  003EFC  EC63  F01B         	call	___lldiv	;wreg free
  5574  003F00  0100               	movlb	0	; () banked
  5575  003F02  0580               	decf	?___lldiv& (0+255),w,b
  5576  003F04  6EC8               	movwf	4040,c	;volatile
  5577                           
  5578                           ; BSR set to: 0
  5579                           ;I2C.c: 22: TRISC3 = 1;
  5580  003F06  8694               	bsf	3988,3,c	;volatile
  5581                           
  5582                           ; BSR set to: 0
  5583                           ;I2C.c: 23: TRISC4 = 1;
  5584  003F08  8894               	bsf	3988,4,c	;volatile
  5585                           
  5586                           ; BSR set to: 0
  5587  003F0A  0012               	return		;funcret
  5588  003F0C                     __end_of_I2C_Master_Init:
  5589                           	opt stack 0
  5590                           tblptru	equ	0xFF8
  5591                           tblptrh	equ	0xFF7
  5592                           tblptrl	equ	0xFF6
  5593                           tablat	equ	0xFF5
  5594                           prodh	equ	0xFF4
  5595                           prodl	equ	0xFF3
  5596                           intcon	equ	0xFF2
  5597                           intcon2	equ	0xFF1
  5598                           intcon3	equ	0xFF0
  5599                           postinc0	equ	0xFEE
  5600                           wreg	equ	0xFE8
  5601                           postdec1	equ	0xFE5
  5602                           fsr1l	equ	0xFE1
  5603                           indf2	equ	0xFDF
  5604                           postinc2	equ	0xFDE
  5605                           postdec2	equ	0xFDD
  5606                           fsr2h	equ	0xFDA
  5607                           fsr2l	equ	0xFD9
  5608                           status	equ	0xFD8
  5609                           
  5610 ;; *************** function ___lldiv *****************
  5611 ;; Defined at:
  5612 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  5613 ;; Parameters:    Size  Location     Type
  5614 ;;  dividend        4    0[BANK0 ] unsigned long 
  5615 ;;  divisor         4    4[BANK0 ] unsigned long 
  5616 ;; Auto vars:     Size  Location     Type
  5617 ;;  quotient        4    8[BANK0 ] unsigned long 
  5618 ;;  counter         1   12[BANK0 ] unsigned char 
  5619 ;; Return value:  Size  Location     Type
  5620 ;;                  4    0[BANK0 ] unsigned long 
  5621 ;; Registers used:
  5622 ;;		wreg, status,2, status,0
  5623 ;; Tracked objects:
  5624 ;;		On entry : 0/0
  5625 ;;		On exit  : 0/0
  5626 ;;		Unchanged: 0/0
  5627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5628 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5629 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5630 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5631 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5632 ;;Total ram usage:       13 bytes
  5633 ;; Hardware stack levels used:    1
  5634 ;; Hardware stack levels required when called:    7
  5635 ;; This function calls:
  5636 ;;		Nothing
  5637 ;; This function is called by:
  5638 ;;		_I2C_Master_Init
  5639 ;; This function uses a non-reentrant model
  5640 ;;
  5641                           
  5642                           	psect	text18
  5643  0036C6                     __ptext18:
  5644                           	opt stack 0
  5645  0036C6                     ___lldiv:
  5646                           	opt stack 20
  5647                           
  5648                           ; BSR set to: 0
  5649                           ;incstack = 0
  5650  0036C6  0E00               	movlw	0
  5651  0036C8  0100               	movlb	0	; () banked
  5652  0036CA  6F88               	movwf	___lldiv@quotient& (0+255),b
  5653  0036CC  0E00               	movlw	0
  5654  0036CE  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  5655  0036D0  0E00               	movlw	0
  5656  0036D2  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  5657  0036D4  0E00               	movlw	0
  5658  0036D6  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  5659                           
  5660                           ; BSR set to: 0
  5661  0036D8  0100               	movlb	0	; () banked
  5662  0036DA  5184               	movf	___lldiv@divisor& (0+255),w,b
  5663  0036DC  0100               	movlb	0	; () banked
  5664  0036DE  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  5665  0036E0  0100               	movlb	0	; () banked
  5666  0036E2  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  5667  0036E4  0100               	movlb	0	; () banked
  5668  0036E6  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  5669  0036E8  B4D8               	btfsc	status,2,c
  5670  0036EA  D042               	goto	l1643
  5671                           
  5672                           ; BSR set to: 0
  5673  0036EC  0E01               	movlw	1
  5674  0036EE  0100               	movlb	0	; () banked
  5675  0036F0  6F8C               	movwf	___lldiv@counter& (0+255),b
  5676  0036F2  D008               	goto	l5605
  5677  0036F4                     l5603:
  5678                           
  5679                           ; BSR set to: 0
  5680  0036F4  0100               	movlb	0	; () banked
  5681  0036F6  90D8               	bcf	status,0,c
  5682  0036F8  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  5683  0036FA  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  5684  0036FC  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  5685  0036FE  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  5686  003700  0100               	movlb	0	; () banked
  5687  003702  2B8C               	incf	___lldiv@counter& (0+255),f,b
  5688  003704                     l5605:
  5689                           
  5690                           ; BSR set to: 0
  5691  003704  0100               	movlb	0	; () banked
  5692  003706  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  5693  003708  D7F5               	goto	l5603
  5694  00370A                     l5607:
  5695                           
  5696                           ; BSR set to: 0
  5697  00370A  0100               	movlb	0	; () banked
  5698  00370C  90D8               	bcf	status,0,c
  5699  00370E  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  5700  003710  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  5701  003712  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  5702  003714  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  5703                           
  5704                           ; BSR set to: 0
  5705  003716  0100               	movlb	0	; () banked
  5706  003718  5184               	movf	___lldiv@divisor& (0+255),w,b
  5707  00371A  0100               	movlb	0	; () banked
  5708  00371C  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  5709  00371E  0100               	movlb	0	; () banked
  5710  003720  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  5711  003722  0100               	movlb	0	; () banked
  5712  003724  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  5713  003726  0100               	movlb	0	; () banked
  5714  003728  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  5715  00372A  0100               	movlb	0	; () banked
  5716  00372C  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  5717  00372E  0100               	movlb	0	; () banked
  5718  003730  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  5719  003732  0100               	movlb	0	; () banked
  5720  003734  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  5721  003736  A0D8               	btfss	status,0,c
  5722  003738  D012               	goto	l5615
  5723                           
  5724                           ; BSR set to: 0
  5725  00373A  0100               	movlb	0	; () banked
  5726  00373C  5184               	movf	___lldiv@divisor& (0+255),w,b
  5727  00373E  0100               	movlb	0	; () banked
  5728  003740  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  5729  003742  0100               	movlb	0	; () banked
  5730  003744  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  5731  003746  0100               	movlb	0	; () banked
  5732  003748  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  5733  00374A  0100               	movlb	0	; () banked
  5734  00374C  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  5735  00374E  0100               	movlb	0	; () banked
  5736  003750  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  5737  003752  0100               	movlb	0	; () banked
  5738  003754  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  5739  003756  0100               	movlb	0	; () banked
  5740  003758  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  5741                           
  5742                           ; BSR set to: 0
  5743  00375A  0100               	movlb	0	; () banked
  5744  00375C  8188               	bsf	___lldiv@quotient& (0+255),0,b
  5745  00375E                     l5615:
  5746                           
  5747                           ; BSR set to: 0
  5748  00375E  0100               	movlb	0	; () banked
  5749  003760  90D8               	bcf	status,0,c
  5750  003762  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  5751  003764  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  5752  003766  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  5753  003768  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  5754                           
  5755                           ; BSR set to: 0
  5756  00376A  0100               	movlb	0	; () banked
  5757  00376C  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  5758  00376E  D7CD               	goto	l5607
  5759  003770                     l1643:
  5760                           
  5761                           ; BSR set to: 0
  5762  003770  C088  F080         	movff	___lldiv@quotient,?___lldiv
  5763  003774  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  5764  003778  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  5765  00377C  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  5766                           
  5767                           ; BSR set to: 0
  5768  003780  0012               	return		;funcret
  5769  003782                     __end_of___lldiv:
  5770                           	opt stack 0
  5771                           tblptru	equ	0xFF8
  5772                           tblptrh	equ	0xFF7
  5773                           tblptrl	equ	0xFF6
  5774                           tablat	equ	0xFF5
  5775                           prodh	equ	0xFF4
  5776                           prodl	equ	0xFF3
  5777                           intcon	equ	0xFF2
  5778                           intcon2	equ	0xFF1
  5779                           intcon3	equ	0xFF0
  5780                           postinc0	equ	0xFEE
  5781                           wreg	equ	0xFE8
  5782                           postdec1	equ	0xFE5
  5783                           fsr1l	equ	0xFE1
  5784                           indf2	equ	0xFDF
  5785                           postinc2	equ	0xFDE
  5786                           postdec2	equ	0xFDD
  5787                           fsr2h	equ	0xFDA
  5788                           fsr2l	equ	0xFD9
  5789                           status	equ	0xFD8
  5790                           
  5791 ;; *************** function _change_state_to_menu_start *****************
  5792 ;; Defined at:
  5793 ;;		line 472 in file "UI.c"
  5794 ;; Parameters:    Size  Location     Type
  5795 ;;		None
  5796 ;; Auto vars:     Size  Location     Type
  5797 ;;		None
  5798 ;; Return value:  Size  Location     Type
  5799 ;;                  1    wreg      void 
  5800 ;; Registers used:
  5801 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5802 ;; Tracked objects:
  5803 ;;		On entry : 0/0
  5804 ;;		On exit  : 0/0
  5805 ;;		Unchanged: 0/0
  5806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5807 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5808 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5809 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5810 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5811 ;;Total ram usage:        0 bytes
  5812 ;; Hardware stack levels used:    1
  5813 ;; Hardware stack levels required when called:   11
  5814 ;; This function calls:
  5815 ;;		_lcdInst
  5816 ;;		_printRTC
  5817 ;;		_printf
  5818 ;; This function is called by:
  5819 ;;		_initUI
  5820 ;; This function uses a non-reentrant model
  5821 ;;
  5822                           
  5823                           	psect	text19
  5824  004540                     __ptext19:
  5825                           	opt stack 0
  5826  004540                     _change_state_to_menu_start:
  5827                           	opt stack 18
  5828                           
  5829                           ;UI.c: 473: cur_state = 0;
  5830                           
  5831                           ; BSR set to: 0
  5832                           ;incstack = 0
  5833  004540  0E00               	movlw	0
  5834  004542  0100               	movlb	0	; () banked
  5835  004544  6FDF               	movwf	(_cur_state+1)& (0+255),b
  5836  004546  0E00               	movlw	0
  5837  004548  6FDE               	movwf	_cur_state& (0+255),b
  5838                           
  5839                           ; BSR set to: 0
  5840                           ;UI.c: 475: lcdInst(0b10000000);;
  5841  00454A  0E80               	movlw	128
  5842  00454C  ECC1  F023         	call	_lcdInst
  5843                           
  5844                           ;UI.c: 476: printRTC();
  5845  004550  EC82  F00F         	call	_printRTC	;wreg free
  5846                           
  5847                           ;UI.c: 477: lcdInst(0b11000000);;
  5848  004554  0EC0               	movlw	192
  5849  004556  ECC1  F023         	call	_lcdInst
  5850                           
  5851                           ;UI.c: 478: printf("PUSH TO CONTINUE");
  5852  00455A  0E0D               	movlw	low STR_30
  5853  00455C  0100               	movlb	0	; () banked
  5854  00455E  6F8E               	movwf	printf@f& (0+255),b
  5855  004560  0EFE               	movlw	high STR_30
  5856  004562  0100               	movlb	0	; () banked
  5857  004564  6F8F               	movwf	(printf@f+1)& (0+255),b
  5858  004566  ECB8  F008         	call	_printf	;wreg free
  5859  00456A  0012               	return		;funcret
  5860  00456C                     __end_of_change_state_to_menu_start:
  5861                           	opt stack 0
  5862                           tblptru	equ	0xFF8
  5863                           tblptrh	equ	0xFF7
  5864                           tblptrl	equ	0xFF6
  5865                           tablat	equ	0xFF5
  5866                           prodh	equ	0xFF4
  5867                           prodl	equ	0xFF3
  5868                           intcon	equ	0xFF2
  5869                           intcon2	equ	0xFF1
  5870                           intcon3	equ	0xFF0
  5871                           postinc0	equ	0xFEE
  5872                           wreg	equ	0xFE8
  5873                           postdec1	equ	0xFE5
  5874                           fsr1l	equ	0xFE1
  5875                           indf2	equ	0xFDF
  5876                           postinc2	equ	0xFDE
  5877                           postdec2	equ	0xFDD
  5878                           fsr2h	equ	0xFDA
  5879                           fsr2l	equ	0xFD9
  5880                           status	equ	0xFD8
  5881                           
  5882 ;; *************** function _initTime *****************
  5883 ;; Defined at:
  5884 ;;		line 17 in file "RTC.c"
  5885 ;; Parameters:    Size  Location     Type
  5886 ;;  s               1    wreg     unsigned char 
  5887 ;;  m               1    0[BANK0 ] unsigned char 
  5888 ;;  h               1    1[BANK0 ] unsigned char 
  5889 ;;  w               1    2[BANK0 ] unsigned char 
  5890 ;;  DD              1    3[BANK0 ] unsigned char 
  5891 ;;  MM              1    4[BANK0 ] unsigned char 
  5892 ;;  YY              1    5[BANK0 ] unsigned char 
  5893 ;; Auto vars:     Size  Location     Type
  5894 ;;  s               1    6[BANK0 ] unsigned char 
  5895 ;; Return value:  Size  Location     Type
  5896 ;;                  1    wreg      void 
  5897 ;; Registers used:
  5898 ;;		wreg
  5899 ;; Tracked objects:
  5900 ;;		On entry : 0/0
  5901 ;;		On exit  : 0/0
  5902 ;;		Unchanged: 0/0
  5903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5904 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5905 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5906 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5907 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5908 ;;Total ram usage:        7 bytes
  5909 ;; Hardware stack levels used:    1
  5910 ;; Hardware stack levels required when called:    7
  5911 ;; This function calls:
  5912 ;;		Nothing
  5913 ;; This function is called by:
  5914 ;;		_main
  5915 ;; This function uses a non-reentrant model
  5916 ;;
  5917                           
  5918                           	psect	text20
  5919  0046C8                     __ptext20:
  5920                           	opt stack 0
  5921  0046C8                     _initTime:
  5922                           	opt stack 23
  5923                           
  5924                           ;incstack = 0
  5925                           ;initTime@s stored from wreg
  5926  0046C8  0100               	movlb	0	; () banked
  5927  0046CA  6F86               	movwf	initTime@s& (0+255),b
  5928                           
  5929                           ;RTC.c: 19: time[0] = s;
  5930  0046CC  C086  F124         	movff	initTime@s,_time
  5931                           
  5932                           ;RTC.c: 20: time[1] = m;
  5933  0046D0  C080  F125         	movff	initTime@m,_time+1
  5934                           
  5935                           ;RTC.c: 21: time[2] = h;
  5936  0046D4  C081  F126         	movff	initTime@h,_time+2
  5937                           
  5938                           ;RTC.c: 22: time[3] = w;
  5939  0046D8  C082  F127         	movff	initTime@w,_time+3
  5940                           
  5941                           ;RTC.c: 23: time[4] = DD;
  5942  0046DC  C083  F128         	movff	initTime@DD,_time+4
  5943                           
  5944                           ;RTC.c: 24: time[5] = MM;
  5945  0046E0  C084  F129         	movff	initTime@MM,_time+5
  5946                           
  5947                           ;RTC.c: 25: time[6] = YY;
  5948  0046E4  C085  F12A         	movff	initTime@YY,_time+6
  5949  0046E8  0012               	return		;funcret
  5950  0046EA                     __end_of_initTime:
  5951                           	opt stack 0
  5952                           tblptru	equ	0xFF8
  5953                           tblptrh	equ	0xFF7
  5954                           tblptrl	equ	0xFF6
  5955                           tablat	equ	0xFF5
  5956                           prodh	equ	0xFF4
  5957                           prodl	equ	0xFF3
  5958                           intcon	equ	0xFF2
  5959                           intcon2	equ	0xFF1
  5960                           intcon3	equ	0xFF0
  5961                           postinc0	equ	0xFEE
  5962                           wreg	equ	0xFE8
  5963                           postdec1	equ	0xFE5
  5964                           fsr1l	equ	0xFE1
  5965                           indf2	equ	0xFDF
  5966                           postinc2	equ	0xFDE
  5967                           postdec2	equ	0xFDD
  5968                           fsr2h	equ	0xFDA
  5969                           fsr2l	equ	0xFD9
  5970                           status	equ	0xFD8
  5971                           
  5972 ;; *************** function _initLCD *****************
  5973 ;; Defined at:
  5974 ;;		line 48 in file "lcd.c"
  5975 ;; Parameters:    Size  Location     Type
  5976 ;;		None
  5977 ;; Auto vars:     Size  Location     Type
  5978 ;;		None
  5979 ;; Return value:  Size  Location     Type
  5980 ;;                  1    wreg      void 
  5981 ;; Registers used:
  5982 ;;		wreg, status,2, status,0, cstack
  5983 ;; Tracked objects:
  5984 ;;		On entry : 0/0
  5985 ;;		On exit  : 0/0
  5986 ;;		Unchanged: 0/0
  5987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5988 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5989 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5990 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5991 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5992 ;;Total ram usage:        1 bytes
  5993 ;; Hardware stack levels used:    1
  5994 ;; Hardware stack levels required when called:    9
  5995 ;; This function calls:
  5996 ;;		_lcdInst
  5997 ;; This function is called by:
  5998 ;;		_main
  5999 ;; This function uses a non-reentrant model
  6000 ;;
  6001                           
  6002                           	psect	text21
  6003  00419E                     __ptext21:
  6004                           	opt stack 0
  6005  00419E                     _initLCD:
  6006                           	opt stack 21
  6007                           
  6008                           ;lcd.c: 49: _delay((unsigned long)((15)*(32000000/4000.0)));
  6009                           
  6010                           ;incstack = 0
  6011  00419E  0E9C               	movlw	156
  6012  0041A0  0100               	movlb	0	; () banked
  6013  0041A2  6F83               	movwf	??_initLCD& (0+255),b
  6014  0041A4  0ED7               	movlw	215
  6015  0041A6                     u7217:
  6016  0041A6  2EE8               	decfsz	wreg,f,c
  6017  0041A8  D7FE               	bra	u7217
  6018  0041AA  2F83               	decfsz	??_initLCD& (0+255),f,b
  6019  0041AC  D7FC               	bra	u7217
  6020                           
  6021                           ;lcd.c: 50: lcdInst(0b00110011);
  6022  0041AE  0E33               	movlw	51
  6023  0041B0  ECC1  F023         	call	_lcdInst
  6024                           
  6025                           ;lcd.c: 51: lcdInst(0b00110010);
  6026  0041B4  0E32               	movlw	50
  6027  0041B6  ECC1  F023         	call	_lcdInst
  6028                           
  6029                           ;lcd.c: 53: lcdInst(0b00101000);
  6030  0041BA  0E28               	movlw	40
  6031  0041BC  ECC1  F023         	call	_lcdInst
  6032                           
  6033                           ;lcd.c: 54: lcdInst(0b00001100);
  6034  0041C0  0E0C               	movlw	12
  6035  0041C2  ECC1  F023         	call	_lcdInst
  6036                           
  6037                           ;lcd.c: 55: lcdInst(0b00000110);
  6038  0041C6  0E06               	movlw	6
  6039  0041C8  ECC1  F023         	call	_lcdInst
  6040                           
  6041                           ;lcd.c: 56: lcdInst(0b00000001);
  6042  0041CC  0E01               	movlw	1
  6043  0041CE  ECC1  F023         	call	_lcdInst
  6044                           
  6045                           ;lcd.c: 57: _delay((unsigned long)((15)*(32000000/4000.0)));
  6046  0041D2  0E9C               	movlw	156
  6047  0041D4  0100               	movlb	0	; () banked
  6048  0041D6  6F83               	movwf	??_initLCD& (0+255),b
  6049  0041D8  0ED7               	movlw	215
  6050  0041DA                     u7227:
  6051  0041DA  2EE8               	decfsz	wreg,f,c
  6052  0041DC  D7FE               	bra	u7227
  6053  0041DE  2F83               	decfsz	??_initLCD& (0+255),f,b
  6054  0041E0  D7FC               	bra	u7227
  6055  0041E2  0012               	return		;funcret
  6056  0041E4                     __end_of_initLCD:
  6057                           	opt stack 0
  6058                           tblptru	equ	0xFF8
  6059                           tblptrh	equ	0xFF7
  6060                           tblptrl	equ	0xFF6
  6061                           tablat	equ	0xFF5
  6062                           prodh	equ	0xFF4
  6063                           prodl	equ	0xFF3
  6064                           intcon	equ	0xFF2
  6065                           intcon2	equ	0xFF1
  6066                           intcon3	equ	0xFF0
  6067                           postinc0	equ	0xFEE
  6068                           wreg	equ	0xFE8
  6069                           postdec1	equ	0xFE5
  6070                           fsr1l	equ	0xFE1
  6071                           indf2	equ	0xFDF
  6072                           postinc2	equ	0xFDE
  6073                           postdec2	equ	0xFDD
  6074                           fsr2h	equ	0xFDA
  6075                           fsr2l	equ	0xFD9
  6076                           status	equ	0xFD8
  6077                           
  6078 ;; *************** function _UI *****************
  6079 ;; Defined at:
  6080 ;;		line 74 in file "UI.c"
  6081 ;; Parameters:    Size  Location     Type
  6082 ;;		None
  6083 ;; Auto vars:     Size  Location     Type
  6084 ;;  i               1   73[BANK0 ] unsigned char 
  6085 ;;  i               1   85[BANK0 ] unsigned char 
  6086 ;;  i               1   84[BANK0 ] unsigned char 
  6087 ;;  i               1   83[BANK0 ] unsigned char 
  6088 ;;  i               1   82[BANK0 ] unsigned char 
  6089 ;;  i               1   81[BANK0 ] unsigned char 
  6090 ;;  i               1   80[BANK0 ] unsigned char 
  6091 ;;  i               1   79[BANK0 ] unsigned char 
  6092 ;;  i               1   78[BANK0 ] unsigned char 
  6093 ;;  i               1   77[BANK0 ] unsigned char 
  6094 ;;  i               1   76[BANK0 ] unsigned char 
  6095 ;;  i               1   75[BANK0 ] unsigned char 
  6096 ;;  i               1   74[BANK0 ] unsigned char 
  6097 ;;  month           4   86[BANK0 ] unsigned char [4]
  6098 ;;  i               1   72[BANK0 ] unsigned char 
  6099 ;; Return value:  Size  Location     Type
  6100 ;;                  1    wreg      void 
  6101 ;; Registers used:
  6102 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6103 ;; Tracked objects:
  6104 ;;		On entry : 0/0
  6105 ;;		On exit  : 0/0
  6106 ;;		Unchanged: 0/0
  6107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6108 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6109 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6110 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6111 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6112 ;;Total ram usage:       22 bytes
  6113 ;; Hardware stack levels used:    1
  6114 ;; Hardware stack levels required when called:   11
  6115 ;; This function calls:
  6116 ;;		___awdiv
  6117 ;;		___awmod
  6118 ;;		_change_state_to_menu_12
  6119 ;;		_change_state_to_menu_22
  6120 ;;		_lcdInst
  6121 ;;		_printRTC
  6122 ;;		_printf
  6123 ;;		_strcpy
  6124 ;; This function is called by:
  6125 ;;		_main
  6126 ;; This function uses a non-reentrant model
  6127 ;;
  6128                           
  6129                           	psect	text22
  6130  0008CA                     __ptext22:
  6131                           	opt stack 0
  6132  0008CA                     _UI:
  6133                           	opt stack 19
  6134                           
  6135                           ;UI.c: 75: if(machine_state == DoneSorting_state){
  6136                           
  6137                           ;incstack = 0
  6138  0008CA  0E02               	movlw	2
  6139  0008CC  0100               	movlb	0	; () banked
  6140  0008CE  19FC               	xorwf	_machine_state& (0+255),w,b
  6141  0008D0  A4D8               	btfss	status,2,c
  6142  0008D2  D075               	goto	l7395
  6143                           
  6144                           ; BSR set to: 0
  6145                           ;UI.c: 76: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6146  0008D4  0E01               	movlw	1
  6147  0008D6  ECC1  F023         	call	_lcdInst
  6148  0008DA  0E68               	movlw	104
  6149  0008DC  0100               	movlb	0	; () banked
  6150  0008DE  6FC4               	movwf	??_UI& (0+255),b
  6151  0008E0  0EE4               	movlw	228
  6152  0008E2                     u7237:
  6153  0008E2  2EE8               	decfsz	wreg,f,c
  6154  0008E4  D7FE               	bra	u7237
  6155  0008E6  2FC4               	decfsz	??_UI& (0+255),f,b
  6156  0008E8  D7FC               	bra	u7237
  6157  0008EA  F000               	nop	
  6158                           
  6159                           ;UI.c: 77: lcdInst(0b10000000);;
  6160  0008EC  0E80               	movlw	128
  6161  0008EE  ECC1  F023         	call	_lcdInst
  6162                           
  6163                           ;UI.c: 78: printf("RESULTS IN LOG %d", sel+1);
  6164  0008F2  0EB9               	movlw	low STR_1
  6165  0008F4  0100               	movlb	0	; () banked
  6166  0008F6  6F8E               	movwf	printf@f& (0+255),b
  6167  0008F8  0EFB               	movlw	high STR_1
  6168  0008FA  0100               	movlb	0	; () banked
  6169  0008FC  6F8F               	movwf	(printf@f+1)& (0+255),b
  6170  0008FE  0E01               	movlw	1
  6171  000900  0100               	movlb	0	; () banked
  6172  000902  25FD               	addwf	_sel& (0+255),w,b
  6173  000904  0100               	movlb	0	; () banked
  6174  000906  6F90               	movwf	(?_printf+2)& (0+255),b
  6175  000908  0100               	movlb	0	; () banked
  6176  00090A  6B91               	clrf	(?_printf+3)& (0+255),b
  6177  00090C  0E00               	movlw	0
  6178  00090E  2391               	addwfc	(?_printf+3)& (0+255),f,b
  6179  000910  ECB8  F008         	call	_printf	;wreg free
  6180                           
  6181                           ;UI.c: 79: lcdInst(0b11000000);;
  6182  000914  0EC0               	movlw	192
  6183  000916  ECC1  F023         	call	_lcdInst
  6184                           
  6185                           ;UI.c: 80: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  6186  00091A  0E0E               	movlw	14
  6187  00091C  0100               	movlb	0	; () banked
  6188  00091E  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6189  000920  0E10               	movlw	16
  6190  000922  6F82               	movwf	___awmod@divisor& (0+255),b
  6191  000924  C0F8  F080         	movff	_total_time,___awmod@dividend
  6192  000928  C0F9  F081         	movff	_total_time+1,___awmod@dividend+1
  6193  00092C  EC16  F01C         	call	___awmod	;wreg free
  6194  000930  C080  F0C6         	movff	?___awmod,_UI$2292
  6195  000934  C081  F0C7         	movff	?___awmod+1,_UI$2292+1
  6196                           
  6197                           ;UI.c: 80: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  6198  000938  0E1B               	movlw	low STR_2
  6199  00093A  0100               	movlb	0	; () banked
  6200  00093C  6F8E               	movwf	printf@f& (0+255),b
  6201  00093E  0EFF               	movlw	high STR_2
  6202  000940  0100               	movlb	0	; () banked
  6203  000942  6F8F               	movwf	(printf@f+1)& (0+255),b
  6204  000944  0E0E               	movlw	14
  6205  000946  0100               	movlb	0	; () banked
  6206  000948  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6207  00094A  0E10               	movlw	16
  6208  00094C  6F82               	movwf	___awmod@divisor& (0+255),b
  6209  00094E  C0F8  F080         	movff	_total_time,___awmod@dividend
  6210  000952  C0F9  F081         	movff	_total_time+1,___awmod@dividend+1
  6211  000956  EC16  F01C         	call	___awmod	;wreg free
  6212  00095A  C080  F086         	movff	?___awmod,___awdiv@dividend
  6213  00095E  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  6214  000962  0E00               	movlw	0
  6215  000964  0100               	movlb	0	; () banked
  6216  000966  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  6217  000968  0E3C               	movlw	60
  6218  00096A  6F88               	movwf	___awdiv@divisor& (0+255),b
  6219  00096C  EC04  F01B         	call	___awdiv	;wreg free
  6220  000970  C086  F090         	movff	?___awdiv,?_printf+2
  6221  000974  C087  F091         	movff	?___awdiv+1,?_printf+3
  6222  000978  C0C6  F080         	movff	_UI$2292,___awmod@dividend
  6223  00097C  C0C7  F081         	movff	_UI$2292+1,___awmod@dividend+1
  6224  000980  0E00               	movlw	0
  6225  000982  0100               	movlb	0	; () banked
  6226  000984  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6227  000986  0E3C               	movlw	60
  6228  000988  6F82               	movwf	___awmod@divisor& (0+255),b
  6229  00098A  EC16  F01C         	call	___awmod	;wreg free
  6230  00098E  C080  F092         	movff	?___awmod,?_printf+4
  6231  000992  C081  F093         	movff	?___awmod+1,?_printf+5
  6232  000996  ECB8  F008         	call	_printf	;wreg free
  6233                           
  6234                           ;UI.c: 81: machine_state = UI_state;
  6235  00099A  0E00               	movlw	0
  6236  00099C  0100               	movlb	0	; () banked
  6237  00099E  6FFC               	movwf	_machine_state& (0+255),b
  6238  0009A0                     l177:
  6239  0009A0  A281               	btfss	3969,1,c	;volatile
  6240  0009A2  D7FE               	goto	l177
  6241                           
  6242                           ;UI.c: 84: }
  6243                           ;UI.c: 85: if(cur_state==12){
  6244  0009A4  0E0C               	movlw	12
  6245  0009A6  0100               	movlb	0	; () banked
  6246  0009A8  19DE               	xorwf	_cur_state& (0+255),w,b
  6247  0009AA  0100               	movlb	0	; () banked
  6248  0009AC  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
  6249  0009AE  A4D8               	btfss	status,2,c
  6250  0009B0  D003               	goto	l7393
  6251                           
  6252                           ; BSR set to: 0
  6253                           ;UI.c: 86: change_state_to_menu_12();
  6254  0009B2  EC2F  F021         	call	_change_state_to_menu_12	;wreg free
  6255                           
  6256                           ;UI.c: 87: }
  6257  0009B6  D3D5               	goto	l7715
  6258  0009B8                     l7393:
  6259                           
  6260                           ;UI.c: 88: else{
  6261                           ;UI.c: 89: change_state_to_menu_22();
  6262  0009B8  EC13  F021         	call	_change_state_to_menu_22	;wreg free
  6263                           
  6264                           ;UI.c: 90: }
  6265                           ;UI.c: 91: }
  6266  0009BC  D3D2               	goto	l7715
  6267  0009BE                     l7395:
  6268                           
  6269                           ;UI.c: 92: else if(cur_state == 0){
  6270  0009BE  0100               	movlb	0	; () banked
  6271  0009C0  51DE               	movf	_cur_state& (0+255),w,b
  6272  0009C2  0100               	movlb	0	; () banked
  6273  0009C4  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
  6274  0009C6  A4D8               	btfss	status,2,c
  6275  0009C8  D3CC               	goto	l7715
  6276                           
  6277                           ; BSR set to: 0
  6278                           ;UI.c: 93: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
  6279  0009CA  0E00               	movlw	0
  6280  0009CC  0100               	movlb	0	; () banked
  6281  0009CE  6FC8               	movwf	UI@i& (0+255),b
  6282  0009D0                     l7399:
  6283                           
  6284                           ; BSR set to: 0
  6285  0009D0  0E63               	movlw	99
  6286  0009D2  0100               	movlb	0	; () banked
  6287  0009D4  65C8               	cpfsgt	UI@i& (0+255),b
  6288  0009D6  D001               	goto	l7403
  6289  0009D8  D00C               	goto	l7407
  6290  0009DA                     l7403:
  6291                           
  6292                           ; BSR set to: 0
  6293  0009DA  0E68               	movlw	104
  6294  0009DC  0100               	movlb	0	; () banked
  6295  0009DE  6FC4               	movwf	??_UI& (0+255),b
  6296  0009E0  0EE4               	movlw	228
  6297  0009E2                     u7247:
  6298  0009E2  2EE8               	decfsz	wreg,f,c
  6299  0009E4  D7FE               	bra	u7247
  6300  0009E6  2FC4               	decfsz	??_UI& (0+255),f,b
  6301  0009E8  D7FC               	bra	u7247
  6302  0009EA  F000               	nop	
  6303  0009EC  0100               	movlb	0	; () banked
  6304  0009EE  2BC8               	incf	UI@i& (0+255),f,b
  6305  0009F0  D7EF               	goto	l7399
  6306  0009F2                     l7407:
  6307                           
  6308                           ; BSR set to: 0
  6309                           ;UI.c: 94: if(cur_state == 0){
  6310  0009F2  0100               	movlb	0	; () banked
  6311  0009F4  51DE               	movf	_cur_state& (0+255),w,b
  6312  0009F6  0100               	movlb	0	; () banked
  6313  0009F8  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
  6314  0009FA  A4D8               	btfss	status,2,c
  6315  0009FC  D3B2               	goto	l7715
  6316                           
  6317                           ; BSR set to: 0
  6318                           ;UI.c: 95: printRTC();
  6319  0009FE  EC82  F00F         	call	_printRTC	;wreg free
  6320                           
  6321                           ;UI.c: 96: }
  6322                           ;UI.c: 97: }
  6323                           ;UI.c: 98: while(logstate){
  6324  000A02  D3AF               	goto	l7715
  6325  000A04                     l7411:
  6326                           
  6327                           ;UI.c: 100: if(!log_completion){
  6328  000A04  0100               	movlb	0	; () banked
  6329  000A06  51E8               	movf	_log_completion& (0+255),w,b
  6330  000A08  0100               	movlb	0	; () banked
  6331  000A0A  11E9               	iorwf	(_log_completion+1)& (0+255),w,b
  6332  000A0C  A4D8               	btfss	status,2,c
  6333  000A0E  D041               	goto	l7441
  6334                           
  6335                           ; BSR set to: 0
  6336                           ;UI.c: 101: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6337  000A10  0E01               	movlw	1
  6338  000A12  ECC1  F023         	call	_lcdInst
  6339  000A16  0E68               	movlw	104
  6340  000A18  0100               	movlb	0	; () banked
  6341  000A1A  6FC4               	movwf	??_UI& (0+255),b
  6342  000A1C  0EE4               	movlw	228
  6343  000A1E                     u7257:
  6344  000A1E  2EE8               	decfsz	wreg,f,c
  6345  000A20  D7FE               	bra	u7257
  6346  000A22  2FC4               	decfsz	??_UI& (0+255),f,b
  6347  000A24  D7FC               	bra	u7257
  6348  000A26  F000               	nop	
  6349                           
  6350                           ;UI.c: 102: lcdInst(0b10000000);;
  6351  000A28  0E80               	movlw	128
  6352  000A2A  ECC1  F023         	call	_lcdInst
  6353                           
  6354                           ;UI.c: 103: printf("-- LOG %2d HERE--", log);
  6355  000A2E  0EA7               	movlw	low STR_3
  6356  000A30  0100               	movlb	0	; () banked
  6357  000A32  6F8E               	movwf	printf@f& (0+255),b
  6358  000A34  0EFB               	movlw	high STR_3
  6359  000A36  0100               	movlb	0	; () banked
  6360  000A38  6F8F               	movwf	(printf@f+1)& (0+255),b
  6361  000A3A  C0E6  F090         	movff	_log,?_printf+2
  6362  000A3E  C0E7  F091         	movff	_log+1,?_printf+3
  6363  000A42  ECB8  F008         	call	_printf	;wreg free
  6364                           
  6365                           ;UI.c: 104: lcdInst(0b11000000);;
  6366  000A46  0EC0               	movlw	192
  6367  000A48  ECC1  F023         	call	_lcdInst
  6368                           
  6369                           ;UI.c: 105: printf("DIDN'T COMPLETE");
  6370  000A4C  0E3E               	movlw	low STR_4
  6371  000A4E  0100               	movlb	0	; () banked
  6372  000A50  6F8E               	movwf	printf@f& (0+255),b
  6373  000A52  0EFE               	movlw	high STR_4
  6374  000A54  0100               	movlb	0	; () banked
  6375  000A56  6F8F               	movwf	(printf@f+1)& (0+255),b
  6376  000A58  ECB8  F008         	call	_printf	;wreg free
  6377  000A5C                     l7425:
  6378  000A5C  0E00               	movlw	0
  6379  000A5E  0100               	movlb	0	; () banked
  6380  000A60  6FC9               	movwf	UI@i_408& (0+255),b
  6381  000A62                     l7427:
  6382                           
  6383                           ; BSR set to: 0
  6384  000A62  0E63               	movlw	99
  6385  000A64  0100               	movlb	0	; () banked
  6386  000A66  65C9               	cpfsgt	UI@i_408& (0+255),b
  6387  000A68  D001               	goto	l7431
  6388  000A6A  D00C               	goto	l7435
  6389  000A6C                     l7431:
  6390                           
  6391                           ; BSR set to: 0
  6392  000A6C  0E68               	movlw	104
  6393  000A6E  0100               	movlb	0	; () banked
  6394  000A70  6FC4               	movwf	??_UI& (0+255),b
  6395  000A72  0EE4               	movlw	228
  6396  000A74                     u7267:
  6397  000A74  2EE8               	decfsz	wreg,f,c
  6398  000A76  D7FE               	bra	u7267
  6399  000A78  2FC4               	decfsz	??_UI& (0+255),f,b
  6400  000A7A  D7FC               	bra	u7267
  6401  000A7C  F000               	nop	
  6402  000A7E  0100               	movlb	0	; () banked
  6403  000A80  2BC9               	incf	UI@i_408& (0+255),f,b
  6404  000A82  D7EF               	goto	l7427
  6405  000A84                     l7435:
  6406                           
  6407                           ; BSR set to: 0
  6408  000A84  0100               	movlb	0	; () banked
  6409  000A86  51F6               	movf	_logstate& (0+255),w,b
  6410  000A88  0100               	movlb	0	; () banked
  6411  000A8A  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6412  000A8C  B4D8               	btfsc	status,2,c
  6413  000A8E  0012               	return	
  6414  000A90  D7E5               	goto	l7425
  6415  000A92                     l7441:
  6416                           
  6417                           ; BSR set to: 0
  6418                           ;UI.c: 109: else{
  6419                           ;UI.c: 110: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6420  000A92  0E01               	movlw	1
  6421  000A94  ECC1  F023         	call	_lcdInst
  6422  000A98  0E68               	movlw	104
  6423  000A9A  0100               	movlb	0	; () banked
  6424  000A9C  6FC4               	movwf	??_UI& (0+255),b
  6425  000A9E  0EE4               	movlw	228
  6426  000AA0                     u7277:
  6427  000AA0  2EE8               	decfsz	wreg,f,c
  6428  000AA2  D7FE               	bra	u7277
  6429  000AA4  2FC4               	decfsz	??_UI& (0+255),f,b
  6430  000AA6  D7FC               	bra	u7277
  6431  000AA8  F000               	nop	
  6432                           
  6433                           ;UI.c: 111: lcdInst(0b10000000);;
  6434  000AAA  0E80               	movlw	128
  6435  000AAC  ECC1  F023         	call	_lcdInst
  6436                           
  6437                           ;UI.c: 112: printf("-- LOG %2d HERE--", log);
  6438  000AB0  0EA7               	movlw	low STR_3
  6439  000AB2  0100               	movlb	0	; () banked
  6440  000AB4  6F8E               	movwf	printf@f& (0+255),b
  6441  000AB6  0EFB               	movlw	high STR_3
  6442  000AB8  0100               	movlb	0	; () banked
  6443  000ABA  6F8F               	movwf	(printf@f+1)& (0+255),b
  6444  000ABC  C0E6  F090         	movff	_log,?_printf+2
  6445  000AC0  C0E7  F091         	movff	_log+1,?_printf+3
  6446  000AC4  ECB8  F008         	call	_printf	;wreg free
  6447                           
  6448                           ;UI.c: 113: lcdInst(0b11000000);;
  6449  000AC8  0EC0               	movlw	192
  6450  000ACA  ECC1  F023         	call	_lcdInst
  6451                           
  6452                           ;UI.c: 114: printf("PAUSE < | BACK >");
  6453  000ACE  0EFC               	movlw	low STR_6
  6454  000AD0  0100               	movlb	0	; () banked
  6455  000AD2  6F8E               	movwf	printf@f& (0+255),b
  6456  000AD4  0EFD               	movlw	high STR_6
  6457  000AD6  0100               	movlb	0	; () banked
  6458  000AD8  6F8F               	movwf	(printf@f+1)& (0+255),b
  6459  000ADA  ECB8  F008         	call	_printf	;wreg free
  6460                           
  6461                           ;UI.c: 116: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6462  000ADE  0E00               	movlw	0
  6463  000AE0  0100               	movlb	0	; () banked
  6464  000AE2  6FCA               	movwf	UI@i_411& (0+255),b
  6465  000AE4                     l7455:
  6466                           
  6467                           ; BSR set to: 0
  6468  000AE4  0E63               	movlw	99
  6469  000AE6  0100               	movlb	0	; () banked
  6470  000AE8  65CA               	cpfsgt	UI@i_411& (0+255),b
  6471  000AEA  D001               	goto	l7459
  6472  000AEC  D00C               	goto	l7463
  6473  000AEE                     l7459:
  6474                           
  6475                           ; BSR set to: 0
  6476  000AEE  0E68               	movlw	104
  6477  000AF0  0100               	movlb	0	; () banked
  6478  000AF2  6FC4               	movwf	??_UI& (0+255),b
  6479  000AF4  0EE4               	movlw	228
  6480  000AF6                     u7287:
  6481  000AF6  2EE8               	decfsz	wreg,f,c
  6482  000AF8  D7FE               	bra	u7287
  6483  000AFA  2FC4               	decfsz	??_UI& (0+255),f,b
  6484  000AFC  D7FC               	bra	u7287
  6485  000AFE  F000               	nop	
  6486  000B00  0100               	movlb	0	; () banked
  6487  000B02  2BCA               	incf	UI@i_411& (0+255),f,b
  6488  000B04  D7EF               	goto	l7455
  6489  000B06                     l7463:
  6490                           
  6491                           ; BSR set to: 0
  6492  000B06  0100               	movlb	0	; () banked
  6493  000B08  51F6               	movf	_logstate& (0+255),w,b
  6494  000B0A  0100               	movlb	0	; () banked
  6495  000B0C  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6496  000B0E  B4D8               	btfsc	status,2,c
  6497  000B10  0012               	return	
  6498                           
  6499                           ; BSR set to: 0
  6500                           ;UI.c: 117: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6501                           
  6502                           ; BSR set to: 0
  6503                           
  6504                           ; BSR set to: 0
  6505  000B12  0E00               	movlw	0
  6506  000B14  0100               	movlb	0	; () banked
  6507  000B16  6FCB               	movwf	UI@i_412& (0+255),b
  6508  000B18                     l7469:
  6509                           
  6510                           ; BSR set to: 0
  6511  000B18  0E63               	movlw	99
  6512  000B1A  0100               	movlb	0	; () banked
  6513  000B1C  65CB               	cpfsgt	UI@i_412& (0+255),b
  6514  000B1E  D001               	goto	l7473
  6515  000B20  D00C               	goto	l7477
  6516  000B22                     l7473:
  6517                           
  6518                           ; BSR set to: 0
  6519  000B22  0E68               	movlw	104
  6520  000B24  0100               	movlb	0	; () banked
  6521  000B26  6FC4               	movwf	??_UI& (0+255),b
  6522  000B28  0EE4               	movlw	228
  6523  000B2A                     u7297:
  6524  000B2A  2EE8               	decfsz	wreg,f,c
  6525  000B2C  D7FE               	bra	u7297
  6526  000B2E  2FC4               	decfsz	??_UI& (0+255),f,b
  6527  000B30  D7FC               	bra	u7297
  6528  000B32  F000               	nop	
  6529  000B34  0100               	movlb	0	; () banked
  6530  000B36  2BCB               	incf	UI@i_412& (0+255),f,b
  6531  000B38  D7EF               	goto	l7469
  6532  000B3A                     l7477:
  6533                           
  6534                           ; BSR set to: 0
  6535  000B3A  0100               	movlb	0	; () banked
  6536  000B3C  51F6               	movf	_logstate& (0+255),w,b
  6537  000B3E  0100               	movlb	0	; () banked
  6538  000B40  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6539  000B42  B4D8               	btfsc	status,2,c
  6540  000B44  0012               	return	
  6541                           
  6542                           ; BSR set to: 0
  6543                           ;UI.c: 119: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6544                           
  6545                           ; BSR set to: 0
  6546                           
  6547                           ; BSR set to: 0
  6548  000B46  0E01               	movlw	1
  6549  000B48  ECC1  F023         	call	_lcdInst
  6550  000B4C  0E68               	movlw	104
  6551  000B4E  0100               	movlb	0	; () banked
  6552  000B50  6FC4               	movwf	??_UI& (0+255),b
  6553  000B52  0EE4               	movlw	228
  6554  000B54                     u7307:
  6555  000B54  2EE8               	decfsz	wreg,f,c
  6556  000B56  D7FE               	bra	u7307
  6557  000B58  2FC4               	decfsz	??_UI& (0+255),f,b
  6558  000B5A  D7FC               	bra	u7307
  6559  000B5C  F000               	nop	
  6560                           
  6561                           ;UI.c: 120: lcdInst(0b10000000);;
  6562  000B5E  0E80               	movlw	128
  6563  000B60  ECC1  F023         	call	_lcdInst
  6564                           
  6565                           ;UI.c: 121: printf("START:");
  6566  000B64  0EC4               	movlw	low STR_7
  6567  000B66  0100               	movlb	0	; () banked
  6568  000B68  6F8E               	movwf	printf@f& (0+255),b
  6569  000B6A  0EFF               	movlw	high STR_7
  6570  000B6C  0100               	movlb	0	; () banked
  6571  000B6E  6F8F               	movwf	(printf@f+1)& (0+255),b
  6572  000B70  ECB8  F008         	call	_printf	;wreg free
  6573                           
  6574                           ;UI.c: 122: lcdInst(0b11000000);;
  6575  000B74  0EC0               	movlw	192
  6576  000B76  ECC1  F023         	call	_lcdInst
  6577                           
  6578                           ;UI.c: 123: char month[] = "MMM";
  6579  000B7A  C12F  F0D6         	movff	UI@F3223,UI@month
  6580  000B7E  C130  F0D7         	movff	UI@F3223+1,UI@month+1
  6581  000B82  C131  F0D8         	movff	UI@F3223+2,UI@month+2
  6582  000B86  C132  F0D9         	movff	UI@F3223+3,UI@month+3
  6583                           
  6584                           ;UI.c: 124: switch(log_startTime[5]){
  6585  000B8A  D0C3               	goto	l7521
  6586  000B8C                     l7493:
  6587                           
  6588                           ;UI.c: 126: strcpy(month, "JAN");
  6589  000B8C  0ED6               	movlw	low UI@month
  6590  000B8E  0100               	movlb	0	; () banked
  6591  000B90  6F80               	movwf	strcpy@to& (0+255),b
  6592  000B92  0E00               	movlw	high UI@month
  6593  000B94  0100               	movlb	0	; () banked
  6594  000B96  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6595  000B98  0EDB               	movlw	low STR_8
  6596  000B9A  0100               	movlb	0	; () banked
  6597  000B9C  6F82               	movwf	strcpy@from& (0+255),b
  6598  000B9E  0EFF               	movlw	high STR_8
  6599  000BA0  0100               	movlb	0	; () banked
  6600  000BA2  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6601  000BA4  EC4B  F021         	call	_strcpy	;wreg free
  6602                           
  6603                           ;UI.c: 127: break;
  6604  000BA8  D0E6               	goto	l7523
  6605  000BAA                     l7495:
  6606                           
  6607                           ;UI.c: 129: strcpy(month, "FEB");
  6608  000BAA  0ED6               	movlw	low UI@month
  6609  000BAC  0100               	movlb	0	; () banked
  6610  000BAE  6F80               	movwf	strcpy@to& (0+255),b
  6611  000BB0  0E00               	movlw	high UI@month
  6612  000BB2  0100               	movlb	0	; () banked
  6613  000BB4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6614  000BB6  0ECB               	movlw	low STR_9
  6615  000BB8  0100               	movlb	0	; () banked
  6616  000BBA  6F82               	movwf	strcpy@from& (0+255),b
  6617  000BBC  0EFF               	movlw	high STR_9
  6618  000BBE  0100               	movlb	0	; () banked
  6619  000BC0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6620  000BC2  EC4B  F021         	call	_strcpy	;wreg free
  6621                           
  6622                           ;UI.c: 130: break;
  6623  000BC6  D0D7               	goto	l7523
  6624  000BC8                     l7497:
  6625                           
  6626                           ;UI.c: 132: strcpy(month, "MAR");
  6627  000BC8  0ED6               	movlw	low UI@month
  6628  000BCA  0100               	movlb	0	; () banked
  6629  000BCC  6F80               	movwf	strcpy@to& (0+255),b
  6630  000BCE  0E00               	movlw	high UI@month
  6631  000BD0  0100               	movlb	0	; () banked
  6632  000BD2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6633  000BD4  0EE7               	movlw	low STR_10
  6634  000BD6  0100               	movlb	0	; () banked
  6635  000BD8  6F82               	movwf	strcpy@from& (0+255),b
  6636  000BDA  0EFF               	movlw	high STR_10
  6637  000BDC  0100               	movlb	0	; () banked
  6638  000BDE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6639  000BE0  EC4B  F021         	call	_strcpy	;wreg free
  6640                           
  6641                           ;UI.c: 133: break;
  6642  000BE4  D0C8               	goto	l7523
  6643  000BE6                     l7499:
  6644                           
  6645                           ;UI.c: 135: strcpy(month, "APR");
  6646  000BE6  0ED6               	movlw	low UI@month
  6647  000BE8  0100               	movlb	0	; () banked
  6648  000BEA  6F80               	movwf	strcpy@to& (0+255),b
  6649  000BEC  0E00               	movlw	high UI@month
  6650  000BEE  0100               	movlb	0	; () banked
  6651  000BF0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6652  000BF2  0EEB               	movlw	low STR_11
  6653  000BF4  0100               	movlb	0	; () banked
  6654  000BF6  6F82               	movwf	strcpy@from& (0+255),b
  6655  000BF8  0EFF               	movlw	high STR_11
  6656  000BFA  0100               	movlb	0	; () banked
  6657  000BFC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6658  000BFE  EC4B  F021         	call	_strcpy	;wreg free
  6659                           
  6660                           ;UI.c: 136: break;
  6661  000C02  D0B9               	goto	l7523
  6662  000C04                     l7501:
  6663                           
  6664                           ;UI.c: 138: strcpy(month, "MAY");
  6665  000C04  0ED6               	movlw	low UI@month
  6666  000C06  0100               	movlb	0	; () banked
  6667  000C08  6F80               	movwf	strcpy@to& (0+255),b
  6668  000C0A  0E00               	movlw	high UI@month
  6669  000C0C  0100               	movlb	0	; () banked
  6670  000C0E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6671  000C10  0EFB               	movlw	low STR_12
  6672  000C12  0100               	movlb	0	; () banked
  6673  000C14  6F82               	movwf	strcpy@from& (0+255),b
  6674  000C16  0EFF               	movlw	high STR_12
  6675  000C18  0100               	movlb	0	; () banked
  6676  000C1A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6677  000C1C  EC4B  F021         	call	_strcpy	;wreg free
  6678                           
  6679                           ;UI.c: 139: break;
  6680  000C20  D0AA               	goto	l7523
  6681  000C22                     l7503:
  6682                           
  6683                           ;UI.c: 141: strcpy(month, "JUN");
  6684  000C22  0ED6               	movlw	low UI@month
  6685  000C24  0100               	movlb	0	; () banked
  6686  000C26  6F80               	movwf	strcpy@to& (0+255),b
  6687  000C28  0E00               	movlw	high UI@month
  6688  000C2A  0100               	movlb	0	; () banked
  6689  000C2C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6690  000C2E  0EDF               	movlw	low STR_13
  6691  000C30  0100               	movlb	0	; () banked
  6692  000C32  6F82               	movwf	strcpy@from& (0+255),b
  6693  000C34  0EFF               	movlw	high STR_13
  6694  000C36  0100               	movlb	0	; () banked
  6695  000C38  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6696  000C3A  EC4B  F021         	call	_strcpy	;wreg free
  6697                           
  6698                           ;UI.c: 142: break;
  6699  000C3E  D09B               	goto	l7523
  6700  000C40                     l7505:
  6701                           
  6702                           ;UI.c: 144: strcpy(month, "JUL");
  6703  000C40  0ED6               	movlw	low UI@month
  6704  000C42  0100               	movlb	0	; () banked
  6705  000C44  6F80               	movwf	strcpy@to& (0+255),b
  6706  000C46  0E00               	movlw	high UI@month
  6707  000C48  0100               	movlb	0	; () banked
  6708  000C4A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6709  000C4C  0ED7               	movlw	low STR_14
  6710  000C4E  0100               	movlb	0	; () banked
  6711  000C50  6F82               	movwf	strcpy@from& (0+255),b
  6712  000C52  0EFF               	movlw	high STR_14
  6713  000C54  0100               	movlb	0	; () banked
  6714  000C56  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6715  000C58  EC4B  F021         	call	_strcpy	;wreg free
  6716                           
  6717                           ;UI.c: 145: break;
  6718  000C5C  D08C               	goto	l7523
  6719  000C5E                     l7507:
  6720                           
  6721                           ;UI.c: 147: strcpy(month, "AUG");
  6722  000C5E  0ED6               	movlw	low UI@month
  6723  000C60  0100               	movlb	0	; () banked
  6724  000C62  6F80               	movwf	strcpy@to& (0+255),b
  6725  000C64  0E00               	movlw	high UI@month
  6726  000C66  0100               	movlb	0	; () banked
  6727  000C68  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6728  000C6A  0ED3               	movlw	low STR_15
  6729  000C6C  0100               	movlb	0	; () banked
  6730  000C6E  6F82               	movwf	strcpy@from& (0+255),b
  6731  000C70  0EFF               	movlw	high STR_15
  6732  000C72  0100               	movlb	0	; () banked
  6733  000C74  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6734  000C76  EC4B  F021         	call	_strcpy	;wreg free
  6735                           
  6736                           ;UI.c: 148: break;
  6737  000C7A  D07D               	goto	l7523
  6738  000C7C                     l7509:
  6739                           
  6740                           ;UI.c: 150: strcpy(month, "SEP");
  6741  000C7C  0ED6               	movlw	low UI@month
  6742  000C7E  0100               	movlb	0	; () banked
  6743  000C80  6F80               	movwf	strcpy@to& (0+255),b
  6744  000C82  0E00               	movlw	high UI@month
  6745  000C84  0100               	movlb	0	; () banked
  6746  000C86  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6747  000C88  0EE3               	movlw	low STR_16
  6748  000C8A  0100               	movlb	0	; () banked
  6749  000C8C  6F82               	movwf	strcpy@from& (0+255),b
  6750  000C8E  0EFF               	movlw	high STR_16
  6751  000C90  0100               	movlb	0	; () banked
  6752  000C92  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6753  000C94  EC4B  F021         	call	_strcpy	;wreg free
  6754                           
  6755                           ;UI.c: 151: break;
  6756  000C98  D06E               	goto	l7523
  6757  000C9A                     l7511:
  6758                           
  6759                           ;UI.c: 153: strcpy(month, "OCT");
  6760  000C9A  0ED6               	movlw	low UI@month
  6761  000C9C  0100               	movlb	0	; () banked
  6762  000C9E  6F80               	movwf	strcpy@to& (0+255),b
  6763  000CA0  0E00               	movlw	high UI@month
  6764  000CA2  0100               	movlb	0	; () banked
  6765  000CA4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6766  000CA6  0EF3               	movlw	low STR_17
  6767  000CA8  0100               	movlb	0	; () banked
  6768  000CAA  6F82               	movwf	strcpy@from& (0+255),b
  6769  000CAC  0EFF               	movlw	high STR_17
  6770  000CAE  0100               	movlb	0	; () banked
  6771  000CB0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6772  000CB2  EC4B  F021         	call	_strcpy	;wreg free
  6773                           
  6774                           ;UI.c: 154: break;
  6775  000CB6  D05F               	goto	l7523
  6776  000CB8                     l7513:
  6777                           
  6778                           ;UI.c: 156: strcpy(month, "NOV");
  6779  000CB8  0ED6               	movlw	low UI@month
  6780  000CBA  0100               	movlb	0	; () banked
  6781  000CBC  6F80               	movwf	strcpy@to& (0+255),b
  6782  000CBE  0E00               	movlw	high UI@month
  6783  000CC0  0100               	movlb	0	; () banked
  6784  000CC2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6785  000CC4  0EF7               	movlw	low STR_18
  6786  000CC6  0100               	movlb	0	; () banked
  6787  000CC8  6F82               	movwf	strcpy@from& (0+255),b
  6788  000CCA  0EFF               	movlw	high STR_18
  6789  000CCC  0100               	movlb	0	; () banked
  6790  000CCE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6791  000CD0  EC4B  F021         	call	_strcpy	;wreg free
  6792                           
  6793                           ;UI.c: 157: break;
  6794  000CD4  D050               	goto	l7523
  6795  000CD6                     l7515:
  6796                           
  6797                           ;UI.c: 159: strcpy(month, "DEC");
  6798  000CD6  0ED6               	movlw	low UI@month
  6799  000CD8  0100               	movlb	0	; () banked
  6800  000CDA  6F80               	movwf	strcpy@to& (0+255),b
  6801  000CDC  0E00               	movlw	high UI@month
  6802  000CDE  0100               	movlb	0	; () banked
  6803  000CE0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6804  000CE2  0ECF               	movlw	low STR_19
  6805  000CE4  0100               	movlb	0	; () banked
  6806  000CE6  6F82               	movwf	strcpy@from& (0+255),b
  6807  000CE8  0EFF               	movlw	high STR_19
  6808  000CEA  0100               	movlb	0	; () banked
  6809  000CEC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6810  000CEE  EC4B  F021         	call	_strcpy	;wreg free
  6811                           
  6812                           ;UI.c: 160: break;
  6813  000CF2  D041               	goto	l7523
  6814  000CF4                     l7517:
  6815                           
  6816                           ;UI.c: 162: strcpy(month, "ERR");
  6817  000CF4  0ED6               	movlw	low UI@month
  6818  000CF6  0100               	movlb	0	; () banked
  6819  000CF8  6F80               	movwf	strcpy@to& (0+255),b
  6820  000CFA  0E00               	movlw	high UI@month
  6821  000CFC  0100               	movlb	0	; () banked
  6822  000CFE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6823  000D00  0EEF               	movlw	low STR_20
  6824  000D02  0100               	movlb	0	; () banked
  6825  000D04  6F82               	movwf	strcpy@from& (0+255),b
  6826  000D06  0EFF               	movlw	high STR_20
  6827  000D08  0100               	movlb	0	; () banked
  6828  000D0A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6829  000D0C  EC4B  F021         	call	_strcpy	;wreg free
  6830                           
  6831                           ;UI.c: 164: }
  6832                           
  6833                           ;UI.c: 163: break;
  6834  000D10  D032               	goto	l7523
  6835  000D12                     l7521:
  6836  000D12  EE21  F00A         	lfsr	2,_log_startTime+10
  6837  000D16  CFDE F0C4          	movff	postinc2,??_UI
  6838  000D1A  CFDD F0C5          	movff	postdec2,??_UI+1
  6839                           
  6840                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6841                           ; Switch size 1, requested type "space"
  6842                           ; Number of cases is 1, Range of values is 0 to 0
  6843                           ; switch strategies available:
  6844                           ; Name         Instructions Cycles
  6845                           ; simple_byte            4     3 (average)
  6846                           ;	Chosen strategy is simple_byte
  6847  000D1E  0100               	movlb	0	; () banked
  6848  000D20  51C5               	movf	(??_UI+1)& (0+255),w,b
  6849  000D22  0A00               	xorlw	0	; case 0
  6850  000D24  A4D8               	btfss	status,2,c
  6851  000D26  D7E6               	goto	l7517
  6852                           
  6853                           ; BSR set to: 0
  6854                           ; Switch size 1, requested type "space"
  6855                           ; Number of cases is 12, Range of values is 1 to 12
  6856                           ; switch strategies available:
  6857                           ; Name         Instructions Cycles
  6858                           ; simple_byte           37    19 (average)
  6859                           ;	Chosen strategy is simple_byte
  6860  000D28  0100               	movlb	0	; () banked
  6861  000D2A  51C4               	movf	??_UI& (0+255),w,b
  6862  000D2C  0A01               	xorlw	1	; case 1
  6863  000D2E  B4D8               	btfsc	status,2,c
  6864  000D30  D72D               	goto	l7493
  6865  000D32  0A03               	xorlw	3	; case 2
  6866  000D34  B4D8               	btfsc	status,2,c
  6867  000D36  D739               	goto	l7495
  6868  000D38  0A01               	xorlw	1	; case 3
  6869  000D3A  B4D8               	btfsc	status,2,c
  6870  000D3C  D745               	goto	l7497
  6871  000D3E  0A07               	xorlw	7	; case 4
  6872  000D40  B4D8               	btfsc	status,2,c
  6873  000D42  D751               	goto	l7499
  6874  000D44  0A01               	xorlw	1	; case 5
  6875  000D46  B4D8               	btfsc	status,2,c
  6876  000D48  D75D               	goto	l7501
  6877  000D4A  0A03               	xorlw	3	; case 6
  6878  000D4C  B4D8               	btfsc	status,2,c
  6879  000D4E  D769               	goto	l7503
  6880  000D50  0A01               	xorlw	1	; case 7
  6881  000D52  B4D8               	btfsc	status,2,c
  6882  000D54  D775               	goto	l7505
  6883  000D56  0A0F               	xorlw	15	; case 8
  6884  000D58  B4D8               	btfsc	status,2,c
  6885  000D5A  D781               	goto	l7507
  6886  000D5C  0A01               	xorlw	1	; case 9
  6887  000D5E  B4D8               	btfsc	status,2,c
  6888  000D60  D78D               	goto	l7509
  6889  000D62  0A03               	xorlw	3	; case 10
  6890  000D64  B4D8               	btfsc	status,2,c
  6891  000D66  D799               	goto	l7511
  6892  000D68  0A01               	xorlw	1	; case 11
  6893  000D6A  B4D8               	btfsc	status,2,c
  6894  000D6C  D7A5               	goto	l7513
  6895  000D6E  0A07               	xorlw	7	; case 12
  6896  000D70  B4D8               	btfsc	status,2,c
  6897  000D72  D7B1               	goto	l7515
  6898  000D74  D7BF               	goto	l7517
  6899  000D76                     l7523:
  6900                           
  6901                           ;UI.c: 165: printf("%02d%s | %02d:%02d:%02d", log_startTime[4],month,log_startTime[2],lo
      +                          g_startTime[1],log_startTime[0]);
  6902  000D76  0E30               	movlw	low STR_21
  6903  000D78  0100               	movlb	0	; () banked
  6904  000D7A  6F8E               	movwf	printf@f& (0+255),b
  6905  000D7C  0EFB               	movlw	high STR_21
  6906  000D7E  0100               	movlb	0	; () banked
  6907  000D80  6F8F               	movwf	(printf@f+1)& (0+255),b
  6908  000D82  C108  F090         	movff	_log_startTime+8,?_printf+2
  6909  000D86  C109  F091         	movff	_log_startTime+9,?_printf+3
  6910  000D8A  0ED6               	movlw	low UI@month
  6911  000D8C  0100               	movlb	0	; () banked
  6912  000D8E  6F92               	movwf	(?_printf+4)& (0+255),b
  6913  000D90  0E00               	movlw	high UI@month
  6914  000D92  0100               	movlb	0	; () banked
  6915  000D94  6F93               	movwf	(?_printf+5)& (0+255),b
  6916  000D96  C104  F094         	movff	_log_startTime+4,?_printf+6
  6917  000D9A  C105  F095         	movff	_log_startTime+5,?_printf+7
  6918  000D9E  C102  F096         	movff	_log_startTime+2,?_printf+8
  6919  000DA2  C103  F097         	movff	_log_startTime+3,?_printf+9
  6920  000DA6  C100  F098         	movff	_log_startTime,?_printf+10
  6921  000DAA  C101  F099         	movff	_log_startTime+1,?_printf+11
  6922  000DAE  ECB8  F008         	call	_printf	;wreg free
  6923                           
  6924                           ;UI.c: 167: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6925  000DB2  0E00               	movlw	0
  6926  000DB4  0100               	movlb	0	; () banked
  6927  000DB6  6FCC               	movwf	UI@i_430& (0+255),b
  6928  000DB8                     l7527:
  6929                           
  6930                           ; BSR set to: 0
  6931  000DB8  0E63               	movlw	99
  6932  000DBA  0100               	movlb	0	; () banked
  6933  000DBC  65CC               	cpfsgt	UI@i_430& (0+255),b
  6934  000DBE  D001               	goto	l7531
  6935  000DC0  D00C               	goto	l7535
  6936  000DC2                     l7531:
  6937                           
  6938                           ; BSR set to: 0
  6939  000DC2  0E68               	movlw	104
  6940  000DC4  0100               	movlb	0	; () banked
  6941  000DC6  6FC4               	movwf	??_UI& (0+255),b
  6942  000DC8  0EE4               	movlw	228
  6943  000DCA                     u7317:
  6944  000DCA  2EE8               	decfsz	wreg,f,c
  6945  000DCC  D7FE               	bra	u7317
  6946  000DCE  2FC4               	decfsz	??_UI& (0+255),f,b
  6947  000DD0  D7FC               	bra	u7317
  6948  000DD2  F000               	nop	
  6949  000DD4  0100               	movlb	0	; () banked
  6950  000DD6  2BCC               	incf	UI@i_430& (0+255),f,b
  6951  000DD8  D7EF               	goto	l7527
  6952  000DDA                     l7535:
  6953                           
  6954                           ; BSR set to: 0
  6955  000DDA  0100               	movlb	0	; () banked
  6956  000DDC  51F6               	movf	_logstate& (0+255),w,b
  6957  000DDE  0100               	movlb	0	; () banked
  6958  000DE0  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6959  000DE2  B4D8               	btfsc	status,2,c
  6960  000DE4  0012               	return	
  6961                           
  6962                           ; BSR set to: 0
  6963                           ;UI.c: 168: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6964                           
  6965                           ; BSR set to: 0
  6966                           
  6967                           ; BSR set to: 0
  6968  000DE6  0E00               	movlw	0
  6969  000DE8  0100               	movlb	0	; () banked
  6970  000DEA  6FCD               	movwf	UI@i_431& (0+255),b
  6971  000DEC                     l7541:
  6972                           
  6973                           ; BSR set to: 0
  6974  000DEC  0E63               	movlw	99
  6975  000DEE  0100               	movlb	0	; () banked
  6976  000DF0  65CD               	cpfsgt	UI@i_431& (0+255),b
  6977  000DF2  D001               	goto	l7545
  6978  000DF4  D00C               	goto	l7549
  6979  000DF6                     l7545:
  6980                           
  6981                           ; BSR set to: 0
  6982  000DF6  0E68               	movlw	104
  6983  000DF8  0100               	movlb	0	; () banked
  6984  000DFA  6FC4               	movwf	??_UI& (0+255),b
  6985  000DFC  0EE4               	movlw	228
  6986  000DFE                     u7327:
  6987  000DFE  2EE8               	decfsz	wreg,f,c
  6988  000E00  D7FE               	bra	u7327
  6989  000E02  2FC4               	decfsz	??_UI& (0+255),f,b
  6990  000E04  D7FC               	bra	u7327
  6991  000E06  F000               	nop	
  6992  000E08  0100               	movlb	0	; () banked
  6993  000E0A  2BCD               	incf	UI@i_431& (0+255),f,b
  6994  000E0C  D7EF               	goto	l7541
  6995  000E0E                     l7549:
  6996                           
  6997                           ; BSR set to: 0
  6998  000E0E  0100               	movlb	0	; () banked
  6999  000E10  51F6               	movf	_logstate& (0+255),w,b
  7000  000E12  0100               	movlb	0	; () banked
  7001  000E14  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7002  000E16  B4D8               	btfsc	status,2,c
  7003  000E18  0012               	return	
  7004                           
  7005                           ; BSR set to: 0
  7006                           ;UI.c: 170: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7007                           
  7008                           ; BSR set to: 0
  7009                           
  7010                           ; BSR set to: 0
  7011  000E1A  0E01               	movlw	1
  7012  000E1C  ECC1  F023         	call	_lcdInst
  7013  000E20  0E68               	movlw	104
  7014  000E22  0100               	movlb	0	; () banked
  7015  000E24  6FC4               	movwf	??_UI& (0+255),b
  7016  000E26  0EE4               	movlw	228
  7017  000E28                     u7337:
  7018  000E28  2EE8               	decfsz	wreg,f,c
  7019  000E2A  D7FE               	bra	u7337
  7020  000E2C  2FC4               	decfsz	??_UI& (0+255),f,b
  7021  000E2E  D7FC               	bra	u7337
  7022  000E30  F000               	nop	
  7023                           
  7024                           ;UI.c: 171: lcdInst(0b10000000);;
  7025  000E32  0E80               	movlw	128
  7026  000E34  ECC1  F023         	call	_lcdInst
  7027                           
  7028                           ;UI.c: 172: printf("DURATION:");
  7029  000E38  0E9B               	movlw	low STR_22
  7030  000E3A  0100               	movlb	0	; () banked
  7031  000E3C  6F8E               	movwf	printf@f& (0+255),b
  7032  000E3E  0EFF               	movlw	high STR_22
  7033  000E40  0100               	movlb	0	; () banked
  7034  000E42  6F8F               	movwf	(printf@f+1)& (0+255),b
  7035  000E44  ECB8  F008         	call	_printf	;wreg free
  7036                           
  7037                           ;UI.c: 173: lcdInst(0b11000000);;
  7038  000E48  0EC0               	movlw	192
  7039  000E4A  ECC1  F023         	call	_lcdInst
  7040                           
  7041                           ;UI.c: 174: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  7042  000E4E  0E0E               	movlw	14
  7043  000E50  0100               	movlb	0	; () banked
  7044  000E52  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7045  000E54  0E10               	movlw	16
  7046  000E56  6F82               	movwf	___awmod@divisor& (0+255),b
  7047  000E58  C0F4  F080         	movff	_log_total_time,___awmod@dividend
  7048  000E5C  C0F5  F081         	movff	_log_total_time+1,___awmod@dividend+1
  7049  000E60  EC16  F01C         	call	___awmod	;wreg free
  7050  000E64  C080  F0C6         	movff	?___awmod,_UI$2292
  7051  000E68  C081  F0C7         	movff	?___awmod+1,_UI$2292+1
  7052                           
  7053                           ;UI.c: 174: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  7054  000E6C  0E0D               	movlw	low STR_23
  7055  000E6E  0100               	movlb	0	; () banked
  7056  000E70  6F8E               	movwf	printf@f& (0+255),b
  7057  000E72  0EFF               	movlw	high STR_23
  7058  000E74  0100               	movlb	0	; () banked
  7059  000E76  6F8F               	movwf	(printf@f+1)& (0+255),b
  7060  000E78  0E0E               	movlw	14
  7061  000E7A  0100               	movlb	0	; () banked
  7062  000E7C  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7063  000E7E  0E10               	movlw	16
  7064  000E80  6F82               	movwf	___awmod@divisor& (0+255),b
  7065  000E82  C0F4  F080         	movff	_log_total_time,___awmod@dividend
  7066  000E86  C0F5  F081         	movff	_log_total_time+1,___awmod@dividend+1
  7067  000E8A  EC16  F01C         	call	___awmod	;wreg free
  7068  000E8E  C080  F086         	movff	?___awmod,___awdiv@dividend
  7069  000E92  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  7070  000E96  0E00               	movlw	0
  7071  000E98  0100               	movlb	0	; () banked
  7072  000E9A  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  7073  000E9C  0E3C               	movlw	60
  7074  000E9E  6F88               	movwf	___awdiv@divisor& (0+255),b
  7075  000EA0  EC04  F01B         	call	___awdiv	;wreg free
  7076  000EA4  C086  F090         	movff	?___awdiv,?_printf+2
  7077  000EA8  C087  F091         	movff	?___awdiv+1,?_printf+3
  7078  000EAC  C0C6  F080         	movff	_UI$2292,___awmod@dividend
  7079  000EB0  C0C7  F081         	movff	_UI$2292+1,___awmod@dividend+1
  7080  000EB4  0E00               	movlw	0
  7081  000EB6  0100               	movlb	0	; () banked
  7082  000EB8  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7083  000EBA  0E3C               	movlw	60
  7084  000EBC  6F82               	movwf	___awmod@divisor& (0+255),b
  7085  000EBE  EC16  F01C         	call	___awmod	;wreg free
  7086  000EC2  C080  F092         	movff	?___awmod,?_printf+4
  7087  000EC6  C081  F093         	movff	?___awmod+1,?_printf+5
  7088  000ECA  ECB8  F008         	call	_printf	;wreg free
  7089                           
  7090                           ;UI.c: 176: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7091  000ECE  0E00               	movlw	0
  7092  000ED0  0100               	movlb	0	; () banked
  7093  000ED2  6FCE               	movwf	UI@i_434& (0+255),b
  7094  000ED4                     l7569:
  7095                           
  7096                           ; BSR set to: 0
  7097  000ED4  0E63               	movlw	99
  7098  000ED6  0100               	movlb	0	; () banked
  7099  000ED8  65CE               	cpfsgt	UI@i_434& (0+255),b
  7100  000EDA  D001               	goto	l7573
  7101  000EDC  D00C               	goto	l7577
  7102  000EDE                     l7573:
  7103                           
  7104                           ; BSR set to: 0
  7105  000EDE  0E68               	movlw	104
  7106  000EE0  0100               	movlb	0	; () banked
  7107  000EE2  6FC4               	movwf	??_UI& (0+255),b
  7108  000EE4  0EE4               	movlw	228
  7109  000EE6                     u7347:
  7110  000EE6  2EE8               	decfsz	wreg,f,c
  7111  000EE8  D7FE               	bra	u7347
  7112  000EEA  2FC4               	decfsz	??_UI& (0+255),f,b
  7113  000EEC  D7FC               	bra	u7347
  7114  000EEE  F000               	nop	
  7115  000EF0  0100               	movlb	0	; () banked
  7116  000EF2  2BCE               	incf	UI@i_434& (0+255),f,b
  7117  000EF4  D7EF               	goto	l7569
  7118  000EF6                     l7577:
  7119                           
  7120                           ; BSR set to: 0
  7121  000EF6  0100               	movlb	0	; () banked
  7122  000EF8  51F6               	movf	_logstate& (0+255),w,b
  7123  000EFA  0100               	movlb	0	; () banked
  7124  000EFC  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7125  000EFE  B4D8               	btfsc	status,2,c
  7126  000F00  0012               	return	
  7127                           
  7128                           ; BSR set to: 0
  7129                           ;UI.c: 177: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7130                           
  7131                           ; BSR set to: 0
  7132                           
  7133                           ; BSR set to: 0
  7134  000F02  0E00               	movlw	0
  7135  000F04  0100               	movlb	0	; () banked
  7136  000F06  6FCF               	movwf	UI@i_435& (0+255),b
  7137  000F08                     l7583:
  7138                           
  7139                           ; BSR set to: 0
  7140  000F08  0E63               	movlw	99
  7141  000F0A  0100               	movlb	0	; () banked
  7142  000F0C  65CF               	cpfsgt	UI@i_435& (0+255),b
  7143  000F0E  D001               	goto	l7587
  7144  000F10  D00C               	goto	l7591
  7145  000F12                     l7587:
  7146                           
  7147                           ; BSR set to: 0
  7148  000F12  0E68               	movlw	104
  7149  000F14  0100               	movlb	0	; () banked
  7150  000F16  6FC4               	movwf	??_UI& (0+255),b
  7151  000F18  0EE4               	movlw	228
  7152  000F1A                     u7357:
  7153  000F1A  2EE8               	decfsz	wreg,f,c
  7154  000F1C  D7FE               	bra	u7357
  7155  000F1E  2FC4               	decfsz	??_UI& (0+255),f,b
  7156  000F20  D7FC               	bra	u7357
  7157  000F22  F000               	nop	
  7158  000F24  0100               	movlb	0	; () banked
  7159  000F26  2BCF               	incf	UI@i_435& (0+255),f,b
  7160  000F28  D7EF               	goto	l7583
  7161  000F2A                     l7591:
  7162                           
  7163                           ; BSR set to: 0
  7164  000F2A  0100               	movlb	0	; () banked
  7165  000F2C  51F6               	movf	_logstate& (0+255),w,b
  7166  000F2E  0100               	movlb	0	; () banked
  7167  000F30  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7168  000F32  B4D8               	btfsc	status,2,c
  7169  000F34  0012               	return	
  7170                           
  7171                           ; BSR set to: 0
  7172                           ;UI.c: 179: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7173                           
  7174                           ; BSR set to: 0
  7175                           
  7176                           ; BSR set to: 0
  7177  000F36  0E01               	movlw	1
  7178  000F38  ECC1  F023         	call	_lcdInst
  7179  000F3C  0E68               	movlw	104
  7180  000F3E  0100               	movlb	0	; () banked
  7181  000F40  6FC4               	movwf	??_UI& (0+255),b
  7182  000F42  0EE4               	movlw	228
  7183  000F44                     u7367:
  7184  000F44  2EE8               	decfsz	wreg,f,c
  7185  000F46  D7FE               	bra	u7367
  7186  000F48  2FC4               	decfsz	??_UI& (0+255),f,b
  7187  000F4A  D7FC               	bra	u7367
  7188  000F4C  F000               	nop	
  7189                           
  7190                           ;UI.c: 180: lcdInst(0b10000000);;
  7191  000F4E  0E80               	movlw	128
  7192  000F50  ECC1  F023         	call	_lcdInst
  7193                           
  7194                           ;UI.c: 181: printf(" -- POP  CAN -- ");
  7195  000F54  0E52               	movlw	low STR_24
  7196  000F56  0100               	movlb	0	; () banked
  7197  000F58  6F8E               	movwf	printf@f& (0+255),b
  7198  000F5A  0EFD               	movlw	high STR_24
  7199  000F5C  0100               	movlb	0	; () banked
  7200  000F5E  6F8F               	movwf	(printf@f+1)& (0+255),b
  7201  000F60  ECB8  F008         	call	_printf	;wreg free
  7202                           
  7203                           ;UI.c: 182: lcdInst(0b11000000);;
  7204  000F64  0EC0               	movlw	192
  7205  000F66  ECC1  F023         	call	_lcdInst
  7206                           
  7207                           ;UI.c: 183: printf("NO TAB: %d|TAB: %d", log_count_pop_no_tab, log_count_pop_w_tab);
  7208  000F6A  0E70               	movlw	low STR_25
  7209  000F6C  0100               	movlb	0	; () banked
  7210  000F6E  6F8E               	movwf	printf@f& (0+255),b
  7211  000F70  0EFB               	movlw	high STR_25
  7212  000F72  0100               	movlb	0	; () banked
  7213  000F74  6F8F               	movwf	(printf@f+1)& (0+255),b
  7214  000F76  C0EE  F090         	movff	_log_count_pop_no_tab,?_printf+2
  7215  000F7A  C0EF  F091         	movff	_log_count_pop_no_tab+1,?_printf+3
  7216  000F7E  C0F0  F092         	movff	_log_count_pop_w_tab,?_printf+4
  7217  000F82  C0F1  F093         	movff	_log_count_pop_w_tab+1,?_printf+5
  7218  000F86  ECB8  F008         	call	_printf	;wreg free
  7219                           
  7220                           ;UI.c: 185: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7221  000F8A  0E00               	movlw	0
  7222  000F8C  0100               	movlb	0	; () banked
  7223  000F8E  6FD0               	movwf	UI@i_438& (0+255),b
  7224  000F90                     l7609:
  7225                           
  7226                           ; BSR set to: 0
  7227  000F90  0E63               	movlw	99
  7228  000F92  0100               	movlb	0	; () banked
  7229  000F94  65D0               	cpfsgt	UI@i_438& (0+255),b
  7230  000F96  D001               	goto	l7613
  7231  000F98  D00C               	goto	l7617
  7232  000F9A                     l7613:
  7233                           
  7234                           ; BSR set to: 0
  7235  000F9A  0E68               	movlw	104
  7236  000F9C  0100               	movlb	0	; () banked
  7237  000F9E  6FC4               	movwf	??_UI& (0+255),b
  7238  000FA0  0EE4               	movlw	228
  7239  000FA2                     u7377:
  7240  000FA2  2EE8               	decfsz	wreg,f,c
  7241  000FA4  D7FE               	bra	u7377
  7242  000FA6  2FC4               	decfsz	??_UI& (0+255),f,b
  7243  000FA8  D7FC               	bra	u7377
  7244  000FAA  F000               	nop	
  7245  000FAC  0100               	movlb	0	; () banked
  7246  000FAE  2BD0               	incf	UI@i_438& (0+255),f,b
  7247  000FB0  D7EF               	goto	l7609
  7248  000FB2                     l7617:
  7249                           
  7250                           ; BSR set to: 0
  7251  000FB2  0100               	movlb	0	; () banked
  7252  000FB4  51F6               	movf	_logstate& (0+255),w,b
  7253  000FB6  0100               	movlb	0	; () banked
  7254  000FB8  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7255  000FBA  B4D8               	btfsc	status,2,c
  7256  000FBC  0012               	return	
  7257                           
  7258                           ; BSR set to: 0
  7259                           ;UI.c: 186: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7260                           
  7261                           ; BSR set to: 0
  7262                           
  7263                           ; BSR set to: 0
  7264  000FBE  0E00               	movlw	0
  7265  000FC0  0100               	movlb	0	; () banked
  7266  000FC2  6FD1               	movwf	UI@i_439& (0+255),b
  7267  000FC4                     l7623:
  7268                           
  7269                           ; BSR set to: 0
  7270  000FC4  0E63               	movlw	99
  7271  000FC6  0100               	movlb	0	; () banked
  7272  000FC8  65D1               	cpfsgt	UI@i_439& (0+255),b
  7273  000FCA  D001               	goto	l7627
  7274  000FCC  D00C               	goto	l7631
  7275  000FCE                     l7627:
  7276                           
  7277                           ; BSR set to: 0
  7278  000FCE  0E68               	movlw	104
  7279  000FD0  0100               	movlb	0	; () banked
  7280  000FD2  6FC4               	movwf	??_UI& (0+255),b
  7281  000FD4  0EE4               	movlw	228
  7282  000FD6                     u7387:
  7283  000FD6  2EE8               	decfsz	wreg,f,c
  7284  000FD8  D7FE               	bra	u7387
  7285  000FDA  2FC4               	decfsz	??_UI& (0+255),f,b
  7286  000FDC  D7FC               	bra	u7387
  7287  000FDE  F000               	nop	
  7288  000FE0  0100               	movlb	0	; () banked
  7289  000FE2  2BD1               	incf	UI@i_439& (0+255),f,b
  7290  000FE4  D7EF               	goto	l7623
  7291  000FE6                     l7631:
  7292                           
  7293                           ; BSR set to: 0
  7294  000FE6  0100               	movlb	0	; () banked
  7295  000FE8  51F6               	movf	_logstate& (0+255),w,b
  7296  000FEA  0100               	movlb	0	; () banked
  7297  000FEC  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7298  000FEE  B4D8               	btfsc	status,2,c
  7299  000FF0  0012               	return	
  7300                           
  7301                           ; BSR set to: 0
  7302                           ;UI.c: 188: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7303                           
  7304                           ; BSR set to: 0
  7305                           
  7306                           ; BSR set to: 0
  7307  000FF2  0E01               	movlw	1
  7308  000FF4  ECC1  F023         	call	_lcdInst
  7309  000FF8  0E68               	movlw	104
  7310  000FFA  0100               	movlb	0	; () banked
  7311  000FFC  6FC4               	movwf	??_UI& (0+255),b
  7312  000FFE  0EE4               	movlw	228
  7313  001000                     u7397:
  7314  001000  2EE8               	decfsz	wreg,f,c
  7315  001002  D7FE               	bra	u7397
  7316  001004  2FC4               	decfsz	??_UI& (0+255),f,b
  7317  001006  D7FC               	bra	u7397
  7318  001008  F000               	nop	
  7319                           
  7320                           ;UI.c: 189: lcdInst(0b10000000);;
  7321  00100A  0E80               	movlw	128
  7322  00100C  ECC1  F023         	call	_lcdInst
  7323                           
  7324                           ;UI.c: 190: printf(" -- SOUP CAN -- ");
  7325  001010  0E63               	movlw	low STR_26
  7326  001012  0100               	movlb	0	; () banked
  7327  001014  6F8E               	movwf	printf@f& (0+255),b
  7328  001016  0EFD               	movlw	high STR_26
  7329  001018  0100               	movlb	0	; () banked
  7330  00101A  6F8F               	movwf	(printf@f+1)& (0+255),b
  7331  00101C  ECB8  F008         	call	_printf	;wreg free
  7332                           
  7333                           ;UI.c: 191: lcdInst(0b11000000);;
  7334  001020  0EC0               	movlw	192
  7335  001022  ECC1  F023         	call	_lcdInst
  7336                           
  7337                           ;UI.c: 192: printf("NO LAB: %d|LAB: %d", log_count_can_no_lab, log_count_can_w_lab);
  7338  001026  0E5D               	movlw	low STR_27
  7339  001028  0100               	movlb	0	; () banked
  7340  00102A  6F8E               	movwf	printf@f& (0+255),b
  7341  00102C  0EFB               	movlw	high STR_27
  7342  00102E  0100               	movlb	0	; () banked
  7343  001030  6F8F               	movwf	(printf@f+1)& (0+255),b
  7344  001032  C0EA  F090         	movff	_log_count_can_no_lab,?_printf+2
  7345  001036  C0EB  F091         	movff	_log_count_can_no_lab+1,?_printf+3
  7346  00103A  C0EC  F092         	movff	_log_count_can_w_lab,?_printf+4
  7347  00103E  C0ED  F093         	movff	_log_count_can_w_lab+1,?_printf+5
  7348  001042  ECB8  F008         	call	_printf	;wreg free
  7349                           
  7350                           ;UI.c: 194: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7351  001046  0E00               	movlw	0
  7352  001048  0100               	movlb	0	; () banked
  7353  00104A  6FD2               	movwf	UI@i_442& (0+255),b
  7354  00104C                     l7649:
  7355                           
  7356                           ; BSR set to: 0
  7357  00104C  0E63               	movlw	99
  7358  00104E  0100               	movlb	0	; () banked
  7359  001050  65D2               	cpfsgt	UI@i_442& (0+255),b
  7360  001052  D001               	goto	l7653
  7361  001054  D00C               	goto	l7657
  7362  001056                     l7653:
  7363                           
  7364                           ; BSR set to: 0
  7365  001056  0E68               	movlw	104
  7366  001058  0100               	movlb	0	; () banked
  7367  00105A  6FC4               	movwf	??_UI& (0+255),b
  7368  00105C  0EE4               	movlw	228
  7369  00105E                     u7407:
  7370  00105E  2EE8               	decfsz	wreg,f,c
  7371  001060  D7FE               	bra	u7407
  7372  001062  2FC4               	decfsz	??_UI& (0+255),f,b
  7373  001064  D7FC               	bra	u7407
  7374  001066  F000               	nop	
  7375  001068  0100               	movlb	0	; () banked
  7376  00106A  2BD2               	incf	UI@i_442& (0+255),f,b
  7377  00106C  D7EF               	goto	l7649
  7378  00106E                     l7657:
  7379                           
  7380                           ; BSR set to: 0
  7381  00106E  0100               	movlb	0	; () banked
  7382  001070  51F6               	movf	_logstate& (0+255),w,b
  7383  001072  0100               	movlb	0	; () banked
  7384  001074  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7385  001076  B4D8               	btfsc	status,2,c
  7386  001078  0012               	return	
  7387                           
  7388                           ; BSR set to: 0
  7389                           ;UI.c: 195: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7390                           
  7391                           ; BSR set to: 0
  7392                           
  7393                           ; BSR set to: 0
  7394  00107A  0E00               	movlw	0
  7395  00107C  0100               	movlb	0	; () banked
  7396  00107E  6FD3               	movwf	UI@i_443& (0+255),b
  7397  001080                     l7663:
  7398                           
  7399                           ; BSR set to: 0
  7400  001080  0E63               	movlw	99
  7401  001082  0100               	movlb	0	; () banked
  7402  001084  65D3               	cpfsgt	UI@i_443& (0+255),b
  7403  001086  D001               	goto	l7667
  7404  001088  D00C               	goto	l7671
  7405  00108A                     l7667:
  7406                           
  7407                           ; BSR set to: 0
  7408  00108A  0E68               	movlw	104
  7409  00108C  0100               	movlb	0	; () banked
  7410  00108E  6FC4               	movwf	??_UI& (0+255),b
  7411  001090  0EE4               	movlw	228
  7412  001092                     u7417:
  7413  001092  2EE8               	decfsz	wreg,f,c
  7414  001094  D7FE               	bra	u7417
  7415  001096  2FC4               	decfsz	??_UI& (0+255),f,b
  7416  001098  D7FC               	bra	u7417
  7417  00109A  F000               	nop	
  7418  00109C  0100               	movlb	0	; () banked
  7419  00109E  2BD3               	incf	UI@i_443& (0+255),f,b
  7420  0010A0  D7EF               	goto	l7663
  7421  0010A2                     l7671:
  7422                           
  7423                           ; BSR set to: 0
  7424  0010A2  0100               	movlb	0	; () banked
  7425  0010A4  51F6               	movf	_logstate& (0+255),w,b
  7426  0010A6  0100               	movlb	0	; () banked
  7427  0010A8  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7428  0010AA  B4D8               	btfsc	status,2,c
  7429  0010AC  0012               	return	
  7430                           
  7431                           ; BSR set to: 0
  7432                           ;UI.c: 197: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7433                           
  7434                           ; BSR set to: 0
  7435                           
  7436                           ; BSR set to: 0
  7437  0010AE  0E01               	movlw	1
  7438  0010B0  ECC1  F023         	call	_lcdInst
  7439  0010B4  0E68               	movlw	104
  7440  0010B6  0100               	movlb	0	; () banked
  7441  0010B8  6FC4               	movwf	??_UI& (0+255),b
  7442  0010BA  0EE4               	movlw	228
  7443  0010BC                     u7427:
  7444  0010BC  2EE8               	decfsz	wreg,f,c
  7445  0010BE  D7FE               	bra	u7427
  7446  0010C0  2FC4               	decfsz	??_UI& (0+255),f,b
  7447  0010C2  D7FC               	bra	u7427
  7448  0010C4  F000               	nop	
  7449                           
  7450                           ;UI.c: 198: lcdInst(0b10000000);;
  7451  0010C6  0E80               	movlw	128
  7452  0010C8  ECC1  F023         	call	_lcdInst
  7453                           
  7454                           ;UI.c: 199: printf("-- TOTAL CANS --");
  7455  0010CC  0E74               	movlw	low STR_28
  7456  0010CE  0100               	movlb	0	; () banked
  7457  0010D0  6F8E               	movwf	printf@f& (0+255),b
  7458  0010D2  0EFD               	movlw	high STR_28
  7459  0010D4  0100               	movlb	0	; () banked
  7460  0010D6  6F8F               	movwf	(printf@f+1)& (0+255),b
  7461  0010D8  ECB8  F008         	call	_printf	;wreg free
  7462                           
  7463                           ;UI.c: 200: lcdInst(0b11000000);;
  7464  0010DC  0EC0               	movlw	192
  7465  0010DE  ECC1  F023         	call	_lcdInst
  7466                           
  7467                           ;UI.c: 201: printf("%d", log_count_total);
  7468  0010E2  0E6D               	movlw	low (STR_27+16)
  7469  0010E4  0100               	movlb	0	; () banked
  7470  0010E6  6F8E               	movwf	printf@f& (0+255),b
  7471  0010E8  0EFB               	movlw	high (STR_27+16)
  7472  0010EA  0100               	movlb	0	; () banked
  7473  0010EC  6F8F               	movwf	(printf@f+1)& (0+255),b
  7474  0010EE  C0F2  F090         	movff	_log_count_total,?_printf+2
  7475  0010F2  C0F3  F091         	movff	_log_count_total+1,?_printf+3
  7476  0010F6  ECB8  F008         	call	_printf	;wreg free
  7477                           
  7478                           ;UI.c: 203: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7479  0010FA  0E00               	movlw	0
  7480  0010FC  0100               	movlb	0	; () banked
  7481  0010FE  6FD4               	movwf	UI@i_446& (0+255),b
  7482  001100                     l7689:
  7483                           
  7484                           ; BSR set to: 0
  7485  001100  0E63               	movlw	99
  7486  001102  0100               	movlb	0	; () banked
  7487  001104  65D4               	cpfsgt	UI@i_446& (0+255),b
  7488  001106  D001               	goto	l7693
  7489  001108  D00C               	goto	l7697
  7490  00110A                     l7693:
  7491                           
  7492                           ; BSR set to: 0
  7493  00110A  0E68               	movlw	104
  7494  00110C  0100               	movlb	0	; () banked
  7495  00110E  6FC4               	movwf	??_UI& (0+255),b
  7496  001110  0EE4               	movlw	228
  7497  001112                     u7437:
  7498  001112  2EE8               	decfsz	wreg,f,c
  7499  001114  D7FE               	bra	u7437
  7500  001116  2FC4               	decfsz	??_UI& (0+255),f,b
  7501  001118  D7FC               	bra	u7437
  7502  00111A  F000               	nop	
  7503  00111C  0100               	movlb	0	; () banked
  7504  00111E  2BD4               	incf	UI@i_446& (0+255),f,b
  7505  001120  D7EF               	goto	l7689
  7506  001122                     l7697:
  7507                           
  7508                           ; BSR set to: 0
  7509  001122  0100               	movlb	0	; () banked
  7510  001124  51F6               	movf	_logstate& (0+255),w,b
  7511  001126  0100               	movlb	0	; () banked
  7512  001128  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7513  00112A  B4D8               	btfsc	status,2,c
  7514  00112C  0012               	return	
  7515                           
  7516                           ; BSR set to: 0
  7517                           ;UI.c: 204: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7518                           
  7519                           ; BSR set to: 0
  7520                           
  7521                           ; BSR set to: 0
  7522  00112E  0E00               	movlw	0
  7523  001130  0100               	movlb	0	; () banked
  7524  001132  6FD5               	movwf	UI@i_447& (0+255),b
  7525  001134                     l7703:
  7526                           
  7527                           ; BSR set to: 0
  7528  001134  0E63               	movlw	99
  7529  001136  0100               	movlb	0	; () banked
  7530  001138  65D5               	cpfsgt	UI@i_447& (0+255),b
  7531  00113A  D001               	goto	l7707
  7532  00113C  D00C               	goto	l7711
  7533  00113E                     l7707:
  7534                           
  7535                           ; BSR set to: 0
  7536  00113E  0E68               	movlw	104
  7537  001140  0100               	movlb	0	; () banked
  7538  001142  6FC4               	movwf	??_UI& (0+255),b
  7539  001144  0EE4               	movlw	228
  7540  001146                     u7447:
  7541  001146  2EE8               	decfsz	wreg,f,c
  7542  001148  D7FE               	bra	u7447
  7543  00114A  2FC4               	decfsz	??_UI& (0+255),f,b
  7544  00114C  D7FC               	bra	u7447
  7545  00114E  F000               	nop	
  7546  001150  0100               	movlb	0	; () banked
  7547  001152  2BD5               	incf	UI@i_447& (0+255),f,b
  7548  001154  D7EF               	goto	l7703
  7549  001156                     l7711:
  7550                           
  7551                           ; BSR set to: 0
  7552  001156  0100               	movlb	0	; () banked
  7553  001158  51F6               	movf	_logstate& (0+255),w,b
  7554  00115A  0100               	movlb	0	; () banked
  7555  00115C  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7556  00115E  B4D8               	btfsc	status,2,c
  7557  001160  0012               	return	
  7558  001162                     l7715:
  7559  001162  0100               	movlb	0	; () banked
  7560  001164  51F6               	movf	_logstate& (0+255),w,b
  7561  001166  0100               	movlb	0	; () banked
  7562  001168  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7563  00116A  B4D8               	btfsc	status,2,c
  7564  00116C  0012               	return	
  7565  00116E  D44A               	goto	l7411
  7566  001170                     __end_of_UI:
  7567                           	opt stack 0
  7568                           tblptru	equ	0xFF8
  7569                           tblptrh	equ	0xFF7
  7570                           tblptrl	equ	0xFF6
  7571                           tablat	equ	0xFF5
  7572                           prodh	equ	0xFF4
  7573                           prodl	equ	0xFF3
  7574                           intcon	equ	0xFF2
  7575                           intcon2	equ	0xFF1
  7576                           intcon3	equ	0xFF0
  7577                           postinc0	equ	0xFEE
  7578                           wreg	equ	0xFE8
  7579                           postdec1	equ	0xFE5
  7580                           fsr1l	equ	0xFE1
  7581                           indf2	equ	0xFDF
  7582                           postinc2	equ	0xFDE
  7583                           postdec2	equ	0xFDD
  7584                           fsr2h	equ	0xFDA
  7585                           fsr2l	equ	0xFD9
  7586                           status	equ	0xFD8
  7587                           
  7588 ;; *************** function _printRTC *****************
  7589 ;; Defined at:
  7590 ;;		line 63 in file "RTC.c"
  7591 ;; Parameters:    Size  Location     Type
  7592 ;;		None
  7593 ;; Auto vars:     Size  Location     Type
  7594 ;;  i               2   66[BANK0 ] int 
  7595 ;;  INT_time       14   46[BANK0 ] int [7]
  7596 ;;  month           4   62[BANK0 ] unsigned char [4]
  7597 ;;  RTC_month       2   60[BANK0 ] int 
  7598 ;; Return value:  Size  Location     Type
  7599 ;;                  1    wreg      void 
  7600 ;; Registers used:
  7601 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7602 ;; Tracked objects:
  7603 ;;		On entry : 0/0
  7604 ;;		On exit  : 0/0
  7605 ;;		Unchanged: 0/0
  7606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7607 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7608 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7609 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7610 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7611 ;;Total ram usage:       25 bytes
  7612 ;; Hardware stack levels used:    1
  7613 ;; Hardware stack levels required when called:   10
  7614 ;; This function calls:
  7615 ;;		_getRTC
  7616 ;;		_lcdInst
  7617 ;;		_printf
  7618 ;;		_strcpy
  7619 ;; This function is called by:
  7620 ;;		_UI
  7621 ;;		_change_state_to_menu_start
  7622 ;; This function uses a non-reentrant model
  7623 ;;
  7624                           
  7625                           	psect	text23
  7626  001F04                     __ptext23:
  7627                           	opt stack 0
  7628  001F04                     _printRTC:
  7629                           	opt stack 18
  7630                           
  7631                           ;RTC.c: 64: getRTC();
  7632                           
  7633                           ; BSR set to: 0
  7634                           ;incstack = 0
  7635  001F04  EC87  F01D         	call	_getRTC	;wreg free
  7636                           
  7637                           ;RTC.c: 65: char month[] = "MMM";
  7638  001F08  C133  F0BE         	movff	printRTC@F3214,printRTC@month
  7639  001F0C  C134  F0BF         	movff	printRTC@F3214+1,printRTC@month+1
  7640  001F10  C135  F0C0         	movff	printRTC@F3214+2,printRTC@month+2
  7641  001F14  C136  F0C1         	movff	printRTC@F3214+3,printRTC@month+3
  7642                           
  7643                           ;RTC.c: 66: int INT_time[7];
  7644                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
  7645  001F18  0E00               	movlw	0
  7646  001F1A  0100               	movlb	0	; () banked
  7647  001F1C  6FC3               	movwf	(printRTC@i+1)& (0+255),b
  7648  001F1E  0E00               	movlw	0
  7649  001F20  6FC2               	movwf	printRTC@i& (0+255),b
  7650                           
  7651                           ; BSR set to: 0
  7652  001F22  0100               	movlb	0	; () banked
  7653  001F24  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  7654  001F26  D008               	goto	l5817
  7655  001F28  0100               	movlb	0	; () banked
  7656  001F2A  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  7657  001F2C  E146               	bnz	l595
  7658  001F2E  0E07               	movlw	7
  7659  001F30  0100               	movlb	0	; () banked
  7660  001F32  5DC2               	subwf	printRTC@i& (0+255),w,b
  7661  001F34  B0D8               	btfsc	status,0,c
  7662  001F36  D041               	goto	l595
  7663  001F38                     l5817:
  7664                           
  7665                           ; BSR set to: 0
  7666                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  7667  001F38  0E24               	movlw	low _time
  7668  001F3A  0100               	movlb	0	; () banked
  7669  001F3C  25C2               	addwf	printRTC@i& (0+255),w,b
  7670  001F3E  6ED9               	movwf	fsr2l,c
  7671  001F40  0E01               	movlw	high _time
  7672  001F42  0100               	movlb	0	; () banked
  7673  001F44  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  7674  001F46  6EDA               	movwf	fsr2h,c
  7675  001F48  50DF               	movf	indf2,w,c
  7676  001F4A  0100               	movlb	0	; () banked
  7677  001F4C  6FAB               	movwf	??_printRTC& (0+255),b
  7678  001F4E  0100               	movlb	0	; () banked
  7679  001F50  3BAB               	swapf	??_printRTC& (0+255),f,b
  7680  001F52  0E0F               	movlw	15
  7681  001F54  17AB               	andwf	??_printRTC& (0+255),f,b
  7682  001F56  0E0F               	movlw	15
  7683  001F58  0100               	movlb	0	; () banked
  7684  001F5A  17AB               	andwf	??_printRTC& (0+255),f,b
  7685  001F5C  0100               	movlb	0	; () banked
  7686  001F5E  51AB               	movf	??_printRTC& (0+255),w,b
  7687  001F60  0D0A               	mullw	10
  7688  001F62  0E24               	movlw	low _time
  7689  001F64  0100               	movlb	0	; () banked
  7690  001F66  25C2               	addwf	printRTC@i& (0+255),w,b
  7691  001F68  6ED9               	movwf	fsr2l,c
  7692  001F6A  0E01               	movlw	high _time
  7693  001F6C  0100               	movlb	0	; () banked
  7694  001F6E  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  7695  001F70  6EDA               	movwf	fsr2h,c
  7696  001F72  50DF               	movf	indf2,w,c
  7697  001F74  0B0F               	andlw	15
  7698  001F76  0100               	movlb	0	; () banked
  7699  001F78  6FAC               	movwf	(??_printRTC+1)& (0+255),b
  7700  001F7A  6BAD               	clrf	(??_printRTC+2)& (0+255),b
  7701  001F7C  50F3               	movf	prodl,w,c
  7702  001F7E  0100               	movlb	0	; () banked
  7703  001F80  27AC               	addwf	(??_printRTC+1)& (0+255),f,b
  7704  001F82  50F4               	movf	prodh,w,c
  7705  001F84  0100               	movlb	0	; () banked
  7706  001F86  23AD               	addwfc	(??_printRTC+2)& (0+255),f,b
  7707  001F88  90D8               	bcf	status,0,c
  7708  001F8A  0100               	movlb	0	; () banked
  7709  001F8C  35C2               	rlcf	printRTC@i& (0+255),w,b
  7710  001F8E  6ED9               	movwf	fsr2l,c
  7711  001F90  0100               	movlb	0	; () banked
  7712  001F92  35C3               	rlcf	(printRTC@i+1)& (0+255),w,b
  7713  001F94  6EDA               	movwf	fsr2h,c
  7714  001F96  0EAE               	movlw	low printRTC@INT_time
  7715  001F98  26D9               	addwf	fsr2l,f,c
  7716  001F9A  0E00               	movlw	high printRTC@INT_time
  7717  001F9C  22DA               	addwfc	fsr2h,f,c
  7718  001F9E  C0AC  FFDE         	movff	??_printRTC+1,postinc2
  7719  001FA2  C0AD  FFDD         	movff	??_printRTC+2,postdec2
  7720                           
  7721                           ; BSR set to: 0
  7722  001FA6  0100               	movlb	0	; () banked
  7723  001FA8  4BC2               	infsnz	printRTC@i& (0+255),f,b
  7724  001FAA  2BC3               	incf	(printRTC@i+1)& (0+255),f,b
  7725                           
  7726                           ; BSR set to: 0
  7727  001FAC  0100               	movlb	0	; () banked
  7728  001FAE  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  7729  001FB0  D7C3               	goto	l5817
  7730  001FB2  0100               	movlb	0	; () banked
  7731  001FB4  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  7732  001FB6  E101               	bnz	u4500
  7733  001FB8  D7BA               	goto	L6
  7734  001FBA                     u4500:
  7735  001FBA                     l595:
  7736                           
  7737                           ; BSR set to: 0
  7738                           ;RTC.c: 69: }
  7739                           ;RTC.c: 70: int RTC_month = INT_time[5];
  7740  001FBA  C0B8  F0BC         	movff	printRTC@INT_time+10,printRTC@RTC_month
  7741  001FBE  C0B9  F0BD         	movff	printRTC@INT_time+11,printRTC@RTC_month+1
  7742                           
  7743                           ;RTC.c: 71: switch(RTC_month){
  7744  001FC2  D0B4               	goto	l5849
  7745  001FC4                     l5823:
  7746                           
  7747                           ; BSR set to: 0
  7748                           ;RTC.c: 73: strcpy(month, "JAN");
  7749  001FC4  0EBE               	movlw	low printRTC@month
  7750  001FC6  0100               	movlb	0	; () banked
  7751  001FC8  6F80               	movwf	strcpy@to& (0+255),b
  7752  001FCA  0E00               	movlw	high printRTC@month
  7753  001FCC  0100               	movlb	0	; () banked
  7754  001FCE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7755  001FD0  0EDB               	movlw	low STR_8
  7756  001FD2  0100               	movlb	0	; () banked
  7757  001FD4  6F82               	movwf	strcpy@from& (0+255),b
  7758  001FD6  0EFF               	movlw	high STR_8
  7759  001FD8  0100               	movlb	0	; () banked
  7760  001FDA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7761  001FDC  EC4B  F021         	call	_strcpy	;wreg free
  7762                           
  7763                           ;RTC.c: 74: break;
  7764  001FE0  D0D4               	goto	l5851
  7765  001FE2                     l5825:
  7766                           
  7767                           ;RTC.c: 76: strcpy(month, "FEB");
  7768  001FE2  0EBE               	movlw	low printRTC@month
  7769  001FE4  0100               	movlb	0	; () banked
  7770  001FE6  6F80               	movwf	strcpy@to& (0+255),b
  7771  001FE8  0E00               	movlw	high printRTC@month
  7772  001FEA  0100               	movlb	0	; () banked
  7773  001FEC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7774  001FEE  0ECB               	movlw	low STR_9
  7775  001FF0  0100               	movlb	0	; () banked
  7776  001FF2  6F82               	movwf	strcpy@from& (0+255),b
  7777  001FF4  0EFF               	movlw	high STR_9
  7778  001FF6  0100               	movlb	0	; () banked
  7779  001FF8  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7780  001FFA  EC4B  F021         	call	_strcpy	;wreg free
  7781                           
  7782                           ;RTC.c: 77: break;
  7783  001FFE  D0C5               	goto	l5851
  7784  002000                     l5827:
  7785                           
  7786                           ;RTC.c: 79: strcpy(month, "MAR");
  7787  002000  0EBE               	movlw	low printRTC@month
  7788  002002  0100               	movlb	0	; () banked
  7789  002004  6F80               	movwf	strcpy@to& (0+255),b
  7790  002006  0E00               	movlw	high printRTC@month
  7791  002008  0100               	movlb	0	; () banked
  7792  00200A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7793  00200C  0EE7               	movlw	low STR_10
  7794  00200E  0100               	movlb	0	; () banked
  7795  002010  6F82               	movwf	strcpy@from& (0+255),b
  7796  002012  0EFF               	movlw	high STR_10
  7797  002014  0100               	movlb	0	; () banked
  7798  002016  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7799  002018  EC4B  F021         	call	_strcpy	;wreg free
  7800                           
  7801                           ;RTC.c: 80: break;
  7802  00201C  D0B6               	goto	l5851
  7803  00201E                     l5829:
  7804                           
  7805                           ;RTC.c: 82: strcpy(month, "APR");
  7806  00201E  0EBE               	movlw	low printRTC@month
  7807  002020  0100               	movlb	0	; () banked
  7808  002022  6F80               	movwf	strcpy@to& (0+255),b
  7809  002024  0E00               	movlw	high printRTC@month
  7810  002026  0100               	movlb	0	; () banked
  7811  002028  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7812  00202A  0EEB               	movlw	low STR_11
  7813  00202C  0100               	movlb	0	; () banked
  7814  00202E  6F82               	movwf	strcpy@from& (0+255),b
  7815  002030  0EFF               	movlw	high STR_11
  7816  002032  0100               	movlb	0	; () banked
  7817  002034  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7818  002036  EC4B  F021         	call	_strcpy	;wreg free
  7819                           
  7820                           ;RTC.c: 83: break;
  7821  00203A  D0A7               	goto	l5851
  7822  00203C                     l5831:
  7823                           
  7824                           ;RTC.c: 85: strcpy(month, "MAY");
  7825  00203C  0EBE               	movlw	low printRTC@month
  7826  00203E  0100               	movlb	0	; () banked
  7827  002040  6F80               	movwf	strcpy@to& (0+255),b
  7828  002042  0E00               	movlw	high printRTC@month
  7829  002044  0100               	movlb	0	; () banked
  7830  002046  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7831  002048  0EFB               	movlw	low STR_12
  7832  00204A  0100               	movlb	0	; () banked
  7833  00204C  6F82               	movwf	strcpy@from& (0+255),b
  7834  00204E  0EFF               	movlw	high STR_12
  7835  002050  0100               	movlb	0	; () banked
  7836  002052  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7837  002054  EC4B  F021         	call	_strcpy	;wreg free
  7838                           
  7839                           ;RTC.c: 86: break;
  7840  002058  D098               	goto	l5851
  7841  00205A                     l5833:
  7842                           
  7843                           ;RTC.c: 88: strcpy(month, "JUN");
  7844  00205A  0EBE               	movlw	low printRTC@month
  7845  00205C  0100               	movlb	0	; () banked
  7846  00205E  6F80               	movwf	strcpy@to& (0+255),b
  7847  002060  0E00               	movlw	high printRTC@month
  7848  002062  0100               	movlb	0	; () banked
  7849  002064  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7850  002066  0EDF               	movlw	low STR_13
  7851  002068  0100               	movlb	0	; () banked
  7852  00206A  6F82               	movwf	strcpy@from& (0+255),b
  7853  00206C  0EFF               	movlw	high STR_13
  7854  00206E  0100               	movlb	0	; () banked
  7855  002070  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7856  002072  EC4B  F021         	call	_strcpy	;wreg free
  7857                           
  7858                           ;RTC.c: 89: break;
  7859  002076  D089               	goto	l5851
  7860  002078                     l5835:
  7861                           
  7862                           ;RTC.c: 91: strcpy(month, "JUL");
  7863  002078  0EBE               	movlw	low printRTC@month
  7864  00207A  0100               	movlb	0	; () banked
  7865  00207C  6F80               	movwf	strcpy@to& (0+255),b
  7866  00207E  0E00               	movlw	high printRTC@month
  7867  002080  0100               	movlb	0	; () banked
  7868  002082  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7869  002084  0ED7               	movlw	low STR_14
  7870  002086  0100               	movlb	0	; () banked
  7871  002088  6F82               	movwf	strcpy@from& (0+255),b
  7872  00208A  0EFF               	movlw	high STR_14
  7873  00208C  0100               	movlb	0	; () banked
  7874  00208E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7875  002090  EC4B  F021         	call	_strcpy	;wreg free
  7876                           
  7877                           ;RTC.c: 92: break;
  7878  002094  D07A               	goto	l5851
  7879  002096                     l5837:
  7880                           
  7881                           ;RTC.c: 94: strcpy(month, "AUG");
  7882  002096  0EBE               	movlw	low printRTC@month
  7883  002098  0100               	movlb	0	; () banked
  7884  00209A  6F80               	movwf	strcpy@to& (0+255),b
  7885  00209C  0E00               	movlw	high printRTC@month
  7886  00209E  0100               	movlb	0	; () banked
  7887  0020A0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7888  0020A2  0ED3               	movlw	low STR_15
  7889  0020A4  0100               	movlb	0	; () banked
  7890  0020A6  6F82               	movwf	strcpy@from& (0+255),b
  7891  0020A8  0EFF               	movlw	high STR_15
  7892  0020AA  0100               	movlb	0	; () banked
  7893  0020AC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7894  0020AE  EC4B  F021         	call	_strcpy	;wreg free
  7895                           
  7896                           ;RTC.c: 95: break;
  7897  0020B2  D06B               	goto	l5851
  7898  0020B4                     l5839:
  7899                           
  7900                           ;RTC.c: 97: strcpy(month, "SEP");
  7901  0020B4  0EBE               	movlw	low printRTC@month
  7902  0020B6  0100               	movlb	0	; () banked
  7903  0020B8  6F80               	movwf	strcpy@to& (0+255),b
  7904  0020BA  0E00               	movlw	high printRTC@month
  7905  0020BC  0100               	movlb	0	; () banked
  7906  0020BE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7907  0020C0  0EE3               	movlw	low STR_16
  7908  0020C2  0100               	movlb	0	; () banked
  7909  0020C4  6F82               	movwf	strcpy@from& (0+255),b
  7910  0020C6  0EFF               	movlw	high STR_16
  7911  0020C8  0100               	movlb	0	; () banked
  7912  0020CA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7913  0020CC  EC4B  F021         	call	_strcpy	;wreg free
  7914                           
  7915                           ;RTC.c: 98: break;
  7916  0020D0  D05C               	goto	l5851
  7917  0020D2                     l5841:
  7918                           
  7919                           ;RTC.c: 100: strcpy(month, "OCT");
  7920  0020D2  0EBE               	movlw	low printRTC@month
  7921  0020D4  0100               	movlb	0	; () banked
  7922  0020D6  6F80               	movwf	strcpy@to& (0+255),b
  7923  0020D8  0E00               	movlw	high printRTC@month
  7924  0020DA  0100               	movlb	0	; () banked
  7925  0020DC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7926  0020DE  0EF3               	movlw	low STR_17
  7927  0020E0  0100               	movlb	0	; () banked
  7928  0020E2  6F82               	movwf	strcpy@from& (0+255),b
  7929  0020E4  0EFF               	movlw	high STR_17
  7930  0020E6  0100               	movlb	0	; () banked
  7931  0020E8  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7932  0020EA  EC4B  F021         	call	_strcpy	;wreg free
  7933                           
  7934                           ;RTC.c: 101: break;
  7935  0020EE  D04D               	goto	l5851
  7936  0020F0                     l5843:
  7937                           
  7938                           ;RTC.c: 103: strcpy(month, "NOV");
  7939  0020F0  0EBE               	movlw	low printRTC@month
  7940  0020F2  0100               	movlb	0	; () banked
  7941  0020F4  6F80               	movwf	strcpy@to& (0+255),b
  7942  0020F6  0E00               	movlw	high printRTC@month
  7943  0020F8  0100               	movlb	0	; () banked
  7944  0020FA  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7945  0020FC  0EF7               	movlw	low STR_18
  7946  0020FE  0100               	movlb	0	; () banked
  7947  002100  6F82               	movwf	strcpy@from& (0+255),b
  7948  002102  0EFF               	movlw	high STR_18
  7949  002104  0100               	movlb	0	; () banked
  7950  002106  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7951  002108  EC4B  F021         	call	_strcpy	;wreg free
  7952                           
  7953                           ;RTC.c: 104: break;
  7954  00210C  D03E               	goto	l5851
  7955  00210E                     l5845:
  7956                           
  7957                           ;RTC.c: 106: strcpy(month, "DEC");
  7958  00210E  0EBE               	movlw	low printRTC@month
  7959  002110  0100               	movlb	0	; () banked
  7960  002112  6F80               	movwf	strcpy@to& (0+255),b
  7961  002114  0E00               	movlw	high printRTC@month
  7962  002116  0100               	movlb	0	; () banked
  7963  002118  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7964  00211A  0ECF               	movlw	low STR_19
  7965  00211C  0100               	movlb	0	; () banked
  7966  00211E  6F82               	movwf	strcpy@from& (0+255),b
  7967  002120  0EFF               	movlw	high STR_19
  7968  002122  0100               	movlb	0	; () banked
  7969  002124  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7970  002126  EC4B  F021         	call	_strcpy	;wreg free
  7971                           
  7972                           ;RTC.c: 108: }
  7973                           
  7974                           ;RTC.c: 107: break;
  7975  00212A  D02F               	goto	l5851
  7976  00212C                     l5849:
  7977  00212C  C0BC  F0AB         	movff	printRTC@RTC_month,??_printRTC
  7978  002130  C0BD  F0AC         	movff	printRTC@RTC_month+1,??_printRTC+1
  7979                           
  7980                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7981                           ; Switch size 1, requested type "space"
  7982                           ; Number of cases is 1, Range of values is 0 to 0
  7983                           ; switch strategies available:
  7984                           ; Name         Instructions Cycles
  7985                           ; simple_byte            4     3 (average)
  7986                           ;	Chosen strategy is simple_byte
  7987  002134  0100               	movlb	0	; () banked
  7988  002136  51AC               	movf	(??_printRTC+1)& (0+255),w,b
  7989  002138  0A00               	xorlw	0	; case 0
  7990  00213A  A4D8               	btfss	status,2,c
  7991  00213C  D026               	goto	l5851
  7992                           
  7993                           ; BSR set to: 0
  7994                           ; Switch size 1, requested type "space"
  7995                           ; Number of cases is 12, Range of values is 1 to 12
  7996                           ; switch strategies available:
  7997                           ; Name         Instructions Cycles
  7998                           ; simple_byte           37    19 (average)
  7999                           ;	Chosen strategy is simple_byte
  8000  00213E  0100               	movlb	0	; () banked
  8001  002140  51AB               	movf	??_printRTC& (0+255),w,b
  8002  002142  0A01               	xorlw	1	; case 1
  8003  002144  B4D8               	btfsc	status,2,c
  8004  002146  D73E               	goto	l5823
  8005  002148  0A03               	xorlw	3	; case 2
  8006  00214A  B4D8               	btfsc	status,2,c
  8007  00214C  D74A               	goto	l5825
  8008  00214E  0A01               	xorlw	1	; case 3
  8009  002150  B4D8               	btfsc	status,2,c
  8010  002152  D756               	goto	l5827
  8011  002154  0A07               	xorlw	7	; case 4
  8012  002156  B4D8               	btfsc	status,2,c
  8013  002158  D762               	goto	l5829
  8014  00215A  0A01               	xorlw	1	; case 5
  8015  00215C  B4D8               	btfsc	status,2,c
  8016  00215E  D76E               	goto	l5831
  8017  002160  0A03               	xorlw	3	; case 6
  8018  002162  B4D8               	btfsc	status,2,c
  8019  002164  D77A               	goto	l5833
  8020  002166  0A01               	xorlw	1	; case 7
  8021  002168  B4D8               	btfsc	status,2,c
  8022  00216A  D786               	goto	l5835
  8023  00216C  0A0F               	xorlw	15	; case 8
  8024  00216E  B4D8               	btfsc	status,2,c
  8025  002170  D792               	goto	l5837
  8026  002172  0A01               	xorlw	1	; case 9
  8027  002174  B4D8               	btfsc	status,2,c
  8028  002176  D79E               	goto	l5839
  8029  002178  0A03               	xorlw	3	; case 10
  8030  00217A  B4D8               	btfsc	status,2,c
  8031  00217C  D7AA               	goto	l5841
  8032  00217E  0A01               	xorlw	1	; case 11
  8033  002180  B4D8               	btfsc	status,2,c
  8034  002182  D7B6               	goto	l5843
  8035  002184  0A07               	xorlw	7	; case 12
  8036  002186  B4D8               	btfsc	status,2,c
  8037  002188  D7C2               	goto	l5845
  8038  00218A                     l5851:
  8039                           
  8040                           ;RTC.c: 109: lcdInst(0b10000000);;
  8041  00218A  0E80               	movlw	128
  8042  00218C  ECC1  F023         	call	_lcdInst
  8043                           
  8044                           ;RTC.c: 110: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
  8045  002190  0E30               	movlw	low STR_21
  8046  002192  0100               	movlb	0	; () banked
  8047  002194  6F8E               	movwf	printf@f& (0+255),b
  8048  002196  0EFB               	movlw	high STR_21
  8049  002198  0100               	movlb	0	; () banked
  8050  00219A  6F8F               	movwf	(printf@f+1)& (0+255),b
  8051  00219C  C0B6  F090         	movff	printRTC@INT_time+8,?_printf+2
  8052  0021A0  C0B7  F091         	movff	printRTC@INT_time+9,?_printf+3
  8053  0021A4  0EBE               	movlw	low printRTC@month
  8054  0021A6  0100               	movlb	0	; () banked
  8055  0021A8  6F92               	movwf	(?_printf+4)& (0+255),b
  8056  0021AA  0E00               	movlw	high printRTC@month
  8057  0021AC  0100               	movlb	0	; () banked
  8058  0021AE  6F93               	movwf	(?_printf+5)& (0+255),b
  8059  0021B0  C0B2  F094         	movff	printRTC@INT_time+4,?_printf+6
  8060  0021B4  C0B3  F095         	movff	printRTC@INT_time+5,?_printf+7
  8061  0021B8  C0B0  F096         	movff	printRTC@INT_time+2,?_printf+8
  8062  0021BC  C0B1  F097         	movff	printRTC@INT_time+3,?_printf+9
  8063  0021C0  C0AE  F098         	movff	printRTC@INT_time,?_printf+10
  8064  0021C4  C0AF  F099         	movff	printRTC@INT_time+1,?_printf+11
  8065  0021C8  ECB8  F008         	call	_printf	;wreg free
  8066  0021CC  0012               	return		;funcret
  8067  0021CE                     __end_of_printRTC:
  8068                           	opt stack 0
  8069                           tblptru	equ	0xFF8
  8070                           tblptrh	equ	0xFF7
  8071                           tblptrl	equ	0xFF6
  8072                           tablat	equ	0xFF5
  8073                           prodh	equ	0xFF4
  8074                           prodl	equ	0xFF3
  8075                           intcon	equ	0xFF2
  8076                           intcon2	equ	0xFF1
  8077                           intcon3	equ	0xFF0
  8078                           postinc0	equ	0xFEE
  8079                           wreg	equ	0xFE8
  8080                           postdec1	equ	0xFE5
  8081                           fsr1l	equ	0xFE1
  8082                           indf2	equ	0xFDF
  8083                           postinc2	equ	0xFDE
  8084                           postdec2	equ	0xFDD
  8085                           fsr2h	equ	0xFDA
  8086                           fsr2l	equ	0xFD9
  8087                           status	equ	0xFD8
  8088                           
  8089 ;; *************** function _strcpy *****************
  8090 ;; Defined at:
  8091 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
  8092 ;; Parameters:    Size  Location     Type
  8093 ;;  to              2    0[BANK0 ] PTR unsigned char 
  8094 ;;		 -> printRTC@month(4), UI@month(4), 
  8095 ;;  from            2    2[BANK0 ] PTR const unsigned char 
  8096 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
  8097 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
  8098 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
  8099 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
  8100 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
  8101 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
  8102 ;;		 -> STR_8(4), 
  8103 ;; Auto vars:     Size  Location     Type
  8104 ;;  cp              2    4[BANK0 ] PTR unsigned char 
  8105 ;;		 -> printRTC@month(4), UI@month(4), 
  8106 ;; Return value:  Size  Location     Type
  8107 ;;                  2    0[BANK0 ] PTR unsigned char 
  8108 ;; Registers used:
  8109 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  8110 ;; Tracked objects:
  8111 ;;		On entry : 0/0
  8112 ;;		On exit  : 0/0
  8113 ;;		Unchanged: 0/0
  8114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8115 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8116 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8117 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8118 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8119 ;;Total ram usage:        6 bytes
  8120 ;; Hardware stack levels used:    1
  8121 ;; Hardware stack levels required when called:    7
  8122 ;; This function calls:
  8123 ;;		Nothing
  8124 ;; This function is called by:
  8125 ;;		_UI
  8126 ;;		_printRTC
  8127 ;; This function uses a non-reentrant model
  8128 ;;
  8129                           
  8130                           	psect	text24
  8131  004296                     __ptext24:
  8132                           	opt stack 0
  8133  004296                     _strcpy:
  8134                           	opt stack 20
  8135                           
  8136                           ;incstack = 0
  8137  004296  C080  F084         	movff	strcpy@to,strcpy@cp
  8138  00429A  C081  F085         	movff	strcpy@to+1,strcpy@cp+1
  8139  00429E  D006               	goto	l5555
  8140  0042A0                     l5553:
  8141  0042A0  0100               	movlb	0	; () banked
  8142  0042A2  4B84               	infsnz	strcpy@cp& (0+255),f,b
  8143  0042A4  2B85               	incf	(strcpy@cp+1)& (0+255),f,b
  8144  0042A6  0100               	movlb	0	; () banked
  8145  0042A8  4B82               	infsnz	strcpy@from& (0+255),f,b
  8146  0042AA  2B83               	incf	(strcpy@from+1)& (0+255),f,b
  8147  0042AC                     l5555:
  8148  0042AC  C082  FFF6         	movff	strcpy@from,tblptrl
  8149  0042B0  C083  FFF7         	movff	strcpy@from+1,tblptrh
  8150  0042B4                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  8151  0042B4  6AF8               	clrf	tblptru,c
  8152  0042B6                     	endif
  8153  0042B6                     	if	0	;tblptru may be non-zero
  8154  0042B6                     	endif
  8155  0042B6  C084  FFD9         	movff	strcpy@cp,fsr2l
  8156  0042BA  C085  FFDA         	movff	strcpy@cp+1,fsr2h
  8157  0042BE  0008               	tblrd		*
  8158  0042C0  CFF5 FFDF          	movff	tablat,indf2
  8159  0042C4  50DF               	movf	indf2,w,c
  8160  0042C6  B4D8               	btfsc	status,2,c
  8161  0042C8  0012               	return	
  8162  0042CA  D7EA               	goto	l5553
  8163  0042CC                     __end_of_strcpy:
  8164                           	opt stack 0
  8165                           tblptru	equ	0xFF8
  8166                           tblptrh	equ	0xFF7
  8167                           tblptrl	equ	0xFF6
  8168                           tablat	equ	0xFF5
  8169                           prodh	equ	0xFF4
  8170                           prodl	equ	0xFF3
  8171                           intcon	equ	0xFF2
  8172                           intcon2	equ	0xFF1
  8173                           intcon3	equ	0xFF0
  8174                           postinc0	equ	0xFEE
  8175                           wreg	equ	0xFE8
  8176                           postdec1	equ	0xFE5
  8177                           fsr1l	equ	0xFE1
  8178                           indf2	equ	0xFDF
  8179                           postinc2	equ	0xFDE
  8180                           postdec2	equ	0xFDD
  8181                           fsr2h	equ	0xFDA
  8182                           fsr2l	equ	0xFD9
  8183                           status	equ	0xFD8
  8184                           
  8185 ;; *************** function _getRTC *****************
  8186 ;; Defined at:
  8187 ;;		line 44 in file "RTC.c"
  8188 ;; Parameters:    Size  Location     Type
  8189 ;;		None
  8190 ;; Auto vars:     Size  Location     Type
  8191 ;;  i               2    3[BANK0 ] int 
  8192 ;; Return value:  Size  Location     Type
  8193 ;;                  1    wreg      void 
  8194 ;; Registers used:
  8195 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8196 ;; Tracked objects:
  8197 ;;		On entry : 0/0
  8198 ;;		On exit  : 0/0
  8199 ;;		Unchanged: 0/0
  8200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8201 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8202 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8203 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8204 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8205 ;;Total ram usage:        2 bytes
  8206 ;; Hardware stack levels used:    1
  8207 ;; Hardware stack levels required when called:    9
  8208 ;; This function calls:
  8209 ;;		_I2C_Master_Read
  8210 ;;		_I2C_Master_Start
  8211 ;;		_I2C_Master_Stop
  8212 ;;		_I2C_Master_Write
  8213 ;; This function is called by:
  8214 ;;		_printRTC
  8215 ;;		_initSortTimer
  8216 ;; This function uses a non-reentrant model
  8217 ;;
  8218                           
  8219                           	psect	text25
  8220  003B0E                     __ptext25:
  8221                           	opt stack 0
  8222  003B0E                     _getRTC:
  8223                           	opt stack 18
  8224                           
  8225                           ;RTC.c: 48: I2C_Master_Start();
  8226                           
  8227                           ;incstack = 0
  8228  003B0E  ECE7  F023         	call	_I2C_Master_Start	;wreg free
  8229                           
  8230                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
  8231  003B12  0E00               	movlw	0
  8232  003B14  0100               	movlb	0	; () banked
  8233  003B16  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8234  003B18  0ED0               	movlw	208
  8235  003B1A  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8236  003B1C  ECD5  F023         	call	_I2C_Master_Write	;wreg free
  8237                           
  8238                           ;RTC.c: 50: I2C_Master_Write(0x00);
  8239  003B20  0E00               	movlw	0
  8240  003B22  0100               	movlb	0	; () banked
  8241  003B24  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8242  003B26  0E00               	movlw	0
  8243  003B28  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8244  003B2A  ECD5  F023         	call	_I2C_Master_Write	;wreg free
  8245                           
  8246                           ;RTC.c: 51: I2C_Master_Stop();
  8247  003B2E  ECE3  F023         	call	_I2C_Master_Stop	;wreg free
  8248                           
  8249                           ;RTC.c: 54: I2C_Master_Start();
  8250  003B32  ECE7  F023         	call	_I2C_Master_Start	;wreg free
  8251                           
  8252                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
  8253  003B36  0E00               	movlw	0
  8254  003B38  0100               	movlb	0	; () banked
  8255  003B3A  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8256  003B3C  0ED1               	movlw	209
  8257  003B3E  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8258  003B40  ECD5  F023         	call	_I2C_Master_Write	;wreg free
  8259                           
  8260                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
  8261  003B44  0E00               	movlw	0
  8262  003B46  0100               	movlb	0	; () banked
  8263  003B48  6F84               	movwf	(getRTC@i+1)& (0+255),b
  8264  003B4A  0E00               	movlw	0
  8265  003B4C  6F83               	movwf	getRTC@i& (0+255),b
  8266  003B4E                     l5561:
  8267                           
  8268                           ; BSR set to: 0
  8269  003B4E  0100               	movlb	0	; () banked
  8270  003B50  BF84               	btfsc	(getRTC@i+1)& (0+255),7,b
  8271  003B52  D008               	goto	l5565
  8272  003B54  0100               	movlb	0	; () banked
  8273  003B56  5184               	movf	(getRTC@i+1)& (0+255),w,b
  8274  003B58  E115               	bnz	l5571
  8275  003B5A  0E06               	movlw	6
  8276  003B5C  0100               	movlb	0	; () banked
  8277  003B5E  5D83               	subwf	getRTC@i& (0+255),w,b
  8278  003B60  B0D8               	btfsc	status,0,c
  8279  003B62  D010               	goto	l5571
  8280  003B64                     l5565:
  8281                           
  8282                           ; BSR set to: 0
  8283                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
  8284  003B64  0E24               	movlw	low _time
  8285  003B66  0100               	movlb	0	; () banked
  8286  003B68  2583               	addwf	getRTC@i& (0+255),w,b
  8287  003B6A  6ED9               	movwf	fsr2l,c
  8288  003B6C  0E01               	movlw	high _time
  8289  003B6E  0100               	movlb	0	; () banked
  8290  003B70  2184               	addwfc	(getRTC@i+1)& (0+255),w,b
  8291  003B72  6EDA               	movwf	fsr2h,c
  8292  003B74  0E01               	movlw	1
  8293  003B76  EC72  F022         	call	_I2C_Master_Read
  8294  003B7A  6EDF               	movwf	indf2,c
  8295  003B7C  0100               	movlb	0	; () banked
  8296  003B7E  4B83               	infsnz	getRTC@i& (0+255),f,b
  8297  003B80  2B84               	incf	(getRTC@i+1)& (0+255),f,b
  8298  003B82  D7E5               	goto	l5561
  8299  003B84                     l5571:
  8300                           
  8301                           ; BSR set to: 0
  8302                           ;RTC.c: 58: }
  8303                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
  8304  003B84  0E00               	movlw	0
  8305  003B86  EC72  F022         	call	_I2C_Master_Read
  8306  003B8A  0101               	movlb	1	; () banked
  8307  003B8C  6F2A               	movwf	(_time+6)& (0+255),b
  8308                           
  8309                           ;RTC.c: 60: I2C_Master_Stop();
  8310  003B8E  ECE3  F023         	call	_I2C_Master_Stop	;wreg free
  8311  003B92  0012               	return		;funcret
  8312  003B94                     __end_of_getRTC:
  8313                           	opt stack 0
  8314                           tblptru	equ	0xFF8
  8315                           tblptrh	equ	0xFF7
  8316                           tblptrl	equ	0xFF6
  8317                           tablat	equ	0xFF5
  8318                           prodh	equ	0xFF4
  8319                           prodl	equ	0xFF3
  8320                           intcon	equ	0xFF2
  8321                           intcon2	equ	0xFF1
  8322                           intcon3	equ	0xFF0
  8323                           postinc0	equ	0xFEE
  8324                           wreg	equ	0xFE8
  8325                           postdec1	equ	0xFE5
  8326                           fsr1l	equ	0xFE1
  8327                           indf2	equ	0xFDF
  8328                           postinc2	equ	0xFDE
  8329                           postdec2	equ	0xFDD
  8330                           fsr2h	equ	0xFDA
  8331                           fsr2l	equ	0xFD9
  8332                           status	equ	0xFD8
  8333                           
  8334 ;; *************** function _I2C_Master_Write *****************
  8335 ;; Defined at:
  8336 ;;		line 49 in file "I2C.c"
  8337 ;; Parameters:    Size  Location     Type
  8338 ;;  d               2    1[BANK0 ] unsigned int 
  8339 ;; Auto vars:     Size  Location     Type
  8340 ;;		None
  8341 ;; Return value:  Size  Location     Type
  8342 ;;                  1    wreg      void 
  8343 ;; Registers used:
  8344 ;;		wreg, status,2, status,0, cstack
  8345 ;; Tracked objects:
  8346 ;;		On entry : 0/0
  8347 ;;		On exit  : 0/0
  8348 ;;		Unchanged: 0/0
  8349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8350 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8351 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8352 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8353 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8354 ;;Total ram usage:        2 bytes
  8355 ;; Hardware stack levels used:    1
  8356 ;; Hardware stack levels required when called:    8
  8357 ;; This function calls:
  8358 ;;		_I2C_Master_Wait
  8359 ;; This function is called by:
  8360 ;;		_loadRTC
  8361 ;;		_getRTC
  8362 ;; This function uses a non-reentrant model
  8363 ;;
  8364                           
  8365                           	psect	text26
  8366  0047AA                     __ptext26:
  8367                           	opt stack 0
  8368  0047AA                     _I2C_Master_Write:
  8369                           	opt stack 18
  8370                           
  8371                           ;I2C.c: 51: I2C_Master_Wait();
  8372                           
  8373                           ;incstack = 0
  8374  0047AA  ECA6  F023         	call	_I2C_Master_Wait	;wreg free
  8375                           
  8376                           ;I2C.c: 52: SSPBUF = d;
  8377  0047AE  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  8378  0047B2  0012               	return		;funcret
  8379  0047B4                     __end_of_I2C_Master_Write:
  8380                           	opt stack 0
  8381                           tblptru	equ	0xFF8
  8382                           tblptrh	equ	0xFF7
  8383                           tblptrl	equ	0xFF6
  8384                           tablat	equ	0xFF5
  8385                           prodh	equ	0xFF4
  8386                           prodl	equ	0xFF3
  8387                           intcon	equ	0xFF2
  8388                           intcon2	equ	0xFF1
  8389                           intcon3	equ	0xFF0
  8390                           postinc0	equ	0xFEE
  8391                           wreg	equ	0xFE8
  8392                           postdec1	equ	0xFE5
  8393                           fsr1l	equ	0xFE1
  8394                           indf2	equ	0xFDF
  8395                           postinc2	equ	0xFDE
  8396                           postdec2	equ	0xFDD
  8397                           fsr2h	equ	0xFDA
  8398                           fsr2l	equ	0xFD9
  8399                           status	equ	0xFD8
  8400                           
  8401 ;; *************** function _I2C_Master_Stop *****************
  8402 ;; Defined at:
  8403 ;;		line 43 in file "I2C.c"
  8404 ;; Parameters:    Size  Location     Type
  8405 ;;		None
  8406 ;; Auto vars:     Size  Location     Type
  8407 ;;		None
  8408 ;; Return value:  Size  Location     Type
  8409 ;;                  1    wreg      void 
  8410 ;; Registers used:
  8411 ;;		wreg, status,2, status,0, cstack
  8412 ;; Tracked objects:
  8413 ;;		On entry : 0/0
  8414 ;;		On exit  : 0/0
  8415 ;;		Unchanged: 0/0
  8416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8417 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8418 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8419 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8420 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8421 ;;Total ram usage:        0 bytes
  8422 ;; Hardware stack levels used:    1
  8423 ;; Hardware stack levels required when called:    8
  8424 ;; This function calls:
  8425 ;;		_I2C_Master_Wait
  8426 ;; This function is called by:
  8427 ;;		_loadRTC
  8428 ;;		_getRTC
  8429 ;; This function uses a non-reentrant model
  8430 ;;
  8431                           
  8432                           	psect	text27
  8433  0047C6                     __ptext27:
  8434                           	opt stack 0
  8435  0047C6                     _I2C_Master_Stop:
  8436                           	opt stack 18
  8437                           
  8438                           ;I2C.c: 45: I2C_Master_Wait();
  8439                           
  8440                           ;incstack = 0
  8441  0047C6  ECA6  F023         	call	_I2C_Master_Wait	;wreg free
  8442                           
  8443                           ;I2C.c: 46: PEN = 1;
  8444  0047CA  84C5               	bsf	4037,2,c	;volatile
  8445  0047CC  0012               	return		;funcret
  8446  0047CE                     __end_of_I2C_Master_Stop:
  8447                           	opt stack 0
  8448                           tblptru	equ	0xFF8
  8449                           tblptrh	equ	0xFF7
  8450                           tblptrl	equ	0xFF6
  8451                           tablat	equ	0xFF5
  8452                           prodh	equ	0xFF4
  8453                           prodl	equ	0xFF3
  8454                           intcon	equ	0xFF2
  8455                           intcon2	equ	0xFF1
  8456                           intcon3	equ	0xFF0
  8457                           postinc0	equ	0xFEE
  8458                           wreg	equ	0xFE8
  8459                           postdec1	equ	0xFE5
  8460                           fsr1l	equ	0xFE1
  8461                           indf2	equ	0xFDF
  8462                           postinc2	equ	0xFDE
  8463                           postdec2	equ	0xFDD
  8464                           fsr2h	equ	0xFDA
  8465                           fsr2l	equ	0xFD9
  8466                           status	equ	0xFD8
  8467                           
  8468 ;; *************** function _I2C_Master_Start *****************
  8469 ;; Defined at:
  8470 ;;		line 31 in file "I2C.c"
  8471 ;; Parameters:    Size  Location     Type
  8472 ;;		None
  8473 ;; Auto vars:     Size  Location     Type
  8474 ;;		None
  8475 ;; Return value:  Size  Location     Type
  8476 ;;                  1    wreg      void 
  8477 ;; Registers used:
  8478 ;;		wreg, status,2, status,0, cstack
  8479 ;; Tracked objects:
  8480 ;;		On entry : 0/0
  8481 ;;		On exit  : 0/0
  8482 ;;		Unchanged: 0/0
  8483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8484 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8485 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8486 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8487 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8488 ;;Total ram usage:        0 bytes
  8489 ;; Hardware stack levels used:    1
  8490 ;; Hardware stack levels required when called:    8
  8491 ;; This function calls:
  8492 ;;		_I2C_Master_Wait
  8493 ;; This function is called by:
  8494 ;;		_loadRTC
  8495 ;;		_getRTC
  8496 ;; This function uses a non-reentrant model
  8497 ;;
  8498                           
  8499                           	psect	text28
  8500  0047CE                     __ptext28:
  8501                           	opt stack 0
  8502  0047CE                     _I2C_Master_Start:
  8503                           	opt stack 18
  8504                           
  8505                           ;I2C.c: 33: I2C_Master_Wait();
  8506                           
  8507                           ;incstack = 0
  8508  0047CE  ECA6  F023         	call	_I2C_Master_Wait	;wreg free
  8509                           
  8510                           ;I2C.c: 34: SEN = 1;
  8511  0047D2  80C5               	bsf	4037,0,c	;volatile
  8512  0047D4  0012               	return		;funcret
  8513  0047D6                     __end_of_I2C_Master_Start:
  8514                           	opt stack 0
  8515                           tblptru	equ	0xFF8
  8516                           tblptrh	equ	0xFF7
  8517                           tblptrl	equ	0xFF6
  8518                           tablat	equ	0xFF5
  8519                           prodh	equ	0xFF4
  8520                           prodl	equ	0xFF3
  8521                           intcon	equ	0xFF2
  8522                           intcon2	equ	0xFF1
  8523                           intcon3	equ	0xFF0
  8524                           postinc0	equ	0xFEE
  8525                           wreg	equ	0xFE8
  8526                           postdec1	equ	0xFE5
  8527                           fsr1l	equ	0xFE1
  8528                           indf2	equ	0xFDF
  8529                           postinc2	equ	0xFDE
  8530                           postdec2	equ	0xFDD
  8531                           fsr2h	equ	0xFDA
  8532                           fsr2l	equ	0xFD9
  8533                           status	equ	0xFD8
  8534                           
  8535 ;; *************** function _I2C_Master_Read *****************
  8536 ;; Defined at:
  8537 ;;		line 55 in file "I2C.c"
  8538 ;; Parameters:    Size  Location     Type
  8539 ;;  a               1    wreg     unsigned char 
  8540 ;; Auto vars:     Size  Location     Type
  8541 ;;  a               1    1[BANK0 ] unsigned char 
  8542 ;;  temp            1    2[BANK0 ] unsigned char 
  8543 ;; Return value:  Size  Location     Type
  8544 ;;                  1    wreg      unsigned char 
  8545 ;; Registers used:
  8546 ;;		wreg, status,2, status,0, cstack
  8547 ;; Tracked objects:
  8548 ;;		On entry : 0/0
  8549 ;;		On exit  : 0/0
  8550 ;;		Unchanged: 0/0
  8551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8552 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8553 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8554 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8555 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8556 ;;Total ram usage:        2 bytes
  8557 ;; Hardware stack levels used:    1
  8558 ;; Hardware stack levels required when called:    8
  8559 ;; This function calls:
  8560 ;;		_I2C_Master_Wait
  8561 ;; This function is called by:
  8562 ;;		_getRTC
  8563 ;; This function uses a non-reentrant model
  8564 ;;
  8565                           
  8566                           	psect	text29
  8567  0044E4                     __ptext29:
  8568                           	opt stack 0
  8569  0044E4                     _I2C_Master_Read:
  8570                           	opt stack 18
  8571                           
  8572                           ;incstack = 0
  8573                           ;I2C_Master_Read@a stored from wreg
  8574  0044E4  0100               	movlb	0	; () banked
  8575  0044E6  6F81               	movwf	I2C_Master_Read@a& (0+255),b
  8576                           
  8577                           ;I2C.c: 57: unsigned char temp;
  8578                           ;I2C.c: 58: I2C_Master_Wait();
  8579  0044E8  ECA6  F023         	call	_I2C_Master_Wait	;wreg free
  8580                           
  8581                           ;I2C.c: 59: RCEN = 1;
  8582  0044EC  86C5               	bsf	4037,3,c	;volatile
  8583                           
  8584                           ;I2C.c: 60: I2C_Master_Wait();
  8585  0044EE  ECA6  F023         	call	_I2C_Master_Wait	;wreg free
  8586                           
  8587                           ;I2C.c: 61: temp = SSPBUF;
  8588  0044F2  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
  8589                           
  8590                           ;I2C.c: 62: I2C_Master_Wait();
  8591  0044F6  ECA6  F023         	call	_I2C_Master_Wait	;wreg free
  8592                           
  8593                           ;I2C.c: 63: ACKDT = (a)?0:1;
  8594  0044FA  0100               	movlb	0	; () banked
  8595  0044FC  5181               	movf	I2C_Master_Read@a& (0+255),w,b
  8596  0044FE  0100               	movlb	0	; () banked
  8597  004500  A4D8               	btfss	status,2,c
  8598  004502  D002               	goto	u3590
  8599  004504  8AC5               	bsf	4037,5,c	;volatile
  8600  004506  D001               	goto	l5255
  8601  004508                     u3590:
  8602  004508  9AC5               	bcf	4037,5,c	;volatile
  8603  00450A                     l5255:
  8604                           
  8605                           ;I2C.c: 64: ACKEN = 1;
  8606  00450A  88C5               	bsf	4037,4,c	;volatile
  8607                           
  8608                           ;I2C.c: 65: return temp;
  8609  00450C  0100               	movlb	0	; () banked
  8610  00450E  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
  8611  004510  0012               	return	
  8612  004512                     __end_of_I2C_Master_Read:
  8613                           	opt stack 0
  8614                           tblptru	equ	0xFF8
  8615                           tblptrh	equ	0xFF7
  8616                           tblptrl	equ	0xFF6
  8617                           tablat	equ	0xFF5
  8618                           prodh	equ	0xFF4
  8619                           prodl	equ	0xFF3
  8620                           intcon	equ	0xFF2
  8621                           intcon2	equ	0xFF1
  8622                           intcon3	equ	0xFF0
  8623                           postinc0	equ	0xFEE
  8624                           wreg	equ	0xFE8
  8625                           postdec1	equ	0xFE5
  8626                           fsr1l	equ	0xFE1
  8627                           indf2	equ	0xFDF
  8628                           postinc2	equ	0xFDE
  8629                           postdec2	equ	0xFDD
  8630                           fsr2h	equ	0xFDA
  8631                           fsr2l	equ	0xFD9
  8632                           status	equ	0xFD8
  8633                           
  8634 ;; *************** function _I2C_Master_Wait *****************
  8635 ;; Defined at:
  8636 ;;		line 26 in file "I2C.c"
  8637 ;; Parameters:    Size  Location     Type
  8638 ;;		None
  8639 ;; Auto vars:     Size  Location     Type
  8640 ;;		None
  8641 ;; Return value:  Size  Location     Type
  8642 ;;                  1    wreg      void 
  8643 ;; Registers used:
  8644 ;;		wreg, status,2, status,0
  8645 ;; Tracked objects:
  8646 ;;		On entry : 0/0
  8647 ;;		On exit  : 0/0
  8648 ;;		Unchanged: 0/0
  8649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8650 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8651 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8652 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8653 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8654 ;;Total ram usage:        1 bytes
  8655 ;; Hardware stack levels used:    1
  8656 ;; Hardware stack levels required when called:    7
  8657 ;; This function calls:
  8658 ;;		Nothing
  8659 ;; This function is called by:
  8660 ;;		_I2C_Master_Start
  8661 ;;		_I2C_Master_Stop
  8662 ;;		_I2C_Master_Write
  8663 ;;		_I2C_Master_Read
  8664 ;;		_I2C_Master_RepeatedStart
  8665 ;; This function uses a non-reentrant model
  8666 ;;
  8667                           
  8668                           	psect	text30
  8669  00474C                     __ptext30:
  8670                           	opt stack 0
  8671  00474C                     _I2C_Master_Wait:
  8672                           	opt stack 18
  8673  00474C                     l66:
  8674  00474C  B4C7               	btfsc	4039,2,c	;volatile
  8675  00474E  D7FE               	goto	l66
  8676  004750  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
  8677  004754  0E1F               	movlw	31
  8678  004756  0100               	movlb	0	; () banked
  8679  004758  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
  8680  00475A  B4D8               	btfsc	status,2,c
  8681  00475C  0012               	return	
  8682  00475E  D7F6               	goto	l66
  8683  004760                     __end_of_I2C_Master_Wait:
  8684                           	opt stack 0
  8685                           tblptru	equ	0xFF8
  8686                           tblptrh	equ	0xFF7
  8687                           tblptrl	equ	0xFF6
  8688                           tablat	equ	0xFF5
  8689                           prodh	equ	0xFF4
  8690                           prodl	equ	0xFF3
  8691                           intcon	equ	0xFF2
  8692                           intcon2	equ	0xFF1
  8693                           intcon3	equ	0xFF0
  8694                           postinc0	equ	0xFEE
  8695                           wreg	equ	0xFE8
  8696                           postdec1	equ	0xFE5
  8697                           fsr1l	equ	0xFE1
  8698                           indf2	equ	0xFDF
  8699                           postinc2	equ	0xFDE
  8700                           postdec2	equ	0xFDD
  8701                           fsr2h	equ	0xFDA
  8702                           fsr2l	equ	0xFD9
  8703                           status	equ	0xFD8
  8704                           
  8705 ;; *************** function _change_state_to_menu_22 *****************
  8706 ;; Defined at:
  8707 ;;		line 496 in file "UI.c"
  8708 ;; Parameters:    Size  Location     Type
  8709 ;;		None
  8710 ;; Auto vars:     Size  Location     Type
  8711 ;;		None
  8712 ;; Return value:  Size  Location     Type
  8713 ;;                  1    wreg      void 
  8714 ;; Registers used:
  8715 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8716 ;; Tracked objects:
  8717 ;;		On entry : 0/0
  8718 ;;		On exit  : 0/0
  8719 ;;		Unchanged: 0/0
  8720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8721 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8722 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8723 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8724 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8725 ;;Total ram usage:        0 bytes
  8726 ;; Hardware stack levels used:    1
  8727 ;; Hardware stack levels required when called:   10
  8728 ;; This function calls:
  8729 ;;		_lcdInst
  8730 ;;		_printf
  8731 ;; This function is called by:
  8732 ;;		_UI
  8733 ;; This function uses a non-reentrant model
  8734 ;;
  8735                           
  8736                           	psect	text31
  8737  004226                     __ptext31:
  8738                           	opt stack 0
  8739  004226                     _change_state_to_menu_22:
  8740                           	opt stack 19
  8741                           
  8742                           ;UI.c: 497: cur_state = 22;
  8743                           
  8744                           ; BSR set to: 0
  8745                           ;incstack = 0
  8746  004226  0E00               	movlw	0
  8747  004228  0100               	movlb	0	; () banked
  8748  00422A  6FDF               	movwf	(_cur_state+1)& (0+255),b
  8749  00422C  0E16               	movlw	22
  8750  00422E  6FDE               	movwf	_cur_state& (0+255),b
  8751                           
  8752                           ; BSR set to: 0
  8753                           ;UI.c: 499: lcdInst(0b10000000);;
  8754  004230  0E80               	movlw	128
  8755  004232  ECC1  F023         	call	_lcdInst
  8756                           
  8757                           ;UI.c: 500: printf("2. SORT        <");
  8758  004236  0EDA               	movlw	low STR_34
  8759  004238  0100               	movlb	0	; () banked
  8760  00423A  6F8E               	movwf	printf@f& (0+255),b
  8761  00423C  0EFD               	movlw	high STR_34
  8762  00423E  0100               	movlb	0	; () banked
  8763  004240  6F8F               	movwf	(printf@f+1)& (0+255),b
  8764  004242  ECB8  F008         	call	_printf	;wreg free
  8765                           
  8766                           ;UI.c: 501: lcdInst(0b11000000);;
  8767  004246  0EC0               	movlw	192
  8768  004248  ECC1  F023         	call	_lcdInst
  8769                           
  8770                           ;UI.c: 502: printf("3. LOGS         ");
  8771  00424C  0E1F               	movlw	low STR_36
  8772  00424E  0100               	movlb	0	; () banked
  8773  004250  6F8E               	movwf	printf@f& (0+255),b
  8774  004252  0EFD               	movlw	high STR_36
  8775  004254  0100               	movlb	0	; () banked
  8776  004256  6F8F               	movwf	(printf@f+1)& (0+255),b
  8777  004258  ECB8  F008         	call	_printf	;wreg free
  8778  00425C  0012               	return		;funcret
  8779  00425E                     __end_of_change_state_to_menu_22:
  8780                           	opt stack 0
  8781                           tblptru	equ	0xFF8
  8782                           tblptrh	equ	0xFF7
  8783                           tblptrl	equ	0xFF6
  8784                           tablat	equ	0xFF5
  8785                           prodh	equ	0xFF4
  8786                           prodl	equ	0xFF3
  8787                           intcon	equ	0xFF2
  8788                           intcon2	equ	0xFF1
  8789                           intcon3	equ	0xFF0
  8790                           postinc0	equ	0xFEE
  8791                           wreg	equ	0xFE8
  8792                           postdec1	equ	0xFE5
  8793                           fsr1l	equ	0xFE1
  8794                           indf2	equ	0xFDF
  8795                           postinc2	equ	0xFDE
  8796                           postdec2	equ	0xFDD
  8797                           fsr2h	equ	0xFDA
  8798                           fsr2l	equ	0xFD9
  8799                           status	equ	0xFD8
  8800                           
  8801 ;; *************** function _change_state_to_menu_12 *****************
  8802 ;; Defined at:
  8803 ;;		line 488 in file "UI.c"
  8804 ;; Parameters:    Size  Location     Type
  8805 ;;		None
  8806 ;; Auto vars:     Size  Location     Type
  8807 ;;		None
  8808 ;; Return value:  Size  Location     Type
  8809 ;;                  1    wreg      void 
  8810 ;; Registers used:
  8811 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8812 ;; Tracked objects:
  8813 ;;		On entry : 0/0
  8814 ;;		On exit  : 0/0
  8815 ;;		Unchanged: 0/0
  8816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8817 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8818 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8819 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8820 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8821 ;;Total ram usage:        0 bytes
  8822 ;; Hardware stack levels used:    1
  8823 ;; Hardware stack levels required when called:   10
  8824 ;; This function calls:
  8825 ;;		_lcdInst
  8826 ;;		_printf
  8827 ;; This function is called by:
  8828 ;;		_UI
  8829 ;; This function uses a non-reentrant model
  8830 ;;
  8831                           
  8832                           	psect	text32
  8833  00425E                     __ptext32:
  8834                           	opt stack 0
  8835  00425E                     _change_state_to_menu_12:
  8836                           	opt stack 19
  8837                           
  8838                           ;UI.c: 489: cur_state = 12;
  8839                           
  8840                           ;incstack = 0
  8841  00425E  0E00               	movlw	0
  8842  004260  0100               	movlb	0	; () banked
  8843  004262  6FDF               	movwf	(_cur_state+1)& (0+255),b
  8844  004264  0E0C               	movlw	12
  8845  004266  6FDE               	movwf	_cur_state& (0+255),b
  8846                           
  8847                           ; BSR set to: 0
  8848                           ;UI.c: 491: lcdInst(0b10000000);;
  8849  004268  0E80               	movlw	128
  8850  00426A  ECC1  F023         	call	_lcdInst
  8851                           
  8852                           ;UI.c: 492: printf("1. DATE/TIME    ");
  8853  00426E  0E41               	movlw	low STR_33
  8854  004270  0100               	movlb	0	; () banked
  8855  004272  6F8E               	movwf	printf@f& (0+255),b
  8856  004274  0EFD               	movlw	high STR_33
  8857  004276  0100               	movlb	0	; () banked
  8858  004278  6F8F               	movwf	(printf@f+1)& (0+255),b
  8859  00427A  ECB8  F008         	call	_printf	;wreg free
  8860                           
  8861                           ;UI.c: 493: lcdInst(0b11000000);;
  8862  00427E  0EC0               	movlw	192
  8863  004280  ECC1  F023         	call	_lcdInst
  8864                           
  8865                           ;UI.c: 494: printf("2. SORT        <");
  8866  004284  0EDA               	movlw	low STR_34
  8867  004286  0100               	movlb	0	; () banked
  8868  004288  6F8E               	movwf	printf@f& (0+255),b
  8869  00428A  0EFD               	movlw	high STR_34
  8870  00428C  0100               	movlb	0	; () banked
  8871  00428E  6F8F               	movwf	(printf@f+1)& (0+255),b
  8872  004290  ECB8  F008         	call	_printf	;wreg free
  8873  004294  0012               	return		;funcret
  8874  004296                     __end_of_change_state_to_menu_12:
  8875                           	opt stack 0
  8876                           tblptru	equ	0xFF8
  8877                           tblptrh	equ	0xFF7
  8878                           tblptrl	equ	0xFF6
  8879                           tablat	equ	0xFF5
  8880                           prodh	equ	0xFF4
  8881                           prodl	equ	0xFF3
  8882                           intcon	equ	0xFF2
  8883                           intcon2	equ	0xFF1
  8884                           intcon3	equ	0xFF0
  8885                           postinc0	equ	0xFEE
  8886                           wreg	equ	0xFE8
  8887                           postdec1	equ	0xFE5
  8888                           fsr1l	equ	0xFE1
  8889                           indf2	equ	0xFDF
  8890                           postinc2	equ	0xFDE
  8891                           postdec2	equ	0xFDD
  8892                           fsr2h	equ	0xFDA
  8893                           fsr2l	equ	0xFD9
  8894                           status	equ	0xFD8
  8895                           
  8896 ;; *************** function ___awmod *****************
  8897 ;; Defined at:
  8898 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  8899 ;; Parameters:    Size  Location     Type
  8900 ;;  dividend        2    0[BANK0 ] int 
  8901 ;;  divisor         2    2[BANK0 ] int 
  8902 ;; Auto vars:     Size  Location     Type
  8903 ;;  sign            1    5[BANK0 ] unsigned char 
  8904 ;;  counter         1    4[BANK0 ] unsigned char 
  8905 ;; Return value:  Size  Location     Type
  8906 ;;                  2    0[BANK0 ] int 
  8907 ;; Registers used:
  8908 ;;		wreg, status,2, status,0
  8909 ;; Tracked objects:
  8910 ;;		On entry : 0/0
  8911 ;;		On exit  : 0/0
  8912 ;;		Unchanged: 0/0
  8913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8914 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8915 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8916 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8917 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8918 ;;Total ram usage:        6 bytes
  8919 ;; Hardware stack levels used:    1
  8920 ;; Hardware stack levels required when called:    7
  8921 ;; This function calls:
  8922 ;;		Nothing
  8923 ;; This function is called by:
  8924 ;;		_UI
  8925 ;; This function uses a non-reentrant model
  8926 ;;
  8927                           
  8928                           	psect	text33
  8929  00382C                     __ptext33:
  8930                           	opt stack 0
  8931  00382C                     ___awmod:
  8932                           	opt stack 22
  8933                           
  8934                           ;incstack = 0
  8935  00382C  0E00               	movlw	0
  8936  00382E  0100               	movlb	0	; () banked
  8937  003830  6F85               	movwf	___awmod@sign& (0+255),b
  8938                           
  8939                           ; BSR set to: 0
  8940  003832  0100               	movlb	0	; () banked
  8941  003834  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
  8942  003836  D008               	goto	l7323
  8943                           
  8944                           ; BSR set to: 0
  8945  003838  0100               	movlb	0	; () banked
  8946  00383A  6D80               	negf	___awmod@dividend& (0+255),b
  8947  00383C  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  8948  00383E  B0D8               	btfsc	status,0,c
  8949  003840  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  8950                           
  8951                           ; BSR set to: 0
  8952  003842  0E01               	movlw	1
  8953  003844  0100               	movlb	0	; () banked
  8954  003846  6F85               	movwf	___awmod@sign& (0+255),b
  8955  003848                     l7323:
  8956                           
  8957                           ; BSR set to: 0
  8958  003848  0100               	movlb	0	; () banked
  8959  00384A  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  8960  00384C  D005               	goto	l7327
  8961                           
  8962                           ; BSR set to: 0
  8963  00384E  0100               	movlb	0	; () banked
  8964  003850  6D82               	negf	___awmod@divisor& (0+255),b
  8965  003852  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
  8966  003854  B0D8               	btfsc	status,0,c
  8967  003856  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
  8968  003858                     l7327:
  8969                           
  8970                           ; BSR set to: 0
  8971  003858  0100               	movlb	0	; () banked
  8972  00385A  5182               	movf	___awmod@divisor& (0+255),w,b
  8973  00385C  0100               	movlb	0	; () banked
  8974  00385E  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  8975  003860  B4D8               	btfsc	status,2,c
  8976  003862  D026               	goto	l7343
  8977                           
  8978                           ; BSR set to: 0
  8979  003864  0E01               	movlw	1
  8980  003866  0100               	movlb	0	; () banked
  8981  003868  6F84               	movwf	___awmod@counter& (0+255),b
  8982  00386A  D006               	goto	l7333
  8983  00386C                     l7331:
  8984                           
  8985                           ; BSR set to: 0
  8986  00386C  0100               	movlb	0	; () banked
  8987  00386E  90D8               	bcf	status,0,c
  8988  003870  3782               	rlcf	___awmod@divisor& (0+255),f,b
  8989  003872  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  8990  003874  0100               	movlb	0	; () banked
  8991  003876  2B84               	incf	___awmod@counter& (0+255),f,b
  8992  003878                     l7333:
  8993                           
  8994                           ; BSR set to: 0
  8995  003878  0100               	movlb	0	; () banked
  8996  00387A  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  8997  00387C  D7F7               	goto	l7331
  8998  00387E                     l7335:
  8999                           
  9000                           ; BSR set to: 0
  9001  00387E  0100               	movlb	0	; () banked
  9002  003880  5182               	movf	___awmod@divisor& (0+255),w,b
  9003  003882  0100               	movlb	0	; () banked
  9004  003884  5D80               	subwf	___awmod@dividend& (0+255),w,b
  9005  003886  0100               	movlb	0	; () banked
  9006  003888  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  9007  00388A  0100               	movlb	0	; () banked
  9008  00388C  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  9009  00388E  A0D8               	btfss	status,0,c
  9010  003890  D008               	goto	l7339
  9011                           
  9012                           ; BSR set to: 0
  9013  003892  0100               	movlb	0	; () banked
  9014  003894  5182               	movf	___awmod@divisor& (0+255),w,b
  9015  003896  0100               	movlb	0	; () banked
  9016  003898  5F80               	subwf	___awmod@dividend& (0+255),f,b
  9017  00389A  0100               	movlb	0	; () banked
  9018  00389C  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  9019  00389E  0100               	movlb	0	; () banked
  9020  0038A0  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  9021  0038A2                     l7339:
  9022                           
  9023                           ; BSR set to: 0
  9024  0038A2  0100               	movlb	0	; () banked
  9025  0038A4  90D8               	bcf	status,0,c
  9026  0038A6  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  9027  0038A8  3382               	rrcf	___awmod@divisor& (0+255),f,b
  9028                           
  9029                           ; BSR set to: 0
  9030  0038AA  0100               	movlb	0	; () banked
  9031  0038AC  2F84               	decfsz	___awmod@counter& (0+255),f,b
  9032  0038AE  D7E7               	goto	l7335
  9033  0038B0                     l7343:
  9034                           
  9035                           ; BSR set to: 0
  9036  0038B0  0100               	movlb	0	; () banked
  9037  0038B2  5185               	movf	___awmod@sign& (0+255),w,b
  9038  0038B4  0100               	movlb	0	; () banked
  9039  0038B6  B4D8               	btfsc	status,2,c
  9040  0038B8  D005               	goto	l7347
  9041                           
  9042                           ; BSR set to: 0
  9043  0038BA  0100               	movlb	0	; () banked
  9044  0038BC  6D80               	negf	___awmod@dividend& (0+255),b
  9045  0038BE  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  9046  0038C0  B0D8               	btfsc	status,0,c
  9047  0038C2  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  9048  0038C4                     l7347:
  9049                           
  9050                           ; BSR set to: 0
  9051  0038C4  C080  F080         	movff	___awmod@dividend,?___awmod
  9052  0038C8  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
  9053  0038CC  0012               	return	
  9054  0038CE                     __end_of___awmod:
  9055                           	opt stack 0
  9056                           tblptru	equ	0xFF8
  9057                           tblptrh	equ	0xFF7
  9058                           tblptrl	equ	0xFF6
  9059                           tablat	equ	0xFF5
  9060                           prodh	equ	0xFF4
  9061                           prodl	equ	0xFF3
  9062                           intcon	equ	0xFF2
  9063                           intcon2	equ	0xFF1
  9064                           intcon3	equ	0xFF0
  9065                           postinc0	equ	0xFEE
  9066                           wreg	equ	0xFE8
  9067                           postdec1	equ	0xFE5
  9068                           fsr1l	equ	0xFE1
  9069                           indf2	equ	0xFDF
  9070                           postinc2	equ	0xFDE
  9071                           postdec2	equ	0xFDD
  9072                           fsr2h	equ	0xFDA
  9073                           fsr2l	equ	0xFD9
  9074                           status	equ	0xFD8
  9075                           
  9076 ;; *************** function ___awdiv *****************
  9077 ;; Defined at:
  9078 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  9079 ;; Parameters:    Size  Location     Type
  9080 ;;  dividend        2    6[BANK0 ] int 
  9081 ;;  divisor         2    8[BANK0 ] int 
  9082 ;; Auto vars:     Size  Location     Type
  9083 ;;  quotient        2   12[BANK0 ] int 
  9084 ;;  sign            1   11[BANK0 ] unsigned char 
  9085 ;;  counter         1   10[BANK0 ] unsigned char 
  9086 ;; Return value:  Size  Location     Type
  9087 ;;                  2    6[BANK0 ] int 
  9088 ;; Registers used:
  9089 ;;		wreg, status,2, status,0
  9090 ;; Tracked objects:
  9091 ;;		On entry : 0/0
  9092 ;;		On exit  : 0/0
  9093 ;;		Unchanged: 0/0
  9094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9095 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9096 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9097 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9098 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9099 ;;Total ram usage:        8 bytes
  9100 ;; Hardware stack levels used:    1
  9101 ;; Hardware stack levels required when called:    7
  9102 ;; This function calls:
  9103 ;;		Nothing
  9104 ;; This function is called by:
  9105 ;;		_UI
  9106 ;; This function uses a non-reentrant model
  9107 ;;
  9108                           
  9109                           	psect	text34
  9110  003608                     __ptext34:
  9111                           	opt stack 0
  9112  003608                     ___awdiv:
  9113                           	opt stack 22
  9114                           
  9115                           ; BSR set to: 0
  9116                           ;incstack = 0
  9117  003608  0E00               	movlw	0
  9118  00360A  0100               	movlb	0	; () banked
  9119  00360C  6F8B               	movwf	___awdiv@sign& (0+255),b
  9120                           
  9121                           ; BSR set to: 0
  9122  00360E  0100               	movlb	0	; () banked
  9123  003610  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  9124  003612  D008               	goto	l7279
  9125                           
  9126                           ; BSR set to: 0
  9127  003614  0100               	movlb	0	; () banked
  9128  003616  6D88               	negf	___awdiv@divisor& (0+255),b
  9129  003618  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
  9130  00361A  B0D8               	btfsc	status,0,c
  9131  00361C  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
  9132                           
  9133                           ; BSR set to: 0
  9134  00361E  0E01               	movlw	1
  9135  003620  0100               	movlb	0	; () banked
  9136  003622  6F8B               	movwf	___awdiv@sign& (0+255),b
  9137  003624                     l7279:
  9138                           
  9139                           ; BSR set to: 0
  9140  003624  0100               	movlb	0	; () banked
  9141  003626  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  9142  003628  D008               	goto	l7285
  9143                           
  9144                           ; BSR set to: 0
  9145  00362A  0100               	movlb	0	; () banked
  9146  00362C  6D86               	negf	___awdiv@dividend& (0+255),b
  9147  00362E  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
  9148  003630  B0D8               	btfsc	status,0,c
  9149  003632  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
  9150                           
  9151                           ; BSR set to: 0
  9152  003634  0E01               	movlw	1
  9153  003636  0100               	movlb	0	; () banked
  9154  003638  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
  9155  00363A                     l7285:
  9156                           
  9157                           ; BSR set to: 0
  9158  00363A  0E00               	movlw	0
  9159  00363C  0100               	movlb	0	; () banked
  9160  00363E  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
  9161  003640  0E00               	movlw	0
  9162  003642  6F8C               	movwf	___awdiv@quotient& (0+255),b
  9163                           
  9164                           ; BSR set to: 0
  9165  003644  0100               	movlb	0	; () banked
  9166  003646  5188               	movf	___awdiv@divisor& (0+255),w,b
  9167  003648  0100               	movlb	0	; () banked
  9168  00364A  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  9169  00364C  B4D8               	btfsc	status,2,c
  9170  00364E  D02C               	goto	l7307
  9171                           
  9172                           ; BSR set to: 0
  9173  003650  0E01               	movlw	1
  9174  003652  0100               	movlb	0	; () banked
  9175  003654  6F8A               	movwf	___awdiv@counter& (0+255),b
  9176  003656  D006               	goto	l7293
  9177  003658                     l7291:
  9178                           
  9179                           ; BSR set to: 0
  9180  003658  0100               	movlb	0	; () banked
  9181  00365A  90D8               	bcf	status,0,c
  9182  00365C  3788               	rlcf	___awdiv@divisor& (0+255),f,b
  9183  00365E  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  9184  003660  0100               	movlb	0	; () banked
  9185  003662  2B8A               	incf	___awdiv@counter& (0+255),f,b
  9186  003664                     l7293:
  9187                           
  9188                           ; BSR set to: 0
  9189  003664  0100               	movlb	0	; () banked
  9190  003666  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  9191  003668  D7F7               	goto	l7291
  9192  00366A                     l7295:
  9193                           
  9194                           ; BSR set to: 0
  9195  00366A  0100               	movlb	0	; () banked
  9196  00366C  90D8               	bcf	status,0,c
  9197  00366E  378C               	rlcf	___awdiv@quotient& (0+255),f,b
  9198  003670  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  9199                           
  9200                           ; BSR set to: 0
  9201  003672  0100               	movlb	0	; () banked
  9202  003674  5188               	movf	___awdiv@divisor& (0+255),w,b
  9203  003676  0100               	movlb	0	; () banked
  9204  003678  5D86               	subwf	___awdiv@dividend& (0+255),w,b
  9205  00367A  0100               	movlb	0	; () banked
  9206  00367C  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  9207  00367E  0100               	movlb	0	; () banked
  9208  003680  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  9209  003682  A0D8               	btfss	status,0,c
  9210  003684  D00A               	goto	l7303
  9211                           
  9212                           ; BSR set to: 0
  9213  003686  0100               	movlb	0	; () banked
  9214  003688  5188               	movf	___awdiv@divisor& (0+255),w,b
  9215  00368A  0100               	movlb	0	; () banked
  9216  00368C  5F86               	subwf	___awdiv@dividend& (0+255),f,b
  9217  00368E  0100               	movlb	0	; () banked
  9218  003690  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  9219  003692  0100               	movlb	0	; () banked
  9220  003694  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  9221                           
  9222                           ; BSR set to: 0
  9223  003696  0100               	movlb	0	; () banked
  9224  003698  818C               	bsf	___awdiv@quotient& (0+255),0,b
  9225  00369A                     l7303:
  9226                           
  9227                           ; BSR set to: 0
  9228  00369A  0100               	movlb	0	; () banked
  9229  00369C  90D8               	bcf	status,0,c
  9230  00369E  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  9231  0036A0  3388               	rrcf	___awdiv@divisor& (0+255),f,b
  9232                           
  9233                           ; BSR set to: 0
  9234  0036A2  0100               	movlb	0	; () banked
  9235  0036A4  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
  9236  0036A6  D7E1               	goto	l7295
  9237  0036A8                     l7307:
  9238                           
  9239                           ; BSR set to: 0
  9240  0036A8  0100               	movlb	0	; () banked
  9241  0036AA  518B               	movf	___awdiv@sign& (0+255),w,b
  9242  0036AC  0100               	movlb	0	; () banked
  9243  0036AE  B4D8               	btfsc	status,2,c
  9244  0036B0  D005               	goto	l7311
  9245                           
  9246                           ; BSR set to: 0
  9247  0036B2  0100               	movlb	0	; () banked
  9248  0036B4  6D8C               	negf	___awdiv@quotient& (0+255),b
  9249  0036B6  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
  9250  0036B8  B0D8               	btfsc	status,0,c
  9251  0036BA  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
  9252  0036BC                     l7311:
  9253                           
  9254                           ; BSR set to: 0
  9255  0036BC  C08C  F086         	movff	___awdiv@quotient,?___awdiv
  9256  0036C0  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
  9257  0036C4  0012               	return	
  9258  0036C6                     __end_of___awdiv:
  9259                           	opt stack 0
  9260                           tblptru	equ	0xFF8
  9261                           tblptrh	equ	0xFF7
  9262                           tblptrl	equ	0xFF6
  9263                           tablat	equ	0xFF5
  9264                           prodh	equ	0xFF4
  9265                           prodl	equ	0xFF3
  9266                           intcon	equ	0xFF2
  9267                           intcon2	equ	0xFF1
  9268                           intcon3	equ	0xFF0
  9269                           postinc0	equ	0xFEE
  9270                           wreg	equ	0xFE8
  9271                           postdec1	equ	0xFE5
  9272                           fsr1l	equ	0xFE1
  9273                           indf2	equ	0xFDF
  9274                           postinc2	equ	0xFDE
  9275                           postdec2	equ	0xFDD
  9276                           fsr2h	equ	0xFDA
  9277                           fsr2l	equ	0xFD9
  9278                           status	equ	0xFD8
  9279                           
  9280 ;; *************** function _Test *****************
  9281 ;; Defined at:
  9282 ;;		line 28 in file "Test.c"
  9283 ;; Parameters:    Size  Location     Type
  9284 ;;		None
  9285 ;; Auto vars:     Size  Location     Type
  9286 ;;		None
  9287 ;; Return value:  Size  Location     Type
  9288 ;;                  1    wreg      void 
  9289 ;; Registers used:
  9290 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9291 ;; Tracked objects:
  9292 ;;		On entry : 0/0
  9293 ;;		On exit  : 0/0
  9294 ;;		Unchanged: 0/0
  9295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9296 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9297 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9298 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9299 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9300 ;;Total ram usage:        2 bytes
  9301 ;; Hardware stack levels used:    1
  9302 ;; Hardware stack levels required when called:   11
  9303 ;; This function calls:
  9304 ;;		_BothServos
  9305 ;;		_EEPROMTest
  9306 ;;		_PortTestA5
  9307 ;;		_PortTests
  9308 ;;		_SolenoidTestA5
  9309 ;;		_ToggleTestA5
  9310 ;;		_actuatorTest
  9311 ;;		_algorithmTest
  9312 ;;		_lcdInst
  9313 ;;		_printf
  9314 ;;		_sensorTest
  9315 ;; This function is called by:
  9316 ;;		_main
  9317 ;; This function uses a non-reentrant model
  9318 ;;
  9319                           
  9320                           	psect	text35
  9321  003248                     __ptext35:
  9322                           	opt stack 0
  9323  003248                     _Test:
  9324                           	opt stack 19
  9325  003248                     
  9326                           ;Test.c: 31: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
  9327  003248  0E01               	movlw	1
  9328  00324A  ECC1  F023         	call	_lcdInst
  9329  00324E  0E68               	movlw	104
  9330  003250  0100               	movlb	0	; () banked
  9331  003252  6FC6               	movwf	??_Test& (0+255),b
  9332  003254  0EE4               	movlw	228
  9333  003256                     u7457:
  9334  003256  2EE8               	decfsz	wreg,f,c
  9335  003258  D7FE               	bra	u7457
  9336  00325A  2FC6               	decfsz	??_Test& (0+255),f,b
  9337  00325C  D7FC               	bra	u7457
  9338  00325E  F000               	nop	
  9339  003260  0E80               	movlw	128
  9340  003262  ECC1  F023         	call	_lcdInst
  9341                           
  9342                           ;Test.c: 32: printf("1.ALG|2.SNR|3.AC");
  9343  003266  0E86               	movlw	low STR_68
  9344  003268  0100               	movlb	0	; () banked
  9345  00326A  6F8E               	movwf	printf@f& (0+255),b
  9346  00326C  0EFC               	movlw	high STR_68
  9347  00326E  0100               	movlb	0	; () banked
  9348  003270  6F8F               	movwf	(printf@f+1)& (0+255),b
  9349  003272  ECB8  F008         	call	_printf	;wreg free
  9350                           
  9351                           ;Test.c: 33: lcdInst(0b11000000);;
  9352  003276  0EC0               	movlw	192
  9353  003278  ECC1  F023         	call	_lcdInst
  9354                           
  9355                           ;Test.c: 34: printf("4.HI|5.TOG|6.EEP");
  9356  00327C  0EB9               	movlw	low STR_69
  9357  00327E  0100               	movlb	0	; () banked
  9358  003280  6F8E               	movwf	printf@f& (0+255),b
  9359  003282  0EFC               	movlw	high STR_69
  9360  003284  0100               	movlb	0	; () banked
  9361  003286  6F8F               	movwf	(printf@f+1)& (0+255),b
  9362  003288  ECB8  F008         	call	_printf	;wreg free
  9363                           
  9364                           ;Test.c: 35: _delay((unsigned long)((100)*(32000000/4000.0)));
  9365  00328C  0E05               	movlw	5
  9366  00328E  0100               	movlb	0	; () banked
  9367  003290  6FC7               	movwf	(??_Test+1)& (0+255),b
  9368  003292  0E0F               	movlw	15
  9369  003294  0100               	movlb	0	; () banked
  9370  003296  6FC6               	movwf	??_Test& (0+255),b
  9371  003298  0EF1               	movlw	241
  9372  00329A                     u7467:
  9373  00329A  2EE8               	decfsz	wreg,f,c
  9374  00329C  D7FE               	bra	u7467
  9375  00329E  2FC6               	decfsz	??_Test& (0+255),f,b
  9376  0032A0  D7FC               	bra	u7467
  9377  0032A2  2FC7               	decfsz	(??_Test+1)& (0+255),f,b
  9378  0032A4  D7FA               	bra	u7467
  9379  0032A6                     l1027:
  9380  0032A6  A281               	btfss	3969,1,c	;volatile
  9381  0032A8  D7FE               	goto	l1027
  9382                           
  9383                           ;Test.c: 37: var = PORTB >> 4;
  9384  0032AA  CF81 F0C6          	movff	3969,??_Test	;volatile
  9385  0032AE  0100               	movlb	0	; () banked
  9386  0032B0  3BC6               	swapf	??_Test& (0+255),f,b
  9387  0032B2  0E0F               	movlw	15
  9388  0032B4  17C6               	andwf	??_Test& (0+255),f,b
  9389  0032B6  0100               	movlb	0	; () banked
  9390  0032B8  51C6               	movf	??_Test& (0+255),w,b
  9391  0032BA  0100               	movlb	0	; () banked
  9392  0032BC  6FFA               	movwf	_var& (0+255),b
  9393  0032BE  6BFB               	clrf	(_var+1)& (0+255),b
  9394                           
  9395                           ; BSR set to: 0
  9396                           ;Test.c: 38: var++;
  9397  0032C0  0100               	movlb	0	; () banked
  9398  0032C2  4BFA               	infsnz	_var& (0+255),f,b
  9399  0032C4  2BFB               	incf	(_var+1)& (0+255),f,b
  9400  0032C6                     l1030:
  9401  0032C6  A281               	btfss	3969,1,c	;volatile
  9402  0032C8  D01C               	goto	l8043
  9403  0032CA  D7FD               	goto	l1030
  9404  0032CC                     l8023:
  9405                           
  9406                           ;Test.c: 42: algorithmTest();
  9407  0032CC  EC99  F01A         	call	_algorithmTest	;wreg free
  9408                           
  9409                           ;Test.c: 43: break;
  9410  0032D0  D7BB               	goto	l8005
  9411  0032D2                     l8025:
  9412                           
  9413                           ;Test.c: 45: sensorTest();
  9414  0032D2  EC8B  F00C         	call	_sensorTest	;wreg free
  9415                           
  9416                           ;Test.c: 46: break;
  9417  0032D6  D7B8               	goto	l8005
  9418  0032D8                     l8027:
  9419                           
  9420                           ;Test.c: 48: actuatorTest();
  9421  0032D8  EC09  F000         	call	_actuatorTest	;wreg free
  9422                           
  9423                           ;Test.c: 49: break;
  9424  0032DC  D7B5               	goto	l8005
  9425  0032DE                     l8029:
  9426                           
  9427                           ;Test.c: 51: PortTestA5();
  9428  0032DE  ECB2  F01C         	call	_PortTestA5	;wreg free
  9429                           
  9430                           ;Test.c: 52: break;
  9431  0032E2  D7B2               	goto	l8005
  9432  0032E4                     l8031:
  9433                           
  9434                           ;Test.c: 54: ToggleTestA5();
  9435  0032E4  EC43  F01D         	call	_ToggleTestA5	;wreg free
  9436                           
  9437                           ;Test.c: 55: break;
  9438  0032E8  D7AF               	goto	l8005
  9439  0032EA                     l8033:
  9440                           
  9441                           ;Test.c: 57: EEPROMTest();
  9442  0032EA  ECF3  F023         	call	_EEPROMTest	;wreg free
  9443                           
  9444                           ;Test.c: 58: break;
  9445  0032EE  D7AC               	goto	l8005
  9446  0032F0                     l8035:
  9447                           
  9448                           ;Test.c: 60: SolenoidTestA5();
  9449  0032F0  ECA8  F019         	call	_SolenoidTestA5	;wreg free
  9450                           
  9451                           ;Test.c: 61: break;
  9452  0032F4  D7A9               	goto	l8005
  9453  0032F6                     l8037:
  9454                           
  9455                           ;Test.c: 63: PortTests();
  9456  0032F6  ECCA  F01D         	call	_PortTests	;wreg free
  9457                           
  9458                           ;Test.c: 64: break;
  9459  0032FA  D7A6               	goto	l8005
  9460  0032FC                     l8039:
  9461                           
  9462                           ;Test.c: 66: BothServos();
  9463  0032FC  EC0A  F00E         	call	_BothServos	;wreg free
  9464                           
  9465                           ;Test.c: 70: }
  9466                           
  9467                           ;Test.c: 69: break;
  9468                           
  9469                           ;Test.c: 68: default:
  9470                           
  9471                           ;Test.c: 67: break;
  9472  003300  D7A3               	goto	l8005
  9473  003302                     l8043:
  9474  003302  C0FA  F0C6         	movff	_var,??_Test
  9475  003306  C0FB  F0C7         	movff	_var+1,??_Test+1
  9476                           
  9477                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9478                           ; Switch size 1, requested type "space"
  9479                           ; Number of cases is 1, Range of values is 0 to 0
  9480                           ; switch strategies available:
  9481                           ; Name         Instructions Cycles
  9482                           ; simple_byte            4     3 (average)
  9483                           ;	Chosen strategy is simple_byte
  9484  00330A  0100               	movlb	0	; () banked
  9485  00330C  51C7               	movf	(??_Test+1)& (0+255),w,b
  9486  00330E  0A00               	xorlw	0	; case 0
  9487  003310  A4D8               	btfss	status,2,c
  9488  003312  D79A               	goto	l8005
  9489                           
  9490                           ; BSR set to: 0
  9491                           ; Switch size 1, requested type "space"
  9492                           ; Number of cases is 9, Range of values is 1 to 10
  9493                           ; switch strategies available:
  9494                           ; Name         Instructions Cycles
  9495                           ; simple_byte           28    15 (average)
  9496                           ;	Chosen strategy is simple_byte
  9497  003314  0100               	movlb	0	; () banked
  9498  003316  51C6               	movf	??_Test& (0+255),w,b
  9499  003318  0A01               	xorlw	1	; case 1
  9500  00331A  B4D8               	btfsc	status,2,c
  9501  00331C  D7D7               	goto	l8023
  9502  00331E  0A03               	xorlw	3	; case 2
  9503  003320  B4D8               	btfsc	status,2,c
  9504  003322  D7D7               	goto	l8025
  9505  003324  0A01               	xorlw	1	; case 3
  9506  003326  B4D8               	btfsc	status,2,c
  9507  003328  D7D7               	goto	l8027
  9508  00332A  0A06               	xorlw	6	; case 5
  9509  00332C  B4D8               	btfsc	status,2,c
  9510  00332E  D7D7               	goto	l8029
  9511  003330  0A03               	xorlw	3	; case 6
  9512  003332  B4D8               	btfsc	status,2,c
  9513  003334  D7D7               	goto	l8031
  9514  003336  0A01               	xorlw	1	; case 7
  9515  003338  B4D8               	btfsc	status,2,c
  9516  00333A  D7D7               	goto	l8033
  9517  00333C  0A0F               	xorlw	15	; case 8
  9518  00333E  B4D8               	btfsc	status,2,c
  9519  003340  D7D7               	goto	l8035
  9520  003342  0A01               	xorlw	1	; case 9
  9521  003344  B4D8               	btfsc	status,2,c
  9522  003346  D7D7               	goto	l8037
  9523  003348  0A03               	xorlw	3	; case 10
  9524  00334A  B4D8               	btfsc	status,2,c
  9525  00334C  D7D7               	goto	l8039
  9526                           
  9527                           ; BSR set to: 0
  9528                           
  9529                           ; BSR set to: 0
  9530  00334E  D77C               	goto	l8005
  9531  003350                     __end_of_Test:
  9532                           	opt stack 0
  9533                           tblptru	equ	0xFF8
  9534                           tblptrh	equ	0xFF7
  9535                           tblptrl	equ	0xFF6
  9536                           tablat	equ	0xFF5
  9537                           prodh	equ	0xFF4
  9538                           prodl	equ	0xFF3
  9539                           intcon	equ	0xFF2
  9540                           intcon2	equ	0xFF1
  9541                           intcon3	equ	0xFF0
  9542                           postinc0	equ	0xFEE
  9543                           wreg	equ	0xFE8
  9544                           postdec1	equ	0xFE5
  9545                           fsr1l	equ	0xFE1
  9546                           indf2	equ	0xFDF
  9547                           postinc2	equ	0xFDE
  9548                           postdec2	equ	0xFDD
  9549                           fsr2h	equ	0xFDA
  9550                           fsr2l	equ	0xFD9
  9551                           status	equ	0xFD8
  9552                           
  9553 ;; *************** function _sensorTest *****************
  9554 ;; Defined at:
  9555 ;;		line 118 in file "Test.c"
  9556 ;; Parameters:    Size  Location     Type
  9557 ;;		None
  9558 ;; Auto vars:     Size  Location     Type
  9559 ;;  res             2   45[BANK0 ] int 
  9560 ;; Return value:  Size  Location     Type
  9561 ;;                  1    wreg      void 
  9562 ;; Registers used:
  9563 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9564 ;; Tracked objects:
  9565 ;;		On entry : 0/0
  9566 ;;		On exit  : 0/0
  9567 ;;		Unchanged: 0/0
  9568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9569 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9570 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9571 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9572 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9573 ;;Total ram usage:        4 bytes
  9574 ;; Hardware stack levels used:    1
  9575 ;; Hardware stack levels required when called:   10
  9576 ;; This function calls:
  9577 ;;		_lcdInst
  9578 ;;		_printf
  9579 ;;		_readADC
  9580 ;;		_readMAG
  9581 ;; This function is called by:
  9582 ;;		_Test
  9583 ;; This function uses a non-reentrant model
  9584 ;;
  9585                           
  9586                           	psect	text36
  9587  001916                     __ptext36:
  9588                           	opt stack 0
  9589  001916                     _sensorTest:
  9590                           	opt stack 19
  9591                           
  9592                           ;Test.c: 120: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
  9593                           
  9594                           ; BSR set to: 0
  9595                           ;incstack = 0
  9596  001916  0E01               	movlw	1
  9597  001918  ECC1  F023         	call	_lcdInst
  9598  00191C  0E68               	movlw	104
  9599  00191E  0100               	movlb	0	; () banked
  9600  001920  6FAB               	movwf	??_sensorTest& (0+255),b
  9601  001922  0EE4               	movlw	228
  9602  001924                     u7477:
  9603  001924  2EE8               	decfsz	wreg,f,c
  9604  001926  D7FE               	bra	u7477
  9605  001928  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9606  00192A  D7FC               	bra	u7477
  9607  00192C  F000               	nop	
  9608  00192E  0E80               	movlw	128
  9609  001930  ECC1  F023         	call	_lcdInst
  9610                           
  9611                           ;Test.c: 121: printf("SENSORS");
  9612  001934  0EAE               	movlw	low STR_77
  9613  001936  0100               	movlb	0	; () banked
  9614  001938  6F8E               	movwf	printf@f& (0+255),b
  9615  00193A  0EFF               	movlw	high STR_77
  9616  00193C  0100               	movlb	0	; () banked
  9617  00193E  6F8F               	movwf	(printf@f+1)& (0+255),b
  9618  001940  ECB8  F008         	call	_printf	;wreg free
  9619                           
  9620                           ;Test.c: 122: lcdInst(0b11000000);;
  9621  001944  0EC0               	movlw	192
  9622  001946  ECC1  F023         	call	_lcdInst
  9623                           
  9624                           ;Test.c: 123: printf("PUSH TO START");
  9625  00194A  0EFF               	movlw	low STR_71
  9626  00194C  0100               	movlb	0	; () banked
  9627  00194E  6F8E               	movwf	printf@f& (0+255),b
  9628  001950  0EFE               	movlw	high STR_71
  9629  001952  0100               	movlb	0	; () banked
  9630  001954  6F8F               	movwf	(printf@f+1)& (0+255),b
  9631  001956  ECB8  F008         	call	_printf	;wreg free
  9632                           
  9633                           ;Test.c: 124: _delay((unsigned long)((100)*(32000000/4000.0)));
  9634  00195A  0E05               	movlw	5
  9635  00195C  0100               	movlb	0	; () banked
  9636  00195E  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9637  001960  0E0F               	movlw	15
  9638  001962  0100               	movlb	0	; () banked
  9639  001964  6FAB               	movwf	??_sensorTest& (0+255),b
  9640  001966  0EF1               	movlw	241
  9641  001968                     u7487:
  9642  001968  2EE8               	decfsz	wreg,f,c
  9643  00196A  D7FE               	bra	u7487
  9644  00196C  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9645  00196E  D7FC               	bra	u7487
  9646  001970  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9647  001972  D7FA               	bra	u7487
  9648  001974                     l1059:
  9649  001974  A281               	btfss	3969,1,c	;volatile
  9650  001976  D7FE               	goto	l1059
  9651  001978                     l1062:
  9652  001978  B281               	btfsc	3969,1,c	;volatile
  9653  00197A  D7FE               	goto	l1062
  9654                           
  9655                           ;Test.c: 127: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
  9656  00197C  0E01               	movlw	1
  9657  00197E  ECC1  F023         	call	_lcdInst
  9658  001982  0E68               	movlw	104
  9659  001984  0100               	movlb	0	; () banked
  9660  001986  6FAB               	movwf	??_sensorTest& (0+255),b
  9661  001988  0EE4               	movlw	228
  9662  00198A                     u7497:
  9663  00198A  2EE8               	decfsz	wreg,f,c
  9664  00198C  D7FE               	bra	u7497
  9665  00198E  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9666  001990  D7FC               	bra	u7497
  9667  001992  F000               	nop	
  9668  001994  0E80               	movlw	128
  9669  001996  ECC1  F023         	call	_lcdInst
  9670                           
  9671                           ;Test.c: 132: printf("TST: IR SNSR");
  9672  00199A  0E29               	movlw	low STR_79
  9673  00199C  0100               	movlb	0	; () banked
  9674  00199E  6F8E               	movwf	printf@f& (0+255),b
  9675  0019A0  0EFF               	movlw	high STR_79
  9676  0019A2  0100               	movlb	0	; () banked
  9677  0019A4  6F8F               	movwf	(printf@f+1)& (0+255),b
  9678  0019A6  ECB8  F008         	call	_printf	;wreg free
  9679                           
  9680                           ;Test.c: 133: _delay((unsigned long)((100)*(32000000/4000.0)));
  9681  0019AA  0E05               	movlw	5
  9682  0019AC  0100               	movlb	0	; () banked
  9683  0019AE  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9684  0019B0  0E0F               	movlw	15
  9685  0019B2  0100               	movlb	0	; () banked
  9686  0019B4  6FAB               	movwf	??_sensorTest& (0+255),b
  9687  0019B6  0EF1               	movlw	241
  9688  0019B8                     u7507:
  9689  0019B8  2EE8               	decfsz	wreg,f,c
  9690  0019BA  D7FE               	bra	u7507
  9691  0019BC  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9692  0019BE  D7FC               	bra	u7507
  9693  0019C0  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9694  0019C2  D7FA               	bra	u7507
  9695                           
  9696                           ;Test.c: 134: LATCbits.LATC5 = 1;
  9697  0019C4  8A8B               	bsf	3979,5,c	;volatile
  9698                           
  9699                           ;Test.c: 135: while(PORTBbits.RB1 == 0){
  9700  0019C6  D05C               	goto	l6589
  9701  0019C8                     l6571:
  9702                           
  9703                           ;Test.c: 136: readADC(0);
  9704  0019C8  0E00               	movlw	0
  9705  0019CA  ECB6  F022         	call	_readADC
  9706                           
  9707                           ;Test.c: 137: int res = ADRESH<<8 | ADRESL;
  9708  0019CE  50C3               	movf	4035,w,c	;volatile
  9709  0019D0  CFC4 F0AB          	movff	4036,??_sensorTest	;volatile
  9710  0019D4  0100               	movlb	0	; () banked
  9711  0019D6  6BAC               	clrf	(??_sensorTest+1)& (0+255),b
  9712  0019D8  C0AB  F0AC         	movff	??_sensorTest,??_sensorTest+1
  9713  0019DC  0100               	movlb	0	; () banked
  9714  0019DE  6BAB               	clrf	??_sensorTest& (0+255),b
  9715  0019E0  0100               	movlb	0	; () banked
  9716  0019E2  11AB               	iorwf	??_sensorTest& (0+255),w,b
  9717  0019E4  0100               	movlb	0	; () banked
  9718  0019E6  6FAD               	movwf	sensorTest@res& (0+255),b
  9719  0019E8  0100               	movlb	0	; () banked
  9720  0019EA  51AC               	movf	(??_sensorTest+1)& (0+255),w,b
  9721  0019EC  0100               	movlb	0	; () banked
  9722  0019EE  6FAE               	movwf	(sensorTest@res+1)& (0+255),b
  9723                           
  9724                           ; BSR set to: 0
  9725                           ;Test.c: 138: IR_signal = (res > 900) ? 1 : 0;
  9726  0019F0  0100               	movlb	0	; () banked
  9727  0019F2  BFAE               	btfsc	(sensorTest@res+1)& (0+255),7,b
  9728  0019F4  D00A               	goto	u5050
  9729  0019F6  0E85               	movlw	133
  9730  0019F8  0100               	movlb	0	; () banked
  9731  0019FA  5DAD               	subwf	sensorTest@res& (0+255),w,b
  9732  0019FC  0E03               	movlw	3
  9733  0019FE  0100               	movlb	0	; () banked
  9734  001A00  59AE               	subwfb	(sensorTest@res+1)& (0+255),w,b
  9735  001A02  A0D8               	btfss	status,0,c
  9736  001A04  D002               	goto	u5050
  9737  001A06  0E01               	movlw	1
  9738  001A08  D001               	goto	u5060
  9739  001A0A                     u5050:
  9740  001A0A  0E00               	movlw	0
  9741  001A0C                     u5060:
  9742  001A0C  0100               	movlb	0	; () banked
  9743  001A0E  6FDA               	movwf	_IR_signal& (0+255),b
  9744  001A10  6BDB               	clrf	(_IR_signal+1)& (0+255),b
  9745                           
  9746                           ;Test.c: 140: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
  9747  001A12  0E01               	movlw	1
  9748  001A14  ECC1  F023         	call	_lcdInst
  9749  001A18  0E68               	movlw	104
  9750  001A1A  0100               	movlb	0	; () banked
  9751  001A1C  6FAB               	movwf	??_sensorTest& (0+255),b
  9752  001A1E  0EE4               	movlw	228
  9753  001A20                     u7517:
  9754  001A20  2EE8               	decfsz	wreg,f,c
  9755  001A22  D7FE               	bra	u7517
  9756  001A24  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9757  001A26  D7FC               	bra	u7517
  9758  001A28  F000               	nop	
  9759  001A2A  0E80               	movlw	128
  9760  001A2C  ECC1  F023         	call	_lcdInst
  9761                           
  9762                           ;Test.c: 141: printf("IR_signal: %d ", IR_signal);
  9763  001A30  0E4E               	movlw	low STR_80
  9764  001A32  0100               	movlb	0	; () banked
  9765  001A34  6F8E               	movwf	printf@f& (0+255),b
  9766  001A36  0EFE               	movlw	high STR_80
  9767  001A38  0100               	movlb	0	; () banked
  9768  001A3A  6F8F               	movwf	(printf@f+1)& (0+255),b
  9769  001A3C  C0DA  F090         	movff	_IR_signal,?_printf+2
  9770  001A40  C0DB  F091         	movff	_IR_signal+1,?_printf+3
  9771  001A44  ECB8  F008         	call	_printf	;wreg free
  9772                           
  9773                           ;Test.c: 142: lcdInst(0b11000000);;
  9774  001A48  0EC0               	movlw	192
  9775  001A4A  ECC1  F023         	call	_lcdInst
  9776                           
  9777                           ;Test.c: 143: printf("%d", res);
  9778  001A4E  0E6D               	movlw	low (STR_27+16)
  9779  001A50  0100               	movlb	0	; () banked
  9780  001A52  6F8E               	movwf	printf@f& (0+255),b
  9781  001A54  0EFB               	movlw	high (STR_27+16)
  9782  001A56  0100               	movlb	0	; () banked
  9783  001A58  6F8F               	movwf	(printf@f+1)& (0+255),b
  9784  001A5A  C0AD  F090         	movff	sensorTest@res,?_printf+2
  9785  001A5E  C0AE  F091         	movff	sensorTest@res+1,?_printf+3
  9786  001A62  ECB8  F008         	call	_printf	;wreg free
  9787                           
  9788                           ;Test.c: 144: _delay((unsigned long)((100)*(32000000/4000.0)));
  9789  001A66  0E05               	movlw	5
  9790  001A68  0100               	movlb	0	; () banked
  9791  001A6A  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9792  001A6C  0E0F               	movlw	15
  9793  001A6E  0100               	movlb	0	; () banked
  9794  001A70  6FAB               	movwf	??_sensorTest& (0+255),b
  9795  001A72  0EF1               	movlw	241
  9796  001A74                     u7527:
  9797  001A74  2EE8               	decfsz	wreg,f,c
  9798  001A76  D7FE               	bra	u7527
  9799  001A78  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9800  001A7A  D7FC               	bra	u7527
  9801  001A7C  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9802  001A7E  D7FA               	bra	u7527
  9803  001A80                     l6589:
  9804  001A80  A281               	btfss	3969,1,c	;volatile
  9805  001A82  D7A2               	goto	l6571
  9806                           
  9807                           ;Test.c: 145: }
  9808                           ;Test.c: 146: LATCbits.LATC5 = 0;
  9809  001A84  9A8B               	bcf	3979,5,c	;volatile
  9810                           
  9811                           ;Test.c: 153: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
  9812  001A86  0E01               	movlw	1
  9813  001A88  ECC1  F023         	call	_lcdInst
  9814  001A8C  0E68               	movlw	104
  9815  001A8E  0100               	movlb	0	; () banked
  9816  001A90  6FAB               	movwf	??_sensorTest& (0+255),b
  9817  001A92  0EE4               	movlw	228
  9818  001A94                     u7537:
  9819  001A94  2EE8               	decfsz	wreg,f,c
  9820  001A96  D7FE               	bra	u7537
  9821  001A98  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9822  001A9A  D7FC               	bra	u7537
  9823  001A9C  F000               	nop	
  9824  001A9E  0E80               	movlw	128
  9825  001AA0  ECC1  F023         	call	_lcdInst
  9826                           
  9827                           ;Test.c: 154: printf("TST: MAGNETISM");
  9828  001AA4  0E7B               	movlw	low STR_82
  9829  001AA6  0100               	movlb	0	; () banked
  9830  001AA8  6F8E               	movwf	printf@f& (0+255),b
  9831  001AAA  0EFE               	movlw	high STR_82
  9832  001AAC  0100               	movlb	0	; () banked
  9833  001AAE  6F8F               	movwf	(printf@f+1)& (0+255),b
  9834  001AB0  ECB8  F008         	call	_printf	;wreg free
  9835                           
  9836                           ;Test.c: 155: _delay((unsigned long)((100)*(32000000/4000.0)));
  9837  001AB4  0E05               	movlw	5
  9838  001AB6  0100               	movlb	0	; () banked
  9839  001AB8  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9840  001ABA  0E0F               	movlw	15
  9841  001ABC  0100               	movlb	0	; () banked
  9842  001ABE  6FAB               	movwf	??_sensorTest& (0+255),b
  9843  001AC0  0EF1               	movlw	241
  9844  001AC2                     u7547:
  9845  001AC2  2EE8               	decfsz	wreg,f,c
  9846  001AC4  D7FE               	bra	u7547
  9847  001AC6  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9848  001AC8  D7FC               	bra	u7547
  9849  001ACA  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9850  001ACC  D7FA               	bra	u7547
  9851                           
  9852                           ;Test.c: 156: while(PORTBbits.RB1 == 0){
  9853  001ACE  D021               	goto	l6607
  9854  001AD0                     l6601:
  9855                           
  9856                           ;Test.c: 157: readMAG();
  9857  001AD0  ECA9  F020         	call	_readMAG	;wreg free
  9858                           
  9859                           ;Test.c: 158: lcdInst(0b10000000);;
  9860  001AD4  0E80               	movlw	128
  9861  001AD6  ECC1  F023         	call	_lcdInst
  9862                           
  9863                           ;Test.c: 159: lcdInst(0b11000000);;
  9864  001ADA  0EC0               	movlw	192
  9865  001ADC  ECC1  F023         	call	_lcdInst
  9866                           
  9867                           ;Test.c: 160: printf("MAG_signal: %d ", MAG_signal);
  9868  001AE0  0E1E               	movlw	low STR_83
  9869  001AE2  0100               	movlb	0	; () banked
  9870  001AE4  6F8E               	movwf	printf@f& (0+255),b
  9871  001AE6  0EFE               	movlw	high STR_83
  9872  001AE8  0100               	movlb	0	; () banked
  9873  001AEA  6F8F               	movwf	(printf@f+1)& (0+255),b
  9874  001AEC  C0DC  F090         	movff	_MAG_signal,?_printf+2
  9875  001AF0  C0DD  F091         	movff	_MAG_signal+1,?_printf+3
  9876  001AF4  ECB8  F008         	call	_printf	;wreg free
  9877                           
  9878                           ;Test.c: 161: _delay((unsigned long)((100)*(32000000/4000.0)));
  9879  001AF8  0E05               	movlw	5
  9880  001AFA  0100               	movlb	0	; () banked
  9881  001AFC  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9882  001AFE  0E0F               	movlw	15
  9883  001B00  0100               	movlb	0	; () banked
  9884  001B02  6FAB               	movwf	??_sensorTest& (0+255),b
  9885  001B04  0EF1               	movlw	241
  9886  001B06                     u7557:
  9887  001B06  2EE8               	decfsz	wreg,f,c
  9888  001B08  D7FE               	bra	u7557
  9889  001B0A  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9890  001B0C  D7FC               	bra	u7557
  9891  001B0E  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9892  001B10  D7FA               	bra	u7557
  9893  001B12                     l6607:
  9894  001B12  A281               	btfss	3969,1,c	;volatile
  9895  001B14  D7DD               	goto	l6601
  9896                           
  9897                           ;Test.c: 162: }
  9898                           ;Test.c: 167: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
  9899  001B16  0E01               	movlw	1
  9900  001B18  ECC1  F023         	call	_lcdInst
  9901  001B1C  0E68               	movlw	104
  9902  001B1E  0100               	movlb	0	; () banked
  9903  001B20  6FAB               	movwf	??_sensorTest& (0+255),b
  9904  001B22  0EE4               	movlw	228
  9905  001B24                     u7567:
  9906  001B24  2EE8               	decfsz	wreg,f,c
  9907  001B26  D7FE               	bra	u7567
  9908  001B28  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9909  001B2A  D7FC               	bra	u7567
  9910  001B2C  F000               	nop	
  9911  001B2E  0E80               	movlw	128
  9912  001B30  ECC1  F023         	call	_lcdInst
  9913                           
  9914                           ;Test.c: 168: printf("TST: COND");
  9915  001B34  0E7D               	movlw	low STR_84
  9916  001B36  0100               	movlb	0	; () banked
  9917  001B38  6F8E               	movwf	printf@f& (0+255),b
  9918  001B3A  0EFF               	movlw	high STR_84
  9919  001B3C  0100               	movlb	0	; () banked
  9920  001B3E  6F8F               	movwf	(printf@f+1)& (0+255),b
  9921  001B40  ECB8  F008         	call	_printf	;wreg free
  9922                           
  9923                           ;Test.c: 169: _delay((unsigned long)((100)*(32000000/4000.0)));
  9924  001B44  0E05               	movlw	5
  9925  001B46  0100               	movlb	0	; () banked
  9926  001B48  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9927  001B4A  0E0F               	movlw	15
  9928  001B4C  0100               	movlb	0	; () banked
  9929  001B4E  6FAB               	movwf	??_sensorTest& (0+255),b
  9930  001B50  0EF1               	movlw	241
  9931  001B52                     u7577:
  9932  001B52  2EE8               	decfsz	wreg,f,c
  9933  001B54  D7FE               	bra	u7577
  9934  001B56  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9935  001B58  D7FC               	bra	u7577
  9936  001B5A  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9937  001B5C  D7FA               	bra	u7577
  9938  001B5E                     l6619:
  9939                           
  9940                           ;Test.c: 171: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
  9941  001B5E  0E01               	movlw	1
  9942  001B60  ECC1  F023         	call	_lcdInst
  9943  001B64  0E68               	movlw	104
  9944  001B66  0100               	movlb	0	; () banked
  9945  001B68  6FAB               	movwf	??_sensorTest& (0+255),b
  9946  001B6A  0EE4               	movlw	228
  9947  001B6C                     u7587:
  9948  001B6C  2EE8               	decfsz	wreg,f,c
  9949  001B6E  D7FE               	bra	u7587
  9950  001B70  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9951  001B72  D7FC               	bra	u7587
  9952  001B74  F000               	nop	
  9953  001B76  0E80               	movlw	128
  9954  001B78  ECC1  F023         	call	_lcdInst
  9955                           
  9956                           ;Test.c: 172: printf("TST: COND");
  9957  001B7C  0E7D               	movlw	low STR_84
  9958  001B7E  0100               	movlb	0	; () banked
  9959  001B80  6F8E               	movwf	printf@f& (0+255),b
  9960  001B82  0EFF               	movlw	high STR_84
  9961  001B84  0100               	movlb	0	; () banked
  9962  001B86  6F8F               	movwf	(printf@f+1)& (0+255),b
  9963  001B88  ECB8  F008         	call	_printf	;wreg free
  9964                           
  9965                           ;Test.c: 173: while(PORTBbits.RB1 == 0){
  9966  001B8C  D01B               	goto	l6631
  9967  001B8E                     l6627:
  9968                           
  9969                           ;Test.c: 177: lcdInst(0b10000000);;lcdInst(0b11000000);;
  9970  001B8E  0E80               	movlw	128
  9971  001B90  ECC1  F023         	call	_lcdInst
  9972  001B94  0EC0               	movlw	192
  9973  001B96  ECC1  F023         	call	_lcdInst
  9974                           
  9975                           ;Test.c: 178: printf("COND: %d", PORTAbits.RA2);
  9976  001B9A  0EA5               	movlw	low STR_86
  9977  001B9C  0100               	movlb	0	; () banked
  9978  001B9E  6F8E               	movwf	printf@f& (0+255),b
  9979  001BA0  0EFF               	movlw	high STR_86
  9980  001BA2  0100               	movlb	0	; () banked
  9981  001BA4  6F8F               	movwf	(printf@f+1)& (0+255),b
  9982  001BA6  A480               	btfss	3968,2,c	;volatile
  9983  001BA8  D004               	goto	u5090
  9984  001BAA  0100               	movlb	0	; () banked
  9985  001BAC  6BAB               	clrf	??_sensorTest& (0+255),b
  9986  001BAE  2BAB               	incf	??_sensorTest& (0+255),f,b
  9987  001BB0  D002               	goto	u5098
  9988  001BB2                     u5090:
  9989  001BB2  0100               	movlb	0	; () banked
  9990  001BB4  6BAB               	clrf	??_sensorTest& (0+255),b
  9991  001BB6                     u5098:
  9992  001BB6  0100               	movlb	0	; () banked
  9993  001BB8  51AB               	movf	??_sensorTest& (0+255),w,b
  9994  001BBA  0100               	movlb	0	; () banked
  9995  001BBC  6F90               	movwf	(?_printf+2)& (0+255),b
  9996  001BBE  6B91               	clrf	(?_printf+3)& (0+255),b
  9997  001BC0  ECB8  F008         	call	_printf	;wreg free
  9998  001BC4                     l6631:
  9999  001BC4  A281               	btfss	3969,1,c	;volatile
 10000  001BC6  D7E3               	goto	l6627
 10001                           
 10002                           ;Test.c: 179: }
 10003                           ;Test.c: 180: if(PORTB >> 4 == 0b1111){
 10004  001BC8  3881               	swapf	3969,w,c	;volatile
 10005  001BCA  0B0F               	andlw	15
 10006  001BCC  0A0F               	xorlw	15
 10007  001BCE  B4D8               	btfsc	status,2,c
 10008  001BD0  0012               	return	
 10009                           
 10010                           ;Test.c: 183: else{
 10011                           ;Test.c: 184: LATAbits.LATA3 = 1;
 10012                           
 10013                           ;Test.c: 182: }
 10014                           
 10015                           ;Test.c: 181: break;
 10016  001BD2  8689               	bsf	3977,3,c	;volatile
 10017                           
 10018                           ;Test.c: 185: while(PORTBbits.RB1 == 1){
 10019  001BD4  D01B               	goto	l6643
 10020  001BD6                     l6639:
 10021                           
 10022                           ;Test.c: 187: lcdInst(0b10000000);;lcdInst(0b11000000);;
 10023  001BD6  0E80               	movlw	128
 10024  001BD8  ECC1  F023         	call	_lcdInst
 10025  001BDC  0EC0               	movlw	192
 10026  001BDE  ECC1  F023         	call	_lcdInst
 10027                           
 10028                           ;Test.c: 188: printf("COND: %d", PORTAbits.RA2);
 10029  001BE2  0EA5               	movlw	low STR_86
 10030  001BE4  0100               	movlb	0	; () banked
 10031  001BE6  6F8E               	movwf	printf@f& (0+255),b
 10032  001BE8  0EFF               	movlw	high STR_86
 10033  001BEA  0100               	movlb	0	; () banked
 10034  001BEC  6F8F               	movwf	(printf@f+1)& (0+255),b
 10035  001BEE  A480               	btfss	3968,2,c	;volatile
 10036  001BF0  D004               	goto	u5120
 10037  001BF2  0100               	movlb	0	; () banked
 10038  001BF4  6BAB               	clrf	??_sensorTest& (0+255),b
 10039  001BF6  2BAB               	incf	??_sensorTest& (0+255),f,b
 10040  001BF8  D002               	goto	u5128
 10041  001BFA                     u5120:
 10042  001BFA  0100               	movlb	0	; () banked
 10043  001BFC  6BAB               	clrf	??_sensorTest& (0+255),b
 10044  001BFE                     u5128:
 10045  001BFE  0100               	movlb	0	; () banked
 10046  001C00  51AB               	movf	??_sensorTest& (0+255),w,b
 10047  001C02  0100               	movlb	0	; () banked
 10048  001C04  6F90               	movwf	(?_printf+2)& (0+255),b
 10049  001C06  6B91               	clrf	(?_printf+3)& (0+255),b
 10050  001C08  ECB8  F008         	call	_printf	;wreg free
 10051  001C0C                     l6643:
 10052  001C0C  B281               	btfsc	3969,1,c	;volatile
 10053  001C0E  D7E3               	goto	l6639
 10054                           
 10055                           ;Test.c: 189: }
 10056                           ;Test.c: 190: LATAbits.LATA3 = ~1;
 10057  001C10  9689               	bcf	3977,3,c	;volatile
 10058  001C12  D7A5               	goto	l6619
 10059  001C14                     __end_of_sensorTest:
 10060                           	opt stack 0
 10061                           tblptru	equ	0xFF8
 10062                           tblptrh	equ	0xFF7
 10063                           tblptrl	equ	0xFF6
 10064                           tablat	equ	0xFF5
 10065                           prodh	equ	0xFF4
 10066                           prodl	equ	0xFF3
 10067                           intcon	equ	0xFF2
 10068                           intcon2	equ	0xFF1
 10069                           intcon3	equ	0xFF0
 10070                           postinc0	equ	0xFEE
 10071                           wreg	equ	0xFE8
 10072                           postdec1	equ	0xFE5
 10073                           fsr1l	equ	0xFE1
 10074                           indf2	equ	0xFDF
 10075                           postinc2	equ	0xFDE
 10076                           postdec2	equ	0xFDD
 10077                           fsr2h	equ	0xFDA
 10078                           fsr2l	equ	0xFD9
 10079                           status	equ	0xFD8
 10080                           
 10081 ;; *************** function _readMAG *****************
 10082 ;; Defined at:
 10083 ;;		line 29 in file "ADCFunctionality.c"
 10084 ;; Parameters:    Size  Location     Type
 10085 ;;		None
 10086 ;; Auto vars:     Size  Location     Type
 10087 ;;  res             2    4[BANK0 ] int 
 10088 ;; Return value:  Size  Location     Type
 10089 ;;                  1    wreg      void 
 10090 ;; Registers used:
 10091 ;;		wreg, status,2, status,0, cstack
 10092 ;; Tracked objects:
 10093 ;;		On entry : 0/0
 10094 ;;		On exit  : 0/0
 10095 ;;		Unchanged: 0/0
 10096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10097 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10098 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10099 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10100 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10101 ;;Total ram usage:        4 bytes
 10102 ;; Hardware stack levels used:    1
 10103 ;; Hardware stack levels required when called:    8
 10104 ;; This function calls:
 10105 ;;		_readADC
 10106 ;; This function is called by:
 10107 ;;		_ID
 10108 ;;		_sensorTest
 10109 ;; This function uses a non-reentrant model
 10110 ;;
 10111                           
 10112                           	psect	text37
 10113  004152                     __ptext37:
 10114                           	opt stack 0
 10115  004152                     _readMAG:
 10116                           	opt stack 20
 10117                           
 10118                           ;ADCFunctionality.c: 30: readADC(1);
 10119                           
 10120                           ;incstack = 0
 10121  004152  0E01               	movlw	1
 10122  004154  ECB6  F022         	call	_readADC
 10123                           
 10124                           ;ADCFunctionality.c: 31: int res = ADRESH<<8 | ADRESL;
 10125  004158  50C3               	movf	4035,w,c	;volatile
 10126  00415A  CFC4 F082          	movff	4036,??_readMAG	;volatile
 10127  00415E  0100               	movlb	0	; () banked
 10128  004160  6B83               	clrf	(??_readMAG+1)& (0+255),b
 10129  004162  C082  F083         	movff	??_readMAG,??_readMAG+1
 10130  004166  0100               	movlb	0	; () banked
 10131  004168  6B82               	clrf	??_readMAG& (0+255),b
 10132  00416A  0100               	movlb	0	; () banked
 10133  00416C  1182               	iorwf	??_readMAG& (0+255),w,b
 10134  00416E  0100               	movlb	0	; () banked
 10135  004170  6F84               	movwf	readMAG@res& (0+255),b
 10136  004172  0100               	movlb	0	; () banked
 10137  004174  5183               	movf	(??_readMAG+1)& (0+255),w,b
 10138  004176  0100               	movlb	0	; () banked
 10139  004178  6F85               	movwf	(readMAG@res+1)& (0+255),b
 10140                           
 10141                           ; BSR set to: 0
 10142                           ;ADCFunctionality.c: 32: MAG_signal = (res < 150) ? 1 : 0;
 10143  00417A  0100               	movlb	0	; () banked
 10144  00417C  BF85               	btfsc	(readMAG@res+1)& (0+255),7,b
 10145  00417E  D008               	goto	u4461
 10146  004180  0100               	movlb	0	; () banked
 10147  004182  5185               	movf	(readMAG@res+1)& (0+255),w,b
 10148  004184  E107               	bnz	u4460
 10149  004186  0E96               	movlw	150
 10150  004188  0100               	movlb	0	; () banked
 10151  00418A  5D84               	subwf	readMAG@res& (0+255),w,b
 10152  00418C  B0D8               	btfsc	status,0,c
 10153  00418E  D002               	goto	u4460
 10154  004190                     u4461:
 10155  004190  0E01               	movlw	1
 10156  004192  D001               	goto	u4470
 10157  004194                     u4460:
 10158  004194  0E00               	movlw	0
 10159  004196                     u4470:
 10160  004196  0100               	movlb	0	; () banked
 10161  004198  6FDC               	movwf	_MAG_signal& (0+255),b
 10162  00419A  6BDD               	clrf	(_MAG_signal+1)& (0+255),b
 10163                           
 10164                           ; BSR set to: 0
 10165  00419C  0012               	return		;funcret
 10166  00419E                     __end_of_readMAG:
 10167                           	opt stack 0
 10168                           tblptru	equ	0xFF8
 10169                           tblptrh	equ	0xFF7
 10170                           tblptrl	equ	0xFF6
 10171                           tablat	equ	0xFF5
 10172                           prodh	equ	0xFF4
 10173                           prodl	equ	0xFF3
 10174                           intcon	equ	0xFF2
 10175                           intcon2	equ	0xFF1
 10176                           intcon3	equ	0xFF0
 10177                           postinc0	equ	0xFEE
 10178                           wreg	equ	0xFE8
 10179                           postdec1	equ	0xFE5
 10180                           fsr1l	equ	0xFE1
 10181                           indf2	equ	0xFDF
 10182                           postinc2	equ	0xFDE
 10183                           postdec2	equ	0xFDD
 10184                           fsr2h	equ	0xFDA
 10185                           fsr2l	equ	0xFD9
 10186                           status	equ	0xFD8
 10187                           
 10188 ;; *************** function _readADC *****************
 10189 ;; Defined at:
 10190 ;;		line 15 in file "ADCFunctionality.c"
 10191 ;; Parameters:    Size  Location     Type
 10192 ;;  channel         1    wreg     unsigned char 
 10193 ;; Auto vars:     Size  Location     Type
 10194 ;;  channel         1    1[BANK0 ] unsigned char 
 10195 ;; Return value:  Size  Location     Type
 10196 ;;                  1    wreg      void 
 10197 ;; Registers used:
 10198 ;;		wreg, status,2, status,0, cstack
 10199 ;; Tracked objects:
 10200 ;;		On entry : 0/0
 10201 ;;		On exit  : 0/0
 10202 ;;		Unchanged: 0/0
 10203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10204 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10205 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10206 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10207 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10208 ;;Total ram usage:        2 bytes
 10209 ;; Hardware stack levels used:    1
 10210 ;; Hardware stack levels required when called:    7
 10211 ;; This function calls:
 10212 ;;		Nothing
 10213 ;; This function is called by:
 10214 ;;		_readIR
 10215 ;;		_readMAG
 10216 ;;		_sensorTest
 10217 ;; This function uses a non-reentrant model
 10218 ;;
 10219                           
 10220                           	psect	text38
 10221  00456C                     __ptext38:
 10222                           	opt stack 0
 10223  00456C                     _readADC:
 10224                           	opt stack 19
 10225                           
 10226                           ; BSR set to: 0
 10227                           ;incstack = 0
 10228                           ;readADC@channel stored from wreg
 10229  00456C  0100               	movlb	0	; () banked
 10230  00456E  6F81               	movwf	readADC@channel& (0+255),b
 10231                           
 10232                           ;ADCFunctionality.c: 17: ADCON0 = channel << 2;
 10233  004570  0100               	movlb	0	; () banked
 10234  004572  4581               	rlncf	readADC@channel& (0+255),w,b
 10235  004574  46E8               	rlncf	wreg,f,c
 10236  004576  0BFC               	andlw	252
 10237  004578  6EC2               	movwf	4034,c	;volatile
 10238                           
 10239                           ; BSR set to: 0
 10240                           ;ADCFunctionality.c: 18: ADCON0bits.ADON = 1;
 10241  00457A  80C2               	bsf	4034,0,c	;volatile
 10242                           
 10243                           ; BSR set to: 0
 10244                           ;ADCFunctionality.c: 19: ADCON0bits.GO = 1;
 10245  00457C  82C2               	bsf	4034,1,c	;volatile
 10246                           
 10247                           ;ADCFunctionality.c: 20: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(32000
      +                          000/4000.0)));}
 10248  00457E  D009               	goto	l5233
 10249  004580                     l5231:
 10250  004580  0E34               	movlw	52
 10251  004582  0100               	movlb	0	; () banked
 10252  004584  6F80               	movwf	??_readADC& (0+255),b
 10253  004586  0EF1               	movlw	241
 10254  004588                     u7597:
 10255  004588  2EE8               	decfsz	wreg,f,c
 10256  00458A  D7FE               	bra	u7597
 10257  00458C  2F80               	decfsz	??_readADC& (0+255),f,b
 10258  00458E  D7FC               	bra	u7597
 10259  004590  D000               	nop2	
 10260  004592                     l5233:
 10261  004592  A2C2               	btfss	4034,1,c	;volatile
 10262  004594  0012               	return	
 10263  004596  D7F4               	goto	l5231
 10264  004598                     __end_of_readADC:
 10265                           	opt stack 0
 10266                           tblptru	equ	0xFF8
 10267                           tblptrh	equ	0xFF7
 10268                           tblptrl	equ	0xFF6
 10269                           tablat	equ	0xFF5
 10270                           prodh	equ	0xFF4
 10271                           prodl	equ	0xFF3
 10272                           intcon	equ	0xFF2
 10273                           intcon2	equ	0xFF1
 10274                           intcon3	equ	0xFF0
 10275                           postinc0	equ	0xFEE
 10276                           wreg	equ	0xFE8
 10277                           postdec1	equ	0xFE5
 10278                           fsr1l	equ	0xFE1
 10279                           indf2	equ	0xFDF
 10280                           postinc2	equ	0xFDE
 10281                           postdec2	equ	0xFDD
 10282                           fsr2h	equ	0xFDA
 10283                           fsr2l	equ	0xFD9
 10284                           status	equ	0xFD8
 10285                           
 10286 ;; *************** function _algorithmTest *****************
 10287 ;; Defined at:
 10288 ;;		line 74 in file "Test.c"
 10289 ;; Parameters:    Size  Location     Type
 10290 ;;		None
 10291 ;; Auto vars:     Size  Location     Type
 10292 ;;		None
 10293 ;; Return value:  Size  Location     Type
 10294 ;;                  1    wreg      void 
 10295 ;; Registers used:
 10296 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10297 ;; Tracked objects:
 10298 ;;		On entry : 0/0
 10299 ;;		On exit  : 0/0
 10300 ;;		Unchanged: 0/0
 10301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10302 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10303 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10304 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10305 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10306 ;;Total ram usage:        2 bytes
 10307 ;; Hardware stack levels used:    1
 10308 ;; Hardware stack levels required when called:   10
 10309 ;; This function calls:
 10310 ;;		_lcdInst
 10311 ;;		_printf
 10312 ;; This function is called by:
 10313 ;;		_Test
 10314 ;; This function uses a non-reentrant model
 10315 ;;
 10316                           
 10317                           	psect	text39
 10318  003532                     __ptext39:
 10319                           	opt stack 0
 10320  003532                     _algorithmTest:
 10321                           	opt stack 19
 10322                           
 10323                           ;Test.c: 76: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 10324                           
 10325                           ;incstack = 0
 10326  003532  0E01               	movlw	1
 10327  003534  ECC1  F023         	call	_lcdInst
 10328  003538  0E68               	movlw	104
 10329  00353A  0100               	movlb	0	; () banked
 10330  00353C  6FAB               	movwf	??_algorithmTest& (0+255),b
 10331  00353E  0EE4               	movlw	228
 10332  003540                     u7607:
 10333  003540  2EE8               	decfsz	wreg,f,c
 10334  003542  D7FE               	bra	u7607
 10335  003544  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 10336  003546  D7FC               	bra	u7607
 10337  003548  F000               	nop	
 10338  00354A  0E80               	movlw	128
 10339  00354C  ECC1  F023         	call	_lcdInst
 10340                           
 10341                           ;Test.c: 77: printf("ALGORITHM TEST");
 10342  003550  0EC6               	movlw	low STR_70
 10343  003552  0100               	movlb	0	; () banked
 10344  003554  6F8E               	movwf	printf@f& (0+255),b
 10345  003556  0EFE               	movlw	high STR_70
 10346  003558  0100               	movlb	0	; () banked
 10347  00355A  6F8F               	movwf	(printf@f+1)& (0+255),b
 10348  00355C  ECB8  F008         	call	_printf	;wreg free
 10349                           
 10350                           ;Test.c: 78: lcdInst(0b11000000);;
 10351  003560  0EC0               	movlw	192
 10352  003562  ECC1  F023         	call	_lcdInst
 10353                           
 10354                           ;Test.c: 79: printf("PUSH TO START");
 10355  003566  0EFF               	movlw	low STR_71
 10356  003568  0100               	movlb	0	; () banked
 10357  00356A  6F8E               	movwf	printf@f& (0+255),b
 10358  00356C  0EFE               	movlw	high STR_71
 10359  00356E  0100               	movlb	0	; () banked
 10360  003570  6F8F               	movwf	(printf@f+1)& (0+255),b
 10361  003572  ECB8  F008         	call	_printf	;wreg free
 10362                           
 10363                           ;Test.c: 80: _delay((unsigned long)((100)*(32000000/4000.0)));
 10364  003576  0E05               	movlw	5
 10365  003578  0100               	movlb	0	; () banked
 10366  00357A  6FAC               	movwf	(??_algorithmTest+1)& (0+255),b
 10367  00357C  0E0F               	movlw	15
 10368  00357E  0100               	movlb	0	; () banked
 10369  003580  6FAB               	movwf	??_algorithmTest& (0+255),b
 10370  003582  0EF1               	movlw	241
 10371  003584                     u7617:
 10372  003584  2EE8               	decfsz	wreg,f,c
 10373  003586  D7FE               	bra	u7617
 10374  003588  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 10375  00358A  D7FC               	bra	u7617
 10376  00358C  2FAC               	decfsz	(??_algorithmTest+1)& (0+255),f,b
 10377  00358E  D7FA               	bra	u7617
 10378  003590                     l1050:
 10379  003590  A281               	btfss	3969,1,c	;volatile
 10380  003592  D7FE               	goto	l1050
 10381  003594                     l1053:
 10382  003594  B281               	btfsc	3969,1,c	;volatile
 10383  003596  D7FE               	goto	l1053
 10384                           
 10385                           ;Test.c: 83: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 10386  003598  0E01               	movlw	1
 10387  00359A  ECC1  F023         	call	_lcdInst
 10388  00359E  0E68               	movlw	104
 10389  0035A0  0100               	movlb	0	; () banked
 10390  0035A2  6FAB               	movwf	??_algorithmTest& (0+255),b
 10391  0035A4  0EE4               	movlw	228
 10392  0035A6                     u7627:
 10393  0035A6  2EE8               	decfsz	wreg,f,c
 10394  0035A8  D7FE               	bra	u7627
 10395  0035AA  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 10396  0035AC  D7FC               	bra	u7627
 10397  0035AE  F000               	nop	
 10398  0035B0  0E80               	movlw	128
 10399  0035B2  ECC1  F023         	call	_lcdInst
 10400                           
 10401                           ;Test.c: 88: printf("ALG1: 9 POPNOTAB");
 10402  0035B6  0E75               	movlw	low STR_72
 10403  0035B8  0100               	movlb	0	; () banked
 10404  0035BA  6F8E               	movwf	printf@f& (0+255),b
 10405  0035BC  0EFC               	movlw	high STR_72
 10406  0035BE  0100               	movlb	0	; () banked
 10407  0035C0  6F8F               	movwf	(printf@f+1)& (0+255),b
 10408  0035C2  ECB8  F008         	call	_printf	;wreg free
 10409                           
 10410                           ;Test.c: 95: printf("ALG2: 12 CANS");
 10411  0035C6  0EE3               	movlw	low STR_73
 10412  0035C8  0100               	movlb	0	; () banked
 10413  0035CA  6F8E               	movwf	printf@f& (0+255),b
 10414  0035CC  0EFE               	movlw	high STR_73
 10415  0035CE  0100               	movlb	0	; () banked
 10416  0035D0  6F8F               	movwf	(printf@f+1)& (0+255),b
 10417  0035D2  ECB8  F008         	call	_printf	;wreg free
 10418                           
 10419                           ;Test.c: 104: printf("ALG3: 1 CAN");
 10420  0035D6  0E50               	movlw	low STR_74
 10421  0035D8  0100               	movlb	0	; () banked
 10422  0035DA  6F8E               	movwf	printf@f& (0+255),b
 10423  0035DC  0EFF               	movlw	high STR_74
 10424  0035DE  0100               	movlb	0	; () banked
 10425  0035E0  6F8F               	movwf	(printf@f+1)& (0+255),b
 10426  0035E2  ECB8  F008         	call	_printf	;wreg free
 10427                           
 10428                           ;Test.c: 110: printf("ALG4: ALL CANS");
 10429  0035E6  0EA8               	movlw	low STR_75
 10430  0035E8  0100               	movlb	0	; () banked
 10431  0035EA  6F8E               	movwf	printf@f& (0+255),b
 10432  0035EC  0EFE               	movlw	high STR_75
 10433  0035EE  0100               	movlb	0	; () banked
 10434  0035F0  6F8F               	movwf	(printf@f+1)& (0+255),b
 10435  0035F2  ECB8  F008         	call	_printf	;wreg free
 10436                           
 10437                           ;Test.c: 115: printf("ALG5: NO CANS");
 10438  0035F6  0EF1               	movlw	low STR_76
 10439  0035F8  0100               	movlb	0	; () banked
 10440  0035FA  6F8E               	movwf	printf@f& (0+255),b
 10441  0035FC  0EFE               	movlw	high STR_76
 10442  0035FE  0100               	movlb	0	; () banked
 10443  003600  6F8F               	movwf	(printf@f+1)& (0+255),b
 10444  003602  ECB8  F008         	call	_printf	;wreg free
 10445  003606  0012               	return		;funcret
 10446  003608                     __end_of_algorithmTest:
 10447                           	opt stack 0
 10448                           tblptru	equ	0xFF8
 10449                           tblptrh	equ	0xFF7
 10450                           tblptrl	equ	0xFF6
 10451                           tablat	equ	0xFF5
 10452                           prodh	equ	0xFF4
 10453                           prodl	equ	0xFF3
 10454                           intcon	equ	0xFF2
 10455                           intcon2	equ	0xFF1
 10456                           intcon3	equ	0xFF0
 10457                           postinc0	equ	0xFEE
 10458                           wreg	equ	0xFE8
 10459                           postdec1	equ	0xFE5
 10460                           fsr1l	equ	0xFE1
 10461                           indf2	equ	0xFDF
 10462                           postinc2	equ	0xFDE
 10463                           postdec2	equ	0xFDD
 10464                           fsr2h	equ	0xFDA
 10465                           fsr2l	equ	0xFD9
 10466                           status	equ	0xFD8
 10467                           
 10468 ;; *************** function _actuatorTest *****************
 10469 ;; Defined at:
 10470 ;;		line 195 in file "Test.c"
 10471 ;; Parameters:    Size  Location     Type
 10472 ;;		None
 10473 ;; Auto vars:     Size  Location     Type
 10474 ;;  i               1   45[BANK0 ] unsigned char 
 10475 ;;  i               1   67[BANK0 ] unsigned char 
 10476 ;;  i               1   66[BANK0 ] unsigned char 
 10477 ;;  i               1   65[BANK0 ] unsigned char 
 10478 ;;  i               1   64[BANK0 ] unsigned char 
 10479 ;;  i               1   63[BANK0 ] unsigned char 
 10480 ;;  i               1   62[BANK0 ] unsigned char 
 10481 ;;  i               1   61[BANK0 ] unsigned char 
 10482 ;;  i               1   60[BANK0 ] unsigned char 
 10483 ;;  i               1   59[BANK0 ] unsigned char 
 10484 ;;  i               1   58[BANK0 ] unsigned char 
 10485 ;;  i               1   57[BANK0 ] unsigned char 
 10486 ;;  i               1   56[BANK0 ] unsigned char 
 10487 ;;  i               1   55[BANK0 ] unsigned char 
 10488 ;;  i               1   54[BANK0 ] unsigned char 
 10489 ;;  i               1   53[BANK0 ] unsigned char 
 10490 ;;  i               1   52[BANK0 ] unsigned char 
 10491 ;;  i               1   51[BANK0 ] unsigned char 
 10492 ;;  i               1   50[BANK0 ] unsigned char 
 10493 ;;  i               1   49[BANK0 ] unsigned char 
 10494 ;;  i               1   48[BANK0 ] unsigned char 
 10495 ;;  i               1   47[BANK0 ] unsigned char 
 10496 ;;  i               1   46[BANK0 ] unsigned char 
 10497 ;;  i               2   68[BANK0 ] int 
 10498 ;; Return value:  Size  Location     Type
 10499 ;;                  1    wreg      void 
 10500 ;; Registers used:
 10501 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10502 ;; Tracked objects:
 10503 ;;		On entry : 0/0
 10504 ;;		On exit  : 0/0
 10505 ;;		Unchanged: 0/0
 10506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10507 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10508 ;;      Locals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10509 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10510 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10511 ;;Total ram usage:       27 bytes
 10512 ;; Hardware stack levels used:    1
 10513 ;; Hardware stack levels required when called:   10
 10514 ;; This function calls:
 10515 ;;		_lcdInst
 10516 ;;		_printf
 10517 ;;		_updateServoPosition
 10518 ;; This function is called by:
 10519 ;;		_Test
 10520 ;; This function uses a non-reentrant model
 10521 ;;
 10522                           
 10523                           	psect	text40
 10524  000012                     __ptext40:
 10525                           	opt stack 0
 10526  000012                     _actuatorTest:
 10527                           	opt stack 19
 10528                           
 10529                           ;Test.c: 197: int i = 0;
 10530                           
 10531                           ;incstack = 0
 10532  000012  0E00               	movlw	0
 10533  000014  0100               	movlb	0	; () banked
 10534  000016  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 10535  000018  0E00               	movlw	0
 10536  00001A  6FC4               	movwf	actuatorTest@i& (0+255),b
 10537                           
 10538                           ; BSR set to: 0
 10539                           ;Test.c: 199: (INTCONbits.GIE = 1);
 10540  00001C  8EF2               	bsf	intcon,7,c	;volatile
 10541                           
 10542                           ; BSR set to: 0
 10543                           ;Test.c: 200: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10544  00001E  0E01               	movlw	1
 10545  000020  ECC1  F023         	call	_lcdInst
 10546  000024  0E68               	movlw	104
 10547  000026  0100               	movlb	0	; () banked
 10548  000028  6FAB               	movwf	??_actuatorTest& (0+255),b
 10549  00002A  0EE4               	movlw	228
 10550  00002C                     u7637:
 10551  00002C  2EE8               	decfsz	wreg,f,c
 10552  00002E  D7FE               	bra	u7637
 10553  000030  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10554  000032  D7FC               	bra	u7637
 10555  000034  F000               	nop	
 10556  000036  0E80               	movlw	128
 10557  000038  ECC1  F023         	call	_lcdInst
 10558                           
 10559                           ;Test.c: 201: printf("ACTUATORS");
 10560  00003C  0E91               	movlw	low STR_88
 10561  00003E  0100               	movlb	0	; () banked
 10562  000040  6F8E               	movwf	printf@f& (0+255),b
 10563  000042  0EFF               	movlw	high STR_88
 10564  000044  0100               	movlb	0	; () banked
 10565  000046  6F8F               	movwf	(printf@f+1)& (0+255),b
 10566  000048  ECB8  F008         	call	_printf	;wreg free
 10567                           
 10568                           ;Test.c: 202: lcdInst(0b11000000);;
 10569  00004C  0EC0               	movlw	192
 10570  00004E  ECC1  F023         	call	_lcdInst
 10571                           
 10572                           ;Test.c: 203: printf("PUSH TO START");
 10573  000052  0EFF               	movlw	low STR_71
 10574  000054  0100               	movlb	0	; () banked
 10575  000056  6F8E               	movwf	printf@f& (0+255),b
 10576  000058  0EFE               	movlw	high STR_71
 10577  00005A  0100               	movlb	0	; () banked
 10578  00005C  6F8F               	movwf	(printf@f+1)& (0+255),b
 10579  00005E  ECB8  F008         	call	_printf	;wreg free
 10580                           
 10581                           ;Test.c: 204: _delay((unsigned long)((100)*(32000000/4000.0)));
 10582  000062  0E05               	movlw	5
 10583  000064  0100               	movlb	0	; () banked
 10584  000066  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10585  000068  0E0F               	movlw	15
 10586  00006A  0100               	movlb	0	; () banked
 10587  00006C  6FAB               	movwf	??_actuatorTest& (0+255),b
 10588  00006E  0EF1               	movlw	241
 10589  000070                     u7647:
 10590  000070  2EE8               	decfsz	wreg,f,c
 10591  000072  D7FE               	bra	u7647
 10592  000074  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10593  000076  D7FC               	bra	u7647
 10594  000078  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10595  00007A  D7FA               	bra	u7647
 10596  00007C                     l1085:
 10597  00007C  A281               	btfss	3969,1,c	;volatile
 10598  00007E  D7FE               	goto	l1085
 10599  000080                     l1088:
 10600  000080  B281               	btfsc	3969,1,c	;volatile
 10601  000082  D7FE               	goto	l1088
 10602                           
 10603                           ;Test.c: 207: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10604  000084  0E01               	movlw	1
 10605  000086  ECC1  F023         	call	_lcdInst
 10606  00008A  0E68               	movlw	104
 10607  00008C  0100               	movlb	0	; () banked
 10608  00008E  6FAB               	movwf	??_actuatorTest& (0+255),b
 10609  000090  0EE4               	movlw	228
 10610  000092                     u7657:
 10611  000092  2EE8               	decfsz	wreg,f,c
 10612  000094  D7FE               	bra	u7657
 10613  000096  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10614  000098  D7FC               	bra	u7657
 10615  00009A  F000               	nop	
 10616  00009C  0E80               	movlw	128
 10617  00009E  ECC1  F023         	call	_lcdInst
 10618                           
 10619                           ;Test.c: 212: printf("TST: DC MOTORS");
 10620  0000A2  0EB7               	movlw	low STR_90
 10621  0000A4  0100               	movlb	0	; () banked
 10622  0000A6  6F8E               	movwf	printf@f& (0+255),b
 10623  0000A8  0EFE               	movlw	high STR_90
 10624  0000AA  0100               	movlb	0	; () banked
 10625  0000AC  6F8F               	movwf	(printf@f+1)& (0+255),b
 10626  0000AE  ECB8  F008         	call	_printf	;wreg free
 10627                           
 10628                           ;Test.c: 213: lcdInst(0b11000000);;
 10629  0000B2  0EC0               	movlw	192
 10630  0000B4  ECC1  F023         	call	_lcdInst
 10631                           
 10632                           ;Test.c: 214: printf("PIN RA5 HIGH.");
 10633  0000B8  0ED5               	movlw	low STR_91
 10634  0000BA  0100               	movlb	0	; () banked
 10635  0000BC  6F8E               	movwf	printf@f& (0+255),b
 10636  0000BE  0EFE               	movlw	high STR_91
 10637  0000C0  0100               	movlb	0	; () banked
 10638  0000C2  6F8F               	movwf	(printf@f+1)& (0+255),b
 10639  0000C4  ECB8  F008         	call	_printf	;wreg free
 10640                           
 10641                           ;Test.c: 215: LATAbits.LATA5 = 1;
 10642  0000C8  8A89               	bsf	3977,5,c	;volatile
 10643                           
 10644                           ;Test.c: 216: for(i=0;i<5;i++){for(char i=0;i<100;i++){_delay((unsigned long)((10)*(3200
      +                          0000/4000.0)));};}
 10645  0000CA  0E00               	movlw	0
 10646  0000CC  0100               	movlb	0	; () banked
 10647  0000CE  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 10648  0000D0  0E00               	movlw	0
 10649  0000D2  6FC4               	movwf	actuatorTest@i& (0+255),b
 10650                           
 10651                           ; BSR set to: 0
 10652  0000D4  0100               	movlb	0	; () banked
 10653  0000D6  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10654  0000D8  D008               	goto	l6683
 10655  0000DA  0100               	movlb	0	; () banked
 10656  0000DC  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10657  0000DE  E123               	bnz	l1092
 10658  0000E0  0E05               	movlw	5
 10659  0000E2  0100               	movlb	0	; () banked
 10660  0000E4  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 10661  0000E6  B0D8               	btfsc	status,0,c
 10662  0000E8  D01E               	goto	l1092
 10663  0000EA                     l6683:
 10664                           
 10665                           ; BSR set to: 0
 10666  0000EA  0E00               	movlw	0
 10667  0000EC  0100               	movlb	0	; () banked
 10668  0000EE  6FAD               	movwf	actuatorTest@i_1630& (0+255),b
 10669  0000F0                     l6685:
 10670                           
 10671                           ; BSR set to: 0
 10672  0000F0  0E63               	movlw	99
 10673  0000F2  0100               	movlb	0	; () banked
 10674  0000F4  65AD               	cpfsgt	actuatorTest@i_1630& (0+255),b
 10675  0000F6  D001               	goto	l6689
 10676  0000F8  D00C               	goto	l6693
 10677  0000FA                     l6689:
 10678                           
 10679                           ; BSR set to: 0
 10680  0000FA  0E68               	movlw	104
 10681  0000FC  0100               	movlb	0	; () banked
 10682  0000FE  6FAB               	movwf	??_actuatorTest& (0+255),b
 10683  000100  0EE4               	movlw	228
 10684  000102                     u7667:
 10685  000102  2EE8               	decfsz	wreg,f,c
 10686  000104  D7FE               	bra	u7667
 10687  000106  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10688  000108  D7FC               	bra	u7667
 10689  00010A  F000               	nop	
 10690  00010C  0100               	movlb	0	; () banked
 10691  00010E  2BAD               	incf	actuatorTest@i_1630& (0+255),f,b
 10692  000110  D7EF               	goto	l6685
 10693  000112                     l6693:
 10694                           
 10695                           ; BSR set to: 0
 10696  000112  0100               	movlb	0	; () banked
 10697  000114  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 10698  000116  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 10699                           
 10700                           ; BSR set to: 0
 10701  000118  0100               	movlb	0	; () banked
 10702  00011A  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10703  00011C  D7E6               	goto	l6683
 10704  00011E  0100               	movlb	0	; () banked
 10705  000120  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10706  000122  E101               	bnz	u5190
 10707  000124  D7DD               	goto	L7
 10708  000126                     u5190:
 10709  000126                     l1092:
 10710                           
 10711                           ; BSR set to: 0
 10712                           ;Test.c: 217: LATAbits.LATA5 = 0;
 10713  000126  9A89               	bcf	3977,5,c	;volatile
 10714                           
 10715                           ; BSR set to: 0
 10716                           ;Test.c: 218: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10717  000128  0E01               	movlw	1
 10718  00012A  ECC1  F023         	call	_lcdInst
 10719  00012E  0E68               	movlw	104
 10720  000130  0100               	movlb	0	; () banked
 10721  000132  6FAB               	movwf	??_actuatorTest& (0+255),b
 10722  000134  0EE4               	movlw	228
 10723  000136                     u7677:
 10724  000136  2EE8               	decfsz	wreg,f,c
 10725  000138  D7FE               	bra	u7677
 10726  00013A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10727  00013C  D7FC               	bra	u7677
 10728  00013E  F000               	nop	
 10729  000140  0E80               	movlw	128
 10730  000142  ECC1  F023         	call	_lcdInst
 10731                           
 10732                           ;Test.c: 224: printf("TST: COND SOLN'D");
 10733  000146  0E97               	movlw	low STR_92
 10734  000148  0100               	movlb	0	; () banked
 10735  00014A  6F8E               	movwf	printf@f& (0+255),b
 10736  00014C  0EFC               	movlw	high STR_92
 10737  00014E  0100               	movlb	0	; () banked
 10738  000150  6F8F               	movwf	(printf@f+1)& (0+255),b
 10739  000152  ECB8  F008         	call	_printf	;wreg free
 10740                           
 10741                           ;Test.c: 225: lcdInst(0b11000000);;
 10742  000156  0EC0               	movlw	192
 10743  000158  ECC1  F023         	call	_lcdInst
 10744                           
 10745                           ;Test.c: 226: printf("PIN RA3...");
 10746  00015C  0E5C               	movlw	low STR_93
 10747  00015E  0100               	movlb	0	; () banked
 10748  000160  6F8E               	movwf	printf@f& (0+255),b
 10749  000162  0EFF               	movlw	high STR_93
 10750  000164  0100               	movlb	0	; () banked
 10751  000166  6F8F               	movwf	(printf@f+1)& (0+255),b
 10752  000168  ECB8  F008         	call	_printf	;wreg free
 10753                           
 10754                           ;Test.c: 227: for(i=0;i<5;i++){
 10755  00016C  0E00               	movlw	0
 10756  00016E  0100               	movlb	0	; () banked
 10757  000170  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 10758  000172  0E00               	movlw	0
 10759  000174  6FC4               	movwf	actuatorTest@i& (0+255),b
 10760                           
 10761                           ; BSR set to: 0
 10762  000176  0100               	movlb	0	; () banked
 10763  000178  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10764  00017A  D008               	goto	l1095
 10765  00017C  0100               	movlb	0	; () banked
 10766  00017E  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10767  000180  E12C               	bnz	l1096
 10768  000182  0E05               	movlw	5
 10769  000184  0100               	movlb	0	; () banked
 10770  000186  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 10771  000188  B0D8               	btfsc	status,0,c
 10772  00018A  D027               	goto	l1096
 10773  00018C                     l1095:
 10774                           
 10775                           ; BSR set to: 0
 10776                           ;Test.c: 228: LATAbits.LATA3 = 1;
 10777  00018C  8689               	bsf	3977,3,c	;volatile
 10778                           
 10779                           ; BSR set to: 0
 10780                           ;Test.c: 229: _delay((unsigned long)((300)*(32000000/4000.0)));
 10781  00018E  0E0D               	movlw	13
 10782  000190  0100               	movlb	0	; () banked
 10783  000192  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10784  000194  0E2D               	movlw	45
 10785  000196  0100               	movlb	0	; () banked
 10786  000198  6FAB               	movwf	??_actuatorTest& (0+255),b
 10787  00019A  0ED7               	movlw	215
 10788  00019C                     u7687:
 10789  00019C  2EE8               	decfsz	wreg,f,c
 10790  00019E  D7FE               	bra	u7687
 10791  0001A0  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10792  0001A2  D7FC               	bra	u7687
 10793  0001A4  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10794  0001A6  D7FA               	bra	u7687
 10795  0001A8  D000               	nop2	
 10796                           
 10797                           ;Test.c: 230: LATAbits.LATA3 = ~1;
 10798  0001AA  9689               	bcf	3977,3,c	;volatile
 10799                           
 10800                           ;Test.c: 231: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 10801  0001AC  0E1D               	movlw	29
 10802  0001AE  0100               	movlb	0	; () banked
 10803  0001B0  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10804  0001B2  0E69               	movlw	105
 10805  0001B4  0100               	movlb	0	; () banked
 10806  0001B6  6FAB               	movwf	??_actuatorTest& (0+255),b
 10807  0001B8  0EA5               	movlw	165
 10808  0001BA                     u7697:
 10809  0001BA  2EE8               	decfsz	wreg,f,c
 10810  0001BC  D7FE               	bra	u7697
 10811  0001BE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10812  0001C0  D7FC               	bra	u7697
 10813  0001C2  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10814  0001C4  D7FA               	bra	u7697
 10815  0001C6  0100               	movlb	0	; () banked
 10816  0001C8  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 10817  0001CA  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 10818  0001CC  0100               	movlb	0	; () banked
 10819  0001CE  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10820  0001D0  D7DD               	goto	l1095
 10821  0001D2  0100               	movlb	0	; () banked
 10822  0001D4  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10823  0001D6  E101               	bnz	u5210
 10824  0001D8  D7D4               	goto	L8
 10825  0001DA                     u5210:
 10826  0001DA                     l1096:
 10827                           
 10828                           ; BSR set to: 0
 10829                           ;Test.c: 232: }
 10830                           ;Test.c: 233: LATAbits.LATA3 = ~1;
 10831  0001DA  9689               	bcf	3977,3,c	;volatile
 10832                           
 10833                           ; BSR set to: 0
 10834                           ;Test.c: 234: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10835  0001DC  0E01               	movlw	1
 10836  0001DE  ECC1  F023         	call	_lcdInst
 10837  0001E2  0E68               	movlw	104
 10838  0001E4  0100               	movlb	0	; () banked
 10839  0001E6  6FAB               	movwf	??_actuatorTest& (0+255),b
 10840  0001E8  0EE4               	movlw	228
 10841  0001EA                     u7707:
 10842  0001EA  2EE8               	decfsz	wreg,f,c
 10843  0001EC  D7FE               	bra	u7707
 10844  0001EE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10845  0001F0  D7FC               	bra	u7707
 10846  0001F2  F000               	nop	
 10847  0001F4  0E80               	movlw	128
 10848  0001F6  ECC1  F023         	call	_lcdInst
 10849                           
 10850                           ;Test.c: 240: printf("TST: PUSH SOLN'D");
 10851  0001FA  0EA8               	movlw	low STR_94
 10852  0001FC  0100               	movlb	0	; () banked
 10853  0001FE  6F8E               	movwf	printf@f& (0+255),b
 10854  000200  0EFC               	movlw	high STR_94
 10855  000202  0100               	movlb	0	; () banked
 10856  000204  6F8F               	movwf	(printf@f+1)& (0+255),b
 10857  000206  ECB8  F008         	call	_printf	;wreg free
 10858                           
 10859                           ;Test.c: 241: lcdInst(0b11000000);;
 10860  00020A  0EC0               	movlw	192
 10861  00020C  ECC1  F023         	call	_lcdInst
 10862                           
 10863                           ;Test.c: 242: printf("PIN RA4...");
 10864  000210  0E67               	movlw	low STR_95
 10865  000212  0100               	movlb	0	; () banked
 10866  000214  6F8E               	movwf	printf@f& (0+255),b
 10867  000216  0EFF               	movlw	high STR_95
 10868  000218  0100               	movlb	0	; () banked
 10869  00021A  6F8F               	movwf	(printf@f+1)& (0+255),b
 10870  00021C  ECB8  F008         	call	_printf	;wreg free
 10871                           
 10872                           ;Test.c: 243: for(i=0;i<5;i++){
 10873  000220  0E00               	movlw	0
 10874  000222  0100               	movlb	0	; () banked
 10875  000224  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 10876  000226  0E00               	movlw	0
 10877  000228  6FC4               	movwf	actuatorTest@i& (0+255),b
 10878                           
 10879                           ; BSR set to: 0
 10880  00022A  0100               	movlb	0	; () banked
 10881  00022C  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10882  00022E  D008               	goto	l1097
 10883  000230  0100               	movlb	0	; () banked
 10884  000232  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10885  000234  E12C               	bnz	l1098
 10886  000236  0E05               	movlw	5
 10887  000238  0100               	movlb	0	; () banked
 10888  00023A  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 10889  00023C  B0D8               	btfsc	status,0,c
 10890  00023E  D027               	goto	l1098
 10891  000240                     l1097:
 10892                           
 10893                           ; BSR set to: 0
 10894                           ;Test.c: 244: LATAbits.LATA4 = 1;
 10895  000240  8889               	bsf	3977,4,c	;volatile
 10896                           
 10897                           ; BSR set to: 0
 10898                           ;Test.c: 245: _delay((unsigned long)((300)*(32000000/4000.0)));
 10899  000242  0E0D               	movlw	13
 10900  000244  0100               	movlb	0	; () banked
 10901  000246  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10902  000248  0E2D               	movlw	45
 10903  00024A  0100               	movlb	0	; () banked
 10904  00024C  6FAB               	movwf	??_actuatorTest& (0+255),b
 10905  00024E  0ED7               	movlw	215
 10906  000250                     u7717:
 10907  000250  2EE8               	decfsz	wreg,f,c
 10908  000252  D7FE               	bra	u7717
 10909  000254  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10910  000256  D7FC               	bra	u7717
 10911  000258  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10912  00025A  D7FA               	bra	u7717
 10913  00025C  D000               	nop2	
 10914                           
 10915                           ;Test.c: 246: LATAbits.LATA4 = ~1;
 10916  00025E  9889               	bcf	3977,4,c	;volatile
 10917                           
 10918                           ;Test.c: 247: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 10919  000260  0E1D               	movlw	29
 10920  000262  0100               	movlb	0	; () banked
 10921  000264  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10922  000266  0E69               	movlw	105
 10923  000268  0100               	movlb	0	; () banked
 10924  00026A  6FAB               	movwf	??_actuatorTest& (0+255),b
 10925  00026C  0EA5               	movlw	165
 10926  00026E                     u7727:
 10927  00026E  2EE8               	decfsz	wreg,f,c
 10928  000270  D7FE               	bra	u7727
 10929  000272  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10930  000274  D7FC               	bra	u7727
 10931  000276  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10932  000278  D7FA               	bra	u7727
 10933  00027A  0100               	movlb	0	; () banked
 10934  00027C  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 10935  00027E  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 10936  000280  0100               	movlb	0	; () banked
 10937  000282  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10938  000284  D7DD               	goto	l1097
 10939  000286  0100               	movlb	0	; () banked
 10940  000288  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10941  00028A  E101               	bnz	u5230
 10942  00028C  D7D4               	goto	L9
 10943  00028E                     u5230:
 10944  00028E                     l1098:
 10945                           
 10946                           ; BSR set to: 0
 10947                           ;Test.c: 248: }
 10948                           ;Test.c: 249: LATAbits.LATA4 = ~1;
 10949  00028E  9889               	bcf	3977,4,c	;volatile
 10950                           
 10951                           ; BSR set to: 0
 10952                           ;Test.c: 250: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10953  000290  0E01               	movlw	1
 10954  000292  ECC1  F023         	call	_lcdInst
 10955  000296  0E68               	movlw	104
 10956  000298  0100               	movlb	0	; () banked
 10957  00029A  6FAB               	movwf	??_actuatorTest& (0+255),b
 10958  00029C  0EE4               	movlw	228
 10959  00029E                     u7737:
 10960  00029E  2EE8               	decfsz	wreg,f,c
 10961  0002A0  D7FE               	bra	u7737
 10962  0002A2  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10963  0002A4  D7FC               	bra	u7737
 10964  0002A6  F000               	nop	
 10965  0002A8  0E80               	movlw	128
 10966  0002AA  ECC1  F023         	call	_lcdInst
 10967                           
 10968                           ;Test.c: 253: machine_state = Sorting_state;
 10969  0002AE  0E01               	movlw	1
 10970  0002B0  0100               	movlb	0	; () banked
 10971  0002B2  6FFC               	movwf	_machine_state& (0+255),b
 10972                           
 10973                           ; BSR set to: 0
 10974                           ;Test.c: 254: was_low_1 = 0;
 10975  0002B4  0E00               	movlw	0
 10976  0002B6  6E7A               	movwf	_was_low_1+1,c	;volatile
 10977  0002B8  0E00               	movlw	0
 10978  0002BA  6E79               	movwf	_was_low_1,c	;volatile
 10979                           
 10980                           ; BSR set to: 0
 10981                           ;Test.c: 255: was_low_1 = 0;
 10982  0002BC  0E00               	movlw	0
 10983  0002BE  6E7A               	movwf	_was_low_1+1,c	;volatile
 10984  0002C0  0E00               	movlw	0
 10985  0002C2  6E79               	movwf	_was_low_1,c	;volatile
 10986                           
 10987                           ; BSR set to: 0
 10988                           ;Test.c: 262: printf("TST: PAN SERVO");
 10989  0002C4  0E99               	movlw	low STR_96
 10990  0002C6  0100               	movlb	0	; () banked
 10991  0002C8  6F8E               	movwf	printf@f& (0+255),b
 10992  0002CA  0EFE               	movlw	high STR_96
 10993  0002CC  0100               	movlb	0	; () banked
 10994  0002CE  6F8F               	movwf	(printf@f+1)& (0+255),b
 10995  0002D0  ECB8  F008         	call	_printf	;wreg free
 10996                           
 10997                           ;Test.c: 263: lcdInst(0b11000000);;
 10998  0002D4  0EC0               	movlw	192
 10999  0002D6  ECC1  F023         	call	_lcdInst
 11000                           
 11001                           ;Test.c: 264: printf("MIDDLE -- 2s    ");
 11002  0002DA  0E20               	movlw	low STR_97
 11003  0002DC  0100               	movlb	0	; () banked
 11004  0002DE  6F8E               	movwf	printf@f& (0+255),b
 11005  0002E0  0EFC               	movlw	high STR_97
 11006  0002E2  0100               	movlb	0	; () banked
 11007  0002E4  6F8F               	movwf	(printf@f+1)& (0+255),b
 11008  0002E6  ECB8  F008         	call	_printf	;wreg free
 11009                           
 11010                           ;Test.c: 265: updateServoPosition(1200, 1);
 11011  0002EA  0E04               	movlw	4
 11012  0002EC  0100               	movlb	0	; () banked
 11013  0002EE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11014  0002F0  0EB0               	movlw	176
 11015  0002F2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11016  0002F4  0E00               	movlw	0
 11017  0002F6  0100               	movlb	0	; () banked
 11018  0002F8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11019  0002FA  0E01               	movlw	1
 11020  0002FC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11021  0002FE  EC48  F01E         	call	_updateServoPosition	;wreg free
 11022                           
 11023                           ;Test.c: 266: TMR1ON = 1;
 11024  000302  80CD               	bsf	4045,0,c	;volatile
 11025                           
 11026                           ;Test.c: 267: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11027  000304  0E00               	movlw	0
 11028  000306  0100               	movlb	0	; () banked
 11029  000308  6FAE               	movwf	actuatorTest@i_1637& (0+255),b
 11030  00030A                     l6769:
 11031                           
 11032                           ; BSR set to: 0
 11033  00030A  0E63               	movlw	99
 11034  00030C  0100               	movlb	0	; () banked
 11035  00030E  65AE               	cpfsgt	actuatorTest@i_1637& (0+255),b
 11036  000310  D001               	goto	l6773
 11037  000312  D00C               	goto	l6777
 11038  000314                     l6773:
 11039                           
 11040                           ; BSR set to: 0
 11041  000314  0E68               	movlw	104
 11042  000316  0100               	movlb	0	; () banked
 11043  000318  6FAB               	movwf	??_actuatorTest& (0+255),b
 11044  00031A  0EE4               	movlw	228
 11045  00031C                     u7747:
 11046  00031C  2EE8               	decfsz	wreg,f,c
 11047  00031E  D7FE               	bra	u7747
 11048  000320  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11049  000322  D7FC               	bra	u7747
 11050  000324  F000               	nop	
 11051  000326  0100               	movlb	0	; () banked
 11052  000328  2BAE               	incf	actuatorTest@i_1637& (0+255),f,b
 11053  00032A  D7EF               	goto	l6769
 11054  00032C                     l6777:
 11055                           
 11056                           ; BSR set to: 0
 11057  00032C  0E00               	movlw	0
 11058  00032E  0100               	movlb	0	; () banked
 11059  000330  6FAF               	movwf	actuatorTest@i_1638& (0+255),b
 11060  000332                     l6779:
 11061                           
 11062                           ; BSR set to: 0
 11063  000332  0E63               	movlw	99
 11064  000334  0100               	movlb	0	; () banked
 11065  000336  65AF               	cpfsgt	actuatorTest@i_1638& (0+255),b
 11066  000338  D001               	goto	l6783
 11067  00033A  D00C               	goto	l6787
 11068  00033C                     l6783:
 11069                           
 11070                           ; BSR set to: 0
 11071  00033C  0E68               	movlw	104
 11072  00033E  0100               	movlb	0	; () banked
 11073  000340  6FAB               	movwf	??_actuatorTest& (0+255),b
 11074  000342  0EE4               	movlw	228
 11075  000344                     u7757:
 11076  000344  2EE8               	decfsz	wreg,f,c
 11077  000346  D7FE               	bra	u7757
 11078  000348  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11079  00034A  D7FC               	bra	u7757
 11080  00034C  F000               	nop	
 11081  00034E  0100               	movlb	0	; () banked
 11082  000350  2BAF               	incf	actuatorTest@i_1638& (0+255),f,b
 11083  000352  D7EF               	goto	l6779
 11084  000354                     l6787:
 11085                           
 11086                           ; BSR set to: 0
 11087                           ;Test.c: 269: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11088  000354  0E80               	movlw	128
 11089  000356  ECC1  F023         	call	_lcdInst
 11090  00035A  0EC0               	movlw	192
 11091  00035C  ECC1  F023         	call	_lcdInst
 11092                           
 11093                           ;Test.c: 270: printf("RIGHT -- 2s     ");
 11094  000360  0E0F               	movlw	low STR_98
 11095  000362  0100               	movlb	0	; () banked
 11096  000364  6F8E               	movwf	printf@f& (0+255),b
 11097  000366  0EFC               	movlw	high STR_98
 11098  000368  0100               	movlb	0	; () banked
 11099  00036A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11100  00036C  ECB8  F008         	call	_printf	;wreg free
 11101                           
 11102                           ;Test.c: 271: updateServoPosition(500, 1);
 11103  000370  0E01               	movlw	1
 11104  000372  0100               	movlb	0	; () banked
 11105  000374  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11106  000376  0EF4               	movlw	244
 11107  000378  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11108  00037A  0E00               	movlw	0
 11109  00037C  0100               	movlb	0	; () banked
 11110  00037E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11111  000380  0E01               	movlw	1
 11112  000382  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11113  000384  EC48  F01E         	call	_updateServoPosition	;wreg free
 11114                           
 11115                           ;Test.c: 272: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11116  000388  0E00               	movlw	0
 11117  00038A  0100               	movlb	0	; () banked
 11118  00038C  6FB0               	movwf	actuatorTest@i_1640& (0+255),b
 11119  00038E                     l6795:
 11120                           
 11121                           ; BSR set to: 0
 11122  00038E  0E63               	movlw	99
 11123  000390  0100               	movlb	0	; () banked
 11124  000392  65B0               	cpfsgt	actuatorTest@i_1640& (0+255),b
 11125  000394  D001               	goto	l6799
 11126  000396  D00C               	goto	l6803
 11127  000398                     l6799:
 11128                           
 11129                           ; BSR set to: 0
 11130  000398  0E68               	movlw	104
 11131  00039A  0100               	movlb	0	; () banked
 11132  00039C  6FAB               	movwf	??_actuatorTest& (0+255),b
 11133  00039E  0EE4               	movlw	228
 11134  0003A0                     u7767:
 11135  0003A0  2EE8               	decfsz	wreg,f,c
 11136  0003A2  D7FE               	bra	u7767
 11137  0003A4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11138  0003A6  D7FC               	bra	u7767
 11139  0003A8  F000               	nop	
 11140  0003AA  0100               	movlb	0	; () banked
 11141  0003AC  2BB0               	incf	actuatorTest@i_1640& (0+255),f,b
 11142  0003AE  D7EF               	goto	l6795
 11143  0003B0                     l6803:
 11144                           
 11145                           ; BSR set to: 0
 11146  0003B0  0E00               	movlw	0
 11147  0003B2  0100               	movlb	0	; () banked
 11148  0003B4  6FB1               	movwf	actuatorTest@i_1641& (0+255),b
 11149  0003B6                     l6805:
 11150                           
 11151                           ; BSR set to: 0
 11152  0003B6  0E63               	movlw	99
 11153  0003B8  0100               	movlb	0	; () banked
 11154  0003BA  65B1               	cpfsgt	actuatorTest@i_1641& (0+255),b
 11155  0003BC  D001               	goto	l6809
 11156  0003BE  D00C               	goto	l6813
 11157  0003C0                     l6809:
 11158                           
 11159                           ; BSR set to: 0
 11160  0003C0  0E68               	movlw	104
 11161  0003C2  0100               	movlb	0	; () banked
 11162  0003C4  6FAB               	movwf	??_actuatorTest& (0+255),b
 11163  0003C6  0EE4               	movlw	228
 11164  0003C8                     u7777:
 11165  0003C8  2EE8               	decfsz	wreg,f,c
 11166  0003CA  D7FE               	bra	u7777
 11167  0003CC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11168  0003CE  D7FC               	bra	u7777
 11169  0003D0  F000               	nop	
 11170  0003D2  0100               	movlb	0	; () banked
 11171  0003D4  2BB1               	incf	actuatorTest@i_1641& (0+255),f,b
 11172  0003D6  D7EF               	goto	l6805
 11173  0003D8                     l6813:
 11174                           
 11175                           ; BSR set to: 0
 11176                           ;Test.c: 274: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11177  0003D8  0E80               	movlw	128
 11178  0003DA  ECC1  F023         	call	_lcdInst
 11179  0003DE  0EC0               	movlw	192
 11180  0003E0  ECC1  F023         	call	_lcdInst
 11181                           
 11182                           ;Test.c: 275: printf("LEFT -- 2s      ");
 11183  0003E4  0EED               	movlw	low STR_99
 11184  0003E6  0100               	movlb	0	; () banked
 11185  0003E8  6F8E               	movwf	printf@f& (0+255),b
 11186  0003EA  0EFB               	movlw	high STR_99
 11187  0003EC  0100               	movlb	0	; () banked
 11188  0003EE  6F8F               	movwf	(printf@f+1)& (0+255),b
 11189  0003F0  ECB8  F008         	call	_printf	;wreg free
 11190                           
 11191                           ;Test.c: 276: updateServoPosition(2000, 1);
 11192  0003F4  0E07               	movlw	7
 11193  0003F6  0100               	movlb	0	; () banked
 11194  0003F8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11195  0003FA  0ED0               	movlw	208
 11196  0003FC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11197  0003FE  0E00               	movlw	0
 11198  000400  0100               	movlb	0	; () banked
 11199  000402  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11200  000404  0E01               	movlw	1
 11201  000406  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11202  000408  EC48  F01E         	call	_updateServoPosition	;wreg free
 11203                           
 11204                           ;Test.c: 277: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11205  00040C  0E00               	movlw	0
 11206  00040E  0100               	movlb	0	; () banked
 11207  000410  6FB2               	movwf	actuatorTest@i_1643& (0+255),b
 11208  000412                     l6821:
 11209                           
 11210                           ; BSR set to: 0
 11211  000412  0E63               	movlw	99
 11212  000414  0100               	movlb	0	; () banked
 11213  000416  65B2               	cpfsgt	actuatorTest@i_1643& (0+255),b
 11214  000418  D001               	goto	l6825
 11215  00041A  D00C               	goto	l6829
 11216  00041C                     l6825:
 11217                           
 11218                           ; BSR set to: 0
 11219  00041C  0E68               	movlw	104
 11220  00041E  0100               	movlb	0	; () banked
 11221  000420  6FAB               	movwf	??_actuatorTest& (0+255),b
 11222  000422  0EE4               	movlw	228
 11223  000424                     u7787:
 11224  000424  2EE8               	decfsz	wreg,f,c
 11225  000426  D7FE               	bra	u7787
 11226  000428  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11227  00042A  D7FC               	bra	u7787
 11228  00042C  F000               	nop	
 11229  00042E  0100               	movlb	0	; () banked
 11230  000430  2BB2               	incf	actuatorTest@i_1643& (0+255),f,b
 11231  000432  D7EF               	goto	l6821
 11232  000434                     l6829:
 11233                           
 11234                           ; BSR set to: 0
 11235  000434  0E00               	movlw	0
 11236  000436  0100               	movlb	0	; () banked
 11237  000438  6FB3               	movwf	actuatorTest@i_1644& (0+255),b
 11238  00043A                     l6831:
 11239                           
 11240                           ; BSR set to: 0
 11241  00043A  0E63               	movlw	99
 11242  00043C  0100               	movlb	0	; () banked
 11243  00043E  65B3               	cpfsgt	actuatorTest@i_1644& (0+255),b
 11244  000440  D001               	goto	l6835
 11245  000442  D00C               	goto	l6839
 11246  000444                     l6835:
 11247                           
 11248                           ; BSR set to: 0
 11249  000444  0E68               	movlw	104
 11250  000446  0100               	movlb	0	; () banked
 11251  000448  6FAB               	movwf	??_actuatorTest& (0+255),b
 11252  00044A  0EE4               	movlw	228
 11253  00044C                     u7797:
 11254  00044C  2EE8               	decfsz	wreg,f,c
 11255  00044E  D7FE               	bra	u7797
 11256  000450  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11257  000452  D7FC               	bra	u7797
 11258  000454  F000               	nop	
 11259  000456  0100               	movlb	0	; () banked
 11260  000458  2BB3               	incf	actuatorTest@i_1644& (0+255),f,b
 11261  00045A  D7EF               	goto	l6831
 11262  00045C                     l6839:
 11263                           
 11264                           ; BSR set to: 0
 11265                           ;Test.c: 279: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11266  00045C  0E80               	movlw	128
 11267  00045E  ECC1  F023         	call	_lcdInst
 11268  000462  0EC0               	movlw	192
 11269  000464  ECC1  F023         	call	_lcdInst
 11270                           
 11271                           ;Test.c: 280: printf("MID-LEFT -- 2s  ");
 11272  000468  0E42               	movlw	low STR_100
 11273  00046A  0100               	movlb	0	; () banked
 11274  00046C  6F8E               	movwf	printf@f& (0+255),b
 11275  00046E  0EFC               	movlw	high STR_100
 11276  000470  0100               	movlb	0	; () banked
 11277  000472  6F8F               	movwf	(printf@f+1)& (0+255),b
 11278  000474  ECB8  F008         	call	_printf	;wreg free
 11279                           
 11280                           ;Test.c: 281: updateServoPosition(1700, 1);
 11281  000478  0E06               	movlw	6
 11282  00047A  0100               	movlb	0	; () banked
 11283  00047C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11284  00047E  0EA4               	movlw	164
 11285  000480  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11286  000482  0E00               	movlw	0
 11287  000484  0100               	movlb	0	; () banked
 11288  000486  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11289  000488  0E01               	movlw	1
 11290  00048A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11291  00048C  EC48  F01E         	call	_updateServoPosition	;wreg free
 11292                           
 11293                           ;Test.c: 282: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11294  000490  0E00               	movlw	0
 11295  000492  0100               	movlb	0	; () banked
 11296  000494  6FB4               	movwf	actuatorTest@i_1646& (0+255),b
 11297  000496                     l6847:
 11298                           
 11299                           ; BSR set to: 0
 11300  000496  0E63               	movlw	99
 11301  000498  0100               	movlb	0	; () banked
 11302  00049A  65B4               	cpfsgt	actuatorTest@i_1646& (0+255),b
 11303  00049C  D001               	goto	l6851
 11304  00049E  D00C               	goto	l6855
 11305  0004A0                     l6851:
 11306                           
 11307                           ; BSR set to: 0
 11308  0004A0  0E68               	movlw	104
 11309  0004A2  0100               	movlb	0	; () banked
 11310  0004A4  6FAB               	movwf	??_actuatorTest& (0+255),b
 11311  0004A6  0EE4               	movlw	228
 11312  0004A8                     u7807:
 11313  0004A8  2EE8               	decfsz	wreg,f,c
 11314  0004AA  D7FE               	bra	u7807
 11315  0004AC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11316  0004AE  D7FC               	bra	u7807
 11317  0004B0  F000               	nop	
 11318  0004B2  0100               	movlb	0	; () banked
 11319  0004B4  2BB4               	incf	actuatorTest@i_1646& (0+255),f,b
 11320  0004B6  D7EF               	goto	l6847
 11321  0004B8                     l6855:
 11322                           
 11323                           ; BSR set to: 0
 11324  0004B8  0E00               	movlw	0
 11325  0004BA  0100               	movlb	0	; () banked
 11326  0004BC  6FB5               	movwf	actuatorTest@i_1647& (0+255),b
 11327  0004BE                     l6857:
 11328                           
 11329                           ; BSR set to: 0
 11330  0004BE  0E63               	movlw	99
 11331  0004C0  0100               	movlb	0	; () banked
 11332  0004C2  65B5               	cpfsgt	actuatorTest@i_1647& (0+255),b
 11333  0004C4  D001               	goto	l6861
 11334  0004C6  D00C               	goto	l6865
 11335  0004C8                     l6861:
 11336                           
 11337                           ; BSR set to: 0
 11338  0004C8  0E68               	movlw	104
 11339  0004CA  0100               	movlb	0	; () banked
 11340  0004CC  6FAB               	movwf	??_actuatorTest& (0+255),b
 11341  0004CE  0EE4               	movlw	228
 11342  0004D0                     u7817:
 11343  0004D0  2EE8               	decfsz	wreg,f,c
 11344  0004D2  D7FE               	bra	u7817
 11345  0004D4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11346  0004D6  D7FC               	bra	u7817
 11347  0004D8  F000               	nop	
 11348  0004DA  0100               	movlb	0	; () banked
 11349  0004DC  2BB5               	incf	actuatorTest@i_1647& (0+255),f,b
 11350  0004DE  D7EF               	goto	l6857
 11351  0004E0                     l6865:
 11352                           
 11353                           ; BSR set to: 0
 11354                           ;Test.c: 284: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11355  0004E0  0E80               	movlw	128
 11356  0004E2  ECC1  F023         	call	_lcdInst
 11357  0004E6  0EC0               	movlw	192
 11358  0004E8  ECC1  F023         	call	_lcdInst
 11359                           
 11360                           ;Test.c: 285: printf("MID-RIGHT -- 2s ");
 11361  0004EC  0E53               	movlw	low STR_101
 11362  0004EE  0100               	movlb	0	; () banked
 11363  0004F0  6F8E               	movwf	printf@f& (0+255),b
 11364  0004F2  0EFC               	movlw	high STR_101
 11365  0004F4  0100               	movlb	0	; () banked
 11366  0004F6  6F8F               	movwf	(printf@f+1)& (0+255),b
 11367  0004F8  ECB8  F008         	call	_printf	;wreg free
 11368                           
 11369                           ;Test.c: 286: updateServoPosition(750, 1);
 11370  0004FC  0E02               	movlw	2
 11371  0004FE  0100               	movlb	0	; () banked
 11372  000500  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11373  000502  0EEE               	movlw	238
 11374  000504  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11375  000506  0E00               	movlw	0
 11376  000508  0100               	movlb	0	; () banked
 11377  00050A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11378  00050C  0E01               	movlw	1
 11379  00050E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11380  000510  EC48  F01E         	call	_updateServoPosition	;wreg free
 11381                           
 11382                           ;Test.c: 287: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11383  000514  0E00               	movlw	0
 11384  000516  0100               	movlb	0	; () banked
 11385  000518  6FB6               	movwf	actuatorTest@i_1649& (0+255),b
 11386  00051A                     l6873:
 11387                           
 11388                           ; BSR set to: 0
 11389  00051A  0E63               	movlw	99
 11390  00051C  0100               	movlb	0	; () banked
 11391  00051E  65B6               	cpfsgt	actuatorTest@i_1649& (0+255),b
 11392  000520  D001               	goto	l6877
 11393  000522  D00C               	goto	l6881
 11394  000524                     l6877:
 11395                           
 11396                           ; BSR set to: 0
 11397  000524  0E68               	movlw	104
 11398  000526  0100               	movlb	0	; () banked
 11399  000528  6FAB               	movwf	??_actuatorTest& (0+255),b
 11400  00052A  0EE4               	movlw	228
 11401  00052C                     u7827:
 11402  00052C  2EE8               	decfsz	wreg,f,c
 11403  00052E  D7FE               	bra	u7827
 11404  000530  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11405  000532  D7FC               	bra	u7827
 11406  000534  F000               	nop	
 11407  000536  0100               	movlb	0	; () banked
 11408  000538  2BB6               	incf	actuatorTest@i_1649& (0+255),f,b
 11409  00053A  D7EF               	goto	l6873
 11410  00053C                     l6881:
 11411                           
 11412                           ; BSR set to: 0
 11413  00053C  0E00               	movlw	0
 11414  00053E  0100               	movlb	0	; () banked
 11415  000540  6FB7               	movwf	actuatorTest@i_1650& (0+255),b
 11416  000542                     l6883:
 11417                           
 11418                           ; BSR set to: 0
 11419  000542  0E63               	movlw	99
 11420  000544  0100               	movlb	0	; () banked
 11421  000546  65B7               	cpfsgt	actuatorTest@i_1650& (0+255),b
 11422  000548  D001               	goto	l6887
 11423  00054A  D00C               	goto	l6891
 11424  00054C                     l6887:
 11425                           
 11426                           ; BSR set to: 0
 11427  00054C  0E68               	movlw	104
 11428  00054E  0100               	movlb	0	; () banked
 11429  000550  6FAB               	movwf	??_actuatorTest& (0+255),b
 11430  000552  0EE4               	movlw	228
 11431  000554                     u7837:
 11432  000554  2EE8               	decfsz	wreg,f,c
 11433  000556  D7FE               	bra	u7837
 11434  000558  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11435  00055A  D7FC               	bra	u7837
 11436  00055C  F000               	nop	
 11437  00055E  0100               	movlb	0	; () banked
 11438  000560  2BB7               	incf	actuatorTest@i_1650& (0+255),f,b
 11439  000562  D7EF               	goto	l6883
 11440  000564                     l6891:
 11441                           
 11442                           ; BSR set to: 0
 11443                           ;Test.c: 289: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11444  000564  0E80               	movlw	128
 11445  000566  ECC1  F023         	call	_lcdInst
 11446  00056A  0EC0               	movlw	192
 11447  00056C  ECC1  F023         	call	_lcdInst
 11448                           
 11449                           ;Test.c: 290: printf("MID -- 2s       ");
 11450  000570  0ECB               	movlw	low STR_102
 11451  000572  0100               	movlb	0	; () banked
 11452  000574  6F8E               	movwf	printf@f& (0+255),b
 11453  000576  0EFB               	movlw	high STR_102
 11454  000578  0100               	movlb	0	; () banked
 11455  00057A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11456  00057C  ECB8  F008         	call	_printf	;wreg free
 11457                           
 11458                           ;Test.c: 291: updateServoPosition(1200, 1);
 11459  000580  0E04               	movlw	4
 11460  000582  0100               	movlb	0	; () banked
 11461  000584  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11462  000586  0EB0               	movlw	176
 11463  000588  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11464  00058A  0E00               	movlw	0
 11465  00058C  0100               	movlb	0	; () banked
 11466  00058E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11467  000590  0E01               	movlw	1
 11468  000592  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11469  000594  EC48  F01E         	call	_updateServoPosition	;wreg free
 11470                           
 11471                           ;Test.c: 292: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11472  000598  0E00               	movlw	0
 11473  00059A  0100               	movlb	0	; () banked
 11474  00059C  6FB8               	movwf	actuatorTest@i_1652& (0+255),b
 11475  00059E                     l6899:
 11476                           
 11477                           ; BSR set to: 0
 11478  00059E  0E63               	movlw	99
 11479  0005A0  0100               	movlb	0	; () banked
 11480  0005A2  65B8               	cpfsgt	actuatorTest@i_1652& (0+255),b
 11481  0005A4  D001               	goto	l6903
 11482  0005A6  D00C               	goto	l6907
 11483  0005A8                     l6903:
 11484                           
 11485                           ; BSR set to: 0
 11486  0005A8  0E68               	movlw	104
 11487  0005AA  0100               	movlb	0	; () banked
 11488  0005AC  6FAB               	movwf	??_actuatorTest& (0+255),b
 11489  0005AE  0EE4               	movlw	228
 11490  0005B0                     u7847:
 11491  0005B0  2EE8               	decfsz	wreg,f,c
 11492  0005B2  D7FE               	bra	u7847
 11493  0005B4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11494  0005B6  D7FC               	bra	u7847
 11495  0005B8  F000               	nop	
 11496  0005BA  0100               	movlb	0	; () banked
 11497  0005BC  2BB8               	incf	actuatorTest@i_1652& (0+255),f,b
 11498  0005BE  D7EF               	goto	l6899
 11499  0005C0                     l6907:
 11500                           
 11501                           ; BSR set to: 0
 11502  0005C0  0E00               	movlw	0
 11503  0005C2  0100               	movlb	0	; () banked
 11504  0005C4  6FB9               	movwf	actuatorTest@i_1653& (0+255),b
 11505  0005C6                     l6909:
 11506                           
 11507                           ; BSR set to: 0
 11508  0005C6  0E63               	movlw	99
 11509  0005C8  0100               	movlb	0	; () banked
 11510  0005CA  65B9               	cpfsgt	actuatorTest@i_1653& (0+255),b
 11511  0005CC  D001               	goto	l6913
 11512  0005CE  D00C               	goto	l1122
 11513  0005D0                     l6913:
 11514                           
 11515                           ; BSR set to: 0
 11516  0005D0  0E68               	movlw	104
 11517  0005D2  0100               	movlb	0	; () banked
 11518  0005D4  6FAB               	movwf	??_actuatorTest& (0+255),b
 11519  0005D6  0EE4               	movlw	228
 11520  0005D8                     u7857:
 11521  0005D8  2EE8               	decfsz	wreg,f,c
 11522  0005DA  D7FE               	bra	u7857
 11523  0005DC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11524  0005DE  D7FC               	bra	u7857
 11525  0005E0  F000               	nop	
 11526  0005E2  0100               	movlb	0	; () banked
 11527  0005E4  2BB9               	incf	actuatorTest@i_1653& (0+255),f,b
 11528  0005E6  D7EF               	goto	l6909
 11529  0005E8                     l1122:
 11530                           
 11531                           ; BSR set to: 0
 11532                           ;Test.c: 293: TMR1ON = 0;
 11533  0005E8  90CD               	bcf	4045,0,c	;volatile
 11534                           
 11535                           ; BSR set to: 0
 11536                           ;Test.c: 300: printf("TST: TILT SERVO");
 11537  0005EA  0E2E               	movlw	low STR_103
 11538  0005EC  0100               	movlb	0	; () banked
 11539  0005EE  6F8E               	movwf	printf@f& (0+255),b
 11540  0005F0  0EFE               	movlw	high STR_103
 11541  0005F2  0100               	movlb	0	; () banked
 11542  0005F4  6F8F               	movwf	(printf@f+1)& (0+255),b
 11543  0005F6  ECB8  F008         	call	_printf	;wreg free
 11544                           
 11545                           ;Test.c: 301: lcdInst(0b11000000);;
 11546  0005FA  0EC0               	movlw	192
 11547  0005FC  ECC1  F023         	call	_lcdInst
 11548                           
 11549                           ;Test.c: 302: printf("LEVEL -- 2s     ");
 11550  000600  0EFE               	movlw	low STR_104
 11551  000602  0100               	movlb	0	; () banked
 11552  000604  6F8E               	movwf	printf@f& (0+255),b
 11553  000606  0EFB               	movlw	high STR_104
 11554  000608  0100               	movlb	0	; () banked
 11555  00060A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11556  00060C  ECB8  F008         	call	_printf	;wreg free
 11557                           
 11558                           ;Test.c: 303: updateServoPosition(1190, 3);
 11559  000610  0E04               	movlw	4
 11560  000612  0100               	movlb	0	; () banked
 11561  000614  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11562  000616  0EA6               	movlw	166
 11563  000618  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11564  00061A  0E00               	movlw	0
 11565  00061C  0100               	movlb	0	; () banked
 11566  00061E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11567  000620  0E03               	movlw	3
 11568  000622  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11569  000624  EC48  F01E         	call	_updateServoPosition	;wreg free
 11570                           
 11571                           ;Test.c: 304: TMR3ON = 1;
 11572  000628  80B1               	bsf	4017,0,c	;volatile
 11573                           
 11574                           ;Test.c: 305: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11575  00062A  0E00               	movlw	0
 11576  00062C  0100               	movlb	0	; () banked
 11577  00062E  6FBA               	movwf	actuatorTest@i_1656& (0+255),b
 11578  000630                     l6927:
 11579                           
 11580                           ; BSR set to: 0
 11581  000630  0E63               	movlw	99
 11582  000632  0100               	movlb	0	; () banked
 11583  000634  65BA               	cpfsgt	actuatorTest@i_1656& (0+255),b
 11584  000636  D001               	goto	l6931
 11585  000638  D00C               	goto	l6935
 11586  00063A                     l6931:
 11587                           
 11588                           ; BSR set to: 0
 11589  00063A  0E68               	movlw	104
 11590  00063C  0100               	movlb	0	; () banked
 11591  00063E  6FAB               	movwf	??_actuatorTest& (0+255),b
 11592  000640  0EE4               	movlw	228
 11593  000642                     u7867:
 11594  000642  2EE8               	decfsz	wreg,f,c
 11595  000644  D7FE               	bra	u7867
 11596  000646  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11597  000648  D7FC               	bra	u7867
 11598  00064A  F000               	nop	
 11599  00064C  0100               	movlb	0	; () banked
 11600  00064E  2BBA               	incf	actuatorTest@i_1656& (0+255),f,b
 11601  000650  D7EF               	goto	l6927
 11602  000652                     l6935:
 11603                           
 11604                           ; BSR set to: 0
 11605  000652  0E00               	movlw	0
 11606  000654  0100               	movlb	0	; () banked
 11607  000656  6FBB               	movwf	actuatorTest@i_1657& (0+255),b
 11608  000658                     l6937:
 11609                           
 11610                           ; BSR set to: 0
 11611  000658  0E63               	movlw	99
 11612  00065A  0100               	movlb	0	; () banked
 11613  00065C  65BB               	cpfsgt	actuatorTest@i_1657& (0+255),b
 11614  00065E  D001               	goto	l6941
 11615  000660  D00C               	goto	l6945
 11616  000662                     l6941:
 11617                           
 11618                           ; BSR set to: 0
 11619  000662  0E68               	movlw	104
 11620  000664  0100               	movlb	0	; () banked
 11621  000666  6FAB               	movwf	??_actuatorTest& (0+255),b
 11622  000668  0EE4               	movlw	228
 11623  00066A                     u7877:
 11624  00066A  2EE8               	decfsz	wreg,f,c
 11625  00066C  D7FE               	bra	u7877
 11626  00066E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11627  000670  D7FC               	bra	u7877
 11628  000672  F000               	nop	
 11629  000674  0100               	movlb	0	; () banked
 11630  000676  2BBB               	incf	actuatorTest@i_1657& (0+255),f,b
 11631  000678  D7EF               	goto	l6937
 11632  00067A                     l6945:
 11633                           
 11634                           ; BSR set to: 0
 11635                           ;Test.c: 307: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11636  00067A  0E80               	movlw	128
 11637  00067C  ECC1  F023         	call	_lcdInst
 11638  000680  0EC0               	movlw	192
 11639  000682  ECC1  F023         	call	_lcdInst
 11640                           
 11641                           ;Test.c: 308: printf("DROP -- 2s      ");
 11642  000686  0EDC               	movlw	low STR_105
 11643  000688  0100               	movlb	0	; () banked
 11644  00068A  6F8E               	movwf	printf@f& (0+255),b
 11645  00068C  0EFB               	movlw	high STR_105
 11646  00068E  0100               	movlb	0	; () banked
 11647  000690  6F8F               	movwf	(printf@f+1)& (0+255),b
 11648  000692  ECB8  F008         	call	_printf	;wreg free
 11649                           
 11650                           ;Test.c: 309: updateServoPosition(1350, 3);
 11651  000696  0E05               	movlw	5
 11652  000698  0100               	movlb	0	; () banked
 11653  00069A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11654  00069C  0E46               	movlw	70
 11655  00069E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11656  0006A0  0E00               	movlw	0
 11657  0006A2  0100               	movlb	0	; () banked
 11658  0006A4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11659  0006A6  0E03               	movlw	3
 11660  0006A8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11661  0006AA  EC48  F01E         	call	_updateServoPosition	;wreg free
 11662                           
 11663                           ;Test.c: 310: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11664  0006AE  0E00               	movlw	0
 11665  0006B0  0100               	movlb	0	; () banked
 11666  0006B2  6FBC               	movwf	actuatorTest@i_1659& (0+255),b
 11667  0006B4                     l6953:
 11668                           
 11669                           ; BSR set to: 0
 11670  0006B4  0E63               	movlw	99
 11671  0006B6  0100               	movlb	0	; () banked
 11672  0006B8  65BC               	cpfsgt	actuatorTest@i_1659& (0+255),b
 11673  0006BA  D001               	goto	l6957
 11674  0006BC  D00C               	goto	l6961
 11675  0006BE                     l6957:
 11676                           
 11677                           ; BSR set to: 0
 11678  0006BE  0E68               	movlw	104
 11679  0006C0  0100               	movlb	0	; () banked
 11680  0006C2  6FAB               	movwf	??_actuatorTest& (0+255),b
 11681  0006C4  0EE4               	movlw	228
 11682  0006C6                     u7887:
 11683  0006C6  2EE8               	decfsz	wreg,f,c
 11684  0006C8  D7FE               	bra	u7887
 11685  0006CA  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11686  0006CC  D7FC               	bra	u7887
 11687  0006CE  F000               	nop	
 11688  0006D0  0100               	movlb	0	; () banked
 11689  0006D2  2BBC               	incf	actuatorTest@i_1659& (0+255),f,b
 11690  0006D4  D7EF               	goto	l6953
 11691  0006D6                     l6961:
 11692                           
 11693                           ; BSR set to: 0
 11694  0006D6  0E00               	movlw	0
 11695  0006D8  0100               	movlb	0	; () banked
 11696  0006DA  6FBD               	movwf	actuatorTest@i_1660& (0+255),b
 11697  0006DC                     l6963:
 11698                           
 11699                           ; BSR set to: 0
 11700  0006DC  0E63               	movlw	99
 11701  0006DE  0100               	movlb	0	; () banked
 11702  0006E0  65BD               	cpfsgt	actuatorTest@i_1660& (0+255),b
 11703  0006E2  D001               	goto	l6967
 11704  0006E4  D00C               	goto	l6971
 11705  0006E6                     l6967:
 11706                           
 11707                           ; BSR set to: 0
 11708  0006E6  0E68               	movlw	104
 11709  0006E8  0100               	movlb	0	; () banked
 11710  0006EA  6FAB               	movwf	??_actuatorTest& (0+255),b
 11711  0006EC  0EE4               	movlw	228
 11712  0006EE                     u7897:
 11713  0006EE  2EE8               	decfsz	wreg,f,c
 11714  0006F0  D7FE               	bra	u7897
 11715  0006F2  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11716  0006F4  D7FC               	bra	u7897
 11717  0006F6  F000               	nop	
 11718  0006F8  0100               	movlb	0	; () banked
 11719  0006FA  2BBD               	incf	actuatorTest@i_1660& (0+255),f,b
 11720  0006FC  D7EF               	goto	l6963
 11721  0006FE                     l6971:
 11722                           
 11723                           ; BSR set to: 0
 11724                           ;Test.c: 312: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11725  0006FE  0E80               	movlw	128
 11726  000700  ECC1  F023         	call	_lcdInst
 11727  000704  0EC0               	movlw	192
 11728  000706  ECC1  F023         	call	_lcdInst
 11729                           
 11730                           ;Test.c: 313: printf("LEVEL -- 2s     ");
 11731  00070A  0EFE               	movlw	low STR_104
 11732  00070C  0100               	movlb	0	; () banked
 11733  00070E  6F8E               	movwf	printf@f& (0+255),b
 11734  000710  0EFB               	movlw	high STR_104
 11735  000712  0100               	movlb	0	; () banked
 11736  000714  6F8F               	movwf	(printf@f+1)& (0+255),b
 11737  000716  ECB8  F008         	call	_printf	;wreg free
 11738                           
 11739                           ;Test.c: 314: updateServoPosition(1190, 3);
 11740  00071A  0E04               	movlw	4
 11741  00071C  0100               	movlb	0	; () banked
 11742  00071E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11743  000720  0EA6               	movlw	166
 11744  000722  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11745  000724  0E00               	movlw	0
 11746  000726  0100               	movlb	0	; () banked
 11747  000728  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11748  00072A  0E03               	movlw	3
 11749  00072C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11750  00072E  EC48  F01E         	call	_updateServoPosition	;wreg free
 11751                           
 11752                           ;Test.c: 315: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11753  000732  0E00               	movlw	0
 11754  000734  0100               	movlb	0	; () banked
 11755  000736  6FBE               	movwf	actuatorTest@i_1662& (0+255),b
 11756  000738                     l6979:
 11757                           
 11758                           ; BSR set to: 0
 11759  000738  0E63               	movlw	99
 11760  00073A  0100               	movlb	0	; () banked
 11761  00073C  65BE               	cpfsgt	actuatorTest@i_1662& (0+255),b
 11762  00073E  D001               	goto	l6983
 11763  000740  D00C               	goto	l6987
 11764  000742                     l6983:
 11765                           
 11766                           ; BSR set to: 0
 11767  000742  0E68               	movlw	104
 11768  000744  0100               	movlb	0	; () banked
 11769  000746  6FAB               	movwf	??_actuatorTest& (0+255),b
 11770  000748  0EE4               	movlw	228
 11771  00074A                     u7907:
 11772  00074A  2EE8               	decfsz	wreg,f,c
 11773  00074C  D7FE               	bra	u7907
 11774  00074E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11775  000750  D7FC               	bra	u7907
 11776  000752  F000               	nop	
 11777  000754  0100               	movlb	0	; () banked
 11778  000756  2BBE               	incf	actuatorTest@i_1662& (0+255),f,b
 11779  000758  D7EF               	goto	l6979
 11780  00075A                     l6987:
 11781                           
 11782                           ; BSR set to: 0
 11783  00075A  0E00               	movlw	0
 11784  00075C  0100               	movlb	0	; () banked
 11785  00075E  6FBF               	movwf	actuatorTest@i_1663& (0+255),b
 11786  000760                     l6989:
 11787                           
 11788                           ; BSR set to: 0
 11789  000760  0E63               	movlw	99
 11790  000762  0100               	movlb	0	; () banked
 11791  000764  65BF               	cpfsgt	actuatorTest@i_1663& (0+255),b
 11792  000766  D001               	goto	l6993
 11793  000768  D00C               	goto	l1134
 11794  00076A                     l6993:
 11795                           
 11796                           ; BSR set to: 0
 11797  00076A  0E68               	movlw	104
 11798  00076C  0100               	movlb	0	; () banked
 11799  00076E  6FAB               	movwf	??_actuatorTest& (0+255),b
 11800  000770  0EE4               	movlw	228
 11801  000772                     u7917:
 11802  000772  2EE8               	decfsz	wreg,f,c
 11803  000774  D7FE               	bra	u7917
 11804  000776  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11805  000778  D7FC               	bra	u7917
 11806  00077A  F000               	nop	
 11807  00077C  0100               	movlb	0	; () banked
 11808  00077E  2BBF               	incf	actuatorTest@i_1663& (0+255),f,b
 11809  000780  D7EF               	goto	l6989
 11810  000782                     l1134:
 11811                           
 11812                           ; BSR set to: 0
 11813                           ;Test.c: 316: TMR3ON = 0;
 11814  000782  90B1               	bcf	4017,0,c	;volatile
 11815                           
 11816                           ;Test.c: 317: (INTCONbits.GIE = 0);
 11817  000784  9EF2               	bcf	intcon,7,c	;volatile
 11818                           
 11819                           ; BSR set to: 0
 11820                           ;Test.c: 322: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11821  000786  0E01               	movlw	1
 11822  000788  ECC1  F023         	call	_lcdInst
 11823  00078C  0E68               	movlw	104
 11824  00078E  0100               	movlb	0	; () banked
 11825  000790  6FAB               	movwf	??_actuatorTest& (0+255),b
 11826  000792  0EE4               	movlw	228
 11827  000794                     u7927:
 11828  000794  2EE8               	decfsz	wreg,f,c
 11829  000796  D7FE               	bra	u7927
 11830  000798  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11831  00079A  D7FC               	bra	u7927
 11832  00079C  F000               	nop	
 11833  00079E  0E80               	movlw	128
 11834  0007A0  ECC1  F023         	call	_lcdInst
 11835                           
 11836                           ;Test.c: 323: printf("TST: CAM SERVO");
 11837  0007A4  0E8A               	movlw	low STR_107
 11838  0007A6  0100               	movlb	0	; () banked
 11839  0007A8  6F8E               	movwf	printf@f& (0+255),b
 11840  0007AA  0EFE               	movlw	high STR_107
 11841  0007AC  0100               	movlb	0	; () banked
 11842  0007AE  6F8F               	movwf	(printf@f+1)& (0+255),b
 11843  0007B0  ECB8  F008         	call	_printf	;wreg free
 11844                           
 11845                           ;Test.c: 324: lcdInst(0b11000000);;
 11846  0007B4  0EC0               	movlw	192
 11847  0007B6  ECC1  F023         	call	_lcdInst
 11848                           
 11849                           ;Test.c: 325: printf("CAM UP  |RC0=1");
 11850  0007BA  0E6C               	movlw	low STR_108
 11851  0007BC  0100               	movlb	0	; () banked
 11852  0007BE  6F8E               	movwf	printf@f& (0+255),b
 11853  0007C0  0EFE               	movlw	high STR_108
 11854  0007C2  0100               	movlb	0	; () banked
 11855  0007C4  6F8F               	movwf	(printf@f+1)& (0+255),b
 11856  0007C6  ECB8  F008         	call	_printf	;wreg free
 11857                           
 11858                           ;Test.c: 326: LATCbits.LATC0 = 1;
 11859  0007CA  808B               	bsf	3979,0,c	;volatile
 11860                           
 11861                           ;Test.c: 327: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11862  0007CC  0E00               	movlw	0
 11863  0007CE  0100               	movlb	0	; () banked
 11864  0007D0  6FC0               	movwf	actuatorTest@i_1666& (0+255),b
 11865  0007D2                     l7013:
 11866                           
 11867                           ; BSR set to: 0
 11868  0007D2  0E63               	movlw	99
 11869  0007D4  0100               	movlb	0	; () banked
 11870  0007D6  65C0               	cpfsgt	actuatorTest@i_1666& (0+255),b
 11871  0007D8  D001               	goto	l7017
 11872  0007DA  D00C               	goto	l7021
 11873  0007DC                     l7017:
 11874                           
 11875                           ; BSR set to: 0
 11876  0007DC  0E68               	movlw	104
 11877  0007DE  0100               	movlb	0	; () banked
 11878  0007E0  6FAB               	movwf	??_actuatorTest& (0+255),b
 11879  0007E2  0EE4               	movlw	228
 11880  0007E4                     u7937:
 11881  0007E4  2EE8               	decfsz	wreg,f,c
 11882  0007E6  D7FE               	bra	u7937
 11883  0007E8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11884  0007EA  D7FC               	bra	u7937
 11885  0007EC  F000               	nop	
 11886  0007EE  0100               	movlb	0	; () banked
 11887  0007F0  2BC0               	incf	actuatorTest@i_1666& (0+255),f,b
 11888  0007F2  D7EF               	goto	l7013
 11889  0007F4                     l7021:
 11890                           
 11891                           ; BSR set to: 0
 11892  0007F4  0E00               	movlw	0
 11893  0007F6  0100               	movlb	0	; () banked
 11894  0007F8  6FC1               	movwf	actuatorTest@i_1667& (0+255),b
 11895  0007FA                     l7023:
 11896                           
 11897                           ; BSR set to: 0
 11898  0007FA  0E63               	movlw	99
 11899  0007FC  0100               	movlb	0	; () banked
 11900  0007FE  65C1               	cpfsgt	actuatorTest@i_1667& (0+255),b
 11901  000800  D001               	goto	l7027
 11902  000802  D00C               	goto	l7031
 11903  000804                     l7027:
 11904                           
 11905                           ; BSR set to: 0
 11906  000804  0E68               	movlw	104
 11907  000806  0100               	movlb	0	; () banked
 11908  000808  6FAB               	movwf	??_actuatorTest& (0+255),b
 11909  00080A  0EE4               	movlw	228
 11910  00080C                     u7947:
 11911  00080C  2EE8               	decfsz	wreg,f,c
 11912  00080E  D7FE               	bra	u7947
 11913  000810  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11914  000812  D7FC               	bra	u7947
 11915  000814  F000               	nop	
 11916  000816  0100               	movlb	0	; () banked
 11917  000818  2BC1               	incf	actuatorTest@i_1667& (0+255),f,b
 11918  00081A  D7EF               	goto	l7023
 11919  00081C                     l7031:
 11920                           
 11921                           ; BSR set to: 0
 11922                           ;Test.c: 328: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11923  00081C  0E80               	movlw	128
 11924  00081E  ECC1  F023         	call	_lcdInst
 11925  000822  0EC0               	movlw	192
 11926  000824  ECC1  F023         	call	_lcdInst
 11927                           
 11928                           ;Test.c: 329: printf("CAM DWN |RC0=0");
 11929  000828  0E5D               	movlw	low STR_109
 11930  00082A  0100               	movlb	0	; () banked
 11931  00082C  6F8E               	movwf	printf@f& (0+255),b
 11932  00082E  0EFE               	movlw	high STR_109
 11933  000830  0100               	movlb	0	; () banked
 11934  000832  6F8F               	movwf	(printf@f+1)& (0+255),b
 11935  000834  ECB8  F008         	call	_printf	;wreg free
 11936                           
 11937                           ;Test.c: 332: for(i=0;i<10000;i++)
 11938  000838  0E00               	movlw	0
 11939  00083A  0100               	movlb	0	; () banked
 11940  00083C  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 11941  00083E  0E00               	movlw	0
 11942  000840  6FC4               	movwf	actuatorTest@i& (0+255),b
 11943  000842                     l7037:
 11944                           
 11945                           ; BSR set to: 0
 11946  000842  0100               	movlb	0	; () banked
 11947  000844  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11948  000846  D008               	goto	l1139
 11949  000848  0E10               	movlw	16
 11950  00084A  0100               	movlb	0	; () banked
 11951  00084C  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 11952  00084E  0E27               	movlw	39
 11953  000850  0100               	movlb	0	; () banked
 11954  000852  59C5               	subwfb	(actuatorTest@i+1)& (0+255),w,b
 11955  000854  B0D8               	btfsc	status,0,c
 11956  000856  D00D               	goto	l7047
 11957  000858                     l1139:
 11958                           
 11959                           ; BSR set to: 0
 11960                           ;Test.c: 333: {
 11961                           ;Test.c: 334: LATCbits.LATC0 = 1;
 11962  000858  808B               	bsf	3979,0,c	;volatile
 11963                           
 11964                           ; BSR set to: 0
 11965                           ;Test.c: 335: _delay((unsigned long)((10)*(32000000/4000000.0)));
 11966  00085A  0E1A               	movlw	26
 11967  00085C                     u7957:
 11968  00085C  2EE8               	decfsz	wreg,f,c
 11969  00085E  D7FE               	bra	u7957
 11970  000860  D000               	nop2	
 11971                           
 11972                           ;Test.c: 336: LATCbits.LATC0 = 0;
 11973  000862  908B               	bcf	3979,0,c	;volatile
 11974                           
 11975                           ;Test.c: 337: _delay((unsigned long)((90)*(32000000/4000000.0)));
 11976  000864  0EF0               	movlw	240
 11977  000866                     u7967:
 11978  000866  2EE8               	decfsz	wreg,f,c
 11979  000868  D7FE               	bra	u7967
 11980  00086A  0100               	movlb	0	; () banked
 11981  00086C  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 11982  00086E  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 11983  000870  D7E8               	goto	l7037
 11984  000872                     l7047:
 11985                           
 11986                           ; BSR set to: 0
 11987                           ;Test.c: 338: }
 11988                           ;Test.c: 340: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11989  000872  0E00               	movlw	0
 11990  000874  0100               	movlb	0	; () banked
 11991  000876  6FC2               	movwf	actuatorTest@i_1669& (0+255),b
 11992  000878                     l7049:
 11993                           
 11994                           ; BSR set to: 0
 11995  000878  0E63               	movlw	99
 11996  00087A  0100               	movlb	0	; () banked
 11997  00087C  65C2               	cpfsgt	actuatorTest@i_1669& (0+255),b
 11998  00087E  D001               	goto	l7053
 11999  000880  D00C               	goto	l7057
 12000  000882                     l7053:
 12001                           
 12002                           ; BSR set to: 0
 12003  000882  0E68               	movlw	104
 12004  000884  0100               	movlb	0	; () banked
 12005  000886  6FAB               	movwf	??_actuatorTest& (0+255),b
 12006  000888  0EE4               	movlw	228
 12007  00088A                     u7977:
 12008  00088A  2EE8               	decfsz	wreg,f,c
 12009  00088C  D7FE               	bra	u7977
 12010  00088E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12011  000890  D7FC               	bra	u7977
 12012  000892  F000               	nop	
 12013  000894  0100               	movlb	0	; () banked
 12014  000896  2BC2               	incf	actuatorTest@i_1669& (0+255),f,b
 12015  000898  D7EF               	goto	l7049
 12016  00089A                     l7057:
 12017                           
 12018                           ; BSR set to: 0
 12019  00089A  0E00               	movlw	0
 12020  00089C  0100               	movlb	0	; () banked
 12021  00089E  6FC3               	movwf	actuatorTest@i_1670& (0+255),b
 12022  0008A0                     l7059:
 12023                           
 12024                           ; BSR set to: 0
 12025  0008A0  0E63               	movlw	99
 12026  0008A2  0100               	movlb	0	; () banked
 12027  0008A4  65C3               	cpfsgt	actuatorTest@i_1670& (0+255),b
 12028  0008A6  D001               	goto	l7063
 12029  0008A8  D00C               	goto	l7067
 12030  0008AA                     l7063:
 12031                           
 12032                           ; BSR set to: 0
 12033  0008AA  0E68               	movlw	104
 12034  0008AC  0100               	movlb	0	; () banked
 12035  0008AE  6FAB               	movwf	??_actuatorTest& (0+255),b
 12036  0008B0  0EE4               	movlw	228
 12037  0008B2                     u7987:
 12038  0008B2  2EE8               	decfsz	wreg,f,c
 12039  0008B4  D7FE               	bra	u7987
 12040  0008B6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12041  0008B8  D7FC               	bra	u7987
 12042  0008BA  F000               	nop	
 12043  0008BC  0100               	movlb	0	; () banked
 12044  0008BE  2BC3               	incf	actuatorTest@i_1670& (0+255),f,b
 12045  0008C0  D7EF               	goto	l7059
 12046  0008C2                     l7067:
 12047                           
 12048                           ; BSR set to: 0
 12049                           ;Test.c: 341: machine_state = Testing_state;
 12050  0008C2  0E03               	movlw	3
 12051  0008C4  0100               	movlb	0	; () banked
 12052  0008C6  6FFC               	movwf	_machine_state& (0+255),b
 12053                           
 12054                           ; BSR set to: 0
 12055  0008C8  0012               	return		;funcret
 12056  0008CA                     __end_of_actuatorTest:
 12057                           	opt stack 0
 12058                           tblptru	equ	0xFF8
 12059                           tblptrh	equ	0xFF7
 12060                           tblptrl	equ	0xFF6
 12061                           tablat	equ	0xFF5
 12062                           prodh	equ	0xFF4
 12063                           prodl	equ	0xFF3
 12064                           intcon	equ	0xFF2
 12065                           intcon2	equ	0xFF1
 12066                           intcon3	equ	0xFF0
 12067                           postinc0	equ	0xFEE
 12068                           wreg	equ	0xFE8
 12069                           postdec1	equ	0xFE5
 12070                           fsr1l	equ	0xFE1
 12071                           indf2	equ	0xFDF
 12072                           postinc2	equ	0xFDE
 12073                           postdec2	equ	0xFDD
 12074                           fsr2h	equ	0xFDA
 12075                           fsr2l	equ	0xFD9
 12076                           status	equ	0xFD8
 12077                           
 12078 ;; *************** function _ToggleTestA5 *****************
 12079 ;; Defined at:
 12080 ;;		line 485 in file "Test.c"
 12081 ;; Parameters:    Size  Location     Type
 12082 ;;		None
 12083 ;; Auto vars:     Size  Location     Type
 12084 ;;  on              2   44[BANK0 ] int 
 12085 ;; Return value:  Size  Location     Type
 12086 ;;                  1    wreg      void 
 12087 ;; Registers used:
 12088 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12089 ;; Tracked objects:
 12090 ;;		On entry : 0/0
 12091 ;;		On exit  : 0/0
 12092 ;;		Unchanged: 0/0
 12093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12094 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12095 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12096 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12097 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12098 ;;Total ram usage:        3 bytes
 12099 ;; Hardware stack levels used:    1
 12100 ;; Hardware stack levels required when called:   10
 12101 ;; This function calls:
 12102 ;;		_lcdInst
 12103 ;;		_printf
 12104 ;; This function is called by:
 12105 ;;		_Test
 12106 ;; This function uses a non-reentrant model
 12107 ;;
 12108                           
 12109                           	psect	text41
 12110  003A86                     __ptext41:
 12111                           	opt stack 0
 12112  003A86                     _ToggleTestA5:
 12113                           	opt stack 19
 12114                           
 12115                           ;Test.c: 486: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12116                           
 12117                           ; BSR set to: 0
 12118                           ;incstack = 0
 12119  003A86  0E01               	movlw	1
 12120  003A88  ECC1  F023         	call	_lcdInst
 12121  003A8C  0E68               	movlw	104
 12122  003A8E  0100               	movlb	0	; () banked
 12123  003A90  6FAB               	movwf	??_ToggleTestA5& (0+255),b
 12124  003A92  0EE4               	movlw	228
 12125  003A94                     u7997:
 12126  003A94  2EE8               	decfsz	wreg,f,c
 12127  003A96  D7FE               	bra	u7997
 12128  003A98  2FAB               	decfsz	??_ToggleTestA5& (0+255),f,b
 12129  003A9A  D7FC               	bra	u7997
 12130  003A9C  F000               	nop	
 12131  003A9E  0E80               	movlw	128
 12132  003AA0  ECC1  F023         	call	_lcdInst
 12133                           
 12134                           ;Test.c: 487: printf("D WILL RETURN   ");
 12135  003AA4  0E31               	movlw	low STR_115
 12136  003AA6  0100               	movlb	0	; () banked
 12137  003AA8  6F8E               	movwf	printf@f& (0+255),b
 12138  003AAA  0EFC               	movlw	high STR_115
 12139  003AAC  0100               	movlb	0	; () banked
 12140  003AAE  6F8F               	movwf	(printf@f+1)& (0+255),b
 12141  003AB0  ECB8  F008         	call	_printf	;wreg free
 12142                           
 12143                           ;Test.c: 488: lcdInst(0b11000000);;
 12144  003AB4  0EC0               	movlw	192
 12145  003AB6  ECC1  F023         	call	_lcdInst
 12146                           
 12147                           ;Test.c: 489: printf("ELSE TOGGLES RA5");
 12148  003ABA  0E64               	movlw	low STR_116
 12149  003ABC  0100               	movlb	0	; () banked
 12150  003ABE  6F8E               	movwf	printf@f& (0+255),b
 12151  003AC0  0EFC               	movlw	high STR_116
 12152  003AC2  0100               	movlb	0	; () banked
 12153  003AC4  6F8F               	movwf	(printf@f+1)& (0+255),b
 12154  003AC6  ECB8  F008         	call	_printf	;wreg free
 12155                           
 12156                           ;Test.c: 490: int on = 0;
 12157  003ACA  0E00               	movlw	0
 12158  003ACC  0100               	movlb	0	; () banked
 12159  003ACE  6FAD               	movwf	(ToggleTestA5@on+1)& (0+255),b
 12160  003AD0  0E00               	movlw	0
 12161  003AD2  6FAC               	movwf	ToggleTestA5@on& (0+255),b
 12162  003AD4                     l1204:
 12163  003AD4  A281               	btfss	3969,1,c	;volatile
 12164  003AD6  D7FE               	goto	l1204
 12165                           
 12166                           ;Test.c: 495: }
 12167                           ;Test.c: 496: if(PORTB >> 4 == 0b1111){
 12168  003AD8  3881               	swapf	3969,w,c	;volatile
 12169  003ADA  0B0F               	andlw	15
 12170  003ADC  0A0F               	xorlw	15
 12171  003ADE  B4D8               	btfsc	status,2,c
 12172  003AE0  0012               	return	
 12173                           
 12174                           ;Test.c: 499: else{
 12175                           ;Test.c: 500: if(on == 0){
 12176                           
 12177                           ;Test.c: 498: }
 12178                           
 12179                           ;Test.c: 497: break;
 12180  003AE2  0100               	movlb	0	; () banked
 12181  003AE4  51AC               	movf	ToggleTestA5@on& (0+255),w,b
 12182  003AE6  0100               	movlb	0	; () banked
 12183  003AE8  11AD               	iorwf	(ToggleTestA5@on+1)& (0+255),w,b
 12184  003AEA  A4D8               	btfss	status,2,c
 12185  003AEC  D007               	goto	l7125
 12186                           
 12187                           ; BSR set to: 0
 12188                           ;Test.c: 501: on = 1;
 12189  003AEE  0E00               	movlw	0
 12190  003AF0  0100               	movlb	0	; () banked
 12191  003AF2  6FAD               	movwf	(ToggleTestA5@on+1)& (0+255),b
 12192  003AF4  0E01               	movlw	1
 12193  003AF6  6FAC               	movwf	ToggleTestA5@on& (0+255),b
 12194                           
 12195                           ; BSR set to: 0
 12196                           ;Test.c: 502: LATAbits.LATA5 = 1;
 12197  003AF8  8A89               	bsf	3977,5,c	;volatile
 12198                           
 12199                           ;Test.c: 503: }
 12200  003AFA  D006               	goto	l1212
 12201  003AFC                     l7125:
 12202                           
 12203                           ; BSR set to: 0
 12204                           ;Test.c: 504: else{
 12205                           ;Test.c: 505: on = 0;
 12206  003AFC  0E00               	movlw	0
 12207  003AFE  0100               	movlb	0	; () banked
 12208  003B00  6FAD               	movwf	(ToggleTestA5@on+1)& (0+255),b
 12209  003B02  0E00               	movlw	0
 12210  003B04  6FAC               	movwf	ToggleTestA5@on& (0+255),b
 12211                           
 12212                           ; BSR set to: 0
 12213                           ;Test.c: 506: LATAbits.LATA5 = 0;
 12214  003B06  9A89               	bcf	3977,5,c	;volatile
 12215  003B08                     l1212:
 12216  003B08  A281               	btfss	3969,1,c	;volatile
 12217  003B0A  D7E4               	goto	l1204
 12218  003B0C  D7FD               	goto	l1212
 12219  003B0E                     __end_of_ToggleTestA5:
 12220                           	opt stack 0
 12221                           tblptru	equ	0xFF8
 12222                           tblptrh	equ	0xFF7
 12223                           tblptrl	equ	0xFF6
 12224                           tablat	equ	0xFF5
 12225                           prodh	equ	0xFF4
 12226                           prodl	equ	0xFF3
 12227                           intcon	equ	0xFF2
 12228                           intcon2	equ	0xFF1
 12229                           intcon3	equ	0xFF0
 12230                           postinc0	equ	0xFEE
 12231                           wreg	equ	0xFE8
 12232                           postdec1	equ	0xFE5
 12233                           fsr1l	equ	0xFE1
 12234                           indf2	equ	0xFDF
 12235                           postinc2	equ	0xFDE
 12236                           postdec2	equ	0xFDD
 12237                           fsr2h	equ	0xFDA
 12238                           fsr2l	equ	0xFD9
 12239                           status	equ	0xFD8
 12240                           
 12241 ;; *************** function _SolenoidTestA5 *****************
 12242 ;; Defined at:
 12243 ;;		line 461 in file "Test.c"
 12244 ;; Parameters:    Size  Location     Type
 12245 ;;		None
 12246 ;; Auto vars:     Size  Location     Type
 12247 ;;  i               1   47[BANK0 ] unsigned char 
 12248 ;;  i               1   48[BANK0 ] unsigned char 
 12249 ;;  i               2   45[BANK0 ] int 
 12250 ;; Return value:  Size  Location     Type
 12251 ;;                  1    wreg      void 
 12252 ;; Registers used:
 12253 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12254 ;; Tracked objects:
 12255 ;;		On entry : 0/0
 12256 ;;		On exit  : 0/0
 12257 ;;		Unchanged: 0/0
 12258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12259 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12260 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12261 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12262 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12263 ;;Total ram usage:        6 bytes
 12264 ;; Hardware stack levels used:    1
 12265 ;; Hardware stack levels required when called:   10
 12266 ;; This function calls:
 12267 ;;		_lcdInst
 12268 ;;		_printf
 12269 ;; This function is called by:
 12270 ;;		_Test
 12271 ;; This function uses a non-reentrant model
 12272 ;;
 12273                           
 12274                           	psect	text42
 12275  003350                     __ptext42:
 12276                           	opt stack 0
 12277  003350                     _SolenoidTestA5:
 12278                           	opt stack 19
 12279  003350                     
 12280                           ;Test.c: 463: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12281  003350  0E01               	movlw	1
 12282  003352  ECC1  F023         	call	_lcdInst
 12283  003356  0E68               	movlw	104
 12284  003358  0100               	movlb	0	; () banked
 12285  00335A  6FAB               	movwf	??_SolenoidTestA5& (0+255),b
 12286  00335C  0EE4               	movlw	228
 12287  00335E                     u8007:
 12288  00335E  2EE8               	decfsz	wreg,f,c
 12289  003360  D7FE               	bra	u8007
 12290  003362  2FAB               	decfsz	??_SolenoidTestA5& (0+255),f,b
 12291  003364  D7FC               	bra	u8007
 12292  003366  F000               	nop	
 12293  003368  0E80               	movlw	128
 12294  00336A  ECC1  F023         	call	_lcdInst
 12295                           
 12296                           ;Test.c: 464: printf("SOLENOID TST");
 12297  00336E  0E36               	movlw	low STR_113
 12298  003370  0100               	movlb	0	; () banked
 12299  003372  6F8E               	movwf	printf@f& (0+255),b
 12300  003374  0EFF               	movlw	high STR_113
 12301  003376  0100               	movlb	0	; () banked
 12302  003378  6F8F               	movwf	(printf@f+1)& (0+255),b
 12303  00337A  ECB8  F008         	call	_printf	;wreg free
 12304                           
 12305                           ;Test.c: 465: lcdInst(0b11000000);;
 12306  00337E  0EC0               	movlw	192
 12307  003380  ECC1  F023         	call	_lcdInst
 12308  003384                     l1189:
 12309  003384  A281               	btfss	3969,1,c	;volatile
 12310  003386  D7FE               	goto	l1189
 12311                           
 12312                           ;Test.c: 470: }
 12313                           ;Test.c: 472: for(int i = 0; i < 3; i++){
 12314  003388  0E00               	movlw	0
 12315  00338A  0100               	movlb	0	; () banked
 12316  00338C  6FAE               	movwf	(SolenoidTestA5@i+1)& (0+255),b
 12317  00338E  0E00               	movlw	0
 12318  003390  6FAD               	movwf	SolenoidTestA5@i& (0+255),b
 12319  003392                     l7141:
 12320                           
 12321                           ; BSR set to: 0
 12322  003392  0100               	movlb	0	; () banked
 12323  003394  BFAE               	btfsc	(SolenoidTestA5@i+1)& (0+255),7,b
 12324  003396  D008               	goto	l7145
 12325  003398  0100               	movlb	0	; () banked
 12326  00339A  51AE               	movf	(SolenoidTestA5@i+1)& (0+255),w,b
 12327  00339C  E12D               	bnz	l7161
 12328  00339E  0E03               	movlw	3
 12329  0033A0  0100               	movlb	0	; () banked
 12330  0033A2  5DAD               	subwf	SolenoidTestA5@i& (0+255),w,b
 12331  0033A4  B0D8               	btfsc	status,0,c
 12332  0033A6  D028               	goto	l7161
 12333  0033A8                     l7145:
 12334                           
 12335                           ; BSR set to: 0
 12336                           ;Test.c: 473: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12337  0033A8  0E00               	movlw	0
 12338  0033AA  0100               	movlb	0	; () banked
 12339  0033AC  6FAF               	movwf	SolenoidTestA5@i_1683& (0+255),b
 12340  0033AE                     l7147:
 12341                           
 12342                           ; BSR set to: 0
 12343  0033AE  0E63               	movlw	99
 12344  0033B0  0100               	movlb	0	; () banked
 12345  0033B2  65AF               	cpfsgt	SolenoidTestA5@i_1683& (0+255),b
 12346  0033B4  D001               	goto	l7151
 12347  0033B6  D00C               	goto	l1195
 12348  0033B8                     l7151:
 12349                           
 12350                           ; BSR set to: 0
 12351  0033B8  0E68               	movlw	104
 12352  0033BA  0100               	movlb	0	; () banked
 12353  0033BC  6FAB               	movwf	??_SolenoidTestA5& (0+255),b
 12354  0033BE  0EE4               	movlw	228
 12355  0033C0                     u8017:
 12356  0033C0  2EE8               	decfsz	wreg,f,c
 12357  0033C2  D7FE               	bra	u8017
 12358  0033C4  2FAB               	decfsz	??_SolenoidTestA5& (0+255),f,b
 12359  0033C6  D7FC               	bra	u8017
 12360  0033C8  F000               	nop	
 12361  0033CA  0100               	movlb	0	; () banked
 12362  0033CC  2BAF               	incf	SolenoidTestA5@i_1683& (0+255),f,b
 12363  0033CE  D7EF               	goto	l7147
 12364  0033D0                     l1195:
 12365                           
 12366                           ; BSR set to: 0
 12367                           ;Test.c: 474: LATAbits.LATA5 = 1;
 12368  0033D0  8A89               	bsf	3977,5,c	;volatile
 12369                           
 12370                           ; BSR set to: 0
 12371                           ;Test.c: 475: _delay((unsigned long)((150)*(32000000/4000.0)));
 12372  0033D2  0E07               	movlw	7
 12373  0033D4  0100               	movlb	0	; () banked
 12374  0033D6  6FAC               	movwf	(??_SolenoidTestA5+1)& (0+255),b
 12375  0033D8  0E17               	movlw	23
 12376  0033DA  0100               	movlb	0	; () banked
 12377  0033DC  6FAB               	movwf	??_SolenoidTestA5& (0+255),b
 12378  0033DE  0E6A               	movlw	106
 12379  0033E0                     u8027:
 12380  0033E0  2EE8               	decfsz	wreg,f,c
 12381  0033E2  D7FE               	bra	u8027
 12382  0033E4  2FAB               	decfsz	??_SolenoidTestA5& (0+255),f,b
 12383  0033E6  D7FC               	bra	u8027
 12384  0033E8  2FAC               	decfsz	(??_SolenoidTestA5+1)& (0+255),f,b
 12385  0033EA  D7FA               	bra	u8027
 12386  0033EC  F000               	nop	
 12387                           
 12388                           ;Test.c: 476: LATAbits.LATA5 = 0;
 12389  0033EE  9A89               	bcf	3977,5,c	;volatile
 12390  0033F0  0100               	movlb	0	; () banked
 12391  0033F2  4BAD               	infsnz	SolenoidTestA5@i& (0+255),f,b
 12392  0033F4  2BAE               	incf	(SolenoidTestA5@i+1)& (0+255),f,b
 12393  0033F6  D7CD               	goto	l7141
 12394  0033F8                     l7161:
 12395                           
 12396                           ; BSR set to: 0
 12397                           ;Test.c: 477: }
 12398                           ;Test.c: 479: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12399  0033F8  0E01               	movlw	1
 12400  0033FA  ECC1  F023         	call	_lcdInst
 12401  0033FE  0E68               	movlw	104
 12402  003400  0100               	movlb	0	; () banked
 12403  003402  6FAB               	movwf	??_SolenoidTestA5& (0+255),b
 12404  003404  0EE4               	movlw	228
 12405  003406                     u8037:
 12406  003406  2EE8               	decfsz	wreg,f,c
 12407  003408  D7FE               	bra	u8037
 12408  00340A  2FAB               	decfsz	??_SolenoidTestA5& (0+255),f,b
 12409  00340C  D7FC               	bra	u8037
 12410  00340E  F000               	nop	
 12411  003410  0E80               	movlw	128
 12412  003412  ECC1  F023         	call	_lcdInst
 12413                           
 12414                           ;Test.c: 480: printf("PUSH DONE");
 12415  003416  0E87               	movlw	low STR_114
 12416  003418  0100               	movlb	0	; () banked
 12417  00341A  6F8E               	movwf	printf@f& (0+255),b
 12418  00341C  0EFF               	movlw	high STR_114
 12419  00341E  0100               	movlb	0	; () banked
 12420  003420  6F8F               	movwf	(printf@f+1)& (0+255),b
 12421  003422  ECB8  F008         	call	_printf	;wreg free
 12422                           
 12423                           ;Test.c: 481: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12424  003426  0E00               	movlw	0
 12425  003428  0100               	movlb	0	; () banked
 12426  00342A  6FB0               	movwf	SolenoidTestA5@i_1685& (0+255),b
 12427  00342C                     l7171:
 12428                           
 12429                           ; BSR set to: 0
 12430  00342C  0E63               	movlw	99
 12431  00342E  0100               	movlb	0	; () banked
 12432  003430  65B0               	cpfsgt	SolenoidTestA5@i_1685& (0+255),b
 12433  003432  D001               	goto	l7175
 12434  003434  D78D               	goto	l7129
 12435  003436                     l7175:
 12436                           
 12437                           ; BSR set to: 0
 12438  003436  0E68               	movlw	104
 12439  003438  0100               	movlb	0	; () banked
 12440  00343A  6FAB               	movwf	??_SolenoidTestA5& (0+255),b
 12441  00343C  0EE4               	movlw	228
 12442  00343E                     u8047:
 12443  00343E  2EE8               	decfsz	wreg,f,c
 12444  003440  D7FE               	bra	u8047
 12445  003442  2FAB               	decfsz	??_SolenoidTestA5& (0+255),f,b
 12446  003444  D7FC               	bra	u8047
 12447  003446  F000               	nop	
 12448  003448  0100               	movlb	0	; () banked
 12449  00344A  2BB0               	incf	SolenoidTestA5@i_1685& (0+255),f,b
 12450  00344C  D7EF               	goto	l7171
 12451  00344E                     __end_of_SolenoidTestA5:
 12452                           	opt stack 0
 12453                           tblptru	equ	0xFF8
 12454                           tblptrh	equ	0xFF7
 12455                           tblptrl	equ	0xFF6
 12456                           tablat	equ	0xFF5
 12457                           prodh	equ	0xFF4
 12458                           prodl	equ	0xFF3
 12459                           intcon	equ	0xFF2
 12460                           intcon2	equ	0xFF1
 12461                           intcon3	equ	0xFF0
 12462                           postinc0	equ	0xFEE
 12463                           wreg	equ	0xFE8
 12464                           postdec1	equ	0xFE5
 12465                           fsr1l	equ	0xFE1
 12466                           indf2	equ	0xFDF
 12467                           postinc2	equ	0xFDE
 12468                           postdec2	equ	0xFDD
 12469                           fsr2h	equ	0xFDA
 12470                           fsr2l	equ	0xFD9
 12471                           status	equ	0xFD8
 12472                           
 12473 ;; *************** function _PortTests *****************
 12474 ;; Defined at:
 12475 ;;		line 393 in file "Test.c"
 12476 ;; Parameters:    Size  Location     Type
 12477 ;;		None
 12478 ;; Auto vars:     Size  Location     Type
 12479 ;;		None
 12480 ;; Return value:  Size  Location     Type
 12481 ;;                  1    wreg      void 
 12482 ;; Registers used:
 12483 ;;		wreg, status,2, status,0
 12484 ;; Tracked objects:
 12485 ;;		On entry : 0/0
 12486 ;;		On exit  : 0/0
 12487 ;;		Unchanged: 0/0
 12488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12489 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12490 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12491 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12492 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12493 ;;Total ram usage:        2 bytes
 12494 ;; Hardware stack levels used:    1
 12495 ;; Hardware stack levels required when called:    7
 12496 ;; This function calls:
 12497 ;;		Nothing
 12498 ;; This function is called by:
 12499 ;;		_Test
 12500 ;; This function uses a non-reentrant model
 12501 ;;
 12502                           
 12503                           	psect	text43
 12504  003B94                     __ptext43:
 12505                           	opt stack 0
 12506  003B94                     _PortTests:
 12507                           	opt stack 22
 12508  003B94                     l1152:
 12509  003B94  A281               	btfss	3969,1,c	;volatile
 12510  003B96  D7FE               	goto	l1152
 12511                           
 12512                           ;Test.c: 397: var = PORTB >> 4;
 12513  003B98  CF81 F080          	movff	3969,??_PortTests	;volatile
 12514  003B9C  0100               	movlb	0	; () banked
 12515  003B9E  3B80               	swapf	??_PortTests& (0+255),f,b
 12516  003BA0  0E0F               	movlw	15
 12517  003BA2  1780               	andwf	??_PortTests& (0+255),f,b
 12518  003BA4  0100               	movlb	0	; () banked
 12519  003BA6  5180               	movf	??_PortTests& (0+255),w,b
 12520  003BA8  0100               	movlb	0	; () banked
 12521  003BAA  6FFA               	movwf	_var& (0+255),b
 12522  003BAC  6BFB               	clrf	(_var+1)& (0+255),b
 12523                           
 12524                           ;Test.c: 398: switch(var){
 12525  003BAE  D00C               	goto	l7183
 12526  003BB0                     l1156:
 12527                           
 12528                           ; BSR set to: 0
 12529                           ;Test.c: 400: LATEbits.LATE0 = 1;
 12530  003BB0  808D               	bsf	3981,0,c	;volatile
 12531                           
 12532                           ;Test.c: 401: break;
 12533  003BB2  D027               	goto	l1164
 12534  003BB4                     l1158:
 12535                           
 12536                           ; BSR set to: 0
 12537                           ;Test.c: 403: LATEbits.LATE1 = 1;
 12538  003BB4  828D               	bsf	3981,1,c	;volatile
 12539                           
 12540                           ;Test.c: 404: break;
 12541  003BB6  D025               	goto	l1164
 12542  003BB8                     l1159:
 12543                           
 12544                           ; BSR set to: 0
 12545                           ;Test.c: 406: LATDbits.LATD0 = 1;
 12546  003BB8  808C               	bsf	3980,0,c	;volatile
 12547                           
 12548                           ;Test.c: 407: break;
 12549  003BBA  D023               	goto	l1164
 12550  003BBC                     l1160:
 12551                           
 12552                           ; BSR set to: 0
 12553                           ;Test.c: 409: LATAbits.LATA3 = 1;
 12554  003BBC  8689               	bsf	3977,3,c	;volatile
 12555                           
 12556                           ;Test.c: 410: break;
 12557  003BBE  D021               	goto	l1164
 12558  003BC0                     l1161:
 12559                           
 12560                           ; BSR set to: 0
 12561                           ;Test.c: 412: LATAbits.LATA4 = 1;
 12562  003BC0  8889               	bsf	3977,4,c	;volatile
 12563                           
 12564                           ;Test.c: 413: break;
 12565  003BC2  D01F               	goto	l1164
 12566  003BC4                     l1162:
 12567                           
 12568                           ; BSR set to: 0
 12569                           ;Test.c: 415: LATAbits.LATA5 = 1;
 12570  003BC4  8A89               	bsf	3977,5,c	;volatile
 12571                           
 12572                           ; BSR set to: 0
 12573                           ;Test.c: 419: }
 12574                           
 12575                           ; BSR set to: 0
 12576                           ;Test.c: 418: break;
 12577                           
 12578                           ;Test.c: 417: default:
 12579                           
 12580                           ;Test.c: 416: break;
 12581  003BC6  D01D               	goto	l1164
 12582  003BC8                     l7183:
 12583                           
 12584                           ; BSR set to: 0
 12585  003BC8  C0FA  F080         	movff	_var,??_PortTests
 12586  003BCC  C0FB  F081         	movff	_var+1,??_PortTests+1
 12587                           
 12588                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12589                           ; Switch size 1, requested type "space"
 12590                           ; Number of cases is 1, Range of values is 0 to 0
 12591                           ; switch strategies available:
 12592                           ; Name         Instructions Cycles
 12593                           ; simple_byte            4     3 (average)
 12594                           ;	Chosen strategy is simple_byte
 12595  003BD0  0100               	movlb	0	; () banked
 12596  003BD2  5181               	movf	(??_PortTests+1)& (0+255),w,b
 12597  003BD4  0A00               	xorlw	0	; case 0
 12598  003BD6  A4D8               	btfss	status,2,c
 12599  003BD8  D014               	goto	l1164
 12600                           
 12601                           ; BSR set to: 0
 12602                           ; Switch size 1, requested type "space"
 12603                           ; Number of cases is 6, Range of values is 0 to 5
 12604                           ; switch strategies available:
 12605                           ; Name         Instructions Cycles
 12606                           ; simple_byte           19    10 (average)
 12607                           ;	Chosen strategy is simple_byte
 12608  003BDA  0100               	movlb	0	; () banked
 12609  003BDC  5180               	movf	??_PortTests& (0+255),w,b
 12610  003BDE  0A00               	xorlw	0	; case 0
 12611  003BE0  B4D8               	btfsc	status,2,c
 12612  003BE2  D7E6               	goto	l1156
 12613  003BE4  0A01               	xorlw	1	; case 1
 12614  003BE6  B4D8               	btfsc	status,2,c
 12615  003BE8  D7E5               	goto	l1158
 12616  003BEA  0A03               	xorlw	3	; case 2
 12617  003BEC  B4D8               	btfsc	status,2,c
 12618  003BEE  D7E4               	goto	l1159
 12619  003BF0  0A01               	xorlw	1	; case 3
 12620  003BF2  B4D8               	btfsc	status,2,c
 12621  003BF4  D7E3               	goto	l1160
 12622  003BF6  0A07               	xorlw	7	; case 4
 12623  003BF8  B4D8               	btfsc	status,2,c
 12624  003BFA  D7E2               	goto	l1161
 12625  003BFC  0A01               	xorlw	1	; case 5
 12626  003BFE  B4D8               	btfsc	status,2,c
 12627  003C00  D7E1               	goto	l1162
 12628  003C02                     l1164:
 12629  003C02  B281               	btfsc	3969,1,c	;volatile
 12630  003C04  D7FE               	goto	l1164
 12631                           
 12632                           ;Test.c: 421: __nop();
 12633  003C06  F000               	nop	
 12634                           
 12635                           ;Test.c: 422: __nop();
 12636  003C08  F000               	nop	
 12637                           
 12638                           ;Test.c: 423: LATA = 0x00;
 12639  003C0A  0E00               	movlw	0
 12640  003C0C  6E89               	movwf	3977,c	;volatile
 12641                           
 12642                           ;Test.c: 424: LATE = 0x00;
 12643  003C0E  0E00               	movlw	0
 12644  003C10  6E8D               	movwf	3981,c	;volatile
 12645                           
 12646                           ;Test.c: 425: LATD = 0x00; }
 12647  003C12  0E00               	movlw	0
 12648  003C14  6E8C               	movwf	3980,c	;volatile
 12649  003C16  D7BE               	goto	l1152
 12650  003C18                     __end_of_PortTests:
 12651                           	opt stack 0
 12652                           tblptru	equ	0xFF8
 12653                           tblptrh	equ	0xFF7
 12654                           tblptrl	equ	0xFF6
 12655                           tablat	equ	0xFF5
 12656                           prodh	equ	0xFF4
 12657                           prodl	equ	0xFF3
 12658                           intcon	equ	0xFF2
 12659                           intcon2	equ	0xFF1
 12660                           intcon3	equ	0xFF0
 12661                           postinc0	equ	0xFEE
 12662                           wreg	equ	0xFE8
 12663                           postdec1	equ	0xFE5
 12664                           fsr1l	equ	0xFE1
 12665                           indf2	equ	0xFDF
 12666                           postinc2	equ	0xFDE
 12667                           postdec2	equ	0xFDD
 12668                           fsr2h	equ	0xFDA
 12669                           fsr2l	equ	0xFD9
 12670                           status	equ	0xFD8
 12671                           
 12672 ;; *************** function _PortTestA5 *****************
 12673 ;; Defined at:
 12674 ;;		line 428 in file "Test.c"
 12675 ;; Parameters:    Size  Location     Type
 12676 ;;		None
 12677 ;; Auto vars:     Size  Location     Type
 12678 ;;		None
 12679 ;; Return value:  Size  Location     Type
 12680 ;;                  1    wreg      void 
 12681 ;; Registers used:
 12682 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12683 ;; Tracked objects:
 12684 ;;		On entry : 0/0
 12685 ;;		On exit  : 0/0
 12686 ;;		Unchanged: 0/0
 12687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12688 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12689 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12690 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12691 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12692 ;;Total ram usage:        1 bytes
 12693 ;; Hardware stack levels used:    1
 12694 ;; Hardware stack levels required when called:   10
 12695 ;; This function calls:
 12696 ;;		_lcdInst
 12697 ;;		_printf
 12698 ;; This function is called by:
 12699 ;;		_Test
 12700 ;; This function uses a non-reentrant model
 12701 ;;
 12702                           
 12703                           	psect	text44
 12704  003964                     __ptext44:
 12705                           	opt stack 0
 12706  003964                     _PortTestA5:
 12707                           	opt stack 19
 12708                           
 12709                           ;Test.c: 429: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12710                           
 12711                           ;incstack = 0
 12712  003964  0E01               	movlw	1
 12713  003966  ECC1  F023         	call	_lcdInst
 12714  00396A  0E68               	movlw	104
 12715  00396C  0100               	movlb	0	; () banked
 12716  00396E  6FAB               	movwf	??_PortTestA5& (0+255),b
 12717  003970  0EE4               	movlw	228
 12718  003972                     u8057:
 12719  003972  2EE8               	decfsz	wreg,f,c
 12720  003974  D7FE               	bra	u8057
 12721  003976  2FAB               	decfsz	??_PortTestA5& (0+255),f,b
 12722  003978  D7FC               	bra	u8057
 12723  00397A  F000               	nop	
 12724  00397C  0E80               	movlw	128
 12725  00397E  ECC1  F023         	call	_lcdInst
 12726                           
 12727                           ;Test.c: 430: printf("D WILL RETURN    ");
 12728  003982  0E83               	movlw	low STR_111
 12729  003984  0100               	movlb	0	; () banked
 12730  003986  6F8E               	movwf	printf@f& (0+255),b
 12731  003988  0EFB               	movlw	high STR_111
 12732  00398A  0100               	movlb	0	; () banked
 12733  00398C  6F8F               	movwf	(printf@f+1)& (0+255),b
 12734  00398E  ECB8  F008         	call	_printf	;wreg free
 12735                           
 12736                           ;Test.c: 431: lcdInst(0b11000000);;
 12737  003992  0EC0               	movlw	192
 12738  003994  ECC1  F023         	call	_lcdInst
 12739                           
 12740                           ;Test.c: 432: printf("OTHER SETS RA5   ");
 12741  003998  0E95               	movlw	low STR_112
 12742  00399A  0100               	movlb	0	; () banked
 12743  00399C  6F8E               	movwf	printf@f& (0+255),b
 12744  00399E  0EFB               	movlw	high STR_112
 12745  0039A0  0100               	movlb	0	; () banked
 12746  0039A2  6F8F               	movwf	(printf@f+1)& (0+255),b
 12747  0039A4  ECB8  F008         	call	_printf	;wreg free
 12748  0039A8                     l1173:
 12749  0039A8  A281               	btfss	3969,1,c	;volatile
 12750  0039AA  D7FE               	goto	l1173
 12751                           
 12752                           ;Test.c: 437: }
 12753                           ;Test.c: 438: if(PORTB >> 4 == 0b1111){
 12754  0039AC  3881               	swapf	3969,w,c	;volatile
 12755  0039AE  0B0F               	andlw	15
 12756  0039B0  0A0F               	xorlw	15
 12757  0039B2  B4D8               	btfsc	status,2,c
 12758  0039B4  0012               	return	
 12759                           
 12760                           ;Test.c: 441: else{
 12761                           ;Test.c: 442: LATAbits.LATA5 = 1;
 12762                           
 12763                           ;Test.c: 440: }
 12764                           
 12765                           ;Test.c: 439: break;
 12766  0039B6  8A89               	bsf	3977,5,c	;volatile
 12767  0039B8                     l1179:
 12768  0039B8  B281               	btfsc	3969,1,c	;volatile
 12769  0039BA  D7FE               	goto	l1179
 12770                           
 12771                           ;Test.c: 445: }
 12772                           ;Test.c: 448: for(i=0;i<10000;i++)
 12773  0039BC  0E00               	movlw	0
 12774  0039BE  0100               	movlb	0	; () banked
 12775  0039C0  6FE5               	movwf	(_i+1)& (0+255),b
 12776  0039C2  0E00               	movlw	0
 12777  0039C4  6FE4               	movwf	_i& (0+255),b
 12778  0039C6                     l7089:
 12779                           
 12780                           ; BSR set to: 0
 12781  0039C6  0100               	movlb	0	; () banked
 12782  0039C8  BFE5               	btfsc	(_i+1)& (0+255),7,b
 12783  0039CA  D008               	goto	l1182
 12784  0039CC  0E10               	movlw	16
 12785  0039CE  0100               	movlb	0	; () banked
 12786  0039D0  5DE4               	subwf	_i& (0+255),w,b
 12787  0039D2  0E27               	movlw	39
 12788  0039D4  0100               	movlb	0	; () banked
 12789  0039D6  59E5               	subwfb	(_i+1)& (0+255),w,b
 12790  0039D8  B0D8               	btfsc	status,0,c
 12791  0039DA  D00D               	goto	l1183
 12792  0039DC                     l1182:
 12793                           
 12794                           ; BSR set to: 0
 12795                           ;Test.c: 449: {
 12796                           ;Test.c: 450: LATAbits.LATA5 = 1;
 12797  0039DC  8A89               	bsf	3977,5,c	;volatile
 12798                           
 12799                           ; BSR set to: 0
 12800                           ;Test.c: 451: _delay((unsigned long)((10)*(32000000/4000000.0)));
 12801  0039DE  0E1A               	movlw	26
 12802  0039E0                     u8067:
 12803  0039E0  2EE8               	decfsz	wreg,f,c
 12804  0039E2  D7FE               	bra	u8067
 12805  0039E4  D000               	nop2	
 12806                           
 12807                           ;Test.c: 452: LATAbits.LATA5 = 0;
 12808  0039E6  9A89               	bcf	3977,5,c	;volatile
 12809                           
 12810                           ;Test.c: 453: _delay((unsigned long)((90)*(32000000/4000000.0)));
 12811  0039E8  0EF0               	movlw	240
 12812  0039EA                     u8077:
 12813  0039EA  2EE8               	decfsz	wreg,f,c
 12814  0039EC  D7FE               	bra	u8077
 12815  0039EE  0100               	movlb	0	; () banked
 12816  0039F0  4BE4               	infsnz	_i& (0+255),f,b
 12817  0039F2  2BE5               	incf	(_i+1)& (0+255),f,b
 12818  0039F4  D7E8               	goto	l7089
 12819  0039F6                     l1183:
 12820                           
 12821                           ; BSR set to: 0
 12822                           ;Test.c: 454: }
 12823                           ;Test.c: 456: LATAbits.LATA5 = 0;
 12824  0039F6  9A89               	bcf	3977,5,c	;volatile
 12825                           
 12826                           ; BSR set to: 0
 12827                           
 12828                           ; BSR set to: 0
 12829  0039F8  D7D7               	goto	l1173
 12830  0039FA                     __end_of_PortTestA5:
 12831                           	opt stack 0
 12832                           tblptru	equ	0xFF8
 12833                           tblptrh	equ	0xFF7
 12834                           tblptrl	equ	0xFF6
 12835                           tablat	equ	0xFF5
 12836                           prodh	equ	0xFF4
 12837                           prodl	equ	0xFF3
 12838                           intcon	equ	0xFF2
 12839                           intcon2	equ	0xFF1
 12840                           intcon3	equ	0xFF0
 12841                           postinc0	equ	0xFEE
 12842                           wreg	equ	0xFE8
 12843                           postdec1	equ	0xFE5
 12844                           fsr1l	equ	0xFE1
 12845                           indf2	equ	0xFDF
 12846                           postinc2	equ	0xFDE
 12847                           postdec2	equ	0xFDD
 12848                           fsr2h	equ	0xFDA
 12849                           fsr2l	equ	0xFD9
 12850                           status	equ	0xFD8
 12851                           
 12852 ;; *************** function _EEPROMTest *****************
 12853 ;; Defined at:
 12854 ;;		line 513 in file "Test.c"
 12855 ;; Parameters:    Size  Location     Type
 12856 ;;		None
 12857 ;; Auto vars:     Size  Location     Type
 12858 ;;		None
 12859 ;; Return value:  Size  Location     Type
 12860 ;;                  1    wreg      void 
 12861 ;; Registers used:
 12862 ;;		None
 12863 ;; Tracked objects:
 12864 ;;		On entry : 0/0
 12865 ;;		On exit  : 0/0
 12866 ;;		Unchanged: 0/0
 12867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12868 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12869 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12870 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12871 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12872 ;;Total ram usage:        0 bytes
 12873 ;; Hardware stack levels used:    1
 12874 ;; Hardware stack levels required when called:    7
 12875 ;; This function calls:
 12876 ;;		Nothing
 12877 ;; This function is called by:
 12878 ;;		_Test
 12879 ;; This function uses a non-reentrant model
 12880 ;;
 12881                           
 12882                           	psect	text45
 12883  0047E6                     __ptext45:
 12884                           	opt stack 0
 12885  0047E6                     _EEPROMTest:
 12886                           	opt stack 22
 12887                           
 12888                           ;incstack = 0
 12889  0047E6  0012               	return		;funcret
 12890  0047E8                     __end_of_EEPROMTest:
 12891                           	opt stack 0
 12892                           tblptru	equ	0xFF8
 12893                           tblptrh	equ	0xFF7
 12894                           tblptrl	equ	0xFF6
 12895                           tablat	equ	0xFF5
 12896                           prodh	equ	0xFF4
 12897                           prodl	equ	0xFF3
 12898                           intcon	equ	0xFF2
 12899                           intcon2	equ	0xFF1
 12900                           intcon3	equ	0xFF0
 12901                           postinc0	equ	0xFEE
 12902                           wreg	equ	0xFE8
 12903                           postdec1	equ	0xFE5
 12904                           fsr1l	equ	0xFE1
 12905                           indf2	equ	0xFDF
 12906                           postinc2	equ	0xFDE
 12907                           postdec2	equ	0xFDD
 12908                           fsr2h	equ	0xFDA
 12909                           fsr2l	equ	0xFD9
 12910                           status	equ	0xFD8
 12911                           
 12912 ;; *************** function _BothServos *****************
 12913 ;; Defined at:
 12914 ;;		line 344 in file "Test.c"
 12915 ;; Parameters:    Size  Location     Type
 12916 ;;		None
 12917 ;; Auto vars:     Size  Location     Type
 12918 ;;		None
 12919 ;; Return value:  Size  Location     Type
 12920 ;;                  1    wreg      void 
 12921 ;; Registers used:
 12922 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12923 ;; Tracked objects:
 12924 ;;		On entry : 0/0
 12925 ;;		On exit  : 0/0
 12926 ;;		Unchanged: 0/0
 12927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12928 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12929 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12930 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12931 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12932 ;;Total ram usage:        2 bytes
 12933 ;; Hardware stack levels used:    1
 12934 ;; Hardware stack levels required when called:   10
 12935 ;; This function calls:
 12936 ;;		_initServos
 12937 ;;		_lcdInst
 12938 ;;		_printf
 12939 ;;		_updateServoPosition
 12940 ;; This function is called by:
 12941 ;;		_Test
 12942 ;; This function uses a non-reentrant model
 12943 ;;
 12944                           
 12945                           	psect	text46
 12946  001C14                     __ptext46:
 12947                           	opt stack 0
 12948  001C14                     _BothServos:
 12949                           	opt stack 19
 12950                           
 12951                           ;Test.c: 345: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12952                           
 12953                           ;incstack = 0
 12954  001C14  0E01               	movlw	1
 12955  001C16  ECC1  F023         	call	_lcdInst
 12956  001C1A  0E68               	movlw	104
 12957  001C1C  0100               	movlb	0	; () banked
 12958  001C1E  6FAB               	movwf	??_BothServos& (0+255),b
 12959  001C20  0EE4               	movlw	228
 12960  001C22                     u8087:
 12961  001C22  2EE8               	decfsz	wreg,f,c
 12962  001C24  D7FE               	bra	u8087
 12963  001C26  2FAB               	decfsz	??_BothServos& (0+255),f,b
 12964  001C28  D7FC               	bra	u8087
 12965  001C2A  F000               	nop	
 12966  001C2C  0E80               	movlw	128
 12967  001C2E  ECC1  F023         	call	_lcdInst
 12968                           
 12969                           ;Test.c: 346: printf("TST: BOTH SERVOS");
 12970  001C32  0ECA               	movlw	low STR_110
 12971  001C34  0100               	movlb	0	; () banked
 12972  001C36  6F8E               	movwf	printf@f& (0+255),b
 12973  001C38  0EFC               	movlw	high STR_110
 12974  001C3A  0100               	movlb	0	; () banked
 12975  001C3C  6F8F               	movwf	(printf@f+1)& (0+255),b
 12976  001C3E  ECB8  F008         	call	_printf	;wreg free
 12977                           
 12978                           ;Test.c: 347: TMR1ON = 1;
 12979  001C42  80CD               	bsf	4045,0,c	;volatile
 12980                           
 12981                           ;Test.c: 348: TMR3ON = 1;
 12982  001C44  80B1               	bsf	4017,0,c	;volatile
 12983                           
 12984                           ;Test.c: 349: machine_state = Sorting_state;
 12985  001C46  0E01               	movlw	1
 12986  001C48  0100               	movlb	0	; () banked
 12987  001C4A  6FFC               	movwf	_machine_state& (0+255),b
 12988                           
 12989                           ; BSR set to: 0
 12990                           ;Test.c: 350: was_low_1 = 0;
 12991  001C4C  0E00               	movlw	0
 12992  001C4E  6E7A               	movwf	_was_low_1+1,c	;volatile
 12993  001C50  0E00               	movlw	0
 12994  001C52  6E79               	movwf	_was_low_1,c	;volatile
 12995                           
 12996                           ; BSR set to: 0
 12997                           ;Test.c: 351: was_low_1 = 0;
 12998  001C54  0E00               	movlw	0
 12999  001C56  6E7A               	movwf	_was_low_1+1,c	;volatile
 13000  001C58  0E00               	movlw	0
 13001  001C5A  6E79               	movwf	_was_low_1,c	;volatile
 13002                           
 13003                           ; BSR set to: 0
 13004                           ;Test.c: 357: initServos();
 13005  001C5C  ECB4  F01F         	call	_initServos	;wreg free
 13006                           
 13007                           ;Test.c: 358: _delay((unsigned long)((1500)*(32000000/4000.0)));
 13008  001C60  0E3D               	movlw	61
 13009  001C62  0100               	movlb	0	; () banked
 13010  001C64  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13011  001C66  0EE1               	movlw	225
 13012  001C68  0100               	movlb	0	; () banked
 13013  001C6A  6FAB               	movwf	??_BothServos& (0+255),b
 13014  001C6C  0E3F               	movlw	63
 13015  001C6E                     u8097:
 13016  001C6E  2EE8               	decfsz	wreg,f,c
 13017  001C70  D7FE               	bra	u8097
 13018  001C72  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13019  001C74  D7FC               	bra	u8097
 13020  001C76  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13021  001C78  D7FA               	bra	u8097
 13022  001C7A  D000               	nop2	
 13023                           
 13024                           ;Test.c: 359: updateServoPosition(500, 1);
 13025  001C7C  0E01               	movlw	1
 13026  001C7E  0100               	movlb	0	; () banked
 13027  001C80  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13028  001C82  0EF4               	movlw	244
 13029  001C84  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13030  001C86  0E00               	movlw	0
 13031  001C88  0100               	movlb	0	; () banked
 13032  001C8A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13033  001C8C  0E01               	movlw	1
 13034  001C8E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13035  001C90  EC48  F01E         	call	_updateServoPosition	;wreg free
 13036                           
 13037                           ;Test.c: 360: updateServoPosition(1350, 3);
 13038  001C94  0E05               	movlw	5
 13039  001C96  0100               	movlb	0	; () banked
 13040  001C98  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13041  001C9A  0E46               	movlw	70
 13042  001C9C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13043  001C9E  0E00               	movlw	0
 13044  001CA0  0100               	movlb	0	; () banked
 13045  001CA2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13046  001CA4  0E03               	movlw	3
 13047  001CA6  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13048  001CA8  EC48  F01E         	call	_updateServoPosition	;wreg free
 13049                           
 13050                           ;Test.c: 361: _delay((unsigned long)((1500)*(32000000/4000.0)));
 13051  001CAC  0E3D               	movlw	61
 13052  001CAE  0100               	movlb	0	; () banked
 13053  001CB0  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13054  001CB2  0EE1               	movlw	225
 13055  001CB4  0100               	movlb	0	; () banked
 13056  001CB6  6FAB               	movwf	??_BothServos& (0+255),b
 13057  001CB8  0E3F               	movlw	63
 13058  001CBA                     u8107:
 13059  001CBA  2EE8               	decfsz	wreg,f,c
 13060  001CBC  D7FE               	bra	u8107
 13061  001CBE  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13062  001CC0  D7FC               	bra	u8107
 13063  001CC2  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13064  001CC4  D7FA               	bra	u8107
 13065  001CC6  D000               	nop2	
 13066                           
 13067                           ;Test.c: 362: updateServoPosition(1190, 3);
 13068  001CC8  0E04               	movlw	4
 13069  001CCA  0100               	movlb	0	; () banked
 13070  001CCC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13071  001CCE  0EA6               	movlw	166
 13072  001CD0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13073  001CD2  0E00               	movlw	0
 13074  001CD4  0100               	movlb	0	; () banked
 13075  001CD6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13076  001CD8  0E03               	movlw	3
 13077  001CDA  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13078  001CDC  EC48  F01E         	call	_updateServoPosition	;wreg free
 13079                           
 13080                           ;Test.c: 363: _delay((unsigned long)((750)*(32000000/4000.0)));
 13081  001CE0  0E1F               	movlw	31
 13082  001CE2  0100               	movlb	0	; () banked
 13083  001CE4  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13084  001CE6  0E71               	movlw	113
 13085  001CE8  0100               	movlb	0	; () banked
 13086  001CEA  6FAB               	movwf	??_BothServos& (0+255),b
 13087  001CEC  0E1E               	movlw	30
 13088  001CEE                     u8117:
 13089  001CEE  2EE8               	decfsz	wreg,f,c
 13090  001CF0  D7FE               	bra	u8117
 13091  001CF2  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13092  001CF4  D7FC               	bra	u8117
 13093  001CF6  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13094  001CF8  D7FA               	bra	u8117
 13095  001CFA  F000               	nop	
 13096                           
 13097                           ;Test.c: 365: updateServoPosition(750, 1);
 13098  001CFC  0E02               	movlw	2
 13099  001CFE  0100               	movlb	0	; () banked
 13100  001D00  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13101  001D02  0EEE               	movlw	238
 13102  001D04  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13103  001D06  0E00               	movlw	0
 13104  001D08  0100               	movlb	0	; () banked
 13105  001D0A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13106  001D0C  0E01               	movlw	1
 13107  001D0E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13108  001D10  EC48  F01E         	call	_updateServoPosition	;wreg free
 13109                           
 13110                           ;Test.c: 366: updateServoPosition(1350, 3);
 13111  001D14  0E05               	movlw	5
 13112  001D16  0100               	movlb	0	; () banked
 13113  001D18  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13114  001D1A  0E46               	movlw	70
 13115  001D1C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13116  001D1E  0E00               	movlw	0
 13117  001D20  0100               	movlb	0	; () banked
 13118  001D22  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13119  001D24  0E03               	movlw	3
 13120  001D26  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13121  001D28  EC48  F01E         	call	_updateServoPosition	;wreg free
 13122                           
 13123                           ;Test.c: 367: _delay((unsigned long)((1500)*(32000000/4000.0)));
 13124  001D2C  0E3D               	movlw	61
 13125  001D2E  0100               	movlb	0	; () banked
 13126  001D30  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13127  001D32  0EE1               	movlw	225
 13128  001D34  0100               	movlb	0	; () banked
 13129  001D36  6FAB               	movwf	??_BothServos& (0+255),b
 13130  001D38  0E3F               	movlw	63
 13131  001D3A                     u8127:
 13132  001D3A  2EE8               	decfsz	wreg,f,c
 13133  001D3C  D7FE               	bra	u8127
 13134  001D3E  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13135  001D40  D7FC               	bra	u8127
 13136  001D42  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13137  001D44  D7FA               	bra	u8127
 13138  001D46  D000               	nop2	
 13139                           
 13140                           ;Test.c: 368: updateServoPosition(1190, 3);
 13141  001D48  0E04               	movlw	4
 13142  001D4A  0100               	movlb	0	; () banked
 13143  001D4C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13144  001D4E  0EA6               	movlw	166
 13145  001D50  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13146  001D52  0E00               	movlw	0
 13147  001D54  0100               	movlb	0	; () banked
 13148  001D56  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13149  001D58  0E03               	movlw	3
 13150  001D5A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13151  001D5C  EC48  F01E         	call	_updateServoPosition	;wreg free
 13152                           
 13153                           ;Test.c: 369: _delay((unsigned long)((750)*(32000000/4000.0)));
 13154  001D60  0E1F               	movlw	31
 13155  001D62  0100               	movlb	0	; () banked
 13156  001D64  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13157  001D66  0E71               	movlw	113
 13158  001D68  0100               	movlb	0	; () banked
 13159  001D6A  6FAB               	movwf	??_BothServos& (0+255),b
 13160  001D6C  0E1E               	movlw	30
 13161  001D6E                     u8137:
 13162  001D6E  2EE8               	decfsz	wreg,f,c
 13163  001D70  D7FE               	bra	u8137
 13164  001D72  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13165  001D74  D7FC               	bra	u8137
 13166  001D76  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13167  001D78  D7FA               	bra	u8137
 13168  001D7A  F000               	nop	
 13169                           
 13170                           ;Test.c: 371: updateServoPosition(1200, 1);
 13171  001D7C  0E04               	movlw	4
 13172  001D7E  0100               	movlb	0	; () banked
 13173  001D80  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13174  001D82  0EB0               	movlw	176
 13175  001D84  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13176  001D86  0E00               	movlw	0
 13177  001D88  0100               	movlb	0	; () banked
 13178  001D8A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13179  001D8C  0E01               	movlw	1
 13180  001D8E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13181  001D90  EC48  F01E         	call	_updateServoPosition	;wreg free
 13182                           
 13183                           ;Test.c: 372: updateServoPosition(1350, 3);
 13184  001D94  0E05               	movlw	5
 13185  001D96  0100               	movlb	0	; () banked
 13186  001D98  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13187  001D9A  0E46               	movlw	70
 13188  001D9C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13189  001D9E  0E00               	movlw	0
 13190  001DA0  0100               	movlb	0	; () banked
 13191  001DA2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13192  001DA4  0E03               	movlw	3
 13193  001DA6  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13194  001DA8  EC48  F01E         	call	_updateServoPosition	;wreg free
 13195                           
 13196                           ;Test.c: 373: _delay((unsigned long)((1500)*(32000000/4000.0)));
 13197  001DAC  0E3D               	movlw	61
 13198  001DAE  0100               	movlb	0	; () banked
 13199  001DB0  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13200  001DB2  0EE1               	movlw	225
 13201  001DB4  0100               	movlb	0	; () banked
 13202  001DB6  6FAB               	movwf	??_BothServos& (0+255),b
 13203  001DB8  0E3F               	movlw	63
 13204  001DBA                     u8147:
 13205  001DBA  2EE8               	decfsz	wreg,f,c
 13206  001DBC  D7FE               	bra	u8147
 13207  001DBE  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13208  001DC0  D7FC               	bra	u8147
 13209  001DC2  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13210  001DC4  D7FA               	bra	u8147
 13211  001DC6  D000               	nop2	
 13212                           
 13213                           ;Test.c: 374: updateServoPosition(1190, 3);
 13214  001DC8  0E04               	movlw	4
 13215  001DCA  0100               	movlb	0	; () banked
 13216  001DCC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13217  001DCE  0EA6               	movlw	166
 13218  001DD0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13219  001DD2  0E00               	movlw	0
 13220  001DD4  0100               	movlb	0	; () banked
 13221  001DD6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13222  001DD8  0E03               	movlw	3
 13223  001DDA  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13224  001DDC  EC48  F01E         	call	_updateServoPosition	;wreg free
 13225                           
 13226                           ;Test.c: 375: _delay((unsigned long)((750)*(32000000/4000.0)));
 13227  001DE0  0E1F               	movlw	31
 13228  001DE2  0100               	movlb	0	; () banked
 13229  001DE4  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13230  001DE6  0E71               	movlw	113
 13231  001DE8  0100               	movlb	0	; () banked
 13232  001DEA  6FAB               	movwf	??_BothServos& (0+255),b
 13233  001DEC  0E1E               	movlw	30
 13234  001DEE                     u8157:
 13235  001DEE  2EE8               	decfsz	wreg,f,c
 13236  001DF0  D7FE               	bra	u8157
 13237  001DF2  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13238  001DF4  D7FC               	bra	u8157
 13239  001DF6  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13240  001DF8  D7FA               	bra	u8157
 13241  001DFA  F000               	nop	
 13242                           
 13243                           ;Test.c: 377: updateServoPosition(1700, 1);
 13244  001DFC  0E06               	movlw	6
 13245  001DFE  0100               	movlb	0	; () banked
 13246  001E00  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13247  001E02  0EA4               	movlw	164
 13248  001E04  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13249  001E06  0E00               	movlw	0
 13250  001E08  0100               	movlb	0	; () banked
 13251  001E0A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13252  001E0C  0E01               	movlw	1
 13253  001E0E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13254  001E10  EC48  F01E         	call	_updateServoPosition	;wreg free
 13255                           
 13256                           ;Test.c: 378: updateServoPosition(1350, 3);
 13257  001E14  0E05               	movlw	5
 13258  001E16  0100               	movlb	0	; () banked
 13259  001E18  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13260  001E1A  0E46               	movlw	70
 13261  001E1C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13262  001E1E  0E00               	movlw	0
 13263  001E20  0100               	movlb	0	; () banked
 13264  001E22  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13265  001E24  0E03               	movlw	3
 13266  001E26  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13267  001E28  EC48  F01E         	call	_updateServoPosition	;wreg free
 13268                           
 13269                           ;Test.c: 379: _delay((unsigned long)((1500)*(32000000/4000.0)));
 13270  001E2C  0E3D               	movlw	61
 13271  001E2E  0100               	movlb	0	; () banked
 13272  001E30  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13273  001E32  0EE1               	movlw	225
 13274  001E34  0100               	movlb	0	; () banked
 13275  001E36  6FAB               	movwf	??_BothServos& (0+255),b
 13276  001E38  0E3F               	movlw	63
 13277  001E3A                     u8167:
 13278  001E3A  2EE8               	decfsz	wreg,f,c
 13279  001E3C  D7FE               	bra	u8167
 13280  001E3E  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13281  001E40  D7FC               	bra	u8167
 13282  001E42  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13283  001E44  D7FA               	bra	u8167
 13284  001E46  D000               	nop2	
 13285                           
 13286                           ;Test.c: 380: updateServoPosition(1190, 3);
 13287  001E48  0E04               	movlw	4
 13288  001E4A  0100               	movlb	0	; () banked
 13289  001E4C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13290  001E4E  0EA6               	movlw	166
 13291  001E50  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13292  001E52  0E00               	movlw	0
 13293  001E54  0100               	movlb	0	; () banked
 13294  001E56  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13295  001E58  0E03               	movlw	3
 13296  001E5A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13297  001E5C  EC48  F01E         	call	_updateServoPosition	;wreg free
 13298                           
 13299                           ;Test.c: 381: _delay((unsigned long)((750)*(32000000/4000.0)));
 13300  001E60  0E1F               	movlw	31
 13301  001E62  0100               	movlb	0	; () banked
 13302  001E64  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13303  001E66  0E71               	movlw	113
 13304  001E68  0100               	movlb	0	; () banked
 13305  001E6A  6FAB               	movwf	??_BothServos& (0+255),b
 13306  001E6C  0E1E               	movlw	30
 13307  001E6E                     u8177:
 13308  001E6E  2EE8               	decfsz	wreg,f,c
 13309  001E70  D7FE               	bra	u8177
 13310  001E72  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13311  001E74  D7FC               	bra	u8177
 13312  001E76  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13313  001E78  D7FA               	bra	u8177
 13314  001E7A  F000               	nop	
 13315                           
 13316                           ;Test.c: 383: updateServoPosition(2000, 1);
 13317  001E7C  0E07               	movlw	7
 13318  001E7E  0100               	movlb	0	; () banked
 13319  001E80  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13320  001E82  0ED0               	movlw	208
 13321  001E84  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13322  001E86  0E00               	movlw	0
 13323  001E88  0100               	movlb	0	; () banked
 13324  001E8A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13325  001E8C  0E01               	movlw	1
 13326  001E8E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13327  001E90  EC48  F01E         	call	_updateServoPosition	;wreg free
 13328                           
 13329                           ;Test.c: 384: updateServoPosition(1350, 3);
 13330  001E94  0E05               	movlw	5
 13331  001E96  0100               	movlb	0	; () banked
 13332  001E98  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13333  001E9A  0E46               	movlw	70
 13334  001E9C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13335  001E9E  0E00               	movlw	0
 13336  001EA0  0100               	movlb	0	; () banked
 13337  001EA2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13338  001EA4  0E03               	movlw	3
 13339  001EA6  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13340  001EA8  EC48  F01E         	call	_updateServoPosition	;wreg free
 13341                           
 13342                           ;Test.c: 385: _delay((unsigned long)((1500)*(32000000/4000.0)));
 13343  001EAC  0E3D               	movlw	61
 13344  001EAE  0100               	movlb	0	; () banked
 13345  001EB0  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13346  001EB2  0EE1               	movlw	225
 13347  001EB4  0100               	movlb	0	; () banked
 13348  001EB6  6FAB               	movwf	??_BothServos& (0+255),b
 13349  001EB8  0E3F               	movlw	63
 13350  001EBA                     u8187:
 13351  001EBA  2EE8               	decfsz	wreg,f,c
 13352  001EBC  D7FE               	bra	u8187
 13353  001EBE  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13354  001EC0  D7FC               	bra	u8187
 13355  001EC2  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13356  001EC4  D7FA               	bra	u8187
 13357  001EC6  D000               	nop2	
 13358                           
 13359                           ;Test.c: 386: updateServoPosition(1190, 3);
 13360  001EC8  0E04               	movlw	4
 13361  001ECA  0100               	movlb	0	; () banked
 13362  001ECC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13363  001ECE  0EA6               	movlw	166
 13364  001ED0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13365  001ED2  0E00               	movlw	0
 13366  001ED4  0100               	movlb	0	; () banked
 13367  001ED6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13368  001ED8  0E03               	movlw	3
 13369  001EDA  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13370  001EDC  EC48  F01E         	call	_updateServoPosition	;wreg free
 13371                           
 13372                           ;Test.c: 387: _delay((unsigned long)((750)*(32000000/4000.0)));
 13373  001EE0  0E1F               	movlw	31
 13374  001EE2  0100               	movlb	0	; () banked
 13375  001EE4  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13376  001EE6  0E71               	movlw	113
 13377  001EE8  0100               	movlb	0	; () banked
 13378  001EEA  6FAB               	movwf	??_BothServos& (0+255),b
 13379  001EEC  0E1E               	movlw	30
 13380  001EEE                     u8197:
 13381  001EEE  2EE8               	decfsz	wreg,f,c
 13382  001EF0  D7FE               	bra	u8197
 13383  001EF2  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13384  001EF4  D7FC               	bra	u8197
 13385  001EF6  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13386  001EF8  D7FA               	bra	u8197
 13387  001EFA  F000               	nop	
 13388                           
 13389                           ;Test.c: 389: TMR1ON = 0;
 13390  001EFC  90CD               	bcf	4045,0,c	;volatile
 13391                           
 13392                           ;Test.c: 390: TMR3ON = 0;
 13393  001EFE  90B1               	bcf	4017,0,c	;volatile
 13394                           
 13395                           ;Test.c: 391: (INTCONbits.GIE = 0);
 13396  001F00  9EF2               	bcf	intcon,7,c	;volatile
 13397  001F02  0012               	return		;funcret
 13398  001F04                     __end_of_BothServos:
 13399                           	opt stack 0
 13400                           tblptru	equ	0xFF8
 13401                           tblptrh	equ	0xFF7
 13402                           tblptrl	equ	0xFF6
 13403                           tablat	equ	0xFF5
 13404                           prodh	equ	0xFF4
 13405                           prodl	equ	0xFF3
 13406                           intcon	equ	0xFF2
 13407                           intcon2	equ	0xFF1
 13408                           intcon3	equ	0xFF0
 13409                           postinc0	equ	0xFEE
 13410                           wreg	equ	0xFE8
 13411                           postdec1	equ	0xFE5
 13412                           fsr1l	equ	0xFE1
 13413                           indf2	equ	0xFDF
 13414                           postinc2	equ	0xFDE
 13415                           postdec2	equ	0xFDD
 13416                           fsr2h	equ	0xFDA
 13417                           fsr2l	equ	0xFD9
 13418                           status	equ	0xFD8
 13419                           
 13420 ;; *************** function _printf *****************
 13421 ;; Defined at:
 13422 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 13423 ;; Parameters:    Size  Location     Type
 13424 ;;  f               2   14[BANK0 ] PTR const unsigned char 
 13425 ;;		 -> STR_116(17), STR_115(17), STR_114(10), STR_113(13), 
 13426 ;;		 -> STR_112(18), STR_111(18), STR_110(17), STR_109(15), 
 13427 ;;		 -> STR_108(15), STR_107(15), STR_106(17), STR_105(17), 
 13428 ;;		 -> STR_104(17), STR_103(16), STR_102(17), STR_101(17), 
 13429 ;;		 -> STR_100(17), STR_99(17), STR_98(17), STR_97(17), 
 13430 ;;		 -> STR_96(15), STR_95(11), STR_94(17), STR_93(11), 
 13431 ;;		 -> STR_92(17), STR_91(14), STR_90(15), STR_89(14), 
 13432 ;;		 -> STR_88(10), STR_87(9), STR_86(9), STR_85(10), 
 13433 ;;		 -> STR_84(10), STR_83(16), STR_82(15), STR_81(3), 
 13434 ;;		 -> STR_80(15), STR_79(13), STR_78(14), STR_77(8), 
 13435 ;;		 -> STR_76(14), STR_75(15), STR_74(12), STR_73(14), 
 13436 ;;		 -> STR_72(17), STR_71(14), STR_70(15), STR_69(17), 
 13437 ;;		 -> STR_68(17), STR_67(7), STR_66(21), STR_65(13), 
 13438 ;;		 -> STR_64(11), STR_63(24), STR_50(17), STR_49(17), 
 13439 ;;		 -> STR_48(17), STR_47(17), STR_46(17), STR_45(17), 
 13440 ;;		 -> STR_44(17), STR_43(17), STR_42(17), STR_41(17), 
 13441 ;;		 -> STR_40(17), STR_39(17), STR_38(17), STR_37(17), 
 13442 ;;		 -> STR_36(17), STR_35(17), STR_34(17), STR_33(17), 
 13443 ;;		 -> STR_32(17), STR_31(17), STR_30(17), STR_29(3), 
 13444 ;;		 -> STR_28(17), STR_27(19), STR_26(17), STR_25(19), 
 13445 ;;		 -> STR_24(17), STR_23(14), STR_22(10), STR_21(24), 
 13446 ;;		 -> STR_7(7), STR_6(17), STR_5(18), STR_4(16), 
 13447 ;;		 -> STR_3(18), STR_2(14), STR_1(18), 
 13448 ;; Auto vars:     Size  Location     Type
 13449 ;;  tmpval          4    0        struct .
 13450 ;;  width           2   41[BANK0 ] int 
 13451 ;;  val             2   37[BANK0 ] unsigned int 
 13452 ;;  len             2   35[BANK0 ] unsigned int 
 13453 ;;  ap              2   33[BANK0 ] PTR void [1]
 13454 ;;		 -> ?i2_printf(2), ?_printf(2), 
 13455 ;;  cp              2   31[BANK0 ] PTR const unsigned char 
 13456 ;;		 -> STR_117(7), count_total(2), printRTC@month(4), UI@month(4), 
 13457 ;;  c               1   40[BANK0 ] char 
 13458 ;;  flag            1   39[BANK0 ] unsigned char 
 13459 ;;  prec            1   30[BANK0 ] char 
 13460 ;; Return value:  Size  Location     Type
 13461 ;;                  2   14[BANK0 ] int 
 13462 ;; Registers used:
 13463 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13464 ;; Tracked objects:
 13465 ;;		On entry : 0/0
 13466 ;;		On exit  : 0/0
 13467 ;;		Unchanged: 0/0
 13468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13469 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13470 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13471 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13472 ;;      Totals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13473 ;;Total ram usage:       29 bytes
 13474 ;; Hardware stack levels used:    1
 13475 ;; Hardware stack levels required when called:    9
 13476 ;; This function calls:
 13477 ;;		___lwdiv
 13478 ;;		___lwmod
 13479 ;;		___wmul
 13480 ;;		_isdigit
 13481 ;;		_putch
 13482 ;; This function is called by:
 13483 ;;		_UI
 13484 ;;		_change_state_to_menu_start
 13485 ;;		_change_state_to_menu_12
 13486 ;;		_change_state_to_menu_22
 13487 ;;		_printRTC
 13488 ;;		_EEPROM_write
 13489 ;;		_Test
 13490 ;;		_algorithmTest
 13491 ;;		_sensorTest
 13492 ;;		_actuatorTest
 13493 ;;		_BothServos
 13494 ;;		_PortTestA5
 13495 ;;		_SolenoidTestA5
 13496 ;;		_ToggleTestA5
 13497 ;; This function uses a non-reentrant model
 13498 ;;
 13499                           
 13500                           	psect	text47
 13501  001170                     __ptext47:
 13502                           	opt stack 0
 13503  001170                     _printf:
 13504                           	opt stack 18
 13505                           
 13506                           ;doprnt.c: 466: va_list ap;
 13507                           ;doprnt.c: 499: signed char c;
 13508                           ;doprnt.c: 501: int width;
 13509                           ;doprnt.c: 506: signed char prec;
 13510                           ;doprnt.c: 508: unsigned char flag;
 13511                           ;doprnt.c: 523: union {
 13512                           ;doprnt.c: 524: unsigned long vd;
 13513                           ;doprnt.c: 525: double integ;
 13514                           ;doprnt.c: 526: } tmpval;
 13515                           ;doprnt.c: 528: unsigned int val;
 13516                           ;doprnt.c: 529: unsigned len;
 13517                           ;doprnt.c: 530: const char * cp;
 13518                           ;doprnt.c: 533: *ap = __va_start();
 13519                           
 13520                           ;incstack = 0
 13521  001170  0E90               	movlw	low (?_printf+2)
 13522  001172  0100               	movlb	0	; () banked
 13523  001174  6FA1               	movwf	printf@ap& (0+255),b
 13524  001176  0E00               	movlw	high (?_printf+2)
 13525  001178  0100               	movlb	0	; () banked
 13526  00117A  6FA2               	movwf	(printf@ap+1)& (0+255),b
 13527                           
 13528                           ;doprnt.c: 536: while(c = *f++) {
 13529  00117C  D205               	goto	l5549
 13530  00117E                     l5419:
 13531                           
 13532                           ; BSR set to: 0
 13533                           ;doprnt.c: 538: if(c != '%')
 13534  00117E  0E25               	movlw	37
 13535  001180  0100               	movlb	0	; () banked
 13536  001182  19A8               	xorwf	printf@c& (0+255),w,b
 13537  001184  B4D8               	btfsc	status,2,c
 13538  001186  D005               	goto	l5423
 13539                           
 13540                           ; BSR set to: 0
 13541                           ;doprnt.c: 540: {
 13542                           ;doprnt.c: 541: (putch(c) );
 13543  001188  0100               	movlb	0	; () banked
 13544  00118A  51A8               	movf	printf@c& (0+255),w,b
 13545  00118C  ECB9  F023         	call	_putch
 13546                           
 13547                           ;doprnt.c: 542: continue;
 13548  001190  D1FB               	goto	l5549
 13549  001192                     l5423:
 13550                           
 13551                           ;doprnt.c: 543: }
 13552                           ;doprnt.c: 546: width = 0;
 13553  001192  0E00               	movlw	0
 13554  001194  0100               	movlb	0	; () banked
 13555  001196  6FAA               	movwf	(printf@width+1)& (0+255),b
 13556  001198  0E00               	movlw	0
 13557  00119A  6FA9               	movwf	printf@width& (0+255),b
 13558                           
 13559                           ;doprnt.c: 548: flag = 0;
 13560  00119C  0E00               	movlw	0
 13561  00119E  0100               	movlb	0	; () banked
 13562  0011A0  6FA7               	movwf	printf@flag& (0+255),b
 13563                           
 13564                           ; BSR set to: 0
 13565                           ;doprnt.c: 551: switch(*f) {
 13566                           
 13567                           ;doprnt.c: 550: for(;;) {
 13568  0011A2  D005               	goto	l5429
 13569  0011A4                     l5425:
 13570                           
 13571                           ;doprnt.c: 580: flag |= 0x04;
 13572  0011A4  0100               	movlb	0	; () banked
 13573  0011A6  85A7               	bsf	printf@flag& (0+255),2,b
 13574                           
 13575                           ;doprnt.c: 581: f++;
 13576  0011A8  0100               	movlb	0	; () banked
 13577  0011AA  4B8E               	infsnz	printf@f& (0+255),f,b
 13578  0011AC  2B8F               	incf	(printf@f+1)& (0+255),f,b
 13579  0011AE                     l5429:
 13580  0011AE  C08E  FFF6         	movff	printf@f,tblptrl
 13581  0011B2  C08F  FFF7         	movff	printf@f+1,tblptrh
 13582  0011B6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13583  0011B6  6AF8               	clrf	tblptru,c
 13584  0011B8                     	endif
 13585  0011B8                     	if	0	;tblptru may be non-zero
 13586  0011B8                     	endif
 13587  0011B8  0008               	tblrd		*
 13588  0011BA  50F5               	movf	tablat,w,c
 13589                           
 13590                           ; Switch size 1, requested type "space"
 13591                           ; Number of cases is 1, Range of values is 48 to 48
 13592                           ; switch strategies available:
 13593                           ; Name         Instructions Cycles
 13594                           ; simple_byte            4     3 (average)
 13595                           ;	Chosen strategy is simple_byte
 13596  0011BC  0A30               	xorlw	48	; case 48
 13597  0011BE  B4D8               	btfsc	status,2,c
 13598  0011C0  D7F1               	goto	l5425
 13599                           
 13600                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 13601                           
 13602                           ;doprnt.c: 586: }
 13603                           
 13604                           ;doprnt.c: 585: break;
 13605  0011C2  C08E  FFF6         	movff	printf@f,tblptrl
 13606  0011C6  C08F  FFF7         	movff	printf@f+1,tblptrh
 13607  0011CA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13608  0011CA  6AF8               	clrf	tblptru,c
 13609  0011CC                     	endif
 13610  0011CC                     	if	0	;tblptru may be non-zero
 13611  0011CC                     	endif
 13612  0011CC  0008               	tblrd		*
 13613  0011CE  50F5               	movf	tablat,w,c
 13614  0011D0  ECCC  F022         	call	_isdigit
 13615  0011D4  A0D8               	btfss	status,0,c
 13616  0011D6  D0D2               	goto	l5477
 13617                           
 13618                           ;doprnt.c: 598: width = 0;
 13619  0011D8  0E00               	movlw	0
 13620  0011DA  0100               	movlb	0	; () banked
 13621  0011DC  6FAA               	movwf	(printf@width+1)& (0+255),b
 13622  0011DE  0E00               	movlw	0
 13623  0011E0  6FA9               	movwf	printf@width& (0+255),b
 13624  0011E2                     l5435:
 13625                           
 13626                           ;doprnt.c: 600: width *= 10;
 13627  0011E2  C0A9  F080         	movff	printf@width,___wmul@multiplier
 13628  0011E6  C0AA  F081         	movff	printf@width+1,___wmul@multiplier+1
 13629  0011EA  0E00               	movlw	0
 13630  0011EC  0100               	movlb	0	; () banked
 13631  0011EE  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
 13632  0011F0  0E0A               	movlw	10
 13633  0011F2  6F82               	movwf	___wmul@multiplicand& (0+255),b
 13634  0011F4  EC66  F021         	call	___wmul	;wreg free
 13635  0011F8  C080  F0A9         	movff	?___wmul,printf@width
 13636  0011FC  C081  F0AA         	movff	?___wmul+1,printf@width+1
 13637                           
 13638                           ;doprnt.c: 601: width += *f++ - '0';
 13639  001200  0ED0               	movlw	208
 13640  001202  0100               	movlb	0	; () banked
 13641  001204  6F9A               	movwf	??_printf& (0+255),b
 13642  001206  0EFF               	movlw	255
 13643  001208  0100               	movlb	0	; () banked
 13644  00120A  6F9B               	movwf	(??_printf+1)& (0+255),b
 13645  00120C  C08E  FFF6         	movff	printf@f,tblptrl
 13646  001210  C08F  FFF7         	movff	printf@f+1,tblptrh
 13647  001214                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13648  001214  6AF8               	clrf	tblptru,c
 13649  001216                     	endif
 13650  001216                     	if	0	;tblptru may be non-zero
 13651  001216                     	endif
 13652  001216  0008               	tblrd		*
 13653  001218  50F5               	movf	tablat,w,c
 13654  00121A  0100               	movlb	0	; () banked
 13655  00121C  6F9C               	movwf	(??_printf+2)& (0+255),b
 13656  00121E  6B9D               	clrf	(??_printf+3)& (0+255),b
 13657  001220  0100               	movlb	0	; () banked
 13658  001222  519A               	movf	??_printf& (0+255),w,b
 13659  001224  0100               	movlb	0	; () banked
 13660  001226  279C               	addwf	(??_printf+2)& (0+255),f,b
 13661  001228  0100               	movlb	0	; () banked
 13662  00122A  519B               	movf	(??_printf+1)& (0+255),w,b
 13663  00122C  0100               	movlb	0	; () banked
 13664  00122E  239D               	addwfc	(??_printf+3)& (0+255),f,b
 13665  001230  0100               	movlb	0	; () banked
 13666  001232  519C               	movf	(??_printf+2)& (0+255),w,b
 13667  001234  0100               	movlb	0	; () banked
 13668  001236  27A9               	addwf	printf@width& (0+255),f,b
 13669  001238  0100               	movlb	0	; () banked
 13670  00123A  519D               	movf	(??_printf+3)& (0+255),w,b
 13671  00123C  0100               	movlb	0	; () banked
 13672  00123E  23AA               	addwfc	(printf@width+1)& (0+255),f,b
 13673                           
 13674                           ; BSR set to: 0
 13675  001240  0100               	movlb	0	; () banked
 13676  001242  4B8E               	infsnz	printf@f& (0+255),f,b
 13677  001244  2B8F               	incf	(printf@f+1)& (0+255),f,b
 13678                           
 13679                           ; BSR set to: 0
 13680                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 13681  001246  C08E  FFF6         	movff	printf@f,tblptrl
 13682  00124A  C08F  FFF7         	movff	printf@f+1,tblptrh
 13683  00124E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13684  00124E  6AF8               	clrf	tblptru,c
 13685  001250                     	endif
 13686  001250                     	if	0	;tblptru may be non-zero
 13687  001250                     	endif
 13688  001250  0008               	tblrd		*
 13689  001252  50F5               	movf	tablat,w,c
 13690  001254  ECCC  F022         	call	_isdigit
 13691  001258  A0D8               	btfss	status,0,c
 13692  00125A  D090               	goto	l5477
 13693  00125C  D7C2               	goto	l5435
 13694  00125E                     l5443:
 13695                           
 13696                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 13697  00125E  C0A1  FFD9         	movff	printf@ap,fsr2l
 13698  001262  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 13699  001266  CFDE F09F          	movff	postinc2,printf@cp
 13700  00126A  CFDD F0A0          	movff	postdec2,printf@cp+1
 13701  00126E  0E02               	movlw	2
 13702  001270  0100               	movlb	0	; () banked
 13703  001272  27A1               	addwf	printf@ap& (0+255),f,b
 13704  001274  0E00               	movlw	0
 13705  001276  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 13706                           
 13707                           ; BSR set to: 0
 13708                           ;doprnt.c: 740: if(!cp)
 13709  001278  0100               	movlb	0	; () banked
 13710  00127A  519F               	movf	printf@cp& (0+255),w,b
 13711  00127C  0100               	movlb	0	; () banked
 13712  00127E  11A0               	iorwf	(printf@cp+1)& (0+255),w,b
 13713  001280  A4D8               	btfss	status,2,c
 13714  001282  D006               	goto	l5451
 13715                           
 13716                           ; BSR set to: 0
 13717                           ;doprnt.c: 741: cp = "(null)";
 13718  001284  0EB6               	movlw	low STR_117
 13719  001286  0100               	movlb	0	; () banked
 13720  001288  6F9F               	movwf	printf@cp& (0+255),b
 13721  00128A  0EFF               	movlw	high STR_117
 13722  00128C  0100               	movlb	0	; () banked
 13723  00128E  6FA0               	movwf	(printf@cp+1)& (0+255),b
 13724  001290                     l5451:
 13725                           
 13726                           ; BSR set to: 0
 13727                           ;doprnt.c: 745: len = 0;
 13728  001290  0E00               	movlw	0
 13729  001292  0100               	movlb	0	; () banked
 13730  001294  6FA4               	movwf	(printf@len+1)& (0+255),b
 13731  001296  0E00               	movlw	0
 13732  001298  6FA3               	movwf	printf@len& (0+255),b
 13733                           
 13734                           ;doprnt.c: 746: while(cp[len])
 13735  00129A  D003               	goto	l5455
 13736  00129C                     l5453:
 13737                           
 13738                           ;doprnt.c: 747: len++;
 13739  00129C  0100               	movlb	0	; () banked
 13740  00129E  4BA3               	infsnz	printf@len& (0+255),f,b
 13741  0012A0  2BA4               	incf	(printf@len+1)& (0+255),f,b
 13742  0012A2                     l5455:
 13743                           
 13744                           ; BSR set to: 0
 13745  0012A2  0100               	movlb	0	; () banked
 13746  0012A4  51A3               	movf	printf@len& (0+255),w,b
 13747  0012A6  0100               	movlb	0	; () banked
 13748  0012A8  259F               	addwf	printf@cp& (0+255),w,b
 13749  0012AA  0100               	movlb	0	; () banked
 13750  0012AC  6F9A               	movwf	??_printf& (0+255),b
 13751  0012AE  0100               	movlb	0	; () banked
 13752  0012B0  51A4               	movf	(printf@len+1)& (0+255),w,b
 13753  0012B2  0100               	movlb	0	; () banked
 13754  0012B4  21A0               	addwfc	(printf@cp+1)& (0+255),w,b
 13755  0012B6  0100               	movlb	0	; () banked
 13756  0012B8  6F9B               	movwf	(??_printf+1)& (0+255),b
 13757  0012BA  C09A  FFF6         	movff	??_printf,tblptrl
 13758  0012BE  C09B  FFF7         	movff	??_printf+1,tblptrh
 13759  0012C2  0E00               	movlw	low (__mediumconst shr (0+16))
 13760  0012C4  6EF8               	movwf	tblptru,c
 13761  0012C6  0E0F               	movlw	(high __ramtop+-1)
 13762  0012C8  64F7               	cpfsgt	tblptrh,c
 13763  0012CA  D003               	bra	u3857
 13764  0012CC  0008               	tblrd		*
 13765  0012CE  50F5               	movf	tablat,w,c
 13766  0012D0  D005               	bra	u3850
 13767  0012D2                     u3857:
 13768  0012D2  CFF6 FFE9          	movff	tblptrl,fsr0l
 13769  0012D6  CFF7 FFEA          	movff	tblptrh,fsr0h
 13770  0012DA  50EF               	movf	indf0,w,c
 13771  0012DC                     u3850:
 13772  0012DC  0900               	iorlw	0
 13773  0012DE  A4D8               	btfss	status,2,c
 13774  0012E0  D7DD               	goto	l5453
 13775                           
 13776                           ;doprnt.c: 757: if(width > len)
 13777  0012E2  0100               	movlb	0	; () banked
 13778  0012E4  51A9               	movf	printf@width& (0+255),w,b
 13779  0012E6  0100               	movlb	0	; () banked
 13780  0012E8  5DA3               	subwf	printf@len& (0+255),w,b
 13781  0012EA  0100               	movlb	0	; () banked
 13782  0012EC  51AA               	movf	(printf@width+1)& (0+255),w,b
 13783  0012EE  0100               	movlb	0	; () banked
 13784  0012F0  59A4               	subwfb	(printf@len+1)& (0+255),w,b
 13785  0012F2  B0D8               	btfsc	status,0,c
 13786  0012F4  D009               	goto	l5461
 13787                           
 13788                           ; BSR set to: 0
 13789                           ;doprnt.c: 758: width -= len;
 13790  0012F6  0100               	movlb	0	; () banked
 13791  0012F8  51A3               	movf	printf@len& (0+255),w,b
 13792  0012FA  0100               	movlb	0	; () banked
 13793  0012FC  5FA9               	subwf	printf@width& (0+255),f,b
 13794  0012FE  0100               	movlb	0	; () banked
 13795  001300  51A4               	movf	(printf@len+1)& (0+255),w,b
 13796  001302  0100               	movlb	0	; () banked
 13797  001304  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 13798  001306  D009               	goto	l5465
 13799  001308                     l5461:
 13800                           
 13801                           ; BSR set to: 0
 13802                           ;doprnt.c: 759: else
 13803                           ;doprnt.c: 760: width = 0;
 13804  001308  0E00               	movlw	0
 13805  00130A  0100               	movlb	0	; () banked
 13806  00130C  6FAA               	movwf	(printf@width+1)& (0+255),b
 13807  00130E  0E00               	movlw	0
 13808  001310  6FA9               	movwf	printf@width& (0+255),b
 13809                           
 13810                           ; BSR set to: 0
 13811                           ;doprnt.c: 764: while(width--)
 13812  001312  D003               	goto	l5465
 13813  001314                     l5463:
 13814                           
 13815                           ; BSR set to: 0
 13816                           ;doprnt.c: 765: (putch(' ') );
 13817  001314  0E20               	movlw	32
 13818  001316  ECB9  F023         	call	_putch
 13819  00131A                     l5465:
 13820  00131A  0100               	movlb	0	; () banked
 13821  00131C  07A9               	decf	printf@width& (0+255),f,b
 13822  00131E  A0D8               	btfss	status,0,c
 13823  001320  07AA               	decf	(printf@width+1)& (0+255),f,b
 13824  001322  0100               	movlb	0	; () banked
 13825  001324  29A9               	incf	printf@width& (0+255),w,b
 13826  001326  E1F6               	bnz	l5463
 13827  001328  0100               	movlb	0	; () banked
 13828  00132A  29AA               	incf	(printf@width+1)& (0+255),w,b
 13829  00132C  B4D8               	btfsc	status,2,c
 13830  00132E  D017               	goto	l5471
 13831  001330  D7F1               	goto	l5463
 13832  001332                     l5467:
 13833                           
 13834                           ; BSR set to: 0
 13835                           ;doprnt.c: 768: (putch(*cp++) );
 13836  001332  C09F  FFF6         	movff	printf@cp,tblptrl
 13837  001336  C0A0  FFF7         	movff	printf@cp+1,tblptrh
 13838  00133A  0E00               	movlw	low (__mediumconst shr (0+16))
 13839  00133C  6EF8               	movwf	tblptru,c
 13840  00133E  0E0F               	movlw	(high __ramtop+-1)
 13841  001340  64F7               	cpfsgt	tblptrh,c
 13842  001342  D003               	bra	u3897
 13843  001344  0008               	tblrd		*
 13844  001346  50F5               	movf	tablat,w,c
 13845  001348  D005               	bra	u3890
 13846  00134A                     u3897:
 13847  00134A  CFF6 FFE9          	movff	tblptrl,fsr0l
 13848  00134E  CFF7 FFEA          	movff	tblptrh,fsr0h
 13849  001352  50EF               	movf	indf0,w,c
 13850  001354                     u3890:
 13851  001354  ECB9  F023         	call	_putch
 13852  001358  0100               	movlb	0	; () banked
 13853  00135A  4B9F               	infsnz	printf@cp& (0+255),f,b
 13854  00135C  2BA0               	incf	(printf@cp+1)& (0+255),f,b
 13855  00135E                     l5471:
 13856                           
 13857                           ; BSR set to: 0
 13858  00135E  0100               	movlb	0	; () banked
 13859  001360  07A3               	decf	printf@len& (0+255),f,b
 13860  001362  A0D8               	btfss	status,0,c
 13861  001364  07A4               	decf	(printf@len+1)& (0+255),f,b
 13862  001366  0100               	movlb	0	; () banked
 13863  001368  29A3               	incf	printf@len& (0+255),w,b
 13864  00136A  E1E3               	bnz	l5467
 13865  00136C  0100               	movlb	0	; () banked
 13866  00136E  29A4               	incf	(printf@len+1)& (0+255),w,b
 13867  001370  B4D8               	btfsc	status,2,c
 13868  001372  D10A               	goto	l5549
 13869  001374  D7DE               	goto	l5467
 13870  001376                     l5473:
 13871                           
 13872                           ; BSR set to: 0
 13873                           ;doprnt.c: 818: flag |= 0x40;
 13874  001376  0100               	movlb	0	; () banked
 13875  001378  8DA7               	bsf	printf@flag& (0+255),6,b
 13876                           
 13877                           ; BSR set to: 0
 13878                           ;doprnt.c: 822: }
 13879                           
 13880                           ;doprnt.c: 819: break;
 13881  00137A  D01D               	goto	l1249
 13882  00137C                     l5477:
 13883  00137C  C08E  FFF6         	movff	printf@f,tblptrl
 13884  001380  C08F  FFF7         	movff	printf@f+1,tblptrh
 13885  001384  0100               	movlb	0	; () banked
 13886  001386  4B8E               	infsnz	printf@f& (0+255),f,b
 13887  001388  2B8F               	incf	(printf@f+1)& (0+255),f,b
 13888  00138A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13889  00138A  6AF8               	clrf	tblptru,c
 13890  00138C                     	endif
 13891  00138C                     	if	0	;tblptru may be non-zero
 13892  00138C                     	endif
 13893  00138C  0008               	tblrd		*
 13894  00138E  CFF5 F0A8          	movff	tablat,printf@c
 13895  001392  0100               	movlb	0	; () banked
 13896  001394  51A8               	movf	printf@c& (0+255),w,b
 13897                           
 13898                           ; Switch size 1, requested type "space"
 13899                           ; Number of cases is 5, Range of values is 0 to 117
 13900                           ; switch strategies available:
 13901                           ; Name         Instructions Cycles
 13902                           ; simple_byte           16     9 (average)
 13903                           ;	Chosen strategy is simple_byte
 13904  001396  0A00               	xorlw	0	; case 0
 13905  001398  B4D8               	btfsc	status,2,c
 13906  00139A  0012               	return	
 13907  00139C  0A64               	xorlw	100	; case 100
 13908  00139E  B4D8               	btfsc	status,2,c
 13909  0013A0  D00A               	goto	l1249
 13910  0013A2  0A0D               	xorlw	13	; case 105
 13911  0013A4  B4D8               	btfsc	status,2,c
 13912  0013A6  D007               	goto	l1249
 13913  0013A8  0A1A               	xorlw	26	; case 115
 13914  0013AA  B4D8               	btfsc	status,2,c
 13915  0013AC  D758               	goto	l5443
 13916  0013AE  0A06               	xorlw	6	; case 117
 13917  0013B0  B4D8               	btfsc	status,2,c
 13918  0013B2  D7E1               	goto	l5473
 13919  0013B4  D0E9               	goto	l5549
 13920  0013B6                     l1249:
 13921                           
 13922                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 13923  0013B6  0100               	movlb	0	; () banked
 13924  0013B8  BDA7               	btfsc	printf@flag& (0+255),6,b
 13925  0013BA  D019               	goto	l5489
 13926                           
 13927                           ; BSR set to: 0
 13928                           ;doprnt.c: 1253: {
 13929                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 13930  0013BC  C0A1  FFD9         	movff	printf@ap,fsr2l
 13931  0013C0  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 13932  0013C4  CFDE F0A5          	movff	postinc2,printf@val
 13933  0013C8  CFDD F0A6          	movff	postdec2,printf@val+1
 13934                           
 13935                           ; BSR set to: 0
 13936  0013CC  0E02               	movlw	2
 13937  0013CE  0100               	movlb	0	; () banked
 13938  0013D0  27A1               	addwf	printf@ap& (0+255),f,b
 13939  0013D2  0E00               	movlw	0
 13940  0013D4  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 13941                           
 13942                           ; BSR set to: 0
 13943                           ;doprnt.c: 1261: if((int)val < 0) {
 13944  0013D6  0100               	movlb	0	; () banked
 13945  0013D8  AFA6               	btfss	(printf@val+1)& (0+255),7,b
 13946  0013DA  D016               	goto	l5493
 13947                           
 13948                           ; BSR set to: 0
 13949                           ;doprnt.c: 1262: flag |= 0x03;
 13950  0013DC  0E03               	movlw	3
 13951  0013DE  0100               	movlb	0	; () banked
 13952  0013E0  13A7               	iorwf	printf@flag& (0+255),f,b
 13953                           
 13954                           ; BSR set to: 0
 13955                           ;doprnt.c: 1263: val = -val;
 13956  0013E2  0100               	movlb	0	; () banked
 13957  0013E4  6DA5               	negf	printf@val& (0+255),b
 13958  0013E6  1FA6               	comf	(printf@val+1)& (0+255),f,b
 13959  0013E8  B0D8               	btfsc	status,0,c
 13960  0013EA  2BA6               	incf	(printf@val+1)& (0+255),f,b
 13961                           
 13962                           ; BSR set to: 0
 13963                           ;doprnt.c: 1264: }
 13964                           ;doprnt.c: 1266: }
 13965  0013EC  D00D               	goto	l5493
 13966  0013EE                     l5489:
 13967                           
 13968                           ; BSR set to: 0
 13969                           ;doprnt.c: 1268: else
 13970                           ;doprnt.c: 1273: {
 13971                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 13972  0013EE  C0A1  FFD9         	movff	printf@ap,fsr2l
 13973  0013F2  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 13974  0013F6  CFDE F0A5          	movff	postinc2,printf@val
 13975  0013FA  CFDD F0A6          	movff	postdec2,printf@val+1
 13976                           
 13977                           ; BSR set to: 0
 13978  0013FE  0E02               	movlw	2
 13979  001400  0100               	movlb	0	; () banked
 13980  001402  27A1               	addwf	printf@ap& (0+255),f,b
 13981  001404  0E00               	movlw	0
 13982  001406  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 13983  001408                     l5493:
 13984                           
 13985                           ; BSR set to: 0
 13986                           ;doprnt.c: 1287: }
 13987                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 13988  001408  0E01               	movlw	1
 13989  00140A  0100               	movlb	0	; () banked
 13990  00140C  6FA8               	movwf	printf@c& (0+255),b
 13991  00140E                     l5495:
 13992                           
 13993                           ; BSR set to: 0
 13994  00140E  0E05               	movlw	5
 13995  001410  0100               	movlb	0	; () banked
 13996  001412  19A8               	xorwf	printf@c& (0+255),w,b
 13997  001414  B4D8               	btfsc	status,2,c
 13998  001416  D019               	goto	l5507
 13999                           
 14000                           ; BSR set to: 0
 14001                           ;doprnt.c: 1306: if(val < dpowers[c])
 14002                           
 14003                           ; BSR set to: 0
 14004                           
 14005                           ; BSR set to: 0
 14006  001418  0100               	movlb	0	; () banked
 14007  00141A  51A8               	movf	printf@c& (0+255),w,b
 14008  00141C  0D02               	mullw	2
 14009  00141E  0E26               	movlw	low _dpowers
 14010  001420  24F3               	addwf	prodl,w,c
 14011  001422  6EF6               	movwf	tblptrl,c
 14012  001424  0EFB               	movlw	high _dpowers
 14013  001426  20F4               	addwfc	prodh,w,c
 14014  001428  6EF7               	movwf	tblptrh,c
 14015  00142A                     	if	1	;There are 3 active tblptr bytes
 14016  00142A  6AF8               	clrf	tblptru,c
 14017  00142C  0E00               	movlw	low (__mediumconst shr (0+16))
 14018  00142E  22F8               	addwfc	tblptru,f,c
 14019  001430                     	endif
 14020  001430  0009               	tblrd		*+
 14021  001432  50F5               	movf	tablat,w,c
 14022  001434  0100               	movlb	0	; () banked
 14023  001436  5DA5               	subwf	printf@val& (0+255),w,b
 14024  001438  0009               	tblrd		*+
 14025  00143A  50F5               	movf	tablat,w,c
 14026  00143C  0100               	movlb	0	; () banked
 14027  00143E  59A6               	subwfb	(printf@val+1)& (0+255),w,b
 14028  001440  A0D8               	btfss	status,0,c
 14029  001442  D003               	goto	l5507
 14030                           
 14031                           ; BSR set to: 0
 14032                           
 14033                           ; BSR set to: 0
 14034                           
 14035                           ; BSR set to: 0
 14036                           ;doprnt.c: 1307: break;
 14037  001444  0100               	movlb	0	; () banked
 14038  001446  2BA8               	incf	printf@c& (0+255),f,b
 14039  001448  D7E2               	goto	l5495
 14040  00144A                     l5507:
 14041                           
 14042                           ; BSR set to: 0
 14043                           ;doprnt.c: 1345: if(width && flag & 0x03)
 14044  00144A  0100               	movlb	0	; () banked
 14045  00144C  51A9               	movf	printf@width& (0+255),w,b
 14046  00144E  0100               	movlb	0	; () banked
 14047  001450  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 14048  001452  B4D8               	btfsc	status,2,c
 14049  001454  D00B               	goto	l5513
 14050                           
 14051                           ; BSR set to: 0
 14052  001456  C0A7  F09A         	movff	printf@flag,??_printf
 14053  00145A  0E03               	movlw	3
 14054  00145C  0100               	movlb	0	; () banked
 14055  00145E  179A               	andwf	??_printf& (0+255),f,b
 14056  001460  B4D8               	btfsc	status,2,c
 14057  001462  D004               	goto	l5513
 14058                           
 14059                           ; BSR set to: 0
 14060                           ;doprnt.c: 1346: width--;
 14061  001464  0100               	movlb	0	; () banked
 14062  001466  07A9               	decf	printf@width& (0+255),f,b
 14063  001468  A0D8               	btfss	status,0,c
 14064  00146A  07AA               	decf	(printf@width+1)& (0+255),f,b
 14065  00146C                     l5513:
 14066                           
 14067                           ; BSR set to: 0
 14068                           ;doprnt.c: 1381: if(width > c)
 14069  00146C  0E80               	movlw	128
 14070  00146E  0100               	movlb	0	; () banked
 14071  001470  BFA8               	btfsc	printf@c& (0+255),7,b
 14072  001472  0E7F               	movlw	127
 14073  001474  0100               	movlb	0	; () banked
 14074  001476  6F9A               	movwf	??_printf& (0+255),b
 14075  001478  0100               	movlb	0	; () banked
 14076  00147A  51A9               	movf	printf@width& (0+255),w,b
 14077  00147C  0100               	movlb	0	; () banked
 14078  00147E  5DA8               	subwf	printf@c& (0+255),w,b
 14079  001480  0100               	movlb	0	; () banked
 14080  001482  51AA               	movf	(printf@width+1)& (0+255),w,b
 14081  001484  0A80               	xorlw	128
 14082  001486  0100               	movlb	0	; () banked
 14083  001488  599A               	subwfb	??_printf& (0+255),w,b
 14084  00148A  B0D8               	btfsc	status,0,c
 14085  00148C  D00B               	goto	l5517
 14086                           
 14087                           ; BSR set to: 0
 14088                           ;doprnt.c: 1382: width -= c;
 14089  00148E  0100               	movlb	0	; () banked
 14090  001490  51A8               	movf	printf@c& (0+255),w,b
 14091  001492  0100               	movlb	0	; () banked
 14092  001494  5FA9               	subwf	printf@width& (0+255),f,b
 14093  001496  0E00               	movlw	0
 14094  001498  0100               	movlb	0	; () banked
 14095  00149A  BFA8               	btfsc	printf@c& (0+255),7,b
 14096  00149C  0EFF               	movlw	255
 14097  00149E  0100               	movlb	0	; () banked
 14098  0014A0  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 14099  0014A2  D005               	goto	l5519
 14100  0014A4                     l5517:
 14101                           
 14102                           ; BSR set to: 0
 14103                           ;doprnt.c: 1383: else
 14104                           ;doprnt.c: 1384: width = 0;
 14105  0014A4  0E00               	movlw	0
 14106  0014A6  0100               	movlb	0	; () banked
 14107  0014A8  6FAA               	movwf	(printf@width+1)& (0+255),b
 14108  0014AA  0E00               	movlw	0
 14109  0014AC  6FA9               	movwf	printf@width& (0+255),b
 14110  0014AE                     l5519:
 14111                           
 14112                           ; BSR set to: 0
 14113                           ;doprnt.c: 1387: if(flag & 0x04) {
 14114  0014AE  0100               	movlb	0	; () banked
 14115  0014B0  A5A7               	btfss	printf@flag& (0+255),2,b
 14116  0014B2  D018               	goto	l5531
 14117                           
 14118                           ; BSR set to: 0
 14119                           ;doprnt.c: 1392: if(flag & 0x03)
 14120  0014B4  C0A7  F09A         	movff	printf@flag,??_printf
 14121  0014B8  0E03               	movlw	3
 14122  0014BA  0100               	movlb	0	; () banked
 14123  0014BC  179A               	andwf	??_printf& (0+255),f,b
 14124  0014BE  B4D8               	btfsc	status,2,c
 14125  0014C0  D003               	goto	l5525
 14126                           
 14127                           ; BSR set to: 0
 14128                           ;doprnt.c: 1393: (putch('-') );
 14129  0014C2  0E2D               	movlw	45
 14130  0014C4  ECB9  F023         	call	_putch
 14131  0014C8                     l5525:
 14132                           
 14133                           ;doprnt.c: 1415: if(width)
 14134  0014C8  0100               	movlb	0	; () banked
 14135  0014CA  51A9               	movf	printf@width& (0+255),w,b
 14136  0014CC  0100               	movlb	0	; () banked
 14137  0014CE  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 14138  0014D0  B4D8               	btfsc	status,2,c
 14139  0014D2  D025               	goto	l5541
 14140                           
 14141                           ; BSR set to: 0
 14142                           ;doprnt.c: 1417: (putch('0') );
 14143                           
 14144                           ; BSR set to: 0
 14145                           
 14146                           ;doprnt.c: 1416: do
 14147  0014D4  0E30               	movlw	48
 14148  0014D6  ECB9  F023         	call	_putch
 14149                           
 14150                           ;doprnt.c: 1418: while(--width);
 14151  0014DA  0100               	movlb	0	; () banked
 14152  0014DC  07A9               	decf	printf@width& (0+255),f,b
 14153  0014DE  A0D8               	btfss	status,0,c
 14154  0014E0  07AA               	decf	(printf@width+1)& (0+255),f,b
 14155  0014E2  D7F2               	goto	l5525
 14156  0014E4                     l5531:
 14157                           
 14158                           ; BSR set to: 0
 14159                           ;doprnt.c: 1422: {
 14160                           ;doprnt.c: 1424: if(width
 14161                           ;doprnt.c: 1428: )
 14162  0014E4  0100               	movlb	0	; () banked
 14163  0014E6  51A9               	movf	printf@width& (0+255),w,b
 14164  0014E8  0100               	movlb	0	; () banked
 14165  0014EA  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 14166  0014EC  B4D8               	btfsc	status,2,c
 14167  0014EE  D00D               	goto	l5537
 14168  0014F0                     l5533:
 14169                           
 14170                           ; BSR set to: 0
 14171                           ;doprnt.c: 1430: (putch(' ') );
 14172  0014F0  0E20               	movlw	32
 14173  0014F2  ECB9  F023         	call	_putch
 14174                           
 14175                           ;doprnt.c: 1431: while(--width);
 14176  0014F6  0100               	movlb	0	; () banked
 14177  0014F8  07A9               	decf	printf@width& (0+255),f,b
 14178  0014FA  A0D8               	btfss	status,0,c
 14179  0014FC  07AA               	decf	(printf@width+1)& (0+255),f,b
 14180  0014FE  0100               	movlb	0	; () banked
 14181  001500  51A9               	movf	printf@width& (0+255),w,b
 14182  001502  0100               	movlb	0	; () banked
 14183  001504  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 14184  001506  A4D8               	btfss	status,2,c
 14185  001508  D7F3               	goto	l5533
 14186  00150A                     l5537:
 14187                           
 14188                           ; BSR set to: 0
 14189                           ;doprnt.c: 1438: if(flag & 0x03)
 14190  00150A  C0A7  F09A         	movff	printf@flag,??_printf
 14191  00150E  0E03               	movlw	3
 14192  001510  0100               	movlb	0	; () banked
 14193  001512  179A               	andwf	??_printf& (0+255),f,b
 14194  001514  B4D8               	btfsc	status,2,c
 14195  001516  D003               	goto	l5541
 14196                           
 14197                           ; BSR set to: 0
 14198                           ;doprnt.c: 1439: (putch('-') );
 14199  001518  0E2D               	movlw	45
 14200  00151A  ECB9  F023         	call	_putch
 14201  00151E                     l5541:
 14202                           
 14203                           ;doprnt.c: 1469: }
 14204                           ;doprnt.c: 1472: prec = c;
 14205  00151E  C0A8  F09E         	movff	printf@c,printf@prec
 14206                           
 14207                           ;doprnt.c: 1474: while(prec--) {
 14208  001522  D02C               	goto	l5547
 14209  001524                     l5543:
 14210                           
 14211                           ;doprnt.c: 1478: {
 14212                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 14213  001524  0100               	movlb	0	; () banked
 14214  001526  519E               	movf	printf@prec& (0+255),w,b
 14215  001528  0D02               	mullw	2
 14216  00152A  0E26               	movlw	low _dpowers
 14217  00152C  24F3               	addwf	prodl,w,c
 14218  00152E  6EF6               	movwf	tblptrl,c
 14219  001530  0EFB               	movlw	high _dpowers
 14220  001532  20F4               	addwfc	prodh,w,c
 14221  001534  6EF7               	movwf	tblptrh,c
 14222  001536                     	if	1	;There are 3 active tblptr bytes
 14223  001536  6AF8               	clrf	tblptru,c
 14224  001538  0E00               	movlw	low (__mediumconst shr (0+16))
 14225  00153A  22F8               	addwfc	tblptru,f,c
 14226  00153C                     	endif
 14227  00153C  0009               	tblrd		*+
 14228  00153E  CFF5 F082          	movff	tablat,___lwdiv@divisor
 14229  001542  000A               	tblrd		*-
 14230  001544  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
 14231  001548  C0A5  F080         	movff	printf@val,___lwdiv@dividend
 14232  00154C  C0A6  F081         	movff	printf@val+1,___lwdiv@dividend+1
 14233  001550  EC0C  F01E         	call	___lwdiv	;wreg free
 14234  001554  C080  F087         	movff	?___lwdiv,___lwmod@dividend
 14235  001558  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
 14236  00155C  0E00               	movlw	0
 14237  00155E  0100               	movlb	0	; () banked
 14238  001560  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
 14239  001562  0E0A               	movlw	10
 14240  001564  6F89               	movwf	___lwmod@divisor& (0+255),b
 14241  001566  EC25  F01F         	call	___lwmod	;wreg free
 14242  00156A  0100               	movlb	0	; () banked
 14243  00156C  5187               	movf	?___lwmod& (0+255),w,b
 14244  00156E  0F30               	addlw	48
 14245  001570  0100               	movlb	0	; () banked
 14246  001572  6FA8               	movwf	printf@c& (0+255),b
 14247                           
 14248                           ; BSR set to: 0
 14249                           ;doprnt.c: 1523: }
 14250                           ;doprnt.c: 1524: (putch(c) );
 14251  001574  0100               	movlb	0	; () banked
 14252  001576  51A8               	movf	printf@c& (0+255),w,b
 14253  001578  ECB9  F023         	call	_putch
 14254  00157C                     l5547:
 14255  00157C  0100               	movlb	0	; () banked
 14256  00157E  079E               	decf	printf@prec& (0+255),f,b
 14257  001580  0100               	movlb	0	; () banked
 14258  001582  299E               	incf	printf@prec& (0+255),w,b
 14259  001584  A4D8               	btfss	status,2,c
 14260  001586  D7CE               	goto	l5543
 14261  001588                     l5549:
 14262  001588  C08E  FFF6         	movff	printf@f,tblptrl
 14263  00158C  C08F  FFF7         	movff	printf@f+1,tblptrh
 14264  001590  0100               	movlb	0	; () banked
 14265  001592  4B8E               	infsnz	printf@f& (0+255),f,b
 14266  001594  2B8F               	incf	(printf@f+1)& (0+255),f,b
 14267  001596                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 14268  001596  6AF8               	clrf	tblptru,c
 14269  001598                     	endif
 14270  001598                     	if	0	;tblptru may be non-zero
 14271  001598                     	endif
 14272  001598  0008               	tblrd		*
 14273  00159A  CFF5 F0A8          	movff	tablat,printf@c
 14274  00159E  0100               	movlb	0	; () banked
 14275  0015A0  51A8               	movf	printf@c& (0+255),w,b
 14276  0015A2  B4D8               	btfsc	status,2,c
 14277  0015A4  0012               	return	
 14278  0015A6  D5EB               	goto	l5419
 14279  0015A8                     __end_of_printf:
 14280                           	opt stack 0
 14281                           tblptru	equ	0xFF8
 14282                           tblptrh	equ	0xFF7
 14283                           tblptrl	equ	0xFF6
 14284                           tablat	equ	0xFF5
 14285                           prodh	equ	0xFF4
 14286                           prodl	equ	0xFF3
 14287                           intcon	equ	0xFF2
 14288                           intcon2	equ	0xFF1
 14289                           intcon3	equ	0xFF0
 14290                           indf0	equ	0xFEF
 14291                           postinc0	equ	0xFEE
 14292                           fsr0h	equ	0xFEA
 14293                           fsr0l	equ	0xFE9
 14294                           wreg	equ	0xFE8
 14295                           postdec1	equ	0xFE5
 14296                           fsr1l	equ	0xFE1
 14297                           indf2	equ	0xFDF
 14298                           postinc2	equ	0xFDE
 14299                           postdec2	equ	0xFDD
 14300                           fsr2h	equ	0xFDA
 14301                           fsr2l	equ	0xFD9
 14302                           status	equ	0xFD8
 14303                           
 14304 ;; *************** function _putch *****************
 14305 ;; Defined at:
 14306 ;;		line 20 in file "lcd.c"
 14307 ;; Parameters:    Size  Location     Type
 14308 ;;  data            1    wreg     unsigned char 
 14309 ;; Auto vars:     Size  Location     Type
 14310 ;;  data            1    2[BANK0 ] unsigned char 
 14311 ;; Return value:  Size  Location     Type
 14312 ;;                  1    wreg      void 
 14313 ;; Registers used:
 14314 ;;		wreg, status,2, status,0, cstack
 14315 ;; Tracked objects:
 14316 ;;		On entry : 0/0
 14317 ;;		On exit  : 0/0
 14318 ;;		Unchanged: 0/0
 14319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14320 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14321 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14322 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14323 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14324 ;;Total ram usage:        1 bytes
 14325 ;; Hardware stack levels used:    1
 14326 ;; Hardware stack levels required when called:    8
 14327 ;; This function calls:
 14328 ;;		_lcdNibble
 14329 ;; This function is called by:
 14330 ;;		_printf
 14331 ;; This function uses a non-reentrant model
 14332 ;;
 14333                           
 14334                           	psect	text48
 14335  004772                     __ptext48:
 14336                           	opt stack 0
 14337  004772                     _putch:
 14338                           	opt stack 18
 14339                           
 14340                           ;incstack = 0
 14341                           ;putch@data stored from wreg
 14342  004772  0100               	movlb	0	; () banked
 14343  004774  6F82               	movwf	putch@data& (0+255),b
 14344                           
 14345                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 14346  004776  848C               	bsf	3980,2,c	;volatile
 14347                           
 14348                           ;lcd.c: 22: lcdNibble(data);
 14349  004778  0100               	movlb	0	; () banked
 14350  00477A  5182               	movf	putch@data& (0+255),w,b
 14351  00477C  ECF1  F01E         	call	_lcdNibble
 14352  004780  0012               	return		;funcret
 14353  004782                     __end_of_putch:
 14354                           	opt stack 0
 14355                           tblptru	equ	0xFF8
 14356                           tblptrh	equ	0xFF7
 14357                           tblptrl	equ	0xFF6
 14358                           tablat	equ	0xFF5
 14359                           prodh	equ	0xFF4
 14360                           prodl	equ	0xFF3
 14361                           intcon	equ	0xFF2
 14362                           intcon2	equ	0xFF1
 14363                           intcon3	equ	0xFF0
 14364                           indf0	equ	0xFEF
 14365                           postinc0	equ	0xFEE
 14366                           fsr0h	equ	0xFEA
 14367                           fsr0l	equ	0xFE9
 14368                           wreg	equ	0xFE8
 14369                           postdec1	equ	0xFE5
 14370                           fsr1l	equ	0xFE1
 14371                           indf2	equ	0xFDF
 14372                           postinc2	equ	0xFDE
 14373                           postdec2	equ	0xFDD
 14374                           fsr2h	equ	0xFDA
 14375                           fsr2l	equ	0xFD9
 14376                           status	equ	0xFD8
 14377                           
 14378 ;; *************** function _isdigit *****************
 14379 ;; Defined at:
 14380 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 14381 ;; Parameters:    Size  Location     Type
 14382 ;;  c               1    wreg     unsigned char 
 14383 ;; Auto vars:     Size  Location     Type
 14384 ;;  c               1    2[BANK0 ] unsigned char 
 14385 ;; Return value:  Size  Location     Type
 14386 ;;		None               void
 14387 ;; Registers used:
 14388 ;;		wreg, status,2, status,0
 14389 ;; Tracked objects:
 14390 ;;		On entry : 0/0
 14391 ;;		On exit  : 0/0
 14392 ;;		Unchanged: 0/0
 14393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14394 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14395 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14396 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14397 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14398 ;;Total ram usage:        3 bytes
 14399 ;; Hardware stack levels used:    1
 14400 ;; Hardware stack levels required when called:    7
 14401 ;; This function calls:
 14402 ;;		Nothing
 14403 ;; This function is called by:
 14404 ;;		_printf
 14405 ;; This function uses a non-reentrant model
 14406 ;;
 14407                           
 14408                           	psect	text49
 14409  004598                     __ptext49:
 14410                           	opt stack 0
 14411  004598                     _isdigit:
 14412                           	opt stack 19
 14413                           
 14414                           ;incstack = 0
 14415                           ;isdigit@c stored from wreg
 14416  004598  0100               	movlb	0	; () banked
 14417  00459A  6F82               	movwf	isdigit@c& (0+255),b
 14418  00459C  0E00               	movlw	0
 14419  00459E  0100               	movlb	0	; () banked
 14420  0045A0  6F81               	movwf	_isdigit$1939& (0+255),b
 14421                           
 14422                           ; BSR set to: 0
 14423  0045A2  0E3A               	movlw	58
 14424  0045A4  0100               	movlb	0	; () banked
 14425  0045A6  6182               	cpfslt	isdigit@c& (0+255),b
 14426  0045A8  D007               	goto	l5273
 14427                           
 14428                           ; BSR set to: 0
 14429  0045AA  0E2F               	movlw	47
 14430  0045AC  0100               	movlb	0	; () banked
 14431  0045AE  6582               	cpfsgt	isdigit@c& (0+255),b
 14432  0045B0  D003               	goto	l5273
 14433                           
 14434                           ; BSR set to: 0
 14435  0045B2  0E01               	movlw	1
 14436  0045B4  0100               	movlb	0	; () banked
 14437  0045B6  6F81               	movwf	_isdigit$1939& (0+255),b
 14438  0045B8                     l5273:
 14439                           
 14440                           ; BSR set to: 0
 14441  0045B8  C081  F080         	movff	_isdigit$1939,??_isdigit
 14442  0045BC  0100               	movlb	0	; () banked
 14443  0045BE  3180               	rrcf	??_isdigit& (0+255),w,b
 14444  0045C0  0012               	return	
 14445  0045C2                     __end_of_isdigit:
 14446                           	opt stack 0
 14447                           tblptru	equ	0xFF8
 14448                           tblptrh	equ	0xFF7
 14449                           tblptrl	equ	0xFF6
 14450                           tablat	equ	0xFF5
 14451                           prodh	equ	0xFF4
 14452                           prodl	equ	0xFF3
 14453                           intcon	equ	0xFF2
 14454                           intcon2	equ	0xFF1
 14455                           intcon3	equ	0xFF0
 14456                           indf0	equ	0xFEF
 14457                           postinc0	equ	0xFEE
 14458                           fsr0h	equ	0xFEA
 14459                           fsr0l	equ	0xFE9
 14460                           wreg	equ	0xFE8
 14461                           postdec1	equ	0xFE5
 14462                           fsr1l	equ	0xFE1
 14463                           indf2	equ	0xFDF
 14464                           postinc2	equ	0xFDE
 14465                           postdec2	equ	0xFDD
 14466                           fsr2h	equ	0xFDA
 14467                           fsr2l	equ	0xFD9
 14468                           status	equ	0xFD8
 14469                           
 14470 ;; *************** function ___wmul *****************
 14471 ;; Defined at:
 14472 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 14473 ;; Parameters:    Size  Location     Type
 14474 ;;  multiplier      2    0[BANK0 ] unsigned int 
 14475 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 14476 ;; Auto vars:     Size  Location     Type
 14477 ;;  product         2    4[BANK0 ] unsigned int 
 14478 ;; Return value:  Size  Location     Type
 14479 ;;                  2    0[BANK0 ] unsigned int 
 14480 ;; Registers used:
 14481 ;;		wreg, status,2, status,0, prodl, prodh
 14482 ;; Tracked objects:
 14483 ;;		On entry : 0/0
 14484 ;;		On exit  : 0/0
 14485 ;;		Unchanged: 0/0
 14486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14487 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14488 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14489 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14490 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14491 ;;Total ram usage:        6 bytes
 14492 ;; Hardware stack levels used:    1
 14493 ;; Hardware stack levels required when called:    7
 14494 ;; This function calls:
 14495 ;;		Nothing
 14496 ;; This function is called by:
 14497 ;;		_printf
 14498 ;; This function uses a non-reentrant model
 14499 ;;
 14500                           
 14501                           	psect	text50
 14502  0042CC                     __ptext50:
 14503                           	opt stack 0
 14504  0042CC                     ___wmul:
 14505                           	opt stack 19
 14506                           
 14507                           ; BSR set to: 0
 14508                           ;incstack = 0
 14509  0042CC  0100               	movlb	0	; () banked
 14510  0042CE  5180               	movf	___wmul@multiplier& (0+255),w,b
 14511  0042D0  0100               	movlb	0	; () banked
 14512  0042D2  0382               	mulwf	___wmul@multiplicand& (0+255),b
 14513  0042D4  CFF3 F084          	movff	prodl,___wmul@product
 14514  0042D8  CFF4 F085          	movff	prodh,___wmul@product+1
 14515  0042DC  0100               	movlb	0	; () banked
 14516  0042DE  5180               	movf	___wmul@multiplier& (0+255),w,b
 14517  0042E0  0100               	movlb	0	; () banked
 14518  0042E2  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 14519  0042E4  50F3               	movf	prodl,w,c
 14520  0042E6  0100               	movlb	0	; () banked
 14521  0042E8  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 14522  0042EA  0100               	movlb	0	; () banked
 14523  0042EC  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
 14524  0042EE  0100               	movlb	0	; () banked
 14525  0042F0  0382               	mulwf	___wmul@multiplicand& (0+255),b
 14526  0042F2  50F3               	movf	prodl,w,c
 14527  0042F4  0100               	movlb	0	; () banked
 14528  0042F6  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 14529                           
 14530                           ; BSR set to: 0
 14531  0042F8  C084  F080         	movff	___wmul@product,?___wmul
 14532  0042FC  C085  F081         	movff	___wmul@product+1,?___wmul+1
 14533  004300  0012               	return	
 14534  004302                     __end_of___wmul:
 14535                           	opt stack 0
 14536                           tblptru	equ	0xFF8
 14537                           tblptrh	equ	0xFF7
 14538                           tblptrl	equ	0xFF6
 14539                           tablat	equ	0xFF5
 14540                           prodh	equ	0xFF4
 14541                           prodl	equ	0xFF3
 14542                           intcon	equ	0xFF2
 14543                           intcon2	equ	0xFF1
 14544                           intcon3	equ	0xFF0
 14545                           indf0	equ	0xFEF
 14546                           postinc0	equ	0xFEE
 14547                           fsr0h	equ	0xFEA
 14548                           fsr0l	equ	0xFE9
 14549                           wreg	equ	0xFE8
 14550                           postdec1	equ	0xFE5
 14551                           fsr1l	equ	0xFE1
 14552                           indf2	equ	0xFDF
 14553                           postinc2	equ	0xFDE
 14554                           postdec2	equ	0xFDD
 14555                           fsr2h	equ	0xFDA
 14556                           fsr2l	equ	0xFD9
 14557                           status	equ	0xFD8
 14558                           
 14559 ;; *************** function ___lwmod *****************
 14560 ;; Defined at:
 14561 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 14562 ;; Parameters:    Size  Location     Type
 14563 ;;  dividend        2    7[BANK0 ] unsigned int 
 14564 ;;  divisor         2    9[BANK0 ] unsigned int 
 14565 ;; Auto vars:     Size  Location     Type
 14566 ;;  counter         1   11[BANK0 ] unsigned char 
 14567 ;; Return value:  Size  Location     Type
 14568 ;;                  2    7[BANK0 ] unsigned int 
 14569 ;; Registers used:
 14570 ;;		wreg, status,2, status,0
 14571 ;; Tracked objects:
 14572 ;;		On entry : 0/0
 14573 ;;		On exit  : 0/0
 14574 ;;		Unchanged: 0/0
 14575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14576 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14577 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14578 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14579 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14580 ;;Total ram usage:        5 bytes
 14581 ;; Hardware stack levels used:    1
 14582 ;; Hardware stack levels required when called:    7
 14583 ;; This function calls:
 14584 ;;		Nothing
 14585 ;; This function is called by:
 14586 ;;		_printf
 14587 ;; This function uses a non-reentrant model
 14588 ;;
 14589                           
 14590                           	psect	text51
 14591  003E4A                     __ptext51:
 14592                           	opt stack 0
 14593  003E4A                     ___lwmod:
 14594                           	opt stack 19
 14595                           
 14596                           ; BSR set to: 0
 14597                           ;incstack = 0
 14598  003E4A  0100               	movlb	0	; () banked
 14599  003E4C  5189               	movf	___lwmod@divisor& (0+255),w,b
 14600  003E4E  0100               	movlb	0	; () banked
 14601  003E50  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 14602  003E52  B4D8               	btfsc	status,2,c
 14603  003E54  D026               	goto	l1706
 14604                           
 14605                           ; BSR set to: 0
 14606  003E56  0E01               	movlw	1
 14607  003E58  0100               	movlb	0	; () banked
 14608  003E5A  6F8B               	movwf	___lwmod@counter& (0+255),b
 14609  003E5C  D006               	goto	l5311
 14610  003E5E                     l5309:
 14611                           
 14612                           ; BSR set to: 0
 14613  003E5E  0100               	movlb	0	; () banked
 14614  003E60  90D8               	bcf	status,0,c
 14615  003E62  3789               	rlcf	___lwmod@divisor& (0+255),f,b
 14616  003E64  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 14617  003E66  0100               	movlb	0	; () banked
 14618  003E68  2B8B               	incf	___lwmod@counter& (0+255),f,b
 14619  003E6A                     l5311:
 14620                           
 14621                           ; BSR set to: 0
 14622  003E6A  0100               	movlb	0	; () banked
 14623  003E6C  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 14624  003E6E  D7F7               	goto	l5309
 14625  003E70                     l5313:
 14626                           
 14627                           ; BSR set to: 0
 14628  003E70  0100               	movlb	0	; () banked
 14629  003E72  5189               	movf	___lwmod@divisor& (0+255),w,b
 14630  003E74  0100               	movlb	0	; () banked
 14631  003E76  5D87               	subwf	___lwmod@dividend& (0+255),w,b
 14632  003E78  0100               	movlb	0	; () banked
 14633  003E7A  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 14634  003E7C  0100               	movlb	0	; () banked
 14635  003E7E  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 14636  003E80  A0D8               	btfss	status,0,c
 14637  003E82  D008               	goto	l5317
 14638                           
 14639                           ; BSR set to: 0
 14640  003E84  0100               	movlb	0	; () banked
 14641  003E86  5189               	movf	___lwmod@divisor& (0+255),w,b
 14642  003E88  0100               	movlb	0	; () banked
 14643  003E8A  5F87               	subwf	___lwmod@dividend& (0+255),f,b
 14644  003E8C  0100               	movlb	0	; () banked
 14645  003E8E  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 14646  003E90  0100               	movlb	0	; () banked
 14647  003E92  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 14648  003E94                     l5317:
 14649                           
 14650                           ; BSR set to: 0
 14651  003E94  0100               	movlb	0	; () banked
 14652  003E96  90D8               	bcf	status,0,c
 14653  003E98  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 14654  003E9A  3389               	rrcf	___lwmod@divisor& (0+255),f,b
 14655                           
 14656                           ; BSR set to: 0
 14657  003E9C  0100               	movlb	0	; () banked
 14658  003E9E  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
 14659  003EA0  D7E7               	goto	l5313
 14660  003EA2                     l1706:
 14661                           
 14662                           ; BSR set to: 0
 14663  003EA2  C087  F087         	movff	___lwmod@dividend,?___lwmod
 14664  003EA6  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
 14665                           
 14666                           ; BSR set to: 0
 14667  003EAA  0012               	return		;funcret
 14668  003EAC                     __end_of___lwmod:
 14669                           	opt stack 0
 14670                           tblptru	equ	0xFF8
 14671                           tblptrh	equ	0xFF7
 14672                           tblptrl	equ	0xFF6
 14673                           tablat	equ	0xFF5
 14674                           prodh	equ	0xFF4
 14675                           prodl	equ	0xFF3
 14676                           intcon	equ	0xFF2
 14677                           intcon2	equ	0xFF1
 14678                           intcon3	equ	0xFF0
 14679                           indf0	equ	0xFEF
 14680                           postinc0	equ	0xFEE
 14681                           fsr0h	equ	0xFEA
 14682                           fsr0l	equ	0xFE9
 14683                           wreg	equ	0xFE8
 14684                           postdec1	equ	0xFE5
 14685                           fsr1l	equ	0xFE1
 14686                           indf2	equ	0xFDF
 14687                           postinc2	equ	0xFDE
 14688                           postdec2	equ	0xFDD
 14689                           fsr2h	equ	0xFDA
 14690                           fsr2l	equ	0xFD9
 14691                           status	equ	0xFD8
 14692                           
 14693 ;; *************** function ___lwdiv *****************
 14694 ;; Defined at:
 14695 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 14696 ;; Parameters:    Size  Location     Type
 14697 ;;  dividend        2    0[BANK0 ] unsigned int 
 14698 ;;  divisor         2    2[BANK0 ] unsigned int 
 14699 ;; Auto vars:     Size  Location     Type
 14700 ;;  quotient        2    4[BANK0 ] unsigned int 
 14701 ;;  counter         1    6[BANK0 ] unsigned char 
 14702 ;; Return value:  Size  Location     Type
 14703 ;;                  2    0[BANK0 ] unsigned int 
 14704 ;; Registers used:
 14705 ;;		wreg, status,2, status,0
 14706 ;; Tracked objects:
 14707 ;;		On entry : 0/0
 14708 ;;		On exit  : 0/0
 14709 ;;		Unchanged: 0/0
 14710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14711 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14712 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14713 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14714 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14715 ;;Total ram usage:        7 bytes
 14716 ;; Hardware stack levels used:    1
 14717 ;; Hardware stack levels required when called:    7
 14718 ;; This function calls:
 14719 ;;		Nothing
 14720 ;; This function is called by:
 14721 ;;		_printf
 14722 ;; This function uses a non-reentrant model
 14723 ;;
 14724                           
 14725                           	psect	text52
 14726  003C18                     __ptext52:
 14727                           	opt stack 0
 14728  003C18                     ___lwdiv:
 14729                           	opt stack 19
 14730                           
 14731                           ; BSR set to: 0
 14732                           ;incstack = 0
 14733  003C18  0E00               	movlw	0
 14734  003C1A  0100               	movlb	0	; () banked
 14735  003C1C  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
 14736  003C1E  0E00               	movlw	0
 14737  003C20  6F84               	movwf	___lwdiv@quotient& (0+255),b
 14738                           
 14739                           ; BSR set to: 0
 14740  003C22  0100               	movlb	0	; () banked
 14741  003C24  5182               	movf	___lwdiv@divisor& (0+255),w,b
 14742  003C26  0100               	movlb	0	; () banked
 14743  003C28  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 14744  003C2A  B4D8               	btfsc	status,2,c
 14745  003C2C  D02C               	goto	l1696
 14746                           
 14747                           ; BSR set to: 0
 14748  003C2E  0E01               	movlw	1
 14749  003C30  0100               	movlb	0	; () banked
 14750  003C32  6F86               	movwf	___lwdiv@counter& (0+255),b
 14751  003C34  D006               	goto	l5291
 14752  003C36                     l5289:
 14753                           
 14754                           ; BSR set to: 0
 14755  003C36  0100               	movlb	0	; () banked
 14756  003C38  90D8               	bcf	status,0,c
 14757  003C3A  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
 14758  003C3C  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 14759  003C3E  0100               	movlb	0	; () banked
 14760  003C40  2B86               	incf	___lwdiv@counter& (0+255),f,b
 14761  003C42                     l5291:
 14762                           
 14763                           ; BSR set to: 0
 14764  003C42  0100               	movlb	0	; () banked
 14765  003C44  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 14766  003C46  D7F7               	goto	l5289
 14767  003C48                     l5293:
 14768                           
 14769                           ; BSR set to: 0
 14770  003C48  0100               	movlb	0	; () banked
 14771  003C4A  90D8               	bcf	status,0,c
 14772  003C4C  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
 14773  003C4E  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 14774                           
 14775                           ; BSR set to: 0
 14776  003C50  0100               	movlb	0	; () banked
 14777  003C52  5182               	movf	___lwdiv@divisor& (0+255),w,b
 14778  003C54  0100               	movlb	0	; () banked
 14779  003C56  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
 14780  003C58  0100               	movlb	0	; () banked
 14781  003C5A  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 14782  003C5C  0100               	movlb	0	; () banked
 14783  003C5E  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 14784  003C60  A0D8               	btfss	status,0,c
 14785  003C62  D00A               	goto	l5301
 14786                           
 14787                           ; BSR set to: 0
 14788  003C64  0100               	movlb	0	; () banked
 14789  003C66  5182               	movf	___lwdiv@divisor& (0+255),w,b
 14790  003C68  0100               	movlb	0	; () banked
 14791  003C6A  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
 14792  003C6C  0100               	movlb	0	; () banked
 14793  003C6E  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 14794  003C70  0100               	movlb	0	; () banked
 14795  003C72  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 14796                           
 14797                           ; BSR set to: 0
 14798  003C74  0100               	movlb	0	; () banked
 14799  003C76  8184               	bsf	___lwdiv@quotient& (0+255),0,b
 14800  003C78                     l5301:
 14801                           
 14802                           ; BSR set to: 0
 14803  003C78  0100               	movlb	0	; () banked
 14804  003C7A  90D8               	bcf	status,0,c
 14805  003C7C  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 14806  003C7E  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
 14807                           
 14808                           ; BSR set to: 0
 14809  003C80  0100               	movlb	0	; () banked
 14810  003C82  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
 14811  003C84  D7E1               	goto	l5293
 14812  003C86                     l1696:
 14813                           
 14814                           ; BSR set to: 0
 14815  003C86  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
 14816  003C8A  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
 14817                           
 14818                           ; BSR set to: 0
 14819  003C8E  0012               	return		;funcret
 14820  003C90                     __end_of___lwdiv:
 14821                           	opt stack 0
 14822                           tblptru	equ	0xFF8
 14823                           tblptrh	equ	0xFF7
 14824                           tblptrl	equ	0xFF6
 14825                           tablat	equ	0xFF5
 14826                           prodh	equ	0xFF4
 14827                           prodl	equ	0xFF3
 14828                           intcon	equ	0xFF2
 14829                           intcon2	equ	0xFF1
 14830                           intcon3	equ	0xFF0
 14831                           indf0	equ	0xFEF
 14832                           postinc0	equ	0xFEE
 14833                           fsr0h	equ	0xFEA
 14834                           fsr0l	equ	0xFE9
 14835                           wreg	equ	0xFE8
 14836                           postdec1	equ	0xFE5
 14837                           fsr1l	equ	0xFE1
 14838                           indf2	equ	0xFDF
 14839                           postinc2	equ	0xFDE
 14840                           postdec2	equ	0xFDD
 14841                           fsr2h	equ	0xFDA
 14842                           fsr2l	equ	0xFD9
 14843                           status	equ	0xFD8
 14844                           
 14845 ;; *************** function _lcdInst *****************
 14846 ;; Defined at:
 14847 ;;		line 15 in file "lcd.c"
 14848 ;; Parameters:    Size  Location     Type
 14849 ;;  data            1    wreg     unsigned char 
 14850 ;; Auto vars:     Size  Location     Type
 14851 ;;  data            1    2[BANK0 ] unsigned char 
 14852 ;; Return value:  Size  Location     Type
 14853 ;;                  1    wreg      void 
 14854 ;; Registers used:
 14855 ;;		wreg, status,2, status,0, cstack
 14856 ;; Tracked objects:
 14857 ;;		On entry : 0/0
 14858 ;;		On exit  : 0/0
 14859 ;;		Unchanged: 0/0
 14860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14861 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14862 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14863 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14864 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14865 ;;Total ram usage:        1 bytes
 14866 ;; Hardware stack levels used:    1
 14867 ;; Hardware stack levels required when called:    8
 14868 ;; This function calls:
 14869 ;;		_lcdNibble
 14870 ;; This function is called by:
 14871 ;;		_UI
 14872 ;;		_change_state_to_menu_start
 14873 ;;		_change_state_to_menu_12
 14874 ;;		_change_state_to_menu_22
 14875 ;;		_initLCD
 14876 ;;		_printRTC
 14877 ;;		_Loading
 14878 ;;		_EEPROM_write
 14879 ;;		_Test
 14880 ;;		_algorithmTest
 14881 ;;		_sensorTest
 14882 ;;		_actuatorTest
 14883 ;;		_BothServos
 14884 ;;		_PortTestA5
 14885 ;;		_SolenoidTestA5
 14886 ;;		_ToggleTestA5
 14887 ;; This function uses a non-reentrant model
 14888 ;;
 14889                           
 14890                           	psect	text53
 14891  004782                     __ptext53:
 14892                           	opt stack 0
 14893  004782                     _lcdInst:
 14894                           	opt stack 20
 14895                           
 14896                           ; BSR set to: 0
 14897                           ;incstack = 0
 14898                           ;lcdInst@data stored from wreg
 14899  004782  0100               	movlb	0	; () banked
 14900  004784  6F82               	movwf	lcdInst@data& (0+255),b
 14901                           
 14902                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 14903  004786  948C               	bcf	3980,2,c	;volatile
 14904                           
 14905                           ;lcd.c: 17: lcdNibble(data);
 14906  004788  0100               	movlb	0	; () banked
 14907  00478A  5182               	movf	lcdInst@data& (0+255),w,b
 14908  00478C  ECF1  F01E         	call	_lcdNibble
 14909  004790  0012               	return		;funcret
 14910  004792                     __end_of_lcdInst:
 14911                           	opt stack 0
 14912                           tblptru	equ	0xFF8
 14913                           tblptrh	equ	0xFF7
 14914                           tblptrl	equ	0xFF6
 14915                           tablat	equ	0xFF5
 14916                           prodh	equ	0xFF4
 14917                           prodl	equ	0xFF3
 14918                           intcon	equ	0xFF2
 14919                           intcon2	equ	0xFF1
 14920                           intcon3	equ	0xFF0
 14921                           indf0	equ	0xFEF
 14922                           postinc0	equ	0xFEE
 14923                           fsr0h	equ	0xFEA
 14924                           fsr0l	equ	0xFE9
 14925                           wreg	equ	0xFE8
 14926                           postdec1	equ	0xFE5
 14927                           fsr1l	equ	0xFE1
 14928                           indf2	equ	0xFDF
 14929                           postinc2	equ	0xFDE
 14930                           postdec2	equ	0xFDD
 14931                           fsr2h	equ	0xFDA
 14932                           fsr2l	equ	0xFD9
 14933                           status	equ	0xFD8
 14934                           
 14935 ;; *************** function _lcdNibble *****************
 14936 ;; Defined at:
 14937 ;;		line 25 in file "lcd.c"
 14938 ;; Parameters:    Size  Location     Type
 14939 ;;  data            1    wreg     unsigned char 
 14940 ;; Auto vars:     Size  Location     Type
 14941 ;;  data            1    1[BANK0 ] unsigned char 
 14942 ;;  temp            1    0[BANK0 ] unsigned char 
 14943 ;; Return value:  Size  Location     Type
 14944 ;;                  1    wreg      void 
 14945 ;; Registers used:
 14946 ;;		wreg, status,2, status,0
 14947 ;; Tracked objects:
 14948 ;;		On entry : 0/0
 14949 ;;		On exit  : 0/0
 14950 ;;		Unchanged: 0/0
 14951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14952 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14953 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14954 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14955 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14956 ;;Total ram usage:        2 bytes
 14957 ;; Hardware stack levels used:    1
 14958 ;; Hardware stack levels required when called:    7
 14959 ;; This function calls:
 14960 ;;		Nothing
 14961 ;; This function is called by:
 14962 ;;		_lcdInst
 14963 ;;		_putch
 14964 ;; This function uses a non-reentrant model
 14965 ;;
 14966                           
 14967                           	psect	text54
 14968  003DE2                     __ptext54:
 14969                           	opt stack 0
 14970  003DE2                     _lcdNibble:
 14971                           	opt stack 20
 14972                           
 14973                           ;incstack = 0
 14974                           ;lcdNibble@data stored from wreg
 14975  003DE2  0100               	movlb	0	; () banked
 14976  003DE4  6F81               	movwf	lcdNibble@data& (0+255),b
 14977                           
 14978                           ;lcd.c: 27: char temp = data & 0xF0;
 14979  003DE6  0100               	movlb	0	; () banked
 14980  003DE8  5181               	movf	lcdNibble@data& (0+255),w,b
 14981  003DEA  0BF0               	andlw	240
 14982  003DEC  0100               	movlb	0	; () banked
 14983  003DEE  6F80               	movwf	lcdNibble@temp& (0+255),b
 14984                           
 14985                           ;lcd.c: 28: LATD = LATD & 0x0F;
 14986  003DF0  508C               	movf	3980,w,c	;volatile
 14987  003DF2  0B0F               	andlw	15
 14988  003DF4  6E8C               	movwf	3980,c	;volatile
 14989                           
 14990                           ;lcd.c: 29: LATD = temp | LATD;
 14991  003DF6  0100               	movlb	0	; () banked
 14992  003DF8  5180               	movf	lcdNibble@temp& (0+255),w,b
 14993  003DFA  108C               	iorwf	3980,w,c	;volatile
 14994  003DFC  6E8C               	movwf	3980,c	;volatile
 14995                           
 14996                           ; BSR set to: 0
 14997                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 14998  003DFE  868C               	bsf	3980,3,c	;volatile
 14999                           
 15000                           ; BSR set to: 0
 15001                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 15002  003E00  0E42               	movlw	66
 15003  003E02                     u8207:
 15004  003E02  2EE8               	decfsz	wreg,f,c
 15005  003E04  D7FE               	bra	u8207
 15006  003E06  D000               	nop2	
 15007                           
 15008                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 15009  003E08  968C               	bcf	3980,3,c	;volatile
 15010                           
 15011                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 15012  003E0A  0E42               	movlw	66
 15013  003E0C                     u8217:
 15014  003E0C  2EE8               	decfsz	wreg,f,c
 15015  003E0E  D7FE               	bra	u8217
 15016  003E10  D000               	nop2	
 15017                           
 15018                           ;lcd.c: 36: data = data << 4;
 15019  003E12  0100               	movlb	0	; () banked
 15020  003E14  3981               	swapf	lcdNibble@data& (0+255),w,b
 15021  003E16  0BF0               	andlw	240
 15022  003E18  0100               	movlb	0	; () banked
 15023  003E1A  6F81               	movwf	lcdNibble@data& (0+255),b
 15024                           
 15025                           ;lcd.c: 38: temp = data & 0xF0;
 15026  003E1C  0100               	movlb	0	; () banked
 15027  003E1E  5181               	movf	lcdNibble@data& (0+255),w,b
 15028  003E20  0BF0               	andlw	240
 15029  003E22  0100               	movlb	0	; () banked
 15030  003E24  6F80               	movwf	lcdNibble@temp& (0+255),b
 15031                           
 15032                           ;lcd.c: 39: LATD = LATD & 0x0F;
 15033  003E26  508C               	movf	3980,w,c	;volatile
 15034  003E28  0B0F               	andlw	15
 15035  003E2A  6E8C               	movwf	3980,c	;volatile
 15036                           
 15037                           ;lcd.c: 40: LATD = temp | LATD;
 15038  003E2C  0100               	movlb	0	; () banked
 15039  003E2E  5180               	movf	lcdNibble@temp& (0+255),w,b
 15040  003E30  108C               	iorwf	3980,w,c	;volatile
 15041  003E32  6E8C               	movwf	3980,c	;volatile
 15042                           
 15043                           ; BSR set to: 0
 15044                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 15045  003E34  868C               	bsf	3980,3,c	;volatile
 15046                           
 15047                           ; BSR set to: 0
 15048                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 15049  003E36  0E42               	movlw	66
 15050  003E38                     u8227:
 15051  003E38  2EE8               	decfsz	wreg,f,c
 15052  003E3A  D7FE               	bra	u8227
 15053  003E3C  D000               	nop2	
 15054                           
 15055                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 15056  003E3E  968C               	bcf	3980,3,c	;volatile
 15057                           
 15058                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 15059  003E40  0E42               	movlw	66
 15060  003E42                     u8237:
 15061  003E42  2EE8               	decfsz	wreg,f,c
 15062  003E44  D7FE               	bra	u8237
 15063  003E46  D000               	nop2	
 15064  003E48  0012               	return		;funcret
 15065  003E4A                     __end_of_lcdNibble:
 15066                           	opt stack 0
 15067                           tblptru	equ	0xFF8
 15068                           tblptrh	equ	0xFF7
 15069                           tblptrl	equ	0xFF6
 15070                           tablat	equ	0xFF5
 15071                           prodh	equ	0xFF4
 15072                           prodl	equ	0xFF3
 15073                           intcon	equ	0xFF2
 15074                           intcon2	equ	0xFF1
 15075                           intcon3	equ	0xFF0
 15076                           indf0	equ	0xFEF
 15077                           postinc0	equ	0xFEE
 15078                           fsr0h	equ	0xFEA
 15079                           fsr0l	equ	0xFE9
 15080                           wreg	equ	0xFE8
 15081                           postdec1	equ	0xFE5
 15082                           fsr1l	equ	0xFE1
 15083                           indf2	equ	0xFDF
 15084                           postinc2	equ	0xFDE
 15085                           postdec2	equ	0xFDD
 15086                           fsr2h	equ	0xFDA
 15087                           fsr2l	equ	0xFD9
 15088                           status	equ	0xFD8
 15089                           
 15090 ;; *************** function _initServos *****************
 15091 ;; Defined at:
 15092 ;;		line 263 in file "sort.c"
 15093 ;; Parameters:    Size  Location     Type
 15094 ;;		None
 15095 ;; Auto vars:     Size  Location     Type
 15096 ;;		None
 15097 ;; Return value:  Size  Location     Type
 15098 ;;                  1    wreg      void 
 15099 ;; Registers used:
 15100 ;;		wreg, status,2, status,0, cstack
 15101 ;; Tracked objects:
 15102 ;;		On entry : 0/0
 15103 ;;		On exit  : 0/0
 15104 ;;		Unchanged: 0/0
 15105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15106 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15107 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15108 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15109 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15110 ;;Total ram usage:        1 bytes
 15111 ;; Hardware stack levels used:    1
 15112 ;; Hardware stack levels required when called:    8
 15113 ;; This function calls:
 15114 ;;		_updateServoPosition
 15115 ;; This function is called by:
 15116 ;;		_Loading
 15117 ;;		_BothServos
 15118 ;; This function uses a non-reentrant model
 15119 ;;
 15120                           
 15121                           	psect	text55
 15122  003F68                     __ptext55:
 15123                           	opt stack 0
 15124  003F68                     _initServos:
 15125                           	opt stack 20
 15126                           
 15127                           ;sort.c: 264: updateServoPosition(1200, 1);
 15128                           
 15129                           ;incstack = 0
 15130  003F68  0E04               	movlw	4
 15131  003F6A  0100               	movlb	0	; () banked
 15132  003F6C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15133  003F6E  0EB0               	movlw	176
 15134  003F70  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15135  003F72  0E00               	movlw	0
 15136  003F74  0100               	movlb	0	; () banked
 15137  003F76  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15138  003F78  0E01               	movlw	1
 15139  003F7A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15140  003F7C  EC48  F01E         	call	_updateServoPosition	;wreg free
 15141                           
 15142                           ;sort.c: 265: updateServoPosition(1190, 3);
 15143  003F80  0E04               	movlw	4
 15144  003F82  0100               	movlb	0	; () banked
 15145  003F84  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15146  003F86  0EA6               	movlw	166
 15147  003F88  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15148  003F8A  0E00               	movlw	0
 15149  003F8C  0100               	movlb	0	; () banked
 15150  003F8E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15151  003F90  0E03               	movlw	3
 15152  003F92  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15153  003F94  EC48  F01E         	call	_updateServoPosition	;wreg free
 15154                           
 15155                           ;sort.c: 266: TMR1ON = 1;
 15156  003F98  80CD               	bsf	4045,0,c	;volatile
 15157                           
 15158                           ;sort.c: 267: was_low_1 = 0;
 15159  003F9A  0E00               	movlw	0
 15160  003F9C  6E7A               	movwf	_was_low_1+1,c	;volatile
 15161  003F9E  0E00               	movlw	0
 15162  003FA0  6E79               	movwf	_was_low_1,c	;volatile
 15163                           
 15164                           ;sort.c: 268: _delay((unsigned long)((5)*(32000000/4000.0)));
 15165  003FA2  0E34               	movlw	52
 15166  003FA4  0100               	movlb	0	; () banked
 15167  003FA6  6F88               	movwf	??_initServos& (0+255),b
 15168  003FA8  0EF1               	movlw	241
 15169  003FAA                     u8247:
 15170  003FAA  2EE8               	decfsz	wreg,f,c
 15171  003FAC  D7FE               	bra	u8247
 15172  003FAE  2F88               	decfsz	??_initServos& (0+255),f,b
 15173  003FB0  D7FC               	bra	u8247
 15174  003FB2  D000               	nop2	
 15175                           
 15176                           ;sort.c: 269: TMR3ON = 1;
 15177  003FB4  80B1               	bsf	4017,0,c	;volatile
 15178                           
 15179                           ;sort.c: 270: was_low_3 = 0;
 15180  003FB6  0E00               	movlw	0
 15181  003FB8  6E7C               	movwf	_was_low_3+1,c	;volatile
 15182  003FBA  0E00               	movlw	0
 15183  003FBC  6E7B               	movwf	_was_low_3,c	;volatile
 15184                           
 15185                           ;sort.c: 271: LATCbits.LATC0 = 1;
 15186  003FBE  808B               	bsf	3979,0,c	;volatile
 15187  003FC0  0012               	return		;funcret
 15188  003FC2                     __end_of_initServos:
 15189                           	opt stack 0
 15190                           tblptru	equ	0xFF8
 15191                           tblptrh	equ	0xFF7
 15192                           tblptrl	equ	0xFF6
 15193                           tablat	equ	0xFF5
 15194                           prodh	equ	0xFF4
 15195                           prodl	equ	0xFF3
 15196                           intcon	equ	0xFF2
 15197                           intcon2	equ	0xFF1
 15198                           intcon3	equ	0xFF0
 15199                           indf0	equ	0xFEF
 15200                           postinc0	equ	0xFEE
 15201                           fsr0h	equ	0xFEA
 15202                           fsr0l	equ	0xFE9
 15203                           wreg	equ	0xFE8
 15204                           postdec1	equ	0xFE5
 15205                           fsr1l	equ	0xFE1
 15206                           indf2	equ	0xFDF
 15207                           postinc2	equ	0xFDE
 15208                           postdec2	equ	0xFDD
 15209                           fsr2h	equ	0xFDA
 15210                           fsr2l	equ	0xFD9
 15211                           status	equ	0xFD8
 15212                           
 15213 ;; *************** function _updateServoPosition *****************
 15214 ;; Defined at:
 15215 ;;		line 313 in file "sort.c"
 15216 ;; Parameters:    Size  Location     Type
 15217 ;;  time_us         2    0[BANK0 ] int 
 15218 ;;  timer           2    2[BANK0 ] int 
 15219 ;; Auto vars:     Size  Location     Type
 15220 ;;  my_time         2    6[BANK0 ] unsigned int 
 15221 ;; Return value:  Size  Location     Type
 15222 ;;                  1    wreg      void 
 15223 ;; Registers used:
 15224 ;;		wreg, status,2, status,0
 15225 ;; Tracked objects:
 15226 ;;		On entry : 0/0
 15227 ;;		On exit  : 0/0
 15228 ;;		Unchanged: 0/0
 15229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15230 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15231 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15232 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15233 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15234 ;;Total ram usage:        8 bytes
 15235 ;; Hardware stack levels used:    1
 15236 ;; Hardware stack levels required when called:    7
 15237 ;; This function calls:
 15238 ;;		Nothing
 15239 ;; This function is called by:
 15240 ;;		_Distribution
 15241 ;;		_initServos
 15242 ;;		_actuatorTest
 15243 ;;		_BothServos
 15244 ;; This function uses a non-reentrant model
 15245 ;;
 15246                           
 15247                           	psect	text56
 15248  003C90                     __ptext56:
 15249                           	opt stack 0
 15250  003C90                     _updateServoPosition:
 15251                           	opt stack 20
 15252                           
 15253                           ;sort.c: 314: unsigned int my_time = 65535 - time_us;
 15254                           
 15255                           ;incstack = 0
 15256  003C90  C080  F084         	movff	updateServoPosition@time_us,??_updateServoPosition
 15257  003C94  C081  F085         	movff	updateServoPosition@time_us+1,??_updateServoPosition+1
 15258  003C98  0100               	movlb	0	; () banked
 15259  003C9A  1F84               	comf	??_updateServoPosition& (0+255),f,b
 15260  003C9C  1F85               	comf	(??_updateServoPosition+1)& (0+255),f,b
 15261  003C9E  4B84               	infsnz	??_updateServoPosition& (0+255),f,b
 15262  003CA0  2B85               	incf	(??_updateServoPosition+1)& (0+255),f,b
 15263  003CA2  0EFF               	movlw	255
 15264  003CA4  0100               	movlb	0	; () banked
 15265  003CA6  2584               	addwf	??_updateServoPosition& (0+255),w,b
 15266  003CA8  0100               	movlb	0	; () banked
 15267  003CAA  6F86               	movwf	updateServoPosition@my_time& (0+255),b
 15268  003CAC  0EFF               	movlw	255
 15269  003CAE  0100               	movlb	0	; () banked
 15270  003CB0  2185               	addwfc	(??_updateServoPosition+1)& (0+255),w,b
 15271  003CB2  0100               	movlb	0	; () banked
 15272  003CB4  6F87               	movwf	(updateServoPosition@my_time+1)& (0+255),b
 15273                           
 15274                           ;sort.c: 315: switch(timer){
 15275  003CB6  D015               	goto	l5591
 15276  003CB8                     l5589:
 15277                           
 15278                           ; BSR set to: 0
 15279                           ;sort.c: 317: servoTimes[0] = my_time >> 8;
 15280  003CB8  0100               	movlb	0	; () banked
 15281  003CBA  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 15282  003CBC  0101               	movlb	1	; () banked
 15283  003CBE  6F1C               	movwf	_servoTimes& (0+255),b
 15284  003CC0  6B1D               	clrf	(_servoTimes+1)& (0+255),b
 15285                           
 15286                           ;sort.c: 318: servoTimes[1] = my_time & 0xFF;
 15287  003CC2  0100               	movlb	0	; () banked
 15288  003CC4  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 15289  003CC6  0101               	movlb	1	; () banked
 15290  003CC8  6F1E               	movwf	(_servoTimes+2)& (0+255),b
 15291  003CCA  6B1F               	clrf	(_servoTimes+3)& (0+255),b
 15292  003CCC                     l783:
 15293                           
 15294                           ;sort.c: 320: servoTimes[2] = my_time >> 8;
 15295  003CCC  0100               	movlb	0	; () banked
 15296  003CCE  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 15297  003CD0  0101               	movlb	1	; () banked
 15298  003CD2  6F20               	movwf	(_servoTimes+4)& (0+255),b
 15299  003CD4  6B21               	clrf	(_servoTimes+5)& (0+255),b
 15300                           
 15301                           ;sort.c: 321: servoTimes[3] = my_time & 0xFF;
 15302  003CD6  0100               	movlb	0	; () banked
 15303  003CD8  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 15304  003CDA  0101               	movlb	1	; () banked
 15305  003CDC  6F22               	movwf	(_servoTimes+6)& (0+255),b
 15306  003CDE  6B23               	clrf	(_servoTimes+7)& (0+255),b
 15307                           
 15308                           ;sort.c: 322: }
 15309  003CE0  0012               	return	
 15310  003CE2                     l5591:
 15311  003CE2  C082  F084         	movff	updateServoPosition@timer,??_updateServoPosition
 15312  003CE6  C083  F085         	movff	updateServoPosition@timer+1,??_updateServoPosition+1
 15313                           
 15314                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 15315                           ; Switch size 1, requested type "space"
 15316                           ; Number of cases is 1, Range of values is 0 to 0
 15317                           ; switch strategies available:
 15318                           ; Name         Instructions Cycles
 15319                           ; simple_byte            4     3 (average)
 15320                           ;	Chosen strategy is simple_byte
 15321  003CEA  0100               	movlb	0	; () banked
 15322  003CEC  5185               	movf	(??_updateServoPosition+1)& (0+255),w,b
 15323  003CEE  0A00               	xorlw	0	; case 0
 15324  003CF0  A4D8               	btfss	status,2,c
 15325  003CF2  0012               	return	
 15326                           
 15327                           ; BSR set to: 0
 15328                           ; Switch size 1, requested type "space"
 15329                           ; Number of cases is 2, Range of values is 1 to 3
 15330                           ; switch strategies available:
 15331                           ; Name         Instructions Cycles
 15332                           ; simple_byte            7     4 (average)
 15333                           ;	Chosen strategy is simple_byte
 15334  003CF4  0100               	movlb	0	; () banked
 15335  003CF6  5184               	movf	??_updateServoPosition& (0+255),w,b
 15336  003CF8  0A01               	xorlw	1	; case 1
 15337  003CFA  B4D8               	btfsc	status,2,c
 15338  003CFC  D7DD               	goto	l5589
 15339  003CFE  0A02               	xorlw	2	; case 3
 15340  003D00  A4D8               	btfss	status,2,c
 15341  003D02  0012               	return	
 15342  003D04  D7E3               	goto	l783
 15343  003D06                     __end_of_updateServoPosition:
 15344                           	opt stack 0
 15345                           tblptru	equ	0xFF8
 15346                           tblptrh	equ	0xFF7
 15347                           tblptrl	equ	0xFF6
 15348                           tablat	equ	0xFF5
 15349                           prodh	equ	0xFF4
 15350                           prodl	equ	0xFF3
 15351                           intcon	equ	0xFF2
 15352                           intcon2	equ	0xFF1
 15353                           intcon3	equ	0xFF0
 15354                           indf0	equ	0xFEF
 15355                           postinc0	equ	0xFEE
 15356                           fsr0h	equ	0xFEA
 15357                           fsr0l	equ	0xFE9
 15358                           wreg	equ	0xFE8
 15359                           postdec1	equ	0xFE5
 15360                           fsr1l	equ	0xFE1
 15361                           indf2	equ	0xFDF
 15362                           postinc2	equ	0xFDE
 15363                           postdec2	equ	0xFDD
 15364                           fsr2h	equ	0xFDA
 15365                           fsr2l	equ	0xFD9
 15366                           status	equ	0xFD8
 15367                           
 15368 ;; *************** function _handler *****************
 15369 ;; Defined at:
 15370 ;;		line 16 in file "interruptHandler.c"
 15371 ;; Parameters:    Size  Location     Type
 15372 ;;		None
 15373 ;; Auto vars:     Size  Location     Type
 15374 ;;		None
 15375 ;; Return value:  Size  Location     Type
 15376 ;;                  1    wreg      void 
 15377 ;; Registers used:
 15378 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15379 ;; Tracked objects:
 15380 ;;		On entry : 0/0
 15381 ;;		On exit  : 0/0
 15382 ;;		Unchanged: 0/0
 15383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15384 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15385 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15386 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15387 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15388 ;;Total ram usage:       16 bytes
 15389 ;; Hardware stack levels used:    1
 15390 ;; Hardware stack levels required when called:    6
 15391 ;; This function calls:
 15392 ;;		_printSortTimer
 15393 ;;		_updateMenu
 15394 ;; This function is called by:
 15395 ;;		Interrupt level 2
 15396 ;; This function uses a non-reentrant model
 15397 ;;
 15398                           
 15399                           	psect	intcode
 15400  000008                     __pintcode:
 15401                           	opt stack 0
 15402  000008                     _handler:
 15403                           	opt stack 18
 15404                           
 15405                           ;incstack = 0
 15406  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 15407  00000A  ED4E  F015         	call	int_func,f	;refresh shadow registers
 15408                           tblptru	equ	0xFF8
 15409                           tblptrh	equ	0xFF7
 15410                           tblptrl	equ	0xFF6
 15411                           tablat	equ	0xFF5
 15412                           prodh	equ	0xFF4
 15413                           prodl	equ	0xFF3
 15414                           intcon	equ	0xFF2
 15415                           intcon2	equ	0xFF1
 15416                           intcon3	equ	0xFF0
 15417                           indf0	equ	0xFEF
 15418                           postinc0	equ	0xFEE
 15419                           fsr0h	equ	0xFEA
 15420                           fsr0l	equ	0xFE9
 15421                           wreg	equ	0xFE8
 15422                           postdec1	equ	0xFE5
 15423                           fsr1l	equ	0xFE1
 15424                           indf2	equ	0xFDF
 15425                           postinc2	equ	0xFDE
 15426                           postdec2	equ	0xFDD
 15427                           fsr2h	equ	0xFDA
 15428                           fsr2l	equ	0xFD9
 15429                           status	equ	0xFD8
 15430                           
 15431                           	psect	intcode_body
 15432  002A9C                     __pintcode_body:
 15433                           	opt stack 18
 15434  002A9C                     int_func:
 15435                           	opt stack 18
 15436  002A9C  0006               	pop		; remove dummy address from shadow register refresh
 15437  002A9E  CFFA F04D          	movff	pclath,??_handler+2
 15438  002AA2  CFFB F04E          	movff	pclatu,??_handler+3
 15439  002AA6  CFE9 F04F          	movff	fsr0l,??_handler+4
 15440  002AAA  CFEA F050          	movff	fsr0h,??_handler+5
 15441  002AAE  CFE1 F051          	movff	fsr1l,??_handler+6
 15442  002AB2  CFE2 F052          	movff	fsr1h,??_handler+7
 15443  002AB6  CFD9 F053          	movff	fsr2l,??_handler+8
 15444  002ABA  CFDA F054          	movff	fsr2h,??_handler+9
 15445  002ABE  CFF3 F055          	movff	prodl,??_handler+10
 15446  002AC2  CFF4 F056          	movff	prodh,??_handler+11
 15447  002AC6  CFF6 F057          	movff	tblptrl,??_handler+12
 15448  002ACA  CFF7 F058          	movff	tblptrh,??_handler+13
 15449  002ACE  CFF8 F059          	movff	tblptru,??_handler+14
 15450  002AD2  CFF5 F05A          	movff	tablat,??_handler+15
 15451                           
 15452                           ;interruptHandler.c: 18: if(INT1IF){
 15453  002AD6  A0F0               	btfss	intcon3,0,c	;volatile
 15454  002AD8  D020               	goto	i2l8137
 15455                           
 15456                           ;interruptHandler.c: 19: INT1IF = 0;
 15457  002ADA  90F0               	bcf	intcon3,0,c	;volatile
 15458                           
 15459                           ;interruptHandler.c: 20: if(machine_state == UI_state) {
 15460  002ADC  0100               	movlb	0	; () banked
 15461  002ADE  51FC               	movf	_machine_state& (0+255),w,b
 15462  002AE0  A4D8               	btfss	status,2,c
 15463  002AE2  D01B               	goto	i2l8137
 15464                           
 15465                           ; BSR set to: 0
 15466                           ;interruptHandler.c: 21: input = keys[(PORTB & 0xF0) >> 4];
 15467  002AE4  3881               	swapf	3969,w,c	;volatile
 15468  002AE6  0B0F               	andlw	15
 15469  002AE8  0B0F               	andlw	15
 15470  002AEA  6E4B               	movwf	??_handler& (0+255),c
 15471  002AEC  6A4C               	clrf	(??_handler+1)& (0+255),c
 15472  002AEE  0E15               	movlw	low _keys
 15473  002AF0  244B               	addwf	??_handler,w,c
 15474  002AF2  6EF6               	movwf	tblptrl,c
 15475  002AF4  0EFB               	movlw	high _keys
 15476  002AF6  204C               	addwfc	??_handler+1,w,c
 15477  002AF8  6EF7               	movwf	tblptrh,c
 15478  002AFA                     	if	1	;There are 3 active tblptr bytes
 15479  002AFA  6AF8               	clrf	tblptru,c
 15480  002AFC  0E00               	movlw	low (__mediumconst shr (0+16))
 15481  002AFE  22F8               	addwfc	tblptru,f,c
 15482  002B00                     	endif
 15483  002B00  0008               	tblrd		*
 15484  002B02  CFF5 F07D          	movff	tablat,_input	;volatile
 15485                           
 15486                           ; BSR set to: 0
 15487                           ;interruptHandler.c: 23: if(input == '*'){
 15488  002B06  0E2A               	movlw	42
 15489  002B08  187D               	xorwf	_input,w,c	;volatile
 15490  002B0A  A4D8               	btfss	status,2,c
 15491  002B0C  D004               	goto	i2l8135
 15492                           
 15493                           ; BSR set to: 0
 15494                           ;interruptHandler.c: 24: machine_state = Testing_state;
 15495  002B0E  0E03               	movlw	3
 15496  002B10  0100               	movlb	0	; () banked
 15497  002B12  6FFC               	movwf	_machine_state& (0+255),b
 15498                           
 15499                           ;interruptHandler.c: 25: }
 15500  002B14  D002               	goto	i2l8137
 15501  002B16                     i2l8135:
 15502                           
 15503                           ; BSR set to: 0
 15504                           ;interruptHandler.c: 26: else{
 15505                           ;interruptHandler.c: 27: updateMenu();
 15506  002B16  ECE7  F010         	call	_updateMenu	;wreg free
 15507  002B1A                     i2l8137:
 15508                           
 15509                           ;interruptHandler.c: 28: }
 15510                           ;interruptHandler.c: 29: }
 15511                           ;interruptHandler.c: 30: }
 15512                           ;interruptHandler.c: 33: if(TMR0IF){
 15513  002B1A  A4F2               	btfss	intcon,2,c	;volatile
 15514  002B1C  D00C               	goto	i2l8151
 15515                           
 15516                           ;interruptHandler.c: 34: TMR0IF = 0;
 15517  002B1E  94F2               	bcf	intcon,2,c	;volatile
 15518                           
 15519                           ;interruptHandler.c: 35: if(machine_state == Sorting_state){
 15520  002B20  0100               	movlb	0	; () banked
 15521  002B22  05FC               	decf	_machine_state& (0+255),w,b
 15522  002B24  A4D8               	btfss	status,2,c
 15523  002B26  D007               	goto	i2l8151
 15524                           
 15525                           ; BSR set to: 0
 15526                           ;interruptHandler.c: 36: printSortTimer();
 15527  002B28  EC62  F013         	call	_printSortTimer	;wreg free
 15528                           
 15529                           ;interruptHandler.c: 38: TMR0H = 0b10000101;
 15530  002B2C  0E85               	movlw	133
 15531  002B2E  6ED7               	movwf	4055,c	;volatile
 15532                           
 15533                           ;interruptHandler.c: 39: TMR0L = 0b11101110;
 15534  002B30  0EEE               	movlw	238
 15535  002B32  6ED6               	movwf	4054,c	;volatile
 15536                           
 15537                           ;interruptHandler.c: 40: TMR0ON = 1;
 15538  002B34  8ED5               	bsf	4053,7,c	;volatile
 15539  002B36                     i2l8151:
 15540                           
 15541                           ;interruptHandler.c: 41: }
 15542                           ;interruptHandler.c: 42: }
 15543                           ;interruptHandler.c: 45: if(TMR1IF){
 15544  002B36  A09E               	btfss	3998,0,c	;volatile
 15545  002B38  D024               	goto	i2l8175
 15546                           
 15547                           ;interruptHandler.c: 46: TMR1IF = 0;
 15548  002B3A  909E               	bcf	3998,0,c	;volatile
 15549                           
 15550                           ;interruptHandler.c: 47: TMR1ON = 0;
 15551  002B3C  90CD               	bcf	4045,0,c	;volatile
 15552                           
 15553                           ;interruptHandler.c: 48: if(machine_state == Sorting_state){
 15554  002B3E  0100               	movlb	0	; () banked
 15555  002B40  05FC               	decf	_machine_state& (0+255),w,b
 15556  002B42  A4D8               	btfss	status,2,c
 15557  002B44  D01E               	goto	i2l8175
 15558                           
 15559                           ; BSR set to: 0
 15560                           ;interruptHandler.c: 49: if(was_low_1){
 15561  002B46  5079               	movf	_was_low_1,w,c	;volatile
 15562  002B48  107A               	iorwf	_was_low_1+1,w,c	;volatile
 15563  002B4A  B4D8               	btfsc	status,2,c
 15564  002B4C  D00A               	goto	i2l848
 15565                           
 15566                           ; BSR set to: 0
 15567                           ;interruptHandler.c: 50: LATCbits.LATC1 = 1;
 15568  002B4E  828B               	bsf	3979,1,c	;volatile
 15569                           
 15570                           ; BSR set to: 0
 15571                           ;interruptHandler.c: 51: was_low_1 = 0;
 15572  002B50  0E00               	movlw	0
 15573  002B52  6E7A               	movwf	_was_low_1+1,c	;volatile
 15574  002B54  0E00               	movlw	0
 15575  002B56  6E79               	movwf	_was_low_1,c	;volatile
 15576                           
 15577                           ; BSR set to: 0
 15578                           ;interruptHandler.c: 52: TMR1H = servoTimes[0];
 15579  002B58  C11C  FFCF         	movff	_servoTimes,4047	;volatile
 15580                           
 15581                           ; BSR set to: 0
 15582                           ;interruptHandler.c: 53: TMR1L = servoTimes[1];
 15583  002B5C  C11E  FFCE         	movff	_servoTimes+2,4046	;volatile
 15584                           
 15585                           ;interruptHandler.c: 54: }
 15586  002B60  D00F               	goto	i2l8173
 15587  002B62                     i2l848:
 15588                           
 15589                           ; BSR set to: 0
 15590                           ;interruptHandler.c: 55: else{
 15591                           ;interruptHandler.c: 56: LATCbits.LATC1 = 0;
 15592  002B62  928B               	bcf	3979,1,c	;volatile
 15593                           
 15594                           ; BSR set to: 0
 15595                           ;interruptHandler.c: 57: was_low_1 = 1;
 15596  002B64  0E00               	movlw	0
 15597  002B66  6E7A               	movwf	_was_low_1+1,c	;volatile
 15598  002B68  0E01               	movlw	1
 15599  002B6A  6E79               	movwf	_was_low_1,c	;volatile
 15600                           
 15601                           ; BSR set to: 0
 15602                           ;interruptHandler.c: 58: TMR1H = 20000 - servoTimes[0];
 15603  002B6C  0101               	movlb	1	; () banked
 15604  002B6E  511C               	movf	_servoTimes& (0+255),w,b
 15605  002B70  0800               	sublw	0
 15606  002B72  0F20               	addlw	32
 15607  002B74  6ECF               	movwf	4047,c	;volatile
 15608                           
 15609                           ; BSR set to: 1
 15610                           ;interruptHandler.c: 59: TMR1L = 20000 - servoTimes[1];
 15611  002B76  0101               	movlb	1	; () banked
 15612  002B78  511E               	movf	(_servoTimes+2)& (0+255),w,b
 15613  002B7A  0800               	sublw	0
 15614  002B7C  0F20               	addlw	32
 15615  002B7E  6ECE               	movwf	4046,c	;volatile
 15616  002B80                     i2l8173:
 15617                           
 15618                           ;interruptHandler.c: 60: }
 15619                           ;interruptHandler.c: 61: TMR1ON = 1;
 15620  002B80  80CD               	bsf	4045,0,c	;volatile
 15621  002B82                     i2l8175:
 15622                           
 15623                           ;interruptHandler.c: 62: }
 15624                           ;interruptHandler.c: 63: }
 15625                           ;interruptHandler.c: 65: if(TMR3IF){
 15626  002B82  A2A1               	btfss	4001,1,c	;volatile
 15627  002B84  D024               	goto	i2l854
 15628                           
 15629                           ;interruptHandler.c: 66: TMR3IF = 0;
 15630  002B86  92A1               	bcf	4001,1,c	;volatile
 15631                           
 15632                           ;interruptHandler.c: 67: TMR3ON = 0;
 15633  002B88  90B1               	bcf	4017,0,c	;volatile
 15634                           
 15635                           ;interruptHandler.c: 68: if(machine_state == Sorting_state){
 15636  002B8A  0100               	movlb	0	; () banked
 15637  002B8C  05FC               	decf	_machine_state& (0+255),w,b
 15638  002B8E  A4D8               	btfss	status,2,c
 15639  002B90  D01E               	goto	i2l854
 15640                           
 15641                           ; BSR set to: 0
 15642                           ;interruptHandler.c: 69: if(was_low_3){
 15643  002B92  507B               	movf	_was_low_3,w,c	;volatile
 15644  002B94  107C               	iorwf	_was_low_3+1,w,c	;volatile
 15645  002B96  B4D8               	btfsc	status,2,c
 15646  002B98  D00A               	goto	i2l852
 15647                           
 15648                           ; BSR set to: 0
 15649                           ;interruptHandler.c: 70: LATCbits.LATC2 = 1;
 15650  002B9A  848B               	bsf	3979,2,c	;volatile
 15651                           
 15652                           ; BSR set to: 0
 15653                           ;interruptHandler.c: 71: was_low_3 = 0;
 15654  002B9C  0E00               	movlw	0
 15655  002B9E  6E7C               	movwf	_was_low_3+1,c	;volatile
 15656  002BA0  0E00               	movlw	0
 15657  002BA2  6E7B               	movwf	_was_low_3,c	;volatile
 15658                           
 15659                           ; BSR set to: 0
 15660                           ;interruptHandler.c: 72: TMR3H = servoTimes[2];
 15661  002BA4  C120  FFB3         	movff	_servoTimes+4,4019	;volatile
 15662                           
 15663                           ; BSR set to: 0
 15664                           ;interruptHandler.c: 73: TMR3L = servoTimes[3];
 15665  002BA8  C122  FFB2         	movff	_servoTimes+6,4018	;volatile
 15666                           
 15667                           ;interruptHandler.c: 74: }
 15668  002BAC  D00F               	goto	i2l8197
 15669  002BAE                     i2l852:
 15670                           
 15671                           ; BSR set to: 0
 15672                           ;interruptHandler.c: 75: else{
 15673                           ;interruptHandler.c: 76: LATCbits.LATC2 = 0;
 15674  002BAE  948B               	bcf	3979,2,c	;volatile
 15675                           
 15676                           ; BSR set to: 0
 15677                           ;interruptHandler.c: 77: was_low_3 = 1;
 15678  002BB0  0E00               	movlw	0
 15679  002BB2  6E7C               	movwf	_was_low_3+1,c	;volatile
 15680  002BB4  0E01               	movlw	1
 15681  002BB6  6E7B               	movwf	_was_low_3,c	;volatile
 15682                           
 15683                           ; BSR set to: 0
 15684                           ;interruptHandler.c: 78: TMR3H = 20000 - servoTimes[2];
 15685  002BB8  0101               	movlb	1	; () banked
 15686  002BBA  5120               	movf	(_servoTimes+4)& (0+255),w,b
 15687  002BBC  0800               	sublw	0
 15688  002BBE  0F20               	addlw	32
 15689  002BC0  6EB3               	movwf	4019,c	;volatile
 15690                           
 15691                           ; BSR set to: 1
 15692                           ;interruptHandler.c: 79: TMR3L = 20000 - servoTimes[3];
 15693  002BC2  0101               	movlb	1	; () banked
 15694  002BC4  5122               	movf	(_servoTimes+6)& (0+255),w,b
 15695  002BC6  0800               	sublw	0
 15696  002BC8  0F20               	addlw	32
 15697  002BCA  6EB2               	movwf	4018,c	;volatile
 15698  002BCC                     i2l8197:
 15699                           
 15700                           ;interruptHandler.c: 80: }
 15701                           ;interruptHandler.c: 81: TMR3ON = 1;
 15702  002BCC  80B1               	bsf	4017,0,c	;volatile
 15703  002BCE                     i2l854:
 15704  002BCE  C05A  FFF5         	movff	??_handler+15,tablat
 15705  002BD2  C059  FFF8         	movff	??_handler+14,tblptru
 15706  002BD6  C058  FFF7         	movff	??_handler+13,tblptrh
 15707  002BDA  C057  FFF6         	movff	??_handler+12,tblptrl
 15708  002BDE  C056  FFF4         	movff	??_handler+11,prodh
 15709  002BE2  C055  FFF3         	movff	??_handler+10,prodl
 15710  002BE6  C054  FFDA         	movff	??_handler+9,fsr2h
 15711  002BEA  C053  FFD9         	movff	??_handler+8,fsr2l
 15712  002BEE  C052  FFE2         	movff	??_handler+7,fsr1h
 15713  002BF2  C051  FFE1         	movff	??_handler+6,fsr1l
 15714  002BF6  C050  FFEA         	movff	??_handler+5,fsr0h
 15715  002BFA  C04F  FFE9         	movff	??_handler+4,fsr0l
 15716  002BFE  C04E  FFFB         	movff	??_handler+3,pclatu
 15717  002C02  C04D  FFFA         	movff	??_handler+2,pclath
 15718  002C06  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 15719  002C08  0011               	retfie		f
 15720  002C0A                     __end_of_handler:
 15721                           	opt stack 0
 15722                           pclatu	equ	0xFFB
 15723                           pclath	equ	0xFFA
 15724                           tblptru	equ	0xFF8
 15725                           tblptrh	equ	0xFF7
 15726                           tblptrl	equ	0xFF6
 15727                           tablat	equ	0xFF5
 15728                           prodh	equ	0xFF4
 15729                           prodl	equ	0xFF3
 15730                           intcon	equ	0xFF2
 15731                           intcon2	equ	0xFF1
 15732                           intcon3	equ	0xFF0
 15733                           indf0	equ	0xFEF
 15734                           postinc0	equ	0xFEE
 15735                           fsr0h	equ	0xFEA
 15736                           fsr0l	equ	0xFE9
 15737                           wreg	equ	0xFE8
 15738                           postdec1	equ	0xFE5
 15739                           fsr1h	equ	0xFE2
 15740                           fsr1l	equ	0xFE1
 15741                           indf2	equ	0xFDF
 15742                           postinc2	equ	0xFDE
 15743                           postdec2	equ	0xFDD
 15744                           fsr2h	equ	0xFDA
 15745                           fsr2l	equ	0xFD9
 15746                           status	equ	0xFD8
 15747                           
 15748 ;; *************** function _updateMenu *****************
 15749 ;; Defined at:
 15750 ;;		line 211 in file "UI.c"
 15751 ;; Parameters:    Size  Location     Type
 15752 ;;		None
 15753 ;; Auto vars:     Size  Location     Type
 15754 ;;		None
 15755 ;; Return value:  Size  Location     Type
 15756 ;;                  1    wreg      void 
 15757 ;; Registers used:
 15758 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15759 ;; Tracked objects:
 15760 ;;		On entry : 0/0
 15761 ;;		On exit  : 0/0
 15762 ;;		Unchanged: 0/0
 15763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15764 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15765 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15766 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15767 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15768 ;;Total ram usage:        2 bytes
 15769 ;; Hardware stack levels used:    1
 15770 ;; Hardware stack levels required when called:    5
 15771 ;; This function calls:
 15772 ;;		_change_state_to_logs_11
 15773 ;;		_change_state_to_logs_12
 15774 ;;		_change_state_to_logs_22
 15775 ;;		_change_state_to_logs_23
 15776 ;;		_change_state_to_logs_33
 15777 ;;		_change_state_to_logs_34
 15778 ;;		_change_state_to_menu_11
 15779 ;;		_change_state_to_menu_23
 15780 ;;		_dispLogs
 15781 ;;		_inputHandler
 15782 ;;		i2_change_state_to_menu_12
 15783 ;;		i2_change_state_to_menu_22
 15784 ;;		i2_change_state_to_menu_start
 15785 ;; This function is called by:
 15786 ;;		_handler
 15787 ;; This function uses a non-reentrant model
 15788 ;;
 15789                           
 15790                           	psect	text58
 15791  0021CE                     __ptext58:
 15792                           	opt stack 0
 15793  0021CE                     _updateMenu:
 15794                           	opt stack 18
 15795                           
 15796                           ;UI.c: 212: up = 0; down = 0; enter = 0; back = 0;
 15797                           
 15798                           ;incstack = 0
 15799  0021CE  0E00               	movlw	0
 15800  0021D0  6E78               	movwf	_up+1,c
 15801  0021D2  0E00               	movlw	0
 15802  0021D4  6E77               	movwf	_up,c
 15803  0021D6  0E00               	movlw	0
 15804  0021D8  6E6A               	movwf	_down+1,c
 15805  0021DA  0E00               	movlw	0
 15806  0021DC  6E69               	movwf	_down,c
 15807  0021DE  0E00               	movlw	0
 15808  0021E0  6E6C               	movwf	_enter+1,c
 15809  0021E2  0E00               	movlw	0
 15810  0021E4  6E6B               	movwf	_enter,c
 15811  0021E6  0E00               	movlw	0
 15812  0021E8  6E5C               	movwf	_back+1,c
 15813  0021EA  0E00               	movlw	0
 15814  0021EC  6E5B               	movwf	_back,c
 15815                           
 15816                           ;UI.c: 213: (INTCONbits.GIE = 0);
 15817  0021EE  9EF2               	bcf	intcon,7,c	;volatile
 15818                           
 15819                           ;UI.c: 215: if (inputHandler()
 15820                           ;UI.c: 218: ){
 15821  0021F0  EC5B  F014         	call	_inputHandler	;wreg free
 15822  0021F4  502A               	movf	?_inputHandler,w,c
 15823  0021F6  102B               	iorwf	?_inputHandler+1,w,c
 15824  0021F8  A4D8               	btfss	status,2,c
 15825  0021FA  D112               	goto	i2l7877
 15826  0021FC  D146               	goto	i2l254
 15827  0021FE                     i2l7729:
 15828                           
 15829                           ;UI.c: 222: change_state_to_menu_11();
 15830  0021FE  ECE2  F021         	call	_change_state_to_menu_11	;wreg free
 15831                           
 15832                           ;UI.c: 223: break;
 15833  002202  D143               	goto	i2l254
 15834  002204                     i2l7731:
 15835                           
 15836                           ;UI.c: 226: if(up){
 15837  002204  5077               	movf	_up,w,c
 15838  002206  1078               	iorwf	_up+1,w,c
 15839  002208  B4D8               	btfsc	status,2,c
 15840  00220A  D003               	goto	i2l7735
 15841                           
 15842                           ;UI.c: 227: change_state_to_menu_23();
 15843  00220C  ECCA  F021         	call	_change_state_to_menu_23	;wreg free
 15844                           
 15845                           ;UI.c: 228: }
 15846  002210  D13C               	goto	i2l254
 15847  002212                     i2l7735:
 15848                           
 15849                           ;UI.c: 229: else if(down){
 15850  002212  5069               	movf	_down,w,c
 15851  002214  106A               	iorwf	_down+1,w,c
 15852  002216  B4D8               	btfsc	status,2,c
 15853  002218  D003               	goto	i2l7739
 15854                           
 15855                           ;UI.c: 230: change_state_to_menu_12();
 15856  00221A  ECB2  F021         	call	i2_change_state_to_menu_12	;wreg free
 15857                           
 15858                           ;UI.c: 231: }
 15859  00221E  D135               	goto	i2l254
 15860  002220                     i2l7739:
 15861                           
 15862                           ;UI.c: 232: else if(enter){
 15863  002220  506B               	movf	_enter,w,c
 15864  002222  106C               	iorwf	_enter+1,w,c
 15865  002224  B4D8               	btfsc	status,2,c
 15866  002226  D131               	goto	i2l254
 15867                           
 15868                           ;UI.c: 233: change_state_to_menu_start();
 15869  002228  ECF5  F022         	call	i2_change_state_to_menu_start	;wreg free
 15870                           
 15871                           ;UI.c: 234: }
 15872                           ;UI.c: 235: break;
 15873  00222C  D12E               	goto	i2l254
 15874  00222E                     i2l7743:
 15875                           
 15876                           ;UI.c: 238: if(up){
 15877  00222E  5077               	movf	_up,w,c
 15878  002230  1078               	iorwf	_up+1,w,c
 15879  002232  B4D8               	btfsc	status,2,c
 15880  002234  D003               	goto	i2l7747
 15881                           
 15882                           ;UI.c: 239: change_state_to_menu_11();
 15883  002236  ECE2  F021         	call	_change_state_to_menu_11	;wreg free
 15884                           
 15885                           ;UI.c: 240: }
 15886  00223A  D127               	goto	i2l254
 15887  00223C                     i2l7747:
 15888                           
 15889                           ;UI.c: 241: else if(down){
 15890  00223C  5069               	movf	_down,w,c
 15891  00223E  106A               	iorwf	_down+1,w,c
 15892  002240  B4D8               	btfsc	status,2,c
 15893  002242  D011               	goto	i2l7763
 15894                           
 15895                           ;UI.c: 242: change_state_to_menu_23();
 15896  002244  ECCA  F021         	call	_change_state_to_menu_23	;wreg free
 15897                           
 15898                           ;UI.c: 243: }
 15899  002248  D120               	goto	i2l254
 15900  00224A                     i2l7755:
 15901                           
 15902                           ;UI.c: 250: if(up){
 15903  00224A  5077               	movf	_up,w,c
 15904  00224C  1078               	iorwf	_up+1,w,c
 15905  00224E  B4D8               	btfsc	status,2,c
 15906  002250  D003               	goto	i2l7759
 15907                           
 15908                           ;UI.c: 251: change_state_to_menu_11();
 15909  002252  ECE2  F021         	call	_change_state_to_menu_11	;wreg free
 15910                           
 15911                           ;UI.c: 252: }
 15912  002256  D119               	goto	i2l254
 15913  002258                     i2l7759:
 15914                           
 15915                           ;UI.c: 253: else if(down){
 15916  002258  5069               	movf	_down,w,c
 15917  00225A  106A               	iorwf	_down+1,w,c
 15918  00225C  B4D8               	btfsc	status,2,c
 15919  00225E  D003               	goto	i2l7763
 15920                           
 15921                           ;UI.c: 254: change_state_to_menu_23();
 15922  002260  ECCA  F021         	call	_change_state_to_menu_23	;wreg free
 15923                           
 15924                           ;UI.c: 255: }
 15925  002264  D112               	goto	i2l254
 15926  002266                     i2l7763:
 15927                           
 15928                           ;UI.c: 256: else if(enter){
 15929  002266  506B               	movf	_enter,w,c
 15930  002268  106C               	iorwf	_enter+1,w,c
 15931  00226A  B4D8               	btfsc	status,2,c
 15932  00226C  D10E               	goto	i2l254
 15933                           
 15934                           ;UI.c: 257: machine_state = Sorting_state;
 15935  00226E  0E01               	movlw	1
 15936  002270  0100               	movlb	0	; () banked
 15937  002272  6FFC               	movwf	_machine_state& (0+255),b
 15938                           
 15939                           ; BSR set to: 0
 15940                           ;UI.c: 258: }
 15941                           ;UI.c: 259: break;
 15942                           
 15943                           ; BSR set to: 0
 15944                           
 15945                           ; BSR set to: 0
 15946  002274  D10A               	goto	i2l254
 15947  002276                     i2l7767:
 15948                           
 15949                           ;UI.c: 262: if(up){
 15950  002276  5077               	movf	_up,w,c
 15951  002278  1078               	iorwf	_up+1,w,c
 15952  00227A  B4D8               	btfsc	status,2,c
 15953  00227C  D003               	goto	i2l7771
 15954                           
 15955                           ;UI.c: 263: change_state_to_menu_22();
 15956  00227E  EC9A  F021         	call	i2_change_state_to_menu_22	;wreg free
 15957                           
 15958                           ;UI.c: 264: }
 15959  002282  D103               	goto	i2l254
 15960  002284                     i2l7771:
 15961                           
 15962                           ;UI.c: 265: else if(down){
 15963  002284  5069               	movf	_down,w,c
 15964  002286  106A               	iorwf	_down+1,w,c
 15965  002288  B4D8               	btfsc	status,2,c
 15966  00228A  D003               	goto	i2l7775
 15967                           
 15968                           ;UI.c: 266: change_state_to_menu_11();
 15969  00228C  ECE2  F021         	call	_change_state_to_menu_11	;wreg free
 15970                           
 15971                           ;UI.c: 267: }
 15972  002290  D0FC               	goto	i2l254
 15973  002292                     i2l7775:
 15974                           
 15975                           ;UI.c: 268: else if(enter){
 15976  002292  506B               	movf	_enter,w,c
 15977  002294  106C               	iorwf	_enter+1,w,c
 15978  002296  B4D8               	btfsc	status,2,c
 15979  002298  D0F8               	goto	i2l254
 15980                           
 15981                           ;UI.c: 269: change_state_to_logs_11();
 15982  00229A  EC5A  F022         	call	_change_state_to_logs_11	;wreg free
 15983                           
 15984                           ;UI.c: 270: }
 15985                           ;UI.c: 271: break;
 15986  00229E  D0F5               	goto	i2l254
 15987  0022A0                     i2l7779:
 15988                           
 15989                           ;UI.c: 274: if(up){
 15990  0022A0  5077               	movf	_up,w,c
 15991  0022A2  1078               	iorwf	_up+1,w,c
 15992  0022A4  B4D8               	btfsc	status,2,c
 15993  0022A6  D003               	goto	i2l7783
 15994                           
 15995                           ;UI.c: 275: change_state_to_logs_34();
 15996  0022A8  ECFA  F021         	call	_change_state_to_logs_34	;wreg free
 15997                           
 15998                           ;UI.c: 276: }
 15999  0022AC  D0EE               	goto	i2l254
 16000  0022AE                     i2l7783:
 16001                           
 16002                           ;UI.c: 277: else if(down){
 16003  0022AE  5069               	movf	_down,w,c
 16004  0022B0  106A               	iorwf	_down+1,w,c
 16005  0022B2  B4D8               	btfsc	status,2,c
 16006  0022B4  D003               	goto	i2l7787
 16007                           
 16008                           ;UI.c: 278: change_state_to_logs_12();
 16009  0022B6  EC42  F022         	call	_change_state_to_logs_12	;wreg free
 16010                           
 16011                           ;UI.c: 279: }
 16012  0022BA  D0E7               	goto	i2l254
 16013  0022BC                     i2l7787:
 16014                           
 16015                           ;UI.c: 280: else if(enter){
 16016  0022BC  506B               	movf	_enter,w,c
 16017  0022BE  106C               	iorwf	_enter+1,w,c
 16018  0022C0  B4D8               	btfsc	status,2,c
 16019  0022C2  D007               	goto	i2l7791
 16020                           
 16021                           ;UI.c: 281: dispLogs(1);
 16022  0022C4  0E00               	movlw	0
 16023  0022C6  6E13               	movwf	dispLogs@myLog+1,c
 16024  0022C8  0E01               	movlw	1
 16025  0022CA  6E12               	movwf	dispLogs@myLog,c
 16026  0022CC  EC41  F023         	call	_dispLogs	;wreg free
 16027                           
 16028                           ;UI.c: 282: }
 16029  0022D0  D0DC               	goto	i2l254
 16030  0022D2                     i2l7791:
 16031                           
 16032                           ;UI.c: 283: else if(back){
 16033  0022D2  505B               	movf	_back,w,c
 16034  0022D4  105C               	iorwf	_back+1,w,c
 16035  0022D6  B4D8               	btfsc	status,2,c
 16036  0022D8  D0D8               	goto	i2l254
 16037                           
 16038                           ;UI.c: 284: change_state_to_menu_23();
 16039  0022DA  ECCA  F021         	call	_change_state_to_menu_23	;wreg free
 16040                           
 16041                           ;UI.c: 285: }
 16042                           ;UI.c: 286: break;
 16043  0022DE  D0D5               	goto	i2l254
 16044  0022E0                     i2l7795:
 16045                           
 16046                           ;UI.c: 289: if(up){
 16047  0022E0  5077               	movf	_up,w,c
 16048  0022E2  1078               	iorwf	_up+1,w,c
 16049  0022E4  B4D8               	btfsc	status,2,c
 16050  0022E6  D003               	goto	i2l7799
 16051                           
 16052                           ;UI.c: 290: change_state_to_logs_11();
 16053  0022E8  EC5A  F022         	call	_change_state_to_logs_11	;wreg free
 16054                           
 16055                           ;UI.c: 291: }
 16056  0022EC  D0CE               	goto	i2l254
 16057  0022EE                     i2l7799:
 16058                           
 16059                           ;UI.c: 292: else if(down){
 16060  0022EE  5069               	movf	_down,w,c
 16061  0022F0  106A               	iorwf	_down+1,w,c
 16062  0022F2  B4D8               	btfsc	status,2,c
 16063  0022F4  D003               	goto	i2l7803
 16064                           
 16065                           ;UI.c: 293: change_state_to_logs_23();
 16066  0022F6  EC89  F022         	call	_change_state_to_logs_23	;wreg free
 16067                           
 16068                           ;UI.c: 294: }
 16069  0022FA  D0C7               	goto	i2l254
 16070  0022FC                     i2l7803:
 16071                           
 16072                           ;UI.c: 295: else if(enter){
 16073  0022FC  506B               	movf	_enter,w,c
 16074  0022FE  106C               	iorwf	_enter+1,w,c
 16075  002300  B4D8               	btfsc	status,2,c
 16076  002302  D007               	goto	i2l7807
 16077                           
 16078                           ;UI.c: 296: dispLogs(2);
 16079  002304  0E00               	movlw	0
 16080  002306  6E13               	movwf	dispLogs@myLog+1,c
 16081  002308  0E02               	movlw	2
 16082  00230A  6E12               	movwf	dispLogs@myLog,c
 16083  00230C  EC41  F023         	call	_dispLogs	;wreg free
 16084                           
 16085                           ;UI.c: 297: }
 16086  002310  D0BC               	goto	i2l254
 16087  002312                     i2l7807:
 16088                           
 16089                           ;UI.c: 298: else if(back){
 16090  002312  505B               	movf	_back,w,c
 16091  002314  105C               	iorwf	_back+1,w,c
 16092  002316  B4D8               	btfsc	status,2,c
 16093  002318  D0B8               	goto	i2l254
 16094                           
 16095                           ;UI.c: 299: change_state_to_menu_23();
 16096  00231A  ECCA  F021         	call	_change_state_to_menu_23	;wreg free
 16097                           
 16098                           ;UI.c: 300: }
 16099                           ;UI.c: 301: break;
 16100  00231E  D0B5               	goto	i2l254
 16101  002320                     i2l7811:
 16102                           
 16103                           ;UI.c: 304: if(up){
 16104  002320  5077               	movf	_up,w,c
 16105  002322  1078               	iorwf	_up+1,w,c
 16106  002324  B4D8               	btfsc	status,2,c
 16107  002326  D003               	goto	i2l7815
 16108                           
 16109                           ;UI.c: 305: change_state_to_logs_11();
 16110  002328  EC5A  F022         	call	_change_state_to_logs_11	;wreg free
 16111                           
 16112                           ;UI.c: 306: }
 16113  00232C  D0AE               	goto	i2l254
 16114  00232E                     i2l7815:
 16115                           
 16116                           ;UI.c: 307: else if(down){
 16117  00232E  5069               	movf	_down,w,c
 16118  002330  106A               	iorwf	_down+1,w,c
 16119  002332  B4D8               	btfsc	status,2,c
 16120  002334  D003               	goto	i2l7819
 16121                           
 16122                           ;UI.c: 308: change_state_to_logs_23();
 16123  002336  EC89  F022         	call	_change_state_to_logs_23	;wreg free
 16124                           
 16125                           ;UI.c: 309: }
 16126  00233A  D0A7               	goto	i2l254
 16127  00233C                     i2l7819:
 16128                           
 16129                           ;UI.c: 310: else if(enter){
 16130  00233C  506B               	movf	_enter,w,c
 16131  00233E  106C               	iorwf	_enter+1,w,c
 16132  002340  B4D8               	btfsc	status,2,c
 16133  002342  D007               	goto	i2l7823
 16134                           
 16135                           ;UI.c: 311: dispLogs(2);
 16136  002344  0E00               	movlw	0
 16137  002346  6E13               	movwf	dispLogs@myLog+1,c
 16138  002348  0E02               	movlw	2
 16139  00234A  6E12               	movwf	dispLogs@myLog,c
 16140  00234C  EC41  F023         	call	_dispLogs	;wreg free
 16141                           
 16142                           ;UI.c: 312: }
 16143  002350  D09C               	goto	i2l254
 16144  002352                     i2l7823:
 16145                           
 16146                           ;UI.c: 313: else if(back){
 16147  002352  505B               	movf	_back,w,c
 16148  002354  105C               	iorwf	_back+1,w,c
 16149  002356  B4D8               	btfsc	status,2,c
 16150  002358  D098               	goto	i2l254
 16151                           
 16152                           ;UI.c: 314: change_state_to_menu_23();
 16153  00235A  ECCA  F021         	call	_change_state_to_menu_23	;wreg free
 16154                           
 16155                           ;UI.c: 315: }
 16156                           ;UI.c: 316: break;
 16157  00235E  D095               	goto	i2l254
 16158  002360                     i2l7827:
 16159                           
 16160                           ;UI.c: 319: if(up){
 16161  002360  5077               	movf	_up,w,c
 16162  002362  1078               	iorwf	_up+1,w,c
 16163  002364  B4D8               	btfsc	status,2,c
 16164  002366  D003               	goto	i2l7831
 16165                           
 16166                           ;UI.c: 320: change_state_to_logs_22();
 16167  002368  EC2A  F022         	call	_change_state_to_logs_22	;wreg free
 16168                           
 16169                           ;UI.c: 321: }
 16170  00236C  D08E               	goto	i2l254
 16171  00236E                     i2l7831:
 16172                           
 16173                           ;UI.c: 322: else if(down){
 16174  00236E  5069               	movf	_down,w,c
 16175  002370  106A               	iorwf	_down+1,w,c
 16176  002372  B4D8               	btfsc	status,2,c
 16177  002374  D003               	goto	i2l7835
 16178                           
 16179                           ;UI.c: 323: change_state_to_logs_34();
 16180  002376  ECFA  F021         	call	_change_state_to_logs_34	;wreg free
 16181                           
 16182                           ;UI.c: 324: }
 16183  00237A  D087               	goto	i2l254
 16184  00237C                     i2l7835:
 16185                           
 16186                           ;UI.c: 325: else if(enter){
 16187  00237C  506B               	movf	_enter,w,c
 16188  00237E  106C               	iorwf	_enter+1,w,c
 16189  002380  B4D8               	btfsc	status,2,c
 16190  002382  D007               	goto	i2l7839
 16191                           
 16192                           ;UI.c: 326: dispLogs(3);
 16193  002384  0E00               	movlw	0
 16194  002386  6E13               	movwf	dispLogs@myLog+1,c
 16195  002388  0E03               	movlw	3
 16196  00238A  6E12               	movwf	dispLogs@myLog,c
 16197  00238C  EC41  F023         	call	_dispLogs	;wreg free
 16198                           
 16199                           ;UI.c: 327: }
 16200  002390  D07C               	goto	i2l254
 16201  002392                     i2l7839:
 16202                           
 16203                           ;UI.c: 328: else if(back){
 16204  002392  505B               	movf	_back,w,c
 16205  002394  105C               	iorwf	_back+1,w,c
 16206  002396  B4D8               	btfsc	status,2,c
 16207  002398  D078               	goto	i2l254
 16208                           
 16209                           ;UI.c: 329: change_state_to_menu_23();
 16210  00239A  ECCA  F021         	call	_change_state_to_menu_23	;wreg free
 16211                           
 16212                           ;UI.c: 330: }
 16213                           ;UI.c: 331: break;
 16214  00239E  D075               	goto	i2l254
 16215  0023A0                     i2l7843:
 16216                           
 16217                           ;UI.c: 334: if(up){
 16218  0023A0  5077               	movf	_up,w,c
 16219  0023A2  1078               	iorwf	_up+1,w,c
 16220  0023A4  B4D8               	btfsc	status,2,c
 16221  0023A6  D003               	goto	i2l7847
 16222                           
 16223                           ;UI.c: 335: change_state_to_logs_22();
 16224  0023A8  EC2A  F022         	call	_change_state_to_logs_22	;wreg free
 16225                           
 16226                           ;UI.c: 336: }
 16227  0023AC  D06E               	goto	i2l254
 16228  0023AE                     i2l7847:
 16229                           
 16230                           ;UI.c: 337: else if(down){
 16231  0023AE  5069               	movf	_down,w,c
 16232  0023B0  106A               	iorwf	_down+1,w,c
 16233  0023B2  B4D8               	btfsc	status,2,c
 16234  0023B4  D003               	goto	i2l7851
 16235                           
 16236                           ;UI.c: 338: change_state_to_logs_34();
 16237  0023B6  ECFA  F021         	call	_change_state_to_logs_34	;wreg free
 16238                           
 16239                           ;UI.c: 339: }
 16240  0023BA  D067               	goto	i2l254
 16241  0023BC                     i2l7851:
 16242                           
 16243                           ;UI.c: 340: else if(enter){
 16244  0023BC  506B               	movf	_enter,w,c
 16245  0023BE  106C               	iorwf	_enter+1,w,c
 16246  0023C0  B4D8               	btfsc	status,2,c
 16247  0023C2  D007               	goto	i2l7855
 16248                           
 16249                           ;UI.c: 341: dispLogs(3);
 16250  0023C4  0E00               	movlw	0
 16251  0023C6  6E13               	movwf	dispLogs@myLog+1,c
 16252  0023C8  0E03               	movlw	3
 16253  0023CA  6E12               	movwf	dispLogs@myLog,c
 16254  0023CC  EC41  F023         	call	_dispLogs	;wreg free
 16255                           
 16256                           ;UI.c: 342: }
 16257  0023D0  D05C               	goto	i2l254
 16258  0023D2                     i2l7855:
 16259                           
 16260                           ;UI.c: 343: else if(back){
 16261  0023D2  505B               	movf	_back,w,c
 16262  0023D4  105C               	iorwf	_back+1,w,c
 16263  0023D6  B4D8               	btfsc	status,2,c
 16264  0023D8  D058               	goto	i2l254
 16265                           
 16266                           ;UI.c: 344: change_state_to_menu_23();
 16267  0023DA  ECCA  F021         	call	_change_state_to_menu_23	;wreg free
 16268                           
 16269                           ;UI.c: 345: }
 16270                           ;UI.c: 346: break;
 16271  0023DE  D055               	goto	i2l254
 16272  0023E0                     i2l7859:
 16273                           
 16274                           ;UI.c: 349: if(up){
 16275  0023E0  5077               	movf	_up,w,c
 16276  0023E2  1078               	iorwf	_up+1,w,c
 16277  0023E4  B4D8               	btfsc	status,2,c
 16278  0023E6  D003               	goto	i2l7863
 16279                           
 16280                           ;UI.c: 350: change_state_to_logs_33();
 16281  0023E8  EC12  F022         	call	_change_state_to_logs_33	;wreg free
 16282                           
 16283                           ;UI.c: 351: }
 16284  0023EC  D04E               	goto	i2l254
 16285  0023EE                     i2l7863:
 16286                           
 16287                           ;UI.c: 352: else if(down){
 16288  0023EE  5069               	movf	_down,w,c
 16289  0023F0  106A               	iorwf	_down+1,w,c
 16290  0023F2  B4D8               	btfsc	status,2,c
 16291  0023F4  D003               	goto	i2l7867
 16292                           
 16293                           ;UI.c: 353: change_state_to_logs_11();
 16294  0023F6  EC5A  F022         	call	_change_state_to_logs_11	;wreg free
 16295                           
 16296                           ;UI.c: 354: }
 16297  0023FA  D047               	goto	i2l254
 16298  0023FC                     i2l7867:
 16299                           
 16300                           ;UI.c: 355: else if(enter){
 16301  0023FC  506B               	movf	_enter,w,c
 16302  0023FE  106C               	iorwf	_enter+1,w,c
 16303  002400  B4D8               	btfsc	status,2,c
 16304  002402  D007               	goto	i2l7871
 16305                           
 16306                           ;UI.c: 356: dispLogs(4);
 16307  002404  0E00               	movlw	0
 16308  002406  6E13               	movwf	dispLogs@myLog+1,c
 16309  002408  0E04               	movlw	4
 16310  00240A  6E12               	movwf	dispLogs@myLog,c
 16311  00240C  EC41  F023         	call	_dispLogs	;wreg free
 16312                           
 16313                           ;UI.c: 357: }
 16314  002410  D03C               	goto	i2l254
 16315  002412                     i2l7871:
 16316                           
 16317                           ;UI.c: 358: else if(back){
 16318  002412  505B               	movf	_back,w,c
 16319  002414  105C               	iorwf	_back+1,w,c
 16320  002416  B4D8               	btfsc	status,2,c
 16321  002418  D038               	goto	i2l254
 16322                           
 16323                           ;UI.c: 359: change_state_to_menu_23();
 16324  00241A  ECCA  F021         	call	_change_state_to_menu_23	;wreg free
 16325                           
 16326                           ;UI.c: 365: }
 16327                           
 16328                           ;UI.c: 364: break;
 16329                           
 16330                           ;UI.c: 363: default:
 16331                           
 16332                           ;UI.c: 360: }
 16333                           ;UI.c: 361: break;
 16334  00241E  D035               	goto	i2l254
 16335  002420                     i2l7877:
 16336  002420  C0DE  F043         	movff	_cur_state,??_updateMenu
 16337  002424  C0DF  F044         	movff	_cur_state+1,??_updateMenu+1
 16338                           
 16339                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
 16340                           ; Switch size 1, requested type "space"
 16341                           ; Number of cases is 3, Range of values is 0 to 4
 16342                           ; switch strategies available:
 16343                           ; Name         Instructions Cycles
 16344                           ; simple_byte           10     6 (average)
 16345                           ;	Chosen strategy is simple_byte
 16346  002428  5044               	movf	??_updateMenu+1,w,c
 16347  00242A  0A00               	xorlw	0	; case 0
 16348  00242C  B4D8               	btfsc	status,2,c
 16349  00242E  D007               	goto	i2l8461
 16350  002430  0A03               	xorlw	3	; case 3
 16351  002432  B4D8               	btfsc	status,2,c
 16352  002434  D015               	goto	i2l8463
 16353  002436  0A07               	xorlw	7	; case 4
 16354  002438  B4D8               	btfsc	status,2,c
 16355  00243A  D020               	goto	i2l8465
 16356  00243C  D026               	goto	i2l254
 16357  00243E                     i2l8461:
 16358                           
 16359                           ; Switch size 1, requested type "space"
 16360                           ; Number of cases is 5, Range of values is 0 to 23
 16361                           ; switch strategies available:
 16362                           ; Name         Instructions Cycles
 16363                           ; simple_byte           16     9 (average)
 16364                           ;	Chosen strategy is simple_byte
 16365  00243E  5043               	movf	??_updateMenu,w,c
 16366  002440  0A00               	xorlw	0	; case 0
 16367  002442  B4D8               	btfsc	status,2,c
 16368  002444  D6DC               	goto	i2l7729
 16369  002446  0A0B               	xorlw	11	; case 11
 16370  002448  B4D8               	btfsc	status,2,c
 16371  00244A  D6DC               	goto	i2l7731
 16372  00244C  0A07               	xorlw	7	; case 12
 16373  00244E  B4D8               	btfsc	status,2,c
 16374  002450  D6EE               	goto	i2l7743
 16375  002452  0A1A               	xorlw	26	; case 22
 16376  002454  B4D8               	btfsc	status,2,c
 16377  002456  D6F9               	goto	i2l7755
 16378  002458  0A01               	xorlw	1	; case 23
 16379  00245A  B4D8               	btfsc	status,2,c
 16380  00245C  D70C               	goto	i2l7767
 16381  00245E  D015               	goto	i2l254
 16382  002460                     i2l8463:
 16383                           
 16384                           ; Switch size 1, requested type "space"
 16385                           ; Number of cases is 4, Range of values is 243 to 255
 16386                           ; switch strategies available:
 16387                           ; Name         Instructions Cycles
 16388                           ; simple_byte           13     7 (average)
 16389                           ;	Chosen strategy is simple_byte
 16390  002460  5043               	movf	??_updateMenu,w,c
 16391  002462  0AF3               	xorlw	243	; case 243
 16392  002464  B4D8               	btfsc	status,2,c
 16393  002466  D71C               	goto	i2l7779
 16394  002468  0A07               	xorlw	7	; case 244
 16395  00246A  B4D8               	btfsc	status,2,c
 16396  00246C  D739               	goto	i2l7795
 16397  00246E  0A0A               	xorlw	10	; case 254
 16398  002470  B4D8               	btfsc	status,2,c
 16399  002472  D756               	goto	i2l7811
 16400  002474  0A01               	xorlw	1	; case 255
 16401  002476  B4D8               	btfsc	status,2,c
 16402  002478  D773               	goto	i2l7827
 16403  00247A  D007               	goto	i2l254
 16404  00247C                     i2l8465:
 16405                           
 16406                           ; Switch size 1, requested type "space"
 16407                           ; Number of cases is 2, Range of values is 9 to 10
 16408                           ; switch strategies available:
 16409                           ; Name         Instructions Cycles
 16410                           ; simple_byte            7     4 (average)
 16411                           ;	Chosen strategy is simple_byte
 16412  00247C  5043               	movf	??_updateMenu,w,c
 16413  00247E  0A09               	xorlw	9	; case 9
 16414  002480  B4D8               	btfsc	status,2,c
 16415  002482  D78E               	goto	i2l7843
 16416  002484  0A03               	xorlw	3	; case 10
 16417  002486  B4D8               	btfsc	status,2,c
 16418  002488  D7AB               	goto	i2l7859
 16419  00248A                     i2l254:
 16420                           
 16421                           ;UI.c: 366: }
 16422                           ;UI.c: 367: (INTCONbits.GIE = 1);
 16423  00248A  8EF2               	bsf	intcon,7,c	;volatile
 16424  00248C  0012               	return		;funcret
 16425  00248E                     __end_of_updateMenu:
 16426                           	opt stack 0
 16427                           pclatu	equ	0xFFB
 16428                           pclath	equ	0xFFA
 16429                           tblptru	equ	0xFF8
 16430                           tblptrh	equ	0xFF7
 16431                           tblptrl	equ	0xFF6
 16432                           tablat	equ	0xFF5
 16433                           prodh	equ	0xFF4
 16434                           prodl	equ	0xFF3
 16435                           intcon	equ	0xFF2
 16436                           intcon2	equ	0xFF1
 16437                           intcon3	equ	0xFF0
 16438                           indf0	equ	0xFEF
 16439                           postinc0	equ	0xFEE
 16440                           fsr0h	equ	0xFEA
 16441                           fsr0l	equ	0xFE9
 16442                           wreg	equ	0xFE8
 16443                           postdec1	equ	0xFE5
 16444                           fsr1h	equ	0xFE2
 16445                           fsr1l	equ	0xFE1
 16446                           indf2	equ	0xFDF
 16447                           postinc2	equ	0xFDE
 16448                           postdec2	equ	0xFDD
 16449                           fsr2h	equ	0xFDA
 16450                           fsr2l	equ	0xFD9
 16451                           status	equ	0xFD8
 16452                           
 16453 ;; *************** function i2_change_state_to_menu_start *****************
 16454 ;; Defined at:
 16455 ;;		line 472 in file "UI.c"
 16456 ;; Parameters:    Size  Location     Type
 16457 ;;		None
 16458 ;; Auto vars:     Size  Location     Type
 16459 ;;		None
 16460 ;; Return value:  Size  Location     Type
 16461 ;;                  1    wreg      void 
 16462 ;; Registers used:
 16463 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16464 ;; Tracked objects:
 16465 ;;		On entry : 0/0
 16466 ;;		On exit  : 0/0
 16467 ;;		Unchanged: 0/0
 16468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16469 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16470 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16471 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16472 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16473 ;;Total ram usage:        0 bytes
 16474 ;; Hardware stack levels used:    1
 16475 ;; Hardware stack levels required when called:    4
 16476 ;; This function calls:
 16477 ;;		i2_lcdInst
 16478 ;;		i2_printRTC
 16479 ;;		i2_printf
 16480 ;; This function is called by:
 16481 ;;		_updateMenu
 16482 ;; This function uses a non-reentrant model
 16483 ;;
 16484                           
 16485                           	psect	text59
 16486  0045EA                     __ptext59:
 16487                           	opt stack 0
 16488  0045EA                     i2_change_state_to_menu_start:
 16489                           	opt stack 18
 16490                           
 16491                           ;UI.c: 473: cur_state = 0;
 16492                           
 16493                           ;incstack = 0
 16494  0045EA  0E00               	movlw	0
 16495  0045EC  0100               	movlb	0	; () banked
 16496  0045EE  6FDF               	movwf	(_cur_state+1)& (0+255),b
 16497  0045F0  0E00               	movlw	0
 16498  0045F2  6FDE               	movwf	_cur_state& (0+255),b
 16499                           
 16500                           ; BSR set to: 0
 16501                           ;UI.c: 475: lcdInst(0b10000000);;
 16502  0045F4  0E80               	movlw	128
 16503  0045F6  ECCF  F023         	call	i2_lcdInst
 16504                           
 16505                           ;UI.c: 476: printRTC();
 16506  0045FA  EC47  F012         	call	i2_printRTC	;wreg free
 16507                           
 16508                           ;UI.c: 477: lcdInst(0b11000000);;
 16509  0045FE  0EC0               	movlw	192
 16510  004600  ECCF  F023         	call	i2_lcdInst
 16511                           
 16512                           ;UI.c: 478: printf("PUSH TO CONTINUE");
 16513  004604  0E0D               	movlw	low STR_30
 16514  004606  6E0D               	movwf	i2printf@f,c
 16515  004608  0EFE               	movlw	high STR_30
 16516  00460A  6E0E               	movwf	i2printf@f+1,c
 16517  00460C  ECD4  F00A         	call	i2_printf	;wreg free
 16518  004610  0012               	return		;funcret
 16519  004612                     __end_ofi2_change_state_to_menu_start:
 16520                           	opt stack 0
 16521                           pclatu	equ	0xFFB
 16522                           pclath	equ	0xFFA
 16523                           tblptru	equ	0xFF8
 16524                           tblptrh	equ	0xFF7
 16525                           tblptrl	equ	0xFF6
 16526                           tablat	equ	0xFF5
 16527                           prodh	equ	0xFF4
 16528                           prodl	equ	0xFF3
 16529                           intcon	equ	0xFF2
 16530                           intcon2	equ	0xFF1
 16531                           intcon3	equ	0xFF0
 16532                           indf0	equ	0xFEF
 16533                           postinc0	equ	0xFEE
 16534                           fsr0h	equ	0xFEA
 16535                           fsr0l	equ	0xFE9
 16536                           wreg	equ	0xFE8
 16537                           postdec1	equ	0xFE5
 16538                           fsr1h	equ	0xFE2
 16539                           fsr1l	equ	0xFE1
 16540                           indf2	equ	0xFDF
 16541                           postinc2	equ	0xFDE
 16542                           postdec2	equ	0xFDD
 16543                           fsr2h	equ	0xFDA
 16544                           fsr2l	equ	0xFD9
 16545                           status	equ	0xFD8
 16546                           
 16547 ;; *************** function i2_printRTC *****************
 16548 ;; Defined at:
 16549 ;;		line 63 in file "RTC.c"
 16550 ;; Parameters:    Size  Location     Type
 16551 ;;		None
 16552 ;; Auto vars:     Size  Location     Type
 16553 ;;  printRTC       14   44[COMRAM] int [7]
 16554 ;;  printRTC        4   60[COMRAM] unsigned char [4]
 16555 ;;  printRTC        2   64[COMRAM] int 
 16556 ;;  printRTC        2   58[COMRAM] int 
 16557 ;; Return value:  Size  Location     Type
 16558 ;;                  1    wreg      void 
 16559 ;; Registers used:
 16560 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16561 ;; Tracked objects:
 16562 ;;		On entry : 0/0
 16563 ;;		On exit  : 0/0
 16564 ;;		Unchanged: 0/0
 16565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16566 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16567 ;;      Locals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16568 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16569 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16570 ;;Total ram usage:       25 bytes
 16571 ;; Hardware stack levels used:    1
 16572 ;; Hardware stack levels required when called:    3
 16573 ;; This function calls:
 16574 ;;		i2_getRTC
 16575 ;;		i2_lcdInst
 16576 ;;		i2_printf
 16577 ;;		i2_strcpy
 16578 ;; This function is called by:
 16579 ;;		i2_change_state_to_menu_start
 16580 ;; This function uses a non-reentrant model
 16581 ;;
 16582                           
 16583                           	psect	text60
 16584  00248E                     __ptext60:
 16585                           	opt stack 0
 16586  00248E                     i2_printRTC:
 16587                           	opt stack 18
 16588                           
 16589                           ;RTC.c: 64: getRTC();
 16590                           
 16591                           ;incstack = 0
 16592  00248E  EC83  F01E         	call	i2_getRTC	;wreg free
 16593                           
 16594                           ;RTC.c: 65: char month[] = "MMM";
 16595  002492  C133  F03D         	movff	printRTC@F3214,i2printRTC@month
 16596  002496  C134  F03E         	movff	printRTC@F3214+1,i2printRTC@month+1
 16597  00249A  C135  F03F         	movff	printRTC@F3214+2,i2printRTC@month+2
 16598  00249E  C136  F040         	movff	printRTC@F3214+3,i2printRTC@month+3
 16599                           
 16600                           ;RTC.c: 66: int INT_time[7];
 16601                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
 16602  0024A2  0E00               	movlw	0
 16603  0024A4  6E42               	movwf	i2printRTC@i+1,c
 16604  0024A6  0E00               	movlw	0
 16605  0024A8  6E41               	movwf	i2printRTC@i,c
 16606  0024AA  BE42               	btfsc	i2printRTC@i+1,7,c
 16607  0024AC  D006               	goto	i2l6117
 16608  0024AE  5042               	movf	i2printRTC@i+1,w,c
 16609  0024B0  E135               	bnz	i2l595
 16610  0024B2  0E07               	movlw	7
 16611  0024B4  5C41               	subwf	i2printRTC@i,w,c
 16612  0024B6  B0D8               	btfsc	status,0,c
 16613  0024B8  D031               	goto	i2l595
 16614  0024BA                     i2l6117:
 16615                           
 16616                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 16617  0024BA  0E24               	movlw	low _time
 16618  0024BC  2441               	addwf	i2printRTC@i,w,c
 16619  0024BE  6ED9               	movwf	fsr2l,c
 16620  0024C0  0E01               	movlw	high _time
 16621  0024C2  2042               	addwfc	i2printRTC@i+1,w,c
 16622  0024C4  6EDA               	movwf	fsr2h,c
 16623  0024C6  50DF               	movf	indf2,w,c
 16624  0024C8  6E2A               	movwf	??i2_printRTC& (0+255),c
 16625  0024CA  3A2A               	swapf	??i2_printRTC,f,c
 16626  0024CC  0E0F               	movlw	15
 16627  0024CE  162A               	andwf	??i2_printRTC,f,c
 16628  0024D0  0E0F               	movlw	15
 16629  0024D2  162A               	andwf	??i2_printRTC,f,c
 16630  0024D4  502A               	movf	??i2_printRTC,w,c
 16631  0024D6  0D0A               	mullw	10
 16632  0024D8  0E24               	movlw	low _time
 16633  0024DA  2441               	addwf	i2printRTC@i,w,c
 16634  0024DC  6ED9               	movwf	fsr2l,c
 16635  0024DE  0E01               	movlw	high _time
 16636  0024E0  2042               	addwfc	i2printRTC@i+1,w,c
 16637  0024E2  6EDA               	movwf	fsr2h,c
 16638  0024E4  50DF               	movf	indf2,w,c
 16639  0024E6  0B0F               	andlw	15
 16640  0024E8  6E2B               	movwf	(??i2_printRTC+1)& (0+255),c
 16641  0024EA  6A2C               	clrf	(??i2_printRTC+2)& (0+255),c
 16642  0024EC  50F3               	movf	prodl,w,c
 16643  0024EE  262B               	addwf	??i2_printRTC+1,f,c
 16644  0024F0  50F4               	movf	prodh,w,c
 16645  0024F2  222C               	addwfc	??i2_printRTC+2,f,c
 16646  0024F4  90D8               	bcf	status,0,c
 16647  0024F6  3441               	rlcf	i2printRTC@i,w,c
 16648  0024F8  6ED9               	movwf	fsr2l,c
 16649  0024FA  3442               	rlcf	i2printRTC@i+1,w,c
 16650  0024FC  6EDA               	movwf	fsr2h,c
 16651  0024FE  0E2D               	movlw	low i2printRTC@INT_time
 16652  002500  26D9               	addwf	fsr2l,f,c
 16653  002502  0E00               	movlw	high i2printRTC@INT_time
 16654  002504  22DA               	addwfc	fsr2h,f,c
 16655  002506  C02B  FFDE         	movff	??i2_printRTC+1,postinc2
 16656  00250A  C02C  FFDD         	movff	??i2_printRTC+2,postdec2
 16657  00250E  4A41               	infsnz	i2printRTC@i,f,c
 16658  002510  2A42               	incf	i2printRTC@i+1,f,c
 16659  002512  BE42               	btfsc	i2printRTC@i+1,7,c
 16660  002514  D7D2               	goto	i2l6117
 16661  002516  5042               	movf	i2printRTC@i+1,w,c
 16662  002518  E101               	bnz	i2u466_40
 16663  00251A  D7CB               	goto	L10
 16664  00251C                     i2u466_40:
 16665  00251C                     i2l595:
 16666                           
 16667                           ;RTC.c: 69: }
 16668                           ;RTC.c: 70: int RTC_month = INT_time[5];
 16669  00251C  C037  F03B         	movff	i2printRTC@INT_time+10,i2printRTC@RTC_month
 16670  002520  C038  F03C         	movff	i2printRTC@INT_time+11,i2printRTC@RTC_month+1
 16671                           
 16672                           ;RTC.c: 71: switch(RTC_month){
 16673  002524  D084               	goto	i2l6149
 16674  002526                     i2l6123:
 16675                           
 16676                           ;RTC.c: 73: strcpy(month, "JAN");
 16677  002526  0E3D               	movlw	low i2printRTC@month
 16678  002528  6E01               	movwf	i2strcpy@to,c
 16679  00252A  0E00               	movlw	high i2printRTC@month
 16680  00252C  6E02               	movwf	i2strcpy@to+1,c
 16681  00252E  0EDB               	movlw	low STR_8
 16682  002530  6E03               	movwf	i2strcpy@from,c
 16683  002532  0EFF               	movlw	high STR_8
 16684  002534  6E04               	movwf	i2strcpy@from+1,c
 16685  002536  EC81  F021         	call	i2_strcpy	;wreg free
 16686                           
 16687                           ;RTC.c: 74: break;
 16688  00253A  D0A6               	goto	i2l6151
 16689  00253C                     i2l6125:
 16690                           
 16691                           ;RTC.c: 76: strcpy(month, "FEB");
 16692  00253C  0E3D               	movlw	low i2printRTC@month
 16693  00253E  6E01               	movwf	i2strcpy@to,c
 16694  002540  0E00               	movlw	high i2printRTC@month
 16695  002542  6E02               	movwf	i2strcpy@to+1,c
 16696  002544  0ECB               	movlw	low STR_9
 16697  002546  6E03               	movwf	i2strcpy@from,c
 16698  002548  0EFF               	movlw	high STR_9
 16699  00254A  6E04               	movwf	i2strcpy@from+1,c
 16700  00254C  EC81  F021         	call	i2_strcpy	;wreg free
 16701                           
 16702                           ;RTC.c: 77: break;
 16703  002550  D09B               	goto	i2l6151
 16704  002552                     i2l6127:
 16705                           
 16706                           ;RTC.c: 79: strcpy(month, "MAR");
 16707  002552  0E3D               	movlw	low i2printRTC@month
 16708  002554  6E01               	movwf	i2strcpy@to,c
 16709  002556  0E00               	movlw	high i2printRTC@month
 16710  002558  6E02               	movwf	i2strcpy@to+1,c
 16711  00255A  0EE7               	movlw	low STR_10
 16712  00255C  6E03               	movwf	i2strcpy@from,c
 16713  00255E  0EFF               	movlw	high STR_10
 16714  002560  6E04               	movwf	i2strcpy@from+1,c
 16715  002562  EC81  F021         	call	i2_strcpy	;wreg free
 16716                           
 16717                           ;RTC.c: 80: break;
 16718  002566  D090               	goto	i2l6151
 16719  002568                     i2l6129:
 16720                           
 16721                           ;RTC.c: 82: strcpy(month, "APR");
 16722  002568  0E3D               	movlw	low i2printRTC@month
 16723  00256A  6E01               	movwf	i2strcpy@to,c
 16724  00256C  0E00               	movlw	high i2printRTC@month
 16725  00256E  6E02               	movwf	i2strcpy@to+1,c
 16726  002570  0EEB               	movlw	low STR_11
 16727  002572  6E03               	movwf	i2strcpy@from,c
 16728  002574  0EFF               	movlw	high STR_11
 16729  002576  6E04               	movwf	i2strcpy@from+1,c
 16730  002578  EC81  F021         	call	i2_strcpy	;wreg free
 16731                           
 16732                           ;RTC.c: 83: break;
 16733  00257C  D085               	goto	i2l6151
 16734  00257E                     i2l6131:
 16735                           
 16736                           ;RTC.c: 85: strcpy(month, "MAY");
 16737  00257E  0E3D               	movlw	low i2printRTC@month
 16738  002580  6E01               	movwf	i2strcpy@to,c
 16739  002582  0E00               	movlw	high i2printRTC@month
 16740  002584  6E02               	movwf	i2strcpy@to+1,c
 16741  002586  0EFB               	movlw	low STR_12
 16742  002588  6E03               	movwf	i2strcpy@from,c
 16743  00258A  0EFF               	movlw	high STR_12
 16744  00258C  6E04               	movwf	i2strcpy@from+1,c
 16745  00258E  EC81  F021         	call	i2_strcpy	;wreg free
 16746                           
 16747                           ;RTC.c: 86: break;
 16748  002592  D07A               	goto	i2l6151
 16749  002594                     i2l6133:
 16750                           
 16751                           ;RTC.c: 88: strcpy(month, "JUN");
 16752  002594  0E3D               	movlw	low i2printRTC@month
 16753  002596  6E01               	movwf	i2strcpy@to,c
 16754  002598  0E00               	movlw	high i2printRTC@month
 16755  00259A  6E02               	movwf	i2strcpy@to+1,c
 16756  00259C  0EDF               	movlw	low STR_13
 16757  00259E  6E03               	movwf	i2strcpy@from,c
 16758  0025A0  0EFF               	movlw	high STR_13
 16759  0025A2  6E04               	movwf	i2strcpy@from+1,c
 16760  0025A4  EC81  F021         	call	i2_strcpy	;wreg free
 16761                           
 16762                           ;RTC.c: 89: break;
 16763  0025A8  D06F               	goto	i2l6151
 16764  0025AA                     i2l6135:
 16765                           
 16766                           ;RTC.c: 91: strcpy(month, "JUL");
 16767  0025AA  0E3D               	movlw	low i2printRTC@month
 16768  0025AC  6E01               	movwf	i2strcpy@to,c
 16769  0025AE  0E00               	movlw	high i2printRTC@month
 16770  0025B0  6E02               	movwf	i2strcpy@to+1,c
 16771  0025B2  0ED7               	movlw	low STR_14
 16772  0025B4  6E03               	movwf	i2strcpy@from,c
 16773  0025B6  0EFF               	movlw	high STR_14
 16774  0025B8  6E04               	movwf	i2strcpy@from+1,c
 16775  0025BA  EC81  F021         	call	i2_strcpy	;wreg free
 16776                           
 16777                           ;RTC.c: 92: break;
 16778  0025BE  D064               	goto	i2l6151
 16779  0025C0                     i2l6137:
 16780                           
 16781                           ;RTC.c: 94: strcpy(month, "AUG");
 16782  0025C0  0E3D               	movlw	low i2printRTC@month
 16783  0025C2  6E01               	movwf	i2strcpy@to,c
 16784  0025C4  0E00               	movlw	high i2printRTC@month
 16785  0025C6  6E02               	movwf	i2strcpy@to+1,c
 16786  0025C8  0ED3               	movlw	low STR_15
 16787  0025CA  6E03               	movwf	i2strcpy@from,c
 16788  0025CC  0EFF               	movlw	high STR_15
 16789  0025CE  6E04               	movwf	i2strcpy@from+1,c
 16790  0025D0  EC81  F021         	call	i2_strcpy	;wreg free
 16791                           
 16792                           ;RTC.c: 95: break;
 16793  0025D4  D059               	goto	i2l6151
 16794  0025D6                     i2l6139:
 16795                           
 16796                           ;RTC.c: 97: strcpy(month, "SEP");
 16797  0025D6  0E3D               	movlw	low i2printRTC@month
 16798  0025D8  6E01               	movwf	i2strcpy@to,c
 16799  0025DA  0E00               	movlw	high i2printRTC@month
 16800  0025DC  6E02               	movwf	i2strcpy@to+1,c
 16801  0025DE  0EE3               	movlw	low STR_16
 16802  0025E0  6E03               	movwf	i2strcpy@from,c
 16803  0025E2  0EFF               	movlw	high STR_16
 16804  0025E4  6E04               	movwf	i2strcpy@from+1,c
 16805  0025E6  EC81  F021         	call	i2_strcpy	;wreg free
 16806                           
 16807                           ;RTC.c: 98: break;
 16808  0025EA  D04E               	goto	i2l6151
 16809  0025EC                     i2l6141:
 16810                           
 16811                           ;RTC.c: 100: strcpy(month, "OCT");
 16812  0025EC  0E3D               	movlw	low i2printRTC@month
 16813  0025EE  6E01               	movwf	i2strcpy@to,c
 16814  0025F0  0E00               	movlw	high i2printRTC@month
 16815  0025F2  6E02               	movwf	i2strcpy@to+1,c
 16816  0025F4  0EF3               	movlw	low STR_17
 16817  0025F6  6E03               	movwf	i2strcpy@from,c
 16818  0025F8  0EFF               	movlw	high STR_17
 16819  0025FA  6E04               	movwf	i2strcpy@from+1,c
 16820  0025FC  EC81  F021         	call	i2_strcpy	;wreg free
 16821                           
 16822                           ;RTC.c: 101: break;
 16823  002600  D043               	goto	i2l6151
 16824  002602                     i2l6143:
 16825                           
 16826                           ;RTC.c: 103: strcpy(month, "NOV");
 16827  002602  0E3D               	movlw	low i2printRTC@month
 16828  002604  6E01               	movwf	i2strcpy@to,c
 16829  002606  0E00               	movlw	high i2printRTC@month
 16830  002608  6E02               	movwf	i2strcpy@to+1,c
 16831  00260A  0EF7               	movlw	low STR_18
 16832  00260C  6E03               	movwf	i2strcpy@from,c
 16833  00260E  0EFF               	movlw	high STR_18
 16834  002610  6E04               	movwf	i2strcpy@from+1,c
 16835  002612  EC81  F021         	call	i2_strcpy	;wreg free
 16836                           
 16837                           ;RTC.c: 104: break;
 16838  002616  D038               	goto	i2l6151
 16839  002618                     i2l6145:
 16840                           
 16841                           ;RTC.c: 106: strcpy(month, "DEC");
 16842  002618  0E3D               	movlw	low i2printRTC@month
 16843  00261A  6E01               	movwf	i2strcpy@to,c
 16844  00261C  0E00               	movlw	high i2printRTC@month
 16845  00261E  6E02               	movwf	i2strcpy@to+1,c
 16846  002620  0ECF               	movlw	low STR_19
 16847  002622  6E03               	movwf	i2strcpy@from,c
 16848  002624  0EFF               	movlw	high STR_19
 16849  002626  6E04               	movwf	i2strcpy@from+1,c
 16850  002628  EC81  F021         	call	i2_strcpy	;wreg free
 16851                           
 16852                           ;RTC.c: 108: }
 16853                           
 16854                           ;RTC.c: 107: break;
 16855  00262C  D02D               	goto	i2l6151
 16856  00262E                     i2l6149:
 16857  00262E  C03B  F02A         	movff	i2printRTC@RTC_month,??i2_printRTC
 16858  002632  C03C  F02B         	movff	i2printRTC@RTC_month+1,??i2_printRTC+1
 16859                           
 16860                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 16861                           ; Switch size 1, requested type "space"
 16862                           ; Number of cases is 1, Range of values is 0 to 0
 16863                           ; switch strategies available:
 16864                           ; Name         Instructions Cycles
 16865                           ; simple_byte            4     3 (average)
 16866                           ;	Chosen strategy is simple_byte
 16867  002636  502B               	movf	??i2_printRTC+1,w,c
 16868  002638  0A00               	xorlw	0	; case 0
 16869  00263A  A4D8               	btfss	status,2,c
 16870  00263C  D025               	goto	i2l6151
 16871                           
 16872                           ; Switch size 1, requested type "space"
 16873                           ; Number of cases is 12, Range of values is 1 to 12
 16874                           ; switch strategies available:
 16875                           ; Name         Instructions Cycles
 16876                           ; simple_byte           37    19 (average)
 16877                           ;	Chosen strategy is simple_byte
 16878  00263E  502A               	movf	??i2_printRTC,w,c
 16879  002640  0A01               	xorlw	1	; case 1
 16880  002642  B4D8               	btfsc	status,2,c
 16881  002644  D770               	goto	i2l6123
 16882  002646  0A03               	xorlw	3	; case 2
 16883  002648  B4D8               	btfsc	status,2,c
 16884  00264A  D778               	goto	i2l6125
 16885  00264C  0A01               	xorlw	1	; case 3
 16886  00264E  B4D8               	btfsc	status,2,c
 16887  002650  D780               	goto	i2l6127
 16888  002652  0A07               	xorlw	7	; case 4
 16889  002654  B4D8               	btfsc	status,2,c
 16890  002656  D788               	goto	i2l6129
 16891  002658  0A01               	xorlw	1	; case 5
 16892  00265A  B4D8               	btfsc	status,2,c
 16893  00265C  D790               	goto	i2l6131
 16894  00265E  0A03               	xorlw	3	; case 6
 16895  002660  B4D8               	btfsc	status,2,c
 16896  002662  D798               	goto	i2l6133
 16897  002664  0A01               	xorlw	1	; case 7
 16898  002666  B4D8               	btfsc	status,2,c
 16899  002668  D7A0               	goto	i2l6135
 16900  00266A  0A0F               	xorlw	15	; case 8
 16901  00266C  B4D8               	btfsc	status,2,c
 16902  00266E  D7A8               	goto	i2l6137
 16903  002670  0A01               	xorlw	1	; case 9
 16904  002672  B4D8               	btfsc	status,2,c
 16905  002674  D7B0               	goto	i2l6139
 16906  002676  0A03               	xorlw	3	; case 10
 16907  002678  B4D8               	btfsc	status,2,c
 16908  00267A  D7B8               	goto	i2l6141
 16909  00267C  0A01               	xorlw	1	; case 11
 16910  00267E  B4D8               	btfsc	status,2,c
 16911  002680  D7C0               	goto	i2l6143
 16912  002682  0A07               	xorlw	7	; case 12
 16913  002684  B4D8               	btfsc	status,2,c
 16914  002686  D7C8               	goto	i2l6145
 16915  002688                     i2l6151:
 16916                           
 16917                           ;RTC.c: 109: lcdInst(0b10000000);;
 16918  002688  0E80               	movlw	128
 16919  00268A  ECCF  F023         	call	i2_lcdInst
 16920                           
 16921                           ;RTC.c: 110: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 16922  00268E  0E30               	movlw	low STR_21
 16923  002690  6E0D               	movwf	i2printf@f,c
 16924  002692  0EFB               	movlw	high STR_21
 16925  002694  6E0E               	movwf	i2printf@f+1,c
 16926  002696  C035  F00F         	movff	i2printRTC@INT_time+8,?i2_printf+2
 16927  00269A  C036  F010         	movff	i2printRTC@INT_time+9,?i2_printf+3
 16928  00269E  0E3D               	movlw	low i2printRTC@month
 16929  0026A0  6E11               	movwf	?i2_printf+4,c
 16930  0026A2  0E00               	movlw	high i2printRTC@month
 16931  0026A4  6E12               	movwf	?i2_printf+5,c
 16932  0026A6  C031  F013         	movff	i2printRTC@INT_time+4,?i2_printf+6
 16933  0026AA  C032  F014         	movff	i2printRTC@INT_time+5,?i2_printf+7
 16934  0026AE  C02F  F015         	movff	i2printRTC@INT_time+2,?i2_printf+8
 16935  0026B2  C030  F016         	movff	i2printRTC@INT_time+3,?i2_printf+9
 16936  0026B6  C02D  F017         	movff	i2printRTC@INT_time,?i2_printf+10
 16937  0026BA  C02E  F018         	movff	i2printRTC@INT_time+1,?i2_printf+11
 16938  0026BE  ECD4  F00A         	call	i2_printf	;wreg free
 16939  0026C2  0012               	return		;funcret
 16940  0026C4                     __end_ofi2_printRTC:
 16941                           	opt stack 0
 16942                           pclatu	equ	0xFFB
 16943                           pclath	equ	0xFFA
 16944                           tblptru	equ	0xFF8
 16945                           tblptrh	equ	0xFF7
 16946                           tblptrl	equ	0xFF6
 16947                           tablat	equ	0xFF5
 16948                           prodh	equ	0xFF4
 16949                           prodl	equ	0xFF3
 16950                           intcon	equ	0xFF2
 16951                           intcon2	equ	0xFF1
 16952                           intcon3	equ	0xFF0
 16953                           indf0	equ	0xFEF
 16954                           postinc0	equ	0xFEE
 16955                           fsr0h	equ	0xFEA
 16956                           fsr0l	equ	0xFE9
 16957                           wreg	equ	0xFE8
 16958                           postdec1	equ	0xFE5
 16959                           fsr1h	equ	0xFE2
 16960                           fsr1l	equ	0xFE1
 16961                           indf2	equ	0xFDF
 16962                           postinc2	equ	0xFDE
 16963                           postdec2	equ	0xFDD
 16964                           fsr2h	equ	0xFDA
 16965                           fsr2l	equ	0xFD9
 16966                           status	equ	0xFD8
 16967                           
 16968 ;; *************** function i2_strcpy *****************
 16969 ;; Defined at:
 16970 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 16971 ;; Parameters:    Size  Location     Type
 16972 ;;  to              2    0[COMRAM] PTR unsigned char 
 16973 ;;		 -> printRTC@month(4), UI@month(4), 
 16974 ;;  from            2    2[COMRAM] PTR const unsigned char 
 16975 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
 16976 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
 16977 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
 16978 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
 16979 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
 16980 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
 16981 ;;		 -> STR_8(4), 
 16982 ;; Auto vars:     Size  Location     Type
 16983 ;;  strcpy          2    4[COMRAM] PTR unsigned char 
 16984 ;;		 -> printRTC@month(4), UI@month(4), 
 16985 ;; Return value:  Size  Location     Type
 16986 ;;                  2    0[COMRAM] PTR unsigned char 
 16987 ;; Registers used:
 16988 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 16989 ;; Tracked objects:
 16990 ;;		On entry : 0/0
 16991 ;;		On exit  : 0/0
 16992 ;;		Unchanged: 0/0
 16993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16994 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16995 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16996 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16997 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16998 ;;Total ram usage:        6 bytes
 16999 ;; Hardware stack levels used:    1
 17000 ;; This function calls:
 17001 ;;		Nothing
 17002 ;; This function is called by:
 17003 ;;		i2_printRTC
 17004 ;; This function uses a non-reentrant model
 17005 ;;
 17006                           
 17007                           	psect	text61
 17008  004302                     __ptext61:
 17009                           	opt stack 0
 17010  004302                     i2_strcpy:
 17011                           	opt stack 20
 17012                           
 17013                           ;incstack = 0
 17014  004302  C001  F005         	movff	i2strcpy@to,i2strcpy@cp
 17015  004306  C002  F006         	movff	i2strcpy@to+1,i2strcpy@cp+1
 17016  00430A  D004               	goto	i2l5791
 17017  00430C                     i2l5789:
 17018  00430C  4A05               	infsnz	i2strcpy@cp,f,c
 17019  00430E  2A06               	incf	i2strcpy@cp+1,f,c
 17020  004310  4A03               	infsnz	i2strcpy@from,f,c
 17021  004312  2A04               	incf	i2strcpy@from+1,f,c
 17022  004314                     i2l5791:
 17023  004314  C003  FFF6         	movff	i2strcpy@from,tblptrl
 17024  004318  C004  FFF7         	movff	i2strcpy@from+1,tblptrh
 17025  00431C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17026  00431C  6AF8               	clrf	tblptru,c
 17027  00431E                     	endif
 17028  00431E                     	if	0	;tblptru may be non-zero
 17029  00431E                     	endif
 17030  00431E  C005  FFD9         	movff	i2strcpy@cp,fsr2l
 17031  004322  C006  FFDA         	movff	i2strcpy@cp+1,fsr2h
 17032  004326  0008               	tblrd		*
 17033  004328  CFF5 FFDF          	movff	tablat,indf2
 17034  00432C  50DF               	movf	indf2,w,c
 17035  00432E  B4D8               	btfsc	status,2,c
 17036  004330  0012               	return	
 17037  004332  D7EC               	goto	i2l5789
 17038  004334                     __end_ofi2_strcpy:
 17039                           	opt stack 0
 17040                           pclatu	equ	0xFFB
 17041                           pclath	equ	0xFFA
 17042                           tblptru	equ	0xFF8
 17043                           tblptrh	equ	0xFF7
 17044                           tblptrl	equ	0xFF6
 17045                           tablat	equ	0xFF5
 17046                           prodh	equ	0xFF4
 17047                           prodl	equ	0xFF3
 17048                           intcon	equ	0xFF2
 17049                           intcon2	equ	0xFF1
 17050                           intcon3	equ	0xFF0
 17051                           indf0	equ	0xFEF
 17052                           postinc0	equ	0xFEE
 17053                           fsr0h	equ	0xFEA
 17054                           fsr0l	equ	0xFE9
 17055                           wreg	equ	0xFE8
 17056                           postdec1	equ	0xFE5
 17057                           fsr1h	equ	0xFE2
 17058                           fsr1l	equ	0xFE1
 17059                           indf2	equ	0xFDF
 17060                           postinc2	equ	0xFDE
 17061                           postdec2	equ	0xFDD
 17062                           fsr2h	equ	0xFDA
 17063                           fsr2l	equ	0xFD9
 17064                           status	equ	0xFD8
 17065                           
 17066 ;; *************** function _inputHandler *****************
 17067 ;; Defined at:
 17068 ;;		line 370 in file "UI.c"
 17069 ;; Parameters:    Size  Location     Type
 17070 ;;		None
 17071 ;; Auto vars:     Size  Location     Type
 17072 ;;		None
 17073 ;; Return value:  Size  Location     Type
 17074 ;;                  2   41[COMRAM] int 
 17075 ;; Registers used:
 17076 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17077 ;; Tracked objects:
 17078 ;;		On entry : 0/0
 17079 ;;		On exit  : 0/0
 17080 ;;		Unchanged: 0/0
 17081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17082 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17083 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17084 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17085 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17086 ;;Total ram usage:        4 bytes
 17087 ;; Hardware stack levels used:    1
 17088 ;; Hardware stack levels required when called:    4
 17089 ;; This function calls:
 17090 ;;		_change_state_to_logs_11
 17091 ;;		_change_state_to_logs_12
 17092 ;;		_change_state_to_logs_22
 17093 ;;		_change_state_to_logs_23
 17094 ;;		_change_state_to_logs_33
 17095 ;;		_change_state_to_logs_34
 17096 ;;		_change_state_to_menu_11
 17097 ;;		_change_state_to_menu_23
 17098 ;;		i2_change_state_to_menu_12
 17099 ;;		i2_change_state_to_menu_22
 17100 ;; This function is called by:
 17101 ;;		_updateMenu
 17102 ;; This function uses a non-reentrant model
 17103 ;;
 17104                           
 17105                           	psect	text62
 17106  0028B6                     __ptext62:
 17107                           	opt stack 0
 17108  0028B6                     _inputHandler:
 17109                           	opt stack 18
 17110                           
 17111                           ;UI.c: 375: if(firstboot){
 17112                           
 17113                           ;incstack = 0
 17114  0028B6  5075               	movf	_firstboot,w,c
 17115  0028B8  1076               	iorwf	_firstboot+1,w,c
 17116  0028BA  B4D8               	btfsc	status,2,c
 17117  0028BC  D00B               	goto	i2l6219
 17118                           
 17119                           ;UI.c: 376: change_state_to_menu_11();
 17120  0028BE  ECE2  F021         	call	_change_state_to_menu_11	;wreg free
 17121                           
 17122                           ;UI.c: 377: firstboot = 0;
 17123  0028C2  0E00               	movlw	0
 17124  0028C4  6E76               	movwf	_firstboot+1,c
 17125  0028C6  0E00               	movlw	0
 17126  0028C8  6E75               	movwf	_firstboot,c
 17127                           
 17128                           ;UI.c: 378: return 0;
 17129  0028CA  0E00               	movlw	0
 17130  0028CC  6E2B               	movwf	?_inputHandler+1,c
 17131  0028CE  0E00               	movlw	0
 17132  0028D0  6E2A               	movwf	?_inputHandler,c
 17133  0028D2  0012               	return	
 17134  0028D4                     i2l6219:
 17135                           
 17136                           ;UI.c: 379: }
 17137                           ;UI.c: 380: if (logstate){
 17138  0028D4  0100               	movlb	0	; () banked
 17139  0028D6  51F6               	movf	_logstate& (0+255),w,b
 17140  0028D8  0100               	movlb	0	; () banked
 17141  0028DA  11F7               	iorwf	(_logstate+1)& (0+255),w,b
 17142  0028DC  B4D8               	btfsc	status,2,c
 17143  0028DE  D0C7               	goto	i2l6337
 17144                           
 17145                           ; BSR set to: 0
 17146                           ;UI.c: 381: if(input == 'C' && PORTBbits.RB1 == 1){
 17147  0028E0  0E43               	movlw	67
 17148  0028E2  187D               	xorwf	_input,w,c	;volatile
 17149  0028E4  A4D8               	btfss	status,2,c
 17150  0028E6  D012               	goto	i2l6237
 17151                           
 17152                           ; BSR set to: 0
 17153  0028E8  B281               	btfsc	3969,1,c	;volatile
 17154  0028EA  D009               	goto	i2l6229
 17155  0028EC  D00F               	goto	i2l6237
 17156  0028EE                     i2l6227:
 17157                           
 17158                           ;UI.c: 384: _delay((unsigned long)((10)*(32000000/4000.0)));
 17159  0028EE  0E68               	movlw	104
 17160  0028F0  6E2C               	movwf	??_inputHandler& (0+255),c
 17161  0028F2  0EE4               	movlw	228
 17162  0028F4                     i2u825_47:
 17163  0028F4  2EE8               	decfsz	wreg,f,c
 17164  0028F6  D7FE               	bra	i2u825_47
 17165  0028F8  2E2C               	decfsz	??_inputHandler& (0+255),f,c
 17166  0028FA  D7FC               	bra	i2u825_47
 17167  0028FC  D000               	nop2	
 17168  0028FE                     i2l6229:
 17169  0028FE  B281               	btfsc	3969,1,c	;volatile
 17170  002900  D7F6               	goto	i2l6227
 17171  002902                     i2l6231:
 17172                           
 17173                           ;UI.c: 385: }
 17174                           ;UI.c: 386: return 0;
 17175  002902  0E00               	movlw	0
 17176  002904  6E2B               	movwf	?_inputHandler+1,c
 17177  002906  0E00               	movlw	0
 17178  002908  6E2A               	movwf	?_inputHandler,c
 17179  00290A  0012               	return	
 17180  00290C                     i2l6237:
 17181                           
 17182                           ;UI.c: 388: else if (input == 'D'){
 17183  00290C  0E44               	movlw	68
 17184  00290E  187D               	xorwf	_input,w,c	;volatile
 17185  002910  A4D8               	btfss	status,2,c
 17186  002912  D7F7               	goto	i2l6231
 17187                           
 17188                           ;UI.c: 390: logstate = 0;
 17189  002914  0E00               	movlw	0
 17190  002916  0100               	movlb	0	; () banked
 17191  002918  6FF7               	movwf	(_logstate+1)& (0+255),b
 17192  00291A  0E00               	movlw	0
 17193  00291C  6FF6               	movwf	_logstate& (0+255),b
 17194                           
 17195                           ;UI.c: 391: switch(cur_state){
 17196  00291E  D012               	goto	i2l6255
 17197  002920                     i2l6241:
 17198                           
 17199                           ;UI.c: 393: change_state_to_logs_11();
 17200  002920  EC5A  F022         	call	_change_state_to_logs_11	;wreg free
 17201                           
 17202                           ;UI.c: 394: break;
 17203  002924  D7EE               	goto	i2l6231
 17204  002926                     i2l6243:
 17205                           
 17206                           ;UI.c: 396: change_state_to_logs_12();
 17207  002926  EC42  F022         	call	_change_state_to_logs_12	;wreg free
 17208                           
 17209                           ;UI.c: 397: break;
 17210  00292A  D7EB               	goto	i2l6231
 17211  00292C                     i2l6245:
 17212                           
 17213                           ;UI.c: 399: change_state_to_logs_22();
 17214  00292C  EC2A  F022         	call	_change_state_to_logs_22	;wreg free
 17215                           
 17216                           ;UI.c: 400: break;
 17217  002930  D7E8               	goto	i2l6231
 17218  002932                     i2l6247:
 17219                           
 17220                           ;UI.c: 402: change_state_to_logs_23();
 17221  002932  EC89  F022         	call	_change_state_to_logs_23	;wreg free
 17222                           
 17223                           ;UI.c: 403: break;
 17224  002936  D7E5               	goto	i2l6231
 17225  002938                     i2l6249:
 17226                           
 17227                           ;UI.c: 405: change_state_to_logs_33();
 17228  002938  EC12  F022         	call	_change_state_to_logs_33	;wreg free
 17229                           
 17230                           ;UI.c: 406: break;
 17231  00293C  D7E2               	goto	i2l6231
 17232  00293E                     i2l6251:
 17233                           
 17234                           ;UI.c: 408: change_state_to_logs_34();
 17235  00293E  ECFA  F021         	call	_change_state_to_logs_34	;wreg free
 17236                           
 17237                           ;UI.c: 410: }
 17238                           
 17239                           ;UI.c: 409: break;
 17240  002942  D7DF               	goto	i2l6231
 17241  002944                     i2l6255:
 17242  002944  C0DE  F02C         	movff	_cur_state,??_inputHandler
 17243  002948  C0DF  F02D         	movff	_cur_state+1,??_inputHandler+1
 17244                           
 17245                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 17246                           ; Switch size 1, requested type "space"
 17247                           ; Number of cases is 2, Range of values is 3 to 4
 17248                           ; switch strategies available:
 17249                           ; Name         Instructions Cycles
 17250                           ; simple_byte            7     4 (average)
 17251                           ;	Chosen strategy is simple_byte
 17252  00294C  502D               	movf	??_inputHandler+1,w,c
 17253  00294E  0A03               	xorlw	3	; case 3
 17254  002950  B4D8               	btfsc	status,2,c
 17255  002952  D004               	goto	i2l8469
 17256  002954  0A07               	xorlw	7	; case 4
 17257  002956  B4D8               	btfsc	status,2,c
 17258  002958  D00F               	goto	i2l8471
 17259  00295A  D7D3               	goto	i2l6231
 17260  00295C                     i2l8469:
 17261                           
 17262                           ; Switch size 1, requested type "space"
 17263                           ; Number of cases is 4, Range of values is 243 to 255
 17264                           ; switch strategies available:
 17265                           ; Name         Instructions Cycles
 17266                           ; simple_byte           13     7 (average)
 17267                           ;	Chosen strategy is simple_byte
 17268  00295C  502C               	movf	??_inputHandler,w,c
 17269  00295E  0AF3               	xorlw	243	; case 243
 17270  002960  B4D8               	btfsc	status,2,c
 17271  002962  D7DE               	goto	i2l6241
 17272  002964  0A07               	xorlw	7	; case 244
 17273  002966  B4D8               	btfsc	status,2,c
 17274  002968  D7DE               	goto	i2l6243
 17275  00296A  0A0A               	xorlw	10	; case 254
 17276  00296C  B4D8               	btfsc	status,2,c
 17277  00296E  D7DE               	goto	i2l6245
 17278  002970  0A01               	xorlw	1	; case 255
 17279  002972  B4D8               	btfsc	status,2,c
 17280  002974  D7DE               	goto	i2l6247
 17281  002976  D7C5               	goto	i2l6231
 17282  002978                     i2l8471:
 17283                           
 17284                           ; Switch size 1, requested type "space"
 17285                           ; Number of cases is 2, Range of values is 9 to 10
 17286                           ; switch strategies available:
 17287                           ; Name         Instructions Cycles
 17288                           ; simple_byte            7     4 (average)
 17289                           ;	Chosen strategy is simple_byte
 17290  002978  502C               	movf	??_inputHandler,w,c
 17291  00297A  0A09               	xorlw	9	; case 9
 17292  00297C  B4D8               	btfsc	status,2,c
 17293  00297E  D7DC               	goto	i2l6249
 17294  002980  0A03               	xorlw	3	; case 10
 17295  002982  B4D8               	btfsc	status,2,c
 17296  002984  D7DC               	goto	i2l6251
 17297  002986  D7BD               	goto	i2l6231
 17298  002988                     i2l6267:
 17299                           
 17300                           ;UI.c: 420: if(cur_state == 11){
 17301  002988  0E0B               	movlw	11
 17302  00298A  0100               	movlb	0	; () banked
 17303  00298C  19DE               	xorwf	_cur_state& (0+255),w,b
 17304  00298E  0100               	movlb	0	; () banked
 17305  002990  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
 17306  002992  A4D8               	btfss	status,2,c
 17307  002994  D005               	goto	i2l6275
 17308                           
 17309                           ; BSR set to: 0
 17310                           ;UI.c: 421: return 0;
 17311  002996  0E00               	movlw	0
 17312  002998  6E2B               	movwf	?_inputHandler+1,c
 17313  00299A  0E00               	movlw	0
 17314  00299C  6E2A               	movwf	?_inputHandler,c
 17315                           
 17316                           ; BSR set to: 0
 17317  00299E  0012               	return	
 17318  0029A0                     i2l6275:
 17319                           
 17320                           ; BSR set to: 0
 17321                           ;UI.c: 423: else{
 17322                           ;UI.c: 424: change_state_to_menu_11();
 17323  0029A0  ECE2  F021         	call	_change_state_to_menu_11	;wreg free
 17324                           
 17325                           ;UI.c: 425: }
 17326                           ;UI.c: 426: return 0;
 17327  0029A4  0E00               	movlw	0
 17328  0029A6  6E2B               	movwf	?_inputHandler+1,c
 17329  0029A8  0E00               	movlw	0
 17330  0029AA  6E2A               	movwf	?_inputHandler,c
 17331  0029AC  0012               	return	
 17332  0029AE                     i2l6281:
 17333                           
 17334                           ;UI.c: 428: if(cur_state == 22 | cur_state == 12){
 17335  0029AE  0E16               	movlw	22
 17336  0029B0  0100               	movlb	0	; () banked
 17337  0029B2  19DE               	xorwf	_cur_state& (0+255),w,b
 17338  0029B4  0100               	movlb	0	; () banked
 17339  0029B6  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
 17340  0029B8  B4D8               	btfsc	status,2,c
 17341  0029BA  D007               	goto	i2l6285
 17342                           
 17343                           ; BSR set to: 0
 17344  0029BC  0E0C               	movlw	12
 17345  0029BE  0100               	movlb	0	; () banked
 17346  0029C0  19DE               	xorwf	_cur_state& (0+255),w,b
 17347  0029C2  0100               	movlb	0	; () banked
 17348  0029C4  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
 17349  0029C6  A4D8               	btfss	status,2,c
 17350  0029C8  D005               	goto	i2l6291
 17351  0029CA                     i2l6285:
 17352                           
 17353                           ; BSR set to: 0
 17354                           ;UI.c: 429: return 0;
 17355  0029CA  0E00               	movlw	0
 17356  0029CC  6E2B               	movwf	?_inputHandler+1,c
 17357  0029CE  0E00               	movlw	0
 17358  0029D0  6E2A               	movwf	?_inputHandler,c
 17359                           
 17360                           ; BSR set to: 0
 17361  0029D2  0012               	return	
 17362  0029D4                     i2l6291:
 17363                           
 17364                           ; BSR set to: 0
 17365                           ;UI.c: 431: else if(cur_state == 23){
 17366  0029D4  0E17               	movlw	23
 17367  0029D6  0100               	movlb	0	; () banked
 17368  0029D8  19DE               	xorwf	_cur_state& (0+255),w,b
 17369  0029DA  0100               	movlb	0	; () banked
 17370  0029DC  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
 17371  0029DE  A4D8               	btfss	status,2,c
 17372  0029E0  D003               	goto	i2l6295
 17373                           
 17374                           ; BSR set to: 0
 17375                           ;UI.c: 432: change_state_to_menu_22();
 17376  0029E2  EC9A  F021         	call	i2_change_state_to_menu_22	;wreg free
 17377                           
 17378                           ;UI.c: 433: }
 17379  0029E6  D002               	goto	i2l6297
 17380  0029E8                     i2l6295:
 17381                           
 17382                           ;UI.c: 434: else{
 17383                           ;UI.c: 435: change_state_to_menu_12();
 17384  0029E8  ECB2  F021         	call	i2_change_state_to_menu_12	;wreg free
 17385  0029EC                     i2l6297:
 17386                           
 17387                           ;UI.c: 436: }
 17388                           ;UI.c: 437: return 0;
 17389  0029EC  0E00               	movlw	0
 17390  0029EE  6E2B               	movwf	?_inputHandler+1,c
 17391  0029F0  0E00               	movlw	0
 17392  0029F2  6E2A               	movwf	?_inputHandler,c
 17393  0029F4  0012               	return	
 17394  0029F6                     i2l6301:
 17395                           
 17396                           ;UI.c: 439: if(cur_state == 23){
 17397  0029F6  0E17               	movlw	23
 17398  0029F8  0100               	movlb	0	; () banked
 17399  0029FA  19DE               	xorwf	_cur_state& (0+255),w,b
 17400  0029FC  0100               	movlb	0	; () banked
 17401  0029FE  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
 17402  002A00  A4D8               	btfss	status,2,c
 17403  002A02  D005               	goto	i2l6309
 17404                           
 17405                           ; BSR set to: 0
 17406                           ;UI.c: 440: return 0;
 17407  002A04  0E00               	movlw	0
 17408  002A06  6E2B               	movwf	?_inputHandler+1,c
 17409  002A08  0E00               	movlw	0
 17410  002A0A  6E2A               	movwf	?_inputHandler,c
 17411                           
 17412                           ; BSR set to: 0
 17413  002A0C  0012               	return	
 17414  002A0E                     i2l6309:
 17415                           
 17416                           ; BSR set to: 0
 17417                           ;UI.c: 442: else{
 17418                           ;UI.c: 443: change_state_to_menu_23();
 17419  002A0E  ECCA  F021         	call	_change_state_to_menu_23	;wreg free
 17420                           
 17421                           ;UI.c: 444: }
 17422                           ;UI.c: 445: return 0;
 17423  002A12  0E00               	movlw	0
 17424  002A14  6E2B               	movwf	?_inputHandler+1,c
 17425  002A16  0E00               	movlw	0
 17426  002A18  6E2A               	movwf	?_inputHandler,c
 17427  002A1A  0012               	return	
 17428  002A1C                     i2l6315:
 17429                           
 17430                           ;UI.c: 448: up = 1;
 17431  002A1C  0E00               	movlw	0
 17432  002A1E  6E78               	movwf	_up+1,c
 17433  002A20  0E01               	movlw	1
 17434  002A22  6E77               	movwf	_up,c
 17435                           
 17436                           ;UI.c: 449: return 1;
 17437  002A24  0E00               	movlw	0
 17438  002A26  6E2B               	movwf	?_inputHandler+1,c
 17439  002A28  0E01               	movlw	1
 17440  002A2A  6E2A               	movwf	?_inputHandler,c
 17441  002A2C  0012               	return	
 17442  002A2E                     i2l6319:
 17443                           
 17444                           ;UI.c: 451: down = 1;
 17445  002A2E  0E00               	movlw	0
 17446  002A30  6E6A               	movwf	_down+1,c
 17447  002A32  0E01               	movlw	1
 17448  002A34  6E69               	movwf	_down,c
 17449                           
 17450                           ;UI.c: 452: return 1;
 17451  002A36  0E00               	movlw	0
 17452  002A38  6E2B               	movwf	?_inputHandler+1,c
 17453  002A3A  0E01               	movlw	1
 17454  002A3C  6E2A               	movwf	?_inputHandler,c
 17455  002A3E  0012               	return	
 17456  002A40                     i2l6323:
 17457                           
 17458                           ;UI.c: 454: enter = 1;
 17459  002A40  0E00               	movlw	0
 17460  002A42  6E6C               	movwf	_enter+1,c
 17461  002A44  0E01               	movlw	1
 17462  002A46  6E6B               	movwf	_enter,c
 17463                           
 17464                           ;UI.c: 455: return 1;
 17465  002A48  0E00               	movlw	0
 17466  002A4A  6E2B               	movwf	?_inputHandler+1,c
 17467  002A4C  0E01               	movlw	1
 17468  002A4E  6E2A               	movwf	?_inputHandler,c
 17469  002A50  0012               	return	
 17470  002A52                     i2l6327:
 17471                           
 17472                           ;UI.c: 457: back = 1;
 17473  002A52  0E00               	movlw	0
 17474  002A54  6E5C               	movwf	_back+1,c
 17475  002A56  0E01               	movlw	1
 17476  002A58  6E5B               	movwf	_back,c
 17477                           
 17478                           ;UI.c: 458: return 1;
 17479  002A5A  0E00               	movlw	0
 17480  002A5C  6E2B               	movwf	?_inputHandler+1,c
 17481  002A5E  0E01               	movlw	1
 17482  002A60  6E2A               	movwf	?_inputHandler,c
 17483  002A62  0012               	return	
 17484  002A64                     i2l6331:
 17485                           
 17486                           ;UI.c: 461: return 1;
 17487  002A64  0E00               	movlw	0
 17488  002A66  6E2B               	movwf	?_inputHandler+1,c
 17489  002A68  0E01               	movlw	1
 17490  002A6A  6E2A               	movwf	?_inputHandler,c
 17491                           
 17492                           ;UI.c: 462: }
 17493  002A6C  0012               	return	
 17494  002A6E                     i2l6337:
 17495  002A6E  507D               	movf	_input,w,c	;volatile
 17496                           
 17497                           ; Switch size 1, requested type "space"
 17498                           ; Number of cases is 7, Range of values is 49 to 68
 17499                           ; switch strategies available:
 17500                           ; Name         Instructions Cycles
 17501                           ; simple_byte           22    12 (average)
 17502                           ;	Chosen strategy is simple_byte
 17503  002A70  0A31               	xorlw	49	; case 49
 17504  002A72  B4D8               	btfsc	status,2,c
 17505  002A74  D789               	goto	i2l6267
 17506  002A76  0A03               	xorlw	3	; case 50
 17507  002A78  B4D8               	btfsc	status,2,c
 17508  002A7A  D799               	goto	i2l6281
 17509  002A7C  0A01               	xorlw	1	; case 51
 17510  002A7E  B4D8               	btfsc	status,2,c
 17511  002A80  D7BA               	goto	i2l6301
 17512  002A82  0A72               	xorlw	114	; case 65
 17513  002A84  B4D8               	btfsc	status,2,c
 17514  002A86  D7CA               	goto	i2l6315
 17515  002A88  0A03               	xorlw	3	; case 66
 17516  002A8A  B4D8               	btfsc	status,2,c
 17517  002A8C  D7D0               	goto	i2l6319
 17518  002A8E  0A01               	xorlw	1	; case 67
 17519  002A90  B4D8               	btfsc	status,2,c
 17520  002A92  D7D6               	goto	i2l6323
 17521  002A94  0A07               	xorlw	7	; case 68
 17522  002A96  B4D8               	btfsc	status,2,c
 17523  002A98  D7DC               	goto	i2l6327
 17524  002A9A  D7E4               	goto	i2l6331
 17525  002A9C                     __end_of_inputHandler:
 17526                           	opt stack 0
 17527                           pclatu	equ	0xFFB
 17528                           pclath	equ	0xFFA
 17529                           tblptru	equ	0xFF8
 17530                           tblptrh	equ	0xFF7
 17531                           tblptrl	equ	0xFF6
 17532                           tablat	equ	0xFF5
 17533                           prodh	equ	0xFF4
 17534                           prodl	equ	0xFF3
 17535                           intcon	equ	0xFF2
 17536                           intcon2	equ	0xFF1
 17537                           intcon3	equ	0xFF0
 17538                           indf0	equ	0xFEF
 17539                           postinc0	equ	0xFEE
 17540                           fsr0h	equ	0xFEA
 17541                           fsr0l	equ	0xFE9
 17542                           wreg	equ	0xFE8
 17543                           postdec1	equ	0xFE5
 17544                           fsr1h	equ	0xFE2
 17545                           fsr1l	equ	0xFE1
 17546                           indf2	equ	0xFDF
 17547                           postinc2	equ	0xFDE
 17548                           postdec2	equ	0xFDD
 17549                           fsr2h	equ	0xFDA
 17550                           fsr2l	equ	0xFD9
 17551                           status	equ	0xFD8
 17552                           
 17553 ;; *************** function i2_change_state_to_menu_22 *****************
 17554 ;; Defined at:
 17555 ;;		line 496 in file "UI.c"
 17556 ;; Parameters:    Size  Location     Type
 17557 ;;		None
 17558 ;; Auto vars:     Size  Location     Type
 17559 ;;		None
 17560 ;; Return value:  Size  Location     Type
 17561 ;;                  1    wreg      void 
 17562 ;; Registers used:
 17563 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17564 ;; Tracked objects:
 17565 ;;		On entry : 0/0
 17566 ;;		On exit  : 0/0
 17567 ;;		Unchanged: 0/0
 17568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17569 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17570 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17571 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17572 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17573 ;;Total ram usage:        0 bytes
 17574 ;; Hardware stack levels used:    1
 17575 ;; Hardware stack levels required when called:    3
 17576 ;; This function calls:
 17577 ;;		i2_lcdInst
 17578 ;;		i2_printf
 17579 ;; This function is called by:
 17580 ;;		_updateMenu
 17581 ;;		_inputHandler
 17582 ;; This function uses a non-reentrant model
 17583 ;;
 17584                           
 17585                           	psect	text63
 17586  004334                     __ptext63:
 17587                           	opt stack 0
 17588  004334                     i2_change_state_to_menu_22:
 17589                           	opt stack 19
 17590                           
 17591                           ;UI.c: 497: cur_state = 22;
 17592                           
 17593                           ;incstack = 0
 17594  004334  0E00               	movlw	0
 17595  004336  0100               	movlb	0	; () banked
 17596  004338  6FDF               	movwf	(_cur_state+1)& (0+255),b
 17597  00433A  0E16               	movlw	22
 17598  00433C  6FDE               	movwf	_cur_state& (0+255),b
 17599                           
 17600                           ; BSR set to: 0
 17601                           ;UI.c: 499: lcdInst(0b10000000);;
 17602  00433E  0E80               	movlw	128
 17603  004340  ECCF  F023         	call	i2_lcdInst
 17604                           
 17605                           ;UI.c: 500: printf("2. SORT        <");
 17606  004344  0EDA               	movlw	low STR_34
 17607  004346  6E0D               	movwf	i2printf@f,c
 17608  004348  0EFD               	movlw	high STR_34
 17609  00434A  6E0E               	movwf	i2printf@f+1,c
 17610  00434C  ECD4  F00A         	call	i2_printf	;wreg free
 17611                           
 17612                           ;UI.c: 501: lcdInst(0b11000000);;
 17613  004350  0EC0               	movlw	192
 17614  004352  ECCF  F023         	call	i2_lcdInst
 17615                           
 17616                           ;UI.c: 502: printf("3. LOGS         ");
 17617  004356  0E1F               	movlw	low STR_36
 17618  004358  6E0D               	movwf	i2printf@f,c
 17619  00435A  0EFD               	movlw	high STR_36
 17620  00435C  6E0E               	movwf	i2printf@f+1,c
 17621  00435E  ECD4  F00A         	call	i2_printf	;wreg free
 17622  004362  0012               	return		;funcret
 17623  004364                     __end_ofi2_change_state_to_menu_22:
 17624                           	opt stack 0
 17625                           pclatu	equ	0xFFB
 17626                           pclath	equ	0xFFA
 17627                           tblptru	equ	0xFF8
 17628                           tblptrh	equ	0xFF7
 17629                           tblptrl	equ	0xFF6
 17630                           tablat	equ	0xFF5
 17631                           prodh	equ	0xFF4
 17632                           prodl	equ	0xFF3
 17633                           intcon	equ	0xFF2
 17634                           intcon2	equ	0xFF1
 17635                           intcon3	equ	0xFF0
 17636                           indf0	equ	0xFEF
 17637                           postinc0	equ	0xFEE
 17638                           fsr0h	equ	0xFEA
 17639                           fsr0l	equ	0xFE9
 17640                           wreg	equ	0xFE8
 17641                           postdec1	equ	0xFE5
 17642                           fsr1h	equ	0xFE2
 17643                           fsr1l	equ	0xFE1
 17644                           indf2	equ	0xFDF
 17645                           postinc2	equ	0xFDE
 17646                           postdec2	equ	0xFDD
 17647                           fsr2h	equ	0xFDA
 17648                           fsr2l	equ	0xFD9
 17649                           status	equ	0xFD8
 17650                           
 17651 ;; *************** function i2_change_state_to_menu_12 *****************
 17652 ;; Defined at:
 17653 ;;		line 488 in file "UI.c"
 17654 ;; Parameters:    Size  Location     Type
 17655 ;;		None
 17656 ;; Auto vars:     Size  Location     Type
 17657 ;;		None
 17658 ;; Return value:  Size  Location     Type
 17659 ;;                  1    wreg      void 
 17660 ;; Registers used:
 17661 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17662 ;; Tracked objects:
 17663 ;;		On entry : 0/0
 17664 ;;		On exit  : 0/0
 17665 ;;		Unchanged: 0/0
 17666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17667 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17668 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17669 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17670 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17671 ;;Total ram usage:        0 bytes
 17672 ;; Hardware stack levels used:    1
 17673 ;; Hardware stack levels required when called:    3
 17674 ;; This function calls:
 17675 ;;		i2_lcdInst
 17676 ;;		i2_printf
 17677 ;; This function is called by:
 17678 ;;		_updateMenu
 17679 ;;		_inputHandler
 17680 ;; This function uses a non-reentrant model
 17681 ;;
 17682                           
 17683                           	psect	text64
 17684  004364                     __ptext64:
 17685                           	opt stack 0
 17686  004364                     i2_change_state_to_menu_12:
 17687                           	opt stack 19
 17688                           
 17689                           ;UI.c: 489: cur_state = 12;
 17690                           
 17691                           ;incstack = 0
 17692  004364  0E00               	movlw	0
 17693  004366  0100               	movlb	0	; () banked
 17694  004368  6FDF               	movwf	(_cur_state+1)& (0+255),b
 17695  00436A  0E0C               	movlw	12
 17696  00436C  6FDE               	movwf	_cur_state& (0+255),b
 17697                           
 17698                           ; BSR set to: 0
 17699                           ;UI.c: 491: lcdInst(0b10000000);;
 17700  00436E  0E80               	movlw	128
 17701  004370  ECCF  F023         	call	i2_lcdInst
 17702                           
 17703                           ;UI.c: 492: printf("1. DATE/TIME    ");
 17704  004374  0E41               	movlw	low STR_33
 17705  004376  6E0D               	movwf	i2printf@f,c
 17706  004378  0EFD               	movlw	high STR_33
 17707  00437A  6E0E               	movwf	i2printf@f+1,c
 17708  00437C  ECD4  F00A         	call	i2_printf	;wreg free
 17709                           
 17710                           ;UI.c: 493: lcdInst(0b11000000);;
 17711  004380  0EC0               	movlw	192
 17712  004382  ECCF  F023         	call	i2_lcdInst
 17713                           
 17714                           ;UI.c: 494: printf("2. SORT        <");
 17715  004386  0EDA               	movlw	low STR_34
 17716  004388  6E0D               	movwf	i2printf@f,c
 17717  00438A  0EFD               	movlw	high STR_34
 17718  00438C  6E0E               	movwf	i2printf@f+1,c
 17719  00438E  ECD4  F00A         	call	i2_printf	;wreg free
 17720  004392  0012               	return		;funcret
 17721  004394                     __end_ofi2_change_state_to_menu_12:
 17722                           	opt stack 0
 17723                           pclatu	equ	0xFFB
 17724                           pclath	equ	0xFFA
 17725                           tblptru	equ	0xFF8
 17726                           tblptrh	equ	0xFF7
 17727                           tblptrl	equ	0xFF6
 17728                           tablat	equ	0xFF5
 17729                           prodh	equ	0xFF4
 17730                           prodl	equ	0xFF3
 17731                           intcon	equ	0xFF2
 17732                           intcon2	equ	0xFF1
 17733                           intcon3	equ	0xFF0
 17734                           indf0	equ	0xFEF
 17735                           postinc0	equ	0xFEE
 17736                           fsr0h	equ	0xFEA
 17737                           fsr0l	equ	0xFE9
 17738                           wreg	equ	0xFE8
 17739                           postdec1	equ	0xFE5
 17740                           fsr1h	equ	0xFE2
 17741                           fsr1l	equ	0xFE1
 17742                           indf2	equ	0xFDF
 17743                           postinc2	equ	0xFDE
 17744                           postdec2	equ	0xFDD
 17745                           fsr2h	equ	0xFDA
 17746                           fsr2l	equ	0xFD9
 17747                           status	equ	0xFD8
 17748                           
 17749 ;; *************** function _change_state_to_menu_23 *****************
 17750 ;; Defined at:
 17751 ;;		line 504 in file "UI.c"
 17752 ;; Parameters:    Size  Location     Type
 17753 ;;		None
 17754 ;; Auto vars:     Size  Location     Type
 17755 ;;		None
 17756 ;; Return value:  Size  Location     Type
 17757 ;;                  1    wreg      void 
 17758 ;; Registers used:
 17759 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17760 ;; Tracked objects:
 17761 ;;		On entry : 0/0
 17762 ;;		On exit  : 0/0
 17763 ;;		Unchanged: 0/0
 17764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17765 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17766 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17767 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17768 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17769 ;;Total ram usage:        0 bytes
 17770 ;; Hardware stack levels used:    1
 17771 ;; Hardware stack levels required when called:    3
 17772 ;; This function calls:
 17773 ;;		i2_lcdInst
 17774 ;;		i2_printf
 17775 ;; This function is called by:
 17776 ;;		_updateMenu
 17777 ;;		_inputHandler
 17778 ;; This function uses a non-reentrant model
 17779 ;;
 17780                           
 17781                           	psect	text65
 17782  004394                     __ptext65:
 17783                           	opt stack 0
 17784  004394                     _change_state_to_menu_23:
 17785                           	opt stack 18
 17786                           
 17787                           ;UI.c: 505: cur_state = 23;
 17788                           
 17789                           ;incstack = 0
 17790  004394  0E00               	movlw	0
 17791  004396  0100               	movlb	0	; () banked
 17792  004398  6FDF               	movwf	(_cur_state+1)& (0+255),b
 17793  00439A  0E17               	movlw	23
 17794  00439C  6FDE               	movwf	_cur_state& (0+255),b
 17795                           
 17796                           ; BSR set to: 0
 17797                           ;UI.c: 507: lcdInst(0b10000000);;
 17798  00439E  0E80               	movlw	128
 17799  0043A0  ECCF  F023         	call	i2_lcdInst
 17800                           
 17801                           ;UI.c: 508: printf("2. SORT         ");
 17802  0043A4  0E30               	movlw	low STR_32
 17803  0043A6  6E0D               	movwf	i2printf@f,c
 17804  0043A8  0EFD               	movlw	high STR_32
 17805  0043AA  6E0E               	movwf	i2printf@f+1,c
 17806  0043AC  ECD4  F00A         	call	i2_printf	;wreg free
 17807                           
 17808                           ;UI.c: 509: lcdInst(0b11000000);;
 17809  0043B0  0EC0               	movlw	192
 17810  0043B2  ECCF  F023         	call	i2_lcdInst
 17811                           
 17812                           ;UI.c: 510: printf("3. LOGS        <");
 17813  0043B6  0EC9               	movlw	low STR_38
 17814  0043B8  6E0D               	movwf	i2printf@f,c
 17815  0043BA  0EFD               	movlw	high STR_38
 17816  0043BC  6E0E               	movwf	i2printf@f+1,c
 17817  0043BE  ECD4  F00A         	call	i2_printf	;wreg free
 17818  0043C2  0012               	return		;funcret
 17819  0043C4                     __end_of_change_state_to_menu_23:
 17820                           	opt stack 0
 17821                           pclatu	equ	0xFFB
 17822                           pclath	equ	0xFFA
 17823                           tblptru	equ	0xFF8
 17824                           tblptrh	equ	0xFF7
 17825                           tblptrl	equ	0xFF6
 17826                           tablat	equ	0xFF5
 17827                           prodh	equ	0xFF4
 17828                           prodl	equ	0xFF3
 17829                           intcon	equ	0xFF2
 17830                           intcon2	equ	0xFF1
 17831                           intcon3	equ	0xFF0
 17832                           indf0	equ	0xFEF
 17833                           postinc0	equ	0xFEE
 17834                           fsr0h	equ	0xFEA
 17835                           fsr0l	equ	0xFE9
 17836                           wreg	equ	0xFE8
 17837                           postdec1	equ	0xFE5
 17838                           fsr1h	equ	0xFE2
 17839                           fsr1l	equ	0xFE1
 17840                           indf2	equ	0xFDF
 17841                           postinc2	equ	0xFDE
 17842                           postdec2	equ	0xFDD
 17843                           fsr2h	equ	0xFDA
 17844                           fsr2l	equ	0xFD9
 17845                           status	equ	0xFD8
 17846                           
 17847 ;; *************** function _change_state_to_menu_11 *****************
 17848 ;; Defined at:
 17849 ;;		line 480 in file "UI.c"
 17850 ;; Parameters:    Size  Location     Type
 17851 ;;		None
 17852 ;; Auto vars:     Size  Location     Type
 17853 ;;		None
 17854 ;; Return value:  Size  Location     Type
 17855 ;;                  1    wreg      void 
 17856 ;; Registers used:
 17857 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17858 ;; Tracked objects:
 17859 ;;		On entry : 0/0
 17860 ;;		On exit  : 0/0
 17861 ;;		Unchanged: 0/0
 17862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17863 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17864 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17865 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17866 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17867 ;;Total ram usage:        0 bytes
 17868 ;; Hardware stack levels used:    1
 17869 ;; Hardware stack levels required when called:    3
 17870 ;; This function calls:
 17871 ;;		i2_lcdInst
 17872 ;;		i2_printf
 17873 ;; This function is called by:
 17874 ;;		_updateMenu
 17875 ;;		_inputHandler
 17876 ;; This function uses a non-reentrant model
 17877 ;;
 17878                           
 17879                           	psect	text66
 17880  0043C4                     __ptext66:
 17881                           	opt stack 0
 17882  0043C4                     _change_state_to_menu_11:
 17883                           	opt stack 18
 17884                           
 17885                           ;UI.c: 481: cur_state = 11;
 17886                           
 17887                           ;incstack = 0
 17888  0043C4  0E00               	movlw	0
 17889  0043C6  0100               	movlb	0	; () banked
 17890  0043C8  6FDF               	movwf	(_cur_state+1)& (0+255),b
 17891  0043CA  0E0B               	movlw	11
 17892  0043CC  6FDE               	movwf	_cur_state& (0+255),b
 17893                           
 17894                           ; BSR set to: 0
 17895                           ;UI.c: 483: lcdInst(0b10000000);;
 17896  0043CE  0E80               	movlw	128
 17897  0043D0  ECCF  F023         	call	i2_lcdInst
 17898                           
 17899                           ;UI.c: 484: printf("1. DATE/TIME   <");
 17900  0043D4  0EEB               	movlw	low STR_31
 17901  0043D6  6E0D               	movwf	i2printf@f,c
 17902  0043D8  0EFD               	movlw	high STR_31
 17903  0043DA  6E0E               	movwf	i2printf@f+1,c
 17904  0043DC  ECD4  F00A         	call	i2_printf	;wreg free
 17905                           
 17906                           ;UI.c: 485: lcdInst(0b11000000);;
 17907  0043E0  0EC0               	movlw	192
 17908  0043E2  ECCF  F023         	call	i2_lcdInst
 17909                           
 17910                           ;UI.c: 486: printf("2. SORT         ");
 17911  0043E6  0E30               	movlw	low STR_32
 17912  0043E8  6E0D               	movwf	i2printf@f,c
 17913  0043EA  0EFD               	movlw	high STR_32
 17914  0043EC  6E0E               	movwf	i2printf@f+1,c
 17915  0043EE  ECD4  F00A         	call	i2_printf	;wreg free
 17916  0043F2  0012               	return		;funcret
 17917  0043F4                     __end_of_change_state_to_menu_11:
 17918                           	opt stack 0
 17919                           pclatu	equ	0xFFB
 17920                           pclath	equ	0xFFA
 17921                           tblptru	equ	0xFF8
 17922                           tblptrh	equ	0xFF7
 17923                           tblptrl	equ	0xFF6
 17924                           tablat	equ	0xFF5
 17925                           prodh	equ	0xFF4
 17926                           prodl	equ	0xFF3
 17927                           intcon	equ	0xFF2
 17928                           intcon2	equ	0xFF1
 17929                           intcon3	equ	0xFF0
 17930                           indf0	equ	0xFEF
 17931                           postinc0	equ	0xFEE
 17932                           fsr0h	equ	0xFEA
 17933                           fsr0l	equ	0xFE9
 17934                           wreg	equ	0xFE8
 17935                           postdec1	equ	0xFE5
 17936                           fsr1h	equ	0xFE2
 17937                           fsr1l	equ	0xFE1
 17938                           indf2	equ	0xFDF
 17939                           postinc2	equ	0xFDE
 17940                           postdec2	equ	0xFDD
 17941                           fsr2h	equ	0xFDA
 17942                           fsr2l	equ	0xFD9
 17943                           status	equ	0xFD8
 17944                           
 17945 ;; *************** function _change_state_to_logs_34 *****************
 17946 ;; Defined at:
 17947 ;;		line 547 in file "UI.c"
 17948 ;; Parameters:    Size  Location     Type
 17949 ;;		None
 17950 ;; Auto vars:     Size  Location     Type
 17951 ;;		None
 17952 ;; Return value:  Size  Location     Type
 17953 ;;                  1    wreg      void 
 17954 ;; Registers used:
 17955 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17956 ;; Tracked objects:
 17957 ;;		On entry : 0/0
 17958 ;;		On exit  : 0/0
 17959 ;;		Unchanged: 0/0
 17960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17961 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17962 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17963 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17964 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17965 ;;Total ram usage:        0 bytes
 17966 ;; Hardware stack levels used:    1
 17967 ;; Hardware stack levels required when called:    3
 17968 ;; This function calls:
 17969 ;;		i2_lcdInst
 17970 ;;		i2_printf
 17971 ;; This function is called by:
 17972 ;;		_updateMenu
 17973 ;;		_inputHandler
 17974 ;; This function uses a non-reentrant model
 17975 ;;
 17976                           
 17977                           	psect	text67
 17978  0043F4                     __ptext67:
 17979                           	opt stack 0
 17980  0043F4                     _change_state_to_logs_34:
 17981                           	opt stack 18
 17982                           
 17983                           ;UI.c: 548: cur_state = 1034;
 17984                           
 17985                           ;incstack = 0
 17986  0043F4  0E04               	movlw	4
 17987  0043F6  0100               	movlb	0	; () banked
 17988  0043F8  6FDF               	movwf	(_cur_state+1)& (0+255),b
 17989  0043FA  0E0A               	movlw	10
 17990  0043FC  6FDE               	movwf	_cur_state& (0+255),b
 17991                           
 17992                           ; BSR set to: 0
 17993                           ;UI.c: 549: lcdInst(0b10000000);;
 17994  0043FE  0E80               	movlw	128
 17995  004400  ECCF  F023         	call	i2_lcdInst
 17996                           
 17997                           ;UI.c: 550: printf("LOG 3           ");
 17998  004404  0EFD               	movlw	low STR_44
 17999  004406  6E0D               	movwf	i2printf@f,c
 18000  004408  0EFC               	movlw	high STR_44
 18001  00440A  6E0E               	movwf	i2printf@f+1,c
 18002  00440C  ECD4  F00A         	call	i2_printf	;wreg free
 18003                           
 18004                           ;UI.c: 551: lcdInst(0b11000000);;
 18005  004410  0EC0               	movlw	192
 18006  004412  ECCF  F023         	call	i2_lcdInst
 18007                           
 18008                           ;UI.c: 552: printf("LOG 4          <");
 18009  004416  0EB8               	movlw	low STR_50
 18010  004418  6E0D               	movwf	i2printf@f,c
 18011  00441A  0EFD               	movlw	high STR_50
 18012  00441C  6E0E               	movwf	i2printf@f+1,c
 18013  00441E  ECD4  F00A         	call	i2_printf	;wreg free
 18014  004422  0012               	return		;funcret
 18015  004424                     __end_of_change_state_to_logs_34:
 18016                           	opt stack 0
 18017                           pclatu	equ	0xFFB
 18018                           pclath	equ	0xFFA
 18019                           tblptru	equ	0xFF8
 18020                           tblptrh	equ	0xFF7
 18021                           tblptrl	equ	0xFF6
 18022                           tablat	equ	0xFF5
 18023                           prodh	equ	0xFF4
 18024                           prodl	equ	0xFF3
 18025                           intcon	equ	0xFF2
 18026                           intcon2	equ	0xFF1
 18027                           intcon3	equ	0xFF0
 18028                           indf0	equ	0xFEF
 18029                           postinc0	equ	0xFEE
 18030                           fsr0h	equ	0xFEA
 18031                           fsr0l	equ	0xFE9
 18032                           wreg	equ	0xFE8
 18033                           postdec1	equ	0xFE5
 18034                           fsr1h	equ	0xFE2
 18035                           fsr1l	equ	0xFE1
 18036                           indf2	equ	0xFDF
 18037                           postinc2	equ	0xFDE
 18038                           postdec2	equ	0xFDD
 18039                           fsr2h	equ	0xFDA
 18040                           fsr2l	equ	0xFD9
 18041                           status	equ	0xFD8
 18042                           
 18043 ;; *************** function _change_state_to_logs_33 *****************
 18044 ;; Defined at:
 18045 ;;		line 540 in file "UI.c"
 18046 ;; Parameters:    Size  Location     Type
 18047 ;;		None
 18048 ;; Auto vars:     Size  Location     Type
 18049 ;;		None
 18050 ;; Return value:  Size  Location     Type
 18051 ;;                  1    wreg      void 
 18052 ;; Registers used:
 18053 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18054 ;; Tracked objects:
 18055 ;;		On entry : 0/0
 18056 ;;		On exit  : 0/0
 18057 ;;		Unchanged: 0/0
 18058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18059 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18060 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18061 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18062 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18063 ;;Total ram usage:        0 bytes
 18064 ;; Hardware stack levels used:    1
 18065 ;; Hardware stack levels required when called:    3
 18066 ;; This function calls:
 18067 ;;		i2_lcdInst
 18068 ;;		i2_printf
 18069 ;; This function is called by:
 18070 ;;		_updateMenu
 18071 ;;		_inputHandler
 18072 ;; This function uses a non-reentrant model
 18073 ;;
 18074                           
 18075                           	psect	text68
 18076  004424                     __ptext68:
 18077                           	opt stack 0
 18078  004424                     _change_state_to_logs_33:
 18079                           	opt stack 18
 18080                           
 18081                           ;UI.c: 541: cur_state = 1033;
 18082                           
 18083                           ;incstack = 0
 18084  004424  0E04               	movlw	4
 18085  004426  0100               	movlb	0	; () banked
 18086  004428  6FDF               	movwf	(_cur_state+1)& (0+255),b
 18087  00442A  0E09               	movlw	9
 18088  00442C  6FDE               	movwf	_cur_state& (0+255),b
 18089                           
 18090                           ; BSR set to: 0
 18091                           ;UI.c: 542: lcdInst(0b10000000);;
 18092  00442E  0E80               	movlw	128
 18093  004430  ECCF  F023         	call	i2_lcdInst
 18094                           
 18095                           ;UI.c: 543: printf("LOG 3          <");
 18096  004434  0EA7               	movlw	low STR_46
 18097  004436  6E0D               	movwf	i2printf@f,c
 18098  004438  0EFD               	movlw	high STR_46
 18099  00443A  6E0E               	movwf	i2printf@f+1,c
 18100  00443C  ECD4  F00A         	call	i2_printf	;wreg free
 18101                           
 18102                           ;UI.c: 544: lcdInst(0b11000000);;
 18103  004440  0EC0               	movlw	192
 18104  004442  ECCF  F023         	call	i2_lcdInst
 18105                           
 18106                           ;UI.c: 545: printf("LOG 4           ");
 18107  004446  0E0E               	movlw	low STR_48
 18108  004448  6E0D               	movwf	i2printf@f,c
 18109  00444A  0EFD               	movlw	high STR_48
 18110  00444C  6E0E               	movwf	i2printf@f+1,c
 18111  00444E  ECD4  F00A         	call	i2_printf	;wreg free
 18112  004452  0012               	return		;funcret
 18113  004454                     __end_of_change_state_to_logs_33:
 18114                           	opt stack 0
 18115                           pclatu	equ	0xFFB
 18116                           pclath	equ	0xFFA
 18117                           tblptru	equ	0xFF8
 18118                           tblptrh	equ	0xFF7
 18119                           tblptrl	equ	0xFF6
 18120                           tablat	equ	0xFF5
 18121                           prodh	equ	0xFF4
 18122                           prodl	equ	0xFF3
 18123                           intcon	equ	0xFF2
 18124                           intcon2	equ	0xFF1
 18125                           intcon3	equ	0xFF0
 18126                           indf0	equ	0xFEF
 18127                           postinc0	equ	0xFEE
 18128                           fsr0h	equ	0xFEA
 18129                           fsr0l	equ	0xFE9
 18130                           wreg	equ	0xFE8
 18131                           postdec1	equ	0xFE5
 18132                           fsr1h	equ	0xFE2
 18133                           fsr1l	equ	0xFE1
 18134                           indf2	equ	0xFDF
 18135                           postinc2	equ	0xFDE
 18136                           postdec2	equ	0xFDD
 18137                           fsr2h	equ	0xFDA
 18138                           fsr2l	equ	0xFD9
 18139                           status	equ	0xFD8
 18140                           
 18141 ;; *************** function _change_state_to_logs_23 *****************
 18142 ;; Defined at:
 18143 ;;		line 533 in file "UI.c"
 18144 ;; Parameters:    Size  Location     Type
 18145 ;;		None
 18146 ;; Auto vars:     Size  Location     Type
 18147 ;;		None
 18148 ;; Return value:  Size  Location     Type
 18149 ;;                  1    wreg      void 
 18150 ;; Registers used:
 18151 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18152 ;; Tracked objects:
 18153 ;;		On entry : 0/0
 18154 ;;		On exit  : 0/0
 18155 ;;		Unchanged: 0/0
 18156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18157 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18158 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18159 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18160 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18161 ;;Total ram usage:        0 bytes
 18162 ;; Hardware stack levels used:    1
 18163 ;; Hardware stack levels required when called:    3
 18164 ;; This function calls:
 18165 ;;		i2_lcdInst
 18166 ;;		i2_printf
 18167 ;; This function is called by:
 18168 ;;		_updateMenu
 18169 ;;		_inputHandler
 18170 ;; This function uses a non-reentrant model
 18171 ;;
 18172                           
 18173                           	psect	text69
 18174  004512                     __ptext69:
 18175                           	opt stack 0
 18176  004512                     _change_state_to_logs_23:
 18177                           	opt stack 18
 18178                           
 18179                           ;UI.c: 534: cur_state = 1023;
 18180                           
 18181                           ;incstack = 0
 18182  004512  0E03               	movlw	3
 18183  004514  0100               	movlb	0	; () banked
 18184  004516  6FDF               	movwf	(_cur_state+1)& (0+255),b
 18185  004518  69DE               	setf	_cur_state& (0+255),b
 18186                           
 18187                           ; BSR set to: 0
 18188                           ;UI.c: 535: lcdInst(0b10000000);;
 18189  00451A  0E80               	movlw	128
 18190  00451C  ECCF  F023         	call	i2_lcdInst
 18191                           
 18192                           ;UI.c: 536: printf("LOG 2           ");
 18193  004520  0EEC               	movlw	low STR_40
 18194  004522  6E0D               	movwf	i2printf@f,c
 18195  004524  0EFC               	movlw	high STR_40
 18196  004526  6E0E               	movwf	i2printf@f+1,c
 18197  004528  ECD4  F00A         	call	i2_printf	;wreg free
 18198                           
 18199                           ;UI.c: 537: lcdInst(0b11000000);;
 18200  00452C  0EC0               	movlw	192
 18201  00452E  ECCF  F023         	call	i2_lcdInst
 18202                           
 18203                           ;UI.c: 538: printf("LOG 3          <");
 18204  004532  0EA7               	movlw	low STR_46
 18205  004534  6E0D               	movwf	i2printf@f,c
 18206  004536  0EFD               	movlw	high STR_46
 18207  004538  6E0E               	movwf	i2printf@f+1,c
 18208  00453A  ECD4  F00A         	call	i2_printf	;wreg free
 18209  00453E  0012               	return		;funcret
 18210  004540                     __end_of_change_state_to_logs_23:
 18211                           	opt stack 0
 18212                           pclatu	equ	0xFFB
 18213                           pclath	equ	0xFFA
 18214                           tblptru	equ	0xFF8
 18215                           tblptrh	equ	0xFF7
 18216                           tblptrl	equ	0xFF6
 18217                           tablat	equ	0xFF5
 18218                           prodh	equ	0xFF4
 18219                           prodl	equ	0xFF3
 18220                           intcon	equ	0xFF2
 18221                           intcon2	equ	0xFF1
 18222                           intcon3	equ	0xFF0
 18223                           indf0	equ	0xFEF
 18224                           postinc0	equ	0xFEE
 18225                           fsr0h	equ	0xFEA
 18226                           fsr0l	equ	0xFE9
 18227                           wreg	equ	0xFE8
 18228                           postdec1	equ	0xFE5
 18229                           fsr1h	equ	0xFE2
 18230                           fsr1l	equ	0xFE1
 18231                           indf2	equ	0xFDF
 18232                           postinc2	equ	0xFDE
 18233                           postdec2	equ	0xFDD
 18234                           fsr2h	equ	0xFDA
 18235                           fsr2l	equ	0xFD9
 18236                           status	equ	0xFD8
 18237                           
 18238 ;; *************** function _change_state_to_logs_22 *****************
 18239 ;; Defined at:
 18240 ;;		line 526 in file "UI.c"
 18241 ;; Parameters:    Size  Location     Type
 18242 ;;		None
 18243 ;; Auto vars:     Size  Location     Type
 18244 ;;		None
 18245 ;; Return value:  Size  Location     Type
 18246 ;;                  1    wreg      void 
 18247 ;; Registers used:
 18248 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18249 ;; Tracked objects:
 18250 ;;		On entry : 0/0
 18251 ;;		On exit  : 0/0
 18252 ;;		Unchanged: 0/0
 18253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18254 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18255 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18256 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18257 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18258 ;;Total ram usage:        0 bytes
 18259 ;; Hardware stack levels used:    1
 18260 ;; Hardware stack levels required when called:    3
 18261 ;; This function calls:
 18262 ;;		i2_lcdInst
 18263 ;;		i2_printf
 18264 ;; This function is called by:
 18265 ;;		_updateMenu
 18266 ;;		_inputHandler
 18267 ;; This function uses a non-reentrant model
 18268 ;;
 18269                           
 18270                           	psect	text70
 18271  004454                     __ptext70:
 18272                           	opt stack 0
 18273  004454                     _change_state_to_logs_22:
 18274                           	opt stack 18
 18275                           
 18276                           ;UI.c: 527: cur_state = 1022;
 18277                           
 18278                           ;incstack = 0
 18279  004454  0E03               	movlw	3
 18280  004456  0100               	movlb	0	; () banked
 18281  004458  6FDF               	movwf	(_cur_state+1)& (0+255),b
 18282  00445A  0EFE               	movlw	254
 18283  00445C  6FDE               	movwf	_cur_state& (0+255),b
 18284                           
 18285                           ; BSR set to: 0
 18286                           ;UI.c: 528: lcdInst(0b10000000);;
 18287  00445E  0E80               	movlw	128
 18288  004460  ECCF  F023         	call	i2_lcdInst
 18289                           
 18290                           ;UI.c: 529: printf("LOG 2          <");
 18291  004464  0E96               	movlw	low STR_42
 18292  004466  6E0D               	movwf	i2printf@f,c
 18293  004468  0EFD               	movlw	high STR_42
 18294  00446A  6E0E               	movwf	i2printf@f+1,c
 18295  00446C  ECD4  F00A         	call	i2_printf	;wreg free
 18296                           
 18297                           ;UI.c: 530: lcdInst(0b11000000);;
 18298  004470  0EC0               	movlw	192
 18299  004472  ECCF  F023         	call	i2_lcdInst
 18300                           
 18301                           ;UI.c: 531: printf("LOG 3           ");
 18302  004476  0EFD               	movlw	low STR_44
 18303  004478  6E0D               	movwf	i2printf@f,c
 18304  00447A  0EFC               	movlw	high STR_44
 18305  00447C  6E0E               	movwf	i2printf@f+1,c
 18306  00447E  ECD4  F00A         	call	i2_printf	;wreg free
 18307  004482  0012               	return		;funcret
 18308  004484                     __end_of_change_state_to_logs_22:
 18309                           	opt stack 0
 18310                           pclatu	equ	0xFFB
 18311                           pclath	equ	0xFFA
 18312                           tblptru	equ	0xFF8
 18313                           tblptrh	equ	0xFF7
 18314                           tblptrl	equ	0xFF6
 18315                           tablat	equ	0xFF5
 18316                           prodh	equ	0xFF4
 18317                           prodl	equ	0xFF3
 18318                           intcon	equ	0xFF2
 18319                           intcon2	equ	0xFF1
 18320                           intcon3	equ	0xFF0
 18321                           indf0	equ	0xFEF
 18322                           postinc0	equ	0xFEE
 18323                           fsr0h	equ	0xFEA
 18324                           fsr0l	equ	0xFE9
 18325                           wreg	equ	0xFE8
 18326                           postdec1	equ	0xFE5
 18327                           fsr1h	equ	0xFE2
 18328                           fsr1l	equ	0xFE1
 18329                           indf2	equ	0xFDF
 18330                           postinc2	equ	0xFDE
 18331                           postdec2	equ	0xFDD
 18332                           fsr2h	equ	0xFDA
 18333                           fsr2l	equ	0xFD9
 18334                           status	equ	0xFD8
 18335                           
 18336 ;; *************** function _change_state_to_logs_12 *****************
 18337 ;; Defined at:
 18338 ;;		line 519 in file "UI.c"
 18339 ;; Parameters:    Size  Location     Type
 18340 ;;		None
 18341 ;; Auto vars:     Size  Location     Type
 18342 ;;		None
 18343 ;; Return value:  Size  Location     Type
 18344 ;;                  1    wreg      void 
 18345 ;; Registers used:
 18346 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18347 ;; Tracked objects:
 18348 ;;		On entry : 0/0
 18349 ;;		On exit  : 0/0
 18350 ;;		Unchanged: 0/0
 18351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18352 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18353 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18354 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18355 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18356 ;;Total ram usage:        0 bytes
 18357 ;; Hardware stack levels used:    1
 18358 ;; Hardware stack levels required when called:    3
 18359 ;; This function calls:
 18360 ;;		i2_lcdInst
 18361 ;;		i2_printf
 18362 ;; This function is called by:
 18363 ;;		_updateMenu
 18364 ;;		_inputHandler
 18365 ;; This function uses a non-reentrant model
 18366 ;;
 18367                           
 18368                           	psect	text71
 18369  004484                     __ptext71:
 18370                           	opt stack 0
 18371  004484                     _change_state_to_logs_12:
 18372                           	opt stack 18
 18373                           
 18374                           ;UI.c: 520: cur_state = 1012;
 18375                           
 18376                           ;incstack = 0
 18377  004484  0E03               	movlw	3
 18378  004486  0100               	movlb	0	; () banked
 18379  004488  6FDF               	movwf	(_cur_state+1)& (0+255),b
 18380  00448A  0EF4               	movlw	244
 18381  00448C  6FDE               	movwf	_cur_state& (0+255),b
 18382                           
 18383                           ; BSR set to: 0
 18384                           ;UI.c: 521: lcdInst(0b10000000);;
 18385  00448E  0E80               	movlw	128
 18386  004490  ECCF  F023         	call	i2_lcdInst
 18387                           
 18388                           ;UI.c: 522: printf("LOG 1           ");
 18389  004494  0EDB               	movlw	low STR_41
 18390  004496  6E0D               	movwf	i2printf@f,c
 18391  004498  0EFC               	movlw	high STR_41
 18392  00449A  6E0E               	movwf	i2printf@f+1,c
 18393  00449C  ECD4  F00A         	call	i2_printf	;wreg free
 18394                           
 18395                           ;UI.c: 523: lcdInst(0b11000000);;
 18396  0044A0  0EC0               	movlw	192
 18397  0044A2  ECCF  F023         	call	i2_lcdInst
 18398                           
 18399                           ;UI.c: 524: printf("LOG 2          <");
 18400  0044A6  0E96               	movlw	low STR_42
 18401  0044A8  6E0D               	movwf	i2printf@f,c
 18402  0044AA  0EFD               	movlw	high STR_42
 18403  0044AC  6E0E               	movwf	i2printf@f+1,c
 18404  0044AE  ECD4  F00A         	call	i2_printf	;wreg free
 18405  0044B2  0012               	return		;funcret
 18406  0044B4                     __end_of_change_state_to_logs_12:
 18407                           	opt stack 0
 18408                           pclatu	equ	0xFFB
 18409                           pclath	equ	0xFFA
 18410                           tblptru	equ	0xFF8
 18411                           tblptrh	equ	0xFF7
 18412                           tblptrl	equ	0xFF6
 18413                           tablat	equ	0xFF5
 18414                           prodh	equ	0xFF4
 18415                           prodl	equ	0xFF3
 18416                           intcon	equ	0xFF2
 18417                           intcon2	equ	0xFF1
 18418                           intcon3	equ	0xFF0
 18419                           indf0	equ	0xFEF
 18420                           postinc0	equ	0xFEE
 18421                           fsr0h	equ	0xFEA
 18422                           fsr0l	equ	0xFE9
 18423                           wreg	equ	0xFE8
 18424                           postdec1	equ	0xFE5
 18425                           fsr1h	equ	0xFE2
 18426                           fsr1l	equ	0xFE1
 18427                           indf2	equ	0xFDF
 18428                           postinc2	equ	0xFDE
 18429                           postdec2	equ	0xFDD
 18430                           fsr2h	equ	0xFDA
 18431                           fsr2l	equ	0xFD9
 18432                           status	equ	0xFD8
 18433                           
 18434 ;; *************** function _change_state_to_logs_11 *****************
 18435 ;; Defined at:
 18436 ;;		line 512 in file "UI.c"
 18437 ;; Parameters:    Size  Location     Type
 18438 ;;		None
 18439 ;; Auto vars:     Size  Location     Type
 18440 ;;		None
 18441 ;; Return value:  Size  Location     Type
 18442 ;;                  1    wreg      void 
 18443 ;; Registers used:
 18444 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18445 ;; Tracked objects:
 18446 ;;		On entry : 0/0
 18447 ;;		On exit  : 0/0
 18448 ;;		Unchanged: 0/0
 18449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18450 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18451 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18452 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18453 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18454 ;;Total ram usage:        0 bytes
 18455 ;; Hardware stack levels used:    1
 18456 ;; Hardware stack levels required when called:    3
 18457 ;; This function calls:
 18458 ;;		i2_lcdInst
 18459 ;;		i2_printf
 18460 ;; This function is called by:
 18461 ;;		_updateMenu
 18462 ;;		_inputHandler
 18463 ;; This function uses a non-reentrant model
 18464 ;;
 18465                           
 18466                           	psect	text72
 18467  0044B4                     __ptext72:
 18468                           	opt stack 0
 18469  0044B4                     _change_state_to_logs_11:
 18470                           	opt stack 18
 18471                           
 18472                           ;UI.c: 513: cur_state = 1011;
 18473                           
 18474                           ;incstack = 0
 18475  0044B4  0E03               	movlw	3
 18476  0044B6  0100               	movlb	0	; () banked
 18477  0044B8  6FDF               	movwf	(_cur_state+1)& (0+255),b
 18478  0044BA  0EF3               	movlw	243
 18479  0044BC  6FDE               	movwf	_cur_state& (0+255),b
 18480                           
 18481                           ; BSR set to: 0
 18482                           ;UI.c: 514: lcdInst(0b10000000);;
 18483  0044BE  0E80               	movlw	128
 18484  0044C0  ECCF  F023         	call	i2_lcdInst
 18485                           
 18486                           ;UI.c: 515: printf("LOG 1          <");
 18487  0044C4  0E85               	movlw	low STR_39
 18488  0044C6  6E0D               	movwf	i2printf@f,c
 18489  0044C8  0EFD               	movlw	high STR_39
 18490  0044CA  6E0E               	movwf	i2printf@f+1,c
 18491  0044CC  ECD4  F00A         	call	i2_printf	;wreg free
 18492                           
 18493                           ;UI.c: 516: lcdInst(0b11000000);;
 18494  0044D0  0EC0               	movlw	192
 18495  0044D2  ECCF  F023         	call	i2_lcdInst
 18496                           
 18497                           ;UI.c: 517: printf("LOG 2           ");
 18498  0044D6  0EEC               	movlw	low STR_40
 18499  0044D8  6E0D               	movwf	i2printf@f,c
 18500  0044DA  0EFC               	movlw	high STR_40
 18501  0044DC  6E0E               	movwf	i2printf@f+1,c
 18502  0044DE  ECD4  F00A         	call	i2_printf	;wreg free
 18503  0044E2  0012               	return		;funcret
 18504  0044E4                     __end_of_change_state_to_logs_11:
 18505                           	opt stack 0
 18506                           pclatu	equ	0xFFB
 18507                           pclath	equ	0xFFA
 18508                           tblptru	equ	0xFF8
 18509                           tblptrh	equ	0xFF7
 18510                           tblptrl	equ	0xFF6
 18511                           tablat	equ	0xFF5
 18512                           prodh	equ	0xFF4
 18513                           prodl	equ	0xFF3
 18514                           intcon	equ	0xFF2
 18515                           intcon2	equ	0xFF1
 18516                           intcon3	equ	0xFF0
 18517                           indf0	equ	0xFEF
 18518                           postinc0	equ	0xFEE
 18519                           fsr0h	equ	0xFEA
 18520                           fsr0l	equ	0xFE9
 18521                           wreg	equ	0xFE8
 18522                           postdec1	equ	0xFE5
 18523                           fsr1h	equ	0xFE2
 18524                           fsr1l	equ	0xFE1
 18525                           indf2	equ	0xFDF
 18526                           postinc2	equ	0xFDE
 18527                           postdec2	equ	0xFDD
 18528                           fsr2h	equ	0xFDA
 18529                           fsr2l	equ	0xFD9
 18530                           status	equ	0xFD8
 18531                           
 18532 ;; *************** function _dispLogs *****************
 18533 ;; Defined at:
 18534 ;;		line 465 in file "UI.c"
 18535 ;; Parameters:    Size  Location     Type
 18536 ;;  myLog           2   17[COMRAM] int 
 18537 ;; Auto vars:     Size  Location     Type
 18538 ;;		None
 18539 ;; Return value:  Size  Location     Type
 18540 ;;                  1    wreg      void 
 18541 ;; Registers used:
 18542 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18543 ;; Tracked objects:
 18544 ;;		On entry : 0/0
 18545 ;;		On exit  : 0/0
 18546 ;;		Unchanged: 0/0
 18547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18548 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18549 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18550 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18551 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18552 ;;Total ram usage:        2 bytes
 18553 ;; Hardware stack levels used:    1
 18554 ;; Hardware stack levels required when called:    2
 18555 ;; This function calls:
 18556 ;;		_retrieveLog
 18557 ;; This function is called by:
 18558 ;;		_updateMenu
 18559 ;; This function uses a non-reentrant model
 18560 ;;
 18561                           
 18562                           	psect	text73
 18563  004682                     __ptext73:
 18564                           	opt stack 0
 18565  004682                     _dispLogs:
 18566                           	opt stack 20
 18567                           
 18568                           ;UI.c: 466: logstate = 1;
 18569                           
 18570                           ;incstack = 0
 18571  004682  0E00               	movlw	0
 18572  004684  0100               	movlb	0	; () banked
 18573  004686  6FF7               	movwf	(_logstate+1)& (0+255),b
 18574  004688  0E01               	movlw	1
 18575  00468A  6FF6               	movwf	_logstate& (0+255),b
 18576                           
 18577                           ; BSR set to: 0
 18578                           ;UI.c: 467: log = myLog;
 18579  00468C  C012  F0E6         	movff	dispLogs@myLog,_log
 18580  004690  C013  F0E7         	movff	dispLogs@myLog+1,_log+1
 18581                           
 18582                           ; BSR set to: 0
 18583                           ;UI.c: 468: retrieveLog(myLog - 1);
 18584  004694  0EFF               	movlw	255
 18585  004696  2412               	addwf	dispLogs@myLog,w,c
 18586  004698  6E07               	movwf	retrieveLog@logNum,c
 18587  00469A  0EFF               	movlw	255
 18588  00469C  2013               	addwfc	dispLogs@myLog+1,w,c
 18589  00469E  6E08               	movwf	retrieveLog@logNum+1,c
 18590  0046A0  EC97  F018         	call	_retrieveLog	;wreg free
 18591  0046A4  0012               	return		;funcret
 18592  0046A6                     __end_of_dispLogs:
 18593                           	opt stack 0
 18594                           pclatu	equ	0xFFB
 18595                           pclath	equ	0xFFA
 18596                           tblptru	equ	0xFF8
 18597                           tblptrh	equ	0xFF7
 18598                           tblptrl	equ	0xFF6
 18599                           tablat	equ	0xFF5
 18600                           prodh	equ	0xFF4
 18601                           prodl	equ	0xFF3
 18602                           intcon	equ	0xFF2
 18603                           intcon2	equ	0xFF1
 18604                           intcon3	equ	0xFF0
 18605                           indf0	equ	0xFEF
 18606                           postinc0	equ	0xFEE
 18607                           fsr0h	equ	0xFEA
 18608                           fsr0l	equ	0xFE9
 18609                           wreg	equ	0xFE8
 18610                           postdec1	equ	0xFE5
 18611                           fsr1h	equ	0xFE2
 18612                           fsr1l	equ	0xFE1
 18613                           indf2	equ	0xFDF
 18614                           postinc2	equ	0xFDE
 18615                           postdec2	equ	0xFDD
 18616                           fsr2h	equ	0xFDA
 18617                           fsr2l	equ	0xFD9
 18618                           status	equ	0xFD8
 18619                           
 18620 ;; *************** function _retrieveLog *****************
 18621 ;; Defined at:
 18622 ;;		line 134 in file "EEPROM.c"
 18623 ;; Parameters:    Size  Location     Type
 18624 ;;  logNum          2    6[COMRAM] int 
 18625 ;; Auto vars:     Size  Location     Type
 18626 ;;  i               2   13[COMRAM] int 
 18627 ;;  addr            2   15[COMRAM] unsigned short 
 18628 ;;  byte3           1   12[COMRAM] unsigned char 
 18629 ;;  byte2           1   11[COMRAM] unsigned char 
 18630 ;;  byte1           1   10[COMRAM] unsigned char 
 18631 ;; Return value:  Size  Location     Type
 18632 ;;                  1    wreg      void 
 18633 ;; Registers used:
 18634 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18635 ;; Tracked objects:
 18636 ;;		On entry : 0/0
 18637 ;;		On exit  : 0/0
 18638 ;;		Unchanged: 0/0
 18639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18640 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18641 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18642 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18643 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18644 ;;Total ram usage:       11 bytes
 18645 ;; Hardware stack levels used:    1
 18646 ;; Hardware stack levels required when called:    1
 18647 ;; This function calls:
 18648 ;;		i2_EEPROM_read
 18649 ;;		i2___wmul
 18650 ;; This function is called by:
 18651 ;;		_dispLogs
 18652 ;; This function uses a non-reentrant model
 18653 ;;
 18654                           
 18655                           	psect	text74
 18656  00312E                     __ptext74:
 18657                           	opt stack 0
 18658  00312E                     _retrieveLog:
 18659                           	opt stack 20
 18660                           
 18661                           ;EEPROM.c: 140: unsigned short addr = 1 + logNum * 11;
 18662                           
 18663                           ;incstack = 0
 18664  00312E  C007  F001         	movff	retrieveLog@logNum,i2___wmul@multiplier
 18665  003132  C008  F002         	movff	retrieveLog@logNum+1,i2___wmul@multiplier+1
 18666  003136  0E00               	movlw	0
 18667  003138  6E04               	movwf	i2___wmul@multiplicand+1,c
 18668  00313A  0E0B               	movlw	11
 18669  00313C  6E03               	movwf	i2___wmul@multiplicand,c
 18670  00313E  EC09  F023         	call	i2___wmul	;wreg free
 18671  003142  0E01               	movlw	1
 18672  003144  2401               	addwf	?i2___wmul,w,c
 18673  003146  6E10               	movwf	retrieveLog@addr,c
 18674  003148  0E00               	movlw	0
 18675  00314A  2002               	addwfc	?i2___wmul+1,w,c
 18676  00314C  6E11               	movwf	retrieveLog@addr+1,c
 18677                           
 18678                           ;EEPROM.c: 143: unsigned char byte1 = EEPROM_read(addr);
 18679  00314E  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 18680  003152  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 18681  003156  EC9B  F023         	call	i2_EEPROM_read	;wreg free
 18682  00315A  6E0B               	movwf	retrieveLog@byte1,c
 18683                           
 18684                           ;EEPROM.c: 144: log_completion = (int)(byte1 & 0b10000000);
 18685  00315C  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 18686  003160  0E80               	movlw	128
 18687  003162  1609               	andwf	??_retrieveLog,f,c
 18688  003164  5009               	movf	??_retrieveLog,w,c
 18689  003166  0100               	movlb	0	; () banked
 18690  003168  6FE8               	movwf	_log_completion& (0+255),b
 18691  00316A  6BE9               	clrf	(_log_completion+1)& (0+255),b
 18692                           
 18693                           ; BSR set to: 0
 18694                           ;EEPROM.c: 145: log_count_total = (int)(byte1 & 0b00001111);
 18695  00316C  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 18696  003170  0E0F               	movlw	15
 18697  003172  1609               	andwf	??_retrieveLog,f,c
 18698  003174  5009               	movf	??_retrieveLog,w,c
 18699  003176  0100               	movlb	0	; () banked
 18700  003178  6FF2               	movwf	_log_count_total& (0+255),b
 18701  00317A  6BF3               	clrf	(_log_count_total+1)& (0+255),b
 18702                           
 18703                           ; BSR set to: 0
 18704                           ;EEPROM.c: 146: addr++;
 18705  00317C  4A10               	infsnz	retrieveLog@addr,f,c
 18706  00317E  2A11               	incf	retrieveLog@addr+1,f,c
 18707                           
 18708                           ; BSR set to: 0
 18709                           ;EEPROM.c: 149: unsigned char byte2 = EEPROM_read(addr);
 18710  003180  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 18711  003184  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 18712  003188  EC9B  F023         	call	i2_EEPROM_read	;wreg free
 18713  00318C  6E0C               	movwf	retrieveLog@byte2,c
 18714                           
 18715                           ;EEPROM.c: 150: log_count_pop_no_tab = (int)(byte2 & 0b11110000);
 18716  00318E  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 18717  003192  0EF0               	movlw	240
 18718  003194  1609               	andwf	??_retrieveLog,f,c
 18719  003196  5009               	movf	??_retrieveLog,w,c
 18720  003198  0100               	movlb	0	; () banked
 18721  00319A  6FEE               	movwf	_log_count_pop_no_tab& (0+255),b
 18722  00319C  6BEF               	clrf	(_log_count_pop_no_tab+1)& (0+255),b
 18723                           
 18724                           ; BSR set to: 0
 18725                           ;EEPROM.c: 151: log_count_pop_w_tab = (int)(byte2 & 0b00001111);
 18726  00319E  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 18727  0031A2  0E0F               	movlw	15
 18728  0031A4  1609               	andwf	??_retrieveLog,f,c
 18729  0031A6  5009               	movf	??_retrieveLog,w,c
 18730  0031A8  0100               	movlb	0	; () banked
 18731  0031AA  6FF0               	movwf	_log_count_pop_w_tab& (0+255),b
 18732  0031AC  6BF1               	clrf	(_log_count_pop_w_tab+1)& (0+255),b
 18733                           
 18734                           ; BSR set to: 0
 18735                           ;EEPROM.c: 152: addr++;
 18736  0031AE  4A10               	infsnz	retrieveLog@addr,f,c
 18737  0031B0  2A11               	incf	retrieveLog@addr+1,f,c
 18738                           
 18739                           ; BSR set to: 0
 18740                           ;EEPROM.c: 153: unsigned char byte3 = EEPROM_read(addr);
 18741  0031B2  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 18742  0031B6  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 18743  0031BA  EC9B  F023         	call	i2_EEPROM_read	;wreg free
 18744  0031BE  6E0D               	movwf	retrieveLog@byte3,c
 18745                           
 18746                           ;EEPROM.c: 154: log_count_can_w_lab = (int)(byte3 & 0b11110000);
 18747  0031C0  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 18748  0031C4  0EF0               	movlw	240
 18749  0031C6  1609               	andwf	??_retrieveLog,f,c
 18750  0031C8  5009               	movf	??_retrieveLog,w,c
 18751  0031CA  0100               	movlb	0	; () banked
 18752  0031CC  6FEC               	movwf	_log_count_can_w_lab& (0+255),b
 18753  0031CE  6BED               	clrf	(_log_count_can_w_lab+1)& (0+255),b
 18754                           
 18755                           ; BSR set to: 0
 18756                           ;EEPROM.c: 155: log_count_can_no_lab = (int)(byte3 & 0b00001111);
 18757  0031D0  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 18758  0031D4  0E0F               	movlw	15
 18759  0031D6  1609               	andwf	??_retrieveLog,f,c
 18760  0031D8  5009               	movf	??_retrieveLog,w,c
 18761  0031DA  0100               	movlb	0	; () banked
 18762  0031DC  6FEA               	movwf	_log_count_can_no_lab& (0+255),b
 18763  0031DE  6BEB               	clrf	(_log_count_can_no_lab+1)& (0+255),b
 18764                           
 18765                           ; BSR set to: 0
 18766                           ;EEPROM.c: 156: addr++;
 18767  0031E0  4A10               	infsnz	retrieveLog@addr,f,c
 18768  0031E2  2A11               	incf	retrieveLog@addr+1,f,c
 18769                           
 18770                           ; BSR set to: 0
 18771                           ;EEPROM.c: 159: for(int i = 0; i < 7; i++){
 18772  0031E4  0E00               	movlw	0
 18773  0031E6  6E0F               	movwf	retrieveLog@i+1,c
 18774  0031E8  0E00               	movlw	0
 18775  0031EA  6E0E               	movwf	retrieveLog@i,c
 18776  0031EC                     i2l5967:
 18777                           
 18778                           ; BSR set to: 0
 18779  0031EC  BE0F               	btfsc	retrieveLog@i+1,7,c
 18780  0031EE  D006               	goto	i2l5971
 18781  0031F0  500F               	movf	retrieveLog@i+1,w,c
 18782  0031F2  E11E               	bnz	i2l5979
 18783  0031F4  0E07               	movlw	7
 18784  0031F6  5C0E               	subwf	retrieveLog@i,w,c
 18785  0031F8  B0D8               	btfsc	status,0,c
 18786  0031FA  D01A               	goto	i2l5979
 18787  0031FC                     i2l5971:
 18788                           
 18789                           ;EEPROM.c: 160: log_startTime[i] = (int)EEPROM_read(addr);
 18790  0031FC  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 18791  003200  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 18792  003204  EC9B  F023         	call	i2_EEPROM_read	;wreg free
 18793  003208  6E09               	movwf	??_retrieveLog& (0+255),c
 18794  00320A  6A0A               	clrf	(??_retrieveLog+1)& (0+255),c
 18795  00320C  90D8               	bcf	status,0,c
 18796  00320E  340E               	rlcf	retrieveLog@i,w,c
 18797  003210  6ED9               	movwf	fsr2l,c
 18798  003212  340F               	rlcf	retrieveLog@i+1,w,c
 18799  003214  6EDA               	movwf	fsr2h,c
 18800  003216  0E00               	movlw	low _log_startTime
 18801  003218  26D9               	addwf	fsr2l,f,c
 18802  00321A  0E01               	movlw	high _log_startTime
 18803  00321C  22DA               	addwfc	fsr2h,f,c
 18804  00321E  C009  FFDE         	movff	??_retrieveLog,postinc2
 18805  003222  C00A  FFDD         	movff	??_retrieveLog+1,postdec2
 18806                           
 18807                           ;EEPROM.c: 161: addr++;
 18808  003226  4A10               	infsnz	retrieveLog@addr,f,c
 18809  003228  2A11               	incf	retrieveLog@addr+1,f,c
 18810  00322A  4A0E               	infsnz	retrieveLog@i,f,c
 18811  00322C  2A0F               	incf	retrieveLog@i+1,f,c
 18812  00322E  D7DE               	goto	i2l5967
 18813  003230                     i2l5979:
 18814                           
 18815                           ;EEPROM.c: 162: }
 18816                           ;EEPROM.c: 165: log_total_time = (int)EEPROM_read(addr);
 18817  003230  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 18818  003234  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 18819  003238  EC9B  F023         	call	i2_EEPROM_read	;wreg free
 18820  00323C  6E09               	movwf	??_retrieveLog& (0+255),c
 18821  00323E  5009               	movf	??_retrieveLog,w,c
 18822  003240  0100               	movlb	0	; () banked
 18823  003242  6FF4               	movwf	_log_total_time& (0+255),b
 18824  003244  6BF5               	clrf	(_log_total_time+1)& (0+255),b
 18825                           
 18826                           ; BSR set to: 0
 18827  003246  0012               	return		;funcret
 18828  003248                     __end_of_retrieveLog:
 18829                           	opt stack 0
 18830                           pclatu	equ	0xFFB
 18831                           pclath	equ	0xFFA
 18832                           tblptru	equ	0xFF8
 18833                           tblptrh	equ	0xFF7
 18834                           tblptrl	equ	0xFF6
 18835                           tablat	equ	0xFF5
 18836                           prodh	equ	0xFF4
 18837                           prodl	equ	0xFF3
 18838                           intcon	equ	0xFF2
 18839                           intcon2	equ	0xFF1
 18840                           intcon3	equ	0xFF0
 18841                           indf0	equ	0xFEF
 18842                           postinc0	equ	0xFEE
 18843                           fsr0h	equ	0xFEA
 18844                           fsr0l	equ	0xFE9
 18845                           wreg	equ	0xFE8
 18846                           postdec1	equ	0xFE5
 18847                           fsr1h	equ	0xFE2
 18848                           fsr1l	equ	0xFE1
 18849                           indf2	equ	0xFDF
 18850                           postinc2	equ	0xFDE
 18851                           postdec2	equ	0xFDD
 18852                           fsr2h	equ	0xFDA
 18853                           fsr2l	equ	0xFD9
 18854                           status	equ	0xFD8
 18855                           
 18856 ;; *************** function i2_EEPROM_read *****************
 18857 ;; Defined at:
 18858 ;;		line 68 in file "EEPROM.c"
 18859 ;; Parameters:    Size  Location     Type
 18860 ;;  address         2    0[COMRAM] unsigned short 
 18861 ;; Auto vars:     Size  Location     Type
 18862 ;;		None
 18863 ;; Return value:  Size  Location     Type
 18864 ;;                  1    wreg      unsigned char 
 18865 ;; Registers used:
 18866 ;;		wreg, status,2
 18867 ;; Tracked objects:
 18868 ;;		On entry : 0/0
 18869 ;;		On exit  : 0/0
 18870 ;;		Unchanged: 0/0
 18871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18872 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18873 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18874 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18875 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18876 ;;Total ram usage:        2 bytes
 18877 ;; Hardware stack levels used:    1
 18878 ;; This function calls:
 18879 ;;		Nothing
 18880 ;; This function is called by:
 18881 ;;		_retrieveLog
 18882 ;; This function uses a non-reentrant model
 18883 ;;
 18884                           
 18885                           	psect	text75
 18886  004736                     __ptext75:
 18887                           	opt stack 0
 18888  004736                     i2_EEPROM_read:
 18889                           	opt stack 20
 18890                           
 18891                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
 18892                           
 18893                           ; BSR set to: 0
 18894                           ;incstack = 0
 18895  004736  5002               	movf	i2EEPROM_read@address+1,w,c
 18896  004738  6EAA               	movwf	4010,c	;volatile
 18897                           
 18898                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
 18899  00473A  C001  FFA9         	movff	i2EEPROM_read@address,4009	;volatile
 18900                           
 18901                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
 18902  00473E  9EA6               	bcf	4006,7,c	;volatile
 18903                           
 18904                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
 18905  004740  9CA6               	bcf	4006,6,c	;volatile
 18906                           
 18907                           ;EEPROM.c: 75: EECON1bits.RD = 1;
 18908  004742  80A6               	bsf	4006,0,c	;volatile
 18909  004744                     i2l930:
 18910  004744  B0A6               	btfsc	4006,0,c	;volatile
 18911  004746  D7FE               	goto	i2l930
 18912                           
 18913                           ;EEPROM.c: 81: return EEDATA;
 18914  004748  50A8               	movf	4008,w,c	;volatile
 18915  00474A  0012               	return	
 18916  00474C                     __end_ofi2_EEPROM_read:
 18917                           	opt stack 0
 18918                           pclatu	equ	0xFFB
 18919                           pclath	equ	0xFFA
 18920                           tblptru	equ	0xFF8
 18921                           tblptrh	equ	0xFF7
 18922                           tblptrl	equ	0xFF6
 18923                           tablat	equ	0xFF5
 18924                           prodh	equ	0xFF4
 18925                           prodl	equ	0xFF3
 18926                           intcon	equ	0xFF2
 18927                           intcon2	equ	0xFF1
 18928                           intcon3	equ	0xFF0
 18929                           indf0	equ	0xFEF
 18930                           postinc0	equ	0xFEE
 18931                           fsr0h	equ	0xFEA
 18932                           fsr0l	equ	0xFE9
 18933                           wreg	equ	0xFE8
 18934                           postdec1	equ	0xFE5
 18935                           fsr1h	equ	0xFE2
 18936                           fsr1l	equ	0xFE1
 18937                           indf2	equ	0xFDF
 18938                           postinc2	equ	0xFDE
 18939                           postdec2	equ	0xFDD
 18940                           fsr2h	equ	0xFDA
 18941                           fsr2l	equ	0xFD9
 18942                           status	equ	0xFD8
 18943                           
 18944 ;; *************** function _printSortTimer *****************
 18945 ;; Defined at:
 18946 ;;		line 273 in file "sort.c"
 18947 ;; Parameters:    Size  Location     Type
 18948 ;;		None
 18949 ;; Auto vars:     Size  Location     Type
 18950 ;;  i               2   72[COMRAM] int 
 18951 ;;  curTime        14   46[COMRAM] int [7]
 18952 ;;  timeDiff        2   70[COMRAM] unsigned int 
 18953 ;;  sec             2   66[COMRAM] int 
 18954 ;;  min             2   64[COMRAM] int 
 18955 ;;  cur_sec         2   62[COMRAM] unsigned int 
 18956 ;;  start_sec       2   60[COMRAM] unsigned int 
 18957 ;;  hour            2   44[COMRAM] int 
 18958 ;; Return value:  Size  Location     Type
 18959 ;;                  1    wreg      void 
 18960 ;; Registers used:
 18961 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18962 ;; Tracked objects:
 18963 ;;		On entry : 0/0
 18964 ;;		On exit  : 0/0
 18965 ;;		Unchanged: 0/0
 18966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18967 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18968 ;;      Locals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18969 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18970 ;;      Totals:        33       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18971 ;;Total ram usage:       33 bytes
 18972 ;; Hardware stack levels used:    1
 18973 ;; Hardware stack levels required when called:    3
 18974 ;; This function calls:
 18975 ;;		i2___lwdiv
 18976 ;;		i2___lwmod
 18977 ;;		i2___wmul
 18978 ;;		i2_getRTC
 18979 ;;		i2_lcdInst
 18980 ;;		i2_printf
 18981 ;; This function is called by:
 18982 ;;		_handler
 18983 ;; This function uses a non-reentrant model
 18984 ;;
 18985                           
 18986                           	psect	text76
 18987  0026C4                     __ptext76:
 18988                           	opt stack 0
 18989  0026C4                     _printSortTimer:
 18990                           	opt stack 20
 18991                           
 18992                           ;sort.c: 274: getRTC();
 18993                           
 18994                           ;incstack = 0
 18995  0026C4  EC83  F01E         	call	i2_getRTC	;wreg free
 18996                           
 18997                           ;sort.c: 275: int curTime[7];
 18998                           ;sort.c: 276: for(int i = 0; i < 7; i++){
 18999  0026C8  0E00               	movlw	0
 19000  0026CA  6E4A               	movwf	printSortTimer@i+1,c
 19001  0026CC  0E00               	movlw	0
 19002  0026CE  6E49               	movwf	printSortTimer@i,c
 19003  0026D0                     i2l8053:
 19004  0026D0  BE4A               	btfsc	printSortTimer@i+1,7,c
 19005  0026D2  D006               	goto	i2l8057
 19006  0026D4  504A               	movf	printSortTimer@i+1,w,c
 19007  0026D6  E131               	bnz	i2l8063
 19008  0026D8  0E07               	movlw	7
 19009  0026DA  5C49               	subwf	printSortTimer@i,w,c
 19010  0026DC  B0D8               	btfsc	status,0,c
 19011  0026DE  D02D               	goto	i2l8063
 19012  0026E0                     i2l8057:
 19013                           
 19014                           ;sort.c: 277: curTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 19015  0026E0  0E24               	movlw	low _time
 19016  0026E2  2449               	addwf	printSortTimer@i,w,c
 19017  0026E4  6ED9               	movwf	fsr2l,c
 19018  0026E6  0E01               	movlw	high _time
 19019  0026E8  204A               	addwfc	printSortTimer@i+1,w,c
 19020  0026EA  6EDA               	movwf	fsr2h,c
 19021  0026EC  50DF               	movf	indf2,w,c
 19022  0026EE  6E2A               	movwf	??_printSortTimer& (0+255),c
 19023  0026F0  3A2A               	swapf	??_printSortTimer,f,c
 19024  0026F2  0E0F               	movlw	15
 19025  0026F4  162A               	andwf	??_printSortTimer,f,c
 19026  0026F6  0E0F               	movlw	15
 19027  0026F8  162A               	andwf	??_printSortTimer,f,c
 19028  0026FA  502A               	movf	??_printSortTimer,w,c
 19029  0026FC  0D0A               	mullw	10
 19030  0026FE  0E24               	movlw	low _time
 19031  002700  2449               	addwf	printSortTimer@i,w,c
 19032  002702  6ED9               	movwf	fsr2l,c
 19033  002704  0E01               	movlw	high _time
 19034  002706  204A               	addwfc	printSortTimer@i+1,w,c
 19035  002708  6EDA               	movwf	fsr2h,c
 19036  00270A  50DF               	movf	indf2,w,c
 19037  00270C  0B0F               	andlw	15
 19038  00270E  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 19039  002710  6A2C               	clrf	(??_printSortTimer+2)& (0+255),c
 19040  002712  50F3               	movf	prodl,w,c
 19041  002714  262B               	addwf	??_printSortTimer+1,f,c
 19042  002716  50F4               	movf	prodh,w,c
 19043  002718  222C               	addwfc	??_printSortTimer+2,f,c
 19044  00271A  90D8               	bcf	status,0,c
 19045  00271C  3449               	rlcf	printSortTimer@i,w,c
 19046  00271E  6ED9               	movwf	fsr2l,c
 19047  002720  344A               	rlcf	printSortTimer@i+1,w,c
 19048  002722  6EDA               	movwf	fsr2h,c
 19049  002724  0E2F               	movlw	low printSortTimer@curTime
 19050  002726  26D9               	addwf	fsr2l,f,c
 19051  002728  0E00               	movlw	high printSortTimer@curTime
 19052  00272A  22DA               	addwfc	fsr2h,f,c
 19053  00272C  C02B  FFDE         	movff	??_printSortTimer+1,postinc2
 19054  002730  C02C  FFDD         	movff	??_printSortTimer+2,postdec2
 19055  002734  4A49               	infsnz	printSortTimer@i,f,c
 19056  002736  2A4A               	incf	printSortTimer@i+1,f,c
 19057  002738  D7CB               	goto	i2l8053
 19058  00273A                     i2l8063:
 19059                           
 19060                           ;sort.c: 278: }
 19061                           ;sort.c: 279: unsigned int start_sec = startTime[0] + startTime[1]*60 + startTime[2]*360
      +                          0;
 19062  00273A  C110  F001         	movff	_startTime+2,i2___wmul@multiplier
 19063  00273E  C111  F002         	movff	_startTime+3,i2___wmul@multiplier+1
 19064  002742  0E00               	movlw	0
 19065  002744  6E04               	movwf	i2___wmul@multiplicand+1,c
 19066  002746  0E3C               	movlw	60
 19067  002748  6E03               	movwf	i2___wmul@multiplicand,c
 19068  00274A  EC09  F023         	call	i2___wmul	;wreg free
 19069  00274E  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 19070  002752  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 19071  002756  C112  F001         	movff	_startTime+4,i2___wmul@multiplier
 19072  00275A  C113  F002         	movff	_startTime+5,i2___wmul@multiplier+1
 19073  00275E  0E0E               	movlw	14
 19074  002760  6E04               	movwf	i2___wmul@multiplicand+1,c
 19075  002762  0E10               	movlw	16
 19076  002764  6E03               	movwf	i2___wmul@multiplicand,c
 19077  002766  EC09  F023         	call	i2___wmul	;wreg free
 19078  00276A  5001               	movf	?i2___wmul,w,c
 19079  00276C  262A               	addwf	??_printSortTimer,f,c
 19080  00276E  5002               	movf	?i2___wmul+1,w,c
 19081  002770  222B               	addwfc	??_printSortTimer+1,f,c
 19082  002772  0101               	movlb	1	; () banked
 19083  002774  510E               	movf	_startTime& (0+255),w,b
 19084  002776  242A               	addwf	??_printSortTimer,w,c
 19085  002778  6E3D               	movwf	printSortTimer@start_sec,c
 19086  00277A  0101               	movlb	1	; () banked
 19087  00277C  510F               	movf	(_startTime+1)& (0+255),w,b
 19088  00277E  202B               	addwfc	??_printSortTimer+1,w,c
 19089  002780  6E3E               	movwf	printSortTimer@start_sec+1,c
 19090                           
 19091                           ;sort.c: 280: unsigned int cur_sec = curTime[0] + curTime[1]*60 + curTime[2]*3600;
 19092  002782  C031  F001         	movff	printSortTimer@curTime+2,i2___wmul@multiplier
 19093  002786  C032  F002         	movff	printSortTimer@curTime+3,i2___wmul@multiplier+1
 19094  00278A  0E00               	movlw	0
 19095  00278C  6E04               	movwf	i2___wmul@multiplicand+1,c
 19096  00278E  0E3C               	movlw	60
 19097  002790  6E03               	movwf	i2___wmul@multiplicand,c
 19098  002792  EC09  F023         	call	i2___wmul	;wreg free
 19099  002796  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 19100  00279A  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 19101  00279E  C033  F001         	movff	printSortTimer@curTime+4,i2___wmul@multiplier
 19102  0027A2  C034  F002         	movff	printSortTimer@curTime+5,i2___wmul@multiplier+1
 19103  0027A6  0E0E               	movlw	14
 19104  0027A8  6E04               	movwf	i2___wmul@multiplicand+1,c
 19105  0027AA  0E10               	movlw	16
 19106  0027AC  6E03               	movwf	i2___wmul@multiplicand,c
 19107  0027AE  EC09  F023         	call	i2___wmul	;wreg free
 19108  0027B2  5001               	movf	?i2___wmul,w,c
 19109  0027B4  262A               	addwf	??_printSortTimer,f,c
 19110  0027B6  5002               	movf	?i2___wmul+1,w,c
 19111  0027B8  222B               	addwfc	??_printSortTimer+1,f,c
 19112  0027BA  502F               	movf	printSortTimer@curTime,w,c
 19113  0027BC  242A               	addwf	??_printSortTimer,w,c
 19114  0027BE  6E3F               	movwf	printSortTimer@cur_sec,c
 19115  0027C0  5030               	movf	printSortTimer@curTime+1,w,c
 19116  0027C2  202B               	addwfc	??_printSortTimer+1,w,c
 19117  0027C4  6E40               	movwf	printSortTimer@cur_sec+1,c
 19118                           
 19119                           ;sort.c: 281: unsigned int timeDiff = cur_sec - start_sec;
 19120  0027C6  C03D  F02A         	movff	printSortTimer@start_sec,??_printSortTimer
 19121  0027CA  C03E  F02B         	movff	printSortTimer@start_sec+1,??_printSortTimer+1
 19122  0027CE  1E2A               	comf	??_printSortTimer,f,c
 19123  0027D0  1E2B               	comf	??_printSortTimer+1,f,c
 19124  0027D2  4A2A               	infsnz	??_printSortTimer,f,c
 19125  0027D4  2A2B               	incf	??_printSortTimer+1,f,c
 19126  0027D6  503F               	movf	printSortTimer@cur_sec,w,c
 19127  0027D8  242A               	addwf	??_printSortTimer,w,c
 19128  0027DA  6E47               	movwf	printSortTimer@timeDiff,c
 19129  0027DC  5040               	movf	printSortTimer@cur_sec+1,w,c
 19130  0027DE  202B               	addwfc	??_printSortTimer+1,w,c
 19131  0027E0  6E48               	movwf	printSortTimer@timeDiff+1,c
 19132                           
 19133                           ;sort.c: 283: total_time = timeDiff;
 19134  0027E2  C047  F0F8         	movff	printSortTimer@timeDiff,_total_time
 19135  0027E6  C048  F0F9         	movff	printSortTimer@timeDiff+1,_total_time+1
 19136                           
 19137                           ;sort.c: 285: if(timeDiff >= 10){
 19138  0027EA  5048               	movf	printSortTimer@timeDiff+1,w,c
 19139  0027EC  E104               	bnz	i2u695_40
 19140  0027EE  0E0A               	movlw	10
 19141  0027F0  5C47               	subwf	printSortTimer@timeDiff,w,c
 19142  0027F2  A0D8               	btfss	status,0,c
 19143  0027F4  D003               	goto	i2l8073
 19144  0027F6                     i2u695_40:
 19145                           
 19146                           ;sort.c: 286: machine_state = DoneSorting_state;
 19147  0027F6  0E02               	movlw	2
 19148  0027F8  0100               	movlb	0	; () banked
 19149  0027FA  6FFC               	movwf	_machine_state& (0+255),b
 19150  0027FC                     i2l8073:
 19151                           
 19152                           ;sort.c: 288: }
 19153                           ;sort.c: 290: int hour = timeDiff / 3600;
 19154  0027FC  C047  F006         	movff	printSortTimer@timeDiff,i2___lwdiv@dividend
 19155  002800  C048  F007         	movff	printSortTimer@timeDiff+1,i2___lwdiv@dividend+1
 19156  002804  0E0E               	movlw	14
 19157  002806  6E09               	movwf	i2___lwdiv@divisor+1,c
 19158  002808  0E10               	movlw	16
 19159  00280A  6E08               	movwf	i2___lwdiv@divisor,c
 19160  00280C  EC0C  F020         	call	i2___lwdiv	;wreg free
 19161  002810  C006  F02D         	movff	?i2___lwdiv,printSortTimer@hour
 19162  002814  C007  F02E         	movff	?i2___lwdiv+1,printSortTimer@hour+1
 19163                           
 19164                           ;sort.c: 291: int min = (timeDiff % 3600) / 60;
 19165  002818  0E0E               	movlw	14
 19166  00281A  6E04               	movwf	i2___lwmod@divisor+1,c
 19167  00281C  0E10               	movlw	16
 19168  00281E  6E03               	movwf	i2___lwmod@divisor,c
 19169  002820  C047  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 19170  002824  C048  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 19171  002828  ECF2  F020         	call	i2___lwmod	;wreg free
 19172  00282C  C001  F006         	movff	?i2___lwmod,i2___lwdiv@dividend
 19173  002830  C002  F007         	movff	?i2___lwmod+1,i2___lwdiv@dividend+1
 19174  002834  0E00               	movlw	0
 19175  002836  6E09               	movwf	i2___lwdiv@divisor+1,c
 19176  002838  0E3C               	movlw	60
 19177  00283A  6E08               	movwf	i2___lwdiv@divisor,c
 19178  00283C  EC0C  F020         	call	i2___lwdiv	;wreg free
 19179  002840  C006  F041         	movff	?i2___lwdiv,printSortTimer@min
 19180  002844  C007  F042         	movff	?i2___lwdiv+1,printSortTimer@min+1
 19181                           
 19182                           ;sort.c: 292: int sec = (timeDiff % 3600) % 60;
 19183  002848  0E0E               	movlw	14
 19184  00284A  6E04               	movwf	i2___lwmod@divisor+1,c
 19185  00284C  0E10               	movlw	16
 19186  00284E  6E03               	movwf	i2___lwmod@divisor,c
 19187  002850  C047  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 19188  002854  C048  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 19189  002858  ECF2  F020         	call	i2___lwmod	;wreg free
 19190  00285C  C001  F045         	movff	?i2___lwmod,_printSortTimer$2412
 19191  002860  C002  F046         	movff	?i2___lwmod+1,_printSortTimer$2412+1
 19192                           
 19193                           ;sort.c: 292: int sec = (timeDiff % 3600) % 60;
 19194  002864  C045  F001         	movff	_printSortTimer$2412,i2___lwmod@dividend
 19195  002868  C046  F002         	movff	_printSortTimer$2412+1,i2___lwmod@dividend+1
 19196  00286C  0E00               	movlw	0
 19197  00286E  6E04               	movwf	i2___lwmod@divisor+1,c
 19198  002870  0E3C               	movlw	60
 19199  002872  6E03               	movwf	i2___lwmod@divisor,c
 19200  002874  ECF2  F020         	call	i2___lwmod	;wreg free
 19201  002878  C001  F043         	movff	?i2___lwmod,printSortTimer@sec
 19202  00287C  C002  F044         	movff	?i2___lwmod+1,printSortTimer@sec+1
 19203                           
 19204                           ;sort.c: 294: lcdInst(0b10000000);;
 19205  002880  0E80               	movlw	128
 19206  002882  ECCF  F023         	call	i2_lcdInst
 19207                           
 19208                           ;sort.c: 295: printf("SORTING...");
 19209  002886  0E72               	movlw	low STR_64
 19210  002888  6E0D               	movwf	i2printf@f,c
 19211  00288A  0EFF               	movlw	high STR_64
 19212  00288C  6E0E               	movwf	i2printf@f+1,c
 19213  00288E  ECD4  F00A         	call	i2_printf	;wreg free
 19214                           
 19215                           ;sort.c: 296: lcdInst(0b11000000);;
 19216  002892  0EC0               	movlw	192
 19217  002894  ECCF  F023         	call	i2_lcdInst
 19218                           
 19219                           ;sort.c: 297: printf("TIME %d:%02d", min, sec);
 19220  002898  0E43               	movlw	low STR_65
 19221  00289A  6E0D               	movwf	i2printf@f,c
 19222  00289C  0EFF               	movlw	high STR_65
 19223  00289E  6E0E               	movwf	i2printf@f+1,c
 19224  0028A0  C041  F00F         	movff	printSortTimer@min,?i2_printf+2
 19225  0028A4  C042  F010         	movff	printSortTimer@min+1,?i2_printf+3
 19226  0028A8  C043  F011         	movff	printSortTimer@sec,?i2_printf+4
 19227  0028AC  C044  F012         	movff	printSortTimer@sec+1,?i2_printf+5
 19228  0028B0  ECD4  F00A         	call	i2_printf	;wreg free
 19229  0028B4  0012               	return		;funcret
 19230  0028B6                     __end_of_printSortTimer:
 19231                           	opt stack 0
 19232                           pclatu	equ	0xFFB
 19233                           pclath	equ	0xFFA
 19234                           tblptru	equ	0xFF8
 19235                           tblptrh	equ	0xFF7
 19236                           tblptrl	equ	0xFF6
 19237                           tablat	equ	0xFF5
 19238                           prodh	equ	0xFF4
 19239                           prodl	equ	0xFF3
 19240                           intcon	equ	0xFF2
 19241                           intcon2	equ	0xFF1
 19242                           intcon3	equ	0xFF0
 19243                           indf0	equ	0xFEF
 19244                           postinc0	equ	0xFEE
 19245                           fsr0h	equ	0xFEA
 19246                           fsr0l	equ	0xFE9
 19247                           wreg	equ	0xFE8
 19248                           postdec1	equ	0xFE5
 19249                           fsr1h	equ	0xFE2
 19250                           fsr1l	equ	0xFE1
 19251                           indf2	equ	0xFDF
 19252                           postinc2	equ	0xFDE
 19253                           postdec2	equ	0xFDD
 19254                           fsr2h	equ	0xFDA
 19255                           fsr2l	equ	0xFD9
 19256                           status	equ	0xFD8
 19257                           
 19258 ;; *************** function i2_printf *****************
 19259 ;; Defined at:
 19260 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 19261 ;; Parameters:    Size  Location     Type
 19262 ;;  f               2   12[COMRAM] PTR const unsigned char 
 19263 ;;		 -> STR_116(17), STR_115(17), STR_114(10), STR_113(13), 
 19264 ;;		 -> STR_112(18), STR_111(18), STR_110(17), STR_109(15), 
 19265 ;;		 -> STR_108(15), STR_107(15), STR_106(17), STR_105(17), 
 19266 ;;		 -> STR_104(17), STR_103(16), STR_102(17), STR_101(17), 
 19267 ;;		 -> STR_100(17), STR_99(17), STR_98(17), STR_97(17), 
 19268 ;;		 -> STR_96(15), STR_95(11), STR_94(17), STR_93(11), 
 19269 ;;		 -> STR_92(17), STR_91(14), STR_90(15), STR_89(14), 
 19270 ;;		 -> STR_88(10), STR_87(9), STR_86(9), STR_85(10), 
 19271 ;;		 -> STR_84(10), STR_83(16), STR_82(15), STR_81(3), 
 19272 ;;		 -> STR_80(15), STR_79(13), STR_78(14), STR_77(8), 
 19273 ;;		 -> STR_76(14), STR_75(15), STR_74(12), STR_73(14), 
 19274 ;;		 -> STR_72(17), STR_71(14), STR_70(15), STR_69(17), 
 19275 ;;		 -> STR_68(17), STR_67(7), STR_66(21), STR_65(13), 
 19276 ;;		 -> STR_64(11), STR_63(24), STR_50(17), STR_49(17), 
 19277 ;;		 -> STR_48(17), STR_47(17), STR_46(17), STR_45(17), 
 19278 ;;		 -> STR_44(17), STR_43(17), STR_42(17), STR_41(17), 
 19279 ;;		 -> STR_40(17), STR_39(17), STR_38(17), STR_37(17), 
 19280 ;;		 -> STR_36(17), STR_35(17), STR_34(17), STR_33(17), 
 19281 ;;		 -> STR_32(17), STR_31(17), STR_30(17), STR_29(3), 
 19282 ;;		 -> STR_28(17), STR_27(19), STR_26(17), STR_25(19), 
 19283 ;;		 -> STR_24(17), STR_23(14), STR_22(10), STR_21(24), 
 19284 ;;		 -> STR_7(7), STR_6(17), STR_5(18), STR_4(16), 
 19285 ;;		 -> STR_3(18), STR_2(14), STR_1(18), 
 19286 ;; Auto vars:     Size  Location     Type
 19287 ;;  printf          4    0        struct .
 19288 ;;  printf          2   39[COMRAM] int 
 19289 ;;  printf          2   35[COMRAM] unsigned int 
 19290 ;;  printf          2   33[COMRAM] unsigned int 
 19291 ;;  printf          2   31[COMRAM] PTR void [1]
 19292 ;;		 -> ?i2_printf(2), ?_printf(2), 
 19293 ;;  printf          2   29[COMRAM] PTR const unsigned char 
 19294 ;;		 -> STR_117(7), count_total(2), printRTC@month(4), UI@month(4), 
 19295 ;;  printf          1   38[COMRAM] char 
 19296 ;;  printf          1   37[COMRAM] unsigned char 
 19297 ;;  printf          1   28[COMRAM] char 
 19298 ;; Return value:  Size  Location     Type
 19299 ;;                  2   12[COMRAM] int 
 19300 ;; Registers used:
 19301 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19302 ;; Tracked objects:
 19303 ;;		On entry : 0/0
 19304 ;;		On exit  : 0/0
 19305 ;;		Unchanged: 0/0
 19306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19307 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19308 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19309 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19310 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19311 ;;Total ram usage:       29 bytes
 19312 ;; Hardware stack levels used:    1
 19313 ;; Hardware stack levels required when called:    2
 19314 ;; This function calls:
 19315 ;;		i2___lwdiv
 19316 ;;		i2___lwmod
 19317 ;;		i2___wmul
 19318 ;;		i2_isdigit
 19319 ;;		i2_putch
 19320 ;; This function is called by:
 19321 ;;		_change_state_to_menu_11
 19322 ;;		_change_state_to_menu_23
 19323 ;;		_change_state_to_logs_11
 19324 ;;		_change_state_to_logs_12
 19325 ;;		_change_state_to_logs_22
 19326 ;;		_change_state_to_logs_23
 19327 ;;		_change_state_to_logs_33
 19328 ;;		_change_state_to_logs_34
 19329 ;;		_printSortTimer
 19330 ;;		i2_change_state_to_menu_start
 19331 ;;		i2_change_state_to_menu_12
 19332 ;;		i2_change_state_to_menu_22
 19333 ;;		i2_printRTC
 19334 ;; This function uses a non-reentrant model
 19335 ;;
 19336                           
 19337                           	psect	text77
 19338  0015A8                     __ptext77:
 19339                           	opt stack 0
 19340  0015A8                     i2_printf:
 19341                           	opt stack 19
 19342                           
 19343                           ;doprnt.c: 466: va_list ap;
 19344                           ;doprnt.c: 499: signed char c;
 19345                           ;doprnt.c: 501: int width;
 19346                           ;doprnt.c: 506: signed char prec;
 19347                           ;doprnt.c: 508: unsigned char flag;
 19348                           ;doprnt.c: 523: union {
 19349                           ;doprnt.c: 524: unsigned long vd;
 19350                           ;doprnt.c: 525: double integ;
 19351                           ;doprnt.c: 526: } tmpval;
 19352                           ;doprnt.c: 528: unsigned int val;
 19353                           ;doprnt.c: 529: unsigned len;
 19354                           ;doprnt.c: 530: const char * cp;
 19355                           ;doprnt.c: 533: *ap = __va_start();
 19356                           
 19357                           ;incstack = 0
 19358  0015A8  0E0F               	movlw	low (?i2_printf+2)
 19359  0015AA  6E20               	movwf	i2printf@ap,c
 19360  0015AC  0E00               	movlw	high (?i2_printf+2)
 19361  0015AE  6E21               	movwf	i2printf@ap+1,c
 19362                           
 19363                           ;doprnt.c: 536: while(c = *f++) {
 19364  0015B0  D1A4               	goto	i2l5785
 19365  0015B2                     i2l5655:
 19366                           
 19367                           ;doprnt.c: 538: if(c != '%')
 19368  0015B2  0E25               	movlw	37
 19369  0015B4  1827               	xorwf	i2printf@c,w,c
 19370  0015B6  B4D8               	btfsc	status,2,c
 19371  0015B8  D004               	goto	i2l5659
 19372                           
 19373                           ;doprnt.c: 540: {
 19374                           ;doprnt.c: 541: (putch(c) );
 19375  0015BA  5027               	movf	i2printf@c,w,c
 19376  0015BC  ECC9  F023         	call	i2_putch
 19377                           
 19378                           ;doprnt.c: 542: continue;
 19379  0015C0  D19C               	goto	i2l5785
 19380  0015C2                     i2l5659:
 19381                           
 19382                           ;doprnt.c: 543: }
 19383                           ;doprnt.c: 546: width = 0;
 19384  0015C2  0E00               	movlw	0
 19385  0015C4  6E29               	movwf	i2printf@width+1,c
 19386  0015C6  0E00               	movlw	0
 19387  0015C8  6E28               	movwf	i2printf@width,c
 19388                           
 19389                           ;doprnt.c: 548: flag = 0;
 19390  0015CA  0E00               	movlw	0
 19391  0015CC  6E26               	movwf	i2printf@flag,c
 19392                           
 19393                           ;doprnt.c: 551: switch(*f) {
 19394                           
 19395                           ;doprnt.c: 550: for(;;) {
 19396  0015CE  D003               	goto	i2l5665
 19397  0015D0                     i2l5661:
 19398                           
 19399                           ;doprnt.c: 580: flag |= 0x04;
 19400  0015D0  8426               	bsf	i2printf@flag,2,c
 19401                           
 19402                           ;doprnt.c: 581: f++;
 19403  0015D2  4A0D               	infsnz	i2printf@f,f,c
 19404  0015D4  2A0E               	incf	i2printf@f+1,f,c
 19405  0015D6                     i2l5665:
 19406  0015D6  C00D  FFF6         	movff	i2printf@f,tblptrl
 19407  0015DA  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 19408  0015DE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19409  0015DE  6AF8               	clrf	tblptru,c
 19410  0015E0                     	endif
 19411  0015E0                     	if	0	;tblptru may be non-zero
 19412  0015E0                     	endif
 19413  0015E0  0008               	tblrd		*
 19414  0015E2  50F5               	movf	tablat,w,c
 19415                           
 19416                           ; Switch size 1, requested type "space"
 19417                           ; Number of cases is 1, Range of values is 48 to 48
 19418                           ; switch strategies available:
 19419                           ; Name         Instructions Cycles
 19420                           ; simple_byte            4     3 (average)
 19421                           ;	Chosen strategy is simple_byte
 19422  0015E4  0A30               	xorlw	48	; case 48
 19423  0015E6  B4D8               	btfsc	status,2,c
 19424  0015E8  D7F3               	goto	i2l5661
 19425                           
 19426                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 19427                           
 19428                           ;doprnt.c: 586: }
 19429                           
 19430                           ;doprnt.c: 585: break;
 19431  0015EA  C00D  FFF6         	movff	i2printf@f,tblptrl
 19432  0015EE  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 19433  0015F2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19434  0015F2  6AF8               	clrf	tblptru,c
 19435  0015F4                     	endif
 19436  0015F4                     	if	0	;tblptru may be non-zero
 19437  0015F4                     	endif
 19438  0015F4  0008               	tblrd		*
 19439  0015F6  50F5               	movf	tablat,w,c
 19440  0015F8  EC75  F023         	call	i2_isdigit
 19441  0015FC  A0D8               	btfss	status,0,c
 19442  0015FE  D0A6               	goto	i2l5713
 19443                           
 19444                           ;doprnt.c: 598: width = 0;
 19445  001600  0E00               	movlw	0
 19446  001602  6E29               	movwf	i2printf@width+1,c
 19447  001604  0E00               	movlw	0
 19448  001606  6E28               	movwf	i2printf@width,c
 19449  001608                     i2l5671:
 19450                           
 19451                           ;doprnt.c: 600: width *= 10;
 19452  001608  C028  F001         	movff	i2printf@width,i2___wmul@multiplier
 19453  00160C  C029  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 19454  001610  0E00               	movlw	0
 19455  001612  6E04               	movwf	i2___wmul@multiplicand+1,c
 19456  001614  0E0A               	movlw	10
 19457  001616  6E03               	movwf	i2___wmul@multiplicand,c
 19458  001618  EC09  F023         	call	i2___wmul	;wreg free
 19459  00161C  C001  F028         	movff	?i2___wmul,i2printf@width
 19460  001620  C002  F029         	movff	?i2___wmul+1,i2printf@width+1
 19461                           
 19462                           ;doprnt.c: 601: width += *f++ - '0';
 19463  001624  0ED0               	movlw	208
 19464  001626  6E19               	movwf	??i2_printf& (0+255),c
 19465  001628  0EFF               	movlw	255
 19466  00162A  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 19467  00162C  C00D  FFF6         	movff	i2printf@f,tblptrl
 19468  001630  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 19469  001634                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19470  001634  6AF8               	clrf	tblptru,c
 19471  001636                     	endif
 19472  001636                     	if	0	;tblptru may be non-zero
 19473  001636                     	endif
 19474  001636  0008               	tblrd		*
 19475  001638  50F5               	movf	tablat,w,c
 19476  00163A  6E1B               	movwf	(??i2_printf+2)& (0+255),c
 19477  00163C  6A1C               	clrf	(??i2_printf+3)& (0+255),c
 19478  00163E  5019               	movf	??i2_printf,w,c
 19479  001640  261B               	addwf	??i2_printf+2,f,c
 19480  001642  501A               	movf	??i2_printf+1,w,c
 19481  001644  221C               	addwfc	??i2_printf+3,f,c
 19482  001646  501B               	movf	??i2_printf+2,w,c
 19483  001648  2628               	addwf	i2printf@width,f,c
 19484  00164A  501C               	movf	??i2_printf+3,w,c
 19485  00164C  2229               	addwfc	i2printf@width+1,f,c
 19486  00164E  4A0D               	infsnz	i2printf@f,f,c
 19487  001650  2A0E               	incf	i2printf@f+1,f,c
 19488                           
 19489                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 19490  001652  C00D  FFF6         	movff	i2printf@f,tblptrl
 19491  001656  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 19492  00165A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19493  00165A  6AF8               	clrf	tblptru,c
 19494  00165C                     	endif
 19495  00165C                     	if	0	;tblptru may be non-zero
 19496  00165C                     	endif
 19497  00165C  0008               	tblrd		*
 19498  00165E  50F5               	movf	tablat,w,c
 19499  001660  EC75  F023         	call	i2_isdigit
 19500  001664  A0D8               	btfss	status,0,c
 19501  001666  D072               	goto	i2l5713
 19502  001668  D7CF               	goto	i2l5671
 19503  00166A                     i2l5679:
 19504                           
 19505                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 19506  00166A  C020  FFD9         	movff	i2printf@ap,fsr2l
 19507  00166E  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 19508  001672  CFDE F01E          	movff	postinc2,i2printf@cp
 19509  001676  CFDD F01F          	movff	postdec2,i2printf@cp+1
 19510  00167A  0E02               	movlw	2
 19511  00167C  2620               	addwf	i2printf@ap,f,c
 19512  00167E  0E00               	movlw	0
 19513  001680  2221               	addwfc	i2printf@ap+1,f,c
 19514                           
 19515                           ;doprnt.c: 740: if(!cp)
 19516  001682  501E               	movf	i2printf@cp,w,c
 19517  001684  101F               	iorwf	i2printf@cp+1,w,c
 19518  001686  A4D8               	btfss	status,2,c
 19519  001688  D004               	goto	i2l5687
 19520                           
 19521                           ;doprnt.c: 741: cp = "(null)";
 19522  00168A  0EB6               	movlw	low STR_117
 19523  00168C  6E1E               	movwf	i2printf@cp,c
 19524  00168E  0EFF               	movlw	high STR_117
 19525  001690  6E1F               	movwf	i2printf@cp+1,c
 19526  001692                     i2l5687:
 19527                           
 19528                           ;doprnt.c: 745: len = 0;
 19529  001692  0E00               	movlw	0
 19530  001694  6E23               	movwf	i2printf@len+1,c
 19531  001696  0E00               	movlw	0
 19532  001698  6E22               	movwf	i2printf@len,c
 19533                           
 19534                           ;doprnt.c: 746: while(cp[len])
 19535  00169A  D002               	goto	i2l5691
 19536  00169C                     i2l5689:
 19537                           
 19538                           ;doprnt.c: 747: len++;
 19539  00169C  4A22               	infsnz	i2printf@len,f,c
 19540  00169E  2A23               	incf	i2printf@len+1,f,c
 19541  0016A0                     i2l5691:
 19542  0016A0  5022               	movf	i2printf@len,w,c
 19543  0016A2  241E               	addwf	i2printf@cp,w,c
 19544  0016A4  6E19               	movwf	??i2_printf& (0+255),c
 19545  0016A6  5023               	movf	i2printf@len+1,w,c
 19546  0016A8  201F               	addwfc	i2printf@cp+1,w,c
 19547  0016AA  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 19548  0016AC  C019  FFF6         	movff	??i2_printf,tblptrl
 19549  0016B0  C01A  FFF7         	movff	??i2_printf+1,tblptrh
 19550  0016B4  0E00               	movlw	low (__mediumconst shr (0+16))
 19551  0016B6  6EF8               	movwf	tblptru,c
 19552  0016B8  0E0F               	movlw	(high __ramtop+-1)
 19553  0016BA  64F7               	cpfsgt	tblptrh,c
 19554  0016BC  D003               	bra	i2u422_47
 19555  0016BE  0008               	tblrd		*
 19556  0016C0  50F5               	movf	tablat,w,c
 19557  0016C2  D005               	bra	i2u422_40
 19558  0016C4                     i2u422_47:
 19559  0016C4  CFF6 FFE9          	movff	tblptrl,fsr0l
 19560  0016C8  CFF7 FFEA          	movff	tblptrh,fsr0h
 19561  0016CC  50EF               	movf	indf0,w,c
 19562  0016CE                     i2u422_40:
 19563  0016CE  0900               	iorlw	0
 19564  0016D0  A4D8               	btfss	status,2,c
 19565  0016D2  D7E4               	goto	i2l5689
 19566                           
 19567                           ;doprnt.c: 757: if(width > len)
 19568  0016D4  5028               	movf	i2printf@width,w,c
 19569  0016D6  5C22               	subwf	i2printf@len,w,c
 19570  0016D8  5029               	movf	i2printf@width+1,w,c
 19571  0016DA  5823               	subwfb	i2printf@len+1,w,c
 19572  0016DC  B0D8               	btfsc	status,0,c
 19573  0016DE  D005               	goto	i2l5697
 19574                           
 19575                           ;doprnt.c: 758: width -= len;
 19576  0016E0  5022               	movf	i2printf@len,w,c
 19577  0016E2  5E28               	subwf	i2printf@width,f,c
 19578  0016E4  5023               	movf	i2printf@len+1,w,c
 19579  0016E6  5A29               	subwfb	i2printf@width+1,f,c
 19580  0016E8  D008               	goto	i2l5701
 19581  0016EA                     i2l5697:
 19582                           
 19583                           ;doprnt.c: 759: else
 19584                           ;doprnt.c: 760: width = 0;
 19585  0016EA  0E00               	movlw	0
 19586  0016EC  6E29               	movwf	i2printf@width+1,c
 19587  0016EE  0E00               	movlw	0
 19588  0016F0  6E28               	movwf	i2printf@width,c
 19589                           
 19590                           ;doprnt.c: 764: while(width--)
 19591  0016F2  D003               	goto	i2l5701
 19592  0016F4                     i2l5699:
 19593                           
 19594                           ;doprnt.c: 765: (putch(' ') );
 19595  0016F4  0E20               	movlw	32
 19596  0016F6  ECC9  F023         	call	i2_putch
 19597  0016FA                     i2l5701:
 19598  0016FA  0628               	decf	i2printf@width,f,c
 19599  0016FC  A0D8               	btfss	status,0,c
 19600  0016FE  0629               	decf	i2printf@width+1,f,c
 19601  001700  2828               	incf	i2printf@width,w,c
 19602  001702  E1F8               	bnz	i2l5699
 19603  001704  2829               	incf	i2printf@width+1,w,c
 19604  001706  B4D8               	btfsc	status,2,c
 19605  001708  D016               	goto	i2l5707
 19606  00170A  D7F4               	goto	i2l5699
 19607  00170C                     i2l5703:
 19608                           
 19609                           ;doprnt.c: 768: (putch(*cp++) );
 19610  00170C  C01E  FFF6         	movff	i2printf@cp,tblptrl
 19611  001710  C01F  FFF7         	movff	i2printf@cp+1,tblptrh
 19612  001714  0E00               	movlw	low (__mediumconst shr (0+16))
 19613  001716  6EF8               	movwf	tblptru,c
 19614  001718  0E0F               	movlw	(high __ramtop+-1)
 19615  00171A  64F7               	cpfsgt	tblptrh,c
 19616  00171C  D003               	bra	i2u426_47
 19617  00171E  0008               	tblrd		*
 19618  001720  50F5               	movf	tablat,w,c
 19619  001722  D005               	bra	i2u426_40
 19620  001724                     i2u426_47:
 19621  001724  CFF6 FFE9          	movff	tblptrl,fsr0l
 19622  001728  CFF7 FFEA          	movff	tblptrh,fsr0h
 19623  00172C  50EF               	movf	indf0,w,c
 19624  00172E                     i2u426_40:
 19625  00172E  ECC9  F023         	call	i2_putch
 19626  001732  4A1E               	infsnz	i2printf@cp,f,c
 19627  001734  2A1F               	incf	i2printf@cp+1,f,c
 19628  001736                     i2l5707:
 19629  001736  0622               	decf	i2printf@len,f,c
 19630  001738  A0D8               	btfss	status,0,c
 19631  00173A  0623               	decf	i2printf@len+1,f,c
 19632  00173C  2822               	incf	i2printf@len,w,c
 19633  00173E  E1E6               	bnz	i2l5703
 19634  001740  2823               	incf	i2printf@len+1,w,c
 19635  001742  B4D8               	btfsc	status,2,c
 19636  001744  D0DA               	goto	i2l5785
 19637  001746  D7E2               	goto	i2l5703
 19638  001748                     i2l5709:
 19639                           
 19640                           ;doprnt.c: 818: flag |= 0x40;
 19641  001748  8C26               	bsf	i2printf@flag,6,c
 19642                           
 19643                           ;doprnt.c: 822: }
 19644                           
 19645                           ;doprnt.c: 819: break;
 19646  00174A  D01B               	goto	i2l1249
 19647  00174C                     i2l5713:
 19648  00174C  C00D  FFF6         	movff	i2printf@f,tblptrl
 19649  001750  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 19650  001754  4A0D               	infsnz	i2printf@f,f,c
 19651  001756  2A0E               	incf	i2printf@f+1,f,c
 19652  001758                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19653  001758  6AF8               	clrf	tblptru,c
 19654  00175A                     	endif
 19655  00175A                     	if	0	;tblptru may be non-zero
 19656  00175A                     	endif
 19657  00175A  0008               	tblrd		*
 19658  00175C  CFF5 F027          	movff	tablat,i2printf@c
 19659  001760  5027               	movf	i2printf@c,w,c
 19660                           
 19661                           ; Switch size 1, requested type "space"
 19662                           ; Number of cases is 5, Range of values is 0 to 117
 19663                           ; switch strategies available:
 19664                           ; Name         Instructions Cycles
 19665                           ; simple_byte           16     9 (average)
 19666                           ;	Chosen strategy is simple_byte
 19667  001762  0A00               	xorlw	0	; case 0
 19668  001764  B4D8               	btfsc	status,2,c
 19669  001766  0012               	return	
 19670  001768  0A64               	xorlw	100	; case 100
 19671  00176A  B4D8               	btfsc	status,2,c
 19672  00176C  D00A               	goto	i2l1249
 19673  00176E  0A0D               	xorlw	13	; case 105
 19674  001770  B4D8               	btfsc	status,2,c
 19675  001772  D007               	goto	i2l1249
 19676  001774  0A1A               	xorlw	26	; case 115
 19677  001776  B4D8               	btfsc	status,2,c
 19678  001778  D778               	goto	i2l5679
 19679  00177A  0A06               	xorlw	6	; case 117
 19680  00177C  B4D8               	btfsc	status,2,c
 19681  00177E  D7E4               	goto	i2l5709
 19682  001780  D0BC               	goto	i2l5785
 19683  001782                     i2l1249:
 19684                           
 19685                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 19686  001782  BC26               	btfsc	i2printf@flag,6,c
 19687  001784  D015               	goto	i2l5725
 19688                           
 19689                           ;doprnt.c: 1253: {
 19690                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 19691  001786  C020  FFD9         	movff	i2printf@ap,fsr2l
 19692  00178A  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 19693  00178E  CFDE F024          	movff	postinc2,i2printf@val
 19694  001792  CFDD F025          	movff	postdec2,i2printf@val+1
 19695  001796  0E02               	movlw	2
 19696  001798  2620               	addwf	i2printf@ap,f,c
 19697  00179A  0E00               	movlw	0
 19698  00179C  2221               	addwfc	i2printf@ap+1,f,c
 19699                           
 19700                           ;doprnt.c: 1261: if((int)val < 0) {
 19701  00179E  AE25               	btfss	i2printf@val+1,7,c
 19702  0017A0  D013               	goto	i2l5729
 19703                           
 19704                           ;doprnt.c: 1262: flag |= 0x03;
 19705  0017A2  0E03               	movlw	3
 19706  0017A4  1226               	iorwf	i2printf@flag,f,c
 19707                           
 19708                           ;doprnt.c: 1263: val = -val;
 19709  0017A6  6C24               	negf	i2printf@val,c
 19710  0017A8  1E25               	comf	i2printf@val+1,f,c
 19711  0017AA  B0D8               	btfsc	status,0,c
 19712  0017AC  2A25               	incf	i2printf@val+1,f,c
 19713                           
 19714                           ;doprnt.c: 1264: }
 19715                           ;doprnt.c: 1266: }
 19716  0017AE  D00C               	goto	i2l5729
 19717  0017B0                     i2l5725:
 19718                           
 19719                           ;doprnt.c: 1268: else
 19720                           ;doprnt.c: 1273: {
 19721                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 19722  0017B0  C020  FFD9         	movff	i2printf@ap,fsr2l
 19723  0017B4  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 19724  0017B8  CFDE F024          	movff	postinc2,i2printf@val
 19725  0017BC  CFDD F025          	movff	postdec2,i2printf@val+1
 19726  0017C0  0E02               	movlw	2
 19727  0017C2  2620               	addwf	i2printf@ap,f,c
 19728  0017C4  0E00               	movlw	0
 19729  0017C6  2221               	addwfc	i2printf@ap+1,f,c
 19730  0017C8                     i2l5729:
 19731                           
 19732                           ;doprnt.c: 1287: }
 19733                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 19734  0017C8  0E01               	movlw	1
 19735  0017CA  6E27               	movwf	i2printf@c,c
 19736  0017CC                     i2l5731:
 19737  0017CC  0E05               	movlw	5
 19738  0017CE  1827               	xorwf	i2printf@c,w,c
 19739  0017D0  B4D8               	btfsc	status,2,c
 19740  0017D2  D015               	goto	i2l5743
 19741                           
 19742                           ;doprnt.c: 1306: if(val < dpowers[c])
 19743  0017D4  5027               	movf	i2printf@c,w,c
 19744  0017D6  0D02               	mullw	2
 19745  0017D8  0E26               	movlw	low _dpowers
 19746  0017DA  24F3               	addwf	prodl,w,c
 19747  0017DC  6EF6               	movwf	tblptrl,c
 19748  0017DE  0EFB               	movlw	high _dpowers
 19749  0017E0  20F4               	addwfc	prodh,w,c
 19750  0017E2  6EF7               	movwf	tblptrh,c
 19751  0017E4                     	if	1	;There are 3 active tblptr bytes
 19752  0017E4  6AF8               	clrf	tblptru,c
 19753  0017E6  0E00               	movlw	low (__mediumconst shr (0+16))
 19754  0017E8  22F8               	addwfc	tblptru,f,c
 19755  0017EA                     	endif
 19756  0017EA  0009               	tblrd		*+
 19757  0017EC  50F5               	movf	tablat,w,c
 19758  0017EE  5C24               	subwf	i2printf@val,w,c
 19759  0017F0  0009               	tblrd		*+
 19760  0017F2  50F5               	movf	tablat,w,c
 19761  0017F4  5825               	subwfb	i2printf@val+1,w,c
 19762  0017F6  A0D8               	btfss	status,0,c
 19763  0017F8  D002               	goto	i2l5743
 19764                           
 19765                           ;doprnt.c: 1307: break;
 19766  0017FA  2A27               	incf	i2printf@c,f,c
 19767  0017FC  D7E7               	goto	i2l5731
 19768  0017FE                     i2l5743:
 19769                           
 19770                           ;doprnt.c: 1345: if(width && flag & 0x03)
 19771  0017FE  5028               	movf	i2printf@width,w,c
 19772  001800  1029               	iorwf	i2printf@width+1,w,c
 19773  001802  B4D8               	btfsc	status,2,c
 19774  001804  D009               	goto	i2l5749
 19775  001806  C026  F019         	movff	i2printf@flag,??i2_printf
 19776  00180A  0E03               	movlw	3
 19777  00180C  1619               	andwf	??i2_printf,f,c
 19778  00180E  B4D8               	btfsc	status,2,c
 19779  001810  D003               	goto	i2l5749
 19780                           
 19781                           ;doprnt.c: 1346: width--;
 19782  001812  0628               	decf	i2printf@width,f,c
 19783  001814  A0D8               	btfss	status,0,c
 19784  001816  0629               	decf	i2printf@width+1,f,c
 19785  001818                     i2l5749:
 19786                           
 19787                           ;doprnt.c: 1381: if(width > c)
 19788  001818  0E80               	movlw	128
 19789  00181A  BE27               	btfsc	i2printf@c,7,c
 19790  00181C  0E7F               	movlw	127
 19791  00181E  6E19               	movwf	??i2_printf& (0+255),c
 19792  001820  5028               	movf	i2printf@width,w,c
 19793  001822  5C27               	subwf	i2printf@c,w,c
 19794  001824  5029               	movf	i2printf@width+1,w,c
 19795  001826  0A80               	xorlw	128
 19796  001828  5819               	subwfb	??i2_printf& (0+255),w,c
 19797  00182A  B0D8               	btfsc	status,0,c
 19798  00182C  D007               	goto	i2l5753
 19799                           
 19800                           ;doprnt.c: 1382: width -= c;
 19801  00182E  5027               	movf	i2printf@c,w,c
 19802  001830  5E28               	subwf	i2printf@width,f,c
 19803  001832  0E00               	movlw	0
 19804  001834  BE27               	btfsc	i2printf@c,7,c
 19805  001836  0EFF               	movlw	255
 19806  001838  5A29               	subwfb	i2printf@width+1,f,c
 19807  00183A  D004               	goto	i2l5755
 19808  00183C                     i2l5753:
 19809                           
 19810                           ;doprnt.c: 1383: else
 19811                           ;doprnt.c: 1384: width = 0;
 19812  00183C  0E00               	movlw	0
 19813  00183E  6E29               	movwf	i2printf@width+1,c
 19814  001840  0E00               	movlw	0
 19815  001842  6E28               	movwf	i2printf@width,c
 19816  001844                     i2l5755:
 19817                           
 19818                           ;doprnt.c: 1387: if(flag & 0x04) {
 19819  001844  A426               	btfss	i2printf@flag,2,c
 19820  001846  D014               	goto	i2l5767
 19821                           
 19822                           ;doprnt.c: 1392: if(flag & 0x03)
 19823  001848  C026  F019         	movff	i2printf@flag,??i2_printf
 19824  00184C  0E03               	movlw	3
 19825  00184E  1619               	andwf	??i2_printf,f,c
 19826  001850  B4D8               	btfsc	status,2,c
 19827  001852  D003               	goto	i2l5761
 19828                           
 19829                           ;doprnt.c: 1393: (putch('-') );
 19830  001854  0E2D               	movlw	45
 19831  001856  ECC9  F023         	call	i2_putch
 19832  00185A                     i2l5761:
 19833                           
 19834                           ;doprnt.c: 1415: if(width)
 19835  00185A  5028               	movf	i2printf@width,w,c
 19836  00185C  1029               	iorwf	i2printf@width+1,w,c
 19837  00185E  B4D8               	btfsc	status,2,c
 19838  001860  D01E               	goto	i2l5777
 19839                           
 19840                           ;doprnt.c: 1417: (putch('0') );
 19841                           
 19842                           ;doprnt.c: 1416: do
 19843  001862  0E30               	movlw	48
 19844  001864  ECC9  F023         	call	i2_putch
 19845                           
 19846                           ;doprnt.c: 1418: while(--width);
 19847  001868  0628               	decf	i2printf@width,f,c
 19848  00186A  A0D8               	btfss	status,0,c
 19849  00186C  0629               	decf	i2printf@width+1,f,c
 19850  00186E  D7F5               	goto	i2l5761
 19851  001870                     i2l5767:
 19852                           
 19853                           ;doprnt.c: 1422: {
 19854                           ;doprnt.c: 1424: if(width
 19855                           ;doprnt.c: 1428: )
 19856  001870  5028               	movf	i2printf@width,w,c
 19857  001872  1029               	iorwf	i2printf@width+1,w,c
 19858  001874  B4D8               	btfsc	status,2,c
 19859  001876  D00A               	goto	i2l5773
 19860  001878                     i2l5769:
 19861                           
 19862                           ;doprnt.c: 1430: (putch(' ') );
 19863  001878  0E20               	movlw	32
 19864  00187A  ECC9  F023         	call	i2_putch
 19865                           
 19866                           ;doprnt.c: 1431: while(--width);
 19867  00187E  0628               	decf	i2printf@width,f,c
 19868  001880  A0D8               	btfss	status,0,c
 19869  001882  0629               	decf	i2printf@width+1,f,c
 19870  001884  5028               	movf	i2printf@width,w,c
 19871  001886  1029               	iorwf	i2printf@width+1,w,c
 19872  001888  A4D8               	btfss	status,2,c
 19873  00188A  D7F6               	goto	i2l5769
 19874  00188C                     i2l5773:
 19875                           
 19876                           ;doprnt.c: 1438: if(flag & 0x03)
 19877  00188C  C026  F019         	movff	i2printf@flag,??i2_printf
 19878  001890  0E03               	movlw	3
 19879  001892  1619               	andwf	??i2_printf,f,c
 19880  001894  B4D8               	btfsc	status,2,c
 19881  001896  D003               	goto	i2l5777
 19882                           
 19883                           ;doprnt.c: 1439: (putch('-') );
 19884  001898  0E2D               	movlw	45
 19885  00189A  ECC9  F023         	call	i2_putch
 19886  00189E                     i2l5777:
 19887                           
 19888                           ;doprnt.c: 1469: }
 19889                           ;doprnt.c: 1472: prec = c;
 19890  00189E  C027  F01D         	movff	i2printf@c,i2printf@prec
 19891                           
 19892                           ;doprnt.c: 1474: while(prec--) {
 19893  0018A2  D027               	goto	i2l5783
 19894  0018A4                     i2l5779:
 19895                           
 19896                           ;doprnt.c: 1478: {
 19897                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 19898  0018A4  501D               	movf	i2printf@prec,w,c
 19899  0018A6  0D02               	mullw	2
 19900  0018A8  0E26               	movlw	low _dpowers
 19901  0018AA  24F3               	addwf	prodl,w,c
 19902  0018AC  6EF6               	movwf	tblptrl,c
 19903  0018AE  0EFB               	movlw	high _dpowers
 19904  0018B0  20F4               	addwfc	prodh,w,c
 19905  0018B2  6EF7               	movwf	tblptrh,c
 19906  0018B4                     	if	1	;There are 3 active tblptr bytes
 19907  0018B4  6AF8               	clrf	tblptru,c
 19908  0018B6  0E00               	movlw	low (__mediumconst shr (0+16))
 19909  0018B8  22F8               	addwfc	tblptru,f,c
 19910  0018BA                     	endif
 19911  0018BA  0009               	tblrd		*+
 19912  0018BC  CFF5 F008          	movff	tablat,i2___lwdiv@divisor
 19913  0018C0  000A               	tblrd		*-
 19914  0018C2  CFF5 F009          	movff	tablat,i2___lwdiv@divisor+1
 19915  0018C6  C024  F006         	movff	i2printf@val,i2___lwdiv@dividend
 19916  0018CA  C025  F007         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 19917  0018CE  EC0C  F020         	call	i2___lwdiv	;wreg free
 19918  0018D2  C006  F001         	movff	?i2___lwdiv,i2___lwmod@dividend
 19919  0018D6  C007  F002         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 19920  0018DA  0E00               	movlw	0
 19921  0018DC  6E04               	movwf	i2___lwmod@divisor+1,c
 19922  0018DE  0E0A               	movlw	10
 19923  0018E0  6E03               	movwf	i2___lwmod@divisor,c
 19924  0018E2  ECF2  F020         	call	i2___lwmod	;wreg free
 19925  0018E6  5001               	movf	?i2___lwmod,w,c
 19926  0018E8  0F30               	addlw	48
 19927  0018EA  6E27               	movwf	i2printf@c,c
 19928                           
 19929                           ;doprnt.c: 1523: }
 19930                           ;doprnt.c: 1524: (putch(c) );
 19931  0018EC  5027               	movf	i2printf@c,w,c
 19932  0018EE  ECC9  F023         	call	i2_putch
 19933  0018F2                     i2l5783:
 19934  0018F2  061D               	decf	i2printf@prec,f,c
 19935  0018F4  281D               	incf	i2printf@prec,w,c
 19936  0018F6  A4D8               	btfss	status,2,c
 19937  0018F8  D7D5               	goto	i2l5779
 19938  0018FA                     i2l5785:
 19939  0018FA  C00D  FFF6         	movff	i2printf@f,tblptrl
 19940  0018FE  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 19941  001902  4A0D               	infsnz	i2printf@f,f,c
 19942  001904  2A0E               	incf	i2printf@f+1,f,c
 19943  001906                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19944  001906  6AF8               	clrf	tblptru,c
 19945  001908                     	endif
 19946  001908                     	if	0	;tblptru may be non-zero
 19947  001908                     	endif
 19948  001908  0008               	tblrd		*
 19949  00190A  CFF5 F027          	movff	tablat,i2printf@c
 19950  00190E  5027               	movf	i2printf@c,w,c
 19951  001910  B4D8               	btfsc	status,2,c
 19952  001912  0012               	return	
 19953  001914  D64E               	goto	i2l5655
 19954  001916                     __end_ofi2_printf:
 19955                           	opt stack 0
 19956                           pclatu	equ	0xFFB
 19957                           pclath	equ	0xFFA
 19958                           tblptru	equ	0xFF8
 19959                           tblptrh	equ	0xFF7
 19960                           tblptrl	equ	0xFF6
 19961                           tablat	equ	0xFF5
 19962                           prodh	equ	0xFF4
 19963                           prodl	equ	0xFF3
 19964                           intcon	equ	0xFF2
 19965                           intcon2	equ	0xFF1
 19966                           intcon3	equ	0xFF0
 19967                           indf0	equ	0xFEF
 19968                           postinc0	equ	0xFEE
 19969                           fsr0h	equ	0xFEA
 19970                           fsr0l	equ	0xFE9
 19971                           wreg	equ	0xFE8
 19972                           postdec1	equ	0xFE5
 19973                           fsr1h	equ	0xFE2
 19974                           fsr1l	equ	0xFE1
 19975                           indf2	equ	0xFDF
 19976                           postinc2	equ	0xFDE
 19977                           postdec2	equ	0xFDD
 19978                           fsr2h	equ	0xFDA
 19979                           fsr2l	equ	0xFD9
 19980                           status	equ	0xFD8
 19981                           
 19982 ;; *************** function i2_putch *****************
 19983 ;; Defined at:
 19984 ;;		line 20 in file "lcd.c"
 19985 ;; Parameters:    Size  Location     Type
 19986 ;;  data            1    wreg     unsigned char 
 19987 ;; Auto vars:     Size  Location     Type
 19988 ;;  data            1    2[COMRAM] unsigned char 
 19989 ;; Return value:  Size  Location     Type
 19990 ;;                  1    wreg      void 
 19991 ;; Registers used:
 19992 ;;		wreg, status,2, status,0, cstack
 19993 ;; Tracked objects:
 19994 ;;		On entry : 0/0
 19995 ;;		On exit  : 0/0
 19996 ;;		Unchanged: 0/0
 19997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19998 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19999 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20000 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20001 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20002 ;;Total ram usage:        1 bytes
 20003 ;; Hardware stack levels used:    1
 20004 ;; Hardware stack levels required when called:    1
 20005 ;; This function calls:
 20006 ;;		i2_lcdNibble
 20007 ;; This function is called by:
 20008 ;;		i2_printf
 20009 ;; This function uses a non-reentrant model
 20010 ;;
 20011                           
 20012                           	psect	text78
 20013  004792                     __ptext78:
 20014                           	opt stack 0
 20015  004792                     i2_putch:
 20016                           	opt stack 19
 20017                           
 20018                           ;incstack = 0
 20019                           ;i2putch@data stored from wreg
 20020  004792  6E03               	movwf	i2putch@data,c
 20021                           
 20022                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 20023  004794  848C               	bsf	3980,2,c	;volatile
 20024                           
 20025                           ;lcd.c: 22: lcdNibble(data);
 20026  004796  5003               	movf	i2putch@data,w,c
 20027  004798  ECE1  F01F         	call	i2_lcdNibble
 20028  00479C  0012               	return		;funcret
 20029  00479E                     __end_ofi2_putch:
 20030                           	opt stack 0
 20031                           pclatu	equ	0xFFB
 20032                           pclath	equ	0xFFA
 20033                           tblptru	equ	0xFF8
 20034                           tblptrh	equ	0xFF7
 20035                           tblptrl	equ	0xFF6
 20036                           tablat	equ	0xFF5
 20037                           prodh	equ	0xFF4
 20038                           prodl	equ	0xFF3
 20039                           intcon	equ	0xFF2
 20040                           intcon2	equ	0xFF1
 20041                           intcon3	equ	0xFF0
 20042                           indf0	equ	0xFEF
 20043                           postinc0	equ	0xFEE
 20044                           fsr0h	equ	0xFEA
 20045                           fsr0l	equ	0xFE9
 20046                           wreg	equ	0xFE8
 20047                           postdec1	equ	0xFE5
 20048                           fsr1h	equ	0xFE2
 20049                           fsr1l	equ	0xFE1
 20050                           indf2	equ	0xFDF
 20051                           postinc2	equ	0xFDE
 20052                           postdec2	equ	0xFDD
 20053                           fsr2h	equ	0xFDA
 20054                           fsr2l	equ	0xFD9
 20055                           status	equ	0xFD8
 20056                           
 20057 ;; *************** function i2_isdigit *****************
 20058 ;; Defined at:
 20059 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 20060 ;; Parameters:    Size  Location     Type
 20061 ;;  c               1    wreg     unsigned char 
 20062 ;; Auto vars:     Size  Location     Type
 20063 ;;  c               1    2[COMRAM] unsigned char 
 20064 ;; Return value:  Size  Location     Type
 20065 ;;		None               void
 20066 ;; Registers used:
 20067 ;;		wreg, status,2, status,0
 20068 ;; Tracked objects:
 20069 ;;		On entry : 0/0
 20070 ;;		On exit  : 0/0
 20071 ;;		Unchanged: 0/0
 20072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20073 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20074 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20075 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20076 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20077 ;;Total ram usage:        3 bytes
 20078 ;; Hardware stack levels used:    1
 20079 ;; This function calls:
 20080 ;;		Nothing
 20081 ;; This function is called by:
 20082 ;;		i2_printf
 20083 ;; This function uses a non-reentrant model
 20084 ;;
 20085                           
 20086                           	psect	text79
 20087  0046EA                     __ptext79:
 20088                           	opt stack 0
 20089  0046EA                     i2_isdigit:
 20090                           	opt stack 20
 20091                           
 20092                           ;incstack = 0
 20093                           ;i2isdigit@c stored from wreg
 20094  0046EA  6E03               	movwf	i2isdigit@c,c
 20095  0046EC  0E00               	movlw	0
 20096  0046EE  6E02               	movwf	i2_isdigit$1939,c
 20097  0046F0  0E3A               	movlw	58
 20098  0046F2  6003               	cpfslt	i2isdigit@c,c
 20099  0046F4  D005               	goto	i2l5365
 20100  0046F6  0E2F               	movlw	47
 20101  0046F8  6403               	cpfsgt	i2isdigit@c,c
 20102  0046FA  D002               	goto	i2l5365
 20103  0046FC  0E01               	movlw	1
 20104  0046FE  6E02               	movwf	i2_isdigit$1939,c
 20105  004700                     i2l5365:
 20106  004700  C002  F001         	movff	i2_isdigit$1939,??i2_isdigit
 20107  004704  3001               	rrcf	??i2_isdigit,w,c
 20108  004706  0012               	return	
 20109  004708                     __end_ofi2_isdigit:
 20110                           	opt stack 0
 20111                           pclatu	equ	0xFFB
 20112                           pclath	equ	0xFFA
 20113                           tblptru	equ	0xFF8
 20114                           tblptrh	equ	0xFF7
 20115                           tblptrl	equ	0xFF6
 20116                           tablat	equ	0xFF5
 20117                           prodh	equ	0xFF4
 20118                           prodl	equ	0xFF3
 20119                           intcon	equ	0xFF2
 20120                           intcon2	equ	0xFF1
 20121                           intcon3	equ	0xFF0
 20122                           indf0	equ	0xFEF
 20123                           postinc0	equ	0xFEE
 20124                           fsr0h	equ	0xFEA
 20125                           fsr0l	equ	0xFE9
 20126                           wreg	equ	0xFE8
 20127                           postdec1	equ	0xFE5
 20128                           fsr1h	equ	0xFE2
 20129                           fsr1l	equ	0xFE1
 20130                           indf2	equ	0xFDF
 20131                           postinc2	equ	0xFDE
 20132                           postdec2	equ	0xFDD
 20133                           fsr2h	equ	0xFDA
 20134                           fsr2l	equ	0xFD9
 20135                           status	equ	0xFD8
 20136                           
 20137 ;; *************** function i2___wmul *****************
 20138 ;; Defined at:
 20139 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 20140 ;; Parameters:    Size  Location     Type
 20141 ;;  multiplier      2    0[COMRAM] unsigned int 
 20142 ;;  multiplicand    2    2[COMRAM] unsigned int 
 20143 ;; Auto vars:     Size  Location     Type
 20144 ;;  __wmul          2    4[COMRAM] unsigned int 
 20145 ;; Return value:  Size  Location     Type
 20146 ;;                  2    0[COMRAM] unsigned int 
 20147 ;; Registers used:
 20148 ;;		wreg, status,2, status,0, prodl, prodh
 20149 ;; Tracked objects:
 20150 ;;		On entry : 0/0
 20151 ;;		On exit  : 0/0
 20152 ;;		Unchanged: 0/0
 20153 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20154 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20155 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20156 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20157 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20158 ;;Total ram usage:        6 bytes
 20159 ;; Hardware stack levels used:    1
 20160 ;; This function calls:
 20161 ;;		Nothing
 20162 ;; This function is called by:
 20163 ;;		_printSortTimer
 20164 ;;		_retrieveLog
 20165 ;;		i2_printf
 20166 ;; This function uses a non-reentrant model
 20167 ;;
 20168                           
 20169                           	psect	text80
 20170  004612                     __ptext80:
 20171                           	opt stack 0
 20172  004612                     i2___wmul:
 20173                           	opt stack 20
 20174                           
 20175                           ;incstack = 0
 20176  004612  5001               	movf	i2___wmul@multiplier,w,c
 20177  004614  0203               	mulwf	i2___wmul@multiplicand,c
 20178  004616  CFF3 F005          	movff	prodl,i2___wmul@product
 20179  00461A  CFF4 F006          	movff	prodh,i2___wmul@product+1
 20180  00461E  5001               	movf	i2___wmul@multiplier,w,c
 20181  004620  0204               	mulwf	i2___wmul@multiplicand+1,c
 20182  004622  50F3               	movf	prodl,w,c
 20183  004624  2606               	addwf	i2___wmul@product+1,f,c
 20184  004626  5002               	movf	i2___wmul@multiplier+1,w,c
 20185  004628  0203               	mulwf	i2___wmul@multiplicand,c
 20186  00462A  50F3               	movf	prodl,w,c
 20187  00462C  2606               	addwf	i2___wmul@product+1,f,c
 20188  00462E  C005  F001         	movff	i2___wmul@product,?i2___wmul
 20189  004632  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 20190  004636  0012               	return	
 20191  004638                     __end_ofi2___wmul:
 20192                           	opt stack 0
 20193                           pclatu	equ	0xFFB
 20194                           pclath	equ	0xFFA
 20195                           tblptru	equ	0xFF8
 20196                           tblptrh	equ	0xFF7
 20197                           tblptrl	equ	0xFF6
 20198                           tablat	equ	0xFF5
 20199                           prodh	equ	0xFF4
 20200                           prodl	equ	0xFF3
 20201                           intcon	equ	0xFF2
 20202                           intcon2	equ	0xFF1
 20203                           intcon3	equ	0xFF0
 20204                           indf0	equ	0xFEF
 20205                           postinc0	equ	0xFEE
 20206                           fsr0h	equ	0xFEA
 20207                           fsr0l	equ	0xFE9
 20208                           wreg	equ	0xFE8
 20209                           postdec1	equ	0xFE5
 20210                           fsr1h	equ	0xFE2
 20211                           fsr1l	equ	0xFE1
 20212                           indf2	equ	0xFDF
 20213                           postinc2	equ	0xFDE
 20214                           postdec2	equ	0xFDD
 20215                           fsr2h	equ	0xFDA
 20216                           fsr2l	equ	0xFD9
 20217                           status	equ	0xFD8
 20218                           
 20219 ;; *************** function i2___lwmod *****************
 20220 ;; Defined at:
 20221 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 20222 ;; Parameters:    Size  Location     Type
 20223 ;;  dividend        2    0[COMRAM] unsigned int 
 20224 ;;  divisor         2    2[COMRAM] unsigned int 
 20225 ;; Auto vars:     Size  Location     Type
 20226 ;;  __lwmod         1    4[COMRAM] unsigned char 
 20227 ;; Return value:  Size  Location     Type
 20228 ;;                  2    0[COMRAM] unsigned int 
 20229 ;; Registers used:
 20230 ;;		wreg, status,2, status,0
 20231 ;; Tracked objects:
 20232 ;;		On entry : 0/0
 20233 ;;		On exit  : 0/0
 20234 ;;		Unchanged: 0/0
 20235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20236 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20237 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20238 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20239 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20240 ;;Total ram usage:        5 bytes
 20241 ;; Hardware stack levels used:    1
 20242 ;; This function calls:
 20243 ;;		Nothing
 20244 ;; This function is called by:
 20245 ;;		_printSortTimer
 20246 ;;		i2_printf
 20247 ;; This function uses a non-reentrant model
 20248 ;;
 20249                           
 20250                           	psect	text81
 20251  0041E4                     __ptext81:
 20252                           	opt stack 0
 20253  0041E4                     i2___lwmod:
 20254                           	opt stack 20
 20255                           
 20256                           ;incstack = 0
 20257  0041E4  5003               	movf	i2___lwmod@divisor,w,c
 20258  0041E6  1004               	iorwf	i2___lwmod@divisor+1,w,c
 20259  0041E8  B4D8               	btfsc	status,2,c
 20260  0041EA  D018               	goto	i2l1706
 20261  0041EC  0E01               	movlw	1
 20262  0041EE  6E05               	movwf	i2___lwmod@counter,c
 20263  0041F0  D004               	goto	i2l5397
 20264  0041F2                     i2l5395:
 20265  0041F2  90D8               	bcf	status,0,c
 20266  0041F4  3603               	rlcf	i2___lwmod@divisor,f,c
 20267  0041F6  3604               	rlcf	i2___lwmod@divisor+1,f,c
 20268  0041F8  2A05               	incf	i2___lwmod@counter,f,c
 20269  0041FA                     i2l5397:
 20270  0041FA  AE04               	btfss	i2___lwmod@divisor+1,7,c
 20271  0041FC  D7FA               	goto	i2l5395
 20272  0041FE                     i2l5399:
 20273  0041FE  5003               	movf	i2___lwmod@divisor,w,c
 20274  004200  5C01               	subwf	i2___lwmod@dividend,w,c
 20275  004202  5004               	movf	i2___lwmod@divisor+1,w,c
 20276  004204  5802               	subwfb	i2___lwmod@dividend+1,w,c
 20277  004206  A0D8               	btfss	status,0,c
 20278  004208  D004               	goto	i2l5403
 20279  00420A  5003               	movf	i2___lwmod@divisor,w,c
 20280  00420C  5E01               	subwf	i2___lwmod@dividend,f,c
 20281  00420E  5004               	movf	i2___lwmod@divisor+1,w,c
 20282  004210  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 20283  004212                     i2l5403:
 20284  004212  90D8               	bcf	status,0,c
 20285  004214  3204               	rrcf	i2___lwmod@divisor+1,f,c
 20286  004216  3203               	rrcf	i2___lwmod@divisor,f,c
 20287  004218  2E05               	decfsz	i2___lwmod@counter,f,c
 20288  00421A  D7F1               	goto	i2l5399
 20289  00421C                     i2l1706:
 20290  00421C  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 20291  004220  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 20292  004224  0012               	return		;funcret
 20293  004226                     __end_ofi2___lwmod:
 20294                           	opt stack 0
 20295                           pclatu	equ	0xFFB
 20296                           pclath	equ	0xFFA
 20297                           tblptru	equ	0xFF8
 20298                           tblptrh	equ	0xFF7
 20299                           tblptrl	equ	0xFF6
 20300                           tablat	equ	0xFF5
 20301                           prodh	equ	0xFF4
 20302                           prodl	equ	0xFF3
 20303                           intcon	equ	0xFF2
 20304                           intcon2	equ	0xFF1
 20305                           intcon3	equ	0xFF0
 20306                           indf0	equ	0xFEF
 20307                           postinc0	equ	0xFEE
 20308                           fsr0h	equ	0xFEA
 20309                           fsr0l	equ	0xFE9
 20310                           wreg	equ	0xFE8
 20311                           postdec1	equ	0xFE5
 20312                           fsr1h	equ	0xFE2
 20313                           fsr1l	equ	0xFE1
 20314                           indf2	equ	0xFDF
 20315                           postinc2	equ	0xFDE
 20316                           postdec2	equ	0xFDD
 20317                           fsr2h	equ	0xFDA
 20318                           fsr2l	equ	0xFD9
 20319                           status	equ	0xFD8
 20320                           
 20321 ;; *************** function i2___lwdiv *****************
 20322 ;; Defined at:
 20323 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 20324 ;; Parameters:    Size  Location     Type
 20325 ;;  dividend        2    5[COMRAM] unsigned int 
 20326 ;;  divisor         2    7[COMRAM] unsigned int 
 20327 ;; Auto vars:     Size  Location     Type
 20328 ;;  __lwdiv         2    9[COMRAM] unsigned int 
 20329 ;;  __lwdiv         1   11[COMRAM] unsigned char 
 20330 ;; Return value:  Size  Location     Type
 20331 ;;                  2    5[COMRAM] unsigned int 
 20332 ;; Registers used:
 20333 ;;		wreg, status,2, status,0
 20334 ;; Tracked objects:
 20335 ;;		On entry : 0/0
 20336 ;;		On exit  : 0/0
 20337 ;;		Unchanged: 0/0
 20338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20339 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20340 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20341 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20342 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20343 ;;Total ram usage:        7 bytes
 20344 ;; Hardware stack levels used:    1
 20345 ;; This function calls:
 20346 ;;		Nothing
 20347 ;; This function is called by:
 20348 ;;		_printSortTimer
 20349 ;;		i2_printf
 20350 ;; This function uses a non-reentrant model
 20351 ;;
 20352                           
 20353                           	psect	text82
 20354  004018                     __ptext82:
 20355                           	opt stack 0
 20356  004018                     i2___lwdiv:
 20357                           	opt stack 20
 20358                           
 20359                           ;incstack = 0
 20360  004018  0E00               	movlw	0
 20361  00401A  6E0B               	movwf	i2___lwdiv@quotient+1,c
 20362  00401C  0E00               	movlw	0
 20363  00401E  6E0A               	movwf	i2___lwdiv@quotient,c
 20364  004020  5008               	movf	i2___lwdiv@divisor,w,c
 20365  004022  1009               	iorwf	i2___lwdiv@divisor+1,w,c
 20366  004024  B4D8               	btfsc	status,2,c
 20367  004026  D01C               	goto	i2l1696
 20368  004028  0E01               	movlw	1
 20369  00402A  6E0C               	movwf	i2___lwdiv@counter,c
 20370  00402C  D004               	goto	i2l5377
 20371  00402E                     i2l5375:
 20372  00402E  90D8               	bcf	status,0,c
 20373  004030  3608               	rlcf	i2___lwdiv@divisor,f,c
 20374  004032  3609               	rlcf	i2___lwdiv@divisor+1,f,c
 20375  004034  2A0C               	incf	i2___lwdiv@counter,f,c
 20376  004036                     i2l5377:
 20377  004036  AE09               	btfss	i2___lwdiv@divisor+1,7,c
 20378  004038  D7FA               	goto	i2l5375
 20379  00403A                     i2l5379:
 20380  00403A  90D8               	bcf	status,0,c
 20381  00403C  360A               	rlcf	i2___lwdiv@quotient,f,c
 20382  00403E  360B               	rlcf	i2___lwdiv@quotient+1,f,c
 20383  004040  5008               	movf	i2___lwdiv@divisor,w,c
 20384  004042  5C06               	subwf	i2___lwdiv@dividend,w,c
 20385  004044  5009               	movf	i2___lwdiv@divisor+1,w,c
 20386  004046  5807               	subwfb	i2___lwdiv@dividend+1,w,c
 20387  004048  A0D8               	btfss	status,0,c
 20388  00404A  D005               	goto	i2l5387
 20389  00404C  5008               	movf	i2___lwdiv@divisor,w,c
 20390  00404E  5E06               	subwf	i2___lwdiv@dividend,f,c
 20391  004050  5009               	movf	i2___lwdiv@divisor+1,w,c
 20392  004052  5A07               	subwfb	i2___lwdiv@dividend+1,f,c
 20393  004054  800A               	bsf	i2___lwdiv@quotient,0,c
 20394  004056                     i2l5387:
 20395  004056  90D8               	bcf	status,0,c
 20396  004058  3209               	rrcf	i2___lwdiv@divisor+1,f,c
 20397  00405A  3208               	rrcf	i2___lwdiv@divisor,f,c
 20398  00405C  2E0C               	decfsz	i2___lwdiv@counter,f,c
 20399  00405E  D7ED               	goto	i2l5379
 20400  004060                     i2l1696:
 20401  004060  C00A  F006         	movff	i2___lwdiv@quotient,?i2___lwdiv
 20402  004064  C00B  F007         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 20403  004068  0012               	return		;funcret
 20404  00406A                     __end_ofi2___lwdiv:
 20405                           	opt stack 0
 20406                           pclatu	equ	0xFFB
 20407                           pclath	equ	0xFFA
 20408                           tblptru	equ	0xFF8
 20409                           tblptrh	equ	0xFF7
 20410                           tblptrl	equ	0xFF6
 20411                           tablat	equ	0xFF5
 20412                           prodh	equ	0xFF4
 20413                           prodl	equ	0xFF3
 20414                           intcon	equ	0xFF2
 20415                           intcon2	equ	0xFF1
 20416                           intcon3	equ	0xFF0
 20417                           indf0	equ	0xFEF
 20418                           postinc0	equ	0xFEE
 20419                           fsr0h	equ	0xFEA
 20420                           fsr0l	equ	0xFE9
 20421                           wreg	equ	0xFE8
 20422                           postdec1	equ	0xFE5
 20423                           fsr1h	equ	0xFE2
 20424                           fsr1l	equ	0xFE1
 20425                           indf2	equ	0xFDF
 20426                           postinc2	equ	0xFDE
 20427                           postdec2	equ	0xFDD
 20428                           fsr2h	equ	0xFDA
 20429                           fsr2l	equ	0xFD9
 20430                           status	equ	0xFD8
 20431                           
 20432 ;; *************** function i2_lcdInst *****************
 20433 ;; Defined at:
 20434 ;;		line 15 in file "lcd.c"
 20435 ;; Parameters:    Size  Location     Type
 20436 ;;  data            1    wreg     unsigned char 
 20437 ;; Auto vars:     Size  Location     Type
 20438 ;;  data            1    2[COMRAM] unsigned char 
 20439 ;; Return value:  Size  Location     Type
 20440 ;;                  1    wreg      void 
 20441 ;; Registers used:
 20442 ;;		wreg, status,2, status,0, cstack
 20443 ;; Tracked objects:
 20444 ;;		On entry : 0/0
 20445 ;;		On exit  : 0/0
 20446 ;;		Unchanged: 0/0
 20447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20448 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20449 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20450 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20451 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20452 ;;Total ram usage:        1 bytes
 20453 ;; Hardware stack levels used:    1
 20454 ;; Hardware stack levels required when called:    1
 20455 ;; This function calls:
 20456 ;;		i2_lcdNibble
 20457 ;; This function is called by:
 20458 ;;		_change_state_to_menu_11
 20459 ;;		_change_state_to_menu_23
 20460 ;;		_change_state_to_logs_11
 20461 ;;		_change_state_to_logs_12
 20462 ;;		_change_state_to_logs_22
 20463 ;;		_change_state_to_logs_23
 20464 ;;		_change_state_to_logs_33
 20465 ;;		_change_state_to_logs_34
 20466 ;;		_printSortTimer
 20467 ;;		i2_change_state_to_menu_start
 20468 ;;		i2_change_state_to_menu_12
 20469 ;;		i2_change_state_to_menu_22
 20470 ;;		i2_printRTC
 20471 ;; This function uses a non-reentrant model
 20472 ;;
 20473                           
 20474                           	psect	text83
 20475  00479E                     __ptext83:
 20476                           	opt stack 0
 20477  00479E                     i2_lcdInst:
 20478                           	opt stack 19
 20479                           
 20480                           ;incstack = 0
 20481                           ;i2lcdInst@data stored from wreg
 20482  00479E  6E03               	movwf	i2lcdInst@data,c
 20483                           
 20484                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 20485  0047A0  948C               	bcf	3980,2,c	;volatile
 20486                           
 20487                           ;lcd.c: 17: lcdNibble(data);
 20488  0047A2  5003               	movf	i2lcdInst@data,w,c
 20489  0047A4  ECE1  F01F         	call	i2_lcdNibble
 20490  0047A8  0012               	return		;funcret
 20491  0047AA                     __end_ofi2_lcdInst:
 20492                           	opt stack 0
 20493                           pclatu	equ	0xFFB
 20494                           pclath	equ	0xFFA
 20495                           tblptru	equ	0xFF8
 20496                           tblptrh	equ	0xFF7
 20497                           tblptrl	equ	0xFF6
 20498                           tablat	equ	0xFF5
 20499                           prodh	equ	0xFF4
 20500                           prodl	equ	0xFF3
 20501                           intcon	equ	0xFF2
 20502                           intcon2	equ	0xFF1
 20503                           intcon3	equ	0xFF0
 20504                           indf0	equ	0xFEF
 20505                           postinc0	equ	0xFEE
 20506                           fsr0h	equ	0xFEA
 20507                           fsr0l	equ	0xFE9
 20508                           wreg	equ	0xFE8
 20509                           postdec1	equ	0xFE5
 20510                           fsr1h	equ	0xFE2
 20511                           fsr1l	equ	0xFE1
 20512                           indf2	equ	0xFDF
 20513                           postinc2	equ	0xFDE
 20514                           postdec2	equ	0xFDD
 20515                           fsr2h	equ	0xFDA
 20516                           fsr2l	equ	0xFD9
 20517                           status	equ	0xFD8
 20518                           
 20519 ;; *************** function i2_lcdNibble *****************
 20520 ;; Defined at:
 20521 ;;		line 25 in file "lcd.c"
 20522 ;; Parameters:    Size  Location     Type
 20523 ;;  data            1    wreg     unsigned char 
 20524 ;; Auto vars:     Size  Location     Type
 20525 ;;  data            1    1[COMRAM] unsigned char 
 20526 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 20527 ;; Return value:  Size  Location     Type
 20528 ;;                  1    wreg      void 
 20529 ;; Registers used:
 20530 ;;		wreg, status,2, status,0
 20531 ;; Tracked objects:
 20532 ;;		On entry : 0/0
 20533 ;;		On exit  : 0/0
 20534 ;;		Unchanged: 0/0
 20535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20536 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20537 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20538 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20539 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20540 ;;Total ram usage:        2 bytes
 20541 ;; Hardware stack levels used:    1
 20542 ;; This function calls:
 20543 ;;		Nothing
 20544 ;; This function is called by:
 20545 ;;		i2_lcdInst
 20546 ;;		i2_putch
 20547 ;; This function uses a non-reentrant model
 20548 ;;
 20549                           
 20550                           	psect	text84
 20551  003FC2                     __ptext84:
 20552                           	opt stack 0
 20553  003FC2                     i2_lcdNibble:
 20554                           	opt stack 19
 20555                           
 20556                           ;incstack = 0
 20557                           ;i2lcdNibble@data stored from wreg
 20558  003FC2  6E02               	movwf	i2lcdNibble@data,c
 20559                           
 20560                           ;lcd.c: 27: char temp = data & 0xF0;
 20561  003FC4  5002               	movf	i2lcdNibble@data,w,c
 20562  003FC6  0BF0               	andlw	240
 20563  003FC8  6E01               	movwf	i2lcdNibble@temp,c
 20564                           
 20565                           ;lcd.c: 28: LATD = LATD & 0x0F;
 20566  003FCA  508C               	movf	3980,w,c	;volatile
 20567  003FCC  0B0F               	andlw	15
 20568  003FCE  6E8C               	movwf	3980,c	;volatile
 20569                           
 20570                           ;lcd.c: 29: LATD = temp | LATD;
 20571  003FD0  5001               	movf	i2lcdNibble@temp,w,c
 20572  003FD2  108C               	iorwf	3980,w,c	;volatile
 20573  003FD4  6E8C               	movwf	3980,c	;volatile
 20574                           
 20575                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 20576  003FD6  868C               	bsf	3980,3,c	;volatile
 20577                           
 20578                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 20579  003FD8  0E42               	movlw	66
 20580  003FDA                     i2u826_47:
 20581  003FDA  2EE8               	decfsz	wreg,f,c
 20582  003FDC  D7FE               	bra	i2u826_47
 20583  003FDE  D000               	nop2	
 20584                           
 20585                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 20586  003FE0  968C               	bcf	3980,3,c	;volatile
 20587                           
 20588                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 20589  003FE2  0E42               	movlw	66
 20590  003FE4                     i2u827_47:
 20591  003FE4  2EE8               	decfsz	wreg,f,c
 20592  003FE6  D7FE               	bra	i2u827_47
 20593  003FE8  D000               	nop2	
 20594                           
 20595                           ;lcd.c: 36: data = data << 4;
 20596  003FEA  3802               	swapf	i2lcdNibble@data,w,c
 20597  003FEC  0BF0               	andlw	240
 20598  003FEE  6E02               	movwf	i2lcdNibble@data,c
 20599                           
 20600                           ;lcd.c: 38: temp = data & 0xF0;
 20601  003FF0  5002               	movf	i2lcdNibble@data,w,c
 20602  003FF2  0BF0               	andlw	240
 20603  003FF4  6E01               	movwf	i2lcdNibble@temp,c
 20604                           
 20605                           ;lcd.c: 39: LATD = LATD & 0x0F;
 20606  003FF6  508C               	movf	3980,w,c	;volatile
 20607  003FF8  0B0F               	andlw	15
 20608  003FFA  6E8C               	movwf	3980,c	;volatile
 20609                           
 20610                           ;lcd.c: 40: LATD = temp | LATD;
 20611  003FFC  5001               	movf	i2lcdNibble@temp,w,c
 20612  003FFE  108C               	iorwf	3980,w,c	;volatile
 20613  004000  6E8C               	movwf	3980,c	;volatile
 20614                           
 20615                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 20616  004002  868C               	bsf	3980,3,c	;volatile
 20617                           
 20618                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 20619  004004  0E42               	movlw	66
 20620  004006                     i2u828_47:
 20621  004006  2EE8               	decfsz	wreg,f,c
 20622  004008  D7FE               	bra	i2u828_47
 20623  00400A  D000               	nop2	
 20624                           
 20625                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 20626  00400C  968C               	bcf	3980,3,c	;volatile
 20627                           
 20628                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 20629  00400E  0E42               	movlw	66
 20630  004010                     i2u829_47:
 20631  004010  2EE8               	decfsz	wreg,f,c
 20632  004012  D7FE               	bra	i2u829_47
 20633  004014  D000               	nop2	
 20634  004016  0012               	return		;funcret
 20635  004018                     __end_ofi2_lcdNibble:
 20636                           	opt stack 0
 20637                           pclatu	equ	0xFFB
 20638                           pclath	equ	0xFFA
 20639                           tblptru	equ	0xFF8
 20640                           tblptrh	equ	0xFF7
 20641                           tblptrl	equ	0xFF6
 20642                           tablat	equ	0xFF5
 20643                           prodh	equ	0xFF4
 20644                           prodl	equ	0xFF3
 20645                           intcon	equ	0xFF2
 20646                           intcon2	equ	0xFF1
 20647                           intcon3	equ	0xFF0
 20648                           indf0	equ	0xFEF
 20649                           postinc0	equ	0xFEE
 20650                           fsr0h	equ	0xFEA
 20651                           fsr0l	equ	0xFE9
 20652                           wreg	equ	0xFE8
 20653                           postdec1	equ	0xFE5
 20654                           fsr1h	equ	0xFE2
 20655                           fsr1l	equ	0xFE1
 20656                           indf2	equ	0xFDF
 20657                           postinc2	equ	0xFDE
 20658                           postdec2	equ	0xFDD
 20659                           fsr2h	equ	0xFDA
 20660                           fsr2l	equ	0xFD9
 20661                           status	equ	0xFD8
 20662                           
 20663 ;; *************** function i2_getRTC *****************
 20664 ;; Defined at:
 20665 ;;		line 44 in file "RTC.c"
 20666 ;; Parameters:    Size  Location     Type
 20667 ;;		None
 20668 ;; Auto vars:     Size  Location     Type
 20669 ;;  getRTC          2    3[COMRAM] int 
 20670 ;; Return value:  Size  Location     Type
 20671 ;;                  1    wreg      void 
 20672 ;; Registers used:
 20673 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20674 ;; Tracked objects:
 20675 ;;		On entry : 0/0
 20676 ;;		On exit  : 0/0
 20677 ;;		Unchanged: 0/0
 20678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20679 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20680 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20681 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20682 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20683 ;;Total ram usage:        2 bytes
 20684 ;; Hardware stack levels used:    1
 20685 ;; Hardware stack levels required when called:    2
 20686 ;; This function calls:
 20687 ;;		i2_I2C_Master_Read
 20688 ;;		i2_I2C_Master_Start
 20689 ;;		i2_I2C_Master_Stop
 20690 ;;		i2_I2C_Master_Write
 20691 ;; This function is called by:
 20692 ;;		_printSortTimer
 20693 ;;		i2_printRTC
 20694 ;; This function uses a non-reentrant model
 20695 ;;
 20696                           
 20697                           	psect	text85
 20698  003D06                     __ptext85:
 20699                           	opt stack 0
 20700  003D06                     i2_getRTC:
 20701                           	opt stack 18
 20702                           
 20703                           ;RTC.c: 48: I2C_Master_Start();
 20704                           
 20705                           ;incstack = 0
 20706  003D06  ECEF  F023         	call	i2_I2C_Master_Start	;wreg free
 20707                           
 20708                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
 20709  003D0A  0E00               	movlw	0
 20710  003D0C  6E03               	movwf	i2I2C_Master_Write@d+1,c
 20711  003D0E  0ED0               	movlw	208
 20712  003D10  6E02               	movwf	i2I2C_Master_Write@d,c
 20713  003D12  ECDA  F023         	call	i2_I2C_Master_Write	;wreg free
 20714                           
 20715                           ;RTC.c: 50: I2C_Master_Write(0x00);
 20716  003D16  0E00               	movlw	0
 20717  003D18  6E03               	movwf	i2I2C_Master_Write@d+1,c
 20718  003D1A  0E00               	movlw	0
 20719  003D1C  6E02               	movwf	i2I2C_Master_Write@d,c
 20720  003D1E  ECDA  F023         	call	i2_I2C_Master_Write	;wreg free
 20721                           
 20722                           ;RTC.c: 51: I2C_Master_Stop();
 20723  003D22  ECEB  F023         	call	i2_I2C_Master_Stop	;wreg free
 20724                           
 20725                           ;RTC.c: 54: I2C_Master_Start();
 20726  003D26  ECEF  F023         	call	i2_I2C_Master_Start	;wreg free
 20727                           
 20728                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
 20729  003D2A  0E00               	movlw	0
 20730  003D2C  6E03               	movwf	i2I2C_Master_Write@d+1,c
 20731  003D2E  0ED1               	movlw	209
 20732  003D30  6E02               	movwf	i2I2C_Master_Write@d,c
 20733  003D32  ECDA  F023         	call	i2_I2C_Master_Write	;wreg free
 20734                           
 20735                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
 20736  003D36  0E00               	movlw	0
 20737  003D38  6E05               	movwf	i2getRTC@i+1,c
 20738  003D3A  0E00               	movlw	0
 20739  003D3C  6E04               	movwf	i2getRTC@i,c
 20740  003D3E                     i2l5627:
 20741  003D3E  BE05               	btfsc	i2getRTC@i+1,7,c
 20742  003D40  D006               	goto	i2l5631
 20743  003D42  5005               	movf	i2getRTC@i+1,w,c
 20744  003D44  E111               	bnz	i2l5637
 20745  003D46  0E06               	movlw	6
 20746  003D48  5C04               	subwf	i2getRTC@i,w,c
 20747  003D4A  B0D8               	btfsc	status,0,c
 20748  003D4C  D00D               	goto	i2l5637
 20749  003D4E                     i2l5631:
 20750                           
 20751                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
 20752  003D4E  0E24               	movlw	low _time
 20753  003D50  2404               	addwf	i2getRTC@i,w,c
 20754  003D52  6ED9               	movwf	fsr2l,c
 20755  003D54  0E01               	movlw	high _time
 20756  003D56  2005               	addwfc	i2getRTC@i+1,w,c
 20757  003D58  6EDA               	movwf	fsr2h,c
 20758  003D5A  0E01               	movlw	1
 20759  003D5C  EC1C  F023         	call	i2_I2C_Master_Read
 20760  003D60  6EDF               	movwf	indf2,c
 20761  003D62  4A04               	infsnz	i2getRTC@i,f,c
 20762  003D64  2A05               	incf	i2getRTC@i+1,f,c
 20763  003D66  D7EB               	goto	i2l5627
 20764  003D68                     i2l5637:
 20765                           
 20766                           ;RTC.c: 58: }
 20767                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
 20768  003D68  0E00               	movlw	0
 20769  003D6A  EC1C  F023         	call	i2_I2C_Master_Read
 20770  003D6E  0101               	movlb	1	; () banked
 20771  003D70  6F2A               	movwf	(_time+6)& (0+255),b
 20772                           
 20773                           ;RTC.c: 60: I2C_Master_Stop();
 20774  003D72  ECEB  F023         	call	i2_I2C_Master_Stop	;wreg free
 20775  003D76  0012               	return		;funcret
 20776  003D78                     __end_ofi2_getRTC:
 20777                           	opt stack 0
 20778                           pclatu	equ	0xFFB
 20779                           pclath	equ	0xFFA
 20780                           tblptru	equ	0xFF8
 20781                           tblptrh	equ	0xFF7
 20782                           tblptrl	equ	0xFF6
 20783                           tablat	equ	0xFF5
 20784                           prodh	equ	0xFF4
 20785                           prodl	equ	0xFF3
 20786                           intcon	equ	0xFF2
 20787                           intcon2	equ	0xFF1
 20788                           intcon3	equ	0xFF0
 20789                           indf0	equ	0xFEF
 20790                           postinc0	equ	0xFEE
 20791                           fsr0h	equ	0xFEA
 20792                           fsr0l	equ	0xFE9
 20793                           wreg	equ	0xFE8
 20794                           postdec1	equ	0xFE5
 20795                           fsr1h	equ	0xFE2
 20796                           fsr1l	equ	0xFE1
 20797                           indf2	equ	0xFDF
 20798                           postinc2	equ	0xFDE
 20799                           postdec2	equ	0xFDD
 20800                           fsr2h	equ	0xFDA
 20801                           fsr2l	equ	0xFD9
 20802                           status	equ	0xFD8
 20803                           
 20804 ;; *************** function i2_I2C_Master_Write *****************
 20805 ;; Defined at:
 20806 ;;		line 49 in file "I2C.c"
 20807 ;; Parameters:    Size  Location     Type
 20808 ;;  d               2    1[COMRAM] unsigned int 
 20809 ;; Auto vars:     Size  Location     Type
 20810 ;;		None
 20811 ;; Return value:  Size  Location     Type
 20812 ;;                  1    wreg      void 
 20813 ;; Registers used:
 20814 ;;		wreg, status,2, status,0, cstack
 20815 ;; Tracked objects:
 20816 ;;		On entry : 0/0
 20817 ;;		On exit  : 0/0
 20818 ;;		Unchanged: 0/0
 20819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20820 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20821 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20822 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20823 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20824 ;;Total ram usage:        2 bytes
 20825 ;; Hardware stack levels used:    1
 20826 ;; Hardware stack levels required when called:    1
 20827 ;; This function calls:
 20828 ;;		i2_I2C_Master_Wait
 20829 ;; This function is called by:
 20830 ;;		i2_getRTC
 20831 ;; This function uses a non-reentrant model
 20832 ;;
 20833                           
 20834                           	psect	text86
 20835  0047B4                     __ptext86:
 20836                           	opt stack 0
 20837  0047B4                     i2_I2C_Master_Write:
 20838                           	opt stack 18
 20839                           
 20840                           ;I2C.c: 51: I2C_Master_Wait();
 20841                           
 20842                           ;incstack = 0
 20843  0047B4  ECB0  F023         	call	i2_I2C_Master_Wait	;wreg free
 20844                           
 20845                           ;I2C.c: 52: SSPBUF = d;
 20846  0047B8  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 20847  0047BC  0012               	return		;funcret
 20848  0047BE                     __end_ofi2_I2C_Master_Write:
 20849                           	opt stack 0
 20850                           pclatu	equ	0xFFB
 20851                           pclath	equ	0xFFA
 20852                           tblptru	equ	0xFF8
 20853                           tblptrh	equ	0xFF7
 20854                           tblptrl	equ	0xFF6
 20855                           tablat	equ	0xFF5
 20856                           prodh	equ	0xFF4
 20857                           prodl	equ	0xFF3
 20858                           intcon	equ	0xFF2
 20859                           intcon2	equ	0xFF1
 20860                           intcon3	equ	0xFF0
 20861                           indf0	equ	0xFEF
 20862                           postinc0	equ	0xFEE
 20863                           fsr0h	equ	0xFEA
 20864                           fsr0l	equ	0xFE9
 20865                           wreg	equ	0xFE8
 20866                           postdec1	equ	0xFE5
 20867                           fsr1h	equ	0xFE2
 20868                           fsr1l	equ	0xFE1
 20869                           indf2	equ	0xFDF
 20870                           postinc2	equ	0xFDE
 20871                           postdec2	equ	0xFDD
 20872                           fsr2h	equ	0xFDA
 20873                           fsr2l	equ	0xFD9
 20874                           status	equ	0xFD8
 20875                           
 20876 ;; *************** function i2_I2C_Master_Stop *****************
 20877 ;; Defined at:
 20878 ;;		line 43 in file "I2C.c"
 20879 ;; Parameters:    Size  Location     Type
 20880 ;;		None
 20881 ;; Auto vars:     Size  Location     Type
 20882 ;;		None
 20883 ;; Return value:  Size  Location     Type
 20884 ;;                  1    wreg      void 
 20885 ;; Registers used:
 20886 ;;		wreg, status,2, status,0, cstack
 20887 ;; Tracked objects:
 20888 ;;		On entry : 0/0
 20889 ;;		On exit  : 0/0
 20890 ;;		Unchanged: 0/0
 20891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20892 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20893 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20894 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20895 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20896 ;;Total ram usage:        0 bytes
 20897 ;; Hardware stack levels used:    1
 20898 ;; Hardware stack levels required when called:    1
 20899 ;; This function calls:
 20900 ;;		i2_I2C_Master_Wait
 20901 ;; This function is called by:
 20902 ;;		i2_getRTC
 20903 ;; This function uses a non-reentrant model
 20904 ;;
 20905                           
 20906                           	psect	text87
 20907  0047D6                     __ptext87:
 20908                           	opt stack 0
 20909  0047D6                     i2_I2C_Master_Stop:
 20910                           	opt stack 18
 20911                           
 20912                           ;I2C.c: 45: I2C_Master_Wait();
 20913                           
 20914                           ;incstack = 0
 20915  0047D6  ECB0  F023         	call	i2_I2C_Master_Wait	;wreg free
 20916                           
 20917                           ;I2C.c: 46: PEN = 1;
 20918  0047DA  84C5               	bsf	4037,2,c	;volatile
 20919  0047DC  0012               	return		;funcret
 20920  0047DE                     __end_ofi2_I2C_Master_Stop:
 20921                           	opt stack 0
 20922                           pclatu	equ	0xFFB
 20923                           pclath	equ	0xFFA
 20924                           tblptru	equ	0xFF8
 20925                           tblptrh	equ	0xFF7
 20926                           tblptrl	equ	0xFF6
 20927                           tablat	equ	0xFF5
 20928                           prodh	equ	0xFF4
 20929                           prodl	equ	0xFF3
 20930                           intcon	equ	0xFF2
 20931                           intcon2	equ	0xFF1
 20932                           intcon3	equ	0xFF0
 20933                           indf0	equ	0xFEF
 20934                           postinc0	equ	0xFEE
 20935                           fsr0h	equ	0xFEA
 20936                           fsr0l	equ	0xFE9
 20937                           wreg	equ	0xFE8
 20938                           postdec1	equ	0xFE5
 20939                           fsr1h	equ	0xFE2
 20940                           fsr1l	equ	0xFE1
 20941                           indf2	equ	0xFDF
 20942                           postinc2	equ	0xFDE
 20943                           postdec2	equ	0xFDD
 20944                           fsr2h	equ	0xFDA
 20945                           fsr2l	equ	0xFD9
 20946                           status	equ	0xFD8
 20947                           
 20948 ;; *************** function i2_I2C_Master_Start *****************
 20949 ;; Defined at:
 20950 ;;		line 31 in file "I2C.c"
 20951 ;; Parameters:    Size  Location     Type
 20952 ;;		None
 20953 ;; Auto vars:     Size  Location     Type
 20954 ;;		None
 20955 ;; Return value:  Size  Location     Type
 20956 ;;                  1    wreg      void 
 20957 ;; Registers used:
 20958 ;;		wreg, status,2, status,0, cstack
 20959 ;; Tracked objects:
 20960 ;;		On entry : 0/0
 20961 ;;		On exit  : 0/0
 20962 ;;		Unchanged: 0/0
 20963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20964 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20965 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20966 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20967 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20968 ;;Total ram usage:        0 bytes
 20969 ;; Hardware stack levels used:    1
 20970 ;; Hardware stack levels required when called:    1
 20971 ;; This function calls:
 20972 ;;		i2_I2C_Master_Wait
 20973 ;; This function is called by:
 20974 ;;		i2_getRTC
 20975 ;; This function uses a non-reentrant model
 20976 ;;
 20977                           
 20978                           	psect	text88
 20979  0047DE                     __ptext88:
 20980                           	opt stack 0
 20981  0047DE                     i2_I2C_Master_Start:
 20982                           	opt stack 18
 20983                           
 20984                           ;I2C.c: 33: I2C_Master_Wait();
 20985                           
 20986                           ;incstack = 0
 20987  0047DE  ECB0  F023         	call	i2_I2C_Master_Wait	;wreg free
 20988                           
 20989                           ;I2C.c: 34: SEN = 1;
 20990  0047E2  80C5               	bsf	4037,0,c	;volatile
 20991  0047E4  0012               	return		;funcret
 20992  0047E6                     __end_ofi2_I2C_Master_Start:
 20993                           	opt stack 0
 20994                           pclatu	equ	0xFFB
 20995                           pclath	equ	0xFFA
 20996                           tblptru	equ	0xFF8
 20997                           tblptrh	equ	0xFF7
 20998                           tblptrl	equ	0xFF6
 20999                           tablat	equ	0xFF5
 21000                           prodh	equ	0xFF4
 21001                           prodl	equ	0xFF3
 21002                           intcon	equ	0xFF2
 21003                           intcon2	equ	0xFF1
 21004                           intcon3	equ	0xFF0
 21005                           indf0	equ	0xFEF
 21006                           postinc0	equ	0xFEE
 21007                           fsr0h	equ	0xFEA
 21008                           fsr0l	equ	0xFE9
 21009                           wreg	equ	0xFE8
 21010                           postdec1	equ	0xFE5
 21011                           fsr1h	equ	0xFE2
 21012                           fsr1l	equ	0xFE1
 21013                           indf2	equ	0xFDF
 21014                           postinc2	equ	0xFDE
 21015                           postdec2	equ	0xFDD
 21016                           fsr2h	equ	0xFDA
 21017                           fsr2l	equ	0xFD9
 21018                           status	equ	0xFD8
 21019                           
 21020 ;; *************** function i2_I2C_Master_Read *****************
 21021 ;; Defined at:
 21022 ;;		line 55 in file "I2C.c"
 21023 ;; Parameters:    Size  Location     Type
 21024 ;;  a               1    wreg     unsigned char 
 21025 ;; Auto vars:     Size  Location     Type
 21026 ;;  a               1    1[COMRAM] unsigned char 
 21027 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 21028 ;; Return value:  Size  Location     Type
 21029 ;;                  1    wreg      unsigned char 
 21030 ;; Registers used:
 21031 ;;		wreg, status,2, status,0, cstack
 21032 ;; Tracked objects:
 21033 ;;		On entry : 0/0
 21034 ;;		On exit  : 0/0
 21035 ;;		Unchanged: 0/0
 21036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21037 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21038 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21039 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21040 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21041 ;;Total ram usage:        2 bytes
 21042 ;; Hardware stack levels used:    1
 21043 ;; Hardware stack levels required when called:    1
 21044 ;; This function calls:
 21045 ;;		i2_I2C_Master_Wait
 21046 ;; This function is called by:
 21047 ;;		i2_getRTC
 21048 ;; This function uses a non-reentrant model
 21049 ;;
 21050                           
 21051                           	psect	text89
 21052  004638                     __ptext89:
 21053                           	opt stack 0
 21054  004638                     i2_I2C_Master_Read:
 21055                           	opt stack 18
 21056                           
 21057                           ;incstack = 0
 21058                           ;i2I2C_Master_Read@a stored from wreg
 21059  004638  6E02               	movwf	i2I2C_Master_Read@a,c
 21060                           
 21061                           ;I2C.c: 57: unsigned char temp;
 21062                           ;I2C.c: 58: I2C_Master_Wait();
 21063  00463A  ECB0  F023         	call	i2_I2C_Master_Wait	;wreg free
 21064                           
 21065                           ;I2C.c: 59: RCEN = 1;
 21066  00463E  86C5               	bsf	4037,3,c	;volatile
 21067                           
 21068                           ;I2C.c: 60: I2C_Master_Wait();
 21069  004640  ECB0  F023         	call	i2_I2C_Master_Wait	;wreg free
 21070                           
 21071                           ;I2C.c: 61: temp = SSPBUF;
 21072  004644  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 21073                           
 21074                           ;I2C.c: 62: I2C_Master_Wait();
 21075  004648  ECB0  F023         	call	i2_I2C_Master_Wait	;wreg free
 21076                           
 21077                           ;I2C.c: 63: ACKDT = (a)?0:1;
 21078  00464C  5002               	movf	i2I2C_Master_Read@a,w,c
 21079  00464E  A4D8               	btfss	status,2,c
 21080  004650  D002               	goto	i2u369_40
 21081  004652  8AC5               	bsf	4037,5,c	;volatile
 21082  004654  D001               	goto	i2l5341
 21083  004656                     i2u369_40:
 21084  004656  9AC5               	bcf	4037,5,c	;volatile
 21085  004658                     i2l5341:
 21086                           
 21087                           ;I2C.c: 64: ACKEN = 1;
 21088  004658  88C5               	bsf	4037,4,c	;volatile
 21089                           
 21090                           ;I2C.c: 65: return temp;
 21091  00465A  5003               	movf	i2I2C_Master_Read@temp,w,c
 21092  00465C  0012               	return	
 21093  00465E                     __end_ofi2_I2C_Master_Read:
 21094                           	opt stack 0
 21095                           pclatu	equ	0xFFB
 21096                           pclath	equ	0xFFA
 21097                           tblptru	equ	0xFF8
 21098                           tblptrh	equ	0xFF7
 21099                           tblptrl	equ	0xFF6
 21100                           tablat	equ	0xFF5
 21101                           prodh	equ	0xFF4
 21102                           prodl	equ	0xFF3
 21103                           intcon	equ	0xFF2
 21104                           intcon2	equ	0xFF1
 21105                           intcon3	equ	0xFF0
 21106                           indf0	equ	0xFEF
 21107                           postinc0	equ	0xFEE
 21108                           fsr0h	equ	0xFEA
 21109                           fsr0l	equ	0xFE9
 21110                           wreg	equ	0xFE8
 21111                           postdec1	equ	0xFE5
 21112                           fsr1h	equ	0xFE2
 21113                           fsr1l	equ	0xFE1
 21114                           indf2	equ	0xFDF
 21115                           postinc2	equ	0xFDE
 21116                           postdec2	equ	0xFDD
 21117                           fsr2h	equ	0xFDA
 21118                           fsr2l	equ	0xFD9
 21119                           status	equ	0xFD8
 21120                           
 21121 ;; *************** function i2_I2C_Master_Wait *****************
 21122 ;; Defined at:
 21123 ;;		line 26 in file "I2C.c"
 21124 ;; Parameters:    Size  Location     Type
 21125 ;;		None
 21126 ;; Auto vars:     Size  Location     Type
 21127 ;;		None
 21128 ;; Return value:  Size  Location     Type
 21129 ;;                  1    wreg      void 
 21130 ;; Registers used:
 21131 ;;		wreg, status,2, status,0
 21132 ;; Tracked objects:
 21133 ;;		On entry : 0/0
 21134 ;;		On exit  : 0/0
 21135 ;;		Unchanged: 0/0
 21136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21137 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21138 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21139 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21140 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21141 ;;Total ram usage:        1 bytes
 21142 ;; Hardware stack levels used:    1
 21143 ;; This function calls:
 21144 ;;		Nothing
 21145 ;; This function is called by:
 21146 ;;		i2_I2C_Master_Start
 21147 ;;		i2_I2C_Master_Stop
 21148 ;;		i2_I2C_Master_Write
 21149 ;;		i2_I2C_Master_Read
 21150 ;; This function uses a non-reentrant model
 21151 ;;
 21152                           
 21153                           	psect	text90
 21154  004760                     __ptext90:
 21155                           	opt stack 0
 21156  004760                     i2_I2C_Master_Wait:
 21157                           	opt stack 18
 21158  004760                     i2l66:
 21159  004760  B4C7               	btfsc	4039,2,c	;volatile
 21160  004762  D7FE               	goto	i2l66
 21161  004764  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 21162  004768  0E1F               	movlw	31
 21163  00476A  1601               	andwf	??i2_I2C_Master_Wait,f,c
 21164  00476C  B4D8               	btfsc	status,2,c
 21165  00476E  0012               	return	
 21166  004770  D7F7               	goto	i2l66
 21167  004772                     __end_ofi2_I2C_Master_Wait:
 21168                           	opt stack 0
 21169                           pclatu	equ	0xFFB
 21170                           pclath	equ	0xFFA
 21171                           tblptru	equ	0xFF8
 21172                           tblptrh	equ	0xFF7
 21173                           tblptrl	equ	0xFF6
 21174                           tablat	equ	0xFF5
 21175                           prodh	equ	0xFF4
 21176                           prodl	equ	0xFF3
 21177                           intcon	equ	0xFF2
 21178                           intcon2	equ	0xFF1
 21179                           intcon3	equ	0xFF0
 21180                           indf0	equ	0xFEF
 21181                           postinc0	equ	0xFEE
 21182                           fsr0h	equ	0xFEA
 21183                           fsr0l	equ	0xFE9
 21184                           wreg	equ	0xFE8
 21185                           postdec1	equ	0xFE5
 21186                           fsr1h	equ	0xFE2
 21187                           fsr1l	equ	0xFE1
 21188                           indf2	equ	0xFDF
 21189                           postinc2	equ	0xFDE
 21190                           postdec2	equ	0xFDD
 21191                           fsr2h	equ	0xFDA
 21192                           fsr2l	equ	0xFD9
 21193                           status	equ	0xFD8
 21194                           pclatu	equ	0xFFB
 21195                           pclath	equ	0xFFA
 21196                           tblptru	equ	0xFF8
 21197                           tblptrh	equ	0xFF7
 21198                           tblptrl	equ	0xFF6
 21199                           tablat	equ	0xFF5
 21200                           prodh	equ	0xFF4
 21201                           prodl	equ	0xFF3
 21202                           intcon	equ	0xFF2
 21203                           intcon2	equ	0xFF1
 21204                           intcon3	equ	0xFF0
 21205                           indf0	equ	0xFEF
 21206                           postinc0	equ	0xFEE
 21207                           fsr0h	equ	0xFEA
 21208                           fsr0l	equ	0xFE9
 21209                           wreg	equ	0xFE8
 21210                           postdec1	equ	0xFE5
 21211                           fsr1h	equ	0xFE2
 21212                           fsr1l	equ	0xFE1
 21213                           indf2	equ	0xFDF
 21214                           postinc2	equ	0xFDE
 21215                           postdec2	equ	0xFDD
 21216                           fsr2h	equ	0xFDA
 21217                           fsr2l	equ	0xFD9
 21218                           status	equ	0xFD8
 21219                           
 21220                           	psect	rparam
 21221  0000                     pclatu	equ	0xFFB
 21222                           pclath	equ	0xFFA
 21223                           tblptru	equ	0xFF8
 21224                           tblptrh	equ	0xFF7
 21225                           tblptrl	equ	0xFF6
 21226                           tablat	equ	0xFF5
 21227                           prodh	equ	0xFF4
 21228                           prodl	equ	0xFF3
 21229                           intcon	equ	0xFF2
 21230                           intcon2	equ	0xFF1
 21231                           intcon3	equ	0xFF0
 21232                           indf0	equ	0xFEF
 21233                           postinc0	equ	0xFEE
 21234                           fsr0h	equ	0xFEA
 21235                           fsr0l	equ	0xFE9
 21236                           wreg	equ	0xFE8
 21237                           postdec1	equ	0xFE5
 21238                           fsr1h	equ	0xFE2
 21239                           fsr1l	equ	0xFE1
 21240                           indf2	equ	0xFDF
 21241                           postinc2	equ	0xFDE
 21242                           postdec2	equ	0xFDD
 21243                           fsr2h	equ	0xFDA
 21244                           fsr2l	equ	0xFD9
 21245                           status	equ	0xFD8
 21246                           
 21247                           	psect	temp
 21248  00007E                     btemp:
 21249                           	opt stack 0
 21250  00007E                     	ds	1
 21251  0000                     int$flags	set	btemp
 21252                           pclatu	equ	0xFFB
 21253                           pclath	equ	0xFFA
 21254                           tblptru	equ	0xFF8
 21255                           tblptrh	equ	0xFF7
 21256                           tblptrl	equ	0xFF6
 21257                           tablat	equ	0xFF5
 21258                           prodh	equ	0xFF4
 21259                           prodl	equ	0xFF3
 21260                           intcon	equ	0xFF2
 21261                           intcon2	equ	0xFF1
 21262                           intcon3	equ	0xFF0
 21263                           indf0	equ	0xFEF
 21264                           postinc0	equ	0xFEE
 21265                           fsr0h	equ	0xFEA
 21266                           fsr0l	equ	0xFE9
 21267                           wreg	equ	0xFE8
 21268                           postdec1	equ	0xFE5
 21269                           fsr1h	equ	0xFE2
 21270                           fsr1l	equ	0xFE1
 21271                           indf2	equ	0xFDF
 21272                           postinc2	equ	0xFDE
 21273                           postdec2	equ	0xFDD
 21274                           fsr2h	equ	0xFDA
 21275                           fsr2l	equ	0xFD9
 21276                           status	equ	0xFD8


Data Sizes:
    Strings     1231
    Constant    27
    Data        8
    BSS         120
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     90     125
    BANK0           128     90     128
    BANK1           256      0      55
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_62(CODE[4]), STR_61(CODE[4]), STR_60(CODE[4]), STR_59(CODE[4]), 
		 -> STR_58(CODE[4]), STR_57(CODE[4]), STR_56(CODE[4]), STR_55(CODE[4]), 
		 -> STR_54(CODE[4]), STR_53(CODE[4]), STR_52(CODE[4]), STR_51(CODE[4]), 
		 -> STR_20(CODE[4]), STR_19(CODE[4]), STR_18(CODE[4]), STR_17(CODE[4]), 
		 -> STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[4]), STR_13(CODE[4]), 
		 -> STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[4]), 
		 -> STR_8(CODE[4]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_117(CODE[7]), count_total(BANK0[2]), printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_116(CODE[17]), STR_115(CODE[17]), STR_114(CODE[10]), STR_113(CODE[13]), 
		 -> STR_112(CODE[18]), STR_111(CODE[18]), STR_110(CODE[17]), STR_109(CODE[15]), 
		 -> STR_108(CODE[15]), STR_107(CODE[15]), STR_106(CODE[17]), STR_105(CODE[17]), 
		 -> STR_104(CODE[17]), STR_103(CODE[16]), STR_102(CODE[17]), STR_101(CODE[17]), 
		 -> STR_100(CODE[17]), STR_99(CODE[17]), STR_98(CODE[17]), STR_97(CODE[17]), 
		 -> STR_96(CODE[15]), STR_95(CODE[11]), STR_94(CODE[17]), STR_93(CODE[11]), 
		 -> STR_92(CODE[17]), STR_91(CODE[14]), STR_90(CODE[15]), STR_89(CODE[14]), 
		 -> STR_88(CODE[10]), STR_87(CODE[9]), STR_86(CODE[9]), STR_85(CODE[10]), 
		 -> STR_84(CODE[10]), STR_83(CODE[16]), STR_82(CODE[15]), STR_81(CODE[3]), 
		 -> STR_80(CODE[15]), STR_79(CODE[13]), STR_78(CODE[14]), STR_77(CODE[8]), 
		 -> STR_76(CODE[14]), STR_75(CODE[15]), STR_74(CODE[12]), STR_73(CODE[14]), 
		 -> STR_72(CODE[17]), STR_71(CODE[14]), STR_70(CODE[15]), STR_69(CODE[17]), 
		 -> STR_68(CODE[17]), STR_67(CODE[7]), STR_66(CODE[21]), STR_65(CODE[13]), 
		 -> STR_64(CODE[11]), STR_63(CODE[24]), STR_50(CODE[17]), STR_49(CODE[17]), 
		 -> STR_48(CODE[17]), STR_47(CODE[17]), STR_46(CODE[17]), STR_45(CODE[17]), 
		 -> STR_44(CODE[17]), STR_43(CODE[17]), STR_42(CODE[17]), STR_41(CODE[17]), 
		 -> STR_40(CODE[17]), STR_39(CODE[17]), STR_38(CODE[17]), STR_37(CODE[17]), 
		 -> STR_36(CODE[17]), STR_35(CODE[17]), STR_34(CODE[17]), STR_33(CODE[17]), 
		 -> STR_32(CODE[17]), STR_31(CODE[17]), STR_30(CODE[17]), STR_29(CODE[3]), 
		 -> STR_28(CODE[17]), STR_27(CODE[19]), STR_26(CODE[17]), STR_25(CODE[19]), 
		 -> STR_24(CODE[17]), STR_23(CODE[14]), STR_22(CODE[10]), STR_21(CODE[24]), 
		 -> STR_7(CODE[7]), STR_6(CODE[17]), STR_5(CODE[18]), STR_4(CODE[16]), 
		 -> STR_3(CODE[18]), STR_2(CODE[14]), STR_1(CODE[18]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _handler in COMRAM

    _handler->_printSortTimer
    i2_change_state_to_menu_start->i2_printRTC
    i2_printRTC->i2_printf
    i2_change_state_to_menu_22->i2_printf
    i2_change_state_to_menu_12->i2_printf
    _change_state_to_menu_23->i2_printf
    _change_state_to_menu_11->i2_printf
    _change_state_to_logs_34->i2_printf
    _change_state_to_logs_33->i2_printf
    _change_state_to_logs_23->i2_printf
    _change_state_to_logs_22->i2_printf
    _change_state_to_logs_12->i2_printf
    _change_state_to_logs_11->i2_printf
    _dispLogs->_retrieveLog
    _retrieveLog->i2___wmul
    _printSortTimer->i2_printf
    i2_printf->i2___lwdiv
    i2_putch->i2_lcdNibble
    i2___lwdiv->i2___lwmod
    i2_lcdInst->i2_lcdNibble
    i2_getRTC->i2_I2C_Master_Read
    i2_getRTC->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_UI
    _sort->_Loading
    _Loading->_EEPROM_write
    _initSortTimer->_getRTC
    _getIR->_readIR
    _readIR->_readADC
    _ID->_readMAG
    _Distribution->_updateServoPosition
    _logRun->_EEPROM_write
    _EEPROM_write->_printf
    _loadRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _change_state_to_menu_start->_printRTC
    _initLCD->_lcdInst
    _UI->_printRTC
    _printRTC->_printf
    _getRTC->_I2C_Master_Read
    _getRTC->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _change_state_to_menu_22->_printf
    _change_state_to_menu_12->_printf
    ___awdiv->___awmod
    _Test->_actuatorTest
    _sensorTest->_printf
    _readMAG->_readADC
    _algorithmTest->_printf
    _actuatorTest->_printf
    _ToggleTestA5->_printf
    _SolenoidTestA5->_printf
    _PortTestA5->_printf
    _BothServos->_printf
    _printf->___awdiv
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble
    _initServos->_updateServoPosition

Critical Paths under _handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  178764
                               _Test
                                 _UI
                            _initLCD
                           _initTime
                             _initUI
                             _logRun
                      _machineConfig
                               _sort
                        _stopSignals
 ---------------------------------------------------------------------------------
 (1) _stopSignals                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _sort                                                 0     0      0   20380
                       _Distribution
                                 _ID
                            _Loading
 ---------------------------------------------------------------------------------
 (2) _Loading                                              7     7      0   15770
                                             49 BANK0      7     7      0
                        _EEPROM_read
                       _EEPROM_write
                           _delay_ms
                              _getIR
                     _initGlobalVars
                         _initServos
                      _initSortTimer
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _initSortTimer                                        5     5      0     631
                                              5 BANK0      5     5      0
                             _getRTC
 ---------------------------------------------------------------------------------
 (3) _initGlobalVars                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _getIR                                                2     2      0      45
                                              6 BANK0      2     2      0
                             _readIR
 ---------------------------------------------------------------------------------
 (4) _readIR                                               4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             2     2      0      23
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _ID                                                  10    10      0     253
                                              6 BANK0     10    10      0
                            _readMAG
 ---------------------------------------------------------------------------------
 (2) _Distribution                                         2     2      0    4357
                                              8 BANK0      2     2      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (1) _machineConfig                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _logRun                                              10    10      0   10786
                                             49 BANK0     10    10      0
                        _EEPROM_read
                       _EEPROM_write
 ---------------------------------------------------------------------------------
 (3) _EEPROM_write                                         6     3      3   10039
                                             43 BANK0      6     3      3
                        _EEPROM_read
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _EEPROM_read                                          2     0      2     426
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _initUI                                               0     0      0   21904
         _change_state_to_menu_start
                            _loadRTC
 ---------------------------------------------------------------------------------
 (2) _loadRTC                                              3     3      0     850
                                             21 BANK0      3     3      0
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Init                                      8     4      4     376
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     290
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_start                           0     0      0   21054
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initTime                                             7     1      6     538
                                              0 BANK0      7     1      6
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _UI                                                  24    24      0   43688
                                             68 BANK0     22    22      0
                            ___awdiv
                            ___awmod
            _change_state_to_menu_12
            _change_state_to_menu_22
                            _lcdInst
                           _printRTC
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _printRTC                                            25    25      0   12711
                                             43 BANK0     25    25      0
                             _getRTC
                            _lcdInst
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    3275
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _getRTC                                               2     2      0     519
                                              3 BANK0      2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     2     0      2     406
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_22                              0     0      0    8343
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_12                              0     0      0    8343
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    1064
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     556
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _Test                                                 2     2      0   81333
                                             70 BANK0      2     2      0
                         _BothServos
                         _EEPROMTest
                         _PortTestA5
                          _PortTests
                     _SolenoidTestA5
                       _ToggleTestA5
                       _actuatorTest
                      _algorithmTest
                            _lcdInst
                             _printf
                         _sensorTest
 ---------------------------------------------------------------------------------
 (2) _sensorTest                                           4     4      0    8455
                                             43 BANK0      4     4      0
                            _lcdInst
                             _printf
                            _readADC
                            _readMAG
 ---------------------------------------------------------------------------------
 (3) _readMAG                                              4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (5) _readADC                                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _algorithmTest                                        2     2      0    8343
                                             43 BANK0      2     2      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _actuatorTest                                        27    27      0   13943
                                             43 BANK0     27    27      0
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (2) _ToggleTestA5                                         3     3      0    8368
                                             43 BANK0      3     3      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _SolenoidTestA5                                       6     6      0    8481
                                             43 BANK0      6     6      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PortTests                                            2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _PortTestA5                                           1     1      0    8343
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _EEPROMTest                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _BothServos                                           2     2      0   17057
                                             43 BANK0      2     2      0
                         _initServos
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (4) _printf                                              33    21     12    8208
                                             14 BANK0     29    17     12
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     669
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     515
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     442
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _initServos                                           1     1      0    4357
                                              8 BANK0      1     1      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (4) _updateServoPosition                                  8     4      4    4357
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _handler                                             16    16      0   76936
                                             74 COMRAM    16    16      0
                     _printSortTimer
                         _updateMenu
 ---------------------------------------------------------------------------------
 (8) _updateMenu                                           2     2      0   71999
                                             66 COMRAM     2     2      0
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
                           _dispLogs
                       _inputHandler
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_start                         0     0      0    7744
                          i2_lcdInst
                         i2_printRTC
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printRTC                                         25    25      0    4605
                                             41 COMRAM    25    25      0
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
                           i2_strcpy
 ---------------------------------------------------------------------------------
 (11) i2_strcpy                                            6     2      4     699
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _inputHandler                                         4     2      2   31390
                                             41 COMRAM     4     2      2
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_22                            0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_12                            0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_23                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_11                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_34                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_33                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_23                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_22                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_12                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_11                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) _dispLogs                                             2     0      2    1475
                                             17 COMRAM     2     0      2
                        _retrieveLog
 ---------------------------------------------------------------------------------
 (10) _retrieveLog                                        11     9      2    1047
                                              6 COMRAM    11     9      2
                      i2_EEPROM_read
                           i2___wmul
 ---------------------------------------------------------------------------------
 (11) i2_EEPROM_read                                       2     0      2     174
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _printSortTimer                                      33    33      0    4937
                                             41 COMRAM    33    33      0
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printf                                           33    21     12    3004
                                             12 COMRAM    29    17     12
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (11) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (11) i2___wmul                                            6     2      4     469
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (11) i2___lwmod                                           5     1      4     367
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (11) i2___lwdiv                                           7     3      4     318
                                              5 COMRAM     7     3      4
                          i2___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (11) i2_lcdInst                                           1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (12) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (11) i2_getRTC                                            2     2      0     213
                                              3 COMRAM     2     2      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Write                                  2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Stop                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Start                                  0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Read                                   2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (13) i2_I2C_Master_Wait                                   1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Test
     _BothServos
       _initServos
         _updateServoPosition
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _EEPROMTest
     _PortTestA5
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _PortTests
     _SolenoidTestA5
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _ToggleTestA5
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _actuatorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _algorithmTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _sensorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
       _readMAG
         _readADC
   _UI
     ___awdiv
       ___awmod (ARG)
     ___awmod
     _change_state_to_menu_12
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _change_state_to_menu_22
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printRTC
       _getRTC
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _strcpy
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _strcpy
   _initLCD
     _lcdInst
       _lcdNibble
   _initTime
   _initUI
     _change_state_to_menu_start
       _lcdInst
         _lcdNibble
       _printRTC
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
         _strcpy
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _loadRTC
       _I2C_Master_Init
         ___lldiv
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _logRun
     _EEPROM_read
     _EEPROM_write
       _EEPROM_read
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
   _machineConfig
   _sort
     _Distribution
       _updateServoPosition
     _ID
       _readMAG
         _readADC
     _Loading
       _EEPROM_read
       _EEPROM_write
         _EEPROM_read
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
       _delay_ms
       _getIR
         _readIR
           _readADC
       _initGlobalVars
       _initServos
         _updateServoPosition
       _initSortTimer
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _lcdInst
         _lcdNibble
   _stopSignals

 _handler (ROOT)
   _printSortTimer
     i2___lwdiv
       i2___lwmod (ARG)
     i2___lwmod
     i2___wmul
     i2_getRTC
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _updateMenu
     _change_state_to_logs_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_33
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_34
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _dispLogs
       _retrieveLog
         i2_EEPROM_read
         i2___wmul
     _inputHandler
       _change_state_to_logs_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_33
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_34
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
     i2_change_state_to_menu_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_start
       i2_lcdInst
         i2_lcdNibble
       i2_printRTC
         i2_getRTC
           i2_I2C_Master_Read
             i2_I2C_Master_Wait
           i2_I2C_Master_Start
             i2_I2C_Master_Wait
           i2_I2C_Master_Stop
             i2_I2C_Master_Wait
           i2_I2C_Master_Write
             i2_I2C_Master_Wait
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
         i2_strcpy
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      37       7       21.5%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     5A      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     5A      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     134      34        0.0%
DATA                 0      0     134       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Wed Mar 15 14:41:59 2017

                                    _i 00E4                     i2_I2C_Master_Start 47DE  
                   i2_I2C_Master_Write 47B4                                     l66 474C  
                                   _ID 2C0A                            __CFG_CPD$ON 000000  
                                   _UI 08CA                           ___awdiv@sign 008B  
                                   _up 0077                    ___wmul@multiplicand 0082  
                   i2___lwdiv@dividend 0006                            __CFG_BORV$3 000000  
                   EEPROM_read@address 0080                           __CFG_CP0$OFF 000000  
                         __CFG_CP1$OFF 000000                           __CFG_CP2$OFF 000000  
                         __CFG_CP3$OFF 000000                                    ID@i 0088  
                                  ?_ID 0001                                    ?_UI 0001  
                                  UI@i 00C8                                    l177 09A0  
                                  l480 393E                                    l721 2E34  
                                  l741 2D1A                                    l930 4718  
                                  l595 1FBA                                    l917 3470  
                                  l783 3CCC                                    l939 3118  
                         __CFG_CPB$OFF 000000                                    _PEN 007E2A  
                                  _SEN 007E28                    ?i2_I2C_Master_Start 0001  
                       ?_machineConfig 0001                    ?i2_I2C_Master_Write 0002  
                                  _log 00E6                                    _sel 00FD  
                                  _var 00FA                           ___awmod@sign 0085  
                                  wreg 000FE8                    i2printRTC@RTC_month 003B  
                  _log_count_can_w_lab 00EC        __end_of_change_state_to_menu_11 43F4  
      __end_of_change_state_to_menu_12 4296        __end_of_change_state_to_menu_22 425E  
      __end_of_change_state_to_menu_23 43C4           _f_can_coming_to_distribution 0071  
                       ??_Distribution 0088        __end_of_change_state_to_logs_11 44E4  
      __end_of_change_state_to_logs_12 44B4        __end_of_change_state_to_logs_22 4484  
      __end_of_change_state_to_logs_23 4540        __end_of_change_state_to_logs_33 4454  
      __end_of_change_state_to_logs_34 4424                                   ??_ID 0086  
                                 ??_UI 00C4                           __CFG_LVP$OFF 000000  
                         __CFG_WDT$OFF 000000                                   l1030 32C6  
                                 l1122 05E8                                   l1050 3590  
                                 l1027 32A6                                   l1212 3B08  
                                 l1204 3AD4                                   l1053 3594  
                                 l1134 0782                                   l1062 1978  
                                 l1160 3BBC                                   l1152 3B94  
                                 l1161 3BC0                                   l1162 3BC4  
                                 l1139 0858                                   l1059 1974  
                                 l1164 3C02                                   l1156 3BB0  
                                 l1092 0126                                   l1173 39A8  
                                 l1085 007C                                   l1182 39DC  
                                 l1158 3BB4                                   l1183 39F6  
                                 l1159 3BB8                                   l1095 018C  
                                 l1096 01DA                                   l1088 0080  
                                 l1249 13B6                                   l1097 0240  
                                 l1098 028E                                   l1179 39B8  
                                 l1195 33D0                                   l1189 3384  
                                 l1706 3EA2                                   l1643 3770  
                                 l5301 3C78                                   l5311 3E6A  
                                 l5231 4580                                   l1696 3C86  
                                 l5313 3E70                                   l5233 4592  
                                 l6033 34D8                                   l6041 34FA  
                                 l5317 3E94                                   l5309 3E5E  
                                 l7021 07F4                                   l7013 07D2  
                                 l6045 3510                                   l6037 34E2  
                                 l5423 1192                                   l7031 081C  
                                 l7023 07FA                                   l5255 450A  
                                 l6055 45C8                                   l5273 45B8  
                                 l5513 146C                                   l5425 11A4  
                                 l7017 07DC                                   l6049 351A  
                                 l5291 3C42                                   l5531 14E4  
                                 l5507 144A                                   l5451 1290  
                                 l5443 125E                                   l5435 11E2  
                                 l5419 117E                                   l7027 0804  
                                 l5603 36F4                                   l6059 45DE  
                                 l5293 3C48                                   l5533 14F0  
                                 l5541 151E                                   l5525 14C8  
                                 l5517 14A4                                   l5461 1308  
                                 l5453 129C                                   l5429 11AE  
                                 l7141 3392                                   l7125 3AFC  
                                 l7053 0882                                   l7037 0842  
                                 l8005 3248                                   l5605 3704  
                                 l6165 3A3C                                   l6085 40FA  
                                 l5543 1524                                   l5519 14AE  
                                 l5471 135E                                   l5463 1314  
                                 l5455 12A2                                   l7151 33B8  
                                 l7063 08AA                                   l7047 0872  
                                 l8031 32E4                                   l8023 32CC  
                                 l7311 36BC                                   l7303 369A  
                                 l5615 375E                                   l5607 370A  
                                 l6175 3A7E                                   l6407 2E76  
                                 l8103 3910                                   l5289 3C36  
                                 l5537 150A                                   l5473 1376  
                                 l5465 131A                                   l7161 33F8  
                                 l7145 33A8                                   l7129 3350  
                                 l7057 089A                                   l7049 0878  
                                 l6601 1AD0                                   l8033 32EA  
                                 l8025 32D2                                   l5561 3B4E  
                                 l5553 42A0                                   l6169 3A52  
                                 l8105 3916                                   l8121 3940  
                                 l5547 157C                                   l5467 1332  
                                 l7171 342C                                   l7147 33AE  
                                 l7067 08C2                                   l7059 08A0  
                                 l8035 32F0                                   l8027 32D8  
                                 l8043 3302                                   l7307 36A8  
                                 l7331 386C                                   l7323 3848  
                                 l5571 3B84                                   l5555 42AC  
                                 l7411 0A04                                   l7403 09DA  
                                 l8115 3934                                   l8107 391C  
                                 l5493 1408                                   l5477 137C  
                                 l5549 1588                                   l8037 32F6  
                                 l8029 32DE                                   l7333 3878  
                                 l5565 3B64                                   l7501 0C04  
                                 l6453 2CE2                                   l6381 2DF2  
                                 l8117 393A                                   l5591 3CE2  
                                 l5495 140E                                   l7183 3BC8  
                                 l7175 3436                                   l6631 1BC4  
                                 l6607 1B12                                   l8039 32FC  
                                 l7335 387E                                   l7343 38B0  
                                 l7327 3858                                   l5831 203C  
                                 l5823 1FC4                                   l7511 0C9A  
                                 l7503 0C22                                   l7431 0A6C  
                                 l7407 09F2                                   l6463 2D04  
                                 l6439 2CA6                                   l6391 2E3C  
                                 _ADIE 007CEE                                   l5489 13EE  
                                 l7089 39C6                                   l5841 20D2  
                                 l5833 205A                                   l5825 1FE2  
                                 l5817 1F38                                   l7513 0CB8  
                                 l7505 0C40                                   l7521 0D12  
                                 l7425 0A5C                                   l7441 0A92  
                                 l6473 2D34                                   l6449 2CD6  
                                 l6457 2CEE                                   l6803 03B0  
                                 l6643 1C0C                                   l6627 1B8E  
                                 l6619 1B5E                                   l6571 19C8  
                                 l7291 3658                                   l7347 38C4  
                                 l7339 38A2                                   l5843 20F0  
                                 l5835 2078                                   l5827 2000  
                                 l5851 218A                                   l7531 0DC2  
                                 l7515 0CD6                                   l7507 0C5E  
                                 l7523 0D76                                   l7435 0A84  
                                 l7427 0A62                                   l6491 2F0A  
                                 l5589 3CB8                                   l6821 0412  
                                 l6813 03D8                                   l6805 03B6  
                                 l7293 3664                                   l7285 363A  
                                 l5845 210E                                   l5837 2096  
                                 l5829 201E                                   l7613 0F9A  
                                 l7541 0DEC                                   l7517 0CF4  
                                 l7509 0C7C                                   l6485 2EBC  
                                 l6903 05A8                                   l6831 043A  
                                 l6639 1BD6                                   l7295 366A  
                                 l7279 3624                                   l5839 20B4  
                                 l7711 1156                                   l7703 1134  
                                 l7631 0FE6                                   l7623 0FC4  
                                 l7535 0DDA                                   l7527 0DB8  
                                 l7463 0B06                                   l7455 0AE4  
                                 l6487 2ED6                                   l6495 2F24  
                                 l6913 05D0                                   l6825 041C  
                                 l6809 03C0                                   l5849 212C  
                                 l7617 0FB2                                   l7609 0F90  
                                 l7545 0DF6                                   l7473 0B22  
                                 l7393 09B8                                   l6489 2EF0  
                                 l6497 2F52                                   l6931 063A  
                                 l6907 05C0                                   l6851 04A0  
                                 l6835 0444                                   l6683 00EA  
                                 l7707 113E                                   l7627 0FCE  
                                 l7459 0AEE                                   l7715 1162  
                                 l7395 09BE                                   l6941 0662  
                                 l6909 05C6                                   l6861 04C8  
                                 l6829 0434                                   l6773 0314  
                                 l6693 0112                                   l6685 00F0  
                                 l6589 1A80                                   l7653 1056  
                                 l7573 0EDE                                   l7549 0E0E  
                                 l7493 0B8C                                   l7477 0B3A  
                                 l7469 0B18                                   l6935 0652  
                                 l6927 0630                                   l6855 04B8  
                                 l6847 0496                                   l6839 045C  
                                 l6783 033C                                   l7671 10A2  
                                 l7663 1080                                   l7591 0F2A  
                                 l7583 0F08                                   l7495 0BAA  
                                 l7399 09D0                                   l5991 37A6  
                                 l6961 06D6                                   l6953 06B4  
                                 l6945 067A                                   l6937 0658  
                                 l6881 053C                                   l6873 051A  
                                 l6865 04E0                                   l6857 04BE  
                                 l6777 032C                                   l6769 030A  
                                 l6689 00FA                                   l7657 106E  
                                 l7649 104C                                   l7577 0EF6  
                                 l7569 0ED4                                   l7497 0BC8  
                                 l6971 06FE                                   l6963 06DC  
                                 l6891 0564                                   l6883 0542  
                                 l6795 038E                                   l6787 0354  
                                 l6779 0332                                   l7667 108A  
                                 l7587 0F12                                   l7499 0BE6  
                                 l5987 3790                                   l6957 06BE  
                                 l6877 0524                                   l7693 110A  
                                 l5997 381C                                   l6983 0742  
                                 l6967 06E6                                   l6887 054C  
                                 l6799 0398                                   l6993 076A  
                                 l7697 1122                                   l7689 1100  
                                 l6987 075A                                   l6979 0738  
                                 l6899 059E                                   l6989 0760  
                                 l7967 303E                                   l7993 30D2  
                                 l7969 3052                                   STR_1 FBB9  
                                 STR_2 FF1B                                   STR_3 FBA7  
                                 STR_4 FE3E                                   STR_5 FBA7  
                                 STR_6 FDFC                                   STR_7 FFC4  
                                 STR_8 FFDB                                   STR_9 FFCB  
                                 _LATA 000F89                                   _LATB 000F8A  
                                 _LATC 000F8B                                   _LATD 000F8C  
                                 _LATE 000F8D                                   u5120 1BFA  
                                 u5210 01DA                                   u5050 1A0A  
                                 u5060 1A0C                                   u4500 1FBA  
                                 u5230 028E                                   u5128 1BFE  
                                 u3800 414A                                   u5090 1BB2  
                                 _PEIE 007F96                                   u4460 4194  
                                 u4461 4190                                   u5190 0126  
                                 u4470 4196                                   u3590 4508  
                                 u3850 12DC                                   u5098 1BB6  
                                 u7107 45D4                                   u4900 2C3A  
                                 u4820 2DFE                                   _RCEN 007E2B  
                                 u4485 3EDC                                   u7117 2C20  
                                 u3790 4148                                   u8007 335E  
                                 u7207 3522                                   u7127 2C7C  
                                 u4840 2E34                                   u3857 12D2  
                                 u8017 33C0                                   u7217 41A6  
                                 u7137 2D1E                                   u3890 1354  
                                 u4930 2C96                                   u8107 1CBA  
                                 u8027 33E0                                   u7307 0B54  
                                 u7227 41DA                                   u7147 2D28  
                                 u4908 2C3E                                   u8117 1CEE  
                                 u8037 3406                                   u7317 0DCA  
                                 u7237 08E2                                   u7157 2D4A  
                                 u7077 2D82                                   u4838 2E02  
                                 u8207 3E02                                   u8127 1D3A  
                                 u8047 343E                                   u7407 105E  
                                 u7327 0DFE                                   u7247 09E2  
                                 u7167 2F60                                   u7087 2EA0  
                                 u8217 3E0C                                   u3897 134A  
                                 u8137 1D6E                                   u8057 3972  
                                 u7417 1092                                   u7337 0E28  
                                 u7257 0A1E                                   u7177 2F92  
                                 u7097 40D6                                   i2l66 4760  
                                 u4938 2C9A                                   u8227 3E38  
                                 u8147 1DBA                                   u8067 39E0  
                                 u7507 19B8                                   u7427 10BC  
                                 u7347 0EE6                                   u7267 0A74  
                                 u7187 348E                                   u6900 3118  
                                 u8237 3E42                                   u8157 1DEE  
                                 u8077 39EA                                   u7517 1A20  
                                 u7437 1112                                   u7357 0F1A  
                                 u7277 0AA0                                   u7197 34EA  
                                 u8247 3FAA                                   u8167 1E3A  
                                 u8087 1C22                                   u7607 3540  
                                 u7527 1A74                                   u7447 1146  
                                 u7367 0F44                                   u7287 0AF6  
                                 u8177 1E6E                                   u8097 1C6E  
                                 u7617 3584                                   u7537 1A94  
                                 u7457 3256                                   u7377 0FA2  
                                 u7297 0B2A                                   u8187 1EBA  
                                 u7707 01EA                                   u7627 35A6  
                                 u7547 1AC2                                   u7467 329A  
                                 u7387 0FD6                                   u8197 1EEE  
                                 u7717 0250                                   u7637 002C  
                                 u7557 1B06                                   u7477 1924  
                                 u7397 1000                                   u7807 04A8  
                                 u7727 026E                                   u7647 0070  
                                 u7567 1B24                                   u7487 1968  
                                 u7817 04D0                                   u7737 029E  
                                 u7657 0092                                   u7577 1B52  
                                 u7497 198A                                   u7907 074A  
                                 u7827 052C                                   u7747 031C  
                                 u7667 0102                                   u7587 1B6C  
                                 u7917 0772                                   u7837 0554  
                                 u7757 0344                                   u7677 0136  
                                 u7597 4588                                   u7927 0794  
                                 u7847 05B0                                   u7767 03A0  
                                 u7687 019C                                   u7937 07E4  
                                 u7857 05D8                                   u7777 03C8  
                                 u7697 01BA                                   u7947 080C  
                                 u7867 0642                                   u7787 0424  
                                 u7957 085C                                   u7877 066A  
                                 u7797 044C                                   u7967 0866  
                                 u7887 06C6                                   u7977 088A  
                                 u7897 06EE                                   u7987 08B2  
                                 u7997 3A94                                   _RSEN 007E29  
                          _stopSignals 4720                                   _Test 3248  
                                 _back 005B                                   _main 38CE  
                                 _down 0069                                   _keys FB15  
                                 _time 0124                                   fsr0h 000FEA  
                                 fsr1h 000FE2                     i2___lwdiv@quotient 000A  
                                 indf0 000FEF                                   fsr2h 000FDA  
                                 fsr0l 000FE9                                   indf2 000FDF  
                                 fsr1l 000FE1                                   fsr2l 000FD9  
                                 _sort 46A6                                   btemp 007E  
                 ??i2_I2C_Master_Start 0002                       ??_SolenoidTestA5 00AB  
                 ??i2_I2C_Master_Write 0004                                   prodh 000FF4  
                                 prodl 000FF3                                   start 000E  
                        __CFG_IESO$OFF 000000                   _log_count_can_no_lab 00EA  
                      __end_ofi2_putch 479E                    __size_of_EEPROMTest 0002  
                        __CFG_MCLRE$ON 000000                           ___param_bank 000000  
                           i2_printRTC 248E                            i2_lcdNibble 3FC2  
                      __end_of_Loading 2EB2                   __end_of_actuatorTest 08CA  
                     ?_I2C_Master_Init 008D                       ?_I2C_Master_Read 0001  
                     ?_I2C_Master_Wait 0001            ??i2_change_state_to_menu_12 002A  
          ??i2_change_state_to_menu_22 002A                       ?_I2C_Master_Stop 0001  
                                ?_Test 0001                   __end_of_EEPROM_write 3532  
                                ?_main 0001                                  _ACKEN 007E2C  
                                _ACKDT 007E2D                        __end_of___awdiv 36C6  
                                _EEADR 000FA9                                  STR_10 FFE7  
                                STR_11 FFEB                                  STR_12 FFFB  
                                STR_20 FFEF                                  STR_13 FFDF  
                                STR_21 FB30                                  STR_14 FFD7  
                                STR_22 FF9B                                  STR_30 FE0D  
                                STR_15 FFD3                                  STR_23 FF0D  
                                STR_31 FDEB                                  STR_16 FFE3  
                                STR_24 FD52                                  STR_32 FD30  
                                STR_40 FCEC                                  STR_17 FFF3  
                                STR_33 FD41                                  STR_41 FCDB  
                                STR_25 FB70                                  STR_18 FFF7  
                                STR_34 FDDA                                  STR_50 FDB8  
                                STR_42 FD96                                  STR_26 FD63  
                                STR_43 FD96                                  STR_35 FDDA  
                                STR_51 FFDB                                  STR_19 FFCF  
                                STR_27 FB5D                                  STR_52 FFCB  
                                STR_60 FFF3                                  STR_28 FD74  
                                STR_36 FD1F                                  STR_44 FCFD  
                      __end_of___awmod 38CE                                  STR_45 FCEC  
                                STR_37 FD30                                  STR_53 FFE7  
                                STR_61 FFF7                                  STR_29 FB6D  
                                STR_62 FFCF                                  STR_54 FFEB  
                                STR_70 FEC6                                  STR_38 FDC9  
                                STR_46 FDA7                                  STR_47 FDA7  
                                STR_55 FFFB                                  STR_63 FB30  
                                STR_71 FEFF                                  STR_39 FD85  
                                STR_56 FFDF                                  STR_64 FF72  
                                STR_80 FE4E                                  STR_48 FD0E  
                                STR_72 FC75                                  STR_49 FCFD  
                                STR_57 FFD7                                  STR_81 FB6D  
                                STR_65 FF43                                  STR_73 FEE3  
                                STR_58 FFD3                                  STR_74 FF50  
                                STR_90 FEB7                                  STR_82 FE7B  
                                STR_66 FB48                                  STR_59 FFE3  
                                STR_67 FFBD                                  STR_91 FED5  
                                STR_75 FEA8                                  STR_83 FE1E  
                                STR_84 FF7D                                  STR_76 FEF1  
                                STR_92 FC97                                  STR_68 FC86  
                                STR_85 FF7D                                  STR_77 FFAE  
                                STR_93 FF5C                                  STR_69 FCB9  
                                STR_78 FEFF                                  STR_86 FFA5  
                                STR_94 FCA8                                  STR_87 FFA5  
                                STR_95 FF67                                  STR_79 FF29  
                                STR_88 FF91                                  STR_96 FE99  
                                STR_89 FEFF                                  STR_97 FC20  
                                STR_98 FC0F                                  STR_99 FBED  
                                ?_sort 0001                        __end_of___lldiv 3782  
                                _T0CON 000FD5                        ___awdiv@divisor 0088  
                                _T1CON 000FCD                                  _T3CON 000FB1  
                      __end_of___lwdiv 3C90                        __end_of___lwmod 3EAC  
                                i2l254 248A                                  i2l930 4744  
                                i2l595 251C                                  i2l852 2BAE  
                                i2l854 2BCE                                  i2l848 2B62  
                      ___awdiv@counter 008A                                  _TMR0H 000FD7  
                                _TMR1H 000FCF                                  _TMR0L 000FD6  
                                _TMR3H 000FB3                                  _TMR1L 000FCE  
                                _TMR3L 000FB2                             _BothServos 1C14  
                                _PORTB 000F81                                  _TRISA 000F92  
                                _TRISB 000F93                                  _TRISC 000F94  
                                _TRISD 000F95                                  _TRISE 000F96  
                        __CFG_PWRT$OFF 000000                          __CFG_WRT0$OFF 000000  
                        __CFG_WRT1$OFF 000000                          __CFG_WRT2$OFF 000000  
                        __CFG_WRT3$OFF 000000                        __end_of_lcdInst 4792  
                      __end_of_handler 2C0A                         __CFG_EBTR0$OFF 000000  
                       __CFG_FCMEN$OFF 000000                         __CFG_EBTR1$OFF 000000  
                       __CFG_EBTR2$OFF 000000                         __CFG_EBTR3$OFF 000000  
                                _nRBPU 007F8F                          __CFG_WRTB$OFF 000000  
                        __CFG_WRTC$OFF 000000                          __CFG_WRTD$OFF 000000  
                      __end_of_readADC 4598                        __end_of_initLCD 41E4  
                       __CFG_EBTRB$OFF 000000                                  _debug 0067  
                           i2isdigit@c 0003                                  _getIR 40B8  
                      __end_of_loadRTC 3A86                        __end_of_readMAG 419E  
                      __end_of_dpowers FB30                                  _first 00E2  
                                _enter 006B                        __end_of_isdigit 45C2  
                                _input 007D                                  _putch 4772  
                                pclath 000FFA                                  tablat 000FF5  
                     __end_ofi2___wmul 4638                       __end_ofi2_getRTC 3D78  
                  _log_count_pop_w_tab 00F0                                  status 000FD8  
                       __CFG_PBADEN$ON 000000                          i2printf@width 0028  
                     __end_ofi2_printf 1916                     __size_ofi2___lwdiv 0052  
                   __size_ofi2___lwmod 0042                       __end_ofi2_strcpy 4334  
                          Loading@addr 00B3                       _count_can_no_lab 005D  
                 __size_of_EEPROM_read 0018                        __initialization 406A  
                         __end_of_Test 3350                     __size_ofi2_lcdInst 000C  
                         __end_of_main 3964                           __end_of_keys FB26  
                         __end_of_sort 46C8                             i2printf@ap 0020  
                           i2printf@cp 001E                     __size_ofi2_isdigit 001E  
                               ??_Test 00C6    __size_of_change_state_to_menu_start 002C  
                      ??_machineConfig 0080                                 ??_main 00DA  
                               ??_sort 00B8                          __activetblptr 000003  
           updateServoPosition@my_time 0086             updateServoPosition@time_us 0080  
                           i2strcpy@cp 0005                             i2strcpy@to 0001  
                    ?_I2C_Master_Start 0001                    EEPROM_write@address 00AB  
               __size_ofi2_EEPROM_read 0016                      ?_I2C_Master_Write 0081  
                               ?_getIR 0001                     ??_I2C_Master_Start 0081  
                               _ADCON0 000FC2                                 _ADCON1 000FC1  
                   ??_I2C_Master_Write 0083                                 _ADCON2 000FC0  
                               STR_100 FC42                                 STR_101 FC53  
                               STR_110 FCCA                                 STR_102 FBCB  
                               STR_103 FE2E                                 STR_111 FB83  
                               STR_104 FBFE                                 STR_112 FB95  
                               STR_113 FF36                                 STR_105 FBDC  
                               STR_106 FBFE                                 STR_114 FF87  
                               _ADRESH 000FC4                                 STR_107 FE8A  
                               STR_115 FC31                                 STR_108 FE6C  
                               STR_116 FC64                                 _EEADRH 000FAA  
                               STR_117 FFB6                                 STR_109 FE5D  
                               _ADRESL 000FC3                                 _EEDATA 000FA8  
                               _EECON2 000FA7                       ___awdiv@dividend 0086  
                      i2lcdNibble@data 0002                                 ?_putch 0001  
               __size_of_initSortTimer 00AA                        i2lcdNibble@temp 0001  
            i2_change_state_to_menu_12 4364              i2_change_state_to_menu_22 4334  
                               _INT1IE 007F83                                 _INT1IF 007F80  
                               _CVRCON 000FB5                                 i2l1249 1782  
                               i2l1706 421C                                 i2l1696 4060  
                               i2l5403 4212                                 i2l6131 257E  
                               i2l6123 2526                                 i2l5341 4658  
                               i2l6301 29F6                                 i2l6141 25EC  
                               i2l6133 2594                                 i2l6125 253C  
                               i2l6117 24BA                                 i2l6231 2902  
                               i2l6143 2602                                 i2l6135 25AA  
                               i2l6127 2552                                 i2l6151 2688  
                               i2l6241 2920                                 i2l6145 2618  
                               i2l6137 25C0                                 i2l6129 2568  
                               i2l6331 2A64                                 i2l6323 2A40  
                               i2l6315 2A1C                                 i2l6251 293E  
                               i2l6243 2926                                 i2l6227 28EE  
                               i2l6219 28D4                                 i2l6139 25D6  
                               i2l5365 4700                                 i2l5701 16FA  
                               i2l6309 2A0E                                 i2l6245 292C  
                               i2l6229 28FE                                 i2l6237 290C  
                               i2l6149 262E                                 i2l5631 3D4E  
                               i2l5375 402E                                 i2l5703 170C  
                               i2l6327 2A52                                 i2l6319 2A2E  
                               i2l6247 2932                                 i2l6255 2944  
                               i2l5377 4036                                 i2l5713 174C  
                               i2l6281 29AE                                 i2l6249 2938  
                               i2l6337 2A6E                                 i2l5627 3D3E  
                               i2l5387 4056                                 i2l5379 403A  
                               i2l5395 41F2                                 i2l5731 17CC  
                               i2l5707 1736                                 i2l6291 29D4  
                               i2l6275 29A0                                 i2l6267 2988  
                               i2l5637 3D68                                 i2l5397 41FA  
                               i2l5725 17B0                                 i2l5709 1748  
                               i2l5661 15D0                                 i2l8053 26D0  
                               i2l6285 29CA                                 i2l5399 41FE  
                               i2l5743 17FE                                 i2l5671 1608  
                               i2l5655 15B2                                 i2l8063 273A  
                               i2l6295 29E8                                 i2l8151 2B36  
                               i2l8135 2B16                                 i2l5761 185A  
                               i2l5753 183C                                 i2l5729 17C8  
                               i2l5665 15D6                                 i2l8073 27FC  
                               i2l8057 26E0                                 i2l6297 29EC  
                               i2l8137 2B1A                                 i2l5755 1844  
                               i2l5691 16A0                                 i2l5659 15C2  
                               i2l5773 188C                                 i2l5749 1818  
                               i2l8173 2B80                                 i2l5783 18F2  
                               i2l5767 1870                                 i2l5687 1692  
                               i2l5679 166A                                 i2l5791 4314  
                               i2l8175 2B82                                 i2l5769 1878  
                               i2l5777 189E                                 i2l5697 16EA  
                               i2l5689 169C                                 i2l5785 18FA  
                               i2l5779 18A4                                 i2l5699 16F4  
                               i2l5971 31FC                                 i2l7811 2320  
                               i2l7803 22FC                                 i2l7731 2204  
                               i2l5789 430C                                 i2l8461 243E  
                               i2l8197 2BCC                                 i2l5967 31EC  
                               i2l8471 2978                                 i2l8463 2460  
                               i2l7831 236E                                 i2l7823 2352  
                               i2l7815 232E                                 i2l7807 2312  
                               i2l7743 222E                                 i2l7735 2212  
                               i2l8465 247C                                 i2l7729 21FE  
                               i2l5979 3230                                 i2l7851 23BC  
                               i2l7843 23A0                                 i2l7835 237C  
                               i2l7827 2360                                 i2l7819 233C  
                               i2l7771 2284                                 i2l7763 2266  
                               i2l7755 224A                                 i2l7747 223C  
                               i2l7739 2220                                 i2l8469 295C  
                               i2l7871 2412                                 i2l7863 23EE  
                               i2l7855 23D2                                 i2l7847 23AE  
                               i2l7839 2392                                 i2l7791 22D2  
                               i2l7783 22AE                                 i2l7775 2292  
                               i2l7767 2276                                 i2l7759 2258  
                               i2l7867 23FC                                 i2l7859 23E0  
                               i2l7795 22E0                                 i2l7787 22BC  
                               i2l7779 22A0                                 i2l7877 2420  
                               i2l7799 22EE                                 _OSCCON 000FD3  
                               _TMR0IE 007F95                                 _TMR0IF 007F92  
                            ??i2_putch 0003                                 _TMR1IE 007CE8  
                               _TMR1IF 007CF0                                 _TMR2IE 007CE9  
                               _TMR3IE 007D01                                 _TMR3IF 007D09  
                               _TMR0ON 007EAF                                 _TMR1ON 007E68  
                               _TMR3ON 007D88                                 _SSPADD 000FC8  
                               _TRISC3 007CA3                                 _TRISC4 007CA4  
                               _SSPBUF 000FC9                              ??_Loading 00B1  
                     __end_of_delay_ms 45EA                   delay_ms@milliseconds 0081  
                       __CFG_XINST$OFF 000000                       ID@sensor_outputs 008A  
                     __end_of_dispLogs 46A6                            ?i2_printRTC 0001  
                     retrieveLog@byte1 000B                       retrieveLog@byte2 000C  
                     retrieveLog@byte3 000D                   __end_of_Distribution 2FF2  
                               ___wmul 42CC                              ??___awdiv 008A  
                       __CFG_STVREN$ON 000000                              ??___awmod 0084  
                          logRun@byte1 00B2                            logRun@byte2 00B3  
                          logRun@byte3 00B4                                 _getRTC 3B0E  
                            ??___lldiv 0088                              ??___lwdiv 0084  
                            ??___lwmod 008B                       ??_printSortTimer 002A  
                     __end_of_initTime 46EA                                 _initUI 465E  
                               _readIR 4106                                 _logRun 2FF2  
                               clear_0 4090                                 clear_1 409C  
                               clear_2 40A8                       ___awdiv@quotient 008C  
                      ___awmod@divisor 0082                             _PortTestA5 3964  
                      ___awmod@counter 0084                              ??_lcdInst 0082  
                               _printf 1170                              ??_handler 004B  
              __size_of_initGlobalVars 006A                           ?_retrieveLog 0007  
                               _strcpy 4296                              ??_readADC 0080  
                            ??_initLCD 0083                              ??_loadRTC 0095  
                            ??_readMAG 0082   __end_ofi2_change_state_to_menu_start 4612  
__size_ofi2_change_state_to_menu_start 0028           i2_change_state_to_menu_start 45EA  
                          ?_BothServos 0001                           ??_EEPROMTest 0080  
                            ??_isdigit 0080                     __size_of_PortTests 0084  
                    __end_ofi2___lwdiv 406A                       __end_of_printRTC 21CE  
                         __mediumconst FB14                      __end_ofi2___lwmod 4226  
                               tblptrh 000FF7                                 tblptrl 000FF6  
                               tblptru 000FF8                   _log_count_pop_no_tab 00EE  
                __end_of_algorithmTest 3608                      __end_ofi2_lcdInst 47AA  
                    __end_ofi2_isdigit 4708                             __accesstop 0080  
              __end_of__initialization 40AE                          ?_inputHandler 002A  
                        ___rparam_used 000001                printSortTimer@start_sec 003D  
                __size_of_actuatorTest 08B8                          i2_EEPROM_read 4736  
                         Loading@byte1 00B5                     i2___lwmod@dividend 0001  
                   __end_of_EEPROMTest 47E8                         __pcstackCOMRAM 0001  
                __size_of_EEPROM_write 00E4                           __pidataBANK1 47BE  
                        __end_of_getIR 4106                            i2printRTC@i 0041  
                        _initSortTimer 3782            __end_of_updateServoPosition 3D06  
                        __end_of_putch 4782                            i2printf@len 0022  
                          i2printf@val 0024                             __end_of_ID 2D64  
                           __end_of_UI 1170                     printSortTimer@hour 002D  
                            ?i2___wmul 0001                     __size_of_lcdNibble 0068  
                            ?i2_getRTC 0001                            i2putch@data 0003  
                printSortTimer@curTime 002F     __end_of_change_state_to_menu_start 456C  
        ?i2_change_state_to_menu_start 0001             _change_state_to_menu_start 4540  
                printSortTimer@cur_sec 003F                              ?i2_printf 000D  
                              ??_getIR 0086                              ?i2_strcpy 0001  
                     _count_pop_no_tab 0061                    __size_ofi2_printRTC 0236  
                              ??_putch 0082                           _actuatorTest 0012  
                           __pbssBANK0 00DA                             __pbssBANK1 0100  
                         ?_stopSignals 0001                         ??_inputHandler 002C  
                         _EEPROM_write 344E               ?_change_state_to_menu_11 0001  
                              UI@F3223 012F               ?_change_state_to_menu_12 0001  
             ?_change_state_to_menu_22 0001               ?_change_state_to_menu_23 0001  
                       ?i2_EEPROM_read 0001               ?_change_state_to_logs_11 0001  
             ?_change_state_to_logs_12 0001               ?_change_state_to_logs_22 0001  
             ?_change_state_to_logs_23 0001               ?_change_state_to_logs_33 0001  
             ?_change_state_to_logs_34 0001                    __size_of_BothServos 02F0  
                    __end_of_PortTests 3C18                      printRTC@RTC_month 00BC  
                         ?i2_lcdNibble 0001                                UI@i_411 00CA  
                              UI@i_412 00CB                                UI@i_430 00CC  
                              UI@i_431 00CD                                UI@i_408 00C9  
                              UI@i_442 00D2                                UI@i_434 00CE  
                              UI@i_443 00D3                                UI@i_435 00CF  
                              UI@i_446 00D4                                UI@i_438 00D0  
                              UI@i_447 00D5                                UI@i_439 00D1  
                       ?_initSortTimer 0001                                ?___wmul 0080  
                              ?_getRTC 0001                                ?_initUI 0001  
                              ?_readIR 0001                                ?_logRun 0001  
             updateServoPosition@timer 0082                                UI@month 00D6  
                          ?_PortTestA5 0001                                ?_printf 008E  
                              _UI$2292 00C6                                ?_strcpy 0080  
                           ??i2___wmul 0005                             ??i2_getRTC 0004  
                            ?_delay_ms 0001                             ??i2_printf 0019  
                           ??i2_strcpy 0005                              ?_dispLogs 0012  
                              _SSPCON1 000FC6                                _SSPCON2 000FC5  
                              _SSPSTAT 000FC7                                _RTCflag 012B  
                              i2_putch 4792                              ?_initTime 0080  
                      _f_loadingNewCan 00E0                        i2printRTC@month 003D  
                __size_of_Distribution 0140            __size_ofi2_I2C_Master_Start 0008  
                    __end_of_lcdNibble 3E4A                                _Loading 2D64  
          __size_ofi2_I2C_Master_Write 000A                       EEPROM_write@data 00AD  
                              __Hparam 0000                                __Lparam 0000  
   __size_ofi2_change_state_to_menu_12 0030     __size_ofi2_change_state_to_menu_22 0030  
                            ?_printRTC 0001                                ___awdiv 3608  
                              ___awmod 382C                             _initServos 3F68  
                              ___lldiv 36C6                        __size_of___wmul 0036  
                              ___lwdiv 3C18                                ___lwmod 3E4A  
                      __size_of_getRTC 0086                        printSortTimer@i 0049  
                            _CMCONbits 000FB4                      retrieveLog@logNum 0007  
                         logRun@byte11 00B6                        __size_of_initUI 0024  
                      __size_of_readIR 004C                                __pcinit 406A  
                 i2EEPROM_read@address 0001                        __size_of_logRun 013C  
                         logRun@byte_i 00B5                                __ramtop 1000  
                       _initGlobalVars 3D78                                _lcdInst 4782  
                              _handler 0008                                __ptext0 38CE  
                              __ptext1 4720                                __ptext2 46A6  
                              __ptext3 2D64                                __ptext4 3782  
                              __ptext5 3D78                                __ptext6 40B8  
                              __ptext7 4106                                __ptext8 45C2  
                              __ptext9 2C0A                        __size_of_printf 0438  
                              _readADC 456C                        __size_of_strcpy 0036  
                              _initLCD 419E                                _cur_can 0065  
                              _loadRTC 39FA                                _readMAG 4152  
                              _dpowers FB26                     actuatorTest@i_1630 00AD  
                   actuatorTest@i_1640 00B0                     actuatorTest@i_1641 00B1  
                   actuatorTest@i_1650 00B7                     actuatorTest@i_1643 00B2  
                   actuatorTest@i_1660 00BD                     actuatorTest@i_1652 00B8  
                   actuatorTest@i_1644 00B3                     actuatorTest@i_1653 00B9  
                   actuatorTest@i_1637 00AE                     actuatorTest@i_1670 00C3  
                   actuatorTest@i_1662 00BE                     actuatorTest@i_1646 00B4  
                   actuatorTest@i_1638 00AF                     actuatorTest@i_1663 00BF  
                   actuatorTest@i_1647 00B5                     actuatorTest@i_1656 00BA  
                   actuatorTest@i_1657 00BB                     actuatorTest@i_1649 00B6  
                   actuatorTest@i_1666 00C0                     actuatorTest@i_1667 00C1  
                   actuatorTest@i_1659 00BC                     actuatorTest@i_1669 00C2  
                              _isdigit 4598                          ?_ToggleTestA5 0001  
                     ___awmod@dividend 0080                                getRTC@i 0083  
                 __size_of_retrieveLog 011A                             ??_delay_ms 0080  
             __size_of_I2C_Master_Init 0060               __size_of_I2C_Master_Read 002E  
                        _log_startTime 0100               __size_of_I2C_Master_Wait 0014  
             __size_of_I2C_Master_Stop 0008                             ??_dispLogs 0014  
                         _Distribution 2EB2                         __pintcode_body 2A9C  
                 end_of_initialization 40AE                                logRun@i 00B7  
                           ??_initTime 0086                        ??i2_EEPROM_read 0003  
                 SolenoidTestA5@i_1683 00AF                   SolenoidTestA5@i_1685 00B0  
                              int_func 2A9C                    i2___wmul@multiplier 0001  
                        ??_EEPROM_read 0082                    __size_of_PortTestA5 0096  
            __size_of_I2C_Master_Start 0008              __size_of_I2C_Master_Write 000A  
                      ___lldiv@divisor 0084                        ___lldiv@counter 008C  
                      ??_initSortTimer 0085                                printf@c 00A8  
                         ??i2_printRTC 002A                                printf@f 008E  
                           ??_printRTC 00AB                       I2C_Master_Init@c 008D  
                     I2C_Master_Read@a 0081                                postdec1 000FE5  
                              postdec2 000FDD                                postinc0 000FEE  
                              postinc2 000FDE                 __end_of_initGlobalVars 3DE2  
                           _sensorTest 1916                __size_of_SolenoidTestA5 00FE  
                           _servoTimes 011C                              _PORTAbits 000F80  
                            _PORTBbits 000F81                   __end_of_inputHandler 2A9C  
                         ??_BothServos 00AB                         ??_ToggleTestA5 00AB  
                __end_of_machineConfig 3F68                             _updateMenu 21CE  
                    i2_I2C_Master_Read 4638                              _IR_signal 00DA  
                    i2_I2C_Master_Wait 4760                      i2_I2C_Master_Stop 47D6  
                    i2___lwdiv@divisor 0008                        _log_count_total 00F2  
                            i2___lwdiv 4018                              i2___lwmod 41E4  
                    i2___lwdiv@counter 000C                     ?i2_I2C_Master_Read 0001  
                   ?i2_I2C_Master_Wait 0001                     __end_ofi2_printRTC 26C4  
                   ?i2_I2C_Master_Stop 0001                          actuatorTest@i 00C4  
         ??_change_state_to_menu_start 00C4                              i2_lcdInst 479E  
                           _total_time 00F8                            printf@width 00A9  
                 __size_of_stopSignals 0016                    ??i2_I2C_Master_Read 0002  
                            i2_isdigit 46EA                    ??i2_I2C_Master_Wait 0001  
                  ??i2_I2C_Master_Stop 0002                              i2getRTC@i 0004  
                   __end_of_BothServos 1F04                    __end_of_EEPROM_read 4720  
                          ?_initServos 0001                        ?_initGlobalVars 0001  
                       __end_of___wmul 4302                         __end_of_getRTC 3B94  
                 __size_ofi2_lcdNibble 0056                          EEPROM_write@i 00AF  
                        i2lcdInst@data 0003                         __end_of_initUI 4682  
                       __end_of_readIR 4152                         __end_of_logRun 312E  
                     i2___wmul@product 0005                         __end_of_printf 15A8  
                         i2printf@flag 0026                         __end_of_strcpy 42CC  
            __end_ofi2_I2C_Master_Read 465E              __end_ofi2_I2C_Master_Wait 4772  
                         i2printf@prec 001D                    start_initialization 406A  
            __end_ofi2_I2C_Master_Stop 47DE                             readMAG@res 0084  
                    __size_ofi2___wmul 0026                        _count_can_w_lab 005F  
          ?_change_state_to_menu_start 0001                      __size_ofi2_getRTC 0072  
                            i2printf@c 0027                              i2printf@f 000D  
                   EEPROM_write@i_1321 00B0                  i2I2C_Master_Read@temp 0003  
                           ?i2___lwdiv 0006                             ?i2___lwmod 0001  
                    __size_ofi2_printf 036E                      __size_ofi2_strcpy 0032  
                    ??_I2C_Master_Init 0091                      ??_I2C_Master_Read 0081  
                    ??_I2C_Master_Wait 0080                             ?i2_lcdInst 0001  
                    ??_I2C_Master_Stop 0081                       __CFG_OSC$INTIO67 000000  
                           ?i2_isdigit 0001                             initTime@DD 0083  
                           initTime@MM 0084                             initTime@YY 0085  
                      retrieveLog@addr 0010                             logRun@addr 00B9  
                             ??___wmul 0084                               ??_getRTC 0083  
               __size_of_algorithmTest 00D6                              _PortTests 3B94  
                          ?_sensorTest 0001                            __pdataBANK1 012F  
                     __CFG_LPT1OSC$OFF 000000                               ??_initUI 00C4  
                             ??_readIR 0082                               ??_logRun 00B1  
                         ??_PortTestA5 00AB                 printSortTimer@timeDiff 0047  
     __size_of_change_state_to_menu_11 0030       __size_of_change_state_to_menu_12 0038  
     __size_of_change_state_to_menu_22 0038       __size_of_change_state_to_menu_23 0030  
                             ??_printf 009A       __size_of_change_state_to_logs_11 0030  
     __size_of_change_state_to_logs_12 0030       __size_of_change_state_to_logs_22 0030  
     __size_of_change_state_to_logs_23 002E       __size_of_change_state_to_logs_33 0030  
     __size_of_change_state_to_logs_34 0030                               ??_strcpy 0084  
                  _printSortTimer$2412 0045                            __pbssCOMRAM 005B  
         __size_of_updateServoPosition 0076                            ?_updateMenu 0001  
                        __pcstackBANK0 0080                __size_of_printSortTimer 01F2  
                    i2___lwmod@divisor 0003                      i2___lwmod@counter 0005  
                         _isdigit$1939 0081                      __size_of_delay_ms 0028  
                       initSortTimer@i 0088                      printSortTimer@min 0041  
                    printSortTimer@sec 0043                    __size_of_initServos 005A  
                    __size_of_dispLogs 0024                       printRTC@INT_time 00AE  
                         i2strcpy@from 0003                               ?i2_putch 0001  
                      _count_pop_w_tab 0063                            _EEPROM_read 4708  
                   __end_of_PortTestA5 39FA                       _I2C_Master_Start 47CE  
                            _f_lastCan 0073                               ?_Loading 0001  
                  i2I2C_Master_Write@d 0002                       _I2C_Master_Write 47AA  
                    __size_of_initTime 0022                   __end_of_ToggleTestA5 3B0E  
                     ___lwdiv@dividend 0080                      __CFG_CCP2MX$PORTC 000000  
                            __pintcode 0008                          __pmediumconst FB14  
                            _lcdNibble 3DE2                  __size_of_inputHandler 01E6  
                             ?___awdiv 0086                               ?___awmod 0080  
                             ?___lldiv 0080                               ?___lwdiv 0080  
                           ?_PortTests 0001                               ?___lwmod 0087  
                       _SolenoidTestA5 3350                      __size_of_printRTC 02CA  
                             ?_lcdInst 0001                               ?_handler 0001  
                             ?_readADC 0001                               ?_initLCD 0001  
                             ?_loadRTC 0001                               ?_readMAG 0001  
                             ?_isdigit 0001             __size_ofi2_I2C_Master_Read 0026  
           __size_ofi2_I2C_Master_Wait 0012             __size_ofi2_I2C_Master_Stop 0008  
                            _firstboot 0075                              _cur_state 00DE  
                     ___lwdiv@quotient 0084                         __size_of_getIR 004E  
                        _algorithmTest 3532                            ??i2___lwdiv 000A  
                          ??i2___lwmod 0005                         __size_of_putch 0010  
                          __size_of_ID 015A                            __size_of_UI 08A6  
                       ToggleTestA5@on 00AC                    __size_of_sensorTest 02FE  
           __end_ofi2_I2C_Master_Start 47E6             __end_ofi2_I2C_Master_Write 47BE  
                          ??i2_lcdInst 0003                         ___wmul@product 0084  
                             _LATAbits 000F89                               _LATCbits 000F8B  
                             _LATDbits 000F8C                               _LATEbits 000F8D  
                         _inputHandler 28B6                            ??i2_isdigit 0001  
                             i2u422_40 16CE                               i2u422_47 16C4  
                             i2u426_40 172E                               i2u426_47 1724  
                             _PIR2bits 000FA1                               i2u369_40 4656  
                             i2u466_40 251C                               i2u825_47 28F4  
                             i2u826_47 3FDA                               i2u827_47 3FE4  
                             i2u828_47 4006                               i2u829_47 4010  
                             i2u695_40 27F6                    __size_of_updateMenu 02C0  
                       _log_completion 00E8                       __CFG_WDTPS$32768 000000  
               __end_of_SolenoidTestA5 344E                             ?_lcdNibble 0001  
                            _was_low_1 0079                              _was_low_3 007B  
                        ??_retrieveLog 0009                             _ADCON0bits 000FC2  
                    ___wmul@multiplier 0080                              _startTime 010E  
                             i2___wmul 4612                          lcdNibble@data 0081  
                             i2_getRTC 3D06                             printf@flag 00A7  
                        lcdNibble@temp 0080                             printf@prec 009E  
                             Loading@i 00B6                               i2_printf 15A8  
                             i2_strcpy 4302                         ?_algorithmTest 0001  
                  I2C_Master_Read@temp 0082                              copy_data0 407E  
                            readIR@res 0084                       __size_ofi2_putch 000C  
                           _EECON1bits 000FA6                  __end_ofi2_EEPROM_read 474C  
                          _count_total 00FE                       ??_initGlobalVars 0080  
                      SolenoidTestA5@i 00AD                               __Hrparam 0000  
                     __size_of_Loading 014E                              initTime@h 0081  
                            initTime@m 0080                              initTime@s 0086  
                            initTime@w 0082                               __Lrparam 0000  
                   __CFG_BOREN$SBORDIS 000000                              logRun@num 00B1  
                      ?_SolenoidTestA5 0001                  __end_of_initSortTimer 382C  
                         ??_initServos 0088                            ??_PortTests 0080  
                     __size_of___awdiv 00BE                       __size_of___awmod 00A2  
              _change_state_to_menu_11 43C4             ?i2_change_state_to_menu_12 0001  
              _change_state_to_menu_12 425E             ?i2_change_state_to_menu_22 0001  
              _change_state_to_menu_22 4226                _change_state_to_menu_23 4394  
                i2___wmul@multiplicand 0003                       __size_of___lldiv 00BC  
                     __size_of___lwdiv 0078                _change_state_to_logs_11 44B4  
              _change_state_to_logs_12 4484                _change_state_to_logs_22 4454  
              _change_state_to_logs_23 4512                _change_state_to_logs_33 4424  
              _change_state_to_logs_34 43F4                       __size_of___lwmod 0062  
                       readADC@channel 0081                     i2I2C_Master_Read@a 0002  
                     __size_of_lcdInst 0010                       __size_of_handler 2C02  
                           _EEPROMTest 47E6                        _I2C_Master_Init 3EAC  
                     __size_of_readADC 002C                        _I2C_Master_Read 44E4  
                     __size_of_initLCD 0046                           _f_ID_receive 006D  
                     __size_of_loadRTC 008C                       __size_of_readMAG 004C  
                      _I2C_Master_Wait 474C                        _I2C_Master_Stop 47C6  
                     __size_of_isdigit 002A                               _delay_ms 45C2  
                       _printSortTimer 26C4                        ___lwdiv@divisor 0082  
                      ___lwdiv@counter 0086                    __end_of_retrieveLog 3248  
                             __ptext10 2EB2                               __ptext11 3F0C  
                             __ptext20 46C8                               __ptext12 2FF2  
                             __ptext21 419E                               __ptext13 344E  
                             __ptext30 474C                               __ptext22 08CA  
                             __ptext14 4708                               __ptext31 4226  
                             __ptext23 1F04                               __ptext15 465E  
                             __ptext40 0012                               __ptext32 425E  
                             __ptext24 4296                               __ptext16 39FA  
                             __ptext41 3A86                               __ptext33 382C  
                             __ptext25 3B0E                               __ptext17 3EAC  
                             __ptext50 42CC                               __ptext42 3350  
                             __ptext34 3608                               __ptext26 47AA  
                             __ptext18 36C6                               __ptext51 3E4A  
                             __ptext43 3B94                               __ptext35 3248  
                             __ptext27 47C6                               __ptext19 4540  
                             __ptext60 248E                               __ptext52 3C18  
                             __ptext44 3964                               __ptext36 1916  
                             __ptext28 47CE                               __ptext61 4302  
                             __ptext53 4782                               __ptext45 47E6  
                             __ptext37 4152                               __ptext29 44E4  
                             __ptext70 4454                               __ptext62 28B6  
                             __ptext54 3DE2                               __ptext46 1C14  
                             __ptext38 456C                               __ptext71 4484  
                             __ptext63 4334                               __ptext55 3F68  
                             __ptext47 1170                               __ptext39 3532  
                             __ptext80 4612                               __ptext72 44B4  
                             __ptext64 4364                               __ptext56 3C90  
                             __ptext48 4772                               __ptext81 41E4  
                             __ptext73 4682                               __ptext65 4394  
                             __ptext49 4598                               __ptext90 4760  
                             __ptext82 4018                               __ptext74 312E  
                             __ptext66 43C4                               __ptext58 21CE  
                             __ptext83 479E                               __ptext75 4736  
                             __ptext67 43F4                               __ptext59 45EA  
                             __ptext84 3FC2                               __ptext76 26C4  
                             __ptext68 4424                               __ptext85 3D06  
                             __ptext77 15A8                               __ptext69 4512  
                             __ptext86 47B4                               __ptext78 4792  
                             __ptext87 47D6                               __ptext79 46EA  
                             __ptext88 47DE                               __ptext89 4638  
                             _dispLogs 4682                          ?_actuatorTest 0001  
                        ??_stopSignals 0080                  __size_of_ToggleTestA5 0088  
                           strcpy@from 0082                         i2_isdigit$1939 0002  
                   __end_of_initServos 3FC2                          __size_of_Test 0108  
                        ?_EEPROM_write 00AB                               _initTime 46C8  
                        __size_of_main 0096                          __size_of_sort 0022  
       ??i2_change_state_to_menu_start 0043                               _logstate 00F6  
                  _updateServoPosition 3C90                 __size_of_machineConfig 005C  
                        ??i2_lcdNibble 0001                               _printRTC 1F04  
                          ??_lcdNibble 0080                              printRTC@i 00C2  
                             int$flags 007E                           ??_sensorTest 00AB  
                       _log_total_time 00F4                     _f_can_coming_to_ID 006F  
                            printf@len 00A3                              printf@val 00A5  
    __end_ofi2_change_state_to_menu_12 4394      __end_ofi2_change_state_to_menu_22 4364  
                             loadRTC@i 0096                 __end_of_printSortTimer 28B6  
                            putch@data 0082               __end_of_I2C_Master_Start 47D6  
                          _OSCTUNEbits 000F9B               __end_of_I2C_Master_Write 47B4  
                           _INTCONbits 000FF2                   ?_updateServoPosition 0080  
                         _ToggleTestA5 3A86                           ??_updateMenu 0043  
                      ??_algorithmTest 00AB                             _MAG_signal 00DC  
                             isdigit@c 0082                          sensorTest@res 00AD  
                       ??_actuatorTest 00AB                               intlevel2 0000  
                       ??_EEPROM_write 00AE                     __end_of_sensorTest 1C14  
                     ___lwmod@dividend 0087                       ___lldiv@dividend 0080  
                         ?_EEPROM_read 0080                    __end_of_stopSignals 4736  
            ??_change_state_to_menu_11 002A              ??_change_state_to_menu_12 00AB  
            ??_change_state_to_menu_22 00AB              ??_change_state_to_menu_23 002A  
            ??_change_state_to_logs_11 002A              ??_change_state_to_logs_12 002A  
            ??_change_state_to_logs_22 002A              ??_change_state_to_logs_23 002A  
            ??_change_state_to_logs_33 002A              ??_change_state_to_logs_34 002A  
                             printf@ap 00A1                               printf@cp 009F  
                   __end_of_updateMenu 248E                __end_of_I2C_Master_Init 3F0C  
              __end_of_I2C_Master_Read 4512                __end_of_I2C_Master_Wait 4760  
              __end_of_I2C_Master_Stop 47CE                          printRTC@F3214 0133  
                          lcdInst@data 0082                           retrieveLog@i 000E  
                          _retrieveLog 312E                    __end_ofi2_lcdNibble 4018  
                ??_updateServoPosition 0084                        ?_printSortTimer 0001  
                     ___lldiv@quotient 0088                      I2C_Master_Write@d 0081  
                          ?_EEPROMTest 0001                        ___lwmod@divisor 0089  
                    _f_can_distributed 012D                               strcpy@cp 0084  
                             strcpy@to 0080                          _machineConfig 3F0C  
                      ___lwmod@counter 008B                          printRTC@month 00BE  
                        ?_Distribution 0001                          _machine_state 00FC  
                        dispLogs@myLog 0012                     i2printRTC@INT_time 002D  
