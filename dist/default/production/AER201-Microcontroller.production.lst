

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Wed Apr 12 03:31:56 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,delta=1
    73                           	psect	text59,global,reloc=2,class=CODE,delta=1
    74                           	psect	text60,global,reloc=2,class=CODE,delta=1
    75                           	psect	text61,global,reloc=2,class=CODE,delta=1
    76                           	psect	text62,global,reloc=2,class=CODE,delta=1
    77                           	psect	text63,global,reloc=2,class=CODE,delta=1
    78                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    79                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1
    94                           	psect	text79,global,reloc=2,class=CODE,delta=1
    95                           	psect	text80,global,reloc=2,class=CODE,delta=1
    96                           	psect	text81,global,reloc=2,class=CODE,delta=1
    97                           	psect	text82,global,reloc=2,class=CODE,delta=1
    98                           	psect	text83,global,reloc=2,class=CODE,delta=1
    99                           	psect	text84,global,reloc=2,class=CODE,delta=1
   100                           	psect	text85,global,reloc=2,class=CODE,delta=1
   101                           	psect	text86,global,reloc=2,class=CODE,delta=1
   102                           	psect	text87,global,reloc=2,class=CODE,delta=1
   103                           	psect	text88,global,reloc=2,class=CODE,delta=1
   104                           	psect	text89,global,reloc=2,class=CODE,delta=1
   105                           	psect	text90,global,reloc=2,class=CODE,delta=1
   106                           	psect	text91,global,reloc=2,class=CODE,delta=1
   107                           	psect	text92,global,reloc=2,class=CODE,delta=1
   108                           	psect	text93,global,reloc=2,class=CODE,delta=1
   109                           	psect	text94,global,reloc=2,class=CODE,delta=1
   110                           	psect	text95,global,reloc=2,class=CODE,delta=1
   111                           	psect	text96,global,reloc=2,class=CODE,delta=1
   112                           	psect	text97,global,reloc=2,class=CODE,delta=1
   113                           	psect	text98,global,reloc=2,class=CODE,delta=1
   114                           	psect	text99,global,reloc=2,class=CODE,delta=1
   115                           	psect	text100,global,reloc=2,class=CODE,delta=1
   116                           	psect	text101,global,reloc=2,class=CODE,delta=1
   117                           	psect	text102,global,reloc=2,class=CODE,delta=1
   118                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   119                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   120                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   121  0000                     
   122                           ; Version 1.40
   123                           ; Generated 01/12/2016 GMT
   124                           ; 
   125                           ; Copyright © 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
   126                           ; All rights reserved.
   127                           ; 
   128                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   129                           ; 
   130                           ; Redistribution and use in source and binary forms, with or without modification, are
   131                           ; permitted provided that the following conditions are met:
   132                           ; 
   133                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   134                           ;        conditions and the following disclaimer.
   135                           ; 
   136                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   137                           ;        of conditions and the following disclaimer in the documentation and/or other
   138                           ;        materials provided with the distribution.
   139                           ; 
   140                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   141                           ;        software without specific prior written permission.
   142                           ; 
   143                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   144                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   145                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   146                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   147                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   148                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   149                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   150                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   151                           ; 
   152                           ; 
   153                           ; Code-generator required, PIC18F4620 Definitions
   154                           ; 
   155                           ; SFR Addresses
   156  0000                     
   157                           	psect	idataBANK1
   158  005F9A                     __pidataBANK1:
   159                           	opt stack 0
   160                           
   161                           ;initializer for UI@F3250
   162  005F9A  4D                 	db	77
   163  005F9B  4D                 	db	77
   164  005F9C  4D                 	db	77
   165  005F9D  00                 	db	0
   166                           
   167                           ;initializer for printRTC@F3240
   168  005F9E  4D                 	db	77
   169  005F9F  4D                 	db	77
   170  005FA0  4D                 	db	77
   171  005FA1  00                 	db	0
   172                           
   173                           	psect	mediumconst
   174  00FAA6                     __pmediumconst:
   175                           	opt stack 0
   176  00FAA6  00                 	db	0
   177  00FAA7                     _keys:
   178                           	opt stack 0
   179  00FAA7  31                 	db	49
   180  00FAA8  32                 	db	50
   181  00FAA9  33                 	db	51
   182  00FAAA  41                 	db	65
   183  00FAAB  34                 	db	52
   184  00FAAC  35                 	db	53
   185  00FAAD  36                 	db	54
   186  00FAAE  42                 	db	66
   187  00FAAF  37                 	db	55
   188  00FAB0  38                 	db	56
   189  00FAB1  39                 	db	57
   190  00FAB2  43                 	db	67
   191  00FAB3  2A                 	db	42
   192  00FAB4  30                 	db	48
   193  00FAB5  23                 	db	35
   194  00FAB6  44                 	db	68
   195  00FAB7  00                 	db	0
   196  00FAB8                     __end_of_keys:
   197                           	opt stack 0
   198  00FAB8                     _dpowers:
   199                           	opt stack 0
   200  00FAB8  0001               	dw	1
   201  00FABA  000A               	dw	10
   202  00FABC  0064               	dw	100
   203  00FABE  03E8               	dw	1000
   204  00FAC0  2710               	dw	10000
   205  00FAC2                     __end_of_dpowers:
   206                           	opt stack 0
   207  0000                     _ADCON0	set	4034
   208  0000                     _ADCON0bits	set	4034
   209  0000                     _ADCON1	set	4033
   210  0000                     _ADCON2	set	4032
   211  0000                     _ADRESH	set	4036
   212  0000                     _ADRESL	set	4035
   213  0000                     _CMCONbits	set	4020
   214  0000                     _CVRCON	set	4021
   215  0000                     _EEADR	set	4009
   216  0000                     _EEADRH	set	4010
   217  0000                     _EECON1bits	set	4006
   218  0000                     _EECON2	set	4007
   219  0000                     _EEDATA	set	4008
   220  0000                     _INTCONbits	set	4082
   221  0000                     _LATA	set	3977
   222  0000                     _LATAbits	set	3977
   223  0000                     _LATB	set	3978
   224  0000                     _LATBbits	set	3978
   225  0000                     _LATC	set	3979
   226  0000                     _LATCbits	set	3979
   227  0000                     _LATD	set	3980
   228  0000                     _LATDbits	set	3980
   229  0000                     _LATE	set	3981
   230  0000                     _OSCCON	set	4051
   231  0000                     _OSCTUNEbits	set	3995
   232  0000                     _PIR2bits	set	4001
   233  0000                     _PORTAbits	set	3968
   234  0000                     _PORTB	set	3969
   235  0000                     _PORTBbits	set	3969
   236  0000                     _PR2	set	4043
   237  0000                     _SSPADD	set	4040
   238  0000                     _SSPBUF	set	4041
   239  0000                     _SSPCON1	set	4038
   240  0000                     _SSPCON2	set	4037
   241  0000                     _SSPSTAT	set	4039
   242  0000                     _T0CON	set	4053
   243  0000                     _T1CON	set	4045
   244  0000                     _T2CON	set	4042
   245  0000                     _T3CON	set	4017
   246  0000                     _TMR0H	set	4055
   247  0000                     _TMR0L	set	4054
   248  0000                     _TMR1H	set	4047
   249  0000                     _TMR1L	set	4046
   250  0000                     _TMR3H	set	4019
   251  0000                     _TMR3L	set	4018
   252  0000                     _TRISA	set	3986
   253  0000                     _TRISB	set	3987
   254  0000                     _TRISC	set	3988
   255  0000                     _TRISD	set	3989
   256  0000                     _TRISE	set	3990
   257  0000                     _ACKDT	set	32301
   258  0000                     _ACKEN	set	32300
   259  0000                     _ADIE	set	31982
   260  0000                     _INT1IE	set	32643
   261  0000                     _INT1IF	set	32640
   262  0000                     _PEIE	set	32662
   263  0000                     _PEN	set	32298
   264  0000                     _RCEN	set	32299
   265  0000                     _RSEN	set	32297
   266  0000                     _SEN	set	32296
   267  0000                     _TMR0IE	set	32661
   268  0000                     _TMR0IF	set	32658
   269  0000                     _TMR0ON	set	32431
   270  0000                     _TMR1IE	set	31976
   271  0000                     _TMR1IF	set	31984
   272  0000                     _TMR1ON	set	32360
   273  0000                     _TMR2IE	set	31977
   274  0000                     _TMR2IF	set	31985
   275  0000                     _TMR2ON	set	32338
   276  0000                     _TMR3IE	set	32001
   277  0000                     _TMR3IF	set	32009
   278  0000                     _TMR3ON	set	32136
   279  0000                     _TRISC3	set	31907
   280  0000                     _TRISC4	set	31908
   281  0000                     _nRBPU	set	32655
   282  00FAC2                     STR_21:
   283  00FAC2  25                 	db	37
   284  00FAC3  30                 	db	48	;'0'
   285  00FAC4  32                 	db	50	;'2'
   286  00FAC5  64                 	db	100	;'d'
   287  00FAC6  25                 	db	37
   288  00FAC7  73                 	db	115	;'s'
   289  00FAC8  20                 	db	32
   290  00FAC9  7C                 	db	124
   291  00FACA  20                 	db	32
   292  00FACB  25                 	db	37
   293  00FACC  30                 	db	48	;'0'
   294  00FACD  32                 	db	50	;'2'
   295  00FACE  64                 	db	100	;'d'
   296  00FACF  3A                 	db	58	;':'
   297  00FAD0  25                 	db	37
   298  00FAD1  30                 	db	48	;'0'
   299  00FAD2  32                 	db	50	;'2'
   300  00FAD3  64                 	db	100	;'d'
   301  00FAD4  3A                 	db	58	;':'
   302  00FAD5  25                 	db	37
   303  00FAD6  30                 	db	48	;'0'
   304  00FAD7  32                 	db	50	;'2'
   305  00FAD8  64                 	db	100	;'d'
   306  00FAD9  00                 	db	0
   307  00FADA                     STR_66:
   308  00FADA  28                 	db	40
   309  00FADB  64                 	db	100	;'d'
   310  00FADC  61                 	db	97	;'a'
   311  00FADD  74                 	db	116	;'t'
   312  00FADE  61                 	db	97	;'a'
   313  00FADF  3A                 	db	58	;':'
   314  00FAE0  20                 	db	32
   315  00FAE1  25                 	db	37
   316  00FAE2  75                 	db	117	;'u'
   317  00FAE3  2C                 	db	44
   318  00FAE4  20                 	db	32
   319  00FAE5  61                 	db	97	;'a'
   320  00FAE6  64                 	db	100	;'d'
   321  00FAE7  64                 	db	100	;'d'
   322  00FAE8  72                 	db	114	;'r'
   323  00FAE9  3A                 	db	58	;':'
   324  00FAEA  20                 	db	32
   325  00FAEB  25                 	db	37
   326  00FAEC  75                 	db	117	;'u'
   327  00FAED  29                 	db	41
   328  00FAEE  00                 	db	0
   329  00FAEF                     STR_112:
   330  00FAEF  44                 	db	68	;'D'
   331  00FAF0  20                 	db	32
   332  00FAF1  57                 	db	87	;'W'
   333  00FAF2  49                 	db	73	;'I'
   334  00FAF3  4C                 	db	76	;'L'
   335  00FAF4  4C                 	db	76	;'L'
   336  00FAF5  20                 	db	32
   337  00FAF6  52                 	db	82	;'R'
   338  00FAF7  45                 	db	69	;'E'
   339  00FAF8  54                 	db	84	;'T'
   340  00FAF9  55                 	db	85	;'U'
   341  00FAFA  52                 	db	82	;'R'
   342  00FAFB  4E                 	db	78	;'N'
   343  00FAFC  20                 	db	32
   344  00FAFD  20                 	db	32
   345  00FAFE  20                 	db	32
   346  00FAFF  20                 	db	32
   347  00FB00  00                 	db	0
   348  00FB01                     STR_120:
   349  00FB01  4F                 	db	79	;'O'
   350  00FB02  54                 	db	84	;'T'
   351  00FB03  48                 	db	72	;'H'
   352  00FB04  45                 	db	69	;'E'
   353  00FB05  52                 	db	82	;'R'
   354  00FB06  20                 	db	32
   355  00FB07  53                 	db	83	;'S'
   356  00FB08  45                 	db	69	;'E'
   357  00FB09  54                 	db	84	;'T'
   358  00FB0A  53                 	db	83	;'S'
   359  00FB0B  20                 	db	32
   360  00FB0C  52                 	db	82	;'R'
   361  00FB0D  41                 	db	65	;'A'
   362  00FB0E  35                 	db	53	;'5'
   363  00FB0F  20                 	db	32
   364  00FB10  20                 	db	32
   365  00FB11  20                 	db	32
   366  00FB12  00                 	db	0
   367  00FB13                     STR_81:
   368  00FB13  49                 	db	73	;'I'
   369  00FB14  52                 	db	82	;'R'
   370  00FB15  20                 	db	32
   371  00FB16  28                 	db	40
   372  00FB17  52                 	db	82	;'R'
   373  00FB18  45                 	db	69	;'E'
   374  00FB19  46                 	db	70	;'F'
   375  00FB1A  4C                 	db	76	;'L'
   376  00FB1B  45                 	db	69	;'E'
   377  00FB1C  43                 	db	67	;'C'
   378  00FB1D  29                 	db	41
   379  00FB1E  3A                 	db	58	;':'
   380  00FB1F  20                 	db	32
   381  00FB20  25                 	db	37
   382  00FB21  64                 	db	100	;'d'
   383  00FB22  20                 	db	32
   384  00FB23  20                 	db	32
   385  00FB24  00                 	db	0
   386  00FB25                     STR_79:
   387  00FB25  49                 	db	73	;'I'
   388  00FB26  52                 	db	82	;'R'
   389  00FB27  20                 	db	32
   390  00FB28  28                 	db	40
   391  00FB29  50                 	db	80	;'P'
   392  00FB2A  55                 	db	85	;'U'
   393  00FB2B  53                 	db	83	;'S'
   394  00FB2C  48                 	db	72	;'H'
   395  00FB2D  45                 	db	69	;'E'
   396  00FB2E  52                 	db	82	;'R'
   397  00FB2F  29                 	db	41
   398  00FB30  3A                 	db	58	;':'
   399  00FB31  20                 	db	32
   400  00FB32  25                 	db	37
   401  00FB33  64                 	db	100	;'d'
   402  00FB34  20                 	db	32
   403  00FB35  20                 	db	32
   404  00FB36  00                 	db	0
   405  00FB37                     STR_119:
   406  00FB37  53                 	db	83	;'S'
   407  00FB38  3A                 	db	58	;':'
   408  00FB39  20                 	db	32
   409  00FB3A  44                 	db	68	;'D'
   410  00FB3B  20                 	db	32
   411  00FB3C  57                 	db	87	;'W'
   412  00FB3D  49                 	db	73	;'I'
   413  00FB3E  4C                 	db	76	;'L'
   414  00FB3F  4C                 	db	76	;'L'
   415  00FB40  20                 	db	32
   416  00FB41  52                 	db	82	;'R'
   417  00FB42  45                 	db	69	;'E'
   418  00FB43  54                 	db	84	;'T'
   419  00FB44  55                 	db	85	;'U'
   420  00FB45  52                 	db	82	;'R'
   421  00FB46  4E                 	db	78	;'N'
   422  00FB47  20                 	db	32
   423  00FB48  00                 	db	0
   424  00FB49                     STR_122:
   425  00FB49  4F                 	db	79	;'O'
   426  00FB4A  54                 	db	84	;'T'
   427  00FB4B  48                 	db	72	;'H'
   428  00FB4C  45                 	db	69	;'E'
   429  00FB4D  52                 	db	82	;'R'
   430  00FB4E  3A                 	db	58	;':'
   431  00FB4F  20                 	db	32
   432  00FB50  43                 	db	67	;'C'
   433  00FB51  41                 	db	65	;'A'
   434  00FB52  4D                 	db	77	;'M'
   435  00FB53  20                 	db	32
   436  00FB54  54                 	db	84	;'T'
   437  00FB55  4F                 	db	79	;'O'
   438  00FB56  47                 	db	71	;'G'
   439  00FB57  47                 	db	71	;'G'
   440  00FB58  4C                 	db	76	;'L'
   441  00FB59  45                 	db	69	;'E'
   442  00FB5A  00                 	db	0
   443  00FB5B                     STR_128:
   444  00FB5B  4F                 	db	79	;'O'
   445  00FB5C  54                 	db	84	;'T'
   446  00FB5D  48                 	db	72	;'H'
   447  00FB5E  45                 	db	69	;'E'
   448  00FB5F  52                 	db	82	;'R'
   449  00FB60  20                 	db	32
   450  00FB61  53                 	db	83	;'S'
   451  00FB62  45                 	db	69	;'E'
   452  00FB63  54                 	db	84	;'T'
   453  00FB64  53                 	db	83	;'S'
   454  00FB65  20                 	db	32
   455  00FB66  50                 	db	80	;'P'
   456  00FB67  55                 	db	85	;'U'
   457  00FB68  53                 	db	83	;'S'
   458  00FB69  48                 	db	72	;'H'
   459  00FB6A  45                 	db	69	;'E'
   460  00FB6B  52                 	db	82	;'R'
   461  00FB6C  00                 	db	0
   462  00FB6D                     STR_3:
   463  00FB6D  2D                 	db	45
   464  00FB6E  2D                 	db	45
   465  00FB6F  20                 	db	32
   466  00FB70  4C                 	db	76	;'L'
   467  00FB71  4F                 	db	79	;'O'
   468  00FB72  47                 	db	71	;'G'
   469  00FB73  20                 	db	32
   470  00FB74  25                 	db	37
   471  00FB75  32                 	db	50	;'2'
   472  00FB76  64                 	db	100	;'d'
   473  00FB77  20                 	db	32
   474  00FB78  48                 	db	72	;'H'
   475  00FB79  45                 	db	69	;'E'
   476  00FB7A  52                 	db	82	;'R'
   477  00FB7B  45                 	db	69	;'E'
   478  00FB7C  2D                 	db	45
   479  00FB7D  2D                 	db	45
   480  00FB7E  00                 	db	0
   481  00FB7F                     STR_1:
   482  00FB7F  52                 	db	82	;'R'
   483  00FB80  45                 	db	69	;'E'
   484  00FB81  53                 	db	83	;'S'
   485  00FB82  55                 	db	85	;'U'
   486  00FB83  4C                 	db	76	;'L'
   487  00FB84  54                 	db	84	;'T'
   488  00FB85  53                 	db	83	;'S'
   489  00FB86  20                 	db	32
   490  00FB87  49                 	db	73	;'I'
   491  00FB88  4E                 	db	78	;'N'
   492  00FB89  20                 	db	32
   493  00FB8A  4C                 	db	76	;'L'
   494  00FB8B  4F                 	db	79	;'O'
   495  00FB8C  47                 	db	71	;'G'
   496  00FB8D  20                 	db	32
   497  00FB8E  25                 	db	37
   498  00FB8F  64                 	db	100	;'d'
   499  00FB90  00                 	db	0
   500  00FB91                     STR_103:
   501  00FB91  4D                 	db	77	;'M'
   502  00FB92  49                 	db	73	;'I'
   503  00FB93  44                 	db	68	;'D'
   504  00FB94  20                 	db	32
   505  00FB95  2D                 	db	45
   506  00FB96  2D                 	db	45
   507  00FB97  20                 	db	32
   508  00FB98  32                 	db	50	;'2'
   509  00FB99  73                 	db	115	;'s'
   510  00FB9A  20                 	db	32
   511  00FB9B  20                 	db	32
   512  00FB9C  20                 	db	32
   513  00FB9D  20                 	db	32
   514  00FB9E  20                 	db	32
   515  00FB9F  20                 	db	32
   516  00FBA0  20                 	db	32
   517  00FBA1  00                 	db	0
   518  00FBA2                     STR_106:
   519  00FBA2  44                 	db	68	;'D'
   520  00FBA3  52                 	db	82	;'R'
   521  00FBA4  4F                 	db	79	;'O'
   522  00FBA5  50                 	db	80	;'P'
   523  00FBA6  20                 	db	32
   524  00FBA7  2D                 	db	45
   525  00FBA8  2D                 	db	45
   526  00FBA9  20                 	db	32
   527  00FBAA  32                 	db	50	;'2'
   528  00FBAB  73                 	db	115	;'s'
   529  00FBAC  20                 	db	32
   530  00FBAD  20                 	db	32
   531  00FBAE  20                 	db	32
   532  00FBAF  20                 	db	32
   533  00FBB0  20                 	db	32
   534  00FBB1  20                 	db	32
   535  00FBB2  00                 	db	0
   536  00FBB3                     STR_100:
   537  00FBB3  4C                 	db	76	;'L'
   538  00FBB4  45                 	db	69	;'E'
   539  00FBB5  46                 	db	70	;'F'
   540  00FBB6  54                 	db	84	;'T'
   541  00FBB7  20                 	db	32
   542  00FBB8  2D                 	db	45
   543  00FBB9  2D                 	db	45
   544  00FBBA  20                 	db	32
   545  00FBBB  32                 	db	50	;'2'
   546  00FBBC  73                 	db	115	;'s'
   547  00FBBD  20                 	db	32
   548  00FBBE  20                 	db	32
   549  00FBBF  20                 	db	32
   550  00FBC0  20                 	db	32
   551  00FBC1  20                 	db	32
   552  00FBC2  20                 	db	32
   553  00FBC3  00                 	db	0
   554  00FBC4                     STR_105:
   555  00FBC4  4C                 	db	76	;'L'
   556  00FBC5  45                 	db	69	;'E'
   557  00FBC6  56                 	db	86	;'V'
   558  00FBC7  45                 	db	69	;'E'
   559  00FBC8  4C                 	db	76	;'L'
   560  00FBC9  20                 	db	32
   561  00FBCA  2D                 	db	45
   562  00FBCB  2D                 	db	45
   563  00FBCC  20                 	db	32
   564  00FBCD  32                 	db	50	;'2'
   565  00FBCE  73                 	db	115	;'s'
   566  00FBCF  20                 	db	32
   567  00FBD0  20                 	db	32
   568  00FBD1  20                 	db	32
   569  00FBD2  20                 	db	32
   570  00FBD3  20                 	db	32
   571  00FBD4  00                 	db	0
   572  00FBD5                     STR_99:
   573  00FBD5  52                 	db	82	;'R'
   574  00FBD6  49                 	db	73	;'I'
   575  00FBD7  47                 	db	71	;'G'
   576  00FBD8  48                 	db	72	;'H'
   577  00FBD9  54                 	db	84	;'T'
   578  00FBDA  20                 	db	32
   579  00FBDB  2D                 	db	45
   580  00FBDC  2D                 	db	45
   581  00FBDD  20                 	db	32
   582  00FBDE  32                 	db	50	;'2'
   583  00FBDF  73                 	db	115	;'s'
   584  00FBE0  20                 	db	32
   585  00FBE1  20                 	db	32
   586  00FBE2  20                 	db	32
   587  00FBE3  20                 	db	32
   588  00FBE4  20                 	db	32
   589  00FBE5  00                 	db	0
   590  00FBE6                     STR_98:
   591  00FBE6  4D                 	db	77	;'M'
   592  00FBE7  49                 	db	73	;'I'
   593  00FBE8  44                 	db	68	;'D'
   594  00FBE9  44                 	db	68	;'D'
   595  00FBEA  4C                 	db	76	;'L'
   596  00FBEB  45                 	db	69	;'E'
   597  00FBEC  20                 	db	32
   598  00FBED  2D                 	db	45
   599  00FBEE  2D                 	db	45
   600  00FBEF  20                 	db	32
   601  00FBF0  32                 	db	50	;'2'
   602  00FBF1  73                 	db	115	;'s'
   603  00FBF2  20                 	db	32
   604  00FBF3  20                 	db	32
   605  00FBF4  20                 	db	32
   606  00FBF5  20                 	db	32
   607  00FBF6  00                 	db	0
   608  00FBF7                     STR_113:
   609  00FBF7  4F                 	db	79	;'O'
   610  00FBF8  54                 	db	84	;'T'
   611  00FBF9  48                 	db	72	;'H'
   612  00FBFA  45                 	db	69	;'E'
   613  00FBFB  52                 	db	82	;'R'
   614  00FBFC  20                 	db	32
   615  00FBFD  53                 	db	83	;'S'
   616  00FBFE  45                 	db	69	;'E'
   617  00FBFF  54                 	db	84	;'T'
   618  00FC00  53                 	db	83	;'S'
   619  00FC01  20                 	db	32
   620  00FC02  44                 	db	68	;'D'
   621  00FC03  43                 	db	67	;'C'
   622  00FC04  20                 	db	32
   623  00FC05  20                 	db	32
   624  00FC06  20                 	db	32
   625  00FC07  00                 	db	0
   626  00FC08                     STR_125:
   627  00FC08  44                 	db	68	;'D'
   628  00FC09  20                 	db	32
   629  00FC0A  57                 	db	87	;'W'
   630  00FC0B  49                 	db	73	;'I'
   631  00FC0C  4C                 	db	76	;'L'
   632  00FC0D  4C                 	db	76	;'L'
   633  00FC0E  20                 	db	32
   634  00FC0F  52                 	db	82	;'R'
   635  00FC10  45                 	db	69	;'E'
   636  00FC11  54                 	db	84	;'T'
   637  00FC12  55                 	db	85	;'U'
   638  00FC13  52                 	db	82	;'R'
   639  00FC14  4E                 	db	78	;'N'
   640  00FC15  20                 	db	32
   641  00FC16  20                 	db	32
   642  00FC17  20                 	db	32
   643  00FC18  00                 	db	0
   644  00FC19                     STR_116:
   645  00FC19  35                 	db	53	;'5'
   646  00FC1A  3A                 	db	58	;':'
   647  00FC1B  48                 	db	72	;'H'
   648  00FC1C  7C                 	db	124
   649  00FC1D  36                 	db	54	;'6'
   650  00FC1E  3A                 	db	58	;':'
   651  00FC1F  4C                 	db	76	;'L'
   652  00FC20  7C                 	db	124
   653  00FC21  49                 	db	73	;'I'
   654  00FC22  52                 	db	82	;'R'
   655  00FC23  3A                 	db	58	;':'
   656  00FC24  25                 	db	37
   657  00FC25  64                 	db	100	;'d'
   658  00FC26  20                 	db	32
   659  00FC27  20                 	db	32
   660  00FC28  20                 	db	32
   661  00FC29  00                 	db	0
   662  00FC2A                     STR_114:
   663  00FC2A  31                 	db	49	;'1'
   664  00FC2B  3A                 	db	58	;':'
   665  00FC2C  20                 	db	32
   666  00FC2D  44                 	db	68	;'D'
   667  00FC2E  43                 	db	67	;'C'
   668  00FC2F  20                 	db	32
   669  00FC30  7C                 	db	124
   670  00FC31  20                 	db	32
   671  00FC32  41                 	db	65	;'A'
   672  00FC33  3A                 	db	58	;':'
   673  00FC34  20                 	db	32
   674  00FC35  41                 	db	65	;'A'
   675  00FC36  52                 	db	82	;'R'
   676  00FC37  4D                 	db	77	;'M'
   677  00FC38  20                 	db	32
   678  00FC39  20                 	db	32
   679  00FC3A  00                 	db	0
   680  00FC3B                     STR_101:
   681  00FC3B  4D                 	db	77	;'M'
   682  00FC3C  49                 	db	73	;'I'
   683  00FC3D  44                 	db	68	;'D'
   684  00FC3E  2D                 	db	45
   685  00FC3F  4C                 	db	76	;'L'
   686  00FC40  45                 	db	69	;'E'
   687  00FC41  46                 	db	70	;'F'
   688  00FC42  54                 	db	84	;'T'
   689  00FC43  20                 	db	32
   690  00FC44  2D                 	db	45
   691  00FC45  2D                 	db	45
   692  00FC46  20                 	db	32
   693  00FC47  32                 	db	50	;'2'
   694  00FC48  73                 	db	115	;'s'
   695  00FC49  20                 	db	32
   696  00FC4A  20                 	db	32
   697  00FC4B  00                 	db	0
   698  00FC4C                     STR_102:
   699  00FC4C  4D                 	db	77	;'M'
   700  00FC4D  49                 	db	73	;'I'
   701  00FC4E  44                 	db	68	;'D'
   702  00FC4F  2D                 	db	45
   703  00FC50  52                 	db	82	;'R'
   704  00FC51  49                 	db	73	;'I'
   705  00FC52  47                 	db	71	;'G'
   706  00FC53  48                 	db	72	;'H'
   707  00FC54  54                 	db	84	;'T'
   708  00FC55  20                 	db	32
   709  00FC56  2D                 	db	45
   710  00FC57  2D                 	db	45
   711  00FC58  20                 	db	32
   712  00FC59  32                 	db	50	;'2'
   713  00FC5A  73                 	db	115	;'s'
   714  00FC5B  20                 	db	32
   715  00FC5C  00                 	db	0
   716  00FC5D                     STR_72:
   717  00FC5D  41                 	db	65	;'A'
   718  00FC5E  4C                 	db	76	;'L'
   719  00FC5F  47                 	db	71	;'G'
   720  00FC60  31                 	db	49	;'1'
   721  00FC61  3A                 	db	58	;':'
   722  00FC62  20                 	db	32
   723  00FC63  39                 	db	57	;'9'
   724  00FC64  20                 	db	32
   725  00FC65  50                 	db	80	;'P'
   726  00FC66  4F                 	db	79	;'O'
   727  00FC67  50                 	db	80	;'P'
   728  00FC68  4E                 	db	78	;'N'
   729  00FC69  4F                 	db	79	;'O'
   730  00FC6A  54                 	db	84	;'T'
   731  00FC6B  41                 	db	65	;'A'
   732  00FC6C  42                 	db	66	;'B'
   733  00FC6D  00                 	db	0
   734  00FC6E                     STR_93:
   735  00FC6E  54                 	db	84	;'T'
   736  00FC6F  53                 	db	83	;'S'
   737  00FC70  54                 	db	84	;'T'
   738  00FC71  3A                 	db	58	;':'
   739  00FC72  20                 	db	32
   740  00FC73  43                 	db	67	;'C'
   741  00FC74  4F                 	db	79	;'O'
   742  00FC75  4E                 	db	78	;'N'
   743  00FC76  44                 	db	68	;'D'
   744  00FC77  20                 	db	32
   745  00FC78  53                 	db	83	;'S'
   746  00FC79  4F                 	db	79	;'O'
   747  00FC7A  4C                 	db	76	;'L'
   748  00FC7B  4E                 	db	78	;'N'
   749  00FC7C  27                 	db	39
   750  00FC7D  44                 	db	68	;'D'
   751  00FC7E  00                 	db	0
   752  00FC7F                     STR_95:
   753  00FC7F  54                 	db	84	;'T'
   754  00FC80  53                 	db	83	;'S'
   755  00FC81  54                 	db	84	;'T'
   756  00FC82  3A                 	db	58	;':'
   757  00FC83  20                 	db	32
   758  00FC84  50                 	db	80	;'P'
   759  00FC85  55                 	db	85	;'U'
   760  00FC86  53                 	db	83	;'S'
   761  00FC87  48                 	db	72	;'H'
   762  00FC88  20                 	db	32
   763  00FC89  53                 	db	83	;'S'
   764  00FC8A  4F                 	db	79	;'O'
   765  00FC8B  4C                 	db	76	;'L'
   766  00FC8C  4E                 	db	78	;'N'
   767  00FC8D  27                 	db	39
   768  00FC8E  44                 	db	68	;'D'
   769  00FC8F  00                 	db	0
   770  00FC90                     STR_68:
   771  00FC90  32                 	db	50	;'2'
   772  00FC91  2E                 	db	46
   773  00FC92  53                 	db	83	;'S'
   774  00FC93  4E                 	db	78	;'N'
   775  00FC94  52                 	db	82	;'R'
   776  00FC95  7C                 	db	124
   777  00FC96  34                 	db	52	;'4'
   778  00FC97  2E                 	db	46
   779  00FC98  48                 	db	72	;'H'
   780  00FC99  49                 	db	73	;'I'
   781  00FC9A  7C                 	db	124
   782  00FC9B  35                 	db	53	;'5'
   783  00FC9C  2E                 	db	46
   784  00FC9D  4D                 	db	77	;'M'
   785  00FC9E  45                 	db	69	;'E'
   786  00FC9F  44                 	db	68	;'D'
   787  00FCA0  00                 	db	0
   788  00FCA1                     STR_69:
   789  00FCA1  42                 	db	66	;'B'
   790  00FCA2  2E                 	db	46
   791  00FCA3  50                 	db	80	;'P'
   792  00FCA4  4C                 	db	76	;'L'
   793  00FCA5  41                 	db	65	;'A'
   794  00FCA6  7C                 	db	124
   795  00FCA7  38                 	db	56	;'8'
   796  00FCA8  2E                 	db	46
   797  00FCA9  53                 	db	83	;'S'
   798  00FCAA  56                 	db	86	;'V'
   799  00FCAB  7C                 	db	124
   800  00FCAC  39                 	db	57	;'9'
   801  00FCAD  2E                 	db	46
   802  00FCAE  42                 	db	66	;'B'
   803  00FCAF  4C                 	db	76	;'L'
   804  00FCB0  4B                 	db	75	;'K'
   805  00FCB1  00                 	db	0
   806  00FCB2                     STR_126:
   807  00FCB2  45                 	db	69	;'E'
   808  00FCB3  4C                 	db	76	;'L'
   809  00FCB4  53                 	db	83	;'S'
   810  00FCB5  45                 	db	69	;'E'
   811  00FCB6  20                 	db	32
   812  00FCB7  54                 	db	84	;'T'
   813  00FCB8  4F                 	db	79	;'O'
   814  00FCB9  47                 	db	71	;'G'
   815  00FCBA  47                 	db	71	;'G'
   816  00FCBB  4C                 	db	76	;'L'
   817  00FCBC  45                 	db	69	;'E'
   818  00FCBD  53                 	db	83	;'S'
   819  00FCBE  20                 	db	32
   820  00FCBF  41                 	db	65	;'A'
   821  00FCC0  52                 	db	82	;'R'
   822  00FCC1  4D                 	db	77	;'M'
   823  00FCC2  00                 	db	0
   824  00FCC3                     STR_111:
   825  00FCC3  54                 	db	84	;'T'
   826  00FCC4  53                 	db	83	;'S'
   827  00FCC5  54                 	db	84	;'T'
   828  00FCC6  3A                 	db	58	;':'
   829  00FCC7  20                 	db	32
   830  00FCC8  42                 	db	66	;'B'
   831  00FCC9  4F                 	db	79	;'O'
   832  00FCCA  54                 	db	84	;'T'
   833  00FCCB  48                 	db	72	;'H'
   834  00FCCC  20                 	db	32
   835  00FCCD  53                 	db	83	;'S'
   836  00FCCE  45                 	db	69	;'E'
   837  00FCCF  52                 	db	82	;'R'
   838  00FCD0  56                 	db	86	;'V'
   839  00FCD1  4F                 	db	79	;'O'
   840  00FCD2  53                 	db	83	;'S'
   841  00FCD3  00                 	db	0
   842  00FCD4                     STR_41:
   843  00FCD4  4C                 	db	76	;'L'
   844  00FCD5  4F                 	db	79	;'O'
   845  00FCD6  47                 	db	71	;'G'
   846  00FCD7  20                 	db	32
   847  00FCD8  31                 	db	49	;'1'
   848  00FCD9  20                 	db	32
   849  00FCDA  20                 	db	32
   850  00FCDB  20                 	db	32
   851  00FCDC  20                 	db	32
   852  00FCDD  20                 	db	32
   853  00FCDE  20                 	db	32
   854  00FCDF  20                 	db	32
   855  00FCE0  20                 	db	32
   856  00FCE1  20                 	db	32
   857  00FCE2  20                 	db	32
   858  00FCE3  20                 	db	32
   859  00FCE4  00                 	db	0
   860  00FCE5                     STR_40:
   861  00FCE5  4C                 	db	76	;'L'
   862  00FCE6  4F                 	db	79	;'O'
   863  00FCE7  47                 	db	71	;'G'
   864  00FCE8  20                 	db	32
   865  00FCE9  32                 	db	50	;'2'
   866  00FCEA  20                 	db	32
   867  00FCEB  20                 	db	32
   868  00FCEC  20                 	db	32
   869  00FCED  20                 	db	32
   870  00FCEE  20                 	db	32
   871  00FCEF  20                 	db	32
   872  00FCF0  20                 	db	32
   873  00FCF1  20                 	db	32
   874  00FCF2  20                 	db	32
   875  00FCF3  20                 	db	32
   876  00FCF4  20                 	db	32
   877  00FCF5  00                 	db	0
   878  00FCF6                     STR_44:
   879  00FCF6  4C                 	db	76	;'L'
   880  00FCF7  4F                 	db	79	;'O'
   881  00FCF8  47                 	db	71	;'G'
   882  00FCF9  20                 	db	32
   883  00FCFA  33                 	db	51	;'3'
   884  00FCFB  20                 	db	32
   885  00FCFC  20                 	db	32
   886  00FCFD  20                 	db	32
   887  00FCFE  20                 	db	32
   888  00FCFF  20                 	db	32
   889  00FD00  20                 	db	32
   890  00FD01  20                 	db	32
   891  00FD02  20                 	db	32
   892  00FD03  20                 	db	32
   893  00FD04  20                 	db	32
   894  00FD05  20                 	db	32
   895  00FD06  00                 	db	0
   896  00FD07                     STR_48:
   897  00FD07  4C                 	db	76	;'L'
   898  00FD08  4F                 	db	79	;'O'
   899  00FD09  47                 	db	71	;'G'
   900  00FD0A  20                 	db	32
   901  00FD0B  34                 	db	52	;'4'
   902  00FD0C  20                 	db	32
   903  00FD0D  20                 	db	32
   904  00FD0E  20                 	db	32
   905  00FD0F  20                 	db	32
   906  00FD10  20                 	db	32
   907  00FD11  20                 	db	32
   908  00FD12  20                 	db	32
   909  00FD13  20                 	db	32
   910  00FD14  20                 	db	32
   911  00FD15  20                 	db	32
   912  00FD16  20                 	db	32
   913  00FD17  00                 	db	0
   914  00FD18                     STR_36:
   915  00FD18  33                 	db	51	;'3'
   916  00FD19  2E                 	db	46
   917  00FD1A  20                 	db	32
   918  00FD1B  4C                 	db	76	;'L'
   919  00FD1C  4F                 	db	79	;'O'
   920  00FD1D  47                 	db	71	;'G'
   921  00FD1E  53                 	db	83	;'S'
   922  00FD1F  20                 	db	32
   923  00FD20  20                 	db	32
   924  00FD21  20                 	db	32
   925  00FD22  20                 	db	32
   926  00FD23  20                 	db	32
   927  00FD24  20                 	db	32
   928  00FD25  20                 	db	32
   929  00FD26  20                 	db	32
   930  00FD27  20                 	db	32
   931  00FD28  00                 	db	0
   932  00FD29                     STR_32:
   933  00FD29  32                 	db	50	;'2'
   934  00FD2A  2E                 	db	46
   935  00FD2B  20                 	db	32
   936  00FD2C  53                 	db	83	;'S'
   937  00FD2D  4F                 	db	79	;'O'
   938  00FD2E  52                 	db	82	;'R'
   939  00FD2F  54                 	db	84	;'T'
   940  00FD30  20                 	db	32
   941  00FD31  20                 	db	32
   942  00FD32  20                 	db	32
   943  00FD33  20                 	db	32
   944  00FD34  20                 	db	32
   945  00FD35  20                 	db	32
   946  00FD36  20                 	db	32
   947  00FD37  20                 	db	32
   948  00FD38  20                 	db	32
   949  00FD39  00                 	db	0
   950  00FD3A                     STR_33:
   951  00FD3A  31                 	db	49	;'1'
   952  00FD3B  2E                 	db	46
   953  00FD3C  20                 	db	32
   954  00FD3D  44                 	db	68	;'D'
   955  00FD3E  41                 	db	65	;'A'
   956  00FD3F  54                 	db	84	;'T'
   957  00FD40  45                 	db	69	;'E'
   958  00FD41  2F                 	db	47
   959  00FD42  54                 	db	84	;'T'
   960  00FD43  49                 	db	73	;'I'
   961  00FD44  4D                 	db	77	;'M'
   962  00FD45  45                 	db	69	;'E'
   963  00FD46  20                 	db	32
   964  00FD47  20                 	db	32
   965  00FD48  20                 	db	32
   966  00FD49  20                 	db	32
   967  00FD4A  00                 	db	0
   968  00FD4B                     STR_24:
   969  00FD4B  20                 	db	32
   970  00FD4C  2D                 	db	45
   971  00FD4D  2D                 	db	45
   972  00FD4E  20                 	db	32
   973  00FD4F  50                 	db	80	;'P'
   974  00FD50  4F                 	db	79	;'O'
   975  00FD51  50                 	db	80	;'P'
   976  00FD52  20                 	db	32
   977  00FD53  20                 	db	32
   978  00FD54  43                 	db	67	;'C'
   979  00FD55  41                 	db	65	;'A'
   980  00FD56  4E                 	db	78	;'N'
   981  00FD57  20                 	db	32
   982  00FD58  2D                 	db	45
   983  00FD59  2D                 	db	45
   984  00FD5A  20                 	db	32
   985  00FD5B  00                 	db	0
   986  00FD5C                     STR_26:
   987  00FD5C  20                 	db	32
   988  00FD5D  2D                 	db	45
   989  00FD5E  2D                 	db	45
   990  00FD5F  20                 	db	32
   991  00FD60  53                 	db	83	;'S'
   992  00FD61  4F                 	db	79	;'O'
   993  00FD62  55                 	db	85	;'U'
   994  00FD63  50                 	db	80	;'P'
   995  00FD64  20                 	db	32
   996  00FD65  43                 	db	67	;'C'
   997  00FD66  41                 	db	65	;'A'
   998  00FD67  4E                 	db	78	;'N'
   999  00FD68  20                 	db	32
  1000  00FD69  2D                 	db	45
  1001  00FD6A  2D                 	db	45
  1002  00FD6B  20                 	db	32
  1003  00FD6C  00                 	db	0
  1004  00FD6D                     STR_28:
  1005  00FD6D  2D                 	db	45
  1006  00FD6E  2D                 	db	45
  1007  00FD6F  20                 	db	32
  1008  00FD70  54                 	db	84	;'T'
  1009  00FD71  4F                 	db	79	;'O'
  1010  00FD72  54                 	db	84	;'T'
  1011  00FD73  41                 	db	65	;'A'
  1012  00FD74  4C                 	db	76	;'L'
  1013  00FD75  20                 	db	32
  1014  00FD76  43                 	db	67	;'C'
  1015  00FD77  41                 	db	65	;'A'
  1016  00FD78  4E                 	db	78	;'N'
  1017  00FD79  53                 	db	83	;'S'
  1018  00FD7A  20                 	db	32
  1019  00FD7B  2D                 	db	45
  1020  00FD7C  2D                 	db	45
  1021  00FD7D  00                 	db	0
  1022  00FD7E                     STR_39:
  1023  00FD7E  4C                 	db	76	;'L'
  1024  00FD7F  4F                 	db	79	;'O'
  1025  00FD80  47                 	db	71	;'G'
  1026  00FD81  20                 	db	32
  1027  00FD82  31                 	db	49	;'1'
  1028  00FD83  20                 	db	32
  1029  00FD84  20                 	db	32
  1030  00FD85  20                 	db	32
  1031  00FD86  20                 	db	32
  1032  00FD87  20                 	db	32
  1033  00FD88  20                 	db	32
  1034  00FD89  20                 	db	32
  1035  00FD8A  20                 	db	32
  1036  00FD8B  20                 	db	32
  1037  00FD8C  20                 	db	32
  1038  00FD8D  3C                 	db	60	;'<'
  1039  00FD8E  00                 	db	0
  1040  00FD8F                     STR_42:
  1041  00FD8F  4C                 	db	76	;'L'
  1042  00FD90  4F                 	db	79	;'O'
  1043  00FD91  47                 	db	71	;'G'
  1044  00FD92  20                 	db	32
  1045  00FD93  32                 	db	50	;'2'
  1046  00FD94  20                 	db	32
  1047  00FD95  20                 	db	32
  1048  00FD96  20                 	db	32
  1049  00FD97  20                 	db	32
  1050  00FD98  20                 	db	32
  1051  00FD99  20                 	db	32
  1052  00FD9A  20                 	db	32
  1053  00FD9B  20                 	db	32
  1054  00FD9C  20                 	db	32
  1055  00FD9D  20                 	db	32
  1056  00FD9E  3C                 	db	60	;'<'
  1057  00FD9F  00                 	db	0
  1058  00FDA0                     STR_46:
  1059  00FDA0  4C                 	db	76	;'L'
  1060  00FDA1  4F                 	db	79	;'O'
  1061  00FDA2  47                 	db	71	;'G'
  1062  00FDA3  20                 	db	32
  1063  00FDA4  33                 	db	51	;'3'
  1064  00FDA5  20                 	db	32
  1065  00FDA6  20                 	db	32
  1066  00FDA7  20                 	db	32
  1067  00FDA8  20                 	db	32
  1068  00FDA9  20                 	db	32
  1069  00FDAA  20                 	db	32
  1070  00FDAB  20                 	db	32
  1071  00FDAC  20                 	db	32
  1072  00FDAD  20                 	db	32
  1073  00FDAE  20                 	db	32
  1074  00FDAF  3C                 	db	60	;'<'
  1075  00FDB0  00                 	db	0
  1076  00FDB1                     STR_50:
  1077  00FDB1  4C                 	db	76	;'L'
  1078  00FDB2  4F                 	db	79	;'O'
  1079  00FDB3  47                 	db	71	;'G'
  1080  00FDB4  20                 	db	32
  1081  00FDB5  34                 	db	52	;'4'
  1082  00FDB6  20                 	db	32
  1083  00FDB7  20                 	db	32
  1084  00FDB8  20                 	db	32
  1085  00FDB9  20                 	db	32
  1086  00FDBA  20                 	db	32
  1087  00FDBB  20                 	db	32
  1088  00FDBC  20                 	db	32
  1089  00FDBD  20                 	db	32
  1090  00FDBE  20                 	db	32
  1091  00FDBF  20                 	db	32
  1092  00FDC0  3C                 	db	60	;'<'
  1093  00FDC1  00                 	db	0
  1094  00FDC2                     STR_38:
  1095  00FDC2  33                 	db	51	;'3'
  1096  00FDC3  2E                 	db	46
  1097  00FDC4  20                 	db	32
  1098  00FDC5  4C                 	db	76	;'L'
  1099  00FDC6  4F                 	db	79	;'O'
  1100  00FDC7  47                 	db	71	;'G'
  1101  00FDC8  53                 	db	83	;'S'
  1102  00FDC9  20                 	db	32
  1103  00FDCA  20                 	db	32
  1104  00FDCB  20                 	db	32
  1105  00FDCC  20                 	db	32
  1106  00FDCD  20                 	db	32
  1107  00FDCE  20                 	db	32
  1108  00FDCF  20                 	db	32
  1109  00FDD0  20                 	db	32
  1110  00FDD1  3C                 	db	60	;'<'
  1111  00FDD2  00                 	db	0
  1112  00FDD3                     STR_34:
  1113  00FDD3  32                 	db	50	;'2'
  1114  00FDD4  2E                 	db	46
  1115  00FDD5  20                 	db	32
  1116  00FDD6  53                 	db	83	;'S'
  1117  00FDD7  4F                 	db	79	;'O'
  1118  00FDD8  52                 	db	82	;'R'
  1119  00FDD9  54                 	db	84	;'T'
  1120  00FDDA  20                 	db	32
  1121  00FDDB  20                 	db	32
  1122  00FDDC  20                 	db	32
  1123  00FDDD  20                 	db	32
  1124  00FDDE  20                 	db	32
  1125  00FDDF  20                 	db	32
  1126  00FDE0  20                 	db	32
  1127  00FDE1  20                 	db	32
  1128  00FDE2  3C                 	db	60	;'<'
  1129  00FDE3  00                 	db	0
  1130  00FDE4                     STR_31:
  1131  00FDE4  31                 	db	49	;'1'
  1132  00FDE5  2E                 	db	46
  1133  00FDE6  20                 	db	32
  1134  00FDE7  44                 	db	68	;'D'
  1135  00FDE8  41                 	db	65	;'A'
  1136  00FDE9  54                 	db	84	;'T'
  1137  00FDEA  45                 	db	69	;'E'
  1138  00FDEB  2F                 	db	47
  1139  00FDEC  54                 	db	84	;'T'
  1140  00FDED  49                 	db	73	;'I'
  1141  00FDEE  4D                 	db	77	;'M'
  1142  00FDEF  45                 	db	69	;'E'
  1143  00FDF0  20                 	db	32
  1144  00FDF1  20                 	db	32
  1145  00FDF2  20                 	db	32
  1146  00FDF3  3C                 	db	60	;'<'
  1147  00FDF4  00                 	db	0
  1148  00FDF5                     STR_6:
  1149  00FDF5  50                 	db	80	;'P'
  1150  00FDF6  41                 	db	65	;'A'
  1151  00FDF7  55                 	db	85	;'U'
  1152  00FDF8  53                 	db	83	;'S'
  1153  00FDF9  45                 	db	69	;'E'
  1154  00FDFA  20                 	db	32
  1155  00FDFB  3C                 	db	60	;'<'
  1156  00FDFC  20                 	db	32
  1157  00FDFD  7C                 	db	124
  1158  00FDFE  20                 	db	32
  1159  00FDFF  42                 	db	66	;'B'
  1160  00FE00  41                 	db	65	;'A'
  1161  00FE01  43                 	db	67	;'C'
  1162  00FE02  4B                 	db	75	;'K'
  1163  00FE03  20                 	db	32
  1164  00FE04  3E                 	db	62	;'>'
  1165  00FE05  00                 	db	0
  1166  00FE06                     STR_30:
  1167  00FE06  50                 	db	80	;'P'
  1168  00FE07  55                 	db	85	;'U'
  1169  00FE08  53                 	db	83	;'S'
  1170  00FE09  48                 	db	72	;'H'
  1171  00FE0A  20                 	db	32
  1172  00FE0B  54                 	db	84	;'T'
  1173  00FE0C  4F                 	db	79	;'O'
  1174  00FE0D  20                 	db	32
  1175  00FE0E  43                 	db	67	;'C'
  1176  00FE0F  4F                 	db	79	;'O'
  1177  00FE10  4E                 	db	78	;'N'
  1178  00FE11  54                 	db	84	;'T'
  1179  00FE12  49                 	db	73	;'I'
  1180  00FE13  4E                 	db	78	;'N'
  1181  00FE14  55                 	db	85	;'U'
  1182  00FE15  45                 	db	69	;'E'
  1183  00FE16  00                 	db	0
  1184  00FE17                     STR_27:
  1185  00FE17  4E                 	db	78	;'N'
  1186  00FE18  4C                 	db	76	;'L'
  1187  00FE19  41                 	db	65	;'A'
  1188  00FE1A  42                 	db	66	;'B'
  1189  00FE1B  3A                 	db	58	;':'
  1190  00FE1C  20                 	db	32
  1191  00FE1D  25                 	db	37
  1192  00FE1E  64                 	db	100	;'d'
  1193  00FE1F  7C                 	db	124
  1194  00FE20  4C                 	db	76	;'L'
  1195  00FE21  41                 	db	65	;'A'
  1196  00FE22  42                 	db	66	;'B'
  1197  00FE23  3A                 	db	58	;':'
  1198  00FE24  20                 	db	32
  1199  00FE25  25                 	db	37
  1200  00FE26  64                 	db	100	;'d'
  1201  00FE27  00                 	db	0
  1202  00FE28                     STR_25:
  1203  00FE28  4E                 	db	78	;'N'
  1204  00FE29  54                 	db	84	;'T'
  1205  00FE2A  41                 	db	65	;'A'
  1206  00FE2B  42                 	db	66	;'B'
  1207  00FE2C  3A                 	db	58	;':'
  1208  00FE2D  20                 	db	32
  1209  00FE2E  25                 	db	37
  1210  00FE2F  64                 	db	100	;'d'
  1211  00FE30  7C                 	db	124
  1212  00FE31  54                 	db	84	;'T'
  1213  00FE32  41                 	db	65	;'A'
  1214  00FE33  42                 	db	66	;'B'
  1215  00FE34  3A                 	db	58	;':'
  1216  00FE35  20                 	db	32
  1217  00FE36  25                 	db	37
  1218  00FE37  64                 	db	100	;'d'
  1219  00FE38  00                 	db	0
  1220  00FE39                     STR_84:
  1221  00FE39  4D                 	db	77	;'M'
  1222  00FE3A  41                 	db	65	;'A'
  1223  00FE3B  47                 	db	71	;'G'
  1224  00FE3C  5F                 	db	95	;'_'
  1225  00FE3D  73                 	db	115	;'s'
  1226  00FE3E  69                 	db	105	;'i'
  1227  00FE3F  67                 	db	103	;'g'
  1228  00FE40  6E                 	db	110	;'n'
  1229  00FE41  61                 	db	97	;'a'
  1230  00FE42  6C                 	db	108	;'l'
  1231  00FE43  3A                 	db	58	;':'
  1232  00FE44  20                 	db	32
  1233  00FE45  25                 	db	37
  1234  00FE46  64                 	db	100	;'d'
  1235  00FE47  20                 	db	32
  1236  00FE48  00                 	db	0
  1237  00FE49                     STR_104:
  1238  00FE49  54                 	db	84	;'T'
  1239  00FE4A  53                 	db	83	;'S'
  1240  00FE4B  54                 	db	84	;'T'
  1241  00FE4C  3A                 	db	58	;':'
  1242  00FE4D  20                 	db	32
  1243  00FE4E  54                 	db	84	;'T'
  1244  00FE4F  49                 	db	73	;'I'
  1245  00FE50  4C                 	db	76	;'L'
  1246  00FE51  54                 	db	84	;'T'
  1247  00FE52  20                 	db	32
  1248  00FE53  53                 	db	83	;'S'
  1249  00FE54  45                 	db	69	;'E'
  1250  00FE55  52                 	db	82	;'R'
  1251  00FE56  56                 	db	86	;'V'
  1252  00FE57  4F                 	db	79	;'O'
  1253  00FE58  00                 	db	0
  1254  00FE59                     STR_64:
  1255  00FE59  53                 	db	83	;'S'
  1256  00FE5A  4F                 	db	79	;'O'
  1257  00FE5B  52                 	db	82	;'R'
  1258  00FE5C  54                 	db	84	;'T'
  1259  00FE5D  49                 	db	73	;'I'
  1260  00FE5E  4E                 	db	78	;'N'
  1261  00FE5F  47                 	db	71	;'G'
  1262  00FE60  2E                 	db	46
  1263  00FE61  2E                 	db	46
  1264  00FE62  2E                 	db	46
  1265  00FE63  20                 	db	32
  1266  00FE64  20                 	db	32
  1267  00FE65  20                 	db	32
  1268  00FE66  20                 	db	32
  1269  00FE67  20                 	db	32
  1270  00FE68  00                 	db	0
  1271  00FE69                     STR_65:
  1272  00FE69  54                 	db	84	;'T'
  1273  00FE6A  49                 	db	73	;'I'
  1274  00FE6B  4D                 	db	77	;'M'
  1275  00FE6C  45                 	db	69	;'E'
  1276  00FE6D  20                 	db	32
  1277  00FE6E  25                 	db	37
  1278  00FE6F  64                 	db	100	;'d'
  1279  00FE70  3A                 	db	58	;':'
  1280  00FE71  25                 	db	37
  1281  00FE72  30                 	db	48	;'0'
  1282  00FE73  32                 	db	50	;'2'
  1283  00FE74  64                 	db	100	;'d'
  1284  00FE75  20                 	db	32
  1285  00FE76  20                 	db	32
  1286  00FE77  20                 	db	32
  1287  00FE78  00                 	db	0
  1288  00FE79                     STR_4:
  1289  00FE79  44                 	db	68	;'D'
  1290  00FE7A  49                 	db	73	;'I'
  1291  00FE7B  44                 	db	68	;'D'
  1292  00FE7C  4E                 	db	78	;'N'
  1293  00FE7D  27                 	db	39
  1294  00FE7E  54                 	db	84	;'T'
  1295  00FE7F  20                 	db	32
  1296  00FE80  43                 	db	67	;'C'
  1297  00FE81  4F                 	db	79	;'O'
  1298  00FE82  4D                 	db	77	;'M'
  1299  00FE83  50                 	db	80	;'P'
  1300  00FE84  4C                 	db	76	;'L'
  1301  00FE85  45                 	db	69	;'E'
  1302  00FE86  54                 	db	84	;'T'
  1303  00FE87  45                 	db	69	;'E'
  1304  00FE88  00                 	db	0
  1305  00FE89                     STR_121:
  1306  00FE89  44                 	db	68	;'D'
  1307  00FE8A  3A                 	db	58	;':'
  1308  00FE8B  52                 	db	82	;'R'
  1309  00FE8C  45                 	db	69	;'E'
  1310  00FE8D  54                 	db	84	;'T'
  1311  00FE8E  7C                 	db	124
  1312  00FE8F  32                 	db	50	;'2'
  1313  00FE90  3A                 	db	58	;':'
  1314  00FE91  43                 	db	67	;'C'
  1315  00FE92  20                 	db	32
  1316  00FE93  25                 	db	37
  1317  00FE94  64                 	db	100	;'d'
  1318  00FE95  20                 	db	32
  1319  00FE96  20                 	db	32
  1320  00FE97  00                 	db	0
  1321  00FE98                     STR_110:
  1322  00FE98  43                 	db	67	;'C'
  1323  00FE99  41                 	db	65	;'A'
  1324  00FE9A  4D                 	db	77	;'M'
  1325  00FE9B  20                 	db	32
  1326  00FE9C  44                 	db	68	;'D'
  1327  00FE9D  57                 	db	87	;'W'
  1328  00FE9E  4E                 	db	78	;'N'
  1329  00FE9F  20                 	db	32
  1330  00FEA0  7C                 	db	124
  1331  00FEA1  52                 	db	82	;'R'
  1332  00FEA2  43                 	db	67	;'C'
  1333  00FEA3  30                 	db	48	;'0'
  1334  00FEA4  3D                 	db	61	;'='
  1335  00FEA5  30                 	db	48	;'0'
  1336  00FEA6  00                 	db	0
  1337  00FEA7                     STR_109:
  1338  00FEA7  43                 	db	67	;'C'
  1339  00FEA8  41                 	db	65	;'A'
  1340  00FEA9  4D                 	db	77	;'M'
  1341  00FEAA  20                 	db	32
  1342  00FEAB  55                 	db	85	;'U'
  1343  00FEAC  50                 	db	80	;'P'
  1344  00FEAD  20                 	db	32
  1345  00FEAE  20                 	db	32
  1346  00FEAF  7C                 	db	124
  1347  00FEB0  52                 	db	82	;'R'
  1348  00FEB1  43                 	db	67	;'C'
  1349  00FEB2  30                 	db	48	;'0'
  1350  00FEB3  3D                 	db	61	;'='
  1351  00FEB4  31                 	db	49	;'1'
  1352  00FEB5  00                 	db	0
  1353  00FEB6                     STR_83:
  1354  00FEB6  54                 	db	84	;'T'
  1355  00FEB7  53                 	db	83	;'S'
  1356  00FEB8  54                 	db	84	;'T'
  1357  00FEB9  3A                 	db	58	;':'
  1358  00FEBA  20                 	db	32
  1359  00FEBB  4D                 	db	77	;'M'
  1360  00FEBC  41                 	db	65	;'A'
  1361  00FEBD  47                 	db	71	;'G'
  1362  00FEBE  4E                 	db	78	;'N'
  1363  00FEBF  45                 	db	69	;'E'
  1364  00FEC0  54                 	db	84	;'T'
  1365  00FEC1  49                 	db	73	;'I'
  1366  00FEC2  53                 	db	83	;'S'
  1367  00FEC3  4D                 	db	77	;'M'
  1368  00FEC4  00                 	db	0
  1369  00FEC5                     STR_108:
  1370  00FEC5  54                 	db	84	;'T'
  1371  00FEC6  53                 	db	83	;'S'
  1372  00FEC7  54                 	db	84	;'T'
  1373  00FEC8  3A                 	db	58	;':'
  1374  00FEC9  20                 	db	32
  1375  00FECA  43                 	db	67	;'C'
  1376  00FECB  41                 	db	65	;'A'
  1377  00FECC  4D                 	db	77	;'M'
  1378  00FECD  20                 	db	32
  1379  00FECE  53                 	db	83	;'S'
  1380  00FECF  45                 	db	69	;'E'
  1381  00FED0  52                 	db	82	;'R'
  1382  00FED1  56                 	db	86	;'V'
  1383  00FED2  4F                 	db	79	;'O'
  1384  00FED3  00                 	db	0
  1385  00FED4                     STR_97:
  1386  00FED4  54                 	db	84	;'T'
  1387  00FED5  53                 	db	83	;'S'
  1388  00FED6  54                 	db	84	;'T'
  1389  00FED7  3A                 	db	58	;':'
  1390  00FED8  20                 	db	32
  1391  00FED9  50                 	db	80	;'P'
  1392  00FEDA  41                 	db	65	;'A'
  1393  00FEDB  4E                 	db	78	;'N'
  1394  00FEDC  20                 	db	32
  1395  00FEDD  53                 	db	83	;'S'
  1396  00FEDE  45                 	db	69	;'E'
  1397  00FEDF  52                 	db	82	;'R'
  1398  00FEE0  56                 	db	86	;'V'
  1399  00FEE1  4F                 	db	79	;'O'
  1400  00FEE2  00                 	db	0
  1401  00FEE3                     STR_75:
  1402  00FEE3  41                 	db	65	;'A'
  1403  00FEE4  4C                 	db	76	;'L'
  1404  00FEE5  47                 	db	71	;'G'
  1405  00FEE6  34                 	db	52	;'4'
  1406  00FEE7  3A                 	db	58	;':'
  1407  00FEE8  20                 	db	32
  1408  00FEE9  41                 	db	65	;'A'
  1409  00FEEA  4C                 	db	76	;'L'
  1410  00FEEB  4C                 	db	76	;'L'
  1411  00FEEC  20                 	db	32
  1412  00FEED  43                 	db	67	;'C'
  1413  00FEEE  41                 	db	65	;'A'
  1414  00FEEF  4E                 	db	78	;'N'
  1415  00FEF0  53                 	db	83	;'S'
  1416  00FEF1  00                 	db	0
  1417  00FEF2                     STR_91:
  1418  00FEF2  54                 	db	84	;'T'
  1419  00FEF3  53                 	db	83	;'S'
  1420  00FEF4  54                 	db	84	;'T'
  1421  00FEF5  3A                 	db	58	;':'
  1422  00FEF6  20                 	db	32
  1423  00FEF7  44                 	db	68	;'D'
  1424  00FEF8  43                 	db	67	;'C'
  1425  00FEF9  20                 	db	32
  1426  00FEFA  4D                 	db	77	;'M'
  1427  00FEFB  4F                 	db	79	;'O'
  1428  00FEFC  54                 	db	84	;'T'
  1429  00FEFD  4F                 	db	79	;'O'
  1430  00FEFE  52                 	db	82	;'R'
  1431  00FEFF  53                 	db	83	;'S'
  1432  00FF00  00                 	db	0
  1433  00FF01                     STR_70:
  1434  00FF01  41                 	db	65	;'A'
  1435  00FF02  4C                 	db	76	;'L'
  1436  00FF03  47                 	db	71	;'G'
  1437  00FF04  4F                 	db	79	;'O'
  1438  00FF05  52                 	db	82	;'R'
  1439  00FF06  49                 	db	73	;'I'
  1440  00FF07  54                 	db	84	;'T'
  1441  00FF08  48                 	db	72	;'H'
  1442  00FF09  4D                 	db	77	;'M'
  1443  00FF0A  20                 	db	32
  1444  00FF0B  54                 	db	84	;'T'
  1445  00FF0C  45                 	db	69	;'E'
  1446  00FF0D  53                 	db	83	;'S'
  1447  00FF0E  54                 	db	84	;'T'
  1448  00FF0F  00                 	db	0
  1449  00FF10                     STR_92:
  1450  00FF10  50                 	db	80	;'P'
  1451  00FF11  49                 	db	73	;'I'
  1452  00FF12  4E                 	db	78	;'N'
  1453  00FF13  20                 	db	32
  1454  00FF14  52                 	db	82	;'R'
  1455  00FF15  41                 	db	65	;'A'
  1456  00FF16  35                 	db	53	;'5'
  1457  00FF17  20                 	db	32
  1458  00FF18  48                 	db	72	;'H'
  1459  00FF19  49                 	db	73	;'I'
  1460  00FF1A  47                 	db	71	;'G'
  1461  00FF1B  48                 	db	72	;'H'
  1462  00FF1C  2E                 	db	46
  1463  00FF1D  00                 	db	0
  1464  00FF1E                     STR_73:
  1465  00FF1E  41                 	db	65	;'A'
  1466  00FF1F  4C                 	db	76	;'L'
  1467  00FF20  47                 	db	71	;'G'
  1468  00FF21  32                 	db	50	;'2'
  1469  00FF22  3A                 	db	58	;':'
  1470  00FF23  20                 	db	32
  1471  00FF24  31                 	db	49	;'1'
  1472  00FF25  32                 	db	50	;'2'
  1473  00FF26  20                 	db	32
  1474  00FF27  43                 	db	67	;'C'
  1475  00FF28  41                 	db	65	;'A'
  1476  00FF29  4E                 	db	78	;'N'
  1477  00FF2A  53                 	db	83	;'S'
  1478  00FF2B  00                 	db	0
  1479  00FF2C                     STR_76:
  1480  00FF2C  41                 	db	65	;'A'
  1481  00FF2D  4C                 	db	76	;'L'
  1482  00FF2E  47                 	db	71	;'G'
  1483  00FF2F  35                 	db	53	;'5'
  1484  00FF30  3A                 	db	58	;':'
  1485  00FF31  20                 	db	32
  1486  00FF32  4E                 	db	78	;'N'
  1487  00FF33  4F                 	db	79	;'O'
  1488  00FF34  20                 	db	32
  1489  00FF35  43                 	db	67	;'C'
  1490  00FF36  41                 	db	65	;'A'
  1491  00FF37  4E                 	db	78	;'N'
  1492  00FF38  53                 	db	83	;'S'
  1493  00FF39  00                 	db	0
  1494  00FF3A                     STR_71:
  1495  00FF3A  50                 	db	80	;'P'
  1496  00FF3B  55                 	db	85	;'U'
  1497  00FF3C  53                 	db	83	;'S'
  1498  00FF3D  48                 	db	72	;'H'
  1499  00FF3E  20                 	db	32
  1500  00FF3F  54                 	db	84	;'T'
  1501  00FF40  4F                 	db	79	;'O'
  1502  00FF41  20                 	db	32
  1503  00FF42  53                 	db	83	;'S'
  1504  00FF43  54                 	db	84	;'T'
  1505  00FF44  41                 	db	65	;'A'
  1506  00FF45  52                 	db	82	;'R'
  1507  00FF46  54                 	db	84	;'T'
  1508  00FF47  00                 	db	0
  1509  00FF48                     STR_23:
  1510  00FF48  25                 	db	37
  1511  00FF49  64                 	db	100	;'d'
  1512  00FF4A  20                 	db	32
  1513  00FF4B  4D                 	db	77	;'M'
  1514  00FF4C  49                 	db	73	;'I'
  1515  00FF4D  4E                 	db	78	;'N'
  1516  00FF4E  20                 	db	32
  1517  00FF4F  25                 	db	37
  1518  00FF50  64                 	db	100	;'d'
  1519  00FF51  20                 	db	32
  1520  00FF52  53                 	db	83	;'S'
  1521  00FF53  45                 	db	69	;'E'
  1522  00FF54  43                 	db	67	;'C'
  1523  00FF55  00                 	db	0
  1524  00FF56                     STR_2:
  1525  00FF56  54                 	db	84	;'T'
  1526  00FF57  49                 	db	73	;'I'
  1527  00FF58  4D                 	db	77	;'M'
  1528  00FF59  45                 	db	69	;'E'
  1529  00FF5A  3A                 	db	58	;':'
  1530  00FF5B  20                 	db	32
  1531  00FF5C  25                 	db	37
  1532  00FF5D  64                 	db	100	;'d'
  1533  00FF5E  3A                 	db	58	;':'
  1534  00FF5F  25                 	db	37
  1535  00FF60  30                 	db	48	;'0'
  1536  00FF61  32                 	db	50	;'2'
  1537  00FF62  64                 	db	100	;'d'
  1538  00FF63  00                 	db	0
  1539  00FF64                     STR_74:
  1540  00FF64  41                 	db	65	;'A'
  1541  00FF65  4C                 	db	76	;'L'
  1542  00FF66  47                 	db	71	;'G'
  1543  00FF67  33                 	db	51	;'3'
  1544  00FF68  3A                 	db	58	;':'
  1545  00FF69  20                 	db	32
  1546  00FF6A  31                 	db	49	;'1'
  1547  00FF6B  20                 	db	32
  1548  00FF6C  43                 	db	67	;'C'
  1549  00FF6D  41                 	db	65	;'A'
  1550  00FF6E  4E                 	db	78	;'N'
  1551  00FF6F  00                 	db	0
  1552  00FF70                     STR_94:
  1553  00FF70  50                 	db	80	;'P'
  1554  00FF71  49                 	db	73	;'I'
  1555  00FF72  4E                 	db	78	;'N'
  1556  00FF73  20                 	db	32
  1557  00FF74  52                 	db	82	;'R'
  1558  00FF75  41                 	db	65	;'A'
  1559  00FF76  33                 	db	51	;'3'
  1560  00FF77  2E                 	db	46
  1561  00FF78  2E                 	db	46
  1562  00FF79  2E                 	db	46
  1563  00FF7A  00                 	db	0
  1564  00FF7B                     STR_96:
  1565  00FF7B  50                 	db	80	;'P'
  1566  00FF7C  49                 	db	73	;'I'
  1567  00FF7D  4E                 	db	78	;'N'
  1568  00FF7E  20                 	db	32
  1569  00FF7F  52                 	db	82	;'R'
  1570  00FF80  41                 	db	65	;'A'
  1571  00FF81  34                 	db	52	;'4'
  1572  00FF82  2E                 	db	46
  1573  00FF83  2E                 	db	46
  1574  00FF84  2E                 	db	46
  1575  00FF85  00                 	db	0
  1576  00FF86                     STR_85:
  1577  00FF86  54                 	db	84	;'T'
  1578  00FF87  53                 	db	83	;'S'
  1579  00FF88  54                 	db	84	;'T'
  1580  00FF89  3A                 	db	58	;':'
  1581  00FF8A  20                 	db	32
  1582  00FF8B  43                 	db	67	;'C'
  1583  00FF8C  4F                 	db	79	;'O'
  1584  00FF8D  4E                 	db	78	;'N'
  1585  00FF8E  44                 	db	68	;'D'
  1586  00FF8F  00                 	db	0
  1587  00FF90                     STR_89:
  1588  00FF90  41                 	db	65	;'A'
  1589  00FF91  43                 	db	67	;'C'
  1590  00FF92  54                 	db	84	;'T'
  1591  00FF93  55                 	db	85	;'U'
  1592  00FF94  41                 	db	65	;'A'
  1593  00FF95  54                 	db	84	;'T'
  1594  00FF96  4F                 	db	79	;'O'
  1595  00FF97  52                 	db	82	;'R'
  1596  00FF98  53                 	db	83	;'S'
  1597  00FF99  00                 	db	0
  1598  00FF9A                     STR_22:
  1599  00FF9A  44                 	db	68	;'D'
  1600  00FF9B  55                 	db	85	;'U'
  1601  00FF9C  52                 	db	82	;'R'
  1602  00FF9D  41                 	db	65	;'A'
  1603  00FF9E  54                 	db	84	;'T'
  1604  00FF9F  49                 	db	73	;'I'
  1605  00FFA0  4F                 	db	79	;'O'
  1606  00FFA1  4E                 	db	78	;'N'
  1607  00FFA2  3A                 	db	58	;':'
  1608  00FFA3  00                 	db	0
  1609  00FFA4                     STR_87:
  1610  00FFA4  43                 	db	67	;'C'
  1611  00FFA5  4F                 	db	79	;'O'
  1612  00FFA6  4E                 	db	78	;'N'
  1613  00FFA7  44                 	db	68	;'D'
  1614  00FFA8  3A                 	db	58	;':'
  1615  00FFA9  20                 	db	32
  1616  00FFAA  25                 	db	37
  1617  00FFAB  64                 	db	100	;'d'
  1618  00FFAC  00                 	db	0
  1619  00FFAD                     STR_77:
  1620  00FFAD  53                 	db	83	;'S'
  1621  00FFAE  45                 	db	69	;'E'
  1622  00FFAF  4E                 	db	78	;'N'
  1623  00FFB0  53                 	db	83	;'S'
  1624  00FFB1  4F                 	db	79	;'O'
  1625  00FFB2  52                 	db	82	;'R'
  1626  00FFB3  53                 	db	83	;'S'
  1627  00FFB4  00                 	db	0
  1628  00FFB5                     STR_129:
  1629  00FFB5  28                 	db	40
  1630  00FFB6  6E                 	db	110	;'n'
  1631  00FFB7  75                 	db	117	;'u'
  1632  00FFB8  6C                 	db	108	;'l'
  1633  00FFB9  6C                 	db	108	;'l'
  1634  00FFBA  29                 	db	41
  1635  00FFBB  00                 	db	0
  1636  00FFBC                     STR_67:
  1637  00FFBC  46                 	db	70	;'F'
  1638  00FFBD  41                 	db	65	;'A'
  1639  00FFBE  49                 	db	73	;'I'
  1640  00FFBF  4C                 	db	76	;'L'
  1641  00FFC0  45                 	db	69	;'E'
  1642  00FFC1  44                 	db	68	;'D'
  1643  00FFC2  00                 	db	0
  1644  00FFC3                     STR_7:
  1645  00FFC3  53                 	db	83	;'S'
  1646  00FFC4  54                 	db	84	;'T'
  1647  00FFC5  41                 	db	65	;'A'
  1648  00FFC6  52                 	db	82	;'R'
  1649  00FFC7  54                 	db	84	;'T'
  1650  00FFC8  3A                 	db	58	;':'
  1651  00FFC9  00                 	db	0
  1652  00FFCA                     STR_9:
  1653  00FFCA  46                 	db	70	;'F'
  1654  00FFCB  45                 	db	69	;'E'
  1655  00FFCC  42                 	db	66	;'B'
  1656  00FFCD  00                 	db	0
  1657  00FFCE                     STR_19:
  1658  00FFCE  44                 	db	68	;'D'
  1659  00FFCF  45                 	db	69	;'E'
  1660  00FFD0  43                 	db	67	;'C'
  1661  00FFD1  00                 	db	0
  1662  00FFD2                     STR_15:
  1663  00FFD2  41                 	db	65	;'A'
  1664  00FFD3  55                 	db	85	;'U'
  1665  00FFD4  47                 	db	71	;'G'
  1666  00FFD5  00                 	db	0
  1667  00FFD6                     STR_14:
  1668  00FFD6  4A                 	db	74	;'J'
  1669  00FFD7  55                 	db	85	;'U'
  1670  00FFD8  4C                 	db	76	;'L'
  1671  00FFD9  00                 	db	0
  1672  00FFDA                     STR_8:
  1673  00FFDA  4A                 	db	74	;'J'
  1674  00FFDB  41                 	db	65	;'A'
  1675  00FFDC  4E                 	db	78	;'N'
  1676  00FFDD  00                 	db	0
  1677  00FFDE                     STR_13:
  1678  00FFDE  4A                 	db	74	;'J'
  1679  00FFDF  55                 	db	85	;'U'
  1680  00FFE0  4E                 	db	78	;'N'
  1681  00FFE1  00                 	db	0
  1682  00FFE2                     STR_16:
  1683  00FFE2  53                 	db	83	;'S'
  1684  00FFE3  45                 	db	69	;'E'
  1685  00FFE4  50                 	db	80	;'P'
  1686  00FFE5  00                 	db	0
  1687  00FFE6                     STR_10:
  1688  00FFE6  4D                 	db	77	;'M'
  1689  00FFE7  41                 	db	65	;'A'
  1690  00FFE8  52                 	db	82	;'R'
  1691  00FFE9  00                 	db	0
  1692  00FFEA                     STR_11:
  1693  00FFEA  41                 	db	65	;'A'
  1694  00FFEB  50                 	db	80	;'P'
  1695  00FFEC  52                 	db	82	;'R'
  1696  00FFED  00                 	db	0
  1697  00FFEE                     STR_20:
  1698  00FFEE  45                 	db	69	;'E'
  1699  00FFEF  52                 	db	82	;'R'
  1700  00FFF0  52                 	db	82	;'R'
  1701  00FFF1  00                 	db	0
  1702  00FFF2                     STR_17:
  1703  00FFF2  4F                 	db	79	;'O'
  1704  00FFF3  43                 	db	67	;'C'
  1705  00FFF4  54                 	db	84	;'T'
  1706  00FFF5  00                 	db	0
  1707  00FFF6                     STR_18:
  1708  00FFF6  4E                 	db	78	;'N'
  1709  00FFF7  4F                 	db	79	;'O'
  1710  00FFF8  56                 	db	86	;'V'
  1711  00FFF9  00                 	db	0
  1712  00FFFA                     STR_12:
  1713  00FFFA  4D                 	db	77	;'M'
  1714  00FFFB  41                 	db	65	;'A'
  1715  00FFFC  59                 	db	89	;'Y'
  1716  00FFFD  00                 	db	0
  1717  0000                     
  1718                           ; #config settings
  1719  00FFFE  00                 	db	0	; dummy byte at the end
  1720  0000                     
  1721                           	psect	cinit
  1722  0057A0                     __pcinit:
  1723                           	opt stack 0
  1724  0057A0                     start_initialization:
  1725                           	opt stack 0
  1726  0057A0                     __initialization:
  1727                           	opt stack 0
  1728                           
  1729                           ; Initialize objects allocated to BANK1 (8 bytes)
  1730                           ; load TBLPTR registers with __pidataBANK1
  1731  0057A0  0E9A               	movlw	low __pidataBANK1
  1732  0057A2  6EF6               	movwf	tblptrl,c
  1733  0057A4  0E5F               	movlw	high __pidataBANK1
  1734  0057A6  6EF7               	movwf	tblptrh,c
  1735  0057A8  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1736  0057AA  6EF8               	movwf	tblptru,c
  1737  0057AC  EE01  F04D         	lfsr	0,__pdataBANK1
  1738  0057B0  EE10 F008          	lfsr	1,8
  1739  0057B4                     copy_data0:
  1740  0057B4  0009               	tblrd		*+
  1741  0057B6  CFF5 FFEE          	movff	tablat,postinc0
  1742  0057BA  50E5               	movf	postdec1,w,c
  1743  0057BC  50E1               	movf	fsr1l,w,c
  1744  0057BE  E1FA               	bnz	copy_data0
  1745                           
  1746                           ; Clear objects allocated to BANK1 (77 bytes)
  1747  0057C0  EE01  F000         	lfsr	0,__pbssBANK1
  1748  0057C4  0E4D               	movlw	77
  1749  0057C6                     clear_0:
  1750  0057C6  6AEE               	clrf	postinc0,c
  1751  0057C8  06E8               	decf	wreg,f,c
  1752  0057CA  E1FD               	bnz	clear_0
  1753                           
  1754                           ; Clear objects allocated to BANK0 (38 bytes)
  1755  0057CC  EE00  F0DA         	lfsr	0,__pbssBANK0
  1756  0057D0  0E26               	movlw	38
  1757  0057D2                     clear_1:
  1758  0057D2  6AEE               	clrf	postinc0,c
  1759  0057D4  06E8               	decf	wreg,f,c
  1760  0057D6  E1FD               	bnz	clear_1
  1761                           
  1762                           ; Clear objects allocated to COMRAM (35 bytes)
  1763  0057D8  EE00  F05B         	lfsr	0,__pbssCOMRAM
  1764  0057DC  0E23               	movlw	35
  1765  0057DE                     clear_2:
  1766  0057DE  6AEE               	clrf	postinc0,c
  1767  0057E0  06E8               	decf	wreg,f,c
  1768  0057E2  E1FD               	bnz	clear_2
  1769  0057E4                     end_of_initialization:
  1770                           	opt stack 0
  1771  0057E4                     __end_of__initialization:
  1772                           	opt stack 0
  1773  0057E4  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1774  0057E6  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1775  0057E8  0100               	movlb	0
  1776  0057EA  EFA4  F025         	goto	_main	;jump to C main() function
  1777                           tblptru	equ	0xFF8
  1778                           tblptrh	equ	0xFF7
  1779                           tblptrl	equ	0xFF6
  1780                           tablat	equ	0xFF5
  1781                           postinc0	equ	0xFEE
  1782                           wreg	equ	0xFE8
  1783                           postdec1	equ	0xFE5
  1784                           fsr1l	equ	0xFE1
  1785                           
  1786                           	psect	bssCOMRAM
  1787  00005B                     __pbssCOMRAM:
  1788                           	opt stack 0
  1789  00005B                     _servoTimes:
  1790                           	opt stack 0
  1791  00005B                     	ds	8
  1792  000063                     _back:
  1793                           	opt stack 0
  1794  000063                     	ds	2
  1795  000065                     _down:
  1796                           	opt stack 0
  1797  000065                     	ds	2
  1798  000067                     _enter:
  1799                           	opt stack 0
  1800  000067                     	ds	2
  1801  000069                     _f_panning_to_bin:
  1802                           	opt stack 0
  1803  000069                     	ds	2
  1804  00006B                     _pan_servo_state:
  1805                           	opt stack 0
  1806  00006B                     	ds	2
  1807  00006D                     _servo_timer_counter:
  1808                           	opt stack 0
  1809  00006D                     	ds	2
  1810  00006F                     _servo_timer_target:
  1811                           	opt stack 0
  1812  00006F                     	ds	2
  1813  000071                     _tilt_servo_state:
  1814                           	opt stack 0
  1815  000071                     	ds	2
  1816  000073                     _timer2_counter:
  1817                           	opt stack 0
  1818  000073                     	ds	2
  1819  000075                     _up:
  1820                           	opt stack 0
  1821  000075                     	ds	2
  1822  000077                     _was_low_1:
  1823                           	opt stack 0
  1824  000077                     	ds	2
  1825  000079                     _was_low_2:
  1826                           	opt stack 0
  1827  000079                     	ds	2
  1828  00007B                     _was_low_3:
  1829                           	opt stack 0
  1830  00007B                     	ds	2
  1831  00007D                     _input:
  1832                           	opt stack 0
  1833  00007D                     	ds	1
  1834                           tblptru	equ	0xFF8
  1835                           tblptrh	equ	0xFF7
  1836                           tblptrl	equ	0xFF6
  1837                           tablat	equ	0xFF5
  1838                           postinc0	equ	0xFEE
  1839                           wreg	equ	0xFE8
  1840                           postdec1	equ	0xFE5
  1841                           fsr1l	equ	0xFE1
  1842                           
  1843                           	psect	bssBANK0
  1844  0000DA                     __pbssBANK0:
  1845                           	opt stack 0
  1846  0000DA                     _sensor_outputs:
  1847                           	opt stack 0
  1848  0000DA                     	ds	4
  1849  0000DE                     _COND_signal:
  1850                           	opt stack 0
  1851  0000DE                     	ds	2
  1852  0000E0                     _IR_signal:
  1853                           	opt stack 0
  1854  0000E0                     	ds	2
  1855  0000E2                     _MAG_signal:
  1856                           	opt stack 0
  1857  0000E2                     	ds	2
  1858  0000E4                     _RTCflag:
  1859                           	opt stack 0
  1860  0000E4                     	ds	2
  1861  0000E6                     _cur_state:
  1862                           	opt stack 0
  1863  0000E6                     	ds	2
  1864  0000E8                     _f_arm_position:
  1865                           	opt stack 0
  1866  0000E8                     	ds	2
  1867  0000EA                     _f_lastCan:
  1868                           	opt stack 0
  1869  0000EA                     	ds	2
  1870  0000EC                     _f_loadingNewCan:
  1871                           	opt stack 0
  1872  0000EC                     	ds	2
  1873  0000EE                     _log:
  1874                           	opt stack 0
  1875  0000EE                     	ds	2
  1876  0000F0                     _log_completion:
  1877                           	opt stack 0
  1878  0000F0                     	ds	2
  1879  0000F2                     _log_count_pop_no_tab:
  1880                           	opt stack 0
  1881  0000F2                     	ds	2
  1882  0000F4                     _log_count_pop_w_tab:
  1883                           	opt stack 0
  1884  0000F4                     	ds	2
  1885  0000F6                     _log_total_time:
  1886                           	opt stack 0
  1887  0000F6                     	ds	2
  1888  0000F8                     _logstate:
  1889                           	opt stack 0
  1890  0000F8                     	ds	2
  1891  0000FA                     _total_time:
  1892                           	opt stack 0
  1893  0000FA                     	ds	2
  1894  0000FC                     _machine_state:
  1895                           	opt stack 0
  1896  0000FC                     	ds	1
  1897  0000FD                     _sel:
  1898                           	opt stack 0
  1899  0000FD                     	ds	1
  1900  0000FE                     _count_total:
  1901                           	opt stack 0
  1902  0000FE                     	ds	2
  1903                           tblptru	equ	0xFF8
  1904                           tblptrh	equ	0xFF7
  1905                           tblptrl	equ	0xFF6
  1906                           tablat	equ	0xFF5
  1907                           postinc0	equ	0xFEE
  1908                           wreg	equ	0xFE8
  1909                           postdec1	equ	0xFE5
  1910                           fsr1l	equ	0xFE1
  1911                           
  1912                           	psect	bssBANK1
  1913  000100                     __pbssBANK1:
  1914                           	opt stack 0
  1915  000100                     _log_startTime:
  1916                           	opt stack 0
  1917  000100                     	ds	14
  1918  00010E                     _startTime:
  1919                           	opt stack 0
  1920  00010E                     	ds	14
  1921  00011C                     _time:
  1922                           	opt stack 0
  1923  00011C                     	ds	7
  1924  000123                     _agitator_toggle_count:
  1925                           	opt stack 0
  1926  000123                     	ds	2
  1927  000125                     _count_can_no_lab:
  1928                           	opt stack 0
  1929  000125                     	ds	2
  1930  000127                     _count_can_w_lab:
  1931                           	opt stack 0
  1932  000127                     	ds	2
  1933  000129                     _count_pop_no_tab:
  1934                           	opt stack 0
  1935  000129                     	ds	2
  1936  00012B                     _count_pop_w_tab:
  1937                           	opt stack 0
  1938  00012B                     	ds	2
  1939  00012D                     _cur_can:
  1940                           	opt stack 0
  1941  00012D                     	ds	2
  1942  00012F                     _debug:
  1943                           	opt stack 0
  1944  00012F                     	ds	2
  1945  000131                     _f_ID_receive:
  1946                           	opt stack 0
  1947  000131                     	ds	2
  1948  000133                     _f_can_coming_to_ID:
  1949                           	opt stack 0
  1950  000133                     	ds	2
  1951  000135                     _f_can_coming_to_distribution:
  1952                           	opt stack 0
  1953  000135                     	ds	2
  1954  000137                     _f_can_distributed:
  1955                           	opt stack 0
  1956  000137                     	ds	2
  1957  000139                     _f_most_recent_sort_time:
  1958                           	opt stack 0
  1959  000139                     	ds	2
  1960  00013B                     _first:
  1961                           	opt stack 0
  1962  00013B                     	ds	2
  1963  00013D                     _firstboot:
  1964                           	opt stack 0
  1965  00013D                     	ds	2
  1966  00013F                     _i:
  1967                           	opt stack 0
  1968  00013F                     	ds	2
  1969  000141                     _log_count_can_no_lab:
  1970                           	opt stack 0
  1971  000141                     	ds	2
  1972  000143                     _log_count_can_w_lab:
  1973                           	opt stack 0
  1974  000143                     	ds	2
  1975  000145                     _log_count_total:
  1976                           	opt stack 0
  1977  000145                     	ds	2
  1978  000147                     _most_recent_sort_time:
  1979                           	opt stack 0
  1980  000147                     	ds	2
  1981  000149                     _motor_toggle_count:
  1982                           	opt stack 0
  1983  000149                     	ds	2
  1984  00014B                     _var:
  1985                           	opt stack 0
  1986  00014B                     	ds	2
  1987                           tblptru	equ	0xFF8
  1988                           tblptrh	equ	0xFF7
  1989                           tblptrl	equ	0xFF6
  1990                           tablat	equ	0xFF5
  1991                           postinc0	equ	0xFEE
  1992                           wreg	equ	0xFE8
  1993                           postdec1	equ	0xFE5
  1994                           fsr1l	equ	0xFE1
  1995                           
  1996                           	psect	dataBANK1
  1997  00014D                     __pdataBANK1:
  1998                           	opt stack 0
  1999  00014D                     UI@F3250:
  2000                           	opt stack 0
  2001  00014D                     	ds	4
  2002  000151                     printRTC@F3240:
  2003                           	opt stack 0
  2004  000151                     	ds	4
  2005                           tblptru	equ	0xFF8
  2006                           tblptrh	equ	0xFF7
  2007                           tblptrl	equ	0xFF6
  2008                           tablat	equ	0xFF5
  2009                           postinc0	equ	0xFEE
  2010                           wreg	equ	0xFE8
  2011                           postdec1	equ	0xFE5
  2012                           fsr1l	equ	0xFE1
  2013                           
  2014                           	psect	cstackBANK0
  2015  000080                     __pcstackBANK0:
  2016                           	opt stack 0
  2017  000080                     ??_delay_ms:
  2018  000080                     ??_isdigit:
  2019  000080                     ??_readADC:
  2020  000080                     ??_I2C_Master_Wait:
  2021  000080                     ?___wmul:
  2022                           	opt stack 0
  2023  000080                     ?___awmod:
  2024                           	opt stack 0
  2025  000080                     ?___lwdiv:
  2026                           	opt stack 0
  2027  000080                     ?___ftpack:
  2028                           	opt stack 0
  2029  000080                     ?___lldiv:
  2030                           	opt stack 0
  2031  000080                     lcdNibble@temp:
  2032                           	opt stack 0
  2033  000080                     initTime@m:
  2034                           	opt stack 0
  2035  000080                     updateServoPosition@time_us:
  2036                           	opt stack 0
  2037  000080                     EEPROM_read@address:
  2038                           	opt stack 0
  2039  000080                     ___wmul@multiplier:
  2040                           	opt stack 0
  2041  000080                     ___awmod@dividend:
  2042                           	opt stack 0
  2043  000080                     ___lwdiv@dividend:
  2044                           	opt stack 0
  2045  000080                     strcpy@to:
  2046                           	opt stack 0
  2047  000080                     ___ftpack@arg:
  2048                           	opt stack 0
  2049  000080                     ___lldiv@dividend:
  2050                           	opt stack 0
  2051                           
  2052                           ; 4 bytes @ 0x0
  2053  000080                     	ds	1
  2054  000081                     readADC@channel:
  2055                           	opt stack 0
  2056  000081                     I2C_Master_Read@a:
  2057                           	opt stack 0
  2058  000081                     lcdNibble@data:
  2059                           	opt stack 0
  2060  000081                     initTime@h:
  2061                           	opt stack 0
  2062  000081                     delay_ms@milliseconds:
  2063                           	opt stack 0
  2064  000081                     _isdigit$2072:
  2065                           	opt stack 0
  2066  000081                     I2C_Master_Write@d:
  2067                           	opt stack 0
  2068                           
  2069                           ; 2 bytes @ 0x1
  2070  000081                     	ds	1
  2071  000082                     ??_readMAG:
  2072  000082                     ??_readCOND:
  2073  000082                     I2C_Master_Read@temp:
  2074                           	opt stack 0
  2075  000082                     lcdInst@data:
  2076                           	opt stack 0
  2077  000082                     putch@data:
  2078                           	opt stack 0
  2079  000082                     initTime@w:
  2080                           	opt stack 0
  2081  000082                     isdigit@c:
  2082                           	opt stack 0
  2083  000082                     readIR@ana_port:
  2084                           	opt stack 0
  2085  000082                     updateServoPosition@timer:
  2086                           	opt stack 0
  2087  000082                     ___wmul@multiplicand:
  2088                           	opt stack 0
  2089  000082                     ___awmod@divisor:
  2090                           	opt stack 0
  2091  000082                     ___lwdiv@divisor:
  2092                           	opt stack 0
  2093  000082                     strcpy@from:
  2094                           	opt stack 0
  2095                           
  2096                           ; 2 bytes @ 0x2
  2097  000082                     	ds	1
  2098  000083                     ??_initLCD:
  2099  000083                     initTime@DD:
  2100                           	opt stack 0
  2101  000083                     ___ftpack@exp:
  2102                           	opt stack 0
  2103  000083                     getRTC@i:
  2104                           	opt stack 0
  2105                           
  2106                           ; 2 bytes @ 0x3
  2107  000083                     	ds	1
  2108  000084                     ??_updateServoPosition:
  2109  000084                     ??_readIR:
  2110  000084                     initTime@MM:
  2111                           	opt stack 0
  2112  000084                     ___awmod@counter:
  2113                           	opt stack 0
  2114  000084                     ___ftpack@sign:
  2115                           	opt stack 0
  2116  000084                     readMAG@res:
  2117                           	opt stack 0
  2118  000084                     readCOND@res:
  2119                           	opt stack 0
  2120  000084                     ___wmul@product:
  2121                           	opt stack 0
  2122  000084                     ___lwdiv@quotient:
  2123                           	opt stack 0
  2124  000084                     strcpy@cp:
  2125                           	opt stack 0
  2126  000084                     ___lldiv@divisor:
  2127                           	opt stack 0
  2128                           
  2129                           ; 4 bytes @ 0x4
  2130  000084                     	ds	1
  2131  000085                     ??_initSortTimer:
  2132  000085                     ??___ftpack:
  2133  000085                     initTime@YY:
  2134                           	opt stack 0
  2135  000085                     ___awmod@sign:
  2136                           	opt stack 0
  2137                           
  2138                           ; 1 bytes @ 0x5
  2139  000085                     	ds	1
  2140  000086                     ??_getMAG:
  2141  000086                     ?___awdiv:
  2142                           	opt stack 0
  2143  000086                     initTime@s:
  2144                           	opt stack 0
  2145  000086                     ___lwdiv@counter:
  2146                           	opt stack 0
  2147  000086                     readIR@res:
  2148                           	opt stack 0
  2149  000086                     updateServoPosition@my_time:
  2150                           	opt stack 0
  2151  000086                     ___awdiv@dividend:
  2152                           	opt stack 0
  2153                           
  2154                           ; 2 bytes @ 0x6
  2155  000086                     	ds	1
  2156  000087                     ?___lwmod:
  2157                           	opt stack 0
  2158  000087                     ___lwmod@dividend:
  2159                           	opt stack 0
  2160                           
  2161                           ; 2 bytes @ 0x7
  2162  000087                     	ds	1
  2163  000088                     ??_Distribution:
  2164  000088                     ??_initServos:
  2165  000088                     initSortTimer@i:
  2166                           	opt stack 0
  2167  000088                     getIR@port:
  2168                           	opt stack 0
  2169  000088                     ___awdiv@divisor:
  2170                           	opt stack 0
  2171  000088                     ___lldiv@quotient:
  2172                           	opt stack 0
  2173                           
  2174                           ; 4 bytes @ 0x8
  2175  000088                     	ds	1
  2176  000089                     ___lwmod@divisor:
  2177                           	opt stack 0
  2178                           
  2179                           ; 2 bytes @ 0x9
  2180  000089                     	ds	1
  2181  00008A                     ??_getIR:
  2182  00008A                     ___awdiv@counter:
  2183                           	opt stack 0
  2184                           
  2185                           ; 1 bytes @ 0xA
  2186  00008A                     	ds	1
  2187  00008B                     ___awdiv@sign:
  2188                           	opt stack 0
  2189  00008B                     ___lwmod@counter:
  2190                           	opt stack 0
  2191  00008B                     getIR@i:
  2192                           	opt stack 0
  2193                           
  2194                           ; 2 bytes @ 0xB
  2195  00008B                     	ds	1
  2196  00008C                     ___lldiv@counter:
  2197                           	opt stack 0
  2198  00008C                     ___awdiv@quotient:
  2199                           	opt stack 0
  2200                           
  2201                           ; 2 bytes @ 0xC
  2202  00008C                     	ds	1
  2203  00008D                     I2C_Master_Init@c:
  2204                           	opt stack 0
  2205                           
  2206                           ; 4 bytes @ 0xD
  2207  00008D                     	ds	1
  2208  00008E                     ?_printf:
  2209                           	opt stack 0
  2210  00008E                     ?___awtoft:
  2211                           	opt stack 0
  2212  00008E                     printf@f:
  2213                           	opt stack 0
  2214  00008E                     ___awtoft@c:
  2215                           	opt stack 0
  2216                           
  2217                           ; 2 bytes @ 0xE
  2218  00008E                     	ds	3
  2219  000091                     ??_I2C_Master_Init:
  2220  000091                     ___awtoft@sign:
  2221                           	opt stack 0
  2222                           
  2223                           ; 1 bytes @ 0x11
  2224  000091                     	ds	1
  2225  000092                     ___ftge@ff1:
  2226                           	opt stack 0
  2227                           
  2228                           ; 3 bytes @ 0x12
  2229  000092                     	ds	3
  2230  000095                     ??_loadRTC:
  2231  000095                     ___ftge@ff2:
  2232                           	opt stack 0
  2233                           
  2234                           ; 3 bytes @ 0x15
  2235  000095                     	ds	1
  2236  000096                     loadRTC@i:
  2237                           	opt stack 0
  2238                           
  2239                           ; 2 bytes @ 0x16
  2240  000096                     	ds	2
  2241  000098                     ??___ftge:
  2242                           
  2243                           ; 1 bytes @ 0x18
  2244  000098                     	ds	2
  2245  00009A                     ??_printf:
  2246                           
  2247                           ; 1 bytes @ 0x1A
  2248  00009A                     	ds	1
  2249  00009B                     ??_ID:
  2250                           
  2251                           ; 1 bytes @ 0x1B
  2252  00009B                     	ds	2
  2253  00009D                     ID@time_1150:
  2254                           	opt stack 0
  2255                           
  2256                           ; 1 bytes @ 0x1D
  2257  00009D                     	ds	1
  2258  00009E                     _ID$1141:
  2259                           	opt stack 0
  2260  00009E                     printf@prec:
  2261                           	opt stack 0
  2262                           
  2263                           ; 1 bytes @ 0x1E
  2264  00009E                     	ds	1
  2265  00009F                     _ID$1149:
  2266                           	opt stack 0
  2267  00009F                     printf@cp:
  2268                           	opt stack 0
  2269                           
  2270                           ; 2 bytes @ 0x1F
  2271  00009F                     	ds	1
  2272  0000A0                     _ID$1154:
  2273                           	opt stack 0
  2274                           
  2275                           ; 1 bytes @ 0x20
  2276  0000A0                     	ds	1
  2277  0000A1                     ID@i:
  2278                           	opt stack 0
  2279  0000A1                     printf@ap:
  2280                           	opt stack 0
  2281                           
  2282                           ; 2 bytes @ 0x21
  2283  0000A1                     	ds	2
  2284  0000A3                     ID@i_1148:
  2285                           	opt stack 0
  2286  0000A3                     printf@len:
  2287                           	opt stack 0
  2288                           
  2289                           ; 2 bytes @ 0x23
  2290  0000A3                     	ds	2
  2291  0000A5                     ID@i_1153:
  2292                           	opt stack 0
  2293  0000A5                     printf@val:
  2294                           	opt stack 0
  2295                           
  2296                           ; 2 bytes @ 0x25
  2297  0000A5                     	ds	2
  2298  0000A7                     printf@flag:
  2299                           	opt stack 0
  2300  0000A7                     ID@i_1155:
  2301                           	opt stack 0
  2302                           
  2303                           ; 2 bytes @ 0x27
  2304  0000A7                     	ds	1
  2305  0000A8                     printf@c:
  2306                           	opt stack 0
  2307                           
  2308                           ; 1 bytes @ 0x28
  2309  0000A8                     	ds	1
  2310  0000A9                     ID@time:
  2311                           	opt stack 0
  2312  0000A9                     printf@width:
  2313                           	opt stack 0
  2314                           
  2315                           ; 2 bytes @ 0x29
  2316  0000A9                     	ds	1
  2317  0000AA                     ID@res1:
  2318                           	opt stack 0
  2319                           
  2320                           ; 2 bytes @ 0x2A
  2321  0000AA                     	ds	1
  2322  0000AB                     ??_printRTC:
  2323  0000AB                     ??_algorithmTest:
  2324  0000AB                     ??_sensorTest:
  2325  0000AB                     ??_actuatorTest:
  2326  0000AB                     ??_arm:
  2327  0000AB                     ??_PortTestDC:
  2328  0000AB                     ??_SpeedTest:
  2329  0000AB                     ??_PortTestPusher:
  2330  0000AB                     ??_PlatformTest:
  2331  0000AB                     ??_BothServos:
  2332  0000AB                     ??_BlockerTest:
  2333  0000AB                     EEPROM_write@address:
  2334                           	opt stack 0
  2335                           
  2336                           ; 2 bytes @ 0x2B
  2337  0000AB                     	ds	1
  2338  0000AC                     ID@res2:
  2339                           	opt stack 0
  2340  0000AC                     arm@on:
  2341                           	opt stack 0
  2342                           
  2343                           ; 2 bytes @ 0x2C
  2344  0000AC                     	ds	1
  2345  0000AD                     EEPROM_write@data:
  2346                           	opt stack 0
  2347  0000AD                     actuatorTest@i_1747:
  2348                           	opt stack 0
  2349  0000AD                     sensorTest@res:
  2350                           	opt stack 0
  2351  0000AD                     PlatformTest@res:
  2352                           	opt stack 0
  2353  0000AD                     BlockerTest@i:
  2354                           	opt stack 0
  2355                           
  2356                           ; 2 bytes @ 0x2D
  2357  0000AD                     	ds	1
  2358  0000AE                     ??_EEPROM_write:
  2359  0000AE                     actuatorTest@i_1754:
  2360                           	opt stack 0
  2361  0000AE                     ID@res:
  2362                           	opt stack 0
  2363  0000AE                     printRTC@INT_time:
  2364                           	opt stack 0
  2365                           
  2366                           ; 14 bytes @ 0x2E
  2367  0000AE                     	ds	1
  2368  0000AF                     EEPROM_write@i:
  2369                           	opt stack 0
  2370  0000AF                     actuatorTest@i_1755:
  2371                           	opt stack 0
  2372  0000AF                     sensorTest@res_1724:
  2373                           	opt stack 0
  2374  0000AF                     PlatformTest@res_1799:
  2375                           	opt stack 0
  2376  0000AF                     BlockerTest@res:
  2377                           	opt stack 0
  2378                           
  2379                           ; 2 bytes @ 0x2F
  2380  0000AF                     	ds	1
  2381  0000B0                     EEPROM_write@i_1413:
  2382                           	opt stack 0
  2383  0000B0                     actuatorTest@i_1757:
  2384                           	opt stack 0
  2385                           
  2386                           ; 1 bytes @ 0x30
  2387  0000B0                     	ds	1
  2388  0000B1                     ??_Loading:
  2389  0000B1                     logRun@num:
  2390                           	opt stack 0
  2391  0000B1                     actuatorTest@i_1758:
  2392                           	opt stack 0
  2393  0000B1                     PlatformTest@i:
  2394                           	opt stack 0
  2395  0000B1                     BlockerTest@cam_flag:
  2396                           	opt stack 0
  2397                           
  2398                           ; 2 bytes @ 0x31
  2399  0000B1                     	ds	1
  2400  0000B2                     logRun@byte1:
  2401                           	opt stack 0
  2402  0000B2                     actuatorTest@i_1760:
  2403                           	opt stack 0
  2404  0000B2                     ID@i_1156:
  2405                           	opt stack 0
  2406                           
  2407                           ; 2 bytes @ 0x32
  2408  0000B2                     	ds	1
  2409  0000B3                     logRun@byte2:
  2410                           	opt stack 0
  2411  0000B3                     actuatorTest@i_1761:
  2412                           	opt stack 0
  2413  0000B3                     Loading@addr:
  2414                           	opt stack 0
  2415  0000B3                     PlatformTest@i_1803:
  2416                           	opt stack 0
  2417  0000B3                     BlockerTest@cond_flag:
  2418                           	opt stack 0
  2419                           
  2420                           ; 2 bytes @ 0x33
  2421  0000B3                     	ds	1
  2422  0000B4                     logRun@byte3:
  2423                           	opt stack 0
  2424  0000B4                     actuatorTest@i_1763:
  2425                           	opt stack 0
  2426  0000B4                     ID@j:
  2427                           	opt stack 0
  2428                           
  2429                           ; 2 bytes @ 0x34
  2430  0000B4                     	ds	1
  2431  0000B5                     Loading@byte1:
  2432                           	opt stack 0
  2433  0000B5                     logRun@byte_i:
  2434                           	opt stack 0
  2435  0000B5                     actuatorTest@i_1764:
  2436                           	opt stack 0
  2437  0000B5                     PlatformTest@on:
  2438                           	opt stack 0
  2439                           
  2440                           ; 2 bytes @ 0x35
  2441  0000B5                     	ds	1
  2442  0000B6                     logRun@byte11:
  2443                           	opt stack 0
  2444  0000B6                     actuatorTest@i_1766:
  2445                           	opt stack 0
  2446  0000B6                     Loading@i_1125:
  2447                           	opt stack 0
  2448  0000B6                     ID@n:
  2449                           	opt stack 0
  2450                           
  2451                           ; 2 bytes @ 0x36
  2452  0000B6                     	ds	1
  2453  0000B7                     actuatorTest@i_1767:
  2454                           	opt stack 0
  2455  0000B7                     logRun@i:
  2456                           	opt stack 0
  2457                           
  2458                           ; 2 bytes @ 0x37
  2459  0000B7                     	ds	1
  2460  0000B8                     actuatorTest@i_1769:
  2461                           	opt stack 0
  2462  0000B8                     Loading@i_1134:
  2463                           	opt stack 0
  2464                           
  2465                           ; 2 bytes @ 0x38
  2466  0000B8                     	ds	1
  2467  0000B9                     actuatorTest@i_1770:
  2468                           	opt stack 0
  2469  0000B9                     logRun@addr:
  2470                           	opt stack 0
  2471                           
  2472                           ; 2 bytes @ 0x39
  2473  0000B9                     	ds	1
  2474  0000BA                     actuatorTest@i_1773:
  2475                           	opt stack 0
  2476  0000BA                     Loading@i_1136:
  2477                           	opt stack 0
  2478                           
  2479                           ; 2 bytes @ 0x3A
  2480  0000BA                     	ds	1
  2481  0000BB                     actuatorTest@i_1774:
  2482                           	opt stack 0
  2483                           
  2484                           ; 1 bytes @ 0x3B
  2485  0000BB                     	ds	1
  2486  0000BC                     actuatorTest@i_1776:
  2487                           	opt stack 0
  2488  0000BC                     printRTC@RTC_month:
  2489                           	opt stack 0
  2490  0000BC                     Loading@i_1137:
  2491                           	opt stack 0
  2492                           
  2493                           ; 2 bytes @ 0x3C
  2494  0000BC                     	ds	1
  2495  0000BD                     actuatorTest@i_1777:
  2496                           	opt stack 0
  2497                           
  2498                           ; 1 bytes @ 0x3D
  2499  0000BD                     	ds	1
  2500  0000BE                     actuatorTest@i_1779:
  2501                           	opt stack 0
  2502  0000BE                     Loading@i_1139:
  2503                           	opt stack 0
  2504  0000BE                     printRTC@month:
  2505                           	opt stack 0
  2506                           
  2507                           ; 4 bytes @ 0x3E
  2508  0000BE                     	ds	1
  2509  0000BF                     actuatorTest@i_1780:
  2510                           	opt stack 0
  2511                           
  2512                           ; 1 bytes @ 0x3F
  2513  0000BF                     	ds	1
  2514  0000C0                     actuatorTest@i_1783:
  2515                           	opt stack 0
  2516  0000C0                     Loading@i:
  2517                           	opt stack 0
  2518                           
  2519                           ; 2 bytes @ 0x40
  2520  0000C0                     	ds	1
  2521  0000C1                     actuatorTest@i_1784:
  2522                           	opt stack 0
  2523                           
  2524                           ; 1 bytes @ 0x41
  2525  0000C1                     	ds	1
  2526  0000C2                     actuatorTest@i_1786:
  2527                           	opt stack 0
  2528  0000C2                     printRTC@i:
  2529                           	opt stack 0
  2530  0000C2                     Loading@j:
  2531                           	opt stack 0
  2532                           
  2533                           ; 2 bytes @ 0x42
  2534  0000C2                     	ds	1
  2535  0000C3                     actuatorTest@i_1787:
  2536                           	opt stack 0
  2537                           
  2538                           ; 1 bytes @ 0x43
  2539  0000C3                     	ds	1
  2540  0000C4                     ??_UI:
  2541  0000C4                     actuatorTest@i:
  2542                           	opt stack 0
  2543                           
  2544                           ; 2 bytes @ 0x44
  2545  0000C4                     	ds	2
  2546  0000C6                     ??_Test:
  2547  0000C6                     _UI$2434:
  2548                           	opt stack 0
  2549                           
  2550                           ; 2 bytes @ 0x46
  2551  0000C6                     	ds	2
  2552  0000C8                     UI@i:
  2553                           	opt stack 0
  2554                           
  2555                           ; 1 bytes @ 0x48
  2556  0000C8                     	ds	1
  2557  0000C9                     UI@i_413:
  2558                           	opt stack 0
  2559                           
  2560                           ; 1 bytes @ 0x49
  2561  0000C9                     	ds	1
  2562  0000CA                     UI@i_416:
  2563                           	opt stack 0
  2564                           
  2565                           ; 1 bytes @ 0x4A
  2566  0000CA                     	ds	1
  2567  0000CB                     UI@i_417:
  2568                           	opt stack 0
  2569                           
  2570                           ; 1 bytes @ 0x4B
  2571  0000CB                     	ds	1
  2572  0000CC                     UI@i_435:
  2573                           	opt stack 0
  2574                           
  2575                           ; 1 bytes @ 0x4C
  2576  0000CC                     	ds	1
  2577  0000CD                     UI@i_436:
  2578                           	opt stack 0
  2579                           
  2580                           ; 1 bytes @ 0x4D
  2581  0000CD                     	ds	1
  2582  0000CE                     UI@i_439:
  2583                           	opt stack 0
  2584                           
  2585                           ; 1 bytes @ 0x4E
  2586  0000CE                     	ds	1
  2587  0000CF                     UI@i_440:
  2588                           	opt stack 0
  2589                           
  2590                           ; 1 bytes @ 0x4F
  2591  0000CF                     	ds	1
  2592  0000D0                     UI@i_443:
  2593                           	opt stack 0
  2594                           
  2595                           ; 1 bytes @ 0x50
  2596  0000D0                     	ds	1
  2597  0000D1                     UI@i_444:
  2598                           	opt stack 0
  2599                           
  2600                           ; 1 bytes @ 0x51
  2601  0000D1                     	ds	1
  2602  0000D2                     UI@i_447:
  2603                           	opt stack 0
  2604                           
  2605                           ; 1 bytes @ 0x52
  2606  0000D2                     	ds	1
  2607  0000D3                     UI@i_448:
  2608                           	opt stack 0
  2609                           
  2610                           ; 1 bytes @ 0x53
  2611  0000D3                     	ds	1
  2612  0000D4                     UI@i_451:
  2613                           	opt stack 0
  2614                           
  2615                           ; 1 bytes @ 0x54
  2616  0000D4                     	ds	1
  2617  0000D5                     UI@i_452:
  2618                           	opt stack 0
  2619                           
  2620                           ; 1 bytes @ 0x55
  2621  0000D5                     	ds	1
  2622  0000D6                     UI@month:
  2623                           	opt stack 0
  2624                           
  2625                           ; 4 bytes @ 0x56
  2626  0000D6                     	ds	4
  2627  0000DA                     tblptru	equ	0xFF8
  2628                           tblptrh	equ	0xFF7
  2629                           tblptrl	equ	0xFF6
  2630                           tablat	equ	0xFF5
  2631                           postinc0	equ	0xFEE
  2632                           wreg	equ	0xFE8
  2633                           postdec1	equ	0xFE5
  2634                           fsr1l	equ	0xFE1
  2635                           
  2636                           ; 1 bytes @ 0x5A
  2637                           
  2638                           	psect	cstackCOMRAM
  2639  000001                     __pcstackCOMRAM:
  2640                           	opt stack 0
  2641  000001                     ??_updateArmState:
  2642  000001                     ??i2_I2C_Master_Wait:
  2643  000001                     ??i2_delay_ms:
  2644  000001                     ??i2_isdigit:
  2645  000001                     ?i2___wmul:
  2646                           	opt stack 0
  2647  000001                     ?i2___awmod:
  2648                           	opt stack 0
  2649  000001                     ?i2___lwmod:
  2650                           	opt stack 0
  2651  000001                     i2lcdNibble@temp:
  2652                           	opt stack 0
  2653  000001                     i2updateServoPosition@time_us:
  2654                           	opt stack 0
  2655  000001                     i2EEPROM_read@address:
  2656                           	opt stack 0
  2657  000001                     i2___wmul@multiplier:
  2658                           	opt stack 0
  2659  000001                     i2___awmod@dividend:
  2660                           	opt stack 0
  2661  000001                     i2___lwmod@dividend:
  2662                           	opt stack 0
  2663  000001                     i2strcpy@to:
  2664                           	opt stack 0
  2665                           
  2666                           ; 2 bytes @ 0x0
  2667  000001                     	ds	1
  2668  000002                     i2I2C_Master_Read@a:
  2669                           	opt stack 0
  2670  000002                     i2lcdNibble@data:
  2671                           	opt stack 0
  2672  000002                     i2delay_ms@milliseconds:
  2673                           	opt stack 0
  2674  000002                     i2_isdigit$2072:
  2675                           	opt stack 0
  2676  000002                     i2I2C_Master_Write@d:
  2677                           	opt stack 0
  2678                           
  2679                           ; 2 bytes @ 0x1
  2680  000002                     	ds	1
  2681  000003                     i2I2C_Master_Read@temp:
  2682                           	opt stack 0
  2683  000003                     i2lcdInst@data:
  2684                           	opt stack 0
  2685  000003                     i2putch@data:
  2686                           	opt stack 0
  2687  000003                     i2isdigit@c:
  2688                           	opt stack 0
  2689  000003                     i2updateServoPosition@timer:
  2690                           	opt stack 0
  2691  000003                     i2___wmul@multiplicand:
  2692                           	opt stack 0
  2693  000003                     i2___awmod@divisor:
  2694                           	opt stack 0
  2695  000003                     i2___lwmod@divisor:
  2696                           	opt stack 0
  2697  000003                     i2strcpy@from:
  2698                           	opt stack 0
  2699                           
  2700                           ; 2 bytes @ 0x2
  2701  000003                     	ds	1
  2702  000004                     i2getRTC@i:
  2703                           	opt stack 0
  2704                           
  2705                           ; 2 bytes @ 0x3
  2706  000004                     	ds	1
  2707  000005                     ??i2_updateServoPosition:
  2708  000005                     i2___awmod@counter:
  2709                           	opt stack 0
  2710  000005                     i2___lwmod@counter:
  2711                           	opt stack 0
  2712  000005                     i2___wmul@product:
  2713                           	opt stack 0
  2714  000005                     i2strcpy@cp:
  2715                           	opt stack 0
  2716                           
  2717                           ; 2 bytes @ 0x4
  2718  000005                     	ds	1
  2719  000006                     ?i2___lwdiv:
  2720                           	opt stack 0
  2721  000006                     i2___awmod@sign:
  2722                           	opt stack 0
  2723  000006                     i2___lwdiv@dividend:
  2724                           	opt stack 0
  2725                           
  2726                           ; 2 bytes @ 0x5
  2727  000006                     	ds	1
  2728  000007                     retrieveLog@logNum:
  2729                           	opt stack 0
  2730  000007                     i2updateServoPosition@my_time:
  2731                           	opt stack 0
  2732                           
  2733                           ; 2 bytes @ 0x6
  2734  000007                     	ds	1
  2735  000008                     i2___lwdiv@divisor:
  2736                           	opt stack 0
  2737                           
  2738                           ; 2 bytes @ 0x7
  2739  000008                     	ds	1
  2740  000009                     ??_retrieveLog:
  2741  000009                     ??_updateServoStates:
  2742                           
  2743                           ; 1 bytes @ 0x8
  2744  000009                     	ds	1
  2745  00000A                     i2___lwdiv@quotient:
  2746                           	opt stack 0
  2747                           
  2748                           ; 2 bytes @ 0x9
  2749  00000A                     	ds	1
  2750  00000B                     retrieveLog@byte1:
  2751                           	opt stack 0
  2752                           
  2753                           ; 1 bytes @ 0xA
  2754  00000B                     	ds	1
  2755  00000C                     retrieveLog@byte2:
  2756                           	opt stack 0
  2757  00000C                     i2___lwdiv@counter:
  2758                           	opt stack 0
  2759                           
  2760                           ; 1 bytes @ 0xB
  2761  00000C                     	ds	1
  2762  00000D                     ?i2_printf:
  2763                           	opt stack 0
  2764  00000D                     retrieveLog@byte3:
  2765                           	opt stack 0
  2766  00000D                     i2printf@f:
  2767                           	opt stack 0
  2768                           
  2769                           ; 2 bytes @ 0xC
  2770  00000D                     	ds	1
  2771  00000E                     retrieveLog@i:
  2772                           	opt stack 0
  2773                           
  2774                           ; 2 bytes @ 0xD
  2775  00000E                     	ds	2
  2776  000010                     retrieveLog@addr:
  2777                           	opt stack 0
  2778                           
  2779                           ; 2 bytes @ 0xF
  2780  000010                     	ds	2
  2781  000012                     dispLogs@myLog:
  2782                           	opt stack 0
  2783                           
  2784                           ; 2 bytes @ 0x11
  2785  000012                     	ds	2
  2786  000014                     
  2787                           ; 1 bytes @ 0x13
  2788  000014                     	ds	5
  2789  000019                     ??i2_printf:
  2790                           
  2791                           ; 1 bytes @ 0x18
  2792  000019                     	ds	4
  2793  00001D                     i2printf@prec:
  2794                           	opt stack 0
  2795                           
  2796                           ; 1 bytes @ 0x1C
  2797  00001D                     	ds	1
  2798  00001E                     i2printf@cp:
  2799                           	opt stack 0
  2800                           
  2801                           ; 2 bytes @ 0x1D
  2802  00001E                     	ds	2
  2803  000020                     i2printf@ap:
  2804                           	opt stack 0
  2805                           
  2806                           ; 2 bytes @ 0x1F
  2807  000020                     	ds	2
  2808  000022                     i2printf@len:
  2809                           	opt stack 0
  2810                           
  2811                           ; 2 bytes @ 0x21
  2812  000022                     	ds	2
  2813  000024                     i2printf@val:
  2814                           	opt stack 0
  2815                           
  2816                           ; 2 bytes @ 0x23
  2817  000024                     	ds	2
  2818  000026                     i2printf@flag:
  2819                           	opt stack 0
  2820                           
  2821                           ; 1 bytes @ 0x25
  2822  000026                     	ds	1
  2823  000027                     i2printf@c:
  2824                           	opt stack 0
  2825                           
  2826                           ; 1 bytes @ 0x26
  2827  000027                     	ds	1
  2828  000028                     i2printf@width:
  2829                           	opt stack 0
  2830                           
  2831                           ; 2 bytes @ 0x27
  2832  000028                     	ds	2
  2833  00002A                     ??_printSortTimer:
  2834  00002A                     ??i2_printRTC:
  2835  00002A                     ?_inputHandler:
  2836                           	opt stack 0
  2837                           
  2838                           ; 2 bytes @ 0x29
  2839  00002A                     	ds	2
  2840  00002C                     ??_inputHandler:
  2841                           
  2842                           ; 1 bytes @ 0x2B
  2843  00002C                     	ds	1
  2844  00002D                     printSortTimer@curTime:
  2845                           	opt stack 0
  2846  00002D                     i2printRTC@INT_time:
  2847                           	opt stack 0
  2848                           
  2849                           ; 14 bytes @ 0x2C
  2850  00002D                     	ds	14
  2851  00003B                     printSortTimer@start_sec:
  2852                           	opt stack 0
  2853  00003B                     i2printRTC@RTC_month:
  2854                           	opt stack 0
  2855                           
  2856                           ; 2 bytes @ 0x3A
  2857  00003B                     	ds	2
  2858  00003D                     printSortTimer@cur_sec:
  2859                           	opt stack 0
  2860  00003D                     i2printRTC@month:
  2861                           	opt stack 0
  2862                           
  2863                           ; 4 bytes @ 0x3C
  2864  00003D                     	ds	2
  2865  00003F                     printSortTimer@min:
  2866                           	opt stack 0
  2867                           
  2868                           ; 2 bytes @ 0x3E
  2869  00003F                     	ds	2
  2870  000041                     printSortTimer@sec:
  2871                           	opt stack 0
  2872  000041                     i2printRTC@i:
  2873                           	opt stack 0
  2874                           
  2875                           ; 2 bytes @ 0x40
  2876  000041                     	ds	2
  2877  000043                     ??_updateMenu:
  2878  000043                     _printSortTimer$2574:
  2879                           	opt stack 0
  2880                           
  2881                           ; 2 bytes @ 0x42
  2882  000043                     	ds	2
  2883  000045                     printSortTimer@timeDiff:
  2884                           	opt stack 0
  2885                           
  2886                           ; 2 bytes @ 0x44
  2887  000045                     	ds	2
  2888  000047                     printSortTimer@i_1168:
  2889                           	opt stack 0
  2890                           
  2891                           ; 2 bytes @ 0x46
  2892  000047                     	ds	2
  2893  000049                     printSortTimer@i:
  2894                           	opt stack 0
  2895                           
  2896                           ; 2 bytes @ 0x48
  2897  000049                     	ds	2
  2898  00004B                     ??_handler:
  2899                           
  2900                           ; 1 bytes @ 0x4A
  2901  00004B                     	ds	16
  2902                           tblptru	equ	0xFF8
  2903                           tblptrh	equ	0xFF7
  2904                           tblptrl	equ	0xFF6
  2905                           tablat	equ	0xFF5
  2906                           postinc0	equ	0xFEE
  2907                           wreg	equ	0xFE8
  2908                           postdec1	equ	0xFE5
  2909                           fsr1l	equ	0xFE1
  2910                           
  2911 ;;
  2912 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2913 ;;
  2914 ;; *************** function _main *****************
  2915 ;; Defined at:
  2916 ;;		line 19 in file "main.c"
  2917 ;; Parameters:    Size  Location     Type
  2918 ;;		None
  2919 ;; Auto vars:     Size  Location     Type
  2920 ;;		None
  2921 ;; Return value:  Size  Location     Type
  2922 ;;                  1    wreg      void 
  2923 ;; Registers used:
  2924 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2925 ;; Tracked objects:
  2926 ;;		On entry : 0/0
  2927 ;;		On exit  : 0/0
  2928 ;;		Unchanged: 0/0
  2929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2930 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2931 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2932 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2933 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2934 ;;Total ram usage:        0 bytes
  2935 ;; Hardware stack levels required when called:   13
  2936 ;; This function calls:
  2937 ;;		_I2C_Master_Init
  2938 ;;		_Test
  2939 ;;		_UI
  2940 ;;		_initEEPROM
  2941 ;;		_initLCD
  2942 ;;		_initTime
  2943 ;;		_initUI
  2944 ;;		_logRun
  2945 ;;		_machineConfig
  2946 ;;		_sort
  2947 ;;		_stopSignals
  2948 ;; This function is called by:
  2949 ;;		Startup code after reset
  2950 ;; This function uses a non-reentrant model
  2951 ;;
  2952                           
  2953                           	psect	text0
  2954  004B48                     __ptext0:
  2955                           	opt stack 0
  2956  004B48                     _main:
  2957                           	opt stack 18
  2958                           
  2959                           ;main.c: 20: machineConfig();
  2960                           
  2961                           ;incstack = 0
  2962  004B48  ECB9  F02A         	call	_machineConfig	;wreg free
  2963                           
  2964                           ;main.c: 21: initLCD();
  2965  004B4C  EC43  F02C         	call	_initLCD	;wreg free
  2966                           
  2967                           ;main.c: 24: RTCflag = 0;
  2968  004B50  0E00               	movlw	0
  2969  004B52  0100               	movlb	0	; () banked
  2970  004B54  6FE5               	movwf	(_RTCflag+1)& (0+255),b
  2971  004B56  0E00               	movlw	0
  2972  004B58  6FE4               	movwf	_RTCflag& (0+255),b
  2973                           
  2974                           ;main.c: 25: if(RTCflag){
  2975  004B5A  0100               	movlb	0	; () banked
  2976  004B5C  51E4               	movf	_RTCflag& (0+255),w,b
  2977  004B5E  0100               	movlb	0	; () banked
  2978  004B60  11E5               	iorwf	(_RTCflag+1)& (0+255),w,b
  2979  004B62  B4D8               	btfsc	status,2,c
  2980  004B64  D016               	goto	l10404
  2981                           
  2982                           ; BSR set to: 0
  2983                           ;main.c: 26: initTime(0x42, 0x47, 0x17, 0x07, 0x08, 0x04, 0x17);
  2984  004B66  0E47               	movlw	71
  2985  004B68  0100               	movlb	0	; () banked
  2986  004B6A  6F80               	movwf	initTime@m& (0+255),b
  2987  004B6C  0E17               	movlw	23
  2988  004B6E  0100               	movlb	0	; () banked
  2989  004B70  6F81               	movwf	initTime@h& (0+255),b
  2990  004B72  0E07               	movlw	7
  2991  004B74  0100               	movlb	0	; () banked
  2992  004B76  6F82               	movwf	initTime@w& (0+255),b
  2993  004B78  0E08               	movlw	8
  2994  004B7A  0100               	movlb	0	; () banked
  2995  004B7C  6F83               	movwf	initTime@DD& (0+255),b
  2996  004B7E  0E04               	movlw	4
  2997  004B80  0100               	movlb	0	; () banked
  2998  004B82  6F84               	movwf	initTime@MM& (0+255),b
  2999  004B84  0E17               	movlw	23
  3000  004B86  0100               	movlb	0	; () banked
  3001  004B88  6F85               	movwf	initTime@YY& (0+255),b
  3002  004B8A  0E42               	movlw	66
  3003  004B8C  EC36  F02F         	call	_initTime
  3004                           
  3005                           ;main.c: 27: }
  3006  004B90  D00B               	goto	l10406
  3007  004B92                     l10404:
  3008                           
  3009                           ;main.c: 28: else{
  3010                           ;main.c: 29: I2C_Master_Init(10000);
  3011  004B92  0E10               	movlw	16
  3012  004B94  0100               	movlb	0	; () banked
  3013  004B96  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  3014  004B98  0E27               	movlw	39
  3015  004B9A  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  3016  004B9C  0E00               	movlw	0
  3017  004B9E  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  3018  004BA0  0E00               	movlw	0
  3019  004BA2  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  3020  004BA4  EC1C  F02B         	call	_I2C_Master_Init	;wreg free
  3021  004BA8                     l10406:
  3022                           
  3023                           ;main.c: 30: }
  3024                           ;main.c: 32: initUI();
  3025  004BA8  EC66  F02D         	call	_initUI	;wreg free
  3026                           
  3027                           ;main.c: 33: first = 1;
  3028  004BAC  0E00               	movlw	0
  3029  004BAE  0101               	movlb	1	; () banked
  3030  004BB0  6F3C               	movwf	(_first+1)& (0+255),b
  3031  004BB2  0E01               	movlw	1
  3032  004BB4  6F3B               	movwf	_first& (0+255),b
  3033                           
  3034                           ; BSR set to: 1
  3035                           ;main.c: 34: initEEPROM();
  3036  004BB6  EC7E  F02F         	call	_initEEPROM	;wreg free
  3037                           
  3038                           ;main.c: 45: switch(machine_state){
  3039                           
  3040                           ;main.c: 44: while(1){
  3041  004BBA  D018               	goto	l10430
  3042  004BBC                     l10412:
  3043                           
  3044                           ;main.c: 47: UI();
  3045  004BBC  EC09  F000         	call	_UI	;wreg free
  3046                           
  3047                           ;main.c: 48: break;
  3048  004BC0  D015               	goto	l10430
  3049  004BC2                     l10414:
  3050                           
  3051                           ;main.c: 50: sort();
  3052  004BC2  EC25  F02F         	call	_sort	;wreg free
  3053                           
  3054                           ;main.c: 51: break;
  3055  004BC6  D012               	goto	l10430
  3056  004BC8                     l10416:
  3057                           
  3058                           ;main.c: 53: stopSignals();
  3059  004BC8  EC56  F02F         	call	_stopSignals	;wreg free
  3060                           
  3061                           ;main.c: 54: logRun();
  3062  004BCC  ECC2  F020         	call	_logRun	;wreg free
  3063                           
  3064                           ;main.c: 55: first = 1;
  3065  004BD0  0E00               	movlw	0
  3066  004BD2  0101               	movlb	1	; () banked
  3067  004BD4  6F3C               	movwf	(_first+1)& (0+255),b
  3068  004BD6  0E01               	movlw	1
  3069  004BD8  6F3B               	movwf	_first& (0+255),b
  3070                           
  3071                           ; BSR set to: 1
  3072                           ;main.c: 56: UI();
  3073  004BDA  EC09  F000         	call	_UI	;wreg free
  3074                           
  3075                           ;main.c: 57: break;
  3076  004BDE  D006               	goto	l10430
  3077  004BE0                     l10424:
  3078                           
  3079                           ;main.c: 59: Test();
  3080  004BE0  EC7D  F022         	call	_Test	;wreg free
  3081                           
  3082                           ;main.c: 60: break;
  3083  004BE4  D003               	goto	l10430
  3084  004BE6                     l10426:
  3085                           
  3086                           ;main.c: 62: stopSignals();
  3087  004BE6  EC56  F02F         	call	_stopSignals	;wreg free
  3088  004BEA                     l513:
  3089  004BEA  D7FF               	goto	l513
  3090  004BEC                     l10430:
  3091  004BEC  0100               	movlb	0	; () banked
  3092  004BEE  51FC               	movf	_machine_state& (0+255),w,b
  3093                           
  3094                           ; Switch size 1, requested type "space"
  3095                           ; Number of cases is 5, Range of values is 0 to 4
  3096                           ; switch strategies available:
  3097                           ; Name         Instructions Cycles
  3098                           ; simple_byte           16     9 (average)
  3099                           ;	Chosen strategy is simple_byte
  3100  004BF0  0A00               	xorlw	0	; case 0
  3101  004BF2  B4D8               	btfsc	status,2,c
  3102  004BF4  D7E3               	goto	l10412
  3103  004BF6  0A01               	xorlw	1	; case 1
  3104  004BF8  B4D8               	btfsc	status,2,c
  3105  004BFA  D7E3               	goto	l10414
  3106  004BFC  0A03               	xorlw	3	; case 2
  3107  004BFE  B4D8               	btfsc	status,2,c
  3108  004C00  D7E3               	goto	l10416
  3109  004C02  0A01               	xorlw	1	; case 3
  3110  004C04  B4D8               	btfsc	status,2,c
  3111  004C06  D7EC               	goto	l10424
  3112  004C08  0A07               	xorlw	7	; case 4
  3113  004C0A  B4D8               	btfsc	status,2,c
  3114  004C0C  D7EC               	goto	l10426
  3115                           
  3116                           ; BSR set to: 0
  3117                           
  3118                           ; BSR set to: 0
  3119  004C0E  D7EE               	goto	l10430
  3120  004C10                     __end_of_main:
  3121                           	opt stack 0
  3122                           tblptru	equ	0xFF8
  3123                           tblptrh	equ	0xFF7
  3124                           tblptrl	equ	0xFF6
  3125                           tablat	equ	0xFF5
  3126                           postinc0	equ	0xFEE
  3127                           wreg	equ	0xFE8
  3128                           postdec1	equ	0xFE5
  3129                           fsr1l	equ	0xFE1
  3130                           status	equ	0xFD8
  3131                           
  3132 ;; *************** function _sort *****************
  3133 ;; Defined at:
  3134 ;;		line 71 in file "sort.c"
  3135 ;; Parameters:    Size  Location     Type
  3136 ;;		None
  3137 ;; Auto vars:     Size  Location     Type
  3138 ;;		None
  3139 ;; Return value:  Size  Location     Type
  3140 ;;                  1    wreg      void 
  3141 ;; Registers used:
  3142 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3143 ;; Tracked objects:
  3144 ;;		On entry : 0/0
  3145 ;;		On exit  : 0/0
  3146 ;;		Unchanged: 0/0
  3147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3148 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3149 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3150 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3151 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3152 ;;Total ram usage:        0 bytes
  3153 ;; Hardware stack levels used:    1
  3154 ;; Hardware stack levels required when called:   12
  3155 ;; This function calls:
  3156 ;;		_Distribution
  3157 ;;		_ID
  3158 ;;		_Loading
  3159 ;; This function is called by:
  3160 ;;		_main
  3161 ;; This function uses a non-reentrant model
  3162 ;;
  3163                           
  3164                           	psect	text1
  3165  005E4A                     __ptext1:
  3166                           	opt stack 0
  3167  005E4A                     _sort:
  3168                           	opt stack 18
  3169                           
  3170                           ;sort.c: 72: if(machine_state == Sorting_state){
  3171                           
  3172                           ; BSR set to: 0
  3173                           ;incstack = 0
  3174  005E4A  0100               	movlb	0	; () banked
  3175  005E4C  05FC               	decf	_machine_state& (0+255),w,b
  3176  005E4E  B4D8               	btfsc	status,2,c
  3177                           
  3178                           ; BSR set to: 0
  3179                           ;sort.c: 73: Loading();
  3180  005E50  EC9D  F00B         	call	_Loading	;wreg free
  3181                           
  3182                           ;sort.c: 74: }
  3183                           ;sort.c: 75: if(machine_state == Sorting_state){
  3184  005E54  0100               	movlb	0	; () banked
  3185  005E56  05FC               	decf	_machine_state& (0+255),w,b
  3186  005E58  B4D8               	btfsc	status,2,c
  3187                           
  3188                           ; BSR set to: 0
  3189                           ;sort.c: 76: ID();
  3190  005E5A  ECC9  F008         	call	_ID	;wreg free
  3191                           
  3192                           ;sort.c: 77: }
  3193                           ;sort.c: 78: if(machine_state == Sorting_state){
  3194  005E5E  0100               	movlb	0	; () banked
  3195  005E60  05FC               	decf	_machine_state& (0+255),w,b
  3196  005E62  A4D8               	btfss	status,2,c
  3197  005E64  0012               	return	
  3198                           
  3199                           ; BSR set to: 0
  3200                           ;sort.c: 79: Distribution();
  3201  005E66  ECF3  F023         	call	_Distribution	;wreg free
  3202  005E6A  0012               	return	
  3203  005E6C                     __end_of_sort:
  3204                           	opt stack 0
  3205                           tblptru	equ	0xFF8
  3206                           tblptrh	equ	0xFF7
  3207                           tblptrl	equ	0xFF6
  3208                           tablat	equ	0xFF5
  3209                           postinc0	equ	0xFEE
  3210                           wreg	equ	0xFE8
  3211                           postdec1	equ	0xFE5
  3212                           fsr1l	equ	0xFE1
  3213                           status	equ	0xFD8
  3214                           
  3215 ;; *************** function _Loading *****************
  3216 ;; Defined at:
  3217 ;;		line 83 in file "sort.c"
  3218 ;; Parameters:    Size  Location     Type
  3219 ;;		None
  3220 ;; Auto vars:     Size  Location     Type
  3221 ;;  i               2   62[BANK0 ] int 
  3222 ;;  i               2   60[BANK0 ] int 
  3223 ;;  i               2   58[BANK0 ] int 
  3224 ;;  i               2   56[BANK0 ] int 
  3225 ;;  i               2   54[BANK0 ] int 
  3226 ;;  j               2   66[BANK0 ] int 
  3227 ;;  i               2   64[BANK0 ] int 
  3228 ;;  addr            2   51[BANK0 ] unsigned short 
  3229 ;;  byte1           1   53[BANK0 ] unsigned char 
  3230 ;; Return value:  Size  Location     Type
  3231 ;;                  1    wreg      void 
  3232 ;; Registers used:
  3233 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3234 ;; Tracked objects:
  3235 ;;		On entry : 0/0
  3236 ;;		On exit  : 0/0
  3237 ;;		Unchanged: 0/0
  3238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3239 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3240 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3241 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3242 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3243 ;;Total ram usage:       19 bytes
  3244 ;; Hardware stack levels used:    1
  3245 ;; Hardware stack levels required when called:   11
  3246 ;; This function calls:
  3247 ;;		_EEPROM_read
  3248 ;;		_EEPROM_write
  3249 ;;		_delay_ms
  3250 ;;		_getIR
  3251 ;;		_getMAG
  3252 ;;		_initGlobalVars
  3253 ;;		_initServos
  3254 ;;		_initSortTimer
  3255 ;;		_lcdInst
  3256 ;;		_readIR
  3257 ;; This function is called by:
  3258 ;;		_sort
  3259 ;; This function uses a non-reentrant model
  3260 ;;
  3261                           
  3262                           	psect	text2
  3263  00173A                     __ptext2:
  3264                           	opt stack 0
  3265  00173A                     _Loading:
  3266                           	opt stack 18
  3267                           
  3268                           ;sort.c: 84: if(first){
  3269                           
  3270                           ;incstack = 0
  3271  00173A  0101               	movlb	1	; () banked
  3272  00173C  513B               	movf	_first& (0+255),w,b
  3273  00173E  0101               	movlb	1	; () banked
  3274  001740  113C               	iorwf	(_first+1)& (0+255),w,b
  3275  001742  B4D8               	btfsc	status,2,c
  3276  001744  D06A               	goto	l8004
  3277                           
  3278                           ; BSR set to: 1
  3279                           ;sort.c: 85: TMR1IE = 1;
  3280  001746  809D               	bsf	3997,0,c	;volatile
  3281                           
  3282                           ;sort.c: 86: TMR2IE = 1;
  3283  001748  829D               	bsf	3997,1,c	;volatile
  3284                           
  3285                           ;sort.c: 87: TMR3IE = 1;
  3286  00174A  82A0               	bsf	4000,1,c	;volatile
  3287                           
  3288                           ; BSR set to: 1
  3289                           ;sort.c: 88: initGlobalVars();
  3290  00174C  EC3A  F025         	call	_initGlobalVars	;wreg free
  3291                           
  3292                           ;sort.c: 89: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  3293  001750  0E01               	movlw	1
  3294  001752  ECAF  F02F         	call	_lcdInst
  3295  001756  0E68               	movlw	104
  3296  001758  0100               	movlb	0	; () banked
  3297  00175A  6FB1               	movwf	??_Loading& (0+255),b
  3298  00175C  0EE4               	movlw	228
  3299  00175E                     u10557:
  3300  00175E  2EE8               	decfsz	wreg,f,c
  3301  001760  D7FE               	bra	u10557
  3302  001762  2FB1               	decfsz	??_Loading& (0+255),f,b
  3303  001764  D7FC               	bra	u10557
  3304  001766  F000               	nop	
  3305                           
  3306                           ;sort.c: 90: initSortTimer();
  3307  001768  EC29  F027         	call	_initSortTimer	;wreg free
  3308                           
  3309                           ;sort.c: 91: LATCbits.LATC5 = 1;
  3310  00176C  8A8B               	bsf	3979,5,c	;volatile
  3311                           
  3312                           ;sort.c: 92: LATCbits.LATC6 = 1;
  3313  00176E  8C8B               	bsf	3979,6,c	;volatile
  3314                           
  3315                           ;sort.c: 97: sel = EEPROM_read(0);
  3316  001770  0E00               	movlw	0
  3317  001772  0100               	movlb	0	; () banked
  3318  001774  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  3319  001776  0E00               	movlw	0
  3320  001778  6F80               	movwf	EEPROM_read@address& (0+255),b
  3321  00177A  EC72  F02F         	call	_EEPROM_read	;wreg free
  3322  00177E  0100               	movlb	0	; () banked
  3323  001780  6FFD               	movwf	_sel& (0+255),b
  3324                           
  3325                           ; BSR set to: 0
  3326                           ;sort.c: 98: unsigned short addr = 1 + 11 * sel;
  3327  001782  0100               	movlb	0	; () banked
  3328  001784  51FD               	movf	_sel& (0+255),w,b
  3329  001786  0D0B               	mullw	11
  3330  001788  0E01               	movlw	1
  3331  00178A  24F3               	addwf	prodl,w,c
  3332  00178C  0100               	movlb	0	; () banked
  3333  00178E  6FB3               	movwf	Loading@addr& (0+255),b
  3334  001790  0E00               	movlw	0
  3335  001792  20F4               	addwfc	prodh,w,c
  3336  001794  0100               	movlb	0	; () banked
  3337  001796  6FB4               	movwf	(Loading@addr+1)& (0+255),b
  3338                           
  3339                           ; BSR set to: 0
  3340                           ;sort.c: 99: unsigned char byte1 = 0b01111111;
  3341  001798  0E7F               	movlw	127
  3342  00179A  0100               	movlb	0	; () banked
  3343  00179C  6FB5               	movwf	Loading@byte1& (0+255),b
  3344                           
  3345                           ; BSR set to: 0
  3346                           ;sort.c: 100: EEPROM_write(addr, byte1);
  3347  00179E  C0B3  F0AB         	movff	Loading@addr,EEPROM_write@address
  3348  0017A2  C0B4  F0AC         	movff	Loading@addr+1,EEPROM_write@address+1
  3349  0017A6  C0B5  F0AD         	movff	Loading@byte1,EEPROM_write@data
  3350  0017AA  EC7F  F023         	call	_EEPROM_write	;wreg free
  3351                           
  3352                           ;sort.c: 103: LATBbits.LATB2 = 0;
  3353  0017AE  948A               	bcf	3978,2,c	;volatile
  3354                           
  3355                           ;sort.c: 105: for(int i=0; i<46; i++){
  3356  0017B0  0E00               	movlw	0
  3357  0017B2  0100               	movlb	0	; () banked
  3358  0017B4  6FC1               	movwf	(Loading@i+1)& (0+255),b
  3359  0017B6  0E00               	movlw	0
  3360  0017B8  6FC0               	movwf	Loading@i& (0+255),b
  3361                           
  3362                           ; BSR set to: 0
  3363  0017BA  0100               	movlb	0	; () banked
  3364  0017BC  BFC1               	btfsc	(Loading@i+1)& (0+255),7,b
  3365  0017BE  D008               	goto	l7994
  3366  0017C0  0100               	movlb	0	; () banked
  3367  0017C2  51C1               	movf	(Loading@i+1)& (0+255),w,b
  3368  0017C4  E126               	bnz	l800
  3369  0017C6  0E2E               	movlw	46
  3370  0017C8  0100               	movlb	0	; () banked
  3371  0017CA  5DC0               	subwf	Loading@i& (0+255),w,b
  3372  0017CC  B0D8               	btfsc	status,0,c
  3373  0017CE  D021               	goto	l800
  3374  0017D0                     l7994:
  3375                           
  3376                           ; BSR set to: 0
  3377                           ;sort.c: 106: LATBbits.LATB2 = !LATBbits.LATB2;
  3378  0017D0  B48A               	btfsc	3978,2,c	;volatile
  3379  0017D2  D004               	goto	u6810
  3380  0017D4  0100               	movlb	0	; () banked
  3381  0017D6  6BB1               	clrf	??_Loading& (0+255),b
  3382  0017D8  2BB1               	incf	??_Loading& (0+255),f,b
  3383  0017DA  D002               	goto	u6828
  3384  0017DC                     u6810:
  3385  0017DC  0100               	movlb	0	; () banked
  3386  0017DE  6BB1               	clrf	??_Loading& (0+255),b
  3387  0017E0                     u6828:
  3388  0017E0  0100               	movlb	0	; () banked
  3389  0017E2  47B1               	rlncf	??_Loading& (0+255),f,b
  3390  0017E4  47B1               	rlncf	??_Loading& (0+255),f,b
  3391  0017E6  508A               	movf	3978,w,c	;volatile
  3392  0017E8  0100               	movlb	0	; () banked
  3393  0017EA  19B1               	xorwf	??_Loading& (0+255),w,b
  3394  0017EC  0BFB               	andlw	-5
  3395  0017EE  19B1               	xorwf	??_Loading& (0+255),w,b
  3396  0017F0  6E8A               	movwf	3978,c	;volatile
  3397                           
  3398                           ; BSR set to: 0
  3399                           ;sort.c: 107: delay_ms(45-i);
  3400  0017F2  0100               	movlb	0	; () banked
  3401  0017F4  51C0               	movf	Loading@i& (0+255),w,b
  3402  0017F6  0800               	sublw	0
  3403  0017F8  0F2D               	addlw	45
  3404  0017FA  ECC5  F02E         	call	_delay_ms
  3405  0017FE  0100               	movlb	0	; () banked
  3406  001800  4BC0               	infsnz	Loading@i& (0+255),f,b
  3407  001802  2BC1               	incf	(Loading@i+1)& (0+255),f,b
  3408                           
  3409                           ; BSR set to: 0
  3410  001804  0100               	movlb	0	; () banked
  3411  001806  BFC1               	btfsc	(Loading@i+1)& (0+255),7,b
  3412  001808  D7E3               	goto	l7994
  3413  00180A  0100               	movlb	0	; () banked
  3414  00180C  51C1               	movf	(Loading@i+1)& (0+255),w,b
  3415  00180E  E101               	bnz	u6830
  3416  001810  D7DA               	goto	L1
  3417  001812                     u6830:
  3418  001812                     l800:
  3419                           
  3420                           ; BSR set to: 0
  3421                           ;sort.c: 108: }
  3422                           ;sort.c: 109: LATBbits.LATB2 = 1;
  3423  001812  848A               	bsf	3978,2,c	;volatile
  3424                           
  3425                           ; BSR set to: 0
  3426                           ;sort.c: 112: initServos();
  3427  001814  EC66  F029         	call	_initServos	;wreg free
  3428                           
  3429                           ;sort.c: 113: }
  3430  001818  0012               	return	
  3431  00181A                     l8004:
  3432                           
  3433                           ;sort.c: 114: else{
  3434                           ;sort.c: 117: if(!f_loadingNewCan){
  3435  00181A  0100               	movlb	0	; () banked
  3436  00181C  51EC               	movf	_f_loadingNewCan& (0+255),w,b
  3437  00181E  0100               	movlb	0	; () banked
  3438  001820  11ED               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3439  001822  A4D8               	btfss	status,2,c
  3440  001824  D01D               	goto	l8020
  3441                           
  3442                           ; BSR set to: 0
  3443                           ;sort.c: 119: getIR(0);
  3444  001826  0E00               	movlw	0
  3445  001828  0100               	movlb	0	; () banked
  3446  00182A  6F89               	movwf	(getIR@port+1)& (0+255),b
  3447  00182C  0E00               	movlw	0
  3448  00182E  6F88               	movwf	getIR@port& (0+255),b
  3449  001830  ECE6  F028         	call	_getIR	;wreg free
  3450                           
  3451                           ;sort.c: 121: if(!f_loadingNewCan){
  3452  001834  0100               	movlb	0	; () banked
  3453  001836  51EC               	movf	_f_loadingNewCan& (0+255),w,b
  3454  001838  0100               	movlb	0	; () banked
  3455  00183A  11ED               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3456  00183C  B4D8               	btfsc	status,2,c
  3457  00183E  0012               	return	
  3458                           
  3459                           ; BSR set to: 0
  3460                           ;sort.c: 125: else{
  3461                           ;sort.c: 126: count_total++;
  3462                           
  3463                           ; BSR set to: 0
  3464                           
  3465                           ; BSR set to: 0
  3466                           ;sort.c: 123: }
  3467                           
  3468                           ; BSR set to: 0
  3469                           ;sort.c: 122: return;
  3470  001840  0100               	movlb	0	; () banked
  3471  001842  4BFE               	infsnz	_count_total& (0+255),f,b
  3472  001844  2BFF               	incf	(_count_total+1)& (0+255),f,b
  3473                           
  3474                           ; BSR set to: 0
  3475                           ;sort.c: 127: if(count_total == 12){
  3476  001846  0E0C               	movlw	12
  3477  001848  0100               	movlb	0	; () banked
  3478  00184A  19FE               	xorwf	_count_total& (0+255),w,b
  3479  00184C  0100               	movlb	0	; () banked
  3480  00184E  11FF               	iorwf	(_count_total+1)& (0+255),w,b
  3481  001850  A4D8               	btfss	status,2,c
  3482  001852  0012               	return	
  3483                           
  3484                           ; BSR set to: 0
  3485                           ;sort.c: 128: f_lastCan = 1;
  3486  001854  0E00               	movlw	0
  3487  001856  0100               	movlb	0	; () banked
  3488  001858  6FEB               	movwf	(_f_lastCan+1)& (0+255),b
  3489  00185A  0E01               	movlw	1
  3490  00185C  6FEA               	movwf	_f_lastCan& (0+255),b
  3491                           
  3492                           ; BSR set to: 0
  3493                           ;sort.c: 129: }
  3494                           ;sort.c: 130: }
  3495                           ;sort.c: 131: }
  3496                           
  3497                           ; BSR set to: 0
  3498  00185E  0012               	return	
  3499  001860                     l8020:
  3500                           
  3501                           ; BSR set to: 0
  3502                           ;sort.c: 134: else if(f_ID_receive){
  3503  001860  0101               	movlb	1	; () banked
  3504  001862  5131               	movf	_f_ID_receive& (0+255),w,b
  3505  001864  0101               	movlb	1	; () banked
  3506  001866  1132               	iorwf	(_f_ID_receive+1)& (0+255),w,b
  3507  001868  B4D8               	btfsc	status,2,c
  3508  00186A  0012               	return	
  3509                           
  3510                           ; BSR set to: 1
  3511                           ;sort.c: 135: f_most_recent_sort_time = 1;
  3512  00186C  0E00               	movlw	0
  3513  00186E  0101               	movlb	1	; () banked
  3514  001870  6F3A               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
  3515  001872  0E01               	movlw	1
  3516  001874  6F39               	movwf	_f_most_recent_sort_time& (0+255),b
  3517                           
  3518                           ;sort.c: 136: f_loadingNewCan = 0;
  3519  001876  0E00               	movlw	0
  3520  001878  0100               	movlb	0	; () banked
  3521  00187A  6FED               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3522  00187C  0E00               	movlw	0
  3523  00187E  6FEC               	movwf	_f_loadingNewCan& (0+255),b
  3524                           
  3525                           ; BSR set to: 0
  3526                           ;sort.c: 137: _delay((unsigned long)((400)*(32000000/4000.0)));
  3527  001880  0E11               	movlw	17
  3528  001882  0100               	movlb	0	; () banked
  3529  001884  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3530  001886  0E3C               	movlw	60
  3531  001888  0100               	movlb	0	; () banked
  3532  00188A  6FB1               	movwf	??_Loading& (0+255),b
  3533  00188C  0ECB               	movlw	203
  3534  00188E                     u10567:
  3535  00188E  2EE8               	decfsz	wreg,f,c
  3536  001890  D7FE               	bra	u10567
  3537  001892  2FB1               	decfsz	??_Loading& (0+255),f,b
  3538  001894  D7FC               	bra	u10567
  3539  001896  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3540  001898  D7FA               	bra	u10567
  3541                           
  3542                           ;sort.c: 138: LATBbits.LATB2 = 0;
  3543  00189A  948A               	bcf	3978,2,c	;volatile
  3544                           
  3545                           ;sort.c: 142: f_arm_position = 1;
  3546  00189C  0E00               	movlw	0
  3547  00189E  0100               	movlb	0	; () banked
  3548  0018A0  6FE9               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  3549  0018A2  0E01               	movlw	1
  3550  0018A4  6FE8               	movwf	_f_arm_position& (0+255),b	;volatile
  3551                           
  3552                           ; BSR set to: 0
  3553                           ;sort.c: 144: delay_ms(750);
  3554  0018A6  0EEE               	movlw	238
  3555  0018A8  ECC5  F02E         	call	_delay_ms
  3556                           
  3557                           ;sort.c: 145: getMAG();
  3558  0018AC  EC34  F02D         	call	_getMAG	;wreg free
  3559                           
  3560                           ;sort.c: 146: sensor_outputs[0] = MAG_signal;
  3561  0018B0  C0E2  F0DA         	movff	_MAG_signal,_sensor_outputs
  3562  0018B4  C0E3  F0DB         	movff	_MAG_signal+1,_sensor_outputs+1
  3563                           
  3564                           ;sort.c: 148: TMR2IE = 0;
  3565  0018B8  929D               	bcf	3997,1,c	;volatile
  3566                           
  3567                           ;sort.c: 149: if(sensor_outputs[0]){
  3568  0018BA  0100               	movlb	0	; () banked
  3569  0018BC  51DA               	movf	_sensor_outputs& (0+255),w,b
  3570  0018BE  0100               	movlb	0	; () banked
  3571  0018C0  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3572  0018C2  B4D8               	btfsc	status,2,c
  3573  0018C4  D01D               	goto	l8052
  3574                           
  3575                           ; BSR set to: 0
  3576                           ;sort.c: 150: for(int i = 0; i<2500; i++){
  3577  0018C6  0E00               	movlw	0
  3578  0018C8  0100               	movlb	0	; () banked
  3579  0018CA  6FB7               	movwf	(Loading@i_1125+1)& (0+255),b
  3580  0018CC  0E00               	movlw	0
  3581  0018CE  6FB6               	movwf	Loading@i_1125& (0+255),b
  3582  0018D0                     l8042:
  3583                           
  3584                           ; BSR set to: 0
  3585  0018D0  0100               	movlb	0	; () banked
  3586  0018D2  BFB7               	btfsc	(Loading@i_1125+1)& (0+255),7,b
  3587  0018D4  D008               	goto	l810
  3588  0018D6  0EC4               	movlw	196
  3589  0018D8  0100               	movlb	0	; () banked
  3590  0018DA  5DB6               	subwf	Loading@i_1125& (0+255),w,b
  3591  0018DC  0E09               	movlw	9
  3592  0018DE  0100               	movlb	0	; () banked
  3593  0018E0  59B7               	subwfb	(Loading@i_1125+1)& (0+255),w,b
  3594  0018E2  B0D8               	btfsc	status,0,c
  3595  0018E4  D02B               	goto	l812
  3596  0018E6                     l810:
  3597                           
  3598                           ; BSR set to: 0
  3599                           ;sort.c: 151: LATAbits.LATA4 = 1;
  3600  0018E6  8889               	bsf	3977,4,c	;volatile
  3601                           
  3602                           ; BSR set to: 0
  3603                           ;sort.c: 152: _delay((unsigned long)((75)*(32000000/4000000.0)));
  3604  0018E8  0EC8               	movlw	200
  3605  0018EA                     u10577:
  3606  0018EA  2EE8               	decfsz	wreg,f,c
  3607  0018EC  D7FE               	bra	u10577
  3608                           
  3609                           ;sort.c: 153: LATAbits.LATA4 = 0;
  3610  0018EE  9889               	bcf	3977,4,c	;volatile
  3611                           
  3612                           ;sort.c: 154: _delay((unsigned long)((25)*(32000000/4000000.0)));
  3613  0018F0  0E42               	movlw	66
  3614  0018F2                     u10587:
  3615  0018F2  2EE8               	decfsz	wreg,f,c
  3616  0018F4  D7FE               	bra	u10587
  3617  0018F6  D000               	nop2	
  3618  0018F8  0100               	movlb	0	; () banked
  3619  0018FA  4BB6               	infsnz	Loading@i_1125& (0+255),f,b
  3620  0018FC  2BB7               	incf	(Loading@i_1125+1)& (0+255),f,b
  3621  0018FE  D7E8               	goto	l8042
  3622  001900                     l8052:
  3623                           
  3624                           ; BSR set to: 0
  3625                           ;sort.c: 157: else{
  3626                           ;sort.c: 158: for(int i = 0; i<2500; i++){
  3627  001900  0E00               	movlw	0
  3628  001902  0100               	movlb	0	; () banked
  3629  001904  6FB9               	movwf	(Loading@i_1134+1)& (0+255),b
  3630  001906  0E00               	movlw	0
  3631  001908  6FB8               	movwf	Loading@i_1134& (0+255),b
  3632  00190A                     l8054:
  3633                           
  3634                           ; BSR set to: 0
  3635  00190A  0100               	movlb	0	; () banked
  3636  00190C  BFB9               	btfsc	(Loading@i_1134+1)& (0+255),7,b
  3637  00190E  D008               	goto	l813
  3638  001910  0EC4               	movlw	196
  3639  001912  0100               	movlb	0	; () banked
  3640  001914  5DB8               	subwf	Loading@i_1134& (0+255),w,b
  3641  001916  0E09               	movlw	9
  3642  001918  0100               	movlb	0	; () banked
  3643  00191A  59B9               	subwfb	(Loading@i_1134+1)& (0+255),w,b
  3644  00191C  B0D8               	btfsc	status,0,c
  3645  00191E  D00E               	goto	l812
  3646  001920                     l813:
  3647                           
  3648                           ; BSR set to: 0
  3649                           ;sort.c: 159: LATAbits.LATA4 = 1;
  3650  001920  8889               	bsf	3977,4,c	;volatile
  3651                           
  3652                           ; BSR set to: 0
  3653                           ;sort.c: 160: _delay((unsigned long)((50)*(32000000/4000000.0)));
  3654  001922  0E85               	movlw	133
  3655  001924                     u10597:
  3656  001924  2EE8               	decfsz	wreg,f,c
  3657  001926  D7FE               	bra	u10597
  3658  001928  F000               	nop	
  3659                           
  3660                           ;sort.c: 161: LATAbits.LATA4 = 0;
  3661  00192A  9889               	bcf	3977,4,c	;volatile
  3662                           
  3663                           ;sort.c: 162: _delay((unsigned long)((50)*(32000000/4000000.0)));
  3664  00192C  0E85               	movlw	133
  3665  00192E                     u10607:
  3666  00192E  2EE8               	decfsz	wreg,f,c
  3667  001930  D7FE               	bra	u10607
  3668  001932  F000               	nop	
  3669  001934  0100               	movlb	0	; () banked
  3670  001936  4BB8               	infsnz	Loading@i_1134& (0+255),f,b
  3671  001938  2BB9               	incf	(Loading@i_1134+1)& (0+255),f,b
  3672  00193A  D7E7               	goto	l8054
  3673  00193C                     l812:
  3674                           
  3675                           ; BSR set to: 0
  3676                           ;sort.c: 163: }
  3677                           ;sort.c: 164: }
  3678                           ;sort.c: 165: TMR2IE = 1;
  3679  00193C  829D               	bsf	3997,1,c	;volatile
  3680                           
  3681                           ; BSR set to: 0
  3682                           ;sort.c: 166: _delay((unsigned long)((350)*(32000000/4000.0)));
  3683  00193E  0E0F               	movlw	15
  3684  001940  0100               	movlb	0	; () banked
  3685  001942  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3686  001944  0E35               	movlw	53
  3687  001946  0100               	movlb	0	; () banked
  3688  001948  6FB1               	movwf	??_Loading& (0+255),b
  3689  00194A  0E51               	movlw	81
  3690  00194C                     u10617:
  3691  00194C  2EE8               	decfsz	wreg,f,c
  3692  00194E  D7FE               	bra	u10617
  3693  001950  2FB1               	decfsz	??_Loading& (0+255),f,b
  3694  001952  D7FC               	bra	u10617
  3695  001954  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3696  001956  D7FA               	bra	u10617
  3697                           
  3698                           ;sort.c: 168: readIR(0);
  3699  001958  0E00               	movlw	0
  3700  00195A  0100               	movlb	0	; () banked
  3701  00195C  6F83               	movwf	(readIR@ana_port+1)& (0+255),b
  3702  00195E  0E00               	movlw	0
  3703  001960  6F82               	movwf	readIR@ana_port& (0+255),b
  3704  001962  ECCF  F027         	call	_readIR	;wreg free
  3705                           
  3706                           ;sort.c: 169: if(IR_signal==1){
  3707  001966  0100               	movlb	0	; () banked
  3708  001968  05E0               	decf	_IR_signal& (0+255),w,b
  3709  00196A  0100               	movlb	0	; () banked
  3710  00196C  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  3711  00196E  A4D8               	btfss	status,2,c
  3712  001970  D1A8               	goto	l8196
  3713                           
  3714                           ; BSR set to: 0
  3715                           ;sort.c: 170: _delay((unsigned long)((70)*(32000000/4000.0)));
  3716  001972  0E03               	movlw	3
  3717  001974  0100               	movlb	0	; () banked
  3718  001976  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3719  001978  0ED8               	movlw	216
  3720  00197A  0100               	movlb	0	; () banked
  3721  00197C  6FB1               	movwf	??_Loading& (0+255),b
  3722  00197E  0E41               	movlw	65
  3723  001980                     u10627:
  3724  001980  2EE8               	decfsz	wreg,f,c
  3725  001982  D7FE               	bra	u10627
  3726  001984  2FB1               	decfsz	??_Loading& (0+255),f,b
  3727  001986  D7FC               	bra	u10627
  3728  001988  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3729  00198A  D7FA               	bra	u10627
  3730  00198C  D000               	nop2	
  3731                           
  3732                           ;sort.c: 171: readIR(0);
  3733  00198E  0E00               	movlw	0
  3734  001990  0100               	movlb	0	; () banked
  3735  001992  6F83               	movwf	(readIR@ana_port+1)& (0+255),b
  3736  001994  0E00               	movlw	0
  3737  001996  6F82               	movwf	readIR@ana_port& (0+255),b
  3738  001998  ECCF  F027         	call	_readIR	;wreg free
  3739                           
  3740                           ;sort.c: 172: if(IR_signal==1){
  3741  00199C  0100               	movlb	0	; () banked
  3742  00199E  05E0               	decf	_IR_signal& (0+255),w,b
  3743  0019A0  0100               	movlb	0	; () banked
  3744  0019A2  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  3745  0019A4  A4D8               	btfss	status,2,c
  3746  0019A6  D041               	goto	l8102
  3747                           
  3748                           ; BSR set to: 0
  3749                           ;sort.c: 173: if(sensor_outputs[0]){
  3750  0019A8  0100               	movlb	0	; () banked
  3751  0019AA  51DA               	movf	_sensor_outputs& (0+255),w,b
  3752  0019AC  0100               	movlb	0	; () banked
  3753  0019AE  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3754  0019B0  B4D8               	btfsc	status,2,c
  3755  0019B2  D01D               	goto	l8090
  3756                           
  3757                           ; BSR set to: 0
  3758                           ;sort.c: 174: for(int i = 0; i<2500; i++){
  3759  0019B4  0E00               	movlw	0
  3760  0019B6  0100               	movlb	0	; () banked
  3761  0019B8  6FBB               	movwf	(Loading@i_1136+1)& (0+255),b
  3762  0019BA  0E00               	movlw	0
  3763  0019BC  6FBA               	movwf	Loading@i_1136& (0+255),b
  3764  0019BE                     l8080:
  3765                           
  3766                           ; BSR set to: 0
  3767  0019BE  0100               	movlb	0	; () banked
  3768  0019C0  BFBB               	btfsc	(Loading@i_1136+1)& (0+255),7,b
  3769  0019C2  D008               	goto	l818
  3770  0019C4  0EC4               	movlw	196
  3771  0019C6  0100               	movlb	0	; () banked
  3772  0019C8  5DBA               	subwf	Loading@i_1136& (0+255),w,b
  3773  0019CA  0E09               	movlw	9
  3774  0019CC  0100               	movlb	0	; () banked
  3775  0019CE  59BB               	subwfb	(Loading@i_1136+1)& (0+255),w,b
  3776  0019D0  B0D8               	btfsc	status,0,c
  3777  0019D2  D02B               	goto	l8102
  3778  0019D4                     l818:
  3779                           
  3780                           ; BSR set to: 0
  3781                           ;sort.c: 175: LATAbits.LATA4 = 1;
  3782  0019D4  8889               	bsf	3977,4,c	;volatile
  3783                           
  3784                           ; BSR set to: 0
  3785                           ;sort.c: 176: _delay((unsigned long)((75)*(32000000/4000000.0)));
  3786  0019D6  0EC8               	movlw	200
  3787  0019D8                     u10637:
  3788  0019D8  2EE8               	decfsz	wreg,f,c
  3789  0019DA  D7FE               	bra	u10637
  3790                           
  3791                           ;sort.c: 177: LATAbits.LATA4 = 0;
  3792  0019DC  9889               	bcf	3977,4,c	;volatile
  3793                           
  3794                           ;sort.c: 178: _delay((unsigned long)((25)*(32000000/4000000.0)));
  3795  0019DE  0E42               	movlw	66
  3796  0019E0                     u10647:
  3797  0019E0  2EE8               	decfsz	wreg,f,c
  3798  0019E2  D7FE               	bra	u10647
  3799  0019E4  D000               	nop2	
  3800  0019E6  0100               	movlb	0	; () banked
  3801  0019E8  4BBA               	infsnz	Loading@i_1136& (0+255),f,b
  3802  0019EA  2BBB               	incf	(Loading@i_1136+1)& (0+255),f,b
  3803  0019EC  D7E8               	goto	l8080
  3804  0019EE                     l8090:
  3805                           
  3806                           ; BSR set to: 0
  3807                           ;sort.c: 181: else{
  3808                           ;sort.c: 182: for(int i = 0; i<2500; i++){
  3809  0019EE  0E00               	movlw	0
  3810  0019F0  0100               	movlb	0	; () banked
  3811  0019F2  6FBD               	movwf	(Loading@i_1137+1)& (0+255),b
  3812  0019F4  0E00               	movlw	0
  3813  0019F6  6FBC               	movwf	Loading@i_1137& (0+255),b
  3814  0019F8                     l8092:
  3815                           
  3816                           ; BSR set to: 0
  3817  0019F8  0100               	movlb	0	; () banked
  3818  0019FA  BFBD               	btfsc	(Loading@i_1137+1)& (0+255),7,b
  3819  0019FC  D008               	goto	l821
  3820  0019FE  0EC4               	movlw	196
  3821  001A00  0100               	movlb	0	; () banked
  3822  001A02  5DBC               	subwf	Loading@i_1137& (0+255),w,b
  3823  001A04  0E09               	movlw	9
  3824  001A06  0100               	movlb	0	; () banked
  3825  001A08  59BD               	subwfb	(Loading@i_1137+1)& (0+255),w,b
  3826  001A0A  B0D8               	btfsc	status,0,c
  3827  001A0C  D00E               	goto	l8102
  3828  001A0E                     l821:
  3829                           
  3830                           ; BSR set to: 0
  3831                           ;sort.c: 183: LATAbits.LATA4 = 1;
  3832  001A0E  8889               	bsf	3977,4,c	;volatile
  3833                           
  3834                           ; BSR set to: 0
  3835                           ;sort.c: 184: _delay((unsigned long)((50)*(32000000/4000000.0)));
  3836  001A10  0E85               	movlw	133
  3837  001A12                     u10657:
  3838  001A12  2EE8               	decfsz	wreg,f,c
  3839  001A14  D7FE               	bra	u10657
  3840  001A16  F000               	nop	
  3841                           
  3842                           ;sort.c: 185: LATAbits.LATA4 = 0;
  3843  001A18  9889               	bcf	3977,4,c	;volatile
  3844                           
  3845                           ;sort.c: 186: _delay((unsigned long)((50)*(32000000/4000000.0)));
  3846  001A1A  0E85               	movlw	133
  3847  001A1C                     u10667:
  3848  001A1C  2EE8               	decfsz	wreg,f,c
  3849  001A1E  D7FE               	bra	u10667
  3850  001A20  F000               	nop	
  3851  001A22  0100               	movlb	0	; () banked
  3852  001A24  4BBC               	infsnz	Loading@i_1137& (0+255),f,b
  3853  001A26  2BBD               	incf	(Loading@i_1137+1)& (0+255),f,b
  3854  001A28  D7E7               	goto	l8092
  3855  001A2A                     l8102:
  3856                           
  3857                           ; BSR set to: 0
  3858                           ;sort.c: 187: }
  3859                           ;sort.c: 188: }
  3860                           ;sort.c: 189: }
  3861                           ;sort.c: 191: _delay((unsigned long)((350)*(32000000/4000.0)));
  3862  001A2A  0E0F               	movlw	15
  3863  001A2C  0100               	movlb	0	; () banked
  3864  001A2E  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3865  001A30  0E35               	movlw	53
  3866  001A32  0100               	movlb	0	; () banked
  3867  001A34  6FB1               	movwf	??_Loading& (0+255),b
  3868  001A36  0E51               	movlw	81
  3869  001A38                     u10677:
  3870  001A38  2EE8               	decfsz	wreg,f,c
  3871  001A3A  D7FE               	bra	u10677
  3872  001A3C  2FB1               	decfsz	??_Loading& (0+255),f,b
  3873  001A3E  D7FC               	bra	u10677
  3874  001A40  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3875  001A42  D7FA               	bra	u10677
  3876                           
  3877                           ;sort.c: 193: int j = 0;
  3878  001A44  0E00               	movlw	0
  3879  001A46  0100               	movlb	0	; () banked
  3880  001A48  6FC3               	movwf	(Loading@j+1)& (0+255),b
  3881  001A4A  0E00               	movlw	0
  3882  001A4C  6FC2               	movwf	Loading@j& (0+255),b
  3883                           
  3884                           ;sort.c: 194: while(IR_signal == 1){
  3885  001A4E  D132               	goto	l8194
  3886  001A50                     l8106:
  3887                           
  3888                           ; BSR set to: 0
  3889                           ;sort.c: 195: readIR(0);
  3890  001A50  0E00               	movlw	0
  3891  001A52  0100               	movlb	0	; () banked
  3892  001A54  6F83               	movwf	(readIR@ana_port+1)& (0+255),b
  3893  001A56  0E00               	movlw	0
  3894  001A58  6F82               	movwf	readIR@ana_port& (0+255),b
  3895  001A5A  ECCF  F027         	call	_readIR	;wreg free
  3896                           
  3897                           ;sort.c: 196: if(j == 3 || j == 4){
  3898  001A5E  0E03               	movlw	3
  3899  001A60  0100               	movlb	0	; () banked
  3900  001A62  19C2               	xorwf	Loading@j& (0+255),w,b
  3901  001A64  0100               	movlb	0	; () banked
  3902  001A66  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3903  001A68  B4D8               	btfsc	status,2,c
  3904  001A6A  D007               	goto	l8112
  3905                           
  3906                           ; BSR set to: 0
  3907  001A6C  0E04               	movlw	4
  3908  001A6E  0100               	movlb	0	; () banked
  3909  001A70  19C2               	xorwf	Loading@j& (0+255),w,b
  3910  001A72  0100               	movlb	0	; () banked
  3911  001A74  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3912  001A76  A4D8               	btfss	status,2,c
  3913  001A78  D005               	goto	l8114
  3914  001A7A                     l8112:
  3915                           
  3916                           ; BSR set to: 0
  3917                           ;sort.c: 197: f_arm_position = 0;
  3918  001A7A  0E00               	movlw	0
  3919  001A7C  0100               	movlb	0	; () banked
  3920  001A7E  6FE9               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  3921  001A80  0E00               	movlw	0
  3922  001A82  D030               	goto	L2
  3923  001A84                     l8114:
  3924                           
  3925                           ; BSR set to: 0
  3926                           ;sort.c: 199: else if(j == 5 || j == 6){
  3927  001A84  0E05               	movlw	5
  3928  001A86  0100               	movlb	0	; () banked
  3929  001A88  19C2               	xorwf	Loading@j& (0+255),w,b
  3930  001A8A  0100               	movlb	0	; () banked
  3931  001A8C  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3932  001A8E  B4D8               	btfsc	status,2,c
  3933  001A90  D007               	goto	l831
  3934                           
  3935                           ; BSR set to: 0
  3936  001A92  0E06               	movlw	6
  3937  001A94  0100               	movlb	0	; () banked
  3938  001A96  19C2               	xorwf	Loading@j& (0+255),w,b
  3939  001A98  0100               	movlb	0	; () banked
  3940  001A9A  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3941  001A9C  A4D8               	btfss	status,2,c
  3942  001A9E  D002               	goto	l8118
  3943  001AA0                     l831:
  3944                           
  3945                           ; BSR set to: 0
  3946                           ;sort.c: 200: LATBbits.LATB2 = 1;
  3947  001AA0  848A               	bsf	3978,2,c	;volatile
  3948                           
  3949                           ;sort.c: 201: }
  3950  001AA2  D042               	goto	l828
  3951  001AA4                     l8118:
  3952                           
  3953                           ; BSR set to: 0
  3954                           ;sort.c: 202: else if(j == 7 || j == 8 || j == 9 || j == 10){
  3955  001AA4  0E07               	movlw	7
  3956  001AA6  0100               	movlb	0	; () banked
  3957  001AA8  19C2               	xorwf	Loading@j& (0+255),w,b
  3958  001AAA  0100               	movlb	0	; () banked
  3959  001AAC  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3960  001AAE  B4D8               	btfsc	status,2,c
  3961  001AB0  D015               	goto	l8126
  3962                           
  3963                           ; BSR set to: 0
  3964  001AB2  0E08               	movlw	8
  3965  001AB4  0100               	movlb	0	; () banked
  3966  001AB6  19C2               	xorwf	Loading@j& (0+255),w,b
  3967  001AB8  0100               	movlb	0	; () banked
  3968  001ABA  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3969  001ABC  B4D8               	btfsc	status,2,c
  3970  001ABE  D00E               	goto	l8126
  3971                           
  3972                           ; BSR set to: 0
  3973  001AC0  0E09               	movlw	9
  3974  001AC2  0100               	movlb	0	; () banked
  3975  001AC4  19C2               	xorwf	Loading@j& (0+255),w,b
  3976  001AC6  0100               	movlb	0	; () banked
  3977  001AC8  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3978  001ACA  B4D8               	btfsc	status,2,c
  3979  001ACC  D007               	goto	l8126
  3980                           
  3981                           ; BSR set to: 0
  3982  001ACE  0E0A               	movlw	10
  3983  001AD0  0100               	movlb	0	; () banked
  3984  001AD2  19C2               	xorwf	Loading@j& (0+255),w,b
  3985  001AD4  0100               	movlb	0	; () banked
  3986  001AD6  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3987  001AD8  A4D8               	btfss	status,2,c
  3988  001ADA  D006               	goto	l833
  3989  001ADC                     l8126:
  3990                           
  3991                           ; BSR set to: 0
  3992                           ;sort.c: 203: f_arm_position = 1;
  3993  001ADC  0E00               	movlw	0
  3994  001ADE  0100               	movlb	0	; () banked
  3995  001AE0  6FE9               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  3996  001AE2  0E01               	movlw	1
  3997  001AE4                     L2:
  3998  001AE4  6FE8               	movwf	_f_arm_position& (0+255),b	;volatile
  3999                           
  4000                           ;sort.c: 204: }
  4001  001AE6  D020               	goto	l828
  4002  001AE8                     l833:
  4003                           
  4004                           ; BSR set to: 0
  4005                           ;sort.c: 205: else if(j % 2 == 0){
  4006  001AE8  0100               	movlb	0	; () banked
  4007  001AEA  B1C2               	btfsc	Loading@j& (0+255),0,b
  4008  001AEC  D01D               	goto	l828
  4009                           
  4010                           ; BSR set to: 0
  4011                           ;sort.c: 206: LATBbits.LATB2 = !LATBbits.LATB2;
  4012  001AEE  B48A               	btfsc	3978,2,c	;volatile
  4013  001AF0  D004               	goto	u7090
  4014  001AF2  0100               	movlb	0	; () banked
  4015  001AF4  6BB1               	clrf	??_Loading& (0+255),b
  4016  001AF6  2BB1               	incf	??_Loading& (0+255),f,b
  4017  001AF8  D002               	goto	u7108
  4018  001AFA                     u7090:
  4019  001AFA  0100               	movlb	0	; () banked
  4020  001AFC  6BB1               	clrf	??_Loading& (0+255),b
  4021  001AFE                     u7108:
  4022  001AFE  0100               	movlb	0	; () banked
  4023  001B00  47B1               	rlncf	??_Loading& (0+255),f,b
  4024  001B02  47B1               	rlncf	??_Loading& (0+255),f,b
  4025  001B04  508A               	movf	3978,w,c	;volatile
  4026  001B06  0100               	movlb	0	; () banked
  4027  001B08  19B1               	xorwf	??_Loading& (0+255),w,b
  4028  001B0A  0BFB               	andlw	-5
  4029  001B0C  19B1               	xorwf	??_Loading& (0+255),w,b
  4030  001B0E  6E8A               	movwf	3978,c	;volatile
  4031                           
  4032                           ;sort.c: 207: f_arm_position = !f_arm_position;
  4033  001B10  0100               	movlb	0	; () banked
  4034  001B12  51E8               	movf	_f_arm_position& (0+255),w,b	;volatile
  4035  001B14  0100               	movlb	0	; () banked
  4036  001B16  11E9               	iorwf	(_f_arm_position+1)& (0+255),w,b	;volatile
  4037  001B18  A4D8               	btfss	status,2,c
  4038  001B1A  D002               	goto	u7110
  4039  001B1C  0E01               	movlw	1
  4040  001B1E  D001               	goto	u7120
  4041  001B20                     u7110:
  4042  001B20  0E00               	movlw	0
  4043  001B22                     u7120:
  4044  001B22  0100               	movlb	0	; () banked
  4045  001B24  6FE8               	movwf	_f_arm_position& (0+255),b	;volatile
  4046  001B26  6BE9               	clrf	(_f_arm_position+1)& (0+255),b	;volatile
  4047  001B28                     l828:
  4048                           
  4049                           ; BSR set to: 0
  4050                           ;sort.c: 208: }
  4051                           ;sort.c: 211: if(IR_signal==1){
  4052  001B28  0100               	movlb	0	; () banked
  4053  001B2A  05E0               	decf	_IR_signal& (0+255),w,b
  4054  001B2C  0100               	movlb	0	; () banked
  4055  001B2E  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  4056  001B30  A4D8               	btfss	status,2,c
  4057  001B32  D09F               	goto	l8182
  4058                           
  4059                           ; BSR set to: 0
  4060                           ;sort.c: 212: _delay((unsigned long)((350)*(32000000/4000.0)));
  4061  001B34  0E0F               	movlw	15
  4062  001B36  0100               	movlb	0	; () banked
  4063  001B38  6FB2               	movwf	(??_Loading+1)& (0+255),b
  4064  001B3A  0E35               	movlw	53
  4065  001B3C  0100               	movlb	0	; () banked
  4066  001B3E  6FB1               	movwf	??_Loading& (0+255),b
  4067  001B40  0E51               	movlw	81
  4068  001B42                     u10687:
  4069  001B42  2EE8               	decfsz	wreg,f,c
  4070  001B44  D7FE               	bra	u10687
  4071  001B46  2FB1               	decfsz	??_Loading& (0+255),f,b
  4072  001B48  D7FC               	bra	u10687
  4073  001B4A  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  4074  001B4C  D7FA               	bra	u10687
  4075                           
  4076                           ;sort.c: 213: readIR(0);
  4077  001B4E  0E00               	movlw	0
  4078  001B50  0100               	movlb	0	; () banked
  4079  001B52  6F83               	movwf	(readIR@ana_port+1)& (0+255),b
  4080  001B54  0E00               	movlw	0
  4081  001B56  6F82               	movwf	readIR@ana_port& (0+255),b
  4082  001B58  ECCF  F027         	call	_readIR	;wreg free
  4083                           
  4084                           ;sort.c: 214: if(IR_signal==1){
  4085  001B5C  0100               	movlb	0	; () banked
  4086  001B5E  05E0               	decf	_IR_signal& (0+255),w,b
  4087  001B60  0100               	movlb	0	; () banked
  4088  001B62  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  4089  001B64  A4D8               	btfss	status,2,c
  4090  001B66  D081               	goto	l839
  4091                           
  4092                           ; BSR set to: 0
  4093                           ;sort.c: 215: if(sensor_outputs[0]){
  4094  001B68  0100               	movlb	0	; () banked
  4095  001B6A  51DA               	movf	_sensor_outputs& (0+255),w,b
  4096  001B6C  0100               	movlb	0	; () banked
  4097  001B6E  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  4098  001B70  B4D8               	btfsc	status,2,c
  4099  001B72  D011               	goto	l840
  4100                           
  4101                           ; BSR set to: 0
  4102                           ;sort.c: 216: LATAbits.LATA4 = 1;
  4103  001B74  8889               	bsf	3977,4,c	;volatile
  4104                           
  4105                           ; BSR set to: 0
  4106                           ;sort.c: 217: _delay((unsigned long)((250)*(32000000/4000.0)));
  4107  001B76  0E0B               	movlw	11
  4108  001B78  0100               	movlb	0	; () banked
  4109  001B7A  6FB2               	movwf	(??_Loading+1)& (0+255),b
  4110  001B7C  0E26               	movlw	38
  4111  001B7E  0100               	movlb	0	; () banked
  4112  001B80  6FB1               	movwf	??_Loading& (0+255),b
  4113  001B82  0E5D               	movlw	93
  4114  001B84                     u10697:
  4115  001B84  2EE8               	decfsz	wreg,f,c
  4116  001B86  D7FE               	bra	u10697
  4117  001B88  2FB1               	decfsz	??_Loading& (0+255),f,b
  4118  001B8A  D7FC               	bra	u10697
  4119  001B8C  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  4120  001B8E  D7FA               	bra	u10697
  4121  001B90  D000               	nop2	
  4122                           
  4123                           ;sort.c: 218: LATAbits.LATA4 = 0;
  4124  001B92  9889               	bcf	3977,4,c	;volatile
  4125                           
  4126                           ;sort.c: 219: }
  4127  001B94  D06A               	goto	l839
  4128  001B96                     l840:
  4129                           
  4130                           ; BSR set to: 0
  4131                           ;sort.c: 220: else{
  4132                           ;sort.c: 221: TMR2IE = 0;
  4133  001B96  929D               	bcf	3997,1,c	;volatile
  4134                           
  4135                           ; BSR set to: 0
  4136                           ;sort.c: 222: for(int i = 0; i<2500; i++){
  4137  001B98  0E00               	movlw	0
  4138  001B9A  0100               	movlb	0	; () banked
  4139  001B9C  6FBF               	movwf	(Loading@i_1139+1)& (0+255),b
  4140  001B9E  0E00               	movlw	0
  4141  001BA0  6FBE               	movwf	Loading@i_1139& (0+255),b
  4142  001BA2                     l8146:
  4143                           
  4144                           ; BSR set to: 0
  4145  001BA2  0100               	movlb	0	; () banked
  4146  001BA4  BFBF               	btfsc	(Loading@i_1139+1)& (0+255),7,b
  4147  001BA6  D041               	goto	l8174
  4148  001BA8  0EC4               	movlw	196
  4149  001BAA  0100               	movlb	0	; () banked
  4150  001BAC  5DBE               	subwf	Loading@i_1139& (0+255),w,b
  4151  001BAE  0E09               	movlw	9
  4152  001BB0  0100               	movlb	0	; () banked
  4153  001BB2  59BF               	subwfb	(Loading@i_1139+1)& (0+255),w,b
  4154  001BB4  B0D8               	btfsc	status,0,c
  4155  001BB6  D058               	goto	l843
  4156  001BB8  D038               	goto	l8174
  4157  001BBA                     l845:
  4158                           
  4159                           ; BSR set to: 0
  4160                           ;sort.c: 225: LATAbits.LATA4 = 1;
  4161  001BBA  8889               	bsf	3977,4,c	;volatile
  4162                           
  4163                           ; BSR set to: 0
  4164                           ;sort.c: 226: _delay((unsigned long)((75)*(32000000/4000000.0)));
  4165  001BBC  0EC8               	movlw	200
  4166  001BBE                     u10707:
  4167  001BBE  2EE8               	decfsz	wreg,f,c
  4168  001BC0  D7FE               	bra	u10707
  4169                           
  4170                           ;sort.c: 227: LATAbits.LATA4 = 0;
  4171  001BC2  9889               	bcf	3977,4,c	;volatile
  4172                           
  4173                           ;sort.c: 228: _delay((unsigned long)((25)*(32000000/4000000.0)));
  4174  001BC4  0E42               	movlw	66
  4175  001BC6                     u10717:
  4176  001BC6  2EE8               	decfsz	wreg,f,c
  4177  001BC8  D7FE               	bra	u10717
  4178  001BCA  D01C               	goto	L3
  4179  001BCC                     l847:
  4180                           
  4181                           ; BSR set to: 0
  4182                           ;sort.c: 231: LATAbits.LATA4 = 1;
  4183  001BCC  8889               	bsf	3977,4,c	;volatile
  4184                           
  4185                           ; BSR set to: 0
  4186                           ;sort.c: 232: _delay((unsigned long)((80)*(32000000/4000000.0)));
  4187  001BCE  0ED5               	movlw	213
  4188  001BD0                     u10727:
  4189  001BD0  2EE8               	decfsz	wreg,f,c
  4190  001BD2  D7FE               	bra	u10727
  4191  001BD4  F000               	nop	
  4192                           
  4193                           ;sort.c: 233: LATAbits.LATA4 = 0;
  4194  001BD6  9889               	bcf	3977,4,c	;volatile
  4195                           
  4196                           ;sort.c: 234: _delay((unsigned long)((20)*(32000000/4000000.0)));
  4197  001BD8  0E35               	movlw	53
  4198  001BDA                     u10737:
  4199  001BDA  2EE8               	decfsz	wreg,f,c
  4200  001BDC  D7FE               	bra	u10737
  4201  001BDE  D01D               	goto	L4
  4202  001BE0                     l848:
  4203                           
  4204                           ; BSR set to: 0
  4205                           ;sort.c: 237: LATAbits.LATA4 = 1;
  4206  001BE0  8889               	bsf	3977,4,c	;volatile
  4207                           
  4208                           ; BSR set to: 0
  4209                           ;sort.c: 238: _delay((unsigned long)((85)*(32000000/4000000.0)));
  4210  001BE2  0EE2               	movlw	226
  4211  001BE4                     u10747:
  4212  001BE4  2EE8               	decfsz	wreg,f,c
  4213  001BE6  D7FE               	bra	u10747
  4214  001BE8  D000               	nop2	
  4215                           
  4216                           ;sort.c: 239: LATAbits.LATA4 = 0;
  4217  001BEA  9889               	bcf	3977,4,c	;volatile
  4218                           
  4219                           ;sort.c: 240: _delay((unsigned long)((15)*(32000000/4000000.0)));
  4220  001BEC  0E28               	movlw	40
  4221  001BEE                     u10757:
  4222  001BEE  2EE8               	decfsz	wreg,f,c
  4223  001BF0  D7FE               	bra	u10757
  4224                           
  4225                           ;sort.c: 241: break;
  4226  001BF2  D036               	goto	l8176
  4227  001BF4                     l849:
  4228                           
  4229                           ; BSR set to: 0
  4230                           ;sort.c: 243: LATAbits.LATA4 = 1;
  4231  001BF4  8889               	bsf	3977,4,c	;volatile
  4232                           
  4233                           ; BSR set to: 0
  4234                           ;sort.c: 244: _delay((unsigned long)((90)*(32000000/4000000.0)));
  4235  001BF6  0EF0               	movlw	240
  4236  001BF8                     u10767:
  4237  001BF8  2EE8               	decfsz	wreg,f,c
  4238  001BFA  D7FE               	bra	u10767
  4239                           
  4240                           ;sort.c: 245: LATAbits.LATA4 = 0;
  4241  001BFC  9889               	bcf	3977,4,c	;volatile
  4242                           
  4243                           ;sort.c: 246: _delay((unsigned long)((10)*(32000000/4000000.0)));
  4244  001BFE  0E1A               	movlw	26
  4245  001C00                     u10777:
  4246  001C00  2EE8               	decfsz	wreg,f,c
  4247  001C02  D7FE               	bra	u10777
  4248  001C04                     L3:
  4249  001C04  D000               	nop2	
  4250                           
  4251                           ;sort.c: 247: break;
  4252  001C06  D02C               	goto	l8176
  4253  001C08                     l850:
  4254                           
  4255                           ; BSR set to: 0
  4256                           ;sort.c: 249: LATAbits.LATA4 = 1;
  4257  001C08  8889               	bsf	3977,4,c	;volatile
  4258                           
  4259                           ; BSR set to: 0
  4260                           ;sort.c: 250: _delay((unsigned long)((95)*(32000000/4000000.0)));
  4261  001C0A  0EFD               	movlw	253
  4262  001C0C                     u10787:
  4263  001C0C  2EE8               	decfsz	wreg,f,c
  4264  001C0E  D7FE               	bra	u10787
  4265  001C10  F000               	nop	
  4266                           
  4267                           ;sort.c: 251: LATAbits.LATA4 = 0;
  4268  001C12  9889               	bcf	3977,4,c	;volatile
  4269                           
  4270                           ;sort.c: 252: _delay((unsigned long)((50)*(32000000/4000000.0)));
  4271  001C14  0E85               	movlw	133
  4272  001C16                     u10797:
  4273  001C16  2EE8               	decfsz	wreg,f,c
  4274  001C18  D7FE               	bra	u10797
  4275  001C1A                     L4:
  4276  001C1A  F000               	nop	
  4277                           
  4278                           ;sort.c: 253: break;
  4279  001C1C  D021               	goto	l8176
  4280  001C1E                     l851:
  4281                           
  4282                           ; BSR set to: 0
  4283                           ;sort.c: 255: LATAbits.LATA4 = 1;
  4284  001C1E  8889               	bsf	3977,4,c	;volatile
  4285                           
  4286                           ; BSR set to: 0
  4287                           ;sort.c: 256: _delay((unsigned long)((100)*(32000000/4000000.0)));
  4288  001C20  0EA0               	movlw	160
  4289  001C22                     u10807:
  4290  001C22  D000               	nop2	
  4291  001C24  2EE8               	decfsz	wreg,f,c
  4292  001C26  D7FD               	bra	u10807
  4293                           
  4294                           ;sort.c: 258: }
  4295                           
  4296                           ;sort.c: 257: break;
  4297  001C28  D01B               	goto	l8176
  4298  001C2A                     l8174:
  4299  001C2A  C0C2  F0B1         	movff	Loading@j,??_Loading
  4300  001C2E  C0C3  F0B2         	movff	Loading@j+1,??_Loading+1
  4301                           
  4302                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4303                           ; Switch size 1, requested type "space"
  4304                           ; Number of cases is 1, Range of values is 0 to 0
  4305                           ; switch strategies available:
  4306                           ; Name         Instructions Cycles
  4307                           ; simple_byte            4     3 (average)
  4308                           ;	Chosen strategy is simple_byte
  4309  001C32  0100               	movlb	0	; () banked
  4310  001C34  51B2               	movf	(??_Loading+1)& (0+255),w,b
  4311  001C36  0A00               	xorlw	0	; case 0
  4312  001C38  A4D8               	btfss	status,2,c
  4313  001C3A  D7F1               	goto	l851
  4314                           
  4315                           ; BSR set to: 0
  4316                           ; Switch size 1, requested type "space"
  4317                           ; Number of cases is 5, Range of values is 0 to 4
  4318                           ; switch strategies available:
  4319                           ; Name         Instructions Cycles
  4320                           ; simple_byte           16     9 (average)
  4321                           ;	Chosen strategy is simple_byte
  4322  001C3C  0100               	movlb	0	; () banked
  4323  001C3E  51B1               	movf	??_Loading& (0+255),w,b
  4324  001C40  0A00               	xorlw	0	; case 0
  4325  001C42  B4D8               	btfsc	status,2,c
  4326  001C44  D7BA               	goto	l845
  4327  001C46  0A01               	xorlw	1	; case 1
  4328  001C48  B4D8               	btfsc	status,2,c
  4329  001C4A  D7C0               	goto	l847
  4330  001C4C  0A03               	xorlw	3	; case 2
  4331  001C4E  B4D8               	btfsc	status,2,c
  4332  001C50  D7C7               	goto	l848
  4333  001C52  0A01               	xorlw	1	; case 3
  4334  001C54  B4D8               	btfsc	status,2,c
  4335  001C56  D7CE               	goto	l849
  4336  001C58  0A07               	xorlw	7	; case 4
  4337  001C5A  B4D8               	btfsc	status,2,c
  4338  001C5C  D7D5               	goto	l850
  4339  001C5E  D7DF               	goto	l851
  4340  001C60                     l8176:
  4341  001C60  0100               	movlb	0	; () banked
  4342  001C62  4BBE               	infsnz	Loading@i_1139& (0+255),f,b
  4343  001C64  2BBF               	incf	(Loading@i_1139+1)& (0+255),f,b
  4344  001C66  D79D               	goto	l8146
  4345  001C68                     l843:
  4346                           
  4347                           ; BSR set to: 0
  4348                           ;sort.c: 259: }
  4349                           ;sort.c: 260: TMR2IE = 1;
  4350  001C68  829D               	bsf	3997,1,c	;volatile
  4351  001C6A                     l839:
  4352                           
  4353                           ;sort.c: 261: }
  4354                           ;sort.c: 262: }
  4355                           ;sort.c: 263: LATAbits.LATA4 = 0;
  4356  001C6A  9889               	bcf	3977,4,c	;volatile
  4357                           
  4358                           ;sort.c: 264: j++;
  4359  001C6C  0100               	movlb	0	; () banked
  4360  001C6E  4BC2               	infsnz	Loading@j& (0+255),f,b
  4361  001C70  2BC3               	incf	(Loading@j+1)& (0+255),f,b
  4362  001C72                     l8182:
  4363                           
  4364                           ; BSR set to: 0
  4365                           ;sort.c: 265: }
  4366                           ;sort.c: 267: if(!IR_signal){
  4367  001C72  0100               	movlb	0	; () banked
  4368  001C74  51E0               	movf	_IR_signal& (0+255),w,b
  4369  001C76  0100               	movlb	0	; () banked
  4370  001C78  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  4371  001C7A  A4D8               	btfss	status,2,c
  4372  001C7C  D01B               	goto	l8194
  4373                           
  4374                           ; BSR set to: 0
  4375                           ;sort.c: 268: _delay((unsigned long)((500)*(32000000/4000.0)));
  4376  001C7E  0E15               	movlw	21
  4377  001C80  0100               	movlb	0	; () banked
  4378  001C82  6FB2               	movwf	(??_Loading+1)& (0+255),b
  4379  001C84  0E4B               	movlw	75
  4380  001C86  0100               	movlb	0	; () banked
  4381  001C88  6FB1               	movwf	??_Loading& (0+255),b
  4382  001C8A  0EBE               	movlw	190
  4383  001C8C                     u10817:
  4384  001C8C  2EE8               	decfsz	wreg,f,c
  4385  001C8E  D7FE               	bra	u10817
  4386  001C90  2FB1               	decfsz	??_Loading& (0+255),f,b
  4387  001C92  D7FC               	bra	u10817
  4388  001C94  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  4389  001C96  D7FA               	bra	u10817
  4390  001C98  F000               	nop	
  4391                           
  4392                           ;sort.c: 269: readIR(0);
  4393  001C9A  0E00               	movlw	0
  4394  001C9C  0100               	movlb	0	; () banked
  4395  001C9E  6F83               	movwf	(readIR@ana_port+1)& (0+255),b
  4396  001CA0  0E00               	movlw	0
  4397  001CA2  6F82               	movwf	readIR@ana_port& (0+255),b
  4398  001CA4  ECCF  F027         	call	_readIR	;wreg free
  4399                           
  4400                           ;sort.c: 270: if(IR_signal==1){
  4401  001CA8  0100               	movlb	0	; () banked
  4402  001CAA  05E0               	decf	_IR_signal& (0+255),w,b
  4403  001CAC  0100               	movlb	0	; () banked
  4404  001CAE  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  4405  001CB0  A4D8               	btfss	status,2,c
  4406  001CB2  D006               	goto	l855
  4407  001CB4                     l8194:
  4408                           
  4409                           ; BSR set to: 0
  4410  001CB4  0100               	movlb	0	; () banked
  4411  001CB6  05E0               	decf	_IR_signal& (0+255),w,b
  4412  001CB8  0100               	movlb	0	; () banked
  4413  001CBA  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  4414  001CBC  B4D8               	btfsc	status,2,c
  4415  001CBE  D6C8               	goto	l8106
  4416  001CC0                     l855:
  4417                           
  4418                           ; BSR set to: 0
  4419                           ;sort.c: 275: }
  4420                           ;sort.c: 276: }
  4421                           ;sort.c: 277: }
  4422                           ;sort.c: 278: LATBbits.LATB2 = 0;
  4423  001CC0  948A               	bcf	3978,2,c	;volatile
  4424  001CC2                     l8196:
  4425                           
  4426                           ; BSR set to: 0
  4427                           ;sort.c: 279: }
  4428                           ;sort.c: 280: f_can_coming_to_ID = 1;
  4429  001CC2  0E00               	movlw	0
  4430  001CC4  0101               	movlb	1	; () banked
  4431  001CC6  6F34               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  4432  001CC8  0E01               	movlw	1
  4433  001CCA  6F33               	movwf	_f_can_coming_to_ID& (0+255),b
  4434                           
  4435                           ; BSR set to: 1
  4436                           
  4437                           ; BSR set to: 1
  4438  001CCC  0012               	return	
  4439  001CCE                     __end_of_Loading:
  4440                           	opt stack 0
  4441                           tblptru	equ	0xFF8
  4442                           tblptrh	equ	0xFF7
  4443                           tblptrl	equ	0xFF6
  4444                           tablat	equ	0xFF5
  4445                           prodh	equ	0xFF4
  4446                           prodl	equ	0xFF3
  4447                           postinc0	equ	0xFEE
  4448                           wreg	equ	0xFE8
  4449                           postdec1	equ	0xFE5
  4450                           fsr1l	equ	0xFE1
  4451                           status	equ	0xFD8
  4452                           
  4453 ;; *************** function _initSortTimer *****************
  4454 ;; Defined at:
  4455 ;;		line 478 in file "sort.c"
  4456 ;; Parameters:    Size  Location     Type
  4457 ;;		None
  4458 ;; Auto vars:     Size  Location     Type
  4459 ;;  i               2    8[BANK0 ] int 
  4460 ;; Return value:  Size  Location     Type
  4461 ;;                  1    wreg      void 
  4462 ;; Registers used:
  4463 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4464 ;; Tracked objects:
  4465 ;;		On entry : 0/0
  4466 ;;		On exit  : 0/0
  4467 ;;		Unchanged: 0/0
  4468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4469 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4470 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4471 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4472 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4473 ;;Total ram usage:        5 bytes
  4474 ;; Hardware stack levels used:    1
  4475 ;; Hardware stack levels required when called:   10
  4476 ;; This function calls:
  4477 ;;		_getRTC
  4478 ;; This function is called by:
  4479 ;;		_Loading
  4480 ;; This function uses a non-reentrant model
  4481 ;;
  4482                           
  4483                           	psect	text3
  4484  004E52                     __ptext3:
  4485                           	opt stack 0
  4486  004E52                     _initSortTimer:
  4487                           	opt stack 18
  4488                           
  4489                           ;sort.c: 480: getRTC();
  4490                           
  4491                           ;incstack = 0
  4492  004E52  EC61  F028         	call	_getRTC	;wreg free
  4493                           
  4494                           ;sort.c: 481: for(int i = 0; i < 7; i++){
  4495  004E56  0E00               	movlw	0
  4496  004E58  0100               	movlb	0	; () banked
  4497  004E5A  6F89               	movwf	(initSortTimer@i+1)& (0+255),b
  4498  004E5C  0E00               	movlw	0
  4499  004E5E  6F88               	movwf	initSortTimer@i& (0+255),b
  4500  004E60                     l7492:
  4501                           
  4502                           ; BSR set to: 0
  4503  004E60  0100               	movlb	0	; () banked
  4504  004E62  BF89               	btfsc	(initSortTimer@i+1)& (0+255),7,b
  4505  004E64  D008               	goto	l7496
  4506  004E66  0100               	movlb	0	; () banked
  4507  004E68  5189               	movf	(initSortTimer@i+1)& (0+255),w,b
  4508  004E6A  E140               	bnz	l7502
  4509  004E6C  0E07               	movlw	7
  4510  004E6E  0100               	movlb	0	; () banked
  4511  004E70  5D88               	subwf	initSortTimer@i& (0+255),w,b
  4512  004E72  B0D8               	btfsc	status,0,c
  4513  004E74  D03B               	goto	l7502
  4514  004E76                     l7496:
  4515                           
  4516                           ; BSR set to: 0
  4517                           ;sort.c: 482: startTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  4518  004E76  0E1C               	movlw	low _time
  4519  004E78  0100               	movlb	0	; () banked
  4520  004E7A  2588               	addwf	initSortTimer@i& (0+255),w,b
  4521  004E7C  6ED9               	movwf	fsr2l,c
  4522  004E7E  0E01               	movlw	high _time
  4523  004E80  0100               	movlb	0	; () banked
  4524  004E82  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  4525  004E84  6EDA               	movwf	fsr2h,c
  4526  004E86  50DF               	movf	indf2,w,c
  4527  004E88  0100               	movlb	0	; () banked
  4528  004E8A  6F85               	movwf	??_initSortTimer& (0+255),b
  4529  004E8C  0100               	movlb	0	; () banked
  4530  004E8E  3B85               	swapf	??_initSortTimer& (0+255),f,b
  4531  004E90  0E0F               	movlw	15
  4532  004E92  1785               	andwf	??_initSortTimer& (0+255),f,b
  4533  004E94  0E0F               	movlw	15
  4534  004E96  0100               	movlb	0	; () banked
  4535  004E98  1785               	andwf	??_initSortTimer& (0+255),f,b
  4536  004E9A  0100               	movlb	0	; () banked
  4537  004E9C  5185               	movf	??_initSortTimer& (0+255),w,b
  4538  004E9E  0D0A               	mullw	10
  4539  004EA0  0E1C               	movlw	low _time
  4540  004EA2  0100               	movlb	0	; () banked
  4541  004EA4  2588               	addwf	initSortTimer@i& (0+255),w,b
  4542  004EA6  6ED9               	movwf	fsr2l,c
  4543  004EA8  0E01               	movlw	high _time
  4544  004EAA  0100               	movlb	0	; () banked
  4545  004EAC  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  4546  004EAE  6EDA               	movwf	fsr2h,c
  4547  004EB0  50DF               	movf	indf2,w,c
  4548  004EB2  0B0F               	andlw	15
  4549  004EB4  0100               	movlb	0	; () banked
  4550  004EB6  6F86               	movwf	(??_initSortTimer+1)& (0+255),b
  4551  004EB8  6B87               	clrf	(??_initSortTimer+2)& (0+255),b
  4552  004EBA  50F3               	movf	prodl,w,c
  4553  004EBC  0100               	movlb	0	; () banked
  4554  004EBE  2786               	addwf	(??_initSortTimer+1)& (0+255),f,b
  4555  004EC0  50F4               	movf	prodh,w,c
  4556  004EC2  0100               	movlb	0	; () banked
  4557  004EC4  2387               	addwfc	(??_initSortTimer+2)& (0+255),f,b
  4558  004EC6  90D8               	bcf	status,0,c
  4559  004EC8  0100               	movlb	0	; () banked
  4560  004ECA  3588               	rlcf	initSortTimer@i& (0+255),w,b
  4561  004ECC  6ED9               	movwf	fsr2l,c
  4562  004ECE  0100               	movlb	0	; () banked
  4563  004ED0  3589               	rlcf	(initSortTimer@i+1)& (0+255),w,b
  4564  004ED2  6EDA               	movwf	fsr2h,c
  4565  004ED4  0E0E               	movlw	low _startTime
  4566  004ED6  26D9               	addwf	fsr2l,f,c
  4567  004ED8  0E01               	movlw	high _startTime
  4568  004EDA  22DA               	addwfc	fsr2h,f,c
  4569  004EDC  C086  FFDE         	movff	??_initSortTimer+1,postinc2
  4570  004EE0  C087  FFDD         	movff	??_initSortTimer+2,postdec2
  4571                           
  4572                           ; BSR set to: 0
  4573  004EE4  0100               	movlb	0	; () banked
  4574  004EE6  4B88               	infsnz	initSortTimer@i& (0+255),f,b
  4575  004EE8  2B89               	incf	(initSortTimer@i+1)& (0+255),f,b
  4576  004EEA  D7BA               	goto	l7492
  4577  004EEC                     l7502:
  4578                           
  4579                           ; BSR set to: 0
  4580                           ;sort.c: 483: }
  4581                           ;sort.c: 485: T0CON = 0b00010111;
  4582  004EEC  0E17               	movlw	23
  4583  004EEE  6ED5               	movwf	4053,c	;volatile
  4584                           
  4585                           ;sort.c: 494: TMR0H = 0b10000101;
  4586  004EF0  0E85               	movlw	133
  4587  004EF2  6ED7               	movwf	4055,c	;volatile
  4588                           
  4589                           ;sort.c: 495: TMR0L = 0b11101110;
  4590  004EF4  0EEE               	movlw	238
  4591  004EF6  6ED6               	movwf	4054,c	;volatile
  4592                           
  4593                           ; BSR set to: 0
  4594                           ;sort.c: 496: TMR0ON = 1;
  4595  004EF8  8ED5               	bsf	4053,7,c	;volatile
  4596                           
  4597                           ; BSR set to: 0
  4598  004EFA  0012               	return		;funcret
  4599  004EFC                     __end_of_initSortTimer:
  4600                           	opt stack 0
  4601                           tblptru	equ	0xFF8
  4602                           tblptrh	equ	0xFF7
  4603                           tblptrl	equ	0xFF6
  4604                           tablat	equ	0xFF5
  4605                           prodh	equ	0xFF4
  4606                           prodl	equ	0xFF3
  4607                           postinc0	equ	0xFEE
  4608                           wreg	equ	0xFE8
  4609                           postdec1	equ	0xFE5
  4610                           fsr1l	equ	0xFE1
  4611                           indf2	equ	0xFDF
  4612                           postinc2	equ	0xFDE
  4613                           postdec2	equ	0xFDD
  4614                           fsr2h	equ	0xFDA
  4615                           fsr2l	equ	0xFD9
  4616                           status	equ	0xFD8
  4617                           
  4618 ;; *************** function _initGlobalVars *****************
  4619 ;; Defined at:
  4620 ;;		line 442 in file "sort.c"
  4621 ;; Parameters:    Size  Location     Type
  4622 ;;		None
  4623 ;; Auto vars:     Size  Location     Type
  4624 ;;		None
  4625 ;; Return value:  Size  Location     Type
  4626 ;;                  1    wreg      void 
  4627 ;; Registers used:
  4628 ;;		wreg, status,2
  4629 ;; Tracked objects:
  4630 ;;		On entry : 0/0
  4631 ;;		On exit  : 0/0
  4632 ;;		Unchanged: 0/0
  4633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4634 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4635 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4636 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4637 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4638 ;;Total ram usage:        0 bytes
  4639 ;; Hardware stack levels used:    1
  4640 ;; Hardware stack levels required when called:    7
  4641 ;; This function calls:
  4642 ;;		Nothing
  4643 ;; This function is called by:
  4644 ;;		_Loading
  4645 ;; This function uses a non-reentrant model
  4646 ;;
  4647                           
  4648                           	psect	text4
  4649  004A74                     __ptext4:
  4650                           	opt stack 0
  4651  004A74                     _initGlobalVars:
  4652                           	opt stack 21
  4653                           
  4654                           ;sort.c: 444: first = 0;
  4655                           
  4656                           ; BSR set to: 0
  4657                           ;incstack = 0
  4658  004A74  0E00               	movlw	0
  4659  004A76  0101               	movlb	1	; () banked
  4660  004A78  6F3C               	movwf	(_first+1)& (0+255),b
  4661  004A7A  0E00               	movlw	0
  4662  004A7C  6F3B               	movwf	_first& (0+255),b
  4663                           
  4664                           ;sort.c: 447: f_loadingNewCan = 0;
  4665  004A7E  0E00               	movlw	0
  4666  004A80  0100               	movlb	0	; () banked
  4667  004A82  6FED               	movwf	(_f_loadingNewCan+1)& (0+255),b
  4668  004A84  0E00               	movlw	0
  4669  004A86  6FEC               	movwf	_f_loadingNewCan& (0+255),b
  4670                           
  4671                           ;sort.c: 448: f_lastCan = 0;
  4672  004A88  0E00               	movlw	0
  4673  004A8A  0100               	movlb	0	; () banked
  4674  004A8C  6FEB               	movwf	(_f_lastCan+1)& (0+255),b
  4675  004A8E  0E00               	movlw	0
  4676  004A90  6FEA               	movwf	_f_lastCan& (0+255),b
  4677                           
  4678                           ;sort.c: 449: f_ID_receive = 1;
  4679  004A92  0E00               	movlw	0
  4680  004A94  0101               	movlb	1	; () banked
  4681  004A96  6F32               	movwf	(_f_ID_receive+1)& (0+255),b
  4682  004A98  0E01               	movlw	1
  4683  004A9A  6F31               	movwf	_f_ID_receive& (0+255),b
  4684                           
  4685                           ;sort.c: 450: f_can_coming_to_ID = 0;
  4686  004A9C  0E00               	movlw	0
  4687  004A9E  0101               	movlb	1	; () banked
  4688  004AA0  6F34               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  4689  004AA2  0E00               	movlw	0
  4690  004AA4  6F33               	movwf	_f_can_coming_to_ID& (0+255),b
  4691                           
  4692                           ;sort.c: 451: f_can_coming_to_distribution = 0;
  4693  004AA6  0E00               	movlw	0
  4694  004AA8  0101               	movlb	1	; () banked
  4695  004AAA  6F36               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  4696  004AAC  0E00               	movlw	0
  4697  004AAE  6F35               	movwf	_f_can_coming_to_distribution& (0+255),b
  4698                           
  4699                           ;sort.c: 452: f_can_distributed = 1;
  4700  004AB0  0E00               	movlw	0
  4701  004AB2  0101               	movlb	1	; () banked
  4702  004AB4  6F38               	movwf	(_f_can_distributed+1)& (0+255),b
  4703  004AB6  0E01               	movlw	1
  4704  004AB8  6F37               	movwf	_f_can_distributed& (0+255),b
  4705                           
  4706                           ;sort.c: 453: f_most_recent_sort_time = 0;
  4707  004ABA  0E00               	movlw	0
  4708  004ABC  0101               	movlb	1	; () banked
  4709  004ABE  6F3A               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
  4710  004AC0  0E00               	movlw	0
  4711  004AC2  6F39               	movwf	_f_most_recent_sort_time& (0+255),b
  4712                           
  4713                           ;sort.c: 456: count_total = 0;
  4714  004AC4  0E00               	movlw	0
  4715  004AC6  0100               	movlb	0	; () banked
  4716  004AC8  6FFF               	movwf	(_count_total+1)& (0+255),b
  4717  004ACA  0E00               	movlw	0
  4718  004ACC  6FFE               	movwf	_count_total& (0+255),b
  4719                           
  4720                           ;sort.c: 457: count_pop_no_tab = 0;
  4721  004ACE  0E00               	movlw	0
  4722  004AD0  0101               	movlb	1	; () banked
  4723  004AD2  6F2A               	movwf	(_count_pop_no_tab+1)& (0+255),b
  4724  004AD4  0E00               	movlw	0
  4725  004AD6  6F29               	movwf	_count_pop_no_tab& (0+255),b
  4726                           
  4727                           ;sort.c: 458: count_pop_w_tab = 0;
  4728  004AD8  0E00               	movlw	0
  4729  004ADA  0101               	movlb	1	; () banked
  4730  004ADC  6F2C               	movwf	(_count_pop_w_tab+1)& (0+255),b
  4731  004ADE  0E00               	movlw	0
  4732  004AE0  6F2B               	movwf	_count_pop_w_tab& (0+255),b
  4733                           
  4734                           ;sort.c: 459: count_can_w_lab = 0;
  4735  004AE2  0E00               	movlw	0
  4736  004AE4  0101               	movlb	1	; () banked
  4737  004AE6  6F28               	movwf	(_count_can_w_lab+1)& (0+255),b
  4738  004AE8  0E00               	movlw	0
  4739  004AEA  6F27               	movwf	_count_can_w_lab& (0+255),b
  4740                           
  4741                           ;sort.c: 460: count_can_no_lab = 0;
  4742  004AEC  0E00               	movlw	0
  4743  004AEE  0101               	movlb	1	; () banked
  4744  004AF0  6F26               	movwf	(_count_can_no_lab+1)& (0+255),b
  4745  004AF2  0E00               	movlw	0
  4746  004AF4  6F25               	movwf	_count_can_no_lab& (0+255),b
  4747                           
  4748                           ;sort.c: 463: most_recent_sort_time = 999;
  4749  004AF6  0E03               	movlw	3
  4750  004AF8  0101               	movlb	1	; () banked
  4751  004AFA  6F48               	movwf	(_most_recent_sort_time+1)& (0+255),b
  4752  004AFC  0EE7               	movlw	231
  4753  004AFE  6F47               	movwf	_most_recent_sort_time& (0+255),b
  4754                           
  4755                           ;sort.c: 466: motor_toggle_count = 0;
  4756  004B00  0E00               	movlw	0
  4757  004B02  0101               	movlb	1	; () banked
  4758  004B04  6F4A               	movwf	(_motor_toggle_count+1)& (0+255),b
  4759  004B06  0E00               	movlw	0
  4760  004B08  6F49               	movwf	_motor_toggle_count& (0+255),b
  4761                           
  4762                           ;sort.c: 467: agitator_toggle_count = 0;
  4763  004B0A  0E00               	movlw	0
  4764  004B0C  0101               	movlb	1	; () banked
  4765  004B0E  6F24               	movwf	(_agitator_toggle_count+1)& (0+255),b
  4766  004B10  0E00               	movlw	0
  4767  004B12  6F23               	movwf	_agitator_toggle_count& (0+255),b
  4768                           
  4769                           ;sort.c: 470: servo_timer_counter = 0;
  4770  004B14  0E00               	movlw	0
  4771  004B16  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
  4772  004B18  0E00               	movlw	0
  4773  004B1A  6E6D               	movwf	_servo_timer_counter,c	;volatile
  4774                           
  4775                           ;sort.c: 471: servo_timer_target = 9999;
  4776  004B1C  0E27               	movlw	39
  4777  004B1E  6E70               	movwf	_servo_timer_target+1,c	;volatile
  4778  004B20  0E0F               	movlw	15
  4779  004B22  6E6F               	movwf	_servo_timer_target,c	;volatile
  4780                           
  4781                           ;sort.c: 472: timer2_counter = 0;
  4782  004B24  0E00               	movlw	0
  4783  004B26  6E74               	movwf	_timer2_counter+1,c	;volatile
  4784  004B28  0E00               	movlw	0
  4785  004B2A  6E73               	movwf	_timer2_counter,c	;volatile
  4786                           
  4787                           ;sort.c: 473: f_arm_position = 0;
  4788  004B2C  0E00               	movlw	0
  4789  004B2E  0100               	movlb	0	; () banked
  4790  004B30  6FE9               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  4791  004B32  0E00               	movlw	0
  4792  004B34  6FE8               	movwf	_f_arm_position& (0+255),b	;volatile
  4793                           
  4794                           ; BSR set to: 0
  4795                           ;sort.c: 474: pan_servo_state = -1;
  4796  004B36  686B               	setf	_pan_servo_state,c	;volatile
  4797  004B38  686C               	setf	_pan_servo_state+1,c	;volatile
  4798                           
  4799                           ; BSR set to: 0
  4800                           ;sort.c: 475: tilt_servo_state = -1;
  4801  004B3A  6871               	setf	_tilt_servo_state,c	;volatile
  4802  004B3C  6872               	setf	_tilt_servo_state+1,c	;volatile
  4803                           
  4804                           ;sort.c: 476: f_panning_to_bin = 0;
  4805  004B3E  0E00               	movlw	0
  4806  004B40  6E6A               	movwf	_f_panning_to_bin+1,c	;volatile
  4807  004B42  0E00               	movlw	0
  4808  004B44  6E69               	movwf	_f_panning_to_bin,c	;volatile
  4809                           
  4810                           ; BSR set to: 0
  4811  004B46  0012               	return		;funcret
  4812  004B48                     __end_of_initGlobalVars:
  4813                           	opt stack 0
  4814                           tblptru	equ	0xFF8
  4815                           tblptrh	equ	0xFF7
  4816                           tblptrl	equ	0xFF6
  4817                           tablat	equ	0xFF5
  4818                           prodh	equ	0xFF4
  4819                           prodl	equ	0xFF3
  4820                           postinc0	equ	0xFEE
  4821                           wreg	equ	0xFE8
  4822                           postdec1	equ	0xFE5
  4823                           fsr1l	equ	0xFE1
  4824                           indf2	equ	0xFDF
  4825                           postinc2	equ	0xFDE
  4826                           postdec2	equ	0xFDD
  4827                           fsr2h	equ	0xFDA
  4828                           fsr2l	equ	0xFD9
  4829                           status	equ	0xFD8
  4830                           
  4831 ;; *************** function _getMAG *****************
  4832 ;; Defined at:
  4833 ;;		line 597 in file "sort.c"
  4834 ;; Parameters:    Size  Location     Type
  4835 ;;		None
  4836 ;; Auto vars:     Size  Location     Type
  4837 ;;		None
  4838 ;; Return value:  Size  Location     Type
  4839 ;;                  1    wreg      void 
  4840 ;; Registers used:
  4841 ;;		wreg, status,2, status,0, cstack
  4842 ;; Tracked objects:
  4843 ;;		On entry : 0/0
  4844 ;;		On exit  : 0/0
  4845 ;;		Unchanged: 0/0
  4846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4847 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4848 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4849 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4850 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4851 ;;Total ram usage:        2 bytes
  4852 ;; Hardware stack levels used:    1
  4853 ;; Hardware stack levels required when called:    9
  4854 ;; This function calls:
  4855 ;;		_readMAG
  4856 ;; This function is called by:
  4857 ;;		_Loading
  4858 ;; This function uses a non-reentrant model
  4859 ;;
  4860                           
  4861                           	psect	text5
  4862  005A68                     __ptext5:
  4863                           	opt stack 0
  4864  005A68                     _getMAG:
  4865                           	opt stack 19
  4866                           
  4867                           ;sort.c: 598: readMAG();
  4868                           
  4869                           ; BSR set to: 0
  4870                           ;incstack = 0
  4871  005A68  EC1D  F02C         	call	_readMAG	;wreg free
  4872                           
  4873                           ;sort.c: 600: if(MAG_signal==1){
  4874  005A6C  0100               	movlb	0	; () banked
  4875  005A6E  05E2               	decf	_MAG_signal& (0+255),w,b
  4876  005A70  0100               	movlb	0	; () banked
  4877  005A72  11E3               	iorwf	(_MAG_signal+1)& (0+255),w,b
  4878  005A74  A4D8               	btfss	status,2,c
  4879  005A76  0012               	return	
  4880                           
  4881                           ; BSR set to: 0
  4882                           ;sort.c: 601: _delay((unsigned long)((500)*(32000000/4000.0)));
  4883  005A78  0E15               	movlw	21
  4884  005A7A  0100               	movlb	0	; () banked
  4885  005A7C  6F87               	movwf	(??_getMAG+1)& (0+255),b
  4886  005A7E  0E4B               	movlw	75
  4887  005A80  0100               	movlb	0	; () banked
  4888  005A82  6F86               	movwf	??_getMAG& (0+255),b
  4889  005A84  0EBE               	movlw	190
  4890  005A86                     u10827:
  4891  005A86  2EE8               	decfsz	wreg,f,c
  4892  005A88  D7FE               	bra	u10827
  4893  005A8A  2F86               	decfsz	??_getMAG& (0+255),f,b
  4894  005A8C  D7FC               	bra	u10827
  4895  005A8E  2F87               	decfsz	(??_getMAG+1)& (0+255),f,b
  4896  005A90  D7FA               	bra	u10827
  4897  005A92  F000               	nop	
  4898                           
  4899                           ;sort.c: 602: readMAG();
  4900  005A94  EC1D  F02C         	call	_readMAG	;wreg free
  4901  005A98  0012               	return	
  4902  005A9A                     __end_of_getMAG:
  4903                           	opt stack 0
  4904                           tblptru	equ	0xFF8
  4905                           tblptrh	equ	0xFF7
  4906                           tblptrl	equ	0xFF6
  4907                           tablat	equ	0xFF5
  4908                           prodh	equ	0xFF4
  4909                           prodl	equ	0xFF3
  4910                           postinc0	equ	0xFEE
  4911                           wreg	equ	0xFE8
  4912                           postdec1	equ	0xFE5
  4913                           fsr1l	equ	0xFE1
  4914                           indf2	equ	0xFDF
  4915                           postinc2	equ	0xFDE
  4916                           postdec2	equ	0xFDD
  4917                           fsr2h	equ	0xFDA
  4918                           fsr2l	equ	0xFD9
  4919                           status	equ	0xFD8
  4920                           
  4921 ;; *************** function _getIR *****************
  4922 ;; Defined at:
  4923 ;;		line 581 in file "sort.c"
  4924 ;; Parameters:    Size  Location     Type
  4925 ;;  port            2    8[BANK0 ] int 
  4926 ;; Auto vars:     Size  Location     Type
  4927 ;;  i               2   11[BANK0 ] int 
  4928 ;; Return value:  Size  Location     Type
  4929 ;;                  1    wreg      void 
  4930 ;; Registers used:
  4931 ;;		wreg, status,2, status,0, cstack
  4932 ;; Tracked objects:
  4933 ;;		On entry : 0/0
  4934 ;;		On exit  : 0/0
  4935 ;;		Unchanged: 0/0
  4936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4937 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4938 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4939 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4940 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4941 ;;Total ram usage:        5 bytes
  4942 ;; Hardware stack levels used:    1
  4943 ;; Hardware stack levels required when called:    9
  4944 ;; This function calls:
  4945 ;;		_readIR
  4946 ;; This function is called by:
  4947 ;;		_Loading
  4948 ;; This function uses a non-reentrant model
  4949 ;;
  4950                           
  4951                           	psect	text6
  4952  0051CC                     __ptext6:
  4953                           	opt stack 0
  4954  0051CC                     _getIR:
  4955                           	opt stack 19
  4956                           
  4957                           ;sort.c: 582: readIR(port);
  4958                           
  4959                           ;incstack = 0
  4960  0051CC  C088  F082         	movff	getIR@port,readIR@ana_port
  4961  0051D0  C089  F083         	movff	getIR@port+1,readIR@ana_port+1
  4962  0051D4  ECCF  F027         	call	_readIR	;wreg free
  4963                           
  4964                           ;sort.c: 583: for(int i = 0; i < 150; i++){
  4965  0051D8  0E00               	movlw	0
  4966  0051DA  0100               	movlb	0	; () banked
  4967  0051DC  6F8C               	movwf	(getIR@i+1)& (0+255),b
  4968  0051DE  0E00               	movlw	0
  4969  0051E0  6F8B               	movwf	getIR@i& (0+255),b
  4970  0051E2                     l7592:
  4971                           
  4972                           ; BSR set to: 0
  4973  0051E2  0100               	movlb	0	; () banked
  4974  0051E4  BF8C               	btfsc	(getIR@i+1)& (0+255),7,b
  4975  0051E6  D008               	goto	l7596
  4976  0051E8  0100               	movlb	0	; () banked
  4977  0051EA  518C               	movf	(getIR@i+1)& (0+255),w,b
  4978  0051EC  E11E               	bnz	l7608
  4979  0051EE  0E96               	movlw	150
  4980  0051F0  0100               	movlb	0	; () banked
  4981  0051F2  5D8B               	subwf	getIR@i& (0+255),w,b
  4982  0051F4  B0D8               	btfsc	status,0,c
  4983  0051F6  D019               	goto	l7608
  4984  0051F8                     l7596:
  4985                           
  4986                           ; BSR set to: 0
  4987                           ;sort.c: 584: _delay((unsigned long)((500)*(32000000/4000000.0)));
  4988  0051F8  0E06               	movlw	6
  4989  0051FA  0100               	movlb	0	; () banked
  4990  0051FC  6F8A               	movwf	??_getIR& (0+255),b
  4991  0051FE  0E30               	movlw	48
  4992  005200                     u10837:
  4993  005200  2EE8               	decfsz	wreg,f,c
  4994  005202  D7FE               	bra	u10837
  4995  005204  2F8A               	decfsz	??_getIR& (0+255),f,b
  4996  005206  D7FC               	bra	u10837
  4997  005208  F000               	nop	
  4998                           
  4999                           ;sort.c: 585: readIR(port);
  5000  00520A  C088  F082         	movff	getIR@port,readIR@ana_port
  5001  00520E  C089  F083         	movff	getIR@port+1,readIR@ana_port+1
  5002  005212  ECCF  F027         	call	_readIR	;wreg free
  5003                           
  5004                           ;sort.c: 586: if(!IR_signal){
  5005  005216  0100               	movlb	0	; () banked
  5006  005218  51E0               	movf	_IR_signal& (0+255),w,b
  5007  00521A  0100               	movlb	0	; () banked
  5008  00521C  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  5009  00521E  B4D8               	btfsc	status,2,c
  5010  005220  D004               	goto	l7608
  5011                           
  5012                           ; BSR set to: 0
  5013                           
  5014                           ; BSR set to: 0
  5015                           
  5016                           ; BSR set to: 0
  5017                           ;sort.c: 587: break;
  5018  005222  0100               	movlb	0	; () banked
  5019  005224  4B8B               	infsnz	getIR@i& (0+255),f,b
  5020  005226  2B8C               	incf	(getIR@i+1)& (0+255),f,b
  5021  005228  D7DC               	goto	l7592
  5022  00522A                     l7608:
  5023                           
  5024                           ; BSR set to: 0
  5025                           ;sort.c: 588: }
  5026                           ;sort.c: 589: }
  5027                           ;sort.c: 590: if(IR_signal==1){
  5028  00522A  0100               	movlb	0	; () banked
  5029  00522C  05E0               	decf	_IR_signal& (0+255),w,b
  5030  00522E  0100               	movlb	0	; () banked
  5031  005230  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  5032  005232  A4D8               	btfss	status,2,c
  5033  005234  D006               	goto	l7612
  5034                           
  5035                           ; BSR set to: 0
  5036                           ;sort.c: 591: f_loadingNewCan = 1;
  5037  005236  0E00               	movlw	0
  5038  005238  0100               	movlb	0	; () banked
  5039  00523A  6FED               	movwf	(_f_loadingNewCan+1)& (0+255),b
  5040  00523C  0E01               	movlw	1
  5041  00523E  6FEC               	movwf	_f_loadingNewCan& (0+255),b
  5042                           
  5043                           ;sort.c: 592: }
  5044  005240  0012               	return	
  5045  005242                     l7612:
  5046                           
  5047                           ; BSR set to: 0
  5048                           ;sort.c: 593: else{
  5049                           ;sort.c: 594: f_loadingNewCan = 0;
  5050  005242  0E00               	movlw	0
  5051  005244  0100               	movlb	0	; () banked
  5052  005246  6FED               	movwf	(_f_loadingNewCan+1)& (0+255),b
  5053  005248  0E00               	movlw	0
  5054  00524A  6FEC               	movwf	_f_loadingNewCan& (0+255),b
  5055  00524C  0012               	return	
  5056  00524E                     __end_of_getIR:
  5057                           	opt stack 0
  5058                           tblptru	equ	0xFF8
  5059                           tblptrh	equ	0xFF7
  5060                           tblptrl	equ	0xFF6
  5061                           tablat	equ	0xFF5
  5062                           prodh	equ	0xFF4
  5063                           prodl	equ	0xFF3
  5064                           postinc0	equ	0xFEE
  5065                           wreg	equ	0xFE8
  5066                           postdec1	equ	0xFE5
  5067                           fsr1l	equ	0xFE1
  5068                           indf2	equ	0xFDF
  5069                           postinc2	equ	0xFDE
  5070                           postdec2	equ	0xFDD
  5071                           fsr2h	equ	0xFDA
  5072                           fsr2l	equ	0xFD9
  5073                           status	equ	0xFD8
  5074                           
  5075 ;; *************** function _ID *****************
  5076 ;; Defined at:
  5077 ;;		line 284 in file "sort.c"
  5078 ;; Parameters:    Size  Location     Type
  5079 ;;		None
  5080 ;; Auto vars:     Size  Location     Type
  5081 ;;  i               2   37[BANK0 ] int 
  5082 ;;  i               2   50[BANK0 ] int 
  5083 ;;  j               2   52[BANK0 ] int 
  5084 ;;  i               2   35[BANK0 ] int 
  5085 ;;  i               2   33[BANK0 ] int 
  5086 ;;  i               2   39[BANK0 ] int 
  5087 ;;  res             4   46[BANK0 ] int [2]
  5088 ;;  time            1   29[BANK0 ] const unsigned char 
  5089 ;;  res2            2   44[BANK0 ] int 
  5090 ;;  res1            2   42[BANK0 ] int 
  5091 ;;  time            1   41[BANK0 ] const unsigned char 
  5092 ;;  n               2   54[BANK0 ] const int 
  5093 ;; Return value:  Size  Location     Type
  5094 ;;                  1    wreg      void 
  5095 ;; Registers used:
  5096 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5097 ;; Tracked objects:
  5098 ;;		On entry : 0/0
  5099 ;;		On exit  : 0/0
  5100 ;;		Unchanged: 0/0
  5101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5102 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5103 ;;      Locals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5104 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5105 ;;      Totals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5106 ;;Total ram usage:       29 bytes
  5107 ;; Hardware stack levels used:    1
  5108 ;; Hardware stack levels required when called:    9
  5109 ;; This function calls:
  5110 ;;		___awdiv
  5111 ;;		___awtoft
  5112 ;;		___ftge
  5113 ;;		_delay_ms
  5114 ;;		_readCOND
  5115 ;;		_readIR
  5116 ;; This function is called by:
  5117 ;;		_sort
  5118 ;; This function uses a non-reentrant model
  5119 ;;
  5120                           
  5121                           	psect	text7
  5122  001192                     __ptext7:
  5123                           	opt stack 0
  5124  001192                     _ID:
  5125                           	opt stack 20
  5126                           
  5127                           ;sort.c: 285: if(f_can_coming_to_ID){
  5128                           
  5129                           ; BSR set to: 0
  5130                           ;incstack = 0
  5131  001192  0101               	movlb	1	; () banked
  5132  001194  5133               	movf	_f_can_coming_to_ID& (0+255),w,b
  5133  001196  0101               	movlb	1	; () banked
  5134  001198  1134               	iorwf	(_f_can_coming_to_ID+1)& (0+255),w,b
  5135  00119A  B4D8               	btfsc	status,2,c
  5136  00119C  0012               	return	
  5137                           
  5138                           ; BSR set to: 1
  5139                           ;sort.c: 287: _delay((unsigned long)((1000)*(32000000/4000.0)));
  5140  00119E  0E29               	movlw	41
  5141  0011A0  0100               	movlb	0	; () banked
  5142  0011A2  6F9C               	movwf	(??_ID+1)& (0+255),b
  5143  0011A4  0E96               	movlw	150
  5144  0011A6  0100               	movlb	0	; () banked
  5145  0011A8  6F9B               	movwf	??_ID& (0+255),b
  5146  0011AA  0E7F               	movlw	127
  5147  0011AC                     u10847:
  5148  0011AC  2EE8               	decfsz	wreg,f,c
  5149  0011AE  D7FE               	bra	u10847
  5150  0011B0  2F9B               	decfsz	??_ID& (0+255),f,b
  5151  0011B2  D7FC               	bra	u10847
  5152  0011B4  2F9C               	decfsz	(??_ID+1)& (0+255),f,b
  5153  0011B6  D7FA               	bra	u10847
  5154                           
  5155                           ;sort.c: 289: f_arm_position = 0;
  5156  0011B8  0E00               	movlw	0
  5157  0011BA  0100               	movlb	0	; () banked
  5158  0011BC  6FE9               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  5159  0011BE  0E00               	movlw	0
  5160  0011C0  6FE8               	movwf	_f_arm_position& (0+255),b	;volatile
  5161                           
  5162                           ; BSR set to: 0
  5163                           ;sort.c: 291: if(sensor_outputs[0]){
  5164  0011C2  0100               	movlb	0	; () banked
  5165  0011C4  51DA               	movf	_sensor_outputs& (0+255),w,b
  5166  0011C6  0100               	movlb	0	; () banked
  5167  0011C8  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  5168  0011CA  B4D8               	btfsc	status,2,c
  5169  0011CC  D036               	goto	l8230
  5170                           
  5171                           ; BSR set to: 0
  5172                           ;sort.c: 293: readIR(3);
  5173  0011CE  0E00               	movlw	0
  5174  0011D0  0100               	movlb	0	; () banked
  5175  0011D2  6F83               	movwf	(readIR@ana_port+1)& (0+255),b
  5176  0011D4  0E03               	movlw	3
  5177  0011D6  6F82               	movwf	readIR@ana_port& (0+255),b
  5178  0011D8  ECCF  F027         	call	_readIR	;wreg free
  5179                           
  5180                           ;sort.c: 294: sensor_outputs[1] = IR_signal;
  5181  0011DC  C0E0  F0DC         	movff	_IR_signal,_sensor_outputs+2
  5182  0011E0  C0E1  F0DD         	movff	_IR_signal+1,_sensor_outputs+3
  5183                           
  5184                           ;sort.c: 295: _delay((unsigned long)((200)*(32000000/4000.0)));
  5185  0011E4  0E09               	movlw	9
  5186  0011E6  0100               	movlb	0	; () banked
  5187  0011E8  6F9C               	movwf	(??_ID+1)& (0+255),b
  5188  0011EA  0E1E               	movlw	30
  5189  0011EC  0100               	movlb	0	; () banked
  5190  0011EE  6F9B               	movwf	??_ID& (0+255),b
  5191  0011F0  0EE4               	movlw	228
  5192  0011F2                     u10857:
  5193  0011F2  2EE8               	decfsz	wreg,f,c
  5194  0011F4  D7FE               	bra	u10857
  5195  0011F6  2F9B               	decfsz	??_ID& (0+255),f,b
  5196  0011F8  D7FC               	bra	u10857
  5197  0011FA  2F9C               	decfsz	(??_ID+1)& (0+255),f,b
  5198  0011FC  D7FA               	bra	u10857
  5199  0011FE  F000               	nop	
  5200                           
  5201                           ;sort.c: 296: readIR(3);
  5202  001200  0E00               	movlw	0
  5203  001202  0100               	movlb	0	; () banked
  5204  001204  6F83               	movwf	(readIR@ana_port+1)& (0+255),b
  5205  001206  0E03               	movlw	3
  5206  001208  6F82               	movwf	readIR@ana_port& (0+255),b
  5207  00120A  ECCF  F027         	call	_readIR	;wreg free
  5208                           
  5209                           ;sort.c: 297: sensor_outputs[1] = sensor_outputs[1] || IR_signal;
  5210  00120E  0E01               	movlw	1
  5211  001210  0100               	movlb	0	; () banked
  5212  001212  6F9E               	movwf	_ID$1141& (0+255),b
  5213                           
  5214                           ; BSR set to: 0
  5215  001214  0100               	movlb	0	; () banked
  5216  001216  51DC               	movf	(_sensor_outputs+2)& (0+255),w,b
  5217  001218  0100               	movlb	0	; () banked
  5218  00121A  11DD               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  5219  00121C  A4D8               	btfss	status,2,c
  5220  00121E  D009               	goto	l8228
  5221                           
  5222                           ; BSR set to: 0
  5223  001220  0100               	movlb	0	; () banked
  5224  001222  51E0               	movf	_IR_signal& (0+255),w,b
  5225  001224  0100               	movlb	0	; () banked
  5226  001226  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  5227  001228  A4D8               	btfss	status,2,c
  5228  00122A  D003               	goto	l8228
  5229                           
  5230                           ; BSR set to: 0
  5231  00122C  0E00               	movlw	0
  5232  00122E  0100               	movlb	0	; () banked
  5233  001230  6F9E               	movwf	_ID$1141& (0+255),b
  5234  001232                     l8228:
  5235                           
  5236                           ; BSR set to: 0
  5237  001232  C09E  F0DC         	movff	_ID$1141,_sensor_outputs+2
  5238  001236  0100               	movlb	0	; () banked
  5239  001238  6BDD               	clrf	(_sensor_outputs+3)& (0+255),b
  5240  00123A                     l8230:
  5241                           
  5242                           ; BSR set to: 0
  5243                           ;sort.c: 298: }
  5244                           ;sort.c: 300: LATCbits.LATC7 = 1;
  5245  00123A  8E8B               	bsf	3979,7,c	;volatile
  5246                           
  5247                           ;sort.c: 303: const int n = 10;
  5248  00123C  0E00               	movlw	0
  5249  00123E  0100               	movlb	0	; () banked
  5250  001240  6FB7               	movwf	(ID@n+1)& (0+255),b
  5251  001242  0E0A               	movlw	10
  5252  001244  6FB6               	movwf	ID@n& (0+255),b
  5253                           
  5254                           ; BSR set to: 0
  5255                           ;sort.c: 305: if(!sensor_outputs[0]){
  5256  001246  0100               	movlb	0	; () banked
  5257  001248  51DA               	movf	_sensor_outputs& (0+255),w,b
  5258  00124A  0100               	movlb	0	; () banked
  5259  00124C  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  5260  00124E  A4D8               	btfss	status,2,c
  5261  001250  D0E3               	goto	l8284
  5262                           
  5263                           ; BSR set to: 0
  5264                           ;sort.c: 306: const unsigned char time = (600 / n);
  5265  001252  0E02               	movlw	2
  5266  001254  0100               	movlb	0	; () banked
  5267  001256  6F87               	movwf	(___awdiv@dividend+1)& (0+255),b
  5268  001258  0E58               	movlw	88
  5269  00125A  6F86               	movwf	___awdiv@dividend& (0+255),b
  5270  00125C  C0B6  F088         	movff	ID@n,___awdiv@divisor
  5271  001260  C0B7  F089         	movff	ID@n+1,___awdiv@divisor+1
  5272  001264  EC6C  F026         	call	___awdiv	;wreg free
  5273  001268  0100               	movlb	0	; () banked
  5274  00126A  5186               	movf	?___awdiv& (0+255),w,b
  5275  00126C  0100               	movlb	0	; () banked
  5276  00126E  6FA9               	movwf	ID@time& (0+255),b
  5277                           
  5278                           ; BSR set to: 0
  5279                           ;sort.c: 307: int res1 = 0;
  5280  001270  0E00               	movlw	0
  5281  001272  0100               	movlb	0	; () banked
  5282  001274  6FAB               	movwf	(ID@res1+1)& (0+255),b
  5283  001276  0E00               	movlw	0
  5284  001278  6FAA               	movwf	ID@res1& (0+255),b
  5285                           
  5286                           ; BSR set to: 0
  5287                           ;sort.c: 308: int res2 = 0;
  5288  00127A  0E00               	movlw	0
  5289  00127C  0100               	movlb	0	; () banked
  5290  00127E  6FAD               	movwf	(ID@res2+1)& (0+255),b
  5291  001280  0E00               	movlw	0
  5292  001282  6FAC               	movwf	ID@res2& (0+255),b
  5293                           
  5294                           ; BSR set to: 0
  5295                           ;sort.c: 309: for(int i = 0; i<n; i++){
  5296  001284  0E00               	movlw	0
  5297  001286  0100               	movlb	0	; () banked
  5298  001288  6FA2               	movwf	(ID@i+1)& (0+255),b
  5299  00128A  0E00               	movlw	0
  5300  00128C  6FA1               	movwf	ID@i& (0+255),b
  5301  00128E                     l8242:
  5302                           
  5303                           ; BSR set to: 0
  5304  00128E  0100               	movlb	0	; () banked
  5305  001290  51B6               	movf	ID@n& (0+255),w,b
  5306  001292  0100               	movlb	0	; () banked
  5307  001294  5DA1               	subwf	ID@i& (0+255),w,b
  5308  001296  0100               	movlb	0	; () banked
  5309  001298  51A2               	movf	(ID@i+1)& (0+255),w,b
  5310  00129A  0A80               	xorlw	128
  5311  00129C  0100               	movlb	0	; () banked
  5312  00129E  6F9B               	movwf	??_ID& (0+255),b
  5313  0012A0  0100               	movlb	0	; () banked
  5314  0012A2  51B7               	movf	(ID@n+1)& (0+255),w,b
  5315  0012A4  0A80               	xorlw	128
  5316  0012A6  0100               	movlb	0	; () banked
  5317  0012A8  599B               	subwfb	??_ID& (0+255),w,b
  5318  0012AA  B0D8               	btfsc	status,0,c
  5319  0012AC  D012               	goto	l864
  5320                           
  5321                           ; BSR set to: 0
  5322                           ;sort.c: 310: delay_ms(time);
  5323                           
  5324                           ; BSR set to: 0
  5325                           
  5326                           ; BSR set to: 0
  5327  0012AE  0100               	movlb	0	; () banked
  5328  0012B0  51A9               	movf	ID@time& (0+255),w,b
  5329  0012B2  ECC5  F02E         	call	_delay_ms
  5330                           
  5331                           ;sort.c: 311: readCOND();
  5332  0012B6  ECF7  F02B         	call	_readCOND	;wreg free
  5333                           
  5334                           ;sort.c: 312: res1 += COND_signal;
  5335  0012BA  0100               	movlb	0	; () banked
  5336  0012BC  51DE               	movf	_COND_signal& (0+255),w,b
  5337  0012BE  0100               	movlb	0	; () banked
  5338  0012C0  27AA               	addwf	ID@res1& (0+255),f,b
  5339  0012C2  0100               	movlb	0	; () banked
  5340  0012C4  51DF               	movf	(_COND_signal+1)& (0+255),w,b
  5341  0012C6  0100               	movlb	0	; () banked
  5342  0012C8  23AB               	addwfc	(ID@res1+1)& (0+255),f,b
  5343                           
  5344                           ; BSR set to: 0
  5345  0012CA  0100               	movlb	0	; () banked
  5346  0012CC  4BA1               	infsnz	ID@i& (0+255),f,b
  5347  0012CE  2BA2               	incf	(ID@i+1)& (0+255),f,b
  5348  0012D0  D7DE               	goto	l8242
  5349  0012D2                     l864:
  5350                           
  5351                           ; BSR set to: 0
  5352                           ;sort.c: 313: }
  5353                           ;sort.c: 314: LATCbits.LATC7 = 0;
  5354  0012D2  9E8B               	bcf	3979,7,c	;volatile
  5355                           
  5356                           ; BSR set to: 0
  5357                           ;sort.c: 315: _delay((unsigned long)((200)*(32000000/4000.0)));
  5358  0012D4  0E09               	movlw	9
  5359  0012D6  0100               	movlb	0	; () banked
  5360  0012D8  6F9C               	movwf	(??_ID+1)& (0+255),b
  5361  0012DA  0E1E               	movlw	30
  5362  0012DC  0100               	movlb	0	; () banked
  5363  0012DE  6F9B               	movwf	??_ID& (0+255),b
  5364  0012E0  0EE4               	movlw	228
  5365  0012E2                     u10867:
  5366  0012E2  2EE8               	decfsz	wreg,f,c
  5367  0012E4  D7FE               	bra	u10867
  5368  0012E6  2F9B               	decfsz	??_ID& (0+255),f,b
  5369  0012E8  D7FC               	bra	u10867
  5370  0012EA  2F9C               	decfsz	(??_ID+1)& (0+255),f,b
  5371  0012EC  D7FA               	bra	u10867
  5372  0012EE  F000               	nop	
  5373                           
  5374                           ;sort.c: 316: LATCbits.LATC7 = 1;
  5375  0012F0  8E8B               	bsf	3979,7,c	;volatile
  5376                           
  5377                           ;sort.c: 317: for(int i = 0; i<n; i++){
  5378  0012F2  0E00               	movlw	0
  5379  0012F4  0100               	movlb	0	; () banked
  5380  0012F6  6FA4               	movwf	(ID@i_1148+1)& (0+255),b
  5381  0012F8  0E00               	movlw	0
  5382  0012FA  6FA3               	movwf	ID@i_1148& (0+255),b
  5383  0012FC                     l8260:
  5384                           
  5385                           ; BSR set to: 0
  5386  0012FC  0100               	movlb	0	; () banked
  5387  0012FE  51B6               	movf	ID@n& (0+255),w,b
  5388  001300  0100               	movlb	0	; () banked
  5389  001302  5DA3               	subwf	ID@i_1148& (0+255),w,b
  5390  001304  0100               	movlb	0	; () banked
  5391  001306  51A4               	movf	(ID@i_1148+1)& (0+255),w,b
  5392  001308  0A80               	xorlw	128
  5393  00130A  0100               	movlb	0	; () banked
  5394  00130C  6F9B               	movwf	??_ID& (0+255),b
  5395  00130E  0100               	movlb	0	; () banked
  5396  001310  51B7               	movf	(ID@n+1)& (0+255),w,b
  5397  001312  0A80               	xorlw	128
  5398  001314  0100               	movlb	0	; () banked
  5399  001316  599B               	subwfb	??_ID& (0+255),w,b
  5400  001318  B0D8               	btfsc	status,0,c
  5401  00131A  D012               	goto	l866
  5402                           
  5403                           ; BSR set to: 0
  5404                           ;sort.c: 318: delay_ms(time);
  5405                           
  5406                           ; BSR set to: 0
  5407                           
  5408                           ; BSR set to: 0
  5409  00131C  0100               	movlb	0	; () banked
  5410  00131E  51A9               	movf	ID@time& (0+255),w,b
  5411  001320  ECC5  F02E         	call	_delay_ms
  5412                           
  5413                           ;sort.c: 319: readCOND();
  5414  001324  ECF7  F02B         	call	_readCOND	;wreg free
  5415                           
  5416                           ;sort.c: 320: res2 += COND_signal;
  5417  001328  0100               	movlb	0	; () banked
  5418  00132A  51DE               	movf	_COND_signal& (0+255),w,b
  5419  00132C  0100               	movlb	0	; () banked
  5420  00132E  27AC               	addwf	ID@res2& (0+255),f,b
  5421  001330  0100               	movlb	0	; () banked
  5422  001332  51DF               	movf	(_COND_signal+1)& (0+255),w,b
  5423  001334  0100               	movlb	0	; () banked
  5424  001336  23AD               	addwfc	(ID@res2+1)& (0+255),f,b
  5425                           
  5426                           ; BSR set to: 0
  5427  001338  0100               	movlb	0	; () banked
  5428  00133A  4BA3               	infsnz	ID@i_1148& (0+255),f,b
  5429  00133C  2BA4               	incf	(ID@i_1148+1)& (0+255),f,b
  5430  00133E  D7DE               	goto	l8260
  5431  001340                     l866:
  5432                           
  5433                           ; BSR set to: 0
  5434                           ;sort.c: 321: }
  5435                           ;sort.c: 322: LATCbits.LATC7 = 0;
  5436  001340  9E8B               	bcf	3979,7,c	;volatile
  5437                           
  5438                           ; BSR set to: 0
  5439                           ;sort.c: 323: res1 = ((res1 / n) > 0.3) ? 1 : 0;
  5440  001342  0E9A               	movlw	154
  5441  001344  0100               	movlb	0	; () banked
  5442  001346  6F92               	movwf	___ftge@ff1& (0+255),b
  5443  001348  0E99               	movlw	153
  5444  00134A  0100               	movlb	0	; () banked
  5445  00134C  6F93               	movwf	(___ftge@ff1+1)& (0+255),b
  5446  00134E  0E3E               	movlw	62
  5447  001350  0100               	movlb	0	; () banked
  5448  001352  6F94               	movwf	(___ftge@ff1+2)& (0+255),b
  5449  001354  C0B6  F088         	movff	ID@n,___awdiv@divisor
  5450  001358  C0B7  F089         	movff	ID@n+1,___awdiv@divisor+1
  5451  00135C  C0AA  F086         	movff	ID@res1,___awdiv@dividend
  5452  001360  C0AB  F087         	movff	ID@res1+1,___awdiv@dividend+1
  5453  001364  EC6C  F026         	call	___awdiv	;wreg free
  5454  001368  C086  F08E         	movff	?___awdiv,___awtoft@c
  5455  00136C  C087  F08F         	movff	?___awdiv+1,___awtoft@c+1
  5456  001370  EC66  F02C         	call	___awtoft	;wreg free
  5457  001374  C08E  F095         	movff	?___awtoft,___ftge@ff2
  5458  001378  C08F  F096         	movff	?___awtoft+1,___ftge@ff2+1
  5459  00137C  C090  F097         	movff	?___awtoft+2,___ftge@ff2+2
  5460  001380  EC08  F026         	call	___ftge	;wreg free
  5461  001384  0100               	movlb	0	; () banked
  5462  001386  B0D8               	btfsc	status,0,c
  5463  001388  D002               	goto	u7300
  5464  00138A  0E01               	movlw	1
  5465  00138C  D001               	goto	u7310
  5466  00138E                     u7300:
  5467  00138E  0E00               	movlw	0
  5468  001390                     u7310:
  5469  001390  0100               	movlb	0	; () banked
  5470  001392  6FAA               	movwf	ID@res1& (0+255),b
  5471  001394  6BAB               	clrf	(ID@res1+1)& (0+255),b
  5472                           
  5473                           ;sort.c: 324: res2 = ((res2 / n) > 0.3) ? 1 : 0;
  5474  001396  0E9A               	movlw	154
  5475  001398  0100               	movlb	0	; () banked
  5476  00139A  6F92               	movwf	___ftge@ff1& (0+255),b
  5477  00139C  0E99               	movlw	153
  5478  00139E  0100               	movlb	0	; () banked
  5479  0013A0  6F93               	movwf	(___ftge@ff1+1)& (0+255),b
  5480  0013A2  0E3E               	movlw	62
  5481  0013A4  0100               	movlb	0	; () banked
  5482  0013A6  6F94               	movwf	(___ftge@ff1+2)& (0+255),b
  5483  0013A8  C0B6  F088         	movff	ID@n,___awdiv@divisor
  5484  0013AC  C0B7  F089         	movff	ID@n+1,___awdiv@divisor+1
  5485  0013B0  C0AC  F086         	movff	ID@res2,___awdiv@dividend
  5486  0013B4  C0AD  F087         	movff	ID@res2+1,___awdiv@dividend+1
  5487  0013B8  EC6C  F026         	call	___awdiv	;wreg free
  5488  0013BC  C086  F08E         	movff	?___awdiv,___awtoft@c
  5489  0013C0  C087  F08F         	movff	?___awdiv+1,___awtoft@c+1
  5490  0013C4  EC66  F02C         	call	___awtoft	;wreg free
  5491  0013C8  C08E  F095         	movff	?___awtoft,___ftge@ff2
  5492  0013CC  C08F  F096         	movff	?___awtoft+1,___ftge@ff2+1
  5493  0013D0  C090  F097         	movff	?___awtoft+2,___ftge@ff2+2
  5494  0013D4  EC08  F026         	call	___ftge	;wreg free
  5495  0013D8  0100               	movlb	0	; () banked
  5496  0013DA  B0D8               	btfsc	status,0,c
  5497  0013DC  D002               	goto	u7320
  5498  0013DE  0E01               	movlw	1
  5499  0013E0  D001               	goto	u7330
  5500  0013E2                     u7320:
  5501  0013E2  0E00               	movlw	0
  5502  0013E4                     u7330:
  5503  0013E4  0100               	movlb	0	; () banked
  5504  0013E6  6FAC               	movwf	ID@res2& (0+255),b
  5505  0013E8  6BAD               	clrf	(ID@res2+1)& (0+255),b
  5506                           
  5507                           ; BSR set to: 0
  5508                           ;sort.c: 327: sensor_outputs[1] = (res1 || res2);
  5509  0013EA  0E01               	movlw	1
  5510  0013EC  0100               	movlb	0	; () banked
  5511  0013EE  6F9F               	movwf	_ID$1149& (0+255),b
  5512                           
  5513                           ; BSR set to: 0
  5514  0013F0  0100               	movlb	0	; () banked
  5515  0013F2  51AA               	movf	ID@res1& (0+255),w,b
  5516  0013F4  0100               	movlb	0	; () banked
  5517  0013F6  11AB               	iorwf	(ID@res1+1)& (0+255),w,b
  5518  0013F8  A4D8               	btfss	status,2,c
  5519  0013FA  D009               	goto	l8282
  5520                           
  5521                           ; BSR set to: 0
  5522  0013FC  0100               	movlb	0	; () banked
  5523  0013FE  51AC               	movf	ID@res2& (0+255),w,b
  5524  001400  0100               	movlb	0	; () banked
  5525  001402  11AD               	iorwf	(ID@res2+1)& (0+255),w,b
  5526  001404  A4D8               	btfss	status,2,c
  5527  001406  D003               	goto	l8282
  5528                           
  5529                           ; BSR set to: 0
  5530  001408  0E00               	movlw	0
  5531  00140A  0100               	movlb	0	; () banked
  5532  00140C  6F9F               	movwf	_ID$1149& (0+255),b
  5533  00140E                     l8282:
  5534                           
  5535                           ; BSR set to: 0
  5536  00140E  C09F  F0DC         	movff	_ID$1149,_sensor_outputs+2
  5537  001412  0100               	movlb	0	; () banked
  5538  001414  6BDD               	clrf	(_sensor_outputs+3)& (0+255),b
  5539                           
  5540                           ;sort.c: 328: }
  5541  001416  D0E3               	goto	l8328
  5542  001418                     l8284:
  5543                           
  5544                           ; BSR set to: 0
  5545                           ;sort.c: 329: else{
  5546                           ;sort.c: 330: const unsigned char time = (400 / n);
  5547  001418  0E01               	movlw	1
  5548  00141A  0100               	movlb	0	; () banked
  5549  00141C  6F87               	movwf	(___awdiv@dividend+1)& (0+255),b
  5550  00141E  0E90               	movlw	144
  5551  001420  6F86               	movwf	___awdiv@dividend& (0+255),b
  5552  001422  C0B6  F088         	movff	ID@n,___awdiv@divisor
  5553  001426  C0B7  F089         	movff	ID@n+1,___awdiv@divisor+1
  5554  00142A  EC6C  F026         	call	___awdiv	;wreg free
  5555  00142E  0100               	movlb	0	; () banked
  5556  001430  5186               	movf	?___awdiv& (0+255),w,b
  5557  001432  0100               	movlb	0	; () banked
  5558  001434  6F9D               	movwf	ID@time_1150& (0+255),b
  5559                           
  5560                           ; BSR set to: 0
  5561                           ;sort.c: 331: int res[2];
  5562                           ;sort.c: 333: for(int j = 0; j < 2; j++){
  5563  001436  0E00               	movlw	0
  5564  001438  0100               	movlb	0	; () banked
  5565  00143A  6FB5               	movwf	(ID@j+1)& (0+255),b
  5566  00143C  0E00               	movlw	0
  5567  00143E  6FB4               	movwf	ID@j& (0+255),b
  5568                           
  5569                           ; BSR set to: 0
  5570  001440  0100               	movlb	0	; () banked
  5571  001442  BFB5               	btfsc	(ID@j+1)& (0+255),7,b
  5572  001444  D00A               	goto	l870
  5573  001446  0100               	movlb	0	; () banked
  5574  001448  51B5               	movf	(ID@j+1)& (0+255),w,b
  5575  00144A  E106               	bnz	u7360
  5576  00144C  0E02               	movlw	2
  5577  00144E  0100               	movlb	0	; () banked
  5578  001450  5DB4               	subwf	ID@j& (0+255),w,b
  5579  001452  B0D8               	btfsc	status,0,c
  5580  001454  D0C4               	goto	l8328
  5581  001456  D001               	goto	l870
  5582  001458                     u7360:
  5583                           
  5584                           ; BSR set to: 0
  5585  001458  D0C2               	goto	l8328
  5586  00145A                     l870:
  5587                           
  5588                           ; BSR set to: 0
  5589                           ;sort.c: 334: LATCbits.LATC7 = 1;
  5590  00145A  8E8B               	bsf	3979,7,c	;volatile
  5591                           
  5592                           ; BSR set to: 0
  5593                           ;sort.c: 335: for(int i = 0; i < n; i++){
  5594  00145C  0E00               	movlw	0
  5595  00145E  0100               	movlb	0	; () banked
  5596  001460  6FA6               	movwf	(ID@i_1153+1)& (0+255),b
  5597  001462  0E00               	movlw	0
  5598  001464  6FA5               	movwf	ID@i_1153& (0+255),b
  5599  001466                     l8294:
  5600                           
  5601                           ; BSR set to: 0
  5602  001466  0100               	movlb	0	; () banked
  5603  001468  51B6               	movf	ID@n& (0+255),w,b
  5604  00146A  0100               	movlb	0	; () banked
  5605  00146C  5DA5               	subwf	ID@i_1153& (0+255),w,b
  5606  00146E  0100               	movlb	0	; () banked
  5607  001470  51A6               	movf	(ID@i_1153+1)& (0+255),w,b
  5608  001472  0A80               	xorlw	128
  5609  001474  0100               	movlb	0	; () banked
  5610  001476  6F9B               	movwf	??_ID& (0+255),b
  5611  001478  0100               	movlb	0	; () banked
  5612  00147A  51B7               	movf	(ID@n+1)& (0+255),w,b
  5613  00147C  0A80               	xorlw	128
  5614  00147E  0100               	movlb	0	; () banked
  5615  001480  599B               	subwfb	??_ID& (0+255),w,b
  5616  001482  B0D8               	btfsc	status,0,c
  5617  001484  D01A               	goto	l873
  5618                           
  5619                           ; BSR set to: 0
  5620                           ;sort.c: 336: delay_ms(time);
  5621                           
  5622                           ; BSR set to: 0
  5623                           
  5624                           ; BSR set to: 0
  5625  001486  0100               	movlb	0	; () banked
  5626  001488  519D               	movf	ID@time_1150& (0+255),w,b
  5627  00148A  ECC5  F02E         	call	_delay_ms
  5628                           
  5629                           ;sort.c: 337: readCOND();
  5630  00148E  ECF7  F02B         	call	_readCOND	;wreg free
  5631                           
  5632                           ;sort.c: 338: res[j] += COND_signal;
  5633  001492  90D8               	bcf	status,0,c
  5634  001494  0100               	movlb	0	; () banked
  5635  001496  35B4               	rlcf	ID@j& (0+255),w,b
  5636  001498  6ED9               	movwf	fsr2l,c
  5637  00149A  0100               	movlb	0	; () banked
  5638  00149C  35B5               	rlcf	(ID@j+1)& (0+255),w,b
  5639  00149E  6EDA               	movwf	fsr2h,c
  5640  0014A0  0EAE               	movlw	low ID@res
  5641  0014A2  26D9               	addwf	fsr2l,f,c
  5642  0014A4  0E00               	movlw	high ID@res
  5643  0014A6  22DA               	addwfc	fsr2h,f,c
  5644  0014A8  0100               	movlb	0	; () banked
  5645  0014AA  51DE               	movf	_COND_signal& (0+255),w,b
  5646  0014AC  26DE               	addwf	postinc2,f,c
  5647  0014AE  51DF               	movf	(_COND_signal+1)& (0+255),w,b
  5648  0014B0  22DD               	addwfc	postdec2,f,c
  5649                           
  5650                           ; BSR set to: 0
  5651  0014B2  0100               	movlb	0	; () banked
  5652  0014B4  4BA5               	infsnz	ID@i_1153& (0+255),f,b
  5653  0014B6  2BA6               	incf	(ID@i_1153+1)& (0+255),f,b
  5654  0014B8  D7D6               	goto	l8294
  5655  0014BA                     l873:
  5656                           
  5657                           ; BSR set to: 0
  5658                           ;sort.c: 339: }
  5659                           ;sort.c: 340: LATCbits.LATC7 = 0;
  5660  0014BA  9E8B               	bcf	3979,7,c	;volatile
  5661                           
  5662                           ; BSR set to: 0
  5663                           ;sort.c: 342: _delay((unsigned long)((200)*(32000000/4000.0)));
  5664  0014BC  0E09               	movlw	9
  5665  0014BE  0100               	movlb	0	; () banked
  5666  0014C0  6F9C               	movwf	(??_ID+1)& (0+255),b
  5667  0014C2  0E1E               	movlw	30
  5668  0014C4  0100               	movlb	0	; () banked
  5669  0014C6  6F9B               	movwf	??_ID& (0+255),b
  5670  0014C8  0EE4               	movlw	228
  5671  0014CA                     u10877:
  5672  0014CA  2EE8               	decfsz	wreg,f,c
  5673  0014CC  D7FE               	bra	u10877
  5674  0014CE  2F9B               	decfsz	??_ID& (0+255),f,b
  5675  0014D0  D7FC               	bra	u10877
  5676  0014D2  2F9C               	decfsz	(??_ID+1)& (0+255),f,b
  5677  0014D4  D7FA               	bra	u10877
  5678  0014D6  F000               	nop	
  5679                           
  5680                           ;sort.c: 345: res[j] = ((res[j] / n) > 0.3) ? 1 : 0;
  5681  0014D8  0E9A               	movlw	154
  5682  0014DA  0100               	movlb	0	; () banked
  5683  0014DC  6F92               	movwf	___ftge@ff1& (0+255),b
  5684  0014DE  0E99               	movlw	153
  5685  0014E0  0100               	movlb	0	; () banked
  5686  0014E2  6F93               	movwf	(___ftge@ff1+1)& (0+255),b
  5687  0014E4  0E3E               	movlw	62
  5688  0014E6  0100               	movlb	0	; () banked
  5689  0014E8  6F94               	movwf	(___ftge@ff1+2)& (0+255),b
  5690  0014EA  C0B6  F088         	movff	ID@n,___awdiv@divisor
  5691  0014EE  C0B7  F089         	movff	ID@n+1,___awdiv@divisor+1
  5692  0014F2  90D8               	bcf	status,0,c
  5693  0014F4  0100               	movlb	0	; () banked
  5694  0014F6  35B4               	rlcf	ID@j& (0+255),w,b
  5695  0014F8  6ED9               	movwf	fsr2l,c
  5696  0014FA  0100               	movlb	0	; () banked
  5697  0014FC  35B5               	rlcf	(ID@j+1)& (0+255),w,b
  5698  0014FE  6EDA               	movwf	fsr2h,c
  5699  001500  0EAE               	movlw	low ID@res
  5700  001502  26D9               	addwf	fsr2l,f,c
  5701  001504  0E00               	movlw	high ID@res
  5702  001506  22DA               	addwfc	fsr2h,f,c
  5703  001508  CFDE F086          	movff	postinc2,___awdiv@dividend
  5704  00150C  CFDD F087          	movff	postdec2,___awdiv@dividend+1
  5705  001510  EC6C  F026         	call	___awdiv	;wreg free
  5706  001514  C086  F08E         	movff	?___awdiv,___awtoft@c
  5707  001518  C087  F08F         	movff	?___awdiv+1,___awtoft@c+1
  5708  00151C  EC66  F02C         	call	___awtoft	;wreg free
  5709  001520  C08E  F095         	movff	?___awtoft,___ftge@ff2
  5710  001524  C08F  F096         	movff	?___awtoft+1,___ftge@ff2+1
  5711  001528  C090  F097         	movff	?___awtoft+2,___ftge@ff2+2
  5712  00152C  EC08  F026         	call	___ftge	;wreg free
  5713  001530  0100               	movlb	0	; () banked
  5714  001532  B0D8               	btfsc	status,0,c
  5715  001534  D002               	goto	u7390
  5716  001536  0E01               	movlw	1
  5717  001538  D001               	goto	u7400
  5718  00153A                     u7390:
  5719  00153A  0E00               	movlw	0
  5720  00153C                     u7400:
  5721  00153C  0100               	movlb	0	; () banked
  5722  00153E  6F9B               	movwf	??_ID& (0+255),b
  5723  001540  6B9C               	clrf	(??_ID+1)& (0+255),b
  5724  001542  90D8               	bcf	status,0,c
  5725  001544  0100               	movlb	0	; () banked
  5726  001546  35B4               	rlcf	ID@j& (0+255),w,b
  5727  001548  6ED9               	movwf	fsr2l,c
  5728  00154A  0100               	movlb	0	; () banked
  5729  00154C  35B5               	rlcf	(ID@j+1)& (0+255),w,b
  5730  00154E  6EDA               	movwf	fsr2h,c
  5731  001550  0EAE               	movlw	low ID@res
  5732  001552  26D9               	addwf	fsr2l,f,c
  5733  001554  0E00               	movlw	high ID@res
  5734  001556  22DA               	addwfc	fsr2h,f,c
  5735  001558  C09B  FFDE         	movff	??_ID,postinc2
  5736  00155C  C09C  FFDD         	movff	??_ID+1,postdec2
  5737                           
  5738                           ; BSR set to: 0
  5739                           ;sort.c: 346: if(j==0){
  5740  001560  0100               	movlb	0	; () banked
  5741  001562  51B4               	movf	ID@j& (0+255),w,b
  5742  001564  0100               	movlb	0	; () banked
  5743  001566  11B5               	iorwf	(ID@j+1)& (0+255),w,b
  5744  001568  A4D8               	btfss	status,2,c
  5745  00156A  D010               	goto	l8314
  5746                           
  5747                           ; BSR set to: 0
  5748                           ;sort.c: 347: sensor_outputs[1] = res[j];
  5749  00156C  90D8               	bcf	status,0,c
  5750  00156E  0100               	movlb	0	; () banked
  5751  001570  35B4               	rlcf	ID@j& (0+255),w,b
  5752  001572  6ED9               	movwf	fsr2l,c
  5753  001574  0100               	movlb	0	; () banked
  5754  001576  35B5               	rlcf	(ID@j+1)& (0+255),w,b
  5755  001578  6EDA               	movwf	fsr2h,c
  5756  00157A  0EAE               	movlw	low ID@res
  5757  00157C  26D9               	addwf	fsr2l,f,c
  5758  00157E  0E00               	movlw	high ID@res
  5759  001580  22DA               	addwfc	fsr2h,f,c
  5760  001582  CFDE F0DC          	movff	postinc2,_sensor_outputs+2
  5761  001586  CFDD F0DD          	movff	postdec2,_sensor_outputs+3
  5762                           
  5763                           ;sort.c: 348: }
  5764  00158A  D01F               	goto	l8324
  5765  00158C                     l8314:
  5766                           
  5767                           ; BSR set to: 0
  5768                           ;sort.c: 349: else{
  5769                           ;sort.c: 350: sensor_outputs[1] = sensor_outputs[1] || res[j];
  5770  00158C  0E01               	movlw	1
  5771  00158E  0100               	movlb	0	; () banked
  5772  001590  6FA0               	movwf	_ID$1154& (0+255),b
  5773                           
  5774                           ; BSR set to: 0
  5775  001592  0100               	movlb	0	; () banked
  5776  001594  51DC               	movf	(_sensor_outputs+2)& (0+255),w,b
  5777  001596  0100               	movlb	0	; () banked
  5778  001598  11DD               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  5779  00159A  A4D8               	btfss	status,2,c
  5780  00159C  D012               	goto	l8322
  5781                           
  5782                           ; BSR set to: 0
  5783  00159E  90D8               	bcf	status,0,c
  5784  0015A0  0100               	movlb	0	; () banked
  5785  0015A2  35B4               	rlcf	ID@j& (0+255),w,b
  5786  0015A4  6ED9               	movwf	fsr2l,c
  5787  0015A6  0100               	movlb	0	; () banked
  5788  0015A8  35B5               	rlcf	(ID@j+1)& (0+255),w,b
  5789  0015AA  6EDA               	movwf	fsr2h,c
  5790  0015AC  0EAE               	movlw	low ID@res
  5791  0015AE  26D9               	addwf	fsr2l,f,c
  5792  0015B0  0E00               	movlw	high ID@res
  5793  0015B2  22DA               	addwfc	fsr2h,f,c
  5794  0015B4  50DE               	movf	postinc2,w,c
  5795  0015B6  10DE               	iorwf	postinc2,w,c
  5796  0015B8  A4D8               	btfss	status,2,c
  5797  0015BA  D003               	goto	l8322
  5798                           
  5799                           ; BSR set to: 0
  5800  0015BC  0E00               	movlw	0
  5801  0015BE  0100               	movlb	0	; () banked
  5802  0015C0  6FA0               	movwf	_ID$1154& (0+255),b
  5803  0015C2                     l8322:
  5804                           
  5805                           ; BSR set to: 0
  5806  0015C2  C0A0  F0DC         	movff	_ID$1154,_sensor_outputs+2
  5807  0015C6  0100               	movlb	0	; () banked
  5808  0015C8  6BDD               	clrf	(_sensor_outputs+3)& (0+255),b
  5809  0015CA                     l8324:
  5810                           
  5811                           ; BSR set to: 0
  5812  0015CA  0100               	movlb	0	; () banked
  5813  0015CC  4BB4               	infsnz	ID@j& (0+255),f,b
  5814  0015CE  2BB5               	incf	(ID@j+1)& (0+255),f,b
  5815                           
  5816                           ; BSR set to: 0
  5817  0015D0  0100               	movlb	0	; () banked
  5818  0015D2  BFB5               	btfsc	(ID@j+1)& (0+255),7,b
  5819  0015D4  D742               	goto	l870
  5820  0015D6  0100               	movlb	0	; () banked
  5821  0015D8  51B5               	movf	(ID@j+1)& (0+255),w,b
  5822  0015DA  E101               	bnz	l8328
  5823  0015DC  D737               	goto	L5
  5824  0015DE                     l8328:
  5825                           
  5826                           ; BSR set to: 0
  5827                           ;sort.c: 351: }
  5828                           ;sort.c: 352: }
  5829                           ;sort.c: 353: }
  5830                           ;sort.c: 361: if(!sensor_outputs[0]){
  5831  0015DE  0100               	movlb	0	; () banked
  5832  0015E0  51DA               	movf	_sensor_outputs& (0+255),w,b
  5833  0015E2  0100               	movlb	0	; () banked
  5834  0015E4  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  5835  0015E6  A4D8               	btfss	status,2,c
  5836  0015E8  D016               	goto	l8340
  5837                           
  5838                           ; BSR set to: 0
  5839                           ;sort.c: 362: if(!sensor_outputs[1]){
  5840  0015EA  0100               	movlb	0	; () banked
  5841  0015EC  51DC               	movf	(_sensor_outputs+2)& (0+255),w,b
  5842  0015EE  0100               	movlb	0	; () banked
  5843  0015F0  11DD               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  5844  0015F2  A4D8               	btfss	status,2,c
  5845  0015F4  D008               	goto	l8336
  5846                           
  5847                           ; BSR set to: 0
  5848                           ;sort.c: 363: count_pop_no_tab++;
  5849  0015F6  0101               	movlb	1	; () banked
  5850  0015F8  4B29               	infsnz	_count_pop_no_tab& (0+255),f,b
  5851  0015FA  2B2A               	incf	(_count_pop_no_tab+1)& (0+255),f,b
  5852                           
  5853                           ; BSR set to: 1
  5854                           ;sort.c: 364: cur_can = 0;
  5855  0015FC  0E00               	movlw	0
  5856  0015FE  0101               	movlb	1	; () banked
  5857  001600  6F2E               	movwf	(_cur_can+1)& (0+255),b
  5858  001602  0E00               	movlw	0
  5859  001604  D007               	goto	L6
  5860  001606                     l8336:
  5861                           
  5862                           ;sort.c: 366: else{
  5863                           ;sort.c: 367: count_pop_w_tab++;
  5864  001606  0101               	movlb	1	; () banked
  5865  001608  4B2B               	infsnz	_count_pop_w_tab& (0+255),f,b
  5866  00160A  2B2C               	incf	(_count_pop_w_tab+1)& (0+255),f,b
  5867                           
  5868                           ; BSR set to: 1
  5869                           ;sort.c: 368: cur_can = 1;
  5870  00160C  0E00               	movlw	0
  5871  00160E  0101               	movlb	1	; () banked
  5872  001610  6F2E               	movwf	(_cur_can+1)& (0+255),b
  5873  001612  0E01               	movlw	1
  5874  001614                     L6:
  5875  001614  6F2D               	movwf	_cur_can& (0+255),b
  5876  001616                     l8340:
  5877                           
  5878                           ;sort.c: 369: }
  5879                           ;sort.c: 370: }
  5880                           ;sort.c: 371: if(sensor_outputs[0]){
  5881  001616  0100               	movlb	0	; () banked
  5882  001618  51DA               	movf	_sensor_outputs& (0+255),w,b
  5883  00161A  0100               	movlb	0	; () banked
  5884  00161C  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  5885  00161E  B4D8               	btfsc	status,2,c
  5886  001620  D016               	goto	l8352
  5887                           
  5888                           ; BSR set to: 0
  5889                           ;sort.c: 372: if(!sensor_outputs[1]){
  5890  001622  0100               	movlb	0	; () banked
  5891  001624  51DC               	movf	(_sensor_outputs+2)& (0+255),w,b
  5892  001626  0100               	movlb	0	; () banked
  5893  001628  11DD               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  5894  00162A  A4D8               	btfss	status,2,c
  5895  00162C  D008               	goto	l8348
  5896                           
  5897                           ; BSR set to: 0
  5898                           ;sort.c: 373: count_can_w_lab++;
  5899  00162E  0101               	movlb	1	; () banked
  5900  001630  4B27               	infsnz	_count_can_w_lab& (0+255),f,b
  5901  001632  2B28               	incf	(_count_can_w_lab+1)& (0+255),f,b
  5902                           
  5903                           ; BSR set to: 1
  5904                           ;sort.c: 374: cur_can = 2;
  5905  001634  0E00               	movlw	0
  5906  001636  0101               	movlb	1	; () banked
  5907  001638  6F2E               	movwf	(_cur_can+1)& (0+255),b
  5908  00163A  0E02               	movlw	2
  5909  00163C  D007               	goto	L7
  5910  00163E                     l8348:
  5911                           
  5912                           ;sort.c: 376: else{
  5913                           ;sort.c: 377: count_can_no_lab++;
  5914  00163E  0101               	movlb	1	; () banked
  5915  001640  4B25               	infsnz	_count_can_no_lab& (0+255),f,b
  5916  001642  2B26               	incf	(_count_can_no_lab+1)& (0+255),f,b
  5917                           
  5918                           ; BSR set to: 1
  5919                           ;sort.c: 378: cur_can = 3;
  5920  001644  0E00               	movlw	0
  5921  001646  0101               	movlb	1	; () banked
  5922  001648  6F2E               	movwf	(_cur_can+1)& (0+255),b
  5923  00164A  0E03               	movlw	3
  5924  00164C                     L7:
  5925  00164C  6F2D               	movwf	_cur_can& (0+255),b
  5926  00164E                     l8352:
  5927  00164E  0101               	movlb	1	; () banked
  5928  001650  5137               	movf	_f_can_distributed& (0+255),w,b
  5929  001652  0101               	movlb	1	; () banked
  5930  001654  1138               	iorwf	(_f_can_distributed+1)& (0+255),w,b
  5931  001656  B4D8               	btfsc	status,2,c
  5932  001658  D7FA               	goto	l8352
  5933                           
  5934                           ; BSR set to: 1
  5935                           ;sort.c: 384: for(int i=0;i<10000;i++)
  5936                           
  5937                           ; BSR set to: 1
  5938  00165A  0E00               	movlw	0
  5939  00165C  0100               	movlb	0	; () banked
  5940  00165E  6FA8               	movwf	(ID@i_1155+1)& (0+255),b
  5941  001660  0E00               	movlw	0
  5942  001662  6FA7               	movwf	ID@i_1155& (0+255),b
  5943  001664                     l8356:
  5944                           
  5945                           ; BSR set to: 0
  5946  001664  0100               	movlb	0	; () banked
  5947  001666  BFA8               	btfsc	(ID@i_1155+1)& (0+255),7,b
  5948  001668  D008               	goto	l887
  5949  00166A  0E10               	movlw	16
  5950  00166C  0100               	movlb	0	; () banked
  5951  00166E  5DA7               	subwf	ID@i_1155& (0+255),w,b
  5952  001670  0E27               	movlw	39
  5953  001672  0100               	movlb	0	; () banked
  5954  001674  59A8               	subwfb	(ID@i_1155+1)& (0+255),w,b
  5955  001676  B0D8               	btfsc	status,0,c
  5956  001678  D00D               	goto	l888
  5957  00167A                     l887:
  5958                           
  5959                           ; BSR set to: 0
  5960                           ;sort.c: 385: {
  5961                           ;sort.c: 386: LATCbits.LATC0 = 1;
  5962  00167A  808B               	bsf	3979,0,c	;volatile
  5963                           
  5964                           ; BSR set to: 0
  5965                           ;sort.c: 387: _delay((unsigned long)((10)*(32000000/4000000.0)));
  5966  00167C  0E1A               	movlw	26
  5967  00167E                     u10887:
  5968  00167E  2EE8               	decfsz	wreg,f,c
  5969  001680  D7FE               	bra	u10887
  5970  001682  D000               	nop2	
  5971                           
  5972                           ;sort.c: 388: LATCbits.LATC0 = 0;
  5973  001684  908B               	bcf	3979,0,c	;volatile
  5974                           
  5975                           ;sort.c: 389: _delay((unsigned long)((90)*(32000000/4000000.0)));
  5976  001686  0EF0               	movlw	240
  5977  001688                     u10897:
  5978  001688  2EE8               	decfsz	wreg,f,c
  5979  00168A  D7FE               	bra	u10897
  5980  00168C  0100               	movlb	0	; () banked
  5981  00168E  4BA7               	infsnz	ID@i_1155& (0+255),f,b
  5982  001690  2BA8               	incf	(ID@i_1155+1)& (0+255),f,b
  5983  001692  D7E8               	goto	l8356
  5984  001694                     l888:
  5985                           
  5986                           ; BSR set to: 0
  5987                           ;sort.c: 390: }
  5988                           ;sort.c: 392: LATCbits.LATC0 = 0;
  5989  001694  908B               	bcf	3979,0,c	;volatile
  5990                           
  5991                           ; BSR set to: 0
  5992                           ;sort.c: 394: f_can_coming_to_distribution = 1;
  5993  001696  0E00               	movlw	0
  5994  001698  0101               	movlb	1	; () banked
  5995  00169A  6F36               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  5996  00169C  0E01               	movlw	1
  5997  00169E  6F35               	movwf	_f_can_coming_to_distribution& (0+255),b
  5998                           
  5999                           ; BSR set to: 1
  6000                           ;sort.c: 395: _delay((unsigned long)((750)*(32000000/4000.0)));
  6001  0016A0  0E1F               	movlw	31
  6002  0016A2  0100               	movlb	0	; () banked
  6003  0016A4  6F9C               	movwf	(??_ID+1)& (0+255),b
  6004  0016A6  0E71               	movlw	113
  6005  0016A8  0100               	movlb	0	; () banked
  6006  0016AA  6F9B               	movwf	??_ID& (0+255),b
  6007  0016AC  0E1E               	movlw	30
  6008  0016AE                     u10907:
  6009  0016AE  2EE8               	decfsz	wreg,f,c
  6010  0016B0  D7FE               	bra	u10907
  6011  0016B2  2F9B               	decfsz	??_ID& (0+255),f,b
  6012  0016B4  D7FC               	bra	u10907
  6013  0016B6  2F9C               	decfsz	(??_ID+1)& (0+255),f,b
  6014  0016B8  D7FA               	bra	u10907
  6015  0016BA  F000               	nop	
  6016                           
  6017                           ;sort.c: 396: LATCbits.LATC0 = 1;
  6018  0016BC  808B               	bsf	3979,0,c	;volatile
  6019                           
  6020                           ;sort.c: 399: if(!f_lastCan){
  6021  0016BE  0100               	movlb	0	; () banked
  6022  0016C0  51EA               	movf	_f_lastCan& (0+255),w,b
  6023  0016C2  0100               	movlb	0	; () banked
  6024  0016C4  11EB               	iorwf	(_f_lastCan+1)& (0+255),w,b
  6025  0016C6  A4D8               	btfss	status,2,c
  6026  0016C8  D032               	goto	l8388
  6027                           
  6028                           ; BSR set to: 0
  6029                           ;sort.c: 400: for(int i=0; i<46; i++){
  6030  0016CA  0E00               	movlw	0
  6031  0016CC  0100               	movlb	0	; () banked
  6032  0016CE  6FB3               	movwf	(ID@i_1156+1)& (0+255),b
  6033  0016D0  0E00               	movlw	0
  6034  0016D2  6FB2               	movwf	ID@i_1156& (0+255),b
  6035                           
  6036                           ; BSR set to: 0
  6037  0016D4  0100               	movlb	0	; () banked
  6038  0016D6  BFB3               	btfsc	(ID@i_1156+1)& (0+255),7,b
  6039  0016D8  D008               	goto	l8380
  6040  0016DA  0100               	movlb	0	; () banked
  6041  0016DC  51B3               	movf	(ID@i_1156+1)& (0+255),w,b
  6042  0016DE  E126               	bnz	l891
  6043  0016E0  0E2E               	movlw	46
  6044  0016E2  0100               	movlb	0	; () banked
  6045  0016E4  5DB2               	subwf	ID@i_1156& (0+255),w,b
  6046  0016E6  B0D8               	btfsc	status,0,c
  6047  0016E8  D021               	goto	l891
  6048  0016EA                     l8380:
  6049                           
  6050                           ; BSR set to: 0
  6051                           ;sort.c: 401: LATBbits.LATB2 = !LATBbits.LATB2;
  6052  0016EA  B48A               	btfsc	3978,2,c	;volatile
  6053  0016EC  D004               	goto	u7540
  6054  0016EE  0100               	movlb	0	; () banked
  6055  0016F0  6B9B               	clrf	??_ID& (0+255),b
  6056  0016F2  2B9B               	incf	??_ID& (0+255),f,b
  6057  0016F4  D002               	goto	u7558
  6058  0016F6                     u7540:
  6059  0016F6  0100               	movlb	0	; () banked
  6060  0016F8  6B9B               	clrf	??_ID& (0+255),b
  6061  0016FA                     u7558:
  6062  0016FA  0100               	movlb	0	; () banked
  6063  0016FC  479B               	rlncf	??_ID& (0+255),f,b
  6064  0016FE  479B               	rlncf	??_ID& (0+255),f,b
  6065  001700  508A               	movf	3978,w,c	;volatile
  6066  001702  0100               	movlb	0	; () banked
  6067  001704  199B               	xorwf	??_ID& (0+255),w,b
  6068  001706  0BFB               	andlw	-5
  6069  001708  199B               	xorwf	??_ID& (0+255),w,b
  6070  00170A  6E8A               	movwf	3978,c	;volatile
  6071                           
  6072                           ; BSR set to: 0
  6073                           ;sort.c: 402: delay_ms(45-i);
  6074  00170C  0100               	movlb	0	; () banked
  6075  00170E  51B2               	movf	ID@i_1156& (0+255),w,b
  6076  001710  0800               	sublw	0
  6077  001712  0F2D               	addlw	45
  6078  001714  ECC5  F02E         	call	_delay_ms
  6079  001718  0100               	movlb	0	; () banked
  6080  00171A  4BB2               	infsnz	ID@i_1156& (0+255),f,b
  6081  00171C  2BB3               	incf	(ID@i_1156+1)& (0+255),f,b
  6082                           
  6083                           ; BSR set to: 0
  6084  00171E  0100               	movlb	0	; () banked
  6085  001720  BFB3               	btfsc	(ID@i_1156+1)& (0+255),7,b
  6086  001722  D7E3               	goto	l8380
  6087  001724  0100               	movlb	0	; () banked
  6088  001726  51B3               	movf	(ID@i_1156+1)& (0+255),w,b
  6089  001728  E101               	bnz	u7560
  6090  00172A  D7DA               	goto	L8
  6091  00172C                     u7560:
  6092  00172C                     l891:
  6093                           
  6094                           ; BSR set to: 0
  6095                           ;sort.c: 403: }
  6096                           ;sort.c: 404: LATBbits.LATB2 = 1;
  6097  00172C  848A               	bsf	3978,2,c	;volatile
  6098  00172E                     l8388:
  6099                           
  6100                           ; BSR set to: 0
  6101                           ;sort.c: 405: }
  6102                           ;sort.c: 407: f_can_coming_to_ID = 0;
  6103  00172E  0E00               	movlw	0
  6104  001730  0101               	movlb	1	; () banked
  6105  001732  6F34               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  6106  001734  0E00               	movlw	0
  6107  001736  6F33               	movwf	_f_can_coming_to_ID& (0+255),b
  6108  001738  0012               	return	
  6109  00173A                     __end_of_ID:
  6110                           	opt stack 0
  6111                           tblptru	equ	0xFF8
  6112                           tblptrh	equ	0xFF7
  6113                           tblptrl	equ	0xFF6
  6114                           tablat	equ	0xFF5
  6115                           prodh	equ	0xFF4
  6116                           prodl	equ	0xFF3
  6117                           postinc0	equ	0xFEE
  6118                           wreg	equ	0xFE8
  6119                           postdec1	equ	0xFE5
  6120                           fsr1l	equ	0xFE1
  6121                           indf2	equ	0xFDF
  6122                           postinc2	equ	0xFDE
  6123                           postdec2	equ	0xFDD
  6124                           fsr2h	equ	0xFDA
  6125                           fsr2l	equ	0xFD9
  6126                           status	equ	0xFD8
  6127                           
  6128 ;; *************** function _readIR *****************
  6129 ;; Defined at:
  6130 ;;		line 23 in file "ADCFunctionality.c"
  6131 ;; Parameters:    Size  Location     Type
  6132 ;;  ana_port        2    2[BANK0 ] int 
  6133 ;; Auto vars:     Size  Location     Type
  6134 ;;  res             2    6[BANK0 ] int 
  6135 ;; Return value:  Size  Location     Type
  6136 ;;                  1    wreg      void 
  6137 ;; Registers used:
  6138 ;;		wreg, status,2, status,0, cstack
  6139 ;; Tracked objects:
  6140 ;;		On entry : 0/0
  6141 ;;		On exit  : 0/0
  6142 ;;		Unchanged: 0/0
  6143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6144 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6145 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6146 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6147 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6148 ;;Total ram usage:        6 bytes
  6149 ;; Hardware stack levels used:    1
  6150 ;; Hardware stack levels required when called:    8
  6151 ;; This function calls:
  6152 ;;		_readADC
  6153 ;; This function is called by:
  6154 ;;		_Loading
  6155 ;;		_ID
  6156 ;;		_getIR
  6157 ;; This function uses a non-reentrant model
  6158 ;;
  6159                           
  6160                           	psect	text8
  6161  004F9E                     __ptext8:
  6162                           	opt stack 0
  6163  004F9E                     _readIR:
  6164                           	opt stack 20
  6165                           
  6166                           ;ADCFunctionality.c: 24: readADC(ana_port);
  6167                           
  6168                           ; BSR set to: 1
  6169                           ;incstack = 0
  6170  004F9E  0100               	movlb	0	; () banked
  6171  004FA0  5182               	movf	readIR@ana_port& (0+255),w,b
  6172  004FA2  EC9A  F02E         	call	_readADC
  6173                           
  6174                           ;ADCFunctionality.c: 25: int res = ADRESH<<8 | ADRESL;
  6175  004FA6  50C3               	movf	4035,w,c	;volatile
  6176  004FA8  CFC4 F084          	movff	4036,??_readIR	;volatile
  6177  004FAC  0100               	movlb	0	; () banked
  6178  004FAE  6B85               	clrf	(??_readIR+1)& (0+255),b
  6179  004FB0  C084  F085         	movff	??_readIR,??_readIR+1
  6180  004FB4  0100               	movlb	0	; () banked
  6181  004FB6  6B84               	clrf	??_readIR& (0+255),b
  6182  004FB8  0100               	movlb	0	; () banked
  6183  004FBA  1184               	iorwf	??_readIR& (0+255),w,b
  6184  004FBC  0100               	movlb	0	; () banked
  6185  004FBE  6F86               	movwf	readIR@res& (0+255),b
  6186  004FC0  0100               	movlb	0	; () banked
  6187  004FC2  5185               	movf	(??_readIR+1)& (0+255),w,b
  6188  004FC4  0100               	movlb	0	; () banked
  6189  004FC6  6F87               	movwf	(readIR@res+1)& (0+255),b
  6190                           
  6191                           ;ADCFunctionality.c: 26: switch(ana_port){
  6192  004FC8  D024               	goto	l6854
  6193  004FCA                     l6848:
  6194                           
  6195                           ; BSR set to: 0
  6196                           ;ADCFunctionality.c: 28: IR_signal = (res > 800) ? 1 : 0;
  6197  004FCA  0100               	movlb	0	; () banked
  6198  004FCC  BF87               	btfsc	(readIR@res+1)& (0+255),7,b
  6199  004FCE  D00A               	goto	u5530
  6200  004FD0  0E21               	movlw	33
  6201  004FD2  0100               	movlb	0	; () banked
  6202  004FD4  5D86               	subwf	readIR@res& (0+255),w,b
  6203  004FD6  0E03               	movlw	3
  6204  004FD8  0100               	movlb	0	; () banked
  6205  004FDA  5987               	subwfb	(readIR@res+1)& (0+255),w,b
  6206  004FDC  A0D8               	btfss	status,0,c
  6207  004FDE  D002               	goto	u5530
  6208  004FE0  0E01               	movlw	1
  6209  004FE2  D001               	goto	u5540
  6210  004FE4                     u5530:
  6211  004FE4  0E00               	movlw	0
  6212  004FE6                     u5540:
  6213  004FE6  0100               	movlb	0	; () banked
  6214  004FE8  6FE0               	movwf	_IR_signal& (0+255),b
  6215  004FEA  6BE1               	clrf	(_IR_signal+1)& (0+255),b
  6216                           
  6217                           ;ADCFunctionality.c: 29: break;
  6218  004FEC  0012               	return	
  6219  004FEE                     l6850:
  6220                           
  6221                           ; BSR set to: 0
  6222                           ;ADCFunctionality.c: 31: IR_signal = (res < 60) ? 1 : 0;
  6223  004FEE  0100               	movlb	0	; () banked
  6224  004FF0  BF87               	btfsc	(readIR@res+1)& (0+255),7,b
  6225  004FF2  D008               	goto	u5551
  6226  004FF4  0100               	movlb	0	; () banked
  6227  004FF6  5187               	movf	(readIR@res+1)& (0+255),w,b
  6228  004FF8  E107               	bnz	u5550
  6229  004FFA  0E3C               	movlw	60
  6230  004FFC  0100               	movlb	0	; () banked
  6231  004FFE  5D86               	subwf	readIR@res& (0+255),w,b
  6232  005000  B0D8               	btfsc	status,0,c
  6233  005002  D002               	goto	u5550
  6234  005004                     u5551:
  6235  005004  0E01               	movlw	1
  6236  005006  D001               	goto	u5560
  6237  005008                     u5550:
  6238  005008  0E00               	movlw	0
  6239  00500A                     u5560:
  6240  00500A  0100               	movlb	0	; () banked
  6241  00500C  6FE0               	movwf	_IR_signal& (0+255),b
  6242  00500E  6BE1               	clrf	(_IR_signal+1)& (0+255),b
  6243                           
  6244                           ; BSR set to: 0
  6245                           ;ADCFunctionality.c: 35: }
  6246                           
  6247                           ; BSR set to: 0
  6248                           ;ADCFunctionality.c: 34: break;
  6249                           
  6250                           ;ADCFunctionality.c: 33: default:
  6251                           
  6252                           ;ADCFunctionality.c: 32: break;
  6253  005010  0012               	return	
  6254  005012                     l6854:
  6255                           
  6256                           ; BSR set to: 0
  6257  005012  C082  F084         	movff	readIR@ana_port,??_readIR
  6258  005016  C083  F085         	movff	readIR@ana_port+1,??_readIR+1
  6259                           
  6260                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6261                           ; Switch size 1, requested type "space"
  6262                           ; Number of cases is 1, Range of values is 0 to 0
  6263                           ; switch strategies available:
  6264                           ; Name         Instructions Cycles
  6265                           ; simple_byte            4     3 (average)
  6266                           ;	Chosen strategy is simple_byte
  6267  00501A  0100               	movlb	0	; () banked
  6268  00501C  5185               	movf	(??_readIR+1)& (0+255),w,b
  6269  00501E  0A00               	xorlw	0	; case 0
  6270  005020  A4D8               	btfss	status,2,c
  6271  005022  0012               	return	
  6272                           
  6273                           ; BSR set to: 0
  6274                           ; Switch size 1, requested type "space"
  6275                           ; Number of cases is 2, Range of values is 0 to 3
  6276                           ; switch strategies available:
  6277                           ; Name         Instructions Cycles
  6278                           ; simple_byte            7     4 (average)
  6279                           ;	Chosen strategy is simple_byte
  6280  005024  0100               	movlb	0	; () banked
  6281  005026  5184               	movf	??_readIR& (0+255),w,b
  6282  005028  0A00               	xorlw	0	; case 0
  6283  00502A  B4D8               	btfsc	status,2,c
  6284  00502C  D7CE               	goto	l6848
  6285  00502E  0A03               	xorlw	3	; case 3
  6286  005030  A4D8               	btfss	status,2,c
  6287  005032  0012               	return	
  6288  005034  D7DC               	goto	l6850
  6289  005036                     __end_of_readIR:
  6290                           	opt stack 0
  6291                           tblptru	equ	0xFF8
  6292                           tblptrh	equ	0xFF7
  6293                           tblptrl	equ	0xFF6
  6294                           tablat	equ	0xFF5
  6295                           prodh	equ	0xFF4
  6296                           prodl	equ	0xFF3
  6297                           postinc0	equ	0xFEE
  6298                           wreg	equ	0xFE8
  6299                           postdec1	equ	0xFE5
  6300                           fsr1l	equ	0xFE1
  6301                           indf2	equ	0xFDF
  6302                           postinc2	equ	0xFDE
  6303                           postdec2	equ	0xFDD
  6304                           fsr2h	equ	0xFDA
  6305                           fsr2l	equ	0xFD9
  6306                           status	equ	0xFD8
  6307                           
  6308 ;; *************** function _readCOND *****************
  6309 ;; Defined at:
  6310 ;;		line 44 in file "ADCFunctionality.c"
  6311 ;; Parameters:    Size  Location     Type
  6312 ;;		None
  6313 ;; Auto vars:     Size  Location     Type
  6314 ;;  res             2    4[BANK0 ] int 
  6315 ;; Return value:  Size  Location     Type
  6316 ;;                  1    wreg      void 
  6317 ;; Registers used:
  6318 ;;		wreg, status,2, status,0, cstack
  6319 ;; Tracked objects:
  6320 ;;		On entry : 0/0
  6321 ;;		On exit  : 0/0
  6322 ;;		Unchanged: 0/0
  6323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6324 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6325 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6326 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6327 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6328 ;;Total ram usage:        4 bytes
  6329 ;; Hardware stack levels used:    1
  6330 ;; Hardware stack levels required when called:    8
  6331 ;; This function calls:
  6332 ;;		_readADC
  6333 ;; This function is called by:
  6334 ;;		_ID
  6335 ;; This function uses a non-reentrant model
  6336 ;;
  6337                           
  6338                           	psect	text9
  6339  0057EE                     __ptext9:
  6340                           	opt stack 0
  6341  0057EE                     _readCOND:
  6342                           	opt stack 20
  6343                           
  6344                           ;ADCFunctionality.c: 45: readADC(2);
  6345                           
  6346                           ; BSR set to: 0
  6347                           ;incstack = 0
  6348  0057EE  0E02               	movlw	2
  6349  0057F0  EC9A  F02E         	call	_readADC
  6350                           
  6351                           ;ADCFunctionality.c: 46: int res = ADRESH<<8 | ADRESL;
  6352  0057F4  50C3               	movf	4035,w,c	;volatile
  6353  0057F6  CFC4 F082          	movff	4036,??_readCOND	;volatile
  6354  0057FA  0100               	movlb	0	; () banked
  6355  0057FC  6B83               	clrf	(??_readCOND+1)& (0+255),b
  6356  0057FE  C082  F083         	movff	??_readCOND,??_readCOND+1
  6357  005802  0100               	movlb	0	; () banked
  6358  005804  6B82               	clrf	??_readCOND& (0+255),b
  6359  005806  0100               	movlb	0	; () banked
  6360  005808  1182               	iorwf	??_readCOND& (0+255),w,b
  6361  00580A  0100               	movlb	0	; () banked
  6362  00580C  6F84               	movwf	readCOND@res& (0+255),b
  6363  00580E  0100               	movlb	0	; () banked
  6364  005810  5183               	movf	(??_readCOND+1)& (0+255),w,b
  6365  005812  0100               	movlb	0	; () banked
  6366  005814  6F85               	movwf	(readCOND@res+1)& (0+255),b
  6367                           
  6368                           ; BSR set to: 0
  6369                           ;ADCFunctionality.c: 47: COND_signal = (res > 300) ? 1 : 0;
  6370  005816  0100               	movlb	0	; () banked
  6371  005818  BF85               	btfsc	(readCOND@res+1)& (0+255),7,b
  6372  00581A  D00A               	goto	u6320
  6373  00581C  0E2D               	movlw	45
  6374  00581E  0100               	movlb	0	; () banked
  6375  005820  5D84               	subwf	readCOND@res& (0+255),w,b
  6376  005822  0E01               	movlw	1
  6377  005824  0100               	movlb	0	; () banked
  6378  005826  5985               	subwfb	(readCOND@res+1)& (0+255),w,b
  6379  005828  A0D8               	btfss	status,0,c
  6380  00582A  D002               	goto	u6320
  6381  00582C  0E01               	movlw	1
  6382  00582E  D001               	goto	u6330
  6383  005830                     u6320:
  6384  005830  0E00               	movlw	0
  6385  005832                     u6330:
  6386  005832  0100               	movlb	0	; () banked
  6387  005834  6FDE               	movwf	_COND_signal& (0+255),b
  6388  005836  6BDF               	clrf	(_COND_signal+1)& (0+255),b
  6389                           
  6390                           ; BSR set to: 0
  6391  005838  0012               	return		;funcret
  6392  00583A                     __end_of_readCOND:
  6393                           	opt stack 0
  6394                           tblptru	equ	0xFF8
  6395                           tblptrh	equ	0xFF7
  6396                           tblptrl	equ	0xFF6
  6397                           tablat	equ	0xFF5
  6398                           prodh	equ	0xFF4
  6399                           prodl	equ	0xFF3
  6400                           postinc0	equ	0xFEE
  6401                           wreg	equ	0xFE8
  6402                           postdec1	equ	0xFE5
  6403                           fsr1l	equ	0xFE1
  6404                           indf2	equ	0xFDF
  6405                           postinc2	equ	0xFDE
  6406                           postdec2	equ	0xFDD
  6407                           fsr2h	equ	0xFDA
  6408                           fsr2l	equ	0xFD9
  6409                           status	equ	0xFD8
  6410                           
  6411 ;; *************** function _delay_ms *****************
  6412 ;; Defined at:
  6413 ;;		line 716 in file "sort.c"
  6414 ;; Parameters:    Size  Location     Type
  6415 ;;  milliseconds    1    wreg     unsigned char 
  6416 ;; Auto vars:     Size  Location     Type
  6417 ;;  milliseconds    1    1[BANK0 ] unsigned char 
  6418 ;; Return value:  Size  Location     Type
  6419 ;;                  1    wreg      void 
  6420 ;; Registers used:
  6421 ;;		wreg, status,2, status,0, cstack
  6422 ;; Tracked objects:
  6423 ;;		On entry : 0/0
  6424 ;;		On exit  : 0/0
  6425 ;;		Unchanged: 0/0
  6426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6427 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6428 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6429 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6430 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6431 ;;Total ram usage:        2 bytes
  6432 ;; Hardware stack levels used:    1
  6433 ;; Hardware stack levels required when called:    7
  6434 ;; This function calls:
  6435 ;;		Nothing
  6436 ;; This function is called by:
  6437 ;;		_Loading
  6438 ;;		_ID
  6439 ;; This function uses a non-reentrant model
  6440 ;;
  6441                           
  6442                           	psect	text10
  6443  005D8A                     __ptext10:
  6444                           	opt stack 0
  6445  005D8A                     _delay_ms:
  6446                           	opt stack 21
  6447                           
  6448                           ; BSR set to: 0
  6449                           ;incstack = 0
  6450                           ;delay_ms@milliseconds stored from wreg
  6451  005D8A  0100               	movlb	0	; () banked
  6452  005D8C  6F81               	movwf	delay_ms@milliseconds& (0+255),b
  6453                           
  6454                           ;sort.c: 717: while(milliseconds > 0)
  6455  005D8E  D00B               	goto	l7564
  6456  005D90                     l7560:
  6457                           
  6458                           ;sort.c: 718: {
  6459                           ;sort.c: 719: milliseconds--;
  6460  005D90  0100               	movlb	0	; () banked
  6461  005D92  0781               	decf	delay_ms@milliseconds& (0+255),f,b
  6462                           
  6463                           ; BSR set to: 0
  6464                           ;sort.c: 720: _delay((unsigned long)((990)*(32000000/4000000.0)));
  6465  005D94  0E0B               	movlw	11
  6466  005D96  0100               	movlb	0	; () banked
  6467  005D98  6F80               	movwf	??_delay_ms& (0+255),b
  6468  005D9A  0E47               	movlw	71
  6469  005D9C                     u10917:
  6470  005D9C  2EE8               	decfsz	wreg,f,c
  6471  005D9E  D7FE               	bra	u10917
  6472  005DA0  2F80               	decfsz	??_delay_ms& (0+255),f,b
  6473  005DA2  D7FC               	bra	u10917
  6474  005DA4  D000               	nop2	
  6475  005DA6                     l7564:
  6476  005DA6  0100               	movlb	0	; () banked
  6477  005DA8  5181               	movf	delay_ms@milliseconds& (0+255),w,b
  6478  005DAA  0100               	movlb	0	; () banked
  6479  005DAC  B4D8               	btfsc	status,2,c
  6480  005DAE  0012               	return	
  6481  005DB0  D7EF               	goto	l7560
  6482  005DB2                     __end_of_delay_ms:
  6483                           	opt stack 0
  6484                           tblptru	equ	0xFF8
  6485                           tblptrh	equ	0xFF7
  6486                           tblptrl	equ	0xFF6
  6487                           tablat	equ	0xFF5
  6488                           prodh	equ	0xFF4
  6489                           prodl	equ	0xFF3
  6490                           postinc0	equ	0xFEE
  6491                           wreg	equ	0xFE8
  6492                           postdec1	equ	0xFE5
  6493                           fsr1l	equ	0xFE1
  6494                           indf2	equ	0xFDF
  6495                           postinc2	equ	0xFDE
  6496                           postdec2	equ	0xFDD
  6497                           fsr2h	equ	0xFDA
  6498                           fsr2l	equ	0xFD9
  6499                           status	equ	0xFD8
  6500                           
  6501 ;; *************** function ___ftge *****************
  6502 ;; Defined at:
  6503 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
  6504 ;; Parameters:    Size  Location     Type
  6505 ;;  ff1             3   18[BANK0 ] float 
  6506 ;;  ff2             3   21[BANK0 ] float 
  6507 ;; Auto vars:     Size  Location     Type
  6508 ;;		None
  6509 ;; Return value:  Size  Location     Type
  6510 ;;		None               void
  6511 ;; Registers used:
  6512 ;;		wreg, status,2, status,0
  6513 ;; Tracked objects:
  6514 ;;		On entry : 0/0
  6515 ;;		On exit  : 0/0
  6516 ;;		Unchanged: 0/0
  6517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6518 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6519 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6520 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6521 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6522 ;;Total ram usage:        9 bytes
  6523 ;; Hardware stack levels used:    1
  6524 ;; Hardware stack levels required when called:    7
  6525 ;; This function calls:
  6526 ;;		Nothing
  6527 ;; This function is called by:
  6528 ;;		_ID
  6529 ;; This function uses a non-reentrant model
  6530 ;;
  6531                           
  6532                           	psect	text11
  6533  004C10                     __ptext11:
  6534                           	opt stack 0
  6535  004C10                     ___ftge:
  6536                           	opt stack 21
  6537                           
  6538                           ; BSR set to: 0
  6539                           ;incstack = 0
  6540  004C10  0100               	movlb	0	; () banked
  6541  004C12  AF94               	btfss	(___ftge@ff1+2)& (0+255),7,b
  6542  004C14  D01D               	goto	l7682
  6543                           
  6544                           ; BSR set to: 0
  6545  004C16  C092  F098         	movff	___ftge@ff1,??___ftge
  6546  004C1A  C093  F099         	movff	___ftge@ff1+1,??___ftge+1
  6547  004C1E  C094  F09A         	movff	___ftge@ff1+2,??___ftge+2
  6548  004C22  0100               	movlb	0	; () banked
  6549  004C24  1F98               	comf	??___ftge& (0+255),f,b
  6550  004C26  1F99               	comf	(??___ftge+1)& (0+255),f,b
  6551  004C28  1F9A               	comf	(??___ftge+2)& (0+255),f,b
  6552  004C2A  2B98               	incf	??___ftge& (0+255),f,b
  6553  004C2C  0E00               	movlw	0
  6554  004C2E  2399               	addwfc	(??___ftge+1)& (0+255),f,b
  6555  004C30  239A               	addwfc	(??___ftge+2)& (0+255),f,b
  6556  004C32  0E00               	movlw	0
  6557  004C34  0100               	movlb	0	; () banked
  6558  004C36  2598               	addwf	??___ftge& (0+255),w,b
  6559  004C38  0100               	movlb	0	; () banked
  6560  004C3A  6F92               	movwf	___ftge@ff1& (0+255),b
  6561  004C3C  0E00               	movlw	0
  6562  004C3E  0100               	movlb	0	; () banked
  6563  004C40  2199               	addwfc	(??___ftge+1)& (0+255),w,b
  6564  004C42  0100               	movlb	0	; () banked
  6565  004C44  6F93               	movwf	(___ftge@ff1+1)& (0+255),b
  6566  004C46  0E80               	movlw	128
  6567  004C48  0100               	movlb	0	; () banked
  6568  004C4A  219A               	addwfc	(??___ftge+2)& (0+255),w,b
  6569  004C4C  0100               	movlb	0	; () banked
  6570  004C4E  6F94               	movwf	(___ftge@ff1+2)& (0+255),b
  6571  004C50                     l7682:
  6572                           
  6573                           ; BSR set to: 0
  6574  004C50  0100               	movlb	0	; () banked
  6575  004C52  AF97               	btfss	(___ftge@ff2+2)& (0+255),7,b
  6576  004C54  D01D               	goto	l7686
  6577                           
  6578                           ; BSR set to: 0
  6579  004C56  C095  F098         	movff	___ftge@ff2,??___ftge
  6580  004C5A  C096  F099         	movff	___ftge@ff2+1,??___ftge+1
  6581  004C5E  C097  F09A         	movff	___ftge@ff2+2,??___ftge+2
  6582  004C62  0100               	movlb	0	; () banked
  6583  004C64  1F98               	comf	??___ftge& (0+255),f,b
  6584  004C66  1F99               	comf	(??___ftge+1)& (0+255),f,b
  6585  004C68  1F9A               	comf	(??___ftge+2)& (0+255),f,b
  6586  004C6A  2B98               	incf	??___ftge& (0+255),f,b
  6587  004C6C  0E00               	movlw	0
  6588  004C6E  2399               	addwfc	(??___ftge+1)& (0+255),f,b
  6589  004C70  239A               	addwfc	(??___ftge+2)& (0+255),f,b
  6590  004C72  0E00               	movlw	0
  6591  004C74  0100               	movlb	0	; () banked
  6592  004C76  2598               	addwf	??___ftge& (0+255),w,b
  6593  004C78  0100               	movlb	0	; () banked
  6594  004C7A  6F95               	movwf	___ftge@ff2& (0+255),b
  6595  004C7C  0E00               	movlw	0
  6596  004C7E  0100               	movlb	0	; () banked
  6597  004C80  2199               	addwfc	(??___ftge+1)& (0+255),w,b
  6598  004C82  0100               	movlb	0	; () banked
  6599  004C84  6F96               	movwf	(___ftge@ff2+1)& (0+255),b
  6600  004C86  0E80               	movlw	128
  6601  004C88  0100               	movlb	0	; () banked
  6602  004C8A  219A               	addwfc	(??___ftge+2)& (0+255),w,b
  6603  004C8C  0100               	movlb	0	; () banked
  6604  004C8E  6F97               	movwf	(___ftge@ff2+2)& (0+255),b
  6605  004C90                     l7686:
  6606                           
  6607                           ; BSR set to: 0
  6608  004C90  0E00               	movlw	0
  6609  004C92  0100               	movlb	0	; () banked
  6610  004C94  1B92               	xorwf	___ftge@ff1& (0+255),f,b
  6611  004C96  0E00               	movlw	0
  6612  004C98  0100               	movlb	0	; () banked
  6613  004C9A  1B93               	xorwf	(___ftge@ff1+1)& (0+255),f,b
  6614  004C9C  0E80               	movlw	128
  6615  004C9E  0100               	movlb	0	; () banked
  6616  004CA0  1B94               	xorwf	(___ftge@ff1+2)& (0+255),f,b
  6617                           
  6618                           ; BSR set to: 0
  6619  004CA2  0E00               	movlw	0
  6620  004CA4  0100               	movlb	0	; () banked
  6621  004CA6  1B95               	xorwf	___ftge@ff2& (0+255),f,b
  6622  004CA8  0E00               	movlw	0
  6623  004CAA  0100               	movlb	0	; () banked
  6624  004CAC  1B96               	xorwf	(___ftge@ff2+1)& (0+255),f,b
  6625  004CAE  0E80               	movlw	128
  6626  004CB0  0100               	movlb	0	; () banked
  6627  004CB2  1B97               	xorwf	(___ftge@ff2+2)& (0+255),f,b
  6628  004CB4  0100               	movlb	0	; () banked
  6629  004CB6  5195               	movf	___ftge@ff2& (0+255),w,b
  6630  004CB8  0100               	movlb	0	; () banked
  6631  004CBA  5D92               	subwf	___ftge@ff1& (0+255),w,b
  6632  004CBC  0100               	movlb	0	; () banked
  6633  004CBE  5196               	movf	(___ftge@ff2+1)& (0+255),w,b
  6634  004CC0  0100               	movlb	0	; () banked
  6635  004CC2  5993               	subwfb	(___ftge@ff1+1)& (0+255),w,b
  6636  004CC4  0100               	movlb	0	; () banked
  6637  004CC6  5197               	movf	(___ftge@ff2+2)& (0+255),w,b
  6638  004CC8  0100               	movlb	0	; () banked
  6639  004CCA  5994               	subwfb	(___ftge@ff1+2)& (0+255),w,b
  6640  004CCC  B0D8               	btfsc	status,0,c
  6641  004CCE  D002               	goto	l7692
  6642                           
  6643                           ; BSR set to: 0
  6644  004CD0  90D8               	bcf	status,0,c
  6645  004CD2  0012               	return	
  6646  004CD4                     l7692:
  6647                           
  6648                           ; BSR set to: 0
  6649  004CD4  80D8               	bsf	status,0,c
  6650                           
  6651                           ; BSR set to: 0
  6652  004CD6  0012               	return	
  6653  004CD8                     __end_of___ftge:
  6654                           	opt stack 0
  6655                           tblptru	equ	0xFF8
  6656                           tblptrh	equ	0xFF7
  6657                           tblptrl	equ	0xFF6
  6658                           tablat	equ	0xFF5
  6659                           prodh	equ	0xFF4
  6660                           prodl	equ	0xFF3
  6661                           postinc0	equ	0xFEE
  6662                           wreg	equ	0xFE8
  6663                           postdec1	equ	0xFE5
  6664                           fsr1l	equ	0xFE1
  6665                           indf2	equ	0xFDF
  6666                           postinc2	equ	0xFDE
  6667                           postdec2	equ	0xFDD
  6668                           fsr2h	equ	0xFDA
  6669                           fsr2l	equ	0xFD9
  6670                           status	equ	0xFD8
  6671                           
  6672 ;; *************** function ___awtoft *****************
  6673 ;; Defined at:
  6674 ;;		line 32 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
  6675 ;; Parameters:    Size  Location     Type
  6676 ;;  c               2   14[BANK0 ] int 
  6677 ;; Auto vars:     Size  Location     Type
  6678 ;;  sign            1   17[BANK0 ] unsigned char 
  6679 ;; Return value:  Size  Location     Type
  6680 ;;                  3   14[BANK0 ] float 
  6681 ;; Registers used:
  6682 ;;		wreg, status,2, status,0, cstack
  6683 ;; Tracked objects:
  6684 ;;		On entry : 0/0
  6685 ;;		On exit  : 0/0
  6686 ;;		Unchanged: 0/0
  6687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6688 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6689 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6690 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6691 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6692 ;;Total ram usage:        4 bytes
  6693 ;; Hardware stack levels used:    1
  6694 ;; Hardware stack levels required when called:    8
  6695 ;; This function calls:
  6696 ;;		___ftpack
  6697 ;; This function is called by:
  6698 ;;		_ID
  6699 ;; This function uses a non-reentrant model
  6700 ;;
  6701                           
  6702                           	psect	text12
  6703  0058CC                     __ptext12:
  6704                           	opt stack 0
  6705  0058CC                     ___awtoft:
  6706                           	opt stack 20
  6707                           
  6708                           ; BSR set to: 0
  6709                           ;incstack = 0
  6710  0058CC  0E00               	movlw	0
  6711  0058CE  0100               	movlb	0	; () banked
  6712  0058D0  6F91               	movwf	___awtoft@sign& (0+255),b
  6713                           
  6714                           ; BSR set to: 0
  6715  0058D2  0100               	movlb	0	; () banked
  6716  0058D4  AF8F               	btfss	(___awtoft@c+1)& (0+255),7,b
  6717  0058D6  D008               	goto	l7674
  6718                           
  6719                           ; BSR set to: 0
  6720  0058D8  0100               	movlb	0	; () banked
  6721  0058DA  6D8E               	negf	___awtoft@c& (0+255),b
  6722  0058DC  1F8F               	comf	(___awtoft@c+1)& (0+255),f,b
  6723  0058DE  B0D8               	btfsc	status,0,c
  6724  0058E0  2B8F               	incf	(___awtoft@c+1)& (0+255),f,b
  6725                           
  6726                           ; BSR set to: 0
  6727  0058E2  0E01               	movlw	1
  6728  0058E4  0100               	movlb	0	; () banked
  6729  0058E6  6F91               	movwf	___awtoft@sign& (0+255),b
  6730  0058E8                     l7674:
  6731                           
  6732                           ; BSR set to: 0
  6733  0058E8  C08E  F080         	movff	___awtoft@c,___ftpack@arg
  6734  0058EC  C08F  F081         	movff	___awtoft@c+1,___ftpack@arg+1
  6735  0058F0  0100               	movlb	0	; () banked
  6736  0058F2  6B82               	clrf	(___ftpack@arg+2)& (0+255),b
  6737  0058F4  0E8E               	movlw	142
  6738  0058F6  0100               	movlb	0	; () banked
  6739  0058F8  6F83               	movwf	___ftpack@exp& (0+255),b
  6740  0058FA  C091  F084         	movff	___awtoft@sign,___ftpack@sign
  6741  0058FE  ECF7  F021         	call	___ftpack	;wreg free
  6742  005902  C080  F08E         	movff	?___ftpack,?___awtoft
  6743  005906  C081  F08F         	movff	?___ftpack+1,?___awtoft+1
  6744  00590A  C082  F090         	movff	?___ftpack+2,?___awtoft+2
  6745  00590E  0012               	return	
  6746  005910                     __end_of___awtoft:
  6747                           	opt stack 0
  6748                           tblptru	equ	0xFF8
  6749                           tblptrh	equ	0xFF7
  6750                           tblptrl	equ	0xFF6
  6751                           tablat	equ	0xFF5
  6752                           prodh	equ	0xFF4
  6753                           prodl	equ	0xFF3
  6754                           postinc0	equ	0xFEE
  6755                           wreg	equ	0xFE8
  6756                           postdec1	equ	0xFE5
  6757                           fsr1l	equ	0xFE1
  6758                           indf2	equ	0xFDF
  6759                           postinc2	equ	0xFDE
  6760                           postdec2	equ	0xFDD
  6761                           fsr2h	equ	0xFDA
  6762                           fsr2l	equ	0xFD9
  6763                           status	equ	0xFD8
  6764                           
  6765 ;; *************** function ___ftpack *****************
  6766 ;; Defined at:
  6767 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
  6768 ;; Parameters:    Size  Location     Type
  6769 ;;  arg             3    0[BANK0 ] unsigned um
  6770 ;;  exp             1    3[BANK0 ] unsigned char 
  6771 ;;  sign            1    4[BANK0 ] unsigned char 
  6772 ;; Auto vars:     Size  Location     Type
  6773 ;;		None
  6774 ;; Return value:  Size  Location     Type
  6775 ;;                  3    0[BANK0 ] float 
  6776 ;; Registers used:
  6777 ;;		wreg, status,2, status,0
  6778 ;; Tracked objects:
  6779 ;;		On entry : 0/0
  6780 ;;		On exit  : 0/0
  6781 ;;		Unchanged: 0/0
  6782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6783 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6784 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6785 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6786 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6787 ;;Total ram usage:        8 bytes
  6788 ;; Hardware stack levels used:    1
  6789 ;; Hardware stack levels required when called:    7
  6790 ;; This function calls:
  6791 ;;		Nothing
  6792 ;; This function is called by:
  6793 ;;		___awtoft
  6794 ;; This function uses a non-reentrant model
  6795 ;;
  6796                           
  6797                           	psect	text13
  6798  0043EE                     __ptext13:
  6799                           	opt stack 0
  6800  0043EE                     ___ftpack:
  6801                           	opt stack 20
  6802                           
  6803                           ;incstack = 0
  6804  0043EE  0100               	movlb	0	; () banked
  6805  0043F0  5183               	movf	___ftpack@exp& (0+255),w,b
  6806  0043F2  0100               	movlb	0	; () banked
  6807  0043F4  B4D8               	btfsc	status,2,c
  6808  0043F6  D008               	goto	l7058
  6809                           
  6810                           ; BSR set to: 0
  6811  0043F8  0100               	movlb	0	; () banked
  6812  0043FA  5180               	movf	___ftpack@arg& (0+255),w,b
  6813  0043FC  0100               	movlb	0	; () banked
  6814  0043FE  1181               	iorwf	(___ftpack@arg+1)& (0+255),w,b
  6815  004400  0100               	movlb	0	; () banked
  6816  004402  1182               	iorwf	(___ftpack@arg+2)& (0+255),w,b
  6817  004404  A4D8               	btfss	status,2,c
  6818  004406  D011               	goto	l7064
  6819  004408                     l7058:
  6820                           
  6821                           ; BSR set to: 0
  6822  004408  0E00               	movlw	0
  6823  00440A  0100               	movlb	0	; () banked
  6824  00440C  6F80               	movwf	?___ftpack& (0+255),b
  6825  00440E  0E00               	movlw	0
  6826  004410  0100               	movlb	0	; () banked
  6827  004412  6F81               	movwf	(?___ftpack+1)& (0+255),b
  6828  004414  0E00               	movlw	0
  6829  004416  0100               	movlb	0	; () banked
  6830  004418  6F82               	movwf	(?___ftpack+2)& (0+255),b
  6831                           
  6832                           ; BSR set to: 0
  6833  00441A  0012               	return	
  6834  00441C                     l7062:
  6835                           
  6836                           ; BSR set to: 0
  6837  00441C  0100               	movlb	0	; () banked
  6838  00441E  2B83               	incf	___ftpack@exp& (0+255),f,b
  6839  004420  0100               	movlb	0	; () banked
  6840  004422  90D8               	bcf	status,0,c
  6841  004424  3382               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  6842  004426  3381               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  6843  004428  3380               	rrcf	___ftpack@arg& (0+255),f,b
  6844  00442A                     l7064:
  6845                           
  6846                           ; BSR set to: 0
  6847  00442A  0E00               	movlw	0
  6848  00442C  0100               	movlb	0	; () banked
  6849  00442E  1580               	andwf	___ftpack@arg& (0+255),w,b
  6850  004430  0100               	movlb	0	; () banked
  6851  004432  6F85               	movwf	??___ftpack& (0+255),b
  6852  004434  0E00               	movlw	0
  6853  004436  0100               	movlb	0	; () banked
  6854  004438  1581               	andwf	(___ftpack@arg+1)& (0+255),w,b
  6855  00443A  0100               	movlb	0	; () banked
  6856  00443C  6F86               	movwf	(??___ftpack+1)& (0+255),b
  6857  00443E  0EFE               	movlw	254
  6858  004440  0100               	movlb	0	; () banked
  6859  004442  1582               	andwf	(___ftpack@arg+2)& (0+255),w,b
  6860  004444  0100               	movlb	0	; () banked
  6861  004446  6F87               	movwf	(??___ftpack+2)& (0+255),b
  6862  004448  0100               	movlb	0	; () banked
  6863  00444A  5185               	movf	??___ftpack& (0+255),w,b
  6864  00444C  0100               	movlb	0	; () banked
  6865  00444E  1186               	iorwf	(??___ftpack+1)& (0+255),w,b
  6866  004450  0100               	movlb	0	; () banked
  6867  004452  1187               	iorwf	(??___ftpack+2)& (0+255),w,b
  6868  004454  B4D8               	btfsc	status,2,c
  6869  004456  D011               	goto	l7070
  6870  004458  D7E1               	goto	l7062
  6871  00445A                     l7066:
  6872                           
  6873                           ; BSR set to: 0
  6874  00445A  0100               	movlb	0	; () banked
  6875  00445C  2B83               	incf	___ftpack@exp& (0+255),f,b
  6876                           
  6877                           ; BSR set to: 0
  6878  00445E  0E01               	movlw	1
  6879  004460  0100               	movlb	0	; () banked
  6880  004462  2780               	addwf	___ftpack@arg& (0+255),f,b
  6881  004464  0E00               	movlw	0
  6882  004466  0100               	movlb	0	; () banked
  6883  004468  2381               	addwfc	(___ftpack@arg+1)& (0+255),f,b
  6884  00446A  0E00               	movlw	0
  6885  00446C  0100               	movlb	0	; () banked
  6886  00446E  2382               	addwfc	(___ftpack@arg+2)& (0+255),f,b
  6887  004470  0100               	movlb	0	; () banked
  6888  004472  90D8               	bcf	status,0,c
  6889  004474  3382               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  6890  004476  3381               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  6891  004478  3380               	rrcf	___ftpack@arg& (0+255),f,b
  6892  00447A                     l7070:
  6893                           
  6894                           ; BSR set to: 0
  6895  00447A  0E00               	movlw	0
  6896  00447C  0100               	movlb	0	; () banked
  6897  00447E  1580               	andwf	___ftpack@arg& (0+255),w,b
  6898  004480  0100               	movlb	0	; () banked
  6899  004482  6F85               	movwf	??___ftpack& (0+255),b
  6900  004484  0E00               	movlw	0
  6901  004486  0100               	movlb	0	; () banked
  6902  004488  1581               	andwf	(___ftpack@arg+1)& (0+255),w,b
  6903  00448A  0100               	movlb	0	; () banked
  6904  00448C  6F86               	movwf	(??___ftpack+1)& (0+255),b
  6905  00448E  0EFF               	movlw	255
  6906  004490  0100               	movlb	0	; () banked
  6907  004492  1582               	andwf	(___ftpack@arg+2)& (0+255),w,b
  6908  004494  0100               	movlb	0	; () banked
  6909  004496  6F87               	movwf	(??___ftpack+2)& (0+255),b
  6910  004498  0100               	movlb	0	; () banked
  6911  00449A  5185               	movf	??___ftpack& (0+255),w,b
  6912  00449C  0100               	movlb	0	; () banked
  6913  00449E  1186               	iorwf	(??___ftpack+1)& (0+255),w,b
  6914  0044A0  0100               	movlb	0	; () banked
  6915  0044A2  1187               	iorwf	(??___ftpack+2)& (0+255),w,b
  6916  0044A4  B4D8               	btfsc	status,2,c
  6917  0044A6  D008               	goto	l7074
  6918  0044A8  D7D8               	goto	l7066
  6919  0044AA                     l7072:
  6920                           
  6921                           ; BSR set to: 0
  6922  0044AA  0100               	movlb	0	; () banked
  6923  0044AC  0783               	decf	___ftpack@exp& (0+255),f,b
  6924  0044AE  0100               	movlb	0	; () banked
  6925  0044B0  90D8               	bcf	status,0,c
  6926  0044B2  3780               	rlcf	___ftpack@arg& (0+255),f,b
  6927  0044B4  3781               	rlcf	(___ftpack@arg+1)& (0+255),f,b
  6928  0044B6  3782               	rlcf	(___ftpack@arg+2)& (0+255),f,b
  6929  0044B8                     l7074:
  6930                           
  6931                           ; BSR set to: 0
  6932  0044B8  0100               	movlb	0	; () banked
  6933  0044BA  BF81               	btfsc	(___ftpack@arg+1)& (0+255),7,b
  6934  0044BC  D004               	goto	l1824
  6935                           
  6936                           ; BSR set to: 0
  6937  0044BE  0E02               	movlw	2
  6938  0044C0  0100               	movlb	0	; () banked
  6939  0044C2  6183               	cpfslt	___ftpack@exp& (0+255),b
  6940  0044C4  D7F2               	goto	l7072
  6941  0044C6                     l1824:
  6942                           
  6943                           ; BSR set to: 0
  6944  0044C6  0100               	movlb	0	; () banked
  6945  0044C8  B183               	btfsc	___ftpack@exp& (0+255),0,b
  6946  0044CA  D002               	goto	l7080
  6947                           
  6948                           ; BSR set to: 0
  6949  0044CC  0100               	movlb	0	; () banked
  6950  0044CE  9F81               	bcf	(___ftpack@arg+1)& (0+255),7,b
  6951  0044D0                     l7080:
  6952                           
  6953                           ; BSR set to: 0
  6954  0044D0  0100               	movlb	0	; () banked
  6955  0044D2  90D8               	bcf	status,0,c
  6956  0044D4  3383               	rrcf	___ftpack@exp& (0+255),f,b
  6957  0044D6  0100               	movlb	0	; () banked
  6958  0044D8  5183               	movf	___ftpack@exp& (0+255),w,b
  6959  0044DA  0100               	movlb	0	; () banked
  6960  0044DC  1382               	iorwf	(___ftpack@arg+2)& (0+255),f,b
  6961                           
  6962                           ; BSR set to: 0
  6963  0044DE  0100               	movlb	0	; () banked
  6964  0044E0  5184               	movf	___ftpack@sign& (0+255),w,b
  6965  0044E2  0100               	movlb	0	; () banked
  6966  0044E4  B4D8               	btfsc	status,2,c
  6967  0044E6  D002               	goto	l7086
  6968                           
  6969                           ; BSR set to: 0
  6970  0044E8  0100               	movlb	0	; () banked
  6971  0044EA  8F82               	bsf	(___ftpack@arg+2)& (0+255),7,b
  6972  0044EC                     l7086:
  6973                           
  6974                           ; BSR set to: 0
  6975  0044EC  C080  F080         	movff	___ftpack@arg,?___ftpack
  6976  0044F0  C081  F081         	movff	___ftpack@arg+1,?___ftpack+1
  6977  0044F4  C082  F082         	movff	___ftpack@arg+2,?___ftpack+2
  6978  0044F8  0012               	return	
  6979  0044FA                     __end_of___ftpack:
  6980                           	opt stack 0
  6981                           tblptru	equ	0xFF8
  6982                           tblptrh	equ	0xFF7
  6983                           tblptrl	equ	0xFF6
  6984                           tablat	equ	0xFF5
  6985                           prodh	equ	0xFF4
  6986                           prodl	equ	0xFF3
  6987                           postinc0	equ	0xFEE
  6988                           wreg	equ	0xFE8
  6989                           postdec1	equ	0xFE5
  6990                           fsr1l	equ	0xFE1
  6991                           indf2	equ	0xFDF
  6992                           postinc2	equ	0xFDE
  6993                           postdec2	equ	0xFDD
  6994                           fsr2h	equ	0xFDA
  6995                           fsr2l	equ	0xFD9
  6996                           status	equ	0xFD8
  6997                           
  6998 ;; *************** function _Distribution *****************
  6999 ;; Defined at:
  7000 ;;		line 410 in file "sort.c"
  7001 ;; Parameters:    Size  Location     Type
  7002 ;;		None
  7003 ;; Auto vars:     Size  Location     Type
  7004 ;;		None
  7005 ;; Return value:  Size  Location     Type
  7006 ;;                  1    wreg      void 
  7007 ;; Registers used:
  7008 ;;		wreg, status,2, status,0, cstack
  7009 ;; Tracked objects:
  7010 ;;		On entry : 0/0
  7011 ;;		On exit  : 0/0
  7012 ;;		Unchanged: 0/0
  7013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7014 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7015 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7016 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7017 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7018 ;;Total ram usage:        2 bytes
  7019 ;; Hardware stack levels used:    1
  7020 ;; Hardware stack levels required when called:    8
  7021 ;; This function calls:
  7022 ;;		_updateServoPosition
  7023 ;; This function is called by:
  7024 ;;		_sort
  7025 ;; This function uses a non-reentrant model
  7026 ;;
  7027                           
  7028                           	psect	text14
  7029  0047E6                     __ptext14:
  7030                           	opt stack 0
  7031  0047E6                     _Distribution:
  7032                           	opt stack 21
  7033                           
  7034                           ;sort.c: 411: if(f_can_coming_to_distribution){
  7035                           
  7036                           ; BSR set to: 0
  7037                           ;incstack = 0
  7038  0047E6  0101               	movlb	1	; () banked
  7039  0047E8  5135               	movf	_f_can_coming_to_distribution& (0+255),w,b
  7040  0047EA  0101               	movlb	1	; () banked
  7041  0047EC  1136               	iorwf	(_f_can_coming_to_distribution+1)& (0+255),w,b
  7042  0047EE  B4D8               	btfsc	status,2,c
  7043  0047F0  0012               	return	
  7044                           
  7045                           ; BSR set to: 1
  7046                           ;sort.c: 412: f_can_distributed = 0;
  7047  0047F2  0E00               	movlw	0
  7048  0047F4  0101               	movlb	1	; () banked
  7049  0047F6  6F38               	movwf	(_f_can_distributed+1)& (0+255),b
  7050  0047F8  0E00               	movlw	0
  7051  0047FA  6F37               	movwf	_f_can_distributed& (0+255),b
  7052                           
  7053                           ;sort.c: 419: switch(cur_can){
  7054  0047FC  D034               	goto	l8404
  7055  0047FE                     l8394:
  7056                           
  7057                           ;sort.c: 421: updateServoPosition(500, 1);
  7058  0047FE  0E01               	movlw	1
  7059  004800  0100               	movlb	0	; () banked
  7060  004802  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  7061  004804  0EF4               	movlw	244
  7062  004806  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  7063  004808  0E00               	movlw	0
  7064  00480A  0100               	movlb	0	; () banked
  7065  00480C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  7066  00480E  0E01               	movlw	1
  7067  004810  6F82               	movwf	updateServoPosition@timer& (0+255),b
  7068  004812  EC27  F029         	call	_updateServoPosition	;wreg free
  7069                           
  7070                           ;sort.c: 422: break;
  7071  004816  D03E               	goto	l8406
  7072  004818                     l8396:
  7073                           
  7074                           ;sort.c: 424: updateServoPosition(850, 1);
  7075  004818  0E03               	movlw	3
  7076  00481A  0100               	movlb	0	; () banked
  7077  00481C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  7078  00481E  0E52               	movlw	82
  7079  004820  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  7080  004822  0E00               	movlw	0
  7081  004824  0100               	movlb	0	; () banked
  7082  004826  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  7083  004828  0E01               	movlw	1
  7084  00482A  6F82               	movwf	updateServoPosition@timer& (0+255),b
  7085  00482C  EC27  F029         	call	_updateServoPosition	;wreg free
  7086                           
  7087                           ;sort.c: 425: break;
  7088  004830  D031               	goto	l8406
  7089  004832                     l8398:
  7090                           
  7091                           ;sort.c: 427: updateServoPosition(1670, 1);
  7092  004832  0E06               	movlw	6
  7093  004834  0100               	movlb	0	; () banked
  7094  004836  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  7095  004838  0E86               	movlw	134
  7096  00483A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  7097  00483C  0E00               	movlw	0
  7098  00483E  0100               	movlb	0	; () banked
  7099  004840  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  7100  004842  0E01               	movlw	1
  7101  004844  6F82               	movwf	updateServoPosition@timer& (0+255),b
  7102  004846  EC27  F029         	call	_updateServoPosition	;wreg free
  7103                           
  7104                           ;sort.c: 428: break;
  7105  00484A  D024               	goto	l8406
  7106  00484C                     l8400:
  7107                           
  7108                           ;sort.c: 430: updateServoPosition(2400, 1);
  7109  00484C  0E09               	movlw	9
  7110  00484E  0100               	movlb	0	; () banked
  7111  004850  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  7112  004852  0E60               	movlw	96
  7113  004854  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  7114  004856  0E00               	movlw	0
  7115  004858  0100               	movlb	0	; () banked
  7116  00485A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  7117  00485C  0E01               	movlw	1
  7118  00485E  6F82               	movwf	updateServoPosition@timer& (0+255),b
  7119  004860  EC27  F029         	call	_updateServoPosition	;wreg free
  7120                           
  7121                           ;sort.c: 434: }
  7122                           
  7123                           ;sort.c: 433: break;
  7124                           
  7125                           ;sort.c: 432: default:
  7126                           
  7127                           ;sort.c: 431: break;
  7128  004864  D017               	goto	l8406
  7129  004866                     l8404:
  7130  004866  C12D  F088         	movff	_cur_can,??_Distribution
  7131  00486A  C12E  F089         	movff	_cur_can+1,??_Distribution+1
  7132                           
  7133                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7134                           ; Switch size 1, requested type "space"
  7135                           ; Number of cases is 1, Range of values is 0 to 0
  7136                           ; switch strategies available:
  7137                           ; Name         Instructions Cycles
  7138                           ; simple_byte            4     3 (average)
  7139                           ;	Chosen strategy is simple_byte
  7140  00486E  0100               	movlb	0	; () banked
  7141  004870  5189               	movf	(??_Distribution+1)& (0+255),w,b
  7142  004872  0A00               	xorlw	0	; case 0
  7143  004874  A4D8               	btfss	status,2,c
  7144  004876  D00E               	goto	l8406
  7145                           
  7146                           ; BSR set to: 0
  7147                           ; Switch size 1, requested type "space"
  7148                           ; Number of cases is 4, Range of values is 0 to 3
  7149                           ; switch strategies available:
  7150                           ; Name         Instructions Cycles
  7151                           ; simple_byte           13     7 (average)
  7152                           ;	Chosen strategy is simple_byte
  7153  004878  0100               	movlb	0	; () banked
  7154  00487A  5188               	movf	??_Distribution& (0+255),w,b
  7155  00487C  0A00               	xorlw	0	; case 0
  7156  00487E  B4D8               	btfsc	status,2,c
  7157  004880  D7BE               	goto	l8394
  7158  004882  0A01               	xorlw	1	; case 1
  7159  004884  B4D8               	btfsc	status,2,c
  7160  004886  D7C8               	goto	l8396
  7161  004888  0A03               	xorlw	3	; case 2
  7162  00488A  B4D8               	btfsc	status,2,c
  7163  00488C  D7D2               	goto	l8398
  7164  00488E  0A01               	xorlw	1	; case 3
  7165  004890  B4D8               	btfsc	status,2,c
  7166  004892  D7DC               	goto	l8400
  7167  004894                     l8406:
  7168                           
  7169                           ;sort.c: 435: updateServoPosition(1050, 3);
  7170  004894  0E04               	movlw	4
  7171  004896  0100               	movlb	0	; () banked
  7172  004898  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  7173  00489A  0E1A               	movlw	26
  7174  00489C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  7175  00489E  0E00               	movlw	0
  7176  0048A0  0100               	movlb	0	; () banked
  7177  0048A2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  7178  0048A4  0E03               	movlw	3
  7179  0048A6  6F82               	movwf	updateServoPosition@timer& (0+255),b
  7180  0048A8  EC27  F029         	call	_updateServoPosition	;wreg free
  7181                           
  7182                           ;sort.c: 436: servo_timer_target = 750;
  7183  0048AC  0E02               	movlw	2
  7184  0048AE  6E70               	movwf	_servo_timer_target+1,c	;volatile
  7185  0048B0  0EEE               	movlw	238
  7186  0048B2  6E6F               	movwf	_servo_timer_target,c	;volatile
  7187                           
  7188                           ;sort.c: 437: f_panning_to_bin = 1;
  7189  0048B4  0E00               	movlw	0
  7190  0048B6  6E6A               	movwf	_f_panning_to_bin+1,c	;volatile
  7191  0048B8  0E01               	movlw	1
  7192  0048BA  6E69               	movwf	_f_panning_to_bin,c	;volatile
  7193                           
  7194                           ;sort.c: 438: f_can_coming_to_distribution = 0;
  7195  0048BC  0E00               	movlw	0
  7196  0048BE  0101               	movlb	1	; () banked
  7197  0048C0  6F36               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  7198  0048C2  0E00               	movlw	0
  7199  0048C4  6F35               	movwf	_f_can_coming_to_distribution& (0+255),b
  7200  0048C6  0012               	return	
  7201  0048C8                     __end_of_Distribution:
  7202                           	opt stack 0
  7203                           tblptru	equ	0xFF8
  7204                           tblptrh	equ	0xFF7
  7205                           tblptrl	equ	0xFF6
  7206                           tablat	equ	0xFF5
  7207                           prodh	equ	0xFF4
  7208                           prodl	equ	0xFF3
  7209                           postinc0	equ	0xFEE
  7210                           wreg	equ	0xFE8
  7211                           postdec1	equ	0xFE5
  7212                           fsr1l	equ	0xFE1
  7213                           indf2	equ	0xFDF
  7214                           postinc2	equ	0xFDE
  7215                           postdec2	equ	0xFDD
  7216                           fsr2h	equ	0xFDA
  7217                           fsr2l	equ	0xFD9
  7218                           status	equ	0xFD8
  7219                           
  7220 ;; *************** function _machineConfig *****************
  7221 ;; Defined at:
  7222 ;;		line 15 in file "MachineConfig.c"
  7223 ;; Parameters:    Size  Location     Type
  7224 ;;		None
  7225 ;; Auto vars:     Size  Location     Type
  7226 ;;		None
  7227 ;; Return value:  Size  Location     Type
  7228 ;;                  1    wreg      void 
  7229 ;; Registers used:
  7230 ;;		wreg, status,2
  7231 ;; Tracked objects:
  7232 ;;		On entry : 0/0
  7233 ;;		On exit  : 0/0
  7234 ;;		Unchanged: 0/0
  7235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7236 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7237 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7238 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7239 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7240 ;;Total ram usage:        0 bytes
  7241 ;; Hardware stack levels used:    1
  7242 ;; Hardware stack levels required when called:    7
  7243 ;; This function calls:
  7244 ;;		Nothing
  7245 ;; This function is called by:
  7246 ;;		_main
  7247 ;; This function uses a non-reentrant model
  7248 ;;
  7249                           
  7250                           	psect	text15
  7251  005572                     __ptext15:
  7252                           	opt stack 0
  7253  005572                     _machineConfig:
  7254                           	opt stack 23
  7255                           
  7256                           ;MachineConfig.c: 17: OSCCON = 0xF0;
  7257                           
  7258                           ; BSR set to: 1
  7259                           ;incstack = 0
  7260  005572  0EF0               	movlw	240
  7261  005574  6ED3               	movwf	4051,c	;volatile
  7262                           
  7263                           ;MachineConfig.c: 18: OSCTUNEbits.PLLEN = 1;
  7264  005576  8C9B               	bsf	3995,6,c	;volatile
  7265                           
  7266                           ;MachineConfig.c: 22: TRISA = 0b00001111;
  7267  005578  0E0F               	movlw	15
  7268  00557A  6E92               	movwf	3986,c	;volatile
  7269                           
  7270                           ;MachineConfig.c: 24: TRISB = 0b11110010;
  7271  00557C  0EF2               	movlw	242
  7272  00557E  6E93               	movwf	3987,c	;volatile
  7273                           
  7274                           ;MachineConfig.c: 27: TRISC = 0x00;
  7275  005580  0E00               	movlw	0
  7276  005582  6E94               	movwf	3988,c	;volatile
  7277                           
  7278                           ;MachineConfig.c: 31: TRISD = 0x00;
  7279  005584  0E00               	movlw	0
  7280  005586  6E95               	movwf	3989,c	;volatile
  7281                           
  7282                           ;MachineConfig.c: 34: TRISE = 0x00;
  7283  005588  0E00               	movlw	0
  7284  00558A  6E96               	movwf	3990,c	;volatile
  7285                           
  7286                           ;MachineConfig.c: 37: LATA = 0x00;
  7287  00558C  0E00               	movlw	0
  7288  00558E  6E89               	movwf	3977,c	;volatile
  7289                           
  7290                           ;MachineConfig.c: 38: LATB = 0x00;
  7291  005590  0E00               	movlw	0
  7292  005592  6E8A               	movwf	3978,c	;volatile
  7293                           
  7294                           ;MachineConfig.c: 39: LATC = 0x00;
  7295  005594  0E00               	movlw	0
  7296  005596  6E8B               	movwf	3979,c	;volatile
  7297                           
  7298                           ;MachineConfig.c: 40: LATD = 0x00;
  7299  005598  0E00               	movlw	0
  7300  00559A  6E8C               	movwf	3980,c	;volatile
  7301                           
  7302                           ;MachineConfig.c: 41: LATE = 0x00;
  7303  00559C  0E00               	movlw	0
  7304  00559E  6E8D               	movwf	3981,c	;volatile
  7305                           
  7306                           ;MachineConfig.c: 43: nRBPU = 0;
  7307  0055A0  9EF1               	bcf	intcon2,7,c	;volatile
  7308                           
  7309                           ;MachineConfig.c: 46: ADCON0 = 0x00;
  7310  0055A2  0E00               	movlw	0
  7311  0055A4  6EC2               	movwf	4034,c	;volatile
  7312                           
  7313                           ;MachineConfig.c: 47: ADCON1 = 0b00001011;
  7314  0055A6  0E0B               	movlw	11
  7315  0055A8  6EC1               	movwf	4033,c	;volatile
  7316                           
  7317                           ;MachineConfig.c: 52: CVRCON = 0x00;
  7318  0055AA  0E00               	movlw	0
  7319  0055AC  6EB5               	movwf	4021,c	;volatile
  7320                           
  7321                           ;MachineConfig.c: 53: CMCONbits.CIS = 0;
  7322  0055AE  96B4               	bcf	4020,3,c	;volatile
  7323                           
  7324                           ;MachineConfig.c: 54: ADCON2 = 0b10110001;
  7325  0055B0  0EB1               	movlw	177
  7326  0055B2  6EC0               	movwf	4032,c	;volatile
  7327                           
  7328                           ;MachineConfig.c: 57: INT1IE = 1;
  7329  0055B4  86F0               	bsf	intcon3,3,c	;volatile
  7330                           
  7331                           ;MachineConfig.c: 59: TMR0IE = 1;
  7332  0055B6  8AF2               	bsf	intcon,5,c	;volatile
  7333                           
  7334                           ;MachineConfig.c: 60: TMR1IE = 1;
  7335  0055B8  809D               	bsf	3997,0,c	;volatile
  7336                           
  7337                           ;MachineConfig.c: 61: TMR2IE = 1;
  7338  0055BA  829D               	bsf	3997,1,c	;volatile
  7339                           
  7340                           ;MachineConfig.c: 62: TMR3IE = 1;
  7341  0055BC  82A0               	bsf	4000,1,c	;volatile
  7342                           
  7343                           ;MachineConfig.c: 64: T1CON = 0b10110000;
  7344  0055BE  0EB0               	movlw	176
  7345  0055C0  6ECD               	movwf	4045,c	;volatile
  7346                           
  7347                           ;MachineConfig.c: 65: T2CON = 0b01111011;
  7348  0055C2  0E7B               	movlw	123
  7349  0055C4  6ECA               	movwf	4042,c	;volatile
  7350                           
  7351                           ;MachineConfig.c: 66: PR2 = 0x22;
  7352  0055C6  0E22               	movlw	34
  7353  0055C8  6ECB               	movwf	4043,c	;volatile
  7354                           
  7355                           ;MachineConfig.c: 67: T3CON = 0b10110000;
  7356  0055CA  0EB0               	movlw	176
  7357  0055CC  6EB1               	movwf	4017,c	;volatile
  7358                           
  7359                           ;MachineConfig.c: 68: PEIE = 1;
  7360  0055CE  8CF2               	bsf	intcon,6,c	;volatile
  7361                           
  7362                           ;MachineConfig.c: 69: ADIE = 0;
  7363  0055D0  9C9D               	bcf	3997,6,c	;volatile
  7364                           
  7365                           ;MachineConfig.c: 70: (INTCONbits.GIE = 0);
  7366  0055D2  9EF2               	bcf	intcon,7,c	;volatile
  7367  0055D4  0012               	return		;funcret
  7368  0055D6                     __end_of_machineConfig:
  7369                           	opt stack 0
  7370                           tblptru	equ	0xFF8
  7371                           tblptrh	equ	0xFF7
  7372                           tblptrl	equ	0xFF6
  7373                           tablat	equ	0xFF5
  7374                           prodh	equ	0xFF4
  7375                           prodl	equ	0xFF3
  7376                           intcon	equ	0xFF2
  7377                           intcon2	equ	0xFF1
  7378                           intcon3	equ	0xFF0
  7379                           postinc0	equ	0xFEE
  7380                           wreg	equ	0xFE8
  7381                           postdec1	equ	0xFE5
  7382                           fsr1l	equ	0xFE1
  7383                           indf2	equ	0xFDF
  7384                           postinc2	equ	0xFDE
  7385                           postdec2	equ	0xFDD
  7386                           fsr2h	equ	0xFDA
  7387                           fsr2l	equ	0xFD9
  7388                           status	equ	0xFD8
  7389                           
  7390 ;; *************** function _logRun *****************
  7391 ;; Defined at:
  7392 ;;		line 88 in file "EEPROM.c"
  7393 ;; Parameters:    Size  Location     Type
  7394 ;;		None
  7395 ;; Auto vars:     Size  Location     Type
  7396 ;;  byte_i          1   53[BANK0 ] unsigned char 
  7397 ;;  i               2   55[BANK0 ] int 
  7398 ;;  num             1   49[BANK0 ] unsigned char 
  7399 ;;  addr            2   57[BANK0 ] unsigned short 
  7400 ;;  byte11          1   54[BANK0 ] unsigned char 
  7401 ;;  byte3           1   52[BANK0 ] unsigned char 
  7402 ;;  byte2           1   51[BANK0 ] unsigned char 
  7403 ;;  byte1           1   50[BANK0 ] unsigned char 
  7404 ;; Return value:  Size  Location     Type
  7405 ;;                  1    wreg      void 
  7406 ;; Registers used:
  7407 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7408 ;; Tracked objects:
  7409 ;;		On entry : 0/0
  7410 ;;		On exit  : 0/0
  7411 ;;		Unchanged: 0/0
  7412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7413 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7414 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7415 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7416 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7417 ;;Total ram usage:       10 bytes
  7418 ;; Hardware stack levels used:    1
  7419 ;; Hardware stack levels required when called:   11
  7420 ;; This function calls:
  7421 ;;		_EEPROM_read
  7422 ;;		_EEPROM_write
  7423 ;; This function is called by:
  7424 ;;		_main
  7425 ;; This function uses a non-reentrant model
  7426 ;;
  7427                           
  7428                           	psect	text16
  7429  004184                     __ptext16:
  7430                           	opt stack 0
  7431  004184                     _logRun:
  7432                           	opt stack 19
  7433                           
  7434                           ;EEPROM.c: 101: sel = EEPROM_read(0);
  7435                           
  7436                           ;incstack = 0
  7437  004184  0E00               	movlw	0
  7438  004186  0100               	movlb	0	; () banked
  7439  004188  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  7440  00418A  0E00               	movlw	0
  7441  00418C  6F80               	movwf	EEPROM_read@address& (0+255),b
  7442  00418E  EC72  F02F         	call	_EEPROM_read	;wreg free
  7443  004192  0100               	movlb	0	; () banked
  7444  004194  6FFD               	movwf	_sel& (0+255),b
  7445                           
  7446                           ; BSR set to: 0
  7447                           ;EEPROM.c: 102: unsigned short addr = 1 + 11 * sel;
  7448  004196  0100               	movlb	0	; () banked
  7449  004198  51FD               	movf	_sel& (0+255),w,b
  7450  00419A  0D0B               	mullw	11
  7451  00419C  0E01               	movlw	1
  7452  00419E  24F3               	addwf	prodl,w,c
  7453  0041A0  0100               	movlb	0	; () banked
  7454  0041A2  6FB9               	movwf	logRun@addr& (0+255),b
  7455  0041A4  0E00               	movlw	0
  7456  0041A6  20F4               	addwfc	prodh,w,c
  7457  0041A8  0100               	movlb	0	; () banked
  7458  0041AA  6FBA               	movwf	(logRun@addr+1)& (0+255),b
  7459                           
  7460                           ; BSR set to: 0
  7461                           ;EEPROM.c: 105: if (sel < 3){
  7462  0041AC  0E03               	movlw	3
  7463  0041AE  0100               	movlb	0	; () banked
  7464  0041B0  61FD               	cpfslt	_sel& (0+255),b
  7465  0041B2  D00E               	goto	l10114
  7466                           
  7467                           ; BSR set to: 0
  7468                           ;EEPROM.c: 106: unsigned char num = sel+1;
  7469  0041B4  0100               	movlb	0	; () banked
  7470  0041B6  29FD               	incf	_sel& (0+255),w,b
  7471  0041B8  0100               	movlb	0	; () banked
  7472  0041BA  6FB1               	movwf	logRun@num& (0+255),b
  7473                           
  7474                           ; BSR set to: 0
  7475                           ;EEPROM.c: 107: EEPROM_write(0, num);
  7476  0041BC  0E00               	movlw	0
  7477  0041BE  0100               	movlb	0	; () banked
  7478  0041C0  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  7479  0041C2  0E00               	movlw	0
  7480  0041C4  6FAB               	movwf	EEPROM_write@address& (0+255),b
  7481  0041C6  C0B1  F0AD         	movff	logRun@num,EEPROM_write@data
  7482  0041CA  EC7F  F023         	call	_EEPROM_write	;wreg free
  7483                           
  7484                           ;EEPROM.c: 108: }
  7485  0041CE  D00A               	goto	l10116
  7486  0041D0                     l10114:
  7487                           
  7488                           ;EEPROM.c: 109: else{
  7489                           ;EEPROM.c: 110: EEPROM_write(0, 0);
  7490  0041D0  0E00               	movlw	0
  7491  0041D2  0100               	movlb	0	; () banked
  7492  0041D4  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  7493  0041D6  0E00               	movlw	0
  7494  0041D8  6FAB               	movwf	EEPROM_write@address& (0+255),b
  7495  0041DA  0E00               	movlw	0
  7496  0041DC  0100               	movlb	0	; () banked
  7497  0041DE  6FAD               	movwf	EEPROM_write@data& (0+255),b
  7498  0041E0  EC7F  F023         	call	_EEPROM_write	;wreg free
  7499  0041E4                     l10116:
  7500                           
  7501                           ;EEPROM.c: 111: }
  7502                           ;EEPROM.c: 114: unsigned char byte1 = 0b10000000 | count_total;
  7503  0041E4  0100               	movlb	0	; () banked
  7504  0041E6  51FE               	movf	_count_total& (0+255),w,b
  7505  0041E8  0980               	iorlw	128
  7506  0041EA  0100               	movlb	0	; () banked
  7507  0041EC  6FB2               	movwf	logRun@byte1& (0+255),b
  7508                           
  7509                           ; BSR set to: 0
  7510                           ;EEPROM.c: 115: EEPROM_write(addr, byte1);
  7511  0041EE  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  7512  0041F2  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  7513  0041F6  C0B2  F0AD         	movff	logRun@byte1,EEPROM_write@data
  7514  0041FA  EC7F  F023         	call	_EEPROM_write	;wreg free
  7515                           
  7516                           ;EEPROM.c: 116: addr++;
  7517  0041FE  0100               	movlb	0	; () banked
  7518  004200  4BB9               	infsnz	logRun@addr& (0+255),f,b
  7519  004202  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  7520                           
  7521                           ; BSR set to: 0
  7522                           ;EEPROM.c: 119: unsigned char byte2 = (count_pop_no_tab << 4) | count_pop_w_tab;
  7523  004204  0101               	movlb	1	; () banked
  7524  004206  3929               	swapf	_count_pop_no_tab& (0+255),w,b
  7525  004208  0BF0               	andlw	240
  7526  00420A  0101               	movlb	1	; () banked
  7527  00420C  112B               	iorwf	_count_pop_w_tab& (0+255),w,b
  7528  00420E  0100               	movlb	0	; () banked
  7529  004210  6FB3               	movwf	logRun@byte2& (0+255),b
  7530                           
  7531                           ; BSR set to: 0
  7532                           ;EEPROM.c: 120: EEPROM_write(addr, byte2);
  7533  004212  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  7534  004216  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  7535  00421A  C0B3  F0AD         	movff	logRun@byte2,EEPROM_write@data
  7536  00421E  EC7F  F023         	call	_EEPROM_write	;wreg free
  7537                           
  7538                           ;EEPROM.c: 121: addr++;
  7539  004222  0100               	movlb	0	; () banked
  7540  004224  4BB9               	infsnz	logRun@addr& (0+255),f,b
  7541  004226  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  7542                           
  7543                           ; BSR set to: 0
  7544                           ;EEPROM.c: 122: unsigned char byte3 = (count_can_w_lab << 4) | count_can_no_lab;
  7545  004228  0101               	movlb	1	; () banked
  7546  00422A  3927               	swapf	_count_can_w_lab& (0+255),w,b
  7547  00422C  0BF0               	andlw	240
  7548  00422E  0101               	movlb	1	; () banked
  7549  004230  1125               	iorwf	_count_can_no_lab& (0+255),w,b
  7550  004232  0100               	movlb	0	; () banked
  7551  004234  6FB4               	movwf	logRun@byte3& (0+255),b
  7552                           
  7553                           ; BSR set to: 0
  7554                           ;EEPROM.c: 123: EEPROM_write(addr, byte3);
  7555  004236  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  7556  00423A  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  7557  00423E  C0B4  F0AD         	movff	logRun@byte3,EEPROM_write@data
  7558  004242  EC7F  F023         	call	_EEPROM_write	;wreg free
  7559                           
  7560                           ;EEPROM.c: 124: addr++;
  7561  004246  0100               	movlb	0	; () banked
  7562  004248  4BB9               	infsnz	logRun@addr& (0+255),f,b
  7563  00424A  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  7564                           
  7565                           ; BSR set to: 0
  7566                           ;EEPROM.c: 127: for(int i = 0; i < 7; i++){
  7567  00424C  0E00               	movlw	0
  7568  00424E  0100               	movlb	0	; () banked
  7569  004250  6FB8               	movwf	(logRun@i+1)& (0+255),b
  7570  004252  0E00               	movlw	0
  7571  004254  6FB7               	movwf	logRun@i& (0+255),b
  7572                           
  7573                           ; BSR set to: 0
  7574  004256  0100               	movlb	0	; () banked
  7575  004258  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  7576  00425A  D008               	goto	l10140
  7577  00425C  0100               	movlb	0	; () banked
  7578  00425E  51B8               	movf	(logRun@i+1)& (0+255),w,b
  7579  004260  E128               	bnz	l1172
  7580  004262  0E07               	movlw	7
  7581  004264  0100               	movlb	0	; () banked
  7582  004266  5DB7               	subwf	logRun@i& (0+255),w,b
  7583  004268  B0D8               	btfsc	status,0,c
  7584  00426A  D023               	goto	l1172
  7585  00426C                     l10140:
  7586                           
  7587                           ; BSR set to: 0
  7588                           ;EEPROM.c: 128: unsigned char byte_i = startTime[i];
  7589  00426C  90D8               	bcf	status,0,c
  7590  00426E  0100               	movlb	0	; () banked
  7591  004270  35B7               	rlcf	logRun@i& (0+255),w,b
  7592  004272  6ED9               	movwf	fsr2l,c
  7593  004274  0100               	movlb	0	; () banked
  7594  004276  35B8               	rlcf	(logRun@i+1)& (0+255),w,b
  7595  004278  6EDA               	movwf	fsr2h,c
  7596  00427A  0E0E               	movlw	low _startTime
  7597  00427C  26D9               	addwf	fsr2l,f,c
  7598  00427E  0E01               	movlw	high _startTime
  7599  004280  22DA               	addwfc	fsr2h,f,c
  7600  004282  50DF               	movf	indf2,w,c
  7601  004284  0100               	movlb	0	; () banked
  7602  004286  6FB5               	movwf	logRun@byte_i& (0+255),b
  7603                           
  7604                           ; BSR set to: 0
  7605                           ;EEPROM.c: 129: EEPROM_write(addr, byte_i);
  7606  004288  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  7607  00428C  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  7608  004290  C0B5  F0AD         	movff	logRun@byte_i,EEPROM_write@data
  7609  004294  EC7F  F023         	call	_EEPROM_write	;wreg free
  7610                           
  7611                           ;EEPROM.c: 130: addr++;
  7612  004298  0100               	movlb	0	; () banked
  7613  00429A  4BB9               	infsnz	logRun@addr& (0+255),f,b
  7614  00429C  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  7615                           
  7616                           ; BSR set to: 0
  7617  00429E  0100               	movlb	0	; () banked
  7618  0042A0  4BB7               	infsnz	logRun@i& (0+255),f,b
  7619  0042A2  2BB8               	incf	(logRun@i+1)& (0+255),f,b
  7620                           
  7621                           ; BSR set to: 0
  7622  0042A4  0100               	movlb	0	; () banked
  7623  0042A6  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  7624  0042A8  D7E1               	goto	l10140
  7625  0042AA  0100               	movlb	0	; () banked
  7626  0042AC  51B8               	movf	(logRun@i+1)& (0+255),w,b
  7627  0042AE  E101               	bnz	u10080
  7628  0042B0  D7D8               	goto	L9
  7629  0042B2                     u10080:
  7630  0042B2                     l1172:
  7631                           
  7632                           ; BSR set to: 0
  7633                           ;EEPROM.c: 131: }
  7634                           ;EEPROM.c: 134: unsigned char byte11 = total_time;
  7635  0042B2  C0FA  F0B6         	movff	_total_time,logRun@byte11
  7636                           
  7637                           ; BSR set to: 0
  7638                           ;EEPROM.c: 135: EEPROM_write(addr, byte11);
  7639  0042B6  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  7640  0042BA  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  7641  0042BE  C0B6  F0AD         	movff	logRun@byte11,EEPROM_write@data
  7642  0042C2  EC7F  F023         	call	_EEPROM_write	;wreg free
  7643  0042C6  0012               	return		;funcret
  7644  0042C8                     __end_of_logRun:
  7645                           	opt stack 0
  7646                           tblptru	equ	0xFF8
  7647                           tblptrh	equ	0xFF7
  7648                           tblptrl	equ	0xFF6
  7649                           tablat	equ	0xFF5
  7650                           prodh	equ	0xFF4
  7651                           prodl	equ	0xFF3
  7652                           intcon	equ	0xFF2
  7653                           intcon2	equ	0xFF1
  7654                           intcon3	equ	0xFF0
  7655                           postinc0	equ	0xFEE
  7656                           wreg	equ	0xFE8
  7657                           postdec1	equ	0xFE5
  7658                           fsr1l	equ	0xFE1
  7659                           indf2	equ	0xFDF
  7660                           postinc2	equ	0xFDE
  7661                           postdec2	equ	0xFDD
  7662                           fsr2h	equ	0xFDA
  7663                           fsr2l	equ	0xFD9
  7664                           status	equ	0xFD8
  7665                           
  7666 ;; *************** function _initUI *****************
  7667 ;; Defined at:
  7668 ;;		line 62 in file "UI.c"
  7669 ;; Parameters:    Size  Location     Type
  7670 ;;		None
  7671 ;; Auto vars:     Size  Location     Type
  7672 ;;		None
  7673 ;; Return value:  Size  Location     Type
  7674 ;;                  1    wreg      void 
  7675 ;; Registers used:
  7676 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7677 ;; Tracked objects:
  7678 ;;		On entry : 0/0
  7679 ;;		On exit  : 0/0
  7680 ;;		Unchanged: 0/0
  7681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7682 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7683 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7684 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7685 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7686 ;;Total ram usage:        0 bytes
  7687 ;; Hardware stack levels used:    1
  7688 ;; Hardware stack levels required when called:   12
  7689 ;; This function calls:
  7690 ;;		_change_state_to_menu_start
  7691 ;;		_loadRTC
  7692 ;; This function is called by:
  7693 ;;		_main
  7694 ;; This function uses a non-reentrant model
  7695 ;;
  7696                           
  7697                           	psect	text17
  7698  005ACC                     __ptext17:
  7699                           	opt stack 0
  7700  005ACC                     _initUI:
  7701                           	opt stack 18
  7702                           
  7703                           ;UI.c: 63: (INTCONbits.GIE = 1);
  7704                           
  7705                           ;incstack = 0
  7706  005ACC  8EF2               	bsf	intcon,7,c	;volatile
  7707                           
  7708                           ;UI.c: 64: machine_state = UI_state;
  7709  005ACE  0E00               	movlw	0
  7710  005AD0  0100               	movlb	0	; () banked
  7711  005AD2  6FFC               	movwf	_machine_state& (0+255),b
  7712                           
  7713                           ;UI.c: 65: logstate = 0;
  7714  005AD4  0E00               	movlw	0
  7715  005AD6  0100               	movlb	0	; () banked
  7716  005AD8  6FF9               	movwf	(_logstate+1)& (0+255),b
  7717  005ADA  0E00               	movlw	0
  7718  005ADC  6FF8               	movwf	_logstate& (0+255),b
  7719                           
  7720                           ; BSR set to: 0
  7721                           ;UI.c: 67: if(RTCflag){
  7722  005ADE  0100               	movlb	0	; () banked
  7723  005AE0  51E4               	movf	_RTCflag& (0+255),w,b
  7724  005AE2  0100               	movlb	0	; () banked
  7725  005AE4  11E5               	iorwf	(_RTCflag+1)& (0+255),w,b
  7726  005AE6  A4D8               	btfss	status,2,c
  7727                           
  7728                           ; BSR set to: 0
  7729                           ;UI.c: 68: loadRTC();
  7730  005AE8  EC1B  F028         	call	_loadRTC	;wreg free
  7731                           
  7732                           ;UI.c: 69: }
  7733                           ;UI.c: 71: change_state_to_menu_start();
  7734  005AEC  EC84  F02E         	call	_change_state_to_menu_start	;wreg free
  7735                           
  7736                           ;UI.c: 72: firstboot = 1;
  7737  005AF0  0E00               	movlw	0
  7738  005AF2  0101               	movlb	1	; () banked
  7739  005AF4  6F3E               	movwf	(_firstboot+1)& (0+255),b
  7740  005AF6  0E01               	movlw	1
  7741  005AF8  6F3D               	movwf	_firstboot& (0+255),b
  7742                           
  7743                           ; BSR set to: 1
  7744  005AFA  0012               	return		;funcret
  7745  005AFC                     __end_of_initUI:
  7746                           	opt stack 0
  7747                           tblptru	equ	0xFF8
  7748                           tblptrh	equ	0xFF7
  7749                           tblptrl	equ	0xFF6
  7750                           tablat	equ	0xFF5
  7751                           prodh	equ	0xFF4
  7752                           prodl	equ	0xFF3
  7753                           intcon	equ	0xFF2
  7754                           intcon2	equ	0xFF1
  7755                           intcon3	equ	0xFF0
  7756                           postinc0	equ	0xFEE
  7757                           wreg	equ	0xFE8
  7758                           postdec1	equ	0xFE5
  7759                           fsr1l	equ	0xFE1
  7760                           indf2	equ	0xFDF
  7761                           postinc2	equ	0xFDE
  7762                           postdec2	equ	0xFDD
  7763                           fsr2h	equ	0xFDA
  7764                           fsr2l	equ	0xFD9
  7765                           status	equ	0xFD8
  7766                           
  7767 ;; *************** function _loadRTC *****************
  7768 ;; Defined at:
  7769 ;;		line 28 in file "RTC.c"
  7770 ;; Parameters:    Size  Location     Type
  7771 ;;		None
  7772 ;; Auto vars:     Size  Location     Type
  7773 ;;  i               2   22[BANK0 ] int 
  7774 ;; Return value:  Size  Location     Type
  7775 ;;                  1    wreg      void 
  7776 ;; Registers used:
  7777 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7778 ;; Tracked objects:
  7779 ;;		On entry : 0/0
  7780 ;;		On exit  : 0/0
  7781 ;;		Unchanged: 0/0
  7782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7783 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7784 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7785 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7786 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7787 ;;Total ram usage:        3 bytes
  7788 ;; Hardware stack levels used:    1
  7789 ;; Hardware stack levels required when called:    9
  7790 ;; This function calls:
  7791 ;;		_I2C_Master_Init
  7792 ;;		_I2C_Master_Start
  7793 ;;		_I2C_Master_Stop
  7794 ;;		_I2C_Master_Write
  7795 ;; This function is called by:
  7796 ;;		_initUI
  7797 ;; This function uses a non-reentrant model
  7798 ;;
  7799                           
  7800                           	psect	text18
  7801  005036                     __ptext18:
  7802                           	opt stack 0
  7803  005036                     _loadRTC:
  7804                           	opt stack 20
  7805                           
  7806                           ;RTC.c: 30: I2C_Master_Init(10000);
  7807                           
  7808                           ; BSR set to: 1
  7809                           ;incstack = 0
  7810  005036  0E10               	movlw	16
  7811  005038  0100               	movlb	0	; () banked
  7812  00503A  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  7813  00503C  0E27               	movlw	39
  7814  00503E  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  7815  005040  0E00               	movlw	0
  7816  005042  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  7817  005044  0E00               	movlw	0
  7818  005046  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  7819  005048  EC1C  F02B         	call	_I2C_Master_Init	;wreg free
  7820                           
  7821                           ;RTC.c: 32: (INTCONbits.GIE = 0);
  7822  00504C  9EF2               	bcf	intcon,7,c	;volatile
  7823                           
  7824                           ;RTC.c: 34: I2C_Master_Start();
  7825  00504E  ECD5  F02F         	call	_I2C_Master_Start	;wreg free
  7826                           
  7827                           ;RTC.c: 35: I2C_Master_Write(0b11010000);
  7828  005052  0E00               	movlw	0
  7829  005054  0100               	movlb	0	; () banked
  7830  005056  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7831  005058  0ED0               	movlw	208
  7832  00505A  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7833  00505C  ECC3  F02F         	call	_I2C_Master_Write	;wreg free
  7834                           
  7835                           ;RTC.c: 36: I2C_Master_Write(0x00);
  7836  005060  0E00               	movlw	0
  7837  005062  0100               	movlb	0	; () banked
  7838  005064  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7839  005066  0E00               	movlw	0
  7840  005068  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7841  00506A  ECC3  F02F         	call	_I2C_Master_Write	;wreg free
  7842                           
  7843                           ;RTC.c: 37: for(int i = 0; i<7; i++){
  7844  00506E  0E00               	movlw	0
  7845  005070  0100               	movlb	0	; () banked
  7846  005072  6F97               	movwf	(loadRTC@i+1)& (0+255),b
  7847  005074  0E00               	movlw	0
  7848  005076  6F96               	movwf	loadRTC@i& (0+255),b
  7849  005078                     l7774:
  7850                           
  7851                           ; BSR set to: 0
  7852  005078  0100               	movlb	0	; () banked
  7853  00507A  BF97               	btfsc	(loadRTC@i+1)& (0+255),7,b
  7854  00507C  D008               	goto	l7778
  7855  00507E  0100               	movlb	0	; () banked
  7856  005080  5197               	movf	(loadRTC@i+1)& (0+255),w,b
  7857  005082  E11B               	bnz	l7784
  7858  005084  0E07               	movlw	7
  7859  005086  0100               	movlb	0	; () banked
  7860  005088  5D96               	subwf	loadRTC@i& (0+255),w,b
  7861  00508A  B0D8               	btfsc	status,0,c
  7862  00508C  D016               	goto	l7784
  7863  00508E                     l7778:
  7864                           
  7865                           ; BSR set to: 0
  7866                           ;RTC.c: 38: I2C_Master_Write(time[i]);
  7867  00508E  0E1C               	movlw	low _time
  7868  005090  0100               	movlb	0	; () banked
  7869  005092  2596               	addwf	loadRTC@i& (0+255),w,b
  7870  005094  6ED9               	movwf	fsr2l,c
  7871  005096  0E01               	movlw	high _time
  7872  005098  0100               	movlb	0	; () banked
  7873  00509A  2197               	addwfc	(loadRTC@i+1)& (0+255),w,b
  7874  00509C  6EDA               	movwf	fsr2h,c
  7875  00509E  50DF               	movf	indf2,w,c
  7876  0050A0  0100               	movlb	0	; () banked
  7877  0050A2  6F95               	movwf	??_loadRTC& (0+255),b
  7878  0050A4  0100               	movlb	0	; () banked
  7879  0050A6  5195               	movf	??_loadRTC& (0+255),w,b
  7880  0050A8  0100               	movlb	0	; () banked
  7881  0050AA  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7882  0050AC  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  7883  0050AE  ECC3  F02F         	call	_I2C_Master_Write	;wreg free
  7884  0050B2  0100               	movlb	0	; () banked
  7885  0050B4  4B96               	infsnz	loadRTC@i& (0+255),f,b
  7886  0050B6  2B97               	incf	(loadRTC@i+1)& (0+255),f,b
  7887  0050B8  D7DF               	goto	l7774
  7888  0050BA                     l7784:
  7889                           
  7890                           ; BSR set to: 0
  7891                           ;RTC.c: 39: }
  7892                           ;RTC.c: 40: I2C_Master_Stop();
  7893  0050BA  ECD1  F02F         	call	_I2C_Master_Stop	;wreg free
  7894                           
  7895                           ;RTC.c: 41: (INTCONbits.GIE = 1);
  7896  0050BE  8EF2               	bsf	intcon,7,c	;volatile
  7897  0050C0  0012               	return		;funcret
  7898  0050C2                     __end_of_loadRTC:
  7899                           	opt stack 0
  7900                           tblptru	equ	0xFF8
  7901                           tblptrh	equ	0xFF7
  7902                           tblptrl	equ	0xFF6
  7903                           tablat	equ	0xFF5
  7904                           prodh	equ	0xFF4
  7905                           prodl	equ	0xFF3
  7906                           intcon	equ	0xFF2
  7907                           intcon2	equ	0xFF1
  7908                           intcon3	equ	0xFF0
  7909                           postinc0	equ	0xFEE
  7910                           wreg	equ	0xFE8
  7911                           postdec1	equ	0xFE5
  7912                           fsr1l	equ	0xFE1
  7913                           indf2	equ	0xFDF
  7914                           postinc2	equ	0xFDE
  7915                           postdec2	equ	0xFDD
  7916                           fsr2h	equ	0xFDA
  7917                           fsr2l	equ	0xFD9
  7918                           status	equ	0xFD8
  7919                           
  7920 ;; *************** function _I2C_Master_Init *****************
  7921 ;; Defined at:
  7922 ;;		line 15 in file "I2C.c"
  7923 ;; Parameters:    Size  Location     Type
  7924 ;;  c               4   13[BANK0 ] const unsigned long 
  7925 ;; Auto vars:     Size  Location     Type
  7926 ;;		None
  7927 ;; Return value:  Size  Location     Type
  7928 ;;                  1    wreg      void 
  7929 ;; Registers used:
  7930 ;;		wreg, status,2, status,0, cstack
  7931 ;; Tracked objects:
  7932 ;;		On entry : 0/0
  7933 ;;		On exit  : 0/0
  7934 ;;		Unchanged: 0/0
  7935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7936 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7937 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7938 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7939 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7940 ;;Total ram usage:        8 bytes
  7941 ;; Hardware stack levels used:    1
  7942 ;; Hardware stack levels required when called:    8
  7943 ;; This function calls:
  7944 ;;		___lldiv
  7945 ;; This function is called by:
  7946 ;;		_main
  7947 ;;		_loadRTC
  7948 ;; This function uses a non-reentrant model
  7949 ;;
  7950                           
  7951                           	psect	text19
  7952  005638                     __ptext19:
  7953                           	opt stack 0
  7954  005638                     _I2C_Master_Init:
  7955                           	opt stack 20
  7956                           
  7957                           ;I2C.c: 18: SSPSTAT = 0b00000000;
  7958                           
  7959                           ;incstack = 0
  7960  005638  0E00               	movlw	0
  7961  00563A  6EC7               	movwf	4039,c	;volatile
  7962                           
  7963                           ;I2C.c: 19: SSPCON1 = 0b00101000;
  7964  00563C  0E28               	movlw	40
  7965  00563E  6EC6               	movwf	4038,c	;volatile
  7966                           
  7967                           ;I2C.c: 20: SSPCON2 = 0b00000000;
  7968  005640  0E00               	movlw	0
  7969  005642  6EC5               	movwf	4037,c	;volatile
  7970                           
  7971                           ;I2C.c: 21: SSPADD = (32000000/(4*c))-1;
  7972  005644  0E00               	movlw	0
  7973  005646  0100               	movlb	0	; () banked
  7974  005648  6F80               	movwf	___lldiv@dividend& (0+255),b
  7975  00564A  0E48               	movlw	72
  7976  00564C  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  7977  00564E  0EE8               	movlw	232
  7978  005650  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  7979  005652  0E01               	movlw	1
  7980  005654  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  7981  005656  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  7982  00565A  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  7983  00565E  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  7984  005662  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  7985  005666  0E02               	movlw	2
  7986  005668                     u6345:
  7987  005668  90D8               	bcf	status,0,c
  7988  00566A  0100               	movlb	0	; () banked
  7989  00566C  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  7990  00566E  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  7991  005670  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  7992  005672  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  7993  005674  2EE8               	decfsz	wreg,f,c
  7994  005676  D7F8               	goto	u6345
  7995  005678  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  7996  00567C  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  7997  005680  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  7998  005684  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  7999  005688  ECCB  F026         	call	___lldiv	;wreg free
  8000  00568C  0100               	movlb	0	; () banked
  8001  00568E  0580               	decf	?___lldiv& (0+255),w,b
  8002  005690  6EC8               	movwf	4040,c	;volatile
  8003                           
  8004                           ; BSR set to: 0
  8005                           ;I2C.c: 22: TRISC3 = 1;
  8006  005692  8694               	bsf	3988,3,c	;volatile
  8007                           
  8008                           ; BSR set to: 0
  8009                           ;I2C.c: 23: TRISC4 = 1;
  8010  005694  8894               	bsf	3988,4,c	;volatile
  8011                           
  8012                           ; BSR set to: 0
  8013  005696  0012               	return		;funcret
  8014  005698                     __end_of_I2C_Master_Init:
  8015                           	opt stack 0
  8016                           tblptru	equ	0xFF8
  8017                           tblptrh	equ	0xFF7
  8018                           tblptrl	equ	0xFF6
  8019                           tablat	equ	0xFF5
  8020                           prodh	equ	0xFF4
  8021                           prodl	equ	0xFF3
  8022                           intcon	equ	0xFF2
  8023                           intcon2	equ	0xFF1
  8024                           intcon3	equ	0xFF0
  8025                           postinc0	equ	0xFEE
  8026                           wreg	equ	0xFE8
  8027                           postdec1	equ	0xFE5
  8028                           fsr1l	equ	0xFE1
  8029                           indf2	equ	0xFDF
  8030                           postinc2	equ	0xFDE
  8031                           postdec2	equ	0xFDD
  8032                           fsr2h	equ	0xFDA
  8033                           fsr2l	equ	0xFD9
  8034                           status	equ	0xFD8
  8035                           
  8036 ;; *************** function ___lldiv *****************
  8037 ;; Defined at:
  8038 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  8039 ;; Parameters:    Size  Location     Type
  8040 ;;  dividend        4    0[BANK0 ] unsigned long 
  8041 ;;  divisor         4    4[BANK0 ] unsigned long 
  8042 ;; Auto vars:     Size  Location     Type
  8043 ;;  quotient        4    8[BANK0 ] unsigned long 
  8044 ;;  counter         1   12[BANK0 ] unsigned char 
  8045 ;; Return value:  Size  Location     Type
  8046 ;;                  4    0[BANK0 ] unsigned long 
  8047 ;; Registers used:
  8048 ;;		wreg, status,2, status,0
  8049 ;; Tracked objects:
  8050 ;;		On entry : 0/0
  8051 ;;		On exit  : 0/0
  8052 ;;		Unchanged: 0/0
  8053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8054 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8055 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8056 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8057 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8058 ;;Total ram usage:       13 bytes
  8059 ;; Hardware stack levels used:    1
  8060 ;; Hardware stack levels required when called:    7
  8061 ;; This function calls:
  8062 ;;		Nothing
  8063 ;; This function is called by:
  8064 ;;		_I2C_Master_Init
  8065 ;; This function uses a non-reentrant model
  8066 ;;
  8067                           
  8068                           	psect	text20
  8069  004D96                     __ptext20:
  8070                           	opt stack 0
  8071  004D96                     ___lldiv:
  8072                           	opt stack 20
  8073                           
  8074                           ; BSR set to: 0
  8075                           ;incstack = 0
  8076  004D96  0E00               	movlw	0
  8077  004D98  0100               	movlb	0	; () banked
  8078  004D9A  6F88               	movwf	___lldiv@quotient& (0+255),b
  8079  004D9C  0E00               	movlw	0
  8080  004D9E  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  8081  004DA0  0E00               	movlw	0
  8082  004DA2  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  8083  004DA4  0E00               	movlw	0
  8084  004DA6  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  8085                           
  8086                           ; BSR set to: 0
  8087  004DA8  0100               	movlb	0	; () banked
  8088  004DAA  5184               	movf	___lldiv@divisor& (0+255),w,b
  8089  004DAC  0100               	movlb	0	; () banked
  8090  004DAE  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  8091  004DB0  0100               	movlb	0	; () banked
  8092  004DB2  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  8093  004DB4  0100               	movlb	0	; () banked
  8094  004DB6  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  8095  004DB8  B4D8               	btfsc	status,2,c
  8096  004DBA  D042               	goto	l1954
  8097                           
  8098                           ; BSR set to: 0
  8099  004DBC  0E01               	movlw	1
  8100  004DBE  0100               	movlb	0	; () banked
  8101  004DC0  6F8C               	movwf	___lldiv@counter& (0+255),b
  8102  004DC2  D008               	goto	l7098
  8103  004DC4                     l7096:
  8104                           
  8105                           ; BSR set to: 0
  8106  004DC4  0100               	movlb	0	; () banked
  8107  004DC6  90D8               	bcf	status,0,c
  8108  004DC8  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  8109  004DCA  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  8110  004DCC  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  8111  004DCE  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  8112  004DD0  0100               	movlb	0	; () banked
  8113  004DD2  2B8C               	incf	___lldiv@counter& (0+255),f,b
  8114  004DD4                     l7098:
  8115                           
  8116                           ; BSR set to: 0
  8117  004DD4  0100               	movlb	0	; () banked
  8118  004DD6  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  8119  004DD8  D7F5               	goto	l7096
  8120  004DDA                     l7100:
  8121                           
  8122                           ; BSR set to: 0
  8123  004DDA  0100               	movlb	0	; () banked
  8124  004DDC  90D8               	bcf	status,0,c
  8125  004DDE  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  8126  004DE0  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  8127  004DE2  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  8128  004DE4  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  8129                           
  8130                           ; BSR set to: 0
  8131  004DE6  0100               	movlb	0	; () banked
  8132  004DE8  5184               	movf	___lldiv@divisor& (0+255),w,b
  8133  004DEA  0100               	movlb	0	; () banked
  8134  004DEC  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  8135  004DEE  0100               	movlb	0	; () banked
  8136  004DF0  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  8137  004DF2  0100               	movlb	0	; () banked
  8138  004DF4  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  8139  004DF6  0100               	movlb	0	; () banked
  8140  004DF8  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  8141  004DFA  0100               	movlb	0	; () banked
  8142  004DFC  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  8143  004DFE  0100               	movlb	0	; () banked
  8144  004E00  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  8145  004E02  0100               	movlb	0	; () banked
  8146  004E04  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  8147  004E06  A0D8               	btfss	status,0,c
  8148  004E08  D012               	goto	l7108
  8149                           
  8150                           ; BSR set to: 0
  8151  004E0A  0100               	movlb	0	; () banked
  8152  004E0C  5184               	movf	___lldiv@divisor& (0+255),w,b
  8153  004E0E  0100               	movlb	0	; () banked
  8154  004E10  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  8155  004E12  0100               	movlb	0	; () banked
  8156  004E14  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  8157  004E16  0100               	movlb	0	; () banked
  8158  004E18  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  8159  004E1A  0100               	movlb	0	; () banked
  8160  004E1C  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  8161  004E1E  0100               	movlb	0	; () banked
  8162  004E20  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  8163  004E22  0100               	movlb	0	; () banked
  8164  004E24  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  8165  004E26  0100               	movlb	0	; () banked
  8166  004E28  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  8167                           
  8168                           ; BSR set to: 0
  8169  004E2A  0100               	movlb	0	; () banked
  8170  004E2C  8188               	bsf	___lldiv@quotient& (0+255),0,b
  8171  004E2E                     l7108:
  8172                           
  8173                           ; BSR set to: 0
  8174  004E2E  0100               	movlb	0	; () banked
  8175  004E30  90D8               	bcf	status,0,c
  8176  004E32  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  8177  004E34  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  8178  004E36  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  8179  004E38  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  8180                           
  8181                           ; BSR set to: 0
  8182  004E3A  0100               	movlb	0	; () banked
  8183  004E3C  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  8184  004E3E  D7CD               	goto	l7100
  8185  004E40                     l1954:
  8186                           
  8187                           ; BSR set to: 0
  8188  004E40  C088  F080         	movff	___lldiv@quotient,?___lldiv
  8189  004E44  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  8190  004E48  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  8191  004E4C  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  8192                           
  8193                           ; BSR set to: 0
  8194  004E50  0012               	return		;funcret
  8195  004E52                     __end_of___lldiv:
  8196                           	opt stack 0
  8197                           tblptru	equ	0xFF8
  8198                           tblptrh	equ	0xFF7
  8199                           tblptrl	equ	0xFF6
  8200                           tablat	equ	0xFF5
  8201                           prodh	equ	0xFF4
  8202                           prodl	equ	0xFF3
  8203                           intcon	equ	0xFF2
  8204                           intcon2	equ	0xFF1
  8205                           intcon3	equ	0xFF0
  8206                           postinc0	equ	0xFEE
  8207                           wreg	equ	0xFE8
  8208                           postdec1	equ	0xFE5
  8209                           fsr1l	equ	0xFE1
  8210                           indf2	equ	0xFDF
  8211                           postinc2	equ	0xFDE
  8212                           postdec2	equ	0xFDD
  8213                           fsr2h	equ	0xFDA
  8214                           fsr2l	equ	0xFD9
  8215                           status	equ	0xFD8
  8216                           
  8217 ;; *************** function _change_state_to_menu_start *****************
  8218 ;; Defined at:
  8219 ;;		line 477 in file "UI.c"
  8220 ;; Parameters:    Size  Location     Type
  8221 ;;		None
  8222 ;; Auto vars:     Size  Location     Type
  8223 ;;		None
  8224 ;; Return value:  Size  Location     Type
  8225 ;;                  1    wreg      void 
  8226 ;; Registers used:
  8227 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8228 ;; Tracked objects:
  8229 ;;		On entry : 0/0
  8230 ;;		On exit  : 0/0
  8231 ;;		Unchanged: 0/0
  8232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8233 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8234 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8235 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8236 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8237 ;;Total ram usage:        0 bytes
  8238 ;; Hardware stack levels used:    1
  8239 ;; Hardware stack levels required when called:   11
  8240 ;; This function calls:
  8241 ;;		_lcdInst
  8242 ;;		_printRTC
  8243 ;;		_printf
  8244 ;; This function is called by:
  8245 ;;		_initUI
  8246 ;; This function uses a non-reentrant model
  8247 ;;
  8248                           
  8249                           	psect	text21
  8250  005D08                     __ptext21:
  8251                           	opt stack 0
  8252  005D08                     _change_state_to_menu_start:
  8253                           	opt stack 18
  8254                           
  8255                           ;UI.c: 478: cur_state = 0;
  8256                           
  8257                           ; BSR set to: 0
  8258                           ;incstack = 0
  8259  005D08  0E00               	movlw	0
  8260  005D0A  0100               	movlb	0	; () banked
  8261  005D0C  6FE7               	movwf	(_cur_state+1)& (0+255),b
  8262  005D0E  0E00               	movlw	0
  8263  005D10  6FE6               	movwf	_cur_state& (0+255),b
  8264                           
  8265                           ; BSR set to: 0
  8266                           ;UI.c: 480: lcdInst(0b10000000);;
  8267  005D12  0E80               	movlw	128
  8268  005D14  ECAF  F02F         	call	_lcdInst
  8269                           
  8270                           ;UI.c: 481: printRTC();
  8271  005D18  EC30  F019         	call	_printRTC	;wreg free
  8272                           
  8273                           ;UI.c: 482: lcdInst(0b11000000);;
  8274  005D1C  0EC0               	movlw	192
  8275  005D1E  ECAF  F02F         	call	_lcdInst
  8276                           
  8277                           ;UI.c: 483: printf("PUSH TO CONTINUE");
  8278  005D22  0E06               	movlw	low STR_30
  8279  005D24  0100               	movlb	0	; () banked
  8280  005D26  6F8E               	movwf	printf@f& (0+255),b
  8281  005D28  0EFE               	movlw	high STR_30
  8282  005D2A  0100               	movlb	0	; () banked
  8283  005D2C  6F8F               	movwf	(printf@f+1)& (0+255),b
  8284  005D2E  EC67  F00E         	call	_printf	;wreg free
  8285  005D32  0012               	return		;funcret
  8286  005D34                     __end_of_change_state_to_menu_start:
  8287                           	opt stack 0
  8288                           tblptru	equ	0xFF8
  8289                           tblptrh	equ	0xFF7
  8290                           tblptrl	equ	0xFF6
  8291                           tablat	equ	0xFF5
  8292                           prodh	equ	0xFF4
  8293                           prodl	equ	0xFF3
  8294                           intcon	equ	0xFF2
  8295                           intcon2	equ	0xFF1
  8296                           intcon3	equ	0xFF0
  8297                           postinc0	equ	0xFEE
  8298                           wreg	equ	0xFE8
  8299                           postdec1	equ	0xFE5
  8300                           fsr1l	equ	0xFE1
  8301                           indf2	equ	0xFDF
  8302                           postinc2	equ	0xFDE
  8303                           postdec2	equ	0xFDD
  8304                           fsr2h	equ	0xFDA
  8305                           fsr2l	equ	0xFD9
  8306                           status	equ	0xFD8
  8307                           
  8308 ;; *************** function _initTime *****************
  8309 ;; Defined at:
  8310 ;;		line 17 in file "RTC.c"
  8311 ;; Parameters:    Size  Location     Type
  8312 ;;  s               1    wreg     unsigned char 
  8313 ;;  m               1    0[BANK0 ] unsigned char 
  8314 ;;  h               1    1[BANK0 ] unsigned char 
  8315 ;;  w               1    2[BANK0 ] unsigned char 
  8316 ;;  DD              1    3[BANK0 ] unsigned char 
  8317 ;;  MM              1    4[BANK0 ] unsigned char 
  8318 ;;  YY              1    5[BANK0 ] unsigned char 
  8319 ;; Auto vars:     Size  Location     Type
  8320 ;;  s               1    6[BANK0 ] unsigned char 
  8321 ;; Return value:  Size  Location     Type
  8322 ;;                  1    wreg      void 
  8323 ;; Registers used:
  8324 ;;		wreg
  8325 ;; Tracked objects:
  8326 ;;		On entry : 0/0
  8327 ;;		On exit  : 0/0
  8328 ;;		Unchanged: 0/0
  8329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8330 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8331 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8332 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8333 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8334 ;;Total ram usage:        7 bytes
  8335 ;; Hardware stack levels used:    1
  8336 ;; Hardware stack levels required when called:    7
  8337 ;; This function calls:
  8338 ;;		Nothing
  8339 ;; This function is called by:
  8340 ;;		_main
  8341 ;; This function uses a non-reentrant model
  8342 ;;
  8343                           
  8344                           	psect	text22
  8345  005E6C                     __ptext22:
  8346                           	opt stack 0
  8347  005E6C                     _initTime:
  8348                           	opt stack 23
  8349                           
  8350                           ;incstack = 0
  8351                           ;initTime@s stored from wreg
  8352  005E6C  0100               	movlb	0	; () banked
  8353  005E6E  6F86               	movwf	initTime@s& (0+255),b
  8354                           
  8355                           ;RTC.c: 19: time[0] = s;
  8356  005E70  C086  F11C         	movff	initTime@s,_time
  8357                           
  8358                           ;RTC.c: 20: time[1] = m;
  8359  005E74  C080  F11D         	movff	initTime@m,_time+1
  8360                           
  8361                           ;RTC.c: 21: time[2] = h;
  8362  005E78  C081  F11E         	movff	initTime@h,_time+2
  8363                           
  8364                           ;RTC.c: 22: time[3] = w;
  8365  005E7C  C082  F11F         	movff	initTime@w,_time+3
  8366                           
  8367                           ;RTC.c: 23: time[4] = DD;
  8368  005E80  C083  F120         	movff	initTime@DD,_time+4
  8369                           
  8370                           ;RTC.c: 24: time[5] = MM;
  8371  005E84  C084  F121         	movff	initTime@MM,_time+5
  8372                           
  8373                           ;RTC.c: 25: time[6] = YY;
  8374  005E88  C085  F122         	movff	initTime@YY,_time+6
  8375  005E8C  0012               	return		;funcret
  8376  005E8E                     __end_of_initTime:
  8377                           	opt stack 0
  8378                           tblptru	equ	0xFF8
  8379                           tblptrh	equ	0xFF7
  8380                           tblptrl	equ	0xFF6
  8381                           tablat	equ	0xFF5
  8382                           prodh	equ	0xFF4
  8383                           prodl	equ	0xFF3
  8384                           intcon	equ	0xFF2
  8385                           intcon2	equ	0xFF1
  8386                           intcon3	equ	0xFF0
  8387                           postinc0	equ	0xFEE
  8388                           wreg	equ	0xFE8
  8389                           postdec1	equ	0xFE5
  8390                           fsr1l	equ	0xFE1
  8391                           indf2	equ	0xFDF
  8392                           postinc2	equ	0xFDE
  8393                           postdec2	equ	0xFDD
  8394                           fsr2h	equ	0xFDA
  8395                           fsr2l	equ	0xFD9
  8396                           status	equ	0xFD8
  8397                           
  8398 ;; *************** function _initLCD *****************
  8399 ;; Defined at:
  8400 ;;		line 50 in file "lcd.c"
  8401 ;; Parameters:    Size  Location     Type
  8402 ;;		None
  8403 ;; Auto vars:     Size  Location     Type
  8404 ;;		None
  8405 ;; Return value:  Size  Location     Type
  8406 ;;                  1    wreg      void 
  8407 ;; Registers used:
  8408 ;;		wreg, status,2, status,0, cstack
  8409 ;; Tracked objects:
  8410 ;;		On entry : 0/0
  8411 ;;		On exit  : 0/0
  8412 ;;		Unchanged: 0/0
  8413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8414 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8415 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8416 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8417 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8418 ;;Total ram usage:        1 bytes
  8419 ;; Hardware stack levels used:    1
  8420 ;; Hardware stack levels required when called:    9
  8421 ;; This function calls:
  8422 ;;		_lcdInst
  8423 ;; This function is called by:
  8424 ;;		_main
  8425 ;; This function uses a non-reentrant model
  8426 ;;
  8427                           
  8428                           	psect	text23
  8429  005886                     __ptext23:
  8430                           	opt stack 0
  8431  005886                     _initLCD:
  8432                           	opt stack 21
  8433                           
  8434                           ;lcd.c: 51: _delay((unsigned long)((15)*(32000000/4000.0)));
  8435                           
  8436                           ;incstack = 0
  8437  005886  0E9C               	movlw	156
  8438  005888  0100               	movlb	0	; () banked
  8439  00588A  6F83               	movwf	??_initLCD& (0+255),b
  8440  00588C  0ED7               	movlw	215
  8441  00588E                     u10927:
  8442  00588E  2EE8               	decfsz	wreg,f,c
  8443  005890  D7FE               	bra	u10927
  8444  005892  2F83               	decfsz	??_initLCD& (0+255),f,b
  8445  005894  D7FC               	bra	u10927
  8446                           
  8447                           ;lcd.c: 52: lcdInst(0b00110011);
  8448  005896  0E33               	movlw	51
  8449  005898  ECAF  F02F         	call	_lcdInst
  8450                           
  8451                           ;lcd.c: 53: lcdInst(0b00110010);
  8452  00589C  0E32               	movlw	50
  8453  00589E  ECAF  F02F         	call	_lcdInst
  8454                           
  8455                           ;lcd.c: 55: lcdInst(0b00101000);
  8456  0058A2  0E28               	movlw	40
  8457  0058A4  ECAF  F02F         	call	_lcdInst
  8458                           
  8459                           ;lcd.c: 56: lcdInst(0b00001100);
  8460  0058A8  0E0C               	movlw	12
  8461  0058AA  ECAF  F02F         	call	_lcdInst
  8462                           
  8463                           ;lcd.c: 57: lcdInst(0b00000110);
  8464  0058AE  0E06               	movlw	6
  8465  0058B0  ECAF  F02F         	call	_lcdInst
  8466                           
  8467                           ;lcd.c: 58: lcdInst(0b00000001);
  8468  0058B4  0E01               	movlw	1
  8469  0058B6  ECAF  F02F         	call	_lcdInst
  8470                           
  8471                           ;lcd.c: 59: _delay((unsigned long)((15)*(32000000/4000.0)));
  8472  0058BA  0E9C               	movlw	156
  8473  0058BC  0100               	movlb	0	; () banked
  8474  0058BE  6F83               	movwf	??_initLCD& (0+255),b
  8475  0058C0  0ED7               	movlw	215
  8476  0058C2                     u10937:
  8477  0058C2  2EE8               	decfsz	wreg,f,c
  8478  0058C4  D7FE               	bra	u10937
  8479  0058C6  2F83               	decfsz	??_initLCD& (0+255),f,b
  8480  0058C8  D7FC               	bra	u10937
  8481  0058CA  0012               	return		;funcret
  8482  0058CC                     __end_of_initLCD:
  8483                           	opt stack 0
  8484                           tblptru	equ	0xFF8
  8485                           tblptrh	equ	0xFF7
  8486                           tblptrl	equ	0xFF6
  8487                           tablat	equ	0xFF5
  8488                           prodh	equ	0xFF4
  8489                           prodl	equ	0xFF3
  8490                           intcon	equ	0xFF2
  8491                           intcon2	equ	0xFF1
  8492                           intcon3	equ	0xFF0
  8493                           postinc0	equ	0xFEE
  8494                           wreg	equ	0xFE8
  8495                           postdec1	equ	0xFE5
  8496                           fsr1l	equ	0xFE1
  8497                           indf2	equ	0xFDF
  8498                           postinc2	equ	0xFDE
  8499                           postdec2	equ	0xFDD
  8500                           fsr2h	equ	0xFDA
  8501                           fsr2l	equ	0xFD9
  8502                           status	equ	0xFD8
  8503                           
  8504 ;; *************** function _initEEPROM *****************
  8505 ;; Defined at:
  8506 ;;		line 32 in file "EEPROM.c"
  8507 ;; Parameters:    Size  Location     Type
  8508 ;;		None
  8509 ;; Auto vars:     Size  Location     Type
  8510 ;;		None
  8511 ;; Return value:  Size  Location     Type
  8512 ;;                  1    wreg      void 
  8513 ;; Registers used:
  8514 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8515 ;; Tracked objects:
  8516 ;;		On entry : 0/0
  8517 ;;		On exit  : 0/0
  8518 ;;		Unchanged: 0/0
  8519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8520 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8521 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8522 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8523 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8524 ;;Total ram usage:        0 bytes
  8525 ;; Hardware stack levels used:    1
  8526 ;; Hardware stack levels required when called:   11
  8527 ;; This function calls:
  8528 ;;		_EEPROM_write
  8529 ;; This function is called by:
  8530 ;;		_main
  8531 ;; This function uses a non-reentrant model
  8532 ;;
  8533                           
  8534                           	psect	text24
  8535  005EFC                     __ptext24:
  8536                           	opt stack 0
  8537  005EFC                     _initEEPROM:
  8538                           	opt stack 19
  8539                           
  8540                           ;EEPROM.c: 33: EEPROM_write(0, 0x01);
  8541                           
  8542                           ;incstack = 0
  8543  005EFC  0E00               	movlw	0
  8544  005EFE  0100               	movlb	0	; () banked
  8545  005F00  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  8546  005F02  0E00               	movlw	0
  8547  005F04  6FAB               	movwf	EEPROM_write@address& (0+255),b
  8548  005F06  0E01               	movlw	1
  8549  005F08  0100               	movlb	0	; () banked
  8550  005F0A  6FAD               	movwf	EEPROM_write@data& (0+255),b
  8551  005F0C  EC7F  F023         	call	_EEPROM_write	;wreg free
  8552  005F10  0012               	return		;funcret
  8553  005F12                     __end_of_initEEPROM:
  8554                           	opt stack 0
  8555                           tblptru	equ	0xFF8
  8556                           tblptrh	equ	0xFF7
  8557                           tblptrl	equ	0xFF6
  8558                           tablat	equ	0xFF5
  8559                           prodh	equ	0xFF4
  8560                           prodl	equ	0xFF3
  8561                           intcon	equ	0xFF2
  8562                           intcon2	equ	0xFF1
  8563                           intcon3	equ	0xFF0
  8564                           postinc0	equ	0xFEE
  8565                           wreg	equ	0xFE8
  8566                           postdec1	equ	0xFE5
  8567                           fsr1l	equ	0xFE1
  8568                           indf2	equ	0xFDF
  8569                           postinc2	equ	0xFDE
  8570                           postdec2	equ	0xFDD
  8571                           fsr2h	equ	0xFDA
  8572                           fsr2l	equ	0xFD9
  8573                           status	equ	0xFD8
  8574                           
  8575 ;; *************** function _EEPROM_write *****************
  8576 ;; Defined at:
  8577 ;;		line 36 in file "EEPROM.c"
  8578 ;; Parameters:    Size  Location     Type
  8579 ;;  address         2   43[BANK0 ] unsigned short 
  8580 ;;  data            1   45[BANK0 ] unsigned char 
  8581 ;; Auto vars:     Size  Location     Type
  8582 ;;  i               1   48[BANK0 ] unsigned char 
  8583 ;;  i               1   47[BANK0 ] unsigned char 
  8584 ;; Return value:  Size  Location     Type
  8585 ;;                  1    wreg      void 
  8586 ;; Registers used:
  8587 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8588 ;; Tracked objects:
  8589 ;;		On entry : 0/0
  8590 ;;		On exit  : 0/0
  8591 ;;		Unchanged: 0/0
  8592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8593 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8594 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8595 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8596 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8597 ;;Total ram usage:        6 bytes
  8598 ;; Hardware stack levels used:    1
  8599 ;; Hardware stack levels required when called:   10
  8600 ;; This function calls:
  8601 ;;		_EEPROM_read
  8602 ;;		_lcdInst
  8603 ;;		_printf
  8604 ;; This function is called by:
  8605 ;;		_Loading
  8606 ;;		_initEEPROM
  8607 ;;		_logRun
  8608 ;; This function uses a non-reentrant model
  8609 ;;
  8610                           
  8611                           	psect	text25
  8612  0046FE                     __ptext25:
  8613                           	opt stack 0
  8614  0046FE                     _EEPROM_write:
  8615                           	opt stack 18
  8616                           
  8617                           ;EEPROM.c: 37: EECON1bits.WREN = 1;
  8618                           
  8619                           ;incstack = 0
  8620  0046FE  84A6               	bsf	4006,2,c	;volatile
  8621                           
  8622                           ;EEPROM.c: 40: EEADRH = (unsigned char)(address >> 8);
  8623  004700  0100               	movlb	0	; () banked
  8624  004702  51AC               	movf	(EEPROM_write@address+1)& (0+255),w,b
  8625  004704  6EAA               	movwf	4010,c	;volatile
  8626                           
  8627                           ; BSR set to: 0
  8628                           ;EEPROM.c: 41: EEADR = (unsigned char)address;
  8629  004706  C0AB  FFA9         	movff	EEPROM_write@address,4009	;volatile
  8630                           
  8631                           ; BSR set to: 0
  8632                           ;EEPROM.c: 43: EEDATA = data;
  8633  00470A  C0AD  FFA8         	movff	EEPROM_write@data,4008	;volatile
  8634                           
  8635                           ; BSR set to: 0
  8636                           ;EEPROM.c: 44: EECON1bits.EEPGD = 0;
  8637  00470E  9EA6               	bcf	4006,7,c	;volatile
  8638                           
  8639                           ; BSR set to: 0
  8640                           ;EEPROM.c: 45: EECON1bits.CFGS = 0;
  8641  004710  9CA6               	bcf	4006,6,c	;volatile
  8642                           
  8643                           ; BSR set to: 0
  8644                           ;EEPROM.c: 47: (INTCONbits.GIE = 0);
  8645  004712  9EF2               	bcf	intcon,7,c	;volatile
  8646                           
  8647                           ;EEPROM.c: 49: EECON2 = 0x55;
  8648  004714  0E55               	movlw	85
  8649  004716  6EA7               	movwf	4007,c	;volatile
  8650                           
  8651                           ;EEPROM.c: 50: EECON2 = 0x0AA;
  8652  004718  0EAA               	movlw	170
  8653  00471A  6EA7               	movwf	4007,c	;volatile
  8654                           
  8655                           ; BSR set to: 0
  8656                           ;EEPROM.c: 51: EECON1bits.WR = 1;
  8657  00471C  82A6               	bsf	4006,1,c	;volatile
  8658                           
  8659                           ; BSR set to: 0
  8660                           ;EEPROM.c: 52: (INTCONbits.GIE = 1);
  8661  00471E  8EF2               	bsf	intcon,7,c	;volatile
  8662  004720                     l1150:
  8663  004720  A8A1               	btfss	4001,4,c	;volatile
  8664  004722  D7FE               	goto	l1150
  8665                           
  8666                           ;EEPROM.c: 57: PIR2bits.EEIF = 0;
  8667  004724  98A1               	bcf	4001,4,c	;volatile
  8668                           
  8669                           ;EEPROM.c: 58: EECON1bits.WREN = 0;
  8670  004726  94A6               	bcf	4006,2,c	;volatile
  8671                           
  8672                           ;EEPROM.c: 61: if(debug){
  8673  004728  0101               	movlb	1	; () banked
  8674  00472A  512F               	movf	_debug& (0+255),w,b
  8675  00472C  0101               	movlb	1	; () banked
  8676  00472E  1130               	iorwf	(_debug+1)& (0+255),w,b
  8677  004730  B4D8               	btfsc	status,2,c
  8678  004732  0012               	return	
  8679                           
  8680                           ; BSR set to: 1
  8681                           ;EEPROM.c: 62: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8682  004734  0E01               	movlw	1
  8683  004736  ECAF  F02F         	call	_lcdInst
  8684  00473A  0E68               	movlw	104
  8685  00473C  0100               	movlb	0	; () banked
  8686  00473E  6FAE               	movwf	??_EEPROM_write& (0+255),b
  8687  004740  0EE4               	movlw	228
  8688  004742                     u10947:
  8689  004742  2EE8               	decfsz	wreg,f,c
  8690  004744  D7FE               	bra	u10947
  8691  004746  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  8692  004748  D7FC               	bra	u10947
  8693  00474A  F000               	nop	
  8694                           
  8695                           ;EEPROM.c: 63: lcdInst(0b10000000);;
  8696  00474C  0E80               	movlw	128
  8697  00474E  ECAF  F02F         	call	_lcdInst
  8698                           
  8699                           ;EEPROM.c: 64: if(EEPROM_read(address)==data){
  8700  004752  C0AB  F080         	movff	EEPROM_write@address,EEPROM_read@address
  8701  004756  C0AC  F081         	movff	EEPROM_write@address+1,EEPROM_read@address+1
  8702  00475A  EC72  F02F         	call	_EEPROM_read	;wreg free
  8703  00475E  0100               	movlb	0	; () banked
  8704  004760  19AD               	xorwf	EEPROM_write@data& (0+255),w,b
  8705  004762  A4D8               	btfss	status,2,c
  8706  004764  D024               	goto	l7546
  8707                           
  8708                           ; BSR set to: 0
  8709                           ;EEPROM.c: 65: printf("(data: %u, addr: %u)", data, address);
  8710  004766  0EDA               	movlw	low STR_66
  8711  004768  0100               	movlb	0	; () banked
  8712  00476A  6F8E               	movwf	printf@f& (0+255),b
  8713  00476C  0EFA               	movlw	high STR_66
  8714  00476E  0100               	movlb	0	; () banked
  8715  004770  6F8F               	movwf	(printf@f+1)& (0+255),b
  8716  004772  C0AD  F090         	movff	EEPROM_write@data,?_printf+2
  8717  004776  0100               	movlb	0	; () banked
  8718  004778  6B91               	clrf	(?_printf+3)& (0+255),b
  8719  00477A  C0AB  F092         	movff	EEPROM_write@address,?_printf+4
  8720  00477E  C0AC  F093         	movff	EEPROM_write@address+1,?_printf+5
  8721  004782  EC67  F00E         	call	_printf	;wreg free
  8722                           
  8723                           ;EEPROM.c: 66: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));}
      +                          ;
  8724  004786  0E00               	movlw	0
  8725  004788  0100               	movlb	0	; () banked
  8726  00478A  6FAF               	movwf	EEPROM_write@i& (0+255),b
  8727  00478C                     l7538:
  8728                           
  8729                           ; BSR set to: 0
  8730  00478C  0E63               	movlw	99
  8731  00478E  0100               	movlb	0	; () banked
  8732  004790  65AF               	cpfsgt	EEPROM_write@i& (0+255),b
  8733  004792  D001               	goto	l7542
  8734  004794  0012               	return	
  8735  004796                     l7542:
  8736                           
  8737                           ; BSR set to: 0
  8738  004796  0E68               	movlw	104
  8739  004798  0100               	movlb	0	; () banked
  8740  00479A  6FAE               	movwf	??_EEPROM_write& (0+255),b
  8741  00479C  0EE4               	movlw	228
  8742  00479E                     u10957:
  8743  00479E  2EE8               	decfsz	wreg,f,c
  8744  0047A0  D7FE               	bra	u10957
  8745  0047A2  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  8746  0047A4  D7FC               	bra	u10957
  8747  0047A6  F000               	nop	
  8748  0047A8  0100               	movlb	0	; () banked
  8749  0047AA  2BAF               	incf	EEPROM_write@i& (0+255),f,b
  8750  0047AC  D7EF               	goto	l7538
  8751  0047AE                     l7546:
  8752                           
  8753                           ; BSR set to: 0
  8754                           ;EEPROM.c: 68: else{ printf("FAILED"); for(char i=0;i<100;i++){_delay((unsigned long)((1
      +                          0)*(32000000/4000.0)));}; }
  8755  0047AE  0EBC               	movlw	low STR_67
  8756  0047B0  0100               	movlb	0	; () banked
  8757  0047B2  6F8E               	movwf	printf@f& (0+255),b
  8758  0047B4  0EFF               	movlw	high STR_67
  8759  0047B6  0100               	movlb	0	; () banked
  8760  0047B8  6F8F               	movwf	(printf@f+1)& (0+255),b
  8761  0047BA  EC67  F00E         	call	_printf	;wreg free
  8762  0047BE  0E00               	movlw	0
  8763  0047C0  0100               	movlb	0	; () banked
  8764  0047C2  6FB0               	movwf	EEPROM_write@i_1413& (0+255),b
  8765  0047C4                     l7550:
  8766                           
  8767                           ; BSR set to: 0
  8768  0047C4  0E63               	movlw	99
  8769  0047C6  0100               	movlb	0	; () banked
  8770  0047C8  65B0               	cpfsgt	EEPROM_write@i_1413& (0+255),b
  8771  0047CA  D001               	goto	l7554
  8772  0047CC  0012               	return	
  8773  0047CE                     l7554:
  8774                           
  8775                           ; BSR set to: 0
  8776  0047CE  0E68               	movlw	104
  8777  0047D0  0100               	movlb	0	; () banked
  8778  0047D2  6FAE               	movwf	??_EEPROM_write& (0+255),b
  8779  0047D4  0EE4               	movlw	228
  8780  0047D6                     u10967:
  8781  0047D6  2EE8               	decfsz	wreg,f,c
  8782  0047D8  D7FE               	bra	u10967
  8783  0047DA  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  8784  0047DC  D7FC               	bra	u10967
  8785  0047DE  F000               	nop	
  8786  0047E0  0100               	movlb	0	; () banked
  8787  0047E2  2BB0               	incf	EEPROM_write@i_1413& (0+255),f,b
  8788  0047E4  D7EF               	goto	l7550
  8789  0047E6                     __end_of_EEPROM_write:
  8790                           	opt stack 0
  8791                           tblptru	equ	0xFF8
  8792                           tblptrh	equ	0xFF7
  8793                           tblptrl	equ	0xFF6
  8794                           tablat	equ	0xFF5
  8795                           prodh	equ	0xFF4
  8796                           prodl	equ	0xFF3
  8797                           intcon	equ	0xFF2
  8798                           intcon2	equ	0xFF1
  8799                           intcon3	equ	0xFF0
  8800                           postinc0	equ	0xFEE
  8801                           wreg	equ	0xFE8
  8802                           postdec1	equ	0xFE5
  8803                           fsr1l	equ	0xFE1
  8804                           indf2	equ	0xFDF
  8805                           postinc2	equ	0xFDE
  8806                           postdec2	equ	0xFDD
  8807                           fsr2h	equ	0xFDA
  8808                           fsr2l	equ	0xFD9
  8809                           status	equ	0xFD8
  8810                           
  8811 ;; *************** function _EEPROM_read *****************
  8812 ;; Defined at:
  8813 ;;		line 72 in file "EEPROM.c"
  8814 ;; Parameters:    Size  Location     Type
  8815 ;;  address         2    0[BANK0 ] unsigned short 
  8816 ;; Auto vars:     Size  Location     Type
  8817 ;;		None
  8818 ;; Return value:  Size  Location     Type
  8819 ;;                  1    wreg      unsigned char 
  8820 ;; Registers used:
  8821 ;;		wreg, status,2
  8822 ;; Tracked objects:
  8823 ;;		On entry : 0/0
  8824 ;;		On exit  : 0/0
  8825 ;;		Unchanged: 0/0
  8826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8827 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8828 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8829 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8830 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8831 ;;Total ram usage:        2 bytes
  8832 ;; Hardware stack levels used:    1
  8833 ;; Hardware stack levels required when called:    7
  8834 ;; This function calls:
  8835 ;;		Nothing
  8836 ;; This function is called by:
  8837 ;;		_Loading
  8838 ;;		_EEPROM_write
  8839 ;;		_logRun
  8840 ;; This function uses a non-reentrant model
  8841 ;;
  8842                           
  8843                           	psect	text26
  8844  005EE4                     __ptext26:
  8845                           	opt stack 0
  8846  005EE4                     _EEPROM_read:
  8847                           	opt stack 20
  8848                           
  8849                           ;EEPROM.c: 74: EEADRH = (unsigned char)(address >> 8);
  8850                           
  8851                           ;incstack = 0
  8852  005EE4  0100               	movlb	0	; () banked
  8853  005EE6  5181               	movf	(EEPROM_read@address+1)& (0+255),w,b
  8854  005EE8  6EAA               	movwf	4010,c	;volatile
  8855                           
  8856                           ; BSR set to: 0
  8857                           ;EEPROM.c: 75: EEADR = (unsigned char)address;
  8858  005EEA  C080  FFA9         	movff	EEPROM_read@address,4009	;volatile
  8859                           
  8860                           ; BSR set to: 0
  8861                           ;EEPROM.c: 77: EECON1bits.EEPGD = 0;
  8862  005EEE  9EA6               	bcf	4006,7,c	;volatile
  8863                           
  8864                           ; BSR set to: 0
  8865                           ;EEPROM.c: 78: EECON1bits.CFGS = 0;
  8866  005EF0  9CA6               	bcf	4006,6,c	;volatile
  8867                           
  8868                           ; BSR set to: 0
  8869                           ;EEPROM.c: 79: EECON1bits.RD = 1;
  8870  005EF2  80A6               	bsf	4006,0,c	;volatile
  8871  005EF4                     l1163:
  8872  005EF4  B0A6               	btfsc	4006,0,c	;volatile
  8873  005EF6  D7FE               	goto	l1163
  8874                           
  8875                           ;EEPROM.c: 85: return EEDATA;
  8876  005EF8  50A8               	movf	4008,w,c	;volatile
  8877  005EFA  0012               	return	
  8878  005EFC                     __end_of_EEPROM_read:
  8879                           	opt stack 0
  8880                           tblptru	equ	0xFF8
  8881                           tblptrh	equ	0xFF7
  8882                           tblptrl	equ	0xFF6
  8883                           tablat	equ	0xFF5
  8884                           prodh	equ	0xFF4
  8885                           prodl	equ	0xFF3
  8886                           intcon	equ	0xFF2
  8887                           intcon2	equ	0xFF1
  8888                           intcon3	equ	0xFF0
  8889                           postinc0	equ	0xFEE
  8890                           wreg	equ	0xFE8
  8891                           postdec1	equ	0xFE5
  8892                           fsr1l	equ	0xFE1
  8893                           indf2	equ	0xFDF
  8894                           postinc2	equ	0xFDE
  8895                           postdec2	equ	0xFDD
  8896                           fsr2h	equ	0xFDA
  8897                           fsr2l	equ	0xFD9
  8898                           status	equ	0xFD8
  8899                           
  8900 ;; *************** function _UI *****************
  8901 ;; Defined at:
  8902 ;;		line 76 in file "UI.c"
  8903 ;; Parameters:    Size  Location     Type
  8904 ;;		None
  8905 ;; Auto vars:     Size  Location     Type
  8906 ;;  i               1   73[BANK0 ] unsigned char 
  8907 ;;  i               1   85[BANK0 ] unsigned char 
  8908 ;;  i               1   84[BANK0 ] unsigned char 
  8909 ;;  i               1   83[BANK0 ] unsigned char 
  8910 ;;  i               1   82[BANK0 ] unsigned char 
  8911 ;;  i               1   81[BANK0 ] unsigned char 
  8912 ;;  i               1   80[BANK0 ] unsigned char 
  8913 ;;  i               1   79[BANK0 ] unsigned char 
  8914 ;;  i               1   78[BANK0 ] unsigned char 
  8915 ;;  i               1   77[BANK0 ] unsigned char 
  8916 ;;  i               1   76[BANK0 ] unsigned char 
  8917 ;;  i               1   75[BANK0 ] unsigned char 
  8918 ;;  i               1   74[BANK0 ] unsigned char 
  8919 ;;  month           4   86[BANK0 ] unsigned char [4]
  8920 ;;  i               1   72[BANK0 ] unsigned char 
  8921 ;; Return value:  Size  Location     Type
  8922 ;;                  1    wreg      void 
  8923 ;; Registers used:
  8924 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8925 ;; Tracked objects:
  8926 ;;		On entry : 0/0
  8927 ;;		On exit  : 0/0
  8928 ;;		Unchanged: 0/0
  8929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8930 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8931 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8932 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8933 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8934 ;;Total ram usage:       22 bytes
  8935 ;; Hardware stack levels used:    1
  8936 ;; Hardware stack levels required when called:   11
  8937 ;; This function calls:
  8938 ;;		___awdiv
  8939 ;;		___awmod
  8940 ;;		_change_state_to_menu_12
  8941 ;;		_change_state_to_menu_22
  8942 ;;		_lcdInst
  8943 ;;		_printRTC
  8944 ;;		_printf
  8945 ;;		_strcpy
  8946 ;; This function is called by:
  8947 ;;		_main
  8948 ;; This function uses a non-reentrant model
  8949 ;;
  8950                           
  8951                           	psect	text27
  8952  000012                     __ptext27:
  8953                           	opt stack 0
  8954  000012                     _UI:
  8955                           	opt stack 19
  8956                           
  8957                           ;UI.c: 77: if(machine_state == DoneSorting_state){
  8958                           
  8959                           ;incstack = 0
  8960  000012  0E02               	movlw	2
  8961  000014  0100               	movlb	0	; () banked
  8962  000016  19FC               	xorwf	_machine_state& (0+255),w,b
  8963  000018  A4D8               	btfss	status,2,c
  8964  00001A  D086               	goto	l9542
  8965                           
  8966                           ; BSR set to: 0
  8967                           ;UI.c: 78: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8968  00001C  0E01               	movlw	1
  8969  00001E  ECAF  F02F         	call	_lcdInst
  8970  000022  0E68               	movlw	104
  8971  000024  0100               	movlb	0	; () banked
  8972  000026  6FC4               	movwf	??_UI& (0+255),b
  8973  000028  0EE4               	movlw	228
  8974  00002A                     u10977:
  8975  00002A  2EE8               	decfsz	wreg,f,c
  8976  00002C  D7FE               	bra	u10977
  8977  00002E  2FC4               	decfsz	??_UI& (0+255),f,b
  8978  000030  D7FC               	bra	u10977
  8979  000032  F000               	nop	
  8980                           
  8981                           ;UI.c: 79: lcdInst(0b10000000);;
  8982  000034  0E80               	movlw	128
  8983  000036  ECAF  F02F         	call	_lcdInst
  8984                           
  8985                           ;UI.c: 80: printf("RESULTS IN LOG %d", sel+1);
  8986  00003A  0E7F               	movlw	low STR_1
  8987  00003C  0100               	movlb	0	; () banked
  8988  00003E  6F8E               	movwf	printf@f& (0+255),b
  8989  000040  0EFB               	movlw	high STR_1
  8990  000042  0100               	movlb	0	; () banked
  8991  000044  6F8F               	movwf	(printf@f+1)& (0+255),b
  8992  000046  0E01               	movlw	1
  8993  000048  0100               	movlb	0	; () banked
  8994  00004A  25FD               	addwf	_sel& (0+255),w,b
  8995  00004C  0100               	movlb	0	; () banked
  8996  00004E  6F90               	movwf	(?_printf+2)& (0+255),b
  8997  000050  0100               	movlb	0	; () banked
  8998  000052  6B91               	clrf	(?_printf+3)& (0+255),b
  8999  000054  0E00               	movlw	0
  9000  000056  2391               	addwfc	(?_printf+3)& (0+255),f,b
  9001  000058  EC67  F00E         	call	_printf	;wreg free
  9002                           
  9003                           ;UI.c: 81: lcdInst(0b11000000);;
  9004  00005C  0EC0               	movlw	192
  9005  00005E  ECAF  F02F         	call	_lcdInst
  9006                           
  9007                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  9008  000062  0E0E               	movlw	14
  9009  000064  0100               	movlb	0	; () banked
  9010  000066  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  9011  000068  0E10               	movlw	16
  9012  00006A  6F82               	movwf	___awmod@divisor& (0+255),b
  9013  00006C  C0FA  F080         	movff	_total_time,___awmod@dividend
  9014  000070  C0FB  F081         	movff	_total_time+1,___awmod@dividend+1
  9015  000074  EC7E  F027         	call	___awmod	;wreg free
  9016  000078  C080  F0C6         	movff	?___awmod,_UI$2434
  9017  00007C  C081  F0C7         	movff	?___awmod+1,_UI$2434+1
  9018                           
  9019                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  9020  000080  0E56               	movlw	low STR_2
  9021  000082  0100               	movlb	0	; () banked
  9022  000084  6F8E               	movwf	printf@f& (0+255),b
  9023  000086  0EFF               	movlw	high STR_2
  9024  000088  0100               	movlb	0	; () banked
  9025  00008A  6F8F               	movwf	(printf@f+1)& (0+255),b
  9026  00008C  0E0E               	movlw	14
  9027  00008E  0100               	movlb	0	; () banked
  9028  000090  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  9029  000092  0E10               	movlw	16
  9030  000094  6F82               	movwf	___awmod@divisor& (0+255),b
  9031  000096  C0FA  F080         	movff	_total_time,___awmod@dividend
  9032  00009A  C0FB  F081         	movff	_total_time+1,___awmod@dividend+1
  9033  00009E  EC7E  F027         	call	___awmod	;wreg free
  9034  0000A2  C080  F086         	movff	?___awmod,___awdiv@dividend
  9035  0000A6  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  9036  0000AA  0E00               	movlw	0
  9037  0000AC  0100               	movlb	0	; () banked
  9038  0000AE  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  9039  0000B0  0E3C               	movlw	60
  9040  0000B2  6F88               	movwf	___awdiv@divisor& (0+255),b
  9041  0000B4  EC6C  F026         	call	___awdiv	;wreg free
  9042  0000B8  C086  F090         	movff	?___awdiv,?_printf+2
  9043  0000BC  C087  F091         	movff	?___awdiv+1,?_printf+3
  9044  0000C0  C0C6  F080         	movff	_UI$2434,___awmod@dividend
  9045  0000C4  C0C7  F081         	movff	_UI$2434+1,___awmod@dividend+1
  9046  0000C8  0E00               	movlw	0
  9047  0000CA  0100               	movlb	0	; () banked
  9048  0000CC  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  9049  0000CE  0E3C               	movlw	60
  9050  0000D0  6F82               	movwf	___awmod@divisor& (0+255),b
  9051  0000D2  EC7E  F027         	call	___awmod	;wreg free
  9052  0000D6  C080  F092         	movff	?___awmod,?_printf+4
  9053  0000DA  C081  F093         	movff	?___awmod+1,?_printf+5
  9054  0000DE  EC67  F00E         	call	_printf	;wreg free
  9055  0000E2                     l190:
  9056  0000E2  B281               	btfsc	3969,1,c	;volatile
  9057  0000E4  D7FE               	goto	l190
  9058  0000E6                     l193:
  9059  0000E6  A281               	btfss	3969,1,c	;volatile
  9060  0000E8  D7FE               	goto	l193
  9061                           
  9062                           ;UI.c: 86: }
  9063                           ;UI.c: 87: if(cur_state == 12){
  9064  0000EA  0E0C               	movlw	12
  9065  0000EC  0100               	movlb	0	; () banked
  9066  0000EE  19E6               	xorwf	_cur_state& (0+255),w,b
  9067  0000F0  0100               	movlb	0	; () banked
  9068  0000F2  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
  9069  0000F4  A4D8               	btfss	status,2,c
  9070  0000F6  D003               	goto	l9536
  9071                           
  9072                           ; BSR set to: 0
  9073                           ;UI.c: 88: change_state_to_menu_12();
  9074  0000F8  ECE2  F02C         	call	_change_state_to_menu_12	;wreg free
  9075                           
  9076                           ;UI.c: 89: }
  9077  0000FC  D002               	goto	l198
  9078  0000FE                     l9536:
  9079                           
  9080                           ;UI.c: 90: else{
  9081                           ;UI.c: 91: change_state_to_menu_22();
  9082  0000FE  ECC6  F02C         	call	_change_state_to_menu_22	;wreg free
  9083  000102                     l198:
  9084  000102  B281               	btfsc	3969,1,c	;volatile
  9085  000104  D7FE               	goto	l198
  9086                           
  9087                           ;UI.c: 94: _delay((unsigned long)((100)*(32000000/4000.0)));
  9088  000106  0E05               	movlw	5
  9089  000108  0100               	movlb	0	; () banked
  9090  00010A  6FC5               	movwf	(??_UI+1)& (0+255),b
  9091  00010C  0E0F               	movlw	15
  9092  00010E  0100               	movlb	0	; () banked
  9093  000110  6FC4               	movwf	??_UI& (0+255),b
  9094  000112  0EF1               	movlw	241
  9095  000114                     u10987:
  9096  000114  2EE8               	decfsz	wreg,f,c
  9097  000116  D7FE               	bra	u10987
  9098  000118  2FC4               	decfsz	??_UI& (0+255),f,b
  9099  00011A  D7FC               	bra	u10987
  9100  00011C  2FC5               	decfsz	(??_UI+1)& (0+255),f,b
  9101  00011E  D7FA               	bra	u10987
  9102                           
  9103                           ;UI.c: 95: machine_state = UI_state;
  9104  000120  0E00               	movlw	0
  9105  000122  0100               	movlb	0	; () banked
  9106  000124  6FFC               	movwf	_machine_state& (0+255),b
  9107                           
  9108                           ;UI.c: 96: }
  9109  000126  D3D2               	goto	l9862
  9110  000128                     l9542:
  9111                           
  9112                           ; BSR set to: 0
  9113                           ;UI.c: 97: else if(cur_state == 0){
  9114  000128  0100               	movlb	0	; () banked
  9115  00012A  51E6               	movf	_cur_state& (0+255),w,b
  9116  00012C  0100               	movlb	0	; () banked
  9117  00012E  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
  9118  000130  A4D8               	btfss	status,2,c
  9119  000132  D3CC               	goto	l9862
  9120                           
  9121                           ; BSR set to: 0
  9122                           ;UI.c: 98: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
  9123  000134  0E00               	movlw	0
  9124  000136  0100               	movlb	0	; () banked
  9125  000138  6FC8               	movwf	UI@i& (0+255),b
  9126  00013A                     l9546:
  9127                           
  9128                           ; BSR set to: 0
  9129  00013A  0E63               	movlw	99
  9130  00013C  0100               	movlb	0	; () banked
  9131  00013E  65C8               	cpfsgt	UI@i& (0+255),b
  9132  000140  D001               	goto	l9550
  9133  000142  D00C               	goto	l9554
  9134  000144                     l9550:
  9135                           
  9136                           ; BSR set to: 0
  9137  000144  0E68               	movlw	104
  9138  000146  0100               	movlb	0	; () banked
  9139  000148  6FC4               	movwf	??_UI& (0+255),b
  9140  00014A  0EE4               	movlw	228
  9141  00014C                     u10997:
  9142  00014C  2EE8               	decfsz	wreg,f,c
  9143  00014E  D7FE               	bra	u10997
  9144  000150  2FC4               	decfsz	??_UI& (0+255),f,b
  9145  000152  D7FC               	bra	u10997
  9146  000154  F000               	nop	
  9147  000156  0100               	movlb	0	; () banked
  9148  000158  2BC8               	incf	UI@i& (0+255),f,b
  9149  00015A  D7EF               	goto	l9546
  9150  00015C                     l9554:
  9151                           
  9152                           ; BSR set to: 0
  9153                           ;UI.c: 99: if(cur_state == 0){
  9154  00015C  0100               	movlb	0	; () banked
  9155  00015E  51E6               	movf	_cur_state& (0+255),w,b
  9156  000160  0100               	movlb	0	; () banked
  9157  000162  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
  9158  000164  A4D8               	btfss	status,2,c
  9159  000166  D3B2               	goto	l9862
  9160                           
  9161                           ; BSR set to: 0
  9162                           ;UI.c: 100: printRTC();
  9163  000168  EC30  F019         	call	_printRTC	;wreg free
  9164                           
  9165                           ;UI.c: 101: }
  9166                           ;UI.c: 102: }
  9167                           ;UI.c: 103: while(logstate){
  9168  00016C  D3AF               	goto	l9862
  9169  00016E                     l9558:
  9170                           
  9171                           ;UI.c: 105: if(!log_completion){
  9172  00016E  0100               	movlb	0	; () banked
  9173  000170  51F0               	movf	_log_completion& (0+255),w,b
  9174  000172  0100               	movlb	0	; () banked
  9175  000174  11F1               	iorwf	(_log_completion+1)& (0+255),w,b
  9176  000176  A4D8               	btfss	status,2,c
  9177  000178  D041               	goto	l9588
  9178                           
  9179                           ; BSR set to: 0
  9180                           ;UI.c: 106: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  9181  00017A  0E01               	movlw	1
  9182  00017C  ECAF  F02F         	call	_lcdInst
  9183  000180  0E68               	movlw	104
  9184  000182  0100               	movlb	0	; () banked
  9185  000184  6FC4               	movwf	??_UI& (0+255),b
  9186  000186  0EE4               	movlw	228
  9187  000188                     u11007:
  9188  000188  2EE8               	decfsz	wreg,f,c
  9189  00018A  D7FE               	bra	u11007
  9190  00018C  2FC4               	decfsz	??_UI& (0+255),f,b
  9191  00018E  D7FC               	bra	u11007
  9192  000190  F000               	nop	
  9193                           
  9194                           ;UI.c: 107: lcdInst(0b10000000);;
  9195  000192  0E80               	movlw	128
  9196  000194  ECAF  F02F         	call	_lcdInst
  9197                           
  9198                           ;UI.c: 108: printf("-- LOG %2d HERE--", log);
  9199  000198  0E6D               	movlw	low STR_3
  9200  00019A  0100               	movlb	0	; () banked
  9201  00019C  6F8E               	movwf	printf@f& (0+255),b
  9202  00019E  0EFB               	movlw	high STR_3
  9203  0001A0  0100               	movlb	0	; () banked
  9204  0001A2  6F8F               	movwf	(printf@f+1)& (0+255),b
  9205  0001A4  C0EE  F090         	movff	_log,?_printf+2
  9206  0001A8  C0EF  F091         	movff	_log+1,?_printf+3
  9207  0001AC  EC67  F00E         	call	_printf	;wreg free
  9208                           
  9209                           ;UI.c: 109: lcdInst(0b11000000);;
  9210  0001B0  0EC0               	movlw	192
  9211  0001B2  ECAF  F02F         	call	_lcdInst
  9212                           
  9213                           ;UI.c: 110: printf("DIDN'T COMPLETE");
  9214  0001B6  0E79               	movlw	low STR_4
  9215  0001B8  0100               	movlb	0	; () banked
  9216  0001BA  6F8E               	movwf	printf@f& (0+255),b
  9217  0001BC  0EFE               	movlw	high STR_4
  9218  0001BE  0100               	movlb	0	; () banked
  9219  0001C0  6F8F               	movwf	(printf@f+1)& (0+255),b
  9220  0001C2  EC67  F00E         	call	_printf	;wreg free
  9221  0001C6                     l9572:
  9222  0001C6  0E00               	movlw	0
  9223  0001C8  0100               	movlb	0	; () banked
  9224  0001CA  6FC9               	movwf	UI@i_413& (0+255),b
  9225  0001CC                     l9574:
  9226                           
  9227                           ; BSR set to: 0
  9228  0001CC  0E63               	movlw	99
  9229  0001CE  0100               	movlb	0	; () banked
  9230  0001D0  65C9               	cpfsgt	UI@i_413& (0+255),b
  9231  0001D2  D001               	goto	l9578
  9232  0001D4  D00C               	goto	l9582
  9233  0001D6                     l9578:
  9234                           
  9235                           ; BSR set to: 0
  9236  0001D6  0E68               	movlw	104
  9237  0001D8  0100               	movlb	0	; () banked
  9238  0001DA  6FC4               	movwf	??_UI& (0+255),b
  9239  0001DC  0EE4               	movlw	228
  9240  0001DE                     u11017:
  9241  0001DE  2EE8               	decfsz	wreg,f,c
  9242  0001E0  D7FE               	bra	u11017
  9243  0001E2  2FC4               	decfsz	??_UI& (0+255),f,b
  9244  0001E4  D7FC               	bra	u11017
  9245  0001E6  F000               	nop	
  9246  0001E8  0100               	movlb	0	; () banked
  9247  0001EA  2BC9               	incf	UI@i_413& (0+255),f,b
  9248  0001EC  D7EF               	goto	l9574
  9249  0001EE                     l9582:
  9250                           
  9251                           ; BSR set to: 0
  9252  0001EE  0100               	movlb	0	; () banked
  9253  0001F0  51F8               	movf	_logstate& (0+255),w,b
  9254  0001F2  0100               	movlb	0	; () banked
  9255  0001F4  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9256  0001F6  B4D8               	btfsc	status,2,c
  9257  0001F8  0012               	return	
  9258  0001FA  D7E5               	goto	l9572
  9259  0001FC                     l9588:
  9260                           
  9261                           ; BSR set to: 0
  9262                           ;UI.c: 114: else{
  9263                           ;UI.c: 115: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  9264  0001FC  0E01               	movlw	1
  9265  0001FE  ECAF  F02F         	call	_lcdInst
  9266  000202  0E68               	movlw	104
  9267  000204  0100               	movlb	0	; () banked
  9268  000206  6FC4               	movwf	??_UI& (0+255),b
  9269  000208  0EE4               	movlw	228
  9270  00020A                     u11027:
  9271  00020A  2EE8               	decfsz	wreg,f,c
  9272  00020C  D7FE               	bra	u11027
  9273  00020E  2FC4               	decfsz	??_UI& (0+255),f,b
  9274  000210  D7FC               	bra	u11027
  9275  000212  F000               	nop	
  9276                           
  9277                           ;UI.c: 116: lcdInst(0b10000000);;
  9278  000214  0E80               	movlw	128
  9279  000216  ECAF  F02F         	call	_lcdInst
  9280                           
  9281                           ;UI.c: 117: printf("-- LOG %2d HERE--", log);
  9282  00021A  0E6D               	movlw	low STR_3
  9283  00021C  0100               	movlb	0	; () banked
  9284  00021E  6F8E               	movwf	printf@f& (0+255),b
  9285  000220  0EFB               	movlw	high STR_3
  9286  000222  0100               	movlb	0	; () banked
  9287  000224  6F8F               	movwf	(printf@f+1)& (0+255),b
  9288  000226  C0EE  F090         	movff	_log,?_printf+2
  9289  00022A  C0EF  F091         	movff	_log+1,?_printf+3
  9290  00022E  EC67  F00E         	call	_printf	;wreg free
  9291                           
  9292                           ;UI.c: 118: lcdInst(0b11000000);;
  9293  000232  0EC0               	movlw	192
  9294  000234  ECAF  F02F         	call	_lcdInst
  9295                           
  9296                           ;UI.c: 119: printf("PAUSE < | BACK >");
  9297  000238  0EF5               	movlw	low STR_6
  9298  00023A  0100               	movlb	0	; () banked
  9299  00023C  6F8E               	movwf	printf@f& (0+255),b
  9300  00023E  0EFD               	movlw	high STR_6
  9301  000240  0100               	movlb	0	; () banked
  9302  000242  6F8F               	movwf	(printf@f+1)& (0+255),b
  9303  000244  EC67  F00E         	call	_printf	;wreg free
  9304                           
  9305                           ;UI.c: 121: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9306  000248  0E00               	movlw	0
  9307  00024A  0100               	movlb	0	; () banked
  9308  00024C  6FCA               	movwf	UI@i_416& (0+255),b
  9309  00024E                     l9602:
  9310                           
  9311                           ; BSR set to: 0
  9312  00024E  0E63               	movlw	99
  9313  000250  0100               	movlb	0	; () banked
  9314  000252  65CA               	cpfsgt	UI@i_416& (0+255),b
  9315  000254  D001               	goto	l9606
  9316  000256  D00C               	goto	l9610
  9317  000258                     l9606:
  9318                           
  9319                           ; BSR set to: 0
  9320  000258  0E68               	movlw	104
  9321  00025A  0100               	movlb	0	; () banked
  9322  00025C  6FC4               	movwf	??_UI& (0+255),b
  9323  00025E  0EE4               	movlw	228
  9324  000260                     u11037:
  9325  000260  2EE8               	decfsz	wreg,f,c
  9326  000262  D7FE               	bra	u11037
  9327  000264  2FC4               	decfsz	??_UI& (0+255),f,b
  9328  000266  D7FC               	bra	u11037
  9329  000268  F000               	nop	
  9330  00026A  0100               	movlb	0	; () banked
  9331  00026C  2BCA               	incf	UI@i_416& (0+255),f,b
  9332  00026E  D7EF               	goto	l9602
  9333  000270                     l9610:
  9334                           
  9335                           ; BSR set to: 0
  9336  000270  0100               	movlb	0	; () banked
  9337  000272  51F8               	movf	_logstate& (0+255),w,b
  9338  000274  0100               	movlb	0	; () banked
  9339  000276  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9340  000278  B4D8               	btfsc	status,2,c
  9341  00027A  0012               	return	
  9342                           
  9343                           ; BSR set to: 0
  9344                           ;UI.c: 122: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9345                           
  9346                           ; BSR set to: 0
  9347                           
  9348                           ; BSR set to: 0
  9349  00027C  0E00               	movlw	0
  9350  00027E  0100               	movlb	0	; () banked
  9351  000280  6FCB               	movwf	UI@i_417& (0+255),b
  9352  000282                     l9616:
  9353                           
  9354                           ; BSR set to: 0
  9355  000282  0E63               	movlw	99
  9356  000284  0100               	movlb	0	; () banked
  9357  000286  65CB               	cpfsgt	UI@i_417& (0+255),b
  9358  000288  D001               	goto	l9620
  9359  00028A  D00C               	goto	l9624
  9360  00028C                     l9620:
  9361                           
  9362                           ; BSR set to: 0
  9363  00028C  0E68               	movlw	104
  9364  00028E  0100               	movlb	0	; () banked
  9365  000290  6FC4               	movwf	??_UI& (0+255),b
  9366  000292  0EE4               	movlw	228
  9367  000294                     u11047:
  9368  000294  2EE8               	decfsz	wreg,f,c
  9369  000296  D7FE               	bra	u11047
  9370  000298  2FC4               	decfsz	??_UI& (0+255),f,b
  9371  00029A  D7FC               	bra	u11047
  9372  00029C  F000               	nop	
  9373  00029E  0100               	movlb	0	; () banked
  9374  0002A0  2BCB               	incf	UI@i_417& (0+255),f,b
  9375  0002A2  D7EF               	goto	l9616
  9376  0002A4                     l9624:
  9377                           
  9378                           ; BSR set to: 0
  9379  0002A4  0100               	movlb	0	; () banked
  9380  0002A6  51F8               	movf	_logstate& (0+255),w,b
  9381  0002A8  0100               	movlb	0	; () banked
  9382  0002AA  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9383  0002AC  B4D8               	btfsc	status,2,c
  9384  0002AE  0012               	return	
  9385                           
  9386                           ; BSR set to: 0
  9387                           ;UI.c: 124: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  9388                           
  9389                           ; BSR set to: 0
  9390                           
  9391                           ; BSR set to: 0
  9392  0002B0  0E01               	movlw	1
  9393  0002B2  ECAF  F02F         	call	_lcdInst
  9394  0002B6  0E68               	movlw	104
  9395  0002B8  0100               	movlb	0	; () banked
  9396  0002BA  6FC4               	movwf	??_UI& (0+255),b
  9397  0002BC  0EE4               	movlw	228
  9398  0002BE                     u11057:
  9399  0002BE  2EE8               	decfsz	wreg,f,c
  9400  0002C0  D7FE               	bra	u11057
  9401  0002C2  2FC4               	decfsz	??_UI& (0+255),f,b
  9402  0002C4  D7FC               	bra	u11057
  9403  0002C6  F000               	nop	
  9404                           
  9405                           ;UI.c: 125: lcdInst(0b10000000);;
  9406  0002C8  0E80               	movlw	128
  9407  0002CA  ECAF  F02F         	call	_lcdInst
  9408                           
  9409                           ;UI.c: 126: printf("START:");
  9410  0002CE  0EC3               	movlw	low STR_7
  9411  0002D0  0100               	movlb	0	; () banked
  9412  0002D2  6F8E               	movwf	printf@f& (0+255),b
  9413  0002D4  0EFF               	movlw	high STR_7
  9414  0002D6  0100               	movlb	0	; () banked
  9415  0002D8  6F8F               	movwf	(printf@f+1)& (0+255),b
  9416  0002DA  EC67  F00E         	call	_printf	;wreg free
  9417                           
  9418                           ;UI.c: 127: lcdInst(0b11000000);;
  9419  0002DE  0EC0               	movlw	192
  9420  0002E0  ECAF  F02F         	call	_lcdInst
  9421                           
  9422                           ;UI.c: 128: char month[] = "MMM";
  9423  0002E4  C14D  F0D6         	movff	UI@F3250,UI@month
  9424  0002E8  C14E  F0D7         	movff	UI@F3250+1,UI@month+1
  9425  0002EC  C14F  F0D8         	movff	UI@F3250+2,UI@month+2
  9426  0002F0  C150  F0D9         	movff	UI@F3250+3,UI@month+3
  9427                           
  9428                           ;UI.c: 129: switch(log_startTime[5]){
  9429  0002F4  D0C3               	goto	l9668
  9430  0002F6                     l9640:
  9431                           
  9432                           ;UI.c: 131: strcpy(month, "JAN");
  9433  0002F6  0ED6               	movlw	low UI@month
  9434  0002F8  0100               	movlb	0	; () banked
  9435  0002FA  6F80               	movwf	strcpy@to& (0+255),b
  9436  0002FC  0E00               	movlw	high UI@month
  9437  0002FE  0100               	movlb	0	; () banked
  9438  000300  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9439  000302  0EDA               	movlw	low STR_8
  9440  000304  0100               	movlb	0	; () banked
  9441  000306  6F82               	movwf	strcpy@from& (0+255),b
  9442  000308  0EFF               	movlw	high STR_8
  9443  00030A  0100               	movlb	0	; () banked
  9444  00030C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9445  00030E  ECFE  F02C         	call	_strcpy	;wreg free
  9446                           
  9447                           ;UI.c: 132: break;
  9448  000312  D0E6               	goto	l9670
  9449  000314                     l9642:
  9450                           
  9451                           ;UI.c: 134: strcpy(month, "FEB");
  9452  000314  0ED6               	movlw	low UI@month
  9453  000316  0100               	movlb	0	; () banked
  9454  000318  6F80               	movwf	strcpy@to& (0+255),b
  9455  00031A  0E00               	movlw	high UI@month
  9456  00031C  0100               	movlb	0	; () banked
  9457  00031E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9458  000320  0ECA               	movlw	low STR_9
  9459  000322  0100               	movlb	0	; () banked
  9460  000324  6F82               	movwf	strcpy@from& (0+255),b
  9461  000326  0EFF               	movlw	high STR_9
  9462  000328  0100               	movlb	0	; () banked
  9463  00032A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9464  00032C  ECFE  F02C         	call	_strcpy	;wreg free
  9465                           
  9466                           ;UI.c: 135: break;
  9467  000330  D0D7               	goto	l9670
  9468  000332                     l9644:
  9469                           
  9470                           ;UI.c: 137: strcpy(month, "MAR");
  9471  000332  0ED6               	movlw	low UI@month
  9472  000334  0100               	movlb	0	; () banked
  9473  000336  6F80               	movwf	strcpy@to& (0+255),b
  9474  000338  0E00               	movlw	high UI@month
  9475  00033A  0100               	movlb	0	; () banked
  9476  00033C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9477  00033E  0EE6               	movlw	low STR_10
  9478  000340  0100               	movlb	0	; () banked
  9479  000342  6F82               	movwf	strcpy@from& (0+255),b
  9480  000344  0EFF               	movlw	high STR_10
  9481  000346  0100               	movlb	0	; () banked
  9482  000348  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9483  00034A  ECFE  F02C         	call	_strcpy	;wreg free
  9484                           
  9485                           ;UI.c: 138: break;
  9486  00034E  D0C8               	goto	l9670
  9487  000350                     l9646:
  9488                           
  9489                           ;UI.c: 140: strcpy(month, "APR");
  9490  000350  0ED6               	movlw	low UI@month
  9491  000352  0100               	movlb	0	; () banked
  9492  000354  6F80               	movwf	strcpy@to& (0+255),b
  9493  000356  0E00               	movlw	high UI@month
  9494  000358  0100               	movlb	0	; () banked
  9495  00035A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9496  00035C  0EEA               	movlw	low STR_11
  9497  00035E  0100               	movlb	0	; () banked
  9498  000360  6F82               	movwf	strcpy@from& (0+255),b
  9499  000362  0EFF               	movlw	high STR_11
  9500  000364  0100               	movlb	0	; () banked
  9501  000366  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9502  000368  ECFE  F02C         	call	_strcpy	;wreg free
  9503                           
  9504                           ;UI.c: 141: break;
  9505  00036C  D0B9               	goto	l9670
  9506  00036E                     l9648:
  9507                           
  9508                           ;UI.c: 143: strcpy(month, "MAY");
  9509  00036E  0ED6               	movlw	low UI@month
  9510  000370  0100               	movlb	0	; () banked
  9511  000372  6F80               	movwf	strcpy@to& (0+255),b
  9512  000374  0E00               	movlw	high UI@month
  9513  000376  0100               	movlb	0	; () banked
  9514  000378  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9515  00037A  0EFA               	movlw	low STR_12
  9516  00037C  0100               	movlb	0	; () banked
  9517  00037E  6F82               	movwf	strcpy@from& (0+255),b
  9518  000380  0EFF               	movlw	high STR_12
  9519  000382  0100               	movlb	0	; () banked
  9520  000384  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9521  000386  ECFE  F02C         	call	_strcpy	;wreg free
  9522                           
  9523                           ;UI.c: 144: break;
  9524  00038A  D0AA               	goto	l9670
  9525  00038C                     l9650:
  9526                           
  9527                           ;UI.c: 146: strcpy(month, "JUN");
  9528  00038C  0ED6               	movlw	low UI@month
  9529  00038E  0100               	movlb	0	; () banked
  9530  000390  6F80               	movwf	strcpy@to& (0+255),b
  9531  000392  0E00               	movlw	high UI@month
  9532  000394  0100               	movlb	0	; () banked
  9533  000396  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9534  000398  0EDE               	movlw	low STR_13
  9535  00039A  0100               	movlb	0	; () banked
  9536  00039C  6F82               	movwf	strcpy@from& (0+255),b
  9537  00039E  0EFF               	movlw	high STR_13
  9538  0003A0  0100               	movlb	0	; () banked
  9539  0003A2  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9540  0003A4  ECFE  F02C         	call	_strcpy	;wreg free
  9541                           
  9542                           ;UI.c: 147: break;
  9543  0003A8  D09B               	goto	l9670
  9544  0003AA                     l9652:
  9545                           
  9546                           ;UI.c: 149: strcpy(month, "JUL");
  9547  0003AA  0ED6               	movlw	low UI@month
  9548  0003AC  0100               	movlb	0	; () banked
  9549  0003AE  6F80               	movwf	strcpy@to& (0+255),b
  9550  0003B0  0E00               	movlw	high UI@month
  9551  0003B2  0100               	movlb	0	; () banked
  9552  0003B4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9553  0003B6  0ED6               	movlw	low STR_14
  9554  0003B8  0100               	movlb	0	; () banked
  9555  0003BA  6F82               	movwf	strcpy@from& (0+255),b
  9556  0003BC  0EFF               	movlw	high STR_14
  9557  0003BE  0100               	movlb	0	; () banked
  9558  0003C0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9559  0003C2  ECFE  F02C         	call	_strcpy	;wreg free
  9560                           
  9561                           ;UI.c: 150: break;
  9562  0003C6  D08C               	goto	l9670
  9563  0003C8                     l9654:
  9564                           
  9565                           ;UI.c: 152: strcpy(month, "AUG");
  9566  0003C8  0ED6               	movlw	low UI@month
  9567  0003CA  0100               	movlb	0	; () banked
  9568  0003CC  6F80               	movwf	strcpy@to& (0+255),b
  9569  0003CE  0E00               	movlw	high UI@month
  9570  0003D0  0100               	movlb	0	; () banked
  9571  0003D2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9572  0003D4  0ED2               	movlw	low STR_15
  9573  0003D6  0100               	movlb	0	; () banked
  9574  0003D8  6F82               	movwf	strcpy@from& (0+255),b
  9575  0003DA  0EFF               	movlw	high STR_15
  9576  0003DC  0100               	movlb	0	; () banked
  9577  0003DE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9578  0003E0  ECFE  F02C         	call	_strcpy	;wreg free
  9579                           
  9580                           ;UI.c: 153: break;
  9581  0003E4  D07D               	goto	l9670
  9582  0003E6                     l9656:
  9583                           
  9584                           ;UI.c: 155: strcpy(month, "SEP");
  9585  0003E6  0ED6               	movlw	low UI@month
  9586  0003E8  0100               	movlb	0	; () banked
  9587  0003EA  6F80               	movwf	strcpy@to& (0+255),b
  9588  0003EC  0E00               	movlw	high UI@month
  9589  0003EE  0100               	movlb	0	; () banked
  9590  0003F0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9591  0003F2  0EE2               	movlw	low STR_16
  9592  0003F4  0100               	movlb	0	; () banked
  9593  0003F6  6F82               	movwf	strcpy@from& (0+255),b
  9594  0003F8  0EFF               	movlw	high STR_16
  9595  0003FA  0100               	movlb	0	; () banked
  9596  0003FC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9597  0003FE  ECFE  F02C         	call	_strcpy	;wreg free
  9598                           
  9599                           ;UI.c: 156: break;
  9600  000402  D06E               	goto	l9670
  9601  000404                     l9658:
  9602                           
  9603                           ;UI.c: 158: strcpy(month, "OCT");
  9604  000404  0ED6               	movlw	low UI@month
  9605  000406  0100               	movlb	0	; () banked
  9606  000408  6F80               	movwf	strcpy@to& (0+255),b
  9607  00040A  0E00               	movlw	high UI@month
  9608  00040C  0100               	movlb	0	; () banked
  9609  00040E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9610  000410  0EF2               	movlw	low STR_17
  9611  000412  0100               	movlb	0	; () banked
  9612  000414  6F82               	movwf	strcpy@from& (0+255),b
  9613  000416  0EFF               	movlw	high STR_17
  9614  000418  0100               	movlb	0	; () banked
  9615  00041A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9616  00041C  ECFE  F02C         	call	_strcpy	;wreg free
  9617                           
  9618                           ;UI.c: 159: break;
  9619  000420  D05F               	goto	l9670
  9620  000422                     l9660:
  9621                           
  9622                           ;UI.c: 161: strcpy(month, "NOV");
  9623  000422  0ED6               	movlw	low UI@month
  9624  000424  0100               	movlb	0	; () banked
  9625  000426  6F80               	movwf	strcpy@to& (0+255),b
  9626  000428  0E00               	movlw	high UI@month
  9627  00042A  0100               	movlb	0	; () banked
  9628  00042C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9629  00042E  0EF6               	movlw	low STR_18
  9630  000430  0100               	movlb	0	; () banked
  9631  000432  6F82               	movwf	strcpy@from& (0+255),b
  9632  000434  0EFF               	movlw	high STR_18
  9633  000436  0100               	movlb	0	; () banked
  9634  000438  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9635  00043A  ECFE  F02C         	call	_strcpy	;wreg free
  9636                           
  9637                           ;UI.c: 162: break;
  9638  00043E  D050               	goto	l9670
  9639  000440                     l9662:
  9640                           
  9641                           ;UI.c: 164: strcpy(month, "DEC");
  9642  000440  0ED6               	movlw	low UI@month
  9643  000442  0100               	movlb	0	; () banked
  9644  000444  6F80               	movwf	strcpy@to& (0+255),b
  9645  000446  0E00               	movlw	high UI@month
  9646  000448  0100               	movlb	0	; () banked
  9647  00044A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9648  00044C  0ECE               	movlw	low STR_19
  9649  00044E  0100               	movlb	0	; () banked
  9650  000450  6F82               	movwf	strcpy@from& (0+255),b
  9651  000452  0EFF               	movlw	high STR_19
  9652  000454  0100               	movlb	0	; () banked
  9653  000456  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9654  000458  ECFE  F02C         	call	_strcpy	;wreg free
  9655                           
  9656                           ;UI.c: 165: break;
  9657  00045C  D041               	goto	l9670
  9658  00045E                     l9664:
  9659                           
  9660                           ;UI.c: 167: strcpy(month, "ERR");
  9661  00045E  0ED6               	movlw	low UI@month
  9662  000460  0100               	movlb	0	; () banked
  9663  000462  6F80               	movwf	strcpy@to& (0+255),b
  9664  000464  0E00               	movlw	high UI@month
  9665  000466  0100               	movlb	0	; () banked
  9666  000468  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9667  00046A  0EEE               	movlw	low STR_20
  9668  00046C  0100               	movlb	0	; () banked
  9669  00046E  6F82               	movwf	strcpy@from& (0+255),b
  9670  000470  0EFF               	movlw	high STR_20
  9671  000472  0100               	movlb	0	; () banked
  9672  000474  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9673  000476  ECFE  F02C         	call	_strcpy	;wreg free
  9674                           
  9675                           ;UI.c: 169: }
  9676                           
  9677                           ;UI.c: 168: break;
  9678  00047A  D032               	goto	l9670
  9679  00047C                     l9668:
  9680  00047C  EE21  F00A         	lfsr	2,_log_startTime+10
  9681  000480  CFDE F0C4          	movff	postinc2,??_UI
  9682  000484  CFDD F0C5          	movff	postdec2,??_UI+1
  9683                           
  9684                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9685                           ; Switch size 1, requested type "space"
  9686                           ; Number of cases is 1, Range of values is 0 to 0
  9687                           ; switch strategies available:
  9688                           ; Name         Instructions Cycles
  9689                           ; simple_byte            4     3 (average)
  9690                           ;	Chosen strategy is simple_byte
  9691  000488  0100               	movlb	0	; () banked
  9692  00048A  51C5               	movf	(??_UI+1)& (0+255),w,b
  9693  00048C  0A00               	xorlw	0	; case 0
  9694  00048E  A4D8               	btfss	status,2,c
  9695  000490  D7E6               	goto	l9664
  9696                           
  9697                           ; BSR set to: 0
  9698                           ; Switch size 1, requested type "space"
  9699                           ; Number of cases is 12, Range of values is 1 to 12
  9700                           ; switch strategies available:
  9701                           ; Name         Instructions Cycles
  9702                           ; simple_byte           37    19 (average)
  9703                           ;	Chosen strategy is simple_byte
  9704  000492  0100               	movlb	0	; () banked
  9705  000494  51C4               	movf	??_UI& (0+255),w,b
  9706  000496  0A01               	xorlw	1	; case 1
  9707  000498  B4D8               	btfsc	status,2,c
  9708  00049A  D72D               	goto	l9640
  9709  00049C  0A03               	xorlw	3	; case 2
  9710  00049E  B4D8               	btfsc	status,2,c
  9711  0004A0  D739               	goto	l9642
  9712  0004A2  0A01               	xorlw	1	; case 3
  9713  0004A4  B4D8               	btfsc	status,2,c
  9714  0004A6  D745               	goto	l9644
  9715  0004A8  0A07               	xorlw	7	; case 4
  9716  0004AA  B4D8               	btfsc	status,2,c
  9717  0004AC  D751               	goto	l9646
  9718  0004AE  0A01               	xorlw	1	; case 5
  9719  0004B0  B4D8               	btfsc	status,2,c
  9720  0004B2  D75D               	goto	l9648
  9721  0004B4  0A03               	xorlw	3	; case 6
  9722  0004B6  B4D8               	btfsc	status,2,c
  9723  0004B8  D769               	goto	l9650
  9724  0004BA  0A01               	xorlw	1	; case 7
  9725  0004BC  B4D8               	btfsc	status,2,c
  9726  0004BE  D775               	goto	l9652
  9727  0004C0  0A0F               	xorlw	15	; case 8
  9728  0004C2  B4D8               	btfsc	status,2,c
  9729  0004C4  D781               	goto	l9654
  9730  0004C6  0A01               	xorlw	1	; case 9
  9731  0004C8  B4D8               	btfsc	status,2,c
  9732  0004CA  D78D               	goto	l9656
  9733  0004CC  0A03               	xorlw	3	; case 10
  9734  0004CE  B4D8               	btfsc	status,2,c
  9735  0004D0  D799               	goto	l9658
  9736  0004D2  0A01               	xorlw	1	; case 11
  9737  0004D4  B4D8               	btfsc	status,2,c
  9738  0004D6  D7A5               	goto	l9660
  9739  0004D8  0A07               	xorlw	7	; case 12
  9740  0004DA  B4D8               	btfsc	status,2,c
  9741  0004DC  D7B1               	goto	l9662
  9742  0004DE  D7BF               	goto	l9664
  9743  0004E0                     l9670:
  9744                           
  9745                           ;UI.c: 170: printf("%02d%s | %02d:%02d:%02d", log_startTime[4],month,log_startTime[2],lo
      +                          g_startTime[1],log_startTime[0]);
  9746  0004E0  0EC2               	movlw	low STR_21
  9747  0004E2  0100               	movlb	0	; () banked
  9748  0004E4  6F8E               	movwf	printf@f& (0+255),b
  9749  0004E6  0EFA               	movlw	high STR_21
  9750  0004E8  0100               	movlb	0	; () banked
  9751  0004EA  6F8F               	movwf	(printf@f+1)& (0+255),b
  9752  0004EC  C108  F090         	movff	_log_startTime+8,?_printf+2
  9753  0004F0  C109  F091         	movff	_log_startTime+9,?_printf+3
  9754  0004F4  0ED6               	movlw	low UI@month
  9755  0004F6  0100               	movlb	0	; () banked
  9756  0004F8  6F92               	movwf	(?_printf+4)& (0+255),b
  9757  0004FA  0E00               	movlw	high UI@month
  9758  0004FC  0100               	movlb	0	; () banked
  9759  0004FE  6F93               	movwf	(?_printf+5)& (0+255),b
  9760  000500  C104  F094         	movff	_log_startTime+4,?_printf+6
  9761  000504  C105  F095         	movff	_log_startTime+5,?_printf+7
  9762  000508  C102  F096         	movff	_log_startTime+2,?_printf+8
  9763  00050C  C103  F097         	movff	_log_startTime+3,?_printf+9
  9764  000510  C100  F098         	movff	_log_startTime,?_printf+10
  9765  000514  C101  F099         	movff	_log_startTime+1,?_printf+11
  9766  000518  EC67  F00E         	call	_printf	;wreg free
  9767                           
  9768                           ;UI.c: 172: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9769  00051C  0E00               	movlw	0
  9770  00051E  0100               	movlb	0	; () banked
  9771  000520  6FCC               	movwf	UI@i_435& (0+255),b
  9772  000522                     l9674:
  9773                           
  9774                           ; BSR set to: 0
  9775  000522  0E63               	movlw	99
  9776  000524  0100               	movlb	0	; () banked
  9777  000526  65CC               	cpfsgt	UI@i_435& (0+255),b
  9778  000528  D001               	goto	l9678
  9779  00052A  D00C               	goto	l9682
  9780  00052C                     l9678:
  9781                           
  9782                           ; BSR set to: 0
  9783  00052C  0E68               	movlw	104
  9784  00052E  0100               	movlb	0	; () banked
  9785  000530  6FC4               	movwf	??_UI& (0+255),b
  9786  000532  0EE4               	movlw	228
  9787  000534                     u11067:
  9788  000534  2EE8               	decfsz	wreg,f,c
  9789  000536  D7FE               	bra	u11067
  9790  000538  2FC4               	decfsz	??_UI& (0+255),f,b
  9791  00053A  D7FC               	bra	u11067
  9792  00053C  F000               	nop	
  9793  00053E  0100               	movlb	0	; () banked
  9794  000540  2BCC               	incf	UI@i_435& (0+255),f,b
  9795  000542  D7EF               	goto	l9674
  9796  000544                     l9682:
  9797                           
  9798                           ; BSR set to: 0
  9799  000544  0100               	movlb	0	; () banked
  9800  000546  51F8               	movf	_logstate& (0+255),w,b
  9801  000548  0100               	movlb	0	; () banked
  9802  00054A  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9803  00054C  B4D8               	btfsc	status,2,c
  9804  00054E  0012               	return	
  9805                           
  9806                           ; BSR set to: 0
  9807                           ;UI.c: 173: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9808                           
  9809                           ; BSR set to: 0
  9810                           
  9811                           ; BSR set to: 0
  9812  000550  0E00               	movlw	0
  9813  000552  0100               	movlb	0	; () banked
  9814  000554  6FCD               	movwf	UI@i_436& (0+255),b
  9815  000556                     l9688:
  9816                           
  9817                           ; BSR set to: 0
  9818  000556  0E63               	movlw	99
  9819  000558  0100               	movlb	0	; () banked
  9820  00055A  65CD               	cpfsgt	UI@i_436& (0+255),b
  9821  00055C  D001               	goto	l9692
  9822  00055E  D00C               	goto	l9696
  9823  000560                     l9692:
  9824                           
  9825                           ; BSR set to: 0
  9826  000560  0E68               	movlw	104
  9827  000562  0100               	movlb	0	; () banked
  9828  000564  6FC4               	movwf	??_UI& (0+255),b
  9829  000566  0EE4               	movlw	228
  9830  000568                     u11077:
  9831  000568  2EE8               	decfsz	wreg,f,c
  9832  00056A  D7FE               	bra	u11077
  9833  00056C  2FC4               	decfsz	??_UI& (0+255),f,b
  9834  00056E  D7FC               	bra	u11077
  9835  000570  F000               	nop	
  9836  000572  0100               	movlb	0	; () banked
  9837  000574  2BCD               	incf	UI@i_436& (0+255),f,b
  9838  000576  D7EF               	goto	l9688
  9839  000578                     l9696:
  9840                           
  9841                           ; BSR set to: 0
  9842  000578  0100               	movlb	0	; () banked
  9843  00057A  51F8               	movf	_logstate& (0+255),w,b
  9844  00057C  0100               	movlb	0	; () banked
  9845  00057E  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9846  000580  B4D8               	btfsc	status,2,c
  9847  000582  0012               	return	
  9848                           
  9849                           ; BSR set to: 0
  9850                           ;UI.c: 175: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  9851                           
  9852                           ; BSR set to: 0
  9853                           
  9854                           ; BSR set to: 0
  9855  000584  0E01               	movlw	1
  9856  000586  ECAF  F02F         	call	_lcdInst
  9857  00058A  0E68               	movlw	104
  9858  00058C  0100               	movlb	0	; () banked
  9859  00058E  6FC4               	movwf	??_UI& (0+255),b
  9860  000590  0EE4               	movlw	228
  9861  000592                     u11087:
  9862  000592  2EE8               	decfsz	wreg,f,c
  9863  000594  D7FE               	bra	u11087
  9864  000596  2FC4               	decfsz	??_UI& (0+255),f,b
  9865  000598  D7FC               	bra	u11087
  9866  00059A  F000               	nop	
  9867                           
  9868                           ;UI.c: 176: lcdInst(0b10000000);;
  9869  00059C  0E80               	movlw	128
  9870  00059E  ECAF  F02F         	call	_lcdInst
  9871                           
  9872                           ;UI.c: 177: printf("DURATION:");
  9873  0005A2  0E9A               	movlw	low STR_22
  9874  0005A4  0100               	movlb	0	; () banked
  9875  0005A6  6F8E               	movwf	printf@f& (0+255),b
  9876  0005A8  0EFF               	movlw	high STR_22
  9877  0005AA  0100               	movlb	0	; () banked
  9878  0005AC  6F8F               	movwf	(printf@f+1)& (0+255),b
  9879  0005AE  EC67  F00E         	call	_printf	;wreg free
  9880                           
  9881                           ;UI.c: 178: lcdInst(0b11000000);;
  9882  0005B2  0EC0               	movlw	192
  9883  0005B4  ECAF  F02F         	call	_lcdInst
  9884                           
  9885                           ;UI.c: 179: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  9886  0005B8  0E0E               	movlw	14
  9887  0005BA  0100               	movlb	0	; () banked
  9888  0005BC  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  9889  0005BE  0E10               	movlw	16
  9890  0005C0  6F82               	movwf	___awmod@divisor& (0+255),b
  9891  0005C2  C0F6  F080         	movff	_log_total_time,___awmod@dividend
  9892  0005C6  C0F7  F081         	movff	_log_total_time+1,___awmod@dividend+1
  9893  0005CA  EC7E  F027         	call	___awmod	;wreg free
  9894  0005CE  C080  F0C6         	movff	?___awmod,_UI$2434
  9895  0005D2  C081  F0C7         	movff	?___awmod+1,_UI$2434+1
  9896                           
  9897                           ;UI.c: 179: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  9898  0005D6  0E48               	movlw	low STR_23
  9899  0005D8  0100               	movlb	0	; () banked
  9900  0005DA  6F8E               	movwf	printf@f& (0+255),b
  9901  0005DC  0EFF               	movlw	high STR_23
  9902  0005DE  0100               	movlb	0	; () banked
  9903  0005E0  6F8F               	movwf	(printf@f+1)& (0+255),b
  9904  0005E2  0E0E               	movlw	14
  9905  0005E4  0100               	movlb	0	; () banked
  9906  0005E6  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  9907  0005E8  0E10               	movlw	16
  9908  0005EA  6F82               	movwf	___awmod@divisor& (0+255),b
  9909  0005EC  C0F6  F080         	movff	_log_total_time,___awmod@dividend
  9910  0005F0  C0F7  F081         	movff	_log_total_time+1,___awmod@dividend+1
  9911  0005F4  EC7E  F027         	call	___awmod	;wreg free
  9912  0005F8  C080  F086         	movff	?___awmod,___awdiv@dividend
  9913  0005FC  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  9914  000600  0E00               	movlw	0
  9915  000602  0100               	movlb	0	; () banked
  9916  000604  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  9917  000606  0E3C               	movlw	60
  9918  000608  6F88               	movwf	___awdiv@divisor& (0+255),b
  9919  00060A  EC6C  F026         	call	___awdiv	;wreg free
  9920  00060E  C086  F090         	movff	?___awdiv,?_printf+2
  9921  000612  C087  F091         	movff	?___awdiv+1,?_printf+3
  9922  000616  C0C6  F080         	movff	_UI$2434,___awmod@dividend
  9923  00061A  C0C7  F081         	movff	_UI$2434+1,___awmod@dividend+1
  9924  00061E  0E00               	movlw	0
  9925  000620  0100               	movlb	0	; () banked
  9926  000622  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  9927  000624  0E3C               	movlw	60
  9928  000626  6F82               	movwf	___awmod@divisor& (0+255),b
  9929  000628  EC7E  F027         	call	___awmod	;wreg free
  9930  00062C  C080  F092         	movff	?___awmod,?_printf+4
  9931  000630  C081  F093         	movff	?___awmod+1,?_printf+5
  9932  000634  EC67  F00E         	call	_printf	;wreg free
  9933                           
  9934                           ;UI.c: 181: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9935  000638  0E00               	movlw	0
  9936  00063A  0100               	movlb	0	; () banked
  9937  00063C  6FCE               	movwf	UI@i_439& (0+255),b
  9938  00063E                     l9716:
  9939                           
  9940                           ; BSR set to: 0
  9941  00063E  0E63               	movlw	99
  9942  000640  0100               	movlb	0	; () banked
  9943  000642  65CE               	cpfsgt	UI@i_439& (0+255),b
  9944  000644  D001               	goto	l9720
  9945  000646  D00C               	goto	l9724
  9946  000648                     l9720:
  9947                           
  9948                           ; BSR set to: 0
  9949  000648  0E68               	movlw	104
  9950  00064A  0100               	movlb	0	; () banked
  9951  00064C  6FC4               	movwf	??_UI& (0+255),b
  9952  00064E  0EE4               	movlw	228
  9953  000650                     u11097:
  9954  000650  2EE8               	decfsz	wreg,f,c
  9955  000652  D7FE               	bra	u11097
  9956  000654  2FC4               	decfsz	??_UI& (0+255),f,b
  9957  000656  D7FC               	bra	u11097
  9958  000658  F000               	nop	
  9959  00065A  0100               	movlb	0	; () banked
  9960  00065C  2BCE               	incf	UI@i_439& (0+255),f,b
  9961  00065E  D7EF               	goto	l9716
  9962  000660                     l9724:
  9963                           
  9964                           ; BSR set to: 0
  9965  000660  0100               	movlb	0	; () banked
  9966  000662  51F8               	movf	_logstate& (0+255),w,b
  9967  000664  0100               	movlb	0	; () banked
  9968  000666  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9969  000668  B4D8               	btfsc	status,2,c
  9970  00066A  0012               	return	
  9971                           
  9972                           ; BSR set to: 0
  9973                           ;UI.c: 182: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9974                           
  9975                           ; BSR set to: 0
  9976                           
  9977                           ; BSR set to: 0
  9978  00066C  0E00               	movlw	0
  9979  00066E  0100               	movlb	0	; () banked
  9980  000670  6FCF               	movwf	UI@i_440& (0+255),b
  9981  000672                     l9730:
  9982                           
  9983                           ; BSR set to: 0
  9984  000672  0E63               	movlw	99
  9985  000674  0100               	movlb	0	; () banked
  9986  000676  65CF               	cpfsgt	UI@i_440& (0+255),b
  9987  000678  D001               	goto	l9734
  9988  00067A  D00C               	goto	l9738
  9989  00067C                     l9734:
  9990                           
  9991                           ; BSR set to: 0
  9992  00067C  0E68               	movlw	104
  9993  00067E  0100               	movlb	0	; () banked
  9994  000680  6FC4               	movwf	??_UI& (0+255),b
  9995  000682  0EE4               	movlw	228
  9996  000684                     u11107:
  9997  000684  2EE8               	decfsz	wreg,f,c
  9998  000686  D7FE               	bra	u11107
  9999  000688  2FC4               	decfsz	??_UI& (0+255),f,b
 10000  00068A  D7FC               	bra	u11107
 10001  00068C  F000               	nop	
 10002  00068E  0100               	movlb	0	; () banked
 10003  000690  2BCF               	incf	UI@i_440& (0+255),f,b
 10004  000692  D7EF               	goto	l9730
 10005  000694                     l9738:
 10006                           
 10007                           ; BSR set to: 0
 10008  000694  0100               	movlb	0	; () banked
 10009  000696  51F8               	movf	_logstate& (0+255),w,b
 10010  000698  0100               	movlb	0	; () banked
 10011  00069A  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 10012  00069C  B4D8               	btfsc	status,2,c
 10013  00069E  0012               	return	
 10014                           
 10015                           ; BSR set to: 0
 10016                           ;UI.c: 184: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
 10017                           
 10018                           ; BSR set to: 0
 10019                           
 10020                           ; BSR set to: 0
 10021  0006A0  0E01               	movlw	1
 10022  0006A2  ECAF  F02F         	call	_lcdInst
 10023  0006A6  0E68               	movlw	104
 10024  0006A8  0100               	movlb	0	; () banked
 10025  0006AA  6FC4               	movwf	??_UI& (0+255),b
 10026  0006AC  0EE4               	movlw	228
 10027  0006AE                     u11117:
 10028  0006AE  2EE8               	decfsz	wreg,f,c
 10029  0006B0  D7FE               	bra	u11117
 10030  0006B2  2FC4               	decfsz	??_UI& (0+255),f,b
 10031  0006B4  D7FC               	bra	u11117
 10032  0006B6  F000               	nop	
 10033                           
 10034                           ;UI.c: 185: lcdInst(0b10000000);;
 10035  0006B8  0E80               	movlw	128
 10036  0006BA  ECAF  F02F         	call	_lcdInst
 10037                           
 10038                           ;UI.c: 186: printf(" -- POP  CAN -- ");
 10039  0006BE  0E4B               	movlw	low STR_24
 10040  0006C0  0100               	movlb	0	; () banked
 10041  0006C2  6F8E               	movwf	printf@f& (0+255),b
 10042  0006C4  0EFD               	movlw	high STR_24
 10043  0006C6  0100               	movlb	0	; () banked
 10044  0006C8  6F8F               	movwf	(printf@f+1)& (0+255),b
 10045  0006CA  EC67  F00E         	call	_printf	;wreg free
 10046                           
 10047                           ;UI.c: 187: lcdInst(0b11000000);;
 10048  0006CE  0EC0               	movlw	192
 10049  0006D0  ECAF  F02F         	call	_lcdInst
 10050                           
 10051                           ;UI.c: 188: printf("NTAB: %d|TAB: %d", log_count_pop_no_tab, log_count_pop_w_tab);
 10052  0006D4  0E28               	movlw	low STR_25
 10053  0006D6  0100               	movlb	0	; () banked
 10054  0006D8  6F8E               	movwf	printf@f& (0+255),b
 10055  0006DA  0EFE               	movlw	high STR_25
 10056  0006DC  0100               	movlb	0	; () banked
 10057  0006DE  6F8F               	movwf	(printf@f+1)& (0+255),b
 10058  0006E0  C0F2  F090         	movff	_log_count_pop_no_tab,?_printf+2
 10059  0006E4  C0F3  F091         	movff	_log_count_pop_no_tab+1,?_printf+3
 10060  0006E8  C0F4  F092         	movff	_log_count_pop_w_tab,?_printf+4
 10061  0006EC  C0F5  F093         	movff	_log_count_pop_w_tab+1,?_printf+5
 10062  0006F0  EC67  F00E         	call	_printf	;wreg free
 10063                           
 10064                           ;UI.c: 190: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
 10065  0006F4  0E00               	movlw	0
 10066  0006F6  0100               	movlb	0	; () banked
 10067  0006F8  6FD0               	movwf	UI@i_443& (0+255),b
 10068  0006FA                     l9756:
 10069                           
 10070                           ; BSR set to: 0
 10071  0006FA  0E63               	movlw	99
 10072  0006FC  0100               	movlb	0	; () banked
 10073  0006FE  65D0               	cpfsgt	UI@i_443& (0+255),b
 10074  000700  D001               	goto	l9760
 10075  000702  D00C               	goto	l9764
 10076  000704                     l9760:
 10077                           
 10078                           ; BSR set to: 0
 10079  000704  0E68               	movlw	104
 10080  000706  0100               	movlb	0	; () banked
 10081  000708  6FC4               	movwf	??_UI& (0+255),b
 10082  00070A  0EE4               	movlw	228
 10083  00070C                     u11127:
 10084  00070C  2EE8               	decfsz	wreg,f,c
 10085  00070E  D7FE               	bra	u11127
 10086  000710  2FC4               	decfsz	??_UI& (0+255),f,b
 10087  000712  D7FC               	bra	u11127
 10088  000714  F000               	nop	
 10089  000716  0100               	movlb	0	; () banked
 10090  000718  2BD0               	incf	UI@i_443& (0+255),f,b
 10091  00071A  D7EF               	goto	l9756
 10092  00071C                     l9764:
 10093                           
 10094                           ; BSR set to: 0
 10095  00071C  0100               	movlb	0	; () banked
 10096  00071E  51F8               	movf	_logstate& (0+255),w,b
 10097  000720  0100               	movlb	0	; () banked
 10098  000722  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 10099  000724  B4D8               	btfsc	status,2,c
 10100  000726  0012               	return	
 10101                           
 10102                           ; BSR set to: 0
 10103                           ;UI.c: 191: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
 10104                           
 10105                           ; BSR set to: 0
 10106                           
 10107                           ; BSR set to: 0
 10108  000728  0E00               	movlw	0
 10109  00072A  0100               	movlb	0	; () banked
 10110  00072C  6FD1               	movwf	UI@i_444& (0+255),b
 10111  00072E                     l9770:
 10112                           
 10113                           ; BSR set to: 0
 10114  00072E  0E63               	movlw	99
 10115  000730  0100               	movlb	0	; () banked
 10116  000732  65D1               	cpfsgt	UI@i_444& (0+255),b
 10117  000734  D001               	goto	l9774
 10118  000736  D00C               	goto	l9778
 10119  000738                     l9774:
 10120                           
 10121                           ; BSR set to: 0
 10122  000738  0E68               	movlw	104
 10123  00073A  0100               	movlb	0	; () banked
 10124  00073C  6FC4               	movwf	??_UI& (0+255),b
 10125  00073E  0EE4               	movlw	228
 10126  000740                     u11137:
 10127  000740  2EE8               	decfsz	wreg,f,c
 10128  000742  D7FE               	bra	u11137
 10129  000744  2FC4               	decfsz	??_UI& (0+255),f,b
 10130  000746  D7FC               	bra	u11137
 10131  000748  F000               	nop	
 10132  00074A  0100               	movlb	0	; () banked
 10133  00074C  2BD1               	incf	UI@i_444& (0+255),f,b
 10134  00074E  D7EF               	goto	l9770
 10135  000750                     l9778:
 10136                           
 10137                           ; BSR set to: 0
 10138  000750  0100               	movlb	0	; () banked
 10139  000752  51F8               	movf	_logstate& (0+255),w,b
 10140  000754  0100               	movlb	0	; () banked
 10141  000756  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 10142  000758  B4D8               	btfsc	status,2,c
 10143  00075A  0012               	return	
 10144                           
 10145                           ; BSR set to: 0
 10146                           ;UI.c: 193: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
 10147                           
 10148                           ; BSR set to: 0
 10149                           
 10150                           ; BSR set to: 0
 10151  00075C  0E01               	movlw	1
 10152  00075E  ECAF  F02F         	call	_lcdInst
 10153  000762  0E68               	movlw	104
 10154  000764  0100               	movlb	0	; () banked
 10155  000766  6FC4               	movwf	??_UI& (0+255),b
 10156  000768  0EE4               	movlw	228
 10157  00076A                     u11147:
 10158  00076A  2EE8               	decfsz	wreg,f,c
 10159  00076C  D7FE               	bra	u11147
 10160  00076E  2FC4               	decfsz	??_UI& (0+255),f,b
 10161  000770  D7FC               	bra	u11147
 10162  000772  F000               	nop	
 10163                           
 10164                           ;UI.c: 194: lcdInst(0b10000000);;
 10165  000774  0E80               	movlw	128
 10166  000776  ECAF  F02F         	call	_lcdInst
 10167                           
 10168                           ;UI.c: 195: printf(" -- SOUP CAN -- ");
 10169  00077A  0E5C               	movlw	low STR_26
 10170  00077C  0100               	movlb	0	; () banked
 10171  00077E  6F8E               	movwf	printf@f& (0+255),b
 10172  000780  0EFD               	movlw	high STR_26
 10173  000782  0100               	movlb	0	; () banked
 10174  000784  6F8F               	movwf	(printf@f+1)& (0+255),b
 10175  000786  EC67  F00E         	call	_printf	;wreg free
 10176                           
 10177                           ;UI.c: 196: lcdInst(0b11000000);;
 10178  00078A  0EC0               	movlw	192
 10179  00078C  ECAF  F02F         	call	_lcdInst
 10180                           
 10181                           ;UI.c: 197: printf("NLAB: %d|LAB: %d", log_count_can_no_lab, log_count_can_w_lab);
 10182  000790  0E17               	movlw	low STR_27
 10183  000792  0100               	movlb	0	; () banked
 10184  000794  6F8E               	movwf	printf@f& (0+255),b
 10185  000796  0EFE               	movlw	high STR_27
 10186  000798  0100               	movlb	0	; () banked
 10187  00079A  6F8F               	movwf	(printf@f+1)& (0+255),b
 10188  00079C  C141  F090         	movff	_log_count_can_no_lab,?_printf+2
 10189  0007A0  C142  F091         	movff	_log_count_can_no_lab+1,?_printf+3
 10190  0007A4  C143  F092         	movff	_log_count_can_w_lab,?_printf+4
 10191  0007A8  C144  F093         	movff	_log_count_can_w_lab+1,?_printf+5
 10192  0007AC  EC67  F00E         	call	_printf	;wreg free
 10193                           
 10194                           ;UI.c: 199: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
 10195  0007B0  0E00               	movlw	0
 10196  0007B2  0100               	movlb	0	; () banked
 10197  0007B4  6FD2               	movwf	UI@i_447& (0+255),b
 10198  0007B6                     l9796:
 10199                           
 10200                           ; BSR set to: 0
 10201  0007B6  0E63               	movlw	99
 10202  0007B8  0100               	movlb	0	; () banked
 10203  0007BA  65D2               	cpfsgt	UI@i_447& (0+255),b
 10204  0007BC  D001               	goto	l9800
 10205  0007BE  D00C               	goto	l9804
 10206  0007C0                     l9800:
 10207                           
 10208                           ; BSR set to: 0
 10209  0007C0  0E68               	movlw	104
 10210  0007C2  0100               	movlb	0	; () banked
 10211  0007C4  6FC4               	movwf	??_UI& (0+255),b
 10212  0007C6  0EE4               	movlw	228
 10213  0007C8                     u11157:
 10214  0007C8  2EE8               	decfsz	wreg,f,c
 10215  0007CA  D7FE               	bra	u11157
 10216  0007CC  2FC4               	decfsz	??_UI& (0+255),f,b
 10217  0007CE  D7FC               	bra	u11157
 10218  0007D0  F000               	nop	
 10219  0007D2  0100               	movlb	0	; () banked
 10220  0007D4  2BD2               	incf	UI@i_447& (0+255),f,b
 10221  0007D6  D7EF               	goto	l9796
 10222  0007D8                     l9804:
 10223                           
 10224                           ; BSR set to: 0
 10225  0007D8  0100               	movlb	0	; () banked
 10226  0007DA  51F8               	movf	_logstate& (0+255),w,b
 10227  0007DC  0100               	movlb	0	; () banked
 10228  0007DE  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 10229  0007E0  B4D8               	btfsc	status,2,c
 10230  0007E2  0012               	return	
 10231                           
 10232                           ; BSR set to: 0
 10233                           ;UI.c: 200: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
 10234                           
 10235                           ; BSR set to: 0
 10236                           
 10237                           ; BSR set to: 0
 10238  0007E4  0E00               	movlw	0
 10239  0007E6  0100               	movlb	0	; () banked
 10240  0007E8  6FD3               	movwf	UI@i_448& (0+255),b
 10241  0007EA                     l9810:
 10242                           
 10243                           ; BSR set to: 0
 10244  0007EA  0E63               	movlw	99
 10245  0007EC  0100               	movlb	0	; () banked
 10246  0007EE  65D3               	cpfsgt	UI@i_448& (0+255),b
 10247  0007F0  D001               	goto	l9814
 10248  0007F2  D00C               	goto	l9818
 10249  0007F4                     l9814:
 10250                           
 10251                           ; BSR set to: 0
 10252  0007F4  0E68               	movlw	104
 10253  0007F6  0100               	movlb	0	; () banked
 10254  0007F8  6FC4               	movwf	??_UI& (0+255),b
 10255  0007FA  0EE4               	movlw	228
 10256  0007FC                     u11167:
 10257  0007FC  2EE8               	decfsz	wreg,f,c
 10258  0007FE  D7FE               	bra	u11167
 10259  000800  2FC4               	decfsz	??_UI& (0+255),f,b
 10260  000802  D7FC               	bra	u11167
 10261  000804  F000               	nop	
 10262  000806  0100               	movlb	0	; () banked
 10263  000808  2BD3               	incf	UI@i_448& (0+255),f,b
 10264  00080A  D7EF               	goto	l9810
 10265  00080C                     l9818:
 10266                           
 10267                           ; BSR set to: 0
 10268  00080C  0100               	movlb	0	; () banked
 10269  00080E  51F8               	movf	_logstate& (0+255),w,b
 10270  000810  0100               	movlb	0	; () banked
 10271  000812  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 10272  000814  B4D8               	btfsc	status,2,c
 10273  000816  0012               	return	
 10274                           
 10275                           ; BSR set to: 0
 10276                           ;UI.c: 202: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
 10277                           
 10278                           ; BSR set to: 0
 10279                           
 10280                           ; BSR set to: 0
 10281  000818  0E01               	movlw	1
 10282  00081A  ECAF  F02F         	call	_lcdInst
 10283  00081E  0E68               	movlw	104
 10284  000820  0100               	movlb	0	; () banked
 10285  000822  6FC4               	movwf	??_UI& (0+255),b
 10286  000824  0EE4               	movlw	228
 10287  000826                     u11177:
 10288  000826  2EE8               	decfsz	wreg,f,c
 10289  000828  D7FE               	bra	u11177
 10290  00082A  2FC4               	decfsz	??_UI& (0+255),f,b
 10291  00082C  D7FC               	bra	u11177
 10292  00082E  F000               	nop	
 10293                           
 10294                           ;UI.c: 203: lcdInst(0b10000000);;
 10295  000830  0E80               	movlw	128
 10296  000832  ECAF  F02F         	call	_lcdInst
 10297                           
 10298                           ;UI.c: 204: printf("-- TOTAL CANS --");
 10299  000836  0E6D               	movlw	low STR_28
 10300  000838  0100               	movlb	0	; () banked
 10301  00083A  6F8E               	movwf	printf@f& (0+255),b
 10302  00083C  0EFD               	movlw	high STR_28
 10303  00083E  0100               	movlb	0	; () banked
 10304  000840  6F8F               	movwf	(printf@f+1)& (0+255),b
 10305  000842  EC67  F00E         	call	_printf	;wreg free
 10306                           
 10307                           ;UI.c: 205: lcdInst(0b11000000);;
 10308  000846  0EC0               	movlw	192
 10309  000848  ECAF  F02F         	call	_lcdInst
 10310                           
 10311                           ;UI.c: 206: printf("%d", log_count_total);
 10312  00084C  0E25               	movlw	low (STR_27+14)
 10313  00084E  0100               	movlb	0	; () banked
 10314  000850  6F8E               	movwf	printf@f& (0+255),b
 10315  000852  0EFE               	movlw	high (STR_27+14)
 10316  000854  0100               	movlb	0	; () banked
 10317  000856  6F8F               	movwf	(printf@f+1)& (0+255),b
 10318  000858  C145  F090         	movff	_log_count_total,?_printf+2
 10319  00085C  C146  F091         	movff	_log_count_total+1,?_printf+3
 10320  000860  EC67  F00E         	call	_printf	;wreg free
 10321                           
 10322                           ;UI.c: 208: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
 10323  000864  0E00               	movlw	0
 10324  000866  0100               	movlb	0	; () banked
 10325  000868  6FD4               	movwf	UI@i_451& (0+255),b
 10326  00086A                     l9836:
 10327                           
 10328                           ; BSR set to: 0
 10329  00086A  0E63               	movlw	99
 10330  00086C  0100               	movlb	0	; () banked
 10331  00086E  65D4               	cpfsgt	UI@i_451& (0+255),b
 10332  000870  D001               	goto	l9840
 10333  000872  D00C               	goto	l9844
 10334  000874                     l9840:
 10335                           
 10336                           ; BSR set to: 0
 10337  000874  0E68               	movlw	104
 10338  000876  0100               	movlb	0	; () banked
 10339  000878  6FC4               	movwf	??_UI& (0+255),b
 10340  00087A  0EE4               	movlw	228
 10341  00087C                     u11187:
 10342  00087C  2EE8               	decfsz	wreg,f,c
 10343  00087E  D7FE               	bra	u11187
 10344  000880  2FC4               	decfsz	??_UI& (0+255),f,b
 10345  000882  D7FC               	bra	u11187
 10346  000884  F000               	nop	
 10347  000886  0100               	movlb	0	; () banked
 10348  000888  2BD4               	incf	UI@i_451& (0+255),f,b
 10349  00088A  D7EF               	goto	l9836
 10350  00088C                     l9844:
 10351                           
 10352                           ; BSR set to: 0
 10353  00088C  0100               	movlb	0	; () banked
 10354  00088E  51F8               	movf	_logstate& (0+255),w,b
 10355  000890  0100               	movlb	0	; () banked
 10356  000892  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 10357  000894  B4D8               	btfsc	status,2,c
 10358  000896  0012               	return	
 10359                           
 10360                           ; BSR set to: 0
 10361                           ;UI.c: 209: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
 10362                           
 10363                           ; BSR set to: 0
 10364                           
 10365                           ; BSR set to: 0
 10366  000898  0E00               	movlw	0
 10367  00089A  0100               	movlb	0	; () banked
 10368  00089C  6FD5               	movwf	UI@i_452& (0+255),b
 10369  00089E                     l9850:
 10370                           
 10371                           ; BSR set to: 0
 10372  00089E  0E63               	movlw	99
 10373  0008A0  0100               	movlb	0	; () banked
 10374  0008A2  65D5               	cpfsgt	UI@i_452& (0+255),b
 10375  0008A4  D001               	goto	l9854
 10376  0008A6  D00C               	goto	l9858
 10377  0008A8                     l9854:
 10378                           
 10379                           ; BSR set to: 0
 10380  0008A8  0E68               	movlw	104
 10381  0008AA  0100               	movlb	0	; () banked
 10382  0008AC  6FC4               	movwf	??_UI& (0+255),b
 10383  0008AE  0EE4               	movlw	228
 10384  0008B0                     u11197:
 10385  0008B0  2EE8               	decfsz	wreg,f,c
 10386  0008B2  D7FE               	bra	u11197
 10387  0008B4  2FC4               	decfsz	??_UI& (0+255),f,b
 10388  0008B6  D7FC               	bra	u11197
 10389  0008B8  F000               	nop	
 10390  0008BA  0100               	movlb	0	; () banked
 10391  0008BC  2BD5               	incf	UI@i_452& (0+255),f,b
 10392  0008BE  D7EF               	goto	l9850
 10393  0008C0                     l9858:
 10394                           
 10395                           ; BSR set to: 0
 10396  0008C0  0100               	movlb	0	; () banked
 10397  0008C2  51F8               	movf	_logstate& (0+255),w,b
 10398  0008C4  0100               	movlb	0	; () banked
 10399  0008C6  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 10400  0008C8  B4D8               	btfsc	status,2,c
 10401  0008CA  0012               	return	
 10402  0008CC                     l9862:
 10403  0008CC  0100               	movlb	0	; () banked
 10404  0008CE  51F8               	movf	_logstate& (0+255),w,b
 10405  0008D0  0100               	movlb	0	; () banked
 10406  0008D2  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 10407  0008D4  B4D8               	btfsc	status,2,c
 10408  0008D6  0012               	return	
 10409  0008D8  D44A               	goto	l9558
 10410  0008DA                     __end_of_UI:
 10411                           	opt stack 0
 10412                           tblptru	equ	0xFF8
 10413                           tblptrh	equ	0xFF7
 10414                           tblptrl	equ	0xFF6
 10415                           tablat	equ	0xFF5
 10416                           prodh	equ	0xFF4
 10417                           prodl	equ	0xFF3
 10418                           intcon	equ	0xFF2
 10419                           intcon2	equ	0xFF1
 10420                           intcon3	equ	0xFF0
 10421                           postinc0	equ	0xFEE
 10422                           wreg	equ	0xFE8
 10423                           postdec1	equ	0xFE5
 10424                           fsr1l	equ	0xFE1
 10425                           indf2	equ	0xFDF
 10426                           postinc2	equ	0xFDE
 10427                           postdec2	equ	0xFDD
 10428                           fsr2h	equ	0xFDA
 10429                           fsr2l	equ	0xFD9
 10430                           status	equ	0xFD8
 10431                           
 10432 ;; *************** function _printRTC *****************
 10433 ;; Defined at:
 10434 ;;		line 63 in file "RTC.c"
 10435 ;; Parameters:    Size  Location     Type
 10436 ;;		None
 10437 ;; Auto vars:     Size  Location     Type
 10438 ;;  i               2   66[BANK0 ] int 
 10439 ;;  INT_time       14   46[BANK0 ] int [7]
 10440 ;;  month           4   62[BANK0 ] unsigned char [4]
 10441 ;;  RTC_month       2   60[BANK0 ] int 
 10442 ;; Return value:  Size  Location     Type
 10443 ;;                  1    wreg      void 
 10444 ;; Registers used:
 10445 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10446 ;; Tracked objects:
 10447 ;;		On entry : 0/0
 10448 ;;		On exit  : 0/0
 10449 ;;		Unchanged: 0/0
 10450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10451 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10452 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10453 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10454 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10455 ;;Total ram usage:       25 bytes
 10456 ;; Hardware stack levels used:    1
 10457 ;; Hardware stack levels required when called:   10
 10458 ;; This function calls:
 10459 ;;		_getRTC
 10460 ;;		_lcdInst
 10461 ;;		_printf
 10462 ;;		_strcpy
 10463 ;; This function is called by:
 10464 ;;		_UI
 10465 ;;		_change_state_to_menu_start
 10466 ;; This function uses a non-reentrant model
 10467 ;;
 10468                           
 10469                           	psect	text28
 10470  003260                     __ptext28:
 10471                           	opt stack 0
 10472  003260                     _printRTC:
 10473                           	opt stack 18
 10474                           
 10475                           ;RTC.c: 64: getRTC();
 10476                           
 10477                           ; BSR set to: 0
 10478                           ;incstack = 0
 10479  003260  EC61  F028         	call	_getRTC	;wreg free
 10480                           
 10481                           ;RTC.c: 65: char month[] = "MMM";
 10482  003264  C151  F0BE         	movff	printRTC@F3240,printRTC@month
 10483  003268  C152  F0BF         	movff	printRTC@F3240+1,printRTC@month+1
 10484  00326C  C153  F0C0         	movff	printRTC@F3240+2,printRTC@month+2
 10485  003270  C154  F0C1         	movff	printRTC@F3240+3,printRTC@month+3
 10486                           
 10487                           ;RTC.c: 66: int INT_time[7];
 10488                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
 10489  003274  0E00               	movlw	0
 10490  003276  0100               	movlb	0	; () banked
 10491  003278  6FC3               	movwf	(printRTC@i+1)& (0+255),b
 10492  00327A  0E00               	movlw	0
 10493  00327C  6FC2               	movwf	printRTC@i& (0+255),b
 10494                           
 10495                           ; BSR set to: 0
 10496  00327E  0100               	movlb	0	; () banked
 10497  003280  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
 10498  003282  D008               	goto	l7310
 10499  003284  0100               	movlb	0	; () banked
 10500  003286  51C3               	movf	(printRTC@i+1)& (0+255),w,b
 10501  003288  E146               	bnz	l632
 10502  00328A  0E07               	movlw	7
 10503  00328C  0100               	movlb	0	; () banked
 10504  00328E  5DC2               	subwf	printRTC@i& (0+255),w,b
 10505  003290  B0D8               	btfsc	status,0,c
 10506  003292  D041               	goto	l632
 10507  003294                     l7310:
 10508                           
 10509                           ; BSR set to: 0
 10510                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 10511  003294  0E1C               	movlw	low _time
 10512  003296  0100               	movlb	0	; () banked
 10513  003298  25C2               	addwf	printRTC@i& (0+255),w,b
 10514  00329A  6ED9               	movwf	fsr2l,c
 10515  00329C  0E01               	movlw	high _time
 10516  00329E  0100               	movlb	0	; () banked
 10517  0032A0  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
 10518  0032A2  6EDA               	movwf	fsr2h,c
 10519  0032A4  50DF               	movf	indf2,w,c
 10520  0032A6  0100               	movlb	0	; () banked
 10521  0032A8  6FAB               	movwf	??_printRTC& (0+255),b
 10522  0032AA  0100               	movlb	0	; () banked
 10523  0032AC  3BAB               	swapf	??_printRTC& (0+255),f,b
 10524  0032AE  0E0F               	movlw	15
 10525  0032B0  17AB               	andwf	??_printRTC& (0+255),f,b
 10526  0032B2  0E0F               	movlw	15
 10527  0032B4  0100               	movlb	0	; () banked
 10528  0032B6  17AB               	andwf	??_printRTC& (0+255),f,b
 10529  0032B8  0100               	movlb	0	; () banked
 10530  0032BA  51AB               	movf	??_printRTC& (0+255),w,b
 10531  0032BC  0D0A               	mullw	10
 10532  0032BE  0E1C               	movlw	low _time
 10533  0032C0  0100               	movlb	0	; () banked
 10534  0032C2  25C2               	addwf	printRTC@i& (0+255),w,b
 10535  0032C4  6ED9               	movwf	fsr2l,c
 10536  0032C6  0E01               	movlw	high _time
 10537  0032C8  0100               	movlb	0	; () banked
 10538  0032CA  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
 10539  0032CC  6EDA               	movwf	fsr2h,c
 10540  0032CE  50DF               	movf	indf2,w,c
 10541  0032D0  0B0F               	andlw	15
 10542  0032D2  0100               	movlb	0	; () banked
 10543  0032D4  6FAC               	movwf	(??_printRTC+1)& (0+255),b
 10544  0032D6  6BAD               	clrf	(??_printRTC+2)& (0+255),b
 10545  0032D8  50F3               	movf	prodl,w,c
 10546  0032DA  0100               	movlb	0	; () banked
 10547  0032DC  27AC               	addwf	(??_printRTC+1)& (0+255),f,b
 10548  0032DE  50F4               	movf	prodh,w,c
 10549  0032E0  0100               	movlb	0	; () banked
 10550  0032E2  23AD               	addwfc	(??_printRTC+2)& (0+255),f,b
 10551  0032E4  90D8               	bcf	status,0,c
 10552  0032E6  0100               	movlb	0	; () banked
 10553  0032E8  35C2               	rlcf	printRTC@i& (0+255),w,b
 10554  0032EA  6ED9               	movwf	fsr2l,c
 10555  0032EC  0100               	movlb	0	; () banked
 10556  0032EE  35C3               	rlcf	(printRTC@i+1)& (0+255),w,b
 10557  0032F0  6EDA               	movwf	fsr2h,c
 10558  0032F2  0EAE               	movlw	low printRTC@INT_time
 10559  0032F4  26D9               	addwf	fsr2l,f,c
 10560  0032F6  0E00               	movlw	high printRTC@INT_time
 10561  0032F8  22DA               	addwfc	fsr2h,f,c
 10562  0032FA  C0AC  FFDE         	movff	??_printRTC+1,postinc2
 10563  0032FE  C0AD  FFDD         	movff	??_printRTC+2,postdec2
 10564                           
 10565                           ; BSR set to: 0
 10566  003302  0100               	movlb	0	; () banked
 10567  003304  4BC2               	infsnz	printRTC@i& (0+255),f,b
 10568  003306  2BC3               	incf	(printRTC@i+1)& (0+255),f,b
 10569                           
 10570                           ; BSR set to: 0
 10571  003308  0100               	movlb	0	; () banked
 10572  00330A  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
 10573  00330C  D7C3               	goto	l7310
 10574  00330E  0100               	movlb	0	; () banked
 10575  003310  51C3               	movf	(printRTC@i+1)& (0+255),w,b
 10576  003312  E101               	bnz	u6360
 10577  003314  D7BA               	goto	L10
 10578  003316                     u6360:
 10579  003316                     l632:
 10580                           
 10581                           ; BSR set to: 0
 10582                           ;RTC.c: 69: }
 10583                           ;RTC.c: 70: int RTC_month = INT_time[5];
 10584  003316  C0B8  F0BC         	movff	printRTC@INT_time+10,printRTC@RTC_month
 10585  00331A  C0B9  F0BD         	movff	printRTC@INT_time+11,printRTC@RTC_month+1
 10586                           
 10587                           ;RTC.c: 72: switch(RTC_month){
 10588  00331E  D0B4               	goto	l7342
 10589  003320                     l7316:
 10590                           
 10591                           ; BSR set to: 0
 10592                           ;RTC.c: 74: strcpy(month, "JAN");
 10593  003320  0EBE               	movlw	low printRTC@month
 10594  003322  0100               	movlb	0	; () banked
 10595  003324  6F80               	movwf	strcpy@to& (0+255),b
 10596  003326  0E00               	movlw	high printRTC@month
 10597  003328  0100               	movlb	0	; () banked
 10598  00332A  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10599  00332C  0EDA               	movlw	low STR_8
 10600  00332E  0100               	movlb	0	; () banked
 10601  003330  6F82               	movwf	strcpy@from& (0+255),b
 10602  003332  0EFF               	movlw	high STR_8
 10603  003334  0100               	movlb	0	; () banked
 10604  003336  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10605  003338  ECFE  F02C         	call	_strcpy	;wreg free
 10606                           
 10607                           ;RTC.c: 75: break;
 10608  00333C  D0D4               	goto	l7344
 10609  00333E                     l7318:
 10610                           
 10611                           ;RTC.c: 77: strcpy(month, "FEB");
 10612  00333E  0EBE               	movlw	low printRTC@month
 10613  003340  0100               	movlb	0	; () banked
 10614  003342  6F80               	movwf	strcpy@to& (0+255),b
 10615  003344  0E00               	movlw	high printRTC@month
 10616  003346  0100               	movlb	0	; () banked
 10617  003348  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10618  00334A  0ECA               	movlw	low STR_9
 10619  00334C  0100               	movlb	0	; () banked
 10620  00334E  6F82               	movwf	strcpy@from& (0+255),b
 10621  003350  0EFF               	movlw	high STR_9
 10622  003352  0100               	movlb	0	; () banked
 10623  003354  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10624  003356  ECFE  F02C         	call	_strcpy	;wreg free
 10625                           
 10626                           ;RTC.c: 78: break;
 10627  00335A  D0C5               	goto	l7344
 10628  00335C                     l7320:
 10629                           
 10630                           ;RTC.c: 80: strcpy(month, "MAR");
 10631  00335C  0EBE               	movlw	low printRTC@month
 10632  00335E  0100               	movlb	0	; () banked
 10633  003360  6F80               	movwf	strcpy@to& (0+255),b
 10634  003362  0E00               	movlw	high printRTC@month
 10635  003364  0100               	movlb	0	; () banked
 10636  003366  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10637  003368  0EE6               	movlw	low STR_10
 10638  00336A  0100               	movlb	0	; () banked
 10639  00336C  6F82               	movwf	strcpy@from& (0+255),b
 10640  00336E  0EFF               	movlw	high STR_10
 10641  003370  0100               	movlb	0	; () banked
 10642  003372  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10643  003374  ECFE  F02C         	call	_strcpy	;wreg free
 10644                           
 10645                           ;RTC.c: 81: break;
 10646  003378  D0B6               	goto	l7344
 10647  00337A                     l7322:
 10648                           
 10649                           ;RTC.c: 83: strcpy(month, "APR");
 10650  00337A  0EBE               	movlw	low printRTC@month
 10651  00337C  0100               	movlb	0	; () banked
 10652  00337E  6F80               	movwf	strcpy@to& (0+255),b
 10653  003380  0E00               	movlw	high printRTC@month
 10654  003382  0100               	movlb	0	; () banked
 10655  003384  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10656  003386  0EEA               	movlw	low STR_11
 10657  003388  0100               	movlb	0	; () banked
 10658  00338A  6F82               	movwf	strcpy@from& (0+255),b
 10659  00338C  0EFF               	movlw	high STR_11
 10660  00338E  0100               	movlb	0	; () banked
 10661  003390  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10662  003392  ECFE  F02C         	call	_strcpy	;wreg free
 10663                           
 10664                           ;RTC.c: 84: break;
 10665  003396  D0A7               	goto	l7344
 10666  003398                     l7324:
 10667                           
 10668                           ;RTC.c: 86: strcpy(month, "MAY");
 10669  003398  0EBE               	movlw	low printRTC@month
 10670  00339A  0100               	movlb	0	; () banked
 10671  00339C  6F80               	movwf	strcpy@to& (0+255),b
 10672  00339E  0E00               	movlw	high printRTC@month
 10673  0033A0  0100               	movlb	0	; () banked
 10674  0033A2  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10675  0033A4  0EFA               	movlw	low STR_12
 10676  0033A6  0100               	movlb	0	; () banked
 10677  0033A8  6F82               	movwf	strcpy@from& (0+255),b
 10678  0033AA  0EFF               	movlw	high STR_12
 10679  0033AC  0100               	movlb	0	; () banked
 10680  0033AE  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10681  0033B0  ECFE  F02C         	call	_strcpy	;wreg free
 10682                           
 10683                           ;RTC.c: 87: break;
 10684  0033B4  D098               	goto	l7344
 10685  0033B6                     l7326:
 10686                           
 10687                           ;RTC.c: 89: strcpy(month, "JUN");
 10688  0033B6  0EBE               	movlw	low printRTC@month
 10689  0033B8  0100               	movlb	0	; () banked
 10690  0033BA  6F80               	movwf	strcpy@to& (0+255),b
 10691  0033BC  0E00               	movlw	high printRTC@month
 10692  0033BE  0100               	movlb	0	; () banked
 10693  0033C0  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10694  0033C2  0EDE               	movlw	low STR_13
 10695  0033C4  0100               	movlb	0	; () banked
 10696  0033C6  6F82               	movwf	strcpy@from& (0+255),b
 10697  0033C8  0EFF               	movlw	high STR_13
 10698  0033CA  0100               	movlb	0	; () banked
 10699  0033CC  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10700  0033CE  ECFE  F02C         	call	_strcpy	;wreg free
 10701                           
 10702                           ;RTC.c: 90: break;
 10703  0033D2  D089               	goto	l7344
 10704  0033D4                     l7328:
 10705                           
 10706                           ;RTC.c: 92: strcpy(month, "JUL");
 10707  0033D4  0EBE               	movlw	low printRTC@month
 10708  0033D6  0100               	movlb	0	; () banked
 10709  0033D8  6F80               	movwf	strcpy@to& (0+255),b
 10710  0033DA  0E00               	movlw	high printRTC@month
 10711  0033DC  0100               	movlb	0	; () banked
 10712  0033DE  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10713  0033E0  0ED6               	movlw	low STR_14
 10714  0033E2  0100               	movlb	0	; () banked
 10715  0033E4  6F82               	movwf	strcpy@from& (0+255),b
 10716  0033E6  0EFF               	movlw	high STR_14
 10717  0033E8  0100               	movlb	0	; () banked
 10718  0033EA  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10719  0033EC  ECFE  F02C         	call	_strcpy	;wreg free
 10720                           
 10721                           ;RTC.c: 93: break;
 10722  0033F0  D07A               	goto	l7344
 10723  0033F2                     l7330:
 10724                           
 10725                           ;RTC.c: 95: strcpy(month, "AUG");
 10726  0033F2  0EBE               	movlw	low printRTC@month
 10727  0033F4  0100               	movlb	0	; () banked
 10728  0033F6  6F80               	movwf	strcpy@to& (0+255),b
 10729  0033F8  0E00               	movlw	high printRTC@month
 10730  0033FA  0100               	movlb	0	; () banked
 10731  0033FC  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10732  0033FE  0ED2               	movlw	low STR_15
 10733  003400  0100               	movlb	0	; () banked
 10734  003402  6F82               	movwf	strcpy@from& (0+255),b
 10735  003404  0EFF               	movlw	high STR_15
 10736  003406  0100               	movlb	0	; () banked
 10737  003408  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10738  00340A  ECFE  F02C         	call	_strcpy	;wreg free
 10739                           
 10740                           ;RTC.c: 96: break;
 10741  00340E  D06B               	goto	l7344
 10742  003410                     l7332:
 10743                           
 10744                           ;RTC.c: 98: strcpy(month, "SEP");
 10745  003410  0EBE               	movlw	low printRTC@month
 10746  003412  0100               	movlb	0	; () banked
 10747  003414  6F80               	movwf	strcpy@to& (0+255),b
 10748  003416  0E00               	movlw	high printRTC@month
 10749  003418  0100               	movlb	0	; () banked
 10750  00341A  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10751  00341C  0EE2               	movlw	low STR_16
 10752  00341E  0100               	movlb	0	; () banked
 10753  003420  6F82               	movwf	strcpy@from& (0+255),b
 10754  003422  0EFF               	movlw	high STR_16
 10755  003424  0100               	movlb	0	; () banked
 10756  003426  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10757  003428  ECFE  F02C         	call	_strcpy	;wreg free
 10758                           
 10759                           ;RTC.c: 99: break;
 10760  00342C  D05C               	goto	l7344
 10761  00342E                     l7334:
 10762                           
 10763                           ;RTC.c: 101: strcpy(month, "OCT");
 10764  00342E  0EBE               	movlw	low printRTC@month
 10765  003430  0100               	movlb	0	; () banked
 10766  003432  6F80               	movwf	strcpy@to& (0+255),b
 10767  003434  0E00               	movlw	high printRTC@month
 10768  003436  0100               	movlb	0	; () banked
 10769  003438  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10770  00343A  0EF2               	movlw	low STR_17
 10771  00343C  0100               	movlb	0	; () banked
 10772  00343E  6F82               	movwf	strcpy@from& (0+255),b
 10773  003440  0EFF               	movlw	high STR_17
 10774  003442  0100               	movlb	0	; () banked
 10775  003444  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10776  003446  ECFE  F02C         	call	_strcpy	;wreg free
 10777                           
 10778                           ;RTC.c: 102: break;
 10779  00344A  D04D               	goto	l7344
 10780  00344C                     l7336:
 10781                           
 10782                           ;RTC.c: 104: strcpy(month, "NOV");
 10783  00344C  0EBE               	movlw	low printRTC@month
 10784  00344E  0100               	movlb	0	; () banked
 10785  003450  6F80               	movwf	strcpy@to& (0+255),b
 10786  003452  0E00               	movlw	high printRTC@month
 10787  003454  0100               	movlb	0	; () banked
 10788  003456  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10789  003458  0EF6               	movlw	low STR_18
 10790  00345A  0100               	movlb	0	; () banked
 10791  00345C  6F82               	movwf	strcpy@from& (0+255),b
 10792  00345E  0EFF               	movlw	high STR_18
 10793  003460  0100               	movlb	0	; () banked
 10794  003462  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10795  003464  ECFE  F02C         	call	_strcpy	;wreg free
 10796                           
 10797                           ;RTC.c: 105: break;
 10798  003468  D03E               	goto	l7344
 10799  00346A                     l7338:
 10800                           
 10801                           ;RTC.c: 107: strcpy(month, "DEC");
 10802  00346A  0EBE               	movlw	low printRTC@month
 10803  00346C  0100               	movlb	0	; () banked
 10804  00346E  6F80               	movwf	strcpy@to& (0+255),b
 10805  003470  0E00               	movlw	high printRTC@month
 10806  003472  0100               	movlb	0	; () banked
 10807  003474  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10808  003476  0ECE               	movlw	low STR_19
 10809  003478  0100               	movlb	0	; () banked
 10810  00347A  6F82               	movwf	strcpy@from& (0+255),b
 10811  00347C  0EFF               	movlw	high STR_19
 10812  00347E  0100               	movlb	0	; () banked
 10813  003480  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10814  003482  ECFE  F02C         	call	_strcpy	;wreg free
 10815                           
 10816                           ;RTC.c: 109: }
 10817                           
 10818                           ;RTC.c: 108: break;
 10819  003486  D02F               	goto	l7344
 10820  003488                     l7342:
 10821  003488  C0BC  F0AB         	movff	printRTC@RTC_month,??_printRTC
 10822  00348C  C0BD  F0AC         	movff	printRTC@RTC_month+1,??_printRTC+1
 10823                           
 10824                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10825                           ; Switch size 1, requested type "space"
 10826                           ; Number of cases is 1, Range of values is 0 to 0
 10827                           ; switch strategies available:
 10828                           ; Name         Instructions Cycles
 10829                           ; simple_byte            4     3 (average)
 10830                           ;	Chosen strategy is simple_byte
 10831  003490  0100               	movlb	0	; () banked
 10832  003492  51AC               	movf	(??_printRTC+1)& (0+255),w,b
 10833  003494  0A00               	xorlw	0	; case 0
 10834  003496  A4D8               	btfss	status,2,c
 10835  003498  D026               	goto	l7344
 10836                           
 10837                           ; BSR set to: 0
 10838                           ; Switch size 1, requested type "space"
 10839                           ; Number of cases is 12, Range of values is 1 to 12
 10840                           ; switch strategies available:
 10841                           ; Name         Instructions Cycles
 10842                           ; simple_byte           37    19 (average)
 10843                           ;	Chosen strategy is simple_byte
 10844  00349A  0100               	movlb	0	; () banked
 10845  00349C  51AB               	movf	??_printRTC& (0+255),w,b
 10846  00349E  0A01               	xorlw	1	; case 1
 10847  0034A0  B4D8               	btfsc	status,2,c
 10848  0034A2  D73E               	goto	l7316
 10849  0034A4  0A03               	xorlw	3	; case 2
 10850  0034A6  B4D8               	btfsc	status,2,c
 10851  0034A8  D74A               	goto	l7318
 10852  0034AA  0A01               	xorlw	1	; case 3
 10853  0034AC  B4D8               	btfsc	status,2,c
 10854  0034AE  D756               	goto	l7320
 10855  0034B0  0A07               	xorlw	7	; case 4
 10856  0034B2  B4D8               	btfsc	status,2,c
 10857  0034B4  D762               	goto	l7322
 10858  0034B6  0A01               	xorlw	1	; case 5
 10859  0034B8  B4D8               	btfsc	status,2,c
 10860  0034BA  D76E               	goto	l7324
 10861  0034BC  0A03               	xorlw	3	; case 6
 10862  0034BE  B4D8               	btfsc	status,2,c
 10863  0034C0  D77A               	goto	l7326
 10864  0034C2  0A01               	xorlw	1	; case 7
 10865  0034C4  B4D8               	btfsc	status,2,c
 10866  0034C6  D786               	goto	l7328
 10867  0034C8  0A0F               	xorlw	15	; case 8
 10868  0034CA  B4D8               	btfsc	status,2,c
 10869  0034CC  D792               	goto	l7330
 10870  0034CE  0A01               	xorlw	1	; case 9
 10871  0034D0  B4D8               	btfsc	status,2,c
 10872  0034D2  D79E               	goto	l7332
 10873  0034D4  0A03               	xorlw	3	; case 10
 10874  0034D6  B4D8               	btfsc	status,2,c
 10875  0034D8  D7AA               	goto	l7334
 10876  0034DA  0A01               	xorlw	1	; case 11
 10877  0034DC  B4D8               	btfsc	status,2,c
 10878  0034DE  D7B6               	goto	l7336
 10879  0034E0  0A07               	xorlw	7	; case 12
 10880  0034E2  B4D8               	btfsc	status,2,c
 10881  0034E4  D7C2               	goto	l7338
 10882  0034E6                     l7344:
 10883                           
 10884                           ;RTC.c: 110: lcdInst(0b10000000);;
 10885  0034E6  0E80               	movlw	128
 10886  0034E8  ECAF  F02F         	call	_lcdInst
 10887                           
 10888                           ;RTC.c: 111: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 10889  0034EC  0EC2               	movlw	low STR_21
 10890  0034EE  0100               	movlb	0	; () banked
 10891  0034F0  6F8E               	movwf	printf@f& (0+255),b
 10892  0034F2  0EFA               	movlw	high STR_21
 10893  0034F4  0100               	movlb	0	; () banked
 10894  0034F6  6F8F               	movwf	(printf@f+1)& (0+255),b
 10895  0034F8  C0B6  F090         	movff	printRTC@INT_time+8,?_printf+2
 10896  0034FC  C0B7  F091         	movff	printRTC@INT_time+9,?_printf+3
 10897  003500  0EBE               	movlw	low printRTC@month
 10898  003502  0100               	movlb	0	; () banked
 10899  003504  6F92               	movwf	(?_printf+4)& (0+255),b
 10900  003506  0E00               	movlw	high printRTC@month
 10901  003508  0100               	movlb	0	; () banked
 10902  00350A  6F93               	movwf	(?_printf+5)& (0+255),b
 10903  00350C  C0B2  F094         	movff	printRTC@INT_time+4,?_printf+6
 10904  003510  C0B3  F095         	movff	printRTC@INT_time+5,?_printf+7
 10905  003514  C0B0  F096         	movff	printRTC@INT_time+2,?_printf+8
 10906  003518  C0B1  F097         	movff	printRTC@INT_time+3,?_printf+9
 10907  00351C  C0AE  F098         	movff	printRTC@INT_time,?_printf+10
 10908  003520  C0AF  F099         	movff	printRTC@INT_time+1,?_printf+11
 10909  003524  EC67  F00E         	call	_printf	;wreg free
 10910  003528  0012               	return		;funcret
 10911  00352A                     __end_of_printRTC:
 10912                           	opt stack 0
 10913                           tblptru	equ	0xFF8
 10914                           tblptrh	equ	0xFF7
 10915                           tblptrl	equ	0xFF6
 10916                           tablat	equ	0xFF5
 10917                           prodh	equ	0xFF4
 10918                           prodl	equ	0xFF3
 10919                           intcon	equ	0xFF2
 10920                           intcon2	equ	0xFF1
 10921                           intcon3	equ	0xFF0
 10922                           postinc0	equ	0xFEE
 10923                           wreg	equ	0xFE8
 10924                           postdec1	equ	0xFE5
 10925                           fsr1l	equ	0xFE1
 10926                           indf2	equ	0xFDF
 10927                           postinc2	equ	0xFDE
 10928                           postdec2	equ	0xFDD
 10929                           fsr2h	equ	0xFDA
 10930                           fsr2l	equ	0xFD9
 10931                           status	equ	0xFD8
 10932                           
 10933 ;; *************** function _strcpy *****************
 10934 ;; Defined at:
 10935 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 10936 ;; Parameters:    Size  Location     Type
 10937 ;;  to              2    0[BANK0 ] PTR unsigned char 
 10938 ;;		 -> printRTC@month(4), UI@month(4), 
 10939 ;;  from            2    2[BANK0 ] PTR const unsigned char 
 10940 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
 10941 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
 10942 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
 10943 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
 10944 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
 10945 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
 10946 ;;		 -> STR_8(4), 
 10947 ;; Auto vars:     Size  Location     Type
 10948 ;;  cp              2    4[BANK0 ] PTR unsigned char 
 10949 ;;		 -> printRTC@month(4), UI@month(4), 
 10950 ;; Return value:  Size  Location     Type
 10951 ;;                  2    0[BANK0 ] PTR unsigned char 
 10952 ;; Registers used:
 10953 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 10954 ;; Tracked objects:
 10955 ;;		On entry : 0/0
 10956 ;;		On exit  : 0/0
 10957 ;;		Unchanged: 0/0
 10958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10959 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10960 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10961 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10962 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10963 ;;Total ram usage:        6 bytes
 10964 ;; Hardware stack levels used:    1
 10965 ;; Hardware stack levels required when called:    7
 10966 ;; This function calls:
 10967 ;;		Nothing
 10968 ;; This function is called by:
 10969 ;;		_UI
 10970 ;;		_printRTC
 10971 ;; This function uses a non-reentrant model
 10972 ;;
 10973                           
 10974                           	psect	text29
 10975  0059FC                     __ptext29:
 10976                           	opt stack 0
 10977  0059FC                     _strcpy:
 10978                           	opt stack 20
 10979                           
 10980                           ;incstack = 0
 10981  0059FC  C080  F084         	movff	strcpy@to,strcpy@cp
 10982  005A00  C081  F085         	movff	strcpy@to+1,strcpy@cp+1
 10983  005A04  D006               	goto	l7008
 10984  005A06                     l7006:
 10985  005A06  0100               	movlb	0	; () banked
 10986  005A08  4B84               	infsnz	strcpy@cp& (0+255),f,b
 10987  005A0A  2B85               	incf	(strcpy@cp+1)& (0+255),f,b
 10988  005A0C  0100               	movlb	0	; () banked
 10989  005A0E  4B82               	infsnz	strcpy@from& (0+255),f,b
 10990  005A10  2B83               	incf	(strcpy@from+1)& (0+255),f,b
 10991  005A12                     l7008:
 10992  005A12  C082  FFF6         	movff	strcpy@from,tblptrl
 10993  005A16  C083  FFF7         	movff	strcpy@from+1,tblptrh
 10994  005A1A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 10995  005A1A  6AF8               	clrf	tblptru,c
 10996  005A1C                     	endif
 10997  005A1C                     	if	0	;tblptru may be non-zero
 10998  005A1C                     	endif
 10999  005A1C  C084  FFD9         	movff	strcpy@cp,fsr2l
 11000  005A20  C085  FFDA         	movff	strcpy@cp+1,fsr2h
 11001  005A24  0008               	tblrd		*
 11002  005A26  CFF5 FFDF          	movff	tablat,indf2
 11003  005A2A  50DF               	movf	indf2,w,c
 11004  005A2C  B4D8               	btfsc	status,2,c
 11005  005A2E  0012               	return	
 11006  005A30  D7EA               	goto	l7006
 11007  005A32                     __end_of_strcpy:
 11008                           	opt stack 0
 11009                           tblptru	equ	0xFF8
 11010                           tblptrh	equ	0xFF7
 11011                           tblptrl	equ	0xFF6
 11012                           tablat	equ	0xFF5
 11013                           prodh	equ	0xFF4
 11014                           prodl	equ	0xFF3
 11015                           intcon	equ	0xFF2
 11016                           intcon2	equ	0xFF1
 11017                           intcon3	equ	0xFF0
 11018                           postinc0	equ	0xFEE
 11019                           wreg	equ	0xFE8
 11020                           postdec1	equ	0xFE5
 11021                           fsr1l	equ	0xFE1
 11022                           indf2	equ	0xFDF
 11023                           postinc2	equ	0xFDE
 11024                           postdec2	equ	0xFDD
 11025                           fsr2h	equ	0xFDA
 11026                           fsr2l	equ	0xFD9
 11027                           status	equ	0xFD8
 11028                           
 11029 ;; *************** function _getRTC *****************
 11030 ;; Defined at:
 11031 ;;		line 44 in file "RTC.c"
 11032 ;; Parameters:    Size  Location     Type
 11033 ;;		None
 11034 ;; Auto vars:     Size  Location     Type
 11035 ;;  i               2    3[BANK0 ] int 
 11036 ;; Return value:  Size  Location     Type
 11037 ;;                  1    wreg      void 
 11038 ;; Registers used:
 11039 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11040 ;; Tracked objects:
 11041 ;;		On entry : 0/0
 11042 ;;		On exit  : 0/0
 11043 ;;		Unchanged: 0/0
 11044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11045 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11046 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11047 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11048 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11049 ;;Total ram usage:        2 bytes
 11050 ;; Hardware stack levels used:    1
 11051 ;; Hardware stack levels required when called:    9
 11052 ;; This function calls:
 11053 ;;		_I2C_Master_Read
 11054 ;;		_I2C_Master_Start
 11055 ;;		_I2C_Master_Stop
 11056 ;;		_I2C_Master_Write
 11057 ;; This function is called by:
 11058 ;;		_printRTC
 11059 ;;		_initSortTimer
 11060 ;; This function uses a non-reentrant model
 11061 ;;
 11062                           
 11063                           	psect	text30
 11064  0050C2                     __ptext30:
 11065                           	opt stack 0
 11066  0050C2                     _getRTC:
 11067                           	opt stack 18
 11068                           
 11069                           ;RTC.c: 48: I2C_Master_Start();
 11070                           
 11071                           ;incstack = 0
 11072  0050C2  ECD5  F02F         	call	_I2C_Master_Start	;wreg free
 11073                           
 11074                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
 11075  0050C6  0E00               	movlw	0
 11076  0050C8  0100               	movlb	0	; () banked
 11077  0050CA  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
 11078  0050CC  0ED0               	movlw	208
 11079  0050CE  6F81               	movwf	I2C_Master_Write@d& (0+255),b
 11080  0050D0  ECC3  F02F         	call	_I2C_Master_Write	;wreg free
 11081                           
 11082                           ;RTC.c: 50: I2C_Master_Write(0x00);
 11083  0050D4  0E00               	movlw	0
 11084  0050D6  0100               	movlb	0	; () banked
 11085  0050D8  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
 11086  0050DA  0E00               	movlw	0
 11087  0050DC  6F81               	movwf	I2C_Master_Write@d& (0+255),b
 11088  0050DE  ECC3  F02F         	call	_I2C_Master_Write	;wreg free
 11089                           
 11090                           ;RTC.c: 51: I2C_Master_Stop();
 11091  0050E2  ECD1  F02F         	call	_I2C_Master_Stop	;wreg free
 11092                           
 11093                           ;RTC.c: 54: I2C_Master_Start();
 11094  0050E6  ECD5  F02F         	call	_I2C_Master_Start	;wreg free
 11095                           
 11096                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
 11097  0050EA  0E00               	movlw	0
 11098  0050EC  0100               	movlb	0	; () banked
 11099  0050EE  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
 11100  0050F0  0ED1               	movlw	209
 11101  0050F2  6F81               	movwf	I2C_Master_Write@d& (0+255),b
 11102  0050F4  ECC3  F02F         	call	_I2C_Master_Write	;wreg free
 11103                           
 11104                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
 11105  0050F8  0E00               	movlw	0
 11106  0050FA  0100               	movlb	0	; () banked
 11107  0050FC  6F84               	movwf	(getRTC@i+1)& (0+255),b
 11108  0050FE  0E00               	movlw	0
 11109  005100  6F83               	movwf	getRTC@i& (0+255),b
 11110  005102                     l7014:
 11111                           
 11112                           ; BSR set to: 0
 11113  005102  0100               	movlb	0	; () banked
 11114  005104  BF84               	btfsc	(getRTC@i+1)& (0+255),7,b
 11115  005106  D008               	goto	l7018
 11116  005108  0100               	movlb	0	; () banked
 11117  00510A  5184               	movf	(getRTC@i+1)& (0+255),w,b
 11118  00510C  E115               	bnz	l7024
 11119  00510E  0E06               	movlw	6
 11120  005110  0100               	movlb	0	; () banked
 11121  005112  5D83               	subwf	getRTC@i& (0+255),w,b
 11122  005114  B0D8               	btfsc	status,0,c
 11123  005116  D010               	goto	l7024
 11124  005118                     l7018:
 11125                           
 11126                           ; BSR set to: 0
 11127                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
 11128  005118  0E1C               	movlw	low _time
 11129  00511A  0100               	movlb	0	; () banked
 11130  00511C  2583               	addwf	getRTC@i& (0+255),w,b
 11131  00511E  6ED9               	movwf	fsr2l,c
 11132  005120  0E01               	movlw	high _time
 11133  005122  0100               	movlb	0	; () banked
 11134  005124  2184               	addwfc	(getRTC@i+1)& (0+255),w,b
 11135  005126  6EDA               	movwf	fsr2h,c
 11136  005128  0E01               	movlw	1
 11137  00512A  EC56  F02E         	call	_I2C_Master_Read
 11138  00512E  6EDF               	movwf	indf2,c
 11139  005130  0100               	movlb	0	; () banked
 11140  005132  4B83               	infsnz	getRTC@i& (0+255),f,b
 11141  005134  2B84               	incf	(getRTC@i+1)& (0+255),f,b
 11142  005136  D7E5               	goto	l7014
 11143  005138                     l7024:
 11144                           
 11145                           ; BSR set to: 0
 11146                           ;RTC.c: 58: }
 11147                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
 11148  005138  0E00               	movlw	0
 11149  00513A  EC56  F02E         	call	_I2C_Master_Read
 11150  00513E  0101               	movlb	1	; () banked
 11151  005140  6F22               	movwf	(_time+6)& (0+255),b
 11152                           
 11153                           ;RTC.c: 60: I2C_Master_Stop();
 11154  005142  ECD1  F02F         	call	_I2C_Master_Stop	;wreg free
 11155  005146  0012               	return		;funcret
 11156  005148                     __end_of_getRTC:
 11157                           	opt stack 0
 11158                           tblptru	equ	0xFF8
 11159                           tblptrh	equ	0xFF7
 11160                           tblptrl	equ	0xFF6
 11161                           tablat	equ	0xFF5
 11162                           prodh	equ	0xFF4
 11163                           prodl	equ	0xFF3
 11164                           intcon	equ	0xFF2
 11165                           intcon2	equ	0xFF1
 11166                           intcon3	equ	0xFF0
 11167                           postinc0	equ	0xFEE
 11168                           wreg	equ	0xFE8
 11169                           postdec1	equ	0xFE5
 11170                           fsr1l	equ	0xFE1
 11171                           indf2	equ	0xFDF
 11172                           postinc2	equ	0xFDE
 11173                           postdec2	equ	0xFDD
 11174                           fsr2h	equ	0xFDA
 11175                           fsr2l	equ	0xFD9
 11176                           status	equ	0xFD8
 11177                           
 11178 ;; *************** function _I2C_Master_Write *****************
 11179 ;; Defined at:
 11180 ;;		line 49 in file "I2C.c"
 11181 ;; Parameters:    Size  Location     Type
 11182 ;;  d               2    1[BANK0 ] unsigned int 
 11183 ;; Auto vars:     Size  Location     Type
 11184 ;;		None
 11185 ;; Return value:  Size  Location     Type
 11186 ;;                  1    wreg      void 
 11187 ;; Registers used:
 11188 ;;		wreg, status,2, status,0, cstack
 11189 ;; Tracked objects:
 11190 ;;		On entry : 0/0
 11191 ;;		On exit  : 0/0
 11192 ;;		Unchanged: 0/0
 11193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11194 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11195 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11196 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11197 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11198 ;;Total ram usage:        2 bytes
 11199 ;; Hardware stack levels used:    1
 11200 ;; Hardware stack levels required when called:    8
 11201 ;; This function calls:
 11202 ;;		_I2C_Master_Wait
 11203 ;; This function is called by:
 11204 ;;		_loadRTC
 11205 ;;		_getRTC
 11206 ;; This function uses a non-reentrant model
 11207 ;;
 11208                           
 11209                           	psect	text31
 11210  005F86                     __ptext31:
 11211                           	opt stack 0
 11212  005F86                     _I2C_Master_Write:
 11213                           	opt stack 18
 11214                           
 11215                           ;I2C.c: 51: I2C_Master_Wait();
 11216                           
 11217                           ;incstack = 0
 11218  005F86  EC94  F02F         	call	_I2C_Master_Wait	;wreg free
 11219                           
 11220                           ;I2C.c: 52: SSPBUF = d;
 11221  005F8A  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
 11222  005F8E  0012               	return		;funcret
 11223  005F90                     __end_of_I2C_Master_Write:
 11224                           	opt stack 0
 11225                           tblptru	equ	0xFF8
 11226                           tblptrh	equ	0xFF7
 11227                           tblptrl	equ	0xFF6
 11228                           tablat	equ	0xFF5
 11229                           prodh	equ	0xFF4
 11230                           prodl	equ	0xFF3
 11231                           intcon	equ	0xFF2
 11232                           intcon2	equ	0xFF1
 11233                           intcon3	equ	0xFF0
 11234                           postinc0	equ	0xFEE
 11235                           wreg	equ	0xFE8
 11236                           postdec1	equ	0xFE5
 11237                           fsr1l	equ	0xFE1
 11238                           indf2	equ	0xFDF
 11239                           postinc2	equ	0xFDE
 11240                           postdec2	equ	0xFDD
 11241                           fsr2h	equ	0xFDA
 11242                           fsr2l	equ	0xFD9
 11243                           status	equ	0xFD8
 11244                           
 11245 ;; *************** function _I2C_Master_Stop *****************
 11246 ;; Defined at:
 11247 ;;		line 43 in file "I2C.c"
 11248 ;; Parameters:    Size  Location     Type
 11249 ;;		None
 11250 ;; Auto vars:     Size  Location     Type
 11251 ;;		None
 11252 ;; Return value:  Size  Location     Type
 11253 ;;                  1    wreg      void 
 11254 ;; Registers used:
 11255 ;;		wreg, status,2, status,0, cstack
 11256 ;; Tracked objects:
 11257 ;;		On entry : 0/0
 11258 ;;		On exit  : 0/0
 11259 ;;		Unchanged: 0/0
 11260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11261 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11262 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11263 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11264 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11265 ;;Total ram usage:        0 bytes
 11266 ;; Hardware stack levels used:    1
 11267 ;; Hardware stack levels required when called:    8
 11268 ;; This function calls:
 11269 ;;		_I2C_Master_Wait
 11270 ;; This function is called by:
 11271 ;;		_loadRTC
 11272 ;;		_getRTC
 11273 ;; This function uses a non-reentrant model
 11274 ;;
 11275                           
 11276                           	psect	text32
 11277  005FA2                     __ptext32:
 11278                           	opt stack 0
 11279  005FA2                     _I2C_Master_Stop:
 11280                           	opt stack 18
 11281                           
 11282                           ;I2C.c: 45: I2C_Master_Wait();
 11283                           
 11284                           ;incstack = 0
 11285  005FA2  EC94  F02F         	call	_I2C_Master_Wait	;wreg free
 11286                           
 11287                           ;I2C.c: 46: PEN = 1;
 11288  005FA6  84C5               	bsf	4037,2,c	;volatile
 11289  005FA8  0012               	return		;funcret
 11290  005FAA                     __end_of_I2C_Master_Stop:
 11291                           	opt stack 0
 11292                           tblptru	equ	0xFF8
 11293                           tblptrh	equ	0xFF7
 11294                           tblptrl	equ	0xFF6
 11295                           tablat	equ	0xFF5
 11296                           prodh	equ	0xFF4
 11297                           prodl	equ	0xFF3
 11298                           intcon	equ	0xFF2
 11299                           intcon2	equ	0xFF1
 11300                           intcon3	equ	0xFF0
 11301                           postinc0	equ	0xFEE
 11302                           wreg	equ	0xFE8
 11303                           postdec1	equ	0xFE5
 11304                           fsr1l	equ	0xFE1
 11305                           indf2	equ	0xFDF
 11306                           postinc2	equ	0xFDE
 11307                           postdec2	equ	0xFDD
 11308                           fsr2h	equ	0xFDA
 11309                           fsr2l	equ	0xFD9
 11310                           status	equ	0xFD8
 11311                           
 11312 ;; *************** function _I2C_Master_Start *****************
 11313 ;; Defined at:
 11314 ;;		line 31 in file "I2C.c"
 11315 ;; Parameters:    Size  Location     Type
 11316 ;;		None
 11317 ;; Auto vars:     Size  Location     Type
 11318 ;;		None
 11319 ;; Return value:  Size  Location     Type
 11320 ;;                  1    wreg      void 
 11321 ;; Registers used:
 11322 ;;		wreg, status,2, status,0, cstack
 11323 ;; Tracked objects:
 11324 ;;		On entry : 0/0
 11325 ;;		On exit  : 0/0
 11326 ;;		Unchanged: 0/0
 11327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11328 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11329 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11330 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11331 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11332 ;;Total ram usage:        0 bytes
 11333 ;; Hardware stack levels used:    1
 11334 ;; Hardware stack levels required when called:    8
 11335 ;; This function calls:
 11336 ;;		_I2C_Master_Wait
 11337 ;; This function is called by:
 11338 ;;		_loadRTC
 11339 ;;		_getRTC
 11340 ;; This function uses a non-reentrant model
 11341 ;;
 11342                           
 11343                           	psect	text33
 11344  005FAA                     __ptext33:
 11345                           	opt stack 0
 11346  005FAA                     _I2C_Master_Start:
 11347                           	opt stack 18
 11348                           
 11349                           ;I2C.c: 33: I2C_Master_Wait();
 11350                           
 11351                           ;incstack = 0
 11352  005FAA  EC94  F02F         	call	_I2C_Master_Wait	;wreg free
 11353                           
 11354                           ;I2C.c: 34: SEN = 1;
 11355  005FAE  80C5               	bsf	4037,0,c	;volatile
 11356  005FB0  0012               	return		;funcret
 11357  005FB2                     __end_of_I2C_Master_Start:
 11358                           	opt stack 0
 11359                           tblptru	equ	0xFF8
 11360                           tblptrh	equ	0xFF7
 11361                           tblptrl	equ	0xFF6
 11362                           tablat	equ	0xFF5
 11363                           prodh	equ	0xFF4
 11364                           prodl	equ	0xFF3
 11365                           intcon	equ	0xFF2
 11366                           intcon2	equ	0xFF1
 11367                           intcon3	equ	0xFF0
 11368                           postinc0	equ	0xFEE
 11369                           wreg	equ	0xFE8
 11370                           postdec1	equ	0xFE5
 11371                           fsr1l	equ	0xFE1
 11372                           indf2	equ	0xFDF
 11373                           postinc2	equ	0xFDE
 11374                           postdec2	equ	0xFDD
 11375                           fsr2h	equ	0xFDA
 11376                           fsr2l	equ	0xFD9
 11377                           status	equ	0xFD8
 11378                           
 11379 ;; *************** function _I2C_Master_Read *****************
 11380 ;; Defined at:
 11381 ;;		line 55 in file "I2C.c"
 11382 ;; Parameters:    Size  Location     Type
 11383 ;;  a               1    wreg     unsigned char 
 11384 ;; Auto vars:     Size  Location     Type
 11385 ;;  a               1    1[BANK0 ] unsigned char 
 11386 ;;  temp            1    2[BANK0 ] unsigned char 
 11387 ;; Return value:  Size  Location     Type
 11388 ;;                  1    wreg      unsigned char 
 11389 ;; Registers used:
 11390 ;;		wreg, status,2, status,0, cstack
 11391 ;; Tracked objects:
 11392 ;;		On entry : 0/0
 11393 ;;		On exit  : 0/0
 11394 ;;		Unchanged: 0/0
 11395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11396 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11397 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11398 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11399 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11400 ;;Total ram usage:        2 bytes
 11401 ;; Hardware stack levels used:    1
 11402 ;; Hardware stack levels required when called:    8
 11403 ;; This function calls:
 11404 ;;		_I2C_Master_Wait
 11405 ;; This function is called by:
 11406 ;;		_getRTC
 11407 ;; This function uses a non-reentrant model
 11408 ;;
 11409                           
 11410                           	psect	text34
 11411  005CAC                     __ptext34:
 11412                           	opt stack 0
 11413  005CAC                     _I2C_Master_Read:
 11414                           	opt stack 18
 11415                           
 11416                           ;incstack = 0
 11417                           ;I2C_Master_Read@a stored from wreg
 11418  005CAC  0100               	movlb	0	; () banked
 11419  005CAE  6F81               	movwf	I2C_Master_Read@a& (0+255),b
 11420                           
 11421                           ;I2C.c: 57: unsigned char temp;
 11422                           ;I2C.c: 58: I2C_Master_Wait();
 11423  005CB0  EC94  F02F         	call	_I2C_Master_Wait	;wreg free
 11424                           
 11425                           ;I2C.c: 59: RCEN = 1;
 11426  005CB4  86C5               	bsf	4037,3,c	;volatile
 11427                           
 11428                           ;I2C.c: 60: I2C_Master_Wait();
 11429  005CB6  EC94  F02F         	call	_I2C_Master_Wait	;wreg free
 11430                           
 11431                           ;I2C.c: 61: temp = SSPBUF;
 11432  005CBA  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
 11433                           
 11434                           ;I2C.c: 62: I2C_Master_Wait();
 11435  005CBE  EC94  F02F         	call	_I2C_Master_Wait	;wreg free
 11436                           
 11437                           ;I2C.c: 63: ACKDT = (a)?0:1;
 11438  005CC2  0100               	movlb	0	; () banked
 11439  005CC4  5181               	movf	I2C_Master_Read@a& (0+255),w,b
 11440  005CC6  0100               	movlb	0	; () banked
 11441  005CC8  A4D8               	btfss	status,2,c
 11442  005CCA  D002               	goto	u5330
 11443  005CCC  8AC5               	bsf	4037,5,c	;volatile
 11444  005CCE  D001               	goto	l6692
 11445  005CD0                     u5330:
 11446  005CD0  9AC5               	bcf	4037,5,c	;volatile
 11447  005CD2                     l6692:
 11448                           
 11449                           ;I2C.c: 64: ACKEN = 1;
 11450  005CD2  88C5               	bsf	4037,4,c	;volatile
 11451                           
 11452                           ;I2C.c: 65: return temp;
 11453  005CD4  0100               	movlb	0	; () banked
 11454  005CD6  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
 11455  005CD8  0012               	return	
 11456  005CDA                     __end_of_I2C_Master_Read:
 11457                           	opt stack 0
 11458                           tblptru	equ	0xFF8
 11459                           tblptrh	equ	0xFF7
 11460                           tblptrl	equ	0xFF6
 11461                           tablat	equ	0xFF5
 11462                           prodh	equ	0xFF4
 11463                           prodl	equ	0xFF3
 11464                           intcon	equ	0xFF2
 11465                           intcon2	equ	0xFF1
 11466                           intcon3	equ	0xFF0
 11467                           postinc0	equ	0xFEE
 11468                           wreg	equ	0xFE8
 11469                           postdec1	equ	0xFE5
 11470                           fsr1l	equ	0xFE1
 11471                           indf2	equ	0xFDF
 11472                           postinc2	equ	0xFDE
 11473                           postdec2	equ	0xFDD
 11474                           fsr2h	equ	0xFDA
 11475                           fsr2l	equ	0xFD9
 11476                           status	equ	0xFD8
 11477                           
 11478 ;; *************** function _I2C_Master_Wait *****************
 11479 ;; Defined at:
 11480 ;;		line 26 in file "I2C.c"
 11481 ;; Parameters:    Size  Location     Type
 11482 ;;		None
 11483 ;; Auto vars:     Size  Location     Type
 11484 ;;		None
 11485 ;; Return value:  Size  Location     Type
 11486 ;;                  1    wreg      void 
 11487 ;; Registers used:
 11488 ;;		wreg, status,2, status,0
 11489 ;; Tracked objects:
 11490 ;;		On entry : 0/0
 11491 ;;		On exit  : 0/0
 11492 ;;		Unchanged: 0/0
 11493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11494 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11495 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11496 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11497 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11498 ;;Total ram usage:        1 bytes
 11499 ;; Hardware stack levels used:    1
 11500 ;; Hardware stack levels required when called:    7
 11501 ;; This function calls:
 11502 ;;		Nothing
 11503 ;; This function is called by:
 11504 ;;		_I2C_Master_Start
 11505 ;;		_I2C_Master_Stop
 11506 ;;		_I2C_Master_Write
 11507 ;;		_I2C_Master_Read
 11508 ;;		_I2C_Master_RepeatedStart
 11509 ;; This function uses a non-reentrant model
 11510 ;;
 11511                           
 11512                           	psect	text35
 11513  005F28                     __ptext35:
 11514                           	opt stack 0
 11515  005F28                     _I2C_Master_Wait:
 11516                           	opt stack 18
 11517  005F28                     l76:
 11518  005F28  B4C7               	btfsc	4039,2,c	;volatile
 11519  005F2A  D7FE               	goto	l76
 11520  005F2C  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
 11521  005F30  0E1F               	movlw	31
 11522  005F32  0100               	movlb	0	; () banked
 11523  005F34  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
 11524  005F36  B4D8               	btfsc	status,2,c
 11525  005F38  0012               	return	
 11526  005F3A  D7F6               	goto	l76
 11527  005F3C                     __end_of_I2C_Master_Wait:
 11528                           	opt stack 0
 11529                           tblptru	equ	0xFF8
 11530                           tblptrh	equ	0xFF7
 11531                           tblptrl	equ	0xFF6
 11532                           tablat	equ	0xFF5
 11533                           prodh	equ	0xFF4
 11534                           prodl	equ	0xFF3
 11535                           intcon	equ	0xFF2
 11536                           intcon2	equ	0xFF1
 11537                           intcon3	equ	0xFF0
 11538                           postinc0	equ	0xFEE
 11539                           wreg	equ	0xFE8
 11540                           postdec1	equ	0xFE5
 11541                           fsr1l	equ	0xFE1
 11542                           indf2	equ	0xFDF
 11543                           postinc2	equ	0xFDE
 11544                           postdec2	equ	0xFDD
 11545                           fsr2h	equ	0xFDA
 11546                           fsr2l	equ	0xFD9
 11547                           status	equ	0xFD8
 11548                           
 11549 ;; *************** function _change_state_to_menu_22 *****************
 11550 ;; Defined at:
 11551 ;;		line 501 in file "UI.c"
 11552 ;; Parameters:    Size  Location     Type
 11553 ;;		None
 11554 ;; Auto vars:     Size  Location     Type
 11555 ;;		None
 11556 ;; Return value:  Size  Location     Type
 11557 ;;                  1    wreg      void 
 11558 ;; Registers used:
 11559 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11560 ;; Tracked objects:
 11561 ;;		On entry : 0/0
 11562 ;;		On exit  : 0/0
 11563 ;;		Unchanged: 0/0
 11564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11565 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11566 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11567 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11568 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11569 ;;Total ram usage:        0 bytes
 11570 ;; Hardware stack levels used:    1
 11571 ;; Hardware stack levels required when called:   10
 11572 ;; This function calls:
 11573 ;;		_lcdInst
 11574 ;;		_printf
 11575 ;; This function is called by:
 11576 ;;		_UI
 11577 ;; This function uses a non-reentrant model
 11578 ;;
 11579                           
 11580                           	psect	text36
 11581  00598C                     __ptext36:
 11582                           	opt stack 0
 11583  00598C                     _change_state_to_menu_22:
 11584                           	opt stack 19
 11585                           
 11586                           ;UI.c: 502: cur_state = 22;
 11587                           
 11588                           ; BSR set to: 0
 11589                           ;incstack = 0
 11590  00598C  0E00               	movlw	0
 11591  00598E  0100               	movlb	0	; () banked
 11592  005990  6FE7               	movwf	(_cur_state+1)& (0+255),b
 11593  005992  0E16               	movlw	22
 11594  005994  6FE6               	movwf	_cur_state& (0+255),b
 11595                           
 11596                           ; BSR set to: 0
 11597                           ;UI.c: 504: lcdInst(0b10000000);;
 11598  005996  0E80               	movlw	128
 11599  005998  ECAF  F02F         	call	_lcdInst
 11600                           
 11601                           ;UI.c: 505: printf("2. SORT        <");
 11602  00599C  0ED3               	movlw	low STR_34
 11603  00599E  0100               	movlb	0	; () banked
 11604  0059A0  6F8E               	movwf	printf@f& (0+255),b
 11605  0059A2  0EFD               	movlw	high STR_34
 11606  0059A4  0100               	movlb	0	; () banked
 11607  0059A6  6F8F               	movwf	(printf@f+1)& (0+255),b
 11608  0059A8  EC67  F00E         	call	_printf	;wreg free
 11609                           
 11610                           ;UI.c: 506: lcdInst(0b11000000);;
 11611  0059AC  0EC0               	movlw	192
 11612  0059AE  ECAF  F02F         	call	_lcdInst
 11613                           
 11614                           ;UI.c: 507: printf("3. LOGS         ");
 11615  0059B2  0E18               	movlw	low STR_36
 11616  0059B4  0100               	movlb	0	; () banked
 11617  0059B6  6F8E               	movwf	printf@f& (0+255),b
 11618  0059B8  0EFD               	movlw	high STR_36
 11619  0059BA  0100               	movlb	0	; () banked
 11620  0059BC  6F8F               	movwf	(printf@f+1)& (0+255),b
 11621  0059BE  EC67  F00E         	call	_printf	;wreg free
 11622  0059C2  0012               	return		;funcret
 11623  0059C4                     __end_of_change_state_to_menu_22:
 11624                           	opt stack 0
 11625                           tblptru	equ	0xFF8
 11626                           tblptrh	equ	0xFF7
 11627                           tblptrl	equ	0xFF6
 11628                           tablat	equ	0xFF5
 11629                           prodh	equ	0xFF4
 11630                           prodl	equ	0xFF3
 11631                           intcon	equ	0xFF2
 11632                           intcon2	equ	0xFF1
 11633                           intcon3	equ	0xFF0
 11634                           postinc0	equ	0xFEE
 11635                           wreg	equ	0xFE8
 11636                           postdec1	equ	0xFE5
 11637                           fsr1l	equ	0xFE1
 11638                           indf2	equ	0xFDF
 11639                           postinc2	equ	0xFDE
 11640                           postdec2	equ	0xFDD
 11641                           fsr2h	equ	0xFDA
 11642                           fsr2l	equ	0xFD9
 11643                           status	equ	0xFD8
 11644                           
 11645 ;; *************** function _change_state_to_menu_12 *****************
 11646 ;; Defined at:
 11647 ;;		line 493 in file "UI.c"
 11648 ;; Parameters:    Size  Location     Type
 11649 ;;		None
 11650 ;; Auto vars:     Size  Location     Type
 11651 ;;		None
 11652 ;; Return value:  Size  Location     Type
 11653 ;;                  1    wreg      void 
 11654 ;; Registers used:
 11655 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11656 ;; Tracked objects:
 11657 ;;		On entry : 0/0
 11658 ;;		On exit  : 0/0
 11659 ;;		Unchanged: 0/0
 11660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11661 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11662 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11663 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11664 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11665 ;;Total ram usage:        0 bytes
 11666 ;; Hardware stack levels used:    1
 11667 ;; Hardware stack levels required when called:   10
 11668 ;; This function calls:
 11669 ;;		_lcdInst
 11670 ;;		_printf
 11671 ;; This function is called by:
 11672 ;;		_UI
 11673 ;; This function uses a non-reentrant model
 11674 ;;
 11675                           
 11676                           	psect	text37
 11677  0059C4                     __ptext37:
 11678                           	opt stack 0
 11679  0059C4                     _change_state_to_menu_12:
 11680                           	opt stack 19
 11681                           
 11682                           ;UI.c: 494: cur_state = 12;
 11683                           
 11684                           ;incstack = 0
 11685  0059C4  0E00               	movlw	0
 11686  0059C6  0100               	movlb	0	; () banked
 11687  0059C8  6FE7               	movwf	(_cur_state+1)& (0+255),b
 11688  0059CA  0E0C               	movlw	12
 11689  0059CC  6FE6               	movwf	_cur_state& (0+255),b
 11690                           
 11691                           ; BSR set to: 0
 11692                           ;UI.c: 496: lcdInst(0b10000000);;
 11693  0059CE  0E80               	movlw	128
 11694  0059D0  ECAF  F02F         	call	_lcdInst
 11695                           
 11696                           ;UI.c: 497: printf("1. DATE/TIME    ");
 11697  0059D4  0E3A               	movlw	low STR_33
 11698  0059D6  0100               	movlb	0	; () banked
 11699  0059D8  6F8E               	movwf	printf@f& (0+255),b
 11700  0059DA  0EFD               	movlw	high STR_33
 11701  0059DC  0100               	movlb	0	; () banked
 11702  0059DE  6F8F               	movwf	(printf@f+1)& (0+255),b
 11703  0059E0  EC67  F00E         	call	_printf	;wreg free
 11704                           
 11705                           ;UI.c: 498: lcdInst(0b11000000);;
 11706  0059E4  0EC0               	movlw	192
 11707  0059E6  ECAF  F02F         	call	_lcdInst
 11708                           
 11709                           ;UI.c: 499: printf("2. SORT        <");
 11710  0059EA  0ED3               	movlw	low STR_34
 11711  0059EC  0100               	movlb	0	; () banked
 11712  0059EE  6F8E               	movwf	printf@f& (0+255),b
 11713  0059F0  0EFD               	movlw	high STR_34
 11714  0059F2  0100               	movlb	0	; () banked
 11715  0059F4  6F8F               	movwf	(printf@f+1)& (0+255),b
 11716  0059F6  EC67  F00E         	call	_printf	;wreg free
 11717  0059FA  0012               	return		;funcret
 11718  0059FC                     __end_of_change_state_to_menu_12:
 11719                           	opt stack 0
 11720                           tblptru	equ	0xFF8
 11721                           tblptrh	equ	0xFF7
 11722                           tblptrl	equ	0xFF6
 11723                           tablat	equ	0xFF5
 11724                           prodh	equ	0xFF4
 11725                           prodl	equ	0xFF3
 11726                           intcon	equ	0xFF2
 11727                           intcon2	equ	0xFF1
 11728                           intcon3	equ	0xFF0
 11729                           postinc0	equ	0xFEE
 11730                           wreg	equ	0xFE8
 11731                           postdec1	equ	0xFE5
 11732                           fsr1l	equ	0xFE1
 11733                           indf2	equ	0xFDF
 11734                           postinc2	equ	0xFDE
 11735                           postdec2	equ	0xFDD
 11736                           fsr2h	equ	0xFDA
 11737                           fsr2l	equ	0xFD9
 11738                           status	equ	0xFD8
 11739                           
 11740 ;; *************** function ___awmod *****************
 11741 ;; Defined at:
 11742 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
 11743 ;; Parameters:    Size  Location     Type
 11744 ;;  dividend        2    0[BANK0 ] int 
 11745 ;;  divisor         2    2[BANK0 ] int 
 11746 ;; Auto vars:     Size  Location     Type
 11747 ;;  sign            1    5[BANK0 ] unsigned char 
 11748 ;;  counter         1    4[BANK0 ] unsigned char 
 11749 ;; Return value:  Size  Location     Type
 11750 ;;                  2    0[BANK0 ] int 
 11751 ;; Registers used:
 11752 ;;		wreg, status,2, status,0
 11753 ;; Tracked objects:
 11754 ;;		On entry : 0/0
 11755 ;;		On exit  : 0/0
 11756 ;;		Unchanged: 0/0
 11757 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11758 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11759 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11760 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11761 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11762 ;;Total ram usage:        6 bytes
 11763 ;; Hardware stack levels used:    1
 11764 ;; Hardware stack levels required when called:    7
 11765 ;; This function calls:
 11766 ;;		Nothing
 11767 ;; This function is called by:
 11768 ;;		_UI
 11769 ;; This function uses a non-reentrant model
 11770 ;;
 11771                           
 11772                           	psect	text38
 11773  004EFC                     __ptext38:
 11774                           	opt stack 0
 11775  004EFC                     ___awmod:
 11776                           	opt stack 22
 11777                           
 11778                           ;incstack = 0
 11779  004EFC  0E00               	movlw	0
 11780  004EFE  0100               	movlb	0	; () banked
 11781  004F00  6F85               	movwf	___awmod@sign& (0+255),b
 11782                           
 11783                           ; BSR set to: 0
 11784  004F02  0100               	movlb	0	; () banked
 11785  004F04  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
 11786  004F06  D008               	goto	l9408
 11787                           
 11788                           ; BSR set to: 0
 11789  004F08  0100               	movlb	0	; () banked
 11790  004F0A  6D80               	negf	___awmod@dividend& (0+255),b
 11791  004F0C  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
 11792  004F0E  B0D8               	btfsc	status,0,c
 11793  004F10  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
 11794                           
 11795                           ; BSR set to: 0
 11796  004F12  0E01               	movlw	1
 11797  004F14  0100               	movlb	0	; () banked
 11798  004F16  6F85               	movwf	___awmod@sign& (0+255),b
 11799  004F18                     l9408:
 11800                           
 11801                           ; BSR set to: 0
 11802  004F18  0100               	movlb	0	; () banked
 11803  004F1A  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
 11804  004F1C  D005               	goto	l9412
 11805                           
 11806                           ; BSR set to: 0
 11807  004F1E  0100               	movlb	0	; () banked
 11808  004F20  6D82               	negf	___awmod@divisor& (0+255),b
 11809  004F22  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
 11810  004F24  B0D8               	btfsc	status,0,c
 11811  004F26  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
 11812  004F28                     l9412:
 11813                           
 11814                           ; BSR set to: 0
 11815  004F28  0100               	movlb	0	; () banked
 11816  004F2A  5182               	movf	___awmod@divisor& (0+255),w,b
 11817  004F2C  0100               	movlb	0	; () banked
 11818  004F2E  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
 11819  004F30  B4D8               	btfsc	status,2,c
 11820  004F32  D026               	goto	l9428
 11821                           
 11822                           ; BSR set to: 0
 11823  004F34  0E01               	movlw	1
 11824  004F36  0100               	movlb	0	; () banked
 11825  004F38  6F84               	movwf	___awmod@counter& (0+255),b
 11826  004F3A  D006               	goto	l9418
 11827  004F3C                     l9416:
 11828                           
 11829                           ; BSR set to: 0
 11830  004F3C  0100               	movlb	0	; () banked
 11831  004F3E  90D8               	bcf	status,0,c
 11832  004F40  3782               	rlcf	___awmod@divisor& (0+255),f,b
 11833  004F42  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
 11834  004F44  0100               	movlb	0	; () banked
 11835  004F46  2B84               	incf	___awmod@counter& (0+255),f,b
 11836  004F48                     l9418:
 11837                           
 11838                           ; BSR set to: 0
 11839  004F48  0100               	movlb	0	; () banked
 11840  004F4A  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
 11841  004F4C  D7F7               	goto	l9416
 11842  004F4E                     l9420:
 11843                           
 11844                           ; BSR set to: 0
 11845  004F4E  0100               	movlb	0	; () banked
 11846  004F50  5182               	movf	___awmod@divisor& (0+255),w,b
 11847  004F52  0100               	movlb	0	; () banked
 11848  004F54  5D80               	subwf	___awmod@dividend& (0+255),w,b
 11849  004F56  0100               	movlb	0	; () banked
 11850  004F58  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
 11851  004F5A  0100               	movlb	0	; () banked
 11852  004F5C  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
 11853  004F5E  A0D8               	btfss	status,0,c
 11854  004F60  D008               	goto	l9424
 11855                           
 11856                           ; BSR set to: 0
 11857  004F62  0100               	movlb	0	; () banked
 11858  004F64  5182               	movf	___awmod@divisor& (0+255),w,b
 11859  004F66  0100               	movlb	0	; () banked
 11860  004F68  5F80               	subwf	___awmod@dividend& (0+255),f,b
 11861  004F6A  0100               	movlb	0	; () banked
 11862  004F6C  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
 11863  004F6E  0100               	movlb	0	; () banked
 11864  004F70  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
 11865  004F72                     l9424:
 11866                           
 11867                           ; BSR set to: 0
 11868  004F72  0100               	movlb	0	; () banked
 11869  004F74  90D8               	bcf	status,0,c
 11870  004F76  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
 11871  004F78  3382               	rrcf	___awmod@divisor& (0+255),f,b
 11872                           
 11873                           ; BSR set to: 0
 11874  004F7A  0100               	movlb	0	; () banked
 11875  004F7C  2F84               	decfsz	___awmod@counter& (0+255),f,b
 11876  004F7E  D7E7               	goto	l9420
 11877  004F80                     l9428:
 11878                           
 11879                           ; BSR set to: 0
 11880  004F80  0100               	movlb	0	; () banked
 11881  004F82  5185               	movf	___awmod@sign& (0+255),w,b
 11882  004F84  0100               	movlb	0	; () banked
 11883  004F86  B4D8               	btfsc	status,2,c
 11884  004F88  D005               	goto	l9432
 11885                           
 11886                           ; BSR set to: 0
 11887  004F8A  0100               	movlb	0	; () banked
 11888  004F8C  6D80               	negf	___awmod@dividend& (0+255),b
 11889  004F8E  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
 11890  004F90  B0D8               	btfsc	status,0,c
 11891  004F92  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
 11892  004F94                     l9432:
 11893                           
 11894                           ; BSR set to: 0
 11895  004F94  C080  F080         	movff	___awmod@dividend,?___awmod
 11896  004F98  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
 11897  004F9C  0012               	return	
 11898  004F9E                     __end_of___awmod:
 11899                           	opt stack 0
 11900                           tblptru	equ	0xFF8
 11901                           tblptrh	equ	0xFF7
 11902                           tblptrl	equ	0xFF6
 11903                           tablat	equ	0xFF5
 11904                           prodh	equ	0xFF4
 11905                           prodl	equ	0xFF3
 11906                           intcon	equ	0xFF2
 11907                           intcon2	equ	0xFF1
 11908                           intcon3	equ	0xFF0
 11909                           postinc0	equ	0xFEE
 11910                           wreg	equ	0xFE8
 11911                           postdec1	equ	0xFE5
 11912                           fsr1l	equ	0xFE1
 11913                           indf2	equ	0xFDF
 11914                           postinc2	equ	0xFDE
 11915                           postdec2	equ	0xFDD
 11916                           fsr2h	equ	0xFDA
 11917                           fsr2l	equ	0xFD9
 11918                           status	equ	0xFD8
 11919                           
 11920 ;; *************** function ___awdiv *****************
 11921 ;; Defined at:
 11922 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
 11923 ;; Parameters:    Size  Location     Type
 11924 ;;  dividend        2    6[BANK0 ] int 
 11925 ;;  divisor         2    8[BANK0 ] int 
 11926 ;; Auto vars:     Size  Location     Type
 11927 ;;  quotient        2   12[BANK0 ] int 
 11928 ;;  sign            1   11[BANK0 ] unsigned char 
 11929 ;;  counter         1   10[BANK0 ] unsigned char 
 11930 ;; Return value:  Size  Location     Type
 11931 ;;                  2    6[BANK0 ] int 
 11932 ;; Registers used:
 11933 ;;		wreg, status,2, status,0
 11934 ;; Tracked objects:
 11935 ;;		On entry : 0/0
 11936 ;;		On exit  : 0/0
 11937 ;;		Unchanged: 0/0
 11938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11939 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11940 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11941 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11942 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11943 ;;Total ram usage:        8 bytes
 11944 ;; Hardware stack levels used:    1
 11945 ;; Hardware stack levels required when called:    7
 11946 ;; This function calls:
 11947 ;;		Nothing
 11948 ;; This function is called by:
 11949 ;;		_UI
 11950 ;;		_ID
 11951 ;; This function uses a non-reentrant model
 11952 ;;
 11953                           
 11954                           	psect	text39
 11955  004CD8                     __ptext39:
 11956                           	opt stack 0
 11957  004CD8                     ___awdiv:
 11958                           	opt stack 21
 11959                           
 11960                           ; BSR set to: 0
 11961                           ;incstack = 0
 11962  004CD8  0E00               	movlw	0
 11963  004CDA  0100               	movlb	0	; () banked
 11964  004CDC  6F8B               	movwf	___awdiv@sign& (0+255),b
 11965                           
 11966                           ; BSR set to: 0
 11967  004CDE  0100               	movlb	0	; () banked
 11968  004CE0  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 11969  004CE2  D008               	goto	l7630
 11970                           
 11971                           ; BSR set to: 0
 11972  004CE4  0100               	movlb	0	; () banked
 11973  004CE6  6D88               	negf	___awdiv@divisor& (0+255),b
 11974  004CE8  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
 11975  004CEA  B0D8               	btfsc	status,0,c
 11976  004CEC  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
 11977                           
 11978                           ; BSR set to: 0
 11979  004CEE  0E01               	movlw	1
 11980  004CF0  0100               	movlb	0	; () banked
 11981  004CF2  6F8B               	movwf	___awdiv@sign& (0+255),b
 11982  004CF4                     l7630:
 11983                           
 11984                           ; BSR set to: 0
 11985  004CF4  0100               	movlb	0	; () banked
 11986  004CF6  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
 11987  004CF8  D008               	goto	l7636
 11988                           
 11989                           ; BSR set to: 0
 11990  004CFA  0100               	movlb	0	; () banked
 11991  004CFC  6D86               	negf	___awdiv@dividend& (0+255),b
 11992  004CFE  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
 11993  004D00  B0D8               	btfsc	status,0,c
 11994  004D02  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
 11995                           
 11996                           ; BSR set to: 0
 11997  004D04  0E01               	movlw	1
 11998  004D06  0100               	movlb	0	; () banked
 11999  004D08  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
 12000  004D0A                     l7636:
 12001                           
 12002                           ; BSR set to: 0
 12003  004D0A  0E00               	movlw	0
 12004  004D0C  0100               	movlb	0	; () banked
 12005  004D0E  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
 12006  004D10  0E00               	movlw	0
 12007  004D12  6F8C               	movwf	___awdiv@quotient& (0+255),b
 12008                           
 12009                           ; BSR set to: 0
 12010  004D14  0100               	movlb	0	; () banked
 12011  004D16  5188               	movf	___awdiv@divisor& (0+255),w,b
 12012  004D18  0100               	movlb	0	; () banked
 12013  004D1A  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
 12014  004D1C  B4D8               	btfsc	status,2,c
 12015  004D1E  D02C               	goto	l7658
 12016                           
 12017                           ; BSR set to: 0
 12018  004D20  0E01               	movlw	1
 12019  004D22  0100               	movlb	0	; () banked
 12020  004D24  6F8A               	movwf	___awdiv@counter& (0+255),b
 12021  004D26  D006               	goto	l7644
 12022  004D28                     l7642:
 12023                           
 12024                           ; BSR set to: 0
 12025  004D28  0100               	movlb	0	; () banked
 12026  004D2A  90D8               	bcf	status,0,c
 12027  004D2C  3788               	rlcf	___awdiv@divisor& (0+255),f,b
 12028  004D2E  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
 12029  004D30  0100               	movlb	0	; () banked
 12030  004D32  2B8A               	incf	___awdiv@counter& (0+255),f,b
 12031  004D34                     l7644:
 12032                           
 12033                           ; BSR set to: 0
 12034  004D34  0100               	movlb	0	; () banked
 12035  004D36  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 12036  004D38  D7F7               	goto	l7642
 12037  004D3A                     l7646:
 12038                           
 12039                           ; BSR set to: 0
 12040  004D3A  0100               	movlb	0	; () banked
 12041  004D3C  90D8               	bcf	status,0,c
 12042  004D3E  378C               	rlcf	___awdiv@quotient& (0+255),f,b
 12043  004D40  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
 12044                           
 12045                           ; BSR set to: 0
 12046  004D42  0100               	movlb	0	; () banked
 12047  004D44  5188               	movf	___awdiv@divisor& (0+255),w,b
 12048  004D46  0100               	movlb	0	; () banked
 12049  004D48  5D86               	subwf	___awdiv@dividend& (0+255),w,b
 12050  004D4A  0100               	movlb	0	; () banked
 12051  004D4C  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
 12052  004D4E  0100               	movlb	0	; () banked
 12053  004D50  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
 12054  004D52  A0D8               	btfss	status,0,c
 12055  004D54  D00A               	goto	l7654
 12056                           
 12057                           ; BSR set to: 0
 12058  004D56  0100               	movlb	0	; () banked
 12059  004D58  5188               	movf	___awdiv@divisor& (0+255),w,b
 12060  004D5A  0100               	movlb	0	; () banked
 12061  004D5C  5F86               	subwf	___awdiv@dividend& (0+255),f,b
 12062  004D5E  0100               	movlb	0	; () banked
 12063  004D60  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
 12064  004D62  0100               	movlb	0	; () banked
 12065  004D64  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
 12066                           
 12067                           ; BSR set to: 0
 12068  004D66  0100               	movlb	0	; () banked
 12069  004D68  818C               	bsf	___awdiv@quotient& (0+255),0,b
 12070  004D6A                     l7654:
 12071                           
 12072                           ; BSR set to: 0
 12073  004D6A  0100               	movlb	0	; () banked
 12074  004D6C  90D8               	bcf	status,0,c
 12075  004D6E  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
 12076  004D70  3388               	rrcf	___awdiv@divisor& (0+255),f,b
 12077                           
 12078                           ; BSR set to: 0
 12079  004D72  0100               	movlb	0	; () banked
 12080  004D74  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
 12081  004D76  D7E1               	goto	l7646
 12082  004D78                     l7658:
 12083                           
 12084                           ; BSR set to: 0
 12085  004D78  0100               	movlb	0	; () banked
 12086  004D7A  518B               	movf	___awdiv@sign& (0+255),w,b
 12087  004D7C  0100               	movlb	0	; () banked
 12088  004D7E  B4D8               	btfsc	status,2,c
 12089  004D80  D005               	goto	l7662
 12090                           
 12091                           ; BSR set to: 0
 12092  004D82  0100               	movlb	0	; () banked
 12093  004D84  6D8C               	negf	___awdiv@quotient& (0+255),b
 12094  004D86  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
 12095  004D88  B0D8               	btfsc	status,0,c
 12096  004D8A  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
 12097  004D8C                     l7662:
 12098                           
 12099                           ; BSR set to: 0
 12100  004D8C  C08C  F086         	movff	___awdiv@quotient,?___awdiv
 12101  004D90  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
 12102  004D94  0012               	return	
 12103  004D96                     __end_of___awdiv:
 12104                           	opt stack 0
 12105                           tblptru	equ	0xFF8
 12106                           tblptrh	equ	0xFF7
 12107                           tblptrl	equ	0xFF6
 12108                           tablat	equ	0xFF5
 12109                           prodh	equ	0xFF4
 12110                           prodl	equ	0xFF3
 12111                           intcon	equ	0xFF2
 12112                           intcon2	equ	0xFF1
 12113                           intcon3	equ	0xFF0
 12114                           postinc0	equ	0xFEE
 12115                           wreg	equ	0xFE8
 12116                           postdec1	equ	0xFE5
 12117                           fsr1l	equ	0xFE1
 12118                           indf2	equ	0xFDF
 12119                           postinc2	equ	0xFDE
 12120                           postdec2	equ	0xFDD
 12121                           fsr2h	equ	0xFDA
 12122                           fsr2l	equ	0xFD9
 12123                           status	equ	0xFD8
 12124                           
 12125 ;; *************** function _Test *****************
 12126 ;; Defined at:
 12127 ;;		line 30 in file "Test.c"
 12128 ;; Parameters:    Size  Location     Type
 12129 ;;		None
 12130 ;; Auto vars:     Size  Location     Type
 12131 ;;		None
 12132 ;; Return value:  Size  Location     Type
 12133 ;;                  1    wreg      void 
 12134 ;; Registers used:
 12135 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12136 ;; Tracked objects:
 12137 ;;		On entry : 0/0
 12138 ;;		On exit  : 0/0
 12139 ;;		Unchanged: 0/0
 12140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12141 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12142 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12143 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12144 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12145 ;;Total ram usage:        2 bytes
 12146 ;; Hardware stack levels used:    1
 12147 ;; Hardware stack levels required when called:   11
 12148 ;; This function calls:
 12149 ;;		_BlockerTest
 12150 ;;		_BothServos
 12151 ;;		_PlatformTest
 12152 ;;		_PortTestDC
 12153 ;;		_PortTestPusher
 12154 ;;		_SpeedTest
 12155 ;;		_actuatorTest
 12156 ;;		_algorithmTest
 12157 ;;		_arm
 12158 ;;		_lcdInst
 12159 ;;		_printf
 12160 ;;		_sensorTest
 12161 ;; This function is called by:
 12162 ;;		_main
 12163 ;; This function uses a non-reentrant model
 12164 ;;
 12165                           
 12166                           	psect	text40
 12167  0044FA                     __ptext40:
 12168                           	opt stack 0
 12169  0044FA                     _Test:
 12170                           	opt stack 19
 12171                           
 12172                           ;Test.c: 32: while(machine_state == Testing_state){
 12173                           
 12174                           ; BSR set to: 0
 12175                           ;incstack = 0
 12176  0044FA  D07C               	goto	l10194
 12177  0044FC                     l10154:
 12178                           
 12179                           ;Test.c: 33: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 12180  0044FC  0E01               	movlw	1
 12181  0044FE  ECAF  F02F         	call	_lcdInst
 12182  004502  0E68               	movlw	104
 12183  004504  0100               	movlb	0	; () banked
 12184  004506  6FC6               	movwf	??_Test& (0+255),b
 12185  004508  0EE4               	movlw	228
 12186  00450A                     u11207:
 12187  00450A  2EE8               	decfsz	wreg,f,c
 12188  00450C  D7FE               	bra	u11207
 12189  00450E  2FC6               	decfsz	??_Test& (0+255),f,b
 12190  004510  D7FC               	bra	u11207
 12191  004512  F000               	nop	
 12192  004514  0E80               	movlw	128
 12193  004516  ECAF  F02F         	call	_lcdInst
 12194                           
 12195                           ;Test.c: 34: printf("2.SNR|4.HI|5.MED");
 12196  00451A  0E90               	movlw	low STR_68
 12197  00451C  0100               	movlb	0	; () banked
 12198  00451E  6F8E               	movwf	printf@f& (0+255),b
 12199  004520  0EFC               	movlw	high STR_68
 12200  004522  0100               	movlb	0	; () banked
 12201  004524  6F8F               	movwf	(printf@f+1)& (0+255),b
 12202  004526  EC67  F00E         	call	_printf	;wreg free
 12203                           
 12204                           ;Test.c: 35: lcdInst(0b11000000);;
 12205  00452A  0EC0               	movlw	192
 12206  00452C  ECAF  F02F         	call	_lcdInst
 12207                           
 12208                           ;Test.c: 36: printf("B.PLA|8.SV|9.BLK");
 12209  004530  0EA1               	movlw	low STR_69
 12210  004532  0100               	movlb	0	; () banked
 12211  004534  6F8E               	movwf	printf@f& (0+255),b
 12212  004536  0EFC               	movlw	high STR_69
 12213  004538  0100               	movlb	0	; () banked
 12214  00453A  6F8F               	movwf	(printf@f+1)& (0+255),b
 12215  00453C  EC67  F00E         	call	_printf	;wreg free
 12216  004540                     l1265:
 12217  004540  A281               	btfss	3969,1,c	;volatile
 12218  004542  D7FE               	goto	l1265
 12219                           
 12220                           ;Test.c: 38: var = PORTB >> 4;
 12221  004544  CF81 F0C6          	movff	3969,??_Test	;volatile
 12222  004548  0100               	movlb	0	; () banked
 12223  00454A  3BC6               	swapf	??_Test& (0+255),f,b
 12224  00454C  0E0F               	movlw	15
 12225  00454E  17C6               	andwf	??_Test& (0+255),f,b
 12226  004550  0100               	movlb	0	; () banked
 12227  004552  51C6               	movf	??_Test& (0+255),w,b
 12228  004554  0101               	movlb	1	; () banked
 12229  004556  6F4B               	movwf	_var& (0+255),b
 12230  004558  6B4C               	clrf	(_var+1)& (0+255),b
 12231                           
 12232                           ; BSR set to: 1
 12233                           ;Test.c: 39: var++;
 12234  00455A  0101               	movlb	1	; () banked
 12235  00455C  4B4B               	infsnz	_var& (0+255),f,b
 12236  00455E  2B4C               	incf	(_var+1)& (0+255),f,b
 12237  004560                     l1268:
 12238  004560  A281               	btfss	3969,1,c	;volatile
 12239  004562  D01F               	goto	l10192
 12240  004564  D7FD               	goto	l1268
 12241  004566                     l10170:
 12242                           
 12243                           ;Test.c: 43: algorithmTest();
 12244  004566  EC64  F024         	call	_algorithmTest	;wreg free
 12245                           
 12246                           ;Test.c: 44: break;
 12247  00456A  D044               	goto	l10194
 12248  00456C                     l10172:
 12249                           
 12250                           ;Test.c: 46: sensorTest();
 12251  00456C  EC7A  F012         	call	_sensorTest	;wreg free
 12252                           
 12253                           ;Test.c: 47: break;
 12254  004570  D041               	goto	l10194
 12255  004572                     l10174:
 12256                           
 12257                           ;Test.c: 49: actuatorTest();
 12258  004572  EC6D  F004         	call	_actuatorTest	;wreg free
 12259                           
 12260                           ;Test.c: 50: break;
 12261  004576  D03E               	goto	l10194
 12262  004578                     l10176:
 12263                           
 12264                           ;Test.c: 52: arm();
 12265  004578  EC00  F023         	call	_arm	;wreg free
 12266                           
 12267                           ;Test.c: 53: break;
 12268  00457C  D03B               	goto	l10194
 12269  00457E                     l10178:
 12270                           
 12271                           ;Test.c: 55: PortTestDC();
 12272  00457E  ECCF  F024         	call	_PortTestDC	;wreg free
 12273                           
 12274                           ;Test.c: 56: break;
 12275  004582  D038               	goto	l10194
 12276  004584                     l10180:
 12277                           
 12278                           ;Test.c: 58: SpeedTest();
 12279  004584  ECA4  F028         	call	_SpeedTest	;wreg free
 12280                           
 12281                           ;Test.c: 59: break;
 12282  004588  D035               	goto	l10194
 12283  00458A                     l10182:
 12284                           
 12285                           ;Test.c: 61: PortTestPusher();
 12286  00458A  EC4C  F02B         	call	_PortTestPusher	;wreg free
 12287                           
 12288                           ;Test.c: 62: break;
 12289  00458E  D032               	goto	l10194
 12290  004590                     l10184:
 12291                           
 12292                           ;Test.c: 64: PlatformTest();
 12293  004590  ECA5  F017         	call	_PlatformTest	;wreg free
 12294                           
 12295                           ;Test.c: 65: break;
 12296  004594  D02F               	goto	l10194
 12297  004596                     l10186:
 12298                           
 12299                           ;Test.c: 67: BothServos();
 12300  004596  EC83  F010         	call	_BothServos	;wreg free
 12301                           
 12302                           ;Test.c: 68: break;
 12303  00459A  D02C               	goto	l10194
 12304  00459C                     l10188:
 12305                           
 12306                           ;Test.c: 70: BlockerTest();
 12307  00459C  ECDF  F01F         	call	_BlockerTest	;wreg free
 12308                           
 12309                           ;Test.c: 74: }
 12310                           
 12311                           ;Test.c: 73: break;
 12312                           
 12313                           ;Test.c: 72: default:
 12314                           
 12315                           ;Test.c: 71: break;
 12316  0045A0  D029               	goto	l10194
 12317  0045A2                     l10192:
 12318  0045A2  C14B  F0C6         	movff	_var,??_Test
 12319  0045A6  C14C  F0C7         	movff	_var+1,??_Test+1
 12320                           
 12321                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12322                           ; Switch size 1, requested type "space"
 12323                           ; Number of cases is 1, Range of values is 0 to 0
 12324                           ; switch strategies available:
 12325                           ; Name         Instructions Cycles
 12326                           ; simple_byte            4     3 (average)
 12327                           ;	Chosen strategy is simple_byte
 12328  0045AA  0100               	movlb	0	; () banked
 12329  0045AC  51C7               	movf	(??_Test+1)& (0+255),w,b
 12330  0045AE  0A00               	xorlw	0	; case 0
 12331  0045B0  A4D8               	btfss	status,2,c
 12332  0045B2  D020               	goto	l10194
 12333                           
 12334                           ; BSR set to: 0
 12335                           ; Switch size 1, requested type "space"
 12336                           ; Number of cases is 10, Range of values is 1 to 11
 12337                           ; switch strategies available:
 12338                           ; Name         Instructions Cycles
 12339                           ; simple_byte           31    16 (average)
 12340                           ;	Chosen strategy is simple_byte
 12341  0045B4  0100               	movlb	0	; () banked
 12342  0045B6  51C6               	movf	??_Test& (0+255),w,b
 12343  0045B8  0A01               	xorlw	1	; case 1
 12344  0045BA  B4D8               	btfsc	status,2,c
 12345  0045BC  D7D4               	goto	l10170
 12346  0045BE  0A03               	xorlw	3	; case 2
 12347  0045C0  B4D8               	btfsc	status,2,c
 12348  0045C2  D7D4               	goto	l10172
 12349  0045C4  0A01               	xorlw	1	; case 3
 12350  0045C6  B4D8               	btfsc	status,2,c
 12351  0045C8  D7D4               	goto	l10174
 12352  0045CA  0A07               	xorlw	7	; case 4
 12353  0045CC  B4D8               	btfsc	status,2,c
 12354  0045CE  D7D4               	goto	l10176
 12355  0045D0  0A01               	xorlw	1	; case 5
 12356  0045D2  B4D8               	btfsc	status,2,c
 12357  0045D4  D7D4               	goto	l10178
 12358  0045D6  0A03               	xorlw	3	; case 6
 12359  0045D8  B4D8               	btfsc	status,2,c
 12360  0045DA  D7D4               	goto	l10180
 12361  0045DC  0A01               	xorlw	1	; case 7
 12362  0045DE  B4D8               	btfsc	status,2,c
 12363  0045E0  D7D4               	goto	l10182
 12364  0045E2  0A0F               	xorlw	15	; case 8
 12365  0045E4  B4D8               	btfsc	status,2,c
 12366  0045E6  D7D4               	goto	l10184
 12367  0045E8  0A02               	xorlw	2	; case 10
 12368  0045EA  B4D8               	btfsc	status,2,c
 12369  0045EC  D7D4               	goto	l10186
 12370  0045EE  0A01               	xorlw	1	; case 11
 12371  0045F0  B4D8               	btfsc	status,2,c
 12372  0045F2  D7D4               	goto	l10188
 12373  0045F4                     l10194:
 12374  0045F4  0E03               	movlw	3
 12375  0045F6  0100               	movlb	0	; () banked
 12376  0045F8  19FC               	xorwf	_machine_state& (0+255),w,b
 12377  0045FA  A4D8               	btfss	status,2,c
 12378  0045FC  0012               	return	
 12379  0045FE  D77E               	goto	l10154
 12380  004600                     __end_of_Test:
 12381                           	opt stack 0
 12382                           tblptru	equ	0xFF8
 12383                           tblptrh	equ	0xFF7
 12384                           tblptrl	equ	0xFF6
 12385                           tablat	equ	0xFF5
 12386                           prodh	equ	0xFF4
 12387                           prodl	equ	0xFF3
 12388                           intcon	equ	0xFF2
 12389                           intcon2	equ	0xFF1
 12390                           intcon3	equ	0xFF0
 12391                           postinc0	equ	0xFEE
 12392                           wreg	equ	0xFE8
 12393                           postdec1	equ	0xFE5
 12394                           fsr1l	equ	0xFE1
 12395                           indf2	equ	0xFDF
 12396                           postinc2	equ	0xFDE
 12397                           postdec2	equ	0xFDD
 12398                           fsr2h	equ	0xFDA
 12399                           fsr2l	equ	0xFD9
 12400                           status	equ	0xFD8
 12401                           
 12402 ;; *************** function _sensorTest *****************
 12403 ;; Defined at:
 12404 ;;		line 122 in file "Test.c"
 12405 ;; Parameters:    Size  Location     Type
 12406 ;;		None
 12407 ;; Auto vars:     Size  Location     Type
 12408 ;;  res             2   47[BANK0 ] int 
 12409 ;;  res             2   45[BANK0 ] int 
 12410 ;; Return value:  Size  Location     Type
 12411 ;;                  1    wreg      void 
 12412 ;; Registers used:
 12413 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12414 ;; Tracked objects:
 12415 ;;		On entry : 0/0
 12416 ;;		On exit  : 0/0
 12417 ;;		Unchanged: 0/0
 12418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12419 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12420 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12421 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12422 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12423 ;;Total ram usage:        6 bytes
 12424 ;; Hardware stack levels used:    1
 12425 ;; Hardware stack levels required when called:   10
 12426 ;; This function calls:
 12427 ;;		_lcdInst
 12428 ;;		_printf
 12429 ;;		_readADC
 12430 ;;		_readMAG
 12431 ;; This function is called by:
 12432 ;;		_Test
 12433 ;; This function uses a non-reentrant model
 12434 ;;
 12435                           
 12436                           	psect	text41
 12437  0024F4                     __ptext41:
 12438                           	opt stack 0
 12439  0024F4                     _sensorTest:
 12440                           	opt stack 19
 12441                           
 12442                           ;Test.c: 124: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12443                           
 12444                           ; BSR set to: 0
 12445                           ;incstack = 0
 12446  0024F4  0E01               	movlw	1
 12447  0024F6  ECAF  F02F         	call	_lcdInst
 12448  0024FA  0E68               	movlw	104
 12449  0024FC  0100               	movlb	0	; () banked
 12450  0024FE  6FAB               	movwf	??_sensorTest& (0+255),b
 12451  002500  0EE4               	movlw	228
 12452  002502                     u11217:
 12453  002502  2EE8               	decfsz	wreg,f,c
 12454  002504  D7FE               	bra	u11217
 12455  002506  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12456  002508  D7FC               	bra	u11217
 12457  00250A  F000               	nop	
 12458  00250C  0E80               	movlw	128
 12459  00250E  ECAF  F02F         	call	_lcdInst
 12460                           
 12461                           ;Test.c: 125: printf("SENSORS");
 12462  002512  0EAD               	movlw	low STR_77
 12463  002514  0100               	movlb	0	; () banked
 12464  002516  6F8E               	movwf	printf@f& (0+255),b
 12465  002518  0EFF               	movlw	high STR_77
 12466  00251A  0100               	movlb	0	; () banked
 12467  00251C  6F8F               	movwf	(printf@f+1)& (0+255),b
 12468  00251E  EC67  F00E         	call	_printf	;wreg free
 12469                           
 12470                           ;Test.c: 126: lcdInst(0b11000000);;
 12471  002522  0EC0               	movlw	192
 12472  002524  ECAF  F02F         	call	_lcdInst
 12473                           
 12474                           ;Test.c: 127: printf("PUSH TO START");
 12475  002528  0E3A               	movlw	low STR_71
 12476  00252A  0100               	movlb	0	; () banked
 12477  00252C  6F8E               	movwf	printf@f& (0+255),b
 12478  00252E  0EFF               	movlw	high STR_71
 12479  002530  0100               	movlb	0	; () banked
 12480  002532  6F8F               	movwf	(printf@f+1)& (0+255),b
 12481  002534  EC67  F00E         	call	_printf	;wreg free
 12482                           
 12483                           ;Test.c: 128: _delay((unsigned long)((100)*(32000000/4000.0)));
 12484  002538  0E05               	movlw	5
 12485  00253A  0100               	movlb	0	; () banked
 12486  00253C  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 12487  00253E  0E0F               	movlw	15
 12488  002540  0100               	movlb	0	; () banked
 12489  002542  6FAB               	movwf	??_sensorTest& (0+255),b
 12490  002544  0EF1               	movlw	241
 12491  002546                     u11227:
 12492  002546  2EE8               	decfsz	wreg,f,c
 12493  002548  D7FE               	bra	u11227
 12494  00254A  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12495  00254C  D7FC               	bra	u11227
 12496  00254E  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 12497  002550  D7FA               	bra	u11227
 12498  002552                     l1297:
 12499  002552  A281               	btfss	3969,1,c	;volatile
 12500  002554  D7FE               	goto	l1297
 12501  002556                     l1300:
 12502  002556  B281               	btfsc	3969,1,c	;volatile
 12503  002558  D7FE               	goto	l1300
 12504                           
 12505                           ;Test.c: 131: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12506  00255A  0E01               	movlw	1
 12507  00255C  ECAF  F02F         	call	_lcdInst
 12508  002560  0E68               	movlw	104
 12509  002562  0100               	movlb	0	; () banked
 12510  002564  6FAB               	movwf	??_sensorTest& (0+255),b
 12511  002566  0EE4               	movlw	228
 12512  002568                     u11237:
 12513  002568  2EE8               	decfsz	wreg,f,c
 12514  00256A  D7FE               	bra	u11237
 12515  00256C  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12516  00256E  D7FC               	bra	u11237
 12517  002570  F000               	nop	
 12518  002572  0E80               	movlw	128
 12519  002574  ECAF  F02F         	call	_lcdInst
 12520                           
 12521                           ;Test.c: 136: LATCbits.LATC5 = 1;
 12522  002578  8A8B               	bsf	3979,5,c	;volatile
 12523                           
 12524                           ;Test.c: 138: while(PORTBbits.RB1 == 0){
 12525  00257A  D05C               	goto	l8488
 12526  00257C                     l8470:
 12527                           
 12528                           ;Test.c: 139: readADC(0);
 12529  00257C  0E00               	movlw	0
 12530  00257E  EC9A  F02E         	call	_readADC
 12531                           
 12532                           ;Test.c: 140: int res = ADRESH<<8 | ADRESL;
 12533  002582  50C3               	movf	4035,w,c	;volatile
 12534  002584  CFC4 F0AB          	movff	4036,??_sensorTest	;volatile
 12535  002588  0100               	movlb	0	; () banked
 12536  00258A  6BAC               	clrf	(??_sensorTest+1)& (0+255),b
 12537  00258C  C0AB  F0AC         	movff	??_sensorTest,??_sensorTest+1
 12538  002590  0100               	movlb	0	; () banked
 12539  002592  6BAB               	clrf	??_sensorTest& (0+255),b
 12540  002594  0100               	movlb	0	; () banked
 12541  002596  11AB               	iorwf	??_sensorTest& (0+255),w,b
 12542  002598  0100               	movlb	0	; () banked
 12543  00259A  6FAD               	movwf	sensorTest@res& (0+255),b
 12544  00259C  0100               	movlb	0	; () banked
 12545  00259E  51AC               	movf	(??_sensorTest+1)& (0+255),w,b
 12546  0025A0  0100               	movlb	0	; () banked
 12547  0025A2  6FAE               	movwf	(sensorTest@res+1)& (0+255),b
 12548                           
 12549                           ; BSR set to: 0
 12550                           ;Test.c: 141: IR_signal = (res > 800) ? 1 : 0;
 12551  0025A4  0100               	movlb	0	; () banked
 12552  0025A6  BFAE               	btfsc	(sensorTest@res+1)& (0+255),7,b
 12553  0025A8  D00A               	goto	u7620
 12554  0025AA  0E21               	movlw	33
 12555  0025AC  0100               	movlb	0	; () banked
 12556  0025AE  5DAD               	subwf	sensorTest@res& (0+255),w,b
 12557  0025B0  0E03               	movlw	3
 12558  0025B2  0100               	movlb	0	; () banked
 12559  0025B4  59AE               	subwfb	(sensorTest@res+1)& (0+255),w,b
 12560  0025B6  A0D8               	btfss	status,0,c
 12561  0025B8  D002               	goto	u7620
 12562  0025BA  0E01               	movlw	1
 12563  0025BC  D001               	goto	u7630
 12564  0025BE                     u7620:
 12565  0025BE  0E00               	movlw	0
 12566  0025C0                     u7630:
 12567  0025C0  0100               	movlb	0	; () banked
 12568  0025C2  6FE0               	movwf	_IR_signal& (0+255),b
 12569  0025C4  6BE1               	clrf	(_IR_signal+1)& (0+255),b
 12570                           
 12571                           ;Test.c: 143: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12572  0025C6  0E01               	movlw	1
 12573  0025C8  ECAF  F02F         	call	_lcdInst
 12574  0025CC  0E68               	movlw	104
 12575  0025CE  0100               	movlb	0	; () banked
 12576  0025D0  6FAB               	movwf	??_sensorTest& (0+255),b
 12577  0025D2  0EE4               	movlw	228
 12578  0025D4                     u11247:
 12579  0025D4  2EE8               	decfsz	wreg,f,c
 12580  0025D6  D7FE               	bra	u11247
 12581  0025D8  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12582  0025DA  D7FC               	bra	u11247
 12583  0025DC  F000               	nop	
 12584  0025DE  0E80               	movlw	128
 12585  0025E0  ECAF  F02F         	call	_lcdInst
 12586                           
 12587                           ;Test.c: 144: printf("IR (PUSHER): %d  ", IR_signal);
 12588  0025E4  0E25               	movlw	low STR_79
 12589  0025E6  0100               	movlb	0	; () banked
 12590  0025E8  6F8E               	movwf	printf@f& (0+255),b
 12591  0025EA  0EFB               	movlw	high STR_79
 12592  0025EC  0100               	movlb	0	; () banked
 12593  0025EE  6F8F               	movwf	(printf@f+1)& (0+255),b
 12594  0025F0  C0E0  F090         	movff	_IR_signal,?_printf+2
 12595  0025F4  C0E1  F091         	movff	_IR_signal+1,?_printf+3
 12596  0025F8  EC67  F00E         	call	_printf	;wreg free
 12597                           
 12598                           ;Test.c: 145: lcdInst(0b11000000);;
 12599  0025FC  0EC0               	movlw	192
 12600  0025FE  ECAF  F02F         	call	_lcdInst
 12601                           
 12602                           ;Test.c: 146: printf("%d", res);
 12603  002602  0E25               	movlw	low (STR_27+14)
 12604  002604  0100               	movlb	0	; () banked
 12605  002606  6F8E               	movwf	printf@f& (0+255),b
 12606  002608  0EFE               	movlw	high (STR_27+14)
 12607  00260A  0100               	movlb	0	; () banked
 12608  00260C  6F8F               	movwf	(printf@f+1)& (0+255),b
 12609  00260E  C0AD  F090         	movff	sensorTest@res,?_printf+2
 12610  002612  C0AE  F091         	movff	sensorTest@res+1,?_printf+3
 12611  002616  EC67  F00E         	call	_printf	;wreg free
 12612                           
 12613                           ;Test.c: 147: _delay((unsigned long)((100)*(32000000/4000.0)));
 12614  00261A  0E05               	movlw	5
 12615  00261C  0100               	movlb	0	; () banked
 12616  00261E  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 12617  002620  0E0F               	movlw	15
 12618  002622  0100               	movlb	0	; () banked
 12619  002624  6FAB               	movwf	??_sensorTest& (0+255),b
 12620  002626  0EF1               	movlw	241
 12621  002628                     u11257:
 12622  002628  2EE8               	decfsz	wreg,f,c
 12623  00262A  D7FE               	bra	u11257
 12624  00262C  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12625  00262E  D7FC               	bra	u11257
 12626  002630  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 12627  002632  D7FA               	bra	u11257
 12628  002634                     l8488:
 12629  002634  A281               	btfss	3969,1,c	;volatile
 12630  002636  D7A2               	goto	l8470
 12631                           
 12632                           ;Test.c: 148: }
 12633                           ;Test.c: 149: LATCbits.LATC5 = 0;
 12634  002638  9A8B               	bcf	3979,5,c	;volatile
 12635  00263A                     l1306:
 12636  00263A  B281               	btfsc	3969,1,c	;volatile
 12637  00263C  D7FE               	goto	l1306
 12638                           
 12639                           ;Test.c: 155: LATCbits.LATC6 = 1;
 12640  00263E  8C8B               	bsf	3979,6,c	;volatile
 12641                           
 12642                           ;Test.c: 157: while(PORTBbits.RB1 == 0){
 12643  002640  D05C               	goto	l8508
 12644  002642                     l8490:
 12645                           
 12646                           ;Test.c: 158: readADC(3);
 12647  002642  0E03               	movlw	3
 12648  002644  EC9A  F02E         	call	_readADC
 12649                           
 12650                           ;Test.c: 159: int res = ADRESH<<8 | ADRESL;
 12651  002648  50C3               	movf	4035,w,c	;volatile
 12652  00264A  CFC4 F0AB          	movff	4036,??_sensorTest	;volatile
 12653  00264E  0100               	movlb	0	; () banked
 12654  002650  6BAC               	clrf	(??_sensorTest+1)& (0+255),b
 12655  002652  C0AB  F0AC         	movff	??_sensorTest,??_sensorTest+1
 12656  002656  0100               	movlb	0	; () banked
 12657  002658  6BAB               	clrf	??_sensorTest& (0+255),b
 12658  00265A  0100               	movlb	0	; () banked
 12659  00265C  11AB               	iorwf	??_sensorTest& (0+255),w,b
 12660  00265E  0100               	movlb	0	; () banked
 12661  002660  6FAF               	movwf	sensorTest@res_1724& (0+255),b
 12662  002662  0100               	movlb	0	; () banked
 12663  002664  51AC               	movf	(??_sensorTest+1)& (0+255),w,b
 12664  002666  0100               	movlb	0	; () banked
 12665  002668  6FB0               	movwf	(sensorTest@res_1724+1)& (0+255),b
 12666                           
 12667                           ; BSR set to: 0
 12668                           ;Test.c: 160: IR_signal = (res > 800) ? 1 : 0;
 12669  00266A  0100               	movlb	0	; () banked
 12670  00266C  BFB0               	btfsc	(sensorTest@res_1724+1)& (0+255),7,b
 12671  00266E  D00A               	goto	u7660
 12672  002670  0E21               	movlw	33
 12673  002672  0100               	movlb	0	; () banked
 12674  002674  5DAF               	subwf	sensorTest@res_1724& (0+255),w,b
 12675  002676  0E03               	movlw	3
 12676  002678  0100               	movlb	0	; () banked
 12677  00267A  59B0               	subwfb	(sensorTest@res_1724+1)& (0+255),w,b
 12678  00267C  A0D8               	btfss	status,0,c
 12679  00267E  D002               	goto	u7660
 12680  002680  0E01               	movlw	1
 12681  002682  D001               	goto	u7670
 12682  002684                     u7660:
 12683  002684  0E00               	movlw	0
 12684  002686                     u7670:
 12685  002686  0100               	movlb	0	; () banked
 12686  002688  6FE0               	movwf	_IR_signal& (0+255),b
 12687  00268A  6BE1               	clrf	(_IR_signal+1)& (0+255),b
 12688                           
 12689                           ;Test.c: 162: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12690  00268C  0E01               	movlw	1
 12691  00268E  ECAF  F02F         	call	_lcdInst
 12692  002692  0E68               	movlw	104
 12693  002694  0100               	movlb	0	; () banked
 12694  002696  6FAB               	movwf	??_sensorTest& (0+255),b
 12695  002698  0EE4               	movlw	228
 12696  00269A                     u11267:
 12697  00269A  2EE8               	decfsz	wreg,f,c
 12698  00269C  D7FE               	bra	u11267
 12699  00269E  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12700  0026A0  D7FC               	bra	u11267
 12701  0026A2  F000               	nop	
 12702  0026A4  0E80               	movlw	128
 12703  0026A6  ECAF  F02F         	call	_lcdInst
 12704                           
 12705                           ;Test.c: 163: printf("IR (REFLEC): %d  ", IR_signal);
 12706  0026AA  0E13               	movlw	low STR_81
 12707  0026AC  0100               	movlb	0	; () banked
 12708  0026AE  6F8E               	movwf	printf@f& (0+255),b
 12709  0026B0  0EFB               	movlw	high STR_81
 12710  0026B2  0100               	movlb	0	; () banked
 12711  0026B4  6F8F               	movwf	(printf@f+1)& (0+255),b
 12712  0026B6  C0E0  F090         	movff	_IR_signal,?_printf+2
 12713  0026BA  C0E1  F091         	movff	_IR_signal+1,?_printf+3
 12714  0026BE  EC67  F00E         	call	_printf	;wreg free
 12715                           
 12716                           ;Test.c: 164: lcdInst(0b11000000);;
 12717  0026C2  0EC0               	movlw	192
 12718  0026C4  ECAF  F02F         	call	_lcdInst
 12719                           
 12720                           ;Test.c: 165: printf("%d", res);
 12721  0026C8  0E25               	movlw	low (STR_27+14)
 12722  0026CA  0100               	movlb	0	; () banked
 12723  0026CC  6F8E               	movwf	printf@f& (0+255),b
 12724  0026CE  0EFE               	movlw	high (STR_27+14)
 12725  0026D0  0100               	movlb	0	; () banked
 12726  0026D2  6F8F               	movwf	(printf@f+1)& (0+255),b
 12727  0026D4  C0AF  F090         	movff	sensorTest@res_1724,?_printf+2
 12728  0026D8  C0B0  F091         	movff	sensorTest@res_1724+1,?_printf+3
 12729  0026DC  EC67  F00E         	call	_printf	;wreg free
 12730                           
 12731                           ;Test.c: 166: _delay((unsigned long)((100)*(32000000/4000.0)));
 12732  0026E0  0E05               	movlw	5
 12733  0026E2  0100               	movlb	0	; () banked
 12734  0026E4  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 12735  0026E6  0E0F               	movlw	15
 12736  0026E8  0100               	movlb	0	; () banked
 12737  0026EA  6FAB               	movwf	??_sensorTest& (0+255),b
 12738  0026EC  0EF1               	movlw	241
 12739  0026EE                     u11277:
 12740  0026EE  2EE8               	decfsz	wreg,f,c
 12741  0026F0  D7FE               	bra	u11277
 12742  0026F2  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12743  0026F4  D7FC               	bra	u11277
 12744  0026F6  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 12745  0026F8  D7FA               	bra	u11277
 12746  0026FA                     l8508:
 12747  0026FA  A281               	btfss	3969,1,c	;volatile
 12748  0026FC  D7A2               	goto	l8490
 12749                           
 12750                           ;Test.c: 167: }
 12751                           ;Test.c: 168: LATCbits.LATC6 = 0;
 12752  0026FE  9C8B               	bcf	3979,6,c	;volatile
 12753  002700                     l1312:
 12754  002700  B281               	btfsc	3969,1,c	;volatile
 12755  002702  D7FE               	goto	l1312
 12756                           
 12757                           ;Test.c: 178: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12758  002704  0E01               	movlw	1
 12759  002706  ECAF  F02F         	call	_lcdInst
 12760  00270A  0E68               	movlw	104
 12761  00270C  0100               	movlb	0	; () banked
 12762  00270E  6FAB               	movwf	??_sensorTest& (0+255),b
 12763  002710  0EE4               	movlw	228
 12764  002712                     u11287:
 12765  002712  2EE8               	decfsz	wreg,f,c
 12766  002714  D7FE               	bra	u11287
 12767  002716  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12768  002718  D7FC               	bra	u11287
 12769  00271A  F000               	nop	
 12770  00271C  0E80               	movlw	128
 12771  00271E  ECAF  F02F         	call	_lcdInst
 12772                           
 12773                           ;Test.c: 179: printf("TST: MAGNETISM");
 12774  002722  0EB6               	movlw	low STR_83
 12775  002724  0100               	movlb	0	; () banked
 12776  002726  6F8E               	movwf	printf@f& (0+255),b
 12777  002728  0EFE               	movlw	high STR_83
 12778  00272A  0100               	movlb	0	; () banked
 12779  00272C  6F8F               	movwf	(printf@f+1)& (0+255),b
 12780  00272E  EC67  F00E         	call	_printf	;wreg free
 12781                           
 12782                           ;Test.c: 180: _delay((unsigned long)((100)*(32000000/4000.0)));
 12783  002732  0E05               	movlw	5
 12784  002734  0100               	movlb	0	; () banked
 12785  002736  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 12786  002738  0E0F               	movlw	15
 12787  00273A  0100               	movlb	0	; () banked
 12788  00273C  6FAB               	movwf	??_sensorTest& (0+255),b
 12789  00273E  0EF1               	movlw	241
 12790  002740                     u11297:
 12791  002740  2EE8               	decfsz	wreg,f,c
 12792  002742  D7FE               	bra	u11297
 12793  002744  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12794  002746  D7FC               	bra	u11297
 12795  002748  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 12796  00274A  D7FA               	bra	u11297
 12797                           
 12798                           ;Test.c: 181: while(PORTBbits.RB1 == 0){
 12799  00274C  D021               	goto	l8526
 12800  00274E                     l8520:
 12801                           
 12802                           ;Test.c: 182: readMAG();
 12803  00274E  EC1D  F02C         	call	_readMAG	;wreg free
 12804                           
 12805                           ;Test.c: 183: lcdInst(0b10000000);;
 12806  002752  0E80               	movlw	128
 12807  002754  ECAF  F02F         	call	_lcdInst
 12808                           
 12809                           ;Test.c: 184: lcdInst(0b11000000);;
 12810  002758  0EC0               	movlw	192
 12811  00275A  ECAF  F02F         	call	_lcdInst
 12812                           
 12813                           ;Test.c: 185: printf("MAG_signal: %d ", MAG_signal);
 12814  00275E  0E39               	movlw	low STR_84
 12815  002760  0100               	movlb	0	; () banked
 12816  002762  6F8E               	movwf	printf@f& (0+255),b
 12817  002764  0EFE               	movlw	high STR_84
 12818  002766  0100               	movlb	0	; () banked
 12819  002768  6F8F               	movwf	(printf@f+1)& (0+255),b
 12820  00276A  C0E2  F090         	movff	_MAG_signal,?_printf+2
 12821  00276E  C0E3  F091         	movff	_MAG_signal+1,?_printf+3
 12822  002772  EC67  F00E         	call	_printf	;wreg free
 12823                           
 12824                           ;Test.c: 186: _delay((unsigned long)((100)*(32000000/4000.0)));
 12825  002776  0E05               	movlw	5
 12826  002778  0100               	movlb	0	; () banked
 12827  00277A  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 12828  00277C  0E0F               	movlw	15
 12829  00277E  0100               	movlb	0	; () banked
 12830  002780  6FAB               	movwf	??_sensorTest& (0+255),b
 12831  002782  0EF1               	movlw	241
 12832  002784                     u11307:
 12833  002784  2EE8               	decfsz	wreg,f,c
 12834  002786  D7FE               	bra	u11307
 12835  002788  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12836  00278A  D7FC               	bra	u11307
 12837  00278C  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 12838  00278E  D7FA               	bra	u11307
 12839  002790                     l8526:
 12840  002790  A281               	btfss	3969,1,c	;volatile
 12841  002792  D7DD               	goto	l8520
 12842  002794                     l1318:
 12843  002794  B281               	btfsc	3969,1,c	;volatile
 12844  002796  D7FE               	goto	l1318
 12845                           
 12846                           ;Test.c: 193: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12847  002798  0E01               	movlw	1
 12848  00279A  ECAF  F02F         	call	_lcdInst
 12849  00279E  0E68               	movlw	104
 12850  0027A0  0100               	movlb	0	; () banked
 12851  0027A2  6FAB               	movwf	??_sensorTest& (0+255),b
 12852  0027A4  0EE4               	movlw	228
 12853  0027A6                     u11317:
 12854  0027A6  2EE8               	decfsz	wreg,f,c
 12855  0027A8  D7FE               	bra	u11317
 12856  0027AA  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12857  0027AC  D7FC               	bra	u11317
 12858  0027AE  F000               	nop	
 12859  0027B0  0E80               	movlw	128
 12860  0027B2  ECAF  F02F         	call	_lcdInst
 12861                           
 12862                           ;Test.c: 194: printf("TST: COND");
 12863  0027B6  0E86               	movlw	low STR_85
 12864  0027B8  0100               	movlb	0	; () banked
 12865  0027BA  6F8E               	movwf	printf@f& (0+255),b
 12866  0027BC  0EFF               	movlw	high STR_85
 12867  0027BE  0100               	movlb	0	; () banked
 12868  0027C0  6F8F               	movwf	(printf@f+1)& (0+255),b
 12869  0027C2  EC67  F00E         	call	_printf	;wreg free
 12870                           
 12871                           ;Test.c: 195: _delay((unsigned long)((100)*(32000000/4000.0)));
 12872  0027C6  0E05               	movlw	5
 12873  0027C8  0100               	movlb	0	; () banked
 12874  0027CA  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 12875  0027CC  0E0F               	movlw	15
 12876  0027CE  0100               	movlb	0	; () banked
 12877  0027D0  6FAB               	movwf	??_sensorTest& (0+255),b
 12878  0027D2  0EF1               	movlw	241
 12879  0027D4                     u11327:
 12880  0027D4  2EE8               	decfsz	wreg,f,c
 12881  0027D6  D7FE               	bra	u11327
 12882  0027D8  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12883  0027DA  D7FC               	bra	u11327
 12884  0027DC  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 12885  0027DE  D7FA               	bra	u11327
 12886  0027E0                     l8538:
 12887                           
 12888                           ;Test.c: 197: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12889  0027E0  0E01               	movlw	1
 12890  0027E2  ECAF  F02F         	call	_lcdInst
 12891  0027E6  0E68               	movlw	104
 12892  0027E8  0100               	movlb	0	; () banked
 12893  0027EA  6FAB               	movwf	??_sensorTest& (0+255),b
 12894  0027EC  0EE4               	movlw	228
 12895  0027EE                     u11337:
 12896  0027EE  2EE8               	decfsz	wreg,f,c
 12897  0027F0  D7FE               	bra	u11337
 12898  0027F2  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12899  0027F4  D7FC               	bra	u11337
 12900  0027F6  F000               	nop	
 12901  0027F8  0E80               	movlw	128
 12902  0027FA  ECAF  F02F         	call	_lcdInst
 12903                           
 12904                           ;Test.c: 198: printf("TST: COND");
 12905  0027FE  0E86               	movlw	low STR_85
 12906  002800  0100               	movlb	0	; () banked
 12907  002802  6F8E               	movwf	printf@f& (0+255),b
 12908  002804  0EFF               	movlw	high STR_85
 12909  002806  0100               	movlb	0	; () banked
 12910  002808  6F8F               	movwf	(printf@f+1)& (0+255),b
 12911  00280A  EC67  F00E         	call	_printf	;wreg free
 12912                           
 12913                           ;Test.c: 199: while(PORTBbits.RB1 == 0){
 12914  00280E  D01B               	goto	l8550
 12915  002810                     l8546:
 12916                           
 12917                           ;Test.c: 203: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12918  002810  0E80               	movlw	128
 12919  002812  ECAF  F02F         	call	_lcdInst
 12920  002816  0EC0               	movlw	192
 12921  002818  ECAF  F02F         	call	_lcdInst
 12922                           
 12923                           ;Test.c: 204: printf("COND: %d", PORTAbits.RA2);
 12924  00281C  0EA4               	movlw	low STR_87
 12925  00281E  0100               	movlb	0	; () banked
 12926  002820  6F8E               	movwf	printf@f& (0+255),b
 12927  002822  0EFF               	movlw	high STR_87
 12928  002824  0100               	movlb	0	; () banked
 12929  002826  6F8F               	movwf	(printf@f+1)& (0+255),b
 12930  002828  A480               	btfss	3968,2,c	;volatile
 12931  00282A  D004               	goto	u7720
 12932  00282C  0100               	movlb	0	; () banked
 12933  00282E  6BAB               	clrf	??_sensorTest& (0+255),b
 12934  002830  2BAB               	incf	??_sensorTest& (0+255),f,b
 12935  002832  D002               	goto	u7728
 12936  002834                     u7720:
 12937  002834  0100               	movlb	0	; () banked
 12938  002836  6BAB               	clrf	??_sensorTest& (0+255),b
 12939  002838                     u7728:
 12940  002838  0100               	movlb	0	; () banked
 12941  00283A  51AB               	movf	??_sensorTest& (0+255),w,b
 12942  00283C  0100               	movlb	0	; () banked
 12943  00283E  6F90               	movwf	(?_printf+2)& (0+255),b
 12944  002840  6B91               	clrf	(?_printf+3)& (0+255),b
 12945  002842  EC67  F00E         	call	_printf	;wreg free
 12946  002846                     l8550:
 12947  002846  A281               	btfss	3969,1,c	;volatile
 12948  002848  D7E3               	goto	l8546
 12949                           
 12950                           ;Test.c: 205: }
 12951                           ;Test.c: 206: if(PORTB >> 4 == 0b1111){
 12952  00284A  3881               	swapf	3969,w,c	;volatile
 12953  00284C  0B0F               	andlw	15
 12954  00284E  0A0F               	xorlw	15
 12955  002850  B4D8               	btfsc	status,2,c
 12956  002852  0012               	return	
 12957                           
 12958                           ;Test.c: 209: else{
 12959                           ;Test.c: 210: LATCbits.LATC7 = 1;
 12960                           
 12961                           ;Test.c: 208: }
 12962                           
 12963                           ;Test.c: 207: break;
 12964  002854  8E8B               	bsf	3979,7,c	;volatile
 12965                           
 12966                           ;Test.c: 211: while(PORTBbits.RB1 == 1){
 12967  002856  D01B               	goto	l8562
 12968  002858                     l8558:
 12969                           
 12970                           ;Test.c: 213: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12971  002858  0E80               	movlw	128
 12972  00285A  ECAF  F02F         	call	_lcdInst
 12973  00285E  0EC0               	movlw	192
 12974  002860  ECAF  F02F         	call	_lcdInst
 12975                           
 12976                           ;Test.c: 214: printf("COND: %d", PORTAbits.RA2);
 12977  002864  0EA4               	movlw	low STR_87
 12978  002866  0100               	movlb	0	; () banked
 12979  002868  6F8E               	movwf	printf@f& (0+255),b
 12980  00286A  0EFF               	movlw	high STR_87
 12981  00286C  0100               	movlb	0	; () banked
 12982  00286E  6F8F               	movwf	(printf@f+1)& (0+255),b
 12983  002870  A480               	btfss	3968,2,c	;volatile
 12984  002872  D004               	goto	u7750
 12985  002874  0100               	movlb	0	; () banked
 12986  002876  6BAB               	clrf	??_sensorTest& (0+255),b
 12987  002878  2BAB               	incf	??_sensorTest& (0+255),f,b
 12988  00287A  D002               	goto	u7758
 12989  00287C                     u7750:
 12990  00287C  0100               	movlb	0	; () banked
 12991  00287E  6BAB               	clrf	??_sensorTest& (0+255),b
 12992  002880                     u7758:
 12993  002880  0100               	movlb	0	; () banked
 12994  002882  51AB               	movf	??_sensorTest& (0+255),w,b
 12995  002884  0100               	movlb	0	; () banked
 12996  002886  6F90               	movwf	(?_printf+2)& (0+255),b
 12997  002888  6B91               	clrf	(?_printf+3)& (0+255),b
 12998  00288A  EC67  F00E         	call	_printf	;wreg free
 12999  00288E                     l8562:
 13000  00288E  B281               	btfsc	3969,1,c	;volatile
 13001  002890  D7E3               	goto	l8558
 13002                           
 13003                           ;Test.c: 215: }
 13004                           ;Test.c: 216: LATCbits.LATC7 = !1;
 13005  002892  9E8B               	bcf	3979,7,c	;volatile
 13006  002894  D7A5               	goto	l8538
 13007  002896                     __end_of_sensorTest:
 13008                           	opt stack 0
 13009                           tblptru	equ	0xFF8
 13010                           tblptrh	equ	0xFF7
 13011                           tblptrl	equ	0xFF6
 13012                           tablat	equ	0xFF5
 13013                           prodh	equ	0xFF4
 13014                           prodl	equ	0xFF3
 13015                           intcon	equ	0xFF2
 13016                           intcon2	equ	0xFF1
 13017                           intcon3	equ	0xFF0
 13018                           postinc0	equ	0xFEE
 13019                           wreg	equ	0xFE8
 13020                           postdec1	equ	0xFE5
 13021                           fsr1l	equ	0xFE1
 13022                           indf2	equ	0xFDF
 13023                           postinc2	equ	0xFDE
 13024                           postdec2	equ	0xFDD
 13025                           fsr2h	equ	0xFDA
 13026                           fsr2l	equ	0xFD9
 13027                           status	equ	0xFD8
 13028                           
 13029 ;; *************** function _readMAG *****************
 13030 ;; Defined at:
 13031 ;;		line 38 in file "ADCFunctionality.c"
 13032 ;; Parameters:    Size  Location     Type
 13033 ;;		None
 13034 ;; Auto vars:     Size  Location     Type
 13035 ;;  res             2    4[BANK0 ] int 
 13036 ;; Return value:  Size  Location     Type
 13037 ;;                  1    wreg      void 
 13038 ;; Registers used:
 13039 ;;		wreg, status,2, status,0, cstack
 13040 ;; Tracked objects:
 13041 ;;		On entry : 0/0
 13042 ;;		On exit  : 0/0
 13043 ;;		Unchanged: 0/0
 13044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13045 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13046 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13047 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13048 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13049 ;;Total ram usage:        4 bytes
 13050 ;; Hardware stack levels used:    1
 13051 ;; Hardware stack levels required when called:    8
 13052 ;; This function calls:
 13053 ;;		_readADC
 13054 ;; This function is called by:
 13055 ;;		_getMAG
 13056 ;;		_sensorTest
 13057 ;; This function uses a non-reentrant model
 13058 ;;
 13059                           
 13060                           	psect	text42
 13061  00583A                     __ptext42:
 13062                           	opt stack 0
 13063  00583A                     _readMAG:
 13064                           	opt stack 19
 13065                           
 13066                           ;ADCFunctionality.c: 39: readADC(1);
 13067                           
 13068                           ;incstack = 0
 13069  00583A  0E01               	movlw	1
 13070  00583C  EC9A  F02E         	call	_readADC
 13071                           
 13072                           ;ADCFunctionality.c: 40: int res = ADRESH<<8 | ADRESL;
 13073  005840  50C3               	movf	4035,w,c	;volatile
 13074  005842  CFC4 F082          	movff	4036,??_readMAG	;volatile
 13075  005846  0100               	movlb	0	; () banked
 13076  005848  6B83               	clrf	(??_readMAG+1)& (0+255),b
 13077  00584A  C082  F083         	movff	??_readMAG,??_readMAG+1
 13078  00584E  0100               	movlb	0	; () banked
 13079  005850  6B82               	clrf	??_readMAG& (0+255),b
 13080  005852  0100               	movlb	0	; () banked
 13081  005854  1182               	iorwf	??_readMAG& (0+255),w,b
 13082  005856  0100               	movlb	0	; () banked
 13083  005858  6F84               	movwf	readMAG@res& (0+255),b
 13084  00585A  0100               	movlb	0	; () banked
 13085  00585C  5183               	movf	(??_readMAG+1)& (0+255),w,b
 13086  00585E  0100               	movlb	0	; () banked
 13087  005860  6F85               	movwf	(readMAG@res+1)& (0+255),b
 13088                           
 13089                           ; BSR set to: 0
 13090                           ;ADCFunctionality.c: 41: MAG_signal = (res < 150) ? 1 : 0;
 13091  005862  0100               	movlb	0	; () banked
 13092  005864  BF85               	btfsc	(readMAG@res+1)& (0+255),7,b
 13093  005866  D008               	goto	u5571
 13094  005868  0100               	movlb	0	; () banked
 13095  00586A  5185               	movf	(readMAG@res+1)& (0+255),w,b
 13096  00586C  E107               	bnz	u5570
 13097  00586E  0E96               	movlw	150
 13098  005870  0100               	movlb	0	; () banked
 13099  005872  5D84               	subwf	readMAG@res& (0+255),w,b
 13100  005874  B0D8               	btfsc	status,0,c
 13101  005876  D002               	goto	u5570
 13102  005878                     u5571:
 13103  005878  0E01               	movlw	1
 13104  00587A  D001               	goto	u5580
 13105  00587C                     u5570:
 13106  00587C  0E00               	movlw	0
 13107  00587E                     u5580:
 13108  00587E  0100               	movlb	0	; () banked
 13109  005880  6FE2               	movwf	_MAG_signal& (0+255),b
 13110  005882  6BE3               	clrf	(_MAG_signal+1)& (0+255),b
 13111                           
 13112                           ; BSR set to: 0
 13113  005884  0012               	return		;funcret
 13114  005886                     __end_of_readMAG:
 13115                           	opt stack 0
 13116                           tblptru	equ	0xFF8
 13117                           tblptrh	equ	0xFF7
 13118                           tblptrl	equ	0xFF6
 13119                           tablat	equ	0xFF5
 13120                           prodh	equ	0xFF4
 13121                           prodl	equ	0xFF3
 13122                           intcon	equ	0xFF2
 13123                           intcon2	equ	0xFF1
 13124                           intcon3	equ	0xFF0
 13125                           postinc0	equ	0xFEE
 13126                           wreg	equ	0xFE8
 13127                           postdec1	equ	0xFE5
 13128                           fsr1l	equ	0xFE1
 13129                           indf2	equ	0xFDF
 13130                           postinc2	equ	0xFDE
 13131                           postdec2	equ	0xFDD
 13132                           fsr2h	equ	0xFDA
 13133                           fsr2l	equ	0xFD9
 13134                           status	equ	0xFD8
 13135                           
 13136 ;; *************** function _arm *****************
 13137 ;; Defined at:
 13138 ;;		line 644 in file "Test.c"
 13139 ;; Parameters:    Size  Location     Type
 13140 ;;		None
 13141 ;; Auto vars:     Size  Location     Type
 13142 ;;  on              2   44[BANK0 ] int 
 13143 ;; Return value:  Size  Location     Type
 13144 ;;                  1    wreg      void 
 13145 ;; Registers used:
 13146 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13147 ;; Tracked objects:
 13148 ;;		On entry : 0/0
 13149 ;;		On exit  : 0/0
 13150 ;;		Unchanged: 0/0
 13151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13152 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13153 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13154 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13155 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13156 ;;Total ram usage:        3 bytes
 13157 ;; Hardware stack levels used:    1
 13158 ;; Hardware stack levels required when called:   10
 13159 ;; This function calls:
 13160 ;;		_lcdInst
 13161 ;;		_printf
 13162 ;;		_stopSignals
 13163 ;; This function is called by:
 13164 ;;		_Test
 13165 ;; This function uses a non-reentrant model
 13166 ;;
 13167                           
 13168                           	psect	text43
 13169  004600                     __ptext43:
 13170                           	opt stack 0
 13171  004600                     _arm:
 13172                           	opt stack 19
 13173                           
 13174                           ;Test.c: 645: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13175                           
 13176                           ; BSR set to: 0
 13177                           ;incstack = 0
 13178  004600  0E01               	movlw	1
 13179  004602  ECAF  F02F         	call	_lcdInst
 13180  004606  0E68               	movlw	104
 13181  004608  0100               	movlb	0	; () banked
 13182  00460A  6FAB               	movwf	??_arm& (0+255),b
 13183  00460C  0EE4               	movlw	228
 13184  00460E                     u11347:
 13185  00460E  2EE8               	decfsz	wreg,f,c
 13186  004610  D7FE               	bra	u11347
 13187  004612  2FAB               	decfsz	??_arm& (0+255),f,b
 13188  004614  D7FC               	bra	u11347
 13189  004616  F000               	nop	
 13190  004618  0E80               	movlw	128
 13191  00461A  ECAF  F02F         	call	_lcdInst
 13192                           
 13193                           ;Test.c: 646: printf("D WILL RETURN   ");
 13194  00461E  0E08               	movlw	low STR_125
 13195  004620  0100               	movlb	0	; () banked
 13196  004622  6F8E               	movwf	printf@f& (0+255),b
 13197  004624  0EFC               	movlw	high STR_125
 13198  004626  0100               	movlb	0	; () banked
 13199  004628  6F8F               	movwf	(printf@f+1)& (0+255),b
 13200  00462A  EC67  F00E         	call	_printf	;wreg free
 13201                           
 13202                           ;Test.c: 647: lcdInst(0b11000000);;
 13203  00462E  0EC0               	movlw	192
 13204  004630  ECAF  F02F         	call	_lcdInst
 13205                           
 13206                           ;Test.c: 648: printf("ELSE TOGGLES ARM");
 13207  004634  0EB2               	movlw	low STR_126
 13208  004636  0100               	movlb	0	; () banked
 13209  004638  6F8E               	movwf	printf@f& (0+255),b
 13210  00463A  0EFC               	movlw	high STR_126
 13211  00463C  0100               	movlb	0	; () banked
 13212  00463E  6F8F               	movwf	(printf@f+1)& (0+255),b
 13213  004640  EC67  F00E         	call	_printf	;wreg free
 13214                           
 13215                           ;Test.c: 650: (INTCONbits.GIE = 1);
 13216  004644  8EF2               	bsf	intcon,7,c	;volatile
 13217                           
 13218                           ;Test.c: 651: machine_state = Sorting_state;
 13219  004646  0E01               	movlw	1
 13220  004648  0100               	movlb	0	; () banked
 13221  00464A  6FFC               	movwf	_machine_state& (0+255),b
 13222                           
 13223                           ; BSR set to: 0
 13224                           ;Test.c: 652: f_arm_position = 2;
 13225  00464C  0E00               	movlw	0
 13226  00464E  0100               	movlb	0	; () banked
 13227  004650  6FE9               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 13228  004652  0E02               	movlw	2
 13229  004654  6FE8               	movwf	_f_arm_position& (0+255),b	;volatile
 13230                           
 13231                           ; BSR set to: 0
 13232                           ;Test.c: 653: timer2_counter = 0;
 13233  004656  0E00               	movlw	0
 13234  004658  6E74               	movwf	_timer2_counter+1,c	;volatile
 13235  00465A  0E00               	movlw	0
 13236  00465C  6E73               	movwf	_timer2_counter,c	;volatile
 13237                           
 13238                           ; BSR set to: 0
 13239                           ;Test.c: 654: LATBbits.LATB3 = 1;
 13240  00465E  868A               	bsf	3978,3,c	;volatile
 13241                           
 13242                           ; BSR set to: 0
 13243                           ;Test.c: 655: TMR2ON = 1;
 13244  004660  84CA               	bsf	4042,2,c	;volatile
 13245                           
 13246                           ; BSR set to: 0
 13247                           ;Test.c: 656: was_low_2 = 0;
 13248  004662  0E00               	movlw	0
 13249  004664  6E7A               	movwf	_was_low_2+1,c	;volatile
 13250  004666  0E00               	movlw	0
 13251  004668  6E79               	movwf	_was_low_2,c	;volatile
 13252                           
 13253                           ; BSR set to: 0
 13254                           ;Test.c: 658: int on = 0;
 13255  00466A  0E00               	movlw	0
 13256  00466C  0100               	movlb	0	; () banked
 13257  00466E  6FAD               	movwf	(arm@on+1)& (0+255),b
 13258  004670  0E00               	movlw	0
 13259  004672  6FAC               	movwf	arm@on& (0+255),b
 13260  004674                     l9016:
 13261                           
 13262                           ;Test.c: 660: if(on){
 13263  004674  0100               	movlb	0	; () banked
 13264  004676  51AC               	movf	arm@on& (0+255),w,b
 13265  004678  0100               	movlb	0	; () banked
 13266  00467A  11AD               	iorwf	(arm@on+1)& (0+255),w,b
 13267  00467C  B4D8               	btfsc	status,2,c
 13268  00467E  D01C               	goto	l9028
 13269                           
 13270                           ; BSR set to: 0
 13271                           ;Test.c: 661: on = !on;
 13272  004680  0100               	movlb	0	; () banked
 13273  004682  51AC               	movf	arm@on& (0+255),w,b
 13274  004684  0100               	movlb	0	; () banked
 13275  004686  11AD               	iorwf	(arm@on+1)& (0+255),w,b
 13276  004688  A4D8               	btfss	status,2,c
 13277  00468A  D002               	goto	u8340
 13278  00468C  0E01               	movlw	1
 13279  00468E  D001               	goto	u8350
 13280  004690                     u8340:
 13281  004690  0E00               	movlw	0
 13282  004692                     u8350:
 13283  004692  0100               	movlb	0	; () banked
 13284  004694  6FAC               	movwf	arm@on& (0+255),b
 13285  004696  6BAD               	clrf	(arm@on+1)& (0+255),b
 13286                           
 13287                           ;Test.c: 662: while(PORTBbits.RB1 == 0){
 13288  004698  D005               	goto	l9022
 13289  00469A                     l9020:
 13290                           
 13291                           ; BSR set to: 0
 13292                           ;Test.c: 663: f_arm_position = 0;
 13293  00469A  0E00               	movlw	0
 13294  00469C  0100               	movlb	0	; () banked
 13295  00469E  6FE9               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 13296  0046A0  0E00               	movlw	0
 13297  0046A2  6FE8               	movwf	_f_arm_position& (0+255),b	;volatile
 13298  0046A4                     l9022:
 13299                           
 13300                           ; BSR set to: 0
 13301  0046A4  A281               	btfss	3969,1,c	;volatile
 13302  0046A6  D7F9               	goto	l9020
 13303                           
 13304                           ; BSR set to: 0
 13305                           ;Test.c: 664: }
 13306                           ;Test.c: 665: if(PORTB >> 4 == 0b1111){
 13307                           
 13308                           ; BSR set to: 0
 13309  0046A8  3881               	swapf	3969,w,c	;volatile
 13310  0046AA  0B0F               	andlw	15
 13311  0046AC  0A0F               	xorlw	15
 13312  0046AE  B4D8               	btfsc	status,2,c
 13313  0046B0  D01F               	goto	l1503
 13314  0046B2                     l1504:
 13315  0046B2  A281               	btfss	3969,1,c	;volatile
 13316  0046B4  D7DF               	goto	l9016
 13317  0046B6  D7FD               	goto	l1504
 13318  0046B8                     l9028:
 13319                           
 13320                           ;Test.c: 670: else{
 13321                           ;Test.c: 671: on = !on;
 13322  0046B8  0100               	movlb	0	; () banked
 13323  0046BA  51AC               	movf	arm@on& (0+255),w,b
 13324  0046BC  0100               	movlb	0	; () banked
 13325  0046BE  11AD               	iorwf	(arm@on+1)& (0+255),w,b
 13326  0046C0  A4D8               	btfss	status,2,c
 13327  0046C2  D002               	goto	u8390
 13328  0046C4  0E01               	movlw	1
 13329  0046C6  D001               	goto	u8400
 13330  0046C8                     u8390:
 13331  0046C8  0E00               	movlw	0
 13332  0046CA                     u8400:
 13333  0046CA  0100               	movlb	0	; () banked
 13334  0046CC  6FAC               	movwf	arm@on& (0+255),b
 13335  0046CE  6BAD               	clrf	(arm@on+1)& (0+255),b
 13336                           
 13337                           ;Test.c: 672: while(PORTBbits.RB1 == 0){
 13338  0046D0  D005               	goto	l9032
 13339  0046D2                     l9030:
 13340                           
 13341                           ; BSR set to: 0
 13342                           ;Test.c: 673: f_arm_position = 1;
 13343  0046D2  0E00               	movlw	0
 13344  0046D4  0100               	movlb	0	; () banked
 13345  0046D6  6FE9               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 13346  0046D8  0E01               	movlw	1
 13347  0046DA  6FE8               	movwf	_f_arm_position& (0+255),b	;volatile
 13348  0046DC                     l9032:
 13349                           
 13350                           ; BSR set to: 0
 13351  0046DC  A281               	btfss	3969,1,c	;volatile
 13352  0046DE  D7F9               	goto	l9030
 13353                           
 13354                           ; BSR set to: 0
 13355                           ;Test.c: 674: }
 13356                           ;Test.c: 675: if(PORTB >> 4 == 0b1111){
 13357                           
 13358                           ; BSR set to: 0
 13359  0046E0  3881               	swapf	3969,w,c	;volatile
 13360  0046E2  0B0F               	andlw	15
 13361  0046E4  0A0F               	xorlw	15
 13362  0046E6  B4D8               	btfsc	status,2,c
 13363  0046E8  D003               	goto	l1503
 13364  0046EA                     l1512:
 13365  0046EA  A281               	btfss	3969,1,c	;volatile
 13366  0046EC  D7C3               	goto	l9016
 13367  0046EE  D7FD               	goto	l1512
 13368  0046F0                     l1503:
 13369                           
 13370                           ; BSR set to: 0
 13371                           ;Test.c: 679: }
 13372                           ;Test.c: 680: }
 13373                           ;Test.c: 682: (INTCONbits.GIE = 0);
 13374  0046F0  9EF2               	bcf	intcon,7,c	;volatile
 13375                           
 13376                           ; BSR set to: 0
 13377                           ;Test.c: 683: stopSignals();
 13378  0046F2  EC56  F02F         	call	_stopSignals	;wreg free
 13379                           
 13380                           ;Test.c: 684: machine_state = Testing_state;
 13381  0046F6  0E03               	movlw	3
 13382  0046F8  0100               	movlb	0	; () banked
 13383  0046FA  6FFC               	movwf	_machine_state& (0+255),b
 13384                           
 13385                           ; BSR set to: 0
 13386  0046FC  0012               	return		;funcret
 13387  0046FE                     __end_of_arm:
 13388                           	opt stack 0
 13389                           tblptru	equ	0xFF8
 13390                           tblptrh	equ	0xFF7
 13391                           tblptrl	equ	0xFF6
 13392                           tablat	equ	0xFF5
 13393                           prodh	equ	0xFF4
 13394                           prodl	equ	0xFF3
 13395                           intcon	equ	0xFF2
 13396                           intcon2	equ	0xFF1
 13397                           intcon3	equ	0xFF0
 13398                           postinc0	equ	0xFEE
 13399                           wreg	equ	0xFE8
 13400                           postdec1	equ	0xFE5
 13401                           fsr1l	equ	0xFE1
 13402                           indf2	equ	0xFDF
 13403                           postinc2	equ	0xFDE
 13404                           postdec2	equ	0xFDD
 13405                           fsr2h	equ	0xFDA
 13406                           fsr2l	equ	0xFD9
 13407                           status	equ	0xFD8
 13408                           
 13409 ;; *************** function _algorithmTest *****************
 13410 ;; Defined at:
 13411 ;;		line 78 in file "Test.c"
 13412 ;; Parameters:    Size  Location     Type
 13413 ;;		None
 13414 ;; Auto vars:     Size  Location     Type
 13415 ;;		None
 13416 ;; Return value:  Size  Location     Type
 13417 ;;                  1    wreg      void 
 13418 ;; Registers used:
 13419 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13420 ;; Tracked objects:
 13421 ;;		On entry : 0/0
 13422 ;;		On exit  : 0/0
 13423 ;;		Unchanged: 0/0
 13424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13425 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13426 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13427 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13428 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13429 ;;Total ram usage:        2 bytes
 13430 ;; Hardware stack levels used:    1
 13431 ;; Hardware stack levels required when called:   10
 13432 ;; This function calls:
 13433 ;;		_lcdInst
 13434 ;;		_printf
 13435 ;; This function is called by:
 13436 ;;		_Test
 13437 ;; This function uses a non-reentrant model
 13438 ;;
 13439                           
 13440                           	psect	text44
 13441  0048C8                     __ptext44:
 13442                           	opt stack 0
 13443  0048C8                     _algorithmTest:
 13444                           	opt stack 19
 13445                           
 13446                           ;Test.c: 80: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 13447                           
 13448                           ; BSR set to: 0
 13449                           ;incstack = 0
 13450  0048C8  0E01               	movlw	1
 13451  0048CA  ECAF  F02F         	call	_lcdInst
 13452  0048CE  0E68               	movlw	104
 13453  0048D0  0100               	movlb	0	; () banked
 13454  0048D2  6FAB               	movwf	??_algorithmTest& (0+255),b
 13455  0048D4  0EE4               	movlw	228
 13456  0048D6                     u11357:
 13457  0048D6  2EE8               	decfsz	wreg,f,c
 13458  0048D8  D7FE               	bra	u11357
 13459  0048DA  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 13460  0048DC  D7FC               	bra	u11357
 13461  0048DE  F000               	nop	
 13462  0048E0  0E80               	movlw	128
 13463  0048E2  ECAF  F02F         	call	_lcdInst
 13464                           
 13465                           ;Test.c: 81: printf("ALGORITHM TEST");
 13466  0048E6  0E01               	movlw	low STR_70
 13467  0048E8  0100               	movlb	0	; () banked
 13468  0048EA  6F8E               	movwf	printf@f& (0+255),b
 13469  0048EC  0EFF               	movlw	high STR_70
 13470  0048EE  0100               	movlb	0	; () banked
 13471  0048F0  6F8F               	movwf	(printf@f+1)& (0+255),b
 13472  0048F2  EC67  F00E         	call	_printf	;wreg free
 13473                           
 13474                           ;Test.c: 82: lcdInst(0b11000000);;
 13475  0048F6  0EC0               	movlw	192
 13476  0048F8  ECAF  F02F         	call	_lcdInst
 13477                           
 13478                           ;Test.c: 83: printf("PUSH TO START");
 13479  0048FC  0E3A               	movlw	low STR_71
 13480  0048FE  0100               	movlb	0	; () banked
 13481  004900  6F8E               	movwf	printf@f& (0+255),b
 13482  004902  0EFF               	movlw	high STR_71
 13483  004904  0100               	movlb	0	; () banked
 13484  004906  6F8F               	movwf	(printf@f+1)& (0+255),b
 13485  004908  EC67  F00E         	call	_printf	;wreg free
 13486                           
 13487                           ;Test.c: 84: _delay((unsigned long)((100)*(32000000/4000.0)));
 13488  00490C  0E05               	movlw	5
 13489  00490E  0100               	movlb	0	; () banked
 13490  004910  6FAC               	movwf	(??_algorithmTest+1)& (0+255),b
 13491  004912  0E0F               	movlw	15
 13492  004914  0100               	movlb	0	; () banked
 13493  004916  6FAB               	movwf	??_algorithmTest& (0+255),b
 13494  004918  0EF1               	movlw	241
 13495  00491A                     u11367:
 13496  00491A  2EE8               	decfsz	wreg,f,c
 13497  00491C  D7FE               	bra	u11367
 13498  00491E  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 13499  004920  D7FC               	bra	u11367
 13500  004922  2FAC               	decfsz	(??_algorithmTest+1)& (0+255),f,b
 13501  004924  D7FA               	bra	u11367
 13502  004926                     l1288:
 13503  004926  A281               	btfss	3969,1,c	;volatile
 13504  004928  D7FE               	goto	l1288
 13505  00492A                     l1291:
 13506  00492A  B281               	btfsc	3969,1,c	;volatile
 13507  00492C  D7FE               	goto	l1291
 13508                           
 13509                           ;Test.c: 87: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 13510  00492E  0E01               	movlw	1
 13511  004930  ECAF  F02F         	call	_lcdInst
 13512  004934  0E68               	movlw	104
 13513  004936  0100               	movlb	0	; () banked
 13514  004938  6FAB               	movwf	??_algorithmTest& (0+255),b
 13515  00493A  0EE4               	movlw	228
 13516  00493C                     u11377:
 13517  00493C  2EE8               	decfsz	wreg,f,c
 13518  00493E  D7FE               	bra	u11377
 13519  004940  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 13520  004942  D7FC               	bra	u11377
 13521  004944  F000               	nop	
 13522  004946  0E80               	movlw	128
 13523  004948  ECAF  F02F         	call	_lcdInst
 13524                           
 13525                           ;Test.c: 92: printf("ALG1: 9 POPNOTAB");
 13526  00494C  0E5D               	movlw	low STR_72
 13527  00494E  0100               	movlb	0	; () banked
 13528  004950  6F8E               	movwf	printf@f& (0+255),b
 13529  004952  0EFC               	movlw	high STR_72
 13530  004954  0100               	movlb	0	; () banked
 13531  004956  6F8F               	movwf	(printf@f+1)& (0+255),b
 13532  004958  EC67  F00E         	call	_printf	;wreg free
 13533                           
 13534                           ;Test.c: 99: printf("ALG2: 12 CANS");
 13535  00495C  0E1E               	movlw	low STR_73
 13536  00495E  0100               	movlb	0	; () banked
 13537  004960  6F8E               	movwf	printf@f& (0+255),b
 13538  004962  0EFF               	movlw	high STR_73
 13539  004964  0100               	movlb	0	; () banked
 13540  004966  6F8F               	movwf	(printf@f+1)& (0+255),b
 13541  004968  EC67  F00E         	call	_printf	;wreg free
 13542                           
 13543                           ;Test.c: 108: printf("ALG3: 1 CAN");
 13544  00496C  0E64               	movlw	low STR_74
 13545  00496E  0100               	movlb	0	; () banked
 13546  004970  6F8E               	movwf	printf@f& (0+255),b
 13547  004972  0EFF               	movlw	high STR_74
 13548  004974  0100               	movlb	0	; () banked
 13549  004976  6F8F               	movwf	(printf@f+1)& (0+255),b
 13550  004978  EC67  F00E         	call	_printf	;wreg free
 13551                           
 13552                           ;Test.c: 114: printf("ALG4: ALL CANS");
 13553  00497C  0EE3               	movlw	low STR_75
 13554  00497E  0100               	movlb	0	; () banked
 13555  004980  6F8E               	movwf	printf@f& (0+255),b
 13556  004982  0EFE               	movlw	high STR_75
 13557  004984  0100               	movlb	0	; () banked
 13558  004986  6F8F               	movwf	(printf@f+1)& (0+255),b
 13559  004988  EC67  F00E         	call	_printf	;wreg free
 13560                           
 13561                           ;Test.c: 119: printf("ALG5: NO CANS");
 13562  00498C  0E2C               	movlw	low STR_76
 13563  00498E  0100               	movlb	0	; () banked
 13564  004990  6F8E               	movwf	printf@f& (0+255),b
 13565  004992  0EFF               	movlw	high STR_76
 13566  004994  0100               	movlb	0	; () banked
 13567  004996  6F8F               	movwf	(printf@f+1)& (0+255),b
 13568  004998  EC67  F00E         	call	_printf	;wreg free
 13569  00499C  0012               	return		;funcret
 13570  00499E                     __end_of_algorithmTest:
 13571                           	opt stack 0
 13572                           tblptru	equ	0xFF8
 13573                           tblptrh	equ	0xFF7
 13574                           tblptrl	equ	0xFF6
 13575                           tablat	equ	0xFF5
 13576                           prodh	equ	0xFF4
 13577                           prodl	equ	0xFF3
 13578                           intcon	equ	0xFF2
 13579                           intcon2	equ	0xFF1
 13580                           intcon3	equ	0xFF0
 13581                           postinc0	equ	0xFEE
 13582                           wreg	equ	0xFE8
 13583                           postdec1	equ	0xFE5
 13584                           fsr1l	equ	0xFE1
 13585                           indf2	equ	0xFDF
 13586                           postinc2	equ	0xFDE
 13587                           postdec2	equ	0xFDD
 13588                           fsr2h	equ	0xFDA
 13589                           fsr2l	equ	0xFD9
 13590                           status	equ	0xFD8
 13591                           
 13592 ;; *************** function _actuatorTest *****************
 13593 ;; Defined at:
 13594 ;;		line 221 in file "Test.c"
 13595 ;; Parameters:    Size  Location     Type
 13596 ;;		None
 13597 ;; Auto vars:     Size  Location     Type
 13598 ;;  i               1   45[BANK0 ] unsigned char 
 13599 ;;  i               1   67[BANK0 ] unsigned char 
 13600 ;;  i               1   66[BANK0 ] unsigned char 
 13601 ;;  i               1   65[BANK0 ] unsigned char 
 13602 ;;  i               1   64[BANK0 ] unsigned char 
 13603 ;;  i               1   63[BANK0 ] unsigned char 
 13604 ;;  i               1   62[BANK0 ] unsigned char 
 13605 ;;  i               1   61[BANK0 ] unsigned char 
 13606 ;;  i               1   60[BANK0 ] unsigned char 
 13607 ;;  i               1   59[BANK0 ] unsigned char 
 13608 ;;  i               1   58[BANK0 ] unsigned char 
 13609 ;;  i               1   57[BANK0 ] unsigned char 
 13610 ;;  i               1   56[BANK0 ] unsigned char 
 13611 ;;  i               1   55[BANK0 ] unsigned char 
 13612 ;;  i               1   54[BANK0 ] unsigned char 
 13613 ;;  i               1   53[BANK0 ] unsigned char 
 13614 ;;  i               1   52[BANK0 ] unsigned char 
 13615 ;;  i               1   51[BANK0 ] unsigned char 
 13616 ;;  i               1   50[BANK0 ] unsigned char 
 13617 ;;  i               1   49[BANK0 ] unsigned char 
 13618 ;;  i               1   48[BANK0 ] unsigned char 
 13619 ;;  i               1   47[BANK0 ] unsigned char 
 13620 ;;  i               1   46[BANK0 ] unsigned char 
 13621 ;;  i               2   68[BANK0 ] int 
 13622 ;; Return value:  Size  Location     Type
 13623 ;;                  1    wreg      void 
 13624 ;; Registers used:
 13625 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13626 ;; Tracked objects:
 13627 ;;		On entry : 0/0
 13628 ;;		On exit  : 0/0
 13629 ;;		Unchanged: 0/0
 13630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13631 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13632 ;;      Locals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13633 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13634 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13635 ;;Total ram usage:       27 bytes
 13636 ;; Hardware stack levels used:    1
 13637 ;; Hardware stack levels required when called:   10
 13638 ;; This function calls:
 13639 ;;		_lcdInst
 13640 ;;		_printf
 13641 ;;		_updateServoPosition
 13642 ;; This function is called by:
 13643 ;;		_Test
 13644 ;; This function uses a non-reentrant model
 13645 ;;
 13646                           
 13647                           	psect	text45
 13648  0008DA                     __ptext45:
 13649                           	opt stack 0
 13650  0008DA                     _actuatorTest:
 13651                           	opt stack 19
 13652                           
 13653                           ;Test.c: 223: int i = 0;
 13654                           
 13655                           ;incstack = 0
 13656  0008DA  0E00               	movlw	0
 13657  0008DC  0100               	movlb	0	; () banked
 13658  0008DE  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 13659  0008E0  0E00               	movlw	0
 13660  0008E2  6FC4               	movwf	actuatorTest@i& (0+255),b
 13661                           
 13662                           ; BSR set to: 0
 13663                           ;Test.c: 225: (INTCONbits.GIE = 1);
 13664  0008E4  8EF2               	bsf	intcon,7,c	;volatile
 13665                           
 13666                           ; BSR set to: 0
 13667                           ;Test.c: 226: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13668  0008E6  0E01               	movlw	1
 13669  0008E8  ECAF  F02F         	call	_lcdInst
 13670  0008EC  0E68               	movlw	104
 13671  0008EE  0100               	movlb	0	; () banked
 13672  0008F0  6FAB               	movwf	??_actuatorTest& (0+255),b
 13673  0008F2  0EE4               	movlw	228
 13674  0008F4                     u11387:
 13675  0008F4  2EE8               	decfsz	wreg,f,c
 13676  0008F6  D7FE               	bra	u11387
 13677  0008F8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13678  0008FA  D7FC               	bra	u11387
 13679  0008FC  F000               	nop	
 13680  0008FE  0E80               	movlw	128
 13681  000900  ECAF  F02F         	call	_lcdInst
 13682                           
 13683                           ;Test.c: 227: printf("ACTUATORS");
 13684  000904  0E90               	movlw	low STR_89
 13685  000906  0100               	movlb	0	; () banked
 13686  000908  6F8E               	movwf	printf@f& (0+255),b
 13687  00090A  0EFF               	movlw	high STR_89
 13688  00090C  0100               	movlb	0	; () banked
 13689  00090E  6F8F               	movwf	(printf@f+1)& (0+255),b
 13690  000910  EC67  F00E         	call	_printf	;wreg free
 13691                           
 13692                           ;Test.c: 228: lcdInst(0b11000000);;
 13693  000914  0EC0               	movlw	192
 13694  000916  ECAF  F02F         	call	_lcdInst
 13695                           
 13696                           ;Test.c: 229: printf("PUSH TO START");
 13697  00091A  0E3A               	movlw	low STR_71
 13698  00091C  0100               	movlb	0	; () banked
 13699  00091E  6F8E               	movwf	printf@f& (0+255),b
 13700  000920  0EFF               	movlw	high STR_71
 13701  000922  0100               	movlb	0	; () banked
 13702  000924  6F8F               	movwf	(printf@f+1)& (0+255),b
 13703  000926  EC67  F00E         	call	_printf	;wreg free
 13704                           
 13705                           ;Test.c: 230: _delay((unsigned long)((100)*(32000000/4000.0)));
 13706  00092A  0E05               	movlw	5
 13707  00092C  0100               	movlb	0	; () banked
 13708  00092E  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 13709  000930  0E0F               	movlw	15
 13710  000932  0100               	movlb	0	; () banked
 13711  000934  6FAB               	movwf	??_actuatorTest& (0+255),b
 13712  000936  0EF1               	movlw	241
 13713  000938                     u11397:
 13714  000938  2EE8               	decfsz	wreg,f,c
 13715  00093A  D7FE               	bra	u11397
 13716  00093C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13717  00093E  D7FC               	bra	u11397
 13718  000940  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 13719  000942  D7FA               	bra	u11397
 13720  000944                     l1335:
 13721  000944  A281               	btfss	3969,1,c	;volatile
 13722  000946  D7FE               	goto	l1335
 13723  000948                     l1338:
 13724  000948  B281               	btfsc	3969,1,c	;volatile
 13725  00094A  D7FE               	goto	l1338
 13726                           
 13727                           ;Test.c: 233: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13728  00094C  0E01               	movlw	1
 13729  00094E  ECAF  F02F         	call	_lcdInst
 13730  000952  0E68               	movlw	104
 13731  000954  0100               	movlb	0	; () banked
 13732  000956  6FAB               	movwf	??_actuatorTest& (0+255),b
 13733  000958  0EE4               	movlw	228
 13734  00095A                     u11407:
 13735  00095A  2EE8               	decfsz	wreg,f,c
 13736  00095C  D7FE               	bra	u11407
 13737  00095E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13738  000960  D7FC               	bra	u11407
 13739  000962  F000               	nop	
 13740  000964  0E80               	movlw	128
 13741  000966  ECAF  F02F         	call	_lcdInst
 13742                           
 13743                           ;Test.c: 238: printf("TST: DC MOTORS");
 13744  00096A  0EF2               	movlw	low STR_91
 13745  00096C  0100               	movlb	0	; () banked
 13746  00096E  6F8E               	movwf	printf@f& (0+255),b
 13747  000970  0EFE               	movlw	high STR_91
 13748  000972  0100               	movlb	0	; () banked
 13749  000974  6F8F               	movwf	(printf@f+1)& (0+255),b
 13750  000976  EC67  F00E         	call	_printf	;wreg free
 13751                           
 13752                           ;Test.c: 239: lcdInst(0b11000000);;
 13753  00097A  0EC0               	movlw	192
 13754  00097C  ECAF  F02F         	call	_lcdInst
 13755                           
 13756                           ;Test.c: 240: printf("PIN RA5 HIGH.");
 13757  000980  0E10               	movlw	low STR_92
 13758  000982  0100               	movlb	0	; () banked
 13759  000984  6F8E               	movwf	printf@f& (0+255),b
 13760  000986  0EFF               	movlw	high STR_92
 13761  000988  0100               	movlb	0	; () banked
 13762  00098A  6F8F               	movwf	(printf@f+1)& (0+255),b
 13763  00098C  EC67  F00E         	call	_printf	;wreg free
 13764                           
 13765                           ;Test.c: 241: LATBbits.LATB2 = 1;
 13766  000990  848A               	bsf	3978,2,c	;volatile
 13767                           
 13768                           ;Test.c: 242: for(i=0;i<5;i++){for(char i=0;i<100;i++){_delay((unsigned long)((10)*(3200
      +                          0000/4000.0)));};}
 13769  000992  0E00               	movlw	0
 13770  000994  0100               	movlb	0	; () banked
 13771  000996  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 13772  000998  0E00               	movlw	0
 13773  00099A  6FC4               	movwf	actuatorTest@i& (0+255),b
 13774                           
 13775                           ; BSR set to: 0
 13776  00099C  0100               	movlb	0	; () banked
 13777  00099E  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13778  0009A0  D008               	goto	l8602
 13779  0009A2  0100               	movlb	0	; () banked
 13780  0009A4  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 13781  0009A6  E123               	bnz	l1342
 13782  0009A8  0E05               	movlw	5
 13783  0009AA  0100               	movlb	0	; () banked
 13784  0009AC  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 13785  0009AE  B0D8               	btfsc	status,0,c
 13786  0009B0  D01E               	goto	l1342
 13787  0009B2                     l8602:
 13788                           
 13789                           ; BSR set to: 0
 13790  0009B2  0E00               	movlw	0
 13791  0009B4  0100               	movlb	0	; () banked
 13792  0009B6  6FAD               	movwf	actuatorTest@i_1747& (0+255),b
 13793  0009B8                     l8604:
 13794                           
 13795                           ; BSR set to: 0
 13796  0009B8  0E63               	movlw	99
 13797  0009BA  0100               	movlb	0	; () banked
 13798  0009BC  65AD               	cpfsgt	actuatorTest@i_1747& (0+255),b
 13799  0009BE  D001               	goto	l8608
 13800  0009C0  D00C               	goto	l8612
 13801  0009C2                     l8608:
 13802                           
 13803                           ; BSR set to: 0
 13804  0009C2  0E68               	movlw	104
 13805  0009C4  0100               	movlb	0	; () banked
 13806  0009C6  6FAB               	movwf	??_actuatorTest& (0+255),b
 13807  0009C8  0EE4               	movlw	228
 13808  0009CA                     u11417:
 13809  0009CA  2EE8               	decfsz	wreg,f,c
 13810  0009CC  D7FE               	bra	u11417
 13811  0009CE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13812  0009D0  D7FC               	bra	u11417
 13813  0009D2  F000               	nop	
 13814  0009D4  0100               	movlb	0	; () banked
 13815  0009D6  2BAD               	incf	actuatorTest@i_1747& (0+255),f,b
 13816  0009D8  D7EF               	goto	l8604
 13817  0009DA                     l8612:
 13818                           
 13819                           ; BSR set to: 0
 13820  0009DA  0100               	movlb	0	; () banked
 13821  0009DC  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 13822  0009DE  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 13823                           
 13824                           ; BSR set to: 0
 13825  0009E0  0100               	movlb	0	; () banked
 13826  0009E2  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13827  0009E4  D7E6               	goto	l8602
 13828  0009E6  0100               	movlb	0	; () banked
 13829  0009E8  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 13830  0009EA  E101               	bnz	u7820
 13831  0009EC  D7DD               	goto	L11
 13832  0009EE                     u7820:
 13833  0009EE                     l1342:
 13834                           
 13835                           ; BSR set to: 0
 13836                           ;Test.c: 243: LATBbits.LATB2 = 0;
 13837  0009EE  948A               	bcf	3978,2,c	;volatile
 13838                           
 13839                           ; BSR set to: 0
 13840                           ;Test.c: 244: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13841  0009F0  0E01               	movlw	1
 13842  0009F2  ECAF  F02F         	call	_lcdInst
 13843  0009F6  0E68               	movlw	104
 13844  0009F8  0100               	movlb	0	; () banked
 13845  0009FA  6FAB               	movwf	??_actuatorTest& (0+255),b
 13846  0009FC  0EE4               	movlw	228
 13847  0009FE                     u11427:
 13848  0009FE  2EE8               	decfsz	wreg,f,c
 13849  000A00  D7FE               	bra	u11427
 13850  000A02  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13851  000A04  D7FC               	bra	u11427
 13852  000A06  F000               	nop	
 13853  000A08  0E80               	movlw	128
 13854  000A0A  ECAF  F02F         	call	_lcdInst
 13855                           
 13856                           ;Test.c: 250: printf("TST: COND SOLN'D");
 13857  000A0E  0E6E               	movlw	low STR_93
 13858  000A10  0100               	movlb	0	; () banked
 13859  000A12  6F8E               	movwf	printf@f& (0+255),b
 13860  000A14  0EFC               	movlw	high STR_93
 13861  000A16  0100               	movlb	0	; () banked
 13862  000A18  6F8F               	movwf	(printf@f+1)& (0+255),b
 13863  000A1A  EC67  F00E         	call	_printf	;wreg free
 13864                           
 13865                           ;Test.c: 251: lcdInst(0b11000000);;
 13866  000A1E  0EC0               	movlw	192
 13867  000A20  ECAF  F02F         	call	_lcdInst
 13868                           
 13869                           ;Test.c: 252: printf("PIN RA3...");
 13870  000A24  0E70               	movlw	low STR_94
 13871  000A26  0100               	movlb	0	; () banked
 13872  000A28  6F8E               	movwf	printf@f& (0+255),b
 13873  000A2A  0EFF               	movlw	high STR_94
 13874  000A2C  0100               	movlb	0	; () banked
 13875  000A2E  6F8F               	movwf	(printf@f+1)& (0+255),b
 13876  000A30  EC67  F00E         	call	_printf	;wreg free
 13877                           
 13878                           ;Test.c: 253: for(i=0;i<5;i++){
 13879  000A34  0E00               	movlw	0
 13880  000A36  0100               	movlb	0	; () banked
 13881  000A38  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 13882  000A3A  0E00               	movlw	0
 13883  000A3C  6FC4               	movwf	actuatorTest@i& (0+255),b
 13884                           
 13885                           ; BSR set to: 0
 13886  000A3E  0100               	movlb	0	; () banked
 13887  000A40  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13888  000A42  D008               	goto	l1345
 13889  000A44  0100               	movlb	0	; () banked
 13890  000A46  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 13891  000A48  E12C               	bnz	l1346
 13892  000A4A  0E05               	movlw	5
 13893  000A4C  0100               	movlb	0	; () banked
 13894  000A4E  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 13895  000A50  B0D8               	btfsc	status,0,c
 13896  000A52  D027               	goto	l1346
 13897  000A54                     l1345:
 13898                           
 13899                           ; BSR set to: 0
 13900                           ;Test.c: 254: LATCbits.LATC7 = 1;
 13901  000A54  8E8B               	bsf	3979,7,c	;volatile
 13902                           
 13903                           ; BSR set to: 0
 13904                           ;Test.c: 255: _delay((unsigned long)((300)*(32000000/4000.0)));
 13905  000A56  0E0D               	movlw	13
 13906  000A58  0100               	movlb	0	; () banked
 13907  000A5A  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 13908  000A5C  0E2D               	movlw	45
 13909  000A5E  0100               	movlb	0	; () banked
 13910  000A60  6FAB               	movwf	??_actuatorTest& (0+255),b
 13911  000A62  0ED7               	movlw	215
 13912  000A64                     u11437:
 13913  000A64  2EE8               	decfsz	wreg,f,c
 13914  000A66  D7FE               	bra	u11437
 13915  000A68  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13916  000A6A  D7FC               	bra	u11437
 13917  000A6C  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 13918  000A6E  D7FA               	bra	u11437
 13919  000A70  D000               	nop2	
 13920                           
 13921                           ;Test.c: 256: LATCbits.LATC7 = !1;
 13922  000A72  9E8B               	bcf	3979,7,c	;volatile
 13923                           
 13924                           ;Test.c: 257: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 13925  000A74  0E1D               	movlw	29
 13926  000A76  0100               	movlb	0	; () banked
 13927  000A78  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 13928  000A7A  0E69               	movlw	105
 13929  000A7C  0100               	movlb	0	; () banked
 13930  000A7E  6FAB               	movwf	??_actuatorTest& (0+255),b
 13931  000A80  0EA5               	movlw	165
 13932  000A82                     u11447:
 13933  000A82  2EE8               	decfsz	wreg,f,c
 13934  000A84  D7FE               	bra	u11447
 13935  000A86  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13936  000A88  D7FC               	bra	u11447
 13937  000A8A  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 13938  000A8C  D7FA               	bra	u11447
 13939  000A8E  0100               	movlb	0	; () banked
 13940  000A90  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 13941  000A92  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 13942  000A94  0100               	movlb	0	; () banked
 13943  000A96  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13944  000A98  D7DD               	goto	l1345
 13945  000A9A  0100               	movlb	0	; () banked
 13946  000A9C  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 13947  000A9E  E101               	bnz	u7840
 13948  000AA0  D7D4               	goto	L12
 13949  000AA2                     u7840:
 13950  000AA2                     l1346:
 13951                           
 13952                           ; BSR set to: 0
 13953                           ;Test.c: 258: }
 13954                           ;Test.c: 259: LATCbits.LATC7 = !1;
 13955  000AA2  9E8B               	bcf	3979,7,c	;volatile
 13956                           
 13957                           ; BSR set to: 0
 13958                           ;Test.c: 260: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13959  000AA4  0E01               	movlw	1
 13960  000AA6  ECAF  F02F         	call	_lcdInst
 13961  000AAA  0E68               	movlw	104
 13962  000AAC  0100               	movlb	0	; () banked
 13963  000AAE  6FAB               	movwf	??_actuatorTest& (0+255),b
 13964  000AB0  0EE4               	movlw	228
 13965  000AB2                     u11457:
 13966  000AB2  2EE8               	decfsz	wreg,f,c
 13967  000AB4  D7FE               	bra	u11457
 13968  000AB6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13969  000AB8  D7FC               	bra	u11457
 13970  000ABA  F000               	nop	
 13971  000ABC  0E80               	movlw	128
 13972  000ABE  ECAF  F02F         	call	_lcdInst
 13973                           
 13974                           ;Test.c: 266: printf("TST: PUSH SOLN'D");
 13975  000AC2  0E7F               	movlw	low STR_95
 13976  000AC4  0100               	movlb	0	; () banked
 13977  000AC6  6F8E               	movwf	printf@f& (0+255),b
 13978  000AC8  0EFC               	movlw	high STR_95
 13979  000ACA  0100               	movlb	0	; () banked
 13980  000ACC  6F8F               	movwf	(printf@f+1)& (0+255),b
 13981  000ACE  EC67  F00E         	call	_printf	;wreg free
 13982                           
 13983                           ;Test.c: 267: lcdInst(0b11000000);;
 13984  000AD2  0EC0               	movlw	192
 13985  000AD4  ECAF  F02F         	call	_lcdInst
 13986                           
 13987                           ;Test.c: 268: printf("PIN RA4...");
 13988  000AD8  0E7B               	movlw	low STR_96
 13989  000ADA  0100               	movlb	0	; () banked
 13990  000ADC  6F8E               	movwf	printf@f& (0+255),b
 13991  000ADE  0EFF               	movlw	high STR_96
 13992  000AE0  0100               	movlb	0	; () banked
 13993  000AE2  6F8F               	movwf	(printf@f+1)& (0+255),b
 13994  000AE4  EC67  F00E         	call	_printf	;wreg free
 13995                           
 13996                           ;Test.c: 269: for(i=0;i<5;i++){
 13997  000AE8  0E00               	movlw	0
 13998  000AEA  0100               	movlb	0	; () banked
 13999  000AEC  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 14000  000AEE  0E00               	movlw	0
 14001  000AF0  6FC4               	movwf	actuatorTest@i& (0+255),b
 14002                           
 14003                           ; BSR set to: 0
 14004  000AF2  0100               	movlb	0	; () banked
 14005  000AF4  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 14006  000AF6  D008               	goto	l1347
 14007  000AF8  0100               	movlb	0	; () banked
 14008  000AFA  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 14009  000AFC  E12C               	bnz	l1348
 14010  000AFE  0E05               	movlw	5
 14011  000B00  0100               	movlb	0	; () banked
 14012  000B02  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 14013  000B04  B0D8               	btfsc	status,0,c
 14014  000B06  D027               	goto	l1348
 14015  000B08                     l1347:
 14016                           
 14017                           ; BSR set to: 0
 14018                           ;Test.c: 270: LATAbits.LATA4 = 1;
 14019  000B08  8889               	bsf	3977,4,c	;volatile
 14020                           
 14021                           ; BSR set to: 0
 14022                           ;Test.c: 271: _delay((unsigned long)((300)*(32000000/4000.0)));
 14023  000B0A  0E0D               	movlw	13
 14024  000B0C  0100               	movlb	0	; () banked
 14025  000B0E  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 14026  000B10  0E2D               	movlw	45
 14027  000B12  0100               	movlb	0	; () banked
 14028  000B14  6FAB               	movwf	??_actuatorTest& (0+255),b
 14029  000B16  0ED7               	movlw	215
 14030  000B18                     u11467:
 14031  000B18  2EE8               	decfsz	wreg,f,c
 14032  000B1A  D7FE               	bra	u11467
 14033  000B1C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14034  000B1E  D7FC               	bra	u11467
 14035  000B20  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 14036  000B22  D7FA               	bra	u11467
 14037  000B24  D000               	nop2	
 14038                           
 14039                           ;Test.c: 272: LATAbits.LATA4 = !1;
 14040  000B26  9889               	bcf	3977,4,c	;volatile
 14041                           
 14042                           ;Test.c: 273: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 14043  000B28  0E1D               	movlw	29
 14044  000B2A  0100               	movlb	0	; () banked
 14045  000B2C  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 14046  000B2E  0E69               	movlw	105
 14047  000B30  0100               	movlb	0	; () banked
 14048  000B32  6FAB               	movwf	??_actuatorTest& (0+255),b
 14049  000B34  0EA5               	movlw	165
 14050  000B36                     u11477:
 14051  000B36  2EE8               	decfsz	wreg,f,c
 14052  000B38  D7FE               	bra	u11477
 14053  000B3A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14054  000B3C  D7FC               	bra	u11477
 14055  000B3E  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 14056  000B40  D7FA               	bra	u11477
 14057  000B42  0100               	movlb	0	; () banked
 14058  000B44  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 14059  000B46  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 14060  000B48  0100               	movlb	0	; () banked
 14061  000B4A  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 14062  000B4C  D7DD               	goto	l1347
 14063  000B4E  0100               	movlb	0	; () banked
 14064  000B50  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 14065  000B52  E101               	bnz	u7860
 14066  000B54  D7D4               	goto	L13
 14067  000B56                     u7860:
 14068  000B56                     l1348:
 14069                           
 14070                           ; BSR set to: 0
 14071                           ;Test.c: 274: }
 14072                           ;Test.c: 275: LATAbits.LATA4 = !1;
 14073  000B56  9889               	bcf	3977,4,c	;volatile
 14074                           
 14075                           ; BSR set to: 0
 14076                           ;Test.c: 276: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14077  000B58  0E01               	movlw	1
 14078  000B5A  ECAF  F02F         	call	_lcdInst
 14079  000B5E  0E68               	movlw	104
 14080  000B60  0100               	movlb	0	; () banked
 14081  000B62  6FAB               	movwf	??_actuatorTest& (0+255),b
 14082  000B64  0EE4               	movlw	228
 14083  000B66                     u11487:
 14084  000B66  2EE8               	decfsz	wreg,f,c
 14085  000B68  D7FE               	bra	u11487
 14086  000B6A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14087  000B6C  D7FC               	bra	u11487
 14088  000B6E  F000               	nop	
 14089  000B70  0E80               	movlw	128
 14090  000B72  ECAF  F02F         	call	_lcdInst
 14091                           
 14092                           ;Test.c: 279: machine_state = Sorting_state;
 14093  000B76  0E01               	movlw	1
 14094  000B78  0100               	movlb	0	; () banked
 14095  000B7A  6FFC               	movwf	_machine_state& (0+255),b
 14096                           
 14097                           ; BSR set to: 0
 14098                           ;Test.c: 280: was_low_1 = 0;
 14099  000B7C  0E00               	movlw	0
 14100  000B7E  6E78               	movwf	_was_low_1+1,c	;volatile
 14101  000B80  0E00               	movlw	0
 14102  000B82  6E77               	movwf	_was_low_1,c	;volatile
 14103                           
 14104                           ; BSR set to: 0
 14105                           ;Test.c: 281: was_low_1 = 0;
 14106  000B84  0E00               	movlw	0
 14107  000B86  6E78               	movwf	_was_low_1+1,c	;volatile
 14108  000B88  0E00               	movlw	0
 14109  000B8A  6E77               	movwf	_was_low_1,c	;volatile
 14110                           
 14111                           ; BSR set to: 0
 14112                           ;Test.c: 288: printf("TST: PAN SERVO");
 14113  000B8C  0ED4               	movlw	low STR_97
 14114  000B8E  0100               	movlb	0	; () banked
 14115  000B90  6F8E               	movwf	printf@f& (0+255),b
 14116  000B92  0EFE               	movlw	high STR_97
 14117  000B94  0100               	movlb	0	; () banked
 14118  000B96  6F8F               	movwf	(printf@f+1)& (0+255),b
 14119  000B98  EC67  F00E         	call	_printf	;wreg free
 14120                           
 14121                           ;Test.c: 289: lcdInst(0b11000000);;
 14122  000B9C  0EC0               	movlw	192
 14123  000B9E  ECAF  F02F         	call	_lcdInst
 14124                           
 14125                           ;Test.c: 290: printf("MIDDLE -- 2s    ");
 14126  000BA2  0EE6               	movlw	low STR_98
 14127  000BA4  0100               	movlb	0	; () banked
 14128  000BA6  6F8E               	movwf	printf@f& (0+255),b
 14129  000BA8  0EFB               	movlw	high STR_98
 14130  000BAA  0100               	movlb	0	; () banked
 14131  000BAC  6F8F               	movwf	(printf@f+1)& (0+255),b
 14132  000BAE  EC67  F00E         	call	_printf	;wreg free
 14133                           
 14134                           ;Test.c: 291: updateServoPosition(1200, 1);
 14135  000BB2  0E04               	movlw	4
 14136  000BB4  0100               	movlb	0	; () banked
 14137  000BB6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14138  000BB8  0EB0               	movlw	176
 14139  000BBA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14140  000BBC  0E00               	movlw	0
 14141  000BBE  0100               	movlb	0	; () banked
 14142  000BC0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14143  000BC2  0E01               	movlw	1
 14144  000BC4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14145  000BC6  EC27  F029         	call	_updateServoPosition	;wreg free
 14146                           
 14147                           ;Test.c: 292: TMR1ON = 1;
 14148  000BCA  80CD               	bsf	4045,0,c	;volatile
 14149                           
 14150                           ;Test.c: 293: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14151  000BCC  0E00               	movlw	0
 14152  000BCE  0100               	movlb	0	; () banked
 14153  000BD0  6FAE               	movwf	actuatorTest@i_1754& (0+255),b
 14154  000BD2                     l8688:
 14155                           
 14156                           ; BSR set to: 0
 14157  000BD2  0E63               	movlw	99
 14158  000BD4  0100               	movlb	0	; () banked
 14159  000BD6  65AE               	cpfsgt	actuatorTest@i_1754& (0+255),b
 14160  000BD8  D001               	goto	l8692
 14161  000BDA  D00C               	goto	l8696
 14162  000BDC                     l8692:
 14163                           
 14164                           ; BSR set to: 0
 14165  000BDC  0E68               	movlw	104
 14166  000BDE  0100               	movlb	0	; () banked
 14167  000BE0  6FAB               	movwf	??_actuatorTest& (0+255),b
 14168  000BE2  0EE4               	movlw	228
 14169  000BE4                     u11497:
 14170  000BE4  2EE8               	decfsz	wreg,f,c
 14171  000BE6  D7FE               	bra	u11497
 14172  000BE8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14173  000BEA  D7FC               	bra	u11497
 14174  000BEC  F000               	nop	
 14175  000BEE  0100               	movlb	0	; () banked
 14176  000BF0  2BAE               	incf	actuatorTest@i_1754& (0+255),f,b
 14177  000BF2  D7EF               	goto	l8688
 14178  000BF4                     l8696:
 14179                           
 14180                           ; BSR set to: 0
 14181  000BF4  0E00               	movlw	0
 14182  000BF6  0100               	movlb	0	; () banked
 14183  000BF8  6FAF               	movwf	actuatorTest@i_1755& (0+255),b
 14184  000BFA                     l8698:
 14185                           
 14186                           ; BSR set to: 0
 14187  000BFA  0E63               	movlw	99
 14188  000BFC  0100               	movlb	0	; () banked
 14189  000BFE  65AF               	cpfsgt	actuatorTest@i_1755& (0+255),b
 14190  000C00  D001               	goto	l8702
 14191  000C02  D00C               	goto	l8706
 14192  000C04                     l8702:
 14193                           
 14194                           ; BSR set to: 0
 14195  000C04  0E68               	movlw	104
 14196  000C06  0100               	movlb	0	; () banked
 14197  000C08  6FAB               	movwf	??_actuatorTest& (0+255),b
 14198  000C0A  0EE4               	movlw	228
 14199  000C0C                     u11507:
 14200  000C0C  2EE8               	decfsz	wreg,f,c
 14201  000C0E  D7FE               	bra	u11507
 14202  000C10  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14203  000C12  D7FC               	bra	u11507
 14204  000C14  F000               	nop	
 14205  000C16  0100               	movlb	0	; () banked
 14206  000C18  2BAF               	incf	actuatorTest@i_1755& (0+255),f,b
 14207  000C1A  D7EF               	goto	l8698
 14208  000C1C                     l8706:
 14209                           
 14210                           ; BSR set to: 0
 14211                           ;Test.c: 295: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14212  000C1C  0E80               	movlw	128
 14213  000C1E  ECAF  F02F         	call	_lcdInst
 14214  000C22  0EC0               	movlw	192
 14215  000C24  ECAF  F02F         	call	_lcdInst
 14216                           
 14217                           ;Test.c: 296: printf("RIGHT -- 2s     ");
 14218  000C28  0ED5               	movlw	low STR_99
 14219  000C2A  0100               	movlb	0	; () banked
 14220  000C2C  6F8E               	movwf	printf@f& (0+255),b
 14221  000C2E  0EFB               	movlw	high STR_99
 14222  000C30  0100               	movlb	0	; () banked
 14223  000C32  6F8F               	movwf	(printf@f+1)& (0+255),b
 14224  000C34  EC67  F00E         	call	_printf	;wreg free
 14225                           
 14226                           ;Test.c: 297: updateServoPosition(500, 1);
 14227  000C38  0E01               	movlw	1
 14228  000C3A  0100               	movlb	0	; () banked
 14229  000C3C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14230  000C3E  0EF4               	movlw	244
 14231  000C40  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14232  000C42  0E00               	movlw	0
 14233  000C44  0100               	movlb	0	; () banked
 14234  000C46  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14235  000C48  0E01               	movlw	1
 14236  000C4A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14237  000C4C  EC27  F029         	call	_updateServoPosition	;wreg free
 14238                           
 14239                           ;Test.c: 298: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14240  000C50  0E00               	movlw	0
 14241  000C52  0100               	movlb	0	; () banked
 14242  000C54  6FB0               	movwf	actuatorTest@i_1757& (0+255),b
 14243  000C56                     l8714:
 14244                           
 14245                           ; BSR set to: 0
 14246  000C56  0E63               	movlw	99
 14247  000C58  0100               	movlb	0	; () banked
 14248  000C5A  65B0               	cpfsgt	actuatorTest@i_1757& (0+255),b
 14249  000C5C  D001               	goto	l8718
 14250  000C5E  D00C               	goto	l8722
 14251  000C60                     l8718:
 14252                           
 14253                           ; BSR set to: 0
 14254  000C60  0E68               	movlw	104
 14255  000C62  0100               	movlb	0	; () banked
 14256  000C64  6FAB               	movwf	??_actuatorTest& (0+255),b
 14257  000C66  0EE4               	movlw	228
 14258  000C68                     u11517:
 14259  000C68  2EE8               	decfsz	wreg,f,c
 14260  000C6A  D7FE               	bra	u11517
 14261  000C6C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14262  000C6E  D7FC               	bra	u11517
 14263  000C70  F000               	nop	
 14264  000C72  0100               	movlb	0	; () banked
 14265  000C74  2BB0               	incf	actuatorTest@i_1757& (0+255),f,b
 14266  000C76  D7EF               	goto	l8714
 14267  000C78                     l8722:
 14268                           
 14269                           ; BSR set to: 0
 14270  000C78  0E00               	movlw	0
 14271  000C7A  0100               	movlb	0	; () banked
 14272  000C7C  6FB1               	movwf	actuatorTest@i_1758& (0+255),b
 14273  000C7E                     l8724:
 14274                           
 14275                           ; BSR set to: 0
 14276  000C7E  0E63               	movlw	99
 14277  000C80  0100               	movlb	0	; () banked
 14278  000C82  65B1               	cpfsgt	actuatorTest@i_1758& (0+255),b
 14279  000C84  D001               	goto	l8728
 14280  000C86  D00C               	goto	l8732
 14281  000C88                     l8728:
 14282                           
 14283                           ; BSR set to: 0
 14284  000C88  0E68               	movlw	104
 14285  000C8A  0100               	movlb	0	; () banked
 14286  000C8C  6FAB               	movwf	??_actuatorTest& (0+255),b
 14287  000C8E  0EE4               	movlw	228
 14288  000C90                     u11527:
 14289  000C90  2EE8               	decfsz	wreg,f,c
 14290  000C92  D7FE               	bra	u11527
 14291  000C94  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14292  000C96  D7FC               	bra	u11527
 14293  000C98  F000               	nop	
 14294  000C9A  0100               	movlb	0	; () banked
 14295  000C9C  2BB1               	incf	actuatorTest@i_1758& (0+255),f,b
 14296  000C9E  D7EF               	goto	l8724
 14297  000CA0                     l8732:
 14298                           
 14299                           ; BSR set to: 0
 14300                           ;Test.c: 300: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14301  000CA0  0E80               	movlw	128
 14302  000CA2  ECAF  F02F         	call	_lcdInst
 14303  000CA6  0EC0               	movlw	192
 14304  000CA8  ECAF  F02F         	call	_lcdInst
 14305                           
 14306                           ;Test.c: 301: printf("LEFT -- 2s      ");
 14307  000CAC  0EB3               	movlw	low STR_100
 14308  000CAE  0100               	movlb	0	; () banked
 14309  000CB0  6F8E               	movwf	printf@f& (0+255),b
 14310  000CB2  0EFB               	movlw	high STR_100
 14311  000CB4  0100               	movlb	0	; () banked
 14312  000CB6  6F8F               	movwf	(printf@f+1)& (0+255),b
 14313  000CB8  EC67  F00E         	call	_printf	;wreg free
 14314                           
 14315                           ;Test.c: 302: updateServoPosition(2400, 1);
 14316  000CBC  0E09               	movlw	9
 14317  000CBE  0100               	movlb	0	; () banked
 14318  000CC0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14319  000CC2  0E60               	movlw	96
 14320  000CC4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14321  000CC6  0E00               	movlw	0
 14322  000CC8  0100               	movlb	0	; () banked
 14323  000CCA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14324  000CCC  0E01               	movlw	1
 14325  000CCE  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14326  000CD0  EC27  F029         	call	_updateServoPosition	;wreg free
 14327                           
 14328                           ;Test.c: 303: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14329  000CD4  0E00               	movlw	0
 14330  000CD6  0100               	movlb	0	; () banked
 14331  000CD8  6FB2               	movwf	actuatorTest@i_1760& (0+255),b
 14332  000CDA                     l8740:
 14333                           
 14334                           ; BSR set to: 0
 14335  000CDA  0E63               	movlw	99
 14336  000CDC  0100               	movlb	0	; () banked
 14337  000CDE  65B2               	cpfsgt	actuatorTest@i_1760& (0+255),b
 14338  000CE0  D001               	goto	l8744
 14339  000CE2  D00C               	goto	l8748
 14340  000CE4                     l8744:
 14341                           
 14342                           ; BSR set to: 0
 14343  000CE4  0E68               	movlw	104
 14344  000CE6  0100               	movlb	0	; () banked
 14345  000CE8  6FAB               	movwf	??_actuatorTest& (0+255),b
 14346  000CEA  0EE4               	movlw	228
 14347  000CEC                     u11537:
 14348  000CEC  2EE8               	decfsz	wreg,f,c
 14349  000CEE  D7FE               	bra	u11537
 14350  000CF0  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14351  000CF2  D7FC               	bra	u11537
 14352  000CF4  F000               	nop	
 14353  000CF6  0100               	movlb	0	; () banked
 14354  000CF8  2BB2               	incf	actuatorTest@i_1760& (0+255),f,b
 14355  000CFA  D7EF               	goto	l8740
 14356  000CFC                     l8748:
 14357                           
 14358                           ; BSR set to: 0
 14359  000CFC  0E00               	movlw	0
 14360  000CFE  0100               	movlb	0	; () banked
 14361  000D00  6FB3               	movwf	actuatorTest@i_1761& (0+255),b
 14362  000D02                     l8750:
 14363                           
 14364                           ; BSR set to: 0
 14365  000D02  0E63               	movlw	99
 14366  000D04  0100               	movlb	0	; () banked
 14367  000D06  65B3               	cpfsgt	actuatorTest@i_1761& (0+255),b
 14368  000D08  D001               	goto	l8754
 14369  000D0A  D00C               	goto	l8758
 14370  000D0C                     l8754:
 14371                           
 14372                           ; BSR set to: 0
 14373  000D0C  0E68               	movlw	104
 14374  000D0E  0100               	movlb	0	; () banked
 14375  000D10  6FAB               	movwf	??_actuatorTest& (0+255),b
 14376  000D12  0EE4               	movlw	228
 14377  000D14                     u11547:
 14378  000D14  2EE8               	decfsz	wreg,f,c
 14379  000D16  D7FE               	bra	u11547
 14380  000D18  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14381  000D1A  D7FC               	bra	u11547
 14382  000D1C  F000               	nop	
 14383  000D1E  0100               	movlb	0	; () banked
 14384  000D20  2BB3               	incf	actuatorTest@i_1761& (0+255),f,b
 14385  000D22  D7EF               	goto	l8750
 14386  000D24                     l8758:
 14387                           
 14388                           ; BSR set to: 0
 14389                           ;Test.c: 305: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14390  000D24  0E80               	movlw	128
 14391  000D26  ECAF  F02F         	call	_lcdInst
 14392  000D2A  0EC0               	movlw	192
 14393  000D2C  ECAF  F02F         	call	_lcdInst
 14394                           
 14395                           ;Test.c: 306: printf("MID-LEFT -- 2s  ");
 14396  000D30  0E3B               	movlw	low STR_101
 14397  000D32  0100               	movlb	0	; () banked
 14398  000D34  6F8E               	movwf	printf@f& (0+255),b
 14399  000D36  0EFC               	movlw	high STR_101
 14400  000D38  0100               	movlb	0	; () banked
 14401  000D3A  6F8F               	movwf	(printf@f+1)& (0+255),b
 14402  000D3C  EC67  F00E         	call	_printf	;wreg free
 14403                           
 14404                           ;Test.c: 307: updateServoPosition(1670, 1);
 14405  000D40  0E06               	movlw	6
 14406  000D42  0100               	movlb	0	; () banked
 14407  000D44  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14408  000D46  0E86               	movlw	134
 14409  000D48  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14410  000D4A  0E00               	movlw	0
 14411  000D4C  0100               	movlb	0	; () banked
 14412  000D4E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14413  000D50  0E01               	movlw	1
 14414  000D52  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14415  000D54  EC27  F029         	call	_updateServoPosition	;wreg free
 14416                           
 14417                           ;Test.c: 308: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14418  000D58  0E00               	movlw	0
 14419  000D5A  0100               	movlb	0	; () banked
 14420  000D5C  6FB4               	movwf	actuatorTest@i_1763& (0+255),b
 14421  000D5E                     l8766:
 14422                           
 14423                           ; BSR set to: 0
 14424  000D5E  0E63               	movlw	99
 14425  000D60  0100               	movlb	0	; () banked
 14426  000D62  65B4               	cpfsgt	actuatorTest@i_1763& (0+255),b
 14427  000D64  D001               	goto	l8770
 14428  000D66  D00C               	goto	l8774
 14429  000D68                     l8770:
 14430                           
 14431                           ; BSR set to: 0
 14432  000D68  0E68               	movlw	104
 14433  000D6A  0100               	movlb	0	; () banked
 14434  000D6C  6FAB               	movwf	??_actuatorTest& (0+255),b
 14435  000D6E  0EE4               	movlw	228
 14436  000D70                     u11557:
 14437  000D70  2EE8               	decfsz	wreg,f,c
 14438  000D72  D7FE               	bra	u11557
 14439  000D74  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14440  000D76  D7FC               	bra	u11557
 14441  000D78  F000               	nop	
 14442  000D7A  0100               	movlb	0	; () banked
 14443  000D7C  2BB4               	incf	actuatorTest@i_1763& (0+255),f,b
 14444  000D7E  D7EF               	goto	l8766
 14445  000D80                     l8774:
 14446                           
 14447                           ; BSR set to: 0
 14448  000D80  0E00               	movlw	0
 14449  000D82  0100               	movlb	0	; () banked
 14450  000D84  6FB5               	movwf	actuatorTest@i_1764& (0+255),b
 14451  000D86                     l8776:
 14452                           
 14453                           ; BSR set to: 0
 14454  000D86  0E63               	movlw	99
 14455  000D88  0100               	movlb	0	; () banked
 14456  000D8A  65B5               	cpfsgt	actuatorTest@i_1764& (0+255),b
 14457  000D8C  D001               	goto	l8780
 14458  000D8E  D00C               	goto	l8784
 14459  000D90                     l8780:
 14460                           
 14461                           ; BSR set to: 0
 14462  000D90  0E68               	movlw	104
 14463  000D92  0100               	movlb	0	; () banked
 14464  000D94  6FAB               	movwf	??_actuatorTest& (0+255),b
 14465  000D96  0EE4               	movlw	228
 14466  000D98                     u11567:
 14467  000D98  2EE8               	decfsz	wreg,f,c
 14468  000D9A  D7FE               	bra	u11567
 14469  000D9C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14470  000D9E  D7FC               	bra	u11567
 14471  000DA0  F000               	nop	
 14472  000DA2  0100               	movlb	0	; () banked
 14473  000DA4  2BB5               	incf	actuatorTest@i_1764& (0+255),f,b
 14474  000DA6  D7EF               	goto	l8776
 14475  000DA8                     l8784:
 14476                           
 14477                           ; BSR set to: 0
 14478                           ;Test.c: 310: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14479  000DA8  0E80               	movlw	128
 14480  000DAA  ECAF  F02F         	call	_lcdInst
 14481  000DAE  0EC0               	movlw	192
 14482  000DB0  ECAF  F02F         	call	_lcdInst
 14483                           
 14484                           ;Test.c: 311: printf("MID-RIGHT -- 2s ");
 14485  000DB4  0E4C               	movlw	low STR_102
 14486  000DB6  0100               	movlb	0	; () banked
 14487  000DB8  6F8E               	movwf	printf@f& (0+255),b
 14488  000DBA  0EFC               	movlw	high STR_102
 14489  000DBC  0100               	movlb	0	; () banked
 14490  000DBE  6F8F               	movwf	(printf@f+1)& (0+255),b
 14491  000DC0  EC67  F00E         	call	_printf	;wreg free
 14492                           
 14493                           ;Test.c: 312: updateServoPosition(850, 1);
 14494  000DC4  0E03               	movlw	3
 14495  000DC6  0100               	movlb	0	; () banked
 14496  000DC8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14497  000DCA  0E52               	movlw	82
 14498  000DCC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14499  000DCE  0E00               	movlw	0
 14500  000DD0  0100               	movlb	0	; () banked
 14501  000DD2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14502  000DD4  0E01               	movlw	1
 14503  000DD6  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14504  000DD8  EC27  F029         	call	_updateServoPosition	;wreg free
 14505                           
 14506                           ;Test.c: 313: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14507  000DDC  0E00               	movlw	0
 14508  000DDE  0100               	movlb	0	; () banked
 14509  000DE0  6FB6               	movwf	actuatorTest@i_1766& (0+255),b
 14510  000DE2                     l8792:
 14511                           
 14512                           ; BSR set to: 0
 14513  000DE2  0E63               	movlw	99
 14514  000DE4  0100               	movlb	0	; () banked
 14515  000DE6  65B6               	cpfsgt	actuatorTest@i_1766& (0+255),b
 14516  000DE8  D001               	goto	l8796
 14517  000DEA  D00C               	goto	l8800
 14518  000DEC                     l8796:
 14519                           
 14520                           ; BSR set to: 0
 14521  000DEC  0E68               	movlw	104
 14522  000DEE  0100               	movlb	0	; () banked
 14523  000DF0  6FAB               	movwf	??_actuatorTest& (0+255),b
 14524  000DF2  0EE4               	movlw	228
 14525  000DF4                     u11577:
 14526  000DF4  2EE8               	decfsz	wreg,f,c
 14527  000DF6  D7FE               	bra	u11577
 14528  000DF8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14529  000DFA  D7FC               	bra	u11577
 14530  000DFC  F000               	nop	
 14531  000DFE  0100               	movlb	0	; () banked
 14532  000E00  2BB6               	incf	actuatorTest@i_1766& (0+255),f,b
 14533  000E02  D7EF               	goto	l8792
 14534  000E04                     l8800:
 14535                           
 14536                           ; BSR set to: 0
 14537  000E04  0E00               	movlw	0
 14538  000E06  0100               	movlb	0	; () banked
 14539  000E08  6FB7               	movwf	actuatorTest@i_1767& (0+255),b
 14540  000E0A                     l8802:
 14541                           
 14542                           ; BSR set to: 0
 14543  000E0A  0E63               	movlw	99
 14544  000E0C  0100               	movlb	0	; () banked
 14545  000E0E  65B7               	cpfsgt	actuatorTest@i_1767& (0+255),b
 14546  000E10  D001               	goto	l8806
 14547  000E12  D00C               	goto	l8810
 14548  000E14                     l8806:
 14549                           
 14550                           ; BSR set to: 0
 14551  000E14  0E68               	movlw	104
 14552  000E16  0100               	movlb	0	; () banked
 14553  000E18  6FAB               	movwf	??_actuatorTest& (0+255),b
 14554  000E1A  0EE4               	movlw	228
 14555  000E1C                     u11587:
 14556  000E1C  2EE8               	decfsz	wreg,f,c
 14557  000E1E  D7FE               	bra	u11587
 14558  000E20  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14559  000E22  D7FC               	bra	u11587
 14560  000E24  F000               	nop	
 14561  000E26  0100               	movlb	0	; () banked
 14562  000E28  2BB7               	incf	actuatorTest@i_1767& (0+255),f,b
 14563  000E2A  D7EF               	goto	l8802
 14564  000E2C                     l8810:
 14565                           
 14566                           ; BSR set to: 0
 14567                           ;Test.c: 315: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14568  000E2C  0E80               	movlw	128
 14569  000E2E  ECAF  F02F         	call	_lcdInst
 14570  000E32  0EC0               	movlw	192
 14571  000E34  ECAF  F02F         	call	_lcdInst
 14572                           
 14573                           ;Test.c: 316: printf("MID -- 2s       ");
 14574  000E38  0E91               	movlw	low STR_103
 14575  000E3A  0100               	movlb	0	; () banked
 14576  000E3C  6F8E               	movwf	printf@f& (0+255),b
 14577  000E3E  0EFB               	movlw	high STR_103
 14578  000E40  0100               	movlb	0	; () banked
 14579  000E42  6F8F               	movwf	(printf@f+1)& (0+255),b
 14580  000E44  EC67  F00E         	call	_printf	;wreg free
 14581                           
 14582                           ;Test.c: 317: updateServoPosition(1200, 1);
 14583  000E48  0E04               	movlw	4
 14584  000E4A  0100               	movlb	0	; () banked
 14585  000E4C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14586  000E4E  0EB0               	movlw	176
 14587  000E50  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14588  000E52  0E00               	movlw	0
 14589  000E54  0100               	movlb	0	; () banked
 14590  000E56  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14591  000E58  0E01               	movlw	1
 14592  000E5A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14593  000E5C  EC27  F029         	call	_updateServoPosition	;wreg free
 14594                           
 14595                           ;Test.c: 318: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14596  000E60  0E00               	movlw	0
 14597  000E62  0100               	movlb	0	; () banked
 14598  000E64  6FB8               	movwf	actuatorTest@i_1769& (0+255),b
 14599  000E66                     l8818:
 14600                           
 14601                           ; BSR set to: 0
 14602  000E66  0E63               	movlw	99
 14603  000E68  0100               	movlb	0	; () banked
 14604  000E6A  65B8               	cpfsgt	actuatorTest@i_1769& (0+255),b
 14605  000E6C  D001               	goto	l8822
 14606  000E6E  D00C               	goto	l8826
 14607  000E70                     l8822:
 14608                           
 14609                           ; BSR set to: 0
 14610  000E70  0E68               	movlw	104
 14611  000E72  0100               	movlb	0	; () banked
 14612  000E74  6FAB               	movwf	??_actuatorTest& (0+255),b
 14613  000E76  0EE4               	movlw	228
 14614  000E78                     u11597:
 14615  000E78  2EE8               	decfsz	wreg,f,c
 14616  000E7A  D7FE               	bra	u11597
 14617  000E7C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14618  000E7E  D7FC               	bra	u11597
 14619  000E80  F000               	nop	
 14620  000E82  0100               	movlb	0	; () banked
 14621  000E84  2BB8               	incf	actuatorTest@i_1769& (0+255),f,b
 14622  000E86  D7EF               	goto	l8818
 14623  000E88                     l8826:
 14624                           
 14625                           ; BSR set to: 0
 14626  000E88  0E00               	movlw	0
 14627  000E8A  0100               	movlb	0	; () banked
 14628  000E8C  6FB9               	movwf	actuatorTest@i_1770& (0+255),b
 14629  000E8E                     l8828:
 14630                           
 14631                           ; BSR set to: 0
 14632  000E8E  0E63               	movlw	99
 14633  000E90  0100               	movlb	0	; () banked
 14634  000E92  65B9               	cpfsgt	actuatorTest@i_1770& (0+255),b
 14635  000E94  D001               	goto	l8832
 14636  000E96  D00C               	goto	l1372
 14637  000E98                     l8832:
 14638                           
 14639                           ; BSR set to: 0
 14640  000E98  0E68               	movlw	104
 14641  000E9A  0100               	movlb	0	; () banked
 14642  000E9C  6FAB               	movwf	??_actuatorTest& (0+255),b
 14643  000E9E  0EE4               	movlw	228
 14644  000EA0                     u11607:
 14645  000EA0  2EE8               	decfsz	wreg,f,c
 14646  000EA2  D7FE               	bra	u11607
 14647  000EA4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14648  000EA6  D7FC               	bra	u11607
 14649  000EA8  F000               	nop	
 14650  000EAA  0100               	movlb	0	; () banked
 14651  000EAC  2BB9               	incf	actuatorTest@i_1770& (0+255),f,b
 14652  000EAE  D7EF               	goto	l8828
 14653  000EB0                     l1372:
 14654                           
 14655                           ; BSR set to: 0
 14656                           ;Test.c: 319: TMR1ON = 0;
 14657  000EB0  90CD               	bcf	4045,0,c	;volatile
 14658                           
 14659                           ; BSR set to: 0
 14660                           ;Test.c: 326: printf("TST: TILT SERVO");
 14661  000EB2  0E49               	movlw	low STR_104
 14662  000EB4  0100               	movlb	0	; () banked
 14663  000EB6  6F8E               	movwf	printf@f& (0+255),b
 14664  000EB8  0EFE               	movlw	high STR_104
 14665  000EBA  0100               	movlb	0	; () banked
 14666  000EBC  6F8F               	movwf	(printf@f+1)& (0+255),b
 14667  000EBE  EC67  F00E         	call	_printf	;wreg free
 14668                           
 14669                           ;Test.c: 327: lcdInst(0b11000000);;
 14670  000EC2  0EC0               	movlw	192
 14671  000EC4  ECAF  F02F         	call	_lcdInst
 14672                           
 14673                           ;Test.c: 328: printf("LEVEL -- 2s     ");
 14674  000EC8  0EC4               	movlw	low STR_105
 14675  000ECA  0100               	movlb	0	; () banked
 14676  000ECC  6F8E               	movwf	printf@f& (0+255),b
 14677  000ECE  0EFB               	movlw	high STR_105
 14678  000ED0  0100               	movlb	0	; () banked
 14679  000ED2  6F8F               	movwf	(printf@f+1)& (0+255),b
 14680  000ED4  EC67  F00E         	call	_printf	;wreg free
 14681                           
 14682                           ;Test.c: 329: updateServoPosition(1050, 3);
 14683  000ED8  0E04               	movlw	4
 14684  000EDA  0100               	movlb	0	; () banked
 14685  000EDC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14686  000EDE  0E1A               	movlw	26
 14687  000EE0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14688  000EE2  0E00               	movlw	0
 14689  000EE4  0100               	movlb	0	; () banked
 14690  000EE6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14691  000EE8  0E03               	movlw	3
 14692  000EEA  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14693  000EEC  EC27  F029         	call	_updateServoPosition	;wreg free
 14694                           
 14695                           ;Test.c: 330: TMR3ON = 1;
 14696  000EF0  80B1               	bsf	4017,0,c	;volatile
 14697                           
 14698                           ;Test.c: 331: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14699  000EF2  0E00               	movlw	0
 14700  000EF4  0100               	movlb	0	; () banked
 14701  000EF6  6FBA               	movwf	actuatorTest@i_1773& (0+255),b
 14702  000EF8                     l8846:
 14703                           
 14704                           ; BSR set to: 0
 14705  000EF8  0E63               	movlw	99
 14706  000EFA  0100               	movlb	0	; () banked
 14707  000EFC  65BA               	cpfsgt	actuatorTest@i_1773& (0+255),b
 14708  000EFE  D001               	goto	l8850
 14709  000F00  D00C               	goto	l8854
 14710  000F02                     l8850:
 14711                           
 14712                           ; BSR set to: 0
 14713  000F02  0E68               	movlw	104
 14714  000F04  0100               	movlb	0	; () banked
 14715  000F06  6FAB               	movwf	??_actuatorTest& (0+255),b
 14716  000F08  0EE4               	movlw	228
 14717  000F0A                     u11617:
 14718  000F0A  2EE8               	decfsz	wreg,f,c
 14719  000F0C  D7FE               	bra	u11617
 14720  000F0E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14721  000F10  D7FC               	bra	u11617
 14722  000F12  F000               	nop	
 14723  000F14  0100               	movlb	0	; () banked
 14724  000F16  2BBA               	incf	actuatorTest@i_1773& (0+255),f,b
 14725  000F18  D7EF               	goto	l8846
 14726  000F1A                     l8854:
 14727                           
 14728                           ; BSR set to: 0
 14729  000F1A  0E00               	movlw	0
 14730  000F1C  0100               	movlb	0	; () banked
 14731  000F1E  6FBB               	movwf	actuatorTest@i_1774& (0+255),b
 14732  000F20                     l8856:
 14733                           
 14734                           ; BSR set to: 0
 14735  000F20  0E63               	movlw	99
 14736  000F22  0100               	movlb	0	; () banked
 14737  000F24  65BB               	cpfsgt	actuatorTest@i_1774& (0+255),b
 14738  000F26  D001               	goto	l8860
 14739  000F28  D00C               	goto	l8864
 14740  000F2A                     l8860:
 14741                           
 14742                           ; BSR set to: 0
 14743  000F2A  0E68               	movlw	104
 14744  000F2C  0100               	movlb	0	; () banked
 14745  000F2E  6FAB               	movwf	??_actuatorTest& (0+255),b
 14746  000F30  0EE4               	movlw	228
 14747  000F32                     u11627:
 14748  000F32  2EE8               	decfsz	wreg,f,c
 14749  000F34  D7FE               	bra	u11627
 14750  000F36  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14751  000F38  D7FC               	bra	u11627
 14752  000F3A  F000               	nop	
 14753  000F3C  0100               	movlb	0	; () banked
 14754  000F3E  2BBB               	incf	actuatorTest@i_1774& (0+255),f,b
 14755  000F40  D7EF               	goto	l8856
 14756  000F42                     l8864:
 14757                           
 14758                           ; BSR set to: 0
 14759                           ;Test.c: 333: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14760  000F42  0E80               	movlw	128
 14761  000F44  ECAF  F02F         	call	_lcdInst
 14762  000F48  0EC0               	movlw	192
 14763  000F4A  ECAF  F02F         	call	_lcdInst
 14764                           
 14765                           ;Test.c: 334: printf("DROP -- 2s      ");
 14766  000F4E  0EA2               	movlw	low STR_106
 14767  000F50  0100               	movlb	0	; () banked
 14768  000F52  6F8E               	movwf	printf@f& (0+255),b
 14769  000F54  0EFB               	movlw	high STR_106
 14770  000F56  0100               	movlb	0	; () banked
 14771  000F58  6F8F               	movwf	(printf@f+1)& (0+255),b
 14772  000F5A  EC67  F00E         	call	_printf	;wreg free
 14773                           
 14774                           ;Test.c: 335: updateServoPosition(1260, 3);
 14775  000F5E  0E04               	movlw	4
 14776  000F60  0100               	movlb	0	; () banked
 14777  000F62  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14778  000F64  0EEC               	movlw	236
 14779  000F66  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14780  000F68  0E00               	movlw	0
 14781  000F6A  0100               	movlb	0	; () banked
 14782  000F6C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14783  000F6E  0E03               	movlw	3
 14784  000F70  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14785  000F72  EC27  F029         	call	_updateServoPosition	;wreg free
 14786                           
 14787                           ;Test.c: 336: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14788  000F76  0E00               	movlw	0
 14789  000F78  0100               	movlb	0	; () banked
 14790  000F7A  6FBC               	movwf	actuatorTest@i_1776& (0+255),b
 14791  000F7C                     l8872:
 14792                           
 14793                           ; BSR set to: 0
 14794  000F7C  0E63               	movlw	99
 14795  000F7E  0100               	movlb	0	; () banked
 14796  000F80  65BC               	cpfsgt	actuatorTest@i_1776& (0+255),b
 14797  000F82  D001               	goto	l8876
 14798  000F84  D00C               	goto	l8880
 14799  000F86                     l8876:
 14800                           
 14801                           ; BSR set to: 0
 14802  000F86  0E68               	movlw	104
 14803  000F88  0100               	movlb	0	; () banked
 14804  000F8A  6FAB               	movwf	??_actuatorTest& (0+255),b
 14805  000F8C  0EE4               	movlw	228
 14806  000F8E                     u11637:
 14807  000F8E  2EE8               	decfsz	wreg,f,c
 14808  000F90  D7FE               	bra	u11637
 14809  000F92  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14810  000F94  D7FC               	bra	u11637
 14811  000F96  F000               	nop	
 14812  000F98  0100               	movlb	0	; () banked
 14813  000F9A  2BBC               	incf	actuatorTest@i_1776& (0+255),f,b
 14814  000F9C  D7EF               	goto	l8872
 14815  000F9E                     l8880:
 14816                           
 14817                           ; BSR set to: 0
 14818  000F9E  0E00               	movlw	0
 14819  000FA0  0100               	movlb	0	; () banked
 14820  000FA2  6FBD               	movwf	actuatorTest@i_1777& (0+255),b
 14821  000FA4                     l8882:
 14822                           
 14823                           ; BSR set to: 0
 14824  000FA4  0E63               	movlw	99
 14825  000FA6  0100               	movlb	0	; () banked
 14826  000FA8  65BD               	cpfsgt	actuatorTest@i_1777& (0+255),b
 14827  000FAA  D001               	goto	l8886
 14828  000FAC  D00C               	goto	l8890
 14829  000FAE                     l8886:
 14830                           
 14831                           ; BSR set to: 0
 14832  000FAE  0E68               	movlw	104
 14833  000FB0  0100               	movlb	0	; () banked
 14834  000FB2  6FAB               	movwf	??_actuatorTest& (0+255),b
 14835  000FB4  0EE4               	movlw	228
 14836  000FB6                     u11647:
 14837  000FB6  2EE8               	decfsz	wreg,f,c
 14838  000FB8  D7FE               	bra	u11647
 14839  000FBA  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14840  000FBC  D7FC               	bra	u11647
 14841  000FBE  F000               	nop	
 14842  000FC0  0100               	movlb	0	; () banked
 14843  000FC2  2BBD               	incf	actuatorTest@i_1777& (0+255),f,b
 14844  000FC4  D7EF               	goto	l8882
 14845  000FC6                     l8890:
 14846                           
 14847                           ; BSR set to: 0
 14848                           ;Test.c: 338: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14849  000FC6  0E80               	movlw	128
 14850  000FC8  ECAF  F02F         	call	_lcdInst
 14851  000FCC  0EC0               	movlw	192
 14852  000FCE  ECAF  F02F         	call	_lcdInst
 14853                           
 14854                           ;Test.c: 339: printf("LEVEL -- 2s     ");
 14855  000FD2  0EC4               	movlw	low STR_105
 14856  000FD4  0100               	movlb	0	; () banked
 14857  000FD6  6F8E               	movwf	printf@f& (0+255),b
 14858  000FD8  0EFB               	movlw	high STR_105
 14859  000FDA  0100               	movlb	0	; () banked
 14860  000FDC  6F8F               	movwf	(printf@f+1)& (0+255),b
 14861  000FDE  EC67  F00E         	call	_printf	;wreg free
 14862                           
 14863                           ;Test.c: 340: updateServoPosition(1050, 3);
 14864  000FE2  0E04               	movlw	4
 14865  000FE4  0100               	movlb	0	; () banked
 14866  000FE6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14867  000FE8  0E1A               	movlw	26
 14868  000FEA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14869  000FEC  0E00               	movlw	0
 14870  000FEE  0100               	movlb	0	; () banked
 14871  000FF0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14872  000FF2  0E03               	movlw	3
 14873  000FF4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14874  000FF6  EC27  F029         	call	_updateServoPosition	;wreg free
 14875                           
 14876                           ;Test.c: 341: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14877  000FFA  0E00               	movlw	0
 14878  000FFC  0100               	movlb	0	; () banked
 14879  000FFE  6FBE               	movwf	actuatorTest@i_1779& (0+255),b
 14880  001000                     l8898:
 14881                           
 14882                           ; BSR set to: 0
 14883  001000  0E63               	movlw	99
 14884  001002  0100               	movlb	0	; () banked
 14885  001004  65BE               	cpfsgt	actuatorTest@i_1779& (0+255),b
 14886  001006  D001               	goto	l8902
 14887  001008  D00C               	goto	l8906
 14888  00100A                     l8902:
 14889                           
 14890                           ; BSR set to: 0
 14891  00100A  0E68               	movlw	104
 14892  00100C  0100               	movlb	0	; () banked
 14893  00100E  6FAB               	movwf	??_actuatorTest& (0+255),b
 14894  001010  0EE4               	movlw	228
 14895  001012                     u11657:
 14896  001012  2EE8               	decfsz	wreg,f,c
 14897  001014  D7FE               	bra	u11657
 14898  001016  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14899  001018  D7FC               	bra	u11657
 14900  00101A  F000               	nop	
 14901  00101C  0100               	movlb	0	; () banked
 14902  00101E  2BBE               	incf	actuatorTest@i_1779& (0+255),f,b
 14903  001020  D7EF               	goto	l8898
 14904  001022                     l8906:
 14905                           
 14906                           ; BSR set to: 0
 14907  001022  0E00               	movlw	0
 14908  001024  0100               	movlb	0	; () banked
 14909  001026  6FBF               	movwf	actuatorTest@i_1780& (0+255),b
 14910  001028                     l8908:
 14911                           
 14912                           ; BSR set to: 0
 14913  001028  0E63               	movlw	99
 14914  00102A  0100               	movlb	0	; () banked
 14915  00102C  65BF               	cpfsgt	actuatorTest@i_1780& (0+255),b
 14916  00102E  D001               	goto	l8912
 14917  001030  D00C               	goto	l1384
 14918  001032                     l8912:
 14919                           
 14920                           ; BSR set to: 0
 14921  001032  0E68               	movlw	104
 14922  001034  0100               	movlb	0	; () banked
 14923  001036  6FAB               	movwf	??_actuatorTest& (0+255),b
 14924  001038  0EE4               	movlw	228
 14925  00103A                     u11667:
 14926  00103A  2EE8               	decfsz	wreg,f,c
 14927  00103C  D7FE               	bra	u11667
 14928  00103E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14929  001040  D7FC               	bra	u11667
 14930  001042  F000               	nop	
 14931  001044  0100               	movlb	0	; () banked
 14932  001046  2BBF               	incf	actuatorTest@i_1780& (0+255),f,b
 14933  001048  D7EF               	goto	l8908
 14934  00104A                     l1384:
 14935                           
 14936                           ; BSR set to: 0
 14937                           ;Test.c: 342: TMR3ON = 0;
 14938  00104A  90B1               	bcf	4017,0,c	;volatile
 14939                           
 14940                           ;Test.c: 343: (INTCONbits.GIE = 0);
 14941  00104C  9EF2               	bcf	intcon,7,c	;volatile
 14942                           
 14943                           ; BSR set to: 0
 14944                           ;Test.c: 348: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14945  00104E  0E01               	movlw	1
 14946  001050  ECAF  F02F         	call	_lcdInst
 14947  001054  0E68               	movlw	104
 14948  001056  0100               	movlb	0	; () banked
 14949  001058  6FAB               	movwf	??_actuatorTest& (0+255),b
 14950  00105A  0EE4               	movlw	228
 14951  00105C                     u11677:
 14952  00105C  2EE8               	decfsz	wreg,f,c
 14953  00105E  D7FE               	bra	u11677
 14954  001060  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14955  001062  D7FC               	bra	u11677
 14956  001064  F000               	nop	
 14957  001066  0E80               	movlw	128
 14958  001068  ECAF  F02F         	call	_lcdInst
 14959                           
 14960                           ;Test.c: 349: printf("TST: CAM SERVO");
 14961  00106C  0EC5               	movlw	low STR_108
 14962  00106E  0100               	movlb	0	; () banked
 14963  001070  6F8E               	movwf	printf@f& (0+255),b
 14964  001072  0EFE               	movlw	high STR_108
 14965  001074  0100               	movlb	0	; () banked
 14966  001076  6F8F               	movwf	(printf@f+1)& (0+255),b
 14967  001078  EC67  F00E         	call	_printf	;wreg free
 14968                           
 14969                           ;Test.c: 350: lcdInst(0b11000000);;
 14970  00107C  0EC0               	movlw	192
 14971  00107E  ECAF  F02F         	call	_lcdInst
 14972                           
 14973                           ;Test.c: 351: printf("CAM UP  |RC0=1");
 14974  001082  0EA7               	movlw	low STR_109
 14975  001084  0100               	movlb	0	; () banked
 14976  001086  6F8E               	movwf	printf@f& (0+255),b
 14977  001088  0EFE               	movlw	high STR_109
 14978  00108A  0100               	movlb	0	; () banked
 14979  00108C  6F8F               	movwf	(printf@f+1)& (0+255),b
 14980  00108E  EC67  F00E         	call	_printf	;wreg free
 14981                           
 14982                           ;Test.c: 352: LATCbits.LATC0 = 1;
 14983  001092  808B               	bsf	3979,0,c	;volatile
 14984                           
 14985                           ;Test.c: 353: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14986  001094  0E00               	movlw	0
 14987  001096  0100               	movlb	0	; () banked
 14988  001098  6FC0               	movwf	actuatorTest@i_1783& (0+255),b
 14989  00109A                     l8932:
 14990                           
 14991                           ; BSR set to: 0
 14992  00109A  0E63               	movlw	99
 14993  00109C  0100               	movlb	0	; () banked
 14994  00109E  65C0               	cpfsgt	actuatorTest@i_1783& (0+255),b
 14995  0010A0  D001               	goto	l8936
 14996  0010A2  D00C               	goto	l8940
 14997  0010A4                     l8936:
 14998                           
 14999                           ; BSR set to: 0
 15000  0010A4  0E68               	movlw	104
 15001  0010A6  0100               	movlb	0	; () banked
 15002  0010A8  6FAB               	movwf	??_actuatorTest& (0+255),b
 15003  0010AA  0EE4               	movlw	228
 15004  0010AC                     u11687:
 15005  0010AC  2EE8               	decfsz	wreg,f,c
 15006  0010AE  D7FE               	bra	u11687
 15007  0010B0  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 15008  0010B2  D7FC               	bra	u11687
 15009  0010B4  F000               	nop	
 15010  0010B6  0100               	movlb	0	; () banked
 15011  0010B8  2BC0               	incf	actuatorTest@i_1783& (0+255),f,b
 15012  0010BA  D7EF               	goto	l8932
 15013  0010BC                     l8940:
 15014                           
 15015                           ; BSR set to: 0
 15016  0010BC  0E00               	movlw	0
 15017  0010BE  0100               	movlb	0	; () banked
 15018  0010C0  6FC1               	movwf	actuatorTest@i_1784& (0+255),b
 15019  0010C2                     l8942:
 15020                           
 15021                           ; BSR set to: 0
 15022  0010C2  0E63               	movlw	99
 15023  0010C4  0100               	movlb	0	; () banked
 15024  0010C6  65C1               	cpfsgt	actuatorTest@i_1784& (0+255),b
 15025  0010C8  D001               	goto	l8946
 15026  0010CA  D00C               	goto	l8950
 15027  0010CC                     l8946:
 15028                           
 15029                           ; BSR set to: 0
 15030  0010CC  0E68               	movlw	104
 15031  0010CE  0100               	movlb	0	; () banked
 15032  0010D0  6FAB               	movwf	??_actuatorTest& (0+255),b
 15033  0010D2  0EE4               	movlw	228
 15034  0010D4                     u11697:
 15035  0010D4  2EE8               	decfsz	wreg,f,c
 15036  0010D6  D7FE               	bra	u11697
 15037  0010D8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 15038  0010DA  D7FC               	bra	u11697
 15039  0010DC  F000               	nop	
 15040  0010DE  0100               	movlb	0	; () banked
 15041  0010E0  2BC1               	incf	actuatorTest@i_1784& (0+255),f,b
 15042  0010E2  D7EF               	goto	l8942
 15043  0010E4                     l8950:
 15044                           
 15045                           ; BSR set to: 0
 15046                           ;Test.c: 354: lcdInst(0b10000000);;lcdInst(0b11000000);;
 15047  0010E4  0E80               	movlw	128
 15048  0010E6  ECAF  F02F         	call	_lcdInst
 15049  0010EA  0EC0               	movlw	192
 15050  0010EC  ECAF  F02F         	call	_lcdInst
 15051                           
 15052                           ;Test.c: 355: printf("CAM DWN |RC0=0");
 15053  0010F0  0E98               	movlw	low STR_110
 15054  0010F2  0100               	movlb	0	; () banked
 15055  0010F4  6F8E               	movwf	printf@f& (0+255),b
 15056  0010F6  0EFE               	movlw	high STR_110
 15057  0010F8  0100               	movlb	0	; () banked
 15058  0010FA  6F8F               	movwf	(printf@f+1)& (0+255),b
 15059  0010FC  EC67  F00E         	call	_printf	;wreg free
 15060                           
 15061                           ;Test.c: 358: for(i=0;i<10000;i++)
 15062  001100  0E00               	movlw	0
 15063  001102  0100               	movlb	0	; () banked
 15064  001104  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 15065  001106  0E00               	movlw	0
 15066  001108  6FC4               	movwf	actuatorTest@i& (0+255),b
 15067  00110A                     l8956:
 15068                           
 15069                           ; BSR set to: 0
 15070  00110A  0100               	movlb	0	; () banked
 15071  00110C  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 15072  00110E  D008               	goto	l1389
 15073  001110  0E10               	movlw	16
 15074  001112  0100               	movlb	0	; () banked
 15075  001114  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 15076  001116  0E27               	movlw	39
 15077  001118  0100               	movlb	0	; () banked
 15078  00111A  59C5               	subwfb	(actuatorTest@i+1)& (0+255),w,b
 15079  00111C  B0D8               	btfsc	status,0,c
 15080  00111E  D00D               	goto	l8966
 15081  001120                     l1389:
 15082                           
 15083                           ; BSR set to: 0
 15084                           ;Test.c: 359: {
 15085                           ;Test.c: 360: LATCbits.LATC0 = 1;
 15086  001120  808B               	bsf	3979,0,c	;volatile
 15087                           
 15088                           ; BSR set to: 0
 15089                           ;Test.c: 361: _delay((unsigned long)((10)*(32000000/4000000.0)));
 15090  001122  0E1A               	movlw	26
 15091  001124                     u11707:
 15092  001124  2EE8               	decfsz	wreg,f,c
 15093  001126  D7FE               	bra	u11707
 15094  001128  D000               	nop2	
 15095                           
 15096                           ;Test.c: 362: LATCbits.LATC0 = 0;
 15097  00112A  908B               	bcf	3979,0,c	;volatile
 15098                           
 15099                           ;Test.c: 363: _delay((unsigned long)((90)*(32000000/4000000.0)));
 15100  00112C  0EF0               	movlw	240
 15101  00112E                     u11717:
 15102  00112E  2EE8               	decfsz	wreg,f,c
 15103  001130  D7FE               	bra	u11717
 15104  001132  0100               	movlb	0	; () banked
 15105  001134  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 15106  001136  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 15107  001138  D7E8               	goto	l8956
 15108  00113A                     l8966:
 15109                           
 15110                           ; BSR set to: 0
 15111                           ;Test.c: 364: }
 15112                           ;Test.c: 366: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 15113  00113A  0E00               	movlw	0
 15114  00113C  0100               	movlb	0	; () banked
 15115  00113E  6FC2               	movwf	actuatorTest@i_1786& (0+255),b
 15116  001140                     l8968:
 15117                           
 15118                           ; BSR set to: 0
 15119  001140  0E63               	movlw	99
 15120  001142  0100               	movlb	0	; () banked
 15121  001144  65C2               	cpfsgt	actuatorTest@i_1786& (0+255),b
 15122  001146  D001               	goto	l8972
 15123  001148  D00C               	goto	l8976
 15124  00114A                     l8972:
 15125                           
 15126                           ; BSR set to: 0
 15127  00114A  0E68               	movlw	104
 15128  00114C  0100               	movlb	0	; () banked
 15129  00114E  6FAB               	movwf	??_actuatorTest& (0+255),b
 15130  001150  0EE4               	movlw	228
 15131  001152                     u11727:
 15132  001152  2EE8               	decfsz	wreg,f,c
 15133  001154  D7FE               	bra	u11727
 15134  001156  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 15135  001158  D7FC               	bra	u11727
 15136  00115A  F000               	nop	
 15137  00115C  0100               	movlb	0	; () banked
 15138  00115E  2BC2               	incf	actuatorTest@i_1786& (0+255),f,b
 15139  001160  D7EF               	goto	l8968
 15140  001162                     l8976:
 15141                           
 15142                           ; BSR set to: 0
 15143  001162  0E00               	movlw	0
 15144  001164  0100               	movlb	0	; () banked
 15145  001166  6FC3               	movwf	actuatorTest@i_1787& (0+255),b
 15146  001168                     l8978:
 15147                           
 15148                           ; BSR set to: 0
 15149  001168  0E63               	movlw	99
 15150  00116A  0100               	movlb	0	; () banked
 15151  00116C  65C3               	cpfsgt	actuatorTest@i_1787& (0+255),b
 15152  00116E  D001               	goto	l8982
 15153  001170  D00C               	goto	l8986
 15154  001172                     l8982:
 15155                           
 15156                           ; BSR set to: 0
 15157  001172  0E68               	movlw	104
 15158  001174  0100               	movlb	0	; () banked
 15159  001176  6FAB               	movwf	??_actuatorTest& (0+255),b
 15160  001178  0EE4               	movlw	228
 15161  00117A                     u11737:
 15162  00117A  2EE8               	decfsz	wreg,f,c
 15163  00117C  D7FE               	bra	u11737
 15164  00117E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 15165  001180  D7FC               	bra	u11737
 15166  001182  F000               	nop	
 15167  001184  0100               	movlb	0	; () banked
 15168  001186  2BC3               	incf	actuatorTest@i_1787& (0+255),f,b
 15169  001188  D7EF               	goto	l8978
 15170  00118A                     l8986:
 15171                           
 15172                           ; BSR set to: 0
 15173                           ;Test.c: 367: machine_state = Testing_state;
 15174  00118A  0E03               	movlw	3
 15175  00118C  0100               	movlb	0	; () banked
 15176  00118E  6FFC               	movwf	_machine_state& (0+255),b
 15177                           
 15178                           ; BSR set to: 0
 15179  001190  0012               	return		;funcret
 15180  001192                     __end_of_actuatorTest:
 15181                           	opt stack 0
 15182                           tblptru	equ	0xFF8
 15183                           tblptrh	equ	0xFF7
 15184                           tblptrl	equ	0xFF6
 15185                           tablat	equ	0xFF5
 15186                           prodh	equ	0xFF4
 15187                           prodl	equ	0xFF3
 15188                           intcon	equ	0xFF2
 15189                           intcon2	equ	0xFF1
 15190                           intcon3	equ	0xFF0
 15191                           postinc0	equ	0xFEE
 15192                           wreg	equ	0xFE8
 15193                           postdec1	equ	0xFE5
 15194                           fsr1l	equ	0xFE1
 15195                           indf2	equ	0xFDF
 15196                           postinc2	equ	0xFDE
 15197                           postdec2	equ	0xFDD
 15198                           fsr2h	equ	0xFDA
 15199                           fsr2l	equ	0xFD9
 15200                           status	equ	0xFD8
 15201                           
 15202 ;; *************** function _SpeedTest *****************
 15203 ;; Defined at:
 15204 ;;		line 546 in file "Test.c"
 15205 ;; Parameters:    Size  Location     Type
 15206 ;;		None
 15207 ;; Auto vars:     Size  Location     Type
 15208 ;;		None
 15209 ;; Return value:  Size  Location     Type
 15210 ;;                  1    wreg      void 
 15211 ;; Registers used:
 15212 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15213 ;; Tracked objects:
 15214 ;;		On entry : 0/0
 15215 ;;		On exit  : 0/0
 15216 ;;		Unchanged: 0/0
 15217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15218 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15219 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15220 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15221 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15222 ;;Total ram usage:        1 bytes
 15223 ;; Hardware stack levels used:    1
 15224 ;; Hardware stack levels required when called:   10
 15225 ;; This function calls:
 15226 ;;		_lcdInst
 15227 ;;		_printf
 15228 ;; This function is called by:
 15229 ;;		_Test
 15230 ;; This function uses a non-reentrant model
 15231 ;;
 15232                           
 15233                           	psect	text46
 15234  005148                     __ptext46:
 15235                           	opt stack 0
 15236  005148                     _SpeedTest:
 15237                           	opt stack 19
 15238                           
 15239                           ;Test.c: 548: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15240                           
 15241                           ; BSR set to: 0
 15242                           ;incstack = 0
 15243  005148  0E01               	movlw	1
 15244  00514A  ECAF  F02F         	call	_lcdInst
 15245  00514E  0E68               	movlw	104
 15246  005150  0100               	movlb	0	; () banked
 15247  005152  6FAB               	movwf	??_SpeedTest& (0+255),b
 15248  005154  0EE4               	movlw	228
 15249  005156                     u11747:
 15250  005156  2EE8               	decfsz	wreg,f,c
 15251  005158  D7FE               	bra	u11747
 15252  00515A  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 15253  00515C  D7FC               	bra	u11747
 15254  00515E  F000               	nop	
 15255  005160  0E80               	movlw	128
 15256  005162  ECAF  F02F         	call	_lcdInst
 15257                           
 15258                           ;Test.c: 549: printf("S: D WILL RETURN ");
 15259  005166  0E37               	movlw	low STR_119
 15260  005168  0100               	movlb	0	; () banked
 15261  00516A  6F8E               	movwf	printf@f& (0+255),b
 15262  00516C  0EFB               	movlw	high STR_119
 15263  00516E  0100               	movlb	0	; () banked
 15264  005170  6F8F               	movwf	(printf@f+1)& (0+255),b
 15265  005172  EC67  F00E         	call	_printf	;wreg free
 15266                           
 15267                           ;Test.c: 550: lcdInst(0b11000000);;
 15268  005176  0EC0               	movlw	192
 15269  005178  ECAF  F02F         	call	_lcdInst
 15270                           
 15271                           ;Test.c: 551: printf("OTHER SETS RA5   ");
 15272  00517C  0E01               	movlw	low STR_120
 15273  00517E  0100               	movlb	0	; () banked
 15274  005180  6F8E               	movwf	printf@f& (0+255),b
 15275  005182  0EFB               	movlw	high STR_120
 15276  005184  0100               	movlb	0	; () banked
 15277  005186  6F8F               	movwf	(printf@f+1)& (0+255),b
 15278  005188  EC67  F00E         	call	_printf	;wreg free
 15279  00518C                     l1459:
 15280  00518C  A281               	btfss	3969,1,c	;volatile
 15281  00518E  D7FE               	goto	l1459
 15282                           
 15283                           ;Test.c: 556: }
 15284                           ;Test.c: 557: if(PORTB >> 4 == 0b1111){
 15285  005190  3881               	swapf	3969,w,c	;volatile
 15286  005192  0B0F               	andlw	15
 15287  005194  0A0F               	xorlw	15
 15288  005196  B4D8               	btfsc	status,2,c
 15289  005198  0012               	return	
 15290  00519A  D014               	goto	l9098
 15291  00519C                     l1466:
 15292                           
 15293                           ;Test.c: 562: LATBbits.LATB2 = 1;
 15294  00519C  848A               	bsf	3978,2,c	;volatile
 15295                           
 15296                           ;Test.c: 563: _delay((unsigned long)((5)*(32000000/4000.0)));
 15297  00519E  0E34               	movlw	52
 15298  0051A0  0100               	movlb	0	; () banked
 15299  0051A2  6FAB               	movwf	??_SpeedTest& (0+255),b
 15300  0051A4  0EF1               	movlw	241
 15301  0051A6                     u11757:
 15302  0051A6  2EE8               	decfsz	wreg,f,c
 15303  0051A8  D7FE               	bra	u11757
 15304  0051AA  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 15305  0051AC  D7FC               	bra	u11757
 15306  0051AE  D000               	nop2	
 15307                           
 15308                           ;Test.c: 564: LATBbits.LATB2 = 0;
 15309  0051B0  948A               	bcf	3978,2,c	;volatile
 15310                           
 15311                           ;Test.c: 565: _delay((unsigned long)((5)*(32000000/4000.0)));
 15312  0051B2  0E34               	movlw	52
 15313  0051B4  0100               	movlb	0	; () banked
 15314  0051B6  6FAB               	movwf	??_SpeedTest& (0+255),b
 15315  0051B8  0EF1               	movlw	241
 15316  0051BA                     u11767:
 15317  0051BA  2EE8               	decfsz	wreg,f,c
 15318  0051BC  D7FE               	bra	u11767
 15319  0051BE  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 15320  0051C0  D7FC               	bra	u11767
 15321  0051C2  D000               	nop2	
 15322  0051C4                     l9098:
 15323  0051C4  B281               	btfsc	3969,1,c	;volatile
 15324  0051C6  D7EA               	goto	l1466
 15325                           
 15326                           ;Test.c: 568: }
 15327                           ;Test.c: 569: LATBbits.LATB2 = 0;
 15328  0051C8  948A               	bcf	3978,2,c	;volatile
 15329  0051CA  D7E0               	goto	l1459
 15330  0051CC                     __end_of_SpeedTest:
 15331                           	opt stack 0
 15332                           tblptru	equ	0xFF8
 15333                           tblptrh	equ	0xFF7
 15334                           tblptrl	equ	0xFF6
 15335                           tablat	equ	0xFF5
 15336                           prodh	equ	0xFF4
 15337                           prodl	equ	0xFF3
 15338                           intcon	equ	0xFF2
 15339                           intcon2	equ	0xFF1
 15340                           intcon3	equ	0xFF0
 15341                           postinc0	equ	0xFEE
 15342                           wreg	equ	0xFE8
 15343                           postdec1	equ	0xFE5
 15344                           fsr1l	equ	0xFE1
 15345                           indf2	equ	0xFDF
 15346                           postinc2	equ	0xFDE
 15347                           postdec2	equ	0xFDD
 15348                           fsr2h	equ	0xFDA
 15349                           fsr2l	equ	0xFD9
 15350                           status	equ	0xFD8
 15351                           
 15352 ;; *************** function _PortTestPusher *****************
 15353 ;; Defined at:
 15354 ;;		line 687 in file "Test.c"
 15355 ;; Parameters:    Size  Location     Type
 15356 ;;		None
 15357 ;; Auto vars:     Size  Location     Type
 15358 ;;		None
 15359 ;; Return value:  Size  Location     Type
 15360 ;;                  1    wreg      void 
 15361 ;; Registers used:
 15362 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15363 ;; Tracked objects:
 15364 ;;		On entry : 0/0
 15365 ;;		On exit  : 0/0
 15366 ;;		Unchanged: 0/0
 15367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15368 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15369 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15370 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15371 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15372 ;;Total ram usage:        1 bytes
 15373 ;; Hardware stack levels used:    1
 15374 ;; Hardware stack levels required when called:   10
 15375 ;; This function calls:
 15376 ;;		_lcdInst
 15377 ;;		_printf
 15378 ;; This function is called by:
 15379 ;;		_Test
 15380 ;; This function uses a non-reentrant model
 15381 ;;
 15382                           
 15383                           	psect	text47
 15384  005698                     __ptext47:
 15385                           	opt stack 0
 15386  005698                     _PortTestPusher:
 15387                           	opt stack 19
 15388                           
 15389                           ;Test.c: 688: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15390                           
 15391                           ;incstack = 0
 15392  005698  0E01               	movlw	1
 15393  00569A  ECAF  F02F         	call	_lcdInst
 15394  00569E  0E68               	movlw	104
 15395  0056A0  0100               	movlb	0	; () banked
 15396  0056A2  6FAB               	movwf	??_PortTestPusher& (0+255),b
 15397  0056A4  0EE4               	movlw	228
 15398  0056A6                     u11777:
 15399  0056A6  2EE8               	decfsz	wreg,f,c
 15400  0056A8  D7FE               	bra	u11777
 15401  0056AA  2FAB               	decfsz	??_PortTestPusher& (0+255),f,b
 15402  0056AC  D7FC               	bra	u11777
 15403  0056AE  F000               	nop	
 15404  0056B0  0E80               	movlw	128
 15405  0056B2  ECAF  F02F         	call	_lcdInst
 15406                           
 15407                           ;Test.c: 689: printf("D WILL RETURN    ");
 15408  0056B6  0EEF               	movlw	low STR_112
 15409  0056B8  0100               	movlb	0	; () banked
 15410  0056BA  6F8E               	movwf	printf@f& (0+255),b
 15411  0056BC  0EFA               	movlw	high STR_112
 15412  0056BE  0100               	movlb	0	; () banked
 15413  0056C0  6F8F               	movwf	(printf@f+1)& (0+255),b
 15414  0056C2  EC67  F00E         	call	_printf	;wreg free
 15415                           
 15416                           ;Test.c: 690: lcdInst(0b11000000);;
 15417  0056C6  0EC0               	movlw	192
 15418  0056C8  ECAF  F02F         	call	_lcdInst
 15419                           
 15420                           ;Test.c: 691: printf("OTHER SETS PUSHER");
 15421  0056CC  0E5B               	movlw	low STR_128
 15422  0056CE  0100               	movlb	0	; () banked
 15423  0056D0  6F8E               	movwf	printf@f& (0+255),b
 15424  0056D2  0EFB               	movlw	high STR_128
 15425  0056D4  0100               	movlb	0	; () banked
 15426  0056D6  6F8F               	movwf	(printf@f+1)& (0+255),b
 15427  0056D8  EC67  F00E         	call	_printf	;wreg free
 15428  0056DC                     l1520:
 15429  0056DC  A281               	btfss	3969,1,c	;volatile
 15430  0056DE  D7FE               	goto	l1520
 15431                           
 15432                           ;Test.c: 696: }
 15433                           ;Test.c: 697: if(PORTB >> 4 == 0b1111){
 15434  0056E0  3881               	swapf	3969,w,c	;volatile
 15435  0056E2  0B0F               	andlw	15
 15436  0056E4  0A0F               	xorlw	15
 15437  0056E6  B4D8               	btfsc	status,2,c
 15438  0056E8  0012               	return	
 15439                           
 15440                           ;Test.c: 700: else{
 15441                           ;Test.c: 701: LATAbits.LATA4 = 1;
 15442                           
 15443                           ;Test.c: 699: }
 15444                           
 15445                           ;Test.c: 698: break;
 15446  0056EA  8889               	bsf	3977,4,c	;volatile
 15447  0056EC                     l1526:
 15448  0056EC  B281               	btfsc	3969,1,c	;volatile
 15449  0056EE  D7FE               	goto	l1526
 15450                           
 15451                           ;Test.c: 704: }
 15452                           ;Test.c: 705: LATAbits.LATA4 = 0;
 15453  0056F0  9889               	bcf	3977,4,c	;volatile
 15454  0056F2  D7F4               	goto	l1520
 15455  0056F4                     __end_of_PortTestPusher:
 15456                           	opt stack 0
 15457                           tblptru	equ	0xFF8
 15458                           tblptrh	equ	0xFF7
 15459                           tblptrl	equ	0xFF6
 15460                           tablat	equ	0xFF5
 15461                           prodh	equ	0xFF4
 15462                           prodl	equ	0xFF3
 15463                           intcon	equ	0xFF2
 15464                           intcon2	equ	0xFF1
 15465                           intcon3	equ	0xFF0
 15466                           postinc0	equ	0xFEE
 15467                           wreg	equ	0xFE8
 15468                           postdec1	equ	0xFE5
 15469                           fsr1l	equ	0xFE1
 15470                           indf2	equ	0xFDF
 15471                           postinc2	equ	0xFDE
 15472                           postdec2	equ	0xFDD
 15473                           fsr2h	equ	0xFDA
 15474                           fsr2l	equ	0xFD9
 15475                           status	equ	0xFD8
 15476                           
 15477 ;; *************** function _PortTestDC *****************
 15478 ;; Defined at:
 15479 ;;		line 430 in file "Test.c"
 15480 ;; Parameters:    Size  Location     Type
 15481 ;;		None
 15482 ;; Auto vars:     Size  Location     Type
 15483 ;;		None
 15484 ;; Return value:  Size  Location     Type
 15485 ;;                  1    wreg      void 
 15486 ;; Registers used:
 15487 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15488 ;; Tracked objects:
 15489 ;;		On entry : 0/0
 15490 ;;		On exit  : 0/0
 15491 ;;		Unchanged: 0/0
 15492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15493 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15494 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15495 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15496 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15497 ;;Total ram usage:        1 bytes
 15498 ;; Hardware stack levels used:    1
 15499 ;; Hardware stack levels required when called:   10
 15500 ;; This function calls:
 15501 ;;		_lcdInst
 15502 ;;		_printf
 15503 ;; This function is called by:
 15504 ;;		_Test
 15505 ;; This function uses a non-reentrant model
 15506 ;;
 15507                           
 15508                           	psect	text48
 15509  00499E                     __ptext48:
 15510                           	opt stack 0
 15511  00499E                     _PortTestDC:
 15512                           	opt stack 19
 15513                           
 15514                           ;Test.c: 431: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15515                           
 15516                           ;incstack = 0
 15517  00499E  0E01               	movlw	1
 15518  0049A0  ECAF  F02F         	call	_lcdInst
 15519  0049A4  0E68               	movlw	104
 15520  0049A6  0100               	movlb	0	; () banked
 15521  0049A8  6FAB               	movwf	??_PortTestDC& (0+255),b
 15522  0049AA  0EE4               	movlw	228
 15523  0049AC                     u11787:
 15524  0049AC  2EE8               	decfsz	wreg,f,c
 15525  0049AE  D7FE               	bra	u11787
 15526  0049B0  2FAB               	decfsz	??_PortTestDC& (0+255),f,b
 15527  0049B2  D7FC               	bra	u11787
 15528  0049B4  F000               	nop	
 15529  0049B6  0E80               	movlw	128
 15530  0049B8  ECAF  F02F         	call	_lcdInst
 15531                           
 15532                           ;Test.c: 432: printf("D WILL RETURN    ");
 15533  0049BC  0EEF               	movlw	low STR_112
 15534  0049BE  0100               	movlb	0	; () banked
 15535  0049C0  6F8E               	movwf	printf@f& (0+255),b
 15536  0049C2  0EFA               	movlw	high STR_112
 15537  0049C4  0100               	movlb	0	; () banked
 15538  0049C6  6F8F               	movwf	(printf@f+1)& (0+255),b
 15539  0049C8  EC67  F00E         	call	_printf	;wreg free
 15540                           
 15541                           ;Test.c: 433: lcdInst(0b11000000);;
 15542  0049CC  0EC0               	movlw	192
 15543  0049CE  ECAF  F02F         	call	_lcdInst
 15544                           
 15545                           ;Test.c: 434: printf("OTHER SETS DC   ");
 15546  0049D2  0EF7               	movlw	low STR_113
 15547  0049D4  0100               	movlb	0	; () banked
 15548  0049D6  6F8E               	movwf	printf@f& (0+255),b
 15549  0049D8  0EFB               	movlw	high STR_113
 15550  0049DA  0100               	movlb	0	; () banked
 15551  0049DC  6F8F               	movwf	(printf@f+1)& (0+255),b
 15552  0049DE  EC67  F00E         	call	_printf	;wreg free
 15553  0049E2                     l1402:
 15554  0049E2  A281               	btfss	3969,1,c	;volatile
 15555  0049E4  D7FE               	goto	l1402
 15556                           
 15557                           ;Test.c: 439: }
 15558                           ;Test.c: 440: if(PORTB >> 4 == 0b1111){
 15559  0049E6  3881               	swapf	3969,w,c	;volatile
 15560  0049E8  0B0F               	andlw	15
 15561  0049EA  0A0F               	xorlw	15
 15562  0049EC  B4D8               	btfsc	status,2,c
 15563  0049EE  0012               	return	
 15564                           
 15565                           ;Test.c: 443: else if(PORTB >> 4 == 0b0000){
 15566                           
 15567                           ;Test.c: 442: }
 15568                           
 15569                           ;Test.c: 441: break;
 15570  0049F0  CF81 F0AB          	movff	3969,??_PortTestDC	;volatile
 15571  0049F4  0100               	movlb	0	; () banked
 15572  0049F6  3BAB               	swapf	??_PortTestDC& (0+255),f,b
 15573  0049F8  0E0F               	movlw	15
 15574  0049FA  17AB               	andwf	??_PortTestDC& (0+255),f,b
 15575  0049FC  A4D8               	btfss	status,2,c
 15576  0049FE  D010               	goto	l9064
 15577                           
 15578                           ; BSR set to: 0
 15579                           ;Test.c: 445: LATBbits.LATB2 = !LATBbits.LATB2;
 15580  004A00  B48A               	btfsc	3978,2,c	;volatile
 15581  004A02  D004               	goto	u8470
 15582  004A04  0100               	movlb	0	; () banked
 15583  004A06  6BAB               	clrf	??_PortTestDC& (0+255),b
 15584  004A08  2BAB               	incf	??_PortTestDC& (0+255),f,b
 15585  004A0A  D002               	goto	u8488
 15586  004A0C                     u8470:
 15587  004A0C  0100               	movlb	0	; () banked
 15588  004A0E  6BAB               	clrf	??_PortTestDC& (0+255),b
 15589  004A10                     u8488:
 15590  004A10  0100               	movlb	0	; () banked
 15591  004A12  47AB               	rlncf	??_PortTestDC& (0+255),f,b
 15592  004A14  47AB               	rlncf	??_PortTestDC& (0+255),f,b
 15593  004A16  508A               	movf	3978,w,c	;volatile
 15594  004A18  0100               	movlb	0	; () banked
 15595  004A1A  19AB               	xorwf	??_PortTestDC& (0+255),w,b
 15596  004A1C  0BFB               	andlw	-5
 15597  004A1E  D011               	goto	L14
 15598  004A20                     l9064:
 15599                           
 15600                           ; BSR set to: 0
 15601                           ;Test.c: 447: else if(PORTB >> 4 == 0b0001){
 15602  004A20  3881               	swapf	3969,w,c	;volatile
 15603  004A22  0B0F               	andlw	15
 15604  004A24  06E8               	decf	wreg,f,c
 15605  004A26  A4D8               	btfss	status,2,c
 15606  004A28  D00F               	goto	l9068
 15607                           
 15608                           ; BSR set to: 0
 15609                           ;Test.c: 449: LATBbits.LATB0 = !LATBbits.LATB0;
 15610  004A2A  B08A               	btfsc	3978,0,c	;volatile
 15611  004A2C  D004               	goto	u8500
 15612  004A2E  0100               	movlb	0	; () banked
 15613  004A30  6BAB               	clrf	??_PortTestDC& (0+255),b
 15614  004A32  2BAB               	incf	??_PortTestDC& (0+255),f,b
 15615  004A34  D002               	goto	u8518
 15616  004A36                     u8500:
 15617  004A36  0100               	movlb	0	; () banked
 15618  004A38  6BAB               	clrf	??_PortTestDC& (0+255),b
 15619  004A3A                     u8518:
 15620  004A3A  508A               	movf	3978,w,c	;volatile
 15621  004A3C  0100               	movlb	0	; () banked
 15622  004A3E  19AB               	xorwf	??_PortTestDC& (0+255),w,b
 15623  004A40  0BFE               	andlw	-2
 15624  004A42                     L14:
 15625  004A42  19AB               	xorwf	??_PortTestDC& (0+255),w,b
 15626  004A44  6E8A               	movwf	3978,c	;volatile
 15627                           
 15628                           ;Test.c: 450: }
 15629  004A46  D013               	goto	l1421
 15630  004A48                     l9068:
 15631                           
 15632                           ; BSR set to: 0
 15633                           ;Test.c: 451: else if(PORTB >> 4 == 0b0100){
 15634  004A48  3881               	swapf	3969,w,c	;volatile
 15635  004A4A  0B0F               	andlw	15
 15636  004A4C  0A04               	xorlw	4
 15637  004A4E  A4D8               	btfss	status,2,c
 15638  004A50  D005               	goto	l9072
 15639                           
 15640                           ; BSR set to: 0
 15641                           ;Test.c: 452: LATBbits.LATB2 = 1;
 15642  004A52  848A               	bsf	3978,2,c	;volatile
 15643  004A54                     l1413:
 15644  004A54  B281               	btfsc	3969,1,c	;volatile
 15645  004A56  D7FE               	goto	l1413
 15646                           
 15647                           ;Test.c: 454: LATBbits.LATB2 = 0;
 15648  004A58  948A               	bcf	3978,2,c	;volatile
 15649                           
 15650                           ;Test.c: 455: }
 15651  004A5A  D009               	goto	l1421
 15652  004A5C                     l9072:
 15653                           
 15654                           ;Test.c: 456: else if(PORTB >> 4 == 0b0101){
 15655  004A5C  3881               	swapf	3969,w,c	;volatile
 15656  004A5E  0B0F               	andlw	15
 15657  004A60  0A05               	xorlw	5
 15658  004A62  A4D8               	btfss	status,2,c
 15659  004A64  D004               	goto	l1421
 15660                           
 15661                           ;Test.c: 457: LATBbits.LATB0 = 1;
 15662  004A66  808A               	bsf	3978,0,c	;volatile
 15663  004A68                     l1418:
 15664  004A68  B281               	btfsc	3969,1,c	;volatile
 15665  004A6A  D7FE               	goto	l1418
 15666                           
 15667                           ;Test.c: 459: LATBbits.LATB0 = 0;
 15668  004A6C  908A               	bcf	3978,0,c	;volatile
 15669  004A6E                     l1421:
 15670  004A6E  A281               	btfss	3969,1,c	;volatile
 15671  004A70  D7B8               	goto	l1402
 15672  004A72  D7FD               	goto	l1421
 15673  004A74                     __end_of_PortTestDC:
 15674                           	opt stack 0
 15675                           tblptru	equ	0xFF8
 15676                           tblptrh	equ	0xFF7
 15677                           tblptrl	equ	0xFF6
 15678                           tablat	equ	0xFF5
 15679                           prodh	equ	0xFF4
 15680                           prodl	equ	0xFF3
 15681                           intcon	equ	0xFF2
 15682                           intcon2	equ	0xFF1
 15683                           intcon3	equ	0xFF0
 15684                           postinc0	equ	0xFEE
 15685                           wreg	equ	0xFE8
 15686                           postdec1	equ	0xFE5
 15687                           fsr1l	equ	0xFE1
 15688                           indf2	equ	0xFDF
 15689                           postinc2	equ	0xFDE
 15690                           postdec2	equ	0xFDD
 15691                           fsr2h	equ	0xFDA
 15692                           fsr2l	equ	0xFD9
 15693                           status	equ	0xFD8
 15694                           
 15695 ;; *************** function _PlatformTest *****************
 15696 ;; Defined at:
 15697 ;;		line 465 in file "Test.c"
 15698 ;; Parameters:    Size  Location     Type
 15699 ;;		None
 15700 ;; Auto vars:     Size  Location     Type
 15701 ;;  i               2   51[BANK0 ] int 
 15702 ;;  i               2   49[BANK0 ] int 
 15703 ;;  res             2   47[BANK0 ] int 
 15704 ;;  res             2   45[BANK0 ] int 
 15705 ;;  on              2   53[BANK0 ] int 
 15706 ;; Return value:  Size  Location     Type
 15707 ;;                  1    wreg      void 
 15708 ;; Registers used:
 15709 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15710 ;; Tracked objects:
 15711 ;;		On entry : 0/0
 15712 ;;		On exit  : 0/0
 15713 ;;		Unchanged: 0/0
 15714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15715 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15716 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15717 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15718 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15719 ;;Total ram usage:       12 bytes
 15720 ;; Hardware stack levels used:    1
 15721 ;; Hardware stack levels required when called:   10
 15722 ;; This function calls:
 15723 ;;		_lcdInst
 15724 ;;		_printf
 15725 ;;		_readADC
 15726 ;;		_stopSignals
 15727 ;; This function is called by:
 15728 ;;		_Test
 15729 ;; This function uses a non-reentrant model
 15730 ;;
 15731                           
 15732                           	psect	text49
 15733  002F4A                     __ptext49:
 15734                           	opt stack 0
 15735  002F4A                     _PlatformTest:
 15736                           	opt stack 19
 15737                           
 15738                           ;Test.c: 466: LATCbits.LATC5 = 1;
 15739                           
 15740                           ;incstack = 0
 15741  002F4A  8A8B               	bsf	3979,5,c	;volatile
 15742                           
 15743                           ;Test.c: 468: machine_state = Sorting_state;
 15744  002F4C  0E01               	movlw	1
 15745  002F4E  0100               	movlb	0	; () banked
 15746  002F50  6FFC               	movwf	_machine_state& (0+255),b
 15747                           
 15748                           ;Test.c: 469: f_arm_position = 0;
 15749  002F52  0E00               	movlw	0
 15750  002F54  0100               	movlb	0	; () banked
 15751  002F56  6FE9               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 15752  002F58  0E00               	movlw	0
 15753  002F5A  6FE8               	movwf	_f_arm_position& (0+255),b	;volatile
 15754                           
 15755                           ;Test.c: 470: timer2_counter = 0;
 15756  002F5C  0E00               	movlw	0
 15757  002F5E  6E74               	movwf	_timer2_counter+1,c	;volatile
 15758  002F60  0E00               	movlw	0
 15759  002F62  6E73               	movwf	_timer2_counter,c	;volatile
 15760                           
 15761                           ; BSR set to: 0
 15762                           ;Test.c: 471: LATBbits.LATB3 = 0;
 15763  002F64  968A               	bcf	3978,3,c	;volatile
 15764                           
 15765                           ; BSR set to: 0
 15766                           ;Test.c: 472: TMR2ON = 1;
 15767  002F66  84CA               	bsf	4042,2,c	;volatile
 15768                           
 15769                           ;Test.c: 473: was_low_2 = 0;
 15770  002F68  0E00               	movlw	0
 15771  002F6A  6E7A               	movwf	_was_low_2+1,c	;volatile
 15772  002F6C  0E00               	movlw	0
 15773  002F6E  6E79               	movwf	_was_low_2,c	;volatile
 15774                           
 15775                           ;Test.c: 475: int on = 1;
 15776  002F70  0E00               	movlw	0
 15777  002F72  0100               	movlb	0	; () banked
 15778  002F74  6FB6               	movwf	(PlatformTest@on+1)& (0+255),b
 15779  002F76  0E01               	movlw	1
 15780  002F78  6FB5               	movwf	PlatformTest@on& (0+255),b
 15781                           
 15782                           ; BSR set to: 0
 15783                           ;Test.c: 476: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15784  002F7A  0E01               	movlw	1
 15785  002F7C  ECAF  F02F         	call	_lcdInst
 15786  002F80  0E68               	movlw	104
 15787  002F82  0100               	movlb	0	; () banked
 15788  002F84  6FAB               	movwf	??_PlatformTest& (0+255),b
 15789  002F86  0EE4               	movlw	228
 15790  002F88                     u11797:
 15791  002F88  2EE8               	decfsz	wreg,f,c
 15792  002F8A  D7FE               	bra	u11797
 15793  002F8C  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15794  002F8E  D7FC               	bra	u11797
 15795  002F90  F000               	nop	
 15796  002F92  0E80               	movlw	128
 15797  002F94  ECAF  F02F         	call	_lcdInst
 15798                           
 15799                           ;Test.c: 477: printf("1: DC | A: ARM  ");
 15800  002F98  0E2A               	movlw	low STR_114
 15801  002F9A  0100               	movlb	0	; () banked
 15802  002F9C  6F8E               	movwf	printf@f& (0+255),b
 15803  002F9E  0EFC               	movlw	high STR_114
 15804  002FA0  0100               	movlb	0	; () banked
 15805  002FA2  6F8F               	movwf	(printf@f+1)& (0+255),b
 15806  002FA4  EC67  F00E         	call	_printf	;wreg free
 15807                           
 15808                           ;Test.c: 479: while(PORTBbits.RB1 == 0){
 15809  002FA8  D058               	goto	l9152
 15810  002FAA                     l9134:
 15811                           
 15812                           ;Test.c: 480: readADC(0);
 15813  002FAA  0E00               	movlw	0
 15814  002FAC  EC9A  F02E         	call	_readADC
 15815                           
 15816                           ;Test.c: 481: int res = ADRESH<<8 | ADRESL;
 15817  002FB0  50C3               	movf	4035,w,c	;volatile
 15818  002FB2  CFC4 F0AB          	movff	4036,??_PlatformTest	;volatile
 15819  002FB6  0100               	movlb	0	; () banked
 15820  002FB8  6BAC               	clrf	(??_PlatformTest+1)& (0+255),b
 15821  002FBA  C0AB  F0AC         	movff	??_PlatformTest,??_PlatformTest+1
 15822  002FBE  0100               	movlb	0	; () banked
 15823  002FC0  6BAB               	clrf	??_PlatformTest& (0+255),b
 15824  002FC2  0100               	movlb	0	; () banked
 15825  002FC4  11AB               	iorwf	??_PlatformTest& (0+255),w,b
 15826  002FC6  0100               	movlb	0	; () banked
 15827  002FC8  6FAD               	movwf	PlatformTest@res& (0+255),b
 15828  002FCA  0100               	movlb	0	; () banked
 15829  002FCC  51AC               	movf	(??_PlatformTest+1)& (0+255),w,b
 15830  002FCE  0100               	movlb	0	; () banked
 15831  002FD0  6FAE               	movwf	(PlatformTest@res+1)& (0+255),b
 15832                           
 15833                           ; BSR set to: 0
 15834                           ;Test.c: 482: IR_signal = (res > 800) ? 1 : 0;
 15835  002FD2  0100               	movlb	0	; () banked
 15836  002FD4  BFAE               	btfsc	(PlatformTest@res+1)& (0+255),7,b
 15837  002FD6  D00A               	goto	u8630
 15838  002FD8  0E21               	movlw	33
 15839  002FDA  0100               	movlb	0	; () banked
 15840  002FDC  5DAD               	subwf	PlatformTest@res& (0+255),w,b
 15841  002FDE  0E03               	movlw	3
 15842  002FE0  0100               	movlb	0	; () banked
 15843  002FE2  59AE               	subwfb	(PlatformTest@res+1)& (0+255),w,b
 15844  002FE4  A0D8               	btfss	status,0,c
 15845  002FE6  D002               	goto	u8630
 15846  002FE8  0E01               	movlw	1
 15847  002FEA  D001               	goto	u8640
 15848  002FEC                     u8630:
 15849  002FEC  0E00               	movlw	0
 15850  002FEE                     u8640:
 15851  002FEE  0100               	movlb	0	; () banked
 15852  002FF0  6FE0               	movwf	_IR_signal& (0+255),b
 15853  002FF2  6BE1               	clrf	(_IR_signal+1)& (0+255),b
 15854                           
 15855                           ;Test.c: 484: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15856  002FF4  0E01               	movlw	1
 15857  002FF6  ECAF  F02F         	call	_lcdInst
 15858  002FFA  0E68               	movlw	104
 15859  002FFC  0100               	movlb	0	; () banked
 15860  002FFE  6FAB               	movwf	??_PlatformTest& (0+255),b
 15861  003000  0EE4               	movlw	228
 15862  003002                     u11807:
 15863  003002  2EE8               	decfsz	wreg,f,c
 15864  003004  D7FE               	bra	u11807
 15865  003006  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15866  003008  D7FC               	bra	u11807
 15867  00300A  F000               	nop	
 15868  00300C  0E80               	movlw	128
 15869  00300E  ECAF  F02F         	call	_lcdInst
 15870                           
 15871                           ;Test.c: 485: printf("1: DC | A: ARM  ");
 15872  003012  0E2A               	movlw	low STR_114
 15873  003014  0100               	movlb	0	; () banked
 15874  003016  6F8E               	movwf	printf@f& (0+255),b
 15875  003018  0EFC               	movlw	high STR_114
 15876  00301A  0100               	movlb	0	; () banked
 15877  00301C  6F8F               	movwf	(printf@f+1)& (0+255),b
 15878  00301E  EC67  F00E         	call	_printf	;wreg free
 15879                           
 15880                           ;Test.c: 486: lcdInst(0b11000000);;
 15881  003022  0EC0               	movlw	192
 15882  003024  ECAF  F02F         	call	_lcdInst
 15883                           
 15884                           ;Test.c: 487: printf("5:H|6:L|IR:%d   ", res);
 15885  003028  0E19               	movlw	low STR_116
 15886  00302A  0100               	movlb	0	; () banked
 15887  00302C  6F8E               	movwf	printf@f& (0+255),b
 15888  00302E  0EFC               	movlw	high STR_116
 15889  003030  0100               	movlb	0	; () banked
 15890  003032  6F8F               	movwf	(printf@f+1)& (0+255),b
 15891  003034  C0AD  F090         	movff	PlatformTest@res,?_printf+2
 15892  003038  C0AE  F091         	movff	PlatformTest@res+1,?_printf+3
 15893  00303C  EC67  F00E         	call	_printf	;wreg free
 15894                           
 15895                           ;Test.c: 488: _delay((unsigned long)((100)*(32000000/4000.0)));
 15896  003040  0E05               	movlw	5
 15897  003042  0100               	movlb	0	; () banked
 15898  003044  6FAC               	movwf	(??_PlatformTest+1)& (0+255),b
 15899  003046  0E0F               	movlw	15
 15900  003048  0100               	movlb	0	; () banked
 15901  00304A  6FAB               	movwf	??_PlatformTest& (0+255),b
 15902  00304C  0EF1               	movlw	241
 15903  00304E                     u11817:
 15904  00304E  2EE8               	decfsz	wreg,f,c
 15905  003050  D7FE               	bra	u11817
 15906  003052  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15907  003054  D7FC               	bra	u11817
 15908  003056  2FAC               	decfsz	(??_PlatformTest+1)& (0+255),f,b
 15909  003058  D7FA               	bra	u11817
 15910  00305A                     l9152:
 15911  00305A  B281               	btfsc	3969,1,c	;volatile
 15912  00305C  D059               	goto	l9172
 15913  00305E  D7A5               	goto	l9134
 15914  003060                     l9154:
 15915                           
 15916                           ;Test.c: 493: readADC(0);
 15917  003060  0E00               	movlw	0
 15918  003062  EC9A  F02E         	call	_readADC
 15919                           
 15920                           ;Test.c: 494: int res = ADRESH<<8 | ADRESL;
 15921  003066  50C3               	movf	4035,w,c	;volatile
 15922  003068  CFC4 F0AB          	movff	4036,??_PlatformTest	;volatile
 15923  00306C  0100               	movlb	0	; () banked
 15924  00306E  6BAC               	clrf	(??_PlatformTest+1)& (0+255),b
 15925  003070  C0AB  F0AC         	movff	??_PlatformTest,??_PlatformTest+1
 15926  003074  0100               	movlb	0	; () banked
 15927  003076  6BAB               	clrf	??_PlatformTest& (0+255),b
 15928  003078  0100               	movlb	0	; () banked
 15929  00307A  11AB               	iorwf	??_PlatformTest& (0+255),w,b
 15930  00307C  0100               	movlb	0	; () banked
 15931  00307E  6FAF               	movwf	PlatformTest@res_1799& (0+255),b
 15932  003080  0100               	movlb	0	; () banked
 15933  003082  51AC               	movf	(??_PlatformTest+1)& (0+255),w,b
 15934  003084  0100               	movlb	0	; () banked
 15935  003086  6FB0               	movwf	(PlatformTest@res_1799+1)& (0+255),b
 15936                           
 15937                           ; BSR set to: 0
 15938                           ;Test.c: 495: IR_signal = (res > 800) ? 1 : 0;
 15939  003088  0100               	movlb	0	; () banked
 15940  00308A  BFB0               	btfsc	(PlatformTest@res_1799+1)& (0+255),7,b
 15941  00308C  D00A               	goto	u8660
 15942  00308E  0E21               	movlw	33
 15943  003090  0100               	movlb	0	; () banked
 15944  003092  5DAF               	subwf	PlatformTest@res_1799& (0+255),w,b
 15945  003094  0E03               	movlw	3
 15946  003096  0100               	movlb	0	; () banked
 15947  003098  59B0               	subwfb	(PlatformTest@res_1799+1)& (0+255),w,b
 15948  00309A  A0D8               	btfss	status,0,c
 15949  00309C  D002               	goto	u8660
 15950  00309E  0E01               	movlw	1
 15951  0030A0  D001               	goto	u8670
 15952  0030A2                     u8660:
 15953  0030A2  0E00               	movlw	0
 15954  0030A4                     u8670:
 15955  0030A4  0100               	movlb	0	; () banked
 15956  0030A6  6FE0               	movwf	_IR_signal& (0+255),b
 15957  0030A8  6BE1               	clrf	(_IR_signal+1)& (0+255),b
 15958                           
 15959                           ;Test.c: 497: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15960  0030AA  0E01               	movlw	1
 15961  0030AC  ECAF  F02F         	call	_lcdInst
 15962  0030B0  0E68               	movlw	104
 15963  0030B2  0100               	movlb	0	; () banked
 15964  0030B4  6FAB               	movwf	??_PlatformTest& (0+255),b
 15965  0030B6  0EE4               	movlw	228
 15966  0030B8                     u11827:
 15967  0030B8  2EE8               	decfsz	wreg,f,c
 15968  0030BA  D7FE               	bra	u11827
 15969  0030BC  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15970  0030BE  D7FC               	bra	u11827
 15971  0030C0  F000               	nop	
 15972  0030C2  0E80               	movlw	128
 15973  0030C4  ECAF  F02F         	call	_lcdInst
 15974                           
 15975                           ;Test.c: 498: printf("1: DC | A: ARM  ");
 15976  0030C8  0E2A               	movlw	low STR_114
 15977  0030CA  0100               	movlb	0	; () banked
 15978  0030CC  6F8E               	movwf	printf@f& (0+255),b
 15979  0030CE  0EFC               	movlw	high STR_114
 15980  0030D0  0100               	movlb	0	; () banked
 15981  0030D2  6F8F               	movwf	(printf@f+1)& (0+255),b
 15982  0030D4  EC67  F00E         	call	_printf	;wreg free
 15983                           
 15984                           ;Test.c: 499: lcdInst(0b11000000);;
 15985  0030D8  0EC0               	movlw	192
 15986  0030DA  ECAF  F02F         	call	_lcdInst
 15987                           
 15988                           ;Test.c: 500: printf("5:H|6:L|IR:%d   ", res);
 15989  0030DE  0E19               	movlw	low STR_116
 15990  0030E0  0100               	movlb	0	; () banked
 15991  0030E2  6F8E               	movwf	printf@f& (0+255),b
 15992  0030E4  0EFC               	movlw	high STR_116
 15993  0030E6  0100               	movlb	0	; () banked
 15994  0030E8  6F8F               	movwf	(printf@f+1)& (0+255),b
 15995  0030EA  C0AF  F090         	movff	PlatformTest@res_1799,?_printf+2
 15996  0030EE  C0B0  F091         	movff	PlatformTest@res_1799+1,?_printf+3
 15997  0030F2  EC67  F00E         	call	_printf	;wreg free
 15998                           
 15999                           ;Test.c: 501: _delay((unsigned long)((100)*(32000000/4000.0)));
 16000  0030F6  0E05               	movlw	5
 16001  0030F8  0100               	movlb	0	; () banked
 16002  0030FA  6FAC               	movwf	(??_PlatformTest+1)& (0+255),b
 16003  0030FC  0E0F               	movlw	15
 16004  0030FE  0100               	movlb	0	; () banked
 16005  003100  6FAB               	movwf	??_PlatformTest& (0+255),b
 16006  003102  0EF1               	movlw	241
 16007  003104                     u11837:
 16008  003104  2EE8               	decfsz	wreg,f,c
 16009  003106  D7FE               	bra	u11837
 16010  003108  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 16011  00310A  D7FC               	bra	u11837
 16012  00310C  2FAC               	decfsz	(??_PlatformTest+1)& (0+255),f,b
 16013  00310E  D7FA               	bra	u11837
 16014  003110                     l9172:
 16015  003110  A281               	btfss	3969,1,c	;volatile
 16016  003112  D7A6               	goto	l9154
 16017                           
 16018                           ;Test.c: 502: }
 16019                           ;Test.c: 503: if(PORTB >> 4 == 0b1111){
 16020  003114  3881               	swapf	3969,w,c	;volatile
 16021  003116  0B0F               	andlw	15
 16022  003118  0A0F               	xorlw	15
 16023  00311A  B4D8               	btfsc	status,2,c
 16024  00311C  D09A               	goto	l1436
 16025                           
 16026                           ;Test.c: 506: else if(PORTB >> 4 == 0b0000){
 16027                           
 16028                           ;Test.c: 505: }
 16029                           
 16030                           ;Test.c: 504: break;
 16031  00311E  CF81 F0AB          	movff	3969,??_PlatformTest	;volatile
 16032  003122  0100               	movlb	0	; () banked
 16033  003124  3BAB               	swapf	??_PlatformTest& (0+255),f,b
 16034  003126  0E0F               	movlw	15
 16035  003128  17AB               	andwf	??_PlatformTest& (0+255),f,b
 16036  00312A  A4D8               	btfss	status,2,c
 16037  00312C  D012               	goto	l9184
 16038                           
 16039                           ; BSR set to: 0
 16040                           ;Test.c: 507: LATBbits.LATB2 = !LATBbits.LATB2;
 16041  00312E  B48A               	btfsc	3978,2,c	;volatile
 16042  003130  D004               	goto	u8710
 16043  003132  0100               	movlb	0	; () banked
 16044  003134  6BAB               	clrf	??_PlatformTest& (0+255),b
 16045  003136  2BAB               	incf	??_PlatformTest& (0+255),f,b
 16046  003138  D002               	goto	u8728
 16047  00313A                     u8710:
 16048  00313A  0100               	movlb	0	; () banked
 16049  00313C  6BAB               	clrf	??_PlatformTest& (0+255),b
 16050  00313E                     u8728:
 16051  00313E  0100               	movlb	0	; () banked
 16052  003140  47AB               	rlncf	??_PlatformTest& (0+255),f,b
 16053  003142  47AB               	rlncf	??_PlatformTest& (0+255),f,b
 16054  003144  508A               	movf	3978,w,c	;volatile
 16055  003146  0100               	movlb	0	; () banked
 16056  003148  19AB               	xorwf	??_PlatformTest& (0+255),w,b
 16057  00314A  0BFB               	andlw	-5
 16058  00314C  19AB               	xorwf	??_PlatformTest& (0+255),w,b
 16059  00314E  6E8A               	movwf	3978,c	;volatile
 16060                           
 16061                           ;Test.c: 508: }
 16062  003150  D07D               	goto	l1451
 16063  003152                     l9184:
 16064                           
 16065                           ; BSR set to: 0
 16066                           ;Test.c: 509: else if(PORTB >> 4 == 0b0011){
 16067  003152  3881               	swapf	3969,w,c	;volatile
 16068  003154  0B0F               	andlw	15
 16069  003156  0A03               	xorlw	3
 16070  003158  A4D8               	btfss	status,2,c
 16071  00315A  D020               	goto	l9196
 16072                           
 16073                           ; BSR set to: 0
 16074                           ;Test.c: 510: if(on){
 16075  00315C  0100               	movlb	0	; () banked
 16076  00315E  51B5               	movf	PlatformTest@on& (0+255),w,b
 16077  003160  0100               	movlb	0	; () banked
 16078  003162  11B6               	iorwf	(PlatformTest@on+1)& (0+255),w,b
 16079  003164  B4D8               	btfsc	status,2,c
 16080  003166  D010               	goto	l9192
 16081                           
 16082                           ; BSR set to: 0
 16083                           ;Test.c: 511: f_arm_position = 1;
 16084  003168  0E00               	movlw	0
 16085  00316A  0100               	movlb	0	; () banked
 16086  00316C  6FE9               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 16087  00316E  0E01               	movlw	1
 16088  003170  D00F               	goto	L15
 16089  003172                     l9190:
 16090                           
 16091                           ; BSR set to: 0
 16092                           ;Test.c: 512: on = !on;
 16093  003172  0100               	movlb	0	; () banked
 16094  003174  51B5               	movf	PlatformTest@on& (0+255),w,b
 16095  003176  0100               	movlb	0	; () banked
 16096  003178  11B6               	iorwf	(PlatformTest@on+1)& (0+255),w,b
 16097  00317A  A4D8               	btfss	status,2,c
 16098  00317C  D00D               	goto	u8770
 16099  00317E  D00A               	goto	u8771
 16100  003180                     u8760:
 16101  003180  0100               	movlb	0	; () banked
 16102  003182  6FB5               	movwf	PlatformTest@on& (0+255),b
 16103  003184  6BB6               	clrf	(PlatformTest@on+1)& (0+255),b
 16104                           
 16105                           ;Test.c: 513: }
 16106  003186  D062               	goto	l1451
 16107  003188                     l9192:
 16108                           
 16109                           ; BSR set to: 0
 16110                           ;Test.c: 514: else{
 16111                           ;Test.c: 515: f_arm_position = 0;
 16112  003188  0E00               	movlw	0
 16113  00318A  0100               	movlb	0	; () banked
 16114  00318C  6FE9               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 16115  00318E  0E00               	movlw	0
 16116  003190                     L15:
 16117  003190  6FE8               	movwf	_f_arm_position& (0+255),b	;volatile
 16118  003192  D7EF               	goto	l9190
 16119  003194                     u8771:
 16120  003194  0E01               	movlw	1
 16121  003196  D7F4               	goto	u8760
 16122  003198                     u8770:
 16123  003198  0E00               	movlw	0
 16124  00319A  D7F2               	goto	u8760
 16125  00319C                     l9196:
 16126                           
 16127                           ; BSR set to: 0
 16128                           ;Test.c: 519: else if(PORTB >> 4 == 0b0101){
 16129  00319C  3881               	swapf	3969,w,c	;volatile
 16130  00319E  0B0F               	andlw	15
 16131  0031A0  0A05               	xorlw	5
 16132  0031A2  A4D8               	btfss	status,2,c
 16133  0031A4  D027               	goto	l9210
 16134                           
 16135                           ; BSR set to: 0
 16136                           ;Test.c: 521: for(int i = 0; i<30; i++){
 16137  0031A6  0E00               	movlw	0
 16138  0031A8  0100               	movlb	0	; () banked
 16139  0031AA  6FB2               	movwf	(PlatformTest@i+1)& (0+255),b
 16140  0031AC  0E00               	movlw	0
 16141  0031AE  6FB1               	movwf	PlatformTest@i& (0+255),b
 16142  0031B0                     l9200:
 16143                           
 16144                           ; BSR set to: 0
 16145  0031B0  0100               	movlb	0	; () banked
 16146  0031B2  BFB2               	btfsc	(PlatformTest@i+1)& (0+255),7,b
 16147  0031B4  D008               	goto	l1445
 16148  0031B6  0100               	movlb	0	; () banked
 16149  0031B8  51B2               	movf	(PlatformTest@i+1)& (0+255),w,b
 16150  0031BA  E148               	bnz	l1451
 16151  0031BC  0E1E               	movlw	30
 16152  0031BE  0100               	movlb	0	; () banked
 16153  0031C0  5DB1               	subwf	PlatformTest@i& (0+255),w,b
 16154  0031C2  B0D8               	btfsc	status,0,c
 16155  0031C4  D043               	goto	l1451
 16156  0031C6                     l1445:
 16157                           
 16158                           ; BSR set to: 0
 16159                           ;Test.c: 522: LATAbits.LATA4 = 1;
 16160  0031C6  8889               	bsf	3977,4,c	;volatile
 16161                           
 16162                           ; BSR set to: 0
 16163                           ;Test.c: 523: _delay((unsigned long)((7500)*(32000000/4000000.0)));
 16164  0031C8  0E4E               	movlw	78
 16165  0031CA  0100               	movlb	0	; () banked
 16166  0031CC  6FAB               	movwf	??_PlatformTest& (0+255),b
 16167  0031CE  0EEB               	movlw	235
 16168  0031D0                     u11847:
 16169  0031D0  2EE8               	decfsz	wreg,f,c
 16170  0031D2  D7FE               	bra	u11847
 16171  0031D4  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 16172  0031D6  D7FC               	bra	u11847
 16173                           
 16174                           ;Test.c: 524: LATAbits.LATA4 = 0;
 16175  0031D8  9889               	bcf	3977,4,c	;volatile
 16176                           
 16177                           ;Test.c: 525: _delay((unsigned long)((2500)*(32000000/4000000.0)));
 16178  0031DA  0E1A               	movlw	26
 16179  0031DC  0100               	movlb	0	; () banked
 16180  0031DE  6FAB               	movwf	??_PlatformTest& (0+255),b
 16181  0031E0  0EF8               	movlw	248
 16182  0031E2                     u11857:
 16183  0031E2  2EE8               	decfsz	wreg,f,c
 16184  0031E4  D7FE               	bra	u11857
 16185  0031E6  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 16186  0031E8  D7FC               	bra	u11857
 16187  0031EA  F000               	nop	
 16188  0031EC  0100               	movlb	0	; () banked
 16189  0031EE  4BB1               	infsnz	PlatformTest@i& (0+255),f,b
 16190  0031F0  2BB2               	incf	(PlatformTest@i+1)& (0+255),f,b
 16191  0031F2  D7DE               	goto	l9200
 16192  0031F4                     l9210:
 16193                           
 16194                           ; BSR set to: 0
 16195                           ;Test.c: 528: else if (PORTB >> 4 == 0b0110){
 16196  0031F4  3881               	swapf	3969,w,c	;volatile
 16197  0031F6  0B0F               	andlw	15
 16198  0031F8  0A06               	xorlw	6
 16199  0031FA  A4D8               	btfss	status,2,c
 16200  0031FC  D027               	goto	l1451
 16201                           
 16202                           ; BSR set to: 0
 16203                           ;Test.c: 530: for(int i = 0; i<30; i++){
 16204  0031FE  0E00               	movlw	0
 16205  003200  0100               	movlb	0	; () banked
 16206  003202  6FB4               	movwf	(PlatformTest@i_1803+1)& (0+255),b
 16207  003204  0E00               	movlw	0
 16208  003206  6FB3               	movwf	PlatformTest@i_1803& (0+255),b
 16209  003208                     l9214:
 16210                           
 16211                           ; BSR set to: 0
 16212  003208  0100               	movlb	0	; () banked
 16213  00320A  BFB4               	btfsc	(PlatformTest@i_1803+1)& (0+255),7,b
 16214  00320C  D008               	goto	l1449
 16215  00320E  0100               	movlb	0	; () banked
 16216  003210  51B4               	movf	(PlatformTest@i_1803+1)& (0+255),w,b
 16217  003212  E11C               	bnz	l1451
 16218  003214  0E1E               	movlw	30
 16219  003216  0100               	movlb	0	; () banked
 16220  003218  5DB3               	subwf	PlatformTest@i_1803& (0+255),w,b
 16221  00321A  B0D8               	btfsc	status,0,c
 16222  00321C  D017               	goto	l1451
 16223  00321E                     l1449:
 16224                           
 16225                           ; BSR set to: 0
 16226                           ;Test.c: 531: LATAbits.LATA4 = 1;
 16227  00321E  8889               	bsf	3977,4,c	;volatile
 16228                           
 16229                           ; BSR set to: 0
 16230                           ;Test.c: 532: _delay((unsigned long)((5800)*(32000000/4000000.0)));
 16231  003220  0E3D               	movlw	61
 16232  003222  0100               	movlb	0	; () banked
 16233  003224  6FAB               	movwf	??_PlatformTest& (0+255),b
 16234  003226  0E41               	movlw	65
 16235  003228                     u11867:
 16236  003228  2EE8               	decfsz	wreg,f,c
 16237  00322A  D7FE               	bra	u11867
 16238  00322C  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 16239  00322E  D7FC               	bra	u11867
 16240                           
 16241                           ;Test.c: 533: LATAbits.LATA4 = 0;
 16242  003230  9889               	bcf	3977,4,c	;volatile
 16243                           
 16244                           ;Test.c: 534: _delay((unsigned long)((4200)*(32000000/4000000.0)));
 16245  003232  0E2C               	movlw	44
 16246  003234  0100               	movlb	0	; () banked
 16247  003236  6FAB               	movwf	??_PlatformTest& (0+255),b
 16248  003238  0EA1               	movlw	161
 16249  00323A                     u11877:
 16250  00323A  2EE8               	decfsz	wreg,f,c
 16251  00323C  D7FE               	bra	u11877
 16252  00323E  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 16253  003240  D7FC               	bra	u11877
 16254  003242  D000               	nop2	
 16255  003244  0100               	movlb	0	; () banked
 16256  003246  4BB3               	infsnz	PlatformTest@i_1803& (0+255),f,b
 16257  003248  2BB4               	incf	(PlatformTest@i_1803+1)& (0+255),f,b
 16258  00324A  D7DE               	goto	l9214
 16259  00324C                     l1451:
 16260  00324C  A281               	btfss	3969,1,c	;volatile
 16261  00324E  D760               	goto	l9172
 16262  003250  D7FD               	goto	l1451
 16263  003252                     l1436:
 16264                           
 16265                           ;Test.c: 539: }
 16266                           ;Test.c: 541: LATCbits.LATC5 = 0;
 16267  003252  9A8B               	bcf	3979,5,c	;volatile
 16268                           
 16269                           ;Test.c: 542: stopSignals();
 16270  003254  EC56  F02F         	call	_stopSignals	;wreg free
 16271                           
 16272                           ;Test.c: 543: machine_state = Testing_state;
 16273  003258  0E03               	movlw	3
 16274  00325A  0100               	movlb	0	; () banked
 16275  00325C  6FFC               	movwf	_machine_state& (0+255),b
 16276                           
 16277                           ; BSR set to: 0
 16278  00325E  0012               	return		;funcret
 16279  003260                     __end_of_PlatformTest:
 16280                           	opt stack 0
 16281                           tblptru	equ	0xFF8
 16282                           tblptrh	equ	0xFF7
 16283                           tblptrl	equ	0xFF6
 16284                           tablat	equ	0xFF5
 16285                           prodh	equ	0xFF4
 16286                           prodl	equ	0xFF3
 16287                           intcon	equ	0xFF2
 16288                           intcon2	equ	0xFF1
 16289                           intcon3	equ	0xFF0
 16290                           postinc0	equ	0xFEE
 16291                           wreg	equ	0xFE8
 16292                           postdec1	equ	0xFE5
 16293                           fsr1l	equ	0xFE1
 16294                           indf2	equ	0xFDF
 16295                           postinc2	equ	0xFDE
 16296                           postdec2	equ	0xFDD
 16297                           fsr2h	equ	0xFDA
 16298                           fsr2l	equ	0xFD9
 16299                           status	equ	0xFD8
 16300                           
 16301 ;; *************** function _BothServos *****************
 16302 ;; Defined at:
 16303 ;;		line 370 in file "Test.c"
 16304 ;; Parameters:    Size  Location     Type
 16305 ;;		None
 16306 ;; Auto vars:     Size  Location     Type
 16307 ;;		None
 16308 ;; Return value:  Size  Location     Type
 16309 ;;                  1    wreg      void 
 16310 ;; Registers used:
 16311 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16312 ;; Tracked objects:
 16313 ;;		On entry : 0/0
 16314 ;;		On exit  : 0/0
 16315 ;;		Unchanged: 0/0
 16316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16317 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16318 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16319 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16320 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16321 ;;Total ram usage:        2 bytes
 16322 ;; Hardware stack levels used:    1
 16323 ;; Hardware stack levels required when called:   10
 16324 ;; This function calls:
 16325 ;;		_initServos
 16326 ;;		_lcdInst
 16327 ;;		_printf
 16328 ;;		_stopSignals
 16329 ;;		_updateServoPosition
 16330 ;; This function is called by:
 16331 ;;		_Test
 16332 ;; This function uses a non-reentrant model
 16333 ;;
 16334                           
 16335                           	psect	text50
 16336  002106                     __ptext50:
 16337                           	opt stack 0
 16338  002106                     _BothServos:
 16339                           	opt stack 19
 16340                           
 16341                           ;Test.c: 371: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 16342                           
 16343                           ; BSR set to: 0
 16344                           ;incstack = 0
 16345  002106  0E01               	movlw	1
 16346  002108  ECAF  F02F         	call	_lcdInst
 16347  00210C  0E68               	movlw	104
 16348  00210E  0100               	movlb	0	; () banked
 16349  002110  6FAB               	movwf	??_BothServos& (0+255),b
 16350  002112  0EE4               	movlw	228
 16351  002114                     u11887:
 16352  002114  2EE8               	decfsz	wreg,f,c
 16353  002116  D7FE               	bra	u11887
 16354  002118  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16355  00211A  D7FC               	bra	u11887
 16356  00211C  F000               	nop	
 16357  00211E  0E80               	movlw	128
 16358  002120  ECAF  F02F         	call	_lcdInst
 16359                           
 16360                           ;Test.c: 372: printf("TST: BOTH SERVOS");
 16361  002124  0EC3               	movlw	low STR_111
 16362  002126  0100               	movlb	0	; () banked
 16363  002128  6F8E               	movwf	printf@f& (0+255),b
 16364  00212A  0EFC               	movlw	high STR_111
 16365  00212C  0100               	movlb	0	; () banked
 16366  00212E  6F8F               	movwf	(printf@f+1)& (0+255),b
 16367  002130  EC67  F00E         	call	_printf	;wreg free
 16368                           
 16369                           ;Test.c: 373: TMR1ON = 1;
 16370  002134  80CD               	bsf	4045,0,c	;volatile
 16371                           
 16372                           ;Test.c: 374: TMR3ON = 1;
 16373  002136  80B1               	bsf	4017,0,c	;volatile
 16374                           
 16375                           ;Test.c: 375: machine_state = Sorting_state;
 16376  002138  0E01               	movlw	1
 16377  00213A  0100               	movlb	0	; () banked
 16378  00213C  6FFC               	movwf	_machine_state& (0+255),b
 16379                           
 16380                           ; BSR set to: 0
 16381                           ;Test.c: 376: was_low_1 = 0;
 16382  00213E  0E00               	movlw	0
 16383  002140  6E78               	movwf	_was_low_1+1,c	;volatile
 16384  002142  0E00               	movlw	0
 16385  002144  6E77               	movwf	_was_low_1,c	;volatile
 16386                           
 16387                           ; BSR set to: 0
 16388                           ;Test.c: 377: was_low_3 = 0;
 16389  002146  0E00               	movlw	0
 16390  002148  6E7C               	movwf	_was_low_3+1,c	;volatile
 16391  00214A  0E00               	movlw	0
 16392  00214C  6E7B               	movwf	_was_low_3,c	;volatile
 16393                           
 16394                           ; BSR set to: 0
 16395                           ;Test.c: 383: initServos();
 16396  00214E  EC66  F029         	call	_initServos	;wreg free
 16397                           
 16398                           ;Test.c: 384: _delay((unsigned long)((1500)*(32000000/4000.0)));
 16399  002152  0E3D               	movlw	61
 16400  002154  0100               	movlb	0	; () banked
 16401  002156  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16402  002158  0EE1               	movlw	225
 16403  00215A  0100               	movlb	0	; () banked
 16404  00215C  6FAB               	movwf	??_BothServos& (0+255),b
 16405  00215E  0E3F               	movlw	63
 16406  002160                     u11897:
 16407  002160  2EE8               	decfsz	wreg,f,c
 16408  002162  D7FE               	bra	u11897
 16409  002164  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16410  002166  D7FC               	bra	u11897
 16411  002168  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16412  00216A  D7FA               	bra	u11897
 16413  00216C  D000               	nop2	
 16414                           
 16415                           ;Test.c: 386: updateServoPosition(500, 1);
 16416  00216E  0E01               	movlw	1
 16417  002170  0100               	movlb	0	; () banked
 16418  002172  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16419  002174  0EF4               	movlw	244
 16420  002176  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16421  002178  0E00               	movlw	0
 16422  00217A  0100               	movlb	0	; () banked
 16423  00217C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16424  00217E  0E01               	movlw	1
 16425  002180  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16426  002182  EC27  F029         	call	_updateServoPosition	;wreg free
 16427                           
 16428                           ;Test.c: 387: updateServoPosition(1050, 3);
 16429  002186  0E04               	movlw	4
 16430  002188  0100               	movlb	0	; () banked
 16431  00218A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16432  00218C  0E1A               	movlw	26
 16433  00218E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16434  002190  0E00               	movlw	0
 16435  002192  0100               	movlb	0	; () banked
 16436  002194  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16437  002196  0E03               	movlw	3
 16438  002198  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16439  00219A  EC27  F029         	call	_updateServoPosition	;wreg free
 16440                           
 16441                           ;Test.c: 388: _delay((unsigned long)((750)*(32000000/4000.0)));
 16442  00219E  0E1F               	movlw	31
 16443  0021A0  0100               	movlb	0	; () banked
 16444  0021A2  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16445  0021A4  0E71               	movlw	113
 16446  0021A6  0100               	movlb	0	; () banked
 16447  0021A8  6FAB               	movwf	??_BothServos& (0+255),b
 16448  0021AA  0E1E               	movlw	30
 16449  0021AC                     u11907:
 16450  0021AC  2EE8               	decfsz	wreg,f,c
 16451  0021AE  D7FE               	bra	u11907
 16452  0021B0  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16453  0021B2  D7FC               	bra	u11907
 16454  0021B4  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16455  0021B6  D7FA               	bra	u11907
 16456  0021B8  F000               	nop	
 16457                           
 16458                           ;Test.c: 389: updateServoPosition(1260, 3);
 16459  0021BA  0E04               	movlw	4
 16460  0021BC  0100               	movlb	0	; () banked
 16461  0021BE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16462  0021C0  0EEC               	movlw	236
 16463  0021C2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16464  0021C4  0E00               	movlw	0
 16465  0021C6  0100               	movlb	0	; () banked
 16466  0021C8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16467  0021CA  0E03               	movlw	3
 16468  0021CC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16469  0021CE  EC27  F029         	call	_updateServoPosition	;wreg free
 16470                           
 16471                           ;Test.c: 390: _delay((unsigned long)((700)*(32000000/4000.0)));
 16472  0021D2  0E1D               	movlw	29
 16473  0021D4  0100               	movlb	0	; () banked
 16474  0021D6  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16475  0021D8  0E69               	movlw	105
 16476  0021DA  0100               	movlb	0	; () banked
 16477  0021DC  6FAB               	movwf	??_BothServos& (0+255),b
 16478  0021DE  0EA5               	movlw	165
 16479  0021E0                     u11917:
 16480  0021E0  2EE8               	decfsz	wreg,f,c
 16481  0021E2  D7FE               	bra	u11917
 16482  0021E4  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16483  0021E6  D7FC               	bra	u11917
 16484  0021E8  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16485  0021EA  D7FA               	bra	u11917
 16486                           
 16487                           ;Test.c: 391: updateServoPosition(1050, 3);
 16488  0021EC  0E04               	movlw	4
 16489  0021EE  0100               	movlb	0	; () banked
 16490  0021F0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16491  0021F2  0E1A               	movlw	26
 16492  0021F4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16493  0021F6  0E00               	movlw	0
 16494  0021F8  0100               	movlb	0	; () banked
 16495  0021FA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16496  0021FC  0E03               	movlw	3
 16497  0021FE  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16498  002200  EC27  F029         	call	_updateServoPosition	;wreg free
 16499                           
 16500                           ;Test.c: 392: _delay((unsigned long)((750)*(32000000/4000.0)));
 16501  002204  0E1F               	movlw	31
 16502  002206  0100               	movlb	0	; () banked
 16503  002208  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16504  00220A  0E71               	movlw	113
 16505  00220C  0100               	movlb	0	; () banked
 16506  00220E  6FAB               	movwf	??_BothServos& (0+255),b
 16507  002210  0E1E               	movlw	30
 16508  002212                     u11927:
 16509  002212  2EE8               	decfsz	wreg,f,c
 16510  002214  D7FE               	bra	u11927
 16511  002216  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16512  002218  D7FC               	bra	u11927
 16513  00221A  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16514  00221C  D7FA               	bra	u11927
 16515  00221E  F000               	nop	
 16516                           
 16517                           ;Test.c: 394: updateServoPosition(850, 1);
 16518  002220  0E03               	movlw	3
 16519  002222  0100               	movlb	0	; () banked
 16520  002224  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16521  002226  0E52               	movlw	82
 16522  002228  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16523  00222A  0E00               	movlw	0
 16524  00222C  0100               	movlb	0	; () banked
 16525  00222E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16526  002230  0E01               	movlw	1
 16527  002232  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16528  002234  EC27  F029         	call	_updateServoPosition	;wreg free
 16529                           
 16530                           ;Test.c: 395: updateServoPosition(1050, 3);
 16531  002238  0E04               	movlw	4
 16532  00223A  0100               	movlb	0	; () banked
 16533  00223C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16534  00223E  0E1A               	movlw	26
 16535  002240  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16536  002242  0E00               	movlw	0
 16537  002244  0100               	movlb	0	; () banked
 16538  002246  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16539  002248  0E03               	movlw	3
 16540  00224A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16541  00224C  EC27  F029         	call	_updateServoPosition	;wreg free
 16542                           
 16543                           ;Test.c: 396: _delay((unsigned long)((750)*(32000000/4000.0)));
 16544  002250  0E1F               	movlw	31
 16545  002252  0100               	movlb	0	; () banked
 16546  002254  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16547  002256  0E71               	movlw	113
 16548  002258  0100               	movlb	0	; () banked
 16549  00225A  6FAB               	movwf	??_BothServos& (0+255),b
 16550  00225C  0E1E               	movlw	30
 16551  00225E                     u11937:
 16552  00225E  2EE8               	decfsz	wreg,f,c
 16553  002260  D7FE               	bra	u11937
 16554  002262  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16555  002264  D7FC               	bra	u11937
 16556  002266  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16557  002268  D7FA               	bra	u11937
 16558  00226A  F000               	nop	
 16559                           
 16560                           ;Test.c: 397: updateServoPosition(1260, 3);
 16561  00226C  0E04               	movlw	4
 16562  00226E  0100               	movlb	0	; () banked
 16563  002270  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16564  002272  0EEC               	movlw	236
 16565  002274  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16566  002276  0E00               	movlw	0
 16567  002278  0100               	movlb	0	; () banked
 16568  00227A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16569  00227C  0E03               	movlw	3
 16570  00227E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16571  002280  EC27  F029         	call	_updateServoPosition	;wreg free
 16572                           
 16573                           ;Test.c: 398: _delay((unsigned long)((700)*(32000000/4000.0)));
 16574  002284  0E1D               	movlw	29
 16575  002286  0100               	movlb	0	; () banked
 16576  002288  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16577  00228A  0E69               	movlw	105
 16578  00228C  0100               	movlb	0	; () banked
 16579  00228E  6FAB               	movwf	??_BothServos& (0+255),b
 16580  002290  0EA5               	movlw	165
 16581  002292                     u11947:
 16582  002292  2EE8               	decfsz	wreg,f,c
 16583  002294  D7FE               	bra	u11947
 16584  002296  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16585  002298  D7FC               	bra	u11947
 16586  00229A  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16587  00229C  D7FA               	bra	u11947
 16588                           
 16589                           ;Test.c: 399: updateServoPosition(1050, 3);
 16590  00229E  0E04               	movlw	4
 16591  0022A0  0100               	movlb	0	; () banked
 16592  0022A2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16593  0022A4  0E1A               	movlw	26
 16594  0022A6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16595  0022A8  0E00               	movlw	0
 16596  0022AA  0100               	movlb	0	; () banked
 16597  0022AC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16598  0022AE  0E03               	movlw	3
 16599  0022B0  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16600  0022B2  EC27  F029         	call	_updateServoPosition	;wreg free
 16601                           
 16602                           ;Test.c: 400: _delay((unsigned long)((750)*(32000000/4000.0)));
 16603  0022B6  0E1F               	movlw	31
 16604  0022B8  0100               	movlb	0	; () banked
 16605  0022BA  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16606  0022BC  0E71               	movlw	113
 16607  0022BE  0100               	movlb	0	; () banked
 16608  0022C0  6FAB               	movwf	??_BothServos& (0+255),b
 16609  0022C2  0E1E               	movlw	30
 16610  0022C4                     u11957:
 16611  0022C4  2EE8               	decfsz	wreg,f,c
 16612  0022C6  D7FE               	bra	u11957
 16613  0022C8  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16614  0022CA  D7FC               	bra	u11957
 16615  0022CC  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16616  0022CE  D7FA               	bra	u11957
 16617  0022D0  F000               	nop	
 16618                           
 16619                           ;Test.c: 402: updateServoPosition(500, 1);
 16620  0022D2  0E01               	movlw	1
 16621  0022D4  0100               	movlb	0	; () banked
 16622  0022D6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16623  0022D8  0EF4               	movlw	244
 16624  0022DA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16625  0022DC  0E00               	movlw	0
 16626  0022DE  0100               	movlb	0	; () banked
 16627  0022E0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16628  0022E2  0E01               	movlw	1
 16629  0022E4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16630  0022E6  EC27  F029         	call	_updateServoPosition	;wreg free
 16631                           
 16632                           ;Test.c: 403: updateServoPosition(1050, 3);
 16633  0022EA  0E04               	movlw	4
 16634  0022EC  0100               	movlb	0	; () banked
 16635  0022EE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16636  0022F0  0E1A               	movlw	26
 16637  0022F2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16638  0022F4  0E00               	movlw	0
 16639  0022F6  0100               	movlb	0	; () banked
 16640  0022F8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16641  0022FA  0E03               	movlw	3
 16642  0022FC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16643  0022FE  EC27  F029         	call	_updateServoPosition	;wreg free
 16644                           
 16645                           ;Test.c: 404: _delay((unsigned long)((750)*(32000000/4000.0)));
 16646  002302  0E1F               	movlw	31
 16647  002304  0100               	movlb	0	; () banked
 16648  002306  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16649  002308  0E71               	movlw	113
 16650  00230A  0100               	movlb	0	; () banked
 16651  00230C  6FAB               	movwf	??_BothServos& (0+255),b
 16652  00230E  0E1E               	movlw	30
 16653  002310                     u11967:
 16654  002310  2EE8               	decfsz	wreg,f,c
 16655  002312  D7FE               	bra	u11967
 16656  002314  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16657  002316  D7FC               	bra	u11967
 16658  002318  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16659  00231A  D7FA               	bra	u11967
 16660  00231C  F000               	nop	
 16661                           
 16662                           ;Test.c: 405: updateServoPosition(1260, 3);
 16663  00231E  0E04               	movlw	4
 16664  002320  0100               	movlb	0	; () banked
 16665  002322  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16666  002324  0EEC               	movlw	236
 16667  002326  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16668  002328  0E00               	movlw	0
 16669  00232A  0100               	movlb	0	; () banked
 16670  00232C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16671  00232E  0E03               	movlw	3
 16672  002330  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16673  002332  EC27  F029         	call	_updateServoPosition	;wreg free
 16674                           
 16675                           ;Test.c: 406: _delay((unsigned long)((700)*(32000000/4000.0)));
 16676  002336  0E1D               	movlw	29
 16677  002338  0100               	movlb	0	; () banked
 16678  00233A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16679  00233C  0E69               	movlw	105
 16680  00233E  0100               	movlb	0	; () banked
 16681  002340  6FAB               	movwf	??_BothServos& (0+255),b
 16682  002342  0EA5               	movlw	165
 16683  002344                     u11977:
 16684  002344  2EE8               	decfsz	wreg,f,c
 16685  002346  D7FE               	bra	u11977
 16686  002348  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16687  00234A  D7FC               	bra	u11977
 16688  00234C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16689  00234E  D7FA               	bra	u11977
 16690                           
 16691                           ;Test.c: 407: updateServoPosition(1050, 3);
 16692  002350  0E04               	movlw	4
 16693  002352  0100               	movlb	0	; () banked
 16694  002354  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16695  002356  0E1A               	movlw	26
 16696  002358  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16697  00235A  0E00               	movlw	0
 16698  00235C  0100               	movlb	0	; () banked
 16699  00235E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16700  002360  0E03               	movlw	3
 16701  002362  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16702  002364  EC27  F029         	call	_updateServoPosition	;wreg free
 16703                           
 16704                           ;Test.c: 408: _delay((unsigned long)((1500)*(32000000/4000.0)));
 16705  002368  0E3D               	movlw	61
 16706  00236A  0100               	movlb	0	; () banked
 16707  00236C  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16708  00236E  0EE1               	movlw	225
 16709  002370  0100               	movlb	0	; () banked
 16710  002372  6FAB               	movwf	??_BothServos& (0+255),b
 16711  002374  0E3F               	movlw	63
 16712  002376                     u11987:
 16713  002376  2EE8               	decfsz	wreg,f,c
 16714  002378  D7FE               	bra	u11987
 16715  00237A  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16716  00237C  D7FC               	bra	u11987
 16717  00237E  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16718  002380  D7FA               	bra	u11987
 16719  002382  D000               	nop2	
 16720                           
 16721                           ;Test.c: 410: updateServoPosition(1670, 1);
 16722  002384  0E06               	movlw	6
 16723  002386  0100               	movlb	0	; () banked
 16724  002388  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16725  00238A  0E86               	movlw	134
 16726  00238C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16727  00238E  0E00               	movlw	0
 16728  002390  0100               	movlb	0	; () banked
 16729  002392  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16730  002394  0E01               	movlw	1
 16731  002396  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16732  002398  EC27  F029         	call	_updateServoPosition	;wreg free
 16733                           
 16734                           ;Test.c: 411: updateServoPosition(1050, 3);
 16735  00239C  0E04               	movlw	4
 16736  00239E  0100               	movlb	0	; () banked
 16737  0023A0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16738  0023A2  0E1A               	movlw	26
 16739  0023A4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16740  0023A6  0E00               	movlw	0
 16741  0023A8  0100               	movlb	0	; () banked
 16742  0023AA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16743  0023AC  0E03               	movlw	3
 16744  0023AE  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16745  0023B0  EC27  F029         	call	_updateServoPosition	;wreg free
 16746                           
 16747                           ;Test.c: 412: _delay((unsigned long)((750)*(32000000/4000.0)));
 16748  0023B4  0E1F               	movlw	31
 16749  0023B6  0100               	movlb	0	; () banked
 16750  0023B8  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16751  0023BA  0E71               	movlw	113
 16752  0023BC  0100               	movlb	0	; () banked
 16753  0023BE  6FAB               	movwf	??_BothServos& (0+255),b
 16754  0023C0  0E1E               	movlw	30
 16755  0023C2                     u11997:
 16756  0023C2  2EE8               	decfsz	wreg,f,c
 16757  0023C4  D7FE               	bra	u11997
 16758  0023C6  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16759  0023C8  D7FC               	bra	u11997
 16760  0023CA  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16761  0023CC  D7FA               	bra	u11997
 16762  0023CE  F000               	nop	
 16763                           
 16764                           ;Test.c: 413: updateServoPosition(1390, 3);
 16765  0023D0  0E05               	movlw	5
 16766  0023D2  0100               	movlb	0	; () banked
 16767  0023D4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16768  0023D6  0E6E               	movlw	110
 16769  0023D8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16770  0023DA  0E00               	movlw	0
 16771  0023DC  0100               	movlb	0	; () banked
 16772  0023DE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16773  0023E0  0E03               	movlw	3
 16774  0023E2  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16775  0023E4  EC27  F029         	call	_updateServoPosition	;wreg free
 16776                           
 16777                           ;Test.c: 414: _delay((unsigned long)((700)*(32000000/4000.0)));
 16778  0023E8  0E1D               	movlw	29
 16779  0023EA  0100               	movlb	0	; () banked
 16780  0023EC  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16781  0023EE  0E69               	movlw	105
 16782  0023F0  0100               	movlb	0	; () banked
 16783  0023F2  6FAB               	movwf	??_BothServos& (0+255),b
 16784  0023F4  0EA5               	movlw	165
 16785  0023F6                     u12007:
 16786  0023F6  2EE8               	decfsz	wreg,f,c
 16787  0023F8  D7FE               	bra	u12007
 16788  0023FA  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16789  0023FC  D7FC               	bra	u12007
 16790  0023FE  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16791  002400  D7FA               	bra	u12007
 16792                           
 16793                           ;Test.c: 415: updateServoPosition(1050, 3);
 16794  002402  0E04               	movlw	4
 16795  002404  0100               	movlb	0	; () banked
 16796  002406  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16797  002408  0E1A               	movlw	26
 16798  00240A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16799  00240C  0E00               	movlw	0
 16800  00240E  0100               	movlb	0	; () banked
 16801  002410  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16802  002412  0E03               	movlw	3
 16803  002414  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16804  002416  EC27  F029         	call	_updateServoPosition	;wreg free
 16805                           
 16806                           ;Test.c: 416: _delay((unsigned long)((750)*(32000000/4000.0)));
 16807  00241A  0E1F               	movlw	31
 16808  00241C  0100               	movlb	0	; () banked
 16809  00241E  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16810  002420  0E71               	movlw	113
 16811  002422  0100               	movlb	0	; () banked
 16812  002424  6FAB               	movwf	??_BothServos& (0+255),b
 16813  002426  0E1E               	movlw	30
 16814  002428                     u12017:
 16815  002428  2EE8               	decfsz	wreg,f,c
 16816  00242A  D7FE               	bra	u12017
 16817  00242C  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16818  00242E  D7FC               	bra	u12017
 16819  002430  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16820  002432  D7FA               	bra	u12017
 16821  002434  F000               	nop	
 16822                           
 16823                           ;Test.c: 418: updateServoPosition(2400, 1);
 16824  002436  0E09               	movlw	9
 16825  002438  0100               	movlb	0	; () banked
 16826  00243A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16827  00243C  0E60               	movlw	96
 16828  00243E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16829  002440  0E00               	movlw	0
 16830  002442  0100               	movlb	0	; () banked
 16831  002444  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16832  002446  0E01               	movlw	1
 16833  002448  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16834  00244A  EC27  F029         	call	_updateServoPosition	;wreg free
 16835                           
 16836                           ;Test.c: 419: updateServoPosition(1050, 3);
 16837  00244E  0E04               	movlw	4
 16838  002450  0100               	movlb	0	; () banked
 16839  002452  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16840  002454  0E1A               	movlw	26
 16841  002456  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16842  002458  0E00               	movlw	0
 16843  00245A  0100               	movlb	0	; () banked
 16844  00245C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16845  00245E  0E03               	movlw	3
 16846  002460  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16847  002462  EC27  F029         	call	_updateServoPosition	;wreg free
 16848                           
 16849                           ;Test.c: 420: _delay((unsigned long)((750)*(32000000/4000.0)));
 16850  002466  0E1F               	movlw	31
 16851  002468  0100               	movlb	0	; () banked
 16852  00246A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16853  00246C  0E71               	movlw	113
 16854  00246E  0100               	movlb	0	; () banked
 16855  002470  6FAB               	movwf	??_BothServos& (0+255),b
 16856  002472  0E1E               	movlw	30
 16857  002474                     u12027:
 16858  002474  2EE8               	decfsz	wreg,f,c
 16859  002476  D7FE               	bra	u12027
 16860  002478  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16861  00247A  D7FC               	bra	u12027
 16862  00247C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16863  00247E  D7FA               	bra	u12027
 16864  002480  F000               	nop	
 16865                           
 16866                           ;Test.c: 421: updateServoPosition(1390, 3);
 16867  002482  0E05               	movlw	5
 16868  002484  0100               	movlb	0	; () banked
 16869  002486  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16870  002488  0E6E               	movlw	110
 16871  00248A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16872  00248C  0E00               	movlw	0
 16873  00248E  0100               	movlb	0	; () banked
 16874  002490  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16875  002492  0E03               	movlw	3
 16876  002494  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16877  002496  EC27  F029         	call	_updateServoPosition	;wreg free
 16878                           
 16879                           ;Test.c: 422: _delay((unsigned long)((700)*(32000000/4000.0)));
 16880  00249A  0E1D               	movlw	29
 16881  00249C  0100               	movlb	0	; () banked
 16882  00249E  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16883  0024A0  0E69               	movlw	105
 16884  0024A2  0100               	movlb	0	; () banked
 16885  0024A4  6FAB               	movwf	??_BothServos& (0+255),b
 16886  0024A6  0EA5               	movlw	165
 16887  0024A8                     u12037:
 16888  0024A8  2EE8               	decfsz	wreg,f,c
 16889  0024AA  D7FE               	bra	u12037
 16890  0024AC  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16891  0024AE  D7FC               	bra	u12037
 16892  0024B0  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16893  0024B2  D7FA               	bra	u12037
 16894                           
 16895                           ;Test.c: 423: updateServoPosition(1050, 3);
 16896  0024B4  0E04               	movlw	4
 16897  0024B6  0100               	movlb	0	; () banked
 16898  0024B8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16899  0024BA  0E1A               	movlw	26
 16900  0024BC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16901  0024BE  0E00               	movlw	0
 16902  0024C0  0100               	movlb	0	; () banked
 16903  0024C2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16904  0024C4  0E03               	movlw	3
 16905  0024C6  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16906  0024C8  EC27  F029         	call	_updateServoPosition	;wreg free
 16907                           
 16908                           ;Test.c: 424: _delay((unsigned long)((750)*(32000000/4000.0)));
 16909  0024CC  0E1F               	movlw	31
 16910  0024CE  0100               	movlb	0	; () banked
 16911  0024D0  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16912  0024D2  0E71               	movlw	113
 16913  0024D4  0100               	movlb	0	; () banked
 16914  0024D6  6FAB               	movwf	??_BothServos& (0+255),b
 16915  0024D8  0E1E               	movlw	30
 16916  0024DA                     u12047:
 16917  0024DA  2EE8               	decfsz	wreg,f,c
 16918  0024DC  D7FE               	bra	u12047
 16919  0024DE  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16920  0024E0  D7FC               	bra	u12047
 16921  0024E2  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16922  0024E4  D7FA               	bra	u12047
 16923  0024E6  F000               	nop	
 16924                           
 16925                           ;Test.c: 426: stopSignals();
 16926  0024E8  EC56  F02F         	call	_stopSignals	;wreg free
 16927                           
 16928                           ;Test.c: 427: machine_state = Testing_state;
 16929  0024EC  0E03               	movlw	3
 16930  0024EE  0100               	movlb	0	; () banked
 16931  0024F0  6FFC               	movwf	_machine_state& (0+255),b
 16932                           
 16933                           ; BSR set to: 0
 16934  0024F2  0012               	return		;funcret
 16935  0024F4                     __end_of_BothServos:
 16936                           	opt stack 0
 16937                           tblptru	equ	0xFF8
 16938                           tblptrh	equ	0xFF7
 16939                           tblptrl	equ	0xFF6
 16940                           tablat	equ	0xFF5
 16941                           prodh	equ	0xFF4
 16942                           prodl	equ	0xFF3
 16943                           intcon	equ	0xFF2
 16944                           intcon2	equ	0xFF1
 16945                           intcon3	equ	0xFF0
 16946                           postinc0	equ	0xFEE
 16947                           wreg	equ	0xFE8
 16948                           postdec1	equ	0xFE5
 16949                           fsr1l	equ	0xFE1
 16950                           indf2	equ	0xFDF
 16951                           postinc2	equ	0xFDE
 16952                           postdec2	equ	0xFDD
 16953                           fsr2h	equ	0xFDA
 16954                           fsr2l	equ	0xFD9
 16955                           status	equ	0xFD8
 16956                           
 16957 ;; *************** function _stopSignals *****************
 16958 ;; Defined at:
 16959 ;;		line 71 in file "main.c"
 16960 ;; Parameters:    Size  Location     Type
 16961 ;;		None
 16962 ;; Auto vars:     Size  Location     Type
 16963 ;;		None
 16964 ;; Return value:  Size  Location     Type
 16965 ;;                  1    wreg      void 
 16966 ;; Registers used:
 16967 ;;		wreg, status,2
 16968 ;; Tracked objects:
 16969 ;;		On entry : 0/0
 16970 ;;		On exit  : 0/0
 16971 ;;		Unchanged: 0/0
 16972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16973 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16974 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16975 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16976 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16977 ;;Total ram usage:        0 bytes
 16978 ;; Hardware stack levels used:    1
 16979 ;; Hardware stack levels required when called:    7
 16980 ;; This function calls:
 16981 ;;		Nothing
 16982 ;; This function is called by:
 16983 ;;		_main
 16984 ;;		_BothServos
 16985 ;;		_PlatformTest
 16986 ;;		_arm
 16987 ;; This function uses a non-reentrant model
 16988 ;;
 16989                           
 16990                           	psect	text51
 16991  005EAC                     __ptext51:
 16992                           	opt stack 0
 16993  005EAC                     _stopSignals:
 16994                           	opt stack 23
 16995                           
 16996                           ;main.c: 72: LATA = 0x00;
 16997                           
 16998                           ; BSR set to: 0
 16999                           ;incstack = 0
 17000  005EAC  0E00               	movlw	0
 17001  005EAE  6E89               	movwf	3977,c	;volatile
 17002                           
 17003                           ;main.c: 73: LATB = 0x00;
 17004  005EB0  0E00               	movlw	0
 17005  005EB2  6E8A               	movwf	3978,c	;volatile
 17006                           
 17007                           ;main.c: 74: LATC = 0x00;
 17008  005EB4  0E00               	movlw	0
 17009  005EB6  6E8B               	movwf	3979,c	;volatile
 17010                           
 17011                           ;main.c: 75: LATD = 0x00;
 17012  005EB8  0E00               	movlw	0
 17013  005EBA  6E8C               	movwf	3980,c	;volatile
 17014                           
 17015                           ;main.c: 76: LATE = 0x00;
 17016  005EBC  0E00               	movlw	0
 17017  005EBE  6E8D               	movwf	3981,c	;volatile
 17018                           
 17019                           ;main.c: 77: TMR1IE = 0;
 17020  005EC0  909D               	bcf	3997,0,c	;volatile
 17021                           
 17022                           ;main.c: 78: TMR2IE = 0;
 17023  005EC2  929D               	bcf	3997,1,c	;volatile
 17024                           
 17025                           ;main.c: 79: TMR3IE = 0;
 17026  005EC4  92A0               	bcf	4000,1,c	;volatile
 17027  005EC6  0012               	return		;funcret
 17028  005EC8                     __end_of_stopSignals:
 17029                           	opt stack 0
 17030                           tblptru	equ	0xFF8
 17031                           tblptrh	equ	0xFF7
 17032                           tblptrl	equ	0xFF6
 17033                           tablat	equ	0xFF5
 17034                           prodh	equ	0xFF4
 17035                           prodl	equ	0xFF3
 17036                           intcon	equ	0xFF2
 17037                           intcon2	equ	0xFF1
 17038                           intcon3	equ	0xFF0
 17039                           postinc0	equ	0xFEE
 17040                           wreg	equ	0xFE8
 17041                           postdec1	equ	0xFE5
 17042                           fsr1l	equ	0xFE1
 17043                           indf2	equ	0xFDF
 17044                           postinc2	equ	0xFDE
 17045                           postdec2	equ	0xFDD
 17046                           fsr2h	equ	0xFDA
 17047                           fsr2l	equ	0xFD9
 17048                           status	equ	0xFD8
 17049                           
 17050 ;; *************** function _initServos *****************
 17051 ;; Defined at:
 17052 ;;		line 498 in file "sort.c"
 17053 ;; Parameters:    Size  Location     Type
 17054 ;;		None
 17055 ;; Auto vars:     Size  Location     Type
 17056 ;;		None
 17057 ;; Return value:  Size  Location     Type
 17058 ;;                  1    wreg      void 
 17059 ;; Registers used:
 17060 ;;		wreg, status,2, status,0, cstack
 17061 ;; Tracked objects:
 17062 ;;		On entry : 0/0
 17063 ;;		On exit  : 0/0
 17064 ;;		Unchanged: 0/0
 17065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17066 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17067 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17068 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17069 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17070 ;;Total ram usage:        1 bytes
 17071 ;; Hardware stack levels used:    1
 17072 ;; Hardware stack levels required when called:    8
 17073 ;; This function calls:
 17074 ;;		_updateServoPosition
 17075 ;; This function is called by:
 17076 ;;		_Loading
 17077 ;;		_BothServos
 17078 ;; This function uses a non-reentrant model
 17079 ;;
 17080                           
 17081                           	psect	text52
 17082  0052CC                     __ptext52:
 17083                           	opt stack 0
 17084  0052CC                     _initServos:
 17085                           	opt stack 20
 17086                           
 17087                           ;sort.c: 500: updateServoPosition(1200, 1);
 17088                           
 17089                           ;incstack = 0
 17090  0052CC  0E04               	movlw	4
 17091  0052CE  0100               	movlb	0	; () banked
 17092  0052D0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 17093  0052D2  0EB0               	movlw	176
 17094  0052D4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 17095  0052D6  0E00               	movlw	0
 17096  0052D8  0100               	movlb	0	; () banked
 17097  0052DA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 17098  0052DC  0E01               	movlw	1
 17099  0052DE  6F82               	movwf	updateServoPosition@timer& (0+255),b
 17100  0052E0  EC27  F029         	call	_updateServoPosition	;wreg free
 17101                           
 17102                           ;sort.c: 501: updateServoPosition(1050, 3);
 17103  0052E4  0E04               	movlw	4
 17104  0052E6  0100               	movlb	0	; () banked
 17105  0052E8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 17106  0052EA  0E1A               	movlw	26
 17107  0052EC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 17108  0052EE  0E00               	movlw	0
 17109  0052F0  0100               	movlb	0	; () banked
 17110  0052F2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 17111  0052F4  0E03               	movlw	3
 17112  0052F6  6F82               	movwf	updateServoPosition@timer& (0+255),b
 17113  0052F8  EC27  F029         	call	_updateServoPosition	;wreg free
 17114                           
 17115                           ;sort.c: 502: TMR1ON = 1;
 17116  0052FC  80CD               	bsf	4045,0,c	;volatile
 17117                           
 17118                           ;sort.c: 503: was_low_1 = 0;
 17119  0052FE  0E00               	movlw	0
 17120  005300  6E78               	movwf	_was_low_1+1,c	;volatile
 17121  005302  0E00               	movlw	0
 17122  005304  6E77               	movwf	_was_low_1,c	;volatile
 17123                           
 17124                           ;sort.c: 505: _delay((unsigned long)((5)*(32000000/4000.0)));
 17125  005306  0E34               	movlw	52
 17126  005308  0100               	movlb	0	; () banked
 17127  00530A  6F88               	movwf	??_initServos& (0+255),b
 17128  00530C  0EF1               	movlw	241
 17129  00530E                     u12057:
 17130  00530E  2EE8               	decfsz	wreg,f,c
 17131  005310  D7FE               	bra	u12057
 17132  005312  2F88               	decfsz	??_initServos& (0+255),f,b
 17133  005314  D7FC               	bra	u12057
 17134  005316  D000               	nop2	
 17135                           
 17136                           ;sort.c: 507: TMR3ON = 1;
 17137  005318  80B1               	bsf	4017,0,c	;volatile
 17138                           
 17139                           ;sort.c: 508: was_low_3 = 0;
 17140  00531A  0E00               	movlw	0
 17141  00531C  6E7C               	movwf	_was_low_3+1,c	;volatile
 17142  00531E  0E00               	movlw	0
 17143  005320  6E7B               	movwf	_was_low_3,c	;volatile
 17144                           
 17145                           ;sort.c: 511: _delay((unsigned long)((1)*(32000000/4000.0)));
 17146  005322  0E0B               	movlw	11
 17147  005324  0100               	movlb	0	; () banked
 17148  005326  6F88               	movwf	??_initServos& (0+255),b
 17149  005328  0E62               	movlw	98
 17150  00532A                     u12067:
 17151  00532A  2EE8               	decfsz	wreg,f,c
 17152  00532C  D7FE               	bra	u12067
 17153  00532E  2F88               	decfsz	??_initServos& (0+255),f,b
 17154  005330  D7FC               	bra	u12067
 17155  005332  F000               	nop	
 17156                           
 17157                           ;sort.c: 512: LATBbits.LATB3 = 0;
 17158  005334  968A               	bcf	3978,3,c	;volatile
 17159                           
 17160                           ;sort.c: 513: TMR2ON = 1;
 17161  005336  84CA               	bsf	4042,2,c	;volatile
 17162                           
 17163                           ;sort.c: 514: was_low_2 = 0;
 17164  005338  0E00               	movlw	0
 17165  00533A  6E7A               	movwf	_was_low_2+1,c	;volatile
 17166  00533C  0E00               	movlw	0
 17167  00533E  6E79               	movwf	_was_low_2,c	;volatile
 17168                           
 17169                           ;sort.c: 516: LATCbits.LATC0 = 1;
 17170  005340  808B               	bsf	3979,0,c	;volatile
 17171  005342  0012               	return		;funcret
 17172  005344                     __end_of_initServos:
 17173                           	opt stack 0
 17174                           tblptru	equ	0xFF8
 17175                           tblptrh	equ	0xFF7
 17176                           tblptrl	equ	0xFF6
 17177                           tablat	equ	0xFF5
 17178                           prodh	equ	0xFF4
 17179                           prodl	equ	0xFF3
 17180                           intcon	equ	0xFF2
 17181                           intcon2	equ	0xFF1
 17182                           intcon3	equ	0xFF0
 17183                           postinc0	equ	0xFEE
 17184                           wreg	equ	0xFE8
 17185                           postdec1	equ	0xFE5
 17186                           fsr1l	equ	0xFE1
 17187                           indf2	equ	0xFDF
 17188                           postinc2	equ	0xFDE
 17189                           postdec2	equ	0xFDD
 17190                           fsr2h	equ	0xFDA
 17191                           fsr2l	equ	0xFD9
 17192                           status	equ	0xFD8
 17193                           
 17194 ;; *************** function _updateServoPosition *****************
 17195 ;; Defined at:
 17196 ;;		line 606 in file "sort.c"
 17197 ;; Parameters:    Size  Location     Type
 17198 ;;  time_us         2    0[BANK0 ] int 
 17199 ;;  timer           2    2[BANK0 ] int 
 17200 ;; Auto vars:     Size  Location     Type
 17201 ;;  my_time         2    6[BANK0 ] unsigned int 
 17202 ;; Return value:  Size  Location     Type
 17203 ;;                  1    wreg      void 
 17204 ;; Registers used:
 17205 ;;		wreg, status,2, status,0
 17206 ;; Tracked objects:
 17207 ;;		On entry : 0/0
 17208 ;;		On exit  : 0/0
 17209 ;;		Unchanged: 0/0
 17210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17211 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17212 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17213 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17214 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17215 ;;Total ram usage:        8 bytes
 17216 ;; Hardware stack levels used:    1
 17217 ;; Hardware stack levels required when called:    7
 17218 ;; This function calls:
 17219 ;;		Nothing
 17220 ;; This function is called by:
 17221 ;;		_Distribution
 17222 ;;		_initServos
 17223 ;;		_actuatorTest
 17224 ;;		_BothServos
 17225 ;; This function uses a non-reentrant model
 17226 ;;
 17227                           
 17228                           	psect	text53
 17229  00524E                     __ptext53:
 17230                           	opt stack 0
 17231  00524E                     _updateServoPosition:
 17232                           	opt stack 20
 17233                           
 17234                           ;sort.c: 607: unsigned int my_time = 65535 - time_us;
 17235                           
 17236                           ;incstack = 0
 17237  00524E  C080  F084         	movff	updateServoPosition@time_us,??_updateServoPosition
 17238  005252  C081  F085         	movff	updateServoPosition@time_us+1,??_updateServoPosition+1
 17239  005256  0100               	movlb	0	; () banked
 17240  005258  1F84               	comf	??_updateServoPosition& (0+255),f,b
 17241  00525A  1F85               	comf	(??_updateServoPosition+1)& (0+255),f,b
 17242  00525C  4B84               	infsnz	??_updateServoPosition& (0+255),f,b
 17243  00525E  2B85               	incf	(??_updateServoPosition+1)& (0+255),f,b
 17244  005260  0EFF               	movlw	255
 17245  005262  0100               	movlb	0	; () banked
 17246  005264  2584               	addwf	??_updateServoPosition& (0+255),w,b
 17247  005266  0100               	movlb	0	; () banked
 17248  005268  6F86               	movwf	updateServoPosition@my_time& (0+255),b
 17249  00526A  0EFF               	movlw	255
 17250  00526C  0100               	movlb	0	; () banked
 17251  00526E  2185               	addwfc	(??_updateServoPosition+1)& (0+255),w,b
 17252  005270  0100               	movlb	0	; () banked
 17253  005272  6F87               	movwf	(updateServoPosition@my_time+1)& (0+255),b
 17254                           
 17255                           ;sort.c: 608: switch(timer){
 17256  005274  D019               	goto	l7048
 17257  005276                     l7042:
 17258                           
 17259                           ; BSR set to: 0
 17260                           ;sort.c: 610: servoTimes[0] = my_time >> 8;
 17261  005276  0100               	movlb	0	; () banked
 17262  005278  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 17263  00527A  6E5B               	movwf	_servoTimes,c
 17264  00527C  6A5C               	clrf	_servoTimes+1,c
 17265                           
 17266                           ;sort.c: 611: servoTimes[1] = my_time & 0xFF;
 17267  00527E  0100               	movlb	0	; () banked
 17268  005280  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 17269  005282  6E5D               	movwf	_servoTimes+2,c
 17270  005284  6A5E               	clrf	_servoTimes+3,c
 17271                           
 17272                           ; BSR set to: 0
 17273                           ;sort.c: 613: pan_servo_state = time_us;
 17274  005286  C080  F06B         	movff	updateServoPosition@time_us,_pan_servo_state	;volatile
 17275  00528A  C081  F06C         	movff	updateServoPosition@time_us+1,_pan_servo_state+1	;volatile
 17276  00528E                     l952:
 17277                           
 17278                           ; BSR set to: 0
 17279                           ;sort.c: 615: servoTimes[2] = my_time >> 8;
 17280  00528E  0100               	movlb	0	; () banked
 17281  005290  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 17282  005292  6E5F               	movwf	_servoTimes+4,c
 17283  005294  6A60               	clrf	_servoTimes+5,c
 17284                           
 17285                           ;sort.c: 616: servoTimes[3] = my_time & 0xFF;
 17286  005296  0100               	movlb	0	; () banked
 17287  005298  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 17288  00529A  6E61               	movwf	_servoTimes+6,c
 17289  00529C  6A62               	clrf	_servoTimes+7,c
 17290                           
 17291                           ; BSR set to: 0
 17292                           ;sort.c: 618: tilt_servo_state = time_us;
 17293  00529E  C080  F071         	movff	updateServoPosition@time_us,_tilt_servo_state	;volatile
 17294  0052A2  C081  F072         	movff	updateServoPosition@time_us+1,_tilt_servo_state+1	;volatile
 17295                           
 17296                           ;sort.c: 619: }
 17297  0052A6  0012               	return	
 17298  0052A8                     l7048:
 17299                           
 17300                           ; BSR set to: 0
 17301  0052A8  C082  F084         	movff	updateServoPosition@timer,??_updateServoPosition
 17302  0052AC  C083  F085         	movff	updateServoPosition@timer+1,??_updateServoPosition+1
 17303                           
 17304                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 17305                           ; Switch size 1, requested type "space"
 17306                           ; Number of cases is 1, Range of values is 0 to 0
 17307                           ; switch strategies available:
 17308                           ; Name         Instructions Cycles
 17309                           ; simple_byte            4     3 (average)
 17310                           ;	Chosen strategy is simple_byte
 17311  0052B0  0100               	movlb	0	; () banked
 17312  0052B2  5185               	movf	(??_updateServoPosition+1)& (0+255),w,b
 17313  0052B4  0A00               	xorlw	0	; case 0
 17314  0052B6  A4D8               	btfss	status,2,c
 17315  0052B8  0012               	return	
 17316                           
 17317                           ; BSR set to: 0
 17318                           ; Switch size 1, requested type "space"
 17319                           ; Number of cases is 2, Range of values is 1 to 3
 17320                           ; switch strategies available:
 17321                           ; Name         Instructions Cycles
 17322                           ; simple_byte            7     4 (average)
 17323                           ;	Chosen strategy is simple_byte
 17324  0052BA  0100               	movlb	0	; () banked
 17325  0052BC  5184               	movf	??_updateServoPosition& (0+255),w,b
 17326  0052BE  0A01               	xorlw	1	; case 1
 17327  0052C0  B4D8               	btfsc	status,2,c
 17328  0052C2  D7D9               	goto	l7042
 17329  0052C4  0A02               	xorlw	2	; case 3
 17330  0052C6  A4D8               	btfss	status,2,c
 17331  0052C8  0012               	return	
 17332  0052CA  D7E1               	goto	l952
 17333  0052CC                     __end_of_updateServoPosition:
 17334                           	opt stack 0
 17335                           tblptru	equ	0xFF8
 17336                           tblptrh	equ	0xFF7
 17337                           tblptrl	equ	0xFF6
 17338                           tablat	equ	0xFF5
 17339                           prodh	equ	0xFF4
 17340                           prodl	equ	0xFF3
 17341                           intcon	equ	0xFF2
 17342                           intcon2	equ	0xFF1
 17343                           intcon3	equ	0xFF0
 17344                           postinc0	equ	0xFEE
 17345                           wreg	equ	0xFE8
 17346                           postdec1	equ	0xFE5
 17347                           fsr1l	equ	0xFE1
 17348                           indf2	equ	0xFDF
 17349                           postinc2	equ	0xFDE
 17350                           postdec2	equ	0xFDD
 17351                           fsr2h	equ	0xFDA
 17352                           fsr2l	equ	0xFD9
 17353                           status	equ	0xFD8
 17354                           
 17355 ;; *************** function _BlockerTest *****************
 17356 ;; Defined at:
 17357 ;;		line 586 in file "Test.c"
 17358 ;; Parameters:    Size  Location     Type
 17359 ;;		None
 17360 ;; Auto vars:     Size  Location     Type
 17361 ;;  i               2   45[BANK0 ] int 
 17362 ;;  cond_flag       2   51[BANK0 ] int 
 17363 ;;  cam_flag        2   49[BANK0 ] int 
 17364 ;;  res             2   47[BANK0 ] int 
 17365 ;; Return value:  Size  Location     Type
 17366 ;;                  1    wreg      void 
 17367 ;; Registers used:
 17368 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17369 ;; Tracked objects:
 17370 ;;		On entry : 0/0
 17371 ;;		On exit  : 0/0
 17372 ;;		Unchanged: 0/0
 17373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17374 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17375 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17376 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17377 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17378 ;;Total ram usage:       10 bytes
 17379 ;; Hardware stack levels used:    1
 17380 ;; Hardware stack levels required when called:   10
 17381 ;; This function calls:
 17382 ;;		_lcdInst
 17383 ;;		_printf
 17384 ;;		_readADC
 17385 ;; This function is called by:
 17386 ;;		_Test
 17387 ;; This function uses a non-reentrant model
 17388 ;;
 17389                           
 17390                           	psect	text54
 17391  003FBE                     __ptext54:
 17392                           	opt stack 0
 17393  003FBE                     _BlockerTest:
 17394                           	opt stack 19
 17395                           
 17396                           ;Test.c: 587: readADC(2);
 17397                           
 17398                           ; BSR set to: 0
 17399                           ;incstack = 0
 17400  003FBE  0E02               	movlw	2
 17401  003FC0  EC9A  F02E         	call	_readADC
 17402                           
 17403                           ;Test.c: 588: int res = ADRESH<<8 | ADRESL;
 17404  003FC4  50C3               	movf	4035,w,c	;volatile
 17405  003FC6  CFC4 F0AB          	movff	4036,??_BlockerTest	;volatile
 17406  003FCA  0100               	movlb	0	; () banked
 17407  003FCC  6BAC               	clrf	(??_BlockerTest+1)& (0+255),b
 17408  003FCE  C0AB  F0AC         	movff	??_BlockerTest,??_BlockerTest+1
 17409  003FD2  0100               	movlb	0	; () banked
 17410  003FD4  6BAB               	clrf	??_BlockerTest& (0+255),b
 17411  003FD6  0100               	movlb	0	; () banked
 17412  003FD8  11AB               	iorwf	??_BlockerTest& (0+255),w,b
 17413  003FDA  0100               	movlb	0	; () banked
 17414  003FDC  6FAF               	movwf	BlockerTest@res& (0+255),b
 17415  003FDE  0100               	movlb	0	; () banked
 17416  003FE0  51AC               	movf	(??_BlockerTest+1)& (0+255),w,b
 17417  003FE2  0100               	movlb	0	; () banked
 17418  003FE4  6FB0               	movwf	(BlockerTest@res+1)& (0+255),b
 17419                           
 17420                           ; BSR set to: 0
 17421                           ;Test.c: 590: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 17422  003FE6  0E01               	movlw	1
 17423  003FE8  ECAF  F02F         	call	_lcdInst
 17424  003FEC  0E68               	movlw	104
 17425  003FEE  0100               	movlb	0	; () banked
 17426  003FF0  6FAB               	movwf	??_BlockerTest& (0+255),b
 17427  003FF2  0EE4               	movlw	228
 17428  003FF4                     u12077:
 17429  003FF4  2EE8               	decfsz	wreg,f,c
 17430  003FF6  D7FE               	bra	u12077
 17431  003FF8  2FAB               	decfsz	??_BlockerTest& (0+255),f,b
 17432  003FFA  D7FC               	bra	u12077
 17433  003FFC  F000               	nop	
 17434  003FFE  0E80               	movlw	128
 17435  004000  ECAF  F02F         	call	_lcdInst
 17436                           
 17437                           ;Test.c: 591: printf("D:RET|2:C %d  ", res);
 17438  004004  0E89               	movlw	low STR_121
 17439  004006  0100               	movlb	0	; () banked
 17440  004008  6F8E               	movwf	printf@f& (0+255),b
 17441  00400A  0EFE               	movlw	high STR_121
 17442  00400C  0100               	movlb	0	; () banked
 17443  00400E  6F8F               	movwf	(printf@f+1)& (0+255),b
 17444  004010  C0AF  F090         	movff	BlockerTest@res,?_printf+2
 17445  004014  C0B0  F091         	movff	BlockerTest@res+1,?_printf+3
 17446  004018  EC67  F00E         	call	_printf	;wreg free
 17447                           
 17448                           ;Test.c: 592: lcdInst(0b11000000);;
 17449  00401C  0EC0               	movlw	192
 17450  00401E  ECAF  F02F         	call	_lcdInst
 17451                           
 17452                           ;Test.c: 593: printf("OTHER: CAM TOGGLE");
 17453  004022  0E49               	movlw	low STR_122
 17454  004024  0100               	movlb	0	; () banked
 17455  004026  6F8E               	movwf	printf@f& (0+255),b
 17456  004028  0EFB               	movlw	high STR_122
 17457  00402A  0100               	movlb	0	; () banked
 17458  00402C  6F8F               	movwf	(printf@f+1)& (0+255),b
 17459  00402E  EC67  F00E         	call	_printf	;wreg free
 17460                           
 17461                           ;Test.c: 594: int cam_flag = 1;
 17462  004032  0E00               	movlw	0
 17463  004034  0100               	movlb	0	; () banked
 17464  004036  6FB2               	movwf	(BlockerTest@cam_flag+1)& (0+255),b
 17465  004038  0E01               	movlw	1
 17466  00403A  6FB1               	movwf	BlockerTest@cam_flag& (0+255),b
 17467                           
 17468                           ; BSR set to: 0
 17469                           ;Test.c: 595: int cond_flag = 0;
 17470  00403C  0E00               	movlw	0
 17471  00403E  0100               	movlb	0	; () banked
 17472  004040  6FB4               	movwf	(BlockerTest@cond_flag+1)& (0+255),b
 17473  004042  0E00               	movlw	0
 17474  004044  6FB3               	movwf	BlockerTest@cond_flag& (0+255),b
 17475                           
 17476                           ; BSR set to: 0
 17477                           ;Test.c: 598: while(PORTBbits.RB1 == 0){
 17478                           
 17479                           ;Test.c: 597: while(1){
 17480  004046  D023               	goto	l9352
 17481  004048                     l9344:
 17482                           
 17483                           ;Test.c: 599: readADC(2);
 17484  004048  0E02               	movlw	2
 17485  00404A  EC9A  F02E         	call	_readADC
 17486                           
 17487                           ;Test.c: 600: res = ADRESH<<8 | ADRESL;
 17488  00404E  50C3               	movf	4035,w,c	;volatile
 17489  004050  CFC4 F0AB          	movff	4036,??_BlockerTest	;volatile
 17490  004054  0100               	movlb	0	; () banked
 17491  004056  6BAC               	clrf	(??_BlockerTest+1)& (0+255),b
 17492  004058  C0AB  F0AC         	movff	??_BlockerTest,??_BlockerTest+1
 17493  00405C  0100               	movlb	0	; () banked
 17494  00405E  6BAB               	clrf	??_BlockerTest& (0+255),b
 17495  004060  0100               	movlb	0	; () banked
 17496  004062  11AB               	iorwf	??_BlockerTest& (0+255),w,b
 17497  004064  0100               	movlb	0	; () banked
 17498  004066  6FAF               	movwf	BlockerTest@res& (0+255),b
 17499  004068  0100               	movlb	0	; () banked
 17500  00406A  51AC               	movf	(??_BlockerTest+1)& (0+255),w,b
 17501  00406C  0100               	movlb	0	; () banked
 17502  00406E  6FB0               	movwf	(BlockerTest@res+1)& (0+255),b
 17503                           
 17504                           ; BSR set to: 0
 17505                           ;Test.c: 601: lcdInst(0b10000000);;
 17506  004070  0E80               	movlw	128
 17507  004072  ECAF  F02F         	call	_lcdInst
 17508                           
 17509                           ;Test.c: 602: printf("D:RET|2:C %d  ", res);
 17510  004076  0E89               	movlw	low STR_121
 17511  004078  0100               	movlb	0	; () banked
 17512  00407A  6F8E               	movwf	printf@f& (0+255),b
 17513  00407C  0EFE               	movlw	high STR_121
 17514  00407E  0100               	movlb	0	; () banked
 17515  004080  6F8F               	movwf	(printf@f+1)& (0+255),b
 17516  004082  C0AF  F090         	movff	BlockerTest@res,?_printf+2
 17517  004086  C0B0  F091         	movff	BlockerTest@res+1,?_printf+3
 17518  00408A  EC67  F00E         	call	_printf	;wreg free
 17519  00408E                     l9352:
 17520  00408E  A281               	btfss	3969,1,c	;volatile
 17521  004090  D7DB               	goto	l9344
 17522                           
 17523                           ;Test.c: 603: }
 17524                           ;Test.c: 604: if(PORTB >> 4 == 0b1111){
 17525  004092  3881               	swapf	3969,w,c	;volatile
 17526  004094  0B0F               	andlw	15
 17527  004096  0A0F               	xorlw	15
 17528  004098  B4D8               	btfsc	status,2,c
 17529  00409A  0012               	return	
 17530                           
 17531                           ;Test.c: 607: else if(PORTB >> 4 == 0b0001){
 17532                           
 17533                           ;Test.c: 606: }
 17534                           
 17535                           ;Test.c: 605: break;
 17536  00409C  3881               	swapf	3969,w,c	;volatile
 17537  00409E  0B0F               	andlw	15
 17538  0040A0  06E8               	decf	wreg,f,c
 17539  0040A2  A4D8               	btfss	status,2,c
 17540  0040A4  D016               	goto	l9370
 17541                           
 17542                           ;Test.c: 608: if(cond_flag){
 17543  0040A6  0100               	movlb	0	; () banked
 17544  0040A8  51B3               	movf	BlockerTest@cond_flag& (0+255),w,b
 17545  0040AA  0100               	movlb	0	; () banked
 17546  0040AC  11B4               	iorwf	(BlockerTest@cond_flag+1)& (0+255),w,b
 17547  0040AE  B4D8               	btfsc	status,2,c
 17548  0040B0  D007               	goto	l1483
 17549                           
 17550                           ; BSR set to: 0
 17551                           ;Test.c: 609: LATCbits.LATC7 = 1;
 17552  0040B2  8E8B               	bsf	3979,7,c	;volatile
 17553  0040B4  D006               	goto	l9368
 17554  0040B6                     u8901:
 17555  0040B6  0E01               	movlw	1
 17556  0040B8                     u8910:
 17557  0040B8  0100               	movlb	0	; () banked
 17558  0040BA  6FB3               	movwf	BlockerTest@cond_flag& (0+255),b
 17559  0040BC  6BB4               	clrf	(BlockerTest@cond_flag+1)& (0+255),b
 17560                           
 17561                           ;Test.c: 611: }
 17562  0040BE  D05F               	goto	l9398
 17563  0040C0                     l1483:
 17564                           
 17565                           ; BSR set to: 0
 17566                           ;Test.c: 612: else{
 17567                           ;Test.c: 613: LATCbits.LATC7 = 0;
 17568  0040C0  9E8B               	bcf	3979,7,c	;volatile
 17569  0040C2                     l9368:
 17570                           
 17571                           ; BSR set to: 0
 17572                           ;Test.c: 614: cond_flag = !cond_flag;
 17573  0040C2  0100               	movlb	0	; () banked
 17574  0040C4  51B3               	movf	BlockerTest@cond_flag& (0+255),w,b
 17575  0040C6  0100               	movlb	0	; () banked
 17576  0040C8  11B4               	iorwf	(BlockerTest@cond_flag+1)& (0+255),w,b
 17577  0040CA  B4D8               	btfsc	status,2,c
 17578  0040CC  D7F4               	goto	u8901
 17579  0040CE  0E00               	movlw	0
 17580  0040D0  D7F3               	goto	u8910
 17581  0040D2                     l9370:
 17582                           
 17583                           ;Test.c: 617: else{
 17584                           ;Test.c: 618: if(cam_flag){
 17585  0040D2  0100               	movlb	0	; () banked
 17586  0040D4  51B1               	movf	BlockerTest@cam_flag& (0+255),w,b
 17587  0040D6  0100               	movlb	0	; () banked
 17588  0040D8  11B2               	iorwf	(BlockerTest@cam_flag+1)& (0+255),w,b
 17589  0040DA  B4D8               	btfsc	status,2,c
 17590  0040DC  D007               	goto	l9376
 17591                           
 17592                           ; BSR set to: 0
 17593                           ;Test.c: 619: LATCbits.LATC0 = 1;
 17594  0040DE  808B               	bsf	3979,0,c	;volatile
 17595  0040E0  D023               	goto	l9388
 17596  0040E2                     u8951:
 17597  0040E2  0E01               	movlw	1
 17598  0040E4                     u8960:
 17599  0040E4  0100               	movlb	0	; () banked
 17600  0040E6  6FB1               	movwf	BlockerTest@cam_flag& (0+255),b
 17601  0040E8  6BB2               	clrf	(BlockerTest@cam_flag+1)& (0+255),b
 17602                           
 17603                           ;Test.c: 621: }
 17604  0040EA  D049               	goto	l9398
 17605  0040EC                     l9376:
 17606                           
 17607                           ; BSR set to: 0
 17608                           ;Test.c: 622: else{
 17609                           ;Test.c: 623: for(int i=0;i<5000;i++)
 17610  0040EC  0E00               	movlw	0
 17611  0040EE  0100               	movlb	0	; () banked
 17612  0040F0  6FAE               	movwf	(BlockerTest@i+1)& (0+255),b
 17613  0040F2  0E00               	movlw	0
 17614  0040F4  6FAD               	movwf	BlockerTest@i& (0+255),b
 17615  0040F6                     l9378:
 17616                           
 17617                           ; BSR set to: 0
 17618  0040F6  0100               	movlb	0	; () banked
 17619  0040F8  BFAE               	btfsc	(BlockerTest@i+1)& (0+255),7,b
 17620  0040FA  D008               	goto	l1488
 17621  0040FC  0E88               	movlw	136
 17622  0040FE  0100               	movlb	0	; () banked
 17623  004100  5DAD               	subwf	BlockerTest@i& (0+255),w,b
 17624  004102  0E13               	movlw	19
 17625  004104  0100               	movlb	0	; () banked
 17626  004106  59AE               	subwfb	(BlockerTest@i+1)& (0+255),w,b
 17627  004108  B0D8               	btfsc	status,0,c
 17628  00410A  D00D               	goto	l1489
 17629  00410C                     l1488:
 17630                           
 17631                           ; BSR set to: 0
 17632                           ;Test.c: 624: {
 17633                           ;Test.c: 625: LATCbits.LATC0 = 1;
 17634  00410C  808B               	bsf	3979,0,c	;volatile
 17635                           
 17636                           ; BSR set to: 0
 17637                           ;Test.c: 626: _delay((unsigned long)((10)*(32000000/4000000.0)));
 17638  00410E  0E1A               	movlw	26
 17639  004110                     u12087:
 17640  004110  2EE8               	decfsz	wreg,f,c
 17641  004112  D7FE               	bra	u12087
 17642  004114  D000               	nop2	
 17643                           
 17644                           ;Test.c: 627: LATCbits.LATC0 = 0;
 17645  004116  908B               	bcf	3979,0,c	;volatile
 17646                           
 17647                           ;Test.c: 628: _delay((unsigned long)((90)*(32000000/4000000.0)));
 17648  004118  0EF0               	movlw	240
 17649  00411A                     u12097:
 17650  00411A  2EE8               	decfsz	wreg,f,c
 17651  00411C  D7FE               	bra	u12097
 17652  00411E  0100               	movlb	0	; () banked
 17653  004120  4BAD               	infsnz	BlockerTest@i& (0+255),f,b
 17654  004122  2BAE               	incf	(BlockerTest@i+1)& (0+255),f,b
 17655  004124  D7E8               	goto	l9378
 17656  004126                     l1489:
 17657                           
 17658                           ; BSR set to: 0
 17659                           ;Test.c: 629: }
 17660                           ;Test.c: 630: LATCbits.LATC0 = 0;
 17661  004126  908B               	bcf	3979,0,c	;volatile
 17662  004128                     l9388:
 17663                           
 17664                           ; BSR set to: 0
 17665                           ;Test.c: 631: cam_flag = !cam_flag;
 17666  004128  0100               	movlb	0	; () banked
 17667  00412A  51B1               	movf	BlockerTest@cam_flag& (0+255),w,b
 17668  00412C  0100               	movlb	0	; () banked
 17669  00412E  11B2               	iorwf	(BlockerTest@cam_flag+1)& (0+255),w,b
 17670  004130  B4D8               	btfsc	status,2,c
 17671  004132  D7D7               	goto	u8951
 17672  004134  0E00               	movlw	0
 17673  004136  D7D6               	goto	u8960
 17674  004138                     l9390:
 17675                           
 17676                           ;Test.c: 636: readADC(2);
 17677  004138  0E02               	movlw	2
 17678  00413A  EC9A  F02E         	call	_readADC
 17679                           
 17680                           ;Test.c: 637: res = ADRESH<<8 | ADRESL;
 17681  00413E  50C3               	movf	4035,w,c	;volatile
 17682  004140  CFC4 F0AB          	movff	4036,??_BlockerTest	;volatile
 17683  004144  0100               	movlb	0	; () banked
 17684  004146  6BAC               	clrf	(??_BlockerTest+1)& (0+255),b
 17685  004148  C0AB  F0AC         	movff	??_BlockerTest,??_BlockerTest+1
 17686  00414C  0100               	movlb	0	; () banked
 17687  00414E  6BAB               	clrf	??_BlockerTest& (0+255),b
 17688  004150  0100               	movlb	0	; () banked
 17689  004152  11AB               	iorwf	??_BlockerTest& (0+255),w,b
 17690  004154  0100               	movlb	0	; () banked
 17691  004156  6FAF               	movwf	BlockerTest@res& (0+255),b
 17692  004158  0100               	movlb	0	; () banked
 17693  00415A  51AC               	movf	(??_BlockerTest+1)& (0+255),w,b
 17694  00415C  0100               	movlb	0	; () banked
 17695  00415E  6FB0               	movwf	(BlockerTest@res+1)& (0+255),b
 17696                           
 17697                           ; BSR set to: 0
 17698                           ;Test.c: 638: lcdInst(0b10000000);;
 17699  004160  0E80               	movlw	128
 17700  004162  ECAF  F02F         	call	_lcdInst
 17701                           
 17702                           ;Test.c: 639: printf("D:RET|2:C %d  ", res);
 17703  004166  0E89               	movlw	low STR_121
 17704  004168  0100               	movlb	0	; () banked
 17705  00416A  6F8E               	movwf	printf@f& (0+255),b
 17706  00416C  0EFE               	movlw	high STR_121
 17707  00416E  0100               	movlb	0	; () banked
 17708  004170  6F8F               	movwf	(printf@f+1)& (0+255),b
 17709  004172  C0AF  F090         	movff	BlockerTest@res,?_printf+2
 17710  004176  C0B0  F091         	movff	BlockerTest@res+1,?_printf+3
 17711  00417A  EC67  F00E         	call	_printf	;wreg free
 17712  00417E                     l9398:
 17713  00417E  A281               	btfss	3969,1,c	;volatile
 17714  004180  D786               	goto	l9352
 17715  004182  D7DA               	goto	l9390
 17716  004184                     __end_of_BlockerTest:
 17717                           	opt stack 0
 17718                           tblptru	equ	0xFF8
 17719                           tblptrh	equ	0xFF7
 17720                           tblptrl	equ	0xFF6
 17721                           tablat	equ	0xFF5
 17722                           prodh	equ	0xFF4
 17723                           prodl	equ	0xFF3
 17724                           intcon	equ	0xFF2
 17725                           intcon2	equ	0xFF1
 17726                           intcon3	equ	0xFF0
 17727                           postinc0	equ	0xFEE
 17728                           wreg	equ	0xFE8
 17729                           postdec1	equ	0xFE5
 17730                           fsr1l	equ	0xFE1
 17731                           indf2	equ	0xFDF
 17732                           postinc2	equ	0xFDE
 17733                           postdec2	equ	0xFDD
 17734                           fsr2h	equ	0xFDA
 17735                           fsr2l	equ	0xFD9
 17736                           status	equ	0xFD8
 17737                           
 17738 ;; *************** function _readADC *****************
 17739 ;; Defined at:
 17740 ;;		line 15 in file "ADCFunctionality.c"
 17741 ;; Parameters:    Size  Location     Type
 17742 ;;  channel         1    wreg     unsigned char 
 17743 ;; Auto vars:     Size  Location     Type
 17744 ;;  channel         1    1[BANK0 ] unsigned char 
 17745 ;; Return value:  Size  Location     Type
 17746 ;;                  1    wreg      void 
 17747 ;; Registers used:
 17748 ;;		wreg, status,2, status,0, cstack
 17749 ;; Tracked objects:
 17750 ;;		On entry : 0/0
 17751 ;;		On exit  : 0/0
 17752 ;;		Unchanged: 0/0
 17753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17754 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17755 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17756 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17757 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17758 ;;Total ram usage:        2 bytes
 17759 ;; Hardware stack levels used:    1
 17760 ;; Hardware stack levels required when called:    7
 17761 ;; This function calls:
 17762 ;;		Nothing
 17763 ;; This function is called by:
 17764 ;;		_readIR
 17765 ;;		_readMAG
 17766 ;;		_readCOND
 17767 ;;		_sensorTest
 17768 ;;		_PlatformTest
 17769 ;;		_BlockerTest
 17770 ;; This function uses a non-reentrant model
 17771 ;;
 17772                           
 17773                           	psect	text55
 17774  005D34                     __ptext55:
 17775                           	opt stack 0
 17776  005D34                     _readADC:
 17777                           	opt stack 20
 17778                           
 17779                           ;incstack = 0
 17780                           ;readADC@channel stored from wreg
 17781  005D34  0100               	movlb	0	; () banked
 17782  005D36  6F81               	movwf	readADC@channel& (0+255),b
 17783                           
 17784                           ;ADCFunctionality.c: 17: ADCON0 = channel << 2;
 17785  005D38  0100               	movlb	0	; () banked
 17786  005D3A  4581               	rlncf	readADC@channel& (0+255),w,b
 17787  005D3C  46E8               	rlncf	wreg,f,c
 17788  005D3E  0BFC               	andlw	252
 17789  005D40  6EC2               	movwf	4034,c	;volatile
 17790                           
 17791                           ; BSR set to: 0
 17792                           ;ADCFunctionality.c: 18: ADCON0bits.ADON = 1;
 17793  005D42  80C2               	bsf	4034,0,c	;volatile
 17794                           
 17795                           ; BSR set to: 0
 17796                           ;ADCFunctionality.c: 19: ADCON0bits.GO = 1;
 17797  005D44  82C2               	bsf	4034,1,c	;volatile
 17798                           
 17799                           ;ADCFunctionality.c: 20: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(32000
      +                          000/4000.0)));}
 17800  005D46  D009               	goto	l6670
 17801  005D48                     l6668:
 17802  005D48  0E34               	movlw	52
 17803  005D4A  0100               	movlb	0	; () banked
 17804  005D4C  6F80               	movwf	??_readADC& (0+255),b
 17805  005D4E  0EF1               	movlw	241
 17806  005D50                     u12107:
 17807  005D50  2EE8               	decfsz	wreg,f,c
 17808  005D52  D7FE               	bra	u12107
 17809  005D54  2F80               	decfsz	??_readADC& (0+255),f,b
 17810  005D56  D7FC               	bra	u12107
 17811  005D58  D000               	nop2	
 17812  005D5A                     l6670:
 17813  005D5A  A2C2               	btfss	4034,1,c	;volatile
 17814  005D5C  0012               	return	
 17815  005D5E  D7F4               	goto	l6668
 17816  005D60                     __end_of_readADC:
 17817                           	opt stack 0
 17818                           tblptru	equ	0xFF8
 17819                           tblptrh	equ	0xFF7
 17820                           tblptrl	equ	0xFF6
 17821                           tablat	equ	0xFF5
 17822                           prodh	equ	0xFF4
 17823                           prodl	equ	0xFF3
 17824                           intcon	equ	0xFF2
 17825                           intcon2	equ	0xFF1
 17826                           intcon3	equ	0xFF0
 17827                           postinc0	equ	0xFEE
 17828                           wreg	equ	0xFE8
 17829                           postdec1	equ	0xFE5
 17830                           fsr1l	equ	0xFE1
 17831                           indf2	equ	0xFDF
 17832                           postinc2	equ	0xFDE
 17833                           postdec2	equ	0xFDD
 17834                           fsr2h	equ	0xFDA
 17835                           fsr2l	equ	0xFD9
 17836                           status	equ	0xFD8
 17837                           
 17838 ;; *************** function _printf *****************
 17839 ;; Defined at:
 17840 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 17841 ;; Parameters:    Size  Location     Type
 17842 ;;  f               2   14[BANK0 ] PTR const unsigned char 
 17843 ;;		 -> STR_128(18), STR_127(18), STR_126(17), STR_125(17), 
 17844 ;;		 -> STR_124(15), STR_123(15), STR_122(18), STR_121(15), 
 17845 ;;		 -> STR_120(18), STR_119(18), STR_118(17), STR_117(17), 
 17846 ;;		 -> STR_116(17), STR_115(17), STR_114(17), STR_113(17), 
 17847 ;;		 -> STR_112(18), STR_111(17), STR_110(15), STR_109(15), 
 17848 ;;		 -> STR_108(15), STR_107(17), STR_106(17), STR_105(17), 
 17849 ;;		 -> STR_104(16), STR_103(17), STR_102(17), STR_101(17), 
 17850 ;;		 -> STR_100(17), STR_99(17), STR_98(17), STR_97(15), 
 17851 ;;		 -> STR_96(11), STR_95(17), STR_94(11), STR_93(17), 
 17852 ;;		 -> STR_92(14), STR_91(15), STR_90(14), STR_89(10), 
 17853 ;;		 -> STR_88(9), STR_87(9), STR_86(10), STR_85(10), 
 17854 ;;		 -> STR_84(16), STR_83(15), STR_82(3), STR_81(18), 
 17855 ;;		 -> STR_80(3), STR_79(18), STR_78(14), STR_77(8), 
 17856 ;;		 -> STR_76(14), STR_75(15), STR_74(12), STR_73(14), 
 17857 ;;		 -> STR_72(17), STR_71(14), STR_70(15), STR_69(17), 
 17858 ;;		 -> STR_68(17), STR_67(7), STR_66(21), STR_65(16), 
 17859 ;;		 -> STR_64(16), STR_63(24), STR_50(17), STR_49(17), 
 17860 ;;		 -> STR_48(17), STR_47(17), STR_46(17), STR_45(17), 
 17861 ;;		 -> STR_44(17), STR_43(17), STR_42(17), STR_41(17), 
 17862 ;;		 -> STR_40(17), STR_39(17), STR_38(17), STR_37(17), 
 17863 ;;		 -> STR_36(17), STR_35(17), STR_34(17), STR_33(17), 
 17864 ;;		 -> STR_32(17), STR_31(17), STR_30(17), STR_29(3), 
 17865 ;;		 -> STR_28(17), STR_27(17), STR_26(17), STR_25(17), 
 17866 ;;		 -> STR_24(17), STR_23(14), STR_22(10), STR_21(24), 
 17867 ;;		 -> STR_7(7), STR_6(17), STR_5(18), STR_4(16), 
 17868 ;;		 -> STR_3(18), STR_2(14), STR_1(18), 
 17869 ;; Auto vars:     Size  Location     Type
 17870 ;;  tmpval          4    0        struct .
 17871 ;;  width           2   41[BANK0 ] int 
 17872 ;;  val             2   37[BANK0 ] unsigned int 
 17873 ;;  len             2   35[BANK0 ] unsigned int 
 17874 ;;  ap              2   33[BANK0 ] PTR void [1]
 17875 ;;		 -> ?i2_printf(2), ?_printf(2), 
 17876 ;;  cp              2   31[BANK0 ] PTR const unsigned char 
 17877 ;;		 -> STR_129(7), count_total(2), printRTC@month(4), UI@month(4), 
 17878 ;;  c               1   40[BANK0 ] char 
 17879 ;;  flag            1   39[BANK0 ] unsigned char 
 17880 ;;  prec            1   30[BANK0 ] char 
 17881 ;; Return value:  Size  Location     Type
 17882 ;;                  2   14[BANK0 ] int 
 17883 ;; Registers used:
 17884 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17885 ;; Tracked objects:
 17886 ;;		On entry : 0/0
 17887 ;;		On exit  : 0/0
 17888 ;;		Unchanged: 0/0
 17889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17890 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17891 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17892 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17893 ;;      Totals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17894 ;;Total ram usage:       29 bytes
 17895 ;; Hardware stack levels used:    1
 17896 ;; Hardware stack levels required when called:    9
 17897 ;; This function calls:
 17898 ;;		___lwdiv
 17899 ;;		___lwmod
 17900 ;;		___wmul
 17901 ;;		_isdigit
 17902 ;;		_putch
 17903 ;; This function is called by:
 17904 ;;		_UI
 17905 ;;		_change_state_to_menu_start
 17906 ;;		_change_state_to_menu_12
 17907 ;;		_change_state_to_menu_22
 17908 ;;		_printRTC
 17909 ;;		_EEPROM_write
 17910 ;;		_Test
 17911 ;;		_algorithmTest
 17912 ;;		_sensorTest
 17913 ;;		_actuatorTest
 17914 ;;		_BothServos
 17915 ;;		_PortTestDC
 17916 ;;		_PlatformTest
 17917 ;;		_SpeedTest
 17918 ;;		_BlockerTest
 17919 ;;		_arm
 17920 ;;		_PortTestPusher
 17921 ;; This function uses a non-reentrant model
 17922 ;;
 17923                           
 17924                           	psect	text56
 17925  001CCE                     __ptext56:
 17926                           	opt stack 0
 17927  001CCE                     _printf:
 17928                           	opt stack 18
 17929                           
 17930                           ;doprnt.c: 466: va_list ap;
 17931                           ;doprnt.c: 499: signed char c;
 17932                           ;doprnt.c: 501: int width;
 17933                           ;doprnt.c: 506: signed char prec;
 17934                           ;doprnt.c: 508: unsigned char flag;
 17935                           ;doprnt.c: 523: union {
 17936                           ;doprnt.c: 524: unsigned long vd;
 17937                           ;doprnt.c: 525: double integ;
 17938                           ;doprnt.c: 526: } tmpval;
 17939                           ;doprnt.c: 528: unsigned int val;
 17940                           ;doprnt.c: 529: unsigned len;
 17941                           ;doprnt.c: 530: const char * cp;
 17942                           ;doprnt.c: 533: *ap = __va_start();
 17943                           
 17944                           ;incstack = 0
 17945  001CCE  0E90               	movlw	low (?_printf+2)
 17946  001CD0  0100               	movlb	0	; () banked
 17947  001CD2  6FA1               	movwf	printf@ap& (0+255),b
 17948  001CD4  0E00               	movlw	high (?_printf+2)
 17949  001CD6  0100               	movlb	0	; () banked
 17950  001CD8  6FA2               	movwf	(printf@ap+1)& (0+255),b
 17951                           
 17952                           ;doprnt.c: 536: while(c = *f++) {
 17953  001CDA  D205               	goto	l7002
 17954  001CDC                     l6872:
 17955                           
 17956                           ; BSR set to: 0
 17957                           ;doprnt.c: 538: if(c != '%')
 17958  001CDC  0E25               	movlw	37
 17959  001CDE  0100               	movlb	0	; () banked
 17960  001CE0  19A8               	xorwf	printf@c& (0+255),w,b
 17961  001CE2  B4D8               	btfsc	status,2,c
 17962  001CE4  D005               	goto	l6876
 17963                           
 17964                           ; BSR set to: 0
 17965                           ;doprnt.c: 540: {
 17966                           ;doprnt.c: 541: (putch(c) );
 17967  001CE6  0100               	movlb	0	; () banked
 17968  001CE8  51A8               	movf	printf@c& (0+255),w,b
 17969  001CEA  ECA7  F02F         	call	_putch
 17970                           
 17971                           ;doprnt.c: 542: continue;
 17972  001CEE  D1FB               	goto	l7002
 17973  001CF0                     l6876:
 17974                           
 17975                           ;doprnt.c: 543: }
 17976                           ;doprnt.c: 546: width = 0;
 17977  001CF0  0E00               	movlw	0
 17978  001CF2  0100               	movlb	0	; () banked
 17979  001CF4  6FAA               	movwf	(printf@width+1)& (0+255),b
 17980  001CF6  0E00               	movlw	0
 17981  001CF8  6FA9               	movwf	printf@width& (0+255),b
 17982                           
 17983                           ;doprnt.c: 548: flag = 0;
 17984  001CFA  0E00               	movlw	0
 17985  001CFC  0100               	movlb	0	; () banked
 17986  001CFE  6FA7               	movwf	printf@flag& (0+255),b
 17987                           
 17988                           ; BSR set to: 0
 17989                           ;doprnt.c: 551: switch(*f) {
 17990                           
 17991                           ;doprnt.c: 550: for(;;) {
 17992  001D00  D005               	goto	l6882
 17993  001D02                     l6878:
 17994                           
 17995                           ;doprnt.c: 580: flag |= 0x04;
 17996  001D02  0100               	movlb	0	; () banked
 17997  001D04  85A7               	bsf	printf@flag& (0+255),2,b
 17998                           
 17999                           ;doprnt.c: 581: f++;
 18000  001D06  0100               	movlb	0	; () banked
 18001  001D08  4B8E               	infsnz	printf@f& (0+255),f,b
 18002  001D0A  2B8F               	incf	(printf@f+1)& (0+255),f,b
 18003  001D0C                     l6882:
 18004  001D0C  C08E  FFF6         	movff	printf@f,tblptrl
 18005  001D10  C08F  FFF7         	movff	printf@f+1,tblptrh
 18006  001D14                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 18007  001D14  6AF8               	clrf	tblptru,c
 18008  001D16                     	endif
 18009  001D16                     	if	0	;tblptru may be non-zero
 18010  001D16                     	endif
 18011  001D16  0008               	tblrd		*
 18012  001D18  50F5               	movf	tablat,w,c
 18013                           
 18014                           ; Switch size 1, requested type "space"
 18015                           ; Number of cases is 1, Range of values is 48 to 48
 18016                           ; switch strategies available:
 18017                           ; Name         Instructions Cycles
 18018                           ; simple_byte            4     3 (average)
 18019                           ;	Chosen strategy is simple_byte
 18020  001D1A  0A30               	xorlw	48	; case 48
 18021  001D1C  B4D8               	btfsc	status,2,c
 18022  001D1E  D7F1               	goto	l6878
 18023                           
 18024                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 18025                           
 18026                           ;doprnt.c: 586: }
 18027                           
 18028                           ;doprnt.c: 585: break;
 18029  001D20  C08E  FFF6         	movff	printf@f,tblptrl
 18030  001D24  C08F  FFF7         	movff	printf@f+1,tblptrh
 18031  001D28                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 18032  001D28  6AF8               	clrf	tblptru,c
 18033  001D2A                     	endif
 18034  001D2A                     	if	0	;tblptru may be non-zero
 18035  001D2A                     	endif
 18036  001D2A  0008               	tblrd		*
 18037  001D2C  50F5               	movf	tablat,w,c
 18038  001D2E  ECB0  F02E         	call	_isdigit
 18039  001D32  A0D8               	btfss	status,0,c
 18040  001D34  D0D2               	goto	l6930
 18041                           
 18042                           ;doprnt.c: 598: width = 0;
 18043  001D36  0E00               	movlw	0
 18044  001D38  0100               	movlb	0	; () banked
 18045  001D3A  6FAA               	movwf	(printf@width+1)& (0+255),b
 18046  001D3C  0E00               	movlw	0
 18047  001D3E  6FA9               	movwf	printf@width& (0+255),b
 18048  001D40                     l6888:
 18049                           
 18050                           ;doprnt.c: 600: width *= 10;
 18051  001D40  C0A9  F080         	movff	printf@width,___wmul@multiplier
 18052  001D44  C0AA  F081         	movff	printf@width+1,___wmul@multiplier+1
 18053  001D48  0E00               	movlw	0
 18054  001D4A  0100               	movlb	0	; () banked
 18055  001D4C  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
 18056  001D4E  0E0A               	movlw	10
 18057  001D50  6F82               	movwf	___wmul@multiplicand& (0+255),b
 18058  001D52  EC19  F02D         	call	___wmul	;wreg free
 18059  001D56  C080  F0A9         	movff	?___wmul,printf@width
 18060  001D5A  C081  F0AA         	movff	?___wmul+1,printf@width+1
 18061                           
 18062                           ;doprnt.c: 601: width += *f++ - '0';
 18063  001D5E  0ED0               	movlw	208
 18064  001D60  0100               	movlb	0	; () banked
 18065  001D62  6F9A               	movwf	??_printf& (0+255),b
 18066  001D64  0EFF               	movlw	255
 18067  001D66  0100               	movlb	0	; () banked
 18068  001D68  6F9B               	movwf	(??_printf+1)& (0+255),b
 18069  001D6A  C08E  FFF6         	movff	printf@f,tblptrl
 18070  001D6E  C08F  FFF7         	movff	printf@f+1,tblptrh
 18071  001D72                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 18072  001D72  6AF8               	clrf	tblptru,c
 18073  001D74                     	endif
 18074  001D74                     	if	0	;tblptru may be non-zero
 18075  001D74                     	endif
 18076  001D74  0008               	tblrd		*
 18077  001D76  50F5               	movf	tablat,w,c
 18078  001D78  0100               	movlb	0	; () banked
 18079  001D7A  6F9C               	movwf	(??_printf+2)& (0+255),b
 18080  001D7C  6B9D               	clrf	(??_printf+3)& (0+255),b
 18081  001D7E  0100               	movlb	0	; () banked
 18082  001D80  519A               	movf	??_printf& (0+255),w,b
 18083  001D82  0100               	movlb	0	; () banked
 18084  001D84  279C               	addwf	(??_printf+2)& (0+255),f,b
 18085  001D86  0100               	movlb	0	; () banked
 18086  001D88  519B               	movf	(??_printf+1)& (0+255),w,b
 18087  001D8A  0100               	movlb	0	; () banked
 18088  001D8C  239D               	addwfc	(??_printf+3)& (0+255),f,b
 18089  001D8E  0100               	movlb	0	; () banked
 18090  001D90  519C               	movf	(??_printf+2)& (0+255),w,b
 18091  001D92  0100               	movlb	0	; () banked
 18092  001D94  27A9               	addwf	printf@width& (0+255),f,b
 18093  001D96  0100               	movlb	0	; () banked
 18094  001D98  519D               	movf	(??_printf+3)& (0+255),w,b
 18095  001D9A  0100               	movlb	0	; () banked
 18096  001D9C  23AA               	addwfc	(printf@width+1)& (0+255),f,b
 18097                           
 18098                           ; BSR set to: 0
 18099  001D9E  0100               	movlb	0	; () banked
 18100  001DA0  4B8E               	infsnz	printf@f& (0+255),f,b
 18101  001DA2  2B8F               	incf	(printf@f+1)& (0+255),f,b
 18102                           
 18103                           ; BSR set to: 0
 18104                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 18105  001DA4  C08E  FFF6         	movff	printf@f,tblptrl
 18106  001DA8  C08F  FFF7         	movff	printf@f+1,tblptrh
 18107  001DAC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 18108  001DAC  6AF8               	clrf	tblptru,c
 18109  001DAE                     	endif
 18110  001DAE                     	if	0	;tblptru may be non-zero
 18111  001DAE                     	endif
 18112  001DAE  0008               	tblrd		*
 18113  001DB0  50F5               	movf	tablat,w,c
 18114  001DB2  ECB0  F02E         	call	_isdigit
 18115  001DB6  A0D8               	btfss	status,0,c
 18116  001DB8  D090               	goto	l6930
 18117  001DBA  D7C2               	goto	l6888
 18118  001DBC                     l6896:
 18119                           
 18120                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 18121  001DBC  C0A1  FFD9         	movff	printf@ap,fsr2l
 18122  001DC0  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 18123  001DC4  CFDE F09F          	movff	postinc2,printf@cp
 18124  001DC8  CFDD F0A0          	movff	postdec2,printf@cp+1
 18125  001DCC  0E02               	movlw	2
 18126  001DCE  0100               	movlb	0	; () banked
 18127  001DD0  27A1               	addwf	printf@ap& (0+255),f,b
 18128  001DD2  0E00               	movlw	0
 18129  001DD4  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 18130                           
 18131                           ; BSR set to: 0
 18132                           ;doprnt.c: 740: if(!cp)
 18133  001DD6  0100               	movlb	0	; () banked
 18134  001DD8  519F               	movf	printf@cp& (0+255),w,b
 18135  001DDA  0100               	movlb	0	; () banked
 18136  001DDC  11A0               	iorwf	(printf@cp+1)& (0+255),w,b
 18137  001DDE  A4D8               	btfss	status,2,c
 18138  001DE0  D006               	goto	l6904
 18139                           
 18140                           ; BSR set to: 0
 18141                           ;doprnt.c: 741: cp = "(null)";
 18142  001DE2  0EB5               	movlw	low STR_129
 18143  001DE4  0100               	movlb	0	; () banked
 18144  001DE6  6F9F               	movwf	printf@cp& (0+255),b
 18145  001DE8  0EFF               	movlw	high STR_129
 18146  001DEA  0100               	movlb	0	; () banked
 18147  001DEC  6FA0               	movwf	(printf@cp+1)& (0+255),b
 18148  001DEE                     l6904:
 18149                           
 18150                           ; BSR set to: 0
 18151                           ;doprnt.c: 745: len = 0;
 18152  001DEE  0E00               	movlw	0
 18153  001DF0  0100               	movlb	0	; () banked
 18154  001DF2  6FA4               	movwf	(printf@len+1)& (0+255),b
 18155  001DF4  0E00               	movlw	0
 18156  001DF6  6FA3               	movwf	printf@len& (0+255),b
 18157                           
 18158                           ;doprnt.c: 746: while(cp[len])
 18159  001DF8  D003               	goto	l6908
 18160  001DFA                     l6906:
 18161                           
 18162                           ;doprnt.c: 747: len++;
 18163  001DFA  0100               	movlb	0	; () banked
 18164  001DFC  4BA3               	infsnz	printf@len& (0+255),f,b
 18165  001DFE  2BA4               	incf	(printf@len+1)& (0+255),f,b
 18166  001E00                     l6908:
 18167                           
 18168                           ; BSR set to: 0
 18169  001E00  0100               	movlb	0	; () banked
 18170  001E02  51A3               	movf	printf@len& (0+255),w,b
 18171  001E04  0100               	movlb	0	; () banked
 18172  001E06  259F               	addwf	printf@cp& (0+255),w,b
 18173  001E08  0100               	movlb	0	; () banked
 18174  001E0A  6F9A               	movwf	??_printf& (0+255),b
 18175  001E0C  0100               	movlb	0	; () banked
 18176  001E0E  51A4               	movf	(printf@len+1)& (0+255),w,b
 18177  001E10  0100               	movlb	0	; () banked
 18178  001E12  21A0               	addwfc	(printf@cp+1)& (0+255),w,b
 18179  001E14  0100               	movlb	0	; () banked
 18180  001E16  6F9B               	movwf	(??_printf+1)& (0+255),b
 18181  001E18  C09A  FFF6         	movff	??_printf,tblptrl
 18182  001E1C  C09B  FFF7         	movff	??_printf+1,tblptrh
 18183  001E20  0E00               	movlw	low (__mediumconst shr (0+16))
 18184  001E22  6EF8               	movwf	tblptru,c
 18185  001E24  0E0F               	movlw	(high __ramtop+-1)
 18186  001E26  64F7               	cpfsgt	tblptrh,c
 18187  001E28  D003               	bra	u5637
 18188  001E2A  0008               	tblrd		*
 18189  001E2C  50F5               	movf	tablat,w,c
 18190  001E2E  D005               	bra	u5630
 18191  001E30                     u5637:
 18192  001E30  CFF6 FFE9          	movff	tblptrl,fsr0l
 18193  001E34  CFF7 FFEA          	movff	tblptrh,fsr0h
 18194  001E38  50EF               	movf	indf0,w,c
 18195  001E3A                     u5630:
 18196  001E3A  0900               	iorlw	0
 18197  001E3C  A4D8               	btfss	status,2,c
 18198  001E3E  D7DD               	goto	l6906
 18199                           
 18200                           ;doprnt.c: 757: if(width > len)
 18201  001E40  0100               	movlb	0	; () banked
 18202  001E42  51A9               	movf	printf@width& (0+255),w,b
 18203  001E44  0100               	movlb	0	; () banked
 18204  001E46  5DA3               	subwf	printf@len& (0+255),w,b
 18205  001E48  0100               	movlb	0	; () banked
 18206  001E4A  51AA               	movf	(printf@width+1)& (0+255),w,b
 18207  001E4C  0100               	movlb	0	; () banked
 18208  001E4E  59A4               	subwfb	(printf@len+1)& (0+255),w,b
 18209  001E50  B0D8               	btfsc	status,0,c
 18210  001E52  D009               	goto	l6914
 18211                           
 18212                           ; BSR set to: 0
 18213                           ;doprnt.c: 758: width -= len;
 18214  001E54  0100               	movlb	0	; () banked
 18215  001E56  51A3               	movf	printf@len& (0+255),w,b
 18216  001E58  0100               	movlb	0	; () banked
 18217  001E5A  5FA9               	subwf	printf@width& (0+255),f,b
 18218  001E5C  0100               	movlb	0	; () banked
 18219  001E5E  51A4               	movf	(printf@len+1)& (0+255),w,b
 18220  001E60  0100               	movlb	0	; () banked
 18221  001E62  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 18222  001E64  D009               	goto	l6918
 18223  001E66                     l6914:
 18224                           
 18225                           ; BSR set to: 0
 18226                           ;doprnt.c: 759: else
 18227                           ;doprnt.c: 760: width = 0;
 18228  001E66  0E00               	movlw	0
 18229  001E68  0100               	movlb	0	; () banked
 18230  001E6A  6FAA               	movwf	(printf@width+1)& (0+255),b
 18231  001E6C  0E00               	movlw	0
 18232  001E6E  6FA9               	movwf	printf@width& (0+255),b
 18233                           
 18234                           ; BSR set to: 0
 18235                           ;doprnt.c: 764: while(width--)
 18236  001E70  D003               	goto	l6918
 18237  001E72                     l6916:
 18238                           
 18239                           ; BSR set to: 0
 18240                           ;doprnt.c: 765: (putch(' ') );
 18241  001E72  0E20               	movlw	32
 18242  001E74  ECA7  F02F         	call	_putch
 18243  001E78                     l6918:
 18244  001E78  0100               	movlb	0	; () banked
 18245  001E7A  07A9               	decf	printf@width& (0+255),f,b
 18246  001E7C  A0D8               	btfss	status,0,c
 18247  001E7E  07AA               	decf	(printf@width+1)& (0+255),f,b
 18248  001E80  0100               	movlb	0	; () banked
 18249  001E82  29A9               	incf	printf@width& (0+255),w,b
 18250  001E84  E1F6               	bnz	l6916
 18251  001E86  0100               	movlb	0	; () banked
 18252  001E88  29AA               	incf	(printf@width+1)& (0+255),w,b
 18253  001E8A  B4D8               	btfsc	status,2,c
 18254  001E8C  D017               	goto	l6924
 18255  001E8E  D7F1               	goto	l6916
 18256  001E90                     l6920:
 18257                           
 18258                           ; BSR set to: 0
 18259                           ;doprnt.c: 768: (putch(*cp++) );
 18260  001E90  C09F  FFF6         	movff	printf@cp,tblptrl
 18261  001E94  C0A0  FFF7         	movff	printf@cp+1,tblptrh
 18262  001E98  0E00               	movlw	low (__mediumconst shr (0+16))
 18263  001E9A  6EF8               	movwf	tblptru,c
 18264  001E9C  0E0F               	movlw	(high __ramtop+-1)
 18265  001E9E  64F7               	cpfsgt	tblptrh,c
 18266  001EA0  D003               	bra	u5677
 18267  001EA2  0008               	tblrd		*
 18268  001EA4  50F5               	movf	tablat,w,c
 18269  001EA6  D005               	bra	u5670
 18270  001EA8                     u5677:
 18271  001EA8  CFF6 FFE9          	movff	tblptrl,fsr0l
 18272  001EAC  CFF7 FFEA          	movff	tblptrh,fsr0h
 18273  001EB0  50EF               	movf	indf0,w,c
 18274  001EB2                     u5670:
 18275  001EB2  ECA7  F02F         	call	_putch
 18276  001EB6  0100               	movlb	0	; () banked
 18277  001EB8  4B9F               	infsnz	printf@cp& (0+255),f,b
 18278  001EBA  2BA0               	incf	(printf@cp+1)& (0+255),f,b
 18279  001EBC                     l6924:
 18280                           
 18281                           ; BSR set to: 0
 18282  001EBC  0100               	movlb	0	; () banked
 18283  001EBE  07A3               	decf	printf@len& (0+255),f,b
 18284  001EC0  A0D8               	btfss	status,0,c
 18285  001EC2  07A4               	decf	(printf@len+1)& (0+255),f,b
 18286  001EC4  0100               	movlb	0	; () banked
 18287  001EC6  29A3               	incf	printf@len& (0+255),w,b
 18288  001EC8  E1E3               	bnz	l6920
 18289  001ECA  0100               	movlb	0	; () banked
 18290  001ECC  29A4               	incf	(printf@len+1)& (0+255),w,b
 18291  001ECE  B4D8               	btfsc	status,2,c
 18292  001ED0  D10A               	goto	l7002
 18293  001ED2  D7DE               	goto	l6920
 18294  001ED4                     l6926:
 18295                           
 18296                           ; BSR set to: 0
 18297                           ;doprnt.c: 818: flag |= 0x40;
 18298  001ED4  0100               	movlb	0	; () banked
 18299  001ED6  8DA7               	bsf	printf@flag& (0+255),6,b
 18300                           
 18301                           ; BSR set to: 0
 18302                           ;doprnt.c: 822: }
 18303                           
 18304                           ;doprnt.c: 819: break;
 18305  001ED8  D01D               	goto	l1560
 18306  001EDA                     l6930:
 18307  001EDA  C08E  FFF6         	movff	printf@f,tblptrl
 18308  001EDE  C08F  FFF7         	movff	printf@f+1,tblptrh
 18309  001EE2  0100               	movlb	0	; () banked
 18310  001EE4  4B8E               	infsnz	printf@f& (0+255),f,b
 18311  001EE6  2B8F               	incf	(printf@f+1)& (0+255),f,b
 18312  001EE8                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 18313  001EE8  6AF8               	clrf	tblptru,c
 18314  001EEA                     	endif
 18315  001EEA                     	if	0	;tblptru may be non-zero
 18316  001EEA                     	endif
 18317  001EEA  0008               	tblrd		*
 18318  001EEC  CFF5 F0A8          	movff	tablat,printf@c
 18319  001EF0  0100               	movlb	0	; () banked
 18320  001EF2  51A8               	movf	printf@c& (0+255),w,b
 18321                           
 18322                           ; Switch size 1, requested type "space"
 18323                           ; Number of cases is 5, Range of values is 0 to 117
 18324                           ; switch strategies available:
 18325                           ; Name         Instructions Cycles
 18326                           ; simple_byte           16     9 (average)
 18327                           ;	Chosen strategy is simple_byte
 18328  001EF4  0A00               	xorlw	0	; case 0
 18329  001EF6  B4D8               	btfsc	status,2,c
 18330  001EF8  0012               	return	
 18331  001EFA  0A64               	xorlw	100	; case 100
 18332  001EFC  B4D8               	btfsc	status,2,c
 18333  001EFE  D00A               	goto	l1560
 18334  001F00  0A0D               	xorlw	13	; case 105
 18335  001F02  B4D8               	btfsc	status,2,c
 18336  001F04  D007               	goto	l1560
 18337  001F06  0A1A               	xorlw	26	; case 115
 18338  001F08  B4D8               	btfsc	status,2,c
 18339  001F0A  D758               	goto	l6896
 18340  001F0C  0A06               	xorlw	6	; case 117
 18341  001F0E  B4D8               	btfsc	status,2,c
 18342  001F10  D7E1               	goto	l6926
 18343  001F12  D0E9               	goto	l7002
 18344  001F14                     l1560:
 18345                           
 18346                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 18347  001F14  0100               	movlb	0	; () banked
 18348  001F16  BDA7               	btfsc	printf@flag& (0+255),6,b
 18349  001F18  D019               	goto	l6942
 18350                           
 18351                           ; BSR set to: 0
 18352                           ;doprnt.c: 1253: {
 18353                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 18354  001F1A  C0A1  FFD9         	movff	printf@ap,fsr2l
 18355  001F1E  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 18356  001F22  CFDE F0A5          	movff	postinc2,printf@val
 18357  001F26  CFDD F0A6          	movff	postdec2,printf@val+1
 18358                           
 18359                           ; BSR set to: 0
 18360  001F2A  0E02               	movlw	2
 18361  001F2C  0100               	movlb	0	; () banked
 18362  001F2E  27A1               	addwf	printf@ap& (0+255),f,b
 18363  001F30  0E00               	movlw	0
 18364  001F32  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 18365                           
 18366                           ; BSR set to: 0
 18367                           ;doprnt.c: 1261: if((int)val < 0) {
 18368  001F34  0100               	movlb	0	; () banked
 18369  001F36  AFA6               	btfss	(printf@val+1)& (0+255),7,b
 18370  001F38  D016               	goto	l6946
 18371                           
 18372                           ; BSR set to: 0
 18373                           ;doprnt.c: 1262: flag |= 0x03;
 18374  001F3A  0E03               	movlw	3
 18375  001F3C  0100               	movlb	0	; () banked
 18376  001F3E  13A7               	iorwf	printf@flag& (0+255),f,b
 18377                           
 18378                           ; BSR set to: 0
 18379                           ;doprnt.c: 1263: val = -val;
 18380  001F40  0100               	movlb	0	; () banked
 18381  001F42  6DA5               	negf	printf@val& (0+255),b
 18382  001F44  1FA6               	comf	(printf@val+1)& (0+255),f,b
 18383  001F46  B0D8               	btfsc	status,0,c
 18384  001F48  2BA6               	incf	(printf@val+1)& (0+255),f,b
 18385                           
 18386                           ; BSR set to: 0
 18387                           ;doprnt.c: 1264: }
 18388                           ;doprnt.c: 1266: }
 18389  001F4A  D00D               	goto	l6946
 18390  001F4C                     l6942:
 18391                           
 18392                           ; BSR set to: 0
 18393                           ;doprnt.c: 1268: else
 18394                           ;doprnt.c: 1273: {
 18395                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 18396  001F4C  C0A1  FFD9         	movff	printf@ap,fsr2l
 18397  001F50  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 18398  001F54  CFDE F0A5          	movff	postinc2,printf@val
 18399  001F58  CFDD F0A6          	movff	postdec2,printf@val+1
 18400                           
 18401                           ; BSR set to: 0
 18402  001F5C  0E02               	movlw	2
 18403  001F5E  0100               	movlb	0	; () banked
 18404  001F60  27A1               	addwf	printf@ap& (0+255),f,b
 18405  001F62  0E00               	movlw	0
 18406  001F64  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 18407  001F66                     l6946:
 18408                           
 18409                           ; BSR set to: 0
 18410                           ;doprnt.c: 1287: }
 18411                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 18412  001F66  0E01               	movlw	1
 18413  001F68  0100               	movlb	0	; () banked
 18414  001F6A  6FA8               	movwf	printf@c& (0+255),b
 18415  001F6C                     l6948:
 18416                           
 18417                           ; BSR set to: 0
 18418  001F6C  0E05               	movlw	5
 18419  001F6E  0100               	movlb	0	; () banked
 18420  001F70  19A8               	xorwf	printf@c& (0+255),w,b
 18421  001F72  B4D8               	btfsc	status,2,c
 18422  001F74  D019               	goto	l6960
 18423                           
 18424                           ; BSR set to: 0
 18425                           ;doprnt.c: 1306: if(val < dpowers[c])
 18426                           
 18427                           ; BSR set to: 0
 18428                           
 18429                           ; BSR set to: 0
 18430  001F76  0100               	movlb	0	; () banked
 18431  001F78  51A8               	movf	printf@c& (0+255),w,b
 18432  001F7A  0D02               	mullw	2
 18433  001F7C  0EB8               	movlw	low _dpowers
 18434  001F7E  24F3               	addwf	prodl,w,c
 18435  001F80  6EF6               	movwf	tblptrl,c
 18436  001F82  0EFA               	movlw	high _dpowers
 18437  001F84  20F4               	addwfc	prodh,w,c
 18438  001F86  6EF7               	movwf	tblptrh,c
 18439  001F88                     	if	1	;There are 3 active tblptr bytes
 18440  001F88  6AF8               	clrf	tblptru,c
 18441  001F8A  0E00               	movlw	low (__mediumconst shr (0+16))
 18442  001F8C  22F8               	addwfc	tblptru,f,c
 18443  001F8E                     	endif
 18444  001F8E  0009               	tblrd		*+
 18445  001F90  50F5               	movf	tablat,w,c
 18446  001F92  0100               	movlb	0	; () banked
 18447  001F94  5DA5               	subwf	printf@val& (0+255),w,b
 18448  001F96  0009               	tblrd		*+
 18449  001F98  50F5               	movf	tablat,w,c
 18450  001F9A  0100               	movlb	0	; () banked
 18451  001F9C  59A6               	subwfb	(printf@val+1)& (0+255),w,b
 18452  001F9E  A0D8               	btfss	status,0,c
 18453  001FA0  D003               	goto	l6960
 18454                           
 18455                           ; BSR set to: 0
 18456                           
 18457                           ; BSR set to: 0
 18458                           
 18459                           ; BSR set to: 0
 18460                           ;doprnt.c: 1307: break;
 18461  001FA2  0100               	movlb	0	; () banked
 18462  001FA4  2BA8               	incf	printf@c& (0+255),f,b
 18463  001FA6  D7E2               	goto	l6948
 18464  001FA8                     l6960:
 18465                           
 18466                           ; BSR set to: 0
 18467                           ;doprnt.c: 1345: if(width && flag & 0x03)
 18468  001FA8  0100               	movlb	0	; () banked
 18469  001FAA  51A9               	movf	printf@width& (0+255),w,b
 18470  001FAC  0100               	movlb	0	; () banked
 18471  001FAE  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 18472  001FB0  B4D8               	btfsc	status,2,c
 18473  001FB2  D00B               	goto	l6966
 18474                           
 18475                           ; BSR set to: 0
 18476  001FB4  C0A7  F09A         	movff	printf@flag,??_printf
 18477  001FB8  0E03               	movlw	3
 18478  001FBA  0100               	movlb	0	; () banked
 18479  001FBC  179A               	andwf	??_printf& (0+255),f,b
 18480  001FBE  B4D8               	btfsc	status,2,c
 18481  001FC0  D004               	goto	l6966
 18482                           
 18483                           ; BSR set to: 0
 18484                           ;doprnt.c: 1346: width--;
 18485  001FC2  0100               	movlb	0	; () banked
 18486  001FC4  07A9               	decf	printf@width& (0+255),f,b
 18487  001FC6  A0D8               	btfss	status,0,c
 18488  001FC8  07AA               	decf	(printf@width+1)& (0+255),f,b
 18489  001FCA                     l6966:
 18490                           
 18491                           ; BSR set to: 0
 18492                           ;doprnt.c: 1381: if(width > c)
 18493  001FCA  0E80               	movlw	128
 18494  001FCC  0100               	movlb	0	; () banked
 18495  001FCE  BFA8               	btfsc	printf@c& (0+255),7,b
 18496  001FD0  0E7F               	movlw	127
 18497  001FD2  0100               	movlb	0	; () banked
 18498  001FD4  6F9A               	movwf	??_printf& (0+255),b
 18499  001FD6  0100               	movlb	0	; () banked
 18500  001FD8  51A9               	movf	printf@width& (0+255),w,b
 18501  001FDA  0100               	movlb	0	; () banked
 18502  001FDC  5DA8               	subwf	printf@c& (0+255),w,b
 18503  001FDE  0100               	movlb	0	; () banked
 18504  001FE0  51AA               	movf	(printf@width+1)& (0+255),w,b
 18505  001FE2  0A80               	xorlw	128
 18506  001FE4  0100               	movlb	0	; () banked
 18507  001FE6  599A               	subwfb	??_printf& (0+255),w,b
 18508  001FE8  B0D8               	btfsc	status,0,c
 18509  001FEA  D00B               	goto	l6970
 18510                           
 18511                           ; BSR set to: 0
 18512                           ;doprnt.c: 1382: width -= c;
 18513  001FEC  0100               	movlb	0	; () banked
 18514  001FEE  51A8               	movf	printf@c& (0+255),w,b
 18515  001FF0  0100               	movlb	0	; () banked
 18516  001FF2  5FA9               	subwf	printf@width& (0+255),f,b
 18517  001FF4  0E00               	movlw	0
 18518  001FF6  0100               	movlb	0	; () banked
 18519  001FF8  BFA8               	btfsc	printf@c& (0+255),7,b
 18520  001FFA  0EFF               	movlw	255
 18521  001FFC  0100               	movlb	0	; () banked
 18522  001FFE  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 18523  002000  D005               	goto	l6972
 18524  002002                     l6970:
 18525                           
 18526                           ; BSR set to: 0
 18527                           ;doprnt.c: 1383: else
 18528                           ;doprnt.c: 1384: width = 0;
 18529  002002  0E00               	movlw	0
 18530  002004  0100               	movlb	0	; () banked
 18531  002006  6FAA               	movwf	(printf@width+1)& (0+255),b
 18532  002008  0E00               	movlw	0
 18533  00200A  6FA9               	movwf	printf@width& (0+255),b
 18534  00200C                     l6972:
 18535                           
 18536                           ; BSR set to: 0
 18537                           ;doprnt.c: 1387: if(flag & 0x04) {
 18538  00200C  0100               	movlb	0	; () banked
 18539  00200E  A5A7               	btfss	printf@flag& (0+255),2,b
 18540  002010  D018               	goto	l6984
 18541                           
 18542                           ; BSR set to: 0
 18543                           ;doprnt.c: 1392: if(flag & 0x03)
 18544  002012  C0A7  F09A         	movff	printf@flag,??_printf
 18545  002016  0E03               	movlw	3
 18546  002018  0100               	movlb	0	; () banked
 18547  00201A  179A               	andwf	??_printf& (0+255),f,b
 18548  00201C  B4D8               	btfsc	status,2,c
 18549  00201E  D003               	goto	l6978
 18550                           
 18551                           ; BSR set to: 0
 18552                           ;doprnt.c: 1393: (putch('-') );
 18553  002020  0E2D               	movlw	45
 18554  002022  ECA7  F02F         	call	_putch
 18555  002026                     l6978:
 18556                           
 18557                           ;doprnt.c: 1415: if(width)
 18558  002026  0100               	movlb	0	; () banked
 18559  002028  51A9               	movf	printf@width& (0+255),w,b
 18560  00202A  0100               	movlb	0	; () banked
 18561  00202C  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 18562  00202E  B4D8               	btfsc	status,2,c
 18563  002030  D025               	goto	l6994
 18564                           
 18565                           ; BSR set to: 0
 18566                           ;doprnt.c: 1417: (putch('0') );
 18567                           
 18568                           ; BSR set to: 0
 18569                           
 18570                           ;doprnt.c: 1416: do
 18571  002032  0E30               	movlw	48
 18572  002034  ECA7  F02F         	call	_putch
 18573                           
 18574                           ;doprnt.c: 1418: while(--width);
 18575  002038  0100               	movlb	0	; () banked
 18576  00203A  07A9               	decf	printf@width& (0+255),f,b
 18577  00203C  A0D8               	btfss	status,0,c
 18578  00203E  07AA               	decf	(printf@width+1)& (0+255),f,b
 18579  002040  D7F2               	goto	l6978
 18580  002042                     l6984:
 18581                           
 18582                           ; BSR set to: 0
 18583                           ;doprnt.c: 1422: {
 18584                           ;doprnt.c: 1424: if(width
 18585                           ;doprnt.c: 1428: )
 18586  002042  0100               	movlb	0	; () banked
 18587  002044  51A9               	movf	printf@width& (0+255),w,b
 18588  002046  0100               	movlb	0	; () banked
 18589  002048  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 18590  00204A  B4D8               	btfsc	status,2,c
 18591  00204C  D00D               	goto	l6990
 18592  00204E                     l6986:
 18593                           
 18594                           ; BSR set to: 0
 18595                           ;doprnt.c: 1430: (putch(' ') );
 18596  00204E  0E20               	movlw	32
 18597  002050  ECA7  F02F         	call	_putch
 18598                           
 18599                           ;doprnt.c: 1431: while(--width);
 18600  002054  0100               	movlb	0	; () banked
 18601  002056  07A9               	decf	printf@width& (0+255),f,b
 18602  002058  A0D8               	btfss	status,0,c
 18603  00205A  07AA               	decf	(printf@width+1)& (0+255),f,b
 18604  00205C  0100               	movlb	0	; () banked
 18605  00205E  51A9               	movf	printf@width& (0+255),w,b
 18606  002060  0100               	movlb	0	; () banked
 18607  002062  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 18608  002064  A4D8               	btfss	status,2,c
 18609  002066  D7F3               	goto	l6986
 18610  002068                     l6990:
 18611                           
 18612                           ; BSR set to: 0
 18613                           ;doprnt.c: 1438: if(flag & 0x03)
 18614  002068  C0A7  F09A         	movff	printf@flag,??_printf
 18615  00206C  0E03               	movlw	3
 18616  00206E  0100               	movlb	0	; () banked
 18617  002070  179A               	andwf	??_printf& (0+255),f,b
 18618  002072  B4D8               	btfsc	status,2,c
 18619  002074  D003               	goto	l6994
 18620                           
 18621                           ; BSR set to: 0
 18622                           ;doprnt.c: 1439: (putch('-') );
 18623  002076  0E2D               	movlw	45
 18624  002078  ECA7  F02F         	call	_putch
 18625  00207C                     l6994:
 18626                           
 18627                           ;doprnt.c: 1469: }
 18628                           ;doprnt.c: 1472: prec = c;
 18629  00207C  C0A8  F09E         	movff	printf@c,printf@prec
 18630                           
 18631                           ;doprnt.c: 1474: while(prec--) {
 18632  002080  D02C               	goto	l7000
 18633  002082                     l6996:
 18634                           
 18635                           ;doprnt.c: 1478: {
 18636                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 18637  002082  0100               	movlb	0	; () banked
 18638  002084  519E               	movf	printf@prec& (0+255),w,b
 18639  002086  0D02               	mullw	2
 18640  002088  0EB8               	movlw	low _dpowers
 18641  00208A  24F3               	addwf	prodl,w,c
 18642  00208C  6EF6               	movwf	tblptrl,c
 18643  00208E  0EFA               	movlw	high _dpowers
 18644  002090  20F4               	addwfc	prodh,w,c
 18645  002092  6EF7               	movwf	tblptrh,c
 18646  002094                     	if	1	;There are 3 active tblptr bytes
 18647  002094  6AF8               	clrf	tblptru,c
 18648  002096  0E00               	movlw	low (__mediumconst shr (0+16))
 18649  002098  22F8               	addwfc	tblptru,f,c
 18650  00209A                     	endif
 18651  00209A  0009               	tblrd		*+
 18652  00209C  CFF5 F082          	movff	tablat,___lwdiv@divisor
 18653  0020A0  000A               	tblrd		*-
 18654  0020A2  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
 18655  0020A6  C0A5  F080         	movff	printf@val,___lwdiv@dividend
 18656  0020AA  C0A6  F081         	movff	printf@val+1,___lwdiv@dividend+1
 18657  0020AE  ECA2  F029         	call	___lwdiv	;wreg free
 18658  0020B2  C080  F087         	movff	?___lwdiv,___lwmod@dividend
 18659  0020B6  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
 18660  0020BA  0E00               	movlw	0
 18661  0020BC  0100               	movlb	0	; () banked
 18662  0020BE  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
 18663  0020C0  0E0A               	movlw	10
 18664  0020C2  6F89               	movwf	___lwmod@divisor& (0+255),b
 18665  0020C4  ECEB  F02A         	call	___lwmod	;wreg free
 18666  0020C8  0100               	movlb	0	; () banked
 18667  0020CA  5187               	movf	?___lwmod& (0+255),w,b
 18668  0020CC  0F30               	addlw	48
 18669  0020CE  0100               	movlb	0	; () banked
 18670  0020D0  6FA8               	movwf	printf@c& (0+255),b
 18671                           
 18672                           ; BSR set to: 0
 18673                           ;doprnt.c: 1523: }
 18674                           ;doprnt.c: 1524: (putch(c) );
 18675  0020D2  0100               	movlb	0	; () banked
 18676  0020D4  51A8               	movf	printf@c& (0+255),w,b
 18677  0020D6  ECA7  F02F         	call	_putch
 18678  0020DA                     l7000:
 18679  0020DA  0100               	movlb	0	; () banked
 18680  0020DC  079E               	decf	printf@prec& (0+255),f,b
 18681  0020DE  0100               	movlb	0	; () banked
 18682  0020E0  299E               	incf	printf@prec& (0+255),w,b
 18683  0020E2  A4D8               	btfss	status,2,c
 18684  0020E4  D7CE               	goto	l6996
 18685  0020E6                     l7002:
 18686  0020E6  C08E  FFF6         	movff	printf@f,tblptrl
 18687  0020EA  C08F  FFF7         	movff	printf@f+1,tblptrh
 18688  0020EE  0100               	movlb	0	; () banked
 18689  0020F0  4B8E               	infsnz	printf@f& (0+255),f,b
 18690  0020F2  2B8F               	incf	(printf@f+1)& (0+255),f,b
 18691  0020F4                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 18692  0020F4  6AF8               	clrf	tblptru,c
 18693  0020F6                     	endif
 18694  0020F6                     	if	0	;tblptru may be non-zero
 18695  0020F6                     	endif
 18696  0020F6  0008               	tblrd		*
 18697  0020F8  CFF5 F0A8          	movff	tablat,printf@c
 18698  0020FC  0100               	movlb	0	; () banked
 18699  0020FE  51A8               	movf	printf@c& (0+255),w,b
 18700  002100  B4D8               	btfsc	status,2,c
 18701  002102  0012               	return	
 18702  002104  D5EB               	goto	l6872
 18703  002106                     __end_of_printf:
 18704                           	opt stack 0
 18705                           tblptru	equ	0xFF8
 18706                           tblptrh	equ	0xFF7
 18707                           tblptrl	equ	0xFF6
 18708                           tablat	equ	0xFF5
 18709                           prodh	equ	0xFF4
 18710                           prodl	equ	0xFF3
 18711                           intcon	equ	0xFF2
 18712                           intcon2	equ	0xFF1
 18713                           intcon3	equ	0xFF0
 18714                           indf0	equ	0xFEF
 18715                           postinc0	equ	0xFEE
 18716                           fsr0h	equ	0xFEA
 18717                           fsr0l	equ	0xFE9
 18718                           wreg	equ	0xFE8
 18719                           postdec1	equ	0xFE5
 18720                           fsr1l	equ	0xFE1
 18721                           indf2	equ	0xFDF
 18722                           postinc2	equ	0xFDE
 18723                           postdec2	equ	0xFDD
 18724                           fsr2h	equ	0xFDA
 18725                           fsr2l	equ	0xFD9
 18726                           status	equ	0xFD8
 18727                           
 18728 ;; *************** function _putch *****************
 18729 ;; Defined at:
 18730 ;;		line 20 in file "lcd.c"
 18731 ;; Parameters:    Size  Location     Type
 18732 ;;  data            1    wreg     unsigned char 
 18733 ;; Auto vars:     Size  Location     Type
 18734 ;;  data            1    2[BANK0 ] unsigned char 
 18735 ;; Return value:  Size  Location     Type
 18736 ;;                  1    wreg      void 
 18737 ;; Registers used:
 18738 ;;		wreg, status,2, status,0, cstack
 18739 ;; Tracked objects:
 18740 ;;		On entry : 0/0
 18741 ;;		On exit  : 0/0
 18742 ;;		Unchanged: 0/0
 18743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18744 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18745 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18746 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18747 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18748 ;;Total ram usage:        1 bytes
 18749 ;; Hardware stack levels used:    1
 18750 ;; Hardware stack levels required when called:    8
 18751 ;; This function calls:
 18752 ;;		_lcdNibble
 18753 ;; This function is called by:
 18754 ;;		_printf
 18755 ;; This function uses a non-reentrant model
 18756 ;;
 18757                           
 18758                           	psect	text57
 18759  005F4E                     __ptext57:
 18760                           	opt stack 0
 18761  005F4E                     _putch:
 18762                           	opt stack 18
 18763                           
 18764                           ;incstack = 0
 18765                           ;putch@data stored from wreg
 18766  005F4E  0100               	movlb	0	; () banked
 18767  005F50  6F82               	movwf	putch@data& (0+255),b
 18768                           
 18769                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 18770  005F52  848C               	bsf	3980,2,c	;volatile
 18771                           
 18772                           ;lcd.c: 22: lcdNibble(data);
 18773  005F54  0100               	movlb	0	; () banked
 18774  005F56  5182               	movf	putch@data& (0+255),w,b
 18775  005F58  EC4F  F02A         	call	_lcdNibble
 18776  005F5C  0012               	return		;funcret
 18777  005F5E                     __end_of_putch:
 18778                           	opt stack 0
 18779                           tblptru	equ	0xFF8
 18780                           tblptrh	equ	0xFF7
 18781                           tblptrl	equ	0xFF6
 18782                           tablat	equ	0xFF5
 18783                           prodh	equ	0xFF4
 18784                           prodl	equ	0xFF3
 18785                           intcon	equ	0xFF2
 18786                           intcon2	equ	0xFF1
 18787                           intcon3	equ	0xFF0
 18788                           indf0	equ	0xFEF
 18789                           postinc0	equ	0xFEE
 18790                           fsr0h	equ	0xFEA
 18791                           fsr0l	equ	0xFE9
 18792                           wreg	equ	0xFE8
 18793                           postdec1	equ	0xFE5
 18794                           fsr1l	equ	0xFE1
 18795                           indf2	equ	0xFDF
 18796                           postinc2	equ	0xFDE
 18797                           postdec2	equ	0xFDD
 18798                           fsr2h	equ	0xFDA
 18799                           fsr2l	equ	0xFD9
 18800                           status	equ	0xFD8
 18801                           
 18802 ;; *************** function _isdigit *****************
 18803 ;; Defined at:
 18804 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 18805 ;; Parameters:    Size  Location     Type
 18806 ;;  c               1    wreg     unsigned char 
 18807 ;; Auto vars:     Size  Location     Type
 18808 ;;  c               1    2[BANK0 ] unsigned char 
 18809 ;; Return value:  Size  Location     Type
 18810 ;;		None               void
 18811 ;; Registers used:
 18812 ;;		wreg, status,2, status,0
 18813 ;; Tracked objects:
 18814 ;;		On entry : 0/0
 18815 ;;		On exit  : 0/0
 18816 ;;		Unchanged: 0/0
 18817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18818 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18819 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18820 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18821 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18822 ;;Total ram usage:        3 bytes
 18823 ;; Hardware stack levels used:    1
 18824 ;; Hardware stack levels required when called:    7
 18825 ;; This function calls:
 18826 ;;		Nothing
 18827 ;; This function is called by:
 18828 ;;		_printf
 18829 ;; This function uses a non-reentrant model
 18830 ;;
 18831                           
 18832                           	psect	text58
 18833  005D60                     __ptext58:
 18834                           	opt stack 0
 18835  005D60                     _isdigit:
 18836                           	opt stack 19
 18837                           
 18838                           ;incstack = 0
 18839                           ;isdigit@c stored from wreg
 18840  005D60  0100               	movlb	0	; () banked
 18841  005D62  6F82               	movwf	isdigit@c& (0+255),b
 18842  005D64  0E00               	movlw	0
 18843  005D66  0100               	movlb	0	; () banked
 18844  005D68  6F81               	movwf	_isdigit$2072& (0+255),b
 18845                           
 18846                           ; BSR set to: 0
 18847  005D6A  0E3A               	movlw	58
 18848  005D6C  0100               	movlb	0	; () banked
 18849  005D6E  6182               	cpfslt	isdigit@c& (0+255),b
 18850  005D70  D007               	goto	l6710
 18851                           
 18852                           ; BSR set to: 0
 18853  005D72  0E2F               	movlw	47
 18854  005D74  0100               	movlb	0	; () banked
 18855  005D76  6582               	cpfsgt	isdigit@c& (0+255),b
 18856  005D78  D003               	goto	l6710
 18857                           
 18858                           ; BSR set to: 0
 18859  005D7A  0E01               	movlw	1
 18860  005D7C  0100               	movlb	0	; () banked
 18861  005D7E  6F81               	movwf	_isdigit$2072& (0+255),b
 18862  005D80                     l6710:
 18863                           
 18864                           ; BSR set to: 0
 18865  005D80  C081  F080         	movff	_isdigit$2072,??_isdigit
 18866  005D84  0100               	movlb	0	; () banked
 18867  005D86  3180               	rrcf	??_isdigit& (0+255),w,b
 18868  005D88  0012               	return	
 18869  005D8A                     __end_of_isdigit:
 18870                           	opt stack 0
 18871                           tblptru	equ	0xFF8
 18872                           tblptrh	equ	0xFF7
 18873                           tblptrl	equ	0xFF6
 18874                           tablat	equ	0xFF5
 18875                           prodh	equ	0xFF4
 18876                           prodl	equ	0xFF3
 18877                           intcon	equ	0xFF2
 18878                           intcon2	equ	0xFF1
 18879                           intcon3	equ	0xFF0
 18880                           indf0	equ	0xFEF
 18881                           postinc0	equ	0xFEE
 18882                           fsr0h	equ	0xFEA
 18883                           fsr0l	equ	0xFE9
 18884                           wreg	equ	0xFE8
 18885                           postdec1	equ	0xFE5
 18886                           fsr1l	equ	0xFE1
 18887                           indf2	equ	0xFDF
 18888                           postinc2	equ	0xFDE
 18889                           postdec2	equ	0xFDD
 18890                           fsr2h	equ	0xFDA
 18891                           fsr2l	equ	0xFD9
 18892                           status	equ	0xFD8
 18893                           
 18894 ;; *************** function ___wmul *****************
 18895 ;; Defined at:
 18896 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 18897 ;; Parameters:    Size  Location     Type
 18898 ;;  multiplier      2    0[BANK0 ] unsigned int 
 18899 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 18900 ;; Auto vars:     Size  Location     Type
 18901 ;;  product         2    4[BANK0 ] unsigned int 
 18902 ;; Return value:  Size  Location     Type
 18903 ;;                  2    0[BANK0 ] unsigned int 
 18904 ;; Registers used:
 18905 ;;		wreg, status,2, status,0, prodl, prodh
 18906 ;; Tracked objects:
 18907 ;;		On entry : 0/0
 18908 ;;		On exit  : 0/0
 18909 ;;		Unchanged: 0/0
 18910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18911 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18912 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18913 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18914 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18915 ;;Total ram usage:        6 bytes
 18916 ;; Hardware stack levels used:    1
 18917 ;; Hardware stack levels required when called:    7
 18918 ;; This function calls:
 18919 ;;		Nothing
 18920 ;; This function is called by:
 18921 ;;		_printf
 18922 ;; This function uses a non-reentrant model
 18923 ;;
 18924                           
 18925                           	psect	text59
 18926  005A32                     __ptext59:
 18927                           	opt stack 0
 18928  005A32                     ___wmul:
 18929                           	opt stack 19
 18930                           
 18931                           ; BSR set to: 0
 18932                           ;incstack = 0
 18933  005A32  0100               	movlb	0	; () banked
 18934  005A34  5180               	movf	___wmul@multiplier& (0+255),w,b
 18935  005A36  0100               	movlb	0	; () banked
 18936  005A38  0382               	mulwf	___wmul@multiplicand& (0+255),b
 18937  005A3A  CFF3 F084          	movff	prodl,___wmul@product
 18938  005A3E  CFF4 F085          	movff	prodh,___wmul@product+1
 18939  005A42  0100               	movlb	0	; () banked
 18940  005A44  5180               	movf	___wmul@multiplier& (0+255),w,b
 18941  005A46  0100               	movlb	0	; () banked
 18942  005A48  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 18943  005A4A  50F3               	movf	prodl,w,c
 18944  005A4C  0100               	movlb	0	; () banked
 18945  005A4E  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 18946  005A50  0100               	movlb	0	; () banked
 18947  005A52  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
 18948  005A54  0100               	movlb	0	; () banked
 18949  005A56  0382               	mulwf	___wmul@multiplicand& (0+255),b
 18950  005A58  50F3               	movf	prodl,w,c
 18951  005A5A  0100               	movlb	0	; () banked
 18952  005A5C  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 18953                           
 18954                           ; BSR set to: 0
 18955  005A5E  C084  F080         	movff	___wmul@product,?___wmul
 18956  005A62  C085  F081         	movff	___wmul@product+1,?___wmul+1
 18957  005A66  0012               	return	
 18958  005A68                     __end_of___wmul:
 18959                           	opt stack 0
 18960                           tblptru	equ	0xFF8
 18961                           tblptrh	equ	0xFF7
 18962                           tblptrl	equ	0xFF6
 18963                           tablat	equ	0xFF5
 18964                           prodh	equ	0xFF4
 18965                           prodl	equ	0xFF3
 18966                           intcon	equ	0xFF2
 18967                           intcon2	equ	0xFF1
 18968                           intcon3	equ	0xFF0
 18969                           indf0	equ	0xFEF
 18970                           postinc0	equ	0xFEE
 18971                           fsr0h	equ	0xFEA
 18972                           fsr0l	equ	0xFE9
 18973                           wreg	equ	0xFE8
 18974                           postdec1	equ	0xFE5
 18975                           fsr1l	equ	0xFE1
 18976                           indf2	equ	0xFDF
 18977                           postinc2	equ	0xFDE
 18978                           postdec2	equ	0xFDD
 18979                           fsr2h	equ	0xFDA
 18980                           fsr2l	equ	0xFD9
 18981                           status	equ	0xFD8
 18982                           
 18983 ;; *************** function ___lwmod *****************
 18984 ;; Defined at:
 18985 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 18986 ;; Parameters:    Size  Location     Type
 18987 ;;  dividend        2    7[BANK0 ] unsigned int 
 18988 ;;  divisor         2    9[BANK0 ] unsigned int 
 18989 ;; Auto vars:     Size  Location     Type
 18990 ;;  counter         1   11[BANK0 ] unsigned char 
 18991 ;; Return value:  Size  Location     Type
 18992 ;;                  2    7[BANK0 ] unsigned int 
 18993 ;; Registers used:
 18994 ;;		wreg, status,2, status,0
 18995 ;; Tracked objects:
 18996 ;;		On entry : 0/0
 18997 ;;		On exit  : 0/0
 18998 ;;		Unchanged: 0/0
 18999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19000 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19001 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19002 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19003 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19004 ;;Total ram usage:        5 bytes
 19005 ;; Hardware stack levels used:    1
 19006 ;; Hardware stack levels required when called:    7
 19007 ;; This function calls:
 19008 ;;		Nothing
 19009 ;; This function is called by:
 19010 ;;		_printf
 19011 ;; This function uses a non-reentrant model
 19012 ;;
 19013                           
 19014                           	psect	text60
 19015  0055D6                     __ptext60:
 19016                           	opt stack 0
 19017  0055D6                     ___lwmod:
 19018                           	opt stack 19
 19019                           
 19020                           ; BSR set to: 0
 19021                           ;incstack = 0
 19022  0055D6  0100               	movlb	0	; () banked
 19023  0055D8  5189               	movf	___lwmod@divisor& (0+255),w,b
 19024  0055DA  0100               	movlb	0	; () banked
 19025  0055DC  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 19026  0055DE  B4D8               	btfsc	status,2,c
 19027  0055E0  D026               	goto	l2017
 19028                           
 19029                           ; BSR set to: 0
 19030  0055E2  0E01               	movlw	1
 19031  0055E4  0100               	movlb	0	; () banked
 19032  0055E6  6F8B               	movwf	___lwmod@counter& (0+255),b
 19033  0055E8  D006               	goto	l6748
 19034  0055EA                     l6746:
 19035                           
 19036                           ; BSR set to: 0
 19037  0055EA  0100               	movlb	0	; () banked
 19038  0055EC  90D8               	bcf	status,0,c
 19039  0055EE  3789               	rlcf	___lwmod@divisor& (0+255),f,b
 19040  0055F0  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 19041  0055F2  0100               	movlb	0	; () banked
 19042  0055F4  2B8B               	incf	___lwmod@counter& (0+255),f,b
 19043  0055F6                     l6748:
 19044                           
 19045                           ; BSR set to: 0
 19046  0055F6  0100               	movlb	0	; () banked
 19047  0055F8  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 19048  0055FA  D7F7               	goto	l6746
 19049  0055FC                     l6750:
 19050                           
 19051                           ; BSR set to: 0
 19052  0055FC  0100               	movlb	0	; () banked
 19053  0055FE  5189               	movf	___lwmod@divisor& (0+255),w,b
 19054  005600  0100               	movlb	0	; () banked
 19055  005602  5D87               	subwf	___lwmod@dividend& (0+255),w,b
 19056  005604  0100               	movlb	0	; () banked
 19057  005606  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 19058  005608  0100               	movlb	0	; () banked
 19059  00560A  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 19060  00560C  A0D8               	btfss	status,0,c
 19061  00560E  D008               	goto	l6754
 19062                           
 19063                           ; BSR set to: 0
 19064  005610  0100               	movlb	0	; () banked
 19065  005612  5189               	movf	___lwmod@divisor& (0+255),w,b
 19066  005614  0100               	movlb	0	; () banked
 19067  005616  5F87               	subwf	___lwmod@dividend& (0+255),f,b
 19068  005618  0100               	movlb	0	; () banked
 19069  00561A  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 19070  00561C  0100               	movlb	0	; () banked
 19071  00561E  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 19072  005620                     l6754:
 19073                           
 19074                           ; BSR set to: 0
 19075  005620  0100               	movlb	0	; () banked
 19076  005622  90D8               	bcf	status,0,c
 19077  005624  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 19078  005626  3389               	rrcf	___lwmod@divisor& (0+255),f,b
 19079                           
 19080                           ; BSR set to: 0
 19081  005628  0100               	movlb	0	; () banked
 19082  00562A  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
 19083  00562C  D7E7               	goto	l6750
 19084  00562E                     l2017:
 19085                           
 19086                           ; BSR set to: 0
 19087  00562E  C087  F087         	movff	___lwmod@dividend,?___lwmod
 19088  005632  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
 19089                           
 19090                           ; BSR set to: 0
 19091  005636  0012               	return		;funcret
 19092  005638                     __end_of___lwmod:
 19093                           	opt stack 0
 19094                           tblptru	equ	0xFF8
 19095                           tblptrh	equ	0xFF7
 19096                           tblptrl	equ	0xFF6
 19097                           tablat	equ	0xFF5
 19098                           prodh	equ	0xFF4
 19099                           prodl	equ	0xFF3
 19100                           intcon	equ	0xFF2
 19101                           intcon2	equ	0xFF1
 19102                           intcon3	equ	0xFF0
 19103                           indf0	equ	0xFEF
 19104                           postinc0	equ	0xFEE
 19105                           fsr0h	equ	0xFEA
 19106                           fsr0l	equ	0xFE9
 19107                           wreg	equ	0xFE8
 19108                           postdec1	equ	0xFE5
 19109                           fsr1l	equ	0xFE1
 19110                           indf2	equ	0xFDF
 19111                           postinc2	equ	0xFDE
 19112                           postdec2	equ	0xFDD
 19113                           fsr2h	equ	0xFDA
 19114                           fsr2l	equ	0xFD9
 19115                           status	equ	0xFD8
 19116                           
 19117 ;; *************** function ___lwdiv *****************
 19118 ;; Defined at:
 19119 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 19120 ;; Parameters:    Size  Location     Type
 19121 ;;  dividend        2    0[BANK0 ] unsigned int 
 19122 ;;  divisor         2    2[BANK0 ] unsigned int 
 19123 ;; Auto vars:     Size  Location     Type
 19124 ;;  quotient        2    4[BANK0 ] unsigned int 
 19125 ;;  counter         1    6[BANK0 ] unsigned char 
 19126 ;; Return value:  Size  Location     Type
 19127 ;;                  2    0[BANK0 ] unsigned int 
 19128 ;; Registers used:
 19129 ;;		wreg, status,2, status,0
 19130 ;; Tracked objects:
 19131 ;;		On entry : 0/0
 19132 ;;		On exit  : 0/0
 19133 ;;		Unchanged: 0/0
 19134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19135 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19136 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19137 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19138 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19139 ;;Total ram usage:        7 bytes
 19140 ;; Hardware stack levels used:    1
 19141 ;; Hardware stack levels required when called:    7
 19142 ;; This function calls:
 19143 ;;		Nothing
 19144 ;; This function is called by:
 19145 ;;		_printf
 19146 ;; This function uses a non-reentrant model
 19147 ;;
 19148                           
 19149                           	psect	text61
 19150  005344                     __ptext61:
 19151                           	opt stack 0
 19152  005344                     ___lwdiv:
 19153                           	opt stack 19
 19154                           
 19155                           ; BSR set to: 0
 19156                           ;incstack = 0
 19157  005344  0E00               	movlw	0
 19158  005346  0100               	movlb	0	; () banked
 19159  005348  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
 19160  00534A  0E00               	movlw	0
 19161  00534C  6F84               	movwf	___lwdiv@quotient& (0+255),b
 19162                           
 19163                           ; BSR set to: 0
 19164  00534E  0100               	movlb	0	; () banked
 19165  005350  5182               	movf	___lwdiv@divisor& (0+255),w,b
 19166  005352  0100               	movlb	0	; () banked
 19167  005354  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 19168  005356  B4D8               	btfsc	status,2,c
 19169  005358  D02C               	goto	l2007
 19170                           
 19171                           ; BSR set to: 0
 19172  00535A  0E01               	movlw	1
 19173  00535C  0100               	movlb	0	; () banked
 19174  00535E  6F86               	movwf	___lwdiv@counter& (0+255),b
 19175  005360  D006               	goto	l6728
 19176  005362                     l6726:
 19177                           
 19178                           ; BSR set to: 0
 19179  005362  0100               	movlb	0	; () banked
 19180  005364  90D8               	bcf	status,0,c
 19181  005366  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
 19182  005368  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 19183  00536A  0100               	movlb	0	; () banked
 19184  00536C  2B86               	incf	___lwdiv@counter& (0+255),f,b
 19185  00536E                     l6728:
 19186                           
 19187                           ; BSR set to: 0
 19188  00536E  0100               	movlb	0	; () banked
 19189  005370  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 19190  005372  D7F7               	goto	l6726
 19191  005374                     l6730:
 19192                           
 19193                           ; BSR set to: 0
 19194  005374  0100               	movlb	0	; () banked
 19195  005376  90D8               	bcf	status,0,c
 19196  005378  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
 19197  00537A  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 19198                           
 19199                           ; BSR set to: 0
 19200  00537C  0100               	movlb	0	; () banked
 19201  00537E  5182               	movf	___lwdiv@divisor& (0+255),w,b
 19202  005380  0100               	movlb	0	; () banked
 19203  005382  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
 19204  005384  0100               	movlb	0	; () banked
 19205  005386  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 19206  005388  0100               	movlb	0	; () banked
 19207  00538A  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 19208  00538C  A0D8               	btfss	status,0,c
 19209  00538E  D00A               	goto	l6738
 19210                           
 19211                           ; BSR set to: 0
 19212  005390  0100               	movlb	0	; () banked
 19213  005392  5182               	movf	___lwdiv@divisor& (0+255),w,b
 19214  005394  0100               	movlb	0	; () banked
 19215  005396  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
 19216  005398  0100               	movlb	0	; () banked
 19217  00539A  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 19218  00539C  0100               	movlb	0	; () banked
 19219  00539E  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 19220                           
 19221                           ; BSR set to: 0
 19222  0053A0  0100               	movlb	0	; () banked
 19223  0053A2  8184               	bsf	___lwdiv@quotient& (0+255),0,b
 19224  0053A4                     l6738:
 19225                           
 19226                           ; BSR set to: 0
 19227  0053A4  0100               	movlb	0	; () banked
 19228  0053A6  90D8               	bcf	status,0,c
 19229  0053A8  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 19230  0053AA  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
 19231                           
 19232                           ; BSR set to: 0
 19233  0053AC  0100               	movlb	0	; () banked
 19234  0053AE  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
 19235  0053B0  D7E1               	goto	l6730
 19236  0053B2                     l2007:
 19237                           
 19238                           ; BSR set to: 0
 19239  0053B2  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
 19240  0053B6  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
 19241                           
 19242                           ; BSR set to: 0
 19243  0053BA  0012               	return		;funcret
 19244  0053BC                     __end_of___lwdiv:
 19245                           	opt stack 0
 19246                           tblptru	equ	0xFF8
 19247                           tblptrh	equ	0xFF7
 19248                           tblptrl	equ	0xFF6
 19249                           tablat	equ	0xFF5
 19250                           prodh	equ	0xFF4
 19251                           prodl	equ	0xFF3
 19252                           intcon	equ	0xFF2
 19253                           intcon2	equ	0xFF1
 19254                           intcon3	equ	0xFF0
 19255                           indf0	equ	0xFEF
 19256                           postinc0	equ	0xFEE
 19257                           fsr0h	equ	0xFEA
 19258                           fsr0l	equ	0xFE9
 19259                           wreg	equ	0xFE8
 19260                           postdec1	equ	0xFE5
 19261                           fsr1l	equ	0xFE1
 19262                           indf2	equ	0xFDF
 19263                           postinc2	equ	0xFDE
 19264                           postdec2	equ	0xFDD
 19265                           fsr2h	equ	0xFDA
 19266                           fsr2l	equ	0xFD9
 19267                           status	equ	0xFD8
 19268                           
 19269 ;; *************** function _lcdInst *****************
 19270 ;; Defined at:
 19271 ;;		line 15 in file "lcd.c"
 19272 ;; Parameters:    Size  Location     Type
 19273 ;;  data            1    wreg     unsigned char 
 19274 ;; Auto vars:     Size  Location     Type
 19275 ;;  data            1    2[BANK0 ] unsigned char 
 19276 ;; Return value:  Size  Location     Type
 19277 ;;                  1    wreg      void 
 19278 ;; Registers used:
 19279 ;;		wreg, status,2, status,0, cstack
 19280 ;; Tracked objects:
 19281 ;;		On entry : 0/0
 19282 ;;		On exit  : 0/0
 19283 ;;		Unchanged: 0/0
 19284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19285 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19286 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19287 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19288 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19289 ;;Total ram usage:        1 bytes
 19290 ;; Hardware stack levels used:    1
 19291 ;; Hardware stack levels required when called:    8
 19292 ;; This function calls:
 19293 ;;		_lcdNibble
 19294 ;; This function is called by:
 19295 ;;		_UI
 19296 ;;		_change_state_to_menu_start
 19297 ;;		_change_state_to_menu_12
 19298 ;;		_change_state_to_menu_22
 19299 ;;		_initLCD
 19300 ;;		_printRTC
 19301 ;;		_Loading
 19302 ;;		_EEPROM_write
 19303 ;;		_Test
 19304 ;;		_algorithmTest
 19305 ;;		_sensorTest
 19306 ;;		_actuatorTest
 19307 ;;		_BothServos
 19308 ;;		_PortTestDC
 19309 ;;		_PlatformTest
 19310 ;;		_SpeedTest
 19311 ;;		_BlockerTest
 19312 ;;		_arm
 19313 ;;		_PortTestPusher
 19314 ;; This function uses a non-reentrant model
 19315 ;;
 19316                           
 19317                           	psect	text62
 19318  005F5E                     __ptext62:
 19319                           	opt stack 0
 19320  005F5E                     _lcdInst:
 19321                           	opt stack 20
 19322                           
 19323                           ; BSR set to: 0
 19324                           ;incstack = 0
 19325                           ;lcdInst@data stored from wreg
 19326  005F5E  0100               	movlb	0	; () banked
 19327  005F60  6F82               	movwf	lcdInst@data& (0+255),b
 19328                           
 19329                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 19330  005F62  948C               	bcf	3980,2,c	;volatile
 19331                           
 19332                           ;lcd.c: 17: lcdNibble(data);
 19333  005F64  0100               	movlb	0	; () banked
 19334  005F66  5182               	movf	lcdInst@data& (0+255),w,b
 19335  005F68  EC4F  F02A         	call	_lcdNibble
 19336  005F6C  0012               	return		;funcret
 19337  005F6E                     __end_of_lcdInst:
 19338                           	opt stack 0
 19339                           tblptru	equ	0xFF8
 19340                           tblptrh	equ	0xFF7
 19341                           tblptrl	equ	0xFF6
 19342                           tablat	equ	0xFF5
 19343                           prodh	equ	0xFF4
 19344                           prodl	equ	0xFF3
 19345                           intcon	equ	0xFF2
 19346                           intcon2	equ	0xFF1
 19347                           intcon3	equ	0xFF0
 19348                           indf0	equ	0xFEF
 19349                           postinc0	equ	0xFEE
 19350                           fsr0h	equ	0xFEA
 19351                           fsr0l	equ	0xFE9
 19352                           wreg	equ	0xFE8
 19353                           postdec1	equ	0xFE5
 19354                           fsr1l	equ	0xFE1
 19355                           indf2	equ	0xFDF
 19356                           postinc2	equ	0xFDE
 19357                           postdec2	equ	0xFDD
 19358                           fsr2h	equ	0xFDA
 19359                           fsr2l	equ	0xFD9
 19360                           status	equ	0xFD8
 19361                           
 19362 ;; *************** function _lcdNibble *****************
 19363 ;; Defined at:
 19364 ;;		line 25 in file "lcd.c"
 19365 ;; Parameters:    Size  Location     Type
 19366 ;;  data            1    wreg     unsigned char 
 19367 ;; Auto vars:     Size  Location     Type
 19368 ;;  data            1    1[BANK0 ] unsigned char 
 19369 ;;  temp            1    0[BANK0 ] unsigned char 
 19370 ;; Return value:  Size  Location     Type
 19371 ;;                  1    wreg      void 
 19372 ;; Registers used:
 19373 ;;		wreg, status,2, status,0
 19374 ;; Tracked objects:
 19375 ;;		On entry : 0/0
 19376 ;;		On exit  : 0/0
 19377 ;;		Unchanged: 0/0
 19378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19379 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19380 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19381 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19382 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19383 ;;Total ram usage:        2 bytes
 19384 ;; Hardware stack levels used:    1
 19385 ;; Hardware stack levels required when called:    7
 19386 ;; This function calls:
 19387 ;;		Nothing
 19388 ;; This function is called by:
 19389 ;;		_lcdInst
 19390 ;;		_putch
 19391 ;; This function uses a non-reentrant model
 19392 ;;
 19393                           
 19394                           	psect	text63
 19395  00549E                     __ptext63:
 19396                           	opt stack 0
 19397  00549E                     _lcdNibble:
 19398                           	opt stack 20
 19399                           
 19400                           ;incstack = 0
 19401                           ;lcdNibble@data stored from wreg
 19402  00549E  0100               	movlb	0	; () banked
 19403  0054A0  6F81               	movwf	lcdNibble@data& (0+255),b
 19404                           
 19405                           ;lcd.c: 27: (INTCONbits.GIE = 0);
 19406  0054A2  9EF2               	bcf	intcon,7,c	;volatile
 19407                           
 19408                           ;lcd.c: 28: char temp = data & 0xF0;
 19409  0054A4  0100               	movlb	0	; () banked
 19410  0054A6  5181               	movf	lcdNibble@data& (0+255),w,b
 19411  0054A8  0BF0               	andlw	240
 19412  0054AA  0100               	movlb	0	; () banked
 19413  0054AC  6F80               	movwf	lcdNibble@temp& (0+255),b
 19414                           
 19415                           ;lcd.c: 29: LATD = LATD & 0x0F;
 19416  0054AE  508C               	movf	3980,w,c	;volatile
 19417  0054B0  0B0F               	andlw	15
 19418  0054B2  6E8C               	movwf	3980,c	;volatile
 19419                           
 19420                           ;lcd.c: 30: LATD = temp | LATD;
 19421  0054B4  0100               	movlb	0	; () banked
 19422  0054B6  5180               	movf	lcdNibble@temp& (0+255),w,b
 19423  0054B8  108C               	iorwf	3980,w,c	;volatile
 19424  0054BA  6E8C               	movwf	3980,c	;volatile
 19425                           
 19426                           ; BSR set to: 0
 19427                           ;lcd.c: 32: LATDbits.LATD3 = 1;
 19428  0054BC  868C               	bsf	3980,3,c	;volatile
 19429                           
 19430                           ; BSR set to: 0
 19431                           ;lcd.c: 33: _delay((unsigned long)((25)*(32000000/4000000.0)));
 19432  0054BE  0E42               	movlw	66
 19433  0054C0                     u12117:
 19434  0054C0  2EE8               	decfsz	wreg,f,c
 19435  0054C2  D7FE               	bra	u12117
 19436  0054C4  D000               	nop2	
 19437                           
 19438                           ;lcd.c: 34: LATDbits.LATD3 = 0;
 19439  0054C6  968C               	bcf	3980,3,c	;volatile
 19440                           
 19441                           ;lcd.c: 35: _delay((unsigned long)((25)*(32000000/4000000.0)));
 19442  0054C8  0E42               	movlw	66
 19443  0054CA                     u12127:
 19444  0054CA  2EE8               	decfsz	wreg,f,c
 19445  0054CC  D7FE               	bra	u12127
 19446  0054CE  D000               	nop2	
 19447                           
 19448                           ;lcd.c: 37: data = data << 4;
 19449  0054D0  0100               	movlb	0	; () banked
 19450  0054D2  3981               	swapf	lcdNibble@data& (0+255),w,b
 19451  0054D4  0BF0               	andlw	240
 19452  0054D6  0100               	movlb	0	; () banked
 19453  0054D8  6F81               	movwf	lcdNibble@data& (0+255),b
 19454                           
 19455                           ;lcd.c: 39: temp = data & 0xF0;
 19456  0054DA  0100               	movlb	0	; () banked
 19457  0054DC  5181               	movf	lcdNibble@data& (0+255),w,b
 19458  0054DE  0BF0               	andlw	240
 19459  0054E0  0100               	movlb	0	; () banked
 19460  0054E2  6F80               	movwf	lcdNibble@temp& (0+255),b
 19461                           
 19462                           ;lcd.c: 40: LATD = LATD & 0x0F;
 19463  0054E4  508C               	movf	3980,w,c	;volatile
 19464  0054E6  0B0F               	andlw	15
 19465  0054E8  6E8C               	movwf	3980,c	;volatile
 19466                           
 19467                           ;lcd.c: 41: LATD = temp | LATD;
 19468  0054EA  0100               	movlb	0	; () banked
 19469  0054EC  5180               	movf	lcdNibble@temp& (0+255),w,b
 19470  0054EE  108C               	iorwf	3980,w,c	;volatile
 19471  0054F0  6E8C               	movwf	3980,c	;volatile
 19472                           
 19473                           ; BSR set to: 0
 19474                           ;lcd.c: 43: LATDbits.LATD3 = 1;
 19475  0054F2  868C               	bsf	3980,3,c	;volatile
 19476                           
 19477                           ; BSR set to: 0
 19478                           ;lcd.c: 44: _delay((unsigned long)((25)*(32000000/4000000.0)));
 19479  0054F4  0E42               	movlw	66
 19480  0054F6                     u12137:
 19481  0054F6  2EE8               	decfsz	wreg,f,c
 19482  0054F8  D7FE               	bra	u12137
 19483  0054FA  D000               	nop2	
 19484                           
 19485                           ;lcd.c: 45: LATDbits.LATD3 = 0;
 19486  0054FC  968C               	bcf	3980,3,c	;volatile
 19487                           
 19488                           ;lcd.c: 46: _delay((unsigned long)((25)*(32000000/4000000.0)));
 19489  0054FE  0E42               	movlw	66
 19490  005500                     u12147:
 19491  005500  2EE8               	decfsz	wreg,f,c
 19492  005502  D7FE               	bra	u12147
 19493  005504  D000               	nop2	
 19494                           
 19495                           ;lcd.c: 47: (INTCONbits.GIE = 1);
 19496  005506  8EF2               	bsf	intcon,7,c	;volatile
 19497  005508  0012               	return		;funcret
 19498  00550A                     __end_of_lcdNibble:
 19499                           	opt stack 0
 19500                           tblptru	equ	0xFF8
 19501                           tblptrh	equ	0xFF7
 19502                           tblptrl	equ	0xFF6
 19503                           tablat	equ	0xFF5
 19504                           prodh	equ	0xFF4
 19505                           prodl	equ	0xFF3
 19506                           intcon	equ	0xFF2
 19507                           intcon2	equ	0xFF1
 19508                           intcon3	equ	0xFF0
 19509                           indf0	equ	0xFEF
 19510                           postinc0	equ	0xFEE
 19511                           fsr0h	equ	0xFEA
 19512                           fsr0l	equ	0xFE9
 19513                           wreg	equ	0xFE8
 19514                           postdec1	equ	0xFE5
 19515                           fsr1l	equ	0xFE1
 19516                           indf2	equ	0xFDF
 19517                           postinc2	equ	0xFDE
 19518                           postdec2	equ	0xFDD
 19519                           fsr2h	equ	0xFDA
 19520                           fsr2l	equ	0xFD9
 19521                           status	equ	0xFD8
 19522                           
 19523 ;; *************** function _handler *****************
 19524 ;; Defined at:
 19525 ;;		line 16 in file "interruptHandler.c"
 19526 ;; Parameters:    Size  Location     Type
 19527 ;;		None
 19528 ;; Auto vars:     Size  Location     Type
 19529 ;;		None
 19530 ;; Return value:  Size  Location     Type
 19531 ;;                  1    wreg      void 
 19532 ;; Registers used:
 19533 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19534 ;; Tracked objects:
 19535 ;;		On entry : 0/0
 19536 ;;		On exit  : 0/0
 19537 ;;		Unchanged: 0/0
 19538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19539 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19540 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19541 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19542 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19543 ;;Total ram usage:       16 bytes
 19544 ;; Hardware stack levels used:    1
 19545 ;; Hardware stack levels required when called:    6
 19546 ;; This function calls:
 19547 ;;		_printSortTimer
 19548 ;;		_updateArmState
 19549 ;;		_updateMenu
 19550 ;;		_updateServoStates
 19551 ;;		i2_change_state_to_menu_start
 19552 ;; This function is called by:
 19553 ;;		Interrupt level 2
 19554 ;; This function uses a non-reentrant model
 19555 ;;
 19556                           
 19557                           	psect	intcode
 19558  000008                     __pintcode:
 19559                           	opt stack 0
 19560  000008                     _handler:
 19561                           	opt stack 18
 19562                           
 19563                           ;incstack = 0
 19564  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 19565  00000A  ED06  F01E         	call	int_func,f	;refresh shadow registers
 19566                           tblptru	equ	0xFF8
 19567                           tblptrh	equ	0xFF7
 19568                           tblptrl	equ	0xFF6
 19569                           tablat	equ	0xFF5
 19570                           prodh	equ	0xFF4
 19571                           prodl	equ	0xFF3
 19572                           intcon	equ	0xFF2
 19573                           intcon2	equ	0xFF1
 19574                           intcon3	equ	0xFF0
 19575                           indf0	equ	0xFEF
 19576                           postinc0	equ	0xFEE
 19577                           fsr0h	equ	0xFEA
 19578                           fsr0l	equ	0xFE9
 19579                           wreg	equ	0xFE8
 19580                           postdec1	equ	0xFE5
 19581                           fsr1l	equ	0xFE1
 19582                           indf2	equ	0xFDF
 19583                           postinc2	equ	0xFDE
 19584                           postdec2	equ	0xFDD
 19585                           fsr2h	equ	0xFDA
 19586                           fsr2l	equ	0xFD9
 19587                           status	equ	0xFD8
 19588                           
 19589                           	psect	intcode_body
 19590  003C0C                     __pintcode_body:
 19591                           	opt stack 18
 19592  003C0C                     int_func:
 19593                           	opt stack 18
 19594  003C0C  0006               	pop		; remove dummy address from shadow register refresh
 19595  003C0E  CFFA F04D          	movff	pclath,??_handler+2
 19596  003C12  CFFB F04E          	movff	pclatu,??_handler+3
 19597  003C16  CFE9 F04F          	movff	fsr0l,??_handler+4
 19598  003C1A  CFEA F050          	movff	fsr0h,??_handler+5
 19599  003C1E  CFE1 F051          	movff	fsr1l,??_handler+6
 19600  003C22  CFE2 F052          	movff	fsr1h,??_handler+7
 19601  003C26  CFD9 F053          	movff	fsr2l,??_handler+8
 19602  003C2A  CFDA F054          	movff	fsr2h,??_handler+9
 19603  003C2E  CFF3 F055          	movff	prodl,??_handler+10
 19604  003C32  CFF4 F056          	movff	prodh,??_handler+11
 19605  003C36  CFF6 F057          	movff	tblptrl,??_handler+12
 19606  003C3A  CFF7 F058          	movff	tblptrh,??_handler+13
 19607  003C3E  CFF8 F059          	movff	tblptru,??_handler+14
 19608  003C42  CFF5 F05A          	movff	tablat,??_handler+15
 19609                           
 19610                           ;interruptHandler.c: 18: if(INT1IF){
 19611  003C46  A0F0               	btfss	intcon3,0,c	;volatile
 19612  003C48  D034               	goto	i2l10458
 19613                           
 19614                           ;interruptHandler.c: 19: INT1IF = 0;
 19615  003C4A  90F0               	bcf	intcon3,0,c	;volatile
 19616                           
 19617                           ;interruptHandler.c: 20: input = keys[(PORTB & 0xF0) >> 4];
 19618  003C4C  3881               	swapf	3969,w,c	;volatile
 19619  003C4E  0B0F               	andlw	15
 19620  003C50  0B0F               	andlw	15
 19621  003C52  6E4B               	movwf	??_handler& (0+255),c
 19622  003C54  6A4C               	clrf	(??_handler+1)& (0+255),c
 19623  003C56  0EA7               	movlw	low _keys
 19624  003C58  244B               	addwf	??_handler,w,c
 19625  003C5A  6EF6               	movwf	tblptrl,c
 19626  003C5C  0EFA               	movlw	high _keys
 19627  003C5E  204C               	addwfc	??_handler+1,w,c
 19628  003C60  6EF7               	movwf	tblptrh,c
 19629  003C62                     	if	1	;There are 3 active tblptr bytes
 19630  003C62  6AF8               	clrf	tblptru,c
 19631  003C64  0E00               	movlw	low (__mediumconst shr (0+16))
 19632  003C66  22F8               	addwfc	tblptru,f,c
 19633  003C68                     	endif
 19634  003C68  0008               	tblrd		*
 19635  003C6A  CFF5 F07D          	movff	tablat,_input	;volatile
 19636                           
 19637                           ;interruptHandler.c: 21: if(input == '*'){
 19638  003C6E  0E2A               	movlw	42
 19639  003C70  187D               	xorwf	_input,w,c	;volatile
 19640  003C72  B4D8               	btfsc	status,2,c
 19641  003C74  D00D               	goto	i2l10452
 19642  003C76  D018               	goto	i2l10454
 19643  003C78                     i2l10442:
 19644                           
 19645                           ;interruptHandler.c: 24: machine_state = Testing_state;
 19646  003C78  0E03               	movlw	3
 19647  003C7A  D007               	goto	L16
 19648  003C7C                     i2l10444:
 19649                           
 19650                           ; BSR set to: 0
 19651                           ;interruptHandler.c: 27: machine_state = UI_state;
 19652  003C7C  0E00               	movlw	0
 19653  003C7E  0100               	movlb	0	; () banked
 19654  003C80  6FFC               	movwf	_machine_state& (0+255),b
 19655                           
 19656                           ; BSR set to: 0
 19657                           ;interruptHandler.c: 28: change_state_to_menu_start();
 19658  003C82  ECD9  F02E         	call	i2_change_state_to_menu_start	;wreg free
 19659                           
 19660                           ;interruptHandler.c: 29: break;
 19661  003C86  D015               	goto	i2l10458
 19662  003C88                     i2l10448:
 19663                           
 19664                           ;interruptHandler.c: 31: machine_state = DoneSorting_state;
 19665  003C88  0E02               	movlw	2
 19666  003C8A                     L16:
 19667  003C8A  0100               	movlb	0	; () banked
 19668  003C8C  6FFC               	movwf	_machine_state& (0+255),b
 19669                           
 19670                           ; BSR set to: 0
 19671                           ;interruptHandler.c: 33: }
 19672                           
 19673                           ;interruptHandler.c: 32: break;
 19674  003C8E  D011               	goto	i2l10458
 19675  003C90                     i2l10452:
 19676  003C90  0100               	movlb	0	; () banked
 19677  003C92  51FC               	movf	_machine_state& (0+255),w,b
 19678                           
 19679                           ; Switch size 1, requested type "space"
 19680                           ; Number of cases is 3, Range of values is 0 to 3
 19681                           ; switch strategies available:
 19682                           ; Name         Instructions Cycles
 19683                           ; simple_byte           10     6 (average)
 19684                           ;	Chosen strategy is simple_byte
 19685  003C94  0A00               	xorlw	0	; case 0
 19686  003C96  B4D8               	btfsc	status,2,c
 19687  003C98  D7EF               	goto	i2l10442
 19688  003C9A  0A01               	xorlw	1	; case 1
 19689  003C9C  B4D8               	btfsc	status,2,c
 19690  003C9E  D7F4               	goto	i2l10448
 19691  003CA0  0A02               	xorlw	2	; case 3
 19692  003CA2  B4D8               	btfsc	status,2,c
 19693  003CA4  D7EB               	goto	i2l10444
 19694                           
 19695                           ; BSR set to: 0
 19696                           ;interruptHandler.c: 34: }
 19697  003CA6  D005               	goto	i2l10458
 19698  003CA8                     i2l10454:
 19699                           
 19700                           ;interruptHandler.c: 35: else if(machine_state == UI_state){
 19701  003CA8  0100               	movlb	0	; () banked
 19702  003CAA  51FC               	movf	_machine_state& (0+255),w,b
 19703  003CAC  B4D8               	btfsc	status,2,c
 19704                           
 19705                           ; BSR set to: 0
 19706                           ;interruptHandler.c: 36: updateMenu();
 19707  003CAE  EC95  F01A         	call	_updateMenu	;wreg free
 19708  003CB2                     i2l10458:
 19709                           
 19710                           ;interruptHandler.c: 37: }
 19711                           ;interruptHandler.c: 38: }
 19712                           ;interruptHandler.c: 41: if(TMR0IF){
 19713  003CB2  A4F2               	btfss	intcon,2,c	;volatile
 19714  003CB4  D00C               	goto	i2l10472
 19715                           
 19716                           ;interruptHandler.c: 42: TMR0IF = 0;
 19717  003CB6  94F2               	bcf	intcon,2,c	;volatile
 19718                           
 19719                           ;interruptHandler.c: 43: if(machine_state == Sorting_state){
 19720  003CB8  0100               	movlb	0	; () banked
 19721  003CBA  05FC               	decf	_machine_state& (0+255),w,b
 19722  003CBC  A4D8               	btfss	status,2,c
 19723  003CBE  D007               	goto	i2l10472
 19724                           
 19725                           ; BSR set to: 0
 19726                           ;interruptHandler.c: 44: printSortTimer();
 19727  003CC0  EC02  F016         	call	_printSortTimer	;wreg free
 19728                           
 19729                           ;interruptHandler.c: 46: TMR0H = 0b10000101;
 19730  003CC4  0E85               	movlw	133
 19731  003CC6  6ED7               	movwf	4055,c	;volatile
 19732                           
 19733                           ;interruptHandler.c: 47: TMR0L = 0b11101110;
 19734  003CC8  0EEE               	movlw	238
 19735  003CCA  6ED6               	movwf	4054,c	;volatile
 19736                           
 19737                           ;interruptHandler.c: 48: TMR0ON = 1;
 19738  003CCC  8ED5               	bsf	4053,7,c	;volatile
 19739  003CCE                     i2l10472:
 19740                           
 19741                           ;interruptHandler.c: 49: }
 19742                           ;interruptHandler.c: 50: }
 19743                           ;interruptHandler.c: 53: if(TMR1IF){
 19744  003CCE  A09E               	btfss	3998,0,c	;volatile
 19745  003CD0  D028               	goto	i2l10500
 19746                           
 19747                           ;interruptHandler.c: 54: TMR1IF = 0;
 19748  003CD2  909E               	bcf	3998,0,c	;volatile
 19749                           
 19750                           ;interruptHandler.c: 55: TMR1ON = 0;
 19751  003CD4  90CD               	bcf	4045,0,c	;volatile
 19752                           
 19753                           ;interruptHandler.c: 56: if(machine_state == Sorting_state){
 19754  003CD6  0100               	movlb	0	; () banked
 19755  003CD8  05FC               	decf	_machine_state& (0+255),w,b
 19756  003CDA  A4D8               	btfss	status,2,c
 19757  003CDC  D022               	goto	i2l10500
 19758                           
 19759                           ; BSR set to: 0
 19760                           ;interruptHandler.c: 57: if(was_low_1){
 19761  003CDE  5077               	movf	_was_low_1,w,c	;volatile
 19762  003CE0  1078               	iorwf	_was_low_1+1,w,c	;volatile
 19763  003CE2  B4D8               	btfsc	status,2,c
 19764  003CE4  D00A               	goto	i2l1071
 19765                           
 19766                           ; BSR set to: 0
 19767                           ;interruptHandler.c: 58: LATCbits.LATC1 = 1;
 19768  003CE6  828B               	bsf	3979,1,c	;volatile
 19769                           
 19770                           ; BSR set to: 0
 19771                           ;interruptHandler.c: 59: was_low_1 = 0;
 19772  003CE8  0E00               	movlw	0
 19773  003CEA  6E78               	movwf	_was_low_1+1,c	;volatile
 19774  003CEC  0E00               	movlw	0
 19775  003CEE  6E77               	movwf	_was_low_1,c	;volatile
 19776                           
 19777                           ; BSR set to: 0
 19778                           ;interruptHandler.c: 60: TMR1H = servoTimes[0];
 19779  003CF0  C05B  FFCF         	movff	_servoTimes,4047	;volatile
 19780                           
 19781                           ; BSR set to: 0
 19782                           ;interruptHandler.c: 61: TMR1L = servoTimes[1];
 19783  003CF4  C05D  FFCE         	movff	_servoTimes+2,4046	;volatile
 19784                           
 19785                           ;interruptHandler.c: 62: }
 19786  003CF8  D00D               	goto	i2l10494
 19787  003CFA                     i2l1071:
 19788                           
 19789                           ; BSR set to: 0
 19790                           ;interruptHandler.c: 63: else{
 19791                           ;interruptHandler.c: 64: LATCbits.LATC1 = 0;
 19792  003CFA  928B               	bcf	3979,1,c	;volatile
 19793                           
 19794                           ; BSR set to: 0
 19795                           ;interruptHandler.c: 65: was_low_1 = 1;
 19796  003CFC  0E00               	movlw	0
 19797  003CFE  6E78               	movwf	_was_low_1+1,c	;volatile
 19798  003D00  0E01               	movlw	1
 19799  003D02  6E77               	movwf	_was_low_1,c	;volatile
 19800                           
 19801                           ; BSR set to: 0
 19802                           ;interruptHandler.c: 66: TMR1H = 20000 - servoTimes[0];
 19803  003D04  505B               	movf	_servoTimes,w,c
 19804  003D06  0800               	sublw	0
 19805  003D08  0F20               	addlw	32
 19806  003D0A  6ECF               	movwf	4047,c	;volatile
 19807                           
 19808                           ; BSR set to: 0
 19809                           ;interruptHandler.c: 67: TMR1L = 20000 - servoTimes[1];
 19810  003D0C  505D               	movf	_servoTimes+2,w,c
 19811  003D0E  0800               	sublw	0
 19812  003D10  0F20               	addlw	32
 19813  003D12  6ECE               	movwf	4046,c	;volatile
 19814  003D14                     i2l10494:
 19815                           
 19816                           ; BSR set to: 0
 19817                           ;interruptHandler.c: 68: }
 19818                           ;interruptHandler.c: 69: TMR1ON = 1;
 19819  003D14  80CD               	bsf	4045,0,c	;volatile
 19820                           
 19821                           ; BSR set to: 0
 19822                           ;interruptHandler.c: 70: servo_timer_counter += 10;
 19823  003D16  0E0A               	movlw	10
 19824  003D18  266D               	addwf	_servo_timer_counter,f,c	;volatile
 19825  003D1A  0E00               	movlw	0
 19826  003D1C  226E               	addwfc	_servo_timer_counter+1,f,c	;volatile
 19827                           
 19828                           ; BSR set to: 0
 19829                           ;interruptHandler.c: 72: updateServoStates();
 19830  003D1E  ECFB  F01E         	call	_updateServoStates	;wreg free
 19831  003D22                     i2l10500:
 19832                           
 19833                           ;interruptHandler.c: 73: }
 19834                           ;interruptHandler.c: 74: }
 19835                           ;interruptHandler.c: 77: if(TMR2IF){
 19836  003D22  A29E               	btfss	3998,1,c	;volatile
 19837  003D24  D026               	goto	i2l10526
 19838                           
 19839                           ;interruptHandler.c: 80: TMR2IF = 0;
 19840  003D26  929E               	bcf	3998,1,c	;volatile
 19841                           
 19842                           ;interruptHandler.c: 81: TMR2ON = 0;
 19843  003D28  94CA               	bcf	4042,2,c	;volatile
 19844                           
 19845                           ;interruptHandler.c: 82: timer2_counter++;
 19846  003D2A  4A73               	infsnz	_timer2_counter,f,c	;volatile
 19847  003D2C  2A74               	incf	_timer2_counter+1,f,c	;volatile
 19848                           
 19849                           ;interruptHandler.c: 83: if(machine_state == Sorting_state){
 19850  003D2E  0100               	movlb	0	; () banked
 19851  003D30  05FC               	decf	_machine_state& (0+255),w,b
 19852  003D32  A4D8               	btfss	status,2,c
 19853  003D34  D01E               	goto	i2l10526
 19854                           
 19855                           ; BSR set to: 0
 19856                           ;interruptHandler.c: 84: if(was_low_2 && (timer2_counter == 2)){
 19857  003D36  5079               	movf	_was_low_2,w,c	;volatile
 19858  003D38  107A               	iorwf	_was_low_2+1,w,c	;volatile
 19859  003D3A  B4D8               	btfsc	status,2,c
 19860  003D3C  D00A               	goto	i2l10516
 19861                           
 19862                           ; BSR set to: 0
 19863  003D3E  0E02               	movlw	2
 19864  003D40  1873               	xorwf	_timer2_counter,w,c	;volatile
 19865  003D42  1074               	iorwf	_timer2_counter+1,w,c	;volatile
 19866  003D44  A4D8               	btfss	status,2,c
 19867  003D46  D005               	goto	i2l10516
 19868                           
 19869                           ; BSR set to: 0
 19870                           ;interruptHandler.c: 86: LATBbits.LATB3 = 1;
 19871  003D48  868A               	bsf	3978,3,c	;volatile
 19872                           
 19873                           ; BSR set to: 0
 19874                           ;interruptHandler.c: 87: was_low_2 = 0;
 19875  003D4A  0E00               	movlw	0
 19876  003D4C  6E7A               	movwf	_was_low_2+1,c	;volatile
 19877  003D4E  0E00               	movlw	0
 19878  003D50  D008               	goto	L17
 19879  003D52                     i2l10516:
 19880                           
 19881                           ; BSR set to: 0
 19882                           ;interruptHandler.c: 90: else if(!was_low_2){
 19883  003D52  5079               	movf	_was_low_2,w,c	;volatile
 19884  003D54  107A               	iorwf	_was_low_2+1,w,c	;volatile
 19885  003D56  A4D8               	btfss	status,2,c
 19886  003D58  D009               	goto	i2l10522
 19887                           
 19888                           ; BSR set to: 0
 19889                           ;interruptHandler.c: 91: LATBbits.LATB3 = 0;
 19890  003D5A  968A               	bcf	3978,3,c	;volatile
 19891                           
 19892                           ; BSR set to: 0
 19893                           ;interruptHandler.c: 92: was_low_2 = 1;
 19894  003D5C  0E00               	movlw	0
 19895  003D5E  6E7A               	movwf	_was_low_2+1,c	;volatile
 19896  003D60  0E01               	movlw	1
 19897  003D62                     L17:
 19898  003D62  6E79               	movwf	_was_low_2,c	;volatile
 19899                           
 19900                           ;interruptHandler.c: 93: timer2_counter = 0;
 19901  003D64  0E00               	movlw	0
 19902  003D66  6E74               	movwf	_timer2_counter+1,c	;volatile
 19903  003D68  0E00               	movlw	0
 19904  003D6A  6E73               	movwf	_timer2_counter,c	;volatile
 19905  003D6C                     i2l10522:
 19906                           
 19907                           ; BSR set to: 0
 19908                           ;interruptHandler.c: 94: }
 19909                           ;interruptHandler.c: 95: updateArmState();
 19910  003D6C  ECA9  F02C         	call	_updateArmState	;wreg free
 19911                           
 19912                           ;interruptHandler.c: 96: TMR2ON = 1;
 19913  003D70  84CA               	bsf	4042,2,c	;volatile
 19914  003D72                     i2l10526:
 19915                           
 19916                           ;interruptHandler.c: 97: }
 19917                           ;interruptHandler.c: 98: }
 19918                           ;interruptHandler.c: 101: if(TMR3IF){
 19919  003D72  A2A1               	btfss	4001,1,c	;volatile
 19920  003D74  D022               	goto	i2l1082
 19921                           
 19922                           ;interruptHandler.c: 102: TMR3IF = 0;
 19923  003D76  92A1               	bcf	4001,1,c	;volatile
 19924                           
 19925                           ;interruptHandler.c: 103: TMR3ON = 0;
 19926  003D78  90B1               	bcf	4017,0,c	;volatile
 19927                           
 19928                           ;interruptHandler.c: 104: if(machine_state == Sorting_state){
 19929  003D7A  0100               	movlb	0	; () banked
 19930  003D7C  05FC               	decf	_machine_state& (0+255),w,b
 19931  003D7E  A4D8               	btfss	status,2,c
 19932  003D80  D01C               	goto	i2l1082
 19933                           
 19934                           ; BSR set to: 0
 19935                           ;interruptHandler.c: 105: if(was_low_3){
 19936  003D82  507B               	movf	_was_low_3,w,c	;volatile
 19937  003D84  107C               	iorwf	_was_low_3+1,w,c	;volatile
 19938  003D86  B4D8               	btfsc	status,2,c
 19939  003D88  D00A               	goto	i2l1080
 19940                           
 19941                           ; BSR set to: 0
 19942                           ;interruptHandler.c: 106: LATCbits.LATC2 = 1;
 19943  003D8A  848B               	bsf	3979,2,c	;volatile
 19944                           
 19945                           ; BSR set to: 0
 19946                           ;interruptHandler.c: 107: was_low_3 = 0;
 19947  003D8C  0E00               	movlw	0
 19948  003D8E  6E7C               	movwf	_was_low_3+1,c	;volatile
 19949  003D90  0E00               	movlw	0
 19950  003D92  6E7B               	movwf	_was_low_3,c	;volatile
 19951                           
 19952                           ; BSR set to: 0
 19953                           ;interruptHandler.c: 108: TMR3H = servoTimes[2];
 19954  003D94  C05F  FFB3         	movff	_servoTimes+4,4019	;volatile
 19955                           
 19956                           ; BSR set to: 0
 19957                           ;interruptHandler.c: 109: TMR3L = servoTimes[3];
 19958  003D98  C061  FFB2         	movff	_servoTimes+6,4018	;volatile
 19959                           
 19960                           ;interruptHandler.c: 110: }
 19961  003D9C  D00D               	goto	i2l10548
 19962  003D9E                     i2l1080:
 19963                           
 19964                           ; BSR set to: 0
 19965                           ;interruptHandler.c: 111: else{
 19966                           ;interruptHandler.c: 112: LATCbits.LATC2 = 0;
 19967  003D9E  948B               	bcf	3979,2,c	;volatile
 19968                           
 19969                           ; BSR set to: 0
 19970                           ;interruptHandler.c: 113: was_low_3 = 1;
 19971  003DA0  0E00               	movlw	0
 19972  003DA2  6E7C               	movwf	_was_low_3+1,c	;volatile
 19973  003DA4  0E01               	movlw	1
 19974  003DA6  6E7B               	movwf	_was_low_3,c	;volatile
 19975                           
 19976                           ; BSR set to: 0
 19977                           ;interruptHandler.c: 114: TMR3H = 20000 - servoTimes[2];
 19978  003DA8  505F               	movf	_servoTimes+4,w,c
 19979  003DAA  0800               	sublw	0
 19980  003DAC  0F20               	addlw	32
 19981  003DAE  6EB3               	movwf	4019,c	;volatile
 19982                           
 19983                           ; BSR set to: 0
 19984                           ;interruptHandler.c: 115: TMR3L = 20000 - servoTimes[3];
 19985  003DB0  5061               	movf	_servoTimes+6,w,c
 19986  003DB2  0800               	sublw	0
 19987  003DB4  0F20               	addlw	32
 19988  003DB6  6EB2               	movwf	4018,c	;volatile
 19989  003DB8                     i2l10548:
 19990                           
 19991                           ; BSR set to: 0
 19992                           ;interruptHandler.c: 116: }
 19993                           ;interruptHandler.c: 117: TMR3ON = 1;
 19994  003DB8  80B1               	bsf	4017,0,c	;volatile
 19995  003DBA                     i2l1082:
 19996  003DBA  C05A  FFF5         	movff	??_handler+15,tablat
 19997  003DBE  C059  FFF8         	movff	??_handler+14,tblptru
 19998  003DC2  C058  FFF7         	movff	??_handler+13,tblptrh
 19999  003DC6  C057  FFF6         	movff	??_handler+12,tblptrl
 20000  003DCA  C056  FFF4         	movff	??_handler+11,prodh
 20001  003DCE  C055  FFF3         	movff	??_handler+10,prodl
 20002  003DD2  C054  FFDA         	movff	??_handler+9,fsr2h
 20003  003DD6  C053  FFD9         	movff	??_handler+8,fsr2l
 20004  003DDA  C052  FFE2         	movff	??_handler+7,fsr1h
 20005  003DDE  C051  FFE1         	movff	??_handler+6,fsr1l
 20006  003DE2  C050  FFEA         	movff	??_handler+5,fsr0h
 20007  003DE6  C04F  FFE9         	movff	??_handler+4,fsr0l
 20008  003DEA  C04E  FFFB         	movff	??_handler+3,pclatu
 20009  003DEE  C04D  FFFA         	movff	??_handler+2,pclath
 20010  003DF2  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 20011  003DF4  0011               	retfie		f
 20012  003DF6                     __end_of_handler:
 20013                           	opt stack 0
 20014                           pclatu	equ	0xFFB
 20015                           pclath	equ	0xFFA
 20016                           tblptru	equ	0xFF8
 20017                           tblptrh	equ	0xFF7
 20018                           tblptrl	equ	0xFF6
 20019                           tablat	equ	0xFF5
 20020                           prodh	equ	0xFF4
 20021                           prodl	equ	0xFF3
 20022                           intcon	equ	0xFF2
 20023                           intcon2	equ	0xFF1
 20024                           intcon3	equ	0xFF0
 20025                           indf0	equ	0xFEF
 20026                           postinc0	equ	0xFEE
 20027                           fsr0h	equ	0xFEA
 20028                           fsr0l	equ	0xFE9
 20029                           wreg	equ	0xFE8
 20030                           postdec1	equ	0xFE5
 20031                           fsr1h	equ	0xFE2
 20032                           fsr1l	equ	0xFE1
 20033                           indf2	equ	0xFDF
 20034                           postinc2	equ	0xFDE
 20035                           postdec2	equ	0xFDD
 20036                           fsr2h	equ	0xFDA
 20037                           fsr2l	equ	0xFD9
 20038                           status	equ	0xFD8
 20039                           
 20040 ;; *************** function _updateServoStates *****************
 20041 ;; Defined at:
 20042 ;;		line 621 in file "sort.c"
 20043 ;; Parameters:    Size  Location     Type
 20044 ;;		None
 20045 ;; Auto vars:     Size  Location     Type
 20046 ;;		None
 20047 ;; Return value:  Size  Location     Type
 20048 ;;                  1    wreg      void 
 20049 ;; Registers used:
 20050 ;;		wreg, status,2, status,0, cstack
 20051 ;; Tracked objects:
 20052 ;;		On entry : 0/0
 20053 ;;		On exit  : 0/0
 20054 ;;		Unchanged: 0/0
 20055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20056 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20057 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20058 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20059 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20060 ;;Total ram usage:        2 bytes
 20061 ;; Hardware stack levels used:    1
 20062 ;; Hardware stack levels required when called:    1
 20063 ;; This function calls:
 20064 ;;		i2_updateServoPosition
 20065 ;; This function is called by:
 20066 ;;		_handler
 20067 ;; This function uses a non-reentrant model
 20068 ;;
 20069                           
 20070                           	psect	text65
 20071  003DF6                     __ptext65:
 20072                           	opt stack 0
 20073  003DF6                     _updateServoStates:
 20074                           	opt stack 22
 20075                           
 20076                           ;sort.c: 623: if(servo_timer_counter >= servo_timer_target){
 20077                           
 20078                           ;incstack = 0
 20079  003DF6  506F               	movf	_servo_timer_target,w,c	;volatile
 20080  003DF8  5C6D               	subwf	_servo_timer_counter,w,c	;volatile
 20081  003DFA  506E               	movf	_servo_timer_counter+1,w,c	;volatile
 20082  003DFC  0A80               	xorlw	128
 20083  003DFE  6E09               	movwf	??_updateServoStates& (0+255),c
 20084  003E00  5070               	movf	_servo_timer_target+1,w,c	;volatile
 20085  003E02  0A80               	xorlw	128
 20086  003E04  5809               	subwfb	??_updateServoStates& (0+255),w,c
 20087  003E06  A0D8               	btfss	status,0,c
 20088  003E08  0012               	return	
 20089                           
 20090                           ;sort.c: 625: if(f_panning_to_bin){
 20091  003E0A  5069               	movf	_f_panning_to_bin,w,c	;volatile
 20092  003E0C  106A               	iorwf	_f_panning_to_bin+1,w,c	;volatile
 20093  003E0E  A4D8               	btfss	status,2,c
 20094  003E10  D036               	goto	i2l10316
 20095  003E12  D05F               	goto	i2l10320
 20096  003E14                     i2l10290:
 20097                           
 20098                           ;sort.c: 629: updateServoPosition(1260, 3);
 20099  003E14  0E04               	movlw	4
 20100  003E16  6E02               	movwf	i2updateServoPosition@time_us+1,c
 20101  003E18  0EEC               	movlw	236
 20102  003E1A  6E01               	movwf	i2updateServoPosition@time_us,c
 20103  003E1C  0E00               	movlw	0
 20104  003E1E  6E04               	movwf	i2updateServoPosition@timer+1,c
 20105  003E20  0E03               	movlw	3
 20106  003E22  6E03               	movwf	i2updateServoPosition@timer,c
 20107  003E24  EC85  F02A         	call	i2_updateServoPosition	;wreg free
 20108  003E28  D025               	goto	i2l10310
 20109  003E2A                     i2l10294:
 20110                           
 20111                           ;sort.c: 631: servo_timer_target = 700;
 20112  003E2A  0E02               	movlw	2
 20113  003E2C  6E70               	movwf	_servo_timer_target+1,c	;volatile
 20114  003E2E  0EBC               	movlw	188
 20115  003E30  6E6F               	movwf	_servo_timer_target,c	;volatile
 20116                           
 20117                           ;sort.c: 632: break;
 20118  003E32  D04A               	goto	i2l10318
 20119  003E34                     i2l10296:
 20120                           
 20121                           ;sort.c: 634: updateServoPosition(1260, 3);
 20122  003E34  0E04               	movlw	4
 20123  003E36  6E02               	movwf	i2updateServoPosition@time_us+1,c
 20124  003E38  0EEC               	movlw	236
 20125  003E3A  6E01               	movwf	i2updateServoPosition@time_us,c
 20126  003E3C  0E00               	movlw	0
 20127  003E3E  6E04               	movwf	i2updateServoPosition@timer+1,c
 20128  003E40  0E03               	movlw	3
 20129  003E42  6E03               	movwf	i2updateServoPosition@timer,c
 20130  003E44  EC85  F02A         	call	i2_updateServoPosition	;wreg free
 20131  003E48  D015               	goto	i2l10310
 20132  003E4A                     i2l10302:
 20133                           
 20134                           ;sort.c: 640: updateServoPosition(1390, 3);
 20135  003E4A  0E05               	movlw	5
 20136  003E4C  6E02               	movwf	i2updateServoPosition@time_us+1,c
 20137  003E4E  0E6E               	movlw	110
 20138  003E50  6E01               	movwf	i2updateServoPosition@time_us,c
 20139  003E52  0E00               	movlw	0
 20140  003E54  6E04               	movwf	i2updateServoPosition@timer+1,c
 20141  003E56  0E03               	movlw	3
 20142  003E58  6E03               	movwf	i2updateServoPosition@timer,c
 20143  003E5A  EC85  F02A         	call	i2_updateServoPosition	;wreg free
 20144  003E5E  D00A               	goto	i2l10310
 20145  003E60                     i2l10308:
 20146                           
 20147                           ;sort.c: 645: updateServoPosition(1390, 3);
 20148  003E60  0E05               	movlw	5
 20149  003E62  6E02               	movwf	i2updateServoPosition@time_us+1,c
 20150  003E64  0E6E               	movlw	110
 20151  003E66  6E01               	movwf	i2updateServoPosition@time_us,c
 20152  003E68  0E00               	movlw	0
 20153  003E6A  6E04               	movwf	i2updateServoPosition@timer+1,c
 20154  003E6C  0E03               	movlw	3
 20155  003E6E  6E03               	movwf	i2updateServoPosition@timer,c
 20156  003E70  EC85  F02A         	call	i2_updateServoPosition	;wreg free
 20157  003E74                     i2l10310:
 20158                           
 20159                           ;sort.c: 646: servo_timer_counter = 0;
 20160  003E74  0E00               	movlw	0
 20161  003E76  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 20162  003E78  0E00               	movlw	0
 20163  003E7A  6E6D               	movwf	_servo_timer_counter,c	;volatile
 20164  003E7C  D7D6               	goto	i2l10294
 20165  003E7E                     i2l10316:
 20166  003E7E  C06B  F009         	movff	_pan_servo_state,??_updateServoStates	;volatile
 20167  003E82  C06C  F00A         	movff	_pan_servo_state+1,??_updateServoStates+1	;volatile
 20168                           
 20169                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 4 sub-sw
      +                          itches
 20170                           ; Switch size 1, requested type "space"
 20171                           ; Number of cases is 4, Range of values is 1 to 9
 20172                           ; switch strategies available:
 20173                           ; Name         Instructions Cycles
 20174                           ; simple_byte           13     7 (average)
 20175                           ;	Chosen strategy is simple_byte
 20176  003E86  500A               	movf	??_updateServoStates+1,w,c
 20177  003E88  0A01               	xorlw	1	; case 1
 20178  003E8A  B4D8               	btfsc	status,2,c
 20179  003E8C  D00A               	goto	i2l10994
 20180  003E8E  0A02               	xorlw	2	; case 3
 20181  003E90  B4D8               	btfsc	status,2,c
 20182  003E92  D00C               	goto	i2l10996
 20183  003E94  0A05               	xorlw	5	; case 6
 20184  003E96  B4D8               	btfsc	status,2,c
 20185  003E98  D00E               	goto	i2l10998
 20186  003E9A  0A0F               	xorlw	15	; case 9
 20187  003E9C  B4D8               	btfsc	status,2,c
 20188  003E9E  D010               	goto	i2l11000
 20189  003EA0  D013               	goto	i2l10318
 20190  003EA2                     i2l10994:
 20191                           
 20192                           ; Switch size 1, requested type "space"
 20193                           ; Number of cases is 1, Range of values is 244 to 244
 20194                           ; switch strategies available:
 20195                           ; Name         Instructions Cycles
 20196                           ; simple_byte            4     3 (average)
 20197                           ;	Chosen strategy is simple_byte
 20198  003EA2  5009               	movf	??_updateServoStates,w,c
 20199  003EA4  0AF4               	xorlw	244	; case 244
 20200  003EA6  B4D8               	btfsc	status,2,c
 20201  003EA8  D7B5               	goto	i2l10290
 20202  003EAA  D00E               	goto	i2l10318
 20203  003EAC                     i2l10996:
 20204                           
 20205                           ; Switch size 1, requested type "space"
 20206                           ; Number of cases is 1, Range of values is 82 to 82
 20207                           ; switch strategies available:
 20208                           ; Name         Instructions Cycles
 20209                           ; simple_byte            4     3 (average)
 20210                           ;	Chosen strategy is simple_byte
 20211  003EAC  5009               	movf	??_updateServoStates,w,c
 20212  003EAE  0A52               	xorlw	82	; case 82
 20213  003EB0  B4D8               	btfsc	status,2,c
 20214  003EB2  D7C0               	goto	i2l10296
 20215  003EB4  D009               	goto	i2l10318
 20216  003EB6                     i2l10998:
 20217                           
 20218                           ; Switch size 1, requested type "space"
 20219                           ; Number of cases is 1, Range of values is 134 to 134
 20220                           ; switch strategies available:
 20221                           ; Name         Instructions Cycles
 20222                           ; simple_byte            4     3 (average)
 20223                           ;	Chosen strategy is simple_byte
 20224  003EB6  5009               	movf	??_updateServoStates,w,c
 20225  003EB8  0A86               	xorlw	134	; case 134
 20226  003EBA  B4D8               	btfsc	status,2,c
 20227  003EBC  D7C6               	goto	i2l10302
 20228  003EBE  D004               	goto	i2l10318
 20229  003EC0                     i2l11000:
 20230                           
 20231                           ; Switch size 1, requested type "space"
 20232                           ; Number of cases is 1, Range of values is 96 to 96
 20233                           ; switch strategies available:
 20234                           ; Name         Instructions Cycles
 20235                           ; simple_byte            4     3 (average)
 20236                           ;	Chosen strategy is simple_byte
 20237  003EC0  5009               	movf	??_updateServoStates,w,c
 20238  003EC2  0A60               	xorlw	96	; case 96
 20239  003EC4  B4D8               	btfsc	status,2,c
 20240  003EC6  D7CC               	goto	i2l10308
 20241  003EC8                     i2l10318:
 20242                           
 20243                           ;sort.c: 652: f_panning_to_bin = 0;
 20244  003EC8  0E00               	movlw	0
 20245  003ECA  6E6A               	movwf	_f_panning_to_bin+1,c	;volatile
 20246  003ECC  0E00               	movlw	0
 20247  003ECE  6E69               	movwf	_f_panning_to_bin,c	;volatile
 20248                           
 20249                           ;sort.c: 653: }
 20250  003ED0  0012               	return	
 20251  003ED2                     i2l10320:
 20252                           
 20253                           ;sort.c: 654: else if(pan_servo_state == 1200){
 20254  003ED2  0EB0               	movlw	176
 20255  003ED4  186B               	xorwf	_pan_servo_state,w,c	;volatile
 20256  003ED6  E15A               	bnz	i2l10350
 20257  003ED8  0E04               	movlw	4
 20258  003EDA  186C               	xorwf	_pan_servo_state+1,w,c	;volatile
 20259  003EDC  A4D8               	btfss	status,2,c
 20260  003EDE  D056               	goto	i2l10350
 20261                           
 20262                           ;sort.c: 656: servo_timer_counter = 0;
 20263  003EE0  0E00               	movlw	0
 20264  003EE2  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 20265  003EE4  0E00               	movlw	0
 20266  003EE6  6E6D               	movwf	_servo_timer_counter,c	;volatile
 20267                           
 20268                           ;sort.c: 657: }
 20269  003EE8  0012               	return	
 20270  003EEA                     i2l10324:
 20271                           
 20272                           ;sort.c: 662: updateServoPosition(1050, 3);
 20273  003EEA  0E04               	movlw	4
 20274  003EEC  6E02               	movwf	i2updateServoPosition@time_us+1,c
 20275  003EEE  0E1A               	movlw	26
 20276  003EF0  6E01               	movwf	i2updateServoPosition@time_us,c
 20277  003EF2  0E00               	movlw	0
 20278  003EF4  6E04               	movwf	i2updateServoPosition@timer+1,c
 20279  003EF6  0E03               	movlw	3
 20280  003EF8  6E03               	movwf	i2updateServoPosition@timer,c
 20281  003EFA  EC85  F02A         	call	i2_updateServoPosition	;wreg free
 20282                           
 20283                           ;sort.c: 663: servo_timer_counter = 0;
 20284  003EFE  0E00               	movlw	0
 20285  003F00  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 20286  003F02  0E00               	movlw	0
 20287  003F04  6E6D               	movwf	_servo_timer_counter,c	;volatile
 20288                           
 20289                           ;sort.c: 664: servo_timer_target = 750;
 20290  003F06  0E02               	movlw	2
 20291  003F08  6E70               	movwf	_servo_timer_target+1,c	;volatile
 20292  003F0A  0EEE               	movlw	238
 20293  003F0C  6E6F               	movwf	_servo_timer_target,c	;volatile
 20294                           
 20295                           ;sort.c: 665: break;
 20296  003F0E  0012               	return	
 20297  003F10                     i2l10330:
 20298                           
 20299                           ;sort.c: 667: updateServoPosition(1050, 3);
 20300  003F10  0E04               	movlw	4
 20301  003F12  6E02               	movwf	i2updateServoPosition@time_us+1,c
 20302  003F14  0E1A               	movlw	26
 20303  003F16  6E01               	movwf	i2updateServoPosition@time_us,c
 20304  003F18  0E00               	movlw	0
 20305  003F1A  6E04               	movwf	i2updateServoPosition@timer+1,c
 20306  003F1C  0E03               	movlw	3
 20307  003F1E  6E03               	movwf	i2updateServoPosition@timer,c
 20308  003F20  EC85  F02A         	call	i2_updateServoPosition	;wreg free
 20309                           
 20310                           ;sort.c: 668: servo_timer_counter = 0;
 20311  003F24  0E00               	movlw	0
 20312  003F26  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 20313  003F28  0E00               	movlw	0
 20314  003F2A  6E6D               	movwf	_servo_timer_counter,c	;volatile
 20315                           
 20316                           ;sort.c: 669: servo_timer_target = 750;
 20317  003F2C  0E02               	movlw	2
 20318  003F2E  6E70               	movwf	_servo_timer_target+1,c	;volatile
 20319  003F30  0EEE               	movlw	238
 20320  003F32  6E6F               	movwf	_servo_timer_target,c	;volatile
 20321                           
 20322                           ;sort.c: 670: break;
 20323  003F34  0012               	return	
 20324  003F36                     i2l10336:
 20325                           
 20326                           ;sort.c: 673: updateServoPosition(1200, 1);
 20327  003F36  0E04               	movlw	4
 20328  003F38  6E02               	movwf	i2updateServoPosition@time_us+1,c
 20329  003F3A  0EB0               	movlw	176
 20330  003F3C  6E01               	movwf	i2updateServoPosition@time_us,c
 20331  003F3E  0E00               	movlw	0
 20332  003F40  6E04               	movwf	i2updateServoPosition@timer+1,c
 20333  003F42  0E01               	movlw	1
 20334  003F44  6E03               	movwf	i2updateServoPosition@timer,c
 20335  003F46  EC85  F02A         	call	i2_updateServoPosition	;wreg free
 20336                           
 20337                           ;sort.c: 674: updateServoPosition(1050, 3);
 20338  003F4A  0E04               	movlw	4
 20339  003F4C  6E02               	movwf	i2updateServoPosition@time_us+1,c
 20340  003F4E  0E1A               	movlw	26
 20341  003F50  6E01               	movwf	i2updateServoPosition@time_us,c
 20342  003F52  0E00               	movlw	0
 20343  003F54  6E04               	movwf	i2updateServoPosition@timer+1,c
 20344  003F56  0E03               	movlw	3
 20345  003F58  6E03               	movwf	i2updateServoPosition@timer,c
 20346  003F5A  EC85  F02A         	call	i2_updateServoPosition	;wreg free
 20347                           
 20348                           ;sort.c: 675: servo_timer_counter = 0;
 20349  003F5E  0E00               	movlw	0
 20350  003F60  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 20351  003F62  0E00               	movlw	0
 20352  003F64  6E6D               	movwf	_servo_timer_counter,c	;volatile
 20353                           
 20354                           ;sort.c: 676: servo_timer_target = 9999;
 20355  003F66  0E27               	movlw	39
 20356  003F68  6E70               	movwf	_servo_timer_target+1,c	;volatile
 20357  003F6A  0E0F               	movlw	15
 20358  003F6C  6E6F               	movwf	_servo_timer_target,c	;volatile
 20359                           
 20360                           ;sort.c: 678: f_can_distributed = 1;
 20361  003F6E  0E00               	movlw	0
 20362  003F70  0101               	movlb	1	; () banked
 20363  003F72  6F38               	movwf	(_f_can_distributed+1)& (0+255),b
 20364  003F74  0E01               	movlw	1
 20365  003F76  6F37               	movwf	_f_can_distributed& (0+255),b
 20366                           
 20367                           ; BSR set to: 1
 20368                           ;sort.c: 679: if(f_lastCan == 1){
 20369  003F78  0100               	movlb	0	; () banked
 20370  003F7A  05EA               	decf	_f_lastCan& (0+255),w,b
 20371  003F7C  0100               	movlb	0	; () banked
 20372  003F7E  11EB               	iorwf	(_f_lastCan+1)& (0+255),w,b
 20373  003F80  A4D8               	btfss	status,2,c
 20374  003F82  0012               	return	
 20375                           
 20376                           ; BSR set to: 0
 20377                           ;sort.c: 680: machine_state = DoneSorting_state;
 20378  003F84  0E02               	movlw	2
 20379  003F86  0100               	movlb	0	; () banked
 20380  003F88  6FFC               	movwf	_machine_state& (0+255),b
 20381                           
 20382                           ; BSR set to: 0
 20383                           ;sort.c: 686: }
 20384                           
 20385                           ; BSR set to: 0
 20386                           ;sort.c: 685: break;
 20387                           
 20388                           ;sort.c: 684: default:
 20389                           
 20390                           ; BSR set to: 0
 20391                           ;sort.c: 681: }
 20392                           ;sort.c: 682: break;
 20393  003F8A  0012               	return	
 20394  003F8C                     i2l10350:
 20395  003F8C  C071  F009         	movff	_tilt_servo_state,??_updateServoStates	;volatile
 20396  003F90  C072  F00A         	movff	_tilt_servo_state+1,??_updateServoStates+1	;volatile
 20397                           
 20398                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 20399                           ; Switch size 1, requested type "space"
 20400                           ; Number of cases is 2, Range of values is 4 to 5
 20401                           ; switch strategies available:
 20402                           ; Name         Instructions Cycles
 20403                           ; simple_byte            7     4 (average)
 20404                           ;	Chosen strategy is simple_byte
 20405  003F94  500A               	movf	??_updateServoStates+1,w,c
 20406  003F96  0A04               	xorlw	4	; case 4
 20407  003F98  B4D8               	btfsc	status,2,c
 20408  003F9A  D004               	goto	i2l11002
 20409  003F9C  0A01               	xorlw	1	; case 5
 20410  003F9E  A4D8               	btfss	status,2,c
 20411  003FA0  0012               	return	
 20412  003FA2  D008               	goto	i2l11004
 20413  003FA4                     i2l11002:
 20414                           
 20415                           ; Switch size 1, requested type "space"
 20416                           ; Number of cases is 2, Range of values is 26 to 236
 20417                           ; switch strategies available:
 20418                           ; Name         Instructions Cycles
 20419                           ; simple_byte            7     4 (average)
 20420                           ;	Chosen strategy is simple_byte
 20421  003FA4  5009               	movf	??_updateServoStates,w,c
 20422  003FA6  0A1A               	xorlw	26	; case 26
 20423  003FA8  B4D8               	btfsc	status,2,c
 20424  003FAA  D7C5               	goto	i2l10336
 20425  003FAC  0AF6               	xorlw	246	; case 236
 20426  003FAE  A4D8               	btfss	status,2,c
 20427  003FB0  0012               	return	
 20428  003FB2  D79B               	goto	i2l10324
 20429  003FB4                     i2l11004:
 20430                           
 20431                           ; Switch size 1, requested type "space"
 20432                           ; Number of cases is 1, Range of values is 110 to 110
 20433                           ; switch strategies available:
 20434                           ; Name         Instructions Cycles
 20435                           ; simple_byte            4     3 (average)
 20436                           ;	Chosen strategy is simple_byte
 20437  003FB4  5009               	movf	??_updateServoStates,w,c
 20438  003FB6  0A6E               	xorlw	110	; case 110
 20439  003FB8  A4D8               	btfss	status,2,c
 20440  003FBA  0012               	return	
 20441  003FBC  D7A9               	goto	i2l10330
 20442  003FBE                     __end_of_updateServoStates:
 20443                           	opt stack 0
 20444                           pclatu	equ	0xFFB
 20445                           pclath	equ	0xFFA
 20446                           tblptru	equ	0xFF8
 20447                           tblptrh	equ	0xFF7
 20448                           tblptrl	equ	0xFF6
 20449                           tablat	equ	0xFF5
 20450                           prodh	equ	0xFF4
 20451                           prodl	equ	0xFF3
 20452                           intcon	equ	0xFF2
 20453                           intcon2	equ	0xFF1
 20454                           intcon3	equ	0xFF0
 20455                           indf0	equ	0xFEF
 20456                           postinc0	equ	0xFEE
 20457                           fsr0h	equ	0xFEA
 20458                           fsr0l	equ	0xFE9
 20459                           wreg	equ	0xFE8
 20460                           postdec1	equ	0xFE5
 20461                           fsr1h	equ	0xFE2
 20462                           fsr1l	equ	0xFE1
 20463                           indf2	equ	0xFDF
 20464                           postinc2	equ	0xFDE
 20465                           postdec2	equ	0xFDD
 20466                           fsr2h	equ	0xFDA
 20467                           fsr2l	equ	0xFD9
 20468                           status	equ	0xFD8
 20469                           
 20470 ;; *************** function i2_updateServoPosition *****************
 20471 ;; Defined at:
 20472 ;;		line 606 in file "sort.c"
 20473 ;; Parameters:    Size  Location     Type
 20474 ;;  time_us         2    0[COMRAM] int 
 20475 ;;  timer           2    2[COMRAM] int 
 20476 ;; Auto vars:     Size  Location     Type
 20477 ;;  updateServoP    2    6[COMRAM] unsigned int 
 20478 ;; Return value:  Size  Location     Type
 20479 ;;                  1    wreg      void 
 20480 ;; Registers used:
 20481 ;;		wreg, status,2, status,0
 20482 ;; Tracked objects:
 20483 ;;		On entry : 0/0
 20484 ;;		On exit  : 0/0
 20485 ;;		Unchanged: 0/0
 20486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20487 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20488 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20489 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20490 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20491 ;;Total ram usage:        8 bytes
 20492 ;; Hardware stack levels used:    1
 20493 ;; This function calls:
 20494 ;;		Nothing
 20495 ;; This function is called by:
 20496 ;;		_updateServoStates
 20497 ;; This function uses a non-reentrant model
 20498 ;;
 20499                           
 20500                           	psect	text66
 20501  00550A                     __ptext66:
 20502                           	opt stack 0
 20503  00550A                     i2_updateServoPosition:
 20504                           	opt stack 22
 20505                           
 20506                           ;sort.c: 607: unsigned int my_time = 65535 - time_us;
 20507                           
 20508                           ;incstack = 0
 20509  00550A  C001  F005         	movff	i2updateServoPosition@time_us,??i2_updateServoPosition
 20510  00550E  C002  F006         	movff	i2updateServoPosition@time_us+1,??i2_updateServoPosition+1
 20511  005512  1E05               	comf	??i2_updateServoPosition,f,c
 20512  005514  1E06               	comf	??i2_updateServoPosition+1,f,c
 20513  005516  4A05               	infsnz	??i2_updateServoPosition,f,c
 20514  005518  2A06               	incf	??i2_updateServoPosition+1,f,c
 20515  00551A  0EFF               	movlw	255
 20516  00551C  2405               	addwf	??i2_updateServoPosition,w,c
 20517  00551E  6E07               	movwf	i2updateServoPosition@my_time,c
 20518  005520  0EFF               	movlw	255
 20519  005522  2006               	addwfc	??i2_updateServoPosition+1,w,c
 20520  005524  6E08               	movwf	i2updateServoPosition@my_time+1,c
 20521                           
 20522                           ;sort.c: 608: switch(timer){
 20523  005526  D015               	goto	i2l9454
 20524  005528                     i2l9448:
 20525                           
 20526                           ;sort.c: 610: servoTimes[0] = my_time >> 8;
 20527  005528  5008               	movf	i2updateServoPosition@my_time+1,w,c
 20528  00552A  6E5B               	movwf	_servoTimes,c
 20529  00552C  6A5C               	clrf	_servoTimes+1,c
 20530                           
 20531                           ;sort.c: 611: servoTimes[1] = my_time & 0xFF;
 20532  00552E  5007               	movf	i2updateServoPosition@my_time,w,c
 20533  005530  6E5D               	movwf	_servoTimes+2,c
 20534  005532  6A5E               	clrf	_servoTimes+3,c
 20535                           
 20536                           ;sort.c: 613: pan_servo_state = time_us;
 20537  005534  C001  F06B         	movff	i2updateServoPosition@time_us,_pan_servo_state	;volatile
 20538  005538  C002  F06C         	movff	i2updateServoPosition@time_us+1,_pan_servo_state+1	;volatile
 20539  00553C                     i2l952:
 20540                           
 20541                           ;sort.c: 615: servoTimes[2] = my_time >> 8;
 20542  00553C  5008               	movf	i2updateServoPosition@my_time+1,w,c
 20543  00553E  6E5F               	movwf	_servoTimes+4,c
 20544  005540  6A60               	clrf	_servoTimes+5,c
 20545                           
 20546                           ;sort.c: 616: servoTimes[3] = my_time & 0xFF;
 20547  005542  5007               	movf	i2updateServoPosition@my_time,w,c
 20548  005544  6E61               	movwf	_servoTimes+6,c
 20549  005546  6A62               	clrf	_servoTimes+7,c
 20550                           
 20551                           ;sort.c: 618: tilt_servo_state = time_us;
 20552  005548  C001  F071         	movff	i2updateServoPosition@time_us,_tilt_servo_state	;volatile
 20553  00554C  C002  F072         	movff	i2updateServoPosition@time_us+1,_tilt_servo_state+1	;volatile
 20554                           
 20555                           ;sort.c: 619: }
 20556  005550  0012               	return	
 20557  005552                     i2l9454:
 20558  005552  C003  F005         	movff	i2updateServoPosition@timer,??i2_updateServoPosition
 20559  005556  C004  F006         	movff	i2updateServoPosition@timer+1,??i2_updateServoPosition+1
 20560                           
 20561                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 20562                           ; Switch size 1, requested type "space"
 20563                           ; Number of cases is 1, Range of values is 0 to 0
 20564                           ; switch strategies available:
 20565                           ; Name         Instructions Cycles
 20566                           ; simple_byte            4     3 (average)
 20567                           ;	Chosen strategy is simple_byte
 20568  00555A  5006               	movf	??i2_updateServoPosition+1,w,c
 20569  00555C  0A00               	xorlw	0	; case 0
 20570  00555E  A4D8               	btfss	status,2,c
 20571  005560  0012               	return	
 20572                           
 20573                           ; Switch size 1, requested type "space"
 20574                           ; Number of cases is 2, Range of values is 1 to 3
 20575                           ; switch strategies available:
 20576                           ; Name         Instructions Cycles
 20577                           ; simple_byte            7     4 (average)
 20578                           ;	Chosen strategy is simple_byte
 20579  005562  5005               	movf	??i2_updateServoPosition,w,c
 20580  005564  0A01               	xorlw	1	; case 1
 20581  005566  B4D8               	btfsc	status,2,c
 20582  005568  D7DF               	goto	i2l9448
 20583  00556A  0A02               	xorlw	2	; case 3
 20584  00556C  A4D8               	btfss	status,2,c
 20585  00556E  0012               	return	
 20586  005570  D7E5               	goto	i2l952
 20587  005572                     __end_ofi2_updateServoPosition:
 20588                           	opt stack 0
 20589                           pclatu	equ	0xFFB
 20590                           pclath	equ	0xFFA
 20591                           tblptru	equ	0xFF8
 20592                           tblptrh	equ	0xFF7
 20593                           tblptrl	equ	0xFF6
 20594                           tablat	equ	0xFF5
 20595                           prodh	equ	0xFF4
 20596                           prodl	equ	0xFF3
 20597                           intcon	equ	0xFF2
 20598                           intcon2	equ	0xFF1
 20599                           intcon3	equ	0xFF0
 20600                           indf0	equ	0xFEF
 20601                           postinc0	equ	0xFEE
 20602                           fsr0h	equ	0xFEA
 20603                           fsr0l	equ	0xFE9
 20604                           wreg	equ	0xFE8
 20605                           postdec1	equ	0xFE5
 20606                           fsr1h	equ	0xFE2
 20607                           fsr1l	equ	0xFE1
 20608                           indf2	equ	0xFDF
 20609                           postinc2	equ	0xFDE
 20610                           postdec2	equ	0xFDD
 20611                           fsr2h	equ	0xFDA
 20612                           fsr2l	equ	0xFD9
 20613                           status	equ	0xFD8
 20614                           
 20615 ;; *************** function _updateMenu *****************
 20616 ;; Defined at:
 20617 ;;		line 216 in file "UI.c"
 20618 ;; Parameters:    Size  Location     Type
 20619 ;;		None
 20620 ;; Auto vars:     Size  Location     Type
 20621 ;;		None
 20622 ;; Return value:  Size  Location     Type
 20623 ;;                  1    wreg      void 
 20624 ;; Registers used:
 20625 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20626 ;; Tracked objects:
 20627 ;;		On entry : 0/0
 20628 ;;		On exit  : 0/0
 20629 ;;		Unchanged: 0/0
 20630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20631 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20632 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20633 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20634 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20635 ;;Total ram usage:        2 bytes
 20636 ;; Hardware stack levels used:    1
 20637 ;; Hardware stack levels required when called:    5
 20638 ;; This function calls:
 20639 ;;		_change_state_to_logs_11
 20640 ;;		_change_state_to_logs_12
 20641 ;;		_change_state_to_logs_22
 20642 ;;		_change_state_to_logs_23
 20643 ;;		_change_state_to_logs_33
 20644 ;;		_change_state_to_logs_34
 20645 ;;		_change_state_to_menu_11
 20646 ;;		_change_state_to_menu_23
 20647 ;;		_dispLogs
 20648 ;;		_inputHandler
 20649 ;;		i2_change_state_to_menu_12
 20650 ;;		i2_change_state_to_menu_22
 20651 ;;		i2_change_state_to_menu_start
 20652 ;; This function is called by:
 20653 ;;		_handler
 20654 ;; This function uses a non-reentrant model
 20655 ;;
 20656                           
 20657                           	psect	text67
 20658  00352A                     __ptext67:
 20659                           	opt stack 0
 20660  00352A                     _updateMenu:
 20661                           	opt stack 18
 20662                           
 20663                           ;UI.c: 217: up = 0; down = 0; enter = 0; back = 0;
 20664                           
 20665                           ;incstack = 0
 20666  00352A  0E00               	movlw	0
 20667  00352C  6E76               	movwf	_up+1,c
 20668  00352E  0E00               	movlw	0
 20669  003530  6E75               	movwf	_up,c
 20670  003532  0E00               	movlw	0
 20671  003534  6E66               	movwf	_down+1,c
 20672  003536  0E00               	movlw	0
 20673  003538  6E65               	movwf	_down,c
 20674  00353A  0E00               	movlw	0
 20675  00353C  6E68               	movwf	_enter+1,c
 20676  00353E  0E00               	movlw	0
 20677  003540  6E67               	movwf	_enter,c
 20678  003542  0E00               	movlw	0
 20679  003544  6E64               	movwf	_back+1,c
 20680  003546  0E00               	movlw	0
 20681  003548  6E63               	movwf	_back,c
 20682                           
 20683                           ;UI.c: 218: (INTCONbits.GIE = 0);
 20684  00354A  9EF2               	bcf	intcon,7,c	;volatile
 20685                           
 20686                           ;UI.c: 220: if (inputHandler()
 20687                           ;UI.c: 223: ){
 20688  00354C  EC10  F01D         	call	_inputHandler	;wreg free
 20689  003550  502A               	movf	?_inputHandler,w,c
 20690  003552  102B               	iorwf	?_inputHandler+1,w,c
 20691  003554  A4D8               	btfss	status,2,c
 20692  003556  D112               	goto	i2l10024
 20693  003558  D146               	goto	i2l273
 20694  00355A                     i2l9876:
 20695                           
 20696                           ;UI.c: 227: change_state_to_menu_11();
 20697  00355A  ECC6  F02D         	call	_change_state_to_menu_11	;wreg free
 20698                           
 20699                           ;UI.c: 228: break;
 20700  00355E  D143               	goto	i2l273
 20701  003560                     i2l9878:
 20702                           
 20703                           ;UI.c: 231: if(up){
 20704  003560  5075               	movf	_up,w,c
 20705  003562  1076               	iorwf	_up+1,w,c
 20706  003564  B4D8               	btfsc	status,2,c
 20707  003566  D003               	goto	i2l9882
 20708                           
 20709                           ;UI.c: 232: change_state_to_menu_23();
 20710  003568  ECAE  F02D         	call	_change_state_to_menu_23	;wreg free
 20711                           
 20712                           ;UI.c: 233: }
 20713  00356C  D13C               	goto	i2l273
 20714  00356E                     i2l9882:
 20715                           
 20716                           ;UI.c: 234: else if(down){
 20717  00356E  5065               	movf	_down,w,c
 20718  003570  1066               	iorwf	_down+1,w,c
 20719  003572  B4D8               	btfsc	status,2,c
 20720  003574  D003               	goto	i2l9886
 20721                           
 20722                           ;UI.c: 235: change_state_to_menu_12();
 20723  003576  EC96  F02D         	call	i2_change_state_to_menu_12	;wreg free
 20724                           
 20725                           ;UI.c: 236: }
 20726  00357A  D135               	goto	i2l273
 20727  00357C                     i2l9886:
 20728                           
 20729                           ;UI.c: 237: else if(enter){
 20730  00357C  5067               	movf	_enter,w,c
 20731  00357E  1068               	iorwf	_enter+1,w,c
 20732  003580  B4D8               	btfsc	status,2,c
 20733  003582  D131               	goto	i2l273
 20734                           
 20735                           ;UI.c: 238: change_state_to_menu_start();
 20736  003584  ECD9  F02E         	call	i2_change_state_to_menu_start	;wreg free
 20737                           
 20738                           ;UI.c: 239: }
 20739                           ;UI.c: 240: break;
 20740  003588  D12E               	goto	i2l273
 20741  00358A                     i2l9890:
 20742                           
 20743                           ;UI.c: 243: if(up){
 20744  00358A  5075               	movf	_up,w,c
 20745  00358C  1076               	iorwf	_up+1,w,c
 20746  00358E  B4D8               	btfsc	status,2,c
 20747  003590  D003               	goto	i2l9894
 20748                           
 20749                           ;UI.c: 244: change_state_to_menu_11();
 20750  003592  ECC6  F02D         	call	_change_state_to_menu_11	;wreg free
 20751                           
 20752                           ;UI.c: 245: }
 20753  003596  D127               	goto	i2l273
 20754  003598                     i2l9894:
 20755                           
 20756                           ;UI.c: 246: else if(down){
 20757  003598  5065               	movf	_down,w,c
 20758  00359A  1066               	iorwf	_down+1,w,c
 20759  00359C  B4D8               	btfsc	status,2,c
 20760  00359E  D011               	goto	i2l9910
 20761                           
 20762                           ;UI.c: 247: change_state_to_menu_23();
 20763  0035A0  ECAE  F02D         	call	_change_state_to_menu_23	;wreg free
 20764                           
 20765                           ;UI.c: 248: }
 20766  0035A4  D120               	goto	i2l273
 20767  0035A6                     i2l9902:
 20768                           
 20769                           ;UI.c: 255: if(up){
 20770  0035A6  5075               	movf	_up,w,c
 20771  0035A8  1076               	iorwf	_up+1,w,c
 20772  0035AA  B4D8               	btfsc	status,2,c
 20773  0035AC  D003               	goto	i2l9906
 20774                           
 20775                           ;UI.c: 256: change_state_to_menu_11();
 20776  0035AE  ECC6  F02D         	call	_change_state_to_menu_11	;wreg free
 20777                           
 20778                           ;UI.c: 257: }
 20779  0035B2  D119               	goto	i2l273
 20780  0035B4                     i2l9906:
 20781                           
 20782                           ;UI.c: 258: else if(down){
 20783  0035B4  5065               	movf	_down,w,c
 20784  0035B6  1066               	iorwf	_down+1,w,c
 20785  0035B8  B4D8               	btfsc	status,2,c
 20786  0035BA  D003               	goto	i2l9910
 20787                           
 20788                           ;UI.c: 259: change_state_to_menu_23();
 20789  0035BC  ECAE  F02D         	call	_change_state_to_menu_23	;wreg free
 20790                           
 20791                           ;UI.c: 260: }
 20792  0035C0  D112               	goto	i2l273
 20793  0035C2                     i2l9910:
 20794                           
 20795                           ;UI.c: 261: else if(enter){
 20796  0035C2  5067               	movf	_enter,w,c
 20797  0035C4  1068               	iorwf	_enter+1,w,c
 20798  0035C6  B4D8               	btfsc	status,2,c
 20799  0035C8  D10E               	goto	i2l273
 20800                           
 20801                           ;UI.c: 262: machine_state = Sorting_state;
 20802  0035CA  0E01               	movlw	1
 20803  0035CC  0100               	movlb	0	; () banked
 20804  0035CE  6FFC               	movwf	_machine_state& (0+255),b
 20805                           
 20806                           ; BSR set to: 0
 20807                           ;UI.c: 263: }
 20808                           ;UI.c: 264: break;
 20809                           
 20810                           ; BSR set to: 0
 20811                           
 20812                           ; BSR set to: 0
 20813  0035D0  D10A               	goto	i2l273
 20814  0035D2                     i2l9914:
 20815                           
 20816                           ;UI.c: 267: if(up){
 20817  0035D2  5075               	movf	_up,w,c
 20818  0035D4  1076               	iorwf	_up+1,w,c
 20819  0035D6  B4D8               	btfsc	status,2,c
 20820  0035D8  D003               	goto	i2l9918
 20821                           
 20822                           ;UI.c: 268: change_state_to_menu_22();
 20823  0035DA  EC7E  F02D         	call	i2_change_state_to_menu_22	;wreg free
 20824                           
 20825                           ;UI.c: 269: }
 20826  0035DE  D103               	goto	i2l273
 20827  0035E0                     i2l9918:
 20828                           
 20829                           ;UI.c: 270: else if(down){
 20830  0035E0  5065               	movf	_down,w,c
 20831  0035E2  1066               	iorwf	_down+1,w,c
 20832  0035E4  B4D8               	btfsc	status,2,c
 20833  0035E6  D003               	goto	i2l9922
 20834                           
 20835                           ;UI.c: 271: change_state_to_menu_11();
 20836  0035E8  ECC6  F02D         	call	_change_state_to_menu_11	;wreg free
 20837                           
 20838                           ;UI.c: 272: }
 20839  0035EC  D0FC               	goto	i2l273
 20840  0035EE                     i2l9922:
 20841                           
 20842                           ;UI.c: 273: else if(enter){
 20843  0035EE  5067               	movf	_enter,w,c
 20844  0035F0  1068               	iorwf	_enter+1,w,c
 20845  0035F2  B4D8               	btfsc	status,2,c
 20846  0035F4  D0F8               	goto	i2l273
 20847                           
 20848                           ;UI.c: 274: change_state_to_logs_11();
 20849  0035F6  EC3E  F02E         	call	_change_state_to_logs_11	;wreg free
 20850                           
 20851                           ;UI.c: 275: }
 20852                           ;UI.c: 276: break;
 20853  0035FA  D0F5               	goto	i2l273
 20854  0035FC                     i2l9926:
 20855                           
 20856                           ;UI.c: 279: if(up){
 20857  0035FC  5075               	movf	_up,w,c
 20858  0035FE  1076               	iorwf	_up+1,w,c
 20859  003600  B4D8               	btfsc	status,2,c
 20860  003602  D003               	goto	i2l9930
 20861                           
 20862                           ;UI.c: 280: change_state_to_logs_34();
 20863  003604  ECDE  F02D         	call	_change_state_to_logs_34	;wreg free
 20864                           
 20865                           ;UI.c: 281: }
 20866  003608  D0EE               	goto	i2l273
 20867  00360A                     i2l9930:
 20868                           
 20869                           ;UI.c: 282: else if(down){
 20870  00360A  5065               	movf	_down,w,c
 20871  00360C  1066               	iorwf	_down+1,w,c
 20872  00360E  B4D8               	btfsc	status,2,c
 20873  003610  D003               	goto	i2l9934
 20874                           
 20875                           ;UI.c: 283: change_state_to_logs_12();
 20876  003612  EC26  F02E         	call	_change_state_to_logs_12	;wreg free
 20877                           
 20878                           ;UI.c: 284: }
 20879  003616  D0E7               	goto	i2l273
 20880  003618                     i2l9934:
 20881                           
 20882                           ;UI.c: 285: else if(enter){
 20883  003618  5067               	movf	_enter,w,c
 20884  00361A  1068               	iorwf	_enter+1,w,c
 20885  00361C  B4D8               	btfsc	status,2,c
 20886  00361E  D007               	goto	i2l9938
 20887                           
 20888                           ;UI.c: 286: dispLogs(1);
 20889  003620  0E00               	movlw	0
 20890  003622  6E13               	movwf	dispLogs@myLog+1,c
 20891  003624  0E01               	movlw	1
 20892  003626  6E12               	movwf	dispLogs@myLog,c
 20893  003628  EC13  F02F         	call	_dispLogs	;wreg free
 20894                           
 20895                           ;UI.c: 287: }
 20896  00362C  D0DC               	goto	i2l273
 20897  00362E                     i2l9938:
 20898                           
 20899                           ;UI.c: 288: else if(back){
 20900  00362E  5063               	movf	_back,w,c
 20901  003630  1064               	iorwf	_back+1,w,c
 20902  003632  B4D8               	btfsc	status,2,c
 20903  003634  D0D8               	goto	i2l273
 20904                           
 20905                           ;UI.c: 289: change_state_to_menu_23();
 20906  003636  ECAE  F02D         	call	_change_state_to_menu_23	;wreg free
 20907                           
 20908                           ;UI.c: 290: }
 20909                           ;UI.c: 291: break;
 20910  00363A  D0D5               	goto	i2l273
 20911  00363C                     i2l9942:
 20912                           
 20913                           ;UI.c: 294: if(up){
 20914  00363C  5075               	movf	_up,w,c
 20915  00363E  1076               	iorwf	_up+1,w,c
 20916  003640  B4D8               	btfsc	status,2,c
 20917  003642  D003               	goto	i2l9946
 20918                           
 20919                           ;UI.c: 295: change_state_to_logs_11();
 20920  003644  EC3E  F02E         	call	_change_state_to_logs_11	;wreg free
 20921                           
 20922                           ;UI.c: 296: }
 20923  003648  D0CE               	goto	i2l273
 20924  00364A                     i2l9946:
 20925                           
 20926                           ;UI.c: 297: else if(down){
 20927  00364A  5065               	movf	_down,w,c
 20928  00364C  1066               	iorwf	_down+1,w,c
 20929  00364E  B4D8               	btfsc	status,2,c
 20930  003650  D003               	goto	i2l9950
 20931                           
 20932                           ;UI.c: 298: change_state_to_logs_23();
 20933  003652  EC6D  F02E         	call	_change_state_to_logs_23	;wreg free
 20934                           
 20935                           ;UI.c: 299: }
 20936  003656  D0C7               	goto	i2l273
 20937  003658                     i2l9950:
 20938                           
 20939                           ;UI.c: 300: else if(enter){
 20940  003658  5067               	movf	_enter,w,c
 20941  00365A  1068               	iorwf	_enter+1,w,c
 20942  00365C  B4D8               	btfsc	status,2,c
 20943  00365E  D007               	goto	i2l9954
 20944                           
 20945                           ;UI.c: 301: dispLogs(2);
 20946  003660  0E00               	movlw	0
 20947  003662  6E13               	movwf	dispLogs@myLog+1,c
 20948  003664  0E02               	movlw	2
 20949  003666  6E12               	movwf	dispLogs@myLog,c
 20950  003668  EC13  F02F         	call	_dispLogs	;wreg free
 20951                           
 20952                           ;UI.c: 302: }
 20953  00366C  D0BC               	goto	i2l273
 20954  00366E                     i2l9954:
 20955                           
 20956                           ;UI.c: 303: else if(back){
 20957  00366E  5063               	movf	_back,w,c
 20958  003670  1064               	iorwf	_back+1,w,c
 20959  003672  B4D8               	btfsc	status,2,c
 20960  003674  D0B8               	goto	i2l273
 20961                           
 20962                           ;UI.c: 304: change_state_to_menu_23();
 20963  003676  ECAE  F02D         	call	_change_state_to_menu_23	;wreg free
 20964                           
 20965                           ;UI.c: 305: }
 20966                           ;UI.c: 306: break;
 20967  00367A  D0B5               	goto	i2l273
 20968  00367C                     i2l9958:
 20969                           
 20970                           ;UI.c: 309: if(up){
 20971  00367C  5075               	movf	_up,w,c
 20972  00367E  1076               	iorwf	_up+1,w,c
 20973  003680  B4D8               	btfsc	status,2,c
 20974  003682  D003               	goto	i2l9962
 20975                           
 20976                           ;UI.c: 310: change_state_to_logs_11();
 20977  003684  EC3E  F02E         	call	_change_state_to_logs_11	;wreg free
 20978                           
 20979                           ;UI.c: 311: }
 20980  003688  D0AE               	goto	i2l273
 20981  00368A                     i2l9962:
 20982                           
 20983                           ;UI.c: 312: else if(down){
 20984  00368A  5065               	movf	_down,w,c
 20985  00368C  1066               	iorwf	_down+1,w,c
 20986  00368E  B4D8               	btfsc	status,2,c
 20987  003690  D003               	goto	i2l9966
 20988                           
 20989                           ;UI.c: 313: change_state_to_logs_23();
 20990  003692  EC6D  F02E         	call	_change_state_to_logs_23	;wreg free
 20991                           
 20992                           ;UI.c: 314: }
 20993  003696  D0A7               	goto	i2l273
 20994  003698                     i2l9966:
 20995                           
 20996                           ;UI.c: 315: else if(enter){
 20997  003698  5067               	movf	_enter,w,c
 20998  00369A  1068               	iorwf	_enter+1,w,c
 20999  00369C  B4D8               	btfsc	status,2,c
 21000  00369E  D007               	goto	i2l9970
 21001                           
 21002                           ;UI.c: 316: dispLogs(2);
 21003  0036A0  0E00               	movlw	0
 21004  0036A2  6E13               	movwf	dispLogs@myLog+1,c
 21005  0036A4  0E02               	movlw	2
 21006  0036A6  6E12               	movwf	dispLogs@myLog,c
 21007  0036A8  EC13  F02F         	call	_dispLogs	;wreg free
 21008                           
 21009                           ;UI.c: 317: }
 21010  0036AC  D09C               	goto	i2l273
 21011  0036AE                     i2l9970:
 21012                           
 21013                           ;UI.c: 318: else if(back){
 21014  0036AE  5063               	movf	_back,w,c
 21015  0036B0  1064               	iorwf	_back+1,w,c
 21016  0036B2  B4D8               	btfsc	status,2,c
 21017  0036B4  D098               	goto	i2l273
 21018                           
 21019                           ;UI.c: 319: change_state_to_menu_23();
 21020  0036B6  ECAE  F02D         	call	_change_state_to_menu_23	;wreg free
 21021                           
 21022                           ;UI.c: 320: }
 21023                           ;UI.c: 321: break;
 21024  0036BA  D095               	goto	i2l273
 21025  0036BC                     i2l9974:
 21026                           
 21027                           ;UI.c: 324: if(up){
 21028  0036BC  5075               	movf	_up,w,c
 21029  0036BE  1076               	iorwf	_up+1,w,c
 21030  0036C0  B4D8               	btfsc	status,2,c
 21031  0036C2  D003               	goto	i2l9978
 21032                           
 21033                           ;UI.c: 325: change_state_to_logs_22();
 21034  0036C4  EC0E  F02E         	call	_change_state_to_logs_22	;wreg free
 21035                           
 21036                           ;UI.c: 326: }
 21037  0036C8  D08E               	goto	i2l273
 21038  0036CA                     i2l9978:
 21039                           
 21040                           ;UI.c: 327: else if(down){
 21041  0036CA  5065               	movf	_down,w,c
 21042  0036CC  1066               	iorwf	_down+1,w,c
 21043  0036CE  B4D8               	btfsc	status,2,c
 21044  0036D0  D003               	goto	i2l9982
 21045                           
 21046                           ;UI.c: 328: change_state_to_logs_34();
 21047  0036D2  ECDE  F02D         	call	_change_state_to_logs_34	;wreg free
 21048                           
 21049                           ;UI.c: 329: }
 21050  0036D6  D087               	goto	i2l273
 21051  0036D8                     i2l9982:
 21052                           
 21053                           ;UI.c: 330: else if(enter){
 21054  0036D8  5067               	movf	_enter,w,c
 21055  0036DA  1068               	iorwf	_enter+1,w,c
 21056  0036DC  B4D8               	btfsc	status,2,c
 21057  0036DE  D007               	goto	i2l9986
 21058                           
 21059                           ;UI.c: 331: dispLogs(3);
 21060  0036E0  0E00               	movlw	0
 21061  0036E2  6E13               	movwf	dispLogs@myLog+1,c
 21062  0036E4  0E03               	movlw	3
 21063  0036E6  6E12               	movwf	dispLogs@myLog,c
 21064  0036E8  EC13  F02F         	call	_dispLogs	;wreg free
 21065                           
 21066                           ;UI.c: 332: }
 21067  0036EC  D07C               	goto	i2l273
 21068  0036EE                     i2l9986:
 21069                           
 21070                           ;UI.c: 333: else if(back){
 21071  0036EE  5063               	movf	_back,w,c
 21072  0036F0  1064               	iorwf	_back+1,w,c
 21073  0036F2  B4D8               	btfsc	status,2,c
 21074  0036F4  D078               	goto	i2l273
 21075                           
 21076                           ;UI.c: 334: change_state_to_menu_23();
 21077  0036F6  ECAE  F02D         	call	_change_state_to_menu_23	;wreg free
 21078                           
 21079                           ;UI.c: 335: }
 21080                           ;UI.c: 336: break;
 21081  0036FA  D075               	goto	i2l273
 21082  0036FC                     i2l9990:
 21083                           
 21084                           ;UI.c: 339: if(up){
 21085  0036FC  5075               	movf	_up,w,c
 21086  0036FE  1076               	iorwf	_up+1,w,c
 21087  003700  B4D8               	btfsc	status,2,c
 21088  003702  D003               	goto	i2l9994
 21089                           
 21090                           ;UI.c: 340: change_state_to_logs_22();
 21091  003704  EC0E  F02E         	call	_change_state_to_logs_22	;wreg free
 21092                           
 21093                           ;UI.c: 341: }
 21094  003708  D06E               	goto	i2l273
 21095  00370A                     i2l9994:
 21096                           
 21097                           ;UI.c: 342: else if(down){
 21098  00370A  5065               	movf	_down,w,c
 21099  00370C  1066               	iorwf	_down+1,w,c
 21100  00370E  B4D8               	btfsc	status,2,c
 21101  003710  D003               	goto	i2l9998
 21102                           
 21103                           ;UI.c: 343: change_state_to_logs_34();
 21104  003712  ECDE  F02D         	call	_change_state_to_logs_34	;wreg free
 21105                           
 21106                           ;UI.c: 344: }
 21107  003716  D067               	goto	i2l273
 21108  003718                     i2l9998:
 21109                           
 21110                           ;UI.c: 345: else if(enter){
 21111  003718  5067               	movf	_enter,w,c
 21112  00371A  1068               	iorwf	_enter+1,w,c
 21113  00371C  B4D8               	btfsc	status,2,c
 21114  00371E  D007               	goto	i2l10002
 21115                           
 21116                           ;UI.c: 346: dispLogs(3);
 21117  003720  0E00               	movlw	0
 21118  003722  6E13               	movwf	dispLogs@myLog+1,c
 21119  003724  0E03               	movlw	3
 21120  003726  6E12               	movwf	dispLogs@myLog,c
 21121  003728  EC13  F02F         	call	_dispLogs	;wreg free
 21122                           
 21123                           ;UI.c: 347: }
 21124  00372C  D05C               	goto	i2l273
 21125  00372E                     i2l10002:
 21126                           
 21127                           ;UI.c: 348: else if(back){
 21128  00372E  5063               	movf	_back,w,c
 21129  003730  1064               	iorwf	_back+1,w,c
 21130  003732  B4D8               	btfsc	status,2,c
 21131  003734  D058               	goto	i2l273
 21132                           
 21133                           ;UI.c: 349: change_state_to_menu_23();
 21134  003736  ECAE  F02D         	call	_change_state_to_menu_23	;wreg free
 21135                           
 21136                           ;UI.c: 350: }
 21137                           ;UI.c: 351: break;
 21138  00373A  D055               	goto	i2l273
 21139  00373C                     i2l10006:
 21140                           
 21141                           ;UI.c: 354: if(up){
 21142  00373C  5075               	movf	_up,w,c
 21143  00373E  1076               	iorwf	_up+1,w,c
 21144  003740  B4D8               	btfsc	status,2,c
 21145  003742  D003               	goto	i2l10010
 21146                           
 21147                           ;UI.c: 355: change_state_to_logs_33();
 21148  003744  ECF6  F02D         	call	_change_state_to_logs_33	;wreg free
 21149                           
 21150                           ;UI.c: 356: }
 21151  003748  D04E               	goto	i2l273
 21152  00374A                     i2l10010:
 21153                           
 21154                           ;UI.c: 357: else if(down){
 21155  00374A  5065               	movf	_down,w,c
 21156  00374C  1066               	iorwf	_down+1,w,c
 21157  00374E  B4D8               	btfsc	status,2,c
 21158  003750  D003               	goto	i2l10014
 21159                           
 21160                           ;UI.c: 358: change_state_to_logs_11();
 21161  003752  EC3E  F02E         	call	_change_state_to_logs_11	;wreg free
 21162                           
 21163                           ;UI.c: 359: }
 21164  003756  D047               	goto	i2l273
 21165  003758                     i2l10014:
 21166                           
 21167                           ;UI.c: 360: else if(enter){
 21168  003758  5067               	movf	_enter,w,c
 21169  00375A  1068               	iorwf	_enter+1,w,c
 21170  00375C  B4D8               	btfsc	status,2,c
 21171  00375E  D007               	goto	i2l10018
 21172                           
 21173                           ;UI.c: 361: dispLogs(4);
 21174  003760  0E00               	movlw	0
 21175  003762  6E13               	movwf	dispLogs@myLog+1,c
 21176  003764  0E04               	movlw	4
 21177  003766  6E12               	movwf	dispLogs@myLog,c
 21178  003768  EC13  F02F         	call	_dispLogs	;wreg free
 21179                           
 21180                           ;UI.c: 362: }
 21181  00376C  D03C               	goto	i2l273
 21182  00376E                     i2l10018:
 21183                           
 21184                           ;UI.c: 363: else if(back){
 21185  00376E  5063               	movf	_back,w,c
 21186  003770  1064               	iorwf	_back+1,w,c
 21187  003772  B4D8               	btfsc	status,2,c
 21188  003774  D038               	goto	i2l273
 21189                           
 21190                           ;UI.c: 364: change_state_to_menu_23();
 21191  003776  ECAE  F02D         	call	_change_state_to_menu_23	;wreg free
 21192                           
 21193                           ;UI.c: 370: }
 21194                           
 21195                           ;UI.c: 369: break;
 21196                           
 21197                           ;UI.c: 368: default:
 21198                           
 21199                           ;UI.c: 365: }
 21200                           ;UI.c: 366: break;
 21201  00377A  D035               	goto	i2l273
 21202  00377C                     i2l10024:
 21203  00377C  C0E6  F043         	movff	_cur_state,??_updateMenu
 21204  003780  C0E7  F044         	movff	_cur_state+1,??_updateMenu+1
 21205                           
 21206                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
 21207                           ; Switch size 1, requested type "space"
 21208                           ; Number of cases is 3, Range of values is 0 to 4
 21209                           ; switch strategies available:
 21210                           ; Name         Instructions Cycles
 21211                           ; simple_byte           10     6 (average)
 21212                           ;	Chosen strategy is simple_byte
 21213  003784  5044               	movf	??_updateMenu+1,w,c
 21214  003786  0A00               	xorlw	0	; case 0
 21215  003788  B4D8               	btfsc	status,2,c
 21216  00378A  D007               	goto	i2l11008
 21217  00378C  0A03               	xorlw	3	; case 3
 21218  00378E  B4D8               	btfsc	status,2,c
 21219  003790  D015               	goto	i2l11010
 21220  003792  0A07               	xorlw	7	; case 4
 21221  003794  B4D8               	btfsc	status,2,c
 21222  003796  D020               	goto	i2l11012
 21223  003798  D026               	goto	i2l273
 21224  00379A                     i2l11008:
 21225                           
 21226                           ; Switch size 1, requested type "space"
 21227                           ; Number of cases is 5, Range of values is 0 to 23
 21228                           ; switch strategies available:
 21229                           ; Name         Instructions Cycles
 21230                           ; simple_byte           16     9 (average)
 21231                           ;	Chosen strategy is simple_byte
 21232  00379A  5043               	movf	??_updateMenu,w,c
 21233  00379C  0A00               	xorlw	0	; case 0
 21234  00379E  B4D8               	btfsc	status,2,c
 21235  0037A0  D6DC               	goto	i2l9876
 21236  0037A2  0A0B               	xorlw	11	; case 11
 21237  0037A4  B4D8               	btfsc	status,2,c
 21238  0037A6  D6DC               	goto	i2l9878
 21239  0037A8  0A07               	xorlw	7	; case 12
 21240  0037AA  B4D8               	btfsc	status,2,c
 21241  0037AC  D6EE               	goto	i2l9890
 21242  0037AE  0A1A               	xorlw	26	; case 22
 21243  0037B0  B4D8               	btfsc	status,2,c
 21244  0037B2  D6F9               	goto	i2l9902
 21245  0037B4  0A01               	xorlw	1	; case 23
 21246  0037B6  B4D8               	btfsc	status,2,c
 21247  0037B8  D70C               	goto	i2l9914
 21248  0037BA  D015               	goto	i2l273
 21249  0037BC                     i2l11010:
 21250                           
 21251                           ; Switch size 1, requested type "space"
 21252                           ; Number of cases is 4, Range of values is 243 to 255
 21253                           ; switch strategies available:
 21254                           ; Name         Instructions Cycles
 21255                           ; simple_byte           13     7 (average)
 21256                           ;	Chosen strategy is simple_byte
 21257  0037BC  5043               	movf	??_updateMenu,w,c
 21258  0037BE  0AF3               	xorlw	243	; case 243
 21259  0037C0  B4D8               	btfsc	status,2,c
 21260  0037C2  D71C               	goto	i2l9926
 21261  0037C4  0A07               	xorlw	7	; case 244
 21262  0037C6  B4D8               	btfsc	status,2,c
 21263  0037C8  D739               	goto	i2l9942
 21264  0037CA  0A0A               	xorlw	10	; case 254
 21265  0037CC  B4D8               	btfsc	status,2,c
 21266  0037CE  D756               	goto	i2l9958
 21267  0037D0  0A01               	xorlw	1	; case 255
 21268  0037D2  B4D8               	btfsc	status,2,c
 21269  0037D4  D773               	goto	i2l9974
 21270  0037D6  D007               	goto	i2l273
 21271  0037D8                     i2l11012:
 21272                           
 21273                           ; Switch size 1, requested type "space"
 21274                           ; Number of cases is 2, Range of values is 9 to 10
 21275                           ; switch strategies available:
 21276                           ; Name         Instructions Cycles
 21277                           ; simple_byte            7     4 (average)
 21278                           ;	Chosen strategy is simple_byte
 21279  0037D8  5043               	movf	??_updateMenu,w,c
 21280  0037DA  0A09               	xorlw	9	; case 9
 21281  0037DC  B4D8               	btfsc	status,2,c
 21282  0037DE  D78E               	goto	i2l9990
 21283  0037E0  0A03               	xorlw	3	; case 10
 21284  0037E2  B4D8               	btfsc	status,2,c
 21285  0037E4  D7AB               	goto	i2l10006
 21286  0037E6                     i2l273:
 21287                           
 21288                           ;UI.c: 371: }
 21289                           ;UI.c: 372: (INTCONbits.GIE = 1);
 21290  0037E6  8EF2               	bsf	intcon,7,c	;volatile
 21291  0037E8  0012               	return		;funcret
 21292  0037EA                     __end_of_updateMenu:
 21293                           	opt stack 0
 21294                           pclatu	equ	0xFFB
 21295                           pclath	equ	0xFFA
 21296                           tblptru	equ	0xFF8
 21297                           tblptrh	equ	0xFF7
 21298                           tblptrl	equ	0xFF6
 21299                           tablat	equ	0xFF5
 21300                           prodh	equ	0xFF4
 21301                           prodl	equ	0xFF3
 21302                           intcon	equ	0xFF2
 21303                           intcon2	equ	0xFF1
 21304                           intcon3	equ	0xFF0
 21305                           indf0	equ	0xFEF
 21306                           postinc0	equ	0xFEE
 21307                           fsr0h	equ	0xFEA
 21308                           fsr0l	equ	0xFE9
 21309                           wreg	equ	0xFE8
 21310                           postdec1	equ	0xFE5
 21311                           fsr1h	equ	0xFE2
 21312                           fsr1l	equ	0xFE1
 21313                           indf2	equ	0xFDF
 21314                           postinc2	equ	0xFDE
 21315                           postdec2	equ	0xFDD
 21316                           fsr2h	equ	0xFDA
 21317                           fsr2l	equ	0xFD9
 21318                           status	equ	0xFD8
 21319                           
 21320 ;; *************** function i2_change_state_to_menu_start *****************
 21321 ;; Defined at:
 21322 ;;		line 477 in file "UI.c"
 21323 ;; Parameters:    Size  Location     Type
 21324 ;;		None
 21325 ;; Auto vars:     Size  Location     Type
 21326 ;;		None
 21327 ;; Return value:  Size  Location     Type
 21328 ;;                  1    wreg      void 
 21329 ;; Registers used:
 21330 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21331 ;; Tracked objects:
 21332 ;;		On entry : 0/0
 21333 ;;		On exit  : 0/0
 21334 ;;		Unchanged: 0/0
 21335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21336 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21337 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21338 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21339 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21340 ;;Total ram usage:        0 bytes
 21341 ;; Hardware stack levels used:    1
 21342 ;; Hardware stack levels required when called:    4
 21343 ;; This function calls:
 21344 ;;		i2_lcdInst
 21345 ;;		i2_printRTC
 21346 ;;		i2_printf
 21347 ;; This function is called by:
 21348 ;;		_updateMenu
 21349 ;;		_handler
 21350 ;; This function uses a non-reentrant model
 21351 ;;
 21352                           
 21353                           	psect	text68
 21354  005DB2                     __ptext68:
 21355                           	opt stack 0
 21356  005DB2                     i2_change_state_to_menu_start:
 21357                           	opt stack 19
 21358                           
 21359                           ;UI.c: 478: cur_state = 0;
 21360                           
 21361                           ;incstack = 0
 21362  005DB2  0E00               	movlw	0
 21363  005DB4  0100               	movlb	0	; () banked
 21364  005DB6  6FE7               	movwf	(_cur_state+1)& (0+255),b
 21365  005DB8  0E00               	movlw	0
 21366  005DBA  6FE6               	movwf	_cur_state& (0+255),b
 21367                           
 21368                           ; BSR set to: 0
 21369                           ;UI.c: 480: lcdInst(0b10000000);;
 21370  005DBC  0E80               	movlw	128
 21371  005DBE  ECBD  F02F         	call	i2_lcdInst
 21372                           
 21373                           ;UI.c: 481: printRTC();
 21374  005DC2  ECF5  F01B         	call	i2_printRTC	;wreg free
 21375                           
 21376                           ;UI.c: 482: lcdInst(0b11000000);;
 21377  005DC6  0EC0               	movlw	192
 21378  005DC8  ECBD  F02F         	call	i2_lcdInst
 21379                           
 21380                           ;UI.c: 483: printf("PUSH TO CONTINUE");
 21381  005DCC  0E06               	movlw	low STR_30
 21382  005DCE  6E0D               	movwf	i2printf@f,c
 21383  005DD0  0EFE               	movlw	high STR_30
 21384  005DD2  6E0E               	movwf	i2printf@f+1,c
 21385  005DD4  EC4B  F014         	call	i2_printf	;wreg free
 21386  005DD8  0012               	return		;funcret
 21387  005DDA                     __end_ofi2_change_state_to_menu_start:
 21388                           	opt stack 0
 21389                           pclatu	equ	0xFFB
 21390                           pclath	equ	0xFFA
 21391                           tblptru	equ	0xFF8
 21392                           tblptrh	equ	0xFF7
 21393                           tblptrl	equ	0xFF6
 21394                           tablat	equ	0xFF5
 21395                           prodh	equ	0xFF4
 21396                           prodl	equ	0xFF3
 21397                           intcon	equ	0xFF2
 21398                           intcon2	equ	0xFF1
 21399                           intcon3	equ	0xFF0
 21400                           indf0	equ	0xFEF
 21401                           postinc0	equ	0xFEE
 21402                           fsr0h	equ	0xFEA
 21403                           fsr0l	equ	0xFE9
 21404                           wreg	equ	0xFE8
 21405                           postdec1	equ	0xFE5
 21406                           fsr1h	equ	0xFE2
 21407                           fsr1l	equ	0xFE1
 21408                           indf2	equ	0xFDF
 21409                           postinc2	equ	0xFDE
 21410                           postdec2	equ	0xFDD
 21411                           fsr2h	equ	0xFDA
 21412                           fsr2l	equ	0xFD9
 21413                           status	equ	0xFD8
 21414                           
 21415 ;; *************** function i2_printRTC *****************
 21416 ;; Defined at:
 21417 ;;		line 63 in file "RTC.c"
 21418 ;; Parameters:    Size  Location     Type
 21419 ;;		None
 21420 ;; Auto vars:     Size  Location     Type
 21421 ;;  printRTC       14   44[COMRAM] int [7]
 21422 ;;  printRTC        4   60[COMRAM] unsigned char [4]
 21423 ;;  printRTC        2   64[COMRAM] int 
 21424 ;;  printRTC        2   58[COMRAM] int 
 21425 ;; Return value:  Size  Location     Type
 21426 ;;                  1    wreg      void 
 21427 ;; Registers used:
 21428 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21429 ;; Tracked objects:
 21430 ;;		On entry : 0/0
 21431 ;;		On exit  : 0/0
 21432 ;;		Unchanged: 0/0
 21433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21434 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21435 ;;      Locals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21436 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21437 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21438 ;;Total ram usage:       25 bytes
 21439 ;; Hardware stack levels used:    1
 21440 ;; Hardware stack levels required when called:    3
 21441 ;; This function calls:
 21442 ;;		i2_getRTC
 21443 ;;		i2_lcdInst
 21444 ;;		i2_printf
 21445 ;;		i2_strcpy
 21446 ;; This function is called by:
 21447 ;;		i2_change_state_to_menu_start
 21448 ;; This function uses a non-reentrant model
 21449 ;;
 21450                           
 21451                           	psect	text69
 21452  0037EA                     __ptext69:
 21453                           	opt stack 0
 21454  0037EA                     i2_printRTC:
 21455                           	opt stack 19
 21456                           
 21457                           ;RTC.c: 64: getRTC();
 21458                           
 21459                           ;incstack = 0
 21460  0037EA  ECDE  F029         	call	i2_getRTC	;wreg free
 21461                           
 21462                           ;RTC.c: 65: char month[] = "MMM";
 21463  0037EE  C151  F03D         	movff	printRTC@F3240,i2printRTC@month
 21464  0037F2  C152  F03E         	movff	printRTC@F3240+1,i2printRTC@month+1
 21465  0037F6  C153  F03F         	movff	printRTC@F3240+2,i2printRTC@month+2
 21466  0037FA  C154  F040         	movff	printRTC@F3240+3,i2printRTC@month+3
 21467                           
 21468                           ;RTC.c: 66: int INT_time[7];
 21469                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
 21470  0037FE  0E00               	movlw	0
 21471  003800  6E42               	movwf	i2printRTC@i+1,c
 21472  003802  0E00               	movlw	0
 21473  003804  6E41               	movwf	i2printRTC@i,c
 21474  003806  BE42               	btfsc	i2printRTC@i+1,7,c
 21475  003808  D006               	goto	i2l7726
 21476  00380A  5042               	movf	i2printRTC@i+1,w,c
 21477  00380C  E135               	bnz	i2l632
 21478  00380E  0E07               	movlw	7
 21479  003810  5C41               	subwf	i2printRTC@i,w,c
 21480  003812  B0D8               	btfsc	status,0,c
 21481  003814  D031               	goto	i2l632
 21482  003816                     i2l7726:
 21483                           
 21484                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 21485  003816  0E1C               	movlw	low _time
 21486  003818  2441               	addwf	i2printRTC@i,w,c
 21487  00381A  6ED9               	movwf	fsr2l,c
 21488  00381C  0E01               	movlw	high _time
 21489  00381E  2042               	addwfc	i2printRTC@i+1,w,c
 21490  003820  6EDA               	movwf	fsr2h,c
 21491  003822  50DF               	movf	indf2,w,c
 21492  003824  6E2A               	movwf	??i2_printRTC& (0+255),c
 21493  003826  3A2A               	swapf	??i2_printRTC,f,c
 21494  003828  0E0F               	movlw	15
 21495  00382A  162A               	andwf	??i2_printRTC,f,c
 21496  00382C  0E0F               	movlw	15
 21497  00382E  162A               	andwf	??i2_printRTC,f,c
 21498  003830  502A               	movf	??i2_printRTC,w,c
 21499  003832  0D0A               	mullw	10
 21500  003834  0E1C               	movlw	low _time
 21501  003836  2441               	addwf	i2printRTC@i,w,c
 21502  003838  6ED9               	movwf	fsr2l,c
 21503  00383A  0E01               	movlw	high _time
 21504  00383C  2042               	addwfc	i2printRTC@i+1,w,c
 21505  00383E  6EDA               	movwf	fsr2h,c
 21506  003840  50DF               	movf	indf2,w,c
 21507  003842  0B0F               	andlw	15
 21508  003844  6E2B               	movwf	(??i2_printRTC+1)& (0+255),c
 21509  003846  6A2C               	clrf	(??i2_printRTC+2)& (0+255),c
 21510  003848  50F3               	movf	prodl,w,c
 21511  00384A  262B               	addwf	??i2_printRTC+1,f,c
 21512  00384C  50F4               	movf	prodh,w,c
 21513  00384E  222C               	addwfc	??i2_printRTC+2,f,c
 21514  003850  90D8               	bcf	status,0,c
 21515  003852  3441               	rlcf	i2printRTC@i,w,c
 21516  003854  6ED9               	movwf	fsr2l,c
 21517  003856  3442               	rlcf	i2printRTC@i+1,w,c
 21518  003858  6EDA               	movwf	fsr2h,c
 21519  00385A  0E2D               	movlw	low i2printRTC@INT_time
 21520  00385C  26D9               	addwf	fsr2l,f,c
 21521  00385E  0E00               	movlw	high i2printRTC@INT_time
 21522  003860  22DA               	addwfc	fsr2h,f,c
 21523  003862  C02B  FFDE         	movff	??i2_printRTC+1,postinc2
 21524  003866  C02C  FFDD         	movff	??i2_printRTC+2,postdec2
 21525  00386A  4A41               	infsnz	i2printRTC@i,f,c
 21526  00386C  2A42               	incf	i2printRTC@i+1,f,c
 21527  00386E  BE42               	btfsc	i2printRTC@i+1,7,c
 21528  003870  D7D2               	goto	i2l7726
 21529  003872  5042               	movf	i2printRTC@i+1,w,c
 21530  003874  E101               	bnz	i2u665_40
 21531  003876  D7CB               	goto	L18
 21532  003878                     i2u665_40:
 21533  003878                     i2l632:
 21534                           
 21535                           ;RTC.c: 69: }
 21536                           ;RTC.c: 70: int RTC_month = INT_time[5];
 21537  003878  C037  F03B         	movff	i2printRTC@INT_time+10,i2printRTC@RTC_month
 21538  00387C  C038  F03C         	movff	i2printRTC@INT_time+11,i2printRTC@RTC_month+1
 21539                           
 21540                           ;RTC.c: 72: switch(RTC_month){
 21541  003880  D084               	goto	i2l7758
 21542  003882                     i2l7732:
 21543                           
 21544                           ;RTC.c: 74: strcpy(month, "JAN");
 21545  003882  0E3D               	movlw	low i2printRTC@month
 21546  003884  6E01               	movwf	i2strcpy@to,c
 21547  003886  0E00               	movlw	high i2printRTC@month
 21548  003888  6E02               	movwf	i2strcpy@to+1,c
 21549  00388A  0EDA               	movlw	low STR_8
 21550  00388C  6E03               	movwf	i2strcpy@from,c
 21551  00388E  0EFF               	movlw	high STR_8
 21552  003890  6E04               	movwf	i2strcpy@from+1,c
 21553  003892  EC4D  F02D         	call	i2_strcpy	;wreg free
 21554                           
 21555                           ;RTC.c: 75: break;
 21556  003896  D0A6               	goto	i2l7760
 21557  003898                     i2l7734:
 21558                           
 21559                           ;RTC.c: 77: strcpy(month, "FEB");
 21560  003898  0E3D               	movlw	low i2printRTC@month
 21561  00389A  6E01               	movwf	i2strcpy@to,c
 21562  00389C  0E00               	movlw	high i2printRTC@month
 21563  00389E  6E02               	movwf	i2strcpy@to+1,c
 21564  0038A0  0ECA               	movlw	low STR_9
 21565  0038A2  6E03               	movwf	i2strcpy@from,c
 21566  0038A4  0EFF               	movlw	high STR_9
 21567  0038A6  6E04               	movwf	i2strcpy@from+1,c
 21568  0038A8  EC4D  F02D         	call	i2_strcpy	;wreg free
 21569                           
 21570                           ;RTC.c: 78: break;
 21571  0038AC  D09B               	goto	i2l7760
 21572  0038AE                     i2l7736:
 21573                           
 21574                           ;RTC.c: 80: strcpy(month, "MAR");
 21575  0038AE  0E3D               	movlw	low i2printRTC@month
 21576  0038B0  6E01               	movwf	i2strcpy@to,c
 21577  0038B2  0E00               	movlw	high i2printRTC@month
 21578  0038B4  6E02               	movwf	i2strcpy@to+1,c
 21579  0038B6  0EE6               	movlw	low STR_10
 21580  0038B8  6E03               	movwf	i2strcpy@from,c
 21581  0038BA  0EFF               	movlw	high STR_10
 21582  0038BC  6E04               	movwf	i2strcpy@from+1,c
 21583  0038BE  EC4D  F02D         	call	i2_strcpy	;wreg free
 21584                           
 21585                           ;RTC.c: 81: break;
 21586  0038C2  D090               	goto	i2l7760
 21587  0038C4                     i2l7738:
 21588                           
 21589                           ;RTC.c: 83: strcpy(month, "APR");
 21590  0038C4  0E3D               	movlw	low i2printRTC@month
 21591  0038C6  6E01               	movwf	i2strcpy@to,c
 21592  0038C8  0E00               	movlw	high i2printRTC@month
 21593  0038CA  6E02               	movwf	i2strcpy@to+1,c
 21594  0038CC  0EEA               	movlw	low STR_11
 21595  0038CE  6E03               	movwf	i2strcpy@from,c
 21596  0038D0  0EFF               	movlw	high STR_11
 21597  0038D2  6E04               	movwf	i2strcpy@from+1,c
 21598  0038D4  EC4D  F02D         	call	i2_strcpy	;wreg free
 21599                           
 21600                           ;RTC.c: 84: break;
 21601  0038D8  D085               	goto	i2l7760
 21602  0038DA                     i2l7740:
 21603                           
 21604                           ;RTC.c: 86: strcpy(month, "MAY");
 21605  0038DA  0E3D               	movlw	low i2printRTC@month
 21606  0038DC  6E01               	movwf	i2strcpy@to,c
 21607  0038DE  0E00               	movlw	high i2printRTC@month
 21608  0038E0  6E02               	movwf	i2strcpy@to+1,c
 21609  0038E2  0EFA               	movlw	low STR_12
 21610  0038E4  6E03               	movwf	i2strcpy@from,c
 21611  0038E6  0EFF               	movlw	high STR_12
 21612  0038E8  6E04               	movwf	i2strcpy@from+1,c
 21613  0038EA  EC4D  F02D         	call	i2_strcpy	;wreg free
 21614                           
 21615                           ;RTC.c: 87: break;
 21616  0038EE  D07A               	goto	i2l7760
 21617  0038F0                     i2l7742:
 21618                           
 21619                           ;RTC.c: 89: strcpy(month, "JUN");
 21620  0038F0  0E3D               	movlw	low i2printRTC@month
 21621  0038F2  6E01               	movwf	i2strcpy@to,c
 21622  0038F4  0E00               	movlw	high i2printRTC@month
 21623  0038F6  6E02               	movwf	i2strcpy@to+1,c
 21624  0038F8  0EDE               	movlw	low STR_13
 21625  0038FA  6E03               	movwf	i2strcpy@from,c
 21626  0038FC  0EFF               	movlw	high STR_13
 21627  0038FE  6E04               	movwf	i2strcpy@from+1,c
 21628  003900  EC4D  F02D         	call	i2_strcpy	;wreg free
 21629                           
 21630                           ;RTC.c: 90: break;
 21631  003904  D06F               	goto	i2l7760
 21632  003906                     i2l7744:
 21633                           
 21634                           ;RTC.c: 92: strcpy(month, "JUL");
 21635  003906  0E3D               	movlw	low i2printRTC@month
 21636  003908  6E01               	movwf	i2strcpy@to,c
 21637  00390A  0E00               	movlw	high i2printRTC@month
 21638  00390C  6E02               	movwf	i2strcpy@to+1,c
 21639  00390E  0ED6               	movlw	low STR_14
 21640  003910  6E03               	movwf	i2strcpy@from,c
 21641  003912  0EFF               	movlw	high STR_14
 21642  003914  6E04               	movwf	i2strcpy@from+1,c
 21643  003916  EC4D  F02D         	call	i2_strcpy	;wreg free
 21644                           
 21645                           ;RTC.c: 93: break;
 21646  00391A  D064               	goto	i2l7760
 21647  00391C                     i2l7746:
 21648                           
 21649                           ;RTC.c: 95: strcpy(month, "AUG");
 21650  00391C  0E3D               	movlw	low i2printRTC@month
 21651  00391E  6E01               	movwf	i2strcpy@to,c
 21652  003920  0E00               	movlw	high i2printRTC@month
 21653  003922  6E02               	movwf	i2strcpy@to+1,c
 21654  003924  0ED2               	movlw	low STR_15
 21655  003926  6E03               	movwf	i2strcpy@from,c
 21656  003928  0EFF               	movlw	high STR_15
 21657  00392A  6E04               	movwf	i2strcpy@from+1,c
 21658  00392C  EC4D  F02D         	call	i2_strcpy	;wreg free
 21659                           
 21660                           ;RTC.c: 96: break;
 21661  003930  D059               	goto	i2l7760
 21662  003932                     i2l7748:
 21663                           
 21664                           ;RTC.c: 98: strcpy(month, "SEP");
 21665  003932  0E3D               	movlw	low i2printRTC@month
 21666  003934  6E01               	movwf	i2strcpy@to,c
 21667  003936  0E00               	movlw	high i2printRTC@month
 21668  003938  6E02               	movwf	i2strcpy@to+1,c
 21669  00393A  0EE2               	movlw	low STR_16
 21670  00393C  6E03               	movwf	i2strcpy@from,c
 21671  00393E  0EFF               	movlw	high STR_16
 21672  003940  6E04               	movwf	i2strcpy@from+1,c
 21673  003942  EC4D  F02D         	call	i2_strcpy	;wreg free
 21674                           
 21675                           ;RTC.c: 99: break;
 21676  003946  D04E               	goto	i2l7760
 21677  003948                     i2l7750:
 21678                           
 21679                           ;RTC.c: 101: strcpy(month, "OCT");
 21680  003948  0E3D               	movlw	low i2printRTC@month
 21681  00394A  6E01               	movwf	i2strcpy@to,c
 21682  00394C  0E00               	movlw	high i2printRTC@month
 21683  00394E  6E02               	movwf	i2strcpy@to+1,c
 21684  003950  0EF2               	movlw	low STR_17
 21685  003952  6E03               	movwf	i2strcpy@from,c
 21686  003954  0EFF               	movlw	high STR_17
 21687  003956  6E04               	movwf	i2strcpy@from+1,c
 21688  003958  EC4D  F02D         	call	i2_strcpy	;wreg free
 21689                           
 21690                           ;RTC.c: 102: break;
 21691  00395C  D043               	goto	i2l7760
 21692  00395E                     i2l7752:
 21693                           
 21694                           ;RTC.c: 104: strcpy(month, "NOV");
 21695  00395E  0E3D               	movlw	low i2printRTC@month
 21696  003960  6E01               	movwf	i2strcpy@to,c
 21697  003962  0E00               	movlw	high i2printRTC@month
 21698  003964  6E02               	movwf	i2strcpy@to+1,c
 21699  003966  0EF6               	movlw	low STR_18
 21700  003968  6E03               	movwf	i2strcpy@from,c
 21701  00396A  0EFF               	movlw	high STR_18
 21702  00396C  6E04               	movwf	i2strcpy@from+1,c
 21703  00396E  EC4D  F02D         	call	i2_strcpy	;wreg free
 21704                           
 21705                           ;RTC.c: 105: break;
 21706  003972  D038               	goto	i2l7760
 21707  003974                     i2l7754:
 21708                           
 21709                           ;RTC.c: 107: strcpy(month, "DEC");
 21710  003974  0E3D               	movlw	low i2printRTC@month
 21711  003976  6E01               	movwf	i2strcpy@to,c
 21712  003978  0E00               	movlw	high i2printRTC@month
 21713  00397A  6E02               	movwf	i2strcpy@to+1,c
 21714  00397C  0ECE               	movlw	low STR_19
 21715  00397E  6E03               	movwf	i2strcpy@from,c
 21716  003980  0EFF               	movlw	high STR_19
 21717  003982  6E04               	movwf	i2strcpy@from+1,c
 21718  003984  EC4D  F02D         	call	i2_strcpy	;wreg free
 21719                           
 21720                           ;RTC.c: 109: }
 21721                           
 21722                           ;RTC.c: 108: break;
 21723  003988  D02D               	goto	i2l7760
 21724  00398A                     i2l7758:
 21725  00398A  C03B  F02A         	movff	i2printRTC@RTC_month,??i2_printRTC
 21726  00398E  C03C  F02B         	movff	i2printRTC@RTC_month+1,??i2_printRTC+1
 21727                           
 21728                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 21729                           ; Switch size 1, requested type "space"
 21730                           ; Number of cases is 1, Range of values is 0 to 0
 21731                           ; switch strategies available:
 21732                           ; Name         Instructions Cycles
 21733                           ; simple_byte            4     3 (average)
 21734                           ;	Chosen strategy is simple_byte
 21735  003992  502B               	movf	??i2_printRTC+1,w,c
 21736  003994  0A00               	xorlw	0	; case 0
 21737  003996  A4D8               	btfss	status,2,c
 21738  003998  D025               	goto	i2l7760
 21739                           
 21740                           ; Switch size 1, requested type "space"
 21741                           ; Number of cases is 12, Range of values is 1 to 12
 21742                           ; switch strategies available:
 21743                           ; Name         Instructions Cycles
 21744                           ; simple_byte           37    19 (average)
 21745                           ;	Chosen strategy is simple_byte
 21746  00399A  502A               	movf	??i2_printRTC,w,c
 21747  00399C  0A01               	xorlw	1	; case 1
 21748  00399E  B4D8               	btfsc	status,2,c
 21749  0039A0  D770               	goto	i2l7732
 21750  0039A2  0A03               	xorlw	3	; case 2
 21751  0039A4  B4D8               	btfsc	status,2,c
 21752  0039A6  D778               	goto	i2l7734
 21753  0039A8  0A01               	xorlw	1	; case 3
 21754  0039AA  B4D8               	btfsc	status,2,c
 21755  0039AC  D780               	goto	i2l7736
 21756  0039AE  0A07               	xorlw	7	; case 4
 21757  0039B0  B4D8               	btfsc	status,2,c
 21758  0039B2  D788               	goto	i2l7738
 21759  0039B4  0A01               	xorlw	1	; case 5
 21760  0039B6  B4D8               	btfsc	status,2,c
 21761  0039B8  D790               	goto	i2l7740
 21762  0039BA  0A03               	xorlw	3	; case 6
 21763  0039BC  B4D8               	btfsc	status,2,c
 21764  0039BE  D798               	goto	i2l7742
 21765  0039C0  0A01               	xorlw	1	; case 7
 21766  0039C2  B4D8               	btfsc	status,2,c
 21767  0039C4  D7A0               	goto	i2l7744
 21768  0039C6  0A0F               	xorlw	15	; case 8
 21769  0039C8  B4D8               	btfsc	status,2,c
 21770  0039CA  D7A8               	goto	i2l7746
 21771  0039CC  0A01               	xorlw	1	; case 9
 21772  0039CE  B4D8               	btfsc	status,2,c
 21773  0039D0  D7B0               	goto	i2l7748
 21774  0039D2  0A03               	xorlw	3	; case 10
 21775  0039D4  B4D8               	btfsc	status,2,c
 21776  0039D6  D7B8               	goto	i2l7750
 21777  0039D8  0A01               	xorlw	1	; case 11
 21778  0039DA  B4D8               	btfsc	status,2,c
 21779  0039DC  D7C0               	goto	i2l7752
 21780  0039DE  0A07               	xorlw	7	; case 12
 21781  0039E0  B4D8               	btfsc	status,2,c
 21782  0039E2  D7C8               	goto	i2l7754
 21783  0039E4                     i2l7760:
 21784                           
 21785                           ;RTC.c: 110: lcdInst(0b10000000);;
 21786  0039E4  0E80               	movlw	128
 21787  0039E6  ECBD  F02F         	call	i2_lcdInst
 21788                           
 21789                           ;RTC.c: 111: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 21790  0039EA  0EC2               	movlw	low STR_21
 21791  0039EC  6E0D               	movwf	i2printf@f,c
 21792  0039EE  0EFA               	movlw	high STR_21
 21793  0039F0  6E0E               	movwf	i2printf@f+1,c
 21794  0039F2  C035  F00F         	movff	i2printRTC@INT_time+8,?i2_printf+2
 21795  0039F6  C036  F010         	movff	i2printRTC@INT_time+9,?i2_printf+3
 21796  0039FA  0E3D               	movlw	low i2printRTC@month
 21797  0039FC  6E11               	movwf	?i2_printf+4,c
 21798  0039FE  0E00               	movlw	high i2printRTC@month
 21799  003A00  6E12               	movwf	?i2_printf+5,c
 21800  003A02  C031  F013         	movff	i2printRTC@INT_time+4,?i2_printf+6
 21801  003A06  C032  F014         	movff	i2printRTC@INT_time+5,?i2_printf+7
 21802  003A0A  C02F  F015         	movff	i2printRTC@INT_time+2,?i2_printf+8
 21803  003A0E  C030  F016         	movff	i2printRTC@INT_time+3,?i2_printf+9
 21804  003A12  C02D  F017         	movff	i2printRTC@INT_time,?i2_printf+10
 21805  003A16  C02E  F018         	movff	i2printRTC@INT_time+1,?i2_printf+11
 21806  003A1A  EC4B  F014         	call	i2_printf	;wreg free
 21807  003A1E  0012               	return		;funcret
 21808  003A20                     __end_ofi2_printRTC:
 21809                           	opt stack 0
 21810                           pclatu	equ	0xFFB
 21811                           pclath	equ	0xFFA
 21812                           tblptru	equ	0xFF8
 21813                           tblptrh	equ	0xFF7
 21814                           tblptrl	equ	0xFF6
 21815                           tablat	equ	0xFF5
 21816                           prodh	equ	0xFF4
 21817                           prodl	equ	0xFF3
 21818                           intcon	equ	0xFF2
 21819                           intcon2	equ	0xFF1
 21820                           intcon3	equ	0xFF0
 21821                           indf0	equ	0xFEF
 21822                           postinc0	equ	0xFEE
 21823                           fsr0h	equ	0xFEA
 21824                           fsr0l	equ	0xFE9
 21825                           wreg	equ	0xFE8
 21826                           postdec1	equ	0xFE5
 21827                           fsr1h	equ	0xFE2
 21828                           fsr1l	equ	0xFE1
 21829                           indf2	equ	0xFDF
 21830                           postinc2	equ	0xFDE
 21831                           postdec2	equ	0xFDD
 21832                           fsr2h	equ	0xFDA
 21833                           fsr2l	equ	0xFD9
 21834                           status	equ	0xFD8
 21835                           
 21836 ;; *************** function i2_strcpy *****************
 21837 ;; Defined at:
 21838 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 21839 ;; Parameters:    Size  Location     Type
 21840 ;;  to              2    0[COMRAM] PTR unsigned char 
 21841 ;;		 -> printRTC@month(4), UI@month(4), 
 21842 ;;  from            2    2[COMRAM] PTR const unsigned char 
 21843 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
 21844 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
 21845 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
 21846 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
 21847 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
 21848 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
 21849 ;;		 -> STR_8(4), 
 21850 ;; Auto vars:     Size  Location     Type
 21851 ;;  strcpy          2    4[COMRAM] PTR unsigned char 
 21852 ;;		 -> printRTC@month(4), UI@month(4), 
 21853 ;; Return value:  Size  Location     Type
 21854 ;;                  2    0[COMRAM] PTR unsigned char 
 21855 ;; Registers used:
 21856 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 21857 ;; Tracked objects:
 21858 ;;		On entry : 0/0
 21859 ;;		On exit  : 0/0
 21860 ;;		Unchanged: 0/0
 21861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21862 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21863 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21864 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21865 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21866 ;;Total ram usage:        6 bytes
 21867 ;; Hardware stack levels used:    1
 21868 ;; This function calls:
 21869 ;;		Nothing
 21870 ;; This function is called by:
 21871 ;;		i2_printRTC
 21872 ;; This function uses a non-reentrant model
 21873 ;;
 21874                           
 21875                           	psect	text70
 21876  005A9A                     __ptext70:
 21877                           	opt stack 0
 21878  005A9A                     i2_strcpy:
 21879                           	opt stack 21
 21880                           
 21881                           ;incstack = 0
 21882  005A9A  C001  F005         	movff	i2strcpy@to,i2strcpy@cp
 21883  005A9E  C002  F006         	movff	i2strcpy@to+1,i2strcpy@cp+1
 21884  005AA2  D004               	goto	i2l7284
 21885  005AA4                     i2l7282:
 21886  005AA4  4A05               	infsnz	i2strcpy@cp,f,c
 21887  005AA6  2A06               	incf	i2strcpy@cp+1,f,c
 21888  005AA8  4A03               	infsnz	i2strcpy@from,f,c
 21889  005AAA  2A04               	incf	i2strcpy@from+1,f,c
 21890  005AAC                     i2l7284:
 21891  005AAC  C003  FFF6         	movff	i2strcpy@from,tblptrl
 21892  005AB0  C004  FFF7         	movff	i2strcpy@from+1,tblptrh
 21893  005AB4                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 21894  005AB4  6AF8               	clrf	tblptru,c
 21895  005AB6                     	endif
 21896  005AB6                     	if	0	;tblptru may be non-zero
 21897  005AB6                     	endif
 21898  005AB6  C005  FFD9         	movff	i2strcpy@cp,fsr2l
 21899  005ABA  C006  FFDA         	movff	i2strcpy@cp+1,fsr2h
 21900  005ABE  0008               	tblrd		*
 21901  005AC0  CFF5 FFDF          	movff	tablat,indf2
 21902  005AC4  50DF               	movf	indf2,w,c
 21903  005AC6  B4D8               	btfsc	status,2,c
 21904  005AC8  0012               	return	
 21905  005ACA  D7EC               	goto	i2l7282
 21906  005ACC                     __end_ofi2_strcpy:
 21907                           	opt stack 0
 21908                           pclatu	equ	0xFFB
 21909                           pclath	equ	0xFFA
 21910                           tblptru	equ	0xFF8
 21911                           tblptrh	equ	0xFF7
 21912                           tblptrl	equ	0xFF6
 21913                           tablat	equ	0xFF5
 21914                           prodh	equ	0xFF4
 21915                           prodl	equ	0xFF3
 21916                           intcon	equ	0xFF2
 21917                           intcon2	equ	0xFF1
 21918                           intcon3	equ	0xFF0
 21919                           indf0	equ	0xFEF
 21920                           postinc0	equ	0xFEE
 21921                           fsr0h	equ	0xFEA
 21922                           fsr0l	equ	0xFE9
 21923                           wreg	equ	0xFE8
 21924                           postdec1	equ	0xFE5
 21925                           fsr1h	equ	0xFE2
 21926                           fsr1l	equ	0xFE1
 21927                           indf2	equ	0xFDF
 21928                           postinc2	equ	0xFDE
 21929                           postdec2	equ	0xFDD
 21930                           fsr2h	equ	0xFDA
 21931                           fsr2l	equ	0xFD9
 21932                           status	equ	0xFD8
 21933                           
 21934 ;; *************** function _inputHandler *****************
 21935 ;; Defined at:
 21936 ;;		line 375 in file "UI.c"
 21937 ;; Parameters:    Size  Location     Type
 21938 ;;		None
 21939 ;; Auto vars:     Size  Location     Type
 21940 ;;		None
 21941 ;; Return value:  Size  Location     Type
 21942 ;;                  2   41[COMRAM] int 
 21943 ;; Registers used:
 21944 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21945 ;; Tracked objects:
 21946 ;;		On entry : 0/0
 21947 ;;		On exit  : 0/0
 21948 ;;		Unchanged: 0/0
 21949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21950 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21951 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21952 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21953 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21954 ;;Total ram usage:        4 bytes
 21955 ;; Hardware stack levels used:    1
 21956 ;; Hardware stack levels required when called:    4
 21957 ;; This function calls:
 21958 ;;		_change_state_to_logs_11
 21959 ;;		_change_state_to_logs_12
 21960 ;;		_change_state_to_logs_22
 21961 ;;		_change_state_to_logs_23
 21962 ;;		_change_state_to_logs_33
 21963 ;;		_change_state_to_logs_34
 21964 ;;		_change_state_to_menu_11
 21965 ;;		_change_state_to_menu_23
 21966 ;;		i2_change_state_to_menu_12
 21967 ;;		i2_change_state_to_menu_22
 21968 ;; This function is called by:
 21969 ;;		_updateMenu
 21970 ;; This function uses a non-reentrant model
 21971 ;;
 21972                           
 21973                           	psect	text71
 21974  003A20                     __ptext71:
 21975                           	opt stack 0
 21976  003A20                     _inputHandler:
 21977                           	opt stack 18
 21978                           
 21979                           ;UI.c: 380: if(firstboot){
 21980                           
 21981                           ;incstack = 0
 21982  003A20  0101               	movlb	1	; () banked
 21983  003A22  513D               	movf	_firstboot& (0+255),w,b
 21984  003A24  0101               	movlb	1	; () banked
 21985  003A26  113E               	iorwf	(_firstboot+1)& (0+255),w,b
 21986  003A28  B4D8               	btfsc	status,2,c
 21987  003A2A  D00C               	goto	i2l7828
 21988                           
 21989                           ; BSR set to: 1
 21990                           ;UI.c: 381: change_state_to_menu_11();
 21991  003A2C  ECC6  F02D         	call	_change_state_to_menu_11	;wreg free
 21992                           
 21993                           ;UI.c: 382: firstboot = 0;
 21994  003A30  0E00               	movlw	0
 21995  003A32  0101               	movlb	1	; () banked
 21996  003A34  6F3E               	movwf	(_firstboot+1)& (0+255),b
 21997  003A36  0E00               	movlw	0
 21998  003A38  6F3D               	movwf	_firstboot& (0+255),b
 21999                           
 22000                           ; BSR set to: 1
 22001                           ;UI.c: 383: return 0;
 22002  003A3A  0E00               	movlw	0
 22003  003A3C  6E2B               	movwf	?_inputHandler+1,c
 22004  003A3E  0E00               	movlw	0
 22005  003A40  6E2A               	movwf	?_inputHandler,c
 22006                           
 22007                           ; BSR set to: 1
 22008  003A42  0012               	return	
 22009  003A44                     i2l7828:
 22010                           
 22011                           ; BSR set to: 1
 22012                           ;UI.c: 384: }
 22013                           ;UI.c: 385: if (logstate){
 22014  003A44  0100               	movlb	0	; () banked
 22015  003A46  51F8               	movf	_logstate& (0+255),w,b
 22016  003A48  0100               	movlb	0	; () banked
 22017  003A4A  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 22018  003A4C  B4D8               	btfsc	status,2,c
 22019  003A4E  D0C7               	goto	i2l7946
 22020                           
 22021                           ; BSR set to: 0
 22022                           ;UI.c: 386: if(input == 'C' && PORTBbits.RB1 == 1){
 22023  003A50  0E43               	movlw	67
 22024  003A52  187D               	xorwf	_input,w,c	;volatile
 22025  003A54  A4D8               	btfss	status,2,c
 22026  003A56  D012               	goto	i2l7846
 22027                           
 22028                           ; BSR set to: 0
 22029  003A58  B281               	btfsc	3969,1,c	;volatile
 22030  003A5A  D009               	goto	i2l7838
 22031  003A5C  D00F               	goto	i2l7846
 22032  003A5E                     i2l7836:
 22033                           
 22034                           ;UI.c: 389: _delay((unsigned long)((10)*(32000000/4000.0)));
 22035  003A5E  0E68               	movlw	104
 22036  003A60  6E2C               	movwf	??_inputHandler& (0+255),c
 22037  003A62  0EE4               	movlw	228
 22038  003A64                     i2u1215_47:
 22039  003A64  2EE8               	decfsz	wreg,f,c
 22040  003A66  D7FE               	bra	i2u1215_47
 22041  003A68  2E2C               	decfsz	??_inputHandler& (0+255),f,c
 22042  003A6A  D7FC               	bra	i2u1215_47
 22043  003A6C  D000               	nop2	
 22044  003A6E                     i2l7838:
 22045  003A6E  B281               	btfsc	3969,1,c	;volatile
 22046  003A70  D7F6               	goto	i2l7836
 22047  003A72                     i2l7840:
 22048                           
 22049                           ;UI.c: 390: }
 22050                           ;UI.c: 391: return 0;
 22051  003A72  0E00               	movlw	0
 22052  003A74  6E2B               	movwf	?_inputHandler+1,c
 22053  003A76  0E00               	movlw	0
 22054  003A78  6E2A               	movwf	?_inputHandler,c
 22055  003A7A  0012               	return	
 22056  003A7C                     i2l7846:
 22057                           
 22058                           ;UI.c: 393: else if (input == 'D'){
 22059  003A7C  0E44               	movlw	68
 22060  003A7E  187D               	xorwf	_input,w,c	;volatile
 22061  003A80  A4D8               	btfss	status,2,c
 22062  003A82  D7F7               	goto	i2l7840
 22063                           
 22064                           ;UI.c: 395: logstate = 0;
 22065  003A84  0E00               	movlw	0
 22066  003A86  0100               	movlb	0	; () banked
 22067  003A88  6FF9               	movwf	(_logstate+1)& (0+255),b
 22068  003A8A  0E00               	movlw	0
 22069  003A8C  6FF8               	movwf	_logstate& (0+255),b
 22070                           
 22071                           ;UI.c: 396: switch(cur_state){
 22072  003A8E  D012               	goto	i2l7864
 22073  003A90                     i2l7850:
 22074                           
 22075                           ;UI.c: 398: change_state_to_logs_11();
 22076  003A90  EC3E  F02E         	call	_change_state_to_logs_11	;wreg free
 22077                           
 22078                           ;UI.c: 399: break;
 22079  003A94  D7EE               	goto	i2l7840
 22080  003A96                     i2l7852:
 22081                           
 22082                           ;UI.c: 401: change_state_to_logs_12();
 22083  003A96  EC26  F02E         	call	_change_state_to_logs_12	;wreg free
 22084                           
 22085                           ;UI.c: 402: break;
 22086  003A9A  D7EB               	goto	i2l7840
 22087  003A9C                     i2l7854:
 22088                           
 22089                           ;UI.c: 404: change_state_to_logs_22();
 22090  003A9C  EC0E  F02E         	call	_change_state_to_logs_22	;wreg free
 22091                           
 22092                           ;UI.c: 405: break;
 22093  003AA0  D7E8               	goto	i2l7840
 22094  003AA2                     i2l7856:
 22095                           
 22096                           ;UI.c: 407: change_state_to_logs_23();
 22097  003AA2  EC6D  F02E         	call	_change_state_to_logs_23	;wreg free
 22098                           
 22099                           ;UI.c: 408: break;
 22100  003AA6  D7E5               	goto	i2l7840
 22101  003AA8                     i2l7858:
 22102                           
 22103                           ;UI.c: 410: change_state_to_logs_33();
 22104  003AA8  ECF6  F02D         	call	_change_state_to_logs_33	;wreg free
 22105                           
 22106                           ;UI.c: 411: break;
 22107  003AAC  D7E2               	goto	i2l7840
 22108  003AAE                     i2l7860:
 22109                           
 22110                           ;UI.c: 413: change_state_to_logs_34();
 22111  003AAE  ECDE  F02D         	call	_change_state_to_logs_34	;wreg free
 22112                           
 22113                           ;UI.c: 415: }
 22114                           
 22115                           ;UI.c: 414: break;
 22116  003AB2  D7DF               	goto	i2l7840
 22117  003AB4                     i2l7864:
 22118  003AB4  C0E6  F02C         	movff	_cur_state,??_inputHandler
 22119  003AB8  C0E7  F02D         	movff	_cur_state+1,??_inputHandler+1
 22120                           
 22121                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 22122                           ; Switch size 1, requested type "space"
 22123                           ; Number of cases is 2, Range of values is 3 to 4
 22124                           ; switch strategies available:
 22125                           ; Name         Instructions Cycles
 22126                           ; simple_byte            7     4 (average)
 22127                           ;	Chosen strategy is simple_byte
 22128  003ABC  502D               	movf	??_inputHandler+1,w,c
 22129  003ABE  0A03               	xorlw	3	; case 3
 22130  003AC0  B4D8               	btfsc	status,2,c
 22131  003AC2  D004               	goto	i2l11016
 22132  003AC4  0A07               	xorlw	7	; case 4
 22133  003AC6  B4D8               	btfsc	status,2,c
 22134  003AC8  D00F               	goto	i2l11018
 22135  003ACA  D7D3               	goto	i2l7840
 22136  003ACC                     i2l11016:
 22137                           
 22138                           ; Switch size 1, requested type "space"
 22139                           ; Number of cases is 4, Range of values is 243 to 255
 22140                           ; switch strategies available:
 22141                           ; Name         Instructions Cycles
 22142                           ; simple_byte           13     7 (average)
 22143                           ;	Chosen strategy is simple_byte
 22144  003ACC  502C               	movf	??_inputHandler,w,c
 22145  003ACE  0AF3               	xorlw	243	; case 243
 22146  003AD0  B4D8               	btfsc	status,2,c
 22147  003AD2  D7DE               	goto	i2l7850
 22148  003AD4  0A07               	xorlw	7	; case 244
 22149  003AD6  B4D8               	btfsc	status,2,c
 22150  003AD8  D7DE               	goto	i2l7852
 22151  003ADA  0A0A               	xorlw	10	; case 254
 22152  003ADC  B4D8               	btfsc	status,2,c
 22153  003ADE  D7DE               	goto	i2l7854
 22154  003AE0  0A01               	xorlw	1	; case 255
 22155  003AE2  B4D8               	btfsc	status,2,c
 22156  003AE4  D7DE               	goto	i2l7856
 22157  003AE6  D7C5               	goto	i2l7840
 22158  003AE8                     i2l11018:
 22159                           
 22160                           ; Switch size 1, requested type "space"
 22161                           ; Number of cases is 2, Range of values is 9 to 10
 22162                           ; switch strategies available:
 22163                           ; Name         Instructions Cycles
 22164                           ; simple_byte            7     4 (average)
 22165                           ;	Chosen strategy is simple_byte
 22166  003AE8  502C               	movf	??_inputHandler,w,c
 22167  003AEA  0A09               	xorlw	9	; case 9
 22168  003AEC  B4D8               	btfsc	status,2,c
 22169  003AEE  D7DC               	goto	i2l7858
 22170  003AF0  0A03               	xorlw	3	; case 10
 22171  003AF2  B4D8               	btfsc	status,2,c
 22172  003AF4  D7DC               	goto	i2l7860
 22173  003AF6  D7BD               	goto	i2l7840
 22174  003AF8                     i2l7876:
 22175                           
 22176                           ;UI.c: 425: if(cur_state == 11){
 22177  003AF8  0E0B               	movlw	11
 22178  003AFA  0100               	movlb	0	; () banked
 22179  003AFC  19E6               	xorwf	_cur_state& (0+255),w,b
 22180  003AFE  0100               	movlb	0	; () banked
 22181  003B00  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 22182  003B02  A4D8               	btfss	status,2,c
 22183  003B04  D005               	goto	i2l7884
 22184                           
 22185                           ; BSR set to: 0
 22186                           ;UI.c: 426: return 0;
 22187  003B06  0E00               	movlw	0
 22188  003B08  6E2B               	movwf	?_inputHandler+1,c
 22189  003B0A  0E00               	movlw	0
 22190  003B0C  6E2A               	movwf	?_inputHandler,c
 22191                           
 22192                           ; BSR set to: 0
 22193  003B0E  0012               	return	
 22194  003B10                     i2l7884:
 22195                           
 22196                           ; BSR set to: 0
 22197                           ;UI.c: 428: else{
 22198                           ;UI.c: 429: change_state_to_menu_11();
 22199  003B10  ECC6  F02D         	call	_change_state_to_menu_11	;wreg free
 22200                           
 22201                           ;UI.c: 430: }
 22202                           ;UI.c: 431: return 0;
 22203  003B14  0E00               	movlw	0
 22204  003B16  6E2B               	movwf	?_inputHandler+1,c
 22205  003B18  0E00               	movlw	0
 22206  003B1A  6E2A               	movwf	?_inputHandler,c
 22207  003B1C  0012               	return	
 22208  003B1E                     i2l7890:
 22209                           
 22210                           ;UI.c: 433: if(cur_state == 22 || cur_state == 12){
 22211  003B1E  0E16               	movlw	22
 22212  003B20  0100               	movlb	0	; () banked
 22213  003B22  19E6               	xorwf	_cur_state& (0+255),w,b
 22214  003B24  0100               	movlb	0	; () banked
 22215  003B26  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 22216  003B28  B4D8               	btfsc	status,2,c
 22217  003B2A  D007               	goto	i2l7894
 22218                           
 22219                           ; BSR set to: 0
 22220  003B2C  0E0C               	movlw	12
 22221  003B2E  0100               	movlb	0	; () banked
 22222  003B30  19E6               	xorwf	_cur_state& (0+255),w,b
 22223  003B32  0100               	movlb	0	; () banked
 22224  003B34  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 22225  003B36  A4D8               	btfss	status,2,c
 22226  003B38  D005               	goto	i2l7900
 22227  003B3A                     i2l7894:
 22228                           
 22229                           ; BSR set to: 0
 22230                           ;UI.c: 434: return 0;
 22231  003B3A  0E00               	movlw	0
 22232  003B3C  6E2B               	movwf	?_inputHandler+1,c
 22233  003B3E  0E00               	movlw	0
 22234  003B40  6E2A               	movwf	?_inputHandler,c
 22235                           
 22236                           ; BSR set to: 0
 22237  003B42  0012               	return	
 22238  003B44                     i2l7900:
 22239                           
 22240                           ; BSR set to: 0
 22241                           ;UI.c: 436: else if(cur_state == 23){
 22242  003B44  0E17               	movlw	23
 22243  003B46  0100               	movlb	0	; () banked
 22244  003B48  19E6               	xorwf	_cur_state& (0+255),w,b
 22245  003B4A  0100               	movlb	0	; () banked
 22246  003B4C  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 22247  003B4E  A4D8               	btfss	status,2,c
 22248  003B50  D003               	goto	i2l7904
 22249                           
 22250                           ; BSR set to: 0
 22251                           ;UI.c: 437: change_state_to_menu_22();
 22252  003B52  EC7E  F02D         	call	i2_change_state_to_menu_22	;wreg free
 22253                           
 22254                           ;UI.c: 438: }
 22255  003B56  D002               	goto	i2l7906
 22256  003B58                     i2l7904:
 22257                           
 22258                           ;UI.c: 439: else{
 22259                           ;UI.c: 440: change_state_to_menu_12();
 22260  003B58  EC96  F02D         	call	i2_change_state_to_menu_12	;wreg free
 22261  003B5C                     i2l7906:
 22262                           
 22263                           ;UI.c: 441: }
 22264                           ;UI.c: 442: return 0;
 22265  003B5C  0E00               	movlw	0
 22266  003B5E  6E2B               	movwf	?_inputHandler+1,c
 22267  003B60  0E00               	movlw	0
 22268  003B62  6E2A               	movwf	?_inputHandler,c
 22269  003B64  0012               	return	
 22270  003B66                     i2l7910:
 22271                           
 22272                           ;UI.c: 444: if(cur_state == 23){
 22273  003B66  0E17               	movlw	23
 22274  003B68  0100               	movlb	0	; () banked
 22275  003B6A  19E6               	xorwf	_cur_state& (0+255),w,b
 22276  003B6C  0100               	movlb	0	; () banked
 22277  003B6E  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 22278  003B70  A4D8               	btfss	status,2,c
 22279  003B72  D005               	goto	i2l7918
 22280                           
 22281                           ; BSR set to: 0
 22282                           ;UI.c: 445: return 0;
 22283  003B74  0E00               	movlw	0
 22284  003B76  6E2B               	movwf	?_inputHandler+1,c
 22285  003B78  0E00               	movlw	0
 22286  003B7A  6E2A               	movwf	?_inputHandler,c
 22287                           
 22288                           ; BSR set to: 0
 22289  003B7C  0012               	return	
 22290  003B7E                     i2l7918:
 22291                           
 22292                           ; BSR set to: 0
 22293                           ;UI.c: 447: else{
 22294                           ;UI.c: 448: change_state_to_menu_23();
 22295  003B7E  ECAE  F02D         	call	_change_state_to_menu_23	;wreg free
 22296                           
 22297                           ;UI.c: 449: }
 22298                           ;UI.c: 450: return 0;
 22299  003B82  0E00               	movlw	0
 22300  003B84  6E2B               	movwf	?_inputHandler+1,c
 22301  003B86  0E00               	movlw	0
 22302  003B88  6E2A               	movwf	?_inputHandler,c
 22303  003B8A  0012               	return	
 22304  003B8C                     i2l7924:
 22305                           
 22306                           ;UI.c: 453: up = 1;
 22307  003B8C  0E00               	movlw	0
 22308  003B8E  6E76               	movwf	_up+1,c
 22309  003B90  0E01               	movlw	1
 22310  003B92  6E75               	movwf	_up,c
 22311                           
 22312                           ;UI.c: 454: return 1;
 22313  003B94  0E00               	movlw	0
 22314  003B96  6E2B               	movwf	?_inputHandler+1,c
 22315  003B98  0E01               	movlw	1
 22316  003B9A  6E2A               	movwf	?_inputHandler,c
 22317  003B9C  0012               	return	
 22318  003B9E                     i2l7928:
 22319                           
 22320                           ;UI.c: 456: down = 1;
 22321  003B9E  0E00               	movlw	0
 22322  003BA0  6E66               	movwf	_down+1,c
 22323  003BA2  0E01               	movlw	1
 22324  003BA4  6E65               	movwf	_down,c
 22325                           
 22326                           ;UI.c: 457: return 1;
 22327  003BA6  0E00               	movlw	0
 22328  003BA8  6E2B               	movwf	?_inputHandler+1,c
 22329  003BAA  0E01               	movlw	1
 22330  003BAC  6E2A               	movwf	?_inputHandler,c
 22331  003BAE  0012               	return	
 22332  003BB0                     i2l7932:
 22333                           
 22334                           ;UI.c: 459: enter = 1;
 22335  003BB0  0E00               	movlw	0
 22336  003BB2  6E68               	movwf	_enter+1,c
 22337  003BB4  0E01               	movlw	1
 22338  003BB6  6E67               	movwf	_enter,c
 22339                           
 22340                           ;UI.c: 460: return 1;
 22341  003BB8  0E00               	movlw	0
 22342  003BBA  6E2B               	movwf	?_inputHandler+1,c
 22343  003BBC  0E01               	movlw	1
 22344  003BBE  6E2A               	movwf	?_inputHandler,c
 22345  003BC0  0012               	return	
 22346  003BC2                     i2l7936:
 22347                           
 22348                           ;UI.c: 462: back = 1;
 22349  003BC2  0E00               	movlw	0
 22350  003BC4  6E64               	movwf	_back+1,c
 22351  003BC6  0E01               	movlw	1
 22352  003BC8  6E63               	movwf	_back,c
 22353                           
 22354                           ;UI.c: 463: return 1;
 22355  003BCA  0E00               	movlw	0
 22356  003BCC  6E2B               	movwf	?_inputHandler+1,c
 22357  003BCE  0E01               	movlw	1
 22358  003BD0  6E2A               	movwf	?_inputHandler,c
 22359  003BD2  0012               	return	
 22360  003BD4                     i2l7940:
 22361                           
 22362                           ;UI.c: 466: return 1;
 22363  003BD4  0E00               	movlw	0
 22364  003BD6  6E2B               	movwf	?_inputHandler+1,c
 22365  003BD8  0E01               	movlw	1
 22366  003BDA  6E2A               	movwf	?_inputHandler,c
 22367                           
 22368                           ;UI.c: 467: }
 22369  003BDC  0012               	return	
 22370  003BDE                     i2l7946:
 22371  003BDE  507D               	movf	_input,w,c	;volatile
 22372                           
 22373                           ; Switch size 1, requested type "space"
 22374                           ; Number of cases is 7, Range of values is 49 to 68
 22375                           ; switch strategies available:
 22376                           ; Name         Instructions Cycles
 22377                           ; simple_byte           22    12 (average)
 22378                           ;	Chosen strategy is simple_byte
 22379  003BE0  0A31               	xorlw	49	; case 49
 22380  003BE2  B4D8               	btfsc	status,2,c
 22381  003BE4  D789               	goto	i2l7876
 22382  003BE6  0A03               	xorlw	3	; case 50
 22383  003BE8  B4D8               	btfsc	status,2,c
 22384  003BEA  D799               	goto	i2l7890
 22385  003BEC  0A01               	xorlw	1	; case 51
 22386  003BEE  B4D8               	btfsc	status,2,c
 22387  003BF0  D7BA               	goto	i2l7910
 22388  003BF2  0A72               	xorlw	114	; case 65
 22389  003BF4  B4D8               	btfsc	status,2,c
 22390  003BF6  D7CA               	goto	i2l7924
 22391  003BF8  0A03               	xorlw	3	; case 66
 22392  003BFA  B4D8               	btfsc	status,2,c
 22393  003BFC  D7D0               	goto	i2l7928
 22394  003BFE  0A01               	xorlw	1	; case 67
 22395  003C00  B4D8               	btfsc	status,2,c
 22396  003C02  D7D6               	goto	i2l7932
 22397  003C04  0A07               	xorlw	7	; case 68
 22398  003C06  B4D8               	btfsc	status,2,c
 22399  003C08  D7DC               	goto	i2l7936
 22400  003C0A  D7E4               	goto	i2l7940
 22401  003C0C                     __end_of_inputHandler:
 22402                           	opt stack 0
 22403                           pclatu	equ	0xFFB
 22404                           pclath	equ	0xFFA
 22405                           tblptru	equ	0xFF8
 22406                           tblptrh	equ	0xFF7
 22407                           tblptrl	equ	0xFF6
 22408                           tablat	equ	0xFF5
 22409                           prodh	equ	0xFF4
 22410                           prodl	equ	0xFF3
 22411                           intcon	equ	0xFF2
 22412                           intcon2	equ	0xFF1
 22413                           intcon3	equ	0xFF0
 22414                           indf0	equ	0xFEF
 22415                           postinc0	equ	0xFEE
 22416                           fsr0h	equ	0xFEA
 22417                           fsr0l	equ	0xFE9
 22418                           wreg	equ	0xFE8
 22419                           postdec1	equ	0xFE5
 22420                           fsr1h	equ	0xFE2
 22421                           fsr1l	equ	0xFE1
 22422                           indf2	equ	0xFDF
 22423                           postinc2	equ	0xFDE
 22424                           postdec2	equ	0xFDD
 22425                           fsr2h	equ	0xFDA
 22426                           fsr2l	equ	0xFD9
 22427                           status	equ	0xFD8
 22428                           
 22429 ;; *************** function i2_change_state_to_menu_22 *****************
 22430 ;; Defined at:
 22431 ;;		line 501 in file "UI.c"
 22432 ;; Parameters:    Size  Location     Type
 22433 ;;		None
 22434 ;; Auto vars:     Size  Location     Type
 22435 ;;		None
 22436 ;; Return value:  Size  Location     Type
 22437 ;;                  1    wreg      void 
 22438 ;; Registers used:
 22439 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22440 ;; Tracked objects:
 22441 ;;		On entry : 0/0
 22442 ;;		On exit  : 0/0
 22443 ;;		Unchanged: 0/0
 22444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22445 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22446 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22447 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22448 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22449 ;;Total ram usage:        0 bytes
 22450 ;; Hardware stack levels used:    1
 22451 ;; Hardware stack levels required when called:    3
 22452 ;; This function calls:
 22453 ;;		i2_lcdInst
 22454 ;;		i2_printf
 22455 ;; This function is called by:
 22456 ;;		_updateMenu
 22457 ;;		_inputHandler
 22458 ;; This function uses a non-reentrant model
 22459 ;;
 22460                           
 22461                           	psect	text72
 22462  005AFC                     __ptext72:
 22463                           	opt stack 0
 22464  005AFC                     i2_change_state_to_menu_22:
 22465                           	opt stack 19
 22466                           
 22467                           ;UI.c: 502: cur_state = 22;
 22468                           
 22469                           ;incstack = 0
 22470  005AFC  0E00               	movlw	0
 22471  005AFE  0100               	movlb	0	; () banked
 22472  005B00  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22473  005B02  0E16               	movlw	22
 22474  005B04  6FE6               	movwf	_cur_state& (0+255),b
 22475                           
 22476                           ; BSR set to: 0
 22477                           ;UI.c: 504: lcdInst(0b10000000);;
 22478  005B06  0E80               	movlw	128
 22479  005B08  ECBD  F02F         	call	i2_lcdInst
 22480                           
 22481                           ;UI.c: 505: printf("2. SORT        <");
 22482  005B0C  0ED3               	movlw	low STR_34
 22483  005B0E  6E0D               	movwf	i2printf@f,c
 22484  005B10  0EFD               	movlw	high STR_34
 22485  005B12  6E0E               	movwf	i2printf@f+1,c
 22486  005B14  EC4B  F014         	call	i2_printf	;wreg free
 22487                           
 22488                           ;UI.c: 506: lcdInst(0b11000000);;
 22489  005B18  0EC0               	movlw	192
 22490  005B1A  ECBD  F02F         	call	i2_lcdInst
 22491                           
 22492                           ;UI.c: 507: printf("3. LOGS         ");
 22493  005B1E  0E18               	movlw	low STR_36
 22494  005B20  6E0D               	movwf	i2printf@f,c
 22495  005B22  0EFD               	movlw	high STR_36
 22496  005B24  6E0E               	movwf	i2printf@f+1,c
 22497  005B26  EC4B  F014         	call	i2_printf	;wreg free
 22498  005B2A  0012               	return		;funcret
 22499  005B2C                     __end_ofi2_change_state_to_menu_22:
 22500                           	opt stack 0
 22501                           pclatu	equ	0xFFB
 22502                           pclath	equ	0xFFA
 22503                           tblptru	equ	0xFF8
 22504                           tblptrh	equ	0xFF7
 22505                           tblptrl	equ	0xFF6
 22506                           tablat	equ	0xFF5
 22507                           prodh	equ	0xFF4
 22508                           prodl	equ	0xFF3
 22509                           intcon	equ	0xFF2
 22510                           intcon2	equ	0xFF1
 22511                           intcon3	equ	0xFF0
 22512                           indf0	equ	0xFEF
 22513                           postinc0	equ	0xFEE
 22514                           fsr0h	equ	0xFEA
 22515                           fsr0l	equ	0xFE9
 22516                           wreg	equ	0xFE8
 22517                           postdec1	equ	0xFE5
 22518                           fsr1h	equ	0xFE2
 22519                           fsr1l	equ	0xFE1
 22520                           indf2	equ	0xFDF
 22521                           postinc2	equ	0xFDE
 22522                           postdec2	equ	0xFDD
 22523                           fsr2h	equ	0xFDA
 22524                           fsr2l	equ	0xFD9
 22525                           status	equ	0xFD8
 22526                           
 22527 ;; *************** function i2_change_state_to_menu_12 *****************
 22528 ;; Defined at:
 22529 ;;		line 493 in file "UI.c"
 22530 ;; Parameters:    Size  Location     Type
 22531 ;;		None
 22532 ;; Auto vars:     Size  Location     Type
 22533 ;;		None
 22534 ;; Return value:  Size  Location     Type
 22535 ;;                  1    wreg      void 
 22536 ;; Registers used:
 22537 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22538 ;; Tracked objects:
 22539 ;;		On entry : 0/0
 22540 ;;		On exit  : 0/0
 22541 ;;		Unchanged: 0/0
 22542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22543 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22544 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22545 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22546 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22547 ;;Total ram usage:        0 bytes
 22548 ;; Hardware stack levels used:    1
 22549 ;; Hardware stack levels required when called:    3
 22550 ;; This function calls:
 22551 ;;		i2_lcdInst
 22552 ;;		i2_printf
 22553 ;; This function is called by:
 22554 ;;		_updateMenu
 22555 ;;		_inputHandler
 22556 ;; This function uses a non-reentrant model
 22557 ;;
 22558                           
 22559                           	psect	text73
 22560  005B2C                     __ptext73:
 22561                           	opt stack 0
 22562  005B2C                     i2_change_state_to_menu_12:
 22563                           	opt stack 19
 22564                           
 22565                           ;UI.c: 494: cur_state = 12;
 22566                           
 22567                           ;incstack = 0
 22568  005B2C  0E00               	movlw	0
 22569  005B2E  0100               	movlb	0	; () banked
 22570  005B30  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22571  005B32  0E0C               	movlw	12
 22572  005B34  6FE6               	movwf	_cur_state& (0+255),b
 22573                           
 22574                           ; BSR set to: 0
 22575                           ;UI.c: 496: lcdInst(0b10000000);;
 22576  005B36  0E80               	movlw	128
 22577  005B38  ECBD  F02F         	call	i2_lcdInst
 22578                           
 22579                           ;UI.c: 497: printf("1. DATE/TIME    ");
 22580  005B3C  0E3A               	movlw	low STR_33
 22581  005B3E  6E0D               	movwf	i2printf@f,c
 22582  005B40  0EFD               	movlw	high STR_33
 22583  005B42  6E0E               	movwf	i2printf@f+1,c
 22584  005B44  EC4B  F014         	call	i2_printf	;wreg free
 22585                           
 22586                           ;UI.c: 498: lcdInst(0b11000000);;
 22587  005B48  0EC0               	movlw	192
 22588  005B4A  ECBD  F02F         	call	i2_lcdInst
 22589                           
 22590                           ;UI.c: 499: printf("2. SORT        <");
 22591  005B4E  0ED3               	movlw	low STR_34
 22592  005B50  6E0D               	movwf	i2printf@f,c
 22593  005B52  0EFD               	movlw	high STR_34
 22594  005B54  6E0E               	movwf	i2printf@f+1,c
 22595  005B56  EC4B  F014         	call	i2_printf	;wreg free
 22596  005B5A  0012               	return		;funcret
 22597  005B5C                     __end_ofi2_change_state_to_menu_12:
 22598                           	opt stack 0
 22599                           pclatu	equ	0xFFB
 22600                           pclath	equ	0xFFA
 22601                           tblptru	equ	0xFF8
 22602                           tblptrh	equ	0xFF7
 22603                           tblptrl	equ	0xFF6
 22604                           tablat	equ	0xFF5
 22605                           prodh	equ	0xFF4
 22606                           prodl	equ	0xFF3
 22607                           intcon	equ	0xFF2
 22608                           intcon2	equ	0xFF1
 22609                           intcon3	equ	0xFF0
 22610                           indf0	equ	0xFEF
 22611                           postinc0	equ	0xFEE
 22612                           fsr0h	equ	0xFEA
 22613                           fsr0l	equ	0xFE9
 22614                           wreg	equ	0xFE8
 22615                           postdec1	equ	0xFE5
 22616                           fsr1h	equ	0xFE2
 22617                           fsr1l	equ	0xFE1
 22618                           indf2	equ	0xFDF
 22619                           postinc2	equ	0xFDE
 22620                           postdec2	equ	0xFDD
 22621                           fsr2h	equ	0xFDA
 22622                           fsr2l	equ	0xFD9
 22623                           status	equ	0xFD8
 22624                           
 22625 ;; *************** function _change_state_to_menu_23 *****************
 22626 ;; Defined at:
 22627 ;;		line 509 in file "UI.c"
 22628 ;; Parameters:    Size  Location     Type
 22629 ;;		None
 22630 ;; Auto vars:     Size  Location     Type
 22631 ;;		None
 22632 ;; Return value:  Size  Location     Type
 22633 ;;                  1    wreg      void 
 22634 ;; Registers used:
 22635 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22636 ;; Tracked objects:
 22637 ;;		On entry : 0/0
 22638 ;;		On exit  : 0/0
 22639 ;;		Unchanged: 0/0
 22640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22641 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22642 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22643 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22644 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22645 ;;Total ram usage:        0 bytes
 22646 ;; Hardware stack levels used:    1
 22647 ;; Hardware stack levels required when called:    3
 22648 ;; This function calls:
 22649 ;;		i2_lcdInst
 22650 ;;		i2_printf
 22651 ;; This function is called by:
 22652 ;;		_updateMenu
 22653 ;;		_inputHandler
 22654 ;; This function uses a non-reentrant model
 22655 ;;
 22656                           
 22657                           	psect	text74
 22658  005B5C                     __ptext74:
 22659                           	opt stack 0
 22660  005B5C                     _change_state_to_menu_23:
 22661                           	opt stack 18
 22662                           
 22663                           ;UI.c: 510: cur_state = 23;
 22664                           
 22665                           ;incstack = 0
 22666  005B5C  0E00               	movlw	0
 22667  005B5E  0100               	movlb	0	; () banked
 22668  005B60  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22669  005B62  0E17               	movlw	23
 22670  005B64  6FE6               	movwf	_cur_state& (0+255),b
 22671                           
 22672                           ; BSR set to: 0
 22673                           ;UI.c: 512: lcdInst(0b10000000);;
 22674  005B66  0E80               	movlw	128
 22675  005B68  ECBD  F02F         	call	i2_lcdInst
 22676                           
 22677                           ;UI.c: 513: printf("2. SORT         ");
 22678  005B6C  0E29               	movlw	low STR_32
 22679  005B6E  6E0D               	movwf	i2printf@f,c
 22680  005B70  0EFD               	movlw	high STR_32
 22681  005B72  6E0E               	movwf	i2printf@f+1,c
 22682  005B74  EC4B  F014         	call	i2_printf	;wreg free
 22683                           
 22684                           ;UI.c: 514: lcdInst(0b11000000);;
 22685  005B78  0EC0               	movlw	192
 22686  005B7A  ECBD  F02F         	call	i2_lcdInst
 22687                           
 22688                           ;UI.c: 515: printf("3. LOGS        <");
 22689  005B7E  0EC2               	movlw	low STR_38
 22690  005B80  6E0D               	movwf	i2printf@f,c
 22691  005B82  0EFD               	movlw	high STR_38
 22692  005B84  6E0E               	movwf	i2printf@f+1,c
 22693  005B86  EC4B  F014         	call	i2_printf	;wreg free
 22694  005B8A  0012               	return		;funcret
 22695  005B8C                     __end_of_change_state_to_menu_23:
 22696                           	opt stack 0
 22697                           pclatu	equ	0xFFB
 22698                           pclath	equ	0xFFA
 22699                           tblptru	equ	0xFF8
 22700                           tblptrh	equ	0xFF7
 22701                           tblptrl	equ	0xFF6
 22702                           tablat	equ	0xFF5
 22703                           prodh	equ	0xFF4
 22704                           prodl	equ	0xFF3
 22705                           intcon	equ	0xFF2
 22706                           intcon2	equ	0xFF1
 22707                           intcon3	equ	0xFF0
 22708                           indf0	equ	0xFEF
 22709                           postinc0	equ	0xFEE
 22710                           fsr0h	equ	0xFEA
 22711                           fsr0l	equ	0xFE9
 22712                           wreg	equ	0xFE8
 22713                           postdec1	equ	0xFE5
 22714                           fsr1h	equ	0xFE2
 22715                           fsr1l	equ	0xFE1
 22716                           indf2	equ	0xFDF
 22717                           postinc2	equ	0xFDE
 22718                           postdec2	equ	0xFDD
 22719                           fsr2h	equ	0xFDA
 22720                           fsr2l	equ	0xFD9
 22721                           status	equ	0xFD8
 22722                           
 22723 ;; *************** function _change_state_to_menu_11 *****************
 22724 ;; Defined at:
 22725 ;;		line 485 in file "UI.c"
 22726 ;; Parameters:    Size  Location     Type
 22727 ;;		None
 22728 ;; Auto vars:     Size  Location     Type
 22729 ;;		None
 22730 ;; Return value:  Size  Location     Type
 22731 ;;                  1    wreg      void 
 22732 ;; Registers used:
 22733 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22734 ;; Tracked objects:
 22735 ;;		On entry : 0/0
 22736 ;;		On exit  : 0/0
 22737 ;;		Unchanged: 0/0
 22738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22739 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22740 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22741 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22742 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22743 ;;Total ram usage:        0 bytes
 22744 ;; Hardware stack levels used:    1
 22745 ;; Hardware stack levels required when called:    3
 22746 ;; This function calls:
 22747 ;;		i2_lcdInst
 22748 ;;		i2_printf
 22749 ;; This function is called by:
 22750 ;;		_updateMenu
 22751 ;;		_inputHandler
 22752 ;; This function uses a non-reentrant model
 22753 ;;
 22754                           
 22755                           	psect	text75
 22756  005B8C                     __ptext75:
 22757                           	opt stack 0
 22758  005B8C                     _change_state_to_menu_11:
 22759                           	opt stack 18
 22760                           
 22761                           ;UI.c: 486: cur_state = 11;
 22762                           
 22763                           ;incstack = 0
 22764  005B8C  0E00               	movlw	0
 22765  005B8E  0100               	movlb	0	; () banked
 22766  005B90  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22767  005B92  0E0B               	movlw	11
 22768  005B94  6FE6               	movwf	_cur_state& (0+255),b
 22769                           
 22770                           ; BSR set to: 0
 22771                           ;UI.c: 488: lcdInst(0b10000000);;
 22772  005B96  0E80               	movlw	128
 22773  005B98  ECBD  F02F         	call	i2_lcdInst
 22774                           
 22775                           ;UI.c: 489: printf("1. DATE/TIME   <");
 22776  005B9C  0EE4               	movlw	low STR_31
 22777  005B9E  6E0D               	movwf	i2printf@f,c
 22778  005BA0  0EFD               	movlw	high STR_31
 22779  005BA2  6E0E               	movwf	i2printf@f+1,c
 22780  005BA4  EC4B  F014         	call	i2_printf	;wreg free
 22781                           
 22782                           ;UI.c: 490: lcdInst(0b11000000);;
 22783  005BA8  0EC0               	movlw	192
 22784  005BAA  ECBD  F02F         	call	i2_lcdInst
 22785                           
 22786                           ;UI.c: 491: printf("2. SORT         ");
 22787  005BAE  0E29               	movlw	low STR_32
 22788  005BB0  6E0D               	movwf	i2printf@f,c
 22789  005BB2  0EFD               	movlw	high STR_32
 22790  005BB4  6E0E               	movwf	i2printf@f+1,c
 22791  005BB6  EC4B  F014         	call	i2_printf	;wreg free
 22792  005BBA  0012               	return		;funcret
 22793  005BBC                     __end_of_change_state_to_menu_11:
 22794                           	opt stack 0
 22795                           pclatu	equ	0xFFB
 22796                           pclath	equ	0xFFA
 22797                           tblptru	equ	0xFF8
 22798                           tblptrh	equ	0xFF7
 22799                           tblptrl	equ	0xFF6
 22800                           tablat	equ	0xFF5
 22801                           prodh	equ	0xFF4
 22802                           prodl	equ	0xFF3
 22803                           intcon	equ	0xFF2
 22804                           intcon2	equ	0xFF1
 22805                           intcon3	equ	0xFF0
 22806                           indf0	equ	0xFEF
 22807                           postinc0	equ	0xFEE
 22808                           fsr0h	equ	0xFEA
 22809                           fsr0l	equ	0xFE9
 22810                           wreg	equ	0xFE8
 22811                           postdec1	equ	0xFE5
 22812                           fsr1h	equ	0xFE2
 22813                           fsr1l	equ	0xFE1
 22814                           indf2	equ	0xFDF
 22815                           postinc2	equ	0xFDE
 22816                           postdec2	equ	0xFDD
 22817                           fsr2h	equ	0xFDA
 22818                           fsr2l	equ	0xFD9
 22819                           status	equ	0xFD8
 22820                           
 22821 ;; *************** function _change_state_to_logs_34 *****************
 22822 ;; Defined at:
 22823 ;;		line 552 in file "UI.c"
 22824 ;; Parameters:    Size  Location     Type
 22825 ;;		None
 22826 ;; Auto vars:     Size  Location     Type
 22827 ;;		None
 22828 ;; Return value:  Size  Location     Type
 22829 ;;                  1    wreg      void 
 22830 ;; Registers used:
 22831 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22832 ;; Tracked objects:
 22833 ;;		On entry : 0/0
 22834 ;;		On exit  : 0/0
 22835 ;;		Unchanged: 0/0
 22836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22837 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22838 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22839 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22840 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22841 ;;Total ram usage:        0 bytes
 22842 ;; Hardware stack levels used:    1
 22843 ;; Hardware stack levels required when called:    3
 22844 ;; This function calls:
 22845 ;;		i2_lcdInst
 22846 ;;		i2_printf
 22847 ;; This function is called by:
 22848 ;;		_updateMenu
 22849 ;;		_inputHandler
 22850 ;; This function uses a non-reentrant model
 22851 ;;
 22852                           
 22853                           	psect	text76
 22854  005BBC                     __ptext76:
 22855                           	opt stack 0
 22856  005BBC                     _change_state_to_logs_34:
 22857                           	opt stack 18
 22858                           
 22859                           ;UI.c: 553: cur_state = 1034;
 22860                           
 22861                           ;incstack = 0
 22862  005BBC  0E04               	movlw	4
 22863  005BBE  0100               	movlb	0	; () banked
 22864  005BC0  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22865  005BC2  0E0A               	movlw	10
 22866  005BC4  6FE6               	movwf	_cur_state& (0+255),b
 22867                           
 22868                           ; BSR set to: 0
 22869                           ;UI.c: 554: lcdInst(0b10000000);;
 22870  005BC6  0E80               	movlw	128
 22871  005BC8  ECBD  F02F         	call	i2_lcdInst
 22872                           
 22873                           ;UI.c: 555: printf("LOG 3           ");
 22874  005BCC  0EF6               	movlw	low STR_44
 22875  005BCE  6E0D               	movwf	i2printf@f,c
 22876  005BD0  0EFC               	movlw	high STR_44
 22877  005BD2  6E0E               	movwf	i2printf@f+1,c
 22878  005BD4  EC4B  F014         	call	i2_printf	;wreg free
 22879                           
 22880                           ;UI.c: 556: lcdInst(0b11000000);;
 22881  005BD8  0EC0               	movlw	192
 22882  005BDA  ECBD  F02F         	call	i2_lcdInst
 22883                           
 22884                           ;UI.c: 557: printf("LOG 4          <");
 22885  005BDE  0EB1               	movlw	low STR_50
 22886  005BE0  6E0D               	movwf	i2printf@f,c
 22887  005BE2  0EFD               	movlw	high STR_50
 22888  005BE4  6E0E               	movwf	i2printf@f+1,c
 22889  005BE6  EC4B  F014         	call	i2_printf	;wreg free
 22890  005BEA  0012               	return		;funcret
 22891  005BEC                     __end_of_change_state_to_logs_34:
 22892                           	opt stack 0
 22893                           pclatu	equ	0xFFB
 22894                           pclath	equ	0xFFA
 22895                           tblptru	equ	0xFF8
 22896                           tblptrh	equ	0xFF7
 22897                           tblptrl	equ	0xFF6
 22898                           tablat	equ	0xFF5
 22899                           prodh	equ	0xFF4
 22900                           prodl	equ	0xFF3
 22901                           intcon	equ	0xFF2
 22902                           intcon2	equ	0xFF1
 22903                           intcon3	equ	0xFF0
 22904                           indf0	equ	0xFEF
 22905                           postinc0	equ	0xFEE
 22906                           fsr0h	equ	0xFEA
 22907                           fsr0l	equ	0xFE9
 22908                           wreg	equ	0xFE8
 22909                           postdec1	equ	0xFE5
 22910                           fsr1h	equ	0xFE2
 22911                           fsr1l	equ	0xFE1
 22912                           indf2	equ	0xFDF
 22913                           postinc2	equ	0xFDE
 22914                           postdec2	equ	0xFDD
 22915                           fsr2h	equ	0xFDA
 22916                           fsr2l	equ	0xFD9
 22917                           status	equ	0xFD8
 22918                           
 22919 ;; *************** function _change_state_to_logs_33 *****************
 22920 ;; Defined at:
 22921 ;;		line 545 in file "UI.c"
 22922 ;; Parameters:    Size  Location     Type
 22923 ;;		None
 22924 ;; Auto vars:     Size  Location     Type
 22925 ;;		None
 22926 ;; Return value:  Size  Location     Type
 22927 ;;                  1    wreg      void 
 22928 ;; Registers used:
 22929 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22930 ;; Tracked objects:
 22931 ;;		On entry : 0/0
 22932 ;;		On exit  : 0/0
 22933 ;;		Unchanged: 0/0
 22934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22935 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22936 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22937 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22938 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22939 ;;Total ram usage:        0 bytes
 22940 ;; Hardware stack levels used:    1
 22941 ;; Hardware stack levels required when called:    3
 22942 ;; This function calls:
 22943 ;;		i2_lcdInst
 22944 ;;		i2_printf
 22945 ;; This function is called by:
 22946 ;;		_updateMenu
 22947 ;;		_inputHandler
 22948 ;; This function uses a non-reentrant model
 22949 ;;
 22950                           
 22951                           	psect	text77
 22952  005BEC                     __ptext77:
 22953                           	opt stack 0
 22954  005BEC                     _change_state_to_logs_33:
 22955                           	opt stack 18
 22956                           
 22957                           ;UI.c: 546: cur_state = 1033;
 22958                           
 22959                           ;incstack = 0
 22960  005BEC  0E04               	movlw	4
 22961  005BEE  0100               	movlb	0	; () banked
 22962  005BF0  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22963  005BF2  0E09               	movlw	9
 22964  005BF4  6FE6               	movwf	_cur_state& (0+255),b
 22965                           
 22966                           ; BSR set to: 0
 22967                           ;UI.c: 547: lcdInst(0b10000000);;
 22968  005BF6  0E80               	movlw	128
 22969  005BF8  ECBD  F02F         	call	i2_lcdInst
 22970                           
 22971                           ;UI.c: 548: printf("LOG 3          <");
 22972  005BFC  0EA0               	movlw	low STR_46
 22973  005BFE  6E0D               	movwf	i2printf@f,c
 22974  005C00  0EFD               	movlw	high STR_46
 22975  005C02  6E0E               	movwf	i2printf@f+1,c
 22976  005C04  EC4B  F014         	call	i2_printf	;wreg free
 22977                           
 22978                           ;UI.c: 549: lcdInst(0b11000000);;
 22979  005C08  0EC0               	movlw	192
 22980  005C0A  ECBD  F02F         	call	i2_lcdInst
 22981                           
 22982                           ;UI.c: 550: printf("LOG 4           ");
 22983  005C0E  0E07               	movlw	low STR_48
 22984  005C10  6E0D               	movwf	i2printf@f,c
 22985  005C12  0EFD               	movlw	high STR_48
 22986  005C14  6E0E               	movwf	i2printf@f+1,c
 22987  005C16  EC4B  F014         	call	i2_printf	;wreg free
 22988  005C1A  0012               	return		;funcret
 22989  005C1C                     __end_of_change_state_to_logs_33:
 22990                           	opt stack 0
 22991                           pclatu	equ	0xFFB
 22992                           pclath	equ	0xFFA
 22993                           tblptru	equ	0xFF8
 22994                           tblptrh	equ	0xFF7
 22995                           tblptrl	equ	0xFF6
 22996                           tablat	equ	0xFF5
 22997                           prodh	equ	0xFF4
 22998                           prodl	equ	0xFF3
 22999                           intcon	equ	0xFF2
 23000                           intcon2	equ	0xFF1
 23001                           intcon3	equ	0xFF0
 23002                           indf0	equ	0xFEF
 23003                           postinc0	equ	0xFEE
 23004                           fsr0h	equ	0xFEA
 23005                           fsr0l	equ	0xFE9
 23006                           wreg	equ	0xFE8
 23007                           postdec1	equ	0xFE5
 23008                           fsr1h	equ	0xFE2
 23009                           fsr1l	equ	0xFE1
 23010                           indf2	equ	0xFDF
 23011                           postinc2	equ	0xFDE
 23012                           postdec2	equ	0xFDD
 23013                           fsr2h	equ	0xFDA
 23014                           fsr2l	equ	0xFD9
 23015                           status	equ	0xFD8
 23016                           
 23017 ;; *************** function _change_state_to_logs_23 *****************
 23018 ;; Defined at:
 23019 ;;		line 538 in file "UI.c"
 23020 ;; Parameters:    Size  Location     Type
 23021 ;;		None
 23022 ;; Auto vars:     Size  Location     Type
 23023 ;;		None
 23024 ;; Return value:  Size  Location     Type
 23025 ;;                  1    wreg      void 
 23026 ;; Registers used:
 23027 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23028 ;; Tracked objects:
 23029 ;;		On entry : 0/0
 23030 ;;		On exit  : 0/0
 23031 ;;		Unchanged: 0/0
 23032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23033 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23034 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23035 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23036 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23037 ;;Total ram usage:        0 bytes
 23038 ;; Hardware stack levels used:    1
 23039 ;; Hardware stack levels required when called:    3
 23040 ;; This function calls:
 23041 ;;		i2_lcdInst
 23042 ;;		i2_printf
 23043 ;; This function is called by:
 23044 ;;		_updateMenu
 23045 ;;		_inputHandler
 23046 ;; This function uses a non-reentrant model
 23047 ;;
 23048                           
 23049                           	psect	text78
 23050  005CDA                     __ptext78:
 23051                           	opt stack 0
 23052  005CDA                     _change_state_to_logs_23:
 23053                           	opt stack 18
 23054                           
 23055                           ;UI.c: 539: cur_state = 1023;
 23056                           
 23057                           ;incstack = 0
 23058  005CDA  0E03               	movlw	3
 23059  005CDC  0100               	movlb	0	; () banked
 23060  005CDE  6FE7               	movwf	(_cur_state+1)& (0+255),b
 23061  005CE0  69E6               	setf	_cur_state& (0+255),b
 23062                           
 23063                           ; BSR set to: 0
 23064                           ;UI.c: 540: lcdInst(0b10000000);;
 23065  005CE2  0E80               	movlw	128
 23066  005CE4  ECBD  F02F         	call	i2_lcdInst
 23067                           
 23068                           ;UI.c: 541: printf("LOG 2           ");
 23069  005CE8  0EE5               	movlw	low STR_40
 23070  005CEA  6E0D               	movwf	i2printf@f,c
 23071  005CEC  0EFC               	movlw	high STR_40
 23072  005CEE  6E0E               	movwf	i2printf@f+1,c
 23073  005CF0  EC4B  F014         	call	i2_printf	;wreg free
 23074                           
 23075                           ;UI.c: 542: lcdInst(0b11000000);;
 23076  005CF4  0EC0               	movlw	192
 23077  005CF6  ECBD  F02F         	call	i2_lcdInst
 23078                           
 23079                           ;UI.c: 543: printf("LOG 3          <");
 23080  005CFA  0EA0               	movlw	low STR_46
 23081  005CFC  6E0D               	movwf	i2printf@f,c
 23082  005CFE  0EFD               	movlw	high STR_46
 23083  005D00  6E0E               	movwf	i2printf@f+1,c
 23084  005D02  EC4B  F014         	call	i2_printf	;wreg free
 23085  005D06  0012               	return		;funcret
 23086  005D08                     __end_of_change_state_to_logs_23:
 23087                           	opt stack 0
 23088                           pclatu	equ	0xFFB
 23089                           pclath	equ	0xFFA
 23090                           tblptru	equ	0xFF8
 23091                           tblptrh	equ	0xFF7
 23092                           tblptrl	equ	0xFF6
 23093                           tablat	equ	0xFF5
 23094                           prodh	equ	0xFF4
 23095                           prodl	equ	0xFF3
 23096                           intcon	equ	0xFF2
 23097                           intcon2	equ	0xFF1
 23098                           intcon3	equ	0xFF0
 23099                           indf0	equ	0xFEF
 23100                           postinc0	equ	0xFEE
 23101                           fsr0h	equ	0xFEA
 23102                           fsr0l	equ	0xFE9
 23103                           wreg	equ	0xFE8
 23104                           postdec1	equ	0xFE5
 23105                           fsr1h	equ	0xFE2
 23106                           fsr1l	equ	0xFE1
 23107                           indf2	equ	0xFDF
 23108                           postinc2	equ	0xFDE
 23109                           postdec2	equ	0xFDD
 23110                           fsr2h	equ	0xFDA
 23111                           fsr2l	equ	0xFD9
 23112                           status	equ	0xFD8
 23113                           
 23114 ;; *************** function _change_state_to_logs_22 *****************
 23115 ;; Defined at:
 23116 ;;		line 531 in file "UI.c"
 23117 ;; Parameters:    Size  Location     Type
 23118 ;;		None
 23119 ;; Auto vars:     Size  Location     Type
 23120 ;;		None
 23121 ;; Return value:  Size  Location     Type
 23122 ;;                  1    wreg      void 
 23123 ;; Registers used:
 23124 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23125 ;; Tracked objects:
 23126 ;;		On entry : 0/0
 23127 ;;		On exit  : 0/0
 23128 ;;		Unchanged: 0/0
 23129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23130 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23131 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23132 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23133 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23134 ;;Total ram usage:        0 bytes
 23135 ;; Hardware stack levels used:    1
 23136 ;; Hardware stack levels required when called:    3
 23137 ;; This function calls:
 23138 ;;		i2_lcdInst
 23139 ;;		i2_printf
 23140 ;; This function is called by:
 23141 ;;		_updateMenu
 23142 ;;		_inputHandler
 23143 ;; This function uses a non-reentrant model
 23144 ;;
 23145                           
 23146                           	psect	text79
 23147  005C1C                     __ptext79:
 23148                           	opt stack 0
 23149  005C1C                     _change_state_to_logs_22:
 23150                           	opt stack 18
 23151                           
 23152                           ;UI.c: 532: cur_state = 1022;
 23153                           
 23154                           ;incstack = 0
 23155  005C1C  0E03               	movlw	3
 23156  005C1E  0100               	movlb	0	; () banked
 23157  005C20  6FE7               	movwf	(_cur_state+1)& (0+255),b
 23158  005C22  0EFE               	movlw	254
 23159  005C24  6FE6               	movwf	_cur_state& (0+255),b
 23160                           
 23161                           ; BSR set to: 0
 23162                           ;UI.c: 533: lcdInst(0b10000000);;
 23163  005C26  0E80               	movlw	128
 23164  005C28  ECBD  F02F         	call	i2_lcdInst
 23165                           
 23166                           ;UI.c: 534: printf("LOG 2          <");
 23167  005C2C  0E8F               	movlw	low STR_42
 23168  005C2E  6E0D               	movwf	i2printf@f,c
 23169  005C30  0EFD               	movlw	high STR_42
 23170  005C32  6E0E               	movwf	i2printf@f+1,c
 23171  005C34  EC4B  F014         	call	i2_printf	;wreg free
 23172                           
 23173                           ;UI.c: 535: lcdInst(0b11000000);;
 23174  005C38  0EC0               	movlw	192
 23175  005C3A  ECBD  F02F         	call	i2_lcdInst
 23176                           
 23177                           ;UI.c: 536: printf("LOG 3           ");
 23178  005C3E  0EF6               	movlw	low STR_44
 23179  005C40  6E0D               	movwf	i2printf@f,c
 23180  005C42  0EFC               	movlw	high STR_44
 23181  005C44  6E0E               	movwf	i2printf@f+1,c
 23182  005C46  EC4B  F014         	call	i2_printf	;wreg free
 23183  005C4A  0012               	return		;funcret
 23184  005C4C                     __end_of_change_state_to_logs_22:
 23185                           	opt stack 0
 23186                           pclatu	equ	0xFFB
 23187                           pclath	equ	0xFFA
 23188                           tblptru	equ	0xFF8
 23189                           tblptrh	equ	0xFF7
 23190                           tblptrl	equ	0xFF6
 23191                           tablat	equ	0xFF5
 23192                           prodh	equ	0xFF4
 23193                           prodl	equ	0xFF3
 23194                           intcon	equ	0xFF2
 23195                           intcon2	equ	0xFF1
 23196                           intcon3	equ	0xFF0
 23197                           indf0	equ	0xFEF
 23198                           postinc0	equ	0xFEE
 23199                           fsr0h	equ	0xFEA
 23200                           fsr0l	equ	0xFE9
 23201                           wreg	equ	0xFE8
 23202                           postdec1	equ	0xFE5
 23203                           fsr1h	equ	0xFE2
 23204                           fsr1l	equ	0xFE1
 23205                           indf2	equ	0xFDF
 23206                           postinc2	equ	0xFDE
 23207                           postdec2	equ	0xFDD
 23208                           fsr2h	equ	0xFDA
 23209                           fsr2l	equ	0xFD9
 23210                           status	equ	0xFD8
 23211                           
 23212 ;; *************** function _change_state_to_logs_12 *****************
 23213 ;; Defined at:
 23214 ;;		line 524 in file "UI.c"
 23215 ;; Parameters:    Size  Location     Type
 23216 ;;		None
 23217 ;; Auto vars:     Size  Location     Type
 23218 ;;		None
 23219 ;; Return value:  Size  Location     Type
 23220 ;;                  1    wreg      void 
 23221 ;; Registers used:
 23222 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23223 ;; Tracked objects:
 23224 ;;		On entry : 0/0
 23225 ;;		On exit  : 0/0
 23226 ;;		Unchanged: 0/0
 23227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23228 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23229 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23230 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23231 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23232 ;;Total ram usage:        0 bytes
 23233 ;; Hardware stack levels used:    1
 23234 ;; Hardware stack levels required when called:    3
 23235 ;; This function calls:
 23236 ;;		i2_lcdInst
 23237 ;;		i2_printf
 23238 ;; This function is called by:
 23239 ;;		_updateMenu
 23240 ;;		_inputHandler
 23241 ;; This function uses a non-reentrant model
 23242 ;;
 23243                           
 23244                           	psect	text80
 23245  005C4C                     __ptext80:
 23246                           	opt stack 0
 23247  005C4C                     _change_state_to_logs_12:
 23248                           	opt stack 18
 23249                           
 23250                           ;UI.c: 525: cur_state = 1012;
 23251                           
 23252                           ;incstack = 0
 23253  005C4C  0E03               	movlw	3
 23254  005C4E  0100               	movlb	0	; () banked
 23255  005C50  6FE7               	movwf	(_cur_state+1)& (0+255),b
 23256  005C52  0EF4               	movlw	244
 23257  005C54  6FE6               	movwf	_cur_state& (0+255),b
 23258                           
 23259                           ; BSR set to: 0
 23260                           ;UI.c: 526: lcdInst(0b10000000);;
 23261  005C56  0E80               	movlw	128
 23262  005C58  ECBD  F02F         	call	i2_lcdInst
 23263                           
 23264                           ;UI.c: 527: printf("LOG 1           ");
 23265  005C5C  0ED4               	movlw	low STR_41
 23266  005C5E  6E0D               	movwf	i2printf@f,c
 23267  005C60  0EFC               	movlw	high STR_41
 23268  005C62  6E0E               	movwf	i2printf@f+1,c
 23269  005C64  EC4B  F014         	call	i2_printf	;wreg free
 23270                           
 23271                           ;UI.c: 528: lcdInst(0b11000000);;
 23272  005C68  0EC0               	movlw	192
 23273  005C6A  ECBD  F02F         	call	i2_lcdInst
 23274                           
 23275                           ;UI.c: 529: printf("LOG 2          <");
 23276  005C6E  0E8F               	movlw	low STR_42
 23277  005C70  6E0D               	movwf	i2printf@f,c
 23278  005C72  0EFD               	movlw	high STR_42
 23279  005C74  6E0E               	movwf	i2printf@f+1,c
 23280  005C76  EC4B  F014         	call	i2_printf	;wreg free
 23281  005C7A  0012               	return		;funcret
 23282  005C7C                     __end_of_change_state_to_logs_12:
 23283                           	opt stack 0
 23284                           pclatu	equ	0xFFB
 23285                           pclath	equ	0xFFA
 23286                           tblptru	equ	0xFF8
 23287                           tblptrh	equ	0xFF7
 23288                           tblptrl	equ	0xFF6
 23289                           tablat	equ	0xFF5
 23290                           prodh	equ	0xFF4
 23291                           prodl	equ	0xFF3
 23292                           intcon	equ	0xFF2
 23293                           intcon2	equ	0xFF1
 23294                           intcon3	equ	0xFF0
 23295                           indf0	equ	0xFEF
 23296                           postinc0	equ	0xFEE
 23297                           fsr0h	equ	0xFEA
 23298                           fsr0l	equ	0xFE9
 23299                           wreg	equ	0xFE8
 23300                           postdec1	equ	0xFE5
 23301                           fsr1h	equ	0xFE2
 23302                           fsr1l	equ	0xFE1
 23303                           indf2	equ	0xFDF
 23304                           postinc2	equ	0xFDE
 23305                           postdec2	equ	0xFDD
 23306                           fsr2h	equ	0xFDA
 23307                           fsr2l	equ	0xFD9
 23308                           status	equ	0xFD8
 23309                           
 23310 ;; *************** function _change_state_to_logs_11 *****************
 23311 ;; Defined at:
 23312 ;;		line 517 in file "UI.c"
 23313 ;; Parameters:    Size  Location     Type
 23314 ;;		None
 23315 ;; Auto vars:     Size  Location     Type
 23316 ;;		None
 23317 ;; Return value:  Size  Location     Type
 23318 ;;                  1    wreg      void 
 23319 ;; Registers used:
 23320 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23321 ;; Tracked objects:
 23322 ;;		On entry : 0/0
 23323 ;;		On exit  : 0/0
 23324 ;;		Unchanged: 0/0
 23325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23326 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23327 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23328 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23329 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23330 ;;Total ram usage:        0 bytes
 23331 ;; Hardware stack levels used:    1
 23332 ;; Hardware stack levels required when called:    3
 23333 ;; This function calls:
 23334 ;;		i2_lcdInst
 23335 ;;		i2_printf
 23336 ;; This function is called by:
 23337 ;;		_updateMenu
 23338 ;;		_inputHandler
 23339 ;; This function uses a non-reentrant model
 23340 ;;
 23341                           
 23342                           	psect	text81
 23343  005C7C                     __ptext81:
 23344                           	opt stack 0
 23345  005C7C                     _change_state_to_logs_11:
 23346                           	opt stack 18
 23347                           
 23348                           ;UI.c: 518: cur_state = 1011;
 23349                           
 23350                           ;incstack = 0
 23351  005C7C  0E03               	movlw	3
 23352  005C7E  0100               	movlb	0	; () banked
 23353  005C80  6FE7               	movwf	(_cur_state+1)& (0+255),b
 23354  005C82  0EF3               	movlw	243
 23355  005C84  6FE6               	movwf	_cur_state& (0+255),b
 23356                           
 23357                           ; BSR set to: 0
 23358                           ;UI.c: 519: lcdInst(0b10000000);;
 23359  005C86  0E80               	movlw	128
 23360  005C88  ECBD  F02F         	call	i2_lcdInst
 23361                           
 23362                           ;UI.c: 520: printf("LOG 1          <");
 23363  005C8C  0E7E               	movlw	low STR_39
 23364  005C8E  6E0D               	movwf	i2printf@f,c
 23365  005C90  0EFD               	movlw	high STR_39
 23366  005C92  6E0E               	movwf	i2printf@f+1,c
 23367  005C94  EC4B  F014         	call	i2_printf	;wreg free
 23368                           
 23369                           ;UI.c: 521: lcdInst(0b11000000);;
 23370  005C98  0EC0               	movlw	192
 23371  005C9A  ECBD  F02F         	call	i2_lcdInst
 23372                           
 23373                           ;UI.c: 522: printf("LOG 2           ");
 23374  005C9E  0EE5               	movlw	low STR_40
 23375  005CA0  6E0D               	movwf	i2printf@f,c
 23376  005CA2  0EFC               	movlw	high STR_40
 23377  005CA4  6E0E               	movwf	i2printf@f+1,c
 23378  005CA6  EC4B  F014         	call	i2_printf	;wreg free
 23379  005CAA  0012               	return		;funcret
 23380  005CAC                     __end_of_change_state_to_logs_11:
 23381                           	opt stack 0
 23382                           pclatu	equ	0xFFB
 23383                           pclath	equ	0xFFA
 23384                           tblptru	equ	0xFF8
 23385                           tblptrh	equ	0xFF7
 23386                           tblptrl	equ	0xFF6
 23387                           tablat	equ	0xFF5
 23388                           prodh	equ	0xFF4
 23389                           prodl	equ	0xFF3
 23390                           intcon	equ	0xFF2
 23391                           intcon2	equ	0xFF1
 23392                           intcon3	equ	0xFF0
 23393                           indf0	equ	0xFEF
 23394                           postinc0	equ	0xFEE
 23395                           fsr0h	equ	0xFEA
 23396                           fsr0l	equ	0xFE9
 23397                           wreg	equ	0xFE8
 23398                           postdec1	equ	0xFE5
 23399                           fsr1h	equ	0xFE2
 23400                           fsr1l	equ	0xFE1
 23401                           indf2	equ	0xFDF
 23402                           postinc2	equ	0xFDE
 23403                           postdec2	equ	0xFDD
 23404                           fsr2h	equ	0xFDA
 23405                           fsr2l	equ	0xFD9
 23406                           status	equ	0xFD8
 23407                           
 23408 ;; *************** function _dispLogs *****************
 23409 ;; Defined at:
 23410 ;;		line 470 in file "UI.c"
 23411 ;; Parameters:    Size  Location     Type
 23412 ;;  myLog           2   17[COMRAM] int 
 23413 ;; Auto vars:     Size  Location     Type
 23414 ;;		None
 23415 ;; Return value:  Size  Location     Type
 23416 ;;                  1    wreg      void 
 23417 ;; Registers used:
 23418 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 23419 ;; Tracked objects:
 23420 ;;		On entry : 0/0
 23421 ;;		On exit  : 0/0
 23422 ;;		Unchanged: 0/0
 23423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23424 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23425 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23426 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23427 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23428 ;;Total ram usage:        2 bytes
 23429 ;; Hardware stack levels used:    1
 23430 ;; Hardware stack levels required when called:    2
 23431 ;; This function calls:
 23432 ;;		_retrieveLog
 23433 ;; This function is called by:
 23434 ;;		_updateMenu
 23435 ;; This function uses a non-reentrant model
 23436 ;;
 23437                           
 23438                           	psect	text82
 23439  005E26                     __ptext82:
 23440                           	opt stack 0
 23441  005E26                     _dispLogs:
 23442                           	opt stack 20
 23443                           
 23444                           ;UI.c: 471: logstate = 1;
 23445                           
 23446                           ;incstack = 0
 23447  005E26  0E00               	movlw	0
 23448  005E28  0100               	movlb	0	; () banked
 23449  005E2A  6FF9               	movwf	(_logstate+1)& (0+255),b
 23450  005E2C  0E01               	movlw	1
 23451  005E2E  6FF8               	movwf	_logstate& (0+255),b
 23452                           
 23453                           ; BSR set to: 0
 23454                           ;UI.c: 472: log = myLog;
 23455  005E30  C012  F0EE         	movff	dispLogs@myLog,_log
 23456  005E34  C013  F0EF         	movff	dispLogs@myLog+1,_log+1
 23457                           
 23458                           ; BSR set to: 0
 23459                           ;UI.c: 473: retrieveLog(myLog - 1);
 23460  005E38  0EFF               	movlw	255
 23461  005E3A  2412               	addwf	dispLogs@myLog,w,c
 23462  005E3C  6E07               	movwf	retrieveLog@logNum,c
 23463  005E3E  0EFF               	movlw	255
 23464  005E40  2013               	addwfc	dispLogs@myLog+1,w,c
 23465  005E42  6E08               	movwf	retrieveLog@logNum+1,c
 23466  005E44  EC64  F021         	call	_retrieveLog	;wreg free
 23467  005E48  0012               	return		;funcret
 23468  005E4A                     __end_of_dispLogs:
 23469                           	opt stack 0
 23470                           pclatu	equ	0xFFB
 23471                           pclath	equ	0xFFA
 23472                           tblptru	equ	0xFF8
 23473                           tblptrh	equ	0xFF7
 23474                           tblptrl	equ	0xFF6
 23475                           tablat	equ	0xFF5
 23476                           prodh	equ	0xFF4
 23477                           prodl	equ	0xFF3
 23478                           intcon	equ	0xFF2
 23479                           intcon2	equ	0xFF1
 23480                           intcon3	equ	0xFF0
 23481                           indf0	equ	0xFEF
 23482                           postinc0	equ	0xFEE
 23483                           fsr0h	equ	0xFEA
 23484                           fsr0l	equ	0xFE9
 23485                           wreg	equ	0xFE8
 23486                           postdec1	equ	0xFE5
 23487                           fsr1h	equ	0xFE2
 23488                           fsr1l	equ	0xFE1
 23489                           indf2	equ	0xFDF
 23490                           postinc2	equ	0xFDE
 23491                           postdec2	equ	0xFDD
 23492                           fsr2h	equ	0xFDA
 23493                           fsr2l	equ	0xFD9
 23494                           status	equ	0xFD8
 23495                           
 23496 ;; *************** function _retrieveLog *****************
 23497 ;; Defined at:
 23498 ;;		line 138 in file "EEPROM.c"
 23499 ;; Parameters:    Size  Location     Type
 23500 ;;  logNum          2    6[COMRAM] int 
 23501 ;; Auto vars:     Size  Location     Type
 23502 ;;  i               2   13[COMRAM] int 
 23503 ;;  addr            2   15[COMRAM] unsigned short 
 23504 ;;  byte3           1   12[COMRAM] unsigned char 
 23505 ;;  byte2           1   11[COMRAM] unsigned char 
 23506 ;;  byte1           1   10[COMRAM] unsigned char 
 23507 ;; Return value:  Size  Location     Type
 23508 ;;                  1    wreg      void 
 23509 ;; Registers used:
 23510 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 23511 ;; Tracked objects:
 23512 ;;		On entry : 0/0
 23513 ;;		On exit  : 0/0
 23514 ;;		Unchanged: 0/0
 23515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23516 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23517 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23518 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23519 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23520 ;;Total ram usage:       11 bytes
 23521 ;; Hardware stack levels used:    1
 23522 ;; Hardware stack levels required when called:    1
 23523 ;; This function calls:
 23524 ;;		i2_EEPROM_read
 23525 ;;		i2___wmul
 23526 ;; This function is called by:
 23527 ;;		_dispLogs
 23528 ;; This function uses a non-reentrant model
 23529 ;;
 23530                           
 23531                           	psect	text83
 23532  0042C8                     __ptext83:
 23533                           	opt stack 0
 23534  0042C8                     _retrieveLog:
 23535                           	opt stack 20
 23536                           
 23537                           ;EEPROM.c: 144: unsigned short addr = 1 + logNum * 11;
 23538                           
 23539                           ;incstack = 0
 23540  0042C8  C007  F001         	movff	retrieveLog@logNum,i2___wmul@multiplier
 23541  0042CC  C008  F002         	movff	retrieveLog@logNum+1,i2___wmul@multiplier+1
 23542  0042D0  0E00               	movlw	0
 23543  0042D2  6E04               	movwf	i2___wmul@multiplicand+1,c
 23544  0042D4  0E0B               	movlw	11
 23545  0042D6  6E03               	movwf	i2___wmul@multiplicand,c
 23546  0042D8  ECED  F02E         	call	i2___wmul	;wreg free
 23547  0042DC  0E01               	movlw	1
 23548  0042DE  2401               	addwf	?i2___wmul,w,c
 23549  0042E0  6E10               	movwf	retrieveLog@addr,c
 23550  0042E2  0E00               	movlw	0
 23551  0042E4  2002               	addwfc	?i2___wmul+1,w,c
 23552  0042E6  6E11               	movwf	retrieveLog@addr+1,c
 23553                           
 23554                           ;EEPROM.c: 147: unsigned char byte1 = EEPROM_read(addr);
 23555  0042E8  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 23556  0042EC  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 23557  0042F0  EC89  F02F         	call	i2_EEPROM_read	;wreg free
 23558  0042F4  6E0B               	movwf	retrieveLog@byte1,c
 23559                           
 23560                           ;EEPROM.c: 148: log_completion = (int)(byte1 & 0b10000000);
 23561  0042F6  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 23562  0042FA  0E80               	movlw	128
 23563  0042FC  1609               	andwf	??_retrieveLog,f,c
 23564  0042FE  5009               	movf	??_retrieveLog,w,c
 23565  004300  0100               	movlb	0	; () banked
 23566  004302  6FF0               	movwf	_log_completion& (0+255),b
 23567  004304  6BF1               	clrf	(_log_completion+1)& (0+255),b
 23568                           
 23569                           ; BSR set to: 0
 23570                           ;EEPROM.c: 149: log_count_total = (int)(byte1 & 0b00001111);
 23571  004306  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 23572  00430A  0E0F               	movlw	15
 23573  00430C  1609               	andwf	??_retrieveLog,f,c
 23574  00430E  5009               	movf	??_retrieveLog,w,c
 23575  004310  0101               	movlb	1	; () banked
 23576  004312  6F45               	movwf	_log_count_total& (0+255),b
 23577  004314  6B46               	clrf	(_log_count_total+1)& (0+255),b
 23578                           
 23579                           ; BSR set to: 1
 23580                           ;EEPROM.c: 150: addr++;
 23581  004316  4A10               	infsnz	retrieveLog@addr,f,c
 23582  004318  2A11               	incf	retrieveLog@addr+1,f,c
 23583                           
 23584                           ; BSR set to: 1
 23585                           ;EEPROM.c: 153: unsigned char byte2 = EEPROM_read(addr);
 23586  00431A  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 23587  00431E  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 23588  004322  EC89  F02F         	call	i2_EEPROM_read	;wreg free
 23589  004326  6E0C               	movwf	retrieveLog@byte2,c
 23590                           
 23591                           ;EEPROM.c: 154: log_count_pop_no_tab = (int)((byte2 & 0b11110000)>> 4);
 23592  004328  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 23593  00432C  3A09               	swapf	??_retrieveLog,f,c
 23594  00432E  0E0F               	movlw	15
 23595  004330  1609               	andwf	??_retrieveLog,f,c
 23596  004332  0E0F               	movlw	15
 23597  004334  1609               	andwf	??_retrieveLog,f,c
 23598  004336  5009               	movf	??_retrieveLog,w,c
 23599  004338  0100               	movlb	0	; () banked
 23600  00433A  6FF2               	movwf	_log_count_pop_no_tab& (0+255),b
 23601  00433C  6BF3               	clrf	(_log_count_pop_no_tab+1)& (0+255),b
 23602                           
 23603                           ; BSR set to: 0
 23604                           ;EEPROM.c: 155: log_count_pop_w_tab = (int)(byte2 & 0b00001111);
 23605  00433E  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 23606  004342  0E0F               	movlw	15
 23607  004344  1609               	andwf	??_retrieveLog,f,c
 23608  004346  5009               	movf	??_retrieveLog,w,c
 23609  004348  0100               	movlb	0	; () banked
 23610  00434A  6FF4               	movwf	_log_count_pop_w_tab& (0+255),b
 23611  00434C  6BF5               	clrf	(_log_count_pop_w_tab+1)& (0+255),b
 23612                           
 23613                           ; BSR set to: 0
 23614                           ;EEPROM.c: 156: addr++;
 23615  00434E  4A10               	infsnz	retrieveLog@addr,f,c
 23616  004350  2A11               	incf	retrieveLog@addr+1,f,c
 23617                           
 23618                           ; BSR set to: 0
 23619                           ;EEPROM.c: 157: unsigned char byte3 = EEPROM_read(addr);
 23620  004352  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 23621  004356  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 23622  00435A  EC89  F02F         	call	i2_EEPROM_read	;wreg free
 23623  00435E  6E0D               	movwf	retrieveLog@byte3,c
 23624                           
 23625                           ;EEPROM.c: 158: log_count_can_w_lab = (int)((byte3 & 0b11110000)>> 4);
 23626  004360  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 23627  004364  3A09               	swapf	??_retrieveLog,f,c
 23628  004366  0E0F               	movlw	15
 23629  004368  1609               	andwf	??_retrieveLog,f,c
 23630  00436A  0E0F               	movlw	15
 23631  00436C  1609               	andwf	??_retrieveLog,f,c
 23632  00436E  5009               	movf	??_retrieveLog,w,c
 23633  004370  0101               	movlb	1	; () banked
 23634  004372  6F43               	movwf	_log_count_can_w_lab& (0+255),b
 23635  004374  6B44               	clrf	(_log_count_can_w_lab+1)& (0+255),b
 23636                           
 23637                           ; BSR set to: 1
 23638                           ;EEPROM.c: 159: log_count_can_no_lab = (int)(byte3 & 0b00001111);
 23639  004376  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 23640  00437A  0E0F               	movlw	15
 23641  00437C  1609               	andwf	??_retrieveLog,f,c
 23642  00437E  5009               	movf	??_retrieveLog,w,c
 23643  004380  0101               	movlb	1	; () banked
 23644  004382  6F41               	movwf	_log_count_can_no_lab& (0+255),b
 23645  004384  6B42               	clrf	(_log_count_can_no_lab+1)& (0+255),b
 23646                           
 23647                           ; BSR set to: 1
 23648                           ;EEPROM.c: 160: addr++;
 23649  004386  4A10               	infsnz	retrieveLog@addr,f,c
 23650  004388  2A11               	incf	retrieveLog@addr+1,f,c
 23651                           
 23652                           ; BSR set to: 1
 23653                           ;EEPROM.c: 163: for(int i = 0; i < 7; i++){
 23654  00438A  0E00               	movlw	0
 23655  00438C  6E0F               	movwf	retrieveLog@i+1,c
 23656  00438E  0E00               	movlw	0
 23657  004390  6E0E               	movwf	retrieveLog@i,c
 23658  004392                     i2l7460:
 23659                           
 23660                           ; BSR set to: 1
 23661  004392  BE0F               	btfsc	retrieveLog@i+1,7,c
 23662  004394  D006               	goto	i2l7464
 23663  004396  500F               	movf	retrieveLog@i+1,w,c
 23664  004398  E11E               	bnz	i2l7472
 23665  00439A  0E07               	movlw	7
 23666  00439C  5C0E               	subwf	retrieveLog@i,w,c
 23667  00439E  B0D8               	btfsc	status,0,c
 23668  0043A0  D01A               	goto	i2l7472
 23669  0043A2                     i2l7464:
 23670                           
 23671                           ;EEPROM.c: 164: log_startTime[i] = (int)EEPROM_read(addr);
 23672  0043A2  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 23673  0043A6  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 23674  0043AA  EC89  F02F         	call	i2_EEPROM_read	;wreg free
 23675  0043AE  6E09               	movwf	??_retrieveLog& (0+255),c
 23676  0043B0  6A0A               	clrf	(??_retrieveLog+1)& (0+255),c
 23677  0043B2  90D8               	bcf	status,0,c
 23678  0043B4  340E               	rlcf	retrieveLog@i,w,c
 23679  0043B6  6ED9               	movwf	fsr2l,c
 23680  0043B8  340F               	rlcf	retrieveLog@i+1,w,c
 23681  0043BA  6EDA               	movwf	fsr2h,c
 23682  0043BC  0E00               	movlw	low _log_startTime
 23683  0043BE  26D9               	addwf	fsr2l,f,c
 23684  0043C0  0E01               	movlw	high _log_startTime
 23685  0043C2  22DA               	addwfc	fsr2h,f,c
 23686  0043C4  C009  FFDE         	movff	??_retrieveLog,postinc2
 23687  0043C8  C00A  FFDD         	movff	??_retrieveLog+1,postdec2
 23688                           
 23689                           ;EEPROM.c: 165: addr++;
 23690  0043CC  4A10               	infsnz	retrieveLog@addr,f,c
 23691  0043CE  2A11               	incf	retrieveLog@addr+1,f,c
 23692  0043D0  4A0E               	infsnz	retrieveLog@i,f,c
 23693  0043D2  2A0F               	incf	retrieveLog@i+1,f,c
 23694  0043D4  D7DE               	goto	i2l7460
 23695  0043D6                     i2l7472:
 23696                           
 23697                           ;EEPROM.c: 166: }
 23698                           ;EEPROM.c: 169: log_total_time = (int)EEPROM_read(addr);
 23699  0043D6  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 23700  0043DA  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 23701  0043DE  EC89  F02F         	call	i2_EEPROM_read	;wreg free
 23702  0043E2  6E09               	movwf	??_retrieveLog& (0+255),c
 23703  0043E4  5009               	movf	??_retrieveLog,w,c
 23704  0043E6  0100               	movlb	0	; () banked
 23705  0043E8  6FF6               	movwf	_log_total_time& (0+255),b
 23706  0043EA  6BF7               	clrf	(_log_total_time+1)& (0+255),b
 23707                           
 23708                           ; BSR set to: 0
 23709  0043EC  0012               	return		;funcret
 23710  0043EE                     __end_of_retrieveLog:
 23711                           	opt stack 0
 23712                           pclatu	equ	0xFFB
 23713                           pclath	equ	0xFFA
 23714                           tblptru	equ	0xFF8
 23715                           tblptrh	equ	0xFF7
 23716                           tblptrl	equ	0xFF6
 23717                           tablat	equ	0xFF5
 23718                           prodh	equ	0xFF4
 23719                           prodl	equ	0xFF3
 23720                           intcon	equ	0xFF2
 23721                           intcon2	equ	0xFF1
 23722                           intcon3	equ	0xFF0
 23723                           indf0	equ	0xFEF
 23724                           postinc0	equ	0xFEE
 23725                           fsr0h	equ	0xFEA
 23726                           fsr0l	equ	0xFE9
 23727                           wreg	equ	0xFE8
 23728                           postdec1	equ	0xFE5
 23729                           fsr1h	equ	0xFE2
 23730                           fsr1l	equ	0xFE1
 23731                           indf2	equ	0xFDF
 23732                           postinc2	equ	0xFDE
 23733                           postdec2	equ	0xFDD
 23734                           fsr2h	equ	0xFDA
 23735                           fsr2l	equ	0xFD9
 23736                           status	equ	0xFD8
 23737                           
 23738 ;; *************** function i2_EEPROM_read *****************
 23739 ;; Defined at:
 23740 ;;		line 72 in file "EEPROM.c"
 23741 ;; Parameters:    Size  Location     Type
 23742 ;;  address         2    0[COMRAM] unsigned short 
 23743 ;; Auto vars:     Size  Location     Type
 23744 ;;		None
 23745 ;; Return value:  Size  Location     Type
 23746 ;;                  1    wreg      unsigned char 
 23747 ;; Registers used:
 23748 ;;		wreg, status,2
 23749 ;; Tracked objects:
 23750 ;;		On entry : 0/0
 23751 ;;		On exit  : 0/0
 23752 ;;		Unchanged: 0/0
 23753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23754 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23755 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23756 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23757 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23758 ;;Total ram usage:        2 bytes
 23759 ;; Hardware stack levels used:    1
 23760 ;; This function calls:
 23761 ;;		Nothing
 23762 ;; This function is called by:
 23763 ;;		_retrieveLog
 23764 ;; This function uses a non-reentrant model
 23765 ;;
 23766                           
 23767                           	psect	text84
 23768  005F12                     __ptext84:
 23769                           	opt stack 0
 23770  005F12                     i2_EEPROM_read:
 23771                           	opt stack 20
 23772                           
 23773                           ;EEPROM.c: 74: EEADRH = (unsigned char)(address >> 8);
 23774                           
 23775                           ; BSR set to: 0
 23776                           ;incstack = 0
 23777  005F12  5002               	movf	i2EEPROM_read@address+1,w,c
 23778  005F14  6EAA               	movwf	4010,c	;volatile
 23779                           
 23780                           ;EEPROM.c: 75: EEADR = (unsigned char)address;
 23781  005F16  C001  FFA9         	movff	i2EEPROM_read@address,4009	;volatile
 23782                           
 23783                           ;EEPROM.c: 77: EECON1bits.EEPGD = 0;
 23784  005F1A  9EA6               	bcf	4006,7,c	;volatile
 23785                           
 23786                           ;EEPROM.c: 78: EECON1bits.CFGS = 0;
 23787  005F1C  9CA6               	bcf	4006,6,c	;volatile
 23788                           
 23789                           ;EEPROM.c: 79: EECON1bits.RD = 1;
 23790  005F1E  80A6               	bsf	4006,0,c	;volatile
 23791  005F20                     i2l1163:
 23792  005F20  B0A6               	btfsc	4006,0,c	;volatile
 23793  005F22  D7FE               	goto	i2l1163
 23794                           
 23795                           ;EEPROM.c: 85: return EEDATA;
 23796  005F24  50A8               	movf	4008,w,c	;volatile
 23797  005F26  0012               	return	
 23798  005F28                     __end_ofi2_EEPROM_read:
 23799                           	opt stack 0
 23800                           pclatu	equ	0xFFB
 23801                           pclath	equ	0xFFA
 23802                           tblptru	equ	0xFF8
 23803                           tblptrh	equ	0xFF7
 23804                           tblptrl	equ	0xFF6
 23805                           tablat	equ	0xFF5
 23806                           prodh	equ	0xFF4
 23807                           prodl	equ	0xFF3
 23808                           intcon	equ	0xFF2
 23809                           intcon2	equ	0xFF1
 23810                           intcon3	equ	0xFF0
 23811                           indf0	equ	0xFEF
 23812                           postinc0	equ	0xFEE
 23813                           fsr0h	equ	0xFEA
 23814                           fsr0l	equ	0xFE9
 23815                           wreg	equ	0xFE8
 23816                           postdec1	equ	0xFE5
 23817                           fsr1h	equ	0xFE2
 23818                           fsr1l	equ	0xFE1
 23819                           indf2	equ	0xFDF
 23820                           postinc2	equ	0xFDE
 23821                           postdec2	equ	0xFDD
 23822                           fsr2h	equ	0xFDA
 23823                           fsr2l	equ	0xFD9
 23824                           status	equ	0xFD8
 23825                           
 23826 ;; *************** function _updateArmState *****************
 23827 ;; Defined at:
 23828 ;;		line 690 in file "sort.c"
 23829 ;; Parameters:    Size  Location     Type
 23830 ;;		None
 23831 ;; Auto vars:     Size  Location     Type
 23832 ;;		None
 23833 ;; Return value:  Size  Location     Type
 23834 ;;                  1    wreg      void 
 23835 ;; Registers used:
 23836 ;;		wreg, status,2, status,0
 23837 ;; Tracked objects:
 23838 ;;		On entry : 0/0
 23839 ;;		On exit  : 0/0
 23840 ;;		Unchanged: 0/0
 23841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23842 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23843 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23844 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23845 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23846 ;;Total ram usage:        2 bytes
 23847 ;; Hardware stack levels used:    1
 23848 ;; This function calls:
 23849 ;;		Nothing
 23850 ;; This function is called by:
 23851 ;;		_handler
 23852 ;; This function uses a non-reentrant model
 23853 ;;
 23854                           
 23855                           	psect	text85
 23856  005952                     __ptext85:
 23857                           	opt stack 0
 23858  005952                     _updateArmState:
 23859                           	opt stack 23
 23860                           
 23861                           ;sort.c: 697: if(!was_low_2){
 23862                           
 23863                           ;incstack = 0
 23864  005952  5079               	movf	_was_low_2,w,c	;volatile
 23865  005954  107A               	iorwf	_was_low_2+1,w,c	;volatile
 23866  005956  B4D8               	btfsc	status,2,c
 23867  005958  D007               	goto	i2l10386
 23868  00595A  D016               	goto	i2l979
 23869  00595C                     i2l10380:
 23870                           
 23871                           ;sort.c: 702: PR2 = 0x20;
 23872  00595C  0E20               	movlw	32
 23873  00595E  6ECB               	movwf	4043,c	;volatile
 23874                           
 23875                           ;sort.c: 703: break;
 23876  005960  0012               	return	
 23877  005962                     i2l10382:
 23878                           
 23879                           ;sort.c: 706: PR2 = 0x40;
 23880  005962  0E40               	movlw	64
 23881  005964  6ECB               	movwf	4043,c	;volatile
 23882                           
 23883                           ;sort.c: 708: }
 23884                           
 23885                           ;sort.c: 707: break;
 23886  005966  0012               	return	
 23887  005968                     i2l10386:
 23888  005968  C0E8  F001         	movff	_f_arm_position,??_updateArmState	;volatile
 23889  00596C  C0E9  F002         	movff	_f_arm_position+1,??_updateArmState+1	;volatile
 23890                           
 23891                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 23892                           ; Switch size 1, requested type "space"
 23893                           ; Number of cases is 1, Range of values is 0 to 0
 23894                           ; switch strategies available:
 23895                           ; Name         Instructions Cycles
 23896                           ; simple_byte            4     3 (average)
 23897                           ;	Chosen strategy is simple_byte
 23898  005970  5002               	movf	??_updateArmState+1,w,c
 23899  005972  0A00               	xorlw	0	; case 0
 23900  005974  A4D8               	btfss	status,2,c
 23901  005976  0012               	return	
 23902                           
 23903                           ; Switch size 1, requested type "space"
 23904                           ; Number of cases is 2, Range of values is 0 to 1
 23905                           ; switch strategies available:
 23906                           ; Name         Instructions Cycles
 23907                           ; simple_byte            7     4 (average)
 23908                           ;	Chosen strategy is simple_byte
 23909  005978  5001               	movf	??_updateArmState,w,c
 23910  00597A  0A00               	xorlw	0	; case 0
 23911  00597C  B4D8               	btfsc	status,2,c
 23912  00597E  D7EE               	goto	i2l10380
 23913  005980  0A01               	xorlw	1	; case 1
 23914  005982  A4D8               	btfss	status,2,c
 23915                           
 23916                           ;sort.c: 709: }
 23917  005984  0012               	return	
 23918  005986  D7ED               	goto	i2l10382
 23919  005988                     i2l979:
 23920                           
 23921                           ;sort.c: 710: else{
 23922                           ;sort.c: 712: PR2 = 0xFF;
 23923  005988  68CB               	setf	4043,c	;volatile
 23924  00598A  0012               	return	
 23925  00598C                     __end_of_updateArmState:
 23926                           	opt stack 0
 23927                           pclatu	equ	0xFFB
 23928                           pclath	equ	0xFFA
 23929                           tblptru	equ	0xFF8
 23930                           tblptrh	equ	0xFF7
 23931                           tblptrl	equ	0xFF6
 23932                           tablat	equ	0xFF5
 23933                           prodh	equ	0xFF4
 23934                           prodl	equ	0xFF3
 23935                           intcon	equ	0xFF2
 23936                           intcon2	equ	0xFF1
 23937                           intcon3	equ	0xFF0
 23938                           indf0	equ	0xFEF
 23939                           postinc0	equ	0xFEE
 23940                           fsr0h	equ	0xFEA
 23941                           fsr0l	equ	0xFE9
 23942                           wreg	equ	0xFE8
 23943                           postdec1	equ	0xFE5
 23944                           fsr1h	equ	0xFE2
 23945                           fsr1l	equ	0xFE1
 23946                           indf2	equ	0xFDF
 23947                           postinc2	equ	0xFDE
 23948                           postdec2	equ	0xFDD
 23949                           fsr2h	equ	0xFDA
 23950                           fsr2l	equ	0xFD9
 23951                           status	equ	0xFD8
 23952                           
 23953 ;; *************** function _printSortTimer *****************
 23954 ;; Defined at:
 23955 ;;		line 518 in file "sort.c"
 23956 ;; Parameters:    Size  Location     Type
 23957 ;;		None
 23958 ;; Auto vars:     Size  Location     Type
 23959 ;;  i               2   70[COMRAM] int 
 23960 ;;  i               2   72[COMRAM] int 
 23961 ;;  curTime        14   44[COMRAM] int [7]
 23962 ;;  timeDiff        2   68[COMRAM] unsigned int 
 23963 ;;  sec             2   64[COMRAM] int 
 23964 ;;  min             2   62[COMRAM] int 
 23965 ;;  cur_sec         2   60[COMRAM] unsigned int 
 23966 ;;  start_sec       2   58[COMRAM] unsigned int 
 23967 ;; Return value:  Size  Location     Type
 23968 ;;                  1    wreg      void 
 23969 ;; Registers used:
 23970 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23971 ;; Tracked objects:
 23972 ;;		On entry : 0/0
 23973 ;;		On exit  : 0/0
 23974 ;;		Unchanged: 0/0
 23975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23976 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23977 ;;      Locals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23978 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23979 ;;      Totals:        33       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23980 ;;Total ram usage:       33 bytes
 23981 ;; Hardware stack levels used:    1
 23982 ;; Hardware stack levels required when called:    3
 23983 ;; This function calls:
 23984 ;;		i2___awmod
 23985 ;;		i2___lwdiv
 23986 ;;		i2___lwmod
 23987 ;;		i2___wmul
 23988 ;;		i2_delay_ms
 23989 ;;		i2_getRTC
 23990 ;;		i2_lcdInst
 23991 ;;		i2_printf
 23992 ;; This function is called by:
 23993 ;;		_handler
 23994 ;; This function uses a non-reentrant model
 23995 ;;
 23996                           
 23997                           	psect	text86
 23998  002C04                     __ptext86:
 23999                           	opt stack 0
 24000  002C04                     _printSortTimer:
 24001                           	opt stack 20
 24002                           
 24003                           ;sort.c: 519: getRTC();
 24004                           
 24005                           ;incstack = 0
 24006  002C04  ECDE  F029         	call	i2_getRTC	;wreg free
 24007                           
 24008                           ;sort.c: 520: int curTime[7];
 24009                           ;sort.c: 521: for(int i = 0; i < 7; i++){
 24010  002C08  0E00               	movlw	0
 24011  002C0A  6E4A               	movwf	printSortTimer@i+1,c
 24012  002C0C  0E00               	movlw	0
 24013  002C0E  6E49               	movwf	printSortTimer@i,c
 24014  002C10                     i2l10204:
 24015  002C10  BE4A               	btfsc	printSortTimer@i+1,7,c
 24016  002C12  D006               	goto	i2l10208
 24017  002C14  504A               	movf	printSortTimer@i+1,w,c
 24018  002C16  E131               	bnz	i2l10214
 24019  002C18  0E07               	movlw	7
 24020  002C1A  5C49               	subwf	printSortTimer@i,w,c
 24021  002C1C  B0D8               	btfsc	status,0,c
 24022  002C1E  D02D               	goto	i2l10214
 24023  002C20                     i2l10208:
 24024                           
 24025                           ;sort.c: 522: curTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 24026  002C20  0E1C               	movlw	low _time
 24027  002C22  2449               	addwf	printSortTimer@i,w,c
 24028  002C24  6ED9               	movwf	fsr2l,c
 24029  002C26  0E01               	movlw	high _time
 24030  002C28  204A               	addwfc	printSortTimer@i+1,w,c
 24031  002C2A  6EDA               	movwf	fsr2h,c
 24032  002C2C  50DF               	movf	indf2,w,c
 24033  002C2E  6E2A               	movwf	??_printSortTimer& (0+255),c
 24034  002C30  3A2A               	swapf	??_printSortTimer,f,c
 24035  002C32  0E0F               	movlw	15
 24036  002C34  162A               	andwf	??_printSortTimer,f,c
 24037  002C36  0E0F               	movlw	15
 24038  002C38  162A               	andwf	??_printSortTimer,f,c
 24039  002C3A  502A               	movf	??_printSortTimer,w,c
 24040  002C3C  0D0A               	mullw	10
 24041  002C3E  0E1C               	movlw	low _time
 24042  002C40  2449               	addwf	printSortTimer@i,w,c
 24043  002C42  6ED9               	movwf	fsr2l,c
 24044  002C44  0E01               	movlw	high _time
 24045  002C46  204A               	addwfc	printSortTimer@i+1,w,c
 24046  002C48  6EDA               	movwf	fsr2h,c
 24047  002C4A  50DF               	movf	indf2,w,c
 24048  002C4C  0B0F               	andlw	15
 24049  002C4E  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 24050  002C50  6A2C               	clrf	(??_printSortTimer+2)& (0+255),c
 24051  002C52  50F3               	movf	prodl,w,c
 24052  002C54  262B               	addwf	??_printSortTimer+1,f,c
 24053  002C56  50F4               	movf	prodh,w,c
 24054  002C58  222C               	addwfc	??_printSortTimer+2,f,c
 24055  002C5A  90D8               	bcf	status,0,c
 24056  002C5C  3449               	rlcf	printSortTimer@i,w,c
 24057  002C5E  6ED9               	movwf	fsr2l,c
 24058  002C60  344A               	rlcf	printSortTimer@i+1,w,c
 24059  002C62  6EDA               	movwf	fsr2h,c
 24060  002C64  0E2D               	movlw	low printSortTimer@curTime
 24061  002C66  26D9               	addwf	fsr2l,f,c
 24062  002C68  0E00               	movlw	high printSortTimer@curTime
 24063  002C6A  22DA               	addwfc	fsr2h,f,c
 24064  002C6C  C02B  FFDE         	movff	??_printSortTimer+1,postinc2
 24065  002C70  C02C  FFDD         	movff	??_printSortTimer+2,postdec2
 24066  002C74  4A49               	infsnz	printSortTimer@i,f,c
 24067  002C76  2A4A               	incf	printSortTimer@i+1,f,c
 24068  002C78  D7CB               	goto	i2l10204
 24069  002C7A                     i2l10214:
 24070                           
 24071                           ;sort.c: 523: }
 24072                           ;sort.c: 524: unsigned int start_sec = startTime[0] + startTime[1]*60 + startTime[2]*360
      +                          0;
 24073  002C7A  C110  F001         	movff	_startTime+2,i2___wmul@multiplier
 24074  002C7E  C111  F002         	movff	_startTime+3,i2___wmul@multiplier+1
 24075  002C82  0E00               	movlw	0
 24076  002C84  6E04               	movwf	i2___wmul@multiplicand+1,c
 24077  002C86  0E3C               	movlw	60
 24078  002C88  6E03               	movwf	i2___wmul@multiplicand,c
 24079  002C8A  ECED  F02E         	call	i2___wmul	;wreg free
 24080  002C8E  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 24081  002C92  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 24082  002C96  C112  F001         	movff	_startTime+4,i2___wmul@multiplier
 24083  002C9A  C113  F002         	movff	_startTime+5,i2___wmul@multiplier+1
 24084  002C9E  0E0E               	movlw	14
 24085  002CA0  6E04               	movwf	i2___wmul@multiplicand+1,c
 24086  002CA2  0E10               	movlw	16
 24087  002CA4  6E03               	movwf	i2___wmul@multiplicand,c
 24088  002CA6  ECED  F02E         	call	i2___wmul	;wreg free
 24089  002CAA  5001               	movf	?i2___wmul,w,c
 24090  002CAC  262A               	addwf	??_printSortTimer,f,c
 24091  002CAE  5002               	movf	?i2___wmul+1,w,c
 24092  002CB0  222B               	addwfc	??_printSortTimer+1,f,c
 24093  002CB2  0101               	movlb	1	; () banked
 24094  002CB4  510E               	movf	_startTime& (0+255),w,b
 24095  002CB6  242A               	addwf	??_printSortTimer,w,c
 24096  002CB8  6E3B               	movwf	printSortTimer@start_sec,c
 24097  002CBA  0101               	movlb	1	; () banked
 24098  002CBC  510F               	movf	(_startTime+1)& (0+255),w,b
 24099  002CBE  202B               	addwfc	??_printSortTimer+1,w,c
 24100  002CC0  6E3C               	movwf	printSortTimer@start_sec+1,c
 24101                           
 24102                           ;sort.c: 525: unsigned int cur_sec = curTime[0] + curTime[1]*60 + curTime[2]*3600;
 24103  002CC2  C02F  F001         	movff	printSortTimer@curTime+2,i2___wmul@multiplier
 24104  002CC6  C030  F002         	movff	printSortTimer@curTime+3,i2___wmul@multiplier+1
 24105  002CCA  0E00               	movlw	0
 24106  002CCC  6E04               	movwf	i2___wmul@multiplicand+1,c
 24107  002CCE  0E3C               	movlw	60
 24108  002CD0  6E03               	movwf	i2___wmul@multiplicand,c
 24109  002CD2  ECED  F02E         	call	i2___wmul	;wreg free
 24110  002CD6  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 24111  002CDA  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 24112  002CDE  C031  F001         	movff	printSortTimer@curTime+4,i2___wmul@multiplier
 24113  002CE2  C032  F002         	movff	printSortTimer@curTime+5,i2___wmul@multiplier+1
 24114  002CE6  0E0E               	movlw	14
 24115  002CE8  6E04               	movwf	i2___wmul@multiplicand+1,c
 24116  002CEA  0E10               	movlw	16
 24117  002CEC  6E03               	movwf	i2___wmul@multiplicand,c
 24118  002CEE  ECED  F02E         	call	i2___wmul	;wreg free
 24119  002CF2  5001               	movf	?i2___wmul,w,c
 24120  002CF4  262A               	addwf	??_printSortTimer,f,c
 24121  002CF6  5002               	movf	?i2___wmul+1,w,c
 24122  002CF8  222B               	addwfc	??_printSortTimer+1,f,c
 24123  002CFA  502D               	movf	printSortTimer@curTime,w,c
 24124  002CFC  242A               	addwf	??_printSortTimer,w,c
 24125  002CFE  6E3D               	movwf	printSortTimer@cur_sec,c
 24126  002D00  502E               	movf	printSortTimer@curTime+1,w,c
 24127  002D02  202B               	addwfc	??_printSortTimer+1,w,c
 24128  002D04  6E3E               	movwf	printSortTimer@cur_sec+1,c
 24129                           
 24130                           ;sort.c: 526: unsigned int timeDiff = cur_sec - start_sec;
 24131  002D06  C03B  F02A         	movff	printSortTimer@start_sec,??_printSortTimer
 24132  002D0A  C03C  F02B         	movff	printSortTimer@start_sec+1,??_printSortTimer+1
 24133  002D0E  1E2A               	comf	??_printSortTimer,f,c
 24134  002D10  1E2B               	comf	??_printSortTimer+1,f,c
 24135  002D12  4A2A               	infsnz	??_printSortTimer,f,c
 24136  002D14  2A2B               	incf	??_printSortTimer+1,f,c
 24137  002D16  503D               	movf	printSortTimer@cur_sec,w,c
 24138  002D18  242A               	addwf	??_printSortTimer,w,c
 24139  002D1A  6E45               	movwf	printSortTimer@timeDiff,c
 24140  002D1C  503E               	movf	printSortTimer@cur_sec+1,w,c
 24141  002D1E  202B               	addwfc	??_printSortTimer+1,w,c
 24142  002D20  6E46               	movwf	printSortTimer@timeDiff+1,c
 24143                           
 24144                           ;sort.c: 528: total_time = timeDiff;
 24145  002D22  C045  F0FA         	movff	printSortTimer@timeDiff,_total_time
 24146  002D26  C046  F0FB         	movff	printSortTimer@timeDiff+1,_total_time+1
 24147                           
 24148                           ;sort.c: 530: if(f_most_recent_sort_time){
 24149  002D2A  0101               	movlb	1	; () banked
 24150  002D2C  5139               	movf	_f_most_recent_sort_time& (0+255),w,b
 24151  002D2E  0101               	movlb	1	; () banked
 24152  002D30  113A               	iorwf	(_f_most_recent_sort_time+1)& (0+255),w,b
 24153  002D32  B4D8               	btfsc	status,2,c
 24154  002D34  D009               	goto	i2l10226
 24155                           
 24156                           ; BSR set to: 1
 24157                           ;sort.c: 531: most_recent_sort_time = total_time;
 24158  002D36  C0FA  F147         	movff	_total_time,_most_recent_sort_time
 24159  002D3A  C0FB  F148         	movff	_total_time+1,_most_recent_sort_time+1
 24160                           
 24161                           ; BSR set to: 1
 24162                           ;sort.c: 532: f_most_recent_sort_time = 0;
 24163  002D3E  0E00               	movlw	0
 24164  002D40  0101               	movlb	1	; () banked
 24165  002D42  6F3A               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
 24166  002D44  0E00               	movlw	0
 24167  002D46  6F39               	movwf	_f_most_recent_sort_time& (0+255),b
 24168  002D48                     i2l10226:
 24169                           
 24170                           ; BSR set to: 1
 24171                           ;sort.c: 533: }
 24172                           ;sort.c: 536: if(total_time >= 20){
 24173  002D48  0100               	movlb	0	; () banked
 24174  002D4A  BFFB               	btfsc	(_total_time+1)& (0+255),7,b
 24175  002D4C  D05B               	goto	i2l920
 24176  002D4E  0100               	movlb	0	; () banked
 24177  002D50  51FB               	movf	(_total_time+1)& (0+255),w,b
 24178  002D52  E105               	bnz	i2u1015_40
 24179  002D54  0E14               	movlw	20
 24180  002D56  0100               	movlb	0	; () banked
 24181  002D58  5DFA               	subwf	_total_time& (0+255),w,b
 24182  002D5A  A0D8               	btfss	status,0,c
 24183  002D5C  D053               	goto	i2l920
 24184  002D5E                     i2u1015_40:
 24185                           
 24186                           ; BSR set to: 0
 24187                           ;sort.c: 537: if(LATBbits.LATB2 == 0){
 24188  002D5E  B48A               	btfsc	3978,2,c	;volatile
 24189  002D60  D036               	goto	i2l10248
 24190                           
 24191                           ; BSR set to: 0
 24192                           ;sort.c: 538: motor_toggle_count++;
 24193  002D62  0101               	movlb	1	; () banked
 24194  002D64  4B49               	infsnz	_motor_toggle_count& (0+255),f,b
 24195  002D66  2B4A               	incf	(_motor_toggle_count+1)& (0+255),f,b
 24196                           
 24197                           ; BSR set to: 1
 24198                           ;sort.c: 539: if(motor_toggle_count == 2){
 24199  002D68  0E02               	movlw	2
 24200  002D6A  0101               	movlb	1	; () banked
 24201  002D6C  1949               	xorwf	_motor_toggle_count& (0+255),w,b
 24202  002D6E  0101               	movlb	1	; () banked
 24203  002D70  114A               	iorwf	(_motor_toggle_count+1)& (0+255),w,b
 24204  002D72  A4D8               	btfss	status,2,c
 24205  002D74  D047               	goto	i2l920
 24206                           
 24207                           ; BSR set to: 1
 24208                           ;sort.c: 540: motor_toggle_count = 0;
 24209  002D76  0E00               	movlw	0
 24210  002D78  0101               	movlb	1	; () banked
 24211  002D7A  6F4A               	movwf	(_motor_toggle_count+1)& (0+255),b
 24212  002D7C  0E00               	movlw	0
 24213  002D7E  6F49               	movwf	_motor_toggle_count& (0+255),b
 24214                           
 24215                           ;sort.c: 541: for(int i=0; i<46; i++){
 24216  002D80  0E00               	movlw	0
 24217  002D82  6E48               	movwf	printSortTimer@i_1168+1,c
 24218  002D84  0E00               	movlw	0
 24219  002D86  6E47               	movwf	printSortTimer@i_1168,c
 24220                           
 24221                           ; BSR set to: 1
 24222  002D88  BE48               	btfsc	printSortTimer@i_1168+1,7,c
 24223  002D8A  D006               	goto	i2l10240
 24224  002D8C  5048               	movf	printSortTimer@i_1168+1,w,c
 24225  002D8E  E11D               	bnz	i2l924
 24226  002D90  0E2E               	movlw	46
 24227  002D92  5C47               	subwf	printSortTimer@i_1168,w,c
 24228  002D94  B0D8               	btfsc	status,0,c
 24229  002D96  D019               	goto	i2l924
 24230  002D98                     i2l10240:
 24231                           
 24232                           ;sort.c: 542: LATBbits.LATB2 = !LATBbits.LATB2;
 24233  002D98  B48A               	btfsc	3978,2,c	;volatile
 24234  002D9A  D003               	goto	i2u1019_40
 24235  002D9C  6A2A               	clrf	??_printSortTimer& (0+255),c
 24236  002D9E  2A2A               	incf	??_printSortTimer& (0+255),f,c
 24237  002DA0  D001               	goto	i2u1020_48
 24238  002DA2                     i2u1019_40:
 24239  002DA2  6A2A               	clrf	??_printSortTimer& (0+255),c
 24240  002DA4                     i2u1020_48:
 24241  002DA4  462A               	rlncf	??_printSortTimer,f,c
 24242  002DA6  462A               	rlncf	??_printSortTimer,f,c
 24243  002DA8  508A               	movf	3978,w,c	;volatile
 24244  002DAA  182A               	xorwf	??_printSortTimer,w,c
 24245  002DAC  0BFB               	andlw	-5
 24246  002DAE  182A               	xorwf	??_printSortTimer,w,c
 24247  002DB0  6E8A               	movwf	3978,c	;volatile
 24248                           
 24249                           ;sort.c: 543: delay_ms(45-i);
 24250  002DB2  5047               	movf	printSortTimer@i_1168,w,c
 24251  002DB4  0800               	sublw	0
 24252  002DB6  0F2D               	addlw	45
 24253  002DB8  EC64  F02F         	call	i2_delay_ms
 24254  002DBC  4A47               	infsnz	printSortTimer@i_1168,f,c
 24255  002DBE  2A48               	incf	printSortTimer@i_1168+1,f,c
 24256  002DC0  BE48               	btfsc	printSortTimer@i_1168+1,7,c
 24257  002DC2  D7EA               	goto	i2l10240
 24258  002DC4  5048               	movf	printSortTimer@i_1168+1,w,c
 24259  002DC6  E101               	bnz	i2u1021_40
 24260  002DC8  D7E3               	goto	L19
 24261  002DCA                     i2u1021_40:
 24262  002DCA                     i2l924:
 24263                           
 24264                           ;sort.c: 544: }
 24265                           ;sort.c: 545: LATBbits.LATB2 = 1;
 24266  002DCA  848A               	bsf	3978,2,c	;volatile
 24267                           
 24268                           ;sort.c: 546: }
 24269                           ;sort.c: 547: }
 24270  002DCC  D01B               	goto	i2l920
 24271  002DCE                     i2l10248:
 24272                           
 24273                           ;sort.c: 548: else if(total_time % 20 == 0){
 24274  002DCE  C0FA  F001         	movff	_total_time,i2___awmod@dividend
 24275  002DD2  C0FB  F002         	movff	_total_time+1,i2___awmod@dividend+1
 24276  002DD6  0E00               	movlw	0
 24277  002DD8  6E04               	movwf	i2___awmod@divisor+1,c
 24278  002DDA  0E14               	movlw	20
 24279  002DDC  6E03               	movwf	i2___awmod@divisor,c
 24280  002DDE  EC17  F02A         	call	i2___awmod	;wreg free
 24281  002DE2  5001               	movf	?i2___awmod,w,c
 24282  002DE4  1002               	iorwf	?i2___awmod+1,w,c
 24283  002DE6  A4D8               	btfss	status,2,c
 24284  002DE8  D00D               	goto	i2l920
 24285                           
 24286                           ;sort.c: 549: LATBbits.LATB2 = !LATBbits.LATB2;
 24287  002DEA  B48A               	btfsc	3978,2,c	;volatile
 24288  002DEC  D003               	goto	i2u1023_40
 24289  002DEE  6A2A               	clrf	??_printSortTimer& (0+255),c
 24290  002DF0  2A2A               	incf	??_printSortTimer& (0+255),f,c
 24291  002DF2  D001               	goto	i2u1024_48
 24292  002DF4                     i2u1023_40:
 24293  002DF4  6A2A               	clrf	??_printSortTimer& (0+255),c
 24294  002DF6                     i2u1024_48:
 24295  002DF6  462A               	rlncf	??_printSortTimer,f,c
 24296  002DF8  462A               	rlncf	??_printSortTimer,f,c
 24297  002DFA  508A               	movf	3978,w,c	;volatile
 24298  002DFC  182A               	xorwf	??_printSortTimer,w,c
 24299  002DFE  0BFB               	andlw	-5
 24300  002E00  182A               	xorwf	??_printSortTimer,w,c
 24301  002E02  6E8A               	movwf	3978,c	;volatile
 24302  002E04                     i2l920:
 24303                           
 24304                           ;sort.c: 550: }
 24305                           ;sort.c: 551: }
 24306                           ;sort.c: 554: if(total_time >= 30){
 24307  002E04  0100               	movlb	0	; () banked
 24308  002E06  BFFB               	btfsc	(_total_time+1)& (0+255),7,b
 24309  002E08  D034               	goto	i2l927
 24310  002E0A  0100               	movlb	0	; () banked
 24311  002E0C  51FB               	movf	(_total_time+1)& (0+255),w,b
 24312  002E0E  E105               	bnz	i2u1025_40
 24313  002E10  0E1E               	movlw	30
 24314  002E12  0100               	movlb	0	; () banked
 24315  002E14  5DFA               	subwf	_total_time& (0+255),w,b
 24316  002E16  A0D8               	btfss	status,0,c
 24317  002E18  D02C               	goto	i2l927
 24318  002E1A                     i2u1025_40:
 24319                           
 24320                           ; BSR set to: 0
 24321                           ;sort.c: 555: if(LATBbits.LATB0 == 1){
 24322  002E1A  A08A               	btfss	3978,0,c	;volatile
 24323  002E1C  D011               	goto	i2l10262
 24324                           
 24325                           ; BSR set to: 0
 24326                           ;sort.c: 556: agitator_toggle_count++;
 24327  002E1E  0101               	movlb	1	; () banked
 24328  002E20  4B23               	infsnz	_agitator_toggle_count& (0+255),f,b
 24329  002E22  2B24               	incf	(_agitator_toggle_count+1)& (0+255),f,b
 24330                           
 24331                           ; BSR set to: 1
 24332                           ;sort.c: 557: if(agitator_toggle_count == 2){
 24333  002E24  0E02               	movlw	2
 24334  002E26  0101               	movlb	1	; () banked
 24335  002E28  1923               	xorwf	_agitator_toggle_count& (0+255),w,b
 24336  002E2A  0101               	movlb	1	; () banked
 24337  002E2C  1124               	iorwf	(_agitator_toggle_count+1)& (0+255),w,b
 24338  002E2E  A4D8               	btfss	status,2,c
 24339  002E30  D020               	goto	i2l927
 24340                           
 24341                           ; BSR set to: 1
 24342                           ;sort.c: 558: agitator_toggle_count = 0;
 24343  002E32  0E00               	movlw	0
 24344  002E34  0101               	movlb	1	; () banked
 24345  002E36  6F24               	movwf	(_agitator_toggle_count+1)& (0+255),b
 24346  002E38  0E00               	movlw	0
 24347  002E3A  6F23               	movwf	_agitator_toggle_count& (0+255),b
 24348                           
 24349                           ; BSR set to: 1
 24350                           ;sort.c: 559: LATBbits.LATB0 = 0;
 24351  002E3C  908A               	bcf	3978,0,c	;volatile
 24352                           
 24353                           ; BSR set to: 1
 24354                           ;sort.c: 560: }
 24355                           ;sort.c: 561: }
 24356  002E3E  D019               	goto	i2l927
 24357  002E40                     i2l10262:
 24358                           
 24359                           ;sort.c: 562: else if(total_time % 30 == 0){
 24360  002E40  C0FA  F001         	movff	_total_time,i2___awmod@dividend
 24361  002E44  C0FB  F002         	movff	_total_time+1,i2___awmod@dividend+1
 24362  002E48  0E00               	movlw	0
 24363  002E4A  6E04               	movwf	i2___awmod@divisor+1,c
 24364  002E4C  0E1E               	movlw	30
 24365  002E4E  6E03               	movwf	i2___awmod@divisor,c
 24366  002E50  EC17  F02A         	call	i2___awmod	;wreg free
 24367  002E54  5001               	movf	?i2___awmod,w,c
 24368  002E56  1002               	iorwf	?i2___awmod+1,w,c
 24369  002E58  A4D8               	btfss	status,2,c
 24370  002E5A  D00B               	goto	i2l927
 24371                           
 24372                           ;sort.c: 563: LATBbits.LATB0 = !LATBbits.LATB0;
 24373  002E5C  B08A               	btfsc	3978,0,c	;volatile
 24374  002E5E  D003               	goto	i2u1029_40
 24375  002E60  6A2A               	clrf	??_printSortTimer& (0+255),c
 24376  002E62  2A2A               	incf	??_printSortTimer& (0+255),f,c
 24377  002E64  D001               	goto	i2u1030_48
 24378  002E66                     i2u1029_40:
 24379  002E66  6A2A               	clrf	??_printSortTimer& (0+255),c
 24380  002E68                     i2u1030_48:
 24381  002E68  508A               	movf	3978,w,c	;volatile
 24382  002E6A  182A               	xorwf	??_printSortTimer,w,c
 24383  002E6C  0BFE               	andlw	-2
 24384  002E6E  182A               	xorwf	??_printSortTimer,w,c
 24385  002E70  6E8A               	movwf	3978,c	;volatile
 24386  002E72                     i2l927:
 24387                           
 24388                           ;sort.c: 564: }
 24389                           ;sort.c: 565: }
 24390                           ;sort.c: 567: if((total_time - most_recent_sort_time == 42) || (total_time == 179)){
 24391  002E72  C147  F02A         	movff	_most_recent_sort_time,??_printSortTimer
 24392  002E76  C148  F02B         	movff	_most_recent_sort_time+1,??_printSortTimer+1
 24393  002E7A  1E2A               	comf	??_printSortTimer,f,c
 24394  002E7C  1E2B               	comf	??_printSortTimer+1,f,c
 24395  002E7E  4A2A               	infsnz	??_printSortTimer,f,c
 24396  002E80  2A2B               	incf	??_printSortTimer+1,f,c
 24397  002E82  0100               	movlb	0	; () banked
 24398  002E84  51FA               	movf	_total_time& (0+255),w,b
 24399  002E86  262A               	addwf	??_printSortTimer,f,c
 24400  002E88  0100               	movlb	0	; () banked
 24401  002E8A  51FB               	movf	(_total_time+1)& (0+255),w,b
 24402  002E8C  222B               	addwfc	??_printSortTimer+1,f,c
 24403  002E8E  0E2A               	movlw	42
 24404  002E90  182A               	xorwf	??_printSortTimer,w,c
 24405  002E92  102B               	iorwf	??_printSortTimer+1,w,c
 24406  002E94  B4D8               	btfsc	status,2,c
 24407  002E96  D007               	goto	i2l10268
 24408                           
 24409                           ; BSR set to: 0
 24410  002E98  0EB3               	movlw	179
 24411  002E9A  0100               	movlb	0	; () banked
 24412  002E9C  19FA               	xorwf	_total_time& (0+255),w,b
 24413  002E9E  0100               	movlb	0	; () banked
 24414  002EA0  11FB               	iorwf	(_total_time+1)& (0+255),w,b
 24415  002EA2  A4D8               	btfss	status,2,c
 24416  002EA4  D003               	goto	i2l10270
 24417  002EA6                     i2l10268:
 24418                           
 24419                           ; BSR set to: 0
 24420                           ;sort.c: 568: machine_state = DoneSorting_state;
 24421  002EA6  0E02               	movlw	2
 24422  002EA8  0100               	movlb	0	; () banked
 24423  002EAA  6FFC               	movwf	_machine_state& (0+255),b
 24424  002EAC                     i2l10270:
 24425                           
 24426                           ; BSR set to: 0
 24427                           ;sort.c: 570: }
 24428                           ;sort.c: 572: int min = (timeDiff % 3600) / 60;
 24429  002EAC  0E0E               	movlw	14
 24430  002EAE  6E04               	movwf	i2___lwmod@divisor+1,c
 24431  002EB0  0E10               	movlw	16
 24432  002EB2  6E03               	movwf	i2___lwmod@divisor,c
 24433  002EB4  C045  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 24434  002EB8  C046  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 24435  002EBC  EC88  F02C         	call	i2___lwmod	;wreg free
 24436  002EC0  C001  F006         	movff	?i2___lwmod,i2___lwdiv@dividend
 24437  002EC4  C002  F007         	movff	?i2___lwmod+1,i2___lwdiv@dividend+1
 24438  002EC8  0E00               	movlw	0
 24439  002ECA  6E09               	movwf	i2___lwdiv@divisor+1,c
 24440  002ECC  0E3C               	movlw	60
 24441  002ECE  6E08               	movwf	i2___lwdiv@divisor,c
 24442  002ED0  ECA7  F02B         	call	i2___lwdiv	;wreg free
 24443  002ED4  C006  F03F         	movff	?i2___lwdiv,printSortTimer@min
 24444  002ED8  C007  F040         	movff	?i2___lwdiv+1,printSortTimer@min+1
 24445                           
 24446                           ;sort.c: 573: int sec = (timeDiff % 3600) % 60;
 24447  002EDC  0E0E               	movlw	14
 24448  002EDE  6E04               	movwf	i2___lwmod@divisor+1,c
 24449  002EE0  0E10               	movlw	16
 24450  002EE2  6E03               	movwf	i2___lwmod@divisor,c
 24451  002EE4  C045  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 24452  002EE8  C046  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 24453  002EEC  EC88  F02C         	call	i2___lwmod	;wreg free
 24454  002EF0  C001  F043         	movff	?i2___lwmod,_printSortTimer$2574
 24455  002EF4  C002  F044         	movff	?i2___lwmod+1,_printSortTimer$2574+1
 24456                           
 24457                           ;sort.c: 573: int sec = (timeDiff % 3600) % 60;
 24458  002EF8  C043  F001         	movff	_printSortTimer$2574,i2___lwmod@dividend
 24459  002EFC  C044  F002         	movff	_printSortTimer$2574+1,i2___lwmod@dividend+1
 24460  002F00  0E00               	movlw	0
 24461  002F02  6E04               	movwf	i2___lwmod@divisor+1,c
 24462  002F04  0E3C               	movlw	60
 24463  002F06  6E03               	movwf	i2___lwmod@divisor,c
 24464  002F08  EC88  F02C         	call	i2___lwmod	;wreg free
 24465  002F0C  C001  F041         	movff	?i2___lwmod,printSortTimer@sec
 24466  002F10  C002  F042         	movff	?i2___lwmod+1,printSortTimer@sec+1
 24467                           
 24468                           ;sort.c: 575: lcdInst(0b10000000);;
 24469  002F14  0E80               	movlw	128
 24470  002F16  ECBD  F02F         	call	i2_lcdInst
 24471                           
 24472                           ;sort.c: 576: printf("SORTING...     ");
 24473  002F1A  0E59               	movlw	low STR_64
 24474  002F1C  6E0D               	movwf	i2printf@f,c
 24475  002F1E  0EFE               	movlw	high STR_64
 24476  002F20  6E0E               	movwf	i2printf@f+1,c
 24477  002F22  EC4B  F014         	call	i2_printf	;wreg free
 24478                           
 24479                           ;sort.c: 577: lcdInst(0b11000000);;
 24480  002F26  0EC0               	movlw	192
 24481  002F28  ECBD  F02F         	call	i2_lcdInst
 24482                           
 24483                           ;sort.c: 578: printf("TIME %d:%02d   ", min, sec);
 24484  002F2C  0E69               	movlw	low STR_65
 24485  002F2E  6E0D               	movwf	i2printf@f,c
 24486  002F30  0EFE               	movlw	high STR_65
 24487  002F32  6E0E               	movwf	i2printf@f+1,c
 24488  002F34  C03F  F00F         	movff	printSortTimer@min,?i2_printf+2
 24489  002F38  C040  F010         	movff	printSortTimer@min+1,?i2_printf+3
 24490  002F3C  C041  F011         	movff	printSortTimer@sec,?i2_printf+4
 24491  002F40  C042  F012         	movff	printSortTimer@sec+1,?i2_printf+5
 24492  002F44  EC4B  F014         	call	i2_printf	;wreg free
 24493  002F48  0012               	return		;funcret
 24494  002F4A                     __end_of_printSortTimer:
 24495                           	opt stack 0
 24496                           pclatu	equ	0xFFB
 24497                           pclath	equ	0xFFA
 24498                           tblptru	equ	0xFF8
 24499                           tblptrh	equ	0xFF7
 24500                           tblptrl	equ	0xFF6
 24501                           tablat	equ	0xFF5
 24502                           prodh	equ	0xFF4
 24503                           prodl	equ	0xFF3
 24504                           intcon	equ	0xFF2
 24505                           intcon2	equ	0xFF1
 24506                           intcon3	equ	0xFF0
 24507                           indf0	equ	0xFEF
 24508                           postinc0	equ	0xFEE
 24509                           fsr0h	equ	0xFEA
 24510                           fsr0l	equ	0xFE9
 24511                           wreg	equ	0xFE8
 24512                           postdec1	equ	0xFE5
 24513                           fsr1h	equ	0xFE2
 24514                           fsr1l	equ	0xFE1
 24515                           indf2	equ	0xFDF
 24516                           postinc2	equ	0xFDE
 24517                           postdec2	equ	0xFDD
 24518                           fsr2h	equ	0xFDA
 24519                           fsr2l	equ	0xFD9
 24520                           status	equ	0xFD8
 24521                           
 24522 ;; *************** function i2_printf *****************
 24523 ;; Defined at:
 24524 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 24525 ;; Parameters:    Size  Location     Type
 24526 ;;  f               2   12[COMRAM] PTR const unsigned char 
 24527 ;;		 -> STR_128(18), STR_127(18), STR_126(17), STR_125(17), 
 24528 ;;		 -> STR_124(15), STR_123(15), STR_122(18), STR_121(15), 
 24529 ;;		 -> STR_120(18), STR_119(18), STR_118(17), STR_117(17), 
 24530 ;;		 -> STR_116(17), STR_115(17), STR_114(17), STR_113(17), 
 24531 ;;		 -> STR_112(18), STR_111(17), STR_110(15), STR_109(15), 
 24532 ;;		 -> STR_108(15), STR_107(17), STR_106(17), STR_105(17), 
 24533 ;;		 -> STR_104(16), STR_103(17), STR_102(17), STR_101(17), 
 24534 ;;		 -> STR_100(17), STR_99(17), STR_98(17), STR_97(15), 
 24535 ;;		 -> STR_96(11), STR_95(17), STR_94(11), STR_93(17), 
 24536 ;;		 -> STR_92(14), STR_91(15), STR_90(14), STR_89(10), 
 24537 ;;		 -> STR_88(9), STR_87(9), STR_86(10), STR_85(10), 
 24538 ;;		 -> STR_84(16), STR_83(15), STR_82(3), STR_81(18), 
 24539 ;;		 -> STR_80(3), STR_79(18), STR_78(14), STR_77(8), 
 24540 ;;		 -> STR_76(14), STR_75(15), STR_74(12), STR_73(14), 
 24541 ;;		 -> STR_72(17), STR_71(14), STR_70(15), STR_69(17), 
 24542 ;;		 -> STR_68(17), STR_67(7), STR_66(21), STR_65(16), 
 24543 ;;		 -> STR_64(16), STR_63(24), STR_50(17), STR_49(17), 
 24544 ;;		 -> STR_48(17), STR_47(17), STR_46(17), STR_45(17), 
 24545 ;;		 -> STR_44(17), STR_43(17), STR_42(17), STR_41(17), 
 24546 ;;		 -> STR_40(17), STR_39(17), STR_38(17), STR_37(17), 
 24547 ;;		 -> STR_36(17), STR_35(17), STR_34(17), STR_33(17), 
 24548 ;;		 -> STR_32(17), STR_31(17), STR_30(17), STR_29(3), 
 24549 ;;		 -> STR_28(17), STR_27(17), STR_26(17), STR_25(17), 
 24550 ;;		 -> STR_24(17), STR_23(14), STR_22(10), STR_21(24), 
 24551 ;;		 -> STR_7(7), STR_6(17), STR_5(18), STR_4(16), 
 24552 ;;		 -> STR_3(18), STR_2(14), STR_1(18), 
 24553 ;; Auto vars:     Size  Location     Type
 24554 ;;  printf          4    0        struct .
 24555 ;;  printf          2   39[COMRAM] int 
 24556 ;;  printf          2   35[COMRAM] unsigned int 
 24557 ;;  printf          2   33[COMRAM] unsigned int 
 24558 ;;  printf          2   31[COMRAM] PTR void [1]
 24559 ;;		 -> ?i2_printf(2), ?_printf(2), 
 24560 ;;  printf          2   29[COMRAM] PTR const unsigned char 
 24561 ;;		 -> STR_129(7), count_total(2), printRTC@month(4), UI@month(4), 
 24562 ;;  printf          1   38[COMRAM] char 
 24563 ;;  printf          1   37[COMRAM] unsigned char 
 24564 ;;  printf          1   28[COMRAM] char 
 24565 ;; Return value:  Size  Location     Type
 24566 ;;                  2   12[COMRAM] int 
 24567 ;; Registers used:
 24568 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 24569 ;; Tracked objects:
 24570 ;;		On entry : 0/0
 24571 ;;		On exit  : 0/0
 24572 ;;		Unchanged: 0/0
 24573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24574 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24575 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24576 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24577 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24578 ;;Total ram usage:       29 bytes
 24579 ;; Hardware stack levels used:    1
 24580 ;; Hardware stack levels required when called:    2
 24581 ;; This function calls:
 24582 ;;		i2___lwdiv
 24583 ;;		i2___lwmod
 24584 ;;		i2___wmul
 24585 ;;		i2_isdigit
 24586 ;;		i2_putch
 24587 ;; This function is called by:
 24588 ;;		_change_state_to_menu_11
 24589 ;;		_change_state_to_menu_23
 24590 ;;		_change_state_to_logs_11
 24591 ;;		_change_state_to_logs_12
 24592 ;;		_change_state_to_logs_22
 24593 ;;		_change_state_to_logs_23
 24594 ;;		_change_state_to_logs_33
 24595 ;;		_change_state_to_logs_34
 24596 ;;		_printSortTimer
 24597 ;;		i2_change_state_to_menu_start
 24598 ;;		i2_change_state_to_menu_12
 24599 ;;		i2_change_state_to_menu_22
 24600 ;;		i2_printRTC
 24601 ;; This function uses a non-reentrant model
 24602 ;;
 24603                           
 24604                           	psect	text87
 24605  002896                     __ptext87:
 24606                           	opt stack 0
 24607  002896                     i2_printf:
 24608                           	opt stack 20
 24609                           
 24610                           ;doprnt.c: 466: va_list ap;
 24611                           ;doprnt.c: 499: signed char c;
 24612                           ;doprnt.c: 501: int width;
 24613                           ;doprnt.c: 506: signed char prec;
 24614                           ;doprnt.c: 508: unsigned char flag;
 24615                           ;doprnt.c: 523: union {
 24616                           ;doprnt.c: 524: unsigned long vd;
 24617                           ;doprnt.c: 525: double integ;
 24618                           ;doprnt.c: 526: } tmpval;
 24619                           ;doprnt.c: 528: unsigned int val;
 24620                           ;doprnt.c: 529: unsigned len;
 24621                           ;doprnt.c: 530: const char * cp;
 24622                           ;doprnt.c: 533: *ap = __va_start();
 24623                           
 24624                           ;incstack = 0
 24625  002896  0E0F               	movlw	low (?i2_printf+2)
 24626  002898  6E20               	movwf	i2printf@ap,c
 24627  00289A  0E00               	movlw	high (?i2_printf+2)
 24628  00289C  6E21               	movwf	i2printf@ap+1,c
 24629                           
 24630                           ;doprnt.c: 536: while(c = *f++) {
 24631  00289E  D1A4               	goto	i2l7278
 24632  0028A0                     i2l7148:
 24633                           
 24634                           ;doprnt.c: 538: if(c != '%')
 24635  0028A0  0E25               	movlw	37
 24636  0028A2  1827               	xorwf	i2printf@c,w,c
 24637  0028A4  B4D8               	btfsc	status,2,c
 24638  0028A6  D004               	goto	i2l7152
 24639                           
 24640                           ;doprnt.c: 540: {
 24641                           ;doprnt.c: 541: (putch(c) );
 24642  0028A8  5027               	movf	i2printf@c,w,c
 24643  0028AA  ECB7  F02F         	call	i2_putch
 24644                           
 24645                           ;doprnt.c: 542: continue;
 24646  0028AE  D19C               	goto	i2l7278
 24647  0028B0                     i2l7152:
 24648                           
 24649                           ;doprnt.c: 543: }
 24650                           ;doprnt.c: 546: width = 0;
 24651  0028B0  0E00               	movlw	0
 24652  0028B2  6E29               	movwf	i2printf@width+1,c
 24653  0028B4  0E00               	movlw	0
 24654  0028B6  6E28               	movwf	i2printf@width,c
 24655                           
 24656                           ;doprnt.c: 548: flag = 0;
 24657  0028B8  0E00               	movlw	0
 24658  0028BA  6E26               	movwf	i2printf@flag,c
 24659                           
 24660                           ;doprnt.c: 551: switch(*f) {
 24661                           
 24662                           ;doprnt.c: 550: for(;;) {
 24663  0028BC  D003               	goto	i2l7158
 24664  0028BE                     i2l7154:
 24665                           
 24666                           ;doprnt.c: 580: flag |= 0x04;
 24667  0028BE  8426               	bsf	i2printf@flag,2,c
 24668                           
 24669                           ;doprnt.c: 581: f++;
 24670  0028C0  4A0D               	infsnz	i2printf@f,f,c
 24671  0028C2  2A0E               	incf	i2printf@f+1,f,c
 24672  0028C4                     i2l7158:
 24673  0028C4  C00D  FFF6         	movff	i2printf@f,tblptrl
 24674  0028C8  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 24675  0028CC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 24676  0028CC  6AF8               	clrf	tblptru,c
 24677  0028CE                     	endif
 24678  0028CE                     	if	0	;tblptru may be non-zero
 24679  0028CE                     	endif
 24680  0028CE  0008               	tblrd		*
 24681  0028D0  50F5               	movf	tablat,w,c
 24682                           
 24683                           ; Switch size 1, requested type "space"
 24684                           ; Number of cases is 1, Range of values is 48 to 48
 24685                           ; switch strategies available:
 24686                           ; Name         Instructions Cycles
 24687                           ; simple_byte            4     3 (average)
 24688                           ;	Chosen strategy is simple_byte
 24689  0028D2  0A30               	xorlw	48	; case 48
 24690  0028D4  B4D8               	btfsc	status,2,c
 24691  0028D6  D7F3               	goto	i2l7154
 24692                           
 24693                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 24694                           
 24695                           ;doprnt.c: 586: }
 24696                           
 24697                           ;doprnt.c: 585: break;
 24698  0028D8  C00D  FFF6         	movff	i2printf@f,tblptrl
 24699  0028DC  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 24700  0028E0                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 24701  0028E0  6AF8               	clrf	tblptru,c
 24702  0028E2                     	endif
 24703  0028E2                     	if	0	;tblptru may be non-zero
 24704  0028E2                     	endif
 24705  0028E2  0008               	tblrd		*
 24706  0028E4  50F5               	movf	tablat,w,c
 24707  0028E6  EC47  F02F         	call	i2_isdigit
 24708  0028EA  A0D8               	btfss	status,0,c
 24709  0028EC  D0A6               	goto	i2l7206
 24710                           
 24711                           ;doprnt.c: 598: width = 0;
 24712  0028EE  0E00               	movlw	0
 24713  0028F0  6E29               	movwf	i2printf@width+1,c
 24714  0028F2  0E00               	movlw	0
 24715  0028F4  6E28               	movwf	i2printf@width,c
 24716  0028F6                     i2l7164:
 24717                           
 24718                           ;doprnt.c: 600: width *= 10;
 24719  0028F6  C028  F001         	movff	i2printf@width,i2___wmul@multiplier
 24720  0028FA  C029  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 24721  0028FE  0E00               	movlw	0
 24722  002900  6E04               	movwf	i2___wmul@multiplicand+1,c
 24723  002902  0E0A               	movlw	10
 24724  002904  6E03               	movwf	i2___wmul@multiplicand,c
 24725  002906  ECED  F02E         	call	i2___wmul	;wreg free
 24726  00290A  C001  F028         	movff	?i2___wmul,i2printf@width
 24727  00290E  C002  F029         	movff	?i2___wmul+1,i2printf@width+1
 24728                           
 24729                           ;doprnt.c: 601: width += *f++ - '0';
 24730  002912  0ED0               	movlw	208
 24731  002914  6E19               	movwf	??i2_printf& (0+255),c
 24732  002916  0EFF               	movlw	255
 24733  002918  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 24734  00291A  C00D  FFF6         	movff	i2printf@f,tblptrl
 24735  00291E  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 24736  002922                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 24737  002922  6AF8               	clrf	tblptru,c
 24738  002924                     	endif
 24739  002924                     	if	0	;tblptru may be non-zero
 24740  002924                     	endif
 24741  002924  0008               	tblrd		*
 24742  002926  50F5               	movf	tablat,w,c
 24743  002928  6E1B               	movwf	(??i2_printf+2)& (0+255),c
 24744  00292A  6A1C               	clrf	(??i2_printf+3)& (0+255),c
 24745  00292C  5019               	movf	??i2_printf,w,c
 24746  00292E  261B               	addwf	??i2_printf+2,f,c
 24747  002930  501A               	movf	??i2_printf+1,w,c
 24748  002932  221C               	addwfc	??i2_printf+3,f,c
 24749  002934  501B               	movf	??i2_printf+2,w,c
 24750  002936  2628               	addwf	i2printf@width,f,c
 24751  002938  501C               	movf	??i2_printf+3,w,c
 24752  00293A  2229               	addwfc	i2printf@width+1,f,c
 24753  00293C  4A0D               	infsnz	i2printf@f,f,c
 24754  00293E  2A0E               	incf	i2printf@f+1,f,c
 24755                           
 24756                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 24757  002940  C00D  FFF6         	movff	i2printf@f,tblptrl
 24758  002944  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 24759  002948                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 24760  002948  6AF8               	clrf	tblptru,c
 24761  00294A                     	endif
 24762  00294A                     	if	0	;tblptru may be non-zero
 24763  00294A                     	endif
 24764  00294A  0008               	tblrd		*
 24765  00294C  50F5               	movf	tablat,w,c
 24766  00294E  EC47  F02F         	call	i2_isdigit
 24767  002952  A0D8               	btfss	status,0,c
 24768  002954  D072               	goto	i2l7206
 24769  002956  D7CF               	goto	i2l7164
 24770  002958                     i2l7172:
 24771                           
 24772                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 24773  002958  C020  FFD9         	movff	i2printf@ap,fsr2l
 24774  00295C  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 24775  002960  CFDE F01E          	movff	postinc2,i2printf@cp
 24776  002964  CFDD F01F          	movff	postdec2,i2printf@cp+1
 24777  002968  0E02               	movlw	2
 24778  00296A  2620               	addwf	i2printf@ap,f,c
 24779  00296C  0E00               	movlw	0
 24780  00296E  2221               	addwfc	i2printf@ap+1,f,c
 24781                           
 24782                           ;doprnt.c: 740: if(!cp)
 24783  002970  501E               	movf	i2printf@cp,w,c
 24784  002972  101F               	iorwf	i2printf@cp+1,w,c
 24785  002974  A4D8               	btfss	status,2,c
 24786  002976  D004               	goto	i2l7180
 24787                           
 24788                           ;doprnt.c: 741: cp = "(null)";
 24789  002978  0EB5               	movlw	low STR_129
 24790  00297A  6E1E               	movwf	i2printf@cp,c
 24791  00297C  0EFF               	movlw	high STR_129
 24792  00297E  6E1F               	movwf	i2printf@cp+1,c
 24793  002980                     i2l7180:
 24794                           
 24795                           ;doprnt.c: 745: len = 0;
 24796  002980  0E00               	movlw	0
 24797  002982  6E23               	movwf	i2printf@len+1,c
 24798  002984  0E00               	movlw	0
 24799  002986  6E22               	movwf	i2printf@len,c
 24800                           
 24801                           ;doprnt.c: 746: while(cp[len])
 24802  002988  D002               	goto	i2l7184
 24803  00298A                     i2l7182:
 24804                           
 24805                           ;doprnt.c: 747: len++;
 24806  00298A  4A22               	infsnz	i2printf@len,f,c
 24807  00298C  2A23               	incf	i2printf@len+1,f,c
 24808  00298E                     i2l7184:
 24809  00298E  5022               	movf	i2printf@len,w,c
 24810  002990  241E               	addwf	i2printf@cp,w,c
 24811  002992  6E19               	movwf	??i2_printf& (0+255),c
 24812  002994  5023               	movf	i2printf@len+1,w,c
 24813  002996  201F               	addwfc	i2printf@cp+1,w,c
 24814  002998  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 24815  00299A  C019  FFF6         	movff	??i2_printf,tblptrl
 24816  00299E  C01A  FFF7         	movff	??i2_printf+1,tblptrh
 24817  0029A2  0E00               	movlw	low (__mediumconst shr (0+16))
 24818  0029A4  6EF8               	movwf	tblptru,c
 24819  0029A6  0E0F               	movlw	(high __ramtop+-1)
 24820  0029A8  64F7               	cpfsgt	tblptrh,c
 24821  0029AA  D003               	bra	i2u608_47
 24822  0029AC  0008               	tblrd		*
 24823  0029AE  50F5               	movf	tablat,w,c
 24824  0029B0  D005               	bra	i2u608_40
 24825  0029B2                     i2u608_47:
 24826  0029B2  CFF6 FFE9          	movff	tblptrl,fsr0l
 24827  0029B6  CFF7 FFEA          	movff	tblptrh,fsr0h
 24828  0029BA  50EF               	movf	indf0,w,c
 24829  0029BC                     i2u608_40:
 24830  0029BC  0900               	iorlw	0
 24831  0029BE  A4D8               	btfss	status,2,c
 24832  0029C0  D7E4               	goto	i2l7182
 24833                           
 24834                           ;doprnt.c: 757: if(width > len)
 24835  0029C2  5028               	movf	i2printf@width,w,c
 24836  0029C4  5C22               	subwf	i2printf@len,w,c
 24837  0029C6  5029               	movf	i2printf@width+1,w,c
 24838  0029C8  5823               	subwfb	i2printf@len+1,w,c
 24839  0029CA  B0D8               	btfsc	status,0,c
 24840  0029CC  D005               	goto	i2l7190
 24841                           
 24842                           ;doprnt.c: 758: width -= len;
 24843  0029CE  5022               	movf	i2printf@len,w,c
 24844  0029D0  5E28               	subwf	i2printf@width,f,c
 24845  0029D2  5023               	movf	i2printf@len+1,w,c
 24846  0029D4  5A29               	subwfb	i2printf@width+1,f,c
 24847  0029D6  D008               	goto	i2l7194
 24848  0029D8                     i2l7190:
 24849                           
 24850                           ;doprnt.c: 759: else
 24851                           ;doprnt.c: 760: width = 0;
 24852  0029D8  0E00               	movlw	0
 24853  0029DA  6E29               	movwf	i2printf@width+1,c
 24854  0029DC  0E00               	movlw	0
 24855  0029DE  6E28               	movwf	i2printf@width,c
 24856                           
 24857                           ;doprnt.c: 764: while(width--)
 24858  0029E0  D003               	goto	i2l7194
 24859  0029E2                     i2l7192:
 24860                           
 24861                           ;doprnt.c: 765: (putch(' ') );
 24862  0029E2  0E20               	movlw	32
 24863  0029E4  ECB7  F02F         	call	i2_putch
 24864  0029E8                     i2l7194:
 24865  0029E8  0628               	decf	i2printf@width,f,c
 24866  0029EA  A0D8               	btfss	status,0,c
 24867  0029EC  0629               	decf	i2printf@width+1,f,c
 24868  0029EE  2828               	incf	i2printf@width,w,c
 24869  0029F0  E1F8               	bnz	i2l7192
 24870  0029F2  2829               	incf	i2printf@width+1,w,c
 24871  0029F4  B4D8               	btfsc	status,2,c
 24872  0029F6  D016               	goto	i2l7200
 24873  0029F8  D7F4               	goto	i2l7192
 24874  0029FA                     i2l7196:
 24875                           
 24876                           ;doprnt.c: 768: (putch(*cp++) );
 24877  0029FA  C01E  FFF6         	movff	i2printf@cp,tblptrl
 24878  0029FE  C01F  FFF7         	movff	i2printf@cp+1,tblptrh
 24879  002A02  0E00               	movlw	low (__mediumconst shr (0+16))
 24880  002A04  6EF8               	movwf	tblptru,c
 24881  002A06  0E0F               	movlw	(high __ramtop+-1)
 24882  002A08  64F7               	cpfsgt	tblptrh,c
 24883  002A0A  D003               	bra	i2u612_47
 24884  002A0C  0008               	tblrd		*
 24885  002A0E  50F5               	movf	tablat,w,c
 24886  002A10  D005               	bra	i2u612_40
 24887  002A12                     i2u612_47:
 24888  002A12  CFF6 FFE9          	movff	tblptrl,fsr0l
 24889  002A16  CFF7 FFEA          	movff	tblptrh,fsr0h
 24890  002A1A  50EF               	movf	indf0,w,c
 24891  002A1C                     i2u612_40:
 24892  002A1C  ECB7  F02F         	call	i2_putch
 24893  002A20  4A1E               	infsnz	i2printf@cp,f,c
 24894  002A22  2A1F               	incf	i2printf@cp+1,f,c
 24895  002A24                     i2l7200:
 24896  002A24  0622               	decf	i2printf@len,f,c
 24897  002A26  A0D8               	btfss	status,0,c
 24898  002A28  0623               	decf	i2printf@len+1,f,c
 24899  002A2A  2822               	incf	i2printf@len,w,c
 24900  002A2C  E1E6               	bnz	i2l7196
 24901  002A2E  2823               	incf	i2printf@len+1,w,c
 24902  002A30  B4D8               	btfsc	status,2,c
 24903  002A32  D0DA               	goto	i2l7278
 24904  002A34  D7E2               	goto	i2l7196
 24905  002A36                     i2l7202:
 24906                           
 24907                           ;doprnt.c: 818: flag |= 0x40;
 24908  002A36  8C26               	bsf	i2printf@flag,6,c
 24909                           
 24910                           ;doprnt.c: 822: }
 24911                           
 24912                           ;doprnt.c: 819: break;
 24913  002A38  D01B               	goto	i2l1560
 24914  002A3A                     i2l7206:
 24915  002A3A  C00D  FFF6         	movff	i2printf@f,tblptrl
 24916  002A3E  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 24917  002A42  4A0D               	infsnz	i2printf@f,f,c
 24918  002A44  2A0E               	incf	i2printf@f+1,f,c
 24919  002A46                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 24920  002A46  6AF8               	clrf	tblptru,c
 24921  002A48                     	endif
 24922  002A48                     	if	0	;tblptru may be non-zero
 24923  002A48                     	endif
 24924  002A48  0008               	tblrd		*
 24925  002A4A  CFF5 F027          	movff	tablat,i2printf@c
 24926  002A4E  5027               	movf	i2printf@c,w,c
 24927                           
 24928                           ; Switch size 1, requested type "space"
 24929                           ; Number of cases is 5, Range of values is 0 to 117
 24930                           ; switch strategies available:
 24931                           ; Name         Instructions Cycles
 24932                           ; simple_byte           16     9 (average)
 24933                           ;	Chosen strategy is simple_byte
 24934  002A50  0A00               	xorlw	0	; case 0
 24935  002A52  B4D8               	btfsc	status,2,c
 24936  002A54  0012               	return	
 24937  002A56  0A64               	xorlw	100	; case 100
 24938  002A58  B4D8               	btfsc	status,2,c
 24939  002A5A  D00A               	goto	i2l1560
 24940  002A5C  0A0D               	xorlw	13	; case 105
 24941  002A5E  B4D8               	btfsc	status,2,c
 24942  002A60  D007               	goto	i2l1560
 24943  002A62  0A1A               	xorlw	26	; case 115
 24944  002A64  B4D8               	btfsc	status,2,c
 24945  002A66  D778               	goto	i2l7172
 24946  002A68  0A06               	xorlw	6	; case 117
 24947  002A6A  B4D8               	btfsc	status,2,c
 24948  002A6C  D7E4               	goto	i2l7202
 24949  002A6E  D0BC               	goto	i2l7278
 24950  002A70                     i2l1560:
 24951                           
 24952                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 24953  002A70  BC26               	btfsc	i2printf@flag,6,c
 24954  002A72  D015               	goto	i2l7218
 24955                           
 24956                           ;doprnt.c: 1253: {
 24957                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 24958  002A74  C020  FFD9         	movff	i2printf@ap,fsr2l
 24959  002A78  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 24960  002A7C  CFDE F024          	movff	postinc2,i2printf@val
 24961  002A80  CFDD F025          	movff	postdec2,i2printf@val+1
 24962  002A84  0E02               	movlw	2
 24963  002A86  2620               	addwf	i2printf@ap,f,c
 24964  002A88  0E00               	movlw	0
 24965  002A8A  2221               	addwfc	i2printf@ap+1,f,c
 24966                           
 24967                           ;doprnt.c: 1261: if((int)val < 0) {
 24968  002A8C  AE25               	btfss	i2printf@val+1,7,c
 24969  002A8E  D013               	goto	i2l7222
 24970                           
 24971                           ;doprnt.c: 1262: flag |= 0x03;
 24972  002A90  0E03               	movlw	3
 24973  002A92  1226               	iorwf	i2printf@flag,f,c
 24974                           
 24975                           ;doprnt.c: 1263: val = -val;
 24976  002A94  6C24               	negf	i2printf@val,c
 24977  002A96  1E25               	comf	i2printf@val+1,f,c
 24978  002A98  B0D8               	btfsc	status,0,c
 24979  002A9A  2A25               	incf	i2printf@val+1,f,c
 24980                           
 24981                           ;doprnt.c: 1264: }
 24982                           ;doprnt.c: 1266: }
 24983  002A9C  D00C               	goto	i2l7222
 24984  002A9E                     i2l7218:
 24985                           
 24986                           ;doprnt.c: 1268: else
 24987                           ;doprnt.c: 1273: {
 24988                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 24989  002A9E  C020  FFD9         	movff	i2printf@ap,fsr2l
 24990  002AA2  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 24991  002AA6  CFDE F024          	movff	postinc2,i2printf@val
 24992  002AAA  CFDD F025          	movff	postdec2,i2printf@val+1
 24993  002AAE  0E02               	movlw	2
 24994  002AB0  2620               	addwf	i2printf@ap,f,c
 24995  002AB2  0E00               	movlw	0
 24996  002AB4  2221               	addwfc	i2printf@ap+1,f,c
 24997  002AB6                     i2l7222:
 24998                           
 24999                           ;doprnt.c: 1287: }
 25000                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 25001  002AB6  0E01               	movlw	1
 25002  002AB8  6E27               	movwf	i2printf@c,c
 25003  002ABA                     i2l7224:
 25004  002ABA  0E05               	movlw	5
 25005  002ABC  1827               	xorwf	i2printf@c,w,c
 25006  002ABE  B4D8               	btfsc	status,2,c
 25007  002AC0  D015               	goto	i2l7236
 25008                           
 25009                           ;doprnt.c: 1306: if(val < dpowers[c])
 25010  002AC2  5027               	movf	i2printf@c,w,c
 25011  002AC4  0D02               	mullw	2
 25012  002AC6  0EB8               	movlw	low _dpowers
 25013  002AC8  24F3               	addwf	prodl,w,c
 25014  002ACA  6EF6               	movwf	tblptrl,c
 25015  002ACC  0EFA               	movlw	high _dpowers
 25016  002ACE  20F4               	addwfc	prodh,w,c
 25017  002AD0  6EF7               	movwf	tblptrh,c
 25018  002AD2                     	if	1	;There are 3 active tblptr bytes
 25019  002AD2  6AF8               	clrf	tblptru,c
 25020  002AD4  0E00               	movlw	low (__mediumconst shr (0+16))
 25021  002AD6  22F8               	addwfc	tblptru,f,c
 25022  002AD8                     	endif
 25023  002AD8  0009               	tblrd		*+
 25024  002ADA  50F5               	movf	tablat,w,c
 25025  002ADC  5C24               	subwf	i2printf@val,w,c
 25026  002ADE  0009               	tblrd		*+
 25027  002AE0  50F5               	movf	tablat,w,c
 25028  002AE2  5825               	subwfb	i2printf@val+1,w,c
 25029  002AE4  A0D8               	btfss	status,0,c
 25030  002AE6  D002               	goto	i2l7236
 25031                           
 25032                           ;doprnt.c: 1307: break;
 25033  002AE8  2A27               	incf	i2printf@c,f,c
 25034  002AEA  D7E7               	goto	i2l7224
 25035  002AEC                     i2l7236:
 25036                           
 25037                           ;doprnt.c: 1345: if(width && flag & 0x03)
 25038  002AEC  5028               	movf	i2printf@width,w,c
 25039  002AEE  1029               	iorwf	i2printf@width+1,w,c
 25040  002AF0  B4D8               	btfsc	status,2,c
 25041  002AF2  D009               	goto	i2l7242
 25042  002AF4  C026  F019         	movff	i2printf@flag,??i2_printf
 25043  002AF8  0E03               	movlw	3
 25044  002AFA  1619               	andwf	??i2_printf,f,c
 25045  002AFC  B4D8               	btfsc	status,2,c
 25046  002AFE  D003               	goto	i2l7242
 25047                           
 25048                           ;doprnt.c: 1346: width--;
 25049  002B00  0628               	decf	i2printf@width,f,c
 25050  002B02  A0D8               	btfss	status,0,c
 25051  002B04  0629               	decf	i2printf@width+1,f,c
 25052  002B06                     i2l7242:
 25053                           
 25054                           ;doprnt.c: 1381: if(width > c)
 25055  002B06  0E80               	movlw	128
 25056  002B08  BE27               	btfsc	i2printf@c,7,c
 25057  002B0A  0E7F               	movlw	127
 25058  002B0C  6E19               	movwf	??i2_printf& (0+255),c
 25059  002B0E  5028               	movf	i2printf@width,w,c
 25060  002B10  5C27               	subwf	i2printf@c,w,c
 25061  002B12  5029               	movf	i2printf@width+1,w,c
 25062  002B14  0A80               	xorlw	128
 25063  002B16  5819               	subwfb	??i2_printf& (0+255),w,c
 25064  002B18  B0D8               	btfsc	status,0,c
 25065  002B1A  D007               	goto	i2l7246
 25066                           
 25067                           ;doprnt.c: 1382: width -= c;
 25068  002B1C  5027               	movf	i2printf@c,w,c
 25069  002B1E  5E28               	subwf	i2printf@width,f,c
 25070  002B20  0E00               	movlw	0
 25071  002B22  BE27               	btfsc	i2printf@c,7,c
 25072  002B24  0EFF               	movlw	255
 25073  002B26  5A29               	subwfb	i2printf@width+1,f,c
 25074  002B28  D004               	goto	i2l7248
 25075  002B2A                     i2l7246:
 25076                           
 25077                           ;doprnt.c: 1383: else
 25078                           ;doprnt.c: 1384: width = 0;
 25079  002B2A  0E00               	movlw	0
 25080  002B2C  6E29               	movwf	i2printf@width+1,c
 25081  002B2E  0E00               	movlw	0
 25082  002B30  6E28               	movwf	i2printf@width,c
 25083  002B32                     i2l7248:
 25084                           
 25085                           ;doprnt.c: 1387: if(flag & 0x04) {
 25086  002B32  A426               	btfss	i2printf@flag,2,c
 25087  002B34  D014               	goto	i2l7260
 25088                           
 25089                           ;doprnt.c: 1392: if(flag & 0x03)
 25090  002B36  C026  F019         	movff	i2printf@flag,??i2_printf
 25091  002B3A  0E03               	movlw	3
 25092  002B3C  1619               	andwf	??i2_printf,f,c
 25093  002B3E  B4D8               	btfsc	status,2,c
 25094  002B40  D003               	goto	i2l7254
 25095                           
 25096                           ;doprnt.c: 1393: (putch('-') );
 25097  002B42  0E2D               	movlw	45
 25098  002B44  ECB7  F02F         	call	i2_putch
 25099  002B48                     i2l7254:
 25100                           
 25101                           ;doprnt.c: 1415: if(width)
 25102  002B48  5028               	movf	i2printf@width,w,c
 25103  002B4A  1029               	iorwf	i2printf@width+1,w,c
 25104  002B4C  B4D8               	btfsc	status,2,c
 25105  002B4E  D01E               	goto	i2l7270
 25106                           
 25107                           ;doprnt.c: 1417: (putch('0') );
 25108                           
 25109                           ;doprnt.c: 1416: do
 25110  002B50  0E30               	movlw	48
 25111  002B52  ECB7  F02F         	call	i2_putch
 25112                           
 25113                           ;doprnt.c: 1418: while(--width);
 25114  002B56  0628               	decf	i2printf@width,f,c
 25115  002B58  A0D8               	btfss	status,0,c
 25116  002B5A  0629               	decf	i2printf@width+1,f,c
 25117  002B5C  D7F5               	goto	i2l7254
 25118  002B5E                     i2l7260:
 25119                           
 25120                           ;doprnt.c: 1422: {
 25121                           ;doprnt.c: 1424: if(width
 25122                           ;doprnt.c: 1428: )
 25123  002B5E  5028               	movf	i2printf@width,w,c
 25124  002B60  1029               	iorwf	i2printf@width+1,w,c
 25125  002B62  B4D8               	btfsc	status,2,c
 25126  002B64  D00A               	goto	i2l7266
 25127  002B66                     i2l7262:
 25128                           
 25129                           ;doprnt.c: 1430: (putch(' ') );
 25130  002B66  0E20               	movlw	32
 25131  002B68  ECB7  F02F         	call	i2_putch
 25132                           
 25133                           ;doprnt.c: 1431: while(--width);
 25134  002B6C  0628               	decf	i2printf@width,f,c
 25135  002B6E  A0D8               	btfss	status,0,c
 25136  002B70  0629               	decf	i2printf@width+1,f,c
 25137  002B72  5028               	movf	i2printf@width,w,c
 25138  002B74  1029               	iorwf	i2printf@width+1,w,c
 25139  002B76  A4D8               	btfss	status,2,c
 25140  002B78  D7F6               	goto	i2l7262
 25141  002B7A                     i2l7266:
 25142                           
 25143                           ;doprnt.c: 1438: if(flag & 0x03)
 25144  002B7A  C026  F019         	movff	i2printf@flag,??i2_printf
 25145  002B7E  0E03               	movlw	3
 25146  002B80  1619               	andwf	??i2_printf,f,c
 25147  002B82  B4D8               	btfsc	status,2,c
 25148  002B84  D003               	goto	i2l7270
 25149                           
 25150                           ;doprnt.c: 1439: (putch('-') );
 25151  002B86  0E2D               	movlw	45
 25152  002B88  ECB7  F02F         	call	i2_putch
 25153  002B8C                     i2l7270:
 25154                           
 25155                           ;doprnt.c: 1469: }
 25156                           ;doprnt.c: 1472: prec = c;
 25157  002B8C  C027  F01D         	movff	i2printf@c,i2printf@prec
 25158                           
 25159                           ;doprnt.c: 1474: while(prec--) {
 25160  002B90  D027               	goto	i2l7276
 25161  002B92                     i2l7272:
 25162                           
 25163                           ;doprnt.c: 1478: {
 25164                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 25165  002B92  501D               	movf	i2printf@prec,w,c
 25166  002B94  0D02               	mullw	2
 25167  002B96  0EB8               	movlw	low _dpowers
 25168  002B98  24F3               	addwf	prodl,w,c
 25169  002B9A  6EF6               	movwf	tblptrl,c
 25170  002B9C  0EFA               	movlw	high _dpowers
 25171  002B9E  20F4               	addwfc	prodh,w,c
 25172  002BA0  6EF7               	movwf	tblptrh,c
 25173  002BA2                     	if	1	;There are 3 active tblptr bytes
 25174  002BA2  6AF8               	clrf	tblptru,c
 25175  002BA4  0E00               	movlw	low (__mediumconst shr (0+16))
 25176  002BA6  22F8               	addwfc	tblptru,f,c
 25177  002BA8                     	endif
 25178  002BA8  0009               	tblrd		*+
 25179  002BAA  CFF5 F008          	movff	tablat,i2___lwdiv@divisor
 25180  002BAE  000A               	tblrd		*-
 25181  002BB0  CFF5 F009          	movff	tablat,i2___lwdiv@divisor+1
 25182  002BB4  C024  F006         	movff	i2printf@val,i2___lwdiv@dividend
 25183  002BB8  C025  F007         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 25184  002BBC  ECA7  F02B         	call	i2___lwdiv	;wreg free
 25185  002BC0  C006  F001         	movff	?i2___lwdiv,i2___lwmod@dividend
 25186  002BC4  C007  F002         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 25187  002BC8  0E00               	movlw	0
 25188  002BCA  6E04               	movwf	i2___lwmod@divisor+1,c
 25189  002BCC  0E0A               	movlw	10
 25190  002BCE  6E03               	movwf	i2___lwmod@divisor,c
 25191  002BD0  EC88  F02C         	call	i2___lwmod	;wreg free
 25192  002BD4  5001               	movf	?i2___lwmod,w,c
 25193  002BD6  0F30               	addlw	48
 25194  002BD8  6E27               	movwf	i2printf@c,c
 25195                           
 25196                           ;doprnt.c: 1523: }
 25197                           ;doprnt.c: 1524: (putch(c) );
 25198  002BDA  5027               	movf	i2printf@c,w,c
 25199  002BDC  ECB7  F02F         	call	i2_putch
 25200  002BE0                     i2l7276:
 25201  002BE0  061D               	decf	i2printf@prec,f,c
 25202  002BE2  281D               	incf	i2printf@prec,w,c
 25203  002BE4  A4D8               	btfss	status,2,c
 25204  002BE6  D7D5               	goto	i2l7272
 25205  002BE8                     i2l7278:
 25206  002BE8  C00D  FFF6         	movff	i2printf@f,tblptrl
 25207  002BEC  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 25208  002BF0  4A0D               	infsnz	i2printf@f,f,c
 25209  002BF2  2A0E               	incf	i2printf@f+1,f,c
 25210  002BF4                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 25211  002BF4  6AF8               	clrf	tblptru,c
 25212  002BF6                     	endif
 25213  002BF6                     	if	0	;tblptru may be non-zero
 25214  002BF6                     	endif
 25215  002BF6  0008               	tblrd		*
 25216  002BF8  CFF5 F027          	movff	tablat,i2printf@c
 25217  002BFC  5027               	movf	i2printf@c,w,c
 25218  002BFE  B4D8               	btfsc	status,2,c
 25219  002C00  0012               	return	
 25220  002C02  D64E               	goto	i2l7148
 25221  002C04                     __end_ofi2_printf:
 25222                           	opt stack 0
 25223                           pclatu	equ	0xFFB
 25224                           pclath	equ	0xFFA
 25225                           tblptru	equ	0xFF8
 25226                           tblptrh	equ	0xFF7
 25227                           tblptrl	equ	0xFF6
 25228                           tablat	equ	0xFF5
 25229                           prodh	equ	0xFF4
 25230                           prodl	equ	0xFF3
 25231                           intcon	equ	0xFF2
 25232                           intcon2	equ	0xFF1
 25233                           intcon3	equ	0xFF0
 25234                           indf0	equ	0xFEF
 25235                           postinc0	equ	0xFEE
 25236                           fsr0h	equ	0xFEA
 25237                           fsr0l	equ	0xFE9
 25238                           wreg	equ	0xFE8
 25239                           postdec1	equ	0xFE5
 25240                           fsr1h	equ	0xFE2
 25241                           fsr1l	equ	0xFE1
 25242                           indf2	equ	0xFDF
 25243                           postinc2	equ	0xFDE
 25244                           postdec2	equ	0xFDD
 25245                           fsr2h	equ	0xFDA
 25246                           fsr2l	equ	0xFD9
 25247                           status	equ	0xFD8
 25248                           
 25249 ;; *************** function i2_putch *****************
 25250 ;; Defined at:
 25251 ;;		line 20 in file "lcd.c"
 25252 ;; Parameters:    Size  Location     Type
 25253 ;;  data            1    wreg     unsigned char 
 25254 ;; Auto vars:     Size  Location     Type
 25255 ;;  data            1    2[COMRAM] unsigned char 
 25256 ;; Return value:  Size  Location     Type
 25257 ;;                  1    wreg      void 
 25258 ;; Registers used:
 25259 ;;		wreg, status,2, status,0, cstack
 25260 ;; Tracked objects:
 25261 ;;		On entry : 0/0
 25262 ;;		On exit  : 0/0
 25263 ;;		Unchanged: 0/0
 25264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25265 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25266 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25267 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25268 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25269 ;;Total ram usage:        1 bytes
 25270 ;; Hardware stack levels used:    1
 25271 ;; Hardware stack levels required when called:    1
 25272 ;; This function calls:
 25273 ;;		i2_lcdNibble
 25274 ;; This function is called by:
 25275 ;;		i2_printf
 25276 ;; This function uses a non-reentrant model
 25277 ;;
 25278                           
 25279                           	psect	text88
 25280  005F6E                     __ptext88:
 25281                           	opt stack 0
 25282  005F6E                     i2_putch:
 25283                           	opt stack 20
 25284                           
 25285                           ;incstack = 0
 25286                           ;i2putch@data stored from wreg
 25287  005F6E  6E03               	movwf	i2putch@data,c
 25288                           
 25289                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 25290  005F70  848C               	bsf	3980,2,c	;volatile
 25291                           
 25292                           ;lcd.c: 22: lcdNibble(data);
 25293  005F72  5003               	movf	i2putch@data,w,c
 25294  005F74  EC7A  F02B         	call	i2_lcdNibble
 25295  005F78  0012               	return		;funcret
 25296  005F7A                     __end_ofi2_putch:
 25297                           	opt stack 0
 25298                           pclatu	equ	0xFFB
 25299                           pclath	equ	0xFFA
 25300                           tblptru	equ	0xFF8
 25301                           tblptrh	equ	0xFF7
 25302                           tblptrl	equ	0xFF6
 25303                           tablat	equ	0xFF5
 25304                           prodh	equ	0xFF4
 25305                           prodl	equ	0xFF3
 25306                           intcon	equ	0xFF2
 25307                           intcon2	equ	0xFF1
 25308                           intcon3	equ	0xFF0
 25309                           indf0	equ	0xFEF
 25310                           postinc0	equ	0xFEE
 25311                           fsr0h	equ	0xFEA
 25312                           fsr0l	equ	0xFE9
 25313                           wreg	equ	0xFE8
 25314                           postdec1	equ	0xFE5
 25315                           fsr1h	equ	0xFE2
 25316                           fsr1l	equ	0xFE1
 25317                           indf2	equ	0xFDF
 25318                           postinc2	equ	0xFDE
 25319                           postdec2	equ	0xFDD
 25320                           fsr2h	equ	0xFDA
 25321                           fsr2l	equ	0xFD9
 25322                           status	equ	0xFD8
 25323                           
 25324 ;; *************** function i2_isdigit *****************
 25325 ;; Defined at:
 25326 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 25327 ;; Parameters:    Size  Location     Type
 25328 ;;  c               1    wreg     unsigned char 
 25329 ;; Auto vars:     Size  Location     Type
 25330 ;;  c               1    2[COMRAM] unsigned char 
 25331 ;; Return value:  Size  Location     Type
 25332 ;;		None               void
 25333 ;; Registers used:
 25334 ;;		wreg, status,2, status,0
 25335 ;; Tracked objects:
 25336 ;;		On entry : 0/0
 25337 ;;		On exit  : 0/0
 25338 ;;		Unchanged: 0/0
 25339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25340 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25341 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25342 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25343 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25344 ;;Total ram usage:        3 bytes
 25345 ;; Hardware stack levels used:    1
 25346 ;; This function calls:
 25347 ;;		Nothing
 25348 ;; This function is called by:
 25349 ;;		i2_printf
 25350 ;; This function uses a non-reentrant model
 25351 ;;
 25352                           
 25353                           	psect	text89
 25354  005E8E                     __ptext89:
 25355                           	opt stack 0
 25356  005E8E                     i2_isdigit:
 25357                           	opt stack 21
 25358                           
 25359                           ;incstack = 0
 25360                           ;i2isdigit@c stored from wreg
 25361  005E8E  6E03               	movwf	i2isdigit@c,c
 25362  005E90  0E00               	movlw	0
 25363  005E92  6E02               	movwf	i2_isdigit$2072,c
 25364  005E94  0E3A               	movlw	58
 25365  005E96  6003               	cpfslt	i2isdigit@c,c
 25366  005E98  D005               	goto	i2l6802
 25367  005E9A  0E2F               	movlw	47
 25368  005E9C  6403               	cpfsgt	i2isdigit@c,c
 25369  005E9E  D002               	goto	i2l6802
 25370  005EA0  0E01               	movlw	1
 25371  005EA2  6E02               	movwf	i2_isdigit$2072,c
 25372  005EA4                     i2l6802:
 25373  005EA4  C002  F001         	movff	i2_isdigit$2072,??i2_isdigit
 25374  005EA8  3001               	rrcf	??i2_isdigit,w,c
 25375  005EAA  0012               	return	
 25376  005EAC                     __end_ofi2_isdigit:
 25377                           	opt stack 0
 25378                           pclatu	equ	0xFFB
 25379                           pclath	equ	0xFFA
 25380                           tblptru	equ	0xFF8
 25381                           tblptrh	equ	0xFF7
 25382                           tblptrl	equ	0xFF6
 25383                           tablat	equ	0xFF5
 25384                           prodh	equ	0xFF4
 25385                           prodl	equ	0xFF3
 25386                           intcon	equ	0xFF2
 25387                           intcon2	equ	0xFF1
 25388                           intcon3	equ	0xFF0
 25389                           indf0	equ	0xFEF
 25390                           postinc0	equ	0xFEE
 25391                           fsr0h	equ	0xFEA
 25392                           fsr0l	equ	0xFE9
 25393                           wreg	equ	0xFE8
 25394                           postdec1	equ	0xFE5
 25395                           fsr1h	equ	0xFE2
 25396                           fsr1l	equ	0xFE1
 25397                           indf2	equ	0xFDF
 25398                           postinc2	equ	0xFDE
 25399                           postdec2	equ	0xFDD
 25400                           fsr2h	equ	0xFDA
 25401                           fsr2l	equ	0xFD9
 25402                           status	equ	0xFD8
 25403                           
 25404 ;; *************** function i2___wmul *****************
 25405 ;; Defined at:
 25406 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 25407 ;; Parameters:    Size  Location     Type
 25408 ;;  multiplier      2    0[COMRAM] unsigned int 
 25409 ;;  multiplicand    2    2[COMRAM] unsigned int 
 25410 ;; Auto vars:     Size  Location     Type
 25411 ;;  __wmul          2    4[COMRAM] unsigned int 
 25412 ;; Return value:  Size  Location     Type
 25413 ;;                  2    0[COMRAM] unsigned int 
 25414 ;; Registers used:
 25415 ;;		wreg, status,2, status,0, prodl, prodh
 25416 ;; Tracked objects:
 25417 ;;		On entry : 0/0
 25418 ;;		On exit  : 0/0
 25419 ;;		Unchanged: 0/0
 25420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25421 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25422 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25423 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25424 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25425 ;;Total ram usage:        6 bytes
 25426 ;; Hardware stack levels used:    1
 25427 ;; This function calls:
 25428 ;;		Nothing
 25429 ;; This function is called by:
 25430 ;;		_printSortTimer
 25431 ;;		_retrieveLog
 25432 ;;		i2_printf
 25433 ;; This function uses a non-reentrant model
 25434 ;;
 25435                           
 25436                           	psect	text90
 25437  005DDA                     __ptext90:
 25438                           	opt stack 0
 25439  005DDA                     i2___wmul:
 25440                           	opt stack 21
 25441                           
 25442                           ;incstack = 0
 25443  005DDA  5001               	movf	i2___wmul@multiplier,w,c
 25444  005DDC  0203               	mulwf	i2___wmul@multiplicand,c
 25445  005DDE  CFF3 F005          	movff	prodl,i2___wmul@product
 25446  005DE2  CFF4 F006          	movff	prodh,i2___wmul@product+1
 25447  005DE6  5001               	movf	i2___wmul@multiplier,w,c
 25448  005DE8  0204               	mulwf	i2___wmul@multiplicand+1,c
 25449  005DEA  50F3               	movf	prodl,w,c
 25450  005DEC  2606               	addwf	i2___wmul@product+1,f,c
 25451  005DEE  5002               	movf	i2___wmul@multiplier+1,w,c
 25452  005DF0  0203               	mulwf	i2___wmul@multiplicand,c
 25453  005DF2  50F3               	movf	prodl,w,c
 25454  005DF4  2606               	addwf	i2___wmul@product+1,f,c
 25455  005DF6  C005  F001         	movff	i2___wmul@product,?i2___wmul
 25456  005DFA  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 25457  005DFE  0012               	return	
 25458  005E00                     __end_ofi2___wmul:
 25459                           	opt stack 0
 25460                           pclatu	equ	0xFFB
 25461                           pclath	equ	0xFFA
 25462                           tblptru	equ	0xFF8
 25463                           tblptrh	equ	0xFF7
 25464                           tblptrl	equ	0xFF6
 25465                           tablat	equ	0xFF5
 25466                           prodh	equ	0xFF4
 25467                           prodl	equ	0xFF3
 25468                           intcon	equ	0xFF2
 25469                           intcon2	equ	0xFF1
 25470                           intcon3	equ	0xFF0
 25471                           indf0	equ	0xFEF
 25472                           postinc0	equ	0xFEE
 25473                           fsr0h	equ	0xFEA
 25474                           fsr0l	equ	0xFE9
 25475                           wreg	equ	0xFE8
 25476                           postdec1	equ	0xFE5
 25477                           fsr1h	equ	0xFE2
 25478                           fsr1l	equ	0xFE1
 25479                           indf2	equ	0xFDF
 25480                           postinc2	equ	0xFDE
 25481                           postdec2	equ	0xFDD
 25482                           fsr2h	equ	0xFDA
 25483                           fsr2l	equ	0xFD9
 25484                           status	equ	0xFD8
 25485                           
 25486 ;; *************** function i2___lwmod *****************
 25487 ;; Defined at:
 25488 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 25489 ;; Parameters:    Size  Location     Type
 25490 ;;  dividend        2    0[COMRAM] unsigned int 
 25491 ;;  divisor         2    2[COMRAM] unsigned int 
 25492 ;; Auto vars:     Size  Location     Type
 25493 ;;  __lwmod         1    4[COMRAM] unsigned char 
 25494 ;; Return value:  Size  Location     Type
 25495 ;;                  2    0[COMRAM] unsigned int 
 25496 ;; Registers used:
 25497 ;;		wreg, status,2, status,0
 25498 ;; Tracked objects:
 25499 ;;		On entry : 0/0
 25500 ;;		On exit  : 0/0
 25501 ;;		Unchanged: 0/0
 25502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25503 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25504 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25505 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25506 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25507 ;;Total ram usage:        5 bytes
 25508 ;; Hardware stack levels used:    1
 25509 ;; This function calls:
 25510 ;;		Nothing
 25511 ;; This function is called by:
 25512 ;;		_printSortTimer
 25513 ;;		i2_printf
 25514 ;; This function uses a non-reentrant model
 25515 ;;
 25516                           
 25517                           	psect	text91
 25518  005910                     __ptext91:
 25519                           	opt stack 0
 25520  005910                     i2___lwmod:
 25521                           	opt stack 21
 25522                           
 25523                           ;incstack = 0
 25524  005910  5003               	movf	i2___lwmod@divisor,w,c
 25525  005912  1004               	iorwf	i2___lwmod@divisor+1,w,c
 25526  005914  B4D8               	btfsc	status,2,c
 25527  005916  D018               	goto	i2l2017
 25528  005918  0E01               	movlw	1
 25529  00591A  6E05               	movwf	i2___lwmod@counter,c
 25530  00591C  D004               	goto	i2l6834
 25531  00591E                     i2l6832:
 25532  00591E  90D8               	bcf	status,0,c
 25533  005920  3603               	rlcf	i2___lwmod@divisor,f,c
 25534  005922  3604               	rlcf	i2___lwmod@divisor+1,f,c
 25535  005924  2A05               	incf	i2___lwmod@counter,f,c
 25536  005926                     i2l6834:
 25537  005926  AE04               	btfss	i2___lwmod@divisor+1,7,c
 25538  005928  D7FA               	goto	i2l6832
 25539  00592A                     i2l6836:
 25540  00592A  5003               	movf	i2___lwmod@divisor,w,c
 25541  00592C  5C01               	subwf	i2___lwmod@dividend,w,c
 25542  00592E  5004               	movf	i2___lwmod@divisor+1,w,c
 25543  005930  5802               	subwfb	i2___lwmod@dividend+1,w,c
 25544  005932  A0D8               	btfss	status,0,c
 25545  005934  D004               	goto	i2l6840
 25546  005936  5003               	movf	i2___lwmod@divisor,w,c
 25547  005938  5E01               	subwf	i2___lwmod@dividend,f,c
 25548  00593A  5004               	movf	i2___lwmod@divisor+1,w,c
 25549  00593C  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 25550  00593E                     i2l6840:
 25551  00593E  90D8               	bcf	status,0,c
 25552  005940  3204               	rrcf	i2___lwmod@divisor+1,f,c
 25553  005942  3203               	rrcf	i2___lwmod@divisor,f,c
 25554  005944  2E05               	decfsz	i2___lwmod@counter,f,c
 25555  005946  D7F1               	goto	i2l6836
 25556  005948                     i2l2017:
 25557  005948  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 25558  00594C  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 25559  005950  0012               	return		;funcret
 25560  005952                     __end_ofi2___lwmod:
 25561                           	opt stack 0
 25562                           pclatu	equ	0xFFB
 25563                           pclath	equ	0xFFA
 25564                           tblptru	equ	0xFF8
 25565                           tblptrh	equ	0xFF7
 25566                           tblptrl	equ	0xFF6
 25567                           tablat	equ	0xFF5
 25568                           prodh	equ	0xFF4
 25569                           prodl	equ	0xFF3
 25570                           intcon	equ	0xFF2
 25571                           intcon2	equ	0xFF1
 25572                           intcon3	equ	0xFF0
 25573                           indf0	equ	0xFEF
 25574                           postinc0	equ	0xFEE
 25575                           fsr0h	equ	0xFEA
 25576                           fsr0l	equ	0xFE9
 25577                           wreg	equ	0xFE8
 25578                           postdec1	equ	0xFE5
 25579                           fsr1h	equ	0xFE2
 25580                           fsr1l	equ	0xFE1
 25581                           indf2	equ	0xFDF
 25582                           postinc2	equ	0xFDE
 25583                           postdec2	equ	0xFDD
 25584                           fsr2h	equ	0xFDA
 25585                           fsr2l	equ	0xFD9
 25586                           status	equ	0xFD8
 25587                           
 25588 ;; *************** function i2___lwdiv *****************
 25589 ;; Defined at:
 25590 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 25591 ;; Parameters:    Size  Location     Type
 25592 ;;  dividend        2    5[COMRAM] unsigned int 
 25593 ;;  divisor         2    7[COMRAM] unsigned int 
 25594 ;; Auto vars:     Size  Location     Type
 25595 ;;  __lwdiv         2    9[COMRAM] unsigned int 
 25596 ;;  __lwdiv         1   11[COMRAM] unsigned char 
 25597 ;; Return value:  Size  Location     Type
 25598 ;;                  2    5[COMRAM] unsigned int 
 25599 ;; Registers used:
 25600 ;;		wreg, status,2, status,0
 25601 ;; Tracked objects:
 25602 ;;		On entry : 0/0
 25603 ;;		On exit  : 0/0
 25604 ;;		Unchanged: 0/0
 25605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25606 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25607 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25608 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25609 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25610 ;;Total ram usage:        7 bytes
 25611 ;; Hardware stack levels used:    1
 25612 ;; This function calls:
 25613 ;;		Nothing
 25614 ;; This function is called by:
 25615 ;;		_printSortTimer
 25616 ;;		i2_printf
 25617 ;; This function uses a non-reentrant model
 25618 ;;
 25619                           
 25620                           	psect	text92
 25621  00574E                     __ptext92:
 25622                           	opt stack 0
 25623  00574E                     i2___lwdiv:
 25624                           	opt stack 21
 25625                           
 25626                           ;incstack = 0
 25627  00574E  0E00               	movlw	0
 25628  005750  6E0B               	movwf	i2___lwdiv@quotient+1,c
 25629  005752  0E00               	movlw	0
 25630  005754  6E0A               	movwf	i2___lwdiv@quotient,c
 25631  005756  5008               	movf	i2___lwdiv@divisor,w,c
 25632  005758  1009               	iorwf	i2___lwdiv@divisor+1,w,c
 25633  00575A  B4D8               	btfsc	status,2,c
 25634  00575C  D01C               	goto	i2l2007
 25635  00575E  0E01               	movlw	1
 25636  005760  6E0C               	movwf	i2___lwdiv@counter,c
 25637  005762  D004               	goto	i2l6814
 25638  005764                     i2l6812:
 25639  005764  90D8               	bcf	status,0,c
 25640  005766  3608               	rlcf	i2___lwdiv@divisor,f,c
 25641  005768  3609               	rlcf	i2___lwdiv@divisor+1,f,c
 25642  00576A  2A0C               	incf	i2___lwdiv@counter,f,c
 25643  00576C                     i2l6814:
 25644  00576C  AE09               	btfss	i2___lwdiv@divisor+1,7,c
 25645  00576E  D7FA               	goto	i2l6812
 25646  005770                     i2l6816:
 25647  005770  90D8               	bcf	status,0,c
 25648  005772  360A               	rlcf	i2___lwdiv@quotient,f,c
 25649  005774  360B               	rlcf	i2___lwdiv@quotient+1,f,c
 25650  005776  5008               	movf	i2___lwdiv@divisor,w,c
 25651  005778  5C06               	subwf	i2___lwdiv@dividend,w,c
 25652  00577A  5009               	movf	i2___lwdiv@divisor+1,w,c
 25653  00577C  5807               	subwfb	i2___lwdiv@dividend+1,w,c
 25654  00577E  A0D8               	btfss	status,0,c
 25655  005780  D005               	goto	i2l6824
 25656  005782  5008               	movf	i2___lwdiv@divisor,w,c
 25657  005784  5E06               	subwf	i2___lwdiv@dividend,f,c
 25658  005786  5009               	movf	i2___lwdiv@divisor+1,w,c
 25659  005788  5A07               	subwfb	i2___lwdiv@dividend+1,f,c
 25660  00578A  800A               	bsf	i2___lwdiv@quotient,0,c
 25661  00578C                     i2l6824:
 25662  00578C  90D8               	bcf	status,0,c
 25663  00578E  3209               	rrcf	i2___lwdiv@divisor+1,f,c
 25664  005790  3208               	rrcf	i2___lwdiv@divisor,f,c
 25665  005792  2E0C               	decfsz	i2___lwdiv@counter,f,c
 25666  005794  D7ED               	goto	i2l6816
 25667  005796                     i2l2007:
 25668  005796  C00A  F006         	movff	i2___lwdiv@quotient,?i2___lwdiv
 25669  00579A  C00B  F007         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 25670  00579E  0012               	return		;funcret
 25671  0057A0                     __end_ofi2___lwdiv:
 25672                           	opt stack 0
 25673                           pclatu	equ	0xFFB
 25674                           pclath	equ	0xFFA
 25675                           tblptru	equ	0xFF8
 25676                           tblptrh	equ	0xFF7
 25677                           tblptrl	equ	0xFF6
 25678                           tablat	equ	0xFF5
 25679                           prodh	equ	0xFF4
 25680                           prodl	equ	0xFF3
 25681                           intcon	equ	0xFF2
 25682                           intcon2	equ	0xFF1
 25683                           intcon3	equ	0xFF0
 25684                           indf0	equ	0xFEF
 25685                           postinc0	equ	0xFEE
 25686                           fsr0h	equ	0xFEA
 25687                           fsr0l	equ	0xFE9
 25688                           wreg	equ	0xFE8
 25689                           postdec1	equ	0xFE5
 25690                           fsr1h	equ	0xFE2
 25691                           fsr1l	equ	0xFE1
 25692                           indf2	equ	0xFDF
 25693                           postinc2	equ	0xFDE
 25694                           postdec2	equ	0xFDD
 25695                           fsr2h	equ	0xFDA
 25696                           fsr2l	equ	0xFD9
 25697                           status	equ	0xFD8
 25698                           
 25699 ;; *************** function i2_lcdInst *****************
 25700 ;; Defined at:
 25701 ;;		line 15 in file "lcd.c"
 25702 ;; Parameters:    Size  Location     Type
 25703 ;;  data            1    wreg     unsigned char 
 25704 ;; Auto vars:     Size  Location     Type
 25705 ;;  data            1    2[COMRAM] unsigned char 
 25706 ;; Return value:  Size  Location     Type
 25707 ;;                  1    wreg      void 
 25708 ;; Registers used:
 25709 ;;		wreg, status,2, status,0, cstack
 25710 ;; Tracked objects:
 25711 ;;		On entry : 0/0
 25712 ;;		On exit  : 0/0
 25713 ;;		Unchanged: 0/0
 25714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25715 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25716 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25717 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25718 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25719 ;;Total ram usage:        1 bytes
 25720 ;; Hardware stack levels used:    1
 25721 ;; Hardware stack levels required when called:    1
 25722 ;; This function calls:
 25723 ;;		i2_lcdNibble
 25724 ;; This function is called by:
 25725 ;;		_change_state_to_menu_11
 25726 ;;		_change_state_to_menu_23
 25727 ;;		_change_state_to_logs_11
 25728 ;;		_change_state_to_logs_12
 25729 ;;		_change_state_to_logs_22
 25730 ;;		_change_state_to_logs_23
 25731 ;;		_change_state_to_logs_33
 25732 ;;		_change_state_to_logs_34
 25733 ;;		_printSortTimer
 25734 ;;		i2_change_state_to_menu_start
 25735 ;;		i2_change_state_to_menu_12
 25736 ;;		i2_change_state_to_menu_22
 25737 ;;		i2_printRTC
 25738 ;; This function uses a non-reentrant model
 25739 ;;
 25740                           
 25741                           	psect	text93
 25742  005F7A                     __ptext93:
 25743                           	opt stack 0
 25744  005F7A                     i2_lcdInst:
 25745                           	opt stack 20
 25746                           
 25747                           ;incstack = 0
 25748                           ;i2lcdInst@data stored from wreg
 25749  005F7A  6E03               	movwf	i2lcdInst@data,c
 25750                           
 25751                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 25752  005F7C  948C               	bcf	3980,2,c	;volatile
 25753                           
 25754                           ;lcd.c: 17: lcdNibble(data);
 25755  005F7E  5003               	movf	i2lcdInst@data,w,c
 25756  005F80  EC7A  F02B         	call	i2_lcdNibble
 25757  005F84  0012               	return		;funcret
 25758  005F86                     __end_ofi2_lcdInst:
 25759                           	opt stack 0
 25760                           pclatu	equ	0xFFB
 25761                           pclath	equ	0xFFA
 25762                           tblptru	equ	0xFF8
 25763                           tblptrh	equ	0xFF7
 25764                           tblptrl	equ	0xFF6
 25765                           tablat	equ	0xFF5
 25766                           prodh	equ	0xFF4
 25767                           prodl	equ	0xFF3
 25768                           intcon	equ	0xFF2
 25769                           intcon2	equ	0xFF1
 25770                           intcon3	equ	0xFF0
 25771                           indf0	equ	0xFEF
 25772                           postinc0	equ	0xFEE
 25773                           fsr0h	equ	0xFEA
 25774                           fsr0l	equ	0xFE9
 25775                           wreg	equ	0xFE8
 25776                           postdec1	equ	0xFE5
 25777                           fsr1h	equ	0xFE2
 25778                           fsr1l	equ	0xFE1
 25779                           indf2	equ	0xFDF
 25780                           postinc2	equ	0xFDE
 25781                           postdec2	equ	0xFDD
 25782                           fsr2h	equ	0xFDA
 25783                           fsr2l	equ	0xFD9
 25784                           status	equ	0xFD8
 25785                           
 25786 ;; *************** function i2_lcdNibble *****************
 25787 ;; Defined at:
 25788 ;;		line 25 in file "lcd.c"
 25789 ;; Parameters:    Size  Location     Type
 25790 ;;  data            1    wreg     unsigned char 
 25791 ;; Auto vars:     Size  Location     Type
 25792 ;;  data            1    1[COMRAM] unsigned char 
 25793 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 25794 ;; Return value:  Size  Location     Type
 25795 ;;                  1    wreg      void 
 25796 ;; Registers used:
 25797 ;;		wreg, status,2, status,0
 25798 ;; Tracked objects:
 25799 ;;		On entry : 0/0
 25800 ;;		On exit  : 0/0
 25801 ;;		Unchanged: 0/0
 25802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25803 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25804 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25805 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25806 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25807 ;;Total ram usage:        2 bytes
 25808 ;; Hardware stack levels used:    1
 25809 ;; This function calls:
 25810 ;;		Nothing
 25811 ;; This function is called by:
 25812 ;;		i2_lcdInst
 25813 ;;		i2_putch
 25814 ;; This function uses a non-reentrant model
 25815 ;;
 25816                           
 25817                           	psect	text94
 25818  0056F4                     __ptext94:
 25819                           	opt stack 0
 25820  0056F4                     i2_lcdNibble:
 25821                           	opt stack 20
 25822                           
 25823                           ;incstack = 0
 25824                           ;i2lcdNibble@data stored from wreg
 25825  0056F4  6E02               	movwf	i2lcdNibble@data,c
 25826                           
 25827                           ;lcd.c: 27: (INTCONbits.GIE = 0);
 25828  0056F6  9EF2               	bcf	intcon,7,c	;volatile
 25829                           
 25830                           ;lcd.c: 28: char temp = data & 0xF0;
 25831  0056F8  5002               	movf	i2lcdNibble@data,w,c
 25832  0056FA  0BF0               	andlw	240
 25833  0056FC  6E01               	movwf	i2lcdNibble@temp,c
 25834                           
 25835                           ;lcd.c: 29: LATD = LATD & 0x0F;
 25836  0056FE  508C               	movf	3980,w,c	;volatile
 25837  005700  0B0F               	andlw	15
 25838  005702  6E8C               	movwf	3980,c	;volatile
 25839                           
 25840                           ;lcd.c: 30: LATD = temp | LATD;
 25841  005704  5001               	movf	i2lcdNibble@temp,w,c
 25842  005706  108C               	iorwf	3980,w,c	;volatile
 25843  005708  6E8C               	movwf	3980,c	;volatile
 25844                           
 25845                           ;lcd.c: 32: LATDbits.LATD3 = 1;
 25846  00570A  868C               	bsf	3980,3,c	;volatile
 25847                           
 25848                           ;lcd.c: 33: _delay((unsigned long)((25)*(32000000/4000000.0)));
 25849  00570C  0E42               	movlw	66
 25850  00570E                     i2u1216_47:
 25851  00570E  2EE8               	decfsz	wreg,f,c
 25852  005710  D7FE               	bra	i2u1216_47
 25853  005712  D000               	nop2	
 25854                           
 25855                           ;lcd.c: 34: LATDbits.LATD3 = 0;
 25856  005714  968C               	bcf	3980,3,c	;volatile
 25857                           
 25858                           ;lcd.c: 35: _delay((unsigned long)((25)*(32000000/4000000.0)));
 25859  005716  0E42               	movlw	66
 25860  005718                     i2u1217_47:
 25861  005718  2EE8               	decfsz	wreg,f,c
 25862  00571A  D7FE               	bra	i2u1217_47
 25863  00571C  D000               	nop2	
 25864                           
 25865                           ;lcd.c: 37: data = data << 4;
 25866  00571E  3802               	swapf	i2lcdNibble@data,w,c
 25867  005720  0BF0               	andlw	240
 25868  005722  6E02               	movwf	i2lcdNibble@data,c
 25869                           
 25870                           ;lcd.c: 39: temp = data & 0xF0;
 25871  005724  5002               	movf	i2lcdNibble@data,w,c
 25872  005726  0BF0               	andlw	240
 25873  005728  6E01               	movwf	i2lcdNibble@temp,c
 25874                           
 25875                           ;lcd.c: 40: LATD = LATD & 0x0F;
 25876  00572A  508C               	movf	3980,w,c	;volatile
 25877  00572C  0B0F               	andlw	15
 25878  00572E  6E8C               	movwf	3980,c	;volatile
 25879                           
 25880                           ;lcd.c: 41: LATD = temp | LATD;
 25881  005730  5001               	movf	i2lcdNibble@temp,w,c
 25882  005732  108C               	iorwf	3980,w,c	;volatile
 25883  005734  6E8C               	movwf	3980,c	;volatile
 25884                           
 25885                           ;lcd.c: 43: LATDbits.LATD3 = 1;
 25886  005736  868C               	bsf	3980,3,c	;volatile
 25887                           
 25888                           ;lcd.c: 44: _delay((unsigned long)((25)*(32000000/4000000.0)));
 25889  005738  0E42               	movlw	66
 25890  00573A                     i2u1218_47:
 25891  00573A  2EE8               	decfsz	wreg,f,c
 25892  00573C  D7FE               	bra	i2u1218_47
 25893  00573E  D000               	nop2	
 25894                           
 25895                           ;lcd.c: 45: LATDbits.LATD3 = 0;
 25896  005740  968C               	bcf	3980,3,c	;volatile
 25897                           
 25898                           ;lcd.c: 46: _delay((unsigned long)((25)*(32000000/4000000.0)));
 25899  005742  0E42               	movlw	66
 25900  005744                     i2u1219_47:
 25901  005744  2EE8               	decfsz	wreg,f,c
 25902  005746  D7FE               	bra	i2u1219_47
 25903  005748  D000               	nop2	
 25904                           
 25905                           ;lcd.c: 47: (INTCONbits.GIE = 1);
 25906  00574A  8EF2               	bsf	intcon,7,c	;volatile
 25907  00574C  0012               	return		;funcret
 25908  00574E                     __end_ofi2_lcdNibble:
 25909                           	opt stack 0
 25910                           pclatu	equ	0xFFB
 25911                           pclath	equ	0xFFA
 25912                           tblptru	equ	0xFF8
 25913                           tblptrh	equ	0xFF7
 25914                           tblptrl	equ	0xFF6
 25915                           tablat	equ	0xFF5
 25916                           prodh	equ	0xFF4
 25917                           prodl	equ	0xFF3
 25918                           intcon	equ	0xFF2
 25919                           intcon2	equ	0xFF1
 25920                           intcon3	equ	0xFF0
 25921                           indf0	equ	0xFEF
 25922                           postinc0	equ	0xFEE
 25923                           fsr0h	equ	0xFEA
 25924                           fsr0l	equ	0xFE9
 25925                           wreg	equ	0xFE8
 25926                           postdec1	equ	0xFE5
 25927                           fsr1h	equ	0xFE2
 25928                           fsr1l	equ	0xFE1
 25929                           indf2	equ	0xFDF
 25930                           postinc2	equ	0xFDE
 25931                           postdec2	equ	0xFDD
 25932                           fsr2h	equ	0xFDA
 25933                           fsr2l	equ	0xFD9
 25934                           status	equ	0xFD8
 25935                           
 25936 ;; *************** function i2_getRTC *****************
 25937 ;; Defined at:
 25938 ;;		line 44 in file "RTC.c"
 25939 ;; Parameters:    Size  Location     Type
 25940 ;;		None
 25941 ;; Auto vars:     Size  Location     Type
 25942 ;;  getRTC          2    3[COMRAM] int 
 25943 ;; Return value:  Size  Location     Type
 25944 ;;                  1    wreg      void 
 25945 ;; Registers used:
 25946 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 25947 ;; Tracked objects:
 25948 ;;		On entry : 0/0
 25949 ;;		On exit  : 0/0
 25950 ;;		Unchanged: 0/0
 25951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25952 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25953 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25954 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25955 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25956 ;;Total ram usage:        2 bytes
 25957 ;; Hardware stack levels used:    1
 25958 ;; Hardware stack levels required when called:    2
 25959 ;; This function calls:
 25960 ;;		i2_I2C_Master_Read
 25961 ;;		i2_I2C_Master_Start
 25962 ;;		i2_I2C_Master_Stop
 25963 ;;		i2_I2C_Master_Write
 25964 ;; This function is called by:
 25965 ;;		_printSortTimer
 25966 ;;		i2_printRTC
 25967 ;; This function uses a non-reentrant model
 25968 ;;
 25969                           
 25970                           	psect	text95
 25971  0053BC                     __ptext95:
 25972                           	opt stack 0
 25973  0053BC                     i2_getRTC:
 25974                           	opt stack 19
 25975                           
 25976                           ;RTC.c: 48: I2C_Master_Start();
 25977                           
 25978                           ;incstack = 0
 25979  0053BC  ECDD  F02F         	call	i2_I2C_Master_Start	;wreg free
 25980                           
 25981                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
 25982  0053C0  0E00               	movlw	0
 25983  0053C2  6E03               	movwf	i2I2C_Master_Write@d+1,c
 25984  0053C4  0ED0               	movlw	208
 25985  0053C6  6E02               	movwf	i2I2C_Master_Write@d,c
 25986  0053C8  ECC8  F02F         	call	i2_I2C_Master_Write	;wreg free
 25987                           
 25988                           ;RTC.c: 50: I2C_Master_Write(0x00);
 25989  0053CC  0E00               	movlw	0
 25990  0053CE  6E03               	movwf	i2I2C_Master_Write@d+1,c
 25991  0053D0  0E00               	movlw	0
 25992  0053D2  6E02               	movwf	i2I2C_Master_Write@d,c
 25993  0053D4  ECC8  F02F         	call	i2_I2C_Master_Write	;wreg free
 25994                           
 25995                           ;RTC.c: 51: I2C_Master_Stop();
 25996  0053D8  ECD9  F02F         	call	i2_I2C_Master_Stop	;wreg free
 25997                           
 25998                           ;RTC.c: 54: I2C_Master_Start();
 25999  0053DC  ECDD  F02F         	call	i2_I2C_Master_Start	;wreg free
 26000                           
 26001                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
 26002  0053E0  0E00               	movlw	0
 26003  0053E2  6E03               	movwf	i2I2C_Master_Write@d+1,c
 26004  0053E4  0ED1               	movlw	209
 26005  0053E6  6E02               	movwf	i2I2C_Master_Write@d,c
 26006  0053E8  ECC8  F02F         	call	i2_I2C_Master_Write	;wreg free
 26007                           
 26008                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
 26009  0053EC  0E00               	movlw	0
 26010  0053EE  6E05               	movwf	i2getRTC@i+1,c
 26011  0053F0  0E00               	movlw	0
 26012  0053F2  6E04               	movwf	i2getRTC@i,c
 26013  0053F4                     i2l7120:
 26014  0053F4  BE05               	btfsc	i2getRTC@i+1,7,c
 26015  0053F6  D006               	goto	i2l7124
 26016  0053F8  5005               	movf	i2getRTC@i+1,w,c
 26017  0053FA  E111               	bnz	i2l7130
 26018  0053FC  0E06               	movlw	6
 26019  0053FE  5C04               	subwf	i2getRTC@i,w,c
 26020  005400  B0D8               	btfsc	status,0,c
 26021  005402  D00D               	goto	i2l7130
 26022  005404                     i2l7124:
 26023                           
 26024                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
 26025  005404  0E1C               	movlw	low _time
 26026  005406  2404               	addwf	i2getRTC@i,w,c
 26027  005408  6ED9               	movwf	fsr2l,c
 26028  00540A  0E01               	movlw	high _time
 26029  00540C  2005               	addwfc	i2getRTC@i+1,w,c
 26030  00540E  6EDA               	movwf	fsr2h,c
 26031  005410  0E01               	movlw	1
 26032  005412  EC00  F02F         	call	i2_I2C_Master_Read
 26033  005416  6EDF               	movwf	indf2,c
 26034  005418  4A04               	infsnz	i2getRTC@i,f,c
 26035  00541A  2A05               	incf	i2getRTC@i+1,f,c
 26036  00541C  D7EB               	goto	i2l7120
 26037  00541E                     i2l7130:
 26038                           
 26039                           ;RTC.c: 58: }
 26040                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
 26041  00541E  0E00               	movlw	0
 26042  005420  EC00  F02F         	call	i2_I2C_Master_Read
 26043  005424  0101               	movlb	1	; () banked
 26044  005426  6F22               	movwf	(_time+6)& (0+255),b
 26045                           
 26046                           ;RTC.c: 60: I2C_Master_Stop();
 26047  005428  ECD9  F02F         	call	i2_I2C_Master_Stop	;wreg free
 26048  00542C  0012               	return		;funcret
 26049  00542E                     __end_ofi2_getRTC:
 26050                           	opt stack 0
 26051                           pclatu	equ	0xFFB
 26052                           pclath	equ	0xFFA
 26053                           tblptru	equ	0xFF8
 26054                           tblptrh	equ	0xFF7
 26055                           tblptrl	equ	0xFF6
 26056                           tablat	equ	0xFF5
 26057                           prodh	equ	0xFF4
 26058                           prodl	equ	0xFF3
 26059                           intcon	equ	0xFF2
 26060                           intcon2	equ	0xFF1
 26061                           intcon3	equ	0xFF0
 26062                           indf0	equ	0xFEF
 26063                           postinc0	equ	0xFEE
 26064                           fsr0h	equ	0xFEA
 26065                           fsr0l	equ	0xFE9
 26066                           wreg	equ	0xFE8
 26067                           postdec1	equ	0xFE5
 26068                           fsr1h	equ	0xFE2
 26069                           fsr1l	equ	0xFE1
 26070                           indf2	equ	0xFDF
 26071                           postinc2	equ	0xFDE
 26072                           postdec2	equ	0xFDD
 26073                           fsr2h	equ	0xFDA
 26074                           fsr2l	equ	0xFD9
 26075                           status	equ	0xFD8
 26076                           
 26077 ;; *************** function i2_I2C_Master_Write *****************
 26078 ;; Defined at:
 26079 ;;		line 49 in file "I2C.c"
 26080 ;; Parameters:    Size  Location     Type
 26081 ;;  d               2    1[COMRAM] unsigned int 
 26082 ;; Auto vars:     Size  Location     Type
 26083 ;;		None
 26084 ;; Return value:  Size  Location     Type
 26085 ;;                  1    wreg      void 
 26086 ;; Registers used:
 26087 ;;		wreg, status,2, status,0, cstack
 26088 ;; Tracked objects:
 26089 ;;		On entry : 0/0
 26090 ;;		On exit  : 0/0
 26091 ;;		Unchanged: 0/0
 26092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26093 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26094 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26095 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26096 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26097 ;;Total ram usage:        2 bytes
 26098 ;; Hardware stack levels used:    1
 26099 ;; Hardware stack levels required when called:    1
 26100 ;; This function calls:
 26101 ;;		i2_I2C_Master_Wait
 26102 ;; This function is called by:
 26103 ;;		i2_getRTC
 26104 ;; This function uses a non-reentrant model
 26105 ;;
 26106                           
 26107                           	psect	text96
 26108  005F90                     __ptext96:
 26109                           	opt stack 0
 26110  005F90                     i2_I2C_Master_Write:
 26111                           	opt stack 19
 26112                           
 26113                           ;I2C.c: 51: I2C_Master_Wait();
 26114                           
 26115                           ;incstack = 0
 26116  005F90  EC9E  F02F         	call	i2_I2C_Master_Wait	;wreg free
 26117                           
 26118                           ;I2C.c: 52: SSPBUF = d;
 26119  005F94  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 26120  005F98  0012               	return		;funcret
 26121  005F9A                     __end_ofi2_I2C_Master_Write:
 26122                           	opt stack 0
 26123                           pclatu	equ	0xFFB
 26124                           pclath	equ	0xFFA
 26125                           tblptru	equ	0xFF8
 26126                           tblptrh	equ	0xFF7
 26127                           tblptrl	equ	0xFF6
 26128                           tablat	equ	0xFF5
 26129                           prodh	equ	0xFF4
 26130                           prodl	equ	0xFF3
 26131                           intcon	equ	0xFF2
 26132                           intcon2	equ	0xFF1
 26133                           intcon3	equ	0xFF0
 26134                           indf0	equ	0xFEF
 26135                           postinc0	equ	0xFEE
 26136                           fsr0h	equ	0xFEA
 26137                           fsr0l	equ	0xFE9
 26138                           wreg	equ	0xFE8
 26139                           postdec1	equ	0xFE5
 26140                           fsr1h	equ	0xFE2
 26141                           fsr1l	equ	0xFE1
 26142                           indf2	equ	0xFDF
 26143                           postinc2	equ	0xFDE
 26144                           postdec2	equ	0xFDD
 26145                           fsr2h	equ	0xFDA
 26146                           fsr2l	equ	0xFD9
 26147                           status	equ	0xFD8
 26148                           
 26149 ;; *************** function i2_I2C_Master_Stop *****************
 26150 ;; Defined at:
 26151 ;;		line 43 in file "I2C.c"
 26152 ;; Parameters:    Size  Location     Type
 26153 ;;		None
 26154 ;; Auto vars:     Size  Location     Type
 26155 ;;		None
 26156 ;; Return value:  Size  Location     Type
 26157 ;;                  1    wreg      void 
 26158 ;; Registers used:
 26159 ;;		wreg, status,2, status,0, cstack
 26160 ;; Tracked objects:
 26161 ;;		On entry : 0/0
 26162 ;;		On exit  : 0/0
 26163 ;;		Unchanged: 0/0
 26164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26165 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26166 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26167 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26168 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26169 ;;Total ram usage:        0 bytes
 26170 ;; Hardware stack levels used:    1
 26171 ;; Hardware stack levels required when called:    1
 26172 ;; This function calls:
 26173 ;;		i2_I2C_Master_Wait
 26174 ;; This function is called by:
 26175 ;;		i2_getRTC
 26176 ;; This function uses a non-reentrant model
 26177 ;;
 26178                           
 26179                           	psect	text97
 26180  005FB2                     __ptext97:
 26181                           	opt stack 0
 26182  005FB2                     i2_I2C_Master_Stop:
 26183                           	opt stack 19
 26184                           
 26185                           ;I2C.c: 45: I2C_Master_Wait();
 26186                           
 26187                           ;incstack = 0
 26188  005FB2  EC9E  F02F         	call	i2_I2C_Master_Wait	;wreg free
 26189                           
 26190                           ;I2C.c: 46: PEN = 1;
 26191  005FB6  84C5               	bsf	4037,2,c	;volatile
 26192  005FB8  0012               	return		;funcret
 26193  005FBA                     __end_ofi2_I2C_Master_Stop:
 26194                           	opt stack 0
 26195                           pclatu	equ	0xFFB
 26196                           pclath	equ	0xFFA
 26197                           tblptru	equ	0xFF8
 26198                           tblptrh	equ	0xFF7
 26199                           tblptrl	equ	0xFF6
 26200                           tablat	equ	0xFF5
 26201                           prodh	equ	0xFF4
 26202                           prodl	equ	0xFF3
 26203                           intcon	equ	0xFF2
 26204                           intcon2	equ	0xFF1
 26205                           intcon3	equ	0xFF0
 26206                           indf0	equ	0xFEF
 26207                           postinc0	equ	0xFEE
 26208                           fsr0h	equ	0xFEA
 26209                           fsr0l	equ	0xFE9
 26210                           wreg	equ	0xFE8
 26211                           postdec1	equ	0xFE5
 26212                           fsr1h	equ	0xFE2
 26213                           fsr1l	equ	0xFE1
 26214                           indf2	equ	0xFDF
 26215                           postinc2	equ	0xFDE
 26216                           postdec2	equ	0xFDD
 26217                           fsr2h	equ	0xFDA
 26218                           fsr2l	equ	0xFD9
 26219                           status	equ	0xFD8
 26220                           
 26221 ;; *************** function i2_I2C_Master_Start *****************
 26222 ;; Defined at:
 26223 ;;		line 31 in file "I2C.c"
 26224 ;; Parameters:    Size  Location     Type
 26225 ;;		None
 26226 ;; Auto vars:     Size  Location     Type
 26227 ;;		None
 26228 ;; Return value:  Size  Location     Type
 26229 ;;                  1    wreg      void 
 26230 ;; Registers used:
 26231 ;;		wreg, status,2, status,0, cstack
 26232 ;; Tracked objects:
 26233 ;;		On entry : 0/0
 26234 ;;		On exit  : 0/0
 26235 ;;		Unchanged: 0/0
 26236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26237 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26238 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26239 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26240 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26241 ;;Total ram usage:        0 bytes
 26242 ;; Hardware stack levels used:    1
 26243 ;; Hardware stack levels required when called:    1
 26244 ;; This function calls:
 26245 ;;		i2_I2C_Master_Wait
 26246 ;; This function is called by:
 26247 ;;		i2_getRTC
 26248 ;; This function uses a non-reentrant model
 26249 ;;
 26250                           
 26251                           	psect	text98
 26252  005FBA                     __ptext98:
 26253                           	opt stack 0
 26254  005FBA                     i2_I2C_Master_Start:
 26255                           	opt stack 19
 26256                           
 26257                           ;I2C.c: 33: I2C_Master_Wait();
 26258                           
 26259                           ;incstack = 0
 26260  005FBA  EC9E  F02F         	call	i2_I2C_Master_Wait	;wreg free
 26261                           
 26262                           ;I2C.c: 34: SEN = 1;
 26263  005FBE  80C5               	bsf	4037,0,c	;volatile
 26264  005FC0  0012               	return		;funcret
 26265  005FC2                     __end_ofi2_I2C_Master_Start:
 26266                           	opt stack 0
 26267                           pclatu	equ	0xFFB
 26268                           pclath	equ	0xFFA
 26269                           tblptru	equ	0xFF8
 26270                           tblptrh	equ	0xFF7
 26271                           tblptrl	equ	0xFF6
 26272                           tablat	equ	0xFF5
 26273                           prodh	equ	0xFF4
 26274                           prodl	equ	0xFF3
 26275                           intcon	equ	0xFF2
 26276                           intcon2	equ	0xFF1
 26277                           intcon3	equ	0xFF0
 26278                           indf0	equ	0xFEF
 26279                           postinc0	equ	0xFEE
 26280                           fsr0h	equ	0xFEA
 26281                           fsr0l	equ	0xFE9
 26282                           wreg	equ	0xFE8
 26283                           postdec1	equ	0xFE5
 26284                           fsr1h	equ	0xFE2
 26285                           fsr1l	equ	0xFE1
 26286                           indf2	equ	0xFDF
 26287                           postinc2	equ	0xFDE
 26288                           postdec2	equ	0xFDD
 26289                           fsr2h	equ	0xFDA
 26290                           fsr2l	equ	0xFD9
 26291                           status	equ	0xFD8
 26292                           
 26293 ;; *************** function i2_I2C_Master_Read *****************
 26294 ;; Defined at:
 26295 ;;		line 55 in file "I2C.c"
 26296 ;; Parameters:    Size  Location     Type
 26297 ;;  a               1    wreg     unsigned char 
 26298 ;; Auto vars:     Size  Location     Type
 26299 ;;  a               1    1[COMRAM] unsigned char 
 26300 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 26301 ;; Return value:  Size  Location     Type
 26302 ;;                  1    wreg      unsigned char 
 26303 ;; Registers used:
 26304 ;;		wreg, status,2, status,0, cstack
 26305 ;; Tracked objects:
 26306 ;;		On entry : 0/0
 26307 ;;		On exit  : 0/0
 26308 ;;		Unchanged: 0/0
 26309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26310 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26311 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26312 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26313 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26314 ;;Total ram usage:        2 bytes
 26315 ;; Hardware stack levels used:    1
 26316 ;; Hardware stack levels required when called:    1
 26317 ;; This function calls:
 26318 ;;		i2_I2C_Master_Wait
 26319 ;; This function is called by:
 26320 ;;		i2_getRTC
 26321 ;; This function uses a non-reentrant model
 26322 ;;
 26323                           
 26324                           	psect	text99
 26325  005E00                     __ptext99:
 26326                           	opt stack 0
 26327  005E00                     i2_I2C_Master_Read:
 26328                           	opt stack 19
 26329                           
 26330                           ;incstack = 0
 26331                           ;i2I2C_Master_Read@a stored from wreg
 26332  005E00  6E02               	movwf	i2I2C_Master_Read@a,c
 26333                           
 26334                           ;I2C.c: 57: unsigned char temp;
 26335                           ;I2C.c: 58: I2C_Master_Wait();
 26336  005E02  EC9E  F02F         	call	i2_I2C_Master_Wait	;wreg free
 26337                           
 26338                           ;I2C.c: 59: RCEN = 1;
 26339  005E06  86C5               	bsf	4037,3,c	;volatile
 26340                           
 26341                           ;I2C.c: 60: I2C_Master_Wait();
 26342  005E08  EC9E  F02F         	call	i2_I2C_Master_Wait	;wreg free
 26343                           
 26344                           ;I2C.c: 61: temp = SSPBUF;
 26345  005E0C  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 26346                           
 26347                           ;I2C.c: 62: I2C_Master_Wait();
 26348  005E10  EC9E  F02F         	call	i2_I2C_Master_Wait	;wreg free
 26349                           
 26350                           ;I2C.c: 63: ACKDT = (a)?0:1;
 26351  005E14  5002               	movf	i2I2C_Master_Read@a,w,c
 26352  005E16  A4D8               	btfss	status,2,c
 26353  005E18  D002               	goto	i2u543_40
 26354  005E1A  8AC5               	bsf	4037,5,c	;volatile
 26355  005E1C  D001               	goto	i2l6778
 26356  005E1E                     i2u543_40:
 26357  005E1E  9AC5               	bcf	4037,5,c	;volatile
 26358  005E20                     i2l6778:
 26359                           
 26360                           ;I2C.c: 64: ACKEN = 1;
 26361  005E20  88C5               	bsf	4037,4,c	;volatile
 26362                           
 26363                           ;I2C.c: 65: return temp;
 26364  005E22  5003               	movf	i2I2C_Master_Read@temp,w,c
 26365  005E24  0012               	return	
 26366  005E26                     __end_ofi2_I2C_Master_Read:
 26367                           	opt stack 0
 26368                           pclatu	equ	0xFFB
 26369                           pclath	equ	0xFFA
 26370                           tblptru	equ	0xFF8
 26371                           tblptrh	equ	0xFF7
 26372                           tblptrl	equ	0xFF6
 26373                           tablat	equ	0xFF5
 26374                           prodh	equ	0xFF4
 26375                           prodl	equ	0xFF3
 26376                           intcon	equ	0xFF2
 26377                           intcon2	equ	0xFF1
 26378                           intcon3	equ	0xFF0
 26379                           indf0	equ	0xFEF
 26380                           postinc0	equ	0xFEE
 26381                           fsr0h	equ	0xFEA
 26382                           fsr0l	equ	0xFE9
 26383                           wreg	equ	0xFE8
 26384                           postdec1	equ	0xFE5
 26385                           fsr1h	equ	0xFE2
 26386                           fsr1l	equ	0xFE1
 26387                           indf2	equ	0xFDF
 26388                           postinc2	equ	0xFDE
 26389                           postdec2	equ	0xFDD
 26390                           fsr2h	equ	0xFDA
 26391                           fsr2l	equ	0xFD9
 26392                           status	equ	0xFD8
 26393                           
 26394 ;; *************** function i2_I2C_Master_Wait *****************
 26395 ;; Defined at:
 26396 ;;		line 26 in file "I2C.c"
 26397 ;; Parameters:    Size  Location     Type
 26398 ;;		None
 26399 ;; Auto vars:     Size  Location     Type
 26400 ;;		None
 26401 ;; Return value:  Size  Location     Type
 26402 ;;                  1    wreg      void 
 26403 ;; Registers used:
 26404 ;;		wreg, status,2, status,0
 26405 ;; Tracked objects:
 26406 ;;		On entry : 0/0
 26407 ;;		On exit  : 0/0
 26408 ;;		Unchanged: 0/0
 26409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26410 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26411 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26412 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26413 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26414 ;;Total ram usage:        1 bytes
 26415 ;; Hardware stack levels used:    1
 26416 ;; This function calls:
 26417 ;;		Nothing
 26418 ;; This function is called by:
 26419 ;;		i2_I2C_Master_Start
 26420 ;;		i2_I2C_Master_Stop
 26421 ;;		i2_I2C_Master_Write
 26422 ;;		i2_I2C_Master_Read
 26423 ;; This function uses a non-reentrant model
 26424 ;;
 26425                           
 26426                           	psect	text100
 26427  005F3C                     __ptext100:
 26428                           	opt stack 0
 26429  005F3C                     i2_I2C_Master_Wait:
 26430                           	opt stack 19
 26431  005F3C                     i2l76:
 26432  005F3C  B4C7               	btfsc	4039,2,c	;volatile
 26433  005F3E  D7FE               	goto	i2l76
 26434  005F40  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 26435  005F44  0E1F               	movlw	31
 26436  005F46  1601               	andwf	??i2_I2C_Master_Wait,f,c
 26437  005F48  B4D8               	btfsc	status,2,c
 26438  005F4A  0012               	return	
 26439  005F4C  D7F7               	goto	i2l76
 26440  005F4E                     __end_ofi2_I2C_Master_Wait:
 26441                           	opt stack 0
 26442                           pclatu	equ	0xFFB
 26443                           pclath	equ	0xFFA
 26444                           tblptru	equ	0xFF8
 26445                           tblptrh	equ	0xFF7
 26446                           tblptrl	equ	0xFF6
 26447                           tablat	equ	0xFF5
 26448                           prodh	equ	0xFF4
 26449                           prodl	equ	0xFF3
 26450                           intcon	equ	0xFF2
 26451                           intcon2	equ	0xFF1
 26452                           intcon3	equ	0xFF0
 26453                           indf0	equ	0xFEF
 26454                           postinc0	equ	0xFEE
 26455                           fsr0h	equ	0xFEA
 26456                           fsr0l	equ	0xFE9
 26457                           wreg	equ	0xFE8
 26458                           postdec1	equ	0xFE5
 26459                           fsr1h	equ	0xFE2
 26460                           fsr1l	equ	0xFE1
 26461                           indf2	equ	0xFDF
 26462                           postinc2	equ	0xFDE
 26463                           postdec2	equ	0xFDD
 26464                           fsr2h	equ	0xFDA
 26465                           fsr2l	equ	0xFD9
 26466                           status	equ	0xFD8
 26467                           
 26468 ;; *************** function i2_delay_ms *****************
 26469 ;; Defined at:
 26470 ;;		line 716 in file "sort.c"
 26471 ;; Parameters:    Size  Location     Type
 26472 ;;  milliseconds    1    wreg     unsigned char 
 26473 ;; Auto vars:     Size  Location     Type
 26474 ;;  milliseconds    1    1[COMRAM] unsigned char 
 26475 ;; Return value:  Size  Location     Type
 26476 ;;                  1    wreg      void 
 26477 ;; Registers used:
 26478 ;;		wreg, status,2, status,0, cstack
 26479 ;; Tracked objects:
 26480 ;;		On entry : 0/0
 26481 ;;		On exit  : 0/0
 26482 ;;		Unchanged: 0/0
 26483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26484 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26485 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26486 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26487 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26488 ;;Total ram usage:        2 bytes
 26489 ;; Hardware stack levels used:    1
 26490 ;; This function calls:
 26491 ;;		Nothing
 26492 ;; This function is called by:
 26493 ;;		_printSortTimer
 26494 ;; This function uses a non-reentrant model
 26495 ;;
 26496                           
 26497                           	psect	text101
 26498  005EC8                     __ptext101:
 26499                           	opt stack 0
 26500  005EC8                     i2_delay_ms:
 26501                           	opt stack 22
 26502                           
 26503                           ;incstack = 0
 26504                           ;i2delay_ms@milliseconds stored from wreg
 26505  005EC8  6E02               	movwf	i2delay_ms@milliseconds,c
 26506                           
 26507                           ;sort.c: 717: while(milliseconds > 0)
 26508  005ECA  D008               	goto	i2l9466
 26509  005ECC                     i2l9462:
 26510                           
 26511                           ;sort.c: 718: {
 26512                           ;sort.c: 719: milliseconds--;
 26513  005ECC  0602               	decf	i2delay_ms@milliseconds,f,c
 26514                           
 26515                           ;sort.c: 720: _delay((unsigned long)((990)*(32000000/4000000.0)));
 26516  005ECE  0E0B               	movlw	11
 26517  005ED0  6E01               	movwf	??i2_delay_ms& (0+255),c
 26518  005ED2  0E48               	movlw	72
 26519  005ED4                     i2u1220_47:
 26520  005ED4  2EE8               	decfsz	wreg,f,c
 26521  005ED6  D7FE               	bra	i2u1220_47
 26522  005ED8  2E01               	decfsz	??i2_delay_ms& (0+255),f,c
 26523  005EDA  D7FC               	bra	i2u1220_47
 26524  005EDC                     i2l9466:
 26525  005EDC  5002               	movf	i2delay_ms@milliseconds,w,c
 26526  005EDE  B4D8               	btfsc	status,2,c
 26527  005EE0  0012               	return	
 26528  005EE2  D7F4               	goto	i2l9462
 26529  005EE4                     __end_ofi2_delay_ms:
 26530                           	opt stack 0
 26531                           pclatu	equ	0xFFB
 26532                           pclath	equ	0xFFA
 26533                           tblptru	equ	0xFF8
 26534                           tblptrh	equ	0xFF7
 26535                           tblptrl	equ	0xFF6
 26536                           tablat	equ	0xFF5
 26537                           prodh	equ	0xFF4
 26538                           prodl	equ	0xFF3
 26539                           intcon	equ	0xFF2
 26540                           intcon2	equ	0xFF1
 26541                           intcon3	equ	0xFF0
 26542                           indf0	equ	0xFEF
 26543                           postinc0	equ	0xFEE
 26544                           fsr0h	equ	0xFEA
 26545                           fsr0l	equ	0xFE9
 26546                           wreg	equ	0xFE8
 26547                           postdec1	equ	0xFE5
 26548                           fsr1h	equ	0xFE2
 26549                           fsr1l	equ	0xFE1
 26550                           indf2	equ	0xFDF
 26551                           postinc2	equ	0xFDE
 26552                           postdec2	equ	0xFDD
 26553                           fsr2h	equ	0xFDA
 26554                           fsr2l	equ	0xFD9
 26555                           status	equ	0xFD8
 26556                           
 26557 ;; *************** function i2___awmod *****************
 26558 ;; Defined at:
 26559 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
 26560 ;; Parameters:    Size  Location     Type
 26561 ;;  dividend        2    0[COMRAM] int 
 26562 ;;  divisor         2    2[COMRAM] int 
 26563 ;; Auto vars:     Size  Location     Type
 26564 ;;  __awmod         1    5[COMRAM] unsigned char 
 26565 ;;  __awmod         1    4[COMRAM] unsigned char 
 26566 ;; Return value:  Size  Location     Type
 26567 ;;                  2    0[COMRAM] int 
 26568 ;; Registers used:
 26569 ;;		wreg, status,2, status,0
 26570 ;; Tracked objects:
 26571 ;;		On entry : 0/0
 26572 ;;		On exit  : 0/0
 26573 ;;		Unchanged: 0/0
 26574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26575 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26576 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26577 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26578 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26579 ;;Total ram usage:        6 bytes
 26580 ;; Hardware stack levels used:    1
 26581 ;; This function calls:
 26582 ;;		Nothing
 26583 ;; This function is called by:
 26584 ;;		_printSortTimer
 26585 ;; This function uses a non-reentrant model
 26586 ;;
 26587                           
 26588                           	psect	text102
 26589  00542E                     __ptext102:
 26590                           	opt stack 0
 26591  00542E                     i2___awmod:
 26592                           	opt stack 22
 26593                           
 26594                           ;incstack = 0
 26595  00542E  0E00               	movlw	0
 26596  005430  6E06               	movwf	i2___awmod@sign,c
 26597  005432  AE02               	btfss	i2___awmod@dividend+1,7,c
 26598  005434  D006               	goto	i2l9476
 26599  005436  6C01               	negf	i2___awmod@dividend,c
 26600  005438  1E02               	comf	i2___awmod@dividend+1,f,c
 26601  00543A  B0D8               	btfsc	status,0,c
 26602  00543C  2A02               	incf	i2___awmod@dividend+1,f,c
 26603  00543E  0E01               	movlw	1
 26604  005440  6E06               	movwf	i2___awmod@sign,c
 26605  005442                     i2l9476:
 26606  005442  AE04               	btfss	i2___awmod@divisor+1,7,c
 26607  005444  D004               	goto	i2l9480
 26608  005446  6C03               	negf	i2___awmod@divisor,c
 26609  005448  1E04               	comf	i2___awmod@divisor+1,f,c
 26610  00544A  B0D8               	btfsc	status,0,c
 26611  00544C  2A04               	incf	i2___awmod@divisor+1,f,c
 26612  00544E                     i2l9480:
 26613  00544E  5003               	movf	i2___awmod@divisor,w,c
 26614  005450  1004               	iorwf	i2___awmod@divisor+1,w,c
 26615  005452  B4D8               	btfsc	status,2,c
 26616  005454  D018               	goto	i2l9496
 26617  005456  0E01               	movlw	1
 26618  005458  6E05               	movwf	i2___awmod@counter,c
 26619  00545A  D004               	goto	i2l9486
 26620  00545C                     i2l9484:
 26621  00545C  90D8               	bcf	status,0,c
 26622  00545E  3603               	rlcf	i2___awmod@divisor,f,c
 26623  005460  3604               	rlcf	i2___awmod@divisor+1,f,c
 26624  005462  2A05               	incf	i2___awmod@counter,f,c
 26625  005464                     i2l9486:
 26626  005464  AE04               	btfss	i2___awmod@divisor+1,7,c
 26627  005466  D7FA               	goto	i2l9484
 26628  005468                     i2l9488:
 26629  005468  5003               	movf	i2___awmod@divisor,w,c
 26630  00546A  5C01               	subwf	i2___awmod@dividend,w,c
 26631  00546C  5004               	movf	i2___awmod@divisor+1,w,c
 26632  00546E  5802               	subwfb	i2___awmod@dividend+1,w,c
 26633  005470  A0D8               	btfss	status,0,c
 26634  005472  D004               	goto	i2l9492
 26635  005474  5003               	movf	i2___awmod@divisor,w,c
 26636  005476  5E01               	subwf	i2___awmod@dividend,f,c
 26637  005478  5004               	movf	i2___awmod@divisor+1,w,c
 26638  00547A  5A02               	subwfb	i2___awmod@dividend+1,f,c
 26639  00547C                     i2l9492:
 26640  00547C  90D8               	bcf	status,0,c
 26641  00547E  3204               	rrcf	i2___awmod@divisor+1,f,c
 26642  005480  3203               	rrcf	i2___awmod@divisor,f,c
 26643  005482  2E05               	decfsz	i2___awmod@counter,f,c
 26644  005484  D7F1               	goto	i2l9488
 26645  005486                     i2l9496:
 26646  005486  5006               	movf	i2___awmod@sign,w,c
 26647  005488  B4D8               	btfsc	status,2,c
 26648  00548A  D004               	goto	i2l9500
 26649  00548C  6C01               	negf	i2___awmod@dividend,c
 26650  00548E  1E02               	comf	i2___awmod@dividend+1,f,c
 26651  005490  B0D8               	btfsc	status,0,c
 26652  005492  2A02               	incf	i2___awmod@dividend+1,f,c
 26653  005494                     i2l9500:
 26654  005494  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
 26655  005498  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
 26656  00549C  0012               	return	
 26657  00549E                     __end_ofi2___awmod:
 26658                           	opt stack 0
 26659                           pclatu	equ	0xFFB
 26660                           pclath	equ	0xFFA
 26661                           tblptru	equ	0xFF8
 26662                           tblptrh	equ	0xFF7
 26663                           tblptrl	equ	0xFF6
 26664                           tablat	equ	0xFF5
 26665                           prodh	equ	0xFF4
 26666                           prodl	equ	0xFF3
 26667                           intcon	equ	0xFF2
 26668                           intcon2	equ	0xFF1
 26669                           intcon3	equ	0xFF0
 26670                           indf0	equ	0xFEF
 26671                           postinc0	equ	0xFEE
 26672                           fsr0h	equ	0xFEA
 26673                           fsr0l	equ	0xFE9
 26674                           wreg	equ	0xFE8
 26675                           postdec1	equ	0xFE5
 26676                           fsr1h	equ	0xFE2
 26677                           fsr1l	equ	0xFE1
 26678                           indf2	equ	0xFDF
 26679                           postinc2	equ	0xFDE
 26680                           postdec2	equ	0xFDD
 26681                           fsr2h	equ	0xFDA
 26682                           fsr2l	equ	0xFD9
 26683                           status	equ	0xFD8
 26684                           pclatu	equ	0xFFB
 26685                           pclath	equ	0xFFA
 26686                           tblptru	equ	0xFF8
 26687                           tblptrh	equ	0xFF7
 26688                           tblptrl	equ	0xFF6
 26689                           tablat	equ	0xFF5
 26690                           prodh	equ	0xFF4
 26691                           prodl	equ	0xFF3
 26692                           intcon	equ	0xFF2
 26693                           intcon2	equ	0xFF1
 26694                           intcon3	equ	0xFF0
 26695                           indf0	equ	0xFEF
 26696                           postinc0	equ	0xFEE
 26697                           fsr0h	equ	0xFEA
 26698                           fsr0l	equ	0xFE9
 26699                           wreg	equ	0xFE8
 26700                           postdec1	equ	0xFE5
 26701                           fsr1h	equ	0xFE2
 26702                           fsr1l	equ	0xFE1
 26703                           indf2	equ	0xFDF
 26704                           postinc2	equ	0xFDE
 26705                           postdec2	equ	0xFDD
 26706                           fsr2h	equ	0xFDA
 26707                           fsr2l	equ	0xFD9
 26708                           status	equ	0xFD8
 26709                           
 26710                           	psect	rparam
 26711  0000                     pclatu	equ	0xFFB
 26712                           pclath	equ	0xFFA
 26713                           tblptru	equ	0xFF8
 26714                           tblptrh	equ	0xFF7
 26715                           tblptrl	equ	0xFF6
 26716                           tablat	equ	0xFF5
 26717                           prodh	equ	0xFF4
 26718                           prodl	equ	0xFF3
 26719                           intcon	equ	0xFF2
 26720                           intcon2	equ	0xFF1
 26721                           intcon3	equ	0xFF0
 26722                           indf0	equ	0xFEF
 26723                           postinc0	equ	0xFEE
 26724                           fsr0h	equ	0xFEA
 26725                           fsr0l	equ	0xFE9
 26726                           wreg	equ	0xFE8
 26727                           postdec1	equ	0xFE5
 26728                           fsr1h	equ	0xFE2
 26729                           fsr1l	equ	0xFE1
 26730                           indf2	equ	0xFDF
 26731                           postinc2	equ	0xFDE
 26732                           postdec2	equ	0xFDD
 26733                           fsr2h	equ	0xFDA
 26734                           fsr2l	equ	0xFD9
 26735                           status	equ	0xFD8
 26736                           
 26737                           	psect	temp
 26738  00007E                     btemp:
 26739                           	opt stack 0
 26740  00007E                     	ds	1
 26741  0000                     int$flags	set	btemp
 26742                           pclatu	equ	0xFFB
 26743                           pclath	equ	0xFFA
 26744                           tblptru	equ	0xFF8
 26745                           tblptrh	equ	0xFF7
 26746                           tblptrl	equ	0xFF6
 26747                           tablat	equ	0xFF5
 26748                           prodh	equ	0xFF4
 26749                           prodl	equ	0xFF3
 26750                           intcon	equ	0xFF2
 26751                           intcon2	equ	0xFF1
 26752                           intcon3	equ	0xFF0
 26753                           indf0	equ	0xFEF
 26754                           postinc0	equ	0xFEE
 26755                           fsr0h	equ	0xFEA
 26756                           fsr0l	equ	0xFE9
 26757                           wreg	equ	0xFE8
 26758                           postdec1	equ	0xFE5
 26759                           fsr1h	equ	0xFE2
 26760                           fsr1l	equ	0xFE1
 26761                           indf2	equ	0xFDF
 26762                           postinc2	equ	0xFDE
 26763                           postdec2	equ	0xFDD
 26764                           fsr2h	equ	0xFDA
 26765                           fsr2l	equ	0xFD9
 26766                           status	equ	0xFD8


Data Sizes:
    Strings     1340
    Constant    27
    Data        8
    BSS         150
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     90     125
    BANK0           128     90     128
    BANK1           256      0      85
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_62(CODE[4]), STR_61(CODE[4]), STR_60(CODE[4]), STR_59(CODE[4]), 
		 -> STR_58(CODE[4]), STR_57(CODE[4]), STR_56(CODE[4]), STR_55(CODE[4]), 
		 -> STR_54(CODE[4]), STR_53(CODE[4]), STR_52(CODE[4]), STR_51(CODE[4]), 
		 -> STR_20(CODE[4]), STR_19(CODE[4]), STR_18(CODE[4]), STR_17(CODE[4]), 
		 -> STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[4]), STR_13(CODE[4]), 
		 -> STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[4]), 
		 -> STR_8(CODE[4]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_129(CODE[7]), count_total(BANK0[2]), printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_128(CODE[18]), STR_127(CODE[18]), STR_126(CODE[17]), STR_125(CODE[17]), 
		 -> STR_124(CODE[15]), STR_123(CODE[15]), STR_122(CODE[18]), STR_121(CODE[15]), 
		 -> STR_120(CODE[18]), STR_119(CODE[18]), STR_118(CODE[17]), STR_117(CODE[17]), 
		 -> STR_116(CODE[17]), STR_115(CODE[17]), STR_114(CODE[17]), STR_113(CODE[17]), 
		 -> STR_112(CODE[18]), STR_111(CODE[17]), STR_110(CODE[15]), STR_109(CODE[15]), 
		 -> STR_108(CODE[15]), STR_107(CODE[17]), STR_106(CODE[17]), STR_105(CODE[17]), 
		 -> STR_104(CODE[16]), STR_103(CODE[17]), STR_102(CODE[17]), STR_101(CODE[17]), 
		 -> STR_100(CODE[17]), STR_99(CODE[17]), STR_98(CODE[17]), STR_97(CODE[15]), 
		 -> STR_96(CODE[11]), STR_95(CODE[17]), STR_94(CODE[11]), STR_93(CODE[17]), 
		 -> STR_92(CODE[14]), STR_91(CODE[15]), STR_90(CODE[14]), STR_89(CODE[10]), 
		 -> STR_88(CODE[9]), STR_87(CODE[9]), STR_86(CODE[10]), STR_85(CODE[10]), 
		 -> STR_84(CODE[16]), STR_83(CODE[15]), STR_82(CODE[3]), STR_81(CODE[18]), 
		 -> STR_80(CODE[3]), STR_79(CODE[18]), STR_78(CODE[14]), STR_77(CODE[8]), 
		 -> STR_76(CODE[14]), STR_75(CODE[15]), STR_74(CODE[12]), STR_73(CODE[14]), 
		 -> STR_72(CODE[17]), STR_71(CODE[14]), STR_70(CODE[15]), STR_69(CODE[17]), 
		 -> STR_68(CODE[17]), STR_67(CODE[7]), STR_66(CODE[21]), STR_65(CODE[16]), 
		 -> STR_64(CODE[16]), STR_63(CODE[24]), STR_50(CODE[17]), STR_49(CODE[17]), 
		 -> STR_48(CODE[17]), STR_47(CODE[17]), STR_46(CODE[17]), STR_45(CODE[17]), 
		 -> STR_44(CODE[17]), STR_43(CODE[17]), STR_42(CODE[17]), STR_41(CODE[17]), 
		 -> STR_40(CODE[17]), STR_39(CODE[17]), STR_38(CODE[17]), STR_37(CODE[17]), 
		 -> STR_36(CODE[17]), STR_35(CODE[17]), STR_34(CODE[17]), STR_33(CODE[17]), 
		 -> STR_32(CODE[17]), STR_31(CODE[17]), STR_30(CODE[17]), STR_29(CODE[3]), 
		 -> STR_28(CODE[17]), STR_27(CODE[17]), STR_26(CODE[17]), STR_25(CODE[17]), 
		 -> STR_24(CODE[17]), STR_23(CODE[14]), STR_22(CODE[10]), STR_21(CODE[24]), 
		 -> STR_7(CODE[7]), STR_6(CODE[17]), STR_5(CODE[18]), STR_4(CODE[16]), 
		 -> STR_3(CODE[18]), STR_2(CODE[14]), STR_1(CODE[18]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _handler in COMRAM

    _handler->_printSortTimer
    _updateServoStates->i2_updateServoPosition
    i2_change_state_to_menu_start->i2_printRTC
    i2_printRTC->i2_printf
    i2_change_state_to_menu_22->i2_printf
    i2_change_state_to_menu_12->i2_printf
    _change_state_to_menu_23->i2_printf
    _change_state_to_menu_11->i2_printf
    _change_state_to_logs_34->i2_printf
    _change_state_to_logs_33->i2_printf
    _change_state_to_logs_23->i2_printf
    _change_state_to_logs_22->i2_printf
    _change_state_to_logs_12->i2_printf
    _change_state_to_logs_11->i2_printf
    _dispLogs->_retrieveLog
    _retrieveLog->i2___wmul
    _printSortTimer->i2_printf
    i2_printf->i2___lwdiv
    i2_putch->i2_lcdNibble
    i2___lwdiv->i2___lwmod
    i2_lcdInst->i2_lcdNibble
    i2_getRTC->i2_I2C_Master_Read
    i2_getRTC->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_UI
    _sort->_Loading
    _Loading->_EEPROM_write
    _initSortTimer->_getRTC
    _getMAG->_readMAG
    _getIR->_readIR
    _ID->___ftge
    _readIR->_readADC
    _readCOND->_readADC
    ___ftge->___awtoft
    ___awtoft->___awdiv
    _Distribution->_updateServoPosition
    _logRun->_EEPROM_write
    _loadRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _change_state_to_menu_start->_printRTC
    _initLCD->_lcdInst
    _initEEPROM->_EEPROM_write
    _EEPROM_write->_printf
    _UI->_printRTC
    _printRTC->_printf
    _getRTC->_I2C_Master_Read
    _getRTC->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _change_state_to_menu_22->_printf
    _change_state_to_menu_12->_printf
    ___awdiv->___awmod
    _Test->_actuatorTest
    _sensorTest->_printf
    _readMAG->_readADC
    _arm->_printf
    _algorithmTest->_printf
    _actuatorTest->_printf
    _SpeedTest->_printf
    _PortTestPusher->_printf
    _PortTestDC->_printf
    _PlatformTest->_printf
    _BothServos->_printf
    _initServos->_updateServoPosition
    _BlockerTest->_printf
    _printf->___awdiv
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble

Critical Paths under _handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  242489
                    _I2C_Master_Init
                               _Test
                                 _UI
                         _initEEPROM
                            _initLCD
                           _initTime
                             _initUI
                             _logRun
                      _machineConfig
                               _sort
                        _stopSignals
 ---------------------------------------------------------------------------------
 (1) _sort                                                 0     0      0   30730
                       _Distribution
                                 _ID
                            _Loading
 ---------------------------------------------------------------------------------
 (2) _Loading                                             19    19      0   19606
                                             49 BANK0     19    19      0
                        _EEPROM_read
                       _EEPROM_write
                           _delay_ms
                              _getIR
                             _getMAG
                     _initGlobalVars
                         _initServos
                      _initSortTimer
                            _lcdInst
                             _readIR
 ---------------------------------------------------------------------------------
 (3) _initSortTimer                                        5     5      0     631
                                              5 BANK0      5     5      0
                             _getRTC
 ---------------------------------------------------------------------------------
 (3) _initGlobalVars                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _getMAG                                               2     2      0      45
                                              6 BANK0      2     2      0
                            _readMAG
 ---------------------------------------------------------------------------------
 (3) _getIR                                                5     3      2     841
                                              8 BANK0      5     3      2
                             _readIR
 ---------------------------------------------------------------------------------
 (2) _ID                                                  29    29      0    5731
                                             27 BANK0     29    29      0
                            ___awdiv
                           ___awtoft
                             ___ftge
                           _delay_ms
                           _readCOND
                             _readIR
 ---------------------------------------------------------------------------------
 (3) _readIR                                               6     4      2     687
                                              2 BANK0      6     4      2
                            _readADC
 ---------------------------------------------------------------------------------
 (3) _readCOND                                             4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             2     2      0      23
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     520
                                             18 BANK0      9     3      6
                            ___awdiv (ARG)
                           ___awtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             4     1      3    2236
                                             14 BANK0      4     1      3
                            ___awdiv (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    1953
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (2) _Distribution                                         2     2      0    5393
                                              8 BANK0      2     2      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (1) _machineConfig                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _logRun                                              10    10      0   11606
                                             49 BANK0     10    10      0
                        _EEPROM_read
                       _EEPROM_write
 ---------------------------------------------------------------------------------
 (1) _initUI                                               0     0      0   23352
         _change_state_to_menu_start
                            _loadRTC
 ---------------------------------------------------------------------------------
 (2) _loadRTC                                              3     3      0     914
                                             21 BANK0      3     3      0
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Init                                      8     4      4     440
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     290
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_start                           0     0      0   22438
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initTime                                             7     1      6     538
                                              0 BANK0      7     1      6
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _initEEPROM                                           0     0      0   10859
                       _EEPROM_write
 ---------------------------------------------------------------------------------
 (3) _EEPROM_write                                         6     3      3   10859
                                             43 BANK0      6     3      3
                        _EEPROM_read
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _EEPROM_read                                          2     0      2     426
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _UI                                                  24    24      0   47248
                                             68 BANK0     22    22      0
                            ___awdiv
                            ___awmod
            _change_state_to_menu_12
            _change_state_to_menu_22
                            _lcdInst
                           _printRTC
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _printRTC                                            25    25      0   13403
                                             43 BANK0     25    25      0
                             _getRTC
                            _lcdInst
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    3275
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _getRTC                                               2     2      0     519
                                              3 BANK0      2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     2     0      2     406
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_22                              0     0      0    9035
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_12                              0     0      0    9035
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    1216
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1196
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _Test                                                 2     2      0  117581
                                             70 BANK0      2     2      0
                        _BlockerTest
                         _BothServos
                       _PlatformTest
                         _PortTestDC
                     _PortTestPusher
                          _SpeedTest
                       _actuatorTest
                      _algorithmTest
                                _arm
                            _lcdInst
                             _printf
                         _sensorTest
 ---------------------------------------------------------------------------------
 (2) _sensorTest                                           6     6      0    9192
                                             43 BANK0      6     6      0
                            _lcdInst
                             _printf
                            _readADC
                            _readMAG
 ---------------------------------------------------------------------------------
 (4) _readMAG                                              4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _arm                                                  3     3      0    9104
                                             43 BANK0      3     3      0
                            _lcdInst
                             _printf
                        _stopSignals
 ---------------------------------------------------------------------------------
 (2) _algorithmTest                                        2     2      0    9035
                                             43 BANK0      2     2      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _actuatorTest                                        27    27      0   15671
                                             43 BANK0     27    27      0
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (2) _SpeedTest                                            1     1      0    9035
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PortTestPusher                                       1     1      0    9035
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PortTestDC                                           1     1      0    9035
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PlatformTest                                        12    12      0    9308
                                             43 BANK0     12    12      0
                            _lcdInst
                             _printf
                            _readADC
                        _stopSignals
 ---------------------------------------------------------------------------------
 (2) _BothServos                                           2     2      0   19821
                                             43 BANK0      2     2      0
                         _initServos
                            _lcdInst
                             _printf
                        _stopSignals
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (1) _stopSignals                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _initServos                                           1     1      0    5393
                                              8 BANK0      1     1      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (4) _updateServoPosition                                  8     4      4    5393
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _BlockerTest                                         10    10      0    9310
                                             43 BANK0     10    10      0
                            _lcdInst
                             _printf
                            _readADC
 ---------------------------------------------------------------------------------
 (4) _readADC                                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _printf                                              33    21     12    8900
                                             14 BANK0     29    17     12
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     669
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     515
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     366
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _handler                                             16    16      0   84367
                                             74 COMRAM    16    16      0
                     _printSortTimer
                     _updateArmState
                         _updateMenu
                  _updateServoStates
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (8) _updateServoStates                                    2     2      0     593
                                              8 COMRAM     2     2      0
              i2_updateServoPosition
 ---------------------------------------------------------------------------------
 (9) i2_updateServoPosition                                8     4      4     593
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (8) _updateMenu                                           2     2      0   70855
                                             66 COMRAM     2     2      0
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
                           _dispLogs
                       _inputHandler
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (8) i2_change_state_to_menu_start                         0     0      0    7640
                          i2_lcdInst
                         i2_printRTC
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_printRTC                                          25    25      0    4553
                                             41 COMRAM    25    25      0
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
                           i2_strcpy
 ---------------------------------------------------------------------------------
 (10) i2_strcpy                                            6     2      4     699
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _inputHandler                                         4     2      2   30870
                                             41 COMRAM     4     2      2
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_22                            0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_12                            0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_23                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_11                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_34                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_33                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_23                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_22                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_12                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_11                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) _dispLogs                                             2     0      2    1475
                                             17 COMRAM     2     0      2
                        _retrieveLog
 ---------------------------------------------------------------------------------
 (10) _retrieveLog                                        11     9      2    1047
                                              6 COMRAM    11     9      2
                      i2_EEPROM_read
                           i2___wmul
 ---------------------------------------------------------------------------------
 (11) i2_EEPROM_read                                       2     0      2     174
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _updateArmState                                       2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (8) _printSortTimer                                      33    33      0    5279
                                             41 COMRAM    33    33      0
                          i2___awmod
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                         i2_delay_ms
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_printf                                            33    21     12    2952
                                             12 COMRAM    29    17     12
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (10) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (10) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (10) i2___wmul                                            6     2      4     469
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (10) i2___lwmod                                           5     1      4     367
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (10) i2___lwdiv                                           7     3      4     266
                                              5 COMRAM     7     3      4
                          i2___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (10) i2_lcdInst                                           1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (10) i2_getRTC                                            2     2      0     213
                                              3 COMRAM     2     2      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Write                                  2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Stop                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Start                                  0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Read                                   2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Wait                                   1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (9) i2_delay_ms                                           2     2      0      23
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (9) i2___awmod                                            6     2      4     400
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _Test
     _BlockerTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
     _BothServos
       _initServos
         _updateServoPosition
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _stopSignals
       _updateServoPosition
     _PlatformTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
       _stopSignals
     _PortTestDC
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _PortTestPusher
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _SpeedTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _actuatorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _algorithmTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _arm
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _stopSignals
     _lcdInst
       _lcdNibble
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _sensorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
       _readMAG
         _readADC
   _UI
     ___awdiv
       ___awmod (ARG)
     ___awmod
     _change_state_to_menu_12
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _change_state_to_menu_22
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printRTC
       _getRTC
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _strcpy
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _strcpy
   _initEEPROM
     _EEPROM_write
       _EEPROM_read
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
   _initLCD
     _lcdInst
       _lcdNibble
   _initTime
   _initUI
     _change_state_to_menu_start
       _lcdInst
         _lcdNibble
       _printRTC
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
         _strcpy
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _loadRTC
       _I2C_Master_Init
         ___lldiv
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _logRun
     _EEPROM_read
     _EEPROM_write
       _EEPROM_read
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
   _machineConfig
   _sort
     _Distribution
       _updateServoPosition
     _ID
       ___awdiv
         ___awmod (ARG)
       ___awtoft
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
       ___ftge
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
       _delay_ms
       _readCOND
         _readADC
       _readIR
         _readADC
     _Loading
       _EEPROM_read
       _EEPROM_write
         _EEPROM_read
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
       _delay_ms
       _getIR
         _readIR
           _readADC
       _getMAG
         _readMAG
           _readADC
       _initGlobalVars
       _initServos
         _updateServoPosition
       _initSortTimer
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _readIR
         _readADC
   _stopSignals

 _handler (ROOT)
   _printSortTimer
     i2___awmod
     i2___lwdiv
       i2___lwmod (ARG)
     i2___lwmod
     i2___wmul
     i2_delay_ms
     i2_getRTC
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _updateArmState
   _updateMenu
     _change_state_to_logs_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_33
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_34
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _dispLogs
       _retrieveLog
         i2_EEPROM_read
         i2___wmul
     _inputHandler
       _change_state_to_logs_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_33
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_34
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
     i2_change_state_to_menu_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_start
       i2_lcdInst
         i2_lcdNibble
       i2_printRTC
         i2_getRTC
           i2_I2C_Master_Read
             i2_I2C_Master_Wait
           i2_I2C_Master_Start
             i2_I2C_Master_Wait
           i2_I2C_Master_Stop
             i2_I2C_Master_Wait
           i2_I2C_Master_Write
             i2_I2C_Master_Wait
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
         i2_strcpy
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
   _updateServoStates
     i2_updateServoPosition
   i2_change_state_to_menu_start
     i2_lcdInst
       i2_lcdNibble
     i2_printRTC
       i2_getRTC
         i2_I2C_Master_Read
           i2_I2C_Master_Wait
         i2_I2C_Master_Start
           i2_I2C_Master_Wait
         i2_I2C_Master_Stop
           i2_I2C_Master_Wait
         i2_I2C_Master_Write
           i2_I2C_Master_Wait
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
       i2_strcpy
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      55       7       33.2%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     5A      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     5A      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     152      34        0.0%
DATA                 0      0     152       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Wed Apr 12 03:31:56 2017

                                    _i 013F                     i2_I2C_Master_Start 5FBA  
                   i2_I2C_Master_Write 5F90                                     _ID 1192  
                                   l76 5F28                       _f_panning_to_bin 0069  
                          __CFG_CPD$ON 000000                                     _UI 0012  
                         ___awdiv@sign 008B                                     _up 0075  
                  ___wmul@multiplicand 0082                     i2___lwdiv@dividend 0006  
                          __CFG_BORV$3 000000                     EEPROM_read@address 0080  
                         __CFG_CP0$OFF 000000                           __CFG_CP1$OFF 000000  
                         __CFG_CP2$OFF 000000                           __CFG_CP3$OFF 000000  
               __end_of_updateArmState 598C                                    ID@i 00A1  
                                  ID@j 00B4                                    ID@n 00B6  
                                  ?_ID 0001                                    ?_UI 0001  
                                  UI@i 00C8                                    l190 00E2  
                                  l193 00E6                                    l513 4BEA  
                                  l198 0102                                    l632 3316  
                                  l800 1812                                    l810 18E6  
                                  l812 193C                                    l821 1A0E  
                                  l813 1920                                    l831 1AA0  
                                  l840 1B96                                    l833 1AE8  
                                  l850 1C08                                    l818 19D4  
                                  l851 1C1E                                    l843 1C68  
                                  l828 1B28                                    l845 1BBA  
                                  l870 145A                                    l855 1CC0  
                                  l847 1BCC                                    l839 1C6A  
                                  l952 528E                                    l864 12D2  
                                  l848 1BE0                                    l873 14BA  
                                  l849 1BF4                                    l866 1340  
                                  l891 172C                                    l887 167A  
                                  l888 1694                           __CFG_CPB$OFF 000000  
                                  _PR2 000FCB                                    _PEN 007E2A  
                                  _SEN 007E28                    ?i2_I2C_Master_Start 0001  
            __end_of_updateServoStates 3FBE                         ?_machineConfig 0001  
                  ?i2_I2C_Master_Write 0002                                    _arm 4600  
                                  _log 00EE                                    _sel 00FD  
                                  _var 014B                           ___awmod@sign 0085  
                                  wreg 000FE8                    i2printRTC@RTC_month 003B  
                  __end_of_BlockerTest 4184                    _log_count_can_w_lab 0143  
                           i2_delay_ms 5EC8        __end_of_change_state_to_menu_11 5BBC  
      __end_of_change_state_to_menu_12 59FC        __end_of_change_state_to_menu_22 59C4  
      __end_of_change_state_to_menu_23 5B8C           _f_can_coming_to_distribution 0135  
                       ??_Distribution 0088        __end_of_change_state_to_logs_11 5CAC  
      __end_of_change_state_to_logs_12 5C7C        __end_of_change_state_to_logs_22 5C4C  
      __end_of_change_state_to_logs_23 5D08        __end_of_change_state_to_logs_33 5C1C  
      __end_of_change_state_to_logs_34 5BEC                                   ??_ID 009B  
                                 ??_UI 00C4                           __CFG_LVP$OFF 000000  
                         __CFG_WDT$OFF 000000                                   l1300 2556  
                                 l1150 4720                                   l2007 53B2  
                                 l1312 2700                                   l2017 562E  
                                 l1402 49E2                                   l1306 263A  
                                 l1163 5EF4                                   l1172 42B2  
                                 l1413 4A54                                   l1421 4A6E  
                                 l1342 09EE                                   l1318 2794  
                                 l1335 0944                                   l1503 46F0  
                                 l1520 56DC                                   l1512 46EA  
                                 l1504 46B2                                   l1345 0A54  
                                 l1265 4540                                   l1418 4A68  
                                 l1346 0AA2                                   l1338 0948  
                                 l1451 324C                                   l1347 0B08  
                                 l1291 492A                                   l1436 3252  
                                 l1372 0EB0                                   l1348 0B56  
                                 l1268 4560                                   l1445 31C6  
                                 l1526 56EC                                   l1560 1F14  
                                 l1384 104A                                   l1288 4926  
                                 l1449 321E                                   l1297 2552  
                                 l1466 519C                                   l1483 40C0  
                                 l1459 518C                                   l1389 1120  
                                 ?_arm 0001                                   l1488 410C  
                                 l1824 44C6                                   l1489 4126  
                                 l7000 20DA                                   l7002 20E6  
                                 l1954 4E40                                   l7100 4DDA  
                                 l7014 5102                                   l7006 5A06  
                                 l7024 5138                                   l7008 5A12  
                                 l7042 5276                                   l7018 5118  
                                 l7108 4E2E                                   l8020 1860  
                                 l8004 181A                                   l7310 3294  
                                 l7070 447A                                   l7062 441C  
                                 l8102 1A2A                                   l7048 52A8  
                                 l7320 335C                                   l7080 44D0  
                                 l7072 44AA                                   l7064 442A  
                                 l8112 1A7A                                   l7330 33F2  
                                 l7322 337A                                   l7074 44B8  
                                 l7066 445A                                   l7058 4408  
                                 l8114 1A84                                   l8106 1A50  
                                 l8042 18D0                                   l9020 469A  
                                 l7332 3410                                   l7324 3398  
                                 l7316 3320                                   l8052 1900  
                                 l6710 5D80                                   l9030 46D2  
                                 l9022 46A4                                   l7334 342E  
                                 l7326 33B6                                   l7318 333E  
                                 l7342 3488                                   l7086 44EC  
                                 l8230 123A                                   l7502 4EEC  
                                 l8126 1ADC                                   l8118 1AA4  
                                 l8054 190A                                   _ADIE 007CEE  
                                 l9200 31B0                                   l9032 46DC  
                                 l9016 4674                                   l7336 344C  
                                 l7328 33D4                                   l7344 34E6  
                                 l7096 4DC4                                   l8400 484C  
                                 l8080 19BE                                   l6730 5374  
                                 l9210 31F4                                   l7338 346A  
                                 l7098 4DD4                                   l8322 15C2  
                                 l8314 158C                                   l8242 128E  
                                 l8146 1BA2                                   l8090 19EE  
                                 l9028 46B8                                   l8404 4866  
                                 l8340 1616                                   l8324 15CA  
                                 l8260 12FC                                   l8228 1232  
                                 l7612 5242                                   l8092 19F8  
                                 l6726 5362                                   l6750 55FC  
                                 l6670 5D5A                                   l9214 3208  
                                 l9134 2FAA                                   l7630 4CF4  
                                 l7550 47C4                                   l7542 4796  
                                 l8406 4894                                   l8174 1C2A  
                                 l8182 1C72                                   l6728 536E  
                                 l6920 1E90                                   l6904 1DEE  
                                 l9152 305A                                   l9072 4A5C  
                                 l9064 4A20                                   l8520 274E  
                                 l7560 5D90                                   l8352 164E  
                                 l8336 1606                                   l8328 15DE  
                                 l7608 522A                                   l8176 1C60  
                                 l6738 53A4                                   l6754 5620  
                                 l6746 55EA                                   l6914 1E66  
                                 l6906 1DFA                                   l6930 1EDA  
                                 l9154 3060                                   l8602 09B2  
                                 l7642 4D28                                   l7554 47CE  
                                 l7538 478C                                   l7546 47AE  
                                 l6850 4FEE                                   l8282 140E  
                                 l8194 1CB4                                   l6748 55F6  
                                 l6924 1EBC                                   l6916 1E72  
                                 l6908 1E00                                   l6668 5D48  
                                 l9172 3110                                   l9068 4A48  
                                 l8612 09DA                                   l8604 09B8  
                                 l8508 26FA                                   l7644 4D34  
                                 l7636 4D0A                                   l9420 4F4E  
                                 l9412 4F28                                   l6692 5CD2  
                                 l7564 5DA6                                   l8380 16EA  
                                 l8356 1664                                   l8348 163E  
                                 l8284 1418                                   l7492 4E60  
                                 l8196 1CC2                                   l6942 1F4C  
                                 l6926 1ED4                                   l6918 1E78  
                                 l9190 3172                                   l8702 0C04  
                                 l8550 2846                                   l8526 2790  
                                 l8470 257C                                   l7662 4D8C  
                                 l7654 4D6A                                   l7646 4D3A  
                                 l6854 5012                                   l8294 1466  
                                 l6960 1FA8                                   l6872 1CDC  
                                 l9344 4048                                   l9352 408E  
                                 l9192 3188                                   l9184 3152  
                                 l8800 0E04                                   l8608 09C2  
                                 l9432 4F94                                   l9424 4F72  
                                 l9416 4F3C                                   l9408 4F18  
                                 l6848 4FCA                                   l7592 51E2  
                                 l7496 4E76                                   l6970 2002  
                                 l6946 1F66                                   l6882 1D0C  
                                 l9370 40D2                                   l9098 51C4  
                                 l8810 0E2C                                   l8802 0E0A  
                                 l8722 0C78                                   l8714 0C56  
                                 l8706 0C1C                                   l8562 288E  
                                 l8546 2810                                   l8538 27E0  
                                 l8490 2642                                   l7658 4D78  
                                 l9418 4F48                                   l9610 0270  
                                 l9602 024E                                   l8394 47FE  
                                 l7674 58E8                                   l7682 4C50  
                                 l6972 200C                                   l6948 1F6C  
                                 l6876 1CF0                                   l9196 319C  
                                 l8740 0CDA                                   l8732 0CA0  
                                 l8724 0C7E                                   l9428 4F80  
                                 l9620 028C                                   l8396 4818  
                                 l7692 4CD4                                   l8388 172E  
                                 l7596 51F8                                   l6990 2068  
                                 l6966 1FCA                                   l6878 1D02  
                                 l9390 4138                                   l8902 100A  
                                 l8822 0E70                                   l8806 0E14  
                                 l8750 0D02                                   l8718 0C60  
                                 l8558 2858                                   l9606 0258  
                                 l9550 0144                                   l9542 0128  
                                 l7774 5078                                   l8398 4832  
                                 l7686 4C90                                   l6984 2042  
                                 l6896 1DBC                                   l6888 1D40  
                                 l9376 40EC                                   l9368 40C2  
                                 l8912 1032                                   l8832 0E98  
                                 l8744 0CE4                                   l8728 0C88  
                                 l8488 2634                                   l9800 07C0  
                                 l9720 0648                                   l9640 02F6  
                                 l9624 02A4                                   l9616 0282  
                                 l9536 00FE                                   l7784 50BA  
                                 l6986 204E                                   l6994 207C  
                                 l6978 2026                                   l9378 40F6  
                                 l8906 1022                                   l8850 0F02  
                                 l8826 0E88                                   l8818 0E66  
                                 l8770 0D68                                   l8754 0D0C  
                                 l9810 07EA                                   l9730 0672  
                                 l9650 038C                                   l9642 0314  
                                 l9554 015C                                   l9546 013A  
                                 l7778 508E                                   l6996 2082  
                                 l9388 4128                                   l8940 10BC  
                                 l8932 109A                                   l8908 1028  
                                 l8860 0F2A                                   l8828 0E8E  
                                 l8780 0D90                                   l8748 0CFC  
                                 l8692 0BDC                                   l9804 07D8  
                                 l9724 0660                                   l9716 063E  
                                 l9660 0422                                   l9652 03AA  
                                 l9644 0332                                   l9572 01C6  
                                 l9398 417E                                   l8950 10E4  
                                 l8942 10C2                                   l8854 0F1A  
                                 l8846 0EF8                                   l8774 0D80  
                                 l8766 0D5E                                   l8758 0D24  
                                 l9814 07F4                                   l9734 067C  
                                 l9662 0440                                   l9654 03C8  
                                 l9646 0350                                   l9670 04E0  
                                 l9582 01EE                                   l9574 01CC  
                                 l9558 016E                                   l8936 10A4  
                                 l8880 0F9E                                   l8872 0F7C  
                                 l8864 0F42                                   l8856 0F20  
                                 l8792 0DE2                                   l8784 0DA8  
                                 l8776 0D86                                   l8696 0BF4  
                                 l8688 0BD2                                   l9840 0874  
                                 l9760 0704                                   l9664 045E  
                                 l9656 03E6                                   l9648 036E  
                                 l8946 10CC                                   l8890 0FC6  
                                 l8882 0FA4                                   l8698 0BFA  
                                 l9850 089E                                   l9818 080C  
                                 l9770 072E                                   l9738 0694  
                                 l9682 0544                                   l9674 0522  
                                 l9658 0404                                   l9578 01D6  
                                 l7994 17D0                                   l8972 114A  
                                 l8956 110A                                   l8876 0F86  
                                 l8796 0DEC                                   l9844 088C  
                                 l9836 086A                                   l9764 071C  
                                 l9756 06FA                                   l9692 0560  
                                 l9668 047C                                   l9588 01FC  
                                 l8982 1172                                   l8966 113A  
                                 l8886 0FAE                                   l9854 08A8  
                                 l9774 0738                                   l9678 052C  
                                 l9862 08CC                                   STR_1 FB7F  
                                 l8976 1162                                   l8968 1140  
                                 l9696 0578                                   l9688 0556  
                                 STR_2 FF56                                   STR_3 FB6D  
                                 l8986 118A                                   l8978 1168  
                                 l8898 1000                                   l9858 08C0  
                                 l9778 0750                                   STR_4 FE79  
                                 STR_5 FB6D                                   l9796 07B6  
                                 STR_6 FDF5                                   STR_7 FFC3  
                                 STR_8 FFDA                                   STR_9 FFCA  
              ??i2_updateServoPosition 0005                                   _LATA 000F89  
                                 _LATB 000F8A                                   _LATC 000F8B  
                                 _LATD 000F8C                                   _LATE 000F8D  
                                 u5330 5CD0                                   _PEIE 007F96  
                                 u7110 1B20                                   u6320 5830  
                                 u7120 1B22                                   u6330 5832  
                                 u5530 4FE4                                   u5540 4FE6  
                                 u7300 138E                                   u7108 1AFE  
                                 _RCEN 007E2B                                   u5630 1E3A  
                                 u5550 5008                                   u7310 1390  
                                 u5551 5004                                   u6360 3316  
                                 u5560 500A                                   u7400 153C  
                                 u7320 13E2                                   u6345 5668  
                                 u5570 587C                                   u7330 13E4  
                                 u7090 1AFA                                   u5571 5878  
                                 u5580 587E                                   u5637 1E30  
                                 u5670 1EB2                                   u8400 46CA  
                                 u7360 1458                                   u6810 17DC  
                                 i2l76 5F3C                                   u8500 4A36  
                                 u8340 4690                                   u7620 25BE  
                                 u7540 16F6                                   u5677 1EA8  
                                 u8350 4692                                   u7630 25C0  
                                 u7390 153A                                   u6830 1812  
                                 u7720 2834                                   u7560 172C  
                                 u7820 09EE                                   u7660 2684  
                                 u6828 17E0                                   u8710 313A  
                                 u8630 2FEC                                   u8518 4A3A  
                                 u8470 4A0C                                   u8390 46C8  
                                 u7750 287C                                   u7670 2686  
                                 u7558 16FA                                   u8640 2FEE  
                                 u7840 0AA2                                   u7728 2838  
                                 u8660 30A2                                   u7860 0B56  
                                 u8901 40B6                                   u8910 40B8  
                                 u8670 30A4                                   u7758 2880  
                                 u8760 3180                                   u8728 313E  
                                 u8488 4A10                                   u8770 3198  
                                 u8771 3194                                   u8951 40E2  
                                 u8960 40E4                                   _RSEN 007E29  
                          _stopSignals 5EAC                                   _Test 44FA  
                                 _back 0063                                   _main 4B48  
                                 _down 0065                           ___ftpack@arg 0080  
                                 _keys FAA7                           ___ftpack@exp 0083  
                                 _time 011C                                   fsr0h 000FEA  
                                 fsr1h 000FE2                     i2___lwdiv@quotient 000A  
                                 indf0 000FEF                                   fsr2h 000FDA  
                                 fsr0l 000FE9                                   indf2 000FDF  
                                 fsr1l 000FE1                                   fsr2l 000FD9  
                                 _sort 5E4A                                   btemp 007E  
                 ??i2_I2C_Master_Start 0002                   ??i2_I2C_Master_Write 0004  
                                 prodh 000FF4                                   prodl 000FF3  
                                 start 000E                          __CFG_IESO$OFF 000000  
                 _log_count_can_no_lab 0141                        __end_ofi2_putch 5F7A  
                        __CFG_MCLRE$ON 000000                           ___param_bank 000000  
                           i2_printRTC 37EA                            i2_lcdNibble 56F4  
                      __end_of_Loading 1CCE                   __end_of_actuatorTest 1192  
                                ??_arm 00AB                                  ID@res 00AE  
           i2updateServoPosition@timer 0003                       ?_I2C_Master_Init 008D  
                     ?_I2C_Master_Read 0001                       ?_I2C_Master_Wait 0001  
          ??i2_change_state_to_menu_12 002A            ??i2_change_state_to_menu_22 002A  
                     ?_I2C_Master_Stop 0001                                  ?_Test 0001  
                                l10114 41D0                                  l10140 426C  
                                l10116 41E4                                  l10170 4566  
                                l10154 44FC                                  l10180 4584  
                                l10172 456C                                  l10412 4BBC  
                                l10404 4B92                                  l10182 458A  
                                l10174 4572                                  l10414 4BC2  
                                l10430 4BEC                                  l10406 4BA8  
                                l10184 4590                                  l10176 4578  
                                l10192 45A2                                  l10424 4BE0  
                                l10416 4BC8                                  l10186 4596  
                                l10178 457E                                  l10194 45F4  
                                l10426 4BE6                                  l10188 459C  
                 __end_of_EEPROM_write 47E6                            ID@time_1150 009D  
                                ?_main 0001                                  _ACKEN 007E2C  
                                _ACKDT 007E2D                        __end_of___awdiv 4D96  
                      ?_updateArmState 0001                                  _EEADR 000FA9  
                                STR_10 FFE6                                  STR_11 FFEA  
                                STR_12 FFFA                                  STR_20 FFEE  
                                STR_13 FFDE                                  STR_21 FAC2  
                                STR_14 FFD6                                  STR_22 FF9A  
                                STR_30 FE06                                  STR_15 FFD2  
                                STR_23 FF48                                  STR_31 FDE4  
                                STR_16 FFE2                                  STR_24 FD4B  
                                STR_32 FD29                                  STR_40 FCE5  
                                STR_17 FFF2                                  STR_25 FE28  
                                STR_33 FD3A                                  STR_41 FCD4  
                                STR_18 FFF6                                  STR_34 FDD3  
                                STR_50 FDB1                                  STR_42 FD8F  
                                STR_26 FD5C                                  STR_43 FD8F  
                                STR_35 FDD3                                  STR_51 FFDA  
                                STR_19 FFCE                                  STR_27 FE17  
                                STR_52 FFCA                                  STR_60 FFF2  
                                STR_28 FD6D                                  STR_36 FD18  
                                STR_44 FCF6                        __end_of___awmod 4F9E  
                                STR_45 FCE5                                  STR_37 FD29  
                                STR_53 FFE6                                  STR_61 FFF6  
                                STR_29 FE25                                  STR_62 FFCE  
                                STR_54 FFEA                                  STR_70 FF01  
                                STR_38 FDC2                                  STR_46 FDA0  
                                STR_47 FDA0                                  STR_55 FFFA  
                                STR_63 FAC2                                  STR_71 FF3A  
                                STR_39 FD7E                                  STR_56 FFDE  
                                STR_80 FE25                                  STR_64 FE59  
                                STR_48 FD07                                  STR_72 FC5D  
                                STR_49 FCF6                                  STR_57 FFD6  
                                STR_73 FF1E                                  STR_65 FE69  
                                STR_81 FB13                                  STR_58 FFD2  
                                STR_90 FF3A                                  STR_82 FE25  
                                STR_74 FF64                                  STR_66 FADA  
                                STR_59 FFE2                                  STR_67 FFBC  
                                STR_91 FEF2                                  STR_75 FEE3  
                                STR_83 FEB6                                  STR_76 FF2C  
                                STR_92 FF10                                  STR_84 FE39  
                                STR_68 FC90                                  STR_77 FFAD  
                                STR_85 FF86                                  STR_69 FCA1  
                                STR_93 FC6E                                  STR_86 FF86  
                                STR_78 FF3A                                  STR_94 FF70  
                                STR_87 FFA4                                  STR_95 FC7F  
                                STR_79 FB25                                  STR_88 FFA4  
                                STR_96 FF7B                                  STR_89 FF90  
                                STR_97 FED4                                  STR_98 FBE6  
                                STR_99 FBD5           i2updateServoPosition@my_time 0007  
                                ?_sort 0001                        __end_of___lldiv 4E52  
         i2updateServoPosition@time_us 0001                                  u11007 0188  
                                u10080 42B2                                  u11017 01DE  
                                u11107 0684                                  u11027 020A  
                                u11117 06AE                                  u11037 0260  
                                u12007 23F6                                  u11207 450A  
                                u11127 070C                                  u11047 0294  
                                _T0CON 000FD5                                  u12017 2428  
                                u11217 2502                                  u11137 0740  
                                u11057 02BE                                  u12107 5D50  
                                u12027 2474                                  u11307 2784  
                                u11227 2546                                  u11147 076A  
                                u11067 0534                        ___awdiv@divisor 0088  
                                u12117 54C0                                  u12037 24A8  
                                u11317 27A6                                  u11237 2568  
                                u11157 07C8                                  u11077 0568  
                                u12127 54CA                                  u12047 24DA  
                                u11407 095A                                  u11327 27D4  
                                u11247 25D4                                  u11167 07FC  
                                u11087 0592                                  u10607 192E  
                                _T1CON 000FCD                                  u12137 54F6  
                                u12057 530E                                  u11417 09CA  
                                u11337 27EE                                  u11257 2628  
                                u11177 0826                                  u11097 0650  
                                u10617 194C                                  u12147 5500  
                                u12067 532A                                  u11507 0C0C  
                                u11427 09FE                                  u11347 460E  
                                u11267 269A                                  u11187 087C  
                                u10707 1BBE                                  u10627 1980  
                                u12077 3FF4                                  u11517 0C68  
                                u11437 0A64                                  u11357 48D6  
                                u11277 26EE                                  u11197 08B0  
                                u10717 1BC6                                  u10637 19D8  
                                u10557 175E                                  u12087 4110  
                                u11607 0EA0                                  u11527 0C90  
                                u11447 0A82                                  u11367 491A  
                                u11287 2712                                  u10807 1C22  
                                u10727 1BD0                                  u10647 19E0  
                                u10567 188E                                  _T2CON 000FCA  
                                u12097 411A                                  u11617 0F0A  
                                u11537 0CEC                                  u11457 0AB2  
                                u11377 493C                                  u11297 2740  
                                u10817 1C8C                                  u10737 1BDA  
                                u10657 1A12                                  u10577 18EA  
                                u11707 1124                                  u11627 0F32  
                                u11547 0D14                                  u11467 0B18  
                                u11387 08F4                                  u10907 16AE  
                                u10827 5A86                                  u10747 1BE4  
                                u10667 1A1C                                  u10587 18F2  
                                u11717 112E                                  u11637 0F8E  
                                u11557 0D70                                  u11477 0B36  
                                u11397 0938                                  u10917 5D9C  
                                u10837 5200                                  u10757 1BEE  
                                u10677 1A38                                  u10597 1924  
                                u11807 3002                                  u11727 1152  
                                u11647 0FB6                                  u11567 0D98  
                                u11487 0B66                                  u10927 588E  
                                u10847 11AC                                  u10767 1BF8  
                                u10687 1B42                                  _T3CON 000FB1  
                                u11817 304E                                  u11737 117A  
                                u11657 1012                                  u11577 0DF4  
                                u11497 0BE4                                  u10937 58C2  
                                u10857 11F2                                  u10777 1C00  
                                u10697 1B84                                  u11907 21AC  
                                u11827 30B8                                  u11747 5156  
                                u11667 103A                                  u11587 0E1C  
                                u10947 4742                                  u10867 12E2  
                                u10787 1C0C                                  u11917 21E0  
                                u11837 3104                                  u11757 51A6  
                                u11677 105C                                  u11597 0E78  
                                u10957 479E                                  u10877 14CA  
                                u10797 1C16                                  u11927 2212  
                                u11847 31D0                                  u11767 51BA  
                                u11687 10AC                                  u10967 47D6  
                                u10887 167E                                  u11937 225E  
                                u11857 31E2                                  u11777 56A6  
                                u11697 10D4                                  u10977 002A  
                                u10897 1688                                  u11947 2292  
                                u11867 3228                                  u11787 49AC  
                                u10987 0114                                  u11957 22C4  
                                u11877 323A                                  u11797 2F88  
                                u10997 014C                                  u11967 2310  
                                u11887 2114                                  u11977 2344  
                                u11897 2160                                  u11987 2376  
                                u11997 23C2                        __end_of___lwdiv 53BC  
                      __end_of___lwmod 5638                                  i2l273 37E6  
                                i2l632 3878                                  i2l920 2E04  
                                i2l924 2DCA                                  i2l927 2E72  
                                i2l952 553C                        ___awdiv@counter 008A  
                                i2l979 5988                                  _TMR0H 000FD7  
                                _TMR1H 000FCF                                  _TMR0L 000FD6  
                                _TMR3H 000FB3                                  _TMR1L 000FCE  
                                _TMR3L 000FB2                             _BothServos 2106  
                                _PORTB 000F81                                  _TRISA 000F92  
                                _TRISB 000F93                                  _TRISC 000F94  
                                _TRISD 000F95                                  _TRISE 000F96  
                        __CFG_PWRT$OFF 000000                          __CFG_WRT0$OFF 000000  
                        __CFG_WRT1$OFF 000000                          __CFG_WRT2$OFF 000000  
                        __CFG_WRT3$OFF 000000                        __end_of_lcdInst 5F6E  
                      __end_of_handler 3DF6                         __CFG_EBTR0$OFF 000000  
                       __CFG_FCMEN$OFF 000000                         __CFG_EBTR1$OFF 000000  
                       __CFG_EBTR2$OFF 000000                         __CFG_EBTR3$OFF 000000  
                                _nRBPU 007F8F                          __CFG_WRTB$OFF 000000  
                        __CFG_WRTC$OFF 000000                          __CFG_WRTD$OFF 000000  
                      __end_of_readADC 5D60                        __end_of_initLCD 58CC  
                       __CFG_EBTRB$OFF 000000                                  _debug 012F  
                           i2isdigit@c 0003                          ___awtoft@sign 0091  
                                _getIR 51CC                        __end_of_loadRTC 50C2  
                      __end_of_readMAG 5886                        __end_of_dpowers FAC2  
                                _first 013B                                  _enter 0067  
                                arm@on 00AC                        __end_of_isdigit 5D8A  
                                _input 007D                          ___ftpack@sign 0084  
                                _putch 5F4E                                  pclath 000FFA  
                                tablat 000FF5                       __end_ofi2___wmul 5E00  
                     __end_ofi2_getRTC 542E                    _log_count_pop_w_tab 00F4  
                                status 000FD8                            readCOND@res 0084  
                   __size_ofi2___awmod 0070                         __CFG_PBADEN$ON 000000  
                        i2printf@width 0028                       __end_ofi2_printf 2C04  
                   __size_ofi2___lwdiv 0052                     __size_ofi2___lwmod 0042  
                     __end_ofi2_strcpy 5ACC                            Loading@addr 00B3  
                     _count_can_no_lab 0125                   printSortTimer@i_1168 0047  
                 __size_of_EEPROM_read 0018                        __initialization 57A0  
                       readIR@ana_port 0082                           __end_of_Test 4600  
                   __size_ofi2_lcdInst 000C                           __end_of_main 4C10  
                         __end_of_keys FAB8                           __end_of_sort 5E6C  
                           i2printf@ap 0020                             i2printf@cp 001E  
                   __size_ofi2_isdigit 001E                            _BlockerTest 3FBE  
                               ??_Test 00C6    __size_of_change_state_to_menu_start 002C  
                      ??_machineConfig 0080                                 ??_main 00DA  
                               ??_sort 00C4                          __activetblptr 000003  
                               ID@res1 00AA                                 ID@res2 00AC  
           __size_of_updateServoStates 01C8                                 ID@time 00A9  
           updateServoPosition@my_time 0086             updateServoPosition@time_us 0080  
                           i2strcpy@cp 0005                             i2strcpy@to 0001  
                    ?_I2C_Master_Start 0001                    EEPROM_write@address 00AB  
               __size_ofi2_EEPROM_read 0016                      ?_I2C_Master_Write 0081  
                          ?i2_delay_ms 0001                                 ?_getIR 0088  
                   ??_I2C_Master_Start 0081                                 _ADCON0 000FC2  
                               _ADCON1 000FC1                     ??_I2C_Master_Write 0083  
                               _ADCON2 000FC0                                 STR_100 FBB3  
                               STR_101 FC3B                                 STR_110 FE98  
                               STR_102 FC4C                                 STR_111 FCC3  
                               STR_103 FB91                                 STR_104 FE49  
                               STR_120 FB01                                 STR_112 FAEF  
                               STR_121 FE89                                 STR_113 FBF7  
                               STR_105 FBC4                                 STR_114 FC2A  
                               STR_106 FBA2                                 STR_122 FB49  
                               _ADRESH 000FC4                                 STR_107 FBC4  
                               STR_115 FC2A                                 STR_123 FE89  
                               STR_124 FE89                                 STR_108 FEC5  
                               STR_116 FC19                                 _EEADRH 000FAA  
                               STR_117 FC2A                                 STR_109 FEA7  
                               STR_125 FC08                                 STR_118 FC19  
                               STR_126 FCB2                                 _ADRESL 000FC3  
                               STR_127 FAEF                                 STR_119 FB37  
                               STR_128 FB5B                                 STR_129 FFB5  
                               _EEDATA 000FA8                                 _EECON2 000FA7  
                     ___awdiv@dividend 0086                        i2lcdNibble@data 0002  
                     __end_of___awtoft 5910                                 ?_putch 0001  
                     __end_of___ftpack 44FA                 __size_of_initSortTimer 00AA  
                      i2lcdNibble@temp 0001              i2_change_state_to_menu_12 5B2C  
            i2_change_state_to_menu_22 5AFC                                 _INT1IE 007F83  
                               _INT1IF 007F80                                 _CVRCON 000FB5  
                               i2l2007 5796                                 i2l1071 3CFA  
                               i2l1080 3D9E                                 i2l2017 5948  
                               i2l1082 3DBA                                 i2l1163 5F20  
                               i2l1560 2A70                                 i2l7120 53F4  
                               i2l7200 2A24                                 i2l7130 541E  
                               i2l7202 2A36                                 i2l7124 5404  
                               i2l7222 2AB6                                 i2l7206 2A3A  
                               i2l7224 2ABA                                 i2l7152 28B0  
                               i2l7242 2B06                                 i2l7218 2A9E  
                               i2l7154 28BE                                 i2l7260 2B5E  
                               i2l7236 2AEC                                 i2l7180 2980  
                               i2l7172 2958                                 i2l7164 28F6  
                               i2l7148 28A0                                 i2l7262 2B66  
                               i2l7270 2B8C                                 i2l7254 2B48  
                               i2l7246 2B2A                                 i2l7190 29D8  
                               i2l7182 298A                                 i2l7158 28C4  
                               i2l7272 2B92                                 i2l7248 2B32  
                               i2l7192 29E2                                 i2l7184 298E  
                               i2l6802 5EA4                                 i2l7266 2B7A  
                               i2l7194 29E8                                 i2l7282 5AA4  
                               i2l6812 5764                                 i2l7276 2BE0  
                               i2l7196 29FA                                 i2l7460 4392  
                               i2l7284 5AAC                                 i2l6814 576C  
                               i2l7278 2BE8                                 i2l6824 578C  
                               i2l6816 5770                                 i2l6840 593E  
                               i2l6832 591E                                 i2l7472 43D6  
                               i2l7464 43A2                                 i2l6834 5926  
                               i2l9500 5494                                 i2l6836 592A  
                               i2l7900 3B44                                 i2l7740 38DA  
                               i2l7732 3882                                 i2l7910 3B66  
                               i2l7750 3948                                 i2l7742 38F0  
                               i2l7734 3898                                 i2l7726 3816  
                               i2l7904 3B58                                 i2l7840 3A72  
                               i2l7752 395E                                 i2l7744 3906  
                               i2l7736 38AE                                 i2l7760 39E4  
                               i2l6778 5E20                                 i2l7906 3B5C  
                               i2l7850 3A90                                 i2l7754 3974  
                               i2l7746 391C                                 i2l7738 38C4  
                               i2l7940 3BD4                                 i2l7932 3BB0  
                               i2l7924 3B8C                                 i2l7860 3AAE  
                               i2l7852 3A96                                 i2l7836 3A5E  
                               i2l7828 3A44                                 i2l7748 3932  
                               i2l9462 5ECC                                 i2l7918 3B7E  
                               i2l7854 3A9C                                 i2l7838 3A6E  
                               i2l7846 3A7C                                 i2l7758 398A  
                               i2l9454 5552                                 i2l9480 544E  
                               i2l7936 3BC2                                 i2l7928 3B9E  
                               i2l7856 3AA2                                 i2l7864 3AB4  
                               i2l9448 5528                                 i2l9466 5EDC  
                               i2l7890 3B1E                                 i2l7858 3AA8  
                               i2l7946 3BDE                                 i2l9492 547C  
                               i2l9484 545C                                 i2l9476 5442  
                               i2l7884 3B10                                 i2l7876 3AF8  
                               i2l9486 5464                                 i2l7894 3B3A  
                               i2l9910 35C2                                 i2l9902 35A6  
                               i2l9488 5468                                 i2l9496 5486  
                               i2l9930 360A                                 i2l9922 35EE  
                               i2l9914 35D2                                 i2l9906 35B4  
                               i2l9950 3658                                 i2l9942 363C  
                               i2l9934 3618                                 i2l9926 35FC  
                               i2l9918 35E0                                 i2l9970 36AE  
                               i2l9962 368A                                 i2l9954 366E  
                               i2l9946 364A                                 i2l9938 362E  
                               i2l9890 358A                                 i2l9882 356E  
                               i2l9876 355A                                 i2l9990 36FC  
                               i2l9982 36D8                                 i2l9974 36BC  
                               i2l9966 3698                                 i2l9958 367C  
                               i2l9894 3598                                 i2l9886 357C  
                               i2l9878 3560                                 i2l9994 370A  
                               i2l9986 36EE                                 i2l9978 36CA  
              _f_most_recent_sort_time 0139                                 i2l9998 3718  
                        PlatformTest@i 00B1                                 _OSCCON 000FD3  
                               _TMR0IE 007F95                                 _TMR0IF 007F92  
                            ??i2_putch 0003                                 _TMR1IE 007CE8  
                               _TMR1IF 007CF0                                 _TMR2IE 007CE9  
                               _TMR2IF 007CF1                                 _TMR3IE 007D01  
                               _TMR3IF 007D09                                 _TMR0ON 007EAF  
                               _TMR1ON 007E68                                 _TMR2ON 007E52  
                               _TMR3ON 007D88                                 _SSPADD 000FC8  
                               _TRISC3 007CA3                                 _TRISC4 007CA4  
                               _SSPBUF 000FC9                              ??_Loading 00B1  
                     __end_of_delay_ms 5DB2                   delay_ms@milliseconds 0081  
                       __CFG_XINST$OFF 000000                       __end_of_dispLogs 5E4A  
                               ___ftge 4C10                            ?i2_printRTC 0001  
                     retrieveLog@byte1 000B                       retrieveLog@byte2 000C  
                     retrieveLog@byte3 000D                   __end_of_Distribution 48C8  
                               ___wmul 5A32                              ??___awdiv 008A  
                       __CFG_STVREN$ON 000000                                 _getMAG 5A68  
                            ??___awmod 0084                            logRun@byte1 00B2  
                          logRun@byte2 00B3                            logRun@byte3 00B4  
                     __end_of_readCOND 583A                                 _getRTC 50C2  
                            ??___lldiv 0088                              ??___lwdiv 0084  
                            ??___lwmod 008B                       ??_printSortTimer 002A  
                     __end_of_initTime 5E8E                                 _initUI 5ACC  
                               _readIR 4F9E                                 _logRun 4184  
                               getIR@i 008B                                 clear_0 57C6  
                               clear_1 57D2                                 clear_2 57DE  
                     ___awdiv@quotient 008C                        ___awmod@divisor 0082  
                           _PortTestDC 499E                        ___awmod@counter 0084  
                            ??_lcdInst 0082                                 _printf 1CCE  
                            ??_handler 004B                __size_of_initGlobalVars 00D4  
                         ?_retrieveLog 0007                                 _strcpy 59FC  
                   __size_of_SpeedTest 0084                              ??_readADC 0080  
                            ??_initLCD 0083                              ??_loadRTC 0095  
                            ??_readMAG 0082   __end_ofi2_change_state_to_menu_start 5DDA  
__size_ofi2_change_state_to_menu_start 0028           i2_change_state_to_menu_start 5DB2  
                          ?_BothServos 0001                              ??_isdigit 0080  
                    __end_ofi2___awmod 549E                      __end_ofi2___lwdiv 57A0  
                     __end_of_printRTC 352A                           __mediumconst FAA6  
                    __end_ofi2___lwmod 5952                                 tblptrh 000FF7  
                               tblptrl 000FF6                                 tblptru 000FF8  
                 _log_count_pop_no_tab 00F2                         i2___awmod@sign 0006  
                __end_of_algorithmTest 499E                      __end_ofi2_lcdInst 5F86  
                    __end_ofi2_isdigit 5EAC                             __accesstop 0080  
              __end_of__initialization 57E4                          ?_inputHandler 002A  
                           ___ftge@ff1 0092                             ___ftge@ff2 0095  
                _most_recent_sort_time 0147                          ___rparam_used 000001  
                        ?_PlatformTest 0001                printSortTimer@start_sec 003B  
                __size_of_actuatorTest 08B8                             ___awtoft@c 008E  
                        i2_EEPROM_read 5F12                           Loading@byte1 00B5  
                   i2___lwmod@dividend 0001                         __pcstackCOMRAM 0001  
                _agitator_toggle_count 0123                  __size_of_EEPROM_write 00E8  
                  __size_ofi2_delay_ms 001C                           __pidataBANK1 5F9A  
                  BlockerTest@cam_flag 00B1                          __end_of_getIR 524E  
                          i2printRTC@i 0041                          _initSortTimer 4E52  
          __end_of_updateServoPosition 52CC                          __end_of_putch 5F5E  
                          i2printf@len 0022                            i2printf@val 0024  
                           __end_of_ID 173A                             __end_of_UI 08DA  
                            ?i2___wmul 0001                     __size_of_lcdNibble 006C  
                            ?i2_getRTC 0001                            i2putch@data 0003  
                printSortTimer@curTime 002D     __end_of_change_state_to_menu_start 5D34  
        ?i2_change_state_to_menu_start 0001             _change_state_to_menu_start 5D08  
                printSortTimer@cur_sec 003D                              ?i2_printf 000D  
                              ??_getIR 008A                              ?i2_strcpy 0001  
                     _count_pop_no_tab 0129                    __size_ofi2_printRTC 0236  
                              ??_putch 0082                           _actuatorTest 08DA  
              __size_of_PortTestPusher 005C                             __pbssBANK0 00DA  
                           __pbssBANK1 0100                           ?_stopSignals 0001  
                       ??_inputHandler 002C         __size_ofi2_updateServoPosition 0068  
        __end_ofi2_updateServoPosition 5572                           _EEPROM_write 46FE  
                       ??_PlatformTest 00AB               ?_change_state_to_menu_11 0001  
             ?_change_state_to_menu_12 0001               ?_change_state_to_menu_22 0001  
                              UI@F3250 014D               ?_change_state_to_menu_23 0001  
                    __end_of_SpeedTest 51CC                         ?i2_EEPROM_read 0001  
             ?_change_state_to_logs_11 0001               ?_change_state_to_logs_12 0001  
             ?_change_state_to_logs_22 0001               ?_change_state_to_logs_23 0001  
             ?_change_state_to_logs_33 0001               ?_change_state_to_logs_34 0001  
                  __size_of_BothServos 03EE                      printRTC@RTC_month 00BC  
                              ?___ftge 0092                                _ID$1141 009E  
                              _ID$1154 00A0                                _ID$1149 009F  
                         ?i2_lcdNibble 0001                                UI@i_413 00C9  
                              UI@i_440 00CF                                UI@i_416 00CA  
                              UI@i_417 00CB                                UI@i_451 00D4  
                              UI@i_443 00D0                                UI@i_435 00CC  
                              UI@i_452 00D5                                UI@i_444 00D1  
                              UI@i_436 00CD                                UI@i_447 00D2  
                              UI@i_439 00CE                                UI@i_448 00D3  
                     ??_updateArmState 0001                         ?_initSortTimer 0001  
                              ?___wmul 0080                                ?_getMAG 0001  
                              ?_getRTC 0001                                ?_initUI 0001  
                              ?_readIR 0082                                ?_logRun 0001  
             updateServoPosition@timer 0082                                UI@month 00D6  
                            ?___awtoft 008E                              ?___ftpack 0080  
                          ?_PortTestDC 0001                                ?_printf 008E  
                              _UI$2434 00C6                                ?_strcpy 0080  
                      _pan_servo_state 006B                             ??i2___wmul 0005  
                           ??i2_getRTC 0004                                i2l10010 374A  
                              i2l10002 372E                                i2l10014 3758  
                              i2l10006 373C                                i2l10024 377C  
                              i2l11000 3EC0                                i2l11010 37BC  
                              i2l10018 376E                                i2l11002 3FA4  
                              i2l10204 2C10                                i2l11012 37D8  
                              i2l11004 3FB4                                i2l10214 2C7A  
                              i2l10310 3E74                                i2l10302 3E4A  
                              i2l10240 2D98                                i2l10208 2C20  
                              i2l11016 3ACC                                i2l11008 379A  
                              i2l10320 3ED2                                i2l10226 2D48  
                              i2l11018 3AE8                                i2l10330 3F10  
                              i2l10324 3EEA                                i2l10308 3E60  
                              i2l10316 3E7E                                i2l10500 3D22  
                              i2l10270 2EAC                                i2l10262 2E40  
                              i2l10350 3F8C                                i2l10318 3EC8  
                              i2l10248 2DCE                                i2l10336 3F36  
                              i2l10290 3E14                                i2l10522 3D6C  
                              i2l10442 3C78                                i2l10268 2EA6  
                              i2l10380 595C                                i2l10516 3D52  
                              i2l10444 3C7C                                i2l10452 3C90  
                              i2l10382 5962                                i2l10294 3E2A  
                              i2l10526 3D72                                i2l10454 3CA8  
                              i2l10296 3E34                                i2l10472 3CCE  
                              i2l10448 3C88                                i2l10386 5968  
                              i2l10458 3CB2                                i2l10548 3DB8  
                              i2l10494 3D14                                i2l10994 3EA2  
                              i2l10996 3EAC                                i2l10998 3EB6  
                            ?_delay_ms 0001                         PlatformTest@on 00B5  
                           ??i2_printf 0019                             ??i2_strcpy 0005  
                            ?_dispLogs 0012                                _SSPCON1 000FC6  
                              _SSPCON2 000FC5                                _SSPSTAT 000FC7  
                              _RTCflag 00E4                              ?_readCOND 0001  
                           _initEEPROM 5EFC                                i2_putch 5F6E  
                            ?_initTime 0080                        _f_loadingNewCan 00EC  
                      i2printRTC@month 003D                  __size_of_Distribution 00E2  
          __size_ofi2_I2C_Master_Start 0008                      __end_of_lcdNibble 550A  
                              _Loading 173A            __size_ofi2_I2C_Master_Write 000A  
                     EEPROM_write@data 00AD                                __Hparam 0000  
                              __Lparam 0000     __size_ofi2_change_state_to_menu_12 0030  
   __size_ofi2_change_state_to_menu_22 0030                              ?_printRTC 0001  
                      __size_of___ftge 00C8                                ___awdiv 4CD8  
                              ___awmod 4EFC                             _initServos 52CC  
                              ___lldiv 4D96                        __size_of___wmul 0036  
                      __size_of_getMAG 0032                                ___lwdiv 5344  
                              ___lwmod 55D6                        __size_of_getRTC 0086  
                      printSortTimer@i 0049                              _CMCONbits 000FB4  
                    retrieveLog@logNum 0007                           logRun@byte11 00B6  
                         ?_BlockerTest 0001                        __size_of_initUI 0030  
                      __size_of_readIR 0098                                __pcinit 57A0  
                           ??___awtoft 0091                   i2EEPROM_read@address 0001  
                      __size_of_logRun 0144                             ??___ftpack 0085  
                         logRun@byte_i 00B5                                __ramtop 1000  
                       _initGlobalVars 4A74                                _lcdInst 5F5E  
                              _handler 0008                                __ptext0 4B48  
                              __ptext1 5E4A                                __ptext2 173A  
                              __ptext3 4E52                                __ptext4 4A74  
                              __ptext5 5A68                                __ptext6 51CC  
                              __ptext7 1192                                __ptext8 4F9E  
                              __ptext9 57EE                        __size_of_printf 0438  
                              _readADC 5D34                        __size_of_strcpy 0036  
                              _initLCD 5886                                _cur_can 012D  
                              _loadRTC 5036                                _readMAG 583A  
                              _dpowers FAB8                     actuatorTest@i_1760 00B2  
                   actuatorTest@i_1761 00B3                     actuatorTest@i_1770 00B9  
                   actuatorTest@i_1754 00AE                     actuatorTest@i_1763 00B4  
                   actuatorTest@i_1755 00AF                     actuatorTest@i_1747 00AD  
                         __size_of_arm 00FE                     actuatorTest@i_1780 00BF  
                   actuatorTest@i_1764 00B5                     actuatorTest@i_1773 00BA  
                   actuatorTest@i_1757 00B0                     actuatorTest@i_1774 00BB  
                   actuatorTest@i_1766 00B6                     actuatorTest@i_1758 00B1  
                   actuatorTest@i_1783 00C0                     actuatorTest@i_1767 00B7  
                   actuatorTest@i_1784 00C1                     actuatorTest@i_1776 00BC  
                   actuatorTest@i_1777 00BD                     actuatorTest@i_1769 00B8  
                   actuatorTest@i_1786 00C2                     actuatorTest@i_1787 00C3  
                   actuatorTest@i_1779 00BE                                _isdigit 5D60  
                     ___awmod@dividend 0080                                getRTC@i 0083  
                 __size_of_retrieveLog 0126                     _motor_toggle_count 0149  
                         ??i2_delay_ms 0001                             ??_delay_ms 0080  
             __size_of_I2C_Master_Init 0060               __size_of_I2C_Master_Read 002E  
                        _log_startTime 0100               __size_of_I2C_Master_Wait 0014  
             __size_of_I2C_Master_Stop 0008                             ??_dispLogs 0014  
                         _Distribution 47E6                         __pintcode_body 3C0C  
                 PlatformTest@res_1799 00AF                   end_of_initialization 57E4  
                           ??_readCOND 0082                                logRun@i 00B7  
                           ??_initTime 0086                        ??i2_EEPROM_read 0003  
                              int_func 3C0C                    i2___wmul@multiplier 0001  
                            i2u1021_40 2DCA                              i2u1020_48 2DA4  
                        ??_EEPROM_read 0082                              i2u1030_48 2E68  
                            i2u1023_40 2DF4                              i2u1015_40 2D5E  
                  __size_of_PortTestDC 00D6                              i2u1025_40 2E1A  
                            i2u1024_48 2DF6                              i2u1019_40 2DA2  
                            i2u1220_47 5ED4                              i2u1029_40 2E66  
                            i2u1215_47 3A64                              i2u1216_47 570E  
                            i2u1217_47 5718                              i2u1218_47 573A  
                            i2u1219_47 5744              __size_of_I2C_Master_Start 0008  
            __size_of_I2C_Master_Write 000A                        ___lldiv@divisor 0084  
                      ___lldiv@counter 008C                        ??_initSortTimer 0085  
                              printf@c 00A8                           ??i2_printRTC 002A  
                              printf@f 008E                             ??_printRTC 00AB  
                     I2C_Master_Init@c 008D                       I2C_Master_Read@a 0081  
                              postdec1 000FE5                                postdec2 000FDD  
                              postinc0 000FEE                                postinc2 000FDE  
                   __end_ofi2_delay_ms 5EE4                 __end_of_initGlobalVars 4B48  
                           _sensorTest 24F4                             _servoTimes 005B  
                            _PORTAbits 000F80                              _PORTBbits 000F81  
                 __end_of_inputHandler 3C0C                           ??_BothServos 00AB  
                __end_of_machineConfig 55D6                   __end_of_PlatformTest 3260  
                           _updateMenu 352A                      i2_I2C_Master_Read 5E00  
                            _IR_signal 00E0                      i2_I2C_Master_Wait 5F3C  
                    i2_I2C_Master_Stop 5FB2                              i2___awmod 542E  
                    i2___lwdiv@divisor 0008                        _log_count_total 0145  
                       _PortTestPusher 5698                              i2___lwdiv 574E  
                            i2___lwmod 5910                      i2___lwdiv@counter 000C  
                   ?i2_I2C_Master_Read 0001                     ?i2_I2C_Master_Wait 0001  
                   __end_ofi2_printRTC 3A20                     ?i2_I2C_Master_Stop 0001  
                        actuatorTest@i 00C4           ??_change_state_to_menu_start 00C4  
                          ?_initEEPROM 0001                              i2_lcdInst 5F7A  
                        Loading@i_1125 00B6                          Loading@i_1134 00B8  
                        Loading@i_1136 00BA                          Loading@i_1137 00BC  
                        Loading@i_1139 00BE                             _total_time 00FA  
                          printf@width 00A9                   __size_of_stopSignals 001C  
                  ??i2_I2C_Master_Read 0002                              i2_isdigit 5E8E  
                  ??i2_I2C_Master_Wait 0001                    ??i2_I2C_Master_Stop 0002  
                            i2getRTC@i 0004                     __end_of_BothServos 24F4  
                  __end_of_EEPROM_read 5EFC                            ?_initServos 0001  
                      ?_initGlobalVars 0001                         __end_of___ftge 4CD8  
                       __end_of___wmul 5A68                         __end_of_getMAG 5A9A  
                       __end_of_getRTC 5148                   __size_ofi2_lcdNibble 005A  
                       _timer2_counter 0073                          EEPROM_write@i 00AF  
                        i2lcdInst@data 0003                         __end_of_initUI 5AFC  
                       __end_of_readIR 5036                         __end_of_logRun 42C8  
                     i2___wmul@product 0005                         __end_of_printf 2106  
                         i2printf@flag 0026                         __end_of_strcpy 5A32  
            __end_ofi2_I2C_Master_Read 5E26              __end_ofi2_I2C_Master_Wait 5F4E  
                         i2printf@prec 001D                    start_initialization 57A0  
            __end_ofi2_I2C_Master_Stop 5FBA                             readMAG@res 0084  
                    __size_ofi2___wmul 0026                        _count_can_w_lab 0127  
          ?_change_state_to_menu_start 0001                      __size_ofi2_getRTC 0072  
               __end_of_PortTestPusher 56F4                            __end_of_arm 46FE  
                            i2printf@c 0027                              i2printf@f 000D  
                   EEPROM_write@i_1413 00B0                  i2I2C_Master_Read@temp 0003  
                           ?i2___awmod 0001                   BlockerTest@cond_flag 00B3  
                           ?i2___lwdiv 0006                             ?i2___lwmod 0001  
                    __size_ofi2_printf 036E                      __size_ofi2_strcpy 0032  
                    ??_I2C_Master_Init 0091                      ??_I2C_Master_Read 0081  
                    ??_I2C_Master_Wait 0080                             ?i2_lcdInst 0001  
                    ??_I2C_Master_Stop 0081                       __CFG_OSC$INTIO67 000000  
                           ?i2_isdigit 0001                             initTime@DD 0083  
                           initTime@MM 0084                             initTime@YY 0085  
                      retrieveLog@addr 0010                             logRun@addr 00B9  
                             ??___ftge 0098                              _SpeedTest 5148  
                             ??___wmul 0084                               ??_getMAG 0086  
                             ??_getRTC 0083                 __size_of_algorithmTest 00D6  
                          ?_sensorTest 0001                            __pdataBANK1 014D  
                     __CFG_LPT1OSC$OFF 000000                               ??_initUI 00C4  
                             ??_readIR 0084                               ??_logRun 00B1  
                             ID@i_1153 00A5                               ID@i_1155 00A7  
                             ID@i_1156 00B2                               ID@i_1148 00A3  
                         ??_PortTestDC 00AB                 printSortTimer@timeDiff 0045  
     __size_of_change_state_to_menu_11 0030       __size_of_change_state_to_menu_12 0038  
     __size_of_change_state_to_menu_22 0038       __size_of_change_state_to_menu_23 0030  
                             ??_printf 009A       __size_of_change_state_to_logs_11 0030  
     __size_of_change_state_to_logs_12 0030       __size_of_change_state_to_logs_22 0030  
     __size_of_change_state_to_logs_23 002E       __size_of_change_state_to_logs_33 0030  
     __size_of_change_state_to_logs_34 0030                               ??_strcpy 0084  
                  __size_of_initEEPROM 0016                   __size_of_BlockerTest 01C6  
                  _printSortTimer$2574 0043                      __size_of___awtoft 0044  
                    __size_of___ftpack 010C                            __pbssCOMRAM 005B  
         __size_of_updateServoPosition 007E                            ?_updateMenu 0001  
                        __pcstackBANK0 0080                        ?_PortTestPusher 0001  
              __size_of_printSortTimer 0346                      i2___lwmod@divisor 0003  
                    i2___lwmod@counter 0005                           _isdigit$2072 0081  
                    __size_of_delay_ms 0028                         initSortTimer@i 0088  
                    printSortTimer@min 003F                      printSortTimer@sec 0041  
                  __size_of_initServos 0078                      __size_of_dispLogs 0024  
                     printRTC@INT_time 00AE                       _tilt_servo_state 0071  
                         i2strcpy@from 0003                               ?i2_putch 0001  
                      _count_pop_w_tab 012B                      __size_of_readCOND 004C  
                          _EEPROM_read 5EE4                       _I2C_Master_Start 5FAA  
                   __end_of_PortTestDC 4A74                              _f_lastCan 00EA  
                             ?_Loading 0001                    i2I2C_Master_Write@d 0002  
                     _I2C_Master_Write 5F86                      __size_of_initTime 0022  
                i2_updateServoPosition 550A                       ___lwdiv@dividend 0080  
                    __CFG_CCP2MX$PORTC 000000                              __pintcode 0008  
                           ?_SpeedTest 0001                          __pmediumconst FAA6  
                            _lcdNibble 549E                  __size_of_inputHandler 01EC  
                             ?___awdiv 0086                              __ptext100 5F3C  
                            __ptext101 5EC8                              __ptext102 542E  
                             ?___awmod 0080                               ?___lldiv 0080  
                       _sensor_outputs 00DA                               ?___lwdiv 0080  
                             ?___lwmod 0087                  __size_of_PlatformTest 0316  
                    __size_of_printRTC 02CA                               ?_lcdInst 0001  
                             ?_handler 0001                               ?_readADC 0001  
                             ?_initLCD 0001                               ?_loadRTC 0001  
                             ?_readMAG 0001                               ?_isdigit 0001  
           __size_ofi2_I2C_Master_Read 0026             __size_ofi2_I2C_Master_Wait 0012  
           __size_ofi2_I2C_Master_Stop 0008                              _firstboot 013D  
                            _cur_state 00E6                       ___lwdiv@quotient 0084  
                       __size_of_getIR 0082                            ??i2___awmod 0005  
                        _algorithmTest 48C8                            ??i2___lwdiv 000A  
                          _COND_signal 00DE                            ??i2___lwmod 0005  
                       __size_of_putch 0010                            __size_of_ID 05A8  
                            getIR@port 0088                            __size_of_UI 08C8  
                  __size_of_sensorTest 03A2             __end_ofi2_I2C_Master_Start 5FC2  
           __end_ofi2_I2C_Master_Write 5F9A                            ??i2_lcdInst 0003  
                       ___wmul@product 0084                               _LATAbits 000F89  
                             _LATBbits 000F8A                               _LATCbits 000F8B  
                             _LATDbits 000F8C                           _inputHandler 3A20  
                          ??i2_isdigit 0001                           _PlatformTest 2F4A  
                         BlockerTest@i 00AD                               _PIR2bits 000FA1  
                             i2u612_40 2A1C                               i2u612_47 2A12  
                             i2u543_40 5E1E                        PlatformTest@res 00AD  
                             i2u608_40 29BC                               i2u608_47 29B2  
                             i2u665_40 3878                    __size_of_updateMenu 02C0  
                       _log_completion 00F0                       __CFG_WDTPS$32768 000000  
                           ?_lcdNibble 0001                              _was_low_1 0077  
                            _was_low_2 0079                              _was_low_3 007B  
                        ??_retrieveLog 0009                             _ADCON0bits 000FC2  
                    ___wmul@multiplier 0080                              _startTime 010E  
                             i2___wmul 5DDA                          lcdNibble@data 0081  
                             i2_getRTC 53BC                             printf@flag 00A7  
                        lcdNibble@temp 0080                             printf@prec 009E  
              __size_of_updateArmState 003A                               Loading@i 00C0  
                             Loading@j 00C2                               i2_printf 2896  
                             i2_strcpy 5A9A                         ?_algorithmTest 0001  
                  I2C_Master_Read@temp 0082                              copy_data0 57B4  
                   i2___awmod@dividend 0001                           ??_initEEPROM 00B1  
                            readIR@res 0086                 ?i2_updateServoPosition 0001  
                     __size_ofi2_putch 000C                             _EECON1bits 000FA6  
                __end_ofi2_EEPROM_read 5F28                            _count_total 00FE  
               i2delay_ms@milliseconds 0002                       ??_initGlobalVars 0080  
                             __Hrparam 0000                       __size_of_Loading 0594  
                            initTime@h 0081                              initTime@m 0080  
                            initTime@s 0086                              initTime@w 0082  
                             __Lrparam 0000                     __CFG_BOREN$SBORDIS 000000  
                            logRun@num 00B1                            ??_SpeedTest 00AB  
                __end_of_initSortTimer 4EFC                           ??_initServos 0088  
                     __size_of___awdiv 00BE                       __size_of___awmod 00A2  
              _change_state_to_menu_11 5B8C             ?i2_change_state_to_menu_12 0001  
              _change_state_to_menu_12 59C4             ?i2_change_state_to_menu_22 0001  
              _change_state_to_menu_22 598C                _change_state_to_menu_23 5B5C  
                i2___wmul@multiplicand 0003                       __size_of___lldiv 00BC  
                     __size_of___lwdiv 0078                _change_state_to_logs_11 5C7C  
              _change_state_to_logs_12 5C4C                _change_state_to_logs_22 5C1C  
              _change_state_to_logs_23 5CDA                _change_state_to_logs_33 5BEC  
              _change_state_to_logs_34 5BBC                       __size_of___lwmod 0062  
                       readADC@channel 0081                               ___awtoft 58CC  
                             ___ftpack 43EE                     i2I2C_Master_Read@a 0002  
                     __size_of_lcdInst 0010                       __size_of_handler 3DEE  
                   __end_of_initEEPROM 5F12                        _I2C_Master_Init 5638  
                     __size_of_readADC 002C                        _I2C_Master_Read 5CAC  
                     __size_of_initLCD 0046                           _f_ID_receive 0131  
                     __size_of_loadRTC 008C                       __size_of_readMAG 004C  
                      _I2C_Master_Wait 5F28                        _I2C_Master_Stop 5FA2  
                     __size_of_isdigit 002A                               _delay_ms 5D8A  
                       _printSortTimer 2C04                        ___lwdiv@divisor 0082  
                      ___lwdiv@counter 0086                    __end_of_retrieveLog 43EE  
                             __ptext10 5D8A                               __ptext11 4C10  
                             __ptext20 4D96                               __ptext12 58CC  
                             __ptext21 5D08                               __ptext13 43EE  
                             __ptext30 50C2                               __ptext22 5E6C  
                             __ptext14 47E6                               __ptext31 5F86  
                             __ptext23 5886                               __ptext15 5572  
                             __ptext40 44FA                               __ptext32 5FA2  
                             __ptext24 5EFC                               __ptext16 4184  
                             __ptext41 24F4                               __ptext33 5FAA  
                             __ptext25 46FE                               __ptext17 5ACC  
                             __ptext50 2106                               __ptext42 583A  
                             __ptext34 5CAC                               __ptext26 5EE4  
                             __ptext18 5036                               __ptext51 5EAC  
                             __ptext43 4600                               __ptext35 5F28  
                             __ptext27 0012                               __ptext19 5638  
                             __ptext60 55D6                               __ptext52 52CC  
                             __ptext44 48C8                               __ptext36 598C  
                             __ptext28 3260                               __ptext61 5344  
                             __ptext53 524E                               __ptext45 08DA  
                             __ptext37 59C4                               __ptext29 59FC  
                             __ptext70 5A9A                               __ptext62 5F5E  
                             __ptext54 3FBE                               __ptext46 5148  
                             __ptext38 4EFC                               __ptext71 3A20  
                             __ptext63 549E                               __ptext55 5D34  
                             __ptext47 5698                               __ptext39 4CD8  
                             __ptext80 5C4C                               __ptext72 5AFC  
                             __ptext56 1CCE                               __ptext48 499E  
                             __ptext81 5C7C                               __ptext73 5B2C  
                             __ptext65 3DF6                               __ptext57 5F4E  
                             __ptext49 2F4A                               __ptext90 5DDA  
                             __ptext82 5E26                               __ptext74 5B5C  
                             __ptext66 550A                               __ptext58 5D60  
                             __ptext91 5910                               __ptext83 42C8  
                             __ptext75 5B8C                               __ptext67 352A  
                             __ptext59 5A32                               __ptext92 574E  
                             __ptext84 5F12                               __ptext76 5BBC  
                             __ptext68 5DB2                               __ptext93 5F7A  
                             __ptext85 5952                               __ptext77 5BEC  
                             __ptext69 37EA                               __ptext94 56F4  
                             __ptext86 2C04                               __ptext78 5CDA  
                             __ptext95 53BC                               __ptext87 2896  
                             __ptext79 5C1C                               __ptext96 5F90  
                             __ptext88 5F6E                               __ptext97 5FB2  
                             __ptext89 5E8E                               __ptext98 5FBA  
                             __ptext99 5E00                               _dispLogs 5E26  
                        ?_actuatorTest 0001                     PlatformTest@i_1803 00B3  
                             _readCOND 57EE                          ??_stopSignals 0080  
                           strcpy@from 0082                         i2_isdigit$2072 0002  
                   __end_of_initServos 5344                          __size_of_Test 0106  
                        ?_EEPROM_write 00AB                               _initTime 5E6C  
                        __size_of_main 00C8                          __size_of_sort 0022  
       ??i2_change_state_to_menu_start 0043                               _logstate 00F8  
                  _updateServoPosition 524E                 __size_of_machineConfig 0064  
                        ??i2_lcdNibble 0001                               _printRTC 3260  
                          ??_lcdNibble 0080                              printRTC@i 00C2  
                             int$flags 007E                           ??_sensorTest 00AB  
                       _log_total_time 00F6                     _f_can_coming_to_ID 0133  
                            printf@len 00A3                              printf@val 00A5  
    __end_ofi2_change_state_to_menu_12 5B5C      __end_ofi2_change_state_to_menu_22 5B2C  
                     ??_PortTestPusher 00AB                               loadRTC@i 0096  
                    i2___awmod@divisor 0003                 __end_of_printSortTimer 2F4A  
                            putch@data 0082                      i2___awmod@counter 0005  
             __end_of_I2C_Master_Start 5FB2                            _OSCTUNEbits 000F9B  
             __end_of_I2C_Master_Write 5F90                             _INTCONbits 000FF2  
                 ?_updateServoPosition 0080                           ??_updateMenu 0043  
                      ??_algorithmTest 00AB                             _MAG_signal 00E2  
                             isdigit@c 0082                          sensorTest@res 00AD  
                       ??_actuatorTest 00AB                     sensorTest@res_1724 00AF  
                  _servo_timer_counter 006D                               intlevel2 0000  
                       ??_EEPROM_write 00AE                         BlockerTest@res 00AF  
                   __end_of_sensorTest 2896                       ___lwmod@dividend 0087  
                     ___lldiv@dividend 0080                           ?_EEPROM_read 0080  
                  __end_of_stopSignals 5EC8              ??_change_state_to_menu_11 002A  
            ??_change_state_to_menu_12 00AB              ??_change_state_to_menu_22 00AB  
            ??_change_state_to_menu_23 002A              ??_change_state_to_logs_11 002A  
            ??_change_state_to_logs_12 002A              ??_change_state_to_logs_22 002A  
            ??_change_state_to_logs_23 002A              ??_change_state_to_logs_33 002A  
            ??_change_state_to_logs_34 002A                               printf@ap 00A1  
                             printf@cp 009F                     __end_of_updateMenu 37EA  
              __end_of_I2C_Master_Init 5698                __end_of_I2C_Master_Read 5CDA  
              __end_of_I2C_Master_Wait 5F3C                          ??_BlockerTest 00AB  
              __end_of_I2C_Master_Stop 5FAA                            lcdInst@data 0082  
                        printRTC@F3240 0151                           retrieveLog@i 000E  
                          _retrieveLog 42C8                    __end_ofi2_lcdNibble 574E  
                ??_updateServoPosition 0084                        ?_printSortTimer 0001  
                   _servo_timer_target 006F                       ___lldiv@quotient 0088  
                    I2C_Master_Write@d 0081                        ___lwmod@divisor 0089  
                       _updateArmState 5952                      _f_can_distributed 0137  
                             strcpy@cp 0084                               strcpy@to 0080  
                        _machineConfig 5572                        ___lwmod@counter 008B  
                    _updateServoStates 3DF6                          printRTC@month 00BE  
                        ?_Distribution 0001                     ?_updateServoStates 0001  
                        _machine_state 00FC                          dispLogs@myLog 0012  
                       _f_arm_position 00E8                    ??_updateServoStates 0009  
                   i2printRTC@INT_time 002D  
