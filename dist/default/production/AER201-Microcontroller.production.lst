

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Fri Mar 31 16:06:13 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,delta=1
    73                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    74                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1
    94                           	psect	text79,global,reloc=2,class=CODE,delta=1
    95                           	psect	text80,global,reloc=2,class=CODE,delta=1
    96                           	psect	text81,global,reloc=2,class=CODE,delta=1
    97                           	psect	text82,global,reloc=2,class=CODE,delta=1
    98                           	psect	text83,global,reloc=2,class=CODE,delta=1
    99                           	psect	text84,global,reloc=2,class=CODE,delta=1
   100                           	psect	text85,global,reloc=2,class=CODE,delta=1
   101                           	psect	text86,global,reloc=2,class=CODE,delta=1
   102                           	psect	text87,global,reloc=2,class=CODE,delta=1
   103                           	psect	text88,global,reloc=2,class=CODE,delta=1
   104                           	psect	text89,global,reloc=2,class=CODE,delta=1
   105                           	psect	text90,global,reloc=2,class=CODE,delta=1
   106                           	psect	text91,global,reloc=2,class=CODE,delta=1
   107                           	psect	text92,global,reloc=2,class=CODE,delta=1
   108                           	psect	text93,global,reloc=2,class=CODE,delta=1
   109                           	psect	text94,global,reloc=2,class=CODE,delta=1
   110                           	psect	text95,global,reloc=2,class=CODE,delta=1
   111                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   112                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   113                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   114  0000                     
   115                           ; Version 1.40
   116                           ; Generated 01/12/2016 GMT
   117                           ; 
   118                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
   119                           ; All rights reserved.
   120                           ; 
   121                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   122                           ; 
   123                           ; Redistribution and use in source and binary forms, with or without modification, are
   124                           ; permitted provided that the following conditions are met:
   125                           ; 
   126                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   127                           ;        conditions and the following disclaimer.
   128                           ; 
   129                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   130                           ;        of conditions and the following disclaimer in the documentation and/or other
   131                           ;        materials provided with the distribution.
   132                           ; 
   133                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   134                           ;        software without specific prior written permission.
   135                           ; 
   136                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   137                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   138                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   139                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   140                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   141                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   142                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   143                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   144                           ; 
   145                           ; 
   146                           ; Code-generator required, PIC18F4620 Definitions
   147                           ; 
   148                           ; SFR Addresses
   149  0000                     
   150                           	psect	idataBANK1
   151  0052CC                     __pidataBANK1:
   152                           	opt stack 0
   153                           
   154                           ;initializer for UI@F3235
   155  0052CC  4D                 	db	77
   156  0052CD  4D                 	db	77
   157  0052CE  4D                 	db	77
   158  0052CF  00                 	db	0
   159                           
   160                           ;initializer for printRTC@F3226
   161  0052D0  4D                 	db	77
   162  0052D1  4D                 	db	77
   163  0052D2  4D                 	db	77
   164  0052D3  00                 	db	0
   165                           
   166                           	psect	mediumconst
   167  00FAEE                     __pmediumconst:
   168                           	opt stack 0
   169  00FAEE  00                 	db	0
   170  00FAEF                     _keys:
   171                           	opt stack 0
   172  00FAEF  31                 	db	49
   173  00FAF0  32                 	db	50
   174  00FAF1  33                 	db	51
   175  00FAF2  41                 	db	65
   176  00FAF3  34                 	db	52
   177  00FAF4  35                 	db	53
   178  00FAF5  36                 	db	54
   179  00FAF6  42                 	db	66
   180  00FAF7  37                 	db	55
   181  00FAF8  38                 	db	56
   182  00FAF9  39                 	db	57
   183  00FAFA  43                 	db	67
   184  00FAFB  2A                 	db	42
   185  00FAFC  30                 	db	48
   186  00FAFD  23                 	db	35
   187  00FAFE  44                 	db	68
   188  00FAFF  00                 	db	0
   189  00FB00                     __end_of_keys:
   190                           	opt stack 0
   191  00FB00                     _dpowers:
   192                           	opt stack 0
   193  00FB00  0001               	dw	1
   194  00FB02  000A               	dw	10
   195  00FB04  0064               	dw	100
   196  00FB06  03E8               	dw	1000
   197  00FB08  2710               	dw	10000
   198  00FB0A                     __end_of_dpowers:
   199                           	opt stack 0
   200  0000                     _ADCON0	set	4034
   201  0000                     _ADCON0bits	set	4034
   202  0000                     _ADCON1	set	4033
   203  0000                     _ADCON2	set	4032
   204  0000                     _ADRESH	set	4036
   205  0000                     _ADRESL	set	4035
   206  0000                     _CMCONbits	set	4020
   207  0000                     _CVRCON	set	4021
   208  0000                     _EEADR	set	4009
   209  0000                     _EEADRH	set	4010
   210  0000                     _EECON1bits	set	4006
   211  0000                     _EECON2	set	4007
   212  0000                     _EEDATA	set	4008
   213  0000                     _INTCONbits	set	4082
   214  0000                     _LATA	set	3977
   215  0000                     _LATAbits	set	3977
   216  0000                     _LATB	set	3978
   217  0000                     _LATBbits	set	3978
   218  0000                     _LATC	set	3979
   219  0000                     _LATCbits	set	3979
   220  0000                     _LATD	set	3980
   221  0000                     _LATDbits	set	3980
   222  0000                     _LATE	set	3981
   223  0000                     _LATEbits	set	3981
   224  0000                     _OSCCON	set	4051
   225  0000                     _OSCTUNEbits	set	3995
   226  0000                     _PIR2bits	set	4001
   227  0000                     _PORTAbits	set	3968
   228  0000                     _PORTB	set	3969
   229  0000                     _PORTBbits	set	3969
   230  0000                     _SSPADD	set	4040
   231  0000                     _SSPBUF	set	4041
   232  0000                     _SSPCON1	set	4038
   233  0000                     _SSPCON2	set	4037
   234  0000                     _SSPSTAT	set	4039
   235  0000                     _T0CON	set	4053
   236  0000                     _T1CON	set	4045
   237  0000                     _T3CON	set	4017
   238  0000                     _TMR0H	set	4055
   239  0000                     _TMR0L	set	4054
   240  0000                     _TMR1H	set	4047
   241  0000                     _TMR1L	set	4046
   242  0000                     _TMR3H	set	4019
   243  0000                     _TMR3L	set	4018
   244  0000                     _TRISA	set	3986
   245  0000                     _TRISB	set	3987
   246  0000                     _TRISC	set	3988
   247  0000                     _TRISD	set	3989
   248  0000                     _TRISE	set	3990
   249  0000                     _ACKDT	set	32301
   250  0000                     _ACKEN	set	32300
   251  0000                     _ADIE	set	31982
   252  0000                     _INT1IE	set	32643
   253  0000                     _INT1IF	set	32640
   254  0000                     _PEIE	set	32662
   255  0000                     _PEN	set	32298
   256  0000                     _RCEN	set	32299
   257  0000                     _RSEN	set	32297
   258  0000                     _SEN	set	32296
   259  0000                     _TMR0IE	set	32661
   260  0000                     _TMR0IF	set	32658
   261  0000                     _TMR0ON	set	32431
   262  0000                     _TMR1IE	set	31976
   263  0000                     _TMR1IF	set	31984
   264  0000                     _TMR1ON	set	32360
   265  0000                     _TMR2IE	set	31977
   266  0000                     _TMR3IE	set	32001
   267  0000                     _TMR3IF	set	32009
   268  0000                     _TMR3ON	set	32136
   269  0000                     _TRISC3	set	31907
   270  0000                     _TRISC4	set	31908
   271  0000                     _nRBPU	set	32655
   272  00FB0A                     STR_21:
   273  00FB0A  25                 	db	37
   274  00FB0B  30                 	db	48	;'0'
   275  00FB0C  32                 	db	50	;'2'
   276  00FB0D  64                 	db	100	;'d'
   277  00FB0E  25                 	db	37
   278  00FB0F  73                 	db	115	;'s'
   279  00FB10  20                 	db	32
   280  00FB11  7C                 	db	124
   281  00FB12  20                 	db	32
   282  00FB13  25                 	db	37
   283  00FB14  30                 	db	48	;'0'
   284  00FB15  32                 	db	50	;'2'
   285  00FB16  64                 	db	100	;'d'
   286  00FB17  3A                 	db	58	;':'
   287  00FB18  25                 	db	37
   288  00FB19  30                 	db	48	;'0'
   289  00FB1A  32                 	db	50	;'2'
   290  00FB1B  64                 	db	100	;'d'
   291  00FB1C  3A                 	db	58	;':'
   292  00FB1D  25                 	db	37
   293  00FB1E  30                 	db	48	;'0'
   294  00FB1F  32                 	db	50	;'2'
   295  00FB20  64                 	db	100	;'d'
   296  00FB21  00                 	db	0
   297  00FB22                     STR_66:
   298  00FB22  28                 	db	40
   299  00FB23  64                 	db	100	;'d'
   300  00FB24  61                 	db	97	;'a'
   301  00FB25  74                 	db	116	;'t'
   302  00FB26  61                 	db	97	;'a'
   303  00FB27  3A                 	db	58	;':'
   304  00FB28  20                 	db	32
   305  00FB29  25                 	db	37
   306  00FB2A  75                 	db	117	;'u'
   307  00FB2B  2C                 	db	44
   308  00FB2C  20                 	db	32
   309  00FB2D  61                 	db	97	;'a'
   310  00FB2E  64                 	db	100	;'d'
   311  00FB2F  64                 	db	100	;'d'
   312  00FB30  72                 	db	114	;'r'
   313  00FB31  3A                 	db	58	;':'
   314  00FB32  20                 	db	32
   315  00FB33  25                 	db	37
   316  00FB34  75                 	db	117	;'u'
   317  00FB35  29                 	db	41
   318  00FB36  00                 	db	0
   319  00FB37                     STR_111:
   320  00FB37  44                 	db	68	;'D'
   321  00FB38  20                 	db	32
   322  00FB39  57                 	db	87	;'W'
   323  00FB3A  49                 	db	73	;'I'
   324  00FB3B  4C                 	db	76	;'L'
   325  00FB3C  4C                 	db	76	;'L'
   326  00FB3D  20                 	db	32
   327  00FB3E  52                 	db	82	;'R'
   328  00FB3F  45                 	db	69	;'E'
   329  00FB40  54                 	db	84	;'T'
   330  00FB41  55                 	db	85	;'U'
   331  00FB42  52                 	db	82	;'R'
   332  00FB43  4E                 	db	78	;'N'
   333  00FB44  20                 	db	32
   334  00FB45  20                 	db	32
   335  00FB46  20                 	db	32
   336  00FB47  20                 	db	32
   337  00FB48  00                 	db	0
   338  00FB49                     STR_112:
   339  00FB49  4F                 	db	79	;'O'
   340  00FB4A  54                 	db	84	;'T'
   341  00FB4B  48                 	db	72	;'H'
   342  00FB4C  45                 	db	69	;'E'
   343  00FB4D  52                 	db	82	;'R'
   344  00FB4E  20                 	db	32
   345  00FB4F  53                 	db	83	;'S'
   346  00FB50  45                 	db	69	;'E'
   347  00FB51  54                 	db	84	;'T'
   348  00FB52  53                 	db	83	;'S'
   349  00FB53  20                 	db	32
   350  00FB54  52                 	db	82	;'R'
   351  00FB55  41                 	db	65	;'A'
   352  00FB56  35                 	db	53	;'5'
   353  00FB57  20                 	db	32
   354  00FB58  20                 	db	32
   355  00FB59  20                 	db	32
   356  00FB5A  00                 	db	0
   357  00FB5B                     STR_120:
   358  00FB5B  53                 	db	83	;'S'
   359  00FB5C  3A                 	db	58	;':'
   360  00FB5D  20                 	db	32
   361  00FB5E  44                 	db	68	;'D'
   362  00FB5F  20                 	db	32
   363  00FB60  57                 	db	87	;'W'
   364  00FB61  49                 	db	73	;'I'
   365  00FB62  4C                 	db	76	;'L'
   366  00FB63  4C                 	db	76	;'L'
   367  00FB64  20                 	db	32
   368  00FB65  52                 	db	82	;'R'
   369  00FB66  45                 	db	69	;'E'
   370  00FB67  54                 	db	84	;'T'
   371  00FB68  55                 	db	85	;'U'
   372  00FB69  52                 	db	82	;'R'
   373  00FB6A  4E                 	db	78	;'N'
   374  00FB6B  20                 	db	32
   375  00FB6C  00                 	db	0
   376  00FB6D                     STR_123:
   377  00FB6D  4F                 	db	79	;'O'
   378  00FB6E  54                 	db	84	;'T'
   379  00FB6F  48                 	db	72	;'H'
   380  00FB70  45                 	db	69	;'E'
   381  00FB71  52                 	db	82	;'R'
   382  00FB72  3A                 	db	58	;':'
   383  00FB73  20                 	db	32
   384  00FB74  43                 	db	67	;'C'
   385  00FB75  41                 	db	65	;'A'
   386  00FB76  4D                 	db	77	;'M'
   387  00FB77  20                 	db	32
   388  00FB78  54                 	db	84	;'T'
   389  00FB79  4F                 	db	79	;'O'
   390  00FB7A  47                 	db	71	;'G'
   391  00FB7B  47                 	db	71	;'G'
   392  00FB7C  4C                 	db	76	;'L'
   393  00FB7D  45                 	db	69	;'E'
   394  00FB7E  00                 	db	0
   395  00FB7F                     STR_122:
   396  00FB7F  44                 	db	68	;'D'
   397  00FB80  3A                 	db	58	;':'
   398  00FB81  20                 	db	32
   399  00FB82  52                 	db	82	;'R'
   400  00FB83  45                 	db	69	;'E'
   401  00FB84  54                 	db	84	;'T'
   402  00FB85  7C                 	db	124
   403  00FB86  32                 	db	50	;'2'
   404  00FB87  3A                 	db	58	;':'
   405  00FB88  20                 	db	32
   406  00FB89  43                 	db	67	;'C'
   407  00FB8A  4F                 	db	79	;'O'
   408  00FB8B  4E                 	db	78	;'N'
   409  00FB8C  44                 	db	68	;'D'
   410  00FB8D  20                 	db	32
   411  00FB8E  25                 	db	37
   412  00FB8F  64                 	db	100	;'d'
   413  00FB90  00                 	db	0
   414  00FB91                     STR_3:
   415  00FB91  2D                 	db	45
   416  00FB92  2D                 	db	45
   417  00FB93  20                 	db	32
   418  00FB94  4C                 	db	76	;'L'
   419  00FB95  4F                 	db	79	;'O'
   420  00FB96  47                 	db	71	;'G'
   421  00FB97  20                 	db	32
   422  00FB98  25                 	db	37
   423  00FB99  32                 	db	50	;'2'
   424  00FB9A  64                 	db	100	;'d'
   425  00FB9B  20                 	db	32
   426  00FB9C  48                 	db	72	;'H'
   427  00FB9D  45                 	db	69	;'E'
   428  00FB9E  52                 	db	82	;'R'
   429  00FB9F  45                 	db	69	;'E'
   430  00FBA0  2D                 	db	45
   431  00FBA1  2D                 	db	45
   432  00FBA2  00                 	db	0
   433  00FBA3                     STR_1:
   434  00FBA3  52                 	db	82	;'R'
   435  00FBA4  45                 	db	69	;'E'
   436  00FBA5  53                 	db	83	;'S'
   437  00FBA6  55                 	db	85	;'U'
   438  00FBA7  4C                 	db	76	;'L'
   439  00FBA8  54                 	db	84	;'T'
   440  00FBA9  53                 	db	83	;'S'
   441  00FBAA  20                 	db	32
   442  00FBAB  49                 	db	73	;'I'
   443  00FBAC  4E                 	db	78	;'N'
   444  00FBAD  20                 	db	32
   445  00FBAE  4C                 	db	76	;'L'
   446  00FBAF  4F                 	db	79	;'O'
   447  00FBB0  47                 	db	71	;'G'
   448  00FBB1  20                 	db	32
   449  00FBB2  25                 	db	37
   450  00FBB3  64                 	db	100	;'d'
   451  00FBB4  00                 	db	0
   452  00FBB5                     STR_102:
   453  00FBB5  4D                 	db	77	;'M'
   454  00FBB6  49                 	db	73	;'I'
   455  00FBB7  44                 	db	68	;'D'
   456  00FBB8  20                 	db	32
   457  00FBB9  2D                 	db	45
   458  00FBBA  2D                 	db	45
   459  00FBBB  20                 	db	32
   460  00FBBC  32                 	db	50	;'2'
   461  00FBBD  73                 	db	115	;'s'
   462  00FBBE  20                 	db	32
   463  00FBBF  20                 	db	32
   464  00FBC0  20                 	db	32
   465  00FBC1  20                 	db	32
   466  00FBC2  20                 	db	32
   467  00FBC3  20                 	db	32
   468  00FBC4  20                 	db	32
   469  00FBC5  00                 	db	0
   470  00FBC6                     STR_105:
   471  00FBC6  44                 	db	68	;'D'
   472  00FBC7  52                 	db	82	;'R'
   473  00FBC8  4F                 	db	79	;'O'
   474  00FBC9  50                 	db	80	;'P'
   475  00FBCA  20                 	db	32
   476  00FBCB  2D                 	db	45
   477  00FBCC  2D                 	db	45
   478  00FBCD  20                 	db	32
   479  00FBCE  32                 	db	50	;'2'
   480  00FBCF  73                 	db	115	;'s'
   481  00FBD0  20                 	db	32
   482  00FBD1  20                 	db	32
   483  00FBD2  20                 	db	32
   484  00FBD3  20                 	db	32
   485  00FBD4  20                 	db	32
   486  00FBD5  20                 	db	32
   487  00FBD6  00                 	db	0
   488  00FBD7                     STR_99:
   489  00FBD7  4C                 	db	76	;'L'
   490  00FBD8  45                 	db	69	;'E'
   491  00FBD9  46                 	db	70	;'F'
   492  00FBDA  54                 	db	84	;'T'
   493  00FBDB  20                 	db	32
   494  00FBDC  2D                 	db	45
   495  00FBDD  2D                 	db	45
   496  00FBDE  20                 	db	32
   497  00FBDF  32                 	db	50	;'2'
   498  00FBE0  73                 	db	115	;'s'
   499  00FBE1  20                 	db	32
   500  00FBE2  20                 	db	32
   501  00FBE3  20                 	db	32
   502  00FBE4  20                 	db	32
   503  00FBE5  20                 	db	32
   504  00FBE6  20                 	db	32
   505  00FBE7  00                 	db	0
   506  00FBE8                     STR_104:
   507  00FBE8  4C                 	db	76	;'L'
   508  00FBE9  45                 	db	69	;'E'
   509  00FBEA  56                 	db	86	;'V'
   510  00FBEB  45                 	db	69	;'E'
   511  00FBEC  4C                 	db	76	;'L'
   512  00FBED  20                 	db	32
   513  00FBEE  2D                 	db	45
   514  00FBEF  2D                 	db	45
   515  00FBF0  20                 	db	32
   516  00FBF1  32                 	db	50	;'2'
   517  00FBF2  73                 	db	115	;'s'
   518  00FBF3  20                 	db	32
   519  00FBF4  20                 	db	32
   520  00FBF5  20                 	db	32
   521  00FBF6  20                 	db	32
   522  00FBF7  20                 	db	32
   523  00FBF8  00                 	db	0
   524  00FBF9                     STR_98:
   525  00FBF9  52                 	db	82	;'R'
   526  00FBFA  49                 	db	73	;'I'
   527  00FBFB  47                 	db	71	;'G'
   528  00FBFC  48                 	db	72	;'H'
   529  00FBFD  54                 	db	84	;'T'
   530  00FBFE  20                 	db	32
   531  00FBFF  2D                 	db	45
   532  00FC00  2D                 	db	45
   533  00FC01  20                 	db	32
   534  00FC02  32                 	db	50	;'2'
   535  00FC03  73                 	db	115	;'s'
   536  00FC04  20                 	db	32
   537  00FC05  20                 	db	32
   538  00FC06  20                 	db	32
   539  00FC07  20                 	db	32
   540  00FC08  20                 	db	32
   541  00FC09  00                 	db	0
   542  00FC0A                     STR_97:
   543  00FC0A  4D                 	db	77	;'M'
   544  00FC0B  49                 	db	73	;'I'
   545  00FC0C  44                 	db	68	;'D'
   546  00FC0D  44                 	db	68	;'D'
   547  00FC0E  4C                 	db	76	;'L'
   548  00FC0F  45                 	db	69	;'E'
   549  00FC10  20                 	db	32
   550  00FC11  2D                 	db	45
   551  00FC12  2D                 	db	45
   552  00FC13  20                 	db	32
   553  00FC14  32                 	db	50	;'2'
   554  00FC15  73                 	db	115	;'s'
   555  00FC16  20                 	db	32
   556  00FC17  20                 	db	32
   557  00FC18  20                 	db	32
   558  00FC19  20                 	db	32
   559  00FC1A  00                 	db	0
   560  00FC1B  44                 	db	68	;'D'
   561  00FC1C  20                 	db	32
   562  00FC1D  57                 	db	87	;'W'
   563  00FC1E  49                 	db	73	;'I'
   564  00FC1F  4C                 	db	76	;'L'
   565  00FC20  4C                 	db	76	;'L'
   566  00FC21  20                 	db	32
   567  00FC22  52                 	db	82	;'R'
   568  00FC23  45                 	db	69	;'E'
   569  00FC24  54                 	db	84	;'T'
   570  00FC25  55                 	db	85	;'U'
   571  00FC26  52                 	db	82	;'R'
   572  00FC27  4E                 	db	78	;'N'
   573  00FC28  20                 	db	32
   574  00FC29  20                 	db	32
   575  00FC2A  20                 	db	32
   576  00FC2B  00                 	db	0
   577  00FC2C                     STR_100:
   578  00FC2C  4D                 	db	77	;'M'
   579  00FC2D  49                 	db	73	;'I'
   580  00FC2E  44                 	db	68	;'D'
   581  00FC2F  2D                 	db	45
   582  00FC30  4C                 	db	76	;'L'
   583  00FC31  45                 	db	69	;'E'
   584  00FC32  46                 	db	70	;'F'
   585  00FC33  54                 	db	84	;'T'
   586  00FC34  20                 	db	32
   587  00FC35  2D                 	db	45
   588  00FC36  2D                 	db	45
   589  00FC37  20                 	db	32
   590  00FC38  32                 	db	50	;'2'
   591  00FC39  73                 	db	115	;'s'
   592  00FC3A  20                 	db	32
   593  00FC3B  20                 	db	32
   594  00FC3C  00                 	db	0
   595  00FC3D                     STR_101:
   596  00FC3D  4D                 	db	77	;'M'
   597  00FC3E  49                 	db	73	;'I'
   598  00FC3F  44                 	db	68	;'D'
   599  00FC40  2D                 	db	45
   600  00FC41  52                 	db	82	;'R'
   601  00FC42  49                 	db	73	;'I'
   602  00FC43  47                 	db	71	;'G'
   603  00FC44  48                 	db	72	;'H'
   604  00FC45  54                 	db	84	;'T'
   605  00FC46  20                 	db	32
   606  00FC47  2D                 	db	45
   607  00FC48  2D                 	db	45
   608  00FC49  20                 	db	32
   609  00FC4A  32                 	db	50	;'2'
   610  00FC4B  73                 	db	115	;'s'
   611  00FC4C  20                 	db	32
   612  00FC4D  00                 	db	0
   613  00FC4E  45                 	db	69	;'E'
   614  00FC4F  4C                 	db	76	;'L'
   615  00FC50  53                 	db	83	;'S'
   616  00FC51  45                 	db	69	;'E'
   617  00FC52  20                 	db	32
   618  00FC53  54                 	db	84	;'T'
   619  00FC54  4F                 	db	79	;'O'
   620  00FC55  47                 	db	71	;'G'
   621  00FC56  47                 	db	71	;'G'
   622  00FC57  4C                 	db	76	;'L'
   623  00FC58  45                 	db	69	;'E'
   624  00FC59  53                 	db	83	;'S'
   625  00FC5A  20                 	db	32
   626  00FC5B  52                 	db	82	;'R'
   627  00FC5C  41                 	db	65	;'A'
   628  00FC5D  35                 	db	53	;'5'
   629  00FC5E  00                 	db	0
   630  00FC5F                     STR_72:
   631  00FC5F  41                 	db	65	;'A'
   632  00FC60  4C                 	db	76	;'L'
   633  00FC61  47                 	db	71	;'G'
   634  00FC62  31                 	db	49	;'1'
   635  00FC63  3A                 	db	58	;':'
   636  00FC64  20                 	db	32
   637  00FC65  39                 	db	57	;'9'
   638  00FC66  20                 	db	32
   639  00FC67  50                 	db	80	;'P'
   640  00FC68  4F                 	db	79	;'O'
   641  00FC69  50                 	db	80	;'P'
   642  00FC6A  4E                 	db	78	;'N'
   643  00FC6B  4F                 	db	79	;'O'
   644  00FC6C  54                 	db	84	;'T'
   645  00FC6D  41                 	db	65	;'A'
   646  00FC6E  42                 	db	66	;'B'
   647  00FC6F  00                 	db	0
   648  00FC70                     STR_92:
   649  00FC70  54                 	db	84	;'T'
   650  00FC71  53                 	db	83	;'S'
   651  00FC72  54                 	db	84	;'T'
   652  00FC73  3A                 	db	58	;':'
   653  00FC74  20                 	db	32
   654  00FC75  43                 	db	67	;'C'
   655  00FC76  4F                 	db	79	;'O'
   656  00FC77  4E                 	db	78	;'N'
   657  00FC78  44                 	db	68	;'D'
   658  00FC79  20                 	db	32
   659  00FC7A  53                 	db	83	;'S'
   660  00FC7B  4F                 	db	79	;'O'
   661  00FC7C  4C                 	db	76	;'L'
   662  00FC7D  4E                 	db	78	;'N'
   663  00FC7E  27                 	db	39
   664  00FC7F  44                 	db	68	;'D'
   665  00FC80  00                 	db	0
   666  00FC81                     STR_94:
   667  00FC81  54                 	db	84	;'T'
   668  00FC82  53                 	db	83	;'S'
   669  00FC83  54                 	db	84	;'T'
   670  00FC84  3A                 	db	58	;':'
   671  00FC85  20                 	db	32
   672  00FC86  50                 	db	80	;'P'
   673  00FC87  55                 	db	85	;'U'
   674  00FC88  53                 	db	83	;'S'
   675  00FC89  48                 	db	72	;'H'
   676  00FC8A  20                 	db	32
   677  00FC8B  53                 	db	83	;'S'
   678  00FC8C  4F                 	db	79	;'O'
   679  00FC8D  4C                 	db	76	;'L'
   680  00FC8E  4E                 	db	78	;'N'
   681  00FC8F  27                 	db	39
   682  00FC90  44                 	db	68	;'D'
   683  00FC91  00                 	db	0
   684  00FC92                     STR_68:
   685  00FC92  32                 	db	50	;'2'
   686  00FC93  2E                 	db	46
   687  00FC94  53                 	db	83	;'S'
   688  00FC95  4E                 	db	78	;'N'
   689  00FC96  52                 	db	82	;'R'
   690  00FC97  7C                 	db	124
   691  00FC98  34                 	db	52	;'4'
   692  00FC99  2E                 	db	46
   693  00FC9A  48                 	db	72	;'H'
   694  00FC9B  49                 	db	73	;'I'
   695  00FC9C  7C                 	db	124
   696  00FC9D  35                 	db	53	;'5'
   697  00FC9E  2E                 	db	46
   698  00FC9F  4D                 	db	77	;'M'
   699  00FCA0  45                 	db	69	;'E'
   700  00FCA1  44                 	db	68	;'D'
   701  00FCA2  00                 	db	0
   702  00FCA3                     STR_69:
   703  00FCA3  42                 	db	66	;'B'
   704  00FCA4  2E                 	db	46
   705  00FCA5  50                 	db	80	;'P'
   706  00FCA6  53                 	db	83	;'S'
   707  00FCA7  48                 	db	72	;'H'
   708  00FCA8  7C                 	db	124
   709  00FCA9  38                 	db	56	;'8'
   710  00FCAA  2E                 	db	46
   711  00FCAB  53                 	db	83	;'S'
   712  00FCAC  56                 	db	86	;'V'
   713  00FCAD  7C                 	db	124
   714  00FCAE  39                 	db	57	;'9'
   715  00FCAF  2E                 	db	46
   716  00FCB0  42                 	db	66	;'B'
   717  00FCB1  4C                 	db	76	;'L'
   718  00FCB2  4B                 	db	75	;'K'
   719  00FCB3  00                 	db	0
   720  00FCB4                     STR_110:
   721  00FCB4  54                 	db	84	;'T'
   722  00FCB5  53                 	db	83	;'S'
   723  00FCB6  54                 	db	84	;'T'
   724  00FCB7  3A                 	db	58	;':'
   725  00FCB8  20                 	db	32
   726  00FCB9  42                 	db	66	;'B'
   727  00FCBA  4F                 	db	79	;'O'
   728  00FCBB  54                 	db	84	;'T'
   729  00FCBC  48                 	db	72	;'H'
   730  00FCBD  20                 	db	32
   731  00FCBE  53                 	db	83	;'S'
   732  00FCBF  45                 	db	69	;'E'
   733  00FCC0  52                 	db	82	;'R'
   734  00FCC1  56                 	db	86	;'V'
   735  00FCC2  4F                 	db	79	;'O'
   736  00FCC3  53                 	db	83	;'S'
   737  00FCC4  00                 	db	0
   738  00FCC5                     STR_41:
   739  00FCC5  4C                 	db	76	;'L'
   740  00FCC6  4F                 	db	79	;'O'
   741  00FCC7  47                 	db	71	;'G'
   742  00FCC8  20                 	db	32
   743  00FCC9  31                 	db	49	;'1'
   744  00FCCA  20                 	db	32
   745  00FCCB  20                 	db	32
   746  00FCCC  20                 	db	32
   747  00FCCD  20                 	db	32
   748  00FCCE  20                 	db	32
   749  00FCCF  20                 	db	32
   750  00FCD0  20                 	db	32
   751  00FCD1  20                 	db	32
   752  00FCD2  20                 	db	32
   753  00FCD3  20                 	db	32
   754  00FCD4  20                 	db	32
   755  00FCD5  00                 	db	0
   756  00FCD6                     STR_40:
   757  00FCD6  4C                 	db	76	;'L'
   758  00FCD7  4F                 	db	79	;'O'
   759  00FCD8  47                 	db	71	;'G'
   760  00FCD9  20                 	db	32
   761  00FCDA  32                 	db	50	;'2'
   762  00FCDB  20                 	db	32
   763  00FCDC  20                 	db	32
   764  00FCDD  20                 	db	32
   765  00FCDE  20                 	db	32
   766  00FCDF  20                 	db	32
   767  00FCE0  20                 	db	32
   768  00FCE1  20                 	db	32
   769  00FCE2  20                 	db	32
   770  00FCE3  20                 	db	32
   771  00FCE4  20                 	db	32
   772  00FCE5  20                 	db	32
   773  00FCE6  00                 	db	0
   774  00FCE7                     STR_44:
   775  00FCE7  4C                 	db	76	;'L'
   776  00FCE8  4F                 	db	79	;'O'
   777  00FCE9  47                 	db	71	;'G'
   778  00FCEA  20                 	db	32
   779  00FCEB  33                 	db	51	;'3'
   780  00FCEC  20                 	db	32
   781  00FCED  20                 	db	32
   782  00FCEE  20                 	db	32
   783  00FCEF  20                 	db	32
   784  00FCF0  20                 	db	32
   785  00FCF1  20                 	db	32
   786  00FCF2  20                 	db	32
   787  00FCF3  20                 	db	32
   788  00FCF4  20                 	db	32
   789  00FCF5  20                 	db	32
   790  00FCF6  20                 	db	32
   791  00FCF7  00                 	db	0
   792  00FCF8                     STR_48:
   793  00FCF8  4C                 	db	76	;'L'
   794  00FCF9  4F                 	db	79	;'O'
   795  00FCFA  47                 	db	71	;'G'
   796  00FCFB  20                 	db	32
   797  00FCFC  34                 	db	52	;'4'
   798  00FCFD  20                 	db	32
   799  00FCFE  20                 	db	32
   800  00FCFF  20                 	db	32
   801  00FD00  20                 	db	32
   802  00FD01  20                 	db	32
   803  00FD02  20                 	db	32
   804  00FD03  20                 	db	32
   805  00FD04  20                 	db	32
   806  00FD05  20                 	db	32
   807  00FD06  20                 	db	32
   808  00FD07  20                 	db	32
   809  00FD08  00                 	db	0
   810  00FD09                     STR_36:
   811  00FD09  33                 	db	51	;'3'
   812  00FD0A  2E                 	db	46
   813  00FD0B  20                 	db	32
   814  00FD0C  4C                 	db	76	;'L'
   815  00FD0D  4F                 	db	79	;'O'
   816  00FD0E  47                 	db	71	;'G'
   817  00FD0F  53                 	db	83	;'S'
   818  00FD10  20                 	db	32
   819  00FD11  20                 	db	32
   820  00FD12  20                 	db	32
   821  00FD13  20                 	db	32
   822  00FD14  20                 	db	32
   823  00FD15  20                 	db	32
   824  00FD16  20                 	db	32
   825  00FD17  20                 	db	32
   826  00FD18  20                 	db	32
   827  00FD19  00                 	db	0
   828  00FD1A                     STR_32:
   829  00FD1A  32                 	db	50	;'2'
   830  00FD1B  2E                 	db	46
   831  00FD1C  20                 	db	32
   832  00FD1D  53                 	db	83	;'S'
   833  00FD1E  4F                 	db	79	;'O'
   834  00FD1F  52                 	db	82	;'R'
   835  00FD20  54                 	db	84	;'T'
   836  00FD21  20                 	db	32
   837  00FD22  20                 	db	32
   838  00FD23  20                 	db	32
   839  00FD24  20                 	db	32
   840  00FD25  20                 	db	32
   841  00FD26  20                 	db	32
   842  00FD27  20                 	db	32
   843  00FD28  20                 	db	32
   844  00FD29  20                 	db	32
   845  00FD2A  00                 	db	0
   846  00FD2B                     STR_33:
   847  00FD2B  31                 	db	49	;'1'
   848  00FD2C  2E                 	db	46
   849  00FD2D  20                 	db	32
   850  00FD2E  44                 	db	68	;'D'
   851  00FD2F  41                 	db	65	;'A'
   852  00FD30  54                 	db	84	;'T'
   853  00FD31  45                 	db	69	;'E'
   854  00FD32  2F                 	db	47
   855  00FD33  54                 	db	84	;'T'
   856  00FD34  49                 	db	73	;'I'
   857  00FD35  4D                 	db	77	;'M'
   858  00FD36  45                 	db	69	;'E'
   859  00FD37  20                 	db	32
   860  00FD38  20                 	db	32
   861  00FD39  20                 	db	32
   862  00FD3A  20                 	db	32
   863  00FD3B  00                 	db	0
   864  00FD3C                     STR_24:
   865  00FD3C  20                 	db	32
   866  00FD3D  2D                 	db	45
   867  00FD3E  2D                 	db	45
   868  00FD3F  20                 	db	32
   869  00FD40  50                 	db	80	;'P'
   870  00FD41  4F                 	db	79	;'O'
   871  00FD42  50                 	db	80	;'P'
   872  00FD43  20                 	db	32
   873  00FD44  20                 	db	32
   874  00FD45  43                 	db	67	;'C'
   875  00FD46  41                 	db	65	;'A'
   876  00FD47  4E                 	db	78	;'N'
   877  00FD48  20                 	db	32
   878  00FD49  2D                 	db	45
   879  00FD4A  2D                 	db	45
   880  00FD4B  20                 	db	32
   881  00FD4C  00                 	db	0
   882  00FD4D                     STR_26:
   883  00FD4D  20                 	db	32
   884  00FD4E  2D                 	db	45
   885  00FD4F  2D                 	db	45
   886  00FD50  20                 	db	32
   887  00FD51  53                 	db	83	;'S'
   888  00FD52  4F                 	db	79	;'O'
   889  00FD53  55                 	db	85	;'U'
   890  00FD54  50                 	db	80	;'P'
   891  00FD55  20                 	db	32
   892  00FD56  43                 	db	67	;'C'
   893  00FD57  41                 	db	65	;'A'
   894  00FD58  4E                 	db	78	;'N'
   895  00FD59  20                 	db	32
   896  00FD5A  2D                 	db	45
   897  00FD5B  2D                 	db	45
   898  00FD5C  20                 	db	32
   899  00FD5D  00                 	db	0
   900  00FD5E                     STR_28:
   901  00FD5E  2D                 	db	45
   902  00FD5F  2D                 	db	45
   903  00FD60  20                 	db	32
   904  00FD61  54                 	db	84	;'T'
   905  00FD62  4F                 	db	79	;'O'
   906  00FD63  54                 	db	84	;'T'
   907  00FD64  41                 	db	65	;'A'
   908  00FD65  4C                 	db	76	;'L'
   909  00FD66  20                 	db	32
   910  00FD67  43                 	db	67	;'C'
   911  00FD68  41                 	db	65	;'A'
   912  00FD69  4E                 	db	78	;'N'
   913  00FD6A  53                 	db	83	;'S'
   914  00FD6B  20                 	db	32
   915  00FD6C  2D                 	db	45
   916  00FD6D  2D                 	db	45
   917  00FD6E  00                 	db	0
   918  00FD6F                     STR_39:
   919  00FD6F  4C                 	db	76	;'L'
   920  00FD70  4F                 	db	79	;'O'
   921  00FD71  47                 	db	71	;'G'
   922  00FD72  20                 	db	32
   923  00FD73  31                 	db	49	;'1'
   924  00FD74  20                 	db	32
   925  00FD75  20                 	db	32
   926  00FD76  20                 	db	32
   927  00FD77  20                 	db	32
   928  00FD78  20                 	db	32
   929  00FD79  20                 	db	32
   930  00FD7A  20                 	db	32
   931  00FD7B  20                 	db	32
   932  00FD7C  20                 	db	32
   933  00FD7D  20                 	db	32
   934  00FD7E  3C                 	db	60	;'<'
   935  00FD7F  00                 	db	0
   936  00FD80                     STR_42:
   937  00FD80  4C                 	db	76	;'L'
   938  00FD81  4F                 	db	79	;'O'
   939  00FD82  47                 	db	71	;'G'
   940  00FD83  20                 	db	32
   941  00FD84  32                 	db	50	;'2'
   942  00FD85  20                 	db	32
   943  00FD86  20                 	db	32
   944  00FD87  20                 	db	32
   945  00FD88  20                 	db	32
   946  00FD89  20                 	db	32
   947  00FD8A  20                 	db	32
   948  00FD8B  20                 	db	32
   949  00FD8C  20                 	db	32
   950  00FD8D  20                 	db	32
   951  00FD8E  20                 	db	32
   952  00FD8F  3C                 	db	60	;'<'
   953  00FD90  00                 	db	0
   954  00FD91                     STR_46:
   955  00FD91  4C                 	db	76	;'L'
   956  00FD92  4F                 	db	79	;'O'
   957  00FD93  47                 	db	71	;'G'
   958  00FD94  20                 	db	32
   959  00FD95  33                 	db	51	;'3'
   960  00FD96  20                 	db	32
   961  00FD97  20                 	db	32
   962  00FD98  20                 	db	32
   963  00FD99  20                 	db	32
   964  00FD9A  20                 	db	32
   965  00FD9B  20                 	db	32
   966  00FD9C  20                 	db	32
   967  00FD9D  20                 	db	32
   968  00FD9E  20                 	db	32
   969  00FD9F  20                 	db	32
   970  00FDA0  3C                 	db	60	;'<'
   971  00FDA1  00                 	db	0
   972  00FDA2                     STR_50:
   973  00FDA2  4C                 	db	76	;'L'
   974  00FDA3  4F                 	db	79	;'O'
   975  00FDA4  47                 	db	71	;'G'
   976  00FDA5  20                 	db	32
   977  00FDA6  34                 	db	52	;'4'
   978  00FDA7  20                 	db	32
   979  00FDA8  20                 	db	32
   980  00FDA9  20                 	db	32
   981  00FDAA  20                 	db	32
   982  00FDAB  20                 	db	32
   983  00FDAC  20                 	db	32
   984  00FDAD  20                 	db	32
   985  00FDAE  20                 	db	32
   986  00FDAF  20                 	db	32
   987  00FDB0  20                 	db	32
   988  00FDB1  3C                 	db	60	;'<'
   989  00FDB2  00                 	db	0
   990  00FDB3                     STR_38:
   991  00FDB3  33                 	db	51	;'3'
   992  00FDB4  2E                 	db	46
   993  00FDB5  20                 	db	32
   994  00FDB6  4C                 	db	76	;'L'
   995  00FDB7  4F                 	db	79	;'O'
   996  00FDB8  47                 	db	71	;'G'
   997  00FDB9  53                 	db	83	;'S'
   998  00FDBA  20                 	db	32
   999  00FDBB  20                 	db	32
  1000  00FDBC  20                 	db	32
  1001  00FDBD  20                 	db	32
  1002  00FDBE  20                 	db	32
  1003  00FDBF  20                 	db	32
  1004  00FDC0  20                 	db	32
  1005  00FDC1  20                 	db	32
  1006  00FDC2  3C                 	db	60	;'<'
  1007  00FDC3  00                 	db	0
  1008  00FDC4                     STR_34:
  1009  00FDC4  32                 	db	50	;'2'
  1010  00FDC5  2E                 	db	46
  1011  00FDC6  20                 	db	32
  1012  00FDC7  53                 	db	83	;'S'
  1013  00FDC8  4F                 	db	79	;'O'
  1014  00FDC9  52                 	db	82	;'R'
  1015  00FDCA  54                 	db	84	;'T'
  1016  00FDCB  20                 	db	32
  1017  00FDCC  20                 	db	32
  1018  00FDCD  20                 	db	32
  1019  00FDCE  20                 	db	32
  1020  00FDCF  20                 	db	32
  1021  00FDD0  20                 	db	32
  1022  00FDD1  20                 	db	32
  1023  00FDD2  20                 	db	32
  1024  00FDD3  3C                 	db	60	;'<'
  1025  00FDD4  00                 	db	0
  1026  00FDD5                     STR_31:
  1027  00FDD5  31                 	db	49	;'1'
  1028  00FDD6  2E                 	db	46
  1029  00FDD7  20                 	db	32
  1030  00FDD8  44                 	db	68	;'D'
  1031  00FDD9  41                 	db	65	;'A'
  1032  00FDDA  54                 	db	84	;'T'
  1033  00FDDB  45                 	db	69	;'E'
  1034  00FDDC  2F                 	db	47
  1035  00FDDD  54                 	db	84	;'T'
  1036  00FDDE  49                 	db	73	;'I'
  1037  00FDDF  4D                 	db	77	;'M'
  1038  00FDE0  45                 	db	69	;'E'
  1039  00FDE1  20                 	db	32
  1040  00FDE2  20                 	db	32
  1041  00FDE3  20                 	db	32
  1042  00FDE4  3C                 	db	60	;'<'
  1043  00FDE5  00                 	db	0
  1044  00FDE6                     STR_6:
  1045  00FDE6  50                 	db	80	;'P'
  1046  00FDE7  41                 	db	65	;'A'
  1047  00FDE8  55                 	db	85	;'U'
  1048  00FDE9  53                 	db	83	;'S'
  1049  00FDEA  45                 	db	69	;'E'
  1050  00FDEB  20                 	db	32
  1051  00FDEC  3C                 	db	60	;'<'
  1052  00FDED  20                 	db	32
  1053  00FDEE  7C                 	db	124
  1054  00FDEF  20                 	db	32
  1055  00FDF0  42                 	db	66	;'B'
  1056  00FDF1  41                 	db	65	;'A'
  1057  00FDF2  43                 	db	67	;'C'
  1058  00FDF3  4B                 	db	75	;'K'
  1059  00FDF4  20                 	db	32
  1060  00FDF5  3E                 	db	62	;'>'
  1061  00FDF6  00                 	db	0
  1062  00FDF7                     STR_30:
  1063  00FDF7  50                 	db	80	;'P'
  1064  00FDF8  55                 	db	85	;'U'
  1065  00FDF9  53                 	db	83	;'S'
  1066  00FDFA  48                 	db	72	;'H'
  1067  00FDFB  20                 	db	32
  1068  00FDFC  54                 	db	84	;'T'
  1069  00FDFD  4F                 	db	79	;'O'
  1070  00FDFE  20                 	db	32
  1071  00FDFF  43                 	db	67	;'C'
  1072  00FE00  4F                 	db	79	;'O'
  1073  00FE01  4E                 	db	78	;'N'
  1074  00FE02  54                 	db	84	;'T'
  1075  00FE03  49                 	db	73	;'I'
  1076  00FE04  4E                 	db	78	;'N'
  1077  00FE05  55                 	db	85	;'U'
  1078  00FE06  45                 	db	69	;'E'
  1079  00FE07  00                 	db	0
  1080  00FE08                     STR_27:
  1081  00FE08  4E                 	db	78	;'N'
  1082  00FE09  4C                 	db	76	;'L'
  1083  00FE0A  41                 	db	65	;'A'
  1084  00FE0B  42                 	db	66	;'B'
  1085  00FE0C  3A                 	db	58	;':'
  1086  00FE0D  20                 	db	32
  1087  00FE0E  25                 	db	37
  1088  00FE0F  64                 	db	100	;'d'
  1089  00FE10  7C                 	db	124
  1090  00FE11  4C                 	db	76	;'L'
  1091  00FE12  41                 	db	65	;'A'
  1092  00FE13  42                 	db	66	;'B'
  1093  00FE14  3A                 	db	58	;':'
  1094  00FE15  20                 	db	32
  1095  00FE16  25                 	db	37
  1096  00FE17  64                 	db	100	;'d'
  1097  00FE18  00                 	db	0
  1098  00FE19                     STR_25:
  1099  00FE19  4E                 	db	78	;'N'
  1100  00FE1A  54                 	db	84	;'T'
  1101  00FE1B  41                 	db	65	;'A'
  1102  00FE1C  42                 	db	66	;'B'
  1103  00FE1D  3A                 	db	58	;':'
  1104  00FE1E  20                 	db	32
  1105  00FE1F  25                 	db	37
  1106  00FE20  64                 	db	100	;'d'
  1107  00FE21  7C                 	db	124
  1108  00FE22  54                 	db	84	;'T'
  1109  00FE23  41                 	db	65	;'A'
  1110  00FE24  42                 	db	66	;'B'
  1111  00FE25  3A                 	db	58	;':'
  1112  00FE26  20                 	db	32
  1113  00FE27  25                 	db	37
  1114  00FE28  64                 	db	100	;'d'
  1115  00FE29  00                 	db	0
  1116  00FE2A                     STR_83:
  1117  00FE2A  4D                 	db	77	;'M'
  1118  00FE2B  41                 	db	65	;'A'
  1119  00FE2C  47                 	db	71	;'G'
  1120  00FE2D  5F                 	db	95	;'_'
  1121  00FE2E  73                 	db	115	;'s'
  1122  00FE2F  69                 	db	105	;'i'
  1123  00FE30  67                 	db	103	;'g'
  1124  00FE31  6E                 	db	110	;'n'
  1125  00FE32  61                 	db	97	;'a'
  1126  00FE33  6C                 	db	108	;'l'
  1127  00FE34  3A                 	db	58	;':'
  1128  00FE35  20                 	db	32
  1129  00FE36  25                 	db	37
  1130  00FE37  64                 	db	100	;'d'
  1131  00FE38  20                 	db	32
  1132  00FE39  00                 	db	0
  1133  00FE3A                     STR_103:
  1134  00FE3A  54                 	db	84	;'T'
  1135  00FE3B  53                 	db	83	;'S'
  1136  00FE3C  54                 	db	84	;'T'
  1137  00FE3D  3A                 	db	58	;':'
  1138  00FE3E  20                 	db	32
  1139  00FE3F  54                 	db	84	;'T'
  1140  00FE40  49                 	db	73	;'I'
  1141  00FE41  4C                 	db	76	;'L'
  1142  00FE42  54                 	db	84	;'T'
  1143  00FE43  20                 	db	32
  1144  00FE44  53                 	db	83	;'S'
  1145  00FE45  45                 	db	69	;'E'
  1146  00FE46  52                 	db	82	;'R'
  1147  00FE47  56                 	db	86	;'V'
  1148  00FE48  4F                 	db	79	;'O'
  1149  00FE49  00                 	db	0
  1150  00FE4A                     STR_4:
  1151  00FE4A  44                 	db	68	;'D'
  1152  00FE4B  49                 	db	73	;'I'
  1153  00FE4C  44                 	db	68	;'D'
  1154  00FE4D  4E                 	db	78	;'N'
  1155  00FE4E  27                 	db	39
  1156  00FE4F  54                 	db	84	;'T'
  1157  00FE50  20                 	db	32
  1158  00FE51  43                 	db	67	;'C'
  1159  00FE52  4F                 	db	79	;'O'
  1160  00FE53  4D                 	db	77	;'M'
  1161  00FE54  50                 	db	80	;'P'
  1162  00FE55  4C                 	db	76	;'L'
  1163  00FE56  45                 	db	69	;'E'
  1164  00FE57  54                 	db	84	;'T'
  1165  00FE58  45                 	db	69	;'E'
  1166  00FE59  00                 	db	0
  1167  00FE5A                     STR_80:
  1168  00FE5A  49                 	db	73	;'I'
  1169  00FE5B  52                 	db	82	;'R'
  1170  00FE5C  5F                 	db	95	;'_'
  1171  00FE5D  73                 	db	115	;'s'
  1172  00FE5E  69                 	db	105	;'i'
  1173  00FE5F  67                 	db	103	;'g'
  1174  00FE60  6E                 	db	110	;'n'
  1175  00FE61  61                 	db	97	;'a'
  1176  00FE62  6C                 	db	108	;'l'
  1177  00FE63  3A                 	db	58	;':'
  1178  00FE64  20                 	db	32
  1179  00FE65  25                 	db	37
  1180  00FE66  64                 	db	100	;'d'
  1181  00FE67  20                 	db	32
  1182  00FE68  00                 	db	0
  1183  00FE69                     STR_109:
  1184  00FE69  43                 	db	67	;'C'
  1185  00FE6A  41                 	db	65	;'A'
  1186  00FE6B  4D                 	db	77	;'M'
  1187  00FE6C  20                 	db	32
  1188  00FE6D  44                 	db	68	;'D'
  1189  00FE6E  57                 	db	87	;'W'
  1190  00FE6F  4E                 	db	78	;'N'
  1191  00FE70  20                 	db	32
  1192  00FE71  7C                 	db	124
  1193  00FE72  52                 	db	82	;'R'
  1194  00FE73  43                 	db	67	;'C'
  1195  00FE74  30                 	db	48	;'0'
  1196  00FE75  3D                 	db	61	;'='
  1197  00FE76  30                 	db	48	;'0'
  1198  00FE77  00                 	db	0
  1199  00FE78                     STR_108:
  1200  00FE78  43                 	db	67	;'C'
  1201  00FE79  41                 	db	65	;'A'
  1202  00FE7A  4D                 	db	77	;'M'
  1203  00FE7B  20                 	db	32
  1204  00FE7C  55                 	db	85	;'U'
  1205  00FE7D  50                 	db	80	;'P'
  1206  00FE7E  20                 	db	32
  1207  00FE7F  20                 	db	32
  1208  00FE80  7C                 	db	124
  1209  00FE81  52                 	db	82	;'R'
  1210  00FE82  43                 	db	67	;'C'
  1211  00FE83  30                 	db	48	;'0'
  1212  00FE84  3D                 	db	61	;'='
  1213  00FE85  31                 	db	49	;'1'
  1214  00FE86  00                 	db	0
  1215  00FE87                     STR_82:
  1216  00FE87  54                 	db	84	;'T'
  1217  00FE88  53                 	db	83	;'S'
  1218  00FE89  54                 	db	84	;'T'
  1219  00FE8A  3A                 	db	58	;':'
  1220  00FE8B  20                 	db	32
  1221  00FE8C  4D                 	db	77	;'M'
  1222  00FE8D  41                 	db	65	;'A'
  1223  00FE8E  47                 	db	71	;'G'
  1224  00FE8F  4E                 	db	78	;'N'
  1225  00FE90  45                 	db	69	;'E'
  1226  00FE91  54                 	db	84	;'T'
  1227  00FE92  49                 	db	73	;'I'
  1228  00FE93  53                 	db	83	;'S'
  1229  00FE94  4D                 	db	77	;'M'
  1230  00FE95  00                 	db	0
  1231  00FE96                     STR_107:
  1232  00FE96  54                 	db	84	;'T'
  1233  00FE97  53                 	db	83	;'S'
  1234  00FE98  54                 	db	84	;'T'
  1235  00FE99  3A                 	db	58	;':'
  1236  00FE9A  20                 	db	32
  1237  00FE9B  43                 	db	67	;'C'
  1238  00FE9C  41                 	db	65	;'A'
  1239  00FE9D  4D                 	db	77	;'M'
  1240  00FE9E  20                 	db	32
  1241  00FE9F  53                 	db	83	;'S'
  1242  00FEA0  45                 	db	69	;'E'
  1243  00FEA1  52                 	db	82	;'R'
  1244  00FEA2  56                 	db	86	;'V'
  1245  00FEA3  4F                 	db	79	;'O'
  1246  00FEA4  00                 	db	0
  1247  00FEA5                     STR_96:
  1248  00FEA5  54                 	db	84	;'T'
  1249  00FEA6  53                 	db	83	;'S'
  1250  00FEA7  54                 	db	84	;'T'
  1251  00FEA8  3A                 	db	58	;':'
  1252  00FEA9  20                 	db	32
  1253  00FEAA  50                 	db	80	;'P'
  1254  00FEAB  41                 	db	65	;'A'
  1255  00FEAC  4E                 	db	78	;'N'
  1256  00FEAD  20                 	db	32
  1257  00FEAE  53                 	db	83	;'S'
  1258  00FEAF  45                 	db	69	;'E'
  1259  00FEB0  52                 	db	82	;'R'
  1260  00FEB1  56                 	db	86	;'V'
  1261  00FEB2  4F                 	db	79	;'O'
  1262  00FEB3  00                 	db	0
  1263  00FEB4                     STR_75:
  1264  00FEB4  41                 	db	65	;'A'
  1265  00FEB5  4C                 	db	76	;'L'
  1266  00FEB6  47                 	db	71	;'G'
  1267  00FEB7  34                 	db	52	;'4'
  1268  00FEB8  3A                 	db	58	;':'
  1269  00FEB9  20                 	db	32
  1270  00FEBA  41                 	db	65	;'A'
  1271  00FEBB  4C                 	db	76	;'L'
  1272  00FEBC  4C                 	db	76	;'L'
  1273  00FEBD  20                 	db	32
  1274  00FEBE  43                 	db	67	;'C'
  1275  00FEBF  41                 	db	65	;'A'
  1276  00FEC0  4E                 	db	78	;'N'
  1277  00FEC1  53                 	db	83	;'S'
  1278  00FEC2  00                 	db	0
  1279  00FEC3                     STR_90:
  1280  00FEC3  54                 	db	84	;'T'
  1281  00FEC4  53                 	db	83	;'S'
  1282  00FEC5  54                 	db	84	;'T'
  1283  00FEC6  3A                 	db	58	;':'
  1284  00FEC7  20                 	db	32
  1285  00FEC8  44                 	db	68	;'D'
  1286  00FEC9  43                 	db	67	;'C'
  1287  00FECA  20                 	db	32
  1288  00FECB  4D                 	db	77	;'M'
  1289  00FECC  4F                 	db	79	;'O'
  1290  00FECD  54                 	db	84	;'T'
  1291  00FECE  4F                 	db	79	;'O'
  1292  00FECF  52                 	db	82	;'R'
  1293  00FED0  53                 	db	83	;'S'
  1294  00FED1  00                 	db	0
  1295  00FED2                     STR_70:
  1296  00FED2  41                 	db	65	;'A'
  1297  00FED3  4C                 	db	76	;'L'
  1298  00FED4  47                 	db	71	;'G'
  1299  00FED5  4F                 	db	79	;'O'
  1300  00FED6  52                 	db	82	;'R'
  1301  00FED7  49                 	db	73	;'I'
  1302  00FED8  54                 	db	84	;'T'
  1303  00FED9  48                 	db	72	;'H'
  1304  00FEDA  4D                 	db	77	;'M'
  1305  00FEDB  20                 	db	32
  1306  00FEDC  54                 	db	84	;'T'
  1307  00FEDD  45                 	db	69	;'E'
  1308  00FEDE  53                 	db	83	;'S'
  1309  00FEDF  54                 	db	84	;'T'
  1310  00FEE0  00                 	db	0
  1311  00FEE1                     STR_91:
  1312  00FEE1  50                 	db	80	;'P'
  1313  00FEE2  49                 	db	73	;'I'
  1314  00FEE3  4E                 	db	78	;'N'
  1315  00FEE4  20                 	db	32
  1316  00FEE5  52                 	db	82	;'R'
  1317  00FEE6  41                 	db	65	;'A'
  1318  00FEE7  35                 	db	53	;'5'
  1319  00FEE8  20                 	db	32
  1320  00FEE9  48                 	db	72	;'H'
  1321  00FEEA  49                 	db	73	;'I'
  1322  00FEEB  47                 	db	71	;'G'
  1323  00FEEC  48                 	db	72	;'H'
  1324  00FEED  2E                 	db	46
  1325  00FEEE  00                 	db	0
  1326  00FEEF                     STR_73:
  1327  00FEEF  41                 	db	65	;'A'
  1328  00FEF0  4C                 	db	76	;'L'
  1329  00FEF1  47                 	db	71	;'G'
  1330  00FEF2  32                 	db	50	;'2'
  1331  00FEF3  3A                 	db	58	;':'
  1332  00FEF4  20                 	db	32
  1333  00FEF5  31                 	db	49	;'1'
  1334  00FEF6  32                 	db	50	;'2'
  1335  00FEF7  20                 	db	32
  1336  00FEF8  43                 	db	67	;'C'
  1337  00FEF9  41                 	db	65	;'A'
  1338  00FEFA  4E                 	db	78	;'N'
  1339  00FEFB  53                 	db	83	;'S'
  1340  00FEFC  00                 	db	0
  1341  00FEFD                     STR_76:
  1342  00FEFD  41                 	db	65	;'A'
  1343  00FEFE  4C                 	db	76	;'L'
  1344  00FEFF  47                 	db	71	;'G'
  1345  00FF00  35                 	db	53	;'5'
  1346  00FF01  3A                 	db	58	;':'
  1347  00FF02  20                 	db	32
  1348  00FF03  4E                 	db	78	;'N'
  1349  00FF04  4F                 	db	79	;'O'
  1350  00FF05  20                 	db	32
  1351  00FF06  43                 	db	67	;'C'
  1352  00FF07  41                 	db	65	;'A'
  1353  00FF08  4E                 	db	78	;'N'
  1354  00FF09  53                 	db	83	;'S'
  1355  00FF0A  00                 	db	0
  1356  00FF0B                     STR_71:
  1357  00FF0B  50                 	db	80	;'P'
  1358  00FF0C  55                 	db	85	;'U'
  1359  00FF0D  53                 	db	83	;'S'
  1360  00FF0E  48                 	db	72	;'H'
  1361  00FF0F  20                 	db	32
  1362  00FF10  54                 	db	84	;'T'
  1363  00FF11  4F                 	db	79	;'O'
  1364  00FF12  20                 	db	32
  1365  00FF13  53                 	db	83	;'S'
  1366  00FF14  54                 	db	84	;'T'
  1367  00FF15  41                 	db	65	;'A'
  1368  00FF16  52                 	db	82	;'R'
  1369  00FF17  54                 	db	84	;'T'
  1370  00FF18  00                 	db	0
  1371  00FF19                     STR_23:
  1372  00FF19  25                 	db	37
  1373  00FF1A  64                 	db	100	;'d'
  1374  00FF1B  20                 	db	32
  1375  00FF1C  4D                 	db	77	;'M'
  1376  00FF1D  49                 	db	73	;'I'
  1377  00FF1E  4E                 	db	78	;'N'
  1378  00FF1F  20                 	db	32
  1379  00FF20  25                 	db	37
  1380  00FF21  64                 	db	100	;'d'
  1381  00FF22  20                 	db	32
  1382  00FF23  53                 	db	83	;'S'
  1383  00FF24  45                 	db	69	;'E'
  1384  00FF25  43                 	db	67	;'C'
  1385  00FF26  00                 	db	0
  1386  00FF27                     STR_2:
  1387  00FF27  54                 	db	84	;'T'
  1388  00FF28  49                 	db	73	;'I'
  1389  00FF29  4D                 	db	77	;'M'
  1390  00FF2A  45                 	db	69	;'E'
  1391  00FF2B  3A                 	db	58	;':'
  1392  00FF2C  20                 	db	32
  1393  00FF2D  25                 	db	37
  1394  00FF2E  64                 	db	100	;'d'
  1395  00FF2F  3A                 	db	58	;':'
  1396  00FF30  25                 	db	37
  1397  00FF31  30                 	db	48	;'0'
  1398  00FF32  32                 	db	50	;'2'
  1399  00FF33  64                 	db	100	;'d'
  1400  00FF34  00                 	db	0
  1401  00FF35                     STR_79:
  1402  00FF35  54                 	db	84	;'T'
  1403  00FF36  53                 	db	83	;'S'
  1404  00FF37  54                 	db	84	;'T'
  1405  00FF38  3A                 	db	58	;':'
  1406  00FF39  20                 	db	32
  1407  00FF3A  49                 	db	73	;'I'
  1408  00FF3B  52                 	db	82	;'R'
  1409  00FF3C  20                 	db	32
  1410  00FF3D  53                 	db	83	;'S'
  1411  00FF3E  4E                 	db	78	;'N'
  1412  00FF3F  53                 	db	83	;'S'
  1413  00FF40  52                 	db	82	;'R'
  1414  00FF41  00                 	db	0
  1415  00FF42                     STR_65:
  1416  00FF42  54                 	db	84	;'T'
  1417  00FF43  49                 	db	73	;'I'
  1418  00FF44  4D                 	db	77	;'M'
  1419  00FF45  45                 	db	69	;'E'
  1420  00FF46  20                 	db	32
  1421  00FF47  25                 	db	37
  1422  00FF48  64                 	db	100	;'d'
  1423  00FF49  3A                 	db	58	;':'
  1424  00FF4A  25                 	db	37
  1425  00FF4B  30                 	db	48	;'0'
  1426  00FF4C  32                 	db	50	;'2'
  1427  00FF4D  64                 	db	100	;'d'
  1428  00FF4E  00                 	db	0
  1429  00FF4F                     STR_74:
  1430  00FF4F  41                 	db	65	;'A'
  1431  00FF50  4C                 	db	76	;'L'
  1432  00FF51  47                 	db	71	;'G'
  1433  00FF52  33                 	db	51	;'3'
  1434  00FF53  3A                 	db	58	;':'
  1435  00FF54  20                 	db	32
  1436  00FF55  31                 	db	49	;'1'
  1437  00FF56  20                 	db	32
  1438  00FF57  43                 	db	67	;'C'
  1439  00FF58  41                 	db	65	;'A'
  1440  00FF59  4E                 	db	78	;'N'
  1441  00FF5A  00                 	db	0
  1442  00FF5B                     STR_93:
  1443  00FF5B  50                 	db	80	;'P'
  1444  00FF5C  49                 	db	73	;'I'
  1445  00FF5D  4E                 	db	78	;'N'
  1446  00FF5E  20                 	db	32
  1447  00FF5F  52                 	db	82	;'R'
  1448  00FF60  41                 	db	65	;'A'
  1449  00FF61  33                 	db	51	;'3'
  1450  00FF62  2E                 	db	46
  1451  00FF63  2E                 	db	46
  1452  00FF64  2E                 	db	46
  1453  00FF65  00                 	db	0
  1454  00FF66                     STR_95:
  1455  00FF66  50                 	db	80	;'P'
  1456  00FF67  49                 	db	73	;'I'
  1457  00FF68  4E                 	db	78	;'N'
  1458  00FF69  20                 	db	32
  1459  00FF6A  52                 	db	82	;'R'
  1460  00FF6B  41                 	db	65	;'A'
  1461  00FF6C  34                 	db	52	;'4'
  1462  00FF6D  2E                 	db	46
  1463  00FF6E  2E                 	db	46
  1464  00FF6F  2E                 	db	46
  1465  00FF70  00                 	db	0
  1466  00FF71                     STR_113:
  1467  00FF71  50                 	db	80	;'P'
  1468  00FF72  55                 	db	85	;'U'
  1469  00FF73  53                 	db	83	;'S'
  1470  00FF74  48                 	db	72	;'H'
  1471  00FF75  45                 	db	69	;'E'
  1472  00FF76  52                 	db	82	;'R'
  1473  00FF77  20                 	db	32
  1474  00FF78  54                 	db	84	;'T'
  1475  00FF79  53                 	db	83	;'S'
  1476  00FF7A  54                 	db	84	;'T'
  1477  00FF7B  00                 	db	0
  1478  00FF7C                     STR_64:
  1479  00FF7C  53                 	db	83	;'S'
  1480  00FF7D  4F                 	db	79	;'O'
  1481  00FF7E  52                 	db	82	;'R'
  1482  00FF7F  54                 	db	84	;'T'
  1483  00FF80  49                 	db	73	;'I'
  1484  00FF81  4E                 	db	78	;'N'
  1485  00FF82  47                 	db	71	;'G'
  1486  00FF83  2E                 	db	46
  1487  00FF84  2E                 	db	46
  1488  00FF85  2E                 	db	46
  1489  00FF86  00                 	db	0
  1490  00FF87                     STR_84:
  1491  00FF87  54                 	db	84	;'T'
  1492  00FF88  53                 	db	83	;'S'
  1493  00FF89  54                 	db	84	;'T'
  1494  00FF8A  3A                 	db	58	;':'
  1495  00FF8B  20                 	db	32
  1496  00FF8C  43                 	db	67	;'C'
  1497  00FF8D  4F                 	db	79	;'O'
  1498  00FF8E  4E                 	db	78	;'N'
  1499  00FF8F  44                 	db	68	;'D'
  1500  00FF90  00                 	db	0
  1501  00FF91                     STR_88:
  1502  00FF91  41                 	db	65	;'A'
  1503  00FF92  43                 	db	67	;'C'
  1504  00FF93  54                 	db	84	;'T'
  1505  00FF94  55                 	db	85	;'U'
  1506  00FF95  41                 	db	65	;'A'
  1507  00FF96  54                 	db	84	;'T'
  1508  00FF97  4F                 	db	79	;'O'
  1509  00FF98  52                 	db	82	;'R'
  1510  00FF99  53                 	db	83	;'S'
  1511  00FF9A  00                 	db	0
  1512  00FF9B                     STR_22:
  1513  00FF9B  44                 	db	68	;'D'
  1514  00FF9C  55                 	db	85	;'U'
  1515  00FF9D  52                 	db	82	;'R'
  1516  00FF9E  41                 	db	65	;'A'
  1517  00FF9F  54                 	db	84	;'T'
  1518  00FFA0  49                 	db	73	;'I'
  1519  00FFA1  4F                 	db	79	;'O'
  1520  00FFA2  4E                 	db	78	;'N'
  1521  00FFA3  3A                 	db	58	;':'
  1522  00FFA4  00                 	db	0
  1523  00FFA5                     STR_86:
  1524  00FFA5  43                 	db	67	;'C'
  1525  00FFA6  4F                 	db	79	;'O'
  1526  00FFA7  4E                 	db	78	;'N'
  1527  00FFA8  44                 	db	68	;'D'
  1528  00FFA9  3A                 	db	58	;':'
  1529  00FFAA  20                 	db	32
  1530  00FFAB  25                 	db	37
  1531  00FFAC  64                 	db	100	;'d'
  1532  00FFAD  00                 	db	0
  1533  00FFAE                     STR_77:
  1534  00FFAE  53                 	db	83	;'S'
  1535  00FFAF  45                 	db	69	;'E'
  1536  00FFB0  4E                 	db	78	;'N'
  1537  00FFB1  53                 	db	83	;'S'
  1538  00FFB2  4F                 	db	79	;'O'
  1539  00FFB3  52                 	db	82	;'R'
  1540  00FFB4  53                 	db	83	;'S'
  1541  00FFB5  00                 	db	0
  1542  00FFB6                     STR_126:
  1543  00FFB6  28                 	db	40
  1544  00FFB7  6E                 	db	110	;'n'
  1545  00FFB8  75                 	db	117	;'u'
  1546  00FFB9  6C                 	db	108	;'l'
  1547  00FFBA  6C                 	db	108	;'l'
  1548  00FFBB  29                 	db	41
  1549  00FFBC  00                 	db	0
  1550  00FFBD                     STR_67:
  1551  00FFBD  46                 	db	70	;'F'
  1552  00FFBE  41                 	db	65	;'A'
  1553  00FFBF  49                 	db	73	;'I'
  1554  00FFC0  4C                 	db	76	;'L'
  1555  00FFC1  45                 	db	69	;'E'
  1556  00FFC2  44                 	db	68	;'D'
  1557  00FFC3  00                 	db	0
  1558  00FFC4                     STR_7:
  1559  00FFC4  53                 	db	83	;'S'
  1560  00FFC5  54                 	db	84	;'T'
  1561  00FFC6  41                 	db	65	;'A'
  1562  00FFC7  52                 	db	82	;'R'
  1563  00FFC8  54                 	db	84	;'T'
  1564  00FFC9  3A                 	db	58	;':'
  1565  00FFCA  00                 	db	0
  1566  00FFCB                     STR_9:
  1567  00FFCB  46                 	db	70	;'F'
  1568  00FFCC  45                 	db	69	;'E'
  1569  00FFCD  42                 	db	66	;'B'
  1570  00FFCE  00                 	db	0
  1571  00FFCF                     STR_19:
  1572  00FFCF  44                 	db	68	;'D'
  1573  00FFD0  45                 	db	69	;'E'
  1574  00FFD1  43                 	db	67	;'C'
  1575  00FFD2  00                 	db	0
  1576  00FFD3                     STR_15:
  1577  00FFD3  41                 	db	65	;'A'
  1578  00FFD4  55                 	db	85	;'U'
  1579  00FFD5  47                 	db	71	;'G'
  1580  00FFD6  00                 	db	0
  1581  00FFD7                     STR_14:
  1582  00FFD7  4A                 	db	74	;'J'
  1583  00FFD8  55                 	db	85	;'U'
  1584  00FFD9  4C                 	db	76	;'L'
  1585  00FFDA  00                 	db	0
  1586  00FFDB                     STR_8:
  1587  00FFDB  4A                 	db	74	;'J'
  1588  00FFDC  41                 	db	65	;'A'
  1589  00FFDD  4E                 	db	78	;'N'
  1590  00FFDE  00                 	db	0
  1591  00FFDF                     STR_13:
  1592  00FFDF  4A                 	db	74	;'J'
  1593  00FFE0  55                 	db	85	;'U'
  1594  00FFE1  4E                 	db	78	;'N'
  1595  00FFE2  00                 	db	0
  1596  00FFE3                     STR_16:
  1597  00FFE3  53                 	db	83	;'S'
  1598  00FFE4  45                 	db	69	;'E'
  1599  00FFE5  50                 	db	80	;'P'
  1600  00FFE6  00                 	db	0
  1601  00FFE7                     STR_10:
  1602  00FFE7  4D                 	db	77	;'M'
  1603  00FFE8  41                 	db	65	;'A'
  1604  00FFE9  52                 	db	82	;'R'
  1605  00FFEA  00                 	db	0
  1606  00FFEB                     STR_11:
  1607  00FFEB  41                 	db	65	;'A'
  1608  00FFEC  50                 	db	80	;'P'
  1609  00FFED  52                 	db	82	;'R'
  1610  00FFEE  00                 	db	0
  1611  00FFEF                     STR_20:
  1612  00FFEF  45                 	db	69	;'E'
  1613  00FFF0  52                 	db	82	;'R'
  1614  00FFF1  52                 	db	82	;'R'
  1615  00FFF2  00                 	db	0
  1616  00FFF3                     STR_17:
  1617  00FFF3  4F                 	db	79	;'O'
  1618  00FFF4  43                 	db	67	;'C'
  1619  00FFF5  54                 	db	84	;'T'
  1620  00FFF6  00                 	db	0
  1621  00FFF7                     STR_18:
  1622  00FFF7  4E                 	db	78	;'N'
  1623  00FFF8  4F                 	db	79	;'O'
  1624  00FFF9  56                 	db	86	;'V'
  1625  00FFFA  00                 	db	0
  1626  00FFFB                     STR_12:
  1627  00FFFB  4D                 	db	77	;'M'
  1628  00FFFC  41                 	db	65	;'A'
  1629  00FFFD  59                 	db	89	;'Y'
  1630  00FFFE  00                 	db	0
  1631  0000                     
  1632                           ; #config settings
  1633  00FFFF  00                 	db	0	; dummy byte at the end
  1634  0000                     
  1635                           	psect	cinit
  1636  004B68                     __pcinit:
  1637                           	opt stack 0
  1638  004B68                     start_initialization:
  1639                           	opt stack 0
  1640  004B68                     __initialization:
  1641                           	opt stack 0
  1642                           
  1643                           ; Initialize objects allocated to BANK1 (8 bytes)
  1644                           ; load TBLPTR registers with __pidataBANK1
  1645  004B68  0ECC               	movlw	low __pidataBANK1
  1646  004B6A  6EF6               	movwf	tblptrl,c
  1647  004B6C  0E52               	movlw	high __pidataBANK1
  1648  004B6E  6EF7               	movwf	tblptrh,c
  1649  004B70  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1650  004B72  6EF8               	movwf	tblptru,c
  1651  004B74  EE01  F041         	lfsr	0,__pdataBANK1
  1652  004B78  EE10 F008          	lfsr	1,8
  1653  004B7C                     copy_data0:
  1654  004B7C  0009               	tblrd		*+
  1655  004B7E  CFF5 FFEE          	movff	tablat,postinc0
  1656  004B82  50E5               	movf	postdec1,w,c
  1657  004B84  50E1               	movf	fsr1l,w,c
  1658  004B86  E1FA               	bnz	copy_data0
  1659                           
  1660                           ; Clear objects allocated to BANK1 (65 bytes)
  1661  004B88  EE01  F000         	lfsr	0,__pbssBANK1
  1662  004B8C  0E41               	movlw	65
  1663  004B8E                     clear_0:
  1664  004B8E  6AEE               	clrf	postinc0,c
  1665  004B90  06E8               	decf	wreg,f,c
  1666  004B92  E1FD               	bnz	clear_0
  1667                           
  1668                           ; Clear objects allocated to BANK0 (38 bytes)
  1669  004B94  EE00  F0DA         	lfsr	0,__pbssBANK0
  1670  004B98  0E26               	movlw	38
  1671  004B9A                     clear_1:
  1672  004B9A  6AEE               	clrf	postinc0,c
  1673  004B9C  06E8               	decf	wreg,f,c
  1674  004B9E  E1FD               	bnz	clear_1
  1675                           
  1676                           ; Clear objects allocated to COMRAM (35 bytes)
  1677  004BA0  EE00  F05B         	lfsr	0,__pbssCOMRAM
  1678  004BA4  0E23               	movlw	35
  1679  004BA6                     clear_2:
  1680  004BA6  6AEE               	clrf	postinc0,c
  1681  004BA8  06E8               	decf	wreg,f,c
  1682  004BAA  E1FD               	bnz	clear_2
  1683  004BAC                     end_of_initialization:
  1684                           	opt stack 0
  1685  004BAC                     __end_of__initialization:
  1686                           	opt stack 0
  1687  004BAC  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1688  004BAE  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1689  004BB0  0100               	movlb	0
  1690  004BB2  EFF1  F01F         	goto	_main	;jump to C main() function
  1691                           tblptru	equ	0xFF8
  1692                           tblptrh	equ	0xFF7
  1693                           tblptrl	equ	0xFF6
  1694                           tablat	equ	0xFF5
  1695                           postinc0	equ	0xFEE
  1696                           wreg	equ	0xFE8
  1697                           postdec1	equ	0xFE5
  1698                           fsr1l	equ	0xFE1
  1699                           
  1700                           	psect	bssCOMRAM
  1701  00005B                     __pbssCOMRAM:
  1702                           	opt stack 0
  1703  00005B                     _back:
  1704                           	opt stack 0
  1705  00005B                     	ds	2
  1706  00005D                     _down:
  1707                           	opt stack 0
  1708  00005D                     	ds	2
  1709  00005F                     _enter:
  1710                           	opt stack 0
  1711  00005F                     	ds	2
  1712  000061                     _f_panning_to_bin:
  1713                           	opt stack 0
  1714  000061                     	ds	2
  1715  000063                     _log_completion:
  1716                           	opt stack 0
  1717  000063                     	ds	2
  1718  000065                     _log_count_can_no_lab:
  1719                           	opt stack 0
  1720  000065                     	ds	2
  1721  000067                     _log_count_can_w_lab:
  1722                           	opt stack 0
  1723  000067                     	ds	2
  1724  000069                     _log_count_pop_no_tab:
  1725                           	opt stack 0
  1726  000069                     	ds	2
  1727  00006B                     _log_count_pop_w_tab:
  1728                           	opt stack 0
  1729  00006B                     	ds	2
  1730  00006D                     _most_recent_sort_time:
  1731                           	opt stack 0
  1732  00006D                     	ds	2
  1733  00006F                     _pan_servo_state:
  1734                           	opt stack 0
  1735  00006F                     	ds	2
  1736  000071                     _servo_timer_counter:
  1737                           	opt stack 0
  1738  000071                     	ds	2
  1739  000073                     _servo_timer_target:
  1740                           	opt stack 0
  1741  000073                     	ds	2
  1742  000075                     _tilt_servo_state:
  1743                           	opt stack 0
  1744  000075                     	ds	2
  1745  000077                     _up:
  1746                           	opt stack 0
  1747  000077                     	ds	2
  1748  000079                     _was_low_1:
  1749                           	opt stack 0
  1750  000079                     	ds	2
  1751  00007B                     _was_low_3:
  1752                           	opt stack 0
  1753  00007B                     	ds	2
  1754  00007D                     _input:
  1755                           	opt stack 0
  1756  00007D                     	ds	1
  1757                           tblptru	equ	0xFF8
  1758                           tblptrh	equ	0xFF7
  1759                           tblptrl	equ	0xFF6
  1760                           tablat	equ	0xFF5
  1761                           postinc0	equ	0xFEE
  1762                           wreg	equ	0xFE8
  1763                           postdec1	equ	0xFE5
  1764                           fsr1l	equ	0xFE1
  1765                           
  1766                           	psect	bssBANK0
  1767  0000DA                     __pbssBANK0:
  1768                           	opt stack 0
  1769  0000DA                     _servoTimes:
  1770                           	opt stack 0
  1771  0000DA                     	ds	8
  1772  0000E2                     _sensor_outputs:
  1773                           	opt stack 0
  1774  0000E2                     	ds	4
  1775  0000E6                     _IR_signal:
  1776                           	opt stack 0
  1777  0000E6                     	ds	2
  1778  0000E8                     _MAG_signal:
  1779                           	opt stack 0
  1780  0000E8                     	ds	2
  1781  0000EA                     _RTCflag:
  1782                           	opt stack 0
  1783  0000EA                     	ds	2
  1784  0000EC                     _cur_state:
  1785                           	opt stack 0
  1786  0000EC                     	ds	2
  1787  0000EE                     _f_lastCan:
  1788                           	opt stack 0
  1789  0000EE                     	ds	2
  1790  0000F0                     _f_loadingNewCan:
  1791                           	opt stack 0
  1792  0000F0                     	ds	2
  1793  0000F2                     _log:
  1794                           	opt stack 0
  1795  0000F2                     	ds	2
  1796  0000F4                     _log_total_time:
  1797                           	opt stack 0
  1798  0000F4                     	ds	2
  1799  0000F6                     _logstate:
  1800                           	opt stack 0
  1801  0000F6                     	ds	2
  1802  0000F8                     _total_time:
  1803                           	opt stack 0
  1804  0000F8                     	ds	2
  1805  0000FA                     _var:
  1806                           	opt stack 0
  1807  0000FA                     	ds	2
  1808  0000FC                     _machine_state:
  1809                           	opt stack 0
  1810  0000FC                     	ds	1
  1811  0000FD                     _sel:
  1812                           	opt stack 0
  1813  0000FD                     	ds	1
  1814  0000FE                     _count_total:
  1815                           	opt stack 0
  1816  0000FE                     	ds	2
  1817                           tblptru	equ	0xFF8
  1818                           tblptrh	equ	0xFF7
  1819                           tblptrl	equ	0xFF6
  1820                           tablat	equ	0xFF5
  1821                           postinc0	equ	0xFEE
  1822                           wreg	equ	0xFE8
  1823                           postdec1	equ	0xFE5
  1824                           fsr1l	equ	0xFE1
  1825                           
  1826                           	psect	bssBANK1
  1827  000100                     __pbssBANK1:
  1828                           	opt stack 0
  1829  000100                     _log_startTime:
  1830                           	opt stack 0
  1831  000100                     	ds	14
  1832  00010E                     _startTime:
  1833                           	opt stack 0
  1834  00010E                     	ds	14
  1835  00011C                     _time:
  1836                           	opt stack 0
  1837  00011C                     	ds	7
  1838  000123                     _count_can_no_lab:
  1839                           	opt stack 0
  1840  000123                     	ds	2
  1841  000125                     _count_can_w_lab:
  1842                           	opt stack 0
  1843  000125                     	ds	2
  1844  000127                     _count_pop_no_tab:
  1845                           	opt stack 0
  1846  000127                     	ds	2
  1847  000129                     _count_pop_w_tab:
  1848                           	opt stack 0
  1849  000129                     	ds	2
  1850  00012B                     _cur_can:
  1851                           	opt stack 0
  1852  00012B                     	ds	2
  1853  00012D                     _debug:
  1854                           	opt stack 0
  1855  00012D                     	ds	2
  1856  00012F                     _f_ID_receive:
  1857                           	opt stack 0
  1858  00012F                     	ds	2
  1859  000131                     _f_can_coming_to_ID:
  1860                           	opt stack 0
  1861  000131                     	ds	2
  1862  000133                     _f_can_coming_to_distribution:
  1863                           	opt stack 0
  1864  000133                     	ds	2
  1865  000135                     _f_can_distributed:
  1866                           	opt stack 0
  1867  000135                     	ds	2
  1868  000137                     _f_most_recent_sort_time:
  1869                           	opt stack 0
  1870  000137                     	ds	2
  1871  000139                     _first:
  1872                           	opt stack 0
  1873  000139                     	ds	2
  1874  00013B                     _firstboot:
  1875                           	opt stack 0
  1876  00013B                     	ds	2
  1877  00013D                     _i:
  1878                           	opt stack 0
  1879  00013D                     	ds	2
  1880  00013F                     _log_count_total:
  1881                           	opt stack 0
  1882  00013F                     	ds	2
  1883                           tblptru	equ	0xFF8
  1884                           tblptrh	equ	0xFF7
  1885                           tblptrl	equ	0xFF6
  1886                           tablat	equ	0xFF5
  1887                           postinc0	equ	0xFEE
  1888                           wreg	equ	0xFE8
  1889                           postdec1	equ	0xFE5
  1890                           fsr1l	equ	0xFE1
  1891                           
  1892                           	psect	dataBANK1
  1893  000141                     __pdataBANK1:
  1894                           	opt stack 0
  1895  000141                     UI@F3235:
  1896                           	opt stack 0
  1897  000141                     	ds	4
  1898  000145                     printRTC@F3226:
  1899                           	opt stack 0
  1900  000145                     	ds	4
  1901                           tblptru	equ	0xFF8
  1902                           tblptrh	equ	0xFF7
  1903                           tblptrl	equ	0xFF6
  1904                           tablat	equ	0xFF5
  1905                           postinc0	equ	0xFEE
  1906                           wreg	equ	0xFE8
  1907                           postdec1	equ	0xFE5
  1908                           fsr1l	equ	0xFE1
  1909                           
  1910                           	psect	cstackBANK0
  1911  000080                     __pcstackBANK0:
  1912                           	opt stack 0
  1913  000080                     ??_delay_ms:
  1914  000080                     ??_PortTests:
  1915  000080                     ??_isdigit:
  1916  000080                     ??_readADC:
  1917  000080                     ??_I2C_Master_Wait:
  1918  000080                     ?___wmul:
  1919                           	opt stack 0
  1920  000080                     ?___awmod:
  1921                           	opt stack 0
  1922  000080                     ?___lwdiv:
  1923                           	opt stack 0
  1924  000080                     ?___lldiv:
  1925                           	opt stack 0
  1926  000080                     lcdNibble@temp:
  1927                           	opt stack 0
  1928  000080                     initTime@m:
  1929                           	opt stack 0
  1930  000080                     updateServoPosition@time_us:
  1931                           	opt stack 0
  1932  000080                     EEPROM_read@address:
  1933                           	opt stack 0
  1934  000080                     ___wmul@multiplier:
  1935                           	opt stack 0
  1936  000080                     ___awmod@dividend:
  1937                           	opt stack 0
  1938  000080                     ___lwdiv@dividend:
  1939                           	opt stack 0
  1940  000080                     strcpy@to:
  1941                           	opt stack 0
  1942  000080                     ___lldiv@dividend:
  1943                           	opt stack 0
  1944                           
  1945                           ; 4 bytes @ 0x0
  1946  000080                     	ds	1
  1947  000081                     readADC@channel:
  1948                           	opt stack 0
  1949  000081                     I2C_Master_Read@a:
  1950                           	opt stack 0
  1951  000081                     lcdNibble@data:
  1952                           	opt stack 0
  1953  000081                     initTime@h:
  1954                           	opt stack 0
  1955  000081                     delay_ms@milliseconds:
  1956                           	opt stack 0
  1957  000081                     _isdigit$2057:
  1958                           	opt stack 0
  1959  000081                     I2C_Master_Write@d:
  1960                           	opt stack 0
  1961                           
  1962                           ; 2 bytes @ 0x1
  1963  000081                     	ds	1
  1964  000082                     ??_ID:
  1965  000082                     ??_readIR:
  1966  000082                     ??_readMAG:
  1967  000082                     I2C_Master_Read@temp:
  1968                           	opt stack 0
  1969  000082                     lcdInst@data:
  1970                           	opt stack 0
  1971  000082                     putch@data:
  1972                           	opt stack 0
  1973  000082                     initTime@w:
  1974                           	opt stack 0
  1975  000082                     isdigit@c:
  1976                           	opt stack 0
  1977  000082                     updateServoPosition@timer:
  1978                           	opt stack 0
  1979  000082                     ___wmul@multiplicand:
  1980                           	opt stack 0
  1981  000082                     ___awmod@divisor:
  1982                           	opt stack 0
  1983  000082                     ___lwdiv@divisor:
  1984                           	opt stack 0
  1985  000082                     strcpy@from:
  1986                           	opt stack 0
  1987                           
  1988                           ; 2 bytes @ 0x2
  1989  000082                     	ds	1
  1990  000083                     ??_initLCD:
  1991  000083                     initTime@DD:
  1992                           	opt stack 0
  1993  000083                     getRTC@i:
  1994                           	opt stack 0
  1995                           
  1996                           ; 2 bytes @ 0x3
  1997  000083                     	ds	1
  1998  000084                     ??_updateServoPosition:
  1999  000084                     initTime@MM:
  2000                           	opt stack 0
  2001  000084                     ___awmod@counter:
  2002                           	opt stack 0
  2003  000084                     readIR@res:
  2004                           	opt stack 0
  2005  000084                     readMAG@res:
  2006                           	opt stack 0
  2007  000084                     ID@i:
  2008                           	opt stack 0
  2009  000084                     ___wmul@product:
  2010                           	opt stack 0
  2011  000084                     ___lwdiv@quotient:
  2012                           	opt stack 0
  2013  000084                     strcpy@cp:
  2014                           	opt stack 0
  2015  000084                     ___lldiv@divisor:
  2016                           	opt stack 0
  2017                           
  2018                           ; 4 bytes @ 0x4
  2019  000084                     	ds	1
  2020  000085                     ??_initSortTimer:
  2021  000085                     initTime@YY:
  2022                           	opt stack 0
  2023  000085                     ___awmod@sign:
  2024                           	opt stack 0
  2025                           
  2026                           ; 1 bytes @ 0x5
  2027  000085                     	ds	1
  2028  000086                     ??_getIR:
  2029  000086                     ??_getMAG:
  2030  000086                     ?___awdiv:
  2031                           	opt stack 0
  2032  000086                     initTime@s:
  2033                           	opt stack 0
  2034  000086                     ___lwdiv@counter:
  2035                           	opt stack 0
  2036  000086                     ID@i_1173:
  2037                           	opt stack 0
  2038  000086                     updateServoPosition@my_time:
  2039                           	opt stack 0
  2040  000086                     ___awdiv@dividend:
  2041                           	opt stack 0
  2042                           
  2043                           ; 2 bytes @ 0x6
  2044  000086                     	ds	1
  2045  000087                     ?___lwmod:
  2046                           	opt stack 0
  2047  000087                     getIR@i:
  2048                           	opt stack 0
  2049  000087                     ___lwmod@dividend:
  2050                           	opt stack 0
  2051                           
  2052                           ; 2 bytes @ 0x7
  2053  000087                     	ds	1
  2054  000088                     ??_Distribution:
  2055  000088                     ??_initServos:
  2056  000088                     initSortTimer@i:
  2057                           	opt stack 0
  2058  000088                     ___awdiv@divisor:
  2059                           	opt stack 0
  2060  000088                     ___lldiv@quotient:
  2061                           	opt stack 0
  2062                           
  2063                           ; 4 bytes @ 0x8
  2064  000088                     	ds	1
  2065  000089                     ___lwmod@divisor:
  2066                           	opt stack 0
  2067                           
  2068                           ; 2 bytes @ 0x9
  2069  000089                     	ds	1
  2070  00008A                     ___awdiv@counter:
  2071                           	opt stack 0
  2072                           
  2073                           ; 1 bytes @ 0xA
  2074  00008A                     	ds	1
  2075  00008B                     ___awdiv@sign:
  2076                           	opt stack 0
  2077  00008B                     ___lwmod@counter:
  2078                           	opt stack 0
  2079                           
  2080                           ; 1 bytes @ 0xB
  2081  00008B                     	ds	1
  2082  00008C                     ___lldiv@counter:
  2083                           	opt stack 0
  2084  00008C                     ___awdiv@quotient:
  2085                           	opt stack 0
  2086                           
  2087                           ; 2 bytes @ 0xC
  2088  00008C                     	ds	1
  2089  00008D                     I2C_Master_Init@c:
  2090                           	opt stack 0
  2091                           
  2092                           ; 4 bytes @ 0xD
  2093  00008D                     	ds	1
  2094  00008E                     ?_printf:
  2095                           	opt stack 0
  2096  00008E                     printf@f:
  2097                           	opt stack 0
  2098                           
  2099                           ; 2 bytes @ 0xE
  2100  00008E                     	ds	3
  2101  000091                     ??_I2C_Master_Init:
  2102                           
  2103                           ; 1 bytes @ 0x11
  2104  000091                     	ds	4
  2105  000095                     ??_loadRTC:
  2106                           
  2107                           ; 1 bytes @ 0x15
  2108  000095                     	ds	1
  2109  000096                     loadRTC@i:
  2110                           	opt stack 0
  2111                           
  2112                           ; 2 bytes @ 0x16
  2113  000096                     	ds	4
  2114  00009A                     ??_printf:
  2115                           
  2116                           ; 1 bytes @ 0x1A
  2117  00009A                     	ds	4
  2118  00009E                     printf@prec:
  2119                           	opt stack 0
  2120                           
  2121                           ; 1 bytes @ 0x1E
  2122  00009E                     	ds	1
  2123  00009F                     printf@cp:
  2124                           	opt stack 0
  2125                           
  2126                           ; 2 bytes @ 0x1F
  2127  00009F                     	ds	2
  2128  0000A1                     printf@ap:
  2129                           	opt stack 0
  2130                           
  2131                           ; 2 bytes @ 0x21
  2132  0000A1                     	ds	2
  2133  0000A3                     printf@len:
  2134                           	opt stack 0
  2135                           
  2136                           ; 2 bytes @ 0x23
  2137  0000A3                     	ds	2
  2138  0000A5                     printf@val:
  2139                           	opt stack 0
  2140                           
  2141                           ; 2 bytes @ 0x25
  2142  0000A5                     	ds	2
  2143  0000A7                     printf@flag:
  2144                           	opt stack 0
  2145                           
  2146                           ; 1 bytes @ 0x27
  2147  0000A7                     	ds	1
  2148  0000A8                     printf@c:
  2149                           	opt stack 0
  2150                           
  2151                           ; 1 bytes @ 0x28
  2152  0000A8                     	ds	1
  2153  0000A9                     printf@width:
  2154                           	opt stack 0
  2155                           
  2156                           ; 2 bytes @ 0x29
  2157  0000A9                     	ds	2
  2158  0000AB                     ??_printRTC:
  2159  0000AB                     ??_algorithmTest:
  2160  0000AB                     ??_sensorTest:
  2161  0000AB                     ??_actuatorTest:
  2162  0000AB                     ??_PortTestA5:
  2163  0000AB                     ??_SpeedTest:
  2164  0000AB                     ??_PusherTest:
  2165  0000AB                     ??_BothServos:
  2166  0000AB                     ??_BlockerTest:
  2167  0000AB                     EEPROM_write@address:
  2168                           	opt stack 0
  2169                           
  2170                           ; 2 bytes @ 0x2B
  2171  0000AB                     	ds	1
  2172  0000AC                     BlockerTest@i:
  2173                           	opt stack 0
  2174                           
  2175                           ; 2 bytes @ 0x2C
  2176  0000AC                     	ds	1
  2177  0000AD                     EEPROM_write@data:
  2178                           	opt stack 0
  2179  0000AD                     actuatorTest@i_1733:
  2180                           	opt stack 0
  2181  0000AD                     sensorTest@res:
  2182                           	opt stack 0
  2183  0000AD                     PusherTest@res:
  2184                           	opt stack 0
  2185                           
  2186                           ; 2 bytes @ 0x2D
  2187  0000AD                     	ds	1
  2188  0000AE                     ??_EEPROM_write:
  2189  0000AE                     actuatorTest@i_1740:
  2190                           	opt stack 0
  2191  0000AE                     BlockerTest@cam_flag:
  2192                           	opt stack 0
  2193  0000AE                     printRTC@INT_time:
  2194                           	opt stack 0
  2195                           
  2196                           ; 14 bytes @ 0x2E
  2197  0000AE                     	ds	1
  2198  0000AF                     EEPROM_write@i:
  2199                           	opt stack 0
  2200  0000AF                     actuatorTest@i_1741:
  2201                           	opt stack 0
  2202  0000AF                     PusherTest@res_1788:
  2203                           	opt stack 0
  2204                           
  2205                           ; 2 bytes @ 0x2F
  2206  0000AF                     	ds	1
  2207  0000B0                     EEPROM_write@i_1397:
  2208                           	opt stack 0
  2209  0000B0                     actuatorTest@i_1743:
  2210                           	opt stack 0
  2211  0000B0                     BlockerTest@cond_flag:
  2212                           	opt stack 0
  2213                           
  2214                           ; 2 bytes @ 0x30
  2215  0000B0                     	ds	1
  2216  0000B1                     ??_Loading:
  2217  0000B1                     logRun@num:
  2218                           	opt stack 0
  2219  0000B1                     actuatorTest@i_1744:
  2220                           	opt stack 0
  2221  0000B1                     PusherTest@i:
  2222                           	opt stack 0
  2223                           
  2224                           ; 2 bytes @ 0x31
  2225  0000B1                     	ds	1
  2226  0000B2                     logRun@byte1:
  2227                           	opt stack 0
  2228  0000B2                     actuatorTest@i_1746:
  2229                           	opt stack 0
  2230                           
  2231                           ; 1 bytes @ 0x32
  2232  0000B2                     	ds	1
  2233  0000B3                     logRun@byte2:
  2234                           	opt stack 0
  2235  0000B3                     actuatorTest@i_1747:
  2236                           	opt stack 0
  2237  0000B3                     Loading@addr:
  2238                           	opt stack 0
  2239  0000B3                     PusherTest@i_1792:
  2240                           	opt stack 0
  2241                           
  2242                           ; 2 bytes @ 0x33
  2243  0000B3                     	ds	1
  2244  0000B4                     logRun@byte3:
  2245                           	opt stack 0
  2246  0000B4                     actuatorTest@i_1749:
  2247                           	opt stack 0
  2248                           
  2249                           ; 1 bytes @ 0x34
  2250  0000B4                     	ds	1
  2251  0000B5                     Loading@byte1:
  2252                           	opt stack 0
  2253  0000B5                     logRun@byte_i:
  2254                           	opt stack 0
  2255  0000B5                     actuatorTest@i_1750:
  2256                           	opt stack 0
  2257                           
  2258                           ; 1 bytes @ 0x35
  2259  0000B5                     	ds	1
  2260  0000B6                     logRun@byte11:
  2261                           	opt stack 0
  2262  0000B6                     actuatorTest@i_1752:
  2263                           	opt stack 0
  2264  0000B6                     Loading@i_1148:
  2265                           	opt stack 0
  2266                           
  2267                           ; 2 bytes @ 0x36
  2268  0000B6                     	ds	1
  2269  0000B7                     actuatorTest@i_1753:
  2270                           	opt stack 0
  2271  0000B7                     logRun@i:
  2272                           	opt stack 0
  2273                           
  2274                           ; 2 bytes @ 0x37
  2275  0000B7                     	ds	1
  2276  0000B8                     actuatorTest@i_1755:
  2277                           	opt stack 0
  2278  0000B8                     Loading@i_1157:
  2279                           	opt stack 0
  2280                           
  2281                           ; 2 bytes @ 0x38
  2282  0000B8                     	ds	1
  2283  0000B9                     actuatorTest@i_1756:
  2284                           	opt stack 0
  2285  0000B9                     logRun@addr:
  2286                           	opt stack 0
  2287                           
  2288                           ; 2 bytes @ 0x39
  2289  0000B9                     	ds	1
  2290  0000BA                     actuatorTest@i_1759:
  2291                           	opt stack 0
  2292  0000BA                     Loading@i_1159:
  2293                           	opt stack 0
  2294                           
  2295                           ; 2 bytes @ 0x3A
  2296  0000BA                     	ds	1
  2297  0000BB                     actuatorTest@i_1760:
  2298                           	opt stack 0
  2299                           
  2300                           ; 1 bytes @ 0x3B
  2301  0000BB                     	ds	1
  2302  0000BC                     actuatorTest@i_1762:
  2303                           	opt stack 0
  2304  0000BC                     printRTC@RTC_month:
  2305                           	opt stack 0
  2306  0000BC                     Loading@i_1160:
  2307                           	opt stack 0
  2308                           
  2309                           ; 2 bytes @ 0x3C
  2310  0000BC                     	ds	1
  2311  0000BD                     actuatorTest@i_1763:
  2312                           	opt stack 0
  2313                           
  2314                           ; 1 bytes @ 0x3D
  2315  0000BD                     	ds	1
  2316  0000BE                     actuatorTest@i_1765:
  2317                           	opt stack 0
  2318  0000BE                     Loading@i_1162:
  2319                           	opt stack 0
  2320  0000BE                     printRTC@month:
  2321                           	opt stack 0
  2322                           
  2323                           ; 4 bytes @ 0x3E
  2324  0000BE                     	ds	1
  2325  0000BF                     actuatorTest@i_1766:
  2326                           	opt stack 0
  2327                           
  2328                           ; 1 bytes @ 0x3F
  2329  0000BF                     	ds	1
  2330  0000C0                     actuatorTest@i_1769:
  2331                           	opt stack 0
  2332  0000C0                     Loading@j:
  2333                           	opt stack 0
  2334                           
  2335                           ; 2 bytes @ 0x40
  2336  0000C0                     	ds	1
  2337  0000C1                     actuatorTest@i_1770:
  2338                           	opt stack 0
  2339                           
  2340                           ; 1 bytes @ 0x41
  2341  0000C1                     	ds	1
  2342  0000C2                     actuatorTest@i_1772:
  2343                           	opt stack 0
  2344  0000C2                     printRTC@i:
  2345                           	opt stack 0
  2346  0000C2                     Loading@i:
  2347                           	opt stack 0
  2348                           
  2349                           ; 2 bytes @ 0x42
  2350  0000C2                     	ds	1
  2351  0000C3                     actuatorTest@i_1773:
  2352                           	opt stack 0
  2353                           
  2354                           ; 1 bytes @ 0x43
  2355  0000C3                     	ds	1
  2356  0000C4                     ??_UI:
  2357  0000C4                     actuatorTest@i:
  2358                           	opt stack 0
  2359                           
  2360                           ; 2 bytes @ 0x44
  2361  0000C4                     	ds	2
  2362  0000C6                     ??_Test:
  2363  0000C6                     _UI$2415:
  2364                           	opt stack 0
  2365                           
  2366                           ; 2 bytes @ 0x46
  2367  0000C6                     	ds	2
  2368  0000C8                     UI@i:
  2369                           	opt stack 0
  2370                           
  2371                           ; 1 bytes @ 0x48
  2372  0000C8                     	ds	1
  2373  0000C9                     UI@i_409:
  2374                           	opt stack 0
  2375                           
  2376                           ; 1 bytes @ 0x49
  2377  0000C9                     	ds	1
  2378  0000CA                     UI@i_412:
  2379                           	opt stack 0
  2380                           
  2381                           ; 1 bytes @ 0x4A
  2382  0000CA                     	ds	1
  2383  0000CB                     UI@i_413:
  2384                           	opt stack 0
  2385                           
  2386                           ; 1 bytes @ 0x4B
  2387  0000CB                     	ds	1
  2388  0000CC                     UI@i_431:
  2389                           	opt stack 0
  2390                           
  2391                           ; 1 bytes @ 0x4C
  2392  0000CC                     	ds	1
  2393  0000CD                     UI@i_432:
  2394                           	opt stack 0
  2395                           
  2396                           ; 1 bytes @ 0x4D
  2397  0000CD                     	ds	1
  2398  0000CE                     UI@i_435:
  2399                           	opt stack 0
  2400                           
  2401                           ; 1 bytes @ 0x4E
  2402  0000CE                     	ds	1
  2403  0000CF                     UI@i_436:
  2404                           	opt stack 0
  2405                           
  2406                           ; 1 bytes @ 0x4F
  2407  0000CF                     	ds	1
  2408  0000D0                     UI@i_439:
  2409                           	opt stack 0
  2410                           
  2411                           ; 1 bytes @ 0x50
  2412  0000D0                     	ds	1
  2413  0000D1                     UI@i_440:
  2414                           	opt stack 0
  2415                           
  2416                           ; 1 bytes @ 0x51
  2417  0000D1                     	ds	1
  2418  0000D2                     UI@i_443:
  2419                           	opt stack 0
  2420                           
  2421                           ; 1 bytes @ 0x52
  2422  0000D2                     	ds	1
  2423  0000D3                     UI@i_444:
  2424                           	opt stack 0
  2425                           
  2426                           ; 1 bytes @ 0x53
  2427  0000D3                     	ds	1
  2428  0000D4                     UI@i_447:
  2429                           	opt stack 0
  2430                           
  2431                           ; 1 bytes @ 0x54
  2432  0000D4                     	ds	1
  2433  0000D5                     UI@i_448:
  2434                           	opt stack 0
  2435                           
  2436                           ; 1 bytes @ 0x55
  2437  0000D5                     	ds	1
  2438  0000D6                     UI@month:
  2439                           	opt stack 0
  2440                           
  2441                           ; 4 bytes @ 0x56
  2442  0000D6                     	ds	4
  2443  0000DA                     tblptru	equ	0xFF8
  2444                           tblptrh	equ	0xFF7
  2445                           tblptrl	equ	0xFF6
  2446                           tablat	equ	0xFF5
  2447                           postinc0	equ	0xFEE
  2448                           wreg	equ	0xFE8
  2449                           postdec1	equ	0xFE5
  2450                           fsr1l	equ	0xFE1
  2451                           
  2452                           ; 1 bytes @ 0x5A
  2453                           
  2454                           	psect	cstackCOMRAM
  2455  000001                     __pcstackCOMRAM:
  2456                           	opt stack 0
  2457  000001                     ??i2_I2C_Master_Wait:
  2458  000001                     ??i2_delay_ms:
  2459  000001                     ??i2_isdigit:
  2460  000001                     ?i2___wmul:
  2461                           	opt stack 0
  2462  000001                     ?i2___lwmod:
  2463                           	opt stack 0
  2464  000001                     i2lcdNibble@temp:
  2465                           	opt stack 0
  2466  000001                     i2updateServoPosition@time_us:
  2467                           	opt stack 0
  2468  000001                     i2EEPROM_read@address:
  2469                           	opt stack 0
  2470  000001                     i2___wmul@multiplier:
  2471                           	opt stack 0
  2472  000001                     i2___lwmod@dividend:
  2473                           	opt stack 0
  2474  000001                     i2strcpy@to:
  2475                           	opt stack 0
  2476                           
  2477                           ; 2 bytes @ 0x0
  2478  000001                     	ds	1
  2479  000002                     i2I2C_Master_Read@a:
  2480                           	opt stack 0
  2481  000002                     i2lcdNibble@data:
  2482                           	opt stack 0
  2483  000002                     i2delay_ms@milliseconds:
  2484                           	opt stack 0
  2485  000002                     i2_isdigit$2057:
  2486                           	opt stack 0
  2487  000002                     i2I2C_Master_Write@d:
  2488                           	opt stack 0
  2489                           
  2490                           ; 2 bytes @ 0x1
  2491  000002                     	ds	1
  2492  000003                     i2I2C_Master_Read@temp:
  2493                           	opt stack 0
  2494  000003                     i2lcdInst@data:
  2495                           	opt stack 0
  2496  000003                     i2putch@data:
  2497                           	opt stack 0
  2498  000003                     i2isdigit@c:
  2499                           	opt stack 0
  2500  000003                     i2updateServoPosition@timer:
  2501                           	opt stack 0
  2502  000003                     i2___wmul@multiplicand:
  2503                           	opt stack 0
  2504  000003                     i2___lwmod@divisor:
  2505                           	opt stack 0
  2506  000003                     i2strcpy@from:
  2507                           	opt stack 0
  2508                           
  2509                           ; 2 bytes @ 0x2
  2510  000003                     	ds	1
  2511  000004                     i2getRTC@i:
  2512                           	opt stack 0
  2513                           
  2514                           ; 2 bytes @ 0x3
  2515  000004                     	ds	1
  2516  000005                     ??i2_updateServoPosition:
  2517  000005                     i2___lwmod@counter:
  2518                           	opt stack 0
  2519  000005                     i2___wmul@product:
  2520                           	opt stack 0
  2521  000005                     i2strcpy@cp:
  2522                           	opt stack 0
  2523                           
  2524                           ; 2 bytes @ 0x4
  2525  000005                     	ds	1
  2526  000006                     ?i2___lwdiv:
  2527                           	opt stack 0
  2528  000006                     i2___lwdiv@dividend:
  2529                           	opt stack 0
  2530                           
  2531                           ; 2 bytes @ 0x5
  2532  000006                     	ds	1
  2533  000007                     retrieveLog@logNum:
  2534                           	opt stack 0
  2535  000007                     i2updateServoPosition@my_time:
  2536                           	opt stack 0
  2537                           
  2538                           ; 2 bytes @ 0x6
  2539  000007                     	ds	1
  2540  000008                     i2___lwdiv@divisor:
  2541                           	opt stack 0
  2542                           
  2543                           ; 2 bytes @ 0x7
  2544  000008                     	ds	1
  2545  000009                     ??_retrieveLog:
  2546  000009                     ??_updateServoStates:
  2547                           
  2548                           ; 1 bytes @ 0x8
  2549  000009                     	ds	1
  2550  00000A                     i2___lwdiv@quotient:
  2551                           	opt stack 0
  2552                           
  2553                           ; 2 bytes @ 0x9
  2554  00000A                     	ds	1
  2555  00000B                     retrieveLog@byte1:
  2556                           	opt stack 0
  2557                           
  2558                           ; 1 bytes @ 0xA
  2559  00000B                     	ds	1
  2560  00000C                     retrieveLog@byte2:
  2561                           	opt stack 0
  2562  00000C                     i2___lwdiv@counter:
  2563                           	opt stack 0
  2564                           
  2565                           ; 1 bytes @ 0xB
  2566  00000C                     	ds	1
  2567  00000D                     ?i2_printf:
  2568                           	opt stack 0
  2569  00000D                     retrieveLog@byte3:
  2570                           	opt stack 0
  2571  00000D                     i2printf@f:
  2572                           	opt stack 0
  2573                           
  2574                           ; 2 bytes @ 0xC
  2575  00000D                     	ds	1
  2576  00000E                     retrieveLog@i:
  2577                           	opt stack 0
  2578                           
  2579                           ; 2 bytes @ 0xD
  2580  00000E                     	ds	2
  2581  000010                     retrieveLog@addr:
  2582                           	opt stack 0
  2583                           
  2584                           ; 2 bytes @ 0xF
  2585  000010                     	ds	2
  2586  000012                     dispLogs@myLog:
  2587                           	opt stack 0
  2588                           
  2589                           ; 2 bytes @ 0x11
  2590  000012                     	ds	2
  2591  000014                     
  2592                           ; 1 bytes @ 0x13
  2593  000014                     	ds	5
  2594  000019                     ??i2_printf:
  2595                           
  2596                           ; 1 bytes @ 0x18
  2597  000019                     	ds	4
  2598  00001D                     i2printf@prec:
  2599                           	opt stack 0
  2600                           
  2601                           ; 1 bytes @ 0x1C
  2602  00001D                     	ds	1
  2603  00001E                     i2printf@cp:
  2604                           	opt stack 0
  2605                           
  2606                           ; 2 bytes @ 0x1D
  2607  00001E                     	ds	2
  2608  000020                     i2printf@ap:
  2609                           	opt stack 0
  2610                           
  2611                           ; 2 bytes @ 0x1F
  2612  000020                     	ds	2
  2613  000022                     i2printf@len:
  2614                           	opt stack 0
  2615                           
  2616                           ; 2 bytes @ 0x21
  2617  000022                     	ds	2
  2618  000024                     i2printf@val:
  2619                           	opt stack 0
  2620                           
  2621                           ; 2 bytes @ 0x23
  2622  000024                     	ds	2
  2623  000026                     i2printf@flag:
  2624                           	opt stack 0
  2625                           
  2626                           ; 1 bytes @ 0x25
  2627  000026                     	ds	1
  2628  000027                     i2printf@c:
  2629                           	opt stack 0
  2630                           
  2631                           ; 1 bytes @ 0x26
  2632  000027                     	ds	1
  2633  000028                     i2printf@width:
  2634                           	opt stack 0
  2635                           
  2636                           ; 2 bytes @ 0x27
  2637  000028                     	ds	2
  2638  00002A                     ??_printSortTimer:
  2639  00002A                     ??i2_printRTC:
  2640  00002A                     ?_inputHandler:
  2641                           	opt stack 0
  2642                           
  2643                           ; 2 bytes @ 0x29
  2644  00002A                     	ds	2
  2645  00002C                     ??_inputHandler:
  2646                           
  2647                           ; 1 bytes @ 0x2B
  2648  00002C                     	ds	1
  2649  00002D                     printSortTimer@curTime:
  2650                           	opt stack 0
  2651  00002D                     i2printRTC@INT_time:
  2652                           	opt stack 0
  2653                           
  2654                           ; 14 bytes @ 0x2C
  2655  00002D                     	ds	14
  2656  00003B                     printSortTimer@start_sec:
  2657                           	opt stack 0
  2658  00003B                     i2printRTC@RTC_month:
  2659                           	opt stack 0
  2660                           
  2661                           ; 2 bytes @ 0x3A
  2662  00003B                     	ds	2
  2663  00003D                     printSortTimer@cur_sec:
  2664                           	opt stack 0
  2665  00003D                     i2printRTC@month:
  2666                           	opt stack 0
  2667                           
  2668                           ; 4 bytes @ 0x3C
  2669  00003D                     	ds	2
  2670  00003F                     printSortTimer@min:
  2671                           	opt stack 0
  2672                           
  2673                           ; 2 bytes @ 0x3E
  2674  00003F                     	ds	2
  2675  000041                     printSortTimer@sec:
  2676                           	opt stack 0
  2677  000041                     i2printRTC@i:
  2678                           	opt stack 0
  2679                           
  2680                           ; 2 bytes @ 0x40
  2681  000041                     	ds	2
  2682  000043                     ??_updateMenu:
  2683  000043                     _printSortTimer$2547:
  2684                           	opt stack 0
  2685                           
  2686                           ; 2 bytes @ 0x42
  2687  000043                     	ds	2
  2688  000045                     printSortTimer@timeDiff:
  2689                           	opt stack 0
  2690                           
  2691                           ; 2 bytes @ 0x44
  2692  000045                     	ds	2
  2693  000047                     printSortTimer@i_1185:
  2694                           	opt stack 0
  2695                           
  2696                           ; 2 bytes @ 0x46
  2697  000047                     	ds	2
  2698  000049                     printSortTimer@i:
  2699                           	opt stack 0
  2700                           
  2701                           ; 2 bytes @ 0x48
  2702  000049                     	ds	2
  2703  00004B                     ??_handler:
  2704                           
  2705                           ; 1 bytes @ 0x4A
  2706  00004B                     	ds	16
  2707                           tblptru	equ	0xFF8
  2708                           tblptrh	equ	0xFF7
  2709                           tblptrl	equ	0xFF6
  2710                           tablat	equ	0xFF5
  2711                           postinc0	equ	0xFEE
  2712                           wreg	equ	0xFE8
  2713                           postdec1	equ	0xFE5
  2714                           fsr1l	equ	0xFE1
  2715                           
  2716 ;;
  2717 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2718 ;;
  2719 ;; *************** function _main *****************
  2720 ;; Defined at:
  2721 ;;		line 19 in file "main.c"
  2722 ;; Parameters:    Size  Location     Type
  2723 ;;		None
  2724 ;; Auto vars:     Size  Location     Type
  2725 ;;		None
  2726 ;; Return value:  Size  Location     Type
  2727 ;;                  1    wreg      void 
  2728 ;; Registers used:
  2729 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2730 ;; Tracked objects:
  2731 ;;		On entry : 0/0
  2732 ;;		On exit  : 0/0
  2733 ;;		Unchanged: 0/0
  2734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2735 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2736 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2737 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2738 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2739 ;;Total ram usage:        0 bytes
  2740 ;; Hardware stack levels required when called:   13
  2741 ;; This function calls:
  2742 ;;		_I2C_Master_Init
  2743 ;;		_Test
  2744 ;;		_UI
  2745 ;;		_initLCD
  2746 ;;		_initTime
  2747 ;;		_initUI
  2748 ;;		_logRun
  2749 ;;		_machineConfig
  2750 ;;		_sort
  2751 ;;		_stopSignals
  2752 ;; This function is called by:
  2753 ;;		Startup code after reset
  2754 ;; This function uses a non-reentrant model
  2755 ;;
  2756                           
  2757                           	psect	text0
  2758  003FE2                     __ptext0:
  2759                           	opt stack 0
  2760  003FE2                     _main:
  2761                           	opt stack 18
  2762                           
  2763                           ;main.c: 20: machineConfig();
  2764                           
  2765                           ;incstack = 0
  2766  003FE2  ECD7  F024         	call	_machineConfig	;wreg free
  2767                           
  2768                           ;main.c: 21: initLCD();
  2769  003FE6  EC27  F026         	call	_initLCD	;wreg free
  2770                           
  2771                           ;main.c: 24: RTCflag = 0;
  2772  003FEA  0E00               	movlw	0
  2773  003FEC  0100               	movlb	0	; () banked
  2774  003FEE  6FEB               	movwf	(_RTCflag+1)& (0+255),b
  2775  003FF0  0E00               	movlw	0
  2776  003FF2  6FEA               	movwf	_RTCflag& (0+255),b
  2777                           
  2778                           ;main.c: 25: if(RTCflag){
  2779  003FF4  0100               	movlb	0	; () banked
  2780  003FF6  51EA               	movf	_RTCflag& (0+255),w,b
  2781  003FF8  0100               	movlb	0	; () banked
  2782  003FFA  11EB               	iorwf	(_RTCflag+1)& (0+255),w,b
  2783  003FFC  B4D8               	btfsc	status,2,c
  2784  003FFE  D016               	goto	l9339
  2785                           
  2786                           ; BSR set to: 0
  2787                           ;main.c: 26: initTime(0x42, 0x20, 0x15, 0x04, 0x15, 0x03, 0x17);
  2788  004000  0E20               	movlw	32
  2789  004002  0100               	movlb	0	; () banked
  2790  004004  6F80               	movwf	initTime@m& (0+255),b
  2791  004006  0E15               	movlw	21
  2792  004008  0100               	movlb	0	; () banked
  2793  00400A  6F81               	movwf	initTime@h& (0+255),b
  2794  00400C  0E04               	movlw	4
  2795  00400E  0100               	movlb	0	; () banked
  2796  004010  6F82               	movwf	initTime@w& (0+255),b
  2797  004012  0E15               	movlw	21
  2798  004014  0100               	movlb	0	; () banked
  2799  004016  6F83               	movwf	initTime@DD& (0+255),b
  2800  004018  0E03               	movlw	3
  2801  00401A  0100               	movlb	0	; () banked
  2802  00401C  6F84               	movwf	initTime@MM& (0+255),b
  2803  00401E  0E17               	movlw	23
  2804  004020  0100               	movlb	0	; () banked
  2805  004022  6F85               	movwf	initTime@YY& (0+255),b
  2806  004024  0E42               	movlw	66
  2807  004026  ECDB  F028         	call	_initTime
  2808                           
  2809                           ;main.c: 27: }
  2810  00402A  D00B               	goto	l9341
  2811  00402C                     l9339:
  2812                           
  2813                           ;main.c: 28: else{
  2814                           ;main.c: 29: I2C_Master_Init(10000);
  2815  00402C  0E10               	movlw	16
  2816  00402E  0100               	movlb	0	; () banked
  2817  004030  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  2818  004032  0E27               	movlw	39
  2819  004034  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  2820  004036  0E00               	movlw	0
  2821  004038  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  2822  00403A  0E00               	movlw	0
  2823  00403C  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  2824  00403E  ECA7  F024         	call	_I2C_Master_Init	;wreg free
  2825  004042                     l9341:
  2826                           
  2827                           ;main.c: 30: }
  2828                           ;main.c: 32: initUI();
  2829  004042  EC0B  F027         	call	_initUI	;wreg free
  2830                           
  2831                           ;main.c: 33: first = 1;
  2832  004046  0E00               	movlw	0
  2833  004048  0101               	movlb	1	; () banked
  2834  00404A  6F3A               	movwf	(_first+1)& (0+255),b
  2835  00404C  0E01               	movlw	1
  2836  00404E  6F39               	movwf	_first& (0+255),b
  2837                           
  2838                           ; BSR set to: 1
  2839                           ;main.c: 44: switch(machine_state){
  2840                           
  2841                           ;main.c: 43: while(1){
  2842  004050  D018               	goto	l9363
  2843  004052                     l9345:
  2844                           
  2845                           ;main.c: 46: UI();
  2846  004052  EC65  F004         	call	_UI	;wreg free
  2847                           
  2848                           ;main.c: 47: break;
  2849  004056  D015               	goto	l9363
  2850  004058                     l9347:
  2851                           
  2852                           ;main.c: 49: sort();
  2853  004058  ECCA  F028         	call	_sort	;wreg free
  2854                           
  2855                           ;main.c: 50: break;
  2856  00405C  D012               	goto	l9363
  2857  00405E                     l9349:
  2858                           
  2859                           ;main.c: 52: stopSignals();
  2860  00405E  EC09  F029         	call	_stopSignals	;wreg free
  2861                           
  2862                           ;main.c: 53: logRun();
  2863  004062  ECEC  F01C         	call	_logRun	;wreg free
  2864                           
  2865                           ;main.c: 54: first = 1;
  2866  004066  0E00               	movlw	0
  2867  004068  0101               	movlb	1	; () banked
  2868  00406A  6F3A               	movwf	(_first+1)& (0+255),b
  2869  00406C  0E01               	movlw	1
  2870  00406E  6F39               	movwf	_first& (0+255),b
  2871                           
  2872                           ; BSR set to: 1
  2873                           ;main.c: 55: UI();
  2874  004070  EC65  F004         	call	_UI	;wreg free
  2875                           
  2876                           ;main.c: 56: break;
  2877  004074  D006               	goto	l9363
  2878  004076                     l9357:
  2879                           
  2880                           ;main.c: 58: Test();
  2881  004076  EC1C  F01E         	call	_Test	;wreg free
  2882                           
  2883                           ;main.c: 59: break;
  2884  00407A  D003               	goto	l9363
  2885  00407C                     l9359:
  2886                           
  2887                           ;main.c: 61: stopSignals();
  2888  00407C  EC09  F029         	call	_stopSignals	;wreg free
  2889  004080                     l491:
  2890  004080  D7FF               	goto	l491
  2891  004082                     l9363:
  2892  004082  0100               	movlb	0	; () banked
  2893  004084  51FC               	movf	_machine_state& (0+255),w,b
  2894                           
  2895                           ; Switch size 1, requested type "space"
  2896                           ; Number of cases is 5, Range of values is 0 to 4
  2897                           ; switch strategies available:
  2898                           ; Name         Instructions Cycles
  2899                           ; simple_byte           16     9 (average)
  2900                           ;	Chosen strategy is simple_byte
  2901  004086  0A00               	xorlw	0	; case 0
  2902  004088  B4D8               	btfsc	status,2,c
  2903  00408A  D7E3               	goto	l9345
  2904  00408C  0A01               	xorlw	1	; case 1
  2905  00408E  B4D8               	btfsc	status,2,c
  2906  004090  D7E3               	goto	l9347
  2907  004092  0A03               	xorlw	3	; case 2
  2908  004094  B4D8               	btfsc	status,2,c
  2909  004096  D7E3               	goto	l9349
  2910  004098  0A01               	xorlw	1	; case 3
  2911  00409A  B4D8               	btfsc	status,2,c
  2912  00409C  D7EC               	goto	l9357
  2913  00409E  0A07               	xorlw	7	; case 4
  2914  0040A0  B4D8               	btfsc	status,2,c
  2915  0040A2  D7EC               	goto	l9359
  2916                           
  2917                           ; BSR set to: 0
  2918                           
  2919                           ; BSR set to: 0
  2920  0040A4  D7EE               	goto	l9363
  2921  0040A6                     __end_of_main:
  2922                           	opt stack 0
  2923                           tblptru	equ	0xFF8
  2924                           tblptrh	equ	0xFF7
  2925                           tblptrl	equ	0xFF6
  2926                           tablat	equ	0xFF5
  2927                           postinc0	equ	0xFEE
  2928                           wreg	equ	0xFE8
  2929                           postdec1	equ	0xFE5
  2930                           fsr1l	equ	0xFE1
  2931                           status	equ	0xFD8
  2932                           
  2933 ;; *************** function _stopSignals *****************
  2934 ;; Defined at:
  2935 ;;		line 70 in file "main.c"
  2936 ;; Parameters:    Size  Location     Type
  2937 ;;		None
  2938 ;; Auto vars:     Size  Location     Type
  2939 ;;		None
  2940 ;; Return value:  Size  Location     Type
  2941 ;;                  1    wreg      void 
  2942 ;; Registers used:
  2943 ;;		wreg, status,2
  2944 ;; Tracked objects:
  2945 ;;		On entry : 0/0
  2946 ;;		On exit  : 0/0
  2947 ;;		Unchanged: 0/0
  2948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2949 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2950 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2951 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2952 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2953 ;;Total ram usage:        0 bytes
  2954 ;; Hardware stack levels used:    1
  2955 ;; Hardware stack levels required when called:    7
  2956 ;; This function calls:
  2957 ;;		Nothing
  2958 ;; This function is called by:
  2959 ;;		_main
  2960 ;; This function uses a non-reentrant model
  2961 ;;
  2962                           
  2963                           	psect	text1
  2964  005212                     __ptext1:
  2965                           	opt stack 0
  2966  005212                     _stopSignals:
  2967                           	opt stack 23
  2968                           
  2969                           ;main.c: 71: LATA = 0x00;
  2970                           
  2971                           ; BSR set to: 0
  2972                           ;incstack = 0
  2973  005212  0E00               	movlw	0
  2974  005214  6E89               	movwf	3977,c	;volatile
  2975                           
  2976                           ;main.c: 72: LATB = 0x00;
  2977  005216  0E00               	movlw	0
  2978  005218  6E8A               	movwf	3978,c	;volatile
  2979                           
  2980                           ;main.c: 73: LATC = 0x00;
  2981  00521A  0E00               	movlw	0
  2982  00521C  6E8B               	movwf	3979,c	;volatile
  2983                           
  2984                           ;main.c: 74: LATD = 0x00;
  2985  00521E  0E00               	movlw	0
  2986  005220  6E8C               	movwf	3980,c	;volatile
  2987                           
  2988                           ;main.c: 75: LATE = 0x00;
  2989  005222  0E00               	movlw	0
  2990  005224  6E8D               	movwf	3981,c	;volatile
  2991                           
  2992                           ;main.c: 76: TMR1ON = 0;
  2993  005226  90CD               	bcf	4045,0,c	;volatile
  2994                           
  2995                           ;main.c: 77: TMR3ON = 0;
  2996  005228  90B1               	bcf	4017,0,c	;volatile
  2997  00522A  0012               	return		;funcret
  2998  00522C                     __end_of_stopSignals:
  2999                           	opt stack 0
  3000                           tblptru	equ	0xFF8
  3001                           tblptrh	equ	0xFF7
  3002                           tblptrl	equ	0xFF6
  3003                           tablat	equ	0xFF5
  3004                           postinc0	equ	0xFEE
  3005                           wreg	equ	0xFE8
  3006                           postdec1	equ	0xFE5
  3007                           fsr1l	equ	0xFE1
  3008                           status	equ	0xFD8
  3009                           
  3010 ;; *************** function _sort *****************
  3011 ;; Defined at:
  3012 ;;		line 63 in file "sort.c"
  3013 ;; Parameters:    Size  Location     Type
  3014 ;;		None
  3015 ;; Auto vars:     Size  Location     Type
  3016 ;;		None
  3017 ;; Return value:  Size  Location     Type
  3018 ;;                  1    wreg      void 
  3019 ;; Registers used:
  3020 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3021 ;; Tracked objects:
  3022 ;;		On entry : 0/0
  3023 ;;		On exit  : 0/0
  3024 ;;		Unchanged: 0/0
  3025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3026 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3027 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3028 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3029 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3030 ;;Total ram usage:        0 bytes
  3031 ;; Hardware stack levels used:    1
  3032 ;; Hardware stack levels required when called:   12
  3033 ;; This function calls:
  3034 ;;		_Distribution
  3035 ;;		_ID
  3036 ;;		_Loading
  3037 ;; This function is called by:
  3038 ;;		_main
  3039 ;; This function uses a non-reentrant model
  3040 ;;
  3041                           
  3042                           	psect	text2
  3043  005194                     __ptext2:
  3044                           	opt stack 0
  3045  005194                     _sort:
  3046                           	opt stack 18
  3047                           
  3048                           ;sort.c: 64: if(machine_state == Sorting_state){
  3049                           
  3050                           ;incstack = 0
  3051  005194  0100               	movlb	0	; () banked
  3052  005196  05FC               	decf	_machine_state& (0+255),w,b
  3053  005198  B4D8               	btfsc	status,2,c
  3054                           
  3055                           ; BSR set to: 0
  3056                           ;sort.c: 65: Loading();
  3057  00519A  ECB6  F008         	call	_Loading	;wreg free
  3058                           
  3059                           ;sort.c: 66: }
  3060                           ;sort.c: 67: if(machine_state == Sorting_state){
  3061  00519E  0100               	movlb	0	; () banked
  3062  0051A0  05FC               	decf	_machine_state& (0+255),w,b
  3063  0051A2  B4D8               	btfsc	status,2,c
  3064                           
  3065                           ; BSR set to: 0
  3066                           ;sort.c: 68: ID();
  3067  0051A4  EC6E  F018         	call	_ID	;wreg free
  3068                           
  3069                           ;sort.c: 69: }
  3070                           ;sort.c: 70: if(machine_state == Sorting_state){
  3071  0051A8  0100               	movlb	0	; () banked
  3072  0051AA  05FC               	decf	_machine_state& (0+255),w,b
  3073  0051AC  A4D8               	btfss	status,2,c
  3074  0051AE  0012               	return	
  3075                           
  3076                           ; BSR set to: 0
  3077                           ;sort.c: 71: Distribution();
  3078  0051B0  EC1A  F01F         	call	_Distribution	;wreg free
  3079  0051B4  0012               	return	
  3080  0051B6                     __end_of_sort:
  3081                           	opt stack 0
  3082                           tblptru	equ	0xFF8
  3083                           tblptrh	equ	0xFF7
  3084                           tblptrl	equ	0xFF6
  3085                           tablat	equ	0xFF5
  3086                           postinc0	equ	0xFEE
  3087                           wreg	equ	0xFE8
  3088                           postdec1	equ	0xFE5
  3089                           fsr1l	equ	0xFE1
  3090                           status	equ	0xFD8
  3091                           
  3092 ;; *************** function _Loading *****************
  3093 ;; Defined at:
  3094 ;;		line 75 in file "sort.c"
  3095 ;; Parameters:    Size  Location     Type
  3096 ;;		None
  3097 ;; Auto vars:     Size  Location     Type
  3098 ;;  i               2   62[BANK0 ] int 
  3099 ;;  i               2   60[BANK0 ] int 
  3100 ;;  i               2   58[BANK0 ] int 
  3101 ;;  i               2   56[BANK0 ] int 
  3102 ;;  i               2   54[BANK0 ] int 
  3103 ;;  j               2   64[BANK0 ] int 
  3104 ;;  i               2   66[BANK0 ] int 
  3105 ;;  addr            2   51[BANK0 ] unsigned short 
  3106 ;;  byte1           1   53[BANK0 ] unsigned char 
  3107 ;; Return value:  Size  Location     Type
  3108 ;;                  1    wreg      void 
  3109 ;; Registers used:
  3110 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3111 ;; Tracked objects:
  3112 ;;		On entry : 0/0
  3113 ;;		On exit  : 0/0
  3114 ;;		Unchanged: 0/0
  3115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3116 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3117 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3118 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3119 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3120 ;;Total ram usage:       19 bytes
  3121 ;; Hardware stack levels used:    1
  3122 ;; Hardware stack levels required when called:   11
  3123 ;; This function calls:
  3124 ;;		_EEPROM_read
  3125 ;;		_EEPROM_write
  3126 ;;		_delay_ms
  3127 ;;		_getIR
  3128 ;;		_getMAG
  3129 ;;		_initGlobalVars
  3130 ;;		_initServos
  3131 ;;		_initSortTimer
  3132 ;;		_lcdInst
  3133 ;;		_readIR
  3134 ;; This function is called by:
  3135 ;;		_sort
  3136 ;; This function uses a non-reentrant model
  3137 ;;
  3138                           
  3139                           	psect	text3
  3140  00116C                     __ptext3:
  3141                           	opt stack 0
  3142  00116C                     _Loading:
  3143                           	opt stack 18
  3144                           
  3145                           ;sort.c: 76: if(first){
  3146                           
  3147                           ;incstack = 0
  3148  00116C  0101               	movlb	1	; () banked
  3149  00116E  5139               	movf	_first& (0+255),w,b
  3150  001170  0101               	movlb	1	; () banked
  3151  001172  113A               	iorwf	(_first+1)& (0+255),w,b
  3152  001174  B4D8               	btfsc	status,2,c
  3153  001176  D066               	goto	l7221
  3154                           
  3155                           ; BSR set to: 1
  3156                           ;sort.c: 77: initGlobalVars();
  3157  001178  EC10  F021         	call	_initGlobalVars	;wreg free
  3158                           
  3159                           ;sort.c: 78: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  3160  00117C  0E01               	movlw	1
  3161  00117E  EC48  F029         	call	_lcdInst
  3162  001182  0E68               	movlw	104
  3163  001184  0100               	movlb	0	; () banked
  3164  001186  6FB1               	movwf	??_Loading& (0+255),b
  3165  001188  0EE4               	movlw	228
  3166  00118A                     u8477:
  3167  00118A  2EE8               	decfsz	wreg,f,c
  3168  00118C  D7FE               	bra	u8477
  3169  00118E  2FB1               	decfsz	??_Loading& (0+255),f,b
  3170  001190  D7FC               	bra	u8477
  3171  001192  F000               	nop	
  3172                           
  3173                           ;sort.c: 79: initSortTimer();
  3174  001194  EC66  F021         	call	_initSortTimer	;wreg free
  3175                           
  3176                           ;sort.c: 80: LATCbits.LATC5 = 1;
  3177  001198  8A8B               	bsf	3979,5,c	;volatile
  3178                           
  3179                           ;sort.c: 85: sel = EEPROM_read(0);
  3180  00119A  0E00               	movlw	0
  3181  00119C  0100               	movlb	0	; () banked
  3182  00119E  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  3183  0011A0  0E00               	movlw	0
  3184  0011A2  6F80               	movwf	EEPROM_read@address& (0+255),b
  3185  0011A4  EC16  F029         	call	_EEPROM_read	;wreg free
  3186  0011A8  0100               	movlb	0	; () banked
  3187  0011AA  6FFD               	movwf	_sel& (0+255),b
  3188                           
  3189                           ; BSR set to: 0
  3190                           ;sort.c: 86: unsigned short addr = 1 + 11 * sel;
  3191  0011AC  0100               	movlb	0	; () banked
  3192  0011AE  51FD               	movf	_sel& (0+255),w,b
  3193  0011B0  0D0B               	mullw	11
  3194  0011B2  0E01               	movlw	1
  3195  0011B4  24F3               	addwf	prodl,w,c
  3196  0011B6  0100               	movlb	0	; () banked
  3197  0011B8  6FB3               	movwf	Loading@addr& (0+255),b
  3198  0011BA  0E00               	movlw	0
  3199  0011BC  20F4               	addwfc	prodh,w,c
  3200  0011BE  0100               	movlb	0	; () banked
  3201  0011C0  6FB4               	movwf	(Loading@addr+1)& (0+255),b
  3202                           
  3203                           ; BSR set to: 0
  3204                           ;sort.c: 87: unsigned char byte1 = 0b01111111;
  3205  0011C2  0E7F               	movlw	127
  3206  0011C4  0100               	movlb	0	; () banked
  3207  0011C6  6FB5               	movwf	Loading@byte1& (0+255),b
  3208                           
  3209                           ; BSR set to: 0
  3210                           ;sort.c: 88: EEPROM_write(addr, byte1);
  3211  0011C8  C0B3  F0AB         	movff	Loading@addr,EEPROM_write@address
  3212  0011CC  C0B4  F0AC         	movff	Loading@addr+1,EEPROM_write@address+1
  3213  0011D0  C0B5  F0AD         	movff	Loading@byte1,EEPROM_write@data
  3214  0011D4  ECA6  F01E         	call	_EEPROM_write	;wreg free
  3215                           
  3216                           ;sort.c: 91: LATBbits.LATB2 = 0;
  3217  0011D8  948A               	bcf	3978,2,c	;volatile
  3218                           
  3219                           ;sort.c: 93: for(int i=0; i<46; i++){
  3220  0011DA  0E00               	movlw	0
  3221  0011DC  0100               	movlb	0	; () banked
  3222  0011DE  6FC3               	movwf	(Loading@i+1)& (0+255),b
  3223  0011E0  0E00               	movlw	0
  3224  0011E2  6FC2               	movwf	Loading@i& (0+255),b
  3225                           
  3226                           ; BSR set to: 0
  3227  0011E4  0100               	movlb	0	; () banked
  3228  0011E6  BFC3               	btfsc	(Loading@i+1)& (0+255),7,b
  3229  0011E8  D008               	goto	l7211
  3230  0011EA  0100               	movlb	0	; () banked
  3231  0011EC  51C3               	movf	(Loading@i+1)& (0+255),w,b
  3232  0011EE  E126               	bnz	l752
  3233  0011F0  0E2E               	movlw	46
  3234  0011F2  0100               	movlb	0	; () banked
  3235  0011F4  5DC2               	subwf	Loading@i& (0+255),w,b
  3236  0011F6  B0D8               	btfsc	status,0,c
  3237  0011F8  D021               	goto	l752
  3238  0011FA                     l7211:
  3239                           
  3240                           ; BSR set to: 0
  3241                           ;sort.c: 94: LATBbits.LATB2 = !LATBbits.LATB2;
  3242  0011FA  B48A               	btfsc	3978,2,c	;volatile
  3243  0011FC  D004               	goto	u5550
  3244  0011FE  0100               	movlb	0	; () banked
  3245  001200  6BB1               	clrf	??_Loading& (0+255),b
  3246  001202  2BB1               	incf	??_Loading& (0+255),f,b
  3247  001204  D002               	goto	u5568
  3248  001206                     u5550:
  3249  001206  0100               	movlb	0	; () banked
  3250  001208  6BB1               	clrf	??_Loading& (0+255),b
  3251  00120A                     u5568:
  3252  00120A  0100               	movlb	0	; () banked
  3253  00120C  47B1               	rlncf	??_Loading& (0+255),f,b
  3254  00120E  47B1               	rlncf	??_Loading& (0+255),f,b
  3255  001210  508A               	movf	3978,w,c	;volatile
  3256  001212  0100               	movlb	0	; () banked
  3257  001214  19B1               	xorwf	??_Loading& (0+255),w,b
  3258  001216  0BFB               	andlw	-5
  3259  001218  19B1               	xorwf	??_Loading& (0+255),w,b
  3260  00121A  6E8A               	movwf	3978,c	;volatile
  3261                           
  3262                           ; BSR set to: 0
  3263                           ;sort.c: 95: delay_ms(45-i);
  3264  00121C  0100               	movlb	0	; () banked
  3265  00121E  51C2               	movf	Loading@i& (0+255),w,b
  3266  001220  0800               	sublw	0
  3267  001222  0F2D               	addlw	45
  3268  001224  EC6A  F028         	call	_delay_ms
  3269  001228  0100               	movlb	0	; () banked
  3270  00122A  4BC2               	infsnz	Loading@i& (0+255),f,b
  3271  00122C  2BC3               	incf	(Loading@i+1)& (0+255),f,b
  3272                           
  3273                           ; BSR set to: 0
  3274  00122E  0100               	movlb	0	; () banked
  3275  001230  BFC3               	btfsc	(Loading@i+1)& (0+255),7,b
  3276  001232  D7E3               	goto	l7211
  3277  001234  0100               	movlb	0	; () banked
  3278  001236  51C3               	movf	(Loading@i+1)& (0+255),w,b
  3279  001238  E101               	bnz	u5570
  3280  00123A  D7DA               	goto	L1
  3281  00123C                     u5570:
  3282  00123C                     l752:
  3283                           
  3284                           ; BSR set to: 0
  3285                           ;sort.c: 96: }
  3286                           ;sort.c: 97: LATBbits.LATB2 = 1;
  3287  00123C  848A               	bsf	3978,2,c	;volatile
  3288                           
  3289                           ; BSR set to: 0
  3290                           ;sort.c: 100: initServos();
  3291  00123E  EC33  F025         	call	_initServos	;wreg free
  3292                           
  3293                           ;sort.c: 101: }
  3294  001242  0012               	return	
  3295  001244                     l7221:
  3296                           
  3297                           ;sort.c: 102: else{
  3298                           ;sort.c: 105: if(!f_loadingNewCan){
  3299  001244  0100               	movlb	0	; () banked
  3300  001246  51F0               	movf	_f_loadingNewCan& (0+255),w,b
  3301  001248  0100               	movlb	0	; () banked
  3302  00124A  11F1               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3303  00124C  A4D8               	btfss	status,2,c
  3304  00124E  D018               	goto	l7237
  3305                           
  3306                           ; BSR set to: 0
  3307                           ;sort.c: 107: getIR();
  3308  001250  EC98  F023         	call	_getIR	;wreg free
  3309                           
  3310                           ;sort.c: 109: if(!f_loadingNewCan){
  3311  001254  0100               	movlb	0	; () banked
  3312  001256  51F0               	movf	_f_loadingNewCan& (0+255),w,b
  3313  001258  0100               	movlb	0	; () banked
  3314  00125A  11F1               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3315  00125C  B4D8               	btfsc	status,2,c
  3316  00125E  0012               	return	
  3317                           
  3318                           ; BSR set to: 0
  3319                           ;sort.c: 113: else{
  3320                           ;sort.c: 114: count_total++;
  3321                           
  3322                           ; BSR set to: 0
  3323                           
  3324                           ; BSR set to: 0
  3325                           ;sort.c: 111: }
  3326                           
  3327                           ; BSR set to: 0
  3328                           ;sort.c: 110: return;
  3329  001260  0100               	movlb	0	; () banked
  3330  001262  4BFE               	infsnz	_count_total& (0+255),f,b
  3331  001264  2BFF               	incf	(_count_total+1)& (0+255),f,b
  3332                           
  3333                           ; BSR set to: 0
  3334                           ;sort.c: 115: if(count_total == 12){
  3335  001266  0E0C               	movlw	12
  3336  001268  0100               	movlb	0	; () banked
  3337  00126A  19FE               	xorwf	_count_total& (0+255),w,b
  3338  00126C  0100               	movlb	0	; () banked
  3339  00126E  11FF               	iorwf	(_count_total+1)& (0+255),w,b
  3340  001270  A4D8               	btfss	status,2,c
  3341  001272  0012               	return	
  3342                           
  3343                           ; BSR set to: 0
  3344                           ;sort.c: 116: f_lastCan = 1;
  3345  001274  0E00               	movlw	0
  3346  001276  0100               	movlb	0	; () banked
  3347  001278  6FEF               	movwf	(_f_lastCan+1)& (0+255),b
  3348  00127A  0E01               	movlw	1
  3349  00127C  6FEE               	movwf	_f_lastCan& (0+255),b
  3350                           
  3351                           ; BSR set to: 0
  3352                           ;sort.c: 117: }
  3353                           ;sort.c: 118: }
  3354                           ;sort.c: 119: }
  3355                           
  3356                           ; BSR set to: 0
  3357  00127E  0012               	return	
  3358  001280                     l7237:
  3359                           
  3360                           ; BSR set to: 0
  3361                           ;sort.c: 122: else if(f_ID_receive){
  3362  001280  0101               	movlb	1	; () banked
  3363  001282  512F               	movf	_f_ID_receive& (0+255),w,b
  3364  001284  0101               	movlb	1	; () banked
  3365  001286  1130               	iorwf	(_f_ID_receive+1)& (0+255),w,b
  3366  001288  B4D8               	btfsc	status,2,c
  3367  00128A  0012               	return	
  3368                           
  3369                           ; BSR set to: 1
  3370                           ;sort.c: 123: f_loadingNewCan = 0;
  3371  00128C  0E00               	movlw	0
  3372  00128E  0100               	movlb	0	; () banked
  3373  001290  6FF1               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3374  001292  0E00               	movlw	0
  3375  001294  6FF0               	movwf	_f_loadingNewCan& (0+255),b
  3376                           
  3377                           ; BSR set to: 0
  3378                           ;sort.c: 124: _delay((unsigned long)((750)*(32000000/4000.0)));
  3379  001296  0E1F               	movlw	31
  3380  001298  0100               	movlb	0	; () banked
  3381  00129A  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3382  00129C  0E71               	movlw	113
  3383  00129E  0100               	movlb	0	; () banked
  3384  0012A0  6FB1               	movwf	??_Loading& (0+255),b
  3385  0012A2  0E1E               	movlw	30
  3386  0012A4                     u8487:
  3387  0012A4  2EE8               	decfsz	wreg,f,c
  3388  0012A6  D7FE               	bra	u8487
  3389  0012A8  2FB1               	decfsz	??_Loading& (0+255),f,b
  3390  0012AA  D7FC               	bra	u8487
  3391  0012AC  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3392  0012AE  D7FA               	bra	u8487
  3393  0012B0  F000               	nop	
  3394                           
  3395                           ;sort.c: 125: LATBbits.LATB2 = 0;
  3396  0012B2  948A               	bcf	3978,2,c	;volatile
  3397                           
  3398                           ;sort.c: 129: getMAG();
  3399  0012B4  ECD9  F026         	call	_getMAG	;wreg free
  3400                           
  3401                           ;sort.c: 130: sensor_outputs[0] = MAG_signal;
  3402  0012B8  C0E8  F0E2         	movff	_MAG_signal,_sensor_outputs
  3403  0012BC  C0E9  F0E3         	movff	_MAG_signal+1,_sensor_outputs+1
  3404                           
  3405                           ;sort.c: 132: if(sensor_outputs[0]){
  3406  0012C0  0100               	movlb	0	; () banked
  3407  0012C2  51E2               	movf	_sensor_outputs& (0+255),w,b
  3408  0012C4  0100               	movlb	0	; () banked
  3409  0012C6  11E3               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3410  0012C8  B4D8               	btfsc	status,2,c
  3411  0012CA  D01D               	goto	l7263
  3412                           
  3413                           ; BSR set to: 0
  3414                           ;sort.c: 133: for(int i = 0; i<2500; i++){
  3415  0012CC  0E00               	movlw	0
  3416  0012CE  0100               	movlb	0	; () banked
  3417  0012D0  6FB7               	movwf	(Loading@i_1148+1)& (0+255),b
  3418  0012D2  0E00               	movlw	0
  3419  0012D4  6FB6               	movwf	Loading@i_1148& (0+255),b
  3420  0012D6                     l7253:
  3421                           
  3422                           ; BSR set to: 0
  3423  0012D6  0100               	movlb	0	; () banked
  3424  0012D8  BFB7               	btfsc	(Loading@i_1148+1)& (0+255),7,b
  3425  0012DA  D008               	goto	l762
  3426  0012DC  0EC4               	movlw	196
  3427  0012DE  0100               	movlb	0	; () banked
  3428  0012E0  5DB6               	subwf	Loading@i_1148& (0+255),w,b
  3429  0012E2  0E09               	movlw	9
  3430  0012E4  0100               	movlb	0	; () banked
  3431  0012E6  59B7               	subwfb	(Loading@i_1148+1)& (0+255),w,b
  3432  0012E8  B0D8               	btfsc	status,0,c
  3433  0012EA  D02A               	goto	l7275
  3434  0012EC                     l762:
  3435                           
  3436                           ; BSR set to: 0
  3437                           ;sort.c: 134: LATAbits.LATA4 = 1;
  3438  0012EC  8889               	bsf	3977,4,c	;volatile
  3439                           
  3440                           ; BSR set to: 0
  3441                           ;sort.c: 135: _delay((unsigned long)((75)*(32000000/4000000.0)));
  3442  0012EE  0EC8               	movlw	200
  3443  0012F0                     u8497:
  3444  0012F0  2EE8               	decfsz	wreg,f,c
  3445  0012F2  D7FE               	bra	u8497
  3446                           
  3447                           ;sort.c: 136: LATAbits.LATA4 = 0;
  3448  0012F4  9889               	bcf	3977,4,c	;volatile
  3449                           
  3450                           ;sort.c: 137: _delay((unsigned long)((25)*(32000000/4000000.0)));
  3451  0012F6  0E42               	movlw	66
  3452  0012F8                     u8507:
  3453  0012F8  2EE8               	decfsz	wreg,f,c
  3454  0012FA  D7FE               	bra	u8507
  3455  0012FC  D000               	nop2	
  3456  0012FE  0100               	movlb	0	; () banked
  3457  001300  4BB6               	infsnz	Loading@i_1148& (0+255),f,b
  3458  001302  2BB7               	incf	(Loading@i_1148+1)& (0+255),f,b
  3459  001304  D7E8               	goto	l7253
  3460  001306                     l7263:
  3461                           
  3462                           ; BSR set to: 0
  3463                           ;sort.c: 140: else{
  3464                           ;sort.c: 141: for(int i = 0; i<2500; i++){
  3465  001306  0E00               	movlw	0
  3466  001308  0100               	movlb	0	; () banked
  3467  00130A  6FB9               	movwf	(Loading@i_1157+1)& (0+255),b
  3468  00130C  0E00               	movlw	0
  3469  00130E  6FB8               	movwf	Loading@i_1157& (0+255),b
  3470  001310                     l7265:
  3471                           
  3472                           ; BSR set to: 0
  3473  001310  0100               	movlb	0	; () banked
  3474  001312  BFB9               	btfsc	(Loading@i_1157+1)& (0+255),7,b
  3475  001314  D008               	goto	l765
  3476  001316  0EC4               	movlw	196
  3477  001318  0100               	movlb	0	; () banked
  3478  00131A  5DB8               	subwf	Loading@i_1157& (0+255),w,b
  3479  00131C  0E09               	movlw	9
  3480  00131E  0100               	movlb	0	; () banked
  3481  001320  59B9               	subwfb	(Loading@i_1157+1)& (0+255),w,b
  3482  001322  B0D8               	btfsc	status,0,c
  3483  001324  D00D               	goto	l7275
  3484  001326                     l765:
  3485                           
  3486                           ; BSR set to: 0
  3487                           ;sort.c: 142: LATAbits.LATA4 = 1;
  3488  001326  8889               	bsf	3977,4,c	;volatile
  3489                           
  3490                           ; BSR set to: 0
  3491                           ;sort.c: 143: _delay((unsigned long)((58)*(32000000/4000000.0)));
  3492  001328  0E9A               	movlw	154
  3493  00132A                     u8517:
  3494  00132A  2EE8               	decfsz	wreg,f,c
  3495  00132C  D7FE               	bra	u8517
  3496  00132E  D000               	nop2	
  3497                           
  3498                           ;sort.c: 144: LATAbits.LATA4 = 0;
  3499  001330  9889               	bcf	3977,4,c	;volatile
  3500                           
  3501                           ;sort.c: 145: _delay((unsigned long)((42)*(32000000/4000000.0)));
  3502  001332  0E70               	movlw	112
  3503  001334                     u8527:
  3504  001334  2EE8               	decfsz	wreg,f,c
  3505  001336  D7FE               	bra	u8527
  3506  001338  0100               	movlb	0	; () banked
  3507  00133A  4BB8               	infsnz	Loading@i_1157& (0+255),f,b
  3508  00133C  2BB9               	incf	(Loading@i_1157+1)& (0+255),f,b
  3509  00133E  D7E8               	goto	l7265
  3510  001340                     l7275:
  3511                           
  3512                           ; BSR set to: 0
  3513                           ;sort.c: 146: }
  3514                           ;sort.c: 147: }
  3515                           ;sort.c: 149: _delay((unsigned long)((350)*(32000000/4000.0)));
  3516  001340  0E0F               	movlw	15
  3517  001342  0100               	movlb	0	; () banked
  3518  001344  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3519  001346  0E35               	movlw	53
  3520  001348  0100               	movlb	0	; () banked
  3521  00134A  6FB1               	movwf	??_Loading& (0+255),b
  3522  00134C  0E51               	movlw	81
  3523  00134E                     u8537:
  3524  00134E  2EE8               	decfsz	wreg,f,c
  3525  001350  D7FE               	bra	u8537
  3526  001352  2FB1               	decfsz	??_Loading& (0+255),f,b
  3527  001354  D7FC               	bra	u8537
  3528  001356  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3529  001358  D7FA               	bra	u8537
  3530                           
  3531                           ;sort.c: 151: readIR();
  3532  00135A  ECDB  F025         	call	_readIR	;wreg free
  3533                           
  3534                           ;sort.c: 152: if(IR_signal==1){
  3535  00135E  0100               	movlb	0	; () banked
  3536  001360  05E6               	decf	_IR_signal& (0+255),w,b
  3537  001362  0100               	movlb	0	; () banked
  3538  001364  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  3539  001366  A4D8               	btfss	status,2,c
  3540  001368  D147               	goto	l7393
  3541                           
  3542                           ; BSR set to: 0
  3543                           ;sort.c: 153: _delay((unsigned long)((100)*(32000000/4000.0)));
  3544  00136A  0E05               	movlw	5
  3545  00136C  0100               	movlb	0	; () banked
  3546  00136E  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3547  001370  0E0F               	movlw	15
  3548  001372  0100               	movlb	0	; () banked
  3549  001374  6FB1               	movwf	??_Loading& (0+255),b
  3550  001376  0EF1               	movlw	241
  3551  001378                     u8547:
  3552  001378  2EE8               	decfsz	wreg,f,c
  3553  00137A  D7FE               	bra	u8547
  3554  00137C  2FB1               	decfsz	??_Loading& (0+255),f,b
  3555  00137E  D7FC               	bra	u8547
  3556  001380  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3557  001382  D7FA               	bra	u8547
  3558                           
  3559                           ;sort.c: 154: readIR();
  3560  001384  ECDB  F025         	call	_readIR	;wreg free
  3561                           
  3562                           ;sort.c: 155: if(IR_signal==1){
  3563  001388  0100               	movlb	0	; () banked
  3564  00138A  05E6               	decf	_IR_signal& (0+255),w,b
  3565  00138C  0100               	movlb	0	; () banked
  3566  00138E  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  3567  001390  A4D8               	btfss	status,2,c
  3568  001392  D040               	goto	l7313
  3569                           
  3570                           ; BSR set to: 0
  3571                           ;sort.c: 156: if(sensor_outputs[0]){
  3572  001394  0100               	movlb	0	; () banked
  3573  001396  51E2               	movf	_sensor_outputs& (0+255),w,b
  3574  001398  0100               	movlb	0	; () banked
  3575  00139A  11E3               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3576  00139C  B4D8               	btfsc	status,2,c
  3577  00139E  D01D               	goto	l7301
  3578                           
  3579                           ; BSR set to: 0
  3580                           ;sort.c: 157: for(int i = 0; i<2500; i++){
  3581  0013A0  0E00               	movlw	0
  3582  0013A2  0100               	movlb	0	; () banked
  3583  0013A4  6FBB               	movwf	(Loading@i_1159+1)& (0+255),b
  3584  0013A6  0E00               	movlw	0
  3585  0013A8  6FBA               	movwf	Loading@i_1159& (0+255),b
  3586  0013AA                     l7291:
  3587                           
  3588                           ; BSR set to: 0
  3589  0013AA  0100               	movlb	0	; () banked
  3590  0013AC  BFBB               	btfsc	(Loading@i_1159+1)& (0+255),7,b
  3591  0013AE  D008               	goto	l770
  3592  0013B0  0EC4               	movlw	196
  3593  0013B2  0100               	movlb	0	; () banked
  3594  0013B4  5DBA               	subwf	Loading@i_1159& (0+255),w,b
  3595  0013B6  0E09               	movlw	9
  3596  0013B8  0100               	movlb	0	; () banked
  3597  0013BA  59BB               	subwfb	(Loading@i_1159+1)& (0+255),w,b
  3598  0013BC  B0D8               	btfsc	status,0,c
  3599  0013BE  D02A               	goto	l7313
  3600  0013C0                     l770:
  3601                           
  3602                           ; BSR set to: 0
  3603                           ;sort.c: 158: LATAbits.LATA4 = 1;
  3604  0013C0  8889               	bsf	3977,4,c	;volatile
  3605                           
  3606                           ; BSR set to: 0
  3607                           ;sort.c: 159: _delay((unsigned long)((75)*(32000000/4000000.0)));
  3608  0013C2  0EC8               	movlw	200
  3609  0013C4                     u8557:
  3610  0013C4  2EE8               	decfsz	wreg,f,c
  3611  0013C6  D7FE               	bra	u8557
  3612                           
  3613                           ;sort.c: 160: LATAbits.LATA4 = 0;
  3614  0013C8  9889               	bcf	3977,4,c	;volatile
  3615                           
  3616                           ;sort.c: 161: _delay((unsigned long)((25)*(32000000/4000000.0)));
  3617  0013CA  0E42               	movlw	66
  3618  0013CC                     u8567:
  3619  0013CC  2EE8               	decfsz	wreg,f,c
  3620  0013CE  D7FE               	bra	u8567
  3621  0013D0  D000               	nop2	
  3622  0013D2  0100               	movlb	0	; () banked
  3623  0013D4  4BBA               	infsnz	Loading@i_1159& (0+255),f,b
  3624  0013D6  2BBB               	incf	(Loading@i_1159+1)& (0+255),f,b
  3625  0013D8  D7E8               	goto	l7291
  3626  0013DA                     l7301:
  3627                           
  3628                           ; BSR set to: 0
  3629                           ;sort.c: 164: else{
  3630                           ;sort.c: 165: for(int i = 0; i<2500; i++){
  3631  0013DA  0E00               	movlw	0
  3632  0013DC  0100               	movlb	0	; () banked
  3633  0013DE  6FBD               	movwf	(Loading@i_1160+1)& (0+255),b
  3634  0013E0  0E00               	movlw	0
  3635  0013E2  6FBC               	movwf	Loading@i_1160& (0+255),b
  3636  0013E4                     l7303:
  3637                           
  3638                           ; BSR set to: 0
  3639  0013E4  0100               	movlb	0	; () banked
  3640  0013E6  BFBD               	btfsc	(Loading@i_1160+1)& (0+255),7,b
  3641  0013E8  D008               	goto	l773
  3642  0013EA  0EC4               	movlw	196
  3643  0013EC  0100               	movlb	0	; () banked
  3644  0013EE  5DBC               	subwf	Loading@i_1160& (0+255),w,b
  3645  0013F0  0E09               	movlw	9
  3646  0013F2  0100               	movlb	0	; () banked
  3647  0013F4  59BD               	subwfb	(Loading@i_1160+1)& (0+255),w,b
  3648  0013F6  B0D8               	btfsc	status,0,c
  3649  0013F8  D00D               	goto	l7313
  3650  0013FA                     l773:
  3651                           
  3652                           ; BSR set to: 0
  3653                           ;sort.c: 166: LATAbits.LATA4 = 1;
  3654  0013FA  8889               	bsf	3977,4,c	;volatile
  3655                           
  3656                           ; BSR set to: 0
  3657                           ;sort.c: 167: _delay((unsigned long)((58)*(32000000/4000000.0)));
  3658  0013FC  0E9A               	movlw	154
  3659  0013FE                     u8577:
  3660  0013FE  2EE8               	decfsz	wreg,f,c
  3661  001400  D7FE               	bra	u8577
  3662  001402  D000               	nop2	
  3663                           
  3664                           ;sort.c: 168: LATAbits.LATA4 = 0;
  3665  001404  9889               	bcf	3977,4,c	;volatile
  3666                           
  3667                           ;sort.c: 169: _delay((unsigned long)((42)*(32000000/4000000.0)));
  3668  001406  0E70               	movlw	112
  3669  001408                     u8587:
  3670  001408  2EE8               	decfsz	wreg,f,c
  3671  00140A  D7FE               	bra	u8587
  3672  00140C  0100               	movlb	0	; () banked
  3673  00140E  4BBC               	infsnz	Loading@i_1160& (0+255),f,b
  3674  001410  2BBD               	incf	(Loading@i_1160+1)& (0+255),f,b
  3675  001412  D7E8               	goto	l7303
  3676  001414                     l7313:
  3677                           
  3678                           ; BSR set to: 0
  3679                           ;sort.c: 170: }
  3680                           ;sort.c: 171: }
  3681                           ;sort.c: 172: }
  3682                           ;sort.c: 174: _delay((unsigned long)((350)*(32000000/4000.0)));
  3683  001414  0E0F               	movlw	15
  3684  001416  0100               	movlb	0	; () banked
  3685  001418  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3686  00141A  0E35               	movlw	53
  3687  00141C  0100               	movlb	0	; () banked
  3688  00141E  6FB1               	movwf	??_Loading& (0+255),b
  3689  001420  0E51               	movlw	81
  3690  001422                     u8597:
  3691  001422  2EE8               	decfsz	wreg,f,c
  3692  001424  D7FE               	bra	u8597
  3693  001426  2FB1               	decfsz	??_Loading& (0+255),f,b
  3694  001428  D7FC               	bra	u8597
  3695  00142A  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3696  00142C  D7FA               	bra	u8597
  3697                           
  3698                           ;sort.c: 176: int j = 1;
  3699  00142E  0E00               	movlw	0
  3700  001430  0100               	movlb	0	; () banked
  3701  001432  6FC1               	movwf	(Loading@j+1)& (0+255),b
  3702  001434  0E01               	movlw	1
  3703  001436  6FC0               	movwf	Loading@j& (0+255),b
  3704                           
  3705                           ;sort.c: 177: while(IR_signal == 1){
  3706  001438  D0D8               	goto	l7391
  3707  00143A                     l7317:
  3708                           
  3709                           ; BSR set to: 0
  3710                           ;sort.c: 178: readIR();
  3711  00143A  ECDB  F025         	call	_readIR	;wreg free
  3712                           
  3713                           ;sort.c: 179: if(j == 10){
  3714  00143E  0E0A               	movlw	10
  3715  001440  0100               	movlb	0	; () banked
  3716  001442  19C0               	xorwf	Loading@j& (0+255),w,b
  3717  001444  0100               	movlb	0	; () banked
  3718  001446  11C1               	iorwf	(Loading@j+1)& (0+255),w,b
  3719  001448  A4D8               	btfss	status,2,c
  3720  00144A  D016               	goto	l7325
  3721                           
  3722                           ; BSR set to: 0
  3723                           ;sort.c: 180: LATBbits.LATB2 = !LATBbits.LATB2;
  3724  00144C  B48A               	btfsc	3978,2,c	;volatile
  3725  00144E  D004               	goto	u5750
  3726  001450  0100               	movlb	0	; () banked
  3727  001452  6BB1               	clrf	??_Loading& (0+255),b
  3728  001454  2BB1               	incf	??_Loading& (0+255),f,b
  3729  001456  D002               	goto	u5768
  3730  001458                     u5750:
  3731  001458  0100               	movlb	0	; () banked
  3732  00145A  6BB1               	clrf	??_Loading& (0+255),b
  3733  00145C                     u5768:
  3734  00145C  0100               	movlb	0	; () banked
  3735  00145E  47B1               	rlncf	??_Loading& (0+255),f,b
  3736  001460  47B1               	rlncf	??_Loading& (0+255),f,b
  3737  001462  508A               	movf	3978,w,c	;volatile
  3738  001464  0100               	movlb	0	; () banked
  3739  001466  19B1               	xorwf	??_Loading& (0+255),w,b
  3740  001468  0BFB               	andlw	-5
  3741  00146A  19B1               	xorwf	??_Loading& (0+255),w,b
  3742  00146C  6E8A               	movwf	3978,c	;volatile
  3743                           
  3744                           ; BSR set to: 0
  3745                           ;sort.c: 181: j = 0;
  3746  00146E  0E00               	movlw	0
  3747  001470  0100               	movlb	0	; () banked
  3748  001472  6FC1               	movwf	(Loading@j+1)& (0+255),b
  3749  001474  0E00               	movlw	0
  3750  001476  6FC0               	movwf	Loading@j& (0+255),b
  3751  001478                     l7325:
  3752                           
  3753                           ; BSR set to: 0
  3754                           ;sort.c: 182: }
  3755                           ;sort.c: 183: if(IR_signal==1){
  3756  001478  0100               	movlb	0	; () banked
  3757  00147A  05E6               	decf	_IR_signal& (0+255),w,b
  3758  00147C  0100               	movlb	0	; () banked
  3759  00147E  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  3760  001480  A4D8               	btfss	status,2,c
  3761  001482  D098               	goto	l7379
  3762                           
  3763                           ; BSR set to: 0
  3764                           ;sort.c: 184: _delay((unsigned long)((350)*(32000000/4000.0)));
  3765  001484  0E0F               	movlw	15
  3766  001486  0100               	movlb	0	; () banked
  3767  001488  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3768  00148A  0E35               	movlw	53
  3769  00148C  0100               	movlb	0	; () banked
  3770  00148E  6FB1               	movwf	??_Loading& (0+255),b
  3771  001490  0E51               	movlw	81
  3772  001492                     u8607:
  3773  001492  2EE8               	decfsz	wreg,f,c
  3774  001494  D7FE               	bra	u8607
  3775  001496  2FB1               	decfsz	??_Loading& (0+255),f,b
  3776  001498  D7FC               	bra	u8607
  3777  00149A  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3778  00149C  D7FA               	bra	u8607
  3779                           
  3780                           ;sort.c: 185: readIR();
  3781  00149E  ECDB  F025         	call	_readIR	;wreg free
  3782                           
  3783                           ;sort.c: 186: if(IR_signal==1){
  3784  0014A2  0100               	movlb	0	; () banked
  3785  0014A4  05E6               	decf	_IR_signal& (0+255),w,b
  3786  0014A6  0100               	movlb	0	; () banked
  3787  0014A8  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  3788  0014AA  A4D8               	btfss	status,2,c
  3789  0014AC  D07F               	goto	l779
  3790                           
  3791                           ; BSR set to: 0
  3792                           ;sort.c: 187: if(sensor_outputs[0]){
  3793  0014AE  0100               	movlb	0	; () banked
  3794  0014B0  51E2               	movf	_sensor_outputs& (0+255),w,b
  3795  0014B2  0100               	movlb	0	; () banked
  3796  0014B4  11E3               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3797  0014B6  B4D8               	btfsc	status,2,c
  3798  0014B8  D011               	goto	l7341
  3799                           
  3800                           ; BSR set to: 0
  3801                           ;sort.c: 188: LATAbits.LATA4 = 1;
  3802  0014BA  8889               	bsf	3977,4,c	;volatile
  3803                           
  3804                           ; BSR set to: 0
  3805                           ;sort.c: 189: _delay((unsigned long)((250)*(32000000/4000.0)));
  3806  0014BC  0E0B               	movlw	11
  3807  0014BE  0100               	movlb	0	; () banked
  3808  0014C0  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3809  0014C2  0E26               	movlw	38
  3810  0014C4  0100               	movlb	0	; () banked
  3811  0014C6  6FB1               	movwf	??_Loading& (0+255),b
  3812  0014C8  0E5D               	movlw	93
  3813  0014CA                     u8617:
  3814  0014CA  2EE8               	decfsz	wreg,f,c
  3815  0014CC  D7FE               	bra	u8617
  3816  0014CE  2FB1               	decfsz	??_Loading& (0+255),f,b
  3817  0014D0  D7FC               	bra	u8617
  3818  0014D2  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3819  0014D4  D7FA               	bra	u8617
  3820  0014D6  D000               	nop2	
  3821                           
  3822                           ;sort.c: 190: LATAbits.LATA4 = 0;
  3823  0014D8  9889               	bcf	3977,4,c	;volatile
  3824                           
  3825                           ;sort.c: 191: }
  3826  0014DA  D068               	goto	l779
  3827  0014DC                     l7341:
  3828                           
  3829                           ;sort.c: 192: else{
  3830                           ;sort.c: 193: for(int i = 0; i<2500; i++){
  3831  0014DC  0E00               	movlw	0
  3832  0014DE  0100               	movlb	0	; () banked
  3833  0014E0  6FBF               	movwf	(Loading@i_1162+1)& (0+255),b
  3834  0014E2  0E00               	movlw	0
  3835  0014E4  6FBE               	movwf	Loading@i_1162& (0+255),b
  3836  0014E6                     l7343:
  3837                           
  3838                           ; BSR set to: 0
  3839  0014E6  0100               	movlb	0	; () banked
  3840  0014E8  BFBF               	btfsc	(Loading@i_1162+1)& (0+255),7,b
  3841  0014EA  D041               	goto	l7371
  3842  0014EC  0EC4               	movlw	196
  3843  0014EE  0100               	movlb	0	; () banked
  3844  0014F0  5DBE               	subwf	Loading@i_1162& (0+255),w,b
  3845  0014F2  0E09               	movlw	9
  3846  0014F4  0100               	movlb	0	; () banked
  3847  0014F6  59BF               	subwfb	(Loading@i_1162+1)& (0+255),w,b
  3848  0014F8  B0D8               	btfsc	status,0,c
  3849  0014FA  D058               	goto	l779
  3850  0014FC  D038               	goto	l7371
  3851  0014FE                     l785:
  3852                           
  3853                           ; BSR set to: 0
  3854                           ;sort.c: 196: LATAbits.LATA4 = 1;
  3855  0014FE  8889               	bsf	3977,4,c	;volatile
  3856                           
  3857                           ; BSR set to: 0
  3858                           ;sort.c: 197: _delay((unsigned long)((75)*(32000000/4000000.0)));
  3859  001500  0EC8               	movlw	200
  3860  001502                     u8627:
  3861  001502  2EE8               	decfsz	wreg,f,c
  3862  001504  D7FE               	bra	u8627
  3863                           
  3864                           ;sort.c: 198: LATAbits.LATA4 = 0;
  3865  001506  9889               	bcf	3977,4,c	;volatile
  3866                           
  3867                           ;sort.c: 199: _delay((unsigned long)((25)*(32000000/4000000.0)));
  3868  001508  0E42               	movlw	66
  3869  00150A                     u8637:
  3870  00150A  2EE8               	decfsz	wreg,f,c
  3871  00150C  D7FE               	bra	u8637
  3872  00150E  D01C               	goto	L2
  3873  001510                     l787:
  3874                           
  3875                           ; BSR set to: 0
  3876                           ;sort.c: 202: LATAbits.LATA4 = 1;
  3877  001510  8889               	bsf	3977,4,c	;volatile
  3878                           
  3879                           ; BSR set to: 0
  3880                           ;sort.c: 203: _delay((unsigned long)((80)*(32000000/4000000.0)));
  3881  001512  0ED5               	movlw	213
  3882  001514                     u8647:
  3883  001514  2EE8               	decfsz	wreg,f,c
  3884  001516  D7FE               	bra	u8647
  3885  001518  F000               	nop	
  3886                           
  3887                           ;sort.c: 204: LATAbits.LATA4 = 0;
  3888  00151A  9889               	bcf	3977,4,c	;volatile
  3889                           
  3890                           ;sort.c: 205: _delay((unsigned long)((20)*(32000000/4000000.0)));
  3891  00151C  0E35               	movlw	53
  3892  00151E                     u8657:
  3893  00151E  2EE8               	decfsz	wreg,f,c
  3894  001520  D7FE               	bra	u8657
  3895  001522  D01D               	goto	L3
  3896  001524                     l788:
  3897                           
  3898                           ; BSR set to: 0
  3899                           ;sort.c: 208: LATAbits.LATA4 = 1;
  3900  001524  8889               	bsf	3977,4,c	;volatile
  3901                           
  3902                           ; BSR set to: 0
  3903                           ;sort.c: 209: _delay((unsigned long)((85)*(32000000/4000000.0)));
  3904  001526  0EE2               	movlw	226
  3905  001528                     u8667:
  3906  001528  2EE8               	decfsz	wreg,f,c
  3907  00152A  D7FE               	bra	u8667
  3908  00152C  D000               	nop2	
  3909                           
  3910                           ;sort.c: 210: LATAbits.LATA4 = 0;
  3911  00152E  9889               	bcf	3977,4,c	;volatile
  3912                           
  3913                           ;sort.c: 211: _delay((unsigned long)((15)*(32000000/4000000.0)));
  3914  001530  0E28               	movlw	40
  3915  001532                     u8677:
  3916  001532  2EE8               	decfsz	wreg,f,c
  3917  001534  D7FE               	bra	u8677
  3918                           
  3919                           ;sort.c: 212: break;
  3920  001536  D036               	goto	l7373
  3921  001538                     l789:
  3922                           
  3923                           ; BSR set to: 0
  3924                           ;sort.c: 214: LATAbits.LATA4 = 1;
  3925  001538  8889               	bsf	3977,4,c	;volatile
  3926                           
  3927                           ; BSR set to: 0
  3928                           ;sort.c: 215: _delay((unsigned long)((90)*(32000000/4000000.0)));
  3929  00153A  0EF0               	movlw	240
  3930  00153C                     u8687:
  3931  00153C  2EE8               	decfsz	wreg,f,c
  3932  00153E  D7FE               	bra	u8687
  3933                           
  3934                           ;sort.c: 216: LATAbits.LATA4 = 0;
  3935  001540  9889               	bcf	3977,4,c	;volatile
  3936                           
  3937                           ;sort.c: 217: _delay((unsigned long)((10)*(32000000/4000000.0)));
  3938  001542  0E1A               	movlw	26
  3939  001544                     u8697:
  3940  001544  2EE8               	decfsz	wreg,f,c
  3941  001546  D7FE               	bra	u8697
  3942  001548                     L2:
  3943  001548  D000               	nop2	
  3944                           
  3945                           ;sort.c: 218: break;
  3946  00154A  D02C               	goto	l7373
  3947  00154C                     l790:
  3948                           
  3949                           ; BSR set to: 0
  3950                           ;sort.c: 220: LATAbits.LATA4 = 1;
  3951  00154C  8889               	bsf	3977,4,c	;volatile
  3952                           
  3953                           ; BSR set to: 0
  3954                           ;sort.c: 221: _delay((unsigned long)((95)*(32000000/4000000.0)));
  3955  00154E  0EFD               	movlw	253
  3956  001550                     u8707:
  3957  001550  2EE8               	decfsz	wreg,f,c
  3958  001552  D7FE               	bra	u8707
  3959  001554  F000               	nop	
  3960                           
  3961                           ;sort.c: 222: LATAbits.LATA4 = 0;
  3962  001556  9889               	bcf	3977,4,c	;volatile
  3963                           
  3964                           ;sort.c: 223: _delay((unsigned long)((5)*(32000000/4000000.0)));
  3965  001558  0E0D               	movlw	13
  3966  00155A                     u8717:
  3967  00155A  2EE8               	decfsz	wreg,f,c
  3968  00155C  D7FE               	bra	u8717
  3969  00155E                     L3:
  3970  00155E  F000               	nop	
  3971                           
  3972                           ;sort.c: 224: break;
  3973  001560  D021               	goto	l7373
  3974  001562                     l791:
  3975                           
  3976                           ; BSR set to: 0
  3977                           ;sort.c: 226: LATAbits.LATA4 = 1;
  3978  001562  8889               	bsf	3977,4,c	;volatile
  3979                           
  3980                           ; BSR set to: 0
  3981                           ;sort.c: 227: _delay((unsigned long)((100)*(32000000/4000000.0)));
  3982  001564  0EA0               	movlw	160
  3983  001566                     u8727:
  3984  001566  D000               	nop2	
  3985  001568  2EE8               	decfsz	wreg,f,c
  3986  00156A  D7FD               	bra	u8727
  3987                           
  3988                           ;sort.c: 229: }
  3989                           
  3990                           ;sort.c: 228: break;
  3991  00156C  D01B               	goto	l7373
  3992  00156E                     l7371:
  3993  00156E  C0C0  F0B1         	movff	Loading@j,??_Loading
  3994  001572  C0C1  F0B2         	movff	Loading@j+1,??_Loading+1
  3995                           
  3996                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3997                           ; Switch size 1, requested type "space"
  3998                           ; Number of cases is 1, Range of values is 0 to 0
  3999                           ; switch strategies available:
  4000                           ; Name         Instructions Cycles
  4001                           ; simple_byte            4     3 (average)
  4002                           ;	Chosen strategy is simple_byte
  4003  001576  0100               	movlb	0	; () banked
  4004  001578  51B2               	movf	(??_Loading+1)& (0+255),w,b
  4005  00157A  0A00               	xorlw	0	; case 0
  4006  00157C  A4D8               	btfss	status,2,c
  4007  00157E  D7F1               	goto	l791
  4008                           
  4009                           ; BSR set to: 0
  4010                           ; Switch size 1, requested type "space"
  4011                           ; Number of cases is 5, Range of values is 1 to 5
  4012                           ; switch strategies available:
  4013                           ; Name         Instructions Cycles
  4014                           ; simple_byte           16     9 (average)
  4015                           ;	Chosen strategy is simple_byte
  4016  001580  0100               	movlb	0	; () banked
  4017  001582  51B1               	movf	??_Loading& (0+255),w,b
  4018  001584  0A01               	xorlw	1	; case 1
  4019  001586  B4D8               	btfsc	status,2,c
  4020  001588  D7BA               	goto	l785
  4021  00158A  0A03               	xorlw	3	; case 2
  4022  00158C  B4D8               	btfsc	status,2,c
  4023  00158E  D7C0               	goto	l787
  4024  001590  0A01               	xorlw	1	; case 3
  4025  001592  B4D8               	btfsc	status,2,c
  4026  001594  D7C7               	goto	l788
  4027  001596  0A07               	xorlw	7	; case 4
  4028  001598  B4D8               	btfsc	status,2,c
  4029  00159A  D7CE               	goto	l789
  4030  00159C  0A01               	xorlw	1	; case 5
  4031  00159E  B4D8               	btfsc	status,2,c
  4032  0015A0  D7D5               	goto	l790
  4033  0015A2  D7DF               	goto	l791
  4034  0015A4                     l7373:
  4035  0015A4  0100               	movlb	0	; () banked
  4036  0015A6  4BBE               	infsnz	Loading@i_1162& (0+255),f,b
  4037  0015A8  2BBF               	incf	(Loading@i_1162+1)& (0+255),f,b
  4038  0015AA  D79D               	goto	l7343
  4039  0015AC                     l779:
  4040                           
  4041                           ;sort.c: 230: }
  4042                           ;sort.c: 231: }
  4043                           ;sort.c: 232: }
  4044                           ;sort.c: 233: LATAbits.LATA4 = 0;
  4045  0015AC  9889               	bcf	3977,4,c	;volatile
  4046                           
  4047                           ;sort.c: 234: j++;
  4048  0015AE  0100               	movlb	0	; () banked
  4049  0015B0  4BC0               	infsnz	Loading@j& (0+255),f,b
  4050  0015B2  2BC1               	incf	(Loading@j+1)& (0+255),f,b
  4051  0015B4                     l7379:
  4052                           
  4053                           ; BSR set to: 0
  4054                           ;sort.c: 235: }
  4055                           ;sort.c: 237: if(!IR_signal){
  4056  0015B4  0100               	movlb	0	; () banked
  4057  0015B6  51E6               	movf	_IR_signal& (0+255),w,b
  4058  0015B8  0100               	movlb	0	; () banked
  4059  0015BA  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  4060  0015BC  A4D8               	btfss	status,2,c
  4061  0015BE  D015               	goto	l7391
  4062                           
  4063                           ; BSR set to: 0
  4064                           ;sort.c: 238: _delay((unsigned long)((1000)*(32000000/4000.0)));
  4065  0015C0  0E29               	movlw	41
  4066  0015C2  0100               	movlb	0	; () banked
  4067  0015C4  6FB2               	movwf	(??_Loading+1)& (0+255),b
  4068  0015C6  0E96               	movlw	150
  4069  0015C8  0100               	movlb	0	; () banked
  4070  0015CA  6FB1               	movwf	??_Loading& (0+255),b
  4071  0015CC  0E7F               	movlw	127
  4072  0015CE                     u8737:
  4073  0015CE  2EE8               	decfsz	wreg,f,c
  4074  0015D0  D7FE               	bra	u8737
  4075  0015D2  2FB1               	decfsz	??_Loading& (0+255),f,b
  4076  0015D4  D7FC               	bra	u8737
  4077  0015D6  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  4078  0015D8  D7FA               	bra	u8737
  4079                           
  4080                           ;sort.c: 239: readIR();
  4081  0015DA  ECDB  F025         	call	_readIR	;wreg free
  4082                           
  4083                           ;sort.c: 240: if(IR_signal==1){
  4084  0015DE  0100               	movlb	0	; () banked
  4085  0015E0  05E6               	decf	_IR_signal& (0+255),w,b
  4086  0015E2  0100               	movlb	0	; () banked
  4087  0015E4  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  4088  0015E6  A4D8               	btfss	status,2,c
  4089  0015E8  D006               	goto	l795
  4090  0015EA                     l7391:
  4091                           
  4092                           ; BSR set to: 0
  4093  0015EA  0100               	movlb	0	; () banked
  4094  0015EC  05E6               	decf	_IR_signal& (0+255),w,b
  4095  0015EE  0100               	movlb	0	; () banked
  4096  0015F0  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  4097  0015F2  B4D8               	btfsc	status,2,c
  4098  0015F4  D722               	goto	l7317
  4099  0015F6                     l795:
  4100                           
  4101                           ; BSR set to: 0
  4102                           ;sort.c: 245: }
  4103                           ;sort.c: 246: }
  4104                           ;sort.c: 247: }
  4105                           ;sort.c: 248: LATBbits.LATB2 = 0;
  4106  0015F6  948A               	bcf	3978,2,c	;volatile
  4107  0015F8                     l7393:
  4108                           
  4109                           ; BSR set to: 0
  4110                           ;sort.c: 249: }
  4111                           ;sort.c: 250: f_can_coming_to_ID = 1;
  4112  0015F8  0E00               	movlw	0
  4113  0015FA  0101               	movlb	1	; () banked
  4114  0015FC  6F32               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  4115  0015FE  0E01               	movlw	1
  4116  001600  6F31               	movwf	_f_can_coming_to_ID& (0+255),b
  4117                           
  4118                           ; BSR set to: 1
  4119                           
  4120                           ; BSR set to: 1
  4121  001602  0012               	return	
  4122  001604                     __end_of_Loading:
  4123                           	opt stack 0
  4124                           tblptru	equ	0xFF8
  4125                           tblptrh	equ	0xFF7
  4126                           tblptrl	equ	0xFF6
  4127                           tablat	equ	0xFF5
  4128                           prodh	equ	0xFF4
  4129                           prodl	equ	0xFF3
  4130                           postinc0	equ	0xFEE
  4131                           wreg	equ	0xFE8
  4132                           postdec1	equ	0xFE5
  4133                           fsr1l	equ	0xFE1
  4134                           status	equ	0xFD8
  4135                           
  4136 ;; *************** function _initSortTimer *****************
  4137 ;; Defined at:
  4138 ;;		line 391 in file "sort.c"
  4139 ;; Parameters:    Size  Location     Type
  4140 ;;		None
  4141 ;; Auto vars:     Size  Location     Type
  4142 ;;  i               2    8[BANK0 ] int 
  4143 ;; Return value:  Size  Location     Type
  4144 ;;                  1    wreg      void 
  4145 ;; Registers used:
  4146 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4147 ;; Tracked objects:
  4148 ;;		On entry : 0/0
  4149 ;;		On exit  : 0/0
  4150 ;;		Unchanged: 0/0
  4151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4152 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4153 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4154 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4155 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4156 ;;Total ram usage:        5 bytes
  4157 ;; Hardware stack levels used:    1
  4158 ;; Hardware stack levels required when called:   10
  4159 ;; This function calls:
  4160 ;;		_getRTC
  4161 ;; This function is called by:
  4162 ;;		_Loading
  4163 ;; This function uses a non-reentrant model
  4164 ;;
  4165                           
  4166                           	psect	text4
  4167  0042CC                     __ptext4:
  4168                           	opt stack 0
  4169  0042CC                     _initSortTimer:
  4170                           	opt stack 18
  4171                           
  4172                           ;sort.c: 393: getRTC();
  4173                           
  4174                           ;incstack = 0
  4175  0042CC  EC52  F022         	call	_getRTC	;wreg free
  4176                           
  4177                           ;sort.c: 394: for(int i = 0; i < 7; i++){
  4178  0042D0  0E00               	movlw	0
  4179  0042D2  0100               	movlb	0	; () banked
  4180  0042D4  6F89               	movwf	(initSortTimer@i+1)& (0+255),b
  4181  0042D6  0E00               	movlw	0
  4182  0042D8  6F88               	movwf	initSortTimer@i& (0+255),b
  4183  0042DA                     l6795:
  4184                           
  4185                           ; BSR set to: 0
  4186  0042DA  0100               	movlb	0	; () banked
  4187  0042DC  BF89               	btfsc	(initSortTimer@i+1)& (0+255),7,b
  4188  0042DE  D008               	goto	l6799
  4189  0042E0  0100               	movlb	0	; () banked
  4190  0042E2  5189               	movf	(initSortTimer@i+1)& (0+255),w,b
  4191  0042E4  E140               	bnz	l6805
  4192  0042E6  0E07               	movlw	7
  4193  0042E8  0100               	movlb	0	; () banked
  4194  0042EA  5D88               	subwf	initSortTimer@i& (0+255),w,b
  4195  0042EC  B0D8               	btfsc	status,0,c
  4196  0042EE  D03B               	goto	l6805
  4197  0042F0                     l6799:
  4198                           
  4199                           ; BSR set to: 0
  4200                           ;sort.c: 395: startTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  4201  0042F0  0E1C               	movlw	low _time
  4202  0042F2  0100               	movlb	0	; () banked
  4203  0042F4  2588               	addwf	initSortTimer@i& (0+255),w,b
  4204  0042F6  6ED9               	movwf	fsr2l,c
  4205  0042F8  0E01               	movlw	high _time
  4206  0042FA  0100               	movlb	0	; () banked
  4207  0042FC  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  4208  0042FE  6EDA               	movwf	fsr2h,c
  4209  004300  50DF               	movf	indf2,w,c
  4210  004302  0100               	movlb	0	; () banked
  4211  004304  6F85               	movwf	??_initSortTimer& (0+255),b
  4212  004306  0100               	movlb	0	; () banked
  4213  004308  3B85               	swapf	??_initSortTimer& (0+255),f,b
  4214  00430A  0E0F               	movlw	15
  4215  00430C  1785               	andwf	??_initSortTimer& (0+255),f,b
  4216  00430E  0E0F               	movlw	15
  4217  004310  0100               	movlb	0	; () banked
  4218  004312  1785               	andwf	??_initSortTimer& (0+255),f,b
  4219  004314  0100               	movlb	0	; () banked
  4220  004316  5185               	movf	??_initSortTimer& (0+255),w,b
  4221  004318  0D0A               	mullw	10
  4222  00431A  0E1C               	movlw	low _time
  4223  00431C  0100               	movlb	0	; () banked
  4224  00431E  2588               	addwf	initSortTimer@i& (0+255),w,b
  4225  004320  6ED9               	movwf	fsr2l,c
  4226  004322  0E01               	movlw	high _time
  4227  004324  0100               	movlb	0	; () banked
  4228  004326  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  4229  004328  6EDA               	movwf	fsr2h,c
  4230  00432A  50DF               	movf	indf2,w,c
  4231  00432C  0B0F               	andlw	15
  4232  00432E  0100               	movlb	0	; () banked
  4233  004330  6F86               	movwf	(??_initSortTimer+1)& (0+255),b
  4234  004332  6B87               	clrf	(??_initSortTimer+2)& (0+255),b
  4235  004334  50F3               	movf	prodl,w,c
  4236  004336  0100               	movlb	0	; () banked
  4237  004338  2786               	addwf	(??_initSortTimer+1)& (0+255),f,b
  4238  00433A  50F4               	movf	prodh,w,c
  4239  00433C  0100               	movlb	0	; () banked
  4240  00433E  2387               	addwfc	(??_initSortTimer+2)& (0+255),f,b
  4241  004340  90D8               	bcf	status,0,c
  4242  004342  0100               	movlb	0	; () banked
  4243  004344  3588               	rlcf	initSortTimer@i& (0+255),w,b
  4244  004346  6ED9               	movwf	fsr2l,c
  4245  004348  0100               	movlb	0	; () banked
  4246  00434A  3589               	rlcf	(initSortTimer@i+1)& (0+255),w,b
  4247  00434C  6EDA               	movwf	fsr2h,c
  4248  00434E  0E0E               	movlw	low _startTime
  4249  004350  26D9               	addwf	fsr2l,f,c
  4250  004352  0E01               	movlw	high _startTime
  4251  004354  22DA               	addwfc	fsr2h,f,c
  4252  004356  C086  FFDE         	movff	??_initSortTimer+1,postinc2
  4253  00435A  C087  FFDD         	movff	??_initSortTimer+2,postdec2
  4254                           
  4255                           ; BSR set to: 0
  4256  00435E  0100               	movlb	0	; () banked
  4257  004360  4B88               	infsnz	initSortTimer@i& (0+255),f,b
  4258  004362  2B89               	incf	(initSortTimer@i+1)& (0+255),f,b
  4259  004364  D7BA               	goto	l6795
  4260  004366                     l6805:
  4261                           
  4262                           ; BSR set to: 0
  4263                           ;sort.c: 396: }
  4264                           ;sort.c: 398: T0CON = 0b00010111;
  4265  004366  0E17               	movlw	23
  4266  004368  6ED5               	movwf	4053,c	;volatile
  4267                           
  4268                           ;sort.c: 407: TMR0H = 0b10000101;
  4269  00436A  0E85               	movlw	133
  4270  00436C  6ED7               	movwf	4055,c	;volatile
  4271                           
  4272                           ;sort.c: 408: TMR0L = 0b11101110;
  4273  00436E  0EEE               	movlw	238
  4274  004370  6ED6               	movwf	4054,c	;volatile
  4275                           
  4276                           ; BSR set to: 0
  4277                           ;sort.c: 409: TMR0ON = 1;
  4278  004372  8ED5               	bsf	4053,7,c	;volatile
  4279                           
  4280                           ; BSR set to: 0
  4281  004374  0012               	return		;funcret
  4282  004376                     __end_of_initSortTimer:
  4283                           	opt stack 0
  4284                           tblptru	equ	0xFF8
  4285                           tblptrh	equ	0xFF7
  4286                           tblptrl	equ	0xFF6
  4287                           tablat	equ	0xFF5
  4288                           prodh	equ	0xFF4
  4289                           prodl	equ	0xFF3
  4290                           postinc0	equ	0xFEE
  4291                           wreg	equ	0xFE8
  4292                           postdec1	equ	0xFE5
  4293                           fsr1l	equ	0xFE1
  4294                           indf2	equ	0xFDF
  4295                           postinc2	equ	0xFDE
  4296                           postdec2	equ	0xFDD
  4297                           fsr2h	equ	0xFDA
  4298                           fsr2l	equ	0xFD9
  4299                           status	equ	0xFD8
  4300                           
  4301 ;; *************** function _initGlobalVars *****************
  4302 ;; Defined at:
  4303 ;;		line 361 in file "sort.c"
  4304 ;; Parameters:    Size  Location     Type
  4305 ;;		None
  4306 ;; Auto vars:     Size  Location     Type
  4307 ;;		None
  4308 ;; Return value:  Size  Location     Type
  4309 ;;                  1    wreg      void 
  4310 ;; Registers used:
  4311 ;;		wreg, status,2
  4312 ;; Tracked objects:
  4313 ;;		On entry : 0/0
  4314 ;;		On exit  : 0/0
  4315 ;;		Unchanged: 0/0
  4316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4317 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4318 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4319 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4320 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4321 ;;Total ram usage:        0 bytes
  4322 ;; Hardware stack levels used:    1
  4323 ;; Hardware stack levels required when called:    7
  4324 ;; This function calls:
  4325 ;;		Nothing
  4326 ;; This function is called by:
  4327 ;;		_Loading
  4328 ;; This function uses a non-reentrant model
  4329 ;;
  4330                           
  4331                           	psect	text5
  4332  004220                     __ptext5:
  4333                           	opt stack 0
  4334  004220                     _initGlobalVars:
  4335                           	opt stack 21
  4336                           
  4337                           ;sort.c: 363: first = 0;
  4338                           
  4339                           ; BSR set to: 0
  4340                           ;incstack = 0
  4341  004220  0E00               	movlw	0
  4342  004222  0101               	movlb	1	; () banked
  4343  004224  6F3A               	movwf	(_first+1)& (0+255),b
  4344  004226  0E00               	movlw	0
  4345  004228  6F39               	movwf	_first& (0+255),b
  4346                           
  4347                           ;sort.c: 366: f_loadingNewCan = 0;
  4348  00422A  0E00               	movlw	0
  4349  00422C  0100               	movlb	0	; () banked
  4350  00422E  6FF1               	movwf	(_f_loadingNewCan+1)& (0+255),b
  4351  004230  0E00               	movlw	0
  4352  004232  6FF0               	movwf	_f_loadingNewCan& (0+255),b
  4353                           
  4354                           ;sort.c: 367: f_lastCan = 0;
  4355  004234  0E00               	movlw	0
  4356  004236  0100               	movlb	0	; () banked
  4357  004238  6FEF               	movwf	(_f_lastCan+1)& (0+255),b
  4358  00423A  0E00               	movlw	0
  4359  00423C  6FEE               	movwf	_f_lastCan& (0+255),b
  4360                           
  4361                           ;sort.c: 368: f_ID_receive = 1;
  4362  00423E  0E00               	movlw	0
  4363  004240  0101               	movlb	1	; () banked
  4364  004242  6F30               	movwf	(_f_ID_receive+1)& (0+255),b
  4365  004244  0E01               	movlw	1
  4366  004246  6F2F               	movwf	_f_ID_receive& (0+255),b
  4367                           
  4368                           ;sort.c: 369: f_can_coming_to_ID = 0;
  4369  004248  0E00               	movlw	0
  4370  00424A  0101               	movlb	1	; () banked
  4371  00424C  6F32               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  4372  00424E  0E00               	movlw	0
  4373  004250  6F31               	movwf	_f_can_coming_to_ID& (0+255),b
  4374                           
  4375                           ;sort.c: 370: f_can_coming_to_distribution = 0;
  4376  004252  0E00               	movlw	0
  4377  004254  0101               	movlb	1	; () banked
  4378  004256  6F34               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  4379  004258  0E00               	movlw	0
  4380  00425A  6F33               	movwf	_f_can_coming_to_distribution& (0+255),b
  4381                           
  4382                           ;sort.c: 371: f_can_distributed = 0;
  4383  00425C  0E00               	movlw	0
  4384  00425E  0101               	movlb	1	; () banked
  4385  004260  6F36               	movwf	(_f_can_distributed+1)& (0+255),b
  4386  004262  0E00               	movlw	0
  4387  004264  6F35               	movwf	_f_can_distributed& (0+255),b
  4388                           
  4389                           ;sort.c: 372: f_most_recent_sort_time = 0;
  4390  004266  0E00               	movlw	0
  4391  004268  0101               	movlb	1	; () banked
  4392  00426A  6F38               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
  4393  00426C  0E00               	movlw	0
  4394  00426E  6F37               	movwf	_f_most_recent_sort_time& (0+255),b
  4395                           
  4396                           ;sort.c: 375: count_total = 0;
  4397  004270  0E00               	movlw	0
  4398  004272  0100               	movlb	0	; () banked
  4399  004274  6FFF               	movwf	(_count_total+1)& (0+255),b
  4400  004276  0E00               	movlw	0
  4401  004278  6FFE               	movwf	_count_total& (0+255),b
  4402                           
  4403                           ;sort.c: 376: count_pop_no_tab = 0;
  4404  00427A  0E00               	movlw	0
  4405  00427C  0101               	movlb	1	; () banked
  4406  00427E  6F28               	movwf	(_count_pop_no_tab+1)& (0+255),b
  4407  004280  0E00               	movlw	0
  4408  004282  6F27               	movwf	_count_pop_no_tab& (0+255),b
  4409                           
  4410                           ;sort.c: 377: count_pop_w_tab = 0;
  4411  004284  0E00               	movlw	0
  4412  004286  0101               	movlb	1	; () banked
  4413  004288  6F2A               	movwf	(_count_pop_w_tab+1)& (0+255),b
  4414  00428A  0E00               	movlw	0
  4415  00428C  6F29               	movwf	_count_pop_w_tab& (0+255),b
  4416                           
  4417                           ;sort.c: 378: count_can_w_lab = 0;
  4418  00428E  0E00               	movlw	0
  4419  004290  0101               	movlb	1	; () banked
  4420  004292  6F26               	movwf	(_count_can_w_lab+1)& (0+255),b
  4421  004294  0E00               	movlw	0
  4422  004296  6F25               	movwf	_count_can_w_lab& (0+255),b
  4423                           
  4424                           ;sort.c: 379: count_can_no_lab = 0;
  4425  004298  0E00               	movlw	0
  4426  00429A  0101               	movlb	1	; () banked
  4427  00429C  6F24               	movwf	(_count_can_no_lab+1)& (0+255),b
  4428  00429E  0E00               	movlw	0
  4429  0042A0  6F23               	movwf	_count_can_no_lab& (0+255),b
  4430                           
  4431                           ;sort.c: 382: most_recent_sort_time = 999;
  4432  0042A2  0E03               	movlw	3
  4433  0042A4  6E6E               	movwf	_most_recent_sort_time+1,c
  4434  0042A6  0EE7               	movlw	231
  4435  0042A8  6E6D               	movwf	_most_recent_sort_time,c
  4436                           
  4437                           ;sort.c: 385: servo_timer_counter = 0;
  4438  0042AA  0E00               	movlw	0
  4439  0042AC  6E72               	movwf	_servo_timer_counter+1,c	;volatile
  4440  0042AE  0E00               	movlw	0
  4441  0042B0  6E71               	movwf	_servo_timer_counter,c	;volatile
  4442                           
  4443                           ;sort.c: 386: servo_timer_target = 9999;
  4444  0042B2  0E27               	movlw	39
  4445  0042B4  6E74               	movwf	_servo_timer_target+1,c	;volatile
  4446  0042B6  0E0F               	movlw	15
  4447  0042B8  6E73               	movwf	_servo_timer_target,c	;volatile
  4448                           
  4449                           ; BSR set to: 1
  4450                           ;sort.c: 387: pan_servo_state = -1;
  4451  0042BA  686F               	setf	_pan_servo_state,c	;volatile
  4452  0042BC  6870               	setf	_pan_servo_state+1,c	;volatile
  4453                           
  4454                           ; BSR set to: 1
  4455                           ;sort.c: 388: tilt_servo_state = -1;
  4456  0042BE  6875               	setf	_tilt_servo_state,c	;volatile
  4457  0042C0  6876               	setf	_tilt_servo_state+1,c	;volatile
  4458                           
  4459                           ;sort.c: 389: f_panning_to_bin = 0;
  4460  0042C2  0E00               	movlw	0
  4461  0042C4  6E62               	movwf	_f_panning_to_bin+1,c	;volatile
  4462  0042C6  0E00               	movlw	0
  4463  0042C8  6E61               	movwf	_f_panning_to_bin,c	;volatile
  4464                           
  4465                           ; BSR set to: 1
  4466  0042CA  0012               	return		;funcret
  4467  0042CC                     __end_of_initGlobalVars:
  4468                           	opt stack 0
  4469                           tblptru	equ	0xFF8
  4470                           tblptrh	equ	0xFF7
  4471                           tblptrl	equ	0xFF6
  4472                           tablat	equ	0xFF5
  4473                           prodh	equ	0xFF4
  4474                           prodl	equ	0xFF3
  4475                           postinc0	equ	0xFEE
  4476                           wreg	equ	0xFE8
  4477                           postdec1	equ	0xFE5
  4478                           fsr1l	equ	0xFE1
  4479                           indf2	equ	0xFDF
  4480                           postinc2	equ	0xFDE
  4481                           postdec2	equ	0xFDD
  4482                           fsr2h	equ	0xFDA
  4483                           fsr2l	equ	0xFD9
  4484                           status	equ	0xFD8
  4485                           
  4486 ;; *************** function _getMAG *****************
  4487 ;; Defined at:
  4488 ;;		line 479 in file "sort.c"
  4489 ;; Parameters:    Size  Location     Type
  4490 ;;		None
  4491 ;; Auto vars:     Size  Location     Type
  4492 ;;		None
  4493 ;; Return value:  Size  Location     Type
  4494 ;;                  1    wreg      void 
  4495 ;; Registers used:
  4496 ;;		wreg, status,2, status,0, cstack
  4497 ;; Tracked objects:
  4498 ;;		On entry : 0/0
  4499 ;;		On exit  : 0/0
  4500 ;;		Unchanged: 0/0
  4501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4502 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4503 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4504 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4505 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4506 ;;Total ram usage:        2 bytes
  4507 ;; Hardware stack levels used:    1
  4508 ;; Hardware stack levels required when called:    9
  4509 ;; This function calls:
  4510 ;;		_readMAG
  4511 ;; This function is called by:
  4512 ;;		_Loading
  4513 ;; This function uses a non-reentrant model
  4514 ;;
  4515                           
  4516                           	psect	text6
  4517  004DB2                     __ptext6:
  4518                           	opt stack 0
  4519  004DB2                     _getMAG:
  4520                           	opt stack 19
  4521                           
  4522                           ;sort.c: 480: readMAG();
  4523                           
  4524                           ; BSR set to: 1
  4525                           ;incstack = 0
  4526  004DB2  EC01  F026         	call	_readMAG	;wreg free
  4527                           
  4528                           ;sort.c: 482: if(MAG_signal==1){
  4529  004DB6  0100               	movlb	0	; () banked
  4530  004DB8  05E8               	decf	_MAG_signal& (0+255),w,b
  4531  004DBA  0100               	movlb	0	; () banked
  4532  004DBC  11E9               	iorwf	(_MAG_signal+1)& (0+255),w,b
  4533  004DBE  A4D8               	btfss	status,2,c
  4534  004DC0  0012               	return	
  4535                           
  4536                           ; BSR set to: 0
  4537                           ;sort.c: 483: _delay((unsigned long)((500)*(32000000/4000.0)));
  4538  004DC2  0E15               	movlw	21
  4539  004DC4  0100               	movlb	0	; () banked
  4540  004DC6  6F87               	movwf	(??_getMAG+1)& (0+255),b
  4541  004DC8  0E4B               	movlw	75
  4542  004DCA  0100               	movlb	0	; () banked
  4543  004DCC  6F86               	movwf	??_getMAG& (0+255),b
  4544  004DCE  0EBE               	movlw	190
  4545  004DD0                     u8747:
  4546  004DD0  2EE8               	decfsz	wreg,f,c
  4547  004DD2  D7FE               	bra	u8747
  4548  004DD4  2F86               	decfsz	??_getMAG& (0+255),f,b
  4549  004DD6  D7FC               	bra	u8747
  4550  004DD8  2F87               	decfsz	(??_getMAG+1)& (0+255),f,b
  4551  004DDA  D7FA               	bra	u8747
  4552  004DDC  F000               	nop	
  4553                           
  4554                           ;sort.c: 484: readMAG();
  4555  004DDE  EC01  F026         	call	_readMAG	;wreg free
  4556  004DE2  0012               	return	
  4557  004DE4                     __end_of_getMAG:
  4558                           	opt stack 0
  4559                           tblptru	equ	0xFF8
  4560                           tblptrh	equ	0xFF7
  4561                           tblptrl	equ	0xFF6
  4562                           tablat	equ	0xFF5
  4563                           prodh	equ	0xFF4
  4564                           prodl	equ	0xFF3
  4565                           postinc0	equ	0xFEE
  4566                           wreg	equ	0xFE8
  4567                           postdec1	equ	0xFE5
  4568                           fsr1l	equ	0xFE1
  4569                           indf2	equ	0xFDF
  4570                           postinc2	equ	0xFDE
  4571                           postdec2	equ	0xFDD
  4572                           fsr2h	equ	0xFDA
  4573                           fsr2l	equ	0xFD9
  4574                           status	equ	0xFD8
  4575                           
  4576 ;; *************** function _getIR *****************
  4577 ;; Defined at:
  4578 ;;		line 463 in file "sort.c"
  4579 ;; Parameters:    Size  Location     Type
  4580 ;;		None
  4581 ;; Auto vars:     Size  Location     Type
  4582 ;;  i               2    7[BANK0 ] int 
  4583 ;; Return value:  Size  Location     Type
  4584 ;;                  1    wreg      void 
  4585 ;; Registers used:
  4586 ;;		wreg, status,2, status,0, cstack
  4587 ;; Tracked objects:
  4588 ;;		On entry : 0/0
  4589 ;;		On exit  : 0/0
  4590 ;;		Unchanged: 0/0
  4591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4592 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4593 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4594 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4595 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4596 ;;Total ram usage:        3 bytes
  4597 ;; Hardware stack levels used:    1
  4598 ;; Hardware stack levels required when called:    9
  4599 ;; This function calls:
  4600 ;;		_readIR
  4601 ;; This function is called by:
  4602 ;;		_Loading
  4603 ;; This function uses a non-reentrant model
  4604 ;;
  4605                           
  4606                           	psect	text7
  4607  004730                     __ptext7:
  4608                           	opt stack 0
  4609  004730                     _getIR:
  4610                           	opt stack 19
  4611                           
  4612                           ;sort.c: 464: readIR();
  4613                           
  4614                           ;incstack = 0
  4615  004730  ECDB  F025         	call	_readIR	;wreg free
  4616                           
  4617                           ;sort.c: 465: for(int i = 0; i < 150; i++){
  4618  004734  0E00               	movlw	0
  4619  004736  0100               	movlb	0	; () banked
  4620  004738  6F88               	movwf	(getIR@i+1)& (0+255),b
  4621  00473A  0E00               	movlw	0
  4622  00473C  6F87               	movwf	getIR@i& (0+255),b
  4623  00473E                     l6887:
  4624                           
  4625                           ; BSR set to: 0
  4626  00473E  0100               	movlb	0	; () banked
  4627  004740  BF88               	btfsc	(getIR@i+1)& (0+255),7,b
  4628  004742  D008               	goto	l6891
  4629  004744  0100               	movlb	0	; () banked
  4630  004746  5188               	movf	(getIR@i+1)& (0+255),w,b
  4631  004748  E11A               	bnz	l6903
  4632  00474A  0E96               	movlw	150
  4633  00474C  0100               	movlb	0	; () banked
  4634  00474E  5D87               	subwf	getIR@i& (0+255),w,b
  4635  004750  B0D8               	btfsc	status,0,c
  4636  004752  D015               	goto	l6903
  4637  004754                     l6891:
  4638                           
  4639                           ; BSR set to: 0
  4640                           ;sort.c: 466: _delay((unsigned long)((500)*(32000000/4000000.0)));
  4641  004754  0E06               	movlw	6
  4642  004756  0100               	movlb	0	; () banked
  4643  004758  6F86               	movwf	??_getIR& (0+255),b
  4644  00475A  0E30               	movlw	48
  4645  00475C                     u8757:
  4646  00475C  2EE8               	decfsz	wreg,f,c
  4647  00475E  D7FE               	bra	u8757
  4648  004760  2F86               	decfsz	??_getIR& (0+255),f,b
  4649  004762  D7FC               	bra	u8757
  4650  004764  F000               	nop	
  4651                           
  4652                           ;sort.c: 467: readIR();
  4653  004766  ECDB  F025         	call	_readIR	;wreg free
  4654                           
  4655                           ;sort.c: 468: if(!IR_signal){
  4656  00476A  0100               	movlb	0	; () banked
  4657  00476C  51E6               	movf	_IR_signal& (0+255),w,b
  4658  00476E  0100               	movlb	0	; () banked
  4659  004770  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  4660  004772  B4D8               	btfsc	status,2,c
  4661  004774  D004               	goto	l6903
  4662                           
  4663                           ; BSR set to: 0
  4664                           
  4665                           ; BSR set to: 0
  4666                           
  4667                           ; BSR set to: 0
  4668                           ;sort.c: 469: break;
  4669  004776  0100               	movlb	0	; () banked
  4670  004778  4B87               	infsnz	getIR@i& (0+255),f,b
  4671  00477A  2B88               	incf	(getIR@i+1)& (0+255),f,b
  4672  00477C  D7E0               	goto	l6887
  4673  00477E                     l6903:
  4674                           
  4675                           ; BSR set to: 0
  4676                           ;sort.c: 470: }
  4677                           ;sort.c: 471: }
  4678                           ;sort.c: 472: if(IR_signal==1){
  4679  00477E  0100               	movlb	0	; () banked
  4680  004780  05E6               	decf	_IR_signal& (0+255),w,b
  4681  004782  0100               	movlb	0	; () banked
  4682  004784  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  4683  004786  A4D8               	btfss	status,2,c
  4684  004788  D006               	goto	l6907
  4685                           
  4686                           ; BSR set to: 0
  4687                           ;sort.c: 473: f_loadingNewCan = 1;
  4688  00478A  0E00               	movlw	0
  4689  00478C  0100               	movlb	0	; () banked
  4690  00478E  6FF1               	movwf	(_f_loadingNewCan+1)& (0+255),b
  4691  004790  0E01               	movlw	1
  4692  004792  6FF0               	movwf	_f_loadingNewCan& (0+255),b
  4693                           
  4694                           ;sort.c: 474: }
  4695  004794  0012               	return	
  4696  004796                     l6907:
  4697                           
  4698                           ; BSR set to: 0
  4699                           ;sort.c: 475: else{
  4700                           ;sort.c: 476: f_loadingNewCan = 0;
  4701  004796  0E00               	movlw	0
  4702  004798  0100               	movlb	0	; () banked
  4703  00479A  6FF1               	movwf	(_f_loadingNewCan+1)& (0+255),b
  4704  00479C  0E00               	movlw	0
  4705  00479E  6FF0               	movwf	_f_loadingNewCan& (0+255),b
  4706  0047A0  0012               	return	
  4707  0047A2                     __end_of_getIR:
  4708                           	opt stack 0
  4709                           tblptru	equ	0xFF8
  4710                           tblptrh	equ	0xFF7
  4711                           tblptrl	equ	0xFF6
  4712                           tablat	equ	0xFF5
  4713                           prodh	equ	0xFF4
  4714                           prodl	equ	0xFF3
  4715                           postinc0	equ	0xFEE
  4716                           wreg	equ	0xFE8
  4717                           postdec1	equ	0xFE5
  4718                           fsr1l	equ	0xFE1
  4719                           indf2	equ	0xFDF
  4720                           postinc2	equ	0xFDE
  4721                           postdec2	equ	0xFDD
  4722                           fsr2h	equ	0xFDA
  4723                           fsr2l	equ	0xFD9
  4724                           status	equ	0xFD8
  4725                           
  4726 ;; *************** function _readIR *****************
  4727 ;; Defined at:
  4728 ;;		line 23 in file "ADCFunctionality.c"
  4729 ;; Parameters:    Size  Location     Type
  4730 ;;		None
  4731 ;; Auto vars:     Size  Location     Type
  4732 ;;  res             2    4[BANK0 ] int 
  4733 ;; Return value:  Size  Location     Type
  4734 ;;                  1    wreg      void 
  4735 ;; Registers used:
  4736 ;;		wreg, status,2, status,0, cstack
  4737 ;; Tracked objects:
  4738 ;;		On entry : 0/0
  4739 ;;		On exit  : 0/0
  4740 ;;		Unchanged: 0/0
  4741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4742 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4743 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4744 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4745 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4746 ;;Total ram usage:        4 bytes
  4747 ;; Hardware stack levels used:    1
  4748 ;; Hardware stack levels required when called:    8
  4749 ;; This function calls:
  4750 ;;		_readADC
  4751 ;; This function is called by:
  4752 ;;		_Loading
  4753 ;;		_getIR
  4754 ;; This function uses a non-reentrant model
  4755 ;;
  4756                           
  4757                           	psect	text8
  4758  004BB6                     __ptext8:
  4759                           	opt stack 0
  4760  004BB6                     _readIR:
  4761                           	opt stack 20
  4762                           
  4763                           ;ADCFunctionality.c: 24: readADC(0);
  4764                           
  4765                           ; BSR set to: 0
  4766                           ;incstack = 0
  4767  004BB6  0E00               	movlw	0
  4768  004BB8  EC3F  F028         	call	_readADC
  4769                           
  4770                           ;ADCFunctionality.c: 25: int res = ADRESH<<8 | ADRESL;
  4771  004BBC  50C3               	movf	4035,w,c	;volatile
  4772  004BBE  CFC4 F082          	movff	4036,??_readIR	;volatile
  4773  004BC2  0100               	movlb	0	; () banked
  4774  004BC4  6B83               	clrf	(??_readIR+1)& (0+255),b
  4775  004BC6  C082  F083         	movff	??_readIR,??_readIR+1
  4776  004BCA  0100               	movlb	0	; () banked
  4777  004BCC  6B82               	clrf	??_readIR& (0+255),b
  4778  004BCE  0100               	movlb	0	; () banked
  4779  004BD0  1182               	iorwf	??_readIR& (0+255),w,b
  4780  004BD2  0100               	movlb	0	; () banked
  4781  004BD4  6F84               	movwf	readIR@res& (0+255),b
  4782  004BD6  0100               	movlb	0	; () banked
  4783  004BD8  5183               	movf	(??_readIR+1)& (0+255),w,b
  4784  004BDA  0100               	movlb	0	; () banked
  4785  004BDC  6F85               	movwf	(readIR@res+1)& (0+255),b
  4786                           
  4787                           ; BSR set to: 0
  4788                           ;ADCFunctionality.c: 26: IR_signal = (res > 800) ? 1 : 0;
  4789  004BDE  0100               	movlb	0	; () banked
  4790  004BE0  BF85               	btfsc	(readIR@res+1)& (0+255),7,b
  4791  004BE2  D00A               	goto	u4490
  4792  004BE4  0E21               	movlw	33
  4793  004BE6  0100               	movlb	0	; () banked
  4794  004BE8  5D84               	subwf	readIR@res& (0+255),w,b
  4795  004BEA  0E03               	movlw	3
  4796  004BEC  0100               	movlb	0	; () banked
  4797  004BEE  5985               	subwfb	(readIR@res+1)& (0+255),w,b
  4798  004BF0  A0D8               	btfss	status,0,c
  4799  004BF2  D002               	goto	u4490
  4800  004BF4  0E01               	movlw	1
  4801  004BF6  D001               	goto	u4500
  4802  004BF8                     u4490:
  4803  004BF8  0E00               	movlw	0
  4804  004BFA                     u4500:
  4805  004BFA  0100               	movlb	0	; () banked
  4806  004BFC  6FE6               	movwf	_IR_signal& (0+255),b
  4807  004BFE  6BE7               	clrf	(_IR_signal+1)& (0+255),b
  4808                           
  4809                           ; BSR set to: 0
  4810  004C00  0012               	return		;funcret
  4811  004C02                     __end_of_readIR:
  4812                           	opt stack 0
  4813                           tblptru	equ	0xFF8
  4814                           tblptrh	equ	0xFF7
  4815                           tblptrl	equ	0xFF6
  4816                           tablat	equ	0xFF5
  4817                           prodh	equ	0xFF4
  4818                           prodl	equ	0xFF3
  4819                           postinc0	equ	0xFEE
  4820                           wreg	equ	0xFE8
  4821                           postdec1	equ	0xFE5
  4822                           fsr1l	equ	0xFE1
  4823                           indf2	equ	0xFDF
  4824                           postinc2	equ	0xFDE
  4825                           postdec2	equ	0xFDD
  4826                           fsr2h	equ	0xFDA
  4827                           fsr2l	equ	0xFD9
  4828                           status	equ	0xFD8
  4829                           
  4830 ;; *************** function _ID *****************
  4831 ;; Defined at:
  4832 ;;		line 254 in file "sort.c"
  4833 ;; Parameters:    Size  Location     Type
  4834 ;;		None
  4835 ;; Auto vars:     Size  Location     Type
  4836 ;;  i               2    6[BANK0 ] int 
  4837 ;;  i               2    4[BANK0 ] int 
  4838 ;; Return value:  Size  Location     Type
  4839 ;;                  1    wreg      void 
  4840 ;; Registers used:
  4841 ;;		wreg, status,2, status,0, cstack
  4842 ;; Tracked objects:
  4843 ;;		On entry : 0/0
  4844 ;;		On exit  : 0/0
  4845 ;;		Unchanged: 0/0
  4846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4847 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4848 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4849 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4850 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4851 ;;Total ram usage:        6 bytes
  4852 ;; Hardware stack levels used:    1
  4853 ;; Hardware stack levels required when called:    8
  4854 ;; This function calls:
  4855 ;;		_delay_ms
  4856 ;; This function is called by:
  4857 ;;		_sort
  4858 ;; This function uses a non-reentrant model
  4859 ;;
  4860                           
  4861                           	psect	text9
  4862  0030DC                     __ptext9:
  4863                           	opt stack 0
  4864  0030DC                     _ID:
  4865                           	opt stack 21
  4866                           
  4867                           ;sort.c: 255: if(f_can_coming_to_ID){
  4868                           
  4869                           ; BSR set to: 0
  4870                           ;incstack = 0
  4871  0030DC  0101               	movlb	1	; () banked
  4872  0030DE  5131               	movf	_f_can_coming_to_ID& (0+255),w,b
  4873  0030E0  0101               	movlb	1	; () banked
  4874  0030E2  1132               	iorwf	(_f_can_coming_to_ID+1)& (0+255),w,b
  4875  0030E4  B4D8               	btfsc	status,2,c
  4876  0030E6  0012               	return	
  4877                           
  4878                           ; BSR set to: 1
  4879                           ;sort.c: 257: _delay((unsigned long)((1500)*(32000000/4000.0)));
  4880  0030E8  0E3D               	movlw	61
  4881  0030EA  0100               	movlb	0	; () banked
  4882  0030EC  6F83               	movwf	(??_ID+1)& (0+255),b
  4883  0030EE  0EE1               	movlw	225
  4884  0030F0  0100               	movlb	0	; () banked
  4885  0030F2  6F82               	movwf	??_ID& (0+255),b
  4886  0030F4  0E3F               	movlw	63
  4887  0030F6                     u8767:
  4888  0030F6  2EE8               	decfsz	wreg,f,c
  4889  0030F8  D7FE               	bra	u8767
  4890  0030FA  2F82               	decfsz	??_ID& (0+255),f,b
  4891  0030FC  D7FC               	bra	u8767
  4892  0030FE  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  4893  003100  D7FA               	bra	u8767
  4894  003102  D000               	nop2	
  4895                           
  4896                           ;sort.c: 259: LATAbits.LATA3 = 1;
  4897  003104  8689               	bsf	3977,3,c	;volatile
  4898                           
  4899                           ;sort.c: 260: _delay((unsigned long)((600)*(32000000/4000.0)));
  4900  003106  0E19               	movlw	25
  4901  003108  0100               	movlb	0	; () banked
  4902  00310A  6F83               	movwf	(??_ID+1)& (0+255),b
  4903  00310C  0E5A               	movlw	90
  4904  00310E  0100               	movlb	0	; () banked
  4905  003110  6F82               	movwf	??_ID& (0+255),b
  4906  003112  0EB1               	movlw	177
  4907  003114                     u8777:
  4908  003114  2EE8               	decfsz	wreg,f,c
  4909  003116  D7FE               	bra	u8777
  4910  003118  2F82               	decfsz	??_ID& (0+255),f,b
  4911  00311A  D7FC               	bra	u8777
  4912  00311C  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  4913  00311E  D7FA               	bra	u8777
  4914  003120  D000               	nop2	
  4915                           
  4916                           ;sort.c: 261: sensor_outputs[1] = PORTAbits.RA2;
  4917  003122  A480               	btfss	3968,2,c	;volatile
  4918  003124  D004               	goto	u5860
  4919  003126  0100               	movlb	0	; () banked
  4920  003128  6B82               	clrf	??_ID& (0+255),b
  4921  00312A  2B82               	incf	??_ID& (0+255),f,b
  4922  00312C  D002               	goto	u5868
  4923  00312E                     u5860:
  4924  00312E  0100               	movlb	0	; () banked
  4925  003130  6B82               	clrf	??_ID& (0+255),b
  4926  003132                     u5868:
  4927  003132  0100               	movlb	0	; () banked
  4928  003134  5182               	movf	??_ID& (0+255),w,b
  4929  003136  0100               	movlb	0	; () banked
  4930  003138  6FE4               	movwf	(_sensor_outputs+2)& (0+255),b
  4931  00313A  6BE5               	clrf	(_sensor_outputs+3)& (0+255),b
  4932                           
  4933                           ; BSR set to: 0
  4934                           ;sort.c: 262: LATAbits.LATA3 = 0;
  4935  00313C  9689               	bcf	3977,3,c	;volatile
  4936                           
  4937                           ; BSR set to: 0
  4938                           ;sort.c: 264: _delay((unsigned long)((200)*(32000000/4000.0)));
  4939  00313E  0E09               	movlw	9
  4940  003140  0100               	movlb	0	; () banked
  4941  003142  6F83               	movwf	(??_ID+1)& (0+255),b
  4942  003144  0E1E               	movlw	30
  4943  003146  0100               	movlb	0	; () banked
  4944  003148  6F82               	movwf	??_ID& (0+255),b
  4945  00314A  0EE4               	movlw	228
  4946  00314C                     u8787:
  4947  00314C  2EE8               	decfsz	wreg,f,c
  4948  00314E  D7FE               	bra	u8787
  4949  003150  2F82               	decfsz	??_ID& (0+255),f,b
  4950  003152  D7FC               	bra	u8787
  4951  003154  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  4952  003156  D7FA               	bra	u8787
  4953  003158  F000               	nop	
  4954                           
  4955                           ;sort.c: 265: LATAbits.LATA3 = 1;
  4956  00315A  8689               	bsf	3977,3,c	;volatile
  4957                           
  4958                           ;sort.c: 266: _delay((unsigned long)((600)*(32000000/4000.0)));
  4959  00315C  0E19               	movlw	25
  4960  00315E  0100               	movlb	0	; () banked
  4961  003160  6F83               	movwf	(??_ID+1)& (0+255),b
  4962  003162  0E5A               	movlw	90
  4963  003164  0100               	movlb	0	; () banked
  4964  003166  6F82               	movwf	??_ID& (0+255),b
  4965  003168  0EB1               	movlw	177
  4966  00316A                     u8797:
  4967  00316A  2EE8               	decfsz	wreg,f,c
  4968  00316C  D7FE               	bra	u8797
  4969  00316E  2F82               	decfsz	??_ID& (0+255),f,b
  4970  003170  D7FC               	bra	u8797
  4971  003172  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  4972  003174  D7FA               	bra	u8797
  4973  003176  D000               	nop2	
  4974                           
  4975                           ;sort.c: 267: sensor_outputs[1] = (sensor_outputs[1] | PORTAbits.RA2);
  4976  003178  A480               	btfss	3968,2,c	;volatile
  4977  00317A  D004               	goto	u5870
  4978  00317C  0100               	movlb	0	; () banked
  4979  00317E  6B82               	clrf	??_ID& (0+255),b
  4980  003180  2B82               	incf	??_ID& (0+255),f,b
  4981  003182  D002               	goto	u5878
  4982  003184                     u5870:
  4983  003184  0100               	movlb	0	; () banked
  4984  003186  6B82               	clrf	??_ID& (0+255),b
  4985  003188                     u5878:
  4986  003188  0100               	movlb	0	; () banked
  4987  00318A  51E4               	movf	(_sensor_outputs+2)& (0+255),w,b
  4988  00318C  0100               	movlb	0	; () banked
  4989  00318E  1182               	iorwf	??_ID& (0+255),w,b
  4990  003190  0100               	movlb	0	; () banked
  4991  003192  6FE4               	movwf	(_sensor_outputs+2)& (0+255),b
  4992  003194  0100               	movlb	0	; () banked
  4993  003196  51E5               	movf	(_sensor_outputs+3)& (0+255),w,b
  4994  003198  0100               	movlb	0	; () banked
  4995  00319A  6FE5               	movwf	(_sensor_outputs+3)& (0+255),b
  4996                           
  4997                           ; BSR set to: 0
  4998                           ;sort.c: 275: if(!sensor_outputs[0]){
  4999  00319C  0100               	movlb	0	; () banked
  5000  00319E  51E2               	movf	_sensor_outputs& (0+255),w,b
  5001  0031A0  0100               	movlb	0	; () banked
  5002  0031A2  11E3               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  5003  0031A4  A4D8               	btfss	status,2,c
  5004  0031A6  D016               	goto	l7431
  5005                           
  5006                           ; BSR set to: 0
  5007                           ;sort.c: 276: if(!sensor_outputs[1]){
  5008  0031A8  0100               	movlb	0	; () banked
  5009  0031AA  51E4               	movf	(_sensor_outputs+2)& (0+255),w,b
  5010  0031AC  0100               	movlb	0	; () banked
  5011  0031AE  11E5               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  5012  0031B0  A4D8               	btfss	status,2,c
  5013  0031B2  D008               	goto	l7427
  5014                           
  5015                           ; BSR set to: 0
  5016                           ;sort.c: 277: count_pop_no_tab++;
  5017  0031B4  0101               	movlb	1	; () banked
  5018  0031B6  4B27               	infsnz	_count_pop_no_tab& (0+255),f,b
  5019  0031B8  2B28               	incf	(_count_pop_no_tab+1)& (0+255),f,b
  5020                           
  5021                           ; BSR set to: 1
  5022                           ;sort.c: 278: cur_can = 0;
  5023  0031BA  0E00               	movlw	0
  5024  0031BC  0101               	movlb	1	; () banked
  5025  0031BE  6F2C               	movwf	(_cur_can+1)& (0+255),b
  5026  0031C0  0E00               	movlw	0
  5027  0031C2  D007               	goto	L4
  5028  0031C4                     l7427:
  5029                           
  5030                           ;sort.c: 280: else{
  5031                           ;sort.c: 281: count_pop_w_tab++;
  5032  0031C4  0101               	movlb	1	; () banked
  5033  0031C6  4B29               	infsnz	_count_pop_w_tab& (0+255),f,b
  5034  0031C8  2B2A               	incf	(_count_pop_w_tab+1)& (0+255),f,b
  5035                           
  5036                           ; BSR set to: 1
  5037                           ;sort.c: 282: cur_can = 1;
  5038  0031CA  0E00               	movlw	0
  5039  0031CC  0101               	movlb	1	; () banked
  5040  0031CE  6F2C               	movwf	(_cur_can+1)& (0+255),b
  5041  0031D0  0E01               	movlw	1
  5042  0031D2                     L4:
  5043  0031D2  6F2B               	movwf	_cur_can& (0+255),b
  5044  0031D4                     l7431:
  5045                           
  5046                           ;sort.c: 283: }
  5047                           ;sort.c: 284: }
  5048                           ;sort.c: 285: if(sensor_outputs[0]){
  5049  0031D4  0100               	movlb	0	; () banked
  5050  0031D6  51E2               	movf	_sensor_outputs& (0+255),w,b
  5051  0031D8  0100               	movlb	0	; () banked
  5052  0031DA  11E3               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  5053  0031DC  B4D8               	btfsc	status,2,c
  5054  0031DE  D016               	goto	l7443
  5055                           
  5056                           ; BSR set to: 0
  5057                           ;sort.c: 286: if(!sensor_outputs[1]){
  5058  0031E0  0100               	movlb	0	; () banked
  5059  0031E2  51E4               	movf	(_sensor_outputs+2)& (0+255),w,b
  5060  0031E4  0100               	movlb	0	; () banked
  5061  0031E6  11E5               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  5062  0031E8  A4D8               	btfss	status,2,c
  5063  0031EA  D008               	goto	l7439
  5064                           
  5065                           ; BSR set to: 0
  5066                           ;sort.c: 287: count_can_w_lab++;
  5067  0031EC  0101               	movlb	1	; () banked
  5068  0031EE  4B25               	infsnz	_count_can_w_lab& (0+255),f,b
  5069  0031F0  2B26               	incf	(_count_can_w_lab+1)& (0+255),f,b
  5070                           
  5071                           ; BSR set to: 1
  5072                           ;sort.c: 288: cur_can = 2;
  5073  0031F2  0E00               	movlw	0
  5074  0031F4  0101               	movlb	1	; () banked
  5075  0031F6  6F2C               	movwf	(_cur_can+1)& (0+255),b
  5076  0031F8  0E02               	movlw	2
  5077  0031FA  D007               	goto	L5
  5078  0031FC                     l7439:
  5079                           
  5080                           ;sort.c: 290: else{
  5081                           ;sort.c: 291: count_can_no_lab++;
  5082  0031FC  0101               	movlb	1	; () banked
  5083  0031FE  4B23               	infsnz	_count_can_no_lab& (0+255),f,b
  5084  003200  2B24               	incf	(_count_can_no_lab+1)& (0+255),f,b
  5085                           
  5086                           ; BSR set to: 1
  5087                           ;sort.c: 292: cur_can = 3;
  5088  003202  0E00               	movlw	0
  5089  003204  0101               	movlb	1	; () banked
  5090  003206  6F2C               	movwf	(_cur_can+1)& (0+255),b
  5091  003208  0E03               	movlw	3
  5092  00320A                     L5:
  5093  00320A  6F2B               	movwf	_cur_can& (0+255),b
  5094  00320C                     l7443:
  5095                           
  5096                           ;sort.c: 293: }
  5097                           ;sort.c: 294: }
  5098                           ;sort.c: 295: LATAbits.LATA3 = 0;
  5099  00320C  9689               	bcf	3977,3,c	;volatile
  5100                           
  5101                           ;sort.c: 296: _delay((unsigned long)((200)*(32000000/4000.0)));
  5102  00320E  0E09               	movlw	9
  5103  003210  0100               	movlb	0	; () banked
  5104  003212  6F83               	movwf	(??_ID+1)& (0+255),b
  5105  003214  0E1E               	movlw	30
  5106  003216  0100               	movlb	0	; () banked
  5107  003218  6F82               	movwf	??_ID& (0+255),b
  5108  00321A  0EE4               	movlw	228
  5109  00321C                     u8807:
  5110  00321C  2EE8               	decfsz	wreg,f,c
  5111  00321E  D7FE               	bra	u8807
  5112  003220  2F82               	decfsz	??_ID& (0+255),f,b
  5113  003222  D7FC               	bra	u8807
  5114  003224  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  5115  003226  D7FA               	bra	u8807
  5116  003228  F000               	nop	
  5117                           
  5118                           ;sort.c: 297: LATAbits.LATA3 = 1;
  5119  00322A  8689               	bsf	3977,3,c	;volatile
  5120                           
  5121                           ;sort.c: 300: for(int i=0;i<10000;i++)
  5122  00322C  0E00               	movlw	0
  5123  00322E  0100               	movlb	0	; () banked
  5124  003230  6F85               	movwf	(ID@i+1)& (0+255),b
  5125  003232  0E00               	movlw	0
  5126  003234  6F84               	movwf	ID@i& (0+255),b
  5127  003236  0100               	movlb	0	; () banked
  5128  003238  BF85               	btfsc	(ID@i+1)& (0+255),7,b
  5129  00323A  D008               	goto	l805
  5130  00323C  0E10               	movlw	16
  5131  00323E  0100               	movlb	0	; () banked
  5132  003240  5D84               	subwf	ID@i& (0+255),w,b
  5133  003242  0E27               	movlw	39
  5134  003244  0100               	movlb	0	; () banked
  5135  003246  5985               	subwfb	(ID@i+1)& (0+255),w,b
  5136  003248  B0D8               	btfsc	status,0,c
  5137  00324A  D00D               	goto	l806
  5138  00324C                     l805:
  5139                           
  5140                           ; BSR set to: 0
  5141                           ;sort.c: 301: {
  5142                           ;sort.c: 302: LATCbits.LATC0 = 1;
  5143  00324C  808B               	bsf	3979,0,c	;volatile
  5144                           
  5145                           ; BSR set to: 0
  5146                           ;sort.c: 303: _delay((unsigned long)((10)*(32000000/4000000.0)));
  5147  00324E  0E1A               	movlw	26
  5148  003250                     u8817:
  5149  003250  2EE8               	decfsz	wreg,f,c
  5150  003252  D7FE               	bra	u8817
  5151  003254  D000               	nop2	
  5152                           
  5153                           ;sort.c: 304: LATCbits.LATC0 = 0;
  5154  003256  908B               	bcf	3979,0,c	;volatile
  5155                           
  5156                           ;sort.c: 305: _delay((unsigned long)((90)*(32000000/4000000.0)));
  5157  003258  0EF0               	movlw	240
  5158  00325A                     u8827:
  5159  00325A  2EE8               	decfsz	wreg,f,c
  5160  00325C  D7FE               	bra	u8827
  5161  00325E  0100               	movlb	0	; () banked
  5162  003260  4B84               	infsnz	ID@i& (0+255),f,b
  5163  003262  2B85               	incf	(ID@i+1)& (0+255),f,b
  5164  003264  D7E8               	goto	L6
  5165  003266                     l806:
  5166                           
  5167                           ; BSR set to: 0
  5168                           ;sort.c: 306: }
  5169                           ;sort.c: 307: LATCbits.LATC0 = 0;
  5170  003266  908B               	bcf	3979,0,c	;volatile
  5171                           
  5172                           ;sort.c: 309: LATAbits.LATA3 = 0;
  5173  003268  9689               	bcf	3977,3,c	;volatile
  5174                           
  5175                           ; BSR set to: 0
  5176                           ;sort.c: 313: f_can_coming_to_distribution = 1;
  5177  00326A  0E00               	movlw	0
  5178  00326C  0101               	movlb	1	; () banked
  5179  00326E  6F34               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  5180  003270  0E01               	movlw	1
  5181  003272  6F33               	movwf	_f_can_coming_to_distribution& (0+255),b
  5182                           
  5183                           ; BSR set to: 1
  5184                           ;sort.c: 314: _delay((unsigned long)((1500)*(32000000/4000.0)));
  5185  003274  0E3D               	movlw	61
  5186  003276  0100               	movlb	0	; () banked
  5187  003278  6F83               	movwf	(??_ID+1)& (0+255),b
  5188  00327A  0EE1               	movlw	225
  5189  00327C  0100               	movlb	0	; () banked
  5190  00327E  6F82               	movwf	??_ID& (0+255),b
  5191  003280  0E3F               	movlw	63
  5192  003282                     u8837:
  5193  003282  2EE8               	decfsz	wreg,f,c
  5194  003284  D7FE               	bra	u8837
  5195  003286  2F82               	decfsz	??_ID& (0+255),f,b
  5196  003288  D7FC               	bra	u8837
  5197  00328A  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  5198  00328C  D7FA               	bra	u8837
  5199  00328E  D000               	nop2	
  5200                           
  5201                           ;sort.c: 315: LATCbits.LATC0 = 1;
  5202  003290  808B               	bsf	3979,0,c	;volatile
  5203                           
  5204                           ;sort.c: 318: if(!f_lastCan){
  5205  003292  0100               	movlb	0	; () banked
  5206  003294  51EE               	movf	_f_lastCan& (0+255),w,b
  5207  003296  0100               	movlb	0	; () banked
  5208  003298  11EF               	iorwf	(_f_lastCan+1)& (0+255),w,b
  5209  00329A  A4D8               	btfss	status,2,c
  5210  00329C  D032               	goto	l7481
  5211                           
  5212                           ; BSR set to: 0
  5213                           ;sort.c: 319: for(int i=0; i<46; i++){
  5214  00329E  0E00               	movlw	0
  5215  0032A0  0100               	movlb	0	; () banked
  5216  0032A2  6F87               	movwf	(ID@i_1173+1)& (0+255),b
  5217  0032A4  0E00               	movlw	0
  5218  0032A6  6F86               	movwf	ID@i_1173& (0+255),b
  5219                           
  5220                           ; BSR set to: 0
  5221  0032A8  0100               	movlb	0	; () banked
  5222  0032AA  BF87               	btfsc	(ID@i_1173+1)& (0+255),7,b
  5223  0032AC  D008               	goto	l7473
  5224  0032AE  0100               	movlb	0	; () banked
  5225  0032B0  5187               	movf	(ID@i_1173+1)& (0+255),w,b
  5226  0032B2  E126               	bnz	l809
  5227  0032B4  0E2E               	movlw	46
  5228  0032B6  0100               	movlb	0	; () banked
  5229  0032B8  5D86               	subwf	ID@i_1173& (0+255),w,b
  5230  0032BA  B0D8               	btfsc	status,0,c
  5231  0032BC  D021               	goto	l809
  5232  0032BE                     l7473:
  5233                           
  5234                           ; BSR set to: 0
  5235                           ;sort.c: 320: LATBbits.LATB2 = !LATBbits.LATB2;
  5236  0032BE  B48A               	btfsc	3978,2,c	;volatile
  5237  0032C0  D004               	goto	u5960
  5238  0032C2  0100               	movlb	0	; () banked
  5239  0032C4  6B82               	clrf	??_ID& (0+255),b
  5240  0032C6  2B82               	incf	??_ID& (0+255),f,b
  5241  0032C8  D002               	goto	u5978
  5242  0032CA                     u5960:
  5243  0032CA  0100               	movlb	0	; () banked
  5244  0032CC  6B82               	clrf	??_ID& (0+255),b
  5245  0032CE                     u5978:
  5246  0032CE  0100               	movlb	0	; () banked
  5247  0032D0  4782               	rlncf	??_ID& (0+255),f,b
  5248  0032D2  4782               	rlncf	??_ID& (0+255),f,b
  5249  0032D4  508A               	movf	3978,w,c	;volatile
  5250  0032D6  0100               	movlb	0	; () banked
  5251  0032D8  1982               	xorwf	??_ID& (0+255),w,b
  5252  0032DA  0BFB               	andlw	-5
  5253  0032DC  1982               	xorwf	??_ID& (0+255),w,b
  5254  0032DE  6E8A               	movwf	3978,c	;volatile
  5255                           
  5256                           ; BSR set to: 0
  5257                           ;sort.c: 321: delay_ms(45-i);
  5258  0032E0  0100               	movlb	0	; () banked
  5259  0032E2  5186               	movf	ID@i_1173& (0+255),w,b
  5260  0032E4  0800               	sublw	0
  5261  0032E6  0F2D               	addlw	45
  5262  0032E8  EC6A  F028         	call	_delay_ms
  5263  0032EC  0100               	movlb	0	; () banked
  5264  0032EE  4B86               	infsnz	ID@i_1173& (0+255),f,b
  5265  0032F0  2B87               	incf	(ID@i_1173+1)& (0+255),f,b
  5266                           
  5267                           ; BSR set to: 0
  5268  0032F2  0100               	movlb	0	; () banked
  5269  0032F4  BF87               	btfsc	(ID@i_1173+1)& (0+255),7,b
  5270  0032F6  D7E3               	goto	l7473
  5271  0032F8  0100               	movlb	0	; () banked
  5272  0032FA  5187               	movf	(ID@i_1173+1)& (0+255),w,b
  5273  0032FC  E101               	bnz	u5980
  5274  0032FE  D7DA               	goto	L7
  5275  003300                     u5980:
  5276  003300                     l809:
  5277                           
  5278                           ; BSR set to: 0
  5279                           ;sort.c: 322: }
  5280                           ;sort.c: 323: LATBbits.LATB2 = 1;
  5281  003300  848A               	bsf	3978,2,c	;volatile
  5282  003302                     l7481:
  5283                           
  5284                           ; BSR set to: 0
  5285                           ;sort.c: 324: }
  5286                           ;sort.c: 326: f_can_coming_to_ID = 0;
  5287  003302  0E00               	movlw	0
  5288  003304  0101               	movlb	1	; () banked
  5289  003306  6F32               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  5290  003308  0E00               	movlw	0
  5291  00330A  6F31               	movwf	_f_can_coming_to_ID& (0+255),b
  5292  00330C  0012               	return	
  5293  00330E                     __end_of_ID:
  5294                           	opt stack 0
  5295                           tblptru	equ	0xFF8
  5296                           tblptrh	equ	0xFF7
  5297                           tblptrl	equ	0xFF6
  5298                           tablat	equ	0xFF5
  5299                           prodh	equ	0xFF4
  5300                           prodl	equ	0xFF3
  5301                           postinc0	equ	0xFEE
  5302                           wreg	equ	0xFE8
  5303                           postdec1	equ	0xFE5
  5304                           fsr1l	equ	0xFE1
  5305                           indf2	equ	0xFDF
  5306                           postinc2	equ	0xFDE
  5307                           postdec2	equ	0xFDD
  5308                           fsr2h	equ	0xFDA
  5309                           fsr2l	equ	0xFD9
  5310                           status	equ	0xFD8
  5311                           
  5312 ;; *************** function _delay_ms *****************
  5313 ;; Defined at:
  5314 ;;		line 574 in file "sort.c"
  5315 ;; Parameters:    Size  Location     Type
  5316 ;;  milliseconds    1    wreg     unsigned char 
  5317 ;; Auto vars:     Size  Location     Type
  5318 ;;  milliseconds    1    1[BANK0 ] unsigned char 
  5319 ;; Return value:  Size  Location     Type
  5320 ;;                  1    wreg      void 
  5321 ;; Registers used:
  5322 ;;		wreg, status,2, status,0, cstack
  5323 ;; Tracked objects:
  5324 ;;		On entry : 0/0
  5325 ;;		On exit  : 0/0
  5326 ;;		Unchanged: 0/0
  5327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5328 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5329 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5330 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5331 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5332 ;;Total ram usage:        2 bytes
  5333 ;; Hardware stack levels used:    1
  5334 ;; Hardware stack levels required when called:    7
  5335 ;; This function calls:
  5336 ;;		Nothing
  5337 ;; This function is called by:
  5338 ;;		_Loading
  5339 ;;		_ID
  5340 ;; This function uses a non-reentrant model
  5341 ;;
  5342                           
  5343                           	psect	text10
  5344  0050D4                     __ptext10:
  5345                           	opt stack 0
  5346  0050D4                     _delay_ms:
  5347                           	opt stack 21
  5348                           
  5349                           ; BSR set to: 1
  5350                           ;incstack = 0
  5351                           ;delay_ms@milliseconds stored from wreg
  5352  0050D4  0100               	movlb	0	; () banked
  5353  0050D6  6F81               	movwf	delay_ms@milliseconds& (0+255),b
  5354                           
  5355                           ;sort.c: 575: while(milliseconds > 0)
  5356  0050D8  D00B               	goto	l6867
  5357  0050DA                     l6863:
  5358                           
  5359                           ;sort.c: 576: {
  5360                           ;sort.c: 577: milliseconds--;
  5361  0050DA  0100               	movlb	0	; () banked
  5362  0050DC  0781               	decf	delay_ms@milliseconds& (0+255),f,b
  5363                           
  5364                           ; BSR set to: 0
  5365                           ;sort.c: 578: _delay((unsigned long)((990)*(32000000/4000000.0)));
  5366  0050DE  0E0B               	movlw	11
  5367  0050E0  0100               	movlb	0	; () banked
  5368  0050E2  6F80               	movwf	??_delay_ms& (0+255),b
  5369  0050E4  0E47               	movlw	71
  5370  0050E6                     u8847:
  5371  0050E6  2EE8               	decfsz	wreg,f,c
  5372  0050E8  D7FE               	bra	u8847
  5373  0050EA  2F80               	decfsz	??_delay_ms& (0+255),f,b
  5374  0050EC  D7FC               	bra	u8847
  5375  0050EE  D000               	nop2	
  5376  0050F0                     l6867:
  5377  0050F0  0100               	movlb	0	; () banked
  5378  0050F2  5181               	movf	delay_ms@milliseconds& (0+255),w,b
  5379  0050F4  0100               	movlb	0	; () banked
  5380  0050F6  B4D8               	btfsc	status,2,c
  5381  0050F8  0012               	return	
  5382  0050FA  D7EF               	goto	l6863
  5383  0050FC                     __end_of_delay_ms:
  5384                           	opt stack 0
  5385                           tblptru	equ	0xFF8
  5386                           tblptrh	equ	0xFF7
  5387                           tblptrl	equ	0xFF6
  5388                           tablat	equ	0xFF5
  5389                           prodh	equ	0xFF4
  5390                           prodl	equ	0xFF3
  5391                           postinc0	equ	0xFEE
  5392                           wreg	equ	0xFE8
  5393                           postdec1	equ	0xFE5
  5394                           fsr1l	equ	0xFE1
  5395                           indf2	equ	0xFDF
  5396                           postinc2	equ	0xFDE
  5397                           postdec2	equ	0xFDD
  5398                           fsr2h	equ	0xFDA
  5399                           fsr2l	equ	0xFD9
  5400                           status	equ	0xFD8
  5401                           
  5402 ;; *************** function _Distribution *****************
  5403 ;; Defined at:
  5404 ;;		line 329 in file "sort.c"
  5405 ;; Parameters:    Size  Location     Type
  5406 ;;		None
  5407 ;; Auto vars:     Size  Location     Type
  5408 ;;		None
  5409 ;; Return value:  Size  Location     Type
  5410 ;;                  1    wreg      void 
  5411 ;; Registers used:
  5412 ;;		wreg, status,2, status,0, cstack
  5413 ;; Tracked objects:
  5414 ;;		On entry : 0/0
  5415 ;;		On exit  : 0/0
  5416 ;;		Unchanged: 0/0
  5417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5418 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5419 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5420 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5421 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5422 ;;Total ram usage:        2 bytes
  5423 ;; Hardware stack levels used:    1
  5424 ;; Hardware stack levels required when called:    8
  5425 ;; This function calls:
  5426 ;;		_updateServoPosition
  5427 ;; This function is called by:
  5428 ;;		_sort
  5429 ;; This function uses a non-reentrant model
  5430 ;;
  5431                           
  5432                           	psect	text11
  5433  003E34                     __ptext11:
  5434                           	opt stack 0
  5435  003E34                     _Distribution:
  5436                           	opt stack 21
  5437                           
  5438                           ;sort.c: 330: if(f_can_coming_to_distribution){
  5439                           
  5440                           ; BSR set to: 0
  5441                           ;incstack = 0
  5442  003E34  0101               	movlb	1	; () banked
  5443  003E36  5133               	movf	_f_can_coming_to_distribution& (0+255),w,b
  5444  003E38  0101               	movlb	1	; () banked
  5445  003E3A  1134               	iorwf	(_f_can_coming_to_distribution+1)& (0+255),w,b
  5446  003E3C  B4D8               	btfsc	status,2,c
  5447  003E3E  0012               	return	
  5448  003E40  D034               	goto	l7497
  5449  003E42                     l7487:
  5450                           
  5451                           ;sort.c: 340: updateServoPosition(500, 1);
  5452  003E42  0E01               	movlw	1
  5453  003E44  0100               	movlb	0	; () banked
  5454  003E46  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5455  003E48  0EF4               	movlw	244
  5456  003E4A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5457  003E4C  0E00               	movlw	0
  5458  003E4E  0100               	movlb	0	; () banked
  5459  003E50  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5460  003E52  0E01               	movlw	1
  5461  003E54  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5462  003E56  EC95  F022         	call	_updateServoPosition	;wreg free
  5463                           
  5464                           ;sort.c: 341: break;
  5465  003E5A  D03E               	goto	l7499
  5466  003E5C                     l7489:
  5467                           
  5468                           ;sort.c: 343: updateServoPosition(850, 1);
  5469  003E5C  0E03               	movlw	3
  5470  003E5E  0100               	movlb	0	; () banked
  5471  003E60  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5472  003E62  0E52               	movlw	82
  5473  003E64  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5474  003E66  0E00               	movlw	0
  5475  003E68  0100               	movlb	0	; () banked
  5476  003E6A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5477  003E6C  0E01               	movlw	1
  5478  003E6E  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5479  003E70  EC95  F022         	call	_updateServoPosition	;wreg free
  5480                           
  5481                           ;sort.c: 344: break;
  5482  003E74  D031               	goto	l7499
  5483  003E76                     l7491:
  5484                           
  5485                           ;sort.c: 346: updateServoPosition(1670, 1);
  5486  003E76  0E06               	movlw	6
  5487  003E78  0100               	movlb	0	; () banked
  5488  003E7A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5489  003E7C  0E86               	movlw	134
  5490  003E7E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5491  003E80  0E00               	movlw	0
  5492  003E82  0100               	movlb	0	; () banked
  5493  003E84  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5494  003E86  0E01               	movlw	1
  5495  003E88  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5496  003E8A  EC95  F022         	call	_updateServoPosition	;wreg free
  5497                           
  5498                           ;sort.c: 347: break;
  5499  003E8E  D024               	goto	l7499
  5500  003E90                     l7493:
  5501                           
  5502                           ;sort.c: 349: updateServoPosition(2400, 1);
  5503  003E90  0E09               	movlw	9
  5504  003E92  0100               	movlb	0	; () banked
  5505  003E94  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5506  003E96  0E60               	movlw	96
  5507  003E98  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5508  003E9A  0E00               	movlw	0
  5509  003E9C  0100               	movlb	0	; () banked
  5510  003E9E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5511  003EA0  0E01               	movlw	1
  5512  003EA2  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5513  003EA4  EC95  F022         	call	_updateServoPosition	;wreg free
  5514                           
  5515                           ;sort.c: 353: }
  5516                           
  5517                           ;sort.c: 352: break;
  5518                           
  5519                           ;sort.c: 351: default:
  5520                           
  5521                           ;sort.c: 350: break;
  5522  003EA8  D017               	goto	l7499
  5523  003EAA                     l7497:
  5524  003EAA  C12B  F088         	movff	_cur_can,??_Distribution
  5525  003EAE  C12C  F089         	movff	_cur_can+1,??_Distribution+1
  5526                           
  5527                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5528                           ; Switch size 1, requested type "space"
  5529                           ; Number of cases is 1, Range of values is 0 to 0
  5530                           ; switch strategies available:
  5531                           ; Name         Instructions Cycles
  5532                           ; simple_byte            4     3 (average)
  5533                           ;	Chosen strategy is simple_byte
  5534  003EB2  0100               	movlb	0	; () banked
  5535  003EB4  5189               	movf	(??_Distribution+1)& (0+255),w,b
  5536  003EB6  0A00               	xorlw	0	; case 0
  5537  003EB8  A4D8               	btfss	status,2,c
  5538  003EBA  D00E               	goto	l7499
  5539                           
  5540                           ; BSR set to: 0
  5541                           ; Switch size 1, requested type "space"
  5542                           ; Number of cases is 4, Range of values is 0 to 3
  5543                           ; switch strategies available:
  5544                           ; Name         Instructions Cycles
  5545                           ; simple_byte           13     7 (average)
  5546                           ;	Chosen strategy is simple_byte
  5547  003EBC  0100               	movlb	0	; () banked
  5548  003EBE  5188               	movf	??_Distribution& (0+255),w,b
  5549  003EC0  0A00               	xorlw	0	; case 0
  5550  003EC2  B4D8               	btfsc	status,2,c
  5551  003EC4  D7BE               	goto	l7487
  5552  003EC6  0A01               	xorlw	1	; case 1
  5553  003EC8  B4D8               	btfsc	status,2,c
  5554  003ECA  D7C8               	goto	l7489
  5555  003ECC  0A03               	xorlw	3	; case 2
  5556  003ECE  B4D8               	btfsc	status,2,c
  5557  003ED0  D7D2               	goto	l7491
  5558  003ED2  0A01               	xorlw	1	; case 3
  5559  003ED4  B4D8               	btfsc	status,2,c
  5560  003ED6  D7DC               	goto	l7493
  5561  003ED8                     l7499:
  5562                           
  5563                           ;sort.c: 354: updateServoPosition(1050, 3);
  5564  003ED8  0E04               	movlw	4
  5565  003EDA  0100               	movlb	0	; () banked
  5566  003EDC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5567  003EDE  0E1A               	movlw	26
  5568  003EE0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5569  003EE2  0E00               	movlw	0
  5570  003EE4  0100               	movlb	0	; () banked
  5571  003EE6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5572  003EE8  0E03               	movlw	3
  5573  003EEA  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5574  003EEC  EC95  F022         	call	_updateServoPosition	;wreg free
  5575                           
  5576                           ;sort.c: 355: servo_timer_target = 750;
  5577  003EF0  0E02               	movlw	2
  5578  003EF2  6E74               	movwf	_servo_timer_target+1,c	;volatile
  5579  003EF4  0EEE               	movlw	238
  5580  003EF6  6E73               	movwf	_servo_timer_target,c	;volatile
  5581                           
  5582                           ;sort.c: 356: f_panning_to_bin = 1;
  5583  003EF8  0E00               	movlw	0
  5584  003EFA  6E62               	movwf	_f_panning_to_bin+1,c	;volatile
  5585  003EFC  0E01               	movlw	1
  5586  003EFE  6E61               	movwf	_f_panning_to_bin,c	;volatile
  5587                           
  5588                           ;sort.c: 357: f_can_coming_to_distribution = 0;
  5589  003F00  0E00               	movlw	0
  5590  003F02  0101               	movlb	1	; () banked
  5591  003F04  6F34               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  5592  003F06  0E00               	movlw	0
  5593  003F08  6F33               	movwf	_f_can_coming_to_distribution& (0+255),b
  5594  003F0A  0012               	return	
  5595  003F0C                     __end_of_Distribution:
  5596                           	opt stack 0
  5597                           tblptru	equ	0xFF8
  5598                           tblptrh	equ	0xFF7
  5599                           tblptrl	equ	0xFF6
  5600                           tablat	equ	0xFF5
  5601                           prodh	equ	0xFF4
  5602                           prodl	equ	0xFF3
  5603                           postinc0	equ	0xFEE
  5604                           wreg	equ	0xFE8
  5605                           postdec1	equ	0xFE5
  5606                           fsr1l	equ	0xFE1
  5607                           indf2	equ	0xFDF
  5608                           postinc2	equ	0xFDE
  5609                           postdec2	equ	0xFDD
  5610                           fsr2h	equ	0xFDA
  5611                           fsr2l	equ	0xFD9
  5612                           status	equ	0xFD8
  5613                           
  5614 ;; *************** function _machineConfig *****************
  5615 ;; Defined at:
  5616 ;;		line 15 in file "MachineConfig.c"
  5617 ;; Parameters:    Size  Location     Type
  5618 ;;		None
  5619 ;; Auto vars:     Size  Location     Type
  5620 ;;		None
  5621 ;; Return value:  Size  Location     Type
  5622 ;;                  1    wreg      void 
  5623 ;; Registers used:
  5624 ;;		wreg, status,2
  5625 ;; Tracked objects:
  5626 ;;		On entry : 0/0
  5627 ;;		On exit  : 0/0
  5628 ;;		Unchanged: 0/0
  5629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5630 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5631 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5632 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5633 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5634 ;;Total ram usage:        0 bytes
  5635 ;; Hardware stack levels used:    1
  5636 ;; Hardware stack levels required when called:    7
  5637 ;; This function calls:
  5638 ;;		Nothing
  5639 ;; This function is called by:
  5640 ;;		_main
  5641 ;; This function uses a non-reentrant model
  5642 ;;
  5643                           
  5644                           	psect	text12
  5645  0049AE                     __ptext12:
  5646                           	opt stack 0
  5647  0049AE                     _machineConfig:
  5648                           	opt stack 23
  5649                           
  5650                           ;MachineConfig.c: 17: OSCCON = 0xF0;
  5651                           
  5652                           ; BSR set to: 1
  5653                           ;incstack = 0
  5654  0049AE  0EF0               	movlw	240
  5655  0049B0  6ED3               	movwf	4051,c	;volatile
  5656                           
  5657                           ;MachineConfig.c: 18: OSCTUNEbits.PLLEN = 1;
  5658  0049B2  8C9B               	bsf	3995,6,c	;volatile
  5659                           
  5660                           ;MachineConfig.c: 22: TRISA = 0b00000111;
  5661  0049B4  0E07               	movlw	7
  5662  0049B6  6E92               	movwf	3986,c	;volatile
  5663                           
  5664                           ;MachineConfig.c: 24: TRISB = 0b11110010;
  5665  0049B8  0EF2               	movlw	242
  5666  0049BA  6E93               	movwf	3987,c	;volatile
  5667                           
  5668                           ;MachineConfig.c: 27: TRISC = 0x00;
  5669  0049BC  0E00               	movlw	0
  5670  0049BE  6E94               	movwf	3988,c	;volatile
  5671                           
  5672                           ;MachineConfig.c: 31: TRISD = 0x00;
  5673  0049C0  0E00               	movlw	0
  5674  0049C2  6E95               	movwf	3989,c	;volatile
  5675                           
  5676                           ;MachineConfig.c: 34: TRISE = 0x00;
  5677  0049C4  0E00               	movlw	0
  5678  0049C6  6E96               	movwf	3990,c	;volatile
  5679                           
  5680                           ;MachineConfig.c: 37: LATA = 0x00;
  5681  0049C8  0E00               	movlw	0
  5682  0049CA  6E89               	movwf	3977,c	;volatile
  5683                           
  5684                           ;MachineConfig.c: 38: LATB = 0x00;
  5685  0049CC  0E00               	movlw	0
  5686  0049CE  6E8A               	movwf	3978,c	;volatile
  5687                           
  5688                           ;MachineConfig.c: 39: LATC = 0x00;
  5689  0049D0  0E00               	movlw	0
  5690  0049D2  6E8B               	movwf	3979,c	;volatile
  5691                           
  5692                           ;MachineConfig.c: 40: LATD = 0x00;
  5693  0049D4  0E00               	movlw	0
  5694  0049D6  6E8C               	movwf	3980,c	;volatile
  5695                           
  5696                           ;MachineConfig.c: 41: LATE = 0x00;
  5697  0049D8  0E00               	movlw	0
  5698  0049DA  6E8D               	movwf	3981,c	;volatile
  5699                           
  5700                           ;MachineConfig.c: 43: nRBPU = 0;
  5701  0049DC  9EF1               	bcf	intcon2,7,c	;volatile
  5702                           
  5703                           ;MachineConfig.c: 46: ADCON0 = 0x00;
  5704  0049DE  0E00               	movlw	0
  5705  0049E0  6EC2               	movwf	4034,c	;volatile
  5706                           
  5707                           ;MachineConfig.c: 47: ADCON1 = 0b00001101;
  5708  0049E2  0E0D               	movlw	13
  5709  0049E4  6EC1               	movwf	4033,c	;volatile
  5710                           
  5711                           ;MachineConfig.c: 50: CVRCON = 0x00;
  5712  0049E6  0E00               	movlw	0
  5713  0049E8  6EB5               	movwf	4021,c	;volatile
  5714                           
  5715                           ;MachineConfig.c: 51: CMCONbits.CIS = 0;
  5716  0049EA  96B4               	bcf	4020,3,c	;volatile
  5717                           
  5718                           ;MachineConfig.c: 52: ADCON2 = 0b10110001;
  5719  0049EC  0EB1               	movlw	177
  5720  0049EE  6EC0               	movwf	4032,c	;volatile
  5721                           
  5722                           ;MachineConfig.c: 55: INT1IE = 1;
  5723  0049F0  86F0               	bsf	intcon3,3,c	;volatile
  5724                           
  5725                           ;MachineConfig.c: 57: TMR0IE = 1;
  5726  0049F2  8AF2               	bsf	intcon,5,c	;volatile
  5727                           
  5728                           ;MachineConfig.c: 58: TMR1IE = 1;
  5729  0049F4  809D               	bsf	3997,0,c	;volatile
  5730                           
  5731                           ;MachineConfig.c: 59: T1CON = 0b10110000;
  5732  0049F6  0EB0               	movlw	176
  5733  0049F8  6ECD               	movwf	4045,c	;volatile
  5734                           
  5735                           ;MachineConfig.c: 60: T3CON = 0b10110000;
  5736  0049FA  0EB0               	movlw	176
  5737  0049FC  6EB1               	movwf	4017,c	;volatile
  5738                           
  5739                           ;MachineConfig.c: 61: TMR2IE = 1;
  5740  0049FE  829D               	bsf	3997,1,c	;volatile
  5741                           
  5742                           ;MachineConfig.c: 62: TMR3IE = 1;
  5743  004A00  82A0               	bsf	4000,1,c	;volatile
  5744                           
  5745                           ;MachineConfig.c: 63: PEIE = 1;
  5746  004A02  8CF2               	bsf	intcon,6,c	;volatile
  5747                           
  5748                           ;MachineConfig.c: 64: ADIE = 0;
  5749  004A04  9C9D               	bcf	3997,6,c	;volatile
  5750                           
  5751                           ;MachineConfig.c: 65: (INTCONbits.GIE = 0);
  5752  004A06  9EF2               	bcf	intcon,7,c	;volatile
  5753  004A08  0012               	return		;funcret
  5754  004A0A                     __end_of_machineConfig:
  5755                           	opt stack 0
  5756                           tblptru	equ	0xFF8
  5757                           tblptrh	equ	0xFF7
  5758                           tblptrl	equ	0xFF6
  5759                           tablat	equ	0xFF5
  5760                           prodh	equ	0xFF4
  5761                           prodl	equ	0xFF3
  5762                           intcon	equ	0xFF2
  5763                           intcon2	equ	0xFF1
  5764                           intcon3	equ	0xFF0
  5765                           postinc0	equ	0xFEE
  5766                           wreg	equ	0xFE8
  5767                           postdec1	equ	0xFE5
  5768                           fsr1l	equ	0xFE1
  5769                           indf2	equ	0xFDF
  5770                           postinc2	equ	0xFDE
  5771                           postdec2	equ	0xFDD
  5772                           fsr2h	equ	0xFDA
  5773                           fsr2l	equ	0xFD9
  5774                           status	equ	0xFD8
  5775                           
  5776 ;; *************** function _logRun *****************
  5777 ;; Defined at:
  5778 ;;		line 84 in file "EEPROM.c"
  5779 ;; Parameters:    Size  Location     Type
  5780 ;;		None
  5781 ;; Auto vars:     Size  Location     Type
  5782 ;;  byte_i          1   53[BANK0 ] unsigned char 
  5783 ;;  i               2   55[BANK0 ] int 
  5784 ;;  num             1   49[BANK0 ] unsigned char 
  5785 ;;  addr            2   57[BANK0 ] unsigned short 
  5786 ;;  byte11          1   54[BANK0 ] unsigned char 
  5787 ;;  byte3           1   52[BANK0 ] unsigned char 
  5788 ;;  byte2           1   51[BANK0 ] unsigned char 
  5789 ;;  byte1           1   50[BANK0 ] unsigned char 
  5790 ;; Return value:  Size  Location     Type
  5791 ;;                  1    wreg      void 
  5792 ;; Registers used:
  5793 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5794 ;; Tracked objects:
  5795 ;;		On entry : 0/0
  5796 ;;		On exit  : 0/0
  5797 ;;		Unchanged: 0/0
  5798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5799 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5800 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5801 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5802 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5803 ;;Total ram usage:       10 bytes
  5804 ;; Hardware stack levels used:    1
  5805 ;; Hardware stack levels required when called:   11
  5806 ;; This function calls:
  5807 ;;		_EEPROM_read
  5808 ;;		_EEPROM_write
  5809 ;; This function is called by:
  5810 ;;		_main
  5811 ;; This function uses a non-reentrant model
  5812 ;;
  5813                           
  5814                           	psect	text13
  5815  0039D8                     __ptext13:
  5816                           	opt stack 0
  5817  0039D8                     _logRun:
  5818                           	opt stack 19
  5819                           
  5820                           ;EEPROM.c: 97: sel = EEPROM_read(0);
  5821                           
  5822                           ;incstack = 0
  5823  0039D8  0E00               	movlw	0
  5824  0039DA  0100               	movlb	0	; () banked
  5825  0039DC  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  5826  0039DE  0E00               	movlw	0
  5827  0039E0  6F80               	movwf	EEPROM_read@address& (0+255),b
  5828  0039E2  EC16  F029         	call	_EEPROM_read	;wreg free
  5829  0039E6  0100               	movlb	0	; () banked
  5830  0039E8  6FFD               	movwf	_sel& (0+255),b
  5831                           
  5832                           ; BSR set to: 0
  5833                           ;EEPROM.c: 98: unsigned short addr = 1 + 11 * sel;
  5834  0039EA  0100               	movlb	0	; () banked
  5835  0039EC  51FD               	movf	_sel& (0+255),w,b
  5836  0039EE  0D0B               	mullw	11
  5837  0039F0  0E01               	movlw	1
  5838  0039F2  24F3               	addwf	prodl,w,c
  5839  0039F4  0100               	movlb	0	; () banked
  5840  0039F6  6FB9               	movwf	logRun@addr& (0+255),b
  5841  0039F8  0E00               	movlw	0
  5842  0039FA  20F4               	addwfc	prodh,w,c
  5843  0039FC  0100               	movlb	0	; () banked
  5844  0039FE  6FBA               	movwf	(logRun@addr+1)& (0+255),b
  5845                           
  5846                           ; BSR set to: 0
  5847                           ;EEPROM.c: 101: if (sel < 3){
  5848  003A00  0E03               	movlw	3
  5849  003A02  0100               	movlb	0	; () banked
  5850  003A04  61FD               	cpfslt	_sel& (0+255),b
  5851  003A06  D00E               	goto	l9083
  5852                           
  5853                           ; BSR set to: 0
  5854                           ;EEPROM.c: 102: unsigned char num = sel+1;
  5855  003A08  0100               	movlb	0	; () banked
  5856  003A0A  29FD               	incf	_sel& (0+255),w,b
  5857  003A0C  0100               	movlb	0	; () banked
  5858  003A0E  6FB1               	movwf	logRun@num& (0+255),b
  5859                           
  5860                           ; BSR set to: 0
  5861                           ;EEPROM.c: 103: EEPROM_write(0, num);
  5862  003A10  0E00               	movlw	0
  5863  003A12  0100               	movlb	0	; () banked
  5864  003A14  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  5865  003A16  0E00               	movlw	0
  5866  003A18  6FAB               	movwf	EEPROM_write@address& (0+255),b
  5867  003A1A  C0B1  F0AD         	movff	logRun@num,EEPROM_write@data
  5868  003A1E  ECA6  F01E         	call	_EEPROM_write	;wreg free
  5869                           
  5870                           ;EEPROM.c: 104: }
  5871  003A22  D00A               	goto	l9085
  5872  003A24                     l9083:
  5873                           
  5874                           ;EEPROM.c: 105: else{
  5875                           ;EEPROM.c: 106: EEPROM_write(0, 0);
  5876  003A24  0E00               	movlw	0
  5877  003A26  0100               	movlb	0	; () banked
  5878  003A28  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  5879  003A2A  0E00               	movlw	0
  5880  003A2C  6FAB               	movwf	EEPROM_write@address& (0+255),b
  5881  003A2E  0E00               	movlw	0
  5882  003A30  0100               	movlb	0	; () banked
  5883  003A32  6FAD               	movwf	EEPROM_write@data& (0+255),b
  5884  003A34  ECA6  F01E         	call	_EEPROM_write	;wreg free
  5885  003A38                     l9085:
  5886                           
  5887                           ;EEPROM.c: 107: }
  5888                           ;EEPROM.c: 110: unsigned char byte1 = 0b10000000 | count_total;
  5889  003A38  0100               	movlb	0	; () banked
  5890  003A3A  51FE               	movf	_count_total& (0+255),w,b
  5891  003A3C  0980               	iorlw	128
  5892  003A3E  0100               	movlb	0	; () banked
  5893  003A40  6FB2               	movwf	logRun@byte1& (0+255),b
  5894                           
  5895                           ; BSR set to: 0
  5896                           ;EEPROM.c: 111: EEPROM_write(addr, byte1);
  5897  003A42  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  5898  003A46  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  5899  003A4A  C0B2  F0AD         	movff	logRun@byte1,EEPROM_write@data
  5900  003A4E  ECA6  F01E         	call	_EEPROM_write	;wreg free
  5901                           
  5902                           ;EEPROM.c: 112: addr++;
  5903  003A52  0100               	movlb	0	; () banked
  5904  003A54  4BB9               	infsnz	logRun@addr& (0+255),f,b
  5905  003A56  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  5906                           
  5907                           ; BSR set to: 0
  5908                           ;EEPROM.c: 115: unsigned char byte2 = (count_pop_no_tab << 4) | count_pop_w_tab;
  5909  003A58  0101               	movlb	1	; () banked
  5910  003A5A  3927               	swapf	_count_pop_no_tab& (0+255),w,b
  5911  003A5C  0BF0               	andlw	240
  5912  003A5E  0101               	movlb	1	; () banked
  5913  003A60  1129               	iorwf	_count_pop_w_tab& (0+255),w,b
  5914  003A62  0100               	movlb	0	; () banked
  5915  003A64  6FB3               	movwf	logRun@byte2& (0+255),b
  5916                           
  5917                           ; BSR set to: 0
  5918                           ;EEPROM.c: 116: EEPROM_write(addr, byte2);
  5919  003A66  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  5920  003A6A  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  5921  003A6E  C0B3  F0AD         	movff	logRun@byte2,EEPROM_write@data
  5922  003A72  ECA6  F01E         	call	_EEPROM_write	;wreg free
  5923                           
  5924                           ;EEPROM.c: 117: addr++;
  5925  003A76  0100               	movlb	0	; () banked
  5926  003A78  4BB9               	infsnz	logRun@addr& (0+255),f,b
  5927  003A7A  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  5928                           
  5929                           ; BSR set to: 0
  5930                           ;EEPROM.c: 118: unsigned char byte3 = (count_can_w_lab << 4) | count_can_no_lab;
  5931  003A7C  0101               	movlb	1	; () banked
  5932  003A7E  3925               	swapf	_count_can_w_lab& (0+255),w,b
  5933  003A80  0BF0               	andlw	240
  5934  003A82  0101               	movlb	1	; () banked
  5935  003A84  1123               	iorwf	_count_can_no_lab& (0+255),w,b
  5936  003A86  0100               	movlb	0	; () banked
  5937  003A88  6FB4               	movwf	logRun@byte3& (0+255),b
  5938                           
  5939                           ; BSR set to: 0
  5940                           ;EEPROM.c: 119: EEPROM_write(addr, byte3);
  5941  003A8A  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  5942  003A8E  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  5943  003A92  C0B4  F0AD         	movff	logRun@byte3,EEPROM_write@data
  5944  003A96  ECA6  F01E         	call	_EEPROM_write	;wreg free
  5945                           
  5946                           ;EEPROM.c: 120: addr++;
  5947  003A9A  0100               	movlb	0	; () banked
  5948  003A9C  4BB9               	infsnz	logRun@addr& (0+255),f,b
  5949  003A9E  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  5950                           
  5951                           ; BSR set to: 0
  5952                           ;EEPROM.c: 123: for(int i = 0; i < 7; i++){
  5953  003AA0  0E00               	movlw	0
  5954  003AA2  0100               	movlb	0	; () banked
  5955  003AA4  6FB8               	movwf	(logRun@i+1)& (0+255),b
  5956  003AA6  0E00               	movlw	0
  5957  003AA8  6FB7               	movwf	logRun@i& (0+255),b
  5958                           
  5959                           ; BSR set to: 0
  5960  003AAA  0100               	movlb	0	; () banked
  5961  003AAC  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  5962  003AAE  D008               	goto	l9109
  5963  003AB0  0100               	movlb	0	; () banked
  5964  003AB2  51B8               	movf	(logRun@i+1)& (0+255),w,b
  5965  003AB4  E128               	bnz	l1045
  5966  003AB6  0E07               	movlw	7
  5967  003AB8  0100               	movlb	0	; () banked
  5968  003ABA  5DB7               	subwf	logRun@i& (0+255),w,b
  5969  003ABC  B0D8               	btfsc	status,0,c
  5970  003ABE  D023               	goto	l1045
  5971  003AC0                     l9109:
  5972                           
  5973                           ; BSR set to: 0
  5974                           ;EEPROM.c: 124: unsigned char byte_i = startTime[i];
  5975  003AC0  90D8               	bcf	status,0,c
  5976  003AC2  0100               	movlb	0	; () banked
  5977  003AC4  35B7               	rlcf	logRun@i& (0+255),w,b
  5978  003AC6  6ED9               	movwf	fsr2l,c
  5979  003AC8  0100               	movlb	0	; () banked
  5980  003ACA  35B8               	rlcf	(logRun@i+1)& (0+255),w,b
  5981  003ACC  6EDA               	movwf	fsr2h,c
  5982  003ACE  0E0E               	movlw	low _startTime
  5983  003AD0  26D9               	addwf	fsr2l,f,c
  5984  003AD2  0E01               	movlw	high _startTime
  5985  003AD4  22DA               	addwfc	fsr2h,f,c
  5986  003AD6  50DF               	movf	indf2,w,c
  5987  003AD8  0100               	movlb	0	; () banked
  5988  003ADA  6FB5               	movwf	logRun@byte_i& (0+255),b
  5989                           
  5990                           ; BSR set to: 0
  5991                           ;EEPROM.c: 125: EEPROM_write(addr, byte_i);
  5992  003ADC  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  5993  003AE0  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  5994  003AE4  C0B5  F0AD         	movff	logRun@byte_i,EEPROM_write@data
  5995  003AE8  ECA6  F01E         	call	_EEPROM_write	;wreg free
  5996                           
  5997                           ;EEPROM.c: 126: addr++;
  5998  003AEC  0100               	movlb	0	; () banked
  5999  003AEE  4BB9               	infsnz	logRun@addr& (0+255),f,b
  6000  003AF0  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  6001                           
  6002                           ; BSR set to: 0
  6003  003AF2  0100               	movlb	0	; () banked
  6004  003AF4  4BB7               	infsnz	logRun@i& (0+255),f,b
  6005  003AF6  2BB8               	incf	(logRun@i+1)& (0+255),f,b
  6006                           
  6007                           ; BSR set to: 0
  6008  003AF8  0100               	movlb	0	; () banked
  6009  003AFA  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  6010  003AFC  D7E1               	goto	l9109
  6011  003AFE  0100               	movlb	0	; () banked
  6012  003B00  51B8               	movf	(logRun@i+1)& (0+255),w,b
  6013  003B02  E101               	bnz	u8140
  6014  003B04  D7D8               	goto	L8
  6015  003B06                     u8140:
  6016  003B06                     l1045:
  6017                           
  6018                           ; BSR set to: 0
  6019                           ;EEPROM.c: 127: }
  6020                           ;EEPROM.c: 130: unsigned char byte11 = total_time;
  6021  003B06  C0F8  F0B6         	movff	_total_time,logRun@byte11
  6022                           
  6023                           ; BSR set to: 0
  6024                           ;EEPROM.c: 131: EEPROM_write(addr, byte11);
  6025  003B0A  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  6026  003B0E  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  6027  003B12  C0B6  F0AD         	movff	logRun@byte11,EEPROM_write@data
  6028  003B16  ECA6  F01E         	call	_EEPROM_write	;wreg free
  6029  003B1A  0012               	return		;funcret
  6030  003B1C                     __end_of_logRun:
  6031                           	opt stack 0
  6032                           tblptru	equ	0xFF8
  6033                           tblptrh	equ	0xFF7
  6034                           tblptrl	equ	0xFF6
  6035                           tablat	equ	0xFF5
  6036                           prodh	equ	0xFF4
  6037                           prodl	equ	0xFF3
  6038                           intcon	equ	0xFF2
  6039                           intcon2	equ	0xFF1
  6040                           intcon3	equ	0xFF0
  6041                           postinc0	equ	0xFEE
  6042                           wreg	equ	0xFE8
  6043                           postdec1	equ	0xFE5
  6044                           fsr1l	equ	0xFE1
  6045                           indf2	equ	0xFDF
  6046                           postinc2	equ	0xFDE
  6047                           postdec2	equ	0xFDD
  6048                           fsr2h	equ	0xFDA
  6049                           fsr2l	equ	0xFD9
  6050                           status	equ	0xFD8
  6051                           
  6052 ;; *************** function _EEPROM_write *****************
  6053 ;; Defined at:
  6054 ;;		line 32 in file "EEPROM.c"
  6055 ;; Parameters:    Size  Location     Type
  6056 ;;  address         2   43[BANK0 ] unsigned short 
  6057 ;;  data            1   45[BANK0 ] unsigned char 
  6058 ;; Auto vars:     Size  Location     Type
  6059 ;;  i               1   48[BANK0 ] unsigned char 
  6060 ;;  i               1   47[BANK0 ] unsigned char 
  6061 ;; Return value:  Size  Location     Type
  6062 ;;                  1    wreg      void 
  6063 ;; Registers used:
  6064 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6065 ;; Tracked objects:
  6066 ;;		On entry : 0/0
  6067 ;;		On exit  : 0/0
  6068 ;;		Unchanged: 0/0
  6069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6070 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6071 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6072 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6073 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6074 ;;Total ram usage:        6 bytes
  6075 ;; Hardware stack levels used:    1
  6076 ;; Hardware stack levels required when called:   10
  6077 ;; This function calls:
  6078 ;;		_EEPROM_read
  6079 ;;		_lcdInst
  6080 ;;		_printf
  6081 ;; This function is called by:
  6082 ;;		_Loading
  6083 ;;		_logRun
  6084 ;; This function uses a non-reentrant model
  6085 ;;
  6086                           
  6087                           	psect	text14
  6088  003D4C                     __ptext14:
  6089                           	opt stack 0
  6090  003D4C                     _EEPROM_write:
  6091                           	opt stack 18
  6092                           
  6093                           ;EEPROM.c: 33: EECON1bits.WREN = 1;
  6094                           
  6095                           ;incstack = 0
  6096  003D4C  84A6               	bsf	4006,2,c	;volatile
  6097                           
  6098                           ;EEPROM.c: 36: EEADRH = (unsigned char)(address >> 8);
  6099  003D4E  0100               	movlb	0	; () banked
  6100  003D50  51AC               	movf	(EEPROM_write@address+1)& (0+255),w,b
  6101  003D52  6EAA               	movwf	4010,c	;volatile
  6102                           
  6103                           ; BSR set to: 0
  6104                           ;EEPROM.c: 37: EEADR = (unsigned char)address;
  6105  003D54  C0AB  FFA9         	movff	EEPROM_write@address,4009	;volatile
  6106                           
  6107                           ; BSR set to: 0
  6108                           ;EEPROM.c: 39: EEDATA = data;
  6109  003D58  C0AD  FFA8         	movff	EEPROM_write@data,4008	;volatile
  6110                           
  6111                           ; BSR set to: 0
  6112                           ;EEPROM.c: 40: EECON1bits.EEPGD = 0;
  6113  003D5C  9EA6               	bcf	4006,7,c	;volatile
  6114                           
  6115                           ; BSR set to: 0
  6116                           ;EEPROM.c: 41: EECON1bits.CFGS = 0;
  6117  003D5E  9CA6               	bcf	4006,6,c	;volatile
  6118                           
  6119                           ; BSR set to: 0
  6120                           ;EEPROM.c: 43: (INTCONbits.GIE = 0);
  6121  003D60  9EF2               	bcf	intcon,7,c	;volatile
  6122                           
  6123                           ;EEPROM.c: 45: EECON2 = 0x55;
  6124  003D62  0E55               	movlw	85
  6125  003D64  6EA7               	movwf	4007,c	;volatile
  6126                           
  6127                           ;EEPROM.c: 46: EECON2 = 0x0AA;
  6128  003D66  0EAA               	movlw	170
  6129  003D68  6EA7               	movwf	4007,c	;volatile
  6130                           
  6131                           ; BSR set to: 0
  6132                           ;EEPROM.c: 47: EECON1bits.WR = 1;
  6133  003D6A  82A6               	bsf	4006,1,c	;volatile
  6134                           
  6135                           ; BSR set to: 0
  6136                           ;EEPROM.c: 48: (INTCONbits.GIE = 1);
  6137  003D6C  8EF2               	bsf	intcon,7,c	;volatile
  6138  003D6E                     l1023:
  6139  003D6E  A8A1               	btfss	4001,4,c	;volatile
  6140  003D70  D7FE               	goto	l1023
  6141                           
  6142                           ;EEPROM.c: 53: PIR2bits.EEIF = 0;
  6143  003D72  98A1               	bcf	4001,4,c	;volatile
  6144                           
  6145                           ;EEPROM.c: 54: EECON1bits.WREN = 0;
  6146  003D74  94A6               	bcf	4006,2,c	;volatile
  6147                           
  6148                           ;EEPROM.c: 57: if(debug){
  6149  003D76  0101               	movlb	1	; () banked
  6150  003D78  512D               	movf	_debug& (0+255),w,b
  6151  003D7A  0101               	movlb	1	; () banked
  6152  003D7C  112E               	iorwf	(_debug+1)& (0+255),w,b
  6153  003D7E  B4D8               	btfsc	status,2,c
  6154  003D80  0012               	return	
  6155                           
  6156                           ; BSR set to: 1
  6157                           ;EEPROM.c: 58: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6158  003D82  0E01               	movlw	1
  6159  003D84  EC48  F029         	call	_lcdInst
  6160  003D88  0E68               	movlw	104
  6161  003D8A  0100               	movlb	0	; () banked
  6162  003D8C  6FAE               	movwf	??_EEPROM_write& (0+255),b
  6163  003D8E  0EE4               	movlw	228
  6164  003D90                     u8857:
  6165  003D90  2EE8               	decfsz	wreg,f,c
  6166  003D92  D7FE               	bra	u8857
  6167  003D94  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  6168  003D96  D7FC               	bra	u8857
  6169  003D98  F000               	nop	
  6170                           
  6171                           ;EEPROM.c: 59: lcdInst(0b10000000);;
  6172  003D9A  0E80               	movlw	128
  6173  003D9C  EC48  F029         	call	_lcdInst
  6174                           
  6175                           ;EEPROM.c: 60: if(EEPROM_read(address)==data){
  6176  003DA0  C0AB  F080         	movff	EEPROM_write@address,EEPROM_read@address
  6177  003DA4  C0AC  F081         	movff	EEPROM_write@address+1,EEPROM_read@address+1
  6178  003DA8  EC16  F029         	call	_EEPROM_read	;wreg free
  6179  003DAC  0100               	movlb	0	; () banked
  6180  003DAE  19AD               	xorwf	EEPROM_write@data& (0+255),w,b
  6181  003DB0  A4D8               	btfss	status,2,c
  6182  003DB2  D024               	goto	l6849
  6183                           
  6184                           ; BSR set to: 0
  6185                           ;EEPROM.c: 61: printf("(data: %u, addr: %u)", data, address);
  6186  003DB4  0E22               	movlw	low STR_66
  6187  003DB6  0100               	movlb	0	; () banked
  6188  003DB8  6F8E               	movwf	printf@f& (0+255),b
  6189  003DBA  0EFB               	movlw	high STR_66
  6190  003DBC  0100               	movlb	0	; () banked
  6191  003DBE  6F8F               	movwf	(printf@f+1)& (0+255),b
  6192  003DC0  C0AD  F090         	movff	EEPROM_write@data,?_printf+2
  6193  003DC4  0100               	movlb	0	; () banked
  6194  003DC6  6B91               	clrf	(?_printf+3)& (0+255),b
  6195  003DC8  C0AB  F092         	movff	EEPROM_write@address,?_printf+4
  6196  003DCC  C0AC  F093         	movff	EEPROM_write@address+1,?_printf+5
  6197  003DD0  EC02  F00B         	call	_printf	;wreg free
  6198                           
  6199                           ;EEPROM.c: 62: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));}
      +                          ;
  6200  003DD4  0E00               	movlw	0
  6201  003DD6  0100               	movlb	0	; () banked
  6202  003DD8  6FAF               	movwf	EEPROM_write@i& (0+255),b
  6203  003DDA                     l6841:
  6204                           
  6205                           ; BSR set to: 0
  6206  003DDA  0E63               	movlw	99
  6207  003DDC  0100               	movlb	0	; () banked
  6208  003DDE  65AF               	cpfsgt	EEPROM_write@i& (0+255),b
  6209  003DE0  D001               	goto	l6845
  6210  003DE2  0012               	return	
  6211  003DE4                     l6845:
  6212                           
  6213                           ; BSR set to: 0
  6214  003DE4  0E68               	movlw	104
  6215  003DE6  0100               	movlb	0	; () banked
  6216  003DE8  6FAE               	movwf	??_EEPROM_write& (0+255),b
  6217  003DEA  0EE4               	movlw	228
  6218  003DEC                     u8867:
  6219  003DEC  2EE8               	decfsz	wreg,f,c
  6220  003DEE  D7FE               	bra	u8867
  6221  003DF0  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  6222  003DF2  D7FC               	bra	u8867
  6223  003DF4  F000               	nop	
  6224  003DF6  0100               	movlb	0	; () banked
  6225  003DF8  2BAF               	incf	EEPROM_write@i& (0+255),f,b
  6226  003DFA  D7EF               	goto	l6841
  6227  003DFC                     l6849:
  6228                           
  6229                           ; BSR set to: 0
  6230                           ;EEPROM.c: 64: else{ printf("FAILED"); for(char i=0;i<100;i++){_delay((unsigned long)((1
      +                          0)*(32000000/4000.0)));}; }
  6231  003DFC  0EBD               	movlw	low STR_67
  6232  003DFE  0100               	movlb	0	; () banked
  6233  003E00  6F8E               	movwf	printf@f& (0+255),b
  6234  003E02  0EFF               	movlw	high STR_67
  6235  003E04  0100               	movlb	0	; () banked
  6236  003E06  6F8F               	movwf	(printf@f+1)& (0+255),b
  6237  003E08  EC02  F00B         	call	_printf	;wreg free
  6238  003E0C  0E00               	movlw	0
  6239  003E0E  0100               	movlb	0	; () banked
  6240  003E10  6FB0               	movwf	EEPROM_write@i_1397& (0+255),b
  6241  003E12                     l6853:
  6242                           
  6243                           ; BSR set to: 0
  6244  003E12  0E63               	movlw	99
  6245  003E14  0100               	movlb	0	; () banked
  6246  003E16  65B0               	cpfsgt	EEPROM_write@i_1397& (0+255),b
  6247  003E18  D001               	goto	l6857
  6248  003E1A  0012               	return	
  6249  003E1C                     l6857:
  6250                           
  6251                           ; BSR set to: 0
  6252  003E1C  0E68               	movlw	104
  6253  003E1E  0100               	movlb	0	; () banked
  6254  003E20  6FAE               	movwf	??_EEPROM_write& (0+255),b
  6255  003E22  0EE4               	movlw	228
  6256  003E24                     u8877:
  6257  003E24  2EE8               	decfsz	wreg,f,c
  6258  003E26  D7FE               	bra	u8877
  6259  003E28  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  6260  003E2A  D7FC               	bra	u8877
  6261  003E2C  F000               	nop	
  6262  003E2E  0100               	movlb	0	; () banked
  6263  003E30  2BB0               	incf	EEPROM_write@i_1397& (0+255),f,b
  6264  003E32  D7EF               	goto	l6853
  6265  003E34                     __end_of_EEPROM_write:
  6266                           	opt stack 0
  6267                           tblptru	equ	0xFF8
  6268                           tblptrh	equ	0xFF7
  6269                           tblptrl	equ	0xFF6
  6270                           tablat	equ	0xFF5
  6271                           prodh	equ	0xFF4
  6272                           prodl	equ	0xFF3
  6273                           intcon	equ	0xFF2
  6274                           intcon2	equ	0xFF1
  6275                           intcon3	equ	0xFF0
  6276                           postinc0	equ	0xFEE
  6277                           wreg	equ	0xFE8
  6278                           postdec1	equ	0xFE5
  6279                           fsr1l	equ	0xFE1
  6280                           indf2	equ	0xFDF
  6281                           postinc2	equ	0xFDE
  6282                           postdec2	equ	0xFDD
  6283                           fsr2h	equ	0xFDA
  6284                           fsr2l	equ	0xFD9
  6285                           status	equ	0xFD8
  6286                           
  6287 ;; *************** function _EEPROM_read *****************
  6288 ;; Defined at:
  6289 ;;		line 68 in file "EEPROM.c"
  6290 ;; Parameters:    Size  Location     Type
  6291 ;;  address         2    0[BANK0 ] unsigned short 
  6292 ;; Auto vars:     Size  Location     Type
  6293 ;;		None
  6294 ;; Return value:  Size  Location     Type
  6295 ;;                  1    wreg      unsigned char 
  6296 ;; Registers used:
  6297 ;;		wreg, status,2
  6298 ;; Tracked objects:
  6299 ;;		On entry : 0/0
  6300 ;;		On exit  : 0/0
  6301 ;;		Unchanged: 0/0
  6302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6303 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6304 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6305 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6306 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6307 ;;Total ram usage:        2 bytes
  6308 ;; Hardware stack levels used:    1
  6309 ;; Hardware stack levels required when called:    7
  6310 ;; This function calls:
  6311 ;;		Nothing
  6312 ;; This function is called by:
  6313 ;;		_Loading
  6314 ;;		_EEPROM_write
  6315 ;;		_logRun
  6316 ;; This function uses a non-reentrant model
  6317 ;;
  6318                           
  6319                           	psect	text15
  6320  00522C                     __ptext15:
  6321                           	opt stack 0
  6322  00522C                     _EEPROM_read:
  6323                           	opt stack 20
  6324                           
  6325                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
  6326                           
  6327                           ;incstack = 0
  6328  00522C  0100               	movlb	0	; () banked
  6329  00522E  5181               	movf	(EEPROM_read@address+1)& (0+255),w,b
  6330  005230  6EAA               	movwf	4010,c	;volatile
  6331                           
  6332                           ; BSR set to: 0
  6333                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
  6334  005232  C080  FFA9         	movff	EEPROM_read@address,4009	;volatile
  6335                           
  6336                           ; BSR set to: 0
  6337                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
  6338  005236  9EA6               	bcf	4006,7,c	;volatile
  6339                           
  6340                           ; BSR set to: 0
  6341                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
  6342  005238  9CA6               	bcf	4006,6,c	;volatile
  6343                           
  6344                           ; BSR set to: 0
  6345                           ;EEPROM.c: 75: EECON1bits.RD = 1;
  6346  00523A  80A6               	bsf	4006,0,c	;volatile
  6347  00523C                     l1036:
  6348  00523C  B0A6               	btfsc	4006,0,c	;volatile
  6349  00523E  D7FE               	goto	l1036
  6350                           
  6351                           ;EEPROM.c: 81: return EEDATA;
  6352  005240  50A8               	movf	4008,w,c	;volatile
  6353  005242  0012               	return	
  6354  005244                     __end_of_EEPROM_read:
  6355                           	opt stack 0
  6356                           tblptru	equ	0xFF8
  6357                           tblptrh	equ	0xFF7
  6358                           tblptrl	equ	0xFF6
  6359                           tablat	equ	0xFF5
  6360                           prodh	equ	0xFF4
  6361                           prodl	equ	0xFF3
  6362                           intcon	equ	0xFF2
  6363                           intcon2	equ	0xFF1
  6364                           intcon3	equ	0xFF0
  6365                           postinc0	equ	0xFEE
  6366                           wreg	equ	0xFE8
  6367                           postdec1	equ	0xFE5
  6368                           fsr1l	equ	0xFE1
  6369                           indf2	equ	0xFDF
  6370                           postinc2	equ	0xFDE
  6371                           postdec2	equ	0xFDD
  6372                           fsr2h	equ	0xFDA
  6373                           fsr2l	equ	0xFD9
  6374                           status	equ	0xFD8
  6375                           
  6376 ;; *************** function _initUI *****************
  6377 ;; Defined at:
  6378 ;;		line 62 in file "UI.c"
  6379 ;; Parameters:    Size  Location     Type
  6380 ;;		None
  6381 ;; Auto vars:     Size  Location     Type
  6382 ;;		None
  6383 ;; Return value:  Size  Location     Type
  6384 ;;                  1    wreg      void 
  6385 ;; Registers used:
  6386 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6387 ;; Tracked objects:
  6388 ;;		On entry : 0/0
  6389 ;;		On exit  : 0/0
  6390 ;;		Unchanged: 0/0
  6391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6392 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6393 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6394 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6395 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6396 ;;Total ram usage:        0 bytes
  6397 ;; Hardware stack levels used:    1
  6398 ;; Hardware stack levels required when called:   12
  6399 ;; This function calls:
  6400 ;;		_change_state_to_menu_start
  6401 ;;		_loadRTC
  6402 ;; This function is called by:
  6403 ;;		_main
  6404 ;; This function uses a non-reentrant model
  6405 ;;
  6406                           
  6407                           	psect	text16
  6408  004E16                     __ptext16:
  6409                           	opt stack 0
  6410  004E16                     _initUI:
  6411                           	opt stack 18
  6412                           
  6413                           ;UI.c: 63: (INTCONbits.GIE = 1);
  6414                           
  6415                           ;incstack = 0
  6416  004E16  8EF2               	bsf	intcon,7,c	;volatile
  6417                           
  6418                           ;UI.c: 64: machine_state = UI_state;
  6419  004E18  0E00               	movlw	0
  6420  004E1A  0100               	movlb	0	; () banked
  6421  004E1C  6FFC               	movwf	_machine_state& (0+255),b
  6422                           
  6423                           ;UI.c: 65: logstate = 0;
  6424  004E1E  0E00               	movlw	0
  6425  004E20  0100               	movlb	0	; () banked
  6426  004E22  6FF7               	movwf	(_logstate+1)& (0+255),b
  6427  004E24  0E00               	movlw	0
  6428  004E26  6FF6               	movwf	_logstate& (0+255),b
  6429                           
  6430                           ; BSR set to: 0
  6431                           ;UI.c: 67: if(RTCflag){
  6432  004E28  0100               	movlb	0	; () banked
  6433  004E2A  51EA               	movf	_RTCflag& (0+255),w,b
  6434  004E2C  0100               	movlb	0	; () banked
  6435  004E2E  11EB               	iorwf	(_RTCflag+1)& (0+255),w,b
  6436  004E30  A4D8               	btfss	status,2,c
  6437                           
  6438                           ; BSR set to: 0
  6439                           ;UI.c: 68: loadRTC();
  6440  004E32  EC0C  F022         	call	_loadRTC	;wreg free
  6441                           
  6442                           ;UI.c: 69: }
  6443                           ;UI.c: 71: change_state_to_menu_start();
  6444  004E36  EC29  F028         	call	_change_state_to_menu_start	;wreg free
  6445                           
  6446                           ;UI.c: 72: firstboot = 1;
  6447  004E3A  0E00               	movlw	0
  6448  004E3C  0101               	movlb	1	; () banked
  6449  004E3E  6F3C               	movwf	(_firstboot+1)& (0+255),b
  6450  004E40  0E01               	movlw	1
  6451  004E42  6F3B               	movwf	_firstboot& (0+255),b
  6452                           
  6453                           ; BSR set to: 1
  6454  004E44  0012               	return		;funcret
  6455  004E46                     __end_of_initUI:
  6456                           	opt stack 0
  6457                           tblptru	equ	0xFF8
  6458                           tblptrh	equ	0xFF7
  6459                           tblptrl	equ	0xFF6
  6460                           tablat	equ	0xFF5
  6461                           prodh	equ	0xFF4
  6462                           prodl	equ	0xFF3
  6463                           intcon	equ	0xFF2
  6464                           intcon2	equ	0xFF1
  6465                           intcon3	equ	0xFF0
  6466                           postinc0	equ	0xFEE
  6467                           wreg	equ	0xFE8
  6468                           postdec1	equ	0xFE5
  6469                           fsr1l	equ	0xFE1
  6470                           indf2	equ	0xFDF
  6471                           postinc2	equ	0xFDE
  6472                           postdec2	equ	0xFDD
  6473                           fsr2h	equ	0xFDA
  6474                           fsr2l	equ	0xFD9
  6475                           status	equ	0xFD8
  6476                           
  6477 ;; *************** function _loadRTC *****************
  6478 ;; Defined at:
  6479 ;;		line 28 in file "RTC.c"
  6480 ;; Parameters:    Size  Location     Type
  6481 ;;		None
  6482 ;; Auto vars:     Size  Location     Type
  6483 ;;  i               2   22[BANK0 ] int 
  6484 ;; Return value:  Size  Location     Type
  6485 ;;                  1    wreg      void 
  6486 ;; Registers used:
  6487 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6488 ;; Tracked objects:
  6489 ;;		On entry : 0/0
  6490 ;;		On exit  : 0/0
  6491 ;;		Unchanged: 0/0
  6492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6493 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6494 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6495 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6496 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6497 ;;Total ram usage:        3 bytes
  6498 ;; Hardware stack levels used:    1
  6499 ;; Hardware stack levels required when called:    9
  6500 ;; This function calls:
  6501 ;;		_I2C_Master_Init
  6502 ;;		_I2C_Master_Start
  6503 ;;		_I2C_Master_Stop
  6504 ;;		_I2C_Master_Write
  6505 ;; This function is called by:
  6506 ;;		_initUI
  6507 ;; This function uses a non-reentrant model
  6508 ;;
  6509                           
  6510                           	psect	text17
  6511  004418                     __ptext17:
  6512                           	opt stack 0
  6513  004418                     _loadRTC:
  6514                           	opt stack 20
  6515                           
  6516                           ;RTC.c: 30: I2C_Master_Init(10000);
  6517                           
  6518                           ; BSR set to: 1
  6519                           ;incstack = 0
  6520  004418  0E10               	movlw	16
  6521  00441A  0100               	movlb	0	; () banked
  6522  00441C  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  6523  00441E  0E27               	movlw	39
  6524  004420  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  6525  004422  0E00               	movlw	0
  6526  004424  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  6527  004426  0E00               	movlw	0
  6528  004428  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  6529  00442A  ECA7  F024         	call	_I2C_Master_Init	;wreg free
  6530                           
  6531                           ;RTC.c: 32: (INTCONbits.GIE = 0);
  6532  00442E  9EF2               	bcf	intcon,7,c	;volatile
  6533                           
  6534                           ;RTC.c: 34: I2C_Master_Start();
  6535  004430  EC6E  F029         	call	_I2C_Master_Start	;wreg free
  6536                           
  6537                           ;RTC.c: 35: I2C_Master_Write(0b11010000);
  6538  004434  0E00               	movlw	0
  6539  004436  0100               	movlb	0	; () banked
  6540  004438  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6541  00443A  0ED0               	movlw	208
  6542  00443C  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6543  00443E  EC5C  F029         	call	_I2C_Master_Write	;wreg free
  6544                           
  6545                           ;RTC.c: 36: I2C_Master_Write(0x00);
  6546  004442  0E00               	movlw	0
  6547  004444  0100               	movlb	0	; () banked
  6548  004446  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6549  004448  0E00               	movlw	0
  6550  00444A  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6551  00444C  EC5C  F029         	call	_I2C_Master_Write	;wreg free
  6552                           
  6553                           ;RTC.c: 37: for(int i = 0; i<7; i++){
  6554  004450  0E00               	movlw	0
  6555  004452  0100               	movlb	0	; () banked
  6556  004454  6F97               	movwf	(loadRTC@i+1)& (0+255),b
  6557  004456  0E00               	movlw	0
  6558  004458  6F96               	movwf	loadRTC@i& (0+255),b
  6559  00445A                     l6995:
  6560                           
  6561                           ; BSR set to: 0
  6562  00445A  0100               	movlb	0	; () banked
  6563  00445C  BF97               	btfsc	(loadRTC@i+1)& (0+255),7,b
  6564  00445E  D008               	goto	l6999
  6565  004460  0100               	movlb	0	; () banked
  6566  004462  5197               	movf	(loadRTC@i+1)& (0+255),w,b
  6567  004464  E11B               	bnz	l7005
  6568  004466  0E07               	movlw	7
  6569  004468  0100               	movlb	0	; () banked
  6570  00446A  5D96               	subwf	loadRTC@i& (0+255),w,b
  6571  00446C  B0D8               	btfsc	status,0,c
  6572  00446E  D016               	goto	l7005
  6573  004470                     l6999:
  6574                           
  6575                           ; BSR set to: 0
  6576                           ;RTC.c: 38: I2C_Master_Write(time[i]);
  6577  004470  0E1C               	movlw	low _time
  6578  004472  0100               	movlb	0	; () banked
  6579  004474  2596               	addwf	loadRTC@i& (0+255),w,b
  6580  004476  6ED9               	movwf	fsr2l,c
  6581  004478  0E01               	movlw	high _time
  6582  00447A  0100               	movlb	0	; () banked
  6583  00447C  2197               	addwfc	(loadRTC@i+1)& (0+255),w,b
  6584  00447E  6EDA               	movwf	fsr2h,c
  6585  004480  50DF               	movf	indf2,w,c
  6586  004482  0100               	movlb	0	; () banked
  6587  004484  6F95               	movwf	??_loadRTC& (0+255),b
  6588  004486  0100               	movlb	0	; () banked
  6589  004488  5195               	movf	??_loadRTC& (0+255),w,b
  6590  00448A  0100               	movlb	0	; () banked
  6591  00448C  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6592  00448E  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  6593  004490  EC5C  F029         	call	_I2C_Master_Write	;wreg free
  6594  004494  0100               	movlb	0	; () banked
  6595  004496  4B96               	infsnz	loadRTC@i& (0+255),f,b
  6596  004498  2B97               	incf	(loadRTC@i+1)& (0+255),f,b
  6597  00449A  D7DF               	goto	l6995
  6598  00449C                     l7005:
  6599                           
  6600                           ; BSR set to: 0
  6601                           ;RTC.c: 39: }
  6602                           ;RTC.c: 40: I2C_Master_Stop();
  6603  00449C  EC6A  F029         	call	_I2C_Master_Stop	;wreg free
  6604                           
  6605                           ;RTC.c: 41: (INTCONbits.GIE = 1);
  6606  0044A0  8EF2               	bsf	intcon,7,c	;volatile
  6607  0044A2  0012               	return		;funcret
  6608  0044A4                     __end_of_loadRTC:
  6609                           	opt stack 0
  6610                           tblptru	equ	0xFF8
  6611                           tblptrh	equ	0xFF7
  6612                           tblptrl	equ	0xFF6
  6613                           tablat	equ	0xFF5
  6614                           prodh	equ	0xFF4
  6615                           prodl	equ	0xFF3
  6616                           intcon	equ	0xFF2
  6617                           intcon2	equ	0xFF1
  6618                           intcon3	equ	0xFF0
  6619                           postinc0	equ	0xFEE
  6620                           wreg	equ	0xFE8
  6621                           postdec1	equ	0xFE5
  6622                           fsr1l	equ	0xFE1
  6623                           indf2	equ	0xFDF
  6624                           postinc2	equ	0xFDE
  6625                           postdec2	equ	0xFDD
  6626                           fsr2h	equ	0xFDA
  6627                           fsr2l	equ	0xFD9
  6628                           status	equ	0xFD8
  6629                           
  6630 ;; *************** function _I2C_Master_Init *****************
  6631 ;; Defined at:
  6632 ;;		line 15 in file "I2C.c"
  6633 ;; Parameters:    Size  Location     Type
  6634 ;;  c               4   13[BANK0 ] const unsigned long 
  6635 ;; Auto vars:     Size  Location     Type
  6636 ;;		None
  6637 ;; Return value:  Size  Location     Type
  6638 ;;                  1    wreg      void 
  6639 ;; Registers used:
  6640 ;;		wreg, status,2, status,0, cstack
  6641 ;; Tracked objects:
  6642 ;;		On entry : 0/0
  6643 ;;		On exit  : 0/0
  6644 ;;		Unchanged: 0/0
  6645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6646 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6647 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6648 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6649 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6650 ;;Total ram usage:        8 bytes
  6651 ;; Hardware stack levels used:    1
  6652 ;; Hardware stack levels required when called:    8
  6653 ;; This function calls:
  6654 ;;		___lldiv
  6655 ;; This function is called by:
  6656 ;;		_main
  6657 ;;		_loadRTC
  6658 ;; This function uses a non-reentrant model
  6659 ;;
  6660                           
  6661                           	psect	text18
  6662  00494E                     __ptext18:
  6663                           	opt stack 0
  6664  00494E                     _I2C_Master_Init:
  6665                           	opt stack 20
  6666                           
  6667                           ;I2C.c: 18: SSPSTAT = 0b00000000;
  6668                           
  6669                           ;incstack = 0
  6670  00494E  0E00               	movlw	0
  6671  004950  6EC7               	movwf	4039,c	;volatile
  6672                           
  6673                           ;I2C.c: 19: SSPCON1 = 0b00101000;
  6674  004952  0E28               	movlw	40
  6675  004954  6EC6               	movwf	4038,c	;volatile
  6676                           
  6677                           ;I2C.c: 20: SSPCON2 = 0b00000000;
  6678  004956  0E00               	movlw	0
  6679  004958  6EC5               	movwf	4037,c	;volatile
  6680                           
  6681                           ;I2C.c: 21: SSPADD = (32000000/(4*c))-1;
  6682  00495A  0E00               	movlw	0
  6683  00495C  0100               	movlb	0	; () banked
  6684  00495E  6F80               	movwf	___lldiv@dividend& (0+255),b
  6685  004960  0E48               	movlw	72
  6686  004962  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  6687  004964  0EE8               	movlw	232
  6688  004966  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  6689  004968  0E01               	movlw	1
  6690  00496A  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  6691  00496C  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  6692  004970  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  6693  004974  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  6694  004978  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  6695  00497C  0E02               	movlw	2
  6696  00497E                     u5185:
  6697  00497E  90D8               	bcf	status,0,c
  6698  004980  0100               	movlb	0	; () banked
  6699  004982  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  6700  004984  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  6701  004986  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  6702  004988  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  6703  00498A  2EE8               	decfsz	wreg,f,c
  6704  00498C  D7F8               	goto	u5185
  6705  00498E  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  6706  004992  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  6707  004996  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  6708  00499A  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  6709  00499E  ECB2  F020         	call	___lldiv	;wreg free
  6710  0049A2  0100               	movlb	0	; () banked
  6711  0049A4  0580               	decf	?___lldiv& (0+255),w,b
  6712  0049A6  6EC8               	movwf	4040,c	;volatile
  6713                           
  6714                           ; BSR set to: 0
  6715                           ;I2C.c: 22: TRISC3 = 1;
  6716  0049A8  8694               	bsf	3988,3,c	;volatile
  6717                           
  6718                           ; BSR set to: 0
  6719                           ;I2C.c: 23: TRISC4 = 1;
  6720  0049AA  8894               	bsf	3988,4,c	;volatile
  6721                           
  6722                           ; BSR set to: 0
  6723  0049AC  0012               	return		;funcret
  6724  0049AE                     __end_of_I2C_Master_Init:
  6725                           	opt stack 0
  6726                           tblptru	equ	0xFF8
  6727                           tblptrh	equ	0xFF7
  6728                           tblptrl	equ	0xFF6
  6729                           tablat	equ	0xFF5
  6730                           prodh	equ	0xFF4
  6731                           prodl	equ	0xFF3
  6732                           intcon	equ	0xFF2
  6733                           intcon2	equ	0xFF1
  6734                           intcon3	equ	0xFF0
  6735                           postinc0	equ	0xFEE
  6736                           wreg	equ	0xFE8
  6737                           postdec1	equ	0xFE5
  6738                           fsr1l	equ	0xFE1
  6739                           indf2	equ	0xFDF
  6740                           postinc2	equ	0xFDE
  6741                           postdec2	equ	0xFDD
  6742                           fsr2h	equ	0xFDA
  6743                           fsr2l	equ	0xFD9
  6744                           status	equ	0xFD8
  6745                           
  6746 ;; *************** function ___lldiv *****************
  6747 ;; Defined at:
  6748 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  6749 ;; Parameters:    Size  Location     Type
  6750 ;;  dividend        4    0[BANK0 ] unsigned long 
  6751 ;;  divisor         4    4[BANK0 ] unsigned long 
  6752 ;; Auto vars:     Size  Location     Type
  6753 ;;  quotient        4    8[BANK0 ] unsigned long 
  6754 ;;  counter         1   12[BANK0 ] unsigned char 
  6755 ;; Return value:  Size  Location     Type
  6756 ;;                  4    0[BANK0 ] unsigned long 
  6757 ;; Registers used:
  6758 ;;		wreg, status,2, status,0
  6759 ;; Tracked objects:
  6760 ;;		On entry : 0/0
  6761 ;;		On exit  : 0/0
  6762 ;;		Unchanged: 0/0
  6763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6764 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6765 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6766 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6767 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6768 ;;Total ram usage:       13 bytes
  6769 ;; Hardware stack levels used:    1
  6770 ;; Hardware stack levels required when called:    7
  6771 ;; This function calls:
  6772 ;;		Nothing
  6773 ;; This function is called by:
  6774 ;;		_I2C_Master_Init
  6775 ;; This function uses a non-reentrant model
  6776 ;;
  6777                           
  6778                           	psect	text19
  6779  004164                     __ptext19:
  6780                           	opt stack 0
  6781  004164                     ___lldiv:
  6782                           	opt stack 20
  6783                           
  6784                           ; BSR set to: 0
  6785                           ;incstack = 0
  6786  004164  0E00               	movlw	0
  6787  004166  0100               	movlb	0	; () banked
  6788  004168  6F88               	movwf	___lldiv@quotient& (0+255),b
  6789  00416A  0E00               	movlw	0
  6790  00416C  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  6791  00416E  0E00               	movlw	0
  6792  004170  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  6793  004172  0E00               	movlw	0
  6794  004174  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  6795                           
  6796                           ; BSR set to: 0
  6797  004176  0100               	movlb	0	; () banked
  6798  004178  5184               	movf	___lldiv@divisor& (0+255),w,b
  6799  00417A  0100               	movlb	0	; () banked
  6800  00417C  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  6801  00417E  0100               	movlb	0	; () banked
  6802  004180  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  6803  004182  0100               	movlb	0	; () banked
  6804  004184  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  6805  004186  B4D8               	btfsc	status,2,c
  6806  004188  D042               	goto	l1797
  6807                           
  6808                           ; BSR set to: 0
  6809  00418A  0E01               	movlw	1
  6810  00418C  0100               	movlb	0	; () banked
  6811  00418E  6F8C               	movwf	___lldiv@counter& (0+255),b
  6812  004190  D008               	goto	l6415
  6813  004192                     l6413:
  6814                           
  6815                           ; BSR set to: 0
  6816  004192  0100               	movlb	0	; () banked
  6817  004194  90D8               	bcf	status,0,c
  6818  004196  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  6819  004198  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  6820  00419A  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  6821  00419C  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  6822  00419E  0100               	movlb	0	; () banked
  6823  0041A0  2B8C               	incf	___lldiv@counter& (0+255),f,b
  6824  0041A2                     l6415:
  6825                           
  6826                           ; BSR set to: 0
  6827  0041A2  0100               	movlb	0	; () banked
  6828  0041A4  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  6829  0041A6  D7F5               	goto	l6413
  6830  0041A8                     l6417:
  6831                           
  6832                           ; BSR set to: 0
  6833  0041A8  0100               	movlb	0	; () banked
  6834  0041AA  90D8               	bcf	status,0,c
  6835  0041AC  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  6836  0041AE  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  6837  0041B0  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  6838  0041B2  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  6839                           
  6840                           ; BSR set to: 0
  6841  0041B4  0100               	movlb	0	; () banked
  6842  0041B6  5184               	movf	___lldiv@divisor& (0+255),w,b
  6843  0041B8  0100               	movlb	0	; () banked
  6844  0041BA  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  6845  0041BC  0100               	movlb	0	; () banked
  6846  0041BE  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  6847  0041C0  0100               	movlb	0	; () banked
  6848  0041C2  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  6849  0041C4  0100               	movlb	0	; () banked
  6850  0041C6  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  6851  0041C8  0100               	movlb	0	; () banked
  6852  0041CA  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  6853  0041CC  0100               	movlb	0	; () banked
  6854  0041CE  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  6855  0041D0  0100               	movlb	0	; () banked
  6856  0041D2  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  6857  0041D4  A0D8               	btfss	status,0,c
  6858  0041D6  D012               	goto	l6425
  6859                           
  6860                           ; BSR set to: 0
  6861  0041D8  0100               	movlb	0	; () banked
  6862  0041DA  5184               	movf	___lldiv@divisor& (0+255),w,b
  6863  0041DC  0100               	movlb	0	; () banked
  6864  0041DE  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  6865  0041E0  0100               	movlb	0	; () banked
  6866  0041E2  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  6867  0041E4  0100               	movlb	0	; () banked
  6868  0041E6  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  6869  0041E8  0100               	movlb	0	; () banked
  6870  0041EA  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  6871  0041EC  0100               	movlb	0	; () banked
  6872  0041EE  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  6873  0041F0  0100               	movlb	0	; () banked
  6874  0041F2  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  6875  0041F4  0100               	movlb	0	; () banked
  6876  0041F6  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  6877                           
  6878                           ; BSR set to: 0
  6879  0041F8  0100               	movlb	0	; () banked
  6880  0041FA  8188               	bsf	___lldiv@quotient& (0+255),0,b
  6881  0041FC                     l6425:
  6882                           
  6883                           ; BSR set to: 0
  6884  0041FC  0100               	movlb	0	; () banked
  6885  0041FE  90D8               	bcf	status,0,c
  6886  004200  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  6887  004202  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  6888  004204  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  6889  004206  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  6890                           
  6891                           ; BSR set to: 0
  6892  004208  0100               	movlb	0	; () banked
  6893  00420A  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  6894  00420C  D7CD               	goto	l6417
  6895  00420E                     l1797:
  6896                           
  6897                           ; BSR set to: 0
  6898  00420E  C088  F080         	movff	___lldiv@quotient,?___lldiv
  6899  004212  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  6900  004216  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  6901  00421A  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  6902                           
  6903                           ; BSR set to: 0
  6904  00421E  0012               	return		;funcret
  6905  004220                     __end_of___lldiv:
  6906                           	opt stack 0
  6907                           tblptru	equ	0xFF8
  6908                           tblptrh	equ	0xFF7
  6909                           tblptrl	equ	0xFF6
  6910                           tablat	equ	0xFF5
  6911                           prodh	equ	0xFF4
  6912                           prodl	equ	0xFF3
  6913                           intcon	equ	0xFF2
  6914                           intcon2	equ	0xFF1
  6915                           intcon3	equ	0xFF0
  6916                           postinc0	equ	0xFEE
  6917                           wreg	equ	0xFE8
  6918                           postdec1	equ	0xFE5
  6919                           fsr1l	equ	0xFE1
  6920                           indf2	equ	0xFDF
  6921                           postinc2	equ	0xFDE
  6922                           postdec2	equ	0xFDD
  6923                           fsr2h	equ	0xFDA
  6924                           fsr2l	equ	0xFD9
  6925                           status	equ	0xFD8
  6926                           
  6927 ;; *************** function _change_state_to_menu_start *****************
  6928 ;; Defined at:
  6929 ;;		line 474 in file "UI.c"
  6930 ;; Parameters:    Size  Location     Type
  6931 ;;		None
  6932 ;; Auto vars:     Size  Location     Type
  6933 ;;		None
  6934 ;; Return value:  Size  Location     Type
  6935 ;;                  1    wreg      void 
  6936 ;; Registers used:
  6937 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6938 ;; Tracked objects:
  6939 ;;		On entry : 0/0
  6940 ;;		On exit  : 0/0
  6941 ;;		Unchanged: 0/0
  6942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6943 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6944 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6945 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6946 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6947 ;;Total ram usage:        0 bytes
  6948 ;; Hardware stack levels used:    1
  6949 ;; Hardware stack levels required when called:   11
  6950 ;; This function calls:
  6951 ;;		_lcdInst
  6952 ;;		_printRTC
  6953 ;;		_printf
  6954 ;; This function is called by:
  6955 ;;		_initUI
  6956 ;; This function uses a non-reentrant model
  6957 ;;
  6958                           
  6959                           	psect	text20
  6960  005052                     __ptext20:
  6961                           	opt stack 0
  6962  005052                     _change_state_to_menu_start:
  6963                           	opt stack 18
  6964                           
  6965                           ;UI.c: 475: cur_state = 0;
  6966                           
  6967                           ; BSR set to: 0
  6968                           ;incstack = 0
  6969  005052  0E00               	movlw	0
  6970  005054  0100               	movlb	0	; () banked
  6971  005056  6FED               	movwf	(_cur_state+1)& (0+255),b
  6972  005058  0E00               	movlw	0
  6973  00505A  6FEC               	movwf	_cur_state& (0+255),b
  6974                           
  6975                           ; BSR set to: 0
  6976                           ;UI.c: 477: lcdInst(0b10000000);;
  6977  00505C  0E80               	movlw	128
  6978  00505E  EC48  F029         	call	_lcdInst
  6979                           
  6980                           ;UI.c: 478: printRTC();
  6981  005062  EC16  F012         	call	_printRTC	;wreg free
  6982                           
  6983                           ;UI.c: 479: lcdInst(0b11000000);;
  6984  005066  0EC0               	movlw	192
  6985  005068  EC48  F029         	call	_lcdInst
  6986                           
  6987                           ;UI.c: 480: printf("PUSH TO CONTINUE");
  6988  00506C  0EF7               	movlw	low STR_30
  6989  00506E  0100               	movlb	0	; () banked
  6990  005070  6F8E               	movwf	printf@f& (0+255),b
  6991  005072  0EFD               	movlw	high STR_30
  6992  005074  0100               	movlb	0	; () banked
  6993  005076  6F8F               	movwf	(printf@f+1)& (0+255),b
  6994  005078  EC02  F00B         	call	_printf	;wreg free
  6995  00507C  0012               	return		;funcret
  6996  00507E                     __end_of_change_state_to_menu_start:
  6997                           	opt stack 0
  6998                           tblptru	equ	0xFF8
  6999                           tblptrh	equ	0xFF7
  7000                           tblptrl	equ	0xFF6
  7001                           tablat	equ	0xFF5
  7002                           prodh	equ	0xFF4
  7003                           prodl	equ	0xFF3
  7004                           intcon	equ	0xFF2
  7005                           intcon2	equ	0xFF1
  7006                           intcon3	equ	0xFF0
  7007                           postinc0	equ	0xFEE
  7008                           wreg	equ	0xFE8
  7009                           postdec1	equ	0xFE5
  7010                           fsr1l	equ	0xFE1
  7011                           indf2	equ	0xFDF
  7012                           postinc2	equ	0xFDE
  7013                           postdec2	equ	0xFDD
  7014                           fsr2h	equ	0xFDA
  7015                           fsr2l	equ	0xFD9
  7016                           status	equ	0xFD8
  7017                           
  7018 ;; *************** function _initTime *****************
  7019 ;; Defined at:
  7020 ;;		line 17 in file "RTC.c"
  7021 ;; Parameters:    Size  Location     Type
  7022 ;;  s               1    wreg     unsigned char 
  7023 ;;  m               1    0[BANK0 ] unsigned char 
  7024 ;;  h               1    1[BANK0 ] unsigned char 
  7025 ;;  w               1    2[BANK0 ] unsigned char 
  7026 ;;  DD              1    3[BANK0 ] unsigned char 
  7027 ;;  MM              1    4[BANK0 ] unsigned char 
  7028 ;;  YY              1    5[BANK0 ] unsigned char 
  7029 ;; Auto vars:     Size  Location     Type
  7030 ;;  s               1    6[BANK0 ] unsigned char 
  7031 ;; Return value:  Size  Location     Type
  7032 ;;                  1    wreg      void 
  7033 ;; Registers used:
  7034 ;;		wreg
  7035 ;; Tracked objects:
  7036 ;;		On entry : 0/0
  7037 ;;		On exit  : 0/0
  7038 ;;		Unchanged: 0/0
  7039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7040 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7041 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7042 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7043 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7044 ;;Total ram usage:        7 bytes
  7045 ;; Hardware stack levels used:    1
  7046 ;; Hardware stack levels required when called:    7
  7047 ;; This function calls:
  7048 ;;		Nothing
  7049 ;; This function is called by:
  7050 ;;		_main
  7051 ;; This function uses a non-reentrant model
  7052 ;;
  7053                           
  7054                           	psect	text21
  7055  0051B6                     __ptext21:
  7056                           	opt stack 0
  7057  0051B6                     _initTime:
  7058                           	opt stack 23
  7059                           
  7060                           ;incstack = 0
  7061                           ;initTime@s stored from wreg
  7062  0051B6  0100               	movlb	0	; () banked
  7063  0051B8  6F86               	movwf	initTime@s& (0+255),b
  7064                           
  7065                           ;RTC.c: 19: time[0] = s;
  7066  0051BA  C086  F11C         	movff	initTime@s,_time
  7067                           
  7068                           ;RTC.c: 20: time[1] = m;
  7069  0051BE  C080  F11D         	movff	initTime@m,_time+1
  7070                           
  7071                           ;RTC.c: 21: time[2] = h;
  7072  0051C2  C081  F11E         	movff	initTime@h,_time+2
  7073                           
  7074                           ;RTC.c: 22: time[3] = w;
  7075  0051C6  C082  F11F         	movff	initTime@w,_time+3
  7076                           
  7077                           ;RTC.c: 23: time[4] = DD;
  7078  0051CA  C083  F120         	movff	initTime@DD,_time+4
  7079                           
  7080                           ;RTC.c: 24: time[5] = MM;
  7081  0051CE  C084  F121         	movff	initTime@MM,_time+5
  7082                           
  7083                           ;RTC.c: 25: time[6] = YY;
  7084  0051D2  C085  F122         	movff	initTime@YY,_time+6
  7085  0051D6  0012               	return		;funcret
  7086  0051D8                     __end_of_initTime:
  7087                           	opt stack 0
  7088                           tblptru	equ	0xFF8
  7089                           tblptrh	equ	0xFF7
  7090                           tblptrl	equ	0xFF6
  7091                           tablat	equ	0xFF5
  7092                           prodh	equ	0xFF4
  7093                           prodl	equ	0xFF3
  7094                           intcon	equ	0xFF2
  7095                           intcon2	equ	0xFF1
  7096                           intcon3	equ	0xFF0
  7097                           postinc0	equ	0xFEE
  7098                           wreg	equ	0xFE8
  7099                           postdec1	equ	0xFE5
  7100                           fsr1l	equ	0xFE1
  7101                           indf2	equ	0xFDF
  7102                           postinc2	equ	0xFDE
  7103                           postdec2	equ	0xFDD
  7104                           fsr2h	equ	0xFDA
  7105                           fsr2l	equ	0xFD9
  7106                           status	equ	0xFD8
  7107                           
  7108 ;; *************** function _initLCD *****************
  7109 ;; Defined at:
  7110 ;;		line 48 in file "lcd.c"
  7111 ;; Parameters:    Size  Location     Type
  7112 ;;		None
  7113 ;; Auto vars:     Size  Location     Type
  7114 ;;		None
  7115 ;; Return value:  Size  Location     Type
  7116 ;;                  1    wreg      void 
  7117 ;; Registers used:
  7118 ;;		wreg, status,2, status,0, cstack
  7119 ;; Tracked objects:
  7120 ;;		On entry : 0/0
  7121 ;;		On exit  : 0/0
  7122 ;;		Unchanged: 0/0
  7123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7124 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7125 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7126 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7127 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7128 ;;Total ram usage:        1 bytes
  7129 ;; Hardware stack levels used:    1
  7130 ;; Hardware stack levels required when called:    9
  7131 ;; This function calls:
  7132 ;;		_lcdInst
  7133 ;; This function is called by:
  7134 ;;		_main
  7135 ;; This function uses a non-reentrant model
  7136 ;;
  7137                           
  7138                           	psect	text22
  7139  004C4E                     __ptext22:
  7140                           	opt stack 0
  7141  004C4E                     _initLCD:
  7142                           	opt stack 21
  7143                           
  7144                           ;lcd.c: 49: _delay((unsigned long)((15)*(32000000/4000.0)));
  7145                           
  7146                           ;incstack = 0
  7147  004C4E  0E9C               	movlw	156
  7148  004C50  0100               	movlb	0	; () banked
  7149  004C52  6F83               	movwf	??_initLCD& (0+255),b
  7150  004C54  0ED7               	movlw	215
  7151  004C56                     u8887:
  7152  004C56  2EE8               	decfsz	wreg,f,c
  7153  004C58  D7FE               	bra	u8887
  7154  004C5A  2F83               	decfsz	??_initLCD& (0+255),f,b
  7155  004C5C  D7FC               	bra	u8887
  7156                           
  7157                           ;lcd.c: 50: lcdInst(0b00110011);
  7158  004C5E  0E33               	movlw	51
  7159  004C60  EC48  F029         	call	_lcdInst
  7160                           
  7161                           ;lcd.c: 51: lcdInst(0b00110010);
  7162  004C64  0E32               	movlw	50
  7163  004C66  EC48  F029         	call	_lcdInst
  7164                           
  7165                           ;lcd.c: 53: lcdInst(0b00101000);
  7166  004C6A  0E28               	movlw	40
  7167  004C6C  EC48  F029         	call	_lcdInst
  7168                           
  7169                           ;lcd.c: 54: lcdInst(0b00001100);
  7170  004C70  0E0C               	movlw	12
  7171  004C72  EC48  F029         	call	_lcdInst
  7172                           
  7173                           ;lcd.c: 55: lcdInst(0b00000110);
  7174  004C76  0E06               	movlw	6
  7175  004C78  EC48  F029         	call	_lcdInst
  7176                           
  7177                           ;lcd.c: 56: lcdInst(0b00000001);
  7178  004C7C  0E01               	movlw	1
  7179  004C7E  EC48  F029         	call	_lcdInst
  7180                           
  7181                           ;lcd.c: 57: _delay((unsigned long)((15)*(32000000/4000.0)));
  7182  004C82  0E9C               	movlw	156
  7183  004C84  0100               	movlb	0	; () banked
  7184  004C86  6F83               	movwf	??_initLCD& (0+255),b
  7185  004C88  0ED7               	movlw	215
  7186  004C8A                     u8897:
  7187  004C8A  2EE8               	decfsz	wreg,f,c
  7188  004C8C  D7FE               	bra	u8897
  7189  004C8E  2F83               	decfsz	??_initLCD& (0+255),f,b
  7190  004C90  D7FC               	bra	u8897
  7191  004C92  0012               	return		;funcret
  7192  004C94                     __end_of_initLCD:
  7193                           	opt stack 0
  7194                           tblptru	equ	0xFF8
  7195                           tblptrh	equ	0xFF7
  7196                           tblptrl	equ	0xFF6
  7197                           tablat	equ	0xFF5
  7198                           prodh	equ	0xFF4
  7199                           prodl	equ	0xFF3
  7200                           intcon	equ	0xFF2
  7201                           intcon2	equ	0xFF1
  7202                           intcon3	equ	0xFF0
  7203                           postinc0	equ	0xFEE
  7204                           wreg	equ	0xFE8
  7205                           postdec1	equ	0xFE5
  7206                           fsr1l	equ	0xFE1
  7207                           indf2	equ	0xFDF
  7208                           postinc2	equ	0xFDE
  7209                           postdec2	equ	0xFDD
  7210                           fsr2h	equ	0xFDA
  7211                           fsr2l	equ	0xFD9
  7212                           status	equ	0xFD8
  7213                           
  7214 ;; *************** function _UI *****************
  7215 ;; Defined at:
  7216 ;;		line 76 in file "UI.c"
  7217 ;; Parameters:    Size  Location     Type
  7218 ;;		None
  7219 ;; Auto vars:     Size  Location     Type
  7220 ;;  i               1   73[BANK0 ] unsigned char 
  7221 ;;  i               1   85[BANK0 ] unsigned char 
  7222 ;;  i               1   84[BANK0 ] unsigned char 
  7223 ;;  i               1   83[BANK0 ] unsigned char 
  7224 ;;  i               1   82[BANK0 ] unsigned char 
  7225 ;;  i               1   81[BANK0 ] unsigned char 
  7226 ;;  i               1   80[BANK0 ] unsigned char 
  7227 ;;  i               1   79[BANK0 ] unsigned char 
  7228 ;;  i               1   78[BANK0 ] unsigned char 
  7229 ;;  i               1   77[BANK0 ] unsigned char 
  7230 ;;  i               1   76[BANK0 ] unsigned char 
  7231 ;;  i               1   75[BANK0 ] unsigned char 
  7232 ;;  i               1   74[BANK0 ] unsigned char 
  7233 ;;  month           4   86[BANK0 ] unsigned char [4]
  7234 ;;  i               1   72[BANK0 ] unsigned char 
  7235 ;; Return value:  Size  Location     Type
  7236 ;;                  1    wreg      void 
  7237 ;; Registers used:
  7238 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7239 ;; Tracked objects:
  7240 ;;		On entry : 0/0
  7241 ;;		On exit  : 0/0
  7242 ;;		Unchanged: 0/0
  7243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7244 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7245 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7246 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7247 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7248 ;;Total ram usage:       22 bytes
  7249 ;; Hardware stack levels used:    1
  7250 ;; Hardware stack levels required when called:   11
  7251 ;; This function calls:
  7252 ;;		___awdiv
  7253 ;;		___awmod
  7254 ;;		_change_state_to_menu_12
  7255 ;;		_change_state_to_menu_22
  7256 ;;		_lcdInst
  7257 ;;		_printRTC
  7258 ;;		_printf
  7259 ;;		_strcpy
  7260 ;; This function is called by:
  7261 ;;		_main
  7262 ;; This function uses a non-reentrant model
  7263 ;;
  7264                           
  7265                           	psect	text23
  7266  0008CA                     __ptext23:
  7267                           	opt stack 0
  7268  0008CA                     _UI:
  7269                           	opt stack 19
  7270                           
  7271                           ;UI.c: 77: if(machine_state == DoneSorting_state){
  7272                           
  7273                           ;incstack = 0
  7274  0008CA  0E02               	movlw	2
  7275  0008CC  0100               	movlb	0	; () banked
  7276  0008CE  19FC               	xorwf	_machine_state& (0+255),w,b
  7277  0008D0  A4D8               	btfss	status,2,c
  7278  0008D2  D075               	goto	l8507
  7279                           
  7280                           ; BSR set to: 0
  7281                           ;UI.c: 78: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7282  0008D4  0E01               	movlw	1
  7283  0008D6  EC48  F029         	call	_lcdInst
  7284  0008DA  0E68               	movlw	104
  7285  0008DC  0100               	movlb	0	; () banked
  7286  0008DE  6FC4               	movwf	??_UI& (0+255),b
  7287  0008E0  0EE4               	movlw	228
  7288  0008E2                     u8907:
  7289  0008E2  2EE8               	decfsz	wreg,f,c
  7290  0008E4  D7FE               	bra	u8907
  7291  0008E6  2FC4               	decfsz	??_UI& (0+255),f,b
  7292  0008E8  D7FC               	bra	u8907
  7293  0008EA  F000               	nop	
  7294                           
  7295                           ;UI.c: 79: lcdInst(0b10000000);;
  7296  0008EC  0E80               	movlw	128
  7297  0008EE  EC48  F029         	call	_lcdInst
  7298                           
  7299                           ;UI.c: 80: printf("RESULTS IN LOG %d", sel+1);
  7300  0008F2  0EA3               	movlw	low STR_1
  7301  0008F4  0100               	movlb	0	; () banked
  7302  0008F6  6F8E               	movwf	printf@f& (0+255),b
  7303  0008F8  0EFB               	movlw	high STR_1
  7304  0008FA  0100               	movlb	0	; () banked
  7305  0008FC  6F8F               	movwf	(printf@f+1)& (0+255),b
  7306  0008FE  0E01               	movlw	1
  7307  000900  0100               	movlb	0	; () banked
  7308  000902  25FD               	addwf	_sel& (0+255),w,b
  7309  000904  0100               	movlb	0	; () banked
  7310  000906  6F90               	movwf	(?_printf+2)& (0+255),b
  7311  000908  0100               	movlb	0	; () banked
  7312  00090A  6B91               	clrf	(?_printf+3)& (0+255),b
  7313  00090C  0E00               	movlw	0
  7314  00090E  2391               	addwfc	(?_printf+3)& (0+255),f,b
  7315  000910  EC02  F00B         	call	_printf	;wreg free
  7316                           
  7317                           ;UI.c: 81: lcdInst(0b11000000);;
  7318  000914  0EC0               	movlw	192
  7319  000916  EC48  F029         	call	_lcdInst
  7320                           
  7321                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  7322  00091A  0E0E               	movlw	14
  7323  00091C  0100               	movlb	0	; () banked
  7324  00091E  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7325  000920  0E10               	movlw	16
  7326  000922  6F82               	movwf	___awmod@divisor& (0+255),b
  7327  000924  C0F8  F080         	movff	_total_time,___awmod@dividend
  7328  000928  C0F9  F081         	movff	_total_time+1,___awmod@dividend+1
  7329  00092C  ECBB  F021         	call	___awmod	;wreg free
  7330  000930  C080  F0C6         	movff	?___awmod,_UI$2415
  7331  000934  C081  F0C7         	movff	?___awmod+1,_UI$2415+1
  7332                           
  7333                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  7334  000938  0E27               	movlw	low STR_2
  7335  00093A  0100               	movlb	0	; () banked
  7336  00093C  6F8E               	movwf	printf@f& (0+255),b
  7337  00093E  0EFF               	movlw	high STR_2
  7338  000940  0100               	movlb	0	; () banked
  7339  000942  6F8F               	movwf	(printf@f+1)& (0+255),b
  7340  000944  0E0E               	movlw	14
  7341  000946  0100               	movlb	0	; () banked
  7342  000948  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7343  00094A  0E10               	movlw	16
  7344  00094C  6F82               	movwf	___awmod@divisor& (0+255),b
  7345  00094E  C0F8  F080         	movff	_total_time,___awmod@dividend
  7346  000952  C0F9  F081         	movff	_total_time+1,___awmod@dividend+1
  7347  000956  ECBB  F021         	call	___awmod	;wreg free
  7348  00095A  C080  F086         	movff	?___awmod,___awdiv@dividend
  7349  00095E  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  7350  000962  0E00               	movlw	0
  7351  000964  0100               	movlb	0	; () banked
  7352  000966  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  7353  000968  0E3C               	movlw	60
  7354  00096A  6F88               	movwf	___awdiv@divisor& (0+255),b
  7355  00096C  EC53  F020         	call	___awdiv	;wreg free
  7356  000970  C086  F090         	movff	?___awdiv,?_printf+2
  7357  000974  C087  F091         	movff	?___awdiv+1,?_printf+3
  7358  000978  C0C6  F080         	movff	_UI$2415,___awmod@dividend
  7359  00097C  C0C7  F081         	movff	_UI$2415+1,___awmod@dividend+1
  7360  000980  0E00               	movlw	0
  7361  000982  0100               	movlb	0	; () banked
  7362  000984  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7363  000986  0E3C               	movlw	60
  7364  000988  6F82               	movwf	___awmod@divisor& (0+255),b
  7365  00098A  ECBB  F021         	call	___awmod	;wreg free
  7366  00098E  C080  F092         	movff	?___awmod,?_printf+4
  7367  000992  C081  F093         	movff	?___awmod+1,?_printf+5
  7368  000996  EC02  F00B         	call	_printf	;wreg free
  7369                           
  7370                           ;UI.c: 83: machine_state = UI_state;
  7371  00099A  0E00               	movlw	0
  7372  00099C  0100               	movlb	0	; () banked
  7373  00099E  6FFC               	movwf	_machine_state& (0+255),b
  7374  0009A0                     l180:
  7375  0009A0  A281               	btfss	3969,1,c	;volatile
  7376  0009A2  D7FE               	goto	l180
  7377                           
  7378                           ;UI.c: 86: }
  7379                           ;UI.c: 87: if(cur_state==12){
  7380  0009A4  0E0C               	movlw	12
  7381  0009A6  0100               	movlb	0	; () banked
  7382  0009A8  19EC               	xorwf	_cur_state& (0+255),w,b
  7383  0009AA  0100               	movlb	0	; () banked
  7384  0009AC  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
  7385  0009AE  A4D8               	btfss	status,2,c
  7386  0009B0  D003               	goto	l8505
  7387                           
  7388                           ; BSR set to: 0
  7389                           ;UI.c: 88: change_state_to_menu_12();
  7390  0009B2  EC87  F026         	call	_change_state_to_menu_12	;wreg free
  7391                           
  7392                           ;UI.c: 89: }
  7393  0009B6  D3D3               	goto	l8827
  7394  0009B8                     l8505:
  7395                           
  7396                           ;UI.c: 90: else{
  7397                           ;UI.c: 91: change_state_to_menu_22();
  7398  0009B8  EC6B  F026         	call	_change_state_to_menu_22	;wreg free
  7399                           
  7400                           ;UI.c: 92: }
  7401                           ;UI.c: 93: }
  7402  0009BC  D3D0               	goto	l8827
  7403  0009BE                     l8507:
  7404                           
  7405                           ;UI.c: 94: else if(cur_state == 0){
  7406  0009BE  0100               	movlb	0	; () banked
  7407  0009C0  51EC               	movf	_cur_state& (0+255),w,b
  7408  0009C2  0100               	movlb	0	; () banked
  7409  0009C4  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
  7410  0009C6  A4D8               	btfss	status,2,c
  7411  0009C8  D3CA               	goto	l8827
  7412                           
  7413                           ; BSR set to: 0
  7414                           ;UI.c: 95: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
  7415  0009CA  0E00               	movlw	0
  7416  0009CC  0100               	movlb	0	; () banked
  7417  0009CE  6FC8               	movwf	UI@i& (0+255),b
  7418  0009D0                     l8511:
  7419                           
  7420                           ; BSR set to: 0
  7421  0009D0  0E63               	movlw	99
  7422  0009D2  0100               	movlb	0	; () banked
  7423  0009D4  65C8               	cpfsgt	UI@i& (0+255),b
  7424  0009D6  D001               	goto	l8515
  7425  0009D8  D00C               	goto	l8519
  7426  0009DA                     l8515:
  7427                           
  7428                           ; BSR set to: 0
  7429  0009DA  0E68               	movlw	104
  7430  0009DC  0100               	movlb	0	; () banked
  7431  0009DE  6FC4               	movwf	??_UI& (0+255),b
  7432  0009E0  0EE4               	movlw	228
  7433  0009E2                     u8917:
  7434  0009E2  2EE8               	decfsz	wreg,f,c
  7435  0009E4  D7FE               	bra	u8917
  7436  0009E6  2FC4               	decfsz	??_UI& (0+255),f,b
  7437  0009E8  D7FC               	bra	u8917
  7438  0009EA  F000               	nop	
  7439  0009EC  0100               	movlb	0	; () banked
  7440  0009EE  2BC8               	incf	UI@i& (0+255),f,b
  7441  0009F0  D7EF               	goto	l8511
  7442  0009F2                     l8519:
  7443                           
  7444                           ; BSR set to: 0
  7445                           ;UI.c: 96: if(cur_state == 0){
  7446  0009F2  0100               	movlb	0	; () banked
  7447  0009F4  51EC               	movf	_cur_state& (0+255),w,b
  7448  0009F6  0100               	movlb	0	; () banked
  7449  0009F8  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
  7450  0009FA  A4D8               	btfss	status,2,c
  7451  0009FC  D3B0               	goto	l8827
  7452                           
  7453                           ; BSR set to: 0
  7454                           ;UI.c: 97: printRTC();
  7455  0009FE  EC16  F012         	call	_printRTC	;wreg free
  7456                           
  7457                           ;UI.c: 98: }
  7458                           ;UI.c: 99: }
  7459                           ;UI.c: 100: while(logstate){
  7460  000A02  D3AD               	goto	l8827
  7461  000A04                     l8523:
  7462                           
  7463                           ;UI.c: 102: if(!log_completion){
  7464  000A04  5063               	movf	_log_completion,w,c
  7465  000A06  1064               	iorwf	_log_completion+1,w,c
  7466  000A08  A4D8               	btfss	status,2,c
  7467  000A0A  D041               	goto	l8553
  7468                           
  7469                           ;UI.c: 103: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7470  000A0C  0E01               	movlw	1
  7471  000A0E  EC48  F029         	call	_lcdInst
  7472  000A12  0E68               	movlw	104
  7473  000A14  0100               	movlb	0	; () banked
  7474  000A16  6FC4               	movwf	??_UI& (0+255),b
  7475  000A18  0EE4               	movlw	228
  7476  000A1A                     u8927:
  7477  000A1A  2EE8               	decfsz	wreg,f,c
  7478  000A1C  D7FE               	bra	u8927
  7479  000A1E  2FC4               	decfsz	??_UI& (0+255),f,b
  7480  000A20  D7FC               	bra	u8927
  7481  000A22  F000               	nop	
  7482                           
  7483                           ;UI.c: 104: lcdInst(0b10000000);;
  7484  000A24  0E80               	movlw	128
  7485  000A26  EC48  F029         	call	_lcdInst
  7486                           
  7487                           ;UI.c: 105: printf("-- LOG %2d HERE--", log);
  7488  000A2A  0E91               	movlw	low STR_3
  7489  000A2C  0100               	movlb	0	; () banked
  7490  000A2E  6F8E               	movwf	printf@f& (0+255),b
  7491  000A30  0EFB               	movlw	high STR_3
  7492  000A32  0100               	movlb	0	; () banked
  7493  000A34  6F8F               	movwf	(printf@f+1)& (0+255),b
  7494  000A36  C0F2  F090         	movff	_log,?_printf+2
  7495  000A3A  C0F3  F091         	movff	_log+1,?_printf+3
  7496  000A3E  EC02  F00B         	call	_printf	;wreg free
  7497                           
  7498                           ;UI.c: 106: lcdInst(0b11000000);;
  7499  000A42  0EC0               	movlw	192
  7500  000A44  EC48  F029         	call	_lcdInst
  7501                           
  7502                           ;UI.c: 107: printf("DIDN'T COMPLETE");
  7503  000A48  0E4A               	movlw	low STR_4
  7504  000A4A  0100               	movlb	0	; () banked
  7505  000A4C  6F8E               	movwf	printf@f& (0+255),b
  7506  000A4E  0EFE               	movlw	high STR_4
  7507  000A50  0100               	movlb	0	; () banked
  7508  000A52  6F8F               	movwf	(printf@f+1)& (0+255),b
  7509  000A54  EC02  F00B         	call	_printf	;wreg free
  7510  000A58                     l8537:
  7511  000A58  0E00               	movlw	0
  7512  000A5A  0100               	movlb	0	; () banked
  7513  000A5C  6FC9               	movwf	UI@i_409& (0+255),b
  7514  000A5E                     l8539:
  7515                           
  7516                           ; BSR set to: 0
  7517  000A5E  0E63               	movlw	99
  7518  000A60  0100               	movlb	0	; () banked
  7519  000A62  65C9               	cpfsgt	UI@i_409& (0+255),b
  7520  000A64  D001               	goto	l8543
  7521  000A66  D00C               	goto	l8547
  7522  000A68                     l8543:
  7523                           
  7524                           ; BSR set to: 0
  7525  000A68  0E68               	movlw	104
  7526  000A6A  0100               	movlb	0	; () banked
  7527  000A6C  6FC4               	movwf	??_UI& (0+255),b
  7528  000A6E  0EE4               	movlw	228
  7529  000A70                     u8937:
  7530  000A70  2EE8               	decfsz	wreg,f,c
  7531  000A72  D7FE               	bra	u8937
  7532  000A74  2FC4               	decfsz	??_UI& (0+255),f,b
  7533  000A76  D7FC               	bra	u8937
  7534  000A78  F000               	nop	
  7535  000A7A  0100               	movlb	0	; () banked
  7536  000A7C  2BC9               	incf	UI@i_409& (0+255),f,b
  7537  000A7E  D7EF               	goto	l8539
  7538  000A80                     l8547:
  7539                           
  7540                           ; BSR set to: 0
  7541  000A80  0100               	movlb	0	; () banked
  7542  000A82  51F6               	movf	_logstate& (0+255),w,b
  7543  000A84  0100               	movlb	0	; () banked
  7544  000A86  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7545  000A88  B4D8               	btfsc	status,2,c
  7546  000A8A  0012               	return	
  7547  000A8C  D7E5               	goto	l8537
  7548  000A8E                     l8553:
  7549                           
  7550                           ;UI.c: 111: else{
  7551                           ;UI.c: 112: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7552  000A8E  0E01               	movlw	1
  7553  000A90  EC48  F029         	call	_lcdInst
  7554  000A94  0E68               	movlw	104
  7555  000A96  0100               	movlb	0	; () banked
  7556  000A98  6FC4               	movwf	??_UI& (0+255),b
  7557  000A9A  0EE4               	movlw	228
  7558  000A9C                     u8947:
  7559  000A9C  2EE8               	decfsz	wreg,f,c
  7560  000A9E  D7FE               	bra	u8947
  7561  000AA0  2FC4               	decfsz	??_UI& (0+255),f,b
  7562  000AA2  D7FC               	bra	u8947
  7563  000AA4  F000               	nop	
  7564                           
  7565                           ;UI.c: 113: lcdInst(0b10000000);;
  7566  000AA6  0E80               	movlw	128
  7567  000AA8  EC48  F029         	call	_lcdInst
  7568                           
  7569                           ;UI.c: 114: printf("-- LOG %2d HERE--", log);
  7570  000AAC  0E91               	movlw	low STR_3
  7571  000AAE  0100               	movlb	0	; () banked
  7572  000AB0  6F8E               	movwf	printf@f& (0+255),b
  7573  000AB2  0EFB               	movlw	high STR_3
  7574  000AB4  0100               	movlb	0	; () banked
  7575  000AB6  6F8F               	movwf	(printf@f+1)& (0+255),b
  7576  000AB8  C0F2  F090         	movff	_log,?_printf+2
  7577  000ABC  C0F3  F091         	movff	_log+1,?_printf+3
  7578  000AC0  EC02  F00B         	call	_printf	;wreg free
  7579                           
  7580                           ;UI.c: 115: lcdInst(0b11000000);;
  7581  000AC4  0EC0               	movlw	192
  7582  000AC6  EC48  F029         	call	_lcdInst
  7583                           
  7584                           ;UI.c: 116: printf("PAUSE < | BACK >");
  7585  000ACA  0EE6               	movlw	low STR_6
  7586  000ACC  0100               	movlb	0	; () banked
  7587  000ACE  6F8E               	movwf	printf@f& (0+255),b
  7588  000AD0  0EFD               	movlw	high STR_6
  7589  000AD2  0100               	movlb	0	; () banked
  7590  000AD4  6F8F               	movwf	(printf@f+1)& (0+255),b
  7591  000AD6  EC02  F00B         	call	_printf	;wreg free
  7592                           
  7593                           ;UI.c: 118: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7594  000ADA  0E00               	movlw	0
  7595  000ADC  0100               	movlb	0	; () banked
  7596  000ADE  6FCA               	movwf	UI@i_412& (0+255),b
  7597  000AE0                     l8567:
  7598                           
  7599                           ; BSR set to: 0
  7600  000AE0  0E63               	movlw	99
  7601  000AE2  0100               	movlb	0	; () banked
  7602  000AE4  65CA               	cpfsgt	UI@i_412& (0+255),b
  7603  000AE6  D001               	goto	l8571
  7604  000AE8  D00C               	goto	l8575
  7605  000AEA                     l8571:
  7606                           
  7607                           ; BSR set to: 0
  7608  000AEA  0E68               	movlw	104
  7609  000AEC  0100               	movlb	0	; () banked
  7610  000AEE  6FC4               	movwf	??_UI& (0+255),b
  7611  000AF0  0EE4               	movlw	228
  7612  000AF2                     u8957:
  7613  000AF2  2EE8               	decfsz	wreg,f,c
  7614  000AF4  D7FE               	bra	u8957
  7615  000AF6  2FC4               	decfsz	??_UI& (0+255),f,b
  7616  000AF8  D7FC               	bra	u8957
  7617  000AFA  F000               	nop	
  7618  000AFC  0100               	movlb	0	; () banked
  7619  000AFE  2BCA               	incf	UI@i_412& (0+255),f,b
  7620  000B00  D7EF               	goto	l8567
  7621  000B02                     l8575:
  7622                           
  7623                           ; BSR set to: 0
  7624  000B02  0100               	movlb	0	; () banked
  7625  000B04  51F6               	movf	_logstate& (0+255),w,b
  7626  000B06  0100               	movlb	0	; () banked
  7627  000B08  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7628  000B0A  B4D8               	btfsc	status,2,c
  7629  000B0C  0012               	return	
  7630                           
  7631                           ; BSR set to: 0
  7632                           ;UI.c: 119: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7633                           
  7634                           ; BSR set to: 0
  7635                           
  7636                           ; BSR set to: 0
  7637  000B0E  0E00               	movlw	0
  7638  000B10  0100               	movlb	0	; () banked
  7639  000B12  6FCB               	movwf	UI@i_413& (0+255),b
  7640  000B14                     l8581:
  7641                           
  7642                           ; BSR set to: 0
  7643  000B14  0E63               	movlw	99
  7644  000B16  0100               	movlb	0	; () banked
  7645  000B18  65CB               	cpfsgt	UI@i_413& (0+255),b
  7646  000B1A  D001               	goto	l8585
  7647  000B1C  D00C               	goto	l8589
  7648  000B1E                     l8585:
  7649                           
  7650                           ; BSR set to: 0
  7651  000B1E  0E68               	movlw	104
  7652  000B20  0100               	movlb	0	; () banked
  7653  000B22  6FC4               	movwf	??_UI& (0+255),b
  7654  000B24  0EE4               	movlw	228
  7655  000B26                     u8967:
  7656  000B26  2EE8               	decfsz	wreg,f,c
  7657  000B28  D7FE               	bra	u8967
  7658  000B2A  2FC4               	decfsz	??_UI& (0+255),f,b
  7659  000B2C  D7FC               	bra	u8967
  7660  000B2E  F000               	nop	
  7661  000B30  0100               	movlb	0	; () banked
  7662  000B32  2BCB               	incf	UI@i_413& (0+255),f,b
  7663  000B34  D7EF               	goto	l8581
  7664  000B36                     l8589:
  7665                           
  7666                           ; BSR set to: 0
  7667  000B36  0100               	movlb	0	; () banked
  7668  000B38  51F6               	movf	_logstate& (0+255),w,b
  7669  000B3A  0100               	movlb	0	; () banked
  7670  000B3C  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7671  000B3E  B4D8               	btfsc	status,2,c
  7672  000B40  0012               	return	
  7673                           
  7674                           ; BSR set to: 0
  7675                           ;UI.c: 121: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7676                           
  7677                           ; BSR set to: 0
  7678                           
  7679                           ; BSR set to: 0
  7680  000B42  0E01               	movlw	1
  7681  000B44  EC48  F029         	call	_lcdInst
  7682  000B48  0E68               	movlw	104
  7683  000B4A  0100               	movlb	0	; () banked
  7684  000B4C  6FC4               	movwf	??_UI& (0+255),b
  7685  000B4E  0EE4               	movlw	228
  7686  000B50                     u8977:
  7687  000B50  2EE8               	decfsz	wreg,f,c
  7688  000B52  D7FE               	bra	u8977
  7689  000B54  2FC4               	decfsz	??_UI& (0+255),f,b
  7690  000B56  D7FC               	bra	u8977
  7691  000B58  F000               	nop	
  7692                           
  7693                           ;UI.c: 122: lcdInst(0b10000000);;
  7694  000B5A  0E80               	movlw	128
  7695  000B5C  EC48  F029         	call	_lcdInst
  7696                           
  7697                           ;UI.c: 123: printf("START:");
  7698  000B60  0EC4               	movlw	low STR_7
  7699  000B62  0100               	movlb	0	; () banked
  7700  000B64  6F8E               	movwf	printf@f& (0+255),b
  7701  000B66  0EFF               	movlw	high STR_7
  7702  000B68  0100               	movlb	0	; () banked
  7703  000B6A  6F8F               	movwf	(printf@f+1)& (0+255),b
  7704  000B6C  EC02  F00B         	call	_printf	;wreg free
  7705                           
  7706                           ;UI.c: 124: lcdInst(0b11000000);;
  7707  000B70  0EC0               	movlw	192
  7708  000B72  EC48  F029         	call	_lcdInst
  7709                           
  7710                           ;UI.c: 125: char month[] = "MMM";
  7711  000B76  C141  F0D6         	movff	UI@F3235,UI@month
  7712  000B7A  C142  F0D7         	movff	UI@F3235+1,UI@month+1
  7713  000B7E  C143  F0D8         	movff	UI@F3235+2,UI@month+2
  7714  000B82  C144  F0D9         	movff	UI@F3235+3,UI@month+3
  7715                           
  7716                           ;UI.c: 126: switch(log_startTime[5]){
  7717  000B86  D0C3               	goto	l8633
  7718  000B88                     l8605:
  7719                           
  7720                           ;UI.c: 128: strcpy(month, "JAN");
  7721  000B88  0ED6               	movlw	low UI@month
  7722  000B8A  0100               	movlb	0	; () banked
  7723  000B8C  6F80               	movwf	strcpy@to& (0+255),b
  7724  000B8E  0E00               	movlw	high UI@month
  7725  000B90  0100               	movlb	0	; () banked
  7726  000B92  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7727  000B94  0EDB               	movlw	low STR_8
  7728  000B96  0100               	movlb	0	; () banked
  7729  000B98  6F82               	movwf	strcpy@from& (0+255),b
  7730  000B9A  0EFF               	movlw	high STR_8
  7731  000B9C  0100               	movlb	0	; () banked
  7732  000B9E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7733  000BA0  ECA3  F026         	call	_strcpy	;wreg free
  7734                           
  7735                           ;UI.c: 129: break;
  7736  000BA4  D0E6               	goto	l8635
  7737  000BA6                     l8607:
  7738                           
  7739                           ;UI.c: 131: strcpy(month, "FEB");
  7740  000BA6  0ED6               	movlw	low UI@month
  7741  000BA8  0100               	movlb	0	; () banked
  7742  000BAA  6F80               	movwf	strcpy@to& (0+255),b
  7743  000BAC  0E00               	movlw	high UI@month
  7744  000BAE  0100               	movlb	0	; () banked
  7745  000BB0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7746  000BB2  0ECB               	movlw	low STR_9
  7747  000BB4  0100               	movlb	0	; () banked
  7748  000BB6  6F82               	movwf	strcpy@from& (0+255),b
  7749  000BB8  0EFF               	movlw	high STR_9
  7750  000BBA  0100               	movlb	0	; () banked
  7751  000BBC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7752  000BBE  ECA3  F026         	call	_strcpy	;wreg free
  7753                           
  7754                           ;UI.c: 132: break;
  7755  000BC2  D0D7               	goto	l8635
  7756  000BC4                     l8609:
  7757                           
  7758                           ;UI.c: 134: strcpy(month, "MAR");
  7759  000BC4  0ED6               	movlw	low UI@month
  7760  000BC6  0100               	movlb	0	; () banked
  7761  000BC8  6F80               	movwf	strcpy@to& (0+255),b
  7762  000BCA  0E00               	movlw	high UI@month
  7763  000BCC  0100               	movlb	0	; () banked
  7764  000BCE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7765  000BD0  0EE7               	movlw	low STR_10
  7766  000BD2  0100               	movlb	0	; () banked
  7767  000BD4  6F82               	movwf	strcpy@from& (0+255),b
  7768  000BD6  0EFF               	movlw	high STR_10
  7769  000BD8  0100               	movlb	0	; () banked
  7770  000BDA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7771  000BDC  ECA3  F026         	call	_strcpy	;wreg free
  7772                           
  7773                           ;UI.c: 135: break;
  7774  000BE0  D0C8               	goto	l8635
  7775  000BE2                     l8611:
  7776                           
  7777                           ;UI.c: 137: strcpy(month, "APR");
  7778  000BE2  0ED6               	movlw	low UI@month
  7779  000BE4  0100               	movlb	0	; () banked
  7780  000BE6  6F80               	movwf	strcpy@to& (0+255),b
  7781  000BE8  0E00               	movlw	high UI@month
  7782  000BEA  0100               	movlb	0	; () banked
  7783  000BEC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7784  000BEE  0EEB               	movlw	low STR_11
  7785  000BF0  0100               	movlb	0	; () banked
  7786  000BF2  6F82               	movwf	strcpy@from& (0+255),b
  7787  000BF4  0EFF               	movlw	high STR_11
  7788  000BF6  0100               	movlb	0	; () banked
  7789  000BF8  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7790  000BFA  ECA3  F026         	call	_strcpy	;wreg free
  7791                           
  7792                           ;UI.c: 138: break;
  7793  000BFE  D0B9               	goto	l8635
  7794  000C00                     l8613:
  7795                           
  7796                           ;UI.c: 140: strcpy(month, "MAY");
  7797  000C00  0ED6               	movlw	low UI@month
  7798  000C02  0100               	movlb	0	; () banked
  7799  000C04  6F80               	movwf	strcpy@to& (0+255),b
  7800  000C06  0E00               	movlw	high UI@month
  7801  000C08  0100               	movlb	0	; () banked
  7802  000C0A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7803  000C0C  0EFB               	movlw	low STR_12
  7804  000C0E  0100               	movlb	0	; () banked
  7805  000C10  6F82               	movwf	strcpy@from& (0+255),b
  7806  000C12  0EFF               	movlw	high STR_12
  7807  000C14  0100               	movlb	0	; () banked
  7808  000C16  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7809  000C18  ECA3  F026         	call	_strcpy	;wreg free
  7810                           
  7811                           ;UI.c: 141: break;
  7812  000C1C  D0AA               	goto	l8635
  7813  000C1E                     l8615:
  7814                           
  7815                           ;UI.c: 143: strcpy(month, "JUN");
  7816  000C1E  0ED6               	movlw	low UI@month
  7817  000C20  0100               	movlb	0	; () banked
  7818  000C22  6F80               	movwf	strcpy@to& (0+255),b
  7819  000C24  0E00               	movlw	high UI@month
  7820  000C26  0100               	movlb	0	; () banked
  7821  000C28  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7822  000C2A  0EDF               	movlw	low STR_13
  7823  000C2C  0100               	movlb	0	; () banked
  7824  000C2E  6F82               	movwf	strcpy@from& (0+255),b
  7825  000C30  0EFF               	movlw	high STR_13
  7826  000C32  0100               	movlb	0	; () banked
  7827  000C34  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7828  000C36  ECA3  F026         	call	_strcpy	;wreg free
  7829                           
  7830                           ;UI.c: 144: break;
  7831  000C3A  D09B               	goto	l8635
  7832  000C3C                     l8617:
  7833                           
  7834                           ;UI.c: 146: strcpy(month, "JUL");
  7835  000C3C  0ED6               	movlw	low UI@month
  7836  000C3E  0100               	movlb	0	; () banked
  7837  000C40  6F80               	movwf	strcpy@to& (0+255),b
  7838  000C42  0E00               	movlw	high UI@month
  7839  000C44  0100               	movlb	0	; () banked
  7840  000C46  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7841  000C48  0ED7               	movlw	low STR_14
  7842  000C4A  0100               	movlb	0	; () banked
  7843  000C4C  6F82               	movwf	strcpy@from& (0+255),b
  7844  000C4E  0EFF               	movlw	high STR_14
  7845  000C50  0100               	movlb	0	; () banked
  7846  000C52  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7847  000C54  ECA3  F026         	call	_strcpy	;wreg free
  7848                           
  7849                           ;UI.c: 147: break;
  7850  000C58  D08C               	goto	l8635
  7851  000C5A                     l8619:
  7852                           
  7853                           ;UI.c: 149: strcpy(month, "AUG");
  7854  000C5A  0ED6               	movlw	low UI@month
  7855  000C5C  0100               	movlb	0	; () banked
  7856  000C5E  6F80               	movwf	strcpy@to& (0+255),b
  7857  000C60  0E00               	movlw	high UI@month
  7858  000C62  0100               	movlb	0	; () banked
  7859  000C64  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7860  000C66  0ED3               	movlw	low STR_15
  7861  000C68  0100               	movlb	0	; () banked
  7862  000C6A  6F82               	movwf	strcpy@from& (0+255),b
  7863  000C6C  0EFF               	movlw	high STR_15
  7864  000C6E  0100               	movlb	0	; () banked
  7865  000C70  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7866  000C72  ECA3  F026         	call	_strcpy	;wreg free
  7867                           
  7868                           ;UI.c: 150: break;
  7869  000C76  D07D               	goto	l8635
  7870  000C78                     l8621:
  7871                           
  7872                           ;UI.c: 152: strcpy(month, "SEP");
  7873  000C78  0ED6               	movlw	low UI@month
  7874  000C7A  0100               	movlb	0	; () banked
  7875  000C7C  6F80               	movwf	strcpy@to& (0+255),b
  7876  000C7E  0E00               	movlw	high UI@month
  7877  000C80  0100               	movlb	0	; () banked
  7878  000C82  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7879  000C84  0EE3               	movlw	low STR_16
  7880  000C86  0100               	movlb	0	; () banked
  7881  000C88  6F82               	movwf	strcpy@from& (0+255),b
  7882  000C8A  0EFF               	movlw	high STR_16
  7883  000C8C  0100               	movlb	0	; () banked
  7884  000C8E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7885  000C90  ECA3  F026         	call	_strcpy	;wreg free
  7886                           
  7887                           ;UI.c: 153: break;
  7888  000C94  D06E               	goto	l8635
  7889  000C96                     l8623:
  7890                           
  7891                           ;UI.c: 155: strcpy(month, "OCT");
  7892  000C96  0ED6               	movlw	low UI@month
  7893  000C98  0100               	movlb	0	; () banked
  7894  000C9A  6F80               	movwf	strcpy@to& (0+255),b
  7895  000C9C  0E00               	movlw	high UI@month
  7896  000C9E  0100               	movlb	0	; () banked
  7897  000CA0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7898  000CA2  0EF3               	movlw	low STR_17
  7899  000CA4  0100               	movlb	0	; () banked
  7900  000CA6  6F82               	movwf	strcpy@from& (0+255),b
  7901  000CA8  0EFF               	movlw	high STR_17
  7902  000CAA  0100               	movlb	0	; () banked
  7903  000CAC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7904  000CAE  ECA3  F026         	call	_strcpy	;wreg free
  7905                           
  7906                           ;UI.c: 156: break;
  7907  000CB2  D05F               	goto	l8635
  7908  000CB4                     l8625:
  7909                           
  7910                           ;UI.c: 158: strcpy(month, "NOV");
  7911  000CB4  0ED6               	movlw	low UI@month
  7912  000CB6  0100               	movlb	0	; () banked
  7913  000CB8  6F80               	movwf	strcpy@to& (0+255),b
  7914  000CBA  0E00               	movlw	high UI@month
  7915  000CBC  0100               	movlb	0	; () banked
  7916  000CBE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7917  000CC0  0EF7               	movlw	low STR_18
  7918  000CC2  0100               	movlb	0	; () banked
  7919  000CC4  6F82               	movwf	strcpy@from& (0+255),b
  7920  000CC6  0EFF               	movlw	high STR_18
  7921  000CC8  0100               	movlb	0	; () banked
  7922  000CCA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7923  000CCC  ECA3  F026         	call	_strcpy	;wreg free
  7924                           
  7925                           ;UI.c: 159: break;
  7926  000CD0  D050               	goto	l8635
  7927  000CD2                     l8627:
  7928                           
  7929                           ;UI.c: 161: strcpy(month, "DEC");
  7930  000CD2  0ED6               	movlw	low UI@month
  7931  000CD4  0100               	movlb	0	; () banked
  7932  000CD6  6F80               	movwf	strcpy@to& (0+255),b
  7933  000CD8  0E00               	movlw	high UI@month
  7934  000CDA  0100               	movlb	0	; () banked
  7935  000CDC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7936  000CDE  0ECF               	movlw	low STR_19
  7937  000CE0  0100               	movlb	0	; () banked
  7938  000CE2  6F82               	movwf	strcpy@from& (0+255),b
  7939  000CE4  0EFF               	movlw	high STR_19
  7940  000CE6  0100               	movlb	0	; () banked
  7941  000CE8  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7942  000CEA  ECA3  F026         	call	_strcpy	;wreg free
  7943                           
  7944                           ;UI.c: 162: break;
  7945  000CEE  D041               	goto	l8635
  7946  000CF0                     l8629:
  7947                           
  7948                           ;UI.c: 164: strcpy(month, "ERR");
  7949  000CF0  0ED6               	movlw	low UI@month
  7950  000CF2  0100               	movlb	0	; () banked
  7951  000CF4  6F80               	movwf	strcpy@to& (0+255),b
  7952  000CF6  0E00               	movlw	high UI@month
  7953  000CF8  0100               	movlb	0	; () banked
  7954  000CFA  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7955  000CFC  0EEF               	movlw	low STR_20
  7956  000CFE  0100               	movlb	0	; () banked
  7957  000D00  6F82               	movwf	strcpy@from& (0+255),b
  7958  000D02  0EFF               	movlw	high STR_20
  7959  000D04  0100               	movlb	0	; () banked
  7960  000D06  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7961  000D08  ECA3  F026         	call	_strcpy	;wreg free
  7962                           
  7963                           ;UI.c: 166: }
  7964                           
  7965                           ;UI.c: 165: break;
  7966  000D0C  D032               	goto	l8635
  7967  000D0E                     l8633:
  7968  000D0E  EE21  F00A         	lfsr	2,_log_startTime+10
  7969  000D12  CFDE F0C4          	movff	postinc2,??_UI
  7970  000D16  CFDD F0C5          	movff	postdec2,??_UI+1
  7971                           
  7972                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7973                           ; Switch size 1, requested type "space"
  7974                           ; Number of cases is 1, Range of values is 0 to 0
  7975                           ; switch strategies available:
  7976                           ; Name         Instructions Cycles
  7977                           ; simple_byte            4     3 (average)
  7978                           ;	Chosen strategy is simple_byte
  7979  000D1A  0100               	movlb	0	; () banked
  7980  000D1C  51C5               	movf	(??_UI+1)& (0+255),w,b
  7981  000D1E  0A00               	xorlw	0	; case 0
  7982  000D20  A4D8               	btfss	status,2,c
  7983  000D22  D7E6               	goto	l8629
  7984                           
  7985                           ; BSR set to: 0
  7986                           ; Switch size 1, requested type "space"
  7987                           ; Number of cases is 12, Range of values is 1 to 12
  7988                           ; switch strategies available:
  7989                           ; Name         Instructions Cycles
  7990                           ; simple_byte           37    19 (average)
  7991                           ;	Chosen strategy is simple_byte
  7992  000D24  0100               	movlb	0	; () banked
  7993  000D26  51C4               	movf	??_UI& (0+255),w,b
  7994  000D28  0A01               	xorlw	1	; case 1
  7995  000D2A  B4D8               	btfsc	status,2,c
  7996  000D2C  D72D               	goto	l8605
  7997  000D2E  0A03               	xorlw	3	; case 2
  7998  000D30  B4D8               	btfsc	status,2,c
  7999  000D32  D739               	goto	l8607
  8000  000D34  0A01               	xorlw	1	; case 3
  8001  000D36  B4D8               	btfsc	status,2,c
  8002  000D38  D745               	goto	l8609
  8003  000D3A  0A07               	xorlw	7	; case 4
  8004  000D3C  B4D8               	btfsc	status,2,c
  8005  000D3E  D751               	goto	l8611
  8006  000D40  0A01               	xorlw	1	; case 5
  8007  000D42  B4D8               	btfsc	status,2,c
  8008  000D44  D75D               	goto	l8613
  8009  000D46  0A03               	xorlw	3	; case 6
  8010  000D48  B4D8               	btfsc	status,2,c
  8011  000D4A  D769               	goto	l8615
  8012  000D4C  0A01               	xorlw	1	; case 7
  8013  000D4E  B4D8               	btfsc	status,2,c
  8014  000D50  D775               	goto	l8617
  8015  000D52  0A0F               	xorlw	15	; case 8
  8016  000D54  B4D8               	btfsc	status,2,c
  8017  000D56  D781               	goto	l8619
  8018  000D58  0A01               	xorlw	1	; case 9
  8019  000D5A  B4D8               	btfsc	status,2,c
  8020  000D5C  D78D               	goto	l8621
  8021  000D5E  0A03               	xorlw	3	; case 10
  8022  000D60  B4D8               	btfsc	status,2,c
  8023  000D62  D799               	goto	l8623
  8024  000D64  0A01               	xorlw	1	; case 11
  8025  000D66  B4D8               	btfsc	status,2,c
  8026  000D68  D7A5               	goto	l8625
  8027  000D6A  0A07               	xorlw	7	; case 12
  8028  000D6C  B4D8               	btfsc	status,2,c
  8029  000D6E  D7B1               	goto	l8627
  8030  000D70  D7BF               	goto	l8629
  8031  000D72                     l8635:
  8032                           
  8033                           ;UI.c: 167: printf("%02d%s | %02d:%02d:%02d", log_startTime[4],month,log_startTime[2],lo
      +                          g_startTime[1],log_startTime[0]);
  8034  000D72  0E0A               	movlw	low STR_21
  8035  000D74  0100               	movlb	0	; () banked
  8036  000D76  6F8E               	movwf	printf@f& (0+255),b
  8037  000D78  0EFB               	movlw	high STR_21
  8038  000D7A  0100               	movlb	0	; () banked
  8039  000D7C  6F8F               	movwf	(printf@f+1)& (0+255),b
  8040  000D7E  C108  F090         	movff	_log_startTime+8,?_printf+2
  8041  000D82  C109  F091         	movff	_log_startTime+9,?_printf+3
  8042  000D86  0ED6               	movlw	low UI@month
  8043  000D88  0100               	movlb	0	; () banked
  8044  000D8A  6F92               	movwf	(?_printf+4)& (0+255),b
  8045  000D8C  0E00               	movlw	high UI@month
  8046  000D8E  0100               	movlb	0	; () banked
  8047  000D90  6F93               	movwf	(?_printf+5)& (0+255),b
  8048  000D92  C104  F094         	movff	_log_startTime+4,?_printf+6
  8049  000D96  C105  F095         	movff	_log_startTime+5,?_printf+7
  8050  000D9A  C102  F096         	movff	_log_startTime+2,?_printf+8
  8051  000D9E  C103  F097         	movff	_log_startTime+3,?_printf+9
  8052  000DA2  C100  F098         	movff	_log_startTime,?_printf+10
  8053  000DA6  C101  F099         	movff	_log_startTime+1,?_printf+11
  8054  000DAA  EC02  F00B         	call	_printf	;wreg free
  8055                           
  8056                           ;UI.c: 169: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8057  000DAE  0E00               	movlw	0
  8058  000DB0  0100               	movlb	0	; () banked
  8059  000DB2  6FCC               	movwf	UI@i_431& (0+255),b
  8060  000DB4                     l8639:
  8061                           
  8062                           ; BSR set to: 0
  8063  000DB4  0E63               	movlw	99
  8064  000DB6  0100               	movlb	0	; () banked
  8065  000DB8  65CC               	cpfsgt	UI@i_431& (0+255),b
  8066  000DBA  D001               	goto	l8643
  8067  000DBC  D00C               	goto	l8647
  8068  000DBE                     l8643:
  8069                           
  8070                           ; BSR set to: 0
  8071  000DBE  0E68               	movlw	104
  8072  000DC0  0100               	movlb	0	; () banked
  8073  000DC2  6FC4               	movwf	??_UI& (0+255),b
  8074  000DC4  0EE4               	movlw	228
  8075  000DC6                     u8987:
  8076  000DC6  2EE8               	decfsz	wreg,f,c
  8077  000DC8  D7FE               	bra	u8987
  8078  000DCA  2FC4               	decfsz	??_UI& (0+255),f,b
  8079  000DCC  D7FC               	bra	u8987
  8080  000DCE  F000               	nop	
  8081  000DD0  0100               	movlb	0	; () banked
  8082  000DD2  2BCC               	incf	UI@i_431& (0+255),f,b
  8083  000DD4  D7EF               	goto	l8639
  8084  000DD6                     l8647:
  8085                           
  8086                           ; BSR set to: 0
  8087  000DD6  0100               	movlb	0	; () banked
  8088  000DD8  51F6               	movf	_logstate& (0+255),w,b
  8089  000DDA  0100               	movlb	0	; () banked
  8090  000DDC  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8091  000DDE  B4D8               	btfsc	status,2,c
  8092  000DE0  0012               	return	
  8093                           
  8094                           ; BSR set to: 0
  8095                           ;UI.c: 170: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8096                           
  8097                           ; BSR set to: 0
  8098                           
  8099                           ; BSR set to: 0
  8100  000DE2  0E00               	movlw	0
  8101  000DE4  0100               	movlb	0	; () banked
  8102  000DE6  6FCD               	movwf	UI@i_432& (0+255),b
  8103  000DE8                     l8653:
  8104                           
  8105                           ; BSR set to: 0
  8106  000DE8  0E63               	movlw	99
  8107  000DEA  0100               	movlb	0	; () banked
  8108  000DEC  65CD               	cpfsgt	UI@i_432& (0+255),b
  8109  000DEE  D001               	goto	l8657
  8110  000DF0  D00C               	goto	l8661
  8111  000DF2                     l8657:
  8112                           
  8113                           ; BSR set to: 0
  8114  000DF2  0E68               	movlw	104
  8115  000DF4  0100               	movlb	0	; () banked
  8116  000DF6  6FC4               	movwf	??_UI& (0+255),b
  8117  000DF8  0EE4               	movlw	228
  8118  000DFA                     u8997:
  8119  000DFA  2EE8               	decfsz	wreg,f,c
  8120  000DFC  D7FE               	bra	u8997
  8121  000DFE  2FC4               	decfsz	??_UI& (0+255),f,b
  8122  000E00  D7FC               	bra	u8997
  8123  000E02  F000               	nop	
  8124  000E04  0100               	movlb	0	; () banked
  8125  000E06  2BCD               	incf	UI@i_432& (0+255),f,b
  8126  000E08  D7EF               	goto	l8653
  8127  000E0A                     l8661:
  8128                           
  8129                           ; BSR set to: 0
  8130  000E0A  0100               	movlb	0	; () banked
  8131  000E0C  51F6               	movf	_logstate& (0+255),w,b
  8132  000E0E  0100               	movlb	0	; () banked
  8133  000E10  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8134  000E12  B4D8               	btfsc	status,2,c
  8135  000E14  0012               	return	
  8136                           
  8137                           ; BSR set to: 0
  8138                           ;UI.c: 172: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8139                           
  8140                           ; BSR set to: 0
  8141                           
  8142                           ; BSR set to: 0
  8143  000E16  0E01               	movlw	1
  8144  000E18  EC48  F029         	call	_lcdInst
  8145  000E1C  0E68               	movlw	104
  8146  000E1E  0100               	movlb	0	; () banked
  8147  000E20  6FC4               	movwf	??_UI& (0+255),b
  8148  000E22  0EE4               	movlw	228
  8149  000E24                     u9007:
  8150  000E24  2EE8               	decfsz	wreg,f,c
  8151  000E26  D7FE               	bra	u9007
  8152  000E28  2FC4               	decfsz	??_UI& (0+255),f,b
  8153  000E2A  D7FC               	bra	u9007
  8154  000E2C  F000               	nop	
  8155                           
  8156                           ;UI.c: 173: lcdInst(0b10000000);;
  8157  000E2E  0E80               	movlw	128
  8158  000E30  EC48  F029         	call	_lcdInst
  8159                           
  8160                           ;UI.c: 174: printf("DURATION:");
  8161  000E34  0E9B               	movlw	low STR_22
  8162  000E36  0100               	movlb	0	; () banked
  8163  000E38  6F8E               	movwf	printf@f& (0+255),b
  8164  000E3A  0EFF               	movlw	high STR_22
  8165  000E3C  0100               	movlb	0	; () banked
  8166  000E3E  6F8F               	movwf	(printf@f+1)& (0+255),b
  8167  000E40  EC02  F00B         	call	_printf	;wreg free
  8168                           
  8169                           ;UI.c: 175: lcdInst(0b11000000);;
  8170  000E44  0EC0               	movlw	192
  8171  000E46  EC48  F029         	call	_lcdInst
  8172                           
  8173                           ;UI.c: 176: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  8174  000E4A  0E0E               	movlw	14
  8175  000E4C  0100               	movlb	0	; () banked
  8176  000E4E  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8177  000E50  0E10               	movlw	16
  8178  000E52  6F82               	movwf	___awmod@divisor& (0+255),b
  8179  000E54  C0F4  F080         	movff	_log_total_time,___awmod@dividend
  8180  000E58  C0F5  F081         	movff	_log_total_time+1,___awmod@dividend+1
  8181  000E5C  ECBB  F021         	call	___awmod	;wreg free
  8182  000E60  C080  F0C6         	movff	?___awmod,_UI$2415
  8183  000E64  C081  F0C7         	movff	?___awmod+1,_UI$2415+1
  8184                           
  8185                           ;UI.c: 176: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  8186  000E68  0E19               	movlw	low STR_23
  8187  000E6A  0100               	movlb	0	; () banked
  8188  000E6C  6F8E               	movwf	printf@f& (0+255),b
  8189  000E6E  0EFF               	movlw	high STR_23
  8190  000E70  0100               	movlb	0	; () banked
  8191  000E72  6F8F               	movwf	(printf@f+1)& (0+255),b
  8192  000E74  0E0E               	movlw	14
  8193  000E76  0100               	movlb	0	; () banked
  8194  000E78  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8195  000E7A  0E10               	movlw	16
  8196  000E7C  6F82               	movwf	___awmod@divisor& (0+255),b
  8197  000E7E  C0F4  F080         	movff	_log_total_time,___awmod@dividend
  8198  000E82  C0F5  F081         	movff	_log_total_time+1,___awmod@dividend+1
  8199  000E86  ECBB  F021         	call	___awmod	;wreg free
  8200  000E8A  C080  F086         	movff	?___awmod,___awdiv@dividend
  8201  000E8E  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  8202  000E92  0E00               	movlw	0
  8203  000E94  0100               	movlb	0	; () banked
  8204  000E96  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  8205  000E98  0E3C               	movlw	60
  8206  000E9A  6F88               	movwf	___awdiv@divisor& (0+255),b
  8207  000E9C  EC53  F020         	call	___awdiv	;wreg free
  8208  000EA0  C086  F090         	movff	?___awdiv,?_printf+2
  8209  000EA4  C087  F091         	movff	?___awdiv+1,?_printf+3
  8210  000EA8  C0C6  F080         	movff	_UI$2415,___awmod@dividend
  8211  000EAC  C0C7  F081         	movff	_UI$2415+1,___awmod@dividend+1
  8212  000EB0  0E00               	movlw	0
  8213  000EB2  0100               	movlb	0	; () banked
  8214  000EB4  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8215  000EB6  0E3C               	movlw	60
  8216  000EB8  6F82               	movwf	___awmod@divisor& (0+255),b
  8217  000EBA  ECBB  F021         	call	___awmod	;wreg free
  8218  000EBE  C080  F092         	movff	?___awmod,?_printf+4
  8219  000EC2  C081  F093         	movff	?___awmod+1,?_printf+5
  8220  000EC6  EC02  F00B         	call	_printf	;wreg free
  8221                           
  8222                           ;UI.c: 178: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8223  000ECA  0E00               	movlw	0
  8224  000ECC  0100               	movlb	0	; () banked
  8225  000ECE  6FCE               	movwf	UI@i_435& (0+255),b
  8226  000ED0                     l8681:
  8227                           
  8228                           ; BSR set to: 0
  8229  000ED0  0E63               	movlw	99
  8230  000ED2  0100               	movlb	0	; () banked
  8231  000ED4  65CE               	cpfsgt	UI@i_435& (0+255),b
  8232  000ED6  D001               	goto	l8685
  8233  000ED8  D00C               	goto	l8689
  8234  000EDA                     l8685:
  8235                           
  8236                           ; BSR set to: 0
  8237  000EDA  0E68               	movlw	104
  8238  000EDC  0100               	movlb	0	; () banked
  8239  000EDE  6FC4               	movwf	??_UI& (0+255),b
  8240  000EE0  0EE4               	movlw	228
  8241  000EE2                     u9017:
  8242  000EE2  2EE8               	decfsz	wreg,f,c
  8243  000EE4  D7FE               	bra	u9017
  8244  000EE6  2FC4               	decfsz	??_UI& (0+255),f,b
  8245  000EE8  D7FC               	bra	u9017
  8246  000EEA  F000               	nop	
  8247  000EEC  0100               	movlb	0	; () banked
  8248  000EEE  2BCE               	incf	UI@i_435& (0+255),f,b
  8249  000EF0  D7EF               	goto	l8681
  8250  000EF2                     l8689:
  8251                           
  8252                           ; BSR set to: 0
  8253  000EF2  0100               	movlb	0	; () banked
  8254  000EF4  51F6               	movf	_logstate& (0+255),w,b
  8255  000EF6  0100               	movlb	0	; () banked
  8256  000EF8  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8257  000EFA  B4D8               	btfsc	status,2,c
  8258  000EFC  0012               	return	
  8259                           
  8260                           ; BSR set to: 0
  8261                           ;UI.c: 179: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8262                           
  8263                           ; BSR set to: 0
  8264                           
  8265                           ; BSR set to: 0
  8266  000EFE  0E00               	movlw	0
  8267  000F00  0100               	movlb	0	; () banked
  8268  000F02  6FCF               	movwf	UI@i_436& (0+255),b
  8269  000F04                     l8695:
  8270                           
  8271                           ; BSR set to: 0
  8272  000F04  0E63               	movlw	99
  8273  000F06  0100               	movlb	0	; () banked
  8274  000F08  65CF               	cpfsgt	UI@i_436& (0+255),b
  8275  000F0A  D001               	goto	l8699
  8276  000F0C  D00C               	goto	l8703
  8277  000F0E                     l8699:
  8278                           
  8279                           ; BSR set to: 0
  8280  000F0E  0E68               	movlw	104
  8281  000F10  0100               	movlb	0	; () banked
  8282  000F12  6FC4               	movwf	??_UI& (0+255),b
  8283  000F14  0EE4               	movlw	228
  8284  000F16                     u9027:
  8285  000F16  2EE8               	decfsz	wreg,f,c
  8286  000F18  D7FE               	bra	u9027
  8287  000F1A  2FC4               	decfsz	??_UI& (0+255),f,b
  8288  000F1C  D7FC               	bra	u9027
  8289  000F1E  F000               	nop	
  8290  000F20  0100               	movlb	0	; () banked
  8291  000F22  2BCF               	incf	UI@i_436& (0+255),f,b
  8292  000F24  D7EF               	goto	l8695
  8293  000F26                     l8703:
  8294                           
  8295                           ; BSR set to: 0
  8296  000F26  0100               	movlb	0	; () banked
  8297  000F28  51F6               	movf	_logstate& (0+255),w,b
  8298  000F2A  0100               	movlb	0	; () banked
  8299  000F2C  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8300  000F2E  B4D8               	btfsc	status,2,c
  8301  000F30  0012               	return	
  8302                           
  8303                           ; BSR set to: 0
  8304                           ;UI.c: 181: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8305                           
  8306                           ; BSR set to: 0
  8307                           
  8308                           ; BSR set to: 0
  8309  000F32  0E01               	movlw	1
  8310  000F34  EC48  F029         	call	_lcdInst
  8311  000F38  0E68               	movlw	104
  8312  000F3A  0100               	movlb	0	; () banked
  8313  000F3C  6FC4               	movwf	??_UI& (0+255),b
  8314  000F3E  0EE4               	movlw	228
  8315  000F40                     u9037:
  8316  000F40  2EE8               	decfsz	wreg,f,c
  8317  000F42  D7FE               	bra	u9037
  8318  000F44  2FC4               	decfsz	??_UI& (0+255),f,b
  8319  000F46  D7FC               	bra	u9037
  8320  000F48  F000               	nop	
  8321                           
  8322                           ;UI.c: 182: lcdInst(0b10000000);;
  8323  000F4A  0E80               	movlw	128
  8324  000F4C  EC48  F029         	call	_lcdInst
  8325                           
  8326                           ;UI.c: 183: printf(" -- POP  CAN -- ");
  8327  000F50  0E3C               	movlw	low STR_24
  8328  000F52  0100               	movlb	0	; () banked
  8329  000F54  6F8E               	movwf	printf@f& (0+255),b
  8330  000F56  0EFD               	movlw	high STR_24
  8331  000F58  0100               	movlb	0	; () banked
  8332  000F5A  6F8F               	movwf	(printf@f+1)& (0+255),b
  8333  000F5C  EC02  F00B         	call	_printf	;wreg free
  8334                           
  8335                           ;UI.c: 184: lcdInst(0b11000000);;
  8336  000F60  0EC0               	movlw	192
  8337  000F62  EC48  F029         	call	_lcdInst
  8338                           
  8339                           ;UI.c: 185: printf("NTAB: %d|TAB: %d", log_count_pop_no_tab, log_count_pop_w_tab);
  8340  000F66  0E19               	movlw	low STR_25
  8341  000F68  0100               	movlb	0	; () banked
  8342  000F6A  6F8E               	movwf	printf@f& (0+255),b
  8343  000F6C  0EFE               	movlw	high STR_25
  8344  000F6E  0100               	movlb	0	; () banked
  8345  000F70  6F8F               	movwf	(printf@f+1)& (0+255),b
  8346  000F72  C069  F090         	movff	_log_count_pop_no_tab,?_printf+2
  8347  000F76  C06A  F091         	movff	_log_count_pop_no_tab+1,?_printf+3
  8348  000F7A  C06B  F092         	movff	_log_count_pop_w_tab,?_printf+4
  8349  000F7E  C06C  F093         	movff	_log_count_pop_w_tab+1,?_printf+5
  8350  000F82  EC02  F00B         	call	_printf	;wreg free
  8351                           
  8352                           ;UI.c: 187: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8353  000F86  0E00               	movlw	0
  8354  000F88  0100               	movlb	0	; () banked
  8355  000F8A  6FD0               	movwf	UI@i_439& (0+255),b
  8356  000F8C                     l8721:
  8357                           
  8358                           ; BSR set to: 0
  8359  000F8C  0E63               	movlw	99
  8360  000F8E  0100               	movlb	0	; () banked
  8361  000F90  65D0               	cpfsgt	UI@i_439& (0+255),b
  8362  000F92  D001               	goto	l8725
  8363  000F94  D00C               	goto	l8729
  8364  000F96                     l8725:
  8365                           
  8366                           ; BSR set to: 0
  8367  000F96  0E68               	movlw	104
  8368  000F98  0100               	movlb	0	; () banked
  8369  000F9A  6FC4               	movwf	??_UI& (0+255),b
  8370  000F9C  0EE4               	movlw	228
  8371  000F9E                     u9047:
  8372  000F9E  2EE8               	decfsz	wreg,f,c
  8373  000FA0  D7FE               	bra	u9047
  8374  000FA2  2FC4               	decfsz	??_UI& (0+255),f,b
  8375  000FA4  D7FC               	bra	u9047
  8376  000FA6  F000               	nop	
  8377  000FA8  0100               	movlb	0	; () banked
  8378  000FAA  2BD0               	incf	UI@i_439& (0+255),f,b
  8379  000FAC  D7EF               	goto	l8721
  8380  000FAE                     l8729:
  8381                           
  8382                           ; BSR set to: 0
  8383  000FAE  0100               	movlb	0	; () banked
  8384  000FB0  51F6               	movf	_logstate& (0+255),w,b
  8385  000FB2  0100               	movlb	0	; () banked
  8386  000FB4  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8387  000FB6  B4D8               	btfsc	status,2,c
  8388  000FB8  0012               	return	
  8389                           
  8390                           ; BSR set to: 0
  8391                           ;UI.c: 188: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8392                           
  8393                           ; BSR set to: 0
  8394                           
  8395                           ; BSR set to: 0
  8396  000FBA  0E00               	movlw	0
  8397  000FBC  0100               	movlb	0	; () banked
  8398  000FBE  6FD1               	movwf	UI@i_440& (0+255),b
  8399  000FC0                     l8735:
  8400                           
  8401                           ; BSR set to: 0
  8402  000FC0  0E63               	movlw	99
  8403  000FC2  0100               	movlb	0	; () banked
  8404  000FC4  65D1               	cpfsgt	UI@i_440& (0+255),b
  8405  000FC6  D001               	goto	l8739
  8406  000FC8  D00C               	goto	l8743
  8407  000FCA                     l8739:
  8408                           
  8409                           ; BSR set to: 0
  8410  000FCA  0E68               	movlw	104
  8411  000FCC  0100               	movlb	0	; () banked
  8412  000FCE  6FC4               	movwf	??_UI& (0+255),b
  8413  000FD0  0EE4               	movlw	228
  8414  000FD2                     u9057:
  8415  000FD2  2EE8               	decfsz	wreg,f,c
  8416  000FD4  D7FE               	bra	u9057
  8417  000FD6  2FC4               	decfsz	??_UI& (0+255),f,b
  8418  000FD8  D7FC               	bra	u9057
  8419  000FDA  F000               	nop	
  8420  000FDC  0100               	movlb	0	; () banked
  8421  000FDE  2BD1               	incf	UI@i_440& (0+255),f,b
  8422  000FE0  D7EF               	goto	l8735
  8423  000FE2                     l8743:
  8424                           
  8425                           ; BSR set to: 0
  8426  000FE2  0100               	movlb	0	; () banked
  8427  000FE4  51F6               	movf	_logstate& (0+255),w,b
  8428  000FE6  0100               	movlb	0	; () banked
  8429  000FE8  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8430  000FEA  B4D8               	btfsc	status,2,c
  8431  000FEC  0012               	return	
  8432                           
  8433                           ; BSR set to: 0
  8434                           ;UI.c: 190: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8435                           
  8436                           ; BSR set to: 0
  8437                           
  8438                           ; BSR set to: 0
  8439  000FEE  0E01               	movlw	1
  8440  000FF0  EC48  F029         	call	_lcdInst
  8441  000FF4  0E68               	movlw	104
  8442  000FF6  0100               	movlb	0	; () banked
  8443  000FF8  6FC4               	movwf	??_UI& (0+255),b
  8444  000FFA  0EE4               	movlw	228
  8445  000FFC                     u9067:
  8446  000FFC  2EE8               	decfsz	wreg,f,c
  8447  000FFE  D7FE               	bra	u9067
  8448  001000  2FC4               	decfsz	??_UI& (0+255),f,b
  8449  001002  D7FC               	bra	u9067
  8450  001004  F000               	nop	
  8451                           
  8452                           ;UI.c: 191: lcdInst(0b10000000);;
  8453  001006  0E80               	movlw	128
  8454  001008  EC48  F029         	call	_lcdInst
  8455                           
  8456                           ;UI.c: 192: printf(" -- SOUP CAN -- ");
  8457  00100C  0E4D               	movlw	low STR_26
  8458  00100E  0100               	movlb	0	; () banked
  8459  001010  6F8E               	movwf	printf@f& (0+255),b
  8460  001012  0EFD               	movlw	high STR_26
  8461  001014  0100               	movlb	0	; () banked
  8462  001016  6F8F               	movwf	(printf@f+1)& (0+255),b
  8463  001018  EC02  F00B         	call	_printf	;wreg free
  8464                           
  8465                           ;UI.c: 193: lcdInst(0b11000000);;
  8466  00101C  0EC0               	movlw	192
  8467  00101E  EC48  F029         	call	_lcdInst
  8468                           
  8469                           ;UI.c: 194: printf("NLAB: %d|LAB: %d", log_count_can_no_lab, log_count_can_w_lab);
  8470  001022  0E08               	movlw	low STR_27
  8471  001024  0100               	movlb	0	; () banked
  8472  001026  6F8E               	movwf	printf@f& (0+255),b
  8473  001028  0EFE               	movlw	high STR_27
  8474  00102A  0100               	movlb	0	; () banked
  8475  00102C  6F8F               	movwf	(printf@f+1)& (0+255),b
  8476  00102E  C065  F090         	movff	_log_count_can_no_lab,?_printf+2
  8477  001032  C066  F091         	movff	_log_count_can_no_lab+1,?_printf+3
  8478  001036  C067  F092         	movff	_log_count_can_w_lab,?_printf+4
  8479  00103A  C068  F093         	movff	_log_count_can_w_lab+1,?_printf+5
  8480  00103E  EC02  F00B         	call	_printf	;wreg free
  8481                           
  8482                           ;UI.c: 196: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8483  001042  0E00               	movlw	0
  8484  001044  0100               	movlb	0	; () banked
  8485  001046  6FD2               	movwf	UI@i_443& (0+255),b
  8486  001048                     l8761:
  8487                           
  8488                           ; BSR set to: 0
  8489  001048  0E63               	movlw	99
  8490  00104A  0100               	movlb	0	; () banked
  8491  00104C  65D2               	cpfsgt	UI@i_443& (0+255),b
  8492  00104E  D001               	goto	l8765
  8493  001050  D00C               	goto	l8769
  8494  001052                     l8765:
  8495                           
  8496                           ; BSR set to: 0
  8497  001052  0E68               	movlw	104
  8498  001054  0100               	movlb	0	; () banked
  8499  001056  6FC4               	movwf	??_UI& (0+255),b
  8500  001058  0EE4               	movlw	228
  8501  00105A                     u9077:
  8502  00105A  2EE8               	decfsz	wreg,f,c
  8503  00105C  D7FE               	bra	u9077
  8504  00105E  2FC4               	decfsz	??_UI& (0+255),f,b
  8505  001060  D7FC               	bra	u9077
  8506  001062  F000               	nop	
  8507  001064  0100               	movlb	0	; () banked
  8508  001066  2BD2               	incf	UI@i_443& (0+255),f,b
  8509  001068  D7EF               	goto	l8761
  8510  00106A                     l8769:
  8511                           
  8512                           ; BSR set to: 0
  8513  00106A  0100               	movlb	0	; () banked
  8514  00106C  51F6               	movf	_logstate& (0+255),w,b
  8515  00106E  0100               	movlb	0	; () banked
  8516  001070  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8517  001072  B4D8               	btfsc	status,2,c
  8518  001074  0012               	return	
  8519                           
  8520                           ; BSR set to: 0
  8521                           ;UI.c: 197: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8522                           
  8523                           ; BSR set to: 0
  8524                           
  8525                           ; BSR set to: 0
  8526  001076  0E00               	movlw	0
  8527  001078  0100               	movlb	0	; () banked
  8528  00107A  6FD3               	movwf	UI@i_444& (0+255),b
  8529  00107C                     l8775:
  8530                           
  8531                           ; BSR set to: 0
  8532  00107C  0E63               	movlw	99
  8533  00107E  0100               	movlb	0	; () banked
  8534  001080  65D3               	cpfsgt	UI@i_444& (0+255),b
  8535  001082  D001               	goto	l8779
  8536  001084  D00C               	goto	l8783
  8537  001086                     l8779:
  8538                           
  8539                           ; BSR set to: 0
  8540  001086  0E68               	movlw	104
  8541  001088  0100               	movlb	0	; () banked
  8542  00108A  6FC4               	movwf	??_UI& (0+255),b
  8543  00108C  0EE4               	movlw	228
  8544  00108E                     u9087:
  8545  00108E  2EE8               	decfsz	wreg,f,c
  8546  001090  D7FE               	bra	u9087
  8547  001092  2FC4               	decfsz	??_UI& (0+255),f,b
  8548  001094  D7FC               	bra	u9087
  8549  001096  F000               	nop	
  8550  001098  0100               	movlb	0	; () banked
  8551  00109A  2BD3               	incf	UI@i_444& (0+255),f,b
  8552  00109C  D7EF               	goto	l8775
  8553  00109E                     l8783:
  8554                           
  8555                           ; BSR set to: 0
  8556  00109E  0100               	movlb	0	; () banked
  8557  0010A0  51F6               	movf	_logstate& (0+255),w,b
  8558  0010A2  0100               	movlb	0	; () banked
  8559  0010A4  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8560  0010A6  B4D8               	btfsc	status,2,c
  8561  0010A8  0012               	return	
  8562                           
  8563                           ; BSR set to: 0
  8564                           ;UI.c: 199: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8565                           
  8566                           ; BSR set to: 0
  8567                           
  8568                           ; BSR set to: 0
  8569  0010AA  0E01               	movlw	1
  8570  0010AC  EC48  F029         	call	_lcdInst
  8571  0010B0  0E68               	movlw	104
  8572  0010B2  0100               	movlb	0	; () banked
  8573  0010B4  6FC4               	movwf	??_UI& (0+255),b
  8574  0010B6  0EE4               	movlw	228
  8575  0010B8                     u9097:
  8576  0010B8  2EE8               	decfsz	wreg,f,c
  8577  0010BA  D7FE               	bra	u9097
  8578  0010BC  2FC4               	decfsz	??_UI& (0+255),f,b
  8579  0010BE  D7FC               	bra	u9097
  8580  0010C0  F000               	nop	
  8581                           
  8582                           ;UI.c: 200: lcdInst(0b10000000);;
  8583  0010C2  0E80               	movlw	128
  8584  0010C4  EC48  F029         	call	_lcdInst
  8585                           
  8586                           ;UI.c: 201: printf("-- TOTAL CANS --");
  8587  0010C8  0E5E               	movlw	low STR_28
  8588  0010CA  0100               	movlb	0	; () banked
  8589  0010CC  6F8E               	movwf	printf@f& (0+255),b
  8590  0010CE  0EFD               	movlw	high STR_28
  8591  0010D0  0100               	movlb	0	; () banked
  8592  0010D2  6F8F               	movwf	(printf@f+1)& (0+255),b
  8593  0010D4  EC02  F00B         	call	_printf	;wreg free
  8594                           
  8595                           ;UI.c: 202: lcdInst(0b11000000);;
  8596  0010D8  0EC0               	movlw	192
  8597  0010DA  EC48  F029         	call	_lcdInst
  8598                           
  8599                           ;UI.c: 203: printf("%d", log_count_total);
  8600  0010DE  0E16               	movlw	low (STR_27+14)
  8601  0010E0  0100               	movlb	0	; () banked
  8602  0010E2  6F8E               	movwf	printf@f& (0+255),b
  8603  0010E4  0EFE               	movlw	high (STR_27+14)
  8604  0010E6  0100               	movlb	0	; () banked
  8605  0010E8  6F8F               	movwf	(printf@f+1)& (0+255),b
  8606  0010EA  C13F  F090         	movff	_log_count_total,?_printf+2
  8607  0010EE  C140  F091         	movff	_log_count_total+1,?_printf+3
  8608  0010F2  EC02  F00B         	call	_printf	;wreg free
  8609                           
  8610                           ;UI.c: 205: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8611  0010F6  0E00               	movlw	0
  8612  0010F8  0100               	movlb	0	; () banked
  8613  0010FA  6FD4               	movwf	UI@i_447& (0+255),b
  8614  0010FC                     l8801:
  8615                           
  8616                           ; BSR set to: 0
  8617  0010FC  0E63               	movlw	99
  8618  0010FE  0100               	movlb	0	; () banked
  8619  001100  65D4               	cpfsgt	UI@i_447& (0+255),b
  8620  001102  D001               	goto	l8805
  8621  001104  D00C               	goto	l8809
  8622  001106                     l8805:
  8623                           
  8624                           ; BSR set to: 0
  8625  001106  0E68               	movlw	104
  8626  001108  0100               	movlb	0	; () banked
  8627  00110A  6FC4               	movwf	??_UI& (0+255),b
  8628  00110C  0EE4               	movlw	228
  8629  00110E                     u9107:
  8630  00110E  2EE8               	decfsz	wreg,f,c
  8631  001110  D7FE               	bra	u9107
  8632  001112  2FC4               	decfsz	??_UI& (0+255),f,b
  8633  001114  D7FC               	bra	u9107
  8634  001116  F000               	nop	
  8635  001118  0100               	movlb	0	; () banked
  8636  00111A  2BD4               	incf	UI@i_447& (0+255),f,b
  8637  00111C  D7EF               	goto	l8801
  8638  00111E                     l8809:
  8639                           
  8640                           ; BSR set to: 0
  8641  00111E  0100               	movlb	0	; () banked
  8642  001120  51F6               	movf	_logstate& (0+255),w,b
  8643  001122  0100               	movlb	0	; () banked
  8644  001124  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8645  001126  B4D8               	btfsc	status,2,c
  8646  001128  0012               	return	
  8647                           
  8648                           ; BSR set to: 0
  8649                           ;UI.c: 206: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8650                           
  8651                           ; BSR set to: 0
  8652                           
  8653                           ; BSR set to: 0
  8654  00112A  0E00               	movlw	0
  8655  00112C  0100               	movlb	0	; () banked
  8656  00112E  6FD5               	movwf	UI@i_448& (0+255),b
  8657  001130                     l8815:
  8658                           
  8659                           ; BSR set to: 0
  8660  001130  0E63               	movlw	99
  8661  001132  0100               	movlb	0	; () banked
  8662  001134  65D5               	cpfsgt	UI@i_448& (0+255),b
  8663  001136  D001               	goto	l8819
  8664  001138  D00C               	goto	l8823
  8665  00113A                     l8819:
  8666                           
  8667                           ; BSR set to: 0
  8668  00113A  0E68               	movlw	104
  8669  00113C  0100               	movlb	0	; () banked
  8670  00113E  6FC4               	movwf	??_UI& (0+255),b
  8671  001140  0EE4               	movlw	228
  8672  001142                     u9117:
  8673  001142  2EE8               	decfsz	wreg,f,c
  8674  001144  D7FE               	bra	u9117
  8675  001146  2FC4               	decfsz	??_UI& (0+255),f,b
  8676  001148  D7FC               	bra	u9117
  8677  00114A  F000               	nop	
  8678  00114C  0100               	movlb	0	; () banked
  8679  00114E  2BD5               	incf	UI@i_448& (0+255),f,b
  8680  001150  D7EF               	goto	l8815
  8681  001152                     l8823:
  8682                           
  8683                           ; BSR set to: 0
  8684  001152  0100               	movlb	0	; () banked
  8685  001154  51F6               	movf	_logstate& (0+255),w,b
  8686  001156  0100               	movlb	0	; () banked
  8687  001158  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8688  00115A  B4D8               	btfsc	status,2,c
  8689  00115C  0012               	return	
  8690  00115E                     l8827:
  8691  00115E  0100               	movlb	0	; () banked
  8692  001160  51F6               	movf	_logstate& (0+255),w,b
  8693  001162  0100               	movlb	0	; () banked
  8694  001164  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8695  001166  B4D8               	btfsc	status,2,c
  8696  001168  0012               	return	
  8697  00116A  D44C               	goto	l8523
  8698  00116C                     __end_of_UI:
  8699                           	opt stack 0
  8700                           tblptru	equ	0xFF8
  8701                           tblptrh	equ	0xFF7
  8702                           tblptrl	equ	0xFF6
  8703                           tablat	equ	0xFF5
  8704                           prodh	equ	0xFF4
  8705                           prodl	equ	0xFF3
  8706                           intcon	equ	0xFF2
  8707                           intcon2	equ	0xFF1
  8708                           intcon3	equ	0xFF0
  8709                           postinc0	equ	0xFEE
  8710                           wreg	equ	0xFE8
  8711                           postdec1	equ	0xFE5
  8712                           fsr1l	equ	0xFE1
  8713                           indf2	equ	0xFDF
  8714                           postinc2	equ	0xFDE
  8715                           postdec2	equ	0xFDD
  8716                           fsr2h	equ	0xFDA
  8717                           fsr2l	equ	0xFD9
  8718                           status	equ	0xFD8
  8719                           
  8720 ;; *************** function _printRTC *****************
  8721 ;; Defined at:
  8722 ;;		line 63 in file "RTC.c"
  8723 ;; Parameters:    Size  Location     Type
  8724 ;;		None
  8725 ;; Auto vars:     Size  Location     Type
  8726 ;;  i               2   66[BANK0 ] int 
  8727 ;;  INT_time       14   46[BANK0 ] int [7]
  8728 ;;  month           4   62[BANK0 ] unsigned char [4]
  8729 ;;  RTC_month       2   60[BANK0 ] int 
  8730 ;; Return value:  Size  Location     Type
  8731 ;;                  1    wreg      void 
  8732 ;; Registers used:
  8733 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8734 ;; Tracked objects:
  8735 ;;		On entry : 0/0
  8736 ;;		On exit  : 0/0
  8737 ;;		Unchanged: 0/0
  8738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8739 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8740 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8741 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8742 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8743 ;;Total ram usage:       25 bytes
  8744 ;; Hardware stack levels used:    1
  8745 ;; Hardware stack levels required when called:   10
  8746 ;; This function calls:
  8747 ;;		_getRTC
  8748 ;;		_lcdInst
  8749 ;;		_printf
  8750 ;;		_strcpy
  8751 ;; This function is called by:
  8752 ;;		_UI
  8753 ;;		_change_state_to_menu_start
  8754 ;; This function uses a non-reentrant model
  8755 ;;
  8756                           
  8757                           	psect	text24
  8758  00242C                     __ptext24:
  8759                           	opt stack 0
  8760  00242C                     _printRTC:
  8761                           	opt stack 18
  8762                           
  8763                           ;RTC.c: 64: getRTC();
  8764                           
  8765                           ; BSR set to: 0
  8766                           ;incstack = 0
  8767  00242C  EC52  F022         	call	_getRTC	;wreg free
  8768                           
  8769                           ;RTC.c: 65: char month[] = "MMM";
  8770  002430  C145  F0BE         	movff	printRTC@F3226,printRTC@month
  8771  002434  C146  F0BF         	movff	printRTC@F3226+1,printRTC@month+1
  8772  002438  C147  F0C0         	movff	printRTC@F3226+2,printRTC@month+2
  8773  00243C  C148  F0C1         	movff	printRTC@F3226+3,printRTC@month+3
  8774                           
  8775                           ;RTC.c: 66: int INT_time[7];
  8776                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
  8777  002440  0E00               	movlw	0
  8778  002442  0100               	movlb	0	; () banked
  8779  002444  6FC3               	movwf	(printRTC@i+1)& (0+255),b
  8780  002446  0E00               	movlw	0
  8781  002448  6FC2               	movwf	printRTC@i& (0+255),b
  8782                           
  8783                           ; BSR set to: 0
  8784  00244A  0100               	movlb	0	; () banked
  8785  00244C  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  8786  00244E  D008               	goto	l6621
  8787  002450  0100               	movlb	0	; () banked
  8788  002452  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  8789  002454  E146               	bnz	l606
  8790  002456  0E07               	movlw	7
  8791  002458  0100               	movlb	0	; () banked
  8792  00245A  5DC2               	subwf	printRTC@i& (0+255),w,b
  8793  00245C  B0D8               	btfsc	status,0,c
  8794  00245E  D041               	goto	l606
  8795  002460                     l6621:
  8796                           
  8797                           ; BSR set to: 0
  8798                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  8799  002460  0E1C               	movlw	low _time
  8800  002462  0100               	movlb	0	; () banked
  8801  002464  25C2               	addwf	printRTC@i& (0+255),w,b
  8802  002466  6ED9               	movwf	fsr2l,c
  8803  002468  0E01               	movlw	high _time
  8804  00246A  0100               	movlb	0	; () banked
  8805  00246C  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  8806  00246E  6EDA               	movwf	fsr2h,c
  8807  002470  50DF               	movf	indf2,w,c
  8808  002472  0100               	movlb	0	; () banked
  8809  002474  6FAB               	movwf	??_printRTC& (0+255),b
  8810  002476  0100               	movlb	0	; () banked
  8811  002478  3BAB               	swapf	??_printRTC& (0+255),f,b
  8812  00247A  0E0F               	movlw	15
  8813  00247C  17AB               	andwf	??_printRTC& (0+255),f,b
  8814  00247E  0E0F               	movlw	15
  8815  002480  0100               	movlb	0	; () banked
  8816  002482  17AB               	andwf	??_printRTC& (0+255),f,b
  8817  002484  0100               	movlb	0	; () banked
  8818  002486  51AB               	movf	??_printRTC& (0+255),w,b
  8819  002488  0D0A               	mullw	10
  8820  00248A  0E1C               	movlw	low _time
  8821  00248C  0100               	movlb	0	; () banked
  8822  00248E  25C2               	addwf	printRTC@i& (0+255),w,b
  8823  002490  6ED9               	movwf	fsr2l,c
  8824  002492  0E01               	movlw	high _time
  8825  002494  0100               	movlb	0	; () banked
  8826  002496  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  8827  002498  6EDA               	movwf	fsr2h,c
  8828  00249A  50DF               	movf	indf2,w,c
  8829  00249C  0B0F               	andlw	15
  8830  00249E  0100               	movlb	0	; () banked
  8831  0024A0  6FAC               	movwf	(??_printRTC+1)& (0+255),b
  8832  0024A2  6BAD               	clrf	(??_printRTC+2)& (0+255),b
  8833  0024A4  50F3               	movf	prodl,w,c
  8834  0024A6  0100               	movlb	0	; () banked
  8835  0024A8  27AC               	addwf	(??_printRTC+1)& (0+255),f,b
  8836  0024AA  50F4               	movf	prodh,w,c
  8837  0024AC  0100               	movlb	0	; () banked
  8838  0024AE  23AD               	addwfc	(??_printRTC+2)& (0+255),f,b
  8839  0024B0  90D8               	bcf	status,0,c
  8840  0024B2  0100               	movlb	0	; () banked
  8841  0024B4  35C2               	rlcf	printRTC@i& (0+255),w,b
  8842  0024B6  6ED9               	movwf	fsr2l,c
  8843  0024B8  0100               	movlb	0	; () banked
  8844  0024BA  35C3               	rlcf	(printRTC@i+1)& (0+255),w,b
  8845  0024BC  6EDA               	movwf	fsr2h,c
  8846  0024BE  0EAE               	movlw	low printRTC@INT_time
  8847  0024C0  26D9               	addwf	fsr2l,f,c
  8848  0024C2  0E00               	movlw	high printRTC@INT_time
  8849  0024C4  22DA               	addwfc	fsr2h,f,c
  8850  0024C6  C0AC  FFDE         	movff	??_printRTC+1,postinc2
  8851  0024CA  C0AD  FFDD         	movff	??_printRTC+2,postdec2
  8852                           
  8853                           ; BSR set to: 0
  8854  0024CE  0100               	movlb	0	; () banked
  8855  0024D0  4BC2               	infsnz	printRTC@i& (0+255),f,b
  8856  0024D2  2BC3               	incf	(printRTC@i+1)& (0+255),f,b
  8857                           
  8858                           ; BSR set to: 0
  8859  0024D4  0100               	movlb	0	; () banked
  8860  0024D6  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  8861  0024D8  D7C3               	goto	l6621
  8862  0024DA  0100               	movlb	0	; () banked
  8863  0024DC  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  8864  0024DE  E101               	bnz	u5200
  8865  0024E0  D7BA               	goto	L9
  8866  0024E2                     u5200:
  8867  0024E2                     l606:
  8868                           
  8869                           ; BSR set to: 0
  8870                           ;RTC.c: 69: }
  8871                           ;RTC.c: 70: int RTC_month = INT_time[5];
  8872  0024E2  C0B8  F0BC         	movff	printRTC@INT_time+10,printRTC@RTC_month
  8873  0024E6  C0B9  F0BD         	movff	printRTC@INT_time+11,printRTC@RTC_month+1
  8874                           
  8875                           ;RTC.c: 71: switch(RTC_month){
  8876  0024EA  D0B4               	goto	l6653
  8877  0024EC                     l6627:
  8878                           
  8879                           ; BSR set to: 0
  8880                           ;RTC.c: 73: strcpy(month, "JAN");
  8881  0024EC  0EBE               	movlw	low printRTC@month
  8882  0024EE  0100               	movlb	0	; () banked
  8883  0024F0  6F80               	movwf	strcpy@to& (0+255),b
  8884  0024F2  0E00               	movlw	high printRTC@month
  8885  0024F4  0100               	movlb	0	; () banked
  8886  0024F6  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8887  0024F8  0EDB               	movlw	low STR_8
  8888  0024FA  0100               	movlb	0	; () banked
  8889  0024FC  6F82               	movwf	strcpy@from& (0+255),b
  8890  0024FE  0EFF               	movlw	high STR_8
  8891  002500  0100               	movlb	0	; () banked
  8892  002502  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8893  002504  ECA3  F026         	call	_strcpy	;wreg free
  8894                           
  8895                           ;RTC.c: 74: break;
  8896  002508  D0D4               	goto	l6655
  8897  00250A                     l6629:
  8898                           
  8899                           ;RTC.c: 76: strcpy(month, "FEB");
  8900  00250A  0EBE               	movlw	low printRTC@month
  8901  00250C  0100               	movlb	0	; () banked
  8902  00250E  6F80               	movwf	strcpy@to& (0+255),b
  8903  002510  0E00               	movlw	high printRTC@month
  8904  002512  0100               	movlb	0	; () banked
  8905  002514  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8906  002516  0ECB               	movlw	low STR_9
  8907  002518  0100               	movlb	0	; () banked
  8908  00251A  6F82               	movwf	strcpy@from& (0+255),b
  8909  00251C  0EFF               	movlw	high STR_9
  8910  00251E  0100               	movlb	0	; () banked
  8911  002520  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8912  002522  ECA3  F026         	call	_strcpy	;wreg free
  8913                           
  8914                           ;RTC.c: 77: break;
  8915  002526  D0C5               	goto	l6655
  8916  002528                     l6631:
  8917                           
  8918                           ;RTC.c: 79: strcpy(month, "MAR");
  8919  002528  0EBE               	movlw	low printRTC@month
  8920  00252A  0100               	movlb	0	; () banked
  8921  00252C  6F80               	movwf	strcpy@to& (0+255),b
  8922  00252E  0E00               	movlw	high printRTC@month
  8923  002530  0100               	movlb	0	; () banked
  8924  002532  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8925  002534  0EE7               	movlw	low STR_10
  8926  002536  0100               	movlb	0	; () banked
  8927  002538  6F82               	movwf	strcpy@from& (0+255),b
  8928  00253A  0EFF               	movlw	high STR_10
  8929  00253C  0100               	movlb	0	; () banked
  8930  00253E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8931  002540  ECA3  F026         	call	_strcpy	;wreg free
  8932                           
  8933                           ;RTC.c: 80: break;
  8934  002544  D0B6               	goto	l6655
  8935  002546                     l6633:
  8936                           
  8937                           ;RTC.c: 82: strcpy(month, "APR");
  8938  002546  0EBE               	movlw	low printRTC@month
  8939  002548  0100               	movlb	0	; () banked
  8940  00254A  6F80               	movwf	strcpy@to& (0+255),b
  8941  00254C  0E00               	movlw	high printRTC@month
  8942  00254E  0100               	movlb	0	; () banked
  8943  002550  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8944  002552  0EEB               	movlw	low STR_11
  8945  002554  0100               	movlb	0	; () banked
  8946  002556  6F82               	movwf	strcpy@from& (0+255),b
  8947  002558  0EFF               	movlw	high STR_11
  8948  00255A  0100               	movlb	0	; () banked
  8949  00255C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8950  00255E  ECA3  F026         	call	_strcpy	;wreg free
  8951                           
  8952                           ;RTC.c: 83: break;
  8953  002562  D0A7               	goto	l6655
  8954  002564                     l6635:
  8955                           
  8956                           ;RTC.c: 85: strcpy(month, "MAY");
  8957  002564  0EBE               	movlw	low printRTC@month
  8958  002566  0100               	movlb	0	; () banked
  8959  002568  6F80               	movwf	strcpy@to& (0+255),b
  8960  00256A  0E00               	movlw	high printRTC@month
  8961  00256C  0100               	movlb	0	; () banked
  8962  00256E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8963  002570  0EFB               	movlw	low STR_12
  8964  002572  0100               	movlb	0	; () banked
  8965  002574  6F82               	movwf	strcpy@from& (0+255),b
  8966  002576  0EFF               	movlw	high STR_12
  8967  002578  0100               	movlb	0	; () banked
  8968  00257A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8969  00257C  ECA3  F026         	call	_strcpy	;wreg free
  8970                           
  8971                           ;RTC.c: 86: break;
  8972  002580  D098               	goto	l6655
  8973  002582                     l6637:
  8974                           
  8975                           ;RTC.c: 88: strcpy(month, "JUN");
  8976  002582  0EBE               	movlw	low printRTC@month
  8977  002584  0100               	movlb	0	; () banked
  8978  002586  6F80               	movwf	strcpy@to& (0+255),b
  8979  002588  0E00               	movlw	high printRTC@month
  8980  00258A  0100               	movlb	0	; () banked
  8981  00258C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8982  00258E  0EDF               	movlw	low STR_13
  8983  002590  0100               	movlb	0	; () banked
  8984  002592  6F82               	movwf	strcpy@from& (0+255),b
  8985  002594  0EFF               	movlw	high STR_13
  8986  002596  0100               	movlb	0	; () banked
  8987  002598  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8988  00259A  ECA3  F026         	call	_strcpy	;wreg free
  8989                           
  8990                           ;RTC.c: 89: break;
  8991  00259E  D089               	goto	l6655
  8992  0025A0                     l6639:
  8993                           
  8994                           ;RTC.c: 91: strcpy(month, "JUL");
  8995  0025A0  0EBE               	movlw	low printRTC@month
  8996  0025A2  0100               	movlb	0	; () banked
  8997  0025A4  6F80               	movwf	strcpy@to& (0+255),b
  8998  0025A6  0E00               	movlw	high printRTC@month
  8999  0025A8  0100               	movlb	0	; () banked
  9000  0025AA  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9001  0025AC  0ED7               	movlw	low STR_14
  9002  0025AE  0100               	movlb	0	; () banked
  9003  0025B0  6F82               	movwf	strcpy@from& (0+255),b
  9004  0025B2  0EFF               	movlw	high STR_14
  9005  0025B4  0100               	movlb	0	; () banked
  9006  0025B6  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9007  0025B8  ECA3  F026         	call	_strcpy	;wreg free
  9008                           
  9009                           ;RTC.c: 92: break;
  9010  0025BC  D07A               	goto	l6655
  9011  0025BE                     l6641:
  9012                           
  9013                           ;RTC.c: 94: strcpy(month, "AUG");
  9014  0025BE  0EBE               	movlw	low printRTC@month
  9015  0025C0  0100               	movlb	0	; () banked
  9016  0025C2  6F80               	movwf	strcpy@to& (0+255),b
  9017  0025C4  0E00               	movlw	high printRTC@month
  9018  0025C6  0100               	movlb	0	; () banked
  9019  0025C8  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9020  0025CA  0ED3               	movlw	low STR_15
  9021  0025CC  0100               	movlb	0	; () banked
  9022  0025CE  6F82               	movwf	strcpy@from& (0+255),b
  9023  0025D0  0EFF               	movlw	high STR_15
  9024  0025D2  0100               	movlb	0	; () banked
  9025  0025D4  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9026  0025D6  ECA3  F026         	call	_strcpy	;wreg free
  9027                           
  9028                           ;RTC.c: 95: break;
  9029  0025DA  D06B               	goto	l6655
  9030  0025DC                     l6643:
  9031                           
  9032                           ;RTC.c: 97: strcpy(month, "SEP");
  9033  0025DC  0EBE               	movlw	low printRTC@month
  9034  0025DE  0100               	movlb	0	; () banked
  9035  0025E0  6F80               	movwf	strcpy@to& (0+255),b
  9036  0025E2  0E00               	movlw	high printRTC@month
  9037  0025E4  0100               	movlb	0	; () banked
  9038  0025E6  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9039  0025E8  0EE3               	movlw	low STR_16
  9040  0025EA  0100               	movlb	0	; () banked
  9041  0025EC  6F82               	movwf	strcpy@from& (0+255),b
  9042  0025EE  0EFF               	movlw	high STR_16
  9043  0025F0  0100               	movlb	0	; () banked
  9044  0025F2  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9045  0025F4  ECA3  F026         	call	_strcpy	;wreg free
  9046                           
  9047                           ;RTC.c: 98: break;
  9048  0025F8  D05C               	goto	l6655
  9049  0025FA                     l6645:
  9050                           
  9051                           ;RTC.c: 100: strcpy(month, "OCT");
  9052  0025FA  0EBE               	movlw	low printRTC@month
  9053  0025FC  0100               	movlb	0	; () banked
  9054  0025FE  6F80               	movwf	strcpy@to& (0+255),b
  9055  002600  0E00               	movlw	high printRTC@month
  9056  002602  0100               	movlb	0	; () banked
  9057  002604  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9058  002606  0EF3               	movlw	low STR_17
  9059  002608  0100               	movlb	0	; () banked
  9060  00260A  6F82               	movwf	strcpy@from& (0+255),b
  9061  00260C  0EFF               	movlw	high STR_17
  9062  00260E  0100               	movlb	0	; () banked
  9063  002610  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9064  002612  ECA3  F026         	call	_strcpy	;wreg free
  9065                           
  9066                           ;RTC.c: 101: break;
  9067  002616  D04D               	goto	l6655
  9068  002618                     l6647:
  9069                           
  9070                           ;RTC.c: 103: strcpy(month, "NOV");
  9071  002618  0EBE               	movlw	low printRTC@month
  9072  00261A  0100               	movlb	0	; () banked
  9073  00261C  6F80               	movwf	strcpy@to& (0+255),b
  9074  00261E  0E00               	movlw	high printRTC@month
  9075  002620  0100               	movlb	0	; () banked
  9076  002622  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9077  002624  0EF7               	movlw	low STR_18
  9078  002626  0100               	movlb	0	; () banked
  9079  002628  6F82               	movwf	strcpy@from& (0+255),b
  9080  00262A  0EFF               	movlw	high STR_18
  9081  00262C  0100               	movlb	0	; () banked
  9082  00262E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9083  002630  ECA3  F026         	call	_strcpy	;wreg free
  9084                           
  9085                           ;RTC.c: 104: break;
  9086  002634  D03E               	goto	l6655
  9087  002636                     l6649:
  9088                           
  9089                           ;RTC.c: 106: strcpy(month, "DEC");
  9090  002636  0EBE               	movlw	low printRTC@month
  9091  002638  0100               	movlb	0	; () banked
  9092  00263A  6F80               	movwf	strcpy@to& (0+255),b
  9093  00263C  0E00               	movlw	high printRTC@month
  9094  00263E  0100               	movlb	0	; () banked
  9095  002640  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9096  002642  0ECF               	movlw	low STR_19
  9097  002644  0100               	movlb	0	; () banked
  9098  002646  6F82               	movwf	strcpy@from& (0+255),b
  9099  002648  0EFF               	movlw	high STR_19
  9100  00264A  0100               	movlb	0	; () banked
  9101  00264C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9102  00264E  ECA3  F026         	call	_strcpy	;wreg free
  9103                           
  9104                           ;RTC.c: 108: }
  9105                           
  9106                           ;RTC.c: 107: break;
  9107  002652  D02F               	goto	l6655
  9108  002654                     l6653:
  9109  002654  C0BC  F0AB         	movff	printRTC@RTC_month,??_printRTC
  9110  002658  C0BD  F0AC         	movff	printRTC@RTC_month+1,??_printRTC+1
  9111                           
  9112                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9113                           ; Switch size 1, requested type "space"
  9114                           ; Number of cases is 1, Range of values is 0 to 0
  9115                           ; switch strategies available:
  9116                           ; Name         Instructions Cycles
  9117                           ; simple_byte            4     3 (average)
  9118                           ;	Chosen strategy is simple_byte
  9119  00265C  0100               	movlb	0	; () banked
  9120  00265E  51AC               	movf	(??_printRTC+1)& (0+255),w,b
  9121  002660  0A00               	xorlw	0	; case 0
  9122  002662  A4D8               	btfss	status,2,c
  9123  002664  D026               	goto	l6655
  9124                           
  9125                           ; BSR set to: 0
  9126                           ; Switch size 1, requested type "space"
  9127                           ; Number of cases is 12, Range of values is 1 to 12
  9128                           ; switch strategies available:
  9129                           ; Name         Instructions Cycles
  9130                           ; simple_byte           37    19 (average)
  9131                           ;	Chosen strategy is simple_byte
  9132  002666  0100               	movlb	0	; () banked
  9133  002668  51AB               	movf	??_printRTC& (0+255),w,b
  9134  00266A  0A01               	xorlw	1	; case 1
  9135  00266C  B4D8               	btfsc	status,2,c
  9136  00266E  D73E               	goto	l6627
  9137  002670  0A03               	xorlw	3	; case 2
  9138  002672  B4D8               	btfsc	status,2,c
  9139  002674  D74A               	goto	l6629
  9140  002676  0A01               	xorlw	1	; case 3
  9141  002678  B4D8               	btfsc	status,2,c
  9142  00267A  D756               	goto	l6631
  9143  00267C  0A07               	xorlw	7	; case 4
  9144  00267E  B4D8               	btfsc	status,2,c
  9145  002680  D762               	goto	l6633
  9146  002682  0A01               	xorlw	1	; case 5
  9147  002684  B4D8               	btfsc	status,2,c
  9148  002686  D76E               	goto	l6635
  9149  002688  0A03               	xorlw	3	; case 6
  9150  00268A  B4D8               	btfsc	status,2,c
  9151  00268C  D77A               	goto	l6637
  9152  00268E  0A01               	xorlw	1	; case 7
  9153  002690  B4D8               	btfsc	status,2,c
  9154  002692  D786               	goto	l6639
  9155  002694  0A0F               	xorlw	15	; case 8
  9156  002696  B4D8               	btfsc	status,2,c
  9157  002698  D792               	goto	l6641
  9158  00269A  0A01               	xorlw	1	; case 9
  9159  00269C  B4D8               	btfsc	status,2,c
  9160  00269E  D79E               	goto	l6643
  9161  0026A0  0A03               	xorlw	3	; case 10
  9162  0026A2  B4D8               	btfsc	status,2,c
  9163  0026A4  D7AA               	goto	l6645
  9164  0026A6  0A01               	xorlw	1	; case 11
  9165  0026A8  B4D8               	btfsc	status,2,c
  9166  0026AA  D7B6               	goto	l6647
  9167  0026AC  0A07               	xorlw	7	; case 12
  9168  0026AE  B4D8               	btfsc	status,2,c
  9169  0026B0  D7C2               	goto	l6649
  9170  0026B2                     l6655:
  9171                           
  9172                           ;RTC.c: 109: lcdInst(0b10000000);;
  9173  0026B2  0E80               	movlw	128
  9174  0026B4  EC48  F029         	call	_lcdInst
  9175                           
  9176                           ;RTC.c: 110: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
  9177  0026B8  0E0A               	movlw	low STR_21
  9178  0026BA  0100               	movlb	0	; () banked
  9179  0026BC  6F8E               	movwf	printf@f& (0+255),b
  9180  0026BE  0EFB               	movlw	high STR_21
  9181  0026C0  0100               	movlb	0	; () banked
  9182  0026C2  6F8F               	movwf	(printf@f+1)& (0+255),b
  9183  0026C4  C0B6  F090         	movff	printRTC@INT_time+8,?_printf+2
  9184  0026C8  C0B7  F091         	movff	printRTC@INT_time+9,?_printf+3
  9185  0026CC  0EBE               	movlw	low printRTC@month
  9186  0026CE  0100               	movlb	0	; () banked
  9187  0026D0  6F92               	movwf	(?_printf+4)& (0+255),b
  9188  0026D2  0E00               	movlw	high printRTC@month
  9189  0026D4  0100               	movlb	0	; () banked
  9190  0026D6  6F93               	movwf	(?_printf+5)& (0+255),b
  9191  0026D8  C0B2  F094         	movff	printRTC@INT_time+4,?_printf+6
  9192  0026DC  C0B3  F095         	movff	printRTC@INT_time+5,?_printf+7
  9193  0026E0  C0B0  F096         	movff	printRTC@INT_time+2,?_printf+8
  9194  0026E4  C0B1  F097         	movff	printRTC@INT_time+3,?_printf+9
  9195  0026E8  C0AE  F098         	movff	printRTC@INT_time,?_printf+10
  9196  0026EC  C0AF  F099         	movff	printRTC@INT_time+1,?_printf+11
  9197  0026F0  EC02  F00B         	call	_printf	;wreg free
  9198  0026F4  0012               	return		;funcret
  9199  0026F6                     __end_of_printRTC:
  9200                           	opt stack 0
  9201                           tblptru	equ	0xFF8
  9202                           tblptrh	equ	0xFF7
  9203                           tblptrl	equ	0xFF6
  9204                           tablat	equ	0xFF5
  9205                           prodh	equ	0xFF4
  9206                           prodl	equ	0xFF3
  9207                           intcon	equ	0xFF2
  9208                           intcon2	equ	0xFF1
  9209                           intcon3	equ	0xFF0
  9210                           postinc0	equ	0xFEE
  9211                           wreg	equ	0xFE8
  9212                           postdec1	equ	0xFE5
  9213                           fsr1l	equ	0xFE1
  9214                           indf2	equ	0xFDF
  9215                           postinc2	equ	0xFDE
  9216                           postdec2	equ	0xFDD
  9217                           fsr2h	equ	0xFDA
  9218                           fsr2l	equ	0xFD9
  9219                           status	equ	0xFD8
  9220                           
  9221 ;; *************** function _strcpy *****************
  9222 ;; Defined at:
  9223 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
  9224 ;; Parameters:    Size  Location     Type
  9225 ;;  to              2    0[BANK0 ] PTR unsigned char 
  9226 ;;		 -> printRTC@month(4), UI@month(4), 
  9227 ;;  from            2    2[BANK0 ] PTR const unsigned char 
  9228 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
  9229 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
  9230 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
  9231 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
  9232 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
  9233 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
  9234 ;;		 -> STR_8(4), 
  9235 ;; Auto vars:     Size  Location     Type
  9236 ;;  cp              2    4[BANK0 ] PTR unsigned char 
  9237 ;;		 -> printRTC@month(4), UI@month(4), 
  9238 ;; Return value:  Size  Location     Type
  9239 ;;                  2    0[BANK0 ] PTR unsigned char 
  9240 ;; Registers used:
  9241 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  9242 ;; Tracked objects:
  9243 ;;		On entry : 0/0
  9244 ;;		On exit  : 0/0
  9245 ;;		Unchanged: 0/0
  9246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9247 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9248 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9249 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9250 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9251 ;;Total ram usage:        6 bytes
  9252 ;; Hardware stack levels used:    1
  9253 ;; Hardware stack levels required when called:    7
  9254 ;; This function calls:
  9255 ;;		Nothing
  9256 ;; This function is called by:
  9257 ;;		_UI
  9258 ;;		_printRTC
  9259 ;; This function uses a non-reentrant model
  9260 ;;
  9261                           
  9262                           	psect	text25
  9263  004D46                     __ptext25:
  9264                           	opt stack 0
  9265  004D46                     _strcpy:
  9266                           	opt stack 20
  9267                           
  9268                           ;incstack = 0
  9269  004D46  C080  F084         	movff	strcpy@to,strcpy@cp
  9270  004D4A  C081  F085         	movff	strcpy@to+1,strcpy@cp+1
  9271  004D4E  D006               	goto	l6361
  9272  004D50                     l6359:
  9273  004D50  0100               	movlb	0	; () banked
  9274  004D52  4B84               	infsnz	strcpy@cp& (0+255),f,b
  9275  004D54  2B85               	incf	(strcpy@cp+1)& (0+255),f,b
  9276  004D56  0100               	movlb	0	; () banked
  9277  004D58  4B82               	infsnz	strcpy@from& (0+255),f,b
  9278  004D5A  2B83               	incf	(strcpy@from+1)& (0+255),f,b
  9279  004D5C                     l6361:
  9280  004D5C  C082  FFF6         	movff	strcpy@from,tblptrl
  9281  004D60  C083  FFF7         	movff	strcpy@from+1,tblptrh
  9282  004D64                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  9283  004D64  6AF8               	clrf	tblptru,c
  9284  004D66                     	endif
  9285  004D66                     	if	0	;tblptru may be non-zero
  9286  004D66                     	endif
  9287  004D66  C084  FFD9         	movff	strcpy@cp,fsr2l
  9288  004D6A  C085  FFDA         	movff	strcpy@cp+1,fsr2h
  9289  004D6E  0008               	tblrd		*
  9290  004D70  CFF5 FFDF          	movff	tablat,indf2
  9291  004D74  50DF               	movf	indf2,w,c
  9292  004D76  B4D8               	btfsc	status,2,c
  9293  004D78  0012               	return	
  9294  004D7A  D7EA               	goto	l6359
  9295  004D7C                     __end_of_strcpy:
  9296                           	opt stack 0
  9297                           tblptru	equ	0xFF8
  9298                           tblptrh	equ	0xFF7
  9299                           tblptrl	equ	0xFF6
  9300                           tablat	equ	0xFF5
  9301                           prodh	equ	0xFF4
  9302                           prodl	equ	0xFF3
  9303                           intcon	equ	0xFF2
  9304                           intcon2	equ	0xFF1
  9305                           intcon3	equ	0xFF0
  9306                           postinc0	equ	0xFEE
  9307                           wreg	equ	0xFE8
  9308                           postdec1	equ	0xFE5
  9309                           fsr1l	equ	0xFE1
  9310                           indf2	equ	0xFDF
  9311                           postinc2	equ	0xFDE
  9312                           postdec2	equ	0xFDD
  9313                           fsr2h	equ	0xFDA
  9314                           fsr2l	equ	0xFD9
  9315                           status	equ	0xFD8
  9316                           
  9317 ;; *************** function _getRTC *****************
  9318 ;; Defined at:
  9319 ;;		line 44 in file "RTC.c"
  9320 ;; Parameters:    Size  Location     Type
  9321 ;;		None
  9322 ;; Auto vars:     Size  Location     Type
  9323 ;;  i               2    3[BANK0 ] int 
  9324 ;; Return value:  Size  Location     Type
  9325 ;;                  1    wreg      void 
  9326 ;; Registers used:
  9327 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9328 ;; Tracked objects:
  9329 ;;		On entry : 0/0
  9330 ;;		On exit  : 0/0
  9331 ;;		Unchanged: 0/0
  9332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9333 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9334 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9335 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9336 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9337 ;;Total ram usage:        2 bytes
  9338 ;; Hardware stack levels used:    1
  9339 ;; Hardware stack levels required when called:    9
  9340 ;; This function calls:
  9341 ;;		_I2C_Master_Read
  9342 ;;		_I2C_Master_Start
  9343 ;;		_I2C_Master_Stop
  9344 ;;		_I2C_Master_Write
  9345 ;; This function is called by:
  9346 ;;		_printRTC
  9347 ;;		_initSortTimer
  9348 ;; This function uses a non-reentrant model
  9349 ;;
  9350                           
  9351                           	psect	text26
  9352  0044A4                     __ptext26:
  9353                           	opt stack 0
  9354  0044A4                     _getRTC:
  9355                           	opt stack 18
  9356                           
  9357                           ;RTC.c: 48: I2C_Master_Start();
  9358                           
  9359                           ;incstack = 0
  9360  0044A4  EC6E  F029         	call	_I2C_Master_Start	;wreg free
  9361                           
  9362                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
  9363  0044A8  0E00               	movlw	0
  9364  0044AA  0100               	movlb	0	; () banked
  9365  0044AC  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9366  0044AE  0ED0               	movlw	208
  9367  0044B0  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9368  0044B2  EC5C  F029         	call	_I2C_Master_Write	;wreg free
  9369                           
  9370                           ;RTC.c: 50: I2C_Master_Write(0x00);
  9371  0044B6  0E00               	movlw	0
  9372  0044B8  0100               	movlb	0	; () banked
  9373  0044BA  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9374  0044BC  0E00               	movlw	0
  9375  0044BE  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9376  0044C0  EC5C  F029         	call	_I2C_Master_Write	;wreg free
  9377                           
  9378                           ;RTC.c: 51: I2C_Master_Stop();
  9379  0044C4  EC6A  F029         	call	_I2C_Master_Stop	;wreg free
  9380                           
  9381                           ;RTC.c: 54: I2C_Master_Start();
  9382  0044C8  EC6E  F029         	call	_I2C_Master_Start	;wreg free
  9383                           
  9384                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
  9385  0044CC  0E00               	movlw	0
  9386  0044CE  0100               	movlb	0	; () banked
  9387  0044D0  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9388  0044D2  0ED1               	movlw	209
  9389  0044D4  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9390  0044D6  EC5C  F029         	call	_I2C_Master_Write	;wreg free
  9391                           
  9392                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
  9393  0044DA  0E00               	movlw	0
  9394  0044DC  0100               	movlb	0	; () banked
  9395  0044DE  6F84               	movwf	(getRTC@i+1)& (0+255),b
  9396  0044E0  0E00               	movlw	0
  9397  0044E2  6F83               	movwf	getRTC@i& (0+255),b
  9398  0044E4                     l6367:
  9399                           
  9400                           ; BSR set to: 0
  9401  0044E4  0100               	movlb	0	; () banked
  9402  0044E6  BF84               	btfsc	(getRTC@i+1)& (0+255),7,b
  9403  0044E8  D008               	goto	l6371
  9404  0044EA  0100               	movlb	0	; () banked
  9405  0044EC  5184               	movf	(getRTC@i+1)& (0+255),w,b
  9406  0044EE  E115               	bnz	l6377
  9407  0044F0  0E06               	movlw	6
  9408  0044F2  0100               	movlb	0	; () banked
  9409  0044F4  5D83               	subwf	getRTC@i& (0+255),w,b
  9410  0044F6  B0D8               	btfsc	status,0,c
  9411  0044F8  D010               	goto	l6377
  9412  0044FA                     l6371:
  9413                           
  9414                           ; BSR set to: 0
  9415                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
  9416  0044FA  0E1C               	movlw	low _time
  9417  0044FC  0100               	movlb	0	; () banked
  9418  0044FE  2583               	addwf	getRTC@i& (0+255),w,b
  9419  004500  6ED9               	movwf	fsr2l,c
  9420  004502  0E01               	movlw	high _time
  9421  004504  0100               	movlb	0	; () banked
  9422  004506  2184               	addwfc	(getRTC@i+1)& (0+255),w,b
  9423  004508  6EDA               	movwf	fsr2h,c
  9424  00450A  0E01               	movlw	1
  9425  00450C  ECFB  F027         	call	_I2C_Master_Read
  9426  004510  6EDF               	movwf	indf2,c
  9427  004512  0100               	movlb	0	; () banked
  9428  004514  4B83               	infsnz	getRTC@i& (0+255),f,b
  9429  004516  2B84               	incf	(getRTC@i+1)& (0+255),f,b
  9430  004518  D7E5               	goto	l6367
  9431  00451A                     l6377:
  9432                           
  9433                           ; BSR set to: 0
  9434                           ;RTC.c: 58: }
  9435                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
  9436  00451A  0E00               	movlw	0
  9437  00451C  ECFB  F027         	call	_I2C_Master_Read
  9438  004520  0101               	movlb	1	; () banked
  9439  004522  6F22               	movwf	(_time+6)& (0+255),b
  9440                           
  9441                           ;RTC.c: 60: I2C_Master_Stop();
  9442  004524  EC6A  F029         	call	_I2C_Master_Stop	;wreg free
  9443  004528  0012               	return		;funcret
  9444  00452A                     __end_of_getRTC:
  9445                           	opt stack 0
  9446                           tblptru	equ	0xFF8
  9447                           tblptrh	equ	0xFF7
  9448                           tblptrl	equ	0xFF6
  9449                           tablat	equ	0xFF5
  9450                           prodh	equ	0xFF4
  9451                           prodl	equ	0xFF3
  9452                           intcon	equ	0xFF2
  9453                           intcon2	equ	0xFF1
  9454                           intcon3	equ	0xFF0
  9455                           postinc0	equ	0xFEE
  9456                           wreg	equ	0xFE8
  9457                           postdec1	equ	0xFE5
  9458                           fsr1l	equ	0xFE1
  9459                           indf2	equ	0xFDF
  9460                           postinc2	equ	0xFDE
  9461                           postdec2	equ	0xFDD
  9462                           fsr2h	equ	0xFDA
  9463                           fsr2l	equ	0xFD9
  9464                           status	equ	0xFD8
  9465                           
  9466 ;; *************** function _I2C_Master_Write *****************
  9467 ;; Defined at:
  9468 ;;		line 49 in file "I2C.c"
  9469 ;; Parameters:    Size  Location     Type
  9470 ;;  d               2    1[BANK0 ] unsigned int 
  9471 ;; Auto vars:     Size  Location     Type
  9472 ;;		None
  9473 ;; Return value:  Size  Location     Type
  9474 ;;                  1    wreg      void 
  9475 ;; Registers used:
  9476 ;;		wreg, status,2, status,0, cstack
  9477 ;; Tracked objects:
  9478 ;;		On entry : 0/0
  9479 ;;		On exit  : 0/0
  9480 ;;		Unchanged: 0/0
  9481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9482 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9483 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9484 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9485 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9486 ;;Total ram usage:        2 bytes
  9487 ;; Hardware stack levels used:    1
  9488 ;; Hardware stack levels required when called:    8
  9489 ;; This function calls:
  9490 ;;		_I2C_Master_Wait
  9491 ;; This function is called by:
  9492 ;;		_loadRTC
  9493 ;;		_getRTC
  9494 ;; This function uses a non-reentrant model
  9495 ;;
  9496                           
  9497                           	psect	text27
  9498  0052B8                     __ptext27:
  9499                           	opt stack 0
  9500  0052B8                     _I2C_Master_Write:
  9501                           	opt stack 18
  9502                           
  9503                           ;I2C.c: 51: I2C_Master_Wait();
  9504                           
  9505                           ;incstack = 0
  9506  0052B8  EC2D  F029         	call	_I2C_Master_Wait	;wreg free
  9507                           
  9508                           ;I2C.c: 52: SSPBUF = d;
  9509  0052BC  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  9510  0052C0  0012               	return		;funcret
  9511  0052C2                     __end_of_I2C_Master_Write:
  9512                           	opt stack 0
  9513                           tblptru	equ	0xFF8
  9514                           tblptrh	equ	0xFF7
  9515                           tblptrl	equ	0xFF6
  9516                           tablat	equ	0xFF5
  9517                           prodh	equ	0xFF4
  9518                           prodl	equ	0xFF3
  9519                           intcon	equ	0xFF2
  9520                           intcon2	equ	0xFF1
  9521                           intcon3	equ	0xFF0
  9522                           postinc0	equ	0xFEE
  9523                           wreg	equ	0xFE8
  9524                           postdec1	equ	0xFE5
  9525                           fsr1l	equ	0xFE1
  9526                           indf2	equ	0xFDF
  9527                           postinc2	equ	0xFDE
  9528                           postdec2	equ	0xFDD
  9529                           fsr2h	equ	0xFDA
  9530                           fsr2l	equ	0xFD9
  9531                           status	equ	0xFD8
  9532                           
  9533 ;; *************** function _I2C_Master_Stop *****************
  9534 ;; Defined at:
  9535 ;;		line 43 in file "I2C.c"
  9536 ;; Parameters:    Size  Location     Type
  9537 ;;		None
  9538 ;; Auto vars:     Size  Location     Type
  9539 ;;		None
  9540 ;; Return value:  Size  Location     Type
  9541 ;;                  1    wreg      void 
  9542 ;; Registers used:
  9543 ;;		wreg, status,2, status,0, cstack
  9544 ;; Tracked objects:
  9545 ;;		On entry : 0/0
  9546 ;;		On exit  : 0/0
  9547 ;;		Unchanged: 0/0
  9548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9549 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9550 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9551 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9552 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9553 ;;Total ram usage:        0 bytes
  9554 ;; Hardware stack levels used:    1
  9555 ;; Hardware stack levels required when called:    8
  9556 ;; This function calls:
  9557 ;;		_I2C_Master_Wait
  9558 ;; This function is called by:
  9559 ;;		_loadRTC
  9560 ;;		_getRTC
  9561 ;; This function uses a non-reentrant model
  9562 ;;
  9563                           
  9564                           	psect	text28
  9565  0052D4                     __ptext28:
  9566                           	opt stack 0
  9567  0052D4                     _I2C_Master_Stop:
  9568                           	opt stack 18
  9569                           
  9570                           ;I2C.c: 45: I2C_Master_Wait();
  9571                           
  9572                           ;incstack = 0
  9573  0052D4  EC2D  F029         	call	_I2C_Master_Wait	;wreg free
  9574                           
  9575                           ;I2C.c: 46: PEN = 1;
  9576  0052D8  84C5               	bsf	4037,2,c	;volatile
  9577  0052DA  0012               	return		;funcret
  9578  0052DC                     __end_of_I2C_Master_Stop:
  9579                           	opt stack 0
  9580                           tblptru	equ	0xFF8
  9581                           tblptrh	equ	0xFF7
  9582                           tblptrl	equ	0xFF6
  9583                           tablat	equ	0xFF5
  9584                           prodh	equ	0xFF4
  9585                           prodl	equ	0xFF3
  9586                           intcon	equ	0xFF2
  9587                           intcon2	equ	0xFF1
  9588                           intcon3	equ	0xFF0
  9589                           postinc0	equ	0xFEE
  9590                           wreg	equ	0xFE8
  9591                           postdec1	equ	0xFE5
  9592                           fsr1l	equ	0xFE1
  9593                           indf2	equ	0xFDF
  9594                           postinc2	equ	0xFDE
  9595                           postdec2	equ	0xFDD
  9596                           fsr2h	equ	0xFDA
  9597                           fsr2l	equ	0xFD9
  9598                           status	equ	0xFD8
  9599                           
  9600 ;; *************** function _I2C_Master_Start *****************
  9601 ;; Defined at:
  9602 ;;		line 31 in file "I2C.c"
  9603 ;; Parameters:    Size  Location     Type
  9604 ;;		None
  9605 ;; Auto vars:     Size  Location     Type
  9606 ;;		None
  9607 ;; Return value:  Size  Location     Type
  9608 ;;                  1    wreg      void 
  9609 ;; Registers used:
  9610 ;;		wreg, status,2, status,0, cstack
  9611 ;; Tracked objects:
  9612 ;;		On entry : 0/0
  9613 ;;		On exit  : 0/0
  9614 ;;		Unchanged: 0/0
  9615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9616 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9617 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9618 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9619 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9620 ;;Total ram usage:        0 bytes
  9621 ;; Hardware stack levels used:    1
  9622 ;; Hardware stack levels required when called:    8
  9623 ;; This function calls:
  9624 ;;		_I2C_Master_Wait
  9625 ;; This function is called by:
  9626 ;;		_loadRTC
  9627 ;;		_getRTC
  9628 ;; This function uses a non-reentrant model
  9629 ;;
  9630                           
  9631                           	psect	text29
  9632  0052DC                     __ptext29:
  9633                           	opt stack 0
  9634  0052DC                     _I2C_Master_Start:
  9635                           	opt stack 18
  9636                           
  9637                           ;I2C.c: 33: I2C_Master_Wait();
  9638                           
  9639                           ;incstack = 0
  9640  0052DC  EC2D  F029         	call	_I2C_Master_Wait	;wreg free
  9641                           
  9642                           ;I2C.c: 34: SEN = 1;
  9643  0052E0  80C5               	bsf	4037,0,c	;volatile
  9644  0052E2  0012               	return		;funcret
  9645  0052E4                     __end_of_I2C_Master_Start:
  9646                           	opt stack 0
  9647                           tblptru	equ	0xFF8
  9648                           tblptrh	equ	0xFF7
  9649                           tblptrl	equ	0xFF6
  9650                           tablat	equ	0xFF5
  9651                           prodh	equ	0xFF4
  9652                           prodl	equ	0xFF3
  9653                           intcon	equ	0xFF2
  9654                           intcon2	equ	0xFF1
  9655                           intcon3	equ	0xFF0
  9656                           postinc0	equ	0xFEE
  9657                           wreg	equ	0xFE8
  9658                           postdec1	equ	0xFE5
  9659                           fsr1l	equ	0xFE1
  9660                           indf2	equ	0xFDF
  9661                           postinc2	equ	0xFDE
  9662                           postdec2	equ	0xFDD
  9663                           fsr2h	equ	0xFDA
  9664                           fsr2l	equ	0xFD9
  9665                           status	equ	0xFD8
  9666                           
  9667 ;; *************** function _I2C_Master_Read *****************
  9668 ;; Defined at:
  9669 ;;		line 55 in file "I2C.c"
  9670 ;; Parameters:    Size  Location     Type
  9671 ;;  a               1    wreg     unsigned char 
  9672 ;; Auto vars:     Size  Location     Type
  9673 ;;  a               1    1[BANK0 ] unsigned char 
  9674 ;;  temp            1    2[BANK0 ] unsigned char 
  9675 ;; Return value:  Size  Location     Type
  9676 ;;                  1    wreg      unsigned char 
  9677 ;; Registers used:
  9678 ;;		wreg, status,2, status,0, cstack
  9679 ;; Tracked objects:
  9680 ;;		On entry : 0/0
  9681 ;;		On exit  : 0/0
  9682 ;;		Unchanged: 0/0
  9683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9684 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9685 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9686 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9687 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9688 ;;Total ram usage:        2 bytes
  9689 ;; Hardware stack levels used:    1
  9690 ;; Hardware stack levels required when called:    8
  9691 ;; This function calls:
  9692 ;;		_I2C_Master_Wait
  9693 ;; This function is called by:
  9694 ;;		_getRTC
  9695 ;; This function uses a non-reentrant model
  9696 ;;
  9697                           
  9698                           	psect	text30
  9699  004FF6                     __ptext30:
  9700                           	opt stack 0
  9701  004FF6                     _I2C_Master_Read:
  9702                           	opt stack 18
  9703                           
  9704                           ;incstack = 0
  9705                           ;I2C_Master_Read@a stored from wreg
  9706  004FF6  0100               	movlb	0	; () banked
  9707  004FF8  6F81               	movwf	I2C_Master_Read@a& (0+255),b
  9708                           
  9709                           ;I2C.c: 57: unsigned char temp;
  9710                           ;I2C.c: 58: I2C_Master_Wait();
  9711  004FFA  EC2D  F029         	call	_I2C_Master_Wait	;wreg free
  9712                           
  9713                           ;I2C.c: 59: RCEN = 1;
  9714  004FFE  86C5               	bsf	4037,3,c	;volatile
  9715                           
  9716                           ;I2C.c: 60: I2C_Master_Wait();
  9717  005000  EC2D  F029         	call	_I2C_Master_Wait	;wreg free
  9718                           
  9719                           ;I2C.c: 61: temp = SSPBUF;
  9720  005004  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
  9721                           
  9722                           ;I2C.c: 62: I2C_Master_Wait();
  9723  005008  EC2D  F029         	call	_I2C_Master_Wait	;wreg free
  9724                           
  9725                           ;I2C.c: 63: ACKDT = (a)?0:1;
  9726  00500C  0100               	movlb	0	; () banked
  9727  00500E  5181               	movf	I2C_Master_Read@a& (0+255),w,b
  9728  005010  0100               	movlb	0	; () banked
  9729  005012  A4D8               	btfss	status,2,c
  9730  005014  D002               	goto	u4290
  9731  005016  8AC5               	bsf	4037,5,c	;volatile
  9732  005018  D001               	goto	l6055
  9733  00501A                     u4290:
  9734  00501A  9AC5               	bcf	4037,5,c	;volatile
  9735  00501C                     l6055:
  9736                           
  9737                           ;I2C.c: 64: ACKEN = 1;
  9738  00501C  88C5               	bsf	4037,4,c	;volatile
  9739                           
  9740                           ;I2C.c: 65: return temp;
  9741  00501E  0100               	movlb	0	; () banked
  9742  005020  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
  9743  005022  0012               	return	
  9744  005024                     __end_of_I2C_Master_Read:
  9745                           	opt stack 0
  9746                           tblptru	equ	0xFF8
  9747                           tblptrh	equ	0xFF7
  9748                           tblptrl	equ	0xFF6
  9749                           tablat	equ	0xFF5
  9750                           prodh	equ	0xFF4
  9751                           prodl	equ	0xFF3
  9752                           intcon	equ	0xFF2
  9753                           intcon2	equ	0xFF1
  9754                           intcon3	equ	0xFF0
  9755                           postinc0	equ	0xFEE
  9756                           wreg	equ	0xFE8
  9757                           postdec1	equ	0xFE5
  9758                           fsr1l	equ	0xFE1
  9759                           indf2	equ	0xFDF
  9760                           postinc2	equ	0xFDE
  9761                           postdec2	equ	0xFDD
  9762                           fsr2h	equ	0xFDA
  9763                           fsr2l	equ	0xFD9
  9764                           status	equ	0xFD8
  9765                           
  9766 ;; *************** function _I2C_Master_Wait *****************
  9767 ;; Defined at:
  9768 ;;		line 26 in file "I2C.c"
  9769 ;; Parameters:    Size  Location     Type
  9770 ;;		None
  9771 ;; Auto vars:     Size  Location     Type
  9772 ;;		None
  9773 ;; Return value:  Size  Location     Type
  9774 ;;                  1    wreg      void 
  9775 ;; Registers used:
  9776 ;;		wreg, status,2, status,0
  9777 ;; Tracked objects:
  9778 ;;		On entry : 0/0
  9779 ;;		On exit  : 0/0
  9780 ;;		Unchanged: 0/0
  9781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9782 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9783 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9784 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9785 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9786 ;;Total ram usage:        1 bytes
  9787 ;; Hardware stack levels used:    1
  9788 ;; Hardware stack levels required when called:    7
  9789 ;; This function calls:
  9790 ;;		Nothing
  9791 ;; This function is called by:
  9792 ;;		_I2C_Master_Start
  9793 ;;		_I2C_Master_Stop
  9794 ;;		_I2C_Master_Write
  9795 ;;		_I2C_Master_Read
  9796 ;;		_I2C_Master_RepeatedStart
  9797 ;; This function uses a non-reentrant model
  9798 ;;
  9799                           
  9800                           	psect	text31
  9801  00525A                     __ptext31:
  9802                           	opt stack 0
  9803  00525A                     _I2C_Master_Wait:
  9804                           	opt stack 18
  9805  00525A                     l66:
  9806  00525A  B4C7               	btfsc	4039,2,c	;volatile
  9807  00525C  D7FE               	goto	l66
  9808  00525E  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
  9809  005262  0E1F               	movlw	31
  9810  005264  0100               	movlb	0	; () banked
  9811  005266  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
  9812  005268  B4D8               	btfsc	status,2,c
  9813  00526A  0012               	return	
  9814  00526C  D7F6               	goto	l66
  9815  00526E                     __end_of_I2C_Master_Wait:
  9816                           	opt stack 0
  9817                           tblptru	equ	0xFF8
  9818                           tblptrh	equ	0xFF7
  9819                           tblptrl	equ	0xFF6
  9820                           tablat	equ	0xFF5
  9821                           prodh	equ	0xFF4
  9822                           prodl	equ	0xFF3
  9823                           intcon	equ	0xFF2
  9824                           intcon2	equ	0xFF1
  9825                           intcon3	equ	0xFF0
  9826                           postinc0	equ	0xFEE
  9827                           wreg	equ	0xFE8
  9828                           postdec1	equ	0xFE5
  9829                           fsr1l	equ	0xFE1
  9830                           indf2	equ	0xFDF
  9831                           postinc2	equ	0xFDE
  9832                           postdec2	equ	0xFDD
  9833                           fsr2h	equ	0xFDA
  9834                           fsr2l	equ	0xFD9
  9835                           status	equ	0xFD8
  9836                           
  9837 ;; *************** function _change_state_to_menu_22 *****************
  9838 ;; Defined at:
  9839 ;;		line 498 in file "UI.c"
  9840 ;; Parameters:    Size  Location     Type
  9841 ;;		None
  9842 ;; Auto vars:     Size  Location     Type
  9843 ;;		None
  9844 ;; Return value:  Size  Location     Type
  9845 ;;                  1    wreg      void 
  9846 ;; Registers used:
  9847 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9848 ;; Tracked objects:
  9849 ;;		On entry : 0/0
  9850 ;;		On exit  : 0/0
  9851 ;;		Unchanged: 0/0
  9852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9853 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9854 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9855 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9856 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9857 ;;Total ram usage:        0 bytes
  9858 ;; Hardware stack levels used:    1
  9859 ;; Hardware stack levels required when called:   10
  9860 ;; This function calls:
  9861 ;;		_lcdInst
  9862 ;;		_printf
  9863 ;; This function is called by:
  9864 ;;		_UI
  9865 ;; This function uses a non-reentrant model
  9866 ;;
  9867                           
  9868                           	psect	text32
  9869  004CD6                     __ptext32:
  9870                           	opt stack 0
  9871  004CD6                     _change_state_to_menu_22:
  9872                           	opt stack 19
  9873                           
  9874                           ;UI.c: 499: cur_state = 22;
  9875                           
  9876                           ; BSR set to: 0
  9877                           ;incstack = 0
  9878  004CD6  0E00               	movlw	0
  9879  004CD8  0100               	movlb	0	; () banked
  9880  004CDA  6FED               	movwf	(_cur_state+1)& (0+255),b
  9881  004CDC  0E16               	movlw	22
  9882  004CDE  6FEC               	movwf	_cur_state& (0+255),b
  9883                           
  9884                           ; BSR set to: 0
  9885                           ;UI.c: 501: lcdInst(0b10000000);;
  9886  004CE0  0E80               	movlw	128
  9887  004CE2  EC48  F029         	call	_lcdInst
  9888                           
  9889                           ;UI.c: 502: printf("2. SORT        <");
  9890  004CE6  0EC4               	movlw	low STR_34
  9891  004CE8  0100               	movlb	0	; () banked
  9892  004CEA  6F8E               	movwf	printf@f& (0+255),b
  9893  004CEC  0EFD               	movlw	high STR_34
  9894  004CEE  0100               	movlb	0	; () banked
  9895  004CF0  6F8F               	movwf	(printf@f+1)& (0+255),b
  9896  004CF2  EC02  F00B         	call	_printf	;wreg free
  9897                           
  9898                           ;UI.c: 503: lcdInst(0b11000000);;
  9899  004CF6  0EC0               	movlw	192
  9900  004CF8  EC48  F029         	call	_lcdInst
  9901                           
  9902                           ;UI.c: 504: printf("3. LOGS         ");
  9903  004CFC  0E09               	movlw	low STR_36
  9904  004CFE  0100               	movlb	0	; () banked
  9905  004D00  6F8E               	movwf	printf@f& (0+255),b
  9906  004D02  0EFD               	movlw	high STR_36
  9907  004D04  0100               	movlb	0	; () banked
  9908  004D06  6F8F               	movwf	(printf@f+1)& (0+255),b
  9909  004D08  EC02  F00B         	call	_printf	;wreg free
  9910  004D0C  0012               	return		;funcret
  9911  004D0E                     __end_of_change_state_to_menu_22:
  9912                           	opt stack 0
  9913                           tblptru	equ	0xFF8
  9914                           tblptrh	equ	0xFF7
  9915                           tblptrl	equ	0xFF6
  9916                           tablat	equ	0xFF5
  9917                           prodh	equ	0xFF4
  9918                           prodl	equ	0xFF3
  9919                           intcon	equ	0xFF2
  9920                           intcon2	equ	0xFF1
  9921                           intcon3	equ	0xFF0
  9922                           postinc0	equ	0xFEE
  9923                           wreg	equ	0xFE8
  9924                           postdec1	equ	0xFE5
  9925                           fsr1l	equ	0xFE1
  9926                           indf2	equ	0xFDF
  9927                           postinc2	equ	0xFDE
  9928                           postdec2	equ	0xFDD
  9929                           fsr2h	equ	0xFDA
  9930                           fsr2l	equ	0xFD9
  9931                           status	equ	0xFD8
  9932                           
  9933 ;; *************** function _change_state_to_menu_12 *****************
  9934 ;; Defined at:
  9935 ;;		line 490 in file "UI.c"
  9936 ;; Parameters:    Size  Location     Type
  9937 ;;		None
  9938 ;; Auto vars:     Size  Location     Type
  9939 ;;		None
  9940 ;; Return value:  Size  Location     Type
  9941 ;;                  1    wreg      void 
  9942 ;; Registers used:
  9943 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9944 ;; Tracked objects:
  9945 ;;		On entry : 0/0
  9946 ;;		On exit  : 0/0
  9947 ;;		Unchanged: 0/0
  9948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9949 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9950 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9951 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9952 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9953 ;;Total ram usage:        0 bytes
  9954 ;; Hardware stack levels used:    1
  9955 ;; Hardware stack levels required when called:   10
  9956 ;; This function calls:
  9957 ;;		_lcdInst
  9958 ;;		_printf
  9959 ;; This function is called by:
  9960 ;;		_UI
  9961 ;; This function uses a non-reentrant model
  9962 ;;
  9963                           
  9964                           	psect	text33
  9965  004D0E                     __ptext33:
  9966                           	opt stack 0
  9967  004D0E                     _change_state_to_menu_12:
  9968                           	opt stack 19
  9969                           
  9970                           ;UI.c: 491: cur_state = 12;
  9971                           
  9972                           ;incstack = 0
  9973  004D0E  0E00               	movlw	0
  9974  004D10  0100               	movlb	0	; () banked
  9975  004D12  6FED               	movwf	(_cur_state+1)& (0+255),b
  9976  004D14  0E0C               	movlw	12
  9977  004D16  6FEC               	movwf	_cur_state& (0+255),b
  9978                           
  9979                           ; BSR set to: 0
  9980                           ;UI.c: 493: lcdInst(0b10000000);;
  9981  004D18  0E80               	movlw	128
  9982  004D1A  EC48  F029         	call	_lcdInst
  9983                           
  9984                           ;UI.c: 494: printf("1. DATE/TIME    ");
  9985  004D1E  0E2B               	movlw	low STR_33
  9986  004D20  0100               	movlb	0	; () banked
  9987  004D22  6F8E               	movwf	printf@f& (0+255),b
  9988  004D24  0EFD               	movlw	high STR_33
  9989  004D26  0100               	movlb	0	; () banked
  9990  004D28  6F8F               	movwf	(printf@f+1)& (0+255),b
  9991  004D2A  EC02  F00B         	call	_printf	;wreg free
  9992                           
  9993                           ;UI.c: 495: lcdInst(0b11000000);;
  9994  004D2E  0EC0               	movlw	192
  9995  004D30  EC48  F029         	call	_lcdInst
  9996                           
  9997                           ;UI.c: 496: printf("2. SORT        <");
  9998  004D34  0EC4               	movlw	low STR_34
  9999  004D36  0100               	movlb	0	; () banked
 10000  004D38  6F8E               	movwf	printf@f& (0+255),b
 10001  004D3A  0EFD               	movlw	high STR_34
 10002  004D3C  0100               	movlb	0	; () banked
 10003  004D3E  6F8F               	movwf	(printf@f+1)& (0+255),b
 10004  004D40  EC02  F00B         	call	_printf	;wreg free
 10005  004D44  0012               	return		;funcret
 10006  004D46                     __end_of_change_state_to_menu_12:
 10007                           	opt stack 0
 10008                           tblptru	equ	0xFF8
 10009                           tblptrh	equ	0xFF7
 10010                           tblptrl	equ	0xFF6
 10011                           tablat	equ	0xFF5
 10012                           prodh	equ	0xFF4
 10013                           prodl	equ	0xFF3
 10014                           intcon	equ	0xFF2
 10015                           intcon2	equ	0xFF1
 10016                           intcon3	equ	0xFF0
 10017                           postinc0	equ	0xFEE
 10018                           wreg	equ	0xFE8
 10019                           postdec1	equ	0xFE5
 10020                           fsr1l	equ	0xFE1
 10021                           indf2	equ	0xFDF
 10022                           postinc2	equ	0xFDE
 10023                           postdec2	equ	0xFDD
 10024                           fsr2h	equ	0xFDA
 10025                           fsr2l	equ	0xFD9
 10026                           status	equ	0xFD8
 10027                           
 10028 ;; *************** function ___awmod *****************
 10029 ;; Defined at:
 10030 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
 10031 ;; Parameters:    Size  Location     Type
 10032 ;;  dividend        2    0[BANK0 ] int 
 10033 ;;  divisor         2    2[BANK0 ] int 
 10034 ;; Auto vars:     Size  Location     Type
 10035 ;;  sign            1    5[BANK0 ] unsigned char 
 10036 ;;  counter         1    4[BANK0 ] unsigned char 
 10037 ;; Return value:  Size  Location     Type
 10038 ;;                  2    0[BANK0 ] int 
 10039 ;; Registers used:
 10040 ;;		wreg, status,2, status,0
 10041 ;; Tracked objects:
 10042 ;;		On entry : 0/0
 10043 ;;		On exit  : 0/0
 10044 ;;		Unchanged: 0/0
 10045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10046 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10047 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10048 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10049 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10050 ;;Total ram usage:        6 bytes
 10051 ;; Hardware stack levels used:    1
 10052 ;; Hardware stack levels required when called:    7
 10053 ;; This function calls:
 10054 ;;		Nothing
 10055 ;; This function is called by:
 10056 ;;		_UI
 10057 ;; This function uses a non-reentrant model
 10058 ;;
 10059                           
 10060                           	psect	text34
 10061  004376                     __ptext34:
 10062                           	opt stack 0
 10063  004376                     ___awmod:
 10064                           	opt stack 22
 10065                           
 10066                           ;incstack = 0
 10067  004376  0E00               	movlw	0
 10068  004378  0100               	movlb	0	; () banked
 10069  00437A  6F85               	movwf	___awmod@sign& (0+255),b
 10070                           
 10071                           ; BSR set to: 0
 10072  00437C  0100               	movlb	0	; () banked
 10073  00437E  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
 10074  004380  D008               	goto	l8411
 10075                           
 10076                           ; BSR set to: 0
 10077  004382  0100               	movlb	0	; () banked
 10078  004384  6D80               	negf	___awmod@dividend& (0+255),b
 10079  004386  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
 10080  004388  B0D8               	btfsc	status,0,c
 10081  00438A  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
 10082                           
 10083                           ; BSR set to: 0
 10084  00438C  0E01               	movlw	1
 10085  00438E  0100               	movlb	0	; () banked
 10086  004390  6F85               	movwf	___awmod@sign& (0+255),b
 10087  004392                     l8411:
 10088                           
 10089                           ; BSR set to: 0
 10090  004392  0100               	movlb	0	; () banked
 10091  004394  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
 10092  004396  D005               	goto	l8415
 10093                           
 10094                           ; BSR set to: 0
 10095  004398  0100               	movlb	0	; () banked
 10096  00439A  6D82               	negf	___awmod@divisor& (0+255),b
 10097  00439C  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
 10098  00439E  B0D8               	btfsc	status,0,c
 10099  0043A0  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
 10100  0043A2                     l8415:
 10101                           
 10102                           ; BSR set to: 0
 10103  0043A2  0100               	movlb	0	; () banked
 10104  0043A4  5182               	movf	___awmod@divisor& (0+255),w,b
 10105  0043A6  0100               	movlb	0	; () banked
 10106  0043A8  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
 10107  0043AA  B4D8               	btfsc	status,2,c
 10108  0043AC  D026               	goto	l8431
 10109                           
 10110                           ; BSR set to: 0
 10111  0043AE  0E01               	movlw	1
 10112  0043B0  0100               	movlb	0	; () banked
 10113  0043B2  6F84               	movwf	___awmod@counter& (0+255),b
 10114  0043B4  D006               	goto	l8421
 10115  0043B6                     l8419:
 10116                           
 10117                           ; BSR set to: 0
 10118  0043B6  0100               	movlb	0	; () banked
 10119  0043B8  90D8               	bcf	status,0,c
 10120  0043BA  3782               	rlcf	___awmod@divisor& (0+255),f,b
 10121  0043BC  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
 10122  0043BE  0100               	movlb	0	; () banked
 10123  0043C0  2B84               	incf	___awmod@counter& (0+255),f,b
 10124  0043C2                     l8421:
 10125                           
 10126                           ; BSR set to: 0
 10127  0043C2  0100               	movlb	0	; () banked
 10128  0043C4  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
 10129  0043C6  D7F7               	goto	l8419
 10130  0043C8                     l8423:
 10131                           
 10132                           ; BSR set to: 0
 10133  0043C8  0100               	movlb	0	; () banked
 10134  0043CA  5182               	movf	___awmod@divisor& (0+255),w,b
 10135  0043CC  0100               	movlb	0	; () banked
 10136  0043CE  5D80               	subwf	___awmod@dividend& (0+255),w,b
 10137  0043D0  0100               	movlb	0	; () banked
 10138  0043D2  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
 10139  0043D4  0100               	movlb	0	; () banked
 10140  0043D6  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
 10141  0043D8  A0D8               	btfss	status,0,c
 10142  0043DA  D008               	goto	l8427
 10143                           
 10144                           ; BSR set to: 0
 10145  0043DC  0100               	movlb	0	; () banked
 10146  0043DE  5182               	movf	___awmod@divisor& (0+255),w,b
 10147  0043E0  0100               	movlb	0	; () banked
 10148  0043E2  5F80               	subwf	___awmod@dividend& (0+255),f,b
 10149  0043E4  0100               	movlb	0	; () banked
 10150  0043E6  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
 10151  0043E8  0100               	movlb	0	; () banked
 10152  0043EA  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
 10153  0043EC                     l8427:
 10154                           
 10155                           ; BSR set to: 0
 10156  0043EC  0100               	movlb	0	; () banked
 10157  0043EE  90D8               	bcf	status,0,c
 10158  0043F0  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
 10159  0043F2  3382               	rrcf	___awmod@divisor& (0+255),f,b
 10160                           
 10161                           ; BSR set to: 0
 10162  0043F4  0100               	movlb	0	; () banked
 10163  0043F6  2F84               	decfsz	___awmod@counter& (0+255),f,b
 10164  0043F8  D7E7               	goto	l8423
 10165  0043FA                     l8431:
 10166                           
 10167                           ; BSR set to: 0
 10168  0043FA  0100               	movlb	0	; () banked
 10169  0043FC  5185               	movf	___awmod@sign& (0+255),w,b
 10170  0043FE  0100               	movlb	0	; () banked
 10171  004400  B4D8               	btfsc	status,2,c
 10172  004402  D005               	goto	l8435
 10173                           
 10174                           ; BSR set to: 0
 10175  004404  0100               	movlb	0	; () banked
 10176  004406  6D80               	negf	___awmod@dividend& (0+255),b
 10177  004408  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
 10178  00440A  B0D8               	btfsc	status,0,c
 10179  00440C  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
 10180  00440E                     l8435:
 10181                           
 10182                           ; BSR set to: 0
 10183  00440E  C080  F080         	movff	___awmod@dividend,?___awmod
 10184  004412  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
 10185  004416  0012               	return	
 10186  004418                     __end_of___awmod:
 10187                           	opt stack 0
 10188                           tblptru	equ	0xFF8
 10189                           tblptrh	equ	0xFF7
 10190                           tblptrl	equ	0xFF6
 10191                           tablat	equ	0xFF5
 10192                           prodh	equ	0xFF4
 10193                           prodl	equ	0xFF3
 10194                           intcon	equ	0xFF2
 10195                           intcon2	equ	0xFF1
 10196                           intcon3	equ	0xFF0
 10197                           postinc0	equ	0xFEE
 10198                           wreg	equ	0xFE8
 10199                           postdec1	equ	0xFE5
 10200                           fsr1l	equ	0xFE1
 10201                           indf2	equ	0xFDF
 10202                           postinc2	equ	0xFDE
 10203                           postdec2	equ	0xFDD
 10204                           fsr2h	equ	0xFDA
 10205                           fsr2l	equ	0xFD9
 10206                           status	equ	0xFD8
 10207                           
 10208 ;; *************** function ___awdiv *****************
 10209 ;; Defined at:
 10210 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
 10211 ;; Parameters:    Size  Location     Type
 10212 ;;  dividend        2    6[BANK0 ] int 
 10213 ;;  divisor         2    8[BANK0 ] int 
 10214 ;; Auto vars:     Size  Location     Type
 10215 ;;  quotient        2   12[BANK0 ] int 
 10216 ;;  sign            1   11[BANK0 ] unsigned char 
 10217 ;;  counter         1   10[BANK0 ] unsigned char 
 10218 ;; Return value:  Size  Location     Type
 10219 ;;                  2    6[BANK0 ] int 
 10220 ;; Registers used:
 10221 ;;		wreg, status,2, status,0
 10222 ;; Tracked objects:
 10223 ;;		On entry : 0/0
 10224 ;;		On exit  : 0/0
 10225 ;;		Unchanged: 0/0
 10226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10227 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10228 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10229 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10230 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10231 ;;Total ram usage:        8 bytes
 10232 ;; Hardware stack levels used:    1
 10233 ;; Hardware stack levels required when called:    7
 10234 ;; This function calls:
 10235 ;;		Nothing
 10236 ;; This function is called by:
 10237 ;;		_UI
 10238 ;; This function uses a non-reentrant model
 10239 ;;
 10240                           
 10241                           	psect	text35
 10242  0040A6                     __ptext35:
 10243                           	opt stack 0
 10244  0040A6                     ___awdiv:
 10245                           	opt stack 22
 10246                           
 10247                           ; BSR set to: 0
 10248                           ;incstack = 0
 10249  0040A6  0E00               	movlw	0
 10250  0040A8  0100               	movlb	0	; () banked
 10251  0040AA  6F8B               	movwf	___awdiv@sign& (0+255),b
 10252                           
 10253                           ; BSR set to: 0
 10254  0040AC  0100               	movlb	0	; () banked
 10255  0040AE  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 10256  0040B0  D008               	goto	l8367
 10257                           
 10258                           ; BSR set to: 0
 10259  0040B2  0100               	movlb	0	; () banked
 10260  0040B4  6D88               	negf	___awdiv@divisor& (0+255),b
 10261  0040B6  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
 10262  0040B8  B0D8               	btfsc	status,0,c
 10263  0040BA  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
 10264                           
 10265                           ; BSR set to: 0
 10266  0040BC  0E01               	movlw	1
 10267  0040BE  0100               	movlb	0	; () banked
 10268  0040C0  6F8B               	movwf	___awdiv@sign& (0+255),b
 10269  0040C2                     l8367:
 10270                           
 10271                           ; BSR set to: 0
 10272  0040C2  0100               	movlb	0	; () banked
 10273  0040C4  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
 10274  0040C6  D008               	goto	l8373
 10275                           
 10276                           ; BSR set to: 0
 10277  0040C8  0100               	movlb	0	; () banked
 10278  0040CA  6D86               	negf	___awdiv@dividend& (0+255),b
 10279  0040CC  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
 10280  0040CE  B0D8               	btfsc	status,0,c
 10281  0040D0  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
 10282                           
 10283                           ; BSR set to: 0
 10284  0040D2  0E01               	movlw	1
 10285  0040D4  0100               	movlb	0	; () banked
 10286  0040D6  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
 10287  0040D8                     l8373:
 10288                           
 10289                           ; BSR set to: 0
 10290  0040D8  0E00               	movlw	0
 10291  0040DA  0100               	movlb	0	; () banked
 10292  0040DC  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
 10293  0040DE  0E00               	movlw	0
 10294  0040E0  6F8C               	movwf	___awdiv@quotient& (0+255),b
 10295                           
 10296                           ; BSR set to: 0
 10297  0040E2  0100               	movlb	0	; () banked
 10298  0040E4  5188               	movf	___awdiv@divisor& (0+255),w,b
 10299  0040E6  0100               	movlb	0	; () banked
 10300  0040E8  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
 10301  0040EA  B4D8               	btfsc	status,2,c
 10302  0040EC  D02C               	goto	l8395
 10303                           
 10304                           ; BSR set to: 0
 10305  0040EE  0E01               	movlw	1
 10306  0040F0  0100               	movlb	0	; () banked
 10307  0040F2  6F8A               	movwf	___awdiv@counter& (0+255),b
 10308  0040F4  D006               	goto	l8381
 10309  0040F6                     l8379:
 10310                           
 10311                           ; BSR set to: 0
 10312  0040F6  0100               	movlb	0	; () banked
 10313  0040F8  90D8               	bcf	status,0,c
 10314  0040FA  3788               	rlcf	___awdiv@divisor& (0+255),f,b
 10315  0040FC  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
 10316  0040FE  0100               	movlb	0	; () banked
 10317  004100  2B8A               	incf	___awdiv@counter& (0+255),f,b
 10318  004102                     l8381:
 10319                           
 10320                           ; BSR set to: 0
 10321  004102  0100               	movlb	0	; () banked
 10322  004104  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 10323  004106  D7F7               	goto	l8379
 10324  004108                     l8383:
 10325                           
 10326                           ; BSR set to: 0
 10327  004108  0100               	movlb	0	; () banked
 10328  00410A  90D8               	bcf	status,0,c
 10329  00410C  378C               	rlcf	___awdiv@quotient& (0+255),f,b
 10330  00410E  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
 10331                           
 10332                           ; BSR set to: 0
 10333  004110  0100               	movlb	0	; () banked
 10334  004112  5188               	movf	___awdiv@divisor& (0+255),w,b
 10335  004114  0100               	movlb	0	; () banked
 10336  004116  5D86               	subwf	___awdiv@dividend& (0+255),w,b
 10337  004118  0100               	movlb	0	; () banked
 10338  00411A  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
 10339  00411C  0100               	movlb	0	; () banked
 10340  00411E  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
 10341  004120  A0D8               	btfss	status,0,c
 10342  004122  D00A               	goto	l8391
 10343                           
 10344                           ; BSR set to: 0
 10345  004124  0100               	movlb	0	; () banked
 10346  004126  5188               	movf	___awdiv@divisor& (0+255),w,b
 10347  004128  0100               	movlb	0	; () banked
 10348  00412A  5F86               	subwf	___awdiv@dividend& (0+255),f,b
 10349  00412C  0100               	movlb	0	; () banked
 10350  00412E  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
 10351  004130  0100               	movlb	0	; () banked
 10352  004132  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
 10353                           
 10354                           ; BSR set to: 0
 10355  004134  0100               	movlb	0	; () banked
 10356  004136  818C               	bsf	___awdiv@quotient& (0+255),0,b
 10357  004138                     l8391:
 10358                           
 10359                           ; BSR set to: 0
 10360  004138  0100               	movlb	0	; () banked
 10361  00413A  90D8               	bcf	status,0,c
 10362  00413C  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
 10363  00413E  3388               	rrcf	___awdiv@divisor& (0+255),f,b
 10364                           
 10365                           ; BSR set to: 0
 10366  004140  0100               	movlb	0	; () banked
 10367  004142  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
 10368  004144  D7E1               	goto	l8383
 10369  004146                     l8395:
 10370                           
 10371                           ; BSR set to: 0
 10372  004146  0100               	movlb	0	; () banked
 10373  004148  518B               	movf	___awdiv@sign& (0+255),w,b
 10374  00414A  0100               	movlb	0	; () banked
 10375  00414C  B4D8               	btfsc	status,2,c
 10376  00414E  D005               	goto	l8399
 10377                           
 10378                           ; BSR set to: 0
 10379  004150  0100               	movlb	0	; () banked
 10380  004152  6D8C               	negf	___awdiv@quotient& (0+255),b
 10381  004154  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
 10382  004156  B0D8               	btfsc	status,0,c
 10383  004158  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
 10384  00415A                     l8399:
 10385                           
 10386                           ; BSR set to: 0
 10387  00415A  C08C  F086         	movff	___awdiv@quotient,?___awdiv
 10388  00415E  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
 10389  004162  0012               	return	
 10390  004164                     __end_of___awdiv:
 10391                           	opt stack 0
 10392                           tblptru	equ	0xFF8
 10393                           tblptrh	equ	0xFF7
 10394                           tblptrl	equ	0xFF6
 10395                           tablat	equ	0xFF5
 10396                           prodh	equ	0xFF4
 10397                           prodl	equ	0xFF3
 10398                           intcon	equ	0xFF2
 10399                           intcon2	equ	0xFF1
 10400                           intcon3	equ	0xFF0
 10401                           postinc0	equ	0xFEE
 10402                           wreg	equ	0xFE8
 10403                           postdec1	equ	0xFE5
 10404                           fsr1l	equ	0xFE1
 10405                           indf2	equ	0xFDF
 10406                           postinc2	equ	0xFDE
 10407                           postdec2	equ	0xFDD
 10408                           fsr2h	equ	0xFDA
 10409                           fsr2l	equ	0xFD9
 10410                           status	equ	0xFD8
 10411                           
 10412 ;; *************** function _Test *****************
 10413 ;; Defined at:
 10414 ;;		line 30 in file "Test.c"
 10415 ;; Parameters:    Size  Location     Type
 10416 ;;		None
 10417 ;; Auto vars:     Size  Location     Type
 10418 ;;		None
 10419 ;; Return value:  Size  Location     Type
 10420 ;;                  1    wreg      void 
 10421 ;; Registers used:
 10422 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10423 ;; Tracked objects:
 10424 ;;		On entry : 0/0
 10425 ;;		On exit  : 0/0
 10426 ;;		Unchanged: 0/0
 10427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10428 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10429 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10430 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10431 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10432 ;;Total ram usage:        2 bytes
 10433 ;; Hardware stack levels used:    1
 10434 ;; Hardware stack levels required when called:   11
 10435 ;; This function calls:
 10436 ;;		_BlockerTest
 10437 ;;		_BothServos
 10438 ;;		_EEPROMTest
 10439 ;;		_PortTestA5
 10440 ;;		_PortTests
 10441 ;;		_PusherTest
 10442 ;;		_SpeedTest
 10443 ;;		_actuatorTest
 10444 ;;		_algorithmTest
 10445 ;;		_lcdInst
 10446 ;;		_printf
 10447 ;;		_sensorTest
 10448 ;; This function is called by:
 10449 ;;		_main
 10450 ;; This function uses a non-reentrant model
 10451 ;;
 10452                           
 10453                           	psect	text36
 10454  003C38                     __ptext36:
 10455                           	opt stack 0
 10456  003C38                     _Test:
 10457                           	opt stack 19
 10458  003C38                     
 10459                           ;Test.c: 33: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 10460  003C38  0E01               	movlw	1
 10461  003C3A  EC48  F029         	call	_lcdInst
 10462  003C3E  0E68               	movlw	104
 10463  003C40  0100               	movlb	0	; () banked
 10464  003C42  6FC6               	movwf	??_Test& (0+255),b
 10465  003C44  0EE4               	movlw	228
 10466  003C46                     u9127:
 10467  003C46  2EE8               	decfsz	wreg,f,c
 10468  003C48  D7FE               	bra	u9127
 10469  003C4A  2FC6               	decfsz	??_Test& (0+255),f,b
 10470  003C4C  D7FC               	bra	u9127
 10471  003C4E  F000               	nop	
 10472  003C50  0E80               	movlw	128
 10473  003C52  EC48  F029         	call	_lcdInst
 10474                           
 10475                           ;Test.c: 34: printf("2.SNR|4.HI|5.MED");
 10476  003C56  0E92               	movlw	low STR_68
 10477  003C58  0100               	movlb	0	; () banked
 10478  003C5A  6F8E               	movwf	printf@f& (0+255),b
 10479  003C5C  0EFC               	movlw	high STR_68
 10480  003C5E  0100               	movlb	0	; () banked
 10481  003C60  6F8F               	movwf	(printf@f+1)& (0+255),b
 10482  003C62  EC02  F00B         	call	_printf	;wreg free
 10483                           
 10484                           ;Test.c: 35: lcdInst(0b11000000);;
 10485  003C66  0EC0               	movlw	192
 10486  003C68  EC48  F029         	call	_lcdInst
 10487                           
 10488                           ;Test.c: 36: printf("B.PSH|8.SV|9.BLK");
 10489  003C6C  0EA3               	movlw	low STR_69
 10490  003C6E  0100               	movlb	0	; () banked
 10491  003C70  6F8E               	movwf	printf@f& (0+255),b
 10492  003C72  0EFC               	movlw	high STR_69
 10493  003C74  0100               	movlb	0	; () banked
 10494  003C76  6F8F               	movwf	(printf@f+1)& (0+255),b
 10495  003C78  EC02  F00B         	call	_printf	;wreg free
 10496                           
 10497                           ;Test.c: 37: _delay((unsigned long)((100)*(32000000/4000.0)));
 10498  003C7C  0E05               	movlw	5
 10499  003C7E  0100               	movlb	0	; () banked
 10500  003C80  6FC7               	movwf	(??_Test+1)& (0+255),b
 10501  003C82  0E0F               	movlw	15
 10502  003C84  0100               	movlb	0	; () banked
 10503  003C86  6FC6               	movwf	??_Test& (0+255),b
 10504  003C88  0EF1               	movlw	241
 10505  003C8A                     u9137:
 10506  003C8A  2EE8               	decfsz	wreg,f,c
 10507  003C8C  D7FE               	bra	u9137
 10508  003C8E  2FC6               	decfsz	??_Test& (0+255),f,b
 10509  003C90  D7FC               	bra	u9137
 10510  003C92  2FC7               	decfsz	(??_Test+1)& (0+255),f,b
 10511  003C94  D7FA               	bra	u9137
 10512  003C96                     l1139:
 10513  003C96  A281               	btfss	3969,1,c	;volatile
 10514  003C98  D7FE               	goto	l1139
 10515                           
 10516                           ;Test.c: 39: var = PORTB >> 4;
 10517  003C9A  CF81 F0C6          	movff	3969,??_Test	;volatile
 10518  003C9E  0100               	movlb	0	; () banked
 10519  003CA0  3BC6               	swapf	??_Test& (0+255),f,b
 10520  003CA2  0E0F               	movlw	15
 10521  003CA4  17C6               	andwf	??_Test& (0+255),f,b
 10522  003CA6  0100               	movlb	0	; () banked
 10523  003CA8  51C6               	movf	??_Test& (0+255),w,b
 10524  003CAA  0100               	movlb	0	; () banked
 10525  003CAC  6FFA               	movwf	_var& (0+255),b
 10526  003CAE  6BFB               	clrf	(_var+1)& (0+255),b
 10527                           
 10528                           ; BSR set to: 0
 10529                           ;Test.c: 40: var++;
 10530  003CB0  0100               	movlb	0	; () banked
 10531  003CB2  4BFA               	infsnz	_var& (0+255),f,b
 10532  003CB4  2BFB               	incf	(_var+1)& (0+255),f,b
 10533  003CB6                     l1142:
 10534  003CB6  A281               	btfss	3969,1,c	;volatile
 10535  003CB8  D01F               	goto	l9161
 10536  003CBA  D7FD               	goto	l1142
 10537  003CBC                     l9139:
 10538                           
 10539                           ;Test.c: 44: algorithmTest();
 10540  003CBC  EC86  F01F         	call	_algorithmTest	;wreg free
 10541                           
 10542                           ;Test.c: 45: break;
 10543  003CC0  D7BB               	goto	l9121
 10544  003CC2                     l9141:
 10545                           
 10546                           ;Test.c: 47: sensorTest();
 10547  003CC2  EC97  F010         	call	_sensorTest	;wreg free
 10548                           
 10549                           ;Test.c: 48: break;
 10550  003CC6  D7B8               	goto	l9121
 10551  003CC8                     l9143:
 10552                           
 10553                           ;Test.c: 50: actuatorTest();
 10554  003CC8  EC09  F000         	call	_actuatorTest	;wreg free
 10555                           
 10556                           ;Test.c: 51: break;
 10557  003CCC  D7B5               	goto	l9121
 10558  003CCE                     l9145:
 10559                           
 10560                           ;Test.c: 53: PortTestA5();
 10561  003CCE  EC05  F025         	call	_PortTestA5	;wreg free
 10562                           
 10563                           ;Test.c: 54: break;
 10564  003CD2  D7B2               	goto	l9121
 10565  003CD4                     l9147:
 10566                           
 10567                           ;Test.c: 57: SpeedTest();
 10568  003CD4  ECD8  F022         	call	_SpeedTest	;wreg free
 10569                           
 10570                           ;Test.c: 58: break;
 10571  003CD8  D7AF               	goto	l9121
 10572  003CDA                     l9149:
 10573                           
 10574                           ;Test.c: 60: EEPROMTest();
 10575  003CDA  EC7A  F029         	call	_EEPROMTest	;wreg free
 10576                           
 10577                           ;Test.c: 61: break;
 10578  003CDE  D7AC               	goto	l9121
 10579  003CE0                     l9151:
 10580                           
 10581                           ;Test.c: 63: PusherTest();
 10582  003CE0  EC2F  F016         	call	_PusherTest	;wreg free
 10583                           
 10584                           ;Test.c: 64: break;
 10585  003CE4  D7A9               	goto	l9121
 10586  003CE6                     l9153:
 10587                           
 10588                           ;Test.c: 66: PortTests();
 10589  003CE6  EC1A  F023         	call	_PortTests	;wreg free
 10590                           
 10591                           ;Test.c: 67: break;
 10592  003CEA  D7A6               	goto	l9121
 10593  003CEC                     l9155:
 10594                           
 10595                           ;Test.c: 69: BothServos();
 10596  003CEC  EC1E  F00D         	call	_BothServos	;wreg free
 10597                           
 10598                           ;Test.c: 70: break;
 10599  003CF0  D7A3               	goto	l9121
 10600  003CF2                     l9157:
 10601                           
 10602                           ;Test.c: 72: BlockerTest();
 10603  003CF2  EC2A  F01C         	call	_BlockerTest	;wreg free
 10604                           
 10605                           ;Test.c: 76: }
 10606                           
 10607                           ;Test.c: 75: break;
 10608                           
 10609                           ;Test.c: 74: default:
 10610                           
 10611                           ;Test.c: 73: break;
 10612  003CF6  D7A0               	goto	l9121
 10613  003CF8                     l9161:
 10614  003CF8  C0FA  F0C6         	movff	_var,??_Test
 10615  003CFC  C0FB  F0C7         	movff	_var+1,??_Test+1
 10616                           
 10617                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10618                           ; Switch size 1, requested type "space"
 10619                           ; Number of cases is 1, Range of values is 0 to 0
 10620                           ; switch strategies available:
 10621                           ; Name         Instructions Cycles
 10622                           ; simple_byte            4     3 (average)
 10623                           ;	Chosen strategy is simple_byte
 10624  003D00  0100               	movlb	0	; () banked
 10625  003D02  51C7               	movf	(??_Test+1)& (0+255),w,b
 10626  003D04  0A00               	xorlw	0	; case 0
 10627  003D06  A4D8               	btfss	status,2,c
 10628  003D08  D797               	goto	l9121
 10629                           
 10630                           ; BSR set to: 0
 10631                           ; Switch size 1, requested type "space"
 10632                           ; Number of cases is 10, Range of values is 1 to 11
 10633                           ; switch strategies available:
 10634                           ; Name         Instructions Cycles
 10635                           ; simple_byte           31    16 (average)
 10636                           ;	Chosen strategy is simple_byte
 10637  003D0A  0100               	movlb	0	; () banked
 10638  003D0C  51C6               	movf	??_Test& (0+255),w,b
 10639  003D0E  0A01               	xorlw	1	; case 1
 10640  003D10  B4D8               	btfsc	status,2,c
 10641  003D12  D7D4               	goto	l9139
 10642  003D14  0A03               	xorlw	3	; case 2
 10643  003D16  B4D8               	btfsc	status,2,c
 10644  003D18  D7D4               	goto	l9141
 10645  003D1A  0A01               	xorlw	1	; case 3
 10646  003D1C  B4D8               	btfsc	status,2,c
 10647  003D1E  D7D4               	goto	l9143
 10648  003D20  0A06               	xorlw	6	; case 5
 10649  003D22  B4D8               	btfsc	status,2,c
 10650  003D24  D7D4               	goto	l9145
 10651  003D26  0A03               	xorlw	3	; case 6
 10652  003D28  B4D8               	btfsc	status,2,c
 10653  003D2A  D7D4               	goto	l9147
 10654  003D2C  0A01               	xorlw	1	; case 7
 10655  003D2E  B4D8               	btfsc	status,2,c
 10656  003D30  D7D4               	goto	l9149
 10657  003D32  0A0F               	xorlw	15	; case 8
 10658  003D34  B4D8               	btfsc	status,2,c
 10659  003D36  D7D4               	goto	l9151
 10660  003D38  0A01               	xorlw	1	; case 9
 10661  003D3A  B4D8               	btfsc	status,2,c
 10662  003D3C  D7D4               	goto	l9153
 10663  003D3E  0A03               	xorlw	3	; case 10
 10664  003D40  B4D8               	btfsc	status,2,c
 10665  003D42  D7D4               	goto	l9155
 10666  003D44  0A01               	xorlw	1	; case 11
 10667  003D46  B4D8               	btfsc	status,2,c
 10668  003D48  D7D4               	goto	l9157
 10669                           
 10670                           ; BSR set to: 0
 10671                           
 10672                           ; BSR set to: 0
 10673  003D4A  D776               	goto	l9121
 10674  003D4C                     __end_of_Test:
 10675                           	opt stack 0
 10676                           tblptru	equ	0xFF8
 10677                           tblptrh	equ	0xFF7
 10678                           tblptrl	equ	0xFF6
 10679                           tablat	equ	0xFF5
 10680                           prodh	equ	0xFF4
 10681                           prodl	equ	0xFF3
 10682                           intcon	equ	0xFF2
 10683                           intcon2	equ	0xFF1
 10684                           intcon3	equ	0xFF0
 10685                           postinc0	equ	0xFEE
 10686                           wreg	equ	0xFE8
 10687                           postdec1	equ	0xFE5
 10688                           fsr1l	equ	0xFE1
 10689                           indf2	equ	0xFDF
 10690                           postinc2	equ	0xFDE
 10691                           postdec2	equ	0xFDD
 10692                           fsr2h	equ	0xFDA
 10693                           fsr2l	equ	0xFD9
 10694                           status	equ	0xFD8
 10695                           
 10696 ;; *************** function _sensorTest *****************
 10697 ;; Defined at:
 10698 ;;		line 124 in file "Test.c"
 10699 ;; Parameters:    Size  Location     Type
 10700 ;;		None
 10701 ;; Auto vars:     Size  Location     Type
 10702 ;;  res             2   45[BANK0 ] int 
 10703 ;; Return value:  Size  Location     Type
 10704 ;;                  1    wreg      void 
 10705 ;; Registers used:
 10706 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10707 ;; Tracked objects:
 10708 ;;		On entry : 0/0
 10709 ;;		On exit  : 0/0
 10710 ;;		Unchanged: 0/0
 10711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10712 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10713 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10714 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10715 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10716 ;;Total ram usage:        4 bytes
 10717 ;; Hardware stack levels used:    1
 10718 ;; Hardware stack levels required when called:   10
 10719 ;; This function calls:
 10720 ;;		_lcdInst
 10721 ;;		_printf
 10722 ;;		_readADC
 10723 ;;		_readMAG
 10724 ;; This function is called by:
 10725 ;;		_Test
 10726 ;; This function uses a non-reentrant model
 10727 ;;
 10728                           
 10729                           	psect	text37
 10730  00212E                     __ptext37:
 10731                           	opt stack 0
 10732  00212E                     _sensorTest:
 10733                           	opt stack 19
 10734                           
 10735                           ;Test.c: 126: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10736                           
 10737                           ; BSR set to: 0
 10738                           ;incstack = 0
 10739  00212E  0E01               	movlw	1
 10740  002130  EC48  F029         	call	_lcdInst
 10741  002134  0E68               	movlw	104
 10742  002136  0100               	movlb	0	; () banked
 10743  002138  6FAB               	movwf	??_sensorTest& (0+255),b
 10744  00213A  0EE4               	movlw	228
 10745  00213C                     u9147:
 10746  00213C  2EE8               	decfsz	wreg,f,c
 10747  00213E  D7FE               	bra	u9147
 10748  002140  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10749  002142  D7FC               	bra	u9147
 10750  002144  F000               	nop	
 10751  002146  0E80               	movlw	128
 10752  002148  EC48  F029         	call	_lcdInst
 10753                           
 10754                           ;Test.c: 127: printf("SENSORS");
 10755  00214C  0EAE               	movlw	low STR_77
 10756  00214E  0100               	movlb	0	; () banked
 10757  002150  6F8E               	movwf	printf@f& (0+255),b
 10758  002152  0EFF               	movlw	high STR_77
 10759  002154  0100               	movlb	0	; () banked
 10760  002156  6F8F               	movwf	(printf@f+1)& (0+255),b
 10761  002158  EC02  F00B         	call	_printf	;wreg free
 10762                           
 10763                           ;Test.c: 128: lcdInst(0b11000000);;
 10764  00215C  0EC0               	movlw	192
 10765  00215E  EC48  F029         	call	_lcdInst
 10766                           
 10767                           ;Test.c: 129: printf("PUSH TO START");
 10768  002162  0E0B               	movlw	low STR_71
 10769  002164  0100               	movlb	0	; () banked
 10770  002166  6F8E               	movwf	printf@f& (0+255),b
 10771  002168  0EFF               	movlw	high STR_71
 10772  00216A  0100               	movlb	0	; () banked
 10773  00216C  6F8F               	movwf	(printf@f+1)& (0+255),b
 10774  00216E  EC02  F00B         	call	_printf	;wreg free
 10775                           
 10776                           ;Test.c: 130: _delay((unsigned long)((100)*(32000000/4000.0)));
 10777  002172  0E05               	movlw	5
 10778  002174  0100               	movlb	0	; () banked
 10779  002176  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10780  002178  0E0F               	movlw	15
 10781  00217A  0100               	movlb	0	; () banked
 10782  00217C  6FAB               	movwf	??_sensorTest& (0+255),b
 10783  00217E  0EF1               	movlw	241
 10784  002180                     u9157:
 10785  002180  2EE8               	decfsz	wreg,f,c
 10786  002182  D7FE               	bra	u9157
 10787  002184  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10788  002186  D7FC               	bra	u9157
 10789  002188  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10790  00218A  D7FA               	bra	u9157
 10791  00218C                     l1172:
 10792  00218C  A281               	btfss	3969,1,c	;volatile
 10793  00218E  D7FE               	goto	l1172
 10794  002190                     l1175:
 10795  002190  B281               	btfsc	3969,1,c	;volatile
 10796  002192  D7FE               	goto	l1175
 10797                           
 10798                           ;Test.c: 133: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10799  002194  0E01               	movlw	1
 10800  002196  EC48  F029         	call	_lcdInst
 10801  00219A  0E68               	movlw	104
 10802  00219C  0100               	movlb	0	; () banked
 10803  00219E  6FAB               	movwf	??_sensorTest& (0+255),b
 10804  0021A0  0EE4               	movlw	228
 10805  0021A2                     u9167:
 10806  0021A2  2EE8               	decfsz	wreg,f,c
 10807  0021A4  D7FE               	bra	u9167
 10808  0021A6  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10809  0021A8  D7FC               	bra	u9167
 10810  0021AA  F000               	nop	
 10811  0021AC  0E80               	movlw	128
 10812  0021AE  EC48  F029         	call	_lcdInst
 10813                           
 10814                           ;Test.c: 138: printf("TST: IR SNSR");
 10815  0021B2  0E35               	movlw	low STR_79
 10816  0021B4  0100               	movlb	0	; () banked
 10817  0021B6  6F8E               	movwf	printf@f& (0+255),b
 10818  0021B8  0EFF               	movlw	high STR_79
 10819  0021BA  0100               	movlb	0	; () banked
 10820  0021BC  6F8F               	movwf	(printf@f+1)& (0+255),b
 10821  0021BE  EC02  F00B         	call	_printf	;wreg free
 10822                           
 10823                           ;Test.c: 139: _delay((unsigned long)((100)*(32000000/4000.0)));
 10824  0021C2  0E05               	movlw	5
 10825  0021C4  0100               	movlb	0	; () banked
 10826  0021C6  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10827  0021C8  0E0F               	movlw	15
 10828  0021CA  0100               	movlb	0	; () banked
 10829  0021CC  6FAB               	movwf	??_sensorTest& (0+255),b
 10830  0021CE  0EF1               	movlw	241
 10831  0021D0                     u9177:
 10832  0021D0  2EE8               	decfsz	wreg,f,c
 10833  0021D2  D7FE               	bra	u9177
 10834  0021D4  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10835  0021D6  D7FC               	bra	u9177
 10836  0021D8  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10837  0021DA  D7FA               	bra	u9177
 10838                           
 10839                           ;Test.c: 140: LATCbits.LATC5 = 1;
 10840  0021DC  8A8B               	bsf	3979,5,c	;volatile
 10841                           
 10842                           ;Test.c: 142: while(PORTBbits.RB1 == 0){
 10843  0021DE  D05C               	goto	l7585
 10844  0021E0                     l7567:
 10845                           
 10846                           ;Test.c: 143: readADC(0);
 10847  0021E0  0E00               	movlw	0
 10848  0021E2  EC3F  F028         	call	_readADC
 10849                           
 10850                           ;Test.c: 144: int res = ADRESH<<8 | ADRESL;
 10851  0021E6  50C3               	movf	4035,w,c	;volatile
 10852  0021E8  CFC4 F0AB          	movff	4036,??_sensorTest	;volatile
 10853  0021EC  0100               	movlb	0	; () banked
 10854  0021EE  6BAC               	clrf	(??_sensorTest+1)& (0+255),b
 10855  0021F0  C0AB  F0AC         	movff	??_sensorTest,??_sensorTest+1
 10856  0021F4  0100               	movlb	0	; () banked
 10857  0021F6  6BAB               	clrf	??_sensorTest& (0+255),b
 10858  0021F8  0100               	movlb	0	; () banked
 10859  0021FA  11AB               	iorwf	??_sensorTest& (0+255),w,b
 10860  0021FC  0100               	movlb	0	; () banked
 10861  0021FE  6FAD               	movwf	sensorTest@res& (0+255),b
 10862  002200  0100               	movlb	0	; () banked
 10863  002202  51AC               	movf	(??_sensorTest+1)& (0+255),w,b
 10864  002204  0100               	movlb	0	; () banked
 10865  002206  6FAE               	movwf	(sensorTest@res+1)& (0+255),b
 10866                           
 10867                           ; BSR set to: 0
 10868                           ;Test.c: 145: IR_signal = (res > 800) ? 1 : 0;
 10869  002208  0100               	movlb	0	; () banked
 10870  00220A  BFAE               	btfsc	(sensorTest@res+1)& (0+255),7,b
 10871  00220C  D00A               	goto	u6040
 10872  00220E  0E21               	movlw	33
 10873  002210  0100               	movlb	0	; () banked
 10874  002212  5DAD               	subwf	sensorTest@res& (0+255),w,b
 10875  002214  0E03               	movlw	3
 10876  002216  0100               	movlb	0	; () banked
 10877  002218  59AE               	subwfb	(sensorTest@res+1)& (0+255),w,b
 10878  00221A  A0D8               	btfss	status,0,c
 10879  00221C  D002               	goto	u6040
 10880  00221E  0E01               	movlw	1
 10881  002220  D001               	goto	u6050
 10882  002222                     u6040:
 10883  002222  0E00               	movlw	0
 10884  002224                     u6050:
 10885  002224  0100               	movlb	0	; () banked
 10886  002226  6FE6               	movwf	_IR_signal& (0+255),b
 10887  002228  6BE7               	clrf	(_IR_signal+1)& (0+255),b
 10888                           
 10889                           ;Test.c: 147: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10890  00222A  0E01               	movlw	1
 10891  00222C  EC48  F029         	call	_lcdInst
 10892  002230  0E68               	movlw	104
 10893  002232  0100               	movlb	0	; () banked
 10894  002234  6FAB               	movwf	??_sensorTest& (0+255),b
 10895  002236  0EE4               	movlw	228
 10896  002238                     u9187:
 10897  002238  2EE8               	decfsz	wreg,f,c
 10898  00223A  D7FE               	bra	u9187
 10899  00223C  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10900  00223E  D7FC               	bra	u9187
 10901  002240  F000               	nop	
 10902  002242  0E80               	movlw	128
 10903  002244  EC48  F029         	call	_lcdInst
 10904                           
 10905                           ;Test.c: 148: printf("IR_signal: %d ", IR_signal);
 10906  002248  0E5A               	movlw	low STR_80
 10907  00224A  0100               	movlb	0	; () banked
 10908  00224C  6F8E               	movwf	printf@f& (0+255),b
 10909  00224E  0EFE               	movlw	high STR_80
 10910  002250  0100               	movlb	0	; () banked
 10911  002252  6F8F               	movwf	(printf@f+1)& (0+255),b
 10912  002254  C0E6  F090         	movff	_IR_signal,?_printf+2
 10913  002258  C0E7  F091         	movff	_IR_signal+1,?_printf+3
 10914  00225C  EC02  F00B         	call	_printf	;wreg free
 10915                           
 10916                           ;Test.c: 149: lcdInst(0b11000000);;
 10917  002260  0EC0               	movlw	192
 10918  002262  EC48  F029         	call	_lcdInst
 10919                           
 10920                           ;Test.c: 150: printf("%d", res);
 10921  002266  0E16               	movlw	low (STR_27+14)
 10922  002268  0100               	movlb	0	; () banked
 10923  00226A  6F8E               	movwf	printf@f& (0+255),b
 10924  00226C  0EFE               	movlw	high (STR_27+14)
 10925  00226E  0100               	movlb	0	; () banked
 10926  002270  6F8F               	movwf	(printf@f+1)& (0+255),b
 10927  002272  C0AD  F090         	movff	sensorTest@res,?_printf+2
 10928  002276  C0AE  F091         	movff	sensorTest@res+1,?_printf+3
 10929  00227A  EC02  F00B         	call	_printf	;wreg free
 10930                           
 10931                           ;Test.c: 151: _delay((unsigned long)((100)*(32000000/4000.0)));
 10932  00227E  0E05               	movlw	5
 10933  002280  0100               	movlb	0	; () banked
 10934  002282  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10935  002284  0E0F               	movlw	15
 10936  002286  0100               	movlb	0	; () banked
 10937  002288  6FAB               	movwf	??_sensorTest& (0+255),b
 10938  00228A  0EF1               	movlw	241
 10939  00228C                     u9197:
 10940  00228C  2EE8               	decfsz	wreg,f,c
 10941  00228E  D7FE               	bra	u9197
 10942  002290  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10943  002292  D7FC               	bra	u9197
 10944  002294  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10945  002296  D7FA               	bra	u9197
 10946  002298                     l7585:
 10947  002298  A281               	btfss	3969,1,c	;volatile
 10948  00229A  D7A2               	goto	l7567
 10949                           
 10950                           ;Test.c: 152: }
 10951                           ;Test.c: 153: LATCbits.LATC5 = 0;
 10952  00229C  9A8B               	bcf	3979,5,c	;volatile
 10953                           
 10954                           ;Test.c: 161: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10955  00229E  0E01               	movlw	1
 10956  0022A0  EC48  F029         	call	_lcdInst
 10957  0022A4  0E68               	movlw	104
 10958  0022A6  0100               	movlb	0	; () banked
 10959  0022A8  6FAB               	movwf	??_sensorTest& (0+255),b
 10960  0022AA  0EE4               	movlw	228
 10961  0022AC                     u9207:
 10962  0022AC  2EE8               	decfsz	wreg,f,c
 10963  0022AE  D7FE               	bra	u9207
 10964  0022B0  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10965  0022B2  D7FC               	bra	u9207
 10966  0022B4  F000               	nop	
 10967  0022B6  0E80               	movlw	128
 10968  0022B8  EC48  F029         	call	_lcdInst
 10969                           
 10970                           ;Test.c: 162: printf("TST: MAGNETISM");
 10971  0022BC  0E87               	movlw	low STR_82
 10972  0022BE  0100               	movlb	0	; () banked
 10973  0022C0  6F8E               	movwf	printf@f& (0+255),b
 10974  0022C2  0EFE               	movlw	high STR_82
 10975  0022C4  0100               	movlb	0	; () banked
 10976  0022C6  6F8F               	movwf	(printf@f+1)& (0+255),b
 10977  0022C8  EC02  F00B         	call	_printf	;wreg free
 10978                           
 10979                           ;Test.c: 163: _delay((unsigned long)((100)*(32000000/4000.0)));
 10980  0022CC  0E05               	movlw	5
 10981  0022CE  0100               	movlb	0	; () banked
 10982  0022D0  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10983  0022D2  0E0F               	movlw	15
 10984  0022D4  0100               	movlb	0	; () banked
 10985  0022D6  6FAB               	movwf	??_sensorTest& (0+255),b
 10986  0022D8  0EF1               	movlw	241
 10987  0022DA                     u9217:
 10988  0022DA  2EE8               	decfsz	wreg,f,c
 10989  0022DC  D7FE               	bra	u9217
 10990  0022DE  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10991  0022E0  D7FC               	bra	u9217
 10992  0022E2  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10993  0022E4  D7FA               	bra	u9217
 10994                           
 10995                           ;Test.c: 164: while(PORTBbits.RB1 == 0){
 10996  0022E6  D021               	goto	l7603
 10997  0022E8                     l7597:
 10998                           
 10999                           ;Test.c: 165: readMAG();
 11000  0022E8  EC01  F026         	call	_readMAG	;wreg free
 11001                           
 11002                           ;Test.c: 166: lcdInst(0b10000000);;
 11003  0022EC  0E80               	movlw	128
 11004  0022EE  EC48  F029         	call	_lcdInst
 11005                           
 11006                           ;Test.c: 167: lcdInst(0b11000000);;
 11007  0022F2  0EC0               	movlw	192
 11008  0022F4  EC48  F029         	call	_lcdInst
 11009                           
 11010                           ;Test.c: 168: printf("MAG_signal: %d ", MAG_signal);
 11011  0022F8  0E2A               	movlw	low STR_83
 11012  0022FA  0100               	movlb	0	; () banked
 11013  0022FC  6F8E               	movwf	printf@f& (0+255),b
 11014  0022FE  0EFE               	movlw	high STR_83
 11015  002300  0100               	movlb	0	; () banked
 11016  002302  6F8F               	movwf	(printf@f+1)& (0+255),b
 11017  002304  C0E8  F090         	movff	_MAG_signal,?_printf+2
 11018  002308  C0E9  F091         	movff	_MAG_signal+1,?_printf+3
 11019  00230C  EC02  F00B         	call	_printf	;wreg free
 11020                           
 11021                           ;Test.c: 169: _delay((unsigned long)((100)*(32000000/4000.0)));
 11022  002310  0E05               	movlw	5
 11023  002312  0100               	movlb	0	; () banked
 11024  002314  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 11025  002316  0E0F               	movlw	15
 11026  002318  0100               	movlb	0	; () banked
 11027  00231A  6FAB               	movwf	??_sensorTest& (0+255),b
 11028  00231C  0EF1               	movlw	241
 11029  00231E                     u9227:
 11030  00231E  2EE8               	decfsz	wreg,f,c
 11031  002320  D7FE               	bra	u9227
 11032  002322  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11033  002324  D7FC               	bra	u9227
 11034  002326  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 11035  002328  D7FA               	bra	u9227
 11036  00232A                     l7603:
 11037  00232A  A281               	btfss	3969,1,c	;volatile
 11038  00232C  D7DD               	goto	l7597
 11039                           
 11040                           ;Test.c: 170: }
 11041                           ;Test.c: 175: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11042  00232E  0E01               	movlw	1
 11043  002330  EC48  F029         	call	_lcdInst
 11044  002334  0E68               	movlw	104
 11045  002336  0100               	movlb	0	; () banked
 11046  002338  6FAB               	movwf	??_sensorTest& (0+255),b
 11047  00233A  0EE4               	movlw	228
 11048  00233C                     u9237:
 11049  00233C  2EE8               	decfsz	wreg,f,c
 11050  00233E  D7FE               	bra	u9237
 11051  002340  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11052  002342  D7FC               	bra	u9237
 11053  002344  F000               	nop	
 11054  002346  0E80               	movlw	128
 11055  002348  EC48  F029         	call	_lcdInst
 11056                           
 11057                           ;Test.c: 176: printf("TST: COND");
 11058  00234C  0E87               	movlw	low STR_84
 11059  00234E  0100               	movlb	0	; () banked
 11060  002350  6F8E               	movwf	printf@f& (0+255),b
 11061  002352  0EFF               	movlw	high STR_84
 11062  002354  0100               	movlb	0	; () banked
 11063  002356  6F8F               	movwf	(printf@f+1)& (0+255),b
 11064  002358  EC02  F00B         	call	_printf	;wreg free
 11065                           
 11066                           ;Test.c: 177: _delay((unsigned long)((100)*(32000000/4000.0)));
 11067  00235C  0E05               	movlw	5
 11068  00235E  0100               	movlb	0	; () banked
 11069  002360  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 11070  002362  0E0F               	movlw	15
 11071  002364  0100               	movlb	0	; () banked
 11072  002366  6FAB               	movwf	??_sensorTest& (0+255),b
 11073  002368  0EF1               	movlw	241
 11074  00236A                     u9247:
 11075  00236A  2EE8               	decfsz	wreg,f,c
 11076  00236C  D7FE               	bra	u9247
 11077  00236E  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11078  002370  D7FC               	bra	u9247
 11079  002372  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 11080  002374  D7FA               	bra	u9247
 11081  002376                     l7615:
 11082                           
 11083                           ;Test.c: 179: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11084  002376  0E01               	movlw	1
 11085  002378  EC48  F029         	call	_lcdInst
 11086  00237C  0E68               	movlw	104
 11087  00237E  0100               	movlb	0	; () banked
 11088  002380  6FAB               	movwf	??_sensorTest& (0+255),b
 11089  002382  0EE4               	movlw	228
 11090  002384                     u9257:
 11091  002384  2EE8               	decfsz	wreg,f,c
 11092  002386  D7FE               	bra	u9257
 11093  002388  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11094  00238A  D7FC               	bra	u9257
 11095  00238C  F000               	nop	
 11096  00238E  0E80               	movlw	128
 11097  002390  EC48  F029         	call	_lcdInst
 11098                           
 11099                           ;Test.c: 180: printf("TST: COND");
 11100  002394  0E87               	movlw	low STR_84
 11101  002396  0100               	movlb	0	; () banked
 11102  002398  6F8E               	movwf	printf@f& (0+255),b
 11103  00239A  0EFF               	movlw	high STR_84
 11104  00239C  0100               	movlb	0	; () banked
 11105  00239E  6F8F               	movwf	(printf@f+1)& (0+255),b
 11106  0023A0  EC02  F00B         	call	_printf	;wreg free
 11107                           
 11108                           ;Test.c: 181: while(PORTBbits.RB1 == 0){
 11109  0023A4  D01B               	goto	l7627
 11110  0023A6                     l7623:
 11111                           
 11112                           ;Test.c: 185: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11113  0023A6  0E80               	movlw	128
 11114  0023A8  EC48  F029         	call	_lcdInst
 11115  0023AC  0EC0               	movlw	192
 11116  0023AE  EC48  F029         	call	_lcdInst
 11117                           
 11118                           ;Test.c: 186: printf("COND: %d", PORTAbits.RA2);
 11119  0023B2  0EA5               	movlw	low STR_86
 11120  0023B4  0100               	movlb	0	; () banked
 11121  0023B6  6F8E               	movwf	printf@f& (0+255),b
 11122  0023B8  0EFF               	movlw	high STR_86
 11123  0023BA  0100               	movlb	0	; () banked
 11124  0023BC  6F8F               	movwf	(printf@f+1)& (0+255),b
 11125  0023BE  A480               	btfss	3968,2,c	;volatile
 11126  0023C0  D004               	goto	u6080
 11127  0023C2  0100               	movlb	0	; () banked
 11128  0023C4  6BAB               	clrf	??_sensorTest& (0+255),b
 11129  0023C6  2BAB               	incf	??_sensorTest& (0+255),f,b
 11130  0023C8  D002               	goto	u6088
 11131  0023CA                     u6080:
 11132  0023CA  0100               	movlb	0	; () banked
 11133  0023CC  6BAB               	clrf	??_sensorTest& (0+255),b
 11134  0023CE                     u6088:
 11135  0023CE  0100               	movlb	0	; () banked
 11136  0023D0  51AB               	movf	??_sensorTest& (0+255),w,b
 11137  0023D2  0100               	movlb	0	; () banked
 11138  0023D4  6F90               	movwf	(?_printf+2)& (0+255),b
 11139  0023D6  6B91               	clrf	(?_printf+3)& (0+255),b
 11140  0023D8  EC02  F00B         	call	_printf	;wreg free
 11141  0023DC                     l7627:
 11142  0023DC  A281               	btfss	3969,1,c	;volatile
 11143  0023DE  D7E3               	goto	l7623
 11144                           
 11145                           ;Test.c: 187: }
 11146                           ;Test.c: 188: if(PORTB >> 4 == 0b1111){
 11147  0023E0  3881               	swapf	3969,w,c	;volatile
 11148  0023E2  0B0F               	andlw	15
 11149  0023E4  0A0F               	xorlw	15
 11150  0023E6  B4D8               	btfsc	status,2,c
 11151  0023E8  0012               	return	
 11152                           
 11153                           ;Test.c: 191: else{
 11154                           ;Test.c: 192: LATAbits.LATA3 = 1;
 11155                           
 11156                           ;Test.c: 190: }
 11157                           
 11158                           ;Test.c: 189: break;
 11159  0023EA  8689               	bsf	3977,3,c	;volatile
 11160                           
 11161                           ;Test.c: 193: while(PORTBbits.RB1 == 1){
 11162  0023EC  D01B               	goto	l7639
 11163  0023EE                     l7635:
 11164                           
 11165                           ;Test.c: 195: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11166  0023EE  0E80               	movlw	128
 11167  0023F0  EC48  F029         	call	_lcdInst
 11168  0023F4  0EC0               	movlw	192
 11169  0023F6  EC48  F029         	call	_lcdInst
 11170                           
 11171                           ;Test.c: 196: printf("COND: %d", PORTAbits.RA2);
 11172  0023FA  0EA5               	movlw	low STR_86
 11173  0023FC  0100               	movlb	0	; () banked
 11174  0023FE  6F8E               	movwf	printf@f& (0+255),b
 11175  002400  0EFF               	movlw	high STR_86
 11176  002402  0100               	movlb	0	; () banked
 11177  002404  6F8F               	movwf	(printf@f+1)& (0+255),b
 11178  002406  A480               	btfss	3968,2,c	;volatile
 11179  002408  D004               	goto	u6110
 11180  00240A  0100               	movlb	0	; () banked
 11181  00240C  6BAB               	clrf	??_sensorTest& (0+255),b
 11182  00240E  2BAB               	incf	??_sensorTest& (0+255),f,b
 11183  002410  D002               	goto	u6118
 11184  002412                     u6110:
 11185  002412  0100               	movlb	0	; () banked
 11186  002414  6BAB               	clrf	??_sensorTest& (0+255),b
 11187  002416                     u6118:
 11188  002416  0100               	movlb	0	; () banked
 11189  002418  51AB               	movf	??_sensorTest& (0+255),w,b
 11190  00241A  0100               	movlb	0	; () banked
 11191  00241C  6F90               	movwf	(?_printf+2)& (0+255),b
 11192  00241E  6B91               	clrf	(?_printf+3)& (0+255),b
 11193  002420  EC02  F00B         	call	_printf	;wreg free
 11194  002424                     l7639:
 11195  002424  B281               	btfsc	3969,1,c	;volatile
 11196  002426  D7E3               	goto	l7635
 11197                           
 11198                           ;Test.c: 197: }
 11199                           ;Test.c: 198: LATAbits.LATA3 = !1;
 11200  002428  9689               	bcf	3977,3,c	;volatile
 11201  00242A  D7A5               	goto	l7615
 11202  00242C                     __end_of_sensorTest:
 11203                           	opt stack 0
 11204                           tblptru	equ	0xFF8
 11205                           tblptrh	equ	0xFF7
 11206                           tblptrl	equ	0xFF6
 11207                           tablat	equ	0xFF5
 11208                           prodh	equ	0xFF4
 11209                           prodl	equ	0xFF3
 11210                           intcon	equ	0xFF2
 11211                           intcon2	equ	0xFF1
 11212                           intcon3	equ	0xFF0
 11213                           postinc0	equ	0xFEE
 11214                           wreg	equ	0xFE8
 11215                           postdec1	equ	0xFE5
 11216                           fsr1l	equ	0xFE1
 11217                           indf2	equ	0xFDF
 11218                           postinc2	equ	0xFDE
 11219                           postdec2	equ	0xFDD
 11220                           fsr2h	equ	0xFDA
 11221                           fsr2l	equ	0xFD9
 11222                           status	equ	0xFD8
 11223                           
 11224 ;; *************** function _readMAG *****************
 11225 ;; Defined at:
 11226 ;;		line 29 in file "ADCFunctionality.c"
 11227 ;; Parameters:    Size  Location     Type
 11228 ;;		None
 11229 ;; Auto vars:     Size  Location     Type
 11230 ;;  res             2    4[BANK0 ] int 
 11231 ;; Return value:  Size  Location     Type
 11232 ;;                  1    wreg      void 
 11233 ;; Registers used:
 11234 ;;		wreg, status,2, status,0, cstack
 11235 ;; Tracked objects:
 11236 ;;		On entry : 0/0
 11237 ;;		On exit  : 0/0
 11238 ;;		Unchanged: 0/0
 11239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11240 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11241 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11242 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11243 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11244 ;;Total ram usage:        4 bytes
 11245 ;; Hardware stack levels used:    1
 11246 ;; Hardware stack levels required when called:    8
 11247 ;; This function calls:
 11248 ;;		_readADC
 11249 ;; This function is called by:
 11250 ;;		_getMAG
 11251 ;;		_sensorTest
 11252 ;; This function uses a non-reentrant model
 11253 ;;
 11254                           
 11255                           	psect	text38
 11256  004C02                     __ptext38:
 11257                           	opt stack 0
 11258  004C02                     _readMAG:
 11259                           	opt stack 19
 11260                           
 11261                           ;ADCFunctionality.c: 30: readADC(1);
 11262                           
 11263                           ;incstack = 0
 11264  004C02  0E01               	movlw	1
 11265  004C04  EC3F  F028         	call	_readADC
 11266                           
 11267                           ;ADCFunctionality.c: 31: int res = ADRESH<<8 | ADRESL;
 11268  004C08  50C3               	movf	4035,w,c	;volatile
 11269  004C0A  CFC4 F082          	movff	4036,??_readMAG	;volatile
 11270  004C0E  0100               	movlb	0	; () banked
 11271  004C10  6B83               	clrf	(??_readMAG+1)& (0+255),b
 11272  004C12  C082  F083         	movff	??_readMAG,??_readMAG+1
 11273  004C16  0100               	movlb	0	; () banked
 11274  004C18  6B82               	clrf	??_readMAG& (0+255),b
 11275  004C1A  0100               	movlb	0	; () banked
 11276  004C1C  1182               	iorwf	??_readMAG& (0+255),w,b
 11277  004C1E  0100               	movlb	0	; () banked
 11278  004C20  6F84               	movwf	readMAG@res& (0+255),b
 11279  004C22  0100               	movlb	0	; () banked
 11280  004C24  5183               	movf	(??_readMAG+1)& (0+255),w,b
 11281  004C26  0100               	movlb	0	; () banked
 11282  004C28  6F85               	movwf	(readMAG@res+1)& (0+255),b
 11283                           
 11284                           ; BSR set to: 0
 11285                           ;ADCFunctionality.c: 32: MAG_signal = (res < 150) ? 1 : 0;
 11286  004C2A  0100               	movlb	0	; () banked
 11287  004C2C  BF85               	btfsc	(readMAG@res+1)& (0+255),7,b
 11288  004C2E  D008               	goto	u4511
 11289  004C30  0100               	movlb	0	; () banked
 11290  004C32  5185               	movf	(readMAG@res+1)& (0+255),w,b
 11291  004C34  E107               	bnz	u4510
 11292  004C36  0E96               	movlw	150
 11293  004C38  0100               	movlb	0	; () banked
 11294  004C3A  5D84               	subwf	readMAG@res& (0+255),w,b
 11295  004C3C  B0D8               	btfsc	status,0,c
 11296  004C3E  D002               	goto	u4510
 11297  004C40                     u4511:
 11298  004C40  0E01               	movlw	1
 11299  004C42  D001               	goto	u4520
 11300  004C44                     u4510:
 11301  004C44  0E00               	movlw	0
 11302  004C46                     u4520:
 11303  004C46  0100               	movlb	0	; () banked
 11304  004C48  6FE8               	movwf	_MAG_signal& (0+255),b
 11305  004C4A  6BE9               	clrf	(_MAG_signal+1)& (0+255),b
 11306                           
 11307                           ; BSR set to: 0
 11308  004C4C  0012               	return		;funcret
 11309  004C4E                     __end_of_readMAG:
 11310                           	opt stack 0
 11311                           tblptru	equ	0xFF8
 11312                           tblptrh	equ	0xFF7
 11313                           tblptrl	equ	0xFF6
 11314                           tablat	equ	0xFF5
 11315                           prodh	equ	0xFF4
 11316                           prodl	equ	0xFF3
 11317                           intcon	equ	0xFF2
 11318                           intcon2	equ	0xFF1
 11319                           intcon3	equ	0xFF0
 11320                           postinc0	equ	0xFEE
 11321                           wreg	equ	0xFE8
 11322                           postdec1	equ	0xFE5
 11323                           fsr1l	equ	0xFE1
 11324                           indf2	equ	0xFDF
 11325                           postinc2	equ	0xFDE
 11326                           postdec2	equ	0xFDD
 11327                           fsr2h	equ	0xFDA
 11328                           fsr2l	equ	0xFD9
 11329                           status	equ	0xFD8
 11330                           
 11331 ;; *************** function _algorithmTest *****************
 11332 ;; Defined at:
 11333 ;;		line 80 in file "Test.c"
 11334 ;; Parameters:    Size  Location     Type
 11335 ;;		None
 11336 ;; Auto vars:     Size  Location     Type
 11337 ;;		None
 11338 ;; Return value:  Size  Location     Type
 11339 ;;                  1    wreg      void 
 11340 ;; Registers used:
 11341 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11342 ;; Tracked objects:
 11343 ;;		On entry : 0/0
 11344 ;;		On exit  : 0/0
 11345 ;;		Unchanged: 0/0
 11346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11347 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11348 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11349 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11350 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11351 ;;Total ram usage:        2 bytes
 11352 ;; Hardware stack levels used:    1
 11353 ;; Hardware stack levels required when called:   10
 11354 ;; This function calls:
 11355 ;;		_lcdInst
 11356 ;;		_printf
 11357 ;; This function is called by:
 11358 ;;		_Test
 11359 ;; This function uses a non-reentrant model
 11360 ;;
 11361                           
 11362                           	psect	text39
 11363  003F0C                     __ptext39:
 11364                           	opt stack 0
 11365  003F0C                     _algorithmTest:
 11366                           	opt stack 19
 11367                           
 11368                           ;Test.c: 82: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 11369                           
 11370                           ; BSR set to: 0
 11371                           ;incstack = 0
 11372  003F0C  0E01               	movlw	1
 11373  003F0E  EC48  F029         	call	_lcdInst
 11374  003F12  0E68               	movlw	104
 11375  003F14  0100               	movlb	0	; () banked
 11376  003F16  6FAB               	movwf	??_algorithmTest& (0+255),b
 11377  003F18  0EE4               	movlw	228
 11378  003F1A                     u9267:
 11379  003F1A  2EE8               	decfsz	wreg,f,c
 11380  003F1C  D7FE               	bra	u9267
 11381  003F1E  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 11382  003F20  D7FC               	bra	u9267
 11383  003F22  F000               	nop	
 11384  003F24  0E80               	movlw	128
 11385  003F26  EC48  F029         	call	_lcdInst
 11386                           
 11387                           ;Test.c: 83: printf("ALGORITHM TEST");
 11388  003F2A  0ED2               	movlw	low STR_70
 11389  003F2C  0100               	movlb	0	; () banked
 11390  003F2E  6F8E               	movwf	printf@f& (0+255),b
 11391  003F30  0EFE               	movlw	high STR_70
 11392  003F32  0100               	movlb	0	; () banked
 11393  003F34  6F8F               	movwf	(printf@f+1)& (0+255),b
 11394  003F36  EC02  F00B         	call	_printf	;wreg free
 11395                           
 11396                           ;Test.c: 84: lcdInst(0b11000000);;
 11397  003F3A  0EC0               	movlw	192
 11398  003F3C  EC48  F029         	call	_lcdInst
 11399                           
 11400                           ;Test.c: 85: printf("PUSH TO START");
 11401  003F40  0E0B               	movlw	low STR_71
 11402  003F42  0100               	movlb	0	; () banked
 11403  003F44  6F8E               	movwf	printf@f& (0+255),b
 11404  003F46  0EFF               	movlw	high STR_71
 11405  003F48  0100               	movlb	0	; () banked
 11406  003F4A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11407  003F4C  EC02  F00B         	call	_printf	;wreg free
 11408                           
 11409                           ;Test.c: 86: _delay((unsigned long)((100)*(32000000/4000.0)));
 11410  003F50  0E05               	movlw	5
 11411  003F52  0100               	movlb	0	; () banked
 11412  003F54  6FAC               	movwf	(??_algorithmTest+1)& (0+255),b
 11413  003F56  0E0F               	movlw	15
 11414  003F58  0100               	movlb	0	; () banked
 11415  003F5A  6FAB               	movwf	??_algorithmTest& (0+255),b
 11416  003F5C  0EF1               	movlw	241
 11417  003F5E                     u9277:
 11418  003F5E  2EE8               	decfsz	wreg,f,c
 11419  003F60  D7FE               	bra	u9277
 11420  003F62  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 11421  003F64  D7FC               	bra	u9277
 11422  003F66  2FAC               	decfsz	(??_algorithmTest+1)& (0+255),f,b
 11423  003F68  D7FA               	bra	u9277
 11424  003F6A                     l1163:
 11425  003F6A  A281               	btfss	3969,1,c	;volatile
 11426  003F6C  D7FE               	goto	l1163
 11427  003F6E                     l1166:
 11428  003F6E  B281               	btfsc	3969,1,c	;volatile
 11429  003F70  D7FE               	goto	l1166
 11430                           
 11431                           ;Test.c: 89: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 11432  003F72  0E01               	movlw	1
 11433  003F74  EC48  F029         	call	_lcdInst
 11434  003F78  0E68               	movlw	104
 11435  003F7A  0100               	movlb	0	; () banked
 11436  003F7C  6FAB               	movwf	??_algorithmTest& (0+255),b
 11437  003F7E  0EE4               	movlw	228
 11438  003F80                     u9287:
 11439  003F80  2EE8               	decfsz	wreg,f,c
 11440  003F82  D7FE               	bra	u9287
 11441  003F84  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 11442  003F86  D7FC               	bra	u9287
 11443  003F88  F000               	nop	
 11444  003F8A  0E80               	movlw	128
 11445  003F8C  EC48  F029         	call	_lcdInst
 11446                           
 11447                           ;Test.c: 94: printf("ALG1: 9 POPNOTAB");
 11448  003F90  0E5F               	movlw	low STR_72
 11449  003F92  0100               	movlb	0	; () banked
 11450  003F94  6F8E               	movwf	printf@f& (0+255),b
 11451  003F96  0EFC               	movlw	high STR_72
 11452  003F98  0100               	movlb	0	; () banked
 11453  003F9A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11454  003F9C  EC02  F00B         	call	_printf	;wreg free
 11455                           
 11456                           ;Test.c: 101: printf("ALG2: 12 CANS");
 11457  003FA0  0EEF               	movlw	low STR_73
 11458  003FA2  0100               	movlb	0	; () banked
 11459  003FA4  6F8E               	movwf	printf@f& (0+255),b
 11460  003FA6  0EFE               	movlw	high STR_73
 11461  003FA8  0100               	movlb	0	; () banked
 11462  003FAA  6F8F               	movwf	(printf@f+1)& (0+255),b
 11463  003FAC  EC02  F00B         	call	_printf	;wreg free
 11464                           
 11465                           ;Test.c: 110: printf("ALG3: 1 CAN");
 11466  003FB0  0E4F               	movlw	low STR_74
 11467  003FB2  0100               	movlb	0	; () banked
 11468  003FB4  6F8E               	movwf	printf@f& (0+255),b
 11469  003FB6  0EFF               	movlw	high STR_74
 11470  003FB8  0100               	movlb	0	; () banked
 11471  003FBA  6F8F               	movwf	(printf@f+1)& (0+255),b
 11472  003FBC  EC02  F00B         	call	_printf	;wreg free
 11473                           
 11474                           ;Test.c: 116: printf("ALG4: ALL CANS");
 11475  003FC0  0EB4               	movlw	low STR_75
 11476  003FC2  0100               	movlb	0	; () banked
 11477  003FC4  6F8E               	movwf	printf@f& (0+255),b
 11478  003FC6  0EFE               	movlw	high STR_75
 11479  003FC8  0100               	movlb	0	; () banked
 11480  003FCA  6F8F               	movwf	(printf@f+1)& (0+255),b
 11481  003FCC  EC02  F00B         	call	_printf	;wreg free
 11482                           
 11483                           ;Test.c: 121: printf("ALG5: NO CANS");
 11484  003FD0  0EFD               	movlw	low STR_76
 11485  003FD2  0100               	movlb	0	; () banked
 11486  003FD4  6F8E               	movwf	printf@f& (0+255),b
 11487  003FD6  0EFE               	movlw	high STR_76
 11488  003FD8  0100               	movlb	0	; () banked
 11489  003FDA  6F8F               	movwf	(printf@f+1)& (0+255),b
 11490  003FDC  EC02  F00B         	call	_printf	;wreg free
 11491  003FE0  0012               	return		;funcret
 11492  003FE2                     __end_of_algorithmTest:
 11493                           	opt stack 0
 11494                           tblptru	equ	0xFF8
 11495                           tblptrh	equ	0xFF7
 11496                           tblptrl	equ	0xFF6
 11497                           tablat	equ	0xFF5
 11498                           prodh	equ	0xFF4
 11499                           prodl	equ	0xFF3
 11500                           intcon	equ	0xFF2
 11501                           intcon2	equ	0xFF1
 11502                           intcon3	equ	0xFF0
 11503                           postinc0	equ	0xFEE
 11504                           wreg	equ	0xFE8
 11505                           postdec1	equ	0xFE5
 11506                           fsr1l	equ	0xFE1
 11507                           indf2	equ	0xFDF
 11508                           postinc2	equ	0xFDE
 11509                           postdec2	equ	0xFDD
 11510                           fsr2h	equ	0xFDA
 11511                           fsr2l	equ	0xFD9
 11512                           status	equ	0xFD8
 11513                           
 11514 ;; *************** function _actuatorTest *****************
 11515 ;; Defined at:
 11516 ;;		line 203 in file "Test.c"
 11517 ;; Parameters:    Size  Location     Type
 11518 ;;		None
 11519 ;; Auto vars:     Size  Location     Type
 11520 ;;  i               1   45[BANK0 ] unsigned char 
 11521 ;;  i               1   67[BANK0 ] unsigned char 
 11522 ;;  i               1   66[BANK0 ] unsigned char 
 11523 ;;  i               1   65[BANK0 ] unsigned char 
 11524 ;;  i               1   64[BANK0 ] unsigned char 
 11525 ;;  i               1   63[BANK0 ] unsigned char 
 11526 ;;  i               1   62[BANK0 ] unsigned char 
 11527 ;;  i               1   61[BANK0 ] unsigned char 
 11528 ;;  i               1   60[BANK0 ] unsigned char 
 11529 ;;  i               1   59[BANK0 ] unsigned char 
 11530 ;;  i               1   58[BANK0 ] unsigned char 
 11531 ;;  i               1   57[BANK0 ] unsigned char 
 11532 ;;  i               1   56[BANK0 ] unsigned char 
 11533 ;;  i               1   55[BANK0 ] unsigned char 
 11534 ;;  i               1   54[BANK0 ] unsigned char 
 11535 ;;  i               1   53[BANK0 ] unsigned char 
 11536 ;;  i               1   52[BANK0 ] unsigned char 
 11537 ;;  i               1   51[BANK0 ] unsigned char 
 11538 ;;  i               1   50[BANK0 ] unsigned char 
 11539 ;;  i               1   49[BANK0 ] unsigned char 
 11540 ;;  i               1   48[BANK0 ] unsigned char 
 11541 ;;  i               1   47[BANK0 ] unsigned char 
 11542 ;;  i               1   46[BANK0 ] unsigned char 
 11543 ;;  i               2   68[BANK0 ] int 
 11544 ;; Return value:  Size  Location     Type
 11545 ;;                  1    wreg      void 
 11546 ;; Registers used:
 11547 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11548 ;; Tracked objects:
 11549 ;;		On entry : 0/0
 11550 ;;		On exit  : 0/0
 11551 ;;		Unchanged: 0/0
 11552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11553 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11554 ;;      Locals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11555 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11556 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11557 ;;Total ram usage:       27 bytes
 11558 ;; Hardware stack levels used:    1
 11559 ;; Hardware stack levels required when called:   10
 11560 ;; This function calls:
 11561 ;;		_lcdInst
 11562 ;;		_printf
 11563 ;;		_updateServoPosition
 11564 ;; This function is called by:
 11565 ;;		_Test
 11566 ;; This function uses a non-reentrant model
 11567 ;;
 11568                           
 11569                           	psect	text40
 11570  000012                     __ptext40:
 11571                           	opt stack 0
 11572  000012                     _actuatorTest:
 11573                           	opt stack 19
 11574                           
 11575                           ;Test.c: 205: int i = 0;
 11576                           
 11577                           ;incstack = 0
 11578  000012  0E00               	movlw	0
 11579  000014  0100               	movlb	0	; () banked
 11580  000016  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 11581  000018  0E00               	movlw	0
 11582  00001A  6FC4               	movwf	actuatorTest@i& (0+255),b
 11583                           
 11584                           ; BSR set to: 0
 11585                           ;Test.c: 207: (INTCONbits.GIE = 1);
 11586  00001C  8EF2               	bsf	intcon,7,c	;volatile
 11587                           
 11588                           ; BSR set to: 0
 11589                           ;Test.c: 208: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11590  00001E  0E01               	movlw	1
 11591  000020  EC48  F029         	call	_lcdInst
 11592  000024  0E68               	movlw	104
 11593  000026  0100               	movlb	0	; () banked
 11594  000028  6FAB               	movwf	??_actuatorTest& (0+255),b
 11595  00002A  0EE4               	movlw	228
 11596  00002C                     u9297:
 11597  00002C  2EE8               	decfsz	wreg,f,c
 11598  00002E  D7FE               	bra	u9297
 11599  000030  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11600  000032  D7FC               	bra	u9297
 11601  000034  F000               	nop	
 11602  000036  0E80               	movlw	128
 11603  000038  EC48  F029         	call	_lcdInst
 11604                           
 11605                           ;Test.c: 209: printf("ACTUATORS");
 11606  00003C  0E91               	movlw	low STR_88
 11607  00003E  0100               	movlb	0	; () banked
 11608  000040  6F8E               	movwf	printf@f& (0+255),b
 11609  000042  0EFF               	movlw	high STR_88
 11610  000044  0100               	movlb	0	; () banked
 11611  000046  6F8F               	movwf	(printf@f+1)& (0+255),b
 11612  000048  EC02  F00B         	call	_printf	;wreg free
 11613                           
 11614                           ;Test.c: 210: lcdInst(0b11000000);;
 11615  00004C  0EC0               	movlw	192
 11616  00004E  EC48  F029         	call	_lcdInst
 11617                           
 11618                           ;Test.c: 211: printf("PUSH TO START");
 11619  000052  0E0B               	movlw	low STR_71
 11620  000054  0100               	movlb	0	; () banked
 11621  000056  6F8E               	movwf	printf@f& (0+255),b
 11622  000058  0EFF               	movlw	high STR_71
 11623  00005A  0100               	movlb	0	; () banked
 11624  00005C  6F8F               	movwf	(printf@f+1)& (0+255),b
 11625  00005E  EC02  F00B         	call	_printf	;wreg free
 11626                           
 11627                           ;Test.c: 212: _delay((unsigned long)((100)*(32000000/4000.0)));
 11628  000062  0E05               	movlw	5
 11629  000064  0100               	movlb	0	; () banked
 11630  000066  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 11631  000068  0E0F               	movlw	15
 11632  00006A  0100               	movlb	0	; () banked
 11633  00006C  6FAB               	movwf	??_actuatorTest& (0+255),b
 11634  00006E  0EF1               	movlw	241
 11635  000070                     u9307:
 11636  000070  2EE8               	decfsz	wreg,f,c
 11637  000072  D7FE               	bra	u9307
 11638  000074  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11639  000076  D7FC               	bra	u9307
 11640  000078  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 11641  00007A  D7FA               	bra	u9307
 11642  00007C                     l1198:
 11643  00007C  A281               	btfss	3969,1,c	;volatile
 11644  00007E  D7FE               	goto	l1198
 11645  000080                     l1201:
 11646  000080  B281               	btfsc	3969,1,c	;volatile
 11647  000082  D7FE               	goto	l1201
 11648                           
 11649                           ;Test.c: 215: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11650  000084  0E01               	movlw	1
 11651  000086  EC48  F029         	call	_lcdInst
 11652  00008A  0E68               	movlw	104
 11653  00008C  0100               	movlb	0	; () banked
 11654  00008E  6FAB               	movwf	??_actuatorTest& (0+255),b
 11655  000090  0EE4               	movlw	228
 11656  000092                     u9317:
 11657  000092  2EE8               	decfsz	wreg,f,c
 11658  000094  D7FE               	bra	u9317
 11659  000096  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11660  000098  D7FC               	bra	u9317
 11661  00009A  F000               	nop	
 11662  00009C  0E80               	movlw	128
 11663  00009E  EC48  F029         	call	_lcdInst
 11664                           
 11665                           ;Test.c: 220: printf("TST: DC MOTORS");
 11666  0000A2  0EC3               	movlw	low STR_90
 11667  0000A4  0100               	movlb	0	; () banked
 11668  0000A6  6F8E               	movwf	printf@f& (0+255),b
 11669  0000A8  0EFE               	movlw	high STR_90
 11670  0000AA  0100               	movlb	0	; () banked
 11671  0000AC  6F8F               	movwf	(printf@f+1)& (0+255),b
 11672  0000AE  EC02  F00B         	call	_printf	;wreg free
 11673                           
 11674                           ;Test.c: 221: lcdInst(0b11000000);;
 11675  0000B2  0EC0               	movlw	192
 11676  0000B4  EC48  F029         	call	_lcdInst
 11677                           
 11678                           ;Test.c: 222: printf("PIN RA5 HIGH.");
 11679  0000B8  0EE1               	movlw	low STR_91
 11680  0000BA  0100               	movlb	0	; () banked
 11681  0000BC  6F8E               	movwf	printf@f& (0+255),b
 11682  0000BE  0EFE               	movlw	high STR_91
 11683  0000C0  0100               	movlb	0	; () banked
 11684  0000C2  6F8F               	movwf	(printf@f+1)& (0+255),b
 11685  0000C4  EC02  F00B         	call	_printf	;wreg free
 11686                           
 11687                           ;Test.c: 223: LATBbits.LATB2 = 1;
 11688  0000C8  848A               	bsf	3978,2,c	;volatile
 11689                           
 11690                           ;Test.c: 224: for(i=0;i<5;i++){for(char i=0;i<100;i++){_delay((unsigned long)((10)*(3200
      +                          0000/4000.0)));};}
 11691  0000CA  0E00               	movlw	0
 11692  0000CC  0100               	movlb	0	; () banked
 11693  0000CE  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 11694  0000D0  0E00               	movlw	0
 11695  0000D2  6FC4               	movwf	actuatorTest@i& (0+255),b
 11696                           
 11697                           ; BSR set to: 0
 11698  0000D4  0100               	movlb	0	; () banked
 11699  0000D6  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11700  0000D8  D008               	goto	l7679
 11701  0000DA  0100               	movlb	0	; () banked
 11702  0000DC  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11703  0000DE  E123               	bnz	l1205
 11704  0000E0  0E05               	movlw	5
 11705  0000E2  0100               	movlb	0	; () banked
 11706  0000E4  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 11707  0000E6  B0D8               	btfsc	status,0,c
 11708  0000E8  D01E               	goto	l1205
 11709  0000EA                     l7679:
 11710                           
 11711                           ; BSR set to: 0
 11712  0000EA  0E00               	movlw	0
 11713  0000EC  0100               	movlb	0	; () banked
 11714  0000EE  6FAD               	movwf	actuatorTest@i_1733& (0+255),b
 11715  0000F0                     l7681:
 11716                           
 11717                           ; BSR set to: 0
 11718  0000F0  0E63               	movlw	99
 11719  0000F2  0100               	movlb	0	; () banked
 11720  0000F4  65AD               	cpfsgt	actuatorTest@i_1733& (0+255),b
 11721  0000F6  D001               	goto	l7685
 11722  0000F8  D00C               	goto	l7689
 11723  0000FA                     l7685:
 11724                           
 11725                           ; BSR set to: 0
 11726  0000FA  0E68               	movlw	104
 11727  0000FC  0100               	movlb	0	; () banked
 11728  0000FE  6FAB               	movwf	??_actuatorTest& (0+255),b
 11729  000100  0EE4               	movlw	228
 11730  000102                     u9327:
 11731  000102  2EE8               	decfsz	wreg,f,c
 11732  000104  D7FE               	bra	u9327
 11733  000106  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11734  000108  D7FC               	bra	u9327
 11735  00010A  F000               	nop	
 11736  00010C  0100               	movlb	0	; () banked
 11737  00010E  2BAD               	incf	actuatorTest@i_1733& (0+255),f,b
 11738  000110  D7EF               	goto	l7681
 11739  000112                     l7689:
 11740                           
 11741                           ; BSR set to: 0
 11742  000112  0100               	movlb	0	; () banked
 11743  000114  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 11744  000116  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 11745                           
 11746                           ; BSR set to: 0
 11747  000118  0100               	movlb	0	; () banked
 11748  00011A  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11749  00011C  D7E6               	goto	l7679
 11750  00011E  0100               	movlb	0	; () banked
 11751  000120  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11752  000122  E101               	bnz	u6180
 11753  000124  D7DD               	goto	L10
 11754  000126                     u6180:
 11755  000126                     l1205:
 11756                           
 11757                           ; BSR set to: 0
 11758                           ;Test.c: 225: LATBbits.LATB2 = 0;
 11759  000126  948A               	bcf	3978,2,c	;volatile
 11760                           
 11761                           ; BSR set to: 0
 11762                           ;Test.c: 226: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11763  000128  0E01               	movlw	1
 11764  00012A  EC48  F029         	call	_lcdInst
 11765  00012E  0E68               	movlw	104
 11766  000130  0100               	movlb	0	; () banked
 11767  000132  6FAB               	movwf	??_actuatorTest& (0+255),b
 11768  000134  0EE4               	movlw	228
 11769  000136                     u9337:
 11770  000136  2EE8               	decfsz	wreg,f,c
 11771  000138  D7FE               	bra	u9337
 11772  00013A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11773  00013C  D7FC               	bra	u9337
 11774  00013E  F000               	nop	
 11775  000140  0E80               	movlw	128
 11776  000142  EC48  F029         	call	_lcdInst
 11777                           
 11778                           ;Test.c: 232: printf("TST: COND SOLN'D");
 11779  000146  0E70               	movlw	low STR_92
 11780  000148  0100               	movlb	0	; () banked
 11781  00014A  6F8E               	movwf	printf@f& (0+255),b
 11782  00014C  0EFC               	movlw	high STR_92
 11783  00014E  0100               	movlb	0	; () banked
 11784  000150  6F8F               	movwf	(printf@f+1)& (0+255),b
 11785  000152  EC02  F00B         	call	_printf	;wreg free
 11786                           
 11787                           ;Test.c: 233: lcdInst(0b11000000);;
 11788  000156  0EC0               	movlw	192
 11789  000158  EC48  F029         	call	_lcdInst
 11790                           
 11791                           ;Test.c: 234: printf("PIN RA3...");
 11792  00015C  0E5B               	movlw	low STR_93
 11793  00015E  0100               	movlb	0	; () banked
 11794  000160  6F8E               	movwf	printf@f& (0+255),b
 11795  000162  0EFF               	movlw	high STR_93
 11796  000164  0100               	movlb	0	; () banked
 11797  000166  6F8F               	movwf	(printf@f+1)& (0+255),b
 11798  000168  EC02  F00B         	call	_printf	;wreg free
 11799                           
 11800                           ;Test.c: 235: for(i=0;i<5;i++){
 11801  00016C  0E00               	movlw	0
 11802  00016E  0100               	movlb	0	; () banked
 11803  000170  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 11804  000172  0E00               	movlw	0
 11805  000174  6FC4               	movwf	actuatorTest@i& (0+255),b
 11806                           
 11807                           ; BSR set to: 0
 11808  000176  0100               	movlb	0	; () banked
 11809  000178  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11810  00017A  D008               	goto	l1208
 11811  00017C  0100               	movlb	0	; () banked
 11812  00017E  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11813  000180  E12C               	bnz	l1209
 11814  000182  0E05               	movlw	5
 11815  000184  0100               	movlb	0	; () banked
 11816  000186  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 11817  000188  B0D8               	btfsc	status,0,c
 11818  00018A  D027               	goto	l1209
 11819  00018C                     l1208:
 11820                           
 11821                           ; BSR set to: 0
 11822                           ;Test.c: 236: LATAbits.LATA3 = 1;
 11823  00018C  8689               	bsf	3977,3,c	;volatile
 11824                           
 11825                           ; BSR set to: 0
 11826                           ;Test.c: 237: _delay((unsigned long)((300)*(32000000/4000.0)));
 11827  00018E  0E0D               	movlw	13
 11828  000190  0100               	movlb	0	; () banked
 11829  000192  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 11830  000194  0E2D               	movlw	45
 11831  000196  0100               	movlb	0	; () banked
 11832  000198  6FAB               	movwf	??_actuatorTest& (0+255),b
 11833  00019A  0ED7               	movlw	215
 11834  00019C                     u9347:
 11835  00019C  2EE8               	decfsz	wreg,f,c
 11836  00019E  D7FE               	bra	u9347
 11837  0001A0  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11838  0001A2  D7FC               	bra	u9347
 11839  0001A4  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 11840  0001A6  D7FA               	bra	u9347
 11841  0001A8  D000               	nop2	
 11842                           
 11843                           ;Test.c: 238: LATAbits.LATA3 = !1;
 11844  0001AA  9689               	bcf	3977,3,c	;volatile
 11845                           
 11846                           ;Test.c: 239: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 11847  0001AC  0E1D               	movlw	29
 11848  0001AE  0100               	movlb	0	; () banked
 11849  0001B0  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 11850  0001B2  0E69               	movlw	105
 11851  0001B4  0100               	movlb	0	; () banked
 11852  0001B6  6FAB               	movwf	??_actuatorTest& (0+255),b
 11853  0001B8  0EA5               	movlw	165
 11854  0001BA                     u9357:
 11855  0001BA  2EE8               	decfsz	wreg,f,c
 11856  0001BC  D7FE               	bra	u9357
 11857  0001BE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11858  0001C0  D7FC               	bra	u9357
 11859  0001C2  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 11860  0001C4  D7FA               	bra	u9357
 11861  0001C6  0100               	movlb	0	; () banked
 11862  0001C8  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 11863  0001CA  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 11864  0001CC  0100               	movlb	0	; () banked
 11865  0001CE  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11866  0001D0  D7DD               	goto	l1208
 11867  0001D2  0100               	movlb	0	; () banked
 11868  0001D4  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11869  0001D6  E101               	bnz	u6200
 11870  0001D8  D7D4               	goto	L11
 11871  0001DA                     u6200:
 11872  0001DA                     l1209:
 11873                           
 11874                           ; BSR set to: 0
 11875                           ;Test.c: 240: }
 11876                           ;Test.c: 241: LATAbits.LATA3 = !1;
 11877  0001DA  9689               	bcf	3977,3,c	;volatile
 11878                           
 11879                           ; BSR set to: 0
 11880                           ;Test.c: 242: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11881  0001DC  0E01               	movlw	1
 11882  0001DE  EC48  F029         	call	_lcdInst
 11883  0001E2  0E68               	movlw	104
 11884  0001E4  0100               	movlb	0	; () banked
 11885  0001E6  6FAB               	movwf	??_actuatorTest& (0+255),b
 11886  0001E8  0EE4               	movlw	228
 11887  0001EA                     u9367:
 11888  0001EA  2EE8               	decfsz	wreg,f,c
 11889  0001EC  D7FE               	bra	u9367
 11890  0001EE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11891  0001F0  D7FC               	bra	u9367
 11892  0001F2  F000               	nop	
 11893  0001F4  0E80               	movlw	128
 11894  0001F6  EC48  F029         	call	_lcdInst
 11895                           
 11896                           ;Test.c: 248: printf("TST: PUSH SOLN'D");
 11897  0001FA  0E81               	movlw	low STR_94
 11898  0001FC  0100               	movlb	0	; () banked
 11899  0001FE  6F8E               	movwf	printf@f& (0+255),b
 11900  000200  0EFC               	movlw	high STR_94
 11901  000202  0100               	movlb	0	; () banked
 11902  000204  6F8F               	movwf	(printf@f+1)& (0+255),b
 11903  000206  EC02  F00B         	call	_printf	;wreg free
 11904                           
 11905                           ;Test.c: 249: lcdInst(0b11000000);;
 11906  00020A  0EC0               	movlw	192
 11907  00020C  EC48  F029         	call	_lcdInst
 11908                           
 11909                           ;Test.c: 250: printf("PIN RA4...");
 11910  000210  0E66               	movlw	low STR_95
 11911  000212  0100               	movlb	0	; () banked
 11912  000214  6F8E               	movwf	printf@f& (0+255),b
 11913  000216  0EFF               	movlw	high STR_95
 11914  000218  0100               	movlb	0	; () banked
 11915  00021A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11916  00021C  EC02  F00B         	call	_printf	;wreg free
 11917                           
 11918                           ;Test.c: 251: for(i=0;i<5;i++){
 11919  000220  0E00               	movlw	0
 11920  000222  0100               	movlb	0	; () banked
 11921  000224  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 11922  000226  0E00               	movlw	0
 11923  000228  6FC4               	movwf	actuatorTest@i& (0+255),b
 11924                           
 11925                           ; BSR set to: 0
 11926  00022A  0100               	movlb	0	; () banked
 11927  00022C  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11928  00022E  D008               	goto	l1210
 11929  000230  0100               	movlb	0	; () banked
 11930  000232  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11931  000234  E12C               	bnz	l1211
 11932  000236  0E05               	movlw	5
 11933  000238  0100               	movlb	0	; () banked
 11934  00023A  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 11935  00023C  B0D8               	btfsc	status,0,c
 11936  00023E  D027               	goto	l1211
 11937  000240                     l1210:
 11938                           
 11939                           ; BSR set to: 0
 11940                           ;Test.c: 252: LATAbits.LATA4 = 1;
 11941  000240  8889               	bsf	3977,4,c	;volatile
 11942                           
 11943                           ; BSR set to: 0
 11944                           ;Test.c: 253: _delay((unsigned long)((300)*(32000000/4000.0)));
 11945  000242  0E0D               	movlw	13
 11946  000244  0100               	movlb	0	; () banked
 11947  000246  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 11948  000248  0E2D               	movlw	45
 11949  00024A  0100               	movlb	0	; () banked
 11950  00024C  6FAB               	movwf	??_actuatorTest& (0+255),b
 11951  00024E  0ED7               	movlw	215
 11952  000250                     u9377:
 11953  000250  2EE8               	decfsz	wreg,f,c
 11954  000252  D7FE               	bra	u9377
 11955  000254  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11956  000256  D7FC               	bra	u9377
 11957  000258  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 11958  00025A  D7FA               	bra	u9377
 11959  00025C  D000               	nop2	
 11960                           
 11961                           ;Test.c: 254: LATAbits.LATA4 = !1;
 11962  00025E  9889               	bcf	3977,4,c	;volatile
 11963                           
 11964                           ;Test.c: 255: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 11965  000260  0E1D               	movlw	29
 11966  000262  0100               	movlb	0	; () banked
 11967  000264  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 11968  000266  0E69               	movlw	105
 11969  000268  0100               	movlb	0	; () banked
 11970  00026A  6FAB               	movwf	??_actuatorTest& (0+255),b
 11971  00026C  0EA5               	movlw	165
 11972  00026E                     u9387:
 11973  00026E  2EE8               	decfsz	wreg,f,c
 11974  000270  D7FE               	bra	u9387
 11975  000272  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11976  000274  D7FC               	bra	u9387
 11977  000276  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 11978  000278  D7FA               	bra	u9387
 11979  00027A  0100               	movlb	0	; () banked
 11980  00027C  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 11981  00027E  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 11982  000280  0100               	movlb	0	; () banked
 11983  000282  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11984  000284  D7DD               	goto	l1210
 11985  000286  0100               	movlb	0	; () banked
 11986  000288  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11987  00028A  E101               	bnz	u6220
 11988  00028C  D7D4               	goto	L12
 11989  00028E                     u6220:
 11990  00028E                     l1211:
 11991                           
 11992                           ; BSR set to: 0
 11993                           ;Test.c: 256: }
 11994                           ;Test.c: 257: LATAbits.LATA4 = !1;
 11995  00028E  9889               	bcf	3977,4,c	;volatile
 11996                           
 11997                           ; BSR set to: 0
 11998                           ;Test.c: 258: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11999  000290  0E01               	movlw	1
 12000  000292  EC48  F029         	call	_lcdInst
 12001  000296  0E68               	movlw	104
 12002  000298  0100               	movlb	0	; () banked
 12003  00029A  6FAB               	movwf	??_actuatorTest& (0+255),b
 12004  00029C  0EE4               	movlw	228
 12005  00029E                     u9397:
 12006  00029E  2EE8               	decfsz	wreg,f,c
 12007  0002A0  D7FE               	bra	u9397
 12008  0002A2  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12009  0002A4  D7FC               	bra	u9397
 12010  0002A6  F000               	nop	
 12011  0002A8  0E80               	movlw	128
 12012  0002AA  EC48  F029         	call	_lcdInst
 12013                           
 12014                           ;Test.c: 261: machine_state = Sorting_state;
 12015  0002AE  0E01               	movlw	1
 12016  0002B0  0100               	movlb	0	; () banked
 12017  0002B2  6FFC               	movwf	_machine_state& (0+255),b
 12018                           
 12019                           ; BSR set to: 0
 12020                           ;Test.c: 262: was_low_1 = 0;
 12021  0002B4  0E00               	movlw	0
 12022  0002B6  6E7A               	movwf	_was_low_1+1,c	;volatile
 12023  0002B8  0E00               	movlw	0
 12024  0002BA  6E79               	movwf	_was_low_1,c	;volatile
 12025                           
 12026                           ; BSR set to: 0
 12027                           ;Test.c: 263: was_low_1 = 0;
 12028  0002BC  0E00               	movlw	0
 12029  0002BE  6E7A               	movwf	_was_low_1+1,c	;volatile
 12030  0002C0  0E00               	movlw	0
 12031  0002C2  6E79               	movwf	_was_low_1,c	;volatile
 12032                           
 12033                           ; BSR set to: 0
 12034                           ;Test.c: 270: printf("TST: PAN SERVO");
 12035  0002C4  0EA5               	movlw	low STR_96
 12036  0002C6  0100               	movlb	0	; () banked
 12037  0002C8  6F8E               	movwf	printf@f& (0+255),b
 12038  0002CA  0EFE               	movlw	high STR_96
 12039  0002CC  0100               	movlb	0	; () banked
 12040  0002CE  6F8F               	movwf	(printf@f+1)& (0+255),b
 12041  0002D0  EC02  F00B         	call	_printf	;wreg free
 12042                           
 12043                           ;Test.c: 271: lcdInst(0b11000000);;
 12044  0002D4  0EC0               	movlw	192
 12045  0002D6  EC48  F029         	call	_lcdInst
 12046                           
 12047                           ;Test.c: 272: printf("MIDDLE -- 2s    ");
 12048  0002DA  0E0A               	movlw	low STR_97
 12049  0002DC  0100               	movlb	0	; () banked
 12050  0002DE  6F8E               	movwf	printf@f& (0+255),b
 12051  0002E0  0EFC               	movlw	high STR_97
 12052  0002E2  0100               	movlb	0	; () banked
 12053  0002E4  6F8F               	movwf	(printf@f+1)& (0+255),b
 12054  0002E6  EC02  F00B         	call	_printf	;wreg free
 12055                           
 12056                           ;Test.c: 273: updateServoPosition(1200, 1);
 12057  0002EA  0E04               	movlw	4
 12058  0002EC  0100               	movlb	0	; () banked
 12059  0002EE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12060  0002F0  0EB0               	movlw	176
 12061  0002F2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12062  0002F4  0E00               	movlw	0
 12063  0002F6  0100               	movlb	0	; () banked
 12064  0002F8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12065  0002FA  0E01               	movlw	1
 12066  0002FC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12067  0002FE  EC95  F022         	call	_updateServoPosition	;wreg free
 12068                           
 12069                           ;Test.c: 274: TMR1ON = 1;
 12070  000302  80CD               	bsf	4045,0,c	;volatile
 12071                           
 12072                           ;Test.c: 275: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12073  000304  0E00               	movlw	0
 12074  000306  0100               	movlb	0	; () banked
 12075  000308  6FAE               	movwf	actuatorTest@i_1740& (0+255),b
 12076  00030A                     l7765:
 12077                           
 12078                           ; BSR set to: 0
 12079  00030A  0E63               	movlw	99
 12080  00030C  0100               	movlb	0	; () banked
 12081  00030E  65AE               	cpfsgt	actuatorTest@i_1740& (0+255),b
 12082  000310  D001               	goto	l7769
 12083  000312  D00C               	goto	l7773
 12084  000314                     l7769:
 12085                           
 12086                           ; BSR set to: 0
 12087  000314  0E68               	movlw	104
 12088  000316  0100               	movlb	0	; () banked
 12089  000318  6FAB               	movwf	??_actuatorTest& (0+255),b
 12090  00031A  0EE4               	movlw	228
 12091  00031C                     u9407:
 12092  00031C  2EE8               	decfsz	wreg,f,c
 12093  00031E  D7FE               	bra	u9407
 12094  000320  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12095  000322  D7FC               	bra	u9407
 12096  000324  F000               	nop	
 12097  000326  0100               	movlb	0	; () banked
 12098  000328  2BAE               	incf	actuatorTest@i_1740& (0+255),f,b
 12099  00032A  D7EF               	goto	l7765
 12100  00032C                     l7773:
 12101                           
 12102                           ; BSR set to: 0
 12103  00032C  0E00               	movlw	0
 12104  00032E  0100               	movlb	0	; () banked
 12105  000330  6FAF               	movwf	actuatorTest@i_1741& (0+255),b
 12106  000332                     l7775:
 12107                           
 12108                           ; BSR set to: 0
 12109  000332  0E63               	movlw	99
 12110  000334  0100               	movlb	0	; () banked
 12111  000336  65AF               	cpfsgt	actuatorTest@i_1741& (0+255),b
 12112  000338  D001               	goto	l7779
 12113  00033A  D00C               	goto	l7783
 12114  00033C                     l7779:
 12115                           
 12116                           ; BSR set to: 0
 12117  00033C  0E68               	movlw	104
 12118  00033E  0100               	movlb	0	; () banked
 12119  000340  6FAB               	movwf	??_actuatorTest& (0+255),b
 12120  000342  0EE4               	movlw	228
 12121  000344                     u9417:
 12122  000344  2EE8               	decfsz	wreg,f,c
 12123  000346  D7FE               	bra	u9417
 12124  000348  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12125  00034A  D7FC               	bra	u9417
 12126  00034C  F000               	nop	
 12127  00034E  0100               	movlb	0	; () banked
 12128  000350  2BAF               	incf	actuatorTest@i_1741& (0+255),f,b
 12129  000352  D7EF               	goto	l7775
 12130  000354                     l7783:
 12131                           
 12132                           ; BSR set to: 0
 12133                           ;Test.c: 277: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12134  000354  0E80               	movlw	128
 12135  000356  EC48  F029         	call	_lcdInst
 12136  00035A  0EC0               	movlw	192
 12137  00035C  EC48  F029         	call	_lcdInst
 12138                           
 12139                           ;Test.c: 278: printf("RIGHT -- 2s     ");
 12140  000360  0EF9               	movlw	low STR_98
 12141  000362  0100               	movlb	0	; () banked
 12142  000364  6F8E               	movwf	printf@f& (0+255),b
 12143  000366  0EFB               	movlw	high STR_98
 12144  000368  0100               	movlb	0	; () banked
 12145  00036A  6F8F               	movwf	(printf@f+1)& (0+255),b
 12146  00036C  EC02  F00B         	call	_printf	;wreg free
 12147                           
 12148                           ;Test.c: 279: updateServoPosition(500, 1);
 12149  000370  0E01               	movlw	1
 12150  000372  0100               	movlb	0	; () banked
 12151  000374  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12152  000376  0EF4               	movlw	244
 12153  000378  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12154  00037A  0E00               	movlw	0
 12155  00037C  0100               	movlb	0	; () banked
 12156  00037E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12157  000380  0E01               	movlw	1
 12158  000382  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12159  000384  EC95  F022         	call	_updateServoPosition	;wreg free
 12160                           
 12161                           ;Test.c: 280: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12162  000388  0E00               	movlw	0
 12163  00038A  0100               	movlb	0	; () banked
 12164  00038C  6FB0               	movwf	actuatorTest@i_1743& (0+255),b
 12165  00038E                     l7791:
 12166                           
 12167                           ; BSR set to: 0
 12168  00038E  0E63               	movlw	99
 12169  000390  0100               	movlb	0	; () banked
 12170  000392  65B0               	cpfsgt	actuatorTest@i_1743& (0+255),b
 12171  000394  D001               	goto	l7795
 12172  000396  D00C               	goto	l7799
 12173  000398                     l7795:
 12174                           
 12175                           ; BSR set to: 0
 12176  000398  0E68               	movlw	104
 12177  00039A  0100               	movlb	0	; () banked
 12178  00039C  6FAB               	movwf	??_actuatorTest& (0+255),b
 12179  00039E  0EE4               	movlw	228
 12180  0003A0                     u9427:
 12181  0003A0  2EE8               	decfsz	wreg,f,c
 12182  0003A2  D7FE               	bra	u9427
 12183  0003A4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12184  0003A6  D7FC               	bra	u9427
 12185  0003A8  F000               	nop	
 12186  0003AA  0100               	movlb	0	; () banked
 12187  0003AC  2BB0               	incf	actuatorTest@i_1743& (0+255),f,b
 12188  0003AE  D7EF               	goto	l7791
 12189  0003B0                     l7799:
 12190                           
 12191                           ; BSR set to: 0
 12192  0003B0  0E00               	movlw	0
 12193  0003B2  0100               	movlb	0	; () banked
 12194  0003B4  6FB1               	movwf	actuatorTest@i_1744& (0+255),b
 12195  0003B6                     l7801:
 12196                           
 12197                           ; BSR set to: 0
 12198  0003B6  0E63               	movlw	99
 12199  0003B8  0100               	movlb	0	; () banked
 12200  0003BA  65B1               	cpfsgt	actuatorTest@i_1744& (0+255),b
 12201  0003BC  D001               	goto	l7805
 12202  0003BE  D00C               	goto	l7809
 12203  0003C0                     l7805:
 12204                           
 12205                           ; BSR set to: 0
 12206  0003C0  0E68               	movlw	104
 12207  0003C2  0100               	movlb	0	; () banked
 12208  0003C4  6FAB               	movwf	??_actuatorTest& (0+255),b
 12209  0003C6  0EE4               	movlw	228
 12210  0003C8                     u9437:
 12211  0003C8  2EE8               	decfsz	wreg,f,c
 12212  0003CA  D7FE               	bra	u9437
 12213  0003CC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12214  0003CE  D7FC               	bra	u9437
 12215  0003D0  F000               	nop	
 12216  0003D2  0100               	movlb	0	; () banked
 12217  0003D4  2BB1               	incf	actuatorTest@i_1744& (0+255),f,b
 12218  0003D6  D7EF               	goto	l7801
 12219  0003D8                     l7809:
 12220                           
 12221                           ; BSR set to: 0
 12222                           ;Test.c: 282: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12223  0003D8  0E80               	movlw	128
 12224  0003DA  EC48  F029         	call	_lcdInst
 12225  0003DE  0EC0               	movlw	192
 12226  0003E0  EC48  F029         	call	_lcdInst
 12227                           
 12228                           ;Test.c: 283: printf("LEFT -- 2s      ");
 12229  0003E4  0ED7               	movlw	low STR_99
 12230  0003E6  0100               	movlb	0	; () banked
 12231  0003E8  6F8E               	movwf	printf@f& (0+255),b
 12232  0003EA  0EFB               	movlw	high STR_99
 12233  0003EC  0100               	movlb	0	; () banked
 12234  0003EE  6F8F               	movwf	(printf@f+1)& (0+255),b
 12235  0003F0  EC02  F00B         	call	_printf	;wreg free
 12236                           
 12237                           ;Test.c: 284: updateServoPosition(2400, 1);
 12238  0003F4  0E09               	movlw	9
 12239  0003F6  0100               	movlb	0	; () banked
 12240  0003F8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12241  0003FA  0E60               	movlw	96
 12242  0003FC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12243  0003FE  0E00               	movlw	0
 12244  000400  0100               	movlb	0	; () banked
 12245  000402  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12246  000404  0E01               	movlw	1
 12247  000406  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12248  000408  EC95  F022         	call	_updateServoPosition	;wreg free
 12249                           
 12250                           ;Test.c: 285: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12251  00040C  0E00               	movlw	0
 12252  00040E  0100               	movlb	0	; () banked
 12253  000410  6FB2               	movwf	actuatorTest@i_1746& (0+255),b
 12254  000412                     l7817:
 12255                           
 12256                           ; BSR set to: 0
 12257  000412  0E63               	movlw	99
 12258  000414  0100               	movlb	0	; () banked
 12259  000416  65B2               	cpfsgt	actuatorTest@i_1746& (0+255),b
 12260  000418  D001               	goto	l7821
 12261  00041A  D00C               	goto	l7825
 12262  00041C                     l7821:
 12263                           
 12264                           ; BSR set to: 0
 12265  00041C  0E68               	movlw	104
 12266  00041E  0100               	movlb	0	; () banked
 12267  000420  6FAB               	movwf	??_actuatorTest& (0+255),b
 12268  000422  0EE4               	movlw	228
 12269  000424                     u9447:
 12270  000424  2EE8               	decfsz	wreg,f,c
 12271  000426  D7FE               	bra	u9447
 12272  000428  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12273  00042A  D7FC               	bra	u9447
 12274  00042C  F000               	nop	
 12275  00042E  0100               	movlb	0	; () banked
 12276  000430  2BB2               	incf	actuatorTest@i_1746& (0+255),f,b
 12277  000432  D7EF               	goto	l7817
 12278  000434                     l7825:
 12279                           
 12280                           ; BSR set to: 0
 12281  000434  0E00               	movlw	0
 12282  000436  0100               	movlb	0	; () banked
 12283  000438  6FB3               	movwf	actuatorTest@i_1747& (0+255),b
 12284  00043A                     l7827:
 12285                           
 12286                           ; BSR set to: 0
 12287  00043A  0E63               	movlw	99
 12288  00043C  0100               	movlb	0	; () banked
 12289  00043E  65B3               	cpfsgt	actuatorTest@i_1747& (0+255),b
 12290  000440  D001               	goto	l7831
 12291  000442  D00C               	goto	l7835
 12292  000444                     l7831:
 12293                           
 12294                           ; BSR set to: 0
 12295  000444  0E68               	movlw	104
 12296  000446  0100               	movlb	0	; () banked
 12297  000448  6FAB               	movwf	??_actuatorTest& (0+255),b
 12298  00044A  0EE4               	movlw	228
 12299  00044C                     u9457:
 12300  00044C  2EE8               	decfsz	wreg,f,c
 12301  00044E  D7FE               	bra	u9457
 12302  000450  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12303  000452  D7FC               	bra	u9457
 12304  000454  F000               	nop	
 12305  000456  0100               	movlb	0	; () banked
 12306  000458  2BB3               	incf	actuatorTest@i_1747& (0+255),f,b
 12307  00045A  D7EF               	goto	l7827
 12308  00045C                     l7835:
 12309                           
 12310                           ; BSR set to: 0
 12311                           ;Test.c: 287: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12312  00045C  0E80               	movlw	128
 12313  00045E  EC48  F029         	call	_lcdInst
 12314  000462  0EC0               	movlw	192
 12315  000464  EC48  F029         	call	_lcdInst
 12316                           
 12317                           ;Test.c: 288: printf("MID-LEFT -- 2s  ");
 12318  000468  0E2C               	movlw	low STR_100
 12319  00046A  0100               	movlb	0	; () banked
 12320  00046C  6F8E               	movwf	printf@f& (0+255),b
 12321  00046E  0EFC               	movlw	high STR_100
 12322  000470  0100               	movlb	0	; () banked
 12323  000472  6F8F               	movwf	(printf@f+1)& (0+255),b
 12324  000474  EC02  F00B         	call	_printf	;wreg free
 12325                           
 12326                           ;Test.c: 289: updateServoPosition(1670, 1);
 12327  000478  0E06               	movlw	6
 12328  00047A  0100               	movlb	0	; () banked
 12329  00047C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12330  00047E  0E86               	movlw	134
 12331  000480  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12332  000482  0E00               	movlw	0
 12333  000484  0100               	movlb	0	; () banked
 12334  000486  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12335  000488  0E01               	movlw	1
 12336  00048A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12337  00048C  EC95  F022         	call	_updateServoPosition	;wreg free
 12338                           
 12339                           ;Test.c: 290: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12340  000490  0E00               	movlw	0
 12341  000492  0100               	movlb	0	; () banked
 12342  000494  6FB4               	movwf	actuatorTest@i_1749& (0+255),b
 12343  000496                     l7843:
 12344                           
 12345                           ; BSR set to: 0
 12346  000496  0E63               	movlw	99
 12347  000498  0100               	movlb	0	; () banked
 12348  00049A  65B4               	cpfsgt	actuatorTest@i_1749& (0+255),b
 12349  00049C  D001               	goto	l7847
 12350  00049E  D00C               	goto	l7851
 12351  0004A0                     l7847:
 12352                           
 12353                           ; BSR set to: 0
 12354  0004A0  0E68               	movlw	104
 12355  0004A2  0100               	movlb	0	; () banked
 12356  0004A4  6FAB               	movwf	??_actuatorTest& (0+255),b
 12357  0004A6  0EE4               	movlw	228
 12358  0004A8                     u9467:
 12359  0004A8  2EE8               	decfsz	wreg,f,c
 12360  0004AA  D7FE               	bra	u9467
 12361  0004AC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12362  0004AE  D7FC               	bra	u9467
 12363  0004B0  F000               	nop	
 12364  0004B2  0100               	movlb	0	; () banked
 12365  0004B4  2BB4               	incf	actuatorTest@i_1749& (0+255),f,b
 12366  0004B6  D7EF               	goto	l7843
 12367  0004B8                     l7851:
 12368                           
 12369                           ; BSR set to: 0
 12370  0004B8  0E00               	movlw	0
 12371  0004BA  0100               	movlb	0	; () banked
 12372  0004BC  6FB5               	movwf	actuatorTest@i_1750& (0+255),b
 12373  0004BE                     l7853:
 12374                           
 12375                           ; BSR set to: 0
 12376  0004BE  0E63               	movlw	99
 12377  0004C0  0100               	movlb	0	; () banked
 12378  0004C2  65B5               	cpfsgt	actuatorTest@i_1750& (0+255),b
 12379  0004C4  D001               	goto	l7857
 12380  0004C6  D00C               	goto	l7861
 12381  0004C8                     l7857:
 12382                           
 12383                           ; BSR set to: 0
 12384  0004C8  0E68               	movlw	104
 12385  0004CA  0100               	movlb	0	; () banked
 12386  0004CC  6FAB               	movwf	??_actuatorTest& (0+255),b
 12387  0004CE  0EE4               	movlw	228
 12388  0004D0                     u9477:
 12389  0004D0  2EE8               	decfsz	wreg,f,c
 12390  0004D2  D7FE               	bra	u9477
 12391  0004D4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12392  0004D6  D7FC               	bra	u9477
 12393  0004D8  F000               	nop	
 12394  0004DA  0100               	movlb	0	; () banked
 12395  0004DC  2BB5               	incf	actuatorTest@i_1750& (0+255),f,b
 12396  0004DE  D7EF               	goto	l7853
 12397  0004E0                     l7861:
 12398                           
 12399                           ; BSR set to: 0
 12400                           ;Test.c: 292: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12401  0004E0  0E80               	movlw	128
 12402  0004E2  EC48  F029         	call	_lcdInst
 12403  0004E6  0EC0               	movlw	192
 12404  0004E8  EC48  F029         	call	_lcdInst
 12405                           
 12406                           ;Test.c: 293: printf("MID-RIGHT -- 2s ");
 12407  0004EC  0E3D               	movlw	low STR_101
 12408  0004EE  0100               	movlb	0	; () banked
 12409  0004F0  6F8E               	movwf	printf@f& (0+255),b
 12410  0004F2  0EFC               	movlw	high STR_101
 12411  0004F4  0100               	movlb	0	; () banked
 12412  0004F6  6F8F               	movwf	(printf@f+1)& (0+255),b
 12413  0004F8  EC02  F00B         	call	_printf	;wreg free
 12414                           
 12415                           ;Test.c: 294: updateServoPosition(850, 1);
 12416  0004FC  0E03               	movlw	3
 12417  0004FE  0100               	movlb	0	; () banked
 12418  000500  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12419  000502  0E52               	movlw	82
 12420  000504  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12421  000506  0E00               	movlw	0
 12422  000508  0100               	movlb	0	; () banked
 12423  00050A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12424  00050C  0E01               	movlw	1
 12425  00050E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12426  000510  EC95  F022         	call	_updateServoPosition	;wreg free
 12427                           
 12428                           ;Test.c: 295: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12429  000514  0E00               	movlw	0
 12430  000516  0100               	movlb	0	; () banked
 12431  000518  6FB6               	movwf	actuatorTest@i_1752& (0+255),b
 12432  00051A                     l7869:
 12433                           
 12434                           ; BSR set to: 0
 12435  00051A  0E63               	movlw	99
 12436  00051C  0100               	movlb	0	; () banked
 12437  00051E  65B6               	cpfsgt	actuatorTest@i_1752& (0+255),b
 12438  000520  D001               	goto	l7873
 12439  000522  D00C               	goto	l7877
 12440  000524                     l7873:
 12441                           
 12442                           ; BSR set to: 0
 12443  000524  0E68               	movlw	104
 12444  000526  0100               	movlb	0	; () banked
 12445  000528  6FAB               	movwf	??_actuatorTest& (0+255),b
 12446  00052A  0EE4               	movlw	228
 12447  00052C                     u9487:
 12448  00052C  2EE8               	decfsz	wreg,f,c
 12449  00052E  D7FE               	bra	u9487
 12450  000530  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12451  000532  D7FC               	bra	u9487
 12452  000534  F000               	nop	
 12453  000536  0100               	movlb	0	; () banked
 12454  000538  2BB6               	incf	actuatorTest@i_1752& (0+255),f,b
 12455  00053A  D7EF               	goto	l7869
 12456  00053C                     l7877:
 12457                           
 12458                           ; BSR set to: 0
 12459  00053C  0E00               	movlw	0
 12460  00053E  0100               	movlb	0	; () banked
 12461  000540  6FB7               	movwf	actuatorTest@i_1753& (0+255),b
 12462  000542                     l7879:
 12463                           
 12464                           ; BSR set to: 0
 12465  000542  0E63               	movlw	99
 12466  000544  0100               	movlb	0	; () banked
 12467  000546  65B7               	cpfsgt	actuatorTest@i_1753& (0+255),b
 12468  000548  D001               	goto	l7883
 12469  00054A  D00C               	goto	l7887
 12470  00054C                     l7883:
 12471                           
 12472                           ; BSR set to: 0
 12473  00054C  0E68               	movlw	104
 12474  00054E  0100               	movlb	0	; () banked
 12475  000550  6FAB               	movwf	??_actuatorTest& (0+255),b
 12476  000552  0EE4               	movlw	228
 12477  000554                     u9497:
 12478  000554  2EE8               	decfsz	wreg,f,c
 12479  000556  D7FE               	bra	u9497
 12480  000558  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12481  00055A  D7FC               	bra	u9497
 12482  00055C  F000               	nop	
 12483  00055E  0100               	movlb	0	; () banked
 12484  000560  2BB7               	incf	actuatorTest@i_1753& (0+255),f,b
 12485  000562  D7EF               	goto	l7879
 12486  000564                     l7887:
 12487                           
 12488                           ; BSR set to: 0
 12489                           ;Test.c: 297: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12490  000564  0E80               	movlw	128
 12491  000566  EC48  F029         	call	_lcdInst
 12492  00056A  0EC0               	movlw	192
 12493  00056C  EC48  F029         	call	_lcdInst
 12494                           
 12495                           ;Test.c: 298: printf("MID -- 2s       ");
 12496  000570  0EB5               	movlw	low STR_102
 12497  000572  0100               	movlb	0	; () banked
 12498  000574  6F8E               	movwf	printf@f& (0+255),b
 12499  000576  0EFB               	movlw	high STR_102
 12500  000578  0100               	movlb	0	; () banked
 12501  00057A  6F8F               	movwf	(printf@f+1)& (0+255),b
 12502  00057C  EC02  F00B         	call	_printf	;wreg free
 12503                           
 12504                           ;Test.c: 299: updateServoPosition(1200, 1);
 12505  000580  0E04               	movlw	4
 12506  000582  0100               	movlb	0	; () banked
 12507  000584  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12508  000586  0EB0               	movlw	176
 12509  000588  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12510  00058A  0E00               	movlw	0
 12511  00058C  0100               	movlb	0	; () banked
 12512  00058E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12513  000590  0E01               	movlw	1
 12514  000592  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12515  000594  EC95  F022         	call	_updateServoPosition	;wreg free
 12516                           
 12517                           ;Test.c: 300: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12518  000598  0E00               	movlw	0
 12519  00059A  0100               	movlb	0	; () banked
 12520  00059C  6FB8               	movwf	actuatorTest@i_1755& (0+255),b
 12521  00059E                     l7895:
 12522                           
 12523                           ; BSR set to: 0
 12524  00059E  0E63               	movlw	99
 12525  0005A0  0100               	movlb	0	; () banked
 12526  0005A2  65B8               	cpfsgt	actuatorTest@i_1755& (0+255),b
 12527  0005A4  D001               	goto	l7899
 12528  0005A6  D00C               	goto	l7903
 12529  0005A8                     l7899:
 12530                           
 12531                           ; BSR set to: 0
 12532  0005A8  0E68               	movlw	104
 12533  0005AA  0100               	movlb	0	; () banked
 12534  0005AC  6FAB               	movwf	??_actuatorTest& (0+255),b
 12535  0005AE  0EE4               	movlw	228
 12536  0005B0                     u9507:
 12537  0005B0  2EE8               	decfsz	wreg,f,c
 12538  0005B2  D7FE               	bra	u9507
 12539  0005B4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12540  0005B6  D7FC               	bra	u9507
 12541  0005B8  F000               	nop	
 12542  0005BA  0100               	movlb	0	; () banked
 12543  0005BC  2BB8               	incf	actuatorTest@i_1755& (0+255),f,b
 12544  0005BE  D7EF               	goto	l7895
 12545  0005C0                     l7903:
 12546                           
 12547                           ; BSR set to: 0
 12548  0005C0  0E00               	movlw	0
 12549  0005C2  0100               	movlb	0	; () banked
 12550  0005C4  6FB9               	movwf	actuatorTest@i_1756& (0+255),b
 12551  0005C6                     l7905:
 12552                           
 12553                           ; BSR set to: 0
 12554  0005C6  0E63               	movlw	99
 12555  0005C8  0100               	movlb	0	; () banked
 12556  0005CA  65B9               	cpfsgt	actuatorTest@i_1756& (0+255),b
 12557  0005CC  D001               	goto	l7909
 12558  0005CE  D00C               	goto	l1235
 12559  0005D0                     l7909:
 12560                           
 12561                           ; BSR set to: 0
 12562  0005D0  0E68               	movlw	104
 12563  0005D2  0100               	movlb	0	; () banked
 12564  0005D4  6FAB               	movwf	??_actuatorTest& (0+255),b
 12565  0005D6  0EE4               	movlw	228
 12566  0005D8                     u9517:
 12567  0005D8  2EE8               	decfsz	wreg,f,c
 12568  0005DA  D7FE               	bra	u9517
 12569  0005DC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12570  0005DE  D7FC               	bra	u9517
 12571  0005E0  F000               	nop	
 12572  0005E2  0100               	movlb	0	; () banked
 12573  0005E4  2BB9               	incf	actuatorTest@i_1756& (0+255),f,b
 12574  0005E6  D7EF               	goto	l7905
 12575  0005E8                     l1235:
 12576                           
 12577                           ; BSR set to: 0
 12578                           ;Test.c: 301: TMR1ON = 0;
 12579  0005E8  90CD               	bcf	4045,0,c	;volatile
 12580                           
 12581                           ; BSR set to: 0
 12582                           ;Test.c: 308: printf("TST: TILT SERVO");
 12583  0005EA  0E3A               	movlw	low STR_103
 12584  0005EC  0100               	movlb	0	; () banked
 12585  0005EE  6F8E               	movwf	printf@f& (0+255),b
 12586  0005F0  0EFE               	movlw	high STR_103
 12587  0005F2  0100               	movlb	0	; () banked
 12588  0005F4  6F8F               	movwf	(printf@f+1)& (0+255),b
 12589  0005F6  EC02  F00B         	call	_printf	;wreg free
 12590                           
 12591                           ;Test.c: 309: lcdInst(0b11000000);;
 12592  0005FA  0EC0               	movlw	192
 12593  0005FC  EC48  F029         	call	_lcdInst
 12594                           
 12595                           ;Test.c: 310: printf("LEVEL -- 2s     ");
 12596  000600  0EE8               	movlw	low STR_104
 12597  000602  0100               	movlb	0	; () banked
 12598  000604  6F8E               	movwf	printf@f& (0+255),b
 12599  000606  0EFB               	movlw	high STR_104
 12600  000608  0100               	movlb	0	; () banked
 12601  00060A  6F8F               	movwf	(printf@f+1)& (0+255),b
 12602  00060C  EC02  F00B         	call	_printf	;wreg free
 12603                           
 12604                           ;Test.c: 311: updateServoPosition(1050, 3);
 12605  000610  0E04               	movlw	4
 12606  000612  0100               	movlb	0	; () banked
 12607  000614  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12608  000616  0E1A               	movlw	26
 12609  000618  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12610  00061A  0E00               	movlw	0
 12611  00061C  0100               	movlb	0	; () banked
 12612  00061E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12613  000620  0E03               	movlw	3
 12614  000622  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12615  000624  EC95  F022         	call	_updateServoPosition	;wreg free
 12616                           
 12617                           ;Test.c: 312: TMR3ON = 1;
 12618  000628  80B1               	bsf	4017,0,c	;volatile
 12619                           
 12620                           ;Test.c: 313: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12621  00062A  0E00               	movlw	0
 12622  00062C  0100               	movlb	0	; () banked
 12623  00062E  6FBA               	movwf	actuatorTest@i_1759& (0+255),b
 12624  000630                     l7923:
 12625                           
 12626                           ; BSR set to: 0
 12627  000630  0E63               	movlw	99
 12628  000632  0100               	movlb	0	; () banked
 12629  000634  65BA               	cpfsgt	actuatorTest@i_1759& (0+255),b
 12630  000636  D001               	goto	l7927
 12631  000638  D00C               	goto	l7931
 12632  00063A                     l7927:
 12633                           
 12634                           ; BSR set to: 0
 12635  00063A  0E68               	movlw	104
 12636  00063C  0100               	movlb	0	; () banked
 12637  00063E  6FAB               	movwf	??_actuatorTest& (0+255),b
 12638  000640  0EE4               	movlw	228
 12639  000642                     u9527:
 12640  000642  2EE8               	decfsz	wreg,f,c
 12641  000644  D7FE               	bra	u9527
 12642  000646  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12643  000648  D7FC               	bra	u9527
 12644  00064A  F000               	nop	
 12645  00064C  0100               	movlb	0	; () banked
 12646  00064E  2BBA               	incf	actuatorTest@i_1759& (0+255),f,b
 12647  000650  D7EF               	goto	l7923
 12648  000652                     l7931:
 12649                           
 12650                           ; BSR set to: 0
 12651  000652  0E00               	movlw	0
 12652  000654  0100               	movlb	0	; () banked
 12653  000656  6FBB               	movwf	actuatorTest@i_1760& (0+255),b
 12654  000658                     l7933:
 12655                           
 12656                           ; BSR set to: 0
 12657  000658  0E63               	movlw	99
 12658  00065A  0100               	movlb	0	; () banked
 12659  00065C  65BB               	cpfsgt	actuatorTest@i_1760& (0+255),b
 12660  00065E  D001               	goto	l7937
 12661  000660  D00C               	goto	l7941
 12662  000662                     l7937:
 12663                           
 12664                           ; BSR set to: 0
 12665  000662  0E68               	movlw	104
 12666  000664  0100               	movlb	0	; () banked
 12667  000666  6FAB               	movwf	??_actuatorTest& (0+255),b
 12668  000668  0EE4               	movlw	228
 12669  00066A                     u9537:
 12670  00066A  2EE8               	decfsz	wreg,f,c
 12671  00066C  D7FE               	bra	u9537
 12672  00066E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12673  000670  D7FC               	bra	u9537
 12674  000672  F000               	nop	
 12675  000674  0100               	movlb	0	; () banked
 12676  000676  2BBB               	incf	actuatorTest@i_1760& (0+255),f,b
 12677  000678  D7EF               	goto	l7933
 12678  00067A                     l7941:
 12679                           
 12680                           ; BSR set to: 0
 12681                           ;Test.c: 315: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12682  00067A  0E80               	movlw	128
 12683  00067C  EC48  F029         	call	_lcdInst
 12684  000680  0EC0               	movlw	192
 12685  000682  EC48  F029         	call	_lcdInst
 12686                           
 12687                           ;Test.c: 316: printf("DROP -- 2s      ");
 12688  000686  0EC6               	movlw	low STR_105
 12689  000688  0100               	movlb	0	; () banked
 12690  00068A  6F8E               	movwf	printf@f& (0+255),b
 12691  00068C  0EFB               	movlw	high STR_105
 12692  00068E  0100               	movlb	0	; () banked
 12693  000690  6F8F               	movwf	(printf@f+1)& (0+255),b
 12694  000692  EC02  F00B         	call	_printf	;wreg free
 12695                           
 12696                           ;Test.c: 317: updateServoPosition(1260, 3);
 12697  000696  0E04               	movlw	4
 12698  000698  0100               	movlb	0	; () banked
 12699  00069A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12700  00069C  0EEC               	movlw	236
 12701  00069E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12702  0006A0  0E00               	movlw	0
 12703  0006A2  0100               	movlb	0	; () banked
 12704  0006A4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12705  0006A6  0E03               	movlw	3
 12706  0006A8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12707  0006AA  EC95  F022         	call	_updateServoPosition	;wreg free
 12708                           
 12709                           ;Test.c: 318: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12710  0006AE  0E00               	movlw	0
 12711  0006B0  0100               	movlb	0	; () banked
 12712  0006B2  6FBC               	movwf	actuatorTest@i_1762& (0+255),b
 12713  0006B4                     l7949:
 12714                           
 12715                           ; BSR set to: 0
 12716  0006B4  0E63               	movlw	99
 12717  0006B6  0100               	movlb	0	; () banked
 12718  0006B8  65BC               	cpfsgt	actuatorTest@i_1762& (0+255),b
 12719  0006BA  D001               	goto	l7953
 12720  0006BC  D00C               	goto	l7957
 12721  0006BE                     l7953:
 12722                           
 12723                           ; BSR set to: 0
 12724  0006BE  0E68               	movlw	104
 12725  0006C0  0100               	movlb	0	; () banked
 12726  0006C2  6FAB               	movwf	??_actuatorTest& (0+255),b
 12727  0006C4  0EE4               	movlw	228
 12728  0006C6                     u9547:
 12729  0006C6  2EE8               	decfsz	wreg,f,c
 12730  0006C8  D7FE               	bra	u9547
 12731  0006CA  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12732  0006CC  D7FC               	bra	u9547
 12733  0006CE  F000               	nop	
 12734  0006D0  0100               	movlb	0	; () banked
 12735  0006D2  2BBC               	incf	actuatorTest@i_1762& (0+255),f,b
 12736  0006D4  D7EF               	goto	l7949
 12737  0006D6                     l7957:
 12738                           
 12739                           ; BSR set to: 0
 12740  0006D6  0E00               	movlw	0
 12741  0006D8  0100               	movlb	0	; () banked
 12742  0006DA  6FBD               	movwf	actuatorTest@i_1763& (0+255),b
 12743  0006DC                     l7959:
 12744                           
 12745                           ; BSR set to: 0
 12746  0006DC  0E63               	movlw	99
 12747  0006DE  0100               	movlb	0	; () banked
 12748  0006E0  65BD               	cpfsgt	actuatorTest@i_1763& (0+255),b
 12749  0006E2  D001               	goto	l7963
 12750  0006E4  D00C               	goto	l7967
 12751  0006E6                     l7963:
 12752                           
 12753                           ; BSR set to: 0
 12754  0006E6  0E68               	movlw	104
 12755  0006E8  0100               	movlb	0	; () banked
 12756  0006EA  6FAB               	movwf	??_actuatorTest& (0+255),b
 12757  0006EC  0EE4               	movlw	228
 12758  0006EE                     u9557:
 12759  0006EE  2EE8               	decfsz	wreg,f,c
 12760  0006F0  D7FE               	bra	u9557
 12761  0006F2  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12762  0006F4  D7FC               	bra	u9557
 12763  0006F6  F000               	nop	
 12764  0006F8  0100               	movlb	0	; () banked
 12765  0006FA  2BBD               	incf	actuatorTest@i_1763& (0+255),f,b
 12766  0006FC  D7EF               	goto	l7959
 12767  0006FE                     l7967:
 12768                           
 12769                           ; BSR set to: 0
 12770                           ;Test.c: 320: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12771  0006FE  0E80               	movlw	128
 12772  000700  EC48  F029         	call	_lcdInst
 12773  000704  0EC0               	movlw	192
 12774  000706  EC48  F029         	call	_lcdInst
 12775                           
 12776                           ;Test.c: 321: printf("LEVEL -- 2s     ");
 12777  00070A  0EE8               	movlw	low STR_104
 12778  00070C  0100               	movlb	0	; () banked
 12779  00070E  6F8E               	movwf	printf@f& (0+255),b
 12780  000710  0EFB               	movlw	high STR_104
 12781  000712  0100               	movlb	0	; () banked
 12782  000714  6F8F               	movwf	(printf@f+1)& (0+255),b
 12783  000716  EC02  F00B         	call	_printf	;wreg free
 12784                           
 12785                           ;Test.c: 322: updateServoPosition(1050, 3);
 12786  00071A  0E04               	movlw	4
 12787  00071C  0100               	movlb	0	; () banked
 12788  00071E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12789  000720  0E1A               	movlw	26
 12790  000722  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12791  000724  0E00               	movlw	0
 12792  000726  0100               	movlb	0	; () banked
 12793  000728  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12794  00072A  0E03               	movlw	3
 12795  00072C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12796  00072E  EC95  F022         	call	_updateServoPosition	;wreg free
 12797                           
 12798                           ;Test.c: 323: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12799  000732  0E00               	movlw	0
 12800  000734  0100               	movlb	0	; () banked
 12801  000736  6FBE               	movwf	actuatorTest@i_1765& (0+255),b
 12802  000738                     l7975:
 12803                           
 12804                           ; BSR set to: 0
 12805  000738  0E63               	movlw	99
 12806  00073A  0100               	movlb	0	; () banked
 12807  00073C  65BE               	cpfsgt	actuatorTest@i_1765& (0+255),b
 12808  00073E  D001               	goto	l7979
 12809  000740  D00C               	goto	l7983
 12810  000742                     l7979:
 12811                           
 12812                           ; BSR set to: 0
 12813  000742  0E68               	movlw	104
 12814  000744  0100               	movlb	0	; () banked
 12815  000746  6FAB               	movwf	??_actuatorTest& (0+255),b
 12816  000748  0EE4               	movlw	228
 12817  00074A                     u9567:
 12818  00074A  2EE8               	decfsz	wreg,f,c
 12819  00074C  D7FE               	bra	u9567
 12820  00074E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12821  000750  D7FC               	bra	u9567
 12822  000752  F000               	nop	
 12823  000754  0100               	movlb	0	; () banked
 12824  000756  2BBE               	incf	actuatorTest@i_1765& (0+255),f,b
 12825  000758  D7EF               	goto	l7975
 12826  00075A                     l7983:
 12827                           
 12828                           ; BSR set to: 0
 12829  00075A  0E00               	movlw	0
 12830  00075C  0100               	movlb	0	; () banked
 12831  00075E  6FBF               	movwf	actuatorTest@i_1766& (0+255),b
 12832  000760                     l7985:
 12833                           
 12834                           ; BSR set to: 0
 12835  000760  0E63               	movlw	99
 12836  000762  0100               	movlb	0	; () banked
 12837  000764  65BF               	cpfsgt	actuatorTest@i_1766& (0+255),b
 12838  000766  D001               	goto	l7989
 12839  000768  D00C               	goto	l1247
 12840  00076A                     l7989:
 12841                           
 12842                           ; BSR set to: 0
 12843  00076A  0E68               	movlw	104
 12844  00076C  0100               	movlb	0	; () banked
 12845  00076E  6FAB               	movwf	??_actuatorTest& (0+255),b
 12846  000770  0EE4               	movlw	228
 12847  000772                     u9577:
 12848  000772  2EE8               	decfsz	wreg,f,c
 12849  000774  D7FE               	bra	u9577
 12850  000776  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12851  000778  D7FC               	bra	u9577
 12852  00077A  F000               	nop	
 12853  00077C  0100               	movlb	0	; () banked
 12854  00077E  2BBF               	incf	actuatorTest@i_1766& (0+255),f,b
 12855  000780  D7EF               	goto	l7985
 12856  000782                     l1247:
 12857                           
 12858                           ; BSR set to: 0
 12859                           ;Test.c: 324: TMR3ON = 0;
 12860  000782  90B1               	bcf	4017,0,c	;volatile
 12861                           
 12862                           ;Test.c: 325: (INTCONbits.GIE = 0);
 12863  000784  9EF2               	bcf	intcon,7,c	;volatile
 12864                           
 12865                           ; BSR set to: 0
 12866                           ;Test.c: 330: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12867  000786  0E01               	movlw	1
 12868  000788  EC48  F029         	call	_lcdInst
 12869  00078C  0E68               	movlw	104
 12870  00078E  0100               	movlb	0	; () banked
 12871  000790  6FAB               	movwf	??_actuatorTest& (0+255),b
 12872  000792  0EE4               	movlw	228
 12873  000794                     u9587:
 12874  000794  2EE8               	decfsz	wreg,f,c
 12875  000796  D7FE               	bra	u9587
 12876  000798  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12877  00079A  D7FC               	bra	u9587
 12878  00079C  F000               	nop	
 12879  00079E  0E80               	movlw	128
 12880  0007A0  EC48  F029         	call	_lcdInst
 12881                           
 12882                           ;Test.c: 331: printf("TST: CAM SERVO");
 12883  0007A4  0E96               	movlw	low STR_107
 12884  0007A6  0100               	movlb	0	; () banked
 12885  0007A8  6F8E               	movwf	printf@f& (0+255),b
 12886  0007AA  0EFE               	movlw	high STR_107
 12887  0007AC  0100               	movlb	0	; () banked
 12888  0007AE  6F8F               	movwf	(printf@f+1)& (0+255),b
 12889  0007B0  EC02  F00B         	call	_printf	;wreg free
 12890                           
 12891                           ;Test.c: 332: lcdInst(0b11000000);;
 12892  0007B4  0EC0               	movlw	192
 12893  0007B6  EC48  F029         	call	_lcdInst
 12894                           
 12895                           ;Test.c: 333: printf("CAM UP  |RC0=1");
 12896  0007BA  0E78               	movlw	low STR_108
 12897  0007BC  0100               	movlb	0	; () banked
 12898  0007BE  6F8E               	movwf	printf@f& (0+255),b
 12899  0007C0  0EFE               	movlw	high STR_108
 12900  0007C2  0100               	movlb	0	; () banked
 12901  0007C4  6F8F               	movwf	(printf@f+1)& (0+255),b
 12902  0007C6  EC02  F00B         	call	_printf	;wreg free
 12903                           
 12904                           ;Test.c: 334: LATCbits.LATC0 = 1;
 12905  0007CA  808B               	bsf	3979,0,c	;volatile
 12906                           
 12907                           ;Test.c: 335: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12908  0007CC  0E00               	movlw	0
 12909  0007CE  0100               	movlb	0	; () banked
 12910  0007D0  6FC0               	movwf	actuatorTest@i_1769& (0+255),b
 12911  0007D2                     l8009:
 12912                           
 12913                           ; BSR set to: 0
 12914  0007D2  0E63               	movlw	99
 12915  0007D4  0100               	movlb	0	; () banked
 12916  0007D6  65C0               	cpfsgt	actuatorTest@i_1769& (0+255),b
 12917  0007D8  D001               	goto	l8013
 12918  0007DA  D00C               	goto	l8017
 12919  0007DC                     l8013:
 12920                           
 12921                           ; BSR set to: 0
 12922  0007DC  0E68               	movlw	104
 12923  0007DE  0100               	movlb	0	; () banked
 12924  0007E0  6FAB               	movwf	??_actuatorTest& (0+255),b
 12925  0007E2  0EE4               	movlw	228
 12926  0007E4                     u9597:
 12927  0007E4  2EE8               	decfsz	wreg,f,c
 12928  0007E6  D7FE               	bra	u9597
 12929  0007E8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12930  0007EA  D7FC               	bra	u9597
 12931  0007EC  F000               	nop	
 12932  0007EE  0100               	movlb	0	; () banked
 12933  0007F0  2BC0               	incf	actuatorTest@i_1769& (0+255),f,b
 12934  0007F2  D7EF               	goto	l8009
 12935  0007F4                     l8017:
 12936                           
 12937                           ; BSR set to: 0
 12938  0007F4  0E00               	movlw	0
 12939  0007F6  0100               	movlb	0	; () banked
 12940  0007F8  6FC1               	movwf	actuatorTest@i_1770& (0+255),b
 12941  0007FA                     l8019:
 12942                           
 12943                           ; BSR set to: 0
 12944  0007FA  0E63               	movlw	99
 12945  0007FC  0100               	movlb	0	; () banked
 12946  0007FE  65C1               	cpfsgt	actuatorTest@i_1770& (0+255),b
 12947  000800  D001               	goto	l8023
 12948  000802  D00C               	goto	l8027
 12949  000804                     l8023:
 12950                           
 12951                           ; BSR set to: 0
 12952  000804  0E68               	movlw	104
 12953  000806  0100               	movlb	0	; () banked
 12954  000808  6FAB               	movwf	??_actuatorTest& (0+255),b
 12955  00080A  0EE4               	movlw	228
 12956  00080C                     u9607:
 12957  00080C  2EE8               	decfsz	wreg,f,c
 12958  00080E  D7FE               	bra	u9607
 12959  000810  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12960  000812  D7FC               	bra	u9607
 12961  000814  F000               	nop	
 12962  000816  0100               	movlb	0	; () banked
 12963  000818  2BC1               	incf	actuatorTest@i_1770& (0+255),f,b
 12964  00081A  D7EF               	goto	l8019
 12965  00081C                     l8027:
 12966                           
 12967                           ; BSR set to: 0
 12968                           ;Test.c: 336: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12969  00081C  0E80               	movlw	128
 12970  00081E  EC48  F029         	call	_lcdInst
 12971  000822  0EC0               	movlw	192
 12972  000824  EC48  F029         	call	_lcdInst
 12973                           
 12974                           ;Test.c: 337: printf("CAM DWN |RC0=0");
 12975  000828  0E69               	movlw	low STR_109
 12976  00082A  0100               	movlb	0	; () banked
 12977  00082C  6F8E               	movwf	printf@f& (0+255),b
 12978  00082E  0EFE               	movlw	high STR_109
 12979  000830  0100               	movlb	0	; () banked
 12980  000832  6F8F               	movwf	(printf@f+1)& (0+255),b
 12981  000834  EC02  F00B         	call	_printf	;wreg free
 12982                           
 12983                           ;Test.c: 340: for(i=0;i<10000;i++)
 12984  000838  0E00               	movlw	0
 12985  00083A  0100               	movlb	0	; () banked
 12986  00083C  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 12987  00083E  0E00               	movlw	0
 12988  000840  6FC4               	movwf	actuatorTest@i& (0+255),b
 12989  000842                     l8033:
 12990                           
 12991                           ; BSR set to: 0
 12992  000842  0100               	movlb	0	; () banked
 12993  000844  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 12994  000846  D008               	goto	l1252
 12995  000848  0E10               	movlw	16
 12996  00084A  0100               	movlb	0	; () banked
 12997  00084C  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 12998  00084E  0E27               	movlw	39
 12999  000850  0100               	movlb	0	; () banked
 13000  000852  59C5               	subwfb	(actuatorTest@i+1)& (0+255),w,b
 13001  000854  B0D8               	btfsc	status,0,c
 13002  000856  D00D               	goto	l8043
 13003  000858                     l1252:
 13004                           
 13005                           ; BSR set to: 0
 13006                           ;Test.c: 341: {
 13007                           ;Test.c: 342: LATCbits.LATC0 = 1;
 13008  000858  808B               	bsf	3979,0,c	;volatile
 13009                           
 13010                           ; BSR set to: 0
 13011                           ;Test.c: 343: _delay((unsigned long)((10)*(32000000/4000000.0)));
 13012  00085A  0E1A               	movlw	26
 13013  00085C                     u9617:
 13014  00085C  2EE8               	decfsz	wreg,f,c
 13015  00085E  D7FE               	bra	u9617
 13016  000860  D000               	nop2	
 13017                           
 13018                           ;Test.c: 344: LATCbits.LATC0 = 0;
 13019  000862  908B               	bcf	3979,0,c	;volatile
 13020                           
 13021                           ;Test.c: 345: _delay((unsigned long)((90)*(32000000/4000000.0)));
 13022  000864  0EF0               	movlw	240
 13023  000866                     u9627:
 13024  000866  2EE8               	decfsz	wreg,f,c
 13025  000868  D7FE               	bra	u9627
 13026  00086A  0100               	movlb	0	; () banked
 13027  00086C  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 13028  00086E  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 13029  000870  D7E8               	goto	l8033
 13030  000872                     l8043:
 13031                           
 13032                           ; BSR set to: 0
 13033                           ;Test.c: 346: }
 13034                           ;Test.c: 348: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13035  000872  0E00               	movlw	0
 13036  000874  0100               	movlb	0	; () banked
 13037  000876  6FC2               	movwf	actuatorTest@i_1772& (0+255),b
 13038  000878                     l8045:
 13039                           
 13040                           ; BSR set to: 0
 13041  000878  0E63               	movlw	99
 13042  00087A  0100               	movlb	0	; () banked
 13043  00087C  65C2               	cpfsgt	actuatorTest@i_1772& (0+255),b
 13044  00087E  D001               	goto	l8049
 13045  000880  D00C               	goto	l8053
 13046  000882                     l8049:
 13047                           
 13048                           ; BSR set to: 0
 13049  000882  0E68               	movlw	104
 13050  000884  0100               	movlb	0	; () banked
 13051  000886  6FAB               	movwf	??_actuatorTest& (0+255),b
 13052  000888  0EE4               	movlw	228
 13053  00088A                     u9637:
 13054  00088A  2EE8               	decfsz	wreg,f,c
 13055  00088C  D7FE               	bra	u9637
 13056  00088E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13057  000890  D7FC               	bra	u9637
 13058  000892  F000               	nop	
 13059  000894  0100               	movlb	0	; () banked
 13060  000896  2BC2               	incf	actuatorTest@i_1772& (0+255),f,b
 13061  000898  D7EF               	goto	l8045
 13062  00089A                     l8053:
 13063                           
 13064                           ; BSR set to: 0
 13065  00089A  0E00               	movlw	0
 13066  00089C  0100               	movlb	0	; () banked
 13067  00089E  6FC3               	movwf	actuatorTest@i_1773& (0+255),b
 13068  0008A0                     l8055:
 13069                           
 13070                           ; BSR set to: 0
 13071  0008A0  0E63               	movlw	99
 13072  0008A2  0100               	movlb	0	; () banked
 13073  0008A4  65C3               	cpfsgt	actuatorTest@i_1773& (0+255),b
 13074  0008A6  D001               	goto	l8059
 13075  0008A8  D00C               	goto	l8063
 13076  0008AA                     l8059:
 13077                           
 13078                           ; BSR set to: 0
 13079  0008AA  0E68               	movlw	104
 13080  0008AC  0100               	movlb	0	; () banked
 13081  0008AE  6FAB               	movwf	??_actuatorTest& (0+255),b
 13082  0008B0  0EE4               	movlw	228
 13083  0008B2                     u9647:
 13084  0008B2  2EE8               	decfsz	wreg,f,c
 13085  0008B4  D7FE               	bra	u9647
 13086  0008B6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13087  0008B8  D7FC               	bra	u9647
 13088  0008BA  F000               	nop	
 13089  0008BC  0100               	movlb	0	; () banked
 13090  0008BE  2BC3               	incf	actuatorTest@i_1773& (0+255),f,b
 13091  0008C0  D7EF               	goto	l8055
 13092  0008C2                     l8063:
 13093                           
 13094                           ; BSR set to: 0
 13095                           ;Test.c: 349: machine_state = Testing_state;
 13096  0008C2  0E03               	movlw	3
 13097  0008C4  0100               	movlb	0	; () banked
 13098  0008C6  6FFC               	movwf	_machine_state& (0+255),b
 13099                           
 13100                           ; BSR set to: 0
 13101  0008C8  0012               	return		;funcret
 13102  0008CA                     __end_of_actuatorTest:
 13103                           	opt stack 0
 13104                           tblptru	equ	0xFF8
 13105                           tblptrh	equ	0xFF7
 13106                           tblptrl	equ	0xFF6
 13107                           tablat	equ	0xFF5
 13108                           prodh	equ	0xFF4
 13109                           prodl	equ	0xFF3
 13110                           intcon	equ	0xFF2
 13111                           intcon2	equ	0xFF1
 13112                           intcon3	equ	0xFF0
 13113                           postinc0	equ	0xFEE
 13114                           wreg	equ	0xFE8
 13115                           postdec1	equ	0xFE5
 13116                           fsr1l	equ	0xFE1
 13117                           indf2	equ	0xFDF
 13118                           postinc2	equ	0xFDE
 13119                           postdec2	equ	0xFDD
 13120                           fsr2h	equ	0xFDA
 13121                           fsr2l	equ	0xFD9
 13122                           status	equ	0xFD8
 13123                           
 13124 ;; *************** function _SpeedTest *****************
 13125 ;; Defined at:
 13126 ;;		line 549 in file "Test.c"
 13127 ;; Parameters:    Size  Location     Type
 13128 ;;		None
 13129 ;; Auto vars:     Size  Location     Type
 13130 ;;		None
 13131 ;; Return value:  Size  Location     Type
 13132 ;;                  1    wreg      void 
 13133 ;; Registers used:
 13134 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13135 ;; Tracked objects:
 13136 ;;		On entry : 0/0
 13137 ;;		On exit  : 0/0
 13138 ;;		Unchanged: 0/0
 13139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13140 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13141 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13142 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13143 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13144 ;;Total ram usage:        1 bytes
 13145 ;; Hardware stack levels used:    1
 13146 ;; Hardware stack levels required when called:   10
 13147 ;; This function calls:
 13148 ;;		_lcdInst
 13149 ;;		_printf
 13150 ;; This function is called by:
 13151 ;;		_Test
 13152 ;; This function uses a non-reentrant model
 13153 ;;
 13154                           
 13155                           	psect	text41
 13156  0045B0                     __ptext41:
 13157                           	opt stack 0
 13158  0045B0                     _SpeedTest:
 13159                           	opt stack 19
 13160                           
 13161                           ;Test.c: 551: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13162                           
 13163                           ; BSR set to: 0
 13164                           ;incstack = 0
 13165  0045B0  0E01               	movlw	1
 13166  0045B2  EC48  F029         	call	_lcdInst
 13167  0045B6  0E68               	movlw	104
 13168  0045B8  0100               	movlb	0	; () banked
 13169  0045BA  6FAB               	movwf	??_SpeedTest& (0+255),b
 13170  0045BC  0EE4               	movlw	228
 13171  0045BE                     u9657:
 13172  0045BE  2EE8               	decfsz	wreg,f,c
 13173  0045C0  D7FE               	bra	u9657
 13174  0045C2  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 13175  0045C4  D7FC               	bra	u9657
 13176  0045C6  F000               	nop	
 13177  0045C8  0E80               	movlw	128
 13178  0045CA  EC48  F029         	call	_lcdInst
 13179                           
 13180                           ;Test.c: 552: printf("S: D WILL RETURN ");
 13181  0045CE  0E5B               	movlw	low STR_120
 13182  0045D0  0100               	movlb	0	; () banked
 13183  0045D2  6F8E               	movwf	printf@f& (0+255),b
 13184  0045D4  0EFB               	movlw	high STR_120
 13185  0045D6  0100               	movlb	0	; () banked
 13186  0045D8  6F8F               	movwf	(printf@f+1)& (0+255),b
 13187  0045DA  EC02  F00B         	call	_printf	;wreg free
 13188                           
 13189                           ;Test.c: 553: lcdInst(0b11000000);;
 13190  0045DE  0EC0               	movlw	192
 13191  0045E0  EC48  F029         	call	_lcdInst
 13192                           
 13193                           ;Test.c: 554: printf("OTHER SETS RA5   ");
 13194  0045E4  0E49               	movlw	low STR_112
 13195  0045E6  0100               	movlb	0	; () banked
 13196  0045E8  6F8E               	movwf	printf@f& (0+255),b
 13197  0045EA  0EFB               	movlw	high STR_112
 13198  0045EC  0100               	movlb	0	; () banked
 13199  0045EE  6F8F               	movwf	(printf@f+1)& (0+255),b
 13200  0045F0  EC02  F00B         	call	_printf	;wreg free
 13201  0045F4                     l1338:
 13202  0045F4  A281               	btfss	3969,1,c	;volatile
 13203  0045F6  D7FE               	goto	l1338
 13204                           
 13205                           ;Test.c: 559: }
 13206                           ;Test.c: 560: if(PORTB >> 4 == 0b1111){
 13207  0045F8  3881               	swapf	3969,w,c	;volatile
 13208  0045FA  0B0F               	andlw	15
 13209  0045FC  0A0F               	xorlw	15
 13210  0045FE  B4D8               	btfsc	status,2,c
 13211  004600  0012               	return	
 13212  004602  D014               	goto	l8105
 13213  004604                     l1345:
 13214                           
 13215                           ;Test.c: 565: LATAbits.LATA5 = 1;
 13216  004604  8A89               	bsf	3977,5,c	;volatile
 13217                           
 13218                           ;Test.c: 566: _delay((unsigned long)((5)*(32000000/4000.0)));
 13219  004606  0E34               	movlw	52
 13220  004608  0100               	movlb	0	; () banked
 13221  00460A  6FAB               	movwf	??_SpeedTest& (0+255),b
 13222  00460C  0EF1               	movlw	241
 13223  00460E                     u9667:
 13224  00460E  2EE8               	decfsz	wreg,f,c
 13225  004610  D7FE               	bra	u9667
 13226  004612  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 13227  004614  D7FC               	bra	u9667
 13228  004616  D000               	nop2	
 13229                           
 13230                           ;Test.c: 567: LATAbits.LATA5 = 0;
 13231  004618  9A89               	bcf	3977,5,c	;volatile
 13232                           
 13233                           ;Test.c: 568: _delay((unsigned long)((5)*(32000000/4000.0)));
 13234  00461A  0E34               	movlw	52
 13235  00461C  0100               	movlb	0	; () banked
 13236  00461E  6FAB               	movwf	??_SpeedTest& (0+255),b
 13237  004620  0EF1               	movlw	241
 13238  004622                     u9677:
 13239  004622  2EE8               	decfsz	wreg,f,c
 13240  004624  D7FE               	bra	u9677
 13241  004626  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 13242  004628  D7FC               	bra	u9677
 13243  00462A  D000               	nop2	
 13244  00462C                     l8105:
 13245  00462C  B281               	btfsc	3969,1,c	;volatile
 13246  00462E  D7EA               	goto	l1345
 13247                           
 13248                           ;Test.c: 571: }
 13249                           ;Test.c: 572: LATAbits.LATA5 = 0;
 13250  004630  9A89               	bcf	3977,5,c	;volatile
 13251  004632  D7E0               	goto	l1338
 13252  004634                     __end_of_SpeedTest:
 13253                           	opt stack 0
 13254                           tblptru	equ	0xFF8
 13255                           tblptrh	equ	0xFF7
 13256                           tblptrl	equ	0xFF6
 13257                           tablat	equ	0xFF5
 13258                           prodh	equ	0xFF4
 13259                           prodl	equ	0xFF3
 13260                           intcon	equ	0xFF2
 13261                           intcon2	equ	0xFF1
 13262                           intcon3	equ	0xFF0
 13263                           postinc0	equ	0xFEE
 13264                           wreg	equ	0xFE8
 13265                           postdec1	equ	0xFE5
 13266                           fsr1l	equ	0xFE1
 13267                           indf2	equ	0xFDF
 13268                           postinc2	equ	0xFDE
 13269                           postdec2	equ	0xFDD
 13270                           fsr2h	equ	0xFDA
 13271                           fsr2l	equ	0xFD9
 13272                           status	equ	0xFD8
 13273                           
 13274 ;; *************** function _PusherTest *****************
 13275 ;; Defined at:
 13276 ;;		line 467 in file "Test.c"
 13277 ;; Parameters:    Size  Location     Type
 13278 ;;		None
 13279 ;; Auto vars:     Size  Location     Type
 13280 ;;  i               2   51[BANK0 ] int 
 13281 ;;  i               2   49[BANK0 ] int 
 13282 ;;  res             2   47[BANK0 ] int 
 13283 ;;  res             2   45[BANK0 ] int 
 13284 ;; Return value:  Size  Location     Type
 13285 ;;                  1    wreg      void 
 13286 ;; Registers used:
 13287 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13288 ;; Tracked objects:
 13289 ;;		On entry : 0/0
 13290 ;;		On exit  : 0/0
 13291 ;;		Unchanged: 0/0
 13292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13293 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13294 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13295 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13296 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13297 ;;Total ram usage:       10 bytes
 13298 ;; Hardware stack levels used:    1
 13299 ;; Hardware stack levels required when called:   10
 13300 ;; This function calls:
 13301 ;;		_lcdInst
 13302 ;;		_printf
 13303 ;;		_readADC
 13304 ;; This function is called by:
 13305 ;;		_Test
 13306 ;; This function uses a non-reentrant model
 13307 ;;
 13308                           
 13309                           	psect	text42
 13310  002C5E                     __ptext42:
 13311                           	opt stack 0
 13312  002C5E                     _PusherTest:
 13313                           	opt stack 19
 13314                           
 13315                           ;Test.c: 468: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13316                           
 13317                           ;incstack = 0
 13318  002C5E  0E01               	movlw	1
 13319  002C60  EC48  F029         	call	_lcdInst
 13320  002C64  0E68               	movlw	104
 13321  002C66  0100               	movlb	0	; () banked
 13322  002C68  6FAB               	movwf	??_PusherTest& (0+255),b
 13323  002C6A  0EE4               	movlw	228
 13324  002C6C                     u9687:
 13325  002C6C  2EE8               	decfsz	wreg,f,c
 13326  002C6E  D7FE               	bra	u9687
 13327  002C70  2FAB               	decfsz	??_PusherTest& (0+255),f,b
 13328  002C72  D7FC               	bra	u9687
 13329  002C74  F000               	nop	
 13330  002C76  0E80               	movlw	128
 13331  002C78  EC48  F029         	call	_lcdInst
 13332                           
 13333                           ;Test.c: 469: printf("PUSHER TST");
 13334  002C7C  0E71               	movlw	low STR_113
 13335  002C7E  0100               	movlb	0	; () banked
 13336  002C80  6F8E               	movwf	printf@f& (0+255),b
 13337  002C82  0EFF               	movlw	high STR_113
 13338  002C84  0100               	movlb	0	; () banked
 13339  002C86  6F8F               	movwf	(printf@f+1)& (0+255),b
 13340  002C88  EC02  F00B         	call	_printf	;wreg free
 13341                           
 13342                           ;Test.c: 470: LATCbits.LATC5 = 1;
 13343  002C8C  8A8B               	bsf	3979,5,c	;volatile
 13344                           
 13345                           ;Test.c: 472: while(PORTBbits.RB1 == 0){
 13346  002C8E  D05C               	goto	l8135
 13347  002C90                     l8117:
 13348                           
 13349                           ;Test.c: 473: readADC(0);
 13350  002C90  0E00               	movlw	0
 13351  002C92  EC3F  F028         	call	_readADC
 13352                           
 13353                           ;Test.c: 474: int res = ADRESH<<8 | ADRESL;
 13354  002C96  50C3               	movf	4035,w,c	;volatile
 13355  002C98  CFC4 F0AB          	movff	4036,??_PusherTest	;volatile
 13356  002C9C  0100               	movlb	0	; () banked
 13357  002C9E  6BAC               	clrf	(??_PusherTest+1)& (0+255),b
 13358  002CA0  C0AB  F0AC         	movff	??_PusherTest,??_PusherTest+1
 13359  002CA4  0100               	movlb	0	; () banked
 13360  002CA6  6BAB               	clrf	??_PusherTest& (0+255),b
 13361  002CA8  0100               	movlb	0	; () banked
 13362  002CAA  11AB               	iorwf	??_PusherTest& (0+255),w,b
 13363  002CAC  0100               	movlb	0	; () banked
 13364  002CAE  6FAD               	movwf	PusherTest@res& (0+255),b
 13365  002CB0  0100               	movlb	0	; () banked
 13366  002CB2  51AC               	movf	(??_PusherTest+1)& (0+255),w,b
 13367  002CB4  0100               	movlb	0	; () banked
 13368  002CB6  6FAE               	movwf	(PusherTest@res+1)& (0+255),b
 13369                           
 13370                           ; BSR set to: 0
 13371                           ;Test.c: 475: IR_signal = (res > 800) ? 1 : 0;
 13372  002CB8  0100               	movlb	0	; () banked
 13373  002CBA  BFAE               	btfsc	(PusherTest@res+1)& (0+255),7,b
 13374  002CBC  D00A               	goto	u6750
 13375  002CBE  0E21               	movlw	33
 13376  002CC0  0100               	movlb	0	; () banked
 13377  002CC2  5DAD               	subwf	PusherTest@res& (0+255),w,b
 13378  002CC4  0E03               	movlw	3
 13379  002CC6  0100               	movlb	0	; () banked
 13380  002CC8  59AE               	subwfb	(PusherTest@res+1)& (0+255),w,b
 13381  002CCA  A0D8               	btfss	status,0,c
 13382  002CCC  D002               	goto	u6750
 13383  002CCE  0E01               	movlw	1
 13384  002CD0  D001               	goto	u6760
 13385  002CD2                     u6750:
 13386  002CD2  0E00               	movlw	0
 13387  002CD4                     u6760:
 13388  002CD4  0100               	movlb	0	; () banked
 13389  002CD6  6FE6               	movwf	_IR_signal& (0+255),b
 13390  002CD8  6BE7               	clrf	(_IR_signal+1)& (0+255),b
 13391                           
 13392                           ;Test.c: 477: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13393  002CDA  0E01               	movlw	1
 13394  002CDC  EC48  F029         	call	_lcdInst
 13395  002CE0  0E68               	movlw	104
 13396  002CE2  0100               	movlb	0	; () banked
 13397  002CE4  6FAB               	movwf	??_PusherTest& (0+255),b
 13398  002CE6  0EE4               	movlw	228
 13399  002CE8                     u9697:
 13400  002CE8  2EE8               	decfsz	wreg,f,c
 13401  002CEA  D7FE               	bra	u9697
 13402  002CEC  2FAB               	decfsz	??_PusherTest& (0+255),f,b
 13403  002CEE  D7FC               	bra	u9697
 13404  002CF0  F000               	nop	
 13405  002CF2  0E80               	movlw	128
 13406  002CF4  EC48  F029         	call	_lcdInst
 13407                           
 13408                           ;Test.c: 478: printf("IR_signal: %d ", IR_signal);
 13409  002CF8  0E5A               	movlw	low STR_80
 13410  002CFA  0100               	movlb	0	; () banked
 13411  002CFC  6F8E               	movwf	printf@f& (0+255),b
 13412  002CFE  0EFE               	movlw	high STR_80
 13413  002D00  0100               	movlb	0	; () banked
 13414  002D02  6F8F               	movwf	(printf@f+1)& (0+255),b
 13415  002D04  C0E6  F090         	movff	_IR_signal,?_printf+2
 13416  002D08  C0E7  F091         	movff	_IR_signal+1,?_printf+3
 13417  002D0C  EC02  F00B         	call	_printf	;wreg free
 13418                           
 13419                           ;Test.c: 479: lcdInst(0b11000000);;
 13420  002D10  0EC0               	movlw	192
 13421  002D12  EC48  F029         	call	_lcdInst
 13422                           
 13423                           ;Test.c: 480: printf("%d", res);
 13424  002D16  0E16               	movlw	low (STR_27+14)
 13425  002D18  0100               	movlb	0	; () banked
 13426  002D1A  6F8E               	movwf	printf@f& (0+255),b
 13427  002D1C  0EFE               	movlw	high (STR_27+14)
 13428  002D1E  0100               	movlb	0	; () banked
 13429  002D20  6F8F               	movwf	(printf@f+1)& (0+255),b
 13430  002D22  C0AD  F090         	movff	PusherTest@res,?_printf+2
 13431  002D26  C0AE  F091         	movff	PusherTest@res+1,?_printf+3
 13432  002D2A  EC02  F00B         	call	_printf	;wreg free
 13433                           
 13434                           ;Test.c: 481: _delay((unsigned long)((100)*(32000000/4000.0)));
 13435  002D2E  0E05               	movlw	5
 13436  002D30  0100               	movlb	0	; () banked
 13437  002D32  6FAC               	movwf	(??_PusherTest+1)& (0+255),b
 13438  002D34  0E0F               	movlw	15
 13439  002D36  0100               	movlb	0	; () banked
 13440  002D38  6FAB               	movwf	??_PusherTest& (0+255),b
 13441  002D3A  0EF1               	movlw	241
 13442  002D3C                     u9707:
 13443  002D3C  2EE8               	decfsz	wreg,f,c
 13444  002D3E  D7FE               	bra	u9707
 13445  002D40  2FAB               	decfsz	??_PusherTest& (0+255),f,b
 13446  002D42  D7FC               	bra	u9707
 13447  002D44  2FAC               	decfsz	(??_PusherTest+1)& (0+255),f,b
 13448  002D46  D7FA               	bra	u9707
 13449  002D48                     l8135:
 13450  002D48  B281               	btfsc	3969,1,c	;volatile
 13451  002D4A  D05D               	goto	l8155
 13452  002D4C  D7A1               	goto	l8117
 13453  002D4E                     l8137:
 13454                           
 13455                           ;Test.c: 487: readADC(0);
 13456  002D4E  0E00               	movlw	0
 13457  002D50  EC3F  F028         	call	_readADC
 13458                           
 13459                           ;Test.c: 488: int res = ADRESH<<8 | ADRESL;
 13460  002D54  50C3               	movf	4035,w,c	;volatile
 13461  002D56  CFC4 F0AB          	movff	4036,??_PusherTest	;volatile
 13462  002D5A  0100               	movlb	0	; () banked
 13463  002D5C  6BAC               	clrf	(??_PusherTest+1)& (0+255),b
 13464  002D5E  C0AB  F0AC         	movff	??_PusherTest,??_PusherTest+1
 13465  002D62  0100               	movlb	0	; () banked
 13466  002D64  6BAB               	clrf	??_PusherTest& (0+255),b
 13467  002D66  0100               	movlb	0	; () banked
 13468  002D68  11AB               	iorwf	??_PusherTest& (0+255),w,b
 13469  002D6A  0100               	movlb	0	; () banked
 13470  002D6C  6FAF               	movwf	PusherTest@res_1788& (0+255),b
 13471  002D6E  0100               	movlb	0	; () banked
 13472  002D70  51AC               	movf	(??_PusherTest+1)& (0+255),w,b
 13473  002D72  0100               	movlb	0	; () banked
 13474  002D74  6FB0               	movwf	(PusherTest@res_1788+1)& (0+255),b
 13475                           
 13476                           ; BSR set to: 0
 13477                           ;Test.c: 489: IR_signal = (res > 800) ? 1 : 0;
 13478  002D76  0100               	movlb	0	; () banked
 13479  002D78  BFB0               	btfsc	(PusherTest@res_1788+1)& (0+255),7,b
 13480  002D7A  D00A               	goto	u6780
 13481  002D7C  0E21               	movlw	33
 13482  002D7E  0100               	movlb	0	; () banked
 13483  002D80  5DAF               	subwf	PusherTest@res_1788& (0+255),w,b
 13484  002D82  0E03               	movlw	3
 13485  002D84  0100               	movlb	0	; () banked
 13486  002D86  59B0               	subwfb	(PusherTest@res_1788+1)& (0+255),w,b
 13487  002D88  A0D8               	btfss	status,0,c
 13488  002D8A  D002               	goto	u6780
 13489  002D8C  0E01               	movlw	1
 13490  002D8E  D001               	goto	u6790
 13491  002D90                     u6780:
 13492  002D90  0E00               	movlw	0
 13493  002D92                     u6790:
 13494  002D92  0100               	movlb	0	; () banked
 13495  002D94  6FE6               	movwf	_IR_signal& (0+255),b
 13496  002D96  6BE7               	clrf	(_IR_signal+1)& (0+255),b
 13497                           
 13498                           ;Test.c: 490: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13499  002D98  0E01               	movlw	1
 13500  002D9A  EC48  F029         	call	_lcdInst
 13501  002D9E  0E68               	movlw	104
 13502  002DA0  0100               	movlb	0	; () banked
 13503  002DA2  6FAB               	movwf	??_PusherTest& (0+255),b
 13504  002DA4  0EE4               	movlw	228
 13505  002DA6                     u9717:
 13506  002DA6  2EE8               	decfsz	wreg,f,c
 13507  002DA8  D7FE               	bra	u9717
 13508  002DAA  2FAB               	decfsz	??_PusherTest& (0+255),f,b
 13509  002DAC  D7FC               	bra	u9717
 13510  002DAE  F000               	nop	
 13511  002DB0  0E80               	movlw	128
 13512  002DB2  EC48  F029         	call	_lcdInst
 13513                           
 13514                           ;Test.c: 491: printf("IR_signal: %d ", IR_signal);
 13515  002DB6  0E5A               	movlw	low STR_80
 13516  002DB8  0100               	movlb	0	; () banked
 13517  002DBA  6F8E               	movwf	printf@f& (0+255),b
 13518  002DBC  0EFE               	movlw	high STR_80
 13519  002DBE  0100               	movlb	0	; () banked
 13520  002DC0  6F8F               	movwf	(printf@f+1)& (0+255),b
 13521  002DC2  C0E6  F090         	movff	_IR_signal,?_printf+2
 13522  002DC6  C0E7  F091         	movff	_IR_signal+1,?_printf+3
 13523  002DCA  EC02  F00B         	call	_printf	;wreg free
 13524                           
 13525                           ;Test.c: 492: lcdInst(0b11000000);;
 13526  002DCE  0EC0               	movlw	192
 13527  002DD0  EC48  F029         	call	_lcdInst
 13528                           
 13529                           ;Test.c: 493: printf("%d", res);
 13530  002DD4  0E16               	movlw	low (STR_27+14)
 13531  002DD6  0100               	movlb	0	; () banked
 13532  002DD8  6F8E               	movwf	printf@f& (0+255),b
 13533  002DDA  0EFE               	movlw	high (STR_27+14)
 13534  002DDC  0100               	movlb	0	; () banked
 13535  002DDE  6F8F               	movwf	(printf@f+1)& (0+255),b
 13536  002DE0  C0AF  F090         	movff	PusherTest@res_1788,?_printf+2
 13537  002DE4  C0B0  F091         	movff	PusherTest@res_1788+1,?_printf+3
 13538  002DE8  EC02  F00B         	call	_printf	;wreg free
 13539                           
 13540                           ;Test.c: 494: _delay((unsigned long)((100)*(32000000/4000.0)));
 13541  002DEC  0E05               	movlw	5
 13542  002DEE  0100               	movlb	0	; () banked
 13543  002DF0  6FAC               	movwf	(??_PusherTest+1)& (0+255),b
 13544  002DF2  0E0F               	movlw	15
 13545  002DF4  0100               	movlb	0	; () banked
 13546  002DF6  6FAB               	movwf	??_PusherTest& (0+255),b
 13547  002DF8  0EF1               	movlw	241
 13548  002DFA                     u9727:
 13549  002DFA  2EE8               	decfsz	wreg,f,c
 13550  002DFC  D7FE               	bra	u9727
 13551  002DFE  2FAB               	decfsz	??_PusherTest& (0+255),f,b
 13552  002E00  D7FC               	bra	u9727
 13553  002E02  2FAC               	decfsz	(??_PusherTest+1)& (0+255),f,b
 13554  002E04  D7FA               	bra	u9727
 13555  002E06                     l8155:
 13556  002E06  A281               	btfss	3969,1,c	;volatile
 13557  002E08  D7A2               	goto	l8137
 13558                           
 13559                           ;Test.c: 495: }
 13560                           ;Test.c: 496: if(PORTB >> 4 == 0b1111){
 13561  002E0A  3881               	swapf	3969,w,c	;volatile
 13562  002E0C  0B0F               	andlw	15
 13563  002E0E  0A0F               	xorlw	15
 13564  002E10  B4D8               	btfsc	status,2,c
 13565  002E12  D047               	goto	l1307
 13566                           
 13567                           ;Test.c: 501: else if(PORTB >> 4 == 0b0101){
 13568                           
 13569                           ;Test.c: 498: }
 13570                           
 13571                           ;Test.c: 497: break;
 13572  002E14  3881               	swapf	3969,w,c	;volatile
 13573  002E16  0B0F               	andlw	15
 13574  002E18  0A05               	xorlw	5
 13575  002E1A  A4D8               	btfss	status,2,c
 13576  002E1C  D01D               	goto	l8177
 13577                           
 13578                           ;Test.c: 502: for(int i = 0; i<3000; i++){
 13579  002E1E  0E00               	movlw	0
 13580  002E20  0100               	movlb	0	; () banked
 13581  002E22  6FB2               	movwf	(PusherTest@i+1)& (0+255),b
 13582  002E24  0E00               	movlw	0
 13583  002E26  6FB1               	movwf	PusherTest@i& (0+255),b
 13584  002E28                     l8167:
 13585                           
 13586                           ; BSR set to: 0
 13587  002E28  0100               	movlb	0	; () banked
 13588  002E2A  BFB2               	btfsc	(PusherTest@i+1)& (0+255),7,b
 13589  002E2C  D008               	goto	l1310
 13590  002E2E  0EB8               	movlw	184
 13591  002E30  0100               	movlb	0	; () banked
 13592  002E32  5DB1               	subwf	PusherTest@i& (0+255),w,b
 13593  002E34  0E0B               	movlw	11
 13594  002E36  0100               	movlb	0	; () banked
 13595  002E38  59B2               	subwfb	(PusherTest@i+1)& (0+255),w,b
 13596  002E3A  B0D8               	btfsc	status,0,c
 13597  002E3C  D02F               	goto	l1316
 13598  002E3E                     l1310:
 13599                           
 13600                           ; BSR set to: 0
 13601                           ;Test.c: 503: LATAbits.LATA4 = 1;
 13602  002E3E  8889               	bsf	3977,4,c	;volatile
 13603                           
 13604                           ; BSR set to: 0
 13605                           ;Test.c: 504: _delay((unsigned long)((75)*(32000000/4000000.0)));
 13606  002E40  0EC8               	movlw	200
 13607  002E42                     u9737:
 13608  002E42  2EE8               	decfsz	wreg,f,c
 13609  002E44  D7FE               	bra	u9737
 13610                           
 13611                           ;Test.c: 505: LATAbits.LATA4 = 0;
 13612  002E46  9889               	bcf	3977,4,c	;volatile
 13613                           
 13614                           ;Test.c: 506: _delay((unsigned long)((25)*(32000000/4000000.0)));
 13615  002E48  0E42               	movlw	66
 13616  002E4A                     u9747:
 13617  002E4A  2EE8               	decfsz	wreg,f,c
 13618  002E4C  D7FE               	bra	u9747
 13619  002E4E  D000               	nop2	
 13620  002E50  0100               	movlb	0	; () banked
 13621  002E52  4BB1               	infsnz	PusherTest@i& (0+255),f,b
 13622  002E54  2BB2               	incf	(PusherTest@i+1)& (0+255),f,b
 13623  002E56  D7E8               	goto	l8167
 13624  002E58                     l8177:
 13625                           
 13626                           ;Test.c: 509: else if (PORTB >> 4 == 0b110){
 13627  002E58  3881               	swapf	3969,w,c	;volatile
 13628  002E5A  0B0F               	andlw	15
 13629  002E5C  0A06               	xorlw	6
 13630  002E5E  A4D8               	btfss	status,2,c
 13631  002E60  D01D               	goto	l1316
 13632                           
 13633                           ;Test.c: 510: for(int i = 0; i<3000; i++){
 13634  002E62  0E00               	movlw	0
 13635  002E64  0100               	movlb	0	; () banked
 13636  002E66  6FB4               	movwf	(PusherTest@i_1792+1)& (0+255),b
 13637  002E68  0E00               	movlw	0
 13638  002E6A  6FB3               	movwf	PusherTest@i_1792& (0+255),b
 13639  002E6C                     l8181:
 13640                           
 13641                           ; BSR set to: 0
 13642  002E6C  0100               	movlb	0	; () banked
 13643  002E6E  BFB4               	btfsc	(PusherTest@i_1792+1)& (0+255),7,b
 13644  002E70  D008               	goto	l1314
 13645  002E72  0EB8               	movlw	184
 13646  002E74  0100               	movlb	0	; () banked
 13647  002E76  5DB3               	subwf	PusherTest@i_1792& (0+255),w,b
 13648  002E78  0E0B               	movlw	11
 13649  002E7A  0100               	movlb	0	; () banked
 13650  002E7C  59B4               	subwfb	(PusherTest@i_1792+1)& (0+255),w,b
 13651  002E7E  B0D8               	btfsc	status,0,c
 13652  002E80  D00D               	goto	l1316
 13653  002E82                     l1314:
 13654                           
 13655                           ; BSR set to: 0
 13656                           ;Test.c: 511: LATAbits.LATA4 = 1;
 13657  002E82  8889               	bsf	3977,4,c	;volatile
 13658                           
 13659                           ; BSR set to: 0
 13660                           ;Test.c: 512: _delay((unsigned long)((58)*(32000000/4000000.0)));
 13661  002E84  0E9A               	movlw	154
 13662  002E86                     u9757:
 13663  002E86  2EE8               	decfsz	wreg,f,c
 13664  002E88  D7FE               	bra	u9757
 13665  002E8A  D000               	nop2	
 13666                           
 13667                           ;Test.c: 513: LATAbits.LATA4 = 0;
 13668  002E8C  9889               	bcf	3977,4,c	;volatile
 13669                           
 13670                           ;Test.c: 514: _delay((unsigned long)((42)*(32000000/4000000.0)));
 13671  002E8E  0E70               	movlw	112
 13672  002E90                     u9767:
 13673  002E90  2EE8               	decfsz	wreg,f,c
 13674  002E92  D7FE               	bra	u9767
 13675  002E94  0100               	movlb	0	; () banked
 13676  002E96  4BB3               	infsnz	PusherTest@i_1792& (0+255),f,b
 13677  002E98  2BB4               	incf	(PusherTest@i_1792+1)& (0+255),f,b
 13678  002E9A  D7E8               	goto	l8181
 13679  002E9C                     l1316:
 13680  002E9C  A281               	btfss	3969,1,c	;volatile
 13681  002E9E  D7B3               	goto	l8155
 13682  002EA0  D7FD               	goto	l1316
 13683  002EA2                     l1307:
 13684                           
 13685                           ;Test.c: 519: }
 13686                           ;Test.c: 520: LATCbits.LATC5 = 0;
 13687  002EA2  9A8B               	bcf	3979,5,c	;volatile
 13688  002EA4  0012               	return		;funcret
 13689  002EA6                     __end_of_PusherTest:
 13690                           	opt stack 0
 13691                           tblptru	equ	0xFF8
 13692                           tblptrh	equ	0xFF7
 13693                           tblptrl	equ	0xFF6
 13694                           tablat	equ	0xFF5
 13695                           prodh	equ	0xFF4
 13696                           prodl	equ	0xFF3
 13697                           intcon	equ	0xFF2
 13698                           intcon2	equ	0xFF1
 13699                           intcon3	equ	0xFF0
 13700                           postinc0	equ	0xFEE
 13701                           wreg	equ	0xFE8
 13702                           postdec1	equ	0xFE5
 13703                           fsr1l	equ	0xFE1
 13704                           indf2	equ	0xFDF
 13705                           postinc2	equ	0xFDE
 13706                           postdec2	equ	0xFDD
 13707                           fsr2h	equ	0xFDA
 13708                           fsr2l	equ	0xFD9
 13709                           status	equ	0xFD8
 13710                           
 13711 ;; *************** function _readADC *****************
 13712 ;; Defined at:
 13713 ;;		line 15 in file "ADCFunctionality.c"
 13714 ;; Parameters:    Size  Location     Type
 13715 ;;  channel         1    wreg     unsigned char 
 13716 ;; Auto vars:     Size  Location     Type
 13717 ;;  channel         1    1[BANK0 ] unsigned char 
 13718 ;; Return value:  Size  Location     Type
 13719 ;;                  1    wreg      void 
 13720 ;; Registers used:
 13721 ;;		wreg, status,2, status,0, cstack
 13722 ;; Tracked objects:
 13723 ;;		On entry : 0/0
 13724 ;;		On exit  : 0/0
 13725 ;;		Unchanged: 0/0
 13726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13727 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13728 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13729 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13730 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13731 ;;Total ram usage:        2 bytes
 13732 ;; Hardware stack levels used:    1
 13733 ;; Hardware stack levels required when called:    7
 13734 ;; This function calls:
 13735 ;;		Nothing
 13736 ;; This function is called by:
 13737 ;;		_readIR
 13738 ;;		_readMAG
 13739 ;;		_sensorTest
 13740 ;;		_PusherTest
 13741 ;; This function uses a non-reentrant model
 13742 ;;
 13743                           
 13744                           	psect	text43
 13745  00507E                     __ptext43:
 13746                           	opt stack 0
 13747  00507E                     _readADC:
 13748                           	opt stack 20
 13749                           
 13750                           ;incstack = 0
 13751                           ;readADC@channel stored from wreg
 13752  00507E  0100               	movlb	0	; () banked
 13753  005080  6F81               	movwf	readADC@channel& (0+255),b
 13754                           
 13755                           ;ADCFunctionality.c: 17: ADCON0 = channel << 2;
 13756  005082  0100               	movlb	0	; () banked
 13757  005084  4581               	rlncf	readADC@channel& (0+255),w,b
 13758  005086  46E8               	rlncf	wreg,f,c
 13759  005088  0BFC               	andlw	252
 13760  00508A  6EC2               	movwf	4034,c	;volatile
 13761                           
 13762                           ; BSR set to: 0
 13763                           ;ADCFunctionality.c: 18: ADCON0bits.ADON = 1;
 13764  00508C  80C2               	bsf	4034,0,c	;volatile
 13765                           
 13766                           ; BSR set to: 0
 13767                           ;ADCFunctionality.c: 19: ADCON0bits.GO = 1;
 13768  00508E  82C2               	bsf	4034,1,c	;volatile
 13769                           
 13770                           ;ADCFunctionality.c: 20: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(32000
      +                          000/4000.0)));}
 13771  005090  D009               	goto	l6033
 13772  005092                     l6031:
 13773  005092  0E34               	movlw	52
 13774  005094  0100               	movlb	0	; () banked
 13775  005096  6F80               	movwf	??_readADC& (0+255),b
 13776  005098  0EF1               	movlw	241
 13777  00509A                     u9777:
 13778  00509A  2EE8               	decfsz	wreg,f,c
 13779  00509C  D7FE               	bra	u9777
 13780  00509E  2F80               	decfsz	??_readADC& (0+255),f,b
 13781  0050A0  D7FC               	bra	u9777
 13782  0050A2  D000               	nop2	
 13783  0050A4                     l6033:
 13784  0050A4  A2C2               	btfss	4034,1,c	;volatile
 13785  0050A6  0012               	return	
 13786  0050A8  D7F4               	goto	l6031
 13787  0050AA                     __end_of_readADC:
 13788                           	opt stack 0
 13789                           tblptru	equ	0xFF8
 13790                           tblptrh	equ	0xFF7
 13791                           tblptrl	equ	0xFF6
 13792                           tablat	equ	0xFF5
 13793                           prodh	equ	0xFF4
 13794                           prodl	equ	0xFF3
 13795                           intcon	equ	0xFF2
 13796                           intcon2	equ	0xFF1
 13797                           intcon3	equ	0xFF0
 13798                           postinc0	equ	0xFEE
 13799                           wreg	equ	0xFE8
 13800                           postdec1	equ	0xFE5
 13801                           fsr1l	equ	0xFE1
 13802                           indf2	equ	0xFDF
 13803                           postinc2	equ	0xFDE
 13804                           postdec2	equ	0xFDD
 13805                           fsr2h	equ	0xFDA
 13806                           fsr2l	equ	0xFD9
 13807                           status	equ	0xFD8
 13808                           
 13809 ;; *************** function _PortTests *****************
 13810 ;; Defined at:
 13811 ;;		line 409 in file "Test.c"
 13812 ;; Parameters:    Size  Location     Type
 13813 ;;		None
 13814 ;; Auto vars:     Size  Location     Type
 13815 ;;		None
 13816 ;; Return value:  Size  Location     Type
 13817 ;;                  1    wreg      void 
 13818 ;; Registers used:
 13819 ;;		wreg, status,2, status,0
 13820 ;; Tracked objects:
 13821 ;;		On entry : 0/0
 13822 ;;		On exit  : 0/0
 13823 ;;		Unchanged: 0/0
 13824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13825 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13826 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13827 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13828 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13829 ;;Total ram usage:        2 bytes
 13830 ;; Hardware stack levels used:    1
 13831 ;; Hardware stack levels required when called:    7
 13832 ;; This function calls:
 13833 ;;		Nothing
 13834 ;; This function is called by:
 13835 ;;		_Test
 13836 ;; This function uses a non-reentrant model
 13837 ;;
 13838                           
 13839                           	psect	text44
 13840  004634                     __ptext44:
 13841                           	opt stack 0
 13842  004634                     _PortTests:
 13843                           	opt stack 22
 13844  004634                     l1265:
 13845  004634  A281               	btfss	3969,1,c	;volatile
 13846  004636  D7FE               	goto	l1265
 13847                           
 13848                           ;Test.c: 413: var = PORTB >> 4;
 13849  004638  CF81 F080          	movff	3969,??_PortTests	;volatile
 13850  00463C  0100               	movlb	0	; () banked
 13851  00463E  3B80               	swapf	??_PortTests& (0+255),f,b
 13852  004640  0E0F               	movlw	15
 13853  004642  1780               	andwf	??_PortTests& (0+255),f,b
 13854  004644  0100               	movlb	0	; () banked
 13855  004646  5180               	movf	??_PortTests& (0+255),w,b
 13856  004648  0100               	movlb	0	; () banked
 13857  00464A  6FFA               	movwf	_var& (0+255),b
 13858  00464C  6BFB               	clrf	(_var+1)& (0+255),b
 13859                           
 13860                           ;Test.c: 414: switch(var){
 13861  00464E  D00C               	goto	l8195
 13862  004650                     l1269:
 13863                           
 13864                           ; BSR set to: 0
 13865                           ;Test.c: 416: LATEbits.LATE0 = 1;
 13866  004650  808D               	bsf	3981,0,c	;volatile
 13867                           
 13868                           ;Test.c: 417: break;
 13869  004652  D027               	goto	l1277
 13870  004654                     l1271:
 13871                           
 13872                           ; BSR set to: 0
 13873                           ;Test.c: 419: LATEbits.LATE1 = 1;
 13874  004654  828D               	bsf	3981,1,c	;volatile
 13875                           
 13876                           ;Test.c: 420: break;
 13877  004656  D025               	goto	l1277
 13878  004658                     l1272:
 13879                           
 13880                           ; BSR set to: 0
 13881                           ;Test.c: 422: LATDbits.LATD0 = 1;
 13882  004658  808C               	bsf	3980,0,c	;volatile
 13883                           
 13884                           ;Test.c: 423: break;
 13885  00465A  D023               	goto	l1277
 13886  00465C                     l1273:
 13887                           
 13888                           ; BSR set to: 0
 13889                           ;Test.c: 425: LATAbits.LATA3 = 1;
 13890  00465C  8689               	bsf	3977,3,c	;volatile
 13891                           
 13892                           ;Test.c: 426: break;
 13893  00465E  D021               	goto	l1277
 13894  004660                     l1274:
 13895                           
 13896                           ; BSR set to: 0
 13897                           ;Test.c: 428: LATAbits.LATA4 = 1;
 13898  004660  8889               	bsf	3977,4,c	;volatile
 13899                           
 13900                           ;Test.c: 429: break;
 13901  004662  D01F               	goto	l1277
 13902  004664                     l1275:
 13903                           
 13904                           ; BSR set to: 0
 13905                           ;Test.c: 431: LATAbits.LATA5 = 1;
 13906  004664  8A89               	bsf	3977,5,c	;volatile
 13907                           
 13908                           ; BSR set to: 0
 13909                           ;Test.c: 435: }
 13910                           
 13911                           ; BSR set to: 0
 13912                           ;Test.c: 434: break;
 13913                           
 13914                           ;Test.c: 433: default:
 13915                           
 13916                           ;Test.c: 432: break;
 13917  004666  D01D               	goto	l1277
 13918  004668                     l8195:
 13919                           
 13920                           ; BSR set to: 0
 13921  004668  C0FA  F080         	movff	_var,??_PortTests
 13922  00466C  C0FB  F081         	movff	_var+1,??_PortTests+1
 13923                           
 13924                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13925                           ; Switch size 1, requested type "space"
 13926                           ; Number of cases is 1, Range of values is 0 to 0
 13927                           ; switch strategies available:
 13928                           ; Name         Instructions Cycles
 13929                           ; simple_byte            4     3 (average)
 13930                           ;	Chosen strategy is simple_byte
 13931  004670  0100               	movlb	0	; () banked
 13932  004672  5181               	movf	(??_PortTests+1)& (0+255),w,b
 13933  004674  0A00               	xorlw	0	; case 0
 13934  004676  A4D8               	btfss	status,2,c
 13935  004678  D014               	goto	l1277
 13936                           
 13937                           ; BSR set to: 0
 13938                           ; Switch size 1, requested type "space"
 13939                           ; Number of cases is 6, Range of values is 0 to 5
 13940                           ; switch strategies available:
 13941                           ; Name         Instructions Cycles
 13942                           ; simple_byte           19    10 (average)
 13943                           ;	Chosen strategy is simple_byte
 13944  00467A  0100               	movlb	0	; () banked
 13945  00467C  5180               	movf	??_PortTests& (0+255),w,b
 13946  00467E  0A00               	xorlw	0	; case 0
 13947  004680  B4D8               	btfsc	status,2,c
 13948  004682  D7E6               	goto	l1269
 13949  004684  0A01               	xorlw	1	; case 1
 13950  004686  B4D8               	btfsc	status,2,c
 13951  004688  D7E5               	goto	l1271
 13952  00468A  0A03               	xorlw	3	; case 2
 13953  00468C  B4D8               	btfsc	status,2,c
 13954  00468E  D7E4               	goto	l1272
 13955  004690  0A01               	xorlw	1	; case 3
 13956  004692  B4D8               	btfsc	status,2,c
 13957  004694  D7E3               	goto	l1273
 13958  004696  0A07               	xorlw	7	; case 4
 13959  004698  B4D8               	btfsc	status,2,c
 13960  00469A  D7E2               	goto	l1274
 13961  00469C  0A01               	xorlw	1	; case 5
 13962  00469E  B4D8               	btfsc	status,2,c
 13963  0046A0  D7E1               	goto	l1275
 13964  0046A2                     l1277:
 13965  0046A2  B281               	btfsc	3969,1,c	;volatile
 13966  0046A4  D7FE               	goto	l1277
 13967                           
 13968                           ;Test.c: 437: __nop();
 13969  0046A6  F000               	nop	
 13970                           
 13971                           ;Test.c: 438: __nop();
 13972  0046A8  F000               	nop	
 13973                           
 13974                           ;Test.c: 439: LATA = 0x00;
 13975  0046AA  0E00               	movlw	0
 13976  0046AC  6E89               	movwf	3977,c	;volatile
 13977                           
 13978                           ;Test.c: 440: LATE = 0x00;
 13979  0046AE  0E00               	movlw	0
 13980  0046B0  6E8D               	movwf	3981,c	;volatile
 13981                           
 13982                           ;Test.c: 441: LATD = 0x00; }
 13983  0046B2  0E00               	movlw	0
 13984  0046B4  6E8C               	movwf	3980,c	;volatile
 13985  0046B6  D7BE               	goto	l1265
 13986  0046B8                     __end_of_PortTests:
 13987                           	opt stack 0
 13988                           tblptru	equ	0xFF8
 13989                           tblptrh	equ	0xFF7
 13990                           tblptrl	equ	0xFF6
 13991                           tablat	equ	0xFF5
 13992                           prodh	equ	0xFF4
 13993                           prodl	equ	0xFF3
 13994                           intcon	equ	0xFF2
 13995                           intcon2	equ	0xFF1
 13996                           intcon3	equ	0xFF0
 13997                           postinc0	equ	0xFEE
 13998                           wreg	equ	0xFE8
 13999                           postdec1	equ	0xFE5
 14000                           fsr1l	equ	0xFE1
 14001                           indf2	equ	0xFDF
 14002                           postinc2	equ	0xFDE
 14003                           postdec2	equ	0xFDD
 14004                           fsr2h	equ	0xFDA
 14005                           fsr2l	equ	0xFD9
 14006                           status	equ	0xFD8
 14007                           
 14008 ;; *************** function _PortTestA5 *****************
 14009 ;; Defined at:
 14010 ;;		line 444 in file "Test.c"
 14011 ;; Parameters:    Size  Location     Type
 14012 ;;		None
 14013 ;; Auto vars:     Size  Location     Type
 14014 ;;		None
 14015 ;; Return value:  Size  Location     Type
 14016 ;;                  1    wreg      void 
 14017 ;; Registers used:
 14018 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14019 ;; Tracked objects:
 14020 ;;		On entry : 0/0
 14021 ;;		On exit  : 0/0
 14022 ;;		Unchanged: 0/0
 14023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14024 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14025 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14026 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14027 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14028 ;;Total ram usage:        1 bytes
 14029 ;; Hardware stack levels used:    1
 14030 ;; Hardware stack levels required when called:   10
 14031 ;; This function calls:
 14032 ;;		_lcdInst
 14033 ;;		_printf
 14034 ;; This function is called by:
 14035 ;;		_Test
 14036 ;; This function uses a non-reentrant model
 14037 ;;
 14038                           
 14039                           	psect	text45
 14040  004A0A                     __ptext45:
 14041                           	opt stack 0
 14042  004A0A                     _PortTestA5:
 14043                           	opt stack 19
 14044                           
 14045                           ;Test.c: 445: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14046                           
 14047                           ;incstack = 0
 14048  004A0A  0E01               	movlw	1
 14049  004A0C  EC48  F029         	call	_lcdInst
 14050  004A10  0E68               	movlw	104
 14051  004A12  0100               	movlb	0	; () banked
 14052  004A14  6FAB               	movwf	??_PortTestA5& (0+255),b
 14053  004A16  0EE4               	movlw	228
 14054  004A18                     u9787:
 14055  004A18  2EE8               	decfsz	wreg,f,c
 14056  004A1A  D7FE               	bra	u9787
 14057  004A1C  2FAB               	decfsz	??_PortTestA5& (0+255),f,b
 14058  004A1E  D7FC               	bra	u9787
 14059  004A20  F000               	nop	
 14060  004A22  0E80               	movlw	128
 14061  004A24  EC48  F029         	call	_lcdInst
 14062                           
 14063                           ;Test.c: 446: printf("D WILL RETURN    ");
 14064  004A28  0E37               	movlw	low STR_111
 14065  004A2A  0100               	movlb	0	; () banked
 14066  004A2C  6F8E               	movwf	printf@f& (0+255),b
 14067  004A2E  0EFB               	movlw	high STR_111
 14068  004A30  0100               	movlb	0	; () banked
 14069  004A32  6F8F               	movwf	(printf@f+1)& (0+255),b
 14070  004A34  EC02  F00B         	call	_printf	;wreg free
 14071                           
 14072                           ;Test.c: 447: lcdInst(0b11000000);;
 14073  004A38  0EC0               	movlw	192
 14074  004A3A  EC48  F029         	call	_lcdInst
 14075                           
 14076                           ;Test.c: 448: printf("OTHER SETS RA5   ");
 14077  004A3E  0E49               	movlw	low STR_112
 14078  004A40  0100               	movlb	0	; () banked
 14079  004A42  6F8E               	movwf	printf@f& (0+255),b
 14080  004A44  0EFB               	movlw	high STR_112
 14081  004A46  0100               	movlb	0	; () banked
 14082  004A48  6F8F               	movwf	(printf@f+1)& (0+255),b
 14083  004A4A  EC02  F00B         	call	_printf	;wreg free
 14084  004A4E                     l1286:
 14085  004A4E  A281               	btfss	3969,1,c	;volatile
 14086  004A50  D7FE               	goto	l1286
 14087                           
 14088                           ;Test.c: 453: }
 14089                           ;Test.c: 454: if(PORTB >> 4 == 0b1111){
 14090  004A52  3881               	swapf	3969,w,c	;volatile
 14091  004A54  0B0F               	andlw	15
 14092  004A56  0A0F               	xorlw	15
 14093  004A58  B4D8               	btfsc	status,2,c
 14094  004A5A  0012               	return	
 14095                           
 14096                           ;Test.c: 457: else{
 14097                           ;Test.c: 458: LATBbits.LATB2 = 1;
 14098                           
 14099                           ;Test.c: 456: }
 14100                           
 14101                           ;Test.c: 455: break;
 14102  004A5C  848A               	bsf	3978,2,c	;volatile
 14103  004A5E                     l1292:
 14104  004A5E  B281               	btfsc	3969,1,c	;volatile
 14105  004A60  D7FE               	goto	l1292
 14106                           
 14107                           ;Test.c: 461: }
 14108                           ;Test.c: 462: LATBbits.LATB2 = 0;
 14109  004A62  948A               	bcf	3978,2,c	;volatile
 14110  004A64  D7F4               	goto	l1286
 14111  004A66                     __end_of_PortTestA5:
 14112                           	opt stack 0
 14113                           tblptru	equ	0xFF8
 14114                           tblptrh	equ	0xFF7
 14115                           tblptrl	equ	0xFF6
 14116                           tablat	equ	0xFF5
 14117                           prodh	equ	0xFF4
 14118                           prodl	equ	0xFF3
 14119                           intcon	equ	0xFF2
 14120                           intcon2	equ	0xFF1
 14121                           intcon3	equ	0xFF0
 14122                           postinc0	equ	0xFEE
 14123                           wreg	equ	0xFE8
 14124                           postdec1	equ	0xFE5
 14125                           fsr1l	equ	0xFE1
 14126                           indf2	equ	0xFDF
 14127                           postinc2	equ	0xFDE
 14128                           postdec2	equ	0xFDD
 14129                           fsr2h	equ	0xFDA
 14130                           fsr2l	equ	0xFD9
 14131                           status	equ	0xFD8
 14132                           
 14133 ;; *************** function _EEPROMTest *****************
 14134 ;; Defined at:
 14135 ;;		line 577 in file "Test.c"
 14136 ;; Parameters:    Size  Location     Type
 14137 ;;		None
 14138 ;; Auto vars:     Size  Location     Type
 14139 ;;		None
 14140 ;; Return value:  Size  Location     Type
 14141 ;;                  1    wreg      void 
 14142 ;; Registers used:
 14143 ;;		None
 14144 ;; Tracked objects:
 14145 ;;		On entry : 0/0
 14146 ;;		On exit  : 0/0
 14147 ;;		Unchanged: 0/0
 14148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14149 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14150 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14151 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14152 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14153 ;;Total ram usage:        0 bytes
 14154 ;; Hardware stack levels used:    1
 14155 ;; Hardware stack levels required when called:    7
 14156 ;; This function calls:
 14157 ;;		Nothing
 14158 ;; This function is called by:
 14159 ;;		_Test
 14160 ;; This function uses a non-reentrant model
 14161 ;;
 14162                           
 14163                           	psect	text46
 14164  0052F4                     __ptext46:
 14165                           	opt stack 0
 14166  0052F4                     _EEPROMTest:
 14167                           	opt stack 22
 14168                           
 14169                           ;incstack = 0
 14170  0052F4  0012               	return		;funcret
 14171  0052F6                     __end_of_EEPROMTest:
 14172                           	opt stack 0
 14173                           tblptru	equ	0xFF8
 14174                           tblptrh	equ	0xFF7
 14175                           tblptrl	equ	0xFF6
 14176                           tablat	equ	0xFF5
 14177                           prodh	equ	0xFF4
 14178                           prodl	equ	0xFF3
 14179                           intcon	equ	0xFF2
 14180                           intcon2	equ	0xFF1
 14181                           intcon3	equ	0xFF0
 14182                           postinc0	equ	0xFEE
 14183                           wreg	equ	0xFE8
 14184                           postdec1	equ	0xFE5
 14185                           fsr1l	equ	0xFE1
 14186                           indf2	equ	0xFDF
 14187                           postinc2	equ	0xFDE
 14188                           postdec2	equ	0xFDD
 14189                           fsr2h	equ	0xFDA
 14190                           fsr2l	equ	0xFD9
 14191                           status	equ	0xFD8
 14192                           
 14193 ;; *************** function _BothServos *****************
 14194 ;; Defined at:
 14195 ;;		line 352 in file "Test.c"
 14196 ;; Parameters:    Size  Location     Type
 14197 ;;		None
 14198 ;; Auto vars:     Size  Location     Type
 14199 ;;		None
 14200 ;; Return value:  Size  Location     Type
 14201 ;;                  1    wreg      void 
 14202 ;; Registers used:
 14203 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14204 ;; Tracked objects:
 14205 ;;		On entry : 0/0
 14206 ;;		On exit  : 0/0
 14207 ;;		Unchanged: 0/0
 14208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14209 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14210 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14211 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14212 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14213 ;;Total ram usage:        2 bytes
 14214 ;; Hardware stack levels used:    1
 14215 ;; Hardware stack levels required when called:   10
 14216 ;; This function calls:
 14217 ;;		_initServos
 14218 ;;		_lcdInst
 14219 ;;		_printf
 14220 ;;		_updateServoPosition
 14221 ;; This function is called by:
 14222 ;;		_Test
 14223 ;; This function uses a non-reentrant model
 14224 ;;
 14225                           
 14226                           	psect	text47
 14227  001A3C                     __ptext47:
 14228                           	opt stack 0
 14229  001A3C                     _BothServos:
 14230                           	opt stack 19
 14231                           
 14232                           ;Test.c: 353: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14233                           
 14234                           ;incstack = 0
 14235  001A3C  0E01               	movlw	1
 14236  001A3E  EC48  F029         	call	_lcdInst
 14237  001A42  0E68               	movlw	104
 14238  001A44  0100               	movlb	0	; () banked
 14239  001A46  6FAB               	movwf	??_BothServos& (0+255),b
 14240  001A48  0EE4               	movlw	228
 14241  001A4A                     u9797:
 14242  001A4A  2EE8               	decfsz	wreg,f,c
 14243  001A4C  D7FE               	bra	u9797
 14244  001A4E  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14245  001A50  D7FC               	bra	u9797
 14246  001A52  F000               	nop	
 14247  001A54  0E80               	movlw	128
 14248  001A56  EC48  F029         	call	_lcdInst
 14249                           
 14250                           ;Test.c: 354: printf("TST: BOTH SERVOS");
 14251  001A5A  0EB4               	movlw	low STR_110
 14252  001A5C  0100               	movlb	0	; () banked
 14253  001A5E  6F8E               	movwf	printf@f& (0+255),b
 14254  001A60  0EFC               	movlw	high STR_110
 14255  001A62  0100               	movlb	0	; () banked
 14256  001A64  6F8F               	movwf	(printf@f+1)& (0+255),b
 14257  001A66  EC02  F00B         	call	_printf	;wreg free
 14258                           
 14259                           ;Test.c: 355: TMR1ON = 1;
 14260  001A6A  80CD               	bsf	4045,0,c	;volatile
 14261                           
 14262                           ;Test.c: 356: TMR3ON = 1;
 14263  001A6C  80B1               	bsf	4017,0,c	;volatile
 14264                           
 14265                           ;Test.c: 357: machine_state = Sorting_state;
 14266  001A6E  0E01               	movlw	1
 14267  001A70  0100               	movlb	0	; () banked
 14268  001A72  6FFC               	movwf	_machine_state& (0+255),b
 14269                           
 14270                           ; BSR set to: 0
 14271                           ;Test.c: 358: was_low_1 = 0;
 14272  001A74  0E00               	movlw	0
 14273  001A76  6E7A               	movwf	_was_low_1+1,c	;volatile
 14274  001A78  0E00               	movlw	0
 14275  001A7A  6E79               	movwf	_was_low_1,c	;volatile
 14276                           
 14277                           ; BSR set to: 0
 14278                           ;Test.c: 359: was_low_3 = 0;
 14279  001A7C  0E00               	movlw	0
 14280  001A7E  6E7C               	movwf	_was_low_3+1,c	;volatile
 14281  001A80  0E00               	movlw	0
 14282  001A82  6E7B               	movwf	_was_low_3,c	;volatile
 14283                           
 14284                           ; BSR set to: 0
 14285                           ;Test.c: 365: initServos();
 14286  001A84  EC33  F025         	call	_initServos	;wreg free
 14287                           
 14288                           ;Test.c: 366: _delay((unsigned long)((1500)*(32000000/4000.0)));
 14289  001A88  0E3D               	movlw	61
 14290  001A8A  0100               	movlb	0	; () banked
 14291  001A8C  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14292  001A8E  0EE1               	movlw	225
 14293  001A90  0100               	movlb	0	; () banked
 14294  001A92  6FAB               	movwf	??_BothServos& (0+255),b
 14295  001A94  0E3F               	movlw	63
 14296  001A96                     u9807:
 14297  001A96  2EE8               	decfsz	wreg,f,c
 14298  001A98  D7FE               	bra	u9807
 14299  001A9A  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14300  001A9C  D7FC               	bra	u9807
 14301  001A9E  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14302  001AA0  D7FA               	bra	u9807
 14303  001AA2  D000               	nop2	
 14304                           
 14305                           ;Test.c: 368: updateServoPosition(500, 1);
 14306  001AA4  0E01               	movlw	1
 14307  001AA6  0100               	movlb	0	; () banked
 14308  001AA8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14309  001AAA  0EF4               	movlw	244
 14310  001AAC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14311  001AAE  0E00               	movlw	0
 14312  001AB0  0100               	movlb	0	; () banked
 14313  001AB2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14314  001AB4  0E01               	movlw	1
 14315  001AB6  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14316  001AB8  EC95  F022         	call	_updateServoPosition	;wreg free
 14317                           
 14318                           ;Test.c: 369: updateServoPosition(1050, 3);
 14319  001ABC  0E04               	movlw	4
 14320  001ABE  0100               	movlb	0	; () banked
 14321  001AC0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14322  001AC2  0E1A               	movlw	26
 14323  001AC4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14324  001AC6  0E00               	movlw	0
 14325  001AC8  0100               	movlb	0	; () banked
 14326  001ACA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14327  001ACC  0E03               	movlw	3
 14328  001ACE  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14329  001AD0  EC95  F022         	call	_updateServoPosition	;wreg free
 14330                           
 14331                           ;Test.c: 370: _delay((unsigned long)((750)*(32000000/4000.0)));
 14332  001AD4  0E1F               	movlw	31
 14333  001AD6  0100               	movlb	0	; () banked
 14334  001AD8  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14335  001ADA  0E71               	movlw	113
 14336  001ADC  0100               	movlb	0	; () banked
 14337  001ADE  6FAB               	movwf	??_BothServos& (0+255),b
 14338  001AE0  0E1E               	movlw	30
 14339  001AE2                     u9817:
 14340  001AE2  2EE8               	decfsz	wreg,f,c
 14341  001AE4  D7FE               	bra	u9817
 14342  001AE6  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14343  001AE8  D7FC               	bra	u9817
 14344  001AEA  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14345  001AEC  D7FA               	bra	u9817
 14346  001AEE  F000               	nop	
 14347                           
 14348                           ;Test.c: 371: updateServoPosition(1260, 3);
 14349  001AF0  0E04               	movlw	4
 14350  001AF2  0100               	movlb	0	; () banked
 14351  001AF4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14352  001AF6  0EEC               	movlw	236
 14353  001AF8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14354  001AFA  0E00               	movlw	0
 14355  001AFC  0100               	movlb	0	; () banked
 14356  001AFE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14357  001B00  0E03               	movlw	3
 14358  001B02  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14359  001B04  EC95  F022         	call	_updateServoPosition	;wreg free
 14360                           
 14361                           ;Test.c: 372: _delay((unsigned long)((2500)*(32000000/4000.0)));
 14362  001B08  0E66               	movlw	102
 14363  001B0A  0100               	movlb	0	; () banked
 14364  001B0C  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14365  001B0E  0E76               	movlw	118
 14366  001B10  0100               	movlb	0	; () banked
 14367  001B12  6FAB               	movwf	??_BothServos& (0+255),b
 14368  001B14  0EC1               	movlw	193
 14369  001B16                     u9827:
 14370  001B16  2EE8               	decfsz	wreg,f,c
 14371  001B18  D7FE               	bra	u9827
 14372  001B1A  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14373  001B1C  D7FC               	bra	u9827
 14374  001B1E  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14375  001B20  D7FA               	bra	u9827
 14376                           
 14377                           ;Test.c: 373: updateServoPosition(1050, 3);
 14378  001B22  0E04               	movlw	4
 14379  001B24  0100               	movlb	0	; () banked
 14380  001B26  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14381  001B28  0E1A               	movlw	26
 14382  001B2A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14383  001B2C  0E00               	movlw	0
 14384  001B2E  0100               	movlb	0	; () banked
 14385  001B30  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14386  001B32  0E03               	movlw	3
 14387  001B34  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14388  001B36  EC95  F022         	call	_updateServoPosition	;wreg free
 14389                           
 14390                           ;Test.c: 374: _delay((unsigned long)((750)*(32000000/4000.0)));
 14391  001B3A  0E1F               	movlw	31
 14392  001B3C  0100               	movlb	0	; () banked
 14393  001B3E  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14394  001B40  0E71               	movlw	113
 14395  001B42  0100               	movlb	0	; () banked
 14396  001B44  6FAB               	movwf	??_BothServos& (0+255),b
 14397  001B46  0E1E               	movlw	30
 14398  001B48                     u9837:
 14399  001B48  2EE8               	decfsz	wreg,f,c
 14400  001B4A  D7FE               	bra	u9837
 14401  001B4C  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14402  001B4E  D7FC               	bra	u9837
 14403  001B50  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14404  001B52  D7FA               	bra	u9837
 14405  001B54  F000               	nop	
 14406                           
 14407                           ;Test.c: 376: updateServoPosition(850, 1);
 14408  001B56  0E03               	movlw	3
 14409  001B58  0100               	movlb	0	; () banked
 14410  001B5A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14411  001B5C  0E52               	movlw	82
 14412  001B5E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14413  001B60  0E00               	movlw	0
 14414  001B62  0100               	movlb	0	; () banked
 14415  001B64  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14416  001B66  0E01               	movlw	1
 14417  001B68  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14418  001B6A  EC95  F022         	call	_updateServoPosition	;wreg free
 14419                           
 14420                           ;Test.c: 377: updateServoPosition(1050, 3);
 14421  001B6E  0E04               	movlw	4
 14422  001B70  0100               	movlb	0	; () banked
 14423  001B72  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14424  001B74  0E1A               	movlw	26
 14425  001B76  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14426  001B78  0E00               	movlw	0
 14427  001B7A  0100               	movlb	0	; () banked
 14428  001B7C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14429  001B7E  0E03               	movlw	3
 14430  001B80  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14431  001B82  EC95  F022         	call	_updateServoPosition	;wreg free
 14432                           
 14433                           ;Test.c: 378: _delay((unsigned long)((750)*(32000000/4000.0)));
 14434  001B86  0E1F               	movlw	31
 14435  001B88  0100               	movlb	0	; () banked
 14436  001B8A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14437  001B8C  0E71               	movlw	113
 14438  001B8E  0100               	movlb	0	; () banked
 14439  001B90  6FAB               	movwf	??_BothServos& (0+255),b
 14440  001B92  0E1E               	movlw	30
 14441  001B94                     u9847:
 14442  001B94  2EE8               	decfsz	wreg,f,c
 14443  001B96  D7FE               	bra	u9847
 14444  001B98  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14445  001B9A  D7FC               	bra	u9847
 14446  001B9C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14447  001B9E  D7FA               	bra	u9847
 14448  001BA0  F000               	nop	
 14449                           
 14450                           ;Test.c: 379: updateServoPosition(1260, 3);
 14451  001BA2  0E04               	movlw	4
 14452  001BA4  0100               	movlb	0	; () banked
 14453  001BA6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14454  001BA8  0EEC               	movlw	236
 14455  001BAA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14456  001BAC  0E00               	movlw	0
 14457  001BAE  0100               	movlb	0	; () banked
 14458  001BB0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14459  001BB2  0E03               	movlw	3
 14460  001BB4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14461  001BB6  EC95  F022         	call	_updateServoPosition	;wreg free
 14462                           
 14463                           ;Test.c: 380: _delay((unsigned long)((2500)*(32000000/4000.0)));
 14464  001BBA  0E66               	movlw	102
 14465  001BBC  0100               	movlb	0	; () banked
 14466  001BBE  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14467  001BC0  0E76               	movlw	118
 14468  001BC2  0100               	movlb	0	; () banked
 14469  001BC4  6FAB               	movwf	??_BothServos& (0+255),b
 14470  001BC6  0EC1               	movlw	193
 14471  001BC8                     u9857:
 14472  001BC8  2EE8               	decfsz	wreg,f,c
 14473  001BCA  D7FE               	bra	u9857
 14474  001BCC  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14475  001BCE  D7FC               	bra	u9857
 14476  001BD0  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14477  001BD2  D7FA               	bra	u9857
 14478                           
 14479                           ;Test.c: 381: updateServoPosition(1050, 3);
 14480  001BD4  0E04               	movlw	4
 14481  001BD6  0100               	movlb	0	; () banked
 14482  001BD8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14483  001BDA  0E1A               	movlw	26
 14484  001BDC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14485  001BDE  0E00               	movlw	0
 14486  001BE0  0100               	movlb	0	; () banked
 14487  001BE2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14488  001BE4  0E03               	movlw	3
 14489  001BE6  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14490  001BE8  EC95  F022         	call	_updateServoPosition	;wreg free
 14491                           
 14492                           ;Test.c: 382: _delay((unsigned long)((750)*(32000000/4000.0)));
 14493  001BEC  0E1F               	movlw	31
 14494  001BEE  0100               	movlb	0	; () banked
 14495  001BF0  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14496  001BF2  0E71               	movlw	113
 14497  001BF4  0100               	movlb	0	; () banked
 14498  001BF6  6FAB               	movwf	??_BothServos& (0+255),b
 14499  001BF8  0E1E               	movlw	30
 14500  001BFA                     u9867:
 14501  001BFA  2EE8               	decfsz	wreg,f,c
 14502  001BFC  D7FE               	bra	u9867
 14503  001BFE  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14504  001C00  D7FC               	bra	u9867
 14505  001C02  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14506  001C04  D7FA               	bra	u9867
 14507  001C06  F000               	nop	
 14508                           
 14509                           ;Test.c: 384: updateServoPosition(1200, 1);
 14510  001C08  0E04               	movlw	4
 14511  001C0A  0100               	movlb	0	; () banked
 14512  001C0C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14513  001C0E  0EB0               	movlw	176
 14514  001C10  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14515  001C12  0E00               	movlw	0
 14516  001C14  0100               	movlb	0	; () banked
 14517  001C16  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14518  001C18  0E01               	movlw	1
 14519  001C1A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14520  001C1C  EC95  F022         	call	_updateServoPosition	;wreg free
 14521                           
 14522                           ;Test.c: 385: updateServoPosition(1050, 3);
 14523  001C20  0E04               	movlw	4
 14524  001C22  0100               	movlb	0	; () banked
 14525  001C24  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14526  001C26  0E1A               	movlw	26
 14527  001C28  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14528  001C2A  0E00               	movlw	0
 14529  001C2C  0100               	movlb	0	; () banked
 14530  001C2E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14531  001C30  0E03               	movlw	3
 14532  001C32  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14533  001C34  EC95  F022         	call	_updateServoPosition	;wreg free
 14534                           
 14535                           ;Test.c: 386: _delay((unsigned long)((1500)*(32000000/4000.0)));
 14536  001C38  0E3D               	movlw	61
 14537  001C3A  0100               	movlb	0	; () banked
 14538  001C3C  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14539  001C3E  0EE1               	movlw	225
 14540  001C40  0100               	movlb	0	; () banked
 14541  001C42  6FAB               	movwf	??_BothServos& (0+255),b
 14542  001C44  0E3F               	movlw	63
 14543  001C46                     u9877:
 14544  001C46  2EE8               	decfsz	wreg,f,c
 14545  001C48  D7FE               	bra	u9877
 14546  001C4A  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14547  001C4C  D7FC               	bra	u9877
 14548  001C4E  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14549  001C50  D7FA               	bra	u9877
 14550  001C52  D000               	nop2	
 14551                           
 14552                           ;Test.c: 388: updateServoPosition(1670, 1);
 14553  001C54  0E06               	movlw	6
 14554  001C56  0100               	movlb	0	; () banked
 14555  001C58  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14556  001C5A  0E86               	movlw	134
 14557  001C5C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14558  001C5E  0E00               	movlw	0
 14559  001C60  0100               	movlb	0	; () banked
 14560  001C62  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14561  001C64  0E01               	movlw	1
 14562  001C66  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14563  001C68  EC95  F022         	call	_updateServoPosition	;wreg free
 14564                           
 14565                           ;Test.c: 389: updateServoPosition(1050, 3);
 14566  001C6C  0E04               	movlw	4
 14567  001C6E  0100               	movlb	0	; () banked
 14568  001C70  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14569  001C72  0E1A               	movlw	26
 14570  001C74  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14571  001C76  0E00               	movlw	0
 14572  001C78  0100               	movlb	0	; () banked
 14573  001C7A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14574  001C7C  0E03               	movlw	3
 14575  001C7E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14576  001C80  EC95  F022         	call	_updateServoPosition	;wreg free
 14577                           
 14578                           ;Test.c: 390: _delay((unsigned long)((750)*(32000000/4000.0)));
 14579  001C84  0E1F               	movlw	31
 14580  001C86  0100               	movlb	0	; () banked
 14581  001C88  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14582  001C8A  0E71               	movlw	113
 14583  001C8C  0100               	movlb	0	; () banked
 14584  001C8E  6FAB               	movwf	??_BothServos& (0+255),b
 14585  001C90  0E1E               	movlw	30
 14586  001C92                     u9887:
 14587  001C92  2EE8               	decfsz	wreg,f,c
 14588  001C94  D7FE               	bra	u9887
 14589  001C96  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14590  001C98  D7FC               	bra	u9887
 14591  001C9A  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14592  001C9C  D7FA               	bra	u9887
 14593  001C9E  F000               	nop	
 14594                           
 14595                           ;Test.c: 391: updateServoPosition(1390, 3);
 14596  001CA0  0E05               	movlw	5
 14597  001CA2  0100               	movlb	0	; () banked
 14598  001CA4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14599  001CA6  0E6E               	movlw	110
 14600  001CA8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14601  001CAA  0E00               	movlw	0
 14602  001CAC  0100               	movlb	0	; () banked
 14603  001CAE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14604  001CB0  0E03               	movlw	3
 14605  001CB2  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14606  001CB4  EC95  F022         	call	_updateServoPosition	;wreg free
 14607                           
 14608                           ;Test.c: 392: _delay((unsigned long)((2500)*(32000000/4000.0)));
 14609  001CB8  0E66               	movlw	102
 14610  001CBA  0100               	movlb	0	; () banked
 14611  001CBC  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14612  001CBE  0E76               	movlw	118
 14613  001CC0  0100               	movlb	0	; () banked
 14614  001CC2  6FAB               	movwf	??_BothServos& (0+255),b
 14615  001CC4  0EC1               	movlw	193
 14616  001CC6                     u9897:
 14617  001CC6  2EE8               	decfsz	wreg,f,c
 14618  001CC8  D7FE               	bra	u9897
 14619  001CCA  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14620  001CCC  D7FC               	bra	u9897
 14621  001CCE  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14622  001CD0  D7FA               	bra	u9897
 14623                           
 14624                           ;Test.c: 393: updateServoPosition(1050, 3);
 14625  001CD2  0E04               	movlw	4
 14626  001CD4  0100               	movlb	0	; () banked
 14627  001CD6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14628  001CD8  0E1A               	movlw	26
 14629  001CDA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14630  001CDC  0E00               	movlw	0
 14631  001CDE  0100               	movlb	0	; () banked
 14632  001CE0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14633  001CE2  0E03               	movlw	3
 14634  001CE4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14635  001CE6  EC95  F022         	call	_updateServoPosition	;wreg free
 14636                           
 14637                           ;Test.c: 394: _delay((unsigned long)((750)*(32000000/4000.0)));
 14638  001CEA  0E1F               	movlw	31
 14639  001CEC  0100               	movlb	0	; () banked
 14640  001CEE  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14641  001CF0  0E71               	movlw	113
 14642  001CF2  0100               	movlb	0	; () banked
 14643  001CF4  6FAB               	movwf	??_BothServos& (0+255),b
 14644  001CF6  0E1E               	movlw	30
 14645  001CF8                     u9907:
 14646  001CF8  2EE8               	decfsz	wreg,f,c
 14647  001CFA  D7FE               	bra	u9907
 14648  001CFC  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14649  001CFE  D7FC               	bra	u9907
 14650  001D00  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14651  001D02  D7FA               	bra	u9907
 14652  001D04  F000               	nop	
 14653                           
 14654                           ;Test.c: 396: updateServoPosition(2400, 1);
 14655  001D06  0E09               	movlw	9
 14656  001D08  0100               	movlb	0	; () banked
 14657  001D0A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14658  001D0C  0E60               	movlw	96
 14659  001D0E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14660  001D10  0E00               	movlw	0
 14661  001D12  0100               	movlb	0	; () banked
 14662  001D14  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14663  001D16  0E01               	movlw	1
 14664  001D18  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14665  001D1A  EC95  F022         	call	_updateServoPosition	;wreg free
 14666                           
 14667                           ;Test.c: 397: updateServoPosition(1050, 3);
 14668  001D1E  0E04               	movlw	4
 14669  001D20  0100               	movlb	0	; () banked
 14670  001D22  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14671  001D24  0E1A               	movlw	26
 14672  001D26  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14673  001D28  0E00               	movlw	0
 14674  001D2A  0100               	movlb	0	; () banked
 14675  001D2C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14676  001D2E  0E03               	movlw	3
 14677  001D30  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14678  001D32  EC95  F022         	call	_updateServoPosition	;wreg free
 14679                           
 14680                           ;Test.c: 398: _delay((unsigned long)((750)*(32000000/4000.0)));
 14681  001D36  0E1F               	movlw	31
 14682  001D38  0100               	movlb	0	; () banked
 14683  001D3A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14684  001D3C  0E71               	movlw	113
 14685  001D3E  0100               	movlb	0	; () banked
 14686  001D40  6FAB               	movwf	??_BothServos& (0+255),b
 14687  001D42  0E1E               	movlw	30
 14688  001D44                     u9917:
 14689  001D44  2EE8               	decfsz	wreg,f,c
 14690  001D46  D7FE               	bra	u9917
 14691  001D48  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14692  001D4A  D7FC               	bra	u9917
 14693  001D4C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14694  001D4E  D7FA               	bra	u9917
 14695  001D50  F000               	nop	
 14696                           
 14697                           ;Test.c: 399: updateServoPosition(1390, 3);
 14698  001D52  0E05               	movlw	5
 14699  001D54  0100               	movlb	0	; () banked
 14700  001D56  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14701  001D58  0E6E               	movlw	110
 14702  001D5A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14703  001D5C  0E00               	movlw	0
 14704  001D5E  0100               	movlb	0	; () banked
 14705  001D60  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14706  001D62  0E03               	movlw	3
 14707  001D64  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14708  001D66  EC95  F022         	call	_updateServoPosition	;wreg free
 14709                           
 14710                           ;Test.c: 400: _delay((unsigned long)((2500)*(32000000/4000.0)));
 14711  001D6A  0E66               	movlw	102
 14712  001D6C  0100               	movlb	0	; () banked
 14713  001D6E  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14714  001D70  0E76               	movlw	118
 14715  001D72  0100               	movlb	0	; () banked
 14716  001D74  6FAB               	movwf	??_BothServos& (0+255),b
 14717  001D76  0EC1               	movlw	193
 14718  001D78                     u9927:
 14719  001D78  2EE8               	decfsz	wreg,f,c
 14720  001D7A  D7FE               	bra	u9927
 14721  001D7C  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14722  001D7E  D7FC               	bra	u9927
 14723  001D80  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14724  001D82  D7FA               	bra	u9927
 14725                           
 14726                           ;Test.c: 401: updateServoPosition(1050, 3);
 14727  001D84  0E04               	movlw	4
 14728  001D86  0100               	movlb	0	; () banked
 14729  001D88  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14730  001D8A  0E1A               	movlw	26
 14731  001D8C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14732  001D8E  0E00               	movlw	0
 14733  001D90  0100               	movlb	0	; () banked
 14734  001D92  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14735  001D94  0E03               	movlw	3
 14736  001D96  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14737  001D98  EC95  F022         	call	_updateServoPosition	;wreg free
 14738                           
 14739                           ;Test.c: 402: _delay((unsigned long)((750)*(32000000/4000.0)));
 14740  001D9C  0E1F               	movlw	31
 14741  001D9E  0100               	movlb	0	; () banked
 14742  001DA0  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14743  001DA2  0E71               	movlw	113
 14744  001DA4  0100               	movlb	0	; () banked
 14745  001DA6  6FAB               	movwf	??_BothServos& (0+255),b
 14746  001DA8  0E1E               	movlw	30
 14747  001DAA                     u9937:
 14748  001DAA  2EE8               	decfsz	wreg,f,c
 14749  001DAC  D7FE               	bra	u9937
 14750  001DAE  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14751  001DB0  D7FC               	bra	u9937
 14752  001DB2  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14753  001DB4  D7FA               	bra	u9937
 14754  001DB6  F000               	nop	
 14755                           
 14756                           ;Test.c: 404: TMR1ON = 0;
 14757  001DB8  90CD               	bcf	4045,0,c	;volatile
 14758                           
 14759                           ;Test.c: 405: TMR3ON = 0;
 14760  001DBA  90B1               	bcf	4017,0,c	;volatile
 14761                           
 14762                           ;Test.c: 406: (INTCONbits.GIE = 0);
 14763  001DBC  9EF2               	bcf	intcon,7,c	;volatile
 14764  001DBE  0012               	return		;funcret
 14765  001DC0                     __end_of_BothServos:
 14766                           	opt stack 0
 14767                           tblptru	equ	0xFF8
 14768                           tblptrh	equ	0xFF7
 14769                           tblptrl	equ	0xFF6
 14770                           tablat	equ	0xFF5
 14771                           prodh	equ	0xFF4
 14772                           prodl	equ	0xFF3
 14773                           intcon	equ	0xFF2
 14774                           intcon2	equ	0xFF1
 14775                           intcon3	equ	0xFF0
 14776                           postinc0	equ	0xFEE
 14777                           wreg	equ	0xFE8
 14778                           postdec1	equ	0xFE5
 14779                           fsr1l	equ	0xFE1
 14780                           indf2	equ	0xFDF
 14781                           postinc2	equ	0xFDE
 14782                           postdec2	equ	0xFDD
 14783                           fsr2h	equ	0xFDA
 14784                           fsr2l	equ	0xFD9
 14785                           status	equ	0xFD8
 14786                           
 14787 ;; *************** function _initServos *****************
 14788 ;; Defined at:
 14789 ;;		line 411 in file "sort.c"
 14790 ;; Parameters:    Size  Location     Type
 14791 ;;		None
 14792 ;; Auto vars:     Size  Location     Type
 14793 ;;		None
 14794 ;; Return value:  Size  Location     Type
 14795 ;;                  1    wreg      void 
 14796 ;; Registers used:
 14797 ;;		wreg, status,2, status,0, cstack
 14798 ;; Tracked objects:
 14799 ;;		On entry : 0/0
 14800 ;;		On exit  : 0/0
 14801 ;;		Unchanged: 0/0
 14802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14803 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14804 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14805 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14806 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14807 ;;Total ram usage:        1 bytes
 14808 ;; Hardware stack levels used:    1
 14809 ;; Hardware stack levels required when called:    8
 14810 ;; This function calls:
 14811 ;;		_updateServoPosition
 14812 ;; This function is called by:
 14813 ;;		_Loading
 14814 ;;		_BothServos
 14815 ;; This function uses a non-reentrant model
 14816 ;;
 14817                           
 14818                           	psect	text48
 14819  004A66                     __ptext48:
 14820                           	opt stack 0
 14821  004A66                     _initServos:
 14822                           	opt stack 20
 14823                           
 14824                           ;sort.c: 412: updateServoPosition(1200, 1);
 14825                           
 14826                           ;incstack = 0
 14827  004A66  0E04               	movlw	4
 14828  004A68  0100               	movlb	0	; () banked
 14829  004A6A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14830  004A6C  0EB0               	movlw	176
 14831  004A6E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14832  004A70  0E00               	movlw	0
 14833  004A72  0100               	movlb	0	; () banked
 14834  004A74  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14835  004A76  0E01               	movlw	1
 14836  004A78  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14837  004A7A  EC95  F022         	call	_updateServoPosition	;wreg free
 14838                           
 14839                           ;sort.c: 413: updateServoPosition(1050, 3);
 14840  004A7E  0E04               	movlw	4
 14841  004A80  0100               	movlb	0	; () banked
 14842  004A82  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14843  004A84  0E1A               	movlw	26
 14844  004A86  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14845  004A88  0E00               	movlw	0
 14846  004A8A  0100               	movlb	0	; () banked
 14847  004A8C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14848  004A8E  0E03               	movlw	3
 14849  004A90  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14850  004A92  EC95  F022         	call	_updateServoPosition	;wreg free
 14851                           
 14852                           ;sort.c: 414: TMR1ON = 1;
 14853  004A96  80CD               	bsf	4045,0,c	;volatile
 14854                           
 14855                           ;sort.c: 415: was_low_1 = 0;
 14856  004A98  0E00               	movlw	0
 14857  004A9A  6E7A               	movwf	_was_low_1+1,c	;volatile
 14858  004A9C  0E00               	movlw	0
 14859  004A9E  6E79               	movwf	_was_low_1,c	;volatile
 14860                           
 14861                           ;sort.c: 416: _delay((unsigned long)((5)*(32000000/4000.0)));
 14862  004AA0  0E34               	movlw	52
 14863  004AA2  0100               	movlb	0	; () banked
 14864  004AA4  6F88               	movwf	??_initServos& (0+255),b
 14865  004AA6  0EF1               	movlw	241
 14866  004AA8                     u9947:
 14867  004AA8  2EE8               	decfsz	wreg,f,c
 14868  004AAA  D7FE               	bra	u9947
 14869  004AAC  2F88               	decfsz	??_initServos& (0+255),f,b
 14870  004AAE  D7FC               	bra	u9947
 14871  004AB0  D000               	nop2	
 14872                           
 14873                           ;sort.c: 417: TMR3ON = 1;
 14874  004AB2  80B1               	bsf	4017,0,c	;volatile
 14875                           
 14876                           ;sort.c: 418: was_low_3 = 0;
 14877  004AB4  0E00               	movlw	0
 14878  004AB6  6E7C               	movwf	_was_low_3+1,c	;volatile
 14879  004AB8  0E00               	movlw	0
 14880  004ABA  6E7B               	movwf	_was_low_3,c	;volatile
 14881                           
 14882                           ;sort.c: 420: LATCbits.LATC0 = 1;
 14883  004ABC  808B               	bsf	3979,0,c	;volatile
 14884  004ABE  0012               	return		;funcret
 14885  004AC0                     __end_of_initServos:
 14886                           	opt stack 0
 14887                           tblptru	equ	0xFF8
 14888                           tblptrh	equ	0xFF7
 14889                           tblptrl	equ	0xFF6
 14890                           tablat	equ	0xFF5
 14891                           prodh	equ	0xFF4
 14892                           prodl	equ	0xFF3
 14893                           intcon	equ	0xFF2
 14894                           intcon2	equ	0xFF1
 14895                           intcon3	equ	0xFF0
 14896                           postinc0	equ	0xFEE
 14897                           wreg	equ	0xFE8
 14898                           postdec1	equ	0xFE5
 14899                           fsr1l	equ	0xFE1
 14900                           indf2	equ	0xFDF
 14901                           postinc2	equ	0xFDE
 14902                           postdec2	equ	0xFDD
 14903                           fsr2h	equ	0xFDA
 14904                           fsr2l	equ	0xFD9
 14905                           status	equ	0xFD8
 14906                           
 14907 ;; *************** function _updateServoPosition *****************
 14908 ;; Defined at:
 14909 ;;		line 488 in file "sort.c"
 14910 ;; Parameters:    Size  Location     Type
 14911 ;;  time_us         2    0[BANK0 ] int 
 14912 ;;  timer           2    2[BANK0 ] int 
 14913 ;; Auto vars:     Size  Location     Type
 14914 ;;  my_time         2    6[BANK0 ] unsigned int 
 14915 ;; Return value:  Size  Location     Type
 14916 ;;                  1    wreg      void 
 14917 ;; Registers used:
 14918 ;;		wreg, status,2, status,0
 14919 ;; Tracked objects:
 14920 ;;		On entry : 0/0
 14921 ;;		On exit  : 0/0
 14922 ;;		Unchanged: 0/0
 14923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14924 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14925 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14926 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14927 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14928 ;;Total ram usage:        8 bytes
 14929 ;; Hardware stack levels used:    1
 14930 ;; Hardware stack levels required when called:    7
 14931 ;; This function calls:
 14932 ;;		Nothing
 14933 ;; This function is called by:
 14934 ;;		_Distribution
 14935 ;;		_initServos
 14936 ;;		_actuatorTest
 14937 ;;		_BothServos
 14938 ;; This function uses a non-reentrant model
 14939 ;;
 14940                           
 14941                           	psect	text49
 14942  00452A                     __ptext49:
 14943                           	opt stack 0
 14944  00452A                     _updateServoPosition:
 14945                           	opt stack 20
 14946                           
 14947                           ;sort.c: 489: unsigned int my_time = 65535 - time_us;
 14948                           
 14949                           ;incstack = 0
 14950  00452A  C080  F084         	movff	updateServoPosition@time_us,??_updateServoPosition
 14951  00452E  C081  F085         	movff	updateServoPosition@time_us+1,??_updateServoPosition+1
 14952  004532  0100               	movlb	0	; () banked
 14953  004534  1F84               	comf	??_updateServoPosition& (0+255),f,b
 14954  004536  1F85               	comf	(??_updateServoPosition+1)& (0+255),f,b
 14955  004538  4B84               	infsnz	??_updateServoPosition& (0+255),f,b
 14956  00453A  2B85               	incf	(??_updateServoPosition+1)& (0+255),f,b
 14957  00453C  0EFF               	movlw	255
 14958  00453E  0100               	movlb	0	; () banked
 14959  004540  2584               	addwf	??_updateServoPosition& (0+255),w,b
 14960  004542  0100               	movlb	0	; () banked
 14961  004544  6F86               	movwf	updateServoPosition@my_time& (0+255),b
 14962  004546  0EFF               	movlw	255
 14963  004548  0100               	movlb	0	; () banked
 14964  00454A  2185               	addwfc	(??_updateServoPosition+1)& (0+255),w,b
 14965  00454C  0100               	movlb	0	; () banked
 14966  00454E  6F87               	movwf	(updateServoPosition@my_time+1)& (0+255),b
 14967                           
 14968                           ;sort.c: 490: switch(timer){
 14969  004550  D01D               	goto	l6401
 14970  004552                     l6395:
 14971                           
 14972                           ; BSR set to: 0
 14973                           ;sort.c: 492: servoTimes[0] = my_time >> 8;
 14974  004552  0100               	movlb	0	; () banked
 14975  004554  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 14976  004556  0100               	movlb	0	; () banked
 14977  004558  6FDA               	movwf	_servoTimes& (0+255),b
 14978  00455A  6BDB               	clrf	(_servoTimes+1)& (0+255),b
 14979                           
 14980                           ;sort.c: 493: servoTimes[1] = my_time & 0xFF;
 14981  00455C  0100               	movlb	0	; () banked
 14982  00455E  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 14983  004560  0100               	movlb	0	; () banked
 14984  004562  6FDC               	movwf	(_servoTimes+2)& (0+255),b
 14985  004564  6BDD               	clrf	(_servoTimes+3)& (0+255),b
 14986                           
 14987                           ; BSR set to: 0
 14988                           ;sort.c: 495: pan_servo_state = time_us;
 14989  004566  C080  F06F         	movff	updateServoPosition@time_us,_pan_servo_state	;volatile
 14990  00456A  C081  F070         	movff	updateServoPosition@time_us+1,_pan_servo_state+1	;volatile
 14991  00456E                     l861:
 14992                           
 14993                           ; BSR set to: 0
 14994                           ;sort.c: 497: servoTimes[2] = my_time >> 8;
 14995  00456E  0100               	movlb	0	; () banked
 14996  004570  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 14997  004572  0100               	movlb	0	; () banked
 14998  004574  6FDE               	movwf	(_servoTimes+4)& (0+255),b
 14999  004576  6BDF               	clrf	(_servoTimes+5)& (0+255),b
 15000                           
 15001                           ;sort.c: 498: servoTimes[3] = my_time & 0xFF;
 15002  004578  0100               	movlb	0	; () banked
 15003  00457A  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 15004  00457C  0100               	movlb	0	; () banked
 15005  00457E  6FE0               	movwf	(_servoTimes+6)& (0+255),b
 15006  004580  6BE1               	clrf	(_servoTimes+7)& (0+255),b
 15007                           
 15008                           ; BSR set to: 0
 15009                           ;sort.c: 500: tilt_servo_state = time_us;
 15010  004582  C080  F075         	movff	updateServoPosition@time_us,_tilt_servo_state	;volatile
 15011  004586  C081  F076         	movff	updateServoPosition@time_us+1,_tilt_servo_state+1	;volatile
 15012                           
 15013                           ;sort.c: 501: }
 15014  00458A  0012               	return	
 15015  00458C                     l6401:
 15016                           
 15017                           ; BSR set to: 0
 15018  00458C  C082  F084         	movff	updateServoPosition@timer,??_updateServoPosition
 15019  004590  C083  F085         	movff	updateServoPosition@timer+1,??_updateServoPosition+1
 15020                           
 15021                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 15022                           ; Switch size 1, requested type "space"
 15023                           ; Number of cases is 1, Range of values is 0 to 0
 15024                           ; switch strategies available:
 15025                           ; Name         Instructions Cycles
 15026                           ; simple_byte            4     3 (average)
 15027                           ;	Chosen strategy is simple_byte
 15028  004594  0100               	movlb	0	; () banked
 15029  004596  5185               	movf	(??_updateServoPosition+1)& (0+255),w,b
 15030  004598  0A00               	xorlw	0	; case 0
 15031  00459A  A4D8               	btfss	status,2,c
 15032  00459C  0012               	return	
 15033                           
 15034                           ; BSR set to: 0
 15035                           ; Switch size 1, requested type "space"
 15036                           ; Number of cases is 2, Range of values is 1 to 3
 15037                           ; switch strategies available:
 15038                           ; Name         Instructions Cycles
 15039                           ; simple_byte            7     4 (average)
 15040                           ;	Chosen strategy is simple_byte
 15041  00459E  0100               	movlb	0	; () banked
 15042  0045A0  5184               	movf	??_updateServoPosition& (0+255),w,b
 15043  0045A2  0A01               	xorlw	1	; case 1
 15044  0045A4  B4D8               	btfsc	status,2,c
 15045  0045A6  D7D5               	goto	l6395
 15046  0045A8  0A02               	xorlw	2	; case 3
 15047  0045AA  A4D8               	btfss	status,2,c
 15048  0045AC  0012               	return	
 15049  0045AE  D7DF               	goto	l861
 15050  0045B0                     __end_of_updateServoPosition:
 15051                           	opt stack 0
 15052                           tblptru	equ	0xFF8
 15053                           tblptrh	equ	0xFF7
 15054                           tblptrl	equ	0xFF6
 15055                           tablat	equ	0xFF5
 15056                           prodh	equ	0xFF4
 15057                           prodl	equ	0xFF3
 15058                           intcon	equ	0xFF2
 15059                           intcon2	equ	0xFF1
 15060                           intcon3	equ	0xFF0
 15061                           postinc0	equ	0xFEE
 15062                           wreg	equ	0xFE8
 15063                           postdec1	equ	0xFE5
 15064                           fsr1l	equ	0xFE1
 15065                           indf2	equ	0xFDF
 15066                           postinc2	equ	0xFDE
 15067                           postdec2	equ	0xFDD
 15068                           fsr2h	equ	0xFDA
 15069                           fsr2l	equ	0xFD9
 15070                           status	equ	0xFD8
 15071                           
 15072 ;; *************** function _BlockerTest *****************
 15073 ;; Defined at:
 15074 ;;		line 589 in file "Test.c"
 15075 ;; Parameters:    Size  Location     Type
 15076 ;;		None
 15077 ;; Auto vars:     Size  Location     Type
 15078 ;;  i               2   44[BANK0 ] int 
 15079 ;;  cond_flag       2   48[BANK0 ] int 
 15080 ;;  cam_flag        2   46[BANK0 ] int 
 15081 ;; Return value:  Size  Location     Type
 15082 ;;                  1    wreg      void 
 15083 ;; Registers used:
 15084 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15085 ;; Tracked objects:
 15086 ;;		On entry : 0/0
 15087 ;;		On exit  : 0/0
 15088 ;;		Unchanged: 0/0
 15089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15090 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15091 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15092 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15093 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15094 ;;Total ram usage:        7 bytes
 15095 ;; Hardware stack levels used:    1
 15096 ;; Hardware stack levels required when called:   10
 15097 ;; This function calls:
 15098 ;;		_lcdInst
 15099 ;;		_printf
 15100 ;; This function is called by:
 15101 ;;		_Test
 15102 ;; This function uses a non-reentrant model
 15103 ;;
 15104                           
 15105                           	psect	text50
 15106  003854                     __ptext50:
 15107                           	opt stack 0
 15108  003854                     _BlockerTest:
 15109                           	opt stack 19
 15110                           
 15111                           ;Test.c: 590: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15112                           
 15113                           ; BSR set to: 0
 15114                           ;incstack = 0
 15115  003854  0E01               	movlw	1
 15116  003856  EC48  F029         	call	_lcdInst
 15117  00385A  0E68               	movlw	104
 15118  00385C  0100               	movlb	0	; () banked
 15119  00385E  6FAB               	movwf	??_BlockerTest& (0+255),b
 15120  003860  0EE4               	movlw	228
 15121  003862                     u9957:
 15122  003862  2EE8               	decfsz	wreg,f,c
 15123  003864  D7FE               	bra	u9957
 15124  003866  2FAB               	decfsz	??_BlockerTest& (0+255),f,b
 15125  003868  D7FC               	bra	u9957
 15126  00386A  F000               	nop	
 15127  00386C  0E80               	movlw	128
 15128  00386E  EC48  F029         	call	_lcdInst
 15129                           
 15130                           ;Test.c: 591: printf("D: RET|2: COND %d", PORTAbits.RA2);
 15131  003872  0E7F               	movlw	low STR_122
 15132  003874  0100               	movlb	0	; () banked
 15133  003876  6F8E               	movwf	printf@f& (0+255),b
 15134  003878  0EFB               	movlw	high STR_122
 15135  00387A  0100               	movlb	0	; () banked
 15136  00387C  6F8F               	movwf	(printf@f+1)& (0+255),b
 15137  00387E  A480               	btfss	3968,2,c	;volatile
 15138  003880  D004               	goto	u6910
 15139  003882  0100               	movlb	0	; () banked
 15140  003884  6BAB               	clrf	??_BlockerTest& (0+255),b
 15141  003886  2BAB               	incf	??_BlockerTest& (0+255),f,b
 15142  003888  D002               	goto	u6918
 15143  00388A                     u6910:
 15144  00388A  0100               	movlb	0	; () banked
 15145  00388C  6BAB               	clrf	??_BlockerTest& (0+255),b
 15146  00388E                     u6918:
 15147  00388E  0100               	movlb	0	; () banked
 15148  003890  51AB               	movf	??_BlockerTest& (0+255),w,b
 15149  003892  0100               	movlb	0	; () banked
 15150  003894  6F90               	movwf	(?_printf+2)& (0+255),b
 15151  003896  6B91               	clrf	(?_printf+3)& (0+255),b
 15152  003898  EC02  F00B         	call	_printf	;wreg free
 15153                           
 15154                           ;Test.c: 592: lcdInst(0b11000000);;
 15155  00389C  0EC0               	movlw	192
 15156  00389E  EC48  F029         	call	_lcdInst
 15157                           
 15158                           ;Test.c: 593: printf("OTHER: CAM TOGGLE");
 15159  0038A2  0E6D               	movlw	low STR_123
 15160  0038A4  0100               	movlb	0	; () banked
 15161  0038A6  6F8E               	movwf	printf@f& (0+255),b
 15162  0038A8  0EFB               	movlw	high STR_123
 15163  0038AA  0100               	movlb	0	; () banked
 15164  0038AC  6F8F               	movwf	(printf@f+1)& (0+255),b
 15165  0038AE  EC02  F00B         	call	_printf	;wreg free
 15166                           
 15167                           ;Test.c: 594: int cam_flag = 1;
 15168  0038B2  0E00               	movlw	0
 15169  0038B4  0100               	movlb	0	; () banked
 15170  0038B6  6FAF               	movwf	(BlockerTest@cam_flag+1)& (0+255),b
 15171  0038B8  0E01               	movlw	1
 15172  0038BA  6FAE               	movwf	BlockerTest@cam_flag& (0+255),b
 15173                           
 15174                           ; BSR set to: 0
 15175                           ;Test.c: 595: int cond_flag = 0;
 15176  0038BC  0E00               	movlw	0
 15177  0038BE  0100               	movlb	0	; () banked
 15178  0038C0  6FB1               	movwf	(BlockerTest@cond_flag+1)& (0+255),b
 15179  0038C2  0E00               	movlw	0
 15180  0038C4  6FB0               	movwf	BlockerTest@cond_flag& (0+255),b
 15181                           
 15182                           ; BSR set to: 0
 15183                           ;Test.c: 597: while(PORTBbits.RB1 == 0){
 15184                           
 15185                           ;Test.c: 596: while(1){
 15186  0038C6  D018               	goto	l8315
 15187  0038C8                     l8311:
 15188                           
 15189                           ;Test.c: 598: lcdInst(0b10000000);;
 15190  0038C8  0E80               	movlw	128
 15191  0038CA  EC48  F029         	call	_lcdInst
 15192                           
 15193                           ;Test.c: 599: printf("D: RET|2: COND %d", PORTAbits.RA2);
 15194  0038CE  0E7F               	movlw	low STR_122
 15195  0038D0  0100               	movlb	0	; () banked
 15196  0038D2  6F8E               	movwf	printf@f& (0+255),b
 15197  0038D4  0EFB               	movlw	high STR_122
 15198  0038D6  0100               	movlb	0	; () banked
 15199  0038D8  6F8F               	movwf	(printf@f+1)& (0+255),b
 15200  0038DA  A480               	btfss	3968,2,c	;volatile
 15201  0038DC  D004               	goto	u6920
 15202  0038DE  0100               	movlb	0	; () banked
 15203  0038E0  6BAB               	clrf	??_BlockerTest& (0+255),b
 15204  0038E2  2BAB               	incf	??_BlockerTest& (0+255),f,b
 15205  0038E4  D002               	goto	u6928
 15206  0038E6                     u6920:
 15207  0038E6  0100               	movlb	0	; () banked
 15208  0038E8  6BAB               	clrf	??_BlockerTest& (0+255),b
 15209  0038EA                     u6928:
 15210  0038EA  0100               	movlb	0	; () banked
 15211  0038EC  51AB               	movf	??_BlockerTest& (0+255),w,b
 15212  0038EE  0100               	movlb	0	; () banked
 15213  0038F0  6F90               	movwf	(?_printf+2)& (0+255),b
 15214  0038F2  6B91               	clrf	(?_printf+3)& (0+255),b
 15215  0038F4  EC02  F00B         	call	_printf	;wreg free
 15216  0038F8                     l8315:
 15217  0038F8  A281               	btfss	3969,1,c	;volatile
 15218  0038FA  D7E6               	goto	l8311
 15219                           
 15220                           ;Test.c: 600: }
 15221                           ;Test.c: 601: if(PORTB >> 4 == 0b1111){
 15222  0038FC  3881               	swapf	3969,w,c	;volatile
 15223  0038FE  0B0F               	andlw	15
 15224  003900  0A0F               	xorlw	15
 15225  003902  B4D8               	btfsc	status,2,c
 15226  003904  0012               	return	
 15227                           
 15228                           ;Test.c: 604: else if(PORTB >> 4 == 0b0001){
 15229                           
 15230                           ;Test.c: 603: }
 15231                           
 15232                           ;Test.c: 602: break;
 15233  003906  3881               	swapf	3969,w,c	;volatile
 15234  003908  0B0F               	andlw	15
 15235  00390A  06E8               	decf	wreg,f,c
 15236  00390C  A4D8               	btfss	status,2,c
 15237  00390E  D016               	goto	l8333
 15238                           
 15239                           ;Test.c: 605: if(cond_flag){
 15240  003910  0100               	movlb	0	; () banked
 15241  003912  51B0               	movf	BlockerTest@cond_flag& (0+255),w,b
 15242  003914  0100               	movlb	0	; () banked
 15243  003916  11B1               	iorwf	(BlockerTest@cond_flag+1)& (0+255),w,b
 15244  003918  B4D8               	btfsc	status,2,c
 15245  00391A  D007               	goto	l1362
 15246                           
 15247                           ; BSR set to: 0
 15248                           ;Test.c: 606: LATAbits.LATA3 = 1;
 15249  00391C  8689               	bsf	3977,3,c	;volatile
 15250  00391E  D006               	goto	l8331
 15251  003920                     u6971:
 15252  003920  0E01               	movlw	1
 15253  003922                     u6980:
 15254  003922  0100               	movlb	0	; () banked
 15255  003924  6FB0               	movwf	BlockerTest@cond_flag& (0+255),b
 15256  003926  6BB1               	clrf	(BlockerTest@cond_flag+1)& (0+255),b
 15257                           
 15258                           ;Test.c: 608: }
 15259  003928  D054               	goto	l8357
 15260  00392A                     l1362:
 15261                           
 15262                           ; BSR set to: 0
 15263                           ;Test.c: 609: else{
 15264                           ;Test.c: 610: LATAbits.LATA3 = 0;
 15265  00392A  9689               	bcf	3977,3,c	;volatile
 15266  00392C                     l8331:
 15267                           
 15268                           ; BSR set to: 0
 15269                           ;Test.c: 611: cond_flag = !cond_flag;
 15270  00392C  0100               	movlb	0	; () banked
 15271  00392E  51B0               	movf	BlockerTest@cond_flag& (0+255),w,b
 15272  003930  0100               	movlb	0	; () banked
 15273  003932  11B1               	iorwf	(BlockerTest@cond_flag+1)& (0+255),w,b
 15274  003934  B4D8               	btfsc	status,2,c
 15275  003936  D7F4               	goto	u6971
 15276  003938  0E00               	movlw	0
 15277  00393A  D7F3               	goto	u6980
 15278  00393C                     l8333:
 15279                           
 15280                           ;Test.c: 614: else{
 15281                           ;Test.c: 615: if(cam_flag){
 15282  00393C  0100               	movlb	0	; () banked
 15283  00393E  51AE               	movf	BlockerTest@cam_flag& (0+255),w,b
 15284  003940  0100               	movlb	0	; () banked
 15285  003942  11AF               	iorwf	(BlockerTest@cam_flag+1)& (0+255),w,b
 15286  003944  B4D8               	btfsc	status,2,c
 15287  003946  D007               	goto	l8339
 15288                           
 15289                           ; BSR set to: 0
 15290                           ;Test.c: 616: LATCbits.LATC0 = 1;
 15291  003948  808B               	bsf	3979,0,c	;volatile
 15292  00394A  D023               	goto	l8351
 15293  00394C                     u7021:
 15294  00394C  0E01               	movlw	1
 15295  00394E                     u7030:
 15296  00394E  0100               	movlb	0	; () banked
 15297  003950  6FAE               	movwf	BlockerTest@cam_flag& (0+255),b
 15298  003952  6BAF               	clrf	(BlockerTest@cam_flag+1)& (0+255),b
 15299                           
 15300                           ;Test.c: 618: }
 15301  003954  D03E               	goto	l8357
 15302  003956                     l8339:
 15303                           
 15304                           ; BSR set to: 0
 15305                           ;Test.c: 619: else{
 15306                           ;Test.c: 620: for(int i=0;i<5000;i++)
 15307  003956  0E00               	movlw	0
 15308  003958  0100               	movlb	0	; () banked
 15309  00395A  6FAD               	movwf	(BlockerTest@i+1)& (0+255),b
 15310  00395C  0E00               	movlw	0
 15311  00395E  6FAC               	movwf	BlockerTest@i& (0+255),b
 15312  003960                     l8341:
 15313                           
 15314                           ; BSR set to: 0
 15315  003960  0100               	movlb	0	; () banked
 15316  003962  BFAD               	btfsc	(BlockerTest@i+1)& (0+255),7,b
 15317  003964  D008               	goto	l1367
 15318  003966  0E88               	movlw	136
 15319  003968  0100               	movlb	0	; () banked
 15320  00396A  5DAC               	subwf	BlockerTest@i& (0+255),w,b
 15321  00396C  0E13               	movlw	19
 15322  00396E  0100               	movlb	0	; () banked
 15323  003970  59AD               	subwfb	(BlockerTest@i+1)& (0+255),w,b
 15324  003972  B0D8               	btfsc	status,0,c
 15325  003974  D00D               	goto	l1368
 15326  003976                     l1367:
 15327                           
 15328                           ; BSR set to: 0
 15329                           ;Test.c: 621: {
 15330                           ;Test.c: 622: LATCbits.LATC0 = 1;
 15331  003976  808B               	bsf	3979,0,c	;volatile
 15332                           
 15333                           ; BSR set to: 0
 15334                           ;Test.c: 623: _delay((unsigned long)((10)*(32000000/4000000.0)));
 15335  003978  0E1A               	movlw	26
 15336  00397A                     u9967:
 15337  00397A  2EE8               	decfsz	wreg,f,c
 15338  00397C  D7FE               	bra	u9967
 15339  00397E  D000               	nop2	
 15340                           
 15341                           ;Test.c: 624: LATCbits.LATC0 = 0;
 15342  003980  908B               	bcf	3979,0,c	;volatile
 15343                           
 15344                           ;Test.c: 625: _delay((unsigned long)((90)*(32000000/4000000.0)));
 15345  003982  0EF0               	movlw	240
 15346  003984                     u9977:
 15347  003984  2EE8               	decfsz	wreg,f,c
 15348  003986  D7FE               	bra	u9977
 15349  003988  0100               	movlb	0	; () banked
 15350  00398A  4BAC               	infsnz	BlockerTest@i& (0+255),f,b
 15351  00398C  2BAD               	incf	(BlockerTest@i+1)& (0+255),f,b
 15352  00398E  D7E8               	goto	l8341
 15353  003990                     l1368:
 15354                           
 15355                           ; BSR set to: 0
 15356                           ;Test.c: 626: }
 15357                           ;Test.c: 627: LATCbits.LATC0 = 0;
 15358  003990  908B               	bcf	3979,0,c	;volatile
 15359  003992                     l8351:
 15360                           
 15361                           ; BSR set to: 0
 15362                           ;Test.c: 628: cam_flag = !cam_flag;
 15363  003992  0100               	movlb	0	; () banked
 15364  003994  51AE               	movf	BlockerTest@cam_flag& (0+255),w,b
 15365  003996  0100               	movlb	0	; () banked
 15366  003998  11AF               	iorwf	(BlockerTest@cam_flag+1)& (0+255),w,b
 15367  00399A  B4D8               	btfsc	status,2,c
 15368  00399C  D7D7               	goto	u7021
 15369  00399E  0E00               	movlw	0
 15370  0039A0  D7D6               	goto	u7030
 15371  0039A2                     l8353:
 15372                           
 15373                           ;Test.c: 633: lcdInst(0b10000000);;
 15374  0039A2  0E80               	movlw	128
 15375  0039A4  EC48  F029         	call	_lcdInst
 15376                           
 15377                           ;Test.c: 634: printf("D: RET|2: COND %d", PORTAbits.RA2);
 15378  0039A8  0E7F               	movlw	low STR_122
 15379  0039AA  0100               	movlb	0	; () banked
 15380  0039AC  6F8E               	movwf	printf@f& (0+255),b
 15381  0039AE  0EFB               	movlw	high STR_122
 15382  0039B0  0100               	movlb	0	; () banked
 15383  0039B2  6F8F               	movwf	(printf@f+1)& (0+255),b
 15384  0039B4  A480               	btfss	3968,2,c	;volatile
 15385  0039B6  D004               	goto	u7080
 15386  0039B8  0100               	movlb	0	; () banked
 15387  0039BA  6BAB               	clrf	??_BlockerTest& (0+255),b
 15388  0039BC  2BAB               	incf	??_BlockerTest& (0+255),f,b
 15389  0039BE  D002               	goto	u7088
 15390  0039C0                     u7080:
 15391  0039C0  0100               	movlb	0	; () banked
 15392  0039C2  6BAB               	clrf	??_BlockerTest& (0+255),b
 15393  0039C4                     u7088:
 15394  0039C4  0100               	movlb	0	; () banked
 15395  0039C6  51AB               	movf	??_BlockerTest& (0+255),w,b
 15396  0039C8  0100               	movlb	0	; () banked
 15397  0039CA  6F90               	movwf	(?_printf+2)& (0+255),b
 15398  0039CC  6B91               	clrf	(?_printf+3)& (0+255),b
 15399  0039CE  EC02  F00B         	call	_printf	;wreg free
 15400  0039D2                     l8357:
 15401  0039D2  A281               	btfss	3969,1,c	;volatile
 15402  0039D4  D791               	goto	l8315
 15403  0039D6  D7E5               	goto	l8353
 15404  0039D8                     __end_of_BlockerTest:
 15405                           	opt stack 0
 15406                           tblptru	equ	0xFF8
 15407                           tblptrh	equ	0xFF7
 15408                           tblptrl	equ	0xFF6
 15409                           tablat	equ	0xFF5
 15410                           prodh	equ	0xFF4
 15411                           prodl	equ	0xFF3
 15412                           intcon	equ	0xFF2
 15413                           intcon2	equ	0xFF1
 15414                           intcon3	equ	0xFF0
 15415                           postinc0	equ	0xFEE
 15416                           wreg	equ	0xFE8
 15417                           postdec1	equ	0xFE5
 15418                           fsr1l	equ	0xFE1
 15419                           indf2	equ	0xFDF
 15420                           postinc2	equ	0xFDE
 15421                           postdec2	equ	0xFDD
 15422                           fsr2h	equ	0xFDA
 15423                           fsr2l	equ	0xFD9
 15424                           status	equ	0xFD8
 15425                           
 15426 ;; *************** function _printf *****************
 15427 ;; Defined at:
 15428 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 15429 ;; Parameters:    Size  Location     Type
 15430 ;;  f               2   14[BANK0 ] PTR const unsigned char 
 15431 ;;		 -> STR_125(18), STR_124(18), STR_123(18), STR_122(18), 
 15432 ;;		 -> STR_121(18), STR_120(18), STR_119(17), STR_118(17), 
 15433 ;;		 -> STR_117(3), STR_116(15), STR_115(3), STR_114(15), 
 15434 ;;		 -> STR_113(11), STR_112(18), STR_111(18), STR_110(17), 
 15435 ;;		 -> STR_109(15), STR_108(15), STR_107(15), STR_106(17), 
 15436 ;;		 -> STR_105(17), STR_104(17), STR_103(16), STR_102(17), 
 15437 ;;		 -> STR_101(17), STR_100(17), STR_99(17), STR_98(17), 
 15438 ;;		 -> STR_97(17), STR_96(15), STR_95(11), STR_94(17), 
 15439 ;;		 -> STR_93(11), STR_92(17), STR_91(14), STR_90(15), 
 15440 ;;		 -> STR_89(14), STR_88(10), STR_87(9), STR_86(9), 
 15441 ;;		 -> STR_85(10), STR_84(10), STR_83(16), STR_82(15), 
 15442 ;;		 -> STR_81(3), STR_80(15), STR_79(13), STR_78(14), 
 15443 ;;		 -> STR_77(8), STR_76(14), STR_75(15), STR_74(12), 
 15444 ;;		 -> STR_73(14), STR_72(17), STR_71(14), STR_70(15), 
 15445 ;;		 -> STR_69(17), STR_68(17), STR_67(7), STR_66(21), 
 15446 ;;		 -> STR_65(13), STR_64(11), STR_63(24), STR_50(17), 
 15447 ;;		 -> STR_49(17), STR_48(17), STR_47(17), STR_46(17), 
 15448 ;;		 -> STR_45(17), STR_44(17), STR_43(17), STR_42(17), 
 15449 ;;		 -> STR_41(17), STR_40(17), STR_39(17), STR_38(17), 
 15450 ;;		 -> STR_37(17), STR_36(17), STR_35(17), STR_34(17), 
 15451 ;;		 -> STR_33(17), STR_32(17), STR_31(17), STR_30(17), 
 15452 ;;		 -> STR_29(3), STR_28(17), STR_27(17), STR_26(17), 
 15453 ;;		 -> STR_25(17), STR_24(17), STR_23(14), STR_22(10), 
 15454 ;;		 -> STR_21(24), STR_7(7), STR_6(17), STR_5(18), 
 15455 ;;		 -> STR_4(16), STR_3(18), STR_2(14), STR_1(18), 
 15456 ;; Auto vars:     Size  Location     Type
 15457 ;;  tmpval          4    0        struct .
 15458 ;;  width           2   41[BANK0 ] int 
 15459 ;;  val             2   37[BANK0 ] unsigned int 
 15460 ;;  len             2   35[BANK0 ] unsigned int 
 15461 ;;  ap              2   33[BANK0 ] PTR void [1]
 15462 ;;		 -> ?i2_printf(2), ?_printf(2), 
 15463 ;;  cp              2   31[BANK0 ] PTR const unsigned char 
 15464 ;;		 -> STR_126(7), count_total(2), printRTC@month(4), UI@month(4), 
 15465 ;;  c               1   40[BANK0 ] char 
 15466 ;;  flag            1   39[BANK0 ] unsigned char 
 15467 ;;  prec            1   30[BANK0 ] char 
 15468 ;; Return value:  Size  Location     Type
 15469 ;;                  2   14[BANK0 ] int 
 15470 ;; Registers used:
 15471 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15472 ;; Tracked objects:
 15473 ;;		On entry : 0/0
 15474 ;;		On exit  : 0/0
 15475 ;;		Unchanged: 0/0
 15476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15477 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15478 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15479 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15480 ;;      Totals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15481 ;;Total ram usage:       29 bytes
 15482 ;; Hardware stack levels used:    1
 15483 ;; Hardware stack levels required when called:    9
 15484 ;; This function calls:
 15485 ;;		___lwdiv
 15486 ;;		___lwmod
 15487 ;;		___wmul
 15488 ;;		_isdigit
 15489 ;;		_putch
 15490 ;; This function is called by:
 15491 ;;		_UI
 15492 ;;		_change_state_to_menu_start
 15493 ;;		_change_state_to_menu_12
 15494 ;;		_change_state_to_menu_22
 15495 ;;		_printRTC
 15496 ;;		_EEPROM_write
 15497 ;;		_Test
 15498 ;;		_algorithmTest
 15499 ;;		_sensorTest
 15500 ;;		_actuatorTest
 15501 ;;		_BothServos
 15502 ;;		_PortTestA5
 15503 ;;		_PusherTest
 15504 ;;		_SpeedTest
 15505 ;;		_BlockerTest
 15506 ;;		_ToggleTestA5
 15507 ;; This function uses a non-reentrant model
 15508 ;;
 15509                           
 15510                           	psect	text51
 15511  001604                     __ptext51:
 15512                           	opt stack 0
 15513  001604                     _printf:
 15514                           	opt stack 18
 15515                           
 15516                           ;doprnt.c: 466: va_list ap;
 15517                           ;doprnt.c: 499: signed char c;
 15518                           ;doprnt.c: 501: int width;
 15519                           ;doprnt.c: 506: signed char prec;
 15520                           ;doprnt.c: 508: unsigned char flag;
 15521                           ;doprnt.c: 523: union {
 15522                           ;doprnt.c: 524: unsigned long vd;
 15523                           ;doprnt.c: 525: double integ;
 15524                           ;doprnt.c: 526: } tmpval;
 15525                           ;doprnt.c: 528: unsigned int val;
 15526                           ;doprnt.c: 529: unsigned len;
 15527                           ;doprnt.c: 530: const char * cp;
 15528                           ;doprnt.c: 533: *ap = __va_start();
 15529                           
 15530                           ;incstack = 0
 15531  001604  0E90               	movlw	low (?_printf+2)
 15532  001606  0100               	movlb	0	; () banked
 15533  001608  6FA1               	movwf	printf@ap& (0+255),b
 15534  00160A  0E00               	movlw	high (?_printf+2)
 15535  00160C  0100               	movlb	0	; () banked
 15536  00160E  6FA2               	movwf	(printf@ap+1)& (0+255),b
 15537                           
 15538                           ;doprnt.c: 536: while(c = *f++) {
 15539  001610  D205               	goto	l6355
 15540  001612                     l6225:
 15541                           
 15542                           ; BSR set to: 0
 15543                           ;doprnt.c: 538: if(c != '%')
 15544  001612  0E25               	movlw	37
 15545  001614  0100               	movlb	0	; () banked
 15546  001616  19A8               	xorwf	printf@c& (0+255),w,b
 15547  001618  B4D8               	btfsc	status,2,c
 15548  00161A  D005               	goto	l6229
 15549                           
 15550                           ; BSR set to: 0
 15551                           ;doprnt.c: 540: {
 15552                           ;doprnt.c: 541: (putch(c) );
 15553  00161C  0100               	movlb	0	; () banked
 15554  00161E  51A8               	movf	printf@c& (0+255),w,b
 15555  001620  EC40  F029         	call	_putch
 15556                           
 15557                           ;doprnt.c: 542: continue;
 15558  001624  D1FB               	goto	l6355
 15559  001626                     l6229:
 15560                           
 15561                           ;doprnt.c: 543: }
 15562                           ;doprnt.c: 546: width = 0;
 15563  001626  0E00               	movlw	0
 15564  001628  0100               	movlb	0	; () banked
 15565  00162A  6FAA               	movwf	(printf@width+1)& (0+255),b
 15566  00162C  0E00               	movlw	0
 15567  00162E  6FA9               	movwf	printf@width& (0+255),b
 15568                           
 15569                           ;doprnt.c: 548: flag = 0;
 15570  001630  0E00               	movlw	0
 15571  001632  0100               	movlb	0	; () banked
 15572  001634  6FA7               	movwf	printf@flag& (0+255),b
 15573                           
 15574                           ; BSR set to: 0
 15575                           ;doprnt.c: 551: switch(*f) {
 15576                           
 15577                           ;doprnt.c: 550: for(;;) {
 15578  001636  D005               	goto	l6235
 15579  001638                     l6231:
 15580                           
 15581                           ;doprnt.c: 580: flag |= 0x04;
 15582  001638  0100               	movlb	0	; () banked
 15583  00163A  85A7               	bsf	printf@flag& (0+255),2,b
 15584                           
 15585                           ;doprnt.c: 581: f++;
 15586  00163C  0100               	movlb	0	; () banked
 15587  00163E  4B8E               	infsnz	printf@f& (0+255),f,b
 15588  001640  2B8F               	incf	(printf@f+1)& (0+255),f,b
 15589  001642                     l6235:
 15590  001642  C08E  FFF6         	movff	printf@f,tblptrl
 15591  001646  C08F  FFF7         	movff	printf@f+1,tblptrh
 15592  00164A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15593  00164A  6AF8               	clrf	tblptru,c
 15594  00164C                     	endif
 15595  00164C                     	if	0	;tblptru may be non-zero
 15596  00164C                     	endif
 15597  00164C  0008               	tblrd		*
 15598  00164E  50F5               	movf	tablat,w,c
 15599                           
 15600                           ; Switch size 1, requested type "space"
 15601                           ; Number of cases is 1, Range of values is 48 to 48
 15602                           ; switch strategies available:
 15603                           ; Name         Instructions Cycles
 15604                           ; simple_byte            4     3 (average)
 15605                           ;	Chosen strategy is simple_byte
 15606  001650  0A30               	xorlw	48	; case 48
 15607  001652  B4D8               	btfsc	status,2,c
 15608  001654  D7F1               	goto	l6231
 15609                           
 15610                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 15611                           
 15612                           ;doprnt.c: 586: }
 15613                           
 15614                           ;doprnt.c: 585: break;
 15615  001656  C08E  FFF6         	movff	printf@f,tblptrl
 15616  00165A  C08F  FFF7         	movff	printf@f+1,tblptrh
 15617  00165E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15618  00165E  6AF8               	clrf	tblptru,c
 15619  001660                     	endif
 15620  001660                     	if	0	;tblptru may be non-zero
 15621  001660                     	endif
 15622  001660  0008               	tblrd		*
 15623  001662  50F5               	movf	tablat,w,c
 15624  001664  EC55  F028         	call	_isdigit
 15625  001668  A0D8               	btfss	status,0,c
 15626  00166A  D0D2               	goto	l6283
 15627                           
 15628                           ;doprnt.c: 598: width = 0;
 15629  00166C  0E00               	movlw	0
 15630  00166E  0100               	movlb	0	; () banked
 15631  001670  6FAA               	movwf	(printf@width+1)& (0+255),b
 15632  001672  0E00               	movlw	0
 15633  001674  6FA9               	movwf	printf@width& (0+255),b
 15634  001676                     l6241:
 15635                           
 15636                           ;doprnt.c: 600: width *= 10;
 15637  001676  C0A9  F080         	movff	printf@width,___wmul@multiplier
 15638  00167A  C0AA  F081         	movff	printf@width+1,___wmul@multiplier+1
 15639  00167E  0E00               	movlw	0
 15640  001680  0100               	movlb	0	; () banked
 15641  001682  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
 15642  001684  0E0A               	movlw	10
 15643  001686  6F82               	movwf	___wmul@multiplicand& (0+255),b
 15644  001688  ECBE  F026         	call	___wmul	;wreg free
 15645  00168C  C080  F0A9         	movff	?___wmul,printf@width
 15646  001690  C081  F0AA         	movff	?___wmul+1,printf@width+1
 15647                           
 15648                           ;doprnt.c: 601: width += *f++ - '0';
 15649  001694  0ED0               	movlw	208
 15650  001696  0100               	movlb	0	; () banked
 15651  001698  6F9A               	movwf	??_printf& (0+255),b
 15652  00169A  0EFF               	movlw	255
 15653  00169C  0100               	movlb	0	; () banked
 15654  00169E  6F9B               	movwf	(??_printf+1)& (0+255),b
 15655  0016A0  C08E  FFF6         	movff	printf@f,tblptrl
 15656  0016A4  C08F  FFF7         	movff	printf@f+1,tblptrh
 15657  0016A8                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15658  0016A8  6AF8               	clrf	tblptru,c
 15659  0016AA                     	endif
 15660  0016AA                     	if	0	;tblptru may be non-zero
 15661  0016AA                     	endif
 15662  0016AA  0008               	tblrd		*
 15663  0016AC  50F5               	movf	tablat,w,c
 15664  0016AE  0100               	movlb	0	; () banked
 15665  0016B0  6F9C               	movwf	(??_printf+2)& (0+255),b
 15666  0016B2  6B9D               	clrf	(??_printf+3)& (0+255),b
 15667  0016B4  0100               	movlb	0	; () banked
 15668  0016B6  519A               	movf	??_printf& (0+255),w,b
 15669  0016B8  0100               	movlb	0	; () banked
 15670  0016BA  279C               	addwf	(??_printf+2)& (0+255),f,b
 15671  0016BC  0100               	movlb	0	; () banked
 15672  0016BE  519B               	movf	(??_printf+1)& (0+255),w,b
 15673  0016C0  0100               	movlb	0	; () banked
 15674  0016C2  239D               	addwfc	(??_printf+3)& (0+255),f,b
 15675  0016C4  0100               	movlb	0	; () banked
 15676  0016C6  519C               	movf	(??_printf+2)& (0+255),w,b
 15677  0016C8  0100               	movlb	0	; () banked
 15678  0016CA  27A9               	addwf	printf@width& (0+255),f,b
 15679  0016CC  0100               	movlb	0	; () banked
 15680  0016CE  519D               	movf	(??_printf+3)& (0+255),w,b
 15681  0016D0  0100               	movlb	0	; () banked
 15682  0016D2  23AA               	addwfc	(printf@width+1)& (0+255),f,b
 15683                           
 15684                           ; BSR set to: 0
 15685  0016D4  0100               	movlb	0	; () banked
 15686  0016D6  4B8E               	infsnz	printf@f& (0+255),f,b
 15687  0016D8  2B8F               	incf	(printf@f+1)& (0+255),f,b
 15688                           
 15689                           ; BSR set to: 0
 15690                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 15691  0016DA  C08E  FFF6         	movff	printf@f,tblptrl
 15692  0016DE  C08F  FFF7         	movff	printf@f+1,tblptrh
 15693  0016E2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15694  0016E2  6AF8               	clrf	tblptru,c
 15695  0016E4                     	endif
 15696  0016E4                     	if	0	;tblptru may be non-zero
 15697  0016E4                     	endif
 15698  0016E4  0008               	tblrd		*
 15699  0016E6  50F5               	movf	tablat,w,c
 15700  0016E8  EC55  F028         	call	_isdigit
 15701  0016EC  A0D8               	btfss	status,0,c
 15702  0016EE  D090               	goto	l6283
 15703  0016F0  D7C2               	goto	l6241
 15704  0016F2                     l6249:
 15705                           
 15706                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 15707  0016F2  C0A1  FFD9         	movff	printf@ap,fsr2l
 15708  0016F6  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 15709  0016FA  CFDE F09F          	movff	postinc2,printf@cp
 15710  0016FE  CFDD F0A0          	movff	postdec2,printf@cp+1
 15711  001702  0E02               	movlw	2
 15712  001704  0100               	movlb	0	; () banked
 15713  001706  27A1               	addwf	printf@ap& (0+255),f,b
 15714  001708  0E00               	movlw	0
 15715  00170A  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 15716                           
 15717                           ; BSR set to: 0
 15718                           ;doprnt.c: 740: if(!cp)
 15719  00170C  0100               	movlb	0	; () banked
 15720  00170E  519F               	movf	printf@cp& (0+255),w,b
 15721  001710  0100               	movlb	0	; () banked
 15722  001712  11A0               	iorwf	(printf@cp+1)& (0+255),w,b
 15723  001714  A4D8               	btfss	status,2,c
 15724  001716  D006               	goto	l6257
 15725                           
 15726                           ; BSR set to: 0
 15727                           ;doprnt.c: 741: cp = "(null)";
 15728  001718  0EB6               	movlw	low STR_126
 15729  00171A  0100               	movlb	0	; () banked
 15730  00171C  6F9F               	movwf	printf@cp& (0+255),b
 15731  00171E  0EFF               	movlw	high STR_126
 15732  001720  0100               	movlb	0	; () banked
 15733  001722  6FA0               	movwf	(printf@cp+1)& (0+255),b
 15734  001724                     l6257:
 15735                           
 15736                           ; BSR set to: 0
 15737                           ;doprnt.c: 745: len = 0;
 15738  001724  0E00               	movlw	0
 15739  001726  0100               	movlb	0	; () banked
 15740  001728  6FA4               	movwf	(printf@len+1)& (0+255),b
 15741  00172A  0E00               	movlw	0
 15742  00172C  6FA3               	movwf	printf@len& (0+255),b
 15743                           
 15744                           ;doprnt.c: 746: while(cp[len])
 15745  00172E  D003               	goto	l6261
 15746  001730                     l6259:
 15747                           
 15748                           ;doprnt.c: 747: len++;
 15749  001730  0100               	movlb	0	; () banked
 15750  001732  4BA3               	infsnz	printf@len& (0+255),f,b
 15751  001734  2BA4               	incf	(printf@len+1)& (0+255),f,b
 15752  001736                     l6261:
 15753                           
 15754                           ; BSR set to: 0
 15755  001736  0100               	movlb	0	; () banked
 15756  001738  51A3               	movf	printf@len& (0+255),w,b
 15757  00173A  0100               	movlb	0	; () banked
 15758  00173C  259F               	addwf	printf@cp& (0+255),w,b
 15759  00173E  0100               	movlb	0	; () banked
 15760  001740  6F9A               	movwf	??_printf& (0+255),b
 15761  001742  0100               	movlb	0	; () banked
 15762  001744  51A4               	movf	(printf@len+1)& (0+255),w,b
 15763  001746  0100               	movlb	0	; () banked
 15764  001748  21A0               	addwfc	(printf@cp+1)& (0+255),w,b
 15765  00174A  0100               	movlb	0	; () banked
 15766  00174C  6F9B               	movwf	(??_printf+1)& (0+255),b
 15767  00174E  C09A  FFF6         	movff	??_printf,tblptrl
 15768  001752  C09B  FFF7         	movff	??_printf+1,tblptrh
 15769  001756  0E00               	movlw	low (__mediumconst shr (0+16))
 15770  001758  6EF8               	movwf	tblptru,c
 15771  00175A  0E0F               	movlw	(high __ramtop+-1)
 15772  00175C  64F7               	cpfsgt	tblptrh,c
 15773  00175E  D003               	bra	u4577
 15774  001760  0008               	tblrd		*
 15775  001762  50F5               	movf	tablat,w,c
 15776  001764  D005               	bra	u4570
 15777  001766                     u4577:
 15778  001766  CFF6 FFE9          	movff	tblptrl,fsr0l
 15779  00176A  CFF7 FFEA          	movff	tblptrh,fsr0h
 15780  00176E  50EF               	movf	indf0,w,c
 15781  001770                     u4570:
 15782  001770  0900               	iorlw	0
 15783  001772  A4D8               	btfss	status,2,c
 15784  001774  D7DD               	goto	l6259
 15785                           
 15786                           ;doprnt.c: 757: if(width > len)
 15787  001776  0100               	movlb	0	; () banked
 15788  001778  51A9               	movf	printf@width& (0+255),w,b
 15789  00177A  0100               	movlb	0	; () banked
 15790  00177C  5DA3               	subwf	printf@len& (0+255),w,b
 15791  00177E  0100               	movlb	0	; () banked
 15792  001780  51AA               	movf	(printf@width+1)& (0+255),w,b
 15793  001782  0100               	movlb	0	; () banked
 15794  001784  59A4               	subwfb	(printf@len+1)& (0+255),w,b
 15795  001786  B0D8               	btfsc	status,0,c
 15796  001788  D009               	goto	l6267
 15797                           
 15798                           ; BSR set to: 0
 15799                           ;doprnt.c: 758: width -= len;
 15800  00178A  0100               	movlb	0	; () banked
 15801  00178C  51A3               	movf	printf@len& (0+255),w,b
 15802  00178E  0100               	movlb	0	; () banked
 15803  001790  5FA9               	subwf	printf@width& (0+255),f,b
 15804  001792  0100               	movlb	0	; () banked
 15805  001794  51A4               	movf	(printf@len+1)& (0+255),w,b
 15806  001796  0100               	movlb	0	; () banked
 15807  001798  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 15808  00179A  D009               	goto	l6271
 15809  00179C                     l6267:
 15810                           
 15811                           ; BSR set to: 0
 15812                           ;doprnt.c: 759: else
 15813                           ;doprnt.c: 760: width = 0;
 15814  00179C  0E00               	movlw	0
 15815  00179E  0100               	movlb	0	; () banked
 15816  0017A0  6FAA               	movwf	(printf@width+1)& (0+255),b
 15817  0017A2  0E00               	movlw	0
 15818  0017A4  6FA9               	movwf	printf@width& (0+255),b
 15819                           
 15820                           ; BSR set to: 0
 15821                           ;doprnt.c: 764: while(width--)
 15822  0017A6  D003               	goto	l6271
 15823  0017A8                     l6269:
 15824                           
 15825                           ; BSR set to: 0
 15826                           ;doprnt.c: 765: (putch(' ') );
 15827  0017A8  0E20               	movlw	32
 15828  0017AA  EC40  F029         	call	_putch
 15829  0017AE                     l6271:
 15830  0017AE  0100               	movlb	0	; () banked
 15831  0017B0  07A9               	decf	printf@width& (0+255),f,b
 15832  0017B2  A0D8               	btfss	status,0,c
 15833  0017B4  07AA               	decf	(printf@width+1)& (0+255),f,b
 15834  0017B6  0100               	movlb	0	; () banked
 15835  0017B8  29A9               	incf	printf@width& (0+255),w,b
 15836  0017BA  E1F6               	bnz	l6269
 15837  0017BC  0100               	movlb	0	; () banked
 15838  0017BE  29AA               	incf	(printf@width+1)& (0+255),w,b
 15839  0017C0  B4D8               	btfsc	status,2,c
 15840  0017C2  D017               	goto	l6277
 15841  0017C4  D7F1               	goto	l6269
 15842  0017C6                     l6273:
 15843                           
 15844                           ; BSR set to: 0
 15845                           ;doprnt.c: 768: (putch(*cp++) );
 15846  0017C6  C09F  FFF6         	movff	printf@cp,tblptrl
 15847  0017CA  C0A0  FFF7         	movff	printf@cp+1,tblptrh
 15848  0017CE  0E00               	movlw	low (__mediumconst shr (0+16))
 15849  0017D0  6EF8               	movwf	tblptru,c
 15850  0017D2  0E0F               	movlw	(high __ramtop+-1)
 15851  0017D4  64F7               	cpfsgt	tblptrh,c
 15852  0017D6  D003               	bra	u4617
 15853  0017D8  0008               	tblrd		*
 15854  0017DA  50F5               	movf	tablat,w,c
 15855  0017DC  D005               	bra	u4610
 15856  0017DE                     u4617:
 15857  0017DE  CFF6 FFE9          	movff	tblptrl,fsr0l
 15858  0017E2  CFF7 FFEA          	movff	tblptrh,fsr0h
 15859  0017E6  50EF               	movf	indf0,w,c
 15860  0017E8                     u4610:
 15861  0017E8  EC40  F029         	call	_putch
 15862  0017EC  0100               	movlb	0	; () banked
 15863  0017EE  4B9F               	infsnz	printf@cp& (0+255),f,b
 15864  0017F0  2BA0               	incf	(printf@cp+1)& (0+255),f,b
 15865  0017F2                     l6277:
 15866                           
 15867                           ; BSR set to: 0
 15868  0017F2  0100               	movlb	0	; () banked
 15869  0017F4  07A3               	decf	printf@len& (0+255),f,b
 15870  0017F6  A0D8               	btfss	status,0,c
 15871  0017F8  07A4               	decf	(printf@len+1)& (0+255),f,b
 15872  0017FA  0100               	movlb	0	; () banked
 15873  0017FC  29A3               	incf	printf@len& (0+255),w,b
 15874  0017FE  E1E3               	bnz	l6273
 15875  001800  0100               	movlb	0	; () banked
 15876  001802  29A4               	incf	(printf@len+1)& (0+255),w,b
 15877  001804  B4D8               	btfsc	status,2,c
 15878  001806  D10A               	goto	l6355
 15879  001808  D7DE               	goto	l6273
 15880  00180A                     l6279:
 15881                           
 15882                           ; BSR set to: 0
 15883                           ;doprnt.c: 818: flag |= 0x40;
 15884  00180A  0100               	movlb	0	; () banked
 15885  00180C  8DA7               	bsf	printf@flag& (0+255),6,b
 15886                           
 15887                           ; BSR set to: 0
 15888                           ;doprnt.c: 822: }
 15889                           
 15890                           ;doprnt.c: 819: break;
 15891  00180E  D01D               	goto	l1403
 15892  001810                     l6283:
 15893  001810  C08E  FFF6         	movff	printf@f,tblptrl
 15894  001814  C08F  FFF7         	movff	printf@f+1,tblptrh
 15895  001818  0100               	movlb	0	; () banked
 15896  00181A  4B8E               	infsnz	printf@f& (0+255),f,b
 15897  00181C  2B8F               	incf	(printf@f+1)& (0+255),f,b
 15898  00181E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15899  00181E  6AF8               	clrf	tblptru,c
 15900  001820                     	endif
 15901  001820                     	if	0	;tblptru may be non-zero
 15902  001820                     	endif
 15903  001820  0008               	tblrd		*
 15904  001822  CFF5 F0A8          	movff	tablat,printf@c
 15905  001826  0100               	movlb	0	; () banked
 15906  001828  51A8               	movf	printf@c& (0+255),w,b
 15907                           
 15908                           ; Switch size 1, requested type "space"
 15909                           ; Number of cases is 5, Range of values is 0 to 117
 15910                           ; switch strategies available:
 15911                           ; Name         Instructions Cycles
 15912                           ; simple_byte           16     9 (average)
 15913                           ;	Chosen strategy is simple_byte
 15914  00182A  0A00               	xorlw	0	; case 0
 15915  00182C  B4D8               	btfsc	status,2,c
 15916  00182E  0012               	return	
 15917  001830  0A64               	xorlw	100	; case 100
 15918  001832  B4D8               	btfsc	status,2,c
 15919  001834  D00A               	goto	l1403
 15920  001836  0A0D               	xorlw	13	; case 105
 15921  001838  B4D8               	btfsc	status,2,c
 15922  00183A  D007               	goto	l1403
 15923  00183C  0A1A               	xorlw	26	; case 115
 15924  00183E  B4D8               	btfsc	status,2,c
 15925  001840  D758               	goto	l6249
 15926  001842  0A06               	xorlw	6	; case 117
 15927  001844  B4D8               	btfsc	status,2,c
 15928  001846  D7E1               	goto	l6279
 15929  001848  D0E9               	goto	l6355
 15930  00184A                     l1403:
 15931                           
 15932                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 15933  00184A  0100               	movlb	0	; () banked
 15934  00184C  BDA7               	btfsc	printf@flag& (0+255),6,b
 15935  00184E  D019               	goto	l6295
 15936                           
 15937                           ; BSR set to: 0
 15938                           ;doprnt.c: 1253: {
 15939                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 15940  001850  C0A1  FFD9         	movff	printf@ap,fsr2l
 15941  001854  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 15942  001858  CFDE F0A5          	movff	postinc2,printf@val
 15943  00185C  CFDD F0A6          	movff	postdec2,printf@val+1
 15944                           
 15945                           ; BSR set to: 0
 15946  001860  0E02               	movlw	2
 15947  001862  0100               	movlb	0	; () banked
 15948  001864  27A1               	addwf	printf@ap& (0+255),f,b
 15949  001866  0E00               	movlw	0
 15950  001868  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 15951                           
 15952                           ; BSR set to: 0
 15953                           ;doprnt.c: 1261: if((int)val < 0) {
 15954  00186A  0100               	movlb	0	; () banked
 15955  00186C  AFA6               	btfss	(printf@val+1)& (0+255),7,b
 15956  00186E  D016               	goto	l6299
 15957                           
 15958                           ; BSR set to: 0
 15959                           ;doprnt.c: 1262: flag |= 0x03;
 15960  001870  0E03               	movlw	3
 15961  001872  0100               	movlb	0	; () banked
 15962  001874  13A7               	iorwf	printf@flag& (0+255),f,b
 15963                           
 15964                           ; BSR set to: 0
 15965                           ;doprnt.c: 1263: val = -val;
 15966  001876  0100               	movlb	0	; () banked
 15967  001878  6DA5               	negf	printf@val& (0+255),b
 15968  00187A  1FA6               	comf	(printf@val+1)& (0+255),f,b
 15969  00187C  B0D8               	btfsc	status,0,c
 15970  00187E  2BA6               	incf	(printf@val+1)& (0+255),f,b
 15971                           
 15972                           ; BSR set to: 0
 15973                           ;doprnt.c: 1264: }
 15974                           ;doprnt.c: 1266: }
 15975  001880  D00D               	goto	l6299
 15976  001882                     l6295:
 15977                           
 15978                           ; BSR set to: 0
 15979                           ;doprnt.c: 1268: else
 15980                           ;doprnt.c: 1273: {
 15981                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 15982  001882  C0A1  FFD9         	movff	printf@ap,fsr2l
 15983  001886  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 15984  00188A  CFDE F0A5          	movff	postinc2,printf@val
 15985  00188E  CFDD F0A6          	movff	postdec2,printf@val+1
 15986                           
 15987                           ; BSR set to: 0
 15988  001892  0E02               	movlw	2
 15989  001894  0100               	movlb	0	; () banked
 15990  001896  27A1               	addwf	printf@ap& (0+255),f,b
 15991  001898  0E00               	movlw	0
 15992  00189A  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 15993  00189C                     l6299:
 15994                           
 15995                           ; BSR set to: 0
 15996                           ;doprnt.c: 1287: }
 15997                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 15998  00189C  0E01               	movlw	1
 15999  00189E  0100               	movlb	0	; () banked
 16000  0018A0  6FA8               	movwf	printf@c& (0+255),b
 16001  0018A2                     l6301:
 16002                           
 16003                           ; BSR set to: 0
 16004  0018A2  0E05               	movlw	5
 16005  0018A4  0100               	movlb	0	; () banked
 16006  0018A6  19A8               	xorwf	printf@c& (0+255),w,b
 16007  0018A8  B4D8               	btfsc	status,2,c
 16008  0018AA  D019               	goto	l6313
 16009                           
 16010                           ; BSR set to: 0
 16011                           ;doprnt.c: 1306: if(val < dpowers[c])
 16012                           
 16013                           ; BSR set to: 0
 16014                           
 16015                           ; BSR set to: 0
 16016  0018AC  0100               	movlb	0	; () banked
 16017  0018AE  51A8               	movf	printf@c& (0+255),w,b
 16018  0018B0  0D02               	mullw	2
 16019  0018B2  0E00               	movlw	low _dpowers
 16020  0018B4  24F3               	addwf	prodl,w,c
 16021  0018B6  6EF6               	movwf	tblptrl,c
 16022  0018B8  0EFB               	movlw	high _dpowers
 16023  0018BA  20F4               	addwfc	prodh,w,c
 16024  0018BC  6EF7               	movwf	tblptrh,c
 16025  0018BE                     	if	1	;There are 3 active tblptr bytes
 16026  0018BE  6AF8               	clrf	tblptru,c
 16027  0018C0  0E00               	movlw	low (__mediumconst shr (0+16))
 16028  0018C2  22F8               	addwfc	tblptru,f,c
 16029  0018C4                     	endif
 16030  0018C4  0009               	tblrd		*+
 16031  0018C6  50F5               	movf	tablat,w,c
 16032  0018C8  0100               	movlb	0	; () banked
 16033  0018CA  5DA5               	subwf	printf@val& (0+255),w,b
 16034  0018CC  0009               	tblrd		*+
 16035  0018CE  50F5               	movf	tablat,w,c
 16036  0018D0  0100               	movlb	0	; () banked
 16037  0018D2  59A6               	subwfb	(printf@val+1)& (0+255),w,b
 16038  0018D4  A0D8               	btfss	status,0,c
 16039  0018D6  D003               	goto	l6313
 16040                           
 16041                           ; BSR set to: 0
 16042                           
 16043                           ; BSR set to: 0
 16044                           
 16045                           ; BSR set to: 0
 16046                           ;doprnt.c: 1307: break;
 16047  0018D8  0100               	movlb	0	; () banked
 16048  0018DA  2BA8               	incf	printf@c& (0+255),f,b
 16049  0018DC  D7E2               	goto	l6301
 16050  0018DE                     l6313:
 16051                           
 16052                           ; BSR set to: 0
 16053                           ;doprnt.c: 1345: if(width && flag & 0x03)
 16054  0018DE  0100               	movlb	0	; () banked
 16055  0018E0  51A9               	movf	printf@width& (0+255),w,b
 16056  0018E2  0100               	movlb	0	; () banked
 16057  0018E4  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 16058  0018E6  B4D8               	btfsc	status,2,c
 16059  0018E8  D00B               	goto	l6319
 16060                           
 16061                           ; BSR set to: 0
 16062  0018EA  C0A7  F09A         	movff	printf@flag,??_printf
 16063  0018EE  0E03               	movlw	3
 16064  0018F0  0100               	movlb	0	; () banked
 16065  0018F2  179A               	andwf	??_printf& (0+255),f,b
 16066  0018F4  B4D8               	btfsc	status,2,c
 16067  0018F6  D004               	goto	l6319
 16068                           
 16069                           ; BSR set to: 0
 16070                           ;doprnt.c: 1346: width--;
 16071  0018F8  0100               	movlb	0	; () banked
 16072  0018FA  07A9               	decf	printf@width& (0+255),f,b
 16073  0018FC  A0D8               	btfss	status,0,c
 16074  0018FE  07AA               	decf	(printf@width+1)& (0+255),f,b
 16075  001900                     l6319:
 16076                           
 16077                           ; BSR set to: 0
 16078                           ;doprnt.c: 1381: if(width > c)
 16079  001900  0E80               	movlw	128
 16080  001902  0100               	movlb	0	; () banked
 16081  001904  BFA8               	btfsc	printf@c& (0+255),7,b
 16082  001906  0E7F               	movlw	127
 16083  001908  0100               	movlb	0	; () banked
 16084  00190A  6F9A               	movwf	??_printf& (0+255),b
 16085  00190C  0100               	movlb	0	; () banked
 16086  00190E  51A9               	movf	printf@width& (0+255),w,b
 16087  001910  0100               	movlb	0	; () banked
 16088  001912  5DA8               	subwf	printf@c& (0+255),w,b
 16089  001914  0100               	movlb	0	; () banked
 16090  001916  51AA               	movf	(printf@width+1)& (0+255),w,b
 16091  001918  0A80               	xorlw	128
 16092  00191A  0100               	movlb	0	; () banked
 16093  00191C  599A               	subwfb	??_printf& (0+255),w,b
 16094  00191E  B0D8               	btfsc	status,0,c
 16095  001920  D00B               	goto	l6323
 16096                           
 16097                           ; BSR set to: 0
 16098                           ;doprnt.c: 1382: width -= c;
 16099  001922  0100               	movlb	0	; () banked
 16100  001924  51A8               	movf	printf@c& (0+255),w,b
 16101  001926  0100               	movlb	0	; () banked
 16102  001928  5FA9               	subwf	printf@width& (0+255),f,b
 16103  00192A  0E00               	movlw	0
 16104  00192C  0100               	movlb	0	; () banked
 16105  00192E  BFA8               	btfsc	printf@c& (0+255),7,b
 16106  001930  0EFF               	movlw	255
 16107  001932  0100               	movlb	0	; () banked
 16108  001934  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 16109  001936  D005               	goto	l6325
 16110  001938                     l6323:
 16111                           
 16112                           ; BSR set to: 0
 16113                           ;doprnt.c: 1383: else
 16114                           ;doprnt.c: 1384: width = 0;
 16115  001938  0E00               	movlw	0
 16116  00193A  0100               	movlb	0	; () banked
 16117  00193C  6FAA               	movwf	(printf@width+1)& (0+255),b
 16118  00193E  0E00               	movlw	0
 16119  001940  6FA9               	movwf	printf@width& (0+255),b
 16120  001942                     l6325:
 16121                           
 16122                           ; BSR set to: 0
 16123                           ;doprnt.c: 1387: if(flag & 0x04) {
 16124  001942  0100               	movlb	0	; () banked
 16125  001944  A5A7               	btfss	printf@flag& (0+255),2,b
 16126  001946  D018               	goto	l6337
 16127                           
 16128                           ; BSR set to: 0
 16129                           ;doprnt.c: 1392: if(flag & 0x03)
 16130  001948  C0A7  F09A         	movff	printf@flag,??_printf
 16131  00194C  0E03               	movlw	3
 16132  00194E  0100               	movlb	0	; () banked
 16133  001950  179A               	andwf	??_printf& (0+255),f,b
 16134  001952  B4D8               	btfsc	status,2,c
 16135  001954  D003               	goto	l6331
 16136                           
 16137                           ; BSR set to: 0
 16138                           ;doprnt.c: 1393: (putch('-') );
 16139  001956  0E2D               	movlw	45
 16140  001958  EC40  F029         	call	_putch
 16141  00195C                     l6331:
 16142                           
 16143                           ;doprnt.c: 1415: if(width)
 16144  00195C  0100               	movlb	0	; () banked
 16145  00195E  51A9               	movf	printf@width& (0+255),w,b
 16146  001960  0100               	movlb	0	; () banked
 16147  001962  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 16148  001964  B4D8               	btfsc	status,2,c
 16149  001966  D025               	goto	l6347
 16150                           
 16151                           ; BSR set to: 0
 16152                           ;doprnt.c: 1417: (putch('0') );
 16153                           
 16154                           ; BSR set to: 0
 16155                           
 16156                           ;doprnt.c: 1416: do
 16157  001968  0E30               	movlw	48
 16158  00196A  EC40  F029         	call	_putch
 16159                           
 16160                           ;doprnt.c: 1418: while(--width);
 16161  00196E  0100               	movlb	0	; () banked
 16162  001970  07A9               	decf	printf@width& (0+255),f,b
 16163  001972  A0D8               	btfss	status,0,c
 16164  001974  07AA               	decf	(printf@width+1)& (0+255),f,b
 16165  001976  D7F2               	goto	l6331
 16166  001978                     l6337:
 16167                           
 16168                           ; BSR set to: 0
 16169                           ;doprnt.c: 1422: {
 16170                           ;doprnt.c: 1424: if(width
 16171                           ;doprnt.c: 1428: )
 16172  001978  0100               	movlb	0	; () banked
 16173  00197A  51A9               	movf	printf@width& (0+255),w,b
 16174  00197C  0100               	movlb	0	; () banked
 16175  00197E  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 16176  001980  B4D8               	btfsc	status,2,c
 16177  001982  D00D               	goto	l6343
 16178  001984                     l6339:
 16179                           
 16180                           ; BSR set to: 0
 16181                           ;doprnt.c: 1430: (putch(' ') );
 16182  001984  0E20               	movlw	32
 16183  001986  EC40  F029         	call	_putch
 16184                           
 16185                           ;doprnt.c: 1431: while(--width);
 16186  00198A  0100               	movlb	0	; () banked
 16187  00198C  07A9               	decf	printf@width& (0+255),f,b
 16188  00198E  A0D8               	btfss	status,0,c
 16189  001990  07AA               	decf	(printf@width+1)& (0+255),f,b
 16190  001992  0100               	movlb	0	; () banked
 16191  001994  51A9               	movf	printf@width& (0+255),w,b
 16192  001996  0100               	movlb	0	; () banked
 16193  001998  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 16194  00199A  A4D8               	btfss	status,2,c
 16195  00199C  D7F3               	goto	l6339
 16196  00199E                     l6343:
 16197                           
 16198                           ; BSR set to: 0
 16199                           ;doprnt.c: 1438: if(flag & 0x03)
 16200  00199E  C0A7  F09A         	movff	printf@flag,??_printf
 16201  0019A2  0E03               	movlw	3
 16202  0019A4  0100               	movlb	0	; () banked
 16203  0019A6  179A               	andwf	??_printf& (0+255),f,b
 16204  0019A8  B4D8               	btfsc	status,2,c
 16205  0019AA  D003               	goto	l6347
 16206                           
 16207                           ; BSR set to: 0
 16208                           ;doprnt.c: 1439: (putch('-') );
 16209  0019AC  0E2D               	movlw	45
 16210  0019AE  EC40  F029         	call	_putch
 16211  0019B2                     l6347:
 16212                           
 16213                           ;doprnt.c: 1469: }
 16214                           ;doprnt.c: 1472: prec = c;
 16215  0019B2  C0A8  F09E         	movff	printf@c,printf@prec
 16216                           
 16217                           ;doprnt.c: 1474: while(prec--) {
 16218  0019B6  D02C               	goto	l6353
 16219  0019B8                     l6349:
 16220                           
 16221                           ;doprnt.c: 1478: {
 16222                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 16223  0019B8  0100               	movlb	0	; () banked
 16224  0019BA  519E               	movf	printf@prec& (0+255),w,b
 16225  0019BC  0D02               	mullw	2
 16226  0019BE  0E00               	movlw	low _dpowers
 16227  0019C0  24F3               	addwf	prodl,w,c
 16228  0019C2  6EF6               	movwf	tblptrl,c
 16229  0019C4  0EFB               	movlw	high _dpowers
 16230  0019C6  20F4               	addwfc	prodh,w,c
 16231  0019C8  6EF7               	movwf	tblptrh,c
 16232  0019CA                     	if	1	;There are 3 active tblptr bytes
 16233  0019CA  6AF8               	clrf	tblptru,c
 16234  0019CC  0E00               	movlw	low (__mediumconst shr (0+16))
 16235  0019CE  22F8               	addwfc	tblptru,f,c
 16236  0019D0                     	endif
 16237  0019D0  0009               	tblrd		*+
 16238  0019D2  CFF5 F082          	movff	tablat,___lwdiv@divisor
 16239  0019D6  000A               	tblrd		*-
 16240  0019D8  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
 16241  0019DC  C0A5  F080         	movff	printf@val,___lwdiv@dividend
 16242  0019E0  C0A6  F081         	movff	printf@val+1,___lwdiv@dividend+1
 16243  0019E4  EC5C  F023         	call	___lwdiv	;wreg free
 16244  0019E8  C080  F087         	movff	?___lwdiv,___lwmod@dividend
 16245  0019EC  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
 16246  0019F0  0E00               	movlw	0
 16247  0019F2  0100               	movlb	0	; () banked
 16248  0019F4  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
 16249  0019F6  0E0A               	movlw	10
 16250  0019F8  6F89               	movwf	___lwmod@divisor& (0+255),b
 16251  0019FA  EC76  F024         	call	___lwmod	;wreg free
 16252  0019FE  0100               	movlb	0	; () banked
 16253  001A00  5187               	movf	?___lwmod& (0+255),w,b
 16254  001A02  0F30               	addlw	48
 16255  001A04  0100               	movlb	0	; () banked
 16256  001A06  6FA8               	movwf	printf@c& (0+255),b
 16257                           
 16258                           ; BSR set to: 0
 16259                           ;doprnt.c: 1523: }
 16260                           ;doprnt.c: 1524: (putch(c) );
 16261  001A08  0100               	movlb	0	; () banked
 16262  001A0A  51A8               	movf	printf@c& (0+255),w,b
 16263  001A0C  EC40  F029         	call	_putch
 16264  001A10                     l6353:
 16265  001A10  0100               	movlb	0	; () banked
 16266  001A12  079E               	decf	printf@prec& (0+255),f,b
 16267  001A14  0100               	movlb	0	; () banked
 16268  001A16  299E               	incf	printf@prec& (0+255),w,b
 16269  001A18  A4D8               	btfss	status,2,c
 16270  001A1A  D7CE               	goto	l6349
 16271  001A1C                     l6355:
 16272  001A1C  C08E  FFF6         	movff	printf@f,tblptrl
 16273  001A20  C08F  FFF7         	movff	printf@f+1,tblptrh
 16274  001A24  0100               	movlb	0	; () banked
 16275  001A26  4B8E               	infsnz	printf@f& (0+255),f,b
 16276  001A28  2B8F               	incf	(printf@f+1)& (0+255),f,b
 16277  001A2A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 16278  001A2A  6AF8               	clrf	tblptru,c
 16279  001A2C                     	endif
 16280  001A2C                     	if	0	;tblptru may be non-zero
 16281  001A2C                     	endif
 16282  001A2C  0008               	tblrd		*
 16283  001A2E  CFF5 F0A8          	movff	tablat,printf@c
 16284  001A32  0100               	movlb	0	; () banked
 16285  001A34  51A8               	movf	printf@c& (0+255),w,b
 16286  001A36  B4D8               	btfsc	status,2,c
 16287  001A38  0012               	return	
 16288  001A3A  D5EB               	goto	l6225
 16289  001A3C                     __end_of_printf:
 16290                           	opt stack 0
 16291                           tblptru	equ	0xFF8
 16292                           tblptrh	equ	0xFF7
 16293                           tblptrl	equ	0xFF6
 16294                           tablat	equ	0xFF5
 16295                           prodh	equ	0xFF4
 16296                           prodl	equ	0xFF3
 16297                           intcon	equ	0xFF2
 16298                           intcon2	equ	0xFF1
 16299                           intcon3	equ	0xFF0
 16300                           indf0	equ	0xFEF
 16301                           postinc0	equ	0xFEE
 16302                           fsr0h	equ	0xFEA
 16303                           fsr0l	equ	0xFE9
 16304                           wreg	equ	0xFE8
 16305                           postdec1	equ	0xFE5
 16306                           fsr1l	equ	0xFE1
 16307                           indf2	equ	0xFDF
 16308                           postinc2	equ	0xFDE
 16309                           postdec2	equ	0xFDD
 16310                           fsr2h	equ	0xFDA
 16311                           fsr2l	equ	0xFD9
 16312                           status	equ	0xFD8
 16313                           
 16314 ;; *************** function _putch *****************
 16315 ;; Defined at:
 16316 ;;		line 20 in file "lcd.c"
 16317 ;; Parameters:    Size  Location     Type
 16318 ;;  data            1    wreg     unsigned char 
 16319 ;; Auto vars:     Size  Location     Type
 16320 ;;  data            1    2[BANK0 ] unsigned char 
 16321 ;; Return value:  Size  Location     Type
 16322 ;;                  1    wreg      void 
 16323 ;; Registers used:
 16324 ;;		wreg, status,2, status,0, cstack
 16325 ;; Tracked objects:
 16326 ;;		On entry : 0/0
 16327 ;;		On exit  : 0/0
 16328 ;;		Unchanged: 0/0
 16329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16330 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16331 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16332 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16333 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16334 ;;Total ram usage:        1 bytes
 16335 ;; Hardware stack levels used:    1
 16336 ;; Hardware stack levels required when called:    8
 16337 ;; This function calls:
 16338 ;;		_lcdNibble
 16339 ;; This function is called by:
 16340 ;;		_printf
 16341 ;; This function uses a non-reentrant model
 16342 ;;
 16343                           
 16344                           	psect	text52
 16345  005280                     __ptext52:
 16346                           	opt stack 0
 16347  005280                     _putch:
 16348                           	opt stack 18
 16349                           
 16350                           ;incstack = 0
 16351                           ;putch@data stored from wreg
 16352  005280  0100               	movlb	0	; () banked
 16353  005282  6F82               	movwf	putch@data& (0+255),b
 16354                           
 16355                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 16356  005284  848C               	bsf	3980,2,c	;volatile
 16357                           
 16358                           ;lcd.c: 22: lcdNibble(data);
 16359  005286  0100               	movlb	0	; () banked
 16360  005288  5182               	movf	putch@data& (0+255),w,b
 16361  00528A  EC42  F024         	call	_lcdNibble
 16362  00528E  0012               	return		;funcret
 16363  005290                     __end_of_putch:
 16364                           	opt stack 0
 16365                           tblptru	equ	0xFF8
 16366                           tblptrh	equ	0xFF7
 16367                           tblptrl	equ	0xFF6
 16368                           tablat	equ	0xFF5
 16369                           prodh	equ	0xFF4
 16370                           prodl	equ	0xFF3
 16371                           intcon	equ	0xFF2
 16372                           intcon2	equ	0xFF1
 16373                           intcon3	equ	0xFF0
 16374                           indf0	equ	0xFEF
 16375                           postinc0	equ	0xFEE
 16376                           fsr0h	equ	0xFEA
 16377                           fsr0l	equ	0xFE9
 16378                           wreg	equ	0xFE8
 16379                           postdec1	equ	0xFE5
 16380                           fsr1l	equ	0xFE1
 16381                           indf2	equ	0xFDF
 16382                           postinc2	equ	0xFDE
 16383                           postdec2	equ	0xFDD
 16384                           fsr2h	equ	0xFDA
 16385                           fsr2l	equ	0xFD9
 16386                           status	equ	0xFD8
 16387                           
 16388 ;; *************** function _isdigit *****************
 16389 ;; Defined at:
 16390 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 16391 ;; Parameters:    Size  Location     Type
 16392 ;;  c               1    wreg     unsigned char 
 16393 ;; Auto vars:     Size  Location     Type
 16394 ;;  c               1    2[BANK0 ] unsigned char 
 16395 ;; Return value:  Size  Location     Type
 16396 ;;		None               void
 16397 ;; Registers used:
 16398 ;;		wreg, status,2, status,0
 16399 ;; Tracked objects:
 16400 ;;		On entry : 0/0
 16401 ;;		On exit  : 0/0
 16402 ;;		Unchanged: 0/0
 16403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16404 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16405 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16406 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16407 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16408 ;;Total ram usage:        3 bytes
 16409 ;; Hardware stack levels used:    1
 16410 ;; Hardware stack levels required when called:    7
 16411 ;; This function calls:
 16412 ;;		Nothing
 16413 ;; This function is called by:
 16414 ;;		_printf
 16415 ;; This function uses a non-reentrant model
 16416 ;;
 16417                           
 16418                           	psect	text53
 16419  0050AA                     __ptext53:
 16420                           	opt stack 0
 16421  0050AA                     _isdigit:
 16422                           	opt stack 19
 16423                           
 16424                           ;incstack = 0
 16425                           ;isdigit@c stored from wreg
 16426  0050AA  0100               	movlb	0	; () banked
 16427  0050AC  6F82               	movwf	isdigit@c& (0+255),b
 16428  0050AE  0E00               	movlw	0
 16429  0050B0  0100               	movlb	0	; () banked
 16430  0050B2  6F81               	movwf	_isdigit$2057& (0+255),b
 16431                           
 16432                           ; BSR set to: 0
 16433  0050B4  0E3A               	movlw	58
 16434  0050B6  0100               	movlb	0	; () banked
 16435  0050B8  6182               	cpfslt	isdigit@c& (0+255),b
 16436  0050BA  D007               	goto	l6073
 16437                           
 16438                           ; BSR set to: 0
 16439  0050BC  0E2F               	movlw	47
 16440  0050BE  0100               	movlb	0	; () banked
 16441  0050C0  6582               	cpfsgt	isdigit@c& (0+255),b
 16442  0050C2  D003               	goto	l6073
 16443                           
 16444                           ; BSR set to: 0
 16445  0050C4  0E01               	movlw	1
 16446  0050C6  0100               	movlb	0	; () banked
 16447  0050C8  6F81               	movwf	_isdigit$2057& (0+255),b
 16448  0050CA                     l6073:
 16449                           
 16450                           ; BSR set to: 0
 16451  0050CA  C081  F080         	movff	_isdigit$2057,??_isdigit
 16452  0050CE  0100               	movlb	0	; () banked
 16453  0050D0  3180               	rrcf	??_isdigit& (0+255),w,b
 16454  0050D2  0012               	return	
 16455  0050D4                     __end_of_isdigit:
 16456                           	opt stack 0
 16457                           tblptru	equ	0xFF8
 16458                           tblptrh	equ	0xFF7
 16459                           tblptrl	equ	0xFF6
 16460                           tablat	equ	0xFF5
 16461                           prodh	equ	0xFF4
 16462                           prodl	equ	0xFF3
 16463                           intcon	equ	0xFF2
 16464                           intcon2	equ	0xFF1
 16465                           intcon3	equ	0xFF0
 16466                           indf0	equ	0xFEF
 16467                           postinc0	equ	0xFEE
 16468                           fsr0h	equ	0xFEA
 16469                           fsr0l	equ	0xFE9
 16470                           wreg	equ	0xFE8
 16471                           postdec1	equ	0xFE5
 16472                           fsr1l	equ	0xFE1
 16473                           indf2	equ	0xFDF
 16474                           postinc2	equ	0xFDE
 16475                           postdec2	equ	0xFDD
 16476                           fsr2h	equ	0xFDA
 16477                           fsr2l	equ	0xFD9
 16478                           status	equ	0xFD8
 16479                           
 16480 ;; *************** function ___wmul *****************
 16481 ;; Defined at:
 16482 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 16483 ;; Parameters:    Size  Location     Type
 16484 ;;  multiplier      2    0[BANK0 ] unsigned int 
 16485 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 16486 ;; Auto vars:     Size  Location     Type
 16487 ;;  product         2    4[BANK0 ] unsigned int 
 16488 ;; Return value:  Size  Location     Type
 16489 ;;                  2    0[BANK0 ] unsigned int 
 16490 ;; Registers used:
 16491 ;;		wreg, status,2, status,0, prodl, prodh
 16492 ;; Tracked objects:
 16493 ;;		On entry : 0/0
 16494 ;;		On exit  : 0/0
 16495 ;;		Unchanged: 0/0
 16496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16497 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16498 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16499 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16500 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16501 ;;Total ram usage:        6 bytes
 16502 ;; Hardware stack levels used:    1
 16503 ;; Hardware stack levels required when called:    7
 16504 ;; This function calls:
 16505 ;;		Nothing
 16506 ;; This function is called by:
 16507 ;;		_printf
 16508 ;; This function uses a non-reentrant model
 16509 ;;
 16510                           
 16511                           	psect	text54
 16512  004D7C                     __ptext54:
 16513                           	opt stack 0
 16514  004D7C                     ___wmul:
 16515                           	opt stack 19
 16516                           
 16517                           ; BSR set to: 0
 16518                           ;incstack = 0
 16519  004D7C  0100               	movlb	0	; () banked
 16520  004D7E  5180               	movf	___wmul@multiplier& (0+255),w,b
 16521  004D80  0100               	movlb	0	; () banked
 16522  004D82  0382               	mulwf	___wmul@multiplicand& (0+255),b
 16523  004D84  CFF3 F084          	movff	prodl,___wmul@product
 16524  004D88  CFF4 F085          	movff	prodh,___wmul@product+1
 16525  004D8C  0100               	movlb	0	; () banked
 16526  004D8E  5180               	movf	___wmul@multiplier& (0+255),w,b
 16527  004D90  0100               	movlb	0	; () banked
 16528  004D92  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 16529  004D94  50F3               	movf	prodl,w,c
 16530  004D96  0100               	movlb	0	; () banked
 16531  004D98  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 16532  004D9A  0100               	movlb	0	; () banked
 16533  004D9C  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
 16534  004D9E  0100               	movlb	0	; () banked
 16535  004DA0  0382               	mulwf	___wmul@multiplicand& (0+255),b
 16536  004DA2  50F3               	movf	prodl,w,c
 16537  004DA4  0100               	movlb	0	; () banked
 16538  004DA6  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 16539                           
 16540                           ; BSR set to: 0
 16541  004DA8  C084  F080         	movff	___wmul@product,?___wmul
 16542  004DAC  C085  F081         	movff	___wmul@product+1,?___wmul+1
 16543  004DB0  0012               	return	
 16544  004DB2                     __end_of___wmul:
 16545                           	opt stack 0
 16546                           tblptru	equ	0xFF8
 16547                           tblptrh	equ	0xFF7
 16548                           tblptrl	equ	0xFF6
 16549                           tablat	equ	0xFF5
 16550                           prodh	equ	0xFF4
 16551                           prodl	equ	0xFF3
 16552                           intcon	equ	0xFF2
 16553                           intcon2	equ	0xFF1
 16554                           intcon3	equ	0xFF0
 16555                           indf0	equ	0xFEF
 16556                           postinc0	equ	0xFEE
 16557                           fsr0h	equ	0xFEA
 16558                           fsr0l	equ	0xFE9
 16559                           wreg	equ	0xFE8
 16560                           postdec1	equ	0xFE5
 16561                           fsr1l	equ	0xFE1
 16562                           indf2	equ	0xFDF
 16563                           postinc2	equ	0xFDE
 16564                           postdec2	equ	0xFDD
 16565                           fsr2h	equ	0xFDA
 16566                           fsr2l	equ	0xFD9
 16567                           status	equ	0xFD8
 16568                           
 16569 ;; *************** function ___lwmod *****************
 16570 ;; Defined at:
 16571 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 16572 ;; Parameters:    Size  Location     Type
 16573 ;;  dividend        2    7[BANK0 ] unsigned int 
 16574 ;;  divisor         2    9[BANK0 ] unsigned int 
 16575 ;; Auto vars:     Size  Location     Type
 16576 ;;  counter         1   11[BANK0 ] unsigned char 
 16577 ;; Return value:  Size  Location     Type
 16578 ;;                  2    7[BANK0 ] unsigned int 
 16579 ;; Registers used:
 16580 ;;		wreg, status,2, status,0
 16581 ;; Tracked objects:
 16582 ;;		On entry : 0/0
 16583 ;;		On exit  : 0/0
 16584 ;;		Unchanged: 0/0
 16585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16586 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16587 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16588 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16589 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16590 ;;Total ram usage:        5 bytes
 16591 ;; Hardware stack levels used:    1
 16592 ;; Hardware stack levels required when called:    7
 16593 ;; This function calls:
 16594 ;;		Nothing
 16595 ;; This function is called by:
 16596 ;;		_printf
 16597 ;; This function uses a non-reentrant model
 16598 ;;
 16599                           
 16600                           	psect	text55
 16601  0048EC                     __ptext55:
 16602                           	opt stack 0
 16603  0048EC                     ___lwmod:
 16604                           	opt stack 19
 16605                           
 16606                           ; BSR set to: 0
 16607                           ;incstack = 0
 16608  0048EC  0100               	movlb	0	; () banked
 16609  0048EE  5189               	movf	___lwmod@divisor& (0+255),w,b
 16610  0048F0  0100               	movlb	0	; () banked
 16611  0048F2  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 16612  0048F4  B4D8               	btfsc	status,2,c
 16613  0048F6  D026               	goto	l1860
 16614                           
 16615                           ; BSR set to: 0
 16616  0048F8  0E01               	movlw	1
 16617  0048FA  0100               	movlb	0	; () banked
 16618  0048FC  6F8B               	movwf	___lwmod@counter& (0+255),b
 16619  0048FE  D006               	goto	l6111
 16620  004900                     l6109:
 16621                           
 16622                           ; BSR set to: 0
 16623  004900  0100               	movlb	0	; () banked
 16624  004902  90D8               	bcf	status,0,c
 16625  004904  3789               	rlcf	___lwmod@divisor& (0+255),f,b
 16626  004906  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 16627  004908  0100               	movlb	0	; () banked
 16628  00490A  2B8B               	incf	___lwmod@counter& (0+255),f,b
 16629  00490C                     l6111:
 16630                           
 16631                           ; BSR set to: 0
 16632  00490C  0100               	movlb	0	; () banked
 16633  00490E  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 16634  004910  D7F7               	goto	l6109
 16635  004912                     l6113:
 16636                           
 16637                           ; BSR set to: 0
 16638  004912  0100               	movlb	0	; () banked
 16639  004914  5189               	movf	___lwmod@divisor& (0+255),w,b
 16640  004916  0100               	movlb	0	; () banked
 16641  004918  5D87               	subwf	___lwmod@dividend& (0+255),w,b
 16642  00491A  0100               	movlb	0	; () banked
 16643  00491C  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 16644  00491E  0100               	movlb	0	; () banked
 16645  004920  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 16646  004922  A0D8               	btfss	status,0,c
 16647  004924  D008               	goto	l6117
 16648                           
 16649                           ; BSR set to: 0
 16650  004926  0100               	movlb	0	; () banked
 16651  004928  5189               	movf	___lwmod@divisor& (0+255),w,b
 16652  00492A  0100               	movlb	0	; () banked
 16653  00492C  5F87               	subwf	___lwmod@dividend& (0+255),f,b
 16654  00492E  0100               	movlb	0	; () banked
 16655  004930  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 16656  004932  0100               	movlb	0	; () banked
 16657  004934  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 16658  004936                     l6117:
 16659                           
 16660                           ; BSR set to: 0
 16661  004936  0100               	movlb	0	; () banked
 16662  004938  90D8               	bcf	status,0,c
 16663  00493A  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 16664  00493C  3389               	rrcf	___lwmod@divisor& (0+255),f,b
 16665                           
 16666                           ; BSR set to: 0
 16667  00493E  0100               	movlb	0	; () banked
 16668  004940  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
 16669  004942  D7E7               	goto	l6113
 16670  004944                     l1860:
 16671                           
 16672                           ; BSR set to: 0
 16673  004944  C087  F087         	movff	___lwmod@dividend,?___lwmod
 16674  004948  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
 16675                           
 16676                           ; BSR set to: 0
 16677  00494C  0012               	return		;funcret
 16678  00494E                     __end_of___lwmod:
 16679                           	opt stack 0
 16680                           tblptru	equ	0xFF8
 16681                           tblptrh	equ	0xFF7
 16682                           tblptrl	equ	0xFF6
 16683                           tablat	equ	0xFF5
 16684                           prodh	equ	0xFF4
 16685                           prodl	equ	0xFF3
 16686                           intcon	equ	0xFF2
 16687                           intcon2	equ	0xFF1
 16688                           intcon3	equ	0xFF0
 16689                           indf0	equ	0xFEF
 16690                           postinc0	equ	0xFEE
 16691                           fsr0h	equ	0xFEA
 16692                           fsr0l	equ	0xFE9
 16693                           wreg	equ	0xFE8
 16694                           postdec1	equ	0xFE5
 16695                           fsr1l	equ	0xFE1
 16696                           indf2	equ	0xFDF
 16697                           postinc2	equ	0xFDE
 16698                           postdec2	equ	0xFDD
 16699                           fsr2h	equ	0xFDA
 16700                           fsr2l	equ	0xFD9
 16701                           status	equ	0xFD8
 16702                           
 16703 ;; *************** function ___lwdiv *****************
 16704 ;; Defined at:
 16705 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 16706 ;; Parameters:    Size  Location     Type
 16707 ;;  dividend        2    0[BANK0 ] unsigned int 
 16708 ;;  divisor         2    2[BANK0 ] unsigned int 
 16709 ;; Auto vars:     Size  Location     Type
 16710 ;;  quotient        2    4[BANK0 ] unsigned int 
 16711 ;;  counter         1    6[BANK0 ] unsigned char 
 16712 ;; Return value:  Size  Location     Type
 16713 ;;                  2    0[BANK0 ] unsigned int 
 16714 ;; Registers used:
 16715 ;;		wreg, status,2, status,0
 16716 ;; Tracked objects:
 16717 ;;		On entry : 0/0
 16718 ;;		On exit  : 0/0
 16719 ;;		Unchanged: 0/0
 16720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16721 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16722 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16723 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16724 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16725 ;;Total ram usage:        7 bytes
 16726 ;; Hardware stack levels used:    1
 16727 ;; Hardware stack levels required when called:    7
 16728 ;; This function calls:
 16729 ;;		Nothing
 16730 ;; This function is called by:
 16731 ;;		_printf
 16732 ;; This function uses a non-reentrant model
 16733 ;;
 16734                           
 16735                           	psect	text56
 16736  0046B8                     __ptext56:
 16737                           	opt stack 0
 16738  0046B8                     ___lwdiv:
 16739                           	opt stack 19
 16740                           
 16741                           ; BSR set to: 0
 16742                           ;incstack = 0
 16743  0046B8  0E00               	movlw	0
 16744  0046BA  0100               	movlb	0	; () banked
 16745  0046BC  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
 16746  0046BE  0E00               	movlw	0
 16747  0046C0  6F84               	movwf	___lwdiv@quotient& (0+255),b
 16748                           
 16749                           ; BSR set to: 0
 16750  0046C2  0100               	movlb	0	; () banked
 16751  0046C4  5182               	movf	___lwdiv@divisor& (0+255),w,b
 16752  0046C6  0100               	movlb	0	; () banked
 16753  0046C8  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 16754  0046CA  B4D8               	btfsc	status,2,c
 16755  0046CC  D02C               	goto	l1850
 16756                           
 16757                           ; BSR set to: 0
 16758  0046CE  0E01               	movlw	1
 16759  0046D0  0100               	movlb	0	; () banked
 16760  0046D2  6F86               	movwf	___lwdiv@counter& (0+255),b
 16761  0046D4  D006               	goto	l6091
 16762  0046D6                     l6089:
 16763                           
 16764                           ; BSR set to: 0
 16765  0046D6  0100               	movlb	0	; () banked
 16766  0046D8  90D8               	bcf	status,0,c
 16767  0046DA  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
 16768  0046DC  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 16769  0046DE  0100               	movlb	0	; () banked
 16770  0046E0  2B86               	incf	___lwdiv@counter& (0+255),f,b
 16771  0046E2                     l6091:
 16772                           
 16773                           ; BSR set to: 0
 16774  0046E2  0100               	movlb	0	; () banked
 16775  0046E4  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 16776  0046E6  D7F7               	goto	l6089
 16777  0046E8                     l6093:
 16778                           
 16779                           ; BSR set to: 0
 16780  0046E8  0100               	movlb	0	; () banked
 16781  0046EA  90D8               	bcf	status,0,c
 16782  0046EC  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
 16783  0046EE  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 16784                           
 16785                           ; BSR set to: 0
 16786  0046F0  0100               	movlb	0	; () banked
 16787  0046F2  5182               	movf	___lwdiv@divisor& (0+255),w,b
 16788  0046F4  0100               	movlb	0	; () banked
 16789  0046F6  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
 16790  0046F8  0100               	movlb	0	; () banked
 16791  0046FA  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 16792  0046FC  0100               	movlb	0	; () banked
 16793  0046FE  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 16794  004700  A0D8               	btfss	status,0,c
 16795  004702  D00A               	goto	l6101
 16796                           
 16797                           ; BSR set to: 0
 16798  004704  0100               	movlb	0	; () banked
 16799  004706  5182               	movf	___lwdiv@divisor& (0+255),w,b
 16800  004708  0100               	movlb	0	; () banked
 16801  00470A  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
 16802  00470C  0100               	movlb	0	; () banked
 16803  00470E  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 16804  004710  0100               	movlb	0	; () banked
 16805  004712  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 16806                           
 16807                           ; BSR set to: 0
 16808  004714  0100               	movlb	0	; () banked
 16809  004716  8184               	bsf	___lwdiv@quotient& (0+255),0,b
 16810  004718                     l6101:
 16811                           
 16812                           ; BSR set to: 0
 16813  004718  0100               	movlb	0	; () banked
 16814  00471A  90D8               	bcf	status,0,c
 16815  00471C  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 16816  00471E  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
 16817                           
 16818                           ; BSR set to: 0
 16819  004720  0100               	movlb	0	; () banked
 16820  004722  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
 16821  004724  D7E1               	goto	l6093
 16822  004726                     l1850:
 16823                           
 16824                           ; BSR set to: 0
 16825  004726  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
 16826  00472A  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
 16827                           
 16828                           ; BSR set to: 0
 16829  00472E  0012               	return		;funcret
 16830  004730                     __end_of___lwdiv:
 16831                           	opt stack 0
 16832                           tblptru	equ	0xFF8
 16833                           tblptrh	equ	0xFF7
 16834                           tblptrl	equ	0xFF6
 16835                           tablat	equ	0xFF5
 16836                           prodh	equ	0xFF4
 16837                           prodl	equ	0xFF3
 16838                           intcon	equ	0xFF2
 16839                           intcon2	equ	0xFF1
 16840                           intcon3	equ	0xFF0
 16841                           indf0	equ	0xFEF
 16842                           postinc0	equ	0xFEE
 16843                           fsr0h	equ	0xFEA
 16844                           fsr0l	equ	0xFE9
 16845                           wreg	equ	0xFE8
 16846                           postdec1	equ	0xFE5
 16847                           fsr1l	equ	0xFE1
 16848                           indf2	equ	0xFDF
 16849                           postinc2	equ	0xFDE
 16850                           postdec2	equ	0xFDD
 16851                           fsr2h	equ	0xFDA
 16852                           fsr2l	equ	0xFD9
 16853                           status	equ	0xFD8
 16854                           
 16855 ;; *************** function _lcdInst *****************
 16856 ;; Defined at:
 16857 ;;		line 15 in file "lcd.c"
 16858 ;; Parameters:    Size  Location     Type
 16859 ;;  data            1    wreg     unsigned char 
 16860 ;; Auto vars:     Size  Location     Type
 16861 ;;  data            1    2[BANK0 ] unsigned char 
 16862 ;; Return value:  Size  Location     Type
 16863 ;;                  1    wreg      void 
 16864 ;; Registers used:
 16865 ;;		wreg, status,2, status,0, cstack
 16866 ;; Tracked objects:
 16867 ;;		On entry : 0/0
 16868 ;;		On exit  : 0/0
 16869 ;;		Unchanged: 0/0
 16870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16871 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16872 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16873 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16874 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16875 ;;Total ram usage:        1 bytes
 16876 ;; Hardware stack levels used:    1
 16877 ;; Hardware stack levels required when called:    8
 16878 ;; This function calls:
 16879 ;;		_lcdNibble
 16880 ;; This function is called by:
 16881 ;;		_UI
 16882 ;;		_change_state_to_menu_start
 16883 ;;		_change_state_to_menu_12
 16884 ;;		_change_state_to_menu_22
 16885 ;;		_initLCD
 16886 ;;		_printRTC
 16887 ;;		_Loading
 16888 ;;		_EEPROM_write
 16889 ;;		_Test
 16890 ;;		_algorithmTest
 16891 ;;		_sensorTest
 16892 ;;		_actuatorTest
 16893 ;;		_BothServos
 16894 ;;		_PortTestA5
 16895 ;;		_PusherTest
 16896 ;;		_SpeedTest
 16897 ;;		_BlockerTest
 16898 ;;		_ToggleTestA5
 16899 ;; This function uses a non-reentrant model
 16900 ;;
 16901                           
 16902                           	psect	text57
 16903  005290                     __ptext57:
 16904                           	opt stack 0
 16905  005290                     _lcdInst:
 16906                           	opt stack 20
 16907                           
 16908                           ; BSR set to: 0
 16909                           ;incstack = 0
 16910                           ;lcdInst@data stored from wreg
 16911  005290  0100               	movlb	0	; () banked
 16912  005292  6F82               	movwf	lcdInst@data& (0+255),b
 16913                           
 16914                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 16915  005294  948C               	bcf	3980,2,c	;volatile
 16916                           
 16917                           ;lcd.c: 17: lcdNibble(data);
 16918  005296  0100               	movlb	0	; () banked
 16919  005298  5182               	movf	lcdInst@data& (0+255),w,b
 16920  00529A  EC42  F024         	call	_lcdNibble
 16921  00529E  0012               	return		;funcret
 16922  0052A0                     __end_of_lcdInst:
 16923                           	opt stack 0
 16924                           tblptru	equ	0xFF8
 16925                           tblptrh	equ	0xFF7
 16926                           tblptrl	equ	0xFF6
 16927                           tablat	equ	0xFF5
 16928                           prodh	equ	0xFF4
 16929                           prodl	equ	0xFF3
 16930                           intcon	equ	0xFF2
 16931                           intcon2	equ	0xFF1
 16932                           intcon3	equ	0xFF0
 16933                           indf0	equ	0xFEF
 16934                           postinc0	equ	0xFEE
 16935                           fsr0h	equ	0xFEA
 16936                           fsr0l	equ	0xFE9
 16937                           wreg	equ	0xFE8
 16938                           postdec1	equ	0xFE5
 16939                           fsr1l	equ	0xFE1
 16940                           indf2	equ	0xFDF
 16941                           postinc2	equ	0xFDE
 16942                           postdec2	equ	0xFDD
 16943                           fsr2h	equ	0xFDA
 16944                           fsr2l	equ	0xFD9
 16945                           status	equ	0xFD8
 16946                           
 16947 ;; *************** function _lcdNibble *****************
 16948 ;; Defined at:
 16949 ;;		line 25 in file "lcd.c"
 16950 ;; Parameters:    Size  Location     Type
 16951 ;;  data            1    wreg     unsigned char 
 16952 ;; Auto vars:     Size  Location     Type
 16953 ;;  data            1    1[BANK0 ] unsigned char 
 16954 ;;  temp            1    0[BANK0 ] unsigned char 
 16955 ;; Return value:  Size  Location     Type
 16956 ;;                  1    wreg      void 
 16957 ;; Registers used:
 16958 ;;		wreg, status,2, status,0
 16959 ;; Tracked objects:
 16960 ;;		On entry : 0/0
 16961 ;;		On exit  : 0/0
 16962 ;;		Unchanged: 0/0
 16963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16964 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16965 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16966 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16967 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16968 ;;Total ram usage:        2 bytes
 16969 ;; Hardware stack levels used:    1
 16970 ;; Hardware stack levels required when called:    7
 16971 ;; This function calls:
 16972 ;;		Nothing
 16973 ;; This function is called by:
 16974 ;;		_lcdInst
 16975 ;;		_putch
 16976 ;; This function uses a non-reentrant model
 16977 ;;
 16978                           
 16979                           	psect	text58
 16980  004884                     __ptext58:
 16981                           	opt stack 0
 16982  004884                     _lcdNibble:
 16983                           	opt stack 20
 16984                           
 16985                           ;incstack = 0
 16986                           ;lcdNibble@data stored from wreg
 16987  004884  0100               	movlb	0	; () banked
 16988  004886  6F81               	movwf	lcdNibble@data& (0+255),b
 16989                           
 16990                           ;lcd.c: 27: char temp = data & 0xF0;
 16991  004888  0100               	movlb	0	; () banked
 16992  00488A  5181               	movf	lcdNibble@data& (0+255),w,b
 16993  00488C  0BF0               	andlw	240
 16994  00488E  0100               	movlb	0	; () banked
 16995  004890  6F80               	movwf	lcdNibble@temp& (0+255),b
 16996                           
 16997                           ;lcd.c: 28: LATD = LATD & 0x0F;
 16998  004892  508C               	movf	3980,w,c	;volatile
 16999  004894  0B0F               	andlw	15
 17000  004896  6E8C               	movwf	3980,c	;volatile
 17001                           
 17002                           ;lcd.c: 29: LATD = temp | LATD;
 17003  004898  0100               	movlb	0	; () banked
 17004  00489A  5180               	movf	lcdNibble@temp& (0+255),w,b
 17005  00489C  108C               	iorwf	3980,w,c	;volatile
 17006  00489E  6E8C               	movwf	3980,c	;volatile
 17007                           
 17008                           ; BSR set to: 0
 17009                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 17010  0048A0  868C               	bsf	3980,3,c	;volatile
 17011                           
 17012                           ; BSR set to: 0
 17013                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 17014  0048A2  0E42               	movlw	66
 17015  0048A4                     u9987:
 17016  0048A4  2EE8               	decfsz	wreg,f,c
 17017  0048A6  D7FE               	bra	u9987
 17018  0048A8  D000               	nop2	
 17019                           
 17020                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 17021  0048AA  968C               	bcf	3980,3,c	;volatile
 17022                           
 17023                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 17024  0048AC  0E42               	movlw	66
 17025  0048AE                     u9997:
 17026  0048AE  2EE8               	decfsz	wreg,f,c
 17027  0048B0  D7FE               	bra	u9997
 17028  0048B2  D000               	nop2	
 17029                           
 17030                           ;lcd.c: 36: data = data << 4;
 17031  0048B4  0100               	movlb	0	; () banked
 17032  0048B6  3981               	swapf	lcdNibble@data& (0+255),w,b
 17033  0048B8  0BF0               	andlw	240
 17034  0048BA  0100               	movlb	0	; () banked
 17035  0048BC  6F81               	movwf	lcdNibble@data& (0+255),b
 17036                           
 17037                           ;lcd.c: 38: temp = data & 0xF0;
 17038  0048BE  0100               	movlb	0	; () banked
 17039  0048C0  5181               	movf	lcdNibble@data& (0+255),w,b
 17040  0048C2  0BF0               	andlw	240
 17041  0048C4  0100               	movlb	0	; () banked
 17042  0048C6  6F80               	movwf	lcdNibble@temp& (0+255),b
 17043                           
 17044                           ;lcd.c: 39: LATD = LATD & 0x0F;
 17045  0048C8  508C               	movf	3980,w,c	;volatile
 17046  0048CA  0B0F               	andlw	15
 17047  0048CC  6E8C               	movwf	3980,c	;volatile
 17048                           
 17049                           ;lcd.c: 40: LATD = temp | LATD;
 17050  0048CE  0100               	movlb	0	; () banked
 17051  0048D0  5180               	movf	lcdNibble@temp& (0+255),w,b
 17052  0048D2  108C               	iorwf	3980,w,c	;volatile
 17053  0048D4  6E8C               	movwf	3980,c	;volatile
 17054                           
 17055                           ; BSR set to: 0
 17056                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 17057  0048D6  868C               	bsf	3980,3,c	;volatile
 17058                           
 17059                           ; BSR set to: 0
 17060                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 17061  0048D8  0E42               	movlw	66
 17062  0048DA                     u10007:
 17063  0048DA  2EE8               	decfsz	wreg,f,c
 17064  0048DC  D7FE               	bra	u10007
 17065  0048DE  D000               	nop2	
 17066                           
 17067                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 17068  0048E0  968C               	bcf	3980,3,c	;volatile
 17069                           
 17070                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 17071  0048E2  0E42               	movlw	66
 17072  0048E4                     u10017:
 17073  0048E4  2EE8               	decfsz	wreg,f,c
 17074  0048E6  D7FE               	bra	u10017
 17075  0048E8  D000               	nop2	
 17076  0048EA  0012               	return		;funcret
 17077  0048EC                     __end_of_lcdNibble:
 17078                           	opt stack 0
 17079                           tblptru	equ	0xFF8
 17080                           tblptrh	equ	0xFF7
 17081                           tblptrl	equ	0xFF6
 17082                           tablat	equ	0xFF5
 17083                           prodh	equ	0xFF4
 17084                           prodl	equ	0xFF3
 17085                           intcon	equ	0xFF2
 17086                           intcon2	equ	0xFF1
 17087                           intcon3	equ	0xFF0
 17088                           indf0	equ	0xFEF
 17089                           postinc0	equ	0xFEE
 17090                           fsr0h	equ	0xFEA
 17091                           fsr0l	equ	0xFE9
 17092                           wreg	equ	0xFE8
 17093                           postdec1	equ	0xFE5
 17094                           fsr1l	equ	0xFE1
 17095                           indf2	equ	0xFDF
 17096                           postinc2	equ	0xFDE
 17097                           postdec2	equ	0xFDD
 17098                           fsr2h	equ	0xFDA
 17099                           fsr2l	equ	0xFD9
 17100                           status	equ	0xFD8
 17101                           
 17102 ;; *************** function _handler *****************
 17103 ;; Defined at:
 17104 ;;		line 16 in file "interruptHandler.c"
 17105 ;; Parameters:    Size  Location     Type
 17106 ;;		None
 17107 ;; Auto vars:     Size  Location     Type
 17108 ;;		None
 17109 ;; Return value:  Size  Location     Type
 17110 ;;                  1    wreg      void 
 17111 ;; Registers used:
 17112 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17113 ;; Tracked objects:
 17114 ;;		On entry : 0/0
 17115 ;;		On exit  : 0/0
 17116 ;;		Unchanged: 0/0
 17117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17118 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17119 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17120 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17121 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17122 ;;Total ram usage:       16 bytes
 17123 ;; Hardware stack levels used:    1
 17124 ;; Hardware stack levels required when called:    6
 17125 ;; This function calls:
 17126 ;;		_printSortTimer
 17127 ;;		_updateMenu
 17128 ;;		_updateServoStates
 17129 ;; This function is called by:
 17130 ;;		Interrupt level 2
 17131 ;; This function uses a non-reentrant model
 17132 ;;
 17133                           
 17134                           	psect	intcode
 17135  000008                     __pintcode:
 17136                           	opt stack 0
 17137  000008                     _handler:
 17138                           	opt stack 18
 17139                           
 17140                           ;incstack = 0
 17141  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 17142  00000A  ED62  F01B         	call	int_func,f	;refresh shadow registers
 17143                           tblptru	equ	0xFF8
 17144                           tblptrh	equ	0xFF7
 17145                           tblptrl	equ	0xFF6
 17146                           tablat	equ	0xFF5
 17147                           prodh	equ	0xFF4
 17148                           prodl	equ	0xFF3
 17149                           intcon	equ	0xFF2
 17150                           intcon2	equ	0xFF1
 17151                           intcon3	equ	0xFF0
 17152                           indf0	equ	0xFEF
 17153                           postinc0	equ	0xFEE
 17154                           fsr0h	equ	0xFEA
 17155                           fsr0l	equ	0xFE9
 17156                           wreg	equ	0xFE8
 17157                           postdec1	equ	0xFE5
 17158                           fsr1l	equ	0xFE1
 17159                           indf2	equ	0xFDF
 17160                           postinc2	equ	0xFDE
 17161                           postdec2	equ	0xFDD
 17162                           fsr2h	equ	0xFDA
 17163                           fsr2l	equ	0xFD9
 17164                           status	equ	0xFD8
 17165                           
 17166                           	psect	intcode_body
 17167  0036C4                     __pintcode_body:
 17168                           	opt stack 18
 17169  0036C4                     int_func:
 17170                           	opt stack 18
 17171  0036C4  0006               	pop		; remove dummy address from shadow register refresh
 17172  0036C6  CFFA F04D          	movff	pclath,??_handler+2
 17173  0036CA  CFFB F04E          	movff	pclatu,??_handler+3
 17174  0036CE  CFE9 F04F          	movff	fsr0l,??_handler+4
 17175  0036D2  CFEA F050          	movff	fsr0h,??_handler+5
 17176  0036D6  CFE1 F051          	movff	fsr1l,??_handler+6
 17177  0036DA  CFE2 F052          	movff	fsr1h,??_handler+7
 17178  0036DE  CFD9 F053          	movff	fsr2l,??_handler+8
 17179  0036E2  CFDA F054          	movff	fsr2h,??_handler+9
 17180  0036E6  CFF3 F055          	movff	prodl,??_handler+10
 17181  0036EA  CFF4 F056          	movff	prodh,??_handler+11
 17182  0036EE  CFF6 F057          	movff	tblptrl,??_handler+12
 17183  0036F2  CFF7 F058          	movff	tblptrh,??_handler+13
 17184  0036F6  CFF8 F059          	movff	tblptru,??_handler+14
 17185  0036FA  CFF5 F05A          	movff	tablat,??_handler+15
 17186                           
 17187                           ;interruptHandler.c: 18: if(INT1IF){
 17188  0036FE  A0F0               	btfss	intcon3,0,c	;volatile
 17189  003700  D02B               	goto	i2l9385
 17190                           
 17191                           ;interruptHandler.c: 19: INT1IF = 0;
 17192  003702  90F0               	bcf	intcon3,0,c	;volatile
 17193                           
 17194                           ;interruptHandler.c: 20: if(machine_state == UI_state) {
 17195  003704  0100               	movlb	0	; () banked
 17196  003706  51FC               	movf	_machine_state& (0+255),w,b
 17197  003708  A4D8               	btfss	status,2,c
 17198  00370A  D01B               	goto	i2l9379
 17199                           
 17200                           ; BSR set to: 0
 17201                           ;interruptHandler.c: 21: input = keys[(PORTB & 0xF0) >> 4];
 17202  00370C  3881               	swapf	3969,w,c	;volatile
 17203  00370E  0B0F               	andlw	15
 17204  003710  0B0F               	andlw	15
 17205  003712  6E4B               	movwf	??_handler& (0+255),c
 17206  003714  6A4C               	clrf	(??_handler+1)& (0+255),c
 17207  003716  0EEF               	movlw	low _keys
 17208  003718  244B               	addwf	??_handler,w,c
 17209  00371A  6EF6               	movwf	tblptrl,c
 17210  00371C  0EFA               	movlw	high _keys
 17211  00371E  204C               	addwfc	??_handler+1,w,c
 17212  003720  6EF7               	movwf	tblptrh,c
 17213  003722                     	if	1	;There are 3 active tblptr bytes
 17214  003722  6AF8               	clrf	tblptru,c
 17215  003724  0E00               	movlw	low (__mediumconst shr (0+16))
 17216  003726  22F8               	addwfc	tblptru,f,c
 17217  003728                     	endif
 17218  003728  0008               	tblrd		*
 17219  00372A  CFF5 F07D          	movff	tablat,_input	;volatile
 17220                           
 17221                           ; BSR set to: 0
 17222                           ;interruptHandler.c: 23: if(input == '*'){
 17223  00372E  0E2A               	movlw	42
 17224  003730  187D               	xorwf	_input,w,c	;volatile
 17225  003732  A4D8               	btfss	status,2,c
 17226  003734  D004               	goto	i2l9377
 17227                           
 17228                           ; BSR set to: 0
 17229                           ;interruptHandler.c: 24: machine_state = Testing_state;
 17230  003736  0E03               	movlw	3
 17231  003738  0100               	movlb	0	; () banked
 17232  00373A  6FFC               	movwf	_machine_state& (0+255),b
 17233                           
 17234                           ;interruptHandler.c: 25: }
 17235  00373C  D002               	goto	i2l9379
 17236  00373E                     i2l9377:
 17237                           
 17238                           ; BSR set to: 0
 17239                           ;interruptHandler.c: 26: else{
 17240                           ;interruptHandler.c: 27: updateMenu();
 17241  00373E  EC7B  F013         	call	_updateMenu	;wreg free
 17242  003742                     i2l9379:
 17243                           
 17244                           ;interruptHandler.c: 28: }
 17245                           ;interruptHandler.c: 29: }
 17246                           ;interruptHandler.c: 30: if(machine_state == Sorting_state){
 17247  003742  0100               	movlb	0	; () banked
 17248  003744  05FC               	decf	_machine_state& (0+255),w,b
 17249  003746  A4D8               	btfss	status,2,c
 17250  003748  D007               	goto	i2l9385
 17251                           
 17252                           ; BSR set to: 0
 17253                           ;interruptHandler.c: 31: if(input == '*'){
 17254  00374A  0E2A               	movlw	42
 17255  00374C  187D               	xorwf	_input,w,c	;volatile
 17256  00374E  A4D8               	btfss	status,2,c
 17257  003750  D003               	goto	i2l9385
 17258                           
 17259                           ; BSR set to: 0
 17260                           ;interruptHandler.c: 32: machine_state = DoneSorting_state;
 17261  003752  0E02               	movlw	2
 17262  003754  0100               	movlb	0	; () banked
 17263  003756  6FFC               	movwf	_machine_state& (0+255),b
 17264  003758                     i2l9385:
 17265                           
 17266                           ;interruptHandler.c: 33: }
 17267                           ;interruptHandler.c: 34: }
 17268                           ;interruptHandler.c: 35: }
 17269                           ;interruptHandler.c: 38: if(TMR0IF){
 17270  003758  A4F2               	btfss	intcon,2,c	;volatile
 17271  00375A  D00C               	goto	i2l9399
 17272                           
 17273                           ;interruptHandler.c: 39: TMR0IF = 0;
 17274  00375C  94F2               	bcf	intcon,2,c	;volatile
 17275                           
 17276                           ;interruptHandler.c: 40: if(machine_state == Sorting_state){
 17277  00375E  0100               	movlb	0	; () banked
 17278  003760  05FC               	decf	_machine_state& (0+255),w,b
 17279  003762  A4D8               	btfss	status,2,c
 17280  003764  D007               	goto	i2l9399
 17281                           
 17282                           ; BSR set to: 0
 17283                           ;interruptHandler.c: 41: printSortTimer();
 17284  003766  ECDB  F014         	call	_printSortTimer	;wreg free
 17285                           
 17286                           ;interruptHandler.c: 43: TMR0H = 0b10000101;
 17287  00376A  0E85               	movlw	133
 17288  00376C  6ED7               	movwf	4055,c	;volatile
 17289                           
 17290                           ;interruptHandler.c: 44: TMR0L = 0b11101110;
 17291  00376E  0EEE               	movlw	238
 17292  003770  6ED6               	movwf	4054,c	;volatile
 17293                           
 17294                           ;interruptHandler.c: 45: TMR0ON = 1;
 17295  003772  8ED5               	bsf	4053,7,c	;volatile
 17296  003774                     i2l9399:
 17297                           
 17298                           ;interruptHandler.c: 46: }
 17299                           ;interruptHandler.c: 47: }
 17300                           ;interruptHandler.c: 50: if(TMR1IF){
 17301  003774  A09E               	btfss	3998,0,c	;volatile
 17302  003776  D02A               	goto	i2l9427
 17303                           
 17304                           ;interruptHandler.c: 51: TMR1IF = 0;
 17305  003778  909E               	bcf	3998,0,c	;volatile
 17306                           
 17307                           ;interruptHandler.c: 52: TMR1ON = 0;
 17308  00377A  90CD               	bcf	4045,0,c	;volatile
 17309                           
 17310                           ;interruptHandler.c: 53: if(machine_state == Sorting_state){
 17311  00377C  0100               	movlb	0	; () banked
 17312  00377E  05FC               	decf	_machine_state& (0+255),w,b
 17313  003780  A4D8               	btfss	status,2,c
 17314  003782  D024               	goto	i2l9427
 17315                           
 17316                           ; BSR set to: 0
 17317                           ;interruptHandler.c: 54: if(was_low_1){
 17318  003784  5079               	movf	_was_low_1,w,c	;volatile
 17319  003786  107A               	iorwf	_was_low_1+1,w,c	;volatile
 17320  003788  B4D8               	btfsc	status,2,c
 17321  00378A  D00A               	goto	i2l954
 17322                           
 17323                           ; BSR set to: 0
 17324                           ;interruptHandler.c: 55: LATCbits.LATC1 = 1;
 17325  00378C  828B               	bsf	3979,1,c	;volatile
 17326                           
 17327                           ; BSR set to: 0
 17328                           ;interruptHandler.c: 56: was_low_1 = 0;
 17329  00378E  0E00               	movlw	0
 17330  003790  6E7A               	movwf	_was_low_1+1,c	;volatile
 17331  003792  0E00               	movlw	0
 17332  003794  6E79               	movwf	_was_low_1,c	;volatile
 17333                           
 17334                           ; BSR set to: 0
 17335                           ;interruptHandler.c: 57: TMR1H = servoTimes[0];
 17336  003796  C0DA  FFCF         	movff	_servoTimes,4047	;volatile
 17337                           
 17338                           ; BSR set to: 0
 17339                           ;interruptHandler.c: 58: TMR1L = servoTimes[1];
 17340  00379A  C0DC  FFCE         	movff	_servoTimes+2,4046	;volatile
 17341                           
 17342                           ;interruptHandler.c: 59: }
 17343  00379E  D00F               	goto	i2l9421
 17344  0037A0                     i2l954:
 17345                           
 17346                           ; BSR set to: 0
 17347                           ;interruptHandler.c: 60: else{
 17348                           ;interruptHandler.c: 61: LATCbits.LATC1 = 0;
 17349  0037A0  928B               	bcf	3979,1,c	;volatile
 17350                           
 17351                           ; BSR set to: 0
 17352                           ;interruptHandler.c: 62: was_low_1 = 1;
 17353  0037A2  0E00               	movlw	0
 17354  0037A4  6E7A               	movwf	_was_low_1+1,c	;volatile
 17355  0037A6  0E01               	movlw	1
 17356  0037A8  6E79               	movwf	_was_low_1,c	;volatile
 17357                           
 17358                           ; BSR set to: 0
 17359                           ;interruptHandler.c: 63: TMR1H = 20000 - servoTimes[0];
 17360  0037AA  0100               	movlb	0	; () banked
 17361  0037AC  51DA               	movf	_servoTimes& (0+255),w,b
 17362  0037AE  0800               	sublw	0
 17363  0037B0  0F20               	addlw	32
 17364  0037B2  6ECF               	movwf	4047,c	;volatile
 17365                           
 17366                           ; BSR set to: 0
 17367                           ;interruptHandler.c: 64: TMR1L = 20000 - servoTimes[1];
 17368  0037B4  0100               	movlb	0	; () banked
 17369  0037B6  51DC               	movf	(_servoTimes+2)& (0+255),w,b
 17370  0037B8  0800               	sublw	0
 17371  0037BA  0F20               	addlw	32
 17372  0037BC  6ECE               	movwf	4046,c	;volatile
 17373  0037BE                     i2l9421:
 17374                           
 17375                           ; BSR set to: 0
 17376                           ;interruptHandler.c: 65: }
 17377                           ;interruptHandler.c: 66: TMR1ON = 1;
 17378  0037BE  80CD               	bsf	4045,0,c	;volatile
 17379                           
 17380                           ; BSR set to: 0
 17381                           ;interruptHandler.c: 67: servo_timer_counter += 10;
 17382  0037C0  0E0A               	movlw	10
 17383  0037C2  2671               	addwf	_servo_timer_counter,f,c	;volatile
 17384  0037C4  0E00               	movlw	0
 17385  0037C6  2272               	addwfc	_servo_timer_counter+1,f,c	;volatile
 17386                           
 17387                           ; BSR set to: 0
 17388                           ;interruptHandler.c: 69: updateServoStates();
 17389  0037C8  EC7D  F01A         	call	_updateServoStates	;wreg free
 17390  0037CC                     i2l9427:
 17391                           
 17392                           ;interruptHandler.c: 70: }
 17393                           ;interruptHandler.c: 71: }
 17394                           ;interruptHandler.c: 73: if(TMR3IF){
 17395  0037CC  A2A1               	btfss	4001,1,c	;volatile
 17396  0037CE  D024               	goto	i2l960
 17397                           
 17398                           ;interruptHandler.c: 74: TMR3IF = 0;
 17399  0037D0  92A1               	bcf	4001,1,c	;volatile
 17400                           
 17401                           ;interruptHandler.c: 75: TMR3ON = 0;
 17402  0037D2  90B1               	bcf	4017,0,c	;volatile
 17403                           
 17404                           ;interruptHandler.c: 76: if(machine_state == Sorting_state){
 17405  0037D4  0100               	movlb	0	; () banked
 17406  0037D6  05FC               	decf	_machine_state& (0+255),w,b
 17407  0037D8  A4D8               	btfss	status,2,c
 17408  0037DA  D01E               	goto	i2l960
 17409                           
 17410                           ; BSR set to: 0
 17411                           ;interruptHandler.c: 77: if(was_low_3){
 17412  0037DC  507B               	movf	_was_low_3,w,c	;volatile
 17413  0037DE  107C               	iorwf	_was_low_3+1,w,c	;volatile
 17414  0037E0  B4D8               	btfsc	status,2,c
 17415  0037E2  D00A               	goto	i2l958
 17416                           
 17417                           ; BSR set to: 0
 17418                           ;interruptHandler.c: 78: LATCbits.LATC2 = 1;
 17419  0037E4  848B               	bsf	3979,2,c	;volatile
 17420                           
 17421                           ; BSR set to: 0
 17422                           ;interruptHandler.c: 79: was_low_3 = 0;
 17423  0037E6  0E00               	movlw	0
 17424  0037E8  6E7C               	movwf	_was_low_3+1,c	;volatile
 17425  0037EA  0E00               	movlw	0
 17426  0037EC  6E7B               	movwf	_was_low_3,c	;volatile
 17427                           
 17428                           ; BSR set to: 0
 17429                           ;interruptHandler.c: 80: TMR3H = servoTimes[2];
 17430  0037EE  C0DE  FFB3         	movff	_servoTimes+4,4019	;volatile
 17431                           
 17432                           ; BSR set to: 0
 17433                           ;interruptHandler.c: 81: TMR3L = servoTimes[3];
 17434  0037F2  C0E0  FFB2         	movff	_servoTimes+6,4018	;volatile
 17435                           
 17436                           ;interruptHandler.c: 82: }
 17437  0037F6  D00F               	goto	i2l9449
 17438  0037F8                     i2l958:
 17439                           
 17440                           ; BSR set to: 0
 17441                           ;interruptHandler.c: 83: else{
 17442                           ;interruptHandler.c: 84: LATCbits.LATC2 = 0;
 17443  0037F8  948B               	bcf	3979,2,c	;volatile
 17444                           
 17445                           ; BSR set to: 0
 17446                           ;interruptHandler.c: 85: was_low_3 = 1;
 17447  0037FA  0E00               	movlw	0
 17448  0037FC  6E7C               	movwf	_was_low_3+1,c	;volatile
 17449  0037FE  0E01               	movlw	1
 17450  003800  6E7B               	movwf	_was_low_3,c	;volatile
 17451                           
 17452                           ; BSR set to: 0
 17453                           ;interruptHandler.c: 86: TMR3H = 20000 - servoTimes[2];
 17454  003802  0100               	movlb	0	; () banked
 17455  003804  51DE               	movf	(_servoTimes+4)& (0+255),w,b
 17456  003806  0800               	sublw	0
 17457  003808  0F20               	addlw	32
 17458  00380A  6EB3               	movwf	4019,c	;volatile
 17459                           
 17460                           ; BSR set to: 0
 17461                           ;interruptHandler.c: 87: TMR3L = 20000 - servoTimes[3];
 17462  00380C  0100               	movlb	0	; () banked
 17463  00380E  51E0               	movf	(_servoTimes+6)& (0+255),w,b
 17464  003810  0800               	sublw	0
 17465  003812  0F20               	addlw	32
 17466  003814  6EB2               	movwf	4018,c	;volatile
 17467  003816                     i2l9449:
 17468                           
 17469                           ; BSR set to: 0
 17470                           ;interruptHandler.c: 88: }
 17471                           ;interruptHandler.c: 89: TMR3ON = 1;
 17472  003816  80B1               	bsf	4017,0,c	;volatile
 17473  003818                     i2l960:
 17474  003818  C05A  FFF5         	movff	??_handler+15,tablat
 17475  00381C  C059  FFF8         	movff	??_handler+14,tblptru
 17476  003820  C058  FFF7         	movff	??_handler+13,tblptrh
 17477  003824  C057  FFF6         	movff	??_handler+12,tblptrl
 17478  003828  C056  FFF4         	movff	??_handler+11,prodh
 17479  00382C  C055  FFF3         	movff	??_handler+10,prodl
 17480  003830  C054  FFDA         	movff	??_handler+9,fsr2h
 17481  003834  C053  FFD9         	movff	??_handler+8,fsr2l
 17482  003838  C052  FFE2         	movff	??_handler+7,fsr1h
 17483  00383C  C051  FFE1         	movff	??_handler+6,fsr1l
 17484  003840  C050  FFEA         	movff	??_handler+5,fsr0h
 17485  003844  C04F  FFE9         	movff	??_handler+4,fsr0l
 17486  003848  C04E  FFFB         	movff	??_handler+3,pclatu
 17487  00384C  C04D  FFFA         	movff	??_handler+2,pclath
 17488  003850  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 17489  003852  0011               	retfie		f
 17490  003854                     __end_of_handler:
 17491                           	opt stack 0
 17492                           pclatu	equ	0xFFB
 17493                           pclath	equ	0xFFA
 17494                           tblptru	equ	0xFF8
 17495                           tblptrh	equ	0xFF7
 17496                           tblptrl	equ	0xFF6
 17497                           tablat	equ	0xFF5
 17498                           prodh	equ	0xFF4
 17499                           prodl	equ	0xFF3
 17500                           intcon	equ	0xFF2
 17501                           intcon2	equ	0xFF1
 17502                           intcon3	equ	0xFF0
 17503                           indf0	equ	0xFEF
 17504                           postinc0	equ	0xFEE
 17505                           fsr0h	equ	0xFEA
 17506                           fsr0l	equ	0xFE9
 17507                           wreg	equ	0xFE8
 17508                           postdec1	equ	0xFE5
 17509                           fsr1h	equ	0xFE2
 17510                           fsr1l	equ	0xFE1
 17511                           indf2	equ	0xFDF
 17512                           postinc2	equ	0xFDE
 17513                           postdec2	equ	0xFDD
 17514                           fsr2h	equ	0xFDA
 17515                           fsr2l	equ	0xFD9
 17516                           status	equ	0xFD8
 17517                           
 17518 ;; *************** function _updateServoStates *****************
 17519 ;; Defined at:
 17520 ;;		line 503 in file "sort.c"
 17521 ;; Parameters:    Size  Location     Type
 17522 ;;		None
 17523 ;; Auto vars:     Size  Location     Type
 17524 ;;		None
 17525 ;; Return value:  Size  Location     Type
 17526 ;;                  1    wreg      void 
 17527 ;; Registers used:
 17528 ;;		wreg, status,2, status,0, cstack
 17529 ;; Tracked objects:
 17530 ;;		On entry : 0/0
 17531 ;;		On exit  : 0/0
 17532 ;;		Unchanged: 0/0
 17533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17534 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17535 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17536 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17537 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17538 ;;Total ram usage:        2 bytes
 17539 ;; Hardware stack levels used:    1
 17540 ;; Hardware stack levels required when called:    1
 17541 ;; This function calls:
 17542 ;;		i2_updateServoPosition
 17543 ;; This function is called by:
 17544 ;;		_handler
 17545 ;; This function uses a non-reentrant model
 17546 ;;
 17547                           
 17548                           	psect	text60
 17549  0034FA                     __ptext60:
 17550                           	opt stack 0
 17551  0034FA                     _updateServoStates:
 17552                           	opt stack 22
 17553                           
 17554                           ;sort.c: 505: if(servo_timer_counter >= servo_timer_target){
 17555                           
 17556                           ;incstack = 0
 17557  0034FA  5073               	movf	_servo_timer_target,w,c	;volatile
 17558  0034FC  5C71               	subwf	_servo_timer_counter,w,c	;volatile
 17559  0034FE  5072               	movf	_servo_timer_counter+1,w,c	;volatile
 17560  003500  0A80               	xorlw	128
 17561  003502  6E09               	movwf	??_updateServoStates& (0+255),c
 17562  003504  5074               	movf	_servo_timer_target+1,w,c	;volatile
 17563  003506  0A80               	xorlw	128
 17564  003508  5809               	subwfb	??_updateServoStates& (0+255),w,c
 17565  00350A  A0D8               	btfss	status,0,c
 17566  00350C  0012               	return	
 17567                           
 17568                           ;sort.c: 507: if(f_panning_to_bin){
 17569  00350E  5061               	movf	_f_panning_to_bin,w,c	;volatile
 17570  003510  1062               	iorwf	_f_panning_to_bin+1,w,c	;volatile
 17571  003512  A4D8               	btfss	status,2,c
 17572  003514  D036               	goto	i2l9265
 17573  003516  D05F               	goto	i2l9269
 17574  003518                     i2l9239:
 17575                           
 17576                           ;sort.c: 511: updateServoPosition(1260, 3);
 17577  003518  0E04               	movlw	4
 17578  00351A  6E02               	movwf	i2updateServoPosition@time_us+1,c
 17579  00351C  0EEC               	movlw	236
 17580  00351E  6E01               	movwf	i2updateServoPosition@time_us,c
 17581  003520  0E00               	movlw	0
 17582  003522  6E04               	movwf	i2updateServoPosition@timer+1,c
 17583  003524  0E03               	movlw	3
 17584  003526  6E03               	movwf	i2updateServoPosition@timer,c
 17585  003528  EC0A  F024         	call	i2_updateServoPosition	;wreg free
 17586  00352C  D025               	goto	i2l9259
 17587  00352E                     i2l9243:
 17588                           
 17589                           ;sort.c: 513: servo_timer_target = 2500;
 17590  00352E  0E09               	movlw	9
 17591  003530  6E74               	movwf	_servo_timer_target+1,c	;volatile
 17592  003532  0EC4               	movlw	196
 17593  003534  6E73               	movwf	_servo_timer_target,c	;volatile
 17594                           
 17595                           ;sort.c: 514: break;
 17596  003536  D04A               	goto	i2l9267
 17597  003538                     i2l9245:
 17598                           
 17599                           ;sort.c: 516: updateServoPosition(1260, 3);
 17600  003538  0E04               	movlw	4
 17601  00353A  6E02               	movwf	i2updateServoPosition@time_us+1,c
 17602  00353C  0EEC               	movlw	236
 17603  00353E  6E01               	movwf	i2updateServoPosition@time_us,c
 17604  003540  0E00               	movlw	0
 17605  003542  6E04               	movwf	i2updateServoPosition@timer+1,c
 17606  003544  0E03               	movlw	3
 17607  003546  6E03               	movwf	i2updateServoPosition@timer,c
 17608  003548  EC0A  F024         	call	i2_updateServoPosition	;wreg free
 17609  00354C  D015               	goto	i2l9259
 17610  00354E                     i2l9251:
 17611                           
 17612                           ;sort.c: 522: updateServoPosition(1390, 3);
 17613  00354E  0E05               	movlw	5
 17614  003550  6E02               	movwf	i2updateServoPosition@time_us+1,c
 17615  003552  0E6E               	movlw	110
 17616  003554  6E01               	movwf	i2updateServoPosition@time_us,c
 17617  003556  0E00               	movlw	0
 17618  003558  6E04               	movwf	i2updateServoPosition@timer+1,c
 17619  00355A  0E03               	movlw	3
 17620  00355C  6E03               	movwf	i2updateServoPosition@timer,c
 17621  00355E  EC0A  F024         	call	i2_updateServoPosition	;wreg free
 17622  003562  D00A               	goto	i2l9259
 17623  003564                     i2l9257:
 17624                           
 17625                           ;sort.c: 527: updateServoPosition(1390, 3);
 17626  003564  0E05               	movlw	5
 17627  003566  6E02               	movwf	i2updateServoPosition@time_us+1,c
 17628  003568  0E6E               	movlw	110
 17629  00356A  6E01               	movwf	i2updateServoPosition@time_us,c
 17630  00356C  0E00               	movlw	0
 17631  00356E  6E04               	movwf	i2updateServoPosition@timer+1,c
 17632  003570  0E03               	movlw	3
 17633  003572  6E03               	movwf	i2updateServoPosition@timer,c
 17634  003574  EC0A  F024         	call	i2_updateServoPosition	;wreg free
 17635  003578                     i2l9259:
 17636                           
 17637                           ;sort.c: 528: servo_timer_counter = 0;
 17638  003578  0E00               	movlw	0
 17639  00357A  6E72               	movwf	_servo_timer_counter+1,c	;volatile
 17640  00357C  0E00               	movlw	0
 17641  00357E  6E71               	movwf	_servo_timer_counter,c	;volatile
 17642  003580  D7D6               	goto	i2l9243
 17643  003582                     i2l9265:
 17644  003582  C06F  F009         	movff	_pan_servo_state,??_updateServoStates	;volatile
 17645  003586  C070  F00A         	movff	_pan_servo_state+1,??_updateServoStates+1	;volatile
 17646                           
 17647                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 4 sub-sw
      +                          itches
 17648                           ; Switch size 1, requested type "space"
 17649                           ; Number of cases is 4, Range of values is 1 to 9
 17650                           ; switch strategies available:
 17651                           ; Name         Instructions Cycles
 17652                           ; simple_byte           13     7 (average)
 17653                           ;	Chosen strategy is simple_byte
 17654  00358A  500A               	movf	??_updateServoStates+1,w,c
 17655  00358C  0A01               	xorlw	1	; case 1
 17656  00358E  B4D8               	btfsc	status,2,c
 17657  003590  D00A               	goto	i2l9909
 17658  003592  0A02               	xorlw	2	; case 3
 17659  003594  B4D8               	btfsc	status,2,c
 17660  003596  D00C               	goto	i2l9911
 17661  003598  0A05               	xorlw	5	; case 6
 17662  00359A  B4D8               	btfsc	status,2,c
 17663  00359C  D00E               	goto	i2l9913
 17664  00359E  0A0F               	xorlw	15	; case 9
 17665  0035A0  B4D8               	btfsc	status,2,c
 17666  0035A2  D010               	goto	i2l9915
 17667  0035A4  D013               	goto	i2l9267
 17668  0035A6                     i2l9909:
 17669                           
 17670                           ; Switch size 1, requested type "space"
 17671                           ; Number of cases is 1, Range of values is 244 to 244
 17672                           ; switch strategies available:
 17673                           ; Name         Instructions Cycles
 17674                           ; simple_byte            4     3 (average)
 17675                           ;	Chosen strategy is simple_byte
 17676  0035A6  5009               	movf	??_updateServoStates,w,c
 17677  0035A8  0AF4               	xorlw	244	; case 244
 17678  0035AA  B4D8               	btfsc	status,2,c
 17679  0035AC  D7B5               	goto	i2l9239
 17680  0035AE  D00E               	goto	i2l9267
 17681  0035B0                     i2l9911:
 17682                           
 17683                           ; Switch size 1, requested type "space"
 17684                           ; Number of cases is 1, Range of values is 82 to 82
 17685                           ; switch strategies available:
 17686                           ; Name         Instructions Cycles
 17687                           ; simple_byte            4     3 (average)
 17688                           ;	Chosen strategy is simple_byte
 17689  0035B0  5009               	movf	??_updateServoStates,w,c
 17690  0035B2  0A52               	xorlw	82	; case 82
 17691  0035B4  B4D8               	btfsc	status,2,c
 17692  0035B6  D7C0               	goto	i2l9245
 17693  0035B8  D009               	goto	i2l9267
 17694  0035BA                     i2l9913:
 17695                           
 17696                           ; Switch size 1, requested type "space"
 17697                           ; Number of cases is 1, Range of values is 134 to 134
 17698                           ; switch strategies available:
 17699                           ; Name         Instructions Cycles
 17700                           ; simple_byte            4     3 (average)
 17701                           ;	Chosen strategy is simple_byte
 17702  0035BA  5009               	movf	??_updateServoStates,w,c
 17703  0035BC  0A86               	xorlw	134	; case 134
 17704  0035BE  B4D8               	btfsc	status,2,c
 17705  0035C0  D7C6               	goto	i2l9251
 17706  0035C2  D004               	goto	i2l9267
 17707  0035C4                     i2l9915:
 17708                           
 17709                           ; Switch size 1, requested type "space"
 17710                           ; Number of cases is 1, Range of values is 96 to 96
 17711                           ; switch strategies available:
 17712                           ; Name         Instructions Cycles
 17713                           ; simple_byte            4     3 (average)
 17714                           ;	Chosen strategy is simple_byte
 17715  0035C4  5009               	movf	??_updateServoStates,w,c
 17716  0035C6  0A60               	xorlw	96	; case 96
 17717  0035C8  B4D8               	btfsc	status,2,c
 17718  0035CA  D7CC               	goto	i2l9257
 17719  0035CC                     i2l9267:
 17720                           
 17721                           ;sort.c: 534: f_panning_to_bin = 0;
 17722  0035CC  0E00               	movlw	0
 17723  0035CE  6E62               	movwf	_f_panning_to_bin+1,c	;volatile
 17724  0035D0  0E00               	movlw	0
 17725  0035D2  6E61               	movwf	_f_panning_to_bin,c	;volatile
 17726                           
 17727                           ;sort.c: 535: }
 17728  0035D4  0012               	return	
 17729  0035D6                     i2l9269:
 17730                           
 17731                           ;sort.c: 536: else if(pan_servo_state == 1200){
 17732  0035D6  0EB0               	movlw	176
 17733  0035D8  186F               	xorwf	_pan_servo_state,w,c	;volatile
 17734  0035DA  E15B               	bnz	i2l9301
 17735  0035DC  0E04               	movlw	4
 17736  0035DE  1870               	xorwf	_pan_servo_state+1,w,c	;volatile
 17737  0035E0  B4D8               	btfsc	status,2,c
 17738  0035E2  0012               	return	
 17739  0035E4  D056               	goto	i2l9301
 17740  0035E6                     i2l9273:
 17741                           
 17742                           ;sort.c: 544: updateServoPosition(1050, 3);
 17743  0035E6  0E04               	movlw	4
 17744  0035E8  6E02               	movwf	i2updateServoPosition@time_us+1,c
 17745  0035EA  0E1A               	movlw	26
 17746  0035EC  6E01               	movwf	i2updateServoPosition@time_us,c
 17747  0035EE  0E00               	movlw	0
 17748  0035F0  6E04               	movwf	i2updateServoPosition@timer+1,c
 17749  0035F2  0E03               	movlw	3
 17750  0035F4  6E03               	movwf	i2updateServoPosition@timer,c
 17751  0035F6  EC0A  F024         	call	i2_updateServoPosition	;wreg free
 17752                           
 17753                           ;sort.c: 545: servo_timer_counter = 0;
 17754  0035FA  0E00               	movlw	0
 17755  0035FC  6E72               	movwf	_servo_timer_counter+1,c	;volatile
 17756  0035FE  0E00               	movlw	0
 17757  003600  6E71               	movwf	_servo_timer_counter,c	;volatile
 17758                           
 17759                           ;sort.c: 546: servo_timer_target = 750;
 17760  003602  0E02               	movlw	2
 17761  003604  6E74               	movwf	_servo_timer_target+1,c	;volatile
 17762  003606  0EEE               	movlw	238
 17763  003608  6E73               	movwf	_servo_timer_target,c	;volatile
 17764                           
 17765                           ;sort.c: 547: break;
 17766  00360A  0012               	return	
 17767  00360C                     i2l9279:
 17768                           
 17769                           ;sort.c: 549: updateServoPosition(1050, 3);
 17770  00360C  0E04               	movlw	4
 17771  00360E  6E02               	movwf	i2updateServoPosition@time_us+1,c
 17772  003610  0E1A               	movlw	26
 17773  003612  6E01               	movwf	i2updateServoPosition@time_us,c
 17774  003614  0E00               	movlw	0
 17775  003616  6E04               	movwf	i2updateServoPosition@timer+1,c
 17776  003618  0E03               	movlw	3
 17777  00361A  6E03               	movwf	i2updateServoPosition@timer,c
 17778  00361C  EC0A  F024         	call	i2_updateServoPosition	;wreg free
 17779                           
 17780                           ;sort.c: 550: servo_timer_counter = 0;
 17781  003620  0E00               	movlw	0
 17782  003622  6E72               	movwf	_servo_timer_counter+1,c	;volatile
 17783  003624  0E00               	movlw	0
 17784  003626  6E71               	movwf	_servo_timer_counter,c	;volatile
 17785                           
 17786                           ;sort.c: 551: servo_timer_target = 750;
 17787  003628  0E02               	movlw	2
 17788  00362A  6E74               	movwf	_servo_timer_target+1,c	;volatile
 17789  00362C  0EEE               	movlw	238
 17790  00362E  6E73               	movwf	_servo_timer_target,c	;volatile
 17791                           
 17792                           ;sort.c: 552: break;
 17793  003630  0012               	return	
 17794  003632                     i2l9285:
 17795                           
 17796                           ;sort.c: 555: updateServoPosition(1200, 1);
 17797  003632  0E04               	movlw	4
 17798  003634  6E02               	movwf	i2updateServoPosition@time_us+1,c
 17799  003636  0EB0               	movlw	176
 17800  003638  6E01               	movwf	i2updateServoPosition@time_us,c
 17801  00363A  0E00               	movlw	0
 17802  00363C  6E04               	movwf	i2updateServoPosition@timer+1,c
 17803  00363E  0E01               	movlw	1
 17804  003640  6E03               	movwf	i2updateServoPosition@timer,c
 17805  003642  EC0A  F024         	call	i2_updateServoPosition	;wreg free
 17806                           
 17807                           ;sort.c: 556: updateServoPosition(1050, 3);
 17808  003646  0E04               	movlw	4
 17809  003648  6E02               	movwf	i2updateServoPosition@time_us+1,c
 17810  00364A  0E1A               	movlw	26
 17811  00364C  6E01               	movwf	i2updateServoPosition@time_us,c
 17812  00364E  0E00               	movlw	0
 17813  003650  6E04               	movwf	i2updateServoPosition@timer+1,c
 17814  003652  0E03               	movlw	3
 17815  003654  6E03               	movwf	i2updateServoPosition@timer,c
 17816  003656  EC0A  F024         	call	i2_updateServoPosition	;wreg free
 17817                           
 17818                           ;sort.c: 557: servo_timer_counter = 0;
 17819  00365A  0E00               	movlw	0
 17820  00365C  6E72               	movwf	_servo_timer_counter+1,c	;volatile
 17821  00365E  0E00               	movlw	0
 17822  003660  6E71               	movwf	_servo_timer_counter,c	;volatile
 17823                           
 17824                           ;sort.c: 558: servo_timer_target = 9999;
 17825  003662  0E27               	movlw	39
 17826  003664  6E74               	movwf	_servo_timer_target+1,c	;volatile
 17827  003666  0E0F               	movlw	15
 17828  003668  6E73               	movwf	_servo_timer_target,c	;volatile
 17829                           
 17830                           ;sort.c: 560: f_can_distributed = 1;
 17831  00366A  0E00               	movlw	0
 17832  00366C  0101               	movlb	1	; () banked
 17833  00366E  6F36               	movwf	(_f_can_distributed+1)& (0+255),b
 17834  003670  0E01               	movlw	1
 17835  003672  6F35               	movwf	_f_can_distributed& (0+255),b
 17836                           
 17837                           ; BSR set to: 1
 17838                           ;sort.c: 561: f_most_recent_sort_time = 1;
 17839  003674  0E00               	movlw	0
 17840  003676  0101               	movlb	1	; () banked
 17841  003678  6F38               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
 17842  00367A  0E01               	movlw	1
 17843  00367C  6F37               	movwf	_f_most_recent_sort_time& (0+255),b
 17844                           
 17845                           ; BSR set to: 1
 17846                           ;sort.c: 562: if(f_lastCan == 1){
 17847  00367E  0100               	movlb	0	; () banked
 17848  003680  05EE               	decf	_f_lastCan& (0+255),w,b
 17849  003682  0100               	movlb	0	; () banked
 17850  003684  11EF               	iorwf	(_f_lastCan+1)& (0+255),w,b
 17851  003686  A4D8               	btfss	status,2,c
 17852  003688  0012               	return	
 17853                           
 17854                           ; BSR set to: 0
 17855                           ;sort.c: 563: machine_state = DoneSorting_state;
 17856  00368A  0E02               	movlw	2
 17857  00368C  0100               	movlb	0	; () banked
 17858  00368E  6FFC               	movwf	_machine_state& (0+255),b
 17859                           
 17860                           ; BSR set to: 0
 17861                           ;sort.c: 569: }
 17862                           
 17863                           ; BSR set to: 0
 17864                           ;sort.c: 568: break;
 17865                           
 17866                           ;sort.c: 567: default:
 17867                           
 17868                           ; BSR set to: 0
 17869                           ;sort.c: 564: }
 17870                           ;sort.c: 565: break;
 17871  003690  0012               	return	
 17872  003692                     i2l9301:
 17873  003692  C075  F009         	movff	_tilt_servo_state,??_updateServoStates	;volatile
 17874  003696  C076  F00A         	movff	_tilt_servo_state+1,??_updateServoStates+1	;volatile
 17875                           
 17876                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 17877                           ; Switch size 1, requested type "space"
 17878                           ; Number of cases is 2, Range of values is 4 to 5
 17879                           ; switch strategies available:
 17880                           ; Name         Instructions Cycles
 17881                           ; simple_byte            7     4 (average)
 17882                           ;	Chosen strategy is simple_byte
 17883  00369A  500A               	movf	??_updateServoStates+1,w,c
 17884  00369C  0A04               	xorlw	4	; case 4
 17885  00369E  B4D8               	btfsc	status,2,c
 17886  0036A0  D004               	goto	i2l9917
 17887  0036A2  0A01               	xorlw	1	; case 5
 17888  0036A4  A4D8               	btfss	status,2,c
 17889  0036A6  0012               	return	
 17890  0036A8  D008               	goto	i2l9919
 17891  0036AA                     i2l9917:
 17892                           
 17893                           ; Switch size 1, requested type "space"
 17894                           ; Number of cases is 2, Range of values is 26 to 236
 17895                           ; switch strategies available:
 17896                           ; Name         Instructions Cycles
 17897                           ; simple_byte            7     4 (average)
 17898                           ;	Chosen strategy is simple_byte
 17899  0036AA  5009               	movf	??_updateServoStates,w,c
 17900  0036AC  0A1A               	xorlw	26	; case 26
 17901  0036AE  B4D8               	btfsc	status,2,c
 17902  0036B0  D7C0               	goto	i2l9285
 17903  0036B2  0AF6               	xorlw	246	; case 236
 17904  0036B4  A4D8               	btfss	status,2,c
 17905  0036B6  0012               	return	
 17906  0036B8  D796               	goto	i2l9273
 17907  0036BA                     i2l9919:
 17908                           
 17909                           ; Switch size 1, requested type "space"
 17910                           ; Number of cases is 1, Range of values is 110 to 110
 17911                           ; switch strategies available:
 17912                           ; Name         Instructions Cycles
 17913                           ; simple_byte            4     3 (average)
 17914                           ;	Chosen strategy is simple_byte
 17915  0036BA  5009               	movf	??_updateServoStates,w,c
 17916  0036BC  0A6E               	xorlw	110	; case 110
 17917  0036BE  A4D8               	btfss	status,2,c
 17918  0036C0  0012               	return	
 17919  0036C2  D7A4               	goto	i2l9279
 17920  0036C4                     __end_of_updateServoStates:
 17921                           	opt stack 0
 17922                           pclatu	equ	0xFFB
 17923                           pclath	equ	0xFFA
 17924                           tblptru	equ	0xFF8
 17925                           tblptrh	equ	0xFF7
 17926                           tblptrl	equ	0xFF6
 17927                           tablat	equ	0xFF5
 17928                           prodh	equ	0xFF4
 17929                           prodl	equ	0xFF3
 17930                           intcon	equ	0xFF2
 17931                           intcon2	equ	0xFF1
 17932                           intcon3	equ	0xFF0
 17933                           indf0	equ	0xFEF
 17934                           postinc0	equ	0xFEE
 17935                           fsr0h	equ	0xFEA
 17936                           fsr0l	equ	0xFE9
 17937                           wreg	equ	0xFE8
 17938                           postdec1	equ	0xFE5
 17939                           fsr1h	equ	0xFE2
 17940                           fsr1l	equ	0xFE1
 17941                           indf2	equ	0xFDF
 17942                           postinc2	equ	0xFDE
 17943                           postdec2	equ	0xFDD
 17944                           fsr2h	equ	0xFDA
 17945                           fsr2l	equ	0xFD9
 17946                           status	equ	0xFD8
 17947                           
 17948 ;; *************** function i2_updateServoPosition *****************
 17949 ;; Defined at:
 17950 ;;		line 488 in file "sort.c"
 17951 ;; Parameters:    Size  Location     Type
 17952 ;;  time_us         2    0[COMRAM] int 
 17953 ;;  timer           2    2[COMRAM] int 
 17954 ;; Auto vars:     Size  Location     Type
 17955 ;;  updateServoP    2    6[COMRAM] unsigned int 
 17956 ;; Return value:  Size  Location     Type
 17957 ;;                  1    wreg      void 
 17958 ;; Registers used:
 17959 ;;		wreg, status,2, status,0
 17960 ;; Tracked objects:
 17961 ;;		On entry : 0/0
 17962 ;;		On exit  : 0/0
 17963 ;;		Unchanged: 0/0
 17964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17965 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17966 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17967 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17968 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17969 ;;Total ram usage:        8 bytes
 17970 ;; Hardware stack levels used:    1
 17971 ;; This function calls:
 17972 ;;		Nothing
 17973 ;; This function is called by:
 17974 ;;		_updateServoStates
 17975 ;; This function uses a non-reentrant model
 17976 ;;
 17977                           
 17978                           	psect	text61
 17979  004814                     __ptext61:
 17980                           	opt stack 0
 17981  004814                     i2_updateServoPosition:
 17982                           	opt stack 22
 17983                           
 17984                           ;sort.c: 489: unsigned int my_time = 65535 - time_us;
 17985                           
 17986                           ;incstack = 0
 17987  004814  C001  F005         	movff	i2updateServoPosition@time_us,??i2_updateServoPosition
 17988  004818  C002  F006         	movff	i2updateServoPosition@time_us+1,??i2_updateServoPosition+1
 17989  00481C  1E05               	comf	??i2_updateServoPosition,f,c
 17990  00481E  1E06               	comf	??i2_updateServoPosition+1,f,c
 17991  004820  4A05               	infsnz	??i2_updateServoPosition,f,c
 17992  004822  2A06               	incf	??i2_updateServoPosition+1,f,c
 17993  004824  0EFF               	movlw	255
 17994  004826  2405               	addwf	??i2_updateServoPosition,w,c
 17995  004828  6E07               	movwf	i2updateServoPosition@my_time,c
 17996  00482A  0EFF               	movlw	255
 17997  00482C  2006               	addwfc	??i2_updateServoPosition+1,w,c
 17998  00482E  6E08               	movwf	i2updateServoPosition@my_time+1,c
 17999                           
 18000                           ;sort.c: 490: switch(timer){
 18001  004830  D019               	goto	i2l8457
 18002  004832                     i2l8451:
 18003                           
 18004                           ;sort.c: 492: servoTimes[0] = my_time >> 8;
 18005  004832  5008               	movf	i2updateServoPosition@my_time+1,w,c
 18006  004834  0100               	movlb	0	; () banked
 18007  004836  6FDA               	movwf	_servoTimes& (0+255),b
 18008  004838  6BDB               	clrf	(_servoTimes+1)& (0+255),b
 18009                           
 18010                           ;sort.c: 493: servoTimes[1] = my_time & 0xFF;
 18011  00483A  5007               	movf	i2updateServoPosition@my_time,w,c
 18012  00483C  0100               	movlb	0	; () banked
 18013  00483E  6FDC               	movwf	(_servoTimes+2)& (0+255),b
 18014  004840  6BDD               	clrf	(_servoTimes+3)& (0+255),b
 18015                           
 18016                           ; BSR set to: 0
 18017                           ;sort.c: 495: pan_servo_state = time_us;
 18018  004842  C001  F06F         	movff	i2updateServoPosition@time_us,_pan_servo_state	;volatile
 18019  004846  C002  F070         	movff	i2updateServoPosition@time_us+1,_pan_servo_state+1	;volatile
 18020  00484A                     i2l861:
 18021                           
 18022                           ;sort.c: 497: servoTimes[2] = my_time >> 8;
 18023  00484A  5008               	movf	i2updateServoPosition@my_time+1,w,c
 18024  00484C  0100               	movlb	0	; () banked
 18025  00484E  6FDE               	movwf	(_servoTimes+4)& (0+255),b
 18026  004850  6BDF               	clrf	(_servoTimes+5)& (0+255),b
 18027                           
 18028                           ;sort.c: 498: servoTimes[3] = my_time & 0xFF;
 18029  004852  5007               	movf	i2updateServoPosition@my_time,w,c
 18030  004854  0100               	movlb	0	; () banked
 18031  004856  6FE0               	movwf	(_servoTimes+6)& (0+255),b
 18032  004858  6BE1               	clrf	(_servoTimes+7)& (0+255),b
 18033                           
 18034                           ; BSR set to: 0
 18035                           ;sort.c: 500: tilt_servo_state = time_us;
 18036  00485A  C001  F075         	movff	i2updateServoPosition@time_us,_tilt_servo_state	;volatile
 18037  00485E  C002  F076         	movff	i2updateServoPosition@time_us+1,_tilt_servo_state+1	;volatile
 18038                           
 18039                           ;sort.c: 501: }
 18040  004862  0012               	return	
 18041  004864                     i2l8457:
 18042  004864  C003  F005         	movff	i2updateServoPosition@timer,??i2_updateServoPosition
 18043  004868  C004  F006         	movff	i2updateServoPosition@timer+1,??i2_updateServoPosition+1
 18044                           
 18045                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 18046                           ; Switch size 1, requested type "space"
 18047                           ; Number of cases is 1, Range of values is 0 to 0
 18048                           ; switch strategies available:
 18049                           ; Name         Instructions Cycles
 18050                           ; simple_byte            4     3 (average)
 18051                           ;	Chosen strategy is simple_byte
 18052  00486C  5006               	movf	??i2_updateServoPosition+1,w,c
 18053  00486E  0A00               	xorlw	0	; case 0
 18054  004870  A4D8               	btfss	status,2,c
 18055  004872  0012               	return	
 18056                           
 18057                           ; Switch size 1, requested type "space"
 18058                           ; Number of cases is 2, Range of values is 1 to 3
 18059                           ; switch strategies available:
 18060                           ; Name         Instructions Cycles
 18061                           ; simple_byte            7     4 (average)
 18062                           ;	Chosen strategy is simple_byte
 18063  004874  5005               	movf	??i2_updateServoPosition,w,c
 18064  004876  0A01               	xorlw	1	; case 1
 18065  004878  B4D8               	btfsc	status,2,c
 18066  00487A  D7DB               	goto	i2l8451
 18067  00487C  0A02               	xorlw	2	; case 3
 18068  00487E  A4D8               	btfss	status,2,c
 18069  004880  0012               	return	
 18070  004882  D7E3               	goto	i2l861
 18071  004884                     __end_ofi2_updateServoPosition:
 18072                           	opt stack 0
 18073                           pclatu	equ	0xFFB
 18074                           pclath	equ	0xFFA
 18075                           tblptru	equ	0xFF8
 18076                           tblptrh	equ	0xFF7
 18077                           tblptrl	equ	0xFF6
 18078                           tablat	equ	0xFF5
 18079                           prodh	equ	0xFF4
 18080                           prodl	equ	0xFF3
 18081                           intcon	equ	0xFF2
 18082                           intcon2	equ	0xFF1
 18083                           intcon3	equ	0xFF0
 18084                           indf0	equ	0xFEF
 18085                           postinc0	equ	0xFEE
 18086                           fsr0h	equ	0xFEA
 18087                           fsr0l	equ	0xFE9
 18088                           wreg	equ	0xFE8
 18089                           postdec1	equ	0xFE5
 18090                           fsr1h	equ	0xFE2
 18091                           fsr1l	equ	0xFE1
 18092                           indf2	equ	0xFDF
 18093                           postinc2	equ	0xFDE
 18094                           postdec2	equ	0xFDD
 18095                           fsr2h	equ	0xFDA
 18096                           fsr2l	equ	0xFD9
 18097                           status	equ	0xFD8
 18098                           
 18099 ;; *************** function _updateMenu *****************
 18100 ;; Defined at:
 18101 ;;		line 213 in file "UI.c"
 18102 ;; Parameters:    Size  Location     Type
 18103 ;;		None
 18104 ;; Auto vars:     Size  Location     Type
 18105 ;;		None
 18106 ;; Return value:  Size  Location     Type
 18107 ;;                  1    wreg      void 
 18108 ;; Registers used:
 18109 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18110 ;; Tracked objects:
 18111 ;;		On entry : 0/0
 18112 ;;		On exit  : 0/0
 18113 ;;		Unchanged: 0/0
 18114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18115 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18116 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18117 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18118 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18119 ;;Total ram usage:        2 bytes
 18120 ;; Hardware stack levels used:    1
 18121 ;; Hardware stack levels required when called:    5
 18122 ;; This function calls:
 18123 ;;		_change_state_to_logs_11
 18124 ;;		_change_state_to_logs_12
 18125 ;;		_change_state_to_logs_22
 18126 ;;		_change_state_to_logs_23
 18127 ;;		_change_state_to_logs_33
 18128 ;;		_change_state_to_logs_34
 18129 ;;		_change_state_to_menu_11
 18130 ;;		_change_state_to_menu_23
 18131 ;;		_dispLogs
 18132 ;;		_inputHandler
 18133 ;;		i2_change_state_to_menu_12
 18134 ;;		i2_change_state_to_menu_22
 18135 ;;		i2_change_state_to_menu_start
 18136 ;; This function is called by:
 18137 ;;		_handler
 18138 ;; This function uses a non-reentrant model
 18139 ;;
 18140                           
 18141                           	psect	text62
 18142  0026F6                     __ptext62:
 18143                           	opt stack 0
 18144  0026F6                     _updateMenu:
 18145                           	opt stack 18
 18146                           
 18147                           ;UI.c: 214: up = 0; down = 0; enter = 0; back = 0;
 18148                           
 18149                           ;incstack = 0
 18150  0026F6  0E00               	movlw	0
 18151  0026F8  6E78               	movwf	_up+1,c
 18152  0026FA  0E00               	movlw	0
 18153  0026FC  6E77               	movwf	_up,c
 18154  0026FE  0E00               	movlw	0
 18155  002700  6E5E               	movwf	_down+1,c
 18156  002702  0E00               	movlw	0
 18157  002704  6E5D               	movwf	_down,c
 18158  002706  0E00               	movlw	0
 18159  002708  6E60               	movwf	_enter+1,c
 18160  00270A  0E00               	movlw	0
 18161  00270C  6E5F               	movwf	_enter,c
 18162  00270E  0E00               	movlw	0
 18163  002710  6E5C               	movwf	_back+1,c
 18164  002712  0E00               	movlw	0
 18165  002714  6E5B               	movwf	_back,c
 18166                           
 18167                           ;UI.c: 215: (INTCONbits.GIE = 0);
 18168  002716  9EF2               	bcf	intcon,7,c	;volatile
 18169                           
 18170                           ;UI.c: 217: if (inputHandler()
 18171                           ;UI.c: 220: ){
 18172  002718  EC87  F019         	call	_inputHandler	;wreg free
 18173  00271C  502A               	movf	?_inputHandler,w,c
 18174  00271E  102B               	iorwf	?_inputHandler+1,w,c
 18175  002720  A4D8               	btfss	status,2,c
 18176  002722  D112               	goto	i2l8989
 18177  002724  D146               	goto	i2l257
 18178  002726                     i2l8841:
 18179                           
 18180                           ;UI.c: 224: change_state_to_menu_11();
 18181  002726  EC6B  F027         	call	_change_state_to_menu_11	;wreg free
 18182                           
 18183                           ;UI.c: 225: break;
 18184  00272A  D143               	goto	i2l257
 18185  00272C                     i2l8843:
 18186                           
 18187                           ;UI.c: 228: if(up){
 18188  00272C  5077               	movf	_up,w,c
 18189  00272E  1078               	iorwf	_up+1,w,c
 18190  002730  B4D8               	btfsc	status,2,c
 18191  002732  D003               	goto	i2l8847
 18192                           
 18193                           ;UI.c: 229: change_state_to_menu_23();
 18194  002734  EC53  F027         	call	_change_state_to_menu_23	;wreg free
 18195                           
 18196                           ;UI.c: 230: }
 18197  002738  D13C               	goto	i2l257
 18198  00273A                     i2l8847:
 18199                           
 18200                           ;UI.c: 231: else if(down){
 18201  00273A  505D               	movf	_down,w,c
 18202  00273C  105E               	iorwf	_down+1,w,c
 18203  00273E  B4D8               	btfsc	status,2,c
 18204  002740  D003               	goto	i2l8851
 18205                           
 18206                           ;UI.c: 232: change_state_to_menu_12();
 18207  002742  EC3B  F027         	call	i2_change_state_to_menu_12	;wreg free
 18208                           
 18209                           ;UI.c: 233: }
 18210  002746  D135               	goto	i2l257
 18211  002748                     i2l8851:
 18212                           
 18213                           ;UI.c: 234: else if(enter){
 18214  002748  505F               	movf	_enter,w,c
 18215  00274A  1060               	iorwf	_enter+1,w,c
 18216  00274C  B4D8               	btfsc	status,2,c
 18217  00274E  D131               	goto	i2l257
 18218                           
 18219                           ;UI.c: 235: change_state_to_menu_start();
 18220  002750  EC7E  F028         	call	i2_change_state_to_menu_start	;wreg free
 18221                           
 18222                           ;UI.c: 236: }
 18223                           ;UI.c: 237: break;
 18224  002754  D12E               	goto	i2l257
 18225  002756                     i2l8855:
 18226                           
 18227                           ;UI.c: 240: if(up){
 18228  002756  5077               	movf	_up,w,c
 18229  002758  1078               	iorwf	_up+1,w,c
 18230  00275A  B4D8               	btfsc	status,2,c
 18231  00275C  D003               	goto	i2l8859
 18232                           
 18233                           ;UI.c: 241: change_state_to_menu_11();
 18234  00275E  EC6B  F027         	call	_change_state_to_menu_11	;wreg free
 18235                           
 18236                           ;UI.c: 242: }
 18237  002762  D127               	goto	i2l257
 18238  002764                     i2l8859:
 18239                           
 18240                           ;UI.c: 243: else if(down){
 18241  002764  505D               	movf	_down,w,c
 18242  002766  105E               	iorwf	_down+1,w,c
 18243  002768  B4D8               	btfsc	status,2,c
 18244  00276A  D011               	goto	i2l8875
 18245                           
 18246                           ;UI.c: 244: change_state_to_menu_23();
 18247  00276C  EC53  F027         	call	_change_state_to_menu_23	;wreg free
 18248                           
 18249                           ;UI.c: 245: }
 18250  002770  D120               	goto	i2l257
 18251  002772                     i2l8867:
 18252                           
 18253                           ;UI.c: 252: if(up){
 18254  002772  5077               	movf	_up,w,c
 18255  002774  1078               	iorwf	_up+1,w,c
 18256  002776  B4D8               	btfsc	status,2,c
 18257  002778  D003               	goto	i2l8871
 18258                           
 18259                           ;UI.c: 253: change_state_to_menu_11();
 18260  00277A  EC6B  F027         	call	_change_state_to_menu_11	;wreg free
 18261                           
 18262                           ;UI.c: 254: }
 18263  00277E  D119               	goto	i2l257
 18264  002780                     i2l8871:
 18265                           
 18266                           ;UI.c: 255: else if(down){
 18267  002780  505D               	movf	_down,w,c
 18268  002782  105E               	iorwf	_down+1,w,c
 18269  002784  B4D8               	btfsc	status,2,c
 18270  002786  D003               	goto	i2l8875
 18271                           
 18272                           ;UI.c: 256: change_state_to_menu_23();
 18273  002788  EC53  F027         	call	_change_state_to_menu_23	;wreg free
 18274                           
 18275                           ;UI.c: 257: }
 18276  00278C  D112               	goto	i2l257
 18277  00278E                     i2l8875:
 18278                           
 18279                           ;UI.c: 258: else if(enter){
 18280  00278E  505F               	movf	_enter,w,c
 18281  002790  1060               	iorwf	_enter+1,w,c
 18282  002792  B4D8               	btfsc	status,2,c
 18283  002794  D10E               	goto	i2l257
 18284                           
 18285                           ;UI.c: 259: machine_state = Sorting_state;
 18286  002796  0E01               	movlw	1
 18287  002798  0100               	movlb	0	; () banked
 18288  00279A  6FFC               	movwf	_machine_state& (0+255),b
 18289                           
 18290                           ; BSR set to: 0
 18291                           ;UI.c: 260: }
 18292                           ;UI.c: 261: break;
 18293                           
 18294                           ; BSR set to: 0
 18295                           
 18296                           ; BSR set to: 0
 18297  00279C  D10A               	goto	i2l257
 18298  00279E                     i2l8879:
 18299                           
 18300                           ;UI.c: 264: if(up){
 18301  00279E  5077               	movf	_up,w,c
 18302  0027A0  1078               	iorwf	_up+1,w,c
 18303  0027A2  B4D8               	btfsc	status,2,c
 18304  0027A4  D003               	goto	i2l8883
 18305                           
 18306                           ;UI.c: 265: change_state_to_menu_22();
 18307  0027A6  EC23  F027         	call	i2_change_state_to_menu_22	;wreg free
 18308                           
 18309                           ;UI.c: 266: }
 18310  0027AA  D103               	goto	i2l257
 18311  0027AC                     i2l8883:
 18312                           
 18313                           ;UI.c: 267: else if(down){
 18314  0027AC  505D               	movf	_down,w,c
 18315  0027AE  105E               	iorwf	_down+1,w,c
 18316  0027B0  B4D8               	btfsc	status,2,c
 18317  0027B2  D003               	goto	i2l8887
 18318                           
 18319                           ;UI.c: 268: change_state_to_menu_11();
 18320  0027B4  EC6B  F027         	call	_change_state_to_menu_11	;wreg free
 18321                           
 18322                           ;UI.c: 269: }
 18323  0027B8  D0FC               	goto	i2l257
 18324  0027BA                     i2l8887:
 18325                           
 18326                           ;UI.c: 270: else if(enter){
 18327  0027BA  505F               	movf	_enter,w,c
 18328  0027BC  1060               	iorwf	_enter+1,w,c
 18329  0027BE  B4D8               	btfsc	status,2,c
 18330  0027C0  D0F8               	goto	i2l257
 18331                           
 18332                           ;UI.c: 271: change_state_to_logs_11();
 18333  0027C2  ECE3  F027         	call	_change_state_to_logs_11	;wreg free
 18334                           
 18335                           ;UI.c: 272: }
 18336                           ;UI.c: 273: break;
 18337  0027C6  D0F5               	goto	i2l257
 18338  0027C8                     i2l8891:
 18339                           
 18340                           ;UI.c: 276: if(up){
 18341  0027C8  5077               	movf	_up,w,c
 18342  0027CA  1078               	iorwf	_up+1,w,c
 18343  0027CC  B4D8               	btfsc	status,2,c
 18344  0027CE  D003               	goto	i2l8895
 18345                           
 18346                           ;UI.c: 277: change_state_to_logs_34();
 18347  0027D0  EC83  F027         	call	_change_state_to_logs_34	;wreg free
 18348                           
 18349                           ;UI.c: 278: }
 18350  0027D4  D0EE               	goto	i2l257
 18351  0027D6                     i2l8895:
 18352                           
 18353                           ;UI.c: 279: else if(down){
 18354  0027D6  505D               	movf	_down,w,c
 18355  0027D8  105E               	iorwf	_down+1,w,c
 18356  0027DA  B4D8               	btfsc	status,2,c
 18357  0027DC  D003               	goto	i2l8899
 18358                           
 18359                           ;UI.c: 280: change_state_to_logs_12();
 18360  0027DE  ECCB  F027         	call	_change_state_to_logs_12	;wreg free
 18361                           
 18362                           ;UI.c: 281: }
 18363  0027E2  D0E7               	goto	i2l257
 18364  0027E4                     i2l8899:
 18365                           
 18366                           ;UI.c: 282: else if(enter){
 18367  0027E4  505F               	movf	_enter,w,c
 18368  0027E6  1060               	iorwf	_enter+1,w,c
 18369  0027E8  B4D8               	btfsc	status,2,c
 18370  0027EA  D007               	goto	i2l8903
 18371                           
 18372                           ;UI.c: 283: dispLogs(1);
 18373  0027EC  0E00               	movlw	0
 18374  0027EE  6E13               	movwf	dispLogs@myLog+1,c
 18375  0027F0  0E01               	movlw	1
 18376  0027F2  6E12               	movwf	dispLogs@myLog,c
 18377  0027F4  ECB8  F028         	call	_dispLogs	;wreg free
 18378                           
 18379                           ;UI.c: 284: }
 18380  0027F8  D0DC               	goto	i2l257
 18381  0027FA                     i2l8903:
 18382                           
 18383                           ;UI.c: 285: else if(back){
 18384  0027FA  505B               	movf	_back,w,c
 18385  0027FC  105C               	iorwf	_back+1,w,c
 18386  0027FE  B4D8               	btfsc	status,2,c
 18387  002800  D0D8               	goto	i2l257
 18388                           
 18389                           ;UI.c: 286: change_state_to_menu_23();
 18390  002802  EC53  F027         	call	_change_state_to_menu_23	;wreg free
 18391                           
 18392                           ;UI.c: 287: }
 18393                           ;UI.c: 288: break;
 18394  002806  D0D5               	goto	i2l257
 18395  002808                     i2l8907:
 18396                           
 18397                           ;UI.c: 291: if(up){
 18398  002808  5077               	movf	_up,w,c
 18399  00280A  1078               	iorwf	_up+1,w,c
 18400  00280C  B4D8               	btfsc	status,2,c
 18401  00280E  D003               	goto	i2l8911
 18402                           
 18403                           ;UI.c: 292: change_state_to_logs_11();
 18404  002810  ECE3  F027         	call	_change_state_to_logs_11	;wreg free
 18405                           
 18406                           ;UI.c: 293: }
 18407  002814  D0CE               	goto	i2l257
 18408  002816                     i2l8911:
 18409                           
 18410                           ;UI.c: 294: else if(down){
 18411  002816  505D               	movf	_down,w,c
 18412  002818  105E               	iorwf	_down+1,w,c
 18413  00281A  B4D8               	btfsc	status,2,c
 18414  00281C  D003               	goto	i2l8915
 18415                           
 18416                           ;UI.c: 295: change_state_to_logs_23();
 18417  00281E  EC12  F028         	call	_change_state_to_logs_23	;wreg free
 18418                           
 18419                           ;UI.c: 296: }
 18420  002822  D0C7               	goto	i2l257
 18421  002824                     i2l8915:
 18422                           
 18423                           ;UI.c: 297: else if(enter){
 18424  002824  505F               	movf	_enter,w,c
 18425  002826  1060               	iorwf	_enter+1,w,c
 18426  002828  B4D8               	btfsc	status,2,c
 18427  00282A  D007               	goto	i2l8919
 18428                           
 18429                           ;UI.c: 298: dispLogs(2);
 18430  00282C  0E00               	movlw	0
 18431  00282E  6E13               	movwf	dispLogs@myLog+1,c
 18432  002830  0E02               	movlw	2
 18433  002832  6E12               	movwf	dispLogs@myLog,c
 18434  002834  ECB8  F028         	call	_dispLogs	;wreg free
 18435                           
 18436                           ;UI.c: 299: }
 18437  002838  D0BC               	goto	i2l257
 18438  00283A                     i2l8919:
 18439                           
 18440                           ;UI.c: 300: else if(back){
 18441  00283A  505B               	movf	_back,w,c
 18442  00283C  105C               	iorwf	_back+1,w,c
 18443  00283E  B4D8               	btfsc	status,2,c
 18444  002840  D0B8               	goto	i2l257
 18445                           
 18446                           ;UI.c: 301: change_state_to_menu_23();
 18447  002842  EC53  F027         	call	_change_state_to_menu_23	;wreg free
 18448                           
 18449                           ;UI.c: 302: }
 18450                           ;UI.c: 303: break;
 18451  002846  D0B5               	goto	i2l257
 18452  002848                     i2l8923:
 18453                           
 18454                           ;UI.c: 306: if(up){
 18455  002848  5077               	movf	_up,w,c
 18456  00284A  1078               	iorwf	_up+1,w,c
 18457  00284C  B4D8               	btfsc	status,2,c
 18458  00284E  D003               	goto	i2l8927
 18459                           
 18460                           ;UI.c: 307: change_state_to_logs_11();
 18461  002850  ECE3  F027         	call	_change_state_to_logs_11	;wreg free
 18462                           
 18463                           ;UI.c: 308: }
 18464  002854  D0AE               	goto	i2l257
 18465  002856                     i2l8927:
 18466                           
 18467                           ;UI.c: 309: else if(down){
 18468  002856  505D               	movf	_down,w,c
 18469  002858  105E               	iorwf	_down+1,w,c
 18470  00285A  B4D8               	btfsc	status,2,c
 18471  00285C  D003               	goto	i2l8931
 18472                           
 18473                           ;UI.c: 310: change_state_to_logs_23();
 18474  00285E  EC12  F028         	call	_change_state_to_logs_23	;wreg free
 18475                           
 18476                           ;UI.c: 311: }
 18477  002862  D0A7               	goto	i2l257
 18478  002864                     i2l8931:
 18479                           
 18480                           ;UI.c: 312: else if(enter){
 18481  002864  505F               	movf	_enter,w,c
 18482  002866  1060               	iorwf	_enter+1,w,c
 18483  002868  B4D8               	btfsc	status,2,c
 18484  00286A  D007               	goto	i2l8935
 18485                           
 18486                           ;UI.c: 313: dispLogs(2);
 18487  00286C  0E00               	movlw	0
 18488  00286E  6E13               	movwf	dispLogs@myLog+1,c
 18489  002870  0E02               	movlw	2
 18490  002872  6E12               	movwf	dispLogs@myLog,c
 18491  002874  ECB8  F028         	call	_dispLogs	;wreg free
 18492                           
 18493                           ;UI.c: 314: }
 18494  002878  D09C               	goto	i2l257
 18495  00287A                     i2l8935:
 18496                           
 18497                           ;UI.c: 315: else if(back){
 18498  00287A  505B               	movf	_back,w,c
 18499  00287C  105C               	iorwf	_back+1,w,c
 18500  00287E  B4D8               	btfsc	status,2,c
 18501  002880  D098               	goto	i2l257
 18502                           
 18503                           ;UI.c: 316: change_state_to_menu_23();
 18504  002882  EC53  F027         	call	_change_state_to_menu_23	;wreg free
 18505                           
 18506                           ;UI.c: 317: }
 18507                           ;UI.c: 318: break;
 18508  002886  D095               	goto	i2l257
 18509  002888                     i2l8939:
 18510                           
 18511                           ;UI.c: 321: if(up){
 18512  002888  5077               	movf	_up,w,c
 18513  00288A  1078               	iorwf	_up+1,w,c
 18514  00288C  B4D8               	btfsc	status,2,c
 18515  00288E  D003               	goto	i2l8943
 18516                           
 18517                           ;UI.c: 322: change_state_to_logs_22();
 18518  002890  ECB3  F027         	call	_change_state_to_logs_22	;wreg free
 18519                           
 18520                           ;UI.c: 323: }
 18521  002894  D08E               	goto	i2l257
 18522  002896                     i2l8943:
 18523                           
 18524                           ;UI.c: 324: else if(down){
 18525  002896  505D               	movf	_down,w,c
 18526  002898  105E               	iorwf	_down+1,w,c
 18527  00289A  B4D8               	btfsc	status,2,c
 18528  00289C  D003               	goto	i2l8947
 18529                           
 18530                           ;UI.c: 325: change_state_to_logs_34();
 18531  00289E  EC83  F027         	call	_change_state_to_logs_34	;wreg free
 18532                           
 18533                           ;UI.c: 326: }
 18534  0028A2  D087               	goto	i2l257
 18535  0028A4                     i2l8947:
 18536                           
 18537                           ;UI.c: 327: else if(enter){
 18538  0028A4  505F               	movf	_enter,w,c
 18539  0028A6  1060               	iorwf	_enter+1,w,c
 18540  0028A8  B4D8               	btfsc	status,2,c
 18541  0028AA  D007               	goto	i2l8951
 18542                           
 18543                           ;UI.c: 328: dispLogs(3);
 18544  0028AC  0E00               	movlw	0
 18545  0028AE  6E13               	movwf	dispLogs@myLog+1,c
 18546  0028B0  0E03               	movlw	3
 18547  0028B2  6E12               	movwf	dispLogs@myLog,c
 18548  0028B4  ECB8  F028         	call	_dispLogs	;wreg free
 18549                           
 18550                           ;UI.c: 329: }
 18551  0028B8  D07C               	goto	i2l257
 18552  0028BA                     i2l8951:
 18553                           
 18554                           ;UI.c: 330: else if(back){
 18555  0028BA  505B               	movf	_back,w,c
 18556  0028BC  105C               	iorwf	_back+1,w,c
 18557  0028BE  B4D8               	btfsc	status,2,c
 18558  0028C0  D078               	goto	i2l257
 18559                           
 18560                           ;UI.c: 331: change_state_to_menu_23();
 18561  0028C2  EC53  F027         	call	_change_state_to_menu_23	;wreg free
 18562                           
 18563                           ;UI.c: 332: }
 18564                           ;UI.c: 333: break;
 18565  0028C6  D075               	goto	i2l257
 18566  0028C8                     i2l8955:
 18567                           
 18568                           ;UI.c: 336: if(up){
 18569  0028C8  5077               	movf	_up,w,c
 18570  0028CA  1078               	iorwf	_up+1,w,c
 18571  0028CC  B4D8               	btfsc	status,2,c
 18572  0028CE  D003               	goto	i2l8959
 18573                           
 18574                           ;UI.c: 337: change_state_to_logs_22();
 18575  0028D0  ECB3  F027         	call	_change_state_to_logs_22	;wreg free
 18576                           
 18577                           ;UI.c: 338: }
 18578  0028D4  D06E               	goto	i2l257
 18579  0028D6                     i2l8959:
 18580                           
 18581                           ;UI.c: 339: else if(down){
 18582  0028D6  505D               	movf	_down,w,c
 18583  0028D8  105E               	iorwf	_down+1,w,c
 18584  0028DA  B4D8               	btfsc	status,2,c
 18585  0028DC  D003               	goto	i2l8963
 18586                           
 18587                           ;UI.c: 340: change_state_to_logs_34();
 18588  0028DE  EC83  F027         	call	_change_state_to_logs_34	;wreg free
 18589                           
 18590                           ;UI.c: 341: }
 18591  0028E2  D067               	goto	i2l257
 18592  0028E4                     i2l8963:
 18593                           
 18594                           ;UI.c: 342: else if(enter){
 18595  0028E4  505F               	movf	_enter,w,c
 18596  0028E6  1060               	iorwf	_enter+1,w,c
 18597  0028E8  B4D8               	btfsc	status,2,c
 18598  0028EA  D007               	goto	i2l8967
 18599                           
 18600                           ;UI.c: 343: dispLogs(3);
 18601  0028EC  0E00               	movlw	0
 18602  0028EE  6E13               	movwf	dispLogs@myLog+1,c
 18603  0028F0  0E03               	movlw	3
 18604  0028F2  6E12               	movwf	dispLogs@myLog,c
 18605  0028F4  ECB8  F028         	call	_dispLogs	;wreg free
 18606                           
 18607                           ;UI.c: 344: }
 18608  0028F8  D05C               	goto	i2l257
 18609  0028FA                     i2l8967:
 18610                           
 18611                           ;UI.c: 345: else if(back){
 18612  0028FA  505B               	movf	_back,w,c
 18613  0028FC  105C               	iorwf	_back+1,w,c
 18614  0028FE  B4D8               	btfsc	status,2,c
 18615  002900  D058               	goto	i2l257
 18616                           
 18617                           ;UI.c: 346: change_state_to_menu_23();
 18618  002902  EC53  F027         	call	_change_state_to_menu_23	;wreg free
 18619                           
 18620                           ;UI.c: 347: }
 18621                           ;UI.c: 348: break;
 18622  002906  D055               	goto	i2l257
 18623  002908                     i2l8971:
 18624                           
 18625                           ;UI.c: 351: if(up){
 18626  002908  5077               	movf	_up,w,c
 18627  00290A  1078               	iorwf	_up+1,w,c
 18628  00290C  B4D8               	btfsc	status,2,c
 18629  00290E  D003               	goto	i2l8975
 18630                           
 18631                           ;UI.c: 352: change_state_to_logs_33();
 18632  002910  EC9B  F027         	call	_change_state_to_logs_33	;wreg free
 18633                           
 18634                           ;UI.c: 353: }
 18635  002914  D04E               	goto	i2l257
 18636  002916                     i2l8975:
 18637                           
 18638                           ;UI.c: 354: else if(down){
 18639  002916  505D               	movf	_down,w,c
 18640  002918  105E               	iorwf	_down+1,w,c
 18641  00291A  B4D8               	btfsc	status,2,c
 18642  00291C  D003               	goto	i2l8979
 18643                           
 18644                           ;UI.c: 355: change_state_to_logs_11();
 18645  00291E  ECE3  F027         	call	_change_state_to_logs_11	;wreg free
 18646                           
 18647                           ;UI.c: 356: }
 18648  002922  D047               	goto	i2l257
 18649  002924                     i2l8979:
 18650                           
 18651                           ;UI.c: 357: else if(enter){
 18652  002924  505F               	movf	_enter,w,c
 18653  002926  1060               	iorwf	_enter+1,w,c
 18654  002928  B4D8               	btfsc	status,2,c
 18655  00292A  D007               	goto	i2l8983
 18656                           
 18657                           ;UI.c: 358: dispLogs(4);
 18658  00292C  0E00               	movlw	0
 18659  00292E  6E13               	movwf	dispLogs@myLog+1,c
 18660  002930  0E04               	movlw	4
 18661  002932  6E12               	movwf	dispLogs@myLog,c
 18662  002934  ECB8  F028         	call	_dispLogs	;wreg free
 18663                           
 18664                           ;UI.c: 359: }
 18665  002938  D03C               	goto	i2l257
 18666  00293A                     i2l8983:
 18667                           
 18668                           ;UI.c: 360: else if(back){
 18669  00293A  505B               	movf	_back,w,c
 18670  00293C  105C               	iorwf	_back+1,w,c
 18671  00293E  B4D8               	btfsc	status,2,c
 18672  002940  D038               	goto	i2l257
 18673                           
 18674                           ;UI.c: 361: change_state_to_menu_23();
 18675  002942  EC53  F027         	call	_change_state_to_menu_23	;wreg free
 18676                           
 18677                           ;UI.c: 367: }
 18678                           
 18679                           ;UI.c: 366: break;
 18680                           
 18681                           ;UI.c: 365: default:
 18682                           
 18683                           ;UI.c: 362: }
 18684                           ;UI.c: 363: break;
 18685  002946  D035               	goto	i2l257
 18686  002948                     i2l8989:
 18687  002948  C0EC  F043         	movff	_cur_state,??_updateMenu
 18688  00294C  C0ED  F044         	movff	_cur_state+1,??_updateMenu+1
 18689                           
 18690                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
 18691                           ; Switch size 1, requested type "space"
 18692                           ; Number of cases is 3, Range of values is 0 to 4
 18693                           ; switch strategies available:
 18694                           ; Name         Instructions Cycles
 18695                           ; simple_byte           10     6 (average)
 18696                           ;	Chosen strategy is simple_byte
 18697  002950  5044               	movf	??_updateMenu+1,w,c
 18698  002952  0A00               	xorlw	0	; case 0
 18699  002954  B4D8               	btfsc	status,2,c
 18700  002956  D007               	goto	i2l9923
 18701  002958  0A03               	xorlw	3	; case 3
 18702  00295A  B4D8               	btfsc	status,2,c
 18703  00295C  D015               	goto	i2l9925
 18704  00295E  0A07               	xorlw	7	; case 4
 18705  002960  B4D8               	btfsc	status,2,c
 18706  002962  D020               	goto	i2l9927
 18707  002964  D026               	goto	i2l257
 18708  002966                     i2l9923:
 18709                           
 18710                           ; Switch size 1, requested type "space"
 18711                           ; Number of cases is 5, Range of values is 0 to 23
 18712                           ; switch strategies available:
 18713                           ; Name         Instructions Cycles
 18714                           ; simple_byte           16     9 (average)
 18715                           ;	Chosen strategy is simple_byte
 18716  002966  5043               	movf	??_updateMenu,w,c
 18717  002968  0A00               	xorlw	0	; case 0
 18718  00296A  B4D8               	btfsc	status,2,c
 18719  00296C  D6DC               	goto	i2l8841
 18720  00296E  0A0B               	xorlw	11	; case 11
 18721  002970  B4D8               	btfsc	status,2,c
 18722  002972  D6DC               	goto	i2l8843
 18723  002974  0A07               	xorlw	7	; case 12
 18724  002976  B4D8               	btfsc	status,2,c
 18725  002978  D6EE               	goto	i2l8855
 18726  00297A  0A1A               	xorlw	26	; case 22
 18727  00297C  B4D8               	btfsc	status,2,c
 18728  00297E  D6F9               	goto	i2l8867
 18729  002980  0A01               	xorlw	1	; case 23
 18730  002982  B4D8               	btfsc	status,2,c
 18731  002984  D70C               	goto	i2l8879
 18732  002986  D015               	goto	i2l257
 18733  002988                     i2l9925:
 18734                           
 18735                           ; Switch size 1, requested type "space"
 18736                           ; Number of cases is 4, Range of values is 243 to 255
 18737                           ; switch strategies available:
 18738                           ; Name         Instructions Cycles
 18739                           ; simple_byte           13     7 (average)
 18740                           ;	Chosen strategy is simple_byte
 18741  002988  5043               	movf	??_updateMenu,w,c
 18742  00298A  0AF3               	xorlw	243	; case 243
 18743  00298C  B4D8               	btfsc	status,2,c
 18744  00298E  D71C               	goto	i2l8891
 18745  002990  0A07               	xorlw	7	; case 244
 18746  002992  B4D8               	btfsc	status,2,c
 18747  002994  D739               	goto	i2l8907
 18748  002996  0A0A               	xorlw	10	; case 254
 18749  002998  B4D8               	btfsc	status,2,c
 18750  00299A  D756               	goto	i2l8923
 18751  00299C  0A01               	xorlw	1	; case 255
 18752  00299E  B4D8               	btfsc	status,2,c
 18753  0029A0  D773               	goto	i2l8939
 18754  0029A2  D007               	goto	i2l257
 18755  0029A4                     i2l9927:
 18756                           
 18757                           ; Switch size 1, requested type "space"
 18758                           ; Number of cases is 2, Range of values is 9 to 10
 18759                           ; switch strategies available:
 18760                           ; Name         Instructions Cycles
 18761                           ; simple_byte            7     4 (average)
 18762                           ;	Chosen strategy is simple_byte
 18763  0029A4  5043               	movf	??_updateMenu,w,c
 18764  0029A6  0A09               	xorlw	9	; case 9
 18765  0029A8  B4D8               	btfsc	status,2,c
 18766  0029AA  D78E               	goto	i2l8955
 18767  0029AC  0A03               	xorlw	3	; case 10
 18768  0029AE  B4D8               	btfsc	status,2,c
 18769  0029B0  D7AB               	goto	i2l8971
 18770  0029B2                     i2l257:
 18771                           
 18772                           ;UI.c: 368: }
 18773                           ;UI.c: 369: (INTCONbits.GIE = 1);
 18774  0029B2  8EF2               	bsf	intcon,7,c	;volatile
 18775  0029B4  0012               	return		;funcret
 18776  0029B6                     __end_of_updateMenu:
 18777                           	opt stack 0
 18778                           pclatu	equ	0xFFB
 18779                           pclath	equ	0xFFA
 18780                           tblptru	equ	0xFF8
 18781                           tblptrh	equ	0xFF7
 18782                           tblptrl	equ	0xFF6
 18783                           tablat	equ	0xFF5
 18784                           prodh	equ	0xFF4
 18785                           prodl	equ	0xFF3
 18786                           intcon	equ	0xFF2
 18787                           intcon2	equ	0xFF1
 18788                           intcon3	equ	0xFF0
 18789                           indf0	equ	0xFEF
 18790                           postinc0	equ	0xFEE
 18791                           fsr0h	equ	0xFEA
 18792                           fsr0l	equ	0xFE9
 18793                           wreg	equ	0xFE8
 18794                           postdec1	equ	0xFE5
 18795                           fsr1h	equ	0xFE2
 18796                           fsr1l	equ	0xFE1
 18797                           indf2	equ	0xFDF
 18798                           postinc2	equ	0xFDE
 18799                           postdec2	equ	0xFDD
 18800                           fsr2h	equ	0xFDA
 18801                           fsr2l	equ	0xFD9
 18802                           status	equ	0xFD8
 18803                           
 18804 ;; *************** function i2_change_state_to_menu_start *****************
 18805 ;; Defined at:
 18806 ;;		line 474 in file "UI.c"
 18807 ;; Parameters:    Size  Location     Type
 18808 ;;		None
 18809 ;; Auto vars:     Size  Location     Type
 18810 ;;		None
 18811 ;; Return value:  Size  Location     Type
 18812 ;;                  1    wreg      void 
 18813 ;; Registers used:
 18814 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18815 ;; Tracked objects:
 18816 ;;		On entry : 0/0
 18817 ;;		On exit  : 0/0
 18818 ;;		Unchanged: 0/0
 18819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18820 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18821 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18822 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18823 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18824 ;;Total ram usage:        0 bytes
 18825 ;; Hardware stack levels used:    1
 18826 ;; Hardware stack levels required when called:    4
 18827 ;; This function calls:
 18828 ;;		i2_lcdInst
 18829 ;;		i2_printRTC
 18830 ;;		i2_printf
 18831 ;; This function is called by:
 18832 ;;		_updateMenu
 18833 ;; This function uses a non-reentrant model
 18834 ;;
 18835                           
 18836                           	psect	text63
 18837  0050FC                     __ptext63:
 18838                           	opt stack 0
 18839  0050FC                     i2_change_state_to_menu_start:
 18840                           	opt stack 18
 18841                           
 18842                           ;UI.c: 475: cur_state = 0;
 18843                           
 18844                           ;incstack = 0
 18845  0050FC  0E00               	movlw	0
 18846  0050FE  0100               	movlb	0	; () banked
 18847  005100  6FED               	movwf	(_cur_state+1)& (0+255),b
 18848  005102  0E00               	movlw	0
 18849  005104  6FEC               	movwf	_cur_state& (0+255),b
 18850                           
 18851                           ; BSR set to: 0
 18852                           ;UI.c: 477: lcdInst(0b10000000);;
 18853  005106  0E80               	movlw	128
 18854  005108  EC56  F029         	call	i2_lcdInst
 18855                           
 18856                           ;UI.c: 478: printRTC();
 18857  00510C  EC53  F017         	call	i2_printRTC	;wreg free
 18858                           
 18859                           ;UI.c: 479: lcdInst(0b11000000);;
 18860  005110  0EC0               	movlw	192
 18861  005112  EC56  F029         	call	i2_lcdInst
 18862                           
 18863                           ;UI.c: 480: printf("PUSH TO CONTINUE");
 18864  005116  0EF7               	movlw	low STR_30
 18865  005118  6E0D               	movwf	i2printf@f,c
 18866  00511A  0EFD               	movlw	high STR_30
 18867  00511C  6E0E               	movwf	i2printf@f+1,c
 18868  00511E  ECE0  F00E         	call	i2_printf	;wreg free
 18869  005122  0012               	return		;funcret
 18870  005124                     __end_ofi2_change_state_to_menu_start:
 18871                           	opt stack 0
 18872                           pclatu	equ	0xFFB
 18873                           pclath	equ	0xFFA
 18874                           tblptru	equ	0xFF8
 18875                           tblptrh	equ	0xFF7
 18876                           tblptrl	equ	0xFF6
 18877                           tablat	equ	0xFF5
 18878                           prodh	equ	0xFF4
 18879                           prodl	equ	0xFF3
 18880                           intcon	equ	0xFF2
 18881                           intcon2	equ	0xFF1
 18882                           intcon3	equ	0xFF0
 18883                           indf0	equ	0xFEF
 18884                           postinc0	equ	0xFEE
 18885                           fsr0h	equ	0xFEA
 18886                           fsr0l	equ	0xFE9
 18887                           wreg	equ	0xFE8
 18888                           postdec1	equ	0xFE5
 18889                           fsr1h	equ	0xFE2
 18890                           fsr1l	equ	0xFE1
 18891                           indf2	equ	0xFDF
 18892                           postinc2	equ	0xFDE
 18893                           postdec2	equ	0xFDD
 18894                           fsr2h	equ	0xFDA
 18895                           fsr2l	equ	0xFD9
 18896                           status	equ	0xFD8
 18897                           
 18898 ;; *************** function i2_printRTC *****************
 18899 ;; Defined at:
 18900 ;;		line 63 in file "RTC.c"
 18901 ;; Parameters:    Size  Location     Type
 18902 ;;		None
 18903 ;; Auto vars:     Size  Location     Type
 18904 ;;  printRTC       14   44[COMRAM] int [7]
 18905 ;;  printRTC        4   60[COMRAM] unsigned char [4]
 18906 ;;  printRTC        2   64[COMRAM] int 
 18907 ;;  printRTC        2   58[COMRAM] int 
 18908 ;; Return value:  Size  Location     Type
 18909 ;;                  1    wreg      void 
 18910 ;; Registers used:
 18911 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18912 ;; Tracked objects:
 18913 ;;		On entry : 0/0
 18914 ;;		On exit  : 0/0
 18915 ;;		Unchanged: 0/0
 18916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18917 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18918 ;;      Locals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18919 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18920 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18921 ;;Total ram usage:       25 bytes
 18922 ;; Hardware stack levels used:    1
 18923 ;; Hardware stack levels required when called:    3
 18924 ;; This function calls:
 18925 ;;		i2_getRTC
 18926 ;;		i2_lcdInst
 18927 ;;		i2_printf
 18928 ;;		i2_strcpy
 18929 ;; This function is called by:
 18930 ;;		i2_change_state_to_menu_start
 18931 ;; This function uses a non-reentrant model
 18932 ;;
 18933                           
 18934                           	psect	text64
 18935  002EA6                     __ptext64:
 18936                           	opt stack 0
 18937  002EA6                     i2_printRTC:
 18938                           	opt stack 18
 18939                           
 18940                           ;RTC.c: 64: getRTC();
 18941                           
 18942                           ;incstack = 0
 18943  002EA6  ECD1  F023         	call	i2_getRTC	;wreg free
 18944                           
 18945                           ;RTC.c: 65: char month[] = "MMM";
 18946  002EAA  C145  F03D         	movff	printRTC@F3226,i2printRTC@month
 18947  002EAE  C146  F03E         	movff	printRTC@F3226+1,i2printRTC@month+1
 18948  002EB2  C147  F03F         	movff	printRTC@F3226+2,i2printRTC@month+2
 18949  002EB6  C148  F040         	movff	printRTC@F3226+3,i2printRTC@month+3
 18950                           
 18951                           ;RTC.c: 66: int INT_time[7];
 18952                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
 18953  002EBA  0E00               	movlw	0
 18954  002EBC  6E42               	movwf	i2printRTC@i+1,c
 18955  002EBE  0E00               	movlw	0
 18956  002EC0  6E41               	movwf	i2printRTC@i,c
 18957  002EC2  BE42               	btfsc	i2printRTC@i+1,7,c
 18958  002EC4  D006               	goto	i2l6947
 18959  002EC6  5042               	movf	i2printRTC@i+1,w,c
 18960  002EC8  E135               	bnz	i2l606
 18961  002ECA  0E07               	movlw	7
 18962  002ECC  5C41               	subwf	i2printRTC@i,w,c
 18963  002ECE  B0D8               	btfsc	status,0,c
 18964  002ED0  D031               	goto	i2l606
 18965  002ED2                     i2l6947:
 18966                           
 18967                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 18968  002ED2  0E1C               	movlw	low _time
 18969  002ED4  2441               	addwf	i2printRTC@i,w,c
 18970  002ED6  6ED9               	movwf	fsr2l,c
 18971  002ED8  0E01               	movlw	high _time
 18972  002EDA  2042               	addwfc	i2printRTC@i+1,w,c
 18973  002EDC  6EDA               	movwf	fsr2h,c
 18974  002EDE  50DF               	movf	indf2,w,c
 18975  002EE0  6E2A               	movwf	??i2_printRTC& (0+255),c
 18976  002EE2  3A2A               	swapf	??i2_printRTC,f,c
 18977  002EE4  0E0F               	movlw	15
 18978  002EE6  162A               	andwf	??i2_printRTC,f,c
 18979  002EE8  0E0F               	movlw	15
 18980  002EEA  162A               	andwf	??i2_printRTC,f,c
 18981  002EEC  502A               	movf	??i2_printRTC,w,c
 18982  002EEE  0D0A               	mullw	10
 18983  002EF0  0E1C               	movlw	low _time
 18984  002EF2  2441               	addwf	i2printRTC@i,w,c
 18985  002EF4  6ED9               	movwf	fsr2l,c
 18986  002EF6  0E01               	movlw	high _time
 18987  002EF8  2042               	addwfc	i2printRTC@i+1,w,c
 18988  002EFA  6EDA               	movwf	fsr2h,c
 18989  002EFC  50DF               	movf	indf2,w,c
 18990  002EFE  0B0F               	andlw	15
 18991  002F00  6E2B               	movwf	(??i2_printRTC+1)& (0+255),c
 18992  002F02  6A2C               	clrf	(??i2_printRTC+2)& (0+255),c
 18993  002F04  50F3               	movf	prodl,w,c
 18994  002F06  262B               	addwf	??i2_printRTC+1,f,c
 18995  002F08  50F4               	movf	prodh,w,c
 18996  002F0A  222C               	addwfc	??i2_printRTC+2,f,c
 18997  002F0C  90D8               	bcf	status,0,c
 18998  002F0E  3441               	rlcf	i2printRTC@i,w,c
 18999  002F10  6ED9               	movwf	fsr2l,c
 19000  002F12  3442               	rlcf	i2printRTC@i+1,w,c
 19001  002F14  6EDA               	movwf	fsr2h,c
 19002  002F16  0E2D               	movlw	low i2printRTC@INT_time
 19003  002F18  26D9               	addwf	fsr2l,f,c
 19004  002F1A  0E00               	movlw	high i2printRTC@INT_time
 19005  002F1C  22DA               	addwfc	fsr2h,f,c
 19006  002F1E  C02B  FFDE         	movff	??i2_printRTC+1,postinc2
 19007  002F22  C02C  FFDD         	movff	??i2_printRTC+2,postdec2
 19008  002F26  4A41               	infsnz	i2printRTC@i,f,c
 19009  002F28  2A42               	incf	i2printRTC@i+1,f,c
 19010  002F2A  BE42               	btfsc	i2printRTC@i+1,7,c
 19011  002F2C  D7D2               	goto	i2l6947
 19012  002F2E  5042               	movf	i2printRTC@i+1,w,c
 19013  002F30  E101               	bnz	i2u539_40
 19014  002F32  D7CB               	goto	L13
 19015  002F34                     i2u539_40:
 19016  002F34                     i2l606:
 19017                           
 19018                           ;RTC.c: 69: }
 19019                           ;RTC.c: 70: int RTC_month = INT_time[5];
 19020  002F34  C037  F03B         	movff	i2printRTC@INT_time+10,i2printRTC@RTC_month
 19021  002F38  C038  F03C         	movff	i2printRTC@INT_time+11,i2printRTC@RTC_month+1
 19022                           
 19023                           ;RTC.c: 71: switch(RTC_month){
 19024  002F3C  D084               	goto	i2l6979
 19025  002F3E                     i2l6953:
 19026                           
 19027                           ;RTC.c: 73: strcpy(month, "JAN");
 19028  002F3E  0E3D               	movlw	low i2printRTC@month
 19029  002F40  6E01               	movwf	i2strcpy@to,c
 19030  002F42  0E00               	movlw	high i2printRTC@month
 19031  002F44  6E02               	movwf	i2strcpy@to+1,c
 19032  002F46  0EDB               	movlw	low STR_8
 19033  002F48  6E03               	movwf	i2strcpy@from,c
 19034  002F4A  0EFF               	movlw	high STR_8
 19035  002F4C  6E04               	movwf	i2strcpy@from+1,c
 19036  002F4E  ECF2  F026         	call	i2_strcpy	;wreg free
 19037                           
 19038                           ;RTC.c: 74: break;
 19039  002F52  D0A6               	goto	i2l6981
 19040  002F54                     i2l6955:
 19041                           
 19042                           ;RTC.c: 76: strcpy(month, "FEB");
 19043  002F54  0E3D               	movlw	low i2printRTC@month
 19044  002F56  6E01               	movwf	i2strcpy@to,c
 19045  002F58  0E00               	movlw	high i2printRTC@month
 19046  002F5A  6E02               	movwf	i2strcpy@to+1,c
 19047  002F5C  0ECB               	movlw	low STR_9
 19048  002F5E  6E03               	movwf	i2strcpy@from,c
 19049  002F60  0EFF               	movlw	high STR_9
 19050  002F62  6E04               	movwf	i2strcpy@from+1,c
 19051  002F64  ECF2  F026         	call	i2_strcpy	;wreg free
 19052                           
 19053                           ;RTC.c: 77: break;
 19054  002F68  D09B               	goto	i2l6981
 19055  002F6A                     i2l6957:
 19056                           
 19057                           ;RTC.c: 79: strcpy(month, "MAR");
 19058  002F6A  0E3D               	movlw	low i2printRTC@month
 19059  002F6C  6E01               	movwf	i2strcpy@to,c
 19060  002F6E  0E00               	movlw	high i2printRTC@month
 19061  002F70  6E02               	movwf	i2strcpy@to+1,c
 19062  002F72  0EE7               	movlw	low STR_10
 19063  002F74  6E03               	movwf	i2strcpy@from,c
 19064  002F76  0EFF               	movlw	high STR_10
 19065  002F78  6E04               	movwf	i2strcpy@from+1,c
 19066  002F7A  ECF2  F026         	call	i2_strcpy	;wreg free
 19067                           
 19068                           ;RTC.c: 80: break;
 19069  002F7E  D090               	goto	i2l6981
 19070  002F80                     i2l6959:
 19071                           
 19072                           ;RTC.c: 82: strcpy(month, "APR");
 19073  002F80  0E3D               	movlw	low i2printRTC@month
 19074  002F82  6E01               	movwf	i2strcpy@to,c
 19075  002F84  0E00               	movlw	high i2printRTC@month
 19076  002F86  6E02               	movwf	i2strcpy@to+1,c
 19077  002F88  0EEB               	movlw	low STR_11
 19078  002F8A  6E03               	movwf	i2strcpy@from,c
 19079  002F8C  0EFF               	movlw	high STR_11
 19080  002F8E  6E04               	movwf	i2strcpy@from+1,c
 19081  002F90  ECF2  F026         	call	i2_strcpy	;wreg free
 19082                           
 19083                           ;RTC.c: 83: break;
 19084  002F94  D085               	goto	i2l6981
 19085  002F96                     i2l6961:
 19086                           
 19087                           ;RTC.c: 85: strcpy(month, "MAY");
 19088  002F96  0E3D               	movlw	low i2printRTC@month
 19089  002F98  6E01               	movwf	i2strcpy@to,c
 19090  002F9A  0E00               	movlw	high i2printRTC@month
 19091  002F9C  6E02               	movwf	i2strcpy@to+1,c
 19092  002F9E  0EFB               	movlw	low STR_12
 19093  002FA0  6E03               	movwf	i2strcpy@from,c
 19094  002FA2  0EFF               	movlw	high STR_12
 19095  002FA4  6E04               	movwf	i2strcpy@from+1,c
 19096  002FA6  ECF2  F026         	call	i2_strcpy	;wreg free
 19097                           
 19098                           ;RTC.c: 86: break;
 19099  002FAA  D07A               	goto	i2l6981
 19100  002FAC                     i2l6963:
 19101                           
 19102                           ;RTC.c: 88: strcpy(month, "JUN");
 19103  002FAC  0E3D               	movlw	low i2printRTC@month
 19104  002FAE  6E01               	movwf	i2strcpy@to,c
 19105  002FB0  0E00               	movlw	high i2printRTC@month
 19106  002FB2  6E02               	movwf	i2strcpy@to+1,c
 19107  002FB4  0EDF               	movlw	low STR_13
 19108  002FB6  6E03               	movwf	i2strcpy@from,c
 19109  002FB8  0EFF               	movlw	high STR_13
 19110  002FBA  6E04               	movwf	i2strcpy@from+1,c
 19111  002FBC  ECF2  F026         	call	i2_strcpy	;wreg free
 19112                           
 19113                           ;RTC.c: 89: break;
 19114  002FC0  D06F               	goto	i2l6981
 19115  002FC2                     i2l6965:
 19116                           
 19117                           ;RTC.c: 91: strcpy(month, "JUL");
 19118  002FC2  0E3D               	movlw	low i2printRTC@month
 19119  002FC4  6E01               	movwf	i2strcpy@to,c
 19120  002FC6  0E00               	movlw	high i2printRTC@month
 19121  002FC8  6E02               	movwf	i2strcpy@to+1,c
 19122  002FCA  0ED7               	movlw	low STR_14
 19123  002FCC  6E03               	movwf	i2strcpy@from,c
 19124  002FCE  0EFF               	movlw	high STR_14
 19125  002FD0  6E04               	movwf	i2strcpy@from+1,c
 19126  002FD2  ECF2  F026         	call	i2_strcpy	;wreg free
 19127                           
 19128                           ;RTC.c: 92: break;
 19129  002FD6  D064               	goto	i2l6981
 19130  002FD8                     i2l6967:
 19131                           
 19132                           ;RTC.c: 94: strcpy(month, "AUG");
 19133  002FD8  0E3D               	movlw	low i2printRTC@month
 19134  002FDA  6E01               	movwf	i2strcpy@to,c
 19135  002FDC  0E00               	movlw	high i2printRTC@month
 19136  002FDE  6E02               	movwf	i2strcpy@to+1,c
 19137  002FE0  0ED3               	movlw	low STR_15
 19138  002FE2  6E03               	movwf	i2strcpy@from,c
 19139  002FE4  0EFF               	movlw	high STR_15
 19140  002FE6  6E04               	movwf	i2strcpy@from+1,c
 19141  002FE8  ECF2  F026         	call	i2_strcpy	;wreg free
 19142                           
 19143                           ;RTC.c: 95: break;
 19144  002FEC  D059               	goto	i2l6981
 19145  002FEE                     i2l6969:
 19146                           
 19147                           ;RTC.c: 97: strcpy(month, "SEP");
 19148  002FEE  0E3D               	movlw	low i2printRTC@month
 19149  002FF0  6E01               	movwf	i2strcpy@to,c
 19150  002FF2  0E00               	movlw	high i2printRTC@month
 19151  002FF4  6E02               	movwf	i2strcpy@to+1,c
 19152  002FF6  0EE3               	movlw	low STR_16
 19153  002FF8  6E03               	movwf	i2strcpy@from,c
 19154  002FFA  0EFF               	movlw	high STR_16
 19155  002FFC  6E04               	movwf	i2strcpy@from+1,c
 19156  002FFE  ECF2  F026         	call	i2_strcpy	;wreg free
 19157                           
 19158                           ;RTC.c: 98: break;
 19159  003002  D04E               	goto	i2l6981
 19160  003004                     i2l6971:
 19161                           
 19162                           ;RTC.c: 100: strcpy(month, "OCT");
 19163  003004  0E3D               	movlw	low i2printRTC@month
 19164  003006  6E01               	movwf	i2strcpy@to,c
 19165  003008  0E00               	movlw	high i2printRTC@month
 19166  00300A  6E02               	movwf	i2strcpy@to+1,c
 19167  00300C  0EF3               	movlw	low STR_17
 19168  00300E  6E03               	movwf	i2strcpy@from,c
 19169  003010  0EFF               	movlw	high STR_17
 19170  003012  6E04               	movwf	i2strcpy@from+1,c
 19171  003014  ECF2  F026         	call	i2_strcpy	;wreg free
 19172                           
 19173                           ;RTC.c: 101: break;
 19174  003018  D043               	goto	i2l6981
 19175  00301A                     i2l6973:
 19176                           
 19177                           ;RTC.c: 103: strcpy(month, "NOV");
 19178  00301A  0E3D               	movlw	low i2printRTC@month
 19179  00301C  6E01               	movwf	i2strcpy@to,c
 19180  00301E  0E00               	movlw	high i2printRTC@month
 19181  003020  6E02               	movwf	i2strcpy@to+1,c
 19182  003022  0EF7               	movlw	low STR_18
 19183  003024  6E03               	movwf	i2strcpy@from,c
 19184  003026  0EFF               	movlw	high STR_18
 19185  003028  6E04               	movwf	i2strcpy@from+1,c
 19186  00302A  ECF2  F026         	call	i2_strcpy	;wreg free
 19187                           
 19188                           ;RTC.c: 104: break;
 19189  00302E  D038               	goto	i2l6981
 19190  003030                     i2l6975:
 19191                           
 19192                           ;RTC.c: 106: strcpy(month, "DEC");
 19193  003030  0E3D               	movlw	low i2printRTC@month
 19194  003032  6E01               	movwf	i2strcpy@to,c
 19195  003034  0E00               	movlw	high i2printRTC@month
 19196  003036  6E02               	movwf	i2strcpy@to+1,c
 19197  003038  0ECF               	movlw	low STR_19
 19198  00303A  6E03               	movwf	i2strcpy@from,c
 19199  00303C  0EFF               	movlw	high STR_19
 19200  00303E  6E04               	movwf	i2strcpy@from+1,c
 19201  003040  ECF2  F026         	call	i2_strcpy	;wreg free
 19202                           
 19203                           ;RTC.c: 108: }
 19204                           
 19205                           ;RTC.c: 107: break;
 19206  003044  D02D               	goto	i2l6981
 19207  003046                     i2l6979:
 19208  003046  C03B  F02A         	movff	i2printRTC@RTC_month,??i2_printRTC
 19209  00304A  C03C  F02B         	movff	i2printRTC@RTC_month+1,??i2_printRTC+1
 19210                           
 19211                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 19212                           ; Switch size 1, requested type "space"
 19213                           ; Number of cases is 1, Range of values is 0 to 0
 19214                           ; switch strategies available:
 19215                           ; Name         Instructions Cycles
 19216                           ; simple_byte            4     3 (average)
 19217                           ;	Chosen strategy is simple_byte
 19218  00304E  502B               	movf	??i2_printRTC+1,w,c
 19219  003050  0A00               	xorlw	0	; case 0
 19220  003052  A4D8               	btfss	status,2,c
 19221  003054  D025               	goto	i2l6981
 19222                           
 19223                           ; Switch size 1, requested type "space"
 19224                           ; Number of cases is 12, Range of values is 1 to 12
 19225                           ; switch strategies available:
 19226                           ; Name         Instructions Cycles
 19227                           ; simple_byte           37    19 (average)
 19228                           ;	Chosen strategy is simple_byte
 19229  003056  502A               	movf	??i2_printRTC,w,c
 19230  003058  0A01               	xorlw	1	; case 1
 19231  00305A  B4D8               	btfsc	status,2,c
 19232  00305C  D770               	goto	i2l6953
 19233  00305E  0A03               	xorlw	3	; case 2
 19234  003060  B4D8               	btfsc	status,2,c
 19235  003062  D778               	goto	i2l6955
 19236  003064  0A01               	xorlw	1	; case 3
 19237  003066  B4D8               	btfsc	status,2,c
 19238  003068  D780               	goto	i2l6957
 19239  00306A  0A07               	xorlw	7	; case 4
 19240  00306C  B4D8               	btfsc	status,2,c
 19241  00306E  D788               	goto	i2l6959
 19242  003070  0A01               	xorlw	1	; case 5
 19243  003072  B4D8               	btfsc	status,2,c
 19244  003074  D790               	goto	i2l6961
 19245  003076  0A03               	xorlw	3	; case 6
 19246  003078  B4D8               	btfsc	status,2,c
 19247  00307A  D798               	goto	i2l6963
 19248  00307C  0A01               	xorlw	1	; case 7
 19249  00307E  B4D8               	btfsc	status,2,c
 19250  003080  D7A0               	goto	i2l6965
 19251  003082  0A0F               	xorlw	15	; case 8
 19252  003084  B4D8               	btfsc	status,2,c
 19253  003086  D7A8               	goto	i2l6967
 19254  003088  0A01               	xorlw	1	; case 9
 19255  00308A  B4D8               	btfsc	status,2,c
 19256  00308C  D7B0               	goto	i2l6969
 19257  00308E  0A03               	xorlw	3	; case 10
 19258  003090  B4D8               	btfsc	status,2,c
 19259  003092  D7B8               	goto	i2l6971
 19260  003094  0A01               	xorlw	1	; case 11
 19261  003096  B4D8               	btfsc	status,2,c
 19262  003098  D7C0               	goto	i2l6973
 19263  00309A  0A07               	xorlw	7	; case 12
 19264  00309C  B4D8               	btfsc	status,2,c
 19265  00309E  D7C8               	goto	i2l6975
 19266  0030A0                     i2l6981:
 19267                           
 19268                           ;RTC.c: 109: lcdInst(0b10000000);;
 19269  0030A0  0E80               	movlw	128
 19270  0030A2  EC56  F029         	call	i2_lcdInst
 19271                           
 19272                           ;RTC.c: 110: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 19273  0030A6  0E0A               	movlw	low STR_21
 19274  0030A8  6E0D               	movwf	i2printf@f,c
 19275  0030AA  0EFB               	movlw	high STR_21
 19276  0030AC  6E0E               	movwf	i2printf@f+1,c
 19277  0030AE  C035  F00F         	movff	i2printRTC@INT_time+8,?i2_printf+2
 19278  0030B2  C036  F010         	movff	i2printRTC@INT_time+9,?i2_printf+3
 19279  0030B6  0E3D               	movlw	low i2printRTC@month
 19280  0030B8  6E11               	movwf	?i2_printf+4,c
 19281  0030BA  0E00               	movlw	high i2printRTC@month
 19282  0030BC  6E12               	movwf	?i2_printf+5,c
 19283  0030BE  C031  F013         	movff	i2printRTC@INT_time+4,?i2_printf+6
 19284  0030C2  C032  F014         	movff	i2printRTC@INT_time+5,?i2_printf+7
 19285  0030C6  C02F  F015         	movff	i2printRTC@INT_time+2,?i2_printf+8
 19286  0030CA  C030  F016         	movff	i2printRTC@INT_time+3,?i2_printf+9
 19287  0030CE  C02D  F017         	movff	i2printRTC@INT_time,?i2_printf+10
 19288  0030D2  C02E  F018         	movff	i2printRTC@INT_time+1,?i2_printf+11
 19289  0030D6  ECE0  F00E         	call	i2_printf	;wreg free
 19290  0030DA  0012               	return		;funcret
 19291  0030DC                     __end_ofi2_printRTC:
 19292                           	opt stack 0
 19293                           pclatu	equ	0xFFB
 19294                           pclath	equ	0xFFA
 19295                           tblptru	equ	0xFF8
 19296                           tblptrh	equ	0xFF7
 19297                           tblptrl	equ	0xFF6
 19298                           tablat	equ	0xFF5
 19299                           prodh	equ	0xFF4
 19300                           prodl	equ	0xFF3
 19301                           intcon	equ	0xFF2
 19302                           intcon2	equ	0xFF1
 19303                           intcon3	equ	0xFF0
 19304                           indf0	equ	0xFEF
 19305                           postinc0	equ	0xFEE
 19306                           fsr0h	equ	0xFEA
 19307                           fsr0l	equ	0xFE9
 19308                           wreg	equ	0xFE8
 19309                           postdec1	equ	0xFE5
 19310                           fsr1h	equ	0xFE2
 19311                           fsr1l	equ	0xFE1
 19312                           indf2	equ	0xFDF
 19313                           postinc2	equ	0xFDE
 19314                           postdec2	equ	0xFDD
 19315                           fsr2h	equ	0xFDA
 19316                           fsr2l	equ	0xFD9
 19317                           status	equ	0xFD8
 19318                           
 19319 ;; *************** function i2_strcpy *****************
 19320 ;; Defined at:
 19321 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 19322 ;; Parameters:    Size  Location     Type
 19323 ;;  to              2    0[COMRAM] PTR unsigned char 
 19324 ;;		 -> printRTC@month(4), UI@month(4), 
 19325 ;;  from            2    2[COMRAM] PTR const unsigned char 
 19326 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
 19327 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
 19328 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
 19329 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
 19330 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
 19331 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
 19332 ;;		 -> STR_8(4), 
 19333 ;; Auto vars:     Size  Location     Type
 19334 ;;  strcpy          2    4[COMRAM] PTR unsigned char 
 19335 ;;		 -> printRTC@month(4), UI@month(4), 
 19336 ;; Return value:  Size  Location     Type
 19337 ;;                  2    0[COMRAM] PTR unsigned char 
 19338 ;; Registers used:
 19339 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 19340 ;; Tracked objects:
 19341 ;;		On entry : 0/0
 19342 ;;		On exit  : 0/0
 19343 ;;		Unchanged: 0/0
 19344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19345 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19346 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19347 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19348 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19349 ;;Total ram usage:        6 bytes
 19350 ;; Hardware stack levels used:    1
 19351 ;; This function calls:
 19352 ;;		Nothing
 19353 ;; This function is called by:
 19354 ;;		i2_printRTC
 19355 ;; This function uses a non-reentrant model
 19356 ;;
 19357                           
 19358                           	psect	text65
 19359  004DE4                     __ptext65:
 19360                           	opt stack 0
 19361  004DE4                     i2_strcpy:
 19362                           	opt stack 20
 19363                           
 19364                           ;incstack = 0
 19365  004DE4  C001  F005         	movff	i2strcpy@to,i2strcpy@cp
 19366  004DE8  C002  F006         	movff	i2strcpy@to+1,i2strcpy@cp+1
 19367  004DEC  D004               	goto	i2l6601
 19368  004DEE                     i2l6599:
 19369  004DEE  4A05               	infsnz	i2strcpy@cp,f,c
 19370  004DF0  2A06               	incf	i2strcpy@cp+1,f,c
 19371  004DF2  4A03               	infsnz	i2strcpy@from,f,c
 19372  004DF4  2A04               	incf	i2strcpy@from+1,f,c
 19373  004DF6                     i2l6601:
 19374  004DF6  C003  FFF6         	movff	i2strcpy@from,tblptrl
 19375  004DFA  C004  FFF7         	movff	i2strcpy@from+1,tblptrh
 19376  004DFE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19377  004DFE  6AF8               	clrf	tblptru,c
 19378  004E00                     	endif
 19379  004E00                     	if	0	;tblptru may be non-zero
 19380  004E00                     	endif
 19381  004E00  C005  FFD9         	movff	i2strcpy@cp,fsr2l
 19382  004E04  C006  FFDA         	movff	i2strcpy@cp+1,fsr2h
 19383  004E08  0008               	tblrd		*
 19384  004E0A  CFF5 FFDF          	movff	tablat,indf2
 19385  004E0E  50DF               	movf	indf2,w,c
 19386  004E10  B4D8               	btfsc	status,2,c
 19387  004E12  0012               	return	
 19388  004E14  D7EC               	goto	i2l6599
 19389  004E16                     __end_ofi2_strcpy:
 19390                           	opt stack 0
 19391                           pclatu	equ	0xFFB
 19392                           pclath	equ	0xFFA
 19393                           tblptru	equ	0xFF8
 19394                           tblptrh	equ	0xFF7
 19395                           tblptrl	equ	0xFF6
 19396                           tablat	equ	0xFF5
 19397                           prodh	equ	0xFF4
 19398                           prodl	equ	0xFF3
 19399                           intcon	equ	0xFF2
 19400                           intcon2	equ	0xFF1
 19401                           intcon3	equ	0xFF0
 19402                           indf0	equ	0xFEF
 19403                           postinc0	equ	0xFEE
 19404                           fsr0h	equ	0xFEA
 19405                           fsr0l	equ	0xFE9
 19406                           wreg	equ	0xFE8
 19407                           postdec1	equ	0xFE5
 19408                           fsr1h	equ	0xFE2
 19409                           fsr1l	equ	0xFE1
 19410                           indf2	equ	0xFDF
 19411                           postinc2	equ	0xFDE
 19412                           postdec2	equ	0xFDD
 19413                           fsr2h	equ	0xFDA
 19414                           fsr2l	equ	0xFD9
 19415                           status	equ	0xFD8
 19416                           
 19417 ;; *************** function _inputHandler *****************
 19418 ;; Defined at:
 19419 ;;		line 372 in file "UI.c"
 19420 ;; Parameters:    Size  Location     Type
 19421 ;;		None
 19422 ;; Auto vars:     Size  Location     Type
 19423 ;;		None
 19424 ;; Return value:  Size  Location     Type
 19425 ;;                  2   41[COMRAM] int 
 19426 ;; Registers used:
 19427 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19428 ;; Tracked objects:
 19429 ;;		On entry : 0/0
 19430 ;;		On exit  : 0/0
 19431 ;;		Unchanged: 0/0
 19432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19433 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19434 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19435 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19436 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19437 ;;Total ram usage:        4 bytes
 19438 ;; Hardware stack levels used:    1
 19439 ;; Hardware stack levels required when called:    4
 19440 ;; This function calls:
 19441 ;;		_change_state_to_logs_11
 19442 ;;		_change_state_to_logs_12
 19443 ;;		_change_state_to_logs_22
 19444 ;;		_change_state_to_logs_23
 19445 ;;		_change_state_to_logs_33
 19446 ;;		_change_state_to_logs_34
 19447 ;;		_change_state_to_menu_11
 19448 ;;		_change_state_to_menu_23
 19449 ;;		i2_change_state_to_menu_12
 19450 ;;		i2_change_state_to_menu_22
 19451 ;; This function is called by:
 19452 ;;		_updateMenu
 19453 ;; This function uses a non-reentrant model
 19454 ;;
 19455                           
 19456                           	psect	text66
 19457  00330E                     __ptext66:
 19458                           	opt stack 0
 19459  00330E                     _inputHandler:
 19460                           	opt stack 18
 19461                           
 19462                           ;UI.c: 377: if(firstboot){
 19463                           
 19464                           ;incstack = 0
 19465  00330E  0101               	movlb	1	; () banked
 19466  003310  513B               	movf	_firstboot& (0+255),w,b
 19467  003312  0101               	movlb	1	; () banked
 19468  003314  113C               	iorwf	(_firstboot+1)& (0+255),w,b
 19469  003316  B4D8               	btfsc	status,2,c
 19470  003318  D00C               	goto	i2l7049
 19471                           
 19472                           ; BSR set to: 1
 19473                           ;UI.c: 378: change_state_to_menu_11();
 19474  00331A  EC6B  F027         	call	_change_state_to_menu_11	;wreg free
 19475                           
 19476                           ;UI.c: 379: firstboot = 0;
 19477  00331E  0E00               	movlw	0
 19478  003320  0101               	movlb	1	; () banked
 19479  003322  6F3C               	movwf	(_firstboot+1)& (0+255),b
 19480  003324  0E00               	movlw	0
 19481  003326  6F3B               	movwf	_firstboot& (0+255),b
 19482                           
 19483                           ; BSR set to: 1
 19484                           ;UI.c: 380: return 0;
 19485  003328  0E00               	movlw	0
 19486  00332A  6E2B               	movwf	?_inputHandler+1,c
 19487  00332C  0E00               	movlw	0
 19488  00332E  6E2A               	movwf	?_inputHandler,c
 19489                           
 19490                           ; BSR set to: 1
 19491  003330  0012               	return	
 19492  003332                     i2l7049:
 19493                           
 19494                           ; BSR set to: 1
 19495                           ;UI.c: 381: }
 19496                           ;UI.c: 382: if (logstate){
 19497  003332  0100               	movlb	0	; () banked
 19498  003334  51F6               	movf	_logstate& (0+255),w,b
 19499  003336  0100               	movlb	0	; () banked
 19500  003338  11F7               	iorwf	(_logstate+1)& (0+255),w,b
 19501  00333A  B4D8               	btfsc	status,2,c
 19502  00333C  D0C7               	goto	i2l7167
 19503                           
 19504                           ; BSR set to: 0
 19505                           ;UI.c: 383: if(input == 'C' && PORTBbits.RB1 == 1){
 19506  00333E  0E43               	movlw	67
 19507  003340  187D               	xorwf	_input,w,c	;volatile
 19508  003342  A4D8               	btfss	status,2,c
 19509  003344  D012               	goto	i2l7067
 19510                           
 19511                           ; BSR set to: 0
 19512  003346  B281               	btfsc	3969,1,c	;volatile
 19513  003348  D009               	goto	i2l7059
 19514  00334A  D00F               	goto	i2l7067
 19515  00334C                     i2l7057:
 19516                           
 19517                           ;UI.c: 386: _delay((unsigned long)((10)*(32000000/4000.0)));
 19518  00334C  0E68               	movlw	104
 19519  00334E  6E2C               	movwf	??_inputHandler& (0+255),c
 19520  003350  0EE4               	movlw	228
 19521  003352                     i2u1002_47:
 19522  003352  2EE8               	decfsz	wreg,f,c
 19523  003354  D7FE               	bra	i2u1002_47
 19524  003356  2E2C               	decfsz	??_inputHandler& (0+255),f,c
 19525  003358  D7FC               	bra	i2u1002_47
 19526  00335A  D000               	nop2	
 19527  00335C                     i2l7059:
 19528  00335C  B281               	btfsc	3969,1,c	;volatile
 19529  00335E  D7F6               	goto	i2l7057
 19530  003360                     i2l7061:
 19531                           
 19532                           ;UI.c: 387: }
 19533                           ;UI.c: 388: return 0;
 19534  003360  0E00               	movlw	0
 19535  003362  6E2B               	movwf	?_inputHandler+1,c
 19536  003364  0E00               	movlw	0
 19537  003366  6E2A               	movwf	?_inputHandler,c
 19538  003368  0012               	return	
 19539  00336A                     i2l7067:
 19540                           
 19541                           ;UI.c: 390: else if (input == 'D'){
 19542  00336A  0E44               	movlw	68
 19543  00336C  187D               	xorwf	_input,w,c	;volatile
 19544  00336E  A4D8               	btfss	status,2,c
 19545  003370  D7F7               	goto	i2l7061
 19546                           
 19547                           ;UI.c: 392: logstate = 0;
 19548  003372  0E00               	movlw	0
 19549  003374  0100               	movlb	0	; () banked
 19550  003376  6FF7               	movwf	(_logstate+1)& (0+255),b
 19551  003378  0E00               	movlw	0
 19552  00337A  6FF6               	movwf	_logstate& (0+255),b
 19553                           
 19554                           ;UI.c: 393: switch(cur_state){
 19555  00337C  D012               	goto	i2l7085
 19556  00337E                     i2l7071:
 19557                           
 19558                           ;UI.c: 395: change_state_to_logs_11();
 19559  00337E  ECE3  F027         	call	_change_state_to_logs_11	;wreg free
 19560                           
 19561                           ;UI.c: 396: break;
 19562  003382  D7EE               	goto	i2l7061
 19563  003384                     i2l7073:
 19564                           
 19565                           ;UI.c: 398: change_state_to_logs_12();
 19566  003384  ECCB  F027         	call	_change_state_to_logs_12	;wreg free
 19567                           
 19568                           ;UI.c: 399: break;
 19569  003388  D7EB               	goto	i2l7061
 19570  00338A                     i2l7075:
 19571                           
 19572                           ;UI.c: 401: change_state_to_logs_22();
 19573  00338A  ECB3  F027         	call	_change_state_to_logs_22	;wreg free
 19574                           
 19575                           ;UI.c: 402: break;
 19576  00338E  D7E8               	goto	i2l7061
 19577  003390                     i2l7077:
 19578                           
 19579                           ;UI.c: 404: change_state_to_logs_23();
 19580  003390  EC12  F028         	call	_change_state_to_logs_23	;wreg free
 19581                           
 19582                           ;UI.c: 405: break;
 19583  003394  D7E5               	goto	i2l7061
 19584  003396                     i2l7079:
 19585                           
 19586                           ;UI.c: 407: change_state_to_logs_33();
 19587  003396  EC9B  F027         	call	_change_state_to_logs_33	;wreg free
 19588                           
 19589                           ;UI.c: 408: break;
 19590  00339A  D7E2               	goto	i2l7061
 19591  00339C                     i2l7081:
 19592                           
 19593                           ;UI.c: 410: change_state_to_logs_34();
 19594  00339C  EC83  F027         	call	_change_state_to_logs_34	;wreg free
 19595                           
 19596                           ;UI.c: 412: }
 19597                           
 19598                           ;UI.c: 411: break;
 19599  0033A0  D7DF               	goto	i2l7061
 19600  0033A2                     i2l7085:
 19601  0033A2  C0EC  F02C         	movff	_cur_state,??_inputHandler
 19602  0033A6  C0ED  F02D         	movff	_cur_state+1,??_inputHandler+1
 19603                           
 19604                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 19605                           ; Switch size 1, requested type "space"
 19606                           ; Number of cases is 2, Range of values is 3 to 4
 19607                           ; switch strategies available:
 19608                           ; Name         Instructions Cycles
 19609                           ; simple_byte            7     4 (average)
 19610                           ;	Chosen strategy is simple_byte
 19611  0033AA  502D               	movf	??_inputHandler+1,w,c
 19612  0033AC  0A03               	xorlw	3	; case 3
 19613  0033AE  B4D8               	btfsc	status,2,c
 19614  0033B0  D004               	goto	i2l9931
 19615  0033B2  0A07               	xorlw	7	; case 4
 19616  0033B4  B4D8               	btfsc	status,2,c
 19617  0033B6  D00F               	goto	i2l9933
 19618  0033B8  D7D3               	goto	i2l7061
 19619  0033BA                     i2l9931:
 19620                           
 19621                           ; Switch size 1, requested type "space"
 19622                           ; Number of cases is 4, Range of values is 243 to 255
 19623                           ; switch strategies available:
 19624                           ; Name         Instructions Cycles
 19625                           ; simple_byte           13     7 (average)
 19626                           ;	Chosen strategy is simple_byte
 19627  0033BA  502C               	movf	??_inputHandler,w,c
 19628  0033BC  0AF3               	xorlw	243	; case 243
 19629  0033BE  B4D8               	btfsc	status,2,c
 19630  0033C0  D7DE               	goto	i2l7071
 19631  0033C2  0A07               	xorlw	7	; case 244
 19632  0033C4  B4D8               	btfsc	status,2,c
 19633  0033C6  D7DE               	goto	i2l7073
 19634  0033C8  0A0A               	xorlw	10	; case 254
 19635  0033CA  B4D8               	btfsc	status,2,c
 19636  0033CC  D7DE               	goto	i2l7075
 19637  0033CE  0A01               	xorlw	1	; case 255
 19638  0033D0  B4D8               	btfsc	status,2,c
 19639  0033D2  D7DE               	goto	i2l7077
 19640  0033D4  D7C5               	goto	i2l7061
 19641  0033D6                     i2l9933:
 19642                           
 19643                           ; Switch size 1, requested type "space"
 19644                           ; Number of cases is 2, Range of values is 9 to 10
 19645                           ; switch strategies available:
 19646                           ; Name         Instructions Cycles
 19647                           ; simple_byte            7     4 (average)
 19648                           ;	Chosen strategy is simple_byte
 19649  0033D6  502C               	movf	??_inputHandler,w,c
 19650  0033D8  0A09               	xorlw	9	; case 9
 19651  0033DA  B4D8               	btfsc	status,2,c
 19652  0033DC  D7DC               	goto	i2l7079
 19653  0033DE  0A03               	xorlw	3	; case 10
 19654  0033E0  B4D8               	btfsc	status,2,c
 19655  0033E2  D7DC               	goto	i2l7081
 19656  0033E4  D7BD               	goto	i2l7061
 19657  0033E6                     i2l7097:
 19658                           
 19659                           ;UI.c: 422: if(cur_state == 11){
 19660  0033E6  0E0B               	movlw	11
 19661  0033E8  0100               	movlb	0	; () banked
 19662  0033EA  19EC               	xorwf	_cur_state& (0+255),w,b
 19663  0033EC  0100               	movlb	0	; () banked
 19664  0033EE  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
 19665  0033F0  A4D8               	btfss	status,2,c
 19666  0033F2  D005               	goto	i2l7105
 19667                           
 19668                           ; BSR set to: 0
 19669                           ;UI.c: 423: return 0;
 19670  0033F4  0E00               	movlw	0
 19671  0033F6  6E2B               	movwf	?_inputHandler+1,c
 19672  0033F8  0E00               	movlw	0
 19673  0033FA  6E2A               	movwf	?_inputHandler,c
 19674                           
 19675                           ; BSR set to: 0
 19676  0033FC  0012               	return	
 19677  0033FE                     i2l7105:
 19678                           
 19679                           ; BSR set to: 0
 19680                           ;UI.c: 425: else{
 19681                           ;UI.c: 426: change_state_to_menu_11();
 19682  0033FE  EC6B  F027         	call	_change_state_to_menu_11	;wreg free
 19683                           
 19684                           ;UI.c: 427: }
 19685                           ;UI.c: 428: return 0;
 19686  003402  0E00               	movlw	0
 19687  003404  6E2B               	movwf	?_inputHandler+1,c
 19688  003406  0E00               	movlw	0
 19689  003408  6E2A               	movwf	?_inputHandler,c
 19690  00340A  0012               	return	
 19691  00340C                     i2l7111:
 19692                           
 19693                           ;UI.c: 430: if(cur_state == 22 | cur_state == 12){
 19694  00340C  0E16               	movlw	22
 19695  00340E  0100               	movlb	0	; () banked
 19696  003410  19EC               	xorwf	_cur_state& (0+255),w,b
 19697  003412  0100               	movlb	0	; () banked
 19698  003414  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
 19699  003416  B4D8               	btfsc	status,2,c
 19700  003418  D007               	goto	i2l7115
 19701                           
 19702                           ; BSR set to: 0
 19703  00341A  0E0C               	movlw	12
 19704  00341C  0100               	movlb	0	; () banked
 19705  00341E  19EC               	xorwf	_cur_state& (0+255),w,b
 19706  003420  0100               	movlb	0	; () banked
 19707  003422  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
 19708  003424  A4D8               	btfss	status,2,c
 19709  003426  D005               	goto	i2l7121
 19710  003428                     i2l7115:
 19711                           
 19712                           ; BSR set to: 0
 19713                           ;UI.c: 431: return 0;
 19714  003428  0E00               	movlw	0
 19715  00342A  6E2B               	movwf	?_inputHandler+1,c
 19716  00342C  0E00               	movlw	0
 19717  00342E  6E2A               	movwf	?_inputHandler,c
 19718                           
 19719                           ; BSR set to: 0
 19720  003430  0012               	return	
 19721  003432                     i2l7121:
 19722                           
 19723                           ; BSR set to: 0
 19724                           ;UI.c: 433: else if(cur_state == 23){
 19725  003432  0E17               	movlw	23
 19726  003434  0100               	movlb	0	; () banked
 19727  003436  19EC               	xorwf	_cur_state& (0+255),w,b
 19728  003438  0100               	movlb	0	; () banked
 19729  00343A  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
 19730  00343C  A4D8               	btfss	status,2,c
 19731  00343E  D003               	goto	i2l7125
 19732                           
 19733                           ; BSR set to: 0
 19734                           ;UI.c: 434: change_state_to_menu_22();
 19735  003440  EC23  F027         	call	i2_change_state_to_menu_22	;wreg free
 19736                           
 19737                           ;UI.c: 435: }
 19738  003444  D002               	goto	i2l7127
 19739  003446                     i2l7125:
 19740                           
 19741                           ;UI.c: 436: else{
 19742                           ;UI.c: 437: change_state_to_menu_12();
 19743  003446  EC3B  F027         	call	i2_change_state_to_menu_12	;wreg free
 19744  00344A                     i2l7127:
 19745                           
 19746                           ;UI.c: 438: }
 19747                           ;UI.c: 439: return 0;
 19748  00344A  0E00               	movlw	0
 19749  00344C  6E2B               	movwf	?_inputHandler+1,c
 19750  00344E  0E00               	movlw	0
 19751  003450  6E2A               	movwf	?_inputHandler,c
 19752  003452  0012               	return	
 19753  003454                     i2l7131:
 19754                           
 19755                           ;UI.c: 441: if(cur_state == 23){
 19756  003454  0E17               	movlw	23
 19757  003456  0100               	movlb	0	; () banked
 19758  003458  19EC               	xorwf	_cur_state& (0+255),w,b
 19759  00345A  0100               	movlb	0	; () banked
 19760  00345C  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
 19761  00345E  A4D8               	btfss	status,2,c
 19762  003460  D005               	goto	i2l7139
 19763                           
 19764                           ; BSR set to: 0
 19765                           ;UI.c: 442: return 0;
 19766  003462  0E00               	movlw	0
 19767  003464  6E2B               	movwf	?_inputHandler+1,c
 19768  003466  0E00               	movlw	0
 19769  003468  6E2A               	movwf	?_inputHandler,c
 19770                           
 19771                           ; BSR set to: 0
 19772  00346A  0012               	return	
 19773  00346C                     i2l7139:
 19774                           
 19775                           ; BSR set to: 0
 19776                           ;UI.c: 444: else{
 19777                           ;UI.c: 445: change_state_to_menu_23();
 19778  00346C  EC53  F027         	call	_change_state_to_menu_23	;wreg free
 19779                           
 19780                           ;UI.c: 446: }
 19781                           ;UI.c: 447: return 0;
 19782  003470  0E00               	movlw	0
 19783  003472  6E2B               	movwf	?_inputHandler+1,c
 19784  003474  0E00               	movlw	0
 19785  003476  6E2A               	movwf	?_inputHandler,c
 19786  003478  0012               	return	
 19787  00347A                     i2l7145:
 19788                           
 19789                           ;UI.c: 450: up = 1;
 19790  00347A  0E00               	movlw	0
 19791  00347C  6E78               	movwf	_up+1,c
 19792  00347E  0E01               	movlw	1
 19793  003480  6E77               	movwf	_up,c
 19794                           
 19795                           ;UI.c: 451: return 1;
 19796  003482  0E00               	movlw	0
 19797  003484  6E2B               	movwf	?_inputHandler+1,c
 19798  003486  0E01               	movlw	1
 19799  003488  6E2A               	movwf	?_inputHandler,c
 19800  00348A  0012               	return	
 19801  00348C                     i2l7149:
 19802                           
 19803                           ;UI.c: 453: down = 1;
 19804  00348C  0E00               	movlw	0
 19805  00348E  6E5E               	movwf	_down+1,c
 19806  003490  0E01               	movlw	1
 19807  003492  6E5D               	movwf	_down,c
 19808                           
 19809                           ;UI.c: 454: return 1;
 19810  003494  0E00               	movlw	0
 19811  003496  6E2B               	movwf	?_inputHandler+1,c
 19812  003498  0E01               	movlw	1
 19813  00349A  6E2A               	movwf	?_inputHandler,c
 19814  00349C  0012               	return	
 19815  00349E                     i2l7153:
 19816                           
 19817                           ;UI.c: 456: enter = 1;
 19818  00349E  0E00               	movlw	0
 19819  0034A0  6E60               	movwf	_enter+1,c
 19820  0034A2  0E01               	movlw	1
 19821  0034A4  6E5F               	movwf	_enter,c
 19822                           
 19823                           ;UI.c: 457: return 1;
 19824  0034A6  0E00               	movlw	0
 19825  0034A8  6E2B               	movwf	?_inputHandler+1,c
 19826  0034AA  0E01               	movlw	1
 19827  0034AC  6E2A               	movwf	?_inputHandler,c
 19828  0034AE  0012               	return	
 19829  0034B0                     i2l7157:
 19830                           
 19831                           ;UI.c: 459: back = 1;
 19832  0034B0  0E00               	movlw	0
 19833  0034B2  6E5C               	movwf	_back+1,c
 19834  0034B4  0E01               	movlw	1
 19835  0034B6  6E5B               	movwf	_back,c
 19836                           
 19837                           ;UI.c: 460: return 1;
 19838  0034B8  0E00               	movlw	0
 19839  0034BA  6E2B               	movwf	?_inputHandler+1,c
 19840  0034BC  0E01               	movlw	1
 19841  0034BE  6E2A               	movwf	?_inputHandler,c
 19842  0034C0  0012               	return	
 19843  0034C2                     i2l7161:
 19844                           
 19845                           ;UI.c: 463: return 1;
 19846  0034C2  0E00               	movlw	0
 19847  0034C4  6E2B               	movwf	?_inputHandler+1,c
 19848  0034C6  0E01               	movlw	1
 19849  0034C8  6E2A               	movwf	?_inputHandler,c
 19850                           
 19851                           ;UI.c: 464: }
 19852  0034CA  0012               	return	
 19853  0034CC                     i2l7167:
 19854  0034CC  507D               	movf	_input,w,c	;volatile
 19855                           
 19856                           ; Switch size 1, requested type "space"
 19857                           ; Number of cases is 7, Range of values is 49 to 68
 19858                           ; switch strategies available:
 19859                           ; Name         Instructions Cycles
 19860                           ; simple_byte           22    12 (average)
 19861                           ;	Chosen strategy is simple_byte
 19862  0034CE  0A31               	xorlw	49	; case 49
 19863  0034D0  B4D8               	btfsc	status,2,c
 19864  0034D2  D789               	goto	i2l7097
 19865  0034D4  0A03               	xorlw	3	; case 50
 19866  0034D6  B4D8               	btfsc	status,2,c
 19867  0034D8  D799               	goto	i2l7111
 19868  0034DA  0A01               	xorlw	1	; case 51
 19869  0034DC  B4D8               	btfsc	status,2,c
 19870  0034DE  D7BA               	goto	i2l7131
 19871  0034E0  0A72               	xorlw	114	; case 65
 19872  0034E2  B4D8               	btfsc	status,2,c
 19873  0034E4  D7CA               	goto	i2l7145
 19874  0034E6  0A03               	xorlw	3	; case 66
 19875  0034E8  B4D8               	btfsc	status,2,c
 19876  0034EA  D7D0               	goto	i2l7149
 19877  0034EC  0A01               	xorlw	1	; case 67
 19878  0034EE  B4D8               	btfsc	status,2,c
 19879  0034F0  D7D6               	goto	i2l7153
 19880  0034F2  0A07               	xorlw	7	; case 68
 19881  0034F4  B4D8               	btfsc	status,2,c
 19882  0034F6  D7DC               	goto	i2l7157
 19883  0034F8  D7E4               	goto	i2l7161
 19884  0034FA                     __end_of_inputHandler:
 19885                           	opt stack 0
 19886                           pclatu	equ	0xFFB
 19887                           pclath	equ	0xFFA
 19888                           tblptru	equ	0xFF8
 19889                           tblptrh	equ	0xFF7
 19890                           tblptrl	equ	0xFF6
 19891                           tablat	equ	0xFF5
 19892                           prodh	equ	0xFF4
 19893                           prodl	equ	0xFF3
 19894                           intcon	equ	0xFF2
 19895                           intcon2	equ	0xFF1
 19896                           intcon3	equ	0xFF0
 19897                           indf0	equ	0xFEF
 19898                           postinc0	equ	0xFEE
 19899                           fsr0h	equ	0xFEA
 19900                           fsr0l	equ	0xFE9
 19901                           wreg	equ	0xFE8
 19902                           postdec1	equ	0xFE5
 19903                           fsr1h	equ	0xFE2
 19904                           fsr1l	equ	0xFE1
 19905                           indf2	equ	0xFDF
 19906                           postinc2	equ	0xFDE
 19907                           postdec2	equ	0xFDD
 19908                           fsr2h	equ	0xFDA
 19909                           fsr2l	equ	0xFD9
 19910                           status	equ	0xFD8
 19911                           
 19912 ;; *************** function i2_change_state_to_menu_22 *****************
 19913 ;; Defined at:
 19914 ;;		line 498 in file "UI.c"
 19915 ;; Parameters:    Size  Location     Type
 19916 ;;		None
 19917 ;; Auto vars:     Size  Location     Type
 19918 ;;		None
 19919 ;; Return value:  Size  Location     Type
 19920 ;;                  1    wreg      void 
 19921 ;; Registers used:
 19922 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19923 ;; Tracked objects:
 19924 ;;		On entry : 0/0
 19925 ;;		On exit  : 0/0
 19926 ;;		Unchanged: 0/0
 19927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19928 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19929 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19930 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19931 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19932 ;;Total ram usage:        0 bytes
 19933 ;; Hardware stack levels used:    1
 19934 ;; Hardware stack levels required when called:    3
 19935 ;; This function calls:
 19936 ;;		i2_lcdInst
 19937 ;;		i2_printf
 19938 ;; This function is called by:
 19939 ;;		_updateMenu
 19940 ;;		_inputHandler
 19941 ;; This function uses a non-reentrant model
 19942 ;;
 19943                           
 19944                           	psect	text67
 19945  004E46                     __ptext67:
 19946                           	opt stack 0
 19947  004E46                     i2_change_state_to_menu_22:
 19948                           	opt stack 19
 19949                           
 19950                           ;UI.c: 499: cur_state = 22;
 19951                           
 19952                           ;incstack = 0
 19953  004E46  0E00               	movlw	0
 19954  004E48  0100               	movlb	0	; () banked
 19955  004E4A  6FED               	movwf	(_cur_state+1)& (0+255),b
 19956  004E4C  0E16               	movlw	22
 19957  004E4E  6FEC               	movwf	_cur_state& (0+255),b
 19958                           
 19959                           ; BSR set to: 0
 19960                           ;UI.c: 501: lcdInst(0b10000000);;
 19961  004E50  0E80               	movlw	128
 19962  004E52  EC56  F029         	call	i2_lcdInst
 19963                           
 19964                           ;UI.c: 502: printf("2. SORT        <");
 19965  004E56  0EC4               	movlw	low STR_34
 19966  004E58  6E0D               	movwf	i2printf@f,c
 19967  004E5A  0EFD               	movlw	high STR_34
 19968  004E5C  6E0E               	movwf	i2printf@f+1,c
 19969  004E5E  ECE0  F00E         	call	i2_printf	;wreg free
 19970                           
 19971                           ;UI.c: 503: lcdInst(0b11000000);;
 19972  004E62  0EC0               	movlw	192
 19973  004E64  EC56  F029         	call	i2_lcdInst
 19974                           
 19975                           ;UI.c: 504: printf("3. LOGS         ");
 19976  004E68  0E09               	movlw	low STR_36
 19977  004E6A  6E0D               	movwf	i2printf@f,c
 19978  004E6C  0EFD               	movlw	high STR_36
 19979  004E6E  6E0E               	movwf	i2printf@f+1,c
 19980  004E70  ECE0  F00E         	call	i2_printf	;wreg free
 19981  004E74  0012               	return		;funcret
 19982  004E76                     __end_ofi2_change_state_to_menu_22:
 19983                           	opt stack 0
 19984                           pclatu	equ	0xFFB
 19985                           pclath	equ	0xFFA
 19986                           tblptru	equ	0xFF8
 19987                           tblptrh	equ	0xFF7
 19988                           tblptrl	equ	0xFF6
 19989                           tablat	equ	0xFF5
 19990                           prodh	equ	0xFF4
 19991                           prodl	equ	0xFF3
 19992                           intcon	equ	0xFF2
 19993                           intcon2	equ	0xFF1
 19994                           intcon3	equ	0xFF0
 19995                           indf0	equ	0xFEF
 19996                           postinc0	equ	0xFEE
 19997                           fsr0h	equ	0xFEA
 19998                           fsr0l	equ	0xFE9
 19999                           wreg	equ	0xFE8
 20000                           postdec1	equ	0xFE5
 20001                           fsr1h	equ	0xFE2
 20002                           fsr1l	equ	0xFE1
 20003                           indf2	equ	0xFDF
 20004                           postinc2	equ	0xFDE
 20005                           postdec2	equ	0xFDD
 20006                           fsr2h	equ	0xFDA
 20007                           fsr2l	equ	0xFD9
 20008                           status	equ	0xFD8
 20009                           
 20010 ;; *************** function i2_change_state_to_menu_12 *****************
 20011 ;; Defined at:
 20012 ;;		line 490 in file "UI.c"
 20013 ;; Parameters:    Size  Location     Type
 20014 ;;		None
 20015 ;; Auto vars:     Size  Location     Type
 20016 ;;		None
 20017 ;; Return value:  Size  Location     Type
 20018 ;;                  1    wreg      void 
 20019 ;; Registers used:
 20020 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20021 ;; Tracked objects:
 20022 ;;		On entry : 0/0
 20023 ;;		On exit  : 0/0
 20024 ;;		Unchanged: 0/0
 20025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20026 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20027 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20028 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20029 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20030 ;;Total ram usage:        0 bytes
 20031 ;; Hardware stack levels used:    1
 20032 ;; Hardware stack levels required when called:    3
 20033 ;; This function calls:
 20034 ;;		i2_lcdInst
 20035 ;;		i2_printf
 20036 ;; This function is called by:
 20037 ;;		_updateMenu
 20038 ;;		_inputHandler
 20039 ;; This function uses a non-reentrant model
 20040 ;;
 20041                           
 20042                           	psect	text68
 20043  004E76                     __ptext68:
 20044                           	opt stack 0
 20045  004E76                     i2_change_state_to_menu_12:
 20046                           	opt stack 19
 20047                           
 20048                           ;UI.c: 491: cur_state = 12;
 20049                           
 20050                           ;incstack = 0
 20051  004E76  0E00               	movlw	0
 20052  004E78  0100               	movlb	0	; () banked
 20053  004E7A  6FED               	movwf	(_cur_state+1)& (0+255),b
 20054  004E7C  0E0C               	movlw	12
 20055  004E7E  6FEC               	movwf	_cur_state& (0+255),b
 20056                           
 20057                           ; BSR set to: 0
 20058                           ;UI.c: 493: lcdInst(0b10000000);;
 20059  004E80  0E80               	movlw	128
 20060  004E82  EC56  F029         	call	i2_lcdInst
 20061                           
 20062                           ;UI.c: 494: printf("1. DATE/TIME    ");
 20063  004E86  0E2B               	movlw	low STR_33
 20064  004E88  6E0D               	movwf	i2printf@f,c
 20065  004E8A  0EFD               	movlw	high STR_33
 20066  004E8C  6E0E               	movwf	i2printf@f+1,c
 20067  004E8E  ECE0  F00E         	call	i2_printf	;wreg free
 20068                           
 20069                           ;UI.c: 495: lcdInst(0b11000000);;
 20070  004E92  0EC0               	movlw	192
 20071  004E94  EC56  F029         	call	i2_lcdInst
 20072                           
 20073                           ;UI.c: 496: printf("2. SORT        <");
 20074  004E98  0EC4               	movlw	low STR_34
 20075  004E9A  6E0D               	movwf	i2printf@f,c
 20076  004E9C  0EFD               	movlw	high STR_34
 20077  004E9E  6E0E               	movwf	i2printf@f+1,c
 20078  004EA0  ECE0  F00E         	call	i2_printf	;wreg free
 20079  004EA4  0012               	return		;funcret
 20080  004EA6                     __end_ofi2_change_state_to_menu_12:
 20081                           	opt stack 0
 20082                           pclatu	equ	0xFFB
 20083                           pclath	equ	0xFFA
 20084                           tblptru	equ	0xFF8
 20085                           tblptrh	equ	0xFF7
 20086                           tblptrl	equ	0xFF6
 20087                           tablat	equ	0xFF5
 20088                           prodh	equ	0xFF4
 20089                           prodl	equ	0xFF3
 20090                           intcon	equ	0xFF2
 20091                           intcon2	equ	0xFF1
 20092                           intcon3	equ	0xFF0
 20093                           indf0	equ	0xFEF
 20094                           postinc0	equ	0xFEE
 20095                           fsr0h	equ	0xFEA
 20096                           fsr0l	equ	0xFE9
 20097                           wreg	equ	0xFE8
 20098                           postdec1	equ	0xFE5
 20099                           fsr1h	equ	0xFE2
 20100                           fsr1l	equ	0xFE1
 20101                           indf2	equ	0xFDF
 20102                           postinc2	equ	0xFDE
 20103                           postdec2	equ	0xFDD
 20104                           fsr2h	equ	0xFDA
 20105                           fsr2l	equ	0xFD9
 20106                           status	equ	0xFD8
 20107                           
 20108 ;; *************** function _change_state_to_menu_23 *****************
 20109 ;; Defined at:
 20110 ;;		line 506 in file "UI.c"
 20111 ;; Parameters:    Size  Location     Type
 20112 ;;		None
 20113 ;; Auto vars:     Size  Location     Type
 20114 ;;		None
 20115 ;; Return value:  Size  Location     Type
 20116 ;;                  1    wreg      void 
 20117 ;; Registers used:
 20118 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20119 ;; Tracked objects:
 20120 ;;		On entry : 0/0
 20121 ;;		On exit  : 0/0
 20122 ;;		Unchanged: 0/0
 20123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20124 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20125 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20126 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20127 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20128 ;;Total ram usage:        0 bytes
 20129 ;; Hardware stack levels used:    1
 20130 ;; Hardware stack levels required when called:    3
 20131 ;; This function calls:
 20132 ;;		i2_lcdInst
 20133 ;;		i2_printf
 20134 ;; This function is called by:
 20135 ;;		_updateMenu
 20136 ;;		_inputHandler
 20137 ;; This function uses a non-reentrant model
 20138 ;;
 20139                           
 20140                           	psect	text69
 20141  004EA6                     __ptext69:
 20142                           	opt stack 0
 20143  004EA6                     _change_state_to_menu_23:
 20144                           	opt stack 18
 20145                           
 20146                           ;UI.c: 507: cur_state = 23;
 20147                           
 20148                           ;incstack = 0
 20149  004EA6  0E00               	movlw	0
 20150  004EA8  0100               	movlb	0	; () banked
 20151  004EAA  6FED               	movwf	(_cur_state+1)& (0+255),b
 20152  004EAC  0E17               	movlw	23
 20153  004EAE  6FEC               	movwf	_cur_state& (0+255),b
 20154                           
 20155                           ; BSR set to: 0
 20156                           ;UI.c: 509: lcdInst(0b10000000);;
 20157  004EB0  0E80               	movlw	128
 20158  004EB2  EC56  F029         	call	i2_lcdInst
 20159                           
 20160                           ;UI.c: 510: printf("2. SORT         ");
 20161  004EB6  0E1A               	movlw	low STR_32
 20162  004EB8  6E0D               	movwf	i2printf@f,c
 20163  004EBA  0EFD               	movlw	high STR_32
 20164  004EBC  6E0E               	movwf	i2printf@f+1,c
 20165  004EBE  ECE0  F00E         	call	i2_printf	;wreg free
 20166                           
 20167                           ;UI.c: 511: lcdInst(0b11000000);;
 20168  004EC2  0EC0               	movlw	192
 20169  004EC4  EC56  F029         	call	i2_lcdInst
 20170                           
 20171                           ;UI.c: 512: printf("3. LOGS        <");
 20172  004EC8  0EB3               	movlw	low STR_38
 20173  004ECA  6E0D               	movwf	i2printf@f,c
 20174  004ECC  0EFD               	movlw	high STR_38
 20175  004ECE  6E0E               	movwf	i2printf@f+1,c
 20176  004ED0  ECE0  F00E         	call	i2_printf	;wreg free
 20177  004ED4  0012               	return		;funcret
 20178  004ED6                     __end_of_change_state_to_menu_23:
 20179                           	opt stack 0
 20180                           pclatu	equ	0xFFB
 20181                           pclath	equ	0xFFA
 20182                           tblptru	equ	0xFF8
 20183                           tblptrh	equ	0xFF7
 20184                           tblptrl	equ	0xFF6
 20185                           tablat	equ	0xFF5
 20186                           prodh	equ	0xFF4
 20187                           prodl	equ	0xFF3
 20188                           intcon	equ	0xFF2
 20189                           intcon2	equ	0xFF1
 20190                           intcon3	equ	0xFF0
 20191                           indf0	equ	0xFEF
 20192                           postinc0	equ	0xFEE
 20193                           fsr0h	equ	0xFEA
 20194                           fsr0l	equ	0xFE9
 20195                           wreg	equ	0xFE8
 20196                           postdec1	equ	0xFE5
 20197                           fsr1h	equ	0xFE2
 20198                           fsr1l	equ	0xFE1
 20199                           indf2	equ	0xFDF
 20200                           postinc2	equ	0xFDE
 20201                           postdec2	equ	0xFDD
 20202                           fsr2h	equ	0xFDA
 20203                           fsr2l	equ	0xFD9
 20204                           status	equ	0xFD8
 20205                           
 20206 ;; *************** function _change_state_to_menu_11 *****************
 20207 ;; Defined at:
 20208 ;;		line 482 in file "UI.c"
 20209 ;; Parameters:    Size  Location     Type
 20210 ;;		None
 20211 ;; Auto vars:     Size  Location     Type
 20212 ;;		None
 20213 ;; Return value:  Size  Location     Type
 20214 ;;                  1    wreg      void 
 20215 ;; Registers used:
 20216 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20217 ;; Tracked objects:
 20218 ;;		On entry : 0/0
 20219 ;;		On exit  : 0/0
 20220 ;;		Unchanged: 0/0
 20221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20222 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20223 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20224 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20225 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20226 ;;Total ram usage:        0 bytes
 20227 ;; Hardware stack levels used:    1
 20228 ;; Hardware stack levels required when called:    3
 20229 ;; This function calls:
 20230 ;;		i2_lcdInst
 20231 ;;		i2_printf
 20232 ;; This function is called by:
 20233 ;;		_updateMenu
 20234 ;;		_inputHandler
 20235 ;; This function uses a non-reentrant model
 20236 ;;
 20237                           
 20238                           	psect	text70
 20239  004ED6                     __ptext70:
 20240                           	opt stack 0
 20241  004ED6                     _change_state_to_menu_11:
 20242                           	opt stack 18
 20243                           
 20244                           ;UI.c: 483: cur_state = 11;
 20245                           
 20246                           ;incstack = 0
 20247  004ED6  0E00               	movlw	0
 20248  004ED8  0100               	movlb	0	; () banked
 20249  004EDA  6FED               	movwf	(_cur_state+1)& (0+255),b
 20250  004EDC  0E0B               	movlw	11
 20251  004EDE  6FEC               	movwf	_cur_state& (0+255),b
 20252                           
 20253                           ; BSR set to: 0
 20254                           ;UI.c: 485: lcdInst(0b10000000);;
 20255  004EE0  0E80               	movlw	128
 20256  004EE2  EC56  F029         	call	i2_lcdInst
 20257                           
 20258                           ;UI.c: 486: printf("1. DATE/TIME   <");
 20259  004EE6  0ED5               	movlw	low STR_31
 20260  004EE8  6E0D               	movwf	i2printf@f,c
 20261  004EEA  0EFD               	movlw	high STR_31
 20262  004EEC  6E0E               	movwf	i2printf@f+1,c
 20263  004EEE  ECE0  F00E         	call	i2_printf	;wreg free
 20264                           
 20265                           ;UI.c: 487: lcdInst(0b11000000);;
 20266  004EF2  0EC0               	movlw	192
 20267  004EF4  EC56  F029         	call	i2_lcdInst
 20268                           
 20269                           ;UI.c: 488: printf("2. SORT         ");
 20270  004EF8  0E1A               	movlw	low STR_32
 20271  004EFA  6E0D               	movwf	i2printf@f,c
 20272  004EFC  0EFD               	movlw	high STR_32
 20273  004EFE  6E0E               	movwf	i2printf@f+1,c
 20274  004F00  ECE0  F00E         	call	i2_printf	;wreg free
 20275  004F04  0012               	return		;funcret
 20276  004F06                     __end_of_change_state_to_menu_11:
 20277                           	opt stack 0
 20278                           pclatu	equ	0xFFB
 20279                           pclath	equ	0xFFA
 20280                           tblptru	equ	0xFF8
 20281                           tblptrh	equ	0xFF7
 20282                           tblptrl	equ	0xFF6
 20283                           tablat	equ	0xFF5
 20284                           prodh	equ	0xFF4
 20285                           prodl	equ	0xFF3
 20286                           intcon	equ	0xFF2
 20287                           intcon2	equ	0xFF1
 20288                           intcon3	equ	0xFF0
 20289                           indf0	equ	0xFEF
 20290                           postinc0	equ	0xFEE
 20291                           fsr0h	equ	0xFEA
 20292                           fsr0l	equ	0xFE9
 20293                           wreg	equ	0xFE8
 20294                           postdec1	equ	0xFE5
 20295                           fsr1h	equ	0xFE2
 20296                           fsr1l	equ	0xFE1
 20297                           indf2	equ	0xFDF
 20298                           postinc2	equ	0xFDE
 20299                           postdec2	equ	0xFDD
 20300                           fsr2h	equ	0xFDA
 20301                           fsr2l	equ	0xFD9
 20302                           status	equ	0xFD8
 20303                           
 20304 ;; *************** function _change_state_to_logs_34 *****************
 20305 ;; Defined at:
 20306 ;;		line 549 in file "UI.c"
 20307 ;; Parameters:    Size  Location     Type
 20308 ;;		None
 20309 ;; Auto vars:     Size  Location     Type
 20310 ;;		None
 20311 ;; Return value:  Size  Location     Type
 20312 ;;                  1    wreg      void 
 20313 ;; Registers used:
 20314 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20315 ;; Tracked objects:
 20316 ;;		On entry : 0/0
 20317 ;;		On exit  : 0/0
 20318 ;;		Unchanged: 0/0
 20319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20320 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20321 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20322 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20323 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20324 ;;Total ram usage:        0 bytes
 20325 ;; Hardware stack levels used:    1
 20326 ;; Hardware stack levels required when called:    3
 20327 ;; This function calls:
 20328 ;;		i2_lcdInst
 20329 ;;		i2_printf
 20330 ;; This function is called by:
 20331 ;;		_updateMenu
 20332 ;;		_inputHandler
 20333 ;; This function uses a non-reentrant model
 20334 ;;
 20335                           
 20336                           	psect	text71
 20337  004F06                     __ptext71:
 20338                           	opt stack 0
 20339  004F06                     _change_state_to_logs_34:
 20340                           	opt stack 18
 20341                           
 20342                           ;UI.c: 550: cur_state = 1034;
 20343                           
 20344                           ;incstack = 0
 20345  004F06  0E04               	movlw	4
 20346  004F08  0100               	movlb	0	; () banked
 20347  004F0A  6FED               	movwf	(_cur_state+1)& (0+255),b
 20348  004F0C  0E0A               	movlw	10
 20349  004F0E  6FEC               	movwf	_cur_state& (0+255),b
 20350                           
 20351                           ; BSR set to: 0
 20352                           ;UI.c: 551: lcdInst(0b10000000);;
 20353  004F10  0E80               	movlw	128
 20354  004F12  EC56  F029         	call	i2_lcdInst
 20355                           
 20356                           ;UI.c: 552: printf("LOG 3           ");
 20357  004F16  0EE7               	movlw	low STR_44
 20358  004F18  6E0D               	movwf	i2printf@f,c
 20359  004F1A  0EFC               	movlw	high STR_44
 20360  004F1C  6E0E               	movwf	i2printf@f+1,c
 20361  004F1E  ECE0  F00E         	call	i2_printf	;wreg free
 20362                           
 20363                           ;UI.c: 553: lcdInst(0b11000000);;
 20364  004F22  0EC0               	movlw	192
 20365  004F24  EC56  F029         	call	i2_lcdInst
 20366                           
 20367                           ;UI.c: 554: printf("LOG 4          <");
 20368  004F28  0EA2               	movlw	low STR_50
 20369  004F2A  6E0D               	movwf	i2printf@f,c
 20370  004F2C  0EFD               	movlw	high STR_50
 20371  004F2E  6E0E               	movwf	i2printf@f+1,c
 20372  004F30  ECE0  F00E         	call	i2_printf	;wreg free
 20373  004F34  0012               	return		;funcret
 20374  004F36                     __end_of_change_state_to_logs_34:
 20375                           	opt stack 0
 20376                           pclatu	equ	0xFFB
 20377                           pclath	equ	0xFFA
 20378                           tblptru	equ	0xFF8
 20379                           tblptrh	equ	0xFF7
 20380                           tblptrl	equ	0xFF6
 20381                           tablat	equ	0xFF5
 20382                           prodh	equ	0xFF4
 20383                           prodl	equ	0xFF3
 20384                           intcon	equ	0xFF2
 20385                           intcon2	equ	0xFF1
 20386                           intcon3	equ	0xFF0
 20387                           indf0	equ	0xFEF
 20388                           postinc0	equ	0xFEE
 20389                           fsr0h	equ	0xFEA
 20390                           fsr0l	equ	0xFE9
 20391                           wreg	equ	0xFE8
 20392                           postdec1	equ	0xFE5
 20393                           fsr1h	equ	0xFE2
 20394                           fsr1l	equ	0xFE1
 20395                           indf2	equ	0xFDF
 20396                           postinc2	equ	0xFDE
 20397                           postdec2	equ	0xFDD
 20398                           fsr2h	equ	0xFDA
 20399                           fsr2l	equ	0xFD9
 20400                           status	equ	0xFD8
 20401                           
 20402 ;; *************** function _change_state_to_logs_33 *****************
 20403 ;; Defined at:
 20404 ;;		line 542 in file "UI.c"
 20405 ;; Parameters:    Size  Location     Type
 20406 ;;		None
 20407 ;; Auto vars:     Size  Location     Type
 20408 ;;		None
 20409 ;; Return value:  Size  Location     Type
 20410 ;;                  1    wreg      void 
 20411 ;; Registers used:
 20412 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20413 ;; Tracked objects:
 20414 ;;		On entry : 0/0
 20415 ;;		On exit  : 0/0
 20416 ;;		Unchanged: 0/0
 20417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20418 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20419 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20420 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20421 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20422 ;;Total ram usage:        0 bytes
 20423 ;; Hardware stack levels used:    1
 20424 ;; Hardware stack levels required when called:    3
 20425 ;; This function calls:
 20426 ;;		i2_lcdInst
 20427 ;;		i2_printf
 20428 ;; This function is called by:
 20429 ;;		_updateMenu
 20430 ;;		_inputHandler
 20431 ;; This function uses a non-reentrant model
 20432 ;;
 20433                           
 20434                           	psect	text72
 20435  004F36                     __ptext72:
 20436                           	opt stack 0
 20437  004F36                     _change_state_to_logs_33:
 20438                           	opt stack 18
 20439                           
 20440                           ;UI.c: 543: cur_state = 1033;
 20441                           
 20442                           ;incstack = 0
 20443  004F36  0E04               	movlw	4
 20444  004F38  0100               	movlb	0	; () banked
 20445  004F3A  6FED               	movwf	(_cur_state+1)& (0+255),b
 20446  004F3C  0E09               	movlw	9
 20447  004F3E  6FEC               	movwf	_cur_state& (0+255),b
 20448                           
 20449                           ; BSR set to: 0
 20450                           ;UI.c: 544: lcdInst(0b10000000);;
 20451  004F40  0E80               	movlw	128
 20452  004F42  EC56  F029         	call	i2_lcdInst
 20453                           
 20454                           ;UI.c: 545: printf("LOG 3          <");
 20455  004F46  0E91               	movlw	low STR_46
 20456  004F48  6E0D               	movwf	i2printf@f,c
 20457  004F4A  0EFD               	movlw	high STR_46
 20458  004F4C  6E0E               	movwf	i2printf@f+1,c
 20459  004F4E  ECE0  F00E         	call	i2_printf	;wreg free
 20460                           
 20461                           ;UI.c: 546: lcdInst(0b11000000);;
 20462  004F52  0EC0               	movlw	192
 20463  004F54  EC56  F029         	call	i2_lcdInst
 20464                           
 20465                           ;UI.c: 547: printf("LOG 4           ");
 20466  004F58  0EF8               	movlw	low STR_48
 20467  004F5A  6E0D               	movwf	i2printf@f,c
 20468  004F5C  0EFC               	movlw	high STR_48
 20469  004F5E  6E0E               	movwf	i2printf@f+1,c
 20470  004F60  ECE0  F00E         	call	i2_printf	;wreg free
 20471  004F64  0012               	return		;funcret
 20472  004F66                     __end_of_change_state_to_logs_33:
 20473                           	opt stack 0
 20474                           pclatu	equ	0xFFB
 20475                           pclath	equ	0xFFA
 20476                           tblptru	equ	0xFF8
 20477                           tblptrh	equ	0xFF7
 20478                           tblptrl	equ	0xFF6
 20479                           tablat	equ	0xFF5
 20480                           prodh	equ	0xFF4
 20481                           prodl	equ	0xFF3
 20482                           intcon	equ	0xFF2
 20483                           intcon2	equ	0xFF1
 20484                           intcon3	equ	0xFF0
 20485                           indf0	equ	0xFEF
 20486                           postinc0	equ	0xFEE
 20487                           fsr0h	equ	0xFEA
 20488                           fsr0l	equ	0xFE9
 20489                           wreg	equ	0xFE8
 20490                           postdec1	equ	0xFE5
 20491                           fsr1h	equ	0xFE2
 20492                           fsr1l	equ	0xFE1
 20493                           indf2	equ	0xFDF
 20494                           postinc2	equ	0xFDE
 20495                           postdec2	equ	0xFDD
 20496                           fsr2h	equ	0xFDA
 20497                           fsr2l	equ	0xFD9
 20498                           status	equ	0xFD8
 20499                           
 20500 ;; *************** function _change_state_to_logs_23 *****************
 20501 ;; Defined at:
 20502 ;;		line 535 in file "UI.c"
 20503 ;; Parameters:    Size  Location     Type
 20504 ;;		None
 20505 ;; Auto vars:     Size  Location     Type
 20506 ;;		None
 20507 ;; Return value:  Size  Location     Type
 20508 ;;                  1    wreg      void 
 20509 ;; Registers used:
 20510 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20511 ;; Tracked objects:
 20512 ;;		On entry : 0/0
 20513 ;;		On exit  : 0/0
 20514 ;;		Unchanged: 0/0
 20515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20516 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20517 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20518 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20519 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20520 ;;Total ram usage:        0 bytes
 20521 ;; Hardware stack levels used:    1
 20522 ;; Hardware stack levels required when called:    3
 20523 ;; This function calls:
 20524 ;;		i2_lcdInst
 20525 ;;		i2_printf
 20526 ;; This function is called by:
 20527 ;;		_updateMenu
 20528 ;;		_inputHandler
 20529 ;; This function uses a non-reentrant model
 20530 ;;
 20531                           
 20532                           	psect	text73
 20533  005024                     __ptext73:
 20534                           	opt stack 0
 20535  005024                     _change_state_to_logs_23:
 20536                           	opt stack 18
 20537                           
 20538                           ;UI.c: 536: cur_state = 1023;
 20539                           
 20540                           ;incstack = 0
 20541  005024  0E03               	movlw	3
 20542  005026  0100               	movlb	0	; () banked
 20543  005028  6FED               	movwf	(_cur_state+1)& (0+255),b
 20544  00502A  69EC               	setf	_cur_state& (0+255),b
 20545                           
 20546                           ; BSR set to: 0
 20547                           ;UI.c: 537: lcdInst(0b10000000);;
 20548  00502C  0E80               	movlw	128
 20549  00502E  EC56  F029         	call	i2_lcdInst
 20550                           
 20551                           ;UI.c: 538: printf("LOG 2           ");
 20552  005032  0ED6               	movlw	low STR_40
 20553  005034  6E0D               	movwf	i2printf@f,c
 20554  005036  0EFC               	movlw	high STR_40
 20555  005038  6E0E               	movwf	i2printf@f+1,c
 20556  00503A  ECE0  F00E         	call	i2_printf	;wreg free
 20557                           
 20558                           ;UI.c: 539: lcdInst(0b11000000);;
 20559  00503E  0EC0               	movlw	192
 20560  005040  EC56  F029         	call	i2_lcdInst
 20561                           
 20562                           ;UI.c: 540: printf("LOG 3          <");
 20563  005044  0E91               	movlw	low STR_46
 20564  005046  6E0D               	movwf	i2printf@f,c
 20565  005048  0EFD               	movlw	high STR_46
 20566  00504A  6E0E               	movwf	i2printf@f+1,c
 20567  00504C  ECE0  F00E         	call	i2_printf	;wreg free
 20568  005050  0012               	return		;funcret
 20569  005052                     __end_of_change_state_to_logs_23:
 20570                           	opt stack 0
 20571                           pclatu	equ	0xFFB
 20572                           pclath	equ	0xFFA
 20573                           tblptru	equ	0xFF8
 20574                           tblptrh	equ	0xFF7
 20575                           tblptrl	equ	0xFF6
 20576                           tablat	equ	0xFF5
 20577                           prodh	equ	0xFF4
 20578                           prodl	equ	0xFF3
 20579                           intcon	equ	0xFF2
 20580                           intcon2	equ	0xFF1
 20581                           intcon3	equ	0xFF0
 20582                           indf0	equ	0xFEF
 20583                           postinc0	equ	0xFEE
 20584                           fsr0h	equ	0xFEA
 20585                           fsr0l	equ	0xFE9
 20586                           wreg	equ	0xFE8
 20587                           postdec1	equ	0xFE5
 20588                           fsr1h	equ	0xFE2
 20589                           fsr1l	equ	0xFE1
 20590                           indf2	equ	0xFDF
 20591                           postinc2	equ	0xFDE
 20592                           postdec2	equ	0xFDD
 20593                           fsr2h	equ	0xFDA
 20594                           fsr2l	equ	0xFD9
 20595                           status	equ	0xFD8
 20596                           
 20597 ;; *************** function _change_state_to_logs_22 *****************
 20598 ;; Defined at:
 20599 ;;		line 528 in file "UI.c"
 20600 ;; Parameters:    Size  Location     Type
 20601 ;;		None
 20602 ;; Auto vars:     Size  Location     Type
 20603 ;;		None
 20604 ;; Return value:  Size  Location     Type
 20605 ;;                  1    wreg      void 
 20606 ;; Registers used:
 20607 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20608 ;; Tracked objects:
 20609 ;;		On entry : 0/0
 20610 ;;		On exit  : 0/0
 20611 ;;		Unchanged: 0/0
 20612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20613 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20614 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20615 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20616 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20617 ;;Total ram usage:        0 bytes
 20618 ;; Hardware stack levels used:    1
 20619 ;; Hardware stack levels required when called:    3
 20620 ;; This function calls:
 20621 ;;		i2_lcdInst
 20622 ;;		i2_printf
 20623 ;; This function is called by:
 20624 ;;		_updateMenu
 20625 ;;		_inputHandler
 20626 ;; This function uses a non-reentrant model
 20627 ;;
 20628                           
 20629                           	psect	text74
 20630  004F66                     __ptext74:
 20631                           	opt stack 0
 20632  004F66                     _change_state_to_logs_22:
 20633                           	opt stack 18
 20634                           
 20635                           ;UI.c: 529: cur_state = 1022;
 20636                           
 20637                           ;incstack = 0
 20638  004F66  0E03               	movlw	3
 20639  004F68  0100               	movlb	0	; () banked
 20640  004F6A  6FED               	movwf	(_cur_state+1)& (0+255),b
 20641  004F6C  0EFE               	movlw	254
 20642  004F6E  6FEC               	movwf	_cur_state& (0+255),b
 20643                           
 20644                           ; BSR set to: 0
 20645                           ;UI.c: 530: lcdInst(0b10000000);;
 20646  004F70  0E80               	movlw	128
 20647  004F72  EC56  F029         	call	i2_lcdInst
 20648                           
 20649                           ;UI.c: 531: printf("LOG 2          <");
 20650  004F76  0E80               	movlw	low STR_42
 20651  004F78  6E0D               	movwf	i2printf@f,c
 20652  004F7A  0EFD               	movlw	high STR_42
 20653  004F7C  6E0E               	movwf	i2printf@f+1,c
 20654  004F7E  ECE0  F00E         	call	i2_printf	;wreg free
 20655                           
 20656                           ;UI.c: 532: lcdInst(0b11000000);;
 20657  004F82  0EC0               	movlw	192
 20658  004F84  EC56  F029         	call	i2_lcdInst
 20659                           
 20660                           ;UI.c: 533: printf("LOG 3           ");
 20661  004F88  0EE7               	movlw	low STR_44
 20662  004F8A  6E0D               	movwf	i2printf@f,c
 20663  004F8C  0EFC               	movlw	high STR_44
 20664  004F8E  6E0E               	movwf	i2printf@f+1,c
 20665  004F90  ECE0  F00E         	call	i2_printf	;wreg free
 20666  004F94  0012               	return		;funcret
 20667  004F96                     __end_of_change_state_to_logs_22:
 20668                           	opt stack 0
 20669                           pclatu	equ	0xFFB
 20670                           pclath	equ	0xFFA
 20671                           tblptru	equ	0xFF8
 20672                           tblptrh	equ	0xFF7
 20673                           tblptrl	equ	0xFF6
 20674                           tablat	equ	0xFF5
 20675                           prodh	equ	0xFF4
 20676                           prodl	equ	0xFF3
 20677                           intcon	equ	0xFF2
 20678                           intcon2	equ	0xFF1
 20679                           intcon3	equ	0xFF0
 20680                           indf0	equ	0xFEF
 20681                           postinc0	equ	0xFEE
 20682                           fsr0h	equ	0xFEA
 20683                           fsr0l	equ	0xFE9
 20684                           wreg	equ	0xFE8
 20685                           postdec1	equ	0xFE5
 20686                           fsr1h	equ	0xFE2
 20687                           fsr1l	equ	0xFE1
 20688                           indf2	equ	0xFDF
 20689                           postinc2	equ	0xFDE
 20690                           postdec2	equ	0xFDD
 20691                           fsr2h	equ	0xFDA
 20692                           fsr2l	equ	0xFD9
 20693                           status	equ	0xFD8
 20694                           
 20695 ;; *************** function _change_state_to_logs_12 *****************
 20696 ;; Defined at:
 20697 ;;		line 521 in file "UI.c"
 20698 ;; Parameters:    Size  Location     Type
 20699 ;;		None
 20700 ;; Auto vars:     Size  Location     Type
 20701 ;;		None
 20702 ;; Return value:  Size  Location     Type
 20703 ;;                  1    wreg      void 
 20704 ;; Registers used:
 20705 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20706 ;; Tracked objects:
 20707 ;;		On entry : 0/0
 20708 ;;		On exit  : 0/0
 20709 ;;		Unchanged: 0/0
 20710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20711 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20712 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20713 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20714 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20715 ;;Total ram usage:        0 bytes
 20716 ;; Hardware stack levels used:    1
 20717 ;; Hardware stack levels required when called:    3
 20718 ;; This function calls:
 20719 ;;		i2_lcdInst
 20720 ;;		i2_printf
 20721 ;; This function is called by:
 20722 ;;		_updateMenu
 20723 ;;		_inputHandler
 20724 ;; This function uses a non-reentrant model
 20725 ;;
 20726                           
 20727                           	psect	text75
 20728  004F96                     __ptext75:
 20729                           	opt stack 0
 20730  004F96                     _change_state_to_logs_12:
 20731                           	opt stack 18
 20732                           
 20733                           ;UI.c: 522: cur_state = 1012;
 20734                           
 20735                           ;incstack = 0
 20736  004F96  0E03               	movlw	3
 20737  004F98  0100               	movlb	0	; () banked
 20738  004F9A  6FED               	movwf	(_cur_state+1)& (0+255),b
 20739  004F9C  0EF4               	movlw	244
 20740  004F9E  6FEC               	movwf	_cur_state& (0+255),b
 20741                           
 20742                           ; BSR set to: 0
 20743                           ;UI.c: 523: lcdInst(0b10000000);;
 20744  004FA0  0E80               	movlw	128
 20745  004FA2  EC56  F029         	call	i2_lcdInst
 20746                           
 20747                           ;UI.c: 524: printf("LOG 1           ");
 20748  004FA6  0EC5               	movlw	low STR_41
 20749  004FA8  6E0D               	movwf	i2printf@f,c
 20750  004FAA  0EFC               	movlw	high STR_41
 20751  004FAC  6E0E               	movwf	i2printf@f+1,c
 20752  004FAE  ECE0  F00E         	call	i2_printf	;wreg free
 20753                           
 20754                           ;UI.c: 525: lcdInst(0b11000000);;
 20755  004FB2  0EC0               	movlw	192
 20756  004FB4  EC56  F029         	call	i2_lcdInst
 20757                           
 20758                           ;UI.c: 526: printf("LOG 2          <");
 20759  004FB8  0E80               	movlw	low STR_42
 20760  004FBA  6E0D               	movwf	i2printf@f,c
 20761  004FBC  0EFD               	movlw	high STR_42
 20762  004FBE  6E0E               	movwf	i2printf@f+1,c
 20763  004FC0  ECE0  F00E         	call	i2_printf	;wreg free
 20764  004FC4  0012               	return		;funcret
 20765  004FC6                     __end_of_change_state_to_logs_12:
 20766                           	opt stack 0
 20767                           pclatu	equ	0xFFB
 20768                           pclath	equ	0xFFA
 20769                           tblptru	equ	0xFF8
 20770                           tblptrh	equ	0xFF7
 20771                           tblptrl	equ	0xFF6
 20772                           tablat	equ	0xFF5
 20773                           prodh	equ	0xFF4
 20774                           prodl	equ	0xFF3
 20775                           intcon	equ	0xFF2
 20776                           intcon2	equ	0xFF1
 20777                           intcon3	equ	0xFF0
 20778                           indf0	equ	0xFEF
 20779                           postinc0	equ	0xFEE
 20780                           fsr0h	equ	0xFEA
 20781                           fsr0l	equ	0xFE9
 20782                           wreg	equ	0xFE8
 20783                           postdec1	equ	0xFE5
 20784                           fsr1h	equ	0xFE2
 20785                           fsr1l	equ	0xFE1
 20786                           indf2	equ	0xFDF
 20787                           postinc2	equ	0xFDE
 20788                           postdec2	equ	0xFDD
 20789                           fsr2h	equ	0xFDA
 20790                           fsr2l	equ	0xFD9
 20791                           status	equ	0xFD8
 20792                           
 20793 ;; *************** function _change_state_to_logs_11 *****************
 20794 ;; Defined at:
 20795 ;;		line 514 in file "UI.c"
 20796 ;; Parameters:    Size  Location     Type
 20797 ;;		None
 20798 ;; Auto vars:     Size  Location     Type
 20799 ;;		None
 20800 ;; Return value:  Size  Location     Type
 20801 ;;                  1    wreg      void 
 20802 ;; Registers used:
 20803 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20804 ;; Tracked objects:
 20805 ;;		On entry : 0/0
 20806 ;;		On exit  : 0/0
 20807 ;;		Unchanged: 0/0
 20808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20809 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20810 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20811 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20812 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20813 ;;Total ram usage:        0 bytes
 20814 ;; Hardware stack levels used:    1
 20815 ;; Hardware stack levels required when called:    3
 20816 ;; This function calls:
 20817 ;;		i2_lcdInst
 20818 ;;		i2_printf
 20819 ;; This function is called by:
 20820 ;;		_updateMenu
 20821 ;;		_inputHandler
 20822 ;; This function uses a non-reentrant model
 20823 ;;
 20824                           
 20825                           	psect	text76
 20826  004FC6                     __ptext76:
 20827                           	opt stack 0
 20828  004FC6                     _change_state_to_logs_11:
 20829                           	opt stack 18
 20830                           
 20831                           ;UI.c: 515: cur_state = 1011;
 20832                           
 20833                           ;incstack = 0
 20834  004FC6  0E03               	movlw	3
 20835  004FC8  0100               	movlb	0	; () banked
 20836  004FCA  6FED               	movwf	(_cur_state+1)& (0+255),b
 20837  004FCC  0EF3               	movlw	243
 20838  004FCE  6FEC               	movwf	_cur_state& (0+255),b
 20839                           
 20840                           ; BSR set to: 0
 20841                           ;UI.c: 516: lcdInst(0b10000000);;
 20842  004FD0  0E80               	movlw	128
 20843  004FD2  EC56  F029         	call	i2_lcdInst
 20844                           
 20845                           ;UI.c: 517: printf("LOG 1          <");
 20846  004FD6  0E6F               	movlw	low STR_39
 20847  004FD8  6E0D               	movwf	i2printf@f,c
 20848  004FDA  0EFD               	movlw	high STR_39
 20849  004FDC  6E0E               	movwf	i2printf@f+1,c
 20850  004FDE  ECE0  F00E         	call	i2_printf	;wreg free
 20851                           
 20852                           ;UI.c: 518: lcdInst(0b11000000);;
 20853  004FE2  0EC0               	movlw	192
 20854  004FE4  EC56  F029         	call	i2_lcdInst
 20855                           
 20856                           ;UI.c: 519: printf("LOG 2           ");
 20857  004FE8  0ED6               	movlw	low STR_40
 20858  004FEA  6E0D               	movwf	i2printf@f,c
 20859  004FEC  0EFC               	movlw	high STR_40
 20860  004FEE  6E0E               	movwf	i2printf@f+1,c
 20861  004FF0  ECE0  F00E         	call	i2_printf	;wreg free
 20862  004FF4  0012               	return		;funcret
 20863  004FF6                     __end_of_change_state_to_logs_11:
 20864                           	opt stack 0
 20865                           pclatu	equ	0xFFB
 20866                           pclath	equ	0xFFA
 20867                           tblptru	equ	0xFF8
 20868                           tblptrh	equ	0xFF7
 20869                           tblptrl	equ	0xFF6
 20870                           tablat	equ	0xFF5
 20871                           prodh	equ	0xFF4
 20872                           prodl	equ	0xFF3
 20873                           intcon	equ	0xFF2
 20874                           intcon2	equ	0xFF1
 20875                           intcon3	equ	0xFF0
 20876                           indf0	equ	0xFEF
 20877                           postinc0	equ	0xFEE
 20878                           fsr0h	equ	0xFEA
 20879                           fsr0l	equ	0xFE9
 20880                           wreg	equ	0xFE8
 20881                           postdec1	equ	0xFE5
 20882                           fsr1h	equ	0xFE2
 20883                           fsr1l	equ	0xFE1
 20884                           indf2	equ	0xFDF
 20885                           postinc2	equ	0xFDE
 20886                           postdec2	equ	0xFDD
 20887                           fsr2h	equ	0xFDA
 20888                           fsr2l	equ	0xFD9
 20889                           status	equ	0xFD8
 20890                           
 20891 ;; *************** function _dispLogs *****************
 20892 ;; Defined at:
 20893 ;;		line 467 in file "UI.c"
 20894 ;; Parameters:    Size  Location     Type
 20895 ;;  myLog           2   17[COMRAM] int 
 20896 ;; Auto vars:     Size  Location     Type
 20897 ;;		None
 20898 ;; Return value:  Size  Location     Type
 20899 ;;                  1    wreg      void 
 20900 ;; Registers used:
 20901 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 20902 ;; Tracked objects:
 20903 ;;		On entry : 0/0
 20904 ;;		On exit  : 0/0
 20905 ;;		Unchanged: 0/0
 20906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20907 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20908 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20909 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20910 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20911 ;;Total ram usage:        2 bytes
 20912 ;; Hardware stack levels used:    1
 20913 ;; Hardware stack levels required when called:    2
 20914 ;; This function calls:
 20915 ;;		_retrieveLog
 20916 ;; This function is called by:
 20917 ;;		_updateMenu
 20918 ;; This function uses a non-reentrant model
 20919 ;;
 20920                           
 20921                           	psect	text77
 20922  005170                     __ptext77:
 20923                           	opt stack 0
 20924  005170                     _dispLogs:
 20925                           	opt stack 20
 20926                           
 20927                           ;UI.c: 468: logstate = 1;
 20928                           
 20929                           ;incstack = 0
 20930  005170  0E00               	movlw	0
 20931  005172  0100               	movlb	0	; () banked
 20932  005174  6FF7               	movwf	(_logstate+1)& (0+255),b
 20933  005176  0E01               	movlw	1
 20934  005178  6FF6               	movwf	_logstate& (0+255),b
 20935                           
 20936                           ; BSR set to: 0
 20937                           ;UI.c: 469: log = myLog;
 20938  00517A  C012  F0F2         	movff	dispLogs@myLog,_log
 20939  00517E  C013  F0F3         	movff	dispLogs@myLog+1,_log+1
 20940                           
 20941                           ; BSR set to: 0
 20942                           ;UI.c: 470: retrieveLog(myLog - 1);
 20943  005182  0EFF               	movlw	255
 20944  005184  2412               	addwf	dispLogs@myLog,w,c
 20945  005186  6E07               	movwf	retrieveLog@logNum,c
 20946  005188  0EFF               	movlw	255
 20947  00518A  2013               	addwfc	dispLogs@myLog+1,w,c
 20948  00518C  6E08               	movwf	retrieveLog@logNum+1,c
 20949  00518E  EC8E  F01D         	call	_retrieveLog	;wreg free
 20950  005192  0012               	return		;funcret
 20951  005194                     __end_of_dispLogs:
 20952                           	opt stack 0
 20953                           pclatu	equ	0xFFB
 20954                           pclath	equ	0xFFA
 20955                           tblptru	equ	0xFF8
 20956                           tblptrh	equ	0xFF7
 20957                           tblptrl	equ	0xFF6
 20958                           tablat	equ	0xFF5
 20959                           prodh	equ	0xFF4
 20960                           prodl	equ	0xFF3
 20961                           intcon	equ	0xFF2
 20962                           intcon2	equ	0xFF1
 20963                           intcon3	equ	0xFF0
 20964                           indf0	equ	0xFEF
 20965                           postinc0	equ	0xFEE
 20966                           fsr0h	equ	0xFEA
 20967                           fsr0l	equ	0xFE9
 20968                           wreg	equ	0xFE8
 20969                           postdec1	equ	0xFE5
 20970                           fsr1h	equ	0xFE2
 20971                           fsr1l	equ	0xFE1
 20972                           indf2	equ	0xFDF
 20973                           postinc2	equ	0xFDE
 20974                           postdec2	equ	0xFDD
 20975                           fsr2h	equ	0xFDA
 20976                           fsr2l	equ	0xFD9
 20977                           status	equ	0xFD8
 20978                           
 20979 ;; *************** function _retrieveLog *****************
 20980 ;; Defined at:
 20981 ;;		line 134 in file "EEPROM.c"
 20982 ;; Parameters:    Size  Location     Type
 20983 ;;  logNum          2    6[COMRAM] int 
 20984 ;; Auto vars:     Size  Location     Type
 20985 ;;  i               2   13[COMRAM] int 
 20986 ;;  addr            2   15[COMRAM] unsigned short 
 20987 ;;  byte3           1   12[COMRAM] unsigned char 
 20988 ;;  byte2           1   11[COMRAM] unsigned char 
 20989 ;;  byte1           1   10[COMRAM] unsigned char 
 20990 ;; Return value:  Size  Location     Type
 20991 ;;                  1    wreg      void 
 20992 ;; Registers used:
 20993 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 20994 ;; Tracked objects:
 20995 ;;		On entry : 0/0
 20996 ;;		On exit  : 0/0
 20997 ;;		Unchanged: 0/0
 20998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20999 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21000 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21001 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21002 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21003 ;;Total ram usage:       11 bytes
 21004 ;; Hardware stack levels used:    1
 21005 ;; Hardware stack levels required when called:    1
 21006 ;; This function calls:
 21007 ;;		i2_EEPROM_read
 21008 ;;		i2___wmul
 21009 ;; This function is called by:
 21010 ;;		_dispLogs
 21011 ;; This function uses a non-reentrant model
 21012 ;;
 21013                           
 21014                           	psect	text78
 21015  003B1C                     __ptext78:
 21016                           	opt stack 0
 21017  003B1C                     _retrieveLog:
 21018                           	opt stack 20
 21019                           
 21020                           ;EEPROM.c: 140: unsigned short addr = 1 + logNum * 11;
 21021                           
 21022                           ;incstack = 0
 21023  003B1C  C007  F001         	movff	retrieveLog@logNum,i2___wmul@multiplier
 21024  003B20  C008  F002         	movff	retrieveLog@logNum+1,i2___wmul@multiplier+1
 21025  003B24  0E00               	movlw	0
 21026  003B26  6E04               	movwf	i2___wmul@multiplicand+1,c
 21027  003B28  0E0B               	movlw	11
 21028  003B2A  6E03               	movwf	i2___wmul@multiplicand,c
 21029  003B2C  EC92  F028         	call	i2___wmul	;wreg free
 21030  003B30  0E01               	movlw	1
 21031  003B32  2401               	addwf	?i2___wmul,w,c
 21032  003B34  6E10               	movwf	retrieveLog@addr,c
 21033  003B36  0E00               	movlw	0
 21034  003B38  2002               	addwfc	?i2___wmul+1,w,c
 21035  003B3A  6E11               	movwf	retrieveLog@addr+1,c
 21036                           
 21037                           ;EEPROM.c: 143: unsigned char byte1 = EEPROM_read(addr);
 21038  003B3C  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 21039  003B40  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 21040  003B44  EC22  F029         	call	i2_EEPROM_read	;wreg free
 21041  003B48  6E0B               	movwf	retrieveLog@byte1,c
 21042                           
 21043                           ;EEPROM.c: 144: log_completion = (int)(byte1 & 0b10000000);
 21044  003B4A  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 21045  003B4E  0E80               	movlw	128
 21046  003B50  1609               	andwf	??_retrieveLog,f,c
 21047  003B52  5009               	movf	??_retrieveLog,w,c
 21048  003B54  6E63               	movwf	_log_completion,c
 21049  003B56  6A64               	clrf	_log_completion+1,c
 21050                           
 21051                           ;EEPROM.c: 145: log_count_total = (int)(byte1 & 0b00001111);
 21052  003B58  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 21053  003B5C  0E0F               	movlw	15
 21054  003B5E  1609               	andwf	??_retrieveLog,f,c
 21055  003B60  5009               	movf	??_retrieveLog,w,c
 21056  003B62  0101               	movlb	1	; () banked
 21057  003B64  6F3F               	movwf	_log_count_total& (0+255),b
 21058  003B66  6B40               	clrf	(_log_count_total+1)& (0+255),b
 21059                           
 21060                           ; BSR set to: 1
 21061                           ;EEPROM.c: 146: addr++;
 21062  003B68  4A10               	infsnz	retrieveLog@addr,f,c
 21063  003B6A  2A11               	incf	retrieveLog@addr+1,f,c
 21064                           
 21065                           ; BSR set to: 1
 21066                           ;EEPROM.c: 149: unsigned char byte2 = EEPROM_read(addr);
 21067  003B6C  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 21068  003B70  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 21069  003B74  EC22  F029         	call	i2_EEPROM_read	;wreg free
 21070  003B78  6E0C               	movwf	retrieveLog@byte2,c
 21071                           
 21072                           ;EEPROM.c: 150: log_count_pop_no_tab = (int)((byte2 & 0b11110000)>> 4);
 21073  003B7A  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 21074  003B7E  3A09               	swapf	??_retrieveLog,f,c
 21075  003B80  0E0F               	movlw	15
 21076  003B82  1609               	andwf	??_retrieveLog,f,c
 21077  003B84  0E0F               	movlw	15
 21078  003B86  1609               	andwf	??_retrieveLog,f,c
 21079  003B88  5009               	movf	??_retrieveLog,w,c
 21080  003B8A  6E69               	movwf	_log_count_pop_no_tab,c
 21081  003B8C  6A6A               	clrf	_log_count_pop_no_tab+1,c
 21082                           
 21083                           ;EEPROM.c: 151: log_count_pop_w_tab = (int)(byte2 & 0b00001111);
 21084  003B8E  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 21085  003B92  0E0F               	movlw	15
 21086  003B94  1609               	andwf	??_retrieveLog,f,c
 21087  003B96  5009               	movf	??_retrieveLog,w,c
 21088  003B98  6E6B               	movwf	_log_count_pop_w_tab,c
 21089  003B9A  6A6C               	clrf	_log_count_pop_w_tab+1,c
 21090                           
 21091                           ;EEPROM.c: 152: addr++;
 21092  003B9C  4A10               	infsnz	retrieveLog@addr,f,c
 21093  003B9E  2A11               	incf	retrieveLog@addr+1,f,c
 21094                           
 21095                           ;EEPROM.c: 153: unsigned char byte3 = EEPROM_read(addr);
 21096  003BA0  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 21097  003BA4  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 21098  003BA8  EC22  F029         	call	i2_EEPROM_read	;wreg free
 21099  003BAC  6E0D               	movwf	retrieveLog@byte3,c
 21100                           
 21101                           ;EEPROM.c: 154: log_count_can_w_lab = (int)((byte3 & 0b11110000)>> 4);
 21102  003BAE  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 21103  003BB2  3A09               	swapf	??_retrieveLog,f,c
 21104  003BB4  0E0F               	movlw	15
 21105  003BB6  1609               	andwf	??_retrieveLog,f,c
 21106  003BB8  0E0F               	movlw	15
 21107  003BBA  1609               	andwf	??_retrieveLog,f,c
 21108  003BBC  5009               	movf	??_retrieveLog,w,c
 21109  003BBE  6E67               	movwf	_log_count_can_w_lab,c
 21110  003BC0  6A68               	clrf	_log_count_can_w_lab+1,c
 21111                           
 21112                           ;EEPROM.c: 155: log_count_can_no_lab = (int)(byte3 & 0b00001111);
 21113  003BC2  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 21114  003BC6  0E0F               	movlw	15
 21115  003BC8  1609               	andwf	??_retrieveLog,f,c
 21116  003BCA  5009               	movf	??_retrieveLog,w,c
 21117  003BCC  6E65               	movwf	_log_count_can_no_lab,c
 21118  003BCE  6A66               	clrf	_log_count_can_no_lab+1,c
 21119                           
 21120                           ;EEPROM.c: 156: addr++;
 21121  003BD0  4A10               	infsnz	retrieveLog@addr,f,c
 21122  003BD2  2A11               	incf	retrieveLog@addr+1,f,c
 21123                           
 21124                           ;EEPROM.c: 159: for(int i = 0; i < 7; i++){
 21125  003BD4  0E00               	movlw	0
 21126  003BD6  6E0F               	movwf	retrieveLog@i+1,c
 21127  003BD8  0E00               	movlw	0
 21128  003BDA  6E0E               	movwf	retrieveLog@i,c
 21129  003BDC                     i2l6771:
 21130  003BDC  BE0F               	btfsc	retrieveLog@i+1,7,c
 21131  003BDE  D006               	goto	i2l6775
 21132  003BE0  500F               	movf	retrieveLog@i+1,w,c
 21133  003BE2  E11E               	bnz	i2l6783
 21134  003BE4  0E07               	movlw	7
 21135  003BE6  5C0E               	subwf	retrieveLog@i,w,c
 21136  003BE8  B0D8               	btfsc	status,0,c
 21137  003BEA  D01A               	goto	i2l6783
 21138  003BEC                     i2l6775:
 21139                           
 21140                           ;EEPROM.c: 160: log_startTime[i] = (int)EEPROM_read(addr);
 21141  003BEC  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 21142  003BF0  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 21143  003BF4  EC22  F029         	call	i2_EEPROM_read	;wreg free
 21144  003BF8  6E09               	movwf	??_retrieveLog& (0+255),c
 21145  003BFA  6A0A               	clrf	(??_retrieveLog+1)& (0+255),c
 21146  003BFC  90D8               	bcf	status,0,c
 21147  003BFE  340E               	rlcf	retrieveLog@i,w,c
 21148  003C00  6ED9               	movwf	fsr2l,c
 21149  003C02  340F               	rlcf	retrieveLog@i+1,w,c
 21150  003C04  6EDA               	movwf	fsr2h,c
 21151  003C06  0E00               	movlw	low _log_startTime
 21152  003C08  26D9               	addwf	fsr2l,f,c
 21153  003C0A  0E01               	movlw	high _log_startTime
 21154  003C0C  22DA               	addwfc	fsr2h,f,c
 21155  003C0E  C009  FFDE         	movff	??_retrieveLog,postinc2
 21156  003C12  C00A  FFDD         	movff	??_retrieveLog+1,postdec2
 21157                           
 21158                           ;EEPROM.c: 161: addr++;
 21159  003C16  4A10               	infsnz	retrieveLog@addr,f,c
 21160  003C18  2A11               	incf	retrieveLog@addr+1,f,c
 21161  003C1A  4A0E               	infsnz	retrieveLog@i,f,c
 21162  003C1C  2A0F               	incf	retrieveLog@i+1,f,c
 21163  003C1E  D7DE               	goto	i2l6771
 21164  003C20                     i2l6783:
 21165                           
 21166                           ;EEPROM.c: 162: }
 21167                           ;EEPROM.c: 165: log_total_time = (int)EEPROM_read(addr);
 21168  003C20  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 21169  003C24  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 21170  003C28  EC22  F029         	call	i2_EEPROM_read	;wreg free
 21171  003C2C  6E09               	movwf	??_retrieveLog& (0+255),c
 21172  003C2E  5009               	movf	??_retrieveLog,w,c
 21173  003C30  0100               	movlb	0	; () banked
 21174  003C32  6FF4               	movwf	_log_total_time& (0+255),b
 21175  003C34  6BF5               	clrf	(_log_total_time+1)& (0+255),b
 21176                           
 21177                           ; BSR set to: 0
 21178  003C36  0012               	return		;funcret
 21179  003C38                     __end_of_retrieveLog:
 21180                           	opt stack 0
 21181                           pclatu	equ	0xFFB
 21182                           pclath	equ	0xFFA
 21183                           tblptru	equ	0xFF8
 21184                           tblptrh	equ	0xFF7
 21185                           tblptrl	equ	0xFF6
 21186                           tablat	equ	0xFF5
 21187                           prodh	equ	0xFF4
 21188                           prodl	equ	0xFF3
 21189                           intcon	equ	0xFF2
 21190                           intcon2	equ	0xFF1
 21191                           intcon3	equ	0xFF0
 21192                           indf0	equ	0xFEF
 21193                           postinc0	equ	0xFEE
 21194                           fsr0h	equ	0xFEA
 21195                           fsr0l	equ	0xFE9
 21196                           wreg	equ	0xFE8
 21197                           postdec1	equ	0xFE5
 21198                           fsr1h	equ	0xFE2
 21199                           fsr1l	equ	0xFE1
 21200                           indf2	equ	0xFDF
 21201                           postinc2	equ	0xFDE
 21202                           postdec2	equ	0xFDD
 21203                           fsr2h	equ	0xFDA
 21204                           fsr2l	equ	0xFD9
 21205                           status	equ	0xFD8
 21206                           
 21207 ;; *************** function i2_EEPROM_read *****************
 21208 ;; Defined at:
 21209 ;;		line 68 in file "EEPROM.c"
 21210 ;; Parameters:    Size  Location     Type
 21211 ;;  address         2    0[COMRAM] unsigned short 
 21212 ;; Auto vars:     Size  Location     Type
 21213 ;;		None
 21214 ;; Return value:  Size  Location     Type
 21215 ;;                  1    wreg      unsigned char 
 21216 ;; Registers used:
 21217 ;;		wreg, status,2
 21218 ;; Tracked objects:
 21219 ;;		On entry : 0/0
 21220 ;;		On exit  : 0/0
 21221 ;;		Unchanged: 0/0
 21222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21223 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21224 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21225 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21226 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21227 ;;Total ram usage:        2 bytes
 21228 ;; Hardware stack levels used:    1
 21229 ;; This function calls:
 21230 ;;		Nothing
 21231 ;; This function is called by:
 21232 ;;		_retrieveLog
 21233 ;; This function uses a non-reentrant model
 21234 ;;
 21235                           
 21236                           	psect	text79
 21237  005244                     __ptext79:
 21238                           	opt stack 0
 21239  005244                     i2_EEPROM_read:
 21240                           	opt stack 20
 21241                           
 21242                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
 21243                           
 21244                           ; BSR set to: 0
 21245                           ;incstack = 0
 21246  005244  5002               	movf	i2EEPROM_read@address+1,w,c
 21247  005246  6EAA               	movwf	4010,c	;volatile
 21248                           
 21249                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
 21250  005248  C001  FFA9         	movff	i2EEPROM_read@address,4009	;volatile
 21251                           
 21252                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
 21253  00524C  9EA6               	bcf	4006,7,c	;volatile
 21254                           
 21255                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
 21256  00524E  9CA6               	bcf	4006,6,c	;volatile
 21257                           
 21258                           ;EEPROM.c: 75: EECON1bits.RD = 1;
 21259  005250  80A6               	bsf	4006,0,c	;volatile
 21260  005252                     i2l1036:
 21261  005252  B0A6               	btfsc	4006,0,c	;volatile
 21262  005254  D7FE               	goto	i2l1036
 21263                           
 21264                           ;EEPROM.c: 81: return EEDATA;
 21265  005256  50A8               	movf	4008,w,c	;volatile
 21266  005258  0012               	return	
 21267  00525A                     __end_ofi2_EEPROM_read:
 21268                           	opt stack 0
 21269                           pclatu	equ	0xFFB
 21270                           pclath	equ	0xFFA
 21271                           tblptru	equ	0xFF8
 21272                           tblptrh	equ	0xFF7
 21273                           tblptrl	equ	0xFF6
 21274                           tablat	equ	0xFF5
 21275                           prodh	equ	0xFF4
 21276                           prodl	equ	0xFF3
 21277                           intcon	equ	0xFF2
 21278                           intcon2	equ	0xFF1
 21279                           intcon3	equ	0xFF0
 21280                           indf0	equ	0xFEF
 21281                           postinc0	equ	0xFEE
 21282                           fsr0h	equ	0xFEA
 21283                           fsr0l	equ	0xFE9
 21284                           wreg	equ	0xFE8
 21285                           postdec1	equ	0xFE5
 21286                           fsr1h	equ	0xFE2
 21287                           fsr1l	equ	0xFE1
 21288                           indf2	equ	0xFDF
 21289                           postinc2	equ	0xFDE
 21290                           postdec2	equ	0xFDD
 21291                           fsr2h	equ	0xFDA
 21292                           fsr2l	equ	0xFD9
 21293                           status	equ	0xFD8
 21294                           
 21295 ;; *************** function _printSortTimer *****************
 21296 ;; Defined at:
 21297 ;;		line 422 in file "sort.c"
 21298 ;; Parameters:    Size  Location     Type
 21299 ;;		None
 21300 ;; Auto vars:     Size  Location     Type
 21301 ;;  i               2   70[COMRAM] int 
 21302 ;;  i               2   72[COMRAM] int 
 21303 ;;  curTime        14   44[COMRAM] int [7]
 21304 ;;  timeDiff        2   68[COMRAM] unsigned int 
 21305 ;;  sec             2   64[COMRAM] int 
 21306 ;;  min             2   62[COMRAM] int 
 21307 ;;  cur_sec         2   60[COMRAM] unsigned int 
 21308 ;;  start_sec       2   58[COMRAM] unsigned int 
 21309 ;; Return value:  Size  Location     Type
 21310 ;;                  1    wreg      void 
 21311 ;; Registers used:
 21312 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21313 ;; Tracked objects:
 21314 ;;		On entry : 0/0
 21315 ;;		On exit  : 0/0
 21316 ;;		Unchanged: 0/0
 21317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21318 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21319 ;;      Locals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21320 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21321 ;;      Totals:        33       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21322 ;;Total ram usage:       33 bytes
 21323 ;; Hardware stack levels used:    1
 21324 ;; Hardware stack levels required when called:    3
 21325 ;; This function calls:
 21326 ;;		i2___lwdiv
 21327 ;;		i2___lwmod
 21328 ;;		i2___wmul
 21329 ;;		i2_delay_ms
 21330 ;;		i2_getRTC
 21331 ;;		i2_lcdInst
 21332 ;;		i2_printf
 21333 ;; This function is called by:
 21334 ;;		_handler
 21335 ;; This function uses a non-reentrant model
 21336 ;;
 21337                           
 21338                           	psect	text80
 21339  0029B6                     __ptext80:
 21340                           	opt stack 0
 21341  0029B6                     _printSortTimer:
 21342                           	opt stack 20
 21343                           
 21344                           ;sort.c: 423: getRTC();
 21345                           
 21346                           ;incstack = 0
 21347  0029B6  ECD1  F023         	call	i2_getRTC	;wreg free
 21348                           
 21349                           ;sort.c: 424: int curTime[7];
 21350                           ;sort.c: 425: for(int i = 0; i < 7; i++){
 21351  0029BA  0E00               	movlw	0
 21352  0029BC  6E4A               	movwf	printSortTimer@i+1,c
 21353  0029BE  0E00               	movlw	0
 21354  0029C0  6E49               	movwf	printSortTimer@i,c
 21355  0029C2                     i2l9171:
 21356  0029C2  BE4A               	btfsc	printSortTimer@i+1,7,c
 21357  0029C4  D006               	goto	i2l9175
 21358  0029C6  504A               	movf	printSortTimer@i+1,w,c
 21359  0029C8  E131               	bnz	i2l9181
 21360  0029CA  0E07               	movlw	7
 21361  0029CC  5C49               	subwf	printSortTimer@i,w,c
 21362  0029CE  B0D8               	btfsc	status,0,c
 21363  0029D0  D02D               	goto	i2l9181
 21364  0029D2                     i2l9175:
 21365                           
 21366                           ;sort.c: 426: curTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 21367  0029D2  0E1C               	movlw	low _time
 21368  0029D4  2449               	addwf	printSortTimer@i,w,c
 21369  0029D6  6ED9               	movwf	fsr2l,c
 21370  0029D8  0E01               	movlw	high _time
 21371  0029DA  204A               	addwfc	printSortTimer@i+1,w,c
 21372  0029DC  6EDA               	movwf	fsr2h,c
 21373  0029DE  50DF               	movf	indf2,w,c
 21374  0029E0  6E2A               	movwf	??_printSortTimer& (0+255),c
 21375  0029E2  3A2A               	swapf	??_printSortTimer,f,c
 21376  0029E4  0E0F               	movlw	15
 21377  0029E6  162A               	andwf	??_printSortTimer,f,c
 21378  0029E8  0E0F               	movlw	15
 21379  0029EA  162A               	andwf	??_printSortTimer,f,c
 21380  0029EC  502A               	movf	??_printSortTimer,w,c
 21381  0029EE  0D0A               	mullw	10
 21382  0029F0  0E1C               	movlw	low _time
 21383  0029F2  2449               	addwf	printSortTimer@i,w,c
 21384  0029F4  6ED9               	movwf	fsr2l,c
 21385  0029F6  0E01               	movlw	high _time
 21386  0029F8  204A               	addwfc	printSortTimer@i+1,w,c
 21387  0029FA  6EDA               	movwf	fsr2h,c
 21388  0029FC  50DF               	movf	indf2,w,c
 21389  0029FE  0B0F               	andlw	15
 21390  002A00  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 21391  002A02  6A2C               	clrf	(??_printSortTimer+2)& (0+255),c
 21392  002A04  50F3               	movf	prodl,w,c
 21393  002A06  262B               	addwf	??_printSortTimer+1,f,c
 21394  002A08  50F4               	movf	prodh,w,c
 21395  002A0A  222C               	addwfc	??_printSortTimer+2,f,c
 21396  002A0C  90D8               	bcf	status,0,c
 21397  002A0E  3449               	rlcf	printSortTimer@i,w,c
 21398  002A10  6ED9               	movwf	fsr2l,c
 21399  002A12  344A               	rlcf	printSortTimer@i+1,w,c
 21400  002A14  6EDA               	movwf	fsr2h,c
 21401  002A16  0E2D               	movlw	low printSortTimer@curTime
 21402  002A18  26D9               	addwf	fsr2l,f,c
 21403  002A1A  0E00               	movlw	high printSortTimer@curTime
 21404  002A1C  22DA               	addwfc	fsr2h,f,c
 21405  002A1E  C02B  FFDE         	movff	??_printSortTimer+1,postinc2
 21406  002A22  C02C  FFDD         	movff	??_printSortTimer+2,postdec2
 21407  002A26  4A49               	infsnz	printSortTimer@i,f,c
 21408  002A28  2A4A               	incf	printSortTimer@i+1,f,c
 21409  002A2A  D7CB               	goto	i2l9171
 21410  002A2C                     i2l9181:
 21411                           
 21412                           ;sort.c: 427: }
 21413                           ;sort.c: 428: unsigned int start_sec = startTime[0] + startTime[1]*60 + startTime[2]*360
      +                          0;
 21414  002A2C  C110  F001         	movff	_startTime+2,i2___wmul@multiplier
 21415  002A30  C111  F002         	movff	_startTime+3,i2___wmul@multiplier+1
 21416  002A34  0E00               	movlw	0
 21417  002A36  6E04               	movwf	i2___wmul@multiplicand+1,c
 21418  002A38  0E3C               	movlw	60
 21419  002A3A  6E03               	movwf	i2___wmul@multiplicand,c
 21420  002A3C  EC92  F028         	call	i2___wmul	;wreg free
 21421  002A40  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 21422  002A44  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 21423  002A48  C112  F001         	movff	_startTime+4,i2___wmul@multiplier
 21424  002A4C  C113  F002         	movff	_startTime+5,i2___wmul@multiplier+1
 21425  002A50  0E0E               	movlw	14
 21426  002A52  6E04               	movwf	i2___wmul@multiplicand+1,c
 21427  002A54  0E10               	movlw	16
 21428  002A56  6E03               	movwf	i2___wmul@multiplicand,c
 21429  002A58  EC92  F028         	call	i2___wmul	;wreg free
 21430  002A5C  5001               	movf	?i2___wmul,w,c
 21431  002A5E  262A               	addwf	??_printSortTimer,f,c
 21432  002A60  5002               	movf	?i2___wmul+1,w,c
 21433  002A62  222B               	addwfc	??_printSortTimer+1,f,c
 21434  002A64  0101               	movlb	1	; () banked
 21435  002A66  510E               	movf	_startTime& (0+255),w,b
 21436  002A68  242A               	addwf	??_printSortTimer,w,c
 21437  002A6A  6E3B               	movwf	printSortTimer@start_sec,c
 21438  002A6C  0101               	movlb	1	; () banked
 21439  002A6E  510F               	movf	(_startTime+1)& (0+255),w,b
 21440  002A70  202B               	addwfc	??_printSortTimer+1,w,c
 21441  002A72  6E3C               	movwf	printSortTimer@start_sec+1,c
 21442                           
 21443                           ;sort.c: 429: unsigned int cur_sec = curTime[0] + curTime[1]*60 + curTime[2]*3600;
 21444  002A74  C02F  F001         	movff	printSortTimer@curTime+2,i2___wmul@multiplier
 21445  002A78  C030  F002         	movff	printSortTimer@curTime+3,i2___wmul@multiplier+1
 21446  002A7C  0E00               	movlw	0
 21447  002A7E  6E04               	movwf	i2___wmul@multiplicand+1,c
 21448  002A80  0E3C               	movlw	60
 21449  002A82  6E03               	movwf	i2___wmul@multiplicand,c
 21450  002A84  EC92  F028         	call	i2___wmul	;wreg free
 21451  002A88  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 21452  002A8C  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 21453  002A90  C031  F001         	movff	printSortTimer@curTime+4,i2___wmul@multiplier
 21454  002A94  C032  F002         	movff	printSortTimer@curTime+5,i2___wmul@multiplier+1
 21455  002A98  0E0E               	movlw	14
 21456  002A9A  6E04               	movwf	i2___wmul@multiplicand+1,c
 21457  002A9C  0E10               	movlw	16
 21458  002A9E  6E03               	movwf	i2___wmul@multiplicand,c
 21459  002AA0  EC92  F028         	call	i2___wmul	;wreg free
 21460  002AA4  5001               	movf	?i2___wmul,w,c
 21461  002AA6  262A               	addwf	??_printSortTimer,f,c
 21462  002AA8  5002               	movf	?i2___wmul+1,w,c
 21463  002AAA  222B               	addwfc	??_printSortTimer+1,f,c
 21464  002AAC  502D               	movf	printSortTimer@curTime,w,c
 21465  002AAE  242A               	addwf	??_printSortTimer,w,c
 21466  002AB0  6E3D               	movwf	printSortTimer@cur_sec,c
 21467  002AB2  502E               	movf	printSortTimer@curTime+1,w,c
 21468  002AB4  202B               	addwfc	??_printSortTimer+1,w,c
 21469  002AB6  6E3E               	movwf	printSortTimer@cur_sec+1,c
 21470                           
 21471                           ;sort.c: 430: unsigned int timeDiff = cur_sec - start_sec;
 21472  002AB8  C03B  F02A         	movff	printSortTimer@start_sec,??_printSortTimer
 21473  002ABC  C03C  F02B         	movff	printSortTimer@start_sec+1,??_printSortTimer+1
 21474  002AC0  1E2A               	comf	??_printSortTimer,f,c
 21475  002AC2  1E2B               	comf	??_printSortTimer+1,f,c
 21476  002AC4  4A2A               	infsnz	??_printSortTimer,f,c
 21477  002AC6  2A2B               	incf	??_printSortTimer+1,f,c
 21478  002AC8  503D               	movf	printSortTimer@cur_sec,w,c
 21479  002ACA  242A               	addwf	??_printSortTimer,w,c
 21480  002ACC  6E45               	movwf	printSortTimer@timeDiff,c
 21481  002ACE  503E               	movf	printSortTimer@cur_sec+1,w,c
 21482  002AD0  202B               	addwfc	??_printSortTimer+1,w,c
 21483  002AD2  6E46               	movwf	printSortTimer@timeDiff+1,c
 21484                           
 21485                           ;sort.c: 432: total_time = timeDiff;
 21486  002AD4  C045  F0F8         	movff	printSortTimer@timeDiff,_total_time
 21487  002AD8  C046  F0F9         	movff	printSortTimer@timeDiff+1,_total_time+1
 21488                           
 21489                           ;sort.c: 434: if(f_most_recent_sort_time){
 21490  002ADC  0101               	movlb	1	; () banked
 21491  002ADE  5137               	movf	_f_most_recent_sort_time& (0+255),w,b
 21492  002AE0  0101               	movlb	1	; () banked
 21493  002AE2  1138               	iorwf	(_f_most_recent_sort_time+1)& (0+255),w,b
 21494  002AE4  B4D8               	btfsc	status,2,c
 21495  002AE6  D009               	goto	i2l9193
 21496                           
 21497                           ; BSR set to: 1
 21498                           ;sort.c: 435: most_recent_sort_time = total_time;
 21499  002AE8  C0F8  F06D         	movff	_total_time,_most_recent_sort_time
 21500  002AEC  C0F9  F06E         	movff	_total_time+1,_most_recent_sort_time+1
 21501                           
 21502                           ; BSR set to: 1
 21503                           ;sort.c: 436: f_most_recent_sort_time = 0;
 21504  002AF0  0E00               	movlw	0
 21505  002AF2  0101               	movlb	1	; () banked
 21506  002AF4  6F38               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
 21507  002AF6  0E00               	movlw	0
 21508  002AF8  6F37               	movwf	_f_most_recent_sort_time& (0+255),b
 21509  002AFA                     i2l9193:
 21510                           
 21511                           ; BSR set to: 1
 21512                           ;sort.c: 437: }
 21513                           ;sort.c: 439: if(total_time - most_recent_sort_time == 20){
 21514  002AFA  C06D  F02A         	movff	_most_recent_sort_time,??_printSortTimer
 21515  002AFE  C06E  F02B         	movff	_most_recent_sort_time+1,??_printSortTimer+1
 21516  002B02  1E2A               	comf	??_printSortTimer,f,c
 21517  002B04  1E2B               	comf	??_printSortTimer+1,f,c
 21518  002B06  4A2A               	infsnz	??_printSortTimer,f,c
 21519  002B08  2A2B               	incf	??_printSortTimer+1,f,c
 21520  002B0A  0100               	movlb	0	; () banked
 21521  002B0C  51F8               	movf	_total_time& (0+255),w,b
 21522  002B0E  262A               	addwf	??_printSortTimer,f,c
 21523  002B10  0100               	movlb	0	; () banked
 21524  002B12  51F9               	movf	(_total_time+1)& (0+255),w,b
 21525  002B14  222B               	addwfc	??_printSortTimer+1,f,c
 21526  002B16  0E14               	movlw	20
 21527  002B18  182A               	xorwf	??_printSortTimer,w,c
 21528  002B1A  102B               	iorwf	??_printSortTimer+1,w,c
 21529  002B1C  A4D8               	btfss	status,2,c
 21530  002B1E  D033               	goto	i2l9213
 21531                           
 21532                           ; BSR set to: 0
 21533                           ;sort.c: 440: LATBbits.LATB2 = 0;
 21534  002B20  948A               	bcf	3978,2,c	;volatile
 21535                           
 21536                           ; BSR set to: 0
 21537                           ;sort.c: 441: _delay((unsigned long)((2000)*(32000000/4000.0)));
 21538  002B22  0E52               	movlw	82
 21539  002B24  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 21540  002B26  0E2B               	movlw	43
 21541  002B28  6E2A               	movwf	??_printSortTimer& (0+255),c
 21542  002B2A  0E00               	movlw	0
 21543  002B2C                     i2u1003_47:
 21544  002B2C  2EE8               	decfsz	wreg,f,c
 21545  002B2E  D7FE               	bra	i2u1003_47
 21546  002B30  2E2A               	decfsz	??_printSortTimer& (0+255),f,c
 21547  002B32  D7FC               	bra	i2u1003_47
 21548  002B34  2E2B               	decfsz	(??_printSortTimer+1)& (0+255),f,c
 21549  002B36  D7FA               	bra	i2u1003_47
 21550  002B38  D000               	nop2	
 21551                           
 21552                           ;sort.c: 442: for(int i=0; i<46; i++){
 21553  002B3A  0E00               	movlw	0
 21554  002B3C  6E48               	movwf	printSortTimer@i_1185+1,c
 21555  002B3E  0E00               	movlw	0
 21556  002B40  6E47               	movwf	printSortTimer@i_1185,c
 21557  002B42  BE48               	btfsc	printSortTimer@i_1185+1,7,c
 21558  002B44  D006               	goto	i2l9205
 21559  002B46  5048               	movf	printSortTimer@i_1185+1,w,c
 21560  002B48  E11D               	bnz	i2l840
 21561  002B4A  0E2E               	movlw	46
 21562  002B4C  5C47               	subwf	printSortTimer@i_1185,w,c
 21563  002B4E  B0D8               	btfsc	status,0,c
 21564  002B50  D019               	goto	i2l840
 21565  002B52                     i2l9205:
 21566                           
 21567                           ;sort.c: 443: LATBbits.LATB2 = !LATBbits.LATB2;
 21568  002B52  B48A               	btfsc	3978,2,c	;volatile
 21569  002B54  D003               	goto	i2u822_40
 21570  002B56  6A2A               	clrf	??_printSortTimer& (0+255),c
 21571  002B58  2A2A               	incf	??_printSortTimer& (0+255),f,c
 21572  002B5A  D001               	goto	i2u823_48
 21573  002B5C                     i2u822_40:
 21574  002B5C  6A2A               	clrf	??_printSortTimer& (0+255),c
 21575  002B5E                     i2u823_48:
 21576  002B5E  462A               	rlncf	??_printSortTimer,f,c
 21577  002B60  462A               	rlncf	??_printSortTimer,f,c
 21578  002B62  508A               	movf	3978,w,c	;volatile
 21579  002B64  182A               	xorwf	??_printSortTimer,w,c
 21580  002B66  0BFB               	andlw	-5
 21581  002B68  182A               	xorwf	??_printSortTimer,w,c
 21582  002B6A  6E8A               	movwf	3978,c	;volatile
 21583                           
 21584                           ;sort.c: 444: delay_ms(45-i);
 21585  002B6C  5047               	movf	printSortTimer@i_1185,w,c
 21586  002B6E  0800               	sublw	0
 21587  002B70  0F2D               	addlw	45
 21588  002B72  ECFB  F028         	call	i2_delay_ms
 21589  002B76  4A47               	infsnz	printSortTimer@i_1185,f,c
 21590  002B78  2A48               	incf	printSortTimer@i_1185+1,f,c
 21591  002B7A  BE48               	btfsc	printSortTimer@i_1185+1,7,c
 21592  002B7C  D7EA               	goto	i2l9205
 21593  002B7E  5048               	movf	printSortTimer@i_1185+1,w,c
 21594  002B80  E101               	bnz	i2u824_40
 21595  002B82  D7E3               	goto	L14
 21596  002B84                     i2u824_40:
 21597  002B84                     i2l840:
 21598                           
 21599                           ;sort.c: 445: }
 21600                           ;sort.c: 446: LATBbits.LATB2 = 1;
 21601  002B84  848A               	bsf	3978,2,c	;volatile
 21602  002B86                     i2l9213:
 21603                           
 21604                           ;sort.c: 447: }
 21605                           ;sort.c: 449: if((total_time - most_recent_sort_time == 42) | (total_time == 179)){
 21606  002B86  C06D  F02A         	movff	_most_recent_sort_time,??_printSortTimer
 21607  002B8A  C06E  F02B         	movff	_most_recent_sort_time+1,??_printSortTimer+1
 21608  002B8E  1E2A               	comf	??_printSortTimer,f,c
 21609  002B90  1E2B               	comf	??_printSortTimer+1,f,c
 21610  002B92  4A2A               	infsnz	??_printSortTimer,f,c
 21611  002B94  2A2B               	incf	??_printSortTimer+1,f,c
 21612  002B96  0100               	movlb	0	; () banked
 21613  002B98  51F8               	movf	_total_time& (0+255),w,b
 21614  002B9A  262A               	addwf	??_printSortTimer,f,c
 21615  002B9C  0100               	movlb	0	; () banked
 21616  002B9E  51F9               	movf	(_total_time+1)& (0+255),w,b
 21617  002BA0  222B               	addwfc	??_printSortTimer+1,f,c
 21618  002BA2  0E2A               	movlw	42
 21619  002BA4  182A               	xorwf	??_printSortTimer,w,c
 21620  002BA6  102B               	iorwf	??_printSortTimer+1,w,c
 21621  002BA8  B4D8               	btfsc	status,2,c
 21622  002BAA  D007               	goto	i2l9217
 21623                           
 21624                           ; BSR set to: 0
 21625  002BAC  0EB3               	movlw	179
 21626  002BAE  0100               	movlb	0	; () banked
 21627  002BB0  19F8               	xorwf	_total_time& (0+255),w,b
 21628  002BB2  0100               	movlb	0	; () banked
 21629  002BB4  11F9               	iorwf	(_total_time+1)& (0+255),w,b
 21630  002BB6  A4D8               	btfss	status,2,c
 21631  002BB8  D003               	goto	i2l9219
 21632  002BBA                     i2l9217:
 21633                           
 21634                           ; BSR set to: 0
 21635                           ;sort.c: 450: machine_state = DoneSorting_state;
 21636  002BBA  0E02               	movlw	2
 21637  002BBC  0100               	movlb	0	; () banked
 21638  002BBE  6FFC               	movwf	_machine_state& (0+255),b
 21639  002BC0                     i2l9219:
 21640                           
 21641                           ; BSR set to: 0
 21642                           ;sort.c: 452: }
 21643                           ;sort.c: 454: int min = (timeDiff % 3600) / 60;
 21644  002BC0  0E0E               	movlw	14
 21645  002BC2  6E04               	movwf	i2___lwmod@divisor+1,c
 21646  002BC4  0E10               	movlw	16
 21647  002BC6  6E03               	movwf	i2___lwmod@divisor,c
 21648  002BC8  C045  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 21649  002BCC  C046  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 21650  002BD0  EC4A  F026         	call	i2___lwmod	;wreg free
 21651  002BD4  C001  F006         	movff	?i2___lwmod,i2___lwdiv@dividend
 21652  002BD8  C002  F007         	movff	?i2___lwmod+1,i2___lwdiv@dividend+1
 21653  002BDC  0E00               	movlw	0
 21654  002BDE  6E09               	movwf	i2___lwdiv@divisor+1,c
 21655  002BE0  0E3C               	movlw	60
 21656  002BE2  6E08               	movwf	i2___lwdiv@divisor,c
 21657  002BE4  EC8B  F025         	call	i2___lwdiv	;wreg free
 21658  002BE8  C006  F03F         	movff	?i2___lwdiv,printSortTimer@min
 21659  002BEC  C007  F040         	movff	?i2___lwdiv+1,printSortTimer@min+1
 21660                           
 21661                           ;sort.c: 455: int sec = (timeDiff % 3600) % 60;
 21662  002BF0  0E0E               	movlw	14
 21663  002BF2  6E04               	movwf	i2___lwmod@divisor+1,c
 21664  002BF4  0E10               	movlw	16
 21665  002BF6  6E03               	movwf	i2___lwmod@divisor,c
 21666  002BF8  C045  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 21667  002BFC  C046  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 21668  002C00  EC4A  F026         	call	i2___lwmod	;wreg free
 21669  002C04  C001  F043         	movff	?i2___lwmod,_printSortTimer$2547
 21670  002C08  C002  F044         	movff	?i2___lwmod+1,_printSortTimer$2547+1
 21671                           
 21672                           ;sort.c: 455: int sec = (timeDiff % 3600) % 60;
 21673  002C0C  C043  F001         	movff	_printSortTimer$2547,i2___lwmod@dividend
 21674  002C10  C044  F002         	movff	_printSortTimer$2547+1,i2___lwmod@dividend+1
 21675  002C14  0E00               	movlw	0
 21676  002C16  6E04               	movwf	i2___lwmod@divisor+1,c
 21677  002C18  0E3C               	movlw	60
 21678  002C1A  6E03               	movwf	i2___lwmod@divisor,c
 21679  002C1C  EC4A  F026         	call	i2___lwmod	;wreg free
 21680  002C20  C001  F041         	movff	?i2___lwmod,printSortTimer@sec
 21681  002C24  C002  F042         	movff	?i2___lwmod+1,printSortTimer@sec+1
 21682                           
 21683                           ;sort.c: 457: lcdInst(0b10000000);;
 21684  002C28  0E80               	movlw	128
 21685  002C2A  EC56  F029         	call	i2_lcdInst
 21686                           
 21687                           ;sort.c: 458: printf("SORTING...");
 21688  002C2E  0E7C               	movlw	low STR_64
 21689  002C30  6E0D               	movwf	i2printf@f,c
 21690  002C32  0EFF               	movlw	high STR_64
 21691  002C34  6E0E               	movwf	i2printf@f+1,c
 21692  002C36  ECE0  F00E         	call	i2_printf	;wreg free
 21693                           
 21694                           ;sort.c: 459: lcdInst(0b11000000);;
 21695  002C3A  0EC0               	movlw	192
 21696  002C3C  EC56  F029         	call	i2_lcdInst
 21697                           
 21698                           ;sort.c: 460: printf("TIME %d:%02d", min, sec);
 21699  002C40  0E42               	movlw	low STR_65
 21700  002C42  6E0D               	movwf	i2printf@f,c
 21701  002C44  0EFF               	movlw	high STR_65
 21702  002C46  6E0E               	movwf	i2printf@f+1,c
 21703  002C48  C03F  F00F         	movff	printSortTimer@min,?i2_printf+2
 21704  002C4C  C040  F010         	movff	printSortTimer@min+1,?i2_printf+3
 21705  002C50  C041  F011         	movff	printSortTimer@sec,?i2_printf+4
 21706  002C54  C042  F012         	movff	printSortTimer@sec+1,?i2_printf+5
 21707  002C58  ECE0  F00E         	call	i2_printf	;wreg free
 21708  002C5C  0012               	return		;funcret
 21709  002C5E                     __end_of_printSortTimer:
 21710                           	opt stack 0
 21711                           pclatu	equ	0xFFB
 21712                           pclath	equ	0xFFA
 21713                           tblptru	equ	0xFF8
 21714                           tblptrh	equ	0xFF7
 21715                           tblptrl	equ	0xFF6
 21716                           tablat	equ	0xFF5
 21717                           prodh	equ	0xFF4
 21718                           prodl	equ	0xFF3
 21719                           intcon	equ	0xFF2
 21720                           intcon2	equ	0xFF1
 21721                           intcon3	equ	0xFF0
 21722                           indf0	equ	0xFEF
 21723                           postinc0	equ	0xFEE
 21724                           fsr0h	equ	0xFEA
 21725                           fsr0l	equ	0xFE9
 21726                           wreg	equ	0xFE8
 21727                           postdec1	equ	0xFE5
 21728                           fsr1h	equ	0xFE2
 21729                           fsr1l	equ	0xFE1
 21730                           indf2	equ	0xFDF
 21731                           postinc2	equ	0xFDE
 21732                           postdec2	equ	0xFDD
 21733                           fsr2h	equ	0xFDA
 21734                           fsr2l	equ	0xFD9
 21735                           status	equ	0xFD8
 21736                           
 21737 ;; *************** function i2_printf *****************
 21738 ;; Defined at:
 21739 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 21740 ;; Parameters:    Size  Location     Type
 21741 ;;  f               2   12[COMRAM] PTR const unsigned char 
 21742 ;;		 -> STR_125(18), STR_124(18), STR_123(18), STR_122(18), 
 21743 ;;		 -> STR_121(18), STR_120(18), STR_119(17), STR_118(17), 
 21744 ;;		 -> STR_117(3), STR_116(15), STR_115(3), STR_114(15), 
 21745 ;;		 -> STR_113(11), STR_112(18), STR_111(18), STR_110(17), 
 21746 ;;		 -> STR_109(15), STR_108(15), STR_107(15), STR_106(17), 
 21747 ;;		 -> STR_105(17), STR_104(17), STR_103(16), STR_102(17), 
 21748 ;;		 -> STR_101(17), STR_100(17), STR_99(17), STR_98(17), 
 21749 ;;		 -> STR_97(17), STR_96(15), STR_95(11), STR_94(17), 
 21750 ;;		 -> STR_93(11), STR_92(17), STR_91(14), STR_90(15), 
 21751 ;;		 -> STR_89(14), STR_88(10), STR_87(9), STR_86(9), 
 21752 ;;		 -> STR_85(10), STR_84(10), STR_83(16), STR_82(15), 
 21753 ;;		 -> STR_81(3), STR_80(15), STR_79(13), STR_78(14), 
 21754 ;;		 -> STR_77(8), STR_76(14), STR_75(15), STR_74(12), 
 21755 ;;		 -> STR_73(14), STR_72(17), STR_71(14), STR_70(15), 
 21756 ;;		 -> STR_69(17), STR_68(17), STR_67(7), STR_66(21), 
 21757 ;;		 -> STR_65(13), STR_64(11), STR_63(24), STR_50(17), 
 21758 ;;		 -> STR_49(17), STR_48(17), STR_47(17), STR_46(17), 
 21759 ;;		 -> STR_45(17), STR_44(17), STR_43(17), STR_42(17), 
 21760 ;;		 -> STR_41(17), STR_40(17), STR_39(17), STR_38(17), 
 21761 ;;		 -> STR_37(17), STR_36(17), STR_35(17), STR_34(17), 
 21762 ;;		 -> STR_33(17), STR_32(17), STR_31(17), STR_30(17), 
 21763 ;;		 -> STR_29(3), STR_28(17), STR_27(17), STR_26(17), 
 21764 ;;		 -> STR_25(17), STR_24(17), STR_23(14), STR_22(10), 
 21765 ;;		 -> STR_21(24), STR_7(7), STR_6(17), STR_5(18), 
 21766 ;;		 -> STR_4(16), STR_3(18), STR_2(14), STR_1(18), 
 21767 ;; Auto vars:     Size  Location     Type
 21768 ;;  printf          4    0        struct .
 21769 ;;  printf          2   39[COMRAM] int 
 21770 ;;  printf          2   35[COMRAM] unsigned int 
 21771 ;;  printf          2   33[COMRAM] unsigned int 
 21772 ;;  printf          2   31[COMRAM] PTR void [1]
 21773 ;;		 -> ?i2_printf(2), ?_printf(2), 
 21774 ;;  printf          2   29[COMRAM] PTR const unsigned char 
 21775 ;;		 -> STR_126(7), count_total(2), printRTC@month(4), UI@month(4), 
 21776 ;;  printf          1   38[COMRAM] char 
 21777 ;;  printf          1   37[COMRAM] unsigned char 
 21778 ;;  printf          1   28[COMRAM] char 
 21779 ;; Return value:  Size  Location     Type
 21780 ;;                  2   12[COMRAM] int 
 21781 ;; Registers used:
 21782 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21783 ;; Tracked objects:
 21784 ;;		On entry : 0/0
 21785 ;;		On exit  : 0/0
 21786 ;;		Unchanged: 0/0
 21787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21788 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21789 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21790 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21791 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21792 ;;Total ram usage:       29 bytes
 21793 ;; Hardware stack levels used:    1
 21794 ;; Hardware stack levels required when called:    2
 21795 ;; This function calls:
 21796 ;;		i2___lwdiv
 21797 ;;		i2___lwmod
 21798 ;;		i2___wmul
 21799 ;;		i2_isdigit
 21800 ;;		i2_putch
 21801 ;; This function is called by:
 21802 ;;		_change_state_to_menu_11
 21803 ;;		_change_state_to_menu_23
 21804 ;;		_change_state_to_logs_11
 21805 ;;		_change_state_to_logs_12
 21806 ;;		_change_state_to_logs_22
 21807 ;;		_change_state_to_logs_23
 21808 ;;		_change_state_to_logs_33
 21809 ;;		_change_state_to_logs_34
 21810 ;;		_printSortTimer
 21811 ;;		i2_change_state_to_menu_start
 21812 ;;		i2_change_state_to_menu_12
 21813 ;;		i2_change_state_to_menu_22
 21814 ;;		i2_printRTC
 21815 ;; This function uses a non-reentrant model
 21816 ;;
 21817                           
 21818                           	psect	text81
 21819  001DC0                     __ptext81:
 21820                           	opt stack 0
 21821  001DC0                     i2_printf:
 21822                           	opt stack 19
 21823                           
 21824                           ;doprnt.c: 466: va_list ap;
 21825                           ;doprnt.c: 499: signed char c;
 21826                           ;doprnt.c: 501: int width;
 21827                           ;doprnt.c: 506: signed char prec;
 21828                           ;doprnt.c: 508: unsigned char flag;
 21829                           ;doprnt.c: 523: union {
 21830                           ;doprnt.c: 524: unsigned long vd;
 21831                           ;doprnt.c: 525: double integ;
 21832                           ;doprnt.c: 526: } tmpval;
 21833                           ;doprnt.c: 528: unsigned int val;
 21834                           ;doprnt.c: 529: unsigned len;
 21835                           ;doprnt.c: 530: const char * cp;
 21836                           ;doprnt.c: 533: *ap = __va_start();
 21837                           
 21838                           ;incstack = 0
 21839  001DC0  0E0F               	movlw	low (?i2_printf+2)
 21840  001DC2  6E20               	movwf	i2printf@ap,c
 21841  001DC4  0E00               	movlw	high (?i2_printf+2)
 21842  001DC6  6E21               	movwf	i2printf@ap+1,c
 21843                           
 21844                           ;doprnt.c: 536: while(c = *f++) {
 21845  001DC8  D1A4               	goto	i2l6595
 21846  001DCA                     i2l6465:
 21847                           
 21848                           ;doprnt.c: 538: if(c != '%')
 21849  001DCA  0E25               	movlw	37
 21850  001DCC  1827               	xorwf	i2printf@c,w,c
 21851  001DCE  B4D8               	btfsc	status,2,c
 21852  001DD0  D004               	goto	i2l6469
 21853                           
 21854                           ;doprnt.c: 540: {
 21855                           ;doprnt.c: 541: (putch(c) );
 21856  001DD2  5027               	movf	i2printf@c,w,c
 21857  001DD4  EC50  F029         	call	i2_putch
 21858                           
 21859                           ;doprnt.c: 542: continue;
 21860  001DD8  D19C               	goto	i2l6595
 21861  001DDA                     i2l6469:
 21862                           
 21863                           ;doprnt.c: 543: }
 21864                           ;doprnt.c: 546: width = 0;
 21865  001DDA  0E00               	movlw	0
 21866  001DDC  6E29               	movwf	i2printf@width+1,c
 21867  001DDE  0E00               	movlw	0
 21868  001DE0  6E28               	movwf	i2printf@width,c
 21869                           
 21870                           ;doprnt.c: 548: flag = 0;
 21871  001DE2  0E00               	movlw	0
 21872  001DE4  6E26               	movwf	i2printf@flag,c
 21873                           
 21874                           ;doprnt.c: 551: switch(*f) {
 21875                           
 21876                           ;doprnt.c: 550: for(;;) {
 21877  001DE6  D003               	goto	i2l6475
 21878  001DE8                     i2l6471:
 21879                           
 21880                           ;doprnt.c: 580: flag |= 0x04;
 21881  001DE8  8426               	bsf	i2printf@flag,2,c
 21882                           
 21883                           ;doprnt.c: 581: f++;
 21884  001DEA  4A0D               	infsnz	i2printf@f,f,c
 21885  001DEC  2A0E               	incf	i2printf@f+1,f,c
 21886  001DEE                     i2l6475:
 21887  001DEE  C00D  FFF6         	movff	i2printf@f,tblptrl
 21888  001DF2  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 21889  001DF6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 21890  001DF6  6AF8               	clrf	tblptru,c
 21891  001DF8                     	endif
 21892  001DF8                     	if	0	;tblptru may be non-zero
 21893  001DF8                     	endif
 21894  001DF8  0008               	tblrd		*
 21895  001DFA  50F5               	movf	tablat,w,c
 21896                           
 21897                           ; Switch size 1, requested type "space"
 21898                           ; Number of cases is 1, Range of values is 48 to 48
 21899                           ; switch strategies available:
 21900                           ; Name         Instructions Cycles
 21901                           ; simple_byte            4     3 (average)
 21902                           ;	Chosen strategy is simple_byte
 21903  001DFC  0A30               	xorlw	48	; case 48
 21904  001DFE  B4D8               	btfsc	status,2,c
 21905  001E00  D7F3               	goto	i2l6471
 21906                           
 21907                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 21908                           
 21909                           ;doprnt.c: 586: }
 21910                           
 21911                           ;doprnt.c: 585: break;
 21912  001E02  C00D  FFF6         	movff	i2printf@f,tblptrl
 21913  001E06  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 21914  001E0A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 21915  001E0A  6AF8               	clrf	tblptru,c
 21916  001E0C                     	endif
 21917  001E0C                     	if	0	;tblptru may be non-zero
 21918  001E0C                     	endif
 21919  001E0C  0008               	tblrd		*
 21920  001E0E  50F5               	movf	tablat,w,c
 21921  001E10  ECEC  F028         	call	i2_isdigit
 21922  001E14  A0D8               	btfss	status,0,c
 21923  001E16  D0A6               	goto	i2l6523
 21924                           
 21925                           ;doprnt.c: 598: width = 0;
 21926  001E18  0E00               	movlw	0
 21927  001E1A  6E29               	movwf	i2printf@width+1,c
 21928  001E1C  0E00               	movlw	0
 21929  001E1E  6E28               	movwf	i2printf@width,c
 21930  001E20                     i2l6481:
 21931                           
 21932                           ;doprnt.c: 600: width *= 10;
 21933  001E20  C028  F001         	movff	i2printf@width,i2___wmul@multiplier
 21934  001E24  C029  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 21935  001E28  0E00               	movlw	0
 21936  001E2A  6E04               	movwf	i2___wmul@multiplicand+1,c
 21937  001E2C  0E0A               	movlw	10
 21938  001E2E  6E03               	movwf	i2___wmul@multiplicand,c
 21939  001E30  EC92  F028         	call	i2___wmul	;wreg free
 21940  001E34  C001  F028         	movff	?i2___wmul,i2printf@width
 21941  001E38  C002  F029         	movff	?i2___wmul+1,i2printf@width+1
 21942                           
 21943                           ;doprnt.c: 601: width += *f++ - '0';
 21944  001E3C  0ED0               	movlw	208
 21945  001E3E  6E19               	movwf	??i2_printf& (0+255),c
 21946  001E40  0EFF               	movlw	255
 21947  001E42  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 21948  001E44  C00D  FFF6         	movff	i2printf@f,tblptrl
 21949  001E48  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 21950  001E4C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 21951  001E4C  6AF8               	clrf	tblptru,c
 21952  001E4E                     	endif
 21953  001E4E                     	if	0	;tblptru may be non-zero
 21954  001E4E                     	endif
 21955  001E4E  0008               	tblrd		*
 21956  001E50  50F5               	movf	tablat,w,c
 21957  001E52  6E1B               	movwf	(??i2_printf+2)& (0+255),c
 21958  001E54  6A1C               	clrf	(??i2_printf+3)& (0+255),c
 21959  001E56  5019               	movf	??i2_printf,w,c
 21960  001E58  261B               	addwf	??i2_printf+2,f,c
 21961  001E5A  501A               	movf	??i2_printf+1,w,c
 21962  001E5C  221C               	addwfc	??i2_printf+3,f,c
 21963  001E5E  501B               	movf	??i2_printf+2,w,c
 21964  001E60  2628               	addwf	i2printf@width,f,c
 21965  001E62  501C               	movf	??i2_printf+3,w,c
 21966  001E64  2229               	addwfc	i2printf@width+1,f,c
 21967  001E66  4A0D               	infsnz	i2printf@f,f,c
 21968  001E68  2A0E               	incf	i2printf@f+1,f,c
 21969                           
 21970                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 21971  001E6A  C00D  FFF6         	movff	i2printf@f,tblptrl
 21972  001E6E  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 21973  001E72                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 21974  001E72  6AF8               	clrf	tblptru,c
 21975  001E74                     	endif
 21976  001E74                     	if	0	;tblptru may be non-zero
 21977  001E74                     	endif
 21978  001E74  0008               	tblrd		*
 21979  001E76  50F5               	movf	tablat,w,c
 21980  001E78  ECEC  F028         	call	i2_isdigit
 21981  001E7C  A0D8               	btfss	status,0,c
 21982  001E7E  D072               	goto	i2l6523
 21983  001E80  D7CF               	goto	i2l6481
 21984  001E82                     i2l6489:
 21985                           
 21986                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 21987  001E82  C020  FFD9         	movff	i2printf@ap,fsr2l
 21988  001E86  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 21989  001E8A  CFDE F01E          	movff	postinc2,i2printf@cp
 21990  001E8E  CFDD F01F          	movff	postdec2,i2printf@cp+1
 21991  001E92  0E02               	movlw	2
 21992  001E94  2620               	addwf	i2printf@ap,f,c
 21993  001E96  0E00               	movlw	0
 21994  001E98  2221               	addwfc	i2printf@ap+1,f,c
 21995                           
 21996                           ;doprnt.c: 740: if(!cp)
 21997  001E9A  501E               	movf	i2printf@cp,w,c
 21998  001E9C  101F               	iorwf	i2printf@cp+1,w,c
 21999  001E9E  A4D8               	btfss	status,2,c
 22000  001EA0  D004               	goto	i2l6497
 22001                           
 22002                           ;doprnt.c: 741: cp = "(null)";
 22003  001EA2  0EB6               	movlw	low STR_126
 22004  001EA4  6E1E               	movwf	i2printf@cp,c
 22005  001EA6  0EFF               	movlw	high STR_126
 22006  001EA8  6E1F               	movwf	i2printf@cp+1,c
 22007  001EAA                     i2l6497:
 22008                           
 22009                           ;doprnt.c: 745: len = 0;
 22010  001EAA  0E00               	movlw	0
 22011  001EAC  6E23               	movwf	i2printf@len+1,c
 22012  001EAE  0E00               	movlw	0
 22013  001EB0  6E22               	movwf	i2printf@len,c
 22014                           
 22015                           ;doprnt.c: 746: while(cp[len])
 22016  001EB2  D002               	goto	i2l6501
 22017  001EB4                     i2l6499:
 22018                           
 22019                           ;doprnt.c: 747: len++;
 22020  001EB4  4A22               	infsnz	i2printf@len,f,c
 22021  001EB6  2A23               	incf	i2printf@len+1,f,c
 22022  001EB8                     i2l6501:
 22023  001EB8  5022               	movf	i2printf@len,w,c
 22024  001EBA  241E               	addwf	i2printf@cp,w,c
 22025  001EBC  6E19               	movwf	??i2_printf& (0+255),c
 22026  001EBE  5023               	movf	i2printf@len+1,w,c
 22027  001EC0  201F               	addwfc	i2printf@cp+1,w,c
 22028  001EC2  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 22029  001EC4  C019  FFF6         	movff	??i2_printf,tblptrl
 22030  001EC8  C01A  FFF7         	movff	??i2_printf+1,tblptrh
 22031  001ECC  0E00               	movlw	low (__mediumconst shr (0+16))
 22032  001ECE  6EF8               	movwf	tblptru,c
 22033  001ED0  0E0F               	movlw	(high __ramtop+-1)
 22034  001ED2  64F7               	cpfsgt	tblptrh,c
 22035  001ED4  D003               	bra	i2u494_47
 22036  001ED6  0008               	tblrd		*
 22037  001ED8  50F5               	movf	tablat,w,c
 22038  001EDA  D005               	bra	i2u494_40
 22039  001EDC                     i2u494_47:
 22040  001EDC  CFF6 FFE9          	movff	tblptrl,fsr0l
 22041  001EE0  CFF7 FFEA          	movff	tblptrh,fsr0h
 22042  001EE4  50EF               	movf	indf0,w,c
 22043  001EE6                     i2u494_40:
 22044  001EE6  0900               	iorlw	0
 22045  001EE8  A4D8               	btfss	status,2,c
 22046  001EEA  D7E4               	goto	i2l6499
 22047                           
 22048                           ;doprnt.c: 757: if(width > len)
 22049  001EEC  5028               	movf	i2printf@width,w,c
 22050  001EEE  5C22               	subwf	i2printf@len,w,c
 22051  001EF0  5029               	movf	i2printf@width+1,w,c
 22052  001EF2  5823               	subwfb	i2printf@len+1,w,c
 22053  001EF4  B0D8               	btfsc	status,0,c
 22054  001EF6  D005               	goto	i2l6507
 22055                           
 22056                           ;doprnt.c: 758: width -= len;
 22057  001EF8  5022               	movf	i2printf@len,w,c
 22058  001EFA  5E28               	subwf	i2printf@width,f,c
 22059  001EFC  5023               	movf	i2printf@len+1,w,c
 22060  001EFE  5A29               	subwfb	i2printf@width+1,f,c
 22061  001F00  D008               	goto	i2l6511
 22062  001F02                     i2l6507:
 22063                           
 22064                           ;doprnt.c: 759: else
 22065                           ;doprnt.c: 760: width = 0;
 22066  001F02  0E00               	movlw	0
 22067  001F04  6E29               	movwf	i2printf@width+1,c
 22068  001F06  0E00               	movlw	0
 22069  001F08  6E28               	movwf	i2printf@width,c
 22070                           
 22071                           ;doprnt.c: 764: while(width--)
 22072  001F0A  D003               	goto	i2l6511
 22073  001F0C                     i2l6509:
 22074                           
 22075                           ;doprnt.c: 765: (putch(' ') );
 22076  001F0C  0E20               	movlw	32
 22077  001F0E  EC50  F029         	call	i2_putch
 22078  001F12                     i2l6511:
 22079  001F12  0628               	decf	i2printf@width,f,c
 22080  001F14  A0D8               	btfss	status,0,c
 22081  001F16  0629               	decf	i2printf@width+1,f,c
 22082  001F18  2828               	incf	i2printf@width,w,c
 22083  001F1A  E1F8               	bnz	i2l6509
 22084  001F1C  2829               	incf	i2printf@width+1,w,c
 22085  001F1E  B4D8               	btfsc	status,2,c
 22086  001F20  D016               	goto	i2l6517
 22087  001F22  D7F4               	goto	i2l6509
 22088  001F24                     i2l6513:
 22089                           
 22090                           ;doprnt.c: 768: (putch(*cp++) );
 22091  001F24  C01E  FFF6         	movff	i2printf@cp,tblptrl
 22092  001F28  C01F  FFF7         	movff	i2printf@cp+1,tblptrh
 22093  001F2C  0E00               	movlw	low (__mediumconst shr (0+16))
 22094  001F2E  6EF8               	movwf	tblptru,c
 22095  001F30  0E0F               	movlw	(high __ramtop+-1)
 22096  001F32  64F7               	cpfsgt	tblptrh,c
 22097  001F34  D003               	bra	i2u498_47
 22098  001F36  0008               	tblrd		*
 22099  001F38  50F5               	movf	tablat,w,c
 22100  001F3A  D005               	bra	i2u498_40
 22101  001F3C                     i2u498_47:
 22102  001F3C  CFF6 FFE9          	movff	tblptrl,fsr0l
 22103  001F40  CFF7 FFEA          	movff	tblptrh,fsr0h
 22104  001F44  50EF               	movf	indf0,w,c
 22105  001F46                     i2u498_40:
 22106  001F46  EC50  F029         	call	i2_putch
 22107  001F4A  4A1E               	infsnz	i2printf@cp,f,c
 22108  001F4C  2A1F               	incf	i2printf@cp+1,f,c
 22109  001F4E                     i2l6517:
 22110  001F4E  0622               	decf	i2printf@len,f,c
 22111  001F50  A0D8               	btfss	status,0,c
 22112  001F52  0623               	decf	i2printf@len+1,f,c
 22113  001F54  2822               	incf	i2printf@len,w,c
 22114  001F56  E1E6               	bnz	i2l6513
 22115  001F58  2823               	incf	i2printf@len+1,w,c
 22116  001F5A  B4D8               	btfsc	status,2,c
 22117  001F5C  D0DA               	goto	i2l6595
 22118  001F5E  D7E2               	goto	i2l6513
 22119  001F60                     i2l6519:
 22120                           
 22121                           ;doprnt.c: 818: flag |= 0x40;
 22122  001F60  8C26               	bsf	i2printf@flag,6,c
 22123                           
 22124                           ;doprnt.c: 822: }
 22125                           
 22126                           ;doprnt.c: 819: break;
 22127  001F62  D01B               	goto	i2l1403
 22128  001F64                     i2l6523:
 22129  001F64  C00D  FFF6         	movff	i2printf@f,tblptrl
 22130  001F68  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 22131  001F6C  4A0D               	infsnz	i2printf@f,f,c
 22132  001F6E  2A0E               	incf	i2printf@f+1,f,c
 22133  001F70                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 22134  001F70  6AF8               	clrf	tblptru,c
 22135  001F72                     	endif
 22136  001F72                     	if	0	;tblptru may be non-zero
 22137  001F72                     	endif
 22138  001F72  0008               	tblrd		*
 22139  001F74  CFF5 F027          	movff	tablat,i2printf@c
 22140  001F78  5027               	movf	i2printf@c,w,c
 22141                           
 22142                           ; Switch size 1, requested type "space"
 22143                           ; Number of cases is 5, Range of values is 0 to 117
 22144                           ; switch strategies available:
 22145                           ; Name         Instructions Cycles
 22146                           ; simple_byte           16     9 (average)
 22147                           ;	Chosen strategy is simple_byte
 22148  001F7A  0A00               	xorlw	0	; case 0
 22149  001F7C  B4D8               	btfsc	status,2,c
 22150  001F7E  0012               	return	
 22151  001F80  0A64               	xorlw	100	; case 100
 22152  001F82  B4D8               	btfsc	status,2,c
 22153  001F84  D00A               	goto	i2l1403
 22154  001F86  0A0D               	xorlw	13	; case 105
 22155  001F88  B4D8               	btfsc	status,2,c
 22156  001F8A  D007               	goto	i2l1403
 22157  001F8C  0A1A               	xorlw	26	; case 115
 22158  001F8E  B4D8               	btfsc	status,2,c
 22159  001F90  D778               	goto	i2l6489
 22160  001F92  0A06               	xorlw	6	; case 117
 22161  001F94  B4D8               	btfsc	status,2,c
 22162  001F96  D7E4               	goto	i2l6519
 22163  001F98  D0BC               	goto	i2l6595
 22164  001F9A                     i2l1403:
 22165                           
 22166                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 22167  001F9A  BC26               	btfsc	i2printf@flag,6,c
 22168  001F9C  D015               	goto	i2l6535
 22169                           
 22170                           ;doprnt.c: 1253: {
 22171                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 22172  001F9E  C020  FFD9         	movff	i2printf@ap,fsr2l
 22173  001FA2  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 22174  001FA6  CFDE F024          	movff	postinc2,i2printf@val
 22175  001FAA  CFDD F025          	movff	postdec2,i2printf@val+1
 22176  001FAE  0E02               	movlw	2
 22177  001FB0  2620               	addwf	i2printf@ap,f,c
 22178  001FB2  0E00               	movlw	0
 22179  001FB4  2221               	addwfc	i2printf@ap+1,f,c
 22180                           
 22181                           ;doprnt.c: 1261: if((int)val < 0) {
 22182  001FB6  AE25               	btfss	i2printf@val+1,7,c
 22183  001FB8  D013               	goto	i2l6539
 22184                           
 22185                           ;doprnt.c: 1262: flag |= 0x03;
 22186  001FBA  0E03               	movlw	3
 22187  001FBC  1226               	iorwf	i2printf@flag,f,c
 22188                           
 22189                           ;doprnt.c: 1263: val = -val;
 22190  001FBE  6C24               	negf	i2printf@val,c
 22191  001FC0  1E25               	comf	i2printf@val+1,f,c
 22192  001FC2  B0D8               	btfsc	status,0,c
 22193  001FC4  2A25               	incf	i2printf@val+1,f,c
 22194                           
 22195                           ;doprnt.c: 1264: }
 22196                           ;doprnt.c: 1266: }
 22197  001FC6  D00C               	goto	i2l6539
 22198  001FC8                     i2l6535:
 22199                           
 22200                           ;doprnt.c: 1268: else
 22201                           ;doprnt.c: 1273: {
 22202                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 22203  001FC8  C020  FFD9         	movff	i2printf@ap,fsr2l
 22204  001FCC  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 22205  001FD0  CFDE F024          	movff	postinc2,i2printf@val
 22206  001FD4  CFDD F025          	movff	postdec2,i2printf@val+1
 22207  001FD8  0E02               	movlw	2
 22208  001FDA  2620               	addwf	i2printf@ap,f,c
 22209  001FDC  0E00               	movlw	0
 22210  001FDE  2221               	addwfc	i2printf@ap+1,f,c
 22211  001FE0                     i2l6539:
 22212                           
 22213                           ;doprnt.c: 1287: }
 22214                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 22215  001FE0  0E01               	movlw	1
 22216  001FE2  6E27               	movwf	i2printf@c,c
 22217  001FE4                     i2l6541:
 22218  001FE4  0E05               	movlw	5
 22219  001FE6  1827               	xorwf	i2printf@c,w,c
 22220  001FE8  B4D8               	btfsc	status,2,c
 22221  001FEA  D015               	goto	i2l6553
 22222                           
 22223                           ;doprnt.c: 1306: if(val < dpowers[c])
 22224  001FEC  5027               	movf	i2printf@c,w,c
 22225  001FEE  0D02               	mullw	2
 22226  001FF0  0E00               	movlw	low _dpowers
 22227  001FF2  24F3               	addwf	prodl,w,c
 22228  001FF4  6EF6               	movwf	tblptrl,c
 22229  001FF6  0EFB               	movlw	high _dpowers
 22230  001FF8  20F4               	addwfc	prodh,w,c
 22231  001FFA  6EF7               	movwf	tblptrh,c
 22232  001FFC                     	if	1	;There are 3 active tblptr bytes
 22233  001FFC  6AF8               	clrf	tblptru,c
 22234  001FFE  0E00               	movlw	low (__mediumconst shr (0+16))
 22235  002000  22F8               	addwfc	tblptru,f,c
 22236  002002                     	endif
 22237  002002  0009               	tblrd		*+
 22238  002004  50F5               	movf	tablat,w,c
 22239  002006  5C24               	subwf	i2printf@val,w,c
 22240  002008  0009               	tblrd		*+
 22241  00200A  50F5               	movf	tablat,w,c
 22242  00200C  5825               	subwfb	i2printf@val+1,w,c
 22243  00200E  A0D8               	btfss	status,0,c
 22244  002010  D002               	goto	i2l6553
 22245                           
 22246                           ;doprnt.c: 1307: break;
 22247  002012  2A27               	incf	i2printf@c,f,c
 22248  002014  D7E7               	goto	i2l6541
 22249  002016                     i2l6553:
 22250                           
 22251                           ;doprnt.c: 1345: if(width && flag & 0x03)
 22252  002016  5028               	movf	i2printf@width,w,c
 22253  002018  1029               	iorwf	i2printf@width+1,w,c
 22254  00201A  B4D8               	btfsc	status,2,c
 22255  00201C  D009               	goto	i2l6559
 22256  00201E  C026  F019         	movff	i2printf@flag,??i2_printf
 22257  002022  0E03               	movlw	3
 22258  002024  1619               	andwf	??i2_printf,f,c
 22259  002026  B4D8               	btfsc	status,2,c
 22260  002028  D003               	goto	i2l6559
 22261                           
 22262                           ;doprnt.c: 1346: width--;
 22263  00202A  0628               	decf	i2printf@width,f,c
 22264  00202C  A0D8               	btfss	status,0,c
 22265  00202E  0629               	decf	i2printf@width+1,f,c
 22266  002030                     i2l6559:
 22267                           
 22268                           ;doprnt.c: 1381: if(width > c)
 22269  002030  0E80               	movlw	128
 22270  002032  BE27               	btfsc	i2printf@c,7,c
 22271  002034  0E7F               	movlw	127
 22272  002036  6E19               	movwf	??i2_printf& (0+255),c
 22273  002038  5028               	movf	i2printf@width,w,c
 22274  00203A  5C27               	subwf	i2printf@c,w,c
 22275  00203C  5029               	movf	i2printf@width+1,w,c
 22276  00203E  0A80               	xorlw	128
 22277  002040  5819               	subwfb	??i2_printf& (0+255),w,c
 22278  002042  B0D8               	btfsc	status,0,c
 22279  002044  D007               	goto	i2l6563
 22280                           
 22281                           ;doprnt.c: 1382: width -= c;
 22282  002046  5027               	movf	i2printf@c,w,c
 22283  002048  5E28               	subwf	i2printf@width,f,c
 22284  00204A  0E00               	movlw	0
 22285  00204C  BE27               	btfsc	i2printf@c,7,c
 22286  00204E  0EFF               	movlw	255
 22287  002050  5A29               	subwfb	i2printf@width+1,f,c
 22288  002052  D004               	goto	i2l6565
 22289  002054                     i2l6563:
 22290                           
 22291                           ;doprnt.c: 1383: else
 22292                           ;doprnt.c: 1384: width = 0;
 22293  002054  0E00               	movlw	0
 22294  002056  6E29               	movwf	i2printf@width+1,c
 22295  002058  0E00               	movlw	0
 22296  00205A  6E28               	movwf	i2printf@width,c
 22297  00205C                     i2l6565:
 22298                           
 22299                           ;doprnt.c: 1387: if(flag & 0x04) {
 22300  00205C  A426               	btfss	i2printf@flag,2,c
 22301  00205E  D014               	goto	i2l6577
 22302                           
 22303                           ;doprnt.c: 1392: if(flag & 0x03)
 22304  002060  C026  F019         	movff	i2printf@flag,??i2_printf
 22305  002064  0E03               	movlw	3
 22306  002066  1619               	andwf	??i2_printf,f,c
 22307  002068  B4D8               	btfsc	status,2,c
 22308  00206A  D003               	goto	i2l6571
 22309                           
 22310                           ;doprnt.c: 1393: (putch('-') );
 22311  00206C  0E2D               	movlw	45
 22312  00206E  EC50  F029         	call	i2_putch
 22313  002072                     i2l6571:
 22314                           
 22315                           ;doprnt.c: 1415: if(width)
 22316  002072  5028               	movf	i2printf@width,w,c
 22317  002074  1029               	iorwf	i2printf@width+1,w,c
 22318  002076  B4D8               	btfsc	status,2,c
 22319  002078  D01E               	goto	i2l6587
 22320                           
 22321                           ;doprnt.c: 1417: (putch('0') );
 22322                           
 22323                           ;doprnt.c: 1416: do
 22324  00207A  0E30               	movlw	48
 22325  00207C  EC50  F029         	call	i2_putch
 22326                           
 22327                           ;doprnt.c: 1418: while(--width);
 22328  002080  0628               	decf	i2printf@width,f,c
 22329  002082  A0D8               	btfss	status,0,c
 22330  002084  0629               	decf	i2printf@width+1,f,c
 22331  002086  D7F5               	goto	i2l6571
 22332  002088                     i2l6577:
 22333                           
 22334                           ;doprnt.c: 1422: {
 22335                           ;doprnt.c: 1424: if(width
 22336                           ;doprnt.c: 1428: )
 22337  002088  5028               	movf	i2printf@width,w,c
 22338  00208A  1029               	iorwf	i2printf@width+1,w,c
 22339  00208C  B4D8               	btfsc	status,2,c
 22340  00208E  D00A               	goto	i2l6583
 22341  002090                     i2l6579:
 22342                           
 22343                           ;doprnt.c: 1430: (putch(' ') );
 22344  002090  0E20               	movlw	32
 22345  002092  EC50  F029         	call	i2_putch
 22346                           
 22347                           ;doprnt.c: 1431: while(--width);
 22348  002096  0628               	decf	i2printf@width,f,c
 22349  002098  A0D8               	btfss	status,0,c
 22350  00209A  0629               	decf	i2printf@width+1,f,c
 22351  00209C  5028               	movf	i2printf@width,w,c
 22352  00209E  1029               	iorwf	i2printf@width+1,w,c
 22353  0020A0  A4D8               	btfss	status,2,c
 22354  0020A2  D7F6               	goto	i2l6579
 22355  0020A4                     i2l6583:
 22356                           
 22357                           ;doprnt.c: 1438: if(flag & 0x03)
 22358  0020A4  C026  F019         	movff	i2printf@flag,??i2_printf
 22359  0020A8  0E03               	movlw	3
 22360  0020AA  1619               	andwf	??i2_printf,f,c
 22361  0020AC  B4D8               	btfsc	status,2,c
 22362  0020AE  D003               	goto	i2l6587
 22363                           
 22364                           ;doprnt.c: 1439: (putch('-') );
 22365  0020B0  0E2D               	movlw	45
 22366  0020B2  EC50  F029         	call	i2_putch
 22367  0020B6                     i2l6587:
 22368                           
 22369                           ;doprnt.c: 1469: }
 22370                           ;doprnt.c: 1472: prec = c;
 22371  0020B6  C027  F01D         	movff	i2printf@c,i2printf@prec
 22372                           
 22373                           ;doprnt.c: 1474: while(prec--) {
 22374  0020BA  D027               	goto	i2l6593
 22375  0020BC                     i2l6589:
 22376                           
 22377                           ;doprnt.c: 1478: {
 22378                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 22379  0020BC  501D               	movf	i2printf@prec,w,c
 22380  0020BE  0D02               	mullw	2
 22381  0020C0  0E00               	movlw	low _dpowers
 22382  0020C2  24F3               	addwf	prodl,w,c
 22383  0020C4  6EF6               	movwf	tblptrl,c
 22384  0020C6  0EFB               	movlw	high _dpowers
 22385  0020C8  20F4               	addwfc	prodh,w,c
 22386  0020CA  6EF7               	movwf	tblptrh,c
 22387  0020CC                     	if	1	;There are 3 active tblptr bytes
 22388  0020CC  6AF8               	clrf	tblptru,c
 22389  0020CE  0E00               	movlw	low (__mediumconst shr (0+16))
 22390  0020D0  22F8               	addwfc	tblptru,f,c
 22391  0020D2                     	endif
 22392  0020D2  0009               	tblrd		*+
 22393  0020D4  CFF5 F008          	movff	tablat,i2___lwdiv@divisor
 22394  0020D8  000A               	tblrd		*-
 22395  0020DA  CFF5 F009          	movff	tablat,i2___lwdiv@divisor+1
 22396  0020DE  C024  F006         	movff	i2printf@val,i2___lwdiv@dividend
 22397  0020E2  C025  F007         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 22398  0020E6  EC8B  F025         	call	i2___lwdiv	;wreg free
 22399  0020EA  C006  F001         	movff	?i2___lwdiv,i2___lwmod@dividend
 22400  0020EE  C007  F002         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 22401  0020F2  0E00               	movlw	0
 22402  0020F4  6E04               	movwf	i2___lwmod@divisor+1,c
 22403  0020F6  0E0A               	movlw	10
 22404  0020F8  6E03               	movwf	i2___lwmod@divisor,c
 22405  0020FA  EC4A  F026         	call	i2___lwmod	;wreg free
 22406  0020FE  5001               	movf	?i2___lwmod,w,c
 22407  002100  0F30               	addlw	48
 22408  002102  6E27               	movwf	i2printf@c,c
 22409                           
 22410                           ;doprnt.c: 1523: }
 22411                           ;doprnt.c: 1524: (putch(c) );
 22412  002104  5027               	movf	i2printf@c,w,c
 22413  002106  EC50  F029         	call	i2_putch
 22414  00210A                     i2l6593:
 22415  00210A  061D               	decf	i2printf@prec,f,c
 22416  00210C  281D               	incf	i2printf@prec,w,c
 22417  00210E  A4D8               	btfss	status,2,c
 22418  002110  D7D5               	goto	i2l6589
 22419  002112                     i2l6595:
 22420  002112  C00D  FFF6         	movff	i2printf@f,tblptrl
 22421  002116  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 22422  00211A  4A0D               	infsnz	i2printf@f,f,c
 22423  00211C  2A0E               	incf	i2printf@f+1,f,c
 22424  00211E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 22425  00211E  6AF8               	clrf	tblptru,c
 22426  002120                     	endif
 22427  002120                     	if	0	;tblptru may be non-zero
 22428  002120                     	endif
 22429  002120  0008               	tblrd		*
 22430  002122  CFF5 F027          	movff	tablat,i2printf@c
 22431  002126  5027               	movf	i2printf@c,w,c
 22432  002128  B4D8               	btfsc	status,2,c
 22433  00212A  0012               	return	
 22434  00212C  D64E               	goto	i2l6465
 22435  00212E                     __end_ofi2_printf:
 22436                           	opt stack 0
 22437                           pclatu	equ	0xFFB
 22438                           pclath	equ	0xFFA
 22439                           tblptru	equ	0xFF8
 22440                           tblptrh	equ	0xFF7
 22441                           tblptrl	equ	0xFF6
 22442                           tablat	equ	0xFF5
 22443                           prodh	equ	0xFF4
 22444                           prodl	equ	0xFF3
 22445                           intcon	equ	0xFF2
 22446                           intcon2	equ	0xFF1
 22447                           intcon3	equ	0xFF0
 22448                           indf0	equ	0xFEF
 22449                           postinc0	equ	0xFEE
 22450                           fsr0h	equ	0xFEA
 22451                           fsr0l	equ	0xFE9
 22452                           wreg	equ	0xFE8
 22453                           postdec1	equ	0xFE5
 22454                           fsr1h	equ	0xFE2
 22455                           fsr1l	equ	0xFE1
 22456                           indf2	equ	0xFDF
 22457                           postinc2	equ	0xFDE
 22458                           postdec2	equ	0xFDD
 22459                           fsr2h	equ	0xFDA
 22460                           fsr2l	equ	0xFD9
 22461                           status	equ	0xFD8
 22462                           
 22463 ;; *************** function i2_putch *****************
 22464 ;; Defined at:
 22465 ;;		line 20 in file "lcd.c"
 22466 ;; Parameters:    Size  Location     Type
 22467 ;;  data            1    wreg     unsigned char 
 22468 ;; Auto vars:     Size  Location     Type
 22469 ;;  data            1    2[COMRAM] unsigned char 
 22470 ;; Return value:  Size  Location     Type
 22471 ;;                  1    wreg      void 
 22472 ;; Registers used:
 22473 ;;		wreg, status,2, status,0, cstack
 22474 ;; Tracked objects:
 22475 ;;		On entry : 0/0
 22476 ;;		On exit  : 0/0
 22477 ;;		Unchanged: 0/0
 22478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22479 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22480 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22481 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22482 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22483 ;;Total ram usage:        1 bytes
 22484 ;; Hardware stack levels used:    1
 22485 ;; Hardware stack levels required when called:    1
 22486 ;; This function calls:
 22487 ;;		i2_lcdNibble
 22488 ;; This function is called by:
 22489 ;;		i2_printf
 22490 ;; This function uses a non-reentrant model
 22491 ;;
 22492                           
 22493                           	psect	text82
 22494  0052A0                     __ptext82:
 22495                           	opt stack 0
 22496  0052A0                     i2_putch:
 22497                           	opt stack 19
 22498                           
 22499                           ;incstack = 0
 22500                           ;i2putch@data stored from wreg
 22501  0052A0  6E03               	movwf	i2putch@data,c
 22502                           
 22503                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 22504  0052A2  848C               	bsf	3980,2,c	;volatile
 22505                           
 22506                           ;lcd.c: 22: lcdNibble(data);
 22507  0052A4  5003               	movf	i2putch@data,w,c
 22508  0052A6  EC60  F025         	call	i2_lcdNibble
 22509  0052AA  0012               	return		;funcret
 22510  0052AC                     __end_ofi2_putch:
 22511                           	opt stack 0
 22512                           pclatu	equ	0xFFB
 22513                           pclath	equ	0xFFA
 22514                           tblptru	equ	0xFF8
 22515                           tblptrh	equ	0xFF7
 22516                           tblptrl	equ	0xFF6
 22517                           tablat	equ	0xFF5
 22518                           prodh	equ	0xFF4
 22519                           prodl	equ	0xFF3
 22520                           intcon	equ	0xFF2
 22521                           intcon2	equ	0xFF1
 22522                           intcon3	equ	0xFF0
 22523                           indf0	equ	0xFEF
 22524                           postinc0	equ	0xFEE
 22525                           fsr0h	equ	0xFEA
 22526                           fsr0l	equ	0xFE9
 22527                           wreg	equ	0xFE8
 22528                           postdec1	equ	0xFE5
 22529                           fsr1h	equ	0xFE2
 22530                           fsr1l	equ	0xFE1
 22531                           indf2	equ	0xFDF
 22532                           postinc2	equ	0xFDE
 22533                           postdec2	equ	0xFDD
 22534                           fsr2h	equ	0xFDA
 22535                           fsr2l	equ	0xFD9
 22536                           status	equ	0xFD8
 22537                           
 22538 ;; *************** function i2_isdigit *****************
 22539 ;; Defined at:
 22540 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 22541 ;; Parameters:    Size  Location     Type
 22542 ;;  c               1    wreg     unsigned char 
 22543 ;; Auto vars:     Size  Location     Type
 22544 ;;  c               1    2[COMRAM] unsigned char 
 22545 ;; Return value:  Size  Location     Type
 22546 ;;		None               void
 22547 ;; Registers used:
 22548 ;;		wreg, status,2, status,0
 22549 ;; Tracked objects:
 22550 ;;		On entry : 0/0
 22551 ;;		On exit  : 0/0
 22552 ;;		Unchanged: 0/0
 22553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22554 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22555 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22556 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22557 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22558 ;;Total ram usage:        3 bytes
 22559 ;; Hardware stack levels used:    1
 22560 ;; This function calls:
 22561 ;;		Nothing
 22562 ;; This function is called by:
 22563 ;;		i2_printf
 22564 ;; This function uses a non-reentrant model
 22565 ;;
 22566                           
 22567                           	psect	text83
 22568  0051D8                     __ptext83:
 22569                           	opt stack 0
 22570  0051D8                     i2_isdigit:
 22571                           	opt stack 20
 22572                           
 22573                           ;incstack = 0
 22574                           ;i2isdigit@c stored from wreg
 22575  0051D8  6E03               	movwf	i2isdigit@c,c
 22576  0051DA  0E00               	movlw	0
 22577  0051DC  6E02               	movwf	i2_isdigit$2057,c
 22578  0051DE  0E3A               	movlw	58
 22579  0051E0  6003               	cpfslt	i2isdigit@c,c
 22580  0051E2  D005               	goto	i2l6165
 22581  0051E4  0E2F               	movlw	47
 22582  0051E6  6403               	cpfsgt	i2isdigit@c,c
 22583  0051E8  D002               	goto	i2l6165
 22584  0051EA  0E01               	movlw	1
 22585  0051EC  6E02               	movwf	i2_isdigit$2057,c
 22586  0051EE                     i2l6165:
 22587  0051EE  C002  F001         	movff	i2_isdigit$2057,??i2_isdigit
 22588  0051F2  3001               	rrcf	??i2_isdigit,w,c
 22589  0051F4  0012               	return	
 22590  0051F6                     __end_ofi2_isdigit:
 22591                           	opt stack 0
 22592                           pclatu	equ	0xFFB
 22593                           pclath	equ	0xFFA
 22594                           tblptru	equ	0xFF8
 22595                           tblptrh	equ	0xFF7
 22596                           tblptrl	equ	0xFF6
 22597                           tablat	equ	0xFF5
 22598                           prodh	equ	0xFF4
 22599                           prodl	equ	0xFF3
 22600                           intcon	equ	0xFF2
 22601                           intcon2	equ	0xFF1
 22602                           intcon3	equ	0xFF0
 22603                           indf0	equ	0xFEF
 22604                           postinc0	equ	0xFEE
 22605                           fsr0h	equ	0xFEA
 22606                           fsr0l	equ	0xFE9
 22607                           wreg	equ	0xFE8
 22608                           postdec1	equ	0xFE5
 22609                           fsr1h	equ	0xFE2
 22610                           fsr1l	equ	0xFE1
 22611                           indf2	equ	0xFDF
 22612                           postinc2	equ	0xFDE
 22613                           postdec2	equ	0xFDD
 22614                           fsr2h	equ	0xFDA
 22615                           fsr2l	equ	0xFD9
 22616                           status	equ	0xFD8
 22617                           
 22618 ;; *************** function i2___wmul *****************
 22619 ;; Defined at:
 22620 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 22621 ;; Parameters:    Size  Location     Type
 22622 ;;  multiplier      2    0[COMRAM] unsigned int 
 22623 ;;  multiplicand    2    2[COMRAM] unsigned int 
 22624 ;; Auto vars:     Size  Location     Type
 22625 ;;  __wmul          2    4[COMRAM] unsigned int 
 22626 ;; Return value:  Size  Location     Type
 22627 ;;                  2    0[COMRAM] unsigned int 
 22628 ;; Registers used:
 22629 ;;		wreg, status,2, status,0, prodl, prodh
 22630 ;; Tracked objects:
 22631 ;;		On entry : 0/0
 22632 ;;		On exit  : 0/0
 22633 ;;		Unchanged: 0/0
 22634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22635 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22636 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22637 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22638 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22639 ;;Total ram usage:        6 bytes
 22640 ;; Hardware stack levels used:    1
 22641 ;; This function calls:
 22642 ;;		Nothing
 22643 ;; This function is called by:
 22644 ;;		_printSortTimer
 22645 ;;		_retrieveLog
 22646 ;;		i2_printf
 22647 ;; This function uses a non-reentrant model
 22648 ;;
 22649                           
 22650                           	psect	text84
 22651  005124                     __ptext84:
 22652                           	opt stack 0
 22653  005124                     i2___wmul:
 22654                           	opt stack 20
 22655                           
 22656                           ;incstack = 0
 22657  005124  5001               	movf	i2___wmul@multiplier,w,c
 22658  005126  0203               	mulwf	i2___wmul@multiplicand,c
 22659  005128  CFF3 F005          	movff	prodl,i2___wmul@product
 22660  00512C  CFF4 F006          	movff	prodh,i2___wmul@product+1
 22661  005130  5001               	movf	i2___wmul@multiplier,w,c
 22662  005132  0204               	mulwf	i2___wmul@multiplicand+1,c
 22663  005134  50F3               	movf	prodl,w,c
 22664  005136  2606               	addwf	i2___wmul@product+1,f,c
 22665  005138  5002               	movf	i2___wmul@multiplier+1,w,c
 22666  00513A  0203               	mulwf	i2___wmul@multiplicand,c
 22667  00513C  50F3               	movf	prodl,w,c
 22668  00513E  2606               	addwf	i2___wmul@product+1,f,c
 22669  005140  C005  F001         	movff	i2___wmul@product,?i2___wmul
 22670  005144  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 22671  005148  0012               	return	
 22672  00514A                     __end_ofi2___wmul:
 22673                           	opt stack 0
 22674                           pclatu	equ	0xFFB
 22675                           pclath	equ	0xFFA
 22676                           tblptru	equ	0xFF8
 22677                           tblptrh	equ	0xFF7
 22678                           tblptrl	equ	0xFF6
 22679                           tablat	equ	0xFF5
 22680                           prodh	equ	0xFF4
 22681                           prodl	equ	0xFF3
 22682                           intcon	equ	0xFF2
 22683                           intcon2	equ	0xFF1
 22684                           intcon3	equ	0xFF0
 22685                           indf0	equ	0xFEF
 22686                           postinc0	equ	0xFEE
 22687                           fsr0h	equ	0xFEA
 22688                           fsr0l	equ	0xFE9
 22689                           wreg	equ	0xFE8
 22690                           postdec1	equ	0xFE5
 22691                           fsr1h	equ	0xFE2
 22692                           fsr1l	equ	0xFE1
 22693                           indf2	equ	0xFDF
 22694                           postinc2	equ	0xFDE
 22695                           postdec2	equ	0xFDD
 22696                           fsr2h	equ	0xFDA
 22697                           fsr2l	equ	0xFD9
 22698                           status	equ	0xFD8
 22699                           
 22700 ;; *************** function i2___lwmod *****************
 22701 ;; Defined at:
 22702 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 22703 ;; Parameters:    Size  Location     Type
 22704 ;;  dividend        2    0[COMRAM] unsigned int 
 22705 ;;  divisor         2    2[COMRAM] unsigned int 
 22706 ;; Auto vars:     Size  Location     Type
 22707 ;;  __lwmod         1    4[COMRAM] unsigned char 
 22708 ;; Return value:  Size  Location     Type
 22709 ;;                  2    0[COMRAM] unsigned int 
 22710 ;; Registers used:
 22711 ;;		wreg, status,2, status,0
 22712 ;; Tracked objects:
 22713 ;;		On entry : 0/0
 22714 ;;		On exit  : 0/0
 22715 ;;		Unchanged: 0/0
 22716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22717 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22718 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22719 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22720 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22721 ;;Total ram usage:        5 bytes
 22722 ;; Hardware stack levels used:    1
 22723 ;; This function calls:
 22724 ;;		Nothing
 22725 ;; This function is called by:
 22726 ;;		_printSortTimer
 22727 ;;		i2_printf
 22728 ;; This function uses a non-reentrant model
 22729 ;;
 22730                           
 22731                           	psect	text85
 22732  004C94                     __ptext85:
 22733                           	opt stack 0
 22734  004C94                     i2___lwmod:
 22735                           	opt stack 20
 22736                           
 22737                           ;incstack = 0
 22738  004C94  5003               	movf	i2___lwmod@divisor,w,c
 22739  004C96  1004               	iorwf	i2___lwmod@divisor+1,w,c
 22740  004C98  B4D8               	btfsc	status,2,c
 22741  004C9A  D018               	goto	i2l1860
 22742  004C9C  0E01               	movlw	1
 22743  004C9E  6E05               	movwf	i2___lwmod@counter,c
 22744  004CA0  D004               	goto	i2l6197
 22745  004CA2                     i2l6195:
 22746  004CA2  90D8               	bcf	status,0,c
 22747  004CA4  3603               	rlcf	i2___lwmod@divisor,f,c
 22748  004CA6  3604               	rlcf	i2___lwmod@divisor+1,f,c
 22749  004CA8  2A05               	incf	i2___lwmod@counter,f,c
 22750  004CAA                     i2l6197:
 22751  004CAA  AE04               	btfss	i2___lwmod@divisor+1,7,c
 22752  004CAC  D7FA               	goto	i2l6195
 22753  004CAE                     i2l6199:
 22754  004CAE  5003               	movf	i2___lwmod@divisor,w,c
 22755  004CB0  5C01               	subwf	i2___lwmod@dividend,w,c
 22756  004CB2  5004               	movf	i2___lwmod@divisor+1,w,c
 22757  004CB4  5802               	subwfb	i2___lwmod@dividend+1,w,c
 22758  004CB6  A0D8               	btfss	status,0,c
 22759  004CB8  D004               	goto	i2l6203
 22760  004CBA  5003               	movf	i2___lwmod@divisor,w,c
 22761  004CBC  5E01               	subwf	i2___lwmod@dividend,f,c
 22762  004CBE  5004               	movf	i2___lwmod@divisor+1,w,c
 22763  004CC0  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 22764  004CC2                     i2l6203:
 22765  004CC2  90D8               	bcf	status,0,c
 22766  004CC4  3204               	rrcf	i2___lwmod@divisor+1,f,c
 22767  004CC6  3203               	rrcf	i2___lwmod@divisor,f,c
 22768  004CC8  2E05               	decfsz	i2___lwmod@counter,f,c
 22769  004CCA  D7F1               	goto	i2l6199
 22770  004CCC                     i2l1860:
 22771  004CCC  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 22772  004CD0  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 22773  004CD4  0012               	return		;funcret
 22774  004CD6                     __end_ofi2___lwmod:
 22775                           	opt stack 0
 22776                           pclatu	equ	0xFFB
 22777                           pclath	equ	0xFFA
 22778                           tblptru	equ	0xFF8
 22779                           tblptrh	equ	0xFF7
 22780                           tblptrl	equ	0xFF6
 22781                           tablat	equ	0xFF5
 22782                           prodh	equ	0xFF4
 22783                           prodl	equ	0xFF3
 22784                           intcon	equ	0xFF2
 22785                           intcon2	equ	0xFF1
 22786                           intcon3	equ	0xFF0
 22787                           indf0	equ	0xFEF
 22788                           postinc0	equ	0xFEE
 22789                           fsr0h	equ	0xFEA
 22790                           fsr0l	equ	0xFE9
 22791                           wreg	equ	0xFE8
 22792                           postdec1	equ	0xFE5
 22793                           fsr1h	equ	0xFE2
 22794                           fsr1l	equ	0xFE1
 22795                           indf2	equ	0xFDF
 22796                           postinc2	equ	0xFDE
 22797                           postdec2	equ	0xFDD
 22798                           fsr2h	equ	0xFDA
 22799                           fsr2l	equ	0xFD9
 22800                           status	equ	0xFD8
 22801                           
 22802 ;; *************** function i2___lwdiv *****************
 22803 ;; Defined at:
 22804 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 22805 ;; Parameters:    Size  Location     Type
 22806 ;;  dividend        2    5[COMRAM] unsigned int 
 22807 ;;  divisor         2    7[COMRAM] unsigned int 
 22808 ;; Auto vars:     Size  Location     Type
 22809 ;;  __lwdiv         2    9[COMRAM] unsigned int 
 22810 ;;  __lwdiv         1   11[COMRAM] unsigned char 
 22811 ;; Return value:  Size  Location     Type
 22812 ;;                  2    5[COMRAM] unsigned int 
 22813 ;; Registers used:
 22814 ;;		wreg, status,2, status,0
 22815 ;; Tracked objects:
 22816 ;;		On entry : 0/0
 22817 ;;		On exit  : 0/0
 22818 ;;		Unchanged: 0/0
 22819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22820 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22821 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22822 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22823 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22824 ;;Total ram usage:        7 bytes
 22825 ;; Hardware stack levels used:    1
 22826 ;; This function calls:
 22827 ;;		Nothing
 22828 ;; This function is called by:
 22829 ;;		_printSortTimer
 22830 ;;		i2_printf
 22831 ;; This function uses a non-reentrant model
 22832 ;;
 22833                           
 22834                           	psect	text86
 22835  004B16                     __ptext86:
 22836                           	opt stack 0
 22837  004B16                     i2___lwdiv:
 22838                           	opt stack 20
 22839                           
 22840                           ;incstack = 0
 22841  004B16  0E00               	movlw	0
 22842  004B18  6E0B               	movwf	i2___lwdiv@quotient+1,c
 22843  004B1A  0E00               	movlw	0
 22844  004B1C  6E0A               	movwf	i2___lwdiv@quotient,c
 22845  004B1E  5008               	movf	i2___lwdiv@divisor,w,c
 22846  004B20  1009               	iorwf	i2___lwdiv@divisor+1,w,c
 22847  004B22  B4D8               	btfsc	status,2,c
 22848  004B24  D01C               	goto	i2l1850
 22849  004B26  0E01               	movlw	1
 22850  004B28  6E0C               	movwf	i2___lwdiv@counter,c
 22851  004B2A  D004               	goto	i2l6177
 22852  004B2C                     i2l6175:
 22853  004B2C  90D8               	bcf	status,0,c
 22854  004B2E  3608               	rlcf	i2___lwdiv@divisor,f,c
 22855  004B30  3609               	rlcf	i2___lwdiv@divisor+1,f,c
 22856  004B32  2A0C               	incf	i2___lwdiv@counter,f,c
 22857  004B34                     i2l6177:
 22858  004B34  AE09               	btfss	i2___lwdiv@divisor+1,7,c
 22859  004B36  D7FA               	goto	i2l6175
 22860  004B38                     i2l6179:
 22861  004B38  90D8               	bcf	status,0,c
 22862  004B3A  360A               	rlcf	i2___lwdiv@quotient,f,c
 22863  004B3C  360B               	rlcf	i2___lwdiv@quotient+1,f,c
 22864  004B3E  5008               	movf	i2___lwdiv@divisor,w,c
 22865  004B40  5C06               	subwf	i2___lwdiv@dividend,w,c
 22866  004B42  5009               	movf	i2___lwdiv@divisor+1,w,c
 22867  004B44  5807               	subwfb	i2___lwdiv@dividend+1,w,c
 22868  004B46  A0D8               	btfss	status,0,c
 22869  004B48  D005               	goto	i2l6187
 22870  004B4A  5008               	movf	i2___lwdiv@divisor,w,c
 22871  004B4C  5E06               	subwf	i2___lwdiv@dividend,f,c
 22872  004B4E  5009               	movf	i2___lwdiv@divisor+1,w,c
 22873  004B50  5A07               	subwfb	i2___lwdiv@dividend+1,f,c
 22874  004B52  800A               	bsf	i2___lwdiv@quotient,0,c
 22875  004B54                     i2l6187:
 22876  004B54  90D8               	bcf	status,0,c
 22877  004B56  3209               	rrcf	i2___lwdiv@divisor+1,f,c
 22878  004B58  3208               	rrcf	i2___lwdiv@divisor,f,c
 22879  004B5A  2E0C               	decfsz	i2___lwdiv@counter,f,c
 22880  004B5C  D7ED               	goto	i2l6179
 22881  004B5E                     i2l1850:
 22882  004B5E  C00A  F006         	movff	i2___lwdiv@quotient,?i2___lwdiv
 22883  004B62  C00B  F007         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 22884  004B66  0012               	return		;funcret
 22885  004B68                     __end_ofi2___lwdiv:
 22886                           	opt stack 0
 22887                           pclatu	equ	0xFFB
 22888                           pclath	equ	0xFFA
 22889                           tblptru	equ	0xFF8
 22890                           tblptrh	equ	0xFF7
 22891                           tblptrl	equ	0xFF6
 22892                           tablat	equ	0xFF5
 22893                           prodh	equ	0xFF4
 22894                           prodl	equ	0xFF3
 22895                           intcon	equ	0xFF2
 22896                           intcon2	equ	0xFF1
 22897                           intcon3	equ	0xFF0
 22898                           indf0	equ	0xFEF
 22899                           postinc0	equ	0xFEE
 22900                           fsr0h	equ	0xFEA
 22901                           fsr0l	equ	0xFE9
 22902                           wreg	equ	0xFE8
 22903                           postdec1	equ	0xFE5
 22904                           fsr1h	equ	0xFE2
 22905                           fsr1l	equ	0xFE1
 22906                           indf2	equ	0xFDF
 22907                           postinc2	equ	0xFDE
 22908                           postdec2	equ	0xFDD
 22909                           fsr2h	equ	0xFDA
 22910                           fsr2l	equ	0xFD9
 22911                           status	equ	0xFD8
 22912                           
 22913 ;; *************** function i2_lcdInst *****************
 22914 ;; Defined at:
 22915 ;;		line 15 in file "lcd.c"
 22916 ;; Parameters:    Size  Location     Type
 22917 ;;  data            1    wreg     unsigned char 
 22918 ;; Auto vars:     Size  Location     Type
 22919 ;;  data            1    2[COMRAM] unsigned char 
 22920 ;; Return value:  Size  Location     Type
 22921 ;;                  1    wreg      void 
 22922 ;; Registers used:
 22923 ;;		wreg, status,2, status,0, cstack
 22924 ;; Tracked objects:
 22925 ;;		On entry : 0/0
 22926 ;;		On exit  : 0/0
 22927 ;;		Unchanged: 0/0
 22928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22929 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22930 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22931 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22932 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22933 ;;Total ram usage:        1 bytes
 22934 ;; Hardware stack levels used:    1
 22935 ;; Hardware stack levels required when called:    1
 22936 ;; This function calls:
 22937 ;;		i2_lcdNibble
 22938 ;; This function is called by:
 22939 ;;		_change_state_to_menu_11
 22940 ;;		_change_state_to_menu_23
 22941 ;;		_change_state_to_logs_11
 22942 ;;		_change_state_to_logs_12
 22943 ;;		_change_state_to_logs_22
 22944 ;;		_change_state_to_logs_23
 22945 ;;		_change_state_to_logs_33
 22946 ;;		_change_state_to_logs_34
 22947 ;;		_printSortTimer
 22948 ;;		i2_change_state_to_menu_start
 22949 ;;		i2_change_state_to_menu_12
 22950 ;;		i2_change_state_to_menu_22
 22951 ;;		i2_printRTC
 22952 ;; This function uses a non-reentrant model
 22953 ;;
 22954                           
 22955                           	psect	text87
 22956  0052AC                     __ptext87:
 22957                           	opt stack 0
 22958  0052AC                     i2_lcdInst:
 22959                           	opt stack 19
 22960                           
 22961                           ;incstack = 0
 22962                           ;i2lcdInst@data stored from wreg
 22963  0052AC  6E03               	movwf	i2lcdInst@data,c
 22964                           
 22965                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 22966  0052AE  948C               	bcf	3980,2,c	;volatile
 22967                           
 22968                           ;lcd.c: 17: lcdNibble(data);
 22969  0052B0  5003               	movf	i2lcdInst@data,w,c
 22970  0052B2  EC60  F025         	call	i2_lcdNibble
 22971  0052B6  0012               	return		;funcret
 22972  0052B8                     __end_ofi2_lcdInst:
 22973                           	opt stack 0
 22974                           pclatu	equ	0xFFB
 22975                           pclath	equ	0xFFA
 22976                           tblptru	equ	0xFF8
 22977                           tblptrh	equ	0xFF7
 22978                           tblptrl	equ	0xFF6
 22979                           tablat	equ	0xFF5
 22980                           prodh	equ	0xFF4
 22981                           prodl	equ	0xFF3
 22982                           intcon	equ	0xFF2
 22983                           intcon2	equ	0xFF1
 22984                           intcon3	equ	0xFF0
 22985                           indf0	equ	0xFEF
 22986                           postinc0	equ	0xFEE
 22987                           fsr0h	equ	0xFEA
 22988                           fsr0l	equ	0xFE9
 22989                           wreg	equ	0xFE8
 22990                           postdec1	equ	0xFE5
 22991                           fsr1h	equ	0xFE2
 22992                           fsr1l	equ	0xFE1
 22993                           indf2	equ	0xFDF
 22994                           postinc2	equ	0xFDE
 22995                           postdec2	equ	0xFDD
 22996                           fsr2h	equ	0xFDA
 22997                           fsr2l	equ	0xFD9
 22998                           status	equ	0xFD8
 22999                           
 23000 ;; *************** function i2_lcdNibble *****************
 23001 ;; Defined at:
 23002 ;;		line 25 in file "lcd.c"
 23003 ;; Parameters:    Size  Location     Type
 23004 ;;  data            1    wreg     unsigned char 
 23005 ;; Auto vars:     Size  Location     Type
 23006 ;;  data            1    1[COMRAM] unsigned char 
 23007 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 23008 ;; Return value:  Size  Location     Type
 23009 ;;                  1    wreg      void 
 23010 ;; Registers used:
 23011 ;;		wreg, status,2, status,0
 23012 ;; Tracked objects:
 23013 ;;		On entry : 0/0
 23014 ;;		On exit  : 0/0
 23015 ;;		Unchanged: 0/0
 23016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23017 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23018 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23019 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23020 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23021 ;;Total ram usage:        2 bytes
 23022 ;; Hardware stack levels used:    1
 23023 ;; This function calls:
 23024 ;;		Nothing
 23025 ;; This function is called by:
 23026 ;;		i2_lcdInst
 23027 ;;		i2_putch
 23028 ;; This function uses a non-reentrant model
 23029 ;;
 23030                           
 23031                           	psect	text88
 23032  004AC0                     __ptext88:
 23033                           	opt stack 0
 23034  004AC0                     i2_lcdNibble:
 23035                           	opt stack 19
 23036                           
 23037                           ;incstack = 0
 23038                           ;i2lcdNibble@data stored from wreg
 23039  004AC0  6E02               	movwf	i2lcdNibble@data,c
 23040                           
 23041                           ;lcd.c: 27: char temp = data & 0xF0;
 23042  004AC2  5002               	movf	i2lcdNibble@data,w,c
 23043  004AC4  0BF0               	andlw	240
 23044  004AC6  6E01               	movwf	i2lcdNibble@temp,c
 23045                           
 23046                           ;lcd.c: 28: LATD = LATD & 0x0F;
 23047  004AC8  508C               	movf	3980,w,c	;volatile
 23048  004ACA  0B0F               	andlw	15
 23049  004ACC  6E8C               	movwf	3980,c	;volatile
 23050                           
 23051                           ;lcd.c: 29: LATD = temp | LATD;
 23052  004ACE  5001               	movf	i2lcdNibble@temp,w,c
 23053  004AD0  108C               	iorwf	3980,w,c	;volatile
 23054  004AD2  6E8C               	movwf	3980,c	;volatile
 23055                           
 23056                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 23057  004AD4  868C               	bsf	3980,3,c	;volatile
 23058                           
 23059                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 23060  004AD6  0E42               	movlw	66
 23061  004AD8                     i2u1004_47:
 23062  004AD8  2EE8               	decfsz	wreg,f,c
 23063  004ADA  D7FE               	bra	i2u1004_47
 23064  004ADC  D000               	nop2	
 23065                           
 23066                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 23067  004ADE  968C               	bcf	3980,3,c	;volatile
 23068                           
 23069                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 23070  004AE0  0E42               	movlw	66
 23071  004AE2                     i2u1005_47:
 23072  004AE2  2EE8               	decfsz	wreg,f,c
 23073  004AE4  D7FE               	bra	i2u1005_47
 23074  004AE6  D000               	nop2	
 23075                           
 23076                           ;lcd.c: 36: data = data << 4;
 23077  004AE8  3802               	swapf	i2lcdNibble@data,w,c
 23078  004AEA  0BF0               	andlw	240
 23079  004AEC  6E02               	movwf	i2lcdNibble@data,c
 23080                           
 23081                           ;lcd.c: 38: temp = data & 0xF0;
 23082  004AEE  5002               	movf	i2lcdNibble@data,w,c
 23083  004AF0  0BF0               	andlw	240
 23084  004AF2  6E01               	movwf	i2lcdNibble@temp,c
 23085                           
 23086                           ;lcd.c: 39: LATD = LATD & 0x0F;
 23087  004AF4  508C               	movf	3980,w,c	;volatile
 23088  004AF6  0B0F               	andlw	15
 23089  004AF8  6E8C               	movwf	3980,c	;volatile
 23090                           
 23091                           ;lcd.c: 40: LATD = temp | LATD;
 23092  004AFA  5001               	movf	i2lcdNibble@temp,w,c
 23093  004AFC  108C               	iorwf	3980,w,c	;volatile
 23094  004AFE  6E8C               	movwf	3980,c	;volatile
 23095                           
 23096                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 23097  004B00  868C               	bsf	3980,3,c	;volatile
 23098                           
 23099                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 23100  004B02  0E42               	movlw	66
 23101  004B04                     i2u1006_47:
 23102  004B04  2EE8               	decfsz	wreg,f,c
 23103  004B06  D7FE               	bra	i2u1006_47
 23104  004B08  D000               	nop2	
 23105                           
 23106                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 23107  004B0A  968C               	bcf	3980,3,c	;volatile
 23108                           
 23109                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 23110  004B0C  0E42               	movlw	66
 23111  004B0E                     i2u1007_47:
 23112  004B0E  2EE8               	decfsz	wreg,f,c
 23113  004B10  D7FE               	bra	i2u1007_47
 23114  004B12  D000               	nop2	
 23115  004B14  0012               	return		;funcret
 23116  004B16                     __end_ofi2_lcdNibble:
 23117                           	opt stack 0
 23118                           pclatu	equ	0xFFB
 23119                           pclath	equ	0xFFA
 23120                           tblptru	equ	0xFF8
 23121                           tblptrh	equ	0xFF7
 23122                           tblptrl	equ	0xFF6
 23123                           tablat	equ	0xFF5
 23124                           prodh	equ	0xFF4
 23125                           prodl	equ	0xFF3
 23126                           intcon	equ	0xFF2
 23127                           intcon2	equ	0xFF1
 23128                           intcon3	equ	0xFF0
 23129                           indf0	equ	0xFEF
 23130                           postinc0	equ	0xFEE
 23131                           fsr0h	equ	0xFEA
 23132                           fsr0l	equ	0xFE9
 23133                           wreg	equ	0xFE8
 23134                           postdec1	equ	0xFE5
 23135                           fsr1h	equ	0xFE2
 23136                           fsr1l	equ	0xFE1
 23137                           indf2	equ	0xFDF
 23138                           postinc2	equ	0xFDE
 23139                           postdec2	equ	0xFDD
 23140                           fsr2h	equ	0xFDA
 23141                           fsr2l	equ	0xFD9
 23142                           status	equ	0xFD8
 23143                           
 23144 ;; *************** function i2_getRTC *****************
 23145 ;; Defined at:
 23146 ;;		line 44 in file "RTC.c"
 23147 ;; Parameters:    Size  Location     Type
 23148 ;;		None
 23149 ;; Auto vars:     Size  Location     Type
 23150 ;;  getRTC          2    3[COMRAM] int 
 23151 ;; Return value:  Size  Location     Type
 23152 ;;                  1    wreg      void 
 23153 ;; Registers used:
 23154 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 23155 ;; Tracked objects:
 23156 ;;		On entry : 0/0
 23157 ;;		On exit  : 0/0
 23158 ;;		Unchanged: 0/0
 23159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23160 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23161 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23162 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23163 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23164 ;;Total ram usage:        2 bytes
 23165 ;; Hardware stack levels used:    1
 23166 ;; Hardware stack levels required when called:    2
 23167 ;; This function calls:
 23168 ;;		i2_I2C_Master_Read
 23169 ;;		i2_I2C_Master_Start
 23170 ;;		i2_I2C_Master_Stop
 23171 ;;		i2_I2C_Master_Write
 23172 ;; This function is called by:
 23173 ;;		_printSortTimer
 23174 ;;		i2_printRTC
 23175 ;; This function uses a non-reentrant model
 23176 ;;
 23177                           
 23178                           	psect	text89
 23179  0047A2                     __ptext89:
 23180                           	opt stack 0
 23181  0047A2                     i2_getRTC:
 23182                           	opt stack 18
 23183                           
 23184                           ;RTC.c: 48: I2C_Master_Start();
 23185                           
 23186                           ;incstack = 0
 23187  0047A2  EC76  F029         	call	i2_I2C_Master_Start	;wreg free
 23188                           
 23189                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
 23190  0047A6  0E00               	movlw	0
 23191  0047A8  6E03               	movwf	i2I2C_Master_Write@d+1,c
 23192  0047AA  0ED0               	movlw	208
 23193  0047AC  6E02               	movwf	i2I2C_Master_Write@d,c
 23194  0047AE  EC61  F029         	call	i2_I2C_Master_Write	;wreg free
 23195                           
 23196                           ;RTC.c: 50: I2C_Master_Write(0x00);
 23197  0047B2  0E00               	movlw	0
 23198  0047B4  6E03               	movwf	i2I2C_Master_Write@d+1,c
 23199  0047B6  0E00               	movlw	0
 23200  0047B8  6E02               	movwf	i2I2C_Master_Write@d,c
 23201  0047BA  EC61  F029         	call	i2_I2C_Master_Write	;wreg free
 23202                           
 23203                           ;RTC.c: 51: I2C_Master_Stop();
 23204  0047BE  EC72  F029         	call	i2_I2C_Master_Stop	;wreg free
 23205                           
 23206                           ;RTC.c: 54: I2C_Master_Start();
 23207  0047C2  EC76  F029         	call	i2_I2C_Master_Start	;wreg free
 23208                           
 23209                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
 23210  0047C6  0E00               	movlw	0
 23211  0047C8  6E03               	movwf	i2I2C_Master_Write@d+1,c
 23212  0047CA  0ED1               	movlw	209
 23213  0047CC  6E02               	movwf	i2I2C_Master_Write@d,c
 23214  0047CE  EC61  F029         	call	i2_I2C_Master_Write	;wreg free
 23215                           
 23216                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
 23217  0047D2  0E00               	movlw	0
 23218  0047D4  6E05               	movwf	i2getRTC@i+1,c
 23219  0047D6  0E00               	movlw	0
 23220  0047D8  6E04               	movwf	i2getRTC@i,c
 23221  0047DA                     i2l6437:
 23222  0047DA  BE05               	btfsc	i2getRTC@i+1,7,c
 23223  0047DC  D006               	goto	i2l6441
 23224  0047DE  5005               	movf	i2getRTC@i+1,w,c
 23225  0047E0  E111               	bnz	i2l6447
 23226  0047E2  0E06               	movlw	6
 23227  0047E4  5C04               	subwf	i2getRTC@i,w,c
 23228  0047E6  B0D8               	btfsc	status,0,c
 23229  0047E8  D00D               	goto	i2l6447
 23230  0047EA                     i2l6441:
 23231                           
 23232                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
 23233  0047EA  0E1C               	movlw	low _time
 23234  0047EC  2404               	addwf	i2getRTC@i,w,c
 23235  0047EE  6ED9               	movwf	fsr2l,c
 23236  0047F0  0E01               	movlw	high _time
 23237  0047F2  2005               	addwfc	i2getRTC@i+1,w,c
 23238  0047F4  6EDA               	movwf	fsr2h,c
 23239  0047F6  0E01               	movlw	1
 23240  0047F8  ECA5  F028         	call	i2_I2C_Master_Read
 23241  0047FC  6EDF               	movwf	indf2,c
 23242  0047FE  4A04               	infsnz	i2getRTC@i,f,c
 23243  004800  2A05               	incf	i2getRTC@i+1,f,c
 23244  004802  D7EB               	goto	i2l6437
 23245  004804                     i2l6447:
 23246                           
 23247                           ;RTC.c: 58: }
 23248                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
 23249  004804  0E00               	movlw	0
 23250  004806  ECA5  F028         	call	i2_I2C_Master_Read
 23251  00480A  0101               	movlb	1	; () banked
 23252  00480C  6F22               	movwf	(_time+6)& (0+255),b
 23253                           
 23254                           ;RTC.c: 60: I2C_Master_Stop();
 23255  00480E  EC72  F029         	call	i2_I2C_Master_Stop	;wreg free
 23256  004812  0012               	return		;funcret
 23257  004814                     __end_ofi2_getRTC:
 23258                           	opt stack 0
 23259                           pclatu	equ	0xFFB
 23260                           pclath	equ	0xFFA
 23261                           tblptru	equ	0xFF8
 23262                           tblptrh	equ	0xFF7
 23263                           tblptrl	equ	0xFF6
 23264                           tablat	equ	0xFF5
 23265                           prodh	equ	0xFF4
 23266                           prodl	equ	0xFF3
 23267                           intcon	equ	0xFF2
 23268                           intcon2	equ	0xFF1
 23269                           intcon3	equ	0xFF0
 23270                           indf0	equ	0xFEF
 23271                           postinc0	equ	0xFEE
 23272                           fsr0h	equ	0xFEA
 23273                           fsr0l	equ	0xFE9
 23274                           wreg	equ	0xFE8
 23275                           postdec1	equ	0xFE5
 23276                           fsr1h	equ	0xFE2
 23277                           fsr1l	equ	0xFE1
 23278                           indf2	equ	0xFDF
 23279                           postinc2	equ	0xFDE
 23280                           postdec2	equ	0xFDD
 23281                           fsr2h	equ	0xFDA
 23282                           fsr2l	equ	0xFD9
 23283                           status	equ	0xFD8
 23284                           
 23285 ;; *************** function i2_I2C_Master_Write *****************
 23286 ;; Defined at:
 23287 ;;		line 49 in file "I2C.c"
 23288 ;; Parameters:    Size  Location     Type
 23289 ;;  d               2    1[COMRAM] unsigned int 
 23290 ;; Auto vars:     Size  Location     Type
 23291 ;;		None
 23292 ;; Return value:  Size  Location     Type
 23293 ;;                  1    wreg      void 
 23294 ;; Registers used:
 23295 ;;		wreg, status,2, status,0, cstack
 23296 ;; Tracked objects:
 23297 ;;		On entry : 0/0
 23298 ;;		On exit  : 0/0
 23299 ;;		Unchanged: 0/0
 23300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23301 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23302 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23303 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23304 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23305 ;;Total ram usage:        2 bytes
 23306 ;; Hardware stack levels used:    1
 23307 ;; Hardware stack levels required when called:    1
 23308 ;; This function calls:
 23309 ;;		i2_I2C_Master_Wait
 23310 ;; This function is called by:
 23311 ;;		i2_getRTC
 23312 ;; This function uses a non-reentrant model
 23313 ;;
 23314                           
 23315                           	psect	text90
 23316  0052C2                     __ptext90:
 23317                           	opt stack 0
 23318  0052C2                     i2_I2C_Master_Write:
 23319                           	opt stack 18
 23320                           
 23321                           ;I2C.c: 51: I2C_Master_Wait();
 23322                           
 23323                           ;incstack = 0
 23324  0052C2  EC37  F029         	call	i2_I2C_Master_Wait	;wreg free
 23325                           
 23326                           ;I2C.c: 52: SSPBUF = d;
 23327  0052C6  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 23328  0052CA  0012               	return		;funcret
 23329  0052CC                     __end_ofi2_I2C_Master_Write:
 23330                           	opt stack 0
 23331                           pclatu	equ	0xFFB
 23332                           pclath	equ	0xFFA
 23333                           tblptru	equ	0xFF8
 23334                           tblptrh	equ	0xFF7
 23335                           tblptrl	equ	0xFF6
 23336                           tablat	equ	0xFF5
 23337                           prodh	equ	0xFF4
 23338                           prodl	equ	0xFF3
 23339                           intcon	equ	0xFF2
 23340                           intcon2	equ	0xFF1
 23341                           intcon3	equ	0xFF0
 23342                           indf0	equ	0xFEF
 23343                           postinc0	equ	0xFEE
 23344                           fsr0h	equ	0xFEA
 23345                           fsr0l	equ	0xFE9
 23346                           wreg	equ	0xFE8
 23347                           postdec1	equ	0xFE5
 23348                           fsr1h	equ	0xFE2
 23349                           fsr1l	equ	0xFE1
 23350                           indf2	equ	0xFDF
 23351                           postinc2	equ	0xFDE
 23352                           postdec2	equ	0xFDD
 23353                           fsr2h	equ	0xFDA
 23354                           fsr2l	equ	0xFD9
 23355                           status	equ	0xFD8
 23356                           
 23357 ;; *************** function i2_I2C_Master_Stop *****************
 23358 ;; Defined at:
 23359 ;;		line 43 in file "I2C.c"
 23360 ;; Parameters:    Size  Location     Type
 23361 ;;		None
 23362 ;; Auto vars:     Size  Location     Type
 23363 ;;		None
 23364 ;; Return value:  Size  Location     Type
 23365 ;;                  1    wreg      void 
 23366 ;; Registers used:
 23367 ;;		wreg, status,2, status,0, cstack
 23368 ;; Tracked objects:
 23369 ;;		On entry : 0/0
 23370 ;;		On exit  : 0/0
 23371 ;;		Unchanged: 0/0
 23372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23373 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23374 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23375 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23376 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23377 ;;Total ram usage:        0 bytes
 23378 ;; Hardware stack levels used:    1
 23379 ;; Hardware stack levels required when called:    1
 23380 ;; This function calls:
 23381 ;;		i2_I2C_Master_Wait
 23382 ;; This function is called by:
 23383 ;;		i2_getRTC
 23384 ;; This function uses a non-reentrant model
 23385 ;;
 23386                           
 23387                           	psect	text91
 23388  0052E4                     __ptext91:
 23389                           	opt stack 0
 23390  0052E4                     i2_I2C_Master_Stop:
 23391                           	opt stack 18
 23392                           
 23393                           ;I2C.c: 45: I2C_Master_Wait();
 23394                           
 23395                           ;incstack = 0
 23396  0052E4  EC37  F029         	call	i2_I2C_Master_Wait	;wreg free
 23397                           
 23398                           ;I2C.c: 46: PEN = 1;
 23399  0052E8  84C5               	bsf	4037,2,c	;volatile
 23400  0052EA  0012               	return		;funcret
 23401  0052EC                     __end_ofi2_I2C_Master_Stop:
 23402                           	opt stack 0
 23403                           pclatu	equ	0xFFB
 23404                           pclath	equ	0xFFA
 23405                           tblptru	equ	0xFF8
 23406                           tblptrh	equ	0xFF7
 23407                           tblptrl	equ	0xFF6
 23408                           tablat	equ	0xFF5
 23409                           prodh	equ	0xFF4
 23410                           prodl	equ	0xFF3
 23411                           intcon	equ	0xFF2
 23412                           intcon2	equ	0xFF1
 23413                           intcon3	equ	0xFF0
 23414                           indf0	equ	0xFEF
 23415                           postinc0	equ	0xFEE
 23416                           fsr0h	equ	0xFEA
 23417                           fsr0l	equ	0xFE9
 23418                           wreg	equ	0xFE8
 23419                           postdec1	equ	0xFE5
 23420                           fsr1h	equ	0xFE2
 23421                           fsr1l	equ	0xFE1
 23422                           indf2	equ	0xFDF
 23423                           postinc2	equ	0xFDE
 23424                           postdec2	equ	0xFDD
 23425                           fsr2h	equ	0xFDA
 23426                           fsr2l	equ	0xFD9
 23427                           status	equ	0xFD8
 23428                           
 23429 ;; *************** function i2_I2C_Master_Start *****************
 23430 ;; Defined at:
 23431 ;;		line 31 in file "I2C.c"
 23432 ;; Parameters:    Size  Location     Type
 23433 ;;		None
 23434 ;; Auto vars:     Size  Location     Type
 23435 ;;		None
 23436 ;; Return value:  Size  Location     Type
 23437 ;;                  1    wreg      void 
 23438 ;; Registers used:
 23439 ;;		wreg, status,2, status,0, cstack
 23440 ;; Tracked objects:
 23441 ;;		On entry : 0/0
 23442 ;;		On exit  : 0/0
 23443 ;;		Unchanged: 0/0
 23444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23445 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23446 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23447 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23448 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23449 ;;Total ram usage:        0 bytes
 23450 ;; Hardware stack levels used:    1
 23451 ;; Hardware stack levels required when called:    1
 23452 ;; This function calls:
 23453 ;;		i2_I2C_Master_Wait
 23454 ;; This function is called by:
 23455 ;;		i2_getRTC
 23456 ;; This function uses a non-reentrant model
 23457 ;;
 23458                           
 23459                           	psect	text92
 23460  0052EC                     __ptext92:
 23461                           	opt stack 0
 23462  0052EC                     i2_I2C_Master_Start:
 23463                           	opt stack 18
 23464                           
 23465                           ;I2C.c: 33: I2C_Master_Wait();
 23466                           
 23467                           ;incstack = 0
 23468  0052EC  EC37  F029         	call	i2_I2C_Master_Wait	;wreg free
 23469                           
 23470                           ;I2C.c: 34: SEN = 1;
 23471  0052F0  80C5               	bsf	4037,0,c	;volatile
 23472  0052F2  0012               	return		;funcret
 23473  0052F4                     __end_ofi2_I2C_Master_Start:
 23474                           	opt stack 0
 23475                           pclatu	equ	0xFFB
 23476                           pclath	equ	0xFFA
 23477                           tblptru	equ	0xFF8
 23478                           tblptrh	equ	0xFF7
 23479                           tblptrl	equ	0xFF6
 23480                           tablat	equ	0xFF5
 23481                           prodh	equ	0xFF4
 23482                           prodl	equ	0xFF3
 23483                           intcon	equ	0xFF2
 23484                           intcon2	equ	0xFF1
 23485                           intcon3	equ	0xFF0
 23486                           indf0	equ	0xFEF
 23487                           postinc0	equ	0xFEE
 23488                           fsr0h	equ	0xFEA
 23489                           fsr0l	equ	0xFE9
 23490                           wreg	equ	0xFE8
 23491                           postdec1	equ	0xFE5
 23492                           fsr1h	equ	0xFE2
 23493                           fsr1l	equ	0xFE1
 23494                           indf2	equ	0xFDF
 23495                           postinc2	equ	0xFDE
 23496                           postdec2	equ	0xFDD
 23497                           fsr2h	equ	0xFDA
 23498                           fsr2l	equ	0xFD9
 23499                           status	equ	0xFD8
 23500                           
 23501 ;; *************** function i2_I2C_Master_Read *****************
 23502 ;; Defined at:
 23503 ;;		line 55 in file "I2C.c"
 23504 ;; Parameters:    Size  Location     Type
 23505 ;;  a               1    wreg     unsigned char 
 23506 ;; Auto vars:     Size  Location     Type
 23507 ;;  a               1    1[COMRAM] unsigned char 
 23508 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 23509 ;; Return value:  Size  Location     Type
 23510 ;;                  1    wreg      unsigned char 
 23511 ;; Registers used:
 23512 ;;		wreg, status,2, status,0, cstack
 23513 ;; Tracked objects:
 23514 ;;		On entry : 0/0
 23515 ;;		On exit  : 0/0
 23516 ;;		Unchanged: 0/0
 23517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23518 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23519 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23520 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23521 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23522 ;;Total ram usage:        2 bytes
 23523 ;; Hardware stack levels used:    1
 23524 ;; Hardware stack levels required when called:    1
 23525 ;; This function calls:
 23526 ;;		i2_I2C_Master_Wait
 23527 ;; This function is called by:
 23528 ;;		i2_getRTC
 23529 ;; This function uses a non-reentrant model
 23530 ;;
 23531                           
 23532                           	psect	text93
 23533  00514A                     __ptext93:
 23534                           	opt stack 0
 23535  00514A                     i2_I2C_Master_Read:
 23536                           	opt stack 18
 23537                           
 23538                           ;incstack = 0
 23539                           ;i2I2C_Master_Read@a stored from wreg
 23540  00514A  6E02               	movwf	i2I2C_Master_Read@a,c
 23541                           
 23542                           ;I2C.c: 57: unsigned char temp;
 23543                           ;I2C.c: 58: I2C_Master_Wait();
 23544  00514C  EC37  F029         	call	i2_I2C_Master_Wait	;wreg free
 23545                           
 23546                           ;I2C.c: 59: RCEN = 1;
 23547  005150  86C5               	bsf	4037,3,c	;volatile
 23548                           
 23549                           ;I2C.c: 60: I2C_Master_Wait();
 23550  005152  EC37  F029         	call	i2_I2C_Master_Wait	;wreg free
 23551                           
 23552                           ;I2C.c: 61: temp = SSPBUF;
 23553  005156  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 23554                           
 23555                           ;I2C.c: 62: I2C_Master_Wait();
 23556  00515A  EC37  F029         	call	i2_I2C_Master_Wait	;wreg free
 23557                           
 23558                           ;I2C.c: 63: ACKDT = (a)?0:1;
 23559  00515E  5002               	movf	i2I2C_Master_Read@a,w,c
 23560  005160  A4D8               	btfss	status,2,c
 23561  005162  D002               	goto	i2u439_40
 23562  005164  8AC5               	bsf	4037,5,c	;volatile
 23563  005166  D001               	goto	i2l6141
 23564  005168                     i2u439_40:
 23565  005168  9AC5               	bcf	4037,5,c	;volatile
 23566  00516A                     i2l6141:
 23567                           
 23568                           ;I2C.c: 64: ACKEN = 1;
 23569  00516A  88C5               	bsf	4037,4,c	;volatile
 23570                           
 23571                           ;I2C.c: 65: return temp;
 23572  00516C  5003               	movf	i2I2C_Master_Read@temp,w,c
 23573  00516E  0012               	return	
 23574  005170                     __end_ofi2_I2C_Master_Read:
 23575                           	opt stack 0
 23576                           pclatu	equ	0xFFB
 23577                           pclath	equ	0xFFA
 23578                           tblptru	equ	0xFF8
 23579                           tblptrh	equ	0xFF7
 23580                           tblptrl	equ	0xFF6
 23581                           tablat	equ	0xFF5
 23582                           prodh	equ	0xFF4
 23583                           prodl	equ	0xFF3
 23584                           intcon	equ	0xFF2
 23585                           intcon2	equ	0xFF1
 23586                           intcon3	equ	0xFF0
 23587                           indf0	equ	0xFEF
 23588                           postinc0	equ	0xFEE
 23589                           fsr0h	equ	0xFEA
 23590                           fsr0l	equ	0xFE9
 23591                           wreg	equ	0xFE8
 23592                           postdec1	equ	0xFE5
 23593                           fsr1h	equ	0xFE2
 23594                           fsr1l	equ	0xFE1
 23595                           indf2	equ	0xFDF
 23596                           postinc2	equ	0xFDE
 23597                           postdec2	equ	0xFDD
 23598                           fsr2h	equ	0xFDA
 23599                           fsr2l	equ	0xFD9
 23600                           status	equ	0xFD8
 23601                           
 23602 ;; *************** function i2_I2C_Master_Wait *****************
 23603 ;; Defined at:
 23604 ;;		line 26 in file "I2C.c"
 23605 ;; Parameters:    Size  Location     Type
 23606 ;;		None
 23607 ;; Auto vars:     Size  Location     Type
 23608 ;;		None
 23609 ;; Return value:  Size  Location     Type
 23610 ;;                  1    wreg      void 
 23611 ;; Registers used:
 23612 ;;		wreg, status,2, status,0
 23613 ;; Tracked objects:
 23614 ;;		On entry : 0/0
 23615 ;;		On exit  : 0/0
 23616 ;;		Unchanged: 0/0
 23617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23618 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23619 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23620 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23621 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23622 ;;Total ram usage:        1 bytes
 23623 ;; Hardware stack levels used:    1
 23624 ;; This function calls:
 23625 ;;		Nothing
 23626 ;; This function is called by:
 23627 ;;		i2_I2C_Master_Start
 23628 ;;		i2_I2C_Master_Stop
 23629 ;;		i2_I2C_Master_Write
 23630 ;;		i2_I2C_Master_Read
 23631 ;; This function uses a non-reentrant model
 23632 ;;
 23633                           
 23634                           	psect	text94
 23635  00526E                     __ptext94:
 23636                           	opt stack 0
 23637  00526E                     i2_I2C_Master_Wait:
 23638                           	opt stack 18
 23639  00526E                     i2l66:
 23640  00526E  B4C7               	btfsc	4039,2,c	;volatile
 23641  005270  D7FE               	goto	i2l66
 23642  005272  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 23643  005276  0E1F               	movlw	31
 23644  005278  1601               	andwf	??i2_I2C_Master_Wait,f,c
 23645  00527A  B4D8               	btfsc	status,2,c
 23646  00527C  0012               	return	
 23647  00527E  D7F7               	goto	i2l66
 23648  005280                     __end_ofi2_I2C_Master_Wait:
 23649                           	opt stack 0
 23650                           pclatu	equ	0xFFB
 23651                           pclath	equ	0xFFA
 23652                           tblptru	equ	0xFF8
 23653                           tblptrh	equ	0xFF7
 23654                           tblptrl	equ	0xFF6
 23655                           tablat	equ	0xFF5
 23656                           prodh	equ	0xFF4
 23657                           prodl	equ	0xFF3
 23658                           intcon	equ	0xFF2
 23659                           intcon2	equ	0xFF1
 23660                           intcon3	equ	0xFF0
 23661                           indf0	equ	0xFEF
 23662                           postinc0	equ	0xFEE
 23663                           fsr0h	equ	0xFEA
 23664                           fsr0l	equ	0xFE9
 23665                           wreg	equ	0xFE8
 23666                           postdec1	equ	0xFE5
 23667                           fsr1h	equ	0xFE2
 23668                           fsr1l	equ	0xFE1
 23669                           indf2	equ	0xFDF
 23670                           postinc2	equ	0xFDE
 23671                           postdec2	equ	0xFDD
 23672                           fsr2h	equ	0xFDA
 23673                           fsr2l	equ	0xFD9
 23674                           status	equ	0xFD8
 23675                           
 23676 ;; *************** function i2_delay_ms *****************
 23677 ;; Defined at:
 23678 ;;		line 574 in file "sort.c"
 23679 ;; Parameters:    Size  Location     Type
 23680 ;;  milliseconds    1    wreg     unsigned char 
 23681 ;; Auto vars:     Size  Location     Type
 23682 ;;  milliseconds    1    1[COMRAM] unsigned char 
 23683 ;; Return value:  Size  Location     Type
 23684 ;;                  1    wreg      void 
 23685 ;; Registers used:
 23686 ;;		wreg, status,2, status,0, cstack
 23687 ;; Tracked objects:
 23688 ;;		On entry : 0/0
 23689 ;;		On exit  : 0/0
 23690 ;;		Unchanged: 0/0
 23691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23692 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23693 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23694 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23695 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23696 ;;Total ram usage:        2 bytes
 23697 ;; Hardware stack levels used:    1
 23698 ;; This function calls:
 23699 ;;		Nothing
 23700 ;; This function is called by:
 23701 ;;		_printSortTimer
 23702 ;; This function uses a non-reentrant model
 23703 ;;
 23704                           
 23705                           	psect	text95
 23706  0051F6                     __ptext95:
 23707                           	opt stack 0
 23708  0051F6                     i2_delay_ms:
 23709                           	opt stack 22
 23710                           
 23711                           ;incstack = 0
 23712                           ;i2delay_ms@milliseconds stored from wreg
 23713  0051F6  6E02               	movwf	i2delay_ms@milliseconds,c
 23714                           
 23715                           ;sort.c: 575: while(milliseconds > 0)
 23716  0051F8  D008               	goto	i2l8469
 23717  0051FA                     i2l8465:
 23718                           
 23719                           ;sort.c: 576: {
 23720                           ;sort.c: 577: milliseconds--;
 23721  0051FA  0602               	decf	i2delay_ms@milliseconds,f,c
 23722                           
 23723                           ;sort.c: 578: _delay((unsigned long)((990)*(32000000/4000000.0)));
 23724  0051FC  0E0B               	movlw	11
 23725  0051FE  6E01               	movwf	??i2_delay_ms& (0+255),c
 23726  005200  0E48               	movlw	72
 23727  005202                     i2u1008_47:
 23728  005202  2EE8               	decfsz	wreg,f,c
 23729  005204  D7FE               	bra	i2u1008_47
 23730  005206  2E01               	decfsz	??i2_delay_ms& (0+255),f,c
 23731  005208  D7FC               	bra	i2u1008_47
 23732  00520A                     i2l8469:
 23733  00520A  5002               	movf	i2delay_ms@milliseconds,w,c
 23734  00520C  B4D8               	btfsc	status,2,c
 23735  00520E  0012               	return	
 23736  005210  D7F4               	goto	i2l8465
 23737  005212                     __end_ofi2_delay_ms:
 23738                           	opt stack 0
 23739                           pclatu	equ	0xFFB
 23740                           pclath	equ	0xFFA
 23741                           tblptru	equ	0xFF8
 23742                           tblptrh	equ	0xFF7
 23743                           tblptrl	equ	0xFF6
 23744                           tablat	equ	0xFF5
 23745                           prodh	equ	0xFF4
 23746                           prodl	equ	0xFF3
 23747                           intcon	equ	0xFF2
 23748                           intcon2	equ	0xFF1
 23749                           intcon3	equ	0xFF0
 23750                           indf0	equ	0xFEF
 23751                           postinc0	equ	0xFEE
 23752                           fsr0h	equ	0xFEA
 23753                           fsr0l	equ	0xFE9
 23754                           wreg	equ	0xFE8
 23755                           postdec1	equ	0xFE5
 23756                           fsr1h	equ	0xFE2
 23757                           fsr1l	equ	0xFE1
 23758                           indf2	equ	0xFDF
 23759                           postinc2	equ	0xFDE
 23760                           postdec2	equ	0xFDD
 23761                           fsr2h	equ	0xFDA
 23762                           fsr2l	equ	0xFD9
 23763                           status	equ	0xFD8
 23764                           pclatu	equ	0xFFB
 23765                           pclath	equ	0xFFA
 23766                           tblptru	equ	0xFF8
 23767                           tblptrh	equ	0xFF7
 23768                           tblptrl	equ	0xFF6
 23769                           tablat	equ	0xFF5
 23770                           prodh	equ	0xFF4
 23771                           prodl	equ	0xFF3
 23772                           intcon	equ	0xFF2
 23773                           intcon2	equ	0xFF1
 23774                           intcon3	equ	0xFF0
 23775                           indf0	equ	0xFEF
 23776                           postinc0	equ	0xFEE
 23777                           fsr0h	equ	0xFEA
 23778                           fsr0l	equ	0xFE9
 23779                           wreg	equ	0xFE8
 23780                           postdec1	equ	0xFE5
 23781                           fsr1h	equ	0xFE2
 23782                           fsr1l	equ	0xFE1
 23783                           indf2	equ	0xFDF
 23784                           postinc2	equ	0xFDE
 23785                           postdec2	equ	0xFDD
 23786                           fsr2h	equ	0xFDA
 23787                           fsr2l	equ	0xFD9
 23788                           status	equ	0xFD8
 23789                           
 23790                           	psect	rparam
 23791  0000                     pclatu	equ	0xFFB
 23792                           pclath	equ	0xFFA
 23793                           tblptru	equ	0xFF8
 23794                           tblptrh	equ	0xFF7
 23795                           tblptrl	equ	0xFF6
 23796                           tablat	equ	0xFF5
 23797                           prodh	equ	0xFF4
 23798                           prodl	equ	0xFF3
 23799                           intcon	equ	0xFF2
 23800                           intcon2	equ	0xFF1
 23801                           intcon3	equ	0xFF0
 23802                           indf0	equ	0xFEF
 23803                           postinc0	equ	0xFEE
 23804                           fsr0h	equ	0xFEA
 23805                           fsr0l	equ	0xFE9
 23806                           wreg	equ	0xFE8
 23807                           postdec1	equ	0xFE5
 23808                           fsr1h	equ	0xFE2
 23809                           fsr1l	equ	0xFE1
 23810                           indf2	equ	0xFDF
 23811                           postinc2	equ	0xFDE
 23812                           postdec2	equ	0xFDD
 23813                           fsr2h	equ	0xFDA
 23814                           fsr2l	equ	0xFD9
 23815                           status	equ	0xFD8
 23816                           
 23817                           	psect	temp
 23818  00007E                     btemp:
 23819                           	opt stack 0
 23820  00007E                     	ds	1
 23821  0000                     int$flags	set	btemp
 23822                           pclatu	equ	0xFFB
 23823                           pclath	equ	0xFFA
 23824                           tblptru	equ	0xFF8
 23825                           tblptrh	equ	0xFF7
 23826                           tblptrl	equ	0xFF6
 23827                           tablat	equ	0xFF5
 23828                           prodh	equ	0xFF4
 23829                           prodl	equ	0xFF3
 23830                           intcon	equ	0xFF2
 23831                           intcon2	equ	0xFF1
 23832                           intcon3	equ	0xFF0
 23833                           indf0	equ	0xFEF
 23834                           postinc0	equ	0xFEE
 23835                           fsr0h	equ	0xFEA
 23836                           fsr0l	equ	0xFE9
 23837                           wreg	equ	0xFE8
 23838                           postdec1	equ	0xFE5
 23839                           fsr1h	equ	0xFE2
 23840                           fsr1l	equ	0xFE1
 23841                           indf2	equ	0xFDF
 23842                           postinc2	equ	0xFDE
 23843                           postdec2	equ	0xFDD
 23844                           fsr2h	equ	0xFDA
 23845                           fsr2l	equ	0xFD9
 23846                           status	equ	0xFD8


Data Sizes:
    Strings     1269
    Constant    27
    Data        8
    BSS         138
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     90     125
    BANK0           128     90     128
    BANK1           256      0      73
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_62(CODE[4]), STR_61(CODE[4]), STR_60(CODE[4]), STR_59(CODE[4]), 
		 -> STR_58(CODE[4]), STR_57(CODE[4]), STR_56(CODE[4]), STR_55(CODE[4]), 
		 -> STR_54(CODE[4]), STR_53(CODE[4]), STR_52(CODE[4]), STR_51(CODE[4]), 
		 -> STR_20(CODE[4]), STR_19(CODE[4]), STR_18(CODE[4]), STR_17(CODE[4]), 
		 -> STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[4]), STR_13(CODE[4]), 
		 -> STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[4]), 
		 -> STR_8(CODE[4]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_126(CODE[7]), count_total(BANK0[2]), printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_125(CODE[18]), STR_124(CODE[18]), STR_123(CODE[18]), STR_122(CODE[18]), 
		 -> STR_121(CODE[18]), STR_120(CODE[18]), STR_119(CODE[17]), STR_118(CODE[17]), 
		 -> STR_117(CODE[3]), STR_116(CODE[15]), STR_115(CODE[3]), STR_114(CODE[15]), 
		 -> STR_113(CODE[11]), STR_112(CODE[18]), STR_111(CODE[18]), STR_110(CODE[17]), 
		 -> STR_109(CODE[15]), STR_108(CODE[15]), STR_107(CODE[15]), STR_106(CODE[17]), 
		 -> STR_105(CODE[17]), STR_104(CODE[17]), STR_103(CODE[16]), STR_102(CODE[17]), 
		 -> STR_101(CODE[17]), STR_100(CODE[17]), STR_99(CODE[17]), STR_98(CODE[17]), 
		 -> STR_97(CODE[17]), STR_96(CODE[15]), STR_95(CODE[11]), STR_94(CODE[17]), 
		 -> STR_93(CODE[11]), STR_92(CODE[17]), STR_91(CODE[14]), STR_90(CODE[15]), 
		 -> STR_89(CODE[14]), STR_88(CODE[10]), STR_87(CODE[9]), STR_86(CODE[9]), 
		 -> STR_85(CODE[10]), STR_84(CODE[10]), STR_83(CODE[16]), STR_82(CODE[15]), 
		 -> STR_81(CODE[3]), STR_80(CODE[15]), STR_79(CODE[13]), STR_78(CODE[14]), 
		 -> STR_77(CODE[8]), STR_76(CODE[14]), STR_75(CODE[15]), STR_74(CODE[12]), 
		 -> STR_73(CODE[14]), STR_72(CODE[17]), STR_71(CODE[14]), STR_70(CODE[15]), 
		 -> STR_69(CODE[17]), STR_68(CODE[17]), STR_67(CODE[7]), STR_66(CODE[21]), 
		 -> STR_65(CODE[13]), STR_64(CODE[11]), STR_63(CODE[24]), STR_50(CODE[17]), 
		 -> STR_49(CODE[17]), STR_48(CODE[17]), STR_47(CODE[17]), STR_46(CODE[17]), 
		 -> STR_45(CODE[17]), STR_44(CODE[17]), STR_43(CODE[17]), STR_42(CODE[17]), 
		 -> STR_41(CODE[17]), STR_40(CODE[17]), STR_39(CODE[17]), STR_38(CODE[17]), 
		 -> STR_37(CODE[17]), STR_36(CODE[17]), STR_35(CODE[17]), STR_34(CODE[17]), 
		 -> STR_33(CODE[17]), STR_32(CODE[17]), STR_31(CODE[17]), STR_30(CODE[17]), 
		 -> STR_29(CODE[3]), STR_28(CODE[17]), STR_27(CODE[17]), STR_26(CODE[17]), 
		 -> STR_25(CODE[17]), STR_24(CODE[17]), STR_23(CODE[14]), STR_22(CODE[10]), 
		 -> STR_21(CODE[24]), STR_7(CODE[7]), STR_6(CODE[17]), STR_5(CODE[18]), 
		 -> STR_4(CODE[16]), STR_3(CODE[18]), STR_2(CODE[14]), STR_1(CODE[18]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _handler in COMRAM

    _handler->_printSortTimer
    _updateServoStates->i2_updateServoPosition
    i2_change_state_to_menu_start->i2_printRTC
    i2_printRTC->i2_printf
    i2_change_state_to_menu_22->i2_printf
    i2_change_state_to_menu_12->i2_printf
    _change_state_to_menu_23->i2_printf
    _change_state_to_menu_11->i2_printf
    _change_state_to_logs_34->i2_printf
    _change_state_to_logs_33->i2_printf
    _change_state_to_logs_23->i2_printf
    _change_state_to_logs_22->i2_printf
    _change_state_to_logs_12->i2_printf
    _change_state_to_logs_11->i2_printf
    _dispLogs->_retrieveLog
    _retrieveLog->i2___wmul
    _printSortTimer->i2_printf
    i2_printf->i2___lwdiv
    i2_putch->i2_lcdNibble
    i2___lwdiv->i2___lwmod
    i2_lcdInst->i2_lcdNibble
    i2_getRTC->i2_I2C_Master_Read
    i2_getRTC->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_UI
    _sort->_Loading
    _Loading->_EEPROM_write
    _initSortTimer->_getRTC
    _getMAG->_readMAG
    _getIR->_readIR
    _readIR->_readADC
    _ID->_delay_ms
    _Distribution->_updateServoPosition
    _logRun->_EEPROM_write
    _EEPROM_write->_printf
    _loadRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _change_state_to_menu_start->_printRTC
    _initLCD->_lcdInst
    _UI->_printRTC
    _printRTC->_printf
    _getRTC->_I2C_Master_Read
    _getRTC->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _change_state_to_menu_22->_printf
    _change_state_to_menu_12->_printf
    ___awdiv->___awmod
    _Test->_actuatorTest
    _sensorTest->_printf
    _readMAG->_readADC
    _algorithmTest->_printf
    _actuatorTest->_printf
    _SpeedTest->_printf
    _PusherTest->_printf
    _PortTestA5->_printf
    _BothServos->_printf
    _initServos->_updateServoPosition
    _BlockerTest->_printf
    _printf->___awdiv
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble

Critical Paths under _handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  200533
                    _I2C_Master_Init
                               _Test
                                 _UI
                            _initLCD
                           _initTime
                             _initUI
                             _logRun
                      _machineConfig
                               _sort
                        _stopSignals
 ---------------------------------------------------------------------------------
 (1) _stopSignals                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _sort                                                 0     0      0   22737
                       _Distribution
                                 _ID
                            _Loading
 ---------------------------------------------------------------------------------
 (2) _Loading                                             19    19      0   17463
                                             49 BANK0     19    19      0
                        _EEPROM_read
                       _EEPROM_write
                           _delay_ms
                              _getIR
                             _getMAG
                     _initGlobalVars
                         _initServos
                      _initSortTimer
                            _lcdInst
                             _readIR
 ---------------------------------------------------------------------------------
 (3) _initSortTimer                                        5     5      0     631
                                              5 BANK0      5     5      0
                             _getRTC
 ---------------------------------------------------------------------------------
 (3) _initGlobalVars                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _getMAG                                               2     2      0      45
                                              6 BANK0      2     2      0
                            _readMAG
 ---------------------------------------------------------------------------------
 (3) _getIR                                                3     3      0      91
                                              6 BANK0      3     3      0
                             _readIR
 ---------------------------------------------------------------------------------
 (3) _readIR                                               4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _ID                                                   6     6      0     137
                                              2 BANK0      6     6      0
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             2     2      0      23
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _Distribution                                         2     2      0    5137
                                              8 BANK0      2     2      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (1) _machineConfig                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _logRun                                              10    10      0   11286
                                             49 BANK0     10    10      0
                        _EEPROM_read
                       _EEPROM_write
 ---------------------------------------------------------------------------------
 (3) _EEPROM_write                                         6     3      3   10539
                                             43 BANK0      6     3      3
                        _EEPROM_read
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _EEPROM_read                                          2     0      2     426
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _initUI                                               0     0      0   22968
         _change_state_to_menu_start
                            _loadRTC
 ---------------------------------------------------------------------------------
 (2) _loadRTC                                              3     3      0     914
                                             21 BANK0      3     3      0
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Init                                      8     4      4     440
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     290
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_start                           0     0      0   22054
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initTime                                             7     1      6     538
                                              0 BANK0      7     1      6
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _UI                                                  24    24      0   45688
                                             68 BANK0     22    22      0
                            ___awdiv
                            ___awmod
            _change_state_to_menu_12
            _change_state_to_menu_22
                            _lcdInst
                           _printRTC
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _printRTC                                            25    25      0   13211
                                             43 BANK0     25    25      0
                             _getRTC
                            _lcdInst
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    3275
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _getRTC                                               2     2      0     519
                                              3 BANK0      2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     2     0      2     406
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_22                              0     0      0    8843
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_12                              0     0      0    8843
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    1064
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     556
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _Test                                                 2     2      0   96741
                                             70 BANK0      2     2      0
                        _BlockerTest
                         _BothServos
                         _EEPROMTest
                         _PortTestA5
                          _PortTests
                         _PusherTest
                          _SpeedTest
                       _actuatorTest
                      _algorithmTest
                            _lcdInst
                             _printf
                         _sensorTest
 ---------------------------------------------------------------------------------
 (2) _sensorTest                                           4     4      0    8955
                                             43 BANK0      4     4      0
                            _lcdInst
                             _printf
                            _readADC
                            _readMAG
 ---------------------------------------------------------------------------------
 (4) _readMAG                                              4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _algorithmTest                                        2     2      0    8843
                                             43 BANK0      2     2      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _actuatorTest                                        27    27      0   15223
                                             43 BANK0     27    27      0
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (2) _SpeedTest                                            1     1      0    8843
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PusherTest                                          10    10      0    9047
                                             43 BANK0     10    10      0
                            _lcdInst
                             _printf
                            _readADC
 ---------------------------------------------------------------------------------
 (4) _readADC                                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _PortTests                                            2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _PortTestA5                                           1     1      0    8843
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _EEPROMTest                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _BothServos                                           2     2      0   19117
                                             43 BANK0      2     2      0
                         _initServos
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (3) _initServos                                           1     1      0    5137
                                              8 BANK0      1     1      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (4) _updateServoPosition                                  8     4      4    5137
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _BlockerTest                                          7     7      0    9027
                                             43 BANK0      7     7      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _printf                                              33    21     12    8708
                                             14 BANK0     29    17     12
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     669
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     515
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     366
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _handler                                             16    16      0   76327
                                             74 COMRAM    16    16      0
                     _printSortTimer
                         _updateMenu
                  _updateServoStates
 ---------------------------------------------------------------------------------
 (8) _updateServoStates                                    2     2      0     593
                                              8 COMRAM     2     2      0
              i2_updateServoPosition
 ---------------------------------------------------------------------------------
 (9) i2_updateServoPosition                                8     4      4     593
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (8) _updateMenu                                           2     2      0   70855
                                             66 COMRAM     2     2      0
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
                           _dispLogs
                       _inputHandler
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_start                         0     0      0    7640
                          i2_lcdInst
                         i2_printRTC
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printRTC                                         25    25      0    4553
                                             41 COMRAM    25    25      0
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
                           i2_strcpy
 ---------------------------------------------------------------------------------
 (11) i2_strcpy                                            6     2      4     699
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _inputHandler                                         4     2      2   30870
                                             41 COMRAM     4     2      2
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_22                            0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_12                            0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_23                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_11                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_34                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_33                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_23                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_22                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_12                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_11                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) _dispLogs                                             2     0      2    1475
                                             17 COMRAM     2     0      2
                        _retrieveLog
 ---------------------------------------------------------------------------------
 (10) _retrieveLog                                        11     9      2    1047
                                              6 COMRAM    11     9      2
                      i2_EEPROM_read
                           i2___wmul
 ---------------------------------------------------------------------------------
 (11) i2_EEPROM_read                                       2     0      2     174
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _printSortTimer                                      33    33      0    4879
                                             41 COMRAM    33    33      0
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                         i2_delay_ms
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printf                                           33    21     12    2952
                                             12 COMRAM    29    17     12
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (11) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (11) i2___wmul                                            6     2      4     469
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (11) i2___lwmod                                           5     1      4     367
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (11) i2___lwdiv                                           7     3      4     266
                                              5 COMRAM     7     3      4
                          i2___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (11) i2_lcdInst                                           1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (12) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (11) i2_getRTC                                            2     2      0     213
                                              3 COMRAM     2     2      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Write                                  2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Stop                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Start                                  0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Read                                   2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (13) i2_I2C_Master_Wait                                   1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (9) i2_delay_ms                                           2     2      0      23
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _Test
     _BlockerTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _BothServos
       _initServos
         _updateServoPosition
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _EEPROMTest
     _PortTestA5
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _PortTests
     _PusherTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
     _SpeedTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _actuatorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _algorithmTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _sensorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
       _readMAG
         _readADC
   _UI
     ___awdiv
       ___awmod (ARG)
     ___awmod
     _change_state_to_menu_12
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _change_state_to_menu_22
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printRTC
       _getRTC
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _strcpy
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _strcpy
   _initLCD
     _lcdInst
       _lcdNibble
   _initTime
   _initUI
     _change_state_to_menu_start
       _lcdInst
         _lcdNibble
       _printRTC
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
         _strcpy
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _loadRTC
       _I2C_Master_Init
         ___lldiv
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _logRun
     _EEPROM_read
     _EEPROM_write
       _EEPROM_read
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
   _machineConfig
   _sort
     _Distribution
       _updateServoPosition
     _ID
       _delay_ms
     _Loading
       _EEPROM_read
       _EEPROM_write
         _EEPROM_read
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
       _delay_ms
       _getIR
         _readIR
           _readADC
       _getMAG
         _readMAG
           _readADC
       _initGlobalVars
       _initServos
         _updateServoPosition
       _initSortTimer
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _readIR
         _readADC
   _stopSignals

 _handler (ROOT)
   _printSortTimer
     i2___lwdiv
       i2___lwmod (ARG)
     i2___lwmod
     i2___wmul
     i2_delay_ms
     i2_getRTC
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _updateMenu
     _change_state_to_logs_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_33
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_34
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _dispLogs
       _retrieveLog
         i2_EEPROM_read
         i2___wmul
     _inputHandler
       _change_state_to_logs_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_33
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_34
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
     i2_change_state_to_menu_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_start
       i2_lcdInst
         i2_lcdNibble
       i2_printRTC
         i2_getRTC
           i2_I2C_Master_Read
             i2_I2C_Master_Wait
           i2_I2C_Master_Start
             i2_I2C_Master_Wait
           i2_I2C_Master_Stop
             i2_I2C_Master_Wait
           i2_I2C_Master_Write
             i2_I2C_Master_Wait
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
         i2_strcpy
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
   _updateServoStates
     i2_updateServoPosition

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      49       7       28.5%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     5A      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     5A      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     146      34        0.0%
DATA                 0      0     146       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Fri Mar 31 16:06:13 2017

                                    _i 013D                     i2_I2C_Master_Start 52EC  
                   i2_I2C_Master_Write 52C2                                     l66 525A  
                                   _ID 30DC                       _f_panning_to_bin 0061  
                          __CFG_CPD$ON 000000                                     _UI 08CA  
                         ___awdiv@sign 008B                                     _up 0077  
                  ___wmul@multiplicand 0082                     i2___lwdiv@dividend 0006  
                          __CFG_BORV$3 000000                     EEPROM_read@address 0080  
                         __CFG_CP0$OFF 000000                           __CFG_CP1$OFF 000000  
                         __CFG_CP2$OFF 000000                           __CFG_CP3$OFF 000000  
                                  ID@i 0084                                    ?_ID 0001  
                                  ?_UI 0001                                    UI@i 00C8  
                                  l180 09A0                                    l606 24E2  
                                  l491 4080                                    l805 324C  
                                  l806 3266                                    l752 123C  
                                  l809 3300                                    l770 13C0  
                                  l762 12EC                                    l861 456E  
                                  l773 13FA                                    l765 1326  
                                  l790 154C                                    l791 1562  
                                  l785 14FE                                    l795 15F6  
                                  l787 1510                                    l779 15AC  
                                  l788 1524                                    l789 1538  
                         __CFG_CPB$OFF 000000                                    _PEN 007E2A  
                                  _SEN 007E28                    ?i2_I2C_Master_Start 0001  
            __end_of_updateServoStates 36C4                         ?_machineConfig 0001  
                  ?i2_I2C_Master_Write 0002                                    _log 00F2  
                                  _sel 00FD                                    _var 00FA  
                         ___awmod@sign 0085                                    wreg 000FE8  
                  i2printRTC@RTC_month 003B                    __end_of_BlockerTest 39D8  
                  _log_count_can_w_lab 0067                             i2_delay_ms 51F6  
      __end_of_change_state_to_menu_11 4F06        __end_of_change_state_to_menu_12 4D46  
      __end_of_change_state_to_menu_22 4D0E        __end_of_change_state_to_menu_23 4ED6  
         _f_can_coming_to_distribution 0133                         ??_Distribution 0088  
      __end_of_change_state_to_logs_11 4FF6        __end_of_change_state_to_logs_12 4FC6  
      __end_of_change_state_to_logs_22 4F96        __end_of_change_state_to_logs_23 5052  
      __end_of_change_state_to_logs_33 4F66        __end_of_change_state_to_logs_34 4F36  
                                 ??_ID 0082                                   ??_UI 00C4  
                         __CFG_LVP$OFF 000000                           __CFG_WDT$OFF 000000  
                                 l1023 3D6E                                   l1201 0080  
                                 l1210 0240                                   l1211 028E  
                                 l1036 523C                                   l1205 0126  
                                 l1045 3B06                                   l1310 2E3E  
                                 l1142 3CB6                                   l1208 018C  
                                 l1209 01DA                                   l1314 2E82  
                                 l1403 184A                                   l1307 2EA2  
                                 l1235 05E8                                   l1163 3F6A  
                                 l1139 3C96                                   l1316 2E9C  
                                 l1252 0858                                   l1172 218C  
                                 l1166 3F6E                                   l1271 4654  
                                 l1247 0782                                   l1175 2190  
                                 l1272 4658                                   l1273 465C  
                                 l1265 4634                                   l1345 4604  
                                 l1362 392A                                   l1274 4660  
                                 l1338 45F4                                   l1275 4664  
                                 l1292 4A5E                                   l1277 46A2  
                                 l1269 4650                                   l1286 4A4E  
                                 l1198 007C                                   l1367 3976  
                                 l1368 3990                                   l1850 4726  
                                 l1860 4944                                   l6101 4718  
                                 l6111 490C                                   l6031 5092  
                                 l6113 4912                                   l6033 50A4  
                                 l6117 4936                                   l6109 4900  
                                 l6301 18A2                                   l1797 420E  
                                 l7005 449C                                   l6231 1638  
                                 l6055 501C                                   l6073 50CA  
                                 l6313 18DE                                   l6241 1676  
                                 l6225 1612                                   l6401 458C  
                                 l6091 46E2                                   l6331 195C  
                                 l6323 1938                                   l6235 1642  
                                 l7211 11FA                                   l6093 46E8  
                                 l6325 1942                                   l6261 1736  
                                 l6229 1626                                   l8013 07DC  
                                 l6413 4192                                   l7301 13DA  
                                 l7221 1244                                   l6343 199E  
                                 l6319 1900                                   l6271 17AE  
                                 l8023 0804                                   l6415 41A2  
                                 l7303 13E4                                   l6089 46D6  
                                 l6353 1A10                                   l6337 1978  
                                 l6273 17C6                                   l6257 1724  
                                 l6249 16F2                                   l8105 462C  
                                 l8033 0842                                   l8017 07F4  
                                 l8009 07D2                                   l6361 4D5C  
                                 l6425 41FC                                   l6417 41A8  
                                 l7313 1414                                   l6339 1984  
                                 l6347 19B2                                   l6267 179C  
                                 l6259 1730                                   l6283 1810  
                                 l6355 1A1C                                   l8043 0872  
                                 l8027 081C                                   l8019 07FA  
                                 l6371 44FA                                   l6349 19B8  
                                 l6277 17F2                                   l6269 17A8  
                                 l8117 2C90                                   l8053 089A  
                                 l8045 0878                                   l6621 2460  
                                 l7341 14DC                                   l7325 1478  
                                 l7317 143A                                   l7253 12D6  
                                 l7237 1280                                   l6295 1882  
                                 l6279 180A                                   l8311 38C8  
                                 l8135 2D48                                   l8063 08C2  
                                 l8055 08A0                                   l6367 44E4  
                                 l6359 4D50                                   l6631 2528  
                                 l7431 31D4                                   l7343 14E6  
                                 l7263 1306                                   _ADIE 007CEE  
                                 l8137 2D4E                                   l8049 0882  
                                 l9121 3C38                                   l6377 451A  
                                 l6641 25BE                                   l6633 2546  
                                 l7265 1310                                   l6299 189C  
                                 l8331 392C                                   l8315 38F8  
                                 l6395 4552                                   l8155 2E06  
                                 l8059 08AA                                   l7603 232A  
                                 l8411 4392                                   l6643 25DC  
                                 l6635 2564                                   l6627 24EC  
                                 l7443 320C                                   l7427 31C4  
                                 l7371 156E                                   l7291 13AA  
                                 l7275 1340                                   l8341 3960  
                                 l8333 393C                                   l8181 2E6C  
                                 l9141 3CC2                                   l8421 43C2  
                                 l6645 25FA                                   l6637 2582  
                                 l6629 250A                                   l6653 2654  
                                 l9109 3AC0                                   l6805 4366  
                                 l7373 15A4                                   l8351 3992  
                                 l8167 2E28                                   l7623 23A6  
                                 l7615 2376                                   l9151 3CE0  
                                 l9143 3CC8                                   l8423 43C8  
                                 l8431 43FA                                   l8415 43A2  
                                 l6647 2618                                   l6639 25A0  
                                 l6655 26B2                                   l8511 09D0  
                                 l7439 31FC                                   l6903 477E  
                                 l7391 15EA                                   l8353 39A2  
                                 l8177 2E58                                   l7801 03B6  
                                 l9153 3CE6                                   l9145 3CCE  
                                 l9161 3CF8                                   l6649 2636  
                                 l8505 09B8                                   l6841 3DDA  
                                 l7473 32BE                                   l7481 3302  
                                 l7393 15F8                                   l8339 3956  
                                 l8195 4668                                   l7635 23EE  
                                 l7627 23DC                                   l9155 3CEC  
                                 l9147 3CD4                                   l9139 3CBC  
                                 l8435 440E                                   l8427 43EC  
                                 l8419 43B6                                   l8611 0BE2  
                                 l8523 0A04                                   l8515 09DA  
                                 l8507 09BE                                   l9083 3A24  
                                 l7491 3E76                                   l6907 4796  
                                 l7379 15B4                                   l8357 39D2  
                                 l7821 041C                                   l7805 03C0  
                                 l9157 3CF2                                   l9149 3CDA  
                                 l8381 4102                                   l8373 40D8  
                                 l8621 0C78                                   l8613 0C00  
                                 l8605 0B88                                   l6853 3E12  
                                 l6845 3DE4                                   l9085 3A38  
                                 l7493 3E90                                   l9341 4042  
                                 l7903 05C0                                   l7831 0444  
                                 l7639 2424                                   l7567 21E0  
                                 l8391 4138                                   l8383 4108  
                                 l8367 40C2                                   l8703 0F26  
                                 l8623 0C96                                   l8615 0C1E  
                                 l8607 0BA6                                   l8543 0A68  
                                 l8519 09F2                                   l7487 3E42  
                                 l6863 50DA                                   l7905 05C6  
                                 l7825 0434                                   l7817 0412  
                                 l7809 03D8                                   l7681 00F0  
                                 l7585 2298                                   l8801 10FC  
                                 l8721 0F8C                                   l8625 0CB4  
                                 l8617 0C3C                                   l8609 0BC4  
                                 l8633 0D0E                                   l8537 0A58  
                                 l8553 0A8E                                   l6857 3E1C  
                                 l6849 3DFC                                   l7489 3E5C  
                                 l7497 3EAA                                   l9345 4052  
                                 l7931 0652                                   l7923 0630  
                                 l7851 04B8                                   l7843 0496  
                                 l7835 045C                                   l7827 043A  
                                 l8379 40F6                                   l8395 4146  
                                 l8643 0DBE                                   l8627 0CD2  
                                 l8619 0C5A                                   l8635 0D72  
                                 l8571 0AEA                                   l8547 0A80  
                                 l8539 0A5E                                   l7499 3ED8  
                                 l6867 50F0                                   l6891 4754  
                                 l6795 42DA                                   l9347 4058  
                                 l9363 4082                                   l9339 402C  
                                 l7941 067A                                   l7933 0658  
                                 l7909 05D0                                   l7861 04E0  
                                 l7853 04BE                                   l7773 032C  
                                 l7765 030A                                   l7685 00FA  
                                 l7597 22E8                                   l8805 1106  
                                 l8725 0F96                                   l8661 0E0A  
                                 l8653 0DE8                                   l8629 0CF0  
                                 l8581 0B14                                   l9357 4076  
                                 l9349 405E                                   l7927 063A  
                                 l7847 04A0                                   l7791 038E  
                                 l7783 0354                                   l7775 0332  
                                 l7679 00EA                                   l8399 415A  
                                 l8823 1152                                   l8815 1130  
                                 l8743 0FE2                                   l8735 0FC0  
                                 l8647 0DD6                                   l8639 0DB4  
                                 l8575 0B02                                   l8567 0AE0  
                                 l6887 473E                                   l6799 42F0  
                                 l9359 407C                                   l7953 06BE  
                                 l7937 0662                                   l7873 0524  
                                 l7857 04C8                                   l7769 0314  
                                 l7689 0112                                   l8809 111E  
                                 l8761 1048                                   l8729 0FAE  
                                 l8681 0ED0                                   l8657 0DF2  
                                 l8585 0B1E                                   l7963 06E6  
                                 l7883 054C                                   l7795 0398  
                                 l7779 033C                                   l8819 113A  
                                 l8739 0FCA                                   l8827 115E  
                                 l6995 445A                                   l7957 06D6  
                                 l7949 06B4                                   l7877 053C  
                                 l7869 051A                                   l8765 1052  
                                 l8685 0EDA                                   l8589 0B36  
                                 l7983 075A                                   l7975 0738  
                                 l7967 06FE                                   l7959 06DC  
                                 l7895 059E                                   l7887 0564  
                                 l7879 0542                                   l7799 03B0  
                                 l8783 109E                                   l8775 107C  
                                 l8695 0F04                                   l6999 4470  
                                 l7985 0760                                   l8769 106A  
                                 l8689 0EF2                                   l7979 0742  
                                 l7899 05A8                                   l8779 1086  
                                 l8699 0F0E                                   l7989 076A  
                                 STR_1 FBA3                                   STR_2 FF27  
                                 STR_3 FB91                                   STR_4 FE4A  
                                 STR_5 FB91                                   STR_6 FDE6  
                                 STR_7 FFC4                                   STR_8 FFDB  
                                 STR_9 FFCB                ??i2_updateServoPosition 0005  
                                 _LATA 000F89                                   _LATB 000F8A  
                                 _LATC 000F8B                                   _LATD 000F8C  
                                 _LATE 000F8D                                   u5200 24E2  
                                 u4500 4BFA                                   u4510 4C44  
                                 u6110 2412                                   u4511 4C40  
                                 u6200 01DA                                   u4520 4C46  
                                 u6040 2222                                   u4610 17E8  
                                 u6050 2224                                   u4290 501A  
                                 _PEIE 007F96                                   u6220 028E  
                                 u7021 394C                                   u7030 394E  
                                 u6118 2416                                   u6080 23CA  
                                 u4617 17DE                                   u5185 497E  
                                 u4570 1770                                   u4490 4BF8  
                                 u6180 0126                                   _RCEN 007E2B  
                                 u5550 1206                                   u7080 39C0  
                                 u6088 23CE                                   u4577 1766  
                                 u5570 123C                                   u8140 3B06  
                                 u5750 1458                                   u9007 0E24  
                                 u7088 39C4                                   u5568 120A  
                                 u9017 0EE2                                   i2l66 526E  
                                 u9107 110E                                   u9027 0F16  
                                 u5860 312E                                   u9117 1142  
                                 u9037 0F40                                   u6910 388A  
                                 u6750 2CD2                                   u5870 3184  
                                 u9207 22AC                                   u9127 3C46  
                                 u9047 0F9E                                   u6920 38E6  
                                 u6760 2CD4                                   u5960 32CA  
                                 u5768 145C                                   u9217 22DA  
                                 u9137 3C8A                                   u9057 0FD2  
                                 u9307 0070                                   u9227 231E  
                                 u9147 213C                                   u9067 0FFC  
                                 u8507 12F8                                   u6780 2D90  
                                 u5980 3300                                   u5868 3132  
                                 u9317 0092                                   u9237 233C  
                                 u9157 2180                                   u9077 105A  
                                 u8517 132A                                   u6918 388E  
                                 u6790 2D92                                   u5878 3188  
                                 u9407 031C                                   u9327 0102  
                                 u9247 236A                                   u9167 21A2  
                                 u9087 108E                                   u8607 1492  
                                 u8527 1334                                   u6928 38EA  
                                 u9417 0344                                   u9337 0136  
                                 u9257 2384                                   u9177 21D0  
                                 u9097 10B8                                   u8617 14CA  
                                 u8537 134E                                   u5978 32CE  
                                 u6971 3920                                   u9507 05B0  
                                 u9427 03A0                                   u9347 019C  
                                 u9267 3F1A                                   u9187 2238  
                                 u8707 1550                                   u8627 1502  
                                 u8547 1378                                   u6980 3922  
                                 u9517 05D8                                   u9437 03C8  
                                 u9357 01BA                                   u9277 3F5E  
                                 u9197 228C                                   u8717 155A  
                                 u8637 150A                                   u8557 13C4  
                                 u8477 118A                                   u9607 080C  
                                 u9527 0642                                   u9447 0424  
                                 u9367 01EA                                   u9287 3F80  
                                 u8807 321C                                   u8727 1566  
                                 u8647 1514                                   u8567 13CC  
                                 u8487 12A4                                   u9617 085C  
                                 u9537 066A                                   u9457 044C  
                                 u9377 0250                                   u9297 002C  
                                 u8817 3250                                   u8737 15CE  
                                 u8657 151E                                   u8577 13FE  
                                 u8497 12F0                                   u9707 2D3C  
                                 u9627 0866                                   u9547 06C6  
                                 u9467 04A8                                   u9387 026E  
                                 u8907 08E2                                   u8827 325A  
                                 u8747 4DD0                                   u8667 1528  
                                 u8587 1408                                   u9717 2DA6  
                                 u9637 088A                                   u9557 06EE  
                                 u9477 04D0                                   u9397 029E  
                                 u8917 09E2                                   u8837 3282  
                                 u8757 475C                                   u8677 1532  
                                 u8597 1422                                   u9807 1A96  
                                 u9727 2DFA                                   u9647 08B2  
                                 u9567 074A                                   u9487 052C  
                                 u8927 0A1A                                   u8847 50E6  
                                 u8767 30F6                                   u8687 153C  
                                 u9817 1AE2                                   u9737 2E42  
                                 u9657 45BE                                   u9577 0772  
                                 u9497 0554                                   u8937 0A70  
                                 u8857 3D90                                   u8777 3114  
                                 u8697 1544                                   u9907 1CF8  
                                 u9827 1B16                                   u9747 2E4A  
                                 u9667 460E                                   u9587 0794  
                                 u8947 0A9C                                   u8867 3DEC  
                                 u8787 314C                                   u9917 1D44  
                                 u9837 1B48                                   u9757 2E86  
                                 u9677 4622                                   u9597 07E4  
                                 u8957 0AF2                                   u8877 3E24  
                                 u8797 316A                                   u9927 1D78  
                                 u9847 1B94                                   u9767 2E90  
                                 u9687 2C6C                                   u8967 0B26  
                                 u8887 4C56                                   u9937 1DAA  
                                 u9857 1BC8                                   u9777 509A  
                                 u9697 2CE8                                   u8977 0B50  
                                 u8897 4C8A                                   u9947 4AA8  
                                 u9867 1BFA                                   u9787 4A18  
                                 u8987 0DC6                                   u9957 3862  
                                 u9877 1C46                                   u9797 1A4A  
                                 u8997 0DFA                                   u9967 397A  
                                 u9887 1C92                                   u9977 3984  
                                 u9897 1CC6                                   u9987 48A4  
                                 _RSEN 007E29                                   u9997 48AE  
                          _stopSignals 5212                                   _Test 3C38  
                                 _back 005B                                   _main 3FE2  
                                 _down 005D                                   _keys FAEF  
                                 _time 011C                                   fsr0h 000FEA  
                                 fsr1h 000FE2                     i2___lwdiv@quotient 000A  
                                 indf0 000FEF                                   fsr2h 000FDA  
                                 fsr0l 000FE9                                   indf2 000FDF  
                                 fsr1l 000FE1                                   fsr2l 000FD9  
                                 _sort 5194                                   btemp 007E  
                 ??i2_I2C_Master_Start 0002                   ??i2_I2C_Master_Write 0004  
                                 prodh 000FF4                                   prodl 000FF3  
                                 start 000E                          __CFG_IESO$OFF 000000  
                 _log_count_can_no_lab 0065                        __end_ofi2_putch 52AC  
                  __size_of_EEPROMTest 0002                          __CFG_MCLRE$ON 000000  
                         ___param_bank 000000                             i2_printRTC 2EA6  
                          i2_lcdNibble 4AC0                        __end_of_Loading 1604  
                 __end_of_actuatorTest 08CA             i2updateServoPosition@timer 0003  
                     ?_I2C_Master_Init 008D                       ?_I2C_Master_Read 0001  
                     ?_I2C_Master_Wait 0001            ??i2_change_state_to_menu_12 002A  
          ??i2_change_state_to_menu_22 002A                       ?_I2C_Master_Stop 0001  
                                ?_Test 0001                   __end_of_EEPROM_write 3E34  
                                ?_main 0001                                  _ACKEN 007E2C  
                                _ACKDT 007E2D                        __end_of___awdiv 4164  
                                _EEADR 000FA9                                  STR_10 FFE7  
                                STR_11 FFEB                                  STR_12 FFFB  
                                STR_20 FFEF                                  STR_13 FFDF  
                                STR_21 FB0A                                  STR_14 FFD7  
                                STR_22 FF9B                                  STR_30 FDF7  
                                STR_15 FFD3                                  STR_23 FF19  
                                STR_31 FDD5                                  STR_16 FFE3  
                                STR_24 FD3C                                  STR_32 FD1A  
                                STR_40 FCD6                                  STR_17 FFF3  
                                STR_25 FE19                                  STR_33 FD2B  
                                STR_41 FCC5                                  STR_18 FFF7  
                                STR_34 FDC4                                  STR_50 FDA2  
                                STR_42 FD80                                  STR_26 FD4D  
                                STR_43 FD80                                  STR_35 FDC4  
                                STR_51 FFDB                                  STR_19 FFCF  
                                STR_27 FE08                                  STR_52 FFCB  
                                STR_60 FFF3                                  STR_28 FD5E  
                                STR_36 FD09                                  STR_44 FCE7  
                      __end_of___awmod 4418                                  STR_45 FCD6  
                                STR_37 FD1A                                  STR_53 FFE7  
                                STR_61 FFF7                                  STR_29 FE16  
                                STR_62 FFCF                                  STR_54 FFEB  
                                STR_70 FED2                                  STR_38 FDB3  
                                STR_46 FD91                                  STR_47 FD91  
                                STR_55 FFFB                                  STR_63 FB0A  
                                STR_71 FF0B                                  STR_39 FD6F  
                                STR_56 FFDF                                  STR_64 FF7C  
                                STR_80 FE5A                                  STR_48 FCF8  
                                STR_72 FC5F                                  STR_49 FCE7  
                                STR_57 FFD7                                  STR_81 FE16  
                                STR_65 FF42                                  STR_73 FEEF  
                                STR_58 FFD3                                  STR_74 FF4F  
                                STR_90 FEC3                                  STR_82 FE87  
                                STR_66 FB22                                  STR_59 FFE3  
                                STR_67 FFBD                                  STR_91 FEE1  
                                STR_75 FEB4                                  STR_83 FE2A  
                                STR_84 FF87                                  STR_76 FEFD  
                                STR_68 FC92                                  STR_92 FC70  
                                STR_85 FF87                                  STR_77 FFAE  
                                STR_93 FF5B                                  STR_69 FCA3  
                                STR_78 FF0B                                  STR_86 FFA5  
                                STR_94 FC81                                  STR_87 FFA5  
                                STR_95 FF66                                  STR_79 FF35  
                                STR_88 FF91                                  STR_96 FEA5  
                                STR_89 FF0B                                  STR_97 FC0A  
                                STR_98 FBF9                                  STR_99 FBD7  
         i2updateServoPosition@my_time 0007                                  ?_sort 0001  
                      __end_of___lldiv 4220           i2updateServoPosition@time_us 0001  
                                u10007 48DA                                  u10017 48E4  
                                _T0CON 000FD5                        ___awdiv@divisor 0088  
                                _T1CON 000FCD                                  _T3CON 000FB1  
                      __end_of___lwdiv 4730                        __end_of___lwmod 494E  
                                i2l257 29B2                                  i2l606 2F34  
                                i2l840 2B84                                  i2l861 484A  
                                i2l960 3818                                  i2l954 37A0  
                      ___awdiv@counter 008A                                  i2l958 37F8  
                                _TMR0H 000FD7                                  _TMR1H 000FCF  
                                _TMR0L 000FD6                                  _TMR3H 000FB3  
                                _TMR1L 000FCE                                  _TMR3L 000FB2  
                           _BothServos 1A3C                                  _PORTB 000F81  
                                _TRISA 000F92                                  _TRISB 000F93  
                                _TRISC 000F94                                  _TRISD 000F95  
                                _TRISE 000F96                          __CFG_PWRT$OFF 000000  
                        __CFG_WRT0$OFF 000000                          __CFG_WRT1$OFF 000000  
                        __CFG_WRT2$OFF 000000                          __CFG_WRT3$OFF 000000  
                      __end_of_lcdInst 52A0                        __end_of_handler 3854  
                       __CFG_EBTR0$OFF 000000                         __CFG_FCMEN$OFF 000000  
                       __CFG_EBTR1$OFF 000000                         __CFG_EBTR2$OFF 000000  
                       __CFG_EBTR3$OFF 000000                                  _nRBPU 007F8F  
                        __CFG_WRTB$OFF 000000                          __CFG_WRTC$OFF 000000  
                        __CFG_WRTD$OFF 000000                        __end_of_readADC 50AA  
                      __end_of_initLCD 4C94                         __CFG_EBTRB$OFF 000000  
                                _debug 012D                             i2isdigit@c 0003  
                                _getIR 4730                        __end_of_loadRTC 44A4  
                      __end_of_readMAG 4C4E                        __end_of_dpowers FB0A  
                                _first 0139                                  _enter 005F  
                      __end_of_isdigit 50D4                                  _input 007D  
                                _putch 5280                                  pclath 000FFA  
                                tablat 000FF5                       __end_ofi2___wmul 514A  
                     __end_ofi2_getRTC 4814                    _log_count_pop_w_tab 006B  
                                status 000FD8                         __CFG_PBADEN$ON 000000  
                        i2printf@width 0028                       __end_ofi2_printf 212E  
                   __size_ofi2___lwdiv 0052                     __size_ofi2___lwmod 0042  
                     __end_ofi2_strcpy 4E16                            Loading@addr 00B3  
                     _count_can_no_lab 0123                   printSortTimer@i_1185 0047  
                 __size_of_EEPROM_read 0018                        __initialization 4B68  
                         __end_of_Test 3D4C                     __size_ofi2_lcdInst 000C  
                         __end_of_main 40A6                           __end_of_keys FB00  
                         __end_of_sort 51B6                             i2printf@ap 0020  
                           i2printf@cp 001E                          PusherTest@res 00AD  
                   __size_ofi2_isdigit 001E                       PusherTest@i_1792 00B3  
                          _BlockerTest 3854                                 ??_Test 00C6  
  __size_of_change_state_to_menu_start 002C                        ??_machineConfig 0080  
                               ??_main 00DA                                 ??_sort 00C4  
                        __activetblptr 000003             __size_of_updateServoStates 01CA  
           updateServoPosition@my_time 0086             updateServoPosition@time_us 0080  
                           i2strcpy@cp 0005                             i2strcpy@to 0001  
                    ?_I2C_Master_Start 0001                    EEPROM_write@address 00AB  
               __size_ofi2_EEPROM_read 0016                      ?_I2C_Master_Write 0081  
                          ?i2_delay_ms 0001                                 ?_getIR 0001  
                   ??_I2C_Master_Start 0081                                 _ADCON0 000FC2  
                               _ADCON1 000FC1                     ??_I2C_Master_Write 0083  
                               _ADCON2 000FC0                                 STR_100 FC2C  
                               STR_101 FC3D                                 STR_110 FCB4  
                               STR_102 FBB5                                 STR_103 FE3A  
                               STR_111 FB37                                 STR_104 FBE8  
                               STR_120 FB5B                                 STR_112 FB49  
                               STR_121 FB49                                 STR_113 FF71  
                               STR_105 FBC6                                 STR_106 FBE8  
                               STR_114 FE5A                                 STR_122 FB7F  
                               _ADRESH 000FC4                                 STR_115 FE16  
                               STR_107 FE96                                 STR_123 FB6D  
                               STR_116 FE5A                                 STR_124 FB7F  
                               STR_108 FE78                                 _EEADRH 000FAA  
                               STR_117 FE16                                 STR_125 FB7F  
                               STR_109 FE69                                 STR_126 FFB6  
                               STR_118 FC1B                                 _ADRESL 000FC3  
                               STR_119 FC4E                                 _EEDATA 000FA8  
                               _EECON2 000FA7                       ___awdiv@dividend 0086  
                      i2lcdNibble@data 0002                                 ?_putch 0001  
               __size_of_initSortTimer 00AA                        i2lcdNibble@temp 0001  
            i2_change_state_to_menu_12 4E76              i2_change_state_to_menu_22 4E46  
                               _INT1IE 007F83                                 _INT1IF 007F80  
                               _CVRCON 000FB5                                 i2l1036 5252  
                               i2l1403 1F9A                                 i2l1850 4B5E  
                               i2l1860 4CCC                                 i2l6203 4CC2  
                               i2l6141 516A                                 i2l7111 340C  
                               i2l7121 3432                                 i2l7105 33FE  
                               i2l7131 3454                                 i2l7115 3428  
                               i2l6165 51EE                                 i2l6501 1EB8  
                               i2l7125 3446                                 i2l7061 3360  
                               i2l6175 4B2C                                 i2l6511 1F12  
                               i2l7127 344A                                 i2l7071 337E  
                               i2l6441 47EA                                 i2l6177 4B34  
                               i2l6513 1F24                                 i2l7161 34C2  
                               i2l7153 349E                                 i2l7145 347A  
                               i2l7081 339C                                 i2l7073 3384  
                               i2l7057 334C                                 i2l7049 3332  
                               i2l6601 4DF6                                 i2l6187 4B54  
                               i2l6179 4B38                                 i2l6195 4CA2  
                               i2l6507 1F02                                 i2l6523 1F64  
                               i2l7139 346C                                 i2l7075 338A  
                               i2l7059 335C                                 i2l7067 336A  
                               i2l6437 47DA                                 i2l6197 4CAA  
                               i2l6541 1FE4                                 i2l6517 1F4E  
                               i2l6509 1F0C                                 i2l7157 34B0  
                               i2l7149 348C                                 i2l7077 3390  
                               i2l7085 33A2                                 i2l6447 4804  
                               i2l6199 4CAE                                 i2l6535 1FC8  
                               i2l6519 1F60                                 i2l6471 1DE8  
                               i2l7079 3396                                 i2l7167 34CC  
                               i2l6553 2016                                 i2l6481 1E20  
                               i2l6465 1DCA                                 i2l7097 33E6  
                               i2l6571 2072                                 i2l6563 2054  
                               i2l6539 1FE0                                 i2l6475 1DEE  
                               i2l6565 205C                                 i2l6469 1DDA  
                               i2l9205 2B52                                 i2l9213 2B86  
                               i2l9301 3692                                 i2l6583 20A4  
                               i2l6559 2030                                 i2l6593 210A  
                               i2l6577 2088                                 i2l6497 1EAA  
                               i2l6489 1E82                                 i2l9217 2BBA  
                               i2l6579 2090                                 i2l6587 20B6  
                               i2l6499 1EB4                                 i2l6595 2112  
                               i2l9219 2BC0                                 i2l9171 29C2  
                               i2l6771 3BDC                                 i2l8451 4832  
                               i2l9251 354E                                 i2l9243 352E  
                               i2l6589 20BC                                 i2l9181 2A2C  
                               i2l9245 3538                                 i2l9421 37BE  
                               i2l9175 29D2                                 i2l6783 3C20  
                               i2l6775 3BEC                                 i2l6599 4DEE  
                               i2l9239 3518                                 i2l8465 51FA  
                               i2l9193 2AFA                                 i2l6961 2F96  
                               i2l6953 2F3E                                 i2l8457 4864  
                               i2l9273 35E6                                 i2l9257 3564  
                               i2l9265 3582                                 i2l6971 3004  
                               i2l6963 2FAC                                 i2l6955 2F54  
                               i2l6947 2ED2                                 i2l9259 3578  
                               i2l9267 35CC                                 i2l9427 37CC  
                               i2l8469 520A                                 i2l6973 301A  
                               i2l6965 2FC2                                 i2l6957 2F6A  
                               i2l6981 30A0                                 i2l9285 3632  
                               i2l9269 35D6                                 i2l6975 3030  
                               i2l6967 2FD8                                 i2l6959 2F80  
                               i2l8911 2816                                 i2l8903 27FA  
                               i2l9279 360C                                 i2l6969 2FEE  
                               i2l8841 2726                                 i2l9449 3816  
                               i2l9377 373E                                 i2l9385 3758  
                               i2l6979 3046                                 i2l8931 2864  
                               i2l8923 2848                                 i2l8915 2824  
                               i2l8907 2808                                 i2l8851 2748  
                               i2l8843 272C                                 i2l9379 3742  
                               i2l8951 28BA                                 i2l8943 2896  
                               i2l8935 287A                                 i2l8927 2856  
                               i2l8919 283A                                 i2l8871 2780  
                               i2l8855 2756                                 i2l8847 273A  
                               i2l9911 35B0                                 i2l9399 3774  
                               i2l9913 35BA                                 i2l9931 33BA  
                               i2l9923 2966                                 i2l8971 2908  
                               i2l8963 28E4                                 i2l8955 28C8  
                               i2l8947 28A4                                 i2l8939 2888  
                               i2l8891 27C8                                 i2l8883 27AC  
                               i2l8875 278E                                 i2l8867 2772  
                               i2l8859 2764                                 i2l9915 35C4  
                               i2l9933 33D6                                 i2l9925 2988  
                               i2l9917 36AA                                 i2l9909 35A6  
                               i2l9927 29A4                                 i2l8983 293A  
                               i2l8975 2916                                 i2l8967 28FA  
                               i2l8959 28D6                                 i2l8895 27D6  
                               i2l8887 27BA                                 i2l8879 279E  
                               i2l9919 36BA                                 i2l8979 2924  
                               i2l8899 27E4                                 i2l8989 2948  
              _f_most_recent_sort_time 0137                                 _OSCCON 000FD3  
                               _TMR0IE 007F95                                 _TMR0IF 007F92  
                            ??i2_putch 0003                                 _TMR1IE 007CE8  
                               _TMR1IF 007CF0                                 _TMR2IE 007CE9  
                               _TMR3IE 007D01                                 _TMR3IF 007D09  
                               _TMR0ON 007EAF                                 _TMR1ON 007E68  
                               _TMR3ON 007D88                                 _SSPADD 000FC8  
                               _TRISC3 007CA3                                 _TRISC4 007CA4  
                               _SSPBUF 000FC9                              ??_Loading 00B1  
                     __end_of_delay_ms 50FC                   delay_ms@milliseconds 0081  
                       __CFG_XINST$OFF 000000                       __end_of_dispLogs 5194  
                          ?i2_printRTC 0001                       retrieveLog@byte1 000B  
                     retrieveLog@byte2 000C                       retrieveLog@byte3 000D  
                 __end_of_Distribution 3F0C                                 ___wmul 4D7C  
                            ??___awdiv 008A                         __CFG_STVREN$ON 000000  
                               _getMAG 4DB2                              ??___awmod 0084  
                          logRun@byte1 00B2                            logRun@byte2 00B3  
                          logRun@byte3 00B4                                 _getRTC 44A4  
                            ??___lldiv 0088                              ??___lwdiv 0084  
                            ??___lwmod 008B                       ??_printSortTimer 002A  
                     __end_of_initTime 51D8                                 _initUI 4E16  
                               _readIR 4BB6                                 _logRun 39D8  
                               getIR@i 0087                                 clear_0 4B8E  
                               clear_1 4B9A                                 clear_2 4BA6  
                     ___awdiv@quotient 008C                        ___awmod@divisor 0082  
                           _PortTestA5 4A0A                        ___awmod@counter 0084  
                            ??_lcdInst 0082                                 _printf 1604  
                            ??_handler 004B                __size_of_initGlobalVars 00AC  
                         ?_retrieveLog 0007                                 _strcpy 4D46  
                   __size_of_SpeedTest 0084                              ??_readADC 0080  
                            ??_initLCD 0083                              ??_loadRTC 0095  
                            ??_readMAG 0082   __end_ofi2_change_state_to_menu_start 5124  
__size_ofi2_change_state_to_menu_start 0028           i2_change_state_to_menu_start 50FC  
                          ?_BothServos 0001                           ??_EEPROMTest 0080  
                            ??_isdigit 0080                     __size_of_PortTests 0084  
                    __end_ofi2___lwdiv 4B68                       __end_of_printRTC 26F6  
                         __mediumconst FAEE                      __end_ofi2___lwmod 4CD6  
                               tblptrh 000FF7                                 tblptrl 000FF6  
                               tblptru 000FF8                   _log_count_pop_no_tab 0069  
                __end_of_algorithmTest 3FE2                      __end_ofi2_lcdInst 52B8  
                           _PusherTest 2C5E                      __end_ofi2_isdigit 51F6  
                           __accesstop 0080                __end_of__initialization 4BAC  
                        ?_inputHandler 002A                  _most_recent_sort_time 006D  
                        ___rparam_used 000001                printSortTimer@start_sec 003B  
                __size_of_actuatorTest 08B8                          i2_EEPROM_read 5244  
                         Loading@byte1 00B5                     i2___lwmod@dividend 0001  
                   __end_of_EEPROMTest 52F6                         __pcstackCOMRAM 0001  
                __size_of_EEPROM_write 00E8                    __size_ofi2_delay_ms 001C  
                         __pidataBANK1 52CC                    BlockerTest@cam_flag 00AE  
                        __end_of_getIR 47A2                            i2printRTC@i 0041  
                        _initSortTimer 42CC            __end_of_updateServoPosition 45B0  
                        __end_of_putch 5290                            i2printf@len 0022  
                          i2printf@val 0024                             __end_of_ID 330E  
                           __end_of_UI 116C                              ?i2___wmul 0001  
                   __size_of_lcdNibble 0068                              ?i2_getRTC 0001  
                          i2putch@data 0003                  printSortTimer@curTime 002D  
   __end_of_change_state_to_menu_start 507E          ?i2_change_state_to_menu_start 0001  
           _change_state_to_menu_start 5052                  printSortTimer@cur_sec 003D  
                            ?i2_printf 000D                                ??_getIR 0086  
                            ?i2_strcpy 0001                       _count_pop_no_tab 0127  
                  __size_ofi2_printRTC 0236                                ??_putch 0082  
                         _actuatorTest 0012                             __pbssBANK0 00DA  
                           __pbssBANK1 0100                           ?_stopSignals 0001  
                       ??_inputHandler 002C         __size_ofi2_updateServoPosition 0070  
        __end_ofi2_updateServoPosition 4884                           _EEPROM_write 3D4C  
             ?_change_state_to_menu_11 0001               ?_change_state_to_menu_12 0001  
             ?_change_state_to_menu_22 0001               ?_change_state_to_menu_23 0001  
                              UI@F3235 0141                      __end_of_SpeedTest 4634  
                       ?i2_EEPROM_read 0001               ?_change_state_to_logs_11 0001  
             ?_change_state_to_logs_12 0001               ?_change_state_to_logs_22 0001  
             ?_change_state_to_logs_23 0001               ?_change_state_to_logs_33 0001  
             ?_change_state_to_logs_34 0001                    __size_of_BothServos 0384  
                    __end_of_PortTests 46B8                      printRTC@RTC_month 00BC  
                         ?i2_lcdNibble 0001                                UI@i_412 00CA  
                              UI@i_413 00CB                                UI@i_431 00CC  
                              UI@i_440 00D1                                UI@i_432 00CD  
                              UI@i_409 00C9                                UI@i_443 00D2  
                              UI@i_435 00CE                                UI@i_444 00D3  
                              UI@i_436 00CF                                UI@i_447 00D4  
                              UI@i_439 00D0                                UI@i_448 00D5  
                       ?_initSortTimer 0001                                ?___wmul 0080  
                              ?_getMAG 0001                                ?_getRTC 0001  
                              ?_initUI 0001                                ?_readIR 0001  
                              ?_logRun 0001               updateServoPosition@timer 0082  
                              UI@month 00D6                            ?_PortTestA5 0001  
                              ?_printf 008E                                _UI$2415 00C6  
                              ?_strcpy 0080                        _pan_servo_state 006F  
                           ??i2___wmul 0005                             ??i2_getRTC 0004  
                            ?_delay_ms 0001                             ??i2_printf 0019  
                           ??i2_strcpy 0005                              ?_dispLogs 0012  
                              _SSPCON1 000FC6                                _SSPCON2 000FC5  
                          ?_PusherTest 0001                                _SSPSTAT 000FC7  
                              _RTCflag 00EA                                i2_putch 52A0  
                            ?_initTime 0080                        _f_loadingNewCan 00F0  
                      i2printRTC@month 003D                  __size_of_Distribution 00D8  
          __size_ofi2_I2C_Master_Start 0008                      __end_of_lcdNibble 48EC  
                              _Loading 116C            __size_ofi2_I2C_Master_Write 000A  
                     EEPROM_write@data 00AD                                __Hparam 0000  
                              __Lparam 0000     __size_ofi2_change_state_to_menu_12 0030  
   __size_ofi2_change_state_to_menu_22 0030                              ?_printRTC 0001  
                              ___awdiv 40A6                                ___awmod 4376  
                           _initServos 4A66                                ___lldiv 4164  
                      __size_of___wmul 0036                        __size_of_getMAG 0032  
                              ___lwdiv 46B8                                ___lwmod 48EC  
                      __size_of_getRTC 0086                        printSortTimer@i 0049  
                            _CMCONbits 000FB4                      retrieveLog@logNum 0007  
                         logRun@byte11 00B6                           ?_BlockerTest 0001  
                      __size_of_initUI 0030                        __size_of_readIR 004C  
                              __pcinit 4B68                   i2EEPROM_read@address 0001  
                      __size_of_logRun 0144                           logRun@byte_i 00B5  
                              __ramtop 1000                         _initGlobalVars 4220  
                              _lcdInst 5290                                _handler 0008  
                              __ptext0 3FE2                                __ptext1 5212  
                              __ptext2 5194                                __ptext3 116C  
                              __ptext4 42CC                                __ptext5 4220  
                              __ptext6 4DB2                                __ptext7 4730  
                              __ptext8 4BB6                                __ptext9 30DC  
                      __size_of_printf 0438                                _readADC 507E  
                      __size_of_strcpy 0036                                _initLCD 4C4E  
                              _cur_can 012B                                _loadRTC 4418  
                              _readMAG 4C02                                _dpowers FB00  
                   actuatorTest@i_1740 00AE                     actuatorTest@i_1741 00AF  
                   actuatorTest@i_1733 00AD                     actuatorTest@i_1750 00B5  
                   actuatorTest@i_1743 00B0                     actuatorTest@i_1760 00BB  
                   actuatorTest@i_1752 00B6                     actuatorTest@i_1744 00B1  
                   actuatorTest@i_1753 00B7                     actuatorTest@i_1770 00C1  
                   actuatorTest@i_1762 00BC                     actuatorTest@i_1746 00B2  
                   actuatorTest@i_1763 00BD                     actuatorTest@i_1755 00B8  
                   actuatorTest@i_1747 00B3                     actuatorTest@i_1772 00C2  
                   actuatorTest@i_1756 00B9                     actuatorTest@i_1773 00C3  
                   actuatorTest@i_1765 00BE                     actuatorTest@i_1749 00B4  
                   actuatorTest@i_1766 00BF                     actuatorTest@i_1759 00BA  
                   actuatorTest@i_1769 00C0                                _isdigit 50AA  
                     ___awmod@dividend 0080                                getRTC@i 0083  
                 __size_of_retrieveLog 011C                           ??i2_delay_ms 0001  
                           ??_delay_ms 0080               __size_of_I2C_Master_Init 0060  
             __size_of_I2C_Master_Read 002E                          _log_startTime 0100  
             __size_of_I2C_Master_Wait 0014               __size_of_I2C_Master_Stop 0008  
                           ??_dispLogs 0014                           _Distribution 3E34  
                       __pintcode_body 36C4                   end_of_initialization 4BAC  
                              logRun@i 00B7                             ??_initTime 0086  
                      ??i2_EEPROM_read 0003                                int_func 36C4  
                  i2___wmul@multiplier 0001                              i2u1002_47 3352  
                            i2u1003_47 2B2C                              i2u1004_47 4AD8  
                        ??_EEPROM_read 0082                    __size_of_PortTestA5 005C  
                            i2u1005_47 4AE2                              i2u1006_47 4B04  
                            i2u1007_47 4B0E                              i2u1008_47 5202  
            __size_of_I2C_Master_Start 0008              __size_of_I2C_Master_Write 000A  
                      ___lldiv@divisor 0084                        ___lldiv@counter 008C  
                      ??_initSortTimer 0085                                printf@c 00A8  
                         ??i2_printRTC 002A                                printf@f 008E  
                           ??_printRTC 00AB                       I2C_Master_Init@c 008D  
                     I2C_Master_Read@a 0081                                postdec1 000FE5  
                              postdec2 000FDD                                postinc0 000FEE  
                              postinc2 000FDE                     __end_ofi2_delay_ms 5212  
               __end_of_initGlobalVars 42CC                             _sensorTest 212E  
                  __size_of_PusherTest 0248                             _servoTimes 00DA  
                            _PORTAbits 000F80                              _PORTBbits 000F81  
                 __end_of_inputHandler 34FA                           ??_BothServos 00AB  
                __end_of_machineConfig 4A0A                             _updateMenu 26F6  
                    i2_I2C_Master_Read 514A                              _IR_signal 00E6  
                    i2_I2C_Master_Wait 526E                      i2_I2C_Master_Stop 52E4  
                    i2___lwdiv@divisor 0008                        _log_count_total 013F  
                            i2___lwdiv 4B16                              i2___lwmod 4C94  
                    i2___lwdiv@counter 000C                     ?i2_I2C_Master_Read 0001  
                   ?i2_I2C_Master_Wait 0001                     __end_ofi2_printRTC 30DC  
                   ?i2_I2C_Master_Stop 0001                          actuatorTest@i 00C4  
         ??_change_state_to_menu_start 00C4                              i2_lcdInst 52AC  
                        Loading@i_1160 00BC                          Loading@i_1162 00BE  
                        Loading@i_1148 00B6                          Loading@i_1157 00B8  
                        Loading@i_1159 00BA                             _total_time 00F8  
                          printf@width 00A9                   __size_of_stopSignals 001A  
                  ??i2_I2C_Master_Read 0002                              i2_isdigit 51D8  
                  ??i2_I2C_Master_Wait 0001                    ??i2_I2C_Master_Stop 0002  
                            i2getRTC@i 0004                     __end_of_BothServos 1DC0  
                          PusherTest@i 00B1                    __end_of_EEPROM_read 5244  
                          ?_initServos 0001                        ?_initGlobalVars 0001  
                       __end_of___wmul 4DB2                         __end_of_getMAG 4DE4  
                       __end_of_getRTC 452A                   __size_ofi2_lcdNibble 0056  
                        EEPROM_write@i 00AF                          i2lcdInst@data 0003  
                       __end_of_initUI 4E46                         __end_of_readIR 4C02  
                       __end_of_logRun 3B1C                       i2___wmul@product 0005  
                       __end_of_printf 1A3C                           i2printf@flag 0026  
                       __end_of_strcpy 4D7C              __end_ofi2_I2C_Master_Read 5170  
            __end_ofi2_I2C_Master_Wait 5280                           i2printf@prec 001D  
                  start_initialization 4B68              __end_ofi2_I2C_Master_Stop 52EC  
                           readMAG@res 0084                      __size_ofi2___wmul 0026  
                      _count_can_w_lab 0125            ?_change_state_to_menu_start 0001  
                    __size_ofi2_getRTC 0072                              i2printf@c 0027  
                            i2printf@f 000D                     EEPROM_write@i_1397 00B0  
                i2I2C_Master_Read@temp 0003                   BlockerTest@cond_flag 00B0  
                           ?i2___lwdiv 0006                             ?i2___lwmod 0001  
                    __size_ofi2_printf 036E                      __size_ofi2_strcpy 0032  
                    ??_I2C_Master_Init 0091                      ??_I2C_Master_Read 0081  
                    ??_I2C_Master_Wait 0080                             ?i2_lcdInst 0001  
                    ??_I2C_Master_Stop 0081                       __CFG_OSC$INTIO67 000000  
                           ?i2_isdigit 0001                             initTime@DD 0083  
                           initTime@MM 0084                             initTime@YY 0085  
                      retrieveLog@addr 0010                             logRun@addr 00B9  
                            _SpeedTest 45B0                               ??___wmul 0084  
                             ??_getMAG 0086                               ??_getRTC 0083  
               __size_of_algorithmTest 00D6                              _PortTests 4634  
                          ?_sensorTest 0001                            __pdataBANK1 0141  
                     __CFG_LPT1OSC$OFF 000000                               ??_initUI 00C4  
                             ??_readIR 0082                               ??_logRun 00B1  
                             ID@i_1173 0086                           ??_PortTestA5 00AB  
               printSortTimer@timeDiff 0045       __size_of_change_state_to_menu_11 0030  
     __size_of_change_state_to_menu_12 0038       __size_of_change_state_to_menu_22 0038  
     __size_of_change_state_to_menu_23 0030                               ??_printf 009A  
     __size_of_change_state_to_logs_11 0030       __size_of_change_state_to_logs_12 0030  
     __size_of_change_state_to_logs_22 0030       __size_of_change_state_to_logs_23 002E  
     __size_of_change_state_to_logs_33 0030       __size_of_change_state_to_logs_34 0030  
                             ??_strcpy 0084                    _printSortTimer$2547 0043  
                 __size_of_BlockerTest 0184                            __pbssCOMRAM 005B  
         __size_of_updateServoPosition 0086                            ?_updateMenu 0001  
                        __pcstackBANK0 0080                __size_of_printSortTimer 02A8  
                    i2___lwmod@divisor 0003                      i2___lwmod@counter 0005  
                         _isdigit$2057 0081                           ??_PusherTest 00AB  
                    __size_of_delay_ms 0028                         initSortTimer@i 0088  
                    printSortTimer@min 003F                      printSortTimer@sec 0041  
                  __size_of_initServos 005A                      __size_of_dispLogs 0024  
                     printRTC@INT_time 00AE                       _tilt_servo_state 0075  
                         i2strcpy@from 0003                               ?i2_putch 0001  
                   PusherTest@res_1788 00AF                        _count_pop_w_tab 0129  
                          _EEPROM_read 522C                     __end_of_PortTestA5 4A66  
                     _I2C_Master_Start 52DC                              _f_lastCan 00EE  
                             ?_Loading 0001                    i2I2C_Master_Write@d 0002  
                     _I2C_Master_Write 52B8                      __size_of_initTime 0022  
                i2_updateServoPosition 4814                       ___lwdiv@dividend 0080  
                    __CFG_CCP2MX$PORTC 000000                              __pintcode 0008  
                           ?_SpeedTest 0001                          __pmediumconst FAEE  
                            _lcdNibble 4884                  __size_of_inputHandler 01EC  
                             ?___awdiv 0086                               ?___awmod 0080  
                             ?___lldiv 0080                         _sensor_outputs 00E2  
                             ?___lwdiv 0080                             ?_PortTests 0001  
                             ?___lwmod 0087                      __size_of_printRTC 02CA  
                   __end_of_PusherTest 2EA6                               ?_lcdInst 0001  
                             ?_handler 0001                               ?_readADC 0001  
                             ?_initLCD 0001                               ?_loadRTC 0001  
                             ?_readMAG 0001                               ?_isdigit 0001  
           __size_ofi2_I2C_Master_Read 0026             __size_ofi2_I2C_Master_Wait 0012  
           __size_ofi2_I2C_Master_Stop 0008                              _firstboot 013B  
                            _cur_state 00EC                       ___lwdiv@quotient 0084  
                       __size_of_getIR 0072                          _algorithmTest 3F0C  
                          ??i2___lwdiv 000A                            ??i2___lwmod 0005  
                       __size_of_putch 0010                            __size_of_ID 0232  
                          __size_of_UI 08A2                    __size_of_sensorTest 02FE  
           __end_ofi2_I2C_Master_Start 52F4             __end_ofi2_I2C_Master_Write 52CC  
                          ??i2_lcdInst 0003                         ___wmul@product 0084  
                             _LATAbits 000F89                               _LATBbits 000F8A  
                             _LATCbits 000F8B                               _LATDbits 000F8C  
                             _LATEbits 000F8D                           _inputHandler 330E  
                          ??i2_isdigit 0001                           BlockerTest@i 00AC  
                             _PIR2bits 000FA1                               i2u439_40 5168  
                             i2u539_40 2F34                               i2u494_40 1EE6  
                             i2u822_40 2B5C                               i2u494_47 1EDC  
                             i2u824_40 2B84                               i2u823_48 2B5E  
                             i2u498_40 1F46                               i2u498_47 1F3C  
                  __size_of_updateMenu 02C0                         _log_completion 0063  
                     __CFG_WDTPS$32768 000000                             ?_lcdNibble 0001  
                            _was_low_1 0079                              _was_low_3 007B  
                        ??_retrieveLog 0009                             _ADCON0bits 000FC2  
                    ___wmul@multiplier 0080                              _startTime 010E  
                             i2___wmul 5124                          lcdNibble@data 0081  
                             i2_getRTC 47A2                             printf@flag 00A7  
                        lcdNibble@temp 0080                             printf@prec 009E  
                             Loading@i 00C2                               Loading@j 00C0  
                             i2_printf 1DC0                               i2_strcpy 4DE4  
                       ?_algorithmTest 0001                    I2C_Master_Read@temp 0082  
                            copy_data0 4B7C                              readIR@res 0084  
               ?i2_updateServoPosition 0001                       __size_ofi2_putch 000C  
                           _EECON1bits 000FA6                  __end_ofi2_EEPROM_read 525A  
                          _count_total 00FE                 i2delay_ms@milliseconds 0002  
                     ??_initGlobalVars 0080                               __Hrparam 0000  
                     __size_of_Loading 0498                              initTime@h 0081  
                            initTime@m 0080                              initTime@s 0086  
                            initTime@w 0082                               __Lrparam 0000  
                   __CFG_BOREN$SBORDIS 000000                              logRun@num 00B1  
                          ??_SpeedTest 00AB                  __end_of_initSortTimer 4376  
                         ??_initServos 0088                            ??_PortTests 0080  
                     __size_of___awdiv 00BE                       __size_of___awmod 00A2  
              _change_state_to_menu_11 4ED6             ?i2_change_state_to_menu_12 0001  
              _change_state_to_menu_12 4D0E             ?i2_change_state_to_menu_22 0001  
              _change_state_to_menu_22 4CD6                _change_state_to_menu_23 4EA6  
                i2___wmul@multiplicand 0003                       __size_of___lldiv 00BC  
                     __size_of___lwdiv 0078                _change_state_to_logs_11 4FC6  
              _change_state_to_logs_12 4F96                _change_state_to_logs_22 4F66  
              _change_state_to_logs_23 5024                _change_state_to_logs_33 4F36  
              _change_state_to_logs_34 4F06                       __size_of___lwmod 0062  
                       readADC@channel 0081                     i2I2C_Master_Read@a 0002  
                     __size_of_lcdInst 0010                       __size_of_handler 384C  
                           _EEPROMTest 52F4                        _I2C_Master_Init 494E  
                     __size_of_readADC 002C                        _I2C_Master_Read 4FF6  
                     __size_of_initLCD 0046                           _f_ID_receive 012F  
                     __size_of_loadRTC 008C                       __size_of_readMAG 004C  
                      _I2C_Master_Wait 525A                        _I2C_Master_Stop 52D4  
                     __size_of_isdigit 002A                               _delay_ms 50D4  
                       _printSortTimer 29B6                        ___lwdiv@divisor 0082  
                      ___lwdiv@counter 0086                    __end_of_retrieveLog 3C38  
                             __ptext10 50D4                               __ptext11 3E34  
                             __ptext20 5052                               __ptext12 49AE  
                             __ptext21 51B6                               __ptext13 39D8  
                             __ptext30 4FF6                               __ptext22 4C4E  
                             __ptext14 3D4C                               __ptext31 525A  
                             __ptext23 08CA                               __ptext15 522C  
                             __ptext40 0012                               __ptext32 4CD6  
                             __ptext24 242C                               __ptext16 4E16  
                             __ptext41 45B0                               __ptext33 4D0E  
                             __ptext25 4D46                               __ptext17 4418  
                             __ptext50 3854                               __ptext42 2C5E  
                             __ptext34 4376                               __ptext26 44A4  
                             __ptext18 494E                               __ptext51 1604  
                             __ptext43 507E                               __ptext35 40A6  
                             __ptext27 52B8                               __ptext19 4164  
                             __ptext60 34FA                               __ptext52 5280  
                             __ptext44 4634                               __ptext36 3C38  
                             __ptext28 52D4                               __ptext61 4814  
                             __ptext53 50AA                               __ptext45 4A0A  
                             __ptext37 212E                               __ptext29 52DC  
                             __ptext70 4ED6                               __ptext62 26F6  
                             __ptext54 4D7C                               __ptext46 52F4  
                             __ptext38 4C02                               __ptext71 4F06  
                             __ptext63 50FC                               __ptext55 48EC  
                             __ptext47 1A3C                               __ptext39 3F0C  
                             __ptext80 29B6                               __ptext72 4F36  
                             __ptext64 2EA6                               __ptext56 46B8  
                             __ptext48 4A66                               __ptext81 1DC0  
                             __ptext73 5024                               __ptext65 4DE4  
                             __ptext57 5290                               __ptext49 452A  
                             __ptext90 52C2                               __ptext82 52A0  
                             __ptext74 4F66                               __ptext66 330E  
                             __ptext58 4884                               __ptext91 52E4  
                             __ptext83 51D8                               __ptext75 4F96  
                             __ptext67 4E46                               __ptext92 52EC  
                             __ptext84 5124                               __ptext76 4FC6  
                             __ptext68 4E76                               __ptext93 514A  
                             __ptext85 4C94                               __ptext77 5170  
                             __ptext69 4EA6                               __ptext94 526E  
                             __ptext86 4B16                               __ptext78 3B1C  
                             __ptext95 51F6                               __ptext87 52AC  
                             __ptext79 5244                               __ptext88 4AC0  
                             __ptext89 47A2                               _dispLogs 5170  
                        ?_actuatorTest 0001                          ??_stopSignals 0080  
                           strcpy@from 0082                         i2_isdigit$2057 0002  
                   __end_of_initServos 4AC0                          __size_of_Test 0114  
                        ?_EEPROM_write 00AB                               _initTime 51B6  
                        __size_of_main 00C4                          __size_of_sort 0022  
       ??i2_change_state_to_menu_start 0043                               _logstate 00F6  
                  _updateServoPosition 452A                 __size_of_machineConfig 005C  
                        ??i2_lcdNibble 0001                               _printRTC 242C  
                          ??_lcdNibble 0080                              printRTC@i 00C2  
                             int$flags 007E                           ??_sensorTest 00AB  
                       _log_total_time 00F4                     _f_can_coming_to_ID 0131  
                            printf@len 00A3                              printf@val 00A5  
    __end_ofi2_change_state_to_menu_12 4EA6      __end_ofi2_change_state_to_menu_22 4E76  
                             loadRTC@i 0096                 __end_of_printSortTimer 2C5E  
                            putch@data 0082               __end_of_I2C_Master_Start 52E4  
                          _OSCTUNEbits 000F9B               __end_of_I2C_Master_Write 52C2  
                           _INTCONbits 000FF2                   ?_updateServoPosition 0080  
                         ??_updateMenu 0043                        ??_algorithmTest 00AB  
                           _MAG_signal 00E8                               isdigit@c 0082  
                        sensorTest@res 00AD                         ??_actuatorTest 00AB  
                  _servo_timer_counter 0071                               intlevel2 0000  
                       ??_EEPROM_write 00AE                     __end_of_sensorTest 242C  
                     ___lwmod@dividend 0087                       ___lldiv@dividend 0080  
                         ?_EEPROM_read 0080                    __end_of_stopSignals 522C  
            ??_change_state_to_menu_11 002A              ??_change_state_to_menu_12 00AB  
            ??_change_state_to_menu_22 00AB              ??_change_state_to_menu_23 002A  
            ??_change_state_to_logs_11 002A              ??_change_state_to_logs_12 002A  
            ??_change_state_to_logs_22 002A              ??_change_state_to_logs_23 002A  
            ??_change_state_to_logs_33 002A              ??_change_state_to_logs_34 002A  
                             printf@ap 00A1                               printf@cp 009F  
                   __end_of_updateMenu 29B6                __end_of_I2C_Master_Init 49AE  
              __end_of_I2C_Master_Read 5024                __end_of_I2C_Master_Wait 526E  
                        ??_BlockerTest 00AB                __end_of_I2C_Master_Stop 52DC  
                          lcdInst@data 0082                          printRTC@F3226 0145  
                         retrieveLog@i 000E                            _retrieveLog 3B1C  
                  __end_ofi2_lcdNibble 4B16                  ??_updateServoPosition 0084  
                      ?_printSortTimer 0001                     _servo_timer_target 0073  
                     ___lldiv@quotient 0088                      I2C_Master_Write@d 0081  
                          ?_EEPROMTest 0001                        ___lwmod@divisor 0089  
                    _f_can_distributed 0135                               strcpy@cp 0084  
                             strcpy@to 0080                          _machineConfig 49AE  
                      ___lwmod@counter 008B                      _updateServoStates 34FA  
                        printRTC@month 00BE                          ?_Distribution 0001  
                   ?_updateServoStates 0001                          _machine_state 00FC  
                        dispLogs@myLog 0012                    ??_updateServoStates 0009  
                   i2printRTC@INT_time 002D  
