

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Sat Mar 25 11:43:35 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,delta=1
    73                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    74                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1
    94                           	psect	text79,global,reloc=2,class=CODE,delta=1
    95                           	psect	text80,global,reloc=2,class=CODE,delta=1
    96                           	psect	text81,global,reloc=2,class=CODE,delta=1
    97                           	psect	text82,global,reloc=2,class=CODE,delta=1
    98                           	psect	text83,global,reloc=2,class=CODE,delta=1
    99                           	psect	text84,global,reloc=2,class=CODE,delta=1
   100                           	psect	text85,global,reloc=2,class=CODE,delta=1
   101                           	psect	text86,global,reloc=2,class=CODE,delta=1
   102                           	psect	text87,global,reloc=2,class=CODE,delta=1
   103                           	psect	text88,global,reloc=2,class=CODE,delta=1
   104                           	psect	text89,global,reloc=2,class=CODE,delta=1
   105                           	psect	text90,global,reloc=2,class=CODE,delta=1
   106                           	psect	text91,global,reloc=2,class=CODE,delta=1
   107                           	psect	text92,global,reloc=2,class=CODE,delta=1
   108                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   109                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   110                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   111  0000                     
   112                           ; Version 1.40
   113                           ; Generated 01/12/2016 GMT
   114                           ; 
   115                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
   116                           ; All rights reserved.
   117                           ; 
   118                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   119                           ; 
   120                           ; Redistribution and use in source and binary forms, with or without modification, are
   121                           ; permitted provided that the following conditions are met:
   122                           ; 
   123                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   124                           ;        conditions and the following disclaimer.
   125                           ; 
   126                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   127                           ;        of conditions and the following disclaimer in the documentation and/or other
   128                           ;        materials provided with the distribution.
   129                           ; 
   130                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   131                           ;        software without specific prior written permission.
   132                           ; 
   133                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   134                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   135                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   136                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   137                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   138                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   139                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   140                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   141                           ; 
   142                           ; 
   143                           ; Code-generator required, PIC18F4620 Definitions
   144                           ; 
   145                           ; SFR Addresses
   146  0000                     
   147                           	psect	idataBANK1
   148  0049E8                     __pidataBANK1:
   149                           	opt stack 0
   150                           
   151                           ;initializer for UI@F3225
   152  0049E8  4D                 	db	77
   153  0049E9  4D                 	db	77
   154  0049EA  4D                 	db	77
   155  0049EB  00                 	db	0
   156                           
   157                           ;initializer for printRTC@F3216
   158  0049EC  4D                 	db	77
   159  0049ED  4D                 	db	77
   160  0049EE  4D                 	db	77
   161  0049EF  00                 	db	0
   162                           
   163                           	psect	mediumconst
   164  00FB00                     __pmediumconst:
   165                           	opt stack 0
   166  00FB00  00                 	db	0
   167  00FB01                     _keys:
   168                           	opt stack 0
   169  00FB01  31                 	db	49
   170  00FB02  32                 	db	50
   171  00FB03  33                 	db	51
   172  00FB04  41                 	db	65
   173  00FB05  34                 	db	52
   174  00FB06  35                 	db	53
   175  00FB07  36                 	db	54
   176  00FB08  42                 	db	66
   177  00FB09  37                 	db	55
   178  00FB0A  38                 	db	56
   179  00FB0B  39                 	db	57
   180  00FB0C  43                 	db	67
   181  00FB0D  2A                 	db	42
   182  00FB0E  30                 	db	48
   183  00FB0F  23                 	db	35
   184  00FB10  44                 	db	68
   185  00FB11  00                 	db	0
   186  00FB12                     __end_of_keys:
   187                           	opt stack 0
   188  00FB12                     _dpowers:
   189                           	opt stack 0
   190  00FB12  0001               	dw	1
   191  00FB14  000A               	dw	10
   192  00FB16  0064               	dw	100
   193  00FB18  03E8               	dw	1000
   194  00FB1A  2710               	dw	10000
   195  00FB1C                     __end_of_dpowers:
   196                           	opt stack 0
   197  0000                     _ADCON0	set	4034
   198  0000                     _ADCON0bits	set	4034
   199  0000                     _ADCON1	set	4033
   200  0000                     _ADCON2	set	4032
   201  0000                     _ADRESH	set	4036
   202  0000                     _ADRESL	set	4035
   203  0000                     _CMCONbits	set	4020
   204  0000                     _CVRCON	set	4021
   205  0000                     _EEADR	set	4009
   206  0000                     _EEADRH	set	4010
   207  0000                     _EECON1bits	set	4006
   208  0000                     _EECON2	set	4007
   209  0000                     _EEDATA	set	4008
   210  0000                     _INTCONbits	set	4082
   211  0000                     _LATA	set	3977
   212  0000                     _LATAbits	set	3977
   213  0000                     _LATB	set	3978
   214  0000                     _LATC	set	3979
   215  0000                     _LATCbits	set	3979
   216  0000                     _LATD	set	3980
   217  0000                     _LATDbits	set	3980
   218  0000                     _LATE	set	3981
   219  0000                     _LATEbits	set	3981
   220  0000                     _OSCCON	set	4051
   221  0000                     _OSCTUNEbits	set	3995
   222  0000                     _PIR2bits	set	4001
   223  0000                     _PORTAbits	set	3968
   224  0000                     _PORTB	set	3969
   225  0000                     _PORTBbits	set	3969
   226  0000                     _SSPADD	set	4040
   227  0000                     _SSPBUF	set	4041
   228  0000                     _SSPCON1	set	4038
   229  0000                     _SSPCON2	set	4037
   230  0000                     _SSPSTAT	set	4039
   231  0000                     _T0CON	set	4053
   232  0000                     _T1CON	set	4045
   233  0000                     _T3CON	set	4017
   234  0000                     _TMR0H	set	4055
   235  0000                     _TMR0L	set	4054
   236  0000                     _TMR1H	set	4047
   237  0000                     _TMR1L	set	4046
   238  0000                     _TMR3H	set	4019
   239  0000                     _TMR3L	set	4018
   240  0000                     _TRISA	set	3986
   241  0000                     _TRISB	set	3987
   242  0000                     _TRISC	set	3988
   243  0000                     _TRISD	set	3989
   244  0000                     _TRISE	set	3990
   245  0000                     _ACKDT	set	32301
   246  0000                     _ACKEN	set	32300
   247  0000                     _ADIE	set	31982
   248  0000                     _INT1IE	set	32643
   249  0000                     _INT1IF	set	32640
   250  0000                     _PEIE	set	32662
   251  0000                     _PEN	set	32298
   252  0000                     _RCEN	set	32299
   253  0000                     _RSEN	set	32297
   254  0000                     _SEN	set	32296
   255  0000                     _TMR0IE	set	32661
   256  0000                     _TMR0IF	set	32658
   257  0000                     _TMR0ON	set	32431
   258  0000                     _TMR1IE	set	31976
   259  0000                     _TMR1IF	set	31984
   260  0000                     _TMR1ON	set	32360
   261  0000                     _TMR2IE	set	31977
   262  0000                     _TMR3IE	set	32001
   263  0000                     _TMR3IF	set	32009
   264  0000                     _TMR3ON	set	32136
   265  0000                     _TRISC3	set	31907
   266  0000                     _TRISC4	set	31908
   267  0000                     _nRBPU	set	32655
   268  00FB1C                     STR_21:
   269  00FB1C  25                 	db	37
   270  00FB1D  30                 	db	48	;'0'
   271  00FB1E  32                 	db	50	;'2'
   272  00FB1F  64                 	db	100	;'d'
   273  00FB20  25                 	db	37
   274  00FB21  73                 	db	115	;'s'
   275  00FB22  20                 	db	32
   276  00FB23  7C                 	db	124
   277  00FB24  20                 	db	32
   278  00FB25  25                 	db	37
   279  00FB26  30                 	db	48	;'0'
   280  00FB27  32                 	db	50	;'2'
   281  00FB28  64                 	db	100	;'d'
   282  00FB29  3A                 	db	58	;':'
   283  00FB2A  25                 	db	37
   284  00FB2B  30                 	db	48	;'0'
   285  00FB2C  32                 	db	50	;'2'
   286  00FB2D  64                 	db	100	;'d'
   287  00FB2E  3A                 	db	58	;':'
   288  00FB2F  25                 	db	37
   289  00FB30  30                 	db	48	;'0'
   290  00FB31  32                 	db	50	;'2'
   291  00FB32  64                 	db	100	;'d'
   292  00FB33  00                 	db	0
   293  00FB34                     STR_66:
   294  00FB34  28                 	db	40
   295  00FB35  64                 	db	100	;'d'
   296  00FB36  61                 	db	97	;'a'
   297  00FB37  74                 	db	116	;'t'
   298  00FB38  61                 	db	97	;'a'
   299  00FB39  3A                 	db	58	;':'
   300  00FB3A  20                 	db	32
   301  00FB3B  25                 	db	37
   302  00FB3C  75                 	db	117	;'u'
   303  00FB3D  2C                 	db	44
   304  00FB3E  20                 	db	32
   305  00FB3F  61                 	db	97	;'a'
   306  00FB40  64                 	db	100	;'d'
   307  00FB41  64                 	db	100	;'d'
   308  00FB42  72                 	db	114	;'r'
   309  00FB43  3A                 	db	58	;':'
   310  00FB44  20                 	db	32
   311  00FB45  25                 	db	37
   312  00FB46  75                 	db	117	;'u'
   313  00FB47  29                 	db	41
   314  00FB48  00                 	db	0
   315  00FB49                     STR_111:
   316  00FB49  44                 	db	68	;'D'
   317  00FB4A  20                 	db	32
   318  00FB4B  57                 	db	87	;'W'
   319  00FB4C  49                 	db	73	;'I'
   320  00FB4D  4C                 	db	76	;'L'
   321  00FB4E  4C                 	db	76	;'L'
   322  00FB4F  20                 	db	32
   323  00FB50  52                 	db	82	;'R'
   324  00FB51  45                 	db	69	;'E'
   325  00FB52  54                 	db	84	;'T'
   326  00FB53  55                 	db	85	;'U'
   327  00FB54  52                 	db	82	;'R'
   328  00FB55  4E                 	db	78	;'N'
   329  00FB56  20                 	db	32
   330  00FB57  20                 	db	32
   331  00FB58  20                 	db	32
   332  00FB59  20                 	db	32
   333  00FB5A  00                 	db	0
   334  00FB5B                     STR_112:
   335  00FB5B  4F                 	db	79	;'O'
   336  00FB5C  54                 	db	84	;'T'
   337  00FB5D  48                 	db	72	;'H'
   338  00FB5E  45                 	db	69	;'E'
   339  00FB5F  52                 	db	82	;'R'
   340  00FB60  20                 	db	32
   341  00FB61  53                 	db	83	;'S'
   342  00FB62  45                 	db	69	;'E'
   343  00FB63  54                 	db	84	;'T'
   344  00FB64  53                 	db	83	;'S'
   345  00FB65  20                 	db	32
   346  00FB66  52                 	db	82	;'R'
   347  00FB67  41                 	db	65	;'A'
   348  00FB68  35                 	db	53	;'5'
   349  00FB69  20                 	db	32
   350  00FB6A  20                 	db	32
   351  00FB6B  20                 	db	32
   352  00FB6C  00                 	db	0
   353  00FB6D                     STR_116:
   354  00FB6D  53                 	db	83	;'S'
   355  00FB6E  3A                 	db	58	;':'
   356  00FB6F  20                 	db	32
   357  00FB70  44                 	db	68	;'D'
   358  00FB71  20                 	db	32
   359  00FB72  57                 	db	87	;'W'
   360  00FB73  49                 	db	73	;'I'
   361  00FB74  4C                 	db	76	;'L'
   362  00FB75  4C                 	db	76	;'L'
   363  00FB76  20                 	db	32
   364  00FB77  52                 	db	82	;'R'
   365  00FB78  45                 	db	69	;'E'
   366  00FB79  54                 	db	84	;'T'
   367  00FB7A  55                 	db	85	;'U'
   368  00FB7B  52                 	db	82	;'R'
   369  00FB7C  4E                 	db	78	;'N'
   370  00FB7D  20                 	db	32
   371  00FB7E  00                 	db	0
   372  00FB7F                     STR_119:
   373  00FB7F  4F                 	db	79	;'O'
   374  00FB80  54                 	db	84	;'T'
   375  00FB81  48                 	db	72	;'H'
   376  00FB82  45                 	db	69	;'E'
   377  00FB83  52                 	db	82	;'R'
   378  00FB84  20                 	db	32
   379  00FB85  54                 	db	84	;'T'
   380  00FB86  4F                 	db	79	;'O'
   381  00FB87  47                 	db	71	;'G'
   382  00FB88  47                 	db	71	;'G'
   383  00FB89  4C                 	db	76	;'L'
   384  00FB8A  45                 	db	69	;'E'
   385  00FB8B  53                 	db	83	;'S'
   386  00FB8C  20                 	db	32
   387  00FB8D  43                 	db	67	;'C'
   388  00FB8E  41                 	db	65	;'A'
   389  00FB8F  4D                 	db	77	;'M'
   390  00FB90  00                 	db	0
   391  00FB91                     STR_3:
   392  00FB91  2D                 	db	45
   393  00FB92  2D                 	db	45
   394  00FB93  20                 	db	32
   395  00FB94  4C                 	db	76	;'L'
   396  00FB95  4F                 	db	79	;'O'
   397  00FB96  47                 	db	71	;'G'
   398  00FB97  20                 	db	32
   399  00FB98  25                 	db	37
   400  00FB99  32                 	db	50	;'2'
   401  00FB9A  64                 	db	100	;'d'
   402  00FB9B  20                 	db	32
   403  00FB9C  48                 	db	72	;'H'
   404  00FB9D  45                 	db	69	;'E'
   405  00FB9E  52                 	db	82	;'R'
   406  00FB9F  45                 	db	69	;'E'
   407  00FBA0  2D                 	db	45
   408  00FBA1  2D                 	db	45
   409  00FBA2  00                 	db	0
   410  00FBA3                     STR_1:
   411  00FBA3  52                 	db	82	;'R'
   412  00FBA4  45                 	db	69	;'E'
   413  00FBA5  53                 	db	83	;'S'
   414  00FBA6  55                 	db	85	;'U'
   415  00FBA7  4C                 	db	76	;'L'
   416  00FBA8  54                 	db	84	;'T'
   417  00FBA9  53                 	db	83	;'S'
   418  00FBAA  20                 	db	32
   419  00FBAB  49                 	db	73	;'I'
   420  00FBAC  4E                 	db	78	;'N'
   421  00FBAD  20                 	db	32
   422  00FBAE  4C                 	db	76	;'L'
   423  00FBAF  4F                 	db	79	;'O'
   424  00FBB0  47                 	db	71	;'G'
   425  00FBB1  20                 	db	32
   426  00FBB2  25                 	db	37
   427  00FBB3  64                 	db	100	;'d'
   428  00FBB4  00                 	db	0
   429  00FBB5                     STR_102:
   430  00FBB5  4D                 	db	77	;'M'
   431  00FBB6  49                 	db	73	;'I'
   432  00FBB7  44                 	db	68	;'D'
   433  00FBB8  20                 	db	32
   434  00FBB9  2D                 	db	45
   435  00FBBA  2D                 	db	45
   436  00FBBB  20                 	db	32
   437  00FBBC  32                 	db	50	;'2'
   438  00FBBD  73                 	db	115	;'s'
   439  00FBBE  20                 	db	32
   440  00FBBF  20                 	db	32
   441  00FBC0  20                 	db	32
   442  00FBC1  20                 	db	32
   443  00FBC2  20                 	db	32
   444  00FBC3  20                 	db	32
   445  00FBC4  20                 	db	32
   446  00FBC5  00                 	db	0
   447  00FBC6                     STR_105:
   448  00FBC6  44                 	db	68	;'D'
   449  00FBC7  52                 	db	82	;'R'
   450  00FBC8  4F                 	db	79	;'O'
   451  00FBC9  50                 	db	80	;'P'
   452  00FBCA  20                 	db	32
   453  00FBCB  2D                 	db	45
   454  00FBCC  2D                 	db	45
   455  00FBCD  20                 	db	32
   456  00FBCE  32                 	db	50	;'2'
   457  00FBCF  73                 	db	115	;'s'
   458  00FBD0  20                 	db	32
   459  00FBD1  20                 	db	32
   460  00FBD2  20                 	db	32
   461  00FBD3  20                 	db	32
   462  00FBD4  20                 	db	32
   463  00FBD5  20                 	db	32
   464  00FBD6  00                 	db	0
   465  00FBD7                     STR_99:
   466  00FBD7  4C                 	db	76	;'L'
   467  00FBD8  45                 	db	69	;'E'
   468  00FBD9  46                 	db	70	;'F'
   469  00FBDA  54                 	db	84	;'T'
   470  00FBDB  20                 	db	32
   471  00FBDC  2D                 	db	45
   472  00FBDD  2D                 	db	45
   473  00FBDE  20                 	db	32
   474  00FBDF  32                 	db	50	;'2'
   475  00FBE0  73                 	db	115	;'s'
   476  00FBE1  20                 	db	32
   477  00FBE2  20                 	db	32
   478  00FBE3  20                 	db	32
   479  00FBE4  20                 	db	32
   480  00FBE5  20                 	db	32
   481  00FBE6  20                 	db	32
   482  00FBE7  00                 	db	0
   483  00FBE8                     STR_104:
   484  00FBE8  4C                 	db	76	;'L'
   485  00FBE9  45                 	db	69	;'E'
   486  00FBEA  56                 	db	86	;'V'
   487  00FBEB  45                 	db	69	;'E'
   488  00FBEC  4C                 	db	76	;'L'
   489  00FBED  20                 	db	32
   490  00FBEE  2D                 	db	45
   491  00FBEF  2D                 	db	45
   492  00FBF0  20                 	db	32
   493  00FBF1  32                 	db	50	;'2'
   494  00FBF2  73                 	db	115	;'s'
   495  00FBF3  20                 	db	32
   496  00FBF4  20                 	db	32
   497  00FBF5  20                 	db	32
   498  00FBF6  20                 	db	32
   499  00FBF7  20                 	db	32
   500  00FBF8  00                 	db	0
   501  00FBF9                     STR_98:
   502  00FBF9  52                 	db	82	;'R'
   503  00FBFA  49                 	db	73	;'I'
   504  00FBFB  47                 	db	71	;'G'
   505  00FBFC  48                 	db	72	;'H'
   506  00FBFD  54                 	db	84	;'T'
   507  00FBFE  20                 	db	32
   508  00FBFF  2D                 	db	45
   509  00FC00  2D                 	db	45
   510  00FC01  20                 	db	32
   511  00FC02  32                 	db	50	;'2'
   512  00FC03  73                 	db	115	;'s'
   513  00FC04  20                 	db	32
   514  00FC05  20                 	db	32
   515  00FC06  20                 	db	32
   516  00FC07  20                 	db	32
   517  00FC08  20                 	db	32
   518  00FC09  00                 	db	0
   519  00FC0A                     STR_97:
   520  00FC0A  4D                 	db	77	;'M'
   521  00FC0B  49                 	db	73	;'I'
   522  00FC0C  44                 	db	68	;'D'
   523  00FC0D  44                 	db	68	;'D'
   524  00FC0E  4C                 	db	76	;'L'
   525  00FC0F  45                 	db	69	;'E'
   526  00FC10  20                 	db	32
   527  00FC11  2D                 	db	45
   528  00FC12  2D                 	db	45
   529  00FC13  20                 	db	32
   530  00FC14  32                 	db	50	;'2'
   531  00FC15  73                 	db	115	;'s'
   532  00FC16  20                 	db	32
   533  00FC17  20                 	db	32
   534  00FC18  20                 	db	32
   535  00FC19  20                 	db	32
   536  00FC1A  00                 	db	0
   537  00FC1B  44                 	db	68	;'D'
   538  00FC1C  20                 	db	32
   539  00FC1D  57                 	db	87	;'W'
   540  00FC1E  49                 	db	73	;'I'
   541  00FC1F  4C                 	db	76	;'L'
   542  00FC20  4C                 	db	76	;'L'
   543  00FC21  20                 	db	32
   544  00FC22  52                 	db	82	;'R'
   545  00FC23  45                 	db	69	;'E'
   546  00FC24  54                 	db	84	;'T'
   547  00FC25  55                 	db	85	;'U'
   548  00FC26  52                 	db	82	;'R'
   549  00FC27  4E                 	db	78	;'N'
   550  00FC28  20                 	db	32
   551  00FC29  20                 	db	32
   552  00FC2A  20                 	db	32
   553  00FC2B  00                 	db	0
   554  00FC2C                     STR_100:
   555  00FC2C  4D                 	db	77	;'M'
   556  00FC2D  49                 	db	73	;'I'
   557  00FC2E  44                 	db	68	;'D'
   558  00FC2F  2D                 	db	45
   559  00FC30  4C                 	db	76	;'L'
   560  00FC31  45                 	db	69	;'E'
   561  00FC32  46                 	db	70	;'F'
   562  00FC33  54                 	db	84	;'T'
   563  00FC34  20                 	db	32
   564  00FC35  2D                 	db	45
   565  00FC36  2D                 	db	45
   566  00FC37  20                 	db	32
   567  00FC38  32                 	db	50	;'2'
   568  00FC39  73                 	db	115	;'s'
   569  00FC3A  20                 	db	32
   570  00FC3B  20                 	db	32
   571  00FC3C  00                 	db	0
   572  00FC3D                     STR_101:
   573  00FC3D  4D                 	db	77	;'M'
   574  00FC3E  49                 	db	73	;'I'
   575  00FC3F  44                 	db	68	;'D'
   576  00FC40  2D                 	db	45
   577  00FC41  52                 	db	82	;'R'
   578  00FC42  49                 	db	73	;'I'
   579  00FC43  47                 	db	71	;'G'
   580  00FC44  48                 	db	72	;'H'
   581  00FC45  54                 	db	84	;'T'
   582  00FC46  20                 	db	32
   583  00FC47  2D                 	db	45
   584  00FC48  2D                 	db	45
   585  00FC49  20                 	db	32
   586  00FC4A  32                 	db	50	;'2'
   587  00FC4B  73                 	db	115	;'s'
   588  00FC4C  20                 	db	32
   589  00FC4D  00                 	db	0
   590  00FC4E  45                 	db	69	;'E'
   591  00FC4F  4C                 	db	76	;'L'
   592  00FC50  53                 	db	83	;'S'
   593  00FC51  45                 	db	69	;'E'
   594  00FC52  20                 	db	32
   595  00FC53  54                 	db	84	;'T'
   596  00FC54  4F                 	db	79	;'O'
   597  00FC55  47                 	db	71	;'G'
   598  00FC56  47                 	db	71	;'G'
   599  00FC57  4C                 	db	76	;'L'
   600  00FC58  45                 	db	69	;'E'
   601  00FC59  53                 	db	83	;'S'
   602  00FC5A  20                 	db	32
   603  00FC5B  52                 	db	82	;'R'
   604  00FC5C  41                 	db	65	;'A'
   605  00FC5D  35                 	db	53	;'5'
   606  00FC5E  00                 	db	0
   607  00FC5F                     STR_72:
   608  00FC5F  41                 	db	65	;'A'
   609  00FC60  4C                 	db	76	;'L'
   610  00FC61  47                 	db	71	;'G'
   611  00FC62  31                 	db	49	;'1'
   612  00FC63  3A                 	db	58	;':'
   613  00FC64  20                 	db	32
   614  00FC65  39                 	db	57	;'9'
   615  00FC66  20                 	db	32
   616  00FC67  50                 	db	80	;'P'
   617  00FC68  4F                 	db	79	;'O'
   618  00FC69  50                 	db	80	;'P'
   619  00FC6A  4E                 	db	78	;'N'
   620  00FC6B  4F                 	db	79	;'O'
   621  00FC6C  54                 	db	84	;'T'
   622  00FC6D  41                 	db	65	;'A'
   623  00FC6E  42                 	db	66	;'B'
   624  00FC6F  00                 	db	0
   625  00FC70                     STR_68:
   626  00FC70  31                 	db	49	;'1'
   627  00FC71  2E                 	db	46
   628  00FC72  41                 	db	65	;'A'
   629  00FC73  4C                 	db	76	;'L'
   630  00FC74  47                 	db	71	;'G'
   631  00FC75  7C                 	db	124
   632  00FC76  32                 	db	50	;'2'
   633  00FC77  2E                 	db	46
   634  00FC78  53                 	db	83	;'S'
   635  00FC79  4E                 	db	78	;'N'
   636  00FC7A  52                 	db	82	;'R'
   637  00FC7B  7C                 	db	124
   638  00FC7C  33                 	db	51	;'3'
   639  00FC7D  2E                 	db	46
   640  00FC7E  41                 	db	65	;'A'
   641  00FC7F  43                 	db	67	;'C'
   642  00FC80  00                 	db	0
   643  00FC81                     STR_92:
   644  00FC81  54                 	db	84	;'T'
   645  00FC82  53                 	db	83	;'S'
   646  00FC83  54                 	db	84	;'T'
   647  00FC84  3A                 	db	58	;':'
   648  00FC85  20                 	db	32
   649  00FC86  43                 	db	67	;'C'
   650  00FC87  4F                 	db	79	;'O'
   651  00FC88  4E                 	db	78	;'N'
   652  00FC89  44                 	db	68	;'D'
   653  00FC8A  20                 	db	32
   654  00FC8B  53                 	db	83	;'S'
   655  00FC8C  4F                 	db	79	;'O'
   656  00FC8D  4C                 	db	76	;'L'
   657  00FC8E  4E                 	db	78	;'N'
   658  00FC8F  27                 	db	39
   659  00FC90  44                 	db	68	;'D'
   660  00FC91  00                 	db	0
   661  00FC92                     STR_94:
   662  00FC92  54                 	db	84	;'T'
   663  00FC93  53                 	db	83	;'S'
   664  00FC94  54                 	db	84	;'T'
   665  00FC95  3A                 	db	58	;':'
   666  00FC96  20                 	db	32
   667  00FC97  50                 	db	80	;'P'
   668  00FC98  55                 	db	85	;'U'
   669  00FC99  53                 	db	83	;'S'
   670  00FC9A  48                 	db	72	;'H'
   671  00FC9B  20                 	db	32
   672  00FC9C  53                 	db	83	;'S'
   673  00FC9D  4F                 	db	79	;'O'
   674  00FC9E  4C                 	db	76	;'L'
   675  00FC9F  4E                 	db	78	;'N'
   676  00FCA0  27                 	db	39
   677  00FCA1  44                 	db	68	;'D'
   678  00FCA2  00                 	db	0
   679  00FCA3                     STR_69:
   680  00FCA3  34                 	db	52	;'4'
   681  00FCA4  2E                 	db	46
   682  00FCA5  48                 	db	72	;'H'
   683  00FCA6  49                 	db	73	;'I'
   684  00FCA7  7C                 	db	124
   685  00FCA8  35                 	db	53	;'5'
   686  00FCA9  2E                 	db	46
   687  00FCAA  54                 	db	84	;'T'
   688  00FCAB  4F                 	db	79	;'O'
   689  00FCAC  47                 	db	71	;'G'
   690  00FCAD  7C                 	db	124
   691  00FCAE  36                 	db	54	;'6'
   692  00FCAF  2E                 	db	46
   693  00FCB0  45                 	db	69	;'E'
   694  00FCB1  45                 	db	69	;'E'
   695  00FCB2  50                 	db	80	;'P'
   696  00FCB3  00                 	db	0
   697  00FCB4                     STR_110:
   698  00FCB4  54                 	db	84	;'T'
   699  00FCB5  53                 	db	83	;'S'
   700  00FCB6  54                 	db	84	;'T'
   701  00FCB7  3A                 	db	58	;':'
   702  00FCB8  20                 	db	32
   703  00FCB9  42                 	db	66	;'B'
   704  00FCBA  4F                 	db	79	;'O'
   705  00FCBB  54                 	db	84	;'T'
   706  00FCBC  48                 	db	72	;'H'
   707  00FCBD  20                 	db	32
   708  00FCBE  53                 	db	83	;'S'
   709  00FCBF  45                 	db	69	;'E'
   710  00FCC0  52                 	db	82	;'R'
   711  00FCC1  56                 	db	86	;'V'
   712  00FCC2  4F                 	db	79	;'O'
   713  00FCC3  53                 	db	83	;'S'
   714  00FCC4  00                 	db	0
   715  00FCC5                     STR_41:
   716  00FCC5  4C                 	db	76	;'L'
   717  00FCC6  4F                 	db	79	;'O'
   718  00FCC7  47                 	db	71	;'G'
   719  00FCC8  20                 	db	32
   720  00FCC9  31                 	db	49	;'1'
   721  00FCCA  20                 	db	32
   722  00FCCB  20                 	db	32
   723  00FCCC  20                 	db	32
   724  00FCCD  20                 	db	32
   725  00FCCE  20                 	db	32
   726  00FCCF  20                 	db	32
   727  00FCD0  20                 	db	32
   728  00FCD1  20                 	db	32
   729  00FCD2  20                 	db	32
   730  00FCD3  20                 	db	32
   731  00FCD4  20                 	db	32
   732  00FCD5  00                 	db	0
   733  00FCD6                     STR_40:
   734  00FCD6  4C                 	db	76	;'L'
   735  00FCD7  4F                 	db	79	;'O'
   736  00FCD8  47                 	db	71	;'G'
   737  00FCD9  20                 	db	32
   738  00FCDA  32                 	db	50	;'2'
   739  00FCDB  20                 	db	32
   740  00FCDC  20                 	db	32
   741  00FCDD  20                 	db	32
   742  00FCDE  20                 	db	32
   743  00FCDF  20                 	db	32
   744  00FCE0  20                 	db	32
   745  00FCE1  20                 	db	32
   746  00FCE2  20                 	db	32
   747  00FCE3  20                 	db	32
   748  00FCE4  20                 	db	32
   749  00FCE5  20                 	db	32
   750  00FCE6  00                 	db	0
   751  00FCE7                     STR_44:
   752  00FCE7  4C                 	db	76	;'L'
   753  00FCE8  4F                 	db	79	;'O'
   754  00FCE9  47                 	db	71	;'G'
   755  00FCEA  20                 	db	32
   756  00FCEB  33                 	db	51	;'3'
   757  00FCEC  20                 	db	32
   758  00FCED  20                 	db	32
   759  00FCEE  20                 	db	32
   760  00FCEF  20                 	db	32
   761  00FCF0  20                 	db	32
   762  00FCF1  20                 	db	32
   763  00FCF2  20                 	db	32
   764  00FCF3  20                 	db	32
   765  00FCF4  20                 	db	32
   766  00FCF5  20                 	db	32
   767  00FCF6  20                 	db	32
   768  00FCF7  00                 	db	0
   769  00FCF8                     STR_48:
   770  00FCF8  4C                 	db	76	;'L'
   771  00FCF9  4F                 	db	79	;'O'
   772  00FCFA  47                 	db	71	;'G'
   773  00FCFB  20                 	db	32
   774  00FCFC  34                 	db	52	;'4'
   775  00FCFD  20                 	db	32
   776  00FCFE  20                 	db	32
   777  00FCFF  20                 	db	32
   778  00FD00  20                 	db	32
   779  00FD01  20                 	db	32
   780  00FD02  20                 	db	32
   781  00FD03  20                 	db	32
   782  00FD04  20                 	db	32
   783  00FD05  20                 	db	32
   784  00FD06  20                 	db	32
   785  00FD07  20                 	db	32
   786  00FD08  00                 	db	0
   787  00FD09                     STR_36:
   788  00FD09  33                 	db	51	;'3'
   789  00FD0A  2E                 	db	46
   790  00FD0B  20                 	db	32
   791  00FD0C  4C                 	db	76	;'L'
   792  00FD0D  4F                 	db	79	;'O'
   793  00FD0E  47                 	db	71	;'G'
   794  00FD0F  53                 	db	83	;'S'
   795  00FD10  20                 	db	32
   796  00FD11  20                 	db	32
   797  00FD12  20                 	db	32
   798  00FD13  20                 	db	32
   799  00FD14  20                 	db	32
   800  00FD15  20                 	db	32
   801  00FD16  20                 	db	32
   802  00FD17  20                 	db	32
   803  00FD18  20                 	db	32
   804  00FD19  00                 	db	0
   805  00FD1A                     STR_32:
   806  00FD1A  32                 	db	50	;'2'
   807  00FD1B  2E                 	db	46
   808  00FD1C  20                 	db	32
   809  00FD1D  53                 	db	83	;'S'
   810  00FD1E  4F                 	db	79	;'O'
   811  00FD1F  52                 	db	82	;'R'
   812  00FD20  54                 	db	84	;'T'
   813  00FD21  20                 	db	32
   814  00FD22  20                 	db	32
   815  00FD23  20                 	db	32
   816  00FD24  20                 	db	32
   817  00FD25  20                 	db	32
   818  00FD26  20                 	db	32
   819  00FD27  20                 	db	32
   820  00FD28  20                 	db	32
   821  00FD29  20                 	db	32
   822  00FD2A  00                 	db	0
   823  00FD2B                     STR_33:
   824  00FD2B  31                 	db	49	;'1'
   825  00FD2C  2E                 	db	46
   826  00FD2D  20                 	db	32
   827  00FD2E  44                 	db	68	;'D'
   828  00FD2F  41                 	db	65	;'A'
   829  00FD30  54                 	db	84	;'T'
   830  00FD31  45                 	db	69	;'E'
   831  00FD32  2F                 	db	47
   832  00FD33  54                 	db	84	;'T'
   833  00FD34  49                 	db	73	;'I'
   834  00FD35  4D                 	db	77	;'M'
   835  00FD36  45                 	db	69	;'E'
   836  00FD37  20                 	db	32
   837  00FD38  20                 	db	32
   838  00FD39  20                 	db	32
   839  00FD3A  20                 	db	32
   840  00FD3B  00                 	db	0
   841  00FD3C                     STR_24:
   842  00FD3C  20                 	db	32
   843  00FD3D  2D                 	db	45
   844  00FD3E  2D                 	db	45
   845  00FD3F  20                 	db	32
   846  00FD40  50                 	db	80	;'P'
   847  00FD41  4F                 	db	79	;'O'
   848  00FD42  50                 	db	80	;'P'
   849  00FD43  20                 	db	32
   850  00FD44  20                 	db	32
   851  00FD45  43                 	db	67	;'C'
   852  00FD46  41                 	db	65	;'A'
   853  00FD47  4E                 	db	78	;'N'
   854  00FD48  20                 	db	32
   855  00FD49  2D                 	db	45
   856  00FD4A  2D                 	db	45
   857  00FD4B  20                 	db	32
   858  00FD4C  00                 	db	0
   859  00FD4D                     STR_26:
   860  00FD4D  20                 	db	32
   861  00FD4E  2D                 	db	45
   862  00FD4F  2D                 	db	45
   863  00FD50  20                 	db	32
   864  00FD51  53                 	db	83	;'S'
   865  00FD52  4F                 	db	79	;'O'
   866  00FD53  55                 	db	85	;'U'
   867  00FD54  50                 	db	80	;'P'
   868  00FD55  20                 	db	32
   869  00FD56  43                 	db	67	;'C'
   870  00FD57  41                 	db	65	;'A'
   871  00FD58  4E                 	db	78	;'N'
   872  00FD59  20                 	db	32
   873  00FD5A  2D                 	db	45
   874  00FD5B  2D                 	db	45
   875  00FD5C  20                 	db	32
   876  00FD5D  00                 	db	0
   877  00FD5E                     STR_28:
   878  00FD5E  2D                 	db	45
   879  00FD5F  2D                 	db	45
   880  00FD60  20                 	db	32
   881  00FD61  54                 	db	84	;'T'
   882  00FD62  4F                 	db	79	;'O'
   883  00FD63  54                 	db	84	;'T'
   884  00FD64  41                 	db	65	;'A'
   885  00FD65  4C                 	db	76	;'L'
   886  00FD66  20                 	db	32
   887  00FD67  43                 	db	67	;'C'
   888  00FD68  41                 	db	65	;'A'
   889  00FD69  4E                 	db	78	;'N'
   890  00FD6A  53                 	db	83	;'S'
   891  00FD6B  20                 	db	32
   892  00FD6C  2D                 	db	45
   893  00FD6D  2D                 	db	45
   894  00FD6E  00                 	db	0
   895  00FD6F                     STR_39:
   896  00FD6F  4C                 	db	76	;'L'
   897  00FD70  4F                 	db	79	;'O'
   898  00FD71  47                 	db	71	;'G'
   899  00FD72  20                 	db	32
   900  00FD73  31                 	db	49	;'1'
   901  00FD74  20                 	db	32
   902  00FD75  20                 	db	32
   903  00FD76  20                 	db	32
   904  00FD77  20                 	db	32
   905  00FD78  20                 	db	32
   906  00FD79  20                 	db	32
   907  00FD7A  20                 	db	32
   908  00FD7B  20                 	db	32
   909  00FD7C  20                 	db	32
   910  00FD7D  20                 	db	32
   911  00FD7E  3C                 	db	60	;'<'
   912  00FD7F  00                 	db	0
   913  00FD80                     STR_42:
   914  00FD80  4C                 	db	76	;'L'
   915  00FD81  4F                 	db	79	;'O'
   916  00FD82  47                 	db	71	;'G'
   917  00FD83  20                 	db	32
   918  00FD84  32                 	db	50	;'2'
   919  00FD85  20                 	db	32
   920  00FD86  20                 	db	32
   921  00FD87  20                 	db	32
   922  00FD88  20                 	db	32
   923  00FD89  20                 	db	32
   924  00FD8A  20                 	db	32
   925  00FD8B  20                 	db	32
   926  00FD8C  20                 	db	32
   927  00FD8D  20                 	db	32
   928  00FD8E  20                 	db	32
   929  00FD8F  3C                 	db	60	;'<'
   930  00FD90  00                 	db	0
   931  00FD91                     STR_46:
   932  00FD91  4C                 	db	76	;'L'
   933  00FD92  4F                 	db	79	;'O'
   934  00FD93  47                 	db	71	;'G'
   935  00FD94  20                 	db	32
   936  00FD95  33                 	db	51	;'3'
   937  00FD96  20                 	db	32
   938  00FD97  20                 	db	32
   939  00FD98  20                 	db	32
   940  00FD99  20                 	db	32
   941  00FD9A  20                 	db	32
   942  00FD9B  20                 	db	32
   943  00FD9C  20                 	db	32
   944  00FD9D  20                 	db	32
   945  00FD9E  20                 	db	32
   946  00FD9F  20                 	db	32
   947  00FDA0  3C                 	db	60	;'<'
   948  00FDA1  00                 	db	0
   949  00FDA2                     STR_50:
   950  00FDA2  4C                 	db	76	;'L'
   951  00FDA3  4F                 	db	79	;'O'
   952  00FDA4  47                 	db	71	;'G'
   953  00FDA5  20                 	db	32
   954  00FDA6  34                 	db	52	;'4'
   955  00FDA7  20                 	db	32
   956  00FDA8  20                 	db	32
   957  00FDA9  20                 	db	32
   958  00FDAA  20                 	db	32
   959  00FDAB  20                 	db	32
   960  00FDAC  20                 	db	32
   961  00FDAD  20                 	db	32
   962  00FDAE  20                 	db	32
   963  00FDAF  20                 	db	32
   964  00FDB0  20                 	db	32
   965  00FDB1  3C                 	db	60	;'<'
   966  00FDB2  00                 	db	0
   967  00FDB3                     STR_38:
   968  00FDB3  33                 	db	51	;'3'
   969  00FDB4  2E                 	db	46
   970  00FDB5  20                 	db	32
   971  00FDB6  4C                 	db	76	;'L'
   972  00FDB7  4F                 	db	79	;'O'
   973  00FDB8  47                 	db	71	;'G'
   974  00FDB9  53                 	db	83	;'S'
   975  00FDBA  20                 	db	32
   976  00FDBB  20                 	db	32
   977  00FDBC  20                 	db	32
   978  00FDBD  20                 	db	32
   979  00FDBE  20                 	db	32
   980  00FDBF  20                 	db	32
   981  00FDC0  20                 	db	32
   982  00FDC1  20                 	db	32
   983  00FDC2  3C                 	db	60	;'<'
   984  00FDC3  00                 	db	0
   985  00FDC4                     STR_34:
   986  00FDC4  32                 	db	50	;'2'
   987  00FDC5  2E                 	db	46
   988  00FDC6  20                 	db	32
   989  00FDC7  53                 	db	83	;'S'
   990  00FDC8  4F                 	db	79	;'O'
   991  00FDC9  52                 	db	82	;'R'
   992  00FDCA  54                 	db	84	;'T'
   993  00FDCB  20                 	db	32
   994  00FDCC  20                 	db	32
   995  00FDCD  20                 	db	32
   996  00FDCE  20                 	db	32
   997  00FDCF  20                 	db	32
   998  00FDD0  20                 	db	32
   999  00FDD1  20                 	db	32
  1000  00FDD2  20                 	db	32
  1001  00FDD3  3C                 	db	60	;'<'
  1002  00FDD4  00                 	db	0
  1003  00FDD5                     STR_31:
  1004  00FDD5  31                 	db	49	;'1'
  1005  00FDD6  2E                 	db	46
  1006  00FDD7  20                 	db	32
  1007  00FDD8  44                 	db	68	;'D'
  1008  00FDD9  41                 	db	65	;'A'
  1009  00FDDA  54                 	db	84	;'T'
  1010  00FDDB  45                 	db	69	;'E'
  1011  00FDDC  2F                 	db	47
  1012  00FDDD  54                 	db	84	;'T'
  1013  00FDDE  49                 	db	73	;'I'
  1014  00FDDF  4D                 	db	77	;'M'
  1015  00FDE0  45                 	db	69	;'E'
  1016  00FDE1  20                 	db	32
  1017  00FDE2  20                 	db	32
  1018  00FDE3  20                 	db	32
  1019  00FDE4  3C                 	db	60	;'<'
  1020  00FDE5  00                 	db	0
  1021  00FDE6                     STR_6:
  1022  00FDE6  50                 	db	80	;'P'
  1023  00FDE7  41                 	db	65	;'A'
  1024  00FDE8  55                 	db	85	;'U'
  1025  00FDE9  53                 	db	83	;'S'
  1026  00FDEA  45                 	db	69	;'E'
  1027  00FDEB  20                 	db	32
  1028  00FDEC  3C                 	db	60	;'<'
  1029  00FDED  20                 	db	32
  1030  00FDEE  7C                 	db	124
  1031  00FDEF  20                 	db	32
  1032  00FDF0  42                 	db	66	;'B'
  1033  00FDF1  41                 	db	65	;'A'
  1034  00FDF2  43                 	db	67	;'C'
  1035  00FDF3  4B                 	db	75	;'K'
  1036  00FDF4  20                 	db	32
  1037  00FDF5  3E                 	db	62	;'>'
  1038  00FDF6  00                 	db	0
  1039  00FDF7                     STR_30:
  1040  00FDF7  50                 	db	80	;'P'
  1041  00FDF8  55                 	db	85	;'U'
  1042  00FDF9  53                 	db	83	;'S'
  1043  00FDFA  48                 	db	72	;'H'
  1044  00FDFB  20                 	db	32
  1045  00FDFC  54                 	db	84	;'T'
  1046  00FDFD  4F                 	db	79	;'O'
  1047  00FDFE  20                 	db	32
  1048  00FDFF  43                 	db	67	;'C'
  1049  00FE00  4F                 	db	79	;'O'
  1050  00FE01  4E                 	db	78	;'N'
  1051  00FE02  54                 	db	84	;'T'
  1052  00FE03  49                 	db	73	;'I'
  1053  00FE04  4E                 	db	78	;'N'
  1054  00FE05  55                 	db	85	;'U'
  1055  00FE06  45                 	db	69	;'E'
  1056  00FE07  00                 	db	0
  1057  00FE08                     STR_27:
  1058  00FE08  4E                 	db	78	;'N'
  1059  00FE09  4C                 	db	76	;'L'
  1060  00FE0A  41                 	db	65	;'A'
  1061  00FE0B  42                 	db	66	;'B'
  1062  00FE0C  3A                 	db	58	;':'
  1063  00FE0D  20                 	db	32
  1064  00FE0E  25                 	db	37
  1065  00FE0F  64                 	db	100	;'d'
  1066  00FE10  7C                 	db	124
  1067  00FE11  4C                 	db	76	;'L'
  1068  00FE12  41                 	db	65	;'A'
  1069  00FE13  42                 	db	66	;'B'
  1070  00FE14  3A                 	db	58	;':'
  1071  00FE15  20                 	db	32
  1072  00FE16  25                 	db	37
  1073  00FE17  64                 	db	100	;'d'
  1074  00FE18  00                 	db	0
  1075  00FE19                     STR_25:
  1076  00FE19  4E                 	db	78	;'N'
  1077  00FE1A  54                 	db	84	;'T'
  1078  00FE1B  41                 	db	65	;'A'
  1079  00FE1C  42                 	db	66	;'B'
  1080  00FE1D  3A                 	db	58	;':'
  1081  00FE1E  20                 	db	32
  1082  00FE1F  25                 	db	37
  1083  00FE20  64                 	db	100	;'d'
  1084  00FE21  7C                 	db	124
  1085  00FE22  54                 	db	84	;'T'
  1086  00FE23  41                 	db	65	;'A'
  1087  00FE24  42                 	db	66	;'B'
  1088  00FE25  3A                 	db	58	;':'
  1089  00FE26  20                 	db	32
  1090  00FE27  25                 	db	37
  1091  00FE28  64                 	db	100	;'d'
  1092  00FE29  00                 	db	0
  1093  00FE2A                     STR_83:
  1094  00FE2A  4D                 	db	77	;'M'
  1095  00FE2B  41                 	db	65	;'A'
  1096  00FE2C  47                 	db	71	;'G'
  1097  00FE2D  5F                 	db	95	;'_'
  1098  00FE2E  73                 	db	115	;'s'
  1099  00FE2F  69                 	db	105	;'i'
  1100  00FE30  67                 	db	103	;'g'
  1101  00FE31  6E                 	db	110	;'n'
  1102  00FE32  61                 	db	97	;'a'
  1103  00FE33  6C                 	db	108	;'l'
  1104  00FE34  3A                 	db	58	;':'
  1105  00FE35  20                 	db	32
  1106  00FE36  25                 	db	37
  1107  00FE37  64                 	db	100	;'d'
  1108  00FE38  20                 	db	32
  1109  00FE39  00                 	db	0
  1110  00FE3A                     STR_103:
  1111  00FE3A  54                 	db	84	;'T'
  1112  00FE3B  53                 	db	83	;'S'
  1113  00FE3C  54                 	db	84	;'T'
  1114  00FE3D  3A                 	db	58	;':'
  1115  00FE3E  20                 	db	32
  1116  00FE3F  54                 	db	84	;'T'
  1117  00FE40  49                 	db	73	;'I'
  1118  00FE41  4C                 	db	76	;'L'
  1119  00FE42  54                 	db	84	;'T'
  1120  00FE43  20                 	db	32
  1121  00FE44  53                 	db	83	;'S'
  1122  00FE45  45                 	db	69	;'E'
  1123  00FE46  52                 	db	82	;'R'
  1124  00FE47  56                 	db	86	;'V'
  1125  00FE48  4F                 	db	79	;'O'
  1126  00FE49  00                 	db	0
  1127  00FE4A                     STR_4:
  1128  00FE4A  44                 	db	68	;'D'
  1129  00FE4B  49                 	db	73	;'I'
  1130  00FE4C  44                 	db	68	;'D'
  1131  00FE4D  4E                 	db	78	;'N'
  1132  00FE4E  27                 	db	39
  1133  00FE4F  54                 	db	84	;'T'
  1134  00FE50  20                 	db	32
  1135  00FE51  43                 	db	67	;'C'
  1136  00FE52  4F                 	db	79	;'O'
  1137  00FE53  4D                 	db	77	;'M'
  1138  00FE54  50                 	db	80	;'P'
  1139  00FE55  4C                 	db	76	;'L'
  1140  00FE56  45                 	db	69	;'E'
  1141  00FE57  54                 	db	84	;'T'
  1142  00FE58  45                 	db	69	;'E'
  1143  00FE59  00                 	db	0
  1144  00FE5A                     STR_80:
  1145  00FE5A  49                 	db	73	;'I'
  1146  00FE5B  52                 	db	82	;'R'
  1147  00FE5C  5F                 	db	95	;'_'
  1148  00FE5D  73                 	db	115	;'s'
  1149  00FE5E  69                 	db	105	;'i'
  1150  00FE5F  67                 	db	103	;'g'
  1151  00FE60  6E                 	db	110	;'n'
  1152  00FE61  61                 	db	97	;'a'
  1153  00FE62  6C                 	db	108	;'l'
  1154  00FE63  3A                 	db	58	;':'
  1155  00FE64  20                 	db	32
  1156  00FE65  25                 	db	37
  1157  00FE66  64                 	db	100	;'d'
  1158  00FE67  20                 	db	32
  1159  00FE68  00                 	db	0
  1160  00FE69                     STR_109:
  1161  00FE69  43                 	db	67	;'C'
  1162  00FE6A  41                 	db	65	;'A'
  1163  00FE6B  4D                 	db	77	;'M'
  1164  00FE6C  20                 	db	32
  1165  00FE6D  44                 	db	68	;'D'
  1166  00FE6E  57                 	db	87	;'W'
  1167  00FE6F  4E                 	db	78	;'N'
  1168  00FE70  20                 	db	32
  1169  00FE71  7C                 	db	124
  1170  00FE72  52                 	db	82	;'R'
  1171  00FE73  43                 	db	67	;'C'
  1172  00FE74  30                 	db	48	;'0'
  1173  00FE75  3D                 	db	61	;'='
  1174  00FE76  30                 	db	48	;'0'
  1175  00FE77  00                 	db	0
  1176  00FE78                     STR_108:
  1177  00FE78  43                 	db	67	;'C'
  1178  00FE79  41                 	db	65	;'A'
  1179  00FE7A  4D                 	db	77	;'M'
  1180  00FE7B  20                 	db	32
  1181  00FE7C  55                 	db	85	;'U'
  1182  00FE7D  50                 	db	80	;'P'
  1183  00FE7E  20                 	db	32
  1184  00FE7F  20                 	db	32
  1185  00FE80  7C                 	db	124
  1186  00FE81  52                 	db	82	;'R'
  1187  00FE82  43                 	db	67	;'C'
  1188  00FE83  30                 	db	48	;'0'
  1189  00FE84  3D                 	db	61	;'='
  1190  00FE85  31                 	db	49	;'1'
  1191  00FE86  00                 	db	0
  1192  00FE87                     STR_82:
  1193  00FE87  54                 	db	84	;'T'
  1194  00FE88  53                 	db	83	;'S'
  1195  00FE89  54                 	db	84	;'T'
  1196  00FE8A  3A                 	db	58	;':'
  1197  00FE8B  20                 	db	32
  1198  00FE8C  4D                 	db	77	;'M'
  1199  00FE8D  41                 	db	65	;'A'
  1200  00FE8E  47                 	db	71	;'G'
  1201  00FE8F  4E                 	db	78	;'N'
  1202  00FE90  45                 	db	69	;'E'
  1203  00FE91  54                 	db	84	;'T'
  1204  00FE92  49                 	db	73	;'I'
  1205  00FE93  53                 	db	83	;'S'
  1206  00FE94  4D                 	db	77	;'M'
  1207  00FE95  00                 	db	0
  1208  00FE96                     STR_107:
  1209  00FE96  54                 	db	84	;'T'
  1210  00FE97  53                 	db	83	;'S'
  1211  00FE98  54                 	db	84	;'T'
  1212  00FE99  3A                 	db	58	;':'
  1213  00FE9A  20                 	db	32
  1214  00FE9B  43                 	db	67	;'C'
  1215  00FE9C  41                 	db	65	;'A'
  1216  00FE9D  4D                 	db	77	;'M'
  1217  00FE9E  20                 	db	32
  1218  00FE9F  53                 	db	83	;'S'
  1219  00FEA0  45                 	db	69	;'E'
  1220  00FEA1  52                 	db	82	;'R'
  1221  00FEA2  56                 	db	86	;'V'
  1222  00FEA3  4F                 	db	79	;'O'
  1223  00FEA4  00                 	db	0
  1224  00FEA5                     STR_96:
  1225  00FEA5  54                 	db	84	;'T'
  1226  00FEA6  53                 	db	83	;'S'
  1227  00FEA7  54                 	db	84	;'T'
  1228  00FEA8  3A                 	db	58	;':'
  1229  00FEA9  20                 	db	32
  1230  00FEAA  50                 	db	80	;'P'
  1231  00FEAB  41                 	db	65	;'A'
  1232  00FEAC  4E                 	db	78	;'N'
  1233  00FEAD  20                 	db	32
  1234  00FEAE  53                 	db	83	;'S'
  1235  00FEAF  45                 	db	69	;'E'
  1236  00FEB0  52                 	db	82	;'R'
  1237  00FEB1  56                 	db	86	;'V'
  1238  00FEB2  4F                 	db	79	;'O'
  1239  00FEB3  00                 	db	0
  1240  00FEB4                     STR_75:
  1241  00FEB4  41                 	db	65	;'A'
  1242  00FEB5  4C                 	db	76	;'L'
  1243  00FEB6  47                 	db	71	;'G'
  1244  00FEB7  34                 	db	52	;'4'
  1245  00FEB8  3A                 	db	58	;':'
  1246  00FEB9  20                 	db	32
  1247  00FEBA  41                 	db	65	;'A'
  1248  00FEBB  4C                 	db	76	;'L'
  1249  00FEBC  4C                 	db	76	;'L'
  1250  00FEBD  20                 	db	32
  1251  00FEBE  43                 	db	67	;'C'
  1252  00FEBF  41                 	db	65	;'A'
  1253  00FEC0  4E                 	db	78	;'N'
  1254  00FEC1  53                 	db	83	;'S'
  1255  00FEC2  00                 	db	0
  1256  00FEC3                     STR_90:
  1257  00FEC3  54                 	db	84	;'T'
  1258  00FEC4  53                 	db	83	;'S'
  1259  00FEC5  54                 	db	84	;'T'
  1260  00FEC6  3A                 	db	58	;':'
  1261  00FEC7  20                 	db	32
  1262  00FEC8  44                 	db	68	;'D'
  1263  00FEC9  43                 	db	67	;'C'
  1264  00FECA  20                 	db	32
  1265  00FECB  4D                 	db	77	;'M'
  1266  00FECC  4F                 	db	79	;'O'
  1267  00FECD  54                 	db	84	;'T'
  1268  00FECE  4F                 	db	79	;'O'
  1269  00FECF  52                 	db	82	;'R'
  1270  00FED0  53                 	db	83	;'S'
  1271  00FED1  00                 	db	0
  1272  00FED2                     STR_70:
  1273  00FED2  41                 	db	65	;'A'
  1274  00FED3  4C                 	db	76	;'L'
  1275  00FED4  47                 	db	71	;'G'
  1276  00FED5  4F                 	db	79	;'O'
  1277  00FED6  52                 	db	82	;'R'
  1278  00FED7  49                 	db	73	;'I'
  1279  00FED8  54                 	db	84	;'T'
  1280  00FED9  48                 	db	72	;'H'
  1281  00FEDA  4D                 	db	77	;'M'
  1282  00FEDB  20                 	db	32
  1283  00FEDC  54                 	db	84	;'T'
  1284  00FEDD  45                 	db	69	;'E'
  1285  00FEDE  53                 	db	83	;'S'
  1286  00FEDF  54                 	db	84	;'T'
  1287  00FEE0  00                 	db	0
  1288  00FEE1                     STR_91:
  1289  00FEE1  50                 	db	80	;'P'
  1290  00FEE2  49                 	db	73	;'I'
  1291  00FEE3  4E                 	db	78	;'N'
  1292  00FEE4  20                 	db	32
  1293  00FEE5  52                 	db	82	;'R'
  1294  00FEE6  41                 	db	65	;'A'
  1295  00FEE7  35                 	db	53	;'5'
  1296  00FEE8  20                 	db	32
  1297  00FEE9  48                 	db	72	;'H'
  1298  00FEEA  49                 	db	73	;'I'
  1299  00FEEB  47                 	db	71	;'G'
  1300  00FEEC  48                 	db	72	;'H'
  1301  00FEED  2E                 	db	46
  1302  00FEEE  00                 	db	0
  1303  00FEEF                     STR_73:
  1304  00FEEF  41                 	db	65	;'A'
  1305  00FEF0  4C                 	db	76	;'L'
  1306  00FEF1  47                 	db	71	;'G'
  1307  00FEF2  32                 	db	50	;'2'
  1308  00FEF3  3A                 	db	58	;':'
  1309  00FEF4  20                 	db	32
  1310  00FEF5  31                 	db	49	;'1'
  1311  00FEF6  32                 	db	50	;'2'
  1312  00FEF7  20                 	db	32
  1313  00FEF8  43                 	db	67	;'C'
  1314  00FEF9  41                 	db	65	;'A'
  1315  00FEFA  4E                 	db	78	;'N'
  1316  00FEFB  53                 	db	83	;'S'
  1317  00FEFC  00                 	db	0
  1318  00FEFD                     STR_76:
  1319  00FEFD  41                 	db	65	;'A'
  1320  00FEFE  4C                 	db	76	;'L'
  1321  00FEFF  47                 	db	71	;'G'
  1322  00FF00  35                 	db	53	;'5'
  1323  00FF01  3A                 	db	58	;':'
  1324  00FF02  20                 	db	32
  1325  00FF03  4E                 	db	78	;'N'
  1326  00FF04  4F                 	db	79	;'O'
  1327  00FF05  20                 	db	32
  1328  00FF06  43                 	db	67	;'C'
  1329  00FF07  41                 	db	65	;'A'
  1330  00FF08  4E                 	db	78	;'N'
  1331  00FF09  53                 	db	83	;'S'
  1332  00FF0A  00                 	db	0
  1333  00FF0B                     STR_71:
  1334  00FF0B  50                 	db	80	;'P'
  1335  00FF0C  55                 	db	85	;'U'
  1336  00FF0D  53                 	db	83	;'S'
  1337  00FF0E  48                 	db	72	;'H'
  1338  00FF0F  20                 	db	32
  1339  00FF10  54                 	db	84	;'T'
  1340  00FF11  4F                 	db	79	;'O'
  1341  00FF12  20                 	db	32
  1342  00FF13  53                 	db	83	;'S'
  1343  00FF14  54                 	db	84	;'T'
  1344  00FF15  41                 	db	65	;'A'
  1345  00FF16  52                 	db	82	;'R'
  1346  00FF17  54                 	db	84	;'T'
  1347  00FF18  00                 	db	0
  1348  00FF19                     STR_23:
  1349  00FF19  25                 	db	37
  1350  00FF1A  64                 	db	100	;'d'
  1351  00FF1B  20                 	db	32
  1352  00FF1C  4D                 	db	77	;'M'
  1353  00FF1D  49                 	db	73	;'I'
  1354  00FF1E  4E                 	db	78	;'N'
  1355  00FF1F  20                 	db	32
  1356  00FF20  25                 	db	37
  1357  00FF21  64                 	db	100	;'d'
  1358  00FF22  20                 	db	32
  1359  00FF23  53                 	db	83	;'S'
  1360  00FF24  45                 	db	69	;'E'
  1361  00FF25  43                 	db	67	;'C'
  1362  00FF26  00                 	db	0
  1363  00FF27                     STR_2:
  1364  00FF27  54                 	db	84	;'T'
  1365  00FF28  49                 	db	73	;'I'
  1366  00FF29  4D                 	db	77	;'M'
  1367  00FF2A  45                 	db	69	;'E'
  1368  00FF2B  3A                 	db	58	;':'
  1369  00FF2C  20                 	db	32
  1370  00FF2D  25                 	db	37
  1371  00FF2E  64                 	db	100	;'d'
  1372  00FF2F  3A                 	db	58	;':'
  1373  00FF30  25                 	db	37
  1374  00FF31  30                 	db	48	;'0'
  1375  00FF32  32                 	db	50	;'2'
  1376  00FF33  64                 	db	100	;'d'
  1377  00FF34  00                 	db	0
  1378  00FF35                     STR_79:
  1379  00FF35  54                 	db	84	;'T'
  1380  00FF36  53                 	db	83	;'S'
  1381  00FF37  54                 	db	84	;'T'
  1382  00FF38  3A                 	db	58	;':'
  1383  00FF39  20                 	db	32
  1384  00FF3A  49                 	db	73	;'I'
  1385  00FF3B  52                 	db	82	;'R'
  1386  00FF3C  20                 	db	32
  1387  00FF3D  53                 	db	83	;'S'
  1388  00FF3E  4E                 	db	78	;'N'
  1389  00FF3F  53                 	db	83	;'S'
  1390  00FF40  52                 	db	82	;'R'
  1391  00FF41  00                 	db	0
  1392  00FF42                     STR_65:
  1393  00FF42  54                 	db	84	;'T'
  1394  00FF43  49                 	db	73	;'I'
  1395  00FF44  4D                 	db	77	;'M'
  1396  00FF45  45                 	db	69	;'E'
  1397  00FF46  20                 	db	32
  1398  00FF47  25                 	db	37
  1399  00FF48  64                 	db	100	;'d'
  1400  00FF49  3A                 	db	58	;':'
  1401  00FF4A  25                 	db	37
  1402  00FF4B  30                 	db	48	;'0'
  1403  00FF4C  32                 	db	50	;'2'
  1404  00FF4D  64                 	db	100	;'d'
  1405  00FF4E  00                 	db	0
  1406  00FF4F                     STR_74:
  1407  00FF4F  41                 	db	65	;'A'
  1408  00FF50  4C                 	db	76	;'L'
  1409  00FF51  47                 	db	71	;'G'
  1410  00FF52  33                 	db	51	;'3'
  1411  00FF53  3A                 	db	58	;':'
  1412  00FF54  20                 	db	32
  1413  00FF55  31                 	db	49	;'1'
  1414  00FF56  20                 	db	32
  1415  00FF57  43                 	db	67	;'C'
  1416  00FF58  41                 	db	65	;'A'
  1417  00FF59  4E                 	db	78	;'N'
  1418  00FF5A  00                 	db	0
  1419  00FF5B                     STR_93:
  1420  00FF5B  50                 	db	80	;'P'
  1421  00FF5C  49                 	db	73	;'I'
  1422  00FF5D  4E                 	db	78	;'N'
  1423  00FF5E  20                 	db	32
  1424  00FF5F  52                 	db	82	;'R'
  1425  00FF60  41                 	db	65	;'A'
  1426  00FF61  33                 	db	51	;'3'
  1427  00FF62  2E                 	db	46
  1428  00FF63  2E                 	db	46
  1429  00FF64  2E                 	db	46
  1430  00FF65  00                 	db	0
  1431  00FF66                     STR_95:
  1432  00FF66  50                 	db	80	;'P'
  1433  00FF67  49                 	db	73	;'I'
  1434  00FF68  4E                 	db	78	;'N'
  1435  00FF69  20                 	db	32
  1436  00FF6A  52                 	db	82	;'R'
  1437  00FF6B  41                 	db	65	;'A'
  1438  00FF6C  34                 	db	52	;'4'
  1439  00FF6D  2E                 	db	46
  1440  00FF6E  2E                 	db	46
  1441  00FF6F  2E                 	db	46
  1442  00FF70  00                 	db	0
  1443  00FF71                     STR_113:
  1444  00FF71  50                 	db	80	;'P'
  1445  00FF72  55                 	db	85	;'U'
  1446  00FF73  53                 	db	83	;'S'
  1447  00FF74  48                 	db	72	;'H'
  1448  00FF75  45                 	db	69	;'E'
  1449  00FF76  52                 	db	82	;'R'
  1450  00FF77  20                 	db	32
  1451  00FF78  54                 	db	84	;'T'
  1452  00FF79  53                 	db	83	;'S'
  1453  00FF7A  54                 	db	84	;'T'
  1454  00FF7B  00                 	db	0
  1455  00FF7C                     STR_64:
  1456  00FF7C  53                 	db	83	;'S'
  1457  00FF7D  4F                 	db	79	;'O'
  1458  00FF7E  52                 	db	82	;'R'
  1459  00FF7F  54                 	db	84	;'T'
  1460  00FF80  49                 	db	73	;'I'
  1461  00FF81  4E                 	db	78	;'N'
  1462  00FF82  47                 	db	71	;'G'
  1463  00FF83  2E                 	db	46
  1464  00FF84  2E                 	db	46
  1465  00FF85  2E                 	db	46
  1466  00FF86  00                 	db	0
  1467  00FF87                     STR_84:
  1468  00FF87  54                 	db	84	;'T'
  1469  00FF88  53                 	db	83	;'S'
  1470  00FF89  54                 	db	84	;'T'
  1471  00FF8A  3A                 	db	58	;':'
  1472  00FF8B  20                 	db	32
  1473  00FF8C  43                 	db	67	;'C'
  1474  00FF8D  4F                 	db	79	;'O'
  1475  00FF8E  4E                 	db	78	;'N'
  1476  00FF8F  44                 	db	68	;'D'
  1477  00FF90  00                 	db	0
  1478  00FF91                     STR_88:
  1479  00FF91  41                 	db	65	;'A'
  1480  00FF92  43                 	db	67	;'C'
  1481  00FF93  54                 	db	84	;'T'
  1482  00FF94  55                 	db	85	;'U'
  1483  00FF95  41                 	db	65	;'A'
  1484  00FF96  54                 	db	84	;'T'
  1485  00FF97  4F                 	db	79	;'O'
  1486  00FF98  52                 	db	82	;'R'
  1487  00FF99  53                 	db	83	;'S'
  1488  00FF9A  00                 	db	0
  1489  00FF9B                     STR_22:
  1490  00FF9B  44                 	db	68	;'D'
  1491  00FF9C  55                 	db	85	;'U'
  1492  00FF9D  52                 	db	82	;'R'
  1493  00FF9E  41                 	db	65	;'A'
  1494  00FF9F  54                 	db	84	;'T'
  1495  00FFA0  49                 	db	73	;'I'
  1496  00FFA1  4F                 	db	79	;'O'
  1497  00FFA2  4E                 	db	78	;'N'
  1498  00FFA3  3A                 	db	58	;':'
  1499  00FFA4  00                 	db	0
  1500  00FFA5                     STR_86:
  1501  00FFA5  43                 	db	67	;'C'
  1502  00FFA6  4F                 	db	79	;'O'
  1503  00FFA7  4E                 	db	78	;'N'
  1504  00FFA8  44                 	db	68	;'D'
  1505  00FFA9  3A                 	db	58	;':'
  1506  00FFAA  20                 	db	32
  1507  00FFAB  25                 	db	37
  1508  00FFAC  64                 	db	100	;'d'
  1509  00FFAD  00                 	db	0
  1510  00FFAE                     STR_77:
  1511  00FFAE  53                 	db	83	;'S'
  1512  00FFAF  45                 	db	69	;'E'
  1513  00FFB0  4E                 	db	78	;'N'
  1514  00FFB1  53                 	db	83	;'S'
  1515  00FFB2  4F                 	db	79	;'O'
  1516  00FFB3  52                 	db	82	;'R'
  1517  00FFB4  53                 	db	83	;'S'
  1518  00FFB5  00                 	db	0
  1519  00FFB6                     STR_120:
  1520  00FFB6  28                 	db	40
  1521  00FFB7  6E                 	db	110	;'n'
  1522  00FFB8  75                 	db	117	;'u'
  1523  00FFB9  6C                 	db	108	;'l'
  1524  00FFBA  6C                 	db	108	;'l'
  1525  00FFBB  29                 	db	41
  1526  00FFBC  00                 	db	0
  1527  00FFBD                     STR_67:
  1528  00FFBD  46                 	db	70	;'F'
  1529  00FFBE  41                 	db	65	;'A'
  1530  00FFBF  49                 	db	73	;'I'
  1531  00FFC0  4C                 	db	76	;'L'
  1532  00FFC1  45                 	db	69	;'E'
  1533  00FFC2  44                 	db	68	;'D'
  1534  00FFC3  00                 	db	0
  1535  00FFC4                     STR_7:
  1536  00FFC4  53                 	db	83	;'S'
  1537  00FFC5  54                 	db	84	;'T'
  1538  00FFC6  41                 	db	65	;'A'
  1539  00FFC7  52                 	db	82	;'R'
  1540  00FFC8  54                 	db	84	;'T'
  1541  00FFC9  3A                 	db	58	;':'
  1542  00FFCA  00                 	db	0
  1543  00FFCB                     STR_9:
  1544  00FFCB  46                 	db	70	;'F'
  1545  00FFCC  45                 	db	69	;'E'
  1546  00FFCD  42                 	db	66	;'B'
  1547  00FFCE  00                 	db	0
  1548  00FFCF                     STR_19:
  1549  00FFCF  44                 	db	68	;'D'
  1550  00FFD0  45                 	db	69	;'E'
  1551  00FFD1  43                 	db	67	;'C'
  1552  00FFD2  00                 	db	0
  1553  00FFD3                     STR_15:
  1554  00FFD3  41                 	db	65	;'A'
  1555  00FFD4  55                 	db	85	;'U'
  1556  00FFD5  47                 	db	71	;'G'
  1557  00FFD6  00                 	db	0
  1558  00FFD7                     STR_14:
  1559  00FFD7  4A                 	db	74	;'J'
  1560  00FFD8  55                 	db	85	;'U'
  1561  00FFD9  4C                 	db	76	;'L'
  1562  00FFDA  00                 	db	0
  1563  00FFDB                     STR_8:
  1564  00FFDB  4A                 	db	74	;'J'
  1565  00FFDC  41                 	db	65	;'A'
  1566  00FFDD  4E                 	db	78	;'N'
  1567  00FFDE  00                 	db	0
  1568  00FFDF                     STR_13:
  1569  00FFDF  4A                 	db	74	;'J'
  1570  00FFE0  55                 	db	85	;'U'
  1571  00FFE1  4E                 	db	78	;'N'
  1572  00FFE2  00                 	db	0
  1573  00FFE3                     STR_16:
  1574  00FFE3  53                 	db	83	;'S'
  1575  00FFE4  45                 	db	69	;'E'
  1576  00FFE5  50                 	db	80	;'P'
  1577  00FFE6  00                 	db	0
  1578  00FFE7                     STR_10:
  1579  00FFE7  4D                 	db	77	;'M'
  1580  00FFE8  41                 	db	65	;'A'
  1581  00FFE9  52                 	db	82	;'R'
  1582  00FFEA  00                 	db	0
  1583  00FFEB                     STR_11:
  1584  00FFEB  41                 	db	65	;'A'
  1585  00FFEC  50                 	db	80	;'P'
  1586  00FFED  52                 	db	82	;'R'
  1587  00FFEE  00                 	db	0
  1588  00FFEF                     STR_20:
  1589  00FFEF  45                 	db	69	;'E'
  1590  00FFF0  52                 	db	82	;'R'
  1591  00FFF1  52                 	db	82	;'R'
  1592  00FFF2  00                 	db	0
  1593  00FFF3                     STR_17:
  1594  00FFF3  4F                 	db	79	;'O'
  1595  00FFF4  43                 	db	67	;'C'
  1596  00FFF5  54                 	db	84	;'T'
  1597  00FFF6  00                 	db	0
  1598  00FFF7                     STR_18:
  1599  00FFF7  4E                 	db	78	;'N'
  1600  00FFF8  4F                 	db	79	;'O'
  1601  00FFF9  56                 	db	86	;'V'
  1602  00FFFA  00                 	db	0
  1603  00FFFB                     STR_12:
  1604  00FFFB  4D                 	db	77	;'M'
  1605  00FFFC  41                 	db	65	;'A'
  1606  00FFFD  59                 	db	89	;'Y'
  1607  00FFFE  00                 	db	0
  1608  0000                     
  1609                           ; #config settings
  1610  00FFFF  00                 	db	0	; dummy byte at the end
  1611  0000                     
  1612                           	psect	cinit
  1613  0042A6                     __pcinit:
  1614                           	opt stack 0
  1615  0042A6                     start_initialization:
  1616                           	opt stack 0
  1617  0042A6                     __initialization:
  1618                           	opt stack 0
  1619                           
  1620                           ; Initialize objects allocated to BANK1 (8 bytes)
  1621                           ; load TBLPTR registers with __pidataBANK1
  1622  0042A6  0EE8               	movlw	low __pidataBANK1
  1623  0042A8  6EF6               	movwf	tblptrl,c
  1624  0042AA  0E49               	movlw	high __pidataBANK1
  1625  0042AC  6EF7               	movwf	tblptrh,c
  1626  0042AE  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1627  0042B0  6EF8               	movwf	tblptru,c
  1628  0042B2  EE01  F02F         	lfsr	0,__pdataBANK1
  1629  0042B6  EE10 F008          	lfsr	1,8
  1630  0042BA                     copy_data0:
  1631  0042BA  0009               	tblrd		*+
  1632  0042BC  CFF5 FFEE          	movff	tablat,postinc0
  1633  0042C0  50E5               	movf	postdec1,w,c
  1634  0042C2  50E1               	movf	fsr1l,w,c
  1635  0042C4  E1FA               	bnz	copy_data0
  1636                           
  1637                           ; Clear objects allocated to BANK1 (47 bytes)
  1638  0042C6  EE01  F000         	lfsr	0,__pbssBANK1
  1639  0042CA  0E2F               	movlw	47
  1640  0042CC                     clear_0:
  1641  0042CC  6AEE               	clrf	postinc0,c
  1642  0042CE  06E8               	decf	wreg,f,c
  1643  0042D0  E1FD               	bnz	clear_0
  1644                           
  1645                           ; Clear objects allocated to BANK0 (38 bytes)
  1646  0042D2  EE00  F0DA         	lfsr	0,__pbssBANK0
  1647  0042D6  0E26               	movlw	38
  1648  0042D8                     clear_1:
  1649  0042D8  6AEE               	clrf	postinc0,c
  1650  0042DA  06E8               	decf	wreg,f,c
  1651  0042DC  E1FD               	bnz	clear_1
  1652                           
  1653                           ; Clear objects allocated to COMRAM (35 bytes)
  1654  0042DE  EE00  F05B         	lfsr	0,__pbssCOMRAM
  1655  0042E2  0E23               	movlw	35
  1656  0042E4                     clear_2:
  1657  0042E4  6AEE               	clrf	postinc0,c
  1658  0042E6  06E8               	decf	wreg,f,c
  1659  0042E8  E1FD               	bnz	clear_2
  1660  0042EA                     end_of_initialization:
  1661                           	opt stack 0
  1662  0042EA                     __end_of__initialization:
  1663                           	opt stack 0
  1664  0042EA  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1665  0042EC  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1666  0042EE  0100               	movlb	0
  1667  0042F0  EF03  F01C         	goto	_main	;jump to C main() function
  1668                           tblptru	equ	0xFF8
  1669                           tblptrh	equ	0xFF7
  1670                           tblptrl	equ	0xFF6
  1671                           tablat	equ	0xFF5
  1672                           postinc0	equ	0xFEE
  1673                           wreg	equ	0xFE8
  1674                           postdec1	equ	0xFE5
  1675                           fsr1l	equ	0xFE1
  1676                           
  1677                           	psect	bssCOMRAM
  1678  00005B                     __pbssCOMRAM:
  1679                           	opt stack 0
  1680  00005B                     _back:
  1681                           	opt stack 0
  1682  00005B                     	ds	2
  1683  00005D                     _count_can_no_lab:
  1684                           	opt stack 0
  1685  00005D                     	ds	2
  1686  00005F                     _count_can_w_lab:
  1687                           	opt stack 0
  1688  00005F                     	ds	2
  1689  000061                     _count_pop_no_tab:
  1690                           	opt stack 0
  1691  000061                     	ds	2
  1692  000063                     _count_pop_w_tab:
  1693                           	opt stack 0
  1694  000063                     	ds	2
  1695  000065                     _debug:
  1696                           	opt stack 0
  1697  000065                     	ds	2
  1698  000067                     _down:
  1699                           	opt stack 0
  1700  000067                     	ds	2
  1701  000069                     _enter:
  1702                           	opt stack 0
  1703  000069                     	ds	2
  1704  00006B                     _f_ID_receive:
  1705                           	opt stack 0
  1706  00006B                     	ds	2
  1707  00006D                     _f_can_coming_to_ID:
  1708                           	opt stack 0
  1709  00006D                     	ds	2
  1710  00006F                     _f_can_coming_to_distribution:
  1711                           	opt stack 0
  1712  00006F                     	ds	2
  1713  000071                     _f_lastCan:
  1714                           	opt stack 0
  1715  000071                     	ds	2
  1716  000073                     _first:
  1717                           	opt stack 0
  1718  000073                     	ds	2
  1719  000075                     _firstboot:
  1720                           	opt stack 0
  1721  000075                     	ds	2
  1722  000077                     _up:
  1723                           	opt stack 0
  1724  000077                     	ds	2
  1725  000079                     _was_low_1:
  1726                           	opt stack 0
  1727  000079                     	ds	2
  1728  00007B                     _was_low_3:
  1729                           	opt stack 0
  1730  00007B                     	ds	2
  1731  00007D                     _input:
  1732                           	opt stack 0
  1733  00007D                     	ds	1
  1734                           tblptru	equ	0xFF8
  1735                           tblptrh	equ	0xFF7
  1736                           tblptrl	equ	0xFF6
  1737                           tablat	equ	0xFF5
  1738                           postinc0	equ	0xFEE
  1739                           wreg	equ	0xFE8
  1740                           postdec1	equ	0xFE5
  1741                           fsr1l	equ	0xFE1
  1742                           
  1743                           	psect	bssBANK0
  1744  0000DA                     __pbssBANK0:
  1745                           	opt stack 0
  1746  0000DA                     _IR_signal:
  1747                           	opt stack 0
  1748  0000DA                     	ds	2
  1749  0000DC                     _MAG_signal:
  1750                           	opt stack 0
  1751  0000DC                     	ds	2
  1752  0000DE                     _RTCflag:
  1753                           	opt stack 0
  1754  0000DE                     	ds	2
  1755  0000E0                     _cur_can:
  1756                           	opt stack 0
  1757  0000E0                     	ds	2
  1758  0000E2                     _cur_state:
  1759                           	opt stack 0
  1760  0000E2                     	ds	2
  1761  0000E4                     _f_loadingNewCan:
  1762                           	opt stack 0
  1763  0000E4                     	ds	2
  1764  0000E6                     _log:
  1765                           	opt stack 0
  1766  0000E6                     	ds	2
  1767  0000E8                     _log_completion:
  1768                           	opt stack 0
  1769  0000E8                     	ds	2
  1770  0000EA                     _log_count_can_no_lab:
  1771                           	opt stack 0
  1772  0000EA                     	ds	2
  1773  0000EC                     _log_count_can_w_lab:
  1774                           	opt stack 0
  1775  0000EC                     	ds	2
  1776  0000EE                     _log_count_pop_no_tab:
  1777                           	opt stack 0
  1778  0000EE                     	ds	2
  1779  0000F0                     _log_count_pop_w_tab:
  1780                           	opt stack 0
  1781  0000F0                     	ds	2
  1782  0000F2                     _log_count_total:
  1783                           	opt stack 0
  1784  0000F2                     	ds	2
  1785  0000F4                     _log_total_time:
  1786                           	opt stack 0
  1787  0000F4                     	ds	2
  1788  0000F6                     _logstate:
  1789                           	opt stack 0
  1790  0000F6                     	ds	2
  1791  0000F8                     _total_time:
  1792                           	opt stack 0
  1793  0000F8                     	ds	2
  1794  0000FA                     _var:
  1795                           	opt stack 0
  1796  0000FA                     	ds	2
  1797  0000FC                     _machine_state:
  1798                           	opt stack 0
  1799  0000FC                     	ds	1
  1800  0000FD                     _sel:
  1801                           	opt stack 0
  1802  0000FD                     	ds	1
  1803  0000FE                     _count_total:
  1804                           	opt stack 0
  1805  0000FE                     	ds	2
  1806                           tblptru	equ	0xFF8
  1807                           tblptrh	equ	0xFF7
  1808                           tblptrl	equ	0xFF6
  1809                           tablat	equ	0xFF5
  1810                           postinc0	equ	0xFEE
  1811                           wreg	equ	0xFE8
  1812                           postdec1	equ	0xFE5
  1813                           fsr1l	equ	0xFE1
  1814                           
  1815                           	psect	bssBANK1
  1816  000100                     __pbssBANK1:
  1817                           	opt stack 0
  1818  000100                     _log_startTime:
  1819                           	opt stack 0
  1820  000100                     	ds	14
  1821  00010E                     _startTime:
  1822                           	opt stack 0
  1823  00010E                     	ds	14
  1824  00011C                     _servoTimes:
  1825                           	opt stack 0
  1826  00011C                     	ds	8
  1827  000124                     _time:
  1828                           	opt stack 0
  1829  000124                     	ds	7
  1830  00012B                     _f_can_distributed:
  1831                           	opt stack 0
  1832  00012B                     	ds	2
  1833  00012D                     _i:
  1834                           	opt stack 0
  1835  00012D                     	ds	2
  1836                           tblptru	equ	0xFF8
  1837                           tblptrh	equ	0xFF7
  1838                           tblptrl	equ	0xFF6
  1839                           tablat	equ	0xFF5
  1840                           postinc0	equ	0xFEE
  1841                           wreg	equ	0xFE8
  1842                           postdec1	equ	0xFE5
  1843                           fsr1l	equ	0xFE1
  1844                           
  1845                           	psect	dataBANK1
  1846  00012F                     __pdataBANK1:
  1847                           	opt stack 0
  1848  00012F                     UI@F3225:
  1849                           	opt stack 0
  1850  00012F                     	ds	4
  1851  000133                     printRTC@F3216:
  1852                           	opt stack 0
  1853  000133                     	ds	4
  1854                           tblptru	equ	0xFF8
  1855                           tblptrh	equ	0xFF7
  1856                           tblptrl	equ	0xFF6
  1857                           tablat	equ	0xFF5
  1858                           postinc0	equ	0xFEE
  1859                           wreg	equ	0xFE8
  1860                           postdec1	equ	0xFE5
  1861                           fsr1l	equ	0xFE1
  1862                           
  1863                           	psect	cstackBANK0
  1864  000080                     __pcstackBANK0:
  1865                           	opt stack 0
  1866  000080                     ??_delay_ms:
  1867  000080                     ??_PortTests:
  1868  000080                     ??_isdigit:
  1869  000080                     ??_readADC:
  1870  000080                     ??_I2C_Master_Wait:
  1871  000080                     ?___wmul:
  1872                           	opt stack 0
  1873  000080                     ?___awmod:
  1874                           	opt stack 0
  1875  000080                     ?___lwdiv:
  1876                           	opt stack 0
  1877  000080                     ?___lldiv:
  1878                           	opt stack 0
  1879  000080                     lcdNibble@temp:
  1880                           	opt stack 0
  1881  000080                     initTime@m:
  1882                           	opt stack 0
  1883  000080                     updateServoPosition@time_us:
  1884                           	opt stack 0
  1885  000080                     EEPROM_read@address:
  1886                           	opt stack 0
  1887  000080                     ___wmul@multiplier:
  1888                           	opt stack 0
  1889  000080                     ___awmod@dividend:
  1890                           	opt stack 0
  1891  000080                     ___lwdiv@dividend:
  1892                           	opt stack 0
  1893  000080                     strcpy@to:
  1894                           	opt stack 0
  1895  000080                     ___lldiv@dividend:
  1896                           	opt stack 0
  1897                           
  1898                           ; 4 bytes @ 0x0
  1899  000080                     	ds	1
  1900  000081                     readADC@channel:
  1901                           	opt stack 0
  1902  000081                     I2C_Master_Read@a:
  1903                           	opt stack 0
  1904  000081                     lcdNibble@data:
  1905                           	opt stack 0
  1906  000081                     initTime@h:
  1907                           	opt stack 0
  1908  000081                     delay_ms@milliseconds:
  1909                           	opt stack 0
  1910  000081                     _isdigit$1958:
  1911                           	opt stack 0
  1912  000081                     I2C_Master_Write@d:
  1913                           	opt stack 0
  1914                           
  1915                           ; 2 bytes @ 0x1
  1916  000081                     	ds	1
  1917  000082                     ??_readIR:
  1918  000082                     ??_readMAG:
  1919  000082                     I2C_Master_Read@temp:
  1920                           	opt stack 0
  1921  000082                     lcdInst@data:
  1922                           	opt stack 0
  1923  000082                     putch@data:
  1924                           	opt stack 0
  1925  000082                     initTime@w:
  1926                           	opt stack 0
  1927  000082                     isdigit@c:
  1928                           	opt stack 0
  1929  000082                     updateServoPosition@timer:
  1930                           	opt stack 0
  1931  000082                     ___wmul@multiplicand:
  1932                           	opt stack 0
  1933  000082                     ___awmod@divisor:
  1934                           	opt stack 0
  1935  000082                     ___lwdiv@divisor:
  1936                           	opt stack 0
  1937  000082                     strcpy@from:
  1938                           	opt stack 0
  1939                           
  1940                           ; 2 bytes @ 0x2
  1941  000082                     	ds	1
  1942  000083                     ??_initLCD:
  1943  000083                     initTime@DD:
  1944                           	opt stack 0
  1945  000083                     getRTC@i:
  1946                           	opt stack 0
  1947                           
  1948                           ; 2 bytes @ 0x3
  1949  000083                     	ds	1
  1950  000084                     ??_updateServoPosition:
  1951  000084                     initTime@MM:
  1952                           	opt stack 0
  1953  000084                     ___awmod@counter:
  1954                           	opt stack 0
  1955  000084                     readIR@res:
  1956                           	opt stack 0
  1957  000084                     readMAG@res:
  1958                           	opt stack 0
  1959  000084                     ___wmul@product:
  1960                           	opt stack 0
  1961  000084                     ___lwdiv@quotient:
  1962                           	opt stack 0
  1963  000084                     strcpy@cp:
  1964                           	opt stack 0
  1965  000084                     ___lldiv@divisor:
  1966                           	opt stack 0
  1967                           
  1968                           ; 4 bytes @ 0x4
  1969  000084                     	ds	1
  1970  000085                     ??_initSortTimer:
  1971  000085                     initTime@YY:
  1972                           	opt stack 0
  1973  000085                     ___awmod@sign:
  1974                           	opt stack 0
  1975                           
  1976                           ; 1 bytes @ 0x5
  1977  000085                     	ds	1
  1978  000086                     ??_getIR:
  1979  000086                     ??_getMAG:
  1980  000086                     ?___awdiv:
  1981                           	opt stack 0
  1982  000086                     initTime@s:
  1983                           	opt stack 0
  1984  000086                     ___lwdiv@counter:
  1985                           	opt stack 0
  1986  000086                     updateServoPosition@my_time:
  1987                           	opt stack 0
  1988  000086                     ___awdiv@dividend:
  1989                           	opt stack 0
  1990                           
  1991                           ; 2 bytes @ 0x6
  1992  000086                     	ds	1
  1993  000087                     ?___lwmod:
  1994                           	opt stack 0
  1995  000087                     ___lwmod@dividend:
  1996                           	opt stack 0
  1997                           
  1998                           ; 2 bytes @ 0x7
  1999  000087                     	ds	1
  2000  000088                     ??_ID:
  2001  000088                     ??_Distribution:
  2002  000088                     ??_initServos:
  2003  000088                     initSortTimer@i:
  2004                           	opt stack 0
  2005  000088                     ___awdiv@divisor:
  2006                           	opt stack 0
  2007  000088                     ___lldiv@quotient:
  2008                           	opt stack 0
  2009                           
  2010                           ; 4 bytes @ 0x8
  2011  000088                     	ds	1
  2012  000089                     ___lwmod@divisor:
  2013                           	opt stack 0
  2014                           
  2015                           ; 2 bytes @ 0x9
  2016  000089                     	ds	1
  2017  00008A                     ___awdiv@counter:
  2018                           	opt stack 0
  2019  00008A                     ID@sensor_outputs:
  2020                           	opt stack 0
  2021                           
  2022                           ; 4 bytes @ 0xA
  2023  00008A                     	ds	1
  2024  00008B                     ___awdiv@sign:
  2025                           	opt stack 0
  2026  00008B                     ___lwmod@counter:
  2027                           	opt stack 0
  2028                           
  2029                           ; 1 bytes @ 0xB
  2030  00008B                     	ds	1
  2031  00008C                     ___lldiv@counter:
  2032                           	opt stack 0
  2033  00008C                     ___awdiv@quotient:
  2034                           	opt stack 0
  2035                           
  2036                           ; 2 bytes @ 0xC
  2037  00008C                     	ds	1
  2038  00008D                     I2C_Master_Init@c:
  2039                           	opt stack 0
  2040                           
  2041                           ; 4 bytes @ 0xD
  2042  00008D                     	ds	1
  2043  00008E                     ?_printf:
  2044                           	opt stack 0
  2045  00008E                     ID@i:
  2046                           	opt stack 0
  2047  00008E                     printf@f:
  2048                           	opt stack 0
  2049                           
  2050                           ; 2 bytes @ 0xE
  2051  00008E                     	ds	3
  2052  000091                     ??_I2C_Master_Init:
  2053                           
  2054                           ; 1 bytes @ 0x11
  2055  000091                     	ds	4
  2056  000095                     ??_loadRTC:
  2057                           
  2058                           ; 1 bytes @ 0x15
  2059  000095                     	ds	1
  2060  000096                     loadRTC@i:
  2061                           	opt stack 0
  2062                           
  2063                           ; 2 bytes @ 0x16
  2064  000096                     	ds	4
  2065  00009A                     ??_printf:
  2066                           
  2067                           ; 1 bytes @ 0x1A
  2068  00009A                     	ds	4
  2069  00009E                     printf@prec:
  2070                           	opt stack 0
  2071                           
  2072                           ; 1 bytes @ 0x1E
  2073  00009E                     	ds	1
  2074  00009F                     printf@cp:
  2075                           	opt stack 0
  2076                           
  2077                           ; 2 bytes @ 0x1F
  2078  00009F                     	ds	2
  2079  0000A1                     printf@ap:
  2080                           	opt stack 0
  2081                           
  2082                           ; 2 bytes @ 0x21
  2083  0000A1                     	ds	2
  2084  0000A3                     printf@len:
  2085                           	opt stack 0
  2086                           
  2087                           ; 2 bytes @ 0x23
  2088  0000A3                     	ds	2
  2089  0000A5                     printf@val:
  2090                           	opt stack 0
  2091                           
  2092                           ; 2 bytes @ 0x25
  2093  0000A5                     	ds	2
  2094  0000A7                     printf@flag:
  2095                           	opt stack 0
  2096                           
  2097                           ; 1 bytes @ 0x27
  2098  0000A7                     	ds	1
  2099  0000A8                     printf@c:
  2100                           	opt stack 0
  2101                           
  2102                           ; 1 bytes @ 0x28
  2103  0000A8                     	ds	1
  2104  0000A9                     printf@width:
  2105                           	opt stack 0
  2106                           
  2107                           ; 2 bytes @ 0x29
  2108  0000A9                     	ds	2
  2109  0000AB                     ??_printRTC:
  2110  0000AB                     ??_algorithmTest:
  2111  0000AB                     ??_sensorTest:
  2112  0000AB                     ??_actuatorTest:
  2113  0000AB                     ??_PortTestA5:
  2114  0000AB                     ??_SpeedTest:
  2115  0000AB                     ??_PusherTest:
  2116  0000AB                     ??_BothServos:
  2117  0000AB                     ??_BlockerTest:
  2118  0000AB                     EEPROM_write@address:
  2119                           	opt stack 0
  2120                           
  2121                           ; 2 bytes @ 0x2B
  2122  0000AB                     	ds	1
  2123  0000AC                     PusherTest@i:
  2124                           	opt stack 0
  2125  0000AC                     BlockerTest@i:
  2126                           	opt stack 0
  2127                           
  2128                           ; 2 bytes @ 0x2C
  2129  0000AC                     	ds	1
  2130  0000AD                     EEPROM_write@data:
  2131                           	opt stack 0
  2132  0000AD                     actuatorTest@i_1643:
  2133                           	opt stack 0
  2134  0000AD                     sensorTest@res:
  2135                           	opt stack 0
  2136                           
  2137                           ; 2 bytes @ 0x2D
  2138  0000AD                     	ds	1
  2139  0000AE                     ??_EEPROM_write:
  2140  0000AE                     actuatorTest@i_1650:
  2141                           	opt stack 0
  2142  0000AE                     PusherTest@i_1696:
  2143                           	opt stack 0
  2144  0000AE                     BlockerTest@flag:
  2145                           	opt stack 0
  2146  0000AE                     printRTC@INT_time:
  2147                           	opt stack 0
  2148                           
  2149                           ; 14 bytes @ 0x2E
  2150  0000AE                     	ds	1
  2151  0000AF                     EEPROM_write@i:
  2152                           	opt stack 0
  2153  0000AF                     actuatorTest@i_1651:
  2154                           	opt stack 0
  2155                           
  2156                           ; 1 bytes @ 0x2F
  2157  0000AF                     	ds	1
  2158  0000B0                     EEPROM_write@i_1329:
  2159                           	opt stack 0
  2160  0000B0                     actuatorTest@i_1653:
  2161                           	opt stack 0
  2162                           
  2163                           ; 1 bytes @ 0x30
  2164  0000B0                     	ds	1
  2165  0000B1                     ??_Loading:
  2166  0000B1                     logRun@num:
  2167                           	opt stack 0
  2168  0000B1                     actuatorTest@i_1654:
  2169                           	opt stack 0
  2170                           
  2171                           ; 1 bytes @ 0x31
  2172  0000B1                     	ds	1
  2173  0000B2                     logRun@byte1:
  2174                           	opt stack 0
  2175  0000B2                     actuatorTest@i_1656:
  2176                           	opt stack 0
  2177                           
  2178                           ; 1 bytes @ 0x32
  2179  0000B2                     	ds	1
  2180  0000B3                     logRun@byte2:
  2181                           	opt stack 0
  2182  0000B3                     actuatorTest@i_1657:
  2183                           	opt stack 0
  2184  0000B3                     Loading@addr:
  2185                           	opt stack 0
  2186                           
  2187                           ; 2 bytes @ 0x33
  2188  0000B3                     	ds	1
  2189  0000B4                     logRun@byte3:
  2190                           	opt stack 0
  2191  0000B4                     actuatorTest@i_1659:
  2192                           	opt stack 0
  2193                           
  2194                           ; 1 bytes @ 0x34
  2195  0000B4                     	ds	1
  2196  0000B5                     Loading@byte1:
  2197                           	opt stack 0
  2198  0000B5                     logRun@byte_i:
  2199                           	opt stack 0
  2200  0000B5                     actuatorTest@i_1660:
  2201                           	opt stack 0
  2202                           
  2203                           ; 1 bytes @ 0x35
  2204  0000B5                     	ds	1
  2205  0000B6                     logRun@byte11:
  2206                           	opt stack 0
  2207  0000B6                     actuatorTest@i_1662:
  2208                           	opt stack 0
  2209  0000B6                     Loading@i_1098:
  2210                           	opt stack 0
  2211                           
  2212                           ; 2 bytes @ 0x36
  2213  0000B6                     	ds	1
  2214  0000B7                     actuatorTest@i_1663:
  2215                           	opt stack 0
  2216  0000B7                     logRun@i:
  2217                           	opt stack 0
  2218                           
  2219                           ; 2 bytes @ 0x37
  2220  0000B7                     	ds	1
  2221  0000B8                     actuatorTest@i_1665:
  2222                           	opt stack 0
  2223  0000B8                     Loading@i:
  2224                           	opt stack 0
  2225                           
  2226                           ; 2 bytes @ 0x38
  2227  0000B8                     	ds	1
  2228  0000B9                     actuatorTest@i_1666:
  2229                           	opt stack 0
  2230  0000B9                     logRun@addr:
  2231                           	opt stack 0
  2232                           
  2233                           ; 2 bytes @ 0x39
  2234  0000B9                     	ds	1
  2235  0000BA                     actuatorTest@i_1669:
  2236                           	opt stack 0
  2237                           
  2238                           ; 1 bytes @ 0x3A
  2239  0000BA                     	ds	1
  2240  0000BB                     actuatorTest@i_1670:
  2241                           	opt stack 0
  2242                           
  2243                           ; 1 bytes @ 0x3B
  2244  0000BB                     	ds	1
  2245  0000BC                     actuatorTest@i_1672:
  2246                           	opt stack 0
  2247  0000BC                     printRTC@RTC_month:
  2248                           	opt stack 0
  2249                           
  2250                           ; 2 bytes @ 0x3C
  2251  0000BC                     	ds	1
  2252  0000BD                     actuatorTest@i_1673:
  2253                           	opt stack 0
  2254                           
  2255                           ; 1 bytes @ 0x3D
  2256  0000BD                     	ds	1
  2257  0000BE                     actuatorTest@i_1675:
  2258                           	opt stack 0
  2259  0000BE                     printRTC@month:
  2260                           	opt stack 0
  2261                           
  2262                           ; 4 bytes @ 0x3E
  2263  0000BE                     	ds	1
  2264  0000BF                     actuatorTest@i_1676:
  2265                           	opt stack 0
  2266                           
  2267                           ; 1 bytes @ 0x3F
  2268  0000BF                     	ds	1
  2269  0000C0                     actuatorTest@i_1679:
  2270                           	opt stack 0
  2271                           
  2272                           ; 1 bytes @ 0x40
  2273  0000C0                     	ds	1
  2274  0000C1                     actuatorTest@i_1680:
  2275                           	opt stack 0
  2276                           
  2277                           ; 1 bytes @ 0x41
  2278  0000C1                     	ds	1
  2279  0000C2                     actuatorTest@i_1682:
  2280                           	opt stack 0
  2281  0000C2                     printRTC@i:
  2282                           	opt stack 0
  2283                           
  2284                           ; 2 bytes @ 0x42
  2285  0000C2                     	ds	1
  2286  0000C3                     actuatorTest@i_1683:
  2287                           	opt stack 0
  2288                           
  2289                           ; 1 bytes @ 0x43
  2290  0000C3                     	ds	1
  2291  0000C4                     ??_UI:
  2292  0000C4                     actuatorTest@i:
  2293                           	opt stack 0
  2294                           
  2295                           ; 2 bytes @ 0x44
  2296  0000C4                     	ds	2
  2297  0000C6                     ??_Test:
  2298  0000C6                     _UI$2314:
  2299                           	opt stack 0
  2300                           
  2301                           ; 2 bytes @ 0x46
  2302  0000C6                     	ds	2
  2303  0000C8                     UI@i:
  2304                           	opt stack 0
  2305                           
  2306                           ; 1 bytes @ 0x48
  2307  0000C8                     	ds	1
  2308  0000C9                     UI@i_409:
  2309                           	opt stack 0
  2310                           
  2311                           ; 1 bytes @ 0x49
  2312  0000C9                     	ds	1
  2313  0000CA                     UI@i_412:
  2314                           	opt stack 0
  2315                           
  2316                           ; 1 bytes @ 0x4A
  2317  0000CA                     	ds	1
  2318  0000CB                     UI@i_413:
  2319                           	opt stack 0
  2320                           
  2321                           ; 1 bytes @ 0x4B
  2322  0000CB                     	ds	1
  2323  0000CC                     UI@i_431:
  2324                           	opt stack 0
  2325                           
  2326                           ; 1 bytes @ 0x4C
  2327  0000CC                     	ds	1
  2328  0000CD                     UI@i_432:
  2329                           	opt stack 0
  2330                           
  2331                           ; 1 bytes @ 0x4D
  2332  0000CD                     	ds	1
  2333  0000CE                     UI@i_435:
  2334                           	opt stack 0
  2335                           
  2336                           ; 1 bytes @ 0x4E
  2337  0000CE                     	ds	1
  2338  0000CF                     UI@i_436:
  2339                           	opt stack 0
  2340                           
  2341                           ; 1 bytes @ 0x4F
  2342  0000CF                     	ds	1
  2343  0000D0                     UI@i_439:
  2344                           	opt stack 0
  2345                           
  2346                           ; 1 bytes @ 0x50
  2347  0000D0                     	ds	1
  2348  0000D1                     UI@i_440:
  2349                           	opt stack 0
  2350                           
  2351                           ; 1 bytes @ 0x51
  2352  0000D1                     	ds	1
  2353  0000D2                     UI@i_443:
  2354                           	opt stack 0
  2355                           
  2356                           ; 1 bytes @ 0x52
  2357  0000D2                     	ds	1
  2358  0000D3                     UI@i_444:
  2359                           	opt stack 0
  2360                           
  2361                           ; 1 bytes @ 0x53
  2362  0000D3                     	ds	1
  2363  0000D4                     UI@i_447:
  2364                           	opt stack 0
  2365                           
  2366                           ; 1 bytes @ 0x54
  2367  0000D4                     	ds	1
  2368  0000D5                     UI@i_448:
  2369                           	opt stack 0
  2370                           
  2371                           ; 1 bytes @ 0x55
  2372  0000D5                     	ds	1
  2373  0000D6                     UI@month:
  2374                           	opt stack 0
  2375                           
  2376                           ; 4 bytes @ 0x56
  2377  0000D6                     	ds	4
  2378  0000DA                     tblptru	equ	0xFF8
  2379                           tblptrh	equ	0xFF7
  2380                           tblptrl	equ	0xFF6
  2381                           tablat	equ	0xFF5
  2382                           postinc0	equ	0xFEE
  2383                           wreg	equ	0xFE8
  2384                           postdec1	equ	0xFE5
  2385                           fsr1l	equ	0xFE1
  2386                           
  2387                           ; 1 bytes @ 0x5A
  2388                           
  2389                           	psect	cstackCOMRAM
  2390  000001                     __pcstackCOMRAM:
  2391                           	opt stack 0
  2392  000001                     ??i2_I2C_Master_Wait:
  2393  000001                     ??i2_isdigit:
  2394  000001                     ?i2___wmul:
  2395                           	opt stack 0
  2396  000001                     ?i2___lwmod:
  2397                           	opt stack 0
  2398  000001                     i2lcdNibble@temp:
  2399                           	opt stack 0
  2400  000001                     i2EEPROM_read@address:
  2401                           	opt stack 0
  2402  000001                     i2___wmul@multiplier:
  2403                           	opt stack 0
  2404  000001                     i2___lwmod@dividend:
  2405                           	opt stack 0
  2406  000001                     i2strcpy@to:
  2407                           	opt stack 0
  2408                           
  2409                           ; 2 bytes @ 0x0
  2410  000001                     	ds	1
  2411  000002                     i2I2C_Master_Read@a:
  2412                           	opt stack 0
  2413  000002                     i2lcdNibble@data:
  2414                           	opt stack 0
  2415  000002                     i2_isdigit$1958:
  2416                           	opt stack 0
  2417  000002                     i2I2C_Master_Write@d:
  2418                           	opt stack 0
  2419                           
  2420                           ; 2 bytes @ 0x1
  2421  000002                     	ds	1
  2422  000003                     i2I2C_Master_Read@temp:
  2423                           	opt stack 0
  2424  000003                     i2lcdInst@data:
  2425                           	opt stack 0
  2426  000003                     i2putch@data:
  2427                           	opt stack 0
  2428  000003                     i2isdigit@c:
  2429                           	opt stack 0
  2430  000003                     i2___wmul@multiplicand:
  2431                           	opt stack 0
  2432  000003                     i2___lwmod@divisor:
  2433                           	opt stack 0
  2434  000003                     i2strcpy@from:
  2435                           	opt stack 0
  2436                           
  2437                           ; 2 bytes @ 0x2
  2438  000003                     	ds	1
  2439  000004                     i2getRTC@i:
  2440                           	opt stack 0
  2441                           
  2442                           ; 2 bytes @ 0x3
  2443  000004                     	ds	1
  2444  000005                     i2___lwmod@counter:
  2445                           	opt stack 0
  2446  000005                     i2___wmul@product:
  2447                           	opt stack 0
  2448  000005                     i2strcpy@cp:
  2449                           	opt stack 0
  2450                           
  2451                           ; 2 bytes @ 0x4
  2452  000005                     	ds	1
  2453  000006                     ?i2___lwdiv:
  2454                           	opt stack 0
  2455  000006                     i2___lwdiv@dividend:
  2456                           	opt stack 0
  2457                           
  2458                           ; 2 bytes @ 0x5
  2459  000006                     	ds	1
  2460  000007                     retrieveLog@logNum:
  2461                           	opt stack 0
  2462                           
  2463                           ; 2 bytes @ 0x6
  2464  000007                     	ds	1
  2465  000008                     i2___lwdiv@divisor:
  2466                           	opt stack 0
  2467                           
  2468                           ; 2 bytes @ 0x7
  2469  000008                     	ds	1
  2470  000009                     ??_retrieveLog:
  2471                           
  2472                           ; 1 bytes @ 0x8
  2473  000009                     	ds	1
  2474  00000A                     i2___lwdiv@quotient:
  2475                           	opt stack 0
  2476                           
  2477                           ; 2 bytes @ 0x9
  2478  00000A                     	ds	1
  2479  00000B                     retrieveLog@byte1:
  2480                           	opt stack 0
  2481                           
  2482                           ; 1 bytes @ 0xA
  2483  00000B                     	ds	1
  2484  00000C                     retrieveLog@byte2:
  2485                           	opt stack 0
  2486  00000C                     i2___lwdiv@counter:
  2487                           	opt stack 0
  2488                           
  2489                           ; 1 bytes @ 0xB
  2490  00000C                     	ds	1
  2491  00000D                     ?i2_printf:
  2492                           	opt stack 0
  2493  00000D                     retrieveLog@byte3:
  2494                           	opt stack 0
  2495  00000D                     i2printf@f:
  2496                           	opt stack 0
  2497                           
  2498                           ; 2 bytes @ 0xC
  2499  00000D                     	ds	1
  2500  00000E                     retrieveLog@i:
  2501                           	opt stack 0
  2502                           
  2503                           ; 2 bytes @ 0xD
  2504  00000E                     	ds	2
  2505  000010                     retrieveLog@addr:
  2506                           	opt stack 0
  2507                           
  2508                           ; 2 bytes @ 0xF
  2509  000010                     	ds	2
  2510  000012                     dispLogs@myLog:
  2511                           	opt stack 0
  2512                           
  2513                           ; 2 bytes @ 0x11
  2514  000012                     	ds	2
  2515  000014                     
  2516                           ; 1 bytes @ 0x13
  2517  000014                     	ds	5
  2518  000019                     ??i2_printf:
  2519                           
  2520                           ; 1 bytes @ 0x18
  2521  000019                     	ds	4
  2522  00001D                     i2printf@prec:
  2523                           	opt stack 0
  2524                           
  2525                           ; 1 bytes @ 0x1C
  2526  00001D                     	ds	1
  2527  00001E                     i2printf@cp:
  2528                           	opt stack 0
  2529                           
  2530                           ; 2 bytes @ 0x1D
  2531  00001E                     	ds	2
  2532  000020                     i2printf@ap:
  2533                           	opt stack 0
  2534                           
  2535                           ; 2 bytes @ 0x1F
  2536  000020                     	ds	2
  2537  000022                     i2printf@len:
  2538                           	opt stack 0
  2539                           
  2540                           ; 2 bytes @ 0x21
  2541  000022                     	ds	2
  2542  000024                     i2printf@val:
  2543                           	opt stack 0
  2544                           
  2545                           ; 2 bytes @ 0x23
  2546  000024                     	ds	2
  2547  000026                     i2printf@flag:
  2548                           	opt stack 0
  2549                           
  2550                           ; 1 bytes @ 0x25
  2551  000026                     	ds	1
  2552  000027                     i2printf@c:
  2553                           	opt stack 0
  2554                           
  2555                           ; 1 bytes @ 0x26
  2556  000027                     	ds	1
  2557  000028                     i2printf@width:
  2558                           	opt stack 0
  2559                           
  2560                           ; 2 bytes @ 0x27
  2561  000028                     	ds	2
  2562  00002A                     ??_printSortTimer:
  2563  00002A                     ??i2_printRTC:
  2564  00002A                     ?_inputHandler:
  2565                           	opt stack 0
  2566                           
  2567                           ; 2 bytes @ 0x29
  2568  00002A                     	ds	2
  2569  00002C                     ??_inputHandler:
  2570                           
  2571                           ; 1 bytes @ 0x2B
  2572  00002C                     	ds	1
  2573  00002D                     printSortTimer@hour:
  2574                           	opt stack 0
  2575  00002D                     i2printRTC@INT_time:
  2576                           	opt stack 0
  2577                           
  2578                           ; 14 bytes @ 0x2C
  2579  00002D                     	ds	2
  2580  00002F                     printSortTimer@curTime:
  2581                           	opt stack 0
  2582                           
  2583                           ; 14 bytes @ 0x2E
  2584  00002F                     	ds	12
  2585  00003B                     i2printRTC@RTC_month:
  2586                           	opt stack 0
  2587                           
  2588                           ; 2 bytes @ 0x3A
  2589  00003B                     	ds	2
  2590  00003D                     printSortTimer@start_sec:
  2591                           	opt stack 0
  2592  00003D                     i2printRTC@month:
  2593                           	opt stack 0
  2594                           
  2595                           ; 4 bytes @ 0x3C
  2596  00003D                     	ds	2
  2597  00003F                     printSortTimer@cur_sec:
  2598                           	opt stack 0
  2599                           
  2600                           ; 2 bytes @ 0x3E
  2601  00003F                     	ds	2
  2602  000041                     printSortTimer@min:
  2603                           	opt stack 0
  2604  000041                     i2printRTC@i:
  2605                           	opt stack 0
  2606                           
  2607                           ; 2 bytes @ 0x40
  2608  000041                     	ds	2
  2609  000043                     ??_updateMenu:
  2610  000043                     printSortTimer@sec:
  2611                           	opt stack 0
  2612                           
  2613                           ; 2 bytes @ 0x42
  2614  000043                     	ds	2
  2615  000045                     _printSortTimer$2434:
  2616                           	opt stack 0
  2617                           
  2618                           ; 2 bytes @ 0x44
  2619  000045                     	ds	2
  2620  000047                     printSortTimer@timeDiff:
  2621                           	opt stack 0
  2622                           
  2623                           ; 2 bytes @ 0x46
  2624  000047                     	ds	2
  2625  000049                     printSortTimer@i:
  2626                           	opt stack 0
  2627                           
  2628                           ; 2 bytes @ 0x48
  2629  000049                     	ds	2
  2630  00004B                     ??_handler:
  2631                           
  2632                           ; 1 bytes @ 0x4A
  2633  00004B                     	ds	16
  2634                           tblptru	equ	0xFF8
  2635                           tblptrh	equ	0xFF7
  2636                           tblptrl	equ	0xFF6
  2637                           tablat	equ	0xFF5
  2638                           postinc0	equ	0xFEE
  2639                           wreg	equ	0xFE8
  2640                           postdec1	equ	0xFE5
  2641                           fsr1l	equ	0xFE1
  2642                           
  2643 ;;
  2644 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2645 ;;
  2646 ;; *************** function _main *****************
  2647 ;; Defined at:
  2648 ;;		line 19 in file "main.c"
  2649 ;; Parameters:    Size  Location     Type
  2650 ;;		None
  2651 ;; Auto vars:     Size  Location     Type
  2652 ;;		None
  2653 ;; Return value:  Size  Location     Type
  2654 ;;                  1    wreg      void 
  2655 ;; Registers used:
  2656 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2657 ;; Tracked objects:
  2658 ;;		On entry : 0/0
  2659 ;;		On exit  : 0/0
  2660 ;;		Unchanged: 0/0
  2661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2662 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2663 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2664 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2665 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2666 ;;Total ram usage:        0 bytes
  2667 ;; Hardware stack levels required when called:   13
  2668 ;; This function calls:
  2669 ;;		_I2C_Master_Init
  2670 ;;		_Test
  2671 ;;		_UI
  2672 ;;		_initLCD
  2673 ;;		_initTime
  2674 ;;		_initUI
  2675 ;;		_logRun
  2676 ;;		_machineConfig
  2677 ;;		_sort
  2678 ;;		_stopSignals
  2679 ;; This function is called by:
  2680 ;;		Startup code after reset
  2681 ;; This function uses a non-reentrant model
  2682 ;;
  2683                           
  2684                           	psect	text0
  2685  003806                     __ptext0:
  2686                           	opt stack 0
  2687  003806                     _main:
  2688                           	opt stack 18
  2689                           
  2690                           ;main.c: 20: machineConfig();
  2691                           
  2692                           ;incstack = 0
  2693  003806  EC4C  F020         	call	_machineConfig	;wreg free
  2694                           
  2695                           ;main.c: 21: initLCD();
  2696  00380A  ECC6  F021         	call	_initLCD	;wreg free
  2697                           
  2698                           ;main.c: 24: RTCflag = 0;
  2699  00380E  0E00               	movlw	0
  2700  003810  0100               	movlb	0	; () banked
  2701  003812  6FDF               	movwf	(_RTCflag+1)& (0+255),b
  2702  003814  0E00               	movlw	0
  2703  003816  6FDE               	movwf	_RTCflag& (0+255),b
  2704                           
  2705                           ;main.c: 25: if(RTCflag){
  2706  003818  0100               	movlb	0	; () banked
  2707  00381A  51DE               	movf	_RTCflag& (0+255),w,b
  2708  00381C  0100               	movlb	0	; () banked
  2709  00381E  11DF               	iorwf	(_RTCflag+1)& (0+255),w,b
  2710  003820  B4D8               	btfsc	status,2,c
  2711  003822  D016               	goto	l8332
  2712                           
  2713                           ; BSR set to: 0
  2714                           ;main.c: 26: initTime(0x42, 0x20, 0x15, 0x04, 0x15, 0x03, 0x17);
  2715  003824  0E20               	movlw	32
  2716  003826  0100               	movlb	0	; () banked
  2717  003828  6F80               	movwf	initTime@m& (0+255),b
  2718  00382A  0E15               	movlw	21
  2719  00382C  0100               	movlb	0	; () banked
  2720  00382E  6F81               	movwf	initTime@h& (0+255),b
  2721  003830  0E04               	movlw	4
  2722  003832  0100               	movlb	0	; () banked
  2723  003834  6F82               	movwf	initTime@w& (0+255),b
  2724  003836  0E15               	movlw	21
  2725  003838  0100               	movlb	0	; () banked
  2726  00383A  6F83               	movwf	initTime@DD& (0+255),b
  2727  00383C  0E03               	movlw	3
  2728  00383E  0100               	movlb	0	; () banked
  2729  003840  6F84               	movwf	initTime@MM& (0+255),b
  2730  003842  0E17               	movlw	23
  2731  003844  0100               	movlb	0	; () banked
  2732  003846  6F85               	movwf	initTime@YY& (0+255),b
  2733  003848  0E42               	movlw	66
  2734  00384A  EC79  F024         	call	_initTime
  2735                           
  2736                           ;main.c: 27: }
  2737  00384E  D00B               	goto	l8334
  2738  003850                     l8332:
  2739                           
  2740                           ;main.c: 28: else{
  2741                           ;main.c: 29: I2C_Master_Init(10000);
  2742  003850  0E10               	movlw	16
  2743  003852  0100               	movlb	0	; () banked
  2744  003854  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  2745  003856  0E27               	movlw	39
  2746  003858  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  2747  00385A  0E00               	movlw	0
  2748  00385C  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  2749  00385E  0E00               	movlw	0
  2750  003860  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  2751  003862  EC1C  F020         	call	_I2C_Master_Init	;wreg free
  2752  003866                     l8334:
  2753                           
  2754                           ;main.c: 30: }
  2755                           ;main.c: 32: initUI();
  2756  003866  EC82  F023         	call	_initUI	;wreg free
  2757                           
  2758                           ;main.c: 33: first = 1;
  2759  00386A  0E00               	movlw	0
  2760  00386C  6E74               	movwf	_first+1,c
  2761  00386E  0E01               	movlw	1
  2762  003870  6E73               	movwf	_first,c
  2763                           
  2764                           ;main.c: 44: switch(machine_state){
  2765                           
  2766                           ;main.c: 43: while(1){
  2767  003872  D017               	goto	l8356
  2768  003874                     l8338:
  2769                           
  2770                           ;main.c: 46: UI();
  2771  003874  EC65  F004         	call	_UI	;wreg free
  2772                           
  2773                           ;main.c: 47: break;
  2774  003878  D014               	goto	l8356
  2775  00387A                     l8340:
  2776                           
  2777                           ;main.c: 49: sort();
  2778  00387A  EC68  F024         	call	_sort	;wreg free
  2779                           
  2780                           ;main.c: 50: break;
  2781  00387E  D011               	goto	l8356
  2782  003880                     l8342:
  2783                           
  2784                           ;main.c: 52: stopSignals();
  2785  003880  ECA5  F024         	call	_stopSignals	;wreg free
  2786                           
  2787                           ;main.c: 53: logRun();
  2788  003884  EC17  F018         	call	_logRun	;wreg free
  2789                           
  2790                           ;main.c: 54: first = 1;
  2791  003888  0E00               	movlw	0
  2792  00388A  6E74               	movwf	_first+1,c
  2793  00388C  0E01               	movlw	1
  2794  00388E  6E73               	movwf	_first,c
  2795                           
  2796                           ;main.c: 55: UI();
  2797  003890  EC65  F004         	call	_UI	;wreg free
  2798                           
  2799                           ;main.c: 56: break;
  2800  003894  D006               	goto	l8356
  2801  003896                     l8350:
  2802                           
  2803                           ;main.c: 58: Test();
  2804  003896  ECD3  F019         	call	_Test	;wreg free
  2805                           
  2806                           ;main.c: 59: break;
  2807  00389A  D003               	goto	l8356
  2808  00389C                     l8352:
  2809                           
  2810                           ;main.c: 61: stopSignals();
  2811  00389C  ECA5  F024         	call	_stopSignals	;wreg free
  2812  0038A0                     l487:
  2813  0038A0  D7FF               	goto	l487
  2814  0038A2                     l8356:
  2815  0038A2  0100               	movlb	0	; () banked
  2816  0038A4  51FC               	movf	_machine_state& (0+255),w,b
  2817                           
  2818                           ; Switch size 1, requested type "space"
  2819                           ; Number of cases is 5, Range of values is 0 to 4
  2820                           ; switch strategies available:
  2821                           ; Name         Instructions Cycles
  2822                           ; simple_byte           16     9 (average)
  2823                           ;	Chosen strategy is simple_byte
  2824  0038A6  0A00               	xorlw	0	; case 0
  2825  0038A8  B4D8               	btfsc	status,2,c
  2826  0038AA  D7E4               	goto	l8338
  2827  0038AC  0A01               	xorlw	1	; case 1
  2828  0038AE  B4D8               	btfsc	status,2,c
  2829  0038B0  D7E4               	goto	l8340
  2830  0038B2  0A03               	xorlw	3	; case 2
  2831  0038B4  B4D8               	btfsc	status,2,c
  2832  0038B6  D7E4               	goto	l8342
  2833  0038B8  0A01               	xorlw	1	; case 3
  2834  0038BA  B4D8               	btfsc	status,2,c
  2835  0038BC  D7EC               	goto	l8350
  2836  0038BE  0A07               	xorlw	7	; case 4
  2837  0038C0  B4D8               	btfsc	status,2,c
  2838  0038C2  D7EC               	goto	l8352
  2839                           
  2840                           ; BSR set to: 0
  2841                           
  2842                           ; BSR set to: 0
  2843  0038C4  D7EE               	goto	l8356
  2844  0038C6                     __end_of_main:
  2845                           	opt stack 0
  2846                           tblptru	equ	0xFF8
  2847                           tblptrh	equ	0xFF7
  2848                           tblptrl	equ	0xFF6
  2849                           tablat	equ	0xFF5
  2850                           postinc0	equ	0xFEE
  2851                           wreg	equ	0xFE8
  2852                           postdec1	equ	0xFE5
  2853                           fsr1l	equ	0xFE1
  2854                           status	equ	0xFD8
  2855                           
  2856 ;; *************** function _stopSignals *****************
  2857 ;; Defined at:
  2858 ;;		line 70 in file "main.c"
  2859 ;; Parameters:    Size  Location     Type
  2860 ;;		None
  2861 ;; Auto vars:     Size  Location     Type
  2862 ;;		None
  2863 ;; Return value:  Size  Location     Type
  2864 ;;                  1    wreg      void 
  2865 ;; Registers used:
  2866 ;;		wreg, status,2
  2867 ;; Tracked objects:
  2868 ;;		On entry : 0/0
  2869 ;;		On exit  : 0/0
  2870 ;;		Unchanged: 0/0
  2871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2872 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2873 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2874 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2875 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2876 ;;Total ram usage:        0 bytes
  2877 ;; Hardware stack levels used:    1
  2878 ;; Hardware stack levels required when called:    7
  2879 ;; This function calls:
  2880 ;;		Nothing
  2881 ;; This function is called by:
  2882 ;;		_main
  2883 ;; This function uses a non-reentrant model
  2884 ;;
  2885                           
  2886                           	psect	text1
  2887  00494A                     __ptext1:
  2888                           	opt stack 0
  2889  00494A                     _stopSignals:
  2890                           	opt stack 23
  2891                           
  2892                           ;main.c: 71: LATA = 0x00;
  2893                           
  2894                           ; BSR set to: 0
  2895                           ;incstack = 0
  2896  00494A  0E00               	movlw	0
  2897  00494C  6E89               	movwf	3977,c	;volatile
  2898                           
  2899                           ;main.c: 72: LATB = 0x00;
  2900  00494E  0E00               	movlw	0
  2901  004950  6E8A               	movwf	3978,c	;volatile
  2902                           
  2903                           ;main.c: 73: LATC = 0x00;
  2904  004952  0E00               	movlw	0
  2905  004954  6E8B               	movwf	3979,c	;volatile
  2906                           
  2907                           ;main.c: 74: LATD = 0x00;
  2908  004956  0E00               	movlw	0
  2909  004958  6E8C               	movwf	3980,c	;volatile
  2910                           
  2911                           ;main.c: 75: LATE = 0x00;
  2912  00495A  0E00               	movlw	0
  2913  00495C  6E8D               	movwf	3981,c	;volatile
  2914  00495E  0012               	return		;funcret
  2915  004960                     __end_of_stopSignals:
  2916                           	opt stack 0
  2917                           tblptru	equ	0xFF8
  2918                           tblptrh	equ	0xFF7
  2919                           tblptrl	equ	0xFF6
  2920                           tablat	equ	0xFF5
  2921                           postinc0	equ	0xFEE
  2922                           wreg	equ	0xFE8
  2923                           postdec1	equ	0xFE5
  2924                           fsr1l	equ	0xFE1
  2925                           status	equ	0xFD8
  2926                           
  2927 ;; *************** function _sort *****************
  2928 ;; Defined at:
  2929 ;;		line 55 in file "sort.c"
  2930 ;; Parameters:    Size  Location     Type
  2931 ;;		None
  2932 ;; Auto vars:     Size  Location     Type
  2933 ;;		None
  2934 ;; Return value:  Size  Location     Type
  2935 ;;                  1    wreg      void 
  2936 ;; Registers used:
  2937 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2938 ;; Tracked objects:
  2939 ;;		On entry : 0/0
  2940 ;;		On exit  : 0/0
  2941 ;;		Unchanged: 0/0
  2942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2943 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2944 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2945 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2946 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2947 ;;Total ram usage:        0 bytes
  2948 ;; Hardware stack levels used:    1
  2949 ;; Hardware stack levels required when called:   12
  2950 ;; This function calls:
  2951 ;;		_Distribution
  2952 ;;		_ID
  2953 ;;		_Loading
  2954 ;; This function is called by:
  2955 ;;		_main
  2956 ;; This function uses a non-reentrant model
  2957 ;;
  2958                           
  2959                           	psect	text2
  2960  0048D0                     __ptext2:
  2961                           	opt stack 0
  2962  0048D0                     _sort:
  2963                           	opt stack 18
  2964                           
  2965                           ;sort.c: 56: if(machine_state == Sorting_state){
  2966                           
  2967                           ;incstack = 0
  2968  0048D0  0100               	movlb	0	; () banked
  2969  0048D2  05FC               	decf	_machine_state& (0+255),w,b
  2970  0048D4  B4D8               	btfsc	status,2,c
  2971                           
  2972                           ; BSR set to: 0
  2973                           ;sort.c: 57: Loading();
  2974  0048D6  EC92  F016         	call	_Loading	;wreg free
  2975                           
  2976                           ;sort.c: 58: }
  2977                           ;sort.c: 59: if(machine_state == Sorting_state){
  2978  0048DA  0100               	movlb	0	; () banked
  2979  0048DC  05FC               	decf	_machine_state& (0+255),w,b
  2980  0048DE  B4D8               	btfsc	status,2,c
  2981                           
  2982                           ; BSR set to: 0
  2983                           ;sort.c: 60: ID();
  2984  0048E0  EC48  F019         	call	_ID	;wreg free
  2985                           
  2986                           ;sort.c: 61: }
  2987                           ;sort.c: 62: if(machine_state == Sorting_state){
  2988  0048E4  0100               	movlb	0	; () banked
  2989  0048E6  05FC               	decf	_machine_state& (0+255),w,b
  2990  0048E8  A4D8               	btfss	status,2,c
  2991  0048EA  0012               	return	
  2992                           
  2993                           ; BSR set to: 0
  2994                           ;sort.c: 63: Distribution();
  2995  0048EC  ECAC  F013         	call	_Distribution	;wreg free
  2996  0048F0  0012               	return	
  2997  0048F2                     __end_of_sort:
  2998                           	opt stack 0
  2999                           tblptru	equ	0xFF8
  3000                           tblptrh	equ	0xFF7
  3001                           tblptrl	equ	0xFF6
  3002                           tablat	equ	0xFF5
  3003                           postinc0	equ	0xFEE
  3004                           wreg	equ	0xFE8
  3005                           postdec1	equ	0xFE5
  3006                           fsr1l	equ	0xFE1
  3007                           status	equ	0xFD8
  3008                           
  3009 ;; *************** function _Loading *****************
  3010 ;; Defined at:
  3011 ;;		line 67 in file "sort.c"
  3012 ;; Parameters:    Size  Location     Type
  3013 ;;		None
  3014 ;; Auto vars:     Size  Location     Type
  3015 ;;  i               2   54[BANK0 ] int 
  3016 ;;  i               2   56[BANK0 ] int 
  3017 ;;  addr            2   51[BANK0 ] unsigned short 
  3018 ;;  byte1           1   53[BANK0 ] unsigned char 
  3019 ;; Return value:  Size  Location     Type
  3020 ;;                  1    wreg      void 
  3021 ;; Registers used:
  3022 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3023 ;; Tracked objects:
  3024 ;;		On entry : 0/0
  3025 ;;		On exit  : 0/0
  3026 ;;		Unchanged: 0/0
  3027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3028 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3029 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3030 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3031 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3032 ;;Total ram usage:        9 bytes
  3033 ;; Hardware stack levels used:    1
  3034 ;; Hardware stack levels required when called:   11
  3035 ;; This function calls:
  3036 ;;		_EEPROM_read
  3037 ;;		_EEPROM_write
  3038 ;;		_delay_ms
  3039 ;;		_getIR
  3040 ;;		_initGlobalVars
  3041 ;;		_initServos
  3042 ;;		_initSortTimer
  3043 ;;		_lcdInst
  3044 ;; This function is called by:
  3045 ;;		_sort
  3046 ;; This function uses a non-reentrant model
  3047 ;;
  3048                           
  3049                           	psect	text3
  3050  002D24                     __ptext3:
  3051                           	opt stack 0
  3052  002D24                     _Loading:
  3053                           	opt stack 18
  3054                           
  3055                           ;sort.c: 68: if(first){
  3056                           
  3057                           ;incstack = 0
  3058  002D24  5073               	movf	_first,w,c
  3059  002D26  1074               	iorwf	_first+1,w,c
  3060  002D28  B4D8               	btfsc	status,2,c
  3061  002D2A  D074               	goto	l6572
  3062                           
  3063                           ;sort.c: 69: initGlobalVars();
  3064  002D2C  EC83  F01F         	call	_initGlobalVars	;wreg free
  3065                           
  3066                           ;sort.c: 70: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  3067  002D30  0E01               	movlw	1
  3068  002D32  ECD6  F024         	call	_lcdInst
  3069  002D36  0E68               	movlw	104
  3070  002D38  0100               	movlb	0	; () banked
  3071  002D3A  6FB1               	movwf	??_Loading& (0+255),b
  3072  002D3C  0EE4               	movlw	228
  3073  002D3E                     u7337:
  3074  002D3E  2EE8               	decfsz	wreg,f,c
  3075  002D40  D7FE               	bra	u7337
  3076  002D42  2FB1               	decfsz	??_Loading& (0+255),f,b
  3077  002D44  D7FC               	bra	u7337
  3078  002D46  F000               	nop	
  3079                           
  3080                           ;sort.c: 71: initSortTimer();
  3081  002D48  EC20  F01D         	call	_initSortTimer	;wreg free
  3082                           
  3083                           ;sort.c: 72: LATCbits.LATC5 = 1;
  3084  002D4C  8A8B               	bsf	3979,5,c	;volatile
  3085                           
  3086                           ;sort.c: 77: sel = EEPROM_read(0);
  3087  002D4E  0E00               	movlw	0
  3088  002D50  0100               	movlb	0	; () banked
  3089  002D52  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  3090  002D54  0E00               	movlw	0
  3091  002D56  6F80               	movwf	EEPROM_read@address& (0+255),b
  3092  002D58  EC99  F024         	call	_EEPROM_read	;wreg free
  3093  002D5C  0100               	movlb	0	; () banked
  3094  002D5E  6FFD               	movwf	_sel& (0+255),b
  3095                           
  3096                           ; BSR set to: 0
  3097                           ;sort.c: 78: unsigned short addr = 1 + 11 * sel;
  3098  002D60  0100               	movlb	0	; () banked
  3099  002D62  51FD               	movf	_sel& (0+255),w,b
  3100  002D64  0D0B               	mullw	11
  3101  002D66  0E01               	movlw	1
  3102  002D68  24F3               	addwf	prodl,w,c
  3103  002D6A  0100               	movlb	0	; () banked
  3104  002D6C  6FB3               	movwf	Loading@addr& (0+255),b
  3105  002D6E  0E00               	movlw	0
  3106  002D70  20F4               	addwfc	prodh,w,c
  3107  002D72  0100               	movlb	0	; () banked
  3108  002D74  6FB4               	movwf	(Loading@addr+1)& (0+255),b
  3109                           
  3110                           ; BSR set to: 0
  3111                           ;sort.c: 79: unsigned char byte1 = 0b01111111;
  3112  002D76  0E7F               	movlw	127
  3113  002D78  0100               	movlb	0	; () banked
  3114  002D7A  6FB5               	movwf	Loading@byte1& (0+255),b
  3115                           
  3116                           ; BSR set to: 0
  3117                           ;sort.c: 80: EEPROM_write(addr, byte1);
  3118  002D7C  C0B3  F0AB         	movff	Loading@addr,EEPROM_write@address
  3119  002D80  C0B4  F0AC         	movff	Loading@addr+1,EEPROM_write@address+1
  3120  002D84  C0B5  F0AD         	movff	Loading@byte1,EEPROM_write@data
  3121  002D88  EC5D  F01A         	call	_EEPROM_write	;wreg free
  3122                           
  3123                           ;sort.c: 83: LATAbits.LATA5 = 0;
  3124  002D8C  9A89               	bcf	3977,5,c	;volatile
  3125                           
  3126                           ;sort.c: 85: for(int i=0; i<46; i++){
  3127  002D8E  0E00               	movlw	0
  3128  002D90  0100               	movlb	0	; () banked
  3129  002D92  6FB9               	movwf	(Loading@i+1)& (0+255),b
  3130  002D94  0E00               	movlw	0
  3131  002D96  6FB8               	movwf	Loading@i& (0+255),b
  3132                           
  3133                           ; BSR set to: 0
  3134  002D98  0100               	movlb	0	; () banked
  3135  002D9A  BFB9               	btfsc	(Loading@i+1)& (0+255),7,b
  3136  002D9C  D008               	goto	l6560
  3137  002D9E  0100               	movlb	0	; () banked
  3138  002DA0  51B9               	movf	(Loading@i+1)& (0+255),w,b
  3139  002DA2  E126               	bnz	l730
  3140  002DA4  0E2E               	movlw	46
  3141  002DA6  0100               	movlb	0	; () banked
  3142  002DA8  5DB8               	subwf	Loading@i& (0+255),w,b
  3143  002DAA  B0D8               	btfsc	status,0,c
  3144  002DAC  D021               	goto	l730
  3145  002DAE                     l6560:
  3146                           
  3147                           ; BSR set to: 0
  3148                           ;sort.c: 86: LATAbits.LATA5 = !LATAbits.LATA5;
  3149  002DAE  BA89               	btfsc	3977,5,c	;volatile
  3150  002DB0  D004               	goto	u4960
  3151  002DB2  0100               	movlb	0	; () banked
  3152  002DB4  6BB1               	clrf	??_Loading& (0+255),b
  3153  002DB6  2BB1               	incf	??_Loading& (0+255),f,b
  3154  002DB8  D002               	goto	u4978
  3155  002DBA                     u4960:
  3156  002DBA  0100               	movlb	0	; () banked
  3157  002DBC  6BB1               	clrf	??_Loading& (0+255),b
  3158  002DBE                     u4978:
  3159  002DBE  0100               	movlb	0	; () banked
  3160  002DC0  3BB1               	swapf	??_Loading& (0+255),f,b
  3161  002DC2  47B1               	rlncf	??_Loading& (0+255),f,b
  3162  002DC4  5089               	movf	3977,w,c	;volatile
  3163  002DC6  0100               	movlb	0	; () banked
  3164  002DC8  19B1               	xorwf	??_Loading& (0+255),w,b
  3165  002DCA  0BDF               	andlw	-33
  3166  002DCC  19B1               	xorwf	??_Loading& (0+255),w,b
  3167  002DCE  6E89               	movwf	3977,c	;volatile
  3168                           
  3169                           ; BSR set to: 0
  3170                           ;sort.c: 87: delay_ms(45-i);
  3171  002DD0  0100               	movlb	0	; () banked
  3172  002DD2  51B8               	movf	Loading@i& (0+255),w,b
  3173  002DD4  0800               	sublw	0
  3174  002DD6  0F2D               	addlw	45
  3175  002DD8  EC08  F024         	call	_delay_ms
  3176  002DDC  0100               	movlb	0	; () banked
  3177  002DDE  4BB8               	infsnz	Loading@i& (0+255),f,b
  3178  002DE0  2BB9               	incf	(Loading@i+1)& (0+255),f,b
  3179                           
  3180                           ; BSR set to: 0
  3181  002DE2  0100               	movlb	0	; () banked
  3182  002DE4  BFB9               	btfsc	(Loading@i+1)& (0+255),7,b
  3183  002DE6  D7E3               	goto	l6560
  3184  002DE8  0100               	movlb	0	; () banked
  3185  002DEA  51B9               	movf	(Loading@i+1)& (0+255),w,b
  3186  002DEC  E101               	bnz	u4980
  3187  002DEE  D7DA               	goto	L1
  3188  002DF0                     u4980:
  3189  002DF0                     l730:
  3190                           
  3191                           ; BSR set to: 0
  3192                           ;sort.c: 88: }
  3193                           ;sort.c: 89: LATAbits.LATA5 = 1;
  3194  002DF0  8A89               	bsf	3977,5,c	;volatile
  3195                           
  3196                           ; BSR set to: 0
  3197                           ;sort.c: 92: initServos();
  3198  002DF2  ECA8  F020         	call	_initServos	;wreg free
  3199                           
  3200                           ;sort.c: 93: _delay((unsigned long)((5000)*(32000000/4000.0)));
  3201  002DF6  0ECB               	movlw	203
  3202  002DF8  0100               	movlb	0	; () banked
  3203  002DFA  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3204  002DFC  0EEC               	movlw	236
  3205  002DFE  0100               	movlb	0	; () banked
  3206  002E00  6FB1               	movwf	??_Loading& (0+255),b
  3207  002E02  0E84               	movlw	132
  3208  002E04                     u7347:
  3209  002E04  2EE8               	decfsz	wreg,f,c
  3210  002E06  D7FE               	bra	u7347
  3211  002E08  2FB1               	decfsz	??_Loading& (0+255),f,b
  3212  002E0A  D7FC               	bra	u7347
  3213  002E0C  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3214  002E0E  D7FA               	bra	u7347
  3215  002E10  F000               	nop	
  3216                           
  3217                           ;sort.c: 94: }
  3218  002E12  0012               	return	
  3219  002E14                     l6572:
  3220                           
  3221                           ;sort.c: 95: else{
  3222                           ;sort.c: 98: if(!f_loadingNewCan){
  3223  002E14  0100               	movlb	0	; () banked
  3224  002E16  51E4               	movf	_f_loadingNewCan& (0+255),w,b
  3225  002E18  0100               	movlb	0	; () banked
  3226  002E1A  11E5               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3227  002E1C  A4D8               	btfss	status,2,c
  3228  002E1E  D017               	goto	l6588
  3229                           
  3230                           ; BSR set to: 0
  3231                           ;sort.c: 100: getIR();
  3232  002E20  EC00  F021         	call	_getIR	;wreg free
  3233                           
  3234                           ;sort.c: 102: if(!f_loadingNewCan){
  3235  002E24  0100               	movlb	0	; () banked
  3236  002E26  51E4               	movf	_f_loadingNewCan& (0+255),w,b
  3237  002E28  0100               	movlb	0	; () banked
  3238  002E2A  11E5               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3239  002E2C  B4D8               	btfsc	status,2,c
  3240  002E2E  0012               	return	
  3241                           
  3242                           ; BSR set to: 0
  3243                           ;sort.c: 106: else{
  3244                           ;sort.c: 107: count_total++;
  3245                           
  3246                           ; BSR set to: 0
  3247                           
  3248                           ; BSR set to: 0
  3249                           ;sort.c: 104: }
  3250                           
  3251                           ; BSR set to: 0
  3252                           ;sort.c: 103: return;
  3253  002E30  0100               	movlb	0	; () banked
  3254  002E32  4BFE               	infsnz	_count_total& (0+255),f,b
  3255  002E34  2BFF               	incf	(_count_total+1)& (0+255),f,b
  3256                           
  3257                           ; BSR set to: 0
  3258                           ;sort.c: 108: if(count_total == 12){
  3259  002E36  0E0C               	movlw	12
  3260  002E38  0100               	movlb	0	; () banked
  3261  002E3A  19FE               	xorwf	_count_total& (0+255),w,b
  3262  002E3C  0100               	movlb	0	; () banked
  3263  002E3E  11FF               	iorwf	(_count_total+1)& (0+255),w,b
  3264  002E40  A4D8               	btfss	status,2,c
  3265  002E42  0012               	return	
  3266                           
  3267                           ; BSR set to: 0
  3268                           ;sort.c: 109: f_lastCan = 1;
  3269  002E44  0E00               	movlw	0
  3270  002E46  6E72               	movwf	_f_lastCan+1,c
  3271  002E48  0E01               	movlw	1
  3272  002E4A  6E71               	movwf	_f_lastCan,c
  3273                           
  3274                           ; BSR set to: 0
  3275                           ;sort.c: 110: }
  3276                           ;sort.c: 111: }
  3277                           ;sort.c: 112: }
  3278                           
  3279                           ; BSR set to: 0
  3280  002E4C  0012               	return	
  3281  002E4E                     l6588:
  3282                           
  3283                           ; BSR set to: 0
  3284                           ;sort.c: 115: else if(f_ID_receive){
  3285  002E4E  506B               	movf	_f_ID_receive,w,c
  3286  002E50  106C               	iorwf	_f_ID_receive+1,w,c
  3287  002E52  B4D8               	btfsc	status,2,c
  3288  002E54  0012               	return	
  3289                           
  3290                           ; BSR set to: 0
  3291                           ;sort.c: 116: f_loadingNewCan = 0;
  3292  002E56  0E00               	movlw	0
  3293  002E58  0100               	movlb	0	; () banked
  3294  002E5A  6FE5               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3295  002E5C  0E00               	movlw	0
  3296  002E5E  6FE4               	movwf	_f_loadingNewCan& (0+255),b
  3297                           
  3298                           ; BSR set to: 0
  3299                           ;sort.c: 117: _delay((unsigned long)((1500)*(32000000/4000.0)));
  3300  002E60  0E3D               	movlw	61
  3301  002E62  0100               	movlb	0	; () banked
  3302  002E64  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3303  002E66  0EE1               	movlw	225
  3304  002E68  0100               	movlb	0	; () banked
  3305  002E6A  6FB1               	movwf	??_Loading& (0+255),b
  3306  002E6C  0E3F               	movlw	63
  3307  002E6E                     u7357:
  3308  002E6E  2EE8               	decfsz	wreg,f,c
  3309  002E70  D7FE               	bra	u7357
  3310  002E72  2FB1               	decfsz	??_Loading& (0+255),f,b
  3311  002E74  D7FC               	bra	u7357
  3312  002E76  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3313  002E78  D7FA               	bra	u7357
  3314  002E7A  D000               	nop2	
  3315                           
  3316                           ;sort.c: 119: for(int i = 0; i<3000; i++){
  3317  002E7C  0E00               	movlw	0
  3318  002E7E  0100               	movlb	0	; () banked
  3319  002E80  6FB7               	movwf	(Loading@i_1098+1)& (0+255),b
  3320  002E82  0E00               	movlw	0
  3321  002E84  6FB6               	movwf	Loading@i_1098& (0+255),b
  3322  002E86                     l6596:
  3323                           
  3324                           ; BSR set to: 0
  3325  002E86  0100               	movlb	0	; () banked
  3326  002E88  BFB7               	btfsc	(Loading@i_1098+1)& (0+255),7,b
  3327  002E8A  D008               	goto	l739
  3328  002E8C  0EB8               	movlw	184
  3329  002E8E  0100               	movlb	0	; () banked
  3330  002E90  5DB6               	subwf	Loading@i_1098& (0+255),w,b
  3331  002E92  0E0B               	movlw	11
  3332  002E94  0100               	movlb	0	; () banked
  3333  002E96  59B7               	subwfb	(Loading@i_1098+1)& (0+255),w,b
  3334  002E98  B0D8               	btfsc	status,0,c
  3335  002E9A  D00D               	goto	l6606
  3336  002E9C                     l739:
  3337                           
  3338                           ; BSR set to: 0
  3339                           ;sort.c: 120: LATAbits.LATA4 = 1;
  3340  002E9C  8889               	bsf	3977,4,c	;volatile
  3341                           
  3342                           ; BSR set to: 0
  3343                           ;sort.c: 121: _delay((unsigned long)((70)*(32000000/4000000.0)));
  3344  002E9E  0EBA               	movlw	186
  3345  002EA0                     u7367:
  3346  002EA0  2EE8               	decfsz	wreg,f,c
  3347  002EA2  D7FE               	bra	u7367
  3348  002EA4  D000               	nop2	
  3349                           
  3350                           ;sort.c: 122: LATAbits.LATA4 = 0;
  3351  002EA6  9889               	bcf	3977,4,c	;volatile
  3352                           
  3353                           ;sort.c: 123: _delay((unsigned long)((30)*(32000000/4000000.0)));
  3354  002EA8  0E50               	movlw	80
  3355  002EAA                     u7377:
  3356  002EAA  2EE8               	decfsz	wreg,f,c
  3357  002EAC  D7FE               	bra	u7377
  3358  002EAE  0100               	movlb	0	; () banked
  3359  002EB0  4BB6               	infsnz	Loading@i_1098& (0+255),f,b
  3360  002EB2  2BB7               	incf	(Loading@i_1098+1)& (0+255),f,b
  3361  002EB4  D7E8               	goto	l6596
  3362  002EB6                     l6606:
  3363                           
  3364                           ; BSR set to: 0
  3365                           ;sort.c: 124: }
  3366                           ;sort.c: 126: f_can_coming_to_ID = 1;
  3367  002EB6  0E00               	movlw	0
  3368  002EB8  6E6E               	movwf	_f_can_coming_to_ID+1,c
  3369  002EBA  0E01               	movlw	1
  3370  002EBC  6E6D               	movwf	_f_can_coming_to_ID,c
  3371                           
  3372                           ; BSR set to: 0
  3373                           
  3374                           ; BSR set to: 0
  3375  002EBE  0012               	return	
  3376  002EC0                     __end_of_Loading:
  3377                           	opt stack 0
  3378                           tblptru	equ	0xFF8
  3379                           tblptrh	equ	0xFF7
  3380                           tblptrl	equ	0xFF6
  3381                           tablat	equ	0xFF5
  3382                           prodh	equ	0xFF4
  3383                           prodl	equ	0xFF3
  3384                           postinc0	equ	0xFEE
  3385                           wreg	equ	0xFE8
  3386                           postdec1	equ	0xFE5
  3387                           fsr1l	equ	0xFE1
  3388                           status	equ	0xFD8
  3389                           
  3390 ;; *************** function _initSortTimer *****************
  3391 ;; Defined at:
  3392 ;;		line 280 in file "sort.c"
  3393 ;; Parameters:    Size  Location     Type
  3394 ;;		None
  3395 ;; Auto vars:     Size  Location     Type
  3396 ;;  i               2    8[BANK0 ] int 
  3397 ;; Return value:  Size  Location     Type
  3398 ;;                  1    wreg      void 
  3399 ;; Registers used:
  3400 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3401 ;; Tracked objects:
  3402 ;;		On entry : 0/0
  3403 ;;		On exit  : 0/0
  3404 ;;		Unchanged: 0/0
  3405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3406 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3407 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3408 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3409 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3410 ;;Total ram usage:        5 bytes
  3411 ;; Hardware stack levels used:    1
  3412 ;; Hardware stack levels required when called:   10
  3413 ;; This function calls:
  3414 ;;		_getRTC
  3415 ;; This function is called by:
  3416 ;;		_Loading
  3417 ;; This function uses a non-reentrant model
  3418 ;;
  3419                           
  3420                           	psect	text4
  3421  003A40                     __ptext4:
  3422                           	opt stack 0
  3423  003A40                     _initSortTimer:
  3424                           	opt stack 18
  3425                           
  3426                           ;sort.c: 282: getRTC();
  3427                           
  3428                           ;incstack = 0
  3429  003A40  EC0C  F01E         	call	_getRTC	;wreg free
  3430                           
  3431                           ;sort.c: 283: for(int i = 0; i < 7; i++){
  3432  003A44  0E00               	movlw	0
  3433  003A46  0100               	movlb	0	; () banked
  3434  003A48  6F89               	movwf	(initSortTimer@i+1)& (0+255),b
  3435  003A4A  0E00               	movlw	0
  3436  003A4C  6F88               	movwf	initSortTimer@i& (0+255),b
  3437  003A4E                     l6156:
  3438                           
  3439                           ; BSR set to: 0
  3440  003A4E  0100               	movlb	0	; () banked
  3441  003A50  BF89               	btfsc	(initSortTimer@i+1)& (0+255),7,b
  3442  003A52  D008               	goto	l6160
  3443  003A54  0100               	movlb	0	; () banked
  3444  003A56  5189               	movf	(initSortTimer@i+1)& (0+255),w,b
  3445  003A58  E140               	bnz	l6166
  3446  003A5A  0E07               	movlw	7
  3447  003A5C  0100               	movlb	0	; () banked
  3448  003A5E  5D88               	subwf	initSortTimer@i& (0+255),w,b
  3449  003A60  B0D8               	btfsc	status,0,c
  3450  003A62  D03B               	goto	l6166
  3451  003A64                     l6160:
  3452                           
  3453                           ; BSR set to: 0
  3454                           ;sort.c: 284: startTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  3455  003A64  0E24               	movlw	low _time
  3456  003A66  0100               	movlb	0	; () banked
  3457  003A68  2588               	addwf	initSortTimer@i& (0+255),w,b
  3458  003A6A  6ED9               	movwf	fsr2l,c
  3459  003A6C  0E01               	movlw	high _time
  3460  003A6E  0100               	movlb	0	; () banked
  3461  003A70  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  3462  003A72  6EDA               	movwf	fsr2h,c
  3463  003A74  50DF               	movf	indf2,w,c
  3464  003A76  0100               	movlb	0	; () banked
  3465  003A78  6F85               	movwf	??_initSortTimer& (0+255),b
  3466  003A7A  0100               	movlb	0	; () banked
  3467  003A7C  3B85               	swapf	??_initSortTimer& (0+255),f,b
  3468  003A7E  0E0F               	movlw	15
  3469  003A80  1785               	andwf	??_initSortTimer& (0+255),f,b
  3470  003A82  0E0F               	movlw	15
  3471  003A84  0100               	movlb	0	; () banked
  3472  003A86  1785               	andwf	??_initSortTimer& (0+255),f,b
  3473  003A88  0100               	movlb	0	; () banked
  3474  003A8A  5185               	movf	??_initSortTimer& (0+255),w,b
  3475  003A8C  0D0A               	mullw	10
  3476  003A8E  0E24               	movlw	low _time
  3477  003A90  0100               	movlb	0	; () banked
  3478  003A92  2588               	addwf	initSortTimer@i& (0+255),w,b
  3479  003A94  6ED9               	movwf	fsr2l,c
  3480  003A96  0E01               	movlw	high _time
  3481  003A98  0100               	movlb	0	; () banked
  3482  003A9A  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  3483  003A9C  6EDA               	movwf	fsr2h,c
  3484  003A9E  50DF               	movf	indf2,w,c
  3485  003AA0  0B0F               	andlw	15
  3486  003AA2  0100               	movlb	0	; () banked
  3487  003AA4  6F86               	movwf	(??_initSortTimer+1)& (0+255),b
  3488  003AA6  6B87               	clrf	(??_initSortTimer+2)& (0+255),b
  3489  003AA8  50F3               	movf	prodl,w,c
  3490  003AAA  0100               	movlb	0	; () banked
  3491  003AAC  2786               	addwf	(??_initSortTimer+1)& (0+255),f,b
  3492  003AAE  50F4               	movf	prodh,w,c
  3493  003AB0  0100               	movlb	0	; () banked
  3494  003AB2  2387               	addwfc	(??_initSortTimer+2)& (0+255),f,b
  3495  003AB4  90D8               	bcf	status,0,c
  3496  003AB6  0100               	movlb	0	; () banked
  3497  003AB8  3588               	rlcf	initSortTimer@i& (0+255),w,b
  3498  003ABA  6ED9               	movwf	fsr2l,c
  3499  003ABC  0100               	movlb	0	; () banked
  3500  003ABE  3589               	rlcf	(initSortTimer@i+1)& (0+255),w,b
  3501  003AC0  6EDA               	movwf	fsr2h,c
  3502  003AC2  0E0E               	movlw	low _startTime
  3503  003AC4  26D9               	addwf	fsr2l,f,c
  3504  003AC6  0E01               	movlw	high _startTime
  3505  003AC8  22DA               	addwfc	fsr2h,f,c
  3506  003ACA  C086  FFDE         	movff	??_initSortTimer+1,postinc2
  3507  003ACE  C087  FFDD         	movff	??_initSortTimer+2,postdec2
  3508                           
  3509                           ; BSR set to: 0
  3510  003AD2  0100               	movlb	0	; () banked
  3511  003AD4  4B88               	infsnz	initSortTimer@i& (0+255),f,b
  3512  003AD6  2B89               	incf	(initSortTimer@i+1)& (0+255),f,b
  3513  003AD8  D7BA               	goto	l6156
  3514  003ADA                     l6166:
  3515                           
  3516                           ; BSR set to: 0
  3517                           ;sort.c: 285: }
  3518                           ;sort.c: 287: T0CON = 0b00010111;
  3519  003ADA  0E17               	movlw	23
  3520  003ADC  6ED5               	movwf	4053,c	;volatile
  3521                           
  3522                           ;sort.c: 296: TMR0H = 0b10000101;
  3523  003ADE  0E85               	movlw	133
  3524  003AE0  6ED7               	movwf	4055,c	;volatile
  3525                           
  3526                           ;sort.c: 297: TMR0L = 0b11101110;
  3527  003AE2  0EEE               	movlw	238
  3528  003AE4  6ED6               	movwf	4054,c	;volatile
  3529                           
  3530                           ; BSR set to: 0
  3531                           ;sort.c: 298: TMR0ON = 1;
  3532  003AE6  8ED5               	bsf	4053,7,c	;volatile
  3533                           
  3534                           ; BSR set to: 0
  3535  003AE8  0012               	return		;funcret
  3536  003AEA                     __end_of_initSortTimer:
  3537                           	opt stack 0
  3538                           tblptru	equ	0xFF8
  3539                           tblptrh	equ	0xFF7
  3540                           tblptrl	equ	0xFF6
  3541                           tablat	equ	0xFF5
  3542                           prodh	equ	0xFF4
  3543                           prodl	equ	0xFF3
  3544                           postinc0	equ	0xFEE
  3545                           wreg	equ	0xFE8
  3546                           postdec1	equ	0xFE5
  3547                           fsr1l	equ	0xFE1
  3548                           indf2	equ	0xFDF
  3549                           postinc2	equ	0xFDE
  3550                           postdec2	equ	0xFDD
  3551                           fsr2h	equ	0xFDA
  3552                           fsr2l	equ	0xFD9
  3553                           status	equ	0xFD8
  3554                           
  3555 ;; *************** function _initGlobalVars *****************
  3556 ;; Defined at:
  3557 ;;		line 261 in file "sort.c"
  3558 ;; Parameters:    Size  Location     Type
  3559 ;;		None
  3560 ;; Auto vars:     Size  Location     Type
  3561 ;;		None
  3562 ;; Return value:  Size  Location     Type
  3563 ;;                  1    wreg      void 
  3564 ;; Registers used:
  3565 ;;		wreg, status,2
  3566 ;; Tracked objects:
  3567 ;;		On entry : 0/0
  3568 ;;		On exit  : 0/0
  3569 ;;		Unchanged: 0/0
  3570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3571 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3572 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3573 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3574 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3575 ;;Total ram usage:        0 bytes
  3576 ;; Hardware stack levels used:    1
  3577 ;; Hardware stack levels required when called:    7
  3578 ;; This function calls:
  3579 ;;		Nothing
  3580 ;; This function is called by:
  3581 ;;		_Loading
  3582 ;; This function uses a non-reentrant model
  3583 ;;
  3584                           
  3585                           	psect	text5
  3586  003F06                     __ptext5:
  3587                           	opt stack 0
  3588  003F06                     _initGlobalVars:
  3589                           	opt stack 21
  3590                           
  3591                           ;sort.c: 263: first = 0;
  3592                           
  3593                           ; BSR set to: 0
  3594                           ;incstack = 0
  3595  003F06  0E00               	movlw	0
  3596  003F08  6E74               	movwf	_first+1,c
  3597  003F0A  0E00               	movlw	0
  3598  003F0C  6E73               	movwf	_first,c
  3599                           
  3600                           ;sort.c: 266: f_loadingNewCan = 0;
  3601  003F0E  0E00               	movlw	0
  3602  003F10  0100               	movlb	0	; () banked
  3603  003F12  6FE5               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3604  003F14  0E00               	movlw	0
  3605  003F16  6FE4               	movwf	_f_loadingNewCan& (0+255),b
  3606                           
  3607                           ;sort.c: 267: f_lastCan = 0;
  3608  003F18  0E00               	movlw	0
  3609  003F1A  6E72               	movwf	_f_lastCan+1,c
  3610  003F1C  0E00               	movlw	0
  3611  003F1E  6E71               	movwf	_f_lastCan,c
  3612                           
  3613                           ;sort.c: 268: f_ID_receive = 1;
  3614  003F20  0E00               	movlw	0
  3615  003F22  6E6C               	movwf	_f_ID_receive+1,c
  3616  003F24  0E01               	movlw	1
  3617  003F26  6E6B               	movwf	_f_ID_receive,c
  3618                           
  3619                           ;sort.c: 269: f_can_coming_to_ID = 0;
  3620  003F28  0E00               	movlw	0
  3621  003F2A  6E6E               	movwf	_f_can_coming_to_ID+1,c
  3622  003F2C  0E00               	movlw	0
  3623  003F2E  6E6D               	movwf	_f_can_coming_to_ID,c
  3624                           
  3625                           ;sort.c: 270: f_can_coming_to_distribution = 0;
  3626  003F30  0E00               	movlw	0
  3627  003F32  6E70               	movwf	_f_can_coming_to_distribution+1,c
  3628  003F34  0E00               	movlw	0
  3629  003F36  6E6F               	movwf	_f_can_coming_to_distribution,c
  3630                           
  3631                           ;sort.c: 271: f_can_distributed = 0;
  3632  003F38  0E00               	movlw	0
  3633  003F3A  0101               	movlb	1	; () banked
  3634  003F3C  6F2C               	movwf	(_f_can_distributed+1)& (0+255),b
  3635  003F3E  0E00               	movlw	0
  3636  003F40  6F2B               	movwf	_f_can_distributed& (0+255),b
  3637                           
  3638                           ;sort.c: 274: count_total = 0;
  3639  003F42  0E00               	movlw	0
  3640  003F44  0100               	movlb	0	; () banked
  3641  003F46  6FFF               	movwf	(_count_total+1)& (0+255),b
  3642  003F48  0E00               	movlw	0
  3643  003F4A  6FFE               	movwf	_count_total& (0+255),b
  3644                           
  3645                           ;sort.c: 275: count_pop_no_tab = 0;
  3646  003F4C  0E00               	movlw	0
  3647  003F4E  6E62               	movwf	_count_pop_no_tab+1,c
  3648  003F50  0E00               	movlw	0
  3649  003F52  6E61               	movwf	_count_pop_no_tab,c
  3650                           
  3651                           ;sort.c: 276: count_pop_w_tab = 0;
  3652  003F54  0E00               	movlw	0
  3653  003F56  6E64               	movwf	_count_pop_w_tab+1,c
  3654  003F58  0E00               	movlw	0
  3655  003F5A  6E63               	movwf	_count_pop_w_tab,c
  3656                           
  3657                           ;sort.c: 277: count_can_w_lab = 0;
  3658  003F5C  0E00               	movlw	0
  3659  003F5E  6E60               	movwf	_count_can_w_lab+1,c
  3660  003F60  0E00               	movlw	0
  3661  003F62  6E5F               	movwf	_count_can_w_lab,c
  3662                           
  3663                           ;sort.c: 278: count_can_no_lab = 0;
  3664  003F64  0E00               	movlw	0
  3665  003F66  6E5E               	movwf	_count_can_no_lab+1,c
  3666  003F68  0E00               	movlw	0
  3667  003F6A  6E5D               	movwf	_count_can_no_lab,c
  3668                           
  3669                           ; BSR set to: 0
  3670  003F6C  0012               	return		;funcret
  3671  003F6E                     __end_of_initGlobalVars:
  3672                           	opt stack 0
  3673                           tblptru	equ	0xFF8
  3674                           tblptrh	equ	0xFF7
  3675                           tblptrl	equ	0xFF6
  3676                           tablat	equ	0xFF5
  3677                           prodh	equ	0xFF4
  3678                           prodl	equ	0xFF3
  3679                           postinc0	equ	0xFEE
  3680                           wreg	equ	0xFE8
  3681                           postdec1	equ	0xFE5
  3682                           fsr1l	equ	0xFE1
  3683                           indf2	equ	0xFDF
  3684                           postinc2	equ	0xFDE
  3685                           postdec2	equ	0xFDD
  3686                           fsr2h	equ	0xFDA
  3687                           fsr2l	equ	0xFD9
  3688                           status	equ	0xFD8
  3689                           
  3690 ;; *************** function _getIR *****************
  3691 ;; Defined at:
  3692 ;;		line 338 in file "sort.c"
  3693 ;; Parameters:    Size  Location     Type
  3694 ;;		None
  3695 ;; Auto vars:     Size  Location     Type
  3696 ;;		None
  3697 ;; Return value:  Size  Location     Type
  3698 ;;                  1    wreg      void 
  3699 ;; Registers used:
  3700 ;;		wreg, status,2, status,0, cstack
  3701 ;; Tracked objects:
  3702 ;;		On entry : 0/0
  3703 ;;		On exit  : 0/0
  3704 ;;		Unchanged: 0/0
  3705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3706 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3707 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3708 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3709 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3710 ;;Total ram usage:        2 bytes
  3711 ;; Hardware stack levels used:    1
  3712 ;; Hardware stack levels required when called:    9
  3713 ;; This function calls:
  3714 ;;		_readIR
  3715 ;; This function is called by:
  3716 ;;		_Loading
  3717 ;; This function uses a non-reentrant model
  3718 ;;
  3719                           
  3720                           	psect	text6
  3721  004200                     __ptext6:
  3722                           	opt stack 0
  3723  004200                     _getIR:
  3724                           	opt stack 19
  3725                           
  3726                           ;sort.c: 339: readIR();
  3727                           
  3728                           ; BSR set to: 0
  3729                           ;incstack = 0
  3730  004200  EC7A  F021         	call	_readIR	;wreg free
  3731                           
  3732                           ;sort.c: 341: if(IR_signal==1){
  3733  004204  0100               	movlb	0	; () banked
  3734  004206  05DA               	decf	_IR_signal& (0+255),w,b
  3735  004208  0100               	movlb	0	; () banked
  3736  00420A  11DB               	iorwf	(_IR_signal+1)& (0+255),w,b
  3737  00420C  A4D8               	btfss	status,2,c
  3738  00420E  0012               	return	
  3739                           
  3740                           ; BSR set to: 0
  3741                           ;sort.c: 342: _delay((unsigned long)((500)*(32000000/4000.0)));
  3742  004210  0E15               	movlw	21
  3743  004212  0100               	movlb	0	; () banked
  3744  004214  6F87               	movwf	(??_getIR+1)& (0+255),b
  3745  004216  0E4B               	movlw	75
  3746  004218  0100               	movlb	0	; () banked
  3747  00421A  6F86               	movwf	??_getIR& (0+255),b
  3748  00421C  0EBE               	movlw	190
  3749  00421E                     u7387:
  3750  00421E  2EE8               	decfsz	wreg,f,c
  3751  004220  D7FE               	bra	u7387
  3752  004222  2F86               	decfsz	??_getIR& (0+255),f,b
  3753  004224  D7FC               	bra	u7387
  3754  004226  2F87               	decfsz	(??_getIR+1)& (0+255),f,b
  3755  004228  D7FA               	bra	u7387
  3756  00422A  F000               	nop	
  3757                           
  3758                           ;sort.c: 343: readIR();
  3759  00422C  EC7A  F021         	call	_readIR	;wreg free
  3760                           
  3761                           ;sort.c: 344: if(IR_signal==1){
  3762  004230  0100               	movlb	0	; () banked
  3763  004232  05DA               	decf	_IR_signal& (0+255),w,b
  3764  004234  0100               	movlb	0	; () banked
  3765  004236  11DB               	iorwf	(_IR_signal+1)& (0+255),w,b
  3766  004238  A4D8               	btfss	status,2,c
  3767  00423A  D006               	goto	l6256
  3768                           
  3769                           ; BSR set to: 0
  3770                           ;sort.c: 345: f_loadingNewCan = 1;
  3771  00423C  0E00               	movlw	0
  3772  00423E  0100               	movlb	0	; () banked
  3773  004240  6FE5               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3774  004242  0E01               	movlw	1
  3775  004244  6FE4               	movwf	_f_loadingNewCan& (0+255),b
  3776                           
  3777                           ;sort.c: 346: }
  3778  004246  0012               	return	
  3779  004248                     l6256:
  3780                           
  3781                           ; BSR set to: 0
  3782                           ;sort.c: 347: else{
  3783                           ;sort.c: 348: f_loadingNewCan = 0;
  3784  004248  0E00               	movlw	0
  3785  00424A  0100               	movlb	0	; () banked
  3786  00424C  6FE5               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3787  00424E  0E00               	movlw	0
  3788  004250  6FE4               	movwf	_f_loadingNewCan& (0+255),b
  3789                           
  3790                           ; BSR set to: 0
  3791  004252  0012               	return	
  3792  004254                     __end_of_getIR:
  3793                           	opt stack 0
  3794                           tblptru	equ	0xFF8
  3795                           tblptrh	equ	0xFF7
  3796                           tblptrl	equ	0xFF6
  3797                           tablat	equ	0xFF5
  3798                           prodh	equ	0xFF4
  3799                           prodl	equ	0xFF3
  3800                           postinc0	equ	0xFEE
  3801                           wreg	equ	0xFE8
  3802                           postdec1	equ	0xFE5
  3803                           fsr1l	equ	0xFE1
  3804                           indf2	equ	0xFDF
  3805                           postinc2	equ	0xFDE
  3806                           postdec2	equ	0xFDD
  3807                           fsr2h	equ	0xFDA
  3808                           fsr2l	equ	0xFD9
  3809                           status	equ	0xFD8
  3810                           
  3811 ;; *************** function _readIR *****************
  3812 ;; Defined at:
  3813 ;;		line 23 in file "ADCFunctionality.c"
  3814 ;; Parameters:    Size  Location     Type
  3815 ;;		None
  3816 ;; Auto vars:     Size  Location     Type
  3817 ;;  res             2    4[BANK0 ] int 
  3818 ;; Return value:  Size  Location     Type
  3819 ;;                  1    wreg      void 
  3820 ;; Registers used:
  3821 ;;		wreg, status,2, status,0, cstack
  3822 ;; Tracked objects:
  3823 ;;		On entry : 0/0
  3824 ;;		On exit  : 0/0
  3825 ;;		Unchanged: 0/0
  3826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3827 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3828 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3829 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3830 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3831 ;;Total ram usage:        4 bytes
  3832 ;; Hardware stack levels used:    1
  3833 ;; Hardware stack levels required when called:    8
  3834 ;; This function calls:
  3835 ;;		_readADC
  3836 ;; This function is called by:
  3837 ;;		_getIR
  3838 ;; This function uses a non-reentrant model
  3839 ;;
  3840                           
  3841                           	psect	text7
  3842  0042F4                     __ptext7:
  3843                           	opt stack 0
  3844  0042F4                     _readIR:
  3845                           	opt stack 19
  3846                           
  3847                           ;ADCFunctionality.c: 24: readADC(0);
  3848                           
  3849                           ; BSR set to: 0
  3850                           ;incstack = 0
  3851  0042F4  0E00               	movlw	0
  3852  0042F6  ECDD  F023         	call	_readADC
  3853                           
  3854                           ;ADCFunctionality.c: 25: int res = ADRESH<<8 | ADRESL;
  3855  0042FA  50C3               	movf	4035,w,c	;volatile
  3856  0042FC  CFC4 F082          	movff	4036,??_readIR	;volatile
  3857  004300  0100               	movlb	0	; () banked
  3858  004302  6B83               	clrf	(??_readIR+1)& (0+255),b
  3859  004304  C082  F083         	movff	??_readIR,??_readIR+1
  3860  004308  0100               	movlb	0	; () banked
  3861  00430A  6B82               	clrf	??_readIR& (0+255),b
  3862  00430C  0100               	movlb	0	; () banked
  3863  00430E  1182               	iorwf	??_readIR& (0+255),w,b
  3864  004310  0100               	movlb	0	; () banked
  3865  004312  6F84               	movwf	readIR@res& (0+255),b
  3866  004314  0100               	movlb	0	; () banked
  3867  004316  5183               	movf	(??_readIR+1)& (0+255),w,b
  3868  004318  0100               	movlb	0	; () banked
  3869  00431A  6F85               	movwf	(readIR@res+1)& (0+255),b
  3870                           
  3871                           ; BSR set to: 0
  3872                           ;ADCFunctionality.c: 26: IR_signal = (res > 1000) ? 1 : 0;
  3873  00431C  0100               	movlb	0	; () banked
  3874  00431E  BF85               	btfsc	(readIR@res+1)& (0+255),7,b
  3875  004320  D00A               	goto	u3920
  3876  004322  0EE9               	movlw	233
  3877  004324  0100               	movlb	0	; () banked
  3878  004326  5D84               	subwf	readIR@res& (0+255),w,b
  3879  004328  0E03               	movlw	3
  3880  00432A  0100               	movlb	0	; () banked
  3881  00432C  5985               	subwfb	(readIR@res+1)& (0+255),w,b
  3882  00432E  A0D8               	btfss	status,0,c
  3883  004330  D002               	goto	u3920
  3884  004332  0E01               	movlw	1
  3885  004334  D001               	goto	u3930
  3886  004336                     u3920:
  3887  004336  0E00               	movlw	0
  3888  004338                     u3930:
  3889  004338  0100               	movlb	0	; () banked
  3890  00433A  6FDA               	movwf	_IR_signal& (0+255),b
  3891  00433C  6BDB               	clrf	(_IR_signal+1)& (0+255),b
  3892                           
  3893                           ; BSR set to: 0
  3894  00433E  0012               	return		;funcret
  3895  004340                     __end_of_readIR:
  3896                           	opt stack 0
  3897                           tblptru	equ	0xFF8
  3898                           tblptrh	equ	0xFF7
  3899                           tblptrl	equ	0xFF6
  3900                           tablat	equ	0xFF5
  3901                           prodh	equ	0xFF4
  3902                           prodl	equ	0xFF3
  3903                           postinc0	equ	0xFEE
  3904                           wreg	equ	0xFE8
  3905                           postdec1	equ	0xFE5
  3906                           fsr1l	equ	0xFE1
  3907                           indf2	equ	0xFDF
  3908                           postinc2	equ	0xFDE
  3909                           postdec2	equ	0xFDD
  3910                           fsr2h	equ	0xFDA
  3911                           fsr2l	equ	0xFD9
  3912                           status	equ	0xFD8
  3913                           
  3914 ;; *************** function _delay_ms *****************
  3915 ;; Defined at:
  3916 ;;		line 373 in file "sort.c"
  3917 ;; Parameters:    Size  Location     Type
  3918 ;;  milliseconds    1    wreg     unsigned char 
  3919 ;; Auto vars:     Size  Location     Type
  3920 ;;  milliseconds    1    1[BANK0 ] unsigned char 
  3921 ;; Return value:  Size  Location     Type
  3922 ;;                  1    wreg      void 
  3923 ;; Registers used:
  3924 ;;		wreg, status,2, status,0, cstack
  3925 ;; Tracked objects:
  3926 ;;		On entry : 0/0
  3927 ;;		On exit  : 0/0
  3928 ;;		Unchanged: 0/0
  3929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3930 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3931 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3932 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3933 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3934 ;;Total ram usage:        2 bytes
  3935 ;; Hardware stack levels used:    1
  3936 ;; Hardware stack levels required when called:    7
  3937 ;; This function calls:
  3938 ;;		Nothing
  3939 ;; This function is called by:
  3940 ;;		_Loading
  3941 ;; This function uses a non-reentrant model
  3942 ;;
  3943                           
  3944                           	psect	text8
  3945  004810                     __ptext8:
  3946                           	opt stack 0
  3947  004810                     _delay_ms:
  3948                           	opt stack 21
  3949                           
  3950                           ; BSR set to: 0
  3951                           ;incstack = 0
  3952                           ;delay_ms@milliseconds stored from wreg
  3953  004810  0100               	movlb	0	; () banked
  3954  004812  6F81               	movwf	delay_ms@milliseconds& (0+255),b
  3955                           
  3956                           ;sort.c: 374: while(milliseconds > 0)
  3957  004814  D00B               	goto	l6228
  3958  004816                     l6224:
  3959                           
  3960                           ;sort.c: 375: {
  3961                           ;sort.c: 376: milliseconds--;
  3962  004816  0100               	movlb	0	; () banked
  3963  004818  0781               	decf	delay_ms@milliseconds& (0+255),f,b
  3964                           
  3965                           ; BSR set to: 0
  3966                           ;sort.c: 377: _delay((unsigned long)((990)*(32000000/4000000.0)));
  3967  00481A  0E0B               	movlw	11
  3968  00481C  0100               	movlb	0	; () banked
  3969  00481E  6F80               	movwf	??_delay_ms& (0+255),b
  3970  004820  0E47               	movlw	71
  3971  004822                     u7397:
  3972  004822  2EE8               	decfsz	wreg,f,c
  3973  004824  D7FE               	bra	u7397
  3974  004826  2F80               	decfsz	??_delay_ms& (0+255),f,b
  3975  004828  D7FC               	bra	u7397
  3976  00482A  D000               	nop2	
  3977  00482C                     l6228:
  3978  00482C  0100               	movlb	0	; () banked
  3979  00482E  5181               	movf	delay_ms@milliseconds& (0+255),w,b
  3980  004830  0100               	movlb	0	; () banked
  3981  004832  B4D8               	btfsc	status,2,c
  3982  004834  0012               	return	
  3983  004836  D7EF               	goto	l6224
  3984  004838                     __end_of_delay_ms:
  3985                           	opt stack 0
  3986                           tblptru	equ	0xFF8
  3987                           tblptrh	equ	0xFF7
  3988                           tblptrl	equ	0xFF6
  3989                           tablat	equ	0xFF5
  3990                           prodh	equ	0xFF4
  3991                           prodl	equ	0xFF3
  3992                           postinc0	equ	0xFEE
  3993                           wreg	equ	0xFE8
  3994                           postdec1	equ	0xFE5
  3995                           fsr1l	equ	0xFE1
  3996                           indf2	equ	0xFDF
  3997                           postinc2	equ	0xFDE
  3998                           postdec2	equ	0xFDD
  3999                           fsr2h	equ	0xFDA
  4000                           fsr2l	equ	0xFD9
  4001                           status	equ	0xFD8
  4002                           
  4003 ;; *************** function _ID *****************
  4004 ;; Defined at:
  4005 ;;		line 130 in file "sort.c"
  4006 ;; Parameters:    Size  Location     Type
  4007 ;;		None
  4008 ;; Auto vars:     Size  Location     Type
  4009 ;;  i               2   14[BANK0 ] int 
  4010 ;;  sensor_outpu    4   10[BANK0 ] int [2]
  4011 ;; Return value:  Size  Location     Type
  4012 ;;                  1    wreg      void 
  4013 ;; Registers used:
  4014 ;;		wreg, status,2, status,0, cstack
  4015 ;; Tracked objects:
  4016 ;;		On entry : 0/0
  4017 ;;		On exit  : 0/0
  4018 ;;		Unchanged: 0/0
  4019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4020 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4021 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4022 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4023 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4024 ;;Total ram usage:        8 bytes
  4025 ;; Hardware stack levels used:    1
  4026 ;; Hardware stack levels required when called:   10
  4027 ;; This function calls:
  4028 ;;		_getMAG
  4029 ;; This function is called by:
  4030 ;;		_sort
  4031 ;; This function uses a non-reentrant model
  4032 ;;
  4033                           
  4034                           	psect	text9
  4035  003290                     __ptext9:
  4036                           	opt stack 0
  4037  003290                     _ID:
  4038                           	opt stack 19
  4039                           
  4040                           ;sort.c: 131: if(f_can_coming_to_ID){
  4041                           
  4042                           ; BSR set to: 0
  4043                           ;incstack = 0
  4044  003290  506D               	movf	_f_can_coming_to_ID,w,c
  4045  003292  106E               	iorwf	_f_can_coming_to_ID+1,w,c
  4046  003294  B4D8               	btfsc	status,2,c
  4047  003296  0012               	return	
  4048                           
  4049                           ;sort.c: 133: _delay((unsigned long)((1500)*(32000000/4000.0)));
  4050  003298  0E3D               	movlw	61
  4051  00329A  0100               	movlb	0	; () banked
  4052  00329C  6F89               	movwf	(??_ID+1)& (0+255),b
  4053  00329E  0EE1               	movlw	225
  4054  0032A0  0100               	movlb	0	; () banked
  4055  0032A2  6F88               	movwf	??_ID& (0+255),b
  4056  0032A4  0E3F               	movlw	63
  4057  0032A6                     u7407:
  4058  0032A6  2EE8               	decfsz	wreg,f,c
  4059  0032A8  D7FE               	bra	u7407
  4060  0032AA  2F88               	decfsz	??_ID& (0+255),f,b
  4061  0032AC  D7FC               	bra	u7407
  4062  0032AE  2F89               	decfsz	(??_ID+1)& (0+255),f,b
  4063  0032B0  D7FA               	bra	u7407
  4064  0032B2  D000               	nop2	
  4065                           
  4066                           ;sort.c: 138: int sensor_outputs[2];
  4067                           ;sort.c: 141: getMAG();
  4068  0032B4  EC78  F022         	call	_getMAG	;wreg free
  4069                           
  4070                           ;sort.c: 142: sensor_outputs[0] = MAG_signal;
  4071  0032B8  C0DC  F08A         	movff	_MAG_signal,ID@sensor_outputs
  4072  0032BC  C0DD  F08B         	movff	_MAG_signal+1,ID@sensor_outputs+1
  4073                           
  4074                           ;sort.c: 144: LATAbits.LATA3 = 1;
  4075  0032C0  8689               	bsf	3977,3,c	;volatile
  4076                           
  4077                           ;sort.c: 146: sensor_outputs[1] = PORTAbits.RA2;
  4078  0032C2  A480               	btfss	3968,2,c	;volatile
  4079  0032C4  D004               	goto	u5060
  4080  0032C6  0100               	movlb	0	; () banked
  4081  0032C8  6B88               	clrf	??_ID& (0+255),b
  4082  0032CA  2B88               	incf	??_ID& (0+255),f,b
  4083  0032CC  D002               	goto	u5068
  4084  0032CE                     u5060:
  4085  0032CE  0100               	movlb	0	; () banked
  4086  0032D0  6B88               	clrf	??_ID& (0+255),b
  4087  0032D2                     u5068:
  4088  0032D2  0100               	movlb	0	; () banked
  4089  0032D4  5188               	movf	??_ID& (0+255),w,b
  4090  0032D6  0100               	movlb	0	; () banked
  4091  0032D8  6F8C               	movwf	(ID@sensor_outputs+2)& (0+255),b
  4092  0032DA  6B8D               	clrf	(ID@sensor_outputs+3)& (0+255),b
  4093                           
  4094                           ; BSR set to: 0
  4095                           ;sort.c: 154: if(!sensor_outputs[0]){
  4096  0032DC  0100               	movlb	0	; () banked
  4097  0032DE  518A               	movf	ID@sensor_outputs& (0+255),w,b
  4098  0032E0  0100               	movlb	0	; () banked
  4099  0032E2  118B               	iorwf	(ID@sensor_outputs+1)& (0+255),w,b
  4100  0032E4  A4D8               	btfss	status,2,c
  4101  0032E6  D014               	goto	l6632
  4102                           
  4103                           ; BSR set to: 0
  4104                           ;sort.c: 155: if(!sensor_outputs[1]){
  4105  0032E8  0100               	movlb	0	; () banked
  4106  0032EA  518C               	movf	(ID@sensor_outputs+2)& (0+255),w,b
  4107  0032EC  0100               	movlb	0	; () banked
  4108  0032EE  118D               	iorwf	(ID@sensor_outputs+3)& (0+255),w,b
  4109  0032F0  A4D8               	btfss	status,2,c
  4110  0032F2  D007               	goto	l6628
  4111                           
  4112                           ; BSR set to: 0
  4113                           ;sort.c: 156: count_pop_no_tab++;
  4114  0032F4  4A61               	infsnz	_count_pop_no_tab,f,c
  4115  0032F6  2A62               	incf	_count_pop_no_tab+1,f,c
  4116                           
  4117                           ; BSR set to: 0
  4118                           ;sort.c: 157: cur_can = 0;
  4119  0032F8  0E00               	movlw	0
  4120  0032FA  0100               	movlb	0	; () banked
  4121  0032FC  6FE1               	movwf	(_cur_can+1)& (0+255),b
  4122  0032FE  0E00               	movlw	0
  4123  003300  D01A               	goto	L4
  4124  003302                     l6628:
  4125                           
  4126                           ; BSR set to: 0
  4127                           ;sort.c: 159: else{
  4128                           ;sort.c: 160: count_pop_w_tab++;
  4129  003302  4A63               	infsnz	_count_pop_w_tab,f,c
  4130  003304  2A64               	incf	_count_pop_w_tab+1,f,c
  4131                           
  4132                           ; BSR set to: 0
  4133                           ;sort.c: 161: cur_can = 1;
  4134  003306  0E00               	movlw	0
  4135  003308  0100               	movlb	0	; () banked
  4136  00330A  6FE1               	movwf	(_cur_can+1)& (0+255),b
  4137  00330C  0E01               	movlw	1
  4138  00330E  D013               	goto	L4
  4139  003310                     l6632:
  4140                           
  4141                           ; BSR set to: 0
  4142                           ;sort.c: 164: else{
  4143                           ;sort.c: 165: if(!sensor_outputs[1]){
  4144  003310  0100               	movlb	0	; () banked
  4145  003312  518C               	movf	(ID@sensor_outputs+2)& (0+255),w,b
  4146  003314  0100               	movlb	0	; () banked
  4147  003316  118D               	iorwf	(ID@sensor_outputs+3)& (0+255),w,b
  4148  003318  A4D8               	btfss	status,2,c
  4149  00331A  D007               	goto	l6638
  4150                           
  4151                           ; BSR set to: 0
  4152                           ;sort.c: 166: count_can_w_lab++;
  4153  00331C  4A5F               	infsnz	_count_can_w_lab,f,c
  4154  00331E  2A60               	incf	_count_can_w_lab+1,f,c
  4155                           
  4156                           ; BSR set to: 0
  4157                           ;sort.c: 167: cur_can = 2;
  4158  003320  0E00               	movlw	0
  4159  003322  0100               	movlb	0	; () banked
  4160  003324  6FE1               	movwf	(_cur_can+1)& (0+255),b
  4161  003326  0E02               	movlw	2
  4162  003328  D006               	goto	L4
  4163  00332A                     l6638:
  4164                           
  4165                           ; BSR set to: 0
  4166                           ;sort.c: 169: else{
  4167                           ;sort.c: 170: count_can_no_lab++;
  4168  00332A  4A5D               	infsnz	_count_can_no_lab,f,c
  4169  00332C  2A5E               	incf	_count_can_no_lab+1,f,c
  4170                           
  4171                           ; BSR set to: 0
  4172                           ;sort.c: 171: cur_can = 3;
  4173  00332E  0E00               	movlw	0
  4174  003330  0100               	movlb	0	; () banked
  4175  003332  6FE1               	movwf	(_cur_can+1)& (0+255),b
  4176  003334  0E03               	movlw	3
  4177  003336                     L4:
  4178  003336  6FE0               	movwf	_cur_can& (0+255),b
  4179                           
  4180                           ; BSR set to: 0
  4181                           ;sort.c: 172: }
  4182                           ;sort.c: 173: }
  4183                           ;sort.c: 177: for(int i=0;i<10000;i++)
  4184                           
  4185                           ; BSR set to: 0
  4186                           
  4187                           ; BSR set to: 0
  4188  003338  0E00               	movlw	0
  4189  00333A  0100               	movlb	0	; () banked
  4190  00333C  6F8F               	movwf	(ID@i+1)& (0+255),b
  4191  00333E  0E00               	movlw	0
  4192  003340  6F8E               	movwf	ID@i& (0+255),b
  4193  003342                     l6644:
  4194                           
  4195                           ; BSR set to: 0
  4196  003342  0100               	movlb	0	; () banked
  4197  003344  BF8F               	btfsc	(ID@i+1)& (0+255),7,b
  4198  003346  D008               	goto	l750
  4199  003348  0E10               	movlw	16
  4200  00334A  0100               	movlb	0	; () banked
  4201  00334C  5D8E               	subwf	ID@i& (0+255),w,b
  4202  00334E  0E27               	movlw	39
  4203  003350  0100               	movlb	0	; () banked
  4204  003352  598F               	subwfb	(ID@i+1)& (0+255),w,b
  4205  003354  B0D8               	btfsc	status,0,c
  4206  003356  D00D               	goto	l751
  4207  003358                     l750:
  4208                           
  4209                           ; BSR set to: 0
  4210                           ;sort.c: 178: {
  4211                           ;sort.c: 179: LATCbits.LATC0 = 1;
  4212  003358  808B               	bsf	3979,0,c	;volatile
  4213                           
  4214                           ; BSR set to: 0
  4215                           ;sort.c: 180: _delay((unsigned long)((10)*(32000000/4000000.0)));
  4216  00335A  0E1A               	movlw	26
  4217  00335C                     u7417:
  4218  00335C  2EE8               	decfsz	wreg,f,c
  4219  00335E  D7FE               	bra	u7417
  4220  003360  D000               	nop2	
  4221                           
  4222                           ;sort.c: 181: LATCbits.LATC0 = 0;
  4223  003362  908B               	bcf	3979,0,c	;volatile
  4224                           
  4225                           ;sort.c: 182: _delay((unsigned long)((90)*(32000000/4000000.0)));
  4226  003364  0EF0               	movlw	240
  4227  003366                     u7427:
  4228  003366  2EE8               	decfsz	wreg,f,c
  4229  003368  D7FE               	bra	u7427
  4230  00336A  0100               	movlb	0	; () banked
  4231  00336C  4B8E               	infsnz	ID@i& (0+255),f,b
  4232  00336E  2B8F               	incf	(ID@i+1)& (0+255),f,b
  4233  003370  D7E8               	goto	l6644
  4234  003372                     l751:
  4235                           
  4236                           ; BSR set to: 0
  4237                           ;sort.c: 183: }
  4238                           ;sort.c: 184: LATCbits.LATC0 = 0;
  4239  003372  908B               	bcf	3979,0,c	;volatile
  4240                           
  4241                           ;sort.c: 186: LATAbits.LATA3 = 0;
  4242  003374  9689               	bcf	3977,3,c	;volatile
  4243                           
  4244                           ; BSR set to: 0
  4245                           ;sort.c: 190: f_can_coming_to_distribution = 1;
  4246  003376  0E00               	movlw	0
  4247  003378  6E70               	movwf	_f_can_coming_to_distribution+1,c
  4248  00337A  0E01               	movlw	1
  4249  00337C  6E6F               	movwf	_f_can_coming_to_distribution,c
  4250                           
  4251                           ; BSR set to: 0
  4252                           ;sort.c: 191: _delay((unsigned long)((1500)*(32000000/4000.0)));
  4253  00337E  0E3D               	movlw	61
  4254  003380  0100               	movlb	0	; () banked
  4255  003382  6F89               	movwf	(??_ID+1)& (0+255),b
  4256  003384  0EE1               	movlw	225
  4257  003386  0100               	movlb	0	; () banked
  4258  003388  6F88               	movwf	??_ID& (0+255),b
  4259  00338A  0E3F               	movlw	63
  4260  00338C                     u7437:
  4261  00338C  2EE8               	decfsz	wreg,f,c
  4262  00338E  D7FE               	bra	u7437
  4263  003390  2F88               	decfsz	??_ID& (0+255),f,b
  4264  003392  D7FC               	bra	u7437
  4265  003394  2F89               	decfsz	(??_ID+1)& (0+255),f,b
  4266  003396  D7FA               	bra	u7437
  4267  003398  D000               	nop2	
  4268                           
  4269                           ;sort.c: 192: LATCbits.LATC0 = 1;
  4270  00339A  808B               	bsf	3979,0,c	;volatile
  4271                           
  4272                           ;sort.c: 194: f_can_coming_to_ID = 0;
  4273  00339C  0E00               	movlw	0
  4274  00339E  6E6E               	movwf	_f_can_coming_to_ID+1,c
  4275  0033A0  0E00               	movlw	0
  4276  0033A2  6E6D               	movwf	_f_can_coming_to_ID,c
  4277  0033A4  0012               	return	
  4278  0033A6                     __end_of_ID:
  4279                           	opt stack 0
  4280                           tblptru	equ	0xFF8
  4281                           tblptrh	equ	0xFF7
  4282                           tblptrl	equ	0xFF6
  4283                           tablat	equ	0xFF5
  4284                           prodh	equ	0xFF4
  4285                           prodl	equ	0xFF3
  4286                           postinc0	equ	0xFEE
  4287                           wreg	equ	0xFE8
  4288                           postdec1	equ	0xFE5
  4289                           fsr1l	equ	0xFE1
  4290                           indf2	equ	0xFDF
  4291                           postinc2	equ	0xFDE
  4292                           postdec2	equ	0xFDD
  4293                           fsr2h	equ	0xFDA
  4294                           fsr2l	equ	0xFD9
  4295                           status	equ	0xFD8
  4296                           
  4297 ;; *************** function _getMAG *****************
  4298 ;; Defined at:
  4299 ;;		line 352 in file "sort.c"
  4300 ;; Parameters:    Size  Location     Type
  4301 ;;		None
  4302 ;; Auto vars:     Size  Location     Type
  4303 ;;		None
  4304 ;; Return value:  Size  Location     Type
  4305 ;;                  1    wreg      void 
  4306 ;; Registers used:
  4307 ;;		wreg, status,2, status,0, cstack
  4308 ;; Tracked objects:
  4309 ;;		On entry : 0/0
  4310 ;;		On exit  : 0/0
  4311 ;;		Unchanged: 0/0
  4312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4313 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4314 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4315 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4316 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4317 ;;Total ram usage:        2 bytes
  4318 ;; Hardware stack levels used:    1
  4319 ;; Hardware stack levels required when called:    9
  4320 ;; This function calls:
  4321 ;;		_readMAG
  4322 ;; This function is called by:
  4323 ;;		_ID
  4324 ;; This function uses a non-reentrant model
  4325 ;;
  4326                           
  4327                           	psect	text10
  4328  0044F0                     __ptext10:
  4329                           	opt stack 0
  4330  0044F0                     _getMAG:
  4331                           	opt stack 19
  4332                           
  4333                           ;sort.c: 353: readMAG();
  4334                           
  4335                           ;incstack = 0
  4336  0044F0  ECA0  F021         	call	_readMAG	;wreg free
  4337                           
  4338                           ;sort.c: 355: if(MAG_signal==1){
  4339  0044F4  0100               	movlb	0	; () banked
  4340  0044F6  05DC               	decf	_MAG_signal& (0+255),w,b
  4341  0044F8  0100               	movlb	0	; () banked
  4342  0044FA  11DD               	iorwf	(_MAG_signal+1)& (0+255),w,b
  4343  0044FC  A4D8               	btfss	status,2,c
  4344  0044FE  0012               	return	
  4345                           
  4346                           ; BSR set to: 0
  4347                           ;sort.c: 356: _delay((unsigned long)((500)*(32000000/4000.0)));
  4348  004500  0E15               	movlw	21
  4349  004502  0100               	movlb	0	; () banked
  4350  004504  6F87               	movwf	(??_getMAG+1)& (0+255),b
  4351  004506  0E4B               	movlw	75
  4352  004508  0100               	movlb	0	; () banked
  4353  00450A  6F86               	movwf	??_getMAG& (0+255),b
  4354  00450C  0EBE               	movlw	190
  4355  00450E                     u7447:
  4356  00450E  2EE8               	decfsz	wreg,f,c
  4357  004510  D7FE               	bra	u7447
  4358  004512  2F86               	decfsz	??_getMAG& (0+255),f,b
  4359  004514  D7FC               	bra	u7447
  4360  004516  2F87               	decfsz	(??_getMAG+1)& (0+255),f,b
  4361  004518  D7FA               	bra	u7447
  4362  00451A  F000               	nop	
  4363                           
  4364                           ;sort.c: 357: readMAG();
  4365  00451C  ECA0  F021         	call	_readMAG	;wreg free
  4366  004520  0012               	return	
  4367  004522                     __end_of_getMAG:
  4368                           	opt stack 0
  4369                           tblptru	equ	0xFF8
  4370                           tblptrh	equ	0xFF7
  4371                           tblptrl	equ	0xFF6
  4372                           tablat	equ	0xFF5
  4373                           prodh	equ	0xFF4
  4374                           prodl	equ	0xFF3
  4375                           postinc0	equ	0xFEE
  4376                           wreg	equ	0xFE8
  4377                           postdec1	equ	0xFE5
  4378                           fsr1l	equ	0xFE1
  4379                           indf2	equ	0xFDF
  4380                           postinc2	equ	0xFDE
  4381                           postdec2	equ	0xFDD
  4382                           fsr2h	equ	0xFDA
  4383                           fsr2l	equ	0xFD9
  4384                           status	equ	0xFD8
  4385                           
  4386 ;; *************** function _Distribution *****************
  4387 ;; Defined at:
  4388 ;;		line 197 in file "sort.c"
  4389 ;; Parameters:    Size  Location     Type
  4390 ;;		None
  4391 ;; Auto vars:     Size  Location     Type
  4392 ;;		None
  4393 ;; Return value:  Size  Location     Type
  4394 ;;                  1    wreg      void 
  4395 ;; Registers used:
  4396 ;;		wreg, status,2, status,0, cstack
  4397 ;; Tracked objects:
  4398 ;;		On entry : 0/0
  4399 ;;		On exit  : 0/0
  4400 ;;		Unchanged: 0/0
  4401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4402 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4403 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4404 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4405 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4406 ;;Total ram usage:        2 bytes
  4407 ;; Hardware stack levels used:    1
  4408 ;; Hardware stack levels required when called:    8
  4409 ;; This function calls:
  4410 ;;		_updateServoPosition
  4411 ;; This function is called by:
  4412 ;;		_sort
  4413 ;; This function uses a non-reentrant model
  4414 ;;
  4415                           
  4416                           	psect	text11
  4417  002758                     __ptext11:
  4418                           	opt stack 0
  4419  002758                     _Distribution:
  4420                           	opt stack 21
  4421                           
  4422                           ;sort.c: 198: if(f_can_coming_to_distribution){
  4423                           
  4424                           ;incstack = 0
  4425  002758  506F               	movf	_f_can_coming_to_distribution,w,c
  4426  00275A  1070               	iorwf	_f_can_coming_to_distribution+1,w,c
  4427  00275C  B4D8               	btfsc	status,2,c
  4428  00275E  0012               	return	
  4429  002760  D034               	goto	l6676
  4430  002762                     l6666:
  4431                           
  4432                           ;sort.c: 208: updateServoPosition(500, 1);
  4433  002762  0E01               	movlw	1
  4434  002764  0100               	movlb	0	; () banked
  4435  002766  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4436  002768  0EF4               	movlw	244
  4437  00276A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4438  00276C  0E00               	movlw	0
  4439  00276E  0100               	movlb	0	; () banked
  4440  002770  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4441  002772  0E01               	movlw	1
  4442  002774  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4443  002776  EC0F  F01F         	call	_updateServoPosition	;wreg free
  4444                           
  4445                           ;sort.c: 209: break;
  4446  00277A  D03E               	goto	l6678
  4447  00277C                     l6668:
  4448                           
  4449                           ;sort.c: 211: updateServoPosition(850, 1);
  4450  00277C  0E03               	movlw	3
  4451  00277E  0100               	movlb	0	; () banked
  4452  002780  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4453  002782  0E52               	movlw	82
  4454  002784  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4455  002786  0E00               	movlw	0
  4456  002788  0100               	movlb	0	; () banked
  4457  00278A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4458  00278C  0E01               	movlw	1
  4459  00278E  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4460  002790  EC0F  F01F         	call	_updateServoPosition	;wreg free
  4461                           
  4462                           ;sort.c: 212: break;
  4463  002794  D031               	goto	l6678
  4464  002796                     l6670:
  4465                           
  4466                           ;sort.c: 214: updateServoPosition(1670, 1);
  4467  002796  0E06               	movlw	6
  4468  002798  0100               	movlb	0	; () banked
  4469  00279A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4470  00279C  0E86               	movlw	134
  4471  00279E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4472  0027A0  0E00               	movlw	0
  4473  0027A2  0100               	movlb	0	; () banked
  4474  0027A4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4475  0027A6  0E01               	movlw	1
  4476  0027A8  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4477  0027AA  EC0F  F01F         	call	_updateServoPosition	;wreg free
  4478                           
  4479                           ;sort.c: 215: break;
  4480  0027AE  D024               	goto	l6678
  4481  0027B0                     l6672:
  4482                           
  4483                           ;sort.c: 217: updateServoPosition(2100, 1);
  4484  0027B0  0E08               	movlw	8
  4485  0027B2  0100               	movlb	0	; () banked
  4486  0027B4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4487  0027B6  0E34               	movlw	52
  4488  0027B8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4489  0027BA  0E00               	movlw	0
  4490  0027BC  0100               	movlb	0	; () banked
  4491  0027BE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4492  0027C0  0E01               	movlw	1
  4493  0027C2  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4494  0027C4  EC0F  F01F         	call	_updateServoPosition	;wreg free
  4495                           
  4496                           ;sort.c: 221: }
  4497                           
  4498                           ;sort.c: 220: break;
  4499                           
  4500                           ;sort.c: 219: default:
  4501                           
  4502                           ;sort.c: 218: break;
  4503  0027C8  D017               	goto	l6678
  4504  0027CA                     l6676:
  4505  0027CA  C0E0  F088         	movff	_cur_can,??_Distribution
  4506  0027CE  C0E1  F089         	movff	_cur_can+1,??_Distribution+1
  4507                           
  4508                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4509                           ; Switch size 1, requested type "space"
  4510                           ; Number of cases is 1, Range of values is 0 to 0
  4511                           ; switch strategies available:
  4512                           ; Name         Instructions Cycles
  4513                           ; simple_byte            4     3 (average)
  4514                           ;	Chosen strategy is simple_byte
  4515  0027D2  0100               	movlb	0	; () banked
  4516  0027D4  5189               	movf	(??_Distribution+1)& (0+255),w,b
  4517  0027D6  0A00               	xorlw	0	; case 0
  4518  0027D8  A4D8               	btfss	status,2,c
  4519  0027DA  D00E               	goto	l6678
  4520                           
  4521                           ; BSR set to: 0
  4522                           ; Switch size 1, requested type "space"
  4523                           ; Number of cases is 4, Range of values is 0 to 3
  4524                           ; switch strategies available:
  4525                           ; Name         Instructions Cycles
  4526                           ; simple_byte           13     7 (average)
  4527                           ;	Chosen strategy is simple_byte
  4528  0027DC  0100               	movlb	0	; () banked
  4529  0027DE  5188               	movf	??_Distribution& (0+255),w,b
  4530  0027E0  0A00               	xorlw	0	; case 0
  4531  0027E2  B4D8               	btfsc	status,2,c
  4532  0027E4  D7BE               	goto	l6666
  4533  0027E6  0A01               	xorlw	1	; case 1
  4534  0027E8  B4D8               	btfsc	status,2,c
  4535  0027EA  D7C8               	goto	l6668
  4536  0027EC  0A03               	xorlw	3	; case 2
  4537  0027EE  B4D8               	btfsc	status,2,c
  4538  0027F0  D7D2               	goto	l6670
  4539  0027F2  0A01               	xorlw	1	; case 3
  4540  0027F4  B4D8               	btfsc	status,2,c
  4541  0027F6  D7DC               	goto	l6672
  4542  0027F8                     l6678:
  4543                           
  4544                           ;sort.c: 222: updateServoPosition(1150, 3);
  4545  0027F8  0E04               	movlw	4
  4546  0027FA  0100               	movlb	0	; () banked
  4547  0027FC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4548  0027FE  0E7E               	movlw	126
  4549  002800  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4550  002802  0E00               	movlw	0
  4551  002804  0100               	movlb	0	; () banked
  4552  002806  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4553  002808  0E03               	movlw	3
  4554  00280A  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4555  00280C  EC0F  F01F         	call	_updateServoPosition	;wreg free
  4556                           
  4557                           ;sort.c: 223: _delay((unsigned long)((750)*(32000000/4000.0)));
  4558  002810  0E1F               	movlw	31
  4559  002812  0100               	movlb	0	; () banked
  4560  002814  6F89               	movwf	(??_Distribution+1)& (0+255),b
  4561  002816  0E71               	movlw	113
  4562  002818  0100               	movlb	0	; () banked
  4563  00281A  6F88               	movwf	??_Distribution& (0+255),b
  4564  00281C  0E1E               	movlw	30
  4565  00281E                     u7457:
  4566  00281E  2EE8               	decfsz	wreg,f,c
  4567  002820  D7FE               	bra	u7457
  4568  002822  2F88               	decfsz	??_Distribution& (0+255),f,b
  4569  002824  D7FC               	bra	u7457
  4570  002826  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  4571  002828  D7FA               	bra	u7457
  4572  00282A  F000               	nop	
  4573                           
  4574                           ;sort.c: 231: switch(cur_can){
  4575  00282C  D034               	goto	l6692
  4576  00282E                     l6682:
  4577                           
  4578                           ;sort.c: 233: updateServoPosition(1200, 3);
  4579  00282E  0E04               	movlw	4
  4580  002830  0100               	movlb	0	; () banked
  4581  002832  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4582  002834  0EB0               	movlw	176
  4583  002836  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4584  002838  0E00               	movlw	0
  4585  00283A  0100               	movlb	0	; () banked
  4586  00283C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4587  00283E  0E03               	movlw	3
  4588  002840  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4589  002842  EC0F  F01F         	call	_updateServoPosition	;wreg free
  4590                           
  4591                           ;sort.c: 234: break;
  4592  002846  D03E               	goto	l6694
  4593  002848                     l6684:
  4594                           
  4595                           ;sort.c: 236: updateServoPosition(1200, 3);
  4596  002848  0E04               	movlw	4
  4597  00284A  0100               	movlb	0	; () banked
  4598  00284C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4599  00284E  0EB0               	movlw	176
  4600  002850  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4601  002852  0E00               	movlw	0
  4602  002854  0100               	movlb	0	; () banked
  4603  002856  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4604  002858  0E03               	movlw	3
  4605  00285A  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4606  00285C  EC0F  F01F         	call	_updateServoPosition	;wreg free
  4607                           
  4608                           ;sort.c: 237: break;
  4609  002860  D031               	goto	l6694
  4610  002862                     l6686:
  4611                           
  4612                           ;sort.c: 239: updateServoPosition(1300, 3);
  4613  002862  0E05               	movlw	5
  4614  002864  0100               	movlb	0	; () banked
  4615  002866  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4616  002868  0E14               	movlw	20
  4617  00286A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4618  00286C  0E00               	movlw	0
  4619  00286E  0100               	movlb	0	; () banked
  4620  002870  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4621  002872  0E03               	movlw	3
  4622  002874  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4623  002876  EC0F  F01F         	call	_updateServoPosition	;wreg free
  4624                           
  4625                           ;sort.c: 240: break;
  4626  00287A  D024               	goto	l6694
  4627  00287C                     l6688:
  4628                           
  4629                           ;sort.c: 242: updateServoPosition(1300, 3);
  4630  00287C  0E05               	movlw	5
  4631  00287E  0100               	movlb	0	; () banked
  4632  002880  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4633  002882  0E14               	movlw	20
  4634  002884  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4635  002886  0E00               	movlw	0
  4636  002888  0100               	movlb	0	; () banked
  4637  00288A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4638  00288C  0E03               	movlw	3
  4639  00288E  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4640  002890  EC0F  F01F         	call	_updateServoPosition	;wreg free
  4641                           
  4642                           ;sort.c: 246: }
  4643                           
  4644                           ;sort.c: 245: break;
  4645                           
  4646                           ;sort.c: 244: default:
  4647                           
  4648                           ;sort.c: 243: break;
  4649  002894  D017               	goto	l6694
  4650  002896                     l6692:
  4651  002896  C0E0  F088         	movff	_cur_can,??_Distribution
  4652  00289A  C0E1  F089         	movff	_cur_can+1,??_Distribution+1
  4653                           
  4654                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4655                           ; Switch size 1, requested type "space"
  4656                           ; Number of cases is 1, Range of values is 0 to 0
  4657                           ; switch strategies available:
  4658                           ; Name         Instructions Cycles
  4659                           ; simple_byte            4     3 (average)
  4660                           ;	Chosen strategy is simple_byte
  4661  00289E  0100               	movlb	0	; () banked
  4662  0028A0  5189               	movf	(??_Distribution+1)& (0+255),w,b
  4663  0028A2  0A00               	xorlw	0	; case 0
  4664  0028A4  A4D8               	btfss	status,2,c
  4665  0028A6  D00E               	goto	l6694
  4666                           
  4667                           ; BSR set to: 0
  4668                           ; Switch size 1, requested type "space"
  4669                           ; Number of cases is 4, Range of values is 0 to 3
  4670                           ; switch strategies available:
  4671                           ; Name         Instructions Cycles
  4672                           ; simple_byte           13     7 (average)
  4673                           ;	Chosen strategy is simple_byte
  4674  0028A8  0100               	movlb	0	; () banked
  4675  0028AA  5188               	movf	??_Distribution& (0+255),w,b
  4676  0028AC  0A00               	xorlw	0	; case 0
  4677  0028AE  B4D8               	btfsc	status,2,c
  4678  0028B0  D7BE               	goto	l6682
  4679  0028B2  0A01               	xorlw	1	; case 1
  4680  0028B4  B4D8               	btfsc	status,2,c
  4681  0028B6  D7C8               	goto	l6684
  4682  0028B8  0A03               	xorlw	3	; case 2
  4683  0028BA  B4D8               	btfsc	status,2,c
  4684  0028BC  D7D2               	goto	l6686
  4685  0028BE  0A01               	xorlw	1	; case 3
  4686  0028C0  B4D8               	btfsc	status,2,c
  4687  0028C2  D7DC               	goto	l6688
  4688  0028C4                     l6694:
  4689                           
  4690                           ;sort.c: 247: _delay((unsigned long)((2500)*(32000000/4000.0)));
  4691  0028C4  0E66               	movlw	102
  4692  0028C6  0100               	movlb	0	; () banked
  4693  0028C8  6F89               	movwf	(??_Distribution+1)& (0+255),b
  4694  0028CA  0E76               	movlw	118
  4695  0028CC  0100               	movlb	0	; () banked
  4696  0028CE  6F88               	movwf	??_Distribution& (0+255),b
  4697  0028D0  0EC1               	movlw	193
  4698  0028D2                     u7467:
  4699  0028D2  2EE8               	decfsz	wreg,f,c
  4700  0028D4  D7FE               	bra	u7467
  4701  0028D6  2F88               	decfsz	??_Distribution& (0+255),f,b
  4702  0028D8  D7FC               	bra	u7467
  4703  0028DA  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  4704  0028DC  D7FA               	bra	u7467
  4705                           
  4706                           ;sort.c: 250: updateServoPosition(1150, 3);
  4707  0028DE  0E04               	movlw	4
  4708  0028E0  0100               	movlb	0	; () banked
  4709  0028E2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4710  0028E4  0E7E               	movlw	126
  4711  0028E6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4712  0028E8  0E00               	movlw	0
  4713  0028EA  0100               	movlb	0	; () banked
  4714  0028EC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4715  0028EE  0E03               	movlw	3
  4716  0028F0  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4717  0028F2  EC0F  F01F         	call	_updateServoPosition	;wreg free
  4718                           
  4719                           ;sort.c: 251: _delay((unsigned long)((750)*(32000000/4000.0)));
  4720  0028F6  0E1F               	movlw	31
  4721  0028F8  0100               	movlb	0	; () banked
  4722  0028FA  6F89               	movwf	(??_Distribution+1)& (0+255),b
  4723  0028FC  0E71               	movlw	113
  4724  0028FE  0100               	movlb	0	; () banked
  4725  002900  6F88               	movwf	??_Distribution& (0+255),b
  4726  002902  0E1E               	movlw	30
  4727  002904                     u7477:
  4728  002904  2EE8               	decfsz	wreg,f,c
  4729  002906  D7FE               	bra	u7477
  4730  002908  2F88               	decfsz	??_Distribution& (0+255),f,b
  4731  00290A  D7FC               	bra	u7477
  4732  00290C  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  4733  00290E  D7FA               	bra	u7477
  4734  002910  F000               	nop	
  4735                           
  4736                           ;sort.c: 252: updateServoPosition(1200, 1);
  4737  002912  0E04               	movlw	4
  4738  002914  0100               	movlb	0	; () banked
  4739  002916  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4740  002918  0EB0               	movlw	176
  4741  00291A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4742  00291C  0E00               	movlw	0
  4743  00291E  0100               	movlb	0	; () banked
  4744  002920  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4745  002922  0E01               	movlw	1
  4746  002924  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4747  002926  EC0F  F01F         	call	_updateServoPosition	;wreg free
  4748                           
  4749                           ;sort.c: 253: f_can_coming_to_distribution = 0;
  4750  00292A  0E00               	movlw	0
  4751  00292C  6E70               	movwf	_f_can_coming_to_distribution+1,c
  4752  00292E  0E00               	movlw	0
  4753  002930  6E6F               	movwf	_f_can_coming_to_distribution,c
  4754                           
  4755                           ;sort.c: 254: f_can_distributed = 1;
  4756  002932  0E00               	movlw	0
  4757  002934  0101               	movlb	1	; () banked
  4758  002936  6F2C               	movwf	(_f_can_distributed+1)& (0+255),b
  4759  002938  0E01               	movlw	1
  4760  00293A  6F2B               	movwf	_f_can_distributed& (0+255),b
  4761                           
  4762                           ; BSR set to: 1
  4763                           ;sort.c: 255: if(f_lastCan == 1){
  4764  00293C  0471               	decf	_f_lastCan,w,c
  4765  00293E  1072               	iorwf	_f_lastCan+1,w,c
  4766  002940  A4D8               	btfss	status,2,c
  4767  002942  0012               	return	
  4768                           
  4769                           ; BSR set to: 1
  4770                           ;sort.c: 256: machine_state = DoneSorting_state;
  4771  002944  0E02               	movlw	2
  4772  002946  0100               	movlb	0	; () banked
  4773  002948  6FFC               	movwf	_machine_state& (0+255),b
  4774                           
  4775                           ; BSR set to: 0
  4776  00294A  0012               	return	
  4777  00294C                     __end_of_Distribution:
  4778                           	opt stack 0
  4779                           tblptru	equ	0xFF8
  4780                           tblptrh	equ	0xFF7
  4781                           tblptrl	equ	0xFF6
  4782                           tablat	equ	0xFF5
  4783                           prodh	equ	0xFF4
  4784                           prodl	equ	0xFF3
  4785                           postinc0	equ	0xFEE
  4786                           wreg	equ	0xFE8
  4787                           postdec1	equ	0xFE5
  4788                           fsr1l	equ	0xFE1
  4789                           indf2	equ	0xFDF
  4790                           postinc2	equ	0xFDE
  4791                           postdec2	equ	0xFDD
  4792                           fsr2h	equ	0xFDA
  4793                           fsr2l	equ	0xFD9
  4794                           status	equ	0xFD8
  4795                           
  4796 ;; *************** function _machineConfig *****************
  4797 ;; Defined at:
  4798 ;;		line 15 in file "MachineConfig.c"
  4799 ;; Parameters:    Size  Location     Type
  4800 ;;		None
  4801 ;; Auto vars:     Size  Location     Type
  4802 ;;		None
  4803 ;; Return value:  Size  Location     Type
  4804 ;;                  1    wreg      void 
  4805 ;; Registers used:
  4806 ;;		wreg, status,2
  4807 ;; Tracked objects:
  4808 ;;		On entry : 0/0
  4809 ;;		On exit  : 0/0
  4810 ;;		Unchanged: 0/0
  4811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4812 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4813 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4814 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4815 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4816 ;;Total ram usage:        0 bytes
  4817 ;; Hardware stack levels used:    1
  4818 ;; Hardware stack levels required when called:    7
  4819 ;; This function calls:
  4820 ;;		Nothing
  4821 ;; This function is called by:
  4822 ;;		_main
  4823 ;; This function uses a non-reentrant model
  4824 ;;
  4825                           
  4826                           	psect	text12
  4827  004098                     __ptext12:
  4828                           	opt stack 0
  4829  004098                     _machineConfig:
  4830                           	opt stack 23
  4831                           
  4832                           ;MachineConfig.c: 17: OSCCON = 0xF0;
  4833                           
  4834                           ;incstack = 0
  4835  004098  0EF0               	movlw	240
  4836  00409A  6ED3               	movwf	4051,c	;volatile
  4837                           
  4838                           ;MachineConfig.c: 18: OSCTUNEbits.PLLEN = 1;
  4839  00409C  8C9B               	bsf	3995,6,c	;volatile
  4840                           
  4841                           ;MachineConfig.c: 22: TRISA = 0b00000111;
  4842  00409E  0E07               	movlw	7
  4843  0040A0  6E92               	movwf	3986,c	;volatile
  4844                           
  4845                           ;MachineConfig.c: 24: TRISB = 0b11110010;
  4846  0040A2  0EF2               	movlw	242
  4847  0040A4  6E93               	movwf	3987,c	;volatile
  4848                           
  4849                           ;MachineConfig.c: 27: TRISC = 0x00;
  4850  0040A6  0E00               	movlw	0
  4851  0040A8  6E94               	movwf	3988,c	;volatile
  4852                           
  4853                           ;MachineConfig.c: 31: TRISD = 0x00;
  4854  0040AA  0E00               	movlw	0
  4855  0040AC  6E95               	movwf	3989,c	;volatile
  4856                           
  4857                           ;MachineConfig.c: 34: TRISE = 0x00;
  4858  0040AE  0E00               	movlw	0
  4859  0040B0  6E96               	movwf	3990,c	;volatile
  4860                           
  4861                           ;MachineConfig.c: 37: LATA = 0x00;
  4862  0040B2  0E00               	movlw	0
  4863  0040B4  6E89               	movwf	3977,c	;volatile
  4864                           
  4865                           ;MachineConfig.c: 38: LATB = 0x00;
  4866  0040B6  0E00               	movlw	0
  4867  0040B8  6E8A               	movwf	3978,c	;volatile
  4868                           
  4869                           ;MachineConfig.c: 39: LATC = 0x00;
  4870  0040BA  0E00               	movlw	0
  4871  0040BC  6E8B               	movwf	3979,c	;volatile
  4872                           
  4873                           ;MachineConfig.c: 40: LATD = 0x00;
  4874  0040BE  0E00               	movlw	0
  4875  0040C0  6E8C               	movwf	3980,c	;volatile
  4876                           
  4877                           ;MachineConfig.c: 41: LATE = 0x00;
  4878  0040C2  0E00               	movlw	0
  4879  0040C4  6E8D               	movwf	3981,c	;volatile
  4880                           
  4881                           ;MachineConfig.c: 43: nRBPU = 0;
  4882  0040C6  9EF1               	bcf	intcon2,7,c	;volatile
  4883                           
  4884                           ;MachineConfig.c: 46: ADCON0 = 0x00;
  4885  0040C8  0E00               	movlw	0
  4886  0040CA  6EC2               	movwf	4034,c	;volatile
  4887                           
  4888                           ;MachineConfig.c: 47: ADCON1 = 0b00001101;
  4889  0040CC  0E0D               	movlw	13
  4890  0040CE  6EC1               	movwf	4033,c	;volatile
  4891                           
  4892                           ;MachineConfig.c: 50: CVRCON = 0x00;
  4893  0040D0  0E00               	movlw	0
  4894  0040D2  6EB5               	movwf	4021,c	;volatile
  4895                           
  4896                           ;MachineConfig.c: 51: CMCONbits.CIS = 0;
  4897  0040D4  96B4               	bcf	4020,3,c	;volatile
  4898                           
  4899                           ;MachineConfig.c: 52: ADCON2 = 0b10110001;
  4900  0040D6  0EB1               	movlw	177
  4901  0040D8  6EC0               	movwf	4032,c	;volatile
  4902                           
  4903                           ;MachineConfig.c: 55: INT1IE = 1;
  4904  0040DA  86F0               	bsf	intcon3,3,c	;volatile
  4905                           
  4906                           ;MachineConfig.c: 57: TMR0IE = 1;
  4907  0040DC  8AF2               	bsf	intcon,5,c	;volatile
  4908                           
  4909                           ;MachineConfig.c: 58: TMR1IE = 1;
  4910  0040DE  809D               	bsf	3997,0,c	;volatile
  4911                           
  4912                           ;MachineConfig.c: 59: T1CON = 0b10110000;
  4913  0040E0  0EB0               	movlw	176
  4914  0040E2  6ECD               	movwf	4045,c	;volatile
  4915                           
  4916                           ;MachineConfig.c: 60: T3CON = 0b10110000;
  4917  0040E4  0EB0               	movlw	176
  4918  0040E6  6EB1               	movwf	4017,c	;volatile
  4919                           
  4920                           ;MachineConfig.c: 61: TMR2IE = 1;
  4921  0040E8  829D               	bsf	3997,1,c	;volatile
  4922                           
  4923                           ;MachineConfig.c: 62: TMR3IE = 1;
  4924  0040EA  82A0               	bsf	4000,1,c	;volatile
  4925                           
  4926                           ;MachineConfig.c: 63: PEIE = 1;
  4927  0040EC  8CF2               	bsf	intcon,6,c	;volatile
  4928                           
  4929                           ;MachineConfig.c: 64: ADIE = 0;
  4930  0040EE  9C9D               	bcf	3997,6,c	;volatile
  4931                           
  4932                           ;MachineConfig.c: 65: (INTCONbits.GIE = 0);
  4933  0040F0  9EF2               	bcf	intcon,7,c	;volatile
  4934  0040F2  0012               	return		;funcret
  4935  0040F4                     __end_of_machineConfig:
  4936                           	opt stack 0
  4937                           tblptru	equ	0xFF8
  4938                           tblptrh	equ	0xFF7
  4939                           tblptrl	equ	0xFF6
  4940                           tablat	equ	0xFF5
  4941                           prodh	equ	0xFF4
  4942                           prodl	equ	0xFF3
  4943                           intcon	equ	0xFF2
  4944                           intcon2	equ	0xFF1
  4945                           intcon3	equ	0xFF0
  4946                           postinc0	equ	0xFEE
  4947                           wreg	equ	0xFE8
  4948                           postdec1	equ	0xFE5
  4949                           fsr1l	equ	0xFE1
  4950                           indf2	equ	0xFDF
  4951                           postinc2	equ	0xFDE
  4952                           postdec2	equ	0xFDD
  4953                           fsr2h	equ	0xFDA
  4954                           fsr2l	equ	0xFD9
  4955                           status	equ	0xFD8
  4956                           
  4957 ;; *************** function _logRun *****************
  4958 ;; Defined at:
  4959 ;;		line 84 in file "EEPROM.c"
  4960 ;; Parameters:    Size  Location     Type
  4961 ;;		None
  4962 ;; Auto vars:     Size  Location     Type
  4963 ;;  byte_i          1   53[BANK0 ] unsigned char 
  4964 ;;  i               2   55[BANK0 ] int 
  4965 ;;  num             1   49[BANK0 ] unsigned char 
  4966 ;;  addr            2   57[BANK0 ] unsigned short 
  4967 ;;  byte11          1   54[BANK0 ] unsigned char 
  4968 ;;  byte3           1   52[BANK0 ] unsigned char 
  4969 ;;  byte2           1   51[BANK0 ] unsigned char 
  4970 ;;  byte1           1   50[BANK0 ] unsigned char 
  4971 ;; Return value:  Size  Location     Type
  4972 ;;                  1    wreg      void 
  4973 ;; Registers used:
  4974 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4975 ;; Tracked objects:
  4976 ;;		On entry : 0/0
  4977 ;;		On exit  : 0/0
  4978 ;;		Unchanged: 0/0
  4979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4980 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4981 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4982 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4983 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4984 ;;Total ram usage:       10 bytes
  4985 ;; Hardware stack levels used:    1
  4986 ;; Hardware stack levels required when called:   11
  4987 ;; This function calls:
  4988 ;;		_EEPROM_read
  4989 ;;		_EEPROM_write
  4990 ;; This function is called by:
  4991 ;;		_main
  4992 ;; This function uses a non-reentrant model
  4993 ;;
  4994                           
  4995                           	psect	text13
  4996  00302E                     __ptext13:
  4997                           	opt stack 0
  4998  00302E                     _logRun:
  4999                           	opt stack 19
  5000                           
  5001                           ;EEPROM.c: 97: sel = EEPROM_read(0);
  5002                           
  5003                           ;incstack = 0
  5004  00302E  0E00               	movlw	0
  5005  003030  0100               	movlb	0	; () banked
  5006  003032  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  5007  003034  0E00               	movlw	0
  5008  003036  6F80               	movwf	EEPROM_read@address& (0+255),b
  5009  003038  EC99  F024         	call	_EEPROM_read	;wreg free
  5010  00303C  0100               	movlb	0	; () banked
  5011  00303E  6FFD               	movwf	_sel& (0+255),b
  5012                           
  5013                           ; BSR set to: 0
  5014                           ;EEPROM.c: 98: unsigned short addr = 1 + 11 * sel;
  5015  003040  0100               	movlb	0	; () banked
  5016  003042  51FD               	movf	_sel& (0+255),w,b
  5017  003044  0D0B               	mullw	11
  5018  003046  0E01               	movlw	1
  5019  003048  24F3               	addwf	prodl,w,c
  5020  00304A  0100               	movlb	0	; () banked
  5021  00304C  6FB9               	movwf	logRun@addr& (0+255),b
  5022  00304E  0E00               	movlw	0
  5023  003050  20F4               	addwfc	prodh,w,c
  5024  003052  0100               	movlb	0	; () banked
  5025  003054  6FBA               	movwf	(logRun@addr+1)& (0+255),b
  5026                           
  5027                           ; BSR set to: 0
  5028                           ;EEPROM.c: 101: if (sel < 3){
  5029  003056  0E03               	movlw	3
  5030  003058  0100               	movlb	0	; () banked
  5031  00305A  61FD               	cpfslt	_sel& (0+255),b
  5032  00305C  D00E               	goto	l8196
  5033                           
  5034                           ; BSR set to: 0
  5035                           ;EEPROM.c: 102: unsigned char num = sel+1;
  5036  00305E  0100               	movlb	0	; () banked
  5037  003060  29FD               	incf	_sel& (0+255),w,b
  5038  003062  0100               	movlb	0	; () banked
  5039  003064  6FB1               	movwf	logRun@num& (0+255),b
  5040                           
  5041                           ; BSR set to: 0
  5042                           ;EEPROM.c: 103: EEPROM_write(0, num);
  5043  003066  0E00               	movlw	0
  5044  003068  0100               	movlb	0	; () banked
  5045  00306A  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  5046  00306C  0E00               	movlw	0
  5047  00306E  6FAB               	movwf	EEPROM_write@address& (0+255),b
  5048  003070  C0B1  F0AD         	movff	logRun@num,EEPROM_write@data
  5049  003074  EC5D  F01A         	call	_EEPROM_write	;wreg free
  5050                           
  5051                           ;EEPROM.c: 104: }
  5052  003078  D00A               	goto	l8198
  5053  00307A                     l8196:
  5054                           
  5055                           ;EEPROM.c: 105: else{
  5056                           ;EEPROM.c: 106: EEPROM_write(0, 0);
  5057  00307A  0E00               	movlw	0
  5058  00307C  0100               	movlb	0	; () banked
  5059  00307E  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  5060  003080  0E00               	movlw	0
  5061  003082  6FAB               	movwf	EEPROM_write@address& (0+255),b
  5062  003084  0E00               	movlw	0
  5063  003086  0100               	movlb	0	; () banked
  5064  003088  6FAD               	movwf	EEPROM_write@data& (0+255),b
  5065  00308A  EC5D  F01A         	call	_EEPROM_write	;wreg free
  5066  00308E                     l8198:
  5067                           
  5068                           ;EEPROM.c: 107: }
  5069                           ;EEPROM.c: 110: unsigned char byte1 = 0b10000000 | count_total;
  5070  00308E  0100               	movlb	0	; () banked
  5071  003090  51FE               	movf	_count_total& (0+255),w,b
  5072  003092  0980               	iorlw	128
  5073  003094  0100               	movlb	0	; () banked
  5074  003096  6FB2               	movwf	logRun@byte1& (0+255),b
  5075                           
  5076                           ; BSR set to: 0
  5077                           ;EEPROM.c: 111: EEPROM_write(addr, byte1);
  5078  003098  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  5079  00309C  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  5080  0030A0  C0B2  F0AD         	movff	logRun@byte1,EEPROM_write@data
  5081  0030A4  EC5D  F01A         	call	_EEPROM_write	;wreg free
  5082                           
  5083                           ;EEPROM.c: 112: addr++;
  5084  0030A8  0100               	movlb	0	; () banked
  5085  0030AA  4BB9               	infsnz	logRun@addr& (0+255),f,b
  5086  0030AC  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  5087                           
  5088                           ; BSR set to: 0
  5089                           ;EEPROM.c: 115: unsigned char byte2 = (count_pop_no_tab << 4) | count_pop_w_tab;
  5090  0030AE  3861               	swapf	_count_pop_no_tab,w,c
  5091  0030B0  0BF0               	andlw	240
  5092  0030B2  1063               	iorwf	_count_pop_w_tab,w,c
  5093  0030B4  0100               	movlb	0	; () banked
  5094  0030B6  6FB3               	movwf	logRun@byte2& (0+255),b
  5095                           
  5096                           ; BSR set to: 0
  5097                           ;EEPROM.c: 116: EEPROM_write(addr, byte2);
  5098  0030B8  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  5099  0030BC  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  5100  0030C0  C0B3  F0AD         	movff	logRun@byte2,EEPROM_write@data
  5101  0030C4  EC5D  F01A         	call	_EEPROM_write	;wreg free
  5102                           
  5103                           ;EEPROM.c: 117: addr++;
  5104  0030C8  0100               	movlb	0	; () banked
  5105  0030CA  4BB9               	infsnz	logRun@addr& (0+255),f,b
  5106  0030CC  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  5107                           
  5108                           ; BSR set to: 0
  5109                           ;EEPROM.c: 118: unsigned char byte3 = (count_can_w_lab << 4) | count_can_no_lab;
  5110  0030CE  385F               	swapf	_count_can_w_lab,w,c
  5111  0030D0  0BF0               	andlw	240
  5112  0030D2  105D               	iorwf	_count_can_no_lab,w,c
  5113  0030D4  0100               	movlb	0	; () banked
  5114  0030D6  6FB4               	movwf	logRun@byte3& (0+255),b
  5115                           
  5116                           ; BSR set to: 0
  5117                           ;EEPROM.c: 119: EEPROM_write(addr, byte3);
  5118  0030D8  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  5119  0030DC  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  5120  0030E0  C0B4  F0AD         	movff	logRun@byte3,EEPROM_write@data
  5121  0030E4  EC5D  F01A         	call	_EEPROM_write	;wreg free
  5122                           
  5123                           ;EEPROM.c: 120: addr++;
  5124  0030E8  0100               	movlb	0	; () banked
  5125  0030EA  4BB9               	infsnz	logRun@addr& (0+255),f,b
  5126  0030EC  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  5127                           
  5128                           ; BSR set to: 0
  5129                           ;EEPROM.c: 123: for(int i = 0; i < 7; i++){
  5130  0030EE  0E00               	movlw	0
  5131  0030F0  0100               	movlb	0	; () banked
  5132  0030F2  6FB8               	movwf	(logRun@i+1)& (0+255),b
  5133  0030F4  0E00               	movlw	0
  5134  0030F6  6FB7               	movwf	logRun@i& (0+255),b
  5135                           
  5136                           ; BSR set to: 0
  5137  0030F8  0100               	movlb	0	; () banked
  5138  0030FA  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  5139  0030FC  D008               	goto	l8222
  5140  0030FE  0100               	movlb	0	; () banked
  5141  003100  51B8               	movf	(logRun@i+1)& (0+255),w,b
  5142  003102  E128               	bnz	l959
  5143  003104  0E07               	movlw	7
  5144  003106  0100               	movlb	0	; () banked
  5145  003108  5DB7               	subwf	logRun@i& (0+255),w,b
  5146  00310A  B0D8               	btfsc	status,0,c
  5147  00310C  D023               	goto	l959
  5148  00310E                     l8222:
  5149                           
  5150                           ; BSR set to: 0
  5151                           ;EEPROM.c: 124: unsigned char byte_i = startTime[i];
  5152  00310E  90D8               	bcf	status,0,c
  5153  003110  0100               	movlb	0	; () banked
  5154  003112  35B7               	rlcf	logRun@i& (0+255),w,b
  5155  003114  6ED9               	movwf	fsr2l,c
  5156  003116  0100               	movlb	0	; () banked
  5157  003118  35B8               	rlcf	(logRun@i+1)& (0+255),w,b
  5158  00311A  6EDA               	movwf	fsr2h,c
  5159  00311C  0E0E               	movlw	low _startTime
  5160  00311E  26D9               	addwf	fsr2l,f,c
  5161  003120  0E01               	movlw	high _startTime
  5162  003122  22DA               	addwfc	fsr2h,f,c
  5163  003124  50DF               	movf	indf2,w,c
  5164  003126  0100               	movlb	0	; () banked
  5165  003128  6FB5               	movwf	logRun@byte_i& (0+255),b
  5166                           
  5167                           ; BSR set to: 0
  5168                           ;EEPROM.c: 125: EEPROM_write(addr, byte_i);
  5169  00312A  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  5170  00312E  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  5171  003132  C0B5  F0AD         	movff	logRun@byte_i,EEPROM_write@data
  5172  003136  EC5D  F01A         	call	_EEPROM_write	;wreg free
  5173                           
  5174                           ;EEPROM.c: 126: addr++;
  5175  00313A  0100               	movlb	0	; () banked
  5176  00313C  4BB9               	infsnz	logRun@addr& (0+255),f,b
  5177  00313E  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  5178                           
  5179                           ; BSR set to: 0
  5180  003140  0100               	movlb	0	; () banked
  5181  003142  4BB7               	infsnz	logRun@i& (0+255),f,b
  5182  003144  2BB8               	incf	(logRun@i+1)& (0+255),f,b
  5183                           
  5184                           ; BSR set to: 0
  5185  003146  0100               	movlb	0	; () banked
  5186  003148  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  5187  00314A  D7E1               	goto	l8222
  5188  00314C  0100               	movlb	0	; () banked
  5189  00314E  51B8               	movf	(logRun@i+1)& (0+255),w,b
  5190  003150  E101               	bnz	u7130
  5191  003152  D7D8               	goto	L5
  5192  003154                     u7130:
  5193  003154                     l959:
  5194                           
  5195                           ; BSR set to: 0
  5196                           ;EEPROM.c: 127: }
  5197                           ;EEPROM.c: 130: unsigned char byte11 = total_time;
  5198  003154  C0F8  F0B6         	movff	_total_time,logRun@byte11
  5199                           
  5200                           ; BSR set to: 0
  5201                           ;EEPROM.c: 131: EEPROM_write(addr, byte11);
  5202  003158  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  5203  00315C  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  5204  003160  C0B6  F0AD         	movff	logRun@byte11,EEPROM_write@data
  5205  003164  EC5D  F01A         	call	_EEPROM_write	;wreg free
  5206  003168  0012               	return		;funcret
  5207  00316A                     __end_of_logRun:
  5208                           	opt stack 0
  5209                           tblptru	equ	0xFF8
  5210                           tblptrh	equ	0xFF7
  5211                           tblptrl	equ	0xFF6
  5212                           tablat	equ	0xFF5
  5213                           prodh	equ	0xFF4
  5214                           prodl	equ	0xFF3
  5215                           intcon	equ	0xFF2
  5216                           intcon2	equ	0xFF1
  5217                           intcon3	equ	0xFF0
  5218                           postinc0	equ	0xFEE
  5219                           wreg	equ	0xFE8
  5220                           postdec1	equ	0xFE5
  5221                           fsr1l	equ	0xFE1
  5222                           indf2	equ	0xFDF
  5223                           postinc2	equ	0xFDE
  5224                           postdec2	equ	0xFDD
  5225                           fsr2h	equ	0xFDA
  5226                           fsr2l	equ	0xFD9
  5227                           status	equ	0xFD8
  5228                           
  5229 ;; *************** function _EEPROM_write *****************
  5230 ;; Defined at:
  5231 ;;		line 32 in file "EEPROM.c"
  5232 ;; Parameters:    Size  Location     Type
  5233 ;;  address         2   43[BANK0 ] unsigned short 
  5234 ;;  data            1   45[BANK0 ] unsigned char 
  5235 ;; Auto vars:     Size  Location     Type
  5236 ;;  i               1   48[BANK0 ] unsigned char 
  5237 ;;  i               1   47[BANK0 ] unsigned char 
  5238 ;; Return value:  Size  Location     Type
  5239 ;;                  1    wreg      void 
  5240 ;; Registers used:
  5241 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5242 ;; Tracked objects:
  5243 ;;		On entry : 0/0
  5244 ;;		On exit  : 0/0
  5245 ;;		Unchanged: 0/0
  5246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5247 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5248 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5249 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5250 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5251 ;;Total ram usage:        6 bytes
  5252 ;; Hardware stack levels used:    1
  5253 ;; Hardware stack levels required when called:   10
  5254 ;; This function calls:
  5255 ;;		_EEPROM_read
  5256 ;;		_lcdInst
  5257 ;;		_printf
  5258 ;; This function is called by:
  5259 ;;		_Loading
  5260 ;;		_logRun
  5261 ;; This function uses a non-reentrant model
  5262 ;;
  5263                           
  5264                           	psect	text14
  5265  0034BA                     __ptext14:
  5266                           	opt stack 0
  5267  0034BA                     _EEPROM_write:
  5268                           	opt stack 18
  5269                           
  5270                           ;EEPROM.c: 33: EECON1bits.WREN = 1;
  5271                           
  5272                           ;incstack = 0
  5273  0034BA  84A6               	bsf	4006,2,c	;volatile
  5274                           
  5275                           ;EEPROM.c: 36: EEADRH = (unsigned char)(address >> 8);
  5276  0034BC  0100               	movlb	0	; () banked
  5277  0034BE  51AC               	movf	(EEPROM_write@address+1)& (0+255),w,b
  5278  0034C0  6EAA               	movwf	4010,c	;volatile
  5279                           
  5280                           ; BSR set to: 0
  5281                           ;EEPROM.c: 37: EEADR = (unsigned char)address;
  5282  0034C2  C0AB  FFA9         	movff	EEPROM_write@address,4009	;volatile
  5283                           
  5284                           ; BSR set to: 0
  5285                           ;EEPROM.c: 39: EEDATA = data;
  5286  0034C6  C0AD  FFA8         	movff	EEPROM_write@data,4008	;volatile
  5287                           
  5288                           ; BSR set to: 0
  5289                           ;EEPROM.c: 40: EECON1bits.EEPGD = 0;
  5290  0034CA  9EA6               	bcf	4006,7,c	;volatile
  5291                           
  5292                           ; BSR set to: 0
  5293                           ;EEPROM.c: 41: EECON1bits.CFGS = 0;
  5294  0034CC  9CA6               	bcf	4006,6,c	;volatile
  5295                           
  5296                           ; BSR set to: 0
  5297                           ;EEPROM.c: 43: (INTCONbits.GIE = 0);
  5298  0034CE  9EF2               	bcf	intcon,7,c	;volatile
  5299                           
  5300                           ;EEPROM.c: 45: EECON2 = 0x55;
  5301  0034D0  0E55               	movlw	85
  5302  0034D2  6EA7               	movwf	4007,c	;volatile
  5303                           
  5304                           ;EEPROM.c: 46: EECON2 = 0x0AA;
  5305  0034D4  0EAA               	movlw	170
  5306  0034D6  6EA7               	movwf	4007,c	;volatile
  5307                           
  5308                           ; BSR set to: 0
  5309                           ;EEPROM.c: 47: EECON1bits.WR = 1;
  5310  0034D8  82A6               	bsf	4006,1,c	;volatile
  5311                           
  5312                           ; BSR set to: 0
  5313                           ;EEPROM.c: 48: (INTCONbits.GIE = 1);
  5314  0034DA  8EF2               	bsf	intcon,7,c	;volatile
  5315  0034DC                     l937:
  5316  0034DC  A8A1               	btfss	4001,4,c	;volatile
  5317  0034DE  D7FE               	goto	l937
  5318                           
  5319                           ;EEPROM.c: 53: PIR2bits.EEIF = 0;
  5320  0034E0  98A1               	bcf	4001,4,c	;volatile
  5321                           
  5322                           ;EEPROM.c: 54: EECON1bits.WREN = 0;
  5323  0034E2  94A6               	bcf	4006,2,c	;volatile
  5324                           
  5325                           ;EEPROM.c: 57: if(debug){
  5326  0034E4  5065               	movf	_debug,w,c
  5327  0034E6  1066               	iorwf	_debug+1,w,c
  5328  0034E8  B4D8               	btfsc	status,2,c
  5329  0034EA  0012               	return	
  5330                           
  5331                           ;EEPROM.c: 58: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  5332  0034EC  0E01               	movlw	1
  5333  0034EE  ECD6  F024         	call	_lcdInst
  5334  0034F2  0E68               	movlw	104
  5335  0034F4  0100               	movlb	0	; () banked
  5336  0034F6  6FAE               	movwf	??_EEPROM_write& (0+255),b
  5337  0034F8  0EE4               	movlw	228
  5338  0034FA                     u7487:
  5339  0034FA  2EE8               	decfsz	wreg,f,c
  5340  0034FC  D7FE               	bra	u7487
  5341  0034FE  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  5342  003500  D7FC               	bra	u7487
  5343  003502  F000               	nop	
  5344                           
  5345                           ;EEPROM.c: 59: lcdInst(0b10000000);;
  5346  003504  0E80               	movlw	128
  5347  003506  ECD6  F024         	call	_lcdInst
  5348                           
  5349                           ;EEPROM.c: 60: if(EEPROM_read(address)==data){
  5350  00350A  C0AB  F080         	movff	EEPROM_write@address,EEPROM_read@address
  5351  00350E  C0AC  F081         	movff	EEPROM_write@address+1,EEPROM_read@address+1
  5352  003512  EC99  F024         	call	_EEPROM_read	;wreg free
  5353  003516  0100               	movlb	0	; () banked
  5354  003518  19AD               	xorwf	EEPROM_write@data& (0+255),w,b
  5355  00351A  A4D8               	btfss	status,2,c
  5356  00351C  D024               	goto	l6210
  5357                           
  5358                           ; BSR set to: 0
  5359                           ;EEPROM.c: 61: printf("(data: %u, addr: %u)", data, address);
  5360  00351E  0E34               	movlw	low STR_66
  5361  003520  0100               	movlb	0	; () banked
  5362  003522  6F8E               	movwf	printf@f& (0+255),b
  5363  003524  0EFB               	movlw	high STR_66
  5364  003526  0100               	movlb	0	; () banked
  5365  003528  6F8F               	movwf	(printf@f+1)& (0+255),b
  5366  00352A  C0AD  F090         	movff	EEPROM_write@data,?_printf+2
  5367  00352E  0100               	movlb	0	; () banked
  5368  003530  6B91               	clrf	(?_printf+3)& (0+255),b
  5369  003532  C0AB  F092         	movff	EEPROM_write@address,?_printf+4
  5370  003536  C0AC  F093         	movff	EEPROM_write@address+1,?_printf+5
  5371  00353A  ECB8  F008         	call	_printf	;wreg free
  5372                           
  5373                           ;EEPROM.c: 62: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));}
      +                          ;
  5374  00353E  0E00               	movlw	0
  5375  003540  0100               	movlb	0	; () banked
  5376  003542  6FAF               	movwf	EEPROM_write@i& (0+255),b
  5377  003544                     l6202:
  5378                           
  5379                           ; BSR set to: 0
  5380  003544  0E63               	movlw	99
  5381  003546  0100               	movlb	0	; () banked
  5382  003548  65AF               	cpfsgt	EEPROM_write@i& (0+255),b
  5383  00354A  D001               	goto	l6206
  5384  00354C  0012               	return	
  5385  00354E                     l6206:
  5386                           
  5387                           ; BSR set to: 0
  5388  00354E  0E68               	movlw	104
  5389  003550  0100               	movlb	0	; () banked
  5390  003552  6FAE               	movwf	??_EEPROM_write& (0+255),b
  5391  003554  0EE4               	movlw	228
  5392  003556                     u7497:
  5393  003556  2EE8               	decfsz	wreg,f,c
  5394  003558  D7FE               	bra	u7497
  5395  00355A  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  5396  00355C  D7FC               	bra	u7497
  5397  00355E  F000               	nop	
  5398  003560  0100               	movlb	0	; () banked
  5399  003562  2BAF               	incf	EEPROM_write@i& (0+255),f,b
  5400  003564  D7EF               	goto	l6202
  5401  003566                     l6210:
  5402                           
  5403                           ; BSR set to: 0
  5404                           ;EEPROM.c: 64: else{ printf("FAILED"); for(char i=0;i<100;i++){_delay((unsigned long)((1
      +                          0)*(32000000/4000.0)));}; }
  5405  003566  0EBD               	movlw	low STR_67
  5406  003568  0100               	movlb	0	; () banked
  5407  00356A  6F8E               	movwf	printf@f& (0+255),b
  5408  00356C  0EFF               	movlw	high STR_67
  5409  00356E  0100               	movlb	0	; () banked
  5410  003570  6F8F               	movwf	(printf@f+1)& (0+255),b
  5411  003572  ECB8  F008         	call	_printf	;wreg free
  5412  003576  0E00               	movlw	0
  5413  003578  0100               	movlb	0	; () banked
  5414  00357A  6FB0               	movwf	EEPROM_write@i_1329& (0+255),b
  5415  00357C                     l6214:
  5416                           
  5417                           ; BSR set to: 0
  5418  00357C  0E63               	movlw	99
  5419  00357E  0100               	movlb	0	; () banked
  5420  003580  65B0               	cpfsgt	EEPROM_write@i_1329& (0+255),b
  5421  003582  D001               	goto	l6218
  5422  003584  0012               	return	
  5423  003586                     l6218:
  5424                           
  5425                           ; BSR set to: 0
  5426  003586  0E68               	movlw	104
  5427  003588  0100               	movlb	0	; () banked
  5428  00358A  6FAE               	movwf	??_EEPROM_write& (0+255),b
  5429  00358C  0EE4               	movlw	228
  5430  00358E                     u7507:
  5431  00358E  2EE8               	decfsz	wreg,f,c
  5432  003590  D7FE               	bra	u7507
  5433  003592  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  5434  003594  D7FC               	bra	u7507
  5435  003596  F000               	nop	
  5436  003598  0100               	movlb	0	; () banked
  5437  00359A  2BB0               	incf	EEPROM_write@i_1329& (0+255),f,b
  5438  00359C  D7EF               	goto	l6214
  5439  00359E                     __end_of_EEPROM_write:
  5440                           	opt stack 0
  5441                           tblptru	equ	0xFF8
  5442                           tblptrh	equ	0xFF7
  5443                           tblptrl	equ	0xFF6
  5444                           tablat	equ	0xFF5
  5445                           prodh	equ	0xFF4
  5446                           prodl	equ	0xFF3
  5447                           intcon	equ	0xFF2
  5448                           intcon2	equ	0xFF1
  5449                           intcon3	equ	0xFF0
  5450                           postinc0	equ	0xFEE
  5451                           wreg	equ	0xFE8
  5452                           postdec1	equ	0xFE5
  5453                           fsr1l	equ	0xFE1
  5454                           indf2	equ	0xFDF
  5455                           postinc2	equ	0xFDE
  5456                           postdec2	equ	0xFDD
  5457                           fsr2h	equ	0xFDA
  5458                           fsr2l	equ	0xFD9
  5459                           status	equ	0xFD8
  5460                           
  5461 ;; *************** function _EEPROM_read *****************
  5462 ;; Defined at:
  5463 ;;		line 68 in file "EEPROM.c"
  5464 ;; Parameters:    Size  Location     Type
  5465 ;;  address         2    0[BANK0 ] unsigned short 
  5466 ;; Auto vars:     Size  Location     Type
  5467 ;;		None
  5468 ;; Return value:  Size  Location     Type
  5469 ;;                  1    wreg      unsigned char 
  5470 ;; Registers used:
  5471 ;;		wreg, status,2
  5472 ;; Tracked objects:
  5473 ;;		On entry : 0/0
  5474 ;;		On exit  : 0/0
  5475 ;;		Unchanged: 0/0
  5476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5477 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5478 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5479 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5480 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5481 ;;Total ram usage:        2 bytes
  5482 ;; Hardware stack levels used:    1
  5483 ;; Hardware stack levels required when called:    7
  5484 ;; This function calls:
  5485 ;;		Nothing
  5486 ;; This function is called by:
  5487 ;;		_Loading
  5488 ;;		_EEPROM_write
  5489 ;;		_logRun
  5490 ;; This function uses a non-reentrant model
  5491 ;;
  5492                           
  5493                           	psect	text15
  5494  004932                     __ptext15:
  5495                           	opt stack 0
  5496  004932                     _EEPROM_read:
  5497                           	opt stack 20
  5498                           
  5499                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
  5500                           
  5501                           ;incstack = 0
  5502  004932  0100               	movlb	0	; () banked
  5503  004934  5181               	movf	(EEPROM_read@address+1)& (0+255),w,b
  5504  004936  6EAA               	movwf	4010,c	;volatile
  5505                           
  5506                           ; BSR set to: 0
  5507                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
  5508  004938  C080  FFA9         	movff	EEPROM_read@address,4009	;volatile
  5509                           
  5510                           ; BSR set to: 0
  5511                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
  5512  00493C  9EA6               	bcf	4006,7,c	;volatile
  5513                           
  5514                           ; BSR set to: 0
  5515                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
  5516  00493E  9CA6               	bcf	4006,6,c	;volatile
  5517                           
  5518                           ; BSR set to: 0
  5519                           ;EEPROM.c: 75: EECON1bits.RD = 1;
  5520  004940  80A6               	bsf	4006,0,c	;volatile
  5521  004942                     l950:
  5522  004942  B0A6               	btfsc	4006,0,c	;volatile
  5523  004944  D7FE               	goto	l950
  5524                           
  5525                           ;EEPROM.c: 81: return EEDATA;
  5526  004946  50A8               	movf	4008,w,c	;volatile
  5527  004948  0012               	return	
  5528  00494A                     __end_of_EEPROM_read:
  5529                           	opt stack 0
  5530                           tblptru	equ	0xFF8
  5531                           tblptrh	equ	0xFF7
  5532                           tblptrl	equ	0xFF6
  5533                           tablat	equ	0xFF5
  5534                           prodh	equ	0xFF4
  5535                           prodl	equ	0xFF3
  5536                           intcon	equ	0xFF2
  5537                           intcon2	equ	0xFF1
  5538                           intcon3	equ	0xFF0
  5539                           postinc0	equ	0xFEE
  5540                           wreg	equ	0xFE8
  5541                           postdec1	equ	0xFE5
  5542                           fsr1l	equ	0xFE1
  5543                           indf2	equ	0xFDF
  5544                           postinc2	equ	0xFDE
  5545                           postdec2	equ	0xFDD
  5546                           fsr2h	equ	0xFDA
  5547                           fsr2l	equ	0xFD9
  5548                           status	equ	0xFD8
  5549                           
  5550 ;; *************** function _initUI *****************
  5551 ;; Defined at:
  5552 ;;		line 62 in file "UI.c"
  5553 ;; Parameters:    Size  Location     Type
  5554 ;;		None
  5555 ;; Auto vars:     Size  Location     Type
  5556 ;;		None
  5557 ;; Return value:  Size  Location     Type
  5558 ;;                  1    wreg      void 
  5559 ;; Registers used:
  5560 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5561 ;; Tracked objects:
  5562 ;;		On entry : 0/0
  5563 ;;		On exit  : 0/0
  5564 ;;		Unchanged: 0/0
  5565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5566 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5567 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5568 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5569 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5570 ;;Total ram usage:        0 bytes
  5571 ;; Hardware stack levels used:    1
  5572 ;; Hardware stack levels required when called:   12
  5573 ;; This function calls:
  5574 ;;		_change_state_to_menu_start
  5575 ;;		_loadRTC
  5576 ;; This function is called by:
  5577 ;;		_main
  5578 ;; This function uses a non-reentrant model
  5579 ;;
  5580                           
  5581                           	psect	text16
  5582  004704                     __ptext16:
  5583                           	opt stack 0
  5584  004704                     _initUI:
  5585                           	opt stack 18
  5586                           
  5587                           ;UI.c: 63: (INTCONbits.GIE = 1);
  5588                           
  5589                           ;incstack = 0
  5590  004704  8EF2               	bsf	intcon,7,c	;volatile
  5591                           
  5592                           ;UI.c: 64: machine_state = UI_state;
  5593  004706  0E00               	movlw	0
  5594  004708  0100               	movlb	0	; () banked
  5595  00470A  6FFC               	movwf	_machine_state& (0+255),b
  5596                           
  5597                           ;UI.c: 65: logstate = 0;
  5598  00470C  0E00               	movlw	0
  5599  00470E  0100               	movlb	0	; () banked
  5600  004710  6FF7               	movwf	(_logstate+1)& (0+255),b
  5601  004712  0E00               	movlw	0
  5602  004714  6FF6               	movwf	_logstate& (0+255),b
  5603                           
  5604                           ; BSR set to: 0
  5605                           ;UI.c: 67: if(RTCflag){
  5606  004716  0100               	movlb	0	; () banked
  5607  004718  51DE               	movf	_RTCflag& (0+255),w,b
  5608  00471A  0100               	movlb	0	; () banked
  5609  00471C  11DF               	iorwf	(_RTCflag+1)& (0+255),w,b
  5610  00471E  A4D8               	btfss	status,2,c
  5611                           
  5612                           ; BSR set to: 0
  5613                           ;UI.c: 68: loadRTC();
  5614  004720  ECC6  F01D         	call	_loadRTC	;wreg free
  5615                           
  5616                           ;UI.c: 69: }
  5617                           ;UI.c: 71: change_state_to_menu_start();
  5618  004724  ECC7  F023         	call	_change_state_to_menu_start	;wreg free
  5619                           
  5620                           ;UI.c: 72: firstboot = 1;
  5621  004728  0E00               	movlw	0
  5622  00472A  6E76               	movwf	_firstboot+1,c
  5623  00472C  0E01               	movlw	1
  5624  00472E  6E75               	movwf	_firstboot,c
  5625  004730  0012               	return		;funcret
  5626  004732                     __end_of_initUI:
  5627                           	opt stack 0
  5628                           tblptru	equ	0xFF8
  5629                           tblptrh	equ	0xFF7
  5630                           tblptrl	equ	0xFF6
  5631                           tablat	equ	0xFF5
  5632                           prodh	equ	0xFF4
  5633                           prodl	equ	0xFF3
  5634                           intcon	equ	0xFF2
  5635                           intcon2	equ	0xFF1
  5636                           intcon3	equ	0xFF0
  5637                           postinc0	equ	0xFEE
  5638                           wreg	equ	0xFE8
  5639                           postdec1	equ	0xFE5
  5640                           fsr1l	equ	0xFE1
  5641                           indf2	equ	0xFDF
  5642                           postinc2	equ	0xFDE
  5643                           postdec2	equ	0xFDD
  5644                           fsr2h	equ	0xFDA
  5645                           fsr2l	equ	0xFD9
  5646                           status	equ	0xFD8
  5647                           
  5648 ;; *************** function _loadRTC *****************
  5649 ;; Defined at:
  5650 ;;		line 28 in file "RTC.c"
  5651 ;; Parameters:    Size  Location     Type
  5652 ;;		None
  5653 ;; Auto vars:     Size  Location     Type
  5654 ;;  i               2   22[BANK0 ] int 
  5655 ;; Return value:  Size  Location     Type
  5656 ;;                  1    wreg      void 
  5657 ;; Registers used:
  5658 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5659 ;; Tracked objects:
  5660 ;;		On entry : 0/0
  5661 ;;		On exit  : 0/0
  5662 ;;		Unchanged: 0/0
  5663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5664 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5665 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5666 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5667 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5668 ;;Total ram usage:        3 bytes
  5669 ;; Hardware stack levels used:    1
  5670 ;; Hardware stack levels required when called:    9
  5671 ;; This function calls:
  5672 ;;		_I2C_Master_Init
  5673 ;;		_I2C_Master_Start
  5674 ;;		_I2C_Master_Stop
  5675 ;;		_I2C_Master_Write
  5676 ;; This function is called by:
  5677 ;;		_initUI
  5678 ;; This function uses a non-reentrant model
  5679 ;;
  5680                           
  5681                           	psect	text17
  5682  003B8C                     __ptext17:
  5683                           	opt stack 0
  5684  003B8C                     _loadRTC:
  5685                           	opt stack 20
  5686                           
  5687                           ;RTC.c: 30: I2C_Master_Init(10000);
  5688                           
  5689                           ;incstack = 0
  5690  003B8C  0E10               	movlw	16
  5691  003B8E  0100               	movlb	0	; () banked
  5692  003B90  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  5693  003B92  0E27               	movlw	39
  5694  003B94  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  5695  003B96  0E00               	movlw	0
  5696  003B98  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  5697  003B9A  0E00               	movlw	0
  5698  003B9C  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  5699  003B9E  EC1C  F020         	call	_I2C_Master_Init	;wreg free
  5700                           
  5701                           ;RTC.c: 32: (INTCONbits.GIE = 0);
  5702  003BA2  9EF2               	bcf	intcon,7,c	;volatile
  5703                           
  5704                           ;RTC.c: 34: I2C_Master_Start();
  5705  003BA4  ECFC  F024         	call	_I2C_Master_Start	;wreg free
  5706                           
  5707                           ;RTC.c: 35: I2C_Master_Write(0b11010000);
  5708  003BA8  0E00               	movlw	0
  5709  003BAA  0100               	movlb	0	; () banked
  5710  003BAC  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5711  003BAE  0ED0               	movlw	208
  5712  003BB0  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5713  003BB2  ECEA  F024         	call	_I2C_Master_Write	;wreg free
  5714                           
  5715                           ;RTC.c: 36: I2C_Master_Write(0x00);
  5716  003BB6  0E00               	movlw	0
  5717  003BB8  0100               	movlb	0	; () banked
  5718  003BBA  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5719  003BBC  0E00               	movlw	0
  5720  003BBE  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5721  003BC0  ECEA  F024         	call	_I2C_Master_Write	;wreg free
  5722                           
  5723                           ;RTC.c: 37: for(int i = 0; i<7; i++){
  5724  003BC4  0E00               	movlw	0
  5725  003BC6  0100               	movlb	0	; () banked
  5726  003BC8  6F97               	movwf	(loadRTC@i+1)& (0+255),b
  5727  003BCA  0E00               	movlw	0
  5728  003BCC  6F96               	movwf	loadRTC@i& (0+255),b
  5729  003BCE                     l6344:
  5730                           
  5731                           ; BSR set to: 0
  5732  003BCE  0100               	movlb	0	; () banked
  5733  003BD0  BF97               	btfsc	(loadRTC@i+1)& (0+255),7,b
  5734  003BD2  D008               	goto	l6348
  5735  003BD4  0100               	movlb	0	; () banked
  5736  003BD6  5197               	movf	(loadRTC@i+1)& (0+255),w,b
  5737  003BD8  E11B               	bnz	l6354
  5738  003BDA  0E07               	movlw	7
  5739  003BDC  0100               	movlb	0	; () banked
  5740  003BDE  5D96               	subwf	loadRTC@i& (0+255),w,b
  5741  003BE0  B0D8               	btfsc	status,0,c
  5742  003BE2  D016               	goto	l6354
  5743  003BE4                     l6348:
  5744                           
  5745                           ; BSR set to: 0
  5746                           ;RTC.c: 38: I2C_Master_Write(time[i]);
  5747  003BE4  0E24               	movlw	low _time
  5748  003BE6  0100               	movlb	0	; () banked
  5749  003BE8  2596               	addwf	loadRTC@i& (0+255),w,b
  5750  003BEA  6ED9               	movwf	fsr2l,c
  5751  003BEC  0E01               	movlw	high _time
  5752  003BEE  0100               	movlb	0	; () banked
  5753  003BF0  2197               	addwfc	(loadRTC@i+1)& (0+255),w,b
  5754  003BF2  6EDA               	movwf	fsr2h,c
  5755  003BF4  50DF               	movf	indf2,w,c
  5756  003BF6  0100               	movlb	0	; () banked
  5757  003BF8  6F95               	movwf	??_loadRTC& (0+255),b
  5758  003BFA  0100               	movlb	0	; () banked
  5759  003BFC  5195               	movf	??_loadRTC& (0+255),w,b
  5760  003BFE  0100               	movlb	0	; () banked
  5761  003C00  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5762  003C02  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  5763  003C04  ECEA  F024         	call	_I2C_Master_Write	;wreg free
  5764  003C08  0100               	movlb	0	; () banked
  5765  003C0A  4B96               	infsnz	loadRTC@i& (0+255),f,b
  5766  003C0C  2B97               	incf	(loadRTC@i+1)& (0+255),f,b
  5767  003C0E  D7DF               	goto	l6344
  5768  003C10                     l6354:
  5769                           
  5770                           ; BSR set to: 0
  5771                           ;RTC.c: 39: }
  5772                           ;RTC.c: 40: I2C_Master_Stop();
  5773  003C10  ECF8  F024         	call	_I2C_Master_Stop	;wreg free
  5774                           
  5775                           ;RTC.c: 41: (INTCONbits.GIE = 1);
  5776  003C14  8EF2               	bsf	intcon,7,c	;volatile
  5777  003C16  0012               	return		;funcret
  5778  003C18                     __end_of_loadRTC:
  5779                           	opt stack 0
  5780                           tblptru	equ	0xFF8
  5781                           tblptrh	equ	0xFF7
  5782                           tblptrl	equ	0xFF6
  5783                           tablat	equ	0xFF5
  5784                           prodh	equ	0xFF4
  5785                           prodl	equ	0xFF3
  5786                           intcon	equ	0xFF2
  5787                           intcon2	equ	0xFF1
  5788                           intcon3	equ	0xFF0
  5789                           postinc0	equ	0xFEE
  5790                           wreg	equ	0xFE8
  5791                           postdec1	equ	0xFE5
  5792                           fsr1l	equ	0xFE1
  5793                           indf2	equ	0xFDF
  5794                           postinc2	equ	0xFDE
  5795                           postdec2	equ	0xFDD
  5796                           fsr2h	equ	0xFDA
  5797                           fsr2l	equ	0xFD9
  5798                           status	equ	0xFD8
  5799                           
  5800 ;; *************** function _I2C_Master_Init *****************
  5801 ;; Defined at:
  5802 ;;		line 15 in file "I2C.c"
  5803 ;; Parameters:    Size  Location     Type
  5804 ;;  c               4   13[BANK0 ] const unsigned long 
  5805 ;; Auto vars:     Size  Location     Type
  5806 ;;		None
  5807 ;; Return value:  Size  Location     Type
  5808 ;;                  1    wreg      void 
  5809 ;; Registers used:
  5810 ;;		wreg, status,2, status,0, cstack
  5811 ;; Tracked objects:
  5812 ;;		On entry : 0/0
  5813 ;;		On exit  : 0/0
  5814 ;;		Unchanged: 0/0
  5815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5816 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5817 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5818 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5819 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5820 ;;Total ram usage:        8 bytes
  5821 ;; Hardware stack levels used:    1
  5822 ;; Hardware stack levels required when called:    8
  5823 ;; This function calls:
  5824 ;;		___lldiv
  5825 ;; This function is called by:
  5826 ;;		_main
  5827 ;;		_loadRTC
  5828 ;; This function uses a non-reentrant model
  5829 ;;
  5830                           
  5831                           	psect	text18
  5832  004038                     __ptext18:
  5833                           	opt stack 0
  5834  004038                     _I2C_Master_Init:
  5835                           	opt stack 20
  5836                           
  5837                           ;I2C.c: 18: SSPSTAT = 0b00000000;
  5838                           
  5839                           ;incstack = 0
  5840  004038  0E00               	movlw	0
  5841  00403A  6EC7               	movwf	4039,c	;volatile
  5842                           
  5843                           ;I2C.c: 19: SSPCON1 = 0b00101000;
  5844  00403C  0E28               	movlw	40
  5845  00403E  6EC6               	movwf	4038,c	;volatile
  5846                           
  5847                           ;I2C.c: 20: SSPCON2 = 0b00000000;
  5848  004040  0E00               	movlw	0
  5849  004042  6EC5               	movwf	4037,c	;volatile
  5850                           
  5851                           ;I2C.c: 21: SSPADD = (32000000/(4*c))-1;
  5852  004044  0E00               	movlw	0
  5853  004046  0100               	movlb	0	; () banked
  5854  004048  6F80               	movwf	___lldiv@dividend& (0+255),b
  5855  00404A  0E48               	movlw	72
  5856  00404C  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  5857  00404E  0EE8               	movlw	232
  5858  004050  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  5859  004052  0E01               	movlw	1
  5860  004054  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  5861  004056  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  5862  00405A  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  5863  00405E  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  5864  004062  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  5865  004066  0E02               	movlw	2
  5866  004068                     u4615:
  5867  004068  90D8               	bcf	status,0,c
  5868  00406A  0100               	movlb	0	; () banked
  5869  00406C  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  5870  00406E  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  5871  004070  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  5872  004072  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  5873  004074  2EE8               	decfsz	wreg,f,c
  5874  004076  D7F8               	goto	u4615
  5875  004078  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  5876  00407C  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  5877  004080  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  5878  004084  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  5879  004088  ECC2  F01C         	call	___lldiv	;wreg free
  5880  00408C  0100               	movlb	0	; () banked
  5881  00408E  0580               	decf	?___lldiv& (0+255),w,b
  5882  004090  6EC8               	movwf	4040,c	;volatile
  5883                           
  5884                           ; BSR set to: 0
  5885                           ;I2C.c: 22: TRISC3 = 1;
  5886  004092  8694               	bsf	3988,3,c	;volatile
  5887                           
  5888                           ; BSR set to: 0
  5889                           ;I2C.c: 23: TRISC4 = 1;
  5890  004094  8894               	bsf	3988,4,c	;volatile
  5891                           
  5892                           ; BSR set to: 0
  5893  004096  0012               	return		;funcret
  5894  004098                     __end_of_I2C_Master_Init:
  5895                           	opt stack 0
  5896                           tblptru	equ	0xFF8
  5897                           tblptrh	equ	0xFF7
  5898                           tblptrl	equ	0xFF6
  5899                           tablat	equ	0xFF5
  5900                           prodh	equ	0xFF4
  5901                           prodl	equ	0xFF3
  5902                           intcon	equ	0xFF2
  5903                           intcon2	equ	0xFF1
  5904                           intcon3	equ	0xFF0
  5905                           postinc0	equ	0xFEE
  5906                           wreg	equ	0xFE8
  5907                           postdec1	equ	0xFE5
  5908                           fsr1l	equ	0xFE1
  5909                           indf2	equ	0xFDF
  5910                           postinc2	equ	0xFDE
  5911                           postdec2	equ	0xFDD
  5912                           fsr2h	equ	0xFDA
  5913                           fsr2l	equ	0xFD9
  5914                           status	equ	0xFD8
  5915                           
  5916 ;; *************** function ___lldiv *****************
  5917 ;; Defined at:
  5918 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  5919 ;; Parameters:    Size  Location     Type
  5920 ;;  dividend        4    0[BANK0 ] unsigned long 
  5921 ;;  divisor         4    4[BANK0 ] unsigned long 
  5922 ;; Auto vars:     Size  Location     Type
  5923 ;;  quotient        4    8[BANK0 ] unsigned long 
  5924 ;;  counter         1   12[BANK0 ] unsigned char 
  5925 ;; Return value:  Size  Location     Type
  5926 ;;                  4    0[BANK0 ] unsigned long 
  5927 ;; Registers used:
  5928 ;;		wreg, status,2, status,0
  5929 ;; Tracked objects:
  5930 ;;		On entry : 0/0
  5931 ;;		On exit  : 0/0
  5932 ;;		Unchanged: 0/0
  5933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5934 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5935 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5936 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5937 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5938 ;;Total ram usage:       13 bytes
  5939 ;; Hardware stack levels used:    1
  5940 ;; Hardware stack levels required when called:    7
  5941 ;; This function calls:
  5942 ;;		Nothing
  5943 ;; This function is called by:
  5944 ;;		_I2C_Master_Init
  5945 ;; This function uses a non-reentrant model
  5946 ;;
  5947                           
  5948                           	psect	text19
  5949  003984                     __ptext19:
  5950                           	opt stack 0
  5951  003984                     ___lldiv:
  5952                           	opt stack 20
  5953                           
  5954                           ; BSR set to: 0
  5955                           ;incstack = 0
  5956  003984  0E00               	movlw	0
  5957  003986  0100               	movlb	0	; () banked
  5958  003988  6F88               	movwf	___lldiv@quotient& (0+255),b
  5959  00398A  0E00               	movlw	0
  5960  00398C  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  5961  00398E  0E00               	movlw	0
  5962  003990  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  5963  003992  0E00               	movlw	0
  5964  003994  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  5965                           
  5966                           ; BSR set to: 0
  5967  003996  0100               	movlb	0	; () banked
  5968  003998  5184               	movf	___lldiv@divisor& (0+255),w,b
  5969  00399A  0100               	movlb	0	; () banked
  5970  00399C  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  5971  00399E  0100               	movlb	0	; () banked
  5972  0039A0  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  5973  0039A2  0100               	movlb	0	; () banked
  5974  0039A4  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  5975  0039A6  B4D8               	btfsc	status,2,c
  5976  0039A8  D042               	goto	l1702
  5977                           
  5978                           ; BSR set to: 0
  5979  0039AA  0E01               	movlw	1
  5980  0039AC  0100               	movlb	0	; () banked
  5981  0039AE  6F8C               	movwf	___lldiv@counter& (0+255),b
  5982  0039B0  D008               	goto	l5780
  5983  0039B2                     l5778:
  5984                           
  5985                           ; BSR set to: 0
  5986  0039B2  0100               	movlb	0	; () banked
  5987  0039B4  90D8               	bcf	status,0,c
  5988  0039B6  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  5989  0039B8  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  5990  0039BA  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  5991  0039BC  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  5992  0039BE  0100               	movlb	0	; () banked
  5993  0039C0  2B8C               	incf	___lldiv@counter& (0+255),f,b
  5994  0039C2                     l5780:
  5995                           
  5996                           ; BSR set to: 0
  5997  0039C2  0100               	movlb	0	; () banked
  5998  0039C4  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  5999  0039C6  D7F5               	goto	l5778
  6000  0039C8                     l5782:
  6001                           
  6002                           ; BSR set to: 0
  6003  0039C8  0100               	movlb	0	; () banked
  6004  0039CA  90D8               	bcf	status,0,c
  6005  0039CC  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  6006  0039CE  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  6007  0039D0  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  6008  0039D2  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  6009                           
  6010                           ; BSR set to: 0
  6011  0039D4  0100               	movlb	0	; () banked
  6012  0039D6  5184               	movf	___lldiv@divisor& (0+255),w,b
  6013  0039D8  0100               	movlb	0	; () banked
  6014  0039DA  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  6015  0039DC  0100               	movlb	0	; () banked
  6016  0039DE  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  6017  0039E0  0100               	movlb	0	; () banked
  6018  0039E2  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  6019  0039E4  0100               	movlb	0	; () banked
  6020  0039E6  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  6021  0039E8  0100               	movlb	0	; () banked
  6022  0039EA  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  6023  0039EC  0100               	movlb	0	; () banked
  6024  0039EE  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  6025  0039F0  0100               	movlb	0	; () banked
  6026  0039F2  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  6027  0039F4  A0D8               	btfss	status,0,c
  6028  0039F6  D012               	goto	l5790
  6029                           
  6030                           ; BSR set to: 0
  6031  0039F8  0100               	movlb	0	; () banked
  6032  0039FA  5184               	movf	___lldiv@divisor& (0+255),w,b
  6033  0039FC  0100               	movlb	0	; () banked
  6034  0039FE  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  6035  003A00  0100               	movlb	0	; () banked
  6036  003A02  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  6037  003A04  0100               	movlb	0	; () banked
  6038  003A06  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  6039  003A08  0100               	movlb	0	; () banked
  6040  003A0A  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  6041  003A0C  0100               	movlb	0	; () banked
  6042  003A0E  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  6043  003A10  0100               	movlb	0	; () banked
  6044  003A12  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  6045  003A14  0100               	movlb	0	; () banked
  6046  003A16  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  6047                           
  6048                           ; BSR set to: 0
  6049  003A18  0100               	movlb	0	; () banked
  6050  003A1A  8188               	bsf	___lldiv@quotient& (0+255),0,b
  6051  003A1C                     l5790:
  6052                           
  6053                           ; BSR set to: 0
  6054  003A1C  0100               	movlb	0	; () banked
  6055  003A1E  90D8               	bcf	status,0,c
  6056  003A20  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  6057  003A22  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  6058  003A24  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  6059  003A26  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  6060                           
  6061                           ; BSR set to: 0
  6062  003A28  0100               	movlb	0	; () banked
  6063  003A2A  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  6064  003A2C  D7CD               	goto	l5782
  6065  003A2E                     l1702:
  6066                           
  6067                           ; BSR set to: 0
  6068  003A2E  C088  F080         	movff	___lldiv@quotient,?___lldiv
  6069  003A32  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  6070  003A36  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  6071  003A3A  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  6072                           
  6073                           ; BSR set to: 0
  6074  003A3E  0012               	return		;funcret
  6075  003A40                     __end_of___lldiv:
  6076                           	opt stack 0
  6077                           tblptru	equ	0xFF8
  6078                           tblptrh	equ	0xFF7
  6079                           tblptrl	equ	0xFF6
  6080                           tablat	equ	0xFF5
  6081                           prodh	equ	0xFF4
  6082                           prodl	equ	0xFF3
  6083                           intcon	equ	0xFF2
  6084                           intcon2	equ	0xFF1
  6085                           intcon3	equ	0xFF0
  6086                           postinc0	equ	0xFEE
  6087                           wreg	equ	0xFE8
  6088                           postdec1	equ	0xFE5
  6089                           fsr1l	equ	0xFE1
  6090                           indf2	equ	0xFDF
  6091                           postinc2	equ	0xFDE
  6092                           postdec2	equ	0xFDD
  6093                           fsr2h	equ	0xFDA
  6094                           fsr2l	equ	0xFD9
  6095                           status	equ	0xFD8
  6096                           
  6097 ;; *************** function _change_state_to_menu_start *****************
  6098 ;; Defined at:
  6099 ;;		line 474 in file "UI.c"
  6100 ;; Parameters:    Size  Location     Type
  6101 ;;		None
  6102 ;; Auto vars:     Size  Location     Type
  6103 ;;		None
  6104 ;; Return value:  Size  Location     Type
  6105 ;;                  1    wreg      void 
  6106 ;; Registers used:
  6107 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6108 ;; Tracked objects:
  6109 ;;		On entry : 0/0
  6110 ;;		On exit  : 0/0
  6111 ;;		Unchanged: 0/0
  6112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6113 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6114 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6115 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6116 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6117 ;;Total ram usage:        0 bytes
  6118 ;; Hardware stack levels used:    1
  6119 ;; Hardware stack levels required when called:   11
  6120 ;; This function calls:
  6121 ;;		_lcdInst
  6122 ;;		_printRTC
  6123 ;;		_printf
  6124 ;; This function is called by:
  6125 ;;		_initUI
  6126 ;; This function uses a non-reentrant model
  6127 ;;
  6128                           
  6129                           	psect	text20
  6130  00478E                     __ptext20:
  6131                           	opt stack 0
  6132  00478E                     _change_state_to_menu_start:
  6133                           	opt stack 18
  6134                           
  6135                           ;UI.c: 475: cur_state = 0;
  6136                           
  6137                           ; BSR set to: 0
  6138                           ;incstack = 0
  6139  00478E  0E00               	movlw	0
  6140  004790  0100               	movlb	0	; () banked
  6141  004792  6FE3               	movwf	(_cur_state+1)& (0+255),b
  6142  004794  0E00               	movlw	0
  6143  004796  6FE2               	movwf	_cur_state& (0+255),b
  6144                           
  6145                           ; BSR set to: 0
  6146                           ;UI.c: 477: lcdInst(0b10000000);;
  6147  004798  0E80               	movlw	128
  6148  00479A  ECD6  F024         	call	_lcdInst
  6149                           
  6150                           ;UI.c: 478: printRTC();
  6151  00479E  ECCC  F00F         	call	_printRTC	;wreg free
  6152                           
  6153                           ;UI.c: 479: lcdInst(0b11000000);;
  6154  0047A2  0EC0               	movlw	192
  6155  0047A4  ECD6  F024         	call	_lcdInst
  6156                           
  6157                           ;UI.c: 480: printf("PUSH TO CONTINUE");
  6158  0047A8  0EF7               	movlw	low STR_30
  6159  0047AA  0100               	movlb	0	; () banked
  6160  0047AC  6F8E               	movwf	printf@f& (0+255),b
  6161  0047AE  0EFD               	movlw	high STR_30
  6162  0047B0  0100               	movlb	0	; () banked
  6163  0047B2  6F8F               	movwf	(printf@f+1)& (0+255),b
  6164  0047B4  ECB8  F008         	call	_printf	;wreg free
  6165  0047B8  0012               	return		;funcret
  6166  0047BA                     __end_of_change_state_to_menu_start:
  6167                           	opt stack 0
  6168                           tblptru	equ	0xFF8
  6169                           tblptrh	equ	0xFF7
  6170                           tblptrl	equ	0xFF6
  6171                           tablat	equ	0xFF5
  6172                           prodh	equ	0xFF4
  6173                           prodl	equ	0xFF3
  6174                           intcon	equ	0xFF2
  6175                           intcon2	equ	0xFF1
  6176                           intcon3	equ	0xFF0
  6177                           postinc0	equ	0xFEE
  6178                           wreg	equ	0xFE8
  6179                           postdec1	equ	0xFE5
  6180                           fsr1l	equ	0xFE1
  6181                           indf2	equ	0xFDF
  6182                           postinc2	equ	0xFDE
  6183                           postdec2	equ	0xFDD
  6184                           fsr2h	equ	0xFDA
  6185                           fsr2l	equ	0xFD9
  6186                           status	equ	0xFD8
  6187                           
  6188 ;; *************** function _initTime *****************
  6189 ;; Defined at:
  6190 ;;		line 17 in file "RTC.c"
  6191 ;; Parameters:    Size  Location     Type
  6192 ;;  s               1    wreg     unsigned char 
  6193 ;;  m               1    0[BANK0 ] unsigned char 
  6194 ;;  h               1    1[BANK0 ] unsigned char 
  6195 ;;  w               1    2[BANK0 ] unsigned char 
  6196 ;;  DD              1    3[BANK0 ] unsigned char 
  6197 ;;  MM              1    4[BANK0 ] unsigned char 
  6198 ;;  YY              1    5[BANK0 ] unsigned char 
  6199 ;; Auto vars:     Size  Location     Type
  6200 ;;  s               1    6[BANK0 ] unsigned char 
  6201 ;; Return value:  Size  Location     Type
  6202 ;;                  1    wreg      void 
  6203 ;; Registers used:
  6204 ;;		wreg
  6205 ;; Tracked objects:
  6206 ;;		On entry : 0/0
  6207 ;;		On exit  : 0/0
  6208 ;;		Unchanged: 0/0
  6209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6210 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6211 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6212 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6213 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6214 ;;Total ram usage:        7 bytes
  6215 ;; Hardware stack levels used:    1
  6216 ;; Hardware stack levels required when called:    7
  6217 ;; This function calls:
  6218 ;;		Nothing
  6219 ;; This function is called by:
  6220 ;;		_main
  6221 ;; This function uses a non-reentrant model
  6222 ;;
  6223                           
  6224                           	psect	text21
  6225  0048F2                     __ptext21:
  6226                           	opt stack 0
  6227  0048F2                     _initTime:
  6228                           	opt stack 23
  6229                           
  6230                           ;incstack = 0
  6231                           ;initTime@s stored from wreg
  6232  0048F2  0100               	movlb	0	; () banked
  6233  0048F4  6F86               	movwf	initTime@s& (0+255),b
  6234                           
  6235                           ;RTC.c: 19: time[0] = s;
  6236  0048F6  C086  F124         	movff	initTime@s,_time
  6237                           
  6238                           ;RTC.c: 20: time[1] = m;
  6239  0048FA  C080  F125         	movff	initTime@m,_time+1
  6240                           
  6241                           ;RTC.c: 21: time[2] = h;
  6242  0048FE  C081  F126         	movff	initTime@h,_time+2
  6243                           
  6244                           ;RTC.c: 22: time[3] = w;
  6245  004902  C082  F127         	movff	initTime@w,_time+3
  6246                           
  6247                           ;RTC.c: 23: time[4] = DD;
  6248  004906  C083  F128         	movff	initTime@DD,_time+4
  6249                           
  6250                           ;RTC.c: 24: time[5] = MM;
  6251  00490A  C084  F129         	movff	initTime@MM,_time+5
  6252                           
  6253                           ;RTC.c: 25: time[6] = YY;
  6254  00490E  C085  F12A         	movff	initTime@YY,_time+6
  6255  004912  0012               	return		;funcret
  6256  004914                     __end_of_initTime:
  6257                           	opt stack 0
  6258                           tblptru	equ	0xFF8
  6259                           tblptrh	equ	0xFF7
  6260                           tblptrl	equ	0xFF6
  6261                           tablat	equ	0xFF5
  6262                           prodh	equ	0xFF4
  6263                           prodl	equ	0xFF3
  6264                           intcon	equ	0xFF2
  6265                           intcon2	equ	0xFF1
  6266                           intcon3	equ	0xFF0
  6267                           postinc0	equ	0xFEE
  6268                           wreg	equ	0xFE8
  6269                           postdec1	equ	0xFE5
  6270                           fsr1l	equ	0xFE1
  6271                           indf2	equ	0xFDF
  6272                           postinc2	equ	0xFDE
  6273                           postdec2	equ	0xFDD
  6274                           fsr2h	equ	0xFDA
  6275                           fsr2l	equ	0xFD9
  6276                           status	equ	0xFD8
  6277                           
  6278 ;; *************** function _initLCD *****************
  6279 ;; Defined at:
  6280 ;;		line 48 in file "lcd.c"
  6281 ;; Parameters:    Size  Location     Type
  6282 ;;		None
  6283 ;; Auto vars:     Size  Location     Type
  6284 ;;		None
  6285 ;; Return value:  Size  Location     Type
  6286 ;;                  1    wreg      void 
  6287 ;; Registers used:
  6288 ;;		wreg, status,2, status,0, cstack
  6289 ;; Tracked objects:
  6290 ;;		On entry : 0/0
  6291 ;;		On exit  : 0/0
  6292 ;;		Unchanged: 0/0
  6293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6294 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6295 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6296 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6297 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6298 ;;Total ram usage:        1 bytes
  6299 ;; Hardware stack levels used:    1
  6300 ;; Hardware stack levels required when called:    9
  6301 ;; This function calls:
  6302 ;;		_lcdInst
  6303 ;; This function is called by:
  6304 ;;		_main
  6305 ;; This function uses a non-reentrant model
  6306 ;;
  6307                           
  6308                           	psect	text22
  6309  00438C                     __ptext22:
  6310                           	opt stack 0
  6311  00438C                     _initLCD:
  6312                           	opt stack 21
  6313                           
  6314                           ;lcd.c: 49: _delay((unsigned long)((15)*(32000000/4000.0)));
  6315                           
  6316                           ;incstack = 0
  6317  00438C  0E9C               	movlw	156
  6318  00438E  0100               	movlb	0	; () banked
  6319  004390  6F83               	movwf	??_initLCD& (0+255),b
  6320  004392  0ED7               	movlw	215
  6321  004394                     u7517:
  6322  004394  2EE8               	decfsz	wreg,f,c
  6323  004396  D7FE               	bra	u7517
  6324  004398  2F83               	decfsz	??_initLCD& (0+255),f,b
  6325  00439A  D7FC               	bra	u7517
  6326                           
  6327                           ;lcd.c: 50: lcdInst(0b00110011);
  6328  00439C  0E33               	movlw	51
  6329  00439E  ECD6  F024         	call	_lcdInst
  6330                           
  6331                           ;lcd.c: 51: lcdInst(0b00110010);
  6332  0043A2  0E32               	movlw	50
  6333  0043A4  ECD6  F024         	call	_lcdInst
  6334                           
  6335                           ;lcd.c: 53: lcdInst(0b00101000);
  6336  0043A8  0E28               	movlw	40
  6337  0043AA  ECD6  F024         	call	_lcdInst
  6338                           
  6339                           ;lcd.c: 54: lcdInst(0b00001100);
  6340  0043AE  0E0C               	movlw	12
  6341  0043B0  ECD6  F024         	call	_lcdInst
  6342                           
  6343                           ;lcd.c: 55: lcdInst(0b00000110);
  6344  0043B4  0E06               	movlw	6
  6345  0043B6  ECD6  F024         	call	_lcdInst
  6346                           
  6347                           ;lcd.c: 56: lcdInst(0b00000001);
  6348  0043BA  0E01               	movlw	1
  6349  0043BC  ECD6  F024         	call	_lcdInst
  6350                           
  6351                           ;lcd.c: 57: _delay((unsigned long)((15)*(32000000/4000.0)));
  6352  0043C0  0E9C               	movlw	156
  6353  0043C2  0100               	movlb	0	; () banked
  6354  0043C4  6F83               	movwf	??_initLCD& (0+255),b
  6355  0043C6  0ED7               	movlw	215
  6356  0043C8                     u7527:
  6357  0043C8  2EE8               	decfsz	wreg,f,c
  6358  0043CA  D7FE               	bra	u7527
  6359  0043CC  2F83               	decfsz	??_initLCD& (0+255),f,b
  6360  0043CE  D7FC               	bra	u7527
  6361  0043D0  0012               	return		;funcret
  6362  0043D2                     __end_of_initLCD:
  6363                           	opt stack 0
  6364                           tblptru	equ	0xFF8
  6365                           tblptrh	equ	0xFF7
  6366                           tblptrl	equ	0xFF6
  6367                           tablat	equ	0xFF5
  6368                           prodh	equ	0xFF4
  6369                           prodl	equ	0xFF3
  6370                           intcon	equ	0xFF2
  6371                           intcon2	equ	0xFF1
  6372                           intcon3	equ	0xFF0
  6373                           postinc0	equ	0xFEE
  6374                           wreg	equ	0xFE8
  6375                           postdec1	equ	0xFE5
  6376                           fsr1l	equ	0xFE1
  6377                           indf2	equ	0xFDF
  6378                           postinc2	equ	0xFDE
  6379                           postdec2	equ	0xFDD
  6380                           fsr2h	equ	0xFDA
  6381                           fsr2l	equ	0xFD9
  6382                           status	equ	0xFD8
  6383                           
  6384 ;; *************** function _UI *****************
  6385 ;; Defined at:
  6386 ;;		line 76 in file "UI.c"
  6387 ;; Parameters:    Size  Location     Type
  6388 ;;		None
  6389 ;; Auto vars:     Size  Location     Type
  6390 ;;  i               1   73[BANK0 ] unsigned char 
  6391 ;;  i               1   85[BANK0 ] unsigned char 
  6392 ;;  i               1   84[BANK0 ] unsigned char 
  6393 ;;  i               1   83[BANK0 ] unsigned char 
  6394 ;;  i               1   82[BANK0 ] unsigned char 
  6395 ;;  i               1   81[BANK0 ] unsigned char 
  6396 ;;  i               1   80[BANK0 ] unsigned char 
  6397 ;;  i               1   79[BANK0 ] unsigned char 
  6398 ;;  i               1   78[BANK0 ] unsigned char 
  6399 ;;  i               1   77[BANK0 ] unsigned char 
  6400 ;;  i               1   76[BANK0 ] unsigned char 
  6401 ;;  i               1   75[BANK0 ] unsigned char 
  6402 ;;  i               1   74[BANK0 ] unsigned char 
  6403 ;;  month           4   86[BANK0 ] unsigned char [4]
  6404 ;;  i               1   72[BANK0 ] unsigned char 
  6405 ;; Return value:  Size  Location     Type
  6406 ;;                  1    wreg      void 
  6407 ;; Registers used:
  6408 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6409 ;; Tracked objects:
  6410 ;;		On entry : 0/0
  6411 ;;		On exit  : 0/0
  6412 ;;		Unchanged: 0/0
  6413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6414 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6415 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6416 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6417 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6418 ;;Total ram usage:       22 bytes
  6419 ;; Hardware stack levels used:    1
  6420 ;; Hardware stack levels required when called:   11
  6421 ;; This function calls:
  6422 ;;		___awdiv
  6423 ;;		___awmod
  6424 ;;		_change_state_to_menu_12
  6425 ;;		_change_state_to_menu_22
  6426 ;;		_lcdInst
  6427 ;;		_printRTC
  6428 ;;		_printf
  6429 ;;		_strcpy
  6430 ;; This function is called by:
  6431 ;;		_main
  6432 ;; This function uses a non-reentrant model
  6433 ;;
  6434                           
  6435                           	psect	text23
  6436  0008CA                     __ptext23:
  6437                           	opt stack 0
  6438  0008CA                     _UI:
  6439                           	opt stack 19
  6440                           
  6441                           ;UI.c: 77: if(machine_state == DoneSorting_state){
  6442                           
  6443                           ;incstack = 0
  6444  0008CA  0E02               	movlw	2
  6445  0008CC  0100               	movlb	0	; () banked
  6446  0008CE  19FC               	xorwf	_machine_state& (0+255),w,b
  6447  0008D0  A4D8               	btfss	status,2,c
  6448  0008D2  D075               	goto	l7624
  6449                           
  6450                           ; BSR set to: 0
  6451                           ;UI.c: 78: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6452  0008D4  0E01               	movlw	1
  6453  0008D6  ECD6  F024         	call	_lcdInst
  6454  0008DA  0E68               	movlw	104
  6455  0008DC  0100               	movlb	0	; () banked
  6456  0008DE  6FC4               	movwf	??_UI& (0+255),b
  6457  0008E0  0EE4               	movlw	228
  6458  0008E2                     u7537:
  6459  0008E2  2EE8               	decfsz	wreg,f,c
  6460  0008E4  D7FE               	bra	u7537
  6461  0008E6  2FC4               	decfsz	??_UI& (0+255),f,b
  6462  0008E8  D7FC               	bra	u7537
  6463  0008EA  F000               	nop	
  6464                           
  6465                           ;UI.c: 79: lcdInst(0b10000000);;
  6466  0008EC  0E80               	movlw	128
  6467  0008EE  ECD6  F024         	call	_lcdInst
  6468                           
  6469                           ;UI.c: 80: printf("RESULTS IN LOG %d", sel+1);
  6470  0008F2  0EA3               	movlw	low STR_1
  6471  0008F4  0100               	movlb	0	; () banked
  6472  0008F6  6F8E               	movwf	printf@f& (0+255),b
  6473  0008F8  0EFB               	movlw	high STR_1
  6474  0008FA  0100               	movlb	0	; () banked
  6475  0008FC  6F8F               	movwf	(printf@f+1)& (0+255),b
  6476  0008FE  0E01               	movlw	1
  6477  000900  0100               	movlb	0	; () banked
  6478  000902  25FD               	addwf	_sel& (0+255),w,b
  6479  000904  0100               	movlb	0	; () banked
  6480  000906  6F90               	movwf	(?_printf+2)& (0+255),b
  6481  000908  0100               	movlb	0	; () banked
  6482  00090A  6B91               	clrf	(?_printf+3)& (0+255),b
  6483  00090C  0E00               	movlw	0
  6484  00090E  2391               	addwfc	(?_printf+3)& (0+255),f,b
  6485  000910  ECB8  F008         	call	_printf	;wreg free
  6486                           
  6487                           ;UI.c: 81: lcdInst(0b11000000);;
  6488  000914  0EC0               	movlw	192
  6489  000916  ECD6  F024         	call	_lcdInst
  6490                           
  6491                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  6492  00091A  0E0E               	movlw	14
  6493  00091C  0100               	movlb	0	; () banked
  6494  00091E  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6495  000920  0E10               	movlw	16
  6496  000922  6F82               	movwf	___awmod@divisor& (0+255),b
  6497  000924  C0F8  F080         	movff	_total_time,___awmod@dividend
  6498  000928  C0F9  F081         	movff	_total_time+1,___awmod@dividend+1
  6499  00092C  EC75  F01D         	call	___awmod	;wreg free
  6500  000930  C080  F0C6         	movff	?___awmod,_UI$2314
  6501  000934  C081  F0C7         	movff	?___awmod+1,_UI$2314+1
  6502                           
  6503                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  6504  000938  0E27               	movlw	low STR_2
  6505  00093A  0100               	movlb	0	; () banked
  6506  00093C  6F8E               	movwf	printf@f& (0+255),b
  6507  00093E  0EFF               	movlw	high STR_2
  6508  000940  0100               	movlb	0	; () banked
  6509  000942  6F8F               	movwf	(printf@f+1)& (0+255),b
  6510  000944  0E0E               	movlw	14
  6511  000946  0100               	movlb	0	; () banked
  6512  000948  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6513  00094A  0E10               	movlw	16
  6514  00094C  6F82               	movwf	___awmod@divisor& (0+255),b
  6515  00094E  C0F8  F080         	movff	_total_time,___awmod@dividend
  6516  000952  C0F9  F081         	movff	_total_time+1,___awmod@dividend+1
  6517  000956  EC75  F01D         	call	___awmod	;wreg free
  6518  00095A  C080  F086         	movff	?___awmod,___awdiv@dividend
  6519  00095E  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  6520  000962  0E00               	movlw	0
  6521  000964  0100               	movlb	0	; () banked
  6522  000966  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  6523  000968  0E3C               	movlw	60
  6524  00096A  6F88               	movwf	___awdiv@divisor& (0+255),b
  6525  00096C  EC63  F01C         	call	___awdiv	;wreg free
  6526  000970  C086  F090         	movff	?___awdiv,?_printf+2
  6527  000974  C087  F091         	movff	?___awdiv+1,?_printf+3
  6528  000978  C0C6  F080         	movff	_UI$2314,___awmod@dividend
  6529  00097C  C0C7  F081         	movff	_UI$2314+1,___awmod@dividend+1
  6530  000980  0E00               	movlw	0
  6531  000982  0100               	movlb	0	; () banked
  6532  000984  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6533  000986  0E3C               	movlw	60
  6534  000988  6F82               	movwf	___awmod@divisor& (0+255),b
  6535  00098A  EC75  F01D         	call	___awmod	;wreg free
  6536  00098E  C080  F092         	movff	?___awmod,?_printf+4
  6537  000992  C081  F093         	movff	?___awmod+1,?_printf+5
  6538  000996  ECB8  F008         	call	_printf	;wreg free
  6539                           
  6540                           ;UI.c: 83: machine_state = UI_state;
  6541  00099A  0E00               	movlw	0
  6542  00099C  0100               	movlb	0	; () banked
  6543  00099E  6FFC               	movwf	_machine_state& (0+255),b
  6544  0009A0                     l180:
  6545  0009A0  A281               	btfss	3969,1,c	;volatile
  6546  0009A2  D7FE               	goto	l180
  6547                           
  6548                           ;UI.c: 86: }
  6549                           ;UI.c: 87: if(cur_state==12){
  6550  0009A4  0E0C               	movlw	12
  6551  0009A6  0100               	movlb	0	; () banked
  6552  0009A8  19E2               	xorwf	_cur_state& (0+255),w,b
  6553  0009AA  0100               	movlb	0	; () banked
  6554  0009AC  11E3               	iorwf	(_cur_state+1)& (0+255),w,b
  6555  0009AE  A4D8               	btfss	status,2,c
  6556  0009B0  D003               	goto	l7622
  6557                           
  6558                           ; BSR set to: 0
  6559                           ;UI.c: 88: change_state_to_menu_12();
  6560  0009B2  EC26  F022         	call	_change_state_to_menu_12	;wreg free
  6561                           
  6562                           ;UI.c: 89: }
  6563  0009B6  D3D5               	goto	l7944
  6564  0009B8                     l7622:
  6565                           
  6566                           ;UI.c: 90: else{
  6567                           ;UI.c: 91: change_state_to_menu_22();
  6568  0009B8  EC0A  F022         	call	_change_state_to_menu_22	;wreg free
  6569                           
  6570                           ;UI.c: 92: }
  6571                           ;UI.c: 93: }
  6572  0009BC  D3D2               	goto	l7944
  6573  0009BE                     l7624:
  6574                           
  6575                           ;UI.c: 94: else if(cur_state == 0){
  6576  0009BE  0100               	movlb	0	; () banked
  6577  0009C0  51E2               	movf	_cur_state& (0+255),w,b
  6578  0009C2  0100               	movlb	0	; () banked
  6579  0009C4  11E3               	iorwf	(_cur_state+1)& (0+255),w,b
  6580  0009C6  A4D8               	btfss	status,2,c
  6581  0009C8  D3CC               	goto	l7944
  6582                           
  6583                           ; BSR set to: 0
  6584                           ;UI.c: 95: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
  6585  0009CA  0E00               	movlw	0
  6586  0009CC  0100               	movlb	0	; () banked
  6587  0009CE  6FC8               	movwf	UI@i& (0+255),b
  6588  0009D0                     l7628:
  6589                           
  6590                           ; BSR set to: 0
  6591  0009D0  0E63               	movlw	99
  6592  0009D2  0100               	movlb	0	; () banked
  6593  0009D4  65C8               	cpfsgt	UI@i& (0+255),b
  6594  0009D6  D001               	goto	l7632
  6595  0009D8  D00C               	goto	l7636
  6596  0009DA                     l7632:
  6597                           
  6598                           ; BSR set to: 0
  6599  0009DA  0E68               	movlw	104
  6600  0009DC  0100               	movlb	0	; () banked
  6601  0009DE  6FC4               	movwf	??_UI& (0+255),b
  6602  0009E0  0EE4               	movlw	228
  6603  0009E2                     u7547:
  6604  0009E2  2EE8               	decfsz	wreg,f,c
  6605  0009E4  D7FE               	bra	u7547
  6606  0009E6  2FC4               	decfsz	??_UI& (0+255),f,b
  6607  0009E8  D7FC               	bra	u7547
  6608  0009EA  F000               	nop	
  6609  0009EC  0100               	movlb	0	; () banked
  6610  0009EE  2BC8               	incf	UI@i& (0+255),f,b
  6611  0009F0  D7EF               	goto	l7628
  6612  0009F2                     l7636:
  6613                           
  6614                           ; BSR set to: 0
  6615                           ;UI.c: 96: if(cur_state == 0){
  6616  0009F2  0100               	movlb	0	; () banked
  6617  0009F4  51E2               	movf	_cur_state& (0+255),w,b
  6618  0009F6  0100               	movlb	0	; () banked
  6619  0009F8  11E3               	iorwf	(_cur_state+1)& (0+255),w,b
  6620  0009FA  A4D8               	btfss	status,2,c
  6621  0009FC  D3B2               	goto	l7944
  6622                           
  6623                           ; BSR set to: 0
  6624                           ;UI.c: 97: printRTC();
  6625  0009FE  ECCC  F00F         	call	_printRTC	;wreg free
  6626                           
  6627                           ;UI.c: 98: }
  6628                           ;UI.c: 99: }
  6629                           ;UI.c: 100: while(logstate){
  6630  000A02  D3AF               	goto	l7944
  6631  000A04                     l7640:
  6632                           
  6633                           ;UI.c: 102: if(!log_completion){
  6634  000A04  0100               	movlb	0	; () banked
  6635  000A06  51E8               	movf	_log_completion& (0+255),w,b
  6636  000A08  0100               	movlb	0	; () banked
  6637  000A0A  11E9               	iorwf	(_log_completion+1)& (0+255),w,b
  6638  000A0C  A4D8               	btfss	status,2,c
  6639  000A0E  D041               	goto	l7670
  6640                           
  6641                           ; BSR set to: 0
  6642                           ;UI.c: 103: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6643  000A10  0E01               	movlw	1
  6644  000A12  ECD6  F024         	call	_lcdInst
  6645  000A16  0E68               	movlw	104
  6646  000A18  0100               	movlb	0	; () banked
  6647  000A1A  6FC4               	movwf	??_UI& (0+255),b
  6648  000A1C  0EE4               	movlw	228
  6649  000A1E                     u7557:
  6650  000A1E  2EE8               	decfsz	wreg,f,c
  6651  000A20  D7FE               	bra	u7557
  6652  000A22  2FC4               	decfsz	??_UI& (0+255),f,b
  6653  000A24  D7FC               	bra	u7557
  6654  000A26  F000               	nop	
  6655                           
  6656                           ;UI.c: 104: lcdInst(0b10000000);;
  6657  000A28  0E80               	movlw	128
  6658  000A2A  ECD6  F024         	call	_lcdInst
  6659                           
  6660                           ;UI.c: 105: printf("-- LOG %2d HERE--", log);
  6661  000A2E  0E91               	movlw	low STR_3
  6662  000A30  0100               	movlb	0	; () banked
  6663  000A32  6F8E               	movwf	printf@f& (0+255),b
  6664  000A34  0EFB               	movlw	high STR_3
  6665  000A36  0100               	movlb	0	; () banked
  6666  000A38  6F8F               	movwf	(printf@f+1)& (0+255),b
  6667  000A3A  C0E6  F090         	movff	_log,?_printf+2
  6668  000A3E  C0E7  F091         	movff	_log+1,?_printf+3
  6669  000A42  ECB8  F008         	call	_printf	;wreg free
  6670                           
  6671                           ;UI.c: 106: lcdInst(0b11000000);;
  6672  000A46  0EC0               	movlw	192
  6673  000A48  ECD6  F024         	call	_lcdInst
  6674                           
  6675                           ;UI.c: 107: printf("DIDN'T COMPLETE");
  6676  000A4C  0E4A               	movlw	low STR_4
  6677  000A4E  0100               	movlb	0	; () banked
  6678  000A50  6F8E               	movwf	printf@f& (0+255),b
  6679  000A52  0EFE               	movlw	high STR_4
  6680  000A54  0100               	movlb	0	; () banked
  6681  000A56  6F8F               	movwf	(printf@f+1)& (0+255),b
  6682  000A58  ECB8  F008         	call	_printf	;wreg free
  6683  000A5C                     l7654:
  6684  000A5C  0E00               	movlw	0
  6685  000A5E  0100               	movlb	0	; () banked
  6686  000A60  6FC9               	movwf	UI@i_409& (0+255),b
  6687  000A62                     l7656:
  6688                           
  6689                           ; BSR set to: 0
  6690  000A62  0E63               	movlw	99
  6691  000A64  0100               	movlb	0	; () banked
  6692  000A66  65C9               	cpfsgt	UI@i_409& (0+255),b
  6693  000A68  D001               	goto	l7660
  6694  000A6A  D00C               	goto	l7664
  6695  000A6C                     l7660:
  6696                           
  6697                           ; BSR set to: 0
  6698  000A6C  0E68               	movlw	104
  6699  000A6E  0100               	movlb	0	; () banked
  6700  000A70  6FC4               	movwf	??_UI& (0+255),b
  6701  000A72  0EE4               	movlw	228
  6702  000A74                     u7567:
  6703  000A74  2EE8               	decfsz	wreg,f,c
  6704  000A76  D7FE               	bra	u7567
  6705  000A78  2FC4               	decfsz	??_UI& (0+255),f,b
  6706  000A7A  D7FC               	bra	u7567
  6707  000A7C  F000               	nop	
  6708  000A7E  0100               	movlb	0	; () banked
  6709  000A80  2BC9               	incf	UI@i_409& (0+255),f,b
  6710  000A82  D7EF               	goto	l7656
  6711  000A84                     l7664:
  6712                           
  6713                           ; BSR set to: 0
  6714  000A84  0100               	movlb	0	; () banked
  6715  000A86  51F6               	movf	_logstate& (0+255),w,b
  6716  000A88  0100               	movlb	0	; () banked
  6717  000A8A  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6718  000A8C  B4D8               	btfsc	status,2,c
  6719  000A8E  0012               	return	
  6720  000A90  D7E5               	goto	l7654
  6721  000A92                     l7670:
  6722                           
  6723                           ; BSR set to: 0
  6724                           ;UI.c: 111: else{
  6725                           ;UI.c: 112: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6726  000A92  0E01               	movlw	1
  6727  000A94  ECD6  F024         	call	_lcdInst
  6728  000A98  0E68               	movlw	104
  6729  000A9A  0100               	movlb	0	; () banked
  6730  000A9C  6FC4               	movwf	??_UI& (0+255),b
  6731  000A9E  0EE4               	movlw	228
  6732  000AA0                     u7577:
  6733  000AA0  2EE8               	decfsz	wreg,f,c
  6734  000AA2  D7FE               	bra	u7577
  6735  000AA4  2FC4               	decfsz	??_UI& (0+255),f,b
  6736  000AA6  D7FC               	bra	u7577
  6737  000AA8  F000               	nop	
  6738                           
  6739                           ;UI.c: 113: lcdInst(0b10000000);;
  6740  000AAA  0E80               	movlw	128
  6741  000AAC  ECD6  F024         	call	_lcdInst
  6742                           
  6743                           ;UI.c: 114: printf("-- LOG %2d HERE--", log);
  6744  000AB0  0E91               	movlw	low STR_3
  6745  000AB2  0100               	movlb	0	; () banked
  6746  000AB4  6F8E               	movwf	printf@f& (0+255),b
  6747  000AB6  0EFB               	movlw	high STR_3
  6748  000AB8  0100               	movlb	0	; () banked
  6749  000ABA  6F8F               	movwf	(printf@f+1)& (0+255),b
  6750  000ABC  C0E6  F090         	movff	_log,?_printf+2
  6751  000AC0  C0E7  F091         	movff	_log+1,?_printf+3
  6752  000AC4  ECB8  F008         	call	_printf	;wreg free
  6753                           
  6754                           ;UI.c: 115: lcdInst(0b11000000);;
  6755  000AC8  0EC0               	movlw	192
  6756  000ACA  ECD6  F024         	call	_lcdInst
  6757                           
  6758                           ;UI.c: 116: printf("PAUSE < | BACK >");
  6759  000ACE  0EE6               	movlw	low STR_6
  6760  000AD0  0100               	movlb	0	; () banked
  6761  000AD2  6F8E               	movwf	printf@f& (0+255),b
  6762  000AD4  0EFD               	movlw	high STR_6
  6763  000AD6  0100               	movlb	0	; () banked
  6764  000AD8  6F8F               	movwf	(printf@f+1)& (0+255),b
  6765  000ADA  ECB8  F008         	call	_printf	;wreg free
  6766                           
  6767                           ;UI.c: 118: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6768  000ADE  0E00               	movlw	0
  6769  000AE0  0100               	movlb	0	; () banked
  6770  000AE2  6FCA               	movwf	UI@i_412& (0+255),b
  6771  000AE4                     l7684:
  6772                           
  6773                           ; BSR set to: 0
  6774  000AE4  0E63               	movlw	99
  6775  000AE6  0100               	movlb	0	; () banked
  6776  000AE8  65CA               	cpfsgt	UI@i_412& (0+255),b
  6777  000AEA  D001               	goto	l7688
  6778  000AEC  D00C               	goto	l7692
  6779  000AEE                     l7688:
  6780                           
  6781                           ; BSR set to: 0
  6782  000AEE  0E68               	movlw	104
  6783  000AF0  0100               	movlb	0	; () banked
  6784  000AF2  6FC4               	movwf	??_UI& (0+255),b
  6785  000AF4  0EE4               	movlw	228
  6786  000AF6                     u7587:
  6787  000AF6  2EE8               	decfsz	wreg,f,c
  6788  000AF8  D7FE               	bra	u7587
  6789  000AFA  2FC4               	decfsz	??_UI& (0+255),f,b
  6790  000AFC  D7FC               	bra	u7587
  6791  000AFE  F000               	nop	
  6792  000B00  0100               	movlb	0	; () banked
  6793  000B02  2BCA               	incf	UI@i_412& (0+255),f,b
  6794  000B04  D7EF               	goto	l7684
  6795  000B06                     l7692:
  6796                           
  6797                           ; BSR set to: 0
  6798  000B06  0100               	movlb	0	; () banked
  6799  000B08  51F6               	movf	_logstate& (0+255),w,b
  6800  000B0A  0100               	movlb	0	; () banked
  6801  000B0C  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6802  000B0E  B4D8               	btfsc	status,2,c
  6803  000B10  0012               	return	
  6804                           
  6805                           ; BSR set to: 0
  6806                           ;UI.c: 119: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6807                           
  6808                           ; BSR set to: 0
  6809                           
  6810                           ; BSR set to: 0
  6811  000B12  0E00               	movlw	0
  6812  000B14  0100               	movlb	0	; () banked
  6813  000B16  6FCB               	movwf	UI@i_413& (0+255),b
  6814  000B18                     l7698:
  6815                           
  6816                           ; BSR set to: 0
  6817  000B18  0E63               	movlw	99
  6818  000B1A  0100               	movlb	0	; () banked
  6819  000B1C  65CB               	cpfsgt	UI@i_413& (0+255),b
  6820  000B1E  D001               	goto	l7702
  6821  000B20  D00C               	goto	l7706
  6822  000B22                     l7702:
  6823                           
  6824                           ; BSR set to: 0
  6825  000B22  0E68               	movlw	104
  6826  000B24  0100               	movlb	0	; () banked
  6827  000B26  6FC4               	movwf	??_UI& (0+255),b
  6828  000B28  0EE4               	movlw	228
  6829  000B2A                     u7597:
  6830  000B2A  2EE8               	decfsz	wreg,f,c
  6831  000B2C  D7FE               	bra	u7597
  6832  000B2E  2FC4               	decfsz	??_UI& (0+255),f,b
  6833  000B30  D7FC               	bra	u7597
  6834  000B32  F000               	nop	
  6835  000B34  0100               	movlb	0	; () banked
  6836  000B36  2BCB               	incf	UI@i_413& (0+255),f,b
  6837  000B38  D7EF               	goto	l7698
  6838  000B3A                     l7706:
  6839                           
  6840                           ; BSR set to: 0
  6841  000B3A  0100               	movlb	0	; () banked
  6842  000B3C  51F6               	movf	_logstate& (0+255),w,b
  6843  000B3E  0100               	movlb	0	; () banked
  6844  000B40  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6845  000B42  B4D8               	btfsc	status,2,c
  6846  000B44  0012               	return	
  6847                           
  6848                           ; BSR set to: 0
  6849                           ;UI.c: 121: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6850                           
  6851                           ; BSR set to: 0
  6852                           
  6853                           ; BSR set to: 0
  6854  000B46  0E01               	movlw	1
  6855  000B48  ECD6  F024         	call	_lcdInst
  6856  000B4C  0E68               	movlw	104
  6857  000B4E  0100               	movlb	0	; () banked
  6858  000B50  6FC4               	movwf	??_UI& (0+255),b
  6859  000B52  0EE4               	movlw	228
  6860  000B54                     u7607:
  6861  000B54  2EE8               	decfsz	wreg,f,c
  6862  000B56  D7FE               	bra	u7607
  6863  000B58  2FC4               	decfsz	??_UI& (0+255),f,b
  6864  000B5A  D7FC               	bra	u7607
  6865  000B5C  F000               	nop	
  6866                           
  6867                           ;UI.c: 122: lcdInst(0b10000000);;
  6868  000B5E  0E80               	movlw	128
  6869  000B60  ECD6  F024         	call	_lcdInst
  6870                           
  6871                           ;UI.c: 123: printf("START:");
  6872  000B64  0EC4               	movlw	low STR_7
  6873  000B66  0100               	movlb	0	; () banked
  6874  000B68  6F8E               	movwf	printf@f& (0+255),b
  6875  000B6A  0EFF               	movlw	high STR_7
  6876  000B6C  0100               	movlb	0	; () banked
  6877  000B6E  6F8F               	movwf	(printf@f+1)& (0+255),b
  6878  000B70  ECB8  F008         	call	_printf	;wreg free
  6879                           
  6880                           ;UI.c: 124: lcdInst(0b11000000);;
  6881  000B74  0EC0               	movlw	192
  6882  000B76  ECD6  F024         	call	_lcdInst
  6883                           
  6884                           ;UI.c: 125: char month[] = "MMM";
  6885  000B7A  C12F  F0D6         	movff	UI@F3225,UI@month
  6886  000B7E  C130  F0D7         	movff	UI@F3225+1,UI@month+1
  6887  000B82  C131  F0D8         	movff	UI@F3225+2,UI@month+2
  6888  000B86  C132  F0D9         	movff	UI@F3225+3,UI@month+3
  6889                           
  6890                           ;UI.c: 126: switch(log_startTime[5]){
  6891  000B8A  D0C3               	goto	l7750
  6892  000B8C                     l7722:
  6893                           
  6894                           ;UI.c: 128: strcpy(month, "JAN");
  6895  000B8C  0ED6               	movlw	low UI@month
  6896  000B8E  0100               	movlb	0	; () banked
  6897  000B90  6F80               	movwf	strcpy@to& (0+255),b
  6898  000B92  0E00               	movlw	high UI@month
  6899  000B94  0100               	movlb	0	; () banked
  6900  000B96  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6901  000B98  0EDB               	movlw	low STR_8
  6902  000B9A  0100               	movlb	0	; () banked
  6903  000B9C  6F82               	movwf	strcpy@from& (0+255),b
  6904  000B9E  0EFF               	movlw	high STR_8
  6905  000BA0  0100               	movlb	0	; () banked
  6906  000BA2  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6907  000BA4  EC42  F022         	call	_strcpy	;wreg free
  6908                           
  6909                           ;UI.c: 129: break;
  6910  000BA8  D0E6               	goto	l7752
  6911  000BAA                     l7724:
  6912                           
  6913                           ;UI.c: 131: strcpy(month, "FEB");
  6914  000BAA  0ED6               	movlw	low UI@month
  6915  000BAC  0100               	movlb	0	; () banked
  6916  000BAE  6F80               	movwf	strcpy@to& (0+255),b
  6917  000BB0  0E00               	movlw	high UI@month
  6918  000BB2  0100               	movlb	0	; () banked
  6919  000BB4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6920  000BB6  0ECB               	movlw	low STR_9
  6921  000BB8  0100               	movlb	0	; () banked
  6922  000BBA  6F82               	movwf	strcpy@from& (0+255),b
  6923  000BBC  0EFF               	movlw	high STR_9
  6924  000BBE  0100               	movlb	0	; () banked
  6925  000BC0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6926  000BC2  EC42  F022         	call	_strcpy	;wreg free
  6927                           
  6928                           ;UI.c: 132: break;
  6929  000BC6  D0D7               	goto	l7752
  6930  000BC8                     l7726:
  6931                           
  6932                           ;UI.c: 134: strcpy(month, "MAR");
  6933  000BC8  0ED6               	movlw	low UI@month
  6934  000BCA  0100               	movlb	0	; () banked
  6935  000BCC  6F80               	movwf	strcpy@to& (0+255),b
  6936  000BCE  0E00               	movlw	high UI@month
  6937  000BD0  0100               	movlb	0	; () banked
  6938  000BD2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6939  000BD4  0EE7               	movlw	low STR_10
  6940  000BD6  0100               	movlb	0	; () banked
  6941  000BD8  6F82               	movwf	strcpy@from& (0+255),b
  6942  000BDA  0EFF               	movlw	high STR_10
  6943  000BDC  0100               	movlb	0	; () banked
  6944  000BDE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6945  000BE0  EC42  F022         	call	_strcpy	;wreg free
  6946                           
  6947                           ;UI.c: 135: break;
  6948  000BE4  D0C8               	goto	l7752
  6949  000BE6                     l7728:
  6950                           
  6951                           ;UI.c: 137: strcpy(month, "APR");
  6952  000BE6  0ED6               	movlw	low UI@month
  6953  000BE8  0100               	movlb	0	; () banked
  6954  000BEA  6F80               	movwf	strcpy@to& (0+255),b
  6955  000BEC  0E00               	movlw	high UI@month
  6956  000BEE  0100               	movlb	0	; () banked
  6957  000BF0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6958  000BF2  0EEB               	movlw	low STR_11
  6959  000BF4  0100               	movlb	0	; () banked
  6960  000BF6  6F82               	movwf	strcpy@from& (0+255),b
  6961  000BF8  0EFF               	movlw	high STR_11
  6962  000BFA  0100               	movlb	0	; () banked
  6963  000BFC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6964  000BFE  EC42  F022         	call	_strcpy	;wreg free
  6965                           
  6966                           ;UI.c: 138: break;
  6967  000C02  D0B9               	goto	l7752
  6968  000C04                     l7730:
  6969                           
  6970                           ;UI.c: 140: strcpy(month, "MAY");
  6971  000C04  0ED6               	movlw	low UI@month
  6972  000C06  0100               	movlb	0	; () banked
  6973  000C08  6F80               	movwf	strcpy@to& (0+255),b
  6974  000C0A  0E00               	movlw	high UI@month
  6975  000C0C  0100               	movlb	0	; () banked
  6976  000C0E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6977  000C10  0EFB               	movlw	low STR_12
  6978  000C12  0100               	movlb	0	; () banked
  6979  000C14  6F82               	movwf	strcpy@from& (0+255),b
  6980  000C16  0EFF               	movlw	high STR_12
  6981  000C18  0100               	movlb	0	; () banked
  6982  000C1A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6983  000C1C  EC42  F022         	call	_strcpy	;wreg free
  6984                           
  6985                           ;UI.c: 141: break;
  6986  000C20  D0AA               	goto	l7752
  6987  000C22                     l7732:
  6988                           
  6989                           ;UI.c: 143: strcpy(month, "JUN");
  6990  000C22  0ED6               	movlw	low UI@month
  6991  000C24  0100               	movlb	0	; () banked
  6992  000C26  6F80               	movwf	strcpy@to& (0+255),b
  6993  000C28  0E00               	movlw	high UI@month
  6994  000C2A  0100               	movlb	0	; () banked
  6995  000C2C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6996  000C2E  0EDF               	movlw	low STR_13
  6997  000C30  0100               	movlb	0	; () banked
  6998  000C32  6F82               	movwf	strcpy@from& (0+255),b
  6999  000C34  0EFF               	movlw	high STR_13
  7000  000C36  0100               	movlb	0	; () banked
  7001  000C38  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7002  000C3A  EC42  F022         	call	_strcpy	;wreg free
  7003                           
  7004                           ;UI.c: 144: break;
  7005  000C3E  D09B               	goto	l7752
  7006  000C40                     l7734:
  7007                           
  7008                           ;UI.c: 146: strcpy(month, "JUL");
  7009  000C40  0ED6               	movlw	low UI@month
  7010  000C42  0100               	movlb	0	; () banked
  7011  000C44  6F80               	movwf	strcpy@to& (0+255),b
  7012  000C46  0E00               	movlw	high UI@month
  7013  000C48  0100               	movlb	0	; () banked
  7014  000C4A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7015  000C4C  0ED7               	movlw	low STR_14
  7016  000C4E  0100               	movlb	0	; () banked
  7017  000C50  6F82               	movwf	strcpy@from& (0+255),b
  7018  000C52  0EFF               	movlw	high STR_14
  7019  000C54  0100               	movlb	0	; () banked
  7020  000C56  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7021  000C58  EC42  F022         	call	_strcpy	;wreg free
  7022                           
  7023                           ;UI.c: 147: break;
  7024  000C5C  D08C               	goto	l7752
  7025  000C5E                     l7736:
  7026                           
  7027                           ;UI.c: 149: strcpy(month, "AUG");
  7028  000C5E  0ED6               	movlw	low UI@month
  7029  000C60  0100               	movlb	0	; () banked
  7030  000C62  6F80               	movwf	strcpy@to& (0+255),b
  7031  000C64  0E00               	movlw	high UI@month
  7032  000C66  0100               	movlb	0	; () banked
  7033  000C68  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7034  000C6A  0ED3               	movlw	low STR_15
  7035  000C6C  0100               	movlb	0	; () banked
  7036  000C6E  6F82               	movwf	strcpy@from& (0+255),b
  7037  000C70  0EFF               	movlw	high STR_15
  7038  000C72  0100               	movlb	0	; () banked
  7039  000C74  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7040  000C76  EC42  F022         	call	_strcpy	;wreg free
  7041                           
  7042                           ;UI.c: 150: break;
  7043  000C7A  D07D               	goto	l7752
  7044  000C7C                     l7738:
  7045                           
  7046                           ;UI.c: 152: strcpy(month, "SEP");
  7047  000C7C  0ED6               	movlw	low UI@month
  7048  000C7E  0100               	movlb	0	; () banked
  7049  000C80  6F80               	movwf	strcpy@to& (0+255),b
  7050  000C82  0E00               	movlw	high UI@month
  7051  000C84  0100               	movlb	0	; () banked
  7052  000C86  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7053  000C88  0EE3               	movlw	low STR_16
  7054  000C8A  0100               	movlb	0	; () banked
  7055  000C8C  6F82               	movwf	strcpy@from& (0+255),b
  7056  000C8E  0EFF               	movlw	high STR_16
  7057  000C90  0100               	movlb	0	; () banked
  7058  000C92  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7059  000C94  EC42  F022         	call	_strcpy	;wreg free
  7060                           
  7061                           ;UI.c: 153: break;
  7062  000C98  D06E               	goto	l7752
  7063  000C9A                     l7740:
  7064                           
  7065                           ;UI.c: 155: strcpy(month, "OCT");
  7066  000C9A  0ED6               	movlw	low UI@month
  7067  000C9C  0100               	movlb	0	; () banked
  7068  000C9E  6F80               	movwf	strcpy@to& (0+255),b
  7069  000CA0  0E00               	movlw	high UI@month
  7070  000CA2  0100               	movlb	0	; () banked
  7071  000CA4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7072  000CA6  0EF3               	movlw	low STR_17
  7073  000CA8  0100               	movlb	0	; () banked
  7074  000CAA  6F82               	movwf	strcpy@from& (0+255),b
  7075  000CAC  0EFF               	movlw	high STR_17
  7076  000CAE  0100               	movlb	0	; () banked
  7077  000CB0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7078  000CB2  EC42  F022         	call	_strcpy	;wreg free
  7079                           
  7080                           ;UI.c: 156: break;
  7081  000CB6  D05F               	goto	l7752
  7082  000CB8                     l7742:
  7083                           
  7084                           ;UI.c: 158: strcpy(month, "NOV");
  7085  000CB8  0ED6               	movlw	low UI@month
  7086  000CBA  0100               	movlb	0	; () banked
  7087  000CBC  6F80               	movwf	strcpy@to& (0+255),b
  7088  000CBE  0E00               	movlw	high UI@month
  7089  000CC0  0100               	movlb	0	; () banked
  7090  000CC2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7091  000CC4  0EF7               	movlw	low STR_18
  7092  000CC6  0100               	movlb	0	; () banked
  7093  000CC8  6F82               	movwf	strcpy@from& (0+255),b
  7094  000CCA  0EFF               	movlw	high STR_18
  7095  000CCC  0100               	movlb	0	; () banked
  7096  000CCE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7097  000CD0  EC42  F022         	call	_strcpy	;wreg free
  7098                           
  7099                           ;UI.c: 159: break;
  7100  000CD4  D050               	goto	l7752
  7101  000CD6                     l7744:
  7102                           
  7103                           ;UI.c: 161: strcpy(month, "DEC");
  7104  000CD6  0ED6               	movlw	low UI@month
  7105  000CD8  0100               	movlb	0	; () banked
  7106  000CDA  6F80               	movwf	strcpy@to& (0+255),b
  7107  000CDC  0E00               	movlw	high UI@month
  7108  000CDE  0100               	movlb	0	; () banked
  7109  000CE0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7110  000CE2  0ECF               	movlw	low STR_19
  7111  000CE4  0100               	movlb	0	; () banked
  7112  000CE6  6F82               	movwf	strcpy@from& (0+255),b
  7113  000CE8  0EFF               	movlw	high STR_19
  7114  000CEA  0100               	movlb	0	; () banked
  7115  000CEC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7116  000CEE  EC42  F022         	call	_strcpy	;wreg free
  7117                           
  7118                           ;UI.c: 162: break;
  7119  000CF2  D041               	goto	l7752
  7120  000CF4                     l7746:
  7121                           
  7122                           ;UI.c: 164: strcpy(month, "ERR");
  7123  000CF4  0ED6               	movlw	low UI@month
  7124  000CF6  0100               	movlb	0	; () banked
  7125  000CF8  6F80               	movwf	strcpy@to& (0+255),b
  7126  000CFA  0E00               	movlw	high UI@month
  7127  000CFC  0100               	movlb	0	; () banked
  7128  000CFE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7129  000D00  0EEF               	movlw	low STR_20
  7130  000D02  0100               	movlb	0	; () banked
  7131  000D04  6F82               	movwf	strcpy@from& (0+255),b
  7132  000D06  0EFF               	movlw	high STR_20
  7133  000D08  0100               	movlb	0	; () banked
  7134  000D0A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7135  000D0C  EC42  F022         	call	_strcpy	;wreg free
  7136                           
  7137                           ;UI.c: 166: }
  7138                           
  7139                           ;UI.c: 165: break;
  7140  000D10  D032               	goto	l7752
  7141  000D12                     l7750:
  7142  000D12  EE21  F00A         	lfsr	2,_log_startTime+10
  7143  000D16  CFDE F0C4          	movff	postinc2,??_UI
  7144  000D1A  CFDD F0C5          	movff	postdec2,??_UI+1
  7145                           
  7146                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7147                           ; Switch size 1, requested type "space"
  7148                           ; Number of cases is 1, Range of values is 0 to 0
  7149                           ; switch strategies available:
  7150                           ; Name         Instructions Cycles
  7151                           ; simple_byte            4     3 (average)
  7152                           ;	Chosen strategy is simple_byte
  7153  000D1E  0100               	movlb	0	; () banked
  7154  000D20  51C5               	movf	(??_UI+1)& (0+255),w,b
  7155  000D22  0A00               	xorlw	0	; case 0
  7156  000D24  A4D8               	btfss	status,2,c
  7157  000D26  D7E6               	goto	l7746
  7158                           
  7159                           ; BSR set to: 0
  7160                           ; Switch size 1, requested type "space"
  7161                           ; Number of cases is 12, Range of values is 1 to 12
  7162                           ; switch strategies available:
  7163                           ; Name         Instructions Cycles
  7164                           ; simple_byte           37    19 (average)
  7165                           ;	Chosen strategy is simple_byte
  7166  000D28  0100               	movlb	0	; () banked
  7167  000D2A  51C4               	movf	??_UI& (0+255),w,b
  7168  000D2C  0A01               	xorlw	1	; case 1
  7169  000D2E  B4D8               	btfsc	status,2,c
  7170  000D30  D72D               	goto	l7722
  7171  000D32  0A03               	xorlw	3	; case 2
  7172  000D34  B4D8               	btfsc	status,2,c
  7173  000D36  D739               	goto	l7724
  7174  000D38  0A01               	xorlw	1	; case 3
  7175  000D3A  B4D8               	btfsc	status,2,c
  7176  000D3C  D745               	goto	l7726
  7177  000D3E  0A07               	xorlw	7	; case 4
  7178  000D40  B4D8               	btfsc	status,2,c
  7179  000D42  D751               	goto	l7728
  7180  000D44  0A01               	xorlw	1	; case 5
  7181  000D46  B4D8               	btfsc	status,2,c
  7182  000D48  D75D               	goto	l7730
  7183  000D4A  0A03               	xorlw	3	; case 6
  7184  000D4C  B4D8               	btfsc	status,2,c
  7185  000D4E  D769               	goto	l7732
  7186  000D50  0A01               	xorlw	1	; case 7
  7187  000D52  B4D8               	btfsc	status,2,c
  7188  000D54  D775               	goto	l7734
  7189  000D56  0A0F               	xorlw	15	; case 8
  7190  000D58  B4D8               	btfsc	status,2,c
  7191  000D5A  D781               	goto	l7736
  7192  000D5C  0A01               	xorlw	1	; case 9
  7193  000D5E  B4D8               	btfsc	status,2,c
  7194  000D60  D78D               	goto	l7738
  7195  000D62  0A03               	xorlw	3	; case 10
  7196  000D64  B4D8               	btfsc	status,2,c
  7197  000D66  D799               	goto	l7740
  7198  000D68  0A01               	xorlw	1	; case 11
  7199  000D6A  B4D8               	btfsc	status,2,c
  7200  000D6C  D7A5               	goto	l7742
  7201  000D6E  0A07               	xorlw	7	; case 12
  7202  000D70  B4D8               	btfsc	status,2,c
  7203  000D72  D7B1               	goto	l7744
  7204  000D74  D7BF               	goto	l7746
  7205  000D76                     l7752:
  7206                           
  7207                           ;UI.c: 167: printf("%02d%s | %02d:%02d:%02d", log_startTime[4],month,log_startTime[2],lo
      +                          g_startTime[1],log_startTime[0]);
  7208  000D76  0E1C               	movlw	low STR_21
  7209  000D78  0100               	movlb	0	; () banked
  7210  000D7A  6F8E               	movwf	printf@f& (0+255),b
  7211  000D7C  0EFB               	movlw	high STR_21
  7212  000D7E  0100               	movlb	0	; () banked
  7213  000D80  6F8F               	movwf	(printf@f+1)& (0+255),b
  7214  000D82  C108  F090         	movff	_log_startTime+8,?_printf+2
  7215  000D86  C109  F091         	movff	_log_startTime+9,?_printf+3
  7216  000D8A  0ED6               	movlw	low UI@month
  7217  000D8C  0100               	movlb	0	; () banked
  7218  000D8E  6F92               	movwf	(?_printf+4)& (0+255),b
  7219  000D90  0E00               	movlw	high UI@month
  7220  000D92  0100               	movlb	0	; () banked
  7221  000D94  6F93               	movwf	(?_printf+5)& (0+255),b
  7222  000D96  C104  F094         	movff	_log_startTime+4,?_printf+6
  7223  000D9A  C105  F095         	movff	_log_startTime+5,?_printf+7
  7224  000D9E  C102  F096         	movff	_log_startTime+2,?_printf+8
  7225  000DA2  C103  F097         	movff	_log_startTime+3,?_printf+9
  7226  000DA6  C100  F098         	movff	_log_startTime,?_printf+10
  7227  000DAA  C101  F099         	movff	_log_startTime+1,?_printf+11
  7228  000DAE  ECB8  F008         	call	_printf	;wreg free
  7229                           
  7230                           ;UI.c: 169: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7231  000DB2  0E00               	movlw	0
  7232  000DB4  0100               	movlb	0	; () banked
  7233  000DB6  6FCC               	movwf	UI@i_431& (0+255),b
  7234  000DB8                     l7756:
  7235                           
  7236                           ; BSR set to: 0
  7237  000DB8  0E63               	movlw	99
  7238  000DBA  0100               	movlb	0	; () banked
  7239  000DBC  65CC               	cpfsgt	UI@i_431& (0+255),b
  7240  000DBE  D001               	goto	l7760
  7241  000DC0  D00C               	goto	l7764
  7242  000DC2                     l7760:
  7243                           
  7244                           ; BSR set to: 0
  7245  000DC2  0E68               	movlw	104
  7246  000DC4  0100               	movlb	0	; () banked
  7247  000DC6  6FC4               	movwf	??_UI& (0+255),b
  7248  000DC8  0EE4               	movlw	228
  7249  000DCA                     u7617:
  7250  000DCA  2EE8               	decfsz	wreg,f,c
  7251  000DCC  D7FE               	bra	u7617
  7252  000DCE  2FC4               	decfsz	??_UI& (0+255),f,b
  7253  000DD0  D7FC               	bra	u7617
  7254  000DD2  F000               	nop	
  7255  000DD4  0100               	movlb	0	; () banked
  7256  000DD6  2BCC               	incf	UI@i_431& (0+255),f,b
  7257  000DD8  D7EF               	goto	l7756
  7258  000DDA                     l7764:
  7259                           
  7260                           ; BSR set to: 0
  7261  000DDA  0100               	movlb	0	; () banked
  7262  000DDC  51F6               	movf	_logstate& (0+255),w,b
  7263  000DDE  0100               	movlb	0	; () banked
  7264  000DE0  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7265  000DE2  B4D8               	btfsc	status,2,c
  7266  000DE4  0012               	return	
  7267                           
  7268                           ; BSR set to: 0
  7269                           ;UI.c: 170: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7270                           
  7271                           ; BSR set to: 0
  7272                           
  7273                           ; BSR set to: 0
  7274  000DE6  0E00               	movlw	0
  7275  000DE8  0100               	movlb	0	; () banked
  7276  000DEA  6FCD               	movwf	UI@i_432& (0+255),b
  7277  000DEC                     l7770:
  7278                           
  7279                           ; BSR set to: 0
  7280  000DEC  0E63               	movlw	99
  7281  000DEE  0100               	movlb	0	; () banked
  7282  000DF0  65CD               	cpfsgt	UI@i_432& (0+255),b
  7283  000DF2  D001               	goto	l7774
  7284  000DF4  D00C               	goto	l7778
  7285  000DF6                     l7774:
  7286                           
  7287                           ; BSR set to: 0
  7288  000DF6  0E68               	movlw	104
  7289  000DF8  0100               	movlb	0	; () banked
  7290  000DFA  6FC4               	movwf	??_UI& (0+255),b
  7291  000DFC  0EE4               	movlw	228
  7292  000DFE                     u7627:
  7293  000DFE  2EE8               	decfsz	wreg,f,c
  7294  000E00  D7FE               	bra	u7627
  7295  000E02  2FC4               	decfsz	??_UI& (0+255),f,b
  7296  000E04  D7FC               	bra	u7627
  7297  000E06  F000               	nop	
  7298  000E08  0100               	movlb	0	; () banked
  7299  000E0A  2BCD               	incf	UI@i_432& (0+255),f,b
  7300  000E0C  D7EF               	goto	l7770
  7301  000E0E                     l7778:
  7302                           
  7303                           ; BSR set to: 0
  7304  000E0E  0100               	movlb	0	; () banked
  7305  000E10  51F6               	movf	_logstate& (0+255),w,b
  7306  000E12  0100               	movlb	0	; () banked
  7307  000E14  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7308  000E16  B4D8               	btfsc	status,2,c
  7309  000E18  0012               	return	
  7310                           
  7311                           ; BSR set to: 0
  7312                           ;UI.c: 172: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7313                           
  7314                           ; BSR set to: 0
  7315                           
  7316                           ; BSR set to: 0
  7317  000E1A  0E01               	movlw	1
  7318  000E1C  ECD6  F024         	call	_lcdInst
  7319  000E20  0E68               	movlw	104
  7320  000E22  0100               	movlb	0	; () banked
  7321  000E24  6FC4               	movwf	??_UI& (0+255),b
  7322  000E26  0EE4               	movlw	228
  7323  000E28                     u7637:
  7324  000E28  2EE8               	decfsz	wreg,f,c
  7325  000E2A  D7FE               	bra	u7637
  7326  000E2C  2FC4               	decfsz	??_UI& (0+255),f,b
  7327  000E2E  D7FC               	bra	u7637
  7328  000E30  F000               	nop	
  7329                           
  7330                           ;UI.c: 173: lcdInst(0b10000000);;
  7331  000E32  0E80               	movlw	128
  7332  000E34  ECD6  F024         	call	_lcdInst
  7333                           
  7334                           ;UI.c: 174: printf("DURATION:");
  7335  000E38  0E9B               	movlw	low STR_22
  7336  000E3A  0100               	movlb	0	; () banked
  7337  000E3C  6F8E               	movwf	printf@f& (0+255),b
  7338  000E3E  0EFF               	movlw	high STR_22
  7339  000E40  0100               	movlb	0	; () banked
  7340  000E42  6F8F               	movwf	(printf@f+1)& (0+255),b
  7341  000E44  ECB8  F008         	call	_printf	;wreg free
  7342                           
  7343                           ;UI.c: 175: lcdInst(0b11000000);;
  7344  000E48  0EC0               	movlw	192
  7345  000E4A  ECD6  F024         	call	_lcdInst
  7346                           
  7347                           ;UI.c: 176: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  7348  000E4E  0E0E               	movlw	14
  7349  000E50  0100               	movlb	0	; () banked
  7350  000E52  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7351  000E54  0E10               	movlw	16
  7352  000E56  6F82               	movwf	___awmod@divisor& (0+255),b
  7353  000E58  C0F4  F080         	movff	_log_total_time,___awmod@dividend
  7354  000E5C  C0F5  F081         	movff	_log_total_time+1,___awmod@dividend+1
  7355  000E60  EC75  F01D         	call	___awmod	;wreg free
  7356  000E64  C080  F0C6         	movff	?___awmod,_UI$2314
  7357  000E68  C081  F0C7         	movff	?___awmod+1,_UI$2314+1
  7358                           
  7359                           ;UI.c: 176: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  7360  000E6C  0E19               	movlw	low STR_23
  7361  000E6E  0100               	movlb	0	; () banked
  7362  000E70  6F8E               	movwf	printf@f& (0+255),b
  7363  000E72  0EFF               	movlw	high STR_23
  7364  000E74  0100               	movlb	0	; () banked
  7365  000E76  6F8F               	movwf	(printf@f+1)& (0+255),b
  7366  000E78  0E0E               	movlw	14
  7367  000E7A  0100               	movlb	0	; () banked
  7368  000E7C  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7369  000E7E  0E10               	movlw	16
  7370  000E80  6F82               	movwf	___awmod@divisor& (0+255),b
  7371  000E82  C0F4  F080         	movff	_log_total_time,___awmod@dividend
  7372  000E86  C0F5  F081         	movff	_log_total_time+1,___awmod@dividend+1
  7373  000E8A  EC75  F01D         	call	___awmod	;wreg free
  7374  000E8E  C080  F086         	movff	?___awmod,___awdiv@dividend
  7375  000E92  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  7376  000E96  0E00               	movlw	0
  7377  000E98  0100               	movlb	0	; () banked
  7378  000E9A  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  7379  000E9C  0E3C               	movlw	60
  7380  000E9E  6F88               	movwf	___awdiv@divisor& (0+255),b
  7381  000EA0  EC63  F01C         	call	___awdiv	;wreg free
  7382  000EA4  C086  F090         	movff	?___awdiv,?_printf+2
  7383  000EA8  C087  F091         	movff	?___awdiv+1,?_printf+3
  7384  000EAC  C0C6  F080         	movff	_UI$2314,___awmod@dividend
  7385  000EB0  C0C7  F081         	movff	_UI$2314+1,___awmod@dividend+1
  7386  000EB4  0E00               	movlw	0
  7387  000EB6  0100               	movlb	0	; () banked
  7388  000EB8  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7389  000EBA  0E3C               	movlw	60
  7390  000EBC  6F82               	movwf	___awmod@divisor& (0+255),b
  7391  000EBE  EC75  F01D         	call	___awmod	;wreg free
  7392  000EC2  C080  F092         	movff	?___awmod,?_printf+4
  7393  000EC6  C081  F093         	movff	?___awmod+1,?_printf+5
  7394  000ECA  ECB8  F008         	call	_printf	;wreg free
  7395                           
  7396                           ;UI.c: 178: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7397  000ECE  0E00               	movlw	0
  7398  000ED0  0100               	movlb	0	; () banked
  7399  000ED2  6FCE               	movwf	UI@i_435& (0+255),b
  7400  000ED4                     l7798:
  7401                           
  7402                           ; BSR set to: 0
  7403  000ED4  0E63               	movlw	99
  7404  000ED6  0100               	movlb	0	; () banked
  7405  000ED8  65CE               	cpfsgt	UI@i_435& (0+255),b
  7406  000EDA  D001               	goto	l7802
  7407  000EDC  D00C               	goto	l7806
  7408  000EDE                     l7802:
  7409                           
  7410                           ; BSR set to: 0
  7411  000EDE  0E68               	movlw	104
  7412  000EE0  0100               	movlb	0	; () banked
  7413  000EE2  6FC4               	movwf	??_UI& (0+255),b
  7414  000EE4  0EE4               	movlw	228
  7415  000EE6                     u7647:
  7416  000EE6  2EE8               	decfsz	wreg,f,c
  7417  000EE8  D7FE               	bra	u7647
  7418  000EEA  2FC4               	decfsz	??_UI& (0+255),f,b
  7419  000EEC  D7FC               	bra	u7647
  7420  000EEE  F000               	nop	
  7421  000EF0  0100               	movlb	0	; () banked
  7422  000EF2  2BCE               	incf	UI@i_435& (0+255),f,b
  7423  000EF4  D7EF               	goto	l7798
  7424  000EF6                     l7806:
  7425                           
  7426                           ; BSR set to: 0
  7427  000EF6  0100               	movlb	0	; () banked
  7428  000EF8  51F6               	movf	_logstate& (0+255),w,b
  7429  000EFA  0100               	movlb	0	; () banked
  7430  000EFC  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7431  000EFE  B4D8               	btfsc	status,2,c
  7432  000F00  0012               	return	
  7433                           
  7434                           ; BSR set to: 0
  7435                           ;UI.c: 179: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7436                           
  7437                           ; BSR set to: 0
  7438                           
  7439                           ; BSR set to: 0
  7440  000F02  0E00               	movlw	0
  7441  000F04  0100               	movlb	0	; () banked
  7442  000F06  6FCF               	movwf	UI@i_436& (0+255),b
  7443  000F08                     l7812:
  7444                           
  7445                           ; BSR set to: 0
  7446  000F08  0E63               	movlw	99
  7447  000F0A  0100               	movlb	0	; () banked
  7448  000F0C  65CF               	cpfsgt	UI@i_436& (0+255),b
  7449  000F0E  D001               	goto	l7816
  7450  000F10  D00C               	goto	l7820
  7451  000F12                     l7816:
  7452                           
  7453                           ; BSR set to: 0
  7454  000F12  0E68               	movlw	104
  7455  000F14  0100               	movlb	0	; () banked
  7456  000F16  6FC4               	movwf	??_UI& (0+255),b
  7457  000F18  0EE4               	movlw	228
  7458  000F1A                     u7657:
  7459  000F1A  2EE8               	decfsz	wreg,f,c
  7460  000F1C  D7FE               	bra	u7657
  7461  000F1E  2FC4               	decfsz	??_UI& (0+255),f,b
  7462  000F20  D7FC               	bra	u7657
  7463  000F22  F000               	nop	
  7464  000F24  0100               	movlb	0	; () banked
  7465  000F26  2BCF               	incf	UI@i_436& (0+255),f,b
  7466  000F28  D7EF               	goto	l7812
  7467  000F2A                     l7820:
  7468                           
  7469                           ; BSR set to: 0
  7470  000F2A  0100               	movlb	0	; () banked
  7471  000F2C  51F6               	movf	_logstate& (0+255),w,b
  7472  000F2E  0100               	movlb	0	; () banked
  7473  000F30  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7474  000F32  B4D8               	btfsc	status,2,c
  7475  000F34  0012               	return	
  7476                           
  7477                           ; BSR set to: 0
  7478                           ;UI.c: 181: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7479                           
  7480                           ; BSR set to: 0
  7481                           
  7482                           ; BSR set to: 0
  7483  000F36  0E01               	movlw	1
  7484  000F38  ECD6  F024         	call	_lcdInst
  7485  000F3C  0E68               	movlw	104
  7486  000F3E  0100               	movlb	0	; () banked
  7487  000F40  6FC4               	movwf	??_UI& (0+255),b
  7488  000F42  0EE4               	movlw	228
  7489  000F44                     u7667:
  7490  000F44  2EE8               	decfsz	wreg,f,c
  7491  000F46  D7FE               	bra	u7667
  7492  000F48  2FC4               	decfsz	??_UI& (0+255),f,b
  7493  000F4A  D7FC               	bra	u7667
  7494  000F4C  F000               	nop	
  7495                           
  7496                           ;UI.c: 182: lcdInst(0b10000000);;
  7497  000F4E  0E80               	movlw	128
  7498  000F50  ECD6  F024         	call	_lcdInst
  7499                           
  7500                           ;UI.c: 183: printf(" -- POP  CAN -- ");
  7501  000F54  0E3C               	movlw	low STR_24
  7502  000F56  0100               	movlb	0	; () banked
  7503  000F58  6F8E               	movwf	printf@f& (0+255),b
  7504  000F5A  0EFD               	movlw	high STR_24
  7505  000F5C  0100               	movlb	0	; () banked
  7506  000F5E  6F8F               	movwf	(printf@f+1)& (0+255),b
  7507  000F60  ECB8  F008         	call	_printf	;wreg free
  7508                           
  7509                           ;UI.c: 184: lcdInst(0b11000000);;
  7510  000F64  0EC0               	movlw	192
  7511  000F66  ECD6  F024         	call	_lcdInst
  7512                           
  7513                           ;UI.c: 185: printf("NTAB: %d|TAB: %d", log_count_pop_no_tab, log_count_pop_w_tab);
  7514  000F6A  0E19               	movlw	low STR_25
  7515  000F6C  0100               	movlb	0	; () banked
  7516  000F6E  6F8E               	movwf	printf@f& (0+255),b
  7517  000F70  0EFE               	movlw	high STR_25
  7518  000F72  0100               	movlb	0	; () banked
  7519  000F74  6F8F               	movwf	(printf@f+1)& (0+255),b
  7520  000F76  C0EE  F090         	movff	_log_count_pop_no_tab,?_printf+2
  7521  000F7A  C0EF  F091         	movff	_log_count_pop_no_tab+1,?_printf+3
  7522  000F7E  C0F0  F092         	movff	_log_count_pop_w_tab,?_printf+4
  7523  000F82  C0F1  F093         	movff	_log_count_pop_w_tab+1,?_printf+5
  7524  000F86  ECB8  F008         	call	_printf	;wreg free
  7525                           
  7526                           ;UI.c: 187: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7527  000F8A  0E00               	movlw	0
  7528  000F8C  0100               	movlb	0	; () banked
  7529  000F8E  6FD0               	movwf	UI@i_439& (0+255),b
  7530  000F90                     l7838:
  7531                           
  7532                           ; BSR set to: 0
  7533  000F90  0E63               	movlw	99
  7534  000F92  0100               	movlb	0	; () banked
  7535  000F94  65D0               	cpfsgt	UI@i_439& (0+255),b
  7536  000F96  D001               	goto	l7842
  7537  000F98  D00C               	goto	l7846
  7538  000F9A                     l7842:
  7539                           
  7540                           ; BSR set to: 0
  7541  000F9A  0E68               	movlw	104
  7542  000F9C  0100               	movlb	0	; () banked
  7543  000F9E  6FC4               	movwf	??_UI& (0+255),b
  7544  000FA0  0EE4               	movlw	228
  7545  000FA2                     u7677:
  7546  000FA2  2EE8               	decfsz	wreg,f,c
  7547  000FA4  D7FE               	bra	u7677
  7548  000FA6  2FC4               	decfsz	??_UI& (0+255),f,b
  7549  000FA8  D7FC               	bra	u7677
  7550  000FAA  F000               	nop	
  7551  000FAC  0100               	movlb	0	; () banked
  7552  000FAE  2BD0               	incf	UI@i_439& (0+255),f,b
  7553  000FB0  D7EF               	goto	l7838
  7554  000FB2                     l7846:
  7555                           
  7556                           ; BSR set to: 0
  7557  000FB2  0100               	movlb	0	; () banked
  7558  000FB4  51F6               	movf	_logstate& (0+255),w,b
  7559  000FB6  0100               	movlb	0	; () banked
  7560  000FB8  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7561  000FBA  B4D8               	btfsc	status,2,c
  7562  000FBC  0012               	return	
  7563                           
  7564                           ; BSR set to: 0
  7565                           ;UI.c: 188: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7566                           
  7567                           ; BSR set to: 0
  7568                           
  7569                           ; BSR set to: 0
  7570  000FBE  0E00               	movlw	0
  7571  000FC0  0100               	movlb	0	; () banked
  7572  000FC2  6FD1               	movwf	UI@i_440& (0+255),b
  7573  000FC4                     l7852:
  7574                           
  7575                           ; BSR set to: 0
  7576  000FC4  0E63               	movlw	99
  7577  000FC6  0100               	movlb	0	; () banked
  7578  000FC8  65D1               	cpfsgt	UI@i_440& (0+255),b
  7579  000FCA  D001               	goto	l7856
  7580  000FCC  D00C               	goto	l7860
  7581  000FCE                     l7856:
  7582                           
  7583                           ; BSR set to: 0
  7584  000FCE  0E68               	movlw	104
  7585  000FD0  0100               	movlb	0	; () banked
  7586  000FD2  6FC4               	movwf	??_UI& (0+255),b
  7587  000FD4  0EE4               	movlw	228
  7588  000FD6                     u7687:
  7589  000FD6  2EE8               	decfsz	wreg,f,c
  7590  000FD8  D7FE               	bra	u7687
  7591  000FDA  2FC4               	decfsz	??_UI& (0+255),f,b
  7592  000FDC  D7FC               	bra	u7687
  7593  000FDE  F000               	nop	
  7594  000FE0  0100               	movlb	0	; () banked
  7595  000FE2  2BD1               	incf	UI@i_440& (0+255),f,b
  7596  000FE4  D7EF               	goto	l7852
  7597  000FE6                     l7860:
  7598                           
  7599                           ; BSR set to: 0
  7600  000FE6  0100               	movlb	0	; () banked
  7601  000FE8  51F6               	movf	_logstate& (0+255),w,b
  7602  000FEA  0100               	movlb	0	; () banked
  7603  000FEC  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7604  000FEE  B4D8               	btfsc	status,2,c
  7605  000FF0  0012               	return	
  7606                           
  7607                           ; BSR set to: 0
  7608                           ;UI.c: 190: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7609                           
  7610                           ; BSR set to: 0
  7611                           
  7612                           ; BSR set to: 0
  7613  000FF2  0E01               	movlw	1
  7614  000FF4  ECD6  F024         	call	_lcdInst
  7615  000FF8  0E68               	movlw	104
  7616  000FFA  0100               	movlb	0	; () banked
  7617  000FFC  6FC4               	movwf	??_UI& (0+255),b
  7618  000FFE  0EE4               	movlw	228
  7619  001000                     u7697:
  7620  001000  2EE8               	decfsz	wreg,f,c
  7621  001002  D7FE               	bra	u7697
  7622  001004  2FC4               	decfsz	??_UI& (0+255),f,b
  7623  001006  D7FC               	bra	u7697
  7624  001008  F000               	nop	
  7625                           
  7626                           ;UI.c: 191: lcdInst(0b10000000);;
  7627  00100A  0E80               	movlw	128
  7628  00100C  ECD6  F024         	call	_lcdInst
  7629                           
  7630                           ;UI.c: 192: printf(" -- SOUP CAN -- ");
  7631  001010  0E4D               	movlw	low STR_26
  7632  001012  0100               	movlb	0	; () banked
  7633  001014  6F8E               	movwf	printf@f& (0+255),b
  7634  001016  0EFD               	movlw	high STR_26
  7635  001018  0100               	movlb	0	; () banked
  7636  00101A  6F8F               	movwf	(printf@f+1)& (0+255),b
  7637  00101C  ECB8  F008         	call	_printf	;wreg free
  7638                           
  7639                           ;UI.c: 193: lcdInst(0b11000000);;
  7640  001020  0EC0               	movlw	192
  7641  001022  ECD6  F024         	call	_lcdInst
  7642                           
  7643                           ;UI.c: 194: printf("NLAB: %d|LAB: %d", log_count_can_no_lab, log_count_can_w_lab);
  7644  001026  0E08               	movlw	low STR_27
  7645  001028  0100               	movlb	0	; () banked
  7646  00102A  6F8E               	movwf	printf@f& (0+255),b
  7647  00102C  0EFE               	movlw	high STR_27
  7648  00102E  0100               	movlb	0	; () banked
  7649  001030  6F8F               	movwf	(printf@f+1)& (0+255),b
  7650  001032  C0EA  F090         	movff	_log_count_can_no_lab,?_printf+2
  7651  001036  C0EB  F091         	movff	_log_count_can_no_lab+1,?_printf+3
  7652  00103A  C0EC  F092         	movff	_log_count_can_w_lab,?_printf+4
  7653  00103E  C0ED  F093         	movff	_log_count_can_w_lab+1,?_printf+5
  7654  001042  ECB8  F008         	call	_printf	;wreg free
  7655                           
  7656                           ;UI.c: 196: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7657  001046  0E00               	movlw	0
  7658  001048  0100               	movlb	0	; () banked
  7659  00104A  6FD2               	movwf	UI@i_443& (0+255),b
  7660  00104C                     l7878:
  7661                           
  7662                           ; BSR set to: 0
  7663  00104C  0E63               	movlw	99
  7664  00104E  0100               	movlb	0	; () banked
  7665  001050  65D2               	cpfsgt	UI@i_443& (0+255),b
  7666  001052  D001               	goto	l7882
  7667  001054  D00C               	goto	l7886
  7668  001056                     l7882:
  7669                           
  7670                           ; BSR set to: 0
  7671  001056  0E68               	movlw	104
  7672  001058  0100               	movlb	0	; () banked
  7673  00105A  6FC4               	movwf	??_UI& (0+255),b
  7674  00105C  0EE4               	movlw	228
  7675  00105E                     u7707:
  7676  00105E  2EE8               	decfsz	wreg,f,c
  7677  001060  D7FE               	bra	u7707
  7678  001062  2FC4               	decfsz	??_UI& (0+255),f,b
  7679  001064  D7FC               	bra	u7707
  7680  001066  F000               	nop	
  7681  001068  0100               	movlb	0	; () banked
  7682  00106A  2BD2               	incf	UI@i_443& (0+255),f,b
  7683  00106C  D7EF               	goto	l7878
  7684  00106E                     l7886:
  7685                           
  7686                           ; BSR set to: 0
  7687  00106E  0100               	movlb	0	; () banked
  7688  001070  51F6               	movf	_logstate& (0+255),w,b
  7689  001072  0100               	movlb	0	; () banked
  7690  001074  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7691  001076  B4D8               	btfsc	status,2,c
  7692  001078  0012               	return	
  7693                           
  7694                           ; BSR set to: 0
  7695                           ;UI.c: 197: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7696                           
  7697                           ; BSR set to: 0
  7698                           
  7699                           ; BSR set to: 0
  7700  00107A  0E00               	movlw	0
  7701  00107C  0100               	movlb	0	; () banked
  7702  00107E  6FD3               	movwf	UI@i_444& (0+255),b
  7703  001080                     l7892:
  7704                           
  7705                           ; BSR set to: 0
  7706  001080  0E63               	movlw	99
  7707  001082  0100               	movlb	0	; () banked
  7708  001084  65D3               	cpfsgt	UI@i_444& (0+255),b
  7709  001086  D001               	goto	l7896
  7710  001088  D00C               	goto	l7900
  7711  00108A                     l7896:
  7712                           
  7713                           ; BSR set to: 0
  7714  00108A  0E68               	movlw	104
  7715  00108C  0100               	movlb	0	; () banked
  7716  00108E  6FC4               	movwf	??_UI& (0+255),b
  7717  001090  0EE4               	movlw	228
  7718  001092                     u7717:
  7719  001092  2EE8               	decfsz	wreg,f,c
  7720  001094  D7FE               	bra	u7717
  7721  001096  2FC4               	decfsz	??_UI& (0+255),f,b
  7722  001098  D7FC               	bra	u7717
  7723  00109A  F000               	nop	
  7724  00109C  0100               	movlb	0	; () banked
  7725  00109E  2BD3               	incf	UI@i_444& (0+255),f,b
  7726  0010A0  D7EF               	goto	l7892
  7727  0010A2                     l7900:
  7728                           
  7729                           ; BSR set to: 0
  7730  0010A2  0100               	movlb	0	; () banked
  7731  0010A4  51F6               	movf	_logstate& (0+255),w,b
  7732  0010A6  0100               	movlb	0	; () banked
  7733  0010A8  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7734  0010AA  B4D8               	btfsc	status,2,c
  7735  0010AC  0012               	return	
  7736                           
  7737                           ; BSR set to: 0
  7738                           ;UI.c: 199: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7739                           
  7740                           ; BSR set to: 0
  7741                           
  7742                           ; BSR set to: 0
  7743  0010AE  0E01               	movlw	1
  7744  0010B0  ECD6  F024         	call	_lcdInst
  7745  0010B4  0E68               	movlw	104
  7746  0010B6  0100               	movlb	0	; () banked
  7747  0010B8  6FC4               	movwf	??_UI& (0+255),b
  7748  0010BA  0EE4               	movlw	228
  7749  0010BC                     u7727:
  7750  0010BC  2EE8               	decfsz	wreg,f,c
  7751  0010BE  D7FE               	bra	u7727
  7752  0010C0  2FC4               	decfsz	??_UI& (0+255),f,b
  7753  0010C2  D7FC               	bra	u7727
  7754  0010C4  F000               	nop	
  7755                           
  7756                           ;UI.c: 200: lcdInst(0b10000000);;
  7757  0010C6  0E80               	movlw	128
  7758  0010C8  ECD6  F024         	call	_lcdInst
  7759                           
  7760                           ;UI.c: 201: printf("-- TOTAL CANS --");
  7761  0010CC  0E5E               	movlw	low STR_28
  7762  0010CE  0100               	movlb	0	; () banked
  7763  0010D0  6F8E               	movwf	printf@f& (0+255),b
  7764  0010D2  0EFD               	movlw	high STR_28
  7765  0010D4  0100               	movlb	0	; () banked
  7766  0010D6  6F8F               	movwf	(printf@f+1)& (0+255),b
  7767  0010D8  ECB8  F008         	call	_printf	;wreg free
  7768                           
  7769                           ;UI.c: 202: lcdInst(0b11000000);;
  7770  0010DC  0EC0               	movlw	192
  7771  0010DE  ECD6  F024         	call	_lcdInst
  7772                           
  7773                           ;UI.c: 203: printf("%d", log_count_total);
  7774  0010E2  0E16               	movlw	low (STR_27+14)
  7775  0010E4  0100               	movlb	0	; () banked
  7776  0010E6  6F8E               	movwf	printf@f& (0+255),b
  7777  0010E8  0EFE               	movlw	high (STR_27+14)
  7778  0010EA  0100               	movlb	0	; () banked
  7779  0010EC  6F8F               	movwf	(printf@f+1)& (0+255),b
  7780  0010EE  C0F2  F090         	movff	_log_count_total,?_printf+2
  7781  0010F2  C0F3  F091         	movff	_log_count_total+1,?_printf+3
  7782  0010F6  ECB8  F008         	call	_printf	;wreg free
  7783                           
  7784                           ;UI.c: 205: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7785  0010FA  0E00               	movlw	0
  7786  0010FC  0100               	movlb	0	; () banked
  7787  0010FE  6FD4               	movwf	UI@i_447& (0+255),b
  7788  001100                     l7918:
  7789                           
  7790                           ; BSR set to: 0
  7791  001100  0E63               	movlw	99
  7792  001102  0100               	movlb	0	; () banked
  7793  001104  65D4               	cpfsgt	UI@i_447& (0+255),b
  7794  001106  D001               	goto	l7922
  7795  001108  D00C               	goto	l7926
  7796  00110A                     l7922:
  7797                           
  7798                           ; BSR set to: 0
  7799  00110A  0E68               	movlw	104
  7800  00110C  0100               	movlb	0	; () banked
  7801  00110E  6FC4               	movwf	??_UI& (0+255),b
  7802  001110  0EE4               	movlw	228
  7803  001112                     u7737:
  7804  001112  2EE8               	decfsz	wreg,f,c
  7805  001114  D7FE               	bra	u7737
  7806  001116  2FC4               	decfsz	??_UI& (0+255),f,b
  7807  001118  D7FC               	bra	u7737
  7808  00111A  F000               	nop	
  7809  00111C  0100               	movlb	0	; () banked
  7810  00111E  2BD4               	incf	UI@i_447& (0+255),f,b
  7811  001120  D7EF               	goto	l7918
  7812  001122                     l7926:
  7813                           
  7814                           ; BSR set to: 0
  7815  001122  0100               	movlb	0	; () banked
  7816  001124  51F6               	movf	_logstate& (0+255),w,b
  7817  001126  0100               	movlb	0	; () banked
  7818  001128  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7819  00112A  B4D8               	btfsc	status,2,c
  7820  00112C  0012               	return	
  7821                           
  7822                           ; BSR set to: 0
  7823                           ;UI.c: 206: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7824                           
  7825                           ; BSR set to: 0
  7826                           
  7827                           ; BSR set to: 0
  7828  00112E  0E00               	movlw	0
  7829  001130  0100               	movlb	0	; () banked
  7830  001132  6FD5               	movwf	UI@i_448& (0+255),b
  7831  001134                     l7932:
  7832                           
  7833                           ; BSR set to: 0
  7834  001134  0E63               	movlw	99
  7835  001136  0100               	movlb	0	; () banked
  7836  001138  65D5               	cpfsgt	UI@i_448& (0+255),b
  7837  00113A  D001               	goto	l7936
  7838  00113C  D00C               	goto	l7940
  7839  00113E                     l7936:
  7840                           
  7841                           ; BSR set to: 0
  7842  00113E  0E68               	movlw	104
  7843  001140  0100               	movlb	0	; () banked
  7844  001142  6FC4               	movwf	??_UI& (0+255),b
  7845  001144  0EE4               	movlw	228
  7846  001146                     u7747:
  7847  001146  2EE8               	decfsz	wreg,f,c
  7848  001148  D7FE               	bra	u7747
  7849  00114A  2FC4               	decfsz	??_UI& (0+255),f,b
  7850  00114C  D7FC               	bra	u7747
  7851  00114E  F000               	nop	
  7852  001150  0100               	movlb	0	; () banked
  7853  001152  2BD5               	incf	UI@i_448& (0+255),f,b
  7854  001154  D7EF               	goto	l7932
  7855  001156                     l7940:
  7856                           
  7857                           ; BSR set to: 0
  7858  001156  0100               	movlb	0	; () banked
  7859  001158  51F6               	movf	_logstate& (0+255),w,b
  7860  00115A  0100               	movlb	0	; () banked
  7861  00115C  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7862  00115E  B4D8               	btfsc	status,2,c
  7863  001160  0012               	return	
  7864  001162                     l7944:
  7865  001162  0100               	movlb	0	; () banked
  7866  001164  51F6               	movf	_logstate& (0+255),w,b
  7867  001166  0100               	movlb	0	; () banked
  7868  001168  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7869  00116A  B4D8               	btfsc	status,2,c
  7870  00116C  0012               	return	
  7871  00116E  D44A               	goto	l7640
  7872  001170                     __end_of_UI:
  7873                           	opt stack 0
  7874                           tblptru	equ	0xFF8
  7875                           tblptrh	equ	0xFF7
  7876                           tblptrl	equ	0xFF6
  7877                           tablat	equ	0xFF5
  7878                           prodh	equ	0xFF4
  7879                           prodl	equ	0xFF3
  7880                           intcon	equ	0xFF2
  7881                           intcon2	equ	0xFF1
  7882                           intcon3	equ	0xFF0
  7883                           postinc0	equ	0xFEE
  7884                           wreg	equ	0xFE8
  7885                           postdec1	equ	0xFE5
  7886                           fsr1l	equ	0xFE1
  7887                           indf2	equ	0xFDF
  7888                           postinc2	equ	0xFDE
  7889                           postdec2	equ	0xFDD
  7890                           fsr2h	equ	0xFDA
  7891                           fsr2l	equ	0xFD9
  7892                           status	equ	0xFD8
  7893                           
  7894 ;; *************** function _printRTC *****************
  7895 ;; Defined at:
  7896 ;;		line 63 in file "RTC.c"
  7897 ;; Parameters:    Size  Location     Type
  7898 ;;		None
  7899 ;; Auto vars:     Size  Location     Type
  7900 ;;  i               2   66[BANK0 ] int 
  7901 ;;  INT_time       14   46[BANK0 ] int [7]
  7902 ;;  month           4   62[BANK0 ] unsigned char [4]
  7903 ;;  RTC_month       2   60[BANK0 ] int 
  7904 ;; Return value:  Size  Location     Type
  7905 ;;                  1    wreg      void 
  7906 ;; Registers used:
  7907 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7908 ;; Tracked objects:
  7909 ;;		On entry : 0/0
  7910 ;;		On exit  : 0/0
  7911 ;;		Unchanged: 0/0
  7912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7913 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7914 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7915 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7916 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7917 ;;Total ram usage:       25 bytes
  7918 ;; Hardware stack levels used:    1
  7919 ;; Hardware stack levels required when called:   10
  7920 ;; This function calls:
  7921 ;;		_getRTC
  7922 ;;		_lcdInst
  7923 ;;		_printf
  7924 ;;		_strcpy
  7925 ;; This function is called by:
  7926 ;;		_UI
  7927 ;;		_change_state_to_menu_start
  7928 ;; This function uses a non-reentrant model
  7929 ;;
  7930                           
  7931                           	psect	text24
  7932  001F98                     __ptext24:
  7933                           	opt stack 0
  7934  001F98                     _printRTC:
  7935                           	opt stack 18
  7936                           
  7937                           ;RTC.c: 64: getRTC();
  7938                           
  7939                           ; BSR set to: 0
  7940                           ;incstack = 0
  7941  001F98  EC0C  F01E         	call	_getRTC	;wreg free
  7942                           
  7943                           ;RTC.c: 65: char month[] = "MMM";
  7944  001F9C  C133  F0BE         	movff	printRTC@F3216,printRTC@month
  7945  001FA0  C134  F0BF         	movff	printRTC@F3216+1,printRTC@month+1
  7946  001FA4  C135  F0C0         	movff	printRTC@F3216+2,printRTC@month+2
  7947  001FA8  C136  F0C1         	movff	printRTC@F3216+3,printRTC@month+3
  7948                           
  7949                           ;RTC.c: 66: int INT_time[7];
  7950                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
  7951  001FAC  0E00               	movlw	0
  7952  001FAE  0100               	movlb	0	; () banked
  7953  001FB0  6FC3               	movwf	(printRTC@i+1)& (0+255),b
  7954  001FB2  0E00               	movlw	0
  7955  001FB4  6FC2               	movwf	printRTC@i& (0+255),b
  7956                           
  7957                           ; BSR set to: 0
  7958  001FB6  0100               	movlb	0	; () banked
  7959  001FB8  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  7960  001FBA  D008               	goto	l5986
  7961  001FBC  0100               	movlb	0	; () banked
  7962  001FBE  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  7963  001FC0  E146               	bnz	l602
  7964  001FC2  0E07               	movlw	7
  7965  001FC4  0100               	movlb	0	; () banked
  7966  001FC6  5DC2               	subwf	printRTC@i& (0+255),w,b
  7967  001FC8  B0D8               	btfsc	status,0,c
  7968  001FCA  D041               	goto	l602
  7969  001FCC                     l5986:
  7970                           
  7971                           ; BSR set to: 0
  7972                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  7973  001FCC  0E24               	movlw	low _time
  7974  001FCE  0100               	movlb	0	; () banked
  7975  001FD0  25C2               	addwf	printRTC@i& (0+255),w,b
  7976  001FD2  6ED9               	movwf	fsr2l,c
  7977  001FD4  0E01               	movlw	high _time
  7978  001FD6  0100               	movlb	0	; () banked
  7979  001FD8  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  7980  001FDA  6EDA               	movwf	fsr2h,c
  7981  001FDC  50DF               	movf	indf2,w,c
  7982  001FDE  0100               	movlb	0	; () banked
  7983  001FE0  6FAB               	movwf	??_printRTC& (0+255),b
  7984  001FE2  0100               	movlb	0	; () banked
  7985  001FE4  3BAB               	swapf	??_printRTC& (0+255),f,b
  7986  001FE6  0E0F               	movlw	15
  7987  001FE8  17AB               	andwf	??_printRTC& (0+255),f,b
  7988  001FEA  0E0F               	movlw	15
  7989  001FEC  0100               	movlb	0	; () banked
  7990  001FEE  17AB               	andwf	??_printRTC& (0+255),f,b
  7991  001FF0  0100               	movlb	0	; () banked
  7992  001FF2  51AB               	movf	??_printRTC& (0+255),w,b
  7993  001FF4  0D0A               	mullw	10
  7994  001FF6  0E24               	movlw	low _time
  7995  001FF8  0100               	movlb	0	; () banked
  7996  001FFA  25C2               	addwf	printRTC@i& (0+255),w,b
  7997  001FFC  6ED9               	movwf	fsr2l,c
  7998  001FFE  0E01               	movlw	high _time
  7999  002000  0100               	movlb	0	; () banked
  8000  002002  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  8001  002004  6EDA               	movwf	fsr2h,c
  8002  002006  50DF               	movf	indf2,w,c
  8003  002008  0B0F               	andlw	15
  8004  00200A  0100               	movlb	0	; () banked
  8005  00200C  6FAC               	movwf	(??_printRTC+1)& (0+255),b
  8006  00200E  6BAD               	clrf	(??_printRTC+2)& (0+255),b
  8007  002010  50F3               	movf	prodl,w,c
  8008  002012  0100               	movlb	0	; () banked
  8009  002014  27AC               	addwf	(??_printRTC+1)& (0+255),f,b
  8010  002016  50F4               	movf	prodh,w,c
  8011  002018  0100               	movlb	0	; () banked
  8012  00201A  23AD               	addwfc	(??_printRTC+2)& (0+255),f,b
  8013  00201C  90D8               	bcf	status,0,c
  8014  00201E  0100               	movlb	0	; () banked
  8015  002020  35C2               	rlcf	printRTC@i& (0+255),w,b
  8016  002022  6ED9               	movwf	fsr2l,c
  8017  002024  0100               	movlb	0	; () banked
  8018  002026  35C3               	rlcf	(printRTC@i+1)& (0+255),w,b
  8019  002028  6EDA               	movwf	fsr2h,c
  8020  00202A  0EAE               	movlw	low printRTC@INT_time
  8021  00202C  26D9               	addwf	fsr2l,f,c
  8022  00202E  0E00               	movlw	high printRTC@INT_time
  8023  002030  22DA               	addwfc	fsr2h,f,c
  8024  002032  C0AC  FFDE         	movff	??_printRTC+1,postinc2
  8025  002036  C0AD  FFDD         	movff	??_printRTC+2,postdec2
  8026                           
  8027                           ; BSR set to: 0
  8028  00203A  0100               	movlb	0	; () banked
  8029  00203C  4BC2               	infsnz	printRTC@i& (0+255),f,b
  8030  00203E  2BC3               	incf	(printRTC@i+1)& (0+255),f,b
  8031                           
  8032                           ; BSR set to: 0
  8033  002040  0100               	movlb	0	; () banked
  8034  002042  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  8035  002044  D7C3               	goto	l5986
  8036  002046  0100               	movlb	0	; () banked
  8037  002048  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  8038  00204A  E101               	bnz	u4630
  8039  00204C  D7BA               	goto	L6
  8040  00204E                     u4630:
  8041  00204E                     l602:
  8042                           
  8043                           ; BSR set to: 0
  8044                           ;RTC.c: 69: }
  8045                           ;RTC.c: 70: int RTC_month = INT_time[5];
  8046  00204E  C0B8  F0BC         	movff	printRTC@INT_time+10,printRTC@RTC_month
  8047  002052  C0B9  F0BD         	movff	printRTC@INT_time+11,printRTC@RTC_month+1
  8048                           
  8049                           ;RTC.c: 71: switch(RTC_month){
  8050  002056  D0B4               	goto	l6018
  8051  002058                     l5992:
  8052                           
  8053                           ; BSR set to: 0
  8054                           ;RTC.c: 73: strcpy(month, "JAN");
  8055  002058  0EBE               	movlw	low printRTC@month
  8056  00205A  0100               	movlb	0	; () banked
  8057  00205C  6F80               	movwf	strcpy@to& (0+255),b
  8058  00205E  0E00               	movlw	high printRTC@month
  8059  002060  0100               	movlb	0	; () banked
  8060  002062  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8061  002064  0EDB               	movlw	low STR_8
  8062  002066  0100               	movlb	0	; () banked
  8063  002068  6F82               	movwf	strcpy@from& (0+255),b
  8064  00206A  0EFF               	movlw	high STR_8
  8065  00206C  0100               	movlb	0	; () banked
  8066  00206E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8067  002070  EC42  F022         	call	_strcpy	;wreg free
  8068                           
  8069                           ;RTC.c: 74: break;
  8070  002074  D0D4               	goto	l6020
  8071  002076                     l5994:
  8072                           
  8073                           ;RTC.c: 76: strcpy(month, "FEB");
  8074  002076  0EBE               	movlw	low printRTC@month
  8075  002078  0100               	movlb	0	; () banked
  8076  00207A  6F80               	movwf	strcpy@to& (0+255),b
  8077  00207C  0E00               	movlw	high printRTC@month
  8078  00207E  0100               	movlb	0	; () banked
  8079  002080  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8080  002082  0ECB               	movlw	low STR_9
  8081  002084  0100               	movlb	0	; () banked
  8082  002086  6F82               	movwf	strcpy@from& (0+255),b
  8083  002088  0EFF               	movlw	high STR_9
  8084  00208A  0100               	movlb	0	; () banked
  8085  00208C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8086  00208E  EC42  F022         	call	_strcpy	;wreg free
  8087                           
  8088                           ;RTC.c: 77: break;
  8089  002092  D0C5               	goto	l6020
  8090  002094                     l5996:
  8091                           
  8092                           ;RTC.c: 79: strcpy(month, "MAR");
  8093  002094  0EBE               	movlw	low printRTC@month
  8094  002096  0100               	movlb	0	; () banked
  8095  002098  6F80               	movwf	strcpy@to& (0+255),b
  8096  00209A  0E00               	movlw	high printRTC@month
  8097  00209C  0100               	movlb	0	; () banked
  8098  00209E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8099  0020A0  0EE7               	movlw	low STR_10
  8100  0020A2  0100               	movlb	0	; () banked
  8101  0020A4  6F82               	movwf	strcpy@from& (0+255),b
  8102  0020A6  0EFF               	movlw	high STR_10
  8103  0020A8  0100               	movlb	0	; () banked
  8104  0020AA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8105  0020AC  EC42  F022         	call	_strcpy	;wreg free
  8106                           
  8107                           ;RTC.c: 80: break;
  8108  0020B0  D0B6               	goto	l6020
  8109  0020B2                     l5998:
  8110                           
  8111                           ;RTC.c: 82: strcpy(month, "APR");
  8112  0020B2  0EBE               	movlw	low printRTC@month
  8113  0020B4  0100               	movlb	0	; () banked
  8114  0020B6  6F80               	movwf	strcpy@to& (0+255),b
  8115  0020B8  0E00               	movlw	high printRTC@month
  8116  0020BA  0100               	movlb	0	; () banked
  8117  0020BC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8118  0020BE  0EEB               	movlw	low STR_11
  8119  0020C0  0100               	movlb	0	; () banked
  8120  0020C2  6F82               	movwf	strcpy@from& (0+255),b
  8121  0020C4  0EFF               	movlw	high STR_11
  8122  0020C6  0100               	movlb	0	; () banked
  8123  0020C8  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8124  0020CA  EC42  F022         	call	_strcpy	;wreg free
  8125                           
  8126                           ;RTC.c: 83: break;
  8127  0020CE  D0A7               	goto	l6020
  8128  0020D0                     l6000:
  8129                           
  8130                           ;RTC.c: 85: strcpy(month, "MAY");
  8131  0020D0  0EBE               	movlw	low printRTC@month
  8132  0020D2  0100               	movlb	0	; () banked
  8133  0020D4  6F80               	movwf	strcpy@to& (0+255),b
  8134  0020D6  0E00               	movlw	high printRTC@month
  8135  0020D8  0100               	movlb	0	; () banked
  8136  0020DA  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8137  0020DC  0EFB               	movlw	low STR_12
  8138  0020DE  0100               	movlb	0	; () banked
  8139  0020E0  6F82               	movwf	strcpy@from& (0+255),b
  8140  0020E2  0EFF               	movlw	high STR_12
  8141  0020E4  0100               	movlb	0	; () banked
  8142  0020E6  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8143  0020E8  EC42  F022         	call	_strcpy	;wreg free
  8144                           
  8145                           ;RTC.c: 86: break;
  8146  0020EC  D098               	goto	l6020
  8147  0020EE                     l6002:
  8148                           
  8149                           ;RTC.c: 88: strcpy(month, "JUN");
  8150  0020EE  0EBE               	movlw	low printRTC@month
  8151  0020F0  0100               	movlb	0	; () banked
  8152  0020F2  6F80               	movwf	strcpy@to& (0+255),b
  8153  0020F4  0E00               	movlw	high printRTC@month
  8154  0020F6  0100               	movlb	0	; () banked
  8155  0020F8  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8156  0020FA  0EDF               	movlw	low STR_13
  8157  0020FC  0100               	movlb	0	; () banked
  8158  0020FE  6F82               	movwf	strcpy@from& (0+255),b
  8159  002100  0EFF               	movlw	high STR_13
  8160  002102  0100               	movlb	0	; () banked
  8161  002104  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8162  002106  EC42  F022         	call	_strcpy	;wreg free
  8163                           
  8164                           ;RTC.c: 89: break;
  8165  00210A  D089               	goto	l6020
  8166  00210C                     l6004:
  8167                           
  8168                           ;RTC.c: 91: strcpy(month, "JUL");
  8169  00210C  0EBE               	movlw	low printRTC@month
  8170  00210E  0100               	movlb	0	; () banked
  8171  002110  6F80               	movwf	strcpy@to& (0+255),b
  8172  002112  0E00               	movlw	high printRTC@month
  8173  002114  0100               	movlb	0	; () banked
  8174  002116  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8175  002118  0ED7               	movlw	low STR_14
  8176  00211A  0100               	movlb	0	; () banked
  8177  00211C  6F82               	movwf	strcpy@from& (0+255),b
  8178  00211E  0EFF               	movlw	high STR_14
  8179  002120  0100               	movlb	0	; () banked
  8180  002122  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8181  002124  EC42  F022         	call	_strcpy	;wreg free
  8182                           
  8183                           ;RTC.c: 92: break;
  8184  002128  D07A               	goto	l6020
  8185  00212A                     l6006:
  8186                           
  8187                           ;RTC.c: 94: strcpy(month, "AUG");
  8188  00212A  0EBE               	movlw	low printRTC@month
  8189  00212C  0100               	movlb	0	; () banked
  8190  00212E  6F80               	movwf	strcpy@to& (0+255),b
  8191  002130  0E00               	movlw	high printRTC@month
  8192  002132  0100               	movlb	0	; () banked
  8193  002134  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8194  002136  0ED3               	movlw	low STR_15
  8195  002138  0100               	movlb	0	; () banked
  8196  00213A  6F82               	movwf	strcpy@from& (0+255),b
  8197  00213C  0EFF               	movlw	high STR_15
  8198  00213E  0100               	movlb	0	; () banked
  8199  002140  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8200  002142  EC42  F022         	call	_strcpy	;wreg free
  8201                           
  8202                           ;RTC.c: 95: break;
  8203  002146  D06B               	goto	l6020
  8204  002148                     l6008:
  8205                           
  8206                           ;RTC.c: 97: strcpy(month, "SEP");
  8207  002148  0EBE               	movlw	low printRTC@month
  8208  00214A  0100               	movlb	0	; () banked
  8209  00214C  6F80               	movwf	strcpy@to& (0+255),b
  8210  00214E  0E00               	movlw	high printRTC@month
  8211  002150  0100               	movlb	0	; () banked
  8212  002152  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8213  002154  0EE3               	movlw	low STR_16
  8214  002156  0100               	movlb	0	; () banked
  8215  002158  6F82               	movwf	strcpy@from& (0+255),b
  8216  00215A  0EFF               	movlw	high STR_16
  8217  00215C  0100               	movlb	0	; () banked
  8218  00215E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8219  002160  EC42  F022         	call	_strcpy	;wreg free
  8220                           
  8221                           ;RTC.c: 98: break;
  8222  002164  D05C               	goto	l6020
  8223  002166                     l6010:
  8224                           
  8225                           ;RTC.c: 100: strcpy(month, "OCT");
  8226  002166  0EBE               	movlw	low printRTC@month
  8227  002168  0100               	movlb	0	; () banked
  8228  00216A  6F80               	movwf	strcpy@to& (0+255),b
  8229  00216C  0E00               	movlw	high printRTC@month
  8230  00216E  0100               	movlb	0	; () banked
  8231  002170  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8232  002172  0EF3               	movlw	low STR_17
  8233  002174  0100               	movlb	0	; () banked
  8234  002176  6F82               	movwf	strcpy@from& (0+255),b
  8235  002178  0EFF               	movlw	high STR_17
  8236  00217A  0100               	movlb	0	; () banked
  8237  00217C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8238  00217E  EC42  F022         	call	_strcpy	;wreg free
  8239                           
  8240                           ;RTC.c: 101: break;
  8241  002182  D04D               	goto	l6020
  8242  002184                     l6012:
  8243                           
  8244                           ;RTC.c: 103: strcpy(month, "NOV");
  8245  002184  0EBE               	movlw	low printRTC@month
  8246  002186  0100               	movlb	0	; () banked
  8247  002188  6F80               	movwf	strcpy@to& (0+255),b
  8248  00218A  0E00               	movlw	high printRTC@month
  8249  00218C  0100               	movlb	0	; () banked
  8250  00218E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8251  002190  0EF7               	movlw	low STR_18
  8252  002192  0100               	movlb	0	; () banked
  8253  002194  6F82               	movwf	strcpy@from& (0+255),b
  8254  002196  0EFF               	movlw	high STR_18
  8255  002198  0100               	movlb	0	; () banked
  8256  00219A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8257  00219C  EC42  F022         	call	_strcpy	;wreg free
  8258                           
  8259                           ;RTC.c: 104: break;
  8260  0021A0  D03E               	goto	l6020
  8261  0021A2                     l6014:
  8262                           
  8263                           ;RTC.c: 106: strcpy(month, "DEC");
  8264  0021A2  0EBE               	movlw	low printRTC@month
  8265  0021A4  0100               	movlb	0	; () banked
  8266  0021A6  6F80               	movwf	strcpy@to& (0+255),b
  8267  0021A8  0E00               	movlw	high printRTC@month
  8268  0021AA  0100               	movlb	0	; () banked
  8269  0021AC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8270  0021AE  0ECF               	movlw	low STR_19
  8271  0021B0  0100               	movlb	0	; () banked
  8272  0021B2  6F82               	movwf	strcpy@from& (0+255),b
  8273  0021B4  0EFF               	movlw	high STR_19
  8274  0021B6  0100               	movlb	0	; () banked
  8275  0021B8  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8276  0021BA  EC42  F022         	call	_strcpy	;wreg free
  8277                           
  8278                           ;RTC.c: 108: }
  8279                           
  8280                           ;RTC.c: 107: break;
  8281  0021BE  D02F               	goto	l6020
  8282  0021C0                     l6018:
  8283  0021C0  C0BC  F0AB         	movff	printRTC@RTC_month,??_printRTC
  8284  0021C4  C0BD  F0AC         	movff	printRTC@RTC_month+1,??_printRTC+1
  8285                           
  8286                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8287                           ; Switch size 1, requested type "space"
  8288                           ; Number of cases is 1, Range of values is 0 to 0
  8289                           ; switch strategies available:
  8290                           ; Name         Instructions Cycles
  8291                           ; simple_byte            4     3 (average)
  8292                           ;	Chosen strategy is simple_byte
  8293  0021C8  0100               	movlb	0	; () banked
  8294  0021CA  51AC               	movf	(??_printRTC+1)& (0+255),w,b
  8295  0021CC  0A00               	xorlw	0	; case 0
  8296  0021CE  A4D8               	btfss	status,2,c
  8297  0021D0  D026               	goto	l6020
  8298                           
  8299                           ; BSR set to: 0
  8300                           ; Switch size 1, requested type "space"
  8301                           ; Number of cases is 12, Range of values is 1 to 12
  8302                           ; switch strategies available:
  8303                           ; Name         Instructions Cycles
  8304                           ; simple_byte           37    19 (average)
  8305                           ;	Chosen strategy is simple_byte
  8306  0021D2  0100               	movlb	0	; () banked
  8307  0021D4  51AB               	movf	??_printRTC& (0+255),w,b
  8308  0021D6  0A01               	xorlw	1	; case 1
  8309  0021D8  B4D8               	btfsc	status,2,c
  8310  0021DA  D73E               	goto	l5992
  8311  0021DC  0A03               	xorlw	3	; case 2
  8312  0021DE  B4D8               	btfsc	status,2,c
  8313  0021E0  D74A               	goto	l5994
  8314  0021E2  0A01               	xorlw	1	; case 3
  8315  0021E4  B4D8               	btfsc	status,2,c
  8316  0021E6  D756               	goto	l5996
  8317  0021E8  0A07               	xorlw	7	; case 4
  8318  0021EA  B4D8               	btfsc	status,2,c
  8319  0021EC  D762               	goto	l5998
  8320  0021EE  0A01               	xorlw	1	; case 5
  8321  0021F0  B4D8               	btfsc	status,2,c
  8322  0021F2  D76E               	goto	l6000
  8323  0021F4  0A03               	xorlw	3	; case 6
  8324  0021F6  B4D8               	btfsc	status,2,c
  8325  0021F8  D77A               	goto	l6002
  8326  0021FA  0A01               	xorlw	1	; case 7
  8327  0021FC  B4D8               	btfsc	status,2,c
  8328  0021FE  D786               	goto	l6004
  8329  002200  0A0F               	xorlw	15	; case 8
  8330  002202  B4D8               	btfsc	status,2,c
  8331  002204  D792               	goto	l6006
  8332  002206  0A01               	xorlw	1	; case 9
  8333  002208  B4D8               	btfsc	status,2,c
  8334  00220A  D79E               	goto	l6008
  8335  00220C  0A03               	xorlw	3	; case 10
  8336  00220E  B4D8               	btfsc	status,2,c
  8337  002210  D7AA               	goto	l6010
  8338  002212  0A01               	xorlw	1	; case 11
  8339  002214  B4D8               	btfsc	status,2,c
  8340  002216  D7B6               	goto	l6012
  8341  002218  0A07               	xorlw	7	; case 12
  8342  00221A  B4D8               	btfsc	status,2,c
  8343  00221C  D7C2               	goto	l6014
  8344  00221E                     l6020:
  8345                           
  8346                           ;RTC.c: 109: lcdInst(0b10000000);;
  8347  00221E  0E80               	movlw	128
  8348  002220  ECD6  F024         	call	_lcdInst
  8349                           
  8350                           ;RTC.c: 110: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
  8351  002224  0E1C               	movlw	low STR_21
  8352  002226  0100               	movlb	0	; () banked
  8353  002228  6F8E               	movwf	printf@f& (0+255),b
  8354  00222A  0EFB               	movlw	high STR_21
  8355  00222C  0100               	movlb	0	; () banked
  8356  00222E  6F8F               	movwf	(printf@f+1)& (0+255),b
  8357  002230  C0B6  F090         	movff	printRTC@INT_time+8,?_printf+2
  8358  002234  C0B7  F091         	movff	printRTC@INT_time+9,?_printf+3
  8359  002238  0EBE               	movlw	low printRTC@month
  8360  00223A  0100               	movlb	0	; () banked
  8361  00223C  6F92               	movwf	(?_printf+4)& (0+255),b
  8362  00223E  0E00               	movlw	high printRTC@month
  8363  002240  0100               	movlb	0	; () banked
  8364  002242  6F93               	movwf	(?_printf+5)& (0+255),b
  8365  002244  C0B2  F094         	movff	printRTC@INT_time+4,?_printf+6
  8366  002248  C0B3  F095         	movff	printRTC@INT_time+5,?_printf+7
  8367  00224C  C0B0  F096         	movff	printRTC@INT_time+2,?_printf+8
  8368  002250  C0B1  F097         	movff	printRTC@INT_time+3,?_printf+9
  8369  002254  C0AE  F098         	movff	printRTC@INT_time,?_printf+10
  8370  002258  C0AF  F099         	movff	printRTC@INT_time+1,?_printf+11
  8371  00225C  ECB8  F008         	call	_printf	;wreg free
  8372  002260  0012               	return		;funcret
  8373  002262                     __end_of_printRTC:
  8374                           	opt stack 0
  8375                           tblptru	equ	0xFF8
  8376                           tblptrh	equ	0xFF7
  8377                           tblptrl	equ	0xFF6
  8378                           tablat	equ	0xFF5
  8379                           prodh	equ	0xFF4
  8380                           prodl	equ	0xFF3
  8381                           intcon	equ	0xFF2
  8382                           intcon2	equ	0xFF1
  8383                           intcon3	equ	0xFF0
  8384                           postinc0	equ	0xFEE
  8385                           wreg	equ	0xFE8
  8386                           postdec1	equ	0xFE5
  8387                           fsr1l	equ	0xFE1
  8388                           indf2	equ	0xFDF
  8389                           postinc2	equ	0xFDE
  8390                           postdec2	equ	0xFDD
  8391                           fsr2h	equ	0xFDA
  8392                           fsr2l	equ	0xFD9
  8393                           status	equ	0xFD8
  8394                           
  8395 ;; *************** function _strcpy *****************
  8396 ;; Defined at:
  8397 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
  8398 ;; Parameters:    Size  Location     Type
  8399 ;;  to              2    0[BANK0 ] PTR unsigned char 
  8400 ;;		 -> printRTC@month(4), UI@month(4), 
  8401 ;;  from            2    2[BANK0 ] PTR const unsigned char 
  8402 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
  8403 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
  8404 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
  8405 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
  8406 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
  8407 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
  8408 ;;		 -> STR_8(4), 
  8409 ;; Auto vars:     Size  Location     Type
  8410 ;;  cp              2    4[BANK0 ] PTR unsigned char 
  8411 ;;		 -> printRTC@month(4), UI@month(4), 
  8412 ;; Return value:  Size  Location     Type
  8413 ;;                  2    0[BANK0 ] PTR unsigned char 
  8414 ;; Registers used:
  8415 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  8416 ;; Tracked objects:
  8417 ;;		On entry : 0/0
  8418 ;;		On exit  : 0/0
  8419 ;;		Unchanged: 0/0
  8420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8421 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8422 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8423 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8424 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8425 ;;Total ram usage:        6 bytes
  8426 ;; Hardware stack levels used:    1
  8427 ;; Hardware stack levels required when called:    7
  8428 ;; This function calls:
  8429 ;;		Nothing
  8430 ;; This function is called by:
  8431 ;;		_UI
  8432 ;;		_printRTC
  8433 ;; This function uses a non-reentrant model
  8434 ;;
  8435                           
  8436                           	psect	text25
  8437  004484                     __ptext25:
  8438                           	opt stack 0
  8439  004484                     _strcpy:
  8440                           	opt stack 20
  8441                           
  8442                           ;incstack = 0
  8443  004484  C080  F084         	movff	strcpy@to,strcpy@cp
  8444  004488  C081  F085         	movff	strcpy@to+1,strcpy@cp+1
  8445  00448C  D006               	goto	l5730
  8446  00448E                     l5728:
  8447  00448E  0100               	movlb	0	; () banked
  8448  004490  4B84               	infsnz	strcpy@cp& (0+255),f,b
  8449  004492  2B85               	incf	(strcpy@cp+1)& (0+255),f,b
  8450  004494  0100               	movlb	0	; () banked
  8451  004496  4B82               	infsnz	strcpy@from& (0+255),f,b
  8452  004498  2B83               	incf	(strcpy@from+1)& (0+255),f,b
  8453  00449A                     l5730:
  8454  00449A  C082  FFF6         	movff	strcpy@from,tblptrl
  8455  00449E  C083  FFF7         	movff	strcpy@from+1,tblptrh
  8456  0044A2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  8457  0044A2  6AF8               	clrf	tblptru,c
  8458  0044A4                     	endif
  8459  0044A4                     	if	0	;tblptru may be non-zero
  8460  0044A4                     	endif
  8461  0044A4  C084  FFD9         	movff	strcpy@cp,fsr2l
  8462  0044A8  C085  FFDA         	movff	strcpy@cp+1,fsr2h
  8463  0044AC  0008               	tblrd		*
  8464  0044AE  CFF5 FFDF          	movff	tablat,indf2
  8465  0044B2  50DF               	movf	indf2,w,c
  8466  0044B4  B4D8               	btfsc	status,2,c
  8467  0044B6  0012               	return	
  8468  0044B8  D7EA               	goto	l5728
  8469  0044BA                     __end_of_strcpy:
  8470                           	opt stack 0
  8471                           tblptru	equ	0xFF8
  8472                           tblptrh	equ	0xFF7
  8473                           tblptrl	equ	0xFF6
  8474                           tablat	equ	0xFF5
  8475                           prodh	equ	0xFF4
  8476                           prodl	equ	0xFF3
  8477                           intcon	equ	0xFF2
  8478                           intcon2	equ	0xFF1
  8479                           intcon3	equ	0xFF0
  8480                           postinc0	equ	0xFEE
  8481                           wreg	equ	0xFE8
  8482                           postdec1	equ	0xFE5
  8483                           fsr1l	equ	0xFE1
  8484                           indf2	equ	0xFDF
  8485                           postinc2	equ	0xFDE
  8486                           postdec2	equ	0xFDD
  8487                           fsr2h	equ	0xFDA
  8488                           fsr2l	equ	0xFD9
  8489                           status	equ	0xFD8
  8490                           
  8491 ;; *************** function _getRTC *****************
  8492 ;; Defined at:
  8493 ;;		line 44 in file "RTC.c"
  8494 ;; Parameters:    Size  Location     Type
  8495 ;;		None
  8496 ;; Auto vars:     Size  Location     Type
  8497 ;;  i               2    3[BANK0 ] int 
  8498 ;; Return value:  Size  Location     Type
  8499 ;;                  1    wreg      void 
  8500 ;; Registers used:
  8501 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8502 ;; Tracked objects:
  8503 ;;		On entry : 0/0
  8504 ;;		On exit  : 0/0
  8505 ;;		Unchanged: 0/0
  8506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8507 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8508 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8509 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8510 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8511 ;;Total ram usage:        2 bytes
  8512 ;; Hardware stack levels used:    1
  8513 ;; Hardware stack levels required when called:    9
  8514 ;; This function calls:
  8515 ;;		_I2C_Master_Read
  8516 ;;		_I2C_Master_Start
  8517 ;;		_I2C_Master_Stop
  8518 ;;		_I2C_Master_Write
  8519 ;; This function is called by:
  8520 ;;		_printRTC
  8521 ;;		_initSortTimer
  8522 ;; This function uses a non-reentrant model
  8523 ;;
  8524                           
  8525                           	psect	text26
  8526  003C18                     __ptext26:
  8527                           	opt stack 0
  8528  003C18                     _getRTC:
  8529                           	opt stack 18
  8530                           
  8531                           ;RTC.c: 48: I2C_Master_Start();
  8532                           
  8533                           ;incstack = 0
  8534  003C18  ECFC  F024         	call	_I2C_Master_Start	;wreg free
  8535                           
  8536                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
  8537  003C1C  0E00               	movlw	0
  8538  003C1E  0100               	movlb	0	; () banked
  8539  003C20  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8540  003C22  0ED0               	movlw	208
  8541  003C24  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8542  003C26  ECEA  F024         	call	_I2C_Master_Write	;wreg free
  8543                           
  8544                           ;RTC.c: 50: I2C_Master_Write(0x00);
  8545  003C2A  0E00               	movlw	0
  8546  003C2C  0100               	movlb	0	; () banked
  8547  003C2E  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8548  003C30  0E00               	movlw	0
  8549  003C32  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8550  003C34  ECEA  F024         	call	_I2C_Master_Write	;wreg free
  8551                           
  8552                           ;RTC.c: 51: I2C_Master_Stop();
  8553  003C38  ECF8  F024         	call	_I2C_Master_Stop	;wreg free
  8554                           
  8555                           ;RTC.c: 54: I2C_Master_Start();
  8556  003C3C  ECFC  F024         	call	_I2C_Master_Start	;wreg free
  8557                           
  8558                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
  8559  003C40  0E00               	movlw	0
  8560  003C42  0100               	movlb	0	; () banked
  8561  003C44  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8562  003C46  0ED1               	movlw	209
  8563  003C48  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8564  003C4A  ECEA  F024         	call	_I2C_Master_Write	;wreg free
  8565                           
  8566                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
  8567  003C4E  0E00               	movlw	0
  8568  003C50  0100               	movlb	0	; () banked
  8569  003C52  6F84               	movwf	(getRTC@i+1)& (0+255),b
  8570  003C54  0E00               	movlw	0
  8571  003C56  6F83               	movwf	getRTC@i& (0+255),b
  8572  003C58                     l5736:
  8573                           
  8574                           ; BSR set to: 0
  8575  003C58  0100               	movlb	0	; () banked
  8576  003C5A  BF84               	btfsc	(getRTC@i+1)& (0+255),7,b
  8577  003C5C  D008               	goto	l5740
  8578  003C5E  0100               	movlb	0	; () banked
  8579  003C60  5184               	movf	(getRTC@i+1)& (0+255),w,b
  8580  003C62  E115               	bnz	l5746
  8581  003C64  0E06               	movlw	6
  8582  003C66  0100               	movlb	0	; () banked
  8583  003C68  5D83               	subwf	getRTC@i& (0+255),w,b
  8584  003C6A  B0D8               	btfsc	status,0,c
  8585  003C6C  D010               	goto	l5746
  8586  003C6E                     l5740:
  8587                           
  8588                           ; BSR set to: 0
  8589                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
  8590  003C6E  0E24               	movlw	low _time
  8591  003C70  0100               	movlb	0	; () banked
  8592  003C72  2583               	addwf	getRTC@i& (0+255),w,b
  8593  003C74  6ED9               	movwf	fsr2l,c
  8594  003C76  0E01               	movlw	high _time
  8595  003C78  0100               	movlb	0	; () banked
  8596  003C7A  2184               	addwfc	(getRTC@i+1)& (0+255),w,b
  8597  003C7C  6EDA               	movwf	fsr2h,c
  8598  003C7E  0E01               	movlw	1
  8599  003C80  EC99  F023         	call	_I2C_Master_Read
  8600  003C84  6EDF               	movwf	indf2,c
  8601  003C86  0100               	movlb	0	; () banked
  8602  003C88  4B83               	infsnz	getRTC@i& (0+255),f,b
  8603  003C8A  2B84               	incf	(getRTC@i+1)& (0+255),f,b
  8604  003C8C  D7E5               	goto	l5736
  8605  003C8E                     l5746:
  8606                           
  8607                           ; BSR set to: 0
  8608                           ;RTC.c: 58: }
  8609                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
  8610  003C8E  0E00               	movlw	0
  8611  003C90  EC99  F023         	call	_I2C_Master_Read
  8612  003C94  0101               	movlb	1	; () banked
  8613  003C96  6F2A               	movwf	(_time+6)& (0+255),b
  8614                           
  8615                           ;RTC.c: 60: I2C_Master_Stop();
  8616  003C98  ECF8  F024         	call	_I2C_Master_Stop	;wreg free
  8617  003C9C  0012               	return		;funcret
  8618  003C9E                     __end_of_getRTC:
  8619                           	opt stack 0
  8620                           tblptru	equ	0xFF8
  8621                           tblptrh	equ	0xFF7
  8622                           tblptrl	equ	0xFF6
  8623                           tablat	equ	0xFF5
  8624                           prodh	equ	0xFF4
  8625                           prodl	equ	0xFF3
  8626                           intcon	equ	0xFF2
  8627                           intcon2	equ	0xFF1
  8628                           intcon3	equ	0xFF0
  8629                           postinc0	equ	0xFEE
  8630                           wreg	equ	0xFE8
  8631                           postdec1	equ	0xFE5
  8632                           fsr1l	equ	0xFE1
  8633                           indf2	equ	0xFDF
  8634                           postinc2	equ	0xFDE
  8635                           postdec2	equ	0xFDD
  8636                           fsr2h	equ	0xFDA
  8637                           fsr2l	equ	0xFD9
  8638                           status	equ	0xFD8
  8639                           
  8640 ;; *************** function _I2C_Master_Write *****************
  8641 ;; Defined at:
  8642 ;;		line 49 in file "I2C.c"
  8643 ;; Parameters:    Size  Location     Type
  8644 ;;  d               2    1[BANK0 ] unsigned int 
  8645 ;; Auto vars:     Size  Location     Type
  8646 ;;		None
  8647 ;; Return value:  Size  Location     Type
  8648 ;;                  1    wreg      void 
  8649 ;; Registers used:
  8650 ;;		wreg, status,2, status,0, cstack
  8651 ;; Tracked objects:
  8652 ;;		On entry : 0/0
  8653 ;;		On exit  : 0/0
  8654 ;;		Unchanged: 0/0
  8655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8656 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8657 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8658 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8659 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8660 ;;Total ram usage:        2 bytes
  8661 ;; Hardware stack levels used:    1
  8662 ;; Hardware stack levels required when called:    8
  8663 ;; This function calls:
  8664 ;;		_I2C_Master_Wait
  8665 ;; This function is called by:
  8666 ;;		_loadRTC
  8667 ;;		_getRTC
  8668 ;; This function uses a non-reentrant model
  8669 ;;
  8670                           
  8671                           	psect	text27
  8672  0049D4                     __ptext27:
  8673                           	opt stack 0
  8674  0049D4                     _I2C_Master_Write:
  8675                           	opt stack 18
  8676                           
  8677                           ;I2C.c: 51: I2C_Master_Wait();
  8678                           
  8679                           ;incstack = 0
  8680  0049D4  ECBB  F024         	call	_I2C_Master_Wait	;wreg free
  8681                           
  8682                           ;I2C.c: 52: SSPBUF = d;
  8683  0049D8  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  8684  0049DC  0012               	return		;funcret
  8685  0049DE                     __end_of_I2C_Master_Write:
  8686                           	opt stack 0
  8687                           tblptru	equ	0xFF8
  8688                           tblptrh	equ	0xFF7
  8689                           tblptrl	equ	0xFF6
  8690                           tablat	equ	0xFF5
  8691                           prodh	equ	0xFF4
  8692                           prodl	equ	0xFF3
  8693                           intcon	equ	0xFF2
  8694                           intcon2	equ	0xFF1
  8695                           intcon3	equ	0xFF0
  8696                           postinc0	equ	0xFEE
  8697                           wreg	equ	0xFE8
  8698                           postdec1	equ	0xFE5
  8699                           fsr1l	equ	0xFE1
  8700                           indf2	equ	0xFDF
  8701                           postinc2	equ	0xFDE
  8702                           postdec2	equ	0xFDD
  8703                           fsr2h	equ	0xFDA
  8704                           fsr2l	equ	0xFD9
  8705                           status	equ	0xFD8
  8706                           
  8707 ;; *************** function _I2C_Master_Stop *****************
  8708 ;; Defined at:
  8709 ;;		line 43 in file "I2C.c"
  8710 ;; Parameters:    Size  Location     Type
  8711 ;;		None
  8712 ;; Auto vars:     Size  Location     Type
  8713 ;;		None
  8714 ;; Return value:  Size  Location     Type
  8715 ;;                  1    wreg      void 
  8716 ;; Registers used:
  8717 ;;		wreg, status,2, status,0, cstack
  8718 ;; Tracked objects:
  8719 ;;		On entry : 0/0
  8720 ;;		On exit  : 0/0
  8721 ;;		Unchanged: 0/0
  8722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8723 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8724 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8725 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8726 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8727 ;;Total ram usage:        0 bytes
  8728 ;; Hardware stack levels used:    1
  8729 ;; Hardware stack levels required when called:    8
  8730 ;; This function calls:
  8731 ;;		_I2C_Master_Wait
  8732 ;; This function is called by:
  8733 ;;		_loadRTC
  8734 ;;		_getRTC
  8735 ;; This function uses a non-reentrant model
  8736 ;;
  8737                           
  8738                           	psect	text28
  8739  0049F0                     __ptext28:
  8740                           	opt stack 0
  8741  0049F0                     _I2C_Master_Stop:
  8742                           	opt stack 18
  8743                           
  8744                           ;I2C.c: 45: I2C_Master_Wait();
  8745                           
  8746                           ;incstack = 0
  8747  0049F0  ECBB  F024         	call	_I2C_Master_Wait	;wreg free
  8748                           
  8749                           ;I2C.c: 46: PEN = 1;
  8750  0049F4  84C5               	bsf	4037,2,c	;volatile
  8751  0049F6  0012               	return		;funcret
  8752  0049F8                     __end_of_I2C_Master_Stop:
  8753                           	opt stack 0
  8754                           tblptru	equ	0xFF8
  8755                           tblptrh	equ	0xFF7
  8756                           tblptrl	equ	0xFF6
  8757                           tablat	equ	0xFF5
  8758                           prodh	equ	0xFF4
  8759                           prodl	equ	0xFF3
  8760                           intcon	equ	0xFF2
  8761                           intcon2	equ	0xFF1
  8762                           intcon3	equ	0xFF0
  8763                           postinc0	equ	0xFEE
  8764                           wreg	equ	0xFE8
  8765                           postdec1	equ	0xFE5
  8766                           fsr1l	equ	0xFE1
  8767                           indf2	equ	0xFDF
  8768                           postinc2	equ	0xFDE
  8769                           postdec2	equ	0xFDD
  8770                           fsr2h	equ	0xFDA
  8771                           fsr2l	equ	0xFD9
  8772                           status	equ	0xFD8
  8773                           
  8774 ;; *************** function _I2C_Master_Start *****************
  8775 ;; Defined at:
  8776 ;;		line 31 in file "I2C.c"
  8777 ;; Parameters:    Size  Location     Type
  8778 ;;		None
  8779 ;; Auto vars:     Size  Location     Type
  8780 ;;		None
  8781 ;; Return value:  Size  Location     Type
  8782 ;;                  1    wreg      void 
  8783 ;; Registers used:
  8784 ;;		wreg, status,2, status,0, cstack
  8785 ;; Tracked objects:
  8786 ;;		On entry : 0/0
  8787 ;;		On exit  : 0/0
  8788 ;;		Unchanged: 0/0
  8789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8790 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8791 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8792 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8793 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8794 ;;Total ram usage:        0 bytes
  8795 ;; Hardware stack levels used:    1
  8796 ;; Hardware stack levels required when called:    8
  8797 ;; This function calls:
  8798 ;;		_I2C_Master_Wait
  8799 ;; This function is called by:
  8800 ;;		_loadRTC
  8801 ;;		_getRTC
  8802 ;; This function uses a non-reentrant model
  8803 ;;
  8804                           
  8805                           	psect	text29
  8806  0049F8                     __ptext29:
  8807                           	opt stack 0
  8808  0049F8                     _I2C_Master_Start:
  8809                           	opt stack 18
  8810                           
  8811                           ;I2C.c: 33: I2C_Master_Wait();
  8812                           
  8813                           ;incstack = 0
  8814  0049F8  ECBB  F024         	call	_I2C_Master_Wait	;wreg free
  8815                           
  8816                           ;I2C.c: 34: SEN = 1;
  8817  0049FC  80C5               	bsf	4037,0,c	;volatile
  8818  0049FE  0012               	return		;funcret
  8819  004A00                     __end_of_I2C_Master_Start:
  8820                           	opt stack 0
  8821                           tblptru	equ	0xFF8
  8822                           tblptrh	equ	0xFF7
  8823                           tblptrl	equ	0xFF6
  8824                           tablat	equ	0xFF5
  8825                           prodh	equ	0xFF4
  8826                           prodl	equ	0xFF3
  8827                           intcon	equ	0xFF2
  8828                           intcon2	equ	0xFF1
  8829                           intcon3	equ	0xFF0
  8830                           postinc0	equ	0xFEE
  8831                           wreg	equ	0xFE8
  8832                           postdec1	equ	0xFE5
  8833                           fsr1l	equ	0xFE1
  8834                           indf2	equ	0xFDF
  8835                           postinc2	equ	0xFDE
  8836                           postdec2	equ	0xFDD
  8837                           fsr2h	equ	0xFDA
  8838                           fsr2l	equ	0xFD9
  8839                           status	equ	0xFD8
  8840                           
  8841 ;; *************** function _I2C_Master_Read *****************
  8842 ;; Defined at:
  8843 ;;		line 55 in file "I2C.c"
  8844 ;; Parameters:    Size  Location     Type
  8845 ;;  a               1    wreg     unsigned char 
  8846 ;; Auto vars:     Size  Location     Type
  8847 ;;  a               1    1[BANK0 ] unsigned char 
  8848 ;;  temp            1    2[BANK0 ] unsigned char 
  8849 ;; Return value:  Size  Location     Type
  8850 ;;                  1    wreg      unsigned char 
  8851 ;; Registers used:
  8852 ;;		wreg, status,2, status,0, cstack
  8853 ;; Tracked objects:
  8854 ;;		On entry : 0/0
  8855 ;;		On exit  : 0/0
  8856 ;;		Unchanged: 0/0
  8857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8858 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8859 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8860 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8861 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8862 ;;Total ram usage:        2 bytes
  8863 ;; Hardware stack levels used:    1
  8864 ;; Hardware stack levels required when called:    8
  8865 ;; This function calls:
  8866 ;;		_I2C_Master_Wait
  8867 ;; This function is called by:
  8868 ;;		_getRTC
  8869 ;; This function uses a non-reentrant model
  8870 ;;
  8871                           
  8872                           	psect	text30
  8873  004732                     __ptext30:
  8874                           	opt stack 0
  8875  004732                     _I2C_Master_Read:
  8876                           	opt stack 18
  8877                           
  8878                           ;incstack = 0
  8879                           ;I2C_Master_Read@a stored from wreg
  8880  004732  0100               	movlb	0	; () banked
  8881  004734  6F81               	movwf	I2C_Master_Read@a& (0+255),b
  8882                           
  8883                           ;I2C.c: 57: unsigned char temp;
  8884                           ;I2C.c: 58: I2C_Master_Wait();
  8885  004736  ECBB  F024         	call	_I2C_Master_Wait	;wreg free
  8886                           
  8887                           ;I2C.c: 59: RCEN = 1;
  8888  00473A  86C5               	bsf	4037,3,c	;volatile
  8889                           
  8890                           ;I2C.c: 60: I2C_Master_Wait();
  8891  00473C  ECBB  F024         	call	_I2C_Master_Wait	;wreg free
  8892                           
  8893                           ;I2C.c: 61: temp = SSPBUF;
  8894  004740  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
  8895                           
  8896                           ;I2C.c: 62: I2C_Master_Wait();
  8897  004744  ECBB  F024         	call	_I2C_Master_Wait	;wreg free
  8898                           
  8899                           ;I2C.c: 63: ACKDT = (a)?0:1;
  8900  004748  0100               	movlb	0	; () banked
  8901  00474A  5181               	movf	I2C_Master_Read@a& (0+255),w,b
  8902  00474C  0100               	movlb	0	; () banked
  8903  00474E  A4D8               	btfss	status,2,c
  8904  004750  D002               	goto	u3720
  8905  004752  8AC5               	bsf	4037,5,c	;volatile
  8906  004754  D001               	goto	l5424
  8907  004756                     u3720:
  8908  004756  9AC5               	bcf	4037,5,c	;volatile
  8909  004758                     l5424:
  8910                           
  8911                           ;I2C.c: 64: ACKEN = 1;
  8912  004758  88C5               	bsf	4037,4,c	;volatile
  8913                           
  8914                           ;I2C.c: 65: return temp;
  8915  00475A  0100               	movlb	0	; () banked
  8916  00475C  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
  8917  00475E  0012               	return	
  8918  004760                     __end_of_I2C_Master_Read:
  8919                           	opt stack 0
  8920                           tblptru	equ	0xFF8
  8921                           tblptrh	equ	0xFF7
  8922                           tblptrl	equ	0xFF6
  8923                           tablat	equ	0xFF5
  8924                           prodh	equ	0xFF4
  8925                           prodl	equ	0xFF3
  8926                           intcon	equ	0xFF2
  8927                           intcon2	equ	0xFF1
  8928                           intcon3	equ	0xFF0
  8929                           postinc0	equ	0xFEE
  8930                           wreg	equ	0xFE8
  8931                           postdec1	equ	0xFE5
  8932                           fsr1l	equ	0xFE1
  8933                           indf2	equ	0xFDF
  8934                           postinc2	equ	0xFDE
  8935                           postdec2	equ	0xFDD
  8936                           fsr2h	equ	0xFDA
  8937                           fsr2l	equ	0xFD9
  8938                           status	equ	0xFD8
  8939                           
  8940 ;; *************** function _I2C_Master_Wait *****************
  8941 ;; Defined at:
  8942 ;;		line 26 in file "I2C.c"
  8943 ;; Parameters:    Size  Location     Type
  8944 ;;		None
  8945 ;; Auto vars:     Size  Location     Type
  8946 ;;		None
  8947 ;; Return value:  Size  Location     Type
  8948 ;;                  1    wreg      void 
  8949 ;; Registers used:
  8950 ;;		wreg, status,2, status,0
  8951 ;; Tracked objects:
  8952 ;;		On entry : 0/0
  8953 ;;		On exit  : 0/0
  8954 ;;		Unchanged: 0/0
  8955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8956 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8957 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8958 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8959 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8960 ;;Total ram usage:        1 bytes
  8961 ;; Hardware stack levels used:    1
  8962 ;; Hardware stack levels required when called:    7
  8963 ;; This function calls:
  8964 ;;		Nothing
  8965 ;; This function is called by:
  8966 ;;		_I2C_Master_Start
  8967 ;;		_I2C_Master_Stop
  8968 ;;		_I2C_Master_Write
  8969 ;;		_I2C_Master_Read
  8970 ;;		_I2C_Master_RepeatedStart
  8971 ;; This function uses a non-reentrant model
  8972 ;;
  8973                           
  8974                           	psect	text31
  8975  004976                     __ptext31:
  8976                           	opt stack 0
  8977  004976                     _I2C_Master_Wait:
  8978                           	opt stack 18
  8979  004976                     l66:
  8980  004976  B4C7               	btfsc	4039,2,c	;volatile
  8981  004978  D7FE               	goto	l66
  8982  00497A  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
  8983  00497E  0E1F               	movlw	31
  8984  004980  0100               	movlb	0	; () banked
  8985  004982  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
  8986  004984  B4D8               	btfsc	status,2,c
  8987  004986  0012               	return	
  8988  004988  D7F6               	goto	l66
  8989  00498A                     __end_of_I2C_Master_Wait:
  8990                           	opt stack 0
  8991                           tblptru	equ	0xFF8
  8992                           tblptrh	equ	0xFF7
  8993                           tblptrl	equ	0xFF6
  8994                           tablat	equ	0xFF5
  8995                           prodh	equ	0xFF4
  8996                           prodl	equ	0xFF3
  8997                           intcon	equ	0xFF2
  8998                           intcon2	equ	0xFF1
  8999                           intcon3	equ	0xFF0
  9000                           postinc0	equ	0xFEE
  9001                           wreg	equ	0xFE8
  9002                           postdec1	equ	0xFE5
  9003                           fsr1l	equ	0xFE1
  9004                           indf2	equ	0xFDF
  9005                           postinc2	equ	0xFDE
  9006                           postdec2	equ	0xFDD
  9007                           fsr2h	equ	0xFDA
  9008                           fsr2l	equ	0xFD9
  9009                           status	equ	0xFD8
  9010                           
  9011 ;; *************** function _change_state_to_menu_22 *****************
  9012 ;; Defined at:
  9013 ;;		line 498 in file "UI.c"
  9014 ;; Parameters:    Size  Location     Type
  9015 ;;		None
  9016 ;; Auto vars:     Size  Location     Type
  9017 ;;		None
  9018 ;; Return value:  Size  Location     Type
  9019 ;;                  1    wreg      void 
  9020 ;; Registers used:
  9021 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9022 ;; Tracked objects:
  9023 ;;		On entry : 0/0
  9024 ;;		On exit  : 0/0
  9025 ;;		Unchanged: 0/0
  9026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9027 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9028 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9029 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9030 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9031 ;;Total ram usage:        0 bytes
  9032 ;; Hardware stack levels used:    1
  9033 ;; Hardware stack levels required when called:   10
  9034 ;; This function calls:
  9035 ;;		_lcdInst
  9036 ;;		_printf
  9037 ;; This function is called by:
  9038 ;;		_UI
  9039 ;; This function uses a non-reentrant model
  9040 ;;
  9041                           
  9042                           	psect	text32
  9043  004414                     __ptext32:
  9044                           	opt stack 0
  9045  004414                     _change_state_to_menu_22:
  9046                           	opt stack 19
  9047                           
  9048                           ;UI.c: 499: cur_state = 22;
  9049                           
  9050                           ; BSR set to: 0
  9051                           ;incstack = 0
  9052  004414  0E00               	movlw	0
  9053  004416  0100               	movlb	0	; () banked
  9054  004418  6FE3               	movwf	(_cur_state+1)& (0+255),b
  9055  00441A  0E16               	movlw	22
  9056  00441C  6FE2               	movwf	_cur_state& (0+255),b
  9057                           
  9058                           ; BSR set to: 0
  9059                           ;UI.c: 501: lcdInst(0b10000000);;
  9060  00441E  0E80               	movlw	128
  9061  004420  ECD6  F024         	call	_lcdInst
  9062                           
  9063                           ;UI.c: 502: printf("2. SORT        <");
  9064  004424  0EC4               	movlw	low STR_34
  9065  004426  0100               	movlb	0	; () banked
  9066  004428  6F8E               	movwf	printf@f& (0+255),b
  9067  00442A  0EFD               	movlw	high STR_34
  9068  00442C  0100               	movlb	0	; () banked
  9069  00442E  6F8F               	movwf	(printf@f+1)& (0+255),b
  9070  004430  ECB8  F008         	call	_printf	;wreg free
  9071                           
  9072                           ;UI.c: 503: lcdInst(0b11000000);;
  9073  004434  0EC0               	movlw	192
  9074  004436  ECD6  F024         	call	_lcdInst
  9075                           
  9076                           ;UI.c: 504: printf("3. LOGS         ");
  9077  00443A  0E09               	movlw	low STR_36
  9078  00443C  0100               	movlb	0	; () banked
  9079  00443E  6F8E               	movwf	printf@f& (0+255),b
  9080  004440  0EFD               	movlw	high STR_36
  9081  004442  0100               	movlb	0	; () banked
  9082  004444  6F8F               	movwf	(printf@f+1)& (0+255),b
  9083  004446  ECB8  F008         	call	_printf	;wreg free
  9084  00444A  0012               	return		;funcret
  9085  00444C                     __end_of_change_state_to_menu_22:
  9086                           	opt stack 0
  9087                           tblptru	equ	0xFF8
  9088                           tblptrh	equ	0xFF7
  9089                           tblptrl	equ	0xFF6
  9090                           tablat	equ	0xFF5
  9091                           prodh	equ	0xFF4
  9092                           prodl	equ	0xFF3
  9093                           intcon	equ	0xFF2
  9094                           intcon2	equ	0xFF1
  9095                           intcon3	equ	0xFF0
  9096                           postinc0	equ	0xFEE
  9097                           wreg	equ	0xFE8
  9098                           postdec1	equ	0xFE5
  9099                           fsr1l	equ	0xFE1
  9100                           indf2	equ	0xFDF
  9101                           postinc2	equ	0xFDE
  9102                           postdec2	equ	0xFDD
  9103                           fsr2h	equ	0xFDA
  9104                           fsr2l	equ	0xFD9
  9105                           status	equ	0xFD8
  9106                           
  9107 ;; *************** function _change_state_to_menu_12 *****************
  9108 ;; Defined at:
  9109 ;;		line 490 in file "UI.c"
  9110 ;; Parameters:    Size  Location     Type
  9111 ;;		None
  9112 ;; Auto vars:     Size  Location     Type
  9113 ;;		None
  9114 ;; Return value:  Size  Location     Type
  9115 ;;                  1    wreg      void 
  9116 ;; Registers used:
  9117 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9118 ;; Tracked objects:
  9119 ;;		On entry : 0/0
  9120 ;;		On exit  : 0/0
  9121 ;;		Unchanged: 0/0
  9122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9123 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9124 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9125 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9126 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9127 ;;Total ram usage:        0 bytes
  9128 ;; Hardware stack levels used:    1
  9129 ;; Hardware stack levels required when called:   10
  9130 ;; This function calls:
  9131 ;;		_lcdInst
  9132 ;;		_printf
  9133 ;; This function is called by:
  9134 ;;		_UI
  9135 ;; This function uses a non-reentrant model
  9136 ;;
  9137                           
  9138                           	psect	text33
  9139  00444C                     __ptext33:
  9140                           	opt stack 0
  9141  00444C                     _change_state_to_menu_12:
  9142                           	opt stack 19
  9143                           
  9144                           ;UI.c: 491: cur_state = 12;
  9145                           
  9146                           ;incstack = 0
  9147  00444C  0E00               	movlw	0
  9148  00444E  0100               	movlb	0	; () banked
  9149  004450  6FE3               	movwf	(_cur_state+1)& (0+255),b
  9150  004452  0E0C               	movlw	12
  9151  004454  6FE2               	movwf	_cur_state& (0+255),b
  9152                           
  9153                           ; BSR set to: 0
  9154                           ;UI.c: 493: lcdInst(0b10000000);;
  9155  004456  0E80               	movlw	128
  9156  004458  ECD6  F024         	call	_lcdInst
  9157                           
  9158                           ;UI.c: 494: printf("1. DATE/TIME    ");
  9159  00445C  0E2B               	movlw	low STR_33
  9160  00445E  0100               	movlb	0	; () banked
  9161  004460  6F8E               	movwf	printf@f& (0+255),b
  9162  004462  0EFD               	movlw	high STR_33
  9163  004464  0100               	movlb	0	; () banked
  9164  004466  6F8F               	movwf	(printf@f+1)& (0+255),b
  9165  004468  ECB8  F008         	call	_printf	;wreg free
  9166                           
  9167                           ;UI.c: 495: lcdInst(0b11000000);;
  9168  00446C  0EC0               	movlw	192
  9169  00446E  ECD6  F024         	call	_lcdInst
  9170                           
  9171                           ;UI.c: 496: printf("2. SORT        <");
  9172  004472  0EC4               	movlw	low STR_34
  9173  004474  0100               	movlb	0	; () banked
  9174  004476  6F8E               	movwf	printf@f& (0+255),b
  9175  004478  0EFD               	movlw	high STR_34
  9176  00447A  0100               	movlb	0	; () banked
  9177  00447C  6F8F               	movwf	(printf@f+1)& (0+255),b
  9178  00447E  ECB8  F008         	call	_printf	;wreg free
  9179  004482  0012               	return		;funcret
  9180  004484                     __end_of_change_state_to_menu_12:
  9181                           	opt stack 0
  9182                           tblptru	equ	0xFF8
  9183                           tblptrh	equ	0xFF7
  9184                           tblptrl	equ	0xFF6
  9185                           tablat	equ	0xFF5
  9186                           prodh	equ	0xFF4
  9187                           prodl	equ	0xFF3
  9188                           intcon	equ	0xFF2
  9189                           intcon2	equ	0xFF1
  9190                           intcon3	equ	0xFF0
  9191                           postinc0	equ	0xFEE
  9192                           wreg	equ	0xFE8
  9193                           postdec1	equ	0xFE5
  9194                           fsr1l	equ	0xFE1
  9195                           indf2	equ	0xFDF
  9196                           postinc2	equ	0xFDE
  9197                           postdec2	equ	0xFDD
  9198                           fsr2h	equ	0xFDA
  9199                           fsr2l	equ	0xFD9
  9200                           status	equ	0xFD8
  9201                           
  9202 ;; *************** function ___awmod *****************
  9203 ;; Defined at:
  9204 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  9205 ;; Parameters:    Size  Location     Type
  9206 ;;  dividend        2    0[BANK0 ] int 
  9207 ;;  divisor         2    2[BANK0 ] int 
  9208 ;; Auto vars:     Size  Location     Type
  9209 ;;  sign            1    5[BANK0 ] unsigned char 
  9210 ;;  counter         1    4[BANK0 ] unsigned char 
  9211 ;; Return value:  Size  Location     Type
  9212 ;;                  2    0[BANK0 ] int 
  9213 ;; Registers used:
  9214 ;;		wreg, status,2, status,0
  9215 ;; Tracked objects:
  9216 ;;		On entry : 0/0
  9217 ;;		On exit  : 0/0
  9218 ;;		Unchanged: 0/0
  9219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9220 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9221 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9222 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9223 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9224 ;;Total ram usage:        6 bytes
  9225 ;; Hardware stack levels used:    1
  9226 ;; Hardware stack levels required when called:    7
  9227 ;; This function calls:
  9228 ;;		Nothing
  9229 ;; This function is called by:
  9230 ;;		_UI
  9231 ;; This function uses a non-reentrant model
  9232 ;;
  9233                           
  9234                           	psect	text34
  9235  003AEA                     __ptext34:
  9236                           	opt stack 0
  9237  003AEA                     ___awmod:
  9238                           	opt stack 22
  9239                           
  9240                           ;incstack = 0
  9241  003AEA  0E00               	movlw	0
  9242  003AEC  0100               	movlb	0	; () banked
  9243  003AEE  6F85               	movwf	___awmod@sign& (0+255),b
  9244                           
  9245                           ; BSR set to: 0
  9246  003AF0  0100               	movlb	0	; () banked
  9247  003AF2  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
  9248  003AF4  D008               	goto	l7550
  9249                           
  9250                           ; BSR set to: 0
  9251  003AF6  0100               	movlb	0	; () banked
  9252  003AF8  6D80               	negf	___awmod@dividend& (0+255),b
  9253  003AFA  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  9254  003AFC  B0D8               	btfsc	status,0,c
  9255  003AFE  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  9256                           
  9257                           ; BSR set to: 0
  9258  003B00  0E01               	movlw	1
  9259  003B02  0100               	movlb	0	; () banked
  9260  003B04  6F85               	movwf	___awmod@sign& (0+255),b
  9261  003B06                     l7550:
  9262                           
  9263                           ; BSR set to: 0
  9264  003B06  0100               	movlb	0	; () banked
  9265  003B08  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  9266  003B0A  D005               	goto	l7554
  9267                           
  9268                           ; BSR set to: 0
  9269  003B0C  0100               	movlb	0	; () banked
  9270  003B0E  6D82               	negf	___awmod@divisor& (0+255),b
  9271  003B10  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
  9272  003B12  B0D8               	btfsc	status,0,c
  9273  003B14  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
  9274  003B16                     l7554:
  9275                           
  9276                           ; BSR set to: 0
  9277  003B16  0100               	movlb	0	; () banked
  9278  003B18  5182               	movf	___awmod@divisor& (0+255),w,b
  9279  003B1A  0100               	movlb	0	; () banked
  9280  003B1C  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  9281  003B1E  B4D8               	btfsc	status,2,c
  9282  003B20  D026               	goto	l7570
  9283                           
  9284                           ; BSR set to: 0
  9285  003B22  0E01               	movlw	1
  9286  003B24  0100               	movlb	0	; () banked
  9287  003B26  6F84               	movwf	___awmod@counter& (0+255),b
  9288  003B28  D006               	goto	l7560
  9289  003B2A                     l7558:
  9290                           
  9291                           ; BSR set to: 0
  9292  003B2A  0100               	movlb	0	; () banked
  9293  003B2C  90D8               	bcf	status,0,c
  9294  003B2E  3782               	rlcf	___awmod@divisor& (0+255),f,b
  9295  003B30  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  9296  003B32  0100               	movlb	0	; () banked
  9297  003B34  2B84               	incf	___awmod@counter& (0+255),f,b
  9298  003B36                     l7560:
  9299                           
  9300                           ; BSR set to: 0
  9301  003B36  0100               	movlb	0	; () banked
  9302  003B38  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  9303  003B3A  D7F7               	goto	l7558
  9304  003B3C                     l7562:
  9305                           
  9306                           ; BSR set to: 0
  9307  003B3C  0100               	movlb	0	; () banked
  9308  003B3E  5182               	movf	___awmod@divisor& (0+255),w,b
  9309  003B40  0100               	movlb	0	; () banked
  9310  003B42  5D80               	subwf	___awmod@dividend& (0+255),w,b
  9311  003B44  0100               	movlb	0	; () banked
  9312  003B46  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  9313  003B48  0100               	movlb	0	; () banked
  9314  003B4A  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  9315  003B4C  A0D8               	btfss	status,0,c
  9316  003B4E  D008               	goto	l7566
  9317                           
  9318                           ; BSR set to: 0
  9319  003B50  0100               	movlb	0	; () banked
  9320  003B52  5182               	movf	___awmod@divisor& (0+255),w,b
  9321  003B54  0100               	movlb	0	; () banked
  9322  003B56  5F80               	subwf	___awmod@dividend& (0+255),f,b
  9323  003B58  0100               	movlb	0	; () banked
  9324  003B5A  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  9325  003B5C  0100               	movlb	0	; () banked
  9326  003B5E  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  9327  003B60                     l7566:
  9328                           
  9329                           ; BSR set to: 0
  9330  003B60  0100               	movlb	0	; () banked
  9331  003B62  90D8               	bcf	status,0,c
  9332  003B64  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  9333  003B66  3382               	rrcf	___awmod@divisor& (0+255),f,b
  9334                           
  9335                           ; BSR set to: 0
  9336  003B68  0100               	movlb	0	; () banked
  9337  003B6A  2F84               	decfsz	___awmod@counter& (0+255),f,b
  9338  003B6C  D7E7               	goto	l7562
  9339  003B6E                     l7570:
  9340                           
  9341                           ; BSR set to: 0
  9342  003B6E  0100               	movlb	0	; () banked
  9343  003B70  5185               	movf	___awmod@sign& (0+255),w,b
  9344  003B72  0100               	movlb	0	; () banked
  9345  003B74  B4D8               	btfsc	status,2,c
  9346  003B76  D005               	goto	l7574
  9347                           
  9348                           ; BSR set to: 0
  9349  003B78  0100               	movlb	0	; () banked
  9350  003B7A  6D80               	negf	___awmod@dividend& (0+255),b
  9351  003B7C  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  9352  003B7E  B0D8               	btfsc	status,0,c
  9353  003B80  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  9354  003B82                     l7574:
  9355                           
  9356                           ; BSR set to: 0
  9357  003B82  C080  F080         	movff	___awmod@dividend,?___awmod
  9358  003B86  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
  9359  003B8A  0012               	return	
  9360  003B8C                     __end_of___awmod:
  9361                           	opt stack 0
  9362                           tblptru	equ	0xFF8
  9363                           tblptrh	equ	0xFF7
  9364                           tblptrl	equ	0xFF6
  9365                           tablat	equ	0xFF5
  9366                           prodh	equ	0xFF4
  9367                           prodl	equ	0xFF3
  9368                           intcon	equ	0xFF2
  9369                           intcon2	equ	0xFF1
  9370                           intcon3	equ	0xFF0
  9371                           postinc0	equ	0xFEE
  9372                           wreg	equ	0xFE8
  9373                           postdec1	equ	0xFE5
  9374                           fsr1l	equ	0xFE1
  9375                           indf2	equ	0xFDF
  9376                           postinc2	equ	0xFDE
  9377                           postdec2	equ	0xFDD
  9378                           fsr2h	equ	0xFDA
  9379                           fsr2l	equ	0xFD9
  9380                           status	equ	0xFD8
  9381                           
  9382 ;; *************** function ___awdiv *****************
  9383 ;; Defined at:
  9384 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  9385 ;; Parameters:    Size  Location     Type
  9386 ;;  dividend        2    6[BANK0 ] int 
  9387 ;;  divisor         2    8[BANK0 ] int 
  9388 ;; Auto vars:     Size  Location     Type
  9389 ;;  quotient        2   12[BANK0 ] int 
  9390 ;;  sign            1   11[BANK0 ] unsigned char 
  9391 ;;  counter         1   10[BANK0 ] unsigned char 
  9392 ;; Return value:  Size  Location     Type
  9393 ;;                  2    6[BANK0 ] int 
  9394 ;; Registers used:
  9395 ;;		wreg, status,2, status,0
  9396 ;; Tracked objects:
  9397 ;;		On entry : 0/0
  9398 ;;		On exit  : 0/0
  9399 ;;		Unchanged: 0/0
  9400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9401 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9402 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9403 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9404 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9405 ;;Total ram usage:        8 bytes
  9406 ;; Hardware stack levels used:    1
  9407 ;; Hardware stack levels required when called:    7
  9408 ;; This function calls:
  9409 ;;		Nothing
  9410 ;; This function is called by:
  9411 ;;		_UI
  9412 ;; This function uses a non-reentrant model
  9413 ;;
  9414                           
  9415                           	psect	text35
  9416  0038C6                     __ptext35:
  9417                           	opt stack 0
  9418  0038C6                     ___awdiv:
  9419                           	opt stack 22
  9420                           
  9421                           ; BSR set to: 0
  9422                           ;incstack = 0
  9423  0038C6  0E00               	movlw	0
  9424  0038C8  0100               	movlb	0	; () banked
  9425  0038CA  6F8B               	movwf	___awdiv@sign& (0+255),b
  9426                           
  9427                           ; BSR set to: 0
  9428  0038CC  0100               	movlb	0	; () banked
  9429  0038CE  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  9430  0038D0  D008               	goto	l7506
  9431                           
  9432                           ; BSR set to: 0
  9433  0038D2  0100               	movlb	0	; () banked
  9434  0038D4  6D88               	negf	___awdiv@divisor& (0+255),b
  9435  0038D6  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
  9436  0038D8  B0D8               	btfsc	status,0,c
  9437  0038DA  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
  9438                           
  9439                           ; BSR set to: 0
  9440  0038DC  0E01               	movlw	1
  9441  0038DE  0100               	movlb	0	; () banked
  9442  0038E0  6F8B               	movwf	___awdiv@sign& (0+255),b
  9443  0038E2                     l7506:
  9444                           
  9445                           ; BSR set to: 0
  9446  0038E2  0100               	movlb	0	; () banked
  9447  0038E4  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  9448  0038E6  D008               	goto	l7512
  9449                           
  9450                           ; BSR set to: 0
  9451  0038E8  0100               	movlb	0	; () banked
  9452  0038EA  6D86               	negf	___awdiv@dividend& (0+255),b
  9453  0038EC  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
  9454  0038EE  B0D8               	btfsc	status,0,c
  9455  0038F0  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
  9456                           
  9457                           ; BSR set to: 0
  9458  0038F2  0E01               	movlw	1
  9459  0038F4  0100               	movlb	0	; () banked
  9460  0038F6  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
  9461  0038F8                     l7512:
  9462                           
  9463                           ; BSR set to: 0
  9464  0038F8  0E00               	movlw	0
  9465  0038FA  0100               	movlb	0	; () banked
  9466  0038FC  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
  9467  0038FE  0E00               	movlw	0
  9468  003900  6F8C               	movwf	___awdiv@quotient& (0+255),b
  9469                           
  9470                           ; BSR set to: 0
  9471  003902  0100               	movlb	0	; () banked
  9472  003904  5188               	movf	___awdiv@divisor& (0+255),w,b
  9473  003906  0100               	movlb	0	; () banked
  9474  003908  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  9475  00390A  B4D8               	btfsc	status,2,c
  9476  00390C  D02C               	goto	l7534
  9477                           
  9478                           ; BSR set to: 0
  9479  00390E  0E01               	movlw	1
  9480  003910  0100               	movlb	0	; () banked
  9481  003912  6F8A               	movwf	___awdiv@counter& (0+255),b
  9482  003914  D006               	goto	l7520
  9483  003916                     l7518:
  9484                           
  9485                           ; BSR set to: 0
  9486  003916  0100               	movlb	0	; () banked
  9487  003918  90D8               	bcf	status,0,c
  9488  00391A  3788               	rlcf	___awdiv@divisor& (0+255),f,b
  9489  00391C  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  9490  00391E  0100               	movlb	0	; () banked
  9491  003920  2B8A               	incf	___awdiv@counter& (0+255),f,b
  9492  003922                     l7520:
  9493                           
  9494                           ; BSR set to: 0
  9495  003922  0100               	movlb	0	; () banked
  9496  003924  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  9497  003926  D7F7               	goto	l7518
  9498  003928                     l7522:
  9499                           
  9500                           ; BSR set to: 0
  9501  003928  0100               	movlb	0	; () banked
  9502  00392A  90D8               	bcf	status,0,c
  9503  00392C  378C               	rlcf	___awdiv@quotient& (0+255),f,b
  9504  00392E  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  9505                           
  9506                           ; BSR set to: 0
  9507  003930  0100               	movlb	0	; () banked
  9508  003932  5188               	movf	___awdiv@divisor& (0+255),w,b
  9509  003934  0100               	movlb	0	; () banked
  9510  003936  5D86               	subwf	___awdiv@dividend& (0+255),w,b
  9511  003938  0100               	movlb	0	; () banked
  9512  00393A  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  9513  00393C  0100               	movlb	0	; () banked
  9514  00393E  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  9515  003940  A0D8               	btfss	status,0,c
  9516  003942  D00A               	goto	l7530
  9517                           
  9518                           ; BSR set to: 0
  9519  003944  0100               	movlb	0	; () banked
  9520  003946  5188               	movf	___awdiv@divisor& (0+255),w,b
  9521  003948  0100               	movlb	0	; () banked
  9522  00394A  5F86               	subwf	___awdiv@dividend& (0+255),f,b
  9523  00394C  0100               	movlb	0	; () banked
  9524  00394E  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  9525  003950  0100               	movlb	0	; () banked
  9526  003952  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  9527                           
  9528                           ; BSR set to: 0
  9529  003954  0100               	movlb	0	; () banked
  9530  003956  818C               	bsf	___awdiv@quotient& (0+255),0,b
  9531  003958                     l7530:
  9532                           
  9533                           ; BSR set to: 0
  9534  003958  0100               	movlb	0	; () banked
  9535  00395A  90D8               	bcf	status,0,c
  9536  00395C  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  9537  00395E  3388               	rrcf	___awdiv@divisor& (0+255),f,b
  9538                           
  9539                           ; BSR set to: 0
  9540  003960  0100               	movlb	0	; () banked
  9541  003962  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
  9542  003964  D7E1               	goto	l7522
  9543  003966                     l7534:
  9544                           
  9545                           ; BSR set to: 0
  9546  003966  0100               	movlb	0	; () banked
  9547  003968  518B               	movf	___awdiv@sign& (0+255),w,b
  9548  00396A  0100               	movlb	0	; () banked
  9549  00396C  B4D8               	btfsc	status,2,c
  9550  00396E  D005               	goto	l7538
  9551                           
  9552                           ; BSR set to: 0
  9553  003970  0100               	movlb	0	; () banked
  9554  003972  6D8C               	negf	___awdiv@quotient& (0+255),b
  9555  003974  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
  9556  003976  B0D8               	btfsc	status,0,c
  9557  003978  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
  9558  00397A                     l7538:
  9559                           
  9560                           ; BSR set to: 0
  9561  00397A  C08C  F086         	movff	___awdiv@quotient,?___awdiv
  9562  00397E  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
  9563  003982  0012               	return	
  9564  003984                     __end_of___awdiv:
  9565                           	opt stack 0
  9566                           tblptru	equ	0xFF8
  9567                           tblptrh	equ	0xFF7
  9568                           tblptrl	equ	0xFF6
  9569                           tablat	equ	0xFF5
  9570                           prodh	equ	0xFF4
  9571                           prodl	equ	0xFF3
  9572                           intcon	equ	0xFF2
  9573                           intcon2	equ	0xFF1
  9574                           intcon3	equ	0xFF0
  9575                           postinc0	equ	0xFEE
  9576                           wreg	equ	0xFE8
  9577                           postdec1	equ	0xFE5
  9578                           fsr1l	equ	0xFE1
  9579                           indf2	equ	0xFDF
  9580                           postinc2	equ	0xFDE
  9581                           postdec2	equ	0xFDD
  9582                           fsr2h	equ	0xFDA
  9583                           fsr2l	equ	0xFD9
  9584                           status	equ	0xFD8
  9585                           
  9586 ;; *************** function _Test *****************
  9587 ;; Defined at:
  9588 ;;		line 30 in file "Test.c"
  9589 ;; Parameters:    Size  Location     Type
  9590 ;;		None
  9591 ;; Auto vars:     Size  Location     Type
  9592 ;;		None
  9593 ;; Return value:  Size  Location     Type
  9594 ;;                  1    wreg      void 
  9595 ;; Registers used:
  9596 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9597 ;; Tracked objects:
  9598 ;;		On entry : 0/0
  9599 ;;		On exit  : 0/0
  9600 ;;		Unchanged: 0/0
  9601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9602 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9603 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9604 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9605 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9606 ;;Total ram usage:        2 bytes
  9607 ;; Hardware stack levels used:    1
  9608 ;; Hardware stack levels required when called:   11
  9609 ;; This function calls:
  9610 ;;		_BlockerTest
  9611 ;;		_BothServos
  9612 ;;		_EEPROMTest
  9613 ;;		_PortTestA5
  9614 ;;		_PortTests
  9615 ;;		_PusherTest
  9616 ;;		_SpeedTest
  9617 ;;		_actuatorTest
  9618 ;;		_algorithmTest
  9619 ;;		_lcdInst
  9620 ;;		_printf
  9621 ;;		_sensorTest
  9622 ;; This function is called by:
  9623 ;;		_main
  9624 ;; This function uses a non-reentrant model
  9625 ;;
  9626                           
  9627                           	psect	text36
  9628  0033A6                     __ptext36:
  9629                           	opt stack 0
  9630  0033A6                     _Test:
  9631                           	opt stack 19
  9632  0033A6                     
  9633                           ;Test.c: 33: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
  9634  0033A6  0E01               	movlw	1
  9635  0033A8  ECD6  F024         	call	_lcdInst
  9636  0033AC  0E68               	movlw	104
  9637  0033AE  0100               	movlb	0	; () banked
  9638  0033B0  6FC6               	movwf	??_Test& (0+255),b
  9639  0033B2  0EE4               	movlw	228
  9640  0033B4                     u7757:
  9641  0033B4  2EE8               	decfsz	wreg,f,c
  9642  0033B6  D7FE               	bra	u7757
  9643  0033B8  2FC6               	decfsz	??_Test& (0+255),f,b
  9644  0033BA  D7FC               	bra	u7757
  9645  0033BC  F000               	nop	
  9646  0033BE  0E80               	movlw	128
  9647  0033C0  ECD6  F024         	call	_lcdInst
  9648                           
  9649                           ;Test.c: 34: printf("1.ALG|2.SNR|3.AC");
  9650  0033C4  0E70               	movlw	low STR_68
  9651  0033C6  0100               	movlb	0	; () banked
  9652  0033C8  6F8E               	movwf	printf@f& (0+255),b
  9653  0033CA  0EFC               	movlw	high STR_68
  9654  0033CC  0100               	movlb	0	; () banked
  9655  0033CE  6F8F               	movwf	(printf@f+1)& (0+255),b
  9656  0033D0  ECB8  F008         	call	_printf	;wreg free
  9657                           
  9658                           ;Test.c: 35: lcdInst(0b11000000);;
  9659  0033D4  0EC0               	movlw	192
  9660  0033D6  ECD6  F024         	call	_lcdInst
  9661                           
  9662                           ;Test.c: 36: printf("4.HI|5.TOG|6.EEP");
  9663  0033DA  0EA3               	movlw	low STR_69
  9664  0033DC  0100               	movlb	0	; () banked
  9665  0033DE  6F8E               	movwf	printf@f& (0+255),b
  9666  0033E0  0EFC               	movlw	high STR_69
  9667  0033E2  0100               	movlb	0	; () banked
  9668  0033E4  6F8F               	movwf	(printf@f+1)& (0+255),b
  9669  0033E6  ECB8  F008         	call	_printf	;wreg free
  9670                           
  9671                           ;Test.c: 37: _delay((unsigned long)((100)*(32000000/4000.0)));
  9672  0033EA  0E05               	movlw	5
  9673  0033EC  0100               	movlb	0	; () banked
  9674  0033EE  6FC7               	movwf	(??_Test+1)& (0+255),b
  9675  0033F0  0E0F               	movlw	15
  9676  0033F2  0100               	movlb	0	; () banked
  9677  0033F4  6FC6               	movwf	??_Test& (0+255),b
  9678  0033F6  0EF1               	movlw	241
  9679  0033F8                     u7767:
  9680  0033F8  2EE8               	decfsz	wreg,f,c
  9681  0033FA  D7FE               	bra	u7767
  9682  0033FC  2FC6               	decfsz	??_Test& (0+255),f,b
  9683  0033FE  D7FC               	bra	u7767
  9684  003400  2FC7               	decfsz	(??_Test+1)& (0+255),f,b
  9685  003402  D7FA               	bra	u7767
  9686  003404                     l1051:
  9687  003404  A281               	btfss	3969,1,c	;volatile
  9688  003406  D7FE               	goto	l1051
  9689                           
  9690                           ;Test.c: 39: var = PORTB >> 4;
  9691  003408  CF81 F0C6          	movff	3969,??_Test	;volatile
  9692  00340C  0100               	movlb	0	; () banked
  9693  00340E  3BC6               	swapf	??_Test& (0+255),f,b
  9694  003410  0E0F               	movlw	15
  9695  003412  17C6               	andwf	??_Test& (0+255),f,b
  9696  003414  0100               	movlb	0	; () banked
  9697  003416  51C6               	movf	??_Test& (0+255),w,b
  9698  003418  0100               	movlb	0	; () banked
  9699  00341A  6FFA               	movwf	_var& (0+255),b
  9700  00341C  6BFB               	clrf	(_var+1)& (0+255),b
  9701                           
  9702                           ; BSR set to: 0
  9703                           ;Test.c: 40: var++;
  9704  00341E  0100               	movlb	0	; () banked
  9705  003420  4BFA               	infsnz	_var& (0+255),f,b
  9706  003422  2BFB               	incf	(_var+1)& (0+255),f,b
  9707  003424                     l1054:
  9708  003424  A281               	btfss	3969,1,c	;volatile
  9709  003426  D01F               	goto	l8274
  9710  003428  D7FD               	goto	l1054
  9711  00342A                     l8252:
  9712                           
  9713                           ;Test.c: 44: algorithmTest();
  9714  00342A  ECCF  F01A         	call	_algorithmTest	;wreg free
  9715                           
  9716                           ;Test.c: 45: break;
  9717  00342E  D7BB               	goto	l8234
  9718  003430                     l8254:
  9719                           
  9720                           ;Test.c: 47: sensorTest();
  9721  003430  EC4D  F00E         	call	_sensorTest	;wreg free
  9722                           
  9723                           ;Test.c: 48: break;
  9724  003434  D7B8               	goto	l8234
  9725  003436                     l8256:
  9726                           
  9727                           ;Test.c: 50: actuatorTest();
  9728  003436  EC09  F000         	call	_actuatorTest	;wreg free
  9729                           
  9730                           ;Test.c: 51: break;
  9731  00343A  D7B5               	goto	l8234
  9732  00343C                     l8258:
  9733                           
  9734                           ;Test.c: 53: PortTestA5();
  9735  00343C  EC7A  F020         	call	_PortTestA5	;wreg free
  9736                           
  9737                           ;Test.c: 54: break;
  9738  003440  D7B2               	goto	l8234
  9739  003442                     l8260:
  9740                           
  9741                           ;Test.c: 57: SpeedTest();
  9742  003442  EC4F  F01E         	call	_SpeedTest	;wreg free
  9743                           
  9744                           ;Test.c: 58: break;
  9745  003446  D7AF               	goto	l8234
  9746  003448                     l8262:
  9747                           
  9748                           ;Test.c: 60: EEPROMTest();
  9749  003448  EC08  F025         	call	_EEPROMTest	;wreg free
  9750                           
  9751                           ;Test.c: 61: break;
  9752  00344C  D7AC               	goto	l8234
  9753  00344E                     l8264:
  9754                           
  9755                           ;Test.c: 63: PusherTest();
  9756  00344E  EC3A  F01B         	call	_PusherTest	;wreg free
  9757                           
  9758                           ;Test.c: 64: break;
  9759  003452  D7A9               	goto	l8234
  9760  003454                     l8266:
  9761                           
  9762                           ;Test.c: 66: PortTests();
  9763  003454  EC91  F01E         	call	_PortTests	;wreg free
  9764                           
  9765                           ;Test.c: 67: break;
  9766  003458  D7A6               	goto	l8234
  9767  00345A                     l8268:
  9768                           
  9769                           ;Test.c: 69: BothServos();
  9770  00345A  ECD4  F00A         	call	_BothServos	;wreg free
  9771                           
  9772                           ;Test.c: 70: break;
  9773  00345E  D7A3               	goto	l8234
  9774  003460                     l8270:
  9775                           
  9776                           ;Test.c: 72: BlockerTest();
  9777  003460  EC9F  F01B         	call	_BlockerTest	;wreg free
  9778                           
  9779                           ;Test.c: 76: }
  9780                           
  9781                           ;Test.c: 75: break;
  9782                           
  9783                           ;Test.c: 74: default:
  9784                           
  9785                           ;Test.c: 73: break;
  9786  003464  D7A0               	goto	l8234
  9787  003466                     l8274:
  9788  003466  C0FA  F0C6         	movff	_var,??_Test
  9789  00346A  C0FB  F0C7         	movff	_var+1,??_Test+1
  9790                           
  9791                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9792                           ; Switch size 1, requested type "space"
  9793                           ; Number of cases is 1, Range of values is 0 to 0
  9794                           ; switch strategies available:
  9795                           ; Name         Instructions Cycles
  9796                           ; simple_byte            4     3 (average)
  9797                           ;	Chosen strategy is simple_byte
  9798  00346E  0100               	movlb	0	; () banked
  9799  003470  51C7               	movf	(??_Test+1)& (0+255),w,b
  9800  003472  0A00               	xorlw	0	; case 0
  9801  003474  A4D8               	btfss	status,2,c
  9802  003476  D797               	goto	l8234
  9803                           
  9804                           ; BSR set to: 0
  9805                           ; Switch size 1, requested type "space"
  9806                           ; Number of cases is 10, Range of values is 1 to 11
  9807                           ; switch strategies available:
  9808                           ; Name         Instructions Cycles
  9809                           ; simple_byte           31    16 (average)
  9810                           ;	Chosen strategy is simple_byte
  9811  003478  0100               	movlb	0	; () banked
  9812  00347A  51C6               	movf	??_Test& (0+255),w,b
  9813  00347C  0A01               	xorlw	1	; case 1
  9814  00347E  B4D8               	btfsc	status,2,c
  9815  003480  D7D4               	goto	l8252
  9816  003482  0A03               	xorlw	3	; case 2
  9817  003484  B4D8               	btfsc	status,2,c
  9818  003486  D7D4               	goto	l8254
  9819  003488  0A01               	xorlw	1	; case 3
  9820  00348A  B4D8               	btfsc	status,2,c
  9821  00348C  D7D4               	goto	l8256
  9822  00348E  0A06               	xorlw	6	; case 5
  9823  003490  B4D8               	btfsc	status,2,c
  9824  003492  D7D4               	goto	l8258
  9825  003494  0A03               	xorlw	3	; case 6
  9826  003496  B4D8               	btfsc	status,2,c
  9827  003498  D7D4               	goto	l8260
  9828  00349A  0A01               	xorlw	1	; case 7
  9829  00349C  B4D8               	btfsc	status,2,c
  9830  00349E  D7D4               	goto	l8262
  9831  0034A0  0A0F               	xorlw	15	; case 8
  9832  0034A2  B4D8               	btfsc	status,2,c
  9833  0034A4  D7D4               	goto	l8264
  9834  0034A6  0A01               	xorlw	1	; case 9
  9835  0034A8  B4D8               	btfsc	status,2,c
  9836  0034AA  D7D4               	goto	l8266
  9837  0034AC  0A03               	xorlw	3	; case 10
  9838  0034AE  B4D8               	btfsc	status,2,c
  9839  0034B0  D7D4               	goto	l8268
  9840  0034B2  0A01               	xorlw	1	; case 11
  9841  0034B4  B4D8               	btfsc	status,2,c
  9842  0034B6  D7D4               	goto	l8270
  9843                           
  9844                           ; BSR set to: 0
  9845                           
  9846                           ; BSR set to: 0
  9847  0034B8  D776               	goto	l8234
  9848  0034BA                     __end_of_Test:
  9849                           	opt stack 0
  9850                           tblptru	equ	0xFF8
  9851                           tblptrh	equ	0xFF7
  9852                           tblptrl	equ	0xFF6
  9853                           tablat	equ	0xFF5
  9854                           prodh	equ	0xFF4
  9855                           prodl	equ	0xFF3
  9856                           intcon	equ	0xFF2
  9857                           intcon2	equ	0xFF1
  9858                           intcon3	equ	0xFF0
  9859                           postinc0	equ	0xFEE
  9860                           wreg	equ	0xFE8
  9861                           postdec1	equ	0xFE5
  9862                           fsr1l	equ	0xFE1
  9863                           indf2	equ	0xFDF
  9864                           postinc2	equ	0xFDE
  9865                           postdec2	equ	0xFDD
  9866                           fsr2h	equ	0xFDA
  9867                           fsr2l	equ	0xFD9
  9868                           status	equ	0xFD8
  9869                           
  9870 ;; *************** function _sensorTest *****************
  9871 ;; Defined at:
  9872 ;;		line 124 in file "Test.c"
  9873 ;; Parameters:    Size  Location     Type
  9874 ;;		None
  9875 ;; Auto vars:     Size  Location     Type
  9876 ;;  res             2   45[BANK0 ] int 
  9877 ;; Return value:  Size  Location     Type
  9878 ;;                  1    wreg      void 
  9879 ;; Registers used:
  9880 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9881 ;; Tracked objects:
  9882 ;;		On entry : 0/0
  9883 ;;		On exit  : 0/0
  9884 ;;		Unchanged: 0/0
  9885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9886 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9887 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9888 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9889 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9890 ;;Total ram usage:        4 bytes
  9891 ;; Hardware stack levels used:    1
  9892 ;; Hardware stack levels required when called:   10
  9893 ;; This function calls:
  9894 ;;		_lcdInst
  9895 ;;		_printf
  9896 ;;		_readADC
  9897 ;;		_readMAG
  9898 ;; This function is called by:
  9899 ;;		_Test
  9900 ;; This function uses a non-reentrant model
  9901 ;;
  9902                           
  9903                           	psect	text37
  9904  001C9A                     __ptext37:
  9905                           	opt stack 0
  9906  001C9A                     _sensorTest:
  9907                           	opt stack 19
  9908                           
  9909                           ;Test.c: 126: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
  9910                           
  9911                           ; BSR set to: 0
  9912                           ;incstack = 0
  9913  001C9A  0E01               	movlw	1
  9914  001C9C  ECD6  F024         	call	_lcdInst
  9915  001CA0  0E68               	movlw	104
  9916  001CA2  0100               	movlb	0	; () banked
  9917  001CA4  6FAB               	movwf	??_sensorTest& (0+255),b
  9918  001CA6  0EE4               	movlw	228
  9919  001CA8                     u7777:
  9920  001CA8  2EE8               	decfsz	wreg,f,c
  9921  001CAA  D7FE               	bra	u7777
  9922  001CAC  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9923  001CAE  D7FC               	bra	u7777
  9924  001CB0  F000               	nop	
  9925  001CB2  0E80               	movlw	128
  9926  001CB4  ECD6  F024         	call	_lcdInst
  9927                           
  9928                           ;Test.c: 127: printf("SENSORS");
  9929  001CB8  0EAE               	movlw	low STR_77
  9930  001CBA  0100               	movlb	0	; () banked
  9931  001CBC  6F8E               	movwf	printf@f& (0+255),b
  9932  001CBE  0EFF               	movlw	high STR_77
  9933  001CC0  0100               	movlb	0	; () banked
  9934  001CC2  6F8F               	movwf	(printf@f+1)& (0+255),b
  9935  001CC4  ECB8  F008         	call	_printf	;wreg free
  9936                           
  9937                           ;Test.c: 128: lcdInst(0b11000000);;
  9938  001CC8  0EC0               	movlw	192
  9939  001CCA  ECD6  F024         	call	_lcdInst
  9940                           
  9941                           ;Test.c: 129: printf("PUSH TO START");
  9942  001CCE  0E0B               	movlw	low STR_71
  9943  001CD0  0100               	movlb	0	; () banked
  9944  001CD2  6F8E               	movwf	printf@f& (0+255),b
  9945  001CD4  0EFF               	movlw	high STR_71
  9946  001CD6  0100               	movlb	0	; () banked
  9947  001CD8  6F8F               	movwf	(printf@f+1)& (0+255),b
  9948  001CDA  ECB8  F008         	call	_printf	;wreg free
  9949                           
  9950                           ;Test.c: 130: _delay((unsigned long)((100)*(32000000/4000.0)));
  9951  001CDE  0E05               	movlw	5
  9952  001CE0  0100               	movlb	0	; () banked
  9953  001CE2  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9954  001CE4  0E0F               	movlw	15
  9955  001CE6  0100               	movlb	0	; () banked
  9956  001CE8  6FAB               	movwf	??_sensorTest& (0+255),b
  9957  001CEA  0EF1               	movlw	241
  9958  001CEC                     u7787:
  9959  001CEC  2EE8               	decfsz	wreg,f,c
  9960  001CEE  D7FE               	bra	u7787
  9961  001CF0  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9962  001CF2  D7FC               	bra	u7787
  9963  001CF4  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9964  001CF6  D7FA               	bra	u7787
  9965  001CF8                     l1084:
  9966  001CF8  A281               	btfss	3969,1,c	;volatile
  9967  001CFA  D7FE               	goto	l1084
  9968  001CFC                     l1087:
  9969  001CFC  B281               	btfsc	3969,1,c	;volatile
  9970  001CFE  D7FE               	goto	l1087
  9971                           
  9972                           ;Test.c: 133: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
  9973  001D00  0E01               	movlw	1
  9974  001D02  ECD6  F024         	call	_lcdInst
  9975  001D06  0E68               	movlw	104
  9976  001D08  0100               	movlb	0	; () banked
  9977  001D0A  6FAB               	movwf	??_sensorTest& (0+255),b
  9978  001D0C  0EE4               	movlw	228
  9979  001D0E                     u7797:
  9980  001D0E  2EE8               	decfsz	wreg,f,c
  9981  001D10  D7FE               	bra	u7797
  9982  001D12  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9983  001D14  D7FC               	bra	u7797
  9984  001D16  F000               	nop	
  9985  001D18  0E80               	movlw	128
  9986  001D1A  ECD6  F024         	call	_lcdInst
  9987                           
  9988                           ;Test.c: 138: printf("TST: IR SNSR");
  9989  001D1E  0E35               	movlw	low STR_79
  9990  001D20  0100               	movlb	0	; () banked
  9991  001D22  6F8E               	movwf	printf@f& (0+255),b
  9992  001D24  0EFF               	movlw	high STR_79
  9993  001D26  0100               	movlb	0	; () banked
  9994  001D28  6F8F               	movwf	(printf@f+1)& (0+255),b
  9995  001D2A  ECB8  F008         	call	_printf	;wreg free
  9996                           
  9997                           ;Test.c: 139: _delay((unsigned long)((100)*(32000000/4000.0)));
  9998  001D2E  0E05               	movlw	5
  9999  001D30  0100               	movlb	0	; () banked
 10000  001D32  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10001  001D34  0E0F               	movlw	15
 10002  001D36  0100               	movlb	0	; () banked
 10003  001D38  6FAB               	movwf	??_sensorTest& (0+255),b
 10004  001D3A  0EF1               	movlw	241
 10005  001D3C                     u7807:
 10006  001D3C  2EE8               	decfsz	wreg,f,c
 10007  001D3E  D7FE               	bra	u7807
 10008  001D40  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10009  001D42  D7FC               	bra	u7807
 10010  001D44  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10011  001D46  D7FA               	bra	u7807
 10012                           
 10013                           ;Test.c: 140: LATCbits.LATC5 = 1;
 10014  001D48  8A8B               	bsf	3979,5,c	;volatile
 10015                           
 10016                           ;Test.c: 141: while(PORTBbits.RB1 == 0){
 10017  001D4A  D05C               	goto	l6790
 10018  001D4C                     l6772:
 10019                           
 10020                           ;Test.c: 142: readADC(0);
 10021  001D4C  0E00               	movlw	0
 10022  001D4E  ECDD  F023         	call	_readADC
 10023                           
 10024                           ;Test.c: 143: int res = ADRESH<<8 | ADRESL;
 10025  001D52  50C3               	movf	4035,w,c	;volatile
 10026  001D54  CFC4 F0AB          	movff	4036,??_sensorTest	;volatile
 10027  001D58  0100               	movlb	0	; () banked
 10028  001D5A  6BAC               	clrf	(??_sensorTest+1)& (0+255),b
 10029  001D5C  C0AB  F0AC         	movff	??_sensorTest,??_sensorTest+1
 10030  001D60  0100               	movlb	0	; () banked
 10031  001D62  6BAB               	clrf	??_sensorTest& (0+255),b
 10032  001D64  0100               	movlb	0	; () banked
 10033  001D66  11AB               	iorwf	??_sensorTest& (0+255),w,b
 10034  001D68  0100               	movlb	0	; () banked
 10035  001D6A  6FAD               	movwf	sensorTest@res& (0+255),b
 10036  001D6C  0100               	movlb	0	; () banked
 10037  001D6E  51AC               	movf	(??_sensorTest+1)& (0+255),w,b
 10038  001D70  0100               	movlb	0	; () banked
 10039  001D72  6FAE               	movwf	(sensorTest@res+1)& (0+255),b
 10040                           
 10041                           ; BSR set to: 0
 10042                           ;Test.c: 144: IR_signal = (res > 1000) ? 1 : 0;
 10043  001D74  0100               	movlb	0	; () banked
 10044  001D76  BFAE               	btfsc	(sensorTest@res+1)& (0+255),7,b
 10045  001D78  D00A               	goto	u5180
 10046  001D7A  0EE9               	movlw	233
 10047  001D7C  0100               	movlb	0	; () banked
 10048  001D7E  5DAD               	subwf	sensorTest@res& (0+255),w,b
 10049  001D80  0E03               	movlw	3
 10050  001D82  0100               	movlb	0	; () banked
 10051  001D84  59AE               	subwfb	(sensorTest@res+1)& (0+255),w,b
 10052  001D86  A0D8               	btfss	status,0,c
 10053  001D88  D002               	goto	u5180
 10054  001D8A  0E01               	movlw	1
 10055  001D8C  D001               	goto	u5190
 10056  001D8E                     u5180:
 10057  001D8E  0E00               	movlw	0
 10058  001D90                     u5190:
 10059  001D90  0100               	movlb	0	; () banked
 10060  001D92  6FDA               	movwf	_IR_signal& (0+255),b
 10061  001D94  6BDB               	clrf	(_IR_signal+1)& (0+255),b
 10062                           
 10063                           ;Test.c: 146: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10064  001D96  0E01               	movlw	1
 10065  001D98  ECD6  F024         	call	_lcdInst
 10066  001D9C  0E68               	movlw	104
 10067  001D9E  0100               	movlb	0	; () banked
 10068  001DA0  6FAB               	movwf	??_sensorTest& (0+255),b
 10069  001DA2  0EE4               	movlw	228
 10070  001DA4                     u7817:
 10071  001DA4  2EE8               	decfsz	wreg,f,c
 10072  001DA6  D7FE               	bra	u7817
 10073  001DA8  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10074  001DAA  D7FC               	bra	u7817
 10075  001DAC  F000               	nop	
 10076  001DAE  0E80               	movlw	128
 10077  001DB0  ECD6  F024         	call	_lcdInst
 10078                           
 10079                           ;Test.c: 147: printf("IR_signal: %d ", IR_signal);
 10080  001DB4  0E5A               	movlw	low STR_80
 10081  001DB6  0100               	movlb	0	; () banked
 10082  001DB8  6F8E               	movwf	printf@f& (0+255),b
 10083  001DBA  0EFE               	movlw	high STR_80
 10084  001DBC  0100               	movlb	0	; () banked
 10085  001DBE  6F8F               	movwf	(printf@f+1)& (0+255),b
 10086  001DC0  C0DA  F090         	movff	_IR_signal,?_printf+2
 10087  001DC4  C0DB  F091         	movff	_IR_signal+1,?_printf+3
 10088  001DC8  ECB8  F008         	call	_printf	;wreg free
 10089                           
 10090                           ;Test.c: 148: lcdInst(0b11000000);;
 10091  001DCC  0EC0               	movlw	192
 10092  001DCE  ECD6  F024         	call	_lcdInst
 10093                           
 10094                           ;Test.c: 149: printf("%d", res);
 10095  001DD2  0E16               	movlw	low (STR_27+14)
 10096  001DD4  0100               	movlb	0	; () banked
 10097  001DD6  6F8E               	movwf	printf@f& (0+255),b
 10098  001DD8  0EFE               	movlw	high (STR_27+14)
 10099  001DDA  0100               	movlb	0	; () banked
 10100  001DDC  6F8F               	movwf	(printf@f+1)& (0+255),b
 10101  001DDE  C0AD  F090         	movff	sensorTest@res,?_printf+2
 10102  001DE2  C0AE  F091         	movff	sensorTest@res+1,?_printf+3
 10103  001DE6  ECB8  F008         	call	_printf	;wreg free
 10104                           
 10105                           ;Test.c: 150: _delay((unsigned long)((100)*(32000000/4000.0)));
 10106  001DEA  0E05               	movlw	5
 10107  001DEC  0100               	movlb	0	; () banked
 10108  001DEE  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10109  001DF0  0E0F               	movlw	15
 10110  001DF2  0100               	movlb	0	; () banked
 10111  001DF4  6FAB               	movwf	??_sensorTest& (0+255),b
 10112  001DF6  0EF1               	movlw	241
 10113  001DF8                     u7827:
 10114  001DF8  2EE8               	decfsz	wreg,f,c
 10115  001DFA  D7FE               	bra	u7827
 10116  001DFC  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10117  001DFE  D7FC               	bra	u7827
 10118  001E00  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10119  001E02  D7FA               	bra	u7827
 10120  001E04                     l6790:
 10121  001E04  A281               	btfss	3969,1,c	;volatile
 10122  001E06  D7A2               	goto	l6772
 10123                           
 10124                           ;Test.c: 151: }
 10125                           ;Test.c: 152: LATCbits.LATC5 = 0;
 10126  001E08  9A8B               	bcf	3979,5,c	;volatile
 10127                           
 10128                           ;Test.c: 159: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10129  001E0A  0E01               	movlw	1
 10130  001E0C  ECD6  F024         	call	_lcdInst
 10131  001E10  0E68               	movlw	104
 10132  001E12  0100               	movlb	0	; () banked
 10133  001E14  6FAB               	movwf	??_sensorTest& (0+255),b
 10134  001E16  0EE4               	movlw	228
 10135  001E18                     u7837:
 10136  001E18  2EE8               	decfsz	wreg,f,c
 10137  001E1A  D7FE               	bra	u7837
 10138  001E1C  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10139  001E1E  D7FC               	bra	u7837
 10140  001E20  F000               	nop	
 10141  001E22  0E80               	movlw	128
 10142  001E24  ECD6  F024         	call	_lcdInst
 10143                           
 10144                           ;Test.c: 160: printf("TST: MAGNETISM");
 10145  001E28  0E87               	movlw	low STR_82
 10146  001E2A  0100               	movlb	0	; () banked
 10147  001E2C  6F8E               	movwf	printf@f& (0+255),b
 10148  001E2E  0EFE               	movlw	high STR_82
 10149  001E30  0100               	movlb	0	; () banked
 10150  001E32  6F8F               	movwf	(printf@f+1)& (0+255),b
 10151  001E34  ECB8  F008         	call	_printf	;wreg free
 10152                           
 10153                           ;Test.c: 161: _delay((unsigned long)((100)*(32000000/4000.0)));
 10154  001E38  0E05               	movlw	5
 10155  001E3A  0100               	movlb	0	; () banked
 10156  001E3C  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10157  001E3E  0E0F               	movlw	15
 10158  001E40  0100               	movlb	0	; () banked
 10159  001E42  6FAB               	movwf	??_sensorTest& (0+255),b
 10160  001E44  0EF1               	movlw	241
 10161  001E46                     u7847:
 10162  001E46  2EE8               	decfsz	wreg,f,c
 10163  001E48  D7FE               	bra	u7847
 10164  001E4A  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10165  001E4C  D7FC               	bra	u7847
 10166  001E4E  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10167  001E50  D7FA               	bra	u7847
 10168                           
 10169                           ;Test.c: 162: while(PORTBbits.RB1 == 0){
 10170  001E52  D021               	goto	l6808
 10171  001E54                     l6802:
 10172                           
 10173                           ;Test.c: 163: readMAG();
 10174  001E54  ECA0  F021         	call	_readMAG	;wreg free
 10175                           
 10176                           ;Test.c: 164: lcdInst(0b10000000);;
 10177  001E58  0E80               	movlw	128
 10178  001E5A  ECD6  F024         	call	_lcdInst
 10179                           
 10180                           ;Test.c: 165: lcdInst(0b11000000);;
 10181  001E5E  0EC0               	movlw	192
 10182  001E60  ECD6  F024         	call	_lcdInst
 10183                           
 10184                           ;Test.c: 166: printf("MAG_signal: %d ", MAG_signal);
 10185  001E64  0E2A               	movlw	low STR_83
 10186  001E66  0100               	movlb	0	; () banked
 10187  001E68  6F8E               	movwf	printf@f& (0+255),b
 10188  001E6A  0EFE               	movlw	high STR_83
 10189  001E6C  0100               	movlb	0	; () banked
 10190  001E6E  6F8F               	movwf	(printf@f+1)& (0+255),b
 10191  001E70  C0DC  F090         	movff	_MAG_signal,?_printf+2
 10192  001E74  C0DD  F091         	movff	_MAG_signal+1,?_printf+3
 10193  001E78  ECB8  F008         	call	_printf	;wreg free
 10194                           
 10195                           ;Test.c: 167: _delay((unsigned long)((100)*(32000000/4000.0)));
 10196  001E7C  0E05               	movlw	5
 10197  001E7E  0100               	movlb	0	; () banked
 10198  001E80  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10199  001E82  0E0F               	movlw	15
 10200  001E84  0100               	movlb	0	; () banked
 10201  001E86  6FAB               	movwf	??_sensorTest& (0+255),b
 10202  001E88  0EF1               	movlw	241
 10203  001E8A                     u7857:
 10204  001E8A  2EE8               	decfsz	wreg,f,c
 10205  001E8C  D7FE               	bra	u7857
 10206  001E8E  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10207  001E90  D7FC               	bra	u7857
 10208  001E92  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10209  001E94  D7FA               	bra	u7857
 10210  001E96                     l6808:
 10211  001E96  A281               	btfss	3969,1,c	;volatile
 10212  001E98  D7DD               	goto	l6802
 10213                           
 10214                           ;Test.c: 168: }
 10215                           ;Test.c: 173: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10216  001E9A  0E01               	movlw	1
 10217  001E9C  ECD6  F024         	call	_lcdInst
 10218  001EA0  0E68               	movlw	104
 10219  001EA2  0100               	movlb	0	; () banked
 10220  001EA4  6FAB               	movwf	??_sensorTest& (0+255),b
 10221  001EA6  0EE4               	movlw	228
 10222  001EA8                     u7867:
 10223  001EA8  2EE8               	decfsz	wreg,f,c
 10224  001EAA  D7FE               	bra	u7867
 10225  001EAC  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10226  001EAE  D7FC               	bra	u7867
 10227  001EB0  F000               	nop	
 10228  001EB2  0E80               	movlw	128
 10229  001EB4  ECD6  F024         	call	_lcdInst
 10230                           
 10231                           ;Test.c: 174: printf("TST: COND");
 10232  001EB8  0E87               	movlw	low STR_84
 10233  001EBA  0100               	movlb	0	; () banked
 10234  001EBC  6F8E               	movwf	printf@f& (0+255),b
 10235  001EBE  0EFF               	movlw	high STR_84
 10236  001EC0  0100               	movlb	0	; () banked
 10237  001EC2  6F8F               	movwf	(printf@f+1)& (0+255),b
 10238  001EC4  ECB8  F008         	call	_printf	;wreg free
 10239                           
 10240                           ;Test.c: 175: _delay((unsigned long)((100)*(32000000/4000.0)));
 10241  001EC8  0E05               	movlw	5
 10242  001ECA  0100               	movlb	0	; () banked
 10243  001ECC  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10244  001ECE  0E0F               	movlw	15
 10245  001ED0  0100               	movlb	0	; () banked
 10246  001ED2  6FAB               	movwf	??_sensorTest& (0+255),b
 10247  001ED4  0EF1               	movlw	241
 10248  001ED6                     u7877:
 10249  001ED6  2EE8               	decfsz	wreg,f,c
 10250  001ED8  D7FE               	bra	u7877
 10251  001EDA  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10252  001EDC  D7FC               	bra	u7877
 10253  001EDE  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10254  001EE0  D7FA               	bra	u7877
 10255  001EE2                     l6820:
 10256                           
 10257                           ;Test.c: 177: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10258  001EE2  0E01               	movlw	1
 10259  001EE4  ECD6  F024         	call	_lcdInst
 10260  001EE8  0E68               	movlw	104
 10261  001EEA  0100               	movlb	0	; () banked
 10262  001EEC  6FAB               	movwf	??_sensorTest& (0+255),b
 10263  001EEE  0EE4               	movlw	228
 10264  001EF0                     u7887:
 10265  001EF0  2EE8               	decfsz	wreg,f,c
 10266  001EF2  D7FE               	bra	u7887
 10267  001EF4  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10268  001EF6  D7FC               	bra	u7887
 10269  001EF8  F000               	nop	
 10270  001EFA  0E80               	movlw	128
 10271  001EFC  ECD6  F024         	call	_lcdInst
 10272                           
 10273                           ;Test.c: 178: printf("TST: COND");
 10274  001F00  0E87               	movlw	low STR_84
 10275  001F02  0100               	movlb	0	; () banked
 10276  001F04  6F8E               	movwf	printf@f& (0+255),b
 10277  001F06  0EFF               	movlw	high STR_84
 10278  001F08  0100               	movlb	0	; () banked
 10279  001F0A  6F8F               	movwf	(printf@f+1)& (0+255),b
 10280  001F0C  ECB8  F008         	call	_printf	;wreg free
 10281                           
 10282                           ;Test.c: 179: while(PORTBbits.RB1 == 0){
 10283  001F10  D01B               	goto	l6832
 10284  001F12                     l6828:
 10285                           
 10286                           ;Test.c: 183: lcdInst(0b10000000);;lcdInst(0b11000000);;
 10287  001F12  0E80               	movlw	128
 10288  001F14  ECD6  F024         	call	_lcdInst
 10289  001F18  0EC0               	movlw	192
 10290  001F1A  ECD6  F024         	call	_lcdInst
 10291                           
 10292                           ;Test.c: 184: printf("COND: %d", PORTAbits.RA2);
 10293  001F1E  0EA5               	movlw	low STR_86
 10294  001F20  0100               	movlb	0	; () banked
 10295  001F22  6F8E               	movwf	printf@f& (0+255),b
 10296  001F24  0EFF               	movlw	high STR_86
 10297  001F26  0100               	movlb	0	; () banked
 10298  001F28  6F8F               	movwf	(printf@f+1)& (0+255),b
 10299  001F2A  A480               	btfss	3968,2,c	;volatile
 10300  001F2C  D004               	goto	u5220
 10301  001F2E  0100               	movlb	0	; () banked
 10302  001F30  6BAB               	clrf	??_sensorTest& (0+255),b
 10303  001F32  2BAB               	incf	??_sensorTest& (0+255),f,b
 10304  001F34  D002               	goto	u5228
 10305  001F36                     u5220:
 10306  001F36  0100               	movlb	0	; () banked
 10307  001F38  6BAB               	clrf	??_sensorTest& (0+255),b
 10308  001F3A                     u5228:
 10309  001F3A  0100               	movlb	0	; () banked
 10310  001F3C  51AB               	movf	??_sensorTest& (0+255),w,b
 10311  001F3E  0100               	movlb	0	; () banked
 10312  001F40  6F90               	movwf	(?_printf+2)& (0+255),b
 10313  001F42  6B91               	clrf	(?_printf+3)& (0+255),b
 10314  001F44  ECB8  F008         	call	_printf	;wreg free
 10315  001F48                     l6832:
 10316  001F48  A281               	btfss	3969,1,c	;volatile
 10317  001F4A  D7E3               	goto	l6828
 10318                           
 10319                           ;Test.c: 185: }
 10320                           ;Test.c: 186: if(PORTB >> 4 == 0b1111){
 10321  001F4C  3881               	swapf	3969,w,c	;volatile
 10322  001F4E  0B0F               	andlw	15
 10323  001F50  0A0F               	xorlw	15
 10324  001F52  B4D8               	btfsc	status,2,c
 10325  001F54  0012               	return	
 10326                           
 10327                           ;Test.c: 189: else{
 10328                           ;Test.c: 190: LATAbits.LATA3 = 1;
 10329                           
 10330                           ;Test.c: 188: }
 10331                           
 10332                           ;Test.c: 187: break;
 10333  001F56  8689               	bsf	3977,3,c	;volatile
 10334                           
 10335                           ;Test.c: 191: while(PORTBbits.RB1 == 1){
 10336  001F58  D01B               	goto	l6844
 10337  001F5A                     l6840:
 10338                           
 10339                           ;Test.c: 193: lcdInst(0b10000000);;lcdInst(0b11000000);;
 10340  001F5A  0E80               	movlw	128
 10341  001F5C  ECD6  F024         	call	_lcdInst
 10342  001F60  0EC0               	movlw	192
 10343  001F62  ECD6  F024         	call	_lcdInst
 10344                           
 10345                           ;Test.c: 194: printf("COND: %d", PORTAbits.RA2);
 10346  001F66  0EA5               	movlw	low STR_86
 10347  001F68  0100               	movlb	0	; () banked
 10348  001F6A  6F8E               	movwf	printf@f& (0+255),b
 10349  001F6C  0EFF               	movlw	high STR_86
 10350  001F6E  0100               	movlb	0	; () banked
 10351  001F70  6F8F               	movwf	(printf@f+1)& (0+255),b
 10352  001F72  A480               	btfss	3968,2,c	;volatile
 10353  001F74  D004               	goto	u5250
 10354  001F76  0100               	movlb	0	; () banked
 10355  001F78  6BAB               	clrf	??_sensorTest& (0+255),b
 10356  001F7A  2BAB               	incf	??_sensorTest& (0+255),f,b
 10357  001F7C  D002               	goto	u5258
 10358  001F7E                     u5250:
 10359  001F7E  0100               	movlb	0	; () banked
 10360  001F80  6BAB               	clrf	??_sensorTest& (0+255),b
 10361  001F82                     u5258:
 10362  001F82  0100               	movlb	0	; () banked
 10363  001F84  51AB               	movf	??_sensorTest& (0+255),w,b
 10364  001F86  0100               	movlb	0	; () banked
 10365  001F88  6F90               	movwf	(?_printf+2)& (0+255),b
 10366  001F8A  6B91               	clrf	(?_printf+3)& (0+255),b
 10367  001F8C  ECB8  F008         	call	_printf	;wreg free
 10368  001F90                     l6844:
 10369  001F90  B281               	btfsc	3969,1,c	;volatile
 10370  001F92  D7E3               	goto	l6840
 10371                           
 10372                           ;Test.c: 195: }
 10373                           ;Test.c: 196: LATAbits.LATA3 = ~1;
 10374  001F94  9689               	bcf	3977,3,c	;volatile
 10375  001F96  D7A5               	goto	l6820
 10376  001F98                     __end_of_sensorTest:
 10377                           	opt stack 0
 10378                           tblptru	equ	0xFF8
 10379                           tblptrh	equ	0xFF7
 10380                           tblptrl	equ	0xFF6
 10381                           tablat	equ	0xFF5
 10382                           prodh	equ	0xFF4
 10383                           prodl	equ	0xFF3
 10384                           intcon	equ	0xFF2
 10385                           intcon2	equ	0xFF1
 10386                           intcon3	equ	0xFF0
 10387                           postinc0	equ	0xFEE
 10388                           wreg	equ	0xFE8
 10389                           postdec1	equ	0xFE5
 10390                           fsr1l	equ	0xFE1
 10391                           indf2	equ	0xFDF
 10392                           postinc2	equ	0xFDE
 10393                           postdec2	equ	0xFDD
 10394                           fsr2h	equ	0xFDA
 10395                           fsr2l	equ	0xFD9
 10396                           status	equ	0xFD8
 10397                           
 10398 ;; *************** function _readMAG *****************
 10399 ;; Defined at:
 10400 ;;		line 29 in file "ADCFunctionality.c"
 10401 ;; Parameters:    Size  Location     Type
 10402 ;;		None
 10403 ;; Auto vars:     Size  Location     Type
 10404 ;;  res             2    4[BANK0 ] int 
 10405 ;; Return value:  Size  Location     Type
 10406 ;;                  1    wreg      void 
 10407 ;; Registers used:
 10408 ;;		wreg, status,2, status,0, cstack
 10409 ;; Tracked objects:
 10410 ;;		On entry : 0/0
 10411 ;;		On exit  : 0/0
 10412 ;;		Unchanged: 0/0
 10413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10414 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10415 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10416 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10417 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10418 ;;Total ram usage:        4 bytes
 10419 ;; Hardware stack levels used:    1
 10420 ;; Hardware stack levels required when called:    8
 10421 ;; This function calls:
 10422 ;;		_readADC
 10423 ;; This function is called by:
 10424 ;;		_getMAG
 10425 ;;		_sensorTest
 10426 ;; This function uses a non-reentrant model
 10427 ;;
 10428                           
 10429                           	psect	text38
 10430  004340                     __ptext38:
 10431                           	opt stack 0
 10432  004340                     _readMAG:
 10433                           	opt stack 19
 10434                           
 10435                           ;ADCFunctionality.c: 30: readADC(1);
 10436                           
 10437                           ;incstack = 0
 10438  004340  0E01               	movlw	1
 10439  004342  ECDD  F023         	call	_readADC
 10440                           
 10441                           ;ADCFunctionality.c: 31: int res = ADRESH<<8 | ADRESL;
 10442  004346  50C3               	movf	4035,w,c	;volatile
 10443  004348  CFC4 F082          	movff	4036,??_readMAG	;volatile
 10444  00434C  0100               	movlb	0	; () banked
 10445  00434E  6B83               	clrf	(??_readMAG+1)& (0+255),b
 10446  004350  C082  F083         	movff	??_readMAG,??_readMAG+1
 10447  004354  0100               	movlb	0	; () banked
 10448  004356  6B82               	clrf	??_readMAG& (0+255),b
 10449  004358  0100               	movlb	0	; () banked
 10450  00435A  1182               	iorwf	??_readMAG& (0+255),w,b
 10451  00435C  0100               	movlb	0	; () banked
 10452  00435E  6F84               	movwf	readMAG@res& (0+255),b
 10453  004360  0100               	movlb	0	; () banked
 10454  004362  5183               	movf	(??_readMAG+1)& (0+255),w,b
 10455  004364  0100               	movlb	0	; () banked
 10456  004366  6F85               	movwf	(readMAG@res+1)& (0+255),b
 10457                           
 10458                           ; BSR set to: 0
 10459                           ;ADCFunctionality.c: 32: MAG_signal = (res < 150) ? 1 : 0;
 10460  004368  0100               	movlb	0	; () banked
 10461  00436A  BF85               	btfsc	(readMAG@res+1)& (0+255),7,b
 10462  00436C  D008               	goto	u3941
 10463  00436E  0100               	movlb	0	; () banked
 10464  004370  5185               	movf	(readMAG@res+1)& (0+255),w,b
 10465  004372  E107               	bnz	u3940
 10466  004374  0E96               	movlw	150
 10467  004376  0100               	movlb	0	; () banked
 10468  004378  5D84               	subwf	readMAG@res& (0+255),w,b
 10469  00437A  B0D8               	btfsc	status,0,c
 10470  00437C  D002               	goto	u3940
 10471  00437E                     u3941:
 10472  00437E  0E01               	movlw	1
 10473  004380  D001               	goto	u3950
 10474  004382                     u3940:
 10475  004382  0E00               	movlw	0
 10476  004384                     u3950:
 10477  004384  0100               	movlb	0	; () banked
 10478  004386  6FDC               	movwf	_MAG_signal& (0+255),b
 10479  004388  6BDD               	clrf	(_MAG_signal+1)& (0+255),b
 10480                           
 10481                           ; BSR set to: 0
 10482  00438A  0012               	return		;funcret
 10483  00438C                     __end_of_readMAG:
 10484                           	opt stack 0
 10485                           tblptru	equ	0xFF8
 10486                           tblptrh	equ	0xFF7
 10487                           tblptrl	equ	0xFF6
 10488                           tablat	equ	0xFF5
 10489                           prodh	equ	0xFF4
 10490                           prodl	equ	0xFF3
 10491                           intcon	equ	0xFF2
 10492                           intcon2	equ	0xFF1
 10493                           intcon3	equ	0xFF0
 10494                           postinc0	equ	0xFEE
 10495                           wreg	equ	0xFE8
 10496                           postdec1	equ	0xFE5
 10497                           fsr1l	equ	0xFE1
 10498                           indf2	equ	0xFDF
 10499                           postinc2	equ	0xFDE
 10500                           postdec2	equ	0xFDD
 10501                           fsr2h	equ	0xFDA
 10502                           fsr2l	equ	0xFD9
 10503                           status	equ	0xFD8
 10504                           
 10505 ;; *************** function _readADC *****************
 10506 ;; Defined at:
 10507 ;;		line 15 in file "ADCFunctionality.c"
 10508 ;; Parameters:    Size  Location     Type
 10509 ;;  channel         1    wreg     unsigned char 
 10510 ;; Auto vars:     Size  Location     Type
 10511 ;;  channel         1    1[BANK0 ] unsigned char 
 10512 ;; Return value:  Size  Location     Type
 10513 ;;                  1    wreg      void 
 10514 ;; Registers used:
 10515 ;;		wreg, status,2, status,0, cstack
 10516 ;; Tracked objects:
 10517 ;;		On entry : 0/0
 10518 ;;		On exit  : 0/0
 10519 ;;		Unchanged: 0/0
 10520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10521 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10522 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10523 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10524 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10525 ;;Total ram usage:        2 bytes
 10526 ;; Hardware stack levels used:    1
 10527 ;; Hardware stack levels required when called:    7
 10528 ;; This function calls:
 10529 ;;		Nothing
 10530 ;; This function is called by:
 10531 ;;		_readIR
 10532 ;;		_readMAG
 10533 ;;		_sensorTest
 10534 ;; This function uses a non-reentrant model
 10535 ;;
 10536                           
 10537                           	psect	text39
 10538  0047BA                     __ptext39:
 10539                           	opt stack 0
 10540  0047BA                     _readADC:
 10541                           	opt stack 19
 10542                           
 10543                           ; BSR set to: 0
 10544                           ;incstack = 0
 10545                           ;readADC@channel stored from wreg
 10546  0047BA  0100               	movlb	0	; () banked
 10547  0047BC  6F81               	movwf	readADC@channel& (0+255),b
 10548                           
 10549                           ;ADCFunctionality.c: 17: ADCON0 = channel << 2;
 10550  0047BE  0100               	movlb	0	; () banked
 10551  0047C0  4581               	rlncf	readADC@channel& (0+255),w,b
 10552  0047C2  46E8               	rlncf	wreg,f,c
 10553  0047C4  0BFC               	andlw	252
 10554  0047C6  6EC2               	movwf	4034,c	;volatile
 10555                           
 10556                           ; BSR set to: 0
 10557                           ;ADCFunctionality.c: 18: ADCON0bits.ADON = 1;
 10558  0047C8  80C2               	bsf	4034,0,c	;volatile
 10559                           
 10560                           ; BSR set to: 0
 10561                           ;ADCFunctionality.c: 19: ADCON0bits.GO = 1;
 10562  0047CA  82C2               	bsf	4034,1,c	;volatile
 10563                           
 10564                           ;ADCFunctionality.c: 20: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(32000
      +                          000/4000.0)));}
 10565  0047CC  D009               	goto	l5402
 10566  0047CE                     l5400:
 10567  0047CE  0E34               	movlw	52
 10568  0047D0  0100               	movlb	0	; () banked
 10569  0047D2  6F80               	movwf	??_readADC& (0+255),b
 10570  0047D4  0EF1               	movlw	241
 10571  0047D6                     u7897:
 10572  0047D6  2EE8               	decfsz	wreg,f,c
 10573  0047D8  D7FE               	bra	u7897
 10574  0047DA  2F80               	decfsz	??_readADC& (0+255),f,b
 10575  0047DC  D7FC               	bra	u7897
 10576  0047DE  D000               	nop2	
 10577  0047E0                     l5402:
 10578  0047E0  A2C2               	btfss	4034,1,c	;volatile
 10579  0047E2  0012               	return	
 10580  0047E4  D7F4               	goto	l5400
 10581  0047E6                     __end_of_readADC:
 10582                           	opt stack 0
 10583                           tblptru	equ	0xFF8
 10584                           tblptrh	equ	0xFF7
 10585                           tblptrl	equ	0xFF6
 10586                           tablat	equ	0xFF5
 10587                           prodh	equ	0xFF4
 10588                           prodl	equ	0xFF3
 10589                           intcon	equ	0xFF2
 10590                           intcon2	equ	0xFF1
 10591                           intcon3	equ	0xFF0
 10592                           postinc0	equ	0xFEE
 10593                           wreg	equ	0xFE8
 10594                           postdec1	equ	0xFE5
 10595                           fsr1l	equ	0xFE1
 10596                           indf2	equ	0xFDF
 10597                           postinc2	equ	0xFDE
 10598                           postdec2	equ	0xFDD
 10599                           fsr2h	equ	0xFDA
 10600                           fsr2l	equ	0xFD9
 10601                           status	equ	0xFD8
 10602                           
 10603 ;; *************** function _algorithmTest *****************
 10604 ;; Defined at:
 10605 ;;		line 80 in file "Test.c"
 10606 ;; Parameters:    Size  Location     Type
 10607 ;;		None
 10608 ;; Auto vars:     Size  Location     Type
 10609 ;;		None
 10610 ;; Return value:  Size  Location     Type
 10611 ;;                  1    wreg      void 
 10612 ;; Registers used:
 10613 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10614 ;; Tracked objects:
 10615 ;;		On entry : 0/0
 10616 ;;		On exit  : 0/0
 10617 ;;		Unchanged: 0/0
 10618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10619 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10620 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10621 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10622 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10623 ;;Total ram usage:        2 bytes
 10624 ;; Hardware stack levels used:    1
 10625 ;; Hardware stack levels required when called:   10
 10626 ;; This function calls:
 10627 ;;		_lcdInst
 10628 ;;		_printf
 10629 ;; This function is called by:
 10630 ;;		_Test
 10631 ;; This function uses a non-reentrant model
 10632 ;;
 10633                           
 10634                           	psect	text40
 10635  00359E                     __ptext40:
 10636                           	opt stack 0
 10637  00359E                     _algorithmTest:
 10638                           	opt stack 19
 10639                           
 10640                           ;Test.c: 82: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 10641                           
 10642                           ;incstack = 0
 10643  00359E  0E01               	movlw	1
 10644  0035A0  ECD6  F024         	call	_lcdInst
 10645  0035A4  0E68               	movlw	104
 10646  0035A6  0100               	movlb	0	; () banked
 10647  0035A8  6FAB               	movwf	??_algorithmTest& (0+255),b
 10648  0035AA  0EE4               	movlw	228
 10649  0035AC                     u7907:
 10650  0035AC  2EE8               	decfsz	wreg,f,c
 10651  0035AE  D7FE               	bra	u7907
 10652  0035B0  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 10653  0035B2  D7FC               	bra	u7907
 10654  0035B4  F000               	nop	
 10655  0035B6  0E80               	movlw	128
 10656  0035B8  ECD6  F024         	call	_lcdInst
 10657                           
 10658                           ;Test.c: 83: printf("ALGORITHM TEST");
 10659  0035BC  0ED2               	movlw	low STR_70
 10660  0035BE  0100               	movlb	0	; () banked
 10661  0035C0  6F8E               	movwf	printf@f& (0+255),b
 10662  0035C2  0EFE               	movlw	high STR_70
 10663  0035C4  0100               	movlb	0	; () banked
 10664  0035C6  6F8F               	movwf	(printf@f+1)& (0+255),b
 10665  0035C8  ECB8  F008         	call	_printf	;wreg free
 10666                           
 10667                           ;Test.c: 84: lcdInst(0b11000000);;
 10668  0035CC  0EC0               	movlw	192
 10669  0035CE  ECD6  F024         	call	_lcdInst
 10670                           
 10671                           ;Test.c: 85: printf("PUSH TO START");
 10672  0035D2  0E0B               	movlw	low STR_71
 10673  0035D4  0100               	movlb	0	; () banked
 10674  0035D6  6F8E               	movwf	printf@f& (0+255),b
 10675  0035D8  0EFF               	movlw	high STR_71
 10676  0035DA  0100               	movlb	0	; () banked
 10677  0035DC  6F8F               	movwf	(printf@f+1)& (0+255),b
 10678  0035DE  ECB8  F008         	call	_printf	;wreg free
 10679                           
 10680                           ;Test.c: 86: _delay((unsigned long)((100)*(32000000/4000.0)));
 10681  0035E2  0E05               	movlw	5
 10682  0035E4  0100               	movlb	0	; () banked
 10683  0035E6  6FAC               	movwf	(??_algorithmTest+1)& (0+255),b
 10684  0035E8  0E0F               	movlw	15
 10685  0035EA  0100               	movlb	0	; () banked
 10686  0035EC  6FAB               	movwf	??_algorithmTest& (0+255),b
 10687  0035EE  0EF1               	movlw	241
 10688  0035F0                     u7917:
 10689  0035F0  2EE8               	decfsz	wreg,f,c
 10690  0035F2  D7FE               	bra	u7917
 10691  0035F4  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 10692  0035F6  D7FC               	bra	u7917
 10693  0035F8  2FAC               	decfsz	(??_algorithmTest+1)& (0+255),f,b
 10694  0035FA  D7FA               	bra	u7917
 10695  0035FC                     l1075:
 10696  0035FC  A281               	btfss	3969,1,c	;volatile
 10697  0035FE  D7FE               	goto	l1075
 10698  003600                     l1078:
 10699  003600  B281               	btfsc	3969,1,c	;volatile
 10700  003602  D7FE               	goto	l1078
 10701                           
 10702                           ;Test.c: 89: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 10703  003604  0E01               	movlw	1
 10704  003606  ECD6  F024         	call	_lcdInst
 10705  00360A  0E68               	movlw	104
 10706  00360C  0100               	movlb	0	; () banked
 10707  00360E  6FAB               	movwf	??_algorithmTest& (0+255),b
 10708  003610  0EE4               	movlw	228
 10709  003612                     u7927:
 10710  003612  2EE8               	decfsz	wreg,f,c
 10711  003614  D7FE               	bra	u7927
 10712  003616  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 10713  003618  D7FC               	bra	u7927
 10714  00361A  F000               	nop	
 10715  00361C  0E80               	movlw	128
 10716  00361E  ECD6  F024         	call	_lcdInst
 10717                           
 10718                           ;Test.c: 94: printf("ALG1: 9 POPNOTAB");
 10719  003622  0E5F               	movlw	low STR_72
 10720  003624  0100               	movlb	0	; () banked
 10721  003626  6F8E               	movwf	printf@f& (0+255),b
 10722  003628  0EFC               	movlw	high STR_72
 10723  00362A  0100               	movlb	0	; () banked
 10724  00362C  6F8F               	movwf	(printf@f+1)& (0+255),b
 10725  00362E  ECB8  F008         	call	_printf	;wreg free
 10726                           
 10727                           ;Test.c: 101: printf("ALG2: 12 CANS");
 10728  003632  0EEF               	movlw	low STR_73
 10729  003634  0100               	movlb	0	; () banked
 10730  003636  6F8E               	movwf	printf@f& (0+255),b
 10731  003638  0EFE               	movlw	high STR_73
 10732  00363A  0100               	movlb	0	; () banked
 10733  00363C  6F8F               	movwf	(printf@f+1)& (0+255),b
 10734  00363E  ECB8  F008         	call	_printf	;wreg free
 10735                           
 10736                           ;Test.c: 110: printf("ALG3: 1 CAN");
 10737  003642  0E4F               	movlw	low STR_74
 10738  003644  0100               	movlb	0	; () banked
 10739  003646  6F8E               	movwf	printf@f& (0+255),b
 10740  003648  0EFF               	movlw	high STR_74
 10741  00364A  0100               	movlb	0	; () banked
 10742  00364C  6F8F               	movwf	(printf@f+1)& (0+255),b
 10743  00364E  ECB8  F008         	call	_printf	;wreg free
 10744                           
 10745                           ;Test.c: 116: printf("ALG4: ALL CANS");
 10746  003652  0EB4               	movlw	low STR_75
 10747  003654  0100               	movlb	0	; () banked
 10748  003656  6F8E               	movwf	printf@f& (0+255),b
 10749  003658  0EFE               	movlw	high STR_75
 10750  00365A  0100               	movlb	0	; () banked
 10751  00365C  6F8F               	movwf	(printf@f+1)& (0+255),b
 10752  00365E  ECB8  F008         	call	_printf	;wreg free
 10753                           
 10754                           ;Test.c: 121: printf("ALG5: NO CANS");
 10755  003662  0EFD               	movlw	low STR_76
 10756  003664  0100               	movlb	0	; () banked
 10757  003666  6F8E               	movwf	printf@f& (0+255),b
 10758  003668  0EFE               	movlw	high STR_76
 10759  00366A  0100               	movlb	0	; () banked
 10760  00366C  6F8F               	movwf	(printf@f+1)& (0+255),b
 10761  00366E  ECB8  F008         	call	_printf	;wreg free
 10762  003672  0012               	return		;funcret
 10763  003674                     __end_of_algorithmTest:
 10764                           	opt stack 0
 10765                           tblptru	equ	0xFF8
 10766                           tblptrh	equ	0xFF7
 10767                           tblptrl	equ	0xFF6
 10768                           tablat	equ	0xFF5
 10769                           prodh	equ	0xFF4
 10770                           prodl	equ	0xFF3
 10771                           intcon	equ	0xFF2
 10772                           intcon2	equ	0xFF1
 10773                           intcon3	equ	0xFF0
 10774                           postinc0	equ	0xFEE
 10775                           wreg	equ	0xFE8
 10776                           postdec1	equ	0xFE5
 10777                           fsr1l	equ	0xFE1
 10778                           indf2	equ	0xFDF
 10779                           postinc2	equ	0xFDE
 10780                           postdec2	equ	0xFDD
 10781                           fsr2h	equ	0xFDA
 10782                           fsr2l	equ	0xFD9
 10783                           status	equ	0xFD8
 10784                           
 10785 ;; *************** function _actuatorTest *****************
 10786 ;; Defined at:
 10787 ;;		line 201 in file "Test.c"
 10788 ;; Parameters:    Size  Location     Type
 10789 ;;		None
 10790 ;; Auto vars:     Size  Location     Type
 10791 ;;  i               1   45[BANK0 ] unsigned char 
 10792 ;;  i               1   67[BANK0 ] unsigned char 
 10793 ;;  i               1   66[BANK0 ] unsigned char 
 10794 ;;  i               1   65[BANK0 ] unsigned char 
 10795 ;;  i               1   64[BANK0 ] unsigned char 
 10796 ;;  i               1   63[BANK0 ] unsigned char 
 10797 ;;  i               1   62[BANK0 ] unsigned char 
 10798 ;;  i               1   61[BANK0 ] unsigned char 
 10799 ;;  i               1   60[BANK0 ] unsigned char 
 10800 ;;  i               1   59[BANK0 ] unsigned char 
 10801 ;;  i               1   58[BANK0 ] unsigned char 
 10802 ;;  i               1   57[BANK0 ] unsigned char 
 10803 ;;  i               1   56[BANK0 ] unsigned char 
 10804 ;;  i               1   55[BANK0 ] unsigned char 
 10805 ;;  i               1   54[BANK0 ] unsigned char 
 10806 ;;  i               1   53[BANK0 ] unsigned char 
 10807 ;;  i               1   52[BANK0 ] unsigned char 
 10808 ;;  i               1   51[BANK0 ] unsigned char 
 10809 ;;  i               1   50[BANK0 ] unsigned char 
 10810 ;;  i               1   49[BANK0 ] unsigned char 
 10811 ;;  i               1   48[BANK0 ] unsigned char 
 10812 ;;  i               1   47[BANK0 ] unsigned char 
 10813 ;;  i               1   46[BANK0 ] unsigned char 
 10814 ;;  i               2   68[BANK0 ] int 
 10815 ;; Return value:  Size  Location     Type
 10816 ;;                  1    wreg      void 
 10817 ;; Registers used:
 10818 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10819 ;; Tracked objects:
 10820 ;;		On entry : 0/0
 10821 ;;		On exit  : 0/0
 10822 ;;		Unchanged: 0/0
 10823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10824 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10825 ;;      Locals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10826 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10827 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10828 ;;Total ram usage:       27 bytes
 10829 ;; Hardware stack levels used:    1
 10830 ;; Hardware stack levels required when called:   10
 10831 ;; This function calls:
 10832 ;;		_lcdInst
 10833 ;;		_printf
 10834 ;;		_updateServoPosition
 10835 ;; This function is called by:
 10836 ;;		_Test
 10837 ;; This function uses a non-reentrant model
 10838 ;;
 10839                           
 10840                           	psect	text41
 10841  000012                     __ptext41:
 10842                           	opt stack 0
 10843  000012                     _actuatorTest:
 10844                           	opt stack 19
 10845                           
 10846                           ;Test.c: 203: int i = 0;
 10847                           
 10848                           ;incstack = 0
 10849  000012  0E00               	movlw	0
 10850  000014  0100               	movlb	0	; () banked
 10851  000016  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 10852  000018  0E00               	movlw	0
 10853  00001A  6FC4               	movwf	actuatorTest@i& (0+255),b
 10854                           
 10855                           ; BSR set to: 0
 10856                           ;Test.c: 205: (INTCONbits.GIE = 1);
 10857  00001C  8EF2               	bsf	intcon,7,c	;volatile
 10858                           
 10859                           ; BSR set to: 0
 10860                           ;Test.c: 206: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10861  00001E  0E01               	movlw	1
 10862  000020  ECD6  F024         	call	_lcdInst
 10863  000024  0E68               	movlw	104
 10864  000026  0100               	movlb	0	; () banked
 10865  000028  6FAB               	movwf	??_actuatorTest& (0+255),b
 10866  00002A  0EE4               	movlw	228
 10867  00002C                     u7937:
 10868  00002C  2EE8               	decfsz	wreg,f,c
 10869  00002E  D7FE               	bra	u7937
 10870  000030  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10871  000032  D7FC               	bra	u7937
 10872  000034  F000               	nop	
 10873  000036  0E80               	movlw	128
 10874  000038  ECD6  F024         	call	_lcdInst
 10875                           
 10876                           ;Test.c: 207: printf("ACTUATORS");
 10877  00003C  0E91               	movlw	low STR_88
 10878  00003E  0100               	movlb	0	; () banked
 10879  000040  6F8E               	movwf	printf@f& (0+255),b
 10880  000042  0EFF               	movlw	high STR_88
 10881  000044  0100               	movlb	0	; () banked
 10882  000046  6F8F               	movwf	(printf@f+1)& (0+255),b
 10883  000048  ECB8  F008         	call	_printf	;wreg free
 10884                           
 10885                           ;Test.c: 208: lcdInst(0b11000000);;
 10886  00004C  0EC0               	movlw	192
 10887  00004E  ECD6  F024         	call	_lcdInst
 10888                           
 10889                           ;Test.c: 209: printf("PUSH TO START");
 10890  000052  0E0B               	movlw	low STR_71
 10891  000054  0100               	movlb	0	; () banked
 10892  000056  6F8E               	movwf	printf@f& (0+255),b
 10893  000058  0EFF               	movlw	high STR_71
 10894  00005A  0100               	movlb	0	; () banked
 10895  00005C  6F8F               	movwf	(printf@f+1)& (0+255),b
 10896  00005E  ECB8  F008         	call	_printf	;wreg free
 10897                           
 10898                           ;Test.c: 210: _delay((unsigned long)((100)*(32000000/4000.0)));
 10899  000062  0E05               	movlw	5
 10900  000064  0100               	movlb	0	; () banked
 10901  000066  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10902  000068  0E0F               	movlw	15
 10903  00006A  0100               	movlb	0	; () banked
 10904  00006C  6FAB               	movwf	??_actuatorTest& (0+255),b
 10905  00006E  0EF1               	movlw	241
 10906  000070                     u7947:
 10907  000070  2EE8               	decfsz	wreg,f,c
 10908  000072  D7FE               	bra	u7947
 10909  000074  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10910  000076  D7FC               	bra	u7947
 10911  000078  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10912  00007A  D7FA               	bra	u7947
 10913  00007C                     l1110:
 10914  00007C  A281               	btfss	3969,1,c	;volatile
 10915  00007E  D7FE               	goto	l1110
 10916  000080                     l1113:
 10917  000080  B281               	btfsc	3969,1,c	;volatile
 10918  000082  D7FE               	goto	l1113
 10919                           
 10920                           ;Test.c: 213: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10921  000084  0E01               	movlw	1
 10922  000086  ECD6  F024         	call	_lcdInst
 10923  00008A  0E68               	movlw	104
 10924  00008C  0100               	movlb	0	; () banked
 10925  00008E  6FAB               	movwf	??_actuatorTest& (0+255),b
 10926  000090  0EE4               	movlw	228
 10927  000092                     u7957:
 10928  000092  2EE8               	decfsz	wreg,f,c
 10929  000094  D7FE               	bra	u7957
 10930  000096  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10931  000098  D7FC               	bra	u7957
 10932  00009A  F000               	nop	
 10933  00009C  0E80               	movlw	128
 10934  00009E  ECD6  F024         	call	_lcdInst
 10935                           
 10936                           ;Test.c: 218: printf("TST: DC MOTORS");
 10937  0000A2  0EC3               	movlw	low STR_90
 10938  0000A4  0100               	movlb	0	; () banked
 10939  0000A6  6F8E               	movwf	printf@f& (0+255),b
 10940  0000A8  0EFE               	movlw	high STR_90
 10941  0000AA  0100               	movlb	0	; () banked
 10942  0000AC  6F8F               	movwf	(printf@f+1)& (0+255),b
 10943  0000AE  ECB8  F008         	call	_printf	;wreg free
 10944                           
 10945                           ;Test.c: 219: lcdInst(0b11000000);;
 10946  0000B2  0EC0               	movlw	192
 10947  0000B4  ECD6  F024         	call	_lcdInst
 10948                           
 10949                           ;Test.c: 220: printf("PIN RA5 HIGH.");
 10950  0000B8  0EE1               	movlw	low STR_91
 10951  0000BA  0100               	movlb	0	; () banked
 10952  0000BC  6F8E               	movwf	printf@f& (0+255),b
 10953  0000BE  0EFE               	movlw	high STR_91
 10954  0000C0  0100               	movlb	0	; () banked
 10955  0000C2  6F8F               	movwf	(printf@f+1)& (0+255),b
 10956  0000C4  ECB8  F008         	call	_printf	;wreg free
 10957                           
 10958                           ;Test.c: 221: LATAbits.LATA5 = 1;
 10959  0000C8  8A89               	bsf	3977,5,c	;volatile
 10960                           
 10961                           ;Test.c: 222: for(i=0;i<5;i++){for(char i=0;i<100;i++){_delay((unsigned long)((10)*(3200
      +                          0000/4000.0)));};}
 10962  0000CA  0E00               	movlw	0
 10963  0000CC  0100               	movlb	0	; () banked
 10964  0000CE  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 10965  0000D0  0E00               	movlw	0
 10966  0000D2  6FC4               	movwf	actuatorTest@i& (0+255),b
 10967                           
 10968                           ; BSR set to: 0
 10969  0000D4  0100               	movlb	0	; () banked
 10970  0000D6  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10971  0000D8  D008               	goto	l6884
 10972  0000DA  0100               	movlb	0	; () banked
 10973  0000DC  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10974  0000DE  E123               	bnz	l1117
 10975  0000E0  0E05               	movlw	5
 10976  0000E2  0100               	movlb	0	; () banked
 10977  0000E4  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 10978  0000E6  B0D8               	btfsc	status,0,c
 10979  0000E8  D01E               	goto	l1117
 10980  0000EA                     l6884:
 10981                           
 10982                           ; BSR set to: 0
 10983  0000EA  0E00               	movlw	0
 10984  0000EC  0100               	movlb	0	; () banked
 10985  0000EE  6FAD               	movwf	actuatorTest@i_1643& (0+255),b
 10986  0000F0                     l6886:
 10987                           
 10988                           ; BSR set to: 0
 10989  0000F0  0E63               	movlw	99
 10990  0000F2  0100               	movlb	0	; () banked
 10991  0000F4  65AD               	cpfsgt	actuatorTest@i_1643& (0+255),b
 10992  0000F6  D001               	goto	l6890
 10993  0000F8  D00C               	goto	l6894
 10994  0000FA                     l6890:
 10995                           
 10996                           ; BSR set to: 0
 10997  0000FA  0E68               	movlw	104
 10998  0000FC  0100               	movlb	0	; () banked
 10999  0000FE  6FAB               	movwf	??_actuatorTest& (0+255),b
 11000  000100  0EE4               	movlw	228
 11001  000102                     u7967:
 11002  000102  2EE8               	decfsz	wreg,f,c
 11003  000104  D7FE               	bra	u7967
 11004  000106  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11005  000108  D7FC               	bra	u7967
 11006  00010A  F000               	nop	
 11007  00010C  0100               	movlb	0	; () banked
 11008  00010E  2BAD               	incf	actuatorTest@i_1643& (0+255),f,b
 11009  000110  D7EF               	goto	l6886
 11010  000112                     l6894:
 11011                           
 11012                           ; BSR set to: 0
 11013  000112  0100               	movlb	0	; () banked
 11014  000114  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 11015  000116  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 11016                           
 11017                           ; BSR set to: 0
 11018  000118  0100               	movlb	0	; () banked
 11019  00011A  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11020  00011C  D7E6               	goto	l6884
 11021  00011E  0100               	movlb	0	; () banked
 11022  000120  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11023  000122  E101               	bnz	u5320
 11024  000124  D7DD               	goto	L7
 11025  000126                     u5320:
 11026  000126                     l1117:
 11027                           
 11028                           ; BSR set to: 0
 11029                           ;Test.c: 223: LATAbits.LATA5 = 0;
 11030  000126  9A89               	bcf	3977,5,c	;volatile
 11031                           
 11032                           ; BSR set to: 0
 11033                           ;Test.c: 224: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11034  000128  0E01               	movlw	1
 11035  00012A  ECD6  F024         	call	_lcdInst
 11036  00012E  0E68               	movlw	104
 11037  000130  0100               	movlb	0	; () banked
 11038  000132  6FAB               	movwf	??_actuatorTest& (0+255),b
 11039  000134  0EE4               	movlw	228
 11040  000136                     u7977:
 11041  000136  2EE8               	decfsz	wreg,f,c
 11042  000138  D7FE               	bra	u7977
 11043  00013A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11044  00013C  D7FC               	bra	u7977
 11045  00013E  F000               	nop	
 11046  000140  0E80               	movlw	128
 11047  000142  ECD6  F024         	call	_lcdInst
 11048                           
 11049                           ;Test.c: 230: printf("TST: COND SOLN'D");
 11050  000146  0E81               	movlw	low STR_92
 11051  000148  0100               	movlb	0	; () banked
 11052  00014A  6F8E               	movwf	printf@f& (0+255),b
 11053  00014C  0EFC               	movlw	high STR_92
 11054  00014E  0100               	movlb	0	; () banked
 11055  000150  6F8F               	movwf	(printf@f+1)& (0+255),b
 11056  000152  ECB8  F008         	call	_printf	;wreg free
 11057                           
 11058                           ;Test.c: 231: lcdInst(0b11000000);;
 11059  000156  0EC0               	movlw	192
 11060  000158  ECD6  F024         	call	_lcdInst
 11061                           
 11062                           ;Test.c: 232: printf("PIN RA3...");
 11063  00015C  0E5B               	movlw	low STR_93
 11064  00015E  0100               	movlb	0	; () banked
 11065  000160  6F8E               	movwf	printf@f& (0+255),b
 11066  000162  0EFF               	movlw	high STR_93
 11067  000164  0100               	movlb	0	; () banked
 11068  000166  6F8F               	movwf	(printf@f+1)& (0+255),b
 11069  000168  ECB8  F008         	call	_printf	;wreg free
 11070                           
 11071                           ;Test.c: 233: for(i=0;i<5;i++){
 11072  00016C  0E00               	movlw	0
 11073  00016E  0100               	movlb	0	; () banked
 11074  000170  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 11075  000172  0E00               	movlw	0
 11076  000174  6FC4               	movwf	actuatorTest@i& (0+255),b
 11077                           
 11078                           ; BSR set to: 0
 11079  000176  0100               	movlb	0	; () banked
 11080  000178  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11081  00017A  D008               	goto	l1120
 11082  00017C  0100               	movlb	0	; () banked
 11083  00017E  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11084  000180  E12C               	bnz	l1121
 11085  000182  0E05               	movlw	5
 11086  000184  0100               	movlb	0	; () banked
 11087  000186  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 11088  000188  B0D8               	btfsc	status,0,c
 11089  00018A  D027               	goto	l1121
 11090  00018C                     l1120:
 11091                           
 11092                           ; BSR set to: 0
 11093                           ;Test.c: 234: LATAbits.LATA3 = 1;
 11094  00018C  8689               	bsf	3977,3,c	;volatile
 11095                           
 11096                           ; BSR set to: 0
 11097                           ;Test.c: 235: _delay((unsigned long)((300)*(32000000/4000.0)));
 11098  00018E  0E0D               	movlw	13
 11099  000190  0100               	movlb	0	; () banked
 11100  000192  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 11101  000194  0E2D               	movlw	45
 11102  000196  0100               	movlb	0	; () banked
 11103  000198  6FAB               	movwf	??_actuatorTest& (0+255),b
 11104  00019A  0ED7               	movlw	215
 11105  00019C                     u7987:
 11106  00019C  2EE8               	decfsz	wreg,f,c
 11107  00019E  D7FE               	bra	u7987
 11108  0001A0  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11109  0001A2  D7FC               	bra	u7987
 11110  0001A4  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 11111  0001A6  D7FA               	bra	u7987
 11112  0001A8  D000               	nop2	
 11113                           
 11114                           ;Test.c: 236: LATAbits.LATA3 = ~1;
 11115  0001AA  9689               	bcf	3977,3,c	;volatile
 11116                           
 11117                           ;Test.c: 237: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 11118  0001AC  0E1D               	movlw	29
 11119  0001AE  0100               	movlb	0	; () banked
 11120  0001B0  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 11121  0001B2  0E69               	movlw	105
 11122  0001B4  0100               	movlb	0	; () banked
 11123  0001B6  6FAB               	movwf	??_actuatorTest& (0+255),b
 11124  0001B8  0EA5               	movlw	165
 11125  0001BA                     u7997:
 11126  0001BA  2EE8               	decfsz	wreg,f,c
 11127  0001BC  D7FE               	bra	u7997
 11128  0001BE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11129  0001C0  D7FC               	bra	u7997
 11130  0001C2  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 11131  0001C4  D7FA               	bra	u7997
 11132  0001C6  0100               	movlb	0	; () banked
 11133  0001C8  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 11134  0001CA  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 11135  0001CC  0100               	movlb	0	; () banked
 11136  0001CE  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11137  0001D0  D7DD               	goto	l1120
 11138  0001D2  0100               	movlb	0	; () banked
 11139  0001D4  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11140  0001D6  E101               	bnz	u5340
 11141  0001D8  D7D4               	goto	L8
 11142  0001DA                     u5340:
 11143  0001DA                     l1121:
 11144                           
 11145                           ; BSR set to: 0
 11146                           ;Test.c: 238: }
 11147                           ;Test.c: 239: LATAbits.LATA3 = ~1;
 11148  0001DA  9689               	bcf	3977,3,c	;volatile
 11149                           
 11150                           ; BSR set to: 0
 11151                           ;Test.c: 240: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11152  0001DC  0E01               	movlw	1
 11153  0001DE  ECD6  F024         	call	_lcdInst
 11154  0001E2  0E68               	movlw	104
 11155  0001E4  0100               	movlb	0	; () banked
 11156  0001E6  6FAB               	movwf	??_actuatorTest& (0+255),b
 11157  0001E8  0EE4               	movlw	228
 11158  0001EA                     u8007:
 11159  0001EA  2EE8               	decfsz	wreg,f,c
 11160  0001EC  D7FE               	bra	u8007
 11161  0001EE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11162  0001F0  D7FC               	bra	u8007
 11163  0001F2  F000               	nop	
 11164  0001F4  0E80               	movlw	128
 11165  0001F6  ECD6  F024         	call	_lcdInst
 11166                           
 11167                           ;Test.c: 246: printf("TST: PUSH SOLN'D");
 11168  0001FA  0E92               	movlw	low STR_94
 11169  0001FC  0100               	movlb	0	; () banked
 11170  0001FE  6F8E               	movwf	printf@f& (0+255),b
 11171  000200  0EFC               	movlw	high STR_94
 11172  000202  0100               	movlb	0	; () banked
 11173  000204  6F8F               	movwf	(printf@f+1)& (0+255),b
 11174  000206  ECB8  F008         	call	_printf	;wreg free
 11175                           
 11176                           ;Test.c: 247: lcdInst(0b11000000);;
 11177  00020A  0EC0               	movlw	192
 11178  00020C  ECD6  F024         	call	_lcdInst
 11179                           
 11180                           ;Test.c: 248: printf("PIN RA4...");
 11181  000210  0E66               	movlw	low STR_95
 11182  000212  0100               	movlb	0	; () banked
 11183  000214  6F8E               	movwf	printf@f& (0+255),b
 11184  000216  0EFF               	movlw	high STR_95
 11185  000218  0100               	movlb	0	; () banked
 11186  00021A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11187  00021C  ECB8  F008         	call	_printf	;wreg free
 11188                           
 11189                           ;Test.c: 249: for(i=0;i<5;i++){
 11190  000220  0E00               	movlw	0
 11191  000222  0100               	movlb	0	; () banked
 11192  000224  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 11193  000226  0E00               	movlw	0
 11194  000228  6FC4               	movwf	actuatorTest@i& (0+255),b
 11195                           
 11196                           ; BSR set to: 0
 11197  00022A  0100               	movlb	0	; () banked
 11198  00022C  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11199  00022E  D008               	goto	l1122
 11200  000230  0100               	movlb	0	; () banked
 11201  000232  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11202  000234  E12C               	bnz	l1123
 11203  000236  0E05               	movlw	5
 11204  000238  0100               	movlb	0	; () banked
 11205  00023A  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 11206  00023C  B0D8               	btfsc	status,0,c
 11207  00023E  D027               	goto	l1123
 11208  000240                     l1122:
 11209                           
 11210                           ; BSR set to: 0
 11211                           ;Test.c: 250: LATAbits.LATA4 = 1;
 11212  000240  8889               	bsf	3977,4,c	;volatile
 11213                           
 11214                           ; BSR set to: 0
 11215                           ;Test.c: 251: _delay((unsigned long)((300)*(32000000/4000.0)));
 11216  000242  0E0D               	movlw	13
 11217  000244  0100               	movlb	0	; () banked
 11218  000246  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 11219  000248  0E2D               	movlw	45
 11220  00024A  0100               	movlb	0	; () banked
 11221  00024C  6FAB               	movwf	??_actuatorTest& (0+255),b
 11222  00024E  0ED7               	movlw	215
 11223  000250                     u8017:
 11224  000250  2EE8               	decfsz	wreg,f,c
 11225  000252  D7FE               	bra	u8017
 11226  000254  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11227  000256  D7FC               	bra	u8017
 11228  000258  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 11229  00025A  D7FA               	bra	u8017
 11230  00025C  D000               	nop2	
 11231                           
 11232                           ;Test.c: 252: LATAbits.LATA4 = ~1;
 11233  00025E  9889               	bcf	3977,4,c	;volatile
 11234                           
 11235                           ;Test.c: 253: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 11236  000260  0E1D               	movlw	29
 11237  000262  0100               	movlb	0	; () banked
 11238  000264  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 11239  000266  0E69               	movlw	105
 11240  000268  0100               	movlb	0	; () banked
 11241  00026A  6FAB               	movwf	??_actuatorTest& (0+255),b
 11242  00026C  0EA5               	movlw	165
 11243  00026E                     u8027:
 11244  00026E  2EE8               	decfsz	wreg,f,c
 11245  000270  D7FE               	bra	u8027
 11246  000272  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11247  000274  D7FC               	bra	u8027
 11248  000276  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 11249  000278  D7FA               	bra	u8027
 11250  00027A  0100               	movlb	0	; () banked
 11251  00027C  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 11252  00027E  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 11253  000280  0100               	movlb	0	; () banked
 11254  000282  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11255  000284  D7DD               	goto	l1122
 11256  000286  0100               	movlb	0	; () banked
 11257  000288  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11258  00028A  E101               	bnz	u5360
 11259  00028C  D7D4               	goto	L9
 11260  00028E                     u5360:
 11261  00028E                     l1123:
 11262                           
 11263                           ; BSR set to: 0
 11264                           ;Test.c: 254: }
 11265                           ;Test.c: 255: LATAbits.LATA4 = ~1;
 11266  00028E  9889               	bcf	3977,4,c	;volatile
 11267                           
 11268                           ; BSR set to: 0
 11269                           ;Test.c: 256: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11270  000290  0E01               	movlw	1
 11271  000292  ECD6  F024         	call	_lcdInst
 11272  000296  0E68               	movlw	104
 11273  000298  0100               	movlb	0	; () banked
 11274  00029A  6FAB               	movwf	??_actuatorTest& (0+255),b
 11275  00029C  0EE4               	movlw	228
 11276  00029E                     u8037:
 11277  00029E  2EE8               	decfsz	wreg,f,c
 11278  0002A0  D7FE               	bra	u8037
 11279  0002A2  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11280  0002A4  D7FC               	bra	u8037
 11281  0002A6  F000               	nop	
 11282  0002A8  0E80               	movlw	128
 11283  0002AA  ECD6  F024         	call	_lcdInst
 11284                           
 11285                           ;Test.c: 259: machine_state = Sorting_state;
 11286  0002AE  0E01               	movlw	1
 11287  0002B0  0100               	movlb	0	; () banked
 11288  0002B2  6FFC               	movwf	_machine_state& (0+255),b
 11289                           
 11290                           ; BSR set to: 0
 11291                           ;Test.c: 260: was_low_1 = 0;
 11292  0002B4  0E00               	movlw	0
 11293  0002B6  6E7A               	movwf	_was_low_1+1,c	;volatile
 11294  0002B8  0E00               	movlw	0
 11295  0002BA  6E79               	movwf	_was_low_1,c	;volatile
 11296                           
 11297                           ; BSR set to: 0
 11298                           ;Test.c: 261: was_low_1 = 0;
 11299  0002BC  0E00               	movlw	0
 11300  0002BE  6E7A               	movwf	_was_low_1+1,c	;volatile
 11301  0002C0  0E00               	movlw	0
 11302  0002C2  6E79               	movwf	_was_low_1,c	;volatile
 11303                           
 11304                           ; BSR set to: 0
 11305                           ;Test.c: 268: printf("TST: PAN SERVO");
 11306  0002C4  0EA5               	movlw	low STR_96
 11307  0002C6  0100               	movlb	0	; () banked
 11308  0002C8  6F8E               	movwf	printf@f& (0+255),b
 11309  0002CA  0EFE               	movlw	high STR_96
 11310  0002CC  0100               	movlb	0	; () banked
 11311  0002CE  6F8F               	movwf	(printf@f+1)& (0+255),b
 11312  0002D0  ECB8  F008         	call	_printf	;wreg free
 11313                           
 11314                           ;Test.c: 269: lcdInst(0b11000000);;
 11315  0002D4  0EC0               	movlw	192
 11316  0002D6  ECD6  F024         	call	_lcdInst
 11317                           
 11318                           ;Test.c: 270: printf("MIDDLE -- 2s    ");
 11319  0002DA  0E0A               	movlw	low STR_97
 11320  0002DC  0100               	movlb	0	; () banked
 11321  0002DE  6F8E               	movwf	printf@f& (0+255),b
 11322  0002E0  0EFC               	movlw	high STR_97
 11323  0002E2  0100               	movlb	0	; () banked
 11324  0002E4  6F8F               	movwf	(printf@f+1)& (0+255),b
 11325  0002E6  ECB8  F008         	call	_printf	;wreg free
 11326                           
 11327                           ;Test.c: 271: updateServoPosition(1200, 1);
 11328  0002EA  0E04               	movlw	4
 11329  0002EC  0100               	movlb	0	; () banked
 11330  0002EE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11331  0002F0  0EB0               	movlw	176
 11332  0002F2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11333  0002F4  0E00               	movlw	0
 11334  0002F6  0100               	movlb	0	; () banked
 11335  0002F8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11336  0002FA  0E01               	movlw	1
 11337  0002FC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11338  0002FE  EC0F  F01F         	call	_updateServoPosition	;wreg free
 11339                           
 11340                           ;Test.c: 272: TMR1ON = 1;
 11341  000302  80CD               	bsf	4045,0,c	;volatile
 11342                           
 11343                           ;Test.c: 273: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11344  000304  0E00               	movlw	0
 11345  000306  0100               	movlb	0	; () banked
 11346  000308  6FAE               	movwf	actuatorTest@i_1650& (0+255),b
 11347  00030A                     l6970:
 11348                           
 11349                           ; BSR set to: 0
 11350  00030A  0E63               	movlw	99
 11351  00030C  0100               	movlb	0	; () banked
 11352  00030E  65AE               	cpfsgt	actuatorTest@i_1650& (0+255),b
 11353  000310  D001               	goto	l6974
 11354  000312  D00C               	goto	l6978
 11355  000314                     l6974:
 11356                           
 11357                           ; BSR set to: 0
 11358  000314  0E68               	movlw	104
 11359  000316  0100               	movlb	0	; () banked
 11360  000318  6FAB               	movwf	??_actuatorTest& (0+255),b
 11361  00031A  0EE4               	movlw	228
 11362  00031C                     u8047:
 11363  00031C  2EE8               	decfsz	wreg,f,c
 11364  00031E  D7FE               	bra	u8047
 11365  000320  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11366  000322  D7FC               	bra	u8047
 11367  000324  F000               	nop	
 11368  000326  0100               	movlb	0	; () banked
 11369  000328  2BAE               	incf	actuatorTest@i_1650& (0+255),f,b
 11370  00032A  D7EF               	goto	l6970
 11371  00032C                     l6978:
 11372                           
 11373                           ; BSR set to: 0
 11374  00032C  0E00               	movlw	0
 11375  00032E  0100               	movlb	0	; () banked
 11376  000330  6FAF               	movwf	actuatorTest@i_1651& (0+255),b
 11377  000332                     l6980:
 11378                           
 11379                           ; BSR set to: 0
 11380  000332  0E63               	movlw	99
 11381  000334  0100               	movlb	0	; () banked
 11382  000336  65AF               	cpfsgt	actuatorTest@i_1651& (0+255),b
 11383  000338  D001               	goto	l6984
 11384  00033A  D00C               	goto	l6988
 11385  00033C                     l6984:
 11386                           
 11387                           ; BSR set to: 0
 11388  00033C  0E68               	movlw	104
 11389  00033E  0100               	movlb	0	; () banked
 11390  000340  6FAB               	movwf	??_actuatorTest& (0+255),b
 11391  000342  0EE4               	movlw	228
 11392  000344                     u8057:
 11393  000344  2EE8               	decfsz	wreg,f,c
 11394  000346  D7FE               	bra	u8057
 11395  000348  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11396  00034A  D7FC               	bra	u8057
 11397  00034C  F000               	nop	
 11398  00034E  0100               	movlb	0	; () banked
 11399  000350  2BAF               	incf	actuatorTest@i_1651& (0+255),f,b
 11400  000352  D7EF               	goto	l6980
 11401  000354                     l6988:
 11402                           
 11403                           ; BSR set to: 0
 11404                           ;Test.c: 275: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11405  000354  0E80               	movlw	128
 11406  000356  ECD6  F024         	call	_lcdInst
 11407  00035A  0EC0               	movlw	192
 11408  00035C  ECD6  F024         	call	_lcdInst
 11409                           
 11410                           ;Test.c: 276: printf("RIGHT -- 2s     ");
 11411  000360  0EF9               	movlw	low STR_98
 11412  000362  0100               	movlb	0	; () banked
 11413  000364  6F8E               	movwf	printf@f& (0+255),b
 11414  000366  0EFB               	movlw	high STR_98
 11415  000368  0100               	movlb	0	; () banked
 11416  00036A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11417  00036C  ECB8  F008         	call	_printf	;wreg free
 11418                           
 11419                           ;Test.c: 277: updateServoPosition(500, 1);
 11420  000370  0E01               	movlw	1
 11421  000372  0100               	movlb	0	; () banked
 11422  000374  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11423  000376  0EF4               	movlw	244
 11424  000378  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11425  00037A  0E00               	movlw	0
 11426  00037C  0100               	movlb	0	; () banked
 11427  00037E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11428  000380  0E01               	movlw	1
 11429  000382  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11430  000384  EC0F  F01F         	call	_updateServoPosition	;wreg free
 11431                           
 11432                           ;Test.c: 278: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11433  000388  0E00               	movlw	0
 11434  00038A  0100               	movlb	0	; () banked
 11435  00038C  6FB0               	movwf	actuatorTest@i_1653& (0+255),b
 11436  00038E                     l6996:
 11437                           
 11438                           ; BSR set to: 0
 11439  00038E  0E63               	movlw	99
 11440  000390  0100               	movlb	0	; () banked
 11441  000392  65B0               	cpfsgt	actuatorTest@i_1653& (0+255),b
 11442  000394  D001               	goto	l7000
 11443  000396  D00C               	goto	l7004
 11444  000398                     l7000:
 11445                           
 11446                           ; BSR set to: 0
 11447  000398  0E68               	movlw	104
 11448  00039A  0100               	movlb	0	; () banked
 11449  00039C  6FAB               	movwf	??_actuatorTest& (0+255),b
 11450  00039E  0EE4               	movlw	228
 11451  0003A0                     u8067:
 11452  0003A0  2EE8               	decfsz	wreg,f,c
 11453  0003A2  D7FE               	bra	u8067
 11454  0003A4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11455  0003A6  D7FC               	bra	u8067
 11456  0003A8  F000               	nop	
 11457  0003AA  0100               	movlb	0	; () banked
 11458  0003AC  2BB0               	incf	actuatorTest@i_1653& (0+255),f,b
 11459  0003AE  D7EF               	goto	l6996
 11460  0003B0                     l7004:
 11461                           
 11462                           ; BSR set to: 0
 11463  0003B0  0E00               	movlw	0
 11464  0003B2  0100               	movlb	0	; () banked
 11465  0003B4  6FB1               	movwf	actuatorTest@i_1654& (0+255),b
 11466  0003B6                     l7006:
 11467                           
 11468                           ; BSR set to: 0
 11469  0003B6  0E63               	movlw	99
 11470  0003B8  0100               	movlb	0	; () banked
 11471  0003BA  65B1               	cpfsgt	actuatorTest@i_1654& (0+255),b
 11472  0003BC  D001               	goto	l7010
 11473  0003BE  D00C               	goto	l7014
 11474  0003C0                     l7010:
 11475                           
 11476                           ; BSR set to: 0
 11477  0003C0  0E68               	movlw	104
 11478  0003C2  0100               	movlb	0	; () banked
 11479  0003C4  6FAB               	movwf	??_actuatorTest& (0+255),b
 11480  0003C6  0EE4               	movlw	228
 11481  0003C8                     u8077:
 11482  0003C8  2EE8               	decfsz	wreg,f,c
 11483  0003CA  D7FE               	bra	u8077
 11484  0003CC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11485  0003CE  D7FC               	bra	u8077
 11486  0003D0  F000               	nop	
 11487  0003D2  0100               	movlb	0	; () banked
 11488  0003D4  2BB1               	incf	actuatorTest@i_1654& (0+255),f,b
 11489  0003D6  D7EF               	goto	l7006
 11490  0003D8                     l7014:
 11491                           
 11492                           ; BSR set to: 0
 11493                           ;Test.c: 280: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11494  0003D8  0E80               	movlw	128
 11495  0003DA  ECD6  F024         	call	_lcdInst
 11496  0003DE  0EC0               	movlw	192
 11497  0003E0  ECD6  F024         	call	_lcdInst
 11498                           
 11499                           ;Test.c: 281: printf("LEFT -- 2s      ");
 11500  0003E4  0ED7               	movlw	low STR_99
 11501  0003E6  0100               	movlb	0	; () banked
 11502  0003E8  6F8E               	movwf	printf@f& (0+255),b
 11503  0003EA  0EFB               	movlw	high STR_99
 11504  0003EC  0100               	movlb	0	; () banked
 11505  0003EE  6F8F               	movwf	(printf@f+1)& (0+255),b
 11506  0003F0  ECB8  F008         	call	_printf	;wreg free
 11507                           
 11508                           ;Test.c: 282: updateServoPosition(2100, 1);
 11509  0003F4  0E08               	movlw	8
 11510  0003F6  0100               	movlb	0	; () banked
 11511  0003F8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11512  0003FA  0E34               	movlw	52
 11513  0003FC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11514  0003FE  0E00               	movlw	0
 11515  000400  0100               	movlb	0	; () banked
 11516  000402  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11517  000404  0E01               	movlw	1
 11518  000406  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11519  000408  EC0F  F01F         	call	_updateServoPosition	;wreg free
 11520                           
 11521                           ;Test.c: 283: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11522  00040C  0E00               	movlw	0
 11523  00040E  0100               	movlb	0	; () banked
 11524  000410  6FB2               	movwf	actuatorTest@i_1656& (0+255),b
 11525  000412                     l7022:
 11526                           
 11527                           ; BSR set to: 0
 11528  000412  0E63               	movlw	99
 11529  000414  0100               	movlb	0	; () banked
 11530  000416  65B2               	cpfsgt	actuatorTest@i_1656& (0+255),b
 11531  000418  D001               	goto	l7026
 11532  00041A  D00C               	goto	l7030
 11533  00041C                     l7026:
 11534                           
 11535                           ; BSR set to: 0
 11536  00041C  0E68               	movlw	104
 11537  00041E  0100               	movlb	0	; () banked
 11538  000420  6FAB               	movwf	??_actuatorTest& (0+255),b
 11539  000422  0EE4               	movlw	228
 11540  000424                     u8087:
 11541  000424  2EE8               	decfsz	wreg,f,c
 11542  000426  D7FE               	bra	u8087
 11543  000428  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11544  00042A  D7FC               	bra	u8087
 11545  00042C  F000               	nop	
 11546  00042E  0100               	movlb	0	; () banked
 11547  000430  2BB2               	incf	actuatorTest@i_1656& (0+255),f,b
 11548  000432  D7EF               	goto	l7022
 11549  000434                     l7030:
 11550                           
 11551                           ; BSR set to: 0
 11552  000434  0E00               	movlw	0
 11553  000436  0100               	movlb	0	; () banked
 11554  000438  6FB3               	movwf	actuatorTest@i_1657& (0+255),b
 11555  00043A                     l7032:
 11556                           
 11557                           ; BSR set to: 0
 11558  00043A  0E63               	movlw	99
 11559  00043C  0100               	movlb	0	; () banked
 11560  00043E  65B3               	cpfsgt	actuatorTest@i_1657& (0+255),b
 11561  000440  D001               	goto	l7036
 11562  000442  D00C               	goto	l7040
 11563  000444                     l7036:
 11564                           
 11565                           ; BSR set to: 0
 11566  000444  0E68               	movlw	104
 11567  000446  0100               	movlb	0	; () banked
 11568  000448  6FAB               	movwf	??_actuatorTest& (0+255),b
 11569  00044A  0EE4               	movlw	228
 11570  00044C                     u8097:
 11571  00044C  2EE8               	decfsz	wreg,f,c
 11572  00044E  D7FE               	bra	u8097
 11573  000450  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11574  000452  D7FC               	bra	u8097
 11575  000454  F000               	nop	
 11576  000456  0100               	movlb	0	; () banked
 11577  000458  2BB3               	incf	actuatorTest@i_1657& (0+255),f,b
 11578  00045A  D7EF               	goto	l7032
 11579  00045C                     l7040:
 11580                           
 11581                           ; BSR set to: 0
 11582                           ;Test.c: 285: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11583  00045C  0E80               	movlw	128
 11584  00045E  ECD6  F024         	call	_lcdInst
 11585  000462  0EC0               	movlw	192
 11586  000464  ECD6  F024         	call	_lcdInst
 11587                           
 11588                           ;Test.c: 286: printf("MID-LEFT -- 2s  ");
 11589  000468  0E2C               	movlw	low STR_100
 11590  00046A  0100               	movlb	0	; () banked
 11591  00046C  6F8E               	movwf	printf@f& (0+255),b
 11592  00046E  0EFC               	movlw	high STR_100
 11593  000470  0100               	movlb	0	; () banked
 11594  000472  6F8F               	movwf	(printf@f+1)& (0+255),b
 11595  000474  ECB8  F008         	call	_printf	;wreg free
 11596                           
 11597                           ;Test.c: 287: updateServoPosition(1670, 1);
 11598  000478  0E06               	movlw	6
 11599  00047A  0100               	movlb	0	; () banked
 11600  00047C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11601  00047E  0E86               	movlw	134
 11602  000480  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11603  000482  0E00               	movlw	0
 11604  000484  0100               	movlb	0	; () banked
 11605  000486  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11606  000488  0E01               	movlw	1
 11607  00048A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11608  00048C  EC0F  F01F         	call	_updateServoPosition	;wreg free
 11609                           
 11610                           ;Test.c: 288: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11611  000490  0E00               	movlw	0
 11612  000492  0100               	movlb	0	; () banked
 11613  000494  6FB4               	movwf	actuatorTest@i_1659& (0+255),b
 11614  000496                     l7048:
 11615                           
 11616                           ; BSR set to: 0
 11617  000496  0E63               	movlw	99
 11618  000498  0100               	movlb	0	; () banked
 11619  00049A  65B4               	cpfsgt	actuatorTest@i_1659& (0+255),b
 11620  00049C  D001               	goto	l7052
 11621  00049E  D00C               	goto	l7056
 11622  0004A0                     l7052:
 11623                           
 11624                           ; BSR set to: 0
 11625  0004A0  0E68               	movlw	104
 11626  0004A2  0100               	movlb	0	; () banked
 11627  0004A4  6FAB               	movwf	??_actuatorTest& (0+255),b
 11628  0004A6  0EE4               	movlw	228
 11629  0004A8                     u8107:
 11630  0004A8  2EE8               	decfsz	wreg,f,c
 11631  0004AA  D7FE               	bra	u8107
 11632  0004AC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11633  0004AE  D7FC               	bra	u8107
 11634  0004B0  F000               	nop	
 11635  0004B2  0100               	movlb	0	; () banked
 11636  0004B4  2BB4               	incf	actuatorTest@i_1659& (0+255),f,b
 11637  0004B6  D7EF               	goto	l7048
 11638  0004B8                     l7056:
 11639                           
 11640                           ; BSR set to: 0
 11641  0004B8  0E00               	movlw	0
 11642  0004BA  0100               	movlb	0	; () banked
 11643  0004BC  6FB5               	movwf	actuatorTest@i_1660& (0+255),b
 11644  0004BE                     l7058:
 11645                           
 11646                           ; BSR set to: 0
 11647  0004BE  0E63               	movlw	99
 11648  0004C0  0100               	movlb	0	; () banked
 11649  0004C2  65B5               	cpfsgt	actuatorTest@i_1660& (0+255),b
 11650  0004C4  D001               	goto	l7062
 11651  0004C6  D00C               	goto	l7066
 11652  0004C8                     l7062:
 11653                           
 11654                           ; BSR set to: 0
 11655  0004C8  0E68               	movlw	104
 11656  0004CA  0100               	movlb	0	; () banked
 11657  0004CC  6FAB               	movwf	??_actuatorTest& (0+255),b
 11658  0004CE  0EE4               	movlw	228
 11659  0004D0                     u8117:
 11660  0004D0  2EE8               	decfsz	wreg,f,c
 11661  0004D2  D7FE               	bra	u8117
 11662  0004D4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11663  0004D6  D7FC               	bra	u8117
 11664  0004D8  F000               	nop	
 11665  0004DA  0100               	movlb	0	; () banked
 11666  0004DC  2BB5               	incf	actuatorTest@i_1660& (0+255),f,b
 11667  0004DE  D7EF               	goto	l7058
 11668  0004E0                     l7066:
 11669                           
 11670                           ; BSR set to: 0
 11671                           ;Test.c: 290: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11672  0004E0  0E80               	movlw	128
 11673  0004E2  ECD6  F024         	call	_lcdInst
 11674  0004E6  0EC0               	movlw	192
 11675  0004E8  ECD6  F024         	call	_lcdInst
 11676                           
 11677                           ;Test.c: 291: printf("MID-RIGHT -- 2s ");
 11678  0004EC  0E3D               	movlw	low STR_101
 11679  0004EE  0100               	movlb	0	; () banked
 11680  0004F0  6F8E               	movwf	printf@f& (0+255),b
 11681  0004F2  0EFC               	movlw	high STR_101
 11682  0004F4  0100               	movlb	0	; () banked
 11683  0004F6  6F8F               	movwf	(printf@f+1)& (0+255),b
 11684  0004F8  ECB8  F008         	call	_printf	;wreg free
 11685                           
 11686                           ;Test.c: 292: updateServoPosition(850, 1);
 11687  0004FC  0E03               	movlw	3
 11688  0004FE  0100               	movlb	0	; () banked
 11689  000500  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11690  000502  0E52               	movlw	82
 11691  000504  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11692  000506  0E00               	movlw	0
 11693  000508  0100               	movlb	0	; () banked
 11694  00050A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11695  00050C  0E01               	movlw	1
 11696  00050E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11697  000510  EC0F  F01F         	call	_updateServoPosition	;wreg free
 11698                           
 11699                           ;Test.c: 293: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11700  000514  0E00               	movlw	0
 11701  000516  0100               	movlb	0	; () banked
 11702  000518  6FB6               	movwf	actuatorTest@i_1662& (0+255),b
 11703  00051A                     l7074:
 11704                           
 11705                           ; BSR set to: 0
 11706  00051A  0E63               	movlw	99
 11707  00051C  0100               	movlb	0	; () banked
 11708  00051E  65B6               	cpfsgt	actuatorTest@i_1662& (0+255),b
 11709  000520  D001               	goto	l7078
 11710  000522  D00C               	goto	l7082
 11711  000524                     l7078:
 11712                           
 11713                           ; BSR set to: 0
 11714  000524  0E68               	movlw	104
 11715  000526  0100               	movlb	0	; () banked
 11716  000528  6FAB               	movwf	??_actuatorTest& (0+255),b
 11717  00052A  0EE4               	movlw	228
 11718  00052C                     u8127:
 11719  00052C  2EE8               	decfsz	wreg,f,c
 11720  00052E  D7FE               	bra	u8127
 11721  000530  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11722  000532  D7FC               	bra	u8127
 11723  000534  F000               	nop	
 11724  000536  0100               	movlb	0	; () banked
 11725  000538  2BB6               	incf	actuatorTest@i_1662& (0+255),f,b
 11726  00053A  D7EF               	goto	l7074
 11727  00053C                     l7082:
 11728                           
 11729                           ; BSR set to: 0
 11730  00053C  0E00               	movlw	0
 11731  00053E  0100               	movlb	0	; () banked
 11732  000540  6FB7               	movwf	actuatorTest@i_1663& (0+255),b
 11733  000542                     l7084:
 11734                           
 11735                           ; BSR set to: 0
 11736  000542  0E63               	movlw	99
 11737  000544  0100               	movlb	0	; () banked
 11738  000546  65B7               	cpfsgt	actuatorTest@i_1663& (0+255),b
 11739  000548  D001               	goto	l7088
 11740  00054A  D00C               	goto	l7092
 11741  00054C                     l7088:
 11742                           
 11743                           ; BSR set to: 0
 11744  00054C  0E68               	movlw	104
 11745  00054E  0100               	movlb	0	; () banked
 11746  000550  6FAB               	movwf	??_actuatorTest& (0+255),b
 11747  000552  0EE4               	movlw	228
 11748  000554                     u8137:
 11749  000554  2EE8               	decfsz	wreg,f,c
 11750  000556  D7FE               	bra	u8137
 11751  000558  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11752  00055A  D7FC               	bra	u8137
 11753  00055C  F000               	nop	
 11754  00055E  0100               	movlb	0	; () banked
 11755  000560  2BB7               	incf	actuatorTest@i_1663& (0+255),f,b
 11756  000562  D7EF               	goto	l7084
 11757  000564                     l7092:
 11758                           
 11759                           ; BSR set to: 0
 11760                           ;Test.c: 295: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11761  000564  0E80               	movlw	128
 11762  000566  ECD6  F024         	call	_lcdInst
 11763  00056A  0EC0               	movlw	192
 11764  00056C  ECD6  F024         	call	_lcdInst
 11765                           
 11766                           ;Test.c: 296: printf("MID -- 2s       ");
 11767  000570  0EB5               	movlw	low STR_102
 11768  000572  0100               	movlb	0	; () banked
 11769  000574  6F8E               	movwf	printf@f& (0+255),b
 11770  000576  0EFB               	movlw	high STR_102
 11771  000578  0100               	movlb	0	; () banked
 11772  00057A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11773  00057C  ECB8  F008         	call	_printf	;wreg free
 11774                           
 11775                           ;Test.c: 297: updateServoPosition(1200, 1);
 11776  000580  0E04               	movlw	4
 11777  000582  0100               	movlb	0	; () banked
 11778  000584  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11779  000586  0EB0               	movlw	176
 11780  000588  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11781  00058A  0E00               	movlw	0
 11782  00058C  0100               	movlb	0	; () banked
 11783  00058E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11784  000590  0E01               	movlw	1
 11785  000592  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11786  000594  EC0F  F01F         	call	_updateServoPosition	;wreg free
 11787                           
 11788                           ;Test.c: 298: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11789  000598  0E00               	movlw	0
 11790  00059A  0100               	movlb	0	; () banked
 11791  00059C  6FB8               	movwf	actuatorTest@i_1665& (0+255),b
 11792  00059E                     l7100:
 11793                           
 11794                           ; BSR set to: 0
 11795  00059E  0E63               	movlw	99
 11796  0005A0  0100               	movlb	0	; () banked
 11797  0005A2  65B8               	cpfsgt	actuatorTest@i_1665& (0+255),b
 11798  0005A4  D001               	goto	l7104
 11799  0005A6  D00C               	goto	l7108
 11800  0005A8                     l7104:
 11801                           
 11802                           ; BSR set to: 0
 11803  0005A8  0E68               	movlw	104
 11804  0005AA  0100               	movlb	0	; () banked
 11805  0005AC  6FAB               	movwf	??_actuatorTest& (0+255),b
 11806  0005AE  0EE4               	movlw	228
 11807  0005B0                     u8147:
 11808  0005B0  2EE8               	decfsz	wreg,f,c
 11809  0005B2  D7FE               	bra	u8147
 11810  0005B4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11811  0005B6  D7FC               	bra	u8147
 11812  0005B8  F000               	nop	
 11813  0005BA  0100               	movlb	0	; () banked
 11814  0005BC  2BB8               	incf	actuatorTest@i_1665& (0+255),f,b
 11815  0005BE  D7EF               	goto	l7100
 11816  0005C0                     l7108:
 11817                           
 11818                           ; BSR set to: 0
 11819  0005C0  0E00               	movlw	0
 11820  0005C2  0100               	movlb	0	; () banked
 11821  0005C4  6FB9               	movwf	actuatorTest@i_1666& (0+255),b
 11822  0005C6                     l7110:
 11823                           
 11824                           ; BSR set to: 0
 11825  0005C6  0E63               	movlw	99
 11826  0005C8  0100               	movlb	0	; () banked
 11827  0005CA  65B9               	cpfsgt	actuatorTest@i_1666& (0+255),b
 11828  0005CC  D001               	goto	l7114
 11829  0005CE  D00C               	goto	l1147
 11830  0005D0                     l7114:
 11831                           
 11832                           ; BSR set to: 0
 11833  0005D0  0E68               	movlw	104
 11834  0005D2  0100               	movlb	0	; () banked
 11835  0005D4  6FAB               	movwf	??_actuatorTest& (0+255),b
 11836  0005D6  0EE4               	movlw	228
 11837  0005D8                     u8157:
 11838  0005D8  2EE8               	decfsz	wreg,f,c
 11839  0005DA  D7FE               	bra	u8157
 11840  0005DC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11841  0005DE  D7FC               	bra	u8157
 11842  0005E0  F000               	nop	
 11843  0005E2  0100               	movlb	0	; () banked
 11844  0005E4  2BB9               	incf	actuatorTest@i_1666& (0+255),f,b
 11845  0005E6  D7EF               	goto	l7110
 11846  0005E8                     l1147:
 11847                           
 11848                           ; BSR set to: 0
 11849                           ;Test.c: 299: TMR1ON = 0;
 11850  0005E8  90CD               	bcf	4045,0,c	;volatile
 11851                           
 11852                           ; BSR set to: 0
 11853                           ;Test.c: 306: printf("TST: TILT SERVO");
 11854  0005EA  0E3A               	movlw	low STR_103
 11855  0005EC  0100               	movlb	0	; () banked
 11856  0005EE  6F8E               	movwf	printf@f& (0+255),b
 11857  0005F0  0EFE               	movlw	high STR_103
 11858  0005F2  0100               	movlb	0	; () banked
 11859  0005F4  6F8F               	movwf	(printf@f+1)& (0+255),b
 11860  0005F6  ECB8  F008         	call	_printf	;wreg free
 11861                           
 11862                           ;Test.c: 307: lcdInst(0b11000000);;
 11863  0005FA  0EC0               	movlw	192
 11864  0005FC  ECD6  F024         	call	_lcdInst
 11865                           
 11866                           ;Test.c: 308: printf("LEVEL -- 2s     ");
 11867  000600  0EE8               	movlw	low STR_104
 11868  000602  0100               	movlb	0	; () banked
 11869  000604  6F8E               	movwf	printf@f& (0+255),b
 11870  000606  0EFB               	movlw	high STR_104
 11871  000608  0100               	movlb	0	; () banked
 11872  00060A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11873  00060C  ECB8  F008         	call	_printf	;wreg free
 11874                           
 11875                           ;Test.c: 309: updateServoPosition(1150, 3);
 11876  000610  0E04               	movlw	4
 11877  000612  0100               	movlb	0	; () banked
 11878  000614  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11879  000616  0E7E               	movlw	126
 11880  000618  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11881  00061A  0E00               	movlw	0
 11882  00061C  0100               	movlb	0	; () banked
 11883  00061E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11884  000620  0E03               	movlw	3
 11885  000622  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11886  000624  EC0F  F01F         	call	_updateServoPosition	;wreg free
 11887                           
 11888                           ;Test.c: 310: TMR3ON = 1;
 11889  000628  80B1               	bsf	4017,0,c	;volatile
 11890                           
 11891                           ;Test.c: 311: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11892  00062A  0E00               	movlw	0
 11893  00062C  0100               	movlb	0	; () banked
 11894  00062E  6FBA               	movwf	actuatorTest@i_1669& (0+255),b
 11895  000630                     l7128:
 11896                           
 11897                           ; BSR set to: 0
 11898  000630  0E63               	movlw	99
 11899  000632  0100               	movlb	0	; () banked
 11900  000634  65BA               	cpfsgt	actuatorTest@i_1669& (0+255),b
 11901  000636  D001               	goto	l7132
 11902  000638  D00C               	goto	l7136
 11903  00063A                     l7132:
 11904                           
 11905                           ; BSR set to: 0
 11906  00063A  0E68               	movlw	104
 11907  00063C  0100               	movlb	0	; () banked
 11908  00063E  6FAB               	movwf	??_actuatorTest& (0+255),b
 11909  000640  0EE4               	movlw	228
 11910  000642                     u8167:
 11911  000642  2EE8               	decfsz	wreg,f,c
 11912  000644  D7FE               	bra	u8167
 11913  000646  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11914  000648  D7FC               	bra	u8167
 11915  00064A  F000               	nop	
 11916  00064C  0100               	movlb	0	; () banked
 11917  00064E  2BBA               	incf	actuatorTest@i_1669& (0+255),f,b
 11918  000650  D7EF               	goto	l7128
 11919  000652                     l7136:
 11920                           
 11921                           ; BSR set to: 0
 11922  000652  0E00               	movlw	0
 11923  000654  0100               	movlb	0	; () banked
 11924  000656  6FBB               	movwf	actuatorTest@i_1670& (0+255),b
 11925  000658                     l7138:
 11926                           
 11927                           ; BSR set to: 0
 11928  000658  0E63               	movlw	99
 11929  00065A  0100               	movlb	0	; () banked
 11930  00065C  65BB               	cpfsgt	actuatorTest@i_1670& (0+255),b
 11931  00065E  D001               	goto	l7142
 11932  000660  D00C               	goto	l7146
 11933  000662                     l7142:
 11934                           
 11935                           ; BSR set to: 0
 11936  000662  0E68               	movlw	104
 11937  000664  0100               	movlb	0	; () banked
 11938  000666  6FAB               	movwf	??_actuatorTest& (0+255),b
 11939  000668  0EE4               	movlw	228
 11940  00066A                     u8177:
 11941  00066A  2EE8               	decfsz	wreg,f,c
 11942  00066C  D7FE               	bra	u8177
 11943  00066E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11944  000670  D7FC               	bra	u8177
 11945  000672  F000               	nop	
 11946  000674  0100               	movlb	0	; () banked
 11947  000676  2BBB               	incf	actuatorTest@i_1670& (0+255),f,b
 11948  000678  D7EF               	goto	l7138
 11949  00067A                     l7146:
 11950                           
 11951                           ; BSR set to: 0
 11952                           ;Test.c: 313: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11953  00067A  0E80               	movlw	128
 11954  00067C  ECD6  F024         	call	_lcdInst
 11955  000680  0EC0               	movlw	192
 11956  000682  ECD6  F024         	call	_lcdInst
 11957                           
 11958                           ;Test.c: 314: printf("DROP -- 2s      ");
 11959  000686  0EC6               	movlw	low STR_105
 11960  000688  0100               	movlb	0	; () banked
 11961  00068A  6F8E               	movwf	printf@f& (0+255),b
 11962  00068C  0EFB               	movlw	high STR_105
 11963  00068E  0100               	movlb	0	; () banked
 11964  000690  6F8F               	movwf	(printf@f+1)& (0+255),b
 11965  000692  ECB8  F008         	call	_printf	;wreg free
 11966                           
 11967                           ;Test.c: 315: updateServoPosition(1200, 3);
 11968  000696  0E04               	movlw	4
 11969  000698  0100               	movlb	0	; () banked
 11970  00069A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11971  00069C  0EB0               	movlw	176
 11972  00069E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11973  0006A0  0E00               	movlw	0
 11974  0006A2  0100               	movlb	0	; () banked
 11975  0006A4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11976  0006A6  0E03               	movlw	3
 11977  0006A8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11978  0006AA  EC0F  F01F         	call	_updateServoPosition	;wreg free
 11979                           
 11980                           ;Test.c: 316: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11981  0006AE  0E00               	movlw	0
 11982  0006B0  0100               	movlb	0	; () banked
 11983  0006B2  6FBC               	movwf	actuatorTest@i_1672& (0+255),b
 11984  0006B4                     l7154:
 11985                           
 11986                           ; BSR set to: 0
 11987  0006B4  0E63               	movlw	99
 11988  0006B6  0100               	movlb	0	; () banked
 11989  0006B8  65BC               	cpfsgt	actuatorTest@i_1672& (0+255),b
 11990  0006BA  D001               	goto	l7158
 11991  0006BC  D00C               	goto	l7162
 11992  0006BE                     l7158:
 11993                           
 11994                           ; BSR set to: 0
 11995  0006BE  0E68               	movlw	104
 11996  0006C0  0100               	movlb	0	; () banked
 11997  0006C2  6FAB               	movwf	??_actuatorTest& (0+255),b
 11998  0006C4  0EE4               	movlw	228
 11999  0006C6                     u8187:
 12000  0006C6  2EE8               	decfsz	wreg,f,c
 12001  0006C8  D7FE               	bra	u8187
 12002  0006CA  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12003  0006CC  D7FC               	bra	u8187
 12004  0006CE  F000               	nop	
 12005  0006D0  0100               	movlb	0	; () banked
 12006  0006D2  2BBC               	incf	actuatorTest@i_1672& (0+255),f,b
 12007  0006D4  D7EF               	goto	l7154
 12008  0006D6                     l7162:
 12009                           
 12010                           ; BSR set to: 0
 12011  0006D6  0E00               	movlw	0
 12012  0006D8  0100               	movlb	0	; () banked
 12013  0006DA  6FBD               	movwf	actuatorTest@i_1673& (0+255),b
 12014  0006DC                     l7164:
 12015                           
 12016                           ; BSR set to: 0
 12017  0006DC  0E63               	movlw	99
 12018  0006DE  0100               	movlb	0	; () banked
 12019  0006E0  65BD               	cpfsgt	actuatorTest@i_1673& (0+255),b
 12020  0006E2  D001               	goto	l7168
 12021  0006E4  D00C               	goto	l7172
 12022  0006E6                     l7168:
 12023                           
 12024                           ; BSR set to: 0
 12025  0006E6  0E68               	movlw	104
 12026  0006E8  0100               	movlb	0	; () banked
 12027  0006EA  6FAB               	movwf	??_actuatorTest& (0+255),b
 12028  0006EC  0EE4               	movlw	228
 12029  0006EE                     u8197:
 12030  0006EE  2EE8               	decfsz	wreg,f,c
 12031  0006F0  D7FE               	bra	u8197
 12032  0006F2  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12033  0006F4  D7FC               	bra	u8197
 12034  0006F6  F000               	nop	
 12035  0006F8  0100               	movlb	0	; () banked
 12036  0006FA  2BBD               	incf	actuatorTest@i_1673& (0+255),f,b
 12037  0006FC  D7EF               	goto	l7164
 12038  0006FE                     l7172:
 12039                           
 12040                           ; BSR set to: 0
 12041                           ;Test.c: 318: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12042  0006FE  0E80               	movlw	128
 12043  000700  ECD6  F024         	call	_lcdInst
 12044  000704  0EC0               	movlw	192
 12045  000706  ECD6  F024         	call	_lcdInst
 12046                           
 12047                           ;Test.c: 319: printf("LEVEL -- 2s     ");
 12048  00070A  0EE8               	movlw	low STR_104
 12049  00070C  0100               	movlb	0	; () banked
 12050  00070E  6F8E               	movwf	printf@f& (0+255),b
 12051  000710  0EFB               	movlw	high STR_104
 12052  000712  0100               	movlb	0	; () banked
 12053  000714  6F8F               	movwf	(printf@f+1)& (0+255),b
 12054  000716  ECB8  F008         	call	_printf	;wreg free
 12055                           
 12056                           ;Test.c: 320: updateServoPosition(1150, 3);
 12057  00071A  0E04               	movlw	4
 12058  00071C  0100               	movlb	0	; () banked
 12059  00071E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12060  000720  0E7E               	movlw	126
 12061  000722  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12062  000724  0E00               	movlw	0
 12063  000726  0100               	movlb	0	; () banked
 12064  000728  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12065  00072A  0E03               	movlw	3
 12066  00072C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12067  00072E  EC0F  F01F         	call	_updateServoPosition	;wreg free
 12068                           
 12069                           ;Test.c: 321: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12070  000732  0E00               	movlw	0
 12071  000734  0100               	movlb	0	; () banked
 12072  000736  6FBE               	movwf	actuatorTest@i_1675& (0+255),b
 12073  000738                     l7180:
 12074                           
 12075                           ; BSR set to: 0
 12076  000738  0E63               	movlw	99
 12077  00073A  0100               	movlb	0	; () banked
 12078  00073C  65BE               	cpfsgt	actuatorTest@i_1675& (0+255),b
 12079  00073E  D001               	goto	l7184
 12080  000740  D00C               	goto	l7188
 12081  000742                     l7184:
 12082                           
 12083                           ; BSR set to: 0
 12084  000742  0E68               	movlw	104
 12085  000744  0100               	movlb	0	; () banked
 12086  000746  6FAB               	movwf	??_actuatorTest& (0+255),b
 12087  000748  0EE4               	movlw	228
 12088  00074A                     u8207:
 12089  00074A  2EE8               	decfsz	wreg,f,c
 12090  00074C  D7FE               	bra	u8207
 12091  00074E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12092  000750  D7FC               	bra	u8207
 12093  000752  F000               	nop	
 12094  000754  0100               	movlb	0	; () banked
 12095  000756  2BBE               	incf	actuatorTest@i_1675& (0+255),f,b
 12096  000758  D7EF               	goto	l7180
 12097  00075A                     l7188:
 12098                           
 12099                           ; BSR set to: 0
 12100  00075A  0E00               	movlw	0
 12101  00075C  0100               	movlb	0	; () banked
 12102  00075E  6FBF               	movwf	actuatorTest@i_1676& (0+255),b
 12103  000760                     l7190:
 12104                           
 12105                           ; BSR set to: 0
 12106  000760  0E63               	movlw	99
 12107  000762  0100               	movlb	0	; () banked
 12108  000764  65BF               	cpfsgt	actuatorTest@i_1676& (0+255),b
 12109  000766  D001               	goto	l7194
 12110  000768  D00C               	goto	l1159
 12111  00076A                     l7194:
 12112                           
 12113                           ; BSR set to: 0
 12114  00076A  0E68               	movlw	104
 12115  00076C  0100               	movlb	0	; () banked
 12116  00076E  6FAB               	movwf	??_actuatorTest& (0+255),b
 12117  000770  0EE4               	movlw	228
 12118  000772                     u8217:
 12119  000772  2EE8               	decfsz	wreg,f,c
 12120  000774  D7FE               	bra	u8217
 12121  000776  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12122  000778  D7FC               	bra	u8217
 12123  00077A  F000               	nop	
 12124  00077C  0100               	movlb	0	; () banked
 12125  00077E  2BBF               	incf	actuatorTest@i_1676& (0+255),f,b
 12126  000780  D7EF               	goto	l7190
 12127  000782                     l1159:
 12128                           
 12129                           ; BSR set to: 0
 12130                           ;Test.c: 322: TMR3ON = 0;
 12131  000782  90B1               	bcf	4017,0,c	;volatile
 12132                           
 12133                           ;Test.c: 323: (INTCONbits.GIE = 0);
 12134  000784  9EF2               	bcf	intcon,7,c	;volatile
 12135                           
 12136                           ; BSR set to: 0
 12137                           ;Test.c: 328: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12138  000786  0E01               	movlw	1
 12139  000788  ECD6  F024         	call	_lcdInst
 12140  00078C  0E68               	movlw	104
 12141  00078E  0100               	movlb	0	; () banked
 12142  000790  6FAB               	movwf	??_actuatorTest& (0+255),b
 12143  000792  0EE4               	movlw	228
 12144  000794                     u8227:
 12145  000794  2EE8               	decfsz	wreg,f,c
 12146  000796  D7FE               	bra	u8227
 12147  000798  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12148  00079A  D7FC               	bra	u8227
 12149  00079C  F000               	nop	
 12150  00079E  0E80               	movlw	128
 12151  0007A0  ECD6  F024         	call	_lcdInst
 12152                           
 12153                           ;Test.c: 329: printf("TST: CAM SERVO");
 12154  0007A4  0E96               	movlw	low STR_107
 12155  0007A6  0100               	movlb	0	; () banked
 12156  0007A8  6F8E               	movwf	printf@f& (0+255),b
 12157  0007AA  0EFE               	movlw	high STR_107
 12158  0007AC  0100               	movlb	0	; () banked
 12159  0007AE  6F8F               	movwf	(printf@f+1)& (0+255),b
 12160  0007B0  ECB8  F008         	call	_printf	;wreg free
 12161                           
 12162                           ;Test.c: 330: lcdInst(0b11000000);;
 12163  0007B4  0EC0               	movlw	192
 12164  0007B6  ECD6  F024         	call	_lcdInst
 12165                           
 12166                           ;Test.c: 331: printf("CAM UP  |RC0=1");
 12167  0007BA  0E78               	movlw	low STR_108
 12168  0007BC  0100               	movlb	0	; () banked
 12169  0007BE  6F8E               	movwf	printf@f& (0+255),b
 12170  0007C0  0EFE               	movlw	high STR_108
 12171  0007C2  0100               	movlb	0	; () banked
 12172  0007C4  6F8F               	movwf	(printf@f+1)& (0+255),b
 12173  0007C6  ECB8  F008         	call	_printf	;wreg free
 12174                           
 12175                           ;Test.c: 332: LATCbits.LATC0 = 1;
 12176  0007CA  808B               	bsf	3979,0,c	;volatile
 12177                           
 12178                           ;Test.c: 333: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12179  0007CC  0E00               	movlw	0
 12180  0007CE  0100               	movlb	0	; () banked
 12181  0007D0  6FC0               	movwf	actuatorTest@i_1679& (0+255),b
 12182  0007D2                     l7214:
 12183                           
 12184                           ; BSR set to: 0
 12185  0007D2  0E63               	movlw	99
 12186  0007D4  0100               	movlb	0	; () banked
 12187  0007D6  65C0               	cpfsgt	actuatorTest@i_1679& (0+255),b
 12188  0007D8  D001               	goto	l7218
 12189  0007DA  D00C               	goto	l7222
 12190  0007DC                     l7218:
 12191                           
 12192                           ; BSR set to: 0
 12193  0007DC  0E68               	movlw	104
 12194  0007DE  0100               	movlb	0	; () banked
 12195  0007E0  6FAB               	movwf	??_actuatorTest& (0+255),b
 12196  0007E2  0EE4               	movlw	228
 12197  0007E4                     u8237:
 12198  0007E4  2EE8               	decfsz	wreg,f,c
 12199  0007E6  D7FE               	bra	u8237
 12200  0007E8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12201  0007EA  D7FC               	bra	u8237
 12202  0007EC  F000               	nop	
 12203  0007EE  0100               	movlb	0	; () banked
 12204  0007F0  2BC0               	incf	actuatorTest@i_1679& (0+255),f,b
 12205  0007F2  D7EF               	goto	l7214
 12206  0007F4                     l7222:
 12207                           
 12208                           ; BSR set to: 0
 12209  0007F4  0E00               	movlw	0
 12210  0007F6  0100               	movlb	0	; () banked
 12211  0007F8  6FC1               	movwf	actuatorTest@i_1680& (0+255),b
 12212  0007FA                     l7224:
 12213                           
 12214                           ; BSR set to: 0
 12215  0007FA  0E63               	movlw	99
 12216  0007FC  0100               	movlb	0	; () banked
 12217  0007FE  65C1               	cpfsgt	actuatorTest@i_1680& (0+255),b
 12218  000800  D001               	goto	l7228
 12219  000802  D00C               	goto	l7232
 12220  000804                     l7228:
 12221                           
 12222                           ; BSR set to: 0
 12223  000804  0E68               	movlw	104
 12224  000806  0100               	movlb	0	; () banked
 12225  000808  6FAB               	movwf	??_actuatorTest& (0+255),b
 12226  00080A  0EE4               	movlw	228
 12227  00080C                     u8247:
 12228  00080C  2EE8               	decfsz	wreg,f,c
 12229  00080E  D7FE               	bra	u8247
 12230  000810  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12231  000812  D7FC               	bra	u8247
 12232  000814  F000               	nop	
 12233  000816  0100               	movlb	0	; () banked
 12234  000818  2BC1               	incf	actuatorTest@i_1680& (0+255),f,b
 12235  00081A  D7EF               	goto	l7224
 12236  00081C                     l7232:
 12237                           
 12238                           ; BSR set to: 0
 12239                           ;Test.c: 334: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12240  00081C  0E80               	movlw	128
 12241  00081E  ECD6  F024         	call	_lcdInst
 12242  000822  0EC0               	movlw	192
 12243  000824  ECD6  F024         	call	_lcdInst
 12244                           
 12245                           ;Test.c: 335: printf("CAM DWN |RC0=0");
 12246  000828  0E69               	movlw	low STR_109
 12247  00082A  0100               	movlb	0	; () banked
 12248  00082C  6F8E               	movwf	printf@f& (0+255),b
 12249  00082E  0EFE               	movlw	high STR_109
 12250  000830  0100               	movlb	0	; () banked
 12251  000832  6F8F               	movwf	(printf@f+1)& (0+255),b
 12252  000834  ECB8  F008         	call	_printf	;wreg free
 12253                           
 12254                           ;Test.c: 338: for(i=0;i<10000;i++)
 12255  000838  0E00               	movlw	0
 12256  00083A  0100               	movlb	0	; () banked
 12257  00083C  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 12258  00083E  0E00               	movlw	0
 12259  000840  6FC4               	movwf	actuatorTest@i& (0+255),b
 12260  000842                     l7238:
 12261                           
 12262                           ; BSR set to: 0
 12263  000842  0100               	movlb	0	; () banked
 12264  000844  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 12265  000846  D008               	goto	l1164
 12266  000848  0E10               	movlw	16
 12267  00084A  0100               	movlb	0	; () banked
 12268  00084C  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 12269  00084E  0E27               	movlw	39
 12270  000850  0100               	movlb	0	; () banked
 12271  000852  59C5               	subwfb	(actuatorTest@i+1)& (0+255),w,b
 12272  000854  B0D8               	btfsc	status,0,c
 12273  000856  D00D               	goto	l7248
 12274  000858                     l1164:
 12275                           
 12276                           ; BSR set to: 0
 12277                           ;Test.c: 339: {
 12278                           ;Test.c: 340: LATCbits.LATC0 = 1;
 12279  000858  808B               	bsf	3979,0,c	;volatile
 12280                           
 12281                           ; BSR set to: 0
 12282                           ;Test.c: 341: _delay((unsigned long)((10)*(32000000/4000000.0)));
 12283  00085A  0E1A               	movlw	26
 12284  00085C                     u8257:
 12285  00085C  2EE8               	decfsz	wreg,f,c
 12286  00085E  D7FE               	bra	u8257
 12287  000860  D000               	nop2	
 12288                           
 12289                           ;Test.c: 342: LATCbits.LATC0 = 0;
 12290  000862  908B               	bcf	3979,0,c	;volatile
 12291                           
 12292                           ;Test.c: 343: _delay((unsigned long)((90)*(32000000/4000000.0)));
 12293  000864  0EF0               	movlw	240
 12294  000866                     u8267:
 12295  000866  2EE8               	decfsz	wreg,f,c
 12296  000868  D7FE               	bra	u8267
 12297  00086A  0100               	movlb	0	; () banked
 12298  00086C  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 12299  00086E  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 12300  000870  D7E8               	goto	l7238
 12301  000872                     l7248:
 12302                           
 12303                           ; BSR set to: 0
 12304                           ;Test.c: 344: }
 12305                           ;Test.c: 346: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12306  000872  0E00               	movlw	0
 12307  000874  0100               	movlb	0	; () banked
 12308  000876  6FC2               	movwf	actuatorTest@i_1682& (0+255),b
 12309  000878                     l7250:
 12310                           
 12311                           ; BSR set to: 0
 12312  000878  0E63               	movlw	99
 12313  00087A  0100               	movlb	0	; () banked
 12314  00087C  65C2               	cpfsgt	actuatorTest@i_1682& (0+255),b
 12315  00087E  D001               	goto	l7254
 12316  000880  D00C               	goto	l7258
 12317  000882                     l7254:
 12318                           
 12319                           ; BSR set to: 0
 12320  000882  0E68               	movlw	104
 12321  000884  0100               	movlb	0	; () banked
 12322  000886  6FAB               	movwf	??_actuatorTest& (0+255),b
 12323  000888  0EE4               	movlw	228
 12324  00088A                     u8277:
 12325  00088A  2EE8               	decfsz	wreg,f,c
 12326  00088C  D7FE               	bra	u8277
 12327  00088E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12328  000890  D7FC               	bra	u8277
 12329  000892  F000               	nop	
 12330  000894  0100               	movlb	0	; () banked
 12331  000896  2BC2               	incf	actuatorTest@i_1682& (0+255),f,b
 12332  000898  D7EF               	goto	l7250
 12333  00089A                     l7258:
 12334                           
 12335                           ; BSR set to: 0
 12336  00089A  0E00               	movlw	0
 12337  00089C  0100               	movlb	0	; () banked
 12338  00089E  6FC3               	movwf	actuatorTest@i_1683& (0+255),b
 12339  0008A0                     l7260:
 12340                           
 12341                           ; BSR set to: 0
 12342  0008A0  0E63               	movlw	99
 12343  0008A2  0100               	movlb	0	; () banked
 12344  0008A4  65C3               	cpfsgt	actuatorTest@i_1683& (0+255),b
 12345  0008A6  D001               	goto	l7264
 12346  0008A8  D00C               	goto	l7268
 12347  0008AA                     l7264:
 12348                           
 12349                           ; BSR set to: 0
 12350  0008AA  0E68               	movlw	104
 12351  0008AC  0100               	movlb	0	; () banked
 12352  0008AE  6FAB               	movwf	??_actuatorTest& (0+255),b
 12353  0008B0  0EE4               	movlw	228
 12354  0008B2                     u8287:
 12355  0008B2  2EE8               	decfsz	wreg,f,c
 12356  0008B4  D7FE               	bra	u8287
 12357  0008B6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12358  0008B8  D7FC               	bra	u8287
 12359  0008BA  F000               	nop	
 12360  0008BC  0100               	movlb	0	; () banked
 12361  0008BE  2BC3               	incf	actuatorTest@i_1683& (0+255),f,b
 12362  0008C0  D7EF               	goto	l7260
 12363  0008C2                     l7268:
 12364                           
 12365                           ; BSR set to: 0
 12366                           ;Test.c: 347: machine_state = Testing_state;
 12367  0008C2  0E03               	movlw	3
 12368  0008C4  0100               	movlb	0	; () banked
 12369  0008C6  6FFC               	movwf	_machine_state& (0+255),b
 12370                           
 12371                           ; BSR set to: 0
 12372  0008C8  0012               	return		;funcret
 12373  0008CA                     __end_of_actuatorTest:
 12374                           	opt stack 0
 12375                           tblptru	equ	0xFF8
 12376                           tblptrh	equ	0xFF7
 12377                           tblptrl	equ	0xFF6
 12378                           tablat	equ	0xFF5
 12379                           prodh	equ	0xFF4
 12380                           prodl	equ	0xFF3
 12381                           intcon	equ	0xFF2
 12382                           intcon2	equ	0xFF1
 12383                           intcon3	equ	0xFF0
 12384                           postinc0	equ	0xFEE
 12385                           wreg	equ	0xFE8
 12386                           postdec1	equ	0xFE5
 12387                           fsr1l	equ	0xFE1
 12388                           indf2	equ	0xFDF
 12389                           postinc2	equ	0xFDE
 12390                           postdec2	equ	0xFDD
 12391                           fsr2h	equ	0xFDA
 12392                           fsr2l	equ	0xFD9
 12393                           status	equ	0xFD8
 12394                           
 12395 ;; *************** function _SpeedTest *****************
 12396 ;; Defined at:
 12397 ;;		line 526 in file "Test.c"
 12398 ;; Parameters:    Size  Location     Type
 12399 ;;		None
 12400 ;; Auto vars:     Size  Location     Type
 12401 ;;		None
 12402 ;; Return value:  Size  Location     Type
 12403 ;;                  1    wreg      void 
 12404 ;; Registers used:
 12405 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12406 ;; Tracked objects:
 12407 ;;		On entry : 0/0
 12408 ;;		On exit  : 0/0
 12409 ;;		Unchanged: 0/0
 12410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12411 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12412 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12413 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12414 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12415 ;;Total ram usage:        1 bytes
 12416 ;; Hardware stack levels used:    1
 12417 ;; Hardware stack levels required when called:   10
 12418 ;; This function calls:
 12419 ;;		_lcdInst
 12420 ;;		_printf
 12421 ;; This function is called by:
 12422 ;;		_Test
 12423 ;; This function uses a non-reentrant model
 12424 ;;
 12425                           
 12426                           	psect	text42
 12427  003C9E                     __ptext42:
 12428                           	opt stack 0
 12429  003C9E                     _SpeedTest:
 12430                           	opt stack 19
 12431                           
 12432                           ;Test.c: 528: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12433                           
 12434                           ; BSR set to: 0
 12435                           ;incstack = 0
 12436  003C9E  0E01               	movlw	1
 12437  003CA0  ECD6  F024         	call	_lcdInst
 12438  003CA4  0E68               	movlw	104
 12439  003CA6  0100               	movlb	0	; () banked
 12440  003CA8  6FAB               	movwf	??_SpeedTest& (0+255),b
 12441  003CAA  0EE4               	movlw	228
 12442  003CAC                     u8297:
 12443  003CAC  2EE8               	decfsz	wreg,f,c
 12444  003CAE  D7FE               	bra	u8297
 12445  003CB0  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 12446  003CB2  D7FC               	bra	u8297
 12447  003CB4  F000               	nop	
 12448  003CB6  0E80               	movlw	128
 12449  003CB8  ECD6  F024         	call	_lcdInst
 12450                           
 12451                           ;Test.c: 529: printf("S: D WILL RETURN ");
 12452  003CBC  0E6D               	movlw	low STR_116
 12453  003CBE  0100               	movlb	0	; () banked
 12454  003CC0  6F8E               	movwf	printf@f& (0+255),b
 12455  003CC2  0EFB               	movlw	high STR_116
 12456  003CC4  0100               	movlb	0	; () banked
 12457  003CC6  6F8F               	movwf	(printf@f+1)& (0+255),b
 12458  003CC8  ECB8  F008         	call	_printf	;wreg free
 12459                           
 12460                           ;Test.c: 530: lcdInst(0b11000000);;
 12461  003CCC  0EC0               	movlw	192
 12462  003CCE  ECD6  F024         	call	_lcdInst
 12463                           
 12464                           ;Test.c: 531: printf("OTHER SETS RA5   ");
 12465  003CD2  0E5B               	movlw	low STR_112
 12466  003CD4  0100               	movlb	0	; () banked
 12467  003CD6  6F8E               	movwf	printf@f& (0+255),b
 12468  003CD8  0EFB               	movlw	high STR_112
 12469  003CDA  0100               	movlb	0	; () banked
 12470  003CDC  6F8F               	movwf	(printf@f+1)& (0+255),b
 12471  003CDE  ECB8  F008         	call	_printf	;wreg free
 12472  003CE2                     l1247:
 12473  003CE2  A281               	btfss	3969,1,c	;volatile
 12474  003CE4  D7FE               	goto	l1247
 12475                           
 12476                           ;Test.c: 536: }
 12477                           ;Test.c: 537: if(PORTB >> 4 == 0b1111){
 12478  003CE6  3881               	swapf	3969,w,c	;volatile
 12479  003CE8  0B0F               	andlw	15
 12480  003CEA  0A0F               	xorlw	15
 12481  003CEC  B4D8               	btfsc	status,2,c
 12482  003CEE  0012               	return	
 12483  003CF0  D014               	goto	l7310
 12484  003CF2                     l1254:
 12485                           
 12486                           ;Test.c: 542: LATAbits.LATA5 = 1;
 12487  003CF2  8A89               	bsf	3977,5,c	;volatile
 12488                           
 12489                           ;Test.c: 543: _delay((unsigned long)((5)*(32000000/4000.0)));
 12490  003CF4  0E34               	movlw	52
 12491  003CF6  0100               	movlb	0	; () banked
 12492  003CF8  6FAB               	movwf	??_SpeedTest& (0+255),b
 12493  003CFA  0EF1               	movlw	241
 12494  003CFC                     u8307:
 12495  003CFC  2EE8               	decfsz	wreg,f,c
 12496  003CFE  D7FE               	bra	u8307
 12497  003D00  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 12498  003D02  D7FC               	bra	u8307
 12499  003D04  D000               	nop2	
 12500                           
 12501                           ;Test.c: 544: LATAbits.LATA5 = 0;
 12502  003D06  9A89               	bcf	3977,5,c	;volatile
 12503                           
 12504                           ;Test.c: 545: _delay((unsigned long)((5)*(32000000/4000.0)));
 12505  003D08  0E34               	movlw	52
 12506  003D0A  0100               	movlb	0	; () banked
 12507  003D0C  6FAB               	movwf	??_SpeedTest& (0+255),b
 12508  003D0E  0EF1               	movlw	241
 12509  003D10                     u8317:
 12510  003D10  2EE8               	decfsz	wreg,f,c
 12511  003D12  D7FE               	bra	u8317
 12512  003D14  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 12513  003D16  D7FC               	bra	u8317
 12514  003D18  D000               	nop2	
 12515  003D1A                     l7310:
 12516  003D1A  B281               	btfsc	3969,1,c	;volatile
 12517  003D1C  D7EA               	goto	l1254
 12518                           
 12519                           ;Test.c: 548: }
 12520                           ;Test.c: 549: LATAbits.LATA5 = 0;
 12521  003D1E  9A89               	bcf	3977,5,c	;volatile
 12522  003D20  D7E0               	goto	l1247
 12523  003D22                     __end_of_SpeedTest:
 12524                           	opt stack 0
 12525                           tblptru	equ	0xFF8
 12526                           tblptrh	equ	0xFF7
 12527                           tblptrl	equ	0xFF6
 12528                           tablat	equ	0xFF5
 12529                           prodh	equ	0xFF4
 12530                           prodl	equ	0xFF3
 12531                           intcon	equ	0xFF2
 12532                           intcon2	equ	0xFF1
 12533                           intcon3	equ	0xFF0
 12534                           postinc0	equ	0xFEE
 12535                           wreg	equ	0xFE8
 12536                           postdec1	equ	0xFE5
 12537                           fsr1l	equ	0xFE1
 12538                           indf2	equ	0xFDF
 12539                           postinc2	equ	0xFDE
 12540                           postdec2	equ	0xFDD
 12541                           fsr2h	equ	0xFDA
 12542                           fsr2l	equ	0xFD9
 12543                           status	equ	0xFD8
 12544                           
 12545 ;; *************** function _PusherTest *****************
 12546 ;; Defined at:
 12547 ;;		line 465 in file "Test.c"
 12548 ;; Parameters:    Size  Location     Type
 12549 ;;		None
 12550 ;; Auto vars:     Size  Location     Type
 12551 ;;  i               2   46[BANK0 ] int 
 12552 ;;  i               2   44[BANK0 ] int 
 12553 ;; Return value:  Size  Location     Type
 12554 ;;                  1    wreg      void 
 12555 ;; Registers used:
 12556 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12557 ;; Tracked objects:
 12558 ;;		On entry : 0/0
 12559 ;;		On exit  : 0/0
 12560 ;;		Unchanged: 0/0
 12561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12562 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12563 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12564 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12565 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12566 ;;Total ram usage:        5 bytes
 12567 ;; Hardware stack levels used:    1
 12568 ;; Hardware stack levels required when called:   10
 12569 ;; This function calls:
 12570 ;;		_lcdInst
 12571 ;;		_printf
 12572 ;; This function is called by:
 12573 ;;		_Test
 12574 ;; This function uses a non-reentrant model
 12575 ;;
 12576                           
 12577                           	psect	text43
 12578  003674                     __ptext43:
 12579                           	opt stack 0
 12580  003674                     _PusherTest:
 12581                           	opt stack 19
 12582                           
 12583                           ;Test.c: 466: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12584                           
 12585                           ;incstack = 0
 12586  003674  0E01               	movlw	1
 12587  003676  ECD6  F024         	call	_lcdInst
 12588  00367A  0E68               	movlw	104
 12589  00367C  0100               	movlb	0	; () banked
 12590  00367E  6FAB               	movwf	??_PusherTest& (0+255),b
 12591  003680  0EE4               	movlw	228
 12592  003682                     u8327:
 12593  003682  2EE8               	decfsz	wreg,f,c
 12594  003684  D7FE               	bra	u8327
 12595  003686  2FAB               	decfsz	??_PusherTest& (0+255),f,b
 12596  003688  D7FC               	bra	u8327
 12597  00368A  F000               	nop	
 12598  00368C  0E80               	movlw	128
 12599  00368E  ECD6  F024         	call	_lcdInst
 12600                           
 12601                           ;Test.c: 467: printf("PUSHER TST");
 12602  003692  0E71               	movlw	low STR_113
 12603  003694  0100               	movlb	0	; () banked
 12604  003696  6F8E               	movwf	printf@f& (0+255),b
 12605  003698  0EFF               	movlw	high STR_113
 12606  00369A  0100               	movlb	0	; () banked
 12607  00369C  6F8F               	movwf	(printf@f+1)& (0+255),b
 12608  00369E  ECB8  F008         	call	_printf	;wreg free
 12609  0036A2                     l1212:
 12610  0036A2  A281               	btfss	3969,1,c	;volatile
 12611  0036A4  D7FE               	goto	l1212
 12612                           
 12613                           ;Test.c: 473: }
 12614                           ;Test.c: 474: if(PORTB >> 4 == 0b1111){
 12615  0036A6  3881               	swapf	3969,w,c	;volatile
 12616  0036A8  0B0F               	andlw	15
 12617  0036AA  0A0F               	xorlw	15
 12618  0036AC  B4D8               	btfsc	status,2,c
 12619  0036AE  0012               	return	
 12620                           
 12621                           ;Test.c: 479: else if(PORTB >> 4 == 0b0101){
 12622                           
 12623                           ;Test.c: 476: }
 12624                           
 12625                           ;Test.c: 475: break;
 12626  0036B0  3881               	swapf	3969,w,c	;volatile
 12627  0036B2  0B0F               	andlw	15
 12628  0036B4  0A05               	xorlw	5
 12629  0036B6  A4D8               	btfss	status,2,c
 12630  0036B8  D01D               	goto	l7340
 12631                           
 12632                           ;Test.c: 480: for(int i = 0; i<3000; i++){
 12633  0036BA  0E00               	movlw	0
 12634  0036BC  0100               	movlb	0	; () banked
 12635  0036BE  6FAD               	movwf	(PusherTest@i+1)& (0+255),b
 12636  0036C0  0E00               	movlw	0
 12637  0036C2  6FAC               	movwf	PusherTest@i& (0+255),b
 12638  0036C4                     l7330:
 12639                           
 12640                           ; BSR set to: 0
 12641  0036C4  0100               	movlb	0	; () banked
 12642  0036C6  BFAD               	btfsc	(PusherTest@i+1)& (0+255),7,b
 12643  0036C8  D008               	goto	l1219
 12644  0036CA  0EB8               	movlw	184
 12645  0036CC  0100               	movlb	0	; () banked
 12646  0036CE  5DAC               	subwf	PusherTest@i& (0+255),w,b
 12647  0036D0  0E0B               	movlw	11
 12648  0036D2  0100               	movlb	0	; () banked
 12649  0036D4  59AD               	subwfb	(PusherTest@i+1)& (0+255),w,b
 12650  0036D6  B0D8               	btfsc	status,0,c
 12651  0036D8  D02F               	goto	l1225
 12652  0036DA                     l1219:
 12653                           
 12654                           ; BSR set to: 0
 12655                           ;Test.c: 481: LATAbits.LATA4 = 1;
 12656  0036DA  8889               	bsf	3977,4,c	;volatile
 12657                           
 12658                           ; BSR set to: 0
 12659                           ;Test.c: 482: _delay((unsigned long)((75)*(32000000/4000000.0)));
 12660  0036DC  0EC8               	movlw	200
 12661  0036DE                     u8337:
 12662  0036DE  2EE8               	decfsz	wreg,f,c
 12663  0036E0  D7FE               	bra	u8337
 12664                           
 12665                           ;Test.c: 483: LATAbits.LATA4 = 0;
 12666  0036E2  9889               	bcf	3977,4,c	;volatile
 12667                           
 12668                           ;Test.c: 484: _delay((unsigned long)((25)*(32000000/4000000.0)));
 12669  0036E4  0E42               	movlw	66
 12670  0036E6                     u8347:
 12671  0036E6  2EE8               	decfsz	wreg,f,c
 12672  0036E8  D7FE               	bra	u8347
 12673  0036EA  D000               	nop2	
 12674  0036EC  0100               	movlb	0	; () banked
 12675  0036EE  4BAC               	infsnz	PusherTest@i& (0+255),f,b
 12676  0036F0  2BAD               	incf	(PusherTest@i+1)& (0+255),f,b
 12677  0036F2  D7E8               	goto	l7330
 12678  0036F4                     l7340:
 12679                           
 12680                           ;Test.c: 487: else if (PORTB >> 4 == 0b110){
 12681  0036F4  3881               	swapf	3969,w,c	;volatile
 12682  0036F6  0B0F               	andlw	15
 12683  0036F8  0A06               	xorlw	6
 12684  0036FA  A4D8               	btfss	status,2,c
 12685  0036FC  D01D               	goto	l1225
 12686                           
 12687                           ;Test.c: 488: for(int i = 0; i<3000; i++){
 12688  0036FE  0E00               	movlw	0
 12689  003700  0100               	movlb	0	; () banked
 12690  003702  6FAF               	movwf	(PusherTest@i_1696+1)& (0+255),b
 12691  003704  0E00               	movlw	0
 12692  003706  6FAE               	movwf	PusherTest@i_1696& (0+255),b
 12693  003708                     l7344:
 12694                           
 12695                           ; BSR set to: 0
 12696  003708  0100               	movlb	0	; () banked
 12697  00370A  BFAF               	btfsc	(PusherTest@i_1696+1)& (0+255),7,b
 12698  00370C  D008               	goto	l1223
 12699  00370E  0EB8               	movlw	184
 12700  003710  0100               	movlb	0	; () banked
 12701  003712  5DAE               	subwf	PusherTest@i_1696& (0+255),w,b
 12702  003714  0E0B               	movlw	11
 12703  003716  0100               	movlb	0	; () banked
 12704  003718  59AF               	subwfb	(PusherTest@i_1696+1)& (0+255),w,b
 12705  00371A  B0D8               	btfsc	status,0,c
 12706  00371C  D00D               	goto	l1225
 12707  00371E                     l1223:
 12708                           
 12709                           ; BSR set to: 0
 12710                           ;Test.c: 489: LATAbits.LATA4 = 1;
 12711  00371E  8889               	bsf	3977,4,c	;volatile
 12712                           
 12713                           ; BSR set to: 0
 12714                           ;Test.c: 490: _delay((unsigned long)((58)*(32000000/4000000.0)));
 12715  003720  0E9A               	movlw	154
 12716  003722                     u8357:
 12717  003722  2EE8               	decfsz	wreg,f,c
 12718  003724  D7FE               	bra	u8357
 12719  003726  D000               	nop2	
 12720                           
 12721                           ;Test.c: 491: LATAbits.LATA4 = 0;
 12722  003728  9889               	bcf	3977,4,c	;volatile
 12723                           
 12724                           ;Test.c: 492: _delay((unsigned long)((42)*(32000000/4000000.0)));
 12725  00372A  0E70               	movlw	112
 12726  00372C                     u8367:
 12727  00372C  2EE8               	decfsz	wreg,f,c
 12728  00372E  D7FE               	bra	u8367
 12729  003730  0100               	movlb	0	; () banked
 12730  003732  4BAE               	infsnz	PusherTest@i_1696& (0+255),f,b
 12731  003734  2BAF               	incf	(PusherTest@i_1696+1)& (0+255),f,b
 12732  003736  D7E8               	goto	l7344
 12733  003738                     l1225:
 12734  003738  A281               	btfss	3969,1,c	;volatile
 12735  00373A  D7B3               	goto	l1212
 12736  00373C  D7FD               	goto	l1225
 12737  00373E                     __end_of_PusherTest:
 12738                           	opt stack 0
 12739                           tblptru	equ	0xFF8
 12740                           tblptrh	equ	0xFF7
 12741                           tblptrl	equ	0xFF6
 12742                           tablat	equ	0xFF5
 12743                           prodh	equ	0xFF4
 12744                           prodl	equ	0xFF3
 12745                           intcon	equ	0xFF2
 12746                           intcon2	equ	0xFF1
 12747                           intcon3	equ	0xFF0
 12748                           postinc0	equ	0xFEE
 12749                           wreg	equ	0xFE8
 12750                           postdec1	equ	0xFE5
 12751                           fsr1l	equ	0xFE1
 12752                           indf2	equ	0xFDF
 12753                           postinc2	equ	0xFDE
 12754                           postdec2	equ	0xFDD
 12755                           fsr2h	equ	0xFDA
 12756                           fsr2l	equ	0xFD9
 12757                           status	equ	0xFD8
 12758                           
 12759 ;; *************** function _PortTests *****************
 12760 ;; Defined at:
 12761 ;;		line 407 in file "Test.c"
 12762 ;; Parameters:    Size  Location     Type
 12763 ;;		None
 12764 ;; Auto vars:     Size  Location     Type
 12765 ;;		None
 12766 ;; Return value:  Size  Location     Type
 12767 ;;                  1    wreg      void 
 12768 ;; Registers used:
 12769 ;;		wreg, status,2, status,0
 12770 ;; Tracked objects:
 12771 ;;		On entry : 0/0
 12772 ;;		On exit  : 0/0
 12773 ;;		Unchanged: 0/0
 12774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12775 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12776 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12777 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12778 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12779 ;;Total ram usage:        2 bytes
 12780 ;; Hardware stack levels used:    1
 12781 ;; Hardware stack levels required when called:    7
 12782 ;; This function calls:
 12783 ;;		Nothing
 12784 ;; This function is called by:
 12785 ;;		_Test
 12786 ;; This function uses a non-reentrant model
 12787 ;;
 12788                           
 12789                           	psect	text44
 12790  003D22                     __ptext44:
 12791                           	opt stack 0
 12792  003D22                     _PortTests:
 12793                           	opt stack 22
 12794  003D22                     l1177:
 12795  003D22  A281               	btfss	3969,1,c	;volatile
 12796  003D24  D7FE               	goto	l1177
 12797                           
 12798                           ;Test.c: 411: var = PORTB >> 4;
 12799  003D26  CF81 F080          	movff	3969,??_PortTests	;volatile
 12800  003D2A  0100               	movlb	0	; () banked
 12801  003D2C  3B80               	swapf	??_PortTests& (0+255),f,b
 12802  003D2E  0E0F               	movlw	15
 12803  003D30  1780               	andwf	??_PortTests& (0+255),f,b
 12804  003D32  0100               	movlb	0	; () banked
 12805  003D34  5180               	movf	??_PortTests& (0+255),w,b
 12806  003D36  0100               	movlb	0	; () banked
 12807  003D38  6FFA               	movwf	_var& (0+255),b
 12808  003D3A  6BFB               	clrf	(_var+1)& (0+255),b
 12809                           
 12810                           ;Test.c: 412: switch(var){
 12811  003D3C  D00C               	goto	l7358
 12812  003D3E                     l1181:
 12813                           
 12814                           ; BSR set to: 0
 12815                           ;Test.c: 414: LATEbits.LATE0 = 1;
 12816  003D3E  808D               	bsf	3981,0,c	;volatile
 12817                           
 12818                           ;Test.c: 415: break;
 12819  003D40  D027               	goto	l1189
 12820  003D42                     l1183:
 12821                           
 12822                           ; BSR set to: 0
 12823                           ;Test.c: 417: LATEbits.LATE1 = 1;
 12824  003D42  828D               	bsf	3981,1,c	;volatile
 12825                           
 12826                           ;Test.c: 418: break;
 12827  003D44  D025               	goto	l1189
 12828  003D46                     l1184:
 12829                           
 12830                           ; BSR set to: 0
 12831                           ;Test.c: 420: LATDbits.LATD0 = 1;
 12832  003D46  808C               	bsf	3980,0,c	;volatile
 12833                           
 12834                           ;Test.c: 421: break;
 12835  003D48  D023               	goto	l1189
 12836  003D4A                     l1185:
 12837                           
 12838                           ; BSR set to: 0
 12839                           ;Test.c: 423: LATAbits.LATA3 = 1;
 12840  003D4A  8689               	bsf	3977,3,c	;volatile
 12841                           
 12842                           ;Test.c: 424: break;
 12843  003D4C  D021               	goto	l1189
 12844  003D4E                     l1186:
 12845                           
 12846                           ; BSR set to: 0
 12847                           ;Test.c: 426: LATAbits.LATA4 = 1;
 12848  003D4E  8889               	bsf	3977,4,c	;volatile
 12849                           
 12850                           ;Test.c: 427: break;
 12851  003D50  D01F               	goto	l1189
 12852  003D52                     l1187:
 12853                           
 12854                           ; BSR set to: 0
 12855                           ;Test.c: 429: LATAbits.LATA5 = 1;
 12856  003D52  8A89               	bsf	3977,5,c	;volatile
 12857                           
 12858                           ; BSR set to: 0
 12859                           ;Test.c: 433: }
 12860                           
 12861                           ; BSR set to: 0
 12862                           ;Test.c: 432: break;
 12863                           
 12864                           ;Test.c: 431: default:
 12865                           
 12866                           ;Test.c: 430: break;
 12867  003D54  D01D               	goto	l1189
 12868  003D56                     l7358:
 12869                           
 12870                           ; BSR set to: 0
 12871  003D56  C0FA  F080         	movff	_var,??_PortTests
 12872  003D5A  C0FB  F081         	movff	_var+1,??_PortTests+1
 12873                           
 12874                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12875                           ; Switch size 1, requested type "space"
 12876                           ; Number of cases is 1, Range of values is 0 to 0
 12877                           ; switch strategies available:
 12878                           ; Name         Instructions Cycles
 12879                           ; simple_byte            4     3 (average)
 12880                           ;	Chosen strategy is simple_byte
 12881  003D5E  0100               	movlb	0	; () banked
 12882  003D60  5181               	movf	(??_PortTests+1)& (0+255),w,b
 12883  003D62  0A00               	xorlw	0	; case 0
 12884  003D64  A4D8               	btfss	status,2,c
 12885  003D66  D014               	goto	l1189
 12886                           
 12887                           ; BSR set to: 0
 12888                           ; Switch size 1, requested type "space"
 12889                           ; Number of cases is 6, Range of values is 0 to 5
 12890                           ; switch strategies available:
 12891                           ; Name         Instructions Cycles
 12892                           ; simple_byte           19    10 (average)
 12893                           ;	Chosen strategy is simple_byte
 12894  003D68  0100               	movlb	0	; () banked
 12895  003D6A  5180               	movf	??_PortTests& (0+255),w,b
 12896  003D6C  0A00               	xorlw	0	; case 0
 12897  003D6E  B4D8               	btfsc	status,2,c
 12898  003D70  D7E6               	goto	l1181
 12899  003D72  0A01               	xorlw	1	; case 1
 12900  003D74  B4D8               	btfsc	status,2,c
 12901  003D76  D7E5               	goto	l1183
 12902  003D78  0A03               	xorlw	3	; case 2
 12903  003D7A  B4D8               	btfsc	status,2,c
 12904  003D7C  D7E4               	goto	l1184
 12905  003D7E  0A01               	xorlw	1	; case 3
 12906  003D80  B4D8               	btfsc	status,2,c
 12907  003D82  D7E3               	goto	l1185
 12908  003D84  0A07               	xorlw	7	; case 4
 12909  003D86  B4D8               	btfsc	status,2,c
 12910  003D88  D7E2               	goto	l1186
 12911  003D8A  0A01               	xorlw	1	; case 5
 12912  003D8C  B4D8               	btfsc	status,2,c
 12913  003D8E  D7E1               	goto	l1187
 12914  003D90                     l1189:
 12915  003D90  B281               	btfsc	3969,1,c	;volatile
 12916  003D92  D7FE               	goto	l1189
 12917                           
 12918                           ;Test.c: 435: __nop();
 12919  003D94  F000               	nop	
 12920                           
 12921                           ;Test.c: 436: __nop();
 12922  003D96  F000               	nop	
 12923                           
 12924                           ;Test.c: 437: LATA = 0x00;
 12925  003D98  0E00               	movlw	0
 12926  003D9A  6E89               	movwf	3977,c	;volatile
 12927                           
 12928                           ;Test.c: 438: LATE = 0x00;
 12929  003D9C  0E00               	movlw	0
 12930  003D9E  6E8D               	movwf	3981,c	;volatile
 12931                           
 12932                           ;Test.c: 439: LATD = 0x00; }
 12933  003DA0  0E00               	movlw	0
 12934  003DA2  6E8C               	movwf	3980,c	;volatile
 12935  003DA4  D7BE               	goto	l1177
 12936  003DA6                     __end_of_PortTests:
 12937                           	opt stack 0
 12938                           tblptru	equ	0xFF8
 12939                           tblptrh	equ	0xFF7
 12940                           tblptrl	equ	0xFF6
 12941                           tablat	equ	0xFF5
 12942                           prodh	equ	0xFF4
 12943                           prodl	equ	0xFF3
 12944                           intcon	equ	0xFF2
 12945                           intcon2	equ	0xFF1
 12946                           intcon3	equ	0xFF0
 12947                           postinc0	equ	0xFEE
 12948                           wreg	equ	0xFE8
 12949                           postdec1	equ	0xFE5
 12950                           fsr1l	equ	0xFE1
 12951                           indf2	equ	0xFDF
 12952                           postinc2	equ	0xFDE
 12953                           postdec2	equ	0xFDD
 12954                           fsr2h	equ	0xFDA
 12955                           fsr2l	equ	0xFD9
 12956                           status	equ	0xFD8
 12957                           
 12958 ;; *************** function _PortTestA5 *****************
 12959 ;; Defined at:
 12960 ;;		line 442 in file "Test.c"
 12961 ;; Parameters:    Size  Location     Type
 12962 ;;		None
 12963 ;; Auto vars:     Size  Location     Type
 12964 ;;		None
 12965 ;; Return value:  Size  Location     Type
 12966 ;;                  1    wreg      void 
 12967 ;; Registers used:
 12968 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12969 ;; Tracked objects:
 12970 ;;		On entry : 0/0
 12971 ;;		On exit  : 0/0
 12972 ;;		Unchanged: 0/0
 12973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12974 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12975 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12976 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12977 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12978 ;;Total ram usage:        1 bytes
 12979 ;; Hardware stack levels used:    1
 12980 ;; Hardware stack levels required when called:   10
 12981 ;; This function calls:
 12982 ;;		_lcdInst
 12983 ;;		_printf
 12984 ;; This function is called by:
 12985 ;;		_Test
 12986 ;; This function uses a non-reentrant model
 12987 ;;
 12988                           
 12989                           	psect	text45
 12990  0040F4                     __ptext45:
 12991                           	opt stack 0
 12992  0040F4                     _PortTestA5:
 12993                           	opt stack 19
 12994                           
 12995                           ;Test.c: 443: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12996                           
 12997                           ;incstack = 0
 12998  0040F4  0E01               	movlw	1
 12999  0040F6  ECD6  F024         	call	_lcdInst
 13000  0040FA  0E68               	movlw	104
 13001  0040FC  0100               	movlb	0	; () banked
 13002  0040FE  6FAB               	movwf	??_PortTestA5& (0+255),b
 13003  004100  0EE4               	movlw	228
 13004  004102                     u8377:
 13005  004102  2EE8               	decfsz	wreg,f,c
 13006  004104  D7FE               	bra	u8377
 13007  004106  2FAB               	decfsz	??_PortTestA5& (0+255),f,b
 13008  004108  D7FC               	bra	u8377
 13009  00410A  F000               	nop	
 13010  00410C  0E80               	movlw	128
 13011  00410E  ECD6  F024         	call	_lcdInst
 13012                           
 13013                           ;Test.c: 444: printf("D WILL RETURN    ");
 13014  004112  0E49               	movlw	low STR_111
 13015  004114  0100               	movlb	0	; () banked
 13016  004116  6F8E               	movwf	printf@f& (0+255),b
 13017  004118  0EFB               	movlw	high STR_111
 13018  00411A  0100               	movlb	0	; () banked
 13019  00411C  6F8F               	movwf	(printf@f+1)& (0+255),b
 13020  00411E  ECB8  F008         	call	_printf	;wreg free
 13021                           
 13022                           ;Test.c: 445: lcdInst(0b11000000);;
 13023  004122  0EC0               	movlw	192
 13024  004124  ECD6  F024         	call	_lcdInst
 13025                           
 13026                           ;Test.c: 446: printf("OTHER SETS RA5   ");
 13027  004128  0E5B               	movlw	low STR_112
 13028  00412A  0100               	movlb	0	; () banked
 13029  00412C  6F8E               	movwf	printf@f& (0+255),b
 13030  00412E  0EFB               	movlw	high STR_112
 13031  004130  0100               	movlb	0	; () banked
 13032  004132  6F8F               	movwf	(printf@f+1)& (0+255),b
 13033  004134  ECB8  F008         	call	_printf	;wreg free
 13034  004138                     l1198:
 13035  004138  A281               	btfss	3969,1,c	;volatile
 13036  00413A  D7FE               	goto	l1198
 13037                           
 13038                           ;Test.c: 451: }
 13039                           ;Test.c: 452: if(PORTB >> 4 == 0b1111){
 13040  00413C  3881               	swapf	3969,w,c	;volatile
 13041  00413E  0B0F               	andlw	15
 13042  004140  0A0F               	xorlw	15
 13043  004142  B4D8               	btfsc	status,2,c
 13044  004144  0012               	return	
 13045                           
 13046                           ;Test.c: 455: else{
 13047                           ;Test.c: 456: LATAbits.LATA5 = 1;
 13048                           
 13049                           ;Test.c: 454: }
 13050                           
 13051                           ;Test.c: 453: break;
 13052  004146  8A89               	bsf	3977,5,c	;volatile
 13053  004148                     l1204:
 13054  004148  B281               	btfsc	3969,1,c	;volatile
 13055  00414A  D7FE               	goto	l1204
 13056                           
 13057                           ;Test.c: 459: }
 13058                           ;Test.c: 460: LATAbits.LATA5 = 0;
 13059  00414C  9A89               	bcf	3977,5,c	;volatile
 13060  00414E  D7F4               	goto	l1198
 13061  004150                     __end_of_PortTestA5:
 13062                           	opt stack 0
 13063                           tblptru	equ	0xFF8
 13064                           tblptrh	equ	0xFF7
 13065                           tblptrl	equ	0xFF6
 13066                           tablat	equ	0xFF5
 13067                           prodh	equ	0xFF4
 13068                           prodl	equ	0xFF3
 13069                           intcon	equ	0xFF2
 13070                           intcon2	equ	0xFF1
 13071                           intcon3	equ	0xFF0
 13072                           postinc0	equ	0xFEE
 13073                           wreg	equ	0xFE8
 13074                           postdec1	equ	0xFE5
 13075                           fsr1l	equ	0xFE1
 13076                           indf2	equ	0xFDF
 13077                           postinc2	equ	0xFDE
 13078                           postdec2	equ	0xFDD
 13079                           fsr2h	equ	0xFDA
 13080                           fsr2l	equ	0xFD9
 13081                           status	equ	0xFD8
 13082                           
 13083 ;; *************** function _EEPROMTest *****************
 13084 ;; Defined at:
 13085 ;;		line 554 in file "Test.c"
 13086 ;; Parameters:    Size  Location     Type
 13087 ;;		None
 13088 ;; Auto vars:     Size  Location     Type
 13089 ;;		None
 13090 ;; Return value:  Size  Location     Type
 13091 ;;                  1    wreg      void 
 13092 ;; Registers used:
 13093 ;;		None
 13094 ;; Tracked objects:
 13095 ;;		On entry : 0/0
 13096 ;;		On exit  : 0/0
 13097 ;;		Unchanged: 0/0
 13098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13099 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13100 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13101 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13102 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13103 ;;Total ram usage:        0 bytes
 13104 ;; Hardware stack levels used:    1
 13105 ;; Hardware stack levels required when called:    7
 13106 ;; This function calls:
 13107 ;;		Nothing
 13108 ;; This function is called by:
 13109 ;;		_Test
 13110 ;; This function uses a non-reentrant model
 13111 ;;
 13112                           
 13113                           	psect	text46
 13114  004A10                     __ptext46:
 13115                           	opt stack 0
 13116  004A10                     _EEPROMTest:
 13117                           	opt stack 22
 13118                           
 13119                           ;incstack = 0
 13120  004A10  0012               	return		;funcret
 13121  004A12                     __end_of_EEPROMTest:
 13122                           	opt stack 0
 13123                           tblptru	equ	0xFF8
 13124                           tblptrh	equ	0xFF7
 13125                           tblptrl	equ	0xFF6
 13126                           tablat	equ	0xFF5
 13127                           prodh	equ	0xFF4
 13128                           prodl	equ	0xFF3
 13129                           intcon	equ	0xFF2
 13130                           intcon2	equ	0xFF1
 13131                           intcon3	equ	0xFF0
 13132                           postinc0	equ	0xFEE
 13133                           wreg	equ	0xFE8
 13134                           postdec1	equ	0xFE5
 13135                           fsr1l	equ	0xFE1
 13136                           indf2	equ	0xFDF
 13137                           postinc2	equ	0xFDE
 13138                           postdec2	equ	0xFDD
 13139                           fsr2h	equ	0xFDA
 13140                           fsr2l	equ	0xFD9
 13141                           status	equ	0xFD8
 13142                           
 13143 ;; *************** function _BothServos *****************
 13144 ;; Defined at:
 13145 ;;		line 350 in file "Test.c"
 13146 ;; Parameters:    Size  Location     Type
 13147 ;;		None
 13148 ;; Auto vars:     Size  Location     Type
 13149 ;;		None
 13150 ;; Return value:  Size  Location     Type
 13151 ;;                  1    wreg      void 
 13152 ;; Registers used:
 13153 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13154 ;; Tracked objects:
 13155 ;;		On entry : 0/0
 13156 ;;		On exit  : 0/0
 13157 ;;		Unchanged: 0/0
 13158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13159 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13160 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13161 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13162 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13163 ;;Total ram usage:        2 bytes
 13164 ;; Hardware stack levels used:    1
 13165 ;; Hardware stack levels required when called:   10
 13166 ;; This function calls:
 13167 ;;		_initServos
 13168 ;;		_lcdInst
 13169 ;;		_printf
 13170 ;;		_updateServoPosition
 13171 ;; This function is called by:
 13172 ;;		_Test
 13173 ;; This function uses a non-reentrant model
 13174 ;;
 13175                           
 13176                           	psect	text47
 13177  0015A8                     __ptext47:
 13178                           	opt stack 0
 13179  0015A8                     _BothServos:
 13180                           	opt stack 19
 13181                           
 13182                           ;Test.c: 351: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13183                           
 13184                           ;incstack = 0
 13185  0015A8  0E01               	movlw	1
 13186  0015AA  ECD6  F024         	call	_lcdInst
 13187  0015AE  0E68               	movlw	104
 13188  0015B0  0100               	movlb	0	; () banked
 13189  0015B2  6FAB               	movwf	??_BothServos& (0+255),b
 13190  0015B4  0EE4               	movlw	228
 13191  0015B6                     u8387:
 13192  0015B6  2EE8               	decfsz	wreg,f,c
 13193  0015B8  D7FE               	bra	u8387
 13194  0015BA  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13195  0015BC  D7FC               	bra	u8387
 13196  0015BE  F000               	nop	
 13197  0015C0  0E80               	movlw	128
 13198  0015C2  ECD6  F024         	call	_lcdInst
 13199                           
 13200                           ;Test.c: 352: printf("TST: BOTH SERVOS");
 13201  0015C6  0EB4               	movlw	low STR_110
 13202  0015C8  0100               	movlb	0	; () banked
 13203  0015CA  6F8E               	movwf	printf@f& (0+255),b
 13204  0015CC  0EFC               	movlw	high STR_110
 13205  0015CE  0100               	movlb	0	; () banked
 13206  0015D0  6F8F               	movwf	(printf@f+1)& (0+255),b
 13207  0015D2  ECB8  F008         	call	_printf	;wreg free
 13208                           
 13209                           ;Test.c: 353: TMR1ON = 1;
 13210  0015D6  80CD               	bsf	4045,0,c	;volatile
 13211                           
 13212                           ;Test.c: 354: TMR3ON = 1;
 13213  0015D8  80B1               	bsf	4017,0,c	;volatile
 13214                           
 13215                           ;Test.c: 355: machine_state = Sorting_state;
 13216  0015DA  0E01               	movlw	1
 13217  0015DC  0100               	movlb	0	; () banked
 13218  0015DE  6FFC               	movwf	_machine_state& (0+255),b
 13219                           
 13220                           ; BSR set to: 0
 13221                           ;Test.c: 356: was_low_1 = 0;
 13222  0015E0  0E00               	movlw	0
 13223  0015E2  6E7A               	movwf	_was_low_1+1,c	;volatile
 13224  0015E4  0E00               	movlw	0
 13225  0015E6  6E79               	movwf	_was_low_1,c	;volatile
 13226                           
 13227                           ; BSR set to: 0
 13228                           ;Test.c: 357: was_low_3 = 0;
 13229  0015E8  0E00               	movlw	0
 13230  0015EA  6E7C               	movwf	_was_low_3+1,c	;volatile
 13231  0015EC  0E00               	movlw	0
 13232  0015EE  6E7B               	movwf	_was_low_3,c	;volatile
 13233                           
 13234                           ; BSR set to: 0
 13235                           ;Test.c: 363: initServos();
 13236  0015F0  ECA8  F020         	call	_initServos	;wreg free
 13237                           
 13238                           ;Test.c: 364: _delay((unsigned long)((1500)*(32000000/4000.0)));
 13239  0015F4  0E3D               	movlw	61
 13240  0015F6  0100               	movlb	0	; () banked
 13241  0015F8  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13242  0015FA  0EE1               	movlw	225
 13243  0015FC  0100               	movlb	0	; () banked
 13244  0015FE  6FAB               	movwf	??_BothServos& (0+255),b
 13245  001600  0E3F               	movlw	63
 13246  001602                     u8397:
 13247  001602  2EE8               	decfsz	wreg,f,c
 13248  001604  D7FE               	bra	u8397
 13249  001606  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13250  001608  D7FC               	bra	u8397
 13251  00160A  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13252  00160C  D7FA               	bra	u8397
 13253  00160E  D000               	nop2	
 13254                           
 13255                           ;Test.c: 366: updateServoPosition(500, 1);
 13256  001610  0E01               	movlw	1
 13257  001612  0100               	movlb	0	; () banked
 13258  001614  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13259  001616  0EF4               	movlw	244
 13260  001618  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13261  00161A  0E00               	movlw	0
 13262  00161C  0100               	movlb	0	; () banked
 13263  00161E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13264  001620  0E01               	movlw	1
 13265  001622  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13266  001624  EC0F  F01F         	call	_updateServoPosition	;wreg free
 13267                           
 13268                           ;Test.c: 367: updateServoPosition(1150, 3);
 13269  001628  0E04               	movlw	4
 13270  00162A  0100               	movlb	0	; () banked
 13271  00162C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13272  00162E  0E7E               	movlw	126
 13273  001630  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13274  001632  0E00               	movlw	0
 13275  001634  0100               	movlb	0	; () banked
 13276  001636  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13277  001638  0E03               	movlw	3
 13278  00163A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13279  00163C  EC0F  F01F         	call	_updateServoPosition	;wreg free
 13280                           
 13281                           ;Test.c: 368: _delay((unsigned long)((750)*(32000000/4000.0)));
 13282  001640  0E1F               	movlw	31
 13283  001642  0100               	movlb	0	; () banked
 13284  001644  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13285  001646  0E71               	movlw	113
 13286  001648  0100               	movlb	0	; () banked
 13287  00164A  6FAB               	movwf	??_BothServos& (0+255),b
 13288  00164C  0E1E               	movlw	30
 13289  00164E                     u8407:
 13290  00164E  2EE8               	decfsz	wreg,f,c
 13291  001650  D7FE               	bra	u8407
 13292  001652  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13293  001654  D7FC               	bra	u8407
 13294  001656  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13295  001658  D7FA               	bra	u8407
 13296  00165A  F000               	nop	
 13297                           
 13298                           ;Test.c: 369: updateServoPosition(1200, 3);
 13299  00165C  0E04               	movlw	4
 13300  00165E  0100               	movlb	0	; () banked
 13301  001660  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13302  001662  0EB0               	movlw	176
 13303  001664  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13304  001666  0E00               	movlw	0
 13305  001668  0100               	movlb	0	; () banked
 13306  00166A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13307  00166C  0E03               	movlw	3
 13308  00166E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13309  001670  EC0F  F01F         	call	_updateServoPosition	;wreg free
 13310                           
 13311                           ;Test.c: 370: _delay((unsigned long)((2500)*(32000000/4000.0)));
 13312  001674  0E66               	movlw	102
 13313  001676  0100               	movlb	0	; () banked
 13314  001678  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13315  00167A  0E76               	movlw	118
 13316  00167C  0100               	movlb	0	; () banked
 13317  00167E  6FAB               	movwf	??_BothServos& (0+255),b
 13318  001680  0EC1               	movlw	193
 13319  001682                     u8417:
 13320  001682  2EE8               	decfsz	wreg,f,c
 13321  001684  D7FE               	bra	u8417
 13322  001686  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13323  001688  D7FC               	bra	u8417
 13324  00168A  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13325  00168C  D7FA               	bra	u8417
 13326                           
 13327                           ;Test.c: 371: updateServoPosition(1150, 3);
 13328  00168E  0E04               	movlw	4
 13329  001690  0100               	movlb	0	; () banked
 13330  001692  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13331  001694  0E7E               	movlw	126
 13332  001696  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13333  001698  0E00               	movlw	0
 13334  00169A  0100               	movlb	0	; () banked
 13335  00169C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13336  00169E  0E03               	movlw	3
 13337  0016A0  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13338  0016A2  EC0F  F01F         	call	_updateServoPosition	;wreg free
 13339                           
 13340                           ;Test.c: 372: _delay((unsigned long)((750)*(32000000/4000.0)));
 13341  0016A6  0E1F               	movlw	31
 13342  0016A8  0100               	movlb	0	; () banked
 13343  0016AA  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13344  0016AC  0E71               	movlw	113
 13345  0016AE  0100               	movlb	0	; () banked
 13346  0016B0  6FAB               	movwf	??_BothServos& (0+255),b
 13347  0016B2  0E1E               	movlw	30
 13348  0016B4                     u8427:
 13349  0016B4  2EE8               	decfsz	wreg,f,c
 13350  0016B6  D7FE               	bra	u8427
 13351  0016B8  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13352  0016BA  D7FC               	bra	u8427
 13353  0016BC  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13354  0016BE  D7FA               	bra	u8427
 13355  0016C0  F000               	nop	
 13356                           
 13357                           ;Test.c: 374: updateServoPosition(850, 1);
 13358  0016C2  0E03               	movlw	3
 13359  0016C4  0100               	movlb	0	; () banked
 13360  0016C6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13361  0016C8  0E52               	movlw	82
 13362  0016CA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13363  0016CC  0E00               	movlw	0
 13364  0016CE  0100               	movlb	0	; () banked
 13365  0016D0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13366  0016D2  0E01               	movlw	1
 13367  0016D4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13368  0016D6  EC0F  F01F         	call	_updateServoPosition	;wreg free
 13369                           
 13370                           ;Test.c: 375: updateServoPosition(1150, 3);
 13371  0016DA  0E04               	movlw	4
 13372  0016DC  0100               	movlb	0	; () banked
 13373  0016DE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13374  0016E0  0E7E               	movlw	126
 13375  0016E2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13376  0016E4  0E00               	movlw	0
 13377  0016E6  0100               	movlb	0	; () banked
 13378  0016E8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13379  0016EA  0E03               	movlw	3
 13380  0016EC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13381  0016EE  EC0F  F01F         	call	_updateServoPosition	;wreg free
 13382                           
 13383                           ;Test.c: 376: _delay((unsigned long)((750)*(32000000/4000.0)));
 13384  0016F2  0E1F               	movlw	31
 13385  0016F4  0100               	movlb	0	; () banked
 13386  0016F6  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13387  0016F8  0E71               	movlw	113
 13388  0016FA  0100               	movlb	0	; () banked
 13389  0016FC  6FAB               	movwf	??_BothServos& (0+255),b
 13390  0016FE  0E1E               	movlw	30
 13391  001700                     u8437:
 13392  001700  2EE8               	decfsz	wreg,f,c
 13393  001702  D7FE               	bra	u8437
 13394  001704  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13395  001706  D7FC               	bra	u8437
 13396  001708  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13397  00170A  D7FA               	bra	u8437
 13398  00170C  F000               	nop	
 13399                           
 13400                           ;Test.c: 377: updateServoPosition(1200, 3);
 13401  00170E  0E04               	movlw	4
 13402  001710  0100               	movlb	0	; () banked
 13403  001712  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13404  001714  0EB0               	movlw	176
 13405  001716  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13406  001718  0E00               	movlw	0
 13407  00171A  0100               	movlb	0	; () banked
 13408  00171C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13409  00171E  0E03               	movlw	3
 13410  001720  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13411  001722  EC0F  F01F         	call	_updateServoPosition	;wreg free
 13412                           
 13413                           ;Test.c: 378: _delay((unsigned long)((2500)*(32000000/4000.0)));
 13414  001726  0E66               	movlw	102
 13415  001728  0100               	movlb	0	; () banked
 13416  00172A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13417  00172C  0E76               	movlw	118
 13418  00172E  0100               	movlb	0	; () banked
 13419  001730  6FAB               	movwf	??_BothServos& (0+255),b
 13420  001732  0EC1               	movlw	193
 13421  001734                     u8447:
 13422  001734  2EE8               	decfsz	wreg,f,c
 13423  001736  D7FE               	bra	u8447
 13424  001738  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13425  00173A  D7FC               	bra	u8447
 13426  00173C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13427  00173E  D7FA               	bra	u8447
 13428                           
 13429                           ;Test.c: 379: updateServoPosition(1150, 3);
 13430  001740  0E04               	movlw	4
 13431  001742  0100               	movlb	0	; () banked
 13432  001744  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13433  001746  0E7E               	movlw	126
 13434  001748  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13435  00174A  0E00               	movlw	0
 13436  00174C  0100               	movlb	0	; () banked
 13437  00174E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13438  001750  0E03               	movlw	3
 13439  001752  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13440  001754  EC0F  F01F         	call	_updateServoPosition	;wreg free
 13441                           
 13442                           ;Test.c: 380: _delay((unsigned long)((750)*(32000000/4000.0)));
 13443  001758  0E1F               	movlw	31
 13444  00175A  0100               	movlb	0	; () banked
 13445  00175C  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13446  00175E  0E71               	movlw	113
 13447  001760  0100               	movlb	0	; () banked
 13448  001762  6FAB               	movwf	??_BothServos& (0+255),b
 13449  001764  0E1E               	movlw	30
 13450  001766                     u8457:
 13451  001766  2EE8               	decfsz	wreg,f,c
 13452  001768  D7FE               	bra	u8457
 13453  00176A  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13454  00176C  D7FC               	bra	u8457
 13455  00176E  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13456  001770  D7FA               	bra	u8457
 13457  001772  F000               	nop	
 13458                           
 13459                           ;Test.c: 382: updateServoPosition(1200, 1);
 13460  001774  0E04               	movlw	4
 13461  001776  0100               	movlb	0	; () banked
 13462  001778  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13463  00177A  0EB0               	movlw	176
 13464  00177C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13465  00177E  0E00               	movlw	0
 13466  001780  0100               	movlb	0	; () banked
 13467  001782  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13468  001784  0E01               	movlw	1
 13469  001786  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13470  001788  EC0F  F01F         	call	_updateServoPosition	;wreg free
 13471                           
 13472                           ;Test.c: 383: updateServoPosition(1150, 3);
 13473  00178C  0E04               	movlw	4
 13474  00178E  0100               	movlb	0	; () banked
 13475  001790  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13476  001792  0E7E               	movlw	126
 13477  001794  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13478  001796  0E00               	movlw	0
 13479  001798  0100               	movlb	0	; () banked
 13480  00179A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13481  00179C  0E03               	movlw	3
 13482  00179E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13483  0017A0  EC0F  F01F         	call	_updateServoPosition	;wreg free
 13484                           
 13485                           ;Test.c: 384: _delay((unsigned long)((1500)*(32000000/4000.0)));
 13486  0017A4  0E3D               	movlw	61
 13487  0017A6  0100               	movlb	0	; () banked
 13488  0017A8  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13489  0017AA  0EE1               	movlw	225
 13490  0017AC  0100               	movlb	0	; () banked
 13491  0017AE  6FAB               	movwf	??_BothServos& (0+255),b
 13492  0017B0  0E3F               	movlw	63
 13493  0017B2                     u8467:
 13494  0017B2  2EE8               	decfsz	wreg,f,c
 13495  0017B4  D7FE               	bra	u8467
 13496  0017B6  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13497  0017B8  D7FC               	bra	u8467
 13498  0017BA  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13499  0017BC  D7FA               	bra	u8467
 13500  0017BE  D000               	nop2	
 13501                           
 13502                           ;Test.c: 386: updateServoPosition(1670, 1);
 13503  0017C0  0E06               	movlw	6
 13504  0017C2  0100               	movlb	0	; () banked
 13505  0017C4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13506  0017C6  0E86               	movlw	134
 13507  0017C8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13508  0017CA  0E00               	movlw	0
 13509  0017CC  0100               	movlb	0	; () banked
 13510  0017CE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13511  0017D0  0E01               	movlw	1
 13512  0017D2  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13513  0017D4  EC0F  F01F         	call	_updateServoPosition	;wreg free
 13514                           
 13515                           ;Test.c: 387: updateServoPosition(1150, 3);
 13516  0017D8  0E04               	movlw	4
 13517  0017DA  0100               	movlb	0	; () banked
 13518  0017DC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13519  0017DE  0E7E               	movlw	126
 13520  0017E0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13521  0017E2  0E00               	movlw	0
 13522  0017E4  0100               	movlb	0	; () banked
 13523  0017E6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13524  0017E8  0E03               	movlw	3
 13525  0017EA  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13526  0017EC  EC0F  F01F         	call	_updateServoPosition	;wreg free
 13527                           
 13528                           ;Test.c: 388: _delay((unsigned long)((750)*(32000000/4000.0)));
 13529  0017F0  0E1F               	movlw	31
 13530  0017F2  0100               	movlb	0	; () banked
 13531  0017F4  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13532  0017F6  0E71               	movlw	113
 13533  0017F8  0100               	movlb	0	; () banked
 13534  0017FA  6FAB               	movwf	??_BothServos& (0+255),b
 13535  0017FC  0E1E               	movlw	30
 13536  0017FE                     u8477:
 13537  0017FE  2EE8               	decfsz	wreg,f,c
 13538  001800  D7FE               	bra	u8477
 13539  001802  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13540  001804  D7FC               	bra	u8477
 13541  001806  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13542  001808  D7FA               	bra	u8477
 13543  00180A  F000               	nop	
 13544                           
 13545                           ;Test.c: 389: updateServoPosition(1300, 3);
 13546  00180C  0E05               	movlw	5
 13547  00180E  0100               	movlb	0	; () banked
 13548  001810  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13549  001812  0E14               	movlw	20
 13550  001814  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13551  001816  0E00               	movlw	0
 13552  001818  0100               	movlb	0	; () banked
 13553  00181A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13554  00181C  0E03               	movlw	3
 13555  00181E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13556  001820  EC0F  F01F         	call	_updateServoPosition	;wreg free
 13557                           
 13558                           ;Test.c: 390: _delay((unsigned long)((2500)*(32000000/4000.0)));
 13559  001824  0E66               	movlw	102
 13560  001826  0100               	movlb	0	; () banked
 13561  001828  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13562  00182A  0E76               	movlw	118
 13563  00182C  0100               	movlb	0	; () banked
 13564  00182E  6FAB               	movwf	??_BothServos& (0+255),b
 13565  001830  0EC1               	movlw	193
 13566  001832                     u8487:
 13567  001832  2EE8               	decfsz	wreg,f,c
 13568  001834  D7FE               	bra	u8487
 13569  001836  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13570  001838  D7FC               	bra	u8487
 13571  00183A  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13572  00183C  D7FA               	bra	u8487
 13573                           
 13574                           ;Test.c: 391: updateServoPosition(1150, 3);
 13575  00183E  0E04               	movlw	4
 13576  001840  0100               	movlb	0	; () banked
 13577  001842  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13578  001844  0E7E               	movlw	126
 13579  001846  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13580  001848  0E00               	movlw	0
 13581  00184A  0100               	movlb	0	; () banked
 13582  00184C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13583  00184E  0E03               	movlw	3
 13584  001850  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13585  001852  EC0F  F01F         	call	_updateServoPosition	;wreg free
 13586                           
 13587                           ;Test.c: 392: _delay((unsigned long)((750)*(32000000/4000.0)));
 13588  001856  0E1F               	movlw	31
 13589  001858  0100               	movlb	0	; () banked
 13590  00185A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13591  00185C  0E71               	movlw	113
 13592  00185E  0100               	movlb	0	; () banked
 13593  001860  6FAB               	movwf	??_BothServos& (0+255),b
 13594  001862  0E1E               	movlw	30
 13595  001864                     u8497:
 13596  001864  2EE8               	decfsz	wreg,f,c
 13597  001866  D7FE               	bra	u8497
 13598  001868  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13599  00186A  D7FC               	bra	u8497
 13600  00186C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13601  00186E  D7FA               	bra	u8497
 13602  001870  F000               	nop	
 13603                           
 13604                           ;Test.c: 394: updateServoPosition(2100, 1);
 13605  001872  0E08               	movlw	8
 13606  001874  0100               	movlb	0	; () banked
 13607  001876  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13608  001878  0E34               	movlw	52
 13609  00187A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13610  00187C  0E00               	movlw	0
 13611  00187E  0100               	movlb	0	; () banked
 13612  001880  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13613  001882  0E01               	movlw	1
 13614  001884  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13615  001886  EC0F  F01F         	call	_updateServoPosition	;wreg free
 13616                           
 13617                           ;Test.c: 395: updateServoPosition(1150, 3);
 13618  00188A  0E04               	movlw	4
 13619  00188C  0100               	movlb	0	; () banked
 13620  00188E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13621  001890  0E7E               	movlw	126
 13622  001892  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13623  001894  0E00               	movlw	0
 13624  001896  0100               	movlb	0	; () banked
 13625  001898  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13626  00189A  0E03               	movlw	3
 13627  00189C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13628  00189E  EC0F  F01F         	call	_updateServoPosition	;wreg free
 13629                           
 13630                           ;Test.c: 396: _delay((unsigned long)((750)*(32000000/4000.0)));
 13631  0018A2  0E1F               	movlw	31
 13632  0018A4  0100               	movlb	0	; () banked
 13633  0018A6  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13634  0018A8  0E71               	movlw	113
 13635  0018AA  0100               	movlb	0	; () banked
 13636  0018AC  6FAB               	movwf	??_BothServos& (0+255),b
 13637  0018AE  0E1E               	movlw	30
 13638  0018B0                     u8507:
 13639  0018B0  2EE8               	decfsz	wreg,f,c
 13640  0018B2  D7FE               	bra	u8507
 13641  0018B4  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13642  0018B6  D7FC               	bra	u8507
 13643  0018B8  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13644  0018BA  D7FA               	bra	u8507
 13645  0018BC  F000               	nop	
 13646                           
 13647                           ;Test.c: 397: updateServoPosition(1300, 3);
 13648  0018BE  0E05               	movlw	5
 13649  0018C0  0100               	movlb	0	; () banked
 13650  0018C2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13651  0018C4  0E14               	movlw	20
 13652  0018C6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13653  0018C8  0E00               	movlw	0
 13654  0018CA  0100               	movlb	0	; () banked
 13655  0018CC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13656  0018CE  0E03               	movlw	3
 13657  0018D0  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13658  0018D2  EC0F  F01F         	call	_updateServoPosition	;wreg free
 13659                           
 13660                           ;Test.c: 398: _delay((unsigned long)((2500)*(32000000/4000.0)));
 13661  0018D6  0E66               	movlw	102
 13662  0018D8  0100               	movlb	0	; () banked
 13663  0018DA  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13664  0018DC  0E76               	movlw	118
 13665  0018DE  0100               	movlb	0	; () banked
 13666  0018E0  6FAB               	movwf	??_BothServos& (0+255),b
 13667  0018E2  0EC1               	movlw	193
 13668  0018E4                     u8517:
 13669  0018E4  2EE8               	decfsz	wreg,f,c
 13670  0018E6  D7FE               	bra	u8517
 13671  0018E8  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13672  0018EA  D7FC               	bra	u8517
 13673  0018EC  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13674  0018EE  D7FA               	bra	u8517
 13675                           
 13676                           ;Test.c: 399: updateServoPosition(1150, 3);
 13677  0018F0  0E04               	movlw	4
 13678  0018F2  0100               	movlb	0	; () banked
 13679  0018F4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13680  0018F6  0E7E               	movlw	126
 13681  0018F8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13682  0018FA  0E00               	movlw	0
 13683  0018FC  0100               	movlb	0	; () banked
 13684  0018FE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13685  001900  0E03               	movlw	3
 13686  001902  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13687  001904  EC0F  F01F         	call	_updateServoPosition	;wreg free
 13688                           
 13689                           ;Test.c: 400: _delay((unsigned long)((750)*(32000000/4000.0)));
 13690  001908  0E1F               	movlw	31
 13691  00190A  0100               	movlb	0	; () banked
 13692  00190C  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13693  00190E  0E71               	movlw	113
 13694  001910  0100               	movlb	0	; () banked
 13695  001912  6FAB               	movwf	??_BothServos& (0+255),b
 13696  001914  0E1E               	movlw	30
 13697  001916                     u8527:
 13698  001916  2EE8               	decfsz	wreg,f,c
 13699  001918  D7FE               	bra	u8527
 13700  00191A  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13701  00191C  D7FC               	bra	u8527
 13702  00191E  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13703  001920  D7FA               	bra	u8527
 13704  001922  F000               	nop	
 13705                           
 13706                           ;Test.c: 402: TMR1ON = 0;
 13707  001924  90CD               	bcf	4045,0,c	;volatile
 13708                           
 13709                           ;Test.c: 403: TMR3ON = 0;
 13710  001926  90B1               	bcf	4017,0,c	;volatile
 13711                           
 13712                           ;Test.c: 404: (INTCONbits.GIE = 0);
 13713  001928  9EF2               	bcf	intcon,7,c	;volatile
 13714  00192A  0012               	return		;funcret
 13715  00192C                     __end_of_BothServos:
 13716                           	opt stack 0
 13717                           tblptru	equ	0xFF8
 13718                           tblptrh	equ	0xFF7
 13719                           tblptrl	equ	0xFF6
 13720                           tablat	equ	0xFF5
 13721                           prodh	equ	0xFF4
 13722                           prodl	equ	0xFF3
 13723                           intcon	equ	0xFF2
 13724                           intcon2	equ	0xFF1
 13725                           intcon3	equ	0xFF0
 13726                           postinc0	equ	0xFEE
 13727                           wreg	equ	0xFE8
 13728                           postdec1	equ	0xFE5
 13729                           fsr1l	equ	0xFE1
 13730                           indf2	equ	0xFDF
 13731                           postinc2	equ	0xFDE
 13732                           postdec2	equ	0xFDD
 13733                           fsr2h	equ	0xFDA
 13734                           fsr2l	equ	0xFD9
 13735                           status	equ	0xFD8
 13736                           
 13737 ;; *************** function _initServos *****************
 13738 ;; Defined at:
 13739 ;;		line 300 in file "sort.c"
 13740 ;; Parameters:    Size  Location     Type
 13741 ;;		None
 13742 ;; Auto vars:     Size  Location     Type
 13743 ;;		None
 13744 ;; Return value:  Size  Location     Type
 13745 ;;                  1    wreg      void 
 13746 ;; Registers used:
 13747 ;;		wreg, status,2, status,0, cstack
 13748 ;; Tracked objects:
 13749 ;;		On entry : 0/0
 13750 ;;		On exit  : 0/0
 13751 ;;		Unchanged: 0/0
 13752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13753 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13754 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13755 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13756 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13757 ;;Total ram usage:        1 bytes
 13758 ;; Hardware stack levels used:    1
 13759 ;; Hardware stack levels required when called:    8
 13760 ;; This function calls:
 13761 ;;		_updateServoPosition
 13762 ;; This function is called by:
 13763 ;;		_Loading
 13764 ;;		_BothServos
 13765 ;; This function uses a non-reentrant model
 13766 ;;
 13767                           
 13768                           	psect	text48
 13769  004150                     __ptext48:
 13770                           	opt stack 0
 13771  004150                     _initServos:
 13772                           	opt stack 20
 13773                           
 13774                           ;sort.c: 301: updateServoPosition(1200, 1);
 13775                           
 13776                           ;incstack = 0
 13777  004150  0E04               	movlw	4
 13778  004152  0100               	movlb	0	; () banked
 13779  004154  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13780  004156  0EB0               	movlw	176
 13781  004158  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13782  00415A  0E00               	movlw	0
 13783  00415C  0100               	movlb	0	; () banked
 13784  00415E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13785  004160  0E01               	movlw	1
 13786  004162  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13787  004164  EC0F  F01F         	call	_updateServoPosition	;wreg free
 13788                           
 13789                           ;sort.c: 302: updateServoPosition(1150, 3);
 13790  004168  0E04               	movlw	4
 13791  00416A  0100               	movlb	0	; () banked
 13792  00416C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13793  00416E  0E7E               	movlw	126
 13794  004170  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13795  004172  0E00               	movlw	0
 13796  004174  0100               	movlb	0	; () banked
 13797  004176  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13798  004178  0E03               	movlw	3
 13799  00417A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13800  00417C  EC0F  F01F         	call	_updateServoPosition	;wreg free
 13801                           
 13802                           ;sort.c: 303: TMR1ON = 1;
 13803  004180  80CD               	bsf	4045,0,c	;volatile
 13804                           
 13805                           ;sort.c: 304: was_low_1 = 0;
 13806  004182  0E00               	movlw	0
 13807  004184  6E7A               	movwf	_was_low_1+1,c	;volatile
 13808  004186  0E00               	movlw	0
 13809  004188  6E79               	movwf	_was_low_1,c	;volatile
 13810                           
 13811                           ;sort.c: 305: _delay((unsigned long)((5)*(32000000/4000.0)));
 13812  00418A  0E34               	movlw	52
 13813  00418C  0100               	movlb	0	; () banked
 13814  00418E  6F88               	movwf	??_initServos& (0+255),b
 13815  004190  0EF1               	movlw	241
 13816  004192                     u8537:
 13817  004192  2EE8               	decfsz	wreg,f,c
 13818  004194  D7FE               	bra	u8537
 13819  004196  2F88               	decfsz	??_initServos& (0+255),f,b
 13820  004198  D7FC               	bra	u8537
 13821  00419A  D000               	nop2	
 13822                           
 13823                           ;sort.c: 306: TMR3ON = 1;
 13824  00419C  80B1               	bsf	4017,0,c	;volatile
 13825                           
 13826                           ;sort.c: 307: was_low_3 = 0;
 13827  00419E  0E00               	movlw	0
 13828  0041A0  6E7C               	movwf	_was_low_3+1,c	;volatile
 13829  0041A2  0E00               	movlw	0
 13830  0041A4  6E7B               	movwf	_was_low_3,c	;volatile
 13831                           
 13832                           ;sort.c: 309: LATCbits.LATC0 = 1;
 13833  0041A6  808B               	bsf	3979,0,c	;volatile
 13834  0041A8  0012               	return		;funcret
 13835  0041AA                     __end_of_initServos:
 13836                           	opt stack 0
 13837                           tblptru	equ	0xFF8
 13838                           tblptrh	equ	0xFF7
 13839                           tblptrl	equ	0xFF6
 13840                           tablat	equ	0xFF5
 13841                           prodh	equ	0xFF4
 13842                           prodl	equ	0xFF3
 13843                           intcon	equ	0xFF2
 13844                           intcon2	equ	0xFF1
 13845                           intcon3	equ	0xFF0
 13846                           postinc0	equ	0xFEE
 13847                           wreg	equ	0xFE8
 13848                           postdec1	equ	0xFE5
 13849                           fsr1l	equ	0xFE1
 13850                           indf2	equ	0xFDF
 13851                           postinc2	equ	0xFDE
 13852                           postdec2	equ	0xFDD
 13853                           fsr2h	equ	0xFDA
 13854                           fsr2l	equ	0xFD9
 13855                           status	equ	0xFD8
 13856                           
 13857 ;; *************** function _updateServoPosition *****************
 13858 ;; Defined at:
 13859 ;;		line 361 in file "sort.c"
 13860 ;; Parameters:    Size  Location     Type
 13861 ;;  time_us         2    0[BANK0 ] int 
 13862 ;;  timer           2    2[BANK0 ] int 
 13863 ;; Auto vars:     Size  Location     Type
 13864 ;;  my_time         2    6[BANK0 ] unsigned int 
 13865 ;; Return value:  Size  Location     Type
 13866 ;;                  1    wreg      void 
 13867 ;; Registers used:
 13868 ;;		wreg, status,2, status,0
 13869 ;; Tracked objects:
 13870 ;;		On entry : 0/0
 13871 ;;		On exit  : 0/0
 13872 ;;		Unchanged: 0/0
 13873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13874 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13875 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13876 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13877 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13878 ;;Total ram usage:        8 bytes
 13879 ;; Hardware stack levels used:    1
 13880 ;; Hardware stack levels required when called:    7
 13881 ;; This function calls:
 13882 ;;		Nothing
 13883 ;; This function is called by:
 13884 ;;		_Distribution
 13885 ;;		_initServos
 13886 ;;		_actuatorTest
 13887 ;;		_BothServos
 13888 ;; This function uses a non-reentrant model
 13889 ;;
 13890                           
 13891                           	psect	text49
 13892  003E1E                     __ptext49:
 13893                           	opt stack 0
 13894  003E1E                     _updateServoPosition:
 13895                           	opt stack 20
 13896                           
 13897                           ;sort.c: 362: unsigned int my_time = 65535 - time_us;
 13898                           
 13899                           ;incstack = 0
 13900  003E1E  C080  F084         	movff	updateServoPosition@time_us,??_updateServoPosition
 13901  003E22  C081  F085         	movff	updateServoPosition@time_us+1,??_updateServoPosition+1
 13902  003E26  0100               	movlb	0	; () banked
 13903  003E28  1F84               	comf	??_updateServoPosition& (0+255),f,b
 13904  003E2A  1F85               	comf	(??_updateServoPosition+1)& (0+255),f,b
 13905  003E2C  4B84               	infsnz	??_updateServoPosition& (0+255),f,b
 13906  003E2E  2B85               	incf	(??_updateServoPosition+1)& (0+255),f,b
 13907  003E30  0EFF               	movlw	255
 13908  003E32  0100               	movlb	0	; () banked
 13909  003E34  2584               	addwf	??_updateServoPosition& (0+255),w,b
 13910  003E36  0100               	movlb	0	; () banked
 13911  003E38  6F86               	movwf	updateServoPosition@my_time& (0+255),b
 13912  003E3A  0EFF               	movlw	255
 13913  003E3C  0100               	movlb	0	; () banked
 13914  003E3E  2185               	addwfc	(??_updateServoPosition+1)& (0+255),w,b
 13915  003E40  0100               	movlb	0	; () banked
 13916  003E42  6F87               	movwf	(updateServoPosition@my_time+1)& (0+255),b
 13917                           
 13918                           ;sort.c: 363: switch(timer){
 13919  003E44  D015               	goto	l5766
 13920  003E46                     l5764:
 13921                           
 13922                           ; BSR set to: 0
 13923                           ;sort.c: 365: servoTimes[0] = my_time >> 8;
 13924  003E46  0100               	movlb	0	; () banked
 13925  003E48  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 13926  003E4A  0101               	movlb	1	; () banked
 13927  003E4C  6F1C               	movwf	_servoTimes& (0+255),b
 13928  003E4E  6B1D               	clrf	(_servoTimes+1)& (0+255),b
 13929                           
 13930                           ;sort.c: 366: servoTimes[1] = my_time & 0xFF;
 13931  003E50  0100               	movlb	0	; () banked
 13932  003E52  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 13933  003E54  0101               	movlb	1	; () banked
 13934  003E56  6F1E               	movwf	(_servoTimes+2)& (0+255),b
 13935  003E58  6B1F               	clrf	(_servoTimes+3)& (0+255),b
 13936  003E5A                     l803:
 13937                           
 13938                           ;sort.c: 368: servoTimes[2] = my_time >> 8;
 13939  003E5A  0100               	movlb	0	; () banked
 13940  003E5C  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 13941  003E5E  0101               	movlb	1	; () banked
 13942  003E60  6F20               	movwf	(_servoTimes+4)& (0+255),b
 13943  003E62  6B21               	clrf	(_servoTimes+5)& (0+255),b
 13944                           
 13945                           ;sort.c: 369: servoTimes[3] = my_time & 0xFF;
 13946  003E64  0100               	movlb	0	; () banked
 13947  003E66  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 13948  003E68  0101               	movlb	1	; () banked
 13949  003E6A  6F22               	movwf	(_servoTimes+6)& (0+255),b
 13950  003E6C  6B23               	clrf	(_servoTimes+7)& (0+255),b
 13951                           
 13952                           ;sort.c: 370: }
 13953  003E6E  0012               	return	
 13954  003E70                     l5766:
 13955  003E70  C082  F084         	movff	updateServoPosition@timer,??_updateServoPosition
 13956  003E74  C083  F085         	movff	updateServoPosition@timer+1,??_updateServoPosition+1
 13957                           
 13958                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13959                           ; Switch size 1, requested type "space"
 13960                           ; Number of cases is 1, Range of values is 0 to 0
 13961                           ; switch strategies available:
 13962                           ; Name         Instructions Cycles
 13963                           ; simple_byte            4     3 (average)
 13964                           ;	Chosen strategy is simple_byte
 13965  003E78  0100               	movlb	0	; () banked
 13966  003E7A  5185               	movf	(??_updateServoPosition+1)& (0+255),w,b
 13967  003E7C  0A00               	xorlw	0	; case 0
 13968  003E7E  A4D8               	btfss	status,2,c
 13969  003E80  0012               	return	
 13970                           
 13971                           ; BSR set to: 0
 13972                           ; Switch size 1, requested type "space"
 13973                           ; Number of cases is 2, Range of values is 1 to 3
 13974                           ; switch strategies available:
 13975                           ; Name         Instructions Cycles
 13976                           ; simple_byte            7     4 (average)
 13977                           ;	Chosen strategy is simple_byte
 13978  003E82  0100               	movlb	0	; () banked
 13979  003E84  5184               	movf	??_updateServoPosition& (0+255),w,b
 13980  003E86  0A01               	xorlw	1	; case 1
 13981  003E88  B4D8               	btfsc	status,2,c
 13982  003E8A  D7DD               	goto	l5764
 13983  003E8C  0A02               	xorlw	2	; case 3
 13984  003E8E  A4D8               	btfss	status,2,c
 13985  003E90  0012               	return	
 13986  003E92  D7E3               	goto	l803
 13987  003E94                     __end_of_updateServoPosition:
 13988                           	opt stack 0
 13989                           tblptru	equ	0xFF8
 13990                           tblptrh	equ	0xFF7
 13991                           tblptrl	equ	0xFF6
 13992                           tablat	equ	0xFF5
 13993                           prodh	equ	0xFF4
 13994                           prodl	equ	0xFF3
 13995                           intcon	equ	0xFF2
 13996                           intcon2	equ	0xFF1
 13997                           intcon3	equ	0xFF0
 13998                           postinc0	equ	0xFEE
 13999                           wreg	equ	0xFE8
 14000                           postdec1	equ	0xFE5
 14001                           fsr1l	equ	0xFE1
 14002                           indf2	equ	0xFDF
 14003                           postinc2	equ	0xFDE
 14004                           postdec2	equ	0xFDD
 14005                           fsr2h	equ	0xFDA
 14006                           fsr2l	equ	0xFD9
 14007                           status	equ	0xFD8
 14008                           
 14009 ;; *************** function _BlockerTest *****************
 14010 ;; Defined at:
 14011 ;;		line 566 in file "Test.c"
 14012 ;; Parameters:    Size  Location     Type
 14013 ;;		None
 14014 ;; Auto vars:     Size  Location     Type
 14015 ;;  i               2   44[BANK0 ] int 
 14016 ;;  flag            2   46[BANK0 ] int 
 14017 ;; Return value:  Size  Location     Type
 14018 ;;                  1    wreg      void 
 14019 ;; Registers used:
 14020 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14021 ;; Tracked objects:
 14022 ;;		On entry : 0/0
 14023 ;;		On exit  : 0/0
 14024 ;;		Unchanged: 0/0
 14025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14026 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14027 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14028 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14029 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14030 ;;Total ram usage:        5 bytes
 14031 ;; Hardware stack levels used:    1
 14032 ;; Hardware stack levels required when called:   10
 14033 ;; This function calls:
 14034 ;;		_lcdInst
 14035 ;;		_printf
 14036 ;; This function is called by:
 14037 ;;		_Test
 14038 ;; This function uses a non-reentrant model
 14039 ;;
 14040                           
 14041                           	psect	text50
 14042  00373E                     __ptext50:
 14043                           	opt stack 0
 14044  00373E                     _BlockerTest:
 14045                           	opt stack 19
 14046                           
 14047                           ;Test.c: 567: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14048                           
 14049                           ;incstack = 0
 14050  00373E  0E01               	movlw	1
 14051  003740  ECD6  F024         	call	_lcdInst
 14052  003744  0E68               	movlw	104
 14053  003746  0100               	movlb	0	; () banked
 14054  003748  6FAB               	movwf	??_BlockerTest& (0+255),b
 14055  00374A  0EE4               	movlw	228
 14056  00374C                     u8547:
 14057  00374C  2EE8               	decfsz	wreg,f,c
 14058  00374E  D7FE               	bra	u8547
 14059  003750  2FAB               	decfsz	??_BlockerTest& (0+255),f,b
 14060  003752  D7FC               	bra	u8547
 14061  003754  F000               	nop	
 14062  003756  0E80               	movlw	128
 14063  003758  ECD6  F024         	call	_lcdInst
 14064                           
 14065                           ;Test.c: 568: printf("D WILL RETURN    ");
 14066  00375C  0E49               	movlw	low STR_111
 14067  00375E  0100               	movlb	0	; () banked
 14068  003760  6F8E               	movwf	printf@f& (0+255),b
 14069  003762  0EFB               	movlw	high STR_111
 14070  003764  0100               	movlb	0	; () banked
 14071  003766  6F8F               	movwf	(printf@f+1)& (0+255),b
 14072  003768  ECB8  F008         	call	_printf	;wreg free
 14073                           
 14074                           ;Test.c: 569: lcdInst(0b11000000);;
 14075  00376C  0EC0               	movlw	192
 14076  00376E  ECD6  F024         	call	_lcdInst
 14077                           
 14078                           ;Test.c: 570: printf("OTHER TOGGLES CAM");
 14079  003772  0E7F               	movlw	low STR_119
 14080  003774  0100               	movlb	0	; () banked
 14081  003776  6F8E               	movwf	printf@f& (0+255),b
 14082  003778  0EFB               	movlw	high STR_119
 14083  00377A  0100               	movlb	0	; () banked
 14084  00377C  6F8F               	movwf	(printf@f+1)& (0+255),b
 14085  00377E  ECB8  F008         	call	_printf	;wreg free
 14086                           
 14087                           ;Test.c: 571: int flag = 1;
 14088  003782  0E00               	movlw	0
 14089  003784  0100               	movlb	0	; () banked
 14090  003786  6FAF               	movwf	(BlockerTest@flag+1)& (0+255),b
 14091  003788  0E01               	movlw	1
 14092  00378A  6FAE               	movwf	BlockerTest@flag& (0+255),b
 14093  00378C                     l1264:
 14094  00378C  A281               	btfss	3969,1,c	;volatile
 14095  00378E  D7FE               	goto	l1264
 14096                           
 14097                           ;Test.c: 574: if(PORTB >> 4 == 0b1111){
 14098  003790  3881               	swapf	3969,w,c	;volatile
 14099  003792  0B0F               	andlw	15
 14100  003794  0A0F               	xorlw	15
 14101  003796  B4D8               	btfsc	status,2,c
 14102  003798  0012               	return	
 14103                           
 14104                           ;Test.c: 577: else{
 14105                           ;Test.c: 578: if(flag){
 14106                           
 14107                           ;Test.c: 576: }
 14108                           
 14109                           ;Test.c: 575: break;
 14110  00379A  0100               	movlb	0	; () banked
 14111  00379C  51AE               	movf	BlockerTest@flag& (0+255),w,b
 14112  00379E  0100               	movlb	0	; () banked
 14113  0037A0  11AF               	iorwf	(BlockerTest@flag+1)& (0+255),w,b
 14114  0037A2  B4D8               	btfsc	status,2,c
 14115  0037A4  D007               	goto	l7484
 14116                           
 14117                           ; BSR set to: 0
 14118                           ;Test.c: 579: LATCbits.LATC0 = 1;
 14119  0037A6  808B               	bsf	3979,0,c	;volatile
 14120  0037A8  D023               	goto	l7496
 14121  0037AA                     u6031:
 14122  0037AA  0E01               	movlw	1
 14123  0037AC                     u6040:
 14124  0037AC  0100               	movlb	0	; () banked
 14125  0037AE  6FAE               	movwf	BlockerTest@flag& (0+255),b
 14126  0037B0  6BAF               	clrf	(BlockerTest@flag+1)& (0+255),b
 14127                           
 14128                           ;Test.c: 581: }
 14129  0037B2  D026               	goto	l1274
 14130  0037B4                     l7484:
 14131                           
 14132                           ; BSR set to: 0
 14133                           ;Test.c: 582: else{
 14134                           ;Test.c: 583: for(int i=0;i<5000;i++)
 14135  0037B4  0E00               	movlw	0
 14136  0037B6  0100               	movlb	0	; () banked
 14137  0037B8  6FAD               	movwf	(BlockerTest@i+1)& (0+255),b
 14138  0037BA  0E00               	movlw	0
 14139  0037BC  6FAC               	movwf	BlockerTest@i& (0+255),b
 14140  0037BE                     l7486:
 14141                           
 14142                           ; BSR set to: 0
 14143  0037BE  0100               	movlb	0	; () banked
 14144  0037C0  BFAD               	btfsc	(BlockerTest@i+1)& (0+255),7,b
 14145  0037C2  D008               	goto	l1272
 14146  0037C4  0E88               	movlw	136
 14147  0037C6  0100               	movlb	0	; () banked
 14148  0037C8  5DAC               	subwf	BlockerTest@i& (0+255),w,b
 14149  0037CA  0E13               	movlw	19
 14150  0037CC  0100               	movlb	0	; () banked
 14151  0037CE  59AD               	subwfb	(BlockerTest@i+1)& (0+255),w,b
 14152  0037D0  B0D8               	btfsc	status,0,c
 14153  0037D2  D00D               	goto	l1273
 14154  0037D4                     l1272:
 14155                           
 14156                           ; BSR set to: 0
 14157                           ;Test.c: 584: {
 14158                           ;Test.c: 585: LATCbits.LATC0 = 1;
 14159  0037D4  808B               	bsf	3979,0,c	;volatile
 14160                           
 14161                           ; BSR set to: 0
 14162                           ;Test.c: 586: _delay((unsigned long)((10)*(32000000/4000000.0)));
 14163  0037D6  0E1A               	movlw	26
 14164  0037D8                     u8557:
 14165  0037D8  2EE8               	decfsz	wreg,f,c
 14166  0037DA  D7FE               	bra	u8557
 14167  0037DC  D000               	nop2	
 14168                           
 14169                           ;Test.c: 587: LATCbits.LATC0 = 0;
 14170  0037DE  908B               	bcf	3979,0,c	;volatile
 14171                           
 14172                           ;Test.c: 588: _delay((unsigned long)((90)*(32000000/4000000.0)));
 14173  0037E0  0EF0               	movlw	240
 14174  0037E2                     u8567:
 14175  0037E2  2EE8               	decfsz	wreg,f,c
 14176  0037E4  D7FE               	bra	u8567
 14177  0037E6  0100               	movlb	0	; () banked
 14178  0037E8  4BAC               	infsnz	BlockerTest@i& (0+255),f,b
 14179  0037EA  2BAD               	incf	(BlockerTest@i+1)& (0+255),f,b
 14180  0037EC  D7E8               	goto	l7486
 14181  0037EE                     l1273:
 14182                           
 14183                           ; BSR set to: 0
 14184                           ;Test.c: 589: }
 14185                           ;Test.c: 590: LATCbits.LATC0 = 0;
 14186  0037EE  908B               	bcf	3979,0,c	;volatile
 14187  0037F0                     l7496:
 14188                           
 14189                           ; BSR set to: 0
 14190                           ;Test.c: 591: flag = !flag;
 14191  0037F0  0100               	movlb	0	; () banked
 14192  0037F2  51AE               	movf	BlockerTest@flag& (0+255),w,b
 14193  0037F4  0100               	movlb	0	; () banked
 14194  0037F6  11AF               	iorwf	(BlockerTest@flag+1)& (0+255),w,b
 14195  0037F8  B4D8               	btfsc	status,2,c
 14196  0037FA  D7D7               	goto	u6031
 14197  0037FC  0E00               	movlw	0
 14198  0037FE  D7D6               	goto	u6040
 14199  003800                     l1274:
 14200  003800  A281               	btfss	3969,1,c	;volatile
 14201  003802  D7C4               	goto	l1264
 14202  003804  D7FD               	goto	l1274
 14203  003806                     __end_of_BlockerTest:
 14204                           	opt stack 0
 14205                           tblptru	equ	0xFF8
 14206                           tblptrh	equ	0xFF7
 14207                           tblptrl	equ	0xFF6
 14208                           tablat	equ	0xFF5
 14209                           prodh	equ	0xFF4
 14210                           prodl	equ	0xFF3
 14211                           intcon	equ	0xFF2
 14212                           intcon2	equ	0xFF1
 14213                           intcon3	equ	0xFF0
 14214                           postinc0	equ	0xFEE
 14215                           wreg	equ	0xFE8
 14216                           postdec1	equ	0xFE5
 14217                           fsr1l	equ	0xFE1
 14218                           indf2	equ	0xFDF
 14219                           postinc2	equ	0xFDE
 14220                           postdec2	equ	0xFDD
 14221                           fsr2h	equ	0xFDA
 14222                           fsr2l	equ	0xFD9
 14223                           status	equ	0xFD8
 14224                           
 14225 ;; *************** function _printf *****************
 14226 ;; Defined at:
 14227 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 14228 ;; Parameters:    Size  Location     Type
 14229 ;;  f               2   14[BANK0 ] PTR const unsigned char 
 14230 ;;		 -> STR_119(18), STR_118(18), STR_117(18), STR_116(18), 
 14231 ;;		 -> STR_115(17), STR_114(17), STR_113(11), STR_112(18), 
 14232 ;;		 -> STR_111(18), STR_110(17), STR_109(15), STR_108(15), 
 14233 ;;		 -> STR_107(15), STR_106(17), STR_105(17), STR_104(17), 
 14234 ;;		 -> STR_103(16), STR_102(17), STR_101(17), STR_100(17), 
 14235 ;;		 -> STR_99(17), STR_98(17), STR_97(17), STR_96(15), 
 14236 ;;		 -> STR_95(11), STR_94(17), STR_93(11), STR_92(17), 
 14237 ;;		 -> STR_91(14), STR_90(15), STR_89(14), STR_88(10), 
 14238 ;;		 -> STR_87(9), STR_86(9), STR_85(10), STR_84(10), 
 14239 ;;		 -> STR_83(16), STR_82(15), STR_81(3), STR_80(15), 
 14240 ;;		 -> STR_79(13), STR_78(14), STR_77(8), STR_76(14), 
 14241 ;;		 -> STR_75(15), STR_74(12), STR_73(14), STR_72(17), 
 14242 ;;		 -> STR_71(14), STR_70(15), STR_69(17), STR_68(17), 
 14243 ;;		 -> STR_67(7), STR_66(21), STR_65(13), STR_64(11), 
 14244 ;;		 -> STR_63(24), STR_50(17), STR_49(17), STR_48(17), 
 14245 ;;		 -> STR_47(17), STR_46(17), STR_45(17), STR_44(17), 
 14246 ;;		 -> STR_43(17), STR_42(17), STR_41(17), STR_40(17), 
 14247 ;;		 -> STR_39(17), STR_38(17), STR_37(17), STR_36(17), 
 14248 ;;		 -> STR_35(17), STR_34(17), STR_33(17), STR_32(17), 
 14249 ;;		 -> STR_31(17), STR_30(17), STR_29(3), STR_28(17), 
 14250 ;;		 -> STR_27(17), STR_26(17), STR_25(17), STR_24(17), 
 14251 ;;		 -> STR_23(14), STR_22(10), STR_21(24), STR_7(7), 
 14252 ;;		 -> STR_6(17), STR_5(18), STR_4(16), STR_3(18), 
 14253 ;;		 -> STR_2(14), STR_1(18), 
 14254 ;; Auto vars:     Size  Location     Type
 14255 ;;  tmpval          4    0        struct .
 14256 ;;  width           2   41[BANK0 ] int 
 14257 ;;  val             2   37[BANK0 ] unsigned int 
 14258 ;;  len             2   35[BANK0 ] unsigned int 
 14259 ;;  ap              2   33[BANK0 ] PTR void [1]
 14260 ;;		 -> ?i2_printf(2), ?_printf(2), 
 14261 ;;  cp              2   31[BANK0 ] PTR const unsigned char 
 14262 ;;		 -> STR_120(7), count_total(2), printRTC@month(4), UI@month(4), 
 14263 ;;  c               1   40[BANK0 ] char 
 14264 ;;  flag            1   39[BANK0 ] unsigned char 
 14265 ;;  prec            1   30[BANK0 ] char 
 14266 ;; Return value:  Size  Location     Type
 14267 ;;                  2   14[BANK0 ] int 
 14268 ;; Registers used:
 14269 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14270 ;; Tracked objects:
 14271 ;;		On entry : 0/0
 14272 ;;		On exit  : 0/0
 14273 ;;		Unchanged: 0/0
 14274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14275 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14276 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14277 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14278 ;;      Totals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14279 ;;Total ram usage:       29 bytes
 14280 ;; Hardware stack levels used:    1
 14281 ;; Hardware stack levels required when called:    9
 14282 ;; This function calls:
 14283 ;;		___lwdiv
 14284 ;;		___lwmod
 14285 ;;		___wmul
 14286 ;;		_isdigit
 14287 ;;		_putch
 14288 ;; This function is called by:
 14289 ;;		_UI
 14290 ;;		_change_state_to_menu_start
 14291 ;;		_change_state_to_menu_12
 14292 ;;		_change_state_to_menu_22
 14293 ;;		_printRTC
 14294 ;;		_EEPROM_write
 14295 ;;		_Test
 14296 ;;		_algorithmTest
 14297 ;;		_sensorTest
 14298 ;;		_actuatorTest
 14299 ;;		_BothServos
 14300 ;;		_PortTestA5
 14301 ;;		_PusherTest
 14302 ;;		_SpeedTest
 14303 ;;		_BlockerTest
 14304 ;;		_ToggleTestA5
 14305 ;; This function uses a non-reentrant model
 14306 ;;
 14307                           
 14308                           	psect	text51
 14309  001170                     __ptext51:
 14310                           	opt stack 0
 14311  001170                     _printf:
 14312                           	opt stack 18
 14313                           
 14314                           ;doprnt.c: 466: va_list ap;
 14315                           ;doprnt.c: 499: signed char c;
 14316                           ;doprnt.c: 501: int width;
 14317                           ;doprnt.c: 506: signed char prec;
 14318                           ;doprnt.c: 508: unsigned char flag;
 14319                           ;doprnt.c: 523: union {
 14320                           ;doprnt.c: 524: unsigned long vd;
 14321                           ;doprnt.c: 525: double integ;
 14322                           ;doprnt.c: 526: } tmpval;
 14323                           ;doprnt.c: 528: unsigned int val;
 14324                           ;doprnt.c: 529: unsigned len;
 14325                           ;doprnt.c: 530: const char * cp;
 14326                           ;doprnt.c: 533: *ap = __va_start();
 14327                           
 14328                           ;incstack = 0
 14329  001170  0E90               	movlw	low (?_printf+2)
 14330  001172  0100               	movlb	0	; () banked
 14331  001174  6FA1               	movwf	printf@ap& (0+255),b
 14332  001176  0E00               	movlw	high (?_printf+2)
 14333  001178  0100               	movlb	0	; () banked
 14334  00117A  6FA2               	movwf	(printf@ap+1)& (0+255),b
 14335                           
 14336                           ;doprnt.c: 536: while(c = *f++) {
 14337  00117C  D205               	goto	l5724
 14338  00117E                     l5594:
 14339                           
 14340                           ; BSR set to: 0
 14341                           ;doprnt.c: 538: if(c != '%')
 14342  00117E  0E25               	movlw	37
 14343  001180  0100               	movlb	0	; () banked
 14344  001182  19A8               	xorwf	printf@c& (0+255),w,b
 14345  001184  B4D8               	btfsc	status,2,c
 14346  001186  D005               	goto	l5598
 14347                           
 14348                           ; BSR set to: 0
 14349                           ;doprnt.c: 540: {
 14350                           ;doprnt.c: 541: (putch(c) );
 14351  001188  0100               	movlb	0	; () banked
 14352  00118A  51A8               	movf	printf@c& (0+255),w,b
 14353  00118C  ECCE  F024         	call	_putch
 14354                           
 14355                           ;doprnt.c: 542: continue;
 14356  001190  D1FB               	goto	l5724
 14357  001192                     l5598:
 14358                           
 14359                           ;doprnt.c: 543: }
 14360                           ;doprnt.c: 546: width = 0;
 14361  001192  0E00               	movlw	0
 14362  001194  0100               	movlb	0	; () banked
 14363  001196  6FAA               	movwf	(printf@width+1)& (0+255),b
 14364  001198  0E00               	movlw	0
 14365  00119A  6FA9               	movwf	printf@width& (0+255),b
 14366                           
 14367                           ;doprnt.c: 548: flag = 0;
 14368  00119C  0E00               	movlw	0
 14369  00119E  0100               	movlb	0	; () banked
 14370  0011A0  6FA7               	movwf	printf@flag& (0+255),b
 14371                           
 14372                           ; BSR set to: 0
 14373                           ;doprnt.c: 551: switch(*f) {
 14374                           
 14375                           ;doprnt.c: 550: for(;;) {
 14376  0011A2  D005               	goto	l5604
 14377  0011A4                     l5600:
 14378                           
 14379                           ;doprnt.c: 580: flag |= 0x04;
 14380  0011A4  0100               	movlb	0	; () banked
 14381  0011A6  85A7               	bsf	printf@flag& (0+255),2,b
 14382                           
 14383                           ;doprnt.c: 581: f++;
 14384  0011A8  0100               	movlb	0	; () banked
 14385  0011AA  4B8E               	infsnz	printf@f& (0+255),f,b
 14386  0011AC  2B8F               	incf	(printf@f+1)& (0+255),f,b
 14387  0011AE                     l5604:
 14388  0011AE  C08E  FFF6         	movff	printf@f,tblptrl
 14389  0011B2  C08F  FFF7         	movff	printf@f+1,tblptrh
 14390  0011B6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 14391  0011B6  6AF8               	clrf	tblptru,c
 14392  0011B8                     	endif
 14393  0011B8                     	if	0	;tblptru may be non-zero
 14394  0011B8                     	endif
 14395  0011B8  0008               	tblrd		*
 14396  0011BA  50F5               	movf	tablat,w,c
 14397                           
 14398                           ; Switch size 1, requested type "space"
 14399                           ; Number of cases is 1, Range of values is 48 to 48
 14400                           ; switch strategies available:
 14401                           ; Name         Instructions Cycles
 14402                           ; simple_byte            4     3 (average)
 14403                           ;	Chosen strategy is simple_byte
 14404  0011BC  0A30               	xorlw	48	; case 48
 14405  0011BE  B4D8               	btfsc	status,2,c
 14406  0011C0  D7F1               	goto	l5600
 14407                           
 14408                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 14409                           
 14410                           ;doprnt.c: 586: }
 14411                           
 14412                           ;doprnt.c: 585: break;
 14413  0011C2  C08E  FFF6         	movff	printf@f,tblptrl
 14414  0011C6  C08F  FFF7         	movff	printf@f+1,tblptrh
 14415  0011CA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 14416  0011CA  6AF8               	clrf	tblptru,c
 14417  0011CC                     	endif
 14418  0011CC                     	if	0	;tblptru may be non-zero
 14419  0011CC                     	endif
 14420  0011CC  0008               	tblrd		*
 14421  0011CE  50F5               	movf	tablat,w,c
 14422  0011D0  ECF3  F023         	call	_isdigit
 14423  0011D4  A0D8               	btfss	status,0,c
 14424  0011D6  D0D2               	goto	l5652
 14425                           
 14426                           ;doprnt.c: 598: width = 0;
 14427  0011D8  0E00               	movlw	0
 14428  0011DA  0100               	movlb	0	; () banked
 14429  0011DC  6FAA               	movwf	(printf@width+1)& (0+255),b
 14430  0011DE  0E00               	movlw	0
 14431  0011E0  6FA9               	movwf	printf@width& (0+255),b
 14432  0011E2                     l5610:
 14433                           
 14434                           ;doprnt.c: 600: width *= 10;
 14435  0011E2  C0A9  F080         	movff	printf@width,___wmul@multiplier
 14436  0011E6  C0AA  F081         	movff	printf@width+1,___wmul@multiplier+1
 14437  0011EA  0E00               	movlw	0
 14438  0011EC  0100               	movlb	0	; () banked
 14439  0011EE  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
 14440  0011F0  0E0A               	movlw	10
 14441  0011F2  6F82               	movwf	___wmul@multiplicand& (0+255),b
 14442  0011F4  EC5D  F022         	call	___wmul	;wreg free
 14443  0011F8  C080  F0A9         	movff	?___wmul,printf@width
 14444  0011FC  C081  F0AA         	movff	?___wmul+1,printf@width+1
 14445                           
 14446                           ;doprnt.c: 601: width += *f++ - '0';
 14447  001200  0ED0               	movlw	208
 14448  001202  0100               	movlb	0	; () banked
 14449  001204  6F9A               	movwf	??_printf& (0+255),b
 14450  001206  0EFF               	movlw	255
 14451  001208  0100               	movlb	0	; () banked
 14452  00120A  6F9B               	movwf	(??_printf+1)& (0+255),b
 14453  00120C  C08E  FFF6         	movff	printf@f,tblptrl
 14454  001210  C08F  FFF7         	movff	printf@f+1,tblptrh
 14455  001214                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 14456  001214  6AF8               	clrf	tblptru,c
 14457  001216                     	endif
 14458  001216                     	if	0	;tblptru may be non-zero
 14459  001216                     	endif
 14460  001216  0008               	tblrd		*
 14461  001218  50F5               	movf	tablat,w,c
 14462  00121A  0100               	movlb	0	; () banked
 14463  00121C  6F9C               	movwf	(??_printf+2)& (0+255),b
 14464  00121E  6B9D               	clrf	(??_printf+3)& (0+255),b
 14465  001220  0100               	movlb	0	; () banked
 14466  001222  519A               	movf	??_printf& (0+255),w,b
 14467  001224  0100               	movlb	0	; () banked
 14468  001226  279C               	addwf	(??_printf+2)& (0+255),f,b
 14469  001228  0100               	movlb	0	; () banked
 14470  00122A  519B               	movf	(??_printf+1)& (0+255),w,b
 14471  00122C  0100               	movlb	0	; () banked
 14472  00122E  239D               	addwfc	(??_printf+3)& (0+255),f,b
 14473  001230  0100               	movlb	0	; () banked
 14474  001232  519C               	movf	(??_printf+2)& (0+255),w,b
 14475  001234  0100               	movlb	0	; () banked
 14476  001236  27A9               	addwf	printf@width& (0+255),f,b
 14477  001238  0100               	movlb	0	; () banked
 14478  00123A  519D               	movf	(??_printf+3)& (0+255),w,b
 14479  00123C  0100               	movlb	0	; () banked
 14480  00123E  23AA               	addwfc	(printf@width+1)& (0+255),f,b
 14481                           
 14482                           ; BSR set to: 0
 14483  001240  0100               	movlb	0	; () banked
 14484  001242  4B8E               	infsnz	printf@f& (0+255),f,b
 14485  001244  2B8F               	incf	(printf@f+1)& (0+255),f,b
 14486                           
 14487                           ; BSR set to: 0
 14488                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 14489  001246  C08E  FFF6         	movff	printf@f,tblptrl
 14490  00124A  C08F  FFF7         	movff	printf@f+1,tblptrh
 14491  00124E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 14492  00124E  6AF8               	clrf	tblptru,c
 14493  001250                     	endif
 14494  001250                     	if	0	;tblptru may be non-zero
 14495  001250                     	endif
 14496  001250  0008               	tblrd		*
 14497  001252  50F5               	movf	tablat,w,c
 14498  001254  ECF3  F023         	call	_isdigit
 14499  001258  A0D8               	btfss	status,0,c
 14500  00125A  D090               	goto	l5652
 14501  00125C  D7C2               	goto	l5610
 14502  00125E                     l5618:
 14503                           
 14504                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 14505  00125E  C0A1  FFD9         	movff	printf@ap,fsr2l
 14506  001262  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 14507  001266  CFDE F09F          	movff	postinc2,printf@cp
 14508  00126A  CFDD F0A0          	movff	postdec2,printf@cp+1
 14509  00126E  0E02               	movlw	2
 14510  001270  0100               	movlb	0	; () banked
 14511  001272  27A1               	addwf	printf@ap& (0+255),f,b
 14512  001274  0E00               	movlw	0
 14513  001276  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 14514                           
 14515                           ; BSR set to: 0
 14516                           ;doprnt.c: 740: if(!cp)
 14517  001278  0100               	movlb	0	; () banked
 14518  00127A  519F               	movf	printf@cp& (0+255),w,b
 14519  00127C  0100               	movlb	0	; () banked
 14520  00127E  11A0               	iorwf	(printf@cp+1)& (0+255),w,b
 14521  001280  A4D8               	btfss	status,2,c
 14522  001282  D006               	goto	l5626
 14523                           
 14524                           ; BSR set to: 0
 14525                           ;doprnt.c: 741: cp = "(null)";
 14526  001284  0EB6               	movlw	low STR_120
 14527  001286  0100               	movlb	0	; () banked
 14528  001288  6F9F               	movwf	printf@cp& (0+255),b
 14529  00128A  0EFF               	movlw	high STR_120
 14530  00128C  0100               	movlb	0	; () banked
 14531  00128E  6FA0               	movwf	(printf@cp+1)& (0+255),b
 14532  001290                     l5626:
 14533                           
 14534                           ; BSR set to: 0
 14535                           ;doprnt.c: 745: len = 0;
 14536  001290  0E00               	movlw	0
 14537  001292  0100               	movlb	0	; () banked
 14538  001294  6FA4               	movwf	(printf@len+1)& (0+255),b
 14539  001296  0E00               	movlw	0
 14540  001298  6FA3               	movwf	printf@len& (0+255),b
 14541                           
 14542                           ;doprnt.c: 746: while(cp[len])
 14543  00129A  D003               	goto	l5630
 14544  00129C                     l5628:
 14545                           
 14546                           ;doprnt.c: 747: len++;
 14547  00129C  0100               	movlb	0	; () banked
 14548  00129E  4BA3               	infsnz	printf@len& (0+255),f,b
 14549  0012A0  2BA4               	incf	(printf@len+1)& (0+255),f,b
 14550  0012A2                     l5630:
 14551                           
 14552                           ; BSR set to: 0
 14553  0012A2  0100               	movlb	0	; () banked
 14554  0012A4  51A3               	movf	printf@len& (0+255),w,b
 14555  0012A6  0100               	movlb	0	; () banked
 14556  0012A8  259F               	addwf	printf@cp& (0+255),w,b
 14557  0012AA  0100               	movlb	0	; () banked
 14558  0012AC  6F9A               	movwf	??_printf& (0+255),b
 14559  0012AE  0100               	movlb	0	; () banked
 14560  0012B0  51A4               	movf	(printf@len+1)& (0+255),w,b
 14561  0012B2  0100               	movlb	0	; () banked
 14562  0012B4  21A0               	addwfc	(printf@cp+1)& (0+255),w,b
 14563  0012B6  0100               	movlb	0	; () banked
 14564  0012B8  6F9B               	movwf	(??_printf+1)& (0+255),b
 14565  0012BA  C09A  FFF6         	movff	??_printf,tblptrl
 14566  0012BE  C09B  FFF7         	movff	??_printf+1,tblptrh
 14567  0012C2  0E00               	movlw	low (__mediumconst shr (0+16))
 14568  0012C4  6EF8               	movwf	tblptru,c
 14569  0012C6  0E0F               	movlw	(high __ramtop+-1)
 14570  0012C8  64F7               	cpfsgt	tblptrh,c
 14571  0012CA  D003               	bra	u4007
 14572  0012CC  0008               	tblrd		*
 14573  0012CE  50F5               	movf	tablat,w,c
 14574  0012D0  D005               	bra	u4000
 14575  0012D2                     u4007:
 14576  0012D2  CFF6 FFE9          	movff	tblptrl,fsr0l
 14577  0012D6  CFF7 FFEA          	movff	tblptrh,fsr0h
 14578  0012DA  50EF               	movf	indf0,w,c
 14579  0012DC                     u4000:
 14580  0012DC  0900               	iorlw	0
 14581  0012DE  A4D8               	btfss	status,2,c
 14582  0012E0  D7DD               	goto	l5628
 14583                           
 14584                           ;doprnt.c: 757: if(width > len)
 14585  0012E2  0100               	movlb	0	; () banked
 14586  0012E4  51A9               	movf	printf@width& (0+255),w,b
 14587  0012E6  0100               	movlb	0	; () banked
 14588  0012E8  5DA3               	subwf	printf@len& (0+255),w,b
 14589  0012EA  0100               	movlb	0	; () banked
 14590  0012EC  51AA               	movf	(printf@width+1)& (0+255),w,b
 14591  0012EE  0100               	movlb	0	; () banked
 14592  0012F0  59A4               	subwfb	(printf@len+1)& (0+255),w,b
 14593  0012F2  B0D8               	btfsc	status,0,c
 14594  0012F4  D009               	goto	l5636
 14595                           
 14596                           ; BSR set to: 0
 14597                           ;doprnt.c: 758: width -= len;
 14598  0012F6  0100               	movlb	0	; () banked
 14599  0012F8  51A3               	movf	printf@len& (0+255),w,b
 14600  0012FA  0100               	movlb	0	; () banked
 14601  0012FC  5FA9               	subwf	printf@width& (0+255),f,b
 14602  0012FE  0100               	movlb	0	; () banked
 14603  001300  51A4               	movf	(printf@len+1)& (0+255),w,b
 14604  001302  0100               	movlb	0	; () banked
 14605  001304  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 14606  001306  D009               	goto	l5640
 14607  001308                     l5636:
 14608                           
 14609                           ; BSR set to: 0
 14610                           ;doprnt.c: 759: else
 14611                           ;doprnt.c: 760: width = 0;
 14612  001308  0E00               	movlw	0
 14613  00130A  0100               	movlb	0	; () banked
 14614  00130C  6FAA               	movwf	(printf@width+1)& (0+255),b
 14615  00130E  0E00               	movlw	0
 14616  001310  6FA9               	movwf	printf@width& (0+255),b
 14617                           
 14618                           ; BSR set to: 0
 14619                           ;doprnt.c: 764: while(width--)
 14620  001312  D003               	goto	l5640
 14621  001314                     l5638:
 14622                           
 14623                           ; BSR set to: 0
 14624                           ;doprnt.c: 765: (putch(' ') );
 14625  001314  0E20               	movlw	32
 14626  001316  ECCE  F024         	call	_putch
 14627  00131A                     l5640:
 14628  00131A  0100               	movlb	0	; () banked
 14629  00131C  07A9               	decf	printf@width& (0+255),f,b
 14630  00131E  A0D8               	btfss	status,0,c
 14631  001320  07AA               	decf	(printf@width+1)& (0+255),f,b
 14632  001322  0100               	movlb	0	; () banked
 14633  001324  29A9               	incf	printf@width& (0+255),w,b
 14634  001326  E1F6               	bnz	l5638
 14635  001328  0100               	movlb	0	; () banked
 14636  00132A  29AA               	incf	(printf@width+1)& (0+255),w,b
 14637  00132C  B4D8               	btfsc	status,2,c
 14638  00132E  D017               	goto	l5646
 14639  001330  D7F1               	goto	l5638
 14640  001332                     l5642:
 14641                           
 14642                           ; BSR set to: 0
 14643                           ;doprnt.c: 768: (putch(*cp++) );
 14644  001332  C09F  FFF6         	movff	printf@cp,tblptrl
 14645  001336  C0A0  FFF7         	movff	printf@cp+1,tblptrh
 14646  00133A  0E00               	movlw	low (__mediumconst shr (0+16))
 14647  00133C  6EF8               	movwf	tblptru,c
 14648  00133E  0E0F               	movlw	(high __ramtop+-1)
 14649  001340  64F7               	cpfsgt	tblptrh,c
 14650  001342  D003               	bra	u4047
 14651  001344  0008               	tblrd		*
 14652  001346  50F5               	movf	tablat,w,c
 14653  001348  D005               	bra	u4040
 14654  00134A                     u4047:
 14655  00134A  CFF6 FFE9          	movff	tblptrl,fsr0l
 14656  00134E  CFF7 FFEA          	movff	tblptrh,fsr0h
 14657  001352  50EF               	movf	indf0,w,c
 14658  001354                     u4040:
 14659  001354  ECCE  F024         	call	_putch
 14660  001358  0100               	movlb	0	; () banked
 14661  00135A  4B9F               	infsnz	printf@cp& (0+255),f,b
 14662  00135C  2BA0               	incf	(printf@cp+1)& (0+255),f,b
 14663  00135E                     l5646:
 14664                           
 14665                           ; BSR set to: 0
 14666  00135E  0100               	movlb	0	; () banked
 14667  001360  07A3               	decf	printf@len& (0+255),f,b
 14668  001362  A0D8               	btfss	status,0,c
 14669  001364  07A4               	decf	(printf@len+1)& (0+255),f,b
 14670  001366  0100               	movlb	0	; () banked
 14671  001368  29A3               	incf	printf@len& (0+255),w,b
 14672  00136A  E1E3               	bnz	l5642
 14673  00136C  0100               	movlb	0	; () banked
 14674  00136E  29A4               	incf	(printf@len+1)& (0+255),w,b
 14675  001370  B4D8               	btfsc	status,2,c
 14676  001372  D10A               	goto	l5724
 14677  001374  D7DE               	goto	l5642
 14678  001376                     l5648:
 14679                           
 14680                           ; BSR set to: 0
 14681                           ;doprnt.c: 818: flag |= 0x40;
 14682  001376  0100               	movlb	0	; () banked
 14683  001378  8DA7               	bsf	printf@flag& (0+255),6,b
 14684                           
 14685                           ; BSR set to: 0
 14686                           ;doprnt.c: 822: }
 14687                           
 14688                           ;doprnt.c: 819: break;
 14689  00137A  D01D               	goto	l1308
 14690  00137C                     l5652:
 14691  00137C  C08E  FFF6         	movff	printf@f,tblptrl
 14692  001380  C08F  FFF7         	movff	printf@f+1,tblptrh
 14693  001384  0100               	movlb	0	; () banked
 14694  001386  4B8E               	infsnz	printf@f& (0+255),f,b
 14695  001388  2B8F               	incf	(printf@f+1)& (0+255),f,b
 14696  00138A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 14697  00138A  6AF8               	clrf	tblptru,c
 14698  00138C                     	endif
 14699  00138C                     	if	0	;tblptru may be non-zero
 14700  00138C                     	endif
 14701  00138C  0008               	tblrd		*
 14702  00138E  CFF5 F0A8          	movff	tablat,printf@c
 14703  001392  0100               	movlb	0	; () banked
 14704  001394  51A8               	movf	printf@c& (0+255),w,b
 14705                           
 14706                           ; Switch size 1, requested type "space"
 14707                           ; Number of cases is 5, Range of values is 0 to 117
 14708                           ; switch strategies available:
 14709                           ; Name         Instructions Cycles
 14710                           ; simple_byte           16     9 (average)
 14711                           ;	Chosen strategy is simple_byte
 14712  001396  0A00               	xorlw	0	; case 0
 14713  001398  B4D8               	btfsc	status,2,c
 14714  00139A  0012               	return	
 14715  00139C  0A64               	xorlw	100	; case 100
 14716  00139E  B4D8               	btfsc	status,2,c
 14717  0013A0  D00A               	goto	l1308
 14718  0013A2  0A0D               	xorlw	13	; case 105
 14719  0013A4  B4D8               	btfsc	status,2,c
 14720  0013A6  D007               	goto	l1308
 14721  0013A8  0A1A               	xorlw	26	; case 115
 14722  0013AA  B4D8               	btfsc	status,2,c
 14723  0013AC  D758               	goto	l5618
 14724  0013AE  0A06               	xorlw	6	; case 117
 14725  0013B0  B4D8               	btfsc	status,2,c
 14726  0013B2  D7E1               	goto	l5648
 14727  0013B4  D0E9               	goto	l5724
 14728  0013B6                     l1308:
 14729                           
 14730                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 14731  0013B6  0100               	movlb	0	; () banked
 14732  0013B8  BDA7               	btfsc	printf@flag& (0+255),6,b
 14733  0013BA  D019               	goto	l5664
 14734                           
 14735                           ; BSR set to: 0
 14736                           ;doprnt.c: 1253: {
 14737                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 14738  0013BC  C0A1  FFD9         	movff	printf@ap,fsr2l
 14739  0013C0  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 14740  0013C4  CFDE F0A5          	movff	postinc2,printf@val
 14741  0013C8  CFDD F0A6          	movff	postdec2,printf@val+1
 14742                           
 14743                           ; BSR set to: 0
 14744  0013CC  0E02               	movlw	2
 14745  0013CE  0100               	movlb	0	; () banked
 14746  0013D0  27A1               	addwf	printf@ap& (0+255),f,b
 14747  0013D2  0E00               	movlw	0
 14748  0013D4  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 14749                           
 14750                           ; BSR set to: 0
 14751                           ;doprnt.c: 1261: if((int)val < 0) {
 14752  0013D6  0100               	movlb	0	; () banked
 14753  0013D8  AFA6               	btfss	(printf@val+1)& (0+255),7,b
 14754  0013DA  D016               	goto	l5668
 14755                           
 14756                           ; BSR set to: 0
 14757                           ;doprnt.c: 1262: flag |= 0x03;
 14758  0013DC  0E03               	movlw	3
 14759  0013DE  0100               	movlb	0	; () banked
 14760  0013E0  13A7               	iorwf	printf@flag& (0+255),f,b
 14761                           
 14762                           ; BSR set to: 0
 14763                           ;doprnt.c: 1263: val = -val;
 14764  0013E2  0100               	movlb	0	; () banked
 14765  0013E4  6DA5               	negf	printf@val& (0+255),b
 14766  0013E6  1FA6               	comf	(printf@val+1)& (0+255),f,b
 14767  0013E8  B0D8               	btfsc	status,0,c
 14768  0013EA  2BA6               	incf	(printf@val+1)& (0+255),f,b
 14769                           
 14770                           ; BSR set to: 0
 14771                           ;doprnt.c: 1264: }
 14772                           ;doprnt.c: 1266: }
 14773  0013EC  D00D               	goto	l5668
 14774  0013EE                     l5664:
 14775                           
 14776                           ; BSR set to: 0
 14777                           ;doprnt.c: 1268: else
 14778                           ;doprnt.c: 1273: {
 14779                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 14780  0013EE  C0A1  FFD9         	movff	printf@ap,fsr2l
 14781  0013F2  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 14782  0013F6  CFDE F0A5          	movff	postinc2,printf@val
 14783  0013FA  CFDD F0A6          	movff	postdec2,printf@val+1
 14784                           
 14785                           ; BSR set to: 0
 14786  0013FE  0E02               	movlw	2
 14787  001400  0100               	movlb	0	; () banked
 14788  001402  27A1               	addwf	printf@ap& (0+255),f,b
 14789  001404  0E00               	movlw	0
 14790  001406  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 14791  001408                     l5668:
 14792                           
 14793                           ; BSR set to: 0
 14794                           ;doprnt.c: 1287: }
 14795                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 14796  001408  0E01               	movlw	1
 14797  00140A  0100               	movlb	0	; () banked
 14798  00140C  6FA8               	movwf	printf@c& (0+255),b
 14799  00140E                     l5670:
 14800                           
 14801                           ; BSR set to: 0
 14802  00140E  0E05               	movlw	5
 14803  001410  0100               	movlb	0	; () banked
 14804  001412  19A8               	xorwf	printf@c& (0+255),w,b
 14805  001414  B4D8               	btfsc	status,2,c
 14806  001416  D019               	goto	l5682
 14807                           
 14808                           ; BSR set to: 0
 14809                           ;doprnt.c: 1306: if(val < dpowers[c])
 14810                           
 14811                           ; BSR set to: 0
 14812                           
 14813                           ; BSR set to: 0
 14814  001418  0100               	movlb	0	; () banked
 14815  00141A  51A8               	movf	printf@c& (0+255),w,b
 14816  00141C  0D02               	mullw	2
 14817  00141E  0E12               	movlw	low _dpowers
 14818  001420  24F3               	addwf	prodl,w,c
 14819  001422  6EF6               	movwf	tblptrl,c
 14820  001424  0EFB               	movlw	high _dpowers
 14821  001426  20F4               	addwfc	prodh,w,c
 14822  001428  6EF7               	movwf	tblptrh,c
 14823  00142A                     	if	1	;There are 3 active tblptr bytes
 14824  00142A  6AF8               	clrf	tblptru,c
 14825  00142C  0E00               	movlw	low (__mediumconst shr (0+16))
 14826  00142E  22F8               	addwfc	tblptru,f,c
 14827  001430                     	endif
 14828  001430  0009               	tblrd		*+
 14829  001432  50F5               	movf	tablat,w,c
 14830  001434  0100               	movlb	0	; () banked
 14831  001436  5DA5               	subwf	printf@val& (0+255),w,b
 14832  001438  0009               	tblrd		*+
 14833  00143A  50F5               	movf	tablat,w,c
 14834  00143C  0100               	movlb	0	; () banked
 14835  00143E  59A6               	subwfb	(printf@val+1)& (0+255),w,b
 14836  001440  A0D8               	btfss	status,0,c
 14837  001442  D003               	goto	l5682
 14838                           
 14839                           ; BSR set to: 0
 14840                           
 14841                           ; BSR set to: 0
 14842                           
 14843                           ; BSR set to: 0
 14844                           ;doprnt.c: 1307: break;
 14845  001444  0100               	movlb	0	; () banked
 14846  001446  2BA8               	incf	printf@c& (0+255),f,b
 14847  001448  D7E2               	goto	l5670
 14848  00144A                     l5682:
 14849                           
 14850                           ; BSR set to: 0
 14851                           ;doprnt.c: 1345: if(width && flag & 0x03)
 14852  00144A  0100               	movlb	0	; () banked
 14853  00144C  51A9               	movf	printf@width& (0+255),w,b
 14854  00144E  0100               	movlb	0	; () banked
 14855  001450  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 14856  001452  B4D8               	btfsc	status,2,c
 14857  001454  D00B               	goto	l5688
 14858                           
 14859                           ; BSR set to: 0
 14860  001456  C0A7  F09A         	movff	printf@flag,??_printf
 14861  00145A  0E03               	movlw	3
 14862  00145C  0100               	movlb	0	; () banked
 14863  00145E  179A               	andwf	??_printf& (0+255),f,b
 14864  001460  B4D8               	btfsc	status,2,c
 14865  001462  D004               	goto	l5688
 14866                           
 14867                           ; BSR set to: 0
 14868                           ;doprnt.c: 1346: width--;
 14869  001464  0100               	movlb	0	; () banked
 14870  001466  07A9               	decf	printf@width& (0+255),f,b
 14871  001468  A0D8               	btfss	status,0,c
 14872  00146A  07AA               	decf	(printf@width+1)& (0+255),f,b
 14873  00146C                     l5688:
 14874                           
 14875                           ; BSR set to: 0
 14876                           ;doprnt.c: 1381: if(width > c)
 14877  00146C  0E80               	movlw	128
 14878  00146E  0100               	movlb	0	; () banked
 14879  001470  BFA8               	btfsc	printf@c& (0+255),7,b
 14880  001472  0E7F               	movlw	127
 14881  001474  0100               	movlb	0	; () banked
 14882  001476  6F9A               	movwf	??_printf& (0+255),b
 14883  001478  0100               	movlb	0	; () banked
 14884  00147A  51A9               	movf	printf@width& (0+255),w,b
 14885  00147C  0100               	movlb	0	; () banked
 14886  00147E  5DA8               	subwf	printf@c& (0+255),w,b
 14887  001480  0100               	movlb	0	; () banked
 14888  001482  51AA               	movf	(printf@width+1)& (0+255),w,b
 14889  001484  0A80               	xorlw	128
 14890  001486  0100               	movlb	0	; () banked
 14891  001488  599A               	subwfb	??_printf& (0+255),w,b
 14892  00148A  B0D8               	btfsc	status,0,c
 14893  00148C  D00B               	goto	l5692
 14894                           
 14895                           ; BSR set to: 0
 14896                           ;doprnt.c: 1382: width -= c;
 14897  00148E  0100               	movlb	0	; () banked
 14898  001490  51A8               	movf	printf@c& (0+255),w,b
 14899  001492  0100               	movlb	0	; () banked
 14900  001494  5FA9               	subwf	printf@width& (0+255),f,b
 14901  001496  0E00               	movlw	0
 14902  001498  0100               	movlb	0	; () banked
 14903  00149A  BFA8               	btfsc	printf@c& (0+255),7,b
 14904  00149C  0EFF               	movlw	255
 14905  00149E  0100               	movlb	0	; () banked
 14906  0014A0  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 14907  0014A2  D005               	goto	l5694
 14908  0014A4                     l5692:
 14909                           
 14910                           ; BSR set to: 0
 14911                           ;doprnt.c: 1383: else
 14912                           ;doprnt.c: 1384: width = 0;
 14913  0014A4  0E00               	movlw	0
 14914  0014A6  0100               	movlb	0	; () banked
 14915  0014A8  6FAA               	movwf	(printf@width+1)& (0+255),b
 14916  0014AA  0E00               	movlw	0
 14917  0014AC  6FA9               	movwf	printf@width& (0+255),b
 14918  0014AE                     l5694:
 14919                           
 14920                           ; BSR set to: 0
 14921                           ;doprnt.c: 1387: if(flag & 0x04) {
 14922  0014AE  0100               	movlb	0	; () banked
 14923  0014B0  A5A7               	btfss	printf@flag& (0+255),2,b
 14924  0014B2  D018               	goto	l5706
 14925                           
 14926                           ; BSR set to: 0
 14927                           ;doprnt.c: 1392: if(flag & 0x03)
 14928  0014B4  C0A7  F09A         	movff	printf@flag,??_printf
 14929  0014B8  0E03               	movlw	3
 14930  0014BA  0100               	movlb	0	; () banked
 14931  0014BC  179A               	andwf	??_printf& (0+255),f,b
 14932  0014BE  B4D8               	btfsc	status,2,c
 14933  0014C0  D003               	goto	l5700
 14934                           
 14935                           ; BSR set to: 0
 14936                           ;doprnt.c: 1393: (putch('-') );
 14937  0014C2  0E2D               	movlw	45
 14938  0014C4  ECCE  F024         	call	_putch
 14939  0014C8                     l5700:
 14940                           
 14941                           ;doprnt.c: 1415: if(width)
 14942  0014C8  0100               	movlb	0	; () banked
 14943  0014CA  51A9               	movf	printf@width& (0+255),w,b
 14944  0014CC  0100               	movlb	0	; () banked
 14945  0014CE  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 14946  0014D0  B4D8               	btfsc	status,2,c
 14947  0014D2  D025               	goto	l5716
 14948                           
 14949                           ; BSR set to: 0
 14950                           ;doprnt.c: 1417: (putch('0') );
 14951                           
 14952                           ; BSR set to: 0
 14953                           
 14954                           ;doprnt.c: 1416: do
 14955  0014D4  0E30               	movlw	48
 14956  0014D6  ECCE  F024         	call	_putch
 14957                           
 14958                           ;doprnt.c: 1418: while(--width);
 14959  0014DA  0100               	movlb	0	; () banked
 14960  0014DC  07A9               	decf	printf@width& (0+255),f,b
 14961  0014DE  A0D8               	btfss	status,0,c
 14962  0014E0  07AA               	decf	(printf@width+1)& (0+255),f,b
 14963  0014E2  D7F2               	goto	l5700
 14964  0014E4                     l5706:
 14965                           
 14966                           ; BSR set to: 0
 14967                           ;doprnt.c: 1422: {
 14968                           ;doprnt.c: 1424: if(width
 14969                           ;doprnt.c: 1428: )
 14970  0014E4  0100               	movlb	0	; () banked
 14971  0014E6  51A9               	movf	printf@width& (0+255),w,b
 14972  0014E8  0100               	movlb	0	; () banked
 14973  0014EA  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 14974  0014EC  B4D8               	btfsc	status,2,c
 14975  0014EE  D00D               	goto	l5712
 14976  0014F0                     l5708:
 14977                           
 14978                           ; BSR set to: 0
 14979                           ;doprnt.c: 1430: (putch(' ') );
 14980  0014F0  0E20               	movlw	32
 14981  0014F2  ECCE  F024         	call	_putch
 14982                           
 14983                           ;doprnt.c: 1431: while(--width);
 14984  0014F6  0100               	movlb	0	; () banked
 14985  0014F8  07A9               	decf	printf@width& (0+255),f,b
 14986  0014FA  A0D8               	btfss	status,0,c
 14987  0014FC  07AA               	decf	(printf@width+1)& (0+255),f,b
 14988  0014FE  0100               	movlb	0	; () banked
 14989  001500  51A9               	movf	printf@width& (0+255),w,b
 14990  001502  0100               	movlb	0	; () banked
 14991  001504  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 14992  001506  A4D8               	btfss	status,2,c
 14993  001508  D7F3               	goto	l5708
 14994  00150A                     l5712:
 14995                           
 14996                           ; BSR set to: 0
 14997                           ;doprnt.c: 1438: if(flag & 0x03)
 14998  00150A  C0A7  F09A         	movff	printf@flag,??_printf
 14999  00150E  0E03               	movlw	3
 15000  001510  0100               	movlb	0	; () banked
 15001  001512  179A               	andwf	??_printf& (0+255),f,b
 15002  001514  B4D8               	btfsc	status,2,c
 15003  001516  D003               	goto	l5716
 15004                           
 15005                           ; BSR set to: 0
 15006                           ;doprnt.c: 1439: (putch('-') );
 15007  001518  0E2D               	movlw	45
 15008  00151A  ECCE  F024         	call	_putch
 15009  00151E                     l5716:
 15010                           
 15011                           ;doprnt.c: 1469: }
 15012                           ;doprnt.c: 1472: prec = c;
 15013  00151E  C0A8  F09E         	movff	printf@c,printf@prec
 15014                           
 15015                           ;doprnt.c: 1474: while(prec--) {
 15016  001522  D02C               	goto	l5722
 15017  001524                     l5718:
 15018                           
 15019                           ;doprnt.c: 1478: {
 15020                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 15021  001524  0100               	movlb	0	; () banked
 15022  001526  519E               	movf	printf@prec& (0+255),w,b
 15023  001528  0D02               	mullw	2
 15024  00152A  0E12               	movlw	low _dpowers
 15025  00152C  24F3               	addwf	prodl,w,c
 15026  00152E  6EF6               	movwf	tblptrl,c
 15027  001530  0EFB               	movlw	high _dpowers
 15028  001532  20F4               	addwfc	prodh,w,c
 15029  001534  6EF7               	movwf	tblptrh,c
 15030  001536                     	if	1	;There are 3 active tblptr bytes
 15031  001536  6AF8               	clrf	tblptru,c
 15032  001538  0E00               	movlw	low (__mediumconst shr (0+16))
 15033  00153A  22F8               	addwfc	tblptru,f,c
 15034  00153C                     	endif
 15035  00153C  0009               	tblrd		*+
 15036  00153E  CFF5 F082          	movff	tablat,___lwdiv@divisor
 15037  001542  000A               	tblrd		*-
 15038  001544  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
 15039  001548  C0A5  F080         	movff	printf@val,___lwdiv@dividend
 15040  00154C  C0A6  F081         	movff	printf@val+1,___lwdiv@dividend+1
 15041  001550  ECD3  F01E         	call	___lwdiv	;wreg free
 15042  001554  C080  F087         	movff	?___lwdiv,___lwmod@dividend
 15043  001558  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
 15044  00155C  0E00               	movlw	0
 15045  00155E  0100               	movlb	0	; () banked
 15046  001560  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
 15047  001562  0E0A               	movlw	10
 15048  001564  6F89               	movwf	___lwmod@divisor& (0+255),b
 15049  001566  ECEB  F01F         	call	___lwmod	;wreg free
 15050  00156A  0100               	movlb	0	; () banked
 15051  00156C  5187               	movf	?___lwmod& (0+255),w,b
 15052  00156E  0F30               	addlw	48
 15053  001570  0100               	movlb	0	; () banked
 15054  001572  6FA8               	movwf	printf@c& (0+255),b
 15055                           
 15056                           ; BSR set to: 0
 15057                           ;doprnt.c: 1523: }
 15058                           ;doprnt.c: 1524: (putch(c) );
 15059  001574  0100               	movlb	0	; () banked
 15060  001576  51A8               	movf	printf@c& (0+255),w,b
 15061  001578  ECCE  F024         	call	_putch
 15062  00157C                     l5722:
 15063  00157C  0100               	movlb	0	; () banked
 15064  00157E  079E               	decf	printf@prec& (0+255),f,b
 15065  001580  0100               	movlb	0	; () banked
 15066  001582  299E               	incf	printf@prec& (0+255),w,b
 15067  001584  A4D8               	btfss	status,2,c
 15068  001586  D7CE               	goto	l5718
 15069  001588                     l5724:
 15070  001588  C08E  FFF6         	movff	printf@f,tblptrl
 15071  00158C  C08F  FFF7         	movff	printf@f+1,tblptrh
 15072  001590  0100               	movlb	0	; () banked
 15073  001592  4B8E               	infsnz	printf@f& (0+255),f,b
 15074  001594  2B8F               	incf	(printf@f+1)& (0+255),f,b
 15075  001596                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15076  001596  6AF8               	clrf	tblptru,c
 15077  001598                     	endif
 15078  001598                     	if	0	;tblptru may be non-zero
 15079  001598                     	endif
 15080  001598  0008               	tblrd		*
 15081  00159A  CFF5 F0A8          	movff	tablat,printf@c
 15082  00159E  0100               	movlb	0	; () banked
 15083  0015A0  51A8               	movf	printf@c& (0+255),w,b
 15084  0015A2  B4D8               	btfsc	status,2,c
 15085  0015A4  0012               	return	
 15086  0015A6  D5EB               	goto	l5594
 15087  0015A8                     __end_of_printf:
 15088                           	opt stack 0
 15089                           tblptru	equ	0xFF8
 15090                           tblptrh	equ	0xFF7
 15091                           tblptrl	equ	0xFF6
 15092                           tablat	equ	0xFF5
 15093                           prodh	equ	0xFF4
 15094                           prodl	equ	0xFF3
 15095                           intcon	equ	0xFF2
 15096                           intcon2	equ	0xFF1
 15097                           intcon3	equ	0xFF0
 15098                           indf0	equ	0xFEF
 15099                           postinc0	equ	0xFEE
 15100                           fsr0h	equ	0xFEA
 15101                           fsr0l	equ	0xFE9
 15102                           wreg	equ	0xFE8
 15103                           postdec1	equ	0xFE5
 15104                           fsr1l	equ	0xFE1
 15105                           indf2	equ	0xFDF
 15106                           postinc2	equ	0xFDE
 15107                           postdec2	equ	0xFDD
 15108                           fsr2h	equ	0xFDA
 15109                           fsr2l	equ	0xFD9
 15110                           status	equ	0xFD8
 15111                           
 15112 ;; *************** function _putch *****************
 15113 ;; Defined at:
 15114 ;;		line 20 in file "lcd.c"
 15115 ;; Parameters:    Size  Location     Type
 15116 ;;  data            1    wreg     unsigned char 
 15117 ;; Auto vars:     Size  Location     Type
 15118 ;;  data            1    2[BANK0 ] unsigned char 
 15119 ;; Return value:  Size  Location     Type
 15120 ;;                  1    wreg      void 
 15121 ;; Registers used:
 15122 ;;		wreg, status,2, status,0, cstack
 15123 ;; Tracked objects:
 15124 ;;		On entry : 0/0
 15125 ;;		On exit  : 0/0
 15126 ;;		Unchanged: 0/0
 15127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15128 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15129 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15130 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15131 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15132 ;;Total ram usage:        1 bytes
 15133 ;; Hardware stack levels used:    1
 15134 ;; Hardware stack levels required when called:    8
 15135 ;; This function calls:
 15136 ;;		_lcdNibble
 15137 ;; This function is called by:
 15138 ;;		_printf
 15139 ;; This function uses a non-reentrant model
 15140 ;;
 15141                           
 15142                           	psect	text52
 15143  00499C                     __ptext52:
 15144                           	opt stack 0
 15145  00499C                     _putch:
 15146                           	opt stack 18
 15147                           
 15148                           ;incstack = 0
 15149                           ;putch@data stored from wreg
 15150  00499C  0100               	movlb	0	; () banked
 15151  00499E  6F82               	movwf	putch@data& (0+255),b
 15152                           
 15153                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 15154  0049A0  848C               	bsf	3980,2,c	;volatile
 15155                           
 15156                           ;lcd.c: 22: lcdNibble(data);
 15157  0049A2  0100               	movlb	0	; () banked
 15158  0049A4  5182               	movf	putch@data& (0+255),w,b
 15159  0049A6  ECB7  F01F         	call	_lcdNibble
 15160  0049AA  0012               	return		;funcret
 15161  0049AC                     __end_of_putch:
 15162                           	opt stack 0
 15163                           tblptru	equ	0xFF8
 15164                           tblptrh	equ	0xFF7
 15165                           tblptrl	equ	0xFF6
 15166                           tablat	equ	0xFF5
 15167                           prodh	equ	0xFF4
 15168                           prodl	equ	0xFF3
 15169                           intcon	equ	0xFF2
 15170                           intcon2	equ	0xFF1
 15171                           intcon3	equ	0xFF0
 15172                           indf0	equ	0xFEF
 15173                           postinc0	equ	0xFEE
 15174                           fsr0h	equ	0xFEA
 15175                           fsr0l	equ	0xFE9
 15176                           wreg	equ	0xFE8
 15177                           postdec1	equ	0xFE5
 15178                           fsr1l	equ	0xFE1
 15179                           indf2	equ	0xFDF
 15180                           postinc2	equ	0xFDE
 15181                           postdec2	equ	0xFDD
 15182                           fsr2h	equ	0xFDA
 15183                           fsr2l	equ	0xFD9
 15184                           status	equ	0xFD8
 15185                           
 15186 ;; *************** function _isdigit *****************
 15187 ;; Defined at:
 15188 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 15189 ;; Parameters:    Size  Location     Type
 15190 ;;  c               1    wreg     unsigned char 
 15191 ;; Auto vars:     Size  Location     Type
 15192 ;;  c               1    2[BANK0 ] unsigned char 
 15193 ;; Return value:  Size  Location     Type
 15194 ;;		None               void
 15195 ;; Registers used:
 15196 ;;		wreg, status,2, status,0
 15197 ;; Tracked objects:
 15198 ;;		On entry : 0/0
 15199 ;;		On exit  : 0/0
 15200 ;;		Unchanged: 0/0
 15201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15202 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15203 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15204 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15205 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15206 ;;Total ram usage:        3 bytes
 15207 ;; Hardware stack levels used:    1
 15208 ;; Hardware stack levels required when called:    7
 15209 ;; This function calls:
 15210 ;;		Nothing
 15211 ;; This function is called by:
 15212 ;;		_printf
 15213 ;; This function uses a non-reentrant model
 15214 ;;
 15215                           
 15216                           	psect	text53
 15217  0047E6                     __ptext53:
 15218                           	opt stack 0
 15219  0047E6                     _isdigit:
 15220                           	opt stack 19
 15221                           
 15222                           ;incstack = 0
 15223                           ;isdigit@c stored from wreg
 15224  0047E6  0100               	movlb	0	; () banked
 15225  0047E8  6F82               	movwf	isdigit@c& (0+255),b
 15226  0047EA  0E00               	movlw	0
 15227  0047EC  0100               	movlb	0	; () banked
 15228  0047EE  6F81               	movwf	_isdigit$1958& (0+255),b
 15229                           
 15230                           ; BSR set to: 0
 15231  0047F0  0E3A               	movlw	58
 15232  0047F2  0100               	movlb	0	; () banked
 15233  0047F4  6182               	cpfslt	isdigit@c& (0+255),b
 15234  0047F6  D007               	goto	l5442
 15235                           
 15236                           ; BSR set to: 0
 15237  0047F8  0E2F               	movlw	47
 15238  0047FA  0100               	movlb	0	; () banked
 15239  0047FC  6582               	cpfsgt	isdigit@c& (0+255),b
 15240  0047FE  D003               	goto	l5442
 15241                           
 15242                           ; BSR set to: 0
 15243  004800  0E01               	movlw	1
 15244  004802  0100               	movlb	0	; () banked
 15245  004804  6F81               	movwf	_isdigit$1958& (0+255),b
 15246  004806                     l5442:
 15247                           
 15248                           ; BSR set to: 0
 15249  004806  C081  F080         	movff	_isdigit$1958,??_isdigit
 15250  00480A  0100               	movlb	0	; () banked
 15251  00480C  3180               	rrcf	??_isdigit& (0+255),w,b
 15252  00480E  0012               	return	
 15253  004810                     __end_of_isdigit:
 15254                           	opt stack 0
 15255                           tblptru	equ	0xFF8
 15256                           tblptrh	equ	0xFF7
 15257                           tblptrl	equ	0xFF6
 15258                           tablat	equ	0xFF5
 15259                           prodh	equ	0xFF4
 15260                           prodl	equ	0xFF3
 15261                           intcon	equ	0xFF2
 15262                           intcon2	equ	0xFF1
 15263                           intcon3	equ	0xFF0
 15264                           indf0	equ	0xFEF
 15265                           postinc0	equ	0xFEE
 15266                           fsr0h	equ	0xFEA
 15267                           fsr0l	equ	0xFE9
 15268                           wreg	equ	0xFE8
 15269                           postdec1	equ	0xFE5
 15270                           fsr1l	equ	0xFE1
 15271                           indf2	equ	0xFDF
 15272                           postinc2	equ	0xFDE
 15273                           postdec2	equ	0xFDD
 15274                           fsr2h	equ	0xFDA
 15275                           fsr2l	equ	0xFD9
 15276                           status	equ	0xFD8
 15277                           
 15278 ;; *************** function ___wmul *****************
 15279 ;; Defined at:
 15280 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 15281 ;; Parameters:    Size  Location     Type
 15282 ;;  multiplier      2    0[BANK0 ] unsigned int 
 15283 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 15284 ;; Auto vars:     Size  Location     Type
 15285 ;;  product         2    4[BANK0 ] unsigned int 
 15286 ;; Return value:  Size  Location     Type
 15287 ;;                  2    0[BANK0 ] unsigned int 
 15288 ;; Registers used:
 15289 ;;		wreg, status,2, status,0, prodl, prodh
 15290 ;; Tracked objects:
 15291 ;;		On entry : 0/0
 15292 ;;		On exit  : 0/0
 15293 ;;		Unchanged: 0/0
 15294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15295 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15296 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15297 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15298 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15299 ;;Total ram usage:        6 bytes
 15300 ;; Hardware stack levels used:    1
 15301 ;; Hardware stack levels required when called:    7
 15302 ;; This function calls:
 15303 ;;		Nothing
 15304 ;; This function is called by:
 15305 ;;		_printf
 15306 ;; This function uses a non-reentrant model
 15307 ;;
 15308                           
 15309                           	psect	text54
 15310  0044BA                     __ptext54:
 15311                           	opt stack 0
 15312  0044BA                     ___wmul:
 15313                           	opt stack 19
 15314                           
 15315                           ; BSR set to: 0
 15316                           ;incstack = 0
 15317  0044BA  0100               	movlb	0	; () banked
 15318  0044BC  5180               	movf	___wmul@multiplier& (0+255),w,b
 15319  0044BE  0100               	movlb	0	; () banked
 15320  0044C0  0382               	mulwf	___wmul@multiplicand& (0+255),b
 15321  0044C2  CFF3 F084          	movff	prodl,___wmul@product
 15322  0044C6  CFF4 F085          	movff	prodh,___wmul@product+1
 15323  0044CA  0100               	movlb	0	; () banked
 15324  0044CC  5180               	movf	___wmul@multiplier& (0+255),w,b
 15325  0044CE  0100               	movlb	0	; () banked
 15326  0044D0  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 15327  0044D2  50F3               	movf	prodl,w,c
 15328  0044D4  0100               	movlb	0	; () banked
 15329  0044D6  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 15330  0044D8  0100               	movlb	0	; () banked
 15331  0044DA  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
 15332  0044DC  0100               	movlb	0	; () banked
 15333  0044DE  0382               	mulwf	___wmul@multiplicand& (0+255),b
 15334  0044E0  50F3               	movf	prodl,w,c
 15335  0044E2  0100               	movlb	0	; () banked
 15336  0044E4  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 15337                           
 15338                           ; BSR set to: 0
 15339  0044E6  C084  F080         	movff	___wmul@product,?___wmul
 15340  0044EA  C085  F081         	movff	___wmul@product+1,?___wmul+1
 15341  0044EE  0012               	return	
 15342  0044F0                     __end_of___wmul:
 15343                           	opt stack 0
 15344                           tblptru	equ	0xFF8
 15345                           tblptrh	equ	0xFF7
 15346                           tblptrl	equ	0xFF6
 15347                           tablat	equ	0xFF5
 15348                           prodh	equ	0xFF4
 15349                           prodl	equ	0xFF3
 15350                           intcon	equ	0xFF2
 15351                           intcon2	equ	0xFF1
 15352                           intcon3	equ	0xFF0
 15353                           indf0	equ	0xFEF
 15354                           postinc0	equ	0xFEE
 15355                           fsr0h	equ	0xFEA
 15356                           fsr0l	equ	0xFE9
 15357                           wreg	equ	0xFE8
 15358                           postdec1	equ	0xFE5
 15359                           fsr1l	equ	0xFE1
 15360                           indf2	equ	0xFDF
 15361                           postinc2	equ	0xFDE
 15362                           postdec2	equ	0xFDD
 15363                           fsr2h	equ	0xFDA
 15364                           fsr2l	equ	0xFD9
 15365                           status	equ	0xFD8
 15366                           
 15367 ;; *************** function ___lwmod *****************
 15368 ;; Defined at:
 15369 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 15370 ;; Parameters:    Size  Location     Type
 15371 ;;  dividend        2    7[BANK0 ] unsigned int 
 15372 ;;  divisor         2    9[BANK0 ] unsigned int 
 15373 ;; Auto vars:     Size  Location     Type
 15374 ;;  counter         1   11[BANK0 ] unsigned char 
 15375 ;; Return value:  Size  Location     Type
 15376 ;;                  2    7[BANK0 ] unsigned int 
 15377 ;; Registers used:
 15378 ;;		wreg, status,2, status,0
 15379 ;; Tracked objects:
 15380 ;;		On entry : 0/0
 15381 ;;		On exit  : 0/0
 15382 ;;		Unchanged: 0/0
 15383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15384 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15385 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15386 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15387 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15388 ;;Total ram usage:        5 bytes
 15389 ;; Hardware stack levels used:    1
 15390 ;; Hardware stack levels required when called:    7
 15391 ;; This function calls:
 15392 ;;		Nothing
 15393 ;; This function is called by:
 15394 ;;		_printf
 15395 ;; This function uses a non-reentrant model
 15396 ;;
 15397                           
 15398                           	psect	text55
 15399  003FD6                     __ptext55:
 15400                           	opt stack 0
 15401  003FD6                     ___lwmod:
 15402                           	opt stack 19
 15403                           
 15404                           ; BSR set to: 0
 15405                           ;incstack = 0
 15406  003FD6  0100               	movlb	0	; () banked
 15407  003FD8  5189               	movf	___lwmod@divisor& (0+255),w,b
 15408  003FDA  0100               	movlb	0	; () banked
 15409  003FDC  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 15410  003FDE  B4D8               	btfsc	status,2,c
 15411  003FE0  D026               	goto	l1765
 15412                           
 15413                           ; BSR set to: 0
 15414  003FE2  0E01               	movlw	1
 15415  003FE4  0100               	movlb	0	; () banked
 15416  003FE6  6F8B               	movwf	___lwmod@counter& (0+255),b
 15417  003FE8  D006               	goto	l5480
 15418  003FEA                     l5478:
 15419                           
 15420                           ; BSR set to: 0
 15421  003FEA  0100               	movlb	0	; () banked
 15422  003FEC  90D8               	bcf	status,0,c
 15423  003FEE  3789               	rlcf	___lwmod@divisor& (0+255),f,b
 15424  003FF0  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 15425  003FF2  0100               	movlb	0	; () banked
 15426  003FF4  2B8B               	incf	___lwmod@counter& (0+255),f,b
 15427  003FF6                     l5480:
 15428                           
 15429                           ; BSR set to: 0
 15430  003FF6  0100               	movlb	0	; () banked
 15431  003FF8  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 15432  003FFA  D7F7               	goto	l5478
 15433  003FFC                     l5482:
 15434                           
 15435                           ; BSR set to: 0
 15436  003FFC  0100               	movlb	0	; () banked
 15437  003FFE  5189               	movf	___lwmod@divisor& (0+255),w,b
 15438  004000  0100               	movlb	0	; () banked
 15439  004002  5D87               	subwf	___lwmod@dividend& (0+255),w,b
 15440  004004  0100               	movlb	0	; () banked
 15441  004006  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 15442  004008  0100               	movlb	0	; () banked
 15443  00400A  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 15444  00400C  A0D8               	btfss	status,0,c
 15445  00400E  D008               	goto	l5486
 15446                           
 15447                           ; BSR set to: 0
 15448  004010  0100               	movlb	0	; () banked
 15449  004012  5189               	movf	___lwmod@divisor& (0+255),w,b
 15450  004014  0100               	movlb	0	; () banked
 15451  004016  5F87               	subwf	___lwmod@dividend& (0+255),f,b
 15452  004018  0100               	movlb	0	; () banked
 15453  00401A  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 15454  00401C  0100               	movlb	0	; () banked
 15455  00401E  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 15456  004020                     l5486:
 15457                           
 15458                           ; BSR set to: 0
 15459  004020  0100               	movlb	0	; () banked
 15460  004022  90D8               	bcf	status,0,c
 15461  004024  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 15462  004026  3389               	rrcf	___lwmod@divisor& (0+255),f,b
 15463                           
 15464                           ; BSR set to: 0
 15465  004028  0100               	movlb	0	; () banked
 15466  00402A  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
 15467  00402C  D7E7               	goto	l5482
 15468  00402E                     l1765:
 15469                           
 15470                           ; BSR set to: 0
 15471  00402E  C087  F087         	movff	___lwmod@dividend,?___lwmod
 15472  004032  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
 15473                           
 15474                           ; BSR set to: 0
 15475  004036  0012               	return		;funcret
 15476  004038                     __end_of___lwmod:
 15477                           	opt stack 0
 15478                           tblptru	equ	0xFF8
 15479                           tblptrh	equ	0xFF7
 15480                           tblptrl	equ	0xFF6
 15481                           tablat	equ	0xFF5
 15482                           prodh	equ	0xFF4
 15483                           prodl	equ	0xFF3
 15484                           intcon	equ	0xFF2
 15485                           intcon2	equ	0xFF1
 15486                           intcon3	equ	0xFF0
 15487                           indf0	equ	0xFEF
 15488                           postinc0	equ	0xFEE
 15489                           fsr0h	equ	0xFEA
 15490                           fsr0l	equ	0xFE9
 15491                           wreg	equ	0xFE8
 15492                           postdec1	equ	0xFE5
 15493                           fsr1l	equ	0xFE1
 15494                           indf2	equ	0xFDF
 15495                           postinc2	equ	0xFDE
 15496                           postdec2	equ	0xFDD
 15497                           fsr2h	equ	0xFDA
 15498                           fsr2l	equ	0xFD9
 15499                           status	equ	0xFD8
 15500                           
 15501 ;; *************** function ___lwdiv *****************
 15502 ;; Defined at:
 15503 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 15504 ;; Parameters:    Size  Location     Type
 15505 ;;  dividend        2    0[BANK0 ] unsigned int 
 15506 ;;  divisor         2    2[BANK0 ] unsigned int 
 15507 ;; Auto vars:     Size  Location     Type
 15508 ;;  quotient        2    4[BANK0 ] unsigned int 
 15509 ;;  counter         1    6[BANK0 ] unsigned char 
 15510 ;; Return value:  Size  Location     Type
 15511 ;;                  2    0[BANK0 ] unsigned int 
 15512 ;; Registers used:
 15513 ;;		wreg, status,2, status,0
 15514 ;; Tracked objects:
 15515 ;;		On entry : 0/0
 15516 ;;		On exit  : 0/0
 15517 ;;		Unchanged: 0/0
 15518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15519 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15520 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15521 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15522 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15523 ;;Total ram usage:        7 bytes
 15524 ;; Hardware stack levels used:    1
 15525 ;; Hardware stack levels required when called:    7
 15526 ;; This function calls:
 15527 ;;		Nothing
 15528 ;; This function is called by:
 15529 ;;		_printf
 15530 ;; This function uses a non-reentrant model
 15531 ;;
 15532                           
 15533                           	psect	text56
 15534  003DA6                     __ptext56:
 15535                           	opt stack 0
 15536  003DA6                     ___lwdiv:
 15537                           	opt stack 19
 15538                           
 15539                           ; BSR set to: 0
 15540                           ;incstack = 0
 15541  003DA6  0E00               	movlw	0
 15542  003DA8  0100               	movlb	0	; () banked
 15543  003DAA  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
 15544  003DAC  0E00               	movlw	0
 15545  003DAE  6F84               	movwf	___lwdiv@quotient& (0+255),b
 15546                           
 15547                           ; BSR set to: 0
 15548  003DB0  0100               	movlb	0	; () banked
 15549  003DB2  5182               	movf	___lwdiv@divisor& (0+255),w,b
 15550  003DB4  0100               	movlb	0	; () banked
 15551  003DB6  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 15552  003DB8  B4D8               	btfsc	status,2,c
 15553  003DBA  D02C               	goto	l1755
 15554                           
 15555                           ; BSR set to: 0
 15556  003DBC  0E01               	movlw	1
 15557  003DBE  0100               	movlb	0	; () banked
 15558  003DC0  6F86               	movwf	___lwdiv@counter& (0+255),b
 15559  003DC2  D006               	goto	l5460
 15560  003DC4                     l5458:
 15561                           
 15562                           ; BSR set to: 0
 15563  003DC4  0100               	movlb	0	; () banked
 15564  003DC6  90D8               	bcf	status,0,c
 15565  003DC8  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
 15566  003DCA  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 15567  003DCC  0100               	movlb	0	; () banked
 15568  003DCE  2B86               	incf	___lwdiv@counter& (0+255),f,b
 15569  003DD0                     l5460:
 15570                           
 15571                           ; BSR set to: 0
 15572  003DD0  0100               	movlb	0	; () banked
 15573  003DD2  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 15574  003DD4  D7F7               	goto	l5458
 15575  003DD6                     l5462:
 15576                           
 15577                           ; BSR set to: 0
 15578  003DD6  0100               	movlb	0	; () banked
 15579  003DD8  90D8               	bcf	status,0,c
 15580  003DDA  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
 15581  003DDC  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 15582                           
 15583                           ; BSR set to: 0
 15584  003DDE  0100               	movlb	0	; () banked
 15585  003DE0  5182               	movf	___lwdiv@divisor& (0+255),w,b
 15586  003DE2  0100               	movlb	0	; () banked
 15587  003DE4  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
 15588  003DE6  0100               	movlb	0	; () banked
 15589  003DE8  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 15590  003DEA  0100               	movlb	0	; () banked
 15591  003DEC  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 15592  003DEE  A0D8               	btfss	status,0,c
 15593  003DF0  D00A               	goto	l5470
 15594                           
 15595                           ; BSR set to: 0
 15596  003DF2  0100               	movlb	0	; () banked
 15597  003DF4  5182               	movf	___lwdiv@divisor& (0+255),w,b
 15598  003DF6  0100               	movlb	0	; () banked
 15599  003DF8  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
 15600  003DFA  0100               	movlb	0	; () banked
 15601  003DFC  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 15602  003DFE  0100               	movlb	0	; () banked
 15603  003E00  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 15604                           
 15605                           ; BSR set to: 0
 15606  003E02  0100               	movlb	0	; () banked
 15607  003E04  8184               	bsf	___lwdiv@quotient& (0+255),0,b
 15608  003E06                     l5470:
 15609                           
 15610                           ; BSR set to: 0
 15611  003E06  0100               	movlb	0	; () banked
 15612  003E08  90D8               	bcf	status,0,c
 15613  003E0A  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 15614  003E0C  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
 15615                           
 15616                           ; BSR set to: 0
 15617  003E0E  0100               	movlb	0	; () banked
 15618  003E10  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
 15619  003E12  D7E1               	goto	l5462
 15620  003E14                     l1755:
 15621                           
 15622                           ; BSR set to: 0
 15623  003E14  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
 15624  003E18  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
 15625                           
 15626                           ; BSR set to: 0
 15627  003E1C  0012               	return		;funcret
 15628  003E1E                     __end_of___lwdiv:
 15629                           	opt stack 0
 15630                           tblptru	equ	0xFF8
 15631                           tblptrh	equ	0xFF7
 15632                           tblptrl	equ	0xFF6
 15633                           tablat	equ	0xFF5
 15634                           prodh	equ	0xFF4
 15635                           prodl	equ	0xFF3
 15636                           intcon	equ	0xFF2
 15637                           intcon2	equ	0xFF1
 15638                           intcon3	equ	0xFF0
 15639                           indf0	equ	0xFEF
 15640                           postinc0	equ	0xFEE
 15641                           fsr0h	equ	0xFEA
 15642                           fsr0l	equ	0xFE9
 15643                           wreg	equ	0xFE8
 15644                           postdec1	equ	0xFE5
 15645                           fsr1l	equ	0xFE1
 15646                           indf2	equ	0xFDF
 15647                           postinc2	equ	0xFDE
 15648                           postdec2	equ	0xFDD
 15649                           fsr2h	equ	0xFDA
 15650                           fsr2l	equ	0xFD9
 15651                           status	equ	0xFD8
 15652                           
 15653 ;; *************** function _lcdInst *****************
 15654 ;; Defined at:
 15655 ;;		line 15 in file "lcd.c"
 15656 ;; Parameters:    Size  Location     Type
 15657 ;;  data            1    wreg     unsigned char 
 15658 ;; Auto vars:     Size  Location     Type
 15659 ;;  data            1    2[BANK0 ] unsigned char 
 15660 ;; Return value:  Size  Location     Type
 15661 ;;                  1    wreg      void 
 15662 ;; Registers used:
 15663 ;;		wreg, status,2, status,0, cstack
 15664 ;; Tracked objects:
 15665 ;;		On entry : 0/0
 15666 ;;		On exit  : 0/0
 15667 ;;		Unchanged: 0/0
 15668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15669 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15670 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15671 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15672 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15673 ;;Total ram usage:        1 bytes
 15674 ;; Hardware stack levels used:    1
 15675 ;; Hardware stack levels required when called:    8
 15676 ;; This function calls:
 15677 ;;		_lcdNibble
 15678 ;; This function is called by:
 15679 ;;		_UI
 15680 ;;		_change_state_to_menu_start
 15681 ;;		_change_state_to_menu_12
 15682 ;;		_change_state_to_menu_22
 15683 ;;		_initLCD
 15684 ;;		_printRTC
 15685 ;;		_Loading
 15686 ;;		_EEPROM_write
 15687 ;;		_Test
 15688 ;;		_algorithmTest
 15689 ;;		_sensorTest
 15690 ;;		_actuatorTest
 15691 ;;		_BothServos
 15692 ;;		_PortTestA5
 15693 ;;		_PusherTest
 15694 ;;		_SpeedTest
 15695 ;;		_BlockerTest
 15696 ;;		_ToggleTestA5
 15697 ;; This function uses a non-reentrant model
 15698 ;;
 15699                           
 15700                           	psect	text57
 15701  0049AC                     __ptext57:
 15702                           	opt stack 0
 15703  0049AC                     _lcdInst:
 15704                           	opt stack 20
 15705                           
 15706                           ; BSR set to: 0
 15707                           ;incstack = 0
 15708                           ;lcdInst@data stored from wreg
 15709  0049AC  0100               	movlb	0	; () banked
 15710  0049AE  6F82               	movwf	lcdInst@data& (0+255),b
 15711                           
 15712                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 15713  0049B0  948C               	bcf	3980,2,c	;volatile
 15714                           
 15715                           ;lcd.c: 17: lcdNibble(data);
 15716  0049B2  0100               	movlb	0	; () banked
 15717  0049B4  5182               	movf	lcdInst@data& (0+255),w,b
 15718  0049B6  ECB7  F01F         	call	_lcdNibble
 15719  0049BA  0012               	return		;funcret
 15720  0049BC                     __end_of_lcdInst:
 15721                           	opt stack 0
 15722                           tblptru	equ	0xFF8
 15723                           tblptrh	equ	0xFF7
 15724                           tblptrl	equ	0xFF6
 15725                           tablat	equ	0xFF5
 15726                           prodh	equ	0xFF4
 15727                           prodl	equ	0xFF3
 15728                           intcon	equ	0xFF2
 15729                           intcon2	equ	0xFF1
 15730                           intcon3	equ	0xFF0
 15731                           indf0	equ	0xFEF
 15732                           postinc0	equ	0xFEE
 15733                           fsr0h	equ	0xFEA
 15734                           fsr0l	equ	0xFE9
 15735                           wreg	equ	0xFE8
 15736                           postdec1	equ	0xFE5
 15737                           fsr1l	equ	0xFE1
 15738                           indf2	equ	0xFDF
 15739                           postinc2	equ	0xFDE
 15740                           postdec2	equ	0xFDD
 15741                           fsr2h	equ	0xFDA
 15742                           fsr2l	equ	0xFD9
 15743                           status	equ	0xFD8
 15744                           
 15745 ;; *************** function _lcdNibble *****************
 15746 ;; Defined at:
 15747 ;;		line 25 in file "lcd.c"
 15748 ;; Parameters:    Size  Location     Type
 15749 ;;  data            1    wreg     unsigned char 
 15750 ;; Auto vars:     Size  Location     Type
 15751 ;;  data            1    1[BANK0 ] unsigned char 
 15752 ;;  temp            1    0[BANK0 ] unsigned char 
 15753 ;; Return value:  Size  Location     Type
 15754 ;;                  1    wreg      void 
 15755 ;; Registers used:
 15756 ;;		wreg, status,2, status,0
 15757 ;; Tracked objects:
 15758 ;;		On entry : 0/0
 15759 ;;		On exit  : 0/0
 15760 ;;		Unchanged: 0/0
 15761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15762 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15763 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15764 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15765 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15766 ;;Total ram usage:        2 bytes
 15767 ;; Hardware stack levels used:    1
 15768 ;; Hardware stack levels required when called:    7
 15769 ;; This function calls:
 15770 ;;		Nothing
 15771 ;; This function is called by:
 15772 ;;		_lcdInst
 15773 ;;		_putch
 15774 ;; This function uses a non-reentrant model
 15775 ;;
 15776                           
 15777                           	psect	text58
 15778  003F6E                     __ptext58:
 15779                           	opt stack 0
 15780  003F6E                     _lcdNibble:
 15781                           	opt stack 20
 15782                           
 15783                           ;incstack = 0
 15784                           ;lcdNibble@data stored from wreg
 15785  003F6E  0100               	movlb	0	; () banked
 15786  003F70  6F81               	movwf	lcdNibble@data& (0+255),b
 15787                           
 15788                           ;lcd.c: 27: char temp = data & 0xF0;
 15789  003F72  0100               	movlb	0	; () banked
 15790  003F74  5181               	movf	lcdNibble@data& (0+255),w,b
 15791  003F76  0BF0               	andlw	240
 15792  003F78  0100               	movlb	0	; () banked
 15793  003F7A  6F80               	movwf	lcdNibble@temp& (0+255),b
 15794                           
 15795                           ;lcd.c: 28: LATD = LATD & 0x0F;
 15796  003F7C  508C               	movf	3980,w,c	;volatile
 15797  003F7E  0B0F               	andlw	15
 15798  003F80  6E8C               	movwf	3980,c	;volatile
 15799                           
 15800                           ;lcd.c: 29: LATD = temp | LATD;
 15801  003F82  0100               	movlb	0	; () banked
 15802  003F84  5180               	movf	lcdNibble@temp& (0+255),w,b
 15803  003F86  108C               	iorwf	3980,w,c	;volatile
 15804  003F88  6E8C               	movwf	3980,c	;volatile
 15805                           
 15806                           ; BSR set to: 0
 15807                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 15808  003F8A  868C               	bsf	3980,3,c	;volatile
 15809                           
 15810                           ; BSR set to: 0
 15811                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 15812  003F8C  0E42               	movlw	66
 15813  003F8E                     u8577:
 15814  003F8E  2EE8               	decfsz	wreg,f,c
 15815  003F90  D7FE               	bra	u8577
 15816  003F92  D000               	nop2	
 15817                           
 15818                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 15819  003F94  968C               	bcf	3980,3,c	;volatile
 15820                           
 15821                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 15822  003F96  0E42               	movlw	66
 15823  003F98                     u8587:
 15824  003F98  2EE8               	decfsz	wreg,f,c
 15825  003F9A  D7FE               	bra	u8587
 15826  003F9C  D000               	nop2	
 15827                           
 15828                           ;lcd.c: 36: data = data << 4;
 15829  003F9E  0100               	movlb	0	; () banked
 15830  003FA0  3981               	swapf	lcdNibble@data& (0+255),w,b
 15831  003FA2  0BF0               	andlw	240
 15832  003FA4  0100               	movlb	0	; () banked
 15833  003FA6  6F81               	movwf	lcdNibble@data& (0+255),b
 15834                           
 15835                           ;lcd.c: 38: temp = data & 0xF0;
 15836  003FA8  0100               	movlb	0	; () banked
 15837  003FAA  5181               	movf	lcdNibble@data& (0+255),w,b
 15838  003FAC  0BF0               	andlw	240
 15839  003FAE  0100               	movlb	0	; () banked
 15840  003FB0  6F80               	movwf	lcdNibble@temp& (0+255),b
 15841                           
 15842                           ;lcd.c: 39: LATD = LATD & 0x0F;
 15843  003FB2  508C               	movf	3980,w,c	;volatile
 15844  003FB4  0B0F               	andlw	15
 15845  003FB6  6E8C               	movwf	3980,c	;volatile
 15846                           
 15847                           ;lcd.c: 40: LATD = temp | LATD;
 15848  003FB8  0100               	movlb	0	; () banked
 15849  003FBA  5180               	movf	lcdNibble@temp& (0+255),w,b
 15850  003FBC  108C               	iorwf	3980,w,c	;volatile
 15851  003FBE  6E8C               	movwf	3980,c	;volatile
 15852                           
 15853                           ; BSR set to: 0
 15854                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 15855  003FC0  868C               	bsf	3980,3,c	;volatile
 15856                           
 15857                           ; BSR set to: 0
 15858                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 15859  003FC2  0E42               	movlw	66
 15860  003FC4                     u8597:
 15861  003FC4  2EE8               	decfsz	wreg,f,c
 15862  003FC6  D7FE               	bra	u8597
 15863  003FC8  D000               	nop2	
 15864                           
 15865                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 15866  003FCA  968C               	bcf	3980,3,c	;volatile
 15867                           
 15868                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 15869  003FCC  0E42               	movlw	66
 15870  003FCE                     u8607:
 15871  003FCE  2EE8               	decfsz	wreg,f,c
 15872  003FD0  D7FE               	bra	u8607
 15873  003FD2  D000               	nop2	
 15874  003FD4  0012               	return		;funcret
 15875  003FD6                     __end_of_lcdNibble:
 15876                           	opt stack 0
 15877                           tblptru	equ	0xFF8
 15878                           tblptrh	equ	0xFF7
 15879                           tblptrl	equ	0xFF6
 15880                           tablat	equ	0xFF5
 15881                           prodh	equ	0xFF4
 15882                           prodl	equ	0xFF3
 15883                           intcon	equ	0xFF2
 15884                           intcon2	equ	0xFF1
 15885                           intcon3	equ	0xFF0
 15886                           indf0	equ	0xFEF
 15887                           postinc0	equ	0xFEE
 15888                           fsr0h	equ	0xFEA
 15889                           fsr0l	equ	0xFE9
 15890                           wreg	equ	0xFE8
 15891                           postdec1	equ	0xFE5
 15892                           fsr1l	equ	0xFE1
 15893                           indf2	equ	0xFDF
 15894                           postinc2	equ	0xFDE
 15895                           postdec2	equ	0xFDD
 15896                           fsr2h	equ	0xFDA
 15897                           fsr2l	equ	0xFD9
 15898                           status	equ	0xFD8
 15899                           
 15900 ;; *************** function _handler *****************
 15901 ;; Defined at:
 15902 ;;		line 16 in file "interruptHandler.c"
 15903 ;; Parameters:    Size  Location     Type
 15904 ;;		None
 15905 ;; Auto vars:     Size  Location     Type
 15906 ;;		None
 15907 ;; Return value:  Size  Location     Type
 15908 ;;                  1    wreg      void 
 15909 ;; Registers used:
 15910 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15911 ;; Tracked objects:
 15912 ;;		On entry : 0/0
 15913 ;;		On exit  : 0/0
 15914 ;;		Unchanged: 0/0
 15915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15916 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15917 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15918 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15919 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15920 ;;Total ram usage:       16 bytes
 15921 ;; Hardware stack levels used:    1
 15922 ;; Hardware stack levels required when called:    6
 15923 ;; This function calls:
 15924 ;;		_printSortTimer
 15925 ;;		_updateMenu
 15926 ;; This function is called by:
 15927 ;;		Interrupt level 2
 15928 ;; This function uses a non-reentrant model
 15929 ;;
 15930                           
 15931                           	psect	intcode
 15932  000008                     __pintcode:
 15933                           	opt stack 0
 15934  000008                     _handler:
 15935                           	opt stack 18
 15936                           
 15937                           ;incstack = 0
 15938  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 15939  00000A  ED60  F017         	call	int_func,f	;refresh shadow registers
 15940                           tblptru	equ	0xFF8
 15941                           tblptrh	equ	0xFF7
 15942                           tblptrl	equ	0xFF6
 15943                           tablat	equ	0xFF5
 15944                           prodh	equ	0xFF4
 15945                           prodl	equ	0xFF3
 15946                           intcon	equ	0xFF2
 15947                           intcon2	equ	0xFF1
 15948                           intcon3	equ	0xFF0
 15949                           indf0	equ	0xFEF
 15950                           postinc0	equ	0xFEE
 15951                           fsr0h	equ	0xFEA
 15952                           fsr0l	equ	0xFE9
 15953                           wreg	equ	0xFE8
 15954                           postdec1	equ	0xFE5
 15955                           fsr1l	equ	0xFE1
 15956                           indf2	equ	0xFDF
 15957                           postinc2	equ	0xFDE
 15958                           postdec2	equ	0xFDD
 15959                           fsr2h	equ	0xFDA
 15960                           fsr2l	equ	0xFD9
 15961                           status	equ	0xFD8
 15962                           
 15963                           	psect	intcode_body
 15964  002EC0                     __pintcode_body:
 15965                           	opt stack 18
 15966  002EC0                     int_func:
 15967                           	opt stack 18
 15968  002EC0  0006               	pop		; remove dummy address from shadow register refresh
 15969  002EC2  CFFA F04D          	movff	pclath,??_handler+2
 15970  002EC6  CFFB F04E          	movff	pclatu,??_handler+3
 15971  002ECA  CFE9 F04F          	movff	fsr0l,??_handler+4
 15972  002ECE  CFEA F050          	movff	fsr0h,??_handler+5
 15973  002ED2  CFE1 F051          	movff	fsr1l,??_handler+6
 15974  002ED6  CFE2 F052          	movff	fsr1h,??_handler+7
 15975  002EDA  CFD9 F053          	movff	fsr2l,??_handler+8
 15976  002EDE  CFDA F054          	movff	fsr2h,??_handler+9
 15977  002EE2  CFF3 F055          	movff	prodl,??_handler+10
 15978  002EE6  CFF4 F056          	movff	prodh,??_handler+11
 15979  002EEA  CFF6 F057          	movff	tblptrl,??_handler+12
 15980  002EEE  CFF7 F058          	movff	tblptrh,??_handler+13
 15981  002EF2  CFF8 F059          	movff	tblptru,??_handler+14
 15982  002EF6  CFF5 F05A          	movff	tablat,??_handler+15
 15983                           
 15984                           ;interruptHandler.c: 18: if(INT1IF){
 15985  002EFA  A0F0               	btfss	intcon3,0,c	;volatile
 15986  002EFC  D020               	goto	i2l8372
 15987                           
 15988                           ;interruptHandler.c: 19: INT1IF = 0;
 15989  002EFE  90F0               	bcf	intcon3,0,c	;volatile
 15990                           
 15991                           ;interruptHandler.c: 20: if(machine_state == UI_state) {
 15992  002F00  0100               	movlb	0	; () banked
 15993  002F02  51FC               	movf	_machine_state& (0+255),w,b
 15994  002F04  A4D8               	btfss	status,2,c
 15995  002F06  D01B               	goto	i2l8372
 15996                           
 15997                           ; BSR set to: 0
 15998                           ;interruptHandler.c: 21: input = keys[(PORTB & 0xF0) >> 4];
 15999  002F08  3881               	swapf	3969,w,c	;volatile
 16000  002F0A  0B0F               	andlw	15
 16001  002F0C  0B0F               	andlw	15
 16002  002F0E  6E4B               	movwf	??_handler& (0+255),c
 16003  002F10  6A4C               	clrf	(??_handler+1)& (0+255),c
 16004  002F12  0E01               	movlw	low _keys
 16005  002F14  244B               	addwf	??_handler,w,c
 16006  002F16  6EF6               	movwf	tblptrl,c
 16007  002F18  0EFB               	movlw	high _keys
 16008  002F1A  204C               	addwfc	??_handler+1,w,c
 16009  002F1C  6EF7               	movwf	tblptrh,c
 16010  002F1E                     	if	1	;There are 3 active tblptr bytes
 16011  002F1E  6AF8               	clrf	tblptru,c
 16012  002F20  0E00               	movlw	low (__mediumconst shr (0+16))
 16013  002F22  22F8               	addwfc	tblptru,f,c
 16014  002F24                     	endif
 16015  002F24  0008               	tblrd		*
 16016  002F26  CFF5 F07D          	movff	tablat,_input	;volatile
 16017                           
 16018                           ; BSR set to: 0
 16019                           ;interruptHandler.c: 23: if(input == '*'){
 16020  002F2A  0E2A               	movlw	42
 16021  002F2C  187D               	xorwf	_input,w,c	;volatile
 16022  002F2E  A4D8               	btfss	status,2,c
 16023  002F30  D004               	goto	i2l8370
 16024                           
 16025                           ; BSR set to: 0
 16026                           ;interruptHandler.c: 24: machine_state = Testing_state;
 16027  002F32  0E03               	movlw	3
 16028  002F34  0100               	movlb	0	; () banked
 16029  002F36  6FFC               	movwf	_machine_state& (0+255),b
 16030                           
 16031                           ;interruptHandler.c: 25: }
 16032  002F38  D002               	goto	i2l8372
 16033  002F3A                     i2l8370:
 16034                           
 16035                           ; BSR set to: 0
 16036                           ;interruptHandler.c: 26: else{
 16037                           ;interruptHandler.c: 27: updateMenu();
 16038  002F3A  EC31  F011         	call	_updateMenu	;wreg free
 16039  002F3E                     i2l8372:
 16040                           
 16041                           ;interruptHandler.c: 28: }
 16042                           ;interruptHandler.c: 29: }
 16043                           ;interruptHandler.c: 30: }
 16044                           ;interruptHandler.c: 33: if(TMR0IF){
 16045  002F3E  A4F2               	btfss	intcon,2,c	;volatile
 16046  002F40  D00C               	goto	i2l8386
 16047                           
 16048                           ;interruptHandler.c: 34: TMR0IF = 0;
 16049  002F42  94F2               	bcf	intcon,2,c	;volatile
 16050                           
 16051                           ;interruptHandler.c: 35: if(machine_state == Sorting_state){
 16052  002F44  0100               	movlb	0	; () banked
 16053  002F46  05FC               	decf	_machine_state& (0+255),w,b
 16054  002F48  A4D8               	btfss	status,2,c
 16055  002F4A  D007               	goto	i2l8386
 16056                           
 16057                           ; BSR set to: 0
 16058                           ;interruptHandler.c: 36: printSortTimer();
 16059  002F4C  ECA6  F014         	call	_printSortTimer	;wreg free
 16060                           
 16061                           ;interruptHandler.c: 38: TMR0H = 0b10000101;
 16062  002F50  0E85               	movlw	133
 16063  002F52  6ED7               	movwf	4055,c	;volatile
 16064                           
 16065                           ;interruptHandler.c: 39: TMR0L = 0b11101110;
 16066  002F54  0EEE               	movlw	238
 16067  002F56  6ED6               	movwf	4054,c	;volatile
 16068                           
 16069                           ;interruptHandler.c: 40: TMR0ON = 1;
 16070  002F58  8ED5               	bsf	4053,7,c	;volatile
 16071  002F5A                     i2l8386:
 16072                           
 16073                           ;interruptHandler.c: 41: }
 16074                           ;interruptHandler.c: 42: }
 16075                           ;interruptHandler.c: 45: if(TMR1IF){
 16076  002F5A  A09E               	btfss	3998,0,c	;volatile
 16077  002F5C  D024               	goto	i2l8410
 16078                           
 16079                           ;interruptHandler.c: 46: TMR1IF = 0;
 16080  002F5E  909E               	bcf	3998,0,c	;volatile
 16081                           
 16082                           ;interruptHandler.c: 47: TMR1ON = 0;
 16083  002F60  90CD               	bcf	4045,0,c	;volatile
 16084                           
 16085                           ;interruptHandler.c: 48: if(machine_state == Sorting_state){
 16086  002F62  0100               	movlb	0	; () banked
 16087  002F64  05FC               	decf	_machine_state& (0+255),w,b
 16088  002F66  A4D8               	btfss	status,2,c
 16089  002F68  D01E               	goto	i2l8410
 16090                           
 16091                           ; BSR set to: 0
 16092                           ;interruptHandler.c: 49: if(was_low_1){
 16093  002F6A  5079               	movf	_was_low_1,w,c	;volatile
 16094  002F6C  107A               	iorwf	_was_low_1+1,w,c	;volatile
 16095  002F6E  B4D8               	btfsc	status,2,c
 16096  002F70  D00A               	goto	i2l868
 16097                           
 16098                           ; BSR set to: 0
 16099                           ;interruptHandler.c: 50: LATCbits.LATC1 = 1;
 16100  002F72  828B               	bsf	3979,1,c	;volatile
 16101                           
 16102                           ; BSR set to: 0
 16103                           ;interruptHandler.c: 51: was_low_1 = 0;
 16104  002F74  0E00               	movlw	0
 16105  002F76  6E7A               	movwf	_was_low_1+1,c	;volatile
 16106  002F78  0E00               	movlw	0
 16107  002F7A  6E79               	movwf	_was_low_1,c	;volatile
 16108                           
 16109                           ; BSR set to: 0
 16110                           ;interruptHandler.c: 52: TMR1H = servoTimes[0];
 16111  002F7C  C11C  FFCF         	movff	_servoTimes,4047	;volatile
 16112                           
 16113                           ; BSR set to: 0
 16114                           ;interruptHandler.c: 53: TMR1L = servoTimes[1];
 16115  002F80  C11E  FFCE         	movff	_servoTimes+2,4046	;volatile
 16116                           
 16117                           ;interruptHandler.c: 54: }
 16118  002F84  D00F               	goto	i2l8408
 16119  002F86                     i2l868:
 16120                           
 16121                           ; BSR set to: 0
 16122                           ;interruptHandler.c: 55: else{
 16123                           ;interruptHandler.c: 56: LATCbits.LATC1 = 0;
 16124  002F86  928B               	bcf	3979,1,c	;volatile
 16125                           
 16126                           ; BSR set to: 0
 16127                           ;interruptHandler.c: 57: was_low_1 = 1;
 16128  002F88  0E00               	movlw	0
 16129  002F8A  6E7A               	movwf	_was_low_1+1,c	;volatile
 16130  002F8C  0E01               	movlw	1
 16131  002F8E  6E79               	movwf	_was_low_1,c	;volatile
 16132                           
 16133                           ; BSR set to: 0
 16134                           ;interruptHandler.c: 58: TMR1H = 20000 - servoTimes[0];
 16135  002F90  0101               	movlb	1	; () banked
 16136  002F92  511C               	movf	_servoTimes& (0+255),w,b
 16137  002F94  0800               	sublw	0
 16138  002F96  0F20               	addlw	32
 16139  002F98  6ECF               	movwf	4047,c	;volatile
 16140                           
 16141                           ; BSR set to: 1
 16142                           ;interruptHandler.c: 59: TMR1L = 20000 - servoTimes[1];
 16143  002F9A  0101               	movlb	1	; () banked
 16144  002F9C  511E               	movf	(_servoTimes+2)& (0+255),w,b
 16145  002F9E  0800               	sublw	0
 16146  002FA0  0F20               	addlw	32
 16147  002FA2  6ECE               	movwf	4046,c	;volatile
 16148  002FA4                     i2l8408:
 16149                           
 16150                           ;interruptHandler.c: 60: }
 16151                           ;interruptHandler.c: 61: TMR1ON = 1;
 16152  002FA4  80CD               	bsf	4045,0,c	;volatile
 16153  002FA6                     i2l8410:
 16154                           
 16155                           ;interruptHandler.c: 62: }
 16156                           ;interruptHandler.c: 63: }
 16157                           ;interruptHandler.c: 65: if(TMR3IF){
 16158  002FA6  A2A1               	btfss	4001,1,c	;volatile
 16159  002FA8  D024               	goto	i2l874
 16160                           
 16161                           ;interruptHandler.c: 66: TMR3IF = 0;
 16162  002FAA  92A1               	bcf	4001,1,c	;volatile
 16163                           
 16164                           ;interruptHandler.c: 67: TMR3ON = 0;
 16165  002FAC  90B1               	bcf	4017,0,c	;volatile
 16166                           
 16167                           ;interruptHandler.c: 68: if(machine_state == Sorting_state){
 16168  002FAE  0100               	movlb	0	; () banked
 16169  002FB0  05FC               	decf	_machine_state& (0+255),w,b
 16170  002FB2  A4D8               	btfss	status,2,c
 16171  002FB4  D01E               	goto	i2l874
 16172                           
 16173                           ; BSR set to: 0
 16174                           ;interruptHandler.c: 69: if(was_low_3){
 16175  002FB6  507B               	movf	_was_low_3,w,c	;volatile
 16176  002FB8  107C               	iorwf	_was_low_3+1,w,c	;volatile
 16177  002FBA  B4D8               	btfsc	status,2,c
 16178  002FBC  D00A               	goto	i2l872
 16179                           
 16180                           ; BSR set to: 0
 16181                           ;interruptHandler.c: 70: LATCbits.LATC2 = 1;
 16182  002FBE  848B               	bsf	3979,2,c	;volatile
 16183                           
 16184                           ; BSR set to: 0
 16185                           ;interruptHandler.c: 71: was_low_3 = 0;
 16186  002FC0  0E00               	movlw	0
 16187  002FC2  6E7C               	movwf	_was_low_3+1,c	;volatile
 16188  002FC4  0E00               	movlw	0
 16189  002FC6  6E7B               	movwf	_was_low_3,c	;volatile
 16190                           
 16191                           ; BSR set to: 0
 16192                           ;interruptHandler.c: 72: TMR3H = servoTimes[2];
 16193  002FC8  C120  FFB3         	movff	_servoTimes+4,4019	;volatile
 16194                           
 16195                           ; BSR set to: 0
 16196                           ;interruptHandler.c: 73: TMR3L = servoTimes[3];
 16197  002FCC  C122  FFB2         	movff	_servoTimes+6,4018	;volatile
 16198                           
 16199                           ;interruptHandler.c: 74: }
 16200  002FD0  D00F               	goto	i2l8432
 16201  002FD2                     i2l872:
 16202                           
 16203                           ; BSR set to: 0
 16204                           ;interruptHandler.c: 75: else{
 16205                           ;interruptHandler.c: 76: LATCbits.LATC2 = 0;
 16206  002FD2  948B               	bcf	3979,2,c	;volatile
 16207                           
 16208                           ; BSR set to: 0
 16209                           ;interruptHandler.c: 77: was_low_3 = 1;
 16210  002FD4  0E00               	movlw	0
 16211  002FD6  6E7C               	movwf	_was_low_3+1,c	;volatile
 16212  002FD8  0E01               	movlw	1
 16213  002FDA  6E7B               	movwf	_was_low_3,c	;volatile
 16214                           
 16215                           ; BSR set to: 0
 16216                           ;interruptHandler.c: 78: TMR3H = 20000 - servoTimes[2];
 16217  002FDC  0101               	movlb	1	; () banked
 16218  002FDE  5120               	movf	(_servoTimes+4)& (0+255),w,b
 16219  002FE0  0800               	sublw	0
 16220  002FE2  0F20               	addlw	32
 16221  002FE4  6EB3               	movwf	4019,c	;volatile
 16222                           
 16223                           ; BSR set to: 1
 16224                           ;interruptHandler.c: 79: TMR3L = 20000 - servoTimes[3];
 16225  002FE6  0101               	movlb	1	; () banked
 16226  002FE8  5122               	movf	(_servoTimes+6)& (0+255),w,b
 16227  002FEA  0800               	sublw	0
 16228  002FEC  0F20               	addlw	32
 16229  002FEE  6EB2               	movwf	4018,c	;volatile
 16230  002FF0                     i2l8432:
 16231                           
 16232                           ;interruptHandler.c: 80: }
 16233                           ;interruptHandler.c: 81: TMR3ON = 1;
 16234  002FF0  80B1               	bsf	4017,0,c	;volatile
 16235  002FF2                     i2l874:
 16236  002FF2  C05A  FFF5         	movff	??_handler+15,tablat
 16237  002FF6  C059  FFF8         	movff	??_handler+14,tblptru
 16238  002FFA  C058  FFF7         	movff	??_handler+13,tblptrh
 16239  002FFE  C057  FFF6         	movff	??_handler+12,tblptrl
 16240  003002  C056  FFF4         	movff	??_handler+11,prodh
 16241  003006  C055  FFF3         	movff	??_handler+10,prodl
 16242  00300A  C054  FFDA         	movff	??_handler+9,fsr2h
 16243  00300E  C053  FFD9         	movff	??_handler+8,fsr2l
 16244  003012  C052  FFE2         	movff	??_handler+7,fsr1h
 16245  003016  C051  FFE1         	movff	??_handler+6,fsr1l
 16246  00301A  C050  FFEA         	movff	??_handler+5,fsr0h
 16247  00301E  C04F  FFE9         	movff	??_handler+4,fsr0l
 16248  003022  C04E  FFFB         	movff	??_handler+3,pclatu
 16249  003026  C04D  FFFA         	movff	??_handler+2,pclath
 16250  00302A  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 16251  00302C  0011               	retfie		f
 16252  00302E                     __end_of_handler:
 16253                           	opt stack 0
 16254                           pclatu	equ	0xFFB
 16255                           pclath	equ	0xFFA
 16256                           tblptru	equ	0xFF8
 16257                           tblptrh	equ	0xFF7
 16258                           tblptrl	equ	0xFF6
 16259                           tablat	equ	0xFF5
 16260                           prodh	equ	0xFF4
 16261                           prodl	equ	0xFF3
 16262                           intcon	equ	0xFF2
 16263                           intcon2	equ	0xFF1
 16264                           intcon3	equ	0xFF0
 16265                           indf0	equ	0xFEF
 16266                           postinc0	equ	0xFEE
 16267                           fsr0h	equ	0xFEA
 16268                           fsr0l	equ	0xFE9
 16269                           wreg	equ	0xFE8
 16270                           postdec1	equ	0xFE5
 16271                           fsr1h	equ	0xFE2
 16272                           fsr1l	equ	0xFE1
 16273                           indf2	equ	0xFDF
 16274                           postinc2	equ	0xFDE
 16275                           postdec2	equ	0xFDD
 16276                           fsr2h	equ	0xFDA
 16277                           fsr2l	equ	0xFD9
 16278                           status	equ	0xFD8
 16279                           
 16280 ;; *************** function _updateMenu *****************
 16281 ;; Defined at:
 16282 ;;		line 213 in file "UI.c"
 16283 ;; Parameters:    Size  Location     Type
 16284 ;;		None
 16285 ;; Auto vars:     Size  Location     Type
 16286 ;;		None
 16287 ;; Return value:  Size  Location     Type
 16288 ;;                  1    wreg      void 
 16289 ;; Registers used:
 16290 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16291 ;; Tracked objects:
 16292 ;;		On entry : 0/0
 16293 ;;		On exit  : 0/0
 16294 ;;		Unchanged: 0/0
 16295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16296 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16297 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16298 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16299 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16300 ;;Total ram usage:        2 bytes
 16301 ;; Hardware stack levels used:    1
 16302 ;; Hardware stack levels required when called:    5
 16303 ;; This function calls:
 16304 ;;		_change_state_to_logs_11
 16305 ;;		_change_state_to_logs_12
 16306 ;;		_change_state_to_logs_22
 16307 ;;		_change_state_to_logs_23
 16308 ;;		_change_state_to_logs_33
 16309 ;;		_change_state_to_logs_34
 16310 ;;		_change_state_to_menu_11
 16311 ;;		_change_state_to_menu_23
 16312 ;;		_dispLogs
 16313 ;;		_inputHandler
 16314 ;;		i2_change_state_to_menu_12
 16315 ;;		i2_change_state_to_menu_22
 16316 ;;		i2_change_state_to_menu_start
 16317 ;; This function is called by:
 16318 ;;		_handler
 16319 ;; This function uses a non-reentrant model
 16320 ;;
 16321                           
 16322                           	psect	text60
 16323  002262                     __ptext60:
 16324                           	opt stack 0
 16325  002262                     _updateMenu:
 16326                           	opt stack 18
 16327                           
 16328                           ;UI.c: 214: up = 0; down = 0; enter = 0; back = 0;
 16329                           
 16330                           ;incstack = 0
 16331  002262  0E00               	movlw	0
 16332  002264  6E78               	movwf	_up+1,c
 16333  002266  0E00               	movlw	0
 16334  002268  6E77               	movwf	_up,c
 16335  00226A  0E00               	movlw	0
 16336  00226C  6E68               	movwf	_down+1,c
 16337  00226E  0E00               	movlw	0
 16338  002270  6E67               	movwf	_down,c
 16339  002272  0E00               	movlw	0
 16340  002274  6E6A               	movwf	_enter+1,c
 16341  002276  0E00               	movlw	0
 16342  002278  6E69               	movwf	_enter,c
 16343  00227A  0E00               	movlw	0
 16344  00227C  6E5C               	movwf	_back+1,c
 16345  00227E  0E00               	movlw	0
 16346  002280  6E5B               	movwf	_back,c
 16347                           
 16348                           ;UI.c: 215: (INTCONbits.GIE = 0);
 16349  002282  9EF2               	bcf	intcon,7,c	;volatile
 16350                           
 16351                           ;UI.c: 217: if (inputHandler()
 16352                           ;UI.c: 220: ){
 16353  002284  EC9F  F015         	call	_inputHandler	;wreg free
 16354  002288  502A               	movf	?_inputHandler,w,c
 16355  00228A  102B               	iorwf	?_inputHandler+1,w,c
 16356  00228C  A4D8               	btfss	status,2,c
 16357  00228E  D112               	goto	i2l8106
 16358  002290  D146               	goto	i2l257
 16359  002292                     i2l7958:
 16360                           
 16361                           ;UI.c: 224: change_state_to_menu_11();
 16362  002292  ECF2  F022         	call	_change_state_to_menu_11	;wreg free
 16363                           
 16364                           ;UI.c: 225: break;
 16365  002296  D143               	goto	i2l257
 16366  002298                     i2l7960:
 16367                           
 16368                           ;UI.c: 228: if(up){
 16369  002298  5077               	movf	_up,w,c
 16370  00229A  1078               	iorwf	_up+1,w,c
 16371  00229C  B4D8               	btfsc	status,2,c
 16372  00229E  D003               	goto	i2l7964
 16373                           
 16374                           ;UI.c: 229: change_state_to_menu_23();
 16375  0022A0  ECDA  F022         	call	_change_state_to_menu_23	;wreg free
 16376                           
 16377                           ;UI.c: 230: }
 16378  0022A4  D13C               	goto	i2l257
 16379  0022A6                     i2l7964:
 16380                           
 16381                           ;UI.c: 231: else if(down){
 16382  0022A6  5067               	movf	_down,w,c
 16383  0022A8  1068               	iorwf	_down+1,w,c
 16384  0022AA  B4D8               	btfsc	status,2,c
 16385  0022AC  D003               	goto	i2l7968
 16386                           
 16387                           ;UI.c: 232: change_state_to_menu_12();
 16388  0022AE  ECC2  F022         	call	i2_change_state_to_menu_12	;wreg free
 16389                           
 16390                           ;UI.c: 233: }
 16391  0022B2  D135               	goto	i2l257
 16392  0022B4                     i2l7968:
 16393                           
 16394                           ;UI.c: 234: else if(enter){
 16395  0022B4  5069               	movf	_enter,w,c
 16396  0022B6  106A               	iorwf	_enter+1,w,c
 16397  0022B8  B4D8               	btfsc	status,2,c
 16398  0022BA  D131               	goto	i2l257
 16399                           
 16400                           ;UI.c: 235: change_state_to_menu_start();
 16401  0022BC  EC1C  F024         	call	i2_change_state_to_menu_start	;wreg free
 16402                           
 16403                           ;UI.c: 236: }
 16404                           ;UI.c: 237: break;
 16405  0022C0  D12E               	goto	i2l257
 16406  0022C2                     i2l7972:
 16407                           
 16408                           ;UI.c: 240: if(up){
 16409  0022C2  5077               	movf	_up,w,c
 16410  0022C4  1078               	iorwf	_up+1,w,c
 16411  0022C6  B4D8               	btfsc	status,2,c
 16412  0022C8  D003               	goto	i2l7976
 16413                           
 16414                           ;UI.c: 241: change_state_to_menu_11();
 16415  0022CA  ECF2  F022         	call	_change_state_to_menu_11	;wreg free
 16416                           
 16417                           ;UI.c: 242: }
 16418  0022CE  D127               	goto	i2l257
 16419  0022D0                     i2l7976:
 16420                           
 16421                           ;UI.c: 243: else if(down){
 16422  0022D0  5067               	movf	_down,w,c
 16423  0022D2  1068               	iorwf	_down+1,w,c
 16424  0022D4  B4D8               	btfsc	status,2,c
 16425  0022D6  D011               	goto	i2l7992
 16426                           
 16427                           ;UI.c: 244: change_state_to_menu_23();
 16428  0022D8  ECDA  F022         	call	_change_state_to_menu_23	;wreg free
 16429                           
 16430                           ;UI.c: 245: }
 16431  0022DC  D120               	goto	i2l257
 16432  0022DE                     i2l7984:
 16433                           
 16434                           ;UI.c: 252: if(up){
 16435  0022DE  5077               	movf	_up,w,c
 16436  0022E0  1078               	iorwf	_up+1,w,c
 16437  0022E2  B4D8               	btfsc	status,2,c
 16438  0022E4  D003               	goto	i2l7988
 16439                           
 16440                           ;UI.c: 253: change_state_to_menu_11();
 16441  0022E6  ECF2  F022         	call	_change_state_to_menu_11	;wreg free
 16442                           
 16443                           ;UI.c: 254: }
 16444  0022EA  D119               	goto	i2l257
 16445  0022EC                     i2l7988:
 16446                           
 16447                           ;UI.c: 255: else if(down){
 16448  0022EC  5067               	movf	_down,w,c
 16449  0022EE  1068               	iorwf	_down+1,w,c
 16450  0022F0  B4D8               	btfsc	status,2,c
 16451  0022F2  D003               	goto	i2l7992
 16452                           
 16453                           ;UI.c: 256: change_state_to_menu_23();
 16454  0022F4  ECDA  F022         	call	_change_state_to_menu_23	;wreg free
 16455                           
 16456                           ;UI.c: 257: }
 16457  0022F8  D112               	goto	i2l257
 16458  0022FA                     i2l7992:
 16459                           
 16460                           ;UI.c: 258: else if(enter){
 16461  0022FA  5069               	movf	_enter,w,c
 16462  0022FC  106A               	iorwf	_enter+1,w,c
 16463  0022FE  B4D8               	btfsc	status,2,c
 16464  002300  D10E               	goto	i2l257
 16465                           
 16466                           ;UI.c: 259: machine_state = Sorting_state;
 16467  002302  0E01               	movlw	1
 16468  002304  0100               	movlb	0	; () banked
 16469  002306  6FFC               	movwf	_machine_state& (0+255),b
 16470                           
 16471                           ; BSR set to: 0
 16472                           ;UI.c: 260: }
 16473                           ;UI.c: 261: break;
 16474                           
 16475                           ; BSR set to: 0
 16476                           
 16477                           ; BSR set to: 0
 16478  002308  D10A               	goto	i2l257
 16479  00230A                     i2l7996:
 16480                           
 16481                           ;UI.c: 264: if(up){
 16482  00230A  5077               	movf	_up,w,c
 16483  00230C  1078               	iorwf	_up+1,w,c
 16484  00230E  B4D8               	btfsc	status,2,c
 16485  002310  D003               	goto	i2l8000
 16486                           
 16487                           ;UI.c: 265: change_state_to_menu_22();
 16488  002312  ECAA  F022         	call	i2_change_state_to_menu_22	;wreg free
 16489                           
 16490                           ;UI.c: 266: }
 16491  002316  D103               	goto	i2l257
 16492  002318                     i2l8000:
 16493                           
 16494                           ;UI.c: 267: else if(down){
 16495  002318  5067               	movf	_down,w,c
 16496  00231A  1068               	iorwf	_down+1,w,c
 16497  00231C  B4D8               	btfsc	status,2,c
 16498  00231E  D003               	goto	i2l8004
 16499                           
 16500                           ;UI.c: 268: change_state_to_menu_11();
 16501  002320  ECF2  F022         	call	_change_state_to_menu_11	;wreg free
 16502                           
 16503                           ;UI.c: 269: }
 16504  002324  D0FC               	goto	i2l257
 16505  002326                     i2l8004:
 16506                           
 16507                           ;UI.c: 270: else if(enter){
 16508  002326  5069               	movf	_enter,w,c
 16509  002328  106A               	iorwf	_enter+1,w,c
 16510  00232A  B4D8               	btfsc	status,2,c
 16511  00232C  D0F8               	goto	i2l257
 16512                           
 16513                           ;UI.c: 271: change_state_to_logs_11();
 16514  00232E  EC6A  F023         	call	_change_state_to_logs_11	;wreg free
 16515                           
 16516                           ;UI.c: 272: }
 16517                           ;UI.c: 273: break;
 16518  002332  D0F5               	goto	i2l257
 16519  002334                     i2l8008:
 16520                           
 16521                           ;UI.c: 276: if(up){
 16522  002334  5077               	movf	_up,w,c
 16523  002336  1078               	iorwf	_up+1,w,c
 16524  002338  B4D8               	btfsc	status,2,c
 16525  00233A  D003               	goto	i2l8012
 16526                           
 16527                           ;UI.c: 277: change_state_to_logs_34();
 16528  00233C  EC0A  F023         	call	_change_state_to_logs_34	;wreg free
 16529                           
 16530                           ;UI.c: 278: }
 16531  002340  D0EE               	goto	i2l257
 16532  002342                     i2l8012:
 16533                           
 16534                           ;UI.c: 279: else if(down){
 16535  002342  5067               	movf	_down,w,c
 16536  002344  1068               	iorwf	_down+1,w,c
 16537  002346  B4D8               	btfsc	status,2,c
 16538  002348  D003               	goto	i2l8016
 16539                           
 16540                           ;UI.c: 280: change_state_to_logs_12();
 16541  00234A  EC52  F023         	call	_change_state_to_logs_12	;wreg free
 16542                           
 16543                           ;UI.c: 281: }
 16544  00234E  D0E7               	goto	i2l257
 16545  002350                     i2l8016:
 16546                           
 16547                           ;UI.c: 282: else if(enter){
 16548  002350  5069               	movf	_enter,w,c
 16549  002352  106A               	iorwf	_enter+1,w,c
 16550  002354  B4D8               	btfsc	status,2,c
 16551  002356  D007               	goto	i2l8020
 16552                           
 16553                           ;UI.c: 283: dispLogs(1);
 16554  002358  0E00               	movlw	0
 16555  00235A  6E13               	movwf	dispLogs@myLog+1,c
 16556  00235C  0E01               	movlw	1
 16557  00235E  6E12               	movwf	dispLogs@myLog,c
 16558  002360  EC56  F024         	call	_dispLogs	;wreg free
 16559                           
 16560                           ;UI.c: 284: }
 16561  002364  D0DC               	goto	i2l257
 16562  002366                     i2l8020:
 16563                           
 16564                           ;UI.c: 285: else if(back){
 16565  002366  505B               	movf	_back,w,c
 16566  002368  105C               	iorwf	_back+1,w,c
 16567  00236A  B4D8               	btfsc	status,2,c
 16568  00236C  D0D8               	goto	i2l257
 16569                           
 16570                           ;UI.c: 286: change_state_to_menu_23();
 16571  00236E  ECDA  F022         	call	_change_state_to_menu_23	;wreg free
 16572                           
 16573                           ;UI.c: 287: }
 16574                           ;UI.c: 288: break;
 16575  002372  D0D5               	goto	i2l257
 16576  002374                     i2l8024:
 16577                           
 16578                           ;UI.c: 291: if(up){
 16579  002374  5077               	movf	_up,w,c
 16580  002376  1078               	iorwf	_up+1,w,c
 16581  002378  B4D8               	btfsc	status,2,c
 16582  00237A  D003               	goto	i2l8028
 16583                           
 16584                           ;UI.c: 292: change_state_to_logs_11();
 16585  00237C  EC6A  F023         	call	_change_state_to_logs_11	;wreg free
 16586                           
 16587                           ;UI.c: 293: }
 16588  002380  D0CE               	goto	i2l257
 16589  002382                     i2l8028:
 16590                           
 16591                           ;UI.c: 294: else if(down){
 16592  002382  5067               	movf	_down,w,c
 16593  002384  1068               	iorwf	_down+1,w,c
 16594  002386  B4D8               	btfsc	status,2,c
 16595  002388  D003               	goto	i2l8032
 16596                           
 16597                           ;UI.c: 295: change_state_to_logs_23();
 16598  00238A  ECB0  F023         	call	_change_state_to_logs_23	;wreg free
 16599                           
 16600                           ;UI.c: 296: }
 16601  00238E  D0C7               	goto	i2l257
 16602  002390                     i2l8032:
 16603                           
 16604                           ;UI.c: 297: else if(enter){
 16605  002390  5069               	movf	_enter,w,c
 16606  002392  106A               	iorwf	_enter+1,w,c
 16607  002394  B4D8               	btfsc	status,2,c
 16608  002396  D007               	goto	i2l8036
 16609                           
 16610                           ;UI.c: 298: dispLogs(2);
 16611  002398  0E00               	movlw	0
 16612  00239A  6E13               	movwf	dispLogs@myLog+1,c
 16613  00239C  0E02               	movlw	2
 16614  00239E  6E12               	movwf	dispLogs@myLog,c
 16615  0023A0  EC56  F024         	call	_dispLogs	;wreg free
 16616                           
 16617                           ;UI.c: 299: }
 16618  0023A4  D0BC               	goto	i2l257
 16619  0023A6                     i2l8036:
 16620                           
 16621                           ;UI.c: 300: else if(back){
 16622  0023A6  505B               	movf	_back,w,c
 16623  0023A8  105C               	iorwf	_back+1,w,c
 16624  0023AA  B4D8               	btfsc	status,2,c
 16625  0023AC  D0B8               	goto	i2l257
 16626                           
 16627                           ;UI.c: 301: change_state_to_menu_23();
 16628  0023AE  ECDA  F022         	call	_change_state_to_menu_23	;wreg free
 16629                           
 16630                           ;UI.c: 302: }
 16631                           ;UI.c: 303: break;
 16632  0023B2  D0B5               	goto	i2l257
 16633  0023B4                     i2l8040:
 16634                           
 16635                           ;UI.c: 306: if(up){
 16636  0023B4  5077               	movf	_up,w,c
 16637  0023B6  1078               	iorwf	_up+1,w,c
 16638  0023B8  B4D8               	btfsc	status,2,c
 16639  0023BA  D003               	goto	i2l8044
 16640                           
 16641                           ;UI.c: 307: change_state_to_logs_11();
 16642  0023BC  EC6A  F023         	call	_change_state_to_logs_11	;wreg free
 16643                           
 16644                           ;UI.c: 308: }
 16645  0023C0  D0AE               	goto	i2l257
 16646  0023C2                     i2l8044:
 16647                           
 16648                           ;UI.c: 309: else if(down){
 16649  0023C2  5067               	movf	_down,w,c
 16650  0023C4  1068               	iorwf	_down+1,w,c
 16651  0023C6  B4D8               	btfsc	status,2,c
 16652  0023C8  D003               	goto	i2l8048
 16653                           
 16654                           ;UI.c: 310: change_state_to_logs_23();
 16655  0023CA  ECB0  F023         	call	_change_state_to_logs_23	;wreg free
 16656                           
 16657                           ;UI.c: 311: }
 16658  0023CE  D0A7               	goto	i2l257
 16659  0023D0                     i2l8048:
 16660                           
 16661                           ;UI.c: 312: else if(enter){
 16662  0023D0  5069               	movf	_enter,w,c
 16663  0023D2  106A               	iorwf	_enter+1,w,c
 16664  0023D4  B4D8               	btfsc	status,2,c
 16665  0023D6  D007               	goto	i2l8052
 16666                           
 16667                           ;UI.c: 313: dispLogs(2);
 16668  0023D8  0E00               	movlw	0
 16669  0023DA  6E13               	movwf	dispLogs@myLog+1,c
 16670  0023DC  0E02               	movlw	2
 16671  0023DE  6E12               	movwf	dispLogs@myLog,c
 16672  0023E0  EC56  F024         	call	_dispLogs	;wreg free
 16673                           
 16674                           ;UI.c: 314: }
 16675  0023E4  D09C               	goto	i2l257
 16676  0023E6                     i2l8052:
 16677                           
 16678                           ;UI.c: 315: else if(back){
 16679  0023E6  505B               	movf	_back,w,c
 16680  0023E8  105C               	iorwf	_back+1,w,c
 16681  0023EA  B4D8               	btfsc	status,2,c
 16682  0023EC  D098               	goto	i2l257
 16683                           
 16684                           ;UI.c: 316: change_state_to_menu_23();
 16685  0023EE  ECDA  F022         	call	_change_state_to_menu_23	;wreg free
 16686                           
 16687                           ;UI.c: 317: }
 16688                           ;UI.c: 318: break;
 16689  0023F2  D095               	goto	i2l257
 16690  0023F4                     i2l8056:
 16691                           
 16692                           ;UI.c: 321: if(up){
 16693  0023F4  5077               	movf	_up,w,c
 16694  0023F6  1078               	iorwf	_up+1,w,c
 16695  0023F8  B4D8               	btfsc	status,2,c
 16696  0023FA  D003               	goto	i2l8060
 16697                           
 16698                           ;UI.c: 322: change_state_to_logs_22();
 16699  0023FC  EC3A  F023         	call	_change_state_to_logs_22	;wreg free
 16700                           
 16701                           ;UI.c: 323: }
 16702  002400  D08E               	goto	i2l257
 16703  002402                     i2l8060:
 16704                           
 16705                           ;UI.c: 324: else if(down){
 16706  002402  5067               	movf	_down,w,c
 16707  002404  1068               	iorwf	_down+1,w,c
 16708  002406  B4D8               	btfsc	status,2,c
 16709  002408  D003               	goto	i2l8064
 16710                           
 16711                           ;UI.c: 325: change_state_to_logs_34();
 16712  00240A  EC0A  F023         	call	_change_state_to_logs_34	;wreg free
 16713                           
 16714                           ;UI.c: 326: }
 16715  00240E  D087               	goto	i2l257
 16716  002410                     i2l8064:
 16717                           
 16718                           ;UI.c: 327: else if(enter){
 16719  002410  5069               	movf	_enter,w,c
 16720  002412  106A               	iorwf	_enter+1,w,c
 16721  002414  B4D8               	btfsc	status,2,c
 16722  002416  D007               	goto	i2l8068
 16723                           
 16724                           ;UI.c: 328: dispLogs(3);
 16725  002418  0E00               	movlw	0
 16726  00241A  6E13               	movwf	dispLogs@myLog+1,c
 16727  00241C  0E03               	movlw	3
 16728  00241E  6E12               	movwf	dispLogs@myLog,c
 16729  002420  EC56  F024         	call	_dispLogs	;wreg free
 16730                           
 16731                           ;UI.c: 329: }
 16732  002424  D07C               	goto	i2l257
 16733  002426                     i2l8068:
 16734                           
 16735                           ;UI.c: 330: else if(back){
 16736  002426  505B               	movf	_back,w,c
 16737  002428  105C               	iorwf	_back+1,w,c
 16738  00242A  B4D8               	btfsc	status,2,c
 16739  00242C  D078               	goto	i2l257
 16740                           
 16741                           ;UI.c: 331: change_state_to_menu_23();
 16742  00242E  ECDA  F022         	call	_change_state_to_menu_23	;wreg free
 16743                           
 16744                           ;UI.c: 332: }
 16745                           ;UI.c: 333: break;
 16746  002432  D075               	goto	i2l257
 16747  002434                     i2l8072:
 16748                           
 16749                           ;UI.c: 336: if(up){
 16750  002434  5077               	movf	_up,w,c
 16751  002436  1078               	iorwf	_up+1,w,c
 16752  002438  B4D8               	btfsc	status,2,c
 16753  00243A  D003               	goto	i2l8076
 16754                           
 16755                           ;UI.c: 337: change_state_to_logs_22();
 16756  00243C  EC3A  F023         	call	_change_state_to_logs_22	;wreg free
 16757                           
 16758                           ;UI.c: 338: }
 16759  002440  D06E               	goto	i2l257
 16760  002442                     i2l8076:
 16761                           
 16762                           ;UI.c: 339: else if(down){
 16763  002442  5067               	movf	_down,w,c
 16764  002444  1068               	iorwf	_down+1,w,c
 16765  002446  B4D8               	btfsc	status,2,c
 16766  002448  D003               	goto	i2l8080
 16767                           
 16768                           ;UI.c: 340: change_state_to_logs_34();
 16769  00244A  EC0A  F023         	call	_change_state_to_logs_34	;wreg free
 16770                           
 16771                           ;UI.c: 341: }
 16772  00244E  D067               	goto	i2l257
 16773  002450                     i2l8080:
 16774                           
 16775                           ;UI.c: 342: else if(enter){
 16776  002450  5069               	movf	_enter,w,c
 16777  002452  106A               	iorwf	_enter+1,w,c
 16778  002454  B4D8               	btfsc	status,2,c
 16779  002456  D007               	goto	i2l8084
 16780                           
 16781                           ;UI.c: 343: dispLogs(3);
 16782  002458  0E00               	movlw	0
 16783  00245A  6E13               	movwf	dispLogs@myLog+1,c
 16784  00245C  0E03               	movlw	3
 16785  00245E  6E12               	movwf	dispLogs@myLog,c
 16786  002460  EC56  F024         	call	_dispLogs	;wreg free
 16787                           
 16788                           ;UI.c: 344: }
 16789  002464  D05C               	goto	i2l257
 16790  002466                     i2l8084:
 16791                           
 16792                           ;UI.c: 345: else if(back){
 16793  002466  505B               	movf	_back,w,c
 16794  002468  105C               	iorwf	_back+1,w,c
 16795  00246A  B4D8               	btfsc	status,2,c
 16796  00246C  D058               	goto	i2l257
 16797                           
 16798                           ;UI.c: 346: change_state_to_menu_23();
 16799  00246E  ECDA  F022         	call	_change_state_to_menu_23	;wreg free
 16800                           
 16801                           ;UI.c: 347: }
 16802                           ;UI.c: 348: break;
 16803  002472  D055               	goto	i2l257
 16804  002474                     i2l8088:
 16805                           
 16806                           ;UI.c: 351: if(up){
 16807  002474  5077               	movf	_up,w,c
 16808  002476  1078               	iorwf	_up+1,w,c
 16809  002478  B4D8               	btfsc	status,2,c
 16810  00247A  D003               	goto	i2l8092
 16811                           
 16812                           ;UI.c: 352: change_state_to_logs_33();
 16813  00247C  EC22  F023         	call	_change_state_to_logs_33	;wreg free
 16814                           
 16815                           ;UI.c: 353: }
 16816  002480  D04E               	goto	i2l257
 16817  002482                     i2l8092:
 16818                           
 16819                           ;UI.c: 354: else if(down){
 16820  002482  5067               	movf	_down,w,c
 16821  002484  1068               	iorwf	_down+1,w,c
 16822  002486  B4D8               	btfsc	status,2,c
 16823  002488  D003               	goto	i2l8096
 16824                           
 16825                           ;UI.c: 355: change_state_to_logs_11();
 16826  00248A  EC6A  F023         	call	_change_state_to_logs_11	;wreg free
 16827                           
 16828                           ;UI.c: 356: }
 16829  00248E  D047               	goto	i2l257
 16830  002490                     i2l8096:
 16831                           
 16832                           ;UI.c: 357: else if(enter){
 16833  002490  5069               	movf	_enter,w,c
 16834  002492  106A               	iorwf	_enter+1,w,c
 16835  002494  B4D8               	btfsc	status,2,c
 16836  002496  D007               	goto	i2l8100
 16837                           
 16838                           ;UI.c: 358: dispLogs(4);
 16839  002498  0E00               	movlw	0
 16840  00249A  6E13               	movwf	dispLogs@myLog+1,c
 16841  00249C  0E04               	movlw	4
 16842  00249E  6E12               	movwf	dispLogs@myLog,c
 16843  0024A0  EC56  F024         	call	_dispLogs	;wreg free
 16844                           
 16845                           ;UI.c: 359: }
 16846  0024A4  D03C               	goto	i2l257
 16847  0024A6                     i2l8100:
 16848                           
 16849                           ;UI.c: 360: else if(back){
 16850  0024A6  505B               	movf	_back,w,c
 16851  0024A8  105C               	iorwf	_back+1,w,c
 16852  0024AA  B4D8               	btfsc	status,2,c
 16853  0024AC  D038               	goto	i2l257
 16854                           
 16855                           ;UI.c: 361: change_state_to_menu_23();
 16856  0024AE  ECDA  F022         	call	_change_state_to_menu_23	;wreg free
 16857                           
 16858                           ;UI.c: 367: }
 16859                           
 16860                           ;UI.c: 366: break;
 16861                           
 16862                           ;UI.c: 365: default:
 16863                           
 16864                           ;UI.c: 362: }
 16865                           ;UI.c: 363: break;
 16866  0024B2  D035               	goto	i2l257
 16867  0024B4                     i2l8106:
 16868  0024B4  C0E2  F043         	movff	_cur_state,??_updateMenu
 16869  0024B8  C0E3  F044         	movff	_cur_state+1,??_updateMenu+1
 16870                           
 16871                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
 16872                           ; Switch size 1, requested type "space"
 16873                           ; Number of cases is 3, Range of values is 0 to 4
 16874                           ; switch strategies available:
 16875                           ; Name         Instructions Cycles
 16876                           ; simple_byte           10     6 (average)
 16877                           ;	Chosen strategy is simple_byte
 16878  0024BC  5044               	movf	??_updateMenu+1,w,c
 16879  0024BE  0A00               	xorlw	0	; case 0
 16880  0024C0  B4D8               	btfsc	status,2,c
 16881  0024C2  D007               	goto	i2l8742
 16882  0024C4  0A03               	xorlw	3	; case 3
 16883  0024C6  B4D8               	btfsc	status,2,c
 16884  0024C8  D015               	goto	i2l8744
 16885  0024CA  0A07               	xorlw	7	; case 4
 16886  0024CC  B4D8               	btfsc	status,2,c
 16887  0024CE  D020               	goto	i2l8746
 16888  0024D0  D026               	goto	i2l257
 16889  0024D2                     i2l8742:
 16890                           
 16891                           ; Switch size 1, requested type "space"
 16892                           ; Number of cases is 5, Range of values is 0 to 23
 16893                           ; switch strategies available:
 16894                           ; Name         Instructions Cycles
 16895                           ; simple_byte           16     9 (average)
 16896                           ;	Chosen strategy is simple_byte
 16897  0024D2  5043               	movf	??_updateMenu,w,c
 16898  0024D4  0A00               	xorlw	0	; case 0
 16899  0024D6  B4D8               	btfsc	status,2,c
 16900  0024D8  D6DC               	goto	i2l7958
 16901  0024DA  0A0B               	xorlw	11	; case 11
 16902  0024DC  B4D8               	btfsc	status,2,c
 16903  0024DE  D6DC               	goto	i2l7960
 16904  0024E0  0A07               	xorlw	7	; case 12
 16905  0024E2  B4D8               	btfsc	status,2,c
 16906  0024E4  D6EE               	goto	i2l7972
 16907  0024E6  0A1A               	xorlw	26	; case 22
 16908  0024E8  B4D8               	btfsc	status,2,c
 16909  0024EA  D6F9               	goto	i2l7984
 16910  0024EC  0A01               	xorlw	1	; case 23
 16911  0024EE  B4D8               	btfsc	status,2,c
 16912  0024F0  D70C               	goto	i2l7996
 16913  0024F2  D015               	goto	i2l257
 16914  0024F4                     i2l8744:
 16915                           
 16916                           ; Switch size 1, requested type "space"
 16917                           ; Number of cases is 4, Range of values is 243 to 255
 16918                           ; switch strategies available:
 16919                           ; Name         Instructions Cycles
 16920                           ; simple_byte           13     7 (average)
 16921                           ;	Chosen strategy is simple_byte
 16922  0024F4  5043               	movf	??_updateMenu,w,c
 16923  0024F6  0AF3               	xorlw	243	; case 243
 16924  0024F8  B4D8               	btfsc	status,2,c
 16925  0024FA  D71C               	goto	i2l8008
 16926  0024FC  0A07               	xorlw	7	; case 244
 16927  0024FE  B4D8               	btfsc	status,2,c
 16928  002500  D739               	goto	i2l8024
 16929  002502  0A0A               	xorlw	10	; case 254
 16930  002504  B4D8               	btfsc	status,2,c
 16931  002506  D756               	goto	i2l8040
 16932  002508  0A01               	xorlw	1	; case 255
 16933  00250A  B4D8               	btfsc	status,2,c
 16934  00250C  D773               	goto	i2l8056
 16935  00250E  D007               	goto	i2l257
 16936  002510                     i2l8746:
 16937                           
 16938                           ; Switch size 1, requested type "space"
 16939                           ; Number of cases is 2, Range of values is 9 to 10
 16940                           ; switch strategies available:
 16941                           ; Name         Instructions Cycles
 16942                           ; simple_byte            7     4 (average)
 16943                           ;	Chosen strategy is simple_byte
 16944  002510  5043               	movf	??_updateMenu,w,c
 16945  002512  0A09               	xorlw	9	; case 9
 16946  002514  B4D8               	btfsc	status,2,c
 16947  002516  D78E               	goto	i2l8072
 16948  002518  0A03               	xorlw	3	; case 10
 16949  00251A  B4D8               	btfsc	status,2,c
 16950  00251C  D7AB               	goto	i2l8088
 16951  00251E                     i2l257:
 16952                           
 16953                           ;UI.c: 368: }
 16954                           ;UI.c: 369: (INTCONbits.GIE = 1);
 16955  00251E  8EF2               	bsf	intcon,7,c	;volatile
 16956  002520  0012               	return		;funcret
 16957  002522                     __end_of_updateMenu:
 16958                           	opt stack 0
 16959                           pclatu	equ	0xFFB
 16960                           pclath	equ	0xFFA
 16961                           tblptru	equ	0xFF8
 16962                           tblptrh	equ	0xFF7
 16963                           tblptrl	equ	0xFF6
 16964                           tablat	equ	0xFF5
 16965                           prodh	equ	0xFF4
 16966                           prodl	equ	0xFF3
 16967                           intcon	equ	0xFF2
 16968                           intcon2	equ	0xFF1
 16969                           intcon3	equ	0xFF0
 16970                           indf0	equ	0xFEF
 16971                           postinc0	equ	0xFEE
 16972                           fsr0h	equ	0xFEA
 16973                           fsr0l	equ	0xFE9
 16974                           wreg	equ	0xFE8
 16975                           postdec1	equ	0xFE5
 16976                           fsr1h	equ	0xFE2
 16977                           fsr1l	equ	0xFE1
 16978                           indf2	equ	0xFDF
 16979                           postinc2	equ	0xFDE
 16980                           postdec2	equ	0xFDD
 16981                           fsr2h	equ	0xFDA
 16982                           fsr2l	equ	0xFD9
 16983                           status	equ	0xFD8
 16984                           
 16985 ;; *************** function i2_change_state_to_menu_start *****************
 16986 ;; Defined at:
 16987 ;;		line 474 in file "UI.c"
 16988 ;; Parameters:    Size  Location     Type
 16989 ;;		None
 16990 ;; Auto vars:     Size  Location     Type
 16991 ;;		None
 16992 ;; Return value:  Size  Location     Type
 16993 ;;                  1    wreg      void 
 16994 ;; Registers used:
 16995 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16996 ;; Tracked objects:
 16997 ;;		On entry : 0/0
 16998 ;;		On exit  : 0/0
 16999 ;;		Unchanged: 0/0
 17000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17001 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17002 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17003 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17004 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17005 ;;Total ram usage:        0 bytes
 17006 ;; Hardware stack levels used:    1
 17007 ;; Hardware stack levels required when called:    4
 17008 ;; This function calls:
 17009 ;;		i2_lcdInst
 17010 ;;		i2_printRTC
 17011 ;;		i2_printf
 17012 ;; This function is called by:
 17013 ;;		_updateMenu
 17014 ;; This function uses a non-reentrant model
 17015 ;;
 17016                           
 17017                           	psect	text61
 17018  004838                     __ptext61:
 17019                           	opt stack 0
 17020  004838                     i2_change_state_to_menu_start:
 17021                           	opt stack 18
 17022                           
 17023                           ;UI.c: 475: cur_state = 0;
 17024                           
 17025                           ;incstack = 0
 17026  004838  0E00               	movlw	0
 17027  00483A  0100               	movlb	0	; () banked
 17028  00483C  6FE3               	movwf	(_cur_state+1)& (0+255),b
 17029  00483E  0E00               	movlw	0
 17030  004840  6FE2               	movwf	_cur_state& (0+255),b
 17031                           
 17032                           ; BSR set to: 0
 17033                           ;UI.c: 477: lcdInst(0b10000000);;
 17034  004842  0E80               	movlw	128
 17035  004844  ECE4  F024         	call	i2_lcdInst
 17036                           
 17037                           ;UI.c: 478: printRTC();
 17038  004848  EC91  F012         	call	i2_printRTC	;wreg free
 17039                           
 17040                           ;UI.c: 479: lcdInst(0b11000000);;
 17041  00484C  0EC0               	movlw	192
 17042  00484E  ECE4  F024         	call	i2_lcdInst
 17043                           
 17044                           ;UI.c: 480: printf("PUSH TO CONTINUE");
 17045  004852  0EF7               	movlw	low STR_30
 17046  004854  6E0D               	movwf	i2printf@f,c
 17047  004856  0EFD               	movlw	high STR_30
 17048  004858  6E0E               	movwf	i2printf@f+1,c
 17049  00485A  EC96  F00C         	call	i2_printf	;wreg free
 17050  00485E  0012               	return		;funcret
 17051  004860                     __end_ofi2_change_state_to_menu_start:
 17052                           	opt stack 0
 17053                           pclatu	equ	0xFFB
 17054                           pclath	equ	0xFFA
 17055                           tblptru	equ	0xFF8
 17056                           tblptrh	equ	0xFF7
 17057                           tblptrl	equ	0xFF6
 17058                           tablat	equ	0xFF5
 17059                           prodh	equ	0xFF4
 17060                           prodl	equ	0xFF3
 17061                           intcon	equ	0xFF2
 17062                           intcon2	equ	0xFF1
 17063                           intcon3	equ	0xFF0
 17064                           indf0	equ	0xFEF
 17065                           postinc0	equ	0xFEE
 17066                           fsr0h	equ	0xFEA
 17067                           fsr0l	equ	0xFE9
 17068                           wreg	equ	0xFE8
 17069                           postdec1	equ	0xFE5
 17070                           fsr1h	equ	0xFE2
 17071                           fsr1l	equ	0xFE1
 17072                           indf2	equ	0xFDF
 17073                           postinc2	equ	0xFDE
 17074                           postdec2	equ	0xFDD
 17075                           fsr2h	equ	0xFDA
 17076                           fsr2l	equ	0xFD9
 17077                           status	equ	0xFD8
 17078                           
 17079 ;; *************** function i2_printRTC *****************
 17080 ;; Defined at:
 17081 ;;		line 63 in file "RTC.c"
 17082 ;; Parameters:    Size  Location     Type
 17083 ;;		None
 17084 ;; Auto vars:     Size  Location     Type
 17085 ;;  printRTC       14   44[COMRAM] int [7]
 17086 ;;  printRTC        4   60[COMRAM] unsigned char [4]
 17087 ;;  printRTC        2   64[COMRAM] int 
 17088 ;;  printRTC        2   58[COMRAM] int 
 17089 ;; Return value:  Size  Location     Type
 17090 ;;                  1    wreg      void 
 17091 ;; Registers used:
 17092 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17093 ;; Tracked objects:
 17094 ;;		On entry : 0/0
 17095 ;;		On exit  : 0/0
 17096 ;;		Unchanged: 0/0
 17097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17098 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17099 ;;      Locals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17100 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17101 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17102 ;;Total ram usage:       25 bytes
 17103 ;; Hardware stack levels used:    1
 17104 ;; Hardware stack levels required when called:    3
 17105 ;; This function calls:
 17106 ;;		i2_getRTC
 17107 ;;		i2_lcdInst
 17108 ;;		i2_printf
 17109 ;;		i2_strcpy
 17110 ;; This function is called by:
 17111 ;;		i2_change_state_to_menu_start
 17112 ;; This function uses a non-reentrant model
 17113 ;;
 17114                           
 17115                           	psect	text62
 17116  002522                     __ptext62:
 17117                           	opt stack 0
 17118  002522                     i2_printRTC:
 17119                           	opt stack 18
 17120                           
 17121                           ;RTC.c: 64: getRTC();
 17122                           
 17123                           ;incstack = 0
 17124  002522  EC4A  F01F         	call	i2_getRTC	;wreg free
 17125                           
 17126                           ;RTC.c: 65: char month[] = "MMM";
 17127  002526  C133  F03D         	movff	printRTC@F3216,i2printRTC@month
 17128  00252A  C134  F03E         	movff	printRTC@F3216+1,i2printRTC@month+1
 17129  00252E  C135  F03F         	movff	printRTC@F3216+2,i2printRTC@month+2
 17130  002532  C136  F040         	movff	printRTC@F3216+3,i2printRTC@month+3
 17131                           
 17132                           ;RTC.c: 66: int INT_time[7];
 17133                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
 17134  002536  0E00               	movlw	0
 17135  002538  6E42               	movwf	i2printRTC@i+1,c
 17136  00253A  0E00               	movlw	0
 17137  00253C  6E41               	movwf	i2printRTC@i,c
 17138  00253E  BE42               	btfsc	i2printRTC@i+1,7,c
 17139  002540  D006               	goto	i2l6296
 17140  002542  5042               	movf	i2printRTC@i+1,w,c
 17141  002544  E135               	bnz	i2l602
 17142  002546  0E07               	movlw	7
 17143  002548  5C41               	subwf	i2printRTC@i,w,c
 17144  00254A  B0D8               	btfsc	status,0,c
 17145  00254C  D031               	goto	i2l602
 17146  00254E                     i2l6296:
 17147                           
 17148                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 17149  00254E  0E24               	movlw	low _time
 17150  002550  2441               	addwf	i2printRTC@i,w,c
 17151  002552  6ED9               	movwf	fsr2l,c
 17152  002554  0E01               	movlw	high _time
 17153  002556  2042               	addwfc	i2printRTC@i+1,w,c
 17154  002558  6EDA               	movwf	fsr2h,c
 17155  00255A  50DF               	movf	indf2,w,c
 17156  00255C  6E2A               	movwf	??i2_printRTC& (0+255),c
 17157  00255E  3A2A               	swapf	??i2_printRTC,f,c
 17158  002560  0E0F               	movlw	15
 17159  002562  162A               	andwf	??i2_printRTC,f,c
 17160  002564  0E0F               	movlw	15
 17161  002566  162A               	andwf	??i2_printRTC,f,c
 17162  002568  502A               	movf	??i2_printRTC,w,c
 17163  00256A  0D0A               	mullw	10
 17164  00256C  0E24               	movlw	low _time
 17165  00256E  2441               	addwf	i2printRTC@i,w,c
 17166  002570  6ED9               	movwf	fsr2l,c
 17167  002572  0E01               	movlw	high _time
 17168  002574  2042               	addwfc	i2printRTC@i+1,w,c
 17169  002576  6EDA               	movwf	fsr2h,c
 17170  002578  50DF               	movf	indf2,w,c
 17171  00257A  0B0F               	andlw	15
 17172  00257C  6E2B               	movwf	(??i2_printRTC+1)& (0+255),c
 17173  00257E  6A2C               	clrf	(??i2_printRTC+2)& (0+255),c
 17174  002580  50F3               	movf	prodl,w,c
 17175  002582  262B               	addwf	??i2_printRTC+1,f,c
 17176  002584  50F4               	movf	prodh,w,c
 17177  002586  222C               	addwfc	??i2_printRTC+2,f,c
 17178  002588  90D8               	bcf	status,0,c
 17179  00258A  3441               	rlcf	i2printRTC@i,w,c
 17180  00258C  6ED9               	movwf	fsr2l,c
 17181  00258E  3442               	rlcf	i2printRTC@i+1,w,c
 17182  002590  6EDA               	movwf	fsr2h,c
 17183  002592  0E2D               	movlw	low i2printRTC@INT_time
 17184  002594  26D9               	addwf	fsr2l,f,c
 17185  002596  0E00               	movlw	high i2printRTC@INT_time
 17186  002598  22DA               	addwfc	fsr2h,f,c
 17187  00259A  C02B  FFDE         	movff	??i2_printRTC+1,postinc2
 17188  00259E  C02C  FFDD         	movff	??i2_printRTC+2,postdec2
 17189  0025A2  4A41               	infsnz	i2printRTC@i,f,c
 17190  0025A4  2A42               	incf	i2printRTC@i+1,f,c
 17191  0025A6  BE42               	btfsc	i2printRTC@i+1,7,c
 17192  0025A8  D7D2               	goto	i2l6296
 17193  0025AA  5042               	movf	i2printRTC@i+1,w,c
 17194  0025AC  E101               	bnz	i2u480_40
 17195  0025AE  D7CB               	goto	L10
 17196  0025B0                     i2u480_40:
 17197  0025B0                     i2l602:
 17198                           
 17199                           ;RTC.c: 69: }
 17200                           ;RTC.c: 70: int RTC_month = INT_time[5];
 17201  0025B0  C037  F03B         	movff	i2printRTC@INT_time+10,i2printRTC@RTC_month
 17202  0025B4  C038  F03C         	movff	i2printRTC@INT_time+11,i2printRTC@RTC_month+1
 17203                           
 17204                           ;RTC.c: 71: switch(RTC_month){
 17205  0025B8  D084               	goto	i2l6328
 17206  0025BA                     i2l6302:
 17207                           
 17208                           ;RTC.c: 73: strcpy(month, "JAN");
 17209  0025BA  0E3D               	movlw	low i2printRTC@month
 17210  0025BC  6E01               	movwf	i2strcpy@to,c
 17211  0025BE  0E00               	movlw	high i2printRTC@month
 17212  0025C0  6E02               	movwf	i2strcpy@to+1,c
 17213  0025C2  0EDB               	movlw	low STR_8
 17214  0025C4  6E03               	movwf	i2strcpy@from,c
 17215  0025C6  0EFF               	movlw	high STR_8
 17216  0025C8  6E04               	movwf	i2strcpy@from+1,c
 17217  0025CA  EC91  F022         	call	i2_strcpy	;wreg free
 17218                           
 17219                           ;RTC.c: 74: break;
 17220  0025CE  D0A6               	goto	i2l6330
 17221  0025D0                     i2l6304:
 17222                           
 17223                           ;RTC.c: 76: strcpy(month, "FEB");
 17224  0025D0  0E3D               	movlw	low i2printRTC@month
 17225  0025D2  6E01               	movwf	i2strcpy@to,c
 17226  0025D4  0E00               	movlw	high i2printRTC@month
 17227  0025D6  6E02               	movwf	i2strcpy@to+1,c
 17228  0025D8  0ECB               	movlw	low STR_9
 17229  0025DA  6E03               	movwf	i2strcpy@from,c
 17230  0025DC  0EFF               	movlw	high STR_9
 17231  0025DE  6E04               	movwf	i2strcpy@from+1,c
 17232  0025E0  EC91  F022         	call	i2_strcpy	;wreg free
 17233                           
 17234                           ;RTC.c: 77: break;
 17235  0025E4  D09B               	goto	i2l6330
 17236  0025E6                     i2l6306:
 17237                           
 17238                           ;RTC.c: 79: strcpy(month, "MAR");
 17239  0025E6  0E3D               	movlw	low i2printRTC@month
 17240  0025E8  6E01               	movwf	i2strcpy@to,c
 17241  0025EA  0E00               	movlw	high i2printRTC@month
 17242  0025EC  6E02               	movwf	i2strcpy@to+1,c
 17243  0025EE  0EE7               	movlw	low STR_10
 17244  0025F0  6E03               	movwf	i2strcpy@from,c
 17245  0025F2  0EFF               	movlw	high STR_10
 17246  0025F4  6E04               	movwf	i2strcpy@from+1,c
 17247  0025F6  EC91  F022         	call	i2_strcpy	;wreg free
 17248                           
 17249                           ;RTC.c: 80: break;
 17250  0025FA  D090               	goto	i2l6330
 17251  0025FC                     i2l6308:
 17252                           
 17253                           ;RTC.c: 82: strcpy(month, "APR");
 17254  0025FC  0E3D               	movlw	low i2printRTC@month
 17255  0025FE  6E01               	movwf	i2strcpy@to,c
 17256  002600  0E00               	movlw	high i2printRTC@month
 17257  002602  6E02               	movwf	i2strcpy@to+1,c
 17258  002604  0EEB               	movlw	low STR_11
 17259  002606  6E03               	movwf	i2strcpy@from,c
 17260  002608  0EFF               	movlw	high STR_11
 17261  00260A  6E04               	movwf	i2strcpy@from+1,c
 17262  00260C  EC91  F022         	call	i2_strcpy	;wreg free
 17263                           
 17264                           ;RTC.c: 83: break;
 17265  002610  D085               	goto	i2l6330
 17266  002612                     i2l6310:
 17267                           
 17268                           ;RTC.c: 85: strcpy(month, "MAY");
 17269  002612  0E3D               	movlw	low i2printRTC@month
 17270  002614  6E01               	movwf	i2strcpy@to,c
 17271  002616  0E00               	movlw	high i2printRTC@month
 17272  002618  6E02               	movwf	i2strcpy@to+1,c
 17273  00261A  0EFB               	movlw	low STR_12
 17274  00261C  6E03               	movwf	i2strcpy@from,c
 17275  00261E  0EFF               	movlw	high STR_12
 17276  002620  6E04               	movwf	i2strcpy@from+1,c
 17277  002622  EC91  F022         	call	i2_strcpy	;wreg free
 17278                           
 17279                           ;RTC.c: 86: break;
 17280  002626  D07A               	goto	i2l6330
 17281  002628                     i2l6312:
 17282                           
 17283                           ;RTC.c: 88: strcpy(month, "JUN");
 17284  002628  0E3D               	movlw	low i2printRTC@month
 17285  00262A  6E01               	movwf	i2strcpy@to,c
 17286  00262C  0E00               	movlw	high i2printRTC@month
 17287  00262E  6E02               	movwf	i2strcpy@to+1,c
 17288  002630  0EDF               	movlw	low STR_13
 17289  002632  6E03               	movwf	i2strcpy@from,c
 17290  002634  0EFF               	movlw	high STR_13
 17291  002636  6E04               	movwf	i2strcpy@from+1,c
 17292  002638  EC91  F022         	call	i2_strcpy	;wreg free
 17293                           
 17294                           ;RTC.c: 89: break;
 17295  00263C  D06F               	goto	i2l6330
 17296  00263E                     i2l6314:
 17297                           
 17298                           ;RTC.c: 91: strcpy(month, "JUL");
 17299  00263E  0E3D               	movlw	low i2printRTC@month
 17300  002640  6E01               	movwf	i2strcpy@to,c
 17301  002642  0E00               	movlw	high i2printRTC@month
 17302  002644  6E02               	movwf	i2strcpy@to+1,c
 17303  002646  0ED7               	movlw	low STR_14
 17304  002648  6E03               	movwf	i2strcpy@from,c
 17305  00264A  0EFF               	movlw	high STR_14
 17306  00264C  6E04               	movwf	i2strcpy@from+1,c
 17307  00264E  EC91  F022         	call	i2_strcpy	;wreg free
 17308                           
 17309                           ;RTC.c: 92: break;
 17310  002652  D064               	goto	i2l6330
 17311  002654                     i2l6316:
 17312                           
 17313                           ;RTC.c: 94: strcpy(month, "AUG");
 17314  002654  0E3D               	movlw	low i2printRTC@month
 17315  002656  6E01               	movwf	i2strcpy@to,c
 17316  002658  0E00               	movlw	high i2printRTC@month
 17317  00265A  6E02               	movwf	i2strcpy@to+1,c
 17318  00265C  0ED3               	movlw	low STR_15
 17319  00265E  6E03               	movwf	i2strcpy@from,c
 17320  002660  0EFF               	movlw	high STR_15
 17321  002662  6E04               	movwf	i2strcpy@from+1,c
 17322  002664  EC91  F022         	call	i2_strcpy	;wreg free
 17323                           
 17324                           ;RTC.c: 95: break;
 17325  002668  D059               	goto	i2l6330
 17326  00266A                     i2l6318:
 17327                           
 17328                           ;RTC.c: 97: strcpy(month, "SEP");
 17329  00266A  0E3D               	movlw	low i2printRTC@month
 17330  00266C  6E01               	movwf	i2strcpy@to,c
 17331  00266E  0E00               	movlw	high i2printRTC@month
 17332  002670  6E02               	movwf	i2strcpy@to+1,c
 17333  002672  0EE3               	movlw	low STR_16
 17334  002674  6E03               	movwf	i2strcpy@from,c
 17335  002676  0EFF               	movlw	high STR_16
 17336  002678  6E04               	movwf	i2strcpy@from+1,c
 17337  00267A  EC91  F022         	call	i2_strcpy	;wreg free
 17338                           
 17339                           ;RTC.c: 98: break;
 17340  00267E  D04E               	goto	i2l6330
 17341  002680                     i2l6320:
 17342                           
 17343                           ;RTC.c: 100: strcpy(month, "OCT");
 17344  002680  0E3D               	movlw	low i2printRTC@month
 17345  002682  6E01               	movwf	i2strcpy@to,c
 17346  002684  0E00               	movlw	high i2printRTC@month
 17347  002686  6E02               	movwf	i2strcpy@to+1,c
 17348  002688  0EF3               	movlw	low STR_17
 17349  00268A  6E03               	movwf	i2strcpy@from,c
 17350  00268C  0EFF               	movlw	high STR_17
 17351  00268E  6E04               	movwf	i2strcpy@from+1,c
 17352  002690  EC91  F022         	call	i2_strcpy	;wreg free
 17353                           
 17354                           ;RTC.c: 101: break;
 17355  002694  D043               	goto	i2l6330
 17356  002696                     i2l6322:
 17357                           
 17358                           ;RTC.c: 103: strcpy(month, "NOV");
 17359  002696  0E3D               	movlw	low i2printRTC@month
 17360  002698  6E01               	movwf	i2strcpy@to,c
 17361  00269A  0E00               	movlw	high i2printRTC@month
 17362  00269C  6E02               	movwf	i2strcpy@to+1,c
 17363  00269E  0EF7               	movlw	low STR_18
 17364  0026A0  6E03               	movwf	i2strcpy@from,c
 17365  0026A2  0EFF               	movlw	high STR_18
 17366  0026A4  6E04               	movwf	i2strcpy@from+1,c
 17367  0026A6  EC91  F022         	call	i2_strcpy	;wreg free
 17368                           
 17369                           ;RTC.c: 104: break;
 17370  0026AA  D038               	goto	i2l6330
 17371  0026AC                     i2l6324:
 17372                           
 17373                           ;RTC.c: 106: strcpy(month, "DEC");
 17374  0026AC  0E3D               	movlw	low i2printRTC@month
 17375  0026AE  6E01               	movwf	i2strcpy@to,c
 17376  0026B0  0E00               	movlw	high i2printRTC@month
 17377  0026B2  6E02               	movwf	i2strcpy@to+1,c
 17378  0026B4  0ECF               	movlw	low STR_19
 17379  0026B6  6E03               	movwf	i2strcpy@from,c
 17380  0026B8  0EFF               	movlw	high STR_19
 17381  0026BA  6E04               	movwf	i2strcpy@from+1,c
 17382  0026BC  EC91  F022         	call	i2_strcpy	;wreg free
 17383                           
 17384                           ;RTC.c: 108: }
 17385                           
 17386                           ;RTC.c: 107: break;
 17387  0026C0  D02D               	goto	i2l6330
 17388  0026C2                     i2l6328:
 17389  0026C2  C03B  F02A         	movff	i2printRTC@RTC_month,??i2_printRTC
 17390  0026C6  C03C  F02B         	movff	i2printRTC@RTC_month+1,??i2_printRTC+1
 17391                           
 17392                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 17393                           ; Switch size 1, requested type "space"
 17394                           ; Number of cases is 1, Range of values is 0 to 0
 17395                           ; switch strategies available:
 17396                           ; Name         Instructions Cycles
 17397                           ; simple_byte            4     3 (average)
 17398                           ;	Chosen strategy is simple_byte
 17399  0026CA  502B               	movf	??i2_printRTC+1,w,c
 17400  0026CC  0A00               	xorlw	0	; case 0
 17401  0026CE  A4D8               	btfss	status,2,c
 17402  0026D0  D025               	goto	i2l6330
 17403                           
 17404                           ; Switch size 1, requested type "space"
 17405                           ; Number of cases is 12, Range of values is 1 to 12
 17406                           ; switch strategies available:
 17407                           ; Name         Instructions Cycles
 17408                           ; simple_byte           37    19 (average)
 17409                           ;	Chosen strategy is simple_byte
 17410  0026D2  502A               	movf	??i2_printRTC,w,c
 17411  0026D4  0A01               	xorlw	1	; case 1
 17412  0026D6  B4D8               	btfsc	status,2,c
 17413  0026D8  D770               	goto	i2l6302
 17414  0026DA  0A03               	xorlw	3	; case 2
 17415  0026DC  B4D8               	btfsc	status,2,c
 17416  0026DE  D778               	goto	i2l6304
 17417  0026E0  0A01               	xorlw	1	; case 3
 17418  0026E2  B4D8               	btfsc	status,2,c
 17419  0026E4  D780               	goto	i2l6306
 17420  0026E6  0A07               	xorlw	7	; case 4
 17421  0026E8  B4D8               	btfsc	status,2,c
 17422  0026EA  D788               	goto	i2l6308
 17423  0026EC  0A01               	xorlw	1	; case 5
 17424  0026EE  B4D8               	btfsc	status,2,c
 17425  0026F0  D790               	goto	i2l6310
 17426  0026F2  0A03               	xorlw	3	; case 6
 17427  0026F4  B4D8               	btfsc	status,2,c
 17428  0026F6  D798               	goto	i2l6312
 17429  0026F8  0A01               	xorlw	1	; case 7
 17430  0026FA  B4D8               	btfsc	status,2,c
 17431  0026FC  D7A0               	goto	i2l6314
 17432  0026FE  0A0F               	xorlw	15	; case 8
 17433  002700  B4D8               	btfsc	status,2,c
 17434  002702  D7A8               	goto	i2l6316
 17435  002704  0A01               	xorlw	1	; case 9
 17436  002706  B4D8               	btfsc	status,2,c
 17437  002708  D7B0               	goto	i2l6318
 17438  00270A  0A03               	xorlw	3	; case 10
 17439  00270C  B4D8               	btfsc	status,2,c
 17440  00270E  D7B8               	goto	i2l6320
 17441  002710  0A01               	xorlw	1	; case 11
 17442  002712  B4D8               	btfsc	status,2,c
 17443  002714  D7C0               	goto	i2l6322
 17444  002716  0A07               	xorlw	7	; case 12
 17445  002718  B4D8               	btfsc	status,2,c
 17446  00271A  D7C8               	goto	i2l6324
 17447  00271C                     i2l6330:
 17448                           
 17449                           ;RTC.c: 109: lcdInst(0b10000000);;
 17450  00271C  0E80               	movlw	128
 17451  00271E  ECE4  F024         	call	i2_lcdInst
 17452                           
 17453                           ;RTC.c: 110: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 17454  002722  0E1C               	movlw	low STR_21
 17455  002724  6E0D               	movwf	i2printf@f,c
 17456  002726  0EFB               	movlw	high STR_21
 17457  002728  6E0E               	movwf	i2printf@f+1,c
 17458  00272A  C035  F00F         	movff	i2printRTC@INT_time+8,?i2_printf+2
 17459  00272E  C036  F010         	movff	i2printRTC@INT_time+9,?i2_printf+3
 17460  002732  0E3D               	movlw	low i2printRTC@month
 17461  002734  6E11               	movwf	?i2_printf+4,c
 17462  002736  0E00               	movlw	high i2printRTC@month
 17463  002738  6E12               	movwf	?i2_printf+5,c
 17464  00273A  C031  F013         	movff	i2printRTC@INT_time+4,?i2_printf+6
 17465  00273E  C032  F014         	movff	i2printRTC@INT_time+5,?i2_printf+7
 17466  002742  C02F  F015         	movff	i2printRTC@INT_time+2,?i2_printf+8
 17467  002746  C030  F016         	movff	i2printRTC@INT_time+3,?i2_printf+9
 17468  00274A  C02D  F017         	movff	i2printRTC@INT_time,?i2_printf+10
 17469  00274E  C02E  F018         	movff	i2printRTC@INT_time+1,?i2_printf+11
 17470  002752  EC96  F00C         	call	i2_printf	;wreg free
 17471  002756  0012               	return		;funcret
 17472  002758                     __end_ofi2_printRTC:
 17473                           	opt stack 0
 17474                           pclatu	equ	0xFFB
 17475                           pclath	equ	0xFFA
 17476                           tblptru	equ	0xFF8
 17477                           tblptrh	equ	0xFF7
 17478                           tblptrl	equ	0xFF6
 17479                           tablat	equ	0xFF5
 17480                           prodh	equ	0xFF4
 17481                           prodl	equ	0xFF3
 17482                           intcon	equ	0xFF2
 17483                           intcon2	equ	0xFF1
 17484                           intcon3	equ	0xFF0
 17485                           indf0	equ	0xFEF
 17486                           postinc0	equ	0xFEE
 17487                           fsr0h	equ	0xFEA
 17488                           fsr0l	equ	0xFE9
 17489                           wreg	equ	0xFE8
 17490                           postdec1	equ	0xFE5
 17491                           fsr1h	equ	0xFE2
 17492                           fsr1l	equ	0xFE1
 17493                           indf2	equ	0xFDF
 17494                           postinc2	equ	0xFDE
 17495                           postdec2	equ	0xFDD
 17496                           fsr2h	equ	0xFDA
 17497                           fsr2l	equ	0xFD9
 17498                           status	equ	0xFD8
 17499                           
 17500 ;; *************** function i2_strcpy *****************
 17501 ;; Defined at:
 17502 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 17503 ;; Parameters:    Size  Location     Type
 17504 ;;  to              2    0[COMRAM] PTR unsigned char 
 17505 ;;		 -> printRTC@month(4), UI@month(4), 
 17506 ;;  from            2    2[COMRAM] PTR const unsigned char 
 17507 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
 17508 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
 17509 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
 17510 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
 17511 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
 17512 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
 17513 ;;		 -> STR_8(4), 
 17514 ;; Auto vars:     Size  Location     Type
 17515 ;;  strcpy          2    4[COMRAM] PTR unsigned char 
 17516 ;;		 -> printRTC@month(4), UI@month(4), 
 17517 ;; Return value:  Size  Location     Type
 17518 ;;                  2    0[COMRAM] PTR unsigned char 
 17519 ;; Registers used:
 17520 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 17521 ;; Tracked objects:
 17522 ;;		On entry : 0/0
 17523 ;;		On exit  : 0/0
 17524 ;;		Unchanged: 0/0
 17525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17526 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17527 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17528 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17529 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17530 ;;Total ram usage:        6 bytes
 17531 ;; Hardware stack levels used:    1
 17532 ;; This function calls:
 17533 ;;		Nothing
 17534 ;; This function is called by:
 17535 ;;		i2_printRTC
 17536 ;; This function uses a non-reentrant model
 17537 ;;
 17538                           
 17539                           	psect	text63
 17540  004522                     __ptext63:
 17541                           	opt stack 0
 17542  004522                     i2_strcpy:
 17543                           	opt stack 20
 17544                           
 17545                           ;incstack = 0
 17546  004522  C001  F005         	movff	i2strcpy@to,i2strcpy@cp
 17547  004526  C002  F006         	movff	i2strcpy@to+1,i2strcpy@cp+1
 17548  00452A  D004               	goto	i2l5966
 17549  00452C                     i2l5964:
 17550  00452C  4A05               	infsnz	i2strcpy@cp,f,c
 17551  00452E  2A06               	incf	i2strcpy@cp+1,f,c
 17552  004530  4A03               	infsnz	i2strcpy@from,f,c
 17553  004532  2A04               	incf	i2strcpy@from+1,f,c
 17554  004534                     i2l5966:
 17555  004534  C003  FFF6         	movff	i2strcpy@from,tblptrl
 17556  004538  C004  FFF7         	movff	i2strcpy@from+1,tblptrh
 17557  00453C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17558  00453C  6AF8               	clrf	tblptru,c
 17559  00453E                     	endif
 17560  00453E                     	if	0	;tblptru may be non-zero
 17561  00453E                     	endif
 17562  00453E  C005  FFD9         	movff	i2strcpy@cp,fsr2l
 17563  004542  C006  FFDA         	movff	i2strcpy@cp+1,fsr2h
 17564  004546  0008               	tblrd		*
 17565  004548  CFF5 FFDF          	movff	tablat,indf2
 17566  00454C  50DF               	movf	indf2,w,c
 17567  00454E  B4D8               	btfsc	status,2,c
 17568  004550  0012               	return	
 17569  004552  D7EC               	goto	i2l5964
 17570  004554                     __end_ofi2_strcpy:
 17571                           	opt stack 0
 17572                           pclatu	equ	0xFFB
 17573                           pclath	equ	0xFFA
 17574                           tblptru	equ	0xFF8
 17575                           tblptrh	equ	0xFF7
 17576                           tblptrl	equ	0xFF6
 17577                           tablat	equ	0xFF5
 17578                           prodh	equ	0xFF4
 17579                           prodl	equ	0xFF3
 17580                           intcon	equ	0xFF2
 17581                           intcon2	equ	0xFF1
 17582                           intcon3	equ	0xFF0
 17583                           indf0	equ	0xFEF
 17584                           postinc0	equ	0xFEE
 17585                           fsr0h	equ	0xFEA
 17586                           fsr0l	equ	0xFE9
 17587                           wreg	equ	0xFE8
 17588                           postdec1	equ	0xFE5
 17589                           fsr1h	equ	0xFE2
 17590                           fsr1l	equ	0xFE1
 17591                           indf2	equ	0xFDF
 17592                           postinc2	equ	0xFDE
 17593                           postdec2	equ	0xFDD
 17594                           fsr2h	equ	0xFDA
 17595                           fsr2l	equ	0xFD9
 17596                           status	equ	0xFD8
 17597                           
 17598 ;; *************** function _inputHandler *****************
 17599 ;; Defined at:
 17600 ;;		line 372 in file "UI.c"
 17601 ;; Parameters:    Size  Location     Type
 17602 ;;		None
 17603 ;; Auto vars:     Size  Location     Type
 17604 ;;		None
 17605 ;; Return value:  Size  Location     Type
 17606 ;;                  2   41[COMRAM] int 
 17607 ;; Registers used:
 17608 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17609 ;; Tracked objects:
 17610 ;;		On entry : 0/0
 17611 ;;		On exit  : 0/0
 17612 ;;		Unchanged: 0/0
 17613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17614 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17615 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17616 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17617 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17618 ;;Total ram usage:        4 bytes
 17619 ;; Hardware stack levels used:    1
 17620 ;; Hardware stack levels required when called:    4
 17621 ;; This function calls:
 17622 ;;		_change_state_to_logs_11
 17623 ;;		_change_state_to_logs_12
 17624 ;;		_change_state_to_logs_22
 17625 ;;		_change_state_to_logs_23
 17626 ;;		_change_state_to_logs_33
 17627 ;;		_change_state_to_logs_34
 17628 ;;		_change_state_to_menu_11
 17629 ;;		_change_state_to_menu_23
 17630 ;;		i2_change_state_to_menu_12
 17631 ;;		i2_change_state_to_menu_22
 17632 ;; This function is called by:
 17633 ;;		_updateMenu
 17634 ;; This function uses a non-reentrant model
 17635 ;;
 17636                           
 17637                           	psect	text64
 17638  002B3E                     __ptext64:
 17639                           	opt stack 0
 17640  002B3E                     _inputHandler:
 17641                           	opt stack 18
 17642                           
 17643                           ;UI.c: 377: if(firstboot){
 17644                           
 17645                           ;incstack = 0
 17646  002B3E  5075               	movf	_firstboot,w,c
 17647  002B40  1076               	iorwf	_firstboot+1,w,c
 17648  002B42  B4D8               	btfsc	status,2,c
 17649  002B44  D00B               	goto	i2l6398
 17650                           
 17651                           ;UI.c: 378: change_state_to_menu_11();
 17652  002B46  ECF2  F022         	call	_change_state_to_menu_11	;wreg free
 17653                           
 17654                           ;UI.c: 379: firstboot = 0;
 17655  002B4A  0E00               	movlw	0
 17656  002B4C  6E76               	movwf	_firstboot+1,c
 17657  002B4E  0E00               	movlw	0
 17658  002B50  6E75               	movwf	_firstboot,c
 17659                           
 17660                           ;UI.c: 380: return 0;
 17661  002B52  0E00               	movlw	0
 17662  002B54  6E2B               	movwf	?_inputHandler+1,c
 17663  002B56  0E00               	movlw	0
 17664  002B58  6E2A               	movwf	?_inputHandler,c
 17665  002B5A  0012               	return	
 17666  002B5C                     i2l6398:
 17667                           
 17668                           ;UI.c: 381: }
 17669                           ;UI.c: 382: if (logstate){
 17670  002B5C  0100               	movlb	0	; () banked
 17671  002B5E  51F6               	movf	_logstate& (0+255),w,b
 17672  002B60  0100               	movlb	0	; () banked
 17673  002B62  11F7               	iorwf	(_logstate+1)& (0+255),w,b
 17674  002B64  B4D8               	btfsc	status,2,c
 17675  002B66  D0C7               	goto	i2l6516
 17676                           
 17677                           ; BSR set to: 0
 17678                           ;UI.c: 383: if(input == 'C' && PORTBbits.RB1 == 1){
 17679  002B68  0E43               	movlw	67
 17680  002B6A  187D               	xorwf	_input,w,c	;volatile
 17681  002B6C  A4D8               	btfss	status,2,c
 17682  002B6E  D012               	goto	i2l6416
 17683                           
 17684                           ; BSR set to: 0
 17685  002B70  B281               	btfsc	3969,1,c	;volatile
 17686  002B72  D009               	goto	i2l6408
 17687  002B74  D00F               	goto	i2l6416
 17688  002B76                     i2l6406:
 17689                           
 17690                           ;UI.c: 386: _delay((unsigned long)((10)*(32000000/4000.0)));
 17691  002B76  0E68               	movlw	104
 17692  002B78  6E2C               	movwf	??_inputHandler& (0+255),c
 17693  002B7A  0EE4               	movlw	228
 17694  002B7C                     i2u861_47:
 17695  002B7C  2EE8               	decfsz	wreg,f,c
 17696  002B7E  D7FE               	bra	i2u861_47
 17697  002B80  2E2C               	decfsz	??_inputHandler& (0+255),f,c
 17698  002B82  D7FC               	bra	i2u861_47
 17699  002B84  D000               	nop2	
 17700  002B86                     i2l6408:
 17701  002B86  B281               	btfsc	3969,1,c	;volatile
 17702  002B88  D7F6               	goto	i2l6406
 17703  002B8A                     i2l6410:
 17704                           
 17705                           ;UI.c: 387: }
 17706                           ;UI.c: 388: return 0;
 17707  002B8A  0E00               	movlw	0
 17708  002B8C  6E2B               	movwf	?_inputHandler+1,c
 17709  002B8E  0E00               	movlw	0
 17710  002B90  6E2A               	movwf	?_inputHandler,c
 17711  002B92  0012               	return	
 17712  002B94                     i2l6416:
 17713                           
 17714                           ;UI.c: 390: else if (input == 'D'){
 17715  002B94  0E44               	movlw	68
 17716  002B96  187D               	xorwf	_input,w,c	;volatile
 17717  002B98  A4D8               	btfss	status,2,c
 17718  002B9A  D7F7               	goto	i2l6410
 17719                           
 17720                           ;UI.c: 392: logstate = 0;
 17721  002B9C  0E00               	movlw	0
 17722  002B9E  0100               	movlb	0	; () banked
 17723  002BA0  6FF7               	movwf	(_logstate+1)& (0+255),b
 17724  002BA2  0E00               	movlw	0
 17725  002BA4  6FF6               	movwf	_logstate& (0+255),b
 17726                           
 17727                           ;UI.c: 393: switch(cur_state){
 17728  002BA6  D012               	goto	i2l6434
 17729  002BA8                     i2l6420:
 17730                           
 17731                           ;UI.c: 395: change_state_to_logs_11();
 17732  002BA8  EC6A  F023         	call	_change_state_to_logs_11	;wreg free
 17733                           
 17734                           ;UI.c: 396: break;
 17735  002BAC  D7EE               	goto	i2l6410
 17736  002BAE                     i2l6422:
 17737                           
 17738                           ;UI.c: 398: change_state_to_logs_12();
 17739  002BAE  EC52  F023         	call	_change_state_to_logs_12	;wreg free
 17740                           
 17741                           ;UI.c: 399: break;
 17742  002BB2  D7EB               	goto	i2l6410
 17743  002BB4                     i2l6424:
 17744                           
 17745                           ;UI.c: 401: change_state_to_logs_22();
 17746  002BB4  EC3A  F023         	call	_change_state_to_logs_22	;wreg free
 17747                           
 17748                           ;UI.c: 402: break;
 17749  002BB8  D7E8               	goto	i2l6410
 17750  002BBA                     i2l6426:
 17751                           
 17752                           ;UI.c: 404: change_state_to_logs_23();
 17753  002BBA  ECB0  F023         	call	_change_state_to_logs_23	;wreg free
 17754                           
 17755                           ;UI.c: 405: break;
 17756  002BBE  D7E5               	goto	i2l6410
 17757  002BC0                     i2l6428:
 17758                           
 17759                           ;UI.c: 407: change_state_to_logs_33();
 17760  002BC0  EC22  F023         	call	_change_state_to_logs_33	;wreg free
 17761                           
 17762                           ;UI.c: 408: break;
 17763  002BC4  D7E2               	goto	i2l6410
 17764  002BC6                     i2l6430:
 17765                           
 17766                           ;UI.c: 410: change_state_to_logs_34();
 17767  002BC6  EC0A  F023         	call	_change_state_to_logs_34	;wreg free
 17768                           
 17769                           ;UI.c: 412: }
 17770                           
 17771                           ;UI.c: 411: break;
 17772  002BCA  D7DF               	goto	i2l6410
 17773  002BCC                     i2l6434:
 17774  002BCC  C0E2  F02C         	movff	_cur_state,??_inputHandler
 17775  002BD0  C0E3  F02D         	movff	_cur_state+1,??_inputHandler+1
 17776                           
 17777                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 17778                           ; Switch size 1, requested type "space"
 17779                           ; Number of cases is 2, Range of values is 3 to 4
 17780                           ; switch strategies available:
 17781                           ; Name         Instructions Cycles
 17782                           ; simple_byte            7     4 (average)
 17783                           ;	Chosen strategy is simple_byte
 17784  002BD4  502D               	movf	??_inputHandler+1,w,c
 17785  002BD6  0A03               	xorlw	3	; case 3
 17786  002BD8  B4D8               	btfsc	status,2,c
 17787  002BDA  D004               	goto	i2l8750
 17788  002BDC  0A07               	xorlw	7	; case 4
 17789  002BDE  B4D8               	btfsc	status,2,c
 17790  002BE0  D00F               	goto	i2l8752
 17791  002BE2  D7D3               	goto	i2l6410
 17792  002BE4                     i2l8750:
 17793                           
 17794                           ; Switch size 1, requested type "space"
 17795                           ; Number of cases is 4, Range of values is 243 to 255
 17796                           ; switch strategies available:
 17797                           ; Name         Instructions Cycles
 17798                           ; simple_byte           13     7 (average)
 17799                           ;	Chosen strategy is simple_byte
 17800  002BE4  502C               	movf	??_inputHandler,w,c
 17801  002BE6  0AF3               	xorlw	243	; case 243
 17802  002BE8  B4D8               	btfsc	status,2,c
 17803  002BEA  D7DE               	goto	i2l6420
 17804  002BEC  0A07               	xorlw	7	; case 244
 17805  002BEE  B4D8               	btfsc	status,2,c
 17806  002BF0  D7DE               	goto	i2l6422
 17807  002BF2  0A0A               	xorlw	10	; case 254
 17808  002BF4  B4D8               	btfsc	status,2,c
 17809  002BF6  D7DE               	goto	i2l6424
 17810  002BF8  0A01               	xorlw	1	; case 255
 17811  002BFA  B4D8               	btfsc	status,2,c
 17812  002BFC  D7DE               	goto	i2l6426
 17813  002BFE  D7C5               	goto	i2l6410
 17814  002C00                     i2l8752:
 17815                           
 17816                           ; Switch size 1, requested type "space"
 17817                           ; Number of cases is 2, Range of values is 9 to 10
 17818                           ; switch strategies available:
 17819                           ; Name         Instructions Cycles
 17820                           ; simple_byte            7     4 (average)
 17821                           ;	Chosen strategy is simple_byte
 17822  002C00  502C               	movf	??_inputHandler,w,c
 17823  002C02  0A09               	xorlw	9	; case 9
 17824  002C04  B4D8               	btfsc	status,2,c
 17825  002C06  D7DC               	goto	i2l6428
 17826  002C08  0A03               	xorlw	3	; case 10
 17827  002C0A  B4D8               	btfsc	status,2,c
 17828  002C0C  D7DC               	goto	i2l6430
 17829  002C0E  D7BD               	goto	i2l6410
 17830  002C10                     i2l6446:
 17831                           
 17832                           ;UI.c: 422: if(cur_state == 11){
 17833  002C10  0E0B               	movlw	11
 17834  002C12  0100               	movlb	0	; () banked
 17835  002C14  19E2               	xorwf	_cur_state& (0+255),w,b
 17836  002C16  0100               	movlb	0	; () banked
 17837  002C18  11E3               	iorwf	(_cur_state+1)& (0+255),w,b
 17838  002C1A  A4D8               	btfss	status,2,c
 17839  002C1C  D005               	goto	i2l6454
 17840                           
 17841                           ; BSR set to: 0
 17842                           ;UI.c: 423: return 0;
 17843  002C1E  0E00               	movlw	0
 17844  002C20  6E2B               	movwf	?_inputHandler+1,c
 17845  002C22  0E00               	movlw	0
 17846  002C24  6E2A               	movwf	?_inputHandler,c
 17847                           
 17848                           ; BSR set to: 0
 17849  002C26  0012               	return	
 17850  002C28                     i2l6454:
 17851                           
 17852                           ; BSR set to: 0
 17853                           ;UI.c: 425: else{
 17854                           ;UI.c: 426: change_state_to_menu_11();
 17855  002C28  ECF2  F022         	call	_change_state_to_menu_11	;wreg free
 17856                           
 17857                           ;UI.c: 427: }
 17858                           ;UI.c: 428: return 0;
 17859  002C2C  0E00               	movlw	0
 17860  002C2E  6E2B               	movwf	?_inputHandler+1,c
 17861  002C30  0E00               	movlw	0
 17862  002C32  6E2A               	movwf	?_inputHandler,c
 17863  002C34  0012               	return	
 17864  002C36                     i2l6460:
 17865                           
 17866                           ;UI.c: 430: if(cur_state == 22 | cur_state == 12){
 17867  002C36  0E16               	movlw	22
 17868  002C38  0100               	movlb	0	; () banked
 17869  002C3A  19E2               	xorwf	_cur_state& (0+255),w,b
 17870  002C3C  0100               	movlb	0	; () banked
 17871  002C3E  11E3               	iorwf	(_cur_state+1)& (0+255),w,b
 17872  002C40  B4D8               	btfsc	status,2,c
 17873  002C42  D007               	goto	i2l6464
 17874                           
 17875                           ; BSR set to: 0
 17876  002C44  0E0C               	movlw	12
 17877  002C46  0100               	movlb	0	; () banked
 17878  002C48  19E2               	xorwf	_cur_state& (0+255),w,b
 17879  002C4A  0100               	movlb	0	; () banked
 17880  002C4C  11E3               	iorwf	(_cur_state+1)& (0+255),w,b
 17881  002C4E  A4D8               	btfss	status,2,c
 17882  002C50  D005               	goto	i2l6470
 17883  002C52                     i2l6464:
 17884                           
 17885                           ; BSR set to: 0
 17886                           ;UI.c: 431: return 0;
 17887  002C52  0E00               	movlw	0
 17888  002C54  6E2B               	movwf	?_inputHandler+1,c
 17889  002C56  0E00               	movlw	0
 17890  002C58  6E2A               	movwf	?_inputHandler,c
 17891                           
 17892                           ; BSR set to: 0
 17893  002C5A  0012               	return	
 17894  002C5C                     i2l6470:
 17895                           
 17896                           ; BSR set to: 0
 17897                           ;UI.c: 433: else if(cur_state == 23){
 17898  002C5C  0E17               	movlw	23
 17899  002C5E  0100               	movlb	0	; () banked
 17900  002C60  19E2               	xorwf	_cur_state& (0+255),w,b
 17901  002C62  0100               	movlb	0	; () banked
 17902  002C64  11E3               	iorwf	(_cur_state+1)& (0+255),w,b
 17903  002C66  A4D8               	btfss	status,2,c
 17904  002C68  D003               	goto	i2l6474
 17905                           
 17906                           ; BSR set to: 0
 17907                           ;UI.c: 434: change_state_to_menu_22();
 17908  002C6A  ECAA  F022         	call	i2_change_state_to_menu_22	;wreg free
 17909                           
 17910                           ;UI.c: 435: }
 17911  002C6E  D002               	goto	i2l6476
 17912  002C70                     i2l6474:
 17913                           
 17914                           ;UI.c: 436: else{
 17915                           ;UI.c: 437: change_state_to_menu_12();
 17916  002C70  ECC2  F022         	call	i2_change_state_to_menu_12	;wreg free
 17917  002C74                     i2l6476:
 17918                           
 17919                           ;UI.c: 438: }
 17920                           ;UI.c: 439: return 0;
 17921  002C74  0E00               	movlw	0
 17922  002C76  6E2B               	movwf	?_inputHandler+1,c
 17923  002C78  0E00               	movlw	0
 17924  002C7A  6E2A               	movwf	?_inputHandler,c
 17925  002C7C  0012               	return	
 17926  002C7E                     i2l6480:
 17927                           
 17928                           ;UI.c: 441: if(cur_state == 23){
 17929  002C7E  0E17               	movlw	23
 17930  002C80  0100               	movlb	0	; () banked
 17931  002C82  19E2               	xorwf	_cur_state& (0+255),w,b
 17932  002C84  0100               	movlb	0	; () banked
 17933  002C86  11E3               	iorwf	(_cur_state+1)& (0+255),w,b
 17934  002C88  A4D8               	btfss	status,2,c
 17935  002C8A  D005               	goto	i2l6488
 17936                           
 17937                           ; BSR set to: 0
 17938                           ;UI.c: 442: return 0;
 17939  002C8C  0E00               	movlw	0
 17940  002C8E  6E2B               	movwf	?_inputHandler+1,c
 17941  002C90  0E00               	movlw	0
 17942  002C92  6E2A               	movwf	?_inputHandler,c
 17943                           
 17944                           ; BSR set to: 0
 17945  002C94  0012               	return	
 17946  002C96                     i2l6488:
 17947                           
 17948                           ; BSR set to: 0
 17949                           ;UI.c: 444: else{
 17950                           ;UI.c: 445: change_state_to_menu_23();
 17951  002C96  ECDA  F022         	call	_change_state_to_menu_23	;wreg free
 17952                           
 17953                           ;UI.c: 446: }
 17954                           ;UI.c: 447: return 0;
 17955  002C9A  0E00               	movlw	0
 17956  002C9C  6E2B               	movwf	?_inputHandler+1,c
 17957  002C9E  0E00               	movlw	0
 17958  002CA0  6E2A               	movwf	?_inputHandler,c
 17959  002CA2  0012               	return	
 17960  002CA4                     i2l6494:
 17961                           
 17962                           ;UI.c: 450: up = 1;
 17963  002CA4  0E00               	movlw	0
 17964  002CA6  6E78               	movwf	_up+1,c
 17965  002CA8  0E01               	movlw	1
 17966  002CAA  6E77               	movwf	_up,c
 17967                           
 17968                           ;UI.c: 451: return 1;
 17969  002CAC  0E00               	movlw	0
 17970  002CAE  6E2B               	movwf	?_inputHandler+1,c
 17971  002CB0  0E01               	movlw	1
 17972  002CB2  6E2A               	movwf	?_inputHandler,c
 17973  002CB4  0012               	return	
 17974  002CB6                     i2l6498:
 17975                           
 17976                           ;UI.c: 453: down = 1;
 17977  002CB6  0E00               	movlw	0
 17978  002CB8  6E68               	movwf	_down+1,c
 17979  002CBA  0E01               	movlw	1
 17980  002CBC  6E67               	movwf	_down,c
 17981                           
 17982                           ;UI.c: 454: return 1;
 17983  002CBE  0E00               	movlw	0
 17984  002CC0  6E2B               	movwf	?_inputHandler+1,c
 17985  002CC2  0E01               	movlw	1
 17986  002CC4  6E2A               	movwf	?_inputHandler,c
 17987  002CC6  0012               	return	
 17988  002CC8                     i2l6502:
 17989                           
 17990                           ;UI.c: 456: enter = 1;
 17991  002CC8  0E00               	movlw	0
 17992  002CCA  6E6A               	movwf	_enter+1,c
 17993  002CCC  0E01               	movlw	1
 17994  002CCE  6E69               	movwf	_enter,c
 17995                           
 17996                           ;UI.c: 457: return 1;
 17997  002CD0  0E00               	movlw	0
 17998  002CD2  6E2B               	movwf	?_inputHandler+1,c
 17999  002CD4  0E01               	movlw	1
 18000  002CD6  6E2A               	movwf	?_inputHandler,c
 18001  002CD8  0012               	return	
 18002  002CDA                     i2l6506:
 18003                           
 18004                           ;UI.c: 459: back = 1;
 18005  002CDA  0E00               	movlw	0
 18006  002CDC  6E5C               	movwf	_back+1,c
 18007  002CDE  0E01               	movlw	1
 18008  002CE0  6E5B               	movwf	_back,c
 18009                           
 18010                           ;UI.c: 460: return 1;
 18011  002CE2  0E00               	movlw	0
 18012  002CE4  6E2B               	movwf	?_inputHandler+1,c
 18013  002CE6  0E01               	movlw	1
 18014  002CE8  6E2A               	movwf	?_inputHandler,c
 18015  002CEA  0012               	return	
 18016  002CEC                     i2l6510:
 18017                           
 18018                           ;UI.c: 463: return 1;
 18019  002CEC  0E00               	movlw	0
 18020  002CEE  6E2B               	movwf	?_inputHandler+1,c
 18021  002CF0  0E01               	movlw	1
 18022  002CF2  6E2A               	movwf	?_inputHandler,c
 18023                           
 18024                           ;UI.c: 464: }
 18025  002CF4  0012               	return	
 18026  002CF6                     i2l6516:
 18027  002CF6  507D               	movf	_input,w,c	;volatile
 18028                           
 18029                           ; Switch size 1, requested type "space"
 18030                           ; Number of cases is 7, Range of values is 49 to 68
 18031                           ; switch strategies available:
 18032                           ; Name         Instructions Cycles
 18033                           ; simple_byte           22    12 (average)
 18034                           ;	Chosen strategy is simple_byte
 18035  002CF8  0A31               	xorlw	49	; case 49
 18036  002CFA  B4D8               	btfsc	status,2,c
 18037  002CFC  D789               	goto	i2l6446
 18038  002CFE  0A03               	xorlw	3	; case 50
 18039  002D00  B4D8               	btfsc	status,2,c
 18040  002D02  D799               	goto	i2l6460
 18041  002D04  0A01               	xorlw	1	; case 51
 18042  002D06  B4D8               	btfsc	status,2,c
 18043  002D08  D7BA               	goto	i2l6480
 18044  002D0A  0A72               	xorlw	114	; case 65
 18045  002D0C  B4D8               	btfsc	status,2,c
 18046  002D0E  D7CA               	goto	i2l6494
 18047  002D10  0A03               	xorlw	3	; case 66
 18048  002D12  B4D8               	btfsc	status,2,c
 18049  002D14  D7D0               	goto	i2l6498
 18050  002D16  0A01               	xorlw	1	; case 67
 18051  002D18  B4D8               	btfsc	status,2,c
 18052  002D1A  D7D6               	goto	i2l6502
 18053  002D1C  0A07               	xorlw	7	; case 68
 18054  002D1E  B4D8               	btfsc	status,2,c
 18055  002D20  D7DC               	goto	i2l6506
 18056  002D22  D7E4               	goto	i2l6510
 18057  002D24                     __end_of_inputHandler:
 18058                           	opt stack 0
 18059                           pclatu	equ	0xFFB
 18060                           pclath	equ	0xFFA
 18061                           tblptru	equ	0xFF8
 18062                           tblptrh	equ	0xFF7
 18063                           tblptrl	equ	0xFF6
 18064                           tablat	equ	0xFF5
 18065                           prodh	equ	0xFF4
 18066                           prodl	equ	0xFF3
 18067                           intcon	equ	0xFF2
 18068                           intcon2	equ	0xFF1
 18069                           intcon3	equ	0xFF0
 18070                           indf0	equ	0xFEF
 18071                           postinc0	equ	0xFEE
 18072                           fsr0h	equ	0xFEA
 18073                           fsr0l	equ	0xFE9
 18074                           wreg	equ	0xFE8
 18075                           postdec1	equ	0xFE5
 18076                           fsr1h	equ	0xFE2
 18077                           fsr1l	equ	0xFE1
 18078                           indf2	equ	0xFDF
 18079                           postinc2	equ	0xFDE
 18080                           postdec2	equ	0xFDD
 18081                           fsr2h	equ	0xFDA
 18082                           fsr2l	equ	0xFD9
 18083                           status	equ	0xFD8
 18084                           
 18085 ;; *************** function i2_change_state_to_menu_22 *****************
 18086 ;; Defined at:
 18087 ;;		line 498 in file "UI.c"
 18088 ;; Parameters:    Size  Location     Type
 18089 ;;		None
 18090 ;; Auto vars:     Size  Location     Type
 18091 ;;		None
 18092 ;; Return value:  Size  Location     Type
 18093 ;;                  1    wreg      void 
 18094 ;; Registers used:
 18095 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18096 ;; Tracked objects:
 18097 ;;		On entry : 0/0
 18098 ;;		On exit  : 0/0
 18099 ;;		Unchanged: 0/0
 18100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18101 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18102 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18103 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18104 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18105 ;;Total ram usage:        0 bytes
 18106 ;; Hardware stack levels used:    1
 18107 ;; Hardware stack levels required when called:    3
 18108 ;; This function calls:
 18109 ;;		i2_lcdInst
 18110 ;;		i2_printf
 18111 ;; This function is called by:
 18112 ;;		_updateMenu
 18113 ;;		_inputHandler
 18114 ;; This function uses a non-reentrant model
 18115 ;;
 18116                           
 18117                           	psect	text65
 18118  004554                     __ptext65:
 18119                           	opt stack 0
 18120  004554                     i2_change_state_to_menu_22:
 18121                           	opt stack 19
 18122                           
 18123                           ;UI.c: 499: cur_state = 22;
 18124                           
 18125                           ;incstack = 0
 18126  004554  0E00               	movlw	0
 18127  004556  0100               	movlb	0	; () banked
 18128  004558  6FE3               	movwf	(_cur_state+1)& (0+255),b
 18129  00455A  0E16               	movlw	22
 18130  00455C  6FE2               	movwf	_cur_state& (0+255),b
 18131                           
 18132                           ; BSR set to: 0
 18133                           ;UI.c: 501: lcdInst(0b10000000);;
 18134  00455E  0E80               	movlw	128
 18135  004560  ECE4  F024         	call	i2_lcdInst
 18136                           
 18137                           ;UI.c: 502: printf("2. SORT        <");
 18138  004564  0EC4               	movlw	low STR_34
 18139  004566  6E0D               	movwf	i2printf@f,c
 18140  004568  0EFD               	movlw	high STR_34
 18141  00456A  6E0E               	movwf	i2printf@f+1,c
 18142  00456C  EC96  F00C         	call	i2_printf	;wreg free
 18143                           
 18144                           ;UI.c: 503: lcdInst(0b11000000);;
 18145  004570  0EC0               	movlw	192
 18146  004572  ECE4  F024         	call	i2_lcdInst
 18147                           
 18148                           ;UI.c: 504: printf("3. LOGS         ");
 18149  004576  0E09               	movlw	low STR_36
 18150  004578  6E0D               	movwf	i2printf@f,c
 18151  00457A  0EFD               	movlw	high STR_36
 18152  00457C  6E0E               	movwf	i2printf@f+1,c
 18153  00457E  EC96  F00C         	call	i2_printf	;wreg free
 18154  004582  0012               	return		;funcret
 18155  004584                     __end_ofi2_change_state_to_menu_22:
 18156                           	opt stack 0
 18157                           pclatu	equ	0xFFB
 18158                           pclath	equ	0xFFA
 18159                           tblptru	equ	0xFF8
 18160                           tblptrh	equ	0xFF7
 18161                           tblptrl	equ	0xFF6
 18162                           tablat	equ	0xFF5
 18163                           prodh	equ	0xFF4
 18164                           prodl	equ	0xFF3
 18165                           intcon	equ	0xFF2
 18166                           intcon2	equ	0xFF1
 18167                           intcon3	equ	0xFF0
 18168                           indf0	equ	0xFEF
 18169                           postinc0	equ	0xFEE
 18170                           fsr0h	equ	0xFEA
 18171                           fsr0l	equ	0xFE9
 18172                           wreg	equ	0xFE8
 18173                           postdec1	equ	0xFE5
 18174                           fsr1h	equ	0xFE2
 18175                           fsr1l	equ	0xFE1
 18176                           indf2	equ	0xFDF
 18177                           postinc2	equ	0xFDE
 18178                           postdec2	equ	0xFDD
 18179                           fsr2h	equ	0xFDA
 18180                           fsr2l	equ	0xFD9
 18181                           status	equ	0xFD8
 18182                           
 18183 ;; *************** function i2_change_state_to_menu_12 *****************
 18184 ;; Defined at:
 18185 ;;		line 490 in file "UI.c"
 18186 ;; Parameters:    Size  Location     Type
 18187 ;;		None
 18188 ;; Auto vars:     Size  Location     Type
 18189 ;;		None
 18190 ;; Return value:  Size  Location     Type
 18191 ;;                  1    wreg      void 
 18192 ;; Registers used:
 18193 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18194 ;; Tracked objects:
 18195 ;;		On entry : 0/0
 18196 ;;		On exit  : 0/0
 18197 ;;		Unchanged: 0/0
 18198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18199 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18200 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18201 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18202 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18203 ;;Total ram usage:        0 bytes
 18204 ;; Hardware stack levels used:    1
 18205 ;; Hardware stack levels required when called:    3
 18206 ;; This function calls:
 18207 ;;		i2_lcdInst
 18208 ;;		i2_printf
 18209 ;; This function is called by:
 18210 ;;		_updateMenu
 18211 ;;		_inputHandler
 18212 ;; This function uses a non-reentrant model
 18213 ;;
 18214                           
 18215                           	psect	text66
 18216  004584                     __ptext66:
 18217                           	opt stack 0
 18218  004584                     i2_change_state_to_menu_12:
 18219                           	opt stack 19
 18220                           
 18221                           ;UI.c: 491: cur_state = 12;
 18222                           
 18223                           ;incstack = 0
 18224  004584  0E00               	movlw	0
 18225  004586  0100               	movlb	0	; () banked
 18226  004588  6FE3               	movwf	(_cur_state+1)& (0+255),b
 18227  00458A  0E0C               	movlw	12
 18228  00458C  6FE2               	movwf	_cur_state& (0+255),b
 18229                           
 18230                           ; BSR set to: 0
 18231                           ;UI.c: 493: lcdInst(0b10000000);;
 18232  00458E  0E80               	movlw	128
 18233  004590  ECE4  F024         	call	i2_lcdInst
 18234                           
 18235                           ;UI.c: 494: printf("1. DATE/TIME    ");
 18236  004594  0E2B               	movlw	low STR_33
 18237  004596  6E0D               	movwf	i2printf@f,c
 18238  004598  0EFD               	movlw	high STR_33
 18239  00459A  6E0E               	movwf	i2printf@f+1,c
 18240  00459C  EC96  F00C         	call	i2_printf	;wreg free
 18241                           
 18242                           ;UI.c: 495: lcdInst(0b11000000);;
 18243  0045A0  0EC0               	movlw	192
 18244  0045A2  ECE4  F024         	call	i2_lcdInst
 18245                           
 18246                           ;UI.c: 496: printf("2. SORT        <");
 18247  0045A6  0EC4               	movlw	low STR_34
 18248  0045A8  6E0D               	movwf	i2printf@f,c
 18249  0045AA  0EFD               	movlw	high STR_34
 18250  0045AC  6E0E               	movwf	i2printf@f+1,c
 18251  0045AE  EC96  F00C         	call	i2_printf	;wreg free
 18252  0045B2  0012               	return		;funcret
 18253  0045B4                     __end_ofi2_change_state_to_menu_12:
 18254                           	opt stack 0
 18255                           pclatu	equ	0xFFB
 18256                           pclath	equ	0xFFA
 18257                           tblptru	equ	0xFF8
 18258                           tblptrh	equ	0xFF7
 18259                           tblptrl	equ	0xFF6
 18260                           tablat	equ	0xFF5
 18261                           prodh	equ	0xFF4
 18262                           prodl	equ	0xFF3
 18263                           intcon	equ	0xFF2
 18264                           intcon2	equ	0xFF1
 18265                           intcon3	equ	0xFF0
 18266                           indf0	equ	0xFEF
 18267                           postinc0	equ	0xFEE
 18268                           fsr0h	equ	0xFEA
 18269                           fsr0l	equ	0xFE9
 18270                           wreg	equ	0xFE8
 18271                           postdec1	equ	0xFE5
 18272                           fsr1h	equ	0xFE2
 18273                           fsr1l	equ	0xFE1
 18274                           indf2	equ	0xFDF
 18275                           postinc2	equ	0xFDE
 18276                           postdec2	equ	0xFDD
 18277                           fsr2h	equ	0xFDA
 18278                           fsr2l	equ	0xFD9
 18279                           status	equ	0xFD8
 18280                           
 18281 ;; *************** function _change_state_to_menu_23 *****************
 18282 ;; Defined at:
 18283 ;;		line 506 in file "UI.c"
 18284 ;; Parameters:    Size  Location     Type
 18285 ;;		None
 18286 ;; Auto vars:     Size  Location     Type
 18287 ;;		None
 18288 ;; Return value:  Size  Location     Type
 18289 ;;                  1    wreg      void 
 18290 ;; Registers used:
 18291 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18292 ;; Tracked objects:
 18293 ;;		On entry : 0/0
 18294 ;;		On exit  : 0/0
 18295 ;;		Unchanged: 0/0
 18296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18297 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18298 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18299 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18300 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18301 ;;Total ram usage:        0 bytes
 18302 ;; Hardware stack levels used:    1
 18303 ;; Hardware stack levels required when called:    3
 18304 ;; This function calls:
 18305 ;;		i2_lcdInst
 18306 ;;		i2_printf
 18307 ;; This function is called by:
 18308 ;;		_updateMenu
 18309 ;;		_inputHandler
 18310 ;; This function uses a non-reentrant model
 18311 ;;
 18312                           
 18313                           	psect	text67
 18314  0045B4                     __ptext67:
 18315                           	opt stack 0
 18316  0045B4                     _change_state_to_menu_23:
 18317                           	opt stack 18
 18318                           
 18319                           ;UI.c: 507: cur_state = 23;
 18320                           
 18321                           ;incstack = 0
 18322  0045B4  0E00               	movlw	0
 18323  0045B6  0100               	movlb	0	; () banked
 18324  0045B8  6FE3               	movwf	(_cur_state+1)& (0+255),b
 18325  0045BA  0E17               	movlw	23
 18326  0045BC  6FE2               	movwf	_cur_state& (0+255),b
 18327                           
 18328                           ; BSR set to: 0
 18329                           ;UI.c: 509: lcdInst(0b10000000);;
 18330  0045BE  0E80               	movlw	128
 18331  0045C0  ECE4  F024         	call	i2_lcdInst
 18332                           
 18333                           ;UI.c: 510: printf("2. SORT         ");
 18334  0045C4  0E1A               	movlw	low STR_32
 18335  0045C6  6E0D               	movwf	i2printf@f,c
 18336  0045C8  0EFD               	movlw	high STR_32
 18337  0045CA  6E0E               	movwf	i2printf@f+1,c
 18338  0045CC  EC96  F00C         	call	i2_printf	;wreg free
 18339                           
 18340                           ;UI.c: 511: lcdInst(0b11000000);;
 18341  0045D0  0EC0               	movlw	192
 18342  0045D2  ECE4  F024         	call	i2_lcdInst
 18343                           
 18344                           ;UI.c: 512: printf("3. LOGS        <");
 18345  0045D6  0EB3               	movlw	low STR_38
 18346  0045D8  6E0D               	movwf	i2printf@f,c
 18347  0045DA  0EFD               	movlw	high STR_38
 18348  0045DC  6E0E               	movwf	i2printf@f+1,c
 18349  0045DE  EC96  F00C         	call	i2_printf	;wreg free
 18350  0045E2  0012               	return		;funcret
 18351  0045E4                     __end_of_change_state_to_menu_23:
 18352                           	opt stack 0
 18353                           pclatu	equ	0xFFB
 18354                           pclath	equ	0xFFA
 18355                           tblptru	equ	0xFF8
 18356                           tblptrh	equ	0xFF7
 18357                           tblptrl	equ	0xFF6
 18358                           tablat	equ	0xFF5
 18359                           prodh	equ	0xFF4
 18360                           prodl	equ	0xFF3
 18361                           intcon	equ	0xFF2
 18362                           intcon2	equ	0xFF1
 18363                           intcon3	equ	0xFF0
 18364                           indf0	equ	0xFEF
 18365                           postinc0	equ	0xFEE
 18366                           fsr0h	equ	0xFEA
 18367                           fsr0l	equ	0xFE9
 18368                           wreg	equ	0xFE8
 18369                           postdec1	equ	0xFE5
 18370                           fsr1h	equ	0xFE2
 18371                           fsr1l	equ	0xFE1
 18372                           indf2	equ	0xFDF
 18373                           postinc2	equ	0xFDE
 18374                           postdec2	equ	0xFDD
 18375                           fsr2h	equ	0xFDA
 18376                           fsr2l	equ	0xFD9
 18377                           status	equ	0xFD8
 18378                           
 18379 ;; *************** function _change_state_to_menu_11 *****************
 18380 ;; Defined at:
 18381 ;;		line 482 in file "UI.c"
 18382 ;; Parameters:    Size  Location     Type
 18383 ;;		None
 18384 ;; Auto vars:     Size  Location     Type
 18385 ;;		None
 18386 ;; Return value:  Size  Location     Type
 18387 ;;                  1    wreg      void 
 18388 ;; Registers used:
 18389 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18390 ;; Tracked objects:
 18391 ;;		On entry : 0/0
 18392 ;;		On exit  : 0/0
 18393 ;;		Unchanged: 0/0
 18394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18395 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18396 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18397 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18398 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18399 ;;Total ram usage:        0 bytes
 18400 ;; Hardware stack levels used:    1
 18401 ;; Hardware stack levels required when called:    3
 18402 ;; This function calls:
 18403 ;;		i2_lcdInst
 18404 ;;		i2_printf
 18405 ;; This function is called by:
 18406 ;;		_updateMenu
 18407 ;;		_inputHandler
 18408 ;; This function uses a non-reentrant model
 18409 ;;
 18410                           
 18411                           	psect	text68
 18412  0045E4                     __ptext68:
 18413                           	opt stack 0
 18414  0045E4                     _change_state_to_menu_11:
 18415                           	opt stack 18
 18416                           
 18417                           ;UI.c: 483: cur_state = 11;
 18418                           
 18419                           ;incstack = 0
 18420  0045E4  0E00               	movlw	0
 18421  0045E6  0100               	movlb	0	; () banked
 18422  0045E8  6FE3               	movwf	(_cur_state+1)& (0+255),b
 18423  0045EA  0E0B               	movlw	11
 18424  0045EC  6FE2               	movwf	_cur_state& (0+255),b
 18425                           
 18426                           ; BSR set to: 0
 18427                           ;UI.c: 485: lcdInst(0b10000000);;
 18428  0045EE  0E80               	movlw	128
 18429  0045F0  ECE4  F024         	call	i2_lcdInst
 18430                           
 18431                           ;UI.c: 486: printf("1. DATE/TIME   <");
 18432  0045F4  0ED5               	movlw	low STR_31
 18433  0045F6  6E0D               	movwf	i2printf@f,c
 18434  0045F8  0EFD               	movlw	high STR_31
 18435  0045FA  6E0E               	movwf	i2printf@f+1,c
 18436  0045FC  EC96  F00C         	call	i2_printf	;wreg free
 18437                           
 18438                           ;UI.c: 487: lcdInst(0b11000000);;
 18439  004600  0EC0               	movlw	192
 18440  004602  ECE4  F024         	call	i2_lcdInst
 18441                           
 18442                           ;UI.c: 488: printf("2. SORT         ");
 18443  004606  0E1A               	movlw	low STR_32
 18444  004608  6E0D               	movwf	i2printf@f,c
 18445  00460A  0EFD               	movlw	high STR_32
 18446  00460C  6E0E               	movwf	i2printf@f+1,c
 18447  00460E  EC96  F00C         	call	i2_printf	;wreg free
 18448  004612  0012               	return		;funcret
 18449  004614                     __end_of_change_state_to_menu_11:
 18450                           	opt stack 0
 18451                           pclatu	equ	0xFFB
 18452                           pclath	equ	0xFFA
 18453                           tblptru	equ	0xFF8
 18454                           tblptrh	equ	0xFF7
 18455                           tblptrl	equ	0xFF6
 18456                           tablat	equ	0xFF5
 18457                           prodh	equ	0xFF4
 18458                           prodl	equ	0xFF3
 18459                           intcon	equ	0xFF2
 18460                           intcon2	equ	0xFF1
 18461                           intcon3	equ	0xFF0
 18462                           indf0	equ	0xFEF
 18463                           postinc0	equ	0xFEE
 18464                           fsr0h	equ	0xFEA
 18465                           fsr0l	equ	0xFE9
 18466                           wreg	equ	0xFE8
 18467                           postdec1	equ	0xFE5
 18468                           fsr1h	equ	0xFE2
 18469                           fsr1l	equ	0xFE1
 18470                           indf2	equ	0xFDF
 18471                           postinc2	equ	0xFDE
 18472                           postdec2	equ	0xFDD
 18473                           fsr2h	equ	0xFDA
 18474                           fsr2l	equ	0xFD9
 18475                           status	equ	0xFD8
 18476                           
 18477 ;; *************** function _change_state_to_logs_34 *****************
 18478 ;; Defined at:
 18479 ;;		line 549 in file "UI.c"
 18480 ;; Parameters:    Size  Location     Type
 18481 ;;		None
 18482 ;; Auto vars:     Size  Location     Type
 18483 ;;		None
 18484 ;; Return value:  Size  Location     Type
 18485 ;;                  1    wreg      void 
 18486 ;; Registers used:
 18487 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18488 ;; Tracked objects:
 18489 ;;		On entry : 0/0
 18490 ;;		On exit  : 0/0
 18491 ;;		Unchanged: 0/0
 18492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18493 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18494 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18495 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18496 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18497 ;;Total ram usage:        0 bytes
 18498 ;; Hardware stack levels used:    1
 18499 ;; Hardware stack levels required when called:    3
 18500 ;; This function calls:
 18501 ;;		i2_lcdInst
 18502 ;;		i2_printf
 18503 ;; This function is called by:
 18504 ;;		_updateMenu
 18505 ;;		_inputHandler
 18506 ;; This function uses a non-reentrant model
 18507 ;;
 18508                           
 18509                           	psect	text69
 18510  004614                     __ptext69:
 18511                           	opt stack 0
 18512  004614                     _change_state_to_logs_34:
 18513                           	opt stack 18
 18514                           
 18515                           ;UI.c: 550: cur_state = 1034;
 18516                           
 18517                           ;incstack = 0
 18518  004614  0E04               	movlw	4
 18519  004616  0100               	movlb	0	; () banked
 18520  004618  6FE3               	movwf	(_cur_state+1)& (0+255),b
 18521  00461A  0E0A               	movlw	10
 18522  00461C  6FE2               	movwf	_cur_state& (0+255),b
 18523                           
 18524                           ; BSR set to: 0
 18525                           ;UI.c: 551: lcdInst(0b10000000);;
 18526  00461E  0E80               	movlw	128
 18527  004620  ECE4  F024         	call	i2_lcdInst
 18528                           
 18529                           ;UI.c: 552: printf("LOG 3           ");
 18530  004624  0EE7               	movlw	low STR_44
 18531  004626  6E0D               	movwf	i2printf@f,c
 18532  004628  0EFC               	movlw	high STR_44
 18533  00462A  6E0E               	movwf	i2printf@f+1,c
 18534  00462C  EC96  F00C         	call	i2_printf	;wreg free
 18535                           
 18536                           ;UI.c: 553: lcdInst(0b11000000);;
 18537  004630  0EC0               	movlw	192
 18538  004632  ECE4  F024         	call	i2_lcdInst
 18539                           
 18540                           ;UI.c: 554: printf("LOG 4          <");
 18541  004636  0EA2               	movlw	low STR_50
 18542  004638  6E0D               	movwf	i2printf@f,c
 18543  00463A  0EFD               	movlw	high STR_50
 18544  00463C  6E0E               	movwf	i2printf@f+1,c
 18545  00463E  EC96  F00C         	call	i2_printf	;wreg free
 18546  004642  0012               	return		;funcret
 18547  004644                     __end_of_change_state_to_logs_34:
 18548                           	opt stack 0
 18549                           pclatu	equ	0xFFB
 18550                           pclath	equ	0xFFA
 18551                           tblptru	equ	0xFF8
 18552                           tblptrh	equ	0xFF7
 18553                           tblptrl	equ	0xFF6
 18554                           tablat	equ	0xFF5
 18555                           prodh	equ	0xFF4
 18556                           prodl	equ	0xFF3
 18557                           intcon	equ	0xFF2
 18558                           intcon2	equ	0xFF1
 18559                           intcon3	equ	0xFF0
 18560                           indf0	equ	0xFEF
 18561                           postinc0	equ	0xFEE
 18562                           fsr0h	equ	0xFEA
 18563                           fsr0l	equ	0xFE9
 18564                           wreg	equ	0xFE8
 18565                           postdec1	equ	0xFE5
 18566                           fsr1h	equ	0xFE2
 18567                           fsr1l	equ	0xFE1
 18568                           indf2	equ	0xFDF
 18569                           postinc2	equ	0xFDE
 18570                           postdec2	equ	0xFDD
 18571                           fsr2h	equ	0xFDA
 18572                           fsr2l	equ	0xFD9
 18573                           status	equ	0xFD8
 18574                           
 18575 ;; *************** function _change_state_to_logs_33 *****************
 18576 ;; Defined at:
 18577 ;;		line 542 in file "UI.c"
 18578 ;; Parameters:    Size  Location     Type
 18579 ;;		None
 18580 ;; Auto vars:     Size  Location     Type
 18581 ;;		None
 18582 ;; Return value:  Size  Location     Type
 18583 ;;                  1    wreg      void 
 18584 ;; Registers used:
 18585 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18586 ;; Tracked objects:
 18587 ;;		On entry : 0/0
 18588 ;;		On exit  : 0/0
 18589 ;;		Unchanged: 0/0
 18590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18591 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18592 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18593 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18594 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18595 ;;Total ram usage:        0 bytes
 18596 ;; Hardware stack levels used:    1
 18597 ;; Hardware stack levels required when called:    3
 18598 ;; This function calls:
 18599 ;;		i2_lcdInst
 18600 ;;		i2_printf
 18601 ;; This function is called by:
 18602 ;;		_updateMenu
 18603 ;;		_inputHandler
 18604 ;; This function uses a non-reentrant model
 18605 ;;
 18606                           
 18607                           	psect	text70
 18608  004644                     __ptext70:
 18609                           	opt stack 0
 18610  004644                     _change_state_to_logs_33:
 18611                           	opt stack 18
 18612                           
 18613                           ;UI.c: 543: cur_state = 1033;
 18614                           
 18615                           ;incstack = 0
 18616  004644  0E04               	movlw	4
 18617  004646  0100               	movlb	0	; () banked
 18618  004648  6FE3               	movwf	(_cur_state+1)& (0+255),b
 18619  00464A  0E09               	movlw	9
 18620  00464C  6FE2               	movwf	_cur_state& (0+255),b
 18621                           
 18622                           ; BSR set to: 0
 18623                           ;UI.c: 544: lcdInst(0b10000000);;
 18624  00464E  0E80               	movlw	128
 18625  004650  ECE4  F024         	call	i2_lcdInst
 18626                           
 18627                           ;UI.c: 545: printf("LOG 3          <");
 18628  004654  0E91               	movlw	low STR_46
 18629  004656  6E0D               	movwf	i2printf@f,c
 18630  004658  0EFD               	movlw	high STR_46
 18631  00465A  6E0E               	movwf	i2printf@f+1,c
 18632  00465C  EC96  F00C         	call	i2_printf	;wreg free
 18633                           
 18634                           ;UI.c: 546: lcdInst(0b11000000);;
 18635  004660  0EC0               	movlw	192
 18636  004662  ECE4  F024         	call	i2_lcdInst
 18637                           
 18638                           ;UI.c: 547: printf("LOG 4           ");
 18639  004666  0EF8               	movlw	low STR_48
 18640  004668  6E0D               	movwf	i2printf@f,c
 18641  00466A  0EFC               	movlw	high STR_48
 18642  00466C  6E0E               	movwf	i2printf@f+1,c
 18643  00466E  EC96  F00C         	call	i2_printf	;wreg free
 18644  004672  0012               	return		;funcret
 18645  004674                     __end_of_change_state_to_logs_33:
 18646                           	opt stack 0
 18647                           pclatu	equ	0xFFB
 18648                           pclath	equ	0xFFA
 18649                           tblptru	equ	0xFF8
 18650                           tblptrh	equ	0xFF7
 18651                           tblptrl	equ	0xFF6
 18652                           tablat	equ	0xFF5
 18653                           prodh	equ	0xFF4
 18654                           prodl	equ	0xFF3
 18655                           intcon	equ	0xFF2
 18656                           intcon2	equ	0xFF1
 18657                           intcon3	equ	0xFF0
 18658                           indf0	equ	0xFEF
 18659                           postinc0	equ	0xFEE
 18660                           fsr0h	equ	0xFEA
 18661                           fsr0l	equ	0xFE9
 18662                           wreg	equ	0xFE8
 18663                           postdec1	equ	0xFE5
 18664                           fsr1h	equ	0xFE2
 18665                           fsr1l	equ	0xFE1
 18666                           indf2	equ	0xFDF
 18667                           postinc2	equ	0xFDE
 18668                           postdec2	equ	0xFDD
 18669                           fsr2h	equ	0xFDA
 18670                           fsr2l	equ	0xFD9
 18671                           status	equ	0xFD8
 18672                           
 18673 ;; *************** function _change_state_to_logs_23 *****************
 18674 ;; Defined at:
 18675 ;;		line 535 in file "UI.c"
 18676 ;; Parameters:    Size  Location     Type
 18677 ;;		None
 18678 ;; Auto vars:     Size  Location     Type
 18679 ;;		None
 18680 ;; Return value:  Size  Location     Type
 18681 ;;                  1    wreg      void 
 18682 ;; Registers used:
 18683 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18684 ;; Tracked objects:
 18685 ;;		On entry : 0/0
 18686 ;;		On exit  : 0/0
 18687 ;;		Unchanged: 0/0
 18688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18689 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18690 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18691 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18692 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18693 ;;Total ram usage:        0 bytes
 18694 ;; Hardware stack levels used:    1
 18695 ;; Hardware stack levels required when called:    3
 18696 ;; This function calls:
 18697 ;;		i2_lcdInst
 18698 ;;		i2_printf
 18699 ;; This function is called by:
 18700 ;;		_updateMenu
 18701 ;;		_inputHandler
 18702 ;; This function uses a non-reentrant model
 18703 ;;
 18704                           
 18705                           	psect	text71
 18706  004760                     __ptext71:
 18707                           	opt stack 0
 18708  004760                     _change_state_to_logs_23:
 18709                           	opt stack 18
 18710                           
 18711                           ;UI.c: 536: cur_state = 1023;
 18712                           
 18713                           ;incstack = 0
 18714  004760  0E03               	movlw	3
 18715  004762  0100               	movlb	0	; () banked
 18716  004764  6FE3               	movwf	(_cur_state+1)& (0+255),b
 18717  004766  69E2               	setf	_cur_state& (0+255),b
 18718                           
 18719                           ; BSR set to: 0
 18720                           ;UI.c: 537: lcdInst(0b10000000);;
 18721  004768  0E80               	movlw	128
 18722  00476A  ECE4  F024         	call	i2_lcdInst
 18723                           
 18724                           ;UI.c: 538: printf("LOG 2           ");
 18725  00476E  0ED6               	movlw	low STR_40
 18726  004770  6E0D               	movwf	i2printf@f,c
 18727  004772  0EFC               	movlw	high STR_40
 18728  004774  6E0E               	movwf	i2printf@f+1,c
 18729  004776  EC96  F00C         	call	i2_printf	;wreg free
 18730                           
 18731                           ;UI.c: 539: lcdInst(0b11000000);;
 18732  00477A  0EC0               	movlw	192
 18733  00477C  ECE4  F024         	call	i2_lcdInst
 18734                           
 18735                           ;UI.c: 540: printf("LOG 3          <");
 18736  004780  0E91               	movlw	low STR_46
 18737  004782  6E0D               	movwf	i2printf@f,c
 18738  004784  0EFD               	movlw	high STR_46
 18739  004786  6E0E               	movwf	i2printf@f+1,c
 18740  004788  EC96  F00C         	call	i2_printf	;wreg free
 18741  00478C  0012               	return		;funcret
 18742  00478E                     __end_of_change_state_to_logs_23:
 18743                           	opt stack 0
 18744                           pclatu	equ	0xFFB
 18745                           pclath	equ	0xFFA
 18746                           tblptru	equ	0xFF8
 18747                           tblptrh	equ	0xFF7
 18748                           tblptrl	equ	0xFF6
 18749                           tablat	equ	0xFF5
 18750                           prodh	equ	0xFF4
 18751                           prodl	equ	0xFF3
 18752                           intcon	equ	0xFF2
 18753                           intcon2	equ	0xFF1
 18754                           intcon3	equ	0xFF0
 18755                           indf0	equ	0xFEF
 18756                           postinc0	equ	0xFEE
 18757                           fsr0h	equ	0xFEA
 18758                           fsr0l	equ	0xFE9
 18759                           wreg	equ	0xFE8
 18760                           postdec1	equ	0xFE5
 18761                           fsr1h	equ	0xFE2
 18762                           fsr1l	equ	0xFE1
 18763                           indf2	equ	0xFDF
 18764                           postinc2	equ	0xFDE
 18765                           postdec2	equ	0xFDD
 18766                           fsr2h	equ	0xFDA
 18767                           fsr2l	equ	0xFD9
 18768                           status	equ	0xFD8
 18769                           
 18770 ;; *************** function _change_state_to_logs_22 *****************
 18771 ;; Defined at:
 18772 ;;		line 528 in file "UI.c"
 18773 ;; Parameters:    Size  Location     Type
 18774 ;;		None
 18775 ;; Auto vars:     Size  Location     Type
 18776 ;;		None
 18777 ;; Return value:  Size  Location     Type
 18778 ;;                  1    wreg      void 
 18779 ;; Registers used:
 18780 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18781 ;; Tracked objects:
 18782 ;;		On entry : 0/0
 18783 ;;		On exit  : 0/0
 18784 ;;		Unchanged: 0/0
 18785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18786 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18787 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18788 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18789 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18790 ;;Total ram usage:        0 bytes
 18791 ;; Hardware stack levels used:    1
 18792 ;; Hardware stack levels required when called:    3
 18793 ;; This function calls:
 18794 ;;		i2_lcdInst
 18795 ;;		i2_printf
 18796 ;; This function is called by:
 18797 ;;		_updateMenu
 18798 ;;		_inputHandler
 18799 ;; This function uses a non-reentrant model
 18800 ;;
 18801                           
 18802                           	psect	text72
 18803  004674                     __ptext72:
 18804                           	opt stack 0
 18805  004674                     _change_state_to_logs_22:
 18806                           	opt stack 18
 18807                           
 18808                           ;UI.c: 529: cur_state = 1022;
 18809                           
 18810                           ;incstack = 0
 18811  004674  0E03               	movlw	3
 18812  004676  0100               	movlb	0	; () banked
 18813  004678  6FE3               	movwf	(_cur_state+1)& (0+255),b
 18814  00467A  0EFE               	movlw	254
 18815  00467C  6FE2               	movwf	_cur_state& (0+255),b
 18816                           
 18817                           ; BSR set to: 0
 18818                           ;UI.c: 530: lcdInst(0b10000000);;
 18819  00467E  0E80               	movlw	128
 18820  004680  ECE4  F024         	call	i2_lcdInst
 18821                           
 18822                           ;UI.c: 531: printf("LOG 2          <");
 18823  004684  0E80               	movlw	low STR_42
 18824  004686  6E0D               	movwf	i2printf@f,c
 18825  004688  0EFD               	movlw	high STR_42
 18826  00468A  6E0E               	movwf	i2printf@f+1,c
 18827  00468C  EC96  F00C         	call	i2_printf	;wreg free
 18828                           
 18829                           ;UI.c: 532: lcdInst(0b11000000);;
 18830  004690  0EC0               	movlw	192
 18831  004692  ECE4  F024         	call	i2_lcdInst
 18832                           
 18833                           ;UI.c: 533: printf("LOG 3           ");
 18834  004696  0EE7               	movlw	low STR_44
 18835  004698  6E0D               	movwf	i2printf@f,c
 18836  00469A  0EFC               	movlw	high STR_44
 18837  00469C  6E0E               	movwf	i2printf@f+1,c
 18838  00469E  EC96  F00C         	call	i2_printf	;wreg free
 18839  0046A2  0012               	return		;funcret
 18840  0046A4                     __end_of_change_state_to_logs_22:
 18841                           	opt stack 0
 18842                           pclatu	equ	0xFFB
 18843                           pclath	equ	0xFFA
 18844                           tblptru	equ	0xFF8
 18845                           tblptrh	equ	0xFF7
 18846                           tblptrl	equ	0xFF6
 18847                           tablat	equ	0xFF5
 18848                           prodh	equ	0xFF4
 18849                           prodl	equ	0xFF3
 18850                           intcon	equ	0xFF2
 18851                           intcon2	equ	0xFF1
 18852                           intcon3	equ	0xFF0
 18853                           indf0	equ	0xFEF
 18854                           postinc0	equ	0xFEE
 18855                           fsr0h	equ	0xFEA
 18856                           fsr0l	equ	0xFE9
 18857                           wreg	equ	0xFE8
 18858                           postdec1	equ	0xFE5
 18859                           fsr1h	equ	0xFE2
 18860                           fsr1l	equ	0xFE1
 18861                           indf2	equ	0xFDF
 18862                           postinc2	equ	0xFDE
 18863                           postdec2	equ	0xFDD
 18864                           fsr2h	equ	0xFDA
 18865                           fsr2l	equ	0xFD9
 18866                           status	equ	0xFD8
 18867                           
 18868 ;; *************** function _change_state_to_logs_12 *****************
 18869 ;; Defined at:
 18870 ;;		line 521 in file "UI.c"
 18871 ;; Parameters:    Size  Location     Type
 18872 ;;		None
 18873 ;; Auto vars:     Size  Location     Type
 18874 ;;		None
 18875 ;; Return value:  Size  Location     Type
 18876 ;;                  1    wreg      void 
 18877 ;; Registers used:
 18878 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18879 ;; Tracked objects:
 18880 ;;		On entry : 0/0
 18881 ;;		On exit  : 0/0
 18882 ;;		Unchanged: 0/0
 18883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18884 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18885 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18886 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18887 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18888 ;;Total ram usage:        0 bytes
 18889 ;; Hardware stack levels used:    1
 18890 ;; Hardware stack levels required when called:    3
 18891 ;; This function calls:
 18892 ;;		i2_lcdInst
 18893 ;;		i2_printf
 18894 ;; This function is called by:
 18895 ;;		_updateMenu
 18896 ;;		_inputHandler
 18897 ;; This function uses a non-reentrant model
 18898 ;;
 18899                           
 18900                           	psect	text73
 18901  0046A4                     __ptext73:
 18902                           	opt stack 0
 18903  0046A4                     _change_state_to_logs_12:
 18904                           	opt stack 18
 18905                           
 18906                           ;UI.c: 522: cur_state = 1012;
 18907                           
 18908                           ;incstack = 0
 18909  0046A4  0E03               	movlw	3
 18910  0046A6  0100               	movlb	0	; () banked
 18911  0046A8  6FE3               	movwf	(_cur_state+1)& (0+255),b
 18912  0046AA  0EF4               	movlw	244
 18913  0046AC  6FE2               	movwf	_cur_state& (0+255),b
 18914                           
 18915                           ; BSR set to: 0
 18916                           ;UI.c: 523: lcdInst(0b10000000);;
 18917  0046AE  0E80               	movlw	128
 18918  0046B0  ECE4  F024         	call	i2_lcdInst
 18919                           
 18920                           ;UI.c: 524: printf("LOG 1           ");
 18921  0046B4  0EC5               	movlw	low STR_41
 18922  0046B6  6E0D               	movwf	i2printf@f,c
 18923  0046B8  0EFC               	movlw	high STR_41
 18924  0046BA  6E0E               	movwf	i2printf@f+1,c
 18925  0046BC  EC96  F00C         	call	i2_printf	;wreg free
 18926                           
 18927                           ;UI.c: 525: lcdInst(0b11000000);;
 18928  0046C0  0EC0               	movlw	192
 18929  0046C2  ECE4  F024         	call	i2_lcdInst
 18930                           
 18931                           ;UI.c: 526: printf("LOG 2          <");
 18932  0046C6  0E80               	movlw	low STR_42
 18933  0046C8  6E0D               	movwf	i2printf@f,c
 18934  0046CA  0EFD               	movlw	high STR_42
 18935  0046CC  6E0E               	movwf	i2printf@f+1,c
 18936  0046CE  EC96  F00C         	call	i2_printf	;wreg free
 18937  0046D2  0012               	return		;funcret
 18938  0046D4                     __end_of_change_state_to_logs_12:
 18939                           	opt stack 0
 18940                           pclatu	equ	0xFFB
 18941                           pclath	equ	0xFFA
 18942                           tblptru	equ	0xFF8
 18943                           tblptrh	equ	0xFF7
 18944                           tblptrl	equ	0xFF6
 18945                           tablat	equ	0xFF5
 18946                           prodh	equ	0xFF4
 18947                           prodl	equ	0xFF3
 18948                           intcon	equ	0xFF2
 18949                           intcon2	equ	0xFF1
 18950                           intcon3	equ	0xFF0
 18951                           indf0	equ	0xFEF
 18952                           postinc0	equ	0xFEE
 18953                           fsr0h	equ	0xFEA
 18954                           fsr0l	equ	0xFE9
 18955                           wreg	equ	0xFE8
 18956                           postdec1	equ	0xFE5
 18957                           fsr1h	equ	0xFE2
 18958                           fsr1l	equ	0xFE1
 18959                           indf2	equ	0xFDF
 18960                           postinc2	equ	0xFDE
 18961                           postdec2	equ	0xFDD
 18962                           fsr2h	equ	0xFDA
 18963                           fsr2l	equ	0xFD9
 18964                           status	equ	0xFD8
 18965                           
 18966 ;; *************** function _change_state_to_logs_11 *****************
 18967 ;; Defined at:
 18968 ;;		line 514 in file "UI.c"
 18969 ;; Parameters:    Size  Location     Type
 18970 ;;		None
 18971 ;; Auto vars:     Size  Location     Type
 18972 ;;		None
 18973 ;; Return value:  Size  Location     Type
 18974 ;;                  1    wreg      void 
 18975 ;; Registers used:
 18976 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18977 ;; Tracked objects:
 18978 ;;		On entry : 0/0
 18979 ;;		On exit  : 0/0
 18980 ;;		Unchanged: 0/0
 18981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18982 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18983 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18984 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18985 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18986 ;;Total ram usage:        0 bytes
 18987 ;; Hardware stack levels used:    1
 18988 ;; Hardware stack levels required when called:    3
 18989 ;; This function calls:
 18990 ;;		i2_lcdInst
 18991 ;;		i2_printf
 18992 ;; This function is called by:
 18993 ;;		_updateMenu
 18994 ;;		_inputHandler
 18995 ;; This function uses a non-reentrant model
 18996 ;;
 18997                           
 18998                           	psect	text74
 18999  0046D4                     __ptext74:
 19000                           	opt stack 0
 19001  0046D4                     _change_state_to_logs_11:
 19002                           	opt stack 18
 19003                           
 19004                           ;UI.c: 515: cur_state = 1011;
 19005                           
 19006                           ;incstack = 0
 19007  0046D4  0E03               	movlw	3
 19008  0046D6  0100               	movlb	0	; () banked
 19009  0046D8  6FE3               	movwf	(_cur_state+1)& (0+255),b
 19010  0046DA  0EF3               	movlw	243
 19011  0046DC  6FE2               	movwf	_cur_state& (0+255),b
 19012                           
 19013                           ; BSR set to: 0
 19014                           ;UI.c: 516: lcdInst(0b10000000);;
 19015  0046DE  0E80               	movlw	128
 19016  0046E0  ECE4  F024         	call	i2_lcdInst
 19017                           
 19018                           ;UI.c: 517: printf("LOG 1          <");
 19019  0046E4  0E6F               	movlw	low STR_39
 19020  0046E6  6E0D               	movwf	i2printf@f,c
 19021  0046E8  0EFD               	movlw	high STR_39
 19022  0046EA  6E0E               	movwf	i2printf@f+1,c
 19023  0046EC  EC96  F00C         	call	i2_printf	;wreg free
 19024                           
 19025                           ;UI.c: 518: lcdInst(0b11000000);;
 19026  0046F0  0EC0               	movlw	192
 19027  0046F2  ECE4  F024         	call	i2_lcdInst
 19028                           
 19029                           ;UI.c: 519: printf("LOG 2           ");
 19030  0046F6  0ED6               	movlw	low STR_40
 19031  0046F8  6E0D               	movwf	i2printf@f,c
 19032  0046FA  0EFC               	movlw	high STR_40
 19033  0046FC  6E0E               	movwf	i2printf@f+1,c
 19034  0046FE  EC96  F00C         	call	i2_printf	;wreg free
 19035  004702  0012               	return		;funcret
 19036  004704                     __end_of_change_state_to_logs_11:
 19037                           	opt stack 0
 19038                           pclatu	equ	0xFFB
 19039                           pclath	equ	0xFFA
 19040                           tblptru	equ	0xFF8
 19041                           tblptrh	equ	0xFF7
 19042                           tblptrl	equ	0xFF6
 19043                           tablat	equ	0xFF5
 19044                           prodh	equ	0xFF4
 19045                           prodl	equ	0xFF3
 19046                           intcon	equ	0xFF2
 19047                           intcon2	equ	0xFF1
 19048                           intcon3	equ	0xFF0
 19049                           indf0	equ	0xFEF
 19050                           postinc0	equ	0xFEE
 19051                           fsr0h	equ	0xFEA
 19052                           fsr0l	equ	0xFE9
 19053                           wreg	equ	0xFE8
 19054                           postdec1	equ	0xFE5
 19055                           fsr1h	equ	0xFE2
 19056                           fsr1l	equ	0xFE1
 19057                           indf2	equ	0xFDF
 19058                           postinc2	equ	0xFDE
 19059                           postdec2	equ	0xFDD
 19060                           fsr2h	equ	0xFDA
 19061                           fsr2l	equ	0xFD9
 19062                           status	equ	0xFD8
 19063                           
 19064 ;; *************** function _dispLogs *****************
 19065 ;; Defined at:
 19066 ;;		line 467 in file "UI.c"
 19067 ;; Parameters:    Size  Location     Type
 19068 ;;  myLog           2   17[COMRAM] int 
 19069 ;; Auto vars:     Size  Location     Type
 19070 ;;		None
 19071 ;; Return value:  Size  Location     Type
 19072 ;;                  1    wreg      void 
 19073 ;; Registers used:
 19074 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19075 ;; Tracked objects:
 19076 ;;		On entry : 0/0
 19077 ;;		On exit  : 0/0
 19078 ;;		Unchanged: 0/0
 19079 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19080 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19081 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19082 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19083 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19084 ;;Total ram usage:        2 bytes
 19085 ;; Hardware stack levels used:    1
 19086 ;; Hardware stack levels required when called:    2
 19087 ;; This function calls:
 19088 ;;		_retrieveLog
 19089 ;; This function is called by:
 19090 ;;		_updateMenu
 19091 ;; This function uses a non-reentrant model
 19092 ;;
 19093                           
 19094                           	psect	text75
 19095  0048AC                     __ptext75:
 19096                           	opt stack 0
 19097  0048AC                     _dispLogs:
 19098                           	opt stack 20
 19099                           
 19100                           ;UI.c: 468: logstate = 1;
 19101                           
 19102                           ;incstack = 0
 19103  0048AC  0E00               	movlw	0
 19104  0048AE  0100               	movlb	0	; () banked
 19105  0048B0  6FF7               	movwf	(_logstate+1)& (0+255),b
 19106  0048B2  0E01               	movlw	1
 19107  0048B4  6FF6               	movwf	_logstate& (0+255),b
 19108                           
 19109                           ; BSR set to: 0
 19110                           ;UI.c: 469: log = myLog;
 19111  0048B6  C012  F0E6         	movff	dispLogs@myLog,_log
 19112  0048BA  C013  F0E7         	movff	dispLogs@myLog+1,_log+1
 19113                           
 19114                           ; BSR set to: 0
 19115                           ;UI.c: 470: retrieveLog(myLog - 1);
 19116  0048BE  0EFF               	movlw	255
 19117  0048C0  2412               	addwf	dispLogs@myLog,w,c
 19118  0048C2  6E07               	movwf	retrieveLog@logNum,c
 19119  0048C4  0EFF               	movlw	255
 19120  0048C6  2013               	addwfc	dispLogs@myLog+1,w,c
 19121  0048C8  6E08               	movwf	retrieveLog@logNum+1,c
 19122  0048CA  ECB5  F018         	call	_retrieveLog	;wreg free
 19123  0048CE  0012               	return		;funcret
 19124  0048D0                     __end_of_dispLogs:
 19125                           	opt stack 0
 19126                           pclatu	equ	0xFFB
 19127                           pclath	equ	0xFFA
 19128                           tblptru	equ	0xFF8
 19129                           tblptrh	equ	0xFF7
 19130                           tblptrl	equ	0xFF6
 19131                           tablat	equ	0xFF5
 19132                           prodh	equ	0xFF4
 19133                           prodl	equ	0xFF3
 19134                           intcon	equ	0xFF2
 19135                           intcon2	equ	0xFF1
 19136                           intcon3	equ	0xFF0
 19137                           indf0	equ	0xFEF
 19138                           postinc0	equ	0xFEE
 19139                           fsr0h	equ	0xFEA
 19140                           fsr0l	equ	0xFE9
 19141                           wreg	equ	0xFE8
 19142                           postdec1	equ	0xFE5
 19143                           fsr1h	equ	0xFE2
 19144                           fsr1l	equ	0xFE1
 19145                           indf2	equ	0xFDF
 19146                           postinc2	equ	0xFDE
 19147                           postdec2	equ	0xFDD
 19148                           fsr2h	equ	0xFDA
 19149                           fsr2l	equ	0xFD9
 19150                           status	equ	0xFD8
 19151                           
 19152 ;; *************** function _retrieveLog *****************
 19153 ;; Defined at:
 19154 ;;		line 134 in file "EEPROM.c"
 19155 ;; Parameters:    Size  Location     Type
 19156 ;;  logNum          2    6[COMRAM] int 
 19157 ;; Auto vars:     Size  Location     Type
 19158 ;;  i               2   13[COMRAM] int 
 19159 ;;  addr            2   15[COMRAM] unsigned short 
 19160 ;;  byte3           1   12[COMRAM] unsigned char 
 19161 ;;  byte2           1   11[COMRAM] unsigned char 
 19162 ;;  byte1           1   10[COMRAM] unsigned char 
 19163 ;; Return value:  Size  Location     Type
 19164 ;;                  1    wreg      void 
 19165 ;; Registers used:
 19166 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19167 ;; Tracked objects:
 19168 ;;		On entry : 0/0
 19169 ;;		On exit  : 0/0
 19170 ;;		Unchanged: 0/0
 19171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19172 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19173 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19174 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19175 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19176 ;;Total ram usage:       11 bytes
 19177 ;; Hardware stack levels used:    1
 19178 ;; Hardware stack levels required when called:    1
 19179 ;; This function calls:
 19180 ;;		i2_EEPROM_read
 19181 ;;		i2___wmul
 19182 ;; This function is called by:
 19183 ;;		_dispLogs
 19184 ;; This function uses a non-reentrant model
 19185 ;;
 19186                           
 19187                           	psect	text76
 19188  00316A                     __ptext76:
 19189                           	opt stack 0
 19190  00316A                     _retrieveLog:
 19191                           	opt stack 20
 19192                           
 19193                           ;EEPROM.c: 140: unsigned short addr = 1 + logNum * 11;
 19194                           
 19195                           ;incstack = 0
 19196  00316A  C007  F001         	movff	retrieveLog@logNum,i2___wmul@multiplier
 19197  00316E  C008  F002         	movff	retrieveLog@logNum+1,i2___wmul@multiplier+1
 19198  003172  0E00               	movlw	0
 19199  003174  6E04               	movwf	i2___wmul@multiplicand+1,c
 19200  003176  0E0B               	movlw	11
 19201  003178  6E03               	movwf	i2___wmul@multiplicand,c
 19202  00317A  EC30  F024         	call	i2___wmul	;wreg free
 19203  00317E  0E01               	movlw	1
 19204  003180  2401               	addwf	?i2___wmul,w,c
 19205  003182  6E10               	movwf	retrieveLog@addr,c
 19206  003184  0E00               	movlw	0
 19207  003186  2002               	addwfc	?i2___wmul+1,w,c
 19208  003188  6E11               	movwf	retrieveLog@addr+1,c
 19209                           
 19210                           ;EEPROM.c: 143: unsigned char byte1 = EEPROM_read(addr);
 19211  00318A  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 19212  00318E  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 19213  003192  ECB0  F024         	call	i2_EEPROM_read	;wreg free
 19214  003196  6E0B               	movwf	retrieveLog@byte1,c
 19215                           
 19216                           ;EEPROM.c: 144: log_completion = (int)(byte1 & 0b10000000);
 19217  003198  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 19218  00319C  0E80               	movlw	128
 19219  00319E  1609               	andwf	??_retrieveLog,f,c
 19220  0031A0  5009               	movf	??_retrieveLog,w,c
 19221  0031A2  0100               	movlb	0	; () banked
 19222  0031A4  6FE8               	movwf	_log_completion& (0+255),b
 19223  0031A6  6BE9               	clrf	(_log_completion+1)& (0+255),b
 19224                           
 19225                           ; BSR set to: 0
 19226                           ;EEPROM.c: 145: log_count_total = (int)(byte1 & 0b00001111);
 19227  0031A8  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 19228  0031AC  0E0F               	movlw	15
 19229  0031AE  1609               	andwf	??_retrieveLog,f,c
 19230  0031B0  5009               	movf	??_retrieveLog,w,c
 19231  0031B2  0100               	movlb	0	; () banked
 19232  0031B4  6FF2               	movwf	_log_count_total& (0+255),b
 19233  0031B6  6BF3               	clrf	(_log_count_total+1)& (0+255),b
 19234                           
 19235                           ; BSR set to: 0
 19236                           ;EEPROM.c: 146: addr++;
 19237  0031B8  4A10               	infsnz	retrieveLog@addr,f,c
 19238  0031BA  2A11               	incf	retrieveLog@addr+1,f,c
 19239                           
 19240                           ; BSR set to: 0
 19241                           ;EEPROM.c: 149: unsigned char byte2 = EEPROM_read(addr);
 19242  0031BC  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 19243  0031C0  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 19244  0031C4  ECB0  F024         	call	i2_EEPROM_read	;wreg free
 19245  0031C8  6E0C               	movwf	retrieveLog@byte2,c
 19246                           
 19247                           ;EEPROM.c: 150: log_count_pop_no_tab = (int)((byte2 & 0b11110000)>> 4);
 19248  0031CA  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 19249  0031CE  3A09               	swapf	??_retrieveLog,f,c
 19250  0031D0  0E0F               	movlw	15
 19251  0031D2  1609               	andwf	??_retrieveLog,f,c
 19252  0031D4  0E0F               	movlw	15
 19253  0031D6  1609               	andwf	??_retrieveLog,f,c
 19254  0031D8  5009               	movf	??_retrieveLog,w,c
 19255  0031DA  0100               	movlb	0	; () banked
 19256  0031DC  6FEE               	movwf	_log_count_pop_no_tab& (0+255),b
 19257  0031DE  6BEF               	clrf	(_log_count_pop_no_tab+1)& (0+255),b
 19258                           
 19259                           ; BSR set to: 0
 19260                           ;EEPROM.c: 151: log_count_pop_w_tab = (int)(byte2 & 0b00001111);
 19261  0031E0  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 19262  0031E4  0E0F               	movlw	15
 19263  0031E6  1609               	andwf	??_retrieveLog,f,c
 19264  0031E8  5009               	movf	??_retrieveLog,w,c
 19265  0031EA  0100               	movlb	0	; () banked
 19266  0031EC  6FF0               	movwf	_log_count_pop_w_tab& (0+255),b
 19267  0031EE  6BF1               	clrf	(_log_count_pop_w_tab+1)& (0+255),b
 19268                           
 19269                           ; BSR set to: 0
 19270                           ;EEPROM.c: 152: addr++;
 19271  0031F0  4A10               	infsnz	retrieveLog@addr,f,c
 19272  0031F2  2A11               	incf	retrieveLog@addr+1,f,c
 19273                           
 19274                           ; BSR set to: 0
 19275                           ;EEPROM.c: 153: unsigned char byte3 = EEPROM_read(addr);
 19276  0031F4  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 19277  0031F8  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 19278  0031FC  ECB0  F024         	call	i2_EEPROM_read	;wreg free
 19279  003200  6E0D               	movwf	retrieveLog@byte3,c
 19280                           
 19281                           ;EEPROM.c: 154: log_count_can_w_lab = (int)((byte3 & 0b11110000)>> 4);
 19282  003202  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 19283  003206  3A09               	swapf	??_retrieveLog,f,c
 19284  003208  0E0F               	movlw	15
 19285  00320A  1609               	andwf	??_retrieveLog,f,c
 19286  00320C  0E0F               	movlw	15
 19287  00320E  1609               	andwf	??_retrieveLog,f,c
 19288  003210  5009               	movf	??_retrieveLog,w,c
 19289  003212  0100               	movlb	0	; () banked
 19290  003214  6FEC               	movwf	_log_count_can_w_lab& (0+255),b
 19291  003216  6BED               	clrf	(_log_count_can_w_lab+1)& (0+255),b
 19292                           
 19293                           ; BSR set to: 0
 19294                           ;EEPROM.c: 155: log_count_can_no_lab = (int)(byte3 & 0b00001111);
 19295  003218  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 19296  00321C  0E0F               	movlw	15
 19297  00321E  1609               	andwf	??_retrieveLog,f,c
 19298  003220  5009               	movf	??_retrieveLog,w,c
 19299  003222  0100               	movlb	0	; () banked
 19300  003224  6FEA               	movwf	_log_count_can_no_lab& (0+255),b
 19301  003226  6BEB               	clrf	(_log_count_can_no_lab+1)& (0+255),b
 19302                           
 19303                           ; BSR set to: 0
 19304                           ;EEPROM.c: 156: addr++;
 19305  003228  4A10               	infsnz	retrieveLog@addr,f,c
 19306  00322A  2A11               	incf	retrieveLog@addr+1,f,c
 19307                           
 19308                           ; BSR set to: 0
 19309                           ;EEPROM.c: 159: for(int i = 0; i < 7; i++){
 19310  00322C  0E00               	movlw	0
 19311  00322E  6E0F               	movwf	retrieveLog@i+1,c
 19312  003230  0E00               	movlw	0
 19313  003232  6E0E               	movwf	retrieveLog@i,c
 19314  003234                     i2l6136:
 19315                           
 19316                           ; BSR set to: 0
 19317  003234  BE0F               	btfsc	retrieveLog@i+1,7,c
 19318  003236  D006               	goto	i2l6140
 19319  003238  500F               	movf	retrieveLog@i+1,w,c
 19320  00323A  E11E               	bnz	i2l6148
 19321  00323C  0E07               	movlw	7
 19322  00323E  5C0E               	subwf	retrieveLog@i,w,c
 19323  003240  B0D8               	btfsc	status,0,c
 19324  003242  D01A               	goto	i2l6148
 19325  003244                     i2l6140:
 19326                           
 19327                           ;EEPROM.c: 160: log_startTime[i] = (int)EEPROM_read(addr);
 19328  003244  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 19329  003248  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 19330  00324C  ECB0  F024         	call	i2_EEPROM_read	;wreg free
 19331  003250  6E09               	movwf	??_retrieveLog& (0+255),c
 19332  003252  6A0A               	clrf	(??_retrieveLog+1)& (0+255),c
 19333  003254  90D8               	bcf	status,0,c
 19334  003256  340E               	rlcf	retrieveLog@i,w,c
 19335  003258  6ED9               	movwf	fsr2l,c
 19336  00325A  340F               	rlcf	retrieveLog@i+1,w,c
 19337  00325C  6EDA               	movwf	fsr2h,c
 19338  00325E  0E00               	movlw	low _log_startTime
 19339  003260  26D9               	addwf	fsr2l,f,c
 19340  003262  0E01               	movlw	high _log_startTime
 19341  003264  22DA               	addwfc	fsr2h,f,c
 19342  003266  C009  FFDE         	movff	??_retrieveLog,postinc2
 19343  00326A  C00A  FFDD         	movff	??_retrieveLog+1,postdec2
 19344                           
 19345                           ;EEPROM.c: 161: addr++;
 19346  00326E  4A10               	infsnz	retrieveLog@addr,f,c
 19347  003270  2A11               	incf	retrieveLog@addr+1,f,c
 19348  003272  4A0E               	infsnz	retrieveLog@i,f,c
 19349  003274  2A0F               	incf	retrieveLog@i+1,f,c
 19350  003276  D7DE               	goto	i2l6136
 19351  003278                     i2l6148:
 19352                           
 19353                           ;EEPROM.c: 162: }
 19354                           ;EEPROM.c: 165: log_total_time = (int)EEPROM_read(addr);
 19355  003278  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 19356  00327C  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 19357  003280  ECB0  F024         	call	i2_EEPROM_read	;wreg free
 19358  003284  6E09               	movwf	??_retrieveLog& (0+255),c
 19359  003286  5009               	movf	??_retrieveLog,w,c
 19360  003288  0100               	movlb	0	; () banked
 19361  00328A  6FF4               	movwf	_log_total_time& (0+255),b
 19362  00328C  6BF5               	clrf	(_log_total_time+1)& (0+255),b
 19363                           
 19364                           ; BSR set to: 0
 19365  00328E  0012               	return		;funcret
 19366  003290                     __end_of_retrieveLog:
 19367                           	opt stack 0
 19368                           pclatu	equ	0xFFB
 19369                           pclath	equ	0xFFA
 19370                           tblptru	equ	0xFF8
 19371                           tblptrh	equ	0xFF7
 19372                           tblptrl	equ	0xFF6
 19373                           tablat	equ	0xFF5
 19374                           prodh	equ	0xFF4
 19375                           prodl	equ	0xFF3
 19376                           intcon	equ	0xFF2
 19377                           intcon2	equ	0xFF1
 19378                           intcon3	equ	0xFF0
 19379                           indf0	equ	0xFEF
 19380                           postinc0	equ	0xFEE
 19381                           fsr0h	equ	0xFEA
 19382                           fsr0l	equ	0xFE9
 19383                           wreg	equ	0xFE8
 19384                           postdec1	equ	0xFE5
 19385                           fsr1h	equ	0xFE2
 19386                           fsr1l	equ	0xFE1
 19387                           indf2	equ	0xFDF
 19388                           postinc2	equ	0xFDE
 19389                           postdec2	equ	0xFDD
 19390                           fsr2h	equ	0xFDA
 19391                           fsr2l	equ	0xFD9
 19392                           status	equ	0xFD8
 19393                           
 19394 ;; *************** function i2_EEPROM_read *****************
 19395 ;; Defined at:
 19396 ;;		line 68 in file "EEPROM.c"
 19397 ;; Parameters:    Size  Location     Type
 19398 ;;  address         2    0[COMRAM] unsigned short 
 19399 ;; Auto vars:     Size  Location     Type
 19400 ;;		None
 19401 ;; Return value:  Size  Location     Type
 19402 ;;                  1    wreg      unsigned char 
 19403 ;; Registers used:
 19404 ;;		wreg, status,2
 19405 ;; Tracked objects:
 19406 ;;		On entry : 0/0
 19407 ;;		On exit  : 0/0
 19408 ;;		Unchanged: 0/0
 19409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19410 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19411 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19412 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19413 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19414 ;;Total ram usage:        2 bytes
 19415 ;; Hardware stack levels used:    1
 19416 ;; This function calls:
 19417 ;;		Nothing
 19418 ;; This function is called by:
 19419 ;;		_retrieveLog
 19420 ;; This function uses a non-reentrant model
 19421 ;;
 19422                           
 19423                           	psect	text77
 19424  004960                     __ptext77:
 19425                           	opt stack 0
 19426  004960                     i2_EEPROM_read:
 19427                           	opt stack 20
 19428                           
 19429                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
 19430                           
 19431                           ; BSR set to: 0
 19432                           ;incstack = 0
 19433  004960  5002               	movf	i2EEPROM_read@address+1,w,c
 19434  004962  6EAA               	movwf	4010,c	;volatile
 19435                           
 19436                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
 19437  004964  C001  FFA9         	movff	i2EEPROM_read@address,4009	;volatile
 19438                           
 19439                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
 19440  004968  9EA6               	bcf	4006,7,c	;volatile
 19441                           
 19442                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
 19443  00496A  9CA6               	bcf	4006,6,c	;volatile
 19444                           
 19445                           ;EEPROM.c: 75: EECON1bits.RD = 1;
 19446  00496C  80A6               	bsf	4006,0,c	;volatile
 19447  00496E                     i2l950:
 19448  00496E  B0A6               	btfsc	4006,0,c	;volatile
 19449  004970  D7FE               	goto	i2l950
 19450                           
 19451                           ;EEPROM.c: 81: return EEDATA;
 19452  004972  50A8               	movf	4008,w,c	;volatile
 19453  004974  0012               	return	
 19454  004976                     __end_ofi2_EEPROM_read:
 19455                           	opt stack 0
 19456                           pclatu	equ	0xFFB
 19457                           pclath	equ	0xFFA
 19458                           tblptru	equ	0xFF8
 19459                           tblptrh	equ	0xFF7
 19460                           tblptrl	equ	0xFF6
 19461                           tablat	equ	0xFF5
 19462                           prodh	equ	0xFF4
 19463                           prodl	equ	0xFF3
 19464                           intcon	equ	0xFF2
 19465                           intcon2	equ	0xFF1
 19466                           intcon3	equ	0xFF0
 19467                           indf0	equ	0xFEF
 19468                           postinc0	equ	0xFEE
 19469                           fsr0h	equ	0xFEA
 19470                           fsr0l	equ	0xFE9
 19471                           wreg	equ	0xFE8
 19472                           postdec1	equ	0xFE5
 19473                           fsr1h	equ	0xFE2
 19474                           fsr1l	equ	0xFE1
 19475                           indf2	equ	0xFDF
 19476                           postinc2	equ	0xFDE
 19477                           postdec2	equ	0xFDD
 19478                           fsr2h	equ	0xFDA
 19479                           fsr2l	equ	0xFD9
 19480                           status	equ	0xFD8
 19481                           
 19482 ;; *************** function _printSortTimer *****************
 19483 ;; Defined at:
 19484 ;;		line 311 in file "sort.c"
 19485 ;; Parameters:    Size  Location     Type
 19486 ;;		None
 19487 ;; Auto vars:     Size  Location     Type
 19488 ;;  i               2   72[COMRAM] int 
 19489 ;;  curTime        14   46[COMRAM] int [7]
 19490 ;;  timeDiff        2   70[COMRAM] unsigned int 
 19491 ;;  sec             2   66[COMRAM] int 
 19492 ;;  min             2   64[COMRAM] int 
 19493 ;;  cur_sec         2   62[COMRAM] unsigned int 
 19494 ;;  start_sec       2   60[COMRAM] unsigned int 
 19495 ;;  hour            2   44[COMRAM] int 
 19496 ;; Return value:  Size  Location     Type
 19497 ;;                  1    wreg      void 
 19498 ;; Registers used:
 19499 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19500 ;; Tracked objects:
 19501 ;;		On entry : 0/0
 19502 ;;		On exit  : 0/0
 19503 ;;		Unchanged: 0/0
 19504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19505 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19506 ;;      Locals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19507 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19508 ;;      Totals:        33       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19509 ;;Total ram usage:       33 bytes
 19510 ;; Hardware stack levels used:    1
 19511 ;; Hardware stack levels required when called:    3
 19512 ;; This function calls:
 19513 ;;		i2___lwdiv
 19514 ;;		i2___lwmod
 19515 ;;		i2___wmul
 19516 ;;		i2_getRTC
 19517 ;;		i2_lcdInst
 19518 ;;		i2_printf
 19519 ;; This function is called by:
 19520 ;;		_handler
 19521 ;; This function uses a non-reentrant model
 19522 ;;
 19523                           
 19524                           	psect	text78
 19525  00294C                     __ptext78:
 19526                           	opt stack 0
 19527  00294C                     _printSortTimer:
 19528                           	opt stack 20
 19529                           
 19530                           ;sort.c: 312: getRTC();
 19531                           
 19532                           ;incstack = 0
 19533  00294C  EC4A  F01F         	call	i2_getRTC	;wreg free
 19534                           
 19535                           ;sort.c: 313: int curTime[7];
 19536                           ;sort.c: 314: for(int i = 0; i < 7; i++){
 19537  002950  0E00               	movlw	0
 19538  002952  6E4A               	movwf	printSortTimer@i+1,c
 19539  002954  0E00               	movlw	0
 19540  002956  6E49               	movwf	printSortTimer@i,c
 19541  002958                     i2l8284:
 19542  002958  BE4A               	btfsc	printSortTimer@i+1,7,c
 19543  00295A  D006               	goto	i2l8288
 19544  00295C  504A               	movf	printSortTimer@i+1,w,c
 19545  00295E  E131               	bnz	i2l8294
 19546  002960  0E07               	movlw	7
 19547  002962  5C49               	subwf	printSortTimer@i,w,c
 19548  002964  B0D8               	btfsc	status,0,c
 19549  002966  D02D               	goto	i2l8294
 19550  002968                     i2l8288:
 19551                           
 19552                           ;sort.c: 315: curTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 19553  002968  0E24               	movlw	low _time
 19554  00296A  2449               	addwf	printSortTimer@i,w,c
 19555  00296C  6ED9               	movwf	fsr2l,c
 19556  00296E  0E01               	movlw	high _time
 19557  002970  204A               	addwfc	printSortTimer@i+1,w,c
 19558  002972  6EDA               	movwf	fsr2h,c
 19559  002974  50DF               	movf	indf2,w,c
 19560  002976  6E2A               	movwf	??_printSortTimer& (0+255),c
 19561  002978  3A2A               	swapf	??_printSortTimer,f,c
 19562  00297A  0E0F               	movlw	15
 19563  00297C  162A               	andwf	??_printSortTimer,f,c
 19564  00297E  0E0F               	movlw	15
 19565  002980  162A               	andwf	??_printSortTimer,f,c
 19566  002982  502A               	movf	??_printSortTimer,w,c
 19567  002984  0D0A               	mullw	10
 19568  002986  0E24               	movlw	low _time
 19569  002988  2449               	addwf	printSortTimer@i,w,c
 19570  00298A  6ED9               	movwf	fsr2l,c
 19571  00298C  0E01               	movlw	high _time
 19572  00298E  204A               	addwfc	printSortTimer@i+1,w,c
 19573  002990  6EDA               	movwf	fsr2h,c
 19574  002992  50DF               	movf	indf2,w,c
 19575  002994  0B0F               	andlw	15
 19576  002996  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 19577  002998  6A2C               	clrf	(??_printSortTimer+2)& (0+255),c
 19578  00299A  50F3               	movf	prodl,w,c
 19579  00299C  262B               	addwf	??_printSortTimer+1,f,c
 19580  00299E  50F4               	movf	prodh,w,c
 19581  0029A0  222C               	addwfc	??_printSortTimer+2,f,c
 19582  0029A2  90D8               	bcf	status,0,c
 19583  0029A4  3449               	rlcf	printSortTimer@i,w,c
 19584  0029A6  6ED9               	movwf	fsr2l,c
 19585  0029A8  344A               	rlcf	printSortTimer@i+1,w,c
 19586  0029AA  6EDA               	movwf	fsr2h,c
 19587  0029AC  0E2F               	movlw	low printSortTimer@curTime
 19588  0029AE  26D9               	addwf	fsr2l,f,c
 19589  0029B0  0E00               	movlw	high printSortTimer@curTime
 19590  0029B2  22DA               	addwfc	fsr2h,f,c
 19591  0029B4  C02B  FFDE         	movff	??_printSortTimer+1,postinc2
 19592  0029B8  C02C  FFDD         	movff	??_printSortTimer+2,postdec2
 19593  0029BC  4A49               	infsnz	printSortTimer@i,f,c
 19594  0029BE  2A4A               	incf	printSortTimer@i+1,f,c
 19595  0029C0  D7CB               	goto	i2l8284
 19596  0029C2                     i2l8294:
 19597                           
 19598                           ;sort.c: 316: }
 19599                           ;sort.c: 317: unsigned int start_sec = startTime[0] + startTime[1]*60 + startTime[2]*360
      +                          0;
 19600  0029C2  C110  F001         	movff	_startTime+2,i2___wmul@multiplier
 19601  0029C6  C111  F002         	movff	_startTime+3,i2___wmul@multiplier+1
 19602  0029CA  0E00               	movlw	0
 19603  0029CC  6E04               	movwf	i2___wmul@multiplicand+1,c
 19604  0029CE  0E3C               	movlw	60
 19605  0029D0  6E03               	movwf	i2___wmul@multiplicand,c
 19606  0029D2  EC30  F024         	call	i2___wmul	;wreg free
 19607  0029D6  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 19608  0029DA  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 19609  0029DE  C112  F001         	movff	_startTime+4,i2___wmul@multiplier
 19610  0029E2  C113  F002         	movff	_startTime+5,i2___wmul@multiplier+1
 19611  0029E6  0E0E               	movlw	14
 19612  0029E8  6E04               	movwf	i2___wmul@multiplicand+1,c
 19613  0029EA  0E10               	movlw	16
 19614  0029EC  6E03               	movwf	i2___wmul@multiplicand,c
 19615  0029EE  EC30  F024         	call	i2___wmul	;wreg free
 19616  0029F2  5001               	movf	?i2___wmul,w,c
 19617  0029F4  262A               	addwf	??_printSortTimer,f,c
 19618  0029F6  5002               	movf	?i2___wmul+1,w,c
 19619  0029F8  222B               	addwfc	??_printSortTimer+1,f,c
 19620  0029FA  0101               	movlb	1	; () banked
 19621  0029FC  510E               	movf	_startTime& (0+255),w,b
 19622  0029FE  242A               	addwf	??_printSortTimer,w,c
 19623  002A00  6E3D               	movwf	printSortTimer@start_sec,c
 19624  002A02  0101               	movlb	1	; () banked
 19625  002A04  510F               	movf	(_startTime+1)& (0+255),w,b
 19626  002A06  202B               	addwfc	??_printSortTimer+1,w,c
 19627  002A08  6E3E               	movwf	printSortTimer@start_sec+1,c
 19628                           
 19629                           ;sort.c: 318: unsigned int cur_sec = curTime[0] + curTime[1]*60 + curTime[2]*3600;
 19630  002A0A  C031  F001         	movff	printSortTimer@curTime+2,i2___wmul@multiplier
 19631  002A0E  C032  F002         	movff	printSortTimer@curTime+3,i2___wmul@multiplier+1
 19632  002A12  0E00               	movlw	0
 19633  002A14  6E04               	movwf	i2___wmul@multiplicand+1,c
 19634  002A16  0E3C               	movlw	60
 19635  002A18  6E03               	movwf	i2___wmul@multiplicand,c
 19636  002A1A  EC30  F024         	call	i2___wmul	;wreg free
 19637  002A1E  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 19638  002A22  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 19639  002A26  C033  F001         	movff	printSortTimer@curTime+4,i2___wmul@multiplier
 19640  002A2A  C034  F002         	movff	printSortTimer@curTime+5,i2___wmul@multiplier+1
 19641  002A2E  0E0E               	movlw	14
 19642  002A30  6E04               	movwf	i2___wmul@multiplicand+1,c
 19643  002A32  0E10               	movlw	16
 19644  002A34  6E03               	movwf	i2___wmul@multiplicand,c
 19645  002A36  EC30  F024         	call	i2___wmul	;wreg free
 19646  002A3A  5001               	movf	?i2___wmul,w,c
 19647  002A3C  262A               	addwf	??_printSortTimer,f,c
 19648  002A3E  5002               	movf	?i2___wmul+1,w,c
 19649  002A40  222B               	addwfc	??_printSortTimer+1,f,c
 19650  002A42  502F               	movf	printSortTimer@curTime,w,c
 19651  002A44  242A               	addwf	??_printSortTimer,w,c
 19652  002A46  6E3F               	movwf	printSortTimer@cur_sec,c
 19653  002A48  5030               	movf	printSortTimer@curTime+1,w,c
 19654  002A4A  202B               	addwfc	??_printSortTimer+1,w,c
 19655  002A4C  6E40               	movwf	printSortTimer@cur_sec+1,c
 19656                           
 19657                           ;sort.c: 319: unsigned int timeDiff = cur_sec - start_sec;
 19658  002A4E  C03D  F02A         	movff	printSortTimer@start_sec,??_printSortTimer
 19659  002A52  C03E  F02B         	movff	printSortTimer@start_sec+1,??_printSortTimer+1
 19660  002A56  1E2A               	comf	??_printSortTimer,f,c
 19661  002A58  1E2B               	comf	??_printSortTimer+1,f,c
 19662  002A5A  4A2A               	infsnz	??_printSortTimer,f,c
 19663  002A5C  2A2B               	incf	??_printSortTimer+1,f,c
 19664  002A5E  503F               	movf	printSortTimer@cur_sec,w,c
 19665  002A60  242A               	addwf	??_printSortTimer,w,c
 19666  002A62  6E47               	movwf	printSortTimer@timeDiff,c
 19667  002A64  5040               	movf	printSortTimer@cur_sec+1,w,c
 19668  002A66  202B               	addwfc	??_printSortTimer+1,w,c
 19669  002A68  6E48               	movwf	printSortTimer@timeDiff+1,c
 19670                           
 19671                           ;sort.c: 321: total_time = timeDiff;
 19672  002A6A  C047  F0F8         	movff	printSortTimer@timeDiff,_total_time
 19673  002A6E  C048  F0F9         	movff	printSortTimer@timeDiff+1,_total_time+1
 19674                           
 19675                           ;sort.c: 323: if(timeDiff >= 179){
 19676  002A72  5048               	movf	printSortTimer@timeDiff+1,w,c
 19677  002A74  E104               	bnz	i2u718_40
 19678  002A76  0EB3               	movlw	179
 19679  002A78  5C47               	subwf	printSortTimer@timeDiff,w,c
 19680  002A7A  A0D8               	btfss	status,0,c
 19681  002A7C  D003               	goto	i2l8304
 19682  002A7E                     i2u718_40:
 19683                           
 19684                           ;sort.c: 324: machine_state = DoneSorting_state;
 19685  002A7E  0E02               	movlw	2
 19686  002A80  0100               	movlb	0	; () banked
 19687  002A82  6FFC               	movwf	_machine_state& (0+255),b
 19688  002A84                     i2l8304:
 19689                           
 19690                           ;sort.c: 326: }
 19691                           ;sort.c: 328: int hour = timeDiff / 3600;
 19692  002A84  C047  F006         	movff	printSortTimer@timeDiff,i2___lwdiv@dividend
 19693  002A88  C048  F007         	movff	printSortTimer@timeDiff+1,i2___lwdiv@dividend+1
 19694  002A8C  0E0E               	movlw	14
 19695  002A8E  6E09               	movwf	i2___lwdiv@divisor+1,c
 19696  002A90  0E10               	movlw	16
 19697  002A92  6E08               	movwf	i2___lwdiv@divisor,c
 19698  002A94  EC2A  F021         	call	i2___lwdiv	;wreg free
 19699  002A98  C006  F02D         	movff	?i2___lwdiv,printSortTimer@hour
 19700  002A9C  C007  F02E         	movff	?i2___lwdiv+1,printSortTimer@hour+1
 19701                           
 19702                           ;sort.c: 329: int min = (timeDiff % 3600) / 60;
 19703  002AA0  0E0E               	movlw	14
 19704  002AA2  6E04               	movwf	i2___lwmod@divisor+1,c
 19705  002AA4  0E10               	movlw	16
 19706  002AA6  6E03               	movwf	i2___lwmod@divisor,c
 19707  002AA8  C047  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 19708  002AAC  C048  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 19709  002AB0  ECE9  F021         	call	i2___lwmod	;wreg free
 19710  002AB4  C001  F006         	movff	?i2___lwmod,i2___lwdiv@dividend
 19711  002AB8  C002  F007         	movff	?i2___lwmod+1,i2___lwdiv@dividend+1
 19712  002ABC  0E00               	movlw	0
 19713  002ABE  6E09               	movwf	i2___lwdiv@divisor+1,c
 19714  002AC0  0E3C               	movlw	60
 19715  002AC2  6E08               	movwf	i2___lwdiv@divisor,c
 19716  002AC4  EC2A  F021         	call	i2___lwdiv	;wreg free
 19717  002AC8  C006  F041         	movff	?i2___lwdiv,printSortTimer@min
 19718  002ACC  C007  F042         	movff	?i2___lwdiv+1,printSortTimer@min+1
 19719                           
 19720                           ;sort.c: 330: int sec = (timeDiff % 3600) % 60;
 19721  002AD0  0E0E               	movlw	14
 19722  002AD2  6E04               	movwf	i2___lwmod@divisor+1,c
 19723  002AD4  0E10               	movlw	16
 19724  002AD6  6E03               	movwf	i2___lwmod@divisor,c
 19725  002AD8  C047  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 19726  002ADC  C048  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 19727  002AE0  ECE9  F021         	call	i2___lwmod	;wreg free
 19728  002AE4  C001  F045         	movff	?i2___lwmod,_printSortTimer$2434
 19729  002AE8  C002  F046         	movff	?i2___lwmod+1,_printSortTimer$2434+1
 19730                           
 19731                           ;sort.c: 330: int sec = (timeDiff % 3600) % 60;
 19732  002AEC  C045  F001         	movff	_printSortTimer$2434,i2___lwmod@dividend
 19733  002AF0  C046  F002         	movff	_printSortTimer$2434+1,i2___lwmod@dividend+1
 19734  002AF4  0E00               	movlw	0
 19735  002AF6  6E04               	movwf	i2___lwmod@divisor+1,c
 19736  002AF8  0E3C               	movlw	60
 19737  002AFA  6E03               	movwf	i2___lwmod@divisor,c
 19738  002AFC  ECE9  F021         	call	i2___lwmod	;wreg free
 19739  002B00  C001  F043         	movff	?i2___lwmod,printSortTimer@sec
 19740  002B04  C002  F044         	movff	?i2___lwmod+1,printSortTimer@sec+1
 19741                           
 19742                           ;sort.c: 332: lcdInst(0b10000000);;
 19743  002B08  0E80               	movlw	128
 19744  002B0A  ECE4  F024         	call	i2_lcdInst
 19745                           
 19746                           ;sort.c: 333: printf("SORTING...");
 19747  002B0E  0E7C               	movlw	low STR_64
 19748  002B10  6E0D               	movwf	i2printf@f,c
 19749  002B12  0EFF               	movlw	high STR_64
 19750  002B14  6E0E               	movwf	i2printf@f+1,c
 19751  002B16  EC96  F00C         	call	i2_printf	;wreg free
 19752                           
 19753                           ;sort.c: 334: lcdInst(0b11000000);;
 19754  002B1A  0EC0               	movlw	192
 19755  002B1C  ECE4  F024         	call	i2_lcdInst
 19756                           
 19757                           ;sort.c: 335: printf("TIME %d:%02d", min, sec);
 19758  002B20  0E42               	movlw	low STR_65
 19759  002B22  6E0D               	movwf	i2printf@f,c
 19760  002B24  0EFF               	movlw	high STR_65
 19761  002B26  6E0E               	movwf	i2printf@f+1,c
 19762  002B28  C041  F00F         	movff	printSortTimer@min,?i2_printf+2
 19763  002B2C  C042  F010         	movff	printSortTimer@min+1,?i2_printf+3
 19764  002B30  C043  F011         	movff	printSortTimer@sec,?i2_printf+4
 19765  002B34  C044  F012         	movff	printSortTimer@sec+1,?i2_printf+5
 19766  002B38  EC96  F00C         	call	i2_printf	;wreg free
 19767  002B3C  0012               	return		;funcret
 19768  002B3E                     __end_of_printSortTimer:
 19769                           	opt stack 0
 19770                           pclatu	equ	0xFFB
 19771                           pclath	equ	0xFFA
 19772                           tblptru	equ	0xFF8
 19773                           tblptrh	equ	0xFF7
 19774                           tblptrl	equ	0xFF6
 19775                           tablat	equ	0xFF5
 19776                           prodh	equ	0xFF4
 19777                           prodl	equ	0xFF3
 19778                           intcon	equ	0xFF2
 19779                           intcon2	equ	0xFF1
 19780                           intcon3	equ	0xFF0
 19781                           indf0	equ	0xFEF
 19782                           postinc0	equ	0xFEE
 19783                           fsr0h	equ	0xFEA
 19784                           fsr0l	equ	0xFE9
 19785                           wreg	equ	0xFE8
 19786                           postdec1	equ	0xFE5
 19787                           fsr1h	equ	0xFE2
 19788                           fsr1l	equ	0xFE1
 19789                           indf2	equ	0xFDF
 19790                           postinc2	equ	0xFDE
 19791                           postdec2	equ	0xFDD
 19792                           fsr2h	equ	0xFDA
 19793                           fsr2l	equ	0xFD9
 19794                           status	equ	0xFD8
 19795                           
 19796 ;; *************** function i2_printf *****************
 19797 ;; Defined at:
 19798 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 19799 ;; Parameters:    Size  Location     Type
 19800 ;;  f               2   12[COMRAM] PTR const unsigned char 
 19801 ;;		 -> STR_119(18), STR_118(18), STR_117(18), STR_116(18), 
 19802 ;;		 -> STR_115(17), STR_114(17), STR_113(11), STR_112(18), 
 19803 ;;		 -> STR_111(18), STR_110(17), STR_109(15), STR_108(15), 
 19804 ;;		 -> STR_107(15), STR_106(17), STR_105(17), STR_104(17), 
 19805 ;;		 -> STR_103(16), STR_102(17), STR_101(17), STR_100(17), 
 19806 ;;		 -> STR_99(17), STR_98(17), STR_97(17), STR_96(15), 
 19807 ;;		 -> STR_95(11), STR_94(17), STR_93(11), STR_92(17), 
 19808 ;;		 -> STR_91(14), STR_90(15), STR_89(14), STR_88(10), 
 19809 ;;		 -> STR_87(9), STR_86(9), STR_85(10), STR_84(10), 
 19810 ;;		 -> STR_83(16), STR_82(15), STR_81(3), STR_80(15), 
 19811 ;;		 -> STR_79(13), STR_78(14), STR_77(8), STR_76(14), 
 19812 ;;		 -> STR_75(15), STR_74(12), STR_73(14), STR_72(17), 
 19813 ;;		 -> STR_71(14), STR_70(15), STR_69(17), STR_68(17), 
 19814 ;;		 -> STR_67(7), STR_66(21), STR_65(13), STR_64(11), 
 19815 ;;		 -> STR_63(24), STR_50(17), STR_49(17), STR_48(17), 
 19816 ;;		 -> STR_47(17), STR_46(17), STR_45(17), STR_44(17), 
 19817 ;;		 -> STR_43(17), STR_42(17), STR_41(17), STR_40(17), 
 19818 ;;		 -> STR_39(17), STR_38(17), STR_37(17), STR_36(17), 
 19819 ;;		 -> STR_35(17), STR_34(17), STR_33(17), STR_32(17), 
 19820 ;;		 -> STR_31(17), STR_30(17), STR_29(3), STR_28(17), 
 19821 ;;		 -> STR_27(17), STR_26(17), STR_25(17), STR_24(17), 
 19822 ;;		 -> STR_23(14), STR_22(10), STR_21(24), STR_7(7), 
 19823 ;;		 -> STR_6(17), STR_5(18), STR_4(16), STR_3(18), 
 19824 ;;		 -> STR_2(14), STR_1(18), 
 19825 ;; Auto vars:     Size  Location     Type
 19826 ;;  printf          4    0        struct .
 19827 ;;  printf          2   39[COMRAM] int 
 19828 ;;  printf          2   35[COMRAM] unsigned int 
 19829 ;;  printf          2   33[COMRAM] unsigned int 
 19830 ;;  printf          2   31[COMRAM] PTR void [1]
 19831 ;;		 -> ?i2_printf(2), ?_printf(2), 
 19832 ;;  printf          2   29[COMRAM] PTR const unsigned char 
 19833 ;;		 -> STR_120(7), count_total(2), printRTC@month(4), UI@month(4), 
 19834 ;;  printf          1   38[COMRAM] char 
 19835 ;;  printf          1   37[COMRAM] unsigned char 
 19836 ;;  printf          1   28[COMRAM] char 
 19837 ;; Return value:  Size  Location     Type
 19838 ;;                  2   12[COMRAM] int 
 19839 ;; Registers used:
 19840 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19841 ;; Tracked objects:
 19842 ;;		On entry : 0/0
 19843 ;;		On exit  : 0/0
 19844 ;;		Unchanged: 0/0
 19845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19846 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19847 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19848 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19849 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19850 ;;Total ram usage:       29 bytes
 19851 ;; Hardware stack levels used:    1
 19852 ;; Hardware stack levels required when called:    2
 19853 ;; This function calls:
 19854 ;;		i2___lwdiv
 19855 ;;		i2___lwmod
 19856 ;;		i2___wmul
 19857 ;;		i2_isdigit
 19858 ;;		i2_putch
 19859 ;; This function is called by:
 19860 ;;		_change_state_to_menu_11
 19861 ;;		_change_state_to_menu_23
 19862 ;;		_change_state_to_logs_11
 19863 ;;		_change_state_to_logs_12
 19864 ;;		_change_state_to_logs_22
 19865 ;;		_change_state_to_logs_23
 19866 ;;		_change_state_to_logs_33
 19867 ;;		_change_state_to_logs_34
 19868 ;;		_printSortTimer
 19869 ;;		i2_change_state_to_menu_start
 19870 ;;		i2_change_state_to_menu_12
 19871 ;;		i2_change_state_to_menu_22
 19872 ;;		i2_printRTC
 19873 ;; This function uses a non-reentrant model
 19874 ;;
 19875                           
 19876                           	psect	text79
 19877  00192C                     __ptext79:
 19878                           	opt stack 0
 19879  00192C                     i2_printf:
 19880                           	opt stack 19
 19881                           
 19882                           ;doprnt.c: 466: va_list ap;
 19883                           ;doprnt.c: 499: signed char c;
 19884                           ;doprnt.c: 501: int width;
 19885                           ;doprnt.c: 506: signed char prec;
 19886                           ;doprnt.c: 508: unsigned char flag;
 19887                           ;doprnt.c: 523: union {
 19888                           ;doprnt.c: 524: unsigned long vd;
 19889                           ;doprnt.c: 525: double integ;
 19890                           ;doprnt.c: 526: } tmpval;
 19891                           ;doprnt.c: 528: unsigned int val;
 19892                           ;doprnt.c: 529: unsigned len;
 19893                           ;doprnt.c: 530: const char * cp;
 19894                           ;doprnt.c: 533: *ap = __va_start();
 19895                           
 19896                           ;incstack = 0
 19897  00192C  0E0F               	movlw	low (?i2_printf+2)
 19898  00192E  6E20               	movwf	i2printf@ap,c
 19899  001930  0E00               	movlw	high (?i2_printf+2)
 19900  001932  6E21               	movwf	i2printf@ap+1,c
 19901                           
 19902                           ;doprnt.c: 536: while(c = *f++) {
 19903  001934  D1A4               	goto	i2l5960
 19904  001936                     i2l5830:
 19905                           
 19906                           ;doprnt.c: 538: if(c != '%')
 19907  001936  0E25               	movlw	37
 19908  001938  1827               	xorwf	i2printf@c,w,c
 19909  00193A  B4D8               	btfsc	status,2,c
 19910  00193C  D004               	goto	i2l5834
 19911                           
 19912                           ;doprnt.c: 540: {
 19913                           ;doprnt.c: 541: (putch(c) );
 19914  00193E  5027               	movf	i2printf@c,w,c
 19915  001940  ECDE  F024         	call	i2_putch
 19916                           
 19917                           ;doprnt.c: 542: continue;
 19918  001944  D19C               	goto	i2l5960
 19919  001946                     i2l5834:
 19920                           
 19921                           ;doprnt.c: 543: }
 19922                           ;doprnt.c: 546: width = 0;
 19923  001946  0E00               	movlw	0
 19924  001948  6E29               	movwf	i2printf@width+1,c
 19925  00194A  0E00               	movlw	0
 19926  00194C  6E28               	movwf	i2printf@width,c
 19927                           
 19928                           ;doprnt.c: 548: flag = 0;
 19929  00194E  0E00               	movlw	0
 19930  001950  6E26               	movwf	i2printf@flag,c
 19931                           
 19932                           ;doprnt.c: 551: switch(*f) {
 19933                           
 19934                           ;doprnt.c: 550: for(;;) {
 19935  001952  D003               	goto	i2l5840
 19936  001954                     i2l5836:
 19937                           
 19938                           ;doprnt.c: 580: flag |= 0x04;
 19939  001954  8426               	bsf	i2printf@flag,2,c
 19940                           
 19941                           ;doprnt.c: 581: f++;
 19942  001956  4A0D               	infsnz	i2printf@f,f,c
 19943  001958  2A0E               	incf	i2printf@f+1,f,c
 19944  00195A                     i2l5840:
 19945  00195A  C00D  FFF6         	movff	i2printf@f,tblptrl
 19946  00195E  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 19947  001962                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19948  001962  6AF8               	clrf	tblptru,c
 19949  001964                     	endif
 19950  001964                     	if	0	;tblptru may be non-zero
 19951  001964                     	endif
 19952  001964  0008               	tblrd		*
 19953  001966  50F5               	movf	tablat,w,c
 19954                           
 19955                           ; Switch size 1, requested type "space"
 19956                           ; Number of cases is 1, Range of values is 48 to 48
 19957                           ; switch strategies available:
 19958                           ; Name         Instructions Cycles
 19959                           ; simple_byte            4     3 (average)
 19960                           ;	Chosen strategy is simple_byte
 19961  001968  0A30               	xorlw	48	; case 48
 19962  00196A  B4D8               	btfsc	status,2,c
 19963  00196C  D7F3               	goto	i2l5836
 19964                           
 19965                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 19966                           
 19967                           ;doprnt.c: 586: }
 19968                           
 19969                           ;doprnt.c: 585: break;
 19970  00196E  C00D  FFF6         	movff	i2printf@f,tblptrl
 19971  001972  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 19972  001976                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19973  001976  6AF8               	clrf	tblptru,c
 19974  001978                     	endif
 19975  001978                     	if	0	;tblptru may be non-zero
 19976  001978                     	endif
 19977  001978  0008               	tblrd		*
 19978  00197A  50F5               	movf	tablat,w,c
 19979  00197C  EC8A  F024         	call	i2_isdigit
 19980  001980  A0D8               	btfss	status,0,c
 19981  001982  D0A6               	goto	i2l5888
 19982                           
 19983                           ;doprnt.c: 598: width = 0;
 19984  001984  0E00               	movlw	0
 19985  001986  6E29               	movwf	i2printf@width+1,c
 19986  001988  0E00               	movlw	0
 19987  00198A  6E28               	movwf	i2printf@width,c
 19988  00198C                     i2l5846:
 19989                           
 19990                           ;doprnt.c: 600: width *= 10;
 19991  00198C  C028  F001         	movff	i2printf@width,i2___wmul@multiplier
 19992  001990  C029  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 19993  001994  0E00               	movlw	0
 19994  001996  6E04               	movwf	i2___wmul@multiplicand+1,c
 19995  001998  0E0A               	movlw	10
 19996  00199A  6E03               	movwf	i2___wmul@multiplicand,c
 19997  00199C  EC30  F024         	call	i2___wmul	;wreg free
 19998  0019A0  C001  F028         	movff	?i2___wmul,i2printf@width
 19999  0019A4  C002  F029         	movff	?i2___wmul+1,i2printf@width+1
 20000                           
 20001                           ;doprnt.c: 601: width += *f++ - '0';
 20002  0019A8  0ED0               	movlw	208
 20003  0019AA  6E19               	movwf	??i2_printf& (0+255),c
 20004  0019AC  0EFF               	movlw	255
 20005  0019AE  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 20006  0019B0  C00D  FFF6         	movff	i2printf@f,tblptrl
 20007  0019B4  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 20008  0019B8                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 20009  0019B8  6AF8               	clrf	tblptru,c
 20010  0019BA                     	endif
 20011  0019BA                     	if	0	;tblptru may be non-zero
 20012  0019BA                     	endif
 20013  0019BA  0008               	tblrd		*
 20014  0019BC  50F5               	movf	tablat,w,c
 20015  0019BE  6E1B               	movwf	(??i2_printf+2)& (0+255),c
 20016  0019C0  6A1C               	clrf	(??i2_printf+3)& (0+255),c
 20017  0019C2  5019               	movf	??i2_printf,w,c
 20018  0019C4  261B               	addwf	??i2_printf+2,f,c
 20019  0019C6  501A               	movf	??i2_printf+1,w,c
 20020  0019C8  221C               	addwfc	??i2_printf+3,f,c
 20021  0019CA  501B               	movf	??i2_printf+2,w,c
 20022  0019CC  2628               	addwf	i2printf@width,f,c
 20023  0019CE  501C               	movf	??i2_printf+3,w,c
 20024  0019D0  2229               	addwfc	i2printf@width+1,f,c
 20025  0019D2  4A0D               	infsnz	i2printf@f,f,c
 20026  0019D4  2A0E               	incf	i2printf@f+1,f,c
 20027                           
 20028                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 20029  0019D6  C00D  FFF6         	movff	i2printf@f,tblptrl
 20030  0019DA  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 20031  0019DE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 20032  0019DE  6AF8               	clrf	tblptru,c
 20033  0019E0                     	endif
 20034  0019E0                     	if	0	;tblptru may be non-zero
 20035  0019E0                     	endif
 20036  0019E0  0008               	tblrd		*
 20037  0019E2  50F5               	movf	tablat,w,c
 20038  0019E4  EC8A  F024         	call	i2_isdigit
 20039  0019E8  A0D8               	btfss	status,0,c
 20040  0019EA  D072               	goto	i2l5888
 20041  0019EC  D7CF               	goto	i2l5846
 20042  0019EE                     i2l5854:
 20043                           
 20044                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 20045  0019EE  C020  FFD9         	movff	i2printf@ap,fsr2l
 20046  0019F2  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 20047  0019F6  CFDE F01E          	movff	postinc2,i2printf@cp
 20048  0019FA  CFDD F01F          	movff	postdec2,i2printf@cp+1
 20049  0019FE  0E02               	movlw	2
 20050  001A00  2620               	addwf	i2printf@ap,f,c
 20051  001A02  0E00               	movlw	0
 20052  001A04  2221               	addwfc	i2printf@ap+1,f,c
 20053                           
 20054                           ;doprnt.c: 740: if(!cp)
 20055  001A06  501E               	movf	i2printf@cp,w,c
 20056  001A08  101F               	iorwf	i2printf@cp+1,w,c
 20057  001A0A  A4D8               	btfss	status,2,c
 20058  001A0C  D004               	goto	i2l5862
 20059                           
 20060                           ;doprnt.c: 741: cp = "(null)";
 20061  001A0E  0EB6               	movlw	low STR_120
 20062  001A10  6E1E               	movwf	i2printf@cp,c
 20063  001A12  0EFF               	movlw	high STR_120
 20064  001A14  6E1F               	movwf	i2printf@cp+1,c
 20065  001A16                     i2l5862:
 20066                           
 20067                           ;doprnt.c: 745: len = 0;
 20068  001A16  0E00               	movlw	0
 20069  001A18  6E23               	movwf	i2printf@len+1,c
 20070  001A1A  0E00               	movlw	0
 20071  001A1C  6E22               	movwf	i2printf@len,c
 20072                           
 20073                           ;doprnt.c: 746: while(cp[len])
 20074  001A1E  D002               	goto	i2l5866
 20075  001A20                     i2l5864:
 20076                           
 20077                           ;doprnt.c: 747: len++;
 20078  001A20  4A22               	infsnz	i2printf@len,f,c
 20079  001A22  2A23               	incf	i2printf@len+1,f,c
 20080  001A24                     i2l5866:
 20081  001A24  5022               	movf	i2printf@len,w,c
 20082  001A26  241E               	addwf	i2printf@cp,w,c
 20083  001A28  6E19               	movwf	??i2_printf& (0+255),c
 20084  001A2A  5023               	movf	i2printf@len+1,w,c
 20085  001A2C  201F               	addwfc	i2printf@cp+1,w,c
 20086  001A2E  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 20087  001A30  C019  FFF6         	movff	??i2_printf,tblptrl
 20088  001A34  C01A  FFF7         	movff	??i2_printf+1,tblptrh
 20089  001A38  0E00               	movlw	low (__mediumconst shr (0+16))
 20090  001A3A  6EF8               	movwf	tblptru,c
 20091  001A3C  0E0F               	movlw	(high __ramtop+-1)
 20092  001A3E  64F7               	cpfsgt	tblptrh,c
 20093  001A40  D003               	bra	i2u437_47
 20094  001A42  0008               	tblrd		*
 20095  001A44  50F5               	movf	tablat,w,c
 20096  001A46  D005               	bra	i2u437_40
 20097  001A48                     i2u437_47:
 20098  001A48  CFF6 FFE9          	movff	tblptrl,fsr0l
 20099  001A4C  CFF7 FFEA          	movff	tblptrh,fsr0h
 20100  001A50  50EF               	movf	indf0,w,c
 20101  001A52                     i2u437_40:
 20102  001A52  0900               	iorlw	0
 20103  001A54  A4D8               	btfss	status,2,c
 20104  001A56  D7E4               	goto	i2l5864
 20105                           
 20106                           ;doprnt.c: 757: if(width > len)
 20107  001A58  5028               	movf	i2printf@width,w,c
 20108  001A5A  5C22               	subwf	i2printf@len,w,c
 20109  001A5C  5029               	movf	i2printf@width+1,w,c
 20110  001A5E  5823               	subwfb	i2printf@len+1,w,c
 20111  001A60  B0D8               	btfsc	status,0,c
 20112  001A62  D005               	goto	i2l5872
 20113                           
 20114                           ;doprnt.c: 758: width -= len;
 20115  001A64  5022               	movf	i2printf@len,w,c
 20116  001A66  5E28               	subwf	i2printf@width,f,c
 20117  001A68  5023               	movf	i2printf@len+1,w,c
 20118  001A6A  5A29               	subwfb	i2printf@width+1,f,c
 20119  001A6C  D008               	goto	i2l5876
 20120  001A6E                     i2l5872:
 20121                           
 20122                           ;doprnt.c: 759: else
 20123                           ;doprnt.c: 760: width = 0;
 20124  001A6E  0E00               	movlw	0
 20125  001A70  6E29               	movwf	i2printf@width+1,c
 20126  001A72  0E00               	movlw	0
 20127  001A74  6E28               	movwf	i2printf@width,c
 20128                           
 20129                           ;doprnt.c: 764: while(width--)
 20130  001A76  D003               	goto	i2l5876
 20131  001A78                     i2l5874:
 20132                           
 20133                           ;doprnt.c: 765: (putch(' ') );
 20134  001A78  0E20               	movlw	32
 20135  001A7A  ECDE  F024         	call	i2_putch
 20136  001A7E                     i2l5876:
 20137  001A7E  0628               	decf	i2printf@width,f,c
 20138  001A80  A0D8               	btfss	status,0,c
 20139  001A82  0629               	decf	i2printf@width+1,f,c
 20140  001A84  2828               	incf	i2printf@width,w,c
 20141  001A86  E1F8               	bnz	i2l5874
 20142  001A88  2829               	incf	i2printf@width+1,w,c
 20143  001A8A  B4D8               	btfsc	status,2,c
 20144  001A8C  D016               	goto	i2l5882
 20145  001A8E  D7F4               	goto	i2l5874
 20146  001A90                     i2l5878:
 20147                           
 20148                           ;doprnt.c: 768: (putch(*cp++) );
 20149  001A90  C01E  FFF6         	movff	i2printf@cp,tblptrl
 20150  001A94  C01F  FFF7         	movff	i2printf@cp+1,tblptrh
 20151  001A98  0E00               	movlw	low (__mediumconst shr (0+16))
 20152  001A9A  6EF8               	movwf	tblptru,c
 20153  001A9C  0E0F               	movlw	(high __ramtop+-1)
 20154  001A9E  64F7               	cpfsgt	tblptrh,c
 20155  001AA0  D003               	bra	i2u441_47
 20156  001AA2  0008               	tblrd		*
 20157  001AA4  50F5               	movf	tablat,w,c
 20158  001AA6  D005               	bra	i2u441_40
 20159  001AA8                     i2u441_47:
 20160  001AA8  CFF6 FFE9          	movff	tblptrl,fsr0l
 20161  001AAC  CFF7 FFEA          	movff	tblptrh,fsr0h
 20162  001AB0  50EF               	movf	indf0,w,c
 20163  001AB2                     i2u441_40:
 20164  001AB2  ECDE  F024         	call	i2_putch
 20165  001AB6  4A1E               	infsnz	i2printf@cp,f,c
 20166  001AB8  2A1F               	incf	i2printf@cp+1,f,c
 20167  001ABA                     i2l5882:
 20168  001ABA  0622               	decf	i2printf@len,f,c
 20169  001ABC  A0D8               	btfss	status,0,c
 20170  001ABE  0623               	decf	i2printf@len+1,f,c
 20171  001AC0  2822               	incf	i2printf@len,w,c
 20172  001AC2  E1E6               	bnz	i2l5878
 20173  001AC4  2823               	incf	i2printf@len+1,w,c
 20174  001AC6  B4D8               	btfsc	status,2,c
 20175  001AC8  D0DA               	goto	i2l5960
 20176  001ACA  D7E2               	goto	i2l5878
 20177  001ACC                     i2l5884:
 20178                           
 20179                           ;doprnt.c: 818: flag |= 0x40;
 20180  001ACC  8C26               	bsf	i2printf@flag,6,c
 20181                           
 20182                           ;doprnt.c: 822: }
 20183                           
 20184                           ;doprnt.c: 819: break;
 20185  001ACE  D01B               	goto	i2l1308
 20186  001AD0                     i2l5888:
 20187  001AD0  C00D  FFF6         	movff	i2printf@f,tblptrl
 20188  001AD4  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 20189  001AD8  4A0D               	infsnz	i2printf@f,f,c
 20190  001ADA  2A0E               	incf	i2printf@f+1,f,c
 20191  001ADC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 20192  001ADC  6AF8               	clrf	tblptru,c
 20193  001ADE                     	endif
 20194  001ADE                     	if	0	;tblptru may be non-zero
 20195  001ADE                     	endif
 20196  001ADE  0008               	tblrd		*
 20197  001AE0  CFF5 F027          	movff	tablat,i2printf@c
 20198  001AE4  5027               	movf	i2printf@c,w,c
 20199                           
 20200                           ; Switch size 1, requested type "space"
 20201                           ; Number of cases is 5, Range of values is 0 to 117
 20202                           ; switch strategies available:
 20203                           ; Name         Instructions Cycles
 20204                           ; simple_byte           16     9 (average)
 20205                           ;	Chosen strategy is simple_byte
 20206  001AE6  0A00               	xorlw	0	; case 0
 20207  001AE8  B4D8               	btfsc	status,2,c
 20208  001AEA  0012               	return	
 20209  001AEC  0A64               	xorlw	100	; case 100
 20210  001AEE  B4D8               	btfsc	status,2,c
 20211  001AF0  D00A               	goto	i2l1308
 20212  001AF2  0A0D               	xorlw	13	; case 105
 20213  001AF4  B4D8               	btfsc	status,2,c
 20214  001AF6  D007               	goto	i2l1308
 20215  001AF8  0A1A               	xorlw	26	; case 115
 20216  001AFA  B4D8               	btfsc	status,2,c
 20217  001AFC  D778               	goto	i2l5854
 20218  001AFE  0A06               	xorlw	6	; case 117
 20219  001B00  B4D8               	btfsc	status,2,c
 20220  001B02  D7E4               	goto	i2l5884
 20221  001B04  D0BC               	goto	i2l5960
 20222  001B06                     i2l1308:
 20223                           
 20224                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 20225  001B06  BC26               	btfsc	i2printf@flag,6,c
 20226  001B08  D015               	goto	i2l5900
 20227                           
 20228                           ;doprnt.c: 1253: {
 20229                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 20230  001B0A  C020  FFD9         	movff	i2printf@ap,fsr2l
 20231  001B0E  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 20232  001B12  CFDE F024          	movff	postinc2,i2printf@val
 20233  001B16  CFDD F025          	movff	postdec2,i2printf@val+1
 20234  001B1A  0E02               	movlw	2
 20235  001B1C  2620               	addwf	i2printf@ap,f,c
 20236  001B1E  0E00               	movlw	0
 20237  001B20  2221               	addwfc	i2printf@ap+1,f,c
 20238                           
 20239                           ;doprnt.c: 1261: if((int)val < 0) {
 20240  001B22  AE25               	btfss	i2printf@val+1,7,c
 20241  001B24  D013               	goto	i2l5904
 20242                           
 20243                           ;doprnt.c: 1262: flag |= 0x03;
 20244  001B26  0E03               	movlw	3
 20245  001B28  1226               	iorwf	i2printf@flag,f,c
 20246                           
 20247                           ;doprnt.c: 1263: val = -val;
 20248  001B2A  6C24               	negf	i2printf@val,c
 20249  001B2C  1E25               	comf	i2printf@val+1,f,c
 20250  001B2E  B0D8               	btfsc	status,0,c
 20251  001B30  2A25               	incf	i2printf@val+1,f,c
 20252                           
 20253                           ;doprnt.c: 1264: }
 20254                           ;doprnt.c: 1266: }
 20255  001B32  D00C               	goto	i2l5904
 20256  001B34                     i2l5900:
 20257                           
 20258                           ;doprnt.c: 1268: else
 20259                           ;doprnt.c: 1273: {
 20260                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 20261  001B34  C020  FFD9         	movff	i2printf@ap,fsr2l
 20262  001B38  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 20263  001B3C  CFDE F024          	movff	postinc2,i2printf@val
 20264  001B40  CFDD F025          	movff	postdec2,i2printf@val+1
 20265  001B44  0E02               	movlw	2
 20266  001B46  2620               	addwf	i2printf@ap,f,c
 20267  001B48  0E00               	movlw	0
 20268  001B4A  2221               	addwfc	i2printf@ap+1,f,c
 20269  001B4C                     i2l5904:
 20270                           
 20271                           ;doprnt.c: 1287: }
 20272                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 20273  001B4C  0E01               	movlw	1
 20274  001B4E  6E27               	movwf	i2printf@c,c
 20275  001B50                     i2l5906:
 20276  001B50  0E05               	movlw	5
 20277  001B52  1827               	xorwf	i2printf@c,w,c
 20278  001B54  B4D8               	btfsc	status,2,c
 20279  001B56  D015               	goto	i2l5918
 20280                           
 20281                           ;doprnt.c: 1306: if(val < dpowers[c])
 20282  001B58  5027               	movf	i2printf@c,w,c
 20283  001B5A  0D02               	mullw	2
 20284  001B5C  0E12               	movlw	low _dpowers
 20285  001B5E  24F3               	addwf	prodl,w,c
 20286  001B60  6EF6               	movwf	tblptrl,c
 20287  001B62  0EFB               	movlw	high _dpowers
 20288  001B64  20F4               	addwfc	prodh,w,c
 20289  001B66  6EF7               	movwf	tblptrh,c
 20290  001B68                     	if	1	;There are 3 active tblptr bytes
 20291  001B68  6AF8               	clrf	tblptru,c
 20292  001B6A  0E00               	movlw	low (__mediumconst shr (0+16))
 20293  001B6C  22F8               	addwfc	tblptru,f,c
 20294  001B6E                     	endif
 20295  001B6E  0009               	tblrd		*+
 20296  001B70  50F5               	movf	tablat,w,c
 20297  001B72  5C24               	subwf	i2printf@val,w,c
 20298  001B74  0009               	tblrd		*+
 20299  001B76  50F5               	movf	tablat,w,c
 20300  001B78  5825               	subwfb	i2printf@val+1,w,c
 20301  001B7A  A0D8               	btfss	status,0,c
 20302  001B7C  D002               	goto	i2l5918
 20303                           
 20304                           ;doprnt.c: 1307: break;
 20305  001B7E  2A27               	incf	i2printf@c,f,c
 20306  001B80  D7E7               	goto	i2l5906
 20307  001B82                     i2l5918:
 20308                           
 20309                           ;doprnt.c: 1345: if(width && flag & 0x03)
 20310  001B82  5028               	movf	i2printf@width,w,c
 20311  001B84  1029               	iorwf	i2printf@width+1,w,c
 20312  001B86  B4D8               	btfsc	status,2,c
 20313  001B88  D009               	goto	i2l5924
 20314  001B8A  C026  F019         	movff	i2printf@flag,??i2_printf
 20315  001B8E  0E03               	movlw	3
 20316  001B90  1619               	andwf	??i2_printf,f,c
 20317  001B92  B4D8               	btfsc	status,2,c
 20318  001B94  D003               	goto	i2l5924
 20319                           
 20320                           ;doprnt.c: 1346: width--;
 20321  001B96  0628               	decf	i2printf@width,f,c
 20322  001B98  A0D8               	btfss	status,0,c
 20323  001B9A  0629               	decf	i2printf@width+1,f,c
 20324  001B9C                     i2l5924:
 20325                           
 20326                           ;doprnt.c: 1381: if(width > c)
 20327  001B9C  0E80               	movlw	128
 20328  001B9E  BE27               	btfsc	i2printf@c,7,c
 20329  001BA0  0E7F               	movlw	127
 20330  001BA2  6E19               	movwf	??i2_printf& (0+255),c
 20331  001BA4  5028               	movf	i2printf@width,w,c
 20332  001BA6  5C27               	subwf	i2printf@c,w,c
 20333  001BA8  5029               	movf	i2printf@width+1,w,c
 20334  001BAA  0A80               	xorlw	128
 20335  001BAC  5819               	subwfb	??i2_printf& (0+255),w,c
 20336  001BAE  B0D8               	btfsc	status,0,c
 20337  001BB0  D007               	goto	i2l5928
 20338                           
 20339                           ;doprnt.c: 1382: width -= c;
 20340  001BB2  5027               	movf	i2printf@c,w,c
 20341  001BB4  5E28               	subwf	i2printf@width,f,c
 20342  001BB6  0E00               	movlw	0
 20343  001BB8  BE27               	btfsc	i2printf@c,7,c
 20344  001BBA  0EFF               	movlw	255
 20345  001BBC  5A29               	subwfb	i2printf@width+1,f,c
 20346  001BBE  D004               	goto	i2l5930
 20347  001BC0                     i2l5928:
 20348                           
 20349                           ;doprnt.c: 1383: else
 20350                           ;doprnt.c: 1384: width = 0;
 20351  001BC0  0E00               	movlw	0
 20352  001BC2  6E29               	movwf	i2printf@width+1,c
 20353  001BC4  0E00               	movlw	0
 20354  001BC6  6E28               	movwf	i2printf@width,c
 20355  001BC8                     i2l5930:
 20356                           
 20357                           ;doprnt.c: 1387: if(flag & 0x04) {
 20358  001BC8  A426               	btfss	i2printf@flag,2,c
 20359  001BCA  D014               	goto	i2l5942
 20360                           
 20361                           ;doprnt.c: 1392: if(flag & 0x03)
 20362  001BCC  C026  F019         	movff	i2printf@flag,??i2_printf
 20363  001BD0  0E03               	movlw	3
 20364  001BD2  1619               	andwf	??i2_printf,f,c
 20365  001BD4  B4D8               	btfsc	status,2,c
 20366  001BD6  D003               	goto	i2l5936
 20367                           
 20368                           ;doprnt.c: 1393: (putch('-') );
 20369  001BD8  0E2D               	movlw	45
 20370  001BDA  ECDE  F024         	call	i2_putch
 20371  001BDE                     i2l5936:
 20372                           
 20373                           ;doprnt.c: 1415: if(width)
 20374  001BDE  5028               	movf	i2printf@width,w,c
 20375  001BE0  1029               	iorwf	i2printf@width+1,w,c
 20376  001BE2  B4D8               	btfsc	status,2,c
 20377  001BE4  D01E               	goto	i2l5952
 20378                           
 20379                           ;doprnt.c: 1417: (putch('0') );
 20380                           
 20381                           ;doprnt.c: 1416: do
 20382  001BE6  0E30               	movlw	48
 20383  001BE8  ECDE  F024         	call	i2_putch
 20384                           
 20385                           ;doprnt.c: 1418: while(--width);
 20386  001BEC  0628               	decf	i2printf@width,f,c
 20387  001BEE  A0D8               	btfss	status,0,c
 20388  001BF0  0629               	decf	i2printf@width+1,f,c
 20389  001BF2  D7F5               	goto	i2l5936
 20390  001BF4                     i2l5942:
 20391                           
 20392                           ;doprnt.c: 1422: {
 20393                           ;doprnt.c: 1424: if(width
 20394                           ;doprnt.c: 1428: )
 20395  001BF4  5028               	movf	i2printf@width,w,c
 20396  001BF6  1029               	iorwf	i2printf@width+1,w,c
 20397  001BF8  B4D8               	btfsc	status,2,c
 20398  001BFA  D00A               	goto	i2l5948
 20399  001BFC                     i2l5944:
 20400                           
 20401                           ;doprnt.c: 1430: (putch(' ') );
 20402  001BFC  0E20               	movlw	32
 20403  001BFE  ECDE  F024         	call	i2_putch
 20404                           
 20405                           ;doprnt.c: 1431: while(--width);
 20406  001C02  0628               	decf	i2printf@width,f,c
 20407  001C04  A0D8               	btfss	status,0,c
 20408  001C06  0629               	decf	i2printf@width+1,f,c
 20409  001C08  5028               	movf	i2printf@width,w,c
 20410  001C0A  1029               	iorwf	i2printf@width+1,w,c
 20411  001C0C  A4D8               	btfss	status,2,c
 20412  001C0E  D7F6               	goto	i2l5944
 20413  001C10                     i2l5948:
 20414                           
 20415                           ;doprnt.c: 1438: if(flag & 0x03)
 20416  001C10  C026  F019         	movff	i2printf@flag,??i2_printf
 20417  001C14  0E03               	movlw	3
 20418  001C16  1619               	andwf	??i2_printf,f,c
 20419  001C18  B4D8               	btfsc	status,2,c
 20420  001C1A  D003               	goto	i2l5952
 20421                           
 20422                           ;doprnt.c: 1439: (putch('-') );
 20423  001C1C  0E2D               	movlw	45
 20424  001C1E  ECDE  F024         	call	i2_putch
 20425  001C22                     i2l5952:
 20426                           
 20427                           ;doprnt.c: 1469: }
 20428                           ;doprnt.c: 1472: prec = c;
 20429  001C22  C027  F01D         	movff	i2printf@c,i2printf@prec
 20430                           
 20431                           ;doprnt.c: 1474: while(prec--) {
 20432  001C26  D027               	goto	i2l5958
 20433  001C28                     i2l5954:
 20434                           
 20435                           ;doprnt.c: 1478: {
 20436                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 20437  001C28  501D               	movf	i2printf@prec,w,c
 20438  001C2A  0D02               	mullw	2
 20439  001C2C  0E12               	movlw	low _dpowers
 20440  001C2E  24F3               	addwf	prodl,w,c
 20441  001C30  6EF6               	movwf	tblptrl,c
 20442  001C32  0EFB               	movlw	high _dpowers
 20443  001C34  20F4               	addwfc	prodh,w,c
 20444  001C36  6EF7               	movwf	tblptrh,c
 20445  001C38                     	if	1	;There are 3 active tblptr bytes
 20446  001C38  6AF8               	clrf	tblptru,c
 20447  001C3A  0E00               	movlw	low (__mediumconst shr (0+16))
 20448  001C3C  22F8               	addwfc	tblptru,f,c
 20449  001C3E                     	endif
 20450  001C3E  0009               	tblrd		*+
 20451  001C40  CFF5 F008          	movff	tablat,i2___lwdiv@divisor
 20452  001C44  000A               	tblrd		*-
 20453  001C46  CFF5 F009          	movff	tablat,i2___lwdiv@divisor+1
 20454  001C4A  C024  F006         	movff	i2printf@val,i2___lwdiv@dividend
 20455  001C4E  C025  F007         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 20456  001C52  EC2A  F021         	call	i2___lwdiv	;wreg free
 20457  001C56  C006  F001         	movff	?i2___lwdiv,i2___lwmod@dividend
 20458  001C5A  C007  F002         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 20459  001C5E  0E00               	movlw	0
 20460  001C60  6E04               	movwf	i2___lwmod@divisor+1,c
 20461  001C62  0E0A               	movlw	10
 20462  001C64  6E03               	movwf	i2___lwmod@divisor,c
 20463  001C66  ECE9  F021         	call	i2___lwmod	;wreg free
 20464  001C6A  5001               	movf	?i2___lwmod,w,c
 20465  001C6C  0F30               	addlw	48
 20466  001C6E  6E27               	movwf	i2printf@c,c
 20467                           
 20468                           ;doprnt.c: 1523: }
 20469                           ;doprnt.c: 1524: (putch(c) );
 20470  001C70  5027               	movf	i2printf@c,w,c
 20471  001C72  ECDE  F024         	call	i2_putch
 20472  001C76                     i2l5958:
 20473  001C76  061D               	decf	i2printf@prec,f,c
 20474  001C78  281D               	incf	i2printf@prec,w,c
 20475  001C7A  A4D8               	btfss	status,2,c
 20476  001C7C  D7D5               	goto	i2l5954
 20477  001C7E                     i2l5960:
 20478  001C7E  C00D  FFF6         	movff	i2printf@f,tblptrl
 20479  001C82  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 20480  001C86  4A0D               	infsnz	i2printf@f,f,c
 20481  001C88  2A0E               	incf	i2printf@f+1,f,c
 20482  001C8A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 20483  001C8A  6AF8               	clrf	tblptru,c
 20484  001C8C                     	endif
 20485  001C8C                     	if	0	;tblptru may be non-zero
 20486  001C8C                     	endif
 20487  001C8C  0008               	tblrd		*
 20488  001C8E  CFF5 F027          	movff	tablat,i2printf@c
 20489  001C92  5027               	movf	i2printf@c,w,c
 20490  001C94  B4D8               	btfsc	status,2,c
 20491  001C96  0012               	return	
 20492  001C98  D64E               	goto	i2l5830
 20493  001C9A                     __end_ofi2_printf:
 20494                           	opt stack 0
 20495                           pclatu	equ	0xFFB
 20496                           pclath	equ	0xFFA
 20497                           tblptru	equ	0xFF8
 20498                           tblptrh	equ	0xFF7
 20499                           tblptrl	equ	0xFF6
 20500                           tablat	equ	0xFF5
 20501                           prodh	equ	0xFF4
 20502                           prodl	equ	0xFF3
 20503                           intcon	equ	0xFF2
 20504                           intcon2	equ	0xFF1
 20505                           intcon3	equ	0xFF0
 20506                           indf0	equ	0xFEF
 20507                           postinc0	equ	0xFEE
 20508                           fsr0h	equ	0xFEA
 20509                           fsr0l	equ	0xFE9
 20510                           wreg	equ	0xFE8
 20511                           postdec1	equ	0xFE5
 20512                           fsr1h	equ	0xFE2
 20513                           fsr1l	equ	0xFE1
 20514                           indf2	equ	0xFDF
 20515                           postinc2	equ	0xFDE
 20516                           postdec2	equ	0xFDD
 20517                           fsr2h	equ	0xFDA
 20518                           fsr2l	equ	0xFD9
 20519                           status	equ	0xFD8
 20520                           
 20521 ;; *************** function i2_putch *****************
 20522 ;; Defined at:
 20523 ;;		line 20 in file "lcd.c"
 20524 ;; Parameters:    Size  Location     Type
 20525 ;;  data            1    wreg     unsigned char 
 20526 ;; Auto vars:     Size  Location     Type
 20527 ;;  data            1    2[COMRAM] unsigned char 
 20528 ;; Return value:  Size  Location     Type
 20529 ;;                  1    wreg      void 
 20530 ;; Registers used:
 20531 ;;		wreg, status,2, status,0, cstack
 20532 ;; Tracked objects:
 20533 ;;		On entry : 0/0
 20534 ;;		On exit  : 0/0
 20535 ;;		Unchanged: 0/0
 20536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20537 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20538 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20539 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20540 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20541 ;;Total ram usage:        1 bytes
 20542 ;; Hardware stack levels used:    1
 20543 ;; Hardware stack levels required when called:    1
 20544 ;; This function calls:
 20545 ;;		i2_lcdNibble
 20546 ;; This function is called by:
 20547 ;;		i2_printf
 20548 ;; This function uses a non-reentrant model
 20549 ;;
 20550                           
 20551                           	psect	text80
 20552  0049BC                     __ptext80:
 20553                           	opt stack 0
 20554  0049BC                     i2_putch:
 20555                           	opt stack 19
 20556                           
 20557                           ;incstack = 0
 20558                           ;i2putch@data stored from wreg
 20559  0049BC  6E03               	movwf	i2putch@data,c
 20560                           
 20561                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 20562  0049BE  848C               	bsf	3980,2,c	;volatile
 20563                           
 20564                           ;lcd.c: 22: lcdNibble(data);
 20565  0049C0  5003               	movf	i2putch@data,w,c
 20566  0049C2  ECD5  F020         	call	i2_lcdNibble
 20567  0049C6  0012               	return		;funcret
 20568  0049C8                     __end_ofi2_putch:
 20569                           	opt stack 0
 20570                           pclatu	equ	0xFFB
 20571                           pclath	equ	0xFFA
 20572                           tblptru	equ	0xFF8
 20573                           tblptrh	equ	0xFF7
 20574                           tblptrl	equ	0xFF6
 20575                           tablat	equ	0xFF5
 20576                           prodh	equ	0xFF4
 20577                           prodl	equ	0xFF3
 20578                           intcon	equ	0xFF2
 20579                           intcon2	equ	0xFF1
 20580                           intcon3	equ	0xFF0
 20581                           indf0	equ	0xFEF
 20582                           postinc0	equ	0xFEE
 20583                           fsr0h	equ	0xFEA
 20584                           fsr0l	equ	0xFE9
 20585                           wreg	equ	0xFE8
 20586                           postdec1	equ	0xFE5
 20587                           fsr1h	equ	0xFE2
 20588                           fsr1l	equ	0xFE1
 20589                           indf2	equ	0xFDF
 20590                           postinc2	equ	0xFDE
 20591                           postdec2	equ	0xFDD
 20592                           fsr2h	equ	0xFDA
 20593                           fsr2l	equ	0xFD9
 20594                           status	equ	0xFD8
 20595                           
 20596 ;; *************** function i2_isdigit *****************
 20597 ;; Defined at:
 20598 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 20599 ;; Parameters:    Size  Location     Type
 20600 ;;  c               1    wreg     unsigned char 
 20601 ;; Auto vars:     Size  Location     Type
 20602 ;;  c               1    2[COMRAM] unsigned char 
 20603 ;; Return value:  Size  Location     Type
 20604 ;;		None               void
 20605 ;; Registers used:
 20606 ;;		wreg, status,2, status,0
 20607 ;; Tracked objects:
 20608 ;;		On entry : 0/0
 20609 ;;		On exit  : 0/0
 20610 ;;		Unchanged: 0/0
 20611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20612 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20613 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20614 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20615 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20616 ;;Total ram usage:        3 bytes
 20617 ;; Hardware stack levels used:    1
 20618 ;; This function calls:
 20619 ;;		Nothing
 20620 ;; This function is called by:
 20621 ;;		i2_printf
 20622 ;; This function uses a non-reentrant model
 20623 ;;
 20624                           
 20625                           	psect	text81
 20626  004914                     __ptext81:
 20627                           	opt stack 0
 20628  004914                     i2_isdigit:
 20629                           	opt stack 20
 20630                           
 20631                           ;incstack = 0
 20632                           ;i2isdigit@c stored from wreg
 20633  004914  6E03               	movwf	i2isdigit@c,c
 20634  004916  0E00               	movlw	0
 20635  004918  6E02               	movwf	i2_isdigit$1958,c
 20636  00491A  0E3A               	movlw	58
 20637  00491C  6003               	cpfslt	i2isdigit@c,c
 20638  00491E  D005               	goto	i2l5534
 20639  004920  0E2F               	movlw	47
 20640  004922  6403               	cpfsgt	i2isdigit@c,c
 20641  004924  D002               	goto	i2l5534
 20642  004926  0E01               	movlw	1
 20643  004928  6E02               	movwf	i2_isdigit$1958,c
 20644  00492A                     i2l5534:
 20645  00492A  C002  F001         	movff	i2_isdigit$1958,??i2_isdigit
 20646  00492E  3001               	rrcf	??i2_isdigit,w,c
 20647  004930  0012               	return	
 20648  004932                     __end_ofi2_isdigit:
 20649                           	opt stack 0
 20650                           pclatu	equ	0xFFB
 20651                           pclath	equ	0xFFA
 20652                           tblptru	equ	0xFF8
 20653                           tblptrh	equ	0xFF7
 20654                           tblptrl	equ	0xFF6
 20655                           tablat	equ	0xFF5
 20656                           prodh	equ	0xFF4
 20657                           prodl	equ	0xFF3
 20658                           intcon	equ	0xFF2
 20659                           intcon2	equ	0xFF1
 20660                           intcon3	equ	0xFF0
 20661                           indf0	equ	0xFEF
 20662                           postinc0	equ	0xFEE
 20663                           fsr0h	equ	0xFEA
 20664                           fsr0l	equ	0xFE9
 20665                           wreg	equ	0xFE8
 20666                           postdec1	equ	0xFE5
 20667                           fsr1h	equ	0xFE2
 20668                           fsr1l	equ	0xFE1
 20669                           indf2	equ	0xFDF
 20670                           postinc2	equ	0xFDE
 20671                           postdec2	equ	0xFDD
 20672                           fsr2h	equ	0xFDA
 20673                           fsr2l	equ	0xFD9
 20674                           status	equ	0xFD8
 20675                           
 20676 ;; *************** function i2___wmul *****************
 20677 ;; Defined at:
 20678 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 20679 ;; Parameters:    Size  Location     Type
 20680 ;;  multiplier      2    0[COMRAM] unsigned int 
 20681 ;;  multiplicand    2    2[COMRAM] unsigned int 
 20682 ;; Auto vars:     Size  Location     Type
 20683 ;;  __wmul          2    4[COMRAM] unsigned int 
 20684 ;; Return value:  Size  Location     Type
 20685 ;;                  2    0[COMRAM] unsigned int 
 20686 ;; Registers used:
 20687 ;;		wreg, status,2, status,0, prodl, prodh
 20688 ;; Tracked objects:
 20689 ;;		On entry : 0/0
 20690 ;;		On exit  : 0/0
 20691 ;;		Unchanged: 0/0
 20692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20693 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20694 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20695 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20696 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20697 ;;Total ram usage:        6 bytes
 20698 ;; Hardware stack levels used:    1
 20699 ;; This function calls:
 20700 ;;		Nothing
 20701 ;; This function is called by:
 20702 ;;		_printSortTimer
 20703 ;;		_retrieveLog
 20704 ;;		i2_printf
 20705 ;; This function uses a non-reentrant model
 20706 ;;
 20707                           
 20708                           	psect	text82
 20709  004860                     __ptext82:
 20710                           	opt stack 0
 20711  004860                     i2___wmul:
 20712                           	opt stack 20
 20713                           
 20714                           ;incstack = 0
 20715  004860  5001               	movf	i2___wmul@multiplier,w,c
 20716  004862  0203               	mulwf	i2___wmul@multiplicand,c
 20717  004864  CFF3 F005          	movff	prodl,i2___wmul@product
 20718  004868  CFF4 F006          	movff	prodh,i2___wmul@product+1
 20719  00486C  5001               	movf	i2___wmul@multiplier,w,c
 20720  00486E  0204               	mulwf	i2___wmul@multiplicand+1,c
 20721  004870  50F3               	movf	prodl,w,c
 20722  004872  2606               	addwf	i2___wmul@product+1,f,c
 20723  004874  5002               	movf	i2___wmul@multiplier+1,w,c
 20724  004876  0203               	mulwf	i2___wmul@multiplicand,c
 20725  004878  50F3               	movf	prodl,w,c
 20726  00487A  2606               	addwf	i2___wmul@product+1,f,c
 20727  00487C  C005  F001         	movff	i2___wmul@product,?i2___wmul
 20728  004880  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 20729  004884  0012               	return	
 20730  004886                     __end_ofi2___wmul:
 20731                           	opt stack 0
 20732                           pclatu	equ	0xFFB
 20733                           pclath	equ	0xFFA
 20734                           tblptru	equ	0xFF8
 20735                           tblptrh	equ	0xFF7
 20736                           tblptrl	equ	0xFF6
 20737                           tablat	equ	0xFF5
 20738                           prodh	equ	0xFF4
 20739                           prodl	equ	0xFF3
 20740                           intcon	equ	0xFF2
 20741                           intcon2	equ	0xFF1
 20742                           intcon3	equ	0xFF0
 20743                           indf0	equ	0xFEF
 20744                           postinc0	equ	0xFEE
 20745                           fsr0h	equ	0xFEA
 20746                           fsr0l	equ	0xFE9
 20747                           wreg	equ	0xFE8
 20748                           postdec1	equ	0xFE5
 20749                           fsr1h	equ	0xFE2
 20750                           fsr1l	equ	0xFE1
 20751                           indf2	equ	0xFDF
 20752                           postinc2	equ	0xFDE
 20753                           postdec2	equ	0xFDD
 20754                           fsr2h	equ	0xFDA
 20755                           fsr2l	equ	0xFD9
 20756                           status	equ	0xFD8
 20757                           
 20758 ;; *************** function i2___lwmod *****************
 20759 ;; Defined at:
 20760 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 20761 ;; Parameters:    Size  Location     Type
 20762 ;;  dividend        2    0[COMRAM] unsigned int 
 20763 ;;  divisor         2    2[COMRAM] unsigned int 
 20764 ;; Auto vars:     Size  Location     Type
 20765 ;;  __lwmod         1    4[COMRAM] unsigned char 
 20766 ;; Return value:  Size  Location     Type
 20767 ;;                  2    0[COMRAM] unsigned int 
 20768 ;; Registers used:
 20769 ;;		wreg, status,2, status,0
 20770 ;; Tracked objects:
 20771 ;;		On entry : 0/0
 20772 ;;		On exit  : 0/0
 20773 ;;		Unchanged: 0/0
 20774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20775 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20776 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20777 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20778 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20779 ;;Total ram usage:        5 bytes
 20780 ;; Hardware stack levels used:    1
 20781 ;; This function calls:
 20782 ;;		Nothing
 20783 ;; This function is called by:
 20784 ;;		_printSortTimer
 20785 ;;		i2_printf
 20786 ;; This function uses a non-reentrant model
 20787 ;;
 20788                           
 20789                           	psect	text83
 20790  0043D2                     __ptext83:
 20791                           	opt stack 0
 20792  0043D2                     i2___lwmod:
 20793                           	opt stack 20
 20794                           
 20795                           ;incstack = 0
 20796  0043D2  5003               	movf	i2___lwmod@divisor,w,c
 20797  0043D4  1004               	iorwf	i2___lwmod@divisor+1,w,c
 20798  0043D6  B4D8               	btfsc	status,2,c
 20799  0043D8  D018               	goto	i2l1765
 20800  0043DA  0E01               	movlw	1
 20801  0043DC  6E05               	movwf	i2___lwmod@counter,c
 20802  0043DE  D004               	goto	i2l5566
 20803  0043E0                     i2l5564:
 20804  0043E0  90D8               	bcf	status,0,c
 20805  0043E2  3603               	rlcf	i2___lwmod@divisor,f,c
 20806  0043E4  3604               	rlcf	i2___lwmod@divisor+1,f,c
 20807  0043E6  2A05               	incf	i2___lwmod@counter,f,c
 20808  0043E8                     i2l5566:
 20809  0043E8  AE04               	btfss	i2___lwmod@divisor+1,7,c
 20810  0043EA  D7FA               	goto	i2l5564
 20811  0043EC                     i2l5568:
 20812  0043EC  5003               	movf	i2___lwmod@divisor,w,c
 20813  0043EE  5C01               	subwf	i2___lwmod@dividend,w,c
 20814  0043F0  5004               	movf	i2___lwmod@divisor+1,w,c
 20815  0043F2  5802               	subwfb	i2___lwmod@dividend+1,w,c
 20816  0043F4  A0D8               	btfss	status,0,c
 20817  0043F6  D004               	goto	i2l5572
 20818  0043F8  5003               	movf	i2___lwmod@divisor,w,c
 20819  0043FA  5E01               	subwf	i2___lwmod@dividend,f,c
 20820  0043FC  5004               	movf	i2___lwmod@divisor+1,w,c
 20821  0043FE  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 20822  004400                     i2l5572:
 20823  004400  90D8               	bcf	status,0,c
 20824  004402  3204               	rrcf	i2___lwmod@divisor+1,f,c
 20825  004404  3203               	rrcf	i2___lwmod@divisor,f,c
 20826  004406  2E05               	decfsz	i2___lwmod@counter,f,c
 20827  004408  D7F1               	goto	i2l5568
 20828  00440A                     i2l1765:
 20829  00440A  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 20830  00440E  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 20831  004412  0012               	return		;funcret
 20832  004414                     __end_ofi2___lwmod:
 20833                           	opt stack 0
 20834                           pclatu	equ	0xFFB
 20835                           pclath	equ	0xFFA
 20836                           tblptru	equ	0xFF8
 20837                           tblptrh	equ	0xFF7
 20838                           tblptrl	equ	0xFF6
 20839                           tablat	equ	0xFF5
 20840                           prodh	equ	0xFF4
 20841                           prodl	equ	0xFF3
 20842                           intcon	equ	0xFF2
 20843                           intcon2	equ	0xFF1
 20844                           intcon3	equ	0xFF0
 20845                           indf0	equ	0xFEF
 20846                           postinc0	equ	0xFEE
 20847                           fsr0h	equ	0xFEA
 20848                           fsr0l	equ	0xFE9
 20849                           wreg	equ	0xFE8
 20850                           postdec1	equ	0xFE5
 20851                           fsr1h	equ	0xFE2
 20852                           fsr1l	equ	0xFE1
 20853                           indf2	equ	0xFDF
 20854                           postinc2	equ	0xFDE
 20855                           postdec2	equ	0xFDD
 20856                           fsr2h	equ	0xFDA
 20857                           fsr2l	equ	0xFD9
 20858                           status	equ	0xFD8
 20859                           
 20860 ;; *************** function i2___lwdiv *****************
 20861 ;; Defined at:
 20862 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 20863 ;; Parameters:    Size  Location     Type
 20864 ;;  dividend        2    5[COMRAM] unsigned int 
 20865 ;;  divisor         2    7[COMRAM] unsigned int 
 20866 ;; Auto vars:     Size  Location     Type
 20867 ;;  __lwdiv         2    9[COMRAM] unsigned int 
 20868 ;;  __lwdiv         1   11[COMRAM] unsigned char 
 20869 ;; Return value:  Size  Location     Type
 20870 ;;                  2    5[COMRAM] unsigned int 
 20871 ;; Registers used:
 20872 ;;		wreg, status,2, status,0
 20873 ;; Tracked objects:
 20874 ;;		On entry : 0/0
 20875 ;;		On exit  : 0/0
 20876 ;;		Unchanged: 0/0
 20877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20878 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20879 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20880 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20881 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20882 ;;Total ram usage:        7 bytes
 20883 ;; Hardware stack levels used:    1
 20884 ;; This function calls:
 20885 ;;		Nothing
 20886 ;; This function is called by:
 20887 ;;		_printSortTimer
 20888 ;;		i2_printf
 20889 ;; This function uses a non-reentrant model
 20890 ;;
 20891                           
 20892                           	psect	text84
 20893  004254                     __ptext84:
 20894                           	opt stack 0
 20895  004254                     i2___lwdiv:
 20896                           	opt stack 20
 20897                           
 20898                           ;incstack = 0
 20899  004254  0E00               	movlw	0
 20900  004256  6E0B               	movwf	i2___lwdiv@quotient+1,c
 20901  004258  0E00               	movlw	0
 20902  00425A  6E0A               	movwf	i2___lwdiv@quotient,c
 20903  00425C  5008               	movf	i2___lwdiv@divisor,w,c
 20904  00425E  1009               	iorwf	i2___lwdiv@divisor+1,w,c
 20905  004260  B4D8               	btfsc	status,2,c
 20906  004262  D01C               	goto	i2l1755
 20907  004264  0E01               	movlw	1
 20908  004266  6E0C               	movwf	i2___lwdiv@counter,c
 20909  004268  D004               	goto	i2l5546
 20910  00426A                     i2l5544:
 20911  00426A  90D8               	bcf	status,0,c
 20912  00426C  3608               	rlcf	i2___lwdiv@divisor,f,c
 20913  00426E  3609               	rlcf	i2___lwdiv@divisor+1,f,c
 20914  004270  2A0C               	incf	i2___lwdiv@counter,f,c
 20915  004272                     i2l5546:
 20916  004272  AE09               	btfss	i2___lwdiv@divisor+1,7,c
 20917  004274  D7FA               	goto	i2l5544
 20918  004276                     i2l5548:
 20919  004276  90D8               	bcf	status,0,c
 20920  004278  360A               	rlcf	i2___lwdiv@quotient,f,c
 20921  00427A  360B               	rlcf	i2___lwdiv@quotient+1,f,c
 20922  00427C  5008               	movf	i2___lwdiv@divisor,w,c
 20923  00427E  5C06               	subwf	i2___lwdiv@dividend,w,c
 20924  004280  5009               	movf	i2___lwdiv@divisor+1,w,c
 20925  004282  5807               	subwfb	i2___lwdiv@dividend+1,w,c
 20926  004284  A0D8               	btfss	status,0,c
 20927  004286  D005               	goto	i2l5556
 20928  004288  5008               	movf	i2___lwdiv@divisor,w,c
 20929  00428A  5E06               	subwf	i2___lwdiv@dividend,f,c
 20930  00428C  5009               	movf	i2___lwdiv@divisor+1,w,c
 20931  00428E  5A07               	subwfb	i2___lwdiv@dividend+1,f,c
 20932  004290  800A               	bsf	i2___lwdiv@quotient,0,c
 20933  004292                     i2l5556:
 20934  004292  90D8               	bcf	status,0,c
 20935  004294  3209               	rrcf	i2___lwdiv@divisor+1,f,c
 20936  004296  3208               	rrcf	i2___lwdiv@divisor,f,c
 20937  004298  2E0C               	decfsz	i2___lwdiv@counter,f,c
 20938  00429A  D7ED               	goto	i2l5548
 20939  00429C                     i2l1755:
 20940  00429C  C00A  F006         	movff	i2___lwdiv@quotient,?i2___lwdiv
 20941  0042A0  C00B  F007         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 20942  0042A4  0012               	return		;funcret
 20943  0042A6                     __end_ofi2___lwdiv:
 20944                           	opt stack 0
 20945                           pclatu	equ	0xFFB
 20946                           pclath	equ	0xFFA
 20947                           tblptru	equ	0xFF8
 20948                           tblptrh	equ	0xFF7
 20949                           tblptrl	equ	0xFF6
 20950                           tablat	equ	0xFF5
 20951                           prodh	equ	0xFF4
 20952                           prodl	equ	0xFF3
 20953                           intcon	equ	0xFF2
 20954                           intcon2	equ	0xFF1
 20955                           intcon3	equ	0xFF0
 20956                           indf0	equ	0xFEF
 20957                           postinc0	equ	0xFEE
 20958                           fsr0h	equ	0xFEA
 20959                           fsr0l	equ	0xFE9
 20960                           wreg	equ	0xFE8
 20961                           postdec1	equ	0xFE5
 20962                           fsr1h	equ	0xFE2
 20963                           fsr1l	equ	0xFE1
 20964                           indf2	equ	0xFDF
 20965                           postinc2	equ	0xFDE
 20966                           postdec2	equ	0xFDD
 20967                           fsr2h	equ	0xFDA
 20968                           fsr2l	equ	0xFD9
 20969                           status	equ	0xFD8
 20970                           
 20971 ;; *************** function i2_lcdInst *****************
 20972 ;; Defined at:
 20973 ;;		line 15 in file "lcd.c"
 20974 ;; Parameters:    Size  Location     Type
 20975 ;;  data            1    wreg     unsigned char 
 20976 ;; Auto vars:     Size  Location     Type
 20977 ;;  data            1    2[COMRAM] unsigned char 
 20978 ;; Return value:  Size  Location     Type
 20979 ;;                  1    wreg      void 
 20980 ;; Registers used:
 20981 ;;		wreg, status,2, status,0, cstack
 20982 ;; Tracked objects:
 20983 ;;		On entry : 0/0
 20984 ;;		On exit  : 0/0
 20985 ;;		Unchanged: 0/0
 20986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20987 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20988 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20989 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20990 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20991 ;;Total ram usage:        1 bytes
 20992 ;; Hardware stack levels used:    1
 20993 ;; Hardware stack levels required when called:    1
 20994 ;; This function calls:
 20995 ;;		i2_lcdNibble
 20996 ;; This function is called by:
 20997 ;;		_change_state_to_menu_11
 20998 ;;		_change_state_to_menu_23
 20999 ;;		_change_state_to_logs_11
 21000 ;;		_change_state_to_logs_12
 21001 ;;		_change_state_to_logs_22
 21002 ;;		_change_state_to_logs_23
 21003 ;;		_change_state_to_logs_33
 21004 ;;		_change_state_to_logs_34
 21005 ;;		_printSortTimer
 21006 ;;		i2_change_state_to_menu_start
 21007 ;;		i2_change_state_to_menu_12
 21008 ;;		i2_change_state_to_menu_22
 21009 ;;		i2_printRTC
 21010 ;; This function uses a non-reentrant model
 21011 ;;
 21012                           
 21013                           	psect	text85
 21014  0049C8                     __ptext85:
 21015                           	opt stack 0
 21016  0049C8                     i2_lcdInst:
 21017                           	opt stack 19
 21018                           
 21019                           ;incstack = 0
 21020                           ;i2lcdInst@data stored from wreg
 21021  0049C8  6E03               	movwf	i2lcdInst@data,c
 21022                           
 21023                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 21024  0049CA  948C               	bcf	3980,2,c	;volatile
 21025                           
 21026                           ;lcd.c: 17: lcdNibble(data);
 21027  0049CC  5003               	movf	i2lcdInst@data,w,c
 21028  0049CE  ECD5  F020         	call	i2_lcdNibble
 21029  0049D2  0012               	return		;funcret
 21030  0049D4                     __end_ofi2_lcdInst:
 21031                           	opt stack 0
 21032                           pclatu	equ	0xFFB
 21033                           pclath	equ	0xFFA
 21034                           tblptru	equ	0xFF8
 21035                           tblptrh	equ	0xFF7
 21036                           tblptrl	equ	0xFF6
 21037                           tablat	equ	0xFF5
 21038                           prodh	equ	0xFF4
 21039                           prodl	equ	0xFF3
 21040                           intcon	equ	0xFF2
 21041                           intcon2	equ	0xFF1
 21042                           intcon3	equ	0xFF0
 21043                           indf0	equ	0xFEF
 21044                           postinc0	equ	0xFEE
 21045                           fsr0h	equ	0xFEA
 21046                           fsr0l	equ	0xFE9
 21047                           wreg	equ	0xFE8
 21048                           postdec1	equ	0xFE5
 21049                           fsr1h	equ	0xFE2
 21050                           fsr1l	equ	0xFE1
 21051                           indf2	equ	0xFDF
 21052                           postinc2	equ	0xFDE
 21053                           postdec2	equ	0xFDD
 21054                           fsr2h	equ	0xFDA
 21055                           fsr2l	equ	0xFD9
 21056                           status	equ	0xFD8
 21057                           
 21058 ;; *************** function i2_lcdNibble *****************
 21059 ;; Defined at:
 21060 ;;		line 25 in file "lcd.c"
 21061 ;; Parameters:    Size  Location     Type
 21062 ;;  data            1    wreg     unsigned char 
 21063 ;; Auto vars:     Size  Location     Type
 21064 ;;  data            1    1[COMRAM] unsigned char 
 21065 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 21066 ;; Return value:  Size  Location     Type
 21067 ;;                  1    wreg      void 
 21068 ;; Registers used:
 21069 ;;		wreg, status,2, status,0
 21070 ;; Tracked objects:
 21071 ;;		On entry : 0/0
 21072 ;;		On exit  : 0/0
 21073 ;;		Unchanged: 0/0
 21074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21075 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21076 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21077 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21078 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21079 ;;Total ram usage:        2 bytes
 21080 ;; Hardware stack levels used:    1
 21081 ;; This function calls:
 21082 ;;		Nothing
 21083 ;; This function is called by:
 21084 ;;		i2_lcdInst
 21085 ;;		i2_putch
 21086 ;; This function uses a non-reentrant model
 21087 ;;
 21088                           
 21089                           	psect	text86
 21090  0041AA                     __ptext86:
 21091                           	opt stack 0
 21092  0041AA                     i2_lcdNibble:
 21093                           	opt stack 19
 21094                           
 21095                           ;incstack = 0
 21096                           ;i2lcdNibble@data stored from wreg
 21097  0041AA  6E02               	movwf	i2lcdNibble@data,c
 21098                           
 21099                           ;lcd.c: 27: char temp = data & 0xF0;
 21100  0041AC  5002               	movf	i2lcdNibble@data,w,c
 21101  0041AE  0BF0               	andlw	240
 21102  0041B0  6E01               	movwf	i2lcdNibble@temp,c
 21103                           
 21104                           ;lcd.c: 28: LATD = LATD & 0x0F;
 21105  0041B2  508C               	movf	3980,w,c	;volatile
 21106  0041B4  0B0F               	andlw	15
 21107  0041B6  6E8C               	movwf	3980,c	;volatile
 21108                           
 21109                           ;lcd.c: 29: LATD = temp | LATD;
 21110  0041B8  5001               	movf	i2lcdNibble@temp,w,c
 21111  0041BA  108C               	iorwf	3980,w,c	;volatile
 21112  0041BC  6E8C               	movwf	3980,c	;volatile
 21113                           
 21114                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 21115  0041BE  868C               	bsf	3980,3,c	;volatile
 21116                           
 21117                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 21118  0041C0  0E42               	movlw	66
 21119  0041C2                     i2u862_47:
 21120  0041C2  2EE8               	decfsz	wreg,f,c
 21121  0041C4  D7FE               	bra	i2u862_47
 21122  0041C6  D000               	nop2	
 21123                           
 21124                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 21125  0041C8  968C               	bcf	3980,3,c	;volatile
 21126                           
 21127                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 21128  0041CA  0E42               	movlw	66
 21129  0041CC                     i2u863_47:
 21130  0041CC  2EE8               	decfsz	wreg,f,c
 21131  0041CE  D7FE               	bra	i2u863_47
 21132  0041D0  D000               	nop2	
 21133                           
 21134                           ;lcd.c: 36: data = data << 4;
 21135  0041D2  3802               	swapf	i2lcdNibble@data,w,c
 21136  0041D4  0BF0               	andlw	240
 21137  0041D6  6E02               	movwf	i2lcdNibble@data,c
 21138                           
 21139                           ;lcd.c: 38: temp = data & 0xF0;
 21140  0041D8  5002               	movf	i2lcdNibble@data,w,c
 21141  0041DA  0BF0               	andlw	240
 21142  0041DC  6E01               	movwf	i2lcdNibble@temp,c
 21143                           
 21144                           ;lcd.c: 39: LATD = LATD & 0x0F;
 21145  0041DE  508C               	movf	3980,w,c	;volatile
 21146  0041E0  0B0F               	andlw	15
 21147  0041E2  6E8C               	movwf	3980,c	;volatile
 21148                           
 21149                           ;lcd.c: 40: LATD = temp | LATD;
 21150  0041E4  5001               	movf	i2lcdNibble@temp,w,c
 21151  0041E6  108C               	iorwf	3980,w,c	;volatile
 21152  0041E8  6E8C               	movwf	3980,c	;volatile
 21153                           
 21154                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 21155  0041EA  868C               	bsf	3980,3,c	;volatile
 21156                           
 21157                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 21158  0041EC  0E42               	movlw	66
 21159  0041EE                     i2u864_47:
 21160  0041EE  2EE8               	decfsz	wreg,f,c
 21161  0041F0  D7FE               	bra	i2u864_47
 21162  0041F2  D000               	nop2	
 21163                           
 21164                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 21165  0041F4  968C               	bcf	3980,3,c	;volatile
 21166                           
 21167                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 21168  0041F6  0E42               	movlw	66
 21169  0041F8                     i2u865_47:
 21170  0041F8  2EE8               	decfsz	wreg,f,c
 21171  0041FA  D7FE               	bra	i2u865_47
 21172  0041FC  D000               	nop2	
 21173  0041FE  0012               	return		;funcret
 21174  004200                     __end_ofi2_lcdNibble:
 21175                           	opt stack 0
 21176                           pclatu	equ	0xFFB
 21177                           pclath	equ	0xFFA
 21178                           tblptru	equ	0xFF8
 21179                           tblptrh	equ	0xFF7
 21180                           tblptrl	equ	0xFF6
 21181                           tablat	equ	0xFF5
 21182                           prodh	equ	0xFF4
 21183                           prodl	equ	0xFF3
 21184                           intcon	equ	0xFF2
 21185                           intcon2	equ	0xFF1
 21186                           intcon3	equ	0xFF0
 21187                           indf0	equ	0xFEF
 21188                           postinc0	equ	0xFEE
 21189                           fsr0h	equ	0xFEA
 21190                           fsr0l	equ	0xFE9
 21191                           wreg	equ	0xFE8
 21192                           postdec1	equ	0xFE5
 21193                           fsr1h	equ	0xFE2
 21194                           fsr1l	equ	0xFE1
 21195                           indf2	equ	0xFDF
 21196                           postinc2	equ	0xFDE
 21197                           postdec2	equ	0xFDD
 21198                           fsr2h	equ	0xFDA
 21199                           fsr2l	equ	0xFD9
 21200                           status	equ	0xFD8
 21201                           
 21202 ;; *************** function i2_getRTC *****************
 21203 ;; Defined at:
 21204 ;;		line 44 in file "RTC.c"
 21205 ;; Parameters:    Size  Location     Type
 21206 ;;		None
 21207 ;; Auto vars:     Size  Location     Type
 21208 ;;  getRTC          2    3[COMRAM] int 
 21209 ;; Return value:  Size  Location     Type
 21210 ;;                  1    wreg      void 
 21211 ;; Registers used:
 21212 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 21213 ;; Tracked objects:
 21214 ;;		On entry : 0/0
 21215 ;;		On exit  : 0/0
 21216 ;;		Unchanged: 0/0
 21217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21218 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21219 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21220 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21221 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21222 ;;Total ram usage:        2 bytes
 21223 ;; Hardware stack levels used:    1
 21224 ;; Hardware stack levels required when called:    2
 21225 ;; This function calls:
 21226 ;;		i2_I2C_Master_Read
 21227 ;;		i2_I2C_Master_Start
 21228 ;;		i2_I2C_Master_Stop
 21229 ;;		i2_I2C_Master_Write
 21230 ;; This function is called by:
 21231 ;;		_printSortTimer
 21232 ;;		i2_printRTC
 21233 ;; This function uses a non-reentrant model
 21234 ;;
 21235                           
 21236                           	psect	text87
 21237  003E94                     __ptext87:
 21238                           	opt stack 0
 21239  003E94                     i2_getRTC:
 21240                           	opt stack 18
 21241                           
 21242                           ;RTC.c: 48: I2C_Master_Start();
 21243                           
 21244                           ;incstack = 0
 21245  003E94  EC04  F025         	call	i2_I2C_Master_Start	;wreg free
 21246                           
 21247                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
 21248  003E98  0E00               	movlw	0
 21249  003E9A  6E03               	movwf	i2I2C_Master_Write@d+1,c
 21250  003E9C  0ED0               	movlw	208
 21251  003E9E  6E02               	movwf	i2I2C_Master_Write@d,c
 21252  003EA0  ECEF  F024         	call	i2_I2C_Master_Write	;wreg free
 21253                           
 21254                           ;RTC.c: 50: I2C_Master_Write(0x00);
 21255  003EA4  0E00               	movlw	0
 21256  003EA6  6E03               	movwf	i2I2C_Master_Write@d+1,c
 21257  003EA8  0E00               	movlw	0
 21258  003EAA  6E02               	movwf	i2I2C_Master_Write@d,c
 21259  003EAC  ECEF  F024         	call	i2_I2C_Master_Write	;wreg free
 21260                           
 21261                           ;RTC.c: 51: I2C_Master_Stop();
 21262  003EB0  EC00  F025         	call	i2_I2C_Master_Stop	;wreg free
 21263                           
 21264                           ;RTC.c: 54: I2C_Master_Start();
 21265  003EB4  EC04  F025         	call	i2_I2C_Master_Start	;wreg free
 21266                           
 21267                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
 21268  003EB8  0E00               	movlw	0
 21269  003EBA  6E03               	movwf	i2I2C_Master_Write@d+1,c
 21270  003EBC  0ED1               	movlw	209
 21271  003EBE  6E02               	movwf	i2I2C_Master_Write@d,c
 21272  003EC0  ECEF  F024         	call	i2_I2C_Master_Write	;wreg free
 21273                           
 21274                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
 21275  003EC4  0E00               	movlw	0
 21276  003EC6  6E05               	movwf	i2getRTC@i+1,c
 21277  003EC8  0E00               	movlw	0
 21278  003ECA  6E04               	movwf	i2getRTC@i,c
 21279  003ECC                     i2l5802:
 21280  003ECC  BE05               	btfsc	i2getRTC@i+1,7,c
 21281  003ECE  D006               	goto	i2l5806
 21282  003ED0  5005               	movf	i2getRTC@i+1,w,c
 21283  003ED2  E111               	bnz	i2l5812
 21284  003ED4  0E06               	movlw	6
 21285  003ED6  5C04               	subwf	i2getRTC@i,w,c
 21286  003ED8  B0D8               	btfsc	status,0,c
 21287  003EDA  D00D               	goto	i2l5812
 21288  003EDC                     i2l5806:
 21289                           
 21290                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
 21291  003EDC  0E24               	movlw	low _time
 21292  003EDE  2404               	addwf	i2getRTC@i,w,c
 21293  003EE0  6ED9               	movwf	fsr2l,c
 21294  003EE2  0E01               	movlw	high _time
 21295  003EE4  2005               	addwfc	i2getRTC@i+1,w,c
 21296  003EE6  6EDA               	movwf	fsr2h,c
 21297  003EE8  0E01               	movlw	1
 21298  003EEA  EC43  F024         	call	i2_I2C_Master_Read
 21299  003EEE  6EDF               	movwf	indf2,c
 21300  003EF0  4A04               	infsnz	i2getRTC@i,f,c
 21301  003EF2  2A05               	incf	i2getRTC@i+1,f,c
 21302  003EF4  D7EB               	goto	i2l5802
 21303  003EF6                     i2l5812:
 21304                           
 21305                           ;RTC.c: 58: }
 21306                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
 21307  003EF6  0E00               	movlw	0
 21308  003EF8  EC43  F024         	call	i2_I2C_Master_Read
 21309  003EFC  0101               	movlb	1	; () banked
 21310  003EFE  6F2A               	movwf	(_time+6)& (0+255),b
 21311                           
 21312                           ;RTC.c: 60: I2C_Master_Stop();
 21313  003F00  EC00  F025         	call	i2_I2C_Master_Stop	;wreg free
 21314  003F04  0012               	return		;funcret
 21315  003F06                     __end_ofi2_getRTC:
 21316                           	opt stack 0
 21317                           pclatu	equ	0xFFB
 21318                           pclath	equ	0xFFA
 21319                           tblptru	equ	0xFF8
 21320                           tblptrh	equ	0xFF7
 21321                           tblptrl	equ	0xFF6
 21322                           tablat	equ	0xFF5
 21323                           prodh	equ	0xFF4
 21324                           prodl	equ	0xFF3
 21325                           intcon	equ	0xFF2
 21326                           intcon2	equ	0xFF1
 21327                           intcon3	equ	0xFF0
 21328                           indf0	equ	0xFEF
 21329                           postinc0	equ	0xFEE
 21330                           fsr0h	equ	0xFEA
 21331                           fsr0l	equ	0xFE9
 21332                           wreg	equ	0xFE8
 21333                           postdec1	equ	0xFE5
 21334                           fsr1h	equ	0xFE2
 21335                           fsr1l	equ	0xFE1
 21336                           indf2	equ	0xFDF
 21337                           postinc2	equ	0xFDE
 21338                           postdec2	equ	0xFDD
 21339                           fsr2h	equ	0xFDA
 21340                           fsr2l	equ	0xFD9
 21341                           status	equ	0xFD8
 21342                           
 21343 ;; *************** function i2_I2C_Master_Write *****************
 21344 ;; Defined at:
 21345 ;;		line 49 in file "I2C.c"
 21346 ;; Parameters:    Size  Location     Type
 21347 ;;  d               2    1[COMRAM] unsigned int 
 21348 ;; Auto vars:     Size  Location     Type
 21349 ;;		None
 21350 ;; Return value:  Size  Location     Type
 21351 ;;                  1    wreg      void 
 21352 ;; Registers used:
 21353 ;;		wreg, status,2, status,0, cstack
 21354 ;; Tracked objects:
 21355 ;;		On entry : 0/0
 21356 ;;		On exit  : 0/0
 21357 ;;		Unchanged: 0/0
 21358 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21359 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21360 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21361 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21362 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21363 ;;Total ram usage:        2 bytes
 21364 ;; Hardware stack levels used:    1
 21365 ;; Hardware stack levels required when called:    1
 21366 ;; This function calls:
 21367 ;;		i2_I2C_Master_Wait
 21368 ;; This function is called by:
 21369 ;;		i2_getRTC
 21370 ;; This function uses a non-reentrant model
 21371 ;;
 21372                           
 21373                           	psect	text88
 21374  0049DE                     __ptext88:
 21375                           	opt stack 0
 21376  0049DE                     i2_I2C_Master_Write:
 21377                           	opt stack 18
 21378                           
 21379                           ;I2C.c: 51: I2C_Master_Wait();
 21380                           
 21381                           ;incstack = 0
 21382  0049DE  ECC5  F024         	call	i2_I2C_Master_Wait	;wreg free
 21383                           
 21384                           ;I2C.c: 52: SSPBUF = d;
 21385  0049E2  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 21386  0049E6  0012               	return		;funcret
 21387  0049E8                     __end_ofi2_I2C_Master_Write:
 21388                           	opt stack 0
 21389                           pclatu	equ	0xFFB
 21390                           pclath	equ	0xFFA
 21391                           tblptru	equ	0xFF8
 21392                           tblptrh	equ	0xFF7
 21393                           tblptrl	equ	0xFF6
 21394                           tablat	equ	0xFF5
 21395                           prodh	equ	0xFF4
 21396                           prodl	equ	0xFF3
 21397                           intcon	equ	0xFF2
 21398                           intcon2	equ	0xFF1
 21399                           intcon3	equ	0xFF0
 21400                           indf0	equ	0xFEF
 21401                           postinc0	equ	0xFEE
 21402                           fsr0h	equ	0xFEA
 21403                           fsr0l	equ	0xFE9
 21404                           wreg	equ	0xFE8
 21405                           postdec1	equ	0xFE5
 21406                           fsr1h	equ	0xFE2
 21407                           fsr1l	equ	0xFE1
 21408                           indf2	equ	0xFDF
 21409                           postinc2	equ	0xFDE
 21410                           postdec2	equ	0xFDD
 21411                           fsr2h	equ	0xFDA
 21412                           fsr2l	equ	0xFD9
 21413                           status	equ	0xFD8
 21414                           
 21415 ;; *************** function i2_I2C_Master_Stop *****************
 21416 ;; Defined at:
 21417 ;;		line 43 in file "I2C.c"
 21418 ;; Parameters:    Size  Location     Type
 21419 ;;		None
 21420 ;; Auto vars:     Size  Location     Type
 21421 ;;		None
 21422 ;; Return value:  Size  Location     Type
 21423 ;;                  1    wreg      void 
 21424 ;; Registers used:
 21425 ;;		wreg, status,2, status,0, cstack
 21426 ;; Tracked objects:
 21427 ;;		On entry : 0/0
 21428 ;;		On exit  : 0/0
 21429 ;;		Unchanged: 0/0
 21430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21431 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21432 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21433 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21434 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21435 ;;Total ram usage:        0 bytes
 21436 ;; Hardware stack levels used:    1
 21437 ;; Hardware stack levels required when called:    1
 21438 ;; This function calls:
 21439 ;;		i2_I2C_Master_Wait
 21440 ;; This function is called by:
 21441 ;;		i2_getRTC
 21442 ;; This function uses a non-reentrant model
 21443 ;;
 21444                           
 21445                           	psect	text89
 21446  004A00                     __ptext89:
 21447                           	opt stack 0
 21448  004A00                     i2_I2C_Master_Stop:
 21449                           	opt stack 18
 21450                           
 21451                           ;I2C.c: 45: I2C_Master_Wait();
 21452                           
 21453                           ;incstack = 0
 21454  004A00  ECC5  F024         	call	i2_I2C_Master_Wait	;wreg free
 21455                           
 21456                           ;I2C.c: 46: PEN = 1;
 21457  004A04  84C5               	bsf	4037,2,c	;volatile
 21458  004A06  0012               	return		;funcret
 21459  004A08                     __end_ofi2_I2C_Master_Stop:
 21460                           	opt stack 0
 21461                           pclatu	equ	0xFFB
 21462                           pclath	equ	0xFFA
 21463                           tblptru	equ	0xFF8
 21464                           tblptrh	equ	0xFF7
 21465                           tblptrl	equ	0xFF6
 21466                           tablat	equ	0xFF5
 21467                           prodh	equ	0xFF4
 21468                           prodl	equ	0xFF3
 21469                           intcon	equ	0xFF2
 21470                           intcon2	equ	0xFF1
 21471                           intcon3	equ	0xFF0
 21472                           indf0	equ	0xFEF
 21473                           postinc0	equ	0xFEE
 21474                           fsr0h	equ	0xFEA
 21475                           fsr0l	equ	0xFE9
 21476                           wreg	equ	0xFE8
 21477                           postdec1	equ	0xFE5
 21478                           fsr1h	equ	0xFE2
 21479                           fsr1l	equ	0xFE1
 21480                           indf2	equ	0xFDF
 21481                           postinc2	equ	0xFDE
 21482                           postdec2	equ	0xFDD
 21483                           fsr2h	equ	0xFDA
 21484                           fsr2l	equ	0xFD9
 21485                           status	equ	0xFD8
 21486                           
 21487 ;; *************** function i2_I2C_Master_Start *****************
 21488 ;; Defined at:
 21489 ;;		line 31 in file "I2C.c"
 21490 ;; Parameters:    Size  Location     Type
 21491 ;;		None
 21492 ;; Auto vars:     Size  Location     Type
 21493 ;;		None
 21494 ;; Return value:  Size  Location     Type
 21495 ;;                  1    wreg      void 
 21496 ;; Registers used:
 21497 ;;		wreg, status,2, status,0, cstack
 21498 ;; Tracked objects:
 21499 ;;		On entry : 0/0
 21500 ;;		On exit  : 0/0
 21501 ;;		Unchanged: 0/0
 21502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21503 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21504 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21505 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21506 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21507 ;;Total ram usage:        0 bytes
 21508 ;; Hardware stack levels used:    1
 21509 ;; Hardware stack levels required when called:    1
 21510 ;; This function calls:
 21511 ;;		i2_I2C_Master_Wait
 21512 ;; This function is called by:
 21513 ;;		i2_getRTC
 21514 ;; This function uses a non-reentrant model
 21515 ;;
 21516                           
 21517                           	psect	text90
 21518  004A08                     __ptext90:
 21519                           	opt stack 0
 21520  004A08                     i2_I2C_Master_Start:
 21521                           	opt stack 18
 21522                           
 21523                           ;I2C.c: 33: I2C_Master_Wait();
 21524                           
 21525                           ;incstack = 0
 21526  004A08  ECC5  F024         	call	i2_I2C_Master_Wait	;wreg free
 21527                           
 21528                           ;I2C.c: 34: SEN = 1;
 21529  004A0C  80C5               	bsf	4037,0,c	;volatile
 21530  004A0E  0012               	return		;funcret
 21531  004A10                     __end_ofi2_I2C_Master_Start:
 21532                           	opt stack 0
 21533                           pclatu	equ	0xFFB
 21534                           pclath	equ	0xFFA
 21535                           tblptru	equ	0xFF8
 21536                           tblptrh	equ	0xFF7
 21537                           tblptrl	equ	0xFF6
 21538                           tablat	equ	0xFF5
 21539                           prodh	equ	0xFF4
 21540                           prodl	equ	0xFF3
 21541                           intcon	equ	0xFF2
 21542                           intcon2	equ	0xFF1
 21543                           intcon3	equ	0xFF0
 21544                           indf0	equ	0xFEF
 21545                           postinc0	equ	0xFEE
 21546                           fsr0h	equ	0xFEA
 21547                           fsr0l	equ	0xFE9
 21548                           wreg	equ	0xFE8
 21549                           postdec1	equ	0xFE5
 21550                           fsr1h	equ	0xFE2
 21551                           fsr1l	equ	0xFE1
 21552                           indf2	equ	0xFDF
 21553                           postinc2	equ	0xFDE
 21554                           postdec2	equ	0xFDD
 21555                           fsr2h	equ	0xFDA
 21556                           fsr2l	equ	0xFD9
 21557                           status	equ	0xFD8
 21558                           
 21559 ;; *************** function i2_I2C_Master_Read *****************
 21560 ;; Defined at:
 21561 ;;		line 55 in file "I2C.c"
 21562 ;; Parameters:    Size  Location     Type
 21563 ;;  a               1    wreg     unsigned char 
 21564 ;; Auto vars:     Size  Location     Type
 21565 ;;  a               1    1[COMRAM] unsigned char 
 21566 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 21567 ;; Return value:  Size  Location     Type
 21568 ;;                  1    wreg      unsigned char 
 21569 ;; Registers used:
 21570 ;;		wreg, status,2, status,0, cstack
 21571 ;; Tracked objects:
 21572 ;;		On entry : 0/0
 21573 ;;		On exit  : 0/0
 21574 ;;		Unchanged: 0/0
 21575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21576 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21577 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21578 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21579 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21580 ;;Total ram usage:        2 bytes
 21581 ;; Hardware stack levels used:    1
 21582 ;; Hardware stack levels required when called:    1
 21583 ;; This function calls:
 21584 ;;		i2_I2C_Master_Wait
 21585 ;; This function is called by:
 21586 ;;		i2_getRTC
 21587 ;; This function uses a non-reentrant model
 21588 ;;
 21589                           
 21590                           	psect	text91
 21591  004886                     __ptext91:
 21592                           	opt stack 0
 21593  004886                     i2_I2C_Master_Read:
 21594                           	opt stack 18
 21595                           
 21596                           ;incstack = 0
 21597                           ;i2I2C_Master_Read@a stored from wreg
 21598  004886  6E02               	movwf	i2I2C_Master_Read@a,c
 21599                           
 21600                           ;I2C.c: 57: unsigned char temp;
 21601                           ;I2C.c: 58: I2C_Master_Wait();
 21602  004888  ECC5  F024         	call	i2_I2C_Master_Wait	;wreg free
 21603                           
 21604                           ;I2C.c: 59: RCEN = 1;
 21605  00488C  86C5               	bsf	4037,3,c	;volatile
 21606                           
 21607                           ;I2C.c: 60: I2C_Master_Wait();
 21608  00488E  ECC5  F024         	call	i2_I2C_Master_Wait	;wreg free
 21609                           
 21610                           ;I2C.c: 61: temp = SSPBUF;
 21611  004892  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 21612                           
 21613                           ;I2C.c: 62: I2C_Master_Wait();
 21614  004896  ECC5  F024         	call	i2_I2C_Master_Wait	;wreg free
 21615                           
 21616                           ;I2C.c: 63: ACKDT = (a)?0:1;
 21617  00489A  5002               	movf	i2I2C_Master_Read@a,w,c
 21618  00489C  A4D8               	btfss	status,2,c
 21619  00489E  D002               	goto	i2u382_40
 21620  0048A0  8AC5               	bsf	4037,5,c	;volatile
 21621  0048A2  D001               	goto	i2l5510
 21622  0048A4                     i2u382_40:
 21623  0048A4  9AC5               	bcf	4037,5,c	;volatile
 21624  0048A6                     i2l5510:
 21625                           
 21626                           ;I2C.c: 64: ACKEN = 1;
 21627  0048A6  88C5               	bsf	4037,4,c	;volatile
 21628                           
 21629                           ;I2C.c: 65: return temp;
 21630  0048A8  5003               	movf	i2I2C_Master_Read@temp,w,c
 21631  0048AA  0012               	return	
 21632  0048AC                     __end_ofi2_I2C_Master_Read:
 21633                           	opt stack 0
 21634                           pclatu	equ	0xFFB
 21635                           pclath	equ	0xFFA
 21636                           tblptru	equ	0xFF8
 21637                           tblptrh	equ	0xFF7
 21638                           tblptrl	equ	0xFF6
 21639                           tablat	equ	0xFF5
 21640                           prodh	equ	0xFF4
 21641                           prodl	equ	0xFF3
 21642                           intcon	equ	0xFF2
 21643                           intcon2	equ	0xFF1
 21644                           intcon3	equ	0xFF0
 21645                           indf0	equ	0xFEF
 21646                           postinc0	equ	0xFEE
 21647                           fsr0h	equ	0xFEA
 21648                           fsr0l	equ	0xFE9
 21649                           wreg	equ	0xFE8
 21650                           postdec1	equ	0xFE5
 21651                           fsr1h	equ	0xFE2
 21652                           fsr1l	equ	0xFE1
 21653                           indf2	equ	0xFDF
 21654                           postinc2	equ	0xFDE
 21655                           postdec2	equ	0xFDD
 21656                           fsr2h	equ	0xFDA
 21657                           fsr2l	equ	0xFD9
 21658                           status	equ	0xFD8
 21659                           
 21660 ;; *************** function i2_I2C_Master_Wait *****************
 21661 ;; Defined at:
 21662 ;;		line 26 in file "I2C.c"
 21663 ;; Parameters:    Size  Location     Type
 21664 ;;		None
 21665 ;; Auto vars:     Size  Location     Type
 21666 ;;		None
 21667 ;; Return value:  Size  Location     Type
 21668 ;;                  1    wreg      void 
 21669 ;; Registers used:
 21670 ;;		wreg, status,2, status,0
 21671 ;; Tracked objects:
 21672 ;;		On entry : 0/0
 21673 ;;		On exit  : 0/0
 21674 ;;		Unchanged: 0/0
 21675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21676 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21677 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21678 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21679 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21680 ;;Total ram usage:        1 bytes
 21681 ;; Hardware stack levels used:    1
 21682 ;; This function calls:
 21683 ;;		Nothing
 21684 ;; This function is called by:
 21685 ;;		i2_I2C_Master_Start
 21686 ;;		i2_I2C_Master_Stop
 21687 ;;		i2_I2C_Master_Write
 21688 ;;		i2_I2C_Master_Read
 21689 ;; This function uses a non-reentrant model
 21690 ;;
 21691                           
 21692                           	psect	text92
 21693  00498A                     __ptext92:
 21694                           	opt stack 0
 21695  00498A                     i2_I2C_Master_Wait:
 21696                           	opt stack 18
 21697  00498A                     i2l66:
 21698  00498A  B4C7               	btfsc	4039,2,c	;volatile
 21699  00498C  D7FE               	goto	i2l66
 21700  00498E  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 21701  004992  0E1F               	movlw	31
 21702  004994  1601               	andwf	??i2_I2C_Master_Wait,f,c
 21703  004996  B4D8               	btfsc	status,2,c
 21704  004998  0012               	return	
 21705  00499A  D7F7               	goto	i2l66
 21706  00499C                     __end_ofi2_I2C_Master_Wait:
 21707                           	opt stack 0
 21708                           pclatu	equ	0xFFB
 21709                           pclath	equ	0xFFA
 21710                           tblptru	equ	0xFF8
 21711                           tblptrh	equ	0xFF7
 21712                           tblptrl	equ	0xFF6
 21713                           tablat	equ	0xFF5
 21714                           prodh	equ	0xFF4
 21715                           prodl	equ	0xFF3
 21716                           intcon	equ	0xFF2
 21717                           intcon2	equ	0xFF1
 21718                           intcon3	equ	0xFF0
 21719                           indf0	equ	0xFEF
 21720                           postinc0	equ	0xFEE
 21721                           fsr0h	equ	0xFEA
 21722                           fsr0l	equ	0xFE9
 21723                           wreg	equ	0xFE8
 21724                           postdec1	equ	0xFE5
 21725                           fsr1h	equ	0xFE2
 21726                           fsr1l	equ	0xFE1
 21727                           indf2	equ	0xFDF
 21728                           postinc2	equ	0xFDE
 21729                           postdec2	equ	0xFDD
 21730                           fsr2h	equ	0xFDA
 21731                           fsr2l	equ	0xFD9
 21732                           status	equ	0xFD8
 21733                           pclatu	equ	0xFFB
 21734                           pclath	equ	0xFFA
 21735                           tblptru	equ	0xFF8
 21736                           tblptrh	equ	0xFF7
 21737                           tblptrl	equ	0xFF6
 21738                           tablat	equ	0xFF5
 21739                           prodh	equ	0xFF4
 21740                           prodl	equ	0xFF3
 21741                           intcon	equ	0xFF2
 21742                           intcon2	equ	0xFF1
 21743                           intcon3	equ	0xFF0
 21744                           indf0	equ	0xFEF
 21745                           postinc0	equ	0xFEE
 21746                           fsr0h	equ	0xFEA
 21747                           fsr0l	equ	0xFE9
 21748                           wreg	equ	0xFE8
 21749                           postdec1	equ	0xFE5
 21750                           fsr1h	equ	0xFE2
 21751                           fsr1l	equ	0xFE1
 21752                           indf2	equ	0xFDF
 21753                           postinc2	equ	0xFDE
 21754                           postdec2	equ	0xFDD
 21755                           fsr2h	equ	0xFDA
 21756                           fsr2l	equ	0xFD9
 21757                           status	equ	0xFD8
 21758                           
 21759                           	psect	rparam
 21760  0000                     pclatu	equ	0xFFB
 21761                           pclath	equ	0xFFA
 21762                           tblptru	equ	0xFF8
 21763                           tblptrh	equ	0xFF7
 21764                           tblptrl	equ	0xFF6
 21765                           tablat	equ	0xFF5
 21766                           prodh	equ	0xFF4
 21767                           prodl	equ	0xFF3
 21768                           intcon	equ	0xFF2
 21769                           intcon2	equ	0xFF1
 21770                           intcon3	equ	0xFF0
 21771                           indf0	equ	0xFEF
 21772                           postinc0	equ	0xFEE
 21773                           fsr0h	equ	0xFEA
 21774                           fsr0l	equ	0xFE9
 21775                           wreg	equ	0xFE8
 21776                           postdec1	equ	0xFE5
 21777                           fsr1h	equ	0xFE2
 21778                           fsr1l	equ	0xFE1
 21779                           indf2	equ	0xFDF
 21780                           postinc2	equ	0xFDE
 21781                           postdec2	equ	0xFDD
 21782                           fsr2h	equ	0xFDA
 21783                           fsr2l	equ	0xFD9
 21784                           status	equ	0xFD8
 21785                           
 21786                           	psect	temp
 21787  00007E                     btemp:
 21788                           	opt stack 0
 21789  00007E                     	ds	1
 21790  0000                     int$flags	set	btemp
 21791                           pclatu	equ	0xFFB
 21792                           pclath	equ	0xFFA
 21793                           tblptru	equ	0xFF8
 21794                           tblptrh	equ	0xFF7
 21795                           tblptrl	equ	0xFF6
 21796                           tablat	equ	0xFF5
 21797                           prodh	equ	0xFF4
 21798                           prodl	equ	0xFF3
 21799                           intcon	equ	0xFF2
 21800                           intcon2	equ	0xFF1
 21801                           intcon3	equ	0xFF0
 21802                           indf0	equ	0xFEF
 21803                           postinc0	equ	0xFEE
 21804                           fsr0h	equ	0xFEA
 21805                           fsr0l	equ	0xFE9
 21806                           wreg	equ	0xFE8
 21807                           postdec1	equ	0xFE5
 21808                           fsr1h	equ	0xFE2
 21809                           fsr1l	equ	0xFE1
 21810                           indf2	equ	0xFDF
 21811                           postinc2	equ	0xFDE
 21812                           postdec2	equ	0xFDD
 21813                           fsr2h	equ	0xFDA
 21814                           fsr2l	equ	0xFD9
 21815                           status	equ	0xFD8


Data Sizes:
    Strings     1251
    Constant    27
    Data        8
    BSS         120
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     90     125
    BANK0           128     90     128
    BANK1           256      0      55
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_62(CODE[4]), STR_61(CODE[4]), STR_60(CODE[4]), STR_59(CODE[4]), 
		 -> STR_58(CODE[4]), STR_57(CODE[4]), STR_56(CODE[4]), STR_55(CODE[4]), 
		 -> STR_54(CODE[4]), STR_53(CODE[4]), STR_52(CODE[4]), STR_51(CODE[4]), 
		 -> STR_20(CODE[4]), STR_19(CODE[4]), STR_18(CODE[4]), STR_17(CODE[4]), 
		 -> STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[4]), STR_13(CODE[4]), 
		 -> STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[4]), 
		 -> STR_8(CODE[4]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_120(CODE[7]), count_total(BANK0[2]), printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_119(CODE[18]), STR_118(CODE[18]), STR_117(CODE[18]), STR_116(CODE[18]), 
		 -> STR_115(CODE[17]), STR_114(CODE[17]), STR_113(CODE[11]), STR_112(CODE[18]), 
		 -> STR_111(CODE[18]), STR_110(CODE[17]), STR_109(CODE[15]), STR_108(CODE[15]), 
		 -> STR_107(CODE[15]), STR_106(CODE[17]), STR_105(CODE[17]), STR_104(CODE[17]), 
		 -> STR_103(CODE[16]), STR_102(CODE[17]), STR_101(CODE[17]), STR_100(CODE[17]), 
		 -> STR_99(CODE[17]), STR_98(CODE[17]), STR_97(CODE[17]), STR_96(CODE[15]), 
		 -> STR_95(CODE[11]), STR_94(CODE[17]), STR_93(CODE[11]), STR_92(CODE[17]), 
		 -> STR_91(CODE[14]), STR_90(CODE[15]), STR_89(CODE[14]), STR_88(CODE[10]), 
		 -> STR_87(CODE[9]), STR_86(CODE[9]), STR_85(CODE[10]), STR_84(CODE[10]), 
		 -> STR_83(CODE[16]), STR_82(CODE[15]), STR_81(CODE[3]), STR_80(CODE[15]), 
		 -> STR_79(CODE[13]), STR_78(CODE[14]), STR_77(CODE[8]), STR_76(CODE[14]), 
		 -> STR_75(CODE[15]), STR_74(CODE[12]), STR_73(CODE[14]), STR_72(CODE[17]), 
		 -> STR_71(CODE[14]), STR_70(CODE[15]), STR_69(CODE[17]), STR_68(CODE[17]), 
		 -> STR_67(CODE[7]), STR_66(CODE[21]), STR_65(CODE[13]), STR_64(CODE[11]), 
		 -> STR_63(CODE[24]), STR_50(CODE[17]), STR_49(CODE[17]), STR_48(CODE[17]), 
		 -> STR_47(CODE[17]), STR_46(CODE[17]), STR_45(CODE[17]), STR_44(CODE[17]), 
		 -> STR_43(CODE[17]), STR_42(CODE[17]), STR_41(CODE[17]), STR_40(CODE[17]), 
		 -> STR_39(CODE[17]), STR_38(CODE[17]), STR_37(CODE[17]), STR_36(CODE[17]), 
		 -> STR_35(CODE[17]), STR_34(CODE[17]), STR_33(CODE[17]), STR_32(CODE[17]), 
		 -> STR_31(CODE[17]), STR_30(CODE[17]), STR_29(CODE[3]), STR_28(CODE[17]), 
		 -> STR_27(CODE[17]), STR_26(CODE[17]), STR_25(CODE[17]), STR_24(CODE[17]), 
		 -> STR_23(CODE[14]), STR_22(CODE[10]), STR_21(CODE[24]), STR_7(CODE[7]), 
		 -> STR_6(CODE[17]), STR_5(CODE[18]), STR_4(CODE[16]), STR_3(CODE[18]), 
		 -> STR_2(CODE[14]), STR_1(CODE[18]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _handler in COMRAM

    _handler->_printSortTimer
    i2_change_state_to_menu_start->i2_printRTC
    i2_printRTC->i2_printf
    i2_change_state_to_menu_22->i2_printf
    i2_change_state_to_menu_12->i2_printf
    _change_state_to_menu_23->i2_printf
    _change_state_to_menu_11->i2_printf
    _change_state_to_logs_34->i2_printf
    _change_state_to_logs_33->i2_printf
    _change_state_to_logs_23->i2_printf
    _change_state_to_logs_22->i2_printf
    _change_state_to_logs_12->i2_printf
    _change_state_to_logs_11->i2_printf
    _dispLogs->_retrieveLog
    _retrieveLog->i2___wmul
    _printSortTimer->i2_printf
    i2_printf->i2___lwdiv
    i2_putch->i2_lcdNibble
    i2___lwdiv->i2___lwmod
    i2_lcdInst->i2_lcdNibble
    i2_getRTC->i2_I2C_Master_Read
    i2_getRTC->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_UI
    _sort->_Loading
    _Loading->_EEPROM_write
    _initSortTimer->_getRTC
    _getIR->_readIR
    _readIR->_readADC
    _ID->_getMAG
    _getMAG->_readMAG
    _Distribution->_updateServoPosition
    _logRun->_EEPROM_write
    _EEPROM_write->_printf
    _loadRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _change_state_to_menu_start->_printRTC
    _initLCD->_lcdInst
    _UI->_printRTC
    _printRTC->_printf
    _getRTC->_I2C_Master_Read
    _getRTC->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _change_state_to_menu_22->_printf
    _change_state_to_menu_12->_printf
    ___awdiv->___awmod
    _Test->_actuatorTest
    _sensorTest->_printf
    _readMAG->_readADC
    _algorithmTest->_printf
    _actuatorTest->_printf
    _SpeedTest->_printf
    _PusherTest->_printf
    _PortTestA5->_printf
    _BothServos->_printf
    _initServos->_updateServoPosition
    _BlockerTest->_printf
    _printf->___awdiv
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble

Critical Paths under _handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  195376
                    _I2C_Master_Init
                               _Test
                                 _UI
                            _initLCD
                           _initTime
                             _initUI
                             _logRun
                      _machineConfig
                               _sort
                        _stopSignals
 ---------------------------------------------------------------------------------
 (1) _stopSignals                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _sort                                                 0     0      0   22341
                       _Distribution
                                 _ID
                            _Loading
 ---------------------------------------------------------------------------------
 (2) _Loading                                              9     9      0   16904
                                             49 BANK0      9     9      0
                        _EEPROM_read
                       _EEPROM_write
                           _delay_ms
                              _getIR
                     _initGlobalVars
                         _initServos
                      _initSortTimer
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _initSortTimer                                        5     5      0     631
                                              5 BANK0      5     5      0
                             _getRTC
 ---------------------------------------------------------------------------------
 (3) _initGlobalVars                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _getIR                                                2     2      0      45
                                              6 BANK0      2     2      0
                             _readIR
 ---------------------------------------------------------------------------------
 (4) _readIR                                               4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             2     2      0      23
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _ID                                                   8     8      0     184
                                              8 BANK0      8     8      0
                             _getMAG
 ---------------------------------------------------------------------------------
 (3) _getMAG                                               2     2      0      45
                                              6 BANK0      2     2      0
                            _readMAG
 ---------------------------------------------------------------------------------
 (2) _Distribution                                         2     2      0    5253
                                              8 BANK0      2     2      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (1) _machineConfig                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _logRun                                              10    10      0   10978
                                             49 BANK0     10    10      0
                        _EEPROM_read
                       _EEPROM_write
 ---------------------------------------------------------------------------------
 (3) _EEPROM_write                                         6     3      3   10231
                                             43 BANK0      6     3      3
                        _EEPROM_read
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _EEPROM_read                                          2     0      2     426
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _initUI                                               0     0      0   22352
         _change_state_to_menu_start
                            _loadRTC
 ---------------------------------------------------------------------------------
 (2) _loadRTC                                              3     3      0     914
                                             21 BANK0      3     3      0
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Init                                      8     4      4     440
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     290
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_start                           0     0      0   21438
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initTime                                             7     1      6     538
                                              0 BANK0      7     1      6
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _UI                                                  24    24      0   44456
                                             68 BANK0     22    22      0
                            ___awdiv
                            ___awmod
            _change_state_to_menu_12
            _change_state_to_menu_22
                            _lcdInst
                           _printRTC
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _printRTC                                            25    25      0   12903
                                             43 BANK0     25    25      0
                             _getRTC
                            _lcdInst
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    3275
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _getRTC                                               2     2      0     519
                                              3 BANK0      2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     2     0      2     406
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_22                              0     0      0    8535
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_12                              0     0      0    8535
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    1064
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     556
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _Test                                                 2     2      0   94136
                                             70 BANK0      2     2      0
                        _BlockerTest
                         _BothServos
                         _EEPROMTest
                         _PortTestA5
                          _PortTests
                         _PusherTest
                          _SpeedTest
                       _actuatorTest
                      _algorithmTest
                            _lcdInst
                             _printf
                         _sensorTest
 ---------------------------------------------------------------------------------
 (2) _sensorTest                                           4     4      0    8647
                                             43 BANK0      4     4      0
                            _lcdInst
                             _printf
                            _readADC
                            _readMAG
 ---------------------------------------------------------------------------------
 (4) _readMAG                                              4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (5) _readADC                                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _algorithmTest                                        2     2      0    8535
                                             43 BANK0      2     2      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _actuatorTest                                        27    27      0   15031
                                             43 BANK0     27    27      0
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (2) _SpeedTest                                            1     1      0    8535
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PusherTest                                           5     5      0    8627
                                             43 BANK0      5     5      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PortTests                                            2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _PortTestA5                                           1     1      0    8535
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _EEPROMTest                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _BothServos                                           2     2      0   19041
                                             43 BANK0      2     2      0
                         _initServos
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (3) _initServos                                           1     1      0    5253
                                              8 BANK0      1     1      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (4) _updateServoPosition                                  8     4      4    5253
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _BlockerTest                                          5     5      0    8650
                                             43 BANK0      5     5      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _printf                                              33    21     12    8400
                                             14 BANK0     29    17     12
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     669
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     515
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     442
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _handler                                             16    16      0   76936
                                             74 COMRAM    16    16      0
                     _printSortTimer
                         _updateMenu
 ---------------------------------------------------------------------------------
 (8) _updateMenu                                           2     2      0   71999
                                             66 COMRAM     2     2      0
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
                           _dispLogs
                       _inputHandler
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_start                         0     0      0    7744
                          i2_lcdInst
                         i2_printRTC
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printRTC                                         25    25      0    4605
                                             41 COMRAM    25    25      0
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
                           i2_strcpy
 ---------------------------------------------------------------------------------
 (11) i2_strcpy                                            6     2      4     699
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _inputHandler                                         4     2      2   31390
                                             41 COMRAM     4     2      2
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_22                            0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_12                            0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_23                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_11                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_34                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_33                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_23                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_22                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_12                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_11                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) _dispLogs                                             2     0      2    1475
                                             17 COMRAM     2     0      2
                        _retrieveLog
 ---------------------------------------------------------------------------------
 (10) _retrieveLog                                        11     9      2    1047
                                              6 COMRAM    11     9      2
                      i2_EEPROM_read
                           i2___wmul
 ---------------------------------------------------------------------------------
 (11) i2_EEPROM_read                                       2     0      2     174
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _printSortTimer                                      33    33      0    4937
                                             41 COMRAM    33    33      0
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printf                                           33    21     12    3004
                                             12 COMRAM    29    17     12
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (11) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (11) i2___wmul                                            6     2      4     469
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (11) i2___lwmod                                           5     1      4     367
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (11) i2___lwdiv                                           7     3      4     318
                                              5 COMRAM     7     3      4
                          i2___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (11) i2_lcdInst                                           1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (12) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (11) i2_getRTC                                            2     2      0     213
                                              3 COMRAM     2     2      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Write                                  2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Stop                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Start                                  0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Read                                   2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (13) i2_I2C_Master_Wait                                   1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _Test
     _BlockerTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _BothServos
       _initServos
         _updateServoPosition
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _EEPROMTest
     _PortTestA5
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _PortTests
     _PusherTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _SpeedTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _actuatorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _algorithmTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _sensorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
       _readMAG
         _readADC
   _UI
     ___awdiv
       ___awmod (ARG)
     ___awmod
     _change_state_to_menu_12
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _change_state_to_menu_22
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printRTC
       _getRTC
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _strcpy
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _strcpy
   _initLCD
     _lcdInst
       _lcdNibble
   _initTime
   _initUI
     _change_state_to_menu_start
       _lcdInst
         _lcdNibble
       _printRTC
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
         _strcpy
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _loadRTC
       _I2C_Master_Init
         ___lldiv
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _logRun
     _EEPROM_read
     _EEPROM_write
       _EEPROM_read
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
   _machineConfig
   _sort
     _Distribution
       _updateServoPosition
     _ID
       _getMAG
         _readMAG
           _readADC
     _Loading
       _EEPROM_read
       _EEPROM_write
         _EEPROM_read
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
       _delay_ms
       _getIR
         _readIR
           _readADC
       _initGlobalVars
       _initServos
         _updateServoPosition
       _initSortTimer
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _lcdInst
         _lcdNibble
   _stopSignals

 _handler (ROOT)
   _printSortTimer
     i2___lwdiv
       i2___lwmod (ARG)
     i2___lwmod
     i2___wmul
     i2_getRTC
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _updateMenu
     _change_state_to_logs_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_33
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_34
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _dispLogs
       _retrieveLog
         i2_EEPROM_read
         i2___wmul
     _inputHandler
       _change_state_to_logs_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_33
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_34
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
     i2_change_state_to_menu_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_start
       i2_lcdInst
         i2_lcdNibble
       i2_printRTC
         i2_getRTC
           i2_I2C_Master_Read
             i2_I2C_Master_Wait
           i2_I2C_Master_Start
             i2_I2C_Master_Wait
           i2_I2C_Master_Stop
             i2_I2C_Master_Wait
           i2_I2C_Master_Write
             i2_I2C_Master_Wait
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
         i2_strcpy
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      37       7       21.5%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     5A      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     5A      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     134      34        0.0%
DATA                 0      0     134       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Sat Mar 25 11:43:35 2017

                                    _i 012D                     i2_I2C_Master_Start 4A08  
                   i2_I2C_Master_Write 49DE                                     l66 4976  
                                   _ID 3290                            __CFG_CPD$ON 000000  
                                   _UI 08CA                           ___awdiv@sign 008B  
                                   _up 0077                    ___wmul@multiplicand 0082  
                   i2___lwdiv@dividend 0006                            __CFG_BORV$3 000000  
                   EEPROM_read@address 0080                           __CFG_CP0$OFF 000000  
                         __CFG_CP1$OFF 000000                           __CFG_CP2$OFF 000000  
                         __CFG_CP3$OFF 000000                                    ID@i 008E  
                                  ?_ID 0001                                    ?_UI 0001  
                                  UI@i 00C8                                    l180 09A0  
                                  l602 204E                                    l730 2DF0  
                                  l803 3E5A                                    l750 3358  
                                  l751 3372                                    l487 38A0  
                                  l739 2E9C                                    l950 4942  
                                  l937 34DC                                    l959 3154  
                         __CFG_CPB$OFF 000000                                    _PEN 007E2A  
                                  _SEN 007E28                    ?i2_I2C_Master_Start 0001  
                       ?_machineConfig 0001                    ?i2_I2C_Master_Write 0002  
                                  _log 00E6                                    _sel 00FD  
                                  _var 00FA                           ___awmod@sign 0085  
                                  wreg 000FE8                    i2printRTC@RTC_month 003B  
                  __end_of_BlockerTest 3806                    _log_count_can_w_lab 00EC  
      __end_of_change_state_to_menu_11 4614        __end_of_change_state_to_menu_12 4484  
      __end_of_change_state_to_menu_22 444C        __end_of_change_state_to_menu_23 45E4  
         _f_can_coming_to_distribution 006F                         ??_Distribution 0088  
      __end_of_change_state_to_logs_11 4704        __end_of_change_state_to_logs_12 46D4  
      __end_of_change_state_to_logs_22 46A4        __end_of_change_state_to_logs_23 478E  
      __end_of_change_state_to_logs_33 4674        __end_of_change_state_to_logs_34 4644  
                                 ??_ID 0088                                   ??_UI 00C4  
                         __CFG_LVP$OFF 000000                           __CFG_WDT$OFF 000000  
                                 l1110 007C                                   l1120 018C  
                                 l1121 01DA                                   l1113 0080  
                                 l1122 0240                                   l1123 028E  
                                 l1051 3404                                   l1204 4148  
                                 l1212 36A2                                   l1117 0126  
                                 l1054 3424                                   l1223 371E  
                                 l1225 3738                                   l1219 36DA  
                                 l1147 05E8                                   l1075 35FC  
                                 l1308 13B6                                   l1164 0858  
                                 l1084 1CF8                                   l1181 3D3E  
                                 l1254 3CF2                                   l1078 3600  
                                 l1183 3D42                                   l1247 3CE2  
                                 l1159 0782                                   l1087 1CFC  
                                 l1272 37D4                                   l1264 378C  
                                 l1184 3D46                                   l1273 37EE  
                                 l1185 3D4A                                   l1177 3D22  
                                 l1274 3800                                   l1186 3D4E  
                                 l1187 3D52                                   l1189 3D90  
                                 l1198 4138                                   l1702 3A2E  
                                 l6000 20D0                                   l6010 2166  
                                 l6002 20EE                                   l1755 3E14  
                                 l6012 2184                                   l6004 210C  
                                 l6020 221E                                   l1765 402E  
                                 l6014 21A2                                   l6006 212A  
                                 l7000 0398                                   l5400 47CE  
                                 l6008 2148                                   l7010 03C0  
                                 l5402 47E0                                   l6018 21C0  
                                 l6202 3544                                   l6210 3566  
                                 l7100 059E                                   l7004 03B0  
                                 l7110 05C6                                   l7030 0434  
                                 l7022 0412                                   l7014 03D8  
                                 l7006 03B6                                   l6214 357C  
                                 l6206 354E                                   l5600 11A4  
                                 l7104 05A8                                   l7040 045C  
                                 l7032 043A                                   l5424 4758  
                                 l6224 4816                                   l6160 3A64  
                                 l5442 4806                                   l5610 11E2  
                                 l7114 05D0                                   l7026 041C  
                                 l6218 3586                                   l5460 3DD0  
                                 l5700 14C8                                   l5604 11AE  
                                 l7132 063A                                   l7108 05C0  
                                 l7052 04A0                                   l7036 0444  
                                 l6228 482C                                   l6156 3A4E  
                                 l5470 3E06                                   l5462 3DD6  
                                 l5630 12A2                                   l7310 3D1A  
                                 l7222 07F4                                   l7214 07D2  
                                 l7142 0662                                   l7062 04C8  
                                 l6166 3ADA                                   l5480 3FF6  
                                 l5712 150A                                   l5640 131A  
                                 l7232 081C                                   l7224 07FA  
                                 l7136 0652                                   l7128 0630  
                                 l7056 04B8                                   l7048 0496  
                                 l6344 3BCE                                   l6256 4248  
                                 l5458 3DC4                                   l5482 3FFC  
                                 l5722 157C                                   l5706 14E4  
                                 l5642 1332                                   l5626 1290  
                                 l5618 125E                                   l7330 36C4  
                                 l7250 0878                                   l7218 07DC  
                                 l7162 06D6                                   l7154 06B4  
                                 l7146 067A                                   l7138 0658  
                                 l7082 053C                                   l7074 051A  
                                 l7066 04E0                                   l7058 04BE  
                                 l5730 449A                                   l6354 3C10  
                                 l5708 14F0                                   l5716 151E  
                                 l5636 1308                                   l5628 129C  
                                 l5652 137C                                   l5724 1588  
                                 l7340 36F4                                   l7260 08A0  
                                 l7228 0804                                   l7180 0738  
                                 l7172 06FE                                   l7164 06DC  
                                 l7092 0564                                   l7084 0542  
                                 l5740 3C6E                                   l6348 3BE4  
                                 l5486 4020                                   l5478 3FEA  
                                 l5718 1524                                   l5670 140E  
                                 l5646 135E                                   l5638 1314  
                                 l7254 0882                                   l7238 0842  
                                 l7190 0760                                   l7158 06BE  
                                 l7078 0524                                   l8222 310E  
                                 l6606 2EB6                                   _ADIE 007CEE  
                                 l5664 13EE                                   l5648 1376  
                                 l7344 3708                                   l7264 08AA  
                                 l7248 0872                                   l7184 0742  
                                 l7168 06E6                                   l7088 054C  
                                 l7520 3922                                   l7512 38F8  
                                 l5736 3C58                                   l5728 448E  
                                 l6632 3310                                   l6560 2DAE  
                                 l5682 144A                                   l5594 117E  
                                 l7258 089A                                   l7194 076A  
                                 l6802 1E54                                   l8234 33A6  
                                 l7530 3958                                   l7522 3928  
                                 l7506 38E2                                   l5746 3C8E  
                                 l5692 14A4                                   l5668 1408  
                                 l5764 3E46                                   l7268 08C2  
                                 l7188 075A                                   l6820 1EE2  
                                 l8260 3442                                   l8252 342A  
                                 l5780 39C2                                   l6644 3342  
                                 l6628 3302                                   l6572 2E14  
                                 l8340 387A                                   l8332 3850  
                                 l5694 14AE                                   l5598 1192  
                                 l5766 3E70                                   l7358 3D56  
                                 l8270 3460                                   l8262 3448  
                                 l8254 3430                                   l7518 3916  
                                 l7534 3966                                   l7550 3B06  
                                 l7702 0B22                                   l7622 09B8  
                                 l5790 3A1C                                   l5782 39C8  
                                 l6670 2796                                   l6638 332A  
                                 l8350 3896                                   l8342 3880  
                                 l8334 3866                                   l5688 146C  
                                 l6840 1F5A                                   l6832 1F48  
                                 l6808 1E96                                   l8264 344E  
                                 l8256 3436                                   l7560 3B36  
                                 l7640 0A04                                   l7632 09DA  
                                 l7624 09BE                                   l6672 27B0  
                                 l8352 389C                                   l8266 3454  
                                 l8258 343C                                   l8274 3466  
                                 l7538 397A                                   l7562 3B3C  
                                 l7570 3B6E                                   l7554 3B16  
                                 l7802 0EDE                                   l7730 0C04  
                                 l7722 0B8C                                   l7706 0B3A  
                                 l5778 39B2                                   l6682 282E  
                                 l6666 2762                                   l8338 3874  
                                 l7484 37B4                                   l6844 1F90  
                                 l6828 1F12                                   l6772 1D4C  
                                 l8268 345A                                   l7900 10A2  
                                 l7820 0F2A                                   l7812 0F08  
                                 l7740 0C9A                                   l7732 0C22  
                                 l7724 0BAA                                   l7660 0A6C  
                                 l7636 09F2                                   l7628 09D0  
                                 l8196 307A                                   l6684 2848  
                                 l6692 2896                                   l6668 277C  
                                 l6676 27CA                                   l6596 2E86  
                                 l6588 2E4E                                   l8356 38A2  
                                 l7486 37BE                                   l6790 1E04  
                                 l7574 3B82                                   l7566 3B60  
                                 l7558 3B2A                                   l7806 0EF6  
                                 l7742 0CB8                                   l7734 0C40  
                                 l7726 0BC8                                   l7750 0D12  
                                 l7654 0A5C                                   l7670 0A92  
                                 l8198 308E                                   l6686 2862  
                                 l6694 28C4                                   l6678 27F8  
                                 l7496 37F0                                   l5992 2058  
                                 l7816 0F12                                   l7760 0DC2  
                                 l7744 0CD6                                   l7736 0C5E  
                                 l7728 0BE6                                   l7752 0D76  
                                 l7664 0A84                                   l7656 0A62  
                                 l6688 287C                                   l6970 030A  
                                 l6890 00FA                                   l5994 2076  
                                 l5986 1FCC                                   l7922 110A  
                                 l7842 0F9A                                   l7770 0DEC  
                                 l7746 0CF4                                   l7738 0C7C  
                                 l6980 0332                                   l6884 00EA  
                                 l5996 2094                                   l7940 1156  
                                 l7932 1134                                   l7860 0FE6  
                                 l7852 0FC4                                   l7764 0DDA  
                                 l7756 0DB8                                   l7692 0B06  
                                 l7684 0AE4                                   l6974 0314  
                                 l6894 0112                                   l6886 00F0  
                                 l5998 20B2                                   l7926 1122  
                                 l7918 1100                                   l7846 0FB2  
                                 l7838 0F90                                   l7774 0DF6  
                                 l6984 033C                                   l7936 113E  
                                 l7856 0FCE                                   l7688 0AEE  
                                 l7944 1162                                   l6978 032C  
                                 l7882 1056                                   l7778 0E0E  
                                 l7698 0B18                                   l6996 038E  
                                 l6988 0354                                   l7892 1080  
                                 l7886 106E                                   l7878 104C  
                                 l7798 0ED4                                   l7896 108A  
                                 STR_1 FBA3                                   STR_2 FF27  
                                 STR_3 FB91                                   STR_4 FE4A  
                                 STR_5 FB91                                   STR_6 FDE6  
                                 STR_7 FFC4                                   STR_8 FFDB  
                                 STR_9 FFCB                                   _LATA 000F89  
                                 _LATB 000F8A                                   _LATC 000F8B  
                                 u4000 12DC                                   _LATD 000F8C  
                                 _LATE 000F8D                                   u4007 12D2  
                                 u4040 1354                                   u4047 134A  
                                 u5220 1F36                                   u5060 32CE  
                                 u6031 37AA                                   u6040 37AC  
                                 u5320 0126                                   u3720 4756  
                                 u5250 1F7E                                   _PEIE 007F96  
                                 u5340 01DA                                   u5228 1F3A  
                                 u5180 1D8E                                   u5068 32D2  
                                 u5190 1D90                                   u4630 204E  
                                 u4615 4068                                   u5360 028E  
                                 u3920 4336                                   u5258 1F82  
                                 u7130 3154                                   u3930 4338  
                                 u3940 4382                                   _RCEN 007E2B  
                                 u3941 437E                                   u3950 4384  
                                 u8007 01EA                                   u8017 0250  
                                 u8107 04A8                                   u8027 026E  
                                 u8117 04D0                                   u8037 029E  
                                 u8207 074A                                   u8127 052C  
                                 u8047 031C                                   u7407 32A6  
                                 u4960 2DBA                                   u8217 0772  
                                 u8137 0554                                   u8057 0344  
                                 u7417 335C                                   u7337 2D3E  
                                 i2l66 498A                                   u8307 3CFC  
                                 u8227 0794                                   u8147 05B0  
                                 u8067 03A0                                   u7507 358E  
                                 u7427 3366                                   u7347 2E04  
                                 u4980 2DF0                                   u8317 3D10  
                                 u8237 07E4                                   u8157 05D8  
                                 u8077 03C8                                   u7517 4394  
                                 u7437 338C                                   u7357 2E6E  
                                 u8407 164E                                   u8327 3682  
                                 u8247 080C                                   u8167 0642  
                                 u8087 0424                                   u7607 0B54  
                                 u7527 43C8                                   u7447 450E  
                                 u7367 2EA0                                   u8417 1682  
                                 u8337 36DE                                   u8257 085C  
                                 u8177 066A                                   u8097 044C  
                                 u7617 0DCA                                   u7537 08E2  
                                 u7457 281E                                   u7377 2EAA  
                                 u4978 2DBE                                   u8507 18B0  
                                 u8427 16B4                                   u8347 36E6  
                                 u8267 0866                                   u8187 06C6  
                                 u7707 105E                                   u7627 0DFE  
                                 u7547 09E2                                   u7467 28D2  
                                 u7387 421E                                   u8517 18E4  
                                 u8437 1700                                   u8357 3722  
                                 u8277 088A                                   u8197 06EE  
                                 u7717 1092                                   u7637 0E28  
                                 u7557 0A1E                                   u7477 2904  
                                 u7397 4822                                   u8607 3FCE  
                                 u8527 1916                                   u8447 1734  
                                 u8367 372C                                   u8287 08B2  
                                 u7807 1D3C                                   u7727 10BC  
                                 u7647 0EE6                                   u7567 0A74  
                                 u7487 34FA                                   u8537 4192  
                                 u8457 1766                                   u8377 4102  
                                 u8297 3CAC                                   u7817 1DA4  
                                 u7737 1112                                   u7657 0F1A  
                                 u7577 0AA0                                   u7497 3556  
                                 u8547 374C                                   u8467 17B2  
                                 u8387 15B6                                   u7907 35AC  
                                 u7827 1DF8                                   u7747 1146  
                                 u7667 0F44                                   u7587 0AF6  
                                 u8557 37D8                                   u8477 17FE  
                                 u8397 1602                                   u7917 35F0  
                                 u7837 1E18                                   u7757 33B4  
                                 u7677 0FA2                                   u7597 0B2A  
                                 u8567 37E2                                   u8487 1832  
                                 u7927 3612                                   u7847 1E46  
                                 u7767 33F8                                   u7687 0FD6  
                                 u8577 3F8E                                   u8497 1864  
                                 u7937 002C                                   u7857 1E8A  
                                 u7777 1CA8                                   u7697 1000  
                                 u8587 3F98                                   u7947 0070  
                                 u7867 1EA8                                   u7787 1CEC  
                                 u8597 3FC4                                   u7957 0092  
                                 u7877 1ED6                                   u7797 1D0E  
                                 u7967 0102                                   u7887 1EF0  
                                 u7977 0136                                   u7897 47D6  
                                 u7987 019C                                   u7997 01BA  
                                 _RSEN 007E29                            _stopSignals 494A  
                                 _Test 33A6                                   _back 005B  
                                 _main 3806                                   _down 0067  
                                 _keys FB01                                   _time 0124  
                                 fsr0h 000FEA                                   fsr1h 000FE2  
                   i2___lwdiv@quotient 000A                                   indf0 000FEF  
                                 fsr2h 000FDA                                   fsr0l 000FE9  
                                 indf2 000FDF                                   fsr1l 000FE1  
                                 fsr2l 000FD9                                   _sort 48D0  
                                 btemp 007E                   ??i2_I2C_Master_Start 0002  
                 ??i2_I2C_Master_Write 0004                                   prodh 000FF4  
                                 prodl 000FF3                                   start 000E  
                        __CFG_IESO$OFF 000000                   _log_count_can_no_lab 00EA  
                      __end_ofi2_putch 49C8                    __size_of_EEPROMTest 0002  
                        __CFG_MCLRE$ON 000000                           ___param_bank 000000  
                           i2_printRTC 2522                            i2_lcdNibble 41AA  
                      __end_of_Loading 2EC0                   __end_of_actuatorTest 08CA  
                     ?_I2C_Master_Init 008D                       ?_I2C_Master_Read 0001  
                     ?_I2C_Master_Wait 0001            ??i2_change_state_to_menu_12 002A  
          ??i2_change_state_to_menu_22 002A                       ?_I2C_Master_Stop 0001  
                                ?_Test 0001                   __end_of_EEPROM_write 359E  
                                ?_main 0001                                  _ACKEN 007E2C  
                                _ACKDT 007E2D                        __end_of___awdiv 3984  
                                _EEADR 000FA9                                  STR_10 FFE7  
                                STR_11 FFEB                                  STR_12 FFFB  
                                STR_20 FFEF                                  STR_13 FFDF  
                                STR_21 FB1C                                  STR_14 FFD7  
                                STR_22 FF9B                                  STR_30 FDF7  
                                STR_15 FFD3                                  STR_23 FF19  
                                STR_31 FDD5                                  STR_16 FFE3  
                                STR_24 FD3C                                  STR_32 FD1A  
                                STR_40 FCD6                                  STR_17 FFF3  
                                STR_25 FE19                                  STR_33 FD2B  
                                STR_41 FCC5                                  STR_18 FFF7  
                                STR_34 FDC4                                  STR_50 FDA2  
                                STR_42 FD80                                  STR_26 FD4D  
                                STR_43 FD80                                  STR_35 FDC4  
                                STR_51 FFDB                                  STR_19 FFCF  
                                STR_27 FE08                                  STR_52 FFCB  
                                STR_60 FFF3                                  STR_28 FD5E  
                                STR_36 FD09                                  STR_44 FCE7  
                      __end_of___awmod 3B8C                                  STR_45 FCD6  
                                STR_37 FD1A                                  STR_53 FFE7  
                                STR_61 FFF7                                  STR_29 FE16  
                                STR_62 FFCF                                  STR_54 FFEB  
                                STR_70 FED2                                  STR_38 FDB3  
                                STR_46 FD91                                  STR_47 FD91  
                                STR_55 FFFB                                  STR_63 FB1C  
                                STR_71 FF0B                                  STR_39 FD6F  
                                STR_56 FFDF                                  STR_64 FF7C  
                                STR_80 FE5A                                  STR_48 FCF8  
                                STR_72 FC5F                                  STR_49 FCE7  
                                STR_57 FFD7                                  STR_81 FE16  
                                STR_65 FF42                                  STR_73 FEEF  
                                STR_58 FFD3                                  STR_74 FF4F  
                                STR_90 FEC3                                  STR_82 FE87  
                                STR_66 FB34                                  STR_59 FFE3  
                                STR_67 FFBD                                  STR_91 FEE1  
                                STR_75 FEB4                                  STR_83 FE2A  
                                STR_84 FF87                                  STR_76 FEFD  
                                STR_92 FC81                                  STR_68 FC70  
                                STR_85 FF87                                  STR_77 FFAE  
                                STR_93 FF5B                                  STR_69 FCA3  
                                STR_78 FF0B                                  STR_86 FFA5  
                                STR_94 FC92                                  STR_87 FFA5  
                                STR_95 FF66                                  STR_79 FF35  
                                STR_88 FF91                                  STR_96 FEA5  
                                STR_89 FF0B                                  STR_97 FC0A  
                                STR_98 FBF9                                  STR_99 FBD7  
                                ?_sort 0001                        __end_of___lldiv 3A40  
                                _T0CON 000FD5                        ___awdiv@divisor 0088  
                                _T1CON 000FCD                                  _T3CON 000FB1  
                      __end_of___lwdiv 3E1E                        __end_of___lwmod 4038  
                                i2l257 251E                                  i2l602 25B0  
                                i2l950 496E                                  i2l872 2FD2  
                                i2l874 2FF2                                  i2l868 2F86  
                      ___awdiv@counter 008A                                  _TMR0H 000FD7  
                                _TMR1H 000FCF                                  _TMR0L 000FD6  
                                _TMR3H 000FB3                                  _TMR1L 000FCE  
                                _TMR3L 000FB2                             _BothServos 15A8  
                                _PORTB 000F81                                  _TRISA 000F92  
                                _TRISB 000F93                                  _TRISC 000F94  
                                _TRISD 000F95                                  _TRISE 000F96  
                        __CFG_PWRT$OFF 000000                          __CFG_WRT0$OFF 000000  
                        __CFG_WRT1$OFF 000000                          __CFG_WRT2$OFF 000000  
                        __CFG_WRT3$OFF 000000                        __end_of_lcdInst 49BC  
                      __end_of_handler 302E                         __CFG_EBTR0$OFF 000000  
                       __CFG_FCMEN$OFF 000000                         __CFG_EBTR1$OFF 000000  
                       __CFG_EBTR2$OFF 000000                         __CFG_EBTR3$OFF 000000  
                                _nRBPU 007F8F                          __CFG_WRTB$OFF 000000  
                        __CFG_WRTC$OFF 000000                          __CFG_WRTD$OFF 000000  
                      __end_of_readADC 47E6                        __end_of_initLCD 43D2  
                       __CFG_EBTRB$OFF 000000                                  _debug 0065  
                           i2isdigit@c 0003                                  _getIR 4200  
                      __end_of_loadRTC 3C18                        __end_of_readMAG 438C  
                      __end_of_dpowers FB1C                                  _first 0073  
                                _enter 0069                        __end_of_isdigit 4810  
                                _input 007D                                  _putch 499C  
                                pclath 000FFA                                  tablat 000FF5  
                     __end_ofi2___wmul 4886                       __end_ofi2_getRTC 3F06  
                  _log_count_pop_w_tab 00F0                                  status 000FD8  
                       __CFG_PBADEN$ON 000000                          i2printf@width 0028  
                     __end_ofi2_printf 1C9A                     __size_ofi2___lwdiv 0052  
                   __size_ofi2___lwmod 0042                       __end_ofi2_strcpy 4554  
                          Loading@addr 00B3                       _count_can_no_lab 005D  
                 __size_of_EEPROM_read 0018                        __initialization 42A6  
                         __end_of_Test 34BA                     __size_ofi2_lcdInst 000C  
                         __end_of_main 38C6                           __end_of_keys FB12  
                         __end_of_sort 48F2                             i2printf@ap 0020  
                           i2printf@cp 001E                     __size_ofi2_isdigit 001E  
                     PusherTest@i_1696 00AE                            _BlockerTest 373E  
                               ??_Test 00C6    __size_of_change_state_to_menu_start 002C  
                      ??_machineConfig 0080                                 ??_main 00DA  
                               ??_sort 00BA                          __activetblptr 000003  
           updateServoPosition@my_time 0086             updateServoPosition@time_us 0080  
                           i2strcpy@cp 0005                             i2strcpy@to 0001  
                    ?_I2C_Master_Start 0001                    EEPROM_write@address 00AB  
               __size_ofi2_EEPROM_read 0016                      ?_I2C_Master_Write 0081  
                               ?_getIR 0001                     ??_I2C_Master_Start 0081  
                               _ADCON0 000FC2                                 _ADCON1 000FC1  
                   ??_I2C_Master_Write 0083                                 _ADCON2 000FC0  
                               STR_100 FC2C                                 STR_101 FC3D  
                               STR_110 FCB4                                 STR_102 FBB5  
                               STR_103 FE3A                                 STR_111 FB49  
                               STR_120 FFB6                                 STR_104 FBE8  
                               STR_112 FB5B                                 STR_113 FF71  
                               STR_105 FBC6                                 STR_106 FBE8  
                               STR_114 FC1B                                 _ADRESH 000FC4  
                               STR_107 FE96                                 STR_115 FC4E  
                               STR_108 FE78                                 STR_116 FB6D  
                               _EEADRH 000FAA                                 STR_117 FB5B  
                               STR_109 FE69                                 STR_118 FB49  
                               _ADRESL 000FC3                                 STR_119 FB7F  
                               _EEDATA 000FA8                                 _EECON2 000FA7  
                     ___awdiv@dividend 0086                        i2lcdNibble@data 0002  
                               ?_putch 0001                 __size_of_initSortTimer 00AA  
                      i2lcdNibble@temp 0001              i2_change_state_to_menu_12 4584  
            i2_change_state_to_menu_22 4554                                 _INT1IE 007F83  
                               _INT1IF 007F80                                 _CVRCON 000FB5  
                               i2l1308 1B06                                 i2l1755 429C  
                               i2l1765 440A                                 i2l6140 3244  
                               i2l5510 48A6                                 i2l6310 2612  
                               i2l6302 25BA                                 i2l6136 3234  
                               i2l6320 2680                                 i2l6312 2628  
                               i2l6304 25D0                                 i2l8000 2318  
                               i2l6410 2B8A                                 i2l6322 2696  
                               i2l6314 263E                                 i2l6306 25E6  
                               i2l6330 271C                                 i2l6148 3278  
                               i2l6420 2BA8                                 i2l6324 26AC  
                               i2l6316 2654                                 i2l6308 25FC  
                               i2l8100 24A6                                 i2l8020 2366  
                               i2l8012 2342                                 i2l8004 2326  
                               i2l5534 492A                                 i2l6510 2CEC  
                               i2l6502 2CC8                                 i2l6430 2BC6  
                               i2l6422 2BAE                                 i2l6406 2B76  
                               i2l6318 266A                                 i2l5544 426A  
                               i2l6424 2BB4                                 i2l6408 2B86  
                               i2l6416 2B94                                 i2l6328 26C2  
                               i2l8040 23B4                                 i2l8032 2390  
                               i2l8024 2374                                 i2l8016 2350  
                               i2l8008 2334                                 i2l5802 3ECC  
                               i2l5546 4272                                 i2l6506 2CDA  
                               i2l6426 2BBA                                 i2l6434 2BCC  
                               i2l8106 24B4                                 i2l5812 3EF6  
                               i2l5556 4292                                 i2l5548 4276  
                               i2l5572 4400                                 i2l5564 43E0  
                               i2l5900 1B34                                 i2l6460 2C36  
                               i2l6428 2BC0                                 i2l6516 2CF6  
                               i2l8060 2402                                 i2l8052 23E6  
                               i2l8044 23C2                                 i2l8036 23A6  
                               i2l8028 2382                                 i2l5806 3EDC  
                               i2l5566 43E8                                 i2l5830 1936  
                               i2l6470 2C5C                                 i2l6454 2C28  
                               i2l6446 2C10                                 i2l5568 43EC  
                               i2l5904 1B4C                                 i2l5840 195A  
                               i2l8304 2A84                                 i2l6480 2C7E  
                               i2l6464 2C52                                 i2l6296 254E  
                               i2l8080 2450                                 i2l8072 2434  
                               i2l8064 2410                                 i2l8056 23F4  
                               i2l8048 23D0                                 i2l5930 1BC8  
                               i2l5906 1B50                                 i2l5834 1946  
                               i2l6474 2C70                                 i2l8410 2FA6  
                               i2l5924 1B9C                                 i2l5836 1954  
                               i2l6476 2C74                                 i2l8092 2482  
                               i2l8084 2466                                 i2l8076 2442  
                               i2l8068 2426                                 i2l5942 1BF4  
                               i2l5918 1B82                                 i2l5862 1A16  
                               i2l5854 19EE                                 i2l5846 198C  
                               i2l6494 2CA4                                 i2l6398 2B5C  
                               i2l5944 1BFC                                 i2l5952 1C22  
                               i2l5936 1BDE                                 i2l5928 1BC0  
                               i2l5872 1A6E                                 i2l5864 1A20  
                               i2l5960 1C7E                                 i2l6488 2C96  
                               i2l8096 2490                                 i2l8088 2474  
                               i2l8432 2FF0                                 i2l8408 2FA4  
                               i2l5954 1C28                                 i2l5882 1ABA  
                               i2l5874 1A78                                 i2l5866 1A24  
                               i2l6498 2CB6                                 i2l8370 2F3A  
                               i2l5948 1C10                                 i2l5884 1ACC  
                               i2l5876 1A7E                                 i2l8284 2958  
                               i2l5964 452C                                 i2l8372 2F3E  
                               i2l5958 1C76                                 i2l5878 1A90  
                               i2l8294 29C2                                 i2l5966 4534  
                               i2l5888 1AD0                                 i2l8288 2968  
                               i2l8386 2F5A                                 i2l8750 2BE4  
                               i2l8742 24D2                                 i2l8752 2C00  
                               i2l8744 24F4                                 i2l7960 2298  
                               i2l8746 2510                                 i2l7972 22C2  
                               i2l7964 22A6                                 i2l7958 2292  
                               i2l7992 22FA                                 i2l7984 22DE  
                               i2l7976 22D0                                 i2l7968 22B4  
                               i2l7996 230A                                 i2l7988 22EC  
                               _OSCCON 000FD3                                 _TMR0IE 007F95  
                               _TMR0IF 007F92                              ??i2_putch 0003  
                               _TMR1IE 007CE8                                 _TMR1IF 007CF0  
                               _TMR2IE 007CE9                                 _TMR3IE 007D01  
                               _TMR3IF 007D09                                 _TMR0ON 007EAF  
                               _TMR1ON 007E68                                 _TMR3ON 007D88  
                               _SSPADD 000FC8                                 _TRISC3 007CA3  
                               _TRISC4 007CA4                                 _SSPBUF 000FC9  
                            ??_Loading 00B1                       __end_of_delay_ms 4838  
                 delay_ms@milliseconds 0081                         __CFG_XINST$OFF 000000  
                     ID@sensor_outputs 008A                       __end_of_dispLogs 48D0  
                          ?i2_printRTC 0001                       retrieveLog@byte1 000B  
                     retrieveLog@byte2 000C                       retrieveLog@byte3 000D  
                 __end_of_Distribution 294C                                 ___wmul 44BA  
                            ??___awdiv 008A                         __CFG_STVREN$ON 000000  
                               _getMAG 44F0                              ??___awmod 0084  
                          logRun@byte1 00B2                            logRun@byte2 00B3  
                          logRun@byte3 00B4                                 _getRTC 3C18  
                            ??___lldiv 0088                              ??___lwdiv 0084  
                            ??___lwmod 008B                       ??_printSortTimer 002A  
                     __end_of_initTime 4914                                 _initUI 4704  
                               _readIR 42F4                                 _logRun 302E  
                               clear_0 42CC                                 clear_1 42D8  
                               clear_2 42E4                       ___awdiv@quotient 008C  
                      ___awmod@divisor 0082                             _PortTestA5 40F4  
                      ___awmod@counter 0084                              ??_lcdInst 0082  
                               _printf 1170                              ??_handler 004B  
              __size_of_initGlobalVars 0068                           ?_retrieveLog 0007  
                               _strcpy 4484                     __size_of_SpeedTest 0084  
                            ??_readADC 0080                              ??_initLCD 0083  
                            ??_loadRTC 0095                              ??_readMAG 0082  
 __end_ofi2_change_state_to_menu_start 4860  __size_ofi2_change_state_to_menu_start 0028  
         i2_change_state_to_menu_start 4838                            ?_BothServos 0001  
                         ??_EEPROMTest 0080                              ??_isdigit 0080  
                   __size_of_PortTests 0084                      __end_ofi2___lwdiv 42A6  
                     __end_of_printRTC 2262                           __mediumconst FB00  
                    __end_ofi2___lwmod 4414                                 tblptrh 000FF7  
                               tblptrl 000FF6                                 tblptru 000FF8  
                 _log_count_pop_no_tab 00EE                  __end_of_algorithmTest 3674  
                    __end_ofi2_lcdInst 49D4                             _PusherTest 3674  
                    __end_ofi2_isdigit 4932                             __accesstop 0080  
              __end_of__initialization 42EA                          ?_inputHandler 002A  
                        ___rparam_used 000001                printSortTimer@start_sec 003D  
                __size_of_actuatorTest 08B8                          i2_EEPROM_read 4960  
                         Loading@byte1 00B5                     i2___lwmod@dividend 0001  
                   __end_of_EEPROMTest 4A12                         __pcstackCOMRAM 0001  
                __size_of_EEPROM_write 00E4                           __pidataBANK1 49E8  
                        __end_of_getIR 4254                            i2printRTC@i 0041  
                        _initSortTimer 3A40            __end_of_updateServoPosition 3E94  
                        __end_of_putch 49AC                            i2printf@len 0022  
                          i2printf@val 0024                             __end_of_ID 33A6  
                           __end_of_UI 1170                     printSortTimer@hour 002D  
                            ?i2___wmul 0001                     __size_of_lcdNibble 0068  
                            ?i2_getRTC 0001                            i2putch@data 0003  
                printSortTimer@curTime 002F     __end_of_change_state_to_menu_start 47BA  
        ?i2_change_state_to_menu_start 0001             _change_state_to_menu_start 478E  
                printSortTimer@cur_sec 003F                              ?i2_printf 000D  
                              ??_getIR 0086                              ?i2_strcpy 0001  
                     _count_pop_no_tab 0061                    __size_ofi2_printRTC 0236  
                              ??_putch 0082                           _actuatorTest 0012  
                           __pbssBANK0 00DA                             __pbssBANK1 0100  
                         ?_stopSignals 0001                         ??_inputHandler 002C  
                         _EEPROM_write 34BA               ?_change_state_to_menu_11 0001  
             ?_change_state_to_menu_12 0001                                UI@F3225 012F  
             ?_change_state_to_menu_22 0001               ?_change_state_to_menu_23 0001  
                    __end_of_SpeedTest 3D22                         ?i2_EEPROM_read 0001  
             ?_change_state_to_logs_11 0001               ?_change_state_to_logs_12 0001  
             ?_change_state_to_logs_22 0001               ?_change_state_to_logs_23 0001  
             ?_change_state_to_logs_33 0001               ?_change_state_to_logs_34 0001  
                  __size_of_BothServos 0384                      __end_of_PortTests 3DA6  
                    printRTC@RTC_month 00BC                           ?i2_lcdNibble 0001  
                              UI@i_412 00CA                                UI@i_413 00CB  
                              UI@i_431 00CC                                UI@i_440 00D1  
                              UI@i_432 00CD                                UI@i_409 00C9  
                              UI@i_443 00D2                                UI@i_435 00CE  
                              UI@i_444 00D3                                UI@i_436 00CF  
                              UI@i_447 00D4                                UI@i_439 00D0  
                              UI@i_448 00D5                         ?_initSortTimer 0001  
                              ?___wmul 0080                                ?_getMAG 0001  
                              ?_getRTC 0001                                ?_initUI 0001  
                              ?_readIR 0001                                ?_logRun 0001  
             updateServoPosition@timer 0082                                UI@month 00D6  
                          ?_PortTestA5 0001                                ?_printf 008E  
                              _UI$2314 00C6                                ?_strcpy 0080  
                           ??i2___wmul 0005                             ??i2_getRTC 0004  
                            ?_delay_ms 0001                             ??i2_printf 0019  
                           ??i2_strcpy 0005                              ?_dispLogs 0012  
                              _SSPCON1 000FC6                                _SSPCON2 000FC5  
                          ?_PusherTest 0001                                _SSPSTAT 000FC7  
                              _RTCflag 00DE                                i2_putch 49BC  
                            ?_initTime 0080                        _f_loadingNewCan 00E4  
                      i2printRTC@month 003D                  __size_of_Distribution 01F4  
          __size_ofi2_I2C_Master_Start 0008                      __end_of_lcdNibble 3FD6  
                              _Loading 2D24            __size_ofi2_I2C_Master_Write 000A  
                     EEPROM_write@data 00AD                                __Hparam 0000  
                              __Lparam 0000     __size_ofi2_change_state_to_menu_12 0030  
   __size_ofi2_change_state_to_menu_22 0030                              ?_printRTC 0001  
                              ___awdiv 38C6                                ___awmod 3AEA  
                           _initServos 4150                                ___lldiv 3984  
                      __size_of___wmul 0036                        __size_of_getMAG 0032  
                              ___lwdiv 3DA6                                ___lwmod 3FD6  
                      __size_of_getRTC 0086                        printSortTimer@i 0049  
                            _CMCONbits 000FB4                      retrieveLog@logNum 0007  
                         logRun@byte11 00B6                           ?_BlockerTest 0001  
                      __size_of_initUI 002E                        __size_of_readIR 004C  
                              __pcinit 42A6                   i2EEPROM_read@address 0001  
                      __size_of_logRun 013C                           logRun@byte_i 00B5  
                              __ramtop 1000                         _initGlobalVars 3F06  
                              _lcdInst 49AC                                _handler 0008  
                              __ptext0 3806                                __ptext1 494A  
                              __ptext2 48D0                                __ptext3 2D24  
                              __ptext4 3A40                                __ptext5 3F06  
                              __ptext6 4200                                __ptext7 42F4  
                              __ptext8 4810                                __ptext9 3290  
                      __size_of_printf 0438                                _readADC 47BA  
                      __size_of_strcpy 0036                                _initLCD 438C  
                              _cur_can 00E0                                _loadRTC 3B8C  
                              _readMAG 4340                                _dpowers FB12  
                   actuatorTest@i_1650 00AE                     actuatorTest@i_1651 00AF  
                   actuatorTest@i_1643 00AD                     actuatorTest@i_1660 00B5  
                   actuatorTest@i_1653 00B0                     actuatorTest@i_1670 00BB  
                   actuatorTest@i_1662 00B6                     actuatorTest@i_1654 00B1  
                   actuatorTest@i_1663 00B7                     actuatorTest@i_1680 00C1  
                   actuatorTest@i_1672 00BC                     actuatorTest@i_1656 00B2  
                   actuatorTest@i_1673 00BD                     actuatorTest@i_1665 00B8  
                   actuatorTest@i_1657 00B3                     actuatorTest@i_1682 00C2  
                   actuatorTest@i_1666 00B9                     actuatorTest@i_1683 00C3  
                   actuatorTest@i_1675 00BE                     actuatorTest@i_1659 00B4  
                   actuatorTest@i_1676 00BF                     actuatorTest@i_1669 00BA  
                   actuatorTest@i_1679 00C0                                _isdigit 47E6  
                     ___awmod@dividend 0080                                getRTC@i 0083  
                 __size_of_retrieveLog 0126                             ??_delay_ms 0080  
             __size_of_I2C_Master_Init 0060               __size_of_I2C_Master_Read 002E  
                        _log_startTime 0100               __size_of_I2C_Master_Wait 0014  
             __size_of_I2C_Master_Stop 0008                             ??_dispLogs 0014  
                         _Distribution 2758                         __pintcode_body 2EC0  
                 end_of_initialization 42EA                                logRun@i 00B7  
                           ??_initTime 0086                        ??i2_EEPROM_read 0003  
                              int_func 2EC0                    i2___wmul@multiplier 0001  
                        ??_EEPROM_read 0082                    __size_of_PortTestA5 005C  
            __size_of_I2C_Master_Start 0008              __size_of_I2C_Master_Write 000A  
                      ___lldiv@divisor 0084                        ___lldiv@counter 008C  
                      ??_initSortTimer 0085                                printf@c 00A8  
                         ??i2_printRTC 002A                                printf@f 008E  
                           ??_printRTC 00AB                       I2C_Master_Init@c 008D  
                     I2C_Master_Read@a 0081                                postdec1 000FE5  
                              postdec2 000FDD                                postinc0 000FEE  
                              postinc2 000FDE                 __end_of_initGlobalVars 3F6E  
                           _sensorTest 1C9A                    __size_of_PusherTest 00CA  
                           _servoTimes 011C                              _PORTAbits 000F80  
                            _PORTBbits 000F81                   __end_of_inputHandler 2D24  
                         ??_BothServos 00AB                  __end_of_machineConfig 40F4  
                           _updateMenu 2262                      i2_I2C_Master_Read 4886  
                            _IR_signal 00DA                      i2_I2C_Master_Wait 498A  
                    i2_I2C_Master_Stop 4A00                      i2___lwdiv@divisor 0008  
                      _log_count_total 00F2                              i2___lwdiv 4254  
                            i2___lwmod 43D2                      i2___lwdiv@counter 000C  
                   ?i2_I2C_Master_Read 0001                     ?i2_I2C_Master_Wait 0001  
                   __end_ofi2_printRTC 2758                     ?i2_I2C_Master_Stop 0001  
                        actuatorTest@i 00C4           ??_change_state_to_menu_start 00C4  
                            i2_lcdInst 49C8                          Loading@i_1098 00B6  
                           _total_time 00F8                            printf@width 00A9  
                 __size_of_stopSignals 0016                    ??i2_I2C_Master_Read 0002  
                            i2_isdigit 4914                    ??i2_I2C_Master_Wait 0001  
                  ??i2_I2C_Master_Stop 0002                              i2getRTC@i 0004  
                   __end_of_BothServos 192C                            PusherTest@i 00AC  
                  __end_of_EEPROM_read 494A                            ?_initServos 0001  
                      ?_initGlobalVars 0001                         __end_of___wmul 44F0  
                       __end_of_getMAG 4522                         __end_of_getRTC 3C9E  
                 __size_ofi2_lcdNibble 0056                          EEPROM_write@i 00AF  
                        i2lcdInst@data 0003                         __end_of_initUI 4732  
                       __end_of_readIR 4340                         __end_of_logRun 316A  
                     i2___wmul@product 0005                         __end_of_printf 15A8  
                         i2printf@flag 0026                         __end_of_strcpy 44BA  
            __end_ofi2_I2C_Master_Read 48AC              __end_ofi2_I2C_Master_Wait 499C  
                         i2printf@prec 001D                    start_initialization 42A6  
            __end_ofi2_I2C_Master_Stop 4A08                             readMAG@res 0084  
                    __size_ofi2___wmul 0026                        _count_can_w_lab 005F  
          ?_change_state_to_menu_start 0001                      __size_ofi2_getRTC 0072  
                            i2printf@c 0027                              i2printf@f 000D  
                   EEPROM_write@i_1329 00B0                  i2I2C_Master_Read@temp 0003  
                           ?i2___lwdiv 0006                             ?i2___lwmod 0001  
                    __size_ofi2_printf 036E                      __size_ofi2_strcpy 0032  
                    ??_I2C_Master_Init 0091                      ??_I2C_Master_Read 0081  
                    ??_I2C_Master_Wait 0080                             ?i2_lcdInst 0001  
                    ??_I2C_Master_Stop 0081                       __CFG_OSC$INTIO67 000000  
                           ?i2_isdigit 0001                             initTime@DD 0083  
                           initTime@MM 0084                             initTime@YY 0085  
                      retrieveLog@addr 0010                             logRun@addr 00B9  
                            _SpeedTest 3C9E                               ??___wmul 0084  
                             ??_getMAG 0086                               ??_getRTC 0083  
               __size_of_algorithmTest 00D6                              _PortTests 3D22  
                          ?_sensorTest 0001                            __pdataBANK1 012F  
                     __CFG_LPT1OSC$OFF 000000                               ??_initUI 00C4  
                             ??_readIR 0082                               ??_logRun 00B1  
                         ??_PortTestA5 00AB                 printSortTimer@timeDiff 0047  
     __size_of_change_state_to_menu_11 0030       __size_of_change_state_to_menu_12 0038  
     __size_of_change_state_to_menu_22 0038       __size_of_change_state_to_menu_23 0030  
                             ??_printf 009A       __size_of_change_state_to_logs_11 0030  
     __size_of_change_state_to_logs_12 0030       __size_of_change_state_to_logs_22 0030  
     __size_of_change_state_to_logs_23 002E       __size_of_change_state_to_logs_33 0030  
     __size_of_change_state_to_logs_34 0030                               ??_strcpy 0084  
                  _printSortTimer$2434 0045                   __size_of_BlockerTest 00C8  
                          __pbssCOMRAM 005B           __size_of_updateServoPosition 0076  
                          ?_updateMenu 0001                          __pcstackBANK0 0080  
              __size_of_printSortTimer 01F2                      i2___lwmod@divisor 0003  
                    i2___lwmod@counter 0005                           _isdigit$1958 0081  
                         ??_PusherTest 00AB                      __size_of_delay_ms 0028  
                       initSortTimer@i 0088                      printSortTimer@min 0041  
                    printSortTimer@sec 0043                    __size_of_initServos 005A  
                    __size_of_dispLogs 0024                       printRTC@INT_time 00AE  
                         i2strcpy@from 0003                               ?i2_putch 0001  
                      _count_pop_w_tab 0063                            _EEPROM_read 4932  
                   __end_of_PortTestA5 4150                       _I2C_Master_Start 49F8  
                            _f_lastCan 0071                               ?_Loading 0001  
                  i2I2C_Master_Write@d 0002                       _I2C_Master_Write 49D4  
                    __size_of_initTime 0022                       ___lwdiv@dividend 0080  
                    __CFG_CCP2MX$PORTC 000000                              __pintcode 0008  
                           ?_SpeedTest 0001                          __pmediumconst FB00  
                            _lcdNibble 3F6E                  __size_of_inputHandler 01E6  
                             ?___awdiv 0086                               ?___awmod 0080  
                             ?___lldiv 0080                               ?___lwdiv 0080  
                           ?_PortTests 0001                               ?___lwmod 0087  
                    __size_of_printRTC 02CA                     __end_of_PusherTest 373E  
                             ?_lcdInst 0001                               ?_handler 0001  
                             ?_readADC 0001                               ?_initLCD 0001  
                             ?_loadRTC 0001                               ?_readMAG 0001  
                             ?_isdigit 0001             __size_ofi2_I2C_Master_Read 0026  
           __size_ofi2_I2C_Master_Wait 0012             __size_ofi2_I2C_Master_Stop 0008  
                            _firstboot 0075                              _cur_state 00E2  
                     ___lwdiv@quotient 0084                         __size_of_getIR 0054  
                        _algorithmTest 359E                            ??i2___lwdiv 000A  
                          ??i2___lwmod 0005                         __size_of_putch 0010  
                          __size_of_ID 0116                            __size_of_UI 08A6  
                  __size_of_sensorTest 02FE             __end_ofi2_I2C_Master_Start 4A10  
           __end_ofi2_I2C_Master_Write 49E8                            ??i2_lcdInst 0003  
                       ___wmul@product 0084                               _LATAbits 000F89  
                             _LATCbits 000F8B                               _LATDbits 000F8C  
                             _LATEbits 000F8D                           _inputHandler 2B3E  
                          ??i2_isdigit 0001                           BlockerTest@i 00AC  
                             i2u441_40 1AB2                               i2u441_47 1AA8  
                             _PIR2bits 000FA1                               i2u437_40 1A52  
                             i2u437_47 1A48                               i2u382_40 48A4  
                             i2u480_40 25B0                               i2u718_40 2A7E  
                             i2u861_47 2B7C                               i2u862_47 41C2  
                             i2u863_47 41CC                               i2u864_47 41EE  
                             i2u865_47 41F8                    __size_of_updateMenu 02C0  
                       _log_completion 00E8                       __CFG_WDTPS$32768 000000  
                           ?_lcdNibble 0001                              _was_low_1 0079  
                            _was_low_3 007B                          ??_retrieveLog 0009  
                           _ADCON0bits 000FC2                      ___wmul@multiplier 0080  
                            _startTime 010E                               i2___wmul 4860  
                        lcdNibble@data 0081                               i2_getRTC 3E94  
                           printf@flag 00A7                          lcdNibble@temp 0080  
                           printf@prec 009E                               Loading@i 00B8  
                             i2_printf 192C                               i2_strcpy 4522  
                       ?_algorithmTest 0001                    I2C_Master_Read@temp 0082  
                            copy_data0 42BA                              readIR@res 0084  
                     __size_ofi2_putch 000C                             _EECON1bits 000FA6  
                __end_ofi2_EEPROM_read 4976                            _count_total 00FE  
                     ??_initGlobalVars 0080                               __Hrparam 0000  
                     __size_of_Loading 019C                              initTime@h 0081  
                            initTime@m 0080                              initTime@s 0086  
                            initTime@w 0082                               __Lrparam 0000  
                   __CFG_BOREN$SBORDIS 000000                              logRun@num 00B1  
                          ??_SpeedTest 00AB                  __end_of_initSortTimer 3AEA  
                         ??_initServos 0088                            ??_PortTests 0080  
                     __size_of___awdiv 00BE                       __size_of___awmod 00A2  
              _change_state_to_menu_11 45E4             ?i2_change_state_to_menu_12 0001  
              _change_state_to_menu_12 444C             ?i2_change_state_to_menu_22 0001  
              _change_state_to_menu_22 4414                _change_state_to_menu_23 45B4  
                i2___wmul@multiplicand 0003                       __size_of___lldiv 00BC  
                     __size_of___lwdiv 0078                _change_state_to_logs_11 46D4  
              _change_state_to_logs_12 46A4                _change_state_to_logs_22 4674  
              _change_state_to_logs_23 4760                _change_state_to_logs_33 4644  
              _change_state_to_logs_34 4614                       __size_of___lwmod 0062  
                       readADC@channel 0081                     i2I2C_Master_Read@a 0002  
                     __size_of_lcdInst 0010                       __size_of_handler 3026  
                           _EEPROMTest 4A10                        _I2C_Master_Init 4038  
                     __size_of_readADC 002C                        _I2C_Master_Read 4732  
                     __size_of_initLCD 0046                           _f_ID_receive 006B  
                     __size_of_loadRTC 008C                       __size_of_readMAG 004C  
                      _I2C_Master_Wait 4976                        _I2C_Master_Stop 49F0  
                      BlockerTest@flag 00AE                       __size_of_isdigit 002A  
                             _delay_ms 4810                         _printSortTimer 294C  
                      ___lwdiv@divisor 0082                        ___lwdiv@counter 0086  
                  __end_of_retrieveLog 3290                               __ptext10 44F0  
                             __ptext11 2758                               __ptext20 478E  
                             __ptext12 4098                               __ptext21 48F2  
                             __ptext13 302E                               __ptext30 4732  
                             __ptext22 438C                               __ptext14 34BA  
                             __ptext31 4976                               __ptext23 08CA  
                             __ptext15 4932                               __ptext40 359E  
                             __ptext32 4414                               __ptext24 1F98  
                             __ptext16 4704                               __ptext41 0012  
                             __ptext33 444C                               __ptext25 4484  
                             __ptext17 3B8C                               __ptext50 373E  
                             __ptext42 3C9E                               __ptext34 3AEA  
                             __ptext26 3C18                               __ptext18 4038  
                             __ptext51 1170                               __ptext43 3674  
                             __ptext35 38C6                               __ptext27 49D4  
                             __ptext19 3984                               __ptext60 2262  
                             __ptext52 499C                               __ptext44 3D22  
                             __ptext36 33A6                               __ptext28 49F0  
                             __ptext61 4838                               __ptext53 47E6  
                             __ptext45 40F4                               __ptext37 1C9A  
                             __ptext29 49F8                               __ptext70 4644  
                             __ptext62 2522                               __ptext54 44BA  
                             __ptext46 4A10                               __ptext38 4340  
                             __ptext71 4760                               __ptext63 4522  
                             __ptext55 3FD6                               __ptext47 15A8  
                             __ptext39 47BA                               __ptext80 49BC  
                             __ptext72 4674                               __ptext64 2B3E  
                             __ptext56 3DA6                               __ptext48 4150  
                             __ptext81 4914                               __ptext73 46A4  
                             __ptext65 4554                               __ptext57 49AC  
                             __ptext49 3E1E                               __ptext90 4A08  
                             __ptext82 4860                               __ptext74 46D4  
                             __ptext66 4584                               __ptext58 3F6E  
                             __ptext91 4886                               __ptext83 43D2  
                             __ptext75 48AC                               __ptext67 45B4  
                             __ptext92 498A                               __ptext84 4254  
                             __ptext76 316A                               __ptext68 45E4  
                             __ptext85 49C8                               __ptext77 4960  
                             __ptext69 4614                               __ptext86 41AA  
                             __ptext78 294C                               __ptext87 3E94  
                             __ptext79 192C                               __ptext88 49DE  
                             __ptext89 4A00                               _dispLogs 48AC  
                        ?_actuatorTest 0001                          ??_stopSignals 0080  
                           strcpy@from 0082                         i2_isdigit$1958 0002  
                   __end_of_initServos 41AA                          __size_of_Test 0114  
                        ?_EEPROM_write 00AB                               _initTime 48F2  
                        __size_of_main 00C0                          __size_of_sort 0022  
       ??i2_change_state_to_menu_start 0043                               _logstate 00F6  
                  _updateServoPosition 3E1E                 __size_of_machineConfig 005C  
                        ??i2_lcdNibble 0001                               _printRTC 1F98  
                          ??_lcdNibble 0080                              printRTC@i 00C2  
                             int$flags 007E                           ??_sensorTest 00AB  
                       _log_total_time 00F4                     _f_can_coming_to_ID 006D  
                            printf@len 00A3                              printf@val 00A5  
    __end_ofi2_change_state_to_menu_12 45B4      __end_ofi2_change_state_to_menu_22 4584  
                             loadRTC@i 0096                 __end_of_printSortTimer 2B3E  
                            putch@data 0082               __end_of_I2C_Master_Start 4A00  
                          _OSCTUNEbits 000F9B               __end_of_I2C_Master_Write 49DE  
                           _INTCONbits 000FF2                   ?_updateServoPosition 0080  
                         ??_updateMenu 0043                        ??_algorithmTest 00AB  
                           _MAG_signal 00DC                               isdigit@c 0082  
                        sensorTest@res 00AD                         ??_actuatorTest 00AB  
                             intlevel2 0000                         ??_EEPROM_write 00AE  
                   __end_of_sensorTest 1F98                       ___lwmod@dividend 0087  
                     ___lldiv@dividend 0080                           ?_EEPROM_read 0080  
                  __end_of_stopSignals 4960              ??_change_state_to_menu_11 002A  
            ??_change_state_to_menu_12 00AB              ??_change_state_to_menu_22 00AB  
            ??_change_state_to_menu_23 002A              ??_change_state_to_logs_11 002A  
            ??_change_state_to_logs_12 002A              ??_change_state_to_logs_22 002A  
            ??_change_state_to_logs_23 002A              ??_change_state_to_logs_33 002A  
            ??_change_state_to_logs_34 002A                               printf@ap 00A1  
                             printf@cp 009F                     __end_of_updateMenu 2522  
              __end_of_I2C_Master_Init 4098                __end_of_I2C_Master_Read 4760  
              __end_of_I2C_Master_Wait 498A                          ??_BlockerTest 00AB  
              __end_of_I2C_Master_Stop 49F8                            lcdInst@data 0082  
                        printRTC@F3216 0133                           retrieveLog@i 000E  
                          _retrieveLog 316A                    __end_ofi2_lcdNibble 4200  
                ??_updateServoPosition 0084                        ?_printSortTimer 0001  
                     ___lldiv@quotient 0088                      I2C_Master_Write@d 0081  
                          ?_EEPROMTest 0001                        ___lwmod@divisor 0089  
                    _f_can_distributed 012B                               strcpy@cp 0084  
                             strcpy@to 0080                          _machineConfig 4098  
                      ___lwmod@counter 008B                          printRTC@month 00BE  
                        ?_Distribution 0001                          _machine_state 00FC  
                        dispLogs@myLog 0012                     i2printRTC@INT_time 002D  
